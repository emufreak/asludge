
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115095,d0
       8:	       subi.l #115095,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c197 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115095,d0
      40:	       subi.l #115095,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c197 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7d02 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115095,d0
      7e:	       subi.l #115095,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c197 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13ac6 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c948 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13ade <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c198 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13ac6 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c948 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c198 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13ac6 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c948 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17b60 <PutChar+0x4>
     35c:	|  |              |   jsr 170ba <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c950 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c950 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c950 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c950 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c950 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c950 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c950 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17b8a <PutChar+0x2e>
     834:	|   jsr 170ba <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c950 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17ba6 <PutChar+0x4a>
     8a6:	|   jsr 170ba <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c950 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c950 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c950 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c950 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c950 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c950 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c950 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c950 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c948 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c950 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13ac6 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c950 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c842 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c842 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c842 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c842 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c842 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c908 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c842 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c842 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c904 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c842 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c842 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 141a <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c842 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9640 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c842 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c846 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c84a <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2b36 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -20(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17bce <PutChar+0x72>
     e1a:	          jsr 170ba <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c85e <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17be7 <PutChar+0x8b>
     e30:	      |   jsr 170ba <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w ff2 <CstBlankScreen+0x1e4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1c858 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,12(sp)

  WaitBlit();
     e4a:	|         move.l 1c954 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 36(sp),d0
     e5a:	|         sub.l 28(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,10(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 40(sp),d0
     e6c:	|         move.l 32(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,8(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 12(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 12(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 12(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 12(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 12(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 10(sp),d0
     eb0:	|         movea.l 12(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 12(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 12(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1c85e <CstBackDrop>,d0
     ed2:	|         move.l d0,20(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 28(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 32(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,20(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 8(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 10(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,6(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 10(sp),d0
     f10:	|         muls.w 8(sp),d0
     f14:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17c15 <PutChar+0xb9>
     f1e:	|         jsr 170ba <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 16(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 20(sp),d0
     f30:	|  |  |   movea.l 12(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 12(sp),a0
     f3c:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1c954 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,20(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,16(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 16(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 17c35 <PutChar+0xd9>
     f68:	|         jsr 170ba <KPrintF>
     f6e:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f70:	|         move.w #2,1c86a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f78:	|         move.l 1c89c <winWidth>,d0
     f7e:	|         lsr.l #4,d0
     f80:	|         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
     f86:	|         move.l a0,d1
     f88:	|         addq.l #2,d1
     f8a:	|         move.l d1,1c880 <CstBackDropBufferApplyCursor>
     f90:	|         move.l d0,d0
     f92:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f94:	|         move.l 1c8a0 <winHeight>,d0
     f9a:	|         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
     fa0:	|         move.l a0,d1
     fa2:	|         addq.l #2,d1
     fa4:	|         move.l d1,1c880 <CstBackDropBufferApplyCursor>
     faa:	|         move.l d0,d0
     fac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fae:	|         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
     fb4:	|         move.l a0,d0
     fb6:	|         addq.l #2,d0
     fb8:	|         move.l d0,1c880 <CstBackDropBufferApplyCursor>
     fbe:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fc0:	|         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
     fc6:	|         move.l a0,d0
     fc8:	|         addq.l #2,d0
     fca:	|         move.l d0,1c880 <CstBackDropBufferApplyCursor>
     fd0:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fd2:	|         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
     fd8:	|         move.l a0,d0
     fda:	|         addq.l #2,d0
     fdc:	|         move.l d0,1c880 <CstBackDropBufferApplyCursor>
     fe2:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fe4:	|         pea 17c55 <PutChar+0xf9>
     fea:	|         jsr 170ba <KPrintF>
     ff0:	|         addq.l #4,sp


}
     ff2:	'-------> movea.l (sp)+,a6
     ff4:	          lea 20(sp),sp
     ff8:	          rts

00000ffa <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     ffa:	       lea -52(sp),sp
     ffe:	       move.l a6,-(sp)
    1000:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    1002:	       move.l #400,32(sp)
    100a:	       moveq #2,d0
    100c:	       move.l d0,28(sp)
    1010:	       move.l 1c948 <SysBase>,d0
    1016:	       movea.l d0,a6
    1018:	       move.l 32(sp),d0
    101c:	       move.l 28(sp),d1
    1020:	       jsr -198(a6)
    1024:	       move.l d0,24(sp)
    1028:	       move.l 24(sp),d0
    102c:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1030:	   ,-- bne.s 105a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1032:	   |   pea 28 <_start+0x28>
    1036:	   |   pea 17c6a <PutChar+0x10e>
    103c:	   |   jsr 170ba <KPrintF>
    1042:	   |   addq.l #8,sp
    Exit(1);
    1044:	   |   moveq #1,d1
    1046:	   |   move.l d1,16(sp)
    104a:	   |   move.l 1c950 <DOSBase>,d0
    1050:	   |   movea.l d0,a6
    1052:	   |   move.l 16(sp),d1
    1056:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    105a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1060:	       move.l 56(sp),1c88c <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1068:	       move.l #115098,52(sp)
  for(int i=0; i<16;i++)
    1070:	       clr.l 48(sp)
    1074:	   ,-- bra.s 109a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1076:	,--|-> move.l 52(sp),d1
    107a:	|  |   move.l d1,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,52(sp)
    1082:	|  |   move.l 56(sp),d0
    1086:	|  |   move.l d0,d2
    1088:	|  |   addq.l #4,d2
    108a:	|  |   move.l d2,56(sp)
    108e:	|  |   movea.l d1,a0
    1090:	|  |   move.l (a0),d1
    1092:	|  |   movea.l d0,a0
    1094:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1096:	|  |   addq.l #1,48(sp)
    109a:	|  '-> moveq #15,d0
    109c:	|      cmp.l 48(sp),d0
    10a0:	'----- bge.s 1076 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    10a2:	       move.l #115162,52(sp)

  for(int i=0; i<12;i++)
    10aa:	       clr.l 44(sp)
    10ae:	   ,-- bra.s 10d4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    10b0:	,--|-> move.l 52(sp),d1
    10b4:	|  |   move.l d1,d2
    10b6:	|  |   addq.l #4,d2
    10b8:	|  |   move.l d2,52(sp)
    10bc:	|  |   move.l 56(sp),d0
    10c0:	|  |   move.l d0,d2
    10c2:	|  |   addq.l #4,d2
    10c4:	|  |   move.l d2,56(sp)
    10c8:	|  |   movea.l d1,a0
    10ca:	|  |   move.l (a0),d1
    10cc:	|  |   movea.l d0,a0
    10ce:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10d0:	|  |   addq.l #1,44(sp)
    10d4:	|  '-> moveq #11,d0
    10d6:	|      cmp.l 44(sp),d0
    10da:	'----- bge.s 10b0 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10dc:	       move.l #115210,52(sp)
  for(int i=0; i<10;i++)
    10e4:	       clr.l 40(sp)
    10e8:	   ,-- bra.s 110e <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10ea:	,--|-> move.l 52(sp),d1
    10ee:	|  |   move.l d1,d2
    10f0:	|  |   addq.l #4,d2
    10f2:	|  |   move.l d2,52(sp)
    10f6:	|  |   move.l 56(sp),d0
    10fa:	|  |   move.l d0,d2
    10fc:	|  |   addq.l #4,d2
    10fe:	|  |   move.l d2,56(sp)
    1102:	|  |   movea.l d1,a0
    1104:	|  |   move.l (a0),d1
    1106:	|  |   movea.l d0,a0
    1108:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    110a:	|  |   addq.l #1,40(sp)
    110e:	|  '-> moveq #9,d0
    1110:	|      cmp.l 40(sp),d0
    1114:	'----- bge.s 10ea <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    1116:	       move.l #115250,52(sp)
  CstClColor = (UWORD *) cl;
    111e:	       move.l 56(sp),1c884 <CstClColor>
  for(int i=0; i<32;i++)
    1126:	       clr.l 36(sp)
    112a:	   ,-- bra.s 1150 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    112c:	,--|-> move.l 52(sp),d1
    1130:	|  |   move.l d1,d2
    1132:	|  |   addq.l #4,d2
    1134:	|  |   move.l d2,52(sp)
    1138:	|  |   move.l 56(sp),d0
    113c:	|  |   move.l d0,d2
    113e:	|  |   addq.l #4,d2
    1140:	|  |   move.l d2,56(sp)
    1144:	|  |   movea.l d1,a0
    1146:	|  |   move.l (a0),d1
    1148:	|  |   movea.l d0,a0
    114a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    114c:	|  |   addq.l #1,36(sp)
    1150:	|  '-> moveq #31,d0
    1152:	|      cmp.l 36(sp),d0
    1156:	'----- bge.s 112c <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1158:	       moveq #40,d1
    115a:	       cmp.l 64(sp),d1
    115e:	   ,-- bge.s 11bc <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1160:	   |   moveq #-40,d2
    1162:	   |   add.l 64(sp),d2
    1166:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    116a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1170:	   |   move.l 8(sp),d0
    1174:	   |   move.l d0,d1
    1176:	   |   addq.l #2,d1
    1178:	   |   move.l d1,8(sp)
    117c:	   |   movea.l d0,a0
    117e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1182:	   |   move.l 8(sp),d0
    1186:	   |   move.l d0,d1
    1188:	   |   addq.l #2,d1
    118a:	   |   move.l d1,8(sp)
    118e:	   |   move.l 12(sp),d1
    1192:	   |   movea.l d0,a0
    1194:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1196:	   |   move.l 8(sp),d0
    119a:	   |   move.l d0,d1
    119c:	   |   addq.l #2,d1
    119e:	   |   move.l d1,8(sp)
    11a2:	   |   movea.l d0,a0
    11a4:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    11a8:	   |   move.l 8(sp),d0
    11ac:	   |   move.l d0,d1
    11ae:	   |   addq.l #2,d1
    11b0:	   |   move.l d1,8(sp)
    11b4:	   |   move.l 12(sp),d1
    11b8:	   |   movea.l d0,a0
    11ba:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    11bc:	   '-> move.l 56(sp),d0
    11c0:	       move.l d0,d1
    11c2:	       addq.l #4,d1
    11c4:	       move.l d1,56(sp)
    11c8:	       moveq #-2,d2
    11ca:	       movea.l d0,a0
    11cc:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11ce:	       move.l 20(sp),d0
}
    11d2:	       move.l (sp)+,d2
    11d4:	       movea.l (sp)+,a6
    11d6:	       lea 52(sp),sp
    11da:	       rts

000011dc <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11dc:	                lea -40(sp),sp
    11e0:	                move.l a6,-(sp)
    11e2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11e4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11ec:	                pea 17ca5 <PutChar+0x149>
    11f2:	                jsr 170ba <KPrintF>
    11f8:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11fa:	                move.l 1c87c <CstBackDropBufferApplyStart>,d0
    1200:	                move.l d0,1c880 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1206:	                move.l 1c87c <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    120e:	                movea.l 44(sp),a0
    1212:	                move.w (a0),d0
    1214:	,-------------- beq.w 140e <CstDisplayBackDrop+0x232>
    1218:	|               move.l 1c870 <CstDrawBuffer>,d0
    121e:	+-------------- beq.w 140e <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1222:	|               move.l 1c954 <GfxBase>,d0
    1228:	|               movea.l d0,a6
    122a:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    122e:	|               movea.l 16(sp),a0
    1232:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1238:	|               movea.l 16(sp),a0
    123c:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1242:	|               movea.l 16(sp),a0
    1246:	|               move.w #2544,64(a0)
  
  while(*cursor)
    124c:	|     ,-------- bra.w 13b4 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1250:	|  ,--|-------> move.l 44(sp),d0
    1254:	|  |  |         move.l d0,d1
    1256:	|  |  |         addq.l #2,d1
    1258:	|  |  |         move.l d1,44(sp)
    125c:	|  |  |         movea.l d0,a0
    125e:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1262:	|  |  |         move.l 44(sp),d0
    1266:	|  |  |         move.l d0,d1
    1268:	|  |  |         addq.l #2,d1
    126a:	|  |  |         move.l d1,44(sp)
    126e:	|  |  |         movea.l d0,a0
    1270:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1274:	|  |  |         move.l 44(sp),d0
    1278:	|  |  |         move.l d0,d1
    127a:	|  |  |         addq.l #2,d1
    127c:	|  |  |         move.l d1,44(sp)
    1280:	|  |  |         movea.l d0,a0
    1282:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1286:	|  |  |         move.l 44(sp),d0
    128a:	|  |  |         move.l d0,d1
    128c:	|  |  |         addq.l #2,d1
    128e:	|  |  |         move.l d1,44(sp)
    1292:	|  |  |         movea.l d0,a0
    1294:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    1298:	|  |  |         move.l 1c89c <winWidth>,d0
    129e:	|  |  |         lsr.l #3,d0
    12a0:	|  |  |         move.l d0,d1
    12a2:	|  |  |         move.w 14(sp),d0
    12a6:	|  |  |         add.w d0,d0
    12a8:	|  |  |         sub.w d0,d1
    12aa:	|  |  |         movea.l 16(sp),a0
    12ae:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    12b2:	|  |  |         move.l 1c89c <winWidth>,d0
    12b8:	|  |  |         lsr.l #3,d0
    12ba:	|  |  |         move.l d0,d1
    12bc:	|  |  |         move.w 14(sp),d0
    12c0:	|  |  |         add.w d0,d0
    12c2:	|  |  |         sub.w d0,d1
    12c4:	|  |  |         movea.l 16(sp),a0
    12c8:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12cc:	|  |  |         moveq #0,d0
    12ce:	|  |  |         move.w 8(sp),d0
    12d2:	|  |  |         move.l 1c89c <winWidth>,d1
    12d8:	|  |  |         move.l d1,-(sp)
    12da:	|  |  |         move.l d0,-(sp)
    12dc:	|  |  |         jsr 17a46 <__mulsi3>
    12e2:	|  |  |         addq.l #8,sp
    12e4:	|  |  |         move.l d0,d1
    12e6:	|  |  |         lsr.l #3,d1
    12e8:	|  |  |         move.l 1c85e <CstBackDrop>,d0
    12ee:	|  |  |         add.l d0,d1
    12f0:	|  |  |         moveq #0,d0
    12f2:	|  |  |         move.w 10(sp),d0
    12f6:	|  |  |         move.l d1,d2
    12f8:	|  |  |         add.l d0,d2
    12fa:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12fe:	|  |  |         moveq #0,d0
    1300:	|  |  |         move.w 8(sp),d0
    1304:	|  |  |         move.l 1c89c <winWidth>,d1
    130a:	|  |  |         move.l d1,-(sp)
    130c:	|  |  |         move.l d0,-(sp)
    130e:	|  |  |         jsr 17a46 <__mulsi3>
    1314:	|  |  |         addq.l #8,sp
    1316:	|  |  |         move.l d0,d1
    1318:	|  |  |         lsr.l #3,d1
    131a:	|  |  |         move.l 1c870 <CstDrawBuffer>,d0
    1320:	|  |  |         add.l d0,d1
    1322:	|  |  |         moveq #0,d0
    1324:	|  |  |         move.w 10(sp),d0
    1328:	|  |  |         move.l d1,d2
    132a:	|  |  |         add.l d0,d2
    132c:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1330:	|  |  |         clr.l 32(sp)
    1334:	|  |  |     ,-- bra.s 13ac <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1336:	|  |  |  ,--|-> move.l 40(sp),d0
    133a:	|  |  |  |  |   movea.l 16(sp),a0
    133e:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1342:	|  |  |  |  |   move.l 36(sp),d0
    1346:	|  |  |  |  |   movea.l 16(sp),a0
    134a:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    134e:	|  |  |  |  |   move.w 12(sp),d0
    1352:	|  |  |  |  |   lsl.w #6,d0
    1354:	|  |  |  |  |   add.w 14(sp),d0
    1358:	|  |  |  |  |   movea.l 16(sp),a0
    135c:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1360:	|  |  |  |  |   move.l 1c89c <winWidth>,d0
    1366:	|  |  |  |  |   lsr.l #3,d0
    1368:	|  |  |  |  |   move.l 1c8a0 <winHeight>,d1
    136e:	|  |  |  |  |   move.l d1,-(sp)
    1370:	|  |  |  |  |   move.l d0,-(sp)
    1372:	|  |  |  |  |   jsr 17a46 <__mulsi3>
    1378:	|  |  |  |  |   addq.l #8,sp
    137a:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    137e:	|  |  |  |  |   move.l 1c89c <winWidth>,d0
    1384:	|  |  |  |  |   lsr.l #3,d0
    1386:	|  |  |  |  |   move.l 1c8a0 <winHeight>,d1
    138c:	|  |  |  |  |   move.l d1,-(sp)
    138e:	|  |  |  |  |   move.l d0,-(sp)
    1390:	|  |  |  |  |   jsr 17a46 <__mulsi3>
    1396:	|  |  |  |  |   addq.l #8,sp
    1398:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    139c:	|  |  |  |  |   move.l 1c954 <GfxBase>,d0
    13a2:	|  |  |  |  |   movea.l d0,a6
    13a4:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    13a8:	|  |  |  |  |   addq.l #1,32(sp)
    13ac:	|  |  |  |  '-> moveq #4,d0
    13ae:	|  |  |  |      cmp.l 32(sp),d0
    13b2:	|  |  |  '----- bge.s 1336 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    13b4:	|  |  '-------> movea.l 44(sp),a0
    13b8:	|  |            move.w (a0),d0
    13ba:	|  '----------- bne.w 1250 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    13be:	|               move.l 1c888 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    13c6:	|               move.l 1c884 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13ce:	|               clr.l 20(sp)
    13d2:	|           ,-- bra.s 1404 <CstDisplayBackDrop+0x228>
    *tmp++;
    13d4:	|        ,--|-> move.l 24(sp),d0
    13d8:	|        |  |   move.l d0,d1
    13da:	|        |  |   addq.l #2,d1
    13dc:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13e0:	|        |  |   move.l 28(sp),d1
    13e4:	|        |  |   move.l d1,d2
    13e6:	|        |  |   addq.l #2,d2
    13e8:	|        |  |   move.l d2,28(sp)
    13ec:	|        |  |   move.l 24(sp),d0
    13f0:	|        |  |   move.l d0,d2
    13f2:	|        |  |   addq.l #2,d2
    13f4:	|        |  |   move.l d2,24(sp)
    13f8:	|        |  |   movea.l d1,a0
    13fa:	|        |  |   move.w (a0),d1
    13fc:	|        |  |   movea.l d0,a0
    13fe:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1400:	|        |  |   addq.l #1,20(sp)
    1404:	|        |  '-> moveq #31,d0
    1406:	|        |      cmp.l 20(sp),d0
    140a:	|        '----- bge.s 13d4 <CstDisplayBackDrop+0x1f8>
    140c:	|           ,-- bra.s 1410 <CstDisplayBackDrop+0x234>
    return;
    140e:	'-----------|-> nop
  }
}
    1410:	            '-> move.l (sp)+,d2
    1412:	                movea.l (sp)+,a6
    1414:	                lea 40(sp),sp
    1418:	                rts

0000141a <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    141a:	lea -20(sp),sp
    141e:	movea.l 24(sp),a0
    1422:	move.l 28(sp),d1
    1426:	move.l 32(sp),d0
    142a:	movea.w a0,a0
    142c:	move.w a0,4(sp)
    1430:	move.w d1,d1
    1432:	move.w d1,2(sp)
    1436:	move.w d0,d0
    1438:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    143a:	move.w 2(sp),d0
    143e:	movea.l 36(sp),a0
    1442:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1444:	move.w 4(sp),d0
    1448:	lsr.w #1,d0
    144a:	movea.l 36(sp),a0
    144e:	addq.l #1,a0
    1450:	move.l d0,d0
    1452:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1454:	move.w 2(sp),d1
    1458:	move.w (sp),d0
    145a:	movea.l 36(sp),a0
    145e:	addq.l #2,a0
    1460:	add.b d1,d0
    1462:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1464:	move.w 4(sp),d0
    1468:	andi.w #1,d0
    146c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1470:	move.w 2(sp),d0
    1474:	add.w (sp),d0
    1476:	move.w d0,d0
    1478:	andi.l #65535,d0
    147e:	asr.l #7,d0
    1480:	move.l d0,d0
    1482:	move.w d0,d1
    1484:	andi.w #2,d1
    1488:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    148c:	moveq #0,d0
    148e:	move.w 2(sp),d0
    1492:	asr.l #6,d0
    1494:	move.l d0,d0
    1496:	move.w d0,d1
    1498:	andi.w #4,d1
    149c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14a0:	move.w 18(sp),d1
    14a4:	move.w 16(sp),d0
    14a8:	add.b d0,d1
    14aa:	move.w 14(sp),d0
    14ae:	movea.l 36(sp),a0
    14b2:	addq.l #3,a0
    14b4:	add.b d1,d0
    14b6:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14b8:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14be:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14c4:	move.l 10(sp),d0
    14c8:	clr.w d0
    14ca:	swap d0
    14cc:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14d0:	move.l 1c88c <CstClCursor>,d0
    14d6:	movea.l d0,a0
    14d8:	addq.l #2,a0
    14da:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14de:	move.l 1c88c <CstClCursor>,d0
    14e4:	movea.l d0,a0
    14e6:	addq.l #6,a0
    14e8:	move.w 8(sp),(a0)

}
    14ec:	nop
    14ee:	lea 20(sp),sp
    14f2:	rts

000014f4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14f4:	    move.w 1c86a <CstApplyBackDropCounter>,d0
    14fa:	,-- beq.s 1510 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14fc:	|   jsr 11dc <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    1502:	|   move.w 1c86a <CstApplyBackDropCounter>,d0
    1508:	|   subq.w #1,d0
    150a:	|   move.w d0,1c86a <CstApplyBackDropCounter>
  }    
}
    1510:	'-> nop
    1512:	    rts

00001514 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1514:	                                                             subq.l #8,sp
    1516:	                                                             movem.l d2-d7/a2-a6,-(sp)
    151a:	                                                             movea.l 56(sp),a3
    151e:	                                                             movea.l 60(sp),a2
    1522:	                                                             move.l 64(sp),d0
    1526:	                                                             move.l 68(sp),d7
    152a:	                                                             movea.w d0,a4
    152c:	                                                             move.w d7,50(sp)
  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
  #endif    

  while(zbuffer) 
    1530:	                                                             cmpa.w #0,a2
    1534:	,----------------------------------------------------------- beq.w 19d0 <CstDrawZBuffer+0x4bc>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1538:	|                                                            move.w d0,48(sp)
    153c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    153e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1542:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1544:	|                       ,----------------------------------> move.w a5,d3
    1546:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1548:	|                       |                                    andi.l #65535,d3
    154e:	|                       |                                    cmp.l 16(a2),d3
    1552:	|                       |  ,-------------------------------- bge.w 16ec <CstDrawZBuffer+0x1d8>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1556:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    155a:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    155e:	|                       |  |                                 move.w d6,d0
    1560:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1564:	|                       |  |                                 move.w 6(a2),d4
    1568:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    156a:	|                       |  |                                 cmp.w a4,d6
    156c:	|                    ,--|--|-------------------------------- bge.w 1864 <CstDrawZBuffer+0x350>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1570:	|                    |  |  |                                 cmp.w a4,d0
    1572:	|        ,-----------|--|--|-------------------------------- ble.w 16ea <CstDrawZBuffer+0x1d6>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1576:	|        |           |  |  |                                 move.w 50(sp),d0
    157a:	|        |           |  |  |                                 cmp.w d0,d5
    157c:	|        |     ,-----|--|--|-------------------------------- blt.w 19b0 <CstDrawZBuffer+0x49c>
    1580:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1582:	|        |     |     |  |  |                                 cmpa.l d3,a0
    1584:	|        +-----|-----|--|--|-------------------------------- bge.w 16ea <CstDrawZBuffer+0x1d6>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1588:	|        |     |     |  |  |                                 move.w 48(sp),d0
    158c:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    158e:	|        |     |     |  |  |                                 move.w d0,d6
    1590:	|        |     |     |  |  |                                 andi.w #15,d6
    1594:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1596:	|        |     |     |  |  |                                 tst.l d2
    1598:	|        |  ,--|-----|--|--|-------------------------------- blt.w 170c <CstDrawZBuffer+0x1f8>
    159c:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    159e:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15a0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
          custom->bltalwm = 0xffff;                      
    15a8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
          custom->bltcon1 = 0;          
    15b0:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    15b8:	|        |  |  |  |  |  |  |                                 lea 1c954 <GfxBase>,a0
    15be:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    15c0:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    15c2:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    15c4:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15c6:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    15cc:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    15d0:	|        |  |  |  |  |  |  |                                 clr.w d0
    15d2:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    15d4:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 174c <CstDrawZBuffer+0x238>
            bytewidth += 2; 
    15d8:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    15da:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    15de:	|        |  |  |  |  |  |  |           |     |               move.l 1c894 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    15e8:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    15ea:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    15ec:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    15ee:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    15f2:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    15f4:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    15fa:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    15fc:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    15fe:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1a6a <CstDrawZBuffer+0x556>
    1602:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1604:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1606:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
            custom->bltdmod = 0;                                                            
    160c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1614:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1616:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1618:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    161a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    161c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 178c <CstDrawZBuffer+0x278>
          height = sprite->height;
    1620:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1624:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1626:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1628:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    162a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17a46 <__mulsi3>
    1630:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1632:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1634:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17a2 <CstDrawZBuffer+0x28e>
    1638:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    163a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    163c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
        UWORD bltsize =  height*64+bytewidth/2;          
    1642:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1644:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1646:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1648:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
       
        WaitBlit();
    164e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1c954 <GfxBase>,a0
    1654:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1656:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    165a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
        custom->bltalwm = 0xffff;
    1662:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
        custom->bltamod = 2;
    166a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
        custom->bltbmod = 0;
    1672:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e5a>
        custom->bltdmod = 0;
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1682:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
        custom->bltcon1 = 0;        
    168a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1692:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1c894 <CstZBufferWork>,d0
    1698:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    169a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16a0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16a2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16a6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16a8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 182c <CstDrawZBuffer+0x318>
    16ac:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16ae:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    16b0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16b2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17a46 <__mulsi3>
    16b8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    16ba:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    16bc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16be:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    16c0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16c2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    16c6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
        custom->bltdpt = (APTR) CstZBufferResult;
    16cc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1c890 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16d6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    16d8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    16da:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    16dc:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 181a <CstDrawZBuffer+0x306>
    16e0:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    16e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    16e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
      zbufferset = 1;
    16ea:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    16ec:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    16f0:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    16f4:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1544 <CstDrawZBuffer+0x30>
  }
  
  if(zbufferset == 0)
    16f8:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    16fa:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 19d0 <CstDrawZBuffer+0x4bc>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    16fe:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1c890 <CstZBufferResult>,d0

}
    1704:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1708:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    170a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    170c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    170e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1710:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1712:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1714:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
          custom->bltalwm = 0xffff;                      
    171c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
          custom->bltcon1 = 0;          
    1724:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>
            WaitBlit();   
    172c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1c954 <GfxBase>,a0
    1732:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1734:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1736:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1738:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    173a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1740:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1744:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1746:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1748:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 15d8 <CstDrawZBuffer+0xc4>
            WaitBlit();         
    174c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1750:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1c894 <CstZBufferWork>,d0
    1756:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    1758:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
            custom->bltcon0 = 4096 + 0x9f0;              
    175e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1766:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    1768:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    176a:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1a82 <CstDrawZBuffer+0x56e>
    176e:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1770:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1772:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
            custom->bltdmod = 2;                                                            
    1778:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1780:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    1782:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1784:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    1786:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    1788:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1620 <CstDrawZBuffer+0x10c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    178c:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    178e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    1790:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    1792:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    1794:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17a46 <__mulsi3>
    179a:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    179c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    179e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1638 <CstDrawZBuffer+0x124>
    17a2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17a4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17a6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17a8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
        UWORD bltsize =  height*64+bytewidth/2;          
    17ae:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17b0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17b2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17b4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
        WaitBlit();
    17ba:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1c954 <GfxBase>,a0
    17c0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    17c2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    17c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
        custom->bltalwm = 0xffff;
    17ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
        custom->bltamod = 2;
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
        custom->bltbmod = 0;
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e5a>
        custom->bltdmod = 0;
    17e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
        custom->bltcon0 = 0xd0c; //Copy A to D
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
        custom->bltcon1 = 0;        
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1c894 <CstZBufferWork>,d0
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    180c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    180e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16ac <CstDrawZBuffer+0x198>
    1818:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 182c <CstDrawZBuffer+0x318>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    181a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    181c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    181e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1820:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1822:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    1828:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 16ea <CstDrawZBuffer+0x1d6>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    182c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    182e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1830:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1832:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1834:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17a46 <__mulsi3>
    183a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    183c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    183e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1840:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1842:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1844:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1848:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
        custom->bltdpt = (APTR) CstZBufferResult;
    184e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1c890 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1858:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    185a:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    185c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    185e:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 16e0 <CstDrawZBuffer+0x1cc>
    1862:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 181a <CstDrawZBuffer+0x306>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1864:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    1868:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    186a:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1870:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1872:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1874:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1876:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 16ea <CstDrawZBuffer+0x1d6>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    187a:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    187e:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    1880:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 198c <CstDrawZBuffer+0x478>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1884:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    1888:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 16ea <CstDrawZBuffer+0x1d6>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    188c:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1890:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    1892:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    1894:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1896:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    189a:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    189e:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18a0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 192a <CstDrawZBuffer+0x416>
    18a4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18a6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18a8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18aa:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18ac:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    18ae:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 193c <CstDrawZBuffer+0x428>
            WaitBlit();  
    18b2:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1c954 <GfxBase>,a0
    18b8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    18ba:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    18be:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
            custom->bltalwm = 0xffff;          
    18c6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
            custom->bltdpt = CstZBufferWork;        
    18ce:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1c894 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
            custom->bltcon1 = 0;               
    18d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    18e0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    18e4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    18e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    18e8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1954 <CstDrawZBuffer+0x440>
    18ea:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    18ec:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    18ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    18f0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    18f4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1962 <CstDrawZBuffer+0x44e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    18f6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    18fa:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    18fc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    18fe:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1902:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1908:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
              custom->bltdmod = 0;                                                            
    190e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
              xdiffbyte += 2;                 
    1916:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1918:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    191a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    191c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1922:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1924:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1926:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1614 <CstDrawZBuffer+0x100>
          bytewidth = (sprite->width/16)*2 + 2;
    192a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    192c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    192e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1930:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1932:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1934:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1936:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1938:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 18b2 <CstDrawZBuffer+0x39e>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17cc1 <PutChar+0x165>
    1942:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 170ba <KPrintF>
              return FALSE;
    1948:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    194a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    194c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1950:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1952:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1954:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1956:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1958:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    195a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    195c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1960:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 18f6 <CstDrawZBuffer+0x3e2>
              custom->bltcon0 = 0x9f0;              
    1962:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    196a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
              custom->bltdmod = 0;                                                            
    1970:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
              xdiffbyte += 2;                 
    1978:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    197a:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    197c:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    197e:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1984:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1986:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    1988:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1614 <CstDrawZBuffer+0x100>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    198c:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    198e:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1990:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 16ea <CstDrawZBuffer+0x1d6>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1994:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1998:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    199a:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    199c:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    199e:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19a2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19a6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19a8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18a4 <CstDrawZBuffer+0x390>
    19ac:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 192a <CstDrawZBuffer+0x416>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19b0:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    19b4:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 16ea <CstDrawZBuffer+0x1d6>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    19b8:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    19bc:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    19be:	|  |  |     |     |     |  |                                 move.w d0,d6
    19c0:	|  |  |     |     |     |  |                                 andi.w #15,d6
    19c4:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    19c6:	|  |  |     |     |     |  |                                 tst.l d2
    19c8:	|  |  |     |     '-----|--|-------------------------------- bge.w 159c <CstDrawZBuffer+0x88>
    19cc:	|  |  |     '-----------|--|-------------------------------- bra.w 170c <CstDrawZBuffer+0x1f8>
    WaitBlit();
    19d0:	'--|--|-----------------|--|-------------------------------> movea.l 1c954 <GfxBase>,a6
    19d6:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    19da:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
    custom->bltalwm = 0xffff;
    19e2:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
    custom->bltamod = 0;
    19ea:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
    custom->bltbmod = 0;
    19f2:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e5a>
    custom->bltcmod = 0;
    19fa:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e58>
    custom->bltdmod = 0;
    1a02:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a0a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
    custom->bltcon1 = 0;        
    1a12:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a1a:	   |  |                 |  |                                 move.l (a3),d2
    1a1c:	   |  |                 |  |                                 move.l 4(a3),d3
    1a20:	   |  |                 |  |                                 move.l d2,d0
    1a22:	   |  |                 |  |                       ,-------- bmi.w 1aaa <CstDrawZBuffer+0x596>
    1a26:	   |  |                 |  |                       |         asr.l #3,d0
    1a28:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a2a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a2c:	   |  |                 |  |                       |         jsr 17a46 <__mulsi3>
    1a32:	   |  |                 |  |                       |         addq.l #8,sp
    1a34:	   |  |                 |  |                       |         move.l d0,d1
    1a36:	   |  |                 |  |                       |         add.l d0,d1
    1a38:	   |  |                 |  |                       |         add.l d1,d1
    1a3a:	   |  |                 |  |                       |         add.l d1,d0
    1a3c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a40:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a46:	   |  |                 |  |                       |         move.l 1c890 <CstZBufferResult>,d0
    1a4c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1a52:	   |  |                 |  |                       |         lsl.w #6,d3
    1a54:	   |  |                 |  |                       |         tst.l d2
    1a56:	   |  |                 |  |                    ,--|-------- blt.s 1a9a <CstDrawZBuffer+0x586>
    1a58:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1a5a:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1a5c:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
}
    1a62:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1a66:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1a68:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1a6a:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1a6c:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1a6e:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1a70:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
            custom->bltdmod = 0;                                                            
    1a76:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
    1a7e:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1614 <CstDrawZBuffer+0x100>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1a82:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1a84:	                           |                    |  |  |  |   asr.l #3,d1
    1a86:	                           |                    |  |  |  |   sub.w d2,d1
    1a88:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
            custom->bltdmod = 2;                                                            
    1a8e:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
    1a96:	                           '--------------------|--|--|--|-- bra.w 1780 <CstDrawZBuffer+0x26c>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1a9a:	                                                >--|--|--|-> moveq #15,d1
    1a9c:	                                                |  |  |  |   add.l d1,d2
    1a9e:	                                                |  |  |  |   asr.l #4,d2
    1aa0:	                                                |  |  |  |   add.w d2,d3
    1aa2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
  return CstZBufferResult;
    1aa8:	                                                |  |  |  '-- bra.s 1a62 <CstDrawZBuffer+0x54e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aaa:	                                                |  '--|----> addq.l #7,d0
    1aac:	                                                |     |      asr.l #3,d0
    1aae:	                                                |     |      move.l d3,-(sp)
    1ab0:	                                                |     |      move.l d0,-(sp)
    1ab2:	                                                |     |      jsr 17a46 <__mulsi3>
    1ab8:	                                                |     |      addq.l #8,sp
    1aba:	                                                |     |      move.l d0,d1
    1abc:	                                                |     |      add.l d0,d1
    1abe:	                                                |     |      add.l d1,d1
    1ac0:	                                                |     |      add.l d1,d0
    1ac2:	                                                |     |      add.l 24(a3),d0
    1ac6:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltdpt = (APTR) CstZBufferResult;
    1acc:	                                                |     |      move.l 1c890 <CstZBufferResult>,d0
    1ad2:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ad8:	                                                |     |      lsl.w #6,d3
    1ada:	                                                |     |      tst.l d2
    1adc:	                                                |     '----- bge.w 1a58 <CstDrawZBuffer+0x544>
    1ae0:	                                                '----------- bra.s 1a9a <CstDrawZBuffer+0x586>

00001ae2 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1ae2:	    lea -20(sp),sp
    1ae6:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1ae8:	    move.l 1c870 <CstDrawBuffer>,d0
    1aee:	,-- beq.s 1b08 <CstFreeBuffer+0x26>
    1af0:	|   move.l 1c870 <CstDrawBuffer>,20(sp)
    1af8:	|   move.l 1c948 <SysBase>,d0
    1afe:	|   movea.l d0,a6
    1b00:	|   movea.l 20(sp),a1
    1b04:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b08:	'-> move.l 1c86c <CstViewBuffer>,d0
    1b0e:	,-- beq.s 1b28 <CstFreeBuffer+0x46>
    1b10:	|   move.l 1c86c <CstViewBuffer>,16(sp)
    1b18:	|   move.l 1c948 <SysBase>,d0
    1b1e:	|   movea.l d0,a6
    1b20:	|   movea.l 16(sp),a1
    1b24:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b28:	'-> move.l 1c866 <CstCopperList>,d0
    1b2e:	,-- beq.s 1b48 <CstFreeBuffer+0x66>
    1b30:	|   move.l 1c866 <CstCopperList>,12(sp)
    1b38:	|   move.l 1c948 <SysBase>,d0
    1b3e:	|   movea.l d0,a6
    1b40:	|   movea.l 12(sp),a1
    1b44:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b48:	'-> move.l 1c85e <CstBackDrop>,d0
    1b4e:	,-- beq.s 1b68 <CstFreeBuffer+0x86>
    1b50:	|   move.l 1c85e <CstBackDrop>,8(sp)
    1b58:	|   move.l 1c948 <SysBase>,d0
    1b5e:	|   movea.l d0,a6
    1b60:	|   movea.l 8(sp),a1
    1b64:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1b68:	'-> move.l 1c862 <CstBackDropBackup>,d0
    1b6e:	,-- beq.s 1b88 <CstFreeBuffer+0xa6>
    1b70:	|   move.l 1c862 <CstBackDropBackup>,4(sp)
    1b78:	|   move.l 1c948 <SysBase>,d0
    1b7e:	|   movea.l d0,a6
    1b80:	|   movea.l 4(sp),a1
    1b84:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1b88:	'-> clr.l 1c870 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1b8e:	    clr.l 1c86c <CstViewBuffer>
  CstCopperList = NULL;
    1b94:	    clr.l 1c866 <CstCopperList>
  CstBackDrop = NULL;
    1b9a:	    clr.l 1c85e <CstBackDrop>

}
    1ba0:	    nop
    1ba2:	    movea.l (sp)+,a6
    1ba4:	    lea 20(sp),sp
    1ba8:	    rts

00001baa <CstFreeze>:



void CstFreeze( ) {
    1baa:	       lea -36(sp),sp
    1bae:	       move.l a6,-(sp)
    1bb0:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1bb2:	       pea 17d11 <PutChar+0x1b5>
    1bb8:	       jsr 170ba <KPrintF>
    1bbe:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1bc0:	       move.l 1c89c <winWidth>,d0
    1bc6:	       lsr.l #3,d0
    1bc8:	       move.l d0,d1
    1bca:	       move.l 1c8a0 <winHeight>,d0
    1bd0:	       move.l d0,d0
    1bd2:	       muls.w d0,d1
    1bd4:	       move.w d1,d0
    1bd6:	       add.w d0,d0
    1bd8:	       add.w d0,d0
    1bda:	       move.w d0,d2
    1bdc:	       add.w d1,d2
    1bde:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1be2:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1bea:	       moveq #0,d0
    1bec:	       move.w 26(sp),d0
    1bf0:	       move.l d0,18(sp)
    1bf4:	       clr.l 14(sp)
    1bf8:	       move.l 1c948 <SysBase>,d0
    1bfe:	       movea.l d0,a6
    1c00:	       move.l 18(sp),d0
    1c04:	       move.l 14(sp),d1
    1c08:	       jsr -684(a6)
    1c0c:	       move.l d0,10(sp)
    1c10:	       move.l 10(sp),d0
    1c14:	       move.l d0,1c862 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c1a:	       move.l 1c862 <CstBackDropBackup>,d0
    1c20:	   ,-- bne.s 1c30 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c22:	   |   pea 17d38 <PutChar+0x1dc>
    1c28:	   |   jsr 170ba <KPrintF>
    1c2e:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1c30:	   '-> move.l 1c85e <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1c38:	       move.l 1c862 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1c40:	       clr.l 32(sp)
    1c44:	   ,-- bra.s 1c6a <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    1c46:	,--|-> move.l 40(sp),d1
    1c4a:	|  |   move.l d1,d0
    1c4c:	|  |   addq.l #4,d0
    1c4e:	|  |   move.l d0,40(sp)
    1c52:	|  |   move.l 36(sp),d0
    1c56:	|  |   move.l d0,d2
    1c58:	|  |   addq.l #4,d2
    1c5a:	|  |   move.l d2,36(sp)
    1c5e:	|  |   movea.l d1,a0
    1c60:	|  |   move.l (a0),d1
    1c62:	|  |   movea.l d0,a0
    1c64:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1c66:	|  |   addq.l #1,32(sp)
    1c6a:	|  '-> move.w 26(sp),d0
    1c6e:	|      lsr.w #2,d0
    1c70:	|      move.w d0,d0
    1c72:	|      andi.l #65535,d0
    1c78:	|      cmp.l 32(sp),d0
    1c7c:	'----- bgt.s 1c46 <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1c7e:	       move.l 1c86c <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1c86:	       move.l 1c85e <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1c8e:	       clr.l 28(sp)
    1c92:	   ,-- bra.s 1cb8 <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    1c94:	,--|-> move.l 40(sp),d1
    1c98:	|  |   move.l d1,d0
    1c9a:	|  |   addq.l #4,d0
    1c9c:	|  |   move.l d0,40(sp)
    1ca0:	|  |   move.l 36(sp),d0
    1ca4:	|  |   move.l d0,d2
    1ca6:	|  |   addq.l #4,d2
    1ca8:	|  |   move.l d2,36(sp)
    1cac:	|  |   movea.l d1,a0
    1cae:	|  |   move.l (a0),d1
    1cb0:	|  |   movea.l d0,a0
    1cb2:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1cb4:	|  |   addq.l #1,28(sp)
    1cb8:	|  '-> move.w 26(sp),d0
    1cbc:	|      lsr.w #2,d0
    1cbe:	|      move.w d0,d0
    1cc0:	|      andi.l #65535,d0
    1cc6:	|      cmp.l 28(sp),d0
    1cca:	'----- bgt.s 1c94 <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    1ccc:	       move.w #2,1c86a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1cd4:	       move.l 1c89c <winWidth>,d0
    1cda:	       lsr.l #4,d0
    1cdc:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    1ce2:	       move.l a0,d1
    1ce4:	       addq.l #2,d1
    1ce6:	       move.l d1,1c880 <CstBackDropBufferApplyCursor>
    1cec:	       move.l d0,d0
    1cee:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1cf0:	       move.l 1c8a0 <winHeight>,d0
    1cf6:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    1cfc:	       move.l a0,d1
    1cfe:	       addq.l #2,d1
    1d00:	       move.l d1,1c880 <CstBackDropBufferApplyCursor>
    1d06:	       move.l d0,d0
    1d08:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d0a:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    1d10:	       move.l a0,d0
    1d12:	       addq.l #2,d0
    1d14:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    1d1a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d1c:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    1d22:	       move.l a0,d0
    1d24:	       addq.l #2,d0
    1d26:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    1d2c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d2e:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    1d34:	       move.l a0,d0
    1d36:	       addq.l #2,d0
    1d38:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    1d3e:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1d40:	       pea 17d70 <PutChar+0x214>
    1d46:	       jsr 170ba <KPrintF>
    1d4c:	       addq.l #4,sp

}  
    1d4e:	       nop
    1d50:	       move.l (sp)+,d2
    1d52:	       movea.l (sp)+,a6
    1d54:	       lea 36(sp),sp
    1d58:	       rts

00001d5a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1d5a:	             lea -144(sp),sp
    1d5e:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1d62:	             pea 17d84 <PutChar+0x228>
    1d68:	             jsr 170ba <KPrintF>
    1d6e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1d70:	             move.l 164(sp),-(sp)
    1d74:	             jsr 6bc <get2bytes>
    1d7a:	             addq.l #4,sp
    1d7c:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1d80:	             move.l 164(sp),-(sp)
    1d84:	             jsr 6bc <get2bytes>
    1d8a:	             addq.l #4,sp
    1d8c:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1d90:	             move.w 134(sp),d0
    1d94:	             lsr.w #3,d0
    1d96:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1d9a:	             move.w 130(sp),d0
    1d9e:	             lsr.w #1,d0
    1da0:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1da4:	             move.l 1c89c <winWidth>,d0
    1daa:	             lsr.l #3,d0
    1dac:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1db0:	             move.w 130(sp),d0
    1db4:	             muls.w 132(sp),d0
    1db8:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1dbc:	             move.w 124(sp),d1
    1dc0:	             move.w d1,d0
    1dc2:	             add.w d0,d0
    1dc4:	             add.w d0,d0
    1dc6:	             move.w d0,d2
    1dc8:	             add.w d1,d2
    1dca:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1dce:	             move.w 1c858 <CstPaletteLoaded>,d0
    1dd4:	,----------- bne.w 1e6e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1dd8:	|            move.w #384,120(sp)

    if(CstPalette) {
    1dde:	|            move.l 1c888 <CstPalette>,d0
    1de4:	|        ,-- beq.s 1dfe <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1de6:	|        |   move.l 1c888 <CstPalette>,116(sp)
    1dee:	|        |   move.l 1c948 <SysBase>,d0
    1df4:	|        |   movea.l d0,a6
    1df6:	|        |   movea.l 116(sp),a1
    1dfa:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1dfe:	|        '-> moveq #64,d0
    1e00:	|            move.l d0,112(sp)
    1e04:	|            clr.l 108(sp)
    1e08:	|            move.l 1c948 <SysBase>,d0
    1e0e:	|            movea.l d0,a6
    1e10:	|            move.l 112(sp),d0
    1e14:	|            move.l 108(sp),d1
    1e18:	|            jsr -684(a6)
    1e1c:	|            move.l d0,104(sp)
    1e20:	|            move.l 104(sp),d0
    1e24:	|            move.l d0,1c888 <CstPalette>
    CstPaletteLoaded = 1;
    1e2a:	|            move.w #1,1c858 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1e32:	|            move.l 1c888 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e3a:	|            clr.l 152(sp)
    1e3e:	|        ,-- bra.s 1e64 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1e40:	|     ,--|-> move.l 164(sp),-(sp)
    1e44:	|     |  |   jsr 6bc <get2bytes>
    1e4a:	|     |  |   addq.l #4,sp
    1e4c:	|     |  |   move.l d0,d1
    1e4e:	|     |  |   move.l 156(sp),d0
    1e52:	|     |  |   move.l d0,d2
    1e54:	|     |  |   addq.l #2,d2
    1e56:	|     |  |   move.l d2,156(sp)
    1e5a:	|     |  |   move.l d1,d1
    1e5c:	|     |  |   movea.l d0,a0
    1e5e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e60:	|     |  |   addq.l #1,152(sp)
    1e64:	|     |  '-> moveq #31,d0
    1e66:	|     |      cmp.l 152(sp),d0
    1e6a:	|     '----- bge.s 1e40 <CstLoadBackdrop+0xe6>
    1e6c:	|  ,-------- bra.s 1e8c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e6e:	'--|-------> clr.l 148(sp)
    1e72:	   |     ,-- bra.s 1e84 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1e74:	   |  ,--|-> move.l 164(sp),-(sp)
    1e78:	   |  |  |   jsr 6bc <get2bytes>
    1e7e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e80:	   |  |  |   addq.l #1,148(sp)
    1e84:	   |  |  '-> moveq #31,d2
    1e86:	   |  |      cmp.l 148(sp),d2
    1e8a:	   |  '----- bge.s 1e74 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1e8c:	   '-------> moveq #0,d0
    1e8e:	             move.w 122(sp),d0
    1e92:	             move.l d0,100(sp)
    1e96:	             moveq #2,d0
    1e98:	             move.l d0,96(sp)
    1e9c:	             move.l 1c948 <SysBase>,d0
    1ea2:	             movea.l d0,a6
    1ea4:	             move.l 100(sp),d0
    1ea8:	             move.l 96(sp),d1
    1eac:	             jsr -684(a6)
    1eb0:	             move.l d0,92(sp)
    1eb4:	             move.l 92(sp),d0
    1eb8:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1ebc:	         ,-- bne.s 1ecc <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1ebe:	         |   pea 17db3 <PutChar+0x257>
    1ec4:	         |   jsr 170ba <KPrintF>
    1eca:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1ecc:	         '-> moveq #0,d0
    1ece:	             move.w 124(sp),d0
    1ed2:	             move.l d0,84(sp)
    1ed6:	             moveq #2,d2
    1ed8:	             move.l d2,80(sp)
    1edc:	             move.l 1c948 <SysBase>,d0
    1ee2:	             movea.l d0,a6
    1ee4:	             move.l 84(sp),d0
    1ee8:	             move.l 80(sp),d1
    1eec:	             jsr -684(a6)
    1ef0:	             move.l d0,76(sp)
    1ef4:	             move.l 76(sp),d0
    1ef8:	             move.l d0,72(sp)
  if( !tmpmask)
    1efc:	         ,-- bne.s 1f0c <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1efe:	         |   pea 17de9 <PutChar+0x28d>
    1f04:	         |   jsr 170ba <KPrintF>
    1f0a:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f0c:	         '-> move.l 164(sp),68(sp)
    1f12:	             move.l 88(sp),64(sp)
    1f18:	             moveq #2,d0
    1f1a:	             move.l d0,60(sp)
    1f1e:	             move.w 122(sp),d0
    1f22:	             lsr.w #1,d0
    1f24:	             move.w d0,d0
    1f26:	             andi.l #65535,d0
    1f2c:	             move.l d0,56(sp)
    1f30:	             move.l 1c950 <DOSBase>,d0
    1f36:	             movea.l d0,a6
    1f38:	             move.l 68(sp),d1
    1f3c:	             move.l 64(sp),d2
    1f40:	             move.l 60(sp),d3
    1f44:	             move.l 56(sp),d4
    1f48:	             jsr -324(a6)
    1f4c:	             move.l d0,52(sp)
    1f50:	             move.l 52(sp),d0
    1f54:	             move.w d0,50(sp)
  if(!count) {
    1f58:	         ,-- bne.s 1f6c <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1f5a:	         |   pea 17e1d <PutChar+0x2c1>
    1f60:	         |   jsr 170ba <KPrintF>
    1f66:	         |   addq.l #4,sp
    return;
    1f68:	   ,-----|-- bra.w 21b8 <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1f6c:	   |     '-> move.l 164(sp),46(sp)
    1f72:	   |         move.l 72(sp),42(sp)
    1f78:	   |         moveq #2,d2
    1f7a:	   |         move.l d2,38(sp)
    1f7e:	   |         move.w 124(sp),d0
    1f82:	   |         lsr.w #1,d0
    1f84:	   |         move.w d0,d0
    1f86:	   |         andi.l #65535,d0
    1f8c:	   |         move.l d0,34(sp)
    1f90:	   |         move.l 1c950 <DOSBase>,d0
    1f96:	   |         movea.l d0,a6
    1f98:	   |         move.l 46(sp),d1
    1f9c:	   |         move.l 42(sp),d2
    1fa0:	   |         move.l 38(sp),d3
    1fa4:	   |         move.l 34(sp),d4
    1fa8:	   |         jsr -324(a6)
    1fac:	   |         move.l d0,30(sp)
    1fb0:	   |         move.l 30(sp),d0
    1fb4:	   |         move.w d0,50(sp)
   

  if(!count) {
    1fb8:	   |     ,-- bne.s 1fcc <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    1fba:	   |     |   pea 17e1d <PutChar+0x2c1>
    1fc0:	   |     |   jsr 170ba <KPrintF>
    1fc6:	   |     |   addq.l #4,sp
    return;
    1fc8:	   +-----|-- bra.w 21b8 <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1fcc:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1fd4:	   |         move.l 1c85e <CstBackDrop>,d0
    1fda:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1fde:	   |         move.l 172(sp),d0
    1fe2:	   |         move.w d0,d1
    1fe4:	   |         muls.w 126(sp),d1
    1fe8:	   |         move.l 168(sp),d0
    1fec:	   |     ,-- bpl.s 1ff0 <CstLoadBackdrop+0x296>
    1fee:	   |     |   addq.l #7,d0
    1ff0:	   |     '-> asr.l #3,d0
    1ff2:	   |         move.l d0,d0
    1ff4:	   |         movea.w d1,a0
    1ff6:	   |         adda.w d0,a0
    1ff8:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1ffc:	   |         moveq #0,d0
    1ffe:	   |         move.w 24(sp),d0
    2002:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2006:	   |         pea 17e38 <PutChar+0x2dc>
    200c:	   |         jsr 170ba <KPrintF>
    2012:	   |         addq.l #4,sp


  WaitBlit();
    2014:	   |         move.l 1c954 <GfxBase>,d0
    201a:	   |         movea.l d0,a6
    201c:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2020:	   |         movea.l 26(sp),a0
    2024:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    202a:	   |         movea.l 26(sp),a0
    202e:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2034:	   |         movea.l 26(sp),a0
    2038:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    203e:	   |         movea.l 26(sp),a0
    2042:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2048:	   |         move.w 126(sp),d0
    204c:	   |         sub.w 130(sp),d0
    2050:	   |         movea.l 26(sp),a0
    2054:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2058:	   |         move.w 126(sp),d0
    205c:	   |         sub.w 130(sp),d0
    2060:	   |         movea.l 26(sp),a0
    2064:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2068:	   |         movea.l 26(sp),a0
    206c:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2072:	   |         movea.l 26(sp),a0
    2076:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    207c:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2082:	   |         clr.l 136(sp)
    2086:	   |     ,-- bra.s 20e8 <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    2088:	   |  ,--|-> movea.l 26(sp),a0
    208c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2092:	   |  |  |   move.l 140(sp),d0
    2096:	   |  |  |   movea.l 26(sp),a0
    209a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    209e:	   |  |  |   move.l 144(sp),d0
    20a2:	   |  |  |   movea.l 26(sp),a0
    20a6:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    20aa:	   |  |  |   move.l 144(sp),d0
    20ae:	   |  |  |   movea.l 26(sp),a0
    20b2:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    20b6:	   |  |  |   move.w 132(sp),d0
    20ba:	   |  |  |   lsl.w #6,d0
    20bc:	   |  |  |   add.w 128(sp),d0
    20c0:	   |  |  |   movea.l 26(sp),a0
    20c4:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    20c8:	   |  |  |   moveq #0,d0
    20ca:	   |  |  |   move.w 124(sp),d0
    20ce:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    20d2:	   |  |  |   move.w 1c85c <CstBackdropSizePlane>,d0
    20d8:	   |  |  |   move.w d0,d0
    20da:	   |  |  |   andi.l #65535,d0
    20e0:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    20e4:	   |  |  |   addq.l #1,136(sp)
    20e8:	   |  |  '-> moveq #4,d0
    20ea:	   |  |      cmp.l 136(sp),d0
    20ee:	   |  '----- bge.s 2088 <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    20f0:	   |         move.l 1c954 <GfxBase>,d0
    20f6:	   |         movea.l d0,a6
    20f8:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    20fc:	   |         pea 17e57 <PutChar+0x2fb>
    2102:	   |         jsr 170ba <KPrintF>
    2108:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    210a:	   |         move.l 88(sp),20(sp)
    2110:	   |         move.l 1c948 <SysBase>,d0
    2116:	   |         movea.l d0,a6
    2118:	   |         movea.l 20(sp),a1
    211c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2120:	   |         move.l 72(sp),16(sp)
    2126:	   |         move.l 1c948 <SysBase>,d0
    212c:	   |         movea.l d0,a6
    212e:	   |         movea.l 16(sp),a1
    2132:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2136:	   |         move.w #2,1c86a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    213e:	   |         move.l 1c89c <winWidth>,d0
    2144:	   |         lsr.l #4,d0
    2146:	   |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    214c:	   |         move.l a0,d1
    214e:	   |         addq.l #2,d1
    2150:	   |         move.l d1,1c880 <CstBackDropBufferApplyCursor>
    2156:	   |         move.l d0,d0
    2158:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    215a:	   |         move.l 1c8a0 <winHeight>,d0
    2160:	   |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2166:	   |         move.l a0,d1
    2168:	   |         addq.l #2,d1
    216a:	   |         move.l d1,1c880 <CstBackDropBufferApplyCursor>
    2170:	   |         move.l d0,d0
    2172:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2174:	   |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    217a:	   |         move.l a0,d0
    217c:	   |         addq.l #2,d0
    217e:	   |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2184:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2186:	   |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    218c:	   |         move.l a0,d0
    218e:	   |         addq.l #2,d0
    2190:	   |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2196:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2198:	   |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    219e:	   |         move.l a0,d0
    21a0:	   |         addq.l #2,d0
    21a2:	   |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    21a8:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    21aa:	   |         pea 17e77 <PutChar+0x31b>
    21b0:	   |         jsr 170ba <KPrintF>
    21b6:	   |         addq.l #4,sp

}
    21b8:	   '-------> movem.l (sp)+,d2-d4/a6
    21bc:	             lea 144(sp),sp
    21c0:	             rts

000021c2 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    21c2:	                lea -72(sp),sp
    21c6:	                move.l a6,-(sp)
    21c8:	                move.l d2,-(sp)
    21ca:	                move.l 88(sp),d1
    21ce:	                move.l 92(sp),d0
    21d2:	                move.w d1,d1
    21d4:	                move.w d1,10(sp)
    21d8:	                move.w d0,d0
    21da:	                move.w d0,8(sp)
  UWORD *destination = 0;
    21de:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    21e2:	                move.w #2,1c86a <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    21ea:	                move.l 1c85e <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    21f2:	                clr.l 56(sp)

  blitwidth = single->width/16;
    21f6:	                movea.l 84(sp),a0
    21fa:	                move.l (a0),d0
    21fc:	                movea.l d0,a0
    21fe:	                cmpa.w #0,a0
    2202:	            ,-- bge.s 2208 <CstPasteChar+0x46>
    2204:	            |   lea 15(a0),a0
    2208:	            '-> move.l a0,d0
    220a:	                asr.l #4,d0
    220c:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2210:	            ,-- bne.s 2218 <CstPasteChar+0x56>
    2212:	            |   moveq #1,d0
    2214:	            |   move.l d0,40(sp)

  if( y < 0) {
    2218:	            '-> tst.w 8(sp)
    221c:	         ,----- bge.s 2266 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    221e:	         |      movea.w 8(sp),a1
    2222:	         |      movea.l 84(sp),a0
    2226:	         |      move.l 4(a0),d0
    222a:	         |      add.l a1,d0
    222c:	         |  ,-- bpl.s 2240 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    222e:	         |  |   pea 17e91 <PutChar+0x335>
    2234:	         |  |   jsr 170ba <KPrintF>
    223a:	         |  |   addq.l #4,sp
      return;
    223c:	,--------|--|-- bra.w 2902 <CstPasteChar+0x740>
    }
    ystartdst = 0;
    2240:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    2244:	|        |      move.w 8(sp),d0
    2248:	|        |      ext.l d0
    224a:	|        |      move.l d0,d1
    224c:	|        |      neg.l d1
    224e:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    2252:	|        |      movea.l 84(sp),a0
    2256:	|        |      move.l 4(a0),d0
    225a:	|        |      movea.w 8(sp),a0
    225e:	|        |      add.l a0,d0
    2260:	|        |      move.l d0,44(sp)
    2264:	|     ,--|----- bra.s 22d8 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    2266:	|     |  '----> movea.w 8(sp),a1
    226a:	|     |         movea.l 84(sp),a0
    226e:	|     |         move.l 4(a0),d0
    2272:	|     |         move.l a1,d1
    2274:	|     |         add.l d0,d1
    2276:	|     |         move.l 1c8a0 <winHeight>,d0
    227c:	|     |         cmp.l d1,d0
    227e:	|     |  ,----- bge.s 22c0 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2280:	|     |  |      movea.w 8(sp),a0
    2284:	|     |  |      move.l 1c8a0 <winHeight>,d0
    228a:	|     |  |      cmp.l a0,d0
    228c:	|     |  |  ,-- bge.s 22a0 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    228e:	|     |  |  |   pea 17e91 <PutChar+0x335>
    2294:	|     |  |  |   jsr 170ba <KPrintF>
    229a:	|     |  |  |   addq.l #4,sp
      return;
    229c:	+-----|--|--|-- bra.w 2902 <CstPasteChar+0x740>
    }
    ystartdst = y;
    22a0:	|     |  |  '-> movea.w 8(sp),a0
    22a4:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    22a8:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    22ac:	|     |  |      move.l 1c8a0 <winHeight>,d0
    22b2:	|     |  |      movea.w 8(sp),a0
    22b6:	|     |  |      move.l d0,d1
    22b8:	|     |  |      sub.l a0,d1
    22ba:	|     |  |      move.l d1,44(sp)
    22be:	|     +--|----- bra.s 22d8 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    22c0:	|     |  '----> movea.w 8(sp),a0
    22c4:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    22c8:	|     |         clr.l 48(sp)
    blitheight = single->height;
    22cc:	|     |         movea.l 84(sp),a0
    22d0:	|     |         move.l 4(a0),d0
    22d4:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    22d8:	|     '-------> tst.w 10(sp)
    22dc:	|        ,----- bge.w 244e <CstPasteChar+0x28c>
    if(x + single->width < 0) {
    22e0:	|        |      movea.w 10(sp),a1
    22e4:	|        |      movea.l 84(sp),a0
    22e8:	|        |      move.l (a0),d0
    22ea:	|        |      add.l a1,d0
    22ec:	|        |  ,-- bpl.s 2300 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22ee:	|        |  |   pea 17e91 <PutChar+0x335>
    22f4:	|        |  |   jsr 170ba <KPrintF>
    22fa:	|        |  |   addq.l #4,sp
      return;
    22fc:	+--------|--|-- bra.w 2902 <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    2300:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2306:	|        |      move.w 10(sp),d0
    230a:	|        |  ,-- bpl.s 2310 <CstPasteChar+0x14e>
    230c:	|        |  |   addi.w #15,d0
    2310:	|        |  '-> asr.w #4,d0
    2312:	|        |      neg.w d0
    2314:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2318:	|        |      move.w 10(sp),d0
    231c:	|        |      ext.l d0
    231e:	|        |      neg.l d0
    2320:	|        |      andi.l #-2147483633,d0
    2326:	|        |  ,-- bpl.s 2330 <CstPasteChar+0x16e>
    2328:	|        |  |   subq.l #1,d0
    232a:	|        |  |   moveq #-16,d1
    232c:	|        |  |   or.l d1,d0
    232e:	|        |  |   addq.l #1,d0
    2330:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2334:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2338:	|        |      movea.l 84(sp),a0
    233c:	|        |      move.l 24(a0),d0
    2340:	|        |      move.l d0,d1
    2342:	|        |      moveq #0,d0
    2344:	|        |      move.w 76(sp),d0
    2348:	|        |      add.l d0,d0
    234a:	|        |      move.l d1,d2
    234c:	|        |      add.l d0,d2
    234e:	|        |      movea.l 84(sp),a0
    2352:	|        |      move.l (a0),d0
    2354:	|        |      move.l 48(sp),-(sp)
    2358:	|        |      move.l d0,-(sp)
    235a:	|        |      jsr 17a46 <__mulsi3>
    2360:	|        |      addq.l #8,sp
    2362:	|        |      lsr.l #3,d0
    2364:	|        |      move.l d2,d1
    2366:	|        |      add.l d0,d1
    2368:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    236c:	|        |      move.l 1c89c <winWidth>,d0
    2372:	|        |      move.l 52(sp),-(sp)
    2376:	|        |      move.l d0,-(sp)
    2378:	|        |      jsr 17a46 <__mulsi3>
    237e:	|        |      addq.l #8,sp
    2380:	|        |      lsr.l #3,d0
    2382:	|        |      move.l 28(sp),d1
    2386:	|        |      add.l d1,d0
    2388:	|        |      move.l d0,d2
    238a:	|        |      subq.l #2,d2
    238c:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2390:	|        |      move.l 1c89c <winWidth>,d0
    2396:	|        |      move.l 52(sp),-(sp)
    239a:	|        |      move.l d0,-(sp)
    239c:	|        |      jsr 17a46 <__mulsi3>
    23a2:	|        |      addq.l #8,sp
    23a4:	|        |      lsr.l #3,d0
    23a6:	|        |      move.l 28(sp),d1
    23aa:	|        |      add.l d1,d0
    23ac:	|        |      move.l d0,d1
    23ae:	|        |      subq.l #2,d1
    23b0:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    23b4:	|        |      moveq #0,d0
    23b6:	|        |      move.w 74(sp),d0
    23ba:	|        |      moveq #16,d1
    23bc:	|        |      sub.l d0,d1
    23be:	|        |      move.l d1,d0
    23c0:	|        |      moveq #12,d2
    23c2:	|        |      lsl.l d2,d0
    23c4:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    23c8:	|        |      movea.l 84(sp),a0
    23cc:	|        |      move.l (a0),d0
    23ce:	|        |      movea.l d0,a0
    23d0:	|        |      cmpa.w #0,a0
    23d4:	|        |  ,-- bge.s 23da <CstPasteChar+0x218>
    23d6:	|        |  |   lea 15(a0),a0
    23da:	|        |  '-> move.l a0,d0
    23dc:	|        |      asr.l #4,d0
    23de:	|        |      move.l d0,d0
    23e0:	|        |      add.w 76(sp),d0
    23e4:	|        |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    23ea:	|        |      move.l a0,d1
    23ec:	|        |      addq.l #2,d1
    23ee:	|        |      move.l d1,1c880 <CstBackDropBufferApplyCursor>
    23f4:	|        |      add.w 78(sp),d0
    23f8:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    23fa:	|        |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2400:	|        |      move.l a0,d0
    2402:	|        |      addq.l #2,d0
    2404:	|        |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    240a:	|        |      move.l 44(sp),d0
    240e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2410:	|        |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2416:	|        |      move.l a0,d0
    2418:	|        |      addq.l #2,d0
    241a:	|        |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2420:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2422:	|        |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2428:	|        |      move.l a0,d0
    242a:	|        |      addq.l #2,d0
    242c:	|        |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2432:	|        |      move.l 52(sp),d0
    2436:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2438:	|        |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    243e:	|        |      move.l a0,d0
    2440:	|        |      addq.l #2,d0
    2442:	|        |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2448:	|        |      clr.w (a0)
    244a:	|     ,--|----- bra.w 2762 <CstPasteChar+0x5a0>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    244e:	|     |  '----> movea.w 10(sp),a1
    2452:	|     |         movea.l 84(sp),a0
    2456:	|     |         move.l (a0),d0
    2458:	|     |         move.l a1,d1
    245a:	|     |         add.l d0,d1
    245c:	|     |         move.l 1c89c <winWidth>,d0
    2462:	|     |         cmp.l d1,d0
    2464:	|     |  ,----- bge.w 2600 <CstPasteChar+0x43e>

    if(x - single->width > (int) winWidth)
    2468:	|     |  |      movea.w 10(sp),a1
    246c:	|     |  |      movea.l 84(sp),a0
    2470:	|     |  |      move.l (a0),d0
    2472:	|     |  |      move.l a1,d1
    2474:	|     |  |      sub.l d0,d1
    2476:	|     |  |      move.l 1c89c <winWidth>,d0
    247c:	|     |  |      cmp.l d1,d0
    247e:	|     |  |  ,-- bge.s 2492 <CstPasteChar+0x2d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2480:	|     |  |  |   pea 17e91 <PutChar+0x335>
    2486:	|     |  |  |   jsr 170ba <KPrintF>
    248c:	|     |  |  |   addq.l #4,sp
      return;
    248e:	+-----|--|--|-- bra.w 2902 <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2492:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2496:	|     |  |      movea.w 10(sp),a1
    249a:	|     |  |      movea.l 84(sp),a0
    249e:	|     |  |      move.l (a0),d0
    24a0:	|     |  |      add.l a1,d0
    24a2:	|     |  |      move.l d0,d1
    24a4:	|     |  |      move.l 1c89c <winWidth>,d0
    24aa:	|     |  |      sub.l d0,d1
    24ac:	|     |  |      move.l d1,d0
    24ae:	|     |  |      lsr.l #4,d0
    24b0:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    24b4:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    24b8:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    24be:	|     |  |      movea.l 84(sp),a0
    24c2:	|     |  |      move.l 24(a0),d0
    24c6:	|     |  |      move.l d0,d2
    24c8:	|     |  |      movea.l 84(sp),a0
    24cc:	|     |  |      move.l (a0),d0
    24ce:	|     |  |      move.l 48(sp),-(sp)
    24d2:	|     |  |      move.l d0,-(sp)
    24d4:	|     |  |      jsr 17a46 <__mulsi3>
    24da:	|     |  |      addq.l #8,sp
    24dc:	|     |  |      lsr.l #3,d0
    24de:	|     |  |      move.l d2,d1
    24e0:	|     |  |      add.l d0,d1
    24e2:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    24e6:	|     |  |      move.l 1c89c <winWidth>,d0
    24ec:	|     |  |      move.l 52(sp),-(sp)
    24f0:	|     |  |      move.l d0,-(sp)
    24f2:	|     |  |      jsr 17a46 <__mulsi3>
    24f8:	|     |  |      addq.l #8,sp
    24fa:	|     |  |      lsr.l #3,d0
    24fc:	|     |  |      move.l 28(sp),d1
    2500:	|     |  |      add.l d0,d1
    2502:	|     |  |      move.w 10(sp),d0
    2506:	|     |  |  ,-- bpl.s 250c <CstPasteChar+0x34a>
    2508:	|     |  |  |   addi.w #15,d0
    250c:	|     |  |  '-> asr.w #4,d0
    250e:	|     |  |      movea.w d0,a0
    2510:	|     |  |      move.l a0,d0
    2512:	|     |  |      add.l a0,d0
    2514:	|     |  |      move.l d1,d2
    2516:	|     |  |      add.l d0,d2
    2518:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    251c:	|     |  |      move.l 1c89c <winWidth>,d0
    2522:	|     |  |      move.l 52(sp),-(sp)
    2526:	|     |  |      move.l d0,-(sp)
    2528:	|     |  |      jsr 17a46 <__mulsi3>
    252e:	|     |  |      addq.l #8,sp
    2530:	|     |  |      lsr.l #3,d0
    2532:	|     |  |      move.l 28(sp),d1
    2536:	|     |  |      add.l d0,d1
    2538:	|     |  |      move.w 10(sp),d0
    253c:	|     |  |  ,-- bpl.s 2542 <CstPasteChar+0x380>
    253e:	|     |  |  |   addi.w #15,d0
    2542:	|     |  |  '-> asr.w #4,d0
    2544:	|     |  |      movea.w d0,a0
    2546:	|     |  |      move.l a0,d0
    2548:	|     |  |      add.l a0,d0
    254a:	|     |  |      move.l d1,d2
    254c:	|     |  |      add.l d0,d2
    254e:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2552:	|     |  |      movea.l 84(sp),a0
    2556:	|     |  |      move.l (a0),d0
    2558:	|     |  |      andi.l #-2147483633,d0
    255e:	|     |  |  ,-- bpl.s 2568 <CstPasteChar+0x3a6>
    2560:	|     |  |  |   subq.l #1,d0
    2562:	|     |  |  |   moveq #-16,d1
    2564:	|     |  |  |   or.l d1,d0
    2566:	|     |  |  |   addq.l #1,d0
    2568:	|     |  |  '-> moveq #12,d2
    256a:	|     |  |      lsl.l d2,d0
    256c:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2570:	|     |  |      movea.l 84(sp),a0
    2574:	|     |  |      move.l (a0),d0
    2576:	|     |  |      movea.l d0,a0
    2578:	|     |  |      cmpa.w #0,a0
    257c:	|     |  |  ,-- bge.s 2582 <CstPasteChar+0x3c0>
    257e:	|     |  |  |   lea 15(a0),a0
    2582:	|     |  |  '-> move.l a0,d0
    2584:	|     |  |      asr.l #4,d0
    2586:	|     |  |      move.l d0,d0
    2588:	|     |  |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    258e:	|     |  |      move.l a0,d1
    2590:	|     |  |      addq.l #2,d1
    2592:	|     |  |      move.l d1,1c880 <CstBackDropBufferApplyCursor>
    2598:	|     |  |      add.w 76(sp),d0
    259c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    259e:	|     |  |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    25a4:	|     |  |      move.l a0,d0
    25a6:	|     |  |      addq.l #2,d0
    25a8:	|     |  |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    25ae:	|     |  |      move.l 44(sp),d0
    25b2:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    25b4:	|     |  |      move.w 10(sp),d0
    25b8:	|     |  |  ,-- bpl.s 25be <CstPasteChar+0x3fc>
    25ba:	|     |  |  |   addi.w #15,d0
    25be:	|     |  |  '-> asr.w #4,d0
    25c0:	|     |  |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    25c6:	|     |  |      move.l a0,d1
    25c8:	|     |  |      addq.l #2,d1
    25ca:	|     |  |      move.l d1,1c880 <CstBackDropBufferApplyCursor>
    25d0:	|     |  |      add.w d0,d0
    25d2:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    25d4:	|     |  |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    25da:	|     |  |      move.l a0,d0
    25dc:	|     |  |      addq.l #2,d0
    25de:	|     |  |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    25e4:	|     |  |      move.l 52(sp),d0
    25e8:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    25ea:	|     |  |      movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    25f0:	|     |  |      move.l a0,d0
    25f2:	|     |  |      addq.l #2,d0
    25f4:	|     |  |      move.l d0,1c880 <CstBackDropBufferApplyCursor>
    25fa:	|     |  |      clr.w (a0)
    25fc:	|     +--|----- bra.w 2762 <CstPasteChar+0x5a0>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2600:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    2606:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    260a:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    260e:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2612:	|     |         movea.l 84(sp),a0
    2616:	|     |         move.l 24(a0),d0
    261a:	|     |         move.l d0,d2
    261c:	|     |         movea.l 84(sp),a0
    2620:	|     |         move.l (a0),d0
    2622:	|     |         movea.l d0,a0
    2624:	|     |         cmpa.w #0,a0
    2628:	|     |     ,-- bge.s 262e <CstPasteChar+0x46c>
    262a:	|     |     |   lea 15(a0),a0
    262e:	|     |     '-> move.l a0,d0
    2630:	|     |         asr.l #4,d0
    2632:	|     |         move.l 48(sp),-(sp)
    2636:	|     |         move.l d0,-(sp)
    2638:	|     |         jsr 17a46 <__mulsi3>
    263e:	|     |         addq.l #8,sp
    2640:	|     |         add.l d0,d0
    2642:	|     |         move.l d2,d1
    2644:	|     |         add.l d0,d1
    2646:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    264a:	|     |         move.l 1c89c <winWidth>,d0
    2650:	|     |         move.l 52(sp),-(sp)
    2654:	|     |         move.l d0,-(sp)
    2656:	|     |         jsr 17a46 <__mulsi3>
    265c:	|     |         addq.l #8,sp
    265e:	|     |         lsr.l #3,d0
    2660:	|     |         move.l 28(sp),d1
    2664:	|     |         add.l d0,d1
    2666:	|     |         move.w 10(sp),d0
    266a:	|     |     ,-- bpl.s 2670 <CstPasteChar+0x4ae>
    266c:	|     |     |   addi.w #15,d0
    2670:	|     |     '-> asr.w #4,d0
    2672:	|     |         movea.w d0,a0
    2674:	|     |         move.l a0,d0
    2676:	|     |         add.l a0,d0
    2678:	|     |         move.l d1,d2
    267a:	|     |         add.l d0,d2
    267c:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2680:	|     |         move.l 1c89c <winWidth>,d0
    2686:	|     |         move.l 52(sp),-(sp)
    268a:	|     |         move.l d0,-(sp)
    268c:	|     |         jsr 17a46 <__mulsi3>
    2692:	|     |         addq.l #8,sp
    2694:	|     |         lsr.l #3,d0
    2696:	|     |         move.l 28(sp),d1
    269a:	|     |         add.l d0,d1
    269c:	|     |         move.w 10(sp),d0
    26a0:	|     |     ,-- bpl.s 26a6 <CstPasteChar+0x4e4>
    26a2:	|     |     |   addi.w #15,d0
    26a6:	|     |     '-> asr.w #4,d0
    26a8:	|     |         movea.w d0,a0
    26aa:	|     |         move.l a0,d0
    26ac:	|     |         add.l a0,d0
    26ae:	|     |         move.l d1,d2
    26b0:	|     |         add.l d0,d2
    26b2:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    26b6:	|     |         move.w 10(sp),d0
    26ba:	|     |         andi.w #-32753,d0
    26be:	|     |     ,-- bpl.s 26c8 <CstPasteChar+0x506>
    26c0:	|     |     |   subq.w #1,d0
    26c2:	|     |     |   ori.w #-16,d0
    26c6:	|     |     |   addq.w #1,d0
    26c8:	|     |     '-> ext.l d0
    26ca:	|     |         moveq #12,d1
    26cc:	|     |         lsl.l d1,d0
    26ce:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26d2:	|     |         movea.l 84(sp),a0
    26d6:	|     |         move.l (a0),d0
    26d8:	|     |         movea.l d0,a0
    26da:	|     |         cmpa.w #0,a0
    26de:	|     |     ,-- bge.s 26e4 <CstPasteChar+0x522>
    26e0:	|     |     |   lea 15(a0),a0
    26e4:	|     |     '-> move.l a0,d0
    26e6:	|     |         asr.l #4,d0
    26e8:	|     |         move.l d0,d0
    26ea:	|     |         add.w 76(sp),d0
    26ee:	|     |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    26f4:	|     |         move.l a0,d1
    26f6:	|     |         addq.l #2,d1
    26f8:	|     |         move.l d1,1c880 <CstBackDropBufferApplyCursor>
    26fe:	|     |         add.w 78(sp),d0
    2702:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2704:	|     |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    270a:	|     |         move.l a0,d0
    270c:	|     |         addq.l #2,d0
    270e:	|     |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2714:	|     |         move.l 44(sp),d0
    2718:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    271a:	|     |         move.w 10(sp),d0
    271e:	|     |     ,-- bpl.s 2724 <CstPasteChar+0x562>
    2720:	|     |     |   addi.w #15,d0
    2724:	|     |     '-> asr.w #4,d0
    2726:	|     |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    272c:	|     |         move.l a0,d1
    272e:	|     |         addq.l #2,d1
    2730:	|     |         move.l d1,1c880 <CstBackDropBufferApplyCursor>
    2736:	|     |         add.w d0,d0
    2738:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    273a:	|     |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2740:	|     |         move.l a0,d0
    2742:	|     |         addq.l #2,d0
    2744:	|     |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    274a:	|     |         move.l 52(sp),d0
    274e:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2750:	|     |         movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2756:	|     |         move.l a0,d0
    2758:	|     |         addq.l #2,d0
    275a:	|     |         move.l d0,1c880 <CstBackDropBufferApplyCursor>
    2760:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2762:	|     '-------> moveq #0,d0
    2764:	|               move.w 74(sp),d0
    2768:	|               moveq #0,d1
    276a:	|               not.w d1
    276c:	|               asr.l d0,d1
    276e:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2772:	|               moveq #0,d1
    2774:	|               move.w 76(sp),d1
    2778:	|               moveq #0,d0
    277a:	|               move.w 78(sp),d0
    277e:	|               sub.l d0,d1
    2780:	|               move.l d1,d0
    2782:	|               add.w d0,d0
    2784:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2788:	|               move.l 1c89c <winWidth>,d0
    278e:	|               lsr.l #3,d0
    2790:	|               move.l d0,d2
    2792:	|               move.w 76(sp),d1
    2796:	|               sub.w 78(sp),d1
    279a:	|               move.l 40(sp),d0
    279e:	|               sub.w d0,d1
    27a0:	|               move.w d1,d0
    27a2:	|               add.w d1,d0
    27a4:	|               add.w d2,d0
    27a6:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    27aa:	|               move.l 1c89c <winWidth>,d0
    27b0:	|               lsr.l #3,d0
    27b2:	|               move.l d0,d2
    27b4:	|               move.w 76(sp),d1
    27b8:	|               sub.w 78(sp),d1
    27bc:	|               move.l 40(sp),d0
    27c0:	|               sub.w d0,d1
    27c2:	|               move.w d1,d0
    27c4:	|               add.w d1,d0
    27c6:	|               add.w d2,d0
    27c8:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27cc:	|               move.l #14675968,16(sp)
  WaitBlit();
    27d4:	|               move.l 1c954 <GfxBase>,d0
    27da:	|               movea.l d0,a6
    27dc:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    27e0:	|               movea.l 16(sp),a0
    27e4:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    27ea:	|               movea.l 16(sp),a0
    27ee:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    27f4:	|               move.w 24(sp),d0
    27f8:	|               movea.l 16(sp),a0
    27fc:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2800:	|               move.w 22(sp),d0
    2804:	|               movea.l 16(sp),a0
    2808:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    280c:	|               move.w 20(sp),d0
    2810:	|               movea.l 16(sp),a0
    2814:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2818:	|               move.l 1c89c <winWidth>,d0
    281e:	|               lsr.l #3,d0
    2820:	|               move.l d0,d1
    2822:	|               move.l 1c8a0 <winHeight>,d0
    2828:	|               move.l d0,d0
    282a:	|               move.w d1,d2
    282c:	|               muls.w d0,d2
    282e:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2832:	|               move.w 1c856 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    283a:	|               move.w 38(sp),d0
    283e:	|               andi.w #1,d0
    2842:	|               move.w d0,12(sp)
  if(tmp2) {
    2846:	|        ,----- beq.s 2850 <CstPasteChar+0x68e>
    minterm = 0xbfa;
    2848:	|        |      move.w #3066,36(sp)
    284e:	|        |  ,-- bra.s 2856 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    2850:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2856:	|           '-> clr.l 32(sp)
    285a:	|     ,-------- bra.w 28f8 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    285e:	|  ,--|-------> move.l 56(sp),d0
    2862:	|  |  |         add.w 36(sp),d0
    2866:	|  |  |         movea.l 16(sp),a0
    286a:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    286e:	|  |  |         move.l 68(sp),d0
    2872:	|  |  |         movea.l 16(sp),a0
    2876:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    287a:	|  |  |         move.l 64(sp),d0
    287e:	|  |  |         movea.l 16(sp),a0
    2882:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2886:	|  |  |         move.l 60(sp),d0
    288a:	|  |  |         movea.l 16(sp),a0
    288e:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2892:	|  |  |         move.l 44(sp),d0
    2896:	|  |  |         lsl.w #6,d0
    2898:	|  |  |         move.l 40(sp),d1
    289c:	|  |  |         add.w d1,d0
    289e:	|  |  |         sub.w 76(sp),d0
    28a2:	|  |  |         add.w 78(sp),d0
    28a6:	|  |  |         movea.l 16(sp),a0
    28aa:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    28ae:	|  |  |         moveq #0,d0
    28b0:	|  |  |         move.w 14(sp),d0
    28b4:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    28b8:	|  |  |         moveq #0,d0
    28ba:	|  |  |         move.w 14(sp),d0
    28be:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    28c2:	|  |  |         move.w 38(sp),d0
    28c6:	|  |  |         lsr.w #1,d0
    28c8:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    28cc:	|  |  |         move.w 38(sp),d1
    28d0:	|  |  |         andi.w #1,d1
    28d4:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    28d8:	|  |  |  ,----- beq.s 28e2 <CstPasteChar+0x720>
      minterm = 0xbfa;
    28da:	|  |  |  |      move.w #3066,36(sp)
    28e0:	|  |  |  |  ,-- bra.s 28e8 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    28e2:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    28e8:	|  |  |     '-> move.l 1c954 <GfxBase>,d0
    28ee:	|  |  |         movea.l d0,a6
    28f0:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    28f4:	|  |  |         addq.l #1,32(sp)
    28f8:	|  |  '-------> moveq #4,d2
    28fa:	|  |            cmp.l 32(sp),d2
    28fe:	|  '----------- bge.w 285e <CstPasteChar+0x69c>
 
  }   
}
    2902:	'-------------> move.l (sp)+,d2
    2904:	                movea.l (sp)+,a6
    2906:	                lea 72(sp),sp
    290a:	                rts

0000290c <CstRestoreScreen>:


void CstRestoreScreen()
{
    290c:	                   lea -24(sp),sp
    2910:	                   move.l a6,-(sp)
    2912:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2914:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    291c:	                   move.l 1c878 <CstCleanupQueueDrawBuffer>,d0
    2922:	,----------------- beq.w 2b2a <CstRestoreScreen+0x21e>
    2926:	|                  move.l 1c870 <CstDrawBuffer>,d0
    292c:	+----------------- beq.w 2b2a <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2930:	|                  move.l 1c954 <GfxBase>,d0
    2936:	|                  movea.l d0,a6
    2938:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    293c:	|                  movea.l 16(sp),a0
    2940:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2946:	|                  movea.l 16(sp),a0
    294a:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2950:	|                  movea.l 16(sp),a0
    2954:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    295a:	|     ,----------- bra.w 2b1e <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    295e:	|  ,--|----------> movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2964:	|  |  |            move.l 4(a0),d0
    2968:	|  |  |  ,-------- beq.w 2aec <CstRestoreScreen+0x1e0>
    296c:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2972:	|  |  |  |         movea.l 4(a0),a0
    2976:	|  |  |  |         move.l 16(a0),d0
    297a:	|  |  |  |         moveq #2,d1
    297c:	|  |  |  |         cmp.l d0,d1
    297e:	|  |  |  +-------- blt.w 2aec <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2982:	|  |  |  |         move.l 1c89c <winWidth>,d0
    2988:	|  |  |  |         lsr.l #3,d0
    298a:	|  |  |  |         move.l d0,d1
    298c:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2992:	|  |  |  |         move.w 8(a0),d0
    2996:	|  |  |  |         add.w d0,d0
    2998:	|  |  |  |         sub.w d0,d1
    299a:	|  |  |  |         movea.l 16(sp),a0
    299e:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    29a2:	|  |  |  |         move.l 1c89c <winWidth>,d0
    29a8:	|  |  |  |         lsr.l #3,d0
    29aa:	|  |  |  |         move.l d0,d1
    29ac:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    29b2:	|  |  |  |         move.w 8(a0),d0
    29b6:	|  |  |  |         add.w d0,d0
    29b8:	|  |  |  |         sub.w d0,d1
    29ba:	|  |  |  |         movea.l 16(sp),a0
    29be:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    29c2:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    29c8:	|  |  |  |         move.w 14(a0),d0
    29cc:	|  |  |  |         move.w d0,d0
    29ce:	|  |  |  |         andi.l #65535,d0
    29d4:	|  |  |  |         move.l 1c89c <winWidth>,d1
    29da:	|  |  |  |         move.l d1,-(sp)
    29dc:	|  |  |  |         move.l d0,-(sp)
    29de:	|  |  |  |         jsr 17a46 <__mulsi3>
    29e4:	|  |  |  |         addq.l #8,sp
    29e6:	|  |  |  |         move.l d0,d1
    29e8:	|  |  |  |         lsr.l #3,d1
    29ea:	|  |  |  |         move.l 1c85e <CstBackDrop>,d0
    29f0:	|  |  |  |         add.l d0,d1
    29f2:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    29f8:	|  |  |  |         move.w 12(a0),d0
    29fc:	|  |  |  |         move.w d0,d0
    29fe:	|  |  |  |         andi.l #65535,d0
    2a04:	|  |  |  |         move.l d1,d2
    2a06:	|  |  |  |         add.l d0,d2
    2a08:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a0c:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2a12:	|  |  |  |         move.w 14(a0),d0
    2a16:	|  |  |  |         move.w d0,d0
    2a18:	|  |  |  |         andi.l #65535,d0
    2a1e:	|  |  |  |         move.l 1c89c <winWidth>,d1
    2a24:	|  |  |  |         move.l d1,-(sp)
    2a26:	|  |  |  |         move.l d0,-(sp)
    2a28:	|  |  |  |         jsr 17a46 <__mulsi3>
    2a2e:	|  |  |  |         addq.l #8,sp
    2a30:	|  |  |  |         move.l d0,d1
    2a32:	|  |  |  |         lsr.l #3,d1
    2a34:	|  |  |  |         move.l 1c870 <CstDrawBuffer>,d0
    2a3a:	|  |  |  |         add.l d0,d1
    2a3c:	|  |  |  |         movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2a42:	|  |  |  |         move.w 12(a0),d0
    2a46:	|  |  |  |         move.w d0,d0
    2a48:	|  |  |  |         andi.l #65535,d0
    2a4e:	|  |  |  |         move.l d1,d2
    2a50:	|  |  |  |         add.l d0,d2
    2a52:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a56:	|  |  |  |         clr.l 20(sp)
    2a5a:	|  |  |  |     ,-- bra.w 2ae2 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2a5e:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2a62:	|  |  |  |  |  |   movea.l 16(sp),a0
    2a66:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2a6a:	|  |  |  |  |  |   move.l 24(sp),d0
    2a6e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2a72:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2a76:	|  |  |  |  |  |   movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2a7c:	|  |  |  |  |  |   move.w 10(a0),d0
    2a80:	|  |  |  |  |  |   lsl.w #6,d0
    2a82:	|  |  |  |  |  |   movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2a88:	|  |  |  |  |  |   move.w 8(a0),d1
    2a8c:	|  |  |  |  |  |   add.w d1,d0
    2a8e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2a92:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2a96:	|  |  |  |  |  |   move.l 1c89c <winWidth>,d0
    2a9c:	|  |  |  |  |  |   lsr.l #3,d0
    2a9e:	|  |  |  |  |  |   move.l 1c8a0 <winHeight>,d1
    2aa4:	|  |  |  |  |  |   move.l d1,-(sp)
    2aa6:	|  |  |  |  |  |   move.l d0,-(sp)
    2aa8:	|  |  |  |  |  |   jsr 17a46 <__mulsi3>
    2aae:	|  |  |  |  |  |   addq.l #8,sp
    2ab0:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2ab4:	|  |  |  |  |  |   move.l 1c89c <winWidth>,d0
    2aba:	|  |  |  |  |  |   lsr.l #3,d0
    2abc:	|  |  |  |  |  |   move.l 1c8a0 <winHeight>,d1
    2ac2:	|  |  |  |  |  |   move.l d1,-(sp)
    2ac4:	|  |  |  |  |  |   move.l d0,-(sp)
    2ac6:	|  |  |  |  |  |   jsr 17a46 <__mulsi3>
    2acc:	|  |  |  |  |  |   addq.l #8,sp
    2ace:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2ad2:	|  |  |  |  |  |   move.l 1c954 <GfxBase>,d0
    2ad8:	|  |  |  |  |  |   movea.l d0,a6
    2ada:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ade:	|  |  |  |  |  |   addq.l #1,20(sp)
    2ae2:	|  |  |  |  |  '-> moveq #4,d0
    2ae4:	|  |  |  |  |      cmp.l 20(sp),d0
    2ae8:	|  |  |  |  '----- bge.w 2a5e <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2aec:	|  |  |  '-------> move.l 1c878 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2af4:	|  |  |            movea.l 1c878 <CstCleanupQueueDrawBuffer>,a0
    2afa:	|  |  |            move.l 16(a0),d0
    2afe:	|  |  |            move.l d0,1c878 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2b04:	|  |  |            move.l 12(sp),8(sp)
    2b0a:	|  |  |            move.l 1c948 <SysBase>,d0
    2b10:	|  |  |            movea.l d0,a6
    2b12:	|  |  |            movea.l 8(sp),a1
    2b16:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2b1a:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2b1e:	|  |  '----------> move.l 1c878 <CstCleanupQueueDrawBuffer>,d0
    2b24:	|  '-------------- bne.w 295e <CstRestoreScreen+0x52>
    2b28:	|              ,-- bra.s 2b2c <CstRestoreScreen+0x220>
    return;
    2b2a:	'--------------|-> nop
  }
  
}
    2b2c:	               '-> move.l (sp)+,d2
    2b2e:	                   movea.l (sp)+,a6
    2b30:	                   lea 24(sp),sp
    2b34:	                   rts

00002b36 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2b36:	                                                                               lea -44(sp),sp
    2b3a:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2b3e:	                                                                               movea.l 92(sp),a2
    2b42:	                                                                               move.l 96(sp),80(sp)
    2b48:	                                                                               move.l 100(sp),d4
    2b4c:	                                                                               move.l 104(sp),56(sp)
    2b52:	                                                                               move.l 108(sp),d2
    2b56:	                                                                               move.w d4,d3
    2b58:	                                                                               move.w 58(sp),d6
    2b5c:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2b5e:	                                                                               movea.w d6,a5
    2b60:	                                                                               movea.w d4,a4
    2b62:	                                                                               move.l a5,-(sp)
    2b64:	                                                                               move.l a4,-(sp)
    2b66:	                                                                               move.l 1c9a4 <zBuffer>,-(sp)
    2b6c:	                                                                               move.l a2,-(sp)
    2b6e:	                                                                               jsr 1514 <CstDrawZBuffer>
    2b74:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2b76:	                                                                               lea 16(sp),sp
    2b7a:	                                                                               moveq #1,d0
    2b7c:	                                                                               cmp.w d2,d0
    2b7e:	                                                ,----------------------------- beq.w 2f90 <CstScaleSprite+0x45a>
    2b82:	                                                |                              moveq #2,d1
    2b84:	                                                |                              cmp.w d2,d1
    2b86:	                                                |                       ,----- beq.w 2e4a <CstScaleSprite+0x314>
    2b8a:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2b8c:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2b90:	                                                |  |                    |      move.l a5,d0
    2b92:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2b94:	                                                |  |                    |      tst.w d6
    2b96:	                                                |  |           ,--------|----- blt.w 2e66 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2b9a:	                                                |  |           |  ,-----|----> movea.l 1c8a0 <winHeight>,a0
    2ba0:	                                                |  |           |  |     |      cmp.l a0,d0
    2ba2:	                                                |  |  ,--------|--|-----|----- ble.w 2f9a <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2ba6:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2ba8:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 305c <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2bac:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2bb0:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2bb2:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2bb6:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2bb8:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2bba:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2bbc:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2bbe:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2bc0:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2e86 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2bc4:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1c89c <winWidth>,d3
    2bca:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2bcc:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 2fa8 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2bd0:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2bd2:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2bd4:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 305c <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2bd8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2bda:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2bdc:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2bde:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2be0:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17a46 <__mulsi3>,a4
    2be6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2be8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2bea:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2bee:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2bf0:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2bf2:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2bf4:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2bf6:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2bfa:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2bfe:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2c02:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2c04:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2c06:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c08:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c0a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2c0c:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2c0e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2c10:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2c12:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2c14:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2c16:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2c1a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2c1c:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2c1e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2c24:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2c26:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2c28:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2c2a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2c30:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2c32:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c36:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2c3c:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2c3e:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2c40:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2c42:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2c44:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2c48:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2c4c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2c4e:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2c50:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2c52:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2c56:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2c5a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2c5c:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2c5e:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3370 <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2c62:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2c68:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2c6a:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3418 <CstScaleSprite+0x8e2>
    2c6e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2c70:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2c72:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2c74:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2c7a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2c80:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2c86:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2c8a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1c880 <CstBackDropBufferApplyCursor>
    2c90:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2c94:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2c9a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2c9c:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2c9e:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2ca0:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2ca2:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2ca4:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3266 <CstScaleSprite+0x730>
    2ca8:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2caa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2cac:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #117076,d3
    2cb2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2cb4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2cb6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2cba:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
  custom->bltalwm = bltalwm;
    2cc2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
  custom->bltamod = bltamod;
    2cc8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
  custom->bltbmod = bltbmod;
    2cce:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e5a>
  custom->bltcmod = bltcmod;
    2cd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e58>
  custom->bltdmod = bltdmod;
    2cda:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
  custom->bltcon0 = bltcon0;
    2ce0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
  custom->bltcon1 = bltcon1;  
    2ce8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2cf0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2cf2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2cf6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2cf8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2cfa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2cfc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2d00:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2d06:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2d08:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1c89c <winWidth>,d4
    2d0e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2d10:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1c8a2 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2d16:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2d1c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    2d22:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    2d2a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    2d30:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d36:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2d38:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3164 <CstScaleSprite+0x62e>
    2d3c:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2d3e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2d40:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2d42:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2d44:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    2d4a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2d4e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2d50:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2d52:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d54:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d56:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d5a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2d5c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    2d62:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    2d68:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    2d6e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d74:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2d76:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 31a6 <CstScaleSprite+0x670>
    2d7a:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2d7c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2d7e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2d80:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2d82:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    2d88:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2d8a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2d8c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d8e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d90:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d94:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2d96:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    2d9c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    2da2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    2da8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dae:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2db0:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 31e4 <CstScaleSprite+0x6ae>
    2db4:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2db6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2db8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2dba:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2dbc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    2dc2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2dc4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2dc6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2dc8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2dca:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dce:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2dd0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    2dd6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    2ddc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    2de2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2de8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dea:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3222 <CstScaleSprite+0x6ec>
    2dee:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2df0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2df2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2df4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2df6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    2dfc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2e00:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2e02:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e04:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e06:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e0a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e0c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    2e12:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    2e18:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    2e1e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e24:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e26:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3140 <CstScaleSprite+0x60a>
    2e2a:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    WaitBlit();
    2e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1c86a <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1c85e <CstBackDrop>,a3
    if(y + single->height < 0) {
    2e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2b9a <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2e68:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 305c <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2bc4 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2e88:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 305c <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    2e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    2e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    2e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    2e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    2e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    2ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    2ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    2ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c89c <winWidth>,d3
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17a46 <__mulsi3>,a4
    2eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    2ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    2ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    2ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 3072 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    2ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    2ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    2ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    2efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    2f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    2f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 30d8 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    2f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1c880 <CstBackDropBufferApplyCursor>
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    2f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    2f88:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2ca8 <CstScaleSprite+0x172>
    2f8c:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3266 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1c870 <CstDrawBuffer>,a3
      break;
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2b8c <CstScaleSprite+0x56>
    ystartdst = y;
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2bb8 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17a46 <__mulsi3>,a4
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    3006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3300 <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 33de <CstScaleSprite+0x8a8>
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1c880 <CstBackDropBufferApplyCursor>
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    3054:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2ca8 <CstScaleSprite+0x172>
    3058:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3266 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    305c:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #97937,92(sp)
}
    3064:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3068:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    306c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 170ba <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3072:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3076:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    307a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    307e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    3084:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3086:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    308a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    308c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    308e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    3090:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    3094:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    3098:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    309a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    309c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    309e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    30a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    30a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    30a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    30a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    30ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    30b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    30b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    30b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    30ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    30be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    30c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    30c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    30c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    30ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    30cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    30d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    30d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    30d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 2f4e <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    30d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1c878 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    30de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1c948 <SysBase>,a6
    30e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    30e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    30e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    30ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    30ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1c878 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    30f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    30f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    30fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3100:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3106:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    3108:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    310a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 344e <CstScaleSprite+0x918>
    310e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    3110:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    3114:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    3116:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    311a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3120:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3124:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3128:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1c89c <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    312e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3130:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    3132:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    3134:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    3136:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    3138:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2ca8 <CstScaleSprite+0x172>
    313c:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3266 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3140:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3142:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3146:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3148:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    314c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    WaitBlit();
    3152:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3156:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    315a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    315e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3164:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    316a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    3170:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    317c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3180:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3188:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    318e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    319a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    31a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2d7a <CstScaleSprite+0x244>
    31a6:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    31aa:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    31ac:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    31b0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    31b2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    31b8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    31ba:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    31bc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    31be:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    31c0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    31cc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    31d8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31de:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    31e0:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2db4 <CstScaleSprite+0x27e>
    31e4:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    31e6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    31e8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    31ea:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    31ec:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    31ee:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    31f0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    31f6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    31f8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    31fa:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    31fc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    31fe:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3202:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3204:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    320a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    3210:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    3216:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    321c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    321e:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2dee <CstScaleSprite+0x2b8>
    3222:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3224:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    3226:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    3228:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    322a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    322c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    322e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e50>
    bltbpt += bltbptplus;
    3234:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3238:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    323a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    323c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    323e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3242:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3244:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    324a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    3250:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    3256:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    325c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    325e:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2e2a <CstScaleSprite+0x2f4>
    3262:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 3140 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3266:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    3268:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    326a:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    326c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #117076,d3
    3272:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    3274:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3276:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    327a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e3c>
  custom->bltalwm = bltalwm;
    3282:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e3e>
  custom->bltamod = bltamod;
    3288:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e5c>
  custom->bltbmod = bltbmod;
    328e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e5a>
  custom->bltcmod = bltcmod;
    3294:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e58>
  custom->bltdmod = bltdmod;
    329a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e5e>
  custom->bltcon0 = bltcon0;
    32a0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e38>
  custom->bltcon1 = bltcon1;  
    32a8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e3a>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    32b0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32b2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    32b6:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    32b8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    32ba:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    32bc:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    32c0:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    32c6:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    32c8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1c89c <winWidth>,d4
    32ce:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    32d0:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1c8a2 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    32d6:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    32dc:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e48>
    custom->bltbpt = (APTR) bltbpt;
    32e2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e44>
    custom->bltcpt = (APTR) bltcpt;
    32ea:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e40>
    custom->bltdpt = (APTR) bltdpt;
    32f0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e4c>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f6:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    32f8:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2d3c <CstScaleSprite+0x206>
    32fc:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 3164 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3300:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1c878 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3306:	|  |  |  |  |                                         |  |  |  |               movea.l 1c948 <SysBase>,a6
    330c:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    330e:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    3310:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    3314:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    3316:	|  |  |  |  |                                         |  |  |  |               move.l d0,1c878 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    331c:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3320:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3322:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3328:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    332e:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    3330:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    3332:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3478 <CstScaleSprite+0x942>
    3336:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3338:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    333a:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    333e:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3344:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3348:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    334c:	|  |  |  |  |                                         |  |  |  |     |         move.l 1c89c <winWidth>,d3
    3352:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    3358:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    335c:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    335e:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3360:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    3362:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    3364:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3366:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    3368:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2ca8 <CstScaleSprite+0x172>
    336c:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3266 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3370:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1c878 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3376:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1c948 <SysBase>,a6
    337c:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    337e:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    3380:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3384:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3386:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1c878 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    338c:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3390:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3392:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3398:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    339e:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    33a0:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    33a2:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 34aa <CstScaleSprite+0x974>
    33a6:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    33a8:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    33aa:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    33ae:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    33b4:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33ba:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33c0:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1c89c <winWidth>,d3
    33c6:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    33cc:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33ce:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    33d0:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    33d2:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    33d4:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    33d6:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2ca8 <CstScaleSprite+0x172>
    33da:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3266 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    33de:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    33e0:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    33e2:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    33e4:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    33e6:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    33e8:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    33ee:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    33f2:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    33f6:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    33fa:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1c880 <CstBackDropBufferApplyCursor>
    3400:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3404:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    340a:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    340e:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3410:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3412:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    3414:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 304c <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3418:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    341a:	|                                                           |  |  |  |  |  |   add.l d1,d0
    341c:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    341e:	|                                                           |  |  |  |  |  |   add.w d0,d2
    3420:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3422:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3428:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    342e:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3434:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    3438:	|                                                           |  |  |  |  |  |   move.l a1,1c880 <CstBackDropBufferApplyCursor>
    343e:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    3442:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3448:	|                                                           |  |  |  |  |  |   clr.w d2
    344a:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2c9c <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    344e:	                                                            |  '--|--|--|--|-> moveq #15,d0
    3450:	                                                            |     |  |  |  |   add.l d1,d0
    3452:	                                                            |     |  |  |  |   asr.l #4,d0
    3454:	                                                            |     |  |  |  |   add.w 78(sp),d0
    3458:	                                                            |     |  |  |  |   add.w d2,d0
    345a:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    345e:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3464:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3468:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    346c:	                                                            |     |  |  |  |   move.l 1c89c <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3472:	                                                            |     |  |  |  |   suba.l a4,a4
    3474:	                                                            '-----|--|--|--|-- bra.w 3130 <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3478:	                                                                  |  '--|--|-> moveq #15,d0
    347a:	                                                                  |     |  |   add.l d1,d0
    347c:	                                                                  |     |  |   asr.l #4,d0
    347e:	                                                                  |     |  |   addq.w #1,d0
    3480:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3484:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    348a:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    348e:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3492:	                                                                  |     |  |   move.l 1c89c <winWidth>,d3
    3498:	                                                                  |     |  |   move.w #-1,76(sp)
    349e:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34a2:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    34a4:	                                                                  |     |  |   clr.w d6
    34a6:	                                                                  '-----|--|-- bra.w 3360 <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    34aa:	                                                                        |  '-> moveq #15,d0
    34ac:	                                                                        |      add.l d1,d0
    34ae:	                                                                        |      asr.l #4,d0
    34b0:	                                                                        |      add.w d0,d2
    34b2:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    34b6:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    34bc:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    34c2:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34c8:	                                                                        |      move.l 1c89c <winWidth>,d3
    34ce:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34d4:	                                                                        |      clr.w d2
    34d6:	                                                                        '----- bra.w 33ce <CstScaleSprite+0x898>

000034da <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    34da:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    34dc:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    34e2:	move.l 8(sp),d0
    34e6:	movea.l (sp),a0
    34e8:	move.l d0,128(a0)
}
    34ec:	nop
    34ee:	addq.l #4,sp
    34f0:	rts

000034f2 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    34f2:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    34f6:	move.l 1c86c <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    34fe:	move.l 1c870 <CstDrawBuffer>,d0
    3504:	move.l d0,1c86c <CstViewBuffer>
  CstDrawBuffer = tmp;
    350a:	move.l 16(sp),1c870 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3512:	move.l 1c874 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    351a:	move.l 1c878 <CstCleanupQueueDrawBuffer>,d0
    3520:	move.l d0,1c874 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3526:	move.l 12(sp),1c878 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    352e:	move.l 1c866 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3536:	move.l 1c86c <CstViewBuffer>,d0
    353c:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3540:	move.l 4(sp),d0
    3544:	clr.w d0
    3546:	swap d0
    3548:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    354c:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3550:	movea.w #118,a0
    3554:	adda.l 8(sp),a0
    3558:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    355a:	movea.w #114,a0
    355e:	adda.l 8(sp),a0
    3562:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3566:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    356e:	move.l 4(sp),d0
    3572:	clr.w d0
    3574:	swap d0
    3576:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    357a:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    357e:	movea.w #126,a0
    3582:	adda.l 8(sp),a0
    3586:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3588:	movea.w #122,a0
    358c:	adda.l 8(sp),a0
    3590:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3594:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    359c:	move.l 4(sp),d0
    35a0:	clr.w d0
    35a2:	swap d0
    35a4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    35a8:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    35ac:	movea.l 8(sp),a0
    35b0:	lea 134(a0),a0
    35b4:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    35b6:	movea.l 8(sp),a0
    35ba:	lea 130(a0),a0
    35be:	move.w 2(sp),(a0)

  ptr +=  40*256;
    35c2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    35ca:	move.l 4(sp),d0
    35ce:	clr.w d0
    35d0:	swap d0
    35d2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    35d6:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    35da:	movea.l 8(sp),a0
    35de:	lea 142(a0),a0
    35e2:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    35e4:	movea.l 8(sp),a0
    35e8:	lea 138(a0),a0
    35ec:	move.w 2(sp),(a0)

  ptr +=  40*256;
    35f0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    35f8:	move.l 4(sp),d0
    35fc:	clr.w d0
    35fe:	swap d0
    3600:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3604:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3608:	movea.l 8(sp),a0
    360c:	lea 150(a0),a0
    3610:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3612:	movea.l 8(sp),a0
    3616:	lea 146(a0),a0
    361a:	move.w 2(sp),(a0)

}
    361e:	nop
    3620:	lea 20(sp),sp
    3624:	rts

00003626 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3626:	          lea -80(sp),sp
    362a:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    362c:	          pea 17ec4 <PutChar+0x368>
    3632:	          jsr 170ba <KPrintF>
    3638:	          addq.l #4,sp

  width = width / 8;
    363a:	          move.l 88(sp),d0
    363e:	      ,-- bpl.s 3642 <CstReserveBackdrop+0x1c>
    3640:	      |   addq.l #7,d0
    3642:	      '-> asr.l #3,d0
    3644:	          move.l d0,88(sp)

  if( width < 40) 
    3648:	          moveq #39,d0
    364a:	          cmp.l 88(sp),d0
    364e:	      ,-- blt.s 3664 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3650:	      |   pea 17ede <PutChar+0x382>
    3656:	      |   jsr 170ba <KPrintF>
    365c:	      |   addq.l #4,sp
    return FALSE;
    365e:	      |   clr.w d0
    3660:	,-----|-- bra.w 3980 <CstReserveBackdrop+0x35a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3664:	|     '-> pea 17f1c <PutChar+0x3c0>
    366a:	|         jsr 170ba <KPrintF>
    3670:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3672:	|         move.l 88(sp),-(sp)
    3676:	|         jsr ffa <CstCreateCopperlist>
    367c:	|         addq.l #4,sp
    367e:	|         move.l d0,1c866 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3684:	|         pea 17f3c <PutChar+0x3e0>
    368a:	|         jsr 170ba <KPrintF>
    3690:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3692:	|         move.l 88(sp),d1
    3696:	|         move.l 92(sp),d0
    369a:	|         muls.w d1,d0
    369c:	|         move.w d0,1c85c <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    36a2:	|         move.w 1c85c <CstBackdropSizePlane>,d1
    36a8:	|         move.w d1,d0
    36aa:	|         add.w d0,d0
    36ac:	|         add.w d0,d0
    36ae:	|         add.w d1,d0
    36b0:	|         move.w d0,1c85a <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    36b6:	|         move.w 1c85a <CstBackdropSize>,d0
    36bc:	|         move.w d0,d0
    36be:	|         andi.l #65535,d0
    36c4:	|         move.l d0,72(sp)
    36c8:	|         moveq #2,d1
    36ca:	|         move.l d1,68(sp)
    36ce:	|         move.l 1c948 <SysBase>,d0
    36d4:	|         movea.l d0,a6
    36d6:	|         move.l 72(sp),d0
    36da:	|         move.l 68(sp),d1
    36de:	|         jsr -684(a6)
    36e2:	|         move.l d0,64(sp)
    36e6:	|         move.l 64(sp),d0
    36ea:	|         move.l d0,1c85e <CstBackDrop>
  if( !CstBackDrop)
    36f0:	|         move.l 1c85e <CstBackDrop>,d0
    36f6:	|     ,-- bne.s 370c <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    36f8:	|     |   pea 17f63 <PutChar+0x407>
    36fe:	|     |   jsr 170ba <KPrintF>
    3704:	|     |   addq.l #4,sp
    return FALSE;  
    3706:	|     |   clr.w d0
    3708:	+-----|-- bra.w 3980 <CstReserveBackdrop+0x35a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    370c:	|     '-> pea 17f9b <PutChar+0x43f>
    3712:	|         jsr 170ba <KPrintF>
    3718:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    371a:	|         move.l 1c85e <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3722:	|         clr.l 76(sp)
    3726:	|     ,-- bra.s 373c <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3728:	|  ,--|-> move.l 80(sp),d0
    372c:	|  |  |   move.l d0,d1
    372e:	|  |  |   addq.l #4,d1
    3730:	|  |  |   move.l d1,80(sp)
    3734:	|  |  |   movea.l d0,a0
    3736:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3738:	|  |  |   addq.l #1,76(sp)
    373c:	|  |  '-> move.w 1c85a <CstBackdropSize>,d0
    3742:	|  |      lsr.w #2,d0
    3744:	|  |      move.w d0,d0
    3746:	|  |      andi.l #65535,d0
    374c:	|  |      cmp.l 76(sp),d0
    3750:	|  '----- bgt.s 3728 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3752:	|         move.w 1c85a <CstBackdropSize>,d0
    3758:	|         move.w d0,d0
    375a:	|         andi.l #65535,d0
    3760:	|         move.l 88(sp),d1
    3764:	|         add.l d1,d1
    3766:	|         add.l d1,d0
    3768:	|         move.l d0,60(sp)
    376c:	|         moveq #2,d0
    376e:	|         move.l d0,56(sp)
    3772:	|         move.l 1c948 <SysBase>,d0
    3778:	|         movea.l d0,a6
    377a:	|         move.l 60(sp),d0
    377e:	|         move.l 56(sp),d1
    3782:	|         jsr -684(a6)
    3786:	|         move.l d0,52(sp)
    378a:	|         move.l 52(sp),d0
    378e:	|         move.l d0,1c870 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3794:	|         move.l 1c870 <CstDrawBuffer>,d0
    379a:	|     ,-- bne.s 37b0 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    379c:	|     |   pea 17fc1 <PutChar+0x465>
    37a2:	|     |   jsr 170ba <KPrintF>
    37a8:	|     |   addq.l #4,sp
    return FALSE;  
    37aa:	|     |   clr.w d0
    37ac:	+-----|-- bra.w 3980 <CstReserveBackdrop+0x35a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    37b0:	|     '-> pea 17ffb <PutChar+0x49f>
    37b6:	|         jsr 170ba <KPrintF>
    37bc:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    37be:	|         move.l #10000,48(sp)
    37c6:	|         clr.l 44(sp)
    37ca:	|         move.l 1c948 <SysBase>,d0
    37d0:	|         movea.l d0,a6
    37d2:	|         move.l 48(sp),d0
    37d6:	|         move.l 44(sp),d1
    37da:	|         jsr -684(a6)
    37de:	|         move.l d0,40(sp)
    37e2:	|         move.l 40(sp),d0
    37e6:	|         move.l d0,1c87c <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    37ec:	|         move.l 1c87c <CstBackDropBufferApplyStart>,d0
    37f2:	|     ,-- bne.s 3808 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    37f4:	|     |   pea 18023 <PutChar+0x4c7>
    37fa:	|     |   jsr 170ba <KPrintF>
    3800:	|     |   addq.l #4,sp
    return FALSE;  
    3802:	|     |   clr.w d0
    3804:	+-----|-- bra.w 3980 <CstReserveBackdrop+0x35a>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3808:	|     '-> move.l 1c87c <CstBackDropBufferApplyStart>,d0
    380e:	|         move.l d0,1c880 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3814:	|         movea.l 1c87c <CstBackDropBufferApplyStart>,a0
    381a:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    381c:	|         movea.l 1c87c <CstBackDropBufferApplyStart>,a0
    3822:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3824:	|         move.w 1c85a <CstBackdropSize>,d0
    382a:	|         move.w d0,d0
    382c:	|         andi.l #65535,d0
    3832:	|         move.l 88(sp),d1
    3836:	|         add.l d1,d1
    3838:	|         add.l d1,d0
    383a:	|         move.l d0,36(sp)
    383e:	|         moveq #2,d1
    3840:	|         move.l d1,32(sp)
    3844:	|         move.l 1c948 <SysBase>,d0
    384a:	|         movea.l d0,a6
    384c:	|         move.l 36(sp),d0
    3850:	|         move.l 32(sp),d1
    3854:	|         jsr -684(a6)
    3858:	|         move.l d0,28(sp)
    385c:	|         move.l 28(sp),d0
    3860:	|         move.l d0,1c86c <CstViewBuffer>
  if( !CstViewBuffer)
    3866:	|         move.l 1c86c <CstViewBuffer>,d0
    386c:	|     ,-- bne.s 3882 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    386e:	|     |   pea 1806e <PutChar+0x512>
    3874:	|     |   jsr 170ba <KPrintF>
    387a:	|     |   addq.l #4,sp
    return FALSE;  
    387c:	|     |   clr.w d0
    387e:	+-----|-- bra.w 3980 <CstReserveBackdrop+0x35a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3882:	|     '-> pea 180a8 <PutChar+0x54c>
    3888:	|         jsr 170ba <KPrintF>
    388e:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3890:	|         move.l 1c870 <CstDrawBuffer>,d1
    3896:	|         move.l 88(sp),d0
    389a:	|     ,-- bpl.s 389e <CstReserveBackdrop+0x278>
    389c:	|     |   addq.l #3,d0
    389e:	|     '-> asr.l #2,d0
    38a0:	|         add.l d0,d0
    38a2:	|         add.l d0,d0
    38a4:	|         add.l d1,d0
    38a6:	|         move.l d0,1c870 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    38ac:	|         move.l 1c86c <CstViewBuffer>,d1
    38b2:	|         move.l 88(sp),d0
    38b6:	|     ,-- bpl.s 38ba <CstReserveBackdrop+0x294>
    38b8:	|     |   addq.l #3,d0
    38ba:	|     '-> asr.l #2,d0
    38bc:	|         add.l d0,d0
    38be:	|         add.l d0,d0
    38c0:	|         add.l d1,d0
    38c2:	|         move.l d0,1c86c <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    38c8:	|         move.l #5200,24(sp)
    38d0:	|         moveq #2,d0
    38d2:	|         move.l d0,20(sp)
    38d6:	|         move.l 1c948 <SysBase>,d0
    38dc:	|         movea.l d0,a6
    38de:	|         move.l 24(sp),d0
    38e2:	|         move.l 20(sp),d1
    38e6:	|         jsr -684(a6)
    38ea:	|         move.l d0,16(sp)
    38ee:	|         move.l 16(sp),d0
    38f2:	|         move.l d0,1c890 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    38f8:	|         move.l #5600,12(sp)
    3900:	|         moveq #2,d1
    3902:	|         move.l d1,8(sp)
    3906:	|         move.l 1c948 <SysBase>,d0
    390c:	|         movea.l d0,a6
    390e:	|         move.l 12(sp),d0
    3912:	|         move.l 8(sp),d1
    3916:	|         jsr -684(a6)
    391a:	|         move.l d0,4(sp)
    391e:	|         move.l 4(sp),d0
    3922:	|         move.l d0,1c894 <CstZBufferWork>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3928:	|         move.l 1c866 <CstCopperList>,d0
    392e:	|     ,-- beq.s 3940 <CstReserveBackdrop+0x31a>
    3930:	|     |   move.l 1c870 <CstDrawBuffer>,d0
    3936:	|     +-- beq.s 3940 <CstReserveBackdrop+0x31a>
    3938:	|     |   move.l 1c86c <CstViewBuffer>,d0
    393e:	|  ,--|-- bne.s 3952 <CstReserveBackdrop+0x32c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3940:	|  |  '-> pea 180d0 <PutChar+0x574>
    3946:	|  |      jsr 170ba <KPrintF>
    394c:	|  |      addq.l #4,sp
    return FALSE;
    394e:	|  |      clr.w d0
    3950:	+--|----- bra.s 3980 <CstReserveBackdrop+0x35a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3952:	|  '----> pea 180fd <PutChar+0x5a1>
    3958:	|         jsr 170ba <KPrintF>
    395e:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3960:	|         move.l 1c866 <CstCopperList>,d0
    3966:	|         move.l d0,-(sp)
    3968:	|         jsr 34da <CstSetCl>
    396e:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3970:	|         pea 18124 <PutChar+0x5c8>
    3976:	|         jsr 170ba <KPrintF>
    397c:	|         addq.l #4,sp
  return TRUE;
    397e:	|         moveq #1,d0

}
    3980:	'-------> movea.l (sp)+,a6
    3982:	          lea 80(sp),sp
    3986:	          rts

00003988 <CstUnfreeze>:

void CstUnfreeze() {
    3988:	       lea -24(sp),sp
    398c:	       move.l a6,-(sp)
    398e:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3990:	       pea 18147 <PutChar+0x5eb>
    3996:	       jsr 170ba <KPrintF>
    399c:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    399e:	       move.l 1c89c <winWidth>,d0
    39a4:	       lsr.l #3,d0
    39a6:	       move.l d0,d1
    39a8:	       move.l 1c8a0 <winHeight>,d0
    39ae:	       move.l d0,d0
    39b0:	       muls.w d0,d1
    39b2:	       move.w d1,d0
    39b4:	       add.w d0,d0
    39b6:	       add.w d0,d0
    39b8:	       move.w d0,d2
    39ba:	       add.w d1,d2
    39bc:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    39c0:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    39c8:	       move.l 1c862 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    39d0:	       move.l 1c85e <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    39d8:	       clr.l 20(sp)
    39dc:	   ,-- bra.s 3a02 <CstUnfreeze+0x7a>
  {
    *dst++ = *src++;
    39de:	,--|-> move.l 28(sp),d1
    39e2:	|  |   move.l d1,d0
    39e4:	|  |   addq.l #4,d0
    39e6:	|  |   move.l d0,28(sp)
    39ea:	|  |   move.l 24(sp),d0
    39ee:	|  |   move.l d0,d2
    39f0:	|  |   addq.l #4,d2
    39f2:	|  |   move.l d2,24(sp)
    39f6:	|  |   movea.l d1,a0
    39f8:	|  |   move.l (a0),d1
    39fa:	|  |   movea.l d0,a0
    39fc:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    39fe:	|  |   addq.l #1,20(sp)
    3a02:	|  '-> move.w 18(sp),d0
    3a06:	|      lsr.w #2,d0
    3a08:	|      move.w d0,d0
    3a0a:	|      andi.l #65535,d0
    3a10:	|      cmp.l 20(sp),d0
    3a14:	'----- bgt.s 39de <CstUnfreeze+0x56>
  }

  CstApplyBackDropCounter = 2;
    3a16:	       move.w #2,1c86a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3a1e:	       move.l 1c89c <winWidth>,d0
    3a24:	       lsr.l #4,d0
    3a26:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3a2c:	       move.l a0,d1
    3a2e:	       addq.l #2,d1
    3a30:	       move.l d1,1c880 <CstBackDropBufferApplyCursor>
    3a36:	       move.l d0,d0
    3a38:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3a3a:	       move.l 1c8a0 <winHeight>,d0
    3a40:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3a46:	       move.l a0,d1
    3a48:	       addq.l #2,d1
    3a4a:	       move.l d1,1c880 <CstBackDropBufferApplyCursor>
    3a50:	       move.l d0,d0
    3a52:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3a54:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3a5a:	       move.l a0,d0
    3a5c:	       addq.l #2,d0
    3a5e:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    3a64:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3a66:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3a6c:	       move.l a0,d0
    3a6e:	       addq.l #2,d0
    3a70:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    3a76:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3a78:	       movea.l 1c880 <CstBackDropBufferApplyCursor>,a0
    3a7e:	       move.l a0,d0
    3a80:	       addq.l #2,d0
    3a82:	       move.l d0,1c880 <CstBackDropBufferApplyCursor>
    3a88:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3a8a:	       move.l 1c862 <CstBackDropBackup>,d0
    3a90:	   ,-- beq.s 3ab8 <CstUnfreeze+0x130>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3a92:	   |   pea 18172 <PutChar+0x616>
    3a98:	   |   jsr 170ba <KPrintF>
    3a9e:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3aa0:	   |   move.l 1c862 <CstBackDropBackup>,10(sp)
    3aa8:	   |   move.l 1c948 <SysBase>,d0
    3aae:	   |   movea.l d0,a6
    3ab0:	   |   movea.l 10(sp),a1
    3ab4:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3ab8:	   '-> pea 18196 <PutChar+0x63a>
    3abe:	       jsr 170ba <KPrintF>
    3ac4:	       addq.l #4,sp

}
    3ac6:	       nop
    3ac8:	       move.l (sp)+,d2
    3aca:	       movea.l (sp)+,a6
    3acc:	       lea 24(sp),sp
    3ad0:	       rts

00003ad2 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3ad2:	       lea -28(sp),sp
    3ad6:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3ada:	       move.l 52(sp),-(sp)
    3ade:	       jsr 156c4 <stringWidth>
    3ae4:	       addq.l #4,sp
    3ae6:	       asr.l #1,d0
    3ae8:	       move.l d0,-(sp)
    3aea:	       jsr 174ec <__floatsisf>
    3af0:	       addq.l #4,sp
    3af2:	       move.l d0,d1
    3af4:	       move.l 1c2da <cameraZoom>,d0
    3afa:	       move.l d0,-(sp)
    3afc:	       move.l d1,-(sp)
    3afe:	       jsr 173a2 <__divsf3>
    3b04:	       addq.l #8,sp
    3b06:	       move.l d0,-(sp)
    3b08:	       jsr 17484 <__fixsfsi>
    3b0e:	       addq.l #4,sp
    3b10:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3b14:	       move.l 56(sp),d0
    3b18:	       sub.l 44(sp),d0
    3b1c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3b20:	       move.l 56(sp),d0
    3b24:	       add.l 44(sp),d0
    3b28:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3b2c:	       moveq #12,d0
    3b2e:	       move.l d0,32(sp)
    3b32:	       clr.l 28(sp)
    3b36:	       move.l 1c948 <SysBase>,d0
    3b3c:	       movea.l d0,a6
    3b3e:	       move.l 32(sp),d0
    3b42:	       move.l 28(sp),d1
    3b46:	       jsr -684(a6)
    3b4a:	       move.l d0,24(sp)
    3b4e:	       move.l 24(sp),d0
    3b52:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3b56:	       movea.l 1c898 <speech>,a0
    3b5c:	       move.l 4(a0),d0
    3b60:	       movea.l 20(sp),a0
    3b64:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3b68:	       move.l 52(sp),-(sp)
    3b6c:	       jsr b8 <copyString>
    3b72:	       addq.l #4,sp
    3b74:	       movea.l 20(sp),a0
    3b78:	       move.l d0,(a0)
	newLine -> x = xx1;
    3b7a:	       movea.l 20(sp),a0
    3b7e:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3b84:	       movea.l 1c898 <speech>,a0
    3b8a:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3b90:	       moveq #4,d0
    3b92:	       cmp.l 40(sp),d0
    3b96:	   ,-- blt.s 3bb8 <addSpeechLine+0xe6>
    3b98:	   |   movea.l 60(sp),a0
    3b9c:	   |   move.l (a0),d1
    3b9e:	   |   moveq #5,d0
    3ba0:	   |   sub.l 40(sp),d0
    3ba4:	   |   cmp.l d1,d0
    3ba6:	   +-- ble.s 3bb8 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3ba8:	   |   moveq #5,d0
    3baa:	   |   sub.l 40(sp),d0
    3bae:	   |   movea.l 60(sp),a0
    3bb2:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3bb4:	,--|-- bra.w 3ce4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3bb8:	|  '-> move.l 36(sp),-(sp)
    3bbc:	|      jsr 174ec <__floatsisf>
    3bc2:	|      addq.l #4,sp
    3bc4:	|      move.l d0,d2
    3bc6:	|      move.l 1c89c <winWidth>,d0
    3bcc:	|      move.l d0,-(sp)
    3bce:	|      jsr 17514 <__floatunsisf>
    3bd4:	|      addq.l #4,sp
    3bd6:	|      move.l d0,d1
    3bd8:	|      move.l 1c2da <cameraZoom>,d0
    3bde:	|      move.l d0,-(sp)
    3be0:	|      move.l d1,-(sp)
    3be2:	|      jsr 173a2 <__divsf3>
    3be8:	|      addq.l #8,sp
    3bea:	|      move.l #1084227584,-(sp)
    3bf0:	|      move.l d0,-(sp)
    3bf2:	|      jsr 177e0 <__subsf3>
    3bf8:	|      addq.l #8,sp
    3bfa:	|      move.l d0,-(sp)
    3bfc:	|      move.l d2,-(sp)
    3bfe:	|      jsr 175d4 <__gesf2>
    3c04:	|      addq.l #8,sp
    3c06:	|      tst.l d0
    3c08:	|  ,-- bge.s 3c0e <addSpeechLine+0x13c>
}
    3c0a:	+--|-- bra.w 3ce4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3c0e:	|  '-> movea.l 60(sp),a0
    3c12:	|      move.l (a0),d0
    3c14:	|      move.l d0,-(sp)
    3c16:	|      jsr 174ec <__floatsisf>
    3c1c:	|      addq.l #4,sp
    3c1e:	|      move.l d0,-(sp)
    3c20:	|      jsr 1740e <__extendsfdf2>
    3c26:	|      addq.l #4,sp
    3c28:	|      move.l d0,d4
    3c2a:	|      move.l d1,d5
    3c2c:	|      move.l 1c89c <winWidth>,d0
    3c32:	|      move.l d0,-(sp)
    3c34:	|      jsr 17514 <__floatunsisf>
    3c3a:	|      addq.l #4,sp
    3c3c:	|      move.l d0,d1
    3c3e:	|      move.l 1c2da <cameraZoom>,d0
    3c44:	|      move.l d0,-(sp)
    3c46:	|      move.l d1,-(sp)
    3c48:	|      jsr 173a2 <__divsf3>
    3c4e:	|      addq.l #8,sp
    3c50:	|      move.l d0,-(sp)
    3c52:	|      jsr 1740e <__extendsfdf2>
    3c58:	|      addq.l #4,sp
    3c5a:	|      clr.l -(sp)
    3c5c:	|      move.l #1075052544,-(sp)
    3c62:	|      move.l d1,-(sp)
    3c64:	|      move.l d0,-(sp)
    3c66:	|      jsr 1777e <__subdf3>
    3c6c:	|      lea 16(sp),sp
    3c70:	|      move.l d0,d2
    3c72:	|      move.l d1,d3
    3c74:	|      move.l 36(sp),-(sp)
    3c78:	|      jsr 174ac <__floatsidf>
    3c7e:	|      addq.l #4,sp
    3c80:	|      move.l d1,-(sp)
    3c82:	|      move.l d0,-(sp)
    3c84:	|      move.l d3,-(sp)
    3c86:	|      move.l d2,-(sp)
    3c88:	|      jsr 1777e <__subdf3>
    3c8e:	|      lea 16(sp),sp
    3c92:	|      move.l d1,-(sp)
    3c94:	|      move.l d0,-(sp)
    3c96:	|      move.l d5,-(sp)
    3c98:	|      move.l d4,-(sp)
    3c9a:	|      jsr 1760a <__gtdf2>
    3ca0:	|      lea 16(sp),sp
    3ca4:	|      tst.l d0
    3ca6:	|  ,-- bgt.s 3caa <addSpeechLine+0x1d8>
}
    3ca8:	+--|-- bra.s 3ce4 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3caa:	|  '-> move.l 1c89c <winWidth>,d0
    3cb0:	|      move.l d0,-(sp)
    3cb2:	|      jsr 17514 <__floatunsisf>
    3cb8:	|      addq.l #4,sp
    3cba:	|      move.l d0,d1
    3cbc:	|      move.l 1c2da <cameraZoom>,d0
    3cc2:	|      move.l d0,-(sp)
    3cc4:	|      move.l d1,-(sp)
    3cc6:	|      jsr 173a2 <__divsf3>
    3ccc:	|      addq.l #8,sp
    3cce:	|      move.l d0,-(sp)
    3cd0:	|      jsr 17484 <__fixsfsi>
    3cd6:	|      addq.l #4,sp
    3cd8:	|      subq.l #5,d0
    3cda:	|      sub.l 36(sp),d0
    3cde:	|      movea.l 60(sp),a0
    3ce2:	|      move.l d0,(a0)
}
    3ce4:	'----> nop
    3ce6:	       movem.l (sp)+,d2-d5/a6
    3cea:	       lea 28(sp),sp
    3cee:	       rts

00003cf0 <initSpeech>:


void initSpeech () {
    3cf0:	       lea -12(sp),sp
    3cf4:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3cf6:	       moveq #20,d0
    3cf8:	       move.l d0,12(sp)
    3cfc:	       clr.l 8(sp)
    3d00:	       move.l 1c948 <SysBase>,d0
    3d06:	       movea.l d0,a6
    3d08:	       move.l 12(sp),d0
    3d0c:	       move.l 8(sp),d1
    3d10:	       jsr -684(a6)
    3d14:	       move.l d0,4(sp)
    3d18:	       move.l 4(sp),d0
    3d1c:	       move.l d0,1c898 <speech>
	if (speech) {
    3d22:	       move.l 1c898 <speech>,d0
    3d28:	,----- beq.s 3d54 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3d2a:	|      movea.l 1c898 <speech>,a0
    3d30:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3d32:	|      movea.l 1c898 <speech>,a0
    3d38:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3d3c:	|      movea.l 1c898 <speech>,a0
    3d42:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3d46:	|      movea.l 1c898 <speech>,a0
    3d4c:	|      moveq #-1,d0
    3d4e:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3d52:	|  ,-- bra.s 3d62 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3d54:	'--|-> pea 181ac <PutChar+0x650>
    3d5a:	   |   jsr 170ba <KPrintF>
    3d60:	   |   addq.l #4,sp
}
    3d62:	   '-> nop
    3d64:	       movea.l (sp)+,a6
    3d66:	       lea 12(sp),sp
    3d6a:	       rts

00003d6c <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3d6c:	       movea.l 1c898 <speech>,a0
    3d72:	       move.l 4(a0),d0
    3d76:	,----- beq.s 3d84 <isThereAnySpeechGoingOn+0x18>
    3d78:	|      movea.l 1c898 <speech>,a0
    3d7e:	|      move.l 16(a0),d0
    3d82:	|  ,-- bra.s 3d86 <isThereAnySpeechGoingOn+0x1a>
    3d84:	'--|-> moveq #-1,d0
}
    3d86:	   '-> rts

00003d88 <killAllSpeech>:

void killAllSpeech () {
    3d88:	       lea -12(sp),sp
    3d8c:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3d8e:	       movea.l 1c898 <speech>,a0
    3d94:	       move.l 12(a0),d0
    3d98:	       moveq #-1,d1
    3d9a:	       cmp.l d0,d1
    3d9c:	   ,-- beq.s 3daa <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3d9e:	   |   movea.l 1c898 <speech>,a0
    3da4:	   |   moveq #-1,d0
    3da6:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3daa:	   '-> movea.l 1c898 <speech>,a0
    3db0:	       move.l (a0),d0
    3db2:	,----- beq.w 3e3e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3db6:	|      movea.l 1c898 <speech>,a0
    3dbc:	|      move.l (a0),d1
    3dbe:	|      lea -132(sp),sp
    3dc2:	|      move.l sp,d0
    3dc4:	|      movea.w #132,a0
    3dc8:	|      move.l a0,-(sp)
    3dca:	|      move.l d1,-(sp)
    3dcc:	|      move.l d0,-(sp)
    3dce:	|      jsr 1706e <memcpy>
    3dd4:	|      lea 12(sp),sp
    3dd8:	|      jsr a8a2 <makeSilent>
    3dde:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    3de2:	|      movea.l 1c898 <speech>,a0
    3de8:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    3dea:	+----- bra.s 3e3e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    3dec:	|  ,-> movea.l 1c898 <speech>,a0
    3df2:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    3df8:	|  |   movea.l 1c898 <speech>,a0
    3dfe:	|  |   movea.l 4(a0),a1
    3e02:	|  |   movea.l 1c898 <speech>,a0
    3e08:	|  |   move.l 4(a1),d0
    3e0c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    3e10:	|  |   movea.l 12(sp),a0
    3e14:	|  |   move.l (a0),8(sp)
    3e18:	|  |   move.l 1c948 <SysBase>,d0
    3e1e:	|  |   movea.l d0,a6
    3e20:	|  |   movea.l 8(sp),a1
    3e24:	|  |   jsr -690(a6)
		FreeVec(killMe);
    3e28:	|  |   move.l 12(sp),4(sp)
    3e2e:	|  |   move.l 1c948 <SysBase>,d0
    3e34:	|  |   movea.l d0,a6
    3e36:	|  |   movea.l 4(sp),a1
    3e3a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    3e3e:	'--|-> movea.l 1c898 <speech>,a0
    3e44:	   |   move.l 4(a0),d0
    3e48:	   '-- bne.s 3dec <killAllSpeech+0x64>
	}
}
    3e4a:	       nop
    3e4c:	       nop
    3e4e:	       movea.l (sp)+,a6
    3e50:	       lea 12(sp),sp
    3e54:	       rts

00003e56 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    3e56:	pea 2 <_start+0x2>
    3e5a:	move.l 8(sp),-(sp)
    3e5e:	jsr 3fb6 <setFrames>
    3e64:	addq.l #8,sp
}
    3e66:	nop
    3e68:	rts

00003e6a <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    3e6a:	       lea -52(sp),sp
    3e6e:	       move.l a6,-(sp)
    3e70:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    3e72:	       movea.l 64(sp),a0
    3e76:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    3e7c:	       move.l 1c2b2 <speechSpeed>,d0
    3e82:	       move.l 68(sp),-(sp)
    3e86:	       move.l d0,-(sp)
    3e88:	       jsr a46 <putFloat>
    3e8e:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    3e90:	       movea.l 64(sp),a0
    3e94:	       move.l 8(a0),d0
    3e98:	       move.l 68(sp),-(sp)
    3e9c:	       move.l d0,-(sp)
    3e9e:	       jsr 8d0 <put2bytes>
    3ea4:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    3ea6:	       movea.l 64(sp),a0
    3eaa:	       move.l 16(a0),d0
    3eae:	       move.l 68(sp),-(sp)
    3eb2:	       move.l d0,-(sp)
    3eb4:	       jsr 8d0 <put2bytes>
    3eba:	       addq.l #8,sp
		if (sS -> currentTalker) {
    3ebc:	       movea.l 64(sp),a0
    3ec0:	       move.l (a0),d0
    3ec2:	   ,-- beq.s 3f06 <saveSpeech+0x9c>
			FPutC (fp, 1);
    3ec4:	   |   move.l 68(sp),40(sp)
    3eca:	   |   moveq #1,d0
    3ecc:	   |   move.l d0,36(sp)
    3ed0:	   |   move.l 1c950 <DOSBase>,d0
    3ed6:	   |   movea.l d0,a6
    3ed8:	   |   move.l 40(sp),d1
    3edc:	   |   move.l 36(sp),d2
    3ee0:	   |   jsr -312(a6)
    3ee4:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    3ee8:	   |   movea.l 64(sp),a0
    3eec:	   |   movea.l (a0),a0
    3eee:	   |   movea.l 114(a0),a0
    3ef2:	   |   move.l 4(a0),d0
    3ef6:	   |   move.l 68(sp),-(sp)
    3efa:	   |   move.l d0,-(sp)
    3efc:	   |   jsr 8d0 <put2bytes>
    3f02:	   |   addq.l #8,sp
    3f04:	,--|-- bra.s 3f82 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    3f06:	|  '-> move.l 68(sp),52(sp)
    3f0c:	|      clr.l 48(sp)
    3f10:	|      move.l 1c950 <DOSBase>,d0
    3f16:	|      movea.l d0,a6
    3f18:	|      move.l 52(sp),d1
    3f1c:	|      move.l 48(sp),d2
    3f20:	|      jsr -312(a6)
    3f24:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    3f28:	+----- bra.s 3f82 <saveSpeech+0x118>
			FPutC (fp, 1);
    3f2a:	|  ,-> move.l 68(sp),16(sp)
    3f30:	|  |   moveq #1,d0
    3f32:	|  |   move.l d0,12(sp)
    3f36:	|  |   move.l 1c950 <DOSBase>,d0
    3f3c:	|  |   movea.l d0,a6
    3f3e:	|  |   move.l 16(sp),d1
    3f42:	|  |   move.l 12(sp),d2
    3f46:	|  |   jsr -312(a6)
    3f4a:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    3f4e:	|  |   movea.l 56(sp),a0
    3f52:	|  |   move.l (a0),d0
    3f54:	|  |   move.l 68(sp),-(sp)
    3f58:	|  |   move.l d0,-(sp)
    3f5a:	|  |   jsr bd8 <writeString>
    3f60:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    3f62:	|  |   movea.l 56(sp),a0
    3f66:	|  |   move.l 8(a0),d0
    3f6a:	|  |   move.l 68(sp),-(sp)
    3f6e:	|  |   move.l d0,-(sp)
    3f70:	|  |   jsr 8d0 <put2bytes>
    3f76:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    3f78:	|  |   movea.l 56(sp),a0
    3f7c:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    3f82:	'--|-> tst.l 56(sp)
    3f86:	   '-- bne.s 3f2a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    3f88:	       move.l 68(sp),28(sp)
    3f8e:	       clr.l 24(sp)
    3f92:	       move.l 1c950 <DOSBase>,d0
    3f98:	       movea.l d0,a6
    3f9a:	       move.l 28(sp),d1
    3f9e:	       move.l 24(sp),d2
    3fa2:	       jsr -312(a6)
    3fa6:	       move.l d0,20(sp)
}
    3faa:	       nop
    3fac:	       move.l (sp)+,d2
    3fae:	       movea.l (sp)+,a6
    3fb0:	       lea 52(sp),sp
    3fb4:	       rts

00003fb6 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    3fb6:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    3fb8:	movea.l 8(sp),a0
    3fbc:	movea.l 80(a0),a0
    3fc0:	move.l (a0),d2
    3fc2:	movea.l 8(sp),a0
    3fc6:	movea.l 80(a0),a0
    3fca:	move.l 4(a0),d0
    3fce:	move.l 12(sp),-(sp)
    3fd2:	move.l d0,-(sp)
    3fd4:	jsr 17a46 <__mulsi3>
    3fda:	addq.l #8,sp
    3fdc:	move.l d0,d1
    3fde:	movea.l 8(sp),a0
    3fe2:	move.l 106(a0),d0
    3fe6:	add.l d1,d0
    3fe8:	add.l d0,d0
    3fea:	add.l d0,d0
    3fec:	movea.l d2,a0
    3fee:	adda.l d0,a0
    3ff0:	move.l (a0),d0
    3ff2:	movea.l 8(sp),a0
    3ff6:	move.l d0,72(a0)
}
    3ffa:	nop
    3ffc:	move.l (sp)+,d2
    3ffe:	rts

00004000 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4000:	       lea -20(sp),sp
    4004:	       move.l d2,-(sp)
    4006:	       move.l 40(sp),d0
    400a:	       move.w d0,d0
    400c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4010:	       movea.l 1c898 <speech>,a0
    4016:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    401c:	       move.l 32(sp),-(sp)
    4020:	       jsr a362 <findPerson>
    4026:	       addq.l #4,sp
    4028:	       move.l d0,16(sp)
    if (thisPerson) {
    402c:	   ,-- beq.s 4052 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    402e:	   |   movea.w 6(sp),a0
    4032:	   |   move.l a0,-(sp)
    4034:	   |   move.l 40(sp),-(sp)
    4038:	   |   move.l 24(sp),-(sp)
    403c:	   |   move.l 40(sp),-(sp)
    4040:	   |   jsr 4118 <wrapSpeechPerson>
    4046:	   |   lea 16(sp),sp
    404a:	   |   move.l d0,20(sp)
    404e:	,--|-- bra.w 410c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4052:	|  '-> move.l 32(sp),-(sp)
    4056:	|      jsr 1589c <getRegionForObject>
    405c:	|      addq.l #4,sp
    405e:	|      move.l d0,12(sp)
        if (thisRegion) {
    4062:	|  ,-- beq.s 40ce <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4064:	|  |   movea.l 12(sp),a0
    4068:	|  |   movea.l 28(a0),a0
    406c:	|  |   move.l 28(a0),d0
    4070:	|  |   movea.l 12(sp),a0
    4074:	|  |   movea.l 4(a0),a1
    4078:	|  |   movea.l 12(sp),a0
    407c:	|  |   movea.l 28(a0),a0
    4080:	|  |   move.l 20(a0),d1
    4084:	|  |   movea.l a1,a0
    4086:	|  |   suba.l d1,a0
    4088:	|  |   move.l 1ca02 <cameraY>,d1
    408e:	|  |   movea.l a0,a1
    4090:	|  |   suba.l d1,a1
    4092:	|  |   movea.l 12(sp),a0
    4096:	|  |   move.l (a0),d2
    4098:	|  |   movea.l 12(sp),a0
    409c:	|  |   move.l 8(a0),d1
    40a0:	|  |   add.l d2,d1
    40a2:	|  |   move.l d1,d2
    40a4:	|  |   asr.l #1,d2
    40a6:	|  |   move.l 1c9fe <cameraX>,d1
    40ac:	|  |   movea.l d2,a0
    40ae:	|  |   suba.l d1,a0
    40b0:	|  |   move.l 36(sp),-(sp)
    40b4:	|  |   move.l d0,-(sp)
    40b6:	|  |   move.l a1,-(sp)
    40b8:	|  |   move.l a0,-(sp)
    40ba:	|  |   move.l 44(sp),-(sp)
    40be:	|  |   jsr 4236 <wrapSpeechXY>
    40c4:	|  |   lea 20(sp),sp
    40c8:	|  |   move.l d0,20(sp)
    40cc:	+--|-- bra.s 410c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    40ce:	|  '-> move.l 32(sp),-(sp)
    40d2:	|      jsr d2d0 <findObjectType>
    40d8:	|      addq.l #4,sp
    40da:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    40de:	|      movea.l 8(sp),a0
    40e2:	|      move.l 28(a0),d1
    40e6:	|      move.l 1c89c <winWidth>,d0
    40ec:	|      lsr.l #1,d0
    40ee:	|      move.l 36(sp),-(sp)
    40f2:	|      move.l d1,-(sp)
    40f4:	|      pea a <_start+0xa>
    40f8:	|      move.l d0,-(sp)
    40fa:	|      move.l 44(sp),-(sp)
    40fe:	|      jsr 4236 <wrapSpeechXY>
    4104:	|      lea 20(sp),sp
    4108:	|      move.l d0,20(sp)
        }
    }
    return i;
    410c:	'----> move.l 20(sp),d0
}
    4110:	       move.l (sp)+,d2
    4112:	       lea 20(sp),sp
    4116:	       rts

00004118 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4118:	    subq.l #8,sp
    411a:	    movem.l d2-d4,-(sp)
    411e:	    move.l 36(sp),d0
    4122:	    move.w d0,d0
    4124:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4128:	    movea.l 28(sp),a0
    412c:	    movea.l 114(a0),a0
    4130:	    move.l 28(a0),d2
    4134:	    movea.l 28(sp),a0
    4138:	    move.l 4(a0),d3
    413c:	    move.l 1ca02 <cameraY>,d0
    4142:	    move.l d0,-(sp)
    4144:	    jsr 174ec <__floatsisf>
    414a:	    addq.l #4,sp
    414c:	    move.l d0,-(sp)
    414e:	    move.l d3,-(sp)
    4150:	    jsr 177e0 <__subsf3>
    4156:	    addq.l #8,sp
    4158:	    move.l d0,d3
    415a:	    movea.l 28(sp),a0
    415e:	    move.l 32(a0),d4
    4162:	    movea.l 28(sp),a0
    4166:	    move.l 20(a0),d1
    416a:	    movea.l 28(sp),a0
    416e:	    move.l 24(a0),d0
    4172:	    sub.l d0,d1
    4174:	    move.l d1,-(sp)
    4176:	    jsr 174ec <__floatsisf>
    417c:	    addq.l #4,sp
    417e:	    move.l d0,-(sp)
    4180:	    move.l d4,-(sp)
    4182:	    jsr 1759e <__mulsf3>
    4188:	    addq.l #8,sp
    418a:	    move.l d0,-(sp)
    418c:	    move.l d3,-(sp)
    418e:	    jsr 177e0 <__subsf3>
    4194:	    addq.l #8,sp
    4196:	    move.l d0,d3
    4198:	    movea.l 28(sp),a0
    419c:	    movea.l 114(a0),a0
    41a0:	    move.l 20(a0),d0
    41a4:	    move.l d0,-(sp)
    41a6:	    jsr 174ec <__floatsisf>
    41ac:	    addq.l #4,sp
    41ae:	    move.l d0,-(sp)
    41b0:	    move.l d3,-(sp)
    41b2:	    jsr 177e0 <__subsf3>
    41b8:	    addq.l #8,sp
    41ba:	    move.l d0,-(sp)
    41bc:	    jsr 17484 <__fixsfsi>
    41c2:	    addq.l #4,sp
    41c4:	    move.l d0,d4
    41c6:	    movea.l 28(sp),a0
    41ca:	    move.l (a0),d3
    41cc:	    move.l 1c9fe <cameraX>,d0
    41d2:	    move.l d0,-(sp)
    41d4:	    jsr 174ec <__floatsisf>
    41da:	    addq.l #4,sp
    41dc:	    move.l d0,-(sp)
    41de:	    move.l d3,-(sp)
    41e0:	    jsr 177e0 <__subsf3>
    41e6:	    addq.l #8,sp
    41e8:	    move.l d0,-(sp)
    41ea:	    jsr 17484 <__fixsfsi>
    41f0:	    addq.l #4,sp
    41f2:	    move.l 32(sp),-(sp)
    41f6:	    move.l d2,-(sp)
    41f8:	    move.l d4,-(sp)
    41fa:	    move.l d0,-(sp)
    41fc:	    move.l 40(sp),-(sp)
    4200:	    jsr 4236 <wrapSpeechXY>
    4206:	    lea 20(sp),sp
    420a:	    move.l d0,16(sp)
	if (animPerson) {
    420e:	    tst.w 14(sp)
    4212:	,-- beq.s 422a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4214:	|   move.l 28(sp),-(sp)
    4218:	|   jsr 3e56 <makeTalker>
    421e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4220:	|   movea.l 1c898 <speech>,a0
    4226:	|   move.l 28(sp),(a0)
	}
	return i;
    422a:	'-> move.l 16(sp),d0
}
    422e:	    movem.l (sp)+,d2-d4
    4232:	    addq.l #8,sp
    4234:	    rts

00004236 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4236:	                   lea -16(sp),sp
    423a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    423e:	                   clr.l 16(sp)
    killAllSpeech();
    4242:	                   jsr 3d88 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4248:	                   move.l 36(sp),-(sp)
    424c:	                   jsr 13ac6 <strlen>
    4252:	                   addq.l #4,sp
    4254:	                   movea.l d0,a0
    4256:	                   lea 20(a0),a0
    425a:	                   move.l a0,-(sp)
    425c:	                   jsr 17514 <__floatunsisf>
    4262:	                   addq.l #4,sp
    4264:	                   move.l d0,d1
    4266:	                   move.l 1c2b2 <speechSpeed>,d0
    426c:	                   move.l d0,-(sp)
    426e:	                   move.l d1,-(sp)
    4270:	                   jsr 1759e <__mulsf3>
    4276:	                   addq.l #8,sp
    4278:	                   move.l d0,-(sp)
    427a:	                   jsr 17484 <__fixsfsi>
    4280:	                   addq.l #4,sp
    4282:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    4286:	               ,-- bgt.s 428e <wrapSpeechXY+0x58>
    4288:	               |   moveq #1,d0
    428a:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    428e:	               '-> moveq #-1,d1
    4290:	                   cmp.l 52(sp),d1
    4294:	               ,-- beq.s 42d4 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    4296:	               |   move.l 1ca12 <speechMode>,d0
    429c:	               +-- ble.s 42d4 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    429e:	               |   clr.l -(sp)
    42a0:	               |   move.l 56(sp),-(sp)
    42a4:	               |   jsr cf90 <startSound>
    42aa:	               |   addq.l #8,sp
    42ac:	               |   tst.w d0
    42ae:	               +-- beq.s 42d4 <wrapSpeechXY+0x9e>
                speechTime = -10;
    42b0:	               |   moveq #-10,d0
    42b2:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    42b6:	               |   movea.l 1c898 <speech>,a0
    42bc:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    42c2:	               |   move.l 1ca12 <speechMode>,d0
    42c8:	               |   moveq #2,d1
    42ca:	               |   cmp.l d0,d1
    42cc:	               +-- bne.s 42d4 <wrapSpeechXY+0x9e>
    42ce:	               |   moveq #-10,d0
    42d0:	,--------------|-- bra.w 455a <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    42d4:	|              '-> movea.l 1c898 <speech>,a0
    42da:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    42e0:	|     ,----------- bra.w 4394 <wrapSpeechXY+0x15e>
        a = wrap;
    42e4:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    42ea:	|  |  |        ,-- bra.s 42fa <wrapSpeechXY+0xc4>
            a--;
    42ec:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    42f0:	|  |  |  |     +-- bne.s 42fa <wrapSpeechXY+0xc4>
                a = wrap;
    42f2:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    42f8:	|  |  |  |  ,--|-- bra.s 430c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    42fa:	|  |  |  |  |  '-> move.l 28(sp),d0
    42fe:	|  |  |  |  |      movea.l 36(sp),a0
    4302:	|  |  |  |  |      adda.l d0,a0
    4304:	|  |  |  |  |      move.b (a0),d0
    4306:	|  |  |  |  |      cmpi.b #32,d0
    430a:	|  |  |  '--|----- bne.s 42ec <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    430c:	|  |  |     '----> move.l 28(sp),d0
    4310:	|  |  |            movea.l 36(sp),a0
    4314:	|  |  |            adda.l d0,a0
    4316:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4318:	|  |  |            lea 16(sp),a0
    431c:	|  |  |            move.l a0,-(sp)
    431e:	|  |  |            move.l 44(sp),-(sp)
    4322:	|  |  |            move.l 44(sp),-(sp)
    4326:	|  |  |            jsr 3ad2 <addSpeechLine>
    432c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4330:	|  |  |            move.l 28(sp),d0
    4334:	|  |  |            movea.l 36(sp),a0
    4338:	|  |  |            adda.l d0,a0
    433a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    433e:	|  |  |            move.l 28(sp),d0
    4342:	|  |  |            addq.l #1,d0
    4344:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4348:	|  |  |            move.l 44(sp),-(sp)
    434c:	|  |  |            jsr 174ec <__floatsisf>
    4352:	|  |  |            addq.l #4,sp
    4354:	|  |  |            move.l d0,d2
    4356:	|  |  |            move.l 1ca3c <fontHeight>,d0
    435c:	|  |  |            move.l d0,-(sp)
    435e:	|  |  |            jsr 174ec <__floatsisf>
    4364:	|  |  |            addq.l #4,sp
    4366:	|  |  |            move.l d0,d1
    4368:	|  |  |            move.l 1c2da <cameraZoom>,d0
    436e:	|  |  |            move.l d0,-(sp)
    4370:	|  |  |            move.l d1,-(sp)
    4372:	|  |  |            jsr 173a2 <__divsf3>
    4378:	|  |  |            addq.l #8,sp
    437a:	|  |  |            move.l d0,-(sp)
    437c:	|  |  |            move.l d2,-(sp)
    437e:	|  |  |            jsr 177e0 <__subsf3>
    4384:	|  |  |            addq.l #8,sp
    4386:	|  |  |            move.l d0,-(sp)
    4388:	|  |  |            jsr 17484 <__fixsfsi>
    438e:	|  |  |            addq.l #4,sp
    4390:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4394:	|  |  '----------> move.l 36(sp),-(sp)
    4398:	|  |               jsr 13ac6 <strlen>
    439e:	|  |               addq.l #4,sp
    43a0:	|  |               move.l d0,d1
    43a2:	|  |               move.l 48(sp),d0
    43a6:	|  |               cmp.l d1,d0
    43a8:	|  '-------------- bcs.w 42e4 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    43ac:	|                  lea 16(sp),a0
    43b0:	|                  move.l a0,-(sp)
    43b2:	|                  move.l 44(sp),-(sp)
    43b6:	|                  move.l 44(sp),-(sp)
    43ba:	|                  jsr 3ad2 <addSpeechLine>
    43c0:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    43c4:	|                  move.l 44(sp),-(sp)
    43c8:	|                  jsr 174ec <__floatsisf>
    43ce:	|                  addq.l #4,sp
    43d0:	|                  move.l d0,d2
    43d2:	|                  move.l 1ca3c <fontHeight>,d0
    43d8:	|                  move.l d0,-(sp)
    43da:	|                  jsr 174ec <__floatsisf>
    43e0:	|                  addq.l #4,sp
    43e2:	|                  move.l d0,d1
    43e4:	|                  move.l 1c2da <cameraZoom>,d0
    43ea:	|                  move.l d0,-(sp)
    43ec:	|                  move.l d1,-(sp)
    43ee:	|                  jsr 173a2 <__divsf3>
    43f4:	|                  addq.l #8,sp
    43f6:	|                  move.l d0,-(sp)
    43f8:	|                  move.l d2,-(sp)
    43fa:	|                  jsr 177e0 <__subsf3>
    4400:	|                  addq.l #8,sp
    4402:	|                  move.l d0,-(sp)
    4404:	|                  jsr 17484 <__fixsfsi>
    440a:	|                  addq.l #4,sp
    440c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4410:	|              ,-- bpl.s 442e <wrapSpeechXY+0x1f8>
    4412:	|              |   movea.l 1c898 <speech>,a0
    4418:	|              |   move.l 8(a0),d0
    441c:	|              |   movea.l 1c898 <speech>,a0
    4422:	|              |   sub.l 44(sp),d0
    4426:	|              |   move.l d0,8(a0)
    442a:	|           ,--|-- bra.w 451c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    442e:	|           |  '-> movea.l 1c898 <speech>,a0
    4434:	|           |      move.l 8(a0),d0
    4438:	|           |      move.l d0,-(sp)
    443a:	|           |      jsr 174ec <__floatsisf>
    4440:	|           |      addq.l #4,sp
    4442:	|           |      move.l d0,d2
    4444:	|           |      move.l 1ca02 <cameraY>,d0
    444a:	|           |      move.l d0,-(sp)
    444c:	|           |      jsr 174ec <__floatsisf>
    4452:	|           |      addq.l #4,sp
    4454:	|           |      move.l d0,d3
    4456:	|           |      move.l 1c8a0 <winHeight>,d4
    445c:	|           |      move.l 1ca3c <fontHeight>,d0
    4462:	|           |      pea 3 <_start+0x3>
    4466:	|           |      move.l d0,-(sp)
    4468:	|           |      jsr 17ac4 <__divsi3>
    446e:	|           |      addq.l #8,sp
    4470:	|           |      move.l d4,d1
    4472:	|           |      sub.l d0,d1
    4474:	|           |      move.l d1,-(sp)
    4476:	|           |      jsr 17514 <__floatunsisf>
    447c:	|           |      addq.l #4,sp
    447e:	|           |      move.l d0,d1
    4480:	|           |      move.l 1c2da <cameraZoom>,d0
    4486:	|           |      move.l d0,-(sp)
    4488:	|           |      move.l d1,-(sp)
    448a:	|           |      jsr 173a2 <__divsf3>
    4490:	|           |      addq.l #8,sp
    4492:	|           |      move.l d0,-(sp)
    4494:	|           |      move.l d3,-(sp)
    4496:	|           |      jsr 172a8 <__addsf3>
    449c:	|           |      addq.l #8,sp
    449e:	|           |      move.l d0,-(sp)
    44a0:	|           |      move.l d2,-(sp)
    44a2:	|           |      jsr 17658 <__gtsf2>
    44a8:	|           |      addq.l #8,sp
    44aa:	|           |      tst.l d0
    44ac:	|           +----- ble.s 451c <wrapSpeechXY+0x2e6>
    44ae:	|           |      move.l 1ca02 <cameraY>,d0
    44b4:	|           |      move.l d0,-(sp)
    44b6:	|           |      jsr 174ec <__floatsisf>
    44bc:	|           |      addq.l #4,sp
    44be:	|           |      move.l d0,d2
    44c0:	|           |      move.l 1c8a0 <winHeight>,d3
    44c6:	|           |      move.l 1ca3c <fontHeight>,d0
    44cc:	|           |      pea 3 <_start+0x3>
    44d0:	|           |      move.l d0,-(sp)
    44d2:	|           |      jsr 17ac4 <__divsi3>
    44d8:	|           |      addq.l #8,sp
    44da:	|           |      move.l d3,d1
    44dc:	|           |      sub.l d0,d1
    44de:	|           |      move.l d1,-(sp)
    44e0:	|           |      jsr 17514 <__floatunsisf>
    44e6:	|           |      addq.l #4,sp
    44e8:	|           |      move.l d0,d1
    44ea:	|           |      move.l 1c2da <cameraZoom>,d0
    44f0:	|           |      move.l d0,-(sp)
    44f2:	|           |      move.l d1,-(sp)
    44f4:	|           |      jsr 173a2 <__divsf3>
    44fa:	|           |      addq.l #8,sp
    44fc:	|           |      move.l d0,-(sp)
    44fe:	|           |      move.l d2,-(sp)
    4500:	|           |      jsr 172a8 <__addsf3>
    4506:	|           |      addq.l #8,sp
    4508:	|           |      movea.l 1c898 <speech>,a2
    450e:	|           |      move.l d0,-(sp)
    4510:	|           |      jsr 17484 <__fixsfsi>
    4516:	|           |      addq.l #4,sp
    4518:	|           |      move.l d0,8(a2)

    if (offset) {
    451c:	|           '----> move.l 16(sp),d0
    4520:	|        ,-------- beq.s 4556 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4522:	|        |         movea.l 1c898 <speech>,a0
    4528:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    452e:	|        |     ,-- bra.s 4550 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4530:	|        |  ,--|-> movea.l 20(sp),a0
    4534:	|        |  |  |   move.l 8(a0),d1
    4538:	|        |  |  |   move.l 16(sp),d0
    453c:	|        |  |  |   add.l d1,d0
    453e:	|        |  |  |   movea.l 20(sp),a0
    4542:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4546:	|        |  |  |   movea.l 20(sp),a0
    454a:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4550:	|        |  |  '-> tst.l 20(sp)
    4554:	|        |  '----- bne.s 4530 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4556:	|        '-------> move.l 24(sp),d0
}
    455a:	'----------------> movem.l (sp)+,d2-d4/a2
    455e:	                   lea 16(sp),sp
    4562:	                   rts

00004564 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4564:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4568:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    456c:	       tst.l 24(sp)
    4570:	   ,-- bge.s 4576 <drawLine+0x12>
    4572:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4576:	   '-> tst.l 28(sp)
    457a:	   ,-- bge.s 4580 <drawLine+0x1c>
    457c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4580:	   '-> tst.l 32(sp)
    4584:	   ,-- bge.s 458a <drawLine+0x26>
    4586:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    458a:	   '-> tst.l 36(sp)
    458e:	   ,-- bge.s 4594 <drawLine+0x30>
    4590:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4594:	   '-> move.l 1c9e0 <sceneWidth>,d0
    459a:	       cmp.l 24(sp),d0
    459e:	   ,-- bge.s 45ae <drawLine+0x4a>
    45a0:	   |   move.l 1c9e0 <sceneWidth>,d0
    45a6:	   |   move.l d0,d1
    45a8:	   |   subq.l #1,d1
    45aa:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    45ae:	   '-> move.l 1c9e0 <sceneWidth>,d0
    45b4:	       cmp.l 32(sp),d0
    45b8:	   ,-- bge.s 45c8 <drawLine+0x64>
    45ba:	   |   move.l 1c9e0 <sceneWidth>,d0
    45c0:	   |   move.l d0,d1
    45c2:	   |   subq.l #1,d1
    45c4:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    45c8:	   '-> move.l 1c9e4 <sceneHeight>,d0
    45ce:	       cmp.l 28(sp),d0
    45d2:	   ,-- bge.s 45e2 <drawLine+0x7e>
    45d4:	   |   move.l 1c9e4 <sceneHeight>,d0
    45da:	   |   move.l d0,d1
    45dc:	   |   subq.l #1,d1
    45de:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    45e2:	   '-> move.l 1c9e4 <sceneHeight>,d0
    45e8:	       cmp.l 36(sp),d0
    45ec:	   ,-- bge.s 45fc <drawLine+0x98>
    45ee:	   |   move.l 1c9e4 <sceneHeight>,d0
    45f4:	   |   move.l d0,d1
    45f6:	   |   subq.l #1,d1
    45f8:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    45fc:	   '-> move.l 24(sp),d0
    4600:	       cmp.l 32(sp),d0
    4604:	,----- ble.s 4620 <drawLine+0xbc>
		x = x2; 
    4606:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    460c:	|      tst.w 10(sp)
    4610:	|      seq d0
    4612:	|      neg.b d0
    4614:	|      move.b d0,d0
    4616:	|      andi.w #255,d0
    461a:	|      move.w d0,10(sp)
    461e:	|  ,-- bra.s 4626 <drawLine+0xc2>
	} else x = x1;
    4620:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4626:	   '-> move.l 28(sp),d1
    462a:	       cmp.l 36(sp),d1
    462e:	,----- ble.s 464a <drawLine+0xe6>
		y = y2; 
    4630:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4636:	|      tst.w 10(sp)
    463a:	|      seq d0
    463c:	|      neg.b d0
    463e:	|      move.b d0,d0
    4640:	|      andi.w #255,d0
    4644:	|      move.w d0,10(sp)
    4648:	|  ,-- bra.s 4650 <drawLine+0xec>
	} else y = y1;	
    464a:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4650:	   '-> move.l 32(sp),d0
    4654:	       sub.l 24(sp),d0
    4658:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    465c:	       move.l 6(sp),d0
    4660:	   ,-- bpl.s 4664 <drawLine+0x100>
    4662:	   |   neg.l d0
    4664:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4668:	       move.l 36(sp),d1
    466c:	       sub.l 28(sp),d1
    4670:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4674:	       move.l 2(sp),d0
    4678:	   ,-- bpl.s 467c <drawLine+0x118>
    467a:	   |   neg.l d0
    467c:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4680:	       tst.l 6(sp)
    4684:	   ,-- bne.s 46a8 <drawLine+0x144>
		diffX = 1;
    4686:	   |   moveq #1,d0
    4688:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    468c:	   |   move.l 1c9e0 <sceneWidth>,d0
    4692:	   |   subq.l #1,d0
    4694:	   |   cmp.l 16(sp),d0
    4698:	   +-- bne.s 46a8 <drawLine+0x144>
    469a:	   |   move.l 1c9e0 <sceneWidth>,d0
    46a0:	   |   move.l d0,d1
    46a2:	   |   subq.l #2,d1
    46a4:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    46a8:	   '-> tst.l 2(sp)
    46ac:	   ,-- bne.s 46d0 <drawLine+0x16c>
		diffY = 1;
    46ae:	   |   moveq #1,d0
    46b0:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    46b4:	   |   move.l 1c9e4 <sceneHeight>,d0
    46ba:	   |   subq.l #1,d0
    46bc:	   |   cmp.l 12(sp),d0
    46c0:	   +-- bne.s 46d0 <drawLine+0x16c>
    46c2:	   |   move.l 1c9e4 <sceneHeight>,d0
    46c8:	   |   move.l d0,d1
    46ca:	   |   subq.l #2,d1
    46cc:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    46d0:	   '-> pea 181e9 <PutChar+0x68d>
    46d6:	       jsr 170ba <KPrintF>
    46dc:	       addq.l #4,sp
	
}
    46de:	       nop
    46e0:	       lea 20(sp),sp
    46e4:	       rts

000046e6 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    46e6:	                      lea -24(sp),sp
    46ea:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    46ec:	                      move.l 1c8a4 <firstTexture>,d0
    46f2:	,-------------------- beq.w 47d0 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    46f6:	|                     clr.l 24(sp)
    46fa:	|     ,-------------- bra.w 47c4 <deleteTextures+0xde>
			BOOL found = FALSE;
    46fe:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4702:	|  |  |               move.l 1c8a4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    470a:	|  |  |               movea.l 20(sp),a0
    470e:	|  |  |               move.l (a0),d1
    4710:	|  |  |               move.l 24(sp),d0
    4714:	|  |  |               add.l d0,d0
    4716:	|  |  |               add.l d0,d0
    4718:	|  |  |               movea.l 36(sp),a0
    471c:	|  |  |               adda.l d0,a0
    471e:	|  |  |               move.l (a0),d0
    4720:	|  |  |               cmp.l d1,d0
    4722:	|  |  |  ,----------- bne.w 47b6 <deleteTextures+0xd0>
				found = TRUE;
    4726:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    472c:	|  |  |  |            movea.l 20(sp),a0
    4730:	|  |  |  |            move.l 12(a0),d0
    4734:	|  |  |  |            move.l d0,1c8a4 <firstTexture>
				FreeVec(list);
    473a:	|  |  |  |            move.l 20(sp),6(sp)
    4740:	|  |  |  |            move.l 1c948 <SysBase>,d0
    4746:	|  |  |  |            movea.l d0,a6
    4748:	|  |  |  |            movea.l 6(sp),a1
    474c:	|  |  |  |            jsr -690(a6)
				continue;
    4750:	|  |  |  |  ,-------- bra.s 47c0 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4752:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4756:	|  |  |  |  |  |      movea.l 12(a0),a0
    475a:	|  |  |  |  |  |      move.l (a0),d1
    475c:	|  |  |  |  |  |      move.l 24(sp),d0
    4760:	|  |  |  |  |  |      add.l d0,d0
    4762:	|  |  |  |  |  |      add.l d0,d0
    4764:	|  |  |  |  |  |      movea.l 36(sp),a0
    4768:	|  |  |  |  |  |      adda.l d0,a0
    476a:	|  |  |  |  |  |      move.l (a0),d0
    476c:	|  |  |  |  |  |      cmp.l d1,d0
    476e:	|  |  |  |  |  |  ,-- bne.s 47ac <deleteTextures+0xc6>
					found = TRUE;
    4770:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4776:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    477a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4780:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4784:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4788:	|  |  |  |  |  |  |   move.l 12(a0),d0
    478c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4790:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4794:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    479a:	|  |  |  |  |  |  |   move.l 1c948 <SysBase>,d0
    47a0:	|  |  |  |  |  |  |   movea.l d0,a6
    47a2:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    47a6:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    47aa:	|  |  |  |  +--|--|-- bra.s 47c0 <deleteTextures+0xda>
				}
				list = list->next;
    47ac:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    47b0:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    47b6:	|  |  |  '--|--|----> movea.l 20(sp),a0
    47ba:	|  |  |     |  |      move.l 12(a0),d0
    47be:	|  |  |     |  '----- bne.s 4752 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    47c0:	|  |  |     '-------> addq.l #1,24(sp)
    47c4:	|  |  '-------------> move.l 24(sp),d0
    47c8:	|  |                  cmp.l 32(sp),d0
    47cc:	|  '----------------- bcs.w 46fe <deleteTextures+0x18>
			}
		}
	}
}
    47d0:	'-------------------> nop
    47d2:	                      movea.l (sp)+,a6
    47d4:	                      lea 24(sp),sp
    47d8:	                      rts

000047da <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    47da:	subq.l #4,sp
    47dc:	move.l 8(sp),d0
    47e0:	move.w d0,d0
    47e2:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    47e6:	pea 1820c <PutChar+0x6b0>
    47ec:	jsr 170ba <KPrintF>
    47f2:	addq.l #4,sp
}
    47f4:	nop
    47f6:	addq.l #4,sp
    47f8:	rts

000047fa <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    47fa:	       moveq #-1,d0
    47fc:	       cmp.l 4(sp),d0
    4800:	   ,-- bne.s 4806 <resourceNameFromNum+0xc>
    4802:	   |   moveq #0,d0
    4804:	,--|-- bra.s 483e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4806:	|  '-> move.l 1c924 <numResourceNames>,d0
    480c:	|  ,-- bne.s 4816 <resourceNameFromNum+0x1c>
    480e:	|  |   move.l #98876,d0
    4814:	+--|-- bra.s 483e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4816:	|  '-> move.l 1c924 <numResourceNames>,d0
    481c:	|      cmp.l 4(sp),d0
    4820:	|  ,-- ble.s 4838 <resourceNameFromNum+0x3e>
    4822:	|  |   move.l 1c8dc <allResourceNames>,d1
    4828:	|  |   move.l 4(sp),d0
    482c:	|  |   add.l d0,d0
    482e:	|  |   add.l d0,d0
    4830:	|  |   movea.l d1,a0
    4832:	|  |   adda.l d0,a0
    4834:	|  |   move.l (a0),d0
    4836:	+--|-- bra.s 483e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4838:	|  '-> move.l #98885,d0
    483e:	'----> rts

00004840 <main_sludge>:
char *bundleFolder;
int weAreDoneSoQuit;
int dirtyFrame = 0; 

int main_sludge(int argc, char *argv[])
{
    4840:	          lea -44(sp),sp
    4844:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4848:	          move.l #320,1c89c <winWidth>
    winHeight = 256;
    4852:	          move.l #256,1c8a0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    485c:	          tst.l 60(sp)
    4860:	      ,-- bne.s 4878 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4862:	      |   pea 18256 <PutChar+0x6fa>
    4868:	      |   jsr b8 <copyString>
    486e:	      |   addq.l #4,sp
    4870:	      |   move.l d0,1c8b4 <bundleFolder>
    4876:	   ,--|-- bra.s 488e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4878:	   |  '-> movea.l 64(sp),a0
    487c:	   |      move.l (a0),d0
    487e:	   |      move.l d0,-(sp)
    4880:	   |      jsr b8 <copyString>
    4886:	   |      addq.l #4,sp
    4888:	   |      move.l d0,1c8b4 <bundleFolder>
	}
    
	int lastSlash = -1;
    488e:	   '----> moveq #-1,d0
    4890:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4894:	          clr.l 44(sp)
    4898:	   ,----- bra.s 48ba <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    489a:	,--|----> move.l 1c8b4 <bundleFolder>,d1
    48a0:	|  |      move.l 44(sp),d0
    48a4:	|  |      movea.l d1,a0
    48a6:	|  |      adda.l d0,a0
    48a8:	|  |      move.b (a0),d0
    48aa:	|  |      cmpi.b #47,d0
    48ae:	|  |  ,-- bne.s 48b6 <main_sludge+0x76>
    48b0:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    48b6:	|  |  '-> addq.l #1,44(sp)
    48ba:	|  '----> move.l 1c8b4 <bundleFolder>,d1
    48c0:	|         move.l 44(sp),d0
    48c4:	|         movea.l d1,a0
    48c6:	|         adda.l d0,a0
    48c8:	|         move.b (a0),d0
    48ca:	'-------- bne.s 489a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    48cc:	          move.l 1c8b4 <bundleFolder>,d0
    48d2:	          move.l 48(sp),d1
    48d6:	          addq.l #1,d1
    48d8:	          movea.l d0,a0
    48da:	          adda.l d1,a0
    48dc:	          clr.b (a0)

	if (argc > 1) {
    48de:	          moveq #1,d0
    48e0:	          cmp.l 60(sp),d0
    48e4:	      ,-- bge.s 4900 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    48e6:	      |   move.l 60(sp),d0
    48ea:	      |   addi.l #1073741823,d0
    48f0:	      |   add.l d0,d0
    48f2:	      |   add.l d0,d0
    48f4:	      |   movea.l 64(sp),a0
    48f8:	      |   adda.l d0,a0
    48fa:	      |   move.l (a0),52(sp)
    48fe:	   ,--|-- bra.s 495a <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4900:	   |  '-> move.l 1c8b4 <bundleFolder>,d0
    4906:	   |      pea 1825c <PutChar+0x700>
    490c:	   |      move.l d0,-(sp)
    490e:	   |      jsr 13b06 <joinStrings>
    4914:	   |      addq.l #8,sp
    4916:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    491a:	   |      move.l 52(sp),-(sp)
    491e:	   |      jsr 13a00 <fileExists>
    4924:	   |      addq.l #4,sp
    4926:	   |      tst.b d0
    4928:	   +----- bne.s 495a <main_sludge+0x11a>
			FreeVec(sludgeFile);
    492a:	   |      move.l 52(sp),40(sp)
    4930:	   |      move.l 1c948 <SysBase>,d0
    4936:	   |      movea.l d0,a6
    4938:	   |      movea.l 40(sp),a1
    493c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4940:	   |      move.l 1c8b4 <bundleFolder>,d0
    4946:	   |      pea 18269 <PutChar+0x70d>
    494c:	   |      move.l d0,-(sp)
    494e:	   |      jsr 13b06 <joinStrings>
    4954:	   |      addq.l #8,sp
    4956:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    495a:	   '----> pea 18272 <PutChar+0x716>
    4960:	          jsr 170ba <KPrintF>
    4966:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4968:	          move.l 52(sp),-(sp)
    496c:	          jsr 13a00 <fileExists>
    4972:	          addq.l #4,sp
    4974:	          tst.b d0
    4976:	      ,-- bne.s 49ce <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4978:	      |   move.l 1c950 <DOSBase>,d0
    497e:	      |   movea.l d0,a6
    4980:	      |   jsr -60(a6)
    4984:	      |   move.l d0,28(sp)
    4988:	      |   move.l 28(sp),d0
    498c:	      |   move.l d0,24(sp)
    4990:	      |   move.l #98930,20(sp)
    4998:	      |   moveq #21,d0
    499a:	      |   move.l d0,16(sp)
    499e:	      |   move.l 1c950 <DOSBase>,d0
    49a4:	      |   movea.l d0,a6
    49a6:	      |   move.l 24(sp),d1
    49aa:	      |   move.l 20(sp),d2
    49ae:	      |   move.l 16(sp),d3
    49b2:	      |   jsr -48(a6)
    49b6:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    49ba:	      |   pea 18272 <PutChar+0x716>
    49c0:	      |   jsr 170ba <KPrintF>
    49c6:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    49c8:	      |   moveq #0,d0
    49ca:	,-----|-- bra.w 4bcc <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    49ce:	|     '-> pea 18288 <PutChar+0x72c>
    49d4:	|         jsr 170ba <KPrintF>
    49da:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    49dc:	|         move.l 52(sp),-(sp)
    49e0:	|         jsr 4bd6 <setGameFilePath>
    49e6:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    49e8:	|         move.l 52(sp),-(sp)
    49ec:	|         jsr 61c4 <initSludge>
    49f2:	|         addq.l #4,sp
    49f4:	|         tst.w d0
    49f6:	|     ,-- bne.s 49fe <main_sludge+0x1be>
    49f8:	|     |   moveq #0,d0
    49fa:	+-----|-- bra.w 4bcc <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    49fe:	|     '-> move.l 1c89c <winWidth>,d0
    4a04:	|         cmpi.l #320,d0
    4a0a:	|     ,-- bne.s 4a1a <main_sludge+0x1da>
    4a0c:	|     |   move.l 1c8a0 <winHeight>,d0
    4a12:	|     |   cmpi.l #256,d0
    4a18:	|  ,--|-- beq.s 4a3c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4a1a:	|  |  '-> pea 18299 <PutChar+0x73d>
    4a20:	|  |      jsr 170ba <KPrintF>
    4a26:	|  |      addq.l #4,sp
		winWidth = 320;
    4a28:	|  |      move.l #320,1c89c <winWidth>
		winHeight = 256;
    4a32:	|  |      move.l #256,1c8a0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4a3c:	|  '----> pea 18316 <PutChar+0x7ba>
    4a42:	|         jsr 170ba <KPrintF>
    4a48:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4a4a:	|         move.l 1c8a0 <winHeight>,d0
    4a50:	|         move.l d0,d1
    4a52:	|         move.l 1c89c <winWidth>,d0
    4a58:	|         move.l d1,-(sp)
    4a5a:	|         move.l d0,-(sp)
    4a5c:	|         jsr d1ae <resizeBackdrop>
    4a62:	|         addq.l #8,sp
    4a64:	|         tst.w d0
    4a66:	|     ,-- bne.s 4a7c <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4a68:	|     |   pea 18329 <PutChar+0x7cd>
    4a6e:	|     |   jsr 170ba <KPrintF>
    4a74:	|     |   addq.l #4,sp
		return FALSE;
    4a76:	|     |   moveq #0,d0
    4a78:	+-----|-- bra.w 4bcc <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4a7c:	|     '-> pea 1834f <PutChar+0x7f3>
    4a82:	|         jsr 170ba <KPrintF>
    4a88:	|         addq.l #4,sp
	if (! initPeople ())
    4a8a:	|         jsr a6c8 <initPeople>
    4a90:	|         tst.w d0
    4a92:	|     ,-- bne.s 4aa8 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4a94:	|     |   pea 1835c <PutChar+0x800>
    4a9a:	|     |   jsr 170ba <KPrintF>
    4aa0:	|     |   addq.l #4,sp
		return FALSE;
    4aa2:	|     |   moveq #0,d0
    4aa4:	+-----|-- bra.w 4bcc <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4aa8:	|     '-> pea 1837d <PutChar+0x821>
    4aae:	|         jsr 170ba <KPrintF>
    4ab4:	|         addq.l #4,sp
	if (! initFloor ())
    4ab6:	|         jsr 16470 <initFloor>
    4abc:	|         tst.w d0
    4abe:	|     ,-- bne.s 4ad4 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4ac0:	|     |   pea 18389 <PutChar+0x82d>
    4ac6:	|     |   jsr 170ba <KPrintF>
    4acc:	|     |   addq.l #4,sp
		
		return FALSE;
    4ace:	|     |   moveq #0,d0
    4ad0:	+-----|-- bra.w 4bcc <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4ad4:	|     '-> pea 183a9 <PutChar+0x84d>
    4ada:	|         jsr 170ba <KPrintF>
    4ae0:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4ae2:	|         jsr d36a <initObjectTypes>
    4ae8:	|         tst.w d0
    4aea:	|     ,-- bne.s 4b00 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4aec:	|     |   pea 183ba <PutChar+0x85e>
    4af2:	|     |   jsr 170ba <KPrintF>
    4af8:	|     |   addq.l #4,sp
		return FALSE;
    4afa:	|     |   moveq #0,d0
    4afc:	+-----|-- bra.w 4bcc <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4b00:	|     '-> pea 183e0 <PutChar+0x884>
    4b06:	|         jsr 170ba <KPrintF>
    4b0c:	|         addq.l #4,sp
	initSpeech ();
    4b0e:	|         jsr 3cf0 <initSpeech>
	KPrintF("Init status bar\n");
    4b14:	|         pea 183ed <PutChar+0x891>
    4b1a:	|         jsr 170ba <KPrintF>
    4b20:	|         addq.l #4,sp
	initStatusBar ();
    4b22:	|         jsr 80c8 <initStatusBar>

	KPrintF("Get numbered string\n");
    4b28:	|         pea 183fe <PutChar+0x8a2>
    4b2e:	|         jsr 170ba <KPrintF>
    4b34:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4b36:	|         pea 1 <_start+0x1>
    4b3a:	|         jsr 73d2 <getNumberedString>
    4b40:	|         addq.l #4,sp
    4b42:	|         move.l d0,1c8ac <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4b48:	|         pea 18413 <PutChar+0x8b7>
    4b4e:	|         jsr 170ba <KPrintF>
    4b54:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4b56:	|         move.l 1c918 <noStack>,d0
    4b5c:	|         pea 1 <_start+0x1>
    4b60:	|         move.l d0,-(sp)
    4b62:	|         clr.l -(sp)
    4b64:	|         clr.l -(sp)
    4b66:	|         clr.l -(sp)
    4b68:	|         jsr 7210 <startNewFunctionNum>
    4b6e:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4b72:	|         pea 1842b <PutChar+0x8cf>
    4b78:	|         jsr 170ba <KPrintF>
    4b7e:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4b80:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4b88:	|         clr.l 1c8b8 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4b8e:	|     ,-- bra.s 4bae <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4b90:	|  ,--|-> jsr 71a0 <sludgeDisplay>
		CsiCheckInput();
    4b96:	|  |  |   jsr cccc <CsiCheckInput>
		walkAllPeople();
    4b9c:	|  |  |   jsr bc86 <walkAllPeople>
		handleInput();
    4ba2:	|  |  |   jsr 5f5e <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4ba8:	|  |  |   jsr 16fee <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4bae:	|  |  '-> move.l 1c8b8 <weAreDoneSoQuit>,d0
    4bb4:	|  '----- beq.s 4b90 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4bb6:	|         move.l 52(sp),32(sp)
    4bbc:	|         move.l 1c948 <SysBase>,d0
    4bc2:	|         movea.l d0,a6
    4bc4:	|         movea.l 32(sp),a1
    4bc8:	|         jsr -690(a6)
}
    4bcc:	'-------> movem.l (sp)+,d2-d3/a6
    4bd0:	          lea 44(sp),sp
    4bd4:	          rts

00004bd6 <setGameFilePath>:

void setGameFilePath (char * f) {
    4bd6:	          lea -1104(sp),sp
    4bda:	          move.l a6,-(sp)
    4bdc:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4bde:	          move.l #1112,d0
    4be4:	          add.l sp,d0
    4be6:	          addi.l #-1102,d0
    4bec:	          move.l d0,1100(sp)
    4bf0:	          move.l #998,1096(sp)
    4bf8:	          move.l 1c950 <DOSBase>,d0
    4bfe:	          movea.l d0,a6
    4c00:	          move.l 1100(sp),d1
    4c04:	          move.l 1096(sp),d2
    4c08:	          jsr -564(a6)
    4c0c:	          move.w d0,1094(sp)
    4c10:	          move.w 1094(sp),d0
    4c14:	      ,-- bne.s 4c24 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4c16:	      |   pea 1843e <PutChar+0x8e2>
    4c1c:	      |   jsr 170ba <KPrintF>
    4c22:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4c24:	      '-> moveq #-1,d0
    4c26:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4c2a:	          clr.l 1104(sp)
    4c2e:	   ,----- bra.s 4c4c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4c30:	,--|----> move.l 1104(sp),d0
    4c34:	|  |      movea.l 1116(sp),a0
    4c38:	|  |      adda.l d0,a0
    4c3a:	|  |      move.b (a0),d0
    4c3c:	|  |      cmpi.b #47,d0
    4c40:	|  |  ,-- bne.s 4c48 <setGameFilePath+0x72>
    4c42:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4c48:	|  |  '-> addq.l #1,1104(sp)
    4c4c:	|  '----> move.l 1104(sp),d0
    4c50:	|         movea.l 1116(sp),a0
    4c54:	|         adda.l d0,a0
    4c56:	|         move.b (a0),d0
    4c58:	'-------- bne.s 4c30 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4c5a:	          moveq #-1,d0
    4c5c:	          cmp.l 1108(sp),d0
    4c60:	   ,----- beq.s 4cda <setGameFilePath+0x104>
		f[got] = 0;	
    4c62:	   |      move.l 1108(sp),d0
    4c66:	   |      movea.l 1116(sp),a0
    4c6a:	   |      adda.l d0,a0
    4c6c:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4c6e:	   |      move.l 1116(sp),1090(sp)
    4c74:	   |      moveq #-2,d0
    4c76:	   |      move.l d0,1086(sp)
    4c7a:	   |      move.l 1c950 <DOSBase>,d0
    4c80:	   |      movea.l d0,a6
    4c82:	   |      move.l 1090(sp),d1
    4c86:	   |      move.l 1086(sp),d2
    4c8a:	   |      jsr -84(a6)
    4c8e:	   |      move.l d0,1082(sp)
    4c92:	   |      move.l 1082(sp),d0
    4c96:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4c9a:	   |      move.l 1078(sp),1074(sp)
    4ca0:	   |      move.l 1c950 <DOSBase>,d0
    4ca6:	   |      movea.l d0,a6
    4ca8:	   |      move.l 1074(sp),d1
    4cac:	   |      jsr -126(a6)
    4cb0:	   |      move.l d0,1070(sp)
    4cb4:	   |      move.l 1070(sp),d0
    4cb8:	   |  ,-- bne.s 4ccc <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4cba:	   |  |   move.l 1116(sp),-(sp)
    4cbe:	   |  |   pea 18464 <PutChar+0x908>
    4cc4:	   |  |   jsr 170ba <KPrintF>
    4cca:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4ccc:	   |  '-> move.l 1108(sp),d0
    4cd0:	   |      movea.l 1116(sp),a0
    4cd4:	   |      adda.l d0,a0
    4cd6:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4cda:	   '----> move.l #400,1066(sp)
    4ce2:	          clr.l 1062(sp)
    4ce6:	          move.l 1c948 <SysBase>,d0
    4cec:	          movea.l d0,a6
    4cee:	          move.l 1066(sp),d0
    4cf2:	          move.l 1062(sp),d1
    4cf6:	          jsr -684(a6)
    4cfa:	          move.l d0,1058(sp)
    4cfe:	          move.l 1058(sp),d0
    4d02:	          move.l d0,1c8b0 <gamePath>
	if (gamePath==0) {
    4d08:	          move.l 1c8b0 <gamePath>,d0
    4d0e:	      ,-- bne.s 4d22 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4d10:	      |   pea 18497 <PutChar+0x93b>
    4d16:	      |   jsr 170ba <KPrintF>
    4d1c:	      |   addq.l #4,sp
    4d1e:	   ,--|-- bra.w 4e0a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4d22:	   |  '-> move.l 1c8b0 <gamePath>,1054(sp)
    4d2a:	   |      moveq #-2,d0
    4d2c:	   |      move.l d0,1050(sp)
    4d30:	   |      move.l 1c950 <DOSBase>,d0
    4d36:	   |      movea.l d0,a6
    4d38:	   |      move.l 1054(sp),d1
    4d3c:	   |      move.l 1050(sp),d2
    4d40:	   |      jsr -84(a6)
    4d44:	   |      move.l d0,1046(sp)
    4d48:	   |      move.l 1046(sp),d0
    4d4c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4d50:	   |      move.l 1042(sp),1038(sp)
    4d56:	   |      move.l 1c950 <DOSBase>,d0
    4d5c:	   |      movea.l d0,a6
    4d5e:	   |      move.l 1038(sp),d1
    4d62:	   |      jsr -126(a6)
    4d66:	   |      move.l d0,1034(sp)
    4d6a:	   |      move.l 1034(sp),d0
    4d6e:	   |  ,-- bne.s 4d7e <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4d70:	   |  |   pea 184d2 <PutChar+0x976>
    4d76:	   |  |   jsr 170ba <KPrintF>
    4d7c:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4d7e:	   |  '-> move.l #1112,d0
    4d84:	   |      add.l sp,d0
    4d86:	   |      addi.l #-1102,d0
    4d8c:	   |      move.l d0,1030(sp)
    4d90:	   |      moveq #-2,d0
    4d92:	   |      move.l d0,1026(sp)
    4d96:	   |      move.l 1c950 <DOSBase>,d0
    4d9c:	   |      movea.l d0,a6
    4d9e:	   |      move.l 1030(sp),d1
    4da2:	   |      move.l 1026(sp),d2
    4da6:	   |      jsr -84(a6)
    4daa:	   |      move.l d0,1022(sp)
    4dae:	   |      move.l 1022(sp),d0
    4db2:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4db6:	   |      move.l 1042(sp),1018(sp)
    4dbc:	   |      move.l 1c950 <DOSBase>,d0
    4dc2:	   |      movea.l d0,a6
    4dc4:	   |      move.l 1018(sp),d1
    4dc8:	   |      jsr -126(a6)
    4dcc:	   |      move.l d0,1014(sp)
    4dd0:	   |      move.l 1014(sp),d0
    4dd4:	   |  ,-- bne.s 4dea <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4dd6:	   |  |   moveq #10,d0
    4dd8:	   |  |   add.l sp,d0
    4dda:	   |  |   move.l d0,-(sp)
    4ddc:	   |  |   pea 184fe <PutChar+0x9a2>
    4de2:	   |  |   jsr 170ba <KPrintF>
    4de8:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4dea:	   |  '-> move.l 1c8b0 <gamePath>,d0
    4df0:	   +----- beq.s 4e0a <setGameFilePath+0x234>
    4df2:	   |      move.l 1c8b0 <gamePath>,1010(sp)
    4dfa:	   |      move.l 1c948 <SysBase>,d0
    4e00:	   |      movea.l d0,a6
    4e02:	   |      movea.l 1010(sp),a1
    4e06:	   |      jsr -690(a6)
}
    4e0a:	   '----> move.l (sp)+,d2
    4e0c:	          movea.l (sp)+,a6
    4e0e:	          lea 1104(sp),sp
    4e12:	          rts

00004e14 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4e14:	,-------> lea -16(sp),sp
    4e18:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    4e1a:	|         move.l 24(sp),d0
    4e1e:	|         move.l d0,-(sp)
    4e20:	|         pea 18606 <PutChar+0xaaa>
    4e26:	|         jsr 170ba <KPrintF>
    4e2c:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    4e2e:	|         move.l 24(sp),-(sp)
    4e32:	|         jsr 6f82 <pauseFunction>
    4e38:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4e3a:	|     ,-- bra.s 4e4c <abortFunction+0x38>
    4e3c:	|  ,--|-> moveq #24,d0
    4e3e:	|  |  |   add.l 24(sp),d0
    4e42:	|  |  |   move.l d0,-(sp)
    4e44:	|  |  |   jsr 14f5e <trimStack>
    4e4a:	|  |  |   addq.l #4,sp
    4e4c:	|  |  '-> movea.l 24(sp),a0
    4e50:	|  |      move.l 24(a0),d0
    4e54:	|  '----- bne.s 4e3c <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    4e56:	|         movea.l 24(sp),a0
    4e5a:	|         move.l 4(a0),12(sp)
    4e60:	|         move.l 1c948 <SysBase>,d0
    4e66:	|         movea.l d0,a6
    4e68:	|         movea.l 12(sp),a1
    4e6c:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4e70:	|         clr.l 16(sp)
    4e74:	|     ,-- bra.s 4e94 <abortFunction+0x80>
    4e76:	|  ,--|-> movea.l 24(sp),a0
    4e7a:	|  |  |   move.l 20(a0),d1
    4e7e:	|  |  |   move.l 16(sp),d0
    4e82:	|  |  |   lsl.l #3,d0
    4e84:	|  |  |   add.l d1,d0
    4e86:	|  |  |   move.l d0,-(sp)
    4e88:	|  |  |   jsr 14828 <unlinkVar>
    4e8e:	|  |  |   addq.l #4,sp
    4e90:	|  |  |   addq.l #1,16(sp)
    4e94:	|  |  '-> movea.l 24(sp),a0
    4e98:	|  |      move.l 8(a0),d0
    4e9c:	|  |      cmp.l 16(sp),d0
    4ea0:	|  '----- bgt.s 4e76 <abortFunction+0x62>
	if( fun -> numLocals) {
    4ea2:	|         movea.l 24(sp),a0
    4ea6:	|         move.l 8(a0),d0
    4eaa:	|     ,-- beq.s 4ec6 <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    4eac:	|     |   movea.l 24(sp),a0
    4eb0:	|     |   move.l 20(a0),8(sp)
    4eb6:	|     |   move.l 1c948 <SysBase>,d0
    4ebc:	|     |   movea.l d0,a6
    4ebe:	|     |   movea.l 8(sp),a1
    4ec2:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    4ec6:	|     '-> moveq #28,d0
    4ec8:	|         add.l 24(sp),d0
    4ecc:	|         move.l d0,-(sp)
    4ece:	|         jsr 14828 <unlinkVar>
    4ed4:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4ed6:	|         movea.l 24(sp),a0
    4eda:	|         move.l 40(a0),d0
    4ede:	|     ,-- beq.s 4ef0 <abortFunction+0xdc>
    4ee0:	|     |   movea.l 24(sp),a0
    4ee4:	|     |   move.l 40(a0),d0
    4ee8:	|     |   move.l d0,-(sp)
    4eea:	'-----|-- jsr 4e14 <abortFunction>(pc)
    4eee:	      |   addq.l #4,sp
	FreeVec(fun);
    4ef0:	      '-> move.l 24(sp),4(sp)
    4ef6:	          move.l 1c948 <SysBase>,d0
    4efc:	          movea.l d0,a6
    4efe:	          movea.l 4(sp),a1
    4f02:	          jsr -690(a6)
	fun = NULL;
    4f06:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    4f0a:	          pea 18620 <PutChar+0xac4>
    4f10:	          jsr 170ba <KPrintF>
    4f16:	          addq.l #4,sp
}
    4f18:	          nop
    4f1a:	          movea.l (sp)+,a6
    4f1c:	          lea 16(sp),sp
    4f20:	          rts

00004f22 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    4f22:	          subq.l #8,sp
	int n = 0;
    4f24:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4f28:	          movea.l 20(sp),a0
    4f2c:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    4f2e:	          move.l 1c8e0 <allRunningFunctions>,(sp)
	while (fun) {
    4f34:	   ,----- bra.s 4f62 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4f36:	,--|----> movea.l (sp),a0
    4f38:	|  |      move.l (a0),d0
    4f3a:	|  |      cmp.l 12(sp),d0
    4f3e:	|  |  ,-- bne.s 4f5c <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    4f40:	|  |  |   movea.l (sp),a0
    4f42:	|  |  |   move.w #1,54(a0)
			n++;
    4f48:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4f4c:	|  |  |   move.l (sp),d0
    4f4e:	|  |  |   cmp.l 16(sp),d0
    4f52:	|  |  +-- bne.s 4f5c <cancelAFunction+0x3a>
    4f54:	|  |  |   movea.l 20(sp),a0
    4f58:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4f5c:	|  |  '-> movea.l (sp),a0
    4f5e:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4f62:	|  '----> tst.l (sp)
    4f64:	'-------- bne.s 4f36 <cancelAFunction+0x14>
	}
	return n;
    4f66:	          move.l 4(sp),d0
}
    4f6a:	          addq.l #8,sp
    4f6c:	          rts

00004f6e <completeTimers>:


void completeTimers () {
    4f6e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4f70:	          move.l 1c8e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4f76:	   ,----- bra.s 4f8c <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4f78:	,--|----> movea.l (sp),a0
    4f7a:	|  |      move.b 56(a0),d0
    4f7e:	|  |  ,-- bne.s 4f86 <completeTimers+0x18>
    4f80:	|  |  |   movea.l (sp),a0
    4f82:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4f86:	|  |  '-> movea.l (sp),a0
    4f88:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4f8c:	|  '----> tst.l (sp)
    4f8e:	'-------- bne.s 4f78 <completeTimers+0xa>
	}
}
    4f90:	          nop
    4f92:	          nop
    4f94:	          addq.l #4,sp
    4f96:	          rts

00004f98 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4f98:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4f9c:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4fa2:	                                                             movea.l 80(sp),a0
    4fa6:	                                                             move.w 54(a0),d0
    4faa:	,----------------------------------------------------------- beq.w 5e38 <continueFunction+0xea0>
		abortFunction (fun);
    4fae:	|                                                            move.l 80(sp),-(sp)
    4fb2:	|                                                            jsr 4e14 <abortFunction>
    4fb8:	|                                                            addq.l #4,sp
		return TRUE;
    4fba:	|                                                            moveq #1,d0
    4fbc:	|  ,-------------------------------------------------------- bra.w 5e42 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4fc0:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4fc6:	|  |  |                                                      movea.l 80(sp),a0
    4fca:	|  |  |                                                      move.l 4(a0),d1
    4fce:	|  |  |                                                      movea.l 80(sp),a0
    4fd2:	|  |  |                                                      move.l 36(a0),d0
    4fd6:	|  |  |                                                      lsl.l #3,d0
    4fd8:	|  |  |                                                      movea.l d1,a0
    4fda:	|  |  |                                                      adda.l d0,a0
    4fdc:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4fe2:	|  |  |                                                      movea.l 80(sp),a0
    4fe6:	|  |  |                                                      move.l 4(a0),d1
    4fea:	|  |  |                                                      movea.l 80(sp),a0
    4fee:	|  |  |                                                      move.l 36(a0),d0
    4ff2:	|  |  |                                                      lsl.l #3,d0
    4ff4:	|  |  |                                                      movea.l d1,a0
    4ff6:	|  |  |                                                      adda.l d0,a0
    4ff8:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4ffc:	|  |  |                                                      moveq #41,d0
    4ffe:	|  |  |                                                      cmp.l 64(sp),d0
    5002:	|  |  |  ,-------------------------------------------------- bcs.w 5dec <continueFunction+0xe54>
    5006:	|  |  |  |                                                   move.l 64(sp),d0
    500a:	|  |  |  |                                                   add.l d0,d0
    500c:	|  |  |  |                                                   movea.l d0,a0
    500e:	|  |  |  |                                                   adda.l #20506,a0
    5014:	|  |  |  |                                                   move.w (a0),d0
    5016:	|  |  |  |                                                   jmp (501a <continueFunction+0x82>,pc,d0.w)
    501a:	|  |  |  |                                                   bset d6,(a2)
    501c:	|  |  |  |                                                   ori.w #2670,(a4)
    5020:	|  |  |  |                                                   eori.w #2416,d6
    5024:	|  |  |  |                                                   bchg d4,d2
    5026:	|  |  |  |                                                   bclr d4,(a4)+
    5028:	|  |  |  |                                                   andi.l #181013194,d4
    502e:	|  |  |  |                                                   .short 0x0aca
    5030:	|  |  |  |                                                   .short 0x0aca
    5032:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    503a:	|  |  |  |                                                   .short 0x0aca
    503c:	|  |  |  |                                                   andi.w #906,-(a4)
    5040:	|  |  |  |                                                   bchg d1,196(a2)
    5044:	|  |  |  |                                                   bset d1,580(a4)
    5048:	|  |  |  |                                                   bclr d1,2576(a2)
    504c:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5052:	|  |  |  |                                                   .short 0x0aca
    5054:	|  |  |  |                                                   eori.l #63572682,d0
    505a:	|  |  |  |                                                   .short 0x0aca
    505c:	|  |  |  |                                                   bchg d3,-(a2)
    505e:	|  |  |  |                                                   bchg #-36,(a2)
    5062:	|  |  |  |                                                   .short 0x08cc
    5064:	|  |  |  |                                                   addi.b #14,1038(a0)
    506a:	|  |  |  |                                                   .short 0x040e
    506c:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5070:	|  |  |  |                                                   ori.w #8232,(a0)
    5074:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    507a:	|  |  |  |                                                   ori.w #12136,(a0)
    507e:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5084:	|  |  |  |                                                   ori.w #12328,(a0)
    5088:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    508e:	|  |  |  |                                                   add.l 44(sp),d1
    5092:	|  |  |  |                                                   moveq #28,d0
    5094:	|  |  |  |                                                   add.l 80(sp),d0
    5098:	|  |  |  |                                                   move.l d1,-(sp)
    509a:	|  |  |  |                                                   move.l d0,-(sp)
    509c:	|  |  |  |                                                   jsr 14a94 <copyVariable>
    50a2:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    50a4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    50a8:	|  |  |  |                                                   jsr 5e48 <finishFunction>
    50ae:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    50b0:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    50b6:	|  |  |  |                                                   move.l 80(sp),-(sp)
    50ba:	|  |  |  |                                                   jsr 6fc4 <restartFunction>
    50c0:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    50c2:	|  |  |  |  ,----------------------------------------------- bra.w 5e20 <continueFunction+0xe88>
				finishFunction (fun);
    50c6:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    50ca:	|  |  |  |  |                                                jsr 5e48 <finishFunction>
    50d0:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    50d2:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    50d6:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    50da:	|  |  |  |  +----------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    50de:	|  |  |  |  |                                                movea.l 80(sp),a0
    50e2:	|  |  |  |  |                                                move.l 28(a0),d0
    50e6:	|  |  |  |  |                                                moveq #2,d1
    50e8:	|  |  |  |  |                                                cmp.l d0,d1
    50ea:	|  |  |  |  |                                            ,-- beq.s 50f6 <continueFunction+0x15e>
    50ec:	|  |  |  |  |                                            |   moveq #4,d1
    50ee:	|  |  |  |  |                                            |   cmp.l d0,d1
    50f0:	|  |  |  |  |                                         ,--|-- beq.s 5144 <continueFunction+0x1ac>
    50f2:	|  |  |  |  |                                ,--------|--|-- bra.w 522c <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    50f6:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    50fa:	|  |  |  |  |                                |        |      jsr 6f82 <pauseFunction>
    5100:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5102:	|  |  |  |  |                                |        |      moveq #24,d0
    5104:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5108:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    510c:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5110:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5114:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5116:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    511a:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    511e:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5120:	|  |  |  |  |                                |        |      jsr 7210 <startNewFunctionNum>
    5126:	|  |  |  |  |                                |        |      lea 20(sp),sp
    512a:	|  |  |  |  |                                |        |      tst.l d0
    512c:	|  |  |  |  |                                |        |  ,-- bne.s 5134 <continueFunction+0x19c>
    512e:	|  |  |  |  |                                |        |  |   clr.w d0
    5130:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5e42 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5134:	|  |  |  |  |                                |        |  '-> move.l 1c8e0 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    513c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5140:	|  |  |  |  |                                |  ,-----|----- bra.w 5240 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5144:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    5148:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    514c:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5150:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5154:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    5156:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    5158:	|  |  |  |  |                                |  |            jsr 132bc <callBuiltIn>
    515e:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5162:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    5166:	|  |  |  |  |                                |  |            moveq #5,d0
    5168:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    516c:	|  |  |  |  |                                |  |  ,-------- bcs.w 5228 <continueFunction+0x290>
    5170:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    5174:	|  |  |  |  |                                |  |  |         add.l d0,d0
    5176:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    5178:	|  |  |  |  |                                |  |  |         adda.l #20868,a0
    517e:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5180:	|  |  |  |  |                                |  |  |         jmp (5184 <continueFunction+0x1ec>,pc,d0.w)
    5184:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    518a:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    518e:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5194:	|  |  |  |  |                                |  |  |         or.b 4eb9 <abortFunction+0xa5>,d3
    5198:	|  |  |  |  |                                |  |  |         ori.b #-70,d1
    519c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    519e:	|  |  |  |  |                                |  |  |         clr.w d0
    51a0:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5e42 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    51a4:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    51a8:	|  |  |  |  |                                |  |  |         jsr 6f82 <pauseFunction>
    51ae:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    51b0:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    51b4:	|  |  |  |  |                                |  |  |  ,----- bra.s 522a <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    51b6:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    51ba:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    51be:	|  |  |  |  |                                |  |  |  +----- bra.s 522a <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    51c0:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    51c4:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    51ca:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    51cc:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    51d0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    51d4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    51d8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    51da:	|  |  |  |  |                                |  |  |  |      jsr 14ecc <setVariable>
    51e0:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    51e4:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    51e8:	|  |  |  |  |                                |  |  |  |      jsr 6f82 <pauseFunction>
    51ee:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    51f0:	|  |  |  |  |                                |  |  |  |      move.l 1c918 <noStack>,d1
    51f6:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    51fa:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    51fc:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    51fe:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5202:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5204:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5206:	|  |  |  |  |                                |  |  |  |      jsr 7210 <startNewFunctionNum>
    520c:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5210:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5212:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 521a <continueFunction+0x282>
    5214:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5216:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5e42 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    521a:	|  |  |  |  |                                |  |  |  |  '-> move.l 1c8e0 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5222:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5226:	|  |  |  |  |                                |  |  |  +----- bra.s 522a <continueFunction+0x292>

						default:
						break;
    5228:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    522a:	|  |  |  |  |                                |  +-----'----X bra.s 5240 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    522c:	|  |  |  |  |                                '--|----------> pea 18683 <PutChar+0xb27>
    5232:	|  |  |  |  |                                   |            jsr 170ba <KPrintF>
    5238:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    523a:	|  |  |  |  |                                   |            clr.w d0
    523c:	|  +--|--|--|-----------------------------------|----------- bra.w 5e42 <continueFunction+0xeaa>
			}
			break;
    5240:	|  |  |  |  +-----------------------------------'----------X bra.w 5e20 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5244:	|  |  |  |  |                                                moveq #28,d0
    5246:	|  |  |  |  |                                                add.l 80(sp),d0
    524a:	|  |  |  |  |                                                clr.l -(sp)
    524c:	|  |  |  |  |                                                clr.l -(sp)
    524e:	|  |  |  |  |                                                move.l d0,-(sp)
    5250:	|  |  |  |  |                                                jsr 14ecc <setVariable>
    5256:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    525a:	|  |  |  |  +----------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    525e:	|  |  |  |  |                                                move.l 68(sp),d1
    5262:	|  |  |  |  |                                                moveq #28,d0
    5264:	|  |  |  |  |                                                add.l 80(sp),d0
    5268:	|  |  |  |  |                                                move.l d1,-(sp)
    526a:	|  |  |  |  |                                                pea 5 <_start+0x5>
    526e:	|  |  |  |  |                                                move.l d0,-(sp)
    5270:	|  |  |  |  |                                                jsr 14ecc <setVariable>
    5276:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    527a:	|  |  |  |  +----------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    527e:	|  |  |  |  |                                                move.l 68(sp),d1
    5282:	|  |  |  |  |                                                moveq #28,d0
    5284:	|  |  |  |  |                                                add.l 80(sp),d0
    5288:	|  |  |  |  |                                                move.l d1,-(sp)
    528a:	|  |  |  |  |                                                pea 1 <_start+0x1>
    528e:	|  |  |  |  |                                                move.l d0,-(sp)
    5290:	|  |  |  |  |                                                jsr 14ecc <setVariable>
    5296:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    529a:	|  |  |  |  +----------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    529e:	|  |  |  |  |                                                moveq #28,d0
    52a0:	|  |  |  |  |                                                add.l 80(sp),d0
    52a4:	|  |  |  |  |                                                movea.l 80(sp),a0
    52a8:	|  |  |  |  |                                                movea.l 20(a0),a0
    52ac:	|  |  |  |  |                                                move.l 68(sp),d1
    52b0:	|  |  |  |  |                                                lsl.l #3,d1
    52b2:	|  |  |  |  |                                                add.l a0,d1
    52b4:	|  |  |  |  |                                                move.l d0,-(sp)
    52b6:	|  |  |  |  |                                                move.l d1,-(sp)
    52b8:	|  |  |  |  |                                                jsr 14a94 <copyVariable>
    52be:	|  |  |  |  |                                                addq.l #8,sp
    52c0:	|  |  |  |  |                                                tst.w d0
    52c2:	|  |  |  |  |  ,-------------------------------------------- bne.w 5dfe <continueFunction+0xe66>
    52c6:	|  |  |  |  |  |                                             clr.w d0
    52c8:	|  +--|--|--|--|-------------------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    52cc:	|  |  |  |  |  |                                             moveq #28,d0
    52ce:	|  |  |  |  |  |                                             add.l 80(sp),d0
    52d2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    52d4:	|  |  |  |  |  |                                             jsr 14b1a <getBoolean>
    52da:	|  |  |  |  |  |                                             addq.l #4,sp
    52dc:	|  |  |  |  |  |                                             tst.w d0
    52de:	|  |  |  |  |  |                                      ,----- beq.s 52fa <continueFunction+0x362>
    52e0:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    52e4:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    52e8:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    52ea:	|  |  |  |  |  |                                      |      jsr 14b1a <getBoolean>
    52f0:	|  |  |  |  |  |                                      |      addq.l #4,sp
    52f2:	|  |  |  |  |  |                                      |      tst.w d0
    52f4:	|  |  |  |  |  |                                      +----- beq.s 52fa <continueFunction+0x362>
    52f6:	|  |  |  |  |  |                                      |      moveq #1,d0
    52f8:	|  |  |  |  |  |                                      |  ,-- bra.s 52fc <continueFunction+0x364>
    52fa:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    52fc:	|  |  |  |  |  |                                         '-> moveq #28,d1
    52fe:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5302:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5304:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5308:	|  |  |  |  |  |                                             move.l d1,-(sp)
    530a:	|  |  |  |  |  |                                             jsr 14ecc <setVariable>
    5310:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5314:	|  |  |  |  |  |                                             moveq #24,d0
    5316:	|  |  |  |  |  |                                             add.l 80(sp),d0
    531a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    531c:	|  |  |  |  |  |                                             jsr 14f5e <trimStack>
    5322:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5324:	|  |  |  |  +--|-------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5328:	|  |  |  |  |  |                                             moveq #28,d0
    532a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    532e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5330:	|  |  |  |  |  |                                             jsr 14b1a <getBoolean>
    5336:	|  |  |  |  |  |                                             addq.l #4,sp
    5338:	|  |  |  |  |  |                                             tst.w d0
    533a:	|  |  |  |  |  |                                         ,-- bne.s 5352 <continueFunction+0x3ba>
    533c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5340:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5344:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5346:	|  |  |  |  |  |                                         |   jsr 14b1a <getBoolean>
    534c:	|  |  |  |  |  |                                         |   addq.l #4,sp
    534e:	|  |  |  |  |  |                                         |   tst.w d0
    5350:	|  |  |  |  |  |                                      ,--|-- beq.s 5356 <continueFunction+0x3be>
    5352:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5354:	|  |  |  |  |  |                                      |  ,-- bra.s 5358 <continueFunction+0x3c0>
    5356:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5358:	|  |  |  |  |  |                                         '-> moveq #28,d1
    535a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    535e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5360:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5364:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5366:	|  |  |  |  |  |                                             jsr 14ecc <setVariable>
    536c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5370:	|  |  |  |  |  |                                             moveq #24,d0
    5372:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5376:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5378:	|  |  |  |  |  |                                             jsr 14f5e <trimStack>
    537e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5380:	|  |  |  |  +--|-------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5384:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5388:	|  |  |  |  |  |                                             moveq #28,d0
    538a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    538e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5390:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5394:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5396:	|  |  |  |  |  |                                             jsr 14ecc <setVariable>
    539c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    53a0:	|  |  |  |  +--|-------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    53a4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    53a8:	|  |  |  |  |  |                                             moveq #28,d0
    53aa:	|  |  |  |  |  |                                             add.l 80(sp),d0
    53ae:	|  |  |  |  |  |                                             move.l d1,-(sp)
    53b0:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    53b4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    53b6:	|  |  |  |  |  |                                             jsr 14ecc <setVariable>
    53bc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    53c0:	|  |  |  |  +--|-------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    53c4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    53c8:	|  |  |  |  |  |                                             moveq #28,d0
    53ca:	|  |  |  |  |  |                                             add.l 80(sp),d0
    53ce:	|  |  |  |  |  |                                             move.l d1,-(sp)
    53d0:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    53d4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    53d6:	|  |  |  |  |  |                                             jsr 14ecc <setVariable>
    53dc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    53e0:	|  |  |  |  +--|-------------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    53e4:	|  |  |  |  |  |                                             move.l 1c8a8 <dialogValue>,d0
    53ea:	|  |  |  |  |  |                                             moveq #1,d1
    53ec:	|  |  |  |  |  |                                             cmp.l d0,d1
    53ee:	|  |  |  |  |  |  ,----------------------------------------- beq.w 5e02 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    53f2:	|  |  |  |  |  |  |                                          pea 18698 <PutChar+0xb3c>
    53f8:	|  |  |  |  |  |  |                                          jsr 170ba <KPrintF>
    53fe:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5400:	|  |  |  |  |  |  |                                          clr.w d0
    5402:	|  +--|--|--|--|--|----------------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5406:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    540a:	|  |  |  |  |  |  |                                          moveq #28,d0
    540c:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5410:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5412:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5414:	|  |  |  |  |  |  |                                          jsr 1465e <loadStringToVar>
    541a:	|  |  |  |  |  |  |                                          addq.l #8,sp
    541c:	|  |  |  |  |  |  |                                          tst.w d0
    541e:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5e06 <continueFunction+0xe6e>
					return FALSE;
    5422:	|  |  |  |  |  |  |  |                                       clr.w d0
    5424:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5428:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    542c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5430:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5432:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5434:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5436:	|  |  |  |  |  |  |  |                                ,----- beq.s 5494 <continueFunction+0x4fc>
    5438:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    543a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    543c:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5628 <continueFunction+0x690>
    5440:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5442:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 544e <continueFunction+0x4b6>
    5444:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5446:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5448:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5494 <continueFunction+0x4fc>
    544a:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5628 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    544e:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5450:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5454:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5480 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5456:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5458:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    545c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    545e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5460:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5462:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14ecc <setVariable>
    5468:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    546c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    546e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5472:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5474:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f5e <trimStack>
    547a:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    547c:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 563e <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5480:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 186d9 <PutChar+0xb7d>
    5486:	|  |  |  |  |  |  |  |              |  |              |      jsr 170ba <KPrintF>
    548c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    548e:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5490:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5e42 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5494:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    5498:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    549c:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    54a0:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    54a2:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 54b8 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    54a4:	|  |  |  |  |  |  |  |              |  |                 |   pea 18715 <PutChar+0xbb9>
    54aa:	|  |  |  |  |  |  |  |              |  |                 |   jsr 170ba <KPrintF>
    54b0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    54b2:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    54b4:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5e42 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    54b8:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    54ba:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    54be:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    54c0:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    54c4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    54c8:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    54ca:	|  |  |  |  |  |  |  |              |  |                     jsr 145da <getValueType>
    54d0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    54d4:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    54d6:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 54de <continueFunction+0x546>
    54d8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    54da:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5e42 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    54de:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    54e2:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    54e6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    54e8:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    54ea:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    54ec:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 550e <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    54ee:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    54f2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    54f4:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    54f8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    54fc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5500:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5502:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5504:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14264 <fastArrayGetByIndex>
    550a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    550c:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 552e <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    550e:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5512:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5514:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5518:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    551c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5520:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5522:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5524:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5526:	|  |  |  |  |  |  |  |              |  |              |      jsr 14eee <stackGetByIndex>
    552c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    552e:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5532:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5534:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5538:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    553a:	|  |  |  |  |  |  |  |              |  |                     jsr 14f5e <trimStack>
    5540:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5542:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5546:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5562 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5548:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    554a:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    554e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5550:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5552:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5554:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14ecc <setVariable>
    555a:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    555e:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 563c <continueFunction+0x6a4>
						switch (com) {
    5562:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5564:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5568:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5576 <continueFunction+0x5de>
    556a:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    556c:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5570:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 55c0 <continueFunction+0x628>
    5572:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5608 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5576:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    557a:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    557e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5582:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5584:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 145da <getValueType>
    558a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    558e:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5590:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5598 <continueFunction+0x600>
    5592:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5594:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5622 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5598:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    559a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    559c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    55a0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    55a2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    55a6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    55a8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14ecc <setVariable>
    55ae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    55b2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    55b4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    55b6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    55ba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    55be:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5626 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    55c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    55c4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    55c8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    55cc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    55ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 145da <getValueType>
    55d4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    55d8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    55da:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 55e0 <continueFunction+0x648>
    55dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    55de:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5622 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    55e0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    55e2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    55e4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    55e8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    55ea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    55ee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    55f0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14ecc <setVariable>
    55f6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    55fa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    55fc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    55fe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5602:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5606:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5626 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5608:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    560a:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    560e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5610:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5614:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14a94 <copyVariable>
    561a:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    561c:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    561e:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 563c <continueFunction+0x6a4>
    5620:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5622:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 5e42 <continueFunction+0xeaa>
				break;
    5626:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 563c <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5628:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18733 <PutChar+0xbd7>
    562e:	|  |  |  |  |  |  |  |                 |  |                  jsr 170ba <KPrintF>
    5634:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5636:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5638:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5e42 <continueFunction+0xeaa>
				break;
    563c:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    563e:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 5e20 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5642:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5646:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    564a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    564c:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    564e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5650:	|  |  |  |  |  |  |  |                                   ,-- beq.s 565e <continueFunction+0x6c6>
    5652:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5654:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5656:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 570a <continueFunction+0x772>
    565a:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5768 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    565e:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5662:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5666:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    566a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    566c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5682 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    566e:	|  |  |  |  |  |  |  |                             |  |  |   pea 18715 <PutChar+0xbb9>
    5674:	|  |  |  |  |  |  |  |                             |  |  |   jsr 170ba <KPrintF>
    567a:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    567c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    567e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5e42 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5682:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5684:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5688:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    568a:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    568e:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5692:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5694:	|  |  |  |  |  |  |  |                             |  |      jsr 145da <getValueType>
    569a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    569e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    56a0:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 56a8 <continueFunction+0x710>
    56a2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    56a4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5e42 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    56a8:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    56ac:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    56b0:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    56b4:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    56b6:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    56ba:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    56bc:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    56c0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    56c4:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    56c8:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    56ca:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    56cc:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    56ce:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    56d0:	|  |  |  |  |  |  |  |                             |  |      jsr 71cc <stackSetByIndex>
    56d6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    56da:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    56dc:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 56e4 <continueFunction+0x74c>
						return FALSE;
    56de:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    56e0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5e42 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    56e4:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    56e6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    56ea:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    56ec:	|  |  |  |  |  |  |  |                             |  |      jsr 14f5e <trimStack>
    56f2:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    56f4:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    56f6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    56fa:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    56fc:	|  |  |  |  |  |  |  |                             |  |      jsr 14f5e <trimStack>
    5702:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5704:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5706:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 5e20 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    570a:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    570c:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5710:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5712:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5716:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    571a:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    571c:	|  |  |  |  |  |  |  |                             |         jsr 145da <getValueType>
    5722:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5726:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5728:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5730 <continueFunction+0x798>
    572a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    572c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5e42 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5730:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5734:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5736:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    573a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    573e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5742:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5744:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5746:	|  |  |  |  |  |  |  |                             |         jsr 14264 <fastArrayGetByIndex>
    574c:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    574e:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5752:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5762 <continueFunction+0x7ca>
    5754:	|  |  |  |  |  |  |  |                             |     |   pea 18757 <PutChar+0xbfb>
    575a:	|  |  |  |  |  |  |  |                             |     |   jsr 170ba <KPrintF>
    5760:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5762:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5764:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5e42 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5768:	|  |  |  |  |  |  |  |                             '-------> pea 18733 <PutChar+0xbd7>
    576e:	|  |  |  |  |  |  |  |                                       jsr 170ba <KPrintF>
    5774:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5776:	|  |  |  |  |  |  |  |                                       clr.w d0
    5778:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    577c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5780:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5784:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5788:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    578a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    578c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    578e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5792:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5796:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5798:	|  |  |  |  |  |  |  |                                       jsr 145da <getValueType>
    579e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    57a2:	|  |  |  |  |  |  |  |                                       tst.w d0
    57a4:	|  |  |  |  |  |  |  |                                   ,-- bne.s 57ac <continueFunction+0x814>
    57a6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    57a8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5e42 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    57ac:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    57b0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    57b2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    57b6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    57b8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    57bc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    57be:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    57c4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    57c8:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    57cc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    57ce:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    57d0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    57d4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    57d8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    57dc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    57de:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    57e0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    57e2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    57e6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    57e8:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    57ee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    57f2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    57f6:	|  |  |  |  |  |  |  |                                       move.l 1c8f6 <globalVars>,d1
    57fc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5800:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5802:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5804:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5806:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    580a:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    580e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5810:	|  |  |  |  |  |  |  |                                       jsr 145da <getValueType>
    5816:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    581a:	|  |  |  |  |  |  |  |                                       tst.w d0
    581c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5824 <continueFunction+0x88c>
    581e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5820:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5e42 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5824:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5828:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    582a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    582e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5830:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5834:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5836:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    583c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5840:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5844:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5846:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5848:	|  |  |  |  |  |  |  |                                       movea.l 1c8f6 <globalVars>,a0
    584e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5852:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5854:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5856:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5858:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    585c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    585e:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    5864:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5868:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    586c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5870:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5874:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5878:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    587a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    587c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    587e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5882:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5886:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5888:	|  |  |  |  |  |  |  |                                       jsr 145da <getValueType>
    588e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5892:	|  |  |  |  |  |  |  |                                       tst.w d0
    5894:	|  |  |  |  |  |  |  |                                   ,-- bne.s 589c <continueFunction+0x904>
    5896:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5898:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5e42 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    589c:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    58a0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    58a2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    58a6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    58a8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58ac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58ae:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    58b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    58b8:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    58bc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    58be:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    58c0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    58c4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    58c8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    58cc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    58ce:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    58d0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    58d2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58d6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58d8:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    58de:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    58e2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    58e6:	|  |  |  |  |  |  |  |                                       move.l 1c8f6 <globalVars>,d1
    58ec:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    58f0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    58f2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    58f4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58f6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58fa:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    58fe:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5900:	|  |  |  |  |  |  |  |                                       jsr 145da <getValueType>
    5906:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    590a:	|  |  |  |  |  |  |  |                                       tst.w d0
    590c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5914 <continueFunction+0x97c>
    590e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5910:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5e42 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5914:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5918:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    591a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    591e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5920:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5924:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5926:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    592c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5930:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5934:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5936:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5938:	|  |  |  |  |  |  |  |                                       movea.l 1c8f6 <globalVars>,a0
    593e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5942:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5944:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5946:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5948:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    594c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    594e:	|  |  |  |  |  |  |  |                                       jsr 14ecc <setVariable>
    5954:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5958:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    595c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5960:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5964:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5968:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    596a:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    596c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    596e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5972:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5974:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5976:	|  |  |  |  |  |  |  |                                       jsr 14a94 <copyVariable>
    597c:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    597e:	|  |  |  |  |  |  |  |                                       tst.w d0
    5980:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5e0a <continueFunction+0xe72>
    5984:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5986:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    598a:	|  |  |  |  |  |  |  |  |                                    move.l 1c8f6 <globalVars>,d1
    5990:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5994:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5996:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5998:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    599a:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    599e:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    59a0:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    59a2:	|  |  |  |  |  |  |  |  |                                    jsr 14a94 <copyVariable>
    59a8:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    59aa:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    59ac:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5e0e <continueFunction+0xe76>
    59b0:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    59b2:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    59b6:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    59b8:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    59bc:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c8f6 <globalVars>,a0
    59c2:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    59c6:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    59c8:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    59ca:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    59cc:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    59ce:	|  |  |  |  |  |  |  |  |  |                                 jsr 14a94 <copyVariable>
    59d4:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    59d6:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    59d8:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 5e12 <continueFunction+0xe7a>
    59dc:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    59de:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    59e2:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    59e4:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    59e8:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    59ea:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    59ee:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    59f0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    59f2:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13e16 <addVarToStack>
    59f8:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    59fa:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    59fc:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5e16 <continueFunction+0xe7e>
    5a00:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5a02:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5a06:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5a08:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5a0c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5a0e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5a12:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5a14:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5a16:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13e9c <addVarToStackQuick>
    5a1c:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5a1e:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5a20:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5e1a <continueFunction+0xe82>
    5a24:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5a26:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5e42 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5a2a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5a2c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5a30:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5a32:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b1a <getBoolean>
    5a38:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5a3a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5a3c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5a3e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5a40:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5a42:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5a44:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5a46:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5a4a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5a4c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5a50:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5a52:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14ecc <setVariable>
    5a58:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5a5c:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5a60:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5a62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5a66:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5a68:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b1a <getBoolean>
    5a6e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5a70:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5a72:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 5e1e <continueFunction+0xe86>
				advanceNow = FALSE;
    5a76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5a7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5a84:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5e1e <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5a88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5a8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5a90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5a96:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5e20 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5a9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5aa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5aa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5aa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5aaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5aac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 145da <getValueType>
    5ab2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5ab6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5ab8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5ac0 <continueFunction+0xb28>
    5aba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5abc:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5e42 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5ac0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5ac4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5ac6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5ac8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5aca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5ace:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5ad0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5ad4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5ad6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14ecc <setVariable>
    5adc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5ae0:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5e20 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5ae4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5ae8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5aec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5dd6 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5af0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5af2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5af6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5b72 <continueFunction+0xbda>
    5af8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5afa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5afe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5bbc <continueFunction+0xc24>
    5b02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5b04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5b08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5b16 <continueFunction+0xb7e>
    5b0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5b0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5b10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5b44 <continueFunction+0xbac>
    5b12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5bbc <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5b16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5b18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5b1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5b20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5b24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5b26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5b28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f10 <addVariablesInSecond>
    5b2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5b30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5b32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5b36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14f5e <trimStack>
    5b3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5b40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5dea <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5b44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5b46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5b4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5b4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5b52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5b54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5b56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13fce <compareVariablesInSecond>
    5b5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5b5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5b60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5b64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5b66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14f5e <trimStack>
    5b6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5b6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5dea <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5b72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5b74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5b78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5b7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5b80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5b82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5b84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13fce <compareVariablesInSecond>
    5b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5b8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5b8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5b92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5b94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14f5e <trimStack>
    5b9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5b9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5ba0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5ba4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5ba6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5ba8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5baa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5bb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5dea <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5bbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5bc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5bc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5bca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5bce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5bd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 145da <getValueType>
    5bd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5bda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5bdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5be4 <continueFunction+0xc4c>
    5bde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5be0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5e42 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5be4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5be6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5bec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 145da <getValueType>
    5bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5c00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5c02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5c0a <continueFunction+0xc72>
    5c04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5c06:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5e42 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5c0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5c10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14f5e <trimStack>
    5c18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5c1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5c20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5c24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5de8 <continueFunction+0xe50>
    5c28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5c2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #23608,a0
    5c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5c34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5c38 <continueFunction+0xca0>,pc,d0.w)
    5c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5c3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5c46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5c68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5c72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a46 <__mulsi3>
    5c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5c80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5c92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5c96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5dea <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5dea <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17af2 <__modsi3>
    5cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5cd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5dea <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17ac4 <__divsi3>
    5d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5d16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5dea <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5d44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5dea <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5d62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5dea <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5d9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5dea <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ecc <setVariable>
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5dea <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18778 <PutChar+0xc1c>
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 170ba <KPrintF>
    5de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5de6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5e42 <continueFunction+0xeaa>
						break;
    5de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5dea:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 5e20 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5dec:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18790 <PutChar+0xc34>
    5df2:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 170ba <KPrintF>
    5df8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5dfa:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5dfc:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5e42 <continueFunction+0xeaa>
			break;
    5dfe:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    5e00:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e02:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5e04:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e06:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5e08:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e0a:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5e0c:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e0e:	|  |  |     |              '--|--|--|--|-------------------> nop
    5e10:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e12:	|  |  |     |                 '--|--|--|-------------------> nop
    5e14:	|  |  |     +--------------------|--|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e16:	|  |  |     |                    '--|--|-------------------> nop
    5e18:	|  |  |     +-----------------------|--|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e1a:	|  |  |     |                       '--|-------------------> nop
    5e1c:	|  |  |     +--------------------------|-------------------- bra.s 5e20 <continueFunction+0xe88>
			break;
    5e1e:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    5e20:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    5e24:	+--|--|----------------------------------------------------- beq.s 5e38 <continueFunction+0xea0>
    5e26:	|  |  |                                                      movea.l 80(sp),a0
    5e2a:	|  |  |                                                      move.l 36(a0),d0
    5e2e:	|  |  |                                                      addq.l #1,d0
    5e30:	|  |  |                                                      movea.l 80(sp),a0
    5e34:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5e38:	'--|--|----------------------------------------------------> tst.w 74(sp)
    5e3c:	   |  '----------------------------------------------------- bne.w 4fc0 <continueFunction+0x28>

	}
	return TRUE;
    5e40:	   |                                                         moveq #1,d0
}
    5e42:	   '-------------------------------------------------------> lea 76(sp),sp
    5e46:	                                                             rts

00005e48 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5e48:	          lea -16(sp),sp
    5e4c:	          move.l a6,-(sp)
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    5e4e:	          move.l 24(sp),d0
    5e52:	          move.l d0,-(sp)
    5e54:	          pea 187bc <PutChar+0xc60>
    5e5a:	          jsr 170ba <KPrintF>
    5e60:	          addq.l #8,sp
	int a;

	pauseFunction (fun);
    5e62:	          move.l 24(sp),-(sp)
    5e66:	          jsr 6f82 <pauseFunction>
    5e6c:	          addq.l #4,sp
	if (fun -> stack) 
    5e6e:	          movea.l 24(sp),a0
    5e72:	          move.l 24(a0),d0
    5e76:	      ,-- beq.s 5e8a <finishFunction+0x42>
	{
		KPrintF("finishfunction: error non empty stack");
    5e78:	      |   pea 187d7 <PutChar+0xc7b>
    5e7e:	      |   jsr 170ba <KPrintF>
    5e84:	      |   addq.l #4,sp
		return;
    5e86:	,-----|-- bra.w 5f24 <finishFunction+0xdc>
	}
	FreeVec( fun -> compiledLines);
    5e8a:	|     '-> movea.l 24(sp),a0
    5e8e:	|         move.l 4(a0),12(sp)
    5e94:	|         move.l 1c948 <SysBase>,d0
    5e9a:	|         movea.l d0,a6
    5e9c:	|         movea.l 12(sp),a1
    5ea0:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5ea4:	|         clr.l 16(sp)
    5ea8:	|     ,-- bra.s 5ec8 <finishFunction+0x80>
    5eaa:	|  ,--|-> movea.l 24(sp),a0
    5eae:	|  |  |   move.l 20(a0),d1
    5eb2:	|  |  |   move.l 16(sp),d0
    5eb6:	|  |  |   lsl.l #3,d0
    5eb8:	|  |  |   add.l d1,d0
    5eba:	|  |  |   move.l d0,-(sp)
    5ebc:	|  |  |   jsr 14828 <unlinkVar>
    5ec2:	|  |  |   addq.l #4,sp
    5ec4:	|  |  |   addq.l #1,16(sp)
    5ec8:	|  |  '-> movea.l 24(sp),a0
    5ecc:	|  |      move.l 8(a0),d0
    5ed0:	|  |      cmp.l 16(sp),d0
    5ed4:	|  '----- bgt.s 5eaa <finishFunction+0x62>
	if( fun->numLocals > 0) {
    5ed6:	|         movea.l 24(sp),a0
    5eda:	|         move.l 8(a0),d0
    5ede:	|     ,-- ble.s 5efa <finishFunction+0xb2>
		FreeVec(fun -> localVars);
    5ee0:	|     |   movea.l 24(sp),a0
    5ee4:	|     |   move.l 20(a0),8(sp)
    5eea:	|     |   move.l 1c948 <SysBase>,d0
    5ef0:	|     |   movea.l d0,a6
    5ef2:	|     |   movea.l 8(sp),a1
    5ef6:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5efa:	|     '-> moveq #28,d0
    5efc:	|         add.l 24(sp),d0
    5f00:	|         move.l d0,-(sp)
    5f02:	|         jsr 14828 <unlinkVar>
    5f08:	|         addq.l #4,sp
	FreeVec(fun);
    5f0a:	|         move.l 24(sp),4(sp)
    5f10:	|         move.l 1c948 <SysBase>,d0
    5f16:	|         movea.l d0,a6
    5f18:	|         movea.l 4(sp),a1
    5f1c:	|         jsr -690(a6)
	fun = NULL;
    5f20:	|         clr.l 24(sp)
}
    5f24:	'-------> movea.l (sp)+,a6
    5f26:	          lea 16(sp),sp
    5f2a:	          rts

00005f2c <freezeSubs>:

void freezeSubs () {
    5f2c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5f2e:	          move.l 1c8e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    5f34:	   ,----- bra.s 5f52 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    5f36:	,--|----> movea.l (sp),a0
    5f38:	|  |      move.w 52(a0),d0
    5f3c:	|  |  ,-- bne.s 5f4c <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5f3e:	|  |  |   movea.l (sp),a0
    5f40:	|  |  |   move.b 56(a0),d0
    5f44:	|  |  |   addq.b #1,d0
    5f46:	|  |  |   movea.l (sp),a0
    5f48:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5f4c:	|  |  '-> movea.l (sp),a0
    5f4e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5f52:	|  '----> tst.l (sp)
    5f54:	'-------- bne.s 5f36 <freezeSubs+0xa>
	}
}
    5f56:	          nop
    5f58:	          nop
    5f5a:	          addq.l #4,sp
    5f5c:	          rts

00005f5e <handleInput>:

BOOL handleInput () {
    5f5e:	             lea -16(sp),sp
    5f62:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    5f64:	             move.l 1ca58 <overRegion>,d0
    5f6a:	         ,-- bne.s 5f72 <handleInput+0x14>
    5f6c:	         |   jsr 15816 <getOverRegion>

	if (input.justMoved) {
    5f72:	         '-> move.w 1c8fe <input+0x4>,d0
    5f78:	         ,-- beq.s 5fb6 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5f7a:	         |   movea.l 1c2b8 <currentEvents>,a0
    5f80:	         |   move.l 16(a0),d0
    5f84:	         +-- beq.s 5fb6 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5f86:	         |   move.l 1c918 <noStack>,d1
    5f8c:	         |   movea.l 1c2b8 <currentEvents>,a0
    5f92:	         |   move.l 16(a0),d0
    5f96:	         |   pea 1 <_start+0x1>
    5f9a:	         |   move.l d1,-(sp)
    5f9c:	         |   clr.l -(sp)
    5f9e:	         |   clr.l -(sp)
    5fa0:	         |   move.l d0,-(sp)
    5fa2:	         |   jsr 7210 <startNewFunctionNum>
    5fa8:	         |   lea 20(sp),sp
    5fac:	         |   tst.l d0
    5fae:	         +-- bne.s 5fb6 <handleInput+0x58>
    5fb0:	         |   clr.w d0
    5fb2:	,--------|-- bra.w 61bc <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5fb6:	|        '-> clr.w 1c8fe <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5fbc:	|            move.l 1c910 <lastRegion>,d1
    5fc2:	|            move.l 1ca58 <overRegion>,d0
    5fc8:	|            cmp.l d1,d0
    5fca:	|  ,-------- beq.w 60a2 <handleInput+0x144>
    5fce:	|  |         movea.l 1c2b8 <currentEvents>,a0
    5fd4:	|  |         move.l 20(a0),d0
    5fd8:	|  +-------- beq.w 60a2 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    5fdc:	|  |         moveq #12,d0
    5fde:	|  |         move.l d0,16(sp)
    5fe2:	|  |         clr.l 12(sp)
    5fe6:	|  |         move.l 1c948 <SysBase>,d0
    5fec:	|  |         movea.l d0,a6
    5fee:	|  |         move.l 16(sp),d0
    5ff2:	|  |         move.l 12(sp),d1
    5ff6:	|  |         jsr -684(a6)
    5ffa:	|  |         move.l d0,8(sp)
    5ffe:	|  |         move.l 8(sp),d0
    6002:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6006:	|  |         move.l 4(sp),d0
    600a:	|  |     ,-- bne.s 6020 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    600c:	|  |     |   pea 187fd <PutChar+0xca1>
    6012:	|  |     |   jsr 170ba <KPrintF>
    6018:	|  |     |   addq.l #4,sp
			return FALSE;
    601a:	|  |     |   clr.w d0
    601c:	+--|-----|-- bra.w 61bc <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    6020:	|  |     '-> movea.l 4(sp),a0
    6024:	|  |         clr.l (a0)
		if (overRegion) {
    6026:	|  |         move.l 1ca58 <overRegion>,d0
    602c:	|  |  ,----- beq.s 6054 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    602e:	|  |  |      movea.l 1ca58 <overRegion>,a0
    6034:	|  |  |      movea.l 28(a0),a0
    6038:	|  |  |      move.l 4(a0),d1
    603c:	|  |  |      move.l 4(sp),d0
    6040:	|  |  |      move.l d1,-(sp)
    6042:	|  |  |      pea 7 <_start+0x7>
    6046:	|  |  |      move.l d0,-(sp)
    6048:	|  |  |      jsr 14ecc <setVariable>
    604e:	|  |  |      lea 12(sp),sp
    6052:	|  |  |  ,-- bra.s 606a <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6054:	|  |  '--|-> move.l 4(sp),d0
    6058:	|  |     |   clr.l -(sp)
    605a:	|  |     |   pea 1 <_start+0x1>
    605e:	|  |     |   move.l d0,-(sp)
    6060:	|  |     |   jsr 14ecc <setVariable>
    6066:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    606a:	|  |     '-> movea.l 4(sp),a0
    606e:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    6072:	|  |         movea.l 1c2b8 <currentEvents>,a0
    6078:	|  |         move.l 20(a0),d0
    607c:	|  |         pea 1 <_start+0x1>
    6080:	|  |         lea 8(sp),a0
    6084:	|  |         move.l a0,-(sp)
    6086:	|  |         clr.l -(sp)
    6088:	|  |         pea 1 <_start+0x1>
    608c:	|  |         move.l d0,-(sp)
    608e:	|  |         jsr 7210 <startNewFunctionNum>
    6094:	|  |         lea 20(sp),sp
    6098:	|  |         tst.l d0
    609a:	|  +-------- bne.s 60a2 <handleInput+0x144>
    609c:	|  |         clr.w d0
    609e:	+--|-------- bra.w 61bc <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    60a2:	|  '-------> move.w 1c900 <input+0x6>,d0
    60a8:	|        ,-- beq.s 60e6 <handleInput+0x188>
    60aa:	|        |   movea.l 1c2b8 <currentEvents>,a0
    60b0:	|        |   move.l 4(a0),d0
    60b4:	|        +-- beq.s 60e6 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    60b6:	|        |   move.l 1c918 <noStack>,d1
    60bc:	|        |   movea.l 1c2b8 <currentEvents>,a0
    60c2:	|        |   move.l 4(a0),d0
    60c6:	|        |   pea 1 <_start+0x1>
    60ca:	|        |   move.l d1,-(sp)
    60cc:	|        |   clr.l -(sp)
    60ce:	|        |   clr.l -(sp)
    60d0:	|        |   move.l d0,-(sp)
    60d2:	|        |   jsr 7210 <startNewFunctionNum>
    60d8:	|        |   lea 20(sp),sp
    60dc:	|        |   tst.l d0
    60de:	|        +-- bne.s 60e6 <handleInput+0x188>
    60e0:	|        |   clr.w d0
    60e2:	+--------|-- bra.w 61bc <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    60e6:	|        '-> move.w 1c902 <input+0x8>,d0
    60ec:	|        ,-- beq.s 612a <handleInput+0x1cc>
    60ee:	|        |   movea.l 1c2b8 <currentEvents>,a0
    60f4:	|        |   move.l 12(a0),d0
    60f8:	|        +-- beq.s 612a <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    60fa:	|        |   move.l 1c918 <noStack>,d1
    6100:	|        |   movea.l 1c2b8 <currentEvents>,a0
    6106:	|        |   move.l 12(a0),d0
    610a:	|        |   pea 1 <_start+0x1>
    610e:	|        |   move.l d1,-(sp)
    6110:	|        |   clr.l -(sp)
    6112:	|        |   clr.l -(sp)
    6114:	|        |   move.l d0,-(sp)
    6116:	|        |   jsr 7210 <startNewFunctionNum>
    611c:	|        |   lea 20(sp),sp
    6120:	|        |   tst.l d0
    6122:	|        +-- bne.s 612a <handleInput+0x1cc>
    6124:	|        |   clr.w d0
    6126:	+--------|-- bra.w 61bc <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    612a:	|        '-> move.w 1c8fa <input>,d0
    6130:	|        ,-- beq.s 6168 <handleInput+0x20a>
    6132:	|        |   movea.l 1c2b8 <currentEvents>,a0
    6138:	|        |   move.l (a0),d0
    613a:	|        +-- beq.s 6168 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    613c:	|        |   move.l 1c918 <noStack>,d1
    6142:	|        |   movea.l 1c2b8 <currentEvents>,a0
    6148:	|        |   move.l (a0),d0
    614a:	|        |   pea 1 <_start+0x1>
    614e:	|        |   move.l d1,-(sp)
    6150:	|        |   clr.l -(sp)
    6152:	|        |   clr.l -(sp)
    6154:	|        |   move.l d0,-(sp)
    6156:	|        |   jsr 7210 <startNewFunctionNum>
    615c:	|        |   lea 20(sp),sp
    6160:	|        |   tst.l d0
    6162:	|        +-- bne.s 6168 <handleInput+0x20a>
    6164:	|        |   clr.w d0
    6166:	+--------|-- bra.s 61bc <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6168:	|        '-> move.w 1c8fc <input+0x2>,d0
    616e:	|        ,-- beq.s 61aa <handleInput+0x24c>
    6170:	|        |   movea.l 1c2b8 <currentEvents>,a0
    6176:	|        |   move.l 8(a0),d0
    617a:	|        +-- beq.s 61aa <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    617c:	|        |   move.l 1c918 <noStack>,d1
    6182:	|        |   movea.l 1c2b8 <currentEvents>,a0
    6188:	|        |   move.l 8(a0),d0
    618c:	|        |   pea 1 <_start+0x1>
    6190:	|        |   move.l d1,-(sp)
    6192:	|        |   clr.l -(sp)
    6194:	|        |   clr.l -(sp)
    6196:	|        |   move.l d0,-(sp)
    6198:	|        |   jsr 7210 <startNewFunctionNum>
    619e:	|        |   lea 20(sp),sp
    61a2:	|        |   tst.l d0
    61a4:	|        +-- bne.s 61aa <handleInput+0x24c>
    61a6:	|        |   clr.w d0
    61a8:	+--------|-- bra.s 61bc <handleInput+0x25e>
	}

	lastRegion = overRegion;
    61aa:	|        '-> move.l 1ca58 <overRegion>,d0
    61b0:	|            move.l d0,1c910 <lastRegion>
	return runSludge ();
    61b6:	|            jsr 6fde <runSludge>
}
    61bc:	'----------> movea.l (sp)+,a6
    61be:	             lea 16(sp),sp
    61c2:	             rts

000061c4 <initSludge>:

BOOL initSludge (char * filename) {
    61c4:	             lea -292(sp),sp
    61c8:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    61cc:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    61d0:	             jsr aaa6 <makeNullAnim>
    61d6:	             move.l d0,1c842 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    61dc:	             pea 1c8f2 <gameVersion>
    61e2:	             pea 18833 <PutChar+0xcd7>
    61e8:	             pea 45 <_start+0x45>
    61ec:	             pea 47 <_start+0x47>
    61f0:	             move.l 332(sp),-(sp)
    61f4:	             jsr 6c12 <openAndVerify>
    61fa:	             lea 20(sp),sp
    61fe:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6202:	         ,-- bne.s 620a <initSludge+0x46>
    6204:	         |   clr.w d0
    6206:	,--------|-- bra.w 6932 <initSludge+0x76e>
	if (FGetC (fp)) {
    620a:	|        '-> move.l 288(sp),284(sp)
    6210:	|            move.l 1c950 <DOSBase>,d0
    6216:	|            movea.l d0,a6
    6218:	|            move.l 284(sp),d1
    621c:	|            jsr -306(a6)
    6220:	|            move.l d0,280(sp)
    6224:	|            move.l 280(sp),d0
    6228:	|  ,-------- beq.w 63d2 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    622c:	|  |         move.l 288(sp),-(sp)
    6230:	|  |         jsr 6bc <get2bytes>
    6236:	|  |         addq.l #4,sp
    6238:	|  |         move.l d0,1c91c <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    623e:	|  |         move.l 1c91c <numBIFNames>,d0
    6244:	|  |         move.l d0,276(sp)
    6248:	|  |         clr.l 272(sp)
    624c:	|  |         move.l 1c948 <SysBase>,d0
    6252:	|  |         movea.l d0,a6
    6254:	|  |         move.l 276(sp),d0
    6258:	|  |         move.l 272(sp),d1
    625c:	|  |         jsr -684(a6)
    6260:	|  |         move.l d0,268(sp)
    6264:	|  |         move.l 268(sp),d0
    6268:	|  |         move.l d0,1c8d8 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    626e:	|  |         move.l 1c8d8 <allBIFNames>,d0
    6274:	|  |     ,-- bne.s 627c <initSludge+0xb8>
    6276:	|  |     |   clr.w d0
    6278:	+--|-----|-- bra.w 6932 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    627c:	|  |     '-> clr.l 304(sp)
    6280:	|  |     ,-- bra.s 62a6 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6282:	|  |  ,--|-> move.l 1c8d8 <allBIFNames>,d1
    6288:	|  |  |  |   move.l 304(sp),d0
    628c:	|  |  |  |   add.l d0,d0
    628e:	|  |  |  |   add.l d0,d0
    6290:	|  |  |  |   movea.l d1,a2
    6292:	|  |  |  |   adda.l d0,a2
    6294:	|  |  |  |   move.l 288(sp),-(sp)
    6298:	|  |  |  |   jsr b02 <readString>
    629e:	|  |  |  |   addq.l #4,sp
    62a0:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    62a2:	|  |  |  |   addq.l #1,304(sp)
    62a6:	|  |  |  '-> move.l 1c91c <numBIFNames>,d0
    62ac:	|  |  |      cmp.l 304(sp),d0
    62b0:	|  |  '----- bgt.s 6282 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    62b2:	|  |         move.l 288(sp),-(sp)
    62b6:	|  |         jsr 6bc <get2bytes>
    62bc:	|  |         addq.l #4,sp
    62be:	|  |         move.l d0,1c928 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    62c4:	|  |         move.l 1c928 <numUserFunc>,d0
    62ca:	|  |         move.l d0,264(sp)
    62ce:	|  |         clr.l 260(sp)
    62d2:	|  |         move.l 1c948 <SysBase>,d0
    62d8:	|  |         movea.l d0,a6
    62da:	|  |         move.l 264(sp),d0
    62de:	|  |         move.l 260(sp),d1
    62e2:	|  |         jsr -684(a6)
    62e6:	|  |         move.l d0,256(sp)
    62ea:	|  |         move.l 256(sp),d0
    62ee:	|  |         move.l d0,1c8e4 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    62f4:	|  |         move.l 1c8e4 <allUserFunc>,d0
    62fa:	|  |     ,-- bne.s 6302 <initSludge+0x13e>
    62fc:	|  |     |   clr.w d0
    62fe:	+--|-----|-- bra.w 6932 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6302:	|  |     '-> clr.l 300(sp)
    6306:	|  |     ,-- bra.s 632c <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6308:	|  |  ,--|-> move.l 1c8e4 <allUserFunc>,d1
    630e:	|  |  |  |   move.l 300(sp),d0
    6312:	|  |  |  |   add.l d0,d0
    6314:	|  |  |  |   add.l d0,d0
    6316:	|  |  |  |   movea.l d1,a2
    6318:	|  |  |  |   adda.l d0,a2
    631a:	|  |  |  |   move.l 288(sp),-(sp)
    631e:	|  |  |  |   jsr b02 <readString>
    6324:	|  |  |  |   addq.l #4,sp
    6326:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6328:	|  |  |  |   addq.l #1,300(sp)
    632c:	|  |  |  '-> move.l 1c928 <numUserFunc>,d0
    6332:	|  |  |      cmp.l 300(sp),d0
    6336:	|  |  '----- bgt.s 6308 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6338:	|  |         move.l 1c8f2 <gameVersion>,d0
    633e:	|  |         cmpi.l #258,d0
    6344:	|  +-------- ble.w 63d2 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6348:	|  |         move.l 288(sp),-(sp)
    634c:	|  |         jsr 6bc <get2bytes>
    6352:	|  |         addq.l #4,sp
    6354:	|  |         move.l d0,1c924 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    635a:	|  |         move.l 1c924 <numResourceNames>,d0
    6360:	|  |         add.l d0,d0
    6362:	|  |         add.l d0,d0
    6364:	|  |         move.l d0,252(sp)
    6368:	|  |         clr.l 248(sp)
    636c:	|  |         move.l 1c948 <SysBase>,d0
    6372:	|  |         movea.l d0,a6
    6374:	|  |         move.l 252(sp),d0
    6378:	|  |         move.l 248(sp),d1
    637c:	|  |         jsr -684(a6)
    6380:	|  |         move.l d0,244(sp)
    6384:	|  |         move.l 244(sp),d0
    6388:	|  |         move.l d0,1c8dc <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    638e:	|  |         move.l 1c8dc <allResourceNames>,d0
    6394:	|  |     ,-- bne.s 639c <initSludge+0x1d8>
    6396:	|  |     |   clr.w d0
    6398:	+--|-----|-- bra.w 6932 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    639c:	|  |     '-> clr.l 296(sp)
    63a0:	|  |     ,-- bra.s 63c6 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    63a2:	|  |  ,--|-> move.l 1c8dc <allResourceNames>,d1
    63a8:	|  |  |  |   move.l 296(sp),d0
    63ac:	|  |  |  |   add.l d0,d0
    63ae:	|  |  |  |   add.l d0,d0
    63b0:	|  |  |  |   movea.l d1,a2
    63b2:	|  |  |  |   adda.l d0,a2
    63b4:	|  |  |  |   move.l 288(sp),-(sp)
    63b8:	|  |  |  |   jsr b02 <readString>
    63be:	|  |  |  |   addq.l #4,sp
    63c0:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    63c2:	|  |  |  |   addq.l #1,296(sp)
    63c6:	|  |  |  '-> move.l 1c924 <numResourceNames>,d0
    63cc:	|  |  |      cmp.l 296(sp),d0
    63d0:	|  |  '----- bgt.s 63a2 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    63d2:	|  '-------> move.l #129,1c904 <input+0xa>
	input.mouseY = 100;
    63dc:	|            moveq #100,d0
    63de:	|            move.l d0,1c908 <input+0xe>
	winWidth = get2bytes (fp);
    63e4:	|            move.l 288(sp),-(sp)
    63e8:	|            jsr 6bc <get2bytes>
    63ee:	|            addq.l #4,sp
    63f0:	|            move.l d0,1c89c <winWidth>
	winHeight = get2bytes (fp);
    63f6:	|            move.l 288(sp),-(sp)
    63fa:	|            jsr 6bc <get2bytes>
    6400:	|            addq.l #4,sp
    6402:	|            move.l d0,1c8a0 <winHeight>
	specialSettings = FGetC (fp);
    6408:	|            move.l 288(sp),240(sp)
    640e:	|            move.l 1c950 <DOSBase>,d0
    6414:	|            movea.l d0,a6
    6416:	|            move.l 240(sp),d1
    641a:	|            jsr -306(a6)
    641e:	|            move.l d0,236(sp)
    6422:	|            move.l 236(sp),d0
    6426:	|            move.l d0,1c92c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    642c:	|            move.l 288(sp),232(sp)
    6432:	|            move.l 1c950 <DOSBase>,d0
    6438:	|            movea.l d0,a6
    643a:	|            move.l 232(sp),d1
    643e:	|            jsr -306(a6)
    6442:	|            move.l d0,228(sp)
    6446:	|            move.l 228(sp),d0
    644a:	|            move.l d0,-(sp)
    644c:	|            pea 3e8 <encodeFilename+0xea>
    6450:	|            jsr 17ac4 <__divsi3>
    6456:	|            addq.l #8,sp
    6458:	|            move.l d0,1c2ca <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    645e:	|            move.l 288(sp),-(sp)
    6462:	|            jsr b02 <readString>
    6468:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    646a:	|            move.l 288(sp),224(sp)
    6470:	|            move.l #116970,220(sp)
    6478:	|            moveq #8,d1
    647a:	|            move.l d1,216(sp)
    647e:	|            moveq #1,d0
    6480:	|            move.l d0,212(sp)
    6484:	|            move.l 1c950 <DOSBase>,d0
    648a:	|            movea.l d0,a6
    648c:	|            move.l 224(sp),d1
    6490:	|            move.l 220(sp),d2
    6494:	|            move.l 216(sp),d3
    6498:	|            move.l 212(sp),d4
    649c:	|            jsr -324(a6)
    64a0:	|            move.l d0,208(sp)
    64a4:	|            move.l 208(sp),d0
    64a8:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    64ac:	|            moveq #1,d1
    64ae:	|            cmp.l 204(sp),d1
    64b2:	|        ,-- beq.s 64c2 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    64b4:	|        |   pea 1886c <PutChar+0xd10>
    64ba:	|        |   jsr 170ba <KPrintF>
    64c0:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    64c2:	|        '-> move.l 1c8f2 <gameVersion>,d0
    64c8:	|            cmpi.l #258,d0
    64ce:	|        ,-- ble.s 64de <initSludge+0x31a>
    64d0:	|        |   move.l 288(sp),-(sp)
    64d4:	|        |   jsr b02 <readString>
    64da:	|        |   addq.l #4,sp
    64dc:	|     ,--|-- bra.s 64f2 <initSludge+0x32e>
    64de:	|     |  '-> pea 1888a <PutChar+0xd2e>
    64e4:	|     |      pea 1888a <PutChar+0xd2e>
    64ea:	|     |      jsr 13b06 <joinStrings>
    64f0:	|     |      addq.l #8,sp
    64f2:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    64f6:	|            move.l 1c8f2 <gameVersion>,d0
    64fc:	|            cmpi.l #258,d0
    6502:	|     ,----- ble.s 6524 <initSludge+0x360>
    6504:	|     |      move.l 288(sp),196(sp)
    650a:	|     |      move.l 1c950 <DOSBase>,d0
    6510:	|     |      movea.l d0,a6
    6512:	|     |      move.l 196(sp),d1
    6516:	|     |      jsr -306(a6)
    651a:	|     |      move.l d0,192(sp)
    651e:	|     |      move.l 192(sp),d0
    6522:	|     |  ,-- bra.s 6526 <initSludge+0x362>
    6524:	|     '--|-> moveq #0,d0
    6526:	|        '-> move.l d0,1ca24 <gameSettings+0x4>
	makeLanguageTable (fp);
    652c:	|            move.l 288(sp),-(sp)
    6530:	|            jsr 134bc <makeLanguageTable>
    6536:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6538:	|            move.l 1c8f2 <gameVersion>,d0
    653e:	|            cmpi.l #261,d0
    6544:	|        ,-- ble.s 6592 <initSludge+0x3ce>
	{
		FGetC(fp);
    6546:	|        |   move.l 288(sp),188(sp)
    654c:	|        |   move.l 1c950 <DOSBase>,d0
    6552:	|        |   movea.l d0,a6
    6554:	|        |   move.l 188(sp),d1
    6558:	|        |   jsr -306(a6)
    655c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6560:	|        |   move.l 288(sp),180(sp)
    6566:	|        |   move.l 1c950 <DOSBase>,d0
    656c:	|        |   movea.l d0,a6
    656e:	|        |   move.l 180(sp),d1
    6572:	|        |   jsr -306(a6)
    6576:	|        |   move.l d0,176(sp)
		getFloat (fp);
    657a:	|        |   move.l 288(sp),-(sp)
    657e:	|        |   jsr 7d8 <getFloat>
    6584:	|        |   addq.l #4,sp
		getFloat (fp);
    6586:	|        |   move.l 288(sp),-(sp)
    658a:	|        |   jsr 7d8 <getFloat>
    6590:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6592:	|        '-> move.l 288(sp),-(sp)
    6596:	|            jsr b02 <readString>
    659c:	|            addq.l #4,sp
    659e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    65a2:	|            pea 1888b <PutChar+0xd2f>
    65a8:	|            move.l 176(sp),-(sp)
    65ac:	|            jsr 13a86 <strcmp>
    65b2:	|            addq.l #8,sp
    65b4:	|            tst.l d0
    65b6:	|        ,-- beq.s 65be <initSludge+0x3fa>
		return FALSE;
    65b8:	|        |   clr.w d0
    65ba:	+--------|-- bra.w 6932 <initSludge+0x76e>
	}
	FreeVec( checker);
    65be:	|        '-> move.l 172(sp),168(sp)
    65c4:	|            move.l 1c948 <SysBase>,d0
    65ca:	|            movea.l d0,a6
    65cc:	|            movea.l 168(sp),a1
    65d0:	|            jsr -690(a6)
	checker = NULL;
    65d4:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    65d8:	|            move.l 288(sp),164(sp)
    65de:	|            move.l 1c950 <DOSBase>,d0
    65e4:	|            movea.l d0,a6
    65e6:	|            move.l 164(sp),d1
    65ea:	|            jsr -306(a6)
    65ee:	|            move.l d0,160(sp)
    65f2:	|            move.l 160(sp),d0
    65f6:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    65fa:	|            moveq #0,d0
    65fc:	|            move.b 159(sp),d0
    6600:	|            moveq #1,d1
    6602:	|            and.l d1,d0
    6604:	|        ,-- beq.s 665c <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6606:	|        |   move.l 1c950 <DOSBase>,d0
    660c:	|        |   movea.l d0,a6
    660e:	|        |   jsr -60(a6)
    6612:	|        |   move.l d0,38(sp)
    6616:	|        |   move.l 38(sp),d0
    661a:	|        |   move.l d0,34(sp)
    661e:	|        |   move.l #100499,30(sp)
    6626:	|        |   moveq #54,d0
    6628:	|        |   move.l d0,26(sp)
    662c:	|        |   move.l 1c950 <DOSBase>,d0
    6632:	|        |   movea.l d0,a6
    6634:	|        |   move.l 34(sp),d1
    6638:	|        |   move.l 30(sp),d2
    663c:	|        |   move.l 26(sp),d3
    6640:	|        |   jsr -48(a6)
    6644:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6648:	|        |   pea 188ca <PutChar+0xd6e>
    664e:	|        |   jsr 170ba <KPrintF>
    6654:	|        |   addq.l #4,sp
		return FALSE;
    6656:	|        |   clr.w d0
    6658:	+--------|-- bra.w 6932 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    665c:	|        '-> move.l 288(sp),-(sp)
    6660:	|            jsr 6bc <get2bytes>
    6666:	|            addq.l #4,sp
    6668:	|            move.l d0,1c920 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    666e:	|            move.l 1c920 <numGlobals>,d0
    6674:	|            lsl.l #3,d0
    6676:	|            move.l d0,154(sp)
    667a:	|            clr.l 150(sp)
    667e:	|            move.l 1c948 <SysBase>,d0
    6684:	|            movea.l d0,a6
    6686:	|            move.l 154(sp),d0
    668a:	|            move.l 150(sp),d1
    668e:	|            jsr -684(a6)
    6692:	|            move.l d0,146(sp)
    6696:	|            move.l 146(sp),d0
    669a:	|            move.l d0,1c8f6 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    66a0:	|            move.l 1c8f6 <globalVars>,d0
    66a6:	|        ,-- bne.s 66c4 <initSludge+0x500>
    66a8:	|        |   move.l 1c920 <numGlobals>,d0
    66ae:	|        +-- ble.s 66c4 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    66b0:	|        |   pea 18902 <PutChar+0xda6>
    66b6:	|        |   jsr 170ba <KPrintF>
    66bc:	|        |   addq.l #4,sp
		return FALSE;
    66be:	|        |   clr.w d0
    66c0:	+--------|-- bra.w 6932 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    66c4:	|        '-> clr.l 308(sp)
    66c8:	|        ,-- bra.s 66e0 <initSludge+0x51c>
    66ca:	|     ,--|-> move.l 1c8f6 <globalVars>,d1
    66d0:	|     |  |   move.l 308(sp),d0
    66d4:	|     |  |   lsl.l #3,d0
    66d6:	|     |  |   movea.l d1,a0
    66d8:	|     |  |   adda.l d0,a0
    66da:	|     |  |   clr.l (a0)
    66dc:	|     |  |   addq.l #1,308(sp)
    66e0:	|     |  '-> move.l 1c920 <numGlobals>,d0
    66e6:	|     |      cmp.l 308(sp),d0
    66ea:	|     '----- bgt.s 66ca <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    66ec:	|            move.l 1ca24 <gameSettings+0x4>,d0
    66f2:	|            clr.l -(sp)
    66f4:	|            move.l d0,-(sp)
    66f6:	|            move.l 296(sp),-(sp)
    66fa:	|            jsr 7718 <setFileIndices>
    6700:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6704:	|            pea 1 <_start+0x1>
    6708:	|            jsr 73d2 <getNumberedString>
    670e:	|            addq.l #4,sp
    6710:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6714:	|            move.l 142(sp),-(sp)
    6718:	|            jsr 2fe <encodeFilename>
    671e:	|            addq.l #4,sp
    6720:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6724:	|            move.l 142(sp),134(sp)
    672a:	|            move.l 1c948 <SysBase>,d0
    6730:	|            movea.l d0,a6
    6732:	|            movea.l 134(sp),a1
    6736:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    673a:	|            move.l 138(sp),130(sp)
    6740:	|            move.l 1c950 <DOSBase>,d0
    6746:	|            movea.l d0,a6
    6748:	|            move.l 130(sp),d1
    674c:	|            jsr -120(a6)
    6750:	|            move.l d0,126(sp)
    6754:	|            move.l 126(sp),d0
    6758:	|            move.l d0,292(sp)
	if(lock == 0) {
    675c:	|        ,-- bne.s 678a <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    675e:	|        |   move.l 138(sp),122(sp)
    6764:	|        |   moveq #-2,d1
    6766:	|        |   move.l d1,118(sp)
    676a:	|        |   move.l 1c950 <DOSBase>,d0
    6770:	|        |   movea.l d0,a6
    6772:	|        |   move.l 122(sp),d1
    6776:	|        |   move.l 118(sp),d2
    677a:	|        |   jsr -84(a6)
    677e:	|        |   move.l d0,114(sp)
    6782:	|        |   move.l 114(sp),d0
    6786:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    678a:	|        '-> move.l 292(sp),110(sp)
    6790:	|            move.l 1c950 <DOSBase>,d0
    6796:	|            movea.l d0,a6
    6798:	|            move.l 110(sp),d1
    679c:	|            jsr -126(a6)
    67a0:	|            move.l d0,106(sp)
    67a4:	|            move.l 106(sp),d0
    67a8:	|        ,-- bne.s 6804 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    67aa:	|        |   move.l 138(sp),-(sp)
    67ae:	|        |   pea 18935 <PutChar+0xdd9>
    67b4:	|        |   jsr 170ba <KPrintF>
    67ba:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    67bc:	|        |   move.l 1c950 <DOSBase>,d0
    67c2:	|        |   movea.l d0,a6
    67c4:	|        |   jsr -60(a6)
    67c8:	|        |   move.l d0,58(sp)
    67cc:	|        |   move.l 58(sp),d0
    67d0:	|        |   move.l d0,54(sp)
    67d4:	|        |   move.l #100706,50(sp)
    67dc:	|        |   moveq #40,d0
    67de:	|        |   move.l d0,46(sp)
    67e2:	|        |   move.l 1c950 <DOSBase>,d0
    67e8:	|        |   movea.l d0,a6
    67ea:	|        |   move.l 54(sp),d1
    67ee:	|        |   move.l 50(sp),d2
    67f2:	|        |   move.l 46(sp),d3
    67f6:	|        |   jsr -48(a6)
    67fa:	|        |   move.l d0,42(sp)
		return FALSE;
    67fe:	|        |   clr.w d0
    6800:	+--------|-- bra.w 6932 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6804:	|        '-> move.l 138(sp),102(sp)
    680a:	|            move.l 1c948 <SysBase>,d0
    6810:	|            movea.l d0,a6
    6812:	|            movea.l 102(sp),a1
    6816:	|            jsr -690(a6)

	readIniFile (filename);
    681a:	|            move.l 316(sp),-(sp)
    681e:	|            jsr 135f0 <readIniFile>
    6824:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6826:	|            jsr 133c2 <getLanguageForFileB>
    682c:	|            move.l d0,1c2bc <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6832:	|            move.l 1c2bc <languageNum>,d0
    6838:	|        ,-- bpl.s 6848 <initSludge+0x684>
    683a:	|        |   pea 1898b <PutChar+0xe2f>
    6840:	|        |   jsr 170ba <KPrintF>
    6846:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6848:	|        '-> move.l 1c2bc <languageNum>,d0
    684e:	|            move.l d0,d1
    6850:	|            move.l 1ca24 <gameSettings+0x4>,d0
    6856:	|            move.l d1,-(sp)
    6858:	|            move.l d0,-(sp)
    685a:	|            clr.l -(sp)
    685c:	|            jsr 7718 <setFileIndices>
    6862:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6866:	|            movea.l 200(sp),a0
    686a:	|            move.b (a0),d0
    686c:	|     ,----- beq.w 6916 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6870:	|     |      move.l 200(sp),-(sp)
    6874:	|     |      jsr 2fe <encodeFilename>
    687a:	|     |      addq.l #4,sp
    687c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6880:	|     |      move.l 98(sp),94(sp)
    6886:	|     |      move.l 1c950 <DOSBase>,d0
    688c:	|     |      movea.l d0,a6
    688e:	|     |      move.l 94(sp),d1
    6892:	|     |      jsr -120(a6)
    6896:	|     |      move.l d0,90(sp)
    689a:	|     |      move.l 90(sp),d0
    689e:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    68a2:	|     |  ,-- bne.s 68d0 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    68a4:	|     |  |   move.l 98(sp),86(sp)
    68aa:	|     |  |   moveq #-2,d1
    68ac:	|     |  |   move.l d1,82(sp)
    68b0:	|     |  |   move.l 1c950 <DOSBase>,d0
    68b6:	|     |  |   movea.l d0,a6
    68b8:	|     |  |   move.l 86(sp),d1
    68bc:	|     |  |   move.l 82(sp),d2
    68c0:	|     |  |   jsr -84(a6)
    68c4:	|     |  |   move.l d0,78(sp)
    68c8:	|     |  |   move.l 78(sp),d0
    68cc:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    68d0:	|     |  '-> move.l 292(sp),74(sp)
    68d6:	|     |      move.l 1c950 <DOSBase>,d0
    68dc:	|     |      movea.l d0,a6
    68de:	|     |      move.l 74(sp),d1
    68e2:	|     |      jsr -126(a6)
    68e6:	|     |      move.l d0,70(sp)
    68ea:	|     |      move.l 70(sp),d0
    68ee:	|     |  ,-- bne.s 6900 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    68f0:	|     |  |   move.l 1c950 <DOSBase>,d0
    68f6:	|     |  |   movea.l d0,a6
    68f8:	|     |  |   jsr -60(a6)
    68fc:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6900:	|     |  '-> move.l 98(sp),62(sp)
    6906:	|     |      move.l 1c948 <SysBase>,d0
    690c:	|     |      movea.l d0,a6
    690e:	|     |      movea.l 62(sp),a1
    6912:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6916:	|     '----> movea.l 1c8a0 <winHeight>,a0
    691c:	|            lea -15(a0),a0
    6920:	|            move.l a0,d0
    6922:	|            move.l d0,-(sp)
    6924:	|            pea a <_start+0xa>
    6928:	|            jsr 815e <positionStatus>
    692e:	|            addq.l #8,sp

	return TRUE;
    6930:	|            moveq #1,d0
}
    6932:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6936:	             lea 292(sp),sp
    693a:	             rts

0000693c <killSpeechTimers>:

void killSpeechTimers () {
    693c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    693e:	          move.l 1c8e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6944:	   ,----- bra.s 6970 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6946:	,--|----> movea.l (sp),a0
    6948:	|  |      move.b 56(a0),d0
    694c:	|  |  ,-- bne.s 696a <killSpeechTimers+0x2e>
    694e:	|  |  |   movea.l (sp),a0
    6950:	|  |  |   move.w 50(a0),d0
    6954:	|  |  +-- beq.s 696a <killSpeechTimers+0x2e>
    6956:	|  |  |   movea.l (sp),a0
    6958:	|  |  |   move.l 12(a0),d0
    695c:	|  |  +-- beq.s 696a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    695e:	|  |  |   movea.l (sp),a0
    6960:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6964:	|  |  |   movea.l (sp),a0
    6966:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    696a:	|  |  '-> movea.l (sp),a0
    696c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6970:	|  '----> tst.l (sp)
    6972:	'-------- bne.s 6946 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6974:	          jsr 3d88 <killAllSpeech>
}
    697a:	          nop
    697c:	          addq.l #4,sp
    697e:	          rts

00006980 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6980:	             lea -52(sp),sp
    6984:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6986:	             movea.l 60(sp),a0
    698a:	             move.l (a0),d0
    698c:	             move.l d0,-(sp)
    698e:	             jsr 7658 <openSubSlice>
    6994:	             addq.l #4,sp
    6996:	             tst.w d0
    6998:	         ,-- bne.s 69a0 <loadFunctionCode+0x20>
    699a:	         |   clr.w d0
    699c:	,--------|-- bra.w 6b6a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    69a0:	|        '-> move.l 1c930 <bigDataFile>,44(sp)
    69a8:	|            move.l 1c950 <DOSBase>,d0
    69ae:	|            movea.l d0,a6
    69b0:	|            move.l 44(sp),d1
    69b4:	|            jsr -306(a6)
    69b8:	|            move.l d0,40(sp)
    69bc:	|            move.l 40(sp),d0
    69c0:	|            move.l d0,d0
    69c2:	|            movea.l 60(sp),a0
    69c6:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    69ca:	|            move.l 1c930 <bigDataFile>,d0
    69d0:	|            move.l d0,-(sp)
    69d2:	|            jsr 6bc <get2bytes>
    69d8:	|            addq.l #4,sp
    69da:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    69de:	|            move.l 1c930 <bigDataFile>,d0
    69e4:	|            move.l d0,-(sp)
    69e6:	|            jsr 6bc <get2bytes>
    69ec:	|            addq.l #4,sp
    69ee:	|            movea.l 60(sp),a0
    69f2:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    69f6:	|            move.l 1c930 <bigDataFile>,d0
    69fc:	|            move.l d0,-(sp)
    69fe:	|            jsr 6bc <get2bytes>
    6a04:	|            addq.l #4,sp
    6a06:	|            movea.l 60(sp),a0
    6a0a:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6a0e:	|            move.l 36(sp),d0
    6a12:	|            lsl.l #3,d0
    6a14:	|            move.l d0,32(sp)
    6a18:	|            clr.l 28(sp)
    6a1c:	|            move.l 1c948 <SysBase>,d0
    6a22:	|            movea.l d0,a6
    6a24:	|            move.l 32(sp),d0
    6a28:	|            move.l 28(sp),d1
    6a2c:	|            jsr -684(a6)
    6a30:	|            move.l d0,24(sp)
    6a34:	|            move.l 24(sp),d0
    6a38:	|            movea.l 60(sp),a0
    6a3c:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6a40:	|            movea.l 60(sp),a0
    6a44:	|            move.l 4(a0),d0
    6a48:	|        ,-- bne.s 6a5e <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6a4a:	|        |   pea 189b6 <PutChar+0xe5a>
    6a50:	|        |   jsr 170ba <KPrintF>
    6a56:	|        |   addq.l #4,sp
		return FALSE;
    6a58:	|        |   clr.w d0
    6a5a:	+--------|-- bra.w 6b6a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6a5e:	|        '-> clr.l 52(sp)
    6a62:	|        ,-- bra.s 6ac4 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6a64:	|     ,--|-> move.l 1c930 <bigDataFile>,8(sp)
    6a6c:	|     |  |   move.l 1c950 <DOSBase>,d0
    6a72:	|     |  |   movea.l d0,a6
    6a74:	|     |  |   move.l 8(sp),d1
    6a78:	|     |  |   jsr -306(a6)
    6a7c:	|     |  |   move.l d0,4(sp)
    6a80:	|     |  |   move.l 4(sp),d1
    6a84:	|     |  |   movea.l 60(sp),a0
    6a88:	|     |  |   movea.l 4(a0),a0
    6a8c:	|     |  |   move.l 52(sp),d0
    6a90:	|     |  |   lsl.l #3,d0
    6a92:	|     |  |   adda.l d0,a0
    6a94:	|     |  |   move.l d1,d0
    6a96:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6a98:	|     |  |   move.l 1c930 <bigDataFile>,d0
    6a9e:	|     |  |   move.l d0,-(sp)
    6aa0:	|     |  |   jsr 6bc <get2bytes>
    6aa6:	|     |  |   addq.l #4,sp
    6aa8:	|     |  |   move.l d0,d1
    6aaa:	|     |  |   movea.l 60(sp),a0
    6aae:	|     |  |   movea.l 4(a0),a0
    6ab2:	|     |  |   move.l 52(sp),d0
    6ab6:	|     |  |   lsl.l #3,d0
    6ab8:	|     |  |   adda.l d0,a0
    6aba:	|     |  |   move.l d1,d0
    6abc:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6ac0:	|     |  |   addq.l #1,52(sp)
    6ac4:	|     |  '-> move.l 52(sp),d0
    6ac8:	|     |      cmp.l 36(sp),d0
    6acc:	|     '----- bcs.s 6a64 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6ace:	|            jsr 73c8 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6ad4:	|            movea.l 60(sp),a0
    6ad8:	|            move.l 8(a0),d0
    6adc:	|  ,-------- ble.w 6b60 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6ae0:	|  |         movea.l 60(sp),a0
    6ae4:	|  |         move.l 8(a0),d0
    6ae8:	|  |         lsl.l #3,d0
    6aea:	|  |         move.l d0,20(sp)
    6aee:	|  |         clr.l 16(sp)
    6af2:	|  |         move.l 1c948 <SysBase>,d0
    6af8:	|  |         movea.l d0,a6
    6afa:	|  |         move.l 20(sp),d0
    6afe:	|  |         move.l 16(sp),d1
    6b02:	|  |         jsr -684(a6)
    6b06:	|  |         move.l d0,12(sp)
    6b0a:	|  |         move.l 12(sp),d0
    6b0e:	|  |         movea.l 60(sp),a0
    6b12:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6b16:	|  |         movea.l 60(sp),a0
    6b1a:	|  |         move.l 20(a0),d0
    6b1e:	|  |     ,-- bne.s 6b32 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6b20:	|  |     |   pea 189b6 <PutChar+0xe5a>
    6b26:	|  |     |   jsr 170ba <KPrintF>
    6b2c:	|  |     |   addq.l #4,sp
			return FALSE;
    6b2e:	|  |     |   clr.w d0
    6b30:	+--|-----|-- bra.s 6b6a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6b32:	|  |     '-> clr.l 48(sp)
    6b36:	|  |     ,-- bra.s 6b50 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6b38:	|  |  ,--|-> movea.l 60(sp),a0
    6b3c:	|  |  |  |   move.l 20(a0),d1
    6b40:	|  |  |  |   move.l 48(sp),d0
    6b44:	|  |  |  |   lsl.l #3,d0
    6b46:	|  |  |  |   movea.l d1,a0
    6b48:	|  |  |  |   adda.l d0,a0
    6b4a:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6b4c:	|  |  |  |   addq.l #1,48(sp)
    6b50:	|  |  |  '-> movea.l 60(sp),a0
    6b54:	|  |  |      move.l 8(a0),d0
    6b58:	|  |  |      cmp.l 48(sp),d0
    6b5c:	|  |  '----- bgt.s 6b38 <loadFunctionCode+0x1b8>
    6b5e:	|  |     ,-- bra.s 6b68 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6b60:	|  '-----|-> movea.l 60(sp),a0
    6b64:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6b68:	|        '-> moveq #1,d0
}
    6b6a:	'----------> movea.l (sp)+,a6
    6b6c:	             lea 52(sp),sp
    6b70:	             rts

00006b72 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6b72:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6b74:	movea.l 1c2b8 <currentEvents>,a2
    6b7a:	move.l 8(sp),-(sp)
    6b7e:	jsr 6bc <get2bytes>
    6b84:	addq.l #4,sp
    6b86:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6b88:	movea.l 1c2b8 <currentEvents>,a2
    6b8e:	move.l 8(sp),-(sp)
    6b92:	jsr 6bc <get2bytes>
    6b98:	addq.l #4,sp
    6b9a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6b9e:	movea.l 1c2b8 <currentEvents>,a2
    6ba4:	move.l 8(sp),-(sp)
    6ba8:	jsr 6bc <get2bytes>
    6bae:	addq.l #4,sp
    6bb0:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6bb4:	movea.l 1c2b8 <currentEvents>,a2
    6bba:	move.l 8(sp),-(sp)
    6bbe:	jsr 6bc <get2bytes>
    6bc4:	addq.l #4,sp
    6bc6:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6bca:	movea.l 1c2b8 <currentEvents>,a2
    6bd0:	move.l 8(sp),-(sp)
    6bd4:	jsr 6bc <get2bytes>
    6bda:	addq.l #4,sp
    6bdc:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6be0:	movea.l 1c2b8 <currentEvents>,a2
    6be6:	move.l 8(sp),-(sp)
    6bea:	jsr 6bc <get2bytes>
    6bf0:	addq.l #4,sp
    6bf2:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6bf6:	movea.l 1c2b8 <currentEvents>,a2
    6bfc:	move.l 8(sp),-(sp)
    6c00:	jsr 6bc <get2bytes>
    6c06:	addq.l #4,sp
    6c08:	move.l d0,24(a2)
}
    6c0c:	nop
    6c0e:	movea.l (sp)+,a2
    6c10:	rts

00006c12 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6c12:	       lea -312(sp),sp
    6c16:	       movem.l d2-d3/a6,-(sp)
    6c1a:	       move.l 332(sp),d1
    6c1e:	       move.l 336(sp),d0
    6c22:	       move.b d1,d1
    6c24:	       move.b d1,16(sp)
    6c28:	       move.b d0,d0
    6c2a:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6c2e:	       move.l 328(sp),318(sp)
    6c34:	       move.l #1005,314(sp)
    6c3c:	       move.l 1c950 <DOSBase>,d0
    6c42:	       movea.l d0,a6
    6c44:	       move.l 318(sp),d1
    6c48:	       move.l 314(sp),d2
    6c4c:	       jsr -30(a6)
    6c50:	       move.l d0,310(sp)
    6c54:	       move.l 310(sp),d0
    6c58:	       move.l d0,306(sp)

	if (! fp) {
    6c5c:	   ,-- bne.s 6cb8 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6c5e:	   |   move.l 1c950 <DOSBase>,d0
    6c64:	   |   movea.l d0,a6
    6c66:	   |   jsr -60(a6)
    6c6a:	   |   move.l d0,154(sp)
    6c6e:	   |   move.l 154(sp),d0
    6c72:	   |   move.l d0,150(sp)
    6c76:	   |   move.l #100831,146(sp)
    6c7e:	   |   moveq #31,d0
    6c80:	   |   move.l d0,142(sp)
    6c84:	   |   move.l 1c950 <DOSBase>,d0
    6c8a:	   |   movea.l d0,a6
    6c8c:	   |   move.l 150(sp),d1
    6c90:	   |   move.l 146(sp),d2
    6c94:	   |   move.l 142(sp),d3
    6c98:	   |   jsr -48(a6)
    6c9c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6ca0:	   |   move.l 328(sp),-(sp)
    6ca4:	   |   pea 189ff <PutChar+0xea3>
    6caa:	   |   jsr 170ba <KPrintF>
    6cb0:	   |   addq.l #8,sp
		return NULL;
    6cb2:	   |   moveq #0,d0
    6cb4:	,--|-- bra.w 6f78 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6cb8:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6cbc:	|      move.l 306(sp),302(sp)
    6cc2:	|      move.l 1c950 <DOSBase>,d0
    6cc8:	|      movea.l d0,a6
    6cca:	|      move.l 302(sp),d1
    6cce:	|      jsr -306(a6)
    6cd2:	|      move.l d0,298(sp)
    6cd6:	|      move.l 298(sp),d0
    6cda:	|      moveq #83,d1
    6cdc:	|      cmp.l d0,d1
    6cde:	|  ,-- beq.s 6ce6 <openAndVerify+0xd4>
    6ce0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6ce6:	|  '-> move.l 306(sp),294(sp)
    6cec:	|      move.l 1c950 <DOSBase>,d0
    6cf2:	|      movea.l d0,a6
    6cf4:	|      move.l 294(sp),d1
    6cf8:	|      jsr -306(a6)
    6cfc:	|      move.l d0,290(sp)
    6d00:	|      move.l 290(sp),d0
    6d04:	|      moveq #76,d1
    6d06:	|      cmp.l d0,d1
    6d08:	|  ,-- beq.s 6d10 <openAndVerify+0xfe>
    6d0a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6d10:	|  '-> move.l 306(sp),286(sp)
    6d16:	|      move.l 1c950 <DOSBase>,d0
    6d1c:	|      movea.l d0,a6
    6d1e:	|      move.l 286(sp),d1
    6d22:	|      jsr -306(a6)
    6d26:	|      move.l d0,282(sp)
    6d2a:	|      move.l 282(sp),d0
    6d2e:	|      moveq #85,d1
    6d30:	|      cmp.l d0,d1
    6d32:	|  ,-- beq.s 6d3a <openAndVerify+0x128>
    6d34:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6d3a:	|  '-> move.l 306(sp),278(sp)
    6d40:	|      move.l 1c950 <DOSBase>,d0
    6d46:	|      movea.l d0,a6
    6d48:	|      move.l 278(sp),d1
    6d4c:	|      jsr -306(a6)
    6d50:	|      move.l d0,274(sp)
    6d54:	|      move.l 274(sp),d0
    6d58:	|      moveq #68,d1
    6d5a:	|      cmp.l d0,d1
    6d5c:	|  ,-- beq.s 6d64 <openAndVerify+0x152>
    6d5e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6d64:	|  '-> move.l 306(sp),270(sp)
    6d6a:	|      move.l 1c950 <DOSBase>,d0
    6d70:	|      movea.l d0,a6
    6d72:	|      move.l 270(sp),d1
    6d76:	|      jsr -306(a6)
    6d7a:	|      move.l d0,266(sp)
    6d7e:	|      move.l 266(sp),d1
    6d82:	|      move.b 16(sp),d0
    6d86:	|      ext.w d0
    6d88:	|      movea.w d0,a0
    6d8a:	|      cmpa.l d1,a0
    6d8c:	|  ,-- beq.s 6d94 <openAndVerify+0x182>
    6d8e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6d94:	|  '-> move.l 306(sp),262(sp)
    6d9a:	|      move.l 1c950 <DOSBase>,d0
    6da0:	|      movea.l d0,a6
    6da2:	|      move.l 262(sp),d1
    6da6:	|      jsr -306(a6)
    6daa:	|      move.l d0,258(sp)
    6dae:	|      move.l 258(sp),d1
    6db2:	|      move.b 14(sp),d0
    6db6:	|      ext.w d0
    6db8:	|      movea.w d0,a0
    6dba:	|      cmpa.l d1,a0
    6dbc:	|  ,-- beq.s 6dc4 <openAndVerify+0x1b2>
    6dbe:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6dc4:	|  '-> tst.w 322(sp)
    6dc8:	|  ,-- beq.s 6e20 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6dca:	|  |   move.l 1c950 <DOSBase>,d0
    6dd0:	|  |   movea.l d0,a6
    6dd2:	|  |   jsr -60(a6)
    6dd6:	|  |   move.l d0,174(sp)
    6dda:	|  |   move.l 174(sp),d0
    6dde:	|  |   move.l d0,170(sp)
    6de2:	|  |   move.l #100894,166(sp)
    6dea:	|  |   moveq #31,d0
    6dec:	|  |   move.l d0,162(sp)
    6df0:	|  |   move.l 1c950 <DOSBase>,d0
    6df6:	|  |   movea.l d0,a6
    6df8:	|  |   move.l 170(sp),d1
    6dfc:	|  |   move.l 166(sp),d2
    6e00:	|  |   move.l 162(sp),d3
    6e04:	|  |   jsr -48(a6)
    6e08:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6e0c:	|  |   pea 18a1e <PutChar+0xec2>
    6e12:	|  |   jsr 170ba <KPrintF>
    6e18:	|  |   addq.l #4,sp
		return NULL;
    6e1a:	|  |   moveq #0,d0
    6e1c:	+--|-- bra.w 6f78 <openAndVerify+0x366>
	}
	FGetC (fp);
    6e20:	|  '-> move.l 306(sp),254(sp)
    6e26:	|      move.l 1c950 <DOSBase>,d0
    6e2c:	|      movea.l d0,a6
    6e2e:	|      move.l 254(sp),d1
    6e32:	|      jsr -306(a6)
    6e36:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6e3a:	|      nop
    6e3c:	|  ,-> move.l 306(sp),246(sp)
    6e42:	|  |   move.l 1c950 <DOSBase>,d0
    6e48:	|  |   movea.l d0,a6
    6e4a:	|  |   move.l 246(sp),d1
    6e4e:	|  |   jsr -306(a6)
    6e52:	|  |   move.l d0,242(sp)
    6e56:	|  |   move.l 242(sp),d0
    6e5a:	|  '-- bne.s 6e3c <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6e5c:	|      move.l 306(sp),238(sp)
    6e62:	|      move.l 1c950 <DOSBase>,d0
    6e68:	|      movea.l d0,a6
    6e6a:	|      move.l 238(sp),d1
    6e6e:	|      jsr -306(a6)
    6e72:	|      move.l d0,234(sp)
    6e76:	|      move.l 234(sp),d0
    6e7a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6e7e:	|      move.l 306(sp),226(sp)
    6e84:	|      move.l 1c950 <DOSBase>,d0
    6e8a:	|      movea.l d0,a6
    6e8c:	|      move.l 226(sp),d1
    6e90:	|      jsr -306(a6)
    6e94:	|      move.l d0,222(sp)
    6e98:	|      move.l 222(sp),d0
    6e9c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6ea0:	|      move.l 230(sp),d0
    6ea4:	|      lsl.l #8,d0
    6ea6:	|      add.l 218(sp),d0
    6eaa:	|      movea.l 344(sp),a0
    6eae:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6eb0:	|      movea.l 344(sp),a0
    6eb4:	|      move.l (a0),d0
    6eb6:	|      cmpi.l #514,d0
    6ebc:	|  ,-- ble.s 6f12 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6ebe:	|  |   move.l 1c950 <DOSBase>,d0
    6ec4:	|  |   movea.l d0,a6
    6ec6:	|  |   jsr -60(a6)
    6eca:	|  |   move.l d0,194(sp)
    6ece:	|  |   move.l 194(sp),d0
    6ed2:	|  |   move.l d0,190(sp)
    6ed6:	|  |   move.l #100921,186(sp)
    6ede:	|  |   moveq #100,d1
    6ee0:	|  |   move.l d1,182(sp)
    6ee4:	|  |   move.l 1c950 <DOSBase>,d0
    6eea:	|  |   movea.l d0,a6
    6eec:	|  |   move.l 190(sp),d1
    6ef0:	|  |   move.l 186(sp),d2
    6ef4:	|  |   move.l 182(sp),d3
    6ef8:	|  |   jsr -48(a6)
    6efc:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6f00:	|  |   pea 18a39 <PutChar+0xedd>
    6f06:	|  |   jsr 170ba <KPrintF>
    6f0c:	|  |   addq.l #4,sp
		return NULL;
    6f0e:	|  |   moveq #0,d0
    6f10:	+--|-- bra.s 6f78 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6f12:	|  '-> movea.l 344(sp),a0
    6f16:	|      move.l (a0),d0
    6f18:	|      cmpi.l #257,d0
    6f1e:	|  ,-- bgt.s 6f74 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6f20:	|  |   move.l 1c950 <DOSBase>,d0
    6f26:	|  |   movea.l d0,a6
    6f28:	|  |   jsr -60(a6)
    6f2c:	|  |   move.l d0,214(sp)
    6f30:	|  |   move.l 214(sp),d0
    6f34:	|  |   move.l d0,210(sp)
    6f38:	|  |   move.l #100990,206(sp)
    6f40:	|  |   moveq #100,d0
    6f42:	|  |   move.l d0,202(sp)
    6f46:	|  |   move.l 1c950 <DOSBase>,d0
    6f4c:	|  |   movea.l d0,a6
    6f4e:	|  |   move.l 210(sp),d1
    6f52:	|  |   move.l 206(sp),d2
    6f56:	|  |   move.l 202(sp),d3
    6f5a:	|  |   jsr -48(a6)
    6f5e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6f62:	|  |   pea 18a7e <PutChar+0xf22>
    6f68:	|  |   jsr 170ba <KPrintF>
    6f6e:	|  |   addq.l #4,sp
		return NULL;
    6f70:	|  |   moveq #0,d0
    6f72:	+--|-- bra.s 6f78 <openAndVerify+0x366>
	}
	return fp;
    6f74:	|  '-> move.l 306(sp),d0
}
    6f78:	'----> movem.l (sp)+,d2-d3/a6
    6f7c:	       lea 312(sp),sp
    6f80:	       rts

00006f82 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6f82:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6f84:	          move.l #116960,(sp)
	while (* huntAndDestroy) {
    6f8a:	   ,----- bra.s 6fb6 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6f8c:	,--|----> movea.l (sp),a0
    6f8e:	|  |      move.l (a0),d0
    6f90:	|  |      cmp.l 8(sp),d0
    6f94:	|  |  ,-- bne.s 6fac <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6f96:	|  |  |   movea.l (sp),a0
    6f98:	|  |  |   movea.l (a0),a0
    6f9a:	|  |  |   move.l 44(a0),d0
    6f9e:	|  |  |   movea.l (sp),a0
    6fa0:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6fa2:	|  |  |   movea.l 8(sp),a0
    6fa6:	|  |  |   clr.l 44(a0)
    6faa:	|  +--|-- bra.s 6fb6 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6fac:	|  |  '-> movea.l (sp),a0
    6fae:	|  |      move.l (a0),d0
    6fb0:	|  |      moveq #44,d1
    6fb2:	|  |      add.l d0,d1
    6fb4:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6fb6:	|  '----> movea.l (sp),a0
    6fb8:	|         move.l (a0),d0
    6fba:	'-------- bne.s 6f8c <pauseFunction+0xa>
		}
	}
}
    6fbc:	          nop
    6fbe:	          nop
    6fc0:	          addq.l #4,sp
    6fc2:	          rts

00006fc4 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6fc4:	move.l 1c8e0 <allRunningFunctions>,d0
    6fca:	movea.l 4(sp),a0
    6fce:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6fd2:	move.l 4(sp),1c8e0 <allRunningFunctions>
}
    6fda:	nop
    6fdc:	rts

00006fde <runSludge>:

BOOL runSludge () {
    6fde:	                   lea -12(sp),sp
    6fe2:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6fe4:	                   move.l 1c8e0 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    6fec:	      ,----------- bra.s 7068 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6fee:	   ,--|----------> movea.l 12(sp),a0
    6ff2:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6ff8:	   |  |            movea.l 12(sp),a0
    6ffc:	   |  |            move.b 56(a0),d0
    7000:	   |  |  ,-------- bne.s 7062 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7002:	   |  |  |         movea.l 12(sp),a0
    7006:	   |  |  |         move.l 12(a0),d0
    700a:	   |  |  |  ,----- beq.s 7034 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    700c:	   |  |  |  |      movea.l 12(sp),a0
    7010:	   |  |  |  |      move.l 12(a0),d0
    7014:	   |  |  |  |  ,-- bpl.s 7020 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7016:	   |  |  |  |  |   movea.l 12(sp),a0
    701a:	   |  |  |  |  |   clr.l 12(a0)
    701e:	   |  |  +--|--|-- bra.s 7062 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7020:	   |  |  |  |  '-> movea.l 12(sp),a0
    7024:	   |  |  |  |      move.l 12(a0),d0
    7028:	   |  |  |  |      subq.l #1,d0
				} else if (
    702a:	   |  |  |  |      movea.l 12(sp),a0
    702e:	   |  |  |  |      move.l d0,12(a0)
    7032:	   |  |  +--|----- bra.s 7062 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7034:	   |  |  |  '----> movea.l 12(sp),a0
    7038:	   |  |  |         move.w 50(a0),d0
    703c:	   |  |  |     ,-- beq.s 704c <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    703e:	   |  |  |     |   movea.l 12(sp),a0
    7042:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7046:	   |  |  |     |   jsr 3d88 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    704c:	   |  |  |     '-> move.l 12(sp),-(sp)
    7050:	   |  |  |         jsr 4f98 <continueFunction>
    7056:	   |  |  |         addq.l #4,sp
    7058:	   |  |  |         tst.w d0
    705a:	   |  |  +-------- bne.s 7062 <runSludge+0x84>
					return FALSE;
    705c:	   |  |  |         clr.w d0
    705e:	,--|--|--|-------- bra.w 70ee <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7062:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    7068:	|  |  '----------> tst.l 12(sp)
    706c:	|  '-------------- bne.s 6fee <runSludge+0x10>
	}

	if (loadNow) {
    706e:	|                  move.l 1c914 <loadNow>,d0
    7074:	|        ,-------- beq.s 70ec <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7076:	|        |         movea.l 1c914 <loadNow>,a0
    707c:	|        |         move.b (a0),d0
    707e:	|        |         cmpi.b #58,d0
    7082:	|        |  ,----- bne.s 70b6 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7084:	|        |  |      move.l 1c914 <loadNow>,d0
    708a:	|        |  |      addq.l #1,d0
    708c:	|        |  |      move.l d0,-(sp)
    708e:	|        |  |      jsr c4fc <saveGame>
    7094:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7096:	|        |  |      movea.l 1ca0e <saverFunc>,a0
    709c:	|        |  |      lea 28(a0),a0
    70a0:	|        |  |      pea 1 <_start+0x1>
    70a4:	|        |  |      pea 1 <_start+0x1>
    70a8:	|        |  |      move.l a0,-(sp)
    70aa:	|        |  |      jsr 14ecc <setVariable>
    70b0:	|        |  |      lea 12(sp),sp
    70b4:	|        |  |  ,-- bra.s 70ce <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    70b6:	|        |  '--|-> move.l 1c914 <loadNow>,d0
    70bc:	|        |     |   move.l d0,-(sp)
    70be:	|        |     |   jsr c044 <loadGame>
    70c4:	|        |     |   addq.l #4,sp
    70c6:	|        |     |   tst.w d0
    70c8:	|        |     +-- bne.s 70ce <runSludge+0xf0>
    70ca:	|        |     |   clr.w d0
    70cc:	+--------|-----|-- bra.s 70ee <runSludge+0x110>
		}
		FreeVec(loadNow);
    70ce:	|        |     '-> move.l 1c914 <loadNow>,8(sp)
    70d6:	|        |         move.l 1c948 <SysBase>,d0
    70dc:	|        |         movea.l d0,a6
    70de:	|        |         movea.l 8(sp),a1
    70e2:	|        |         jsr -690(a6)
		loadNow = NULL;
    70e6:	|        |         clr.l 1c914 <loadNow>
	}

	return TRUE;
    70ec:	|        '-------> moveq #1,d0
}
    70ee:	'----------------> movea.l (sp)+,a6
    70f0:	                   lea 12(sp),sp
    70f4:	                   rts

000070f6 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    70f6:	movea.l 1c2b8 <currentEvents>,a0
    70fc:	move.l (a0),d0
    70fe:	move.l 4(sp),-(sp)
    7102:	move.l d0,-(sp)
    7104:	jsr 8d0 <put2bytes>
    710a:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    710c:	movea.l 1c2b8 <currentEvents>,a0
    7112:	move.l 4(a0),d0
    7116:	move.l 4(sp),-(sp)
    711a:	move.l d0,-(sp)
    711c:	jsr 8d0 <put2bytes>
    7122:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7124:	movea.l 1c2b8 <currentEvents>,a0
    712a:	move.l 8(a0),d0
    712e:	move.l 4(sp),-(sp)
    7132:	move.l d0,-(sp)
    7134:	jsr 8d0 <put2bytes>
    713a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    713c:	movea.l 1c2b8 <currentEvents>,a0
    7142:	move.l 12(a0),d0
    7146:	move.l 4(sp),-(sp)
    714a:	move.l d0,-(sp)
    714c:	jsr 8d0 <put2bytes>
    7152:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7154:	movea.l 1c2b8 <currentEvents>,a0
    715a:	move.l 16(a0),d0
    715e:	move.l 4(sp),-(sp)
    7162:	move.l d0,-(sp)
    7164:	jsr 8d0 <put2bytes>
    716a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    716c:	movea.l 1c2b8 <currentEvents>,a0
    7172:	move.l 20(a0),d0
    7176:	move.l 4(sp),-(sp)
    717a:	move.l d0,-(sp)
    717c:	jsr 8d0 <put2bytes>
    7182:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7184:	movea.l 1c2b8 <currentEvents>,a0
    718a:	move.l 24(a0),d0
    718e:	move.l 4(sp),-(sp)
    7192:	move.l d0,-(sp)
    7194:	jsr 8d0 <put2bytes>
    719a:	addq.l #8,sp
}
    719c:	nop
    719e:	rts

000071a0 <sludgeDisplay>:

void sludgeDisplay () {					
    71a0:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    71a2:	move.l #14675968,(sp)
	displayCursor();
    71a8:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    71ae:	jsr 14f4 <CstDrawBackdrop>
	CstRestoreScreen();
    71b4:	jsr 290c <CstRestoreScreen>
	drawPeople();
    71ba:	jsr 9d7e <drawPeople>
	CstSwapBuffer();
    71c0:	jsr 34f2 <CstSwapBuffer>
}
    71c6:	nop
    71c8:	addq.l #4,sp
    71ca:	rts

000071cc <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    71cc:	      ,-- bra.s 71ec <stackSetByIndex+0x20>
		vS = vS->next;
    71ce:	,-----|-> movea.l 4(sp),a0
    71d2:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    71d8:	|     +-- bne.s 71ec <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    71da:	|     |   pea 18ac5 <PutChar+0xf69>
    71e0:	|     |   jsr 170ba <KPrintF>
    71e6:	|     |   addq.l #4,sp
			return FALSE;
    71e8:	|     |   clr.w d0
    71ea:	|  ,--|-- bra.s 720e <stackSetByIndex+0x42>
	while (theIndex--) {
    71ec:	|  |  '-> move.l 8(sp),d0
    71f0:	|  |      move.l d0,d1
    71f2:	|  |      subq.l #1,d1
    71f4:	|  |      move.l d1,8(sp)
    71f8:	|  |      tst.l d0
    71fa:	'--|----- bne.s 71ce <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    71fc:	   |      move.l 4(sp),d0
    7200:	   |      move.l d0,-(sp)
    7202:	   |      move.l 16(sp),-(sp)
    7206:	   |      jsr 14a94 <copyVariable>
    720c:	   |      addq.l #8,sp
}
    720e:	   '----> rts

00007210 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7210:	             lea -24(sp),sp
    7214:	             move.l a6,-(sp)
    7216:	             move.l 48(sp),d0
    721a:	             move.w d0,d0
    721c:	             move.w d0,6(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7220:	             moveq #58,d0
    7222:	             move.l d0,24(sp)
    7226:	             clr.l 20(sp)
    722a:	             move.l 1c948 <SysBase>,d0
    7230:	             movea.l d0,a6
    7232:	             move.l 24(sp),d0
    7236:	             move.l 20(sp),d1
    723a:	             jsr -684(a6)
    723e:	             move.l d0,16(sp)
    7242:	             move.l 16(sp),d0
    7246:	             move.l d0,12(sp)
	if(!newFunc) {
    724a:	         ,-- bne.s 7260 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    724c:	         |   pea 18ade <PutChar+0xf82>
    7252:	         |   jsr 170ba <KPrintF>
    7258:	         |   addq.l #4,sp
		return 0;
    725a:	         |   moveq #0,d0
    725c:	,--------|-- bra.w 738e <startNewFunctionNum+0x17e>
	}
	if(funcNum == 145) {
    7260:	|        '-> cmpi.l #145,32(sp)
    7268:	|        ,-- bne.s 7278 <startNewFunctionNum+0x68>
		KPrintF("startNewFunction: funcNum 145");
    726a:	|        |   pea 18b07 <PutChar+0xfab>
    7270:	|        |   jsr 170ba <KPrintF>
    7276:	|        |   addq.l #4,sp
	}


	newFunc -> originalNumber = funcNum;
    7278:	|        '-> move.l 32(sp),d0
    727c:	|            movea.l 12(sp),a0
    7280:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    7282:	|            move.l 12(sp),-(sp)
    7286:	|            jsr 6980 <loadFunctionCode>
    728c:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    728e:	|            movea.l 12(sp),a0
    7292:	|            move.l 16(a0),d1
    7296:	|            move.l 36(sp),d0
    729a:	|            cmp.l d1,d0
    729c:	|        ,-- beq.s 72b2 <startNewFunctionNum+0xa2>
		KPrintF("Wrong number of parameters!");
    729e:	|        |   pea 18b25 <PutChar+0xfc9>
    72a4:	|        |   jsr 170ba <KPrintF>
    72aa:	|        |   addq.l #4,sp
		return NULL; 
    72ac:	|        |   moveq #0,d0
    72ae:	+--------|-- bra.w 738e <startNewFunctionNum+0x17e>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    72b2:	|        '-> movea.l 12(sp),a0
    72b6:	|            move.l 16(a0),d1
    72ba:	|            movea.l 12(sp),a0
    72be:	|            move.l 8(a0),d0
    72c2:	|            cmp.l d1,d0
    72c4:	|  ,-------- bge.s 732e <startNewFunctionNum+0x11e>
		KPrintF ("More arguments than local variable space!");
    72c6:	|  |         pea 18b41 <PutChar+0xfe5>
    72cc:	|  |         jsr 170ba <KPrintF>
    72d2:	|  |         addq.l #4,sp
		return NULL; 
    72d4:	|  |         moveq #0,d0
    72d6:	+--|-------- bra.w 738e <startNewFunctionNum+0x17e>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    72da:	|  |  ,----> movea.l 44(sp),a0
    72de:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    72e2:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    72e6:	|  |  |      movea.l 44(sp),a0
    72ea:	|  |  |      move.l (a0),d0
    72ec:	|  |  |  ,-- bne.s 7302 <startNewFunctionNum+0xf2>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    72ee:	|  |  |  |   pea 18b6b <PutChar+0x100f>
    72f4:	|  |  |  |   jsr 170ba <KPrintF>
    72fa:	|  |  |  |   addq.l #4,sp
			return NULL;
    72fc:	|  |  |  |   moveq #0,d0
    72fe:	+--|--|--|-- bra.w 738e <startNewFunctionNum+0x17e>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7302:	|  |  |  '-> movea.l 12(sp),a0
    7306:	|  |  |      move.l 20(a0),d1
    730a:	|  |  |      move.l 36(sp),d0
    730e:	|  |  |      lsl.l #3,d0
    7310:	|  |  |      add.l d0,d1
    7312:	|  |  |      move.l 8(sp),d0
    7316:	|  |  |      move.l d1,-(sp)
    7318:	|  |  |      move.l d0,-(sp)
    731a:	|  |  |      jsr 14a94 <copyVariable>
    7320:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7322:	|  |  |      move.l 44(sp),-(sp)
    7326:	|  |  |      jsr 14f5e <trimStack>
    732c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    732e:	|  '--|----> tst.l 36(sp)
    7332:	|     '----- bne.s 72da <startNewFunctionNum+0xca>
	}

	newFunc -> cancelMe = FALSE;
    7334:	|            movea.l 12(sp),a0
    7338:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    733c:	|            movea.l 12(sp),a0
    7340:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7344:	|            movea.l 12(sp),a0
    7348:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    734e:	|            movea.l 12(sp),a0
    7352:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    7358:	|            movea.l 12(sp),a0
    735c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7360:	|            movea.l 12(sp),a0
    7364:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7368:	|            movea.l 12(sp),a0
    736c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7370:	|            movea.l 12(sp),a0
    7374:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7378:	|            movea.l 12(sp),a0
    737c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7380:	|            move.l 12(sp),-(sp)
    7384:	|            jsr 6fc4 <restartFunction>
    738a:	|            addq.l #4,sp
	return 1;
    738c:	|            moveq #1,d0
}
    738e:	'----------> movea.l (sp)+,a6
    7390:	             lea 24(sp),sp
    7394:	             rts

00007396 <unfreezeSubs>:

void unfreezeSubs () {
    7396:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7398:	          move.l 1c8e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    739e:	   ,----- bra.s 73bc <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    73a0:	,--|----> movea.l (sp),a0
    73a2:	|  |      move.b 56(a0),d0
    73a6:	|  |  ,-- beq.s 73b6 <unfreezeSubs+0x20>
    73a8:	|  |  |   movea.l (sp),a0
    73aa:	|  |  |   move.b 56(a0),d0
    73ae:	|  |  |   subq.b #1,d0
    73b0:	|  |  |   movea.l (sp),a0
    73b2:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    73b6:	|  |  '-> movea.l (sp),a0
    73b8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    73bc:	|  '----> tst.l (sp)
    73be:	'-------- bne.s 73a0 <unfreezeSubs+0xa>
	}
}
    73c0:	          nop
    73c2:	          nop
    73c4:	          addq.l #4,sp
    73c6:	          rts

000073c8 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    73c8:	clr.w 1c2c4 <sliceBusy>
}
    73ce:	nop
    73d0:	rts

000073d2 <getNumberedString>:

char * getNumberedString (int value) {
    73d2:	       lea -56(sp),sp
    73d6:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    73da:	       move.w 1c2c4 <sliceBusy>,d0
    73e0:	   ,-- beq.s 742a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    73e2:	   |   move.l 1c950 <DOSBase>,d0
    73e8:	   |   movea.l d0,a6
    73ea:	   |   jsr -60(a6)
    73ee:	   |   move.l d0,28(sp)
    73f2:	   |   move.l 28(sp),d0
    73f6:	   |   move.l d0,24(sp)
    73fa:	   |   move.l #101302,20(sp)
    7402:	   |   moveq #76,d0
    7404:	   |   move.l d0,16(sp)
    7408:	   |   move.l 1c950 <DOSBase>,d0
    740e:	   |   movea.l d0,a6
    7410:	   |   move.l 24(sp),d1
    7414:	   |   move.l 20(sp),d2
    7418:	   |   move.l 16(sp),d3
    741c:	   |   jsr -48(a6)
    7420:	   |   move.l d0,12(sp)
		return NULL;
    7424:	   |   moveq #0,d0
    7426:	,--|-- bra.w 74c6 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    742a:	|  '-> move.l 1c930 <bigDataFile>,64(sp)
    7432:	|      move.l 72(sp),d0
    7436:	|      add.l d0,d0
    7438:	|      add.l d0,d0
    743a:	|      move.l d0,d1
    743c:	|      move.l 1c93c <startOfTextIndex>,d0
    7442:	|      add.l d1,d0
    7444:	|      move.l d0,60(sp)
    7448:	|      moveq #-1,d0
    744a:	|      move.l d0,56(sp)
    744e:	|      move.l 1c950 <DOSBase>,d0
    7454:	|      movea.l d0,a6
    7456:	|      move.l 64(sp),d1
    745a:	|      move.l 60(sp),d2
    745e:	|      move.l 56(sp),d3
    7462:	|      jsr -66(a6)
    7466:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    746a:	|      move.l 1c930 <bigDataFile>,d0
    7470:	|      move.l d0,-(sp)
    7472:	|      jsr 718 <get4bytes>
    7478:	|      addq.l #4,sp
    747a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    747e:	|      move.l 1c930 <bigDataFile>,48(sp)
    7486:	|      move.l 72(sp),44(sp)
    748c:	|      moveq #-1,d0
    748e:	|      move.l d0,40(sp)
    7492:	|      move.l 1c950 <DOSBase>,d0
    7498:	|      movea.l d0,a6
    749a:	|      move.l 48(sp),d1
    749e:	|      move.l 44(sp),d2
    74a2:	|      move.l 40(sp),d3
    74a6:	|      jsr -66(a6)
    74aa:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    74ae:	|      move.l 1c930 <bigDataFile>,d0
    74b4:	|      move.l d0,-(sp)
    74b6:	|      jsr b02 <readString>
    74bc:	|      addq.l #4,sp
    74be:	|      move.l d0,32(sp)
	
	return s;
    74c2:	|      move.l 32(sp),d0
}
    74c6:	'----> movem.l (sp)+,d2-d3/a6
    74ca:	       lea 56(sp),sp
    74ce:	       rts

000074d0 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    74d0:	       lea -32(sp),sp
    74d4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    74d8:	       move.w 1c2c4 <sliceBusy>,d0
    74de:	   ,-- beq.s 74fa <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    74e0:	   |   pea 18c03 <PutChar+0x10a7>
    74e6:	   |   pea 18c21 <PutChar+0x10c5>
    74ec:	   |   jsr 170ba <KPrintF>
    74f2:	   |   addq.l #8,sp
		return 0;
    74f4:	   |   moveq #0,d0
    74f6:	,--|-- bra.w 758e <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    74fa:	|  '-> move.l 1c930 <bigDataFile>,40(sp)
    7502:	|      move.l 48(sp),d0
    7506:	|      add.l d0,d0
    7508:	|      add.l d0,d0
    750a:	|      move.l d0,d1
    750c:	|      move.l 1c938 <startOfDataIndex>,d0
    7512:	|      add.l d1,d0
    7514:	|      move.l d0,36(sp)
    7518:	|      moveq #-1,d0
    751a:	|      move.l d0,32(sp)
    751e:	|      move.l 1c950 <DOSBase>,d0
    7524:	|      movea.l d0,a6
    7526:	|      move.l 40(sp),d1
    752a:	|      move.l 36(sp),d2
    752e:	|      move.l 32(sp),d3
    7532:	|      jsr -66(a6)
    7536:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    753a:	|      move.l 1c930 <bigDataFile>,24(sp)
    7542:	|      move.l 1c930 <bigDataFile>,d0
    7548:	|      move.l d0,-(sp)
    754a:	|      jsr 718 <get4bytes>
    7550:	|      addq.l #4,sp
    7552:	|      move.l d0,20(sp)
    7556:	|      clr.l 16(sp)
    755a:	|      move.l 1c950 <DOSBase>,d0
    7560:	|      movea.l d0,a6
    7562:	|      move.l 24(sp),d1
    7566:	|      move.l 20(sp),d2
    756a:	|      move.l 16(sp),d3
    756e:	|      jsr -66(a6)
    7572:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7576:	|      move.w #1,1c2c4 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    757e:	|      move.l 1c930 <bigDataFile>,d0
    7584:	|      move.l d0,-(sp)
    7586:	|      jsr 718 <get4bytes>
    758c:	|      addq.l #4,sp
}
    758e:	'----> movem.l (sp)+,d2-d3/a6
    7592:	       lea 32(sp),sp
    7596:	       rts

00007598 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7598:	       lea -32(sp),sp
    759c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    75a0:	       move.w 1c2c4 <sliceBusy>,d0
    75a6:	   ,-- beq.s 75c2 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    75a8:	   |   pea 18c03 <PutChar+0x10a7>
    75ae:	   |   pea 18c21 <PutChar+0x10c5>
    75b4:	   |   jsr 170ba <KPrintF>
    75ba:	   |   addq.l #8,sp
        return FALSE;
    75bc:	   |   clr.w d0
    75be:	,--|-- bra.w 764e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    75c2:	|  '-> move.l 1c930 <bigDataFile>,40(sp)
    75ca:	|      move.l 48(sp),d0
    75ce:	|      add.l d0,d0
    75d0:	|      add.l d0,d0
    75d2:	|      move.l d0,d1
    75d4:	|      move.l 1c944 <startOfObjectIndex>,d0
    75da:	|      add.l d1,d0
    75dc:	|      move.l d0,36(sp)
    75e0:	|      moveq #-1,d0
    75e2:	|      move.l d0,32(sp)
    75e6:	|      move.l 1c950 <DOSBase>,d0
    75ec:	|      movea.l d0,a6
    75ee:	|      move.l 40(sp),d1
    75f2:	|      move.l 36(sp),d2
    75f6:	|      move.l 32(sp),d3
    75fa:	|      jsr -66(a6)
    75fe:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7602:	|      move.l 1c930 <bigDataFile>,24(sp)
    760a:	|      move.l 1c930 <bigDataFile>,d0
    7610:	|      move.l d0,-(sp)
    7612:	|      jsr 718 <get4bytes>
    7618:	|      addq.l #4,sp
    761a:	|      move.l d0,20(sp)
    761e:	|      moveq #-1,d0
    7620:	|      move.l d0,16(sp)
    7624:	|      move.l 1c950 <DOSBase>,d0
    762a:	|      movea.l d0,a6
    762c:	|      move.l 24(sp),d1
    7630:	|      move.l 20(sp),d2
    7634:	|      move.l 16(sp),d3
    7638:	|      jsr -66(a6)
    763c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7640:	|      move.w #1,1c2c4 <sliceBusy>
    7648:	|      move.w 1c2c4 <sliceBusy>,d0
}
    764e:	'----> movem.l (sp)+,d2-d3/a6
    7652:	       lea 32(sp),sp
    7656:	       rts

00007658 <openSubSlice>:

BOOL openSubSlice (int num) {
    7658:	       lea -32(sp),sp
    765c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7660:	       move.w 1c2c4 <sliceBusy>,d0
    7666:	   ,-- beq.s 7682 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7668:	   |   pea 18c03 <PutChar+0x10a7>
    766e:	   |   pea 18c21 <PutChar+0x10c5>
    7674:	   |   jsr 170ba <KPrintF>
    767a:	   |   addq.l #8,sp
		return FALSE;
    767c:	   |   clr.w d0
    767e:	,--|-- bra.w 770e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7682:	|  '-> move.l 1c930 <bigDataFile>,40(sp)
    768a:	|      move.l 48(sp),d0
    768e:	|      add.l d0,d0
    7690:	|      add.l d0,d0
    7692:	|      move.l d0,d1
    7694:	|      move.l 1c940 <startOfSubIndex>,d0
    769a:	|      add.l d1,d0
    769c:	|      move.l d0,36(sp)
    76a0:	|      moveq #-1,d0
    76a2:	|      move.l d0,32(sp)
    76a6:	|      move.l 1c950 <DOSBase>,d0
    76ac:	|      movea.l d0,a6
    76ae:	|      move.l 40(sp),d1
    76b2:	|      move.l 36(sp),d2
    76b6:	|      move.l 32(sp),d3
    76ba:	|      jsr -66(a6)
    76be:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    76c2:	|      move.l 1c930 <bigDataFile>,24(sp)
    76ca:	|      move.l 1c930 <bigDataFile>,d0
    76d0:	|      move.l d0,-(sp)
    76d2:	|      jsr 718 <get4bytes>
    76d8:	|      addq.l #4,sp
    76da:	|      move.l d0,20(sp)
    76de:	|      moveq #-1,d0
    76e0:	|      move.l d0,16(sp)
    76e4:	|      move.l 1c950 <DOSBase>,d0
    76ea:	|      movea.l d0,a6
    76ec:	|      move.l 24(sp),d1
    76f0:	|      move.l 20(sp),d2
    76f4:	|      move.l 16(sp),d3
    76f8:	|      jsr -66(a6)
    76fc:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7700:	|      move.w #1,1c2c4 <sliceBusy>
    7708:	|      move.w 1c2c4 <sliceBusy>,d0
}
    770e:	'----> movem.l (sp)+,d2-d3/a6
    7712:	       lea 32(sp),sp
    7716:	       rts

00007718 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7718:	       lea -180(sp),sp
    771c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7720:	       tst.l 196(sp)
    7724:	,----- beq.s 7764 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7726:	|      move.l 196(sp),1c930 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    772e:	|      move.l 196(sp),168(sp)
    7734:	|      clr.l 164(sp)
    7738:	|      clr.l 160(sp)
    773c:	|      move.l 1c950 <DOSBase>,d0
    7742:	|      movea.l d0,a6
    7744:	|      move.l 168(sp),d1
    7748:	|      move.l 164(sp),d2
    774c:	|      move.l 160(sp),d3
    7750:	|      jsr -66(a6)
    7754:	|      move.l d0,156(sp)
    7758:	|      move.l 156(sp),d0
    775c:	|      move.l d0,1c934 <startIndex>
    7762:	|  ,-- bra.s 779e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7764:	'--|-> move.l 1c930 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    776c:	   |   move.l 196(sp),184(sp)
    7772:	   |   move.l 1c934 <startIndex>,d0
    7778:	   |   move.l d0,180(sp)
    777c:	   |   moveq #-1,d0
    777e:	   |   move.l d0,176(sp)
    7782:	   |   move.l 1c950 <DOSBase>,d0
    7788:	   |   movea.l d0,a6
    778a:	   |   move.l 184(sp),d1
    778e:	   |   move.l 180(sp),d2
    7792:	   |   move.l 176(sp),d3
    7796:	   |   jsr -66(a6)
    779a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    779e:	   '-> clr.w 1c2c4 <sliceBusy>

	if (skipBefore > numLanguages) {
    77a4:	       move.l 204(sp),d0
    77a8:	       cmp.l 200(sp),d0
    77ac:	   ,-- bls.s 77c0 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    77ae:	   |   pea 18c3b <PutChar+0x10df>
    77b4:	   |   jsr 170ba <KPrintF>
    77ba:	   |   addq.l #4,sp
		skipBefore = 0;
    77bc:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    77c0:	   '-> move.l 200(sp),d0
    77c4:	       sub.l 204(sp),d0
    77c8:	       move.l d0,188(sp)
	while (skipBefore) {
    77cc:	   ,-- bra.s 780a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    77ce:	,--|-> move.l 196(sp),24(sp)
    77d4:	|  |   move.l 196(sp),-(sp)
    77d8:	|  |   jsr 718 <get4bytes>
    77de:	|  |   addq.l #4,sp
    77e0:	|  |   move.l d0,20(sp)
    77e4:	|  |   moveq #-1,d0
    77e6:	|  |   move.l d0,16(sp)
    77ea:	|  |   move.l 1c950 <DOSBase>,d0
    77f0:	|  |   movea.l d0,a6
    77f2:	|  |   move.l 24(sp),d1
    77f6:	|  |   move.l 20(sp),d2
    77fa:	|  |   move.l 16(sp),d3
    77fe:	|  |   jsr -66(a6)
    7802:	|  |   move.l d0,12(sp)
		skipBefore --;
    7806:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    780a:	|  '-> tst.l 204(sp)
    780e:	'----- bne.s 77ce <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7810:	       move.l 196(sp),152(sp)
    7816:	       clr.l 148(sp)
    781a:	       clr.l 144(sp)
    781e:	       move.l 1c950 <DOSBase>,d0
    7824:	       movea.l d0,a6
    7826:	       move.l 152(sp),d1
    782a:	       move.l 148(sp),d2
    782e:	       move.l 144(sp),d3
    7832:	       jsr -66(a6)
    7836:	       move.l d0,140(sp)
    783a:	       move.l 140(sp),d0
    783e:	       addq.l #4,d0
    7840:	       move.l d0,1c93c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7846:	       move.l 196(sp),136(sp)
    784c:	       move.l 196(sp),-(sp)
    7850:	       jsr 718 <get4bytes>
    7856:	       addq.l #4,sp
    7858:	       move.l d0,132(sp)
    785c:	       moveq #-1,d0
    785e:	       move.l d0,128(sp)
    7862:	       move.l 1c950 <DOSBase>,d0
    7868:	       movea.l d0,a6
    786a:	       move.l 136(sp),d1
    786e:	       move.l 132(sp),d2
    7872:	       move.l 128(sp),d3
    7876:	       jsr -66(a6)
    787a:	       move.l d0,124(sp)

	while (skipAfter) {
    787e:	   ,-- bra.s 78bc <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7880:	,--|-> move.l 196(sp),40(sp)
    7886:	|  |   move.l 196(sp),-(sp)
    788a:	|  |   jsr 718 <get4bytes>
    7890:	|  |   addq.l #4,sp
    7892:	|  |   move.l d0,36(sp)
    7896:	|  |   moveq #-1,d0
    7898:	|  |   move.l d0,32(sp)
    789c:	|  |   move.l 1c950 <DOSBase>,d0
    78a2:	|  |   movea.l d0,a6
    78a4:	|  |   move.l 40(sp),d1
    78a8:	|  |   move.l 36(sp),d2
    78ac:	|  |   move.l 32(sp),d3
    78b0:	|  |   jsr -66(a6)
    78b4:	|  |   move.l d0,28(sp)
		skipAfter --;
    78b8:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    78bc:	|  '-> tst.l 188(sp)
    78c0:	'----- bne.s 7880 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    78c2:	       move.l 196(sp),120(sp)
    78c8:	       clr.l 116(sp)
    78cc:	       clr.l 112(sp)
    78d0:	       move.l 1c950 <DOSBase>,d0
    78d6:	       movea.l d0,a6
    78d8:	       move.l 120(sp),d1
    78dc:	       move.l 116(sp),d2
    78e0:	       move.l 112(sp),d3
    78e4:	       jsr -66(a6)
    78e8:	       move.l d0,108(sp)
    78ec:	       move.l 108(sp),d0
    78f0:	       addq.l #4,d0
    78f2:	       move.l d0,1c940 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    78f8:	       move.l 196(sp),104(sp)
    78fe:	       move.l 196(sp),-(sp)
    7902:	       jsr 718 <get4bytes>
    7908:	       addq.l #4,sp
    790a:	       move.l d0,100(sp)
    790e:	       clr.l 96(sp)
    7912:	       move.l 1c950 <DOSBase>,d0
    7918:	       movea.l d0,a6
    791a:	       move.l 104(sp),d1
    791e:	       move.l 100(sp),d2
    7922:	       move.l 96(sp),d3
    7926:	       jsr -66(a6)
    792a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    792e:	       move.l 196(sp),88(sp)
    7934:	       clr.l 84(sp)
    7938:	       clr.l 80(sp)
    793c:	       move.l 1c950 <DOSBase>,d0
    7942:	       movea.l d0,a6
    7944:	       move.l 88(sp),d1
    7948:	       move.l 84(sp),d2
    794c:	       move.l 80(sp),d3
    7950:	       jsr -66(a6)
    7954:	       move.l d0,76(sp)
    7958:	       move.l 76(sp),d0
    795c:	       addq.l #4,d0
    795e:	       move.l d0,1c944 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7964:	       move.l 196(sp),72(sp)
    796a:	       move.l 196(sp),-(sp)
    796e:	       jsr 718 <get4bytes>
    7974:	       addq.l #4,sp
    7976:	       move.l d0,68(sp)
    797a:	       clr.l 64(sp)
    797e:	       move.l 1c950 <DOSBase>,d0
    7984:	       movea.l d0,a6
    7986:	       move.l 72(sp),d1
    798a:	       move.l 68(sp),d2
    798e:	       move.l 64(sp),d3
    7992:	       jsr -66(a6)
    7996:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    799a:	       move.l 196(sp),56(sp)
    79a0:	       clr.l 52(sp)
    79a4:	       clr.l 48(sp)
    79a8:	       move.l 1c950 <DOSBase>,d0
    79ae:	       movea.l d0,a6
    79b0:	       move.l 56(sp),d1
    79b4:	       move.l 52(sp),d2
    79b8:	       move.l 48(sp),d3
    79bc:	       jsr -66(a6)
    79c0:	       move.l d0,44(sp)
    79c4:	       move.l 44(sp),d0
    79c8:	       move.l d0,1c938 <startOfDataIndex>
    79ce:	       nop
    79d0:	       movem.l (sp)+,d2-d3/a6
    79d4:	       lea 180(sp),sp
    79d8:	       rts

000079da <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    79da:	    lea -20(sp),sp
    79de:	    move.l a6,-(sp)
    79e0:	    move.l d7,-(sp)
	APTR vbr = 0;
    79e2:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    79e6:	    move.w #20090,10(sp)
    79ec:	    move.w #2049,12(sp)
    79f2:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    79f8:	    movea.l 1c948 <SysBase>,a0
    79fe:	    move.w 296(a0),d0
    7a02:	    move.w d0,d0
    7a04:	    andi.l #65535,d0
    7a0a:	    moveq #1,d1
    7a0c:	    and.l d1,d0
    7a0e:	,-- beq.s 7a3c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7a10:	|   lea 28(sp),a0
    7a14:	|   lea -18(a0),a0
    7a18:	|   move.l a0,20(sp)
    7a1c:	|   move.l 1c948 <SysBase>,d0
    7a22:	|   movea.l d0,a6
    7a24:	|   move.l 20(sp),d7
    7a28:	|   exg d7,a5
    7a2a:	|   jsr -30(a6)
    7a2e:	|   exg d7,a5
    7a30:	|   move.l d0,16(sp)
    7a34:	|   move.l 16(sp),d0
    7a38:	|   move.l d0,24(sp)

	return vbr;
    7a3c:	'-> move.l 24(sp),d0
}
    7a40:	    move.l (sp)+,d7
    7a42:	    movea.l (sp)+,a6
    7a44:	    lea 20(sp),sp
    7a48:	    rts

00007a4a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7a4a:	movea.l 1c96e <VBR>,a0
    7a50:	lea 108(a0),a0
    7a54:	move.l 4(sp),(a0)
}
    7a58:	nop
    7a5a:	rts

00007a5c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7a5c:	movea.l 1c96e <VBR>,a0
    7a62:	move.l 108(a0),d0
}
    7a66:	rts

00007a68 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7a68:	       subq.l #8,sp
    7a6a:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7a6c:	       pea 18c84 <PutChar+0x1128>
    7a72:	       jsr 170ba <KPrintF>
    7a78:	       addq.l #4,sp
	Forbid();
    7a7a:	       move.l 1c948 <SysBase>,d0
    7a80:	       movea.l d0,a6
    7a82:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7a86:	       pea 18c9c <PutChar+0x1140>
    7a8c:	       jsr 170ba <KPrintF>
    7a92:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7a94:	       movea.l 1c94c <custom>,a0
    7a9a:	       move.w 16(a0),d0
    7a9e:	       move.w d0,1c96c <SystemADKCON>
	SystemInts=custom->intenar;
    7aa4:	       movea.l 1c94c <custom>,a0
    7aaa:	       move.w 28(a0),d0
    7aae:	       move.w d0,1c968 <SystemInts>
	SystemDMA=custom->dmaconr;
    7ab4:	       movea.l 1c94c <custom>,a0
    7aba:	       move.w 2(a0),d0
    7abe:	       move.w d0,1c96a <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7ac4:	       movea.l 1c954 <GfxBase>,a0
    7aca:	       move.l 34(a0),d0
    7ace:	       move.l d0,1c976 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7ad4:	       pea 18cba <PutChar+0x115e>
    7ada:	       jsr 170ba <KPrintF>
    7ae0:	       addq.l #4,sp
	LoadView(0);
    7ae2:	       clr.l 4(sp)
    7ae6:	       move.l 1c954 <GfxBase>,d0
    7aec:	       movea.l d0,a6
    7aee:	       movea.l 4(sp),a1
    7af2:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7af6:	       pea 18cd0 <PutChar+0x1174>
    7afc:	       jsr 170ba <KPrintF>
    7b02:	       addq.l #4,sp
	WaitTOF();
    7b04:	       move.l 1c954 <GfxBase>,d0
    7b0a:	       movea.l d0,a6
    7b0c:	       jsr -270(a6)
	WaitTOF();
    7b10:	       move.l 1c954 <GfxBase>,d0
    7b16:	       movea.l d0,a6
    7b18:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7b1c:	       pea 18ce5 <PutChar+0x1189>
    7b22:	       jsr 170ba <KPrintF>
    7b28:	       addq.l #4,sp
	WaitVbl();
    7b2a:	       jsr 16fee <WaitVbl>
	WaitVbl();
    7b30:	       jsr 16fee <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7b36:	       pea 18cfa <PutChar+0x119e>
    7b3c:	       jsr 170ba <KPrintF>
    7b42:	       addq.l #4,sp
	OwnBlitter();
    7b44:	       move.l 1c954 <GfxBase>,d0
    7b4a:	       movea.l d0,a6
    7b4c:	       jsr -456(a6)
	WaitBlit();	
    7b50:	       move.l 1c954 <GfxBase>,d0
    7b56:	       movea.l d0,a6
    7b58:	       jsr -228(a6)
	Disable();
    7b5c:	       move.l 1c948 <SysBase>,d0
    7b62:	       movea.l d0,a6
    7b64:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7b68:	       pea 18d1b <PutChar+0x11bf>
    7b6e:	       jsr 170ba <KPrintF>
    7b74:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7b76:	       movea.l 1c94c <custom>,a0
    7b7c:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7b82:	       pea 18d32 <PutChar+0x11d6>
    7b88:	       jsr 170ba <KPrintF>
    7b8e:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7b90:	       clr.l 8(sp)
    7b94:	   ,-- bra.s 7bb2 <TakeSystem+0x14a>
		custom->color[a]=0;
    7b96:	,--|-> movea.l 1c94c <custom>,a0
    7b9c:	|  |   move.l 8(sp),d0
    7ba0:	|  |   addi.l #192,d0
    7ba6:	|  |   add.l d0,d0
    7ba8:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7bae:	|  |   addq.l #1,8(sp)
    7bb2:	|  '-> moveq #31,d0
    7bb4:	|      cmp.l 8(sp),d0
    7bb8:	'----- bge.s 7b96 <TakeSystem+0x12e>

	WaitVbl();
    7bba:	       jsr 16fee <WaitVbl>
	WaitVbl();
    7bc0:	       jsr 16fee <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7bc6:	       pea 18d57 <PutChar+0x11fb>
    7bcc:	       jsr 170ba <KPrintF>
    7bd2:	       addq.l #4,sp
	VBR=GetVBR();
    7bd4:	       jsr 79da <GetVBR>
    7bda:	       move.l d0,1c96e <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7be0:	       jsr 7a5c <GetInterruptHandler>
    7be6:	       move.l d0,1c972 <SystemIrq>
}
    7bec:	       nop
    7bee:	       movea.l (sp)+,a6
    7bf0:	       addq.l #8,sp
    7bf2:	       rts

00007bf4 <FreeSystem>:

void FreeSystem() { 
    7bf4:	subq.l #4,sp
    7bf6:	move.l a6,-(sp)
	WaitVbl();
    7bf8:	jsr 16fee <WaitVbl>
	WaitBlit();
    7bfe:	move.l 1c954 <GfxBase>,d0
    7c04:	movea.l d0,a6
    7c06:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7c0a:	movea.l 1c94c <custom>,a0
    7c10:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7c16:	movea.l 1c94c <custom>,a0
    7c1c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7c22:	movea.l 1c94c <custom>,a0
    7c28:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7c2e:	move.l 1c972 <SystemIrq>,d0
    7c34:	move.l d0,-(sp)
    7c36:	jsr 7a4a <SetInterruptHandler>
    7c3c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7c3e:	movea.l 1c954 <GfxBase>,a0
    7c44:	move.l 38(a0),d0
    7c48:	movea.l 1c94c <custom>,a0
    7c4e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7c52:	movea.l 1c954 <GfxBase>,a0
    7c58:	move.l 50(a0),d0
    7c5c:	movea.l 1c94c <custom>,a0
    7c62:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7c66:	movea.l 1c94c <custom>,a0
    7c6c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7c72:	move.w 1c96a <SystemDMA>,d0
    7c78:	movea.l 1c94c <custom>,a0
    7c7e:	ori.w #-32768,d0
    7c82:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7c86:	move.w 1c96c <SystemADKCON>,d0
    7c8c:	movea.l 1c94c <custom>,a0
    7c92:	ori.w #-32768,d0
    7c96:	move.w d0,158(a0)

	WaitBlit();	
    7c9a:	move.l 1c954 <GfxBase>,d0
    7ca0:	movea.l d0,a6
    7ca2:	jsr -228(a6)
	DisownBlitter();
    7ca6:	move.l 1c954 <GfxBase>,d0
    7cac:	movea.l d0,a6
    7cae:	jsr -462(a6)
	Enable();
    7cb2:	move.l 1c948 <SysBase>,d0
    7cb8:	movea.l d0,a6
    7cba:	jsr -126(a6)

	LoadView(ActiView);
    7cbe:	move.l 1c976 <ActiView>,4(sp)
    7cc6:	move.l 1c954 <GfxBase>,d0
    7ccc:	movea.l d0,a6
    7cce:	movea.l 4(sp),a1
    7cd2:	jsr -222(a6)
	WaitTOF();
    7cd6:	move.l 1c954 <GfxBase>,d0
    7cdc:	movea.l d0,a6
    7cde:	jsr -270(a6)
	WaitTOF();
    7ce2:	move.l 1c954 <GfxBase>,d0
    7ce8:	movea.l d0,a6
    7cea:	jsr -270(a6)

	Permit();
    7cee:	move.l 1c948 <SysBase>,d0
    7cf4:	movea.l d0,a6
    7cf6:	jsr -138(a6)
}
    7cfa:	nop
    7cfc:	movea.l (sp)+,a6
    7cfe:	addq.l #4,sp
    7d00:	rts

00007d02 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7d02:	       lea -132(sp),sp
    7d06:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7d0a:	       clr.l 140(sp)
    7d0e:	   ,-- bra.s 7d14 <main+0x12>
    7d10:	,--|-> addq.l #1,140(sp)
    7d14:	|  '-> cmpi.l #999,140(sp)
    7d1c:	'----- ble.s 7d10 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7d1e:	       movea.w #4,a0
    7d22:	       move.l (a0),d0
    7d24:	       move.l d0,1c948 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7d2a:	       move.l #14675968,1c94c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7d34:	       move.l #101755,136(sp)
    7d3c:	       clr.l 132(sp)
    7d40:	       move.l 1c948 <SysBase>,d0
    7d46:	       movea.l d0,a6
    7d48:	       movea.l 136(sp),a1
    7d4c:	       move.l 132(sp),d0
    7d50:	       jsr -552(a6)
    7d54:	       move.l d0,128(sp)
    7d58:	       move.l 128(sp),d0
    7d5c:	       move.l d0,1c954 <GfxBase>
	if (!GfxBase)
    7d62:	       move.l 1c954 <GfxBase>,d0
    7d68:	   ,-- bne.s 7d7e <main+0x7c>
		Exit(0);
    7d6a:	   |   clr.l 124(sp)
    7d6e:	   |   move.l 1c950 <DOSBase>,d0
    7d74:	   |   movea.l d0,a6
    7d76:	   |   move.l 124(sp),d1
    7d7a:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7d7e:	   '-> move.l #101772,120(sp)
    7d86:	       clr.l 116(sp)
    7d8a:	       move.l 1c948 <SysBase>,d0
    7d90:	       movea.l d0,a6
    7d92:	       movea.l 120(sp),a1
    7d96:	       move.l 116(sp),d0
    7d9a:	       jsr -552(a6)
    7d9e:	       move.l d0,112(sp)
    7da2:	       move.l 112(sp),d0
    7da6:	       move.l d0,1c950 <DOSBase>
	if (!DOSBase)
    7dac:	       move.l 1c950 <DOSBase>,d0
    7db2:	   ,-- bne.s 7dc8 <main+0xc6>
		Exit(0);
    7db4:	   |   clr.l 108(sp)
    7db8:	   |   move.l 1c950 <DOSBase>,d0
    7dbe:	   |   movea.l d0,a6
    7dc0:	   |   move.l 108(sp),d1
    7dc4:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7dc8:	   '-> move.l #101784,104(sp)
    7dd0:	       clr.l 100(sp)
    7dd4:	       move.l 1c948 <SysBase>,d0
    7dda:	       movea.l d0,a6
    7ddc:	       movea.l 104(sp),a1
    7de0:	       move.l 100(sp),d0
    7de4:	       jsr -552(a6)
    7de8:	       move.l d0,96(sp)
    7dec:	       move.l 96(sp),d0
    7df0:	       move.l d0,1c958 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7df6:	       move.l 1c958 <MathIeeeSingBasBase>,d0
    7dfc:	   ,-- bne.s 7e12 <main+0x110>
		Exit(0);	
    7dfe:	   |   clr.l 92(sp)
    7e02:	   |   move.l 1c950 <DOSBase>,d0
    7e08:	   |   movea.l d0,a6
    7e0a:	   |   move.l 92(sp),d1
    7e0e:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7e12:	   '-> move.l #101808,88(sp)
    7e1a:	       clr.l 84(sp)
    7e1e:	       move.l 1c948 <SysBase>,d0
    7e24:	       movea.l d0,a6
    7e26:	       movea.l 88(sp),a1
    7e2a:	       move.l 84(sp),d0
    7e2e:	       jsr -552(a6)
    7e32:	       move.l d0,80(sp)
    7e36:	       move.l 80(sp),d0
    7e3a:	       move.l d0,1c95c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7e40:	       move.l 1c95c <MathIeeeSingTransBase>,d0
    7e46:	   ,-- bne.s 7e5c <main+0x15a>
		Exit(0);
    7e48:	   |   clr.l 76(sp)
    7e4c:	   |   move.l 1c950 <DOSBase>,d0
    7e52:	   |   movea.l d0,a6
    7e54:	   |   move.l 76(sp),d1
    7e58:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7e5c:	   '-> move.l #101834,72(sp)
    7e64:	       clr.l 68(sp)
    7e68:	       move.l 1c948 <SysBase>,d0
    7e6e:	       movea.l d0,a6
    7e70:	       movea.l 72(sp),a1
    7e74:	       move.l 68(sp),d0
    7e78:	       jsr -552(a6)
    7e7c:	       move.l d0,64(sp)
    7e80:	       move.l 64(sp),d0
    7e84:	       move.l d0,1c964 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7e8a:	       move.l 1c964 <MathIeeeDoubTransBase>,d0
    7e90:	   ,-- bne.s 7ea6 <main+0x1a4>
		Exit(0);
    7e92:	   |   clr.l 60(sp)
    7e96:	   |   move.l 1c950 <DOSBase>,d0
    7e9c:	   |   movea.l d0,a6
    7e9e:	   |   move.l 60(sp),d1
    7ea2:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7ea6:	   '-> move.l #101860,56(sp)
    7eae:	       clr.l 52(sp)
    7eb2:	       move.l 1c948 <SysBase>,d0
    7eb8:	       movea.l d0,a6
    7eba:	       movea.l 56(sp),a1
    7ebe:	       move.l 52(sp),d0
    7ec2:	       jsr -552(a6)
    7ec6:	       move.l d0,48(sp)
    7eca:	       move.l 48(sp),d0
    7ece:	       move.l d0,1c960 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7ed4:	       move.l 1c960 <MathIeeeDoubBasBase>,d0
    7eda:	   ,-- bne.s 7ef0 <main+0x1ee>
		Exit(0);
    7edc:	   |   clr.l 44(sp)
    7ee0:	   |   move.l 1c950 <DOSBase>,d0
    7ee6:	   |   movea.l d0,a6
    7ee8:	   |   move.l 44(sp),d1
    7eec:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    7ef0:	   '-> pea 18dfc <PutChar+0x12a0>
    7ef6:	       jsr 170ba <KPrintF>
    7efc:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    7efe:	       move.l 1c950 <DOSBase>,d0
    7f04:	       movea.l d0,a6
    7f06:	       jsr -60(a6)
    7f0a:	       move.l d0,40(sp)
    7f0e:	       move.l 40(sp),d0
    7f12:	       move.l d0,36(sp)
    7f16:	       move.l #101916,32(sp)
    7f1e:	       moveq #25,d0
    7f20:	       move.l d0,28(sp)
    7f24:	       move.l 1c950 <DOSBase>,d0
    7f2a:	       movea.l d0,a6
    7f2c:	       move.l 36(sp),d1
    7f30:	       move.l 32(sp),d2
    7f34:	       move.l 28(sp),d3
    7f38:	       jsr -48(a6)
    7f3c:	       move.l d0,24(sp)
	Delay(50);
    7f40:	       moveq #50,d0
    7f42:	       move.l d0,20(sp)
    7f46:	       move.l 1c950 <DOSBase>,d0
    7f4c:	       movea.l d0,a6
    7f4e:	       move.l 20(sp),d1
    7f52:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7f56:	       pea 18e35 <PutChar+0x12d9>
    7f5c:	       jsr 170ba <KPrintF>
    7f62:	       addq.l #4,sp
	TakeSystem();
    7f64:	       jsr 7a68 <TakeSystem>
	KPrintF("System Taken\n");
    7f6a:	       pea 18e44 <PutChar+0x12e8>
    7f70:	       jsr 170ba <KPrintF>
    7f76:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    7f78:	       movea.l 1c94c <custom>,a0
    7f7e:	       move.w #-30721,150(a0)
	WaitVbl();
    7f84:	       jsr 16fee <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7f8a:	       pea 18e52 <PutChar+0x12f6>
    7f90:	       jsr 170ba <KPrintF>
    7f96:	       addq.l #4,sp
	main_sludge(argc, argv);	
    7f98:	       move.l 152(sp),-(sp)
    7f9c:	       move.l 152(sp),-(sp)
    7fa0:	       jsr 4840 <main_sludge>
    7fa6:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7fa8:	       jsr 7bf4 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7fae:	       move.l 1c950 <DOSBase>,16(sp)
    7fb6:	       move.l 1c948 <SysBase>,d0
    7fbc:	       movea.l d0,a6
    7fbe:	       movea.l 16(sp),a1
    7fc2:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7fc6:	       move.l 1c954 <GfxBase>,12(sp)
    7fce:	       move.l 1c948 <SysBase>,d0
    7fd4:	       movea.l d0,a6
    7fd6:	       movea.l 12(sp),a1
    7fda:	       jsr -414(a6)
    7fde:	       moveq #0,d0
}
    7fe0:	       movem.l (sp)+,d2-d3/a6
    7fe4:	       lea 132(sp),sp
    7fe8:	       rts

00007fea <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7fea:	    lea -16(sp),sp
    7fee:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7ff0:	    moveq #8,d0
    7ff2:	    move.l d0,16(sp)
    7ff6:	    clr.l 12(sp)
    7ffa:	    move.l 1c948 <SysBase>,d0
    8000:	    movea.l d0,a6
    8002:	    move.l 16(sp),d0
    8006:	    move.l 12(sp),d1
    800a:	    jsr -684(a6)
    800e:	    move.l d0,8(sp)
    8012:	    move.l 8(sp),d0
    8016:	    move.l d0,4(sp)
	if (!newStat) {
    801a:	,-- bne.s 804a <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    801c:	|   movea.l 1c2c6 <nowStatus>,a0
    8022:	|   move.l (a0),d0
    8024:	|   movea.l 4(sp),a0
    8028:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    802c:	|   pea 1888a <PutChar+0xd2e>
    8032:	|   jsr b8 <copyString>
    8038:	|   addq.l #4,sp
    803a:	|   movea.l 4(sp),a0
    803e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8040:	|   movea.l 1c2c6 <nowStatus>,a0
    8046:	|   move.l 4(sp),(a0)
	}
}
    804a:	'-> nop
    804c:	    movea.l (sp)+,a6
    804e:	    lea 16(sp),sp
    8052:	    rts

00008054 <clearStatusBar>:

void clearStatusBar () {
    8054:	       lea -16(sp),sp
    8058:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    805a:	       movea.l 1c2c6 <nowStatus>,a0
    8060:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8064:	       movea.l 1c2c6 <nowStatus>,a0
    806a:	       moveq #-1,d0
    806c:	       move.l d0,6(a0)
	while (stat) {
    8070:	   ,-- bra.s 80b0 <clearStatusBar+0x5c>
		kill = stat;
    8072:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8078:	|  |   movea.l 16(sp),a0
    807c:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8082:	|  |   movea.l 12(sp),a0
    8086:	|  |   move.l (a0),8(sp)
    808a:	|  |   move.l 1c948 <SysBase>,d0
    8090:	|  |   movea.l d0,a6
    8092:	|  |   movea.l 8(sp),a1
    8096:	|  |   jsr -690(a6)
		FreeVec(kill);
    809a:	|  |   move.l 12(sp),4(sp)
    80a0:	|  |   move.l 1c948 <SysBase>,d0
    80a6:	|  |   movea.l d0,a6
    80a8:	|  |   movea.l 4(sp),a1
    80ac:	|  |   jsr -690(a6)
	while (stat) {
    80b0:	|  '-> tst.l 16(sp)
    80b4:	'----- bne.s 8072 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    80b6:	       movea.l 1c2c6 <nowStatus>,a0
    80bc:	       clr.l (a0)
}
    80be:	       nop
    80c0:	       movea.l (sp)+,a6
    80c2:	       lea 16(sp),sp
    80c6:	       rts

000080c8 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    80c8:	clr.l 1c97a <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    80ce:	move.w #-1,1c97e <mainStatus+0x4>
	mainStatus.litStatus = -1;
    80d6:	moveq #-1,d0
    80d8:	move.l d0,1c980 <mainStatus+0x6>
	mainStatus.statusX = 10;
    80de:	moveq #10,d0
    80e0:	move.l d0,1c984 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    80e6:	movea.l 1c8a0 <winHeight>,a0
    80ec:	lea -15(a0),a0
    80f0:	move.l a0,d0
    80f2:	move.l d0,1c988 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    80f8:	nop
    80fa:	rts

000080fc <killLastStatus>:

void killLastStatus () {
    80fc:	    lea -12(sp),sp
    8100:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8102:	    movea.l 1c2c6 <nowStatus>,a0
    8108:	    move.l (a0),d0
    810a:	,-- beq.s 8154 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    810c:	|   movea.l 1c2c6 <nowStatus>,a0
    8112:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8116:	|   movea.l 1c2c6 <nowStatus>,a0
    811c:	|   movea.l 12(sp),a1
    8120:	|   move.l 4(a1),d0
    8124:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8126:	|   movea.l 12(sp),a0
    812a:	|   move.l (a0),8(sp)
    812e:	|   move.l 1c948 <SysBase>,d0
    8134:	|   movea.l d0,a6
    8136:	|   movea.l 8(sp),a1
    813a:	|   jsr -690(a6)
		FreeVec(kill);
    813e:	|   move.l 12(sp),4(sp)
    8144:	|   move.l 1c948 <SysBase>,d0
    814a:	|   movea.l d0,a6
    814c:	|   movea.l 4(sp),a1
    8150:	|   jsr -690(a6)
	}
}
    8154:	'-> nop
    8156:	    movea.l (sp)+,a6
    8158:	    lea 12(sp),sp
    815c:	    rts

0000815e <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    815e:	movea.l 1c2c6 <nowStatus>,a0
    8164:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    816a:	movea.l 1c2c6 <nowStatus>,a0
    8170:	move.l 8(sp),14(a0)
}
    8176:	nop
    8178:	rts

0000817a <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    817a:	       lea -100(sp),sp
    817e:	       move.l a6,-(sp)
    8180:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8182:	       movea.l 1c2c6 <nowStatus>,a0
    8188:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    818c:	       movea.l 1c2c6 <nowStatus>,a0
    8192:	       move.w 4(a0),d0
    8196:	       move.w d0,d0
    8198:	       andi.l #65535,d0
    819e:	       move.l 112(sp),-(sp)
    81a2:	       move.l d0,-(sp)
    81a4:	       jsr 8d0 <put2bytes>
    81aa:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    81ac:	       movea.l 1c2c6 <nowStatus>,a0
    81b2:	       move.l 6(a0),d0
    81b6:	       move.l d0,d0
    81b8:	       movea.w d0,a0
    81ba:	       move.l 112(sp),-(sp)
    81be:	       move.l a0,-(sp)
    81c0:	       jsr a9c <putSigned>
    81c6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    81c8:	       movea.l 1c2c6 <nowStatus>,a0
    81ce:	       move.l 10(a0),d0
    81d2:	       move.l 112(sp),-(sp)
    81d6:	       move.l d0,-(sp)
    81d8:	       jsr 8d0 <put2bytes>
    81de:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    81e0:	       movea.l 1c2c6 <nowStatus>,a0
    81e6:	       move.l 14(a0),d0
    81ea:	       move.l 112(sp),-(sp)
    81ee:	       move.l d0,-(sp)
    81f0:	       jsr 8d0 <put2bytes>
    81f6:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    81f8:	       move.l 112(sp),100(sp)
    81fe:	       movea.l 1c2c6 <nowStatus>,a0
    8204:	       move.l 18(a0),96(sp)
    820a:	       move.l 1c950 <DOSBase>,d0
    8210:	       movea.l d0,a6
    8212:	       move.l 100(sp),d1
    8216:	       move.l 96(sp),d2
    821a:	       jsr -312(a6)
    821e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8222:	       move.l 112(sp),88(sp)
    8228:	       movea.l 1c2c6 <nowStatus>,a0
    822e:	       move.l 22(a0),84(sp)
    8234:	       move.l 1c950 <DOSBase>,d0
    823a:	       movea.l d0,a6
    823c:	       move.l 88(sp),d1
    8240:	       move.l 84(sp),d2
    8244:	       jsr -312(a6)
    8248:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    824c:	       move.l 112(sp),76(sp)
    8252:	       movea.l 1c2c6 <nowStatus>,a0
    8258:	       move.l 26(a0),72(sp)
    825e:	       move.l 1c950 <DOSBase>,d0
    8264:	       movea.l d0,a6
    8266:	       move.l 76(sp),d1
    826a:	       move.l 72(sp),d2
    826e:	       jsr -312(a6)
    8272:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8276:	       move.l 112(sp),64(sp)
    827c:	       movea.l 1c2c6 <nowStatus>,a0
    8282:	       move.l 30(a0),60(sp)
    8288:	       move.l 1c950 <DOSBase>,d0
    828e:	       movea.l d0,a6
    8290:	       move.l 64(sp),d1
    8294:	       move.l 60(sp),d2
    8298:	       jsr -312(a6)
    829c:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    82a0:	       move.l 112(sp),52(sp)
    82a6:	       movea.l 1c2c6 <nowStatus>,a0
    82ac:	       move.l 34(a0),48(sp)
    82b2:	       move.l 1c950 <DOSBase>,d0
    82b8:	       movea.l d0,a6
    82ba:	       move.l 52(sp),d1
    82be:	       move.l 48(sp),d2
    82c2:	       jsr -312(a6)
    82c6:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    82ca:	       move.l 112(sp),40(sp)
    82d0:	       movea.l 1c2c6 <nowStatus>,a0
    82d6:	       move.l 38(a0),36(sp)
    82dc:	       move.l 1c950 <DOSBase>,d0
    82e2:	       movea.l d0,a6
    82e4:	       move.l 40(sp),d1
    82e8:	       move.l 36(sp),d2
    82ec:	       jsr -312(a6)
    82f0:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    82f4:	   ,-- bra.s 8338 <saveStatusBars+0x1be>
		FPutC (fp,1);
    82f6:	,--|-> move.l 112(sp),16(sp)
    82fc:	|  |   moveq #1,d0
    82fe:	|  |   move.l d0,12(sp)
    8302:	|  |   move.l 1c950 <DOSBase>,d0
    8308:	|  |   movea.l d0,a6
    830a:	|  |   move.l 16(sp),d1
    830e:	|  |   move.l 12(sp),d2
    8312:	|  |   jsr -312(a6)
    8316:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    831a:	|  |   movea.l 104(sp),a0
    831e:	|  |   move.l (a0),d0
    8320:	|  |   move.l 112(sp),-(sp)
    8324:	|  |   move.l d0,-(sp)
    8326:	|  |   jsr bd8 <writeString>
    832c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    832e:	|  |   movea.l 104(sp),a0
    8332:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8338:	|  '-> tst.l 104(sp)
    833c:	'----- bne.s 82f6 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    833e:	       move.l 112(sp),28(sp)
    8344:	       clr.l 24(sp)
    8348:	       move.l 1c950 <DOSBase>,d0
    834e:	       movea.l d0,a6
    8350:	       move.l 28(sp),d1
    8354:	       move.l 24(sp),d2
    8358:	       jsr -312(a6)
    835c:	       move.l d0,20(sp)
}
    8360:	       nop
    8362:	       move.l (sp)+,d2
    8364:	       movea.l (sp)+,a6
    8366:	       lea 100(sp),sp
    836a:	       rts

0000836c <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    836c:	movea.l 1c2c6 <nowStatus>,a0
    8372:	move.l 4(sp),6(a0)
}
    8378:	nop
    837a:	rts

0000837c <setStatusBar>:

void setStatusBar (char * txt) {
    837c:	    subq.l #4,sp
    837e:	    move.l a6,-(sp)
    8380:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8382:	    movea.l 1c2c6 <nowStatus>,a0
    8388:	    move.l (a0),d0
    838a:	,-- beq.s 83be <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    838c:	|   movea.l 1c2c6 <nowStatus>,a0
    8392:	|   movea.l (a0),a0
    8394:	|   move.l (a0),8(sp)
    8398:	|   move.l 1c948 <SysBase>,d0
    839e:	|   movea.l d0,a6
    83a0:	|   movea.l 8(sp),a1
    83a4:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    83a8:	|   movea.l 1c2c6 <nowStatus>,a0
    83ae:	|   movea.l (a0),a2
    83b0:	|   move.l 16(sp),-(sp)
    83b4:	|   jsr b8 <copyString>
    83ba:	|   addq.l #4,sp
    83bc:	|   move.l d0,(a2)
	}
}
    83be:	'-> nop
    83c0:	    movea.l (sp)+,a2
    83c2:	    movea.l (sp)+,a6
    83c4:	    addq.l #4,sp
    83c6:	    rts

000083c8 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    83c8:	       movea.l 1c2c6 <nowStatus>,a0
    83ce:	       move.l (a0),d0
    83d0:	,----- beq.s 83de <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    83d2:	|      movea.l 1c2c6 <nowStatus>,a0
    83d8:	|      movea.l (a0),a0
    83da:	|      move.l (a0),d0
    83dc:	|  ,-- bra.s 83e4 <statusBarText+0x1c>
	} else {
		return "";
    83de:	'--|-> move.l #100490,d0
	}
    83e4:	   '-> rts

000083e6 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    83e6:	       lea -12(sp),sp
    83ea:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    83ec:	       move.l 1c9a4 <zBuffer>,12(sp)

	while(zbuffercursor) {
    83f4:	   ,-- bra.s 841c <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    83f6:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    83fc:	|  |   movea.l 12(sp),a0
    8400:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8406:	|  |   move.l 8(sp),4(sp)
    840c:	|  |   move.l 1c948 <SysBase>,d0
    8412:	|  |   movea.l d0,a6
    8414:	|  |   movea.l 4(sp),a1
    8418:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    841c:	|  '-> tst.l 12(sp)
    8420:	'----- bne.s 83f6 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8422:	       clr.l 1c9a4 <zBuffer>
}
    8428:	       nop
    842a:	       movea.l (sp)+,a6
    842c:	       lea 12(sp),sp
    8430:	       rts

00008432 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8432:	                lea -304(sp),sp
    8436:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    843a:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    843e:	                jsr 83e6 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8444:	                move.l 328(sp),d0
    8448:	                move.l d0,-(sp)
    844a:	                jsr 74d0 <openFileFromNum>
    8450:	                addq.l #4,sp
    8452:	                tst.l d0
    8454:	            ,-- bne.s 845c <setZBuffer+0x2a>
    8456:	            |   clr.w d0
    8458:	,-----------|-- bra.w 871a <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    845c:	|           '-> move.l 1c930 <bigDataFile>,310(sp)
    8464:	|               move.l 1c950 <DOSBase>,d0
    846a:	|               movea.l d0,a6
    846c:	|               move.l 310(sp),d1
    8470:	|               jsr -306(a6)
    8474:	|               move.l d0,306(sp)
    8478:	|               move.l 306(sp),d0
    847c:	|               moveq #97,d1
    847e:	|               cmp.l d0,d1
    8480:	|        ,----- bne.s 84f4 <setZBuffer+0xc2>
    8482:	|        |      move.l 1c930 <bigDataFile>,302(sp)
    848a:	|        |      move.l 1c950 <DOSBase>,d0
    8490:	|        |      movea.l d0,a6
    8492:	|        |      move.l 302(sp),d1
    8496:	|        |      jsr -306(a6)
    849a:	|        |      move.l d0,298(sp)
    849e:	|        |      move.l 298(sp),d0
    84a2:	|        |      moveq #115,d1
    84a4:	|        |      cmp.l d0,d1
    84a6:	|        +----- bne.s 84f4 <setZBuffer+0xc2>
    84a8:	|        |      move.l 1c930 <bigDataFile>,294(sp)
    84b0:	|        |      move.l 1c950 <DOSBase>,d0
    84b6:	|        |      movea.l d0,a6
    84b8:	|        |      move.l 294(sp),d1
    84bc:	|        |      jsr -306(a6)
    84c0:	|        |      move.l d0,290(sp)
    84c4:	|        |      move.l 290(sp),d0
    84c8:	|        |      moveq #122,d1
    84ca:	|        |      cmp.l d0,d1
    84cc:	|        +----- bne.s 84f4 <setZBuffer+0xc2>
    84ce:	|        |      move.l 1c930 <bigDataFile>,286(sp)
    84d6:	|        |      move.l 1c950 <DOSBase>,d0
    84dc:	|        |      movea.l d0,a6
    84de:	|        |      move.l 286(sp),d1
    84e2:	|        |      jsr -306(a6)
    84e6:	|        |      move.l d0,282(sp)
    84ea:	|        |      move.l 282(sp),d0
    84ee:	|        |      moveq #98,d1
    84f0:	|        |      cmp.l d0,d1
    84f2:	|        |  ,-- beq.s 8508 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    84f4:	|        '--|-> pea 18e8f <PutChar+0x1333>
    84fa:	|           |   jsr 170ba <KPrintF>
    8500:	|           |   addq.l #4,sp
		 return FALSE;
    8502:	|           |   clr.w d0
    8504:	+-----------|-- bra.w 871a <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8508:	|           '-> move.l 1c930 <bigDataFile>,278(sp)
    8510:	|               move.l 1c950 <DOSBase>,d0
    8516:	|               movea.l d0,a6
    8518:	|               move.l 278(sp),d1
    851c:	|               jsr -306(a6)
    8520:	|               move.l d0,274(sp)
    8524:	|               move.l 274(sp),d0
    8528:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    852c:	|               moveq #28,d0
    852e:	|               move.l d0,270(sp)
    8532:	|               clr.l 266(sp)
    8536:	|               move.l 1c948 <SysBase>,d0
    853c:	|               movea.l d0,a6
    853e:	|               move.l 270(sp),d0
    8542:	|               move.l 266(sp),d1
    8546:	|               jsr -684(a6)
    854a:	|               move.l d0,262(sp)
    854e:	|               move.l 262(sp),d0
    8552:	|               move.l d0,1c9a4 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8558:	|               move.l 1c9a4 <zBuffer>,318(sp)

	while(numelements--)
    8560:	|     ,-------- bra.w 8700 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8564:	|  ,--|-------> move.l 1c930 <bigDataFile>,d0
    856a:	|  |  |         move.l d0,-(sp)
    856c:	|  |  |         jsr 6bc <get2bytes>
    8572:	|  |  |         addq.l #4,sp
    8574:	|  |  |         movea.l 318(sp),a0
    8578:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    857a:	|  |  |         move.l 1c930 <bigDataFile>,d0
    8580:	|  |  |         move.l d0,-(sp)
    8582:	|  |  |         jsr 6bc <get2bytes>
    8588:	|  |  |         addq.l #4,sp
    858a:	|  |  |         movea.l 318(sp),a0
    858e:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8592:	|  |  |         move.l 1c930 <bigDataFile>,d0
    8598:	|  |  |         move.l d0,-(sp)
    859a:	|  |  |         jsr 6bc <get2bytes>
    85a0:	|  |  |         addq.l #4,sp
    85a2:	|  |  |         movea.l 318(sp),a0
    85a6:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    85aa:	|  |  |         move.l 1c930 <bigDataFile>,d0
    85b0:	|  |  |         move.l d0,-(sp)
    85b2:	|  |  |         jsr 6bc <get2bytes>
    85b8:	|  |  |         addq.l #4,sp
    85ba:	|  |  |         movea.l 318(sp),a0
    85be:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    85c2:	|  |  |         move.l 1c930 <bigDataFile>,d0
    85c8:	|  |  |         move.l d0,-(sp)
    85ca:	|  |  |         jsr 6bc <get2bytes>
    85d0:	|  |  |         addq.l #4,sp
    85d2:	|  |  |         movea.l 318(sp),a0
    85d6:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    85da:	|  |  |         movea.l 318(sp),a0
    85de:	|  |  |         move.l (a0),d0
    85e0:	|  |  |         movea.l 318(sp),a0
    85e4:	|  |  |         move.l 4(a0),d1
    85e8:	|  |  |         move.l d1,-(sp)
    85ea:	|  |  |         move.l d0,-(sp)
    85ec:	|  |  |         jsr 17a46 <__mulsi3>
    85f2:	|  |  |         addq.l #8,sp
    85f4:	|  |  |         tst.l d0
    85f6:	|  |  |     ,-- bge.s 85fa <setZBuffer+0x1c8>
    85f8:	|  |  |     |   addq.l #7,d0
    85fa:	|  |  |     '-> asr.l #3,d0
    85fc:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8600:	|  |  |         moveq #0,d0
    8602:	|  |  |         move.w 260(sp),d0
    8606:	|  |  |         move.l d0,256(sp)
    860a:	|  |  |         moveq #2,d1
    860c:	|  |  |         move.l d1,252(sp)
    8610:	|  |  |         move.l 1c948 <SysBase>,d0
    8616:	|  |  |         movea.l d0,a6
    8618:	|  |  |         move.l 256(sp),d0
    861c:	|  |  |         move.l 252(sp),d1
    8620:	|  |  |         jsr -684(a6)
    8624:	|  |  |         move.l d0,248(sp)
    8628:	|  |  |         move.l 248(sp),d0
    862c:	|  |  |         movea.l 318(sp),a0
    8630:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8634:	|  |  |         move.l 1c930 <bigDataFile>,244(sp)
    863c:	|  |  |         movea.l 318(sp),a0
    8640:	|  |  |         move.l 20(a0),240(sp)
    8646:	|  |  |         moveq #1,d0
    8648:	|  |  |         move.l d0,236(sp)
    864c:	|  |  |         moveq #0,d0
    864e:	|  |  |         move.w 260(sp),d0
    8652:	|  |  |         move.l d0,232(sp)
    8656:	|  |  |         move.l 1c950 <DOSBase>,d0
    865c:	|  |  |         movea.l d0,a6
    865e:	|  |  |         move.l 244(sp),d1
    8662:	|  |  |         move.l 240(sp),d2
    8666:	|  |  |         move.l 236(sp),d3
    866a:	|  |  |         move.l 232(sp),d4
    866e:	|  |  |         jsr -324(a6)
    8672:	|  |  |         move.l d0,228(sp)
    8676:	|  |  |         move.l 228(sp),d0
    867a:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    867e:	|  |  |         tst.w 322(sp)
    8682:	|  |  |  ,----- beq.s 86be <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8684:	|  |  |  |      moveq #28,d1
    8686:	|  |  |  |      move.l d1,222(sp)
    868a:	|  |  |  |      clr.l 218(sp)
    868e:	|  |  |  |      move.l 1c948 <SysBase>,d0
    8694:	|  |  |  |      movea.l d0,a6
    8696:	|  |  |  |      move.l 222(sp),d0
    869a:	|  |  |  |      move.l 218(sp),d1
    869e:	|  |  |  |      jsr -684(a6)
    86a2:	|  |  |  |      move.l d0,214(sp)
    86a6:	|  |  |  |      move.l 214(sp),d0
    86aa:	|  |  |  |      movea.l 318(sp),a0
    86ae:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    86b2:	|  |  |  |      movea.l 318(sp),a0
    86b6:	|  |  |  |      move.l 24(a0),318(sp)
    86bc:	|  |  |  |  ,-- bra.s 86c6 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    86be:	|  |  |  '--|-> movea.l 318(sp),a0
    86c2:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    86c6:	|  |  |     '-> movea.l 318(sp),a0
    86ca:	|  |  |         move.l 4(a0),d0
    86ce:	|  |  |         move.l d0,d0
    86d0:	|  |  |         movea.w d0,a1
    86d2:	|  |  |         movea.l 318(sp),a0
    86d6:	|  |  |         move.l (a0),d0
    86d8:	|  |  |         move.l d0,d0
    86da:	|  |  |         movea.w d0,a0
    86dc:	|  |  |         movea.l 318(sp),a2
    86e0:	|  |  |         move.l 20(a2),d0
    86e4:	|  |  |         clr.l -(sp)
    86e6:	|  |  |         pea 1 <_start+0x1>
    86ea:	|  |  |         move.l a1,-(sp)
    86ec:	|  |  |         move.l a0,-(sp)
    86ee:	|  |  |         pea 18ea3 <PutChar+0x1347>
    86f4:	|  |  |         move.l d0,-(sp)
    86f6:	|  |  |         jsr 171a2 <debug_register_bitmap>
    86fc:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8700:	|  |  '-------> move.w 322(sp),d0
    8704:	|  |            move.w d0,d1
    8706:	|  |            subq.w #1,d1
    8708:	|  |            move.w d1,322(sp)
    870c:	|  |            tst.w d0
    870e:	|  '----------- bne.w 8564 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8712:	|               jsr 73c8 <finishAccess>
	
	return TRUE;
    8718:	|               moveq #1,d0
}
    871a:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    871e:	                lea 304(sp),sp
    8722:	                rts

00008724 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8724:	          lea -32(sp),sp
    8728:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    872a:	          move.l 40(sp),d0
    872e:	          addq.l #8,d0
    8730:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8734:	          clr.l 32(sp)
    8738:	   ,----- bra.s 877e <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    873a:	,--|----> movea.l 24(sp),a0
    873e:	|  |      movea.l 8(a0),a0
    8742:	|  |      move.l 32(sp),d1
    8746:	|  |      move.l d1,d0
    8748:	|  |      lsl.l #3,d0
    874a:	|  |      sub.l d1,d0
    874c:	|  |      add.l d0,d0
    874e:	|  |      add.l d0,d0
    8750:	|  |      adda.l d0,a0
    8752:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8756:	|  |      movea.l 8(sp),a0
    875a:	|  |      move.l 24(a0),d0
    875e:	|  |  ,-- beq.s 877a <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8760:	|  |  |   movea.l 8(sp),a0
    8764:	|  |  |   move.l 24(a0),4(sp)
    876a:	|  |  |   move.l 1c948 <SysBase>,d0
    8770:	|  |  |   movea.l d0,a6
    8772:	|  |  |   movea.l 4(sp),a1
    8776:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    877a:	|  |  '-> addq.l #1,32(sp)
    877e:	|  '----> movea.l 24(sp),a0
    8782:	|         move.l (a0),d0
    8784:	|         cmp.l 32(sp),d0
    8788:	'-------- bgt.s 873a <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    878a:	          movea.l 24(sp),a0
    878e:	          move.l 8(a0),20(sp)
    8794:	          move.l 1c948 <SysBase>,d0
    879a:	          movea.l d0,a6
    879c:	          movea.l 20(sp),a1
    87a0:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    87a4:	          move.l 1ca5c <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    87ac:	      ,-- bra.s 87b8 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    87ae:	   ,--|-> movea.l 28(sp),a0
    87b2:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    87b8:	   |  '-> movea.l 28(sp),a0
    87bc:	   |      movea.l 22(a0),a0
    87c0:	   |      move.l (a0),d1
    87c2:	   |      movea.l 40(sp),a0
    87c6:	   |      move.l (a0),d0
    87c8:	   |      cmp.l d1,d0
    87ca:	   |  ,-- beq.s 87d2 <forgetSpriteBank+0xae>
    87cc:	   |  |   tst.l 28(sp)
    87d0:	   '--|-- bne.s 87ae <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    87d2:	      '-> tst.l 28(sp)
    87d6:	   ,----- beq.s 8800 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    87d8:	   |      movea.l 40(sp),a0
    87dc:	   |      move.l 22(a0),d0
    87e0:	   |      movea.l 28(sp),a0
    87e4:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    87e8:	   |      move.l 40(sp),12(sp)
    87ee:	   |      move.l 1c948 <SysBase>,d0
    87f4:	   |      movea.l d0,a6
    87f6:	   |      movea.l 12(sp),a1
    87fa:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    87fe:	   |  ,-- bra.s 8826 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8800:	   '--|-> movea.l 1ca5c <allLoadedBanks>,a0
    8806:	      |   move.l 22(a0),d0
    880a:	      |   move.l d0,1ca5c <allLoadedBanks>
		FreeVec( forgetme);
    8810:	      |   move.l 40(sp),16(sp)
    8816:	      |   move.l 1c948 <SysBase>,d0
    881c:	      |   movea.l d0,a6
    881e:	      |   movea.l 16(sp),a1
    8822:	      |   jsr -690(a6)
}
    8826:	      '-> nop
    8828:	          movea.l (sp)+,a6
    882a:	          lea 32(sp),sp
    882e:	          rts

00008830 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8830:	                      lea -84(sp),sp
    8834:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8838:	                      pea 18eaf <PutChar+0x1353>
    883e:	                      jsr 170ba <KPrintF>
    8844:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8846:	                      clr.l 94(sp)
    884a:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    884e:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8852:	                      move.l 108(sp),-(sp)
    8856:	                      jsr 74d0 <openFileFromNum>
    885c:	                      addq.l #4,sp
    885e:	                      tst.l d0
    8860:	                  ,-- bne.s 8876 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8862:	                  |   pea 18ec9 <PutChar+0x136d>
    8868:	                  |   jsr 170ba <KPrintF>
    886e:	                  |   addq.l #4,sp
		return FALSE;
    8870:	                  |   clr.w d0
    8872:	,-----------------|-- bra.w 8c6a <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8876:	|                 '-> move.l 1c930 <bigDataFile>,d0
    887c:	|                     move.l d0,-(sp)
    887e:	|                     jsr 6bc <get2bytes>
    8884:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8886:	|                     move.l 1c930 <bigDataFile>,82(sp)
    888e:	|                     move.l 1c950 <DOSBase>,d0
    8894:	|                     movea.l d0,a6
    8896:	|                     move.l 82(sp),d1
    889a:	|                     jsr -306(a6)
    889e:	|                     move.l d0,78(sp)
    88a2:	|                     move.l 78(sp),d0
    88a6:	|                     movea.l 112(sp),a0
    88aa:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    88ae:	|                     move.l 1c930 <bigDataFile>,d0
    88b4:	|                     move.l d0,-(sp)
    88b6:	|                     jsr 6bc <get2bytes>
    88bc:	|                     addq.l #4,sp
    88be:	|                     move.l d0,74(sp)

	if (total <= 0) {
    88c2:	|                 ,-- bgt.s 88d8 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    88c4:	|                 |   pea 18ef7 <PutChar+0x139b>
    88ca:	|                 |   jsr 170ba <KPrintF>
    88d0:	|                 |   addq.l #4,sp
		return FALSE;
    88d2:	|                 |   clr.w d0
    88d4:	+-----------------|-- bra.w 8c6a <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    88d8:	|                 '-> movea.l 112(sp),a0
    88dc:	|                     move.l 4(a0),d0
    88e0:	|                     moveq #3,d1
    88e2:	|                     cmp.l d0,d1
    88e4:	|                 ,-- bne.s 88f2 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    88e6:	|                 |   movea.l 112(sp),a0
    88ea:	|                 |   move.w #1,12(a0)
    88f0:	|              ,--|-- bra.s 8914 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    88f2:	|              |  '-> movea.l 112(sp),a0
    88f6:	|              |      move.l 4(a0),d0
    88fa:	|              |      moveq #3,d1
    88fc:	|              |      cmp.l d0,d1
    88fe:	|              +----- bge.s 8914 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8900:	|              |      pea 18f37 <PutChar+0x13db>
    8906:	|              |      jsr 170ba <KPrintF>
    890c:	|              |      addq.l #4,sp
		return FALSE;
    890e:	|              |      clr.w d0
    8910:	+--------------|----- bra.w 8c6a <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8914:	|              '----> movea.l 112(sp),a0
    8918:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    891c:	|                     move.l 74(sp),d1
    8920:	|                     move.l d1,d0
    8922:	|                     lsl.l #3,d0
    8924:	|                     sub.l d1,d0
    8926:	|                     add.l d0,d0
    8928:	|                     add.l d0,d0
    892a:	|                     move.l d0,70(sp)
    892e:	|                     clr.l 66(sp)
    8932:	|                     move.l 1c948 <SysBase>,d0
    8938:	|                     movea.l d0,a6
    893a:	|                     move.l 70(sp),d0
    893e:	|                     move.l 66(sp),d1
    8942:	|                     jsr -684(a6)
    8946:	|                     move.l d0,62(sp)
    894a:	|                     move.l 62(sp),d0
    894e:	|                     movea.l 112(sp),a0
    8952:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8956:	|                     movea.l 112(sp),a0
    895a:	|                     move.l 8(a0),d0
    895e:	|                 ,-- bne.s 8966 <loadSpriteBank+0x136>
    8960:	|                 |   clr.w d0
    8962:	+-----------------|-- bra.w 8c6a <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8966:	|                 '-> moveq #1,d0
    8968:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    896c:	|                     clr.l 100(sp)
    8970:	|     ,-------------- bra.w 8c48 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8974:	|  ,--|-------------> move.l 1c930 <bigDataFile>,d0
    897a:	|  |  |               move.l d0,-(sp)
    897c:	|  |  |               jsr 6bc <get2bytes>
    8982:	|  |  |               addq.l #4,sp
    8984:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8988:	|  |  |               movea.l 112(sp),a0
    898c:	|  |  |               movea.l 8(a0),a0
    8990:	|  |  |               move.l 100(sp),d1
    8994:	|  |  |               move.l d1,d0
    8996:	|  |  |               lsl.l #3,d0
    8998:	|  |  |               sub.l d1,d0
    899a:	|  |  |               add.l d0,d0
    899c:	|  |  |               add.l d0,d0
    899e:	|  |  |               adda.l d0,a0
    89a0:	|  |  |               moveq #0,d0
    89a2:	|  |  |               move.w 60(sp),d0
    89a6:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    89a8:	|  |  |               movea.l 1c930 <bigDataFile>,a1
    89ae:	|  |  |               movea.l 112(sp),a0
    89b2:	|  |  |               movea.l 8(a0),a0
    89b6:	|  |  |               move.l 100(sp),d1
    89ba:	|  |  |               move.l d1,d0
    89bc:	|  |  |               lsl.l #3,d0
    89be:	|  |  |               sub.l d1,d0
    89c0:	|  |  |               add.l d0,d0
    89c2:	|  |  |               add.l d0,d0
    89c4:	|  |  |               lea (0,a0,d0.l),a2
    89c8:	|  |  |               move.l a1,-(sp)
    89ca:	|  |  |               jsr 6bc <get2bytes>
    89d0:	|  |  |               addq.l #4,sp
    89d2:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    89d6:	|  |  |               movea.l 1c930 <bigDataFile>,a1
    89dc:	|  |  |               movea.l 112(sp),a0
    89e0:	|  |  |               movea.l 8(a0),a0
    89e4:	|  |  |               move.l 100(sp),d1
    89e8:	|  |  |               move.l d1,d0
    89ea:	|  |  |               lsl.l #3,d0
    89ec:	|  |  |               sub.l d1,d0
    89ee:	|  |  |               add.l d0,d0
    89f0:	|  |  |               add.l d0,d0
    89f2:	|  |  |               lea (0,a0,d0.l),a2
    89f6:	|  |  |               move.l a1,-(sp)
    89f8:	|  |  |               jsr 6bc <get2bytes>
    89fe:	|  |  |               addq.l #4,sp
    8a00:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8a04:	|  |  |               movea.l 1c930 <bigDataFile>,a1
    8a0a:	|  |  |               movea.l 112(sp),a0
    8a0e:	|  |  |               movea.l 8(a0),a0
    8a12:	|  |  |               move.l 100(sp),d1
    8a16:	|  |  |               move.l d1,d0
    8a18:	|  |  |               lsl.l #3,d0
    8a1a:	|  |  |               sub.l d1,d0
    8a1c:	|  |  |               add.l d0,d0
    8a1e:	|  |  |               add.l d0,d0
    8a20:	|  |  |               lea (0,a0,d0.l),a2
    8a24:	|  |  |               move.l a1,-(sp)
    8a26:	|  |  |               jsr 6bc <get2bytes>
    8a2c:	|  |  |               addq.l #4,sp
    8a2e:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8a32:	|  |  |               movea.l 112(sp),a0
    8a36:	|  |  |               move.l 4(a0),d0
    8a3a:	|  |  |               moveq #3,d1
    8a3c:	|  |  |               cmp.l d0,d1
    8a3e:	|  |  |     ,-------- beq.w 8ada <loadSpriteBank+0x2aa>
    8a42:	|  |  |     |         moveq #3,d1
    8a44:	|  |  |     |         cmp.l d0,d1
    8a46:	|  |  |  ,--|-------- blt.w 8b80 <loadSpriteBank+0x350>
    8a4a:	|  |  |  |  |         moveq #1,d1
    8a4c:	|  |  |  |  |         cmp.l d0,d1
    8a4e:	|  |  |  |  |     ,-- beq.s 8a5a <loadSpriteBank+0x22a>
    8a50:	|  |  |  |  |     |   moveq #2,d1
    8a52:	|  |  |  |  |     |   cmp.l d0,d1
    8a54:	|  |  |  |  |  ,--|-- beq.s 8a86 <loadSpriteBank+0x256>
    8a56:	|  |  |  +--|--|--|-- bra.w 8b80 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8a5a:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8a5e:	|  |  |  |  |  |      movea.l 8(a0),a0
    8a62:	|  |  |  |  |  |      move.l 100(sp),d1
    8a66:	|  |  |  |  |  |      move.l d1,d0
    8a68:	|  |  |  |  |  |      lsl.l #3,d0
    8a6a:	|  |  |  |  |  |      sub.l d1,d0
    8a6c:	|  |  |  |  |  |      add.l d0,d0
    8a6e:	|  |  |  |  |  |      add.l d0,d0
    8a70:	|  |  |  |  |  |      adda.l d0,a0
    8a72:	|  |  |  |  |  |      move.l 4(a0),d0
    8a76:	|  |  |  |  |  |      addq.l #2,d0
    8a78:	|  |  |  |  |  |      move.l d0,d0
    8a7a:	|  |  |  |  |  |      add.w d0,d0
    8a7c:	|  |  |  |  |  |      add.w d0,d0
    8a7e:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8a82:	|  |  |  +--|--|----- bra.w 8b80 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8a86:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8a8a:	|  |  |  |  |         movea.l 8(a0),a0
    8a8e:	|  |  |  |  |         move.l 100(sp),d1
    8a92:	|  |  |  |  |         move.l d1,d0
    8a94:	|  |  |  |  |         lsl.l #3,d0
    8a96:	|  |  |  |  |         sub.l d1,d0
    8a98:	|  |  |  |  |         add.l d0,d0
    8a9a:	|  |  |  |  |         add.l d0,d0
    8a9c:	|  |  |  |  |         adda.l d0,a0
    8a9e:	|  |  |  |  |         move.l (a0),d0
    8aa0:	|  |  |  |  |     ,-- bpl.s 8aa4 <loadSpriteBank+0x274>
    8aa2:	|  |  |  |  |     |   addq.l #7,d0
    8aa4:	|  |  |  |  |     '-> asr.l #3,d0
    8aa6:	|  |  |  |  |         move.l d0,d2
    8aa8:	|  |  |  |  |         movea.l 112(sp),a0
    8aac:	|  |  |  |  |         movea.l 8(a0),a0
    8ab0:	|  |  |  |  |         move.l 100(sp),d1
    8ab4:	|  |  |  |  |         move.l d1,d0
    8ab6:	|  |  |  |  |         lsl.l #3,d0
    8ab8:	|  |  |  |  |         sub.l d1,d0
    8aba:	|  |  |  |  |         add.l d0,d0
    8abc:	|  |  |  |  |         add.l d0,d0
    8abe:	|  |  |  |  |         adda.l d0,a0
    8ac0:	|  |  |  |  |         move.l 4(a0),d0
    8ac4:	|  |  |  |  |         move.l d0,d0
    8ac6:	|  |  |  |  |         move.w d2,d1
    8ac8:	|  |  |  |  |         muls.w d0,d1
    8aca:	|  |  |  |  |         move.w d1,d0
    8acc:	|  |  |  |  |         add.w d0,d0
    8ace:	|  |  |  |  |         add.w d1,d0
    8ad0:	|  |  |  |  |         add.w d0,d0
    8ad2:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8ad6:	|  |  |  +--|-------- bra.w 8b80 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8ada:	|  |  |  |  '-------> movea.l 112(sp),a0
    8ade:	|  |  |  |            movea.l 8(a0),a0
    8ae2:	|  |  |  |            move.l 100(sp),d1
    8ae6:	|  |  |  |            move.l d1,d0
    8ae8:	|  |  |  |            lsl.l #3,d0
    8aea:	|  |  |  |            sub.l d1,d0
    8aec:	|  |  |  |            add.l d0,d0
    8aee:	|  |  |  |            add.l d0,d0
    8af0:	|  |  |  |            adda.l d0,a0
    8af2:	|  |  |  |            move.l (a0),d0
    8af4:	|  |  |  |            andi.l #-2147483633,d0
    8afa:	|  |  |  |        ,-- bpl.s 8b04 <loadSpriteBank+0x2d4>
    8afc:	|  |  |  |        |   subq.l #1,d0
    8afe:	|  |  |  |        |   moveq #-16,d1
    8b00:	|  |  |  |        |   or.l d1,d0
    8b02:	|  |  |  |        |   addq.l #1,d0
    8b04:	|  |  |  |        '-> tst.l d0
    8b06:	|  |  |  |     ,----- ble.s 8b0c <loadSpriteBank+0x2dc>
    8b08:	|  |  |  |     |      moveq #2,d0
    8b0a:	|  |  |  |     |  ,-- bra.s 8b0e <loadSpriteBank+0x2de>
    8b0c:	|  |  |  |     '--|-> clr.w d0
    8b0e:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8b12:	|  |  |  |            movea.l 112(sp),a0
    8b16:	|  |  |  |            movea.l 8(a0),a0
    8b1a:	|  |  |  |            move.l 100(sp),d1
    8b1e:	|  |  |  |            move.l d1,d0
    8b20:	|  |  |  |            lsl.l #3,d0
    8b22:	|  |  |  |            sub.l d1,d0
    8b24:	|  |  |  |            add.l d0,d0
    8b26:	|  |  |  |            add.l d0,d0
    8b28:	|  |  |  |            adda.l d0,a0
    8b2a:	|  |  |  |            move.l (a0),d0
    8b2c:	|  |  |  |            movea.l d0,a0
    8b2e:	|  |  |  |            cmpa.w #0,a0
    8b32:	|  |  |  |        ,-- bge.s 8b38 <loadSpriteBank+0x308>
    8b34:	|  |  |  |        |   lea 15(a0),a0
    8b38:	|  |  |  |        '-> move.l a0,d0
    8b3a:	|  |  |  |            asr.l #4,d0
    8b3c:	|  |  |  |            add.l d0,d0
    8b3e:	|  |  |  |            move.l d0,d1
    8b40:	|  |  |  |            moveq #0,d0
    8b42:	|  |  |  |            move.w 58(sp),d0
    8b46:	|  |  |  |            add.l d1,d0
    8b48:	|  |  |  |            move.l d0,d2
    8b4a:	|  |  |  |            movea.l 112(sp),a0
    8b4e:	|  |  |  |            movea.l 8(a0),a0
    8b52:	|  |  |  |            move.l 100(sp),d1
    8b56:	|  |  |  |            move.l d1,d0
    8b58:	|  |  |  |            lsl.l #3,d0
    8b5a:	|  |  |  |            sub.l d1,d0
    8b5c:	|  |  |  |            add.l d0,d0
    8b5e:	|  |  |  |            add.l d0,d0
    8b60:	|  |  |  |            adda.l d0,a0
    8b62:	|  |  |  |            move.l 4(a0),d0
    8b66:	|  |  |  |            move.l d0,d0
    8b68:	|  |  |  |            move.w d2,d1
    8b6a:	|  |  |  |            muls.w d0,d1
    8b6c:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8b70:	|  |  |  |            cmpi.w #100,98(sp)
    8b76:	|  |  |  |        ,-- bls.s 8b7e <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8b78:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8b7e:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8b80:	|  |  |  '----------> moveq #0,d0
    8b82:	|  |  |               move.w 98(sp),d0
    8b86:	|  |  |               add.l d0,d0
    8b88:	|  |  |               move.l d0,52(sp)
    8b8c:	|  |  |               moveq #2,d0
    8b8e:	|  |  |               move.l d0,48(sp)
    8b92:	|  |  |               move.l 1c948 <SysBase>,d0
    8b98:	|  |  |               movea.l d0,a6
    8b9a:	|  |  |               move.l 52(sp),d0
    8b9e:	|  |  |               move.l 48(sp),d1
    8ba2:	|  |  |               jsr -684(a6)
    8ba6:	|  |  |               move.l d0,44(sp)
    8baa:	|  |  |               movea.l 44(sp),a1
    8bae:	|  |  |               movea.l 112(sp),a0
    8bb2:	|  |  |               movea.l 8(a0),a0
    8bb6:	|  |  |               move.l 100(sp),d1
    8bba:	|  |  |               move.l d1,d0
    8bbc:	|  |  |               lsl.l #3,d0
    8bbe:	|  |  |               sub.l d1,d0
    8bc0:	|  |  |               add.l d0,d0
    8bc2:	|  |  |               add.l d0,d0
    8bc4:	|  |  |               adda.l d0,a0
    8bc6:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8bca:	|  |  |               move.l 1c930 <bigDataFile>,40(sp)
    8bd2:	|  |  |               movea.l 112(sp),a0
    8bd6:	|  |  |               movea.l 8(a0),a0
    8bda:	|  |  |               move.l 100(sp),d1
    8bde:	|  |  |               move.l d1,d0
    8be0:	|  |  |               lsl.l #3,d0
    8be2:	|  |  |               sub.l d1,d0
    8be4:	|  |  |               add.l d0,d0
    8be6:	|  |  |               add.l d0,d0
    8be8:	|  |  |               adda.l d0,a0
    8bea:	|  |  |               move.l 24(a0),36(sp)
    8bf0:	|  |  |               moveq #2,d1
    8bf2:	|  |  |               move.l d1,32(sp)
    8bf6:	|  |  |               move.w 98(sp),d0
    8bfa:	|  |  |               lsr.w #1,d0
    8bfc:	|  |  |               move.w d0,d0
    8bfe:	|  |  |               andi.l #65535,d0
    8c04:	|  |  |               move.l d0,28(sp)
    8c08:	|  |  |               move.l 1c950 <DOSBase>,d0
    8c0e:	|  |  |               movea.l d0,a6
    8c10:	|  |  |               move.l 40(sp),d1
    8c14:	|  |  |               move.l 36(sp),d2
    8c18:	|  |  |               move.l 32(sp),d3
    8c1c:	|  |  |               move.l 28(sp),d4
    8c20:	|  |  |               jsr -324(a6)
    8c24:	|  |  |               move.l d0,24(sp)
    8c28:	|  |  |               move.l 24(sp),d0
    8c2c:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8c30:	|  |  |           ,-- bne.s 8c44 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8c32:	|  |  |           |   pea 18f6c <PutChar+0x1410>
    8c38:	|  |  |           |   jsr 170ba <KPrintF>
    8c3e:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8c40:	|  |  |           |   clr.w d0
    8c42:	+--|--|-----------|-- bra.s 8c6a <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8c44:	|  |  |           '-> addq.l #1,100(sp)
    8c48:	|  |  '-------------> move.l 100(sp),d0
    8c4c:	|  |                  cmp.l 74(sp),d0
    8c50:	|  '----------------- blt.w 8974 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8c54:	|                     jsr 73c8 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8c5a:	|                     pea 18f9f <PutChar+0x1443>
    8c60:	|                     jsr 170ba <KPrintF>
    8c66:	|                     addq.l #4,sp
	return TRUE;
    8c68:	|                     moveq #1,d0
}
    8c6a:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8c6e:	                      lea 84(sp),sp
    8c72:	                      rts

00008c74 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8c74:	                   lea -16(sp),sp
    8c78:	                   move.l d2,-(sp)
    8c7a:	                   move.l 32(sp),d0
    8c7e:	                   move.w d0,d0
    8c80:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8c84:	                   movea.l 28(sp),a0
    8c88:	                   move.l (a0),d2
    8c8a:	                   movea.l 24(sp),a0
    8c8e:	                   move.l 8(a0),d0
    8c92:	                   move.l d0,-(sp)
    8c94:	                   jsr 174ec <__floatsisf>
    8c9a:	                   addq.l #4,sp
    8c9c:	                   move.l d0,-(sp)
    8c9e:	                   move.l d2,-(sp)
    8ca0:	                   jsr 177e0 <__subsf3>
    8ca6:	                   addq.l #8,sp
    8ca8:	                   move.l d0,-(sp)
    8caa:	                   jsr 17484 <__fixsfsi>
    8cb0:	                   addq.l #4,sp
    8cb2:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8cb6:	                   movea.l 28(sp),a0
    8cba:	                   move.l 4(a0),d2
    8cbe:	                   movea.l 24(sp),a0
    8cc2:	                   move.l 12(a0),d0
    8cc6:	                   move.l d0,-(sp)
    8cc8:	                   jsr 174ec <__floatsisf>
    8cce:	                   addq.l #4,sp
    8cd0:	                   move.l d0,-(sp)
    8cd2:	                   move.l d2,-(sp)
    8cd4:	                   jsr 177e0 <__subsf3>
    8cda:	                   addq.l #8,sp
    8cdc:	                   move.l d0,-(sp)
    8cde:	                   jsr 17484 <__fixsfsi>
    8ce4:	                   addq.l #4,sp
    8ce6:	                   move.w d0,8(sp)

	if( x < 0)
    8cea:	                   tst.w 18(sp)
    8cee:	               ,-- bge.s 8d22 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8cf0:	               |   movea.l 28(sp),a0
    8cf4:	               |   move.l (a0),d2
    8cf6:	               |   movea.l 24(sp),a0
    8cfa:	               |   move.l 8(a0),d0
    8cfe:	               |   move.l d0,-(sp)
    8d00:	               |   jsr 174ec <__floatsisf>
    8d06:	               |   addq.l #4,sp
    8d08:	               |   move.l d0,-(sp)
    8d0a:	               |   move.l d2,-(sp)
    8d0c:	               |   jsr 177e0 <__subsf3>
    8d12:	               |   addq.l #8,sp
    8d14:	               |   move.l d0,-(sp)
    8d16:	               |   jsr 17484 <__fixsfsi>
    8d1c:	               |   addq.l #4,sp
    8d1e:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8d22:	               '-> movea.w 8(sp),a1
    8d26:	                   movea.w 18(sp),a0
    8d2a:	                   pea 1 <_start+0x1>
    8d2e:	                   move.l a1,-(sp)
    8d30:	                   move.l a0,-(sp)
    8d32:	                   move.l 40(sp),-(sp)
    8d36:	                   move.l 40(sp),-(sp)
    8d3a:	                   jsr 2b36 <CstScaleSprite>
    8d40:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8d44:	                   movea.l 28(sp),a0
    8d48:	                   move.l 118(a0),d0
    8d4c:	                   moveq #8,d1
    8d4e:	                   and.l d1,d0
    8d50:	   ,-------------- beq.w 8e1c <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8d54:	   |               movea.l 24(sp),a0
    8d58:	   |               move.l 8(a0),d0
    8d5c:	   |  ,----------- bpl.s 8d98 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8d5e:	   |  |            move.w 18(sp),d0
    8d62:	   |  |            tst.w 6(sp)
    8d66:	   |  |     ,----- beq.s 8d80 <scaleSprite+0x10c>
    8d68:	   |  |     |      movea.l 24(sp),a0
    8d6c:	   |  |     |      move.l (a0),d1
    8d6e:	   |  |     |      move.l d1,d2
    8d70:	   |  |     |      movea.l 24(sp),a0
    8d74:	   |  |     |      move.l 8(a0),d1
    8d78:	   |  |     |      move.l d1,d1
    8d7a:	   |  |     |      movea.w d2,a0
    8d7c:	   |  |     |      suba.w d1,a0
    8d7e:	   |  |     |  ,-- bra.s 8d8e <scaleSprite+0x11a>
    8d80:	   |  |     '--|-> movea.l 24(sp),a0
    8d84:	   |  |        |   move.l 8(a0),d1
    8d88:	   |  |        |   move.l d1,d1
    8d8a:	   |  |        |   movea.w d1,a0
    8d8c:	   |  |        |   addq.w #1,a0
    8d8e:	   |  |        '-> move.w d0,d1
    8d90:	   |  |            sub.w a0,d1
    8d92:	   |  |            move.w d1,16(sp)
    8d96:	   |  |  ,-------- bra.s 8dd0 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8d98:	   |  '--|-------> move.w 18(sp),d1
    8d9c:	   |     |         tst.w 6(sp)
    8da0:	   |     |  ,----- beq.s 8dbe <scaleSprite+0x14a>
    8da2:	   |     |  |      movea.l 24(sp),a0
    8da6:	   |     |  |      move.l (a0),d0
    8da8:	   |     |  |      move.l d0,d2
    8daa:	   |     |  |      movea.l 24(sp),a0
    8dae:	   |     |  |      move.l 8(a0),d0
    8db2:	   |     |  |      move.l d0,d0
    8db4:	   |     |  |      movea.w d2,a0
    8db6:	   |     |  |      suba.w d0,a0
    8db8:	   |     |  |      move.w a0,d0
    8dba:	   |     |  |      subq.w #1,d0
    8dbc:	   |     |  |  ,-- bra.s 8dc8 <scaleSprite+0x154>
    8dbe:	   |     |  '--|-> movea.l 24(sp),a0
    8dc2:	   |     |     |   move.l 8(a0),d0
    8dc6:	   |     |     |   move.l d0,d0
    8dc8:	   |     |     '-> movea.w d1,a0
    8dca:	   |     |         suba.w d0,a0
    8dcc:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8dd0:	   |     '-------> movea.l 28(sp),a0
    8dd4:	   |               move.l 24(a0),d0
    8dd8:	   |               move.l d0,d1
    8dda:	   |               movea.l 24(sp),a0
    8dde:	   |               move.l 12(a0),d0
    8de2:	   |               move.l d0,d0
    8de4:	   |               sub.w d0,d1
    8de6:	   |               move.w 8(sp),d0
    8dea:	   |               movea.w d1,a0
    8dec:	   |               adda.w d0,a0
    8dee:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8df2:	   |               movea.l 24(sp),a0
    8df6:	   |               move.l (a0),d0
    8df8:	   |               move.l d0,d0
    8dfa:	   |               move.w 16(sp),d1
    8dfe:	   |               add.w d0,d1
    8e00:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8e04:	   |               movea.l 24(sp),a0
    8e08:	   |               move.l 4(a0),d0
    8e0c:	   |               move.l d0,d0
    8e0e:	   |               movea.w 14(sp),a0
    8e12:	   |               adda.w d0,a0
    8e14:	   |               move.w a0,10(sp)
    8e18:	,--|-------------- bra.w 8f04 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8e1c:	|  '-------------> move.w 18(sp),d1
    8e20:	|                  move.l 1c9fe <cameraX>,d0
    8e26:	|                  move.l d0,d0
    8e28:	|                  sub.w d0,d1
    8e2a:	|                  move.w d1,18(sp)
		y -= cameraY;
    8e2e:	|                  move.w 8(sp),d1
    8e32:	|                  move.l 1ca02 <cameraY>,d0
    8e38:	|                  move.l d0,d0
    8e3a:	|                  sub.w d0,d1
    8e3c:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8e40:	|                  movea.l 24(sp),a0
    8e44:	|                  move.l 8(a0),d0
    8e48:	|     ,----------- bpl.s 8e84 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e4a:	|     |            move.w 18(sp),d0
    8e4e:	|     |            tst.w 6(sp)
    8e52:	|     |     ,----- beq.s 8e6c <scaleSprite+0x1f8>
    8e54:	|     |     |      movea.l 24(sp),a0
    8e58:	|     |     |      move.l (a0),d1
    8e5a:	|     |     |      move.l d1,d2
    8e5c:	|     |     |      movea.l 24(sp),a0
    8e60:	|     |     |      move.l 8(a0),d1
    8e64:	|     |     |      move.l d1,d1
    8e66:	|     |     |      movea.w d2,a0
    8e68:	|     |     |      suba.w d1,a0
    8e6a:	|     |     |  ,-- bra.s 8e7a <scaleSprite+0x206>
    8e6c:	|     |     '--|-> movea.l 24(sp),a0
    8e70:	|     |        |   move.l 8(a0),d1
    8e74:	|     |        |   move.l d1,d1
    8e76:	|     |        |   movea.w d1,a0
    8e78:	|     |        |   addq.w #1,a0
    8e7a:	|     |        '-> move.w d0,d1
    8e7c:	|     |            sub.w a0,d1
    8e7e:	|     |            move.w d1,16(sp)
    8e82:	|     |  ,-------- bra.s 8ebc <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8e84:	|     '--|-------> move.w 18(sp),d1
    8e88:	|        |         tst.w 6(sp)
    8e8c:	|        |  ,----- beq.s 8eaa <scaleSprite+0x236>
    8e8e:	|        |  |      movea.l 24(sp),a0
    8e92:	|        |  |      move.l (a0),d0
    8e94:	|        |  |      move.l d0,d2
    8e96:	|        |  |      movea.l 24(sp),a0
    8e9a:	|        |  |      move.l 8(a0),d0
    8e9e:	|        |  |      move.l d0,d0
    8ea0:	|        |  |      movea.w d2,a0
    8ea2:	|        |  |      suba.w d0,a0
    8ea4:	|        |  |      move.w a0,d0
    8ea6:	|        |  |      subq.w #1,d0
    8ea8:	|        |  |  ,-- bra.s 8eb4 <scaleSprite+0x240>
    8eaa:	|        |  '--|-> movea.l 24(sp),a0
    8eae:	|        |     |   move.l 8(a0),d0
    8eb2:	|        |     |   move.l d0,d0
    8eb4:	|        |     '-> movea.w d1,a0
    8eb6:	|        |         suba.w d0,a0
    8eb8:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8ebc:	|        '-------> movea.l 28(sp),a0
    8ec0:	|                  move.l 24(a0),d0
    8ec4:	|                  move.l d0,d1
    8ec6:	|                  movea.l 24(sp),a0
    8eca:	|                  move.l 12(a0),d0
    8ece:	|                  move.l d0,d0
    8ed0:	|                  sub.w d0,d1
    8ed2:	|                  move.w 8(sp),d0
    8ed6:	|                  movea.w d1,a0
    8ed8:	|                  adda.w d0,a0
    8eda:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    8ede:	|                  movea.l 24(sp),a0
    8ee2:	|                  move.l (a0),d0
    8ee4:	|                  move.l d0,d0
    8ee6:	|                  move.w 16(sp),d1
    8eea:	|                  add.w d0,d1
    8eec:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    8ef0:	|                  movea.l 24(sp),a0
    8ef4:	|                  move.l 4(a0),d0
    8ef8:	|                  move.l d0,d0
    8efa:	|                  movea.w 14(sp),a0
    8efe:	|                  adda.w d0,a0
    8f00:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8f04:	'----------------> move.l 1c904 <input+0xa>,d1
    8f0a:	                   moveq #0,d0
    8f0c:	                   move.w 16(sp),d0
    8f10:	                   cmp.l d1,d0
    8f12:	            ,----- bgt.s 8f48 <scaleSprite+0x2d4>
    8f14:	            |      move.l 1c904 <input+0xa>,d1
    8f1a:	            |      moveq #0,d0
    8f1c:	            |      move.w 12(sp),d0
    8f20:	            |      cmp.l d1,d0
    8f22:	            +----- blt.s 8f48 <scaleSprite+0x2d4>
    8f24:	            |      move.l 1c908 <input+0xe>,d1
    8f2a:	            |      moveq #0,d0
    8f2c:	            |      move.w 14(sp),d0
    8f30:	            |      cmp.l d1,d0
    8f32:	            +----- bgt.s 8f48 <scaleSprite+0x2d4>
    8f34:	            |      move.l 1c908 <input+0xe>,d1
    8f3a:	            |      moveq #0,d0
    8f3c:	            |      move.w 10(sp),d0
    8f40:	            |      cmp.l d1,d0
    8f42:	            +----- blt.s 8f48 <scaleSprite+0x2d4>
		return TRUE;
    8f44:	            |      moveq #1,d0
    8f46:	            |  ,-- bra.s 8f4a <scaleSprite+0x2d6>
	}
	return FALSE;
    8f48:	            '--|-> clr.w d0
    8f4a:	               '-> move.l (sp)+,d2
    8f4c:	                   lea 16(sp),sp
    8f50:	                   rts

00008f52 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8f52:	    move.l 4(sp),d0
    8f56:	,-- bpl.s 8f5a <TF_abs+0x8>
    8f58:	|   neg.l d0
}
    8f5a:	'-> rts

00008f5c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8f5c:	             lea -28(sp),sp
    8f60:	             move.l a6,-(sp)
    8f62:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8f64:	             move.l #132,28(sp)
    8f6c:	             clr.l 24(sp)
    8f70:	             move.l 1c948 <SysBase>,d0
    8f76:	             movea.l d0,a6
    8f78:	             move.l 28(sp),d0
    8f7c:	             move.l 24(sp),d1
    8f80:	             jsr -684(a6)
    8f84:	             move.l d0,20(sp)
    8f88:	             move.l 20(sp),d0
    8f8c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8f90:	         ,-- bne.s 8f98 <addPerson+0x3c>
    8f92:	         |   clr.w d0
    8f94:	,--------|-- bra.w 91c8 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8f98:	|        '-> move.l 48(sp),-(sp)
    8f9c:	|            jsr d3c0 <loadObjectType>
    8fa2:	|            addq.l #4,sp
    8fa4:	|            movea.l 16(sp),a0
    8fa8:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8fac:	|            movea.l 16(sp),a0
    8fb0:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8fb8:	|            movea.l 16(sp),a0
    8fbc:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8fc0:	|            movea.l 16(sp),a0
    8fc4:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8fc8:	|            move.l 44(sp),-(sp)
    8fcc:	|            jsr 174ec <__floatsisf>
    8fd2:	|            addq.l #4,sp
    8fd4:	|            move.l d0,d2
    8fd6:	|            move.l 40(sp),-(sp)
    8fda:	|            jsr 174ec <__floatsisf>
    8fe0:	|            addq.l #4,sp
    8fe2:	|            move.l d2,-(sp)
    8fe4:	|            move.l d0,-(sp)
    8fe6:	|            move.l 24(sp),-(sp)
    8fea:	|            jsr ab0c <moveAndScale>
    8ff0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8ff4:	|            movea.l 16(sp),a0
    8ff8:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8ffc:	|            movea.l 16(sp),a0
    9000:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9006:	|            movea.l 16(sp),a0
    900a:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9010:	|            movea.l 16(sp),a0
    9014:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9018:	|            movea.l 16(sp),a0
    901c:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9020:	|            movea.l 16(sp),a0
    9024:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    902a:	|            movea.l 16(sp),a0
    902e:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9032:	|            movea.l 16(sp),a0
    9036:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    903e:	|            movea.l 16(sp),a0
    9042:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    904a:	|            movea.l 16(sp),a0
    904e:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9052:	|            movea.l 16(sp),a0
    9056:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    905a:	|            movea.l 16(sp),a0
    905e:	|            movea.l 114(a0),a0
    9062:	|            move.l 24(a0),d0
    9066:	|            movea.l 16(sp),a0
    906a:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    906e:	|            movea.l 16(sp),a0
    9072:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9076:	|            movea.l 16(sp),a0
    907a:	|            movea.l 114(a0),a0
    907e:	|            move.l 32(a0),d0
    9082:	|            movea.l 16(sp),a0
    9086:	|            move.l d0,122(a0)
    newPerson->r = 0;
    908a:	|            movea.l 16(sp),a0
    908e:	|            clr.b 126(a0)
    newPerson->g = 0;
    9092:	|            movea.l 16(sp),a0
    9096:	|            clr.b 127(a0)
    newPerson->b = 0;
    909a:	|            movea.l 16(sp),a0
    909e:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    90a2:	|            movea.l 16(sp),a0
    90a6:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    90aa:	|            movea.l 16(sp),a0
    90ae:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    90b2:	|            movea.l 16(sp),a0
    90b6:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    90bc:	|            clr.l -(sp)
    90be:	|            move.l 20(sp),-(sp)
    90c2:	|            jsr 3fb6 <setFrames>
    90c8:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    90ca:	|            movea.l 52(sp),a0
    90ce:	|            movea.l (a0),a0
    90d0:	|            movea.l (a0),a0
    90d2:	|            movea.l 4(a0),a0
    90d6:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    90da:	|     ,----- bpl.s 90e4 <addPerson+0x188>
    90dc:	|     |      move.l 12(sp),d0
    90e0:	|     |      neg.l d0
    90e2:	|     |  ,-- bra.s 90e6 <addPerson+0x18a>
    90e4:	|     '--|-> moveq #1,d0
    90e6:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    90ea:	|            movea.l 52(sp),a0
    90ee:	|            movea.l (a0),a0
    90f0:	|            movea.l (a0),a0
    90f2:	|            movea.l (a0),a0
    90f4:	|            move.l 8(a0),d0
    90f8:	|            cmp.l 8(sp),d0
    90fc:	|     ,----- bgt.s 912e <addPerson+0x1d2>
        if (fNumSigned < 0) {
    90fe:	|     |      tst.l 12(sp)
    9102:	|     |  ,-- bge.s 9110 <addPerson+0x1b4>
            newPerson->height = 5;
    9104:	|     |  |   movea.l 16(sp),a0
    9108:	|     |  |   moveq #5,d0
    910a:	|     |  |   move.l d0,20(a0)
    910e:	|  ,--|--|-- bra.s 915a <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9110:	|  |  |  '-> movea.l 52(sp),a0
    9114:	|  |  |      movea.l (a0),a0
    9116:	|  |  |      movea.l (a0),a0
    9118:	|  |  |      movea.l (a0),a0
    911a:	|  |  |      movea.l 16(a0),a0
    911e:	|  |  |      move.l 12(a0),d0
    9122:	|  |  |      addq.l #5,d0
    9124:	|  |  |      movea.l 16(sp),a0
    9128:	|  |  |      move.l d0,20(a0)
    912c:	|  +--|----- bra.s 915a <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    912e:	|  |  '----> movea.l 52(sp),a0
    9132:	|  |         movea.l (a0),a0
    9134:	|  |         movea.l (a0),a0
    9136:	|  |         movea.l (a0),a0
    9138:	|  |         movea.l 16(a0),a0
    913c:	|  |         move.l 8(sp),d1
    9140:	|  |         move.l d1,d0
    9142:	|  |         lsl.l #3,d0
    9144:	|  |         sub.l d1,d0
    9146:	|  |         add.l d0,d0
    9148:	|  |         add.l d0,d0
    914a:	|  |         adda.l d0,a0
    914c:	|  |         move.l 12(a0),d0
    9150:	|  |         addq.l #5,d0
    9152:	|  |         movea.l 16(sp),a0
    9156:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    915a:	|  '-------> move.l #117160,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9162:	|        ,-- bra.s 9172 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9164:	|     ,--|-> movea.l 32(sp),a0
    9168:	|     |  |   move.l (a0),d0
    916a:	|     |  |   moveq #36,d1
    916c:	|     |  |   add.l d0,d1
    916e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9172:	|     |  '-> movea.l 32(sp),a0
    9176:	|     |      move.l (a0),d0
    9178:	|     |  ,-- beq.s 91a0 <addPerson+0x244>
    917a:	|     |  |   movea.l 32(sp),a0
    917e:	|     |  |   movea.l (a0),a0
    9180:	|     |  |   move.l 4(a0),d2
    9184:	|     |  |   move.l 44(sp),-(sp)
    9188:	|     |  |   jsr 174ec <__floatsisf>
    918e:	|     |  |   addq.l #4,sp
    9190:	|     |  |   move.l d0,-(sp)
    9192:	|     |  |   move.l d2,-(sp)
    9194:	|     |  |   jsr 17712 <__ltsf2>
    919a:	|     |  |   addq.l #8,sp
    919c:	|     |  |   tst.l d0
    919e:	|     '--|-- blt.s 9164 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    91a0:	|        '-> movea.l 32(sp),a0
    91a4:	|            move.l (a0),d0
    91a6:	|            movea.l 16(sp),a0
    91aa:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    91ae:	|            movea.l 32(sp),a0
    91b2:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    91b6:	|            movea.l 16(sp),a0
    91ba:	|            move.l 114(a0),d0
    91be:	|            sne d0
    91c0:	|            neg.b d0
    91c2:	|            move.b d0,d0
    91c4:	|            andi.w #255,d0
}
    91c8:	'----------> move.l (sp)+,d2
    91ca:	             movea.l (sp)+,a6
    91cc:	             lea 28(sp),sp
    91d0:	             rts

000091d2 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    91d2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    91d4:	       move.l 8(sp),-(sp)
    91d8:	       jsr a362 <findPerson>
    91de:	       addq.l #4,sp
    91e0:	       move.l d0,(sp)
    if (moveMe) {
    91e2:	,----- beq.s 9216 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    91e4:	|      movea.l (sp),a0
    91e6:	|      move.l 68(a0),d0
    91ea:	|  ,-- beq.s 91fc <animatePerson+0x2a>
    91ec:	|  |   movea.l (sp),a0
    91ee:	|  |   move.l 68(a0),d0
    91f2:	|  |   move.l d0,-(sp)
    91f4:	|  |   jsr 4e14 <abortFunction>
    91fa:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    91fc:	|  '-> movea.l (sp),a0
    91fe:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9202:	|      movea.l (sp),a0
    9204:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9208:	|      movea.l (sp),a0
    920a:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    920e:	|      movea.l (sp),a0
    9210:	|      move.l 12(sp),72(a0)
    }
}
    9216:	'----> nop
    9218:	       addq.l #4,sp
    921a:	       rts

0000921c <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    921c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    921e:	       move.l 8(sp),-(sp)
    9222:	       jsr a362 <findPerson>
    9228:	       addq.l #4,sp
    922a:	       move.l d0,(sp)
    if (moveMe) {
    922c:	,----- beq.s 926e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    922e:	|      movea.l (sp),a0
    9230:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9234:	|      movea.l (sp),a0
    9236:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    923c:	|      move.l (sp),-(sp)
    923e:	|      jsr ac9a <rethinkAngle>
    9244:	|      addq.l #4,sp
        if (moveMe->walking) {
    9246:	|      movea.l (sp),a0
    9248:	|      move.w 64(a0),d0
    924c:	|  ,-- beq.s 9260 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    924e:	|  |   pea 1 <_start+0x1>
    9252:	|  |   move.l 4(sp),-(sp)
    9256:	|  |   jsr 3fb6 <setFrames>
    925c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    925e:	+--|-- bra.s 926e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9260:	|  '-> clr.l -(sp)
    9262:	|      move.l 4(sp),-(sp)
    9266:	|      jsr 3fb6 <setFrames>
    926c:	|      addq.l #8,sp
}
    926e:	'----> nop
    9270:	       addq.l #4,sp
    9272:	       rts

00009274 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9274:	             lea -36(sp),sp
    9278:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    927a:	             movea.l 44(sp),a0
    927e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9284:	             moveq #12,d0
    9286:	             move.l d0,28(sp)
    928a:	             clr.l 24(sp)
    928e:	             move.l 1c948 <SysBase>,d0
    9294:	             movea.l d0,a6
    9296:	             move.l 28(sp),d0
    929a:	             move.l 24(sp),d1
    929e:	             jsr -684(a6)
    92a2:	             move.l d0,20(sp)
    92a6:	             move.l 20(sp),d0
    92aa:	             move.l d0,16(sp)
	if (!(newAnim)) {
    92ae:	         ,-- bne.s 92c4 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    92b0:	         |   pea 18fb9 <PutChar+0x145d>
    92b6:	         |   jsr 170ba <KPrintF>
    92bc:	         |   addq.l #4,sp
		return NULL;
    92be:	         |   moveq #0,d0
    92c0:	,--------|-- bra.w 9416 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    92c4:	|        '-> movea.l 44(sp),a0
    92c8:	|            move.l (a0),d0
    92ca:	|            movea.l 16(sp),a0
    92ce:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    92d0:	|            movea.l 16(sp),a0
    92d4:	|            movea.l (a0),a0
    92d6:	|            move.l 4(a0),d0
    92da:	|            addq.l #1,d0
    92dc:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    92e0:	|            movea.l 16(sp),a0
    92e4:	|            move.l 32(sp),8(a0)

	if (num) {
    92ea:	|  ,-------- beq.w 940a <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    92ee:	|  |         move.l 32(sp),d1
    92f2:	|  |         move.l d1,d0
    92f4:	|  |         add.l d0,d0
    92f6:	|  |         add.l d1,d0
    92f8:	|  |         add.l d0,d0
    92fa:	|  |         add.l d0,d0
    92fc:	|  |         move.l d0,12(sp)
    9300:	|  |         clr.l 8(sp)
    9304:	|  |         move.l 1c948 <SysBase>,d0
    930a:	|  |         movea.l d0,a6
    930c:	|  |         move.l 12(sp),d0
    9310:	|  |         move.l 8(sp),d1
    9314:	|  |         jsr -684(a6)
    9318:	|  |         move.l d0,4(sp)
    931c:	|  |         move.l 4(sp),d0
    9320:	|  |         movea.l 16(sp),a0
    9324:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9328:	|  |         movea.l 16(sp),a0
    932c:	|  |         move.l 4(a0),d0
    9330:	|  |     ,-- bne.s 9346 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9332:	|  |     |   pea 18fb9 <PutChar+0x145d>
    9338:	|  |     |   jsr 170ba <KPrintF>
    933e:	|  |     |   addq.l #4,sp
			return NULL;
    9340:	|  |     |   moveq #0,d0
    9342:	+--|-----|-- bra.w 9416 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9346:	|  |     '-> clr.l 36(sp)
    934a:	|  |     ,-- bra.w 93fc <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    934e:	|  |  ,--|-> movea.l 44(sp),a0
    9352:	|  |  |  |   movea.l 4(a0),a0
    9356:	|  |  |  |   move.l 36(sp),d1
    935a:	|  |  |  |   move.l d1,d0
    935c:	|  |  |  |   add.l d0,d0
    935e:	|  |  |  |   add.l d1,d0
    9360:	|  |  |  |   add.l d0,d0
    9362:	|  |  |  |   add.l d0,d0
    9364:	|  |  |  |   lea (0,a0,d0.l),a1
    9368:	|  |  |  |   movea.l 16(sp),a0
    936c:	|  |  |  |   movea.l 4(a0),a0
    9370:	|  |  |  |   move.l 36(sp),d1
    9374:	|  |  |  |   move.l d1,d0
    9376:	|  |  |  |   add.l d0,d0
    9378:	|  |  |  |   add.l d1,d0
    937a:	|  |  |  |   add.l d0,d0
    937c:	|  |  |  |   add.l d0,d0
    937e:	|  |  |  |   adda.l d0,a0
    9380:	|  |  |  |   move.l (a1),d0
    9382:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9384:	|  |  |  |   movea.l 44(sp),a0
    9388:	|  |  |  |   movea.l 4(a0),a0
    938c:	|  |  |  |   move.l 36(sp),d1
    9390:	|  |  |  |   move.l d1,d0
    9392:	|  |  |  |   add.l d0,d0
    9394:	|  |  |  |   add.l d1,d0
    9396:	|  |  |  |   add.l d0,d0
    9398:	|  |  |  |   add.l d0,d0
    939a:	|  |  |  |   lea (0,a0,d0.l),a1
    939e:	|  |  |  |   movea.l 16(sp),a0
    93a2:	|  |  |  |   movea.l 4(a0),a0
    93a6:	|  |  |  |   move.l 36(sp),d1
    93aa:	|  |  |  |   move.l d1,d0
    93ac:	|  |  |  |   add.l d0,d0
    93ae:	|  |  |  |   add.l d1,d0
    93b0:	|  |  |  |   add.l d0,d0
    93b2:	|  |  |  |   add.l d0,d0
    93b4:	|  |  |  |   adda.l d0,a0
    93b6:	|  |  |  |   move.l 4(a1),d0
    93ba:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    93be:	|  |  |  |   movea.l 44(sp),a0
    93c2:	|  |  |  |   movea.l 4(a0),a0
    93c6:	|  |  |  |   move.l 36(sp),d1
    93ca:	|  |  |  |   move.l d1,d0
    93cc:	|  |  |  |   add.l d0,d0
    93ce:	|  |  |  |   add.l d1,d0
    93d0:	|  |  |  |   add.l d0,d0
    93d2:	|  |  |  |   add.l d0,d0
    93d4:	|  |  |  |   lea (0,a0,d0.l),a1
    93d8:	|  |  |  |   movea.l 16(sp),a0
    93dc:	|  |  |  |   movea.l 4(a0),a0
    93e0:	|  |  |  |   move.l 36(sp),d1
    93e4:	|  |  |  |   move.l d1,d0
    93e6:	|  |  |  |   add.l d0,d0
    93e8:	|  |  |  |   add.l d1,d0
    93ea:	|  |  |  |   add.l d0,d0
    93ec:	|  |  |  |   add.l d0,d0
    93ee:	|  |  |  |   adda.l d0,a0
    93f0:	|  |  |  |   move.l 8(a1),d0
    93f4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    93f8:	|  |  |  |   addq.l #1,36(sp)
    93fc:	|  |  |  '-> move.l 36(sp),d0
    9400:	|  |  |      cmp.l 32(sp),d0
    9404:	|  |  '----- blt.w 934e <copyAnim+0xda>
    9408:	|  |     ,-- bra.s 9412 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    940a:	|  '-----|-> movea.l 16(sp),a0
    940e:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9412:	|        '-> move.l 16(sp),d0
}
    9416:	'----------> movea.l (sp)+,a6
    9418:	             lea 36(sp),sp
    941c:	             rts

0000941e <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    941e:	                lea -44(sp),sp
    9422:	                move.l a6,-(sp)
    9424:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9426:	                moveq #12,d0
    9428:	                move.l d0,40(sp)
    942c:	                clr.l 36(sp)
    9430:	                move.l 1c948 <SysBase>,d0
    9436:	                movea.l d0,a6
    9438:	                move.l 40(sp),d0
    943c:	                move.l 36(sp),d1
    9440:	                jsr -684(a6)
    9444:	                move.l d0,32(sp)
    9448:	                move.l 32(sp),d0
    944c:	                move.l d0,28(sp)
	if( !newP) {
    9450:	            ,-- bne.s 9466 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9452:	            |   pea 18fda <PutChar+0x147e>
    9458:	            |   jsr 170ba <KPrintF>
    945e:	            |   addq.l #4,sp
		return NULL;
    9460:	            |   moveq #0,d0
    9462:	,-----------|-- bra.w 9636 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9466:	|           '-> movea.l 28(sp),a0
    946a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9470:	|               move.l 56(sp),d1
    9474:	|               move.l d1,d0
    9476:	|               add.l d0,d0
    9478:	|               add.l d1,d0
    947a:	|               add.l d0,d0
    947c:	|               add.l d0,d0
    947e:	|               move.l d0,24(sp)
    9482:	|               clr.l 20(sp)
    9486:	|               move.l 1c948 <SysBase>,d0
    948c:	|               movea.l d0,a6
    948e:	|               move.l 24(sp),d0
    9492:	|               move.l 20(sp),d1
    9496:	|               jsr -684(a6)
    949a:	|               move.l d0,16(sp)
    949e:	|               move.l 16(sp),d0
    94a2:	|               movea.l 28(sp),a0
    94a6:	|               move.l d0,4(a0)
	if( !newP->frames) {
    94aa:	|               movea.l 28(sp),a0
    94ae:	|               move.l 4(a0),d0
    94b2:	|           ,-- bne.s 94c8 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    94b4:	|           |   pea 18fda <PutChar+0x147e>
    94ba:	|           |   jsr 170ba <KPrintF>
    94c0:	|           |   addq.l #4,sp
		return NULL;
    94c2:	|           |   moveq #0,d0
    94c4:	+-----------|-- bra.w 9636 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    94c8:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    94ce:	|               movea.l 60(sp),a0
    94d2:	|               move.l (a0),44(sp)
	while (a) {
    94d6:	|     ,-------- bra.w 962a <createPersonaAnim+0x20c>
		a --;
    94da:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    94de:	|  |  |         movea.l 28(sp),a0
    94e2:	|  |  |         movea.l 4(a0),a0
    94e6:	|  |  |         move.l 48(sp),d1
    94ea:	|  |  |         move.l d1,d0
    94ec:	|  |  |         add.l d0,d0
    94ee:	|  |  |         add.l d1,d0
    94f0:	|  |  |         add.l d0,d0
    94f2:	|  |  |         add.l d0,d0
    94f4:	|  |  |         adda.l d0,a0
    94f6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    94fa:	|  |  |         movea.l 44(sp),a0
    94fe:	|  |  |         move.l (a0),d0
    9500:	|  |  |         moveq #5,d1
    9502:	|  |  |         cmp.l d0,d1
    9504:	|  |  |     ,-- bne.s 9530 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9506:	|  |  |     |   movea.l 28(sp),a0
    950a:	|  |  |     |   movea.l 4(a0),a0
    950e:	|  |  |     |   move.l 48(sp),d1
    9512:	|  |  |     |   move.l d1,d0
    9514:	|  |  |     |   add.l d0,d0
    9516:	|  |  |     |   add.l d1,d0
    9518:	|  |  |     |   add.l d0,d0
    951a:	|  |  |     |   add.l d0,d0
    951c:	|  |  |     |   lea (0,a0,d0.l),a1
    9520:	|  |  |     |   movea.l 44(sp),a0
    9524:	|  |  |     |   move.l 4(a0),d0
    9528:	|  |  |     |   move.l d0,8(a1)
    952c:	|  |  |  ,--|-- bra.w 95d8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9530:	|  |  |  |  '-> movea.l 44(sp),a0
    9534:	|  |  |  |      move.l (a0),d0
    9536:	|  |  |  |      moveq #2,d1
    9538:	|  |  |  |      cmp.l d0,d1
    953a:	|  |  |  |  ,-- bne.s 9566 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    953c:	|  |  |  |  |   movea.l 44(sp),a0
    9540:	|  |  |  |  |   move.l 4(a0),d2
    9544:	|  |  |  |  |   movea.l 28(sp),a0
    9548:	|  |  |  |  |   movea.l 4(a0),a0
    954c:	|  |  |  |  |   move.l 48(sp),d1
    9550:	|  |  |  |  |   move.l d1,d0
    9552:	|  |  |  |  |   add.l d0,d0
    9554:	|  |  |  |  |   add.l d1,d0
    9556:	|  |  |  |  |   add.l d0,d0
    9558:	|  |  |  |  |   add.l d0,d0
    955a:	|  |  |  |  |   adda.l d0,a0
    955c:	|  |  |  |  |   move.l d2,d0
    955e:	|  |  |  |  |   neg.l d0
    9560:	|  |  |  |  |   move.l d0,8(a0)
    9564:	|  |  |  +--|-- bra.s 95d8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9566:	|  |  |  |  '-> movea.l 44(sp),a0
    956a:	|  |  |  |      move.l (a0),d0
    956c:	|  |  |  |      moveq #6,d1
    956e:	|  |  |  |      cmp.l d0,d1
    9570:	|  |  |  |  ,-- bne.s 95b8 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9572:	|  |  |  |  |   movea.l 44(sp),a0
    9576:	|  |  |  |  |   movea.l 4(a0),a0
    957a:	|  |  |  |  |   move.l (a0),d0
    957c:	|  |  |  |  |   move.l d0,-(sp)
    957e:	|  |  |  |  |   pea 1 <_start+0x1>
    9582:	|  |  |  |  |   lea 20(sp),a0
    9586:	|  |  |  |  |   move.l a0,-(sp)
    9588:	|  |  |  |  |   jsr 145da <getValueType>
    958e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9592:	|  |  |  |  |   movea.l 44(sp),a0
    9596:	|  |  |  |  |   movea.l 4(a0),a0
    959a:	|  |  |  |  |   movea.l (a0),a0
    959c:	|  |  |  |  |   move.l 8(a0),d0
    95a0:	|  |  |  |  |   move.l d0,-(sp)
    95a2:	|  |  |  |  |   pea 1 <_start+0x1>
    95a6:	|  |  |  |  |   lea 16(sp),a0
    95aa:	|  |  |  |  |   move.l a0,-(sp)
    95ac:	|  |  |  |  |   jsr 145da <getValueType>
    95b2:	|  |  |  |  |   lea 12(sp),sp
    95b6:	|  |  |  +--|-- bra.s 95d8 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    95b8:	|  |  |  |  '-> move.l 44(sp),d0
    95bc:	|  |  |  |      move.l d0,-(sp)
    95be:	|  |  |  |      pea 1 <_start+0x1>
    95c2:	|  |  |  |      lea 20(sp),a0
    95c6:	|  |  |  |      move.l a0,-(sp)
    95c8:	|  |  |  |      jsr 145da <getValueType>
    95ce:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    95d2:	|  |  |  |      moveq #1,d0
    95d4:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    95d8:	|  |  |  '----> move.l 60(sp),-(sp)
    95dc:	|  |  |         jsr 14f5e <trimStack>
    95e2:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    95e4:	|  |  |         movea.l 28(sp),a0
    95e8:	|  |  |         movea.l 4(a0),a0
    95ec:	|  |  |         move.l 48(sp),d1
    95f0:	|  |  |         move.l d1,d0
    95f2:	|  |  |         add.l d0,d0
    95f4:	|  |  |         add.l d1,d0
    95f6:	|  |  |         add.l d0,d0
    95f8:	|  |  |         add.l d0,d0
    95fa:	|  |  |         adda.l d0,a0
    95fc:	|  |  |         move.l 12(sp),d0
    9600:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9602:	|  |  |         movea.l 28(sp),a0
    9606:	|  |  |         movea.l 4(a0),a0
    960a:	|  |  |         move.l 48(sp),d1
    960e:	|  |  |         move.l d1,d0
    9610:	|  |  |         add.l d0,d0
    9612:	|  |  |         add.l d1,d0
    9614:	|  |  |         add.l d0,d0
    9616:	|  |  |         add.l d0,d0
    9618:	|  |  |         adda.l d0,a0
    961a:	|  |  |         move.l 8(sp),d0
    961e:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9622:	|  |  |         movea.l 60(sp),a0
    9626:	|  |  |         move.l (a0),44(sp)
	while (a) {
    962a:	|  |  '-------> tst.l 48(sp)
    962e:	|  '----------- bne.w 94da <createPersonaAnim+0xbc>
	}

	return newP;
    9632:	|               move.l 28(sp),d0
}
    9636:	'-------------> move.l (sp)+,d2
    9638:	                movea.l (sp)+,a6
    963a:	                lea 44(sp),sp
    963e:	                rts

00009640 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9640:	       lea -12(sp),sp
    9644:	       move.l a6,-(sp)

	if(orig->theSprites)
    9646:	       movea.l 20(sp),a0
    964a:	       move.l (a0),d0
    964c:	   ,-- beq.s 9676 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    964e:	   |   movea.l 20(sp),a0
    9652:	   |   movea.l (a0),a0
    9654:	   |   move.l 4(a0),d0
    9658:	   |   subq.l #1,d0
    965a:	   |   move.l d0,4(a0)
    965e:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9664:	   +-- bne.s 9676 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9666:	   |   movea.l 20(sp),a0
    966a:	   |   move.l (a0),d0
    966c:	   |   move.l d0,-(sp)
    966e:	   |   jsr 8724 <forgetSpriteBank>
    9674:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9676:	   '-> tst.l 20(sp)
    967a:	,----- beq.s 96ba <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    967c:	|      movea.l 20(sp),a0
    9680:	|      move.l 8(a0),d0
    9684:	|  ,-- beq.s 96a0 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9686:	|  |   movea.l 20(sp),a0
    968a:	|  |   move.l 4(a0),8(sp)
    9690:	|  |   move.l 1c948 <SysBase>,d0
    9696:	|  |   movea.l d0,a6
    9698:	|  |   movea.l 8(sp),a1
    969c:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    96a0:	|  '-> move.l 20(sp),4(sp)
    96a6:	|      move.l 1c948 <SysBase>,d0
    96ac:	|      movea.l d0,a6
    96ae:	|      movea.l 4(sp),a1
    96b2:	|      jsr -690(a6)
		orig = NULL;
    96b6:	|      clr.l 20(sp)
	}	
	
}
    96ba:	'----> nop
    96bc:	       movea.l (sp)+,a6
    96be:	       lea 12(sp),sp
    96c2:	       rts

000096c4 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    96c4:	          lea -124(sp),sp
    96c8:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    96cc:	          movea.l 152(sp),a0
    96d0:	          move.l 56(a0),d1
    96d4:	          movea.l 152(sp),a0
    96d8:	          move.l 60(a0),d0
    96dc:	          cmp.l d1,d0
    96de:	      ,-- bne.s 970e <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    96e0:	      |   movea.l 152(sp),a0
    96e4:	      |   moveq #-1,d0
    96e6:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    96ea:	      |   movea.l 152(sp),a0
    96ee:	      |   move.l 40(a0),d0
    96f2:	      |   movea.l 152(sp),a0
    96f6:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    96fa:	      |   movea.l 152(sp),a0
    96fe:	      |   move.l 44(a0),d0
    9702:	      |   movea.l 152(sp),a0
    9706:	      |   move.l d0,52(a0)
    970a:	   ,--|-- bra.w 9c74 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    970e:	   |  '-> movea.l 1ca60 <currentFloor>,a0
    9714:	   |      move.l 16(a0),d1
    9718:	   |      movea.l 152(sp),a0
    971c:	   |      move.l 56(a0),d0
    9720:	   |      add.l d0,d0
    9722:	   |      add.l d0,d0
    9724:	   |      movea.l d1,a0
    9726:	   |      adda.l d0,a0
    9728:	   |      move.l (a0),d1
    972a:	   |      movea.l 152(sp),a0
    972e:	   |      move.l 60(a0),d0
    9732:	   |      add.l d0,d0
    9734:	   |      add.l d0,d0
    9736:	   |      movea.l d1,a0
    9738:	   |      adda.l d0,a0
    973a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    973e:	   |      moveq #-1,d0
    9740:	   |      cmp.l 144(sp),d0
    9744:	   |  ,-- bne.s 974c <doBorderStuff+0x88>
    9746:	   |  |   clr.w d0
    9748:	,--|--|-- bra.w 9d74 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    974c:	|  |  '-> movea.l 1ca60 <currentFloor>,a0
    9752:	|  |      move.l 12(a0),d1
    9756:	|  |      move.l 144(sp),d0
    975a:	|  |      lsl.l #3,d0
    975c:	|  |      add.l d0,d1
    975e:	|  |      movea.l 1ca60 <currentFloor>,a0
    9764:	|  |      movea.l 12(a0),a1
    9768:	|  |      movea.l 152(sp),a0
    976c:	|  |      move.l 56(a0),d0
    9770:	|  |      lsl.l #3,d0
    9772:	|  |      add.l a1,d0
    9774:	|  |      lea 40(sp),a0
    9778:	|  |      move.l a0,-(sp)
    977a:	|  |      lea 48(sp),a0
    977e:	|  |      move.l a0,-(sp)
    9780:	|  |      move.l d1,-(sp)
    9782:	|  |      move.l d0,-(sp)
    9784:	|  |      jsr 16320 <getMatchingCorners>
    978a:	|  |      lea 16(sp),sp
    978e:	|  |      tst.w d0
    9790:	|  |  ,-- bne.s 97a6 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9792:	|  |  |   pea 19004 <PutChar+0x14a8>
    9798:	|  |  |   jsr 170ba <KPrintF>
    979e:	|  |  |   addq.l #4,sp
            return FALSE;
    97a0:	|  |  |   clr.w d0
    97a2:	+--|--|-- bra.w 9d74 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    97a6:	|  |  '-> movea.l 152(sp),a0
    97aa:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    97b0:	|  |      movea.l 152(sp),a0
    97b4:	|  |      move.l (a0),d0
    97b6:	|  |      move.l d0,-(sp)
    97b8:	|  |      jsr 17484 <__fixsfsi>
    97be:	|  |      addq.l #4,sp
    97c0:	|  |      move.l d0,140(sp)
    97c4:	|  |      movea.l 152(sp),a0
    97c8:	|  |      move.l 4(a0),d0
    97cc:	|  |      move.l d0,-(sp)
    97ce:	|  |      jsr 17484 <__fixsfsi>
    97d4:	|  |      addq.l #4,sp
    97d6:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    97da:	|  |      movea.l 152(sp),a0
    97de:	|  |      move.l 40(a0),132(sp)
    97e4:	|  |      movea.l 152(sp),a0
    97e8:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    97ee:	|  |      movea.l 1ca60 <currentFloor>,a0
    97f4:	|  |      move.l 4(a0),d1
    97f8:	|  |      move.l 44(sp),d0
    97fc:	|  |      lsl.l #3,d0
    97fe:	|  |      movea.l d1,a0
    9800:	|  |      adda.l d0,a0
    9802:	|  |      move.l (a0),124(sp)
    9806:	|  |      movea.l 1ca60 <currentFloor>,a0
    980c:	|  |      move.l 4(a0),d1
    9810:	|  |      move.l 44(sp),d0
    9814:	|  |      lsl.l #3,d0
    9816:	|  |      movea.l d1,a0
    9818:	|  |      adda.l d0,a0
    981a:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9820:	|  |      movea.l 1ca60 <currentFloor>,a0
    9826:	|  |      move.l 4(a0),d1
    982a:	|  |      move.l 40(sp),d0
    982e:	|  |      lsl.l #3,d0
    9830:	|  |      movea.l d1,a0
    9832:	|  |      adda.l d0,a0
    9834:	|  |      move.l (a0),116(sp)
    9838:	|  |      movea.l 1ca60 <currentFloor>,a0
    983e:	|  |      move.l 4(a0),d1
    9842:	|  |      move.l 40(sp),d0
    9846:	|  |      lsl.l #3,d0
    9848:	|  |      movea.l d1,a0
    984a:	|  |      adda.l d0,a0
    984c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9852:	|  |      move.l 140(sp),d0
    9856:	|  |      sub.l 132(sp),d0
    985a:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    985e:	|  |      move.l 136(sp),d0
    9862:	|  |      sub.l 128(sp),d0
    9866:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    986a:	|  |      move.l 116(sp),d0
    986e:	|  |      sub.l 124(sp),d0
    9872:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9876:	|  |      move.l 112(sp),d0
    987a:	|  |      sub.l 120(sp),d0
    987e:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9882:	|  |      move.l 124(sp),d0
    9886:	|  |      sub.l 140(sp),d0
    988a:	|  |      move.l 104(sp),-(sp)
    988e:	|  |      move.l d0,-(sp)
    9890:	|  |      jsr 17a46 <__mulsi3>
    9896:	|  |      addq.l #8,sp
    9898:	|  |      move.l d0,d2
    989a:	|  |      move.l 120(sp),d0
    989e:	|  |      sub.l 136(sp),d0
    98a2:	|  |      move.l 108(sp),-(sp)
    98a6:	|  |      move.l d0,-(sp)
    98a8:	|  |      jsr 17a46 <__mulsi3>
    98ae:	|  |      addq.l #8,sp
    98b0:	|  |      move.l d2,d1
    98b2:	|  |      sub.l d0,d1
    98b4:	|  |      move.l d1,-(sp)
    98b6:	|  |      jsr 174ac <__floatsidf>
    98bc:	|  |      addq.l #4,sp
    98be:	|  |      move.l d0,32(sp)
    98c2:	|  |      move.l d1,36(sp)
    98c6:	|  |      move.l 32(sp),88(sp)
    98cc:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    98d2:	|  |      move.l 96(sp),-(sp)
    98d6:	|  |      move.l 112(sp),-(sp)
    98da:	|  |      jsr 17a46 <__mulsi3>
    98e0:	|  |      addq.l #8,sp
    98e2:	|  |      move.l d0,d2
    98e4:	|  |      move.l 100(sp),-(sp)
    98e8:	|  |      move.l 108(sp),-(sp)
    98ec:	|  |      jsr 17a46 <__mulsi3>
    98f2:	|  |      addq.l #8,sp
    98f4:	|  |      move.l d2,d1
    98f6:	|  |      sub.l d0,d1
    98f8:	|  |      move.l d1,-(sp)
    98fa:	|  |      jsr 174ac <__floatsidf>
    9900:	|  |      addq.l #4,sp
    9902:	|  |      move.l d1,-(sp)
    9904:	|  |      move.l d0,-(sp)
    9906:	|  |      move.l 100(sp),-(sp)
    990a:	|  |      move.l 100(sp),-(sp)
    990e:	|  |      jsr 17340 <__divdf3>
    9914:	|  |      lea 16(sp),sp
    9918:	|  |      move.l d0,24(sp)
    991c:	|  |      move.l d1,28(sp)
    9920:	|  |      move.l 24(sp),88(sp)
    9926:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    992c:	|  |      clr.l -(sp)
    992e:	|  |      clr.l -(sp)
    9930:	|  |      move.l 100(sp),-(sp)
    9934:	|  |      move.l 100(sp),-(sp)
    9938:	|  |      jsr 1760a <__gtdf2>
    993e:	|  |      lea 16(sp),sp
    9942:	|  |      tst.l d0
    9944:	|  |  ,-- ble.w 9a1c <doBorderStuff+0x358>
    9948:	|  |  |   clr.l -(sp)
    994a:	|  |  |   move.l #1072693248,-(sp)
    9950:	|  |  |   move.l 100(sp),-(sp)
    9954:	|  |  |   move.l 100(sp),-(sp)
    9958:	|  |  |   jsr 176c4 <__ltdf2>
    995e:	|  |  |   lea 16(sp),sp
    9962:	|  |  |   tst.l d0
    9964:	|  |  +-- bge.w 9a1c <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9968:	|  |  |   move.l 124(sp),-(sp)
    996c:	|  |  |   jsr 174ac <__floatsidf>
    9972:	|  |  |   addq.l #4,sp
    9974:	|  |  |   move.l d0,d2
    9976:	|  |  |   move.l d1,d3
    9978:	|  |  |   move.l 100(sp),-(sp)
    997c:	|  |  |   jsr 174ac <__floatsidf>
    9982:	|  |  |   addq.l #4,sp
    9984:	|  |  |   move.l 92(sp),-(sp)
    9988:	|  |  |   move.l 92(sp),-(sp)
    998c:	|  |  |   move.l d1,-(sp)
    998e:	|  |  |   move.l d0,-(sp)
    9990:	|  |  |   jsr 1753c <__muldf3>
    9996:	|  |  |   lea 16(sp),sp
    999a:	|  |  |   move.l d1,-(sp)
    999c:	|  |  |   move.l d0,-(sp)
    999e:	|  |  |   move.l d3,-(sp)
    99a0:	|  |  |   move.l d2,-(sp)
    99a2:	|  |  |   jsr 172de <__adddf3>
    99a8:	|  |  |   lea 16(sp),sp
    99ac:	|  |  |   move.l d1,-(sp)
    99ae:	|  |  |   move.l d0,-(sp)
    99b0:	|  |  |   jsr 1744e <__fixdfsi>
    99b6:	|  |  |   addq.l #8,sp
    99b8:	|  |  |   movea.l 152(sp),a0
    99bc:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    99c0:	|  |  |   move.l 120(sp),-(sp)
    99c4:	|  |  |   jsr 174ac <__floatsidf>
    99ca:	|  |  |   addq.l #4,sp
    99cc:	|  |  |   move.l d0,d2
    99ce:	|  |  |   move.l d1,d3
    99d0:	|  |  |   move.l 96(sp),-(sp)
    99d4:	|  |  |   jsr 174ac <__floatsidf>
    99da:	|  |  |   addq.l #4,sp
    99dc:	|  |  |   move.l 92(sp),-(sp)
    99e0:	|  |  |   move.l 92(sp),-(sp)
    99e4:	|  |  |   move.l d1,-(sp)
    99e6:	|  |  |   move.l d0,-(sp)
    99e8:	|  |  |   jsr 1753c <__muldf3>
    99ee:	|  |  |   lea 16(sp),sp
    99f2:	|  |  |   move.l d1,-(sp)
    99f4:	|  |  |   move.l d0,-(sp)
    99f6:	|  |  |   move.l d3,-(sp)
    99f8:	|  |  |   move.l d2,-(sp)
    99fa:	|  |  |   jsr 172de <__adddf3>
    9a00:	|  |  |   lea 16(sp),sp
    9a04:	|  |  |   move.l d1,-(sp)
    9a06:	|  |  |   move.l d0,-(sp)
    9a08:	|  |  |   jsr 1744e <__fixdfsi>
    9a0e:	|  |  |   addq.l #8,sp
    9a10:	|  |  |   movea.l 152(sp),a0
    9a14:	|  |  |   move.l d0,52(a0)
    9a18:	|  +--|-- bra.w 9c74 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9a1c:	|  |  '-> move.l 140(sp),d0
    9a20:	|  |      sub.l 124(sp),d0
    9a24:	|  |      move.l d0,84(sp)
    9a28:	|  |      move.l 140(sp),d0
    9a2c:	|  |      sub.l 116(sp),d0
    9a30:	|  |      move.l d0,80(sp)
    9a34:	|  |      move.l 132(sp),d0
    9a38:	|  |      sub.l 124(sp),d0
    9a3c:	|  |      move.l d0,76(sp)
    9a40:	|  |      move.l 132(sp),d0
    9a44:	|  |      sub.l 116(sp),d0
    9a48:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9a4c:	|  |      move.l 136(sp),d0
    9a50:	|  |      sub.l 120(sp),d0
    9a54:	|  |      move.l d0,68(sp)
    9a58:	|  |      move.l 136(sp),d0
    9a5c:	|  |      sub.l 112(sp),d0
    9a60:	|  |      move.l d0,64(sp)
    9a64:	|  |      move.l 128(sp),d0
    9a68:	|  |      sub.l 120(sp),d0
    9a6c:	|  |      move.l d0,60(sp)
    9a70:	|  |      move.l 128(sp),d0
    9a74:	|  |      sub.l 112(sp),d0
    9a78:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9a7c:	|  |      move.l 84(sp),-(sp)
    9a80:	|  |      move.l 88(sp),-(sp)
    9a84:	|  |      jsr 17a46 <__mulsi3>
    9a8a:	|  |      addq.l #8,sp
    9a8c:	|  |      move.l d0,84(sp)
    9a90:	|  |      move.l 80(sp),-(sp)
    9a94:	|  |      move.l 84(sp),-(sp)
    9a98:	|  |      jsr 17a46 <__mulsi3>
    9a9e:	|  |      addq.l #8,sp
    9aa0:	|  |      move.l d0,80(sp)
    9aa4:	|  |      move.l 76(sp),-(sp)
    9aa8:	|  |      move.l 80(sp),-(sp)
    9aac:	|  |      jsr 17a46 <__mulsi3>
    9ab2:	|  |      addq.l #8,sp
    9ab4:	|  |      move.l d0,76(sp)
    9ab8:	|  |      move.l 72(sp),-(sp)
    9abc:	|  |      move.l 76(sp),-(sp)
    9ac0:	|  |      jsr 17a46 <__mulsi3>
    9ac6:	|  |      addq.l #8,sp
    9ac8:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9acc:	|  |      move.l 68(sp),-(sp)
    9ad0:	|  |      move.l 72(sp),-(sp)
    9ad4:	|  |      jsr 17a46 <__mulsi3>
    9ada:	|  |      addq.l #8,sp
    9adc:	|  |      move.l d0,68(sp)
    9ae0:	|  |      move.l 64(sp),-(sp)
    9ae4:	|  |      move.l 68(sp),-(sp)
    9ae8:	|  |      jsr 17a46 <__mulsi3>
    9aee:	|  |      addq.l #8,sp
    9af0:	|  |      move.l d0,64(sp)
    9af4:	|  |      move.l 60(sp),-(sp)
    9af8:	|  |      move.l 64(sp),-(sp)
    9afc:	|  |      jsr 17a46 <__mulsi3>
    9b02:	|  |      addq.l #8,sp
    9b04:	|  |      move.l d0,60(sp)
    9b08:	|  |      move.l 56(sp),-(sp)
    9b0c:	|  |      move.l 60(sp),-(sp)
    9b10:	|  |      jsr 17a46 <__mulsi3>
    9b16:	|  |      addq.l #8,sp
    9b18:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9b1c:	|  |      move.l 84(sp),-(sp)
    9b20:	|  |      jsr 174ac <__floatsidf>
    9b26:	|  |      addq.l #4,sp
    9b28:	|  |      move.l d0,d2
    9b2a:	|  |      move.l d1,d3
    9b2c:	|  |      move.l 68(sp),-(sp)
    9b30:	|  |      jsr 174ac <__floatsidf>
    9b36:	|  |      addq.l #4,sp
    9b38:	|  |      move.l d1,-(sp)
    9b3a:	|  |      move.l d0,-(sp)
    9b3c:	|  |      move.l d3,-(sp)
    9b3e:	|  |      move.l d2,-(sp)
    9b40:	|  |      jsr 172de <__adddf3>
    9b46:	|  |      lea 16(sp),sp
    9b4a:	|  |      move.l d1,-(sp)
    9b4c:	|  |      move.l d0,-(sp)
    9b4e:	|  |      jsr 179fc <sqrt>
    9b54:	|  |      addq.l #8,sp
    9b56:	|  |      move.l d0,d2
    9b58:	|  |      move.l d1,d3
    9b5a:	|  |      move.l 76(sp),-(sp)
    9b5e:	|  |      jsr 174ac <__floatsidf>
    9b64:	|  |      addq.l #4,sp
    9b66:	|  |      move.l d0,d4
    9b68:	|  |      move.l d1,d5
    9b6a:	|  |      move.l 60(sp),-(sp)
    9b6e:	|  |      jsr 174ac <__floatsidf>
    9b74:	|  |      addq.l #4,sp
    9b76:	|  |      move.l d1,-(sp)
    9b78:	|  |      move.l d0,-(sp)
    9b7a:	|  |      move.l d5,-(sp)
    9b7c:	|  |      move.l d4,-(sp)
    9b7e:	|  |      jsr 172de <__adddf3>
    9b84:	|  |      lea 16(sp),sp
    9b88:	|  |      move.l d1,-(sp)
    9b8a:	|  |      move.l d0,-(sp)
    9b8c:	|  |      jsr 179fc <sqrt>
    9b92:	|  |      addq.l #8,sp
    9b94:	|  |      move.l d1,-(sp)
    9b96:	|  |      move.l d0,-(sp)
    9b98:	|  |      move.l d3,-(sp)
    9b9a:	|  |      move.l d2,-(sp)
    9b9c:	|  |      jsr 172de <__adddf3>
    9ba2:	|  |      lea 16(sp),sp
    9ba6:	|  |      move.l d0,d2
    9ba8:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9baa:	|  |      move.l 80(sp),-(sp)
    9bae:	|  |      jsr 174ac <__floatsidf>
    9bb4:	|  |      addq.l #4,sp
    9bb6:	|  |      move.l d0,d4
    9bb8:	|  |      move.l d1,d5
    9bba:	|  |      move.l 64(sp),-(sp)
    9bbe:	|  |      jsr 174ac <__floatsidf>
    9bc4:	|  |      addq.l #4,sp
    9bc6:	|  |      move.l d1,-(sp)
    9bc8:	|  |      move.l d0,-(sp)
    9bca:	|  |      move.l d5,-(sp)
    9bcc:	|  |      move.l d4,-(sp)
    9bce:	|  |      jsr 172de <__adddf3>
    9bd4:	|  |      lea 16(sp),sp
    9bd8:	|  |      move.l d1,-(sp)
    9bda:	|  |      move.l d0,-(sp)
    9bdc:	|  |      jsr 179fc <sqrt>
    9be2:	|  |      addq.l #8,sp
    9be4:	|  |      move.l d0,d4
    9be6:	|  |      move.l d1,d5
    9be8:	|  |      move.l 72(sp),-(sp)
    9bec:	|  |      jsr 174ac <__floatsidf>
    9bf2:	|  |      addq.l #4,sp
    9bf4:	|  |      move.l d0,d6
    9bf6:	|  |      move.l d1,d7
    9bf8:	|  |      move.l 56(sp),-(sp)
    9bfc:	|  |      jsr 174ac <__floatsidf>
    9c02:	|  |      addq.l #4,sp
    9c04:	|  |      move.l d1,-(sp)
    9c06:	|  |      move.l d0,-(sp)
    9c08:	|  |      move.l d7,-(sp)
    9c0a:	|  |      move.l d6,-(sp)
    9c0c:	|  |      jsr 172de <__adddf3>
    9c12:	|  |      lea 16(sp),sp
    9c16:	|  |      move.l d1,-(sp)
    9c18:	|  |      move.l d0,-(sp)
    9c1a:	|  |      jsr 179fc <sqrt>
    9c20:	|  |      addq.l #8,sp
    9c22:	|  |      move.l d1,-(sp)
    9c24:	|  |      move.l d0,-(sp)
    9c26:	|  |      move.l d5,-(sp)
    9c28:	|  |      move.l d4,-(sp)
    9c2a:	|  |      jsr 172de <__adddf3>
    9c30:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c34:	|  |      move.l d1,-(sp)
    9c36:	|  |      move.l d0,-(sp)
    9c38:	|  |      move.l d3,-(sp)
    9c3a:	|  |      move.l d2,-(sp)
    9c3c:	|  |      jsr 176c4 <__ltdf2>
    9c42:	|  |      lea 16(sp),sp
    9c46:	|  |      tst.l d0
    9c48:	|  |  ,-- bge.s 9c60 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9c4a:	|  |  |   movea.l 152(sp),a0
    9c4e:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9c54:	|  |  |   movea.l 152(sp),a0
    9c58:	|  |  |   move.l 120(sp),52(a0)
    9c5e:	|  +--|-- bra.s 9c74 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9c60:	|  |  '-> movea.l 152(sp),a0
    9c64:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9c6a:	|  |      movea.l 152(sp),a0
    9c6e:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9c74:	|  '----> movea.l 152(sp),a0
    9c78:	|         move.l 52(a0),d0
    9c7c:	|         move.l d0,-(sp)
    9c7e:	|         jsr 174ec <__floatsisf>
    9c84:	|         addq.l #4,sp
    9c86:	|         move.l d0,d1
    9c88:	|         movea.l 152(sp),a0
    9c8c:	|         move.l 4(a0),d0
    9c90:	|         move.l d0,-(sp)
    9c92:	|         move.l d1,-(sp)
    9c94:	|         jsr 177e0 <__subsf3>
    9c9a:	|         addq.l #8,sp
    9c9c:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9ca0:	|         movea.l 152(sp),a0
    9ca4:	|         move.l (a0),d2
    9ca6:	|         movea.l 152(sp),a0
    9caa:	|         move.l 48(a0),d0
    9cae:	|         move.l d0,-(sp)
    9cb0:	|         jsr 174ec <__floatsisf>
    9cb6:	|         addq.l #4,sp
    9cb8:	|         move.l d0,-(sp)
    9cba:	|         move.l d2,-(sp)
    9cbc:	|         jsr 177e0 <__subsf3>
    9cc2:	|         addq.l #8,sp
    9cc4:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9cc8:	|         clr.l -(sp)
    9cca:	|         move.l 52(sp),-(sp)
    9cce:	|         jsr 17748 <__nesf2>
    9cd4:	|         addq.l #8,sp
    9cd6:	|         tst.l d0
    9cd8:	|     ,-- bne.s 9cec <doBorderStuff+0x628>
    9cda:	|     |   clr.l -(sp)
    9cdc:	|     |   move.l 56(sp),-(sp)
    9ce0:	|     |   jsr 17748 <__nesf2>
    9ce6:	|     |   addq.l #8,sp
    9ce8:	|     |   tst.l d0
    9cea:	|  ,--|-- beq.s 9d62 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9cec:	|  |  '-> move.l 52(sp),d0
    9cf0:	|  |      move.l d0,-(sp)
    9cf2:	|  |      move.l d0,-(sp)
    9cf4:	|  |      jsr 172a8 <__addsf3>
    9cfa:	|  |      addq.l #8,sp
    9cfc:	|  |      move.l d0,-(sp)
    9cfe:	|  |      move.l 52(sp),-(sp)
    9d02:	|  |      jsr 1784c <atan2f>
    9d08:	|  |      addq.l #8,sp
    9d0a:	|  |      move.l d0,-(sp)
    9d0c:	|  |      jsr 1740e <__extendsfdf2>
    9d12:	|  |      addq.l #4,sp
    9d14:	|  |      move.l #-1540411785,-(sp)
    9d1a:	|  |      move.l #1078765033,-(sp)
    9d20:	|  |      move.l d1,-(sp)
    9d22:	|  |      move.l d0,-(sp)
    9d24:	|  |      jsr 1753c <__muldf3>
    9d2a:	|  |      lea 16(sp),sp
    9d2e:	|  |      clr.l -(sp)
    9d30:	|  |      move.l #1080459264,-(sp)
    9d36:	|  |      move.l d1,-(sp)
    9d38:	|  |      move.l d0,-(sp)
    9d3a:	|  |      jsr 172de <__adddf3>
    9d40:	|  |      lea 16(sp),sp
    9d44:	|  |      move.l d1,-(sp)
    9d46:	|  |      move.l d0,-(sp)
    9d48:	|  |      jsr 1744e <__fixdfsi>
    9d4e:	|  |      addq.l #8,sp
    9d50:	|  |      movea.l 152(sp),a0
    9d54:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9d58:	|  |      movea.l 152(sp),a0
    9d5c:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9d62:	|  '----> pea 1 <_start+0x1>
    9d66:	|         move.l 156(sp),-(sp)
    9d6a:	|         jsr 3fb6 <setFrames>
    9d70:	|         addq.l #8,sp
    return TRUE;
    9d72:	|         moveq #1,d0
}
    9d74:	'-------> movem.l (sp)+,d2-d7
    9d78:	          lea 124(sp),sp
    9d7c:	          rts

00009d7e <drawPeople>:

void drawPeople () {
    9d7e:	                   lea -24(sp),sp
    9d82:	                   move.l d2,-(sp)

	shufflePeople ();
    9d84:	                   jsr b87c <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9d8a:	                   move.l 1c9a8 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9d92:	                   clr.l 20(sp)
	overRegion = NULL;
    9d96:	                   clr.l 1ca58 <overRegion>

	while (thisPerson) {
    9d9c:	   ,-------------- bra.w a34e <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9da0:	,--|-------------> movea.l 24(sp),a0
    9da4:	|  |               move.w 104(a0),d0
    9da8:	|  |  ,----------- beq.w a102 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9dac:	|  |  |            movea.l 24(sp),a0
    9db0:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9db6:	|  |  |            movea.l 24(sp),a0
    9dba:	|  |  |            move.l 76(a0),d0
    9dbe:	|  |  |            cmp.l 20(sp),d0
    9dc2:	|  |  |  ,-------- beq.w 9f90 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9dc6:	|  |  |  |         movea.l 24(sp),a0
    9dca:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9dce:	|  |  |  |         movea.l 24(sp),a0
    9dd2:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9dd8:	|  |  |  |         movea.l 24(sp),a0
    9ddc:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9de0:	|  |  |  |         movea.l 20(sp),a0
    9de4:	|  |  |  |         movea.l 4(a0),a0
    9de8:	|  |  |  |         move.l 4(a0),d0
    9dec:	|  |  |  |         movea.l 24(sp),a0
    9df0:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9df4:	|  |  |  |         movea.l 20(sp),a0
    9df8:	|  |  |  |         movea.l 4(a0),a1
    9dfc:	|  |  |  |         movea.l 24(sp),a0
    9e00:	|  |  |  |         move.l 84(a0),d0
    9e04:	|  |  |  |         move.l d0,d1
    9e06:	|  |  |  |         move.l d1,d0
    9e08:	|  |  |  |         add.l d0,d0
    9e0a:	|  |  |  |         add.l d1,d0
    9e0c:	|  |  |  |         add.l d0,d0
    9e0e:	|  |  |  |         add.l d0,d0
    9e10:	|  |  |  |         lea (0,a1,d0.l),a0
    9e14:	|  |  |  |         move.l 8(a0),d0
    9e18:	|  |  |  |     ,-- ble.w 9eba <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9e1c:	|  |  |  |     |   movea.l 20(sp),a0
    9e20:	|  |  |  |     |   movea.l 4(a0),a1
    9e24:	|  |  |  |     |   movea.l 24(sp),a0
    9e28:	|  |  |  |     |   move.l 84(a0),d0
    9e2c:	|  |  |  |     |   move.l d0,d1
    9e2e:	|  |  |  |     |   move.l d1,d0
    9e30:	|  |  |  |     |   add.l d0,d0
    9e32:	|  |  |  |     |   add.l d1,d0
    9e34:	|  |  |  |     |   add.l d0,d0
    9e36:	|  |  |  |     |   add.l d0,d0
    9e38:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9e3c:	|  |  |  |     |   move.l 8(a0),d0
    9e40:	|  |  |  |     |   clr.l -(sp)
    9e42:	|  |  |  |     |   move.l d0,-(sp)
    9e44:	|  |  |  |     |   jsr cf90 <startSound>
    9e4a:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9e4c:	|  |  |  |     |   movea.l 24(sp),a0
    9e50:	|  |  |  |     |   move.l 84(a0),d0
    9e54:	|  |  |  |     |   addq.l #1,d0
    9e56:	|  |  |  |     |   movea.l 24(sp),a0
    9e5a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9e5e:	|  |  |  |     |   movea.l 24(sp),a0
    9e62:	|  |  |  |     |   move.l 84(a0),d0
    9e66:	|  |  |  |     |   movea.l 24(sp),a0
    9e6a:	|  |  |  |     |   movea.l 72(a0),a0
    9e6e:	|  |  |  |     |   move.l 8(a0),d1
    9e72:	|  |  |  |     |   move.l d1,-(sp)
    9e74:	|  |  |  |     |   move.l d0,-(sp)
    9e76:	|  |  |  |     |   jsr 17af2 <__modsi3>
    9e7c:	|  |  |  |     |   addq.l #8,sp
    9e7e:	|  |  |  |     |   movea.l 24(sp),a0
    9e82:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9e86:	|  |  |  |     |   movea.l 24(sp),a0
    9e8a:	|  |  |  |     |   movea.l 72(a0),a0
    9e8e:	|  |  |  |     |   movea.l 4(a0),a1
    9e92:	|  |  |  |     |   movea.l 24(sp),a0
    9e96:	|  |  |  |     |   move.l 84(a0),d0
    9e9a:	|  |  |  |     |   move.l d0,d1
    9e9c:	|  |  |  |     |   move.l d1,d0
    9e9e:	|  |  |  |     |   add.l d0,d0
    9ea0:	|  |  |  |     |   add.l d1,d0
    9ea2:	|  |  |  |     |   add.l d0,d0
    9ea4:	|  |  |  |     |   add.l d0,d0
    9ea6:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9eaa:	|  |  |  |     |   move.l 4(a0),d0
    9eae:	|  |  |  |     |   movea.l 24(sp),a0
    9eb2:	|  |  |  |     |   move.l d0,88(a0)
    9eb6:	|  |  |  |  ,--|-- bra.w 9ff8 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9eba:	|  |  |  |  |  '-> movea.l 20(sp),a0
    9ebe:	|  |  |  |  |      movea.l 4(a0),a1
    9ec2:	|  |  |  |  |      movea.l 24(sp),a0
    9ec6:	|  |  |  |  |      move.l 84(a0),d0
    9eca:	|  |  |  |  |      move.l d0,d1
    9ecc:	|  |  |  |  |      move.l d1,d0
    9ece:	|  |  |  |  |      add.l d0,d0
    9ed0:	|  |  |  |  |      add.l d1,d0
    9ed2:	|  |  |  |  |      add.l d0,d0
    9ed4:	|  |  |  |  |      add.l d0,d0
    9ed6:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9eda:	|  |  |  |  |      move.l 8(a0),d0
    9ede:	|  |  |  |  +----- beq.w 9ff8 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9ee2:	|  |  |  |  |      movea.l 1c918 <noStack>,a1
    9ee8:	|  |  |  |  |      movea.l 20(sp),a0
    9eec:	|  |  |  |  |      move.l 4(a0),d2
    9ef0:	|  |  |  |  |      movea.l 24(sp),a0
    9ef4:	|  |  |  |  |      move.l 84(a0),d0
    9ef8:	|  |  |  |  |      move.l d0,d1
    9efa:	|  |  |  |  |      move.l d1,d0
    9efc:	|  |  |  |  |      add.l d0,d0
    9efe:	|  |  |  |  |      add.l d1,d0
    9f00:	|  |  |  |  |      add.l d0,d0
    9f02:	|  |  |  |  |      add.l d0,d0
    9f04:	|  |  |  |  |      movea.l d2,a0
    9f06:	|  |  |  |  |      adda.l d0,a0
    9f08:	|  |  |  |  |      move.l 8(a0),d0
    9f0c:	|  |  |  |  |      neg.l d0
    9f0e:	|  |  |  |  |      pea 1 <_start+0x1>
    9f12:	|  |  |  |  |      move.l a1,-(sp)
    9f14:	|  |  |  |  |      clr.l -(sp)
    9f16:	|  |  |  |  |      clr.l -(sp)
    9f18:	|  |  |  |  |      move.l d0,-(sp)
    9f1a:	|  |  |  |  |      jsr 7210 <startNewFunctionNum>
    9f20:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9f24:	|  |  |  |  |      movea.l 24(sp),a0
    9f28:	|  |  |  |  |      move.l 84(a0),d0
    9f2c:	|  |  |  |  |      addq.l #1,d0
    9f2e:	|  |  |  |  |      movea.l 24(sp),a0
    9f32:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f36:	|  |  |  |  |      movea.l 24(sp),a0
    9f3a:	|  |  |  |  |      move.l 84(a0),d0
    9f3e:	|  |  |  |  |      movea.l 24(sp),a0
    9f42:	|  |  |  |  |      movea.l 72(a0),a0
    9f46:	|  |  |  |  |      move.l 8(a0),d1
    9f4a:	|  |  |  |  |      move.l d1,-(sp)
    9f4c:	|  |  |  |  |      move.l d0,-(sp)
    9f4e:	|  |  |  |  |      jsr 17af2 <__modsi3>
    9f54:	|  |  |  |  |      addq.l #8,sp
    9f56:	|  |  |  |  |      movea.l 24(sp),a0
    9f5a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f5e:	|  |  |  |  |      movea.l 24(sp),a0
    9f62:	|  |  |  |  |      movea.l 72(a0),a0
    9f66:	|  |  |  |  |      movea.l 4(a0),a1
    9f6a:	|  |  |  |  |      movea.l 24(sp),a0
    9f6e:	|  |  |  |  |      move.l 84(a0),d0
    9f72:	|  |  |  |  |      move.l d0,d1
    9f74:	|  |  |  |  |      move.l d1,d0
    9f76:	|  |  |  |  |      add.l d0,d0
    9f78:	|  |  |  |  |      add.l d1,d0
    9f7a:	|  |  |  |  |      add.l d0,d0
    9f7c:	|  |  |  |  |      add.l d0,d0
    9f7e:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9f82:	|  |  |  |  |      move.l 4(a0),d0
    9f86:	|  |  |  |  |      movea.l 24(sp),a0
    9f8a:	|  |  |  |  |      move.l d0,88(a0)
    9f8e:	|  |  |  |  +----- bra.s 9ff8 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9f90:	|  |  |  '--|----> movea.l 24(sp),a0
    9f94:	|  |  |     |      move.l (a0),d0
    9f96:	|  |  |     |      movea.l 24(sp),a0
    9f9a:	|  |  |     |      move.l 8(a0),d1
    9f9e:	|  |  |     |      move.l d1,-(sp)
    9fa0:	|  |  |     |      move.l d0,-(sp)
    9fa2:	|  |  |     |      jsr 173d8 <__eqsf2>
    9fa8:	|  |  |     |      addq.l #8,sp
    9faa:	|  |  |     |      tst.l d0
    9fac:	|  |  |     |  ,-- bne.s 9ff0 <drawPeople+0x272>
    9fae:	|  |  |     |  |   movea.l 24(sp),a0
    9fb2:	|  |  |     |  |   move.l 4(a0),d0
    9fb6:	|  |  |     |  |   movea.l 24(sp),a0
    9fba:	|  |  |     |  |   move.l 12(a0),d1
    9fbe:	|  |  |     |  |   move.l d1,-(sp)
    9fc0:	|  |  |     |  |   move.l d0,-(sp)
    9fc2:	|  |  |     |  |   jsr 173d8 <__eqsf2>
    9fc8:	|  |  |     |  |   addq.l #8,sp
    9fca:	|  |  |     |  |   tst.l d0
    9fcc:	|  |  |     |  +-- bne.s 9ff0 <drawPeople+0x272>
    9fce:	|  |  |     |  |   movea.l 20(sp),a0
    9fd2:	|  |  |     |  |   move.l 8(a0),d0
    9fd6:	|  |  |     |  |   moveq #1,d1
    9fd8:	|  |  |     |  |   cmp.l d0,d1
    9fda:	|  |  |     |  +-- bne.s 9ff0 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9fdc:	|  |  |     |  |   movea.l 24(sp),a0
    9fe0:	|  |  |     |  |   move.l 16(a0),d0
    9fe4:	|  |  |     |  |   addq.l #1,d0
    9fe6:	|  |  |     |  |   movea.l 24(sp),a0
    9fea:	|  |  |     |  |   move.l d0,16(a0)
    9fee:	|  |  |     +--|-- bra.s 9ff8 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9ff0:	|  |  |     |  '-> movea.l 24(sp),a0
    9ff4:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9ff8:	|  |  |     '----> movea.l 24(sp),a0
    9ffc:	|  |  |            move.l (a0),d0
    9ffe:	|  |  |            movea.l 24(sp),a0
    a002:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a006:	|  |  |            movea.l 24(sp),a0
    a00a:	|  |  |            move.l 4(a0),d0
    a00e:	|  |  |            movea.l 24(sp),a0
    a012:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a016:	|  |  |            movea.l 20(sp),a0
    a01a:	|  |  |            movea.l 4(a0),a1
    a01e:	|  |  |            movea.l 24(sp),a0
    a022:	|  |  |            move.l 84(a0),d0
    a026:	|  |  |            move.l d0,d1
    a028:	|  |  |            move.l d1,d0
    a02a:	|  |  |            add.l d0,d0
    a02c:	|  |  |            add.l d1,d0
    a02e:	|  |  |            add.l d0,d0
    a030:	|  |  |            add.l d0,d0
    a032:	|  |  |            lea (0,a1,d0.l),a0
    a036:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a03a:	|  |  |            move.l 8(sp),d0
    a03e:	|  |  |            add.l d0,d0
    a040:	|  |  |            subx.l d0,d0
    a042:	|  |  |            neg.l d0
    a044:	|  |  |            move.b d0,d0
    a046:	|  |  |            move.b d0,d0
    a048:	|  |  |            andi.l #255,d0
    a04e:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a052:	|  |  |            move.l 8(sp),-(sp)
    a056:	|  |  |            jsr 8f52 <TF_abs>
    a05c:	|  |  |            addq.l #4,sp
    a05e:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a062:	|  |  |            movea.l 20(sp),a0
    a066:	|  |  |            movea.l (a0),a0
    a068:	|  |  |            move.l 8(a0),d0
    a06c:	|  |  |            cmp.l 12(sp),d0
    a070:	|  |  |        ,-- bgt.s a080 <drawPeople+0x302>
				fNum = 0;
    a072:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a076:	|  |  |        |   moveq #2,d0
    a078:	|  |  |        |   sub.l 16(sp),d0
    a07c:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a080:	|  |  |        '-> moveq #2,d1
    a082:	|  |  |            cmp.l 16(sp),d1
    a086:	|  |  +----------- beq.s a102 <drawPeople+0x384>
				BOOL r = FALSE;
    a088:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a08c:	|  |  |            move.l 16(sp),d0
    a090:	|  |  |            movea.w d0,a0
    a092:	|  |  |            movea.l 20(sp),a1
    a096:	|  |  |            movea.l (a1),a1
    a098:	|  |  |            movea.l 16(a1),a1
    a09c:	|  |  |            move.l 12(sp),d1
    a0a0:	|  |  |            move.l d1,d0
    a0a2:	|  |  |            lsl.l #3,d0
    a0a4:	|  |  |            sub.l d1,d0
    a0a6:	|  |  |            add.l d0,d0
    a0a8:	|  |  |            add.l d0,d0
    a0aa:	|  |  |            add.l a1,d0
    a0ac:	|  |  |            move.l a0,-(sp)
    a0ae:	|  |  |            move.l 28(sp),-(sp)
    a0b2:	|  |  |            move.l d0,-(sp)
    a0b4:	|  |  |            jsr 8c74 <scaleSprite>
    a0ba:	|  |  |            lea 12(sp),sp
    a0be:	|  |  |            move.w d0,6(sp)
				if (r) {
    a0c2:	|  |  +----------- beq.s a102 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a0c4:	|  |  |            movea.l 24(sp),a0
    a0c8:	|  |  |            movea.l 114(a0),a0
    a0cc:	|  |  |            movea.l (a0),a0
    a0ce:	|  |  |            move.b (a0),d0
    a0d0:	|  |  +----------- beq.s a102 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a0d2:	|  |  |            move.l 1c9c8 <personRegion+0x1c>,d1
    a0d8:	|  |  |            movea.l 24(sp),a0
    a0dc:	|  |  |            move.l 114(a0),d0
    a0e0:	|  |  |            cmp.l d1,d0
    a0e2:	|  |  |        ,-- beq.s a0ea <drawPeople+0x36c>
    a0e4:	|  |  |        |   clr.l 1c910 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a0ea:	|  |  |        '-> movea.l 24(sp),a0
    a0ee:	|  |  |            move.l 114(a0),d0
    a0f2:	|  |  |            move.l d0,1c9c8 <personRegion+0x1c>
						overRegion = & personRegion;
    a0f8:	|  |  |            move.l #117164,1ca58 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a102:	|  |  '----------> movea.l 24(sp),a0
    a106:	|  |               move.l 88(a0),d0
    a10a:	|  |               subq.l #1,d0
    a10c:	|  |               movea.l 24(sp),a0
    a110:	|  |               move.l d0,88(a0)
    a114:	|  |               movea.l 24(sp),a0
    a118:	|  |               move.l 88(a0),d0
    a11c:	|  |        ,----- bne.w a344 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a120:	|  |        |      movea.l 24(sp),a0
    a124:	|  |        |      move.l 84(a0),d0
    a128:	|  |        |      addq.l #1,d0
    a12a:	|  |        |      movea.l 24(sp),a0
    a12e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a132:	|  |        |      movea.l 24(sp),a0
    a136:	|  |        |      move.l 84(a0),d0
    a13a:	|  |        |      movea.l 24(sp),a0
    a13e:	|  |        |      movea.l 72(a0),a0
    a142:	|  |        |      move.l 8(a0),d1
    a146:	|  |        |      move.l d1,-(sp)
    a148:	|  |        |      move.l d0,-(sp)
    a14a:	|  |        |      jsr 17af2 <__modsi3>
    a150:	|  |        |      addq.l #8,sp
    a152:	|  |        |      movea.l 24(sp),a0
    a156:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a15a:	|  |        |      movea.l 24(sp),a0
    a15e:	|  |        |      movea.l 72(a0),a0
    a162:	|  |        |      movea.l 4(a0),a1
    a166:	|  |        |      movea.l 24(sp),a0
    a16a:	|  |        |      move.l 84(a0),d0
    a16e:	|  |        |      move.l d0,d1
    a170:	|  |        |      move.l d1,d0
    a172:	|  |        |      add.l d0,d0
    a174:	|  |        |      add.l d1,d0
    a176:	|  |        |      add.l d0,d0
    a178:	|  |        |      add.l d0,d0
    a17a:	|  |        |      lea (0,a1,d0.l),a0
    a17e:	|  |        |      move.l 4(a0),d0
    a182:	|  |        |      movea.l 24(sp),a0
    a186:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a18a:	|  |        |      movea.l 24(sp),a0
    a18e:	|  |        |      move.w 104(a0),d0
    a192:	|  |        +----- beq.w a344 <drawPeople+0x5c6>
    a196:	|  |        |      tst.l 20(sp)
    a19a:	|  |        +----- beq.w a344 <drawPeople+0x5c6>
    a19e:	|  |        |      movea.l 20(sp),a0
    a1a2:	|  |        |      move.l 4(a0),d0
    a1a6:	|  |        +----- beq.w a344 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a1aa:	|  |        |      movea.l 20(sp),a0
    a1ae:	|  |        |      movea.l 4(a0),a1
    a1b2:	|  |        |      movea.l 24(sp),a0
    a1b6:	|  |        |      move.l 84(a0),d0
    a1ba:	|  |        |      move.l d0,d1
    a1bc:	|  |        |      move.l d1,d0
    a1be:	|  |        |      add.l d0,d0
    a1c0:	|  |        |      add.l d1,d0
    a1c2:	|  |        |      add.l d0,d0
    a1c4:	|  |        |      add.l d0,d0
    a1c6:	|  |        |      lea (0,a1,d0.l),a0
    a1ca:	|  |        |      move.l 8(a0),d0
    a1ce:	|  |        |  ,-- ble.w a270 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a1d2:	|  |        |  |   movea.l 20(sp),a0
    a1d6:	|  |        |  |   movea.l 4(a0),a1
    a1da:	|  |        |  |   movea.l 24(sp),a0
    a1de:	|  |        |  |   move.l 84(a0),d0
    a1e2:	|  |        |  |   move.l d0,d1
    a1e4:	|  |        |  |   move.l d1,d0
    a1e6:	|  |        |  |   add.l d0,d0
    a1e8:	|  |        |  |   add.l d1,d0
    a1ea:	|  |        |  |   add.l d0,d0
    a1ec:	|  |        |  |   add.l d0,d0
    a1ee:	|  |        |  |   lea (0,a1,d0.l),a0
    a1f2:	|  |        |  |   move.l 8(a0),d0
    a1f6:	|  |        |  |   clr.l -(sp)
    a1f8:	|  |        |  |   move.l d0,-(sp)
    a1fa:	|  |        |  |   jsr cf90 <startSound>
    a200:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a202:	|  |        |  |   movea.l 24(sp),a0
    a206:	|  |        |  |   move.l 84(a0),d0
    a20a:	|  |        |  |   addq.l #1,d0
    a20c:	|  |        |  |   movea.l 24(sp),a0
    a210:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a214:	|  |        |  |   movea.l 24(sp),a0
    a218:	|  |        |  |   move.l 84(a0),d0
    a21c:	|  |        |  |   movea.l 24(sp),a0
    a220:	|  |        |  |   movea.l 72(a0),a0
    a224:	|  |        |  |   move.l 8(a0),d1
    a228:	|  |        |  |   move.l d1,-(sp)
    a22a:	|  |        |  |   move.l d0,-(sp)
    a22c:	|  |        |  |   jsr 17af2 <__modsi3>
    a232:	|  |        |  |   addq.l #8,sp
    a234:	|  |        |  |   movea.l 24(sp),a0
    a238:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a23c:	|  |        |  |   movea.l 24(sp),a0
    a240:	|  |        |  |   movea.l 72(a0),a0
    a244:	|  |        |  |   movea.l 4(a0),a1
    a248:	|  |        |  |   movea.l 24(sp),a0
    a24c:	|  |        |  |   move.l 84(a0),d0
    a250:	|  |        |  |   move.l d0,d1
    a252:	|  |        |  |   move.l d1,d0
    a254:	|  |        |  |   add.l d0,d0
    a256:	|  |        |  |   add.l d1,d0
    a258:	|  |        |  |   add.l d0,d0
    a25a:	|  |        |  |   add.l d0,d0
    a25c:	|  |        |  |   lea (0,a1,d0.l),a0
    a260:	|  |        |  |   move.l 4(a0),d0
    a264:	|  |        |  |   movea.l 24(sp),a0
    a268:	|  |        |  |   move.l d0,88(a0)
    a26c:	|  |        +--|-- bra.w a344 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a270:	|  |        |  '-> movea.l 20(sp),a0
    a274:	|  |        |      movea.l 4(a0),a1
    a278:	|  |        |      movea.l 24(sp),a0
    a27c:	|  |        |      move.l 84(a0),d0
    a280:	|  |        |      move.l d0,d1
    a282:	|  |        |      move.l d1,d0
    a284:	|  |        |      add.l d0,d0
    a286:	|  |        |      add.l d1,d0
    a288:	|  |        |      add.l d0,d0
    a28a:	|  |        |      add.l d0,d0
    a28c:	|  |        |      lea (0,a1,d0.l),a0
    a290:	|  |        |      move.l 8(a0),d0
    a294:	|  |        +----- beq.w a344 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a298:	|  |        |      movea.l 1c918 <noStack>,a1
    a29e:	|  |        |      movea.l 20(sp),a0
    a2a2:	|  |        |      move.l 4(a0),d2
    a2a6:	|  |        |      movea.l 24(sp),a0
    a2aa:	|  |        |      move.l 84(a0),d0
    a2ae:	|  |        |      move.l d0,d1
    a2b0:	|  |        |      move.l d1,d0
    a2b2:	|  |        |      add.l d0,d0
    a2b4:	|  |        |      add.l d1,d0
    a2b6:	|  |        |      add.l d0,d0
    a2b8:	|  |        |      add.l d0,d0
    a2ba:	|  |        |      movea.l d2,a0
    a2bc:	|  |        |      adda.l d0,a0
    a2be:	|  |        |      move.l 8(a0),d0
    a2c2:	|  |        |      neg.l d0
    a2c4:	|  |        |      pea 1 <_start+0x1>
    a2c8:	|  |        |      move.l a1,-(sp)
    a2ca:	|  |        |      clr.l -(sp)
    a2cc:	|  |        |      clr.l -(sp)
    a2ce:	|  |        |      move.l d0,-(sp)
    a2d0:	|  |        |      jsr 7210 <startNewFunctionNum>
    a2d6:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a2da:	|  |        |      movea.l 24(sp),a0
    a2de:	|  |        |      move.l 84(a0),d0
    a2e2:	|  |        |      addq.l #1,d0
    a2e4:	|  |        |      movea.l 24(sp),a0
    a2e8:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2ec:	|  |        |      movea.l 24(sp),a0
    a2f0:	|  |        |      move.l 84(a0),d0
    a2f4:	|  |        |      movea.l 24(sp),a0
    a2f8:	|  |        |      movea.l 72(a0),a0
    a2fc:	|  |        |      move.l 8(a0),d1
    a300:	|  |        |      move.l d1,-(sp)
    a302:	|  |        |      move.l d0,-(sp)
    a304:	|  |        |      jsr 17af2 <__modsi3>
    a30a:	|  |        |      addq.l #8,sp
    a30c:	|  |        |      movea.l 24(sp),a0
    a310:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a314:	|  |        |      movea.l 24(sp),a0
    a318:	|  |        |      movea.l 72(a0),a0
    a31c:	|  |        |      movea.l 4(a0),a1
    a320:	|  |        |      movea.l 24(sp),a0
    a324:	|  |        |      move.l 84(a0),d0
    a328:	|  |        |      move.l d0,d1
    a32a:	|  |        |      move.l d1,d0
    a32c:	|  |        |      add.l d0,d0
    a32e:	|  |        |      add.l d1,d0
    a330:	|  |        |      add.l d0,d0
    a332:	|  |        |      add.l d0,d0
    a334:	|  |        |      lea (0,a1,d0.l),a0
    a338:	|  |        |      move.l 4(a0),d0
    a33c:	|  |        |      movea.l 24(sp),a0
    a340:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a344:	|  |        '----> movea.l 24(sp),a0
    a348:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a34e:	|  '-------------> tst.l 24(sp)
    a352:	'----------------- bne.w 9da0 <drawPeople+0x22>
	}
}
    a356:	                   nop
    a358:	                   nop
    a35a:	                   move.l (sp)+,d2
    a35c:	                   lea 24(sp),sp
    a360:	                   rts

0000a362 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a362:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a364:	          pea 1901c <PutChar+0x14c0>
    a36a:	          jsr 170ba <KPrintF>
    a370:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a372:	          move.l 1c9a8 <allPeople>,(sp)
	while (thisPerson) {
    a378:	      ,-- bra.s a390 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a37a:	,-----|-> movea.l (sp),a0
    a37c:	|     |   movea.l 114(a0),a0
    a380:	|     |   move.l 4(a0),d0
    a384:	|     |   cmp.l 8(sp),d0
    a388:	|  ,--|-- beq.s a396 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a38a:	|  |  |   movea.l (sp),a0
    a38c:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a390:	|  |  '-> tst.l (sp)
    a392:	'--|----- bne.s a37a <findPerson+0x18>
    a394:	   |  ,-- bra.s a398 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a396:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a398:	      '-> pea 19030 <PutChar+0x14d4>
    a39e:	          jsr 170ba <KPrintF>
    a3a4:	          addq.l #4,sp
	return thisPerson;
    a3a6:	          move.l (sp),d0
}
    a3a8:	          addq.l #4,sp
    a3aa:	          rts

0000a3ac <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a3ac:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a3ae:	       move.l 12(sp),-(sp)
    a3b2:	       jsr a362 <findPerson>
    a3b8:	       addq.l #4,sp
    a3ba:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a3bc:	   ,-- bne.s a3c2 <floatCharacter+0x16>
    a3be:	   |   clr.w d0
    a3c0:	,--|-- bra.s a3cc <floatCharacter+0x20>
	moveMe -> floaty = f;
    a3c2:	|  '-> movea.l (sp),a0
    a3c4:	|      move.l 8(sp),24(a0)
	return TRUE;
    a3ca:	|      moveq #1,d0
}
    a3cc:	'----> addq.l #4,sp
    a3ce:	       rts

0000a3d0 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a3d0:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a3d2:	          tst.l 8(sp)
    a3d6:	      ,-- bne.s a3e4 <forceWalkingPerson+0x14>
    a3d8:	      |   tst.l 12(sp)
    a3dc:	      +-- bne.s a3e4 <forceWalkingPerson+0x14>
    a3de:	      |   clr.w d0
    a3e0:	,-----|-- bra.w a476 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a3e4:	|     '-> move.l 16(sp),-(sp)
    a3e8:	|         jsr a362 <findPerson>
    a3ee:	|         addq.l #4,sp
    a3f0:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a3f2:	|     ,-- bne.s a3f8 <forceWalkingPerson+0x28>
    a3f4:	|     |   clr.w d0
    a3f6:	+-----|-- bra.s a476 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a3f8:	|     '-> movea.l (sp),a0
    a3fa:	|         move.l 68(a0),d0
    a3fe:	|     ,-- beq.s a410 <forceWalkingPerson+0x40>
    a400:	|     |   movea.l (sp),a0
    a402:	|     |   move.l 68(a0),d0
    a406:	|     |   move.l d0,-(sp)
    a408:	|     |   jsr 4e14 <abortFunction>
    a40e:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a410:	|     '-> movea.l (sp),a0
    a412:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a418:	|         movea.l (sp),a0
    a41a:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a41e:	|         movea.l (sp),a0
    a420:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a426:	|         movea.l (sp),a0
    a428:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a42e:	|         movea.l (sp),a0
    a430:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a436:	|         movea.l (sp),a0
    a438:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a43c:	|         movea.l (sp),a0
    a43e:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a442:	|         move.l (sp),-(sp)
    a444:	|         jsr 96c4 <doBorderStuff>
    a44a:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a44c:	|         pea 1 <_start+0x1>
    a450:	|         move.l 4(sp),-(sp)
    a454:	|         jsr bd0a <walkMe>
    a45a:	|         addq.l #8,sp
    a45c:	|         tst.w d0
    a45e:	|     ,-- bne.s a468 <forceWalkingPerson+0x98>
    a460:	|     |   movea.l (sp),a0
    a462:	|     |   move.w 66(a0),d0
    a466:	|  ,--|-- beq.s a474 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a468:	|  |  '-> movea.l (sp),a0
    a46a:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a470:	|  |      moveq #1,d0
    a472:	+--|----- bra.s a476 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a474:	|  '----> clr.w d0
    }
}
    a476:	'-------> addq.l #4,sp
    a478:	          rts

0000a47a <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a47a:	                lea -56(sp),sp
    a47e:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a480:	                pea 19045 <PutChar+0x14e9>
    a486:	                jsr 170ba <KPrintF>
    a48c:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a48e:	                move.l #320,56(sp)
    a496:	                move.l #200,52(sp)
    a49e:	                moveq #-1,d0
    a4a0:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a4a4:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a4ac:	                clr.l 44(sp)
    a4b0:	   ,----------- bra.w a688 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a4b4:	,--|----------> movea.l 1ca60 <currentFloor>,a0
    a4ba:	|  |            move.l 12(a0),d1
    a4be:	|  |            move.l 44(sp),d0
    a4c2:	|  |            lsl.l #3,d0
    a4c4:	|  |            movea.l d1,a0
    a4c6:	|  |            adda.l d0,a0
    a4c8:	|  |            move.l (a0),d0
    a4ca:	|  |            move.l d0,d1
    a4cc:	|  |            subq.l #1,d1
    a4ce:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a4d2:	|  |            clr.l 40(sp)
    a4d6:	|  |     ,----- bra.w a666 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a4da:	|  |  ,--|----> movea.l 1ca60 <currentFloor>,a0
    a4e0:	|  |  |  |      move.l 4(a0),d1
    a4e4:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a4ea:	|  |  |  |      movea.l 12(a0),a0
    a4ee:	|  |  |  |      move.l 44(sp),d0
    a4f2:	|  |  |  |      lsl.l #3,d0
    a4f4:	|  |  |  |      adda.l d0,a0
    a4f6:	|  |  |  |      movea.l 4(a0),a0
    a4fa:	|  |  |  |      move.l 40(sp),d0
    a4fe:	|  |  |  |      add.l d0,d0
    a500:	|  |  |  |      add.l d0,d0
    a502:	|  |  |  |      adda.l d0,a0
    a504:	|  |  |  |      move.l (a0),d0
    a506:	|  |  |  |      lsl.l #3,d0
    a508:	|  |  |  |      movea.l d1,a0
    a50a:	|  |  |  |      adda.l d0,a0
    a50c:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a510:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a516:	|  |  |  |      move.l 4(a0),d1
    a51a:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a520:	|  |  |  |      movea.l 12(a0),a0
    a524:	|  |  |  |      move.l 44(sp),d0
    a528:	|  |  |  |      lsl.l #3,d0
    a52a:	|  |  |  |      adda.l d0,a0
    a52c:	|  |  |  |      movea.l 4(a0),a0
    a530:	|  |  |  |      move.l 40(sp),d0
    a534:	|  |  |  |      add.l d0,d0
    a536:	|  |  |  |      add.l d0,d0
    a538:	|  |  |  |      adda.l d0,a0
    a53a:	|  |  |  |      move.l (a0),d0
    a53c:	|  |  |  |      lsl.l #3,d0
    a53e:	|  |  |  |      movea.l d1,a0
    a540:	|  |  |  |      adda.l d0,a0
    a542:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a548:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a54e:	|  |  |  |      move.l 4(a0),d1
    a552:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a558:	|  |  |  |      movea.l 12(a0),a0
    a55c:	|  |  |  |      move.l 44(sp),d0
    a560:	|  |  |  |      lsl.l #3,d0
    a562:	|  |  |  |      adda.l d0,a0
    a564:	|  |  |  |      movea.l 4(a0),a0
    a568:	|  |  |  |      move.l 36(sp),d0
    a56c:	|  |  |  |      add.l d0,d0
    a56e:	|  |  |  |      add.l d0,d0
    a570:	|  |  |  |      adda.l d0,a0
    a572:	|  |  |  |      move.l (a0),d0
    a574:	|  |  |  |      lsl.l #3,d0
    a576:	|  |  |  |      movea.l d1,a0
    a578:	|  |  |  |      adda.l d0,a0
    a57a:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a57e:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a584:	|  |  |  |      move.l 4(a0),d1
    a588:	|  |  |  |      movea.l 1ca60 <currentFloor>,a0
    a58e:	|  |  |  |      movea.l 12(a0),a0
    a592:	|  |  |  |      move.l 44(sp),d0
    a596:	|  |  |  |      lsl.l #3,d0
    a598:	|  |  |  |      adda.l d0,a0
    a59a:	|  |  |  |      movea.l 4(a0),a0
    a59e:	|  |  |  |      move.l 36(sp),d0
    a5a2:	|  |  |  |      add.l d0,d0
    a5a4:	|  |  |  |      add.l d0,d0
    a5a6:	|  |  |  |      adda.l d0,a0
    a5a8:	|  |  |  |      move.l (a0),d0
    a5aa:	|  |  |  |      lsl.l #3,d0
    a5ac:	|  |  |  |      movea.l d1,a0
    a5ae:	|  |  |  |      adda.l d0,a0
    a5b0:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a5b6:	|  |  |  |      movea.l 68(sp),a0
    a5ba:	|  |  |  |      move.l (a0),d1
    a5bc:	|  |  |  |      movea.l 64(sp),a0
    a5c0:	|  |  |  |      move.l (a0),d0
    a5c2:	|  |  |  |      move.l d1,-(sp)
    a5c4:	|  |  |  |      move.l d0,-(sp)
    a5c6:	|  |  |  |      move.l 24(sp),-(sp)
    a5ca:	|  |  |  |      move.l 32(sp),-(sp)
    a5ce:	|  |  |  |      move.l 40(sp),-(sp)
    a5d2:	|  |  |  |      move.l 48(sp),-(sp)
    a5d6:	|  |  |  |      lea 28(sp),a0
    a5da:	|  |  |  |      move.l a0,-(sp)
    a5dc:	|  |  |  |      lea 36(sp),a0
    a5e0:	|  |  |  |      move.l a0,-(sp)
    a5e2:	|  |  |  |      jsr 15eb8 <closestPointOnLine>
    a5e8:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a5ec:	|  |  |  |      movea.l 64(sp),a0
    a5f0:	|  |  |  |      move.l (a0),d0
    a5f2:	|  |  |  |      move.l 8(sp),d1
    a5f6:	|  |  |  |      move.l d0,d2
    a5f8:	|  |  |  |      sub.l d1,d2
    a5fa:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a5fe:	|  |  |  |      movea.l 68(sp),a0
    a602:	|  |  |  |      move.l (a0),d0
    a604:	|  |  |  |      move.l 4(sp),d1
    a608:	|  |  |  |      move.l d0,d2
    a60a:	|  |  |  |      sub.l d1,d2
    a60c:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a610:	|  |  |  |      move.l 28(sp),-(sp)
    a614:	|  |  |  |      move.l 32(sp),-(sp)
    a618:	|  |  |  |      jsr 17a46 <__mulsi3>
    a61e:	|  |  |  |      addq.l #8,sp
    a620:	|  |  |  |      move.l d0,d2
    a622:	|  |  |  |      move.l 24(sp),-(sp)
    a626:	|  |  |  |      move.l 28(sp),-(sp)
    a62a:	|  |  |  |      jsr 17a46 <__mulsi3>
    a630:	|  |  |  |      addq.l #8,sp
    a632:	|  |  |  |      move.l d2,d1
    a634:	|  |  |  |      add.l d0,d1
    a636:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a63a:	|  |  |  |      move.l 12(sp),d2
    a63e:	|  |  |  |      cmp.l 32(sp),d2
    a642:	|  |  |  |  ,-- bge.s a65c <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    a644:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a64a:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a650:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a656:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a65c:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a662:	|  |  |  |      addq.l #1,40(sp)
    a666:	|  |  |  '----> movea.l 1ca60 <currentFloor>,a0
    a66c:	|  |  |         move.l 12(a0),d1
    a670:	|  |  |         move.l 44(sp),d0
    a674:	|  |  |         lsl.l #3,d0
    a676:	|  |  |         movea.l d1,a0
    a678:	|  |  |         adda.l d0,a0
    a67a:	|  |  |         move.l (a0),d0
    a67c:	|  |  |         cmp.l 40(sp),d0
    a680:	|  |  '-------- bgt.w a4da <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a684:	|  |            addq.l #1,44(sp)
    a688:	|  '----------> movea.l 1ca60 <currentFloor>,a0
    a68e:	|               move.l 8(a0),d0
    a692:	|               cmp.l 44(sp),d0
    a696:	'-------------- bgt.w a4b4 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    a69a:	                moveq #-1,d0
    a69c:	                cmp.l 48(sp),d0
    a6a0:	            ,-- bne.s a6a6 <handleClosestPoint+0x22c>
    a6a2:	            |   clr.w d0
    a6a4:	         ,--|-- bra.s a6c0 <handleClosestPoint+0x246>
	*setX = gotX;
    a6a6:	         |  '-> movea.l 64(sp),a0
    a6aa:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a6ae:	         |      movea.l 68(sp),a0
    a6b2:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a6b6:	         |      movea.l 72(sp),a0
    a6ba:	         |      move.l 48(sp),(a0)

	return TRUE;
    a6be:	         |      moveq #1,d0
}
    a6c0:	         '----> move.l (sp)+,d2
    a6c2:	                lea 56(sp),sp
    a6c6:	                rts

0000a6c8 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a6c8:	clr.l 1c9bc <personRegion+0x10>
	personRegion.sY = 0;
    a6ce:	clr.l 1c9c0 <personRegion+0x14>
	personRegion.di = -1;
    a6d4:	moveq #-1,d0
    a6d6:	move.l d0,1c9c4 <personRegion+0x18>
	allScreenRegions = NULL;
    a6dc:	clr.l 1ca54 <allScreenRegions>

	return TRUE;
    a6e2:	moveq #1,d0
}
    a6e4:	rts

0000a6e6 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a6e6:	          subq.l #4,sp
    a6e8:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a6ea:	          tst.l 12(sp)
    a6ee:	      ,-- bne.s a6f6 <jumpPerson+0x10>
    a6f0:	      |   tst.l 16(sp)
    a6f4:	,-----|-- beq.s a76a <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6f6:	|     '-> move.l 20(sp),-(sp)
    a6fa:	|         jsr a362 <findPerson>
    a700:	|         addq.l #4,sp
    a702:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a706:	|  ,----- beq.s a76e <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a708:	|  |      movea.l 4(sp),a0
    a70c:	|  |      move.l 68(a0),d0
    a710:	|  |  ,-- beq.s a724 <jumpPerson+0x3e>
    a712:	|  |  |   movea.l 4(sp),a0
    a716:	|  |  |   move.l 68(a0),d0
    a71a:	|  |  |   move.l d0,-(sp)
    a71c:	|  |  |   jsr 4e14 <abortFunction>
    a722:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a724:	|  |  '-> movea.l 4(sp),a0
    a728:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a72c:	|  |      movea.l 4(sp),a0
    a730:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a734:	|  |      movea.l 4(sp),a0
    a738:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a73c:	|  |      move.l 16(sp),-(sp)
    a740:	|  |      jsr 174ec <__floatsisf>
    a746:	|  |      addq.l #4,sp
    a748:	|  |      move.l d0,d2
    a74a:	|  |      move.l 12(sp),-(sp)
    a74e:	|  |      jsr 174ec <__floatsisf>
    a754:	|  |      addq.l #4,sp
    a756:	|  |      move.l d2,-(sp)
    a758:	|  |      move.l d0,-(sp)
    a75a:	|  |      move.l 12(sp),-(sp)
    a75e:	|  |      jsr ab0c <moveAndScale>
    a764:	|  |      lea 12(sp),sp
    a768:	|  |  ,-- bra.s a770 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a76a:	'--|--|-> nop
    a76c:	   |  +-- bra.s a770 <jumpPerson+0x8a>
    if (!moveMe) return;
    a76e:	   '--|-> nop
}
    a770:	      '-> move.l (sp)+,d2
    a772:	          addq.l #4,sp
    a774:	          rts

0000a776 <killAllPeople>:


void killAllPeople () {
    a776:	          subq.l #8,sp
    a778:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a77a:	   ,----- bra.s a7e6 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a77c:	,--|----> movea.l 1c9a8 <allPeople>,a0
    a782:	|  |      move.l 68(a0),d0
    a786:	|  |  ,-- beq.s a79c <killAllPeople+0x26>
    a788:	|  |  |   movea.l 1c9a8 <allPeople>,a0
    a78e:	|  |  |   move.l 68(a0),d0
    a792:	|  |  |   move.l d0,-(sp)
    a794:	|  |  |   jsr 4e14 <abortFunction>
    a79a:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a79c:	|  |  '-> movea.l 1c9a8 <allPeople>,a0
    a7a2:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a7a6:	|  |      move.l 1c9a8 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a7ae:	|  |      movea.l 1c9a8 <allPeople>,a0
    a7b4:	|  |      move.l 36(a0),d0
    a7b8:	|  |      move.l d0,1c9a8 <allPeople>
		removeObjectType (killPeople -> thisType);
    a7be:	|  |      movea.l 8(sp),a0
    a7c2:	|  |      move.l 114(a0),d0
    a7c6:	|  |      move.l d0,-(sp)
    a7c8:	|  |      jsr d678 <removeObjectType>
    a7ce:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a7d0:	|  |      move.l 8(sp),4(sp)
    a7d6:	|  |      move.l 1c948 <SysBase>,d0
    a7dc:	|  |      movea.l d0,a6
    a7de:	|  |      movea.l 4(sp),a1
    a7e2:	|  |      jsr -690(a6)
	while (allPeople) {
    a7e6:	|  '----> move.l 1c9a8 <allPeople>,d0
    a7ec:	'-------- bne.s a77c <killAllPeople+0x6>
	}
}
    a7ee:	          nop
    a7f0:	          nop
    a7f2:	          movea.l (sp)+,a6
    a7f4:	          addq.l #8,sp
    a7f6:	          rts

0000a7f8 <killMostPeople>:

void killMostPeople() {
    a7f8:	          lea -12(sp),sp
    a7fc:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a7fe:	          move.l #117160,12(sp)

    while (*lookyHere) {
    a806:	   ,----- bra.w a88c <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a80a:	,--|----> movea.l 12(sp),a0
    a80e:	|  |      movea.l (a0),a0
    a810:	|  |      move.l 118(a0),d0
    a814:	|  |      moveq #32,d1
    a816:	|  |      and.l d1,d0
    a818:	|  |  ,-- beq.s a82a <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a81a:	|  |  |   movea.l 12(sp),a0
    a81e:	|  |  |   move.l (a0),d0
    a820:	|  |  |   moveq #36,d1
    a822:	|  |  |   add.l d0,d1
    a824:	|  |  |   move.l d1,12(sp)
    a828:	|  +--|-- bra.s a88c <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a82a:	|  |  '-> movea.l 12(sp),a0
    a82e:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a832:	|  |      movea.l 8(sp),a0
    a836:	|  |      move.l 36(a0),d0
    a83a:	|  |      movea.l 12(sp),a0
    a83e:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a840:	|  |      movea.l 8(sp),a0
    a844:	|  |      move.l 68(a0),d0
    a848:	|  |  ,-- beq.s a85c <killMostPeople+0x64>
    a84a:	|  |  |   movea.l 8(sp),a0
    a84e:	|  |  |   move.l 68(a0),d0
    a852:	|  |  |   move.l d0,-(sp)
    a854:	|  |  |   jsr 4e14 <abortFunction>
    a85a:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a85c:	|  |  '-> movea.l 8(sp),a0
    a860:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a864:	|  |      movea.l 8(sp),a0
    a868:	|  |      move.l 114(a0),d0
    a86c:	|  |      move.l d0,-(sp)
    a86e:	|  |      jsr d678 <removeObjectType>
    a874:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a876:	|  |      move.l 8(sp),4(sp)
    a87c:	|  |      move.l 1c948 <SysBase>,d0
    a882:	|  |      movea.l d0,a6
    a884:	|  |      movea.l 4(sp),a1
    a888:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a88c:	|  '----> movea.l 12(sp),a0
    a890:	|         move.l (a0),d0
    a892:	'-------- bne.w a80a <killMostPeople+0x12>
        }
    }
}
    a896:	          nop
    a898:	          nop
    a89a:	          movea.l (sp)+,a6
    a89c:	          lea 12(sp),sp
    a8a0:	          rts

0000a8a2 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a8a2:	clr.l -(sp)
    a8a4:	move.l sp,d0
    a8a6:	addq.l #8,d0
    a8a8:	move.l d0,-(sp)
    a8aa:	jsr 3fb6 <setFrames>
    a8b0:	addq.l #8,sp
}
    a8b2:	nop
    a8b4:	rts

0000a8b6 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a8b6:	          lea -12(sp),sp
    a8ba:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    a8bc:	          pea 190c9 <PutChar+0x156d>
    a8c2:	          jsr 170ba <KPrintF>
    a8c8:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    a8ca:	          tst.l 20(sp)
    a8ce:	      ,-- bne.s a8dc <makeWalkingPerson+0x26>
    a8d0:	      |   tst.l 24(sp)
    a8d4:	      +-- bne.s a8dc <makeWalkingPerson+0x26>
    a8d6:	      |   clr.w d0
    a8d8:	,-----|-- bra.w aa9e <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a8dc:	|     '-> movea.l 1ca60 <currentFloor>,a0
    a8e2:	|         move.l 8(a0),d0
    a8e6:	|     ,-- bne.s a8ee <makeWalkingPerson+0x38>
    a8e8:	|     |   clr.w d0
    a8ea:	+-----|-- bra.w aa9e <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a8ee:	|     '-> move.l 28(sp),d0
    a8f2:	|         move.l d0,-(sp)
    a8f4:	|         jsr a362 <findPerson>
    a8fa:	|         addq.l #4,sp
    a8fc:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    a900:	|     ,-- bne.s a91c <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    a902:	|     |   move.l 28(sp),d0
    a906:	|     |   move.l d0,-(sp)
    a908:	|     |   pea 190e4 <PutChar+0x1588>
    a90e:	|     |   jsr 170ba <KPrintF>
    a914:	|     |   addq.l #8,sp
		return FALSE;
    a916:	|     |   clr.w d0
    a918:	+-----|-- bra.w aa9e <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    a91c:	|     '-> movea.l 12(sp),a0
    a920:	|         move.l 68(a0),d0
    a924:	|     ,-- beq.s a938 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    a926:	|     |   movea.l 12(sp),a0
    a92a:	|     |   move.l 68(a0),d0
    a92e:	|     |   move.l d0,-(sp)
    a930:	|     |   jsr 4e14 <abortFunction>
    a936:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    a938:	|     '-> movea.l 12(sp),a0
    a93c:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a940:	|         movea.l 12(sp),a0
    a944:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a94a:	|         movea.l 12(sp),a0
    a94e:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a954:	|         movea.l 12(sp),a0
    a958:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a95e:	|         movea.l 12(sp),a0
    a962:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a968:	|         move.l 24(sp),-(sp)
    a96c:	|         move.l 24(sp),-(sp)
    a970:	|         jsr 16400 <inFloor>
    a976:	|         addq.l #8,sp
    a978:	|         movea.l 12(sp),a0
    a97c:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a980:	|         movea.l 12(sp),a0
    a984:	|         move.l 60(a0),d0
    a988:	|         moveq #-1,d1
    a98a:	|         cmp.l d0,d1
    a98c:	|     ,-- bne.s a9bc <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a98e:	|     |   movea.w #60,a0
    a992:	|     |   adda.l 12(sp),a0
    a996:	|     |   moveq #44,d1
    a998:	|     |   add.l 12(sp),d1
    a99c:	|     |   moveq #40,d0
    a99e:	|     |   add.l 12(sp),d0
    a9a2:	|     |   move.l a0,-(sp)
    a9a4:	|     |   move.l d1,-(sp)
    a9a6:	|     |   move.l d0,-(sp)
    a9a8:	|     |   jsr a47a <handleClosestPoint>
    a9ae:	|     |   lea 12(sp),sp
    a9b2:	|     |   tst.w d0
    a9b4:	|     +-- bne.s a9bc <makeWalkingPerson+0x106>
    a9b6:	|     |   clr.w d0
    a9b8:	+-----|-- bra.w aa9e <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a9bc:	|     '-> movea.l 12(sp),a0
    a9c0:	|         move.l 4(a0),d0
    a9c4:	|         move.l d0,-(sp)
    a9c6:	|         jsr 17484 <__fixsfsi>
    a9cc:	|         addq.l #4,sp
    a9ce:	|         move.l d0,d2
    a9d0:	|         movea.l 12(sp),a0
    a9d4:	|         move.l (a0),d0
    a9d6:	|         move.l d0,-(sp)
    a9d8:	|         jsr 17484 <__fixsfsi>
    a9de:	|         addq.l #4,sp
    a9e0:	|         move.l d2,-(sp)
    a9e2:	|         move.l d0,-(sp)
    a9e4:	|         jsr 16400 <inFloor>
    a9ea:	|         addq.l #8,sp
    a9ec:	|         movea.l 12(sp),a0
    a9f0:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a9f4:	|         movea.l 12(sp),a0
    a9f8:	|         move.l 56(a0),d0
    a9fc:	|         moveq #-1,d1
    a9fe:	|         cmp.l d0,d1
    aa00:	|     ,-- bne.s aa52 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    aa02:	|     |   movea.l 12(sp),a0
    aa06:	|     |   move.l (a0),d0
    aa08:	|     |   move.l d0,-(sp)
    aa0a:	|     |   jsr 17484 <__fixsfsi>
    aa10:	|     |   addq.l #4,sp
    aa12:	|     |   move.l d0,8(sp)
    aa16:	|     |   movea.l 12(sp),a0
    aa1a:	|     |   move.l 4(a0),d0
    aa1e:	|     |   move.l d0,-(sp)
    aa20:	|     |   jsr 17484 <__fixsfsi>
    aa26:	|     |   addq.l #4,sp
    aa28:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    aa2c:	|     |   moveq #56,d0
    aa2e:	|     |   add.l 12(sp),d0
    aa32:	|     |   move.l d0,-(sp)
    aa34:	|     |   lea 8(sp),a0
    aa38:	|     |   move.l a0,-(sp)
    aa3a:	|     |   moveq #16,d0
    aa3c:	|     |   add.l sp,d0
    aa3e:	|     |   move.l d0,-(sp)
    aa40:	|     |   jsr a47a <handleClosestPoint>
    aa46:	|     |   lea 12(sp),sp
    aa4a:	|     |   tst.w d0
    aa4c:	|     +-- bne.s aa52 <makeWalkingPerson+0x19c>
    aa4e:	|     |   clr.w d0
    aa50:	+-----|-- bra.s aa9e <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    aa52:	|     '-> move.l 12(sp),-(sp)
    aa56:	|         jsr 96c4 <doBorderStuff>
    aa5c:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    aa5e:	|         clr.l -(sp)
    aa60:	|         move.l 16(sp),-(sp)
    aa64:	|         jsr bd0a <walkMe>
    aa6a:	|         addq.l #8,sp
    aa6c:	|         tst.w d0
    aa6e:	|     ,-- bne.s aa7a <makeWalkingPerson+0x1c4>
    aa70:	|     |   movea.l 12(sp),a0
    aa74:	|     |   move.w 66(a0),d0
    aa78:	|  ,--|-- beq.s aa9c <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    aa7a:	|  |  '-> lea 28(sp),a0
    aa7e:	|  |      move.l a0,-(sp)
    aa80:	|  |      pea 1910d <PutChar+0x15b1>
    aa86:	|  |      jsr 170ba <KPrintF>
    aa8c:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    aa8e:	|  |      movea.l 12(sp),a0
    aa92:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    aa98:	|  |      moveq #1,d0
    aa9a:	+--|----- bra.s aa9e <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    aa9c:	|  '----> clr.w d0
	}
}
    aa9e:	'-------> move.l (sp)+,d2
    aaa0:	          lea 12(sp),sp
    aaa4:	          rts

0000aaa6 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    aaa6:	       lea -16(sp),sp
    aaaa:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    aaac:	       moveq #12,d0
    aaae:	       move.l d0,16(sp)
    aab2:	       clr.l 12(sp)
    aab6:	       move.l 1c948 <SysBase>,d0
    aabc:	       movea.l d0,a6
    aabe:	       move.l 16(sp),d0
    aac2:	       move.l 12(sp),d1
    aac6:	       jsr -684(a6)
    aaca:	       move.l d0,8(sp)
    aace:	       move.l 8(sp),d0
    aad2:	       move.l d0,4(sp)
    if(newAnim == 0) {
    aad6:	   ,-- bne.s aaea <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    aad8:	   |   pea 19140 <PutChar+0x15e4>
    aade:	   |   jsr 170ba <KPrintF>
    aae4:	   |   addq.l #4,sp
        return NULL;    
    aae6:	   |   moveq #0,d0
    aae8:	,--|-- bra.s ab04 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    aaea:	|  '-> movea.l 4(sp),a0
    aaee:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    aaf0:	|      movea.l 4(sp),a0
    aaf4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    aaf8:	|      movea.l 4(sp),a0
    aafc:	|      clr.l 4(a0)
	return newAnim;
    ab00:	|      move.l 4(sp),d0
}
    ab04:	'----> movea.l (sp)+,a6
    ab06:	       lea 16(sp),sp
    ab0a:	       rts

0000ab0c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ab0c:	    move.l d2,-(sp)
	me->x = x;
    ab0e:	    movea.l 8(sp),a0
    ab12:	    move.l 12(sp),(a0)
	me->y = y;
    ab16:	    movea.l 8(sp),a0
    ab1a:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ab20:	    movea.l 8(sp),a0
    ab24:	    clr.l 8(a0)
	me->oldy = 0;
    ab28:	    movea.l 8(sp),a0
    ab2c:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ab30:	    movea.l 8(sp),a0
    ab34:	    move.l 118(a0),d0
    ab38:	    moveq #2,d1
    ab3a:	    and.l d1,d0
    ab3c:	,-- bne.s ab94 <moveAndScale+0x88>
    ab3e:	|   move.w 1c2d0 <scaleDivide>,d0
    ab44:	+-- beq.s ab94 <moveAndScale+0x88>
    ab46:	|   movea.l 8(sp),a0
    ab4a:	|   move.l 4(a0),d2
    ab4e:	|   move.w 1c2ce <scaleHorizon>,d0
    ab54:	|   movea.w d0,a0
    ab56:	|   move.l a0,-(sp)
    ab58:	|   jsr 174ec <__floatsisf>
    ab5e:	|   addq.l #4,sp
    ab60:	|   move.l d0,-(sp)
    ab62:	|   move.l d2,-(sp)
    ab64:	|   jsr 177e0 <__subsf3>
    ab6a:	|   addq.l #8,sp
    ab6c:	|   move.l d0,d2
    ab6e:	|   move.w 1c2d0 <scaleDivide>,d0
    ab74:	|   movea.w d0,a0
    ab76:	|   move.l a0,-(sp)
    ab78:	|   jsr 174ec <__floatsisf>
    ab7e:	|   addq.l #4,sp
    ab80:	|   move.l d0,-(sp)
    ab82:	|   move.l d2,-(sp)
    ab84:	|   jsr 173a2 <__divsf3>
    ab8a:	|   addq.l #8,sp
    ab8c:	|   movea.l 8(sp),a0
    ab90:	|   move.l d0,32(a0)
}
    ab94:	'-> nop
    ab96:	    move.l (sp)+,d2
    ab98:	    rts

0000ab9a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ab9a:	          lea -16(sp),sp
    ab9e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    aba0:	          move.l 24(sp),-(sp)
    aba4:	          jsr a362 <findPerson>
    abaa:	          addq.l #4,sp
    abac:	          move.l d0,8(sp)

    if (p) {
    abb0:	,-------- beq.w ac90 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    abb4:	|         move.l 1ca58 <overRegion>,d0
    abba:	|         cmpi.l #117164,d0
    abc0:	|     ,-- bne.s abde <removeOneCharacter+0x44>
    abc2:	|     |   movea.l 1ca58 <overRegion>,a0
    abc8:	|     |   move.l 28(a0),d1
    abcc:	|     |   movea.l 8(sp),a0
    abd0:	|     |   move.l 114(a0),d0
    abd4:	|     |   cmp.l d1,d0
    abd6:	|     +-- bne.s abde <removeOneCharacter+0x44>
            overRegion = NULL;
    abd8:	|     |   clr.l 1ca58 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    abde:	|     '-> movea.l 8(sp),a0
    abe2:	|         move.l 68(a0),d0
    abe6:	|     ,-- beq.s abfa <removeOneCharacter+0x60>
    abe8:	|     |   movea.l 8(sp),a0
    abec:	|     |   move.l 68(a0),d0
    abf0:	|     |   move.l d0,-(sp)
    abf2:	|     |   jsr 4e14 <abortFunction>
    abf8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    abfa:	|     '-> movea.l 8(sp),a0
    abfe:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ac02:	|         clr.l 12(sp)
    ac06:	|     ,-- bra.s ac2e <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ac08:	|  ,--|-> movea.l 8(sp),a0
    ac0c:	|  |  |   movea.l 80(a0),a0
    ac10:	|  |  |   move.l (a0),d1
    ac12:	|  |  |   move.l 12(sp),d0
    ac16:	|  |  |   add.l d0,d0
    ac18:	|  |  |   add.l d0,d0
    ac1a:	|  |  |   movea.l d1,a0
    ac1c:	|  |  |   adda.l d0,a0
    ac1e:	|  |  |   move.l (a0),d0
    ac20:	|  |  |   move.l d0,-(sp)
    ac22:	|  |  |   jsr 9640 <deleteAnim>
    ac28:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ac2a:	|  |  |   addq.l #1,12(sp)
    ac2e:	|  |  '-> moveq #2,d0
    ac30:	|  |      cmp.l 12(sp),d0
    ac34:	|  '----- bge.s ac08 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ac36:	|         move.l #117160,16(sp)
    ac3e:	|     ,-- bra.s ac4e <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ac40:	|  ,--|-> movea.l 16(sp),a0
    ac44:	|  |  |   move.l (a0),d0
    ac46:	|  |  |   moveq #36,d1
    ac48:	|  |  |   add.l d0,d1
    ac4a:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ac4e:	|  |  '-> movea.l 16(sp),a0
    ac52:	|  |      move.l (a0),d0
    ac54:	|  |      cmp.l 8(sp),d0
    ac58:	|  '----- bne.s ac40 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ac5a:	|         movea.l 8(sp),a0
    ac5e:	|         move.l 36(a0),d0
    ac62:	|         movea.l 16(sp),a0
    ac66:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    ac68:	|         movea.l 8(sp),a0
    ac6c:	|         move.l 114(a0),d0
    ac70:	|         move.l d0,-(sp)
    ac72:	|         jsr d678 <removeObjectType>
    ac78:	|         addq.l #4,sp
        FreeVec(p);
    ac7a:	|         move.l 8(sp),4(sp)
    ac80:	|         move.l 1c948 <SysBase>,d0
    ac86:	|         movea.l d0,a6
    ac88:	|         movea.l 4(sp),a1
    ac8c:	|         jsr -690(a6)
		
    }
}
    ac90:	'-------> nop
    ac92:	          movea.l (sp)+,a6
    ac94:	          lea 16(sp),sp
    ac98:	          rts

0000ac9a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ac9a:	       subq.l #8,sp
    ac9c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ac9e:	       movea.l 16(sp),a0
    aca2:	       movea.l 80(a0),a0
    aca6:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    acac:	       movea.l 16(sp),a0
    acb0:	       move.l 92(a0),d2
    acb4:	       move.l 4(sp),-(sp)
    acb8:	       pea b4 <_start+0xb4>
    acbc:	       jsr 17ac4 <__divsi3>
    acc2:	       addq.l #8,sp
    acc4:	       add.l d2,d0
    acc6:	       move.l d0,d1
    acc8:	       addi.l #180,d1
    acce:	       movea.l 16(sp),a0
    acd2:	       move.l 100(a0),d0
    acd6:	       move.l d1,d2
    acd8:	       add.l d0,d2
    acda:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    acde:	   ,-- bra.s ace8 <rethinkAngle+0x4e>
    ace0:	,--|-> addi.l #-360,8(sp)
    ace8:	|  '-> cmpi.l #359,8(sp)
    acf0:	'----- bgt.s ace0 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    acf2:	       move.l 4(sp),-(sp)
    acf6:	       move.l 12(sp),-(sp)
    acfa:	       jsr 17a46 <__mulsi3>
    ad00:	       addq.l #8,sp
    ad02:	       pea 168 <decodeFilename+0x50>
    ad06:	       move.l d0,-(sp)
    ad08:	       jsr 17ac4 <__divsi3>
    ad0e:	       addq.l #8,sp
    ad10:	       movea.l 16(sp),a0
    ad14:	       move.l d0,106(a0)
}
    ad18:	       nop
    ad1a:	       move.l (sp)+,d2
    ad1c:	       addq.l #8,sp
    ad1e:	       rts

0000ad20 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    ad20:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    ad22:	          movea.l 8(sp),a0
    ad26:	          move.l 8(a0),d0
    ad2a:	          move.l 12(sp),-(sp)
    ad2e:	          move.l d0,-(sp)
    ad30:	          jsr 8d0 <put2bytes>
    ad36:	          addq.l #8,sp
	if (p -> numFrames) {
    ad38:	          movea.l 8(sp),a0
    ad3c:	          move.l 8(a0),d0
    ad40:	,-------- beq.w ade4 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    ad44:	|         movea.l 8(sp),a0
    ad48:	|         movea.l (a0),a0
    ad4a:	|         move.l (a0),d0
    ad4c:	|         move.l 12(sp),-(sp)
    ad50:	|         move.l d0,-(sp)
    ad52:	|         jsr 958 <put4bytes>
    ad58:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ad5a:	|         clr.l (sp)
    ad5c:	|     ,-- bra.s add6 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    ad5e:	|  ,--|-> movea.l 8(sp),a0
    ad62:	|  |  |   movea.l 4(a0),a0
    ad66:	|  |  |   move.l (sp),d1
    ad68:	|  |  |   move.l d1,d0
    ad6a:	|  |  |   add.l d0,d0
    ad6c:	|  |  |   add.l d1,d0
    ad6e:	|  |  |   add.l d0,d0
    ad70:	|  |  |   add.l d0,d0
    ad72:	|  |  |   adda.l d0,a0
    ad74:	|  |  |   move.l (a0),d0
    ad76:	|  |  |   move.l 12(sp),-(sp)
    ad7a:	|  |  |   move.l d0,-(sp)
    ad7c:	|  |  |   jsr 958 <put4bytes>
    ad82:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ad84:	|  |  |   movea.l 8(sp),a0
    ad88:	|  |  |   movea.l 4(a0),a0
    ad8c:	|  |  |   move.l (sp),d1
    ad8e:	|  |  |   move.l d1,d0
    ad90:	|  |  |   add.l d0,d0
    ad92:	|  |  |   add.l d1,d0
    ad94:	|  |  |   add.l d0,d0
    ad96:	|  |  |   add.l d0,d0
    ad98:	|  |  |   adda.l d0,a0
    ad9a:	|  |  |   move.l 4(a0),d0
    ad9e:	|  |  |   move.l 12(sp),-(sp)
    ada2:	|  |  |   move.l d0,-(sp)
    ada4:	|  |  |   jsr 958 <put4bytes>
    adaa:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    adac:	|  |  |   movea.l 8(sp),a0
    adb0:	|  |  |   movea.l 4(a0),a0
    adb4:	|  |  |   move.l (sp),d1
    adb6:	|  |  |   move.l d1,d0
    adb8:	|  |  |   add.l d0,d0
    adba:	|  |  |   add.l d1,d0
    adbc:	|  |  |   add.l d0,d0
    adbe:	|  |  |   add.l d0,d0
    adc0:	|  |  |   adda.l d0,a0
    adc2:	|  |  |   move.l 8(a0),d0
    adc6:	|  |  |   move.l 12(sp),-(sp)
    adca:	|  |  |   move.l d0,-(sp)
    adcc:	|  |  |   jsr 958 <put4bytes>
    add2:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    add4:	|  |  |   addq.l #1,(sp)
    add6:	|  |  '-> movea.l 8(sp),a0
    adda:	|  |      move.l 8(a0),d0
    adde:	|  |      cmp.l (sp),d0
    ade0:	|  '----- bgt.w ad5e <saveAnim+0x3e>
		}
	}
	return TRUE;
    ade4:	'-------> moveq #1,d0
}
    ade6:	          addq.l #4,sp
    ade8:	          rts

0000adea <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    adea:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    adec:	             movea.l 8(sp),a0
    adf0:	             move.l 4(a0),d0
    adf4:	             move.l 12(sp),-(sp)
    adf8:	             move.l d0,-(sp)
    adfa:	             jsr 8d0 <put2bytes>
    ae00:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ae02:	             clr.l (sp)
    ae04:	   ,-------- bra.s ae30 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ae06:	,--|-------> movea.l 8(sp),a0
    ae0a:	|  |         move.l (a0),d1
    ae0c:	|  |         move.l (sp),d0
    ae0e:	|  |         add.l d0,d0
    ae10:	|  |         add.l d0,d0
    ae12:	|  |         movea.l d1,a0
    ae14:	|  |         adda.l d0,a0
    ae16:	|  |         move.l (a0),d0
    ae18:	|  |         move.l 12(sp),-(sp)
    ae1c:	|  |         move.l d0,-(sp)
    ae1e:	|  |         jsr ad20 <saveAnim>
    ae24:	|  |         addq.l #8,sp
    ae26:	|  |         tst.w d0
    ae28:	|  |     ,-- bne.s ae2e <saveCostume+0x44>
    ae2a:	|  |     |   clr.w d0
    ae2c:	|  |  ,--|-- bra.s ae44 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ae2e:	|  |  |  '-> addq.l #1,(sp)
    ae30:	|  '--|----> movea.l 8(sp),a0
    ae34:	|     |      move.l 4(a0),d1
    ae38:	|     |      move.l d1,d0
    ae3a:	|     |      add.l d0,d0
    ae3c:	|     |      add.l d1,d0
    ae3e:	|     |      cmp.l (sp),d0
    ae40:	'-----|----- bgt.s ae06 <saveCostume+0x1c>
	}

	return TRUE;
    ae42:	      |      moveq #1,d0
}
    ae44:	      '----> addq.l #4,sp
    ae46:	             rts

0000ae48 <savePeople>:

BOOL savePeople (BPTR fp) {
    ae48:	             lea -144(sp),sp
    ae4c:	             move.l a6,-(sp)
    ae4e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    ae50:	             move.l 1c9a8 <allPeople>,148(sp)
	int countPeople = 0, a;
    ae58:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    ae5c:	             move.w 1c2ce <scaleHorizon>,d0
    ae62:	             movea.w d0,a0
    ae64:	             move.l 156(sp),-(sp)
    ae68:	             move.l a0,-(sp)
    ae6a:	             jsr a9c <putSigned>
    ae70:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    ae72:	             move.w 1c2d0 <scaleDivide>,d0
    ae78:	             movea.w d0,a0
    ae7a:	             move.l 156(sp),-(sp)
    ae7e:	             move.l a0,-(sp)
    ae80:	             jsr a9c <putSigned>
    ae86:	             addq.l #8,sp

	while (me) {
    ae88:	         ,-- bra.s ae98 <savePeople+0x50>
		countPeople ++;
    ae8a:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    ae8e:	      |  |   movea.l 148(sp),a0
    ae92:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    ae98:	      |  '-> tst.l 148(sp)
    ae9c:	      '----- bne.s ae8a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    ae9e:	             move.l 156(sp),-(sp)
    aea2:	             move.l 148(sp),-(sp)
    aea6:	             jsr 8d0 <put2bytes>
    aeac:	             addq.l #8,sp

	me = allPeople;
    aeae:	             move.l 1c9a8 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    aeb6:	             clr.l 140(sp)
    aeba:	   ,-------- bra.w b312 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    aebe:	,--|-------> movea.l 148(sp),a0
    aec2:	|  |         move.l (a0),d0
    aec4:	|  |         move.l 156(sp),-(sp)
    aec8:	|  |         move.l d0,-(sp)
    aeca:	|  |         jsr a46 <putFloat>
    aed0:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    aed2:	|  |         movea.l 148(sp),a0
    aed6:	|  |         move.l 4(a0),d0
    aeda:	|  |         move.l 156(sp),-(sp)
    aede:	|  |         move.l d0,-(sp)
    aee0:	|  |         jsr a46 <putFloat>
    aee6:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    aee8:	|  |         movea.l 148(sp),a0
    aeec:	|  |         move.l 80(a0),d0
    aef0:	|  |         move.l 156(sp),-(sp)
    aef4:	|  |         move.l d0,-(sp)
    aef6:	|  |         jsr adea <saveCostume>
    aefc:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    aefe:	|  |         movea.l 148(sp),a0
    af02:	|  |         move.l 72(a0),d0
    af06:	|  |         move.l 156(sp),-(sp)
    af0a:	|  |         move.l d0,-(sp)
    af0c:	|  |         jsr ad20 <saveAnim>
    af12:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    af14:	|  |         move.l 156(sp),136(sp)
    af1a:	|  |         movea.l 148(sp),a0
    af1e:	|  |         move.l 72(a0),d1
    af22:	|  |         movea.l 148(sp),a0
    af26:	|  |         move.l 76(a0),d0
    af2a:	|  |         cmp.l d1,d0
    af2c:	|  |         seq d0
    af2e:	|  |         neg.b d0
    af30:	|  |         move.b d0,d0
    af32:	|  |         andi.l #255,d0
    af38:	|  |         move.l d0,132(sp)
    af3c:	|  |         move.l 1c950 <DOSBase>,d0
    af42:	|  |         movea.l d0,a6
    af44:	|  |         move.l 136(sp),d1
    af48:	|  |         move.l 132(sp),d2
    af4c:	|  |         jsr -312(a6)
    af50:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    af54:	|  |         movea.l 148(sp),a0
    af58:	|  |         move.l 32(a0),d0
    af5c:	|  |         move.l 156(sp),-(sp)
    af60:	|  |         move.l d0,-(sp)
    af62:	|  |         jsr a46 <putFloat>
    af68:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    af6a:	|  |         movea.l 148(sp),a0
    af6e:	|  |         move.l 118(a0),d0
    af72:	|  |         move.l 156(sp),-(sp)
    af76:	|  |         move.l d0,-(sp)
    af78:	|  |         jsr 8d0 <put2bytes>
    af7e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    af80:	|  |         movea.l 148(sp),a0
    af84:	|  |         move.l 20(a0),d0
    af88:	|  |         move.l 156(sp),-(sp)
    af8c:	|  |         move.l d0,-(sp)
    af8e:	|  |         jsr 8d0 <put2bytes>
    af94:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    af96:	|  |         movea.l 148(sp),a0
    af9a:	|  |         move.l 40(a0),d0
    af9e:	|  |         move.l 156(sp),-(sp)
    afa2:	|  |         move.l d0,-(sp)
    afa4:	|  |         jsr 8d0 <put2bytes>
    afaa:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    afac:	|  |         movea.l 148(sp),a0
    afb0:	|  |         move.l 44(a0),d0
    afb4:	|  |         move.l 156(sp),-(sp)
    afb8:	|  |         move.l d0,-(sp)
    afba:	|  |         jsr 8d0 <put2bytes>
    afc0:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    afc2:	|  |         movea.l 148(sp),a0
    afc6:	|  |         move.l 48(a0),d0
    afca:	|  |         move.l 156(sp),-(sp)
    afce:	|  |         move.l d0,-(sp)
    afd0:	|  |         jsr 8d0 <put2bytes>
    afd6:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    afd8:	|  |         movea.l 148(sp),a0
    afdc:	|  |         move.l 52(a0),d0
    afe0:	|  |         move.l 156(sp),-(sp)
    afe4:	|  |         move.l d0,-(sp)
    afe6:	|  |         jsr 8d0 <put2bytes>
    afec:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    afee:	|  |         movea.l 148(sp),a0
    aff2:	|  |         move.l 84(a0),d0
    aff6:	|  |         move.l 156(sp),-(sp)
    affa:	|  |         move.l d0,-(sp)
    affc:	|  |         jsr 8d0 <put2bytes>
    b002:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b004:	|  |         movea.l 148(sp),a0
    b008:	|  |         move.l 88(a0),d0
    b00c:	|  |         move.l 156(sp),-(sp)
    b010:	|  |         move.l d0,-(sp)
    b012:	|  |         jsr 8d0 <put2bytes>
    b018:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b01a:	|  |         movea.l 148(sp),a0
    b01e:	|  |         move.l 28(a0),d0
    b022:	|  |         move.l 156(sp),-(sp)
    b026:	|  |         move.l d0,-(sp)
    b028:	|  |         jsr 8d0 <put2bytes>
    b02e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b030:	|  |         movea.l 148(sp),a0
    b034:	|  |         move.l 122(a0),d0
    b038:	|  |         move.l 156(sp),-(sp)
    b03c:	|  |         move.l d0,-(sp)
    b03e:	|  |         jsr 8d0 <put2bytes>
    b044:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b046:	|  |         movea.l 148(sp),a0
    b04a:	|  |         move.l 24(a0),d0
    b04e:	|  |         move.l d0,d0
    b050:	|  |         movea.w d0,a0
    b052:	|  |         move.l 156(sp),-(sp)
    b056:	|  |         move.l a0,-(sp)
    b058:	|  |         jsr a9c <putSigned>
    b05e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b060:	|  |         move.l 156(sp),124(sp)
    b066:	|  |         movea.l 148(sp),a0
    b06a:	|  |         move.w 104(a0),d0
    b06e:	|  |         movea.w d0,a0
    b070:	|  |         move.l a0,120(sp)
    b074:	|  |         move.l 1c950 <DOSBase>,d0
    b07a:	|  |         movea.l d0,a6
    b07c:	|  |         move.l 124(sp),d1
    b080:	|  |         move.l 120(sp),d2
    b084:	|  |         jsr -312(a6)
    b088:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b08c:	|  |         move.l 156(sp),112(sp)
    b092:	|  |         movea.l 148(sp),a0
    b096:	|  |         move.w 64(a0),d0
    b09a:	|  |         movea.w d0,a0
    b09c:	|  |         move.l a0,108(sp)
    b0a0:	|  |         move.l 1c950 <DOSBase>,d0
    b0a6:	|  |         movea.l d0,a6
    b0a8:	|  |         move.l 112(sp),d1
    b0ac:	|  |         move.l 108(sp),d2
    b0b0:	|  |         jsr -312(a6)
    b0b4:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b0b8:	|  |         move.l 156(sp),100(sp)
    b0be:	|  |         movea.l 148(sp),a0
    b0c2:	|  |         move.w 66(a0),d0
    b0c6:	|  |         movea.w d0,a0
    b0c8:	|  |         move.l a0,96(sp)
    b0cc:	|  |         move.l 1c950 <DOSBase>,d0
    b0d2:	|  |         movea.l d0,a6
    b0d4:	|  |         move.l 100(sp),d1
    b0d8:	|  |         move.l 96(sp),d2
    b0dc:	|  |         jsr -312(a6)
    b0e0:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b0e4:	|  |         movea.l 148(sp),a0
    b0e8:	|  |         move.l 68(a0),d0
    b0ec:	|  |  ,----- beq.s b12a <savePeople+0x2e2>
			FPutC (fp, 1);
    b0ee:	|  |  |      move.l 156(sp),76(sp)
    b0f4:	|  |  |      moveq #1,d0
    b0f6:	|  |  |      move.l d0,72(sp)
    b0fa:	|  |  |      move.l 1c950 <DOSBase>,d0
    b100:	|  |  |      movea.l d0,a6
    b102:	|  |  |      move.l 76(sp),d1
    b106:	|  |  |      move.l 72(sp),d2
    b10a:	|  |  |      jsr -312(a6)
    b10e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b112:	|  |  |      movea.l 148(sp),a0
    b116:	|  |  |      move.l 68(a0),d0
    b11a:	|  |  |      move.l 156(sp),-(sp)
    b11e:	|  |  |      move.l d0,-(sp)
    b120:	|  |  |      jsr c344 <saveFunction>
    b126:	|  |  |      addq.l #8,sp
    b128:	|  |  |  ,-- bra.s b14e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b12a:	|  |  '--|-> move.l 156(sp),88(sp)
    b130:	|  |     |   moveq #1,d0
    b132:	|  |     |   move.l d0,84(sp)
    b136:	|  |     |   move.l 1c950 <DOSBase>,d0
    b13c:	|  |     |   movea.l d0,a6
    b13e:	|  |     |   move.l 88(sp),d1
    b142:	|  |     |   move.l 84(sp),d2
    b146:	|  |     |   jsr -312(a6)
    b14a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b14e:	|  |     '-> movea.l 148(sp),a0
    b152:	|  |         move.l 106(a0),d0
    b156:	|  |         move.l 156(sp),-(sp)
    b15a:	|  |         move.l d0,-(sp)
    b15c:	|  |         jsr 8d0 <put2bytes>
    b162:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b164:	|  |         movea.l 148(sp),a0
    b168:	|  |         move.l 92(a0),d0
    b16c:	|  |         move.l 156(sp),-(sp)
    b170:	|  |         move.l d0,-(sp)
    b172:	|  |         jsr 8d0 <put2bytes>
    b178:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b17a:	|  |         movea.l 148(sp),a0
    b17e:	|  |         move.l 100(a0),d0
    b182:	|  |         move.l 156(sp),-(sp)
    b186:	|  |         move.l d0,-(sp)
    b188:	|  |         jsr 8d0 <put2bytes>
    b18e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b190:	|  |         movea.l 148(sp),a0
    b194:	|  |         move.l 96(a0),d0
    b198:	|  |         move.l 156(sp),-(sp)
    b19c:	|  |         move.l d0,-(sp)
    b19e:	|  |         jsr 8d0 <put2bytes>
    b1a4:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b1a6:	|  |         movea.l 148(sp),a0
    b1aa:	|  |         move.l 110(a0),d0
    b1ae:	|  |         move.l d0,d0
    b1b0:	|  |         movea.w d0,a0
    b1b2:	|  |         move.l 156(sp),-(sp)
    b1b6:	|  |         move.l a0,-(sp)
    b1b8:	|  |         jsr a9c <putSigned>
    b1be:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b1c0:	|  |         movea.l 148(sp),a0
    b1c4:	|  |         move.l 56(a0),d0
    b1c8:	|  |         move.l d0,d0
    b1ca:	|  |         movea.w d0,a0
    b1cc:	|  |         move.l 156(sp),-(sp)
    b1d0:	|  |         move.l a0,-(sp)
    b1d2:	|  |         jsr a9c <putSigned>
    b1d8:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b1da:	|  |         movea.l 148(sp),a0
    b1de:	|  |         move.l 60(a0),d0
    b1e2:	|  |         move.l d0,d0
    b1e4:	|  |         movea.w d0,a0
    b1e6:	|  |         move.l 156(sp),-(sp)
    b1ea:	|  |         move.l a0,-(sp)
    b1ec:	|  |         jsr a9c <putSigned>
    b1f2:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b1f4:	|  |         move.l 156(sp),64(sp)
    b1fa:	|  |         movea.l 148(sp),a0
    b1fe:	|  |         move.b 126(a0),d0
    b202:	|  |         move.b d0,d0
    b204:	|  |         andi.l #255,d0
    b20a:	|  |         move.l d0,60(sp)
    b20e:	|  |         move.l 1c950 <DOSBase>,d0
    b214:	|  |         movea.l d0,a6
    b216:	|  |         move.l 64(sp),d1
    b21a:	|  |         move.l 60(sp),d2
    b21e:	|  |         jsr -312(a6)
    b222:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b226:	|  |         move.l 156(sp),52(sp)
    b22c:	|  |         movea.l 148(sp),a0
    b230:	|  |         move.b 127(a0),d0
    b234:	|  |         move.b d0,d0
    b236:	|  |         andi.l #255,d0
    b23c:	|  |         move.l d0,48(sp)
    b240:	|  |         move.l 1c950 <DOSBase>,d0
    b246:	|  |         movea.l d0,a6
    b248:	|  |         move.l 52(sp),d1
    b24c:	|  |         move.l 48(sp),d2
    b250:	|  |         jsr -312(a6)
    b254:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b258:	|  |         move.l 156(sp),40(sp)
    b25e:	|  |         movea.l 148(sp),a0
    b262:	|  |         move.b 128(a0),d0
    b266:	|  |         move.b d0,d0
    b268:	|  |         andi.l #255,d0
    b26e:	|  |         move.l d0,36(sp)
    b272:	|  |         move.l 1c950 <DOSBase>,d0
    b278:	|  |         movea.l d0,a6
    b27a:	|  |         move.l 40(sp),d1
    b27e:	|  |         move.l 36(sp),d2
    b282:	|  |         jsr -312(a6)
    b286:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b28a:	|  |         move.l 156(sp),28(sp)
    b290:	|  |         movea.l 148(sp),a0
    b294:	|  |         move.b 129(a0),d0
    b298:	|  |         move.b d0,d0
    b29a:	|  |         andi.l #255,d0
    b2a0:	|  |         move.l d0,24(sp)
    b2a4:	|  |         move.l 1c950 <DOSBase>,d0
    b2aa:	|  |         movea.l d0,a6
    b2ac:	|  |         move.l 28(sp),d1
    b2b0:	|  |         move.l 24(sp),d2
    b2b4:	|  |         jsr -312(a6)
    b2b8:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b2bc:	|  |         move.l 156(sp),16(sp)
    b2c2:	|  |         movea.l 148(sp),a0
    b2c6:	|  |         move.b 130(a0),d0
    b2ca:	|  |         move.b d0,d0
    b2cc:	|  |         andi.l #255,d0
    b2d2:	|  |         move.l d0,12(sp)
    b2d6:	|  |         move.l 1c950 <DOSBase>,d0
    b2dc:	|  |         movea.l d0,a6
    b2de:	|  |         move.l 16(sp),d1
    b2e2:	|  |         move.l 12(sp),d2
    b2e6:	|  |         jsr -312(a6)
    b2ea:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b2ee:	|  |         movea.l 148(sp),a0
    b2f2:	|  |         move.l 114(a0),d0
    b2f6:	|  |         move.l 156(sp),-(sp)
    b2fa:	|  |         move.l d0,-(sp)
    b2fc:	|  |         jsr d718 <saveObjectRef>
    b302:	|  |         addq.l #8,sp

		me = me -> next;
    b304:	|  |         movea.l 148(sp),a0
    b308:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b30e:	|  |         addq.l #1,140(sp)
    b312:	|  '-------> movea.l 140(sp),a0
    b316:	|            cmpa.l 144(sp),a0
    b31a:	'----------- blt.w aebe <savePeople+0x76>
	}
	return TRUE;
    b31e:	             moveq #1,d0
}
    b320:	             move.l (sp)+,d2
    b322:	             movea.l (sp)+,a6
    b324:	             lea 144(sp),sp
    b328:	             rts

0000b32a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b32a:	movea.l 4(sp),a0
    b32e:	move.l 8(sp),(a0)
}
    b332:	nop
    b334:	rts

0000b336 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b336:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b338:	       move.l 12(sp),-(sp)
    b33c:	       jsr a362 <findPerson>
    b342:	       addq.l #4,sp
    b344:	       move.l d0,(sp)
	if (! moveMe) return;
    b346:	,----- beq.s b35a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b348:	|      move.l 8(sp),-(sp)
    b34c:	|      move.l 4(sp),-(sp)
    b350:	|      jsr b360 <setMyDrawMode>
    b356:	|      addq.l #8,sp
    b358:	|  ,-- bra.s b35c <setDrawMode+0x26>
	if (! moveMe) return;
    b35a:	'--|-> nop
}
    b35c:	   '-> addq.l #4,sp
    b35e:	       rts

0000b360 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b360:	       moveq #19,d0
    b362:	       cmp.l 8(sp),d0
    b366:	,----- bcs.w b83e <setMyDrawMode+0x4de>
    b36a:	|      move.l 8(sp),d0
    b36e:	|      add.l d0,d0
    b370:	|      movea.l d0,a0
    b372:	|      adda.l #45950,a0
    b378:	|      move.w (a0),d0
    b37a:	|      jmp (b37e <setMyDrawMode+0x1e>,pc,d0.w)
    b37e:	|      .short 0x04c0
    b380:	|      ori.l #6684712,-(a4)
    b386:	|      btst d0,-(a0)
    b388:	|      bchg d0,(a6)+
    b38a:	|      bclr d0,(a4)+
    b38c:	|      bset d0,(a2)+
    b38e:	|      andi.b #84,(a6)
    b392:	|      andi.l #55575312,(a2)
    b398:	|      .short 0x02d0
    b39a:	|      bclr d1,(a0)
    b39c:	|      .short 0x044a
    b39e:	|      .short 0x040c
    b3a0:	|      movep.l d1,1158(a6)
    b3a4:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3a6:	|      movea.l 4(sp),a0
    b3aa:	|      clr.b 128(a0)
    b3ae:	|      movea.l 4(sp),a0
    b3b2:	|      move.b 128(a0),d0
    b3b6:	|      movea.l 4(sp),a0
    b3ba:	|      move.b d0,127(a0)
    b3be:	|      movea.l 4(sp),a0
    b3c2:	|      move.b 127(a0),d0
    b3c6:	|      movea.l 4(sp),a0
    b3ca:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b3ce:	|      movea.l 4(sp),a0
    b3d2:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b3d6:	|      movea.l 4(sp),a0
    b3da:	|      move.b #64,130(a0)
			break;
    b3e0:	|  ,-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3e4:	|  |   movea.l 4(sp),a0
    b3e8:	|  |   clr.b 128(a0)
    b3ec:	|  |   movea.l 4(sp),a0
    b3f0:	|  |   move.b 128(a0),d0
    b3f4:	|  |   movea.l 4(sp),a0
    b3f8:	|  |   move.b d0,127(a0)
    b3fc:	|  |   movea.l 4(sp),a0
    b400:	|  |   move.b 127(a0),d0
    b404:	|  |   movea.l 4(sp),a0
    b408:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b40c:	|  |   movea.l 4(sp),a0
    b410:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b414:	|  |   movea.l 4(sp),a0
    b418:	|  |   move.b #-128,130(a0)
			break;
    b41e:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b422:	|  |   movea.l 4(sp),a0
    b426:	|  |   clr.b 128(a0)
    b42a:	|  |   movea.l 4(sp),a0
    b42e:	|  |   move.b 128(a0),d0
    b432:	|  |   movea.l 4(sp),a0
    b436:	|  |   move.b d0,127(a0)
    b43a:	|  |   movea.l 4(sp),a0
    b43e:	|  |   move.b 127(a0),d0
    b442:	|  |   movea.l 4(sp),a0
    b446:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b44a:	|  |   movea.l 4(sp),a0
    b44e:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b452:	|  |   movea.l 4(sp),a0
    b456:	|  |   move.b #-64,130(a0)
			break;
    b45c:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b460:	|  |   movea.l 4(sp),a0
    b464:	|  |   clr.b 128(a0)
    b468:	|  |   movea.l 4(sp),a0
    b46c:	|  |   move.b 128(a0),d0
    b470:	|  |   movea.l 4(sp),a0
    b474:	|  |   move.b d0,127(a0)
    b478:	|  |   movea.l 4(sp),a0
    b47c:	|  |   move.b 127(a0),d0
    b480:	|  |   movea.l 4(sp),a0
    b484:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b488:	|  |   movea.l 4(sp),a0
    b48c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b490:	|  |   movea.l 4(sp),a0
    b494:	|  |   move.b #-2,130(a0)
			break;
    b49a:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b49e:	|  |   movea.l 4(sp),a0
    b4a2:	|  |   clr.b 128(a0)
    b4a6:	|  |   movea.l 4(sp),a0
    b4aa:	|  |   move.b 128(a0),d0
    b4ae:	|  |   movea.l 4(sp),a0
    b4b2:	|  |   move.b d0,127(a0)
    b4b6:	|  |   movea.l 4(sp),a0
    b4ba:	|  |   move.b 127(a0),d0
    b4be:	|  |   movea.l 4(sp),a0
    b4c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b4c6:	|  |   movea.l 4(sp),a0
    b4ca:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b4d0:	|  |   movea.l 4(sp),a0
    b4d4:	|  |   clr.b 130(a0)
			break;
    b4d8:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4dc:	|  |   movea.l 4(sp),a0
    b4e0:	|  |   clr.b 128(a0)
    b4e4:	|  |   movea.l 4(sp),a0
    b4e8:	|  |   move.b 128(a0),d0
    b4ec:	|  |   movea.l 4(sp),a0
    b4f0:	|  |   move.b d0,127(a0)
    b4f4:	|  |   movea.l 4(sp),a0
    b4f8:	|  |   move.b 127(a0),d0
    b4fc:	|  |   movea.l 4(sp),a0
    b500:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b504:	|  |   movea.l 4(sp),a0
    b508:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b50e:	|  |   movea.l 4(sp),a0
    b512:	|  |   clr.b 130(a0)
			break;
    b516:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b51a:	|  |   movea.l 4(sp),a0
    b51e:	|  |   clr.b 128(a0)
    b522:	|  |   movea.l 4(sp),a0
    b526:	|  |   move.b 128(a0),d0
    b52a:	|  |   movea.l 4(sp),a0
    b52e:	|  |   move.b d0,127(a0)
    b532:	|  |   movea.l 4(sp),a0
    b536:	|  |   move.b 127(a0),d0
    b53a:	|  |   movea.l 4(sp),a0
    b53e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b542:	|  |   movea.l 4(sp),a0
    b546:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b54c:	|  |   movea.l 4(sp),a0
    b550:	|  |   clr.b 130(a0)
			break;
    b554:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b558:	|  |   movea.l 4(sp),a0
    b55c:	|  |   clr.b 128(a0)
    b560:	|  |   movea.l 4(sp),a0
    b564:	|  |   move.b 128(a0),d0
    b568:	|  |   movea.l 4(sp),a0
    b56c:	|  |   move.b d0,127(a0)
    b570:	|  |   movea.l 4(sp),a0
    b574:	|  |   move.b 127(a0),d0
    b578:	|  |   movea.l 4(sp),a0
    b57c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b580:	|  |   movea.l 4(sp),a0
    b584:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b588:	|  |   movea.l 4(sp),a0
    b58c:	|  |   clr.b 130(a0)
			break;
    b590:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b594:	|  |   movea.l 4(sp),a0
    b598:	|  |   clr.b 128(a0)
    b59c:	|  |   movea.l 4(sp),a0
    b5a0:	|  |   move.b 128(a0),d0
    b5a4:	|  |   movea.l 4(sp),a0
    b5a8:	|  |   move.b d0,127(a0)
    b5ac:	|  |   movea.l 4(sp),a0
    b5b0:	|  |   move.b 127(a0),d0
    b5b4:	|  |   movea.l 4(sp),a0
    b5b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b5bc:	|  |   movea.l 4(sp),a0
    b5c0:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b5c4:	|  |   movea.l 4(sp),a0
    b5c8:	|  |   move.b #64,130(a0)
			break;
    b5ce:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5d2:	|  |   movea.l 4(sp),a0
    b5d6:	|  |   clr.b 128(a0)
    b5da:	|  |   movea.l 4(sp),a0
    b5de:	|  |   move.b 128(a0),d0
    b5e2:	|  |   movea.l 4(sp),a0
    b5e6:	|  |   move.b d0,127(a0)
    b5ea:	|  |   movea.l 4(sp),a0
    b5ee:	|  |   move.b 127(a0),d0
    b5f2:	|  |   movea.l 4(sp),a0
    b5f6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b5fa:	|  |   movea.l 4(sp),a0
    b5fe:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b602:	|  |   movea.l 4(sp),a0
    b606:	|  |   move.b #-128,130(a0)
			break;
    b60c:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b610:	|  |   movea.l 4(sp),a0
    b614:	|  |   clr.b 128(a0)
    b618:	|  |   movea.l 4(sp),a0
    b61c:	|  |   move.b 128(a0),d0
    b620:	|  |   movea.l 4(sp),a0
    b624:	|  |   move.b d0,127(a0)
    b628:	|  |   movea.l 4(sp),a0
    b62c:	|  |   move.b 127(a0),d0
    b630:	|  |   movea.l 4(sp),a0
    b634:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b638:	|  |   movea.l 4(sp),a0
    b63c:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b640:	|  |   movea.l 4(sp),a0
    b644:	|  |   move.b #-64,130(a0)
			break;
    b64a:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b64e:	|  |   movea.l 4(sp),a0
    b652:	|  |   move.b #-128,128(a0)
    b658:	|  |   movea.l 4(sp),a0
    b65c:	|  |   move.b 128(a0),d0
    b660:	|  |   movea.l 4(sp),a0
    b664:	|  |   move.b d0,127(a0)
    b668:	|  |   movea.l 4(sp),a0
    b66c:	|  |   move.b 127(a0),d0
    b670:	|  |   movea.l 4(sp),a0
    b674:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b678:	|  |   movea.l 4(sp),a0
    b67c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b682:	|  |   movea.l 4(sp),a0
    b686:	|  |   clr.b 130(a0)
			break;
    b68a:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b68e:	|  |   movea.l 4(sp),a0
    b692:	|  |   move.b #-128,128(a0)
    b698:	|  |   movea.l 4(sp),a0
    b69c:	|  |   move.b 128(a0),d0
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   move.b d0,127(a0)
    b6a8:	|  |   movea.l 4(sp),a0
    b6ac:	|  |   move.b 127(a0),d0
    b6b0:	|  |   movea.l 4(sp),a0
    b6b4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b6b8:	|  |   movea.l 4(sp),a0
    b6bc:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b6c2:	|  |   movea.l 4(sp),a0
    b6c6:	|  |   clr.b 130(a0)
			break;
    b6ca:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b6ce:	|  |   movea.l 4(sp),a0
    b6d2:	|  |   move.b #-128,128(a0)
    b6d8:	|  |   movea.l 4(sp),a0
    b6dc:	|  |   move.b 128(a0),d0
    b6e0:	|  |   movea.l 4(sp),a0
    b6e4:	|  |   move.b d0,127(a0)
    b6e8:	|  |   movea.l 4(sp),a0
    b6ec:	|  |   move.b 127(a0),d0
    b6f0:	|  |   movea.l 4(sp),a0
    b6f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b6f8:	|  |   movea.l 4(sp),a0
    b6fc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b702:	|  |   movea.l 4(sp),a0
    b706:	|  |   clr.b 130(a0)
			break;
    b70a:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b70e:	|  |   movea.l 4(sp),a0
    b712:	|  |   move.b #-128,128(a0)
    b718:	|  |   movea.l 4(sp),a0
    b71c:	|  |   move.b 128(a0),d0
    b720:	|  |   movea.l 4(sp),a0
    b724:	|  |   move.b d0,127(a0)
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b 127(a0),d0
    b730:	|  |   movea.l 4(sp),a0
    b734:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b738:	|  |   movea.l 4(sp),a0
    b73c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   clr.b 130(a0)
			break;
    b748:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b74c:	|  |   movea.l 4(sp),a0
    b750:	|  |   st 128(a0)
    b754:	|  |   movea.l 4(sp),a0
    b758:	|  |   move.b 128(a0),d0
    b75c:	|  |   movea.l 4(sp),a0
    b760:	|  |   move.b d0,127(a0)
    b764:	|  |   movea.l 4(sp),a0
    b768:	|  |   move.b 127(a0),d0
    b76c:	|  |   movea.l 4(sp),a0
    b770:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b774:	|  |   movea.l 4(sp),a0
    b778:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   clr.b 130(a0)
			break;
    b786:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b78a:	|  |   movea.l 4(sp),a0
    b78e:	|  |   st 128(a0)
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   move.b 128(a0),d0
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   move.b d0,127(a0)
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   move.b 127(a0),d0
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b7bc:	|  |   movea.l 4(sp),a0
    b7c0:	|  |   clr.b 130(a0)
			break;
    b7c4:	|  +-- bra.w b878 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b7c8:	|  |   movea.l 4(sp),a0
    b7cc:	|  |   st 128(a0)
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   move.b 128(a0),d0
    b7d8:	|  |   movea.l 4(sp),a0
    b7dc:	|  |   move.b d0,127(a0)
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   move.b 127(a0),d0
    b7e8:	|  |   movea.l 4(sp),a0
    b7ec:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7f0:	|  |   movea.l 4(sp),a0
    b7f4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   clr.b 130(a0)
			break;
    b802:	|  +-- bra.s b878 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   st 128(a0)
    b80c:	|  |   movea.l 4(sp),a0
    b810:	|  |   move.b 128(a0),d0
    b814:	|  |   movea.l 4(sp),a0
    b818:	|  |   move.b d0,127(a0)
    b81c:	|  |   movea.l 4(sp),a0
    b820:	|  |   move.b 127(a0),d0
    b824:	|  |   movea.l 4(sp),a0
    b828:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b82c:	|  |   movea.l 4(sp),a0
    b830:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b834:	|  |   movea.l 4(sp),a0
    b838:	|  |   clr.b 130(a0)
			break;
    b83c:	|  +-- bra.s b878 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b83e:	'--|-> movea.l 4(sp),a0
    b842:	   |   clr.b 128(a0)
    b846:	   |   movea.l 4(sp),a0
    b84a:	   |   move.b 128(a0),d0
    b84e:	   |   movea.l 4(sp),a0
    b852:	   |   move.b d0,127(a0)
    b856:	   |   movea.l 4(sp),a0
    b85a:	   |   move.b 127(a0),d0
    b85e:	   |   movea.l 4(sp),a0
    b862:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b866:	   |   movea.l 4(sp),a0
    b86a:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b86e:	   |   movea.l 4(sp),a0
    b872:	   |   clr.b 130(a0)
			break;
    b876:	   |   nop
	}
}
    b878:	   '-> nop
    b87a:	       rts

0000b87c <shufflePeople>:

void shufflePeople () {
    b87c:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b880:	             move.l #117160,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b888:	             move.l 1c9a8 <allPeople>,d0
    b88e:	,----------- beq.w b964 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b892:	|     ,----- bra.w b954 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b896:	|  ,--|----> movea.l 16(sp),a0
    b89a:	|  |  |      movea.l (a0),a0
    b89c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b8a2:	|  |  |      movea.l 16(sp),a0
    b8a6:	|  |  |      movea.l (a0),a0
    b8a8:	|  |  |      move.l 118(a0),d0
    b8ac:	|  |  |      moveq #1,d1
    b8ae:	|  |  |      and.l d1,d0
    b8b0:	|  |  |  ,-- beq.s b8c8 <shufflePeople+0x4c>
    b8b2:	|  |  |  |   move.l #1148846080,-(sp)
    b8b8:	|  |  |  |   move.l 16(sp),-(sp)
    b8bc:	|  |  |  |   jsr 172a8 <__addsf3>
    b8c2:	|  |  |  |   addq.l #8,sp
    b8c4:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b8c8:	|  |  |  '-> movea.l 16(sp),a0
    b8cc:	|  |  |      movea.l (a0),a0
    b8ce:	|  |  |      movea.l 36(a0),a0
    b8d2:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b8d8:	|  |  |      movea.l 16(sp),a0
    b8dc:	|  |  |      movea.l (a0),a0
    b8de:	|  |  |      movea.l 36(a0),a0
    b8e2:	|  |  |      move.l 118(a0),d0
    b8e6:	|  |  |      moveq #1,d1
    b8e8:	|  |  |      and.l d1,d0
    b8ea:	|  |  |  ,-- beq.s b902 <shufflePeople+0x86>
    b8ec:	|  |  |  |   move.l #1148846080,-(sp)
    b8f2:	|  |  |  |   move.l 12(sp),-(sp)
    b8f6:	|  |  |  |   jsr 172a8 <__addsf3>
    b8fc:	|  |  |  |   addq.l #8,sp
    b8fe:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b902:	|  |  |  '-> move.l 8(sp),-(sp)
    b906:	|  |  |      move.l 16(sp),-(sp)
    b90a:	|  |  |      jsr 17658 <__gtsf2>
    b910:	|  |  |      addq.l #8,sp
    b912:	|  |  |      tst.l d0
    b914:	|  |  |  ,-- ble.s b946 <shufflePeople+0xca>
			A = (*thisReference);
    b916:	|  |  |  |   movea.l 16(sp),a0
    b91a:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b91e:	|  |  |  |   movea.l 16(sp),a0
    b922:	|  |  |  |   movea.l (a0),a0
    b924:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b928:	|  |  |  |   movea.l (sp),a0
    b92a:	|  |  |  |   move.l 36(a0),d0
    b92e:	|  |  |  |   movea.l 4(sp),a0
    b932:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b936:	|  |  |  |   movea.l (sp),a0
    b938:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b93e:	|  |  |  |   movea.l 16(sp),a0
    b942:	|  |  |  |   move.l (sp),(a0)
    b944:	|  |  +--|-- bra.s b954 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b946:	|  |  |  '-> movea.l 16(sp),a0
    b94a:	|  |  |      move.l (a0),d0
    b94c:	|  |  |      moveq #36,d1
    b94e:	|  |  |      add.l d0,d1
    b950:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b954:	|  |  '----> movea.l 16(sp),a0
    b958:	|  |         movea.l (a0),a0
    b95a:	|  |         move.l 36(a0),d0
    b95e:	|  '-------- bne.w b896 <shufflePeople+0x1a>
    b962:	|        ,-- bra.s b966 <shufflePeople+0xea>
	if (!allPeople) return;
    b964:	'--------|-> nop
		}
	}
}
    b966:	         '-> lea 20(sp),sp
    b96a:	             rts

0000b96c <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b96c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b96e:	       tst.l 8(sp)
    b972:	   ,-- bgt.s b978 <setCharacterWalkSpeed+0xc>
    b974:	   |   clr.w d0
    b976:	,--|-- bra.s b996 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b978:	|  '-> move.l 12(sp),-(sp)
    b97c:	|      jsr a362 <findPerson>
    b982:	|      addq.l #4,sp
    b984:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b986:	|  ,-- bne.s b98c <setCharacterWalkSpeed+0x20>
    b988:	|  |   clr.w d0
    b98a:	+--|-- bra.s b996 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b98c:	|  '-> movea.l (sp),a0
    b98e:	|      move.l 8(sp),28(a0)
	return TRUE;
    b994:	|      moveq #1,d0
}
    b996:	'----> addq.l #4,sp
    b998:	       rts

0000b99a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b99a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b99c:	       move.l 8(sp),-(sp)
    b9a0:	       jsr a362 <findPerson>
    b9a6:	       addq.l #4,sp
    b9a8:	       move.l d0,(sp)
    if (thisPerson) {
    b9aa:	,----- beq.s b9ca <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b9ac:	|      movea.l (sp),a0
    b9ae:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b9b4:	|      moveq #2,d0
    b9b6:	|      and.l 12(sp),d0
    b9ba:	|  ,-- beq.s b9c6 <setPersonExtra+0x2c>
    b9bc:	|  |   movea.l (sp),a0
    b9be:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b9c6:	|  '-> moveq #1,d0
    b9c8:	|  ,-- bra.s b9cc <setPersonExtra+0x32>
    }
    return FALSE;
    b9ca:	'--|-> clr.w d0
}
    b9cc:	   '-> addq.l #4,sp
    b9ce:	       rts

0000b9d0 <setScale>:


void setScale (short int h, short int d) {
    b9d0:	subq.l #4,sp
    b9d2:	move.l 8(sp),d1
    b9d6:	move.l 12(sp),d0
    b9da:	move.w d1,d1
    b9dc:	move.w d1,2(sp)
    b9e0:	move.w d0,d0
    b9e2:	move.w d0,(sp)
	scaleHorizon = h;
    b9e4:	move.w 2(sp),1c2ce <scaleHorizon>
	scaleDivide = d;
    b9ec:	move.w (sp),1c2d0 <scaleDivide>
}
    b9f2:	nop
    b9f4:	addq.l #4,sp
    b9f6:	rts

0000b9f8 <setShown>:

void setShown (BOOL h, int ob) {
    b9f8:	    subq.l #8,sp
    b9fa:	    move.l 12(sp),d0
    b9fe:	    move.w d0,d0
    ba00:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ba04:	    move.l 16(sp),-(sp)
    ba08:	    jsr a362 <findPerson>
    ba0e:	    addq.l #4,sp
    ba10:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    ba14:	,-- beq.s ba20 <setShown+0x28>
    ba16:	|   movea.l 4(sp),a0
    ba1a:	|   move.w 2(sp),104(a0)
}
    ba20:	'-> nop
    ba22:	    addq.l #8,sp
    ba24:	    rts

0000ba26 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    ba26:	       subq.l #8,sp
    ba28:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    ba2a:	       movea.l 16(sp),a0
    ba2e:	       move.l 92(a0),d0
    ba32:	       move.l d0,d1
    ba34:	       addi.l #360,d1
    ba3a:	       movea.l 16(sp),a0
    ba3e:	       move.l 96(a0),d0
    ba42:	       move.l d1,d2
    ba44:	       sub.l d0,d2
    ba46:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    ba4a:	       movea.l 16(sp),a0
    ba4e:	       move.l 122(a0),d0
    ba52:	   ,-- beq.s ba5e <spinStep+0x38>
    ba54:	   |   movea.l 16(sp),a0
    ba58:	   |   move.l 122(a0),d0
    ba5c:	,--|-- bra.s ba78 <spinStep+0x52>
    ba5e:	|  '-> movea.l 16(sp),a0
    ba62:	|      movea.l 80(a0),a0
    ba66:	|      move.l 4(a0),d0
    ba6a:	|      move.l d0,-(sp)
    ba6c:	|      pea 168 <decodeFilename+0x50>
    ba70:	|      jsr 17ac4 <__divsi3>
    ba76:	|      addq.l #8,sp
    ba78:	'----> move.l d0,4(sp)
	while (diff > 180) {
    ba7c:	   ,-- bra.s ba86 <spinStep+0x60>
		diff -= 360;
    ba7e:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ba86:	|  '-> cmpi.l #180,8(sp)
    ba8e:	'----- bgt.s ba7e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ba90:	       move.l 8(sp),d0
    ba94:	       cmp.l 4(sp),d0
    ba98:	   ,-- blt.s bab6 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ba9a:	   |   movea.l 16(sp),a0
    ba9e:	   |   move.l 92(a0),d0
    baa2:	   |   sub.l 4(sp),d0
    baa6:	   |   move.l d0,-(sp)
    baa8:	   |   move.l 20(sp),-(sp)
    baac:	   |   jsr bb96 <turnMeAngle>
    bab2:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bab4:	,--|-- bra.s bafc <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bab6:	|  '-> move.l 4(sp),d0
    baba:	|      neg.l d0
    babc:	|      cmp.l 8(sp),d0
    bac0:	|  ,-- blt.s bade <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bac2:	|  |   movea.l 16(sp),a0
    bac6:	|  |   move.l 92(a0),d0
    baca:	|  |   add.l 4(sp),d0
    bace:	|  |   move.l d0,-(sp)
    bad0:	|  |   move.l 20(sp),-(sp)
    bad4:	|  |   jsr bb96 <turnMeAngle>
    bada:	|  |   addq.l #8,sp
}
    badc:	+--|-- bra.s bafc <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bade:	|  '-> movea.l 16(sp),a0
    bae2:	|      move.l 96(a0),d0
    bae6:	|      move.l d0,-(sp)
    bae8:	|      move.l 20(sp),-(sp)
    baec:	|      jsr bb96 <turnMeAngle>
    baf2:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    baf4:	|      movea.l 16(sp),a0
    baf8:	|      clr.w 66(a0)
}
    bafc:	'----> nop
    bafe:	       move.l (sp)+,d2
    bb00:	       addq.l #8,sp
    bb02:	       rts

0000bb04 <stopPerson>:


BOOL stopPerson (int o) {
    bb04:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bb06:	       move.l 8(sp),-(sp)
    bb0a:	       jsr a362 <findPerson>
    bb10:	       addq.l #4,sp
    bb12:	       move.l d0,(sp)
    if (moveMe)
    bb14:	,----- beq.s bb52 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bb16:	|      movea.l (sp),a0
    bb18:	|      move.l 68(a0),d0
    bb1c:	+----- beq.s bb52 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bb1e:	|      movea.l (sp),a0
    bb20:	|      move.l 68(a0),d0
    bb24:	|      move.l d0,-(sp)
    bb26:	|      jsr 4e14 <abortFunction>
    bb2c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bb2e:	|      movea.l (sp),a0
    bb30:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bb34:	|      movea.l (sp),a0
    bb36:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bb3a:	|      movea.l (sp),a0
    bb3c:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bb40:	|      clr.l -(sp)
    bb42:	|      move.l 4(sp),-(sp)
    bb46:	|      jsr 3fb6 <setFrames>
    bb4c:	|      addq.l #8,sp
            return TRUE;
    bb4e:	|      moveq #1,d0
    bb50:	|  ,-- bra.s bb54 <stopPerson+0x50>
        }
    return FALSE;
    bb52:	'--|-> clr.w d0
}
    bb54:	   '-> addq.l #4,sp
    bb56:	       rts

0000bb58 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bb58:	       subq.l #8,sp
	int total = 0;
    bb5a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bb5e:	       clr.l (sp)
    bb60:	   ,-- bra.s bb82 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bb62:	,--|-> movea.l 12(sp),a0
    bb66:	|  |   movea.l 4(a0),a0
    bb6a:	|  |   move.l (sp),d1
    bb6c:	|  |   move.l d1,d0
    bb6e:	|  |   add.l d0,d0
    bb70:	|  |   add.l d1,d0
    bb72:	|  |   add.l d0,d0
    bb74:	|  |   add.l d0,d0
    bb76:	|  |   adda.l d0,a0
    bb78:	|  |   move.l 4(a0),d0
    bb7c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bb80:	|  |   addq.l #1,(sp)
    bb82:	|  '-> movea.l 12(sp),a0
    bb86:	|      move.l 8(a0),d0
    bb8a:	|      cmp.l (sp),d0
    bb8c:	'----- bgt.s bb62 <timeForAnim+0xa>
	}
	return total;
    bb8e:	       move.l 4(sp),d0
}
    bb92:	       addq.l #8,sp
    bb94:	       rts

0000bb96 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bb96:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bb98:	       movea.l 8(sp),a0
    bb9c:	       movea.l 80(a0),a0
    bba0:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bba4:	       movea.l 8(sp),a0
    bba8:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bbae:	       move.l (sp),-(sp)
    bbb0:	       pea b4 <_start+0xb4>
    bbb4:	       jsr 17ac4 <__divsi3>
    bbba:	       addq.l #8,sp
    bbbc:	       move.l d0,d1
    bbbe:	       addi.l #180,d1
    bbc4:	       movea.l 8(sp),a0
    bbc8:	       move.l 100(a0),d0
    bbcc:	       add.l d1,d0
    bbce:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bbd2:	   ,-- bra.s bbdc <turnMeAngle+0x46>
    bbd4:	,--|-> addi.l #-360,12(sp)
    bbdc:	|  '-> cmpi.l #359,12(sp)
    bbe4:	'----- bgt.s bbd4 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bbe6:	       move.l (sp),-(sp)
    bbe8:	       move.l 16(sp),-(sp)
    bbec:	       jsr 17a46 <__mulsi3>
    bbf2:	       addq.l #8,sp
    bbf4:	       pea 168 <decodeFilename+0x50>
    bbf8:	       move.l d0,-(sp)
    bbfa:	       jsr 17ac4 <__divsi3>
    bc00:	       addq.l #8,sp
    bc02:	       movea.l 8(sp),a0
    bc06:	       move.l d0,106(a0)
}
    bc0a:	       nop
    bc0c:	       addq.l #4,sp
    bc0e:	       rts

0000bc10 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bc10:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc12:	          move.l 8(sp),-(sp)
    bc16:	          jsr a362 <findPerson>
    bc1c:	          addq.l #4,sp
    bc1e:	          move.l d0,(sp)
    if (thisPerson) {
    bc20:	,-------- beq.s bc80 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bc22:	|         movea.l (sp),a0
    bc24:	|         move.l 68(a0),d0
    bc28:	|     ,-- beq.s bc3a <turnPersonToFace+0x2a>
    bc2a:	|     |   movea.l (sp),a0
    bc2c:	|     |   move.l 68(a0),d0
    bc30:	|     |   move.l d0,-(sp)
    bc32:	|     |   jsr 4e14 <abortFunction>
    bc38:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bc3a:	|     '-> movea.l (sp),a0
    bc3c:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bc40:	|         movea.l (sp),a0
    bc42:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bc46:	|         movea.l (sp),a0
    bc48:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bc4c:	|         move.l 12(sp),-(sp)
    bc50:	|         move.l 4(sp),-(sp)
    bc54:	|         jsr bb96 <turnMeAngle>
    bc5a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bc5c:	|         movea.l 1c898 <speech>,a0
    bc62:	|         move.l (a0),d0
    bc64:	|         cmp.l (sp),d0
    bc66:	|  ,----- bne.s bc6c <turnPersonToFace+0x5c>
    bc68:	|  |      moveq #2,d0
    bc6a:	|  |  ,-- bra.s bc6e <turnPersonToFace+0x5e>
    bc6c:	|  '--|-> moveq #0,d0
    bc6e:	|     '-> move.l d0,-(sp)
    bc70:	|         move.l 4(sp),-(sp)
    bc74:	|         jsr 3fb6 <setFrames>
    bc7a:	|         addq.l #8,sp
        return TRUE;
    bc7c:	|         moveq #1,d0
    bc7e:	|     ,-- bra.s bc82 <turnPersonToFace+0x72>
    }
    return FALSE;
    bc80:	'-----|-> clr.w d0
}
    bc82:	      '-> addq.l #4,sp
    bc84:	          rts

0000bc86 <walkAllPeople>:

void walkAllPeople() {
    bc86:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bc88:	             move.l 1c9a8 <allPeople>,(sp)

	while (thisPerson) {
    bc8e:	   ,-------- bra.s bcfe <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bc90:	,--|-------> movea.l (sp),a0
    bc92:	|  |         move.w 64(a0),d0
    bc96:	|  |     ,-- beq.s bcaa <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bc98:	|  |     |   pea 1 <_start+0x1>
    bc9c:	|  |     |   move.l 4(sp),-(sp)
    bca0:	|  |     |   jsr bd0a <walkMe>
    bca6:	|  |     |   addq.l #8,sp
    bca8:	|  |  ,--|-- bra.s bcca <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bcaa:	|  |  |  '-> movea.l (sp),a0
    bcac:	|  |  |      move.w 66(a0),d0
    bcb0:	|  |  +----- beq.s bcca <walkAllPeople+0x44>
			spinStep(thisPerson);
    bcb2:	|  |  |      move.l (sp),-(sp)
    bcb4:	|  |  |      jsr ba26 <spinStep>
    bcba:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bcbc:	|  |  |      clr.l -(sp)
    bcbe:	|  |  |      move.l 4(sp),-(sp)
    bcc2:	|  |  |      jsr 3fb6 <setFrames>
    bcc8:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bcca:	|  |  '----> movea.l (sp),a0
    bccc:	|  |         move.w 64(a0),d0
    bcd0:	|  |     ,-- bne.s bcf8 <walkAllPeople+0x72>
    bcd2:	|  |     |   movea.l (sp),a0
    bcd4:	|  |     |   move.w 66(a0),d0
    bcd8:	|  |     +-- bne.s bcf8 <walkAllPeople+0x72>
    bcda:	|  |     |   movea.l (sp),a0
    bcdc:	|  |     |   move.l 68(a0),d0
    bce0:	|  |     +-- beq.s bcf8 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bce2:	|  |     |   movea.l (sp),a0
    bce4:	|  |     |   move.l 68(a0),d0
    bce8:	|  |     |   move.l d0,-(sp)
    bcea:	|  |     |   jsr 6fc4 <restartFunction>
    bcf0:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bcf2:	|  |     |   movea.l (sp),a0
    bcf4:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bcf8:	|  |     '-> movea.l (sp),a0
    bcfa:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bcfe:	|  '-------> tst.l (sp)
    bd00:	'----------- bne.s bc90 <walkAllPeople+0xa>
	}
}
    bd02:	             nop
    bd04:	             nop
    bd06:	             addq.l #4,sp
    bd08:	             rts

0000bd0a <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bd0a:	                lea -20(sp),sp
    bd0e:	                move.l d3,-(sp)
    bd10:	                move.l d2,-(sp)
    bd12:	                move.l 36(sp),d0
    bd16:	                move.w d0,d0
    bd18:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bd1c:	                cmpi.w #-1,10(sp)
    bd22:	,-------------- bne.s bd2a <walkMe+0x20>
    bd24:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bd2a:	>-------------> movea.l 32(sp),a0
    bd2e:	|               move.l 48(a0),d0
    bd32:	|               move.l d0,-(sp)
    bd34:	|               jsr 174ec <__floatsisf>
    bd3a:	|               addq.l #4,sp
    bd3c:	|               move.l d0,d1
    bd3e:	|               movea.l 32(sp),a0
    bd42:	|               move.l (a0),d0
    bd44:	|               move.l d0,-(sp)
    bd46:	|               move.l d1,-(sp)
    bd48:	|               jsr 177e0 <__subsf3>
    bd4e:	|               addq.l #8,sp
    bd50:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bd54:	|               movea.l 32(sp),a0
    bd58:	|               move.l 52(a0),d0
    bd5c:	|               move.l d0,-(sp)
    bd5e:	|               jsr 174ec <__floatsisf>
    bd64:	|               addq.l #4,sp
    bd66:	|               move.l d0,d1
    bd68:	|               movea.l 32(sp),a0
    bd6c:	|               move.l 4(a0),d0
    bd70:	|               move.l d0,-(sp)
    bd72:	|               move.l d1,-(sp)
    bd74:	|               jsr 177e0 <__subsf3>
    bd7a:	|               addq.l #8,sp
    bd7c:	|               move.l d0,-(sp)
    bd7e:	|               move.l d0,-(sp)
    bd80:	|               jsr 172a8 <__addsf3>
    bd86:	|               addq.l #8,sp
    bd88:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bd8c:	|               movea.l 32(sp),a0
    bd90:	|               move.l 32(a0),d2
    bd94:	|               movea.l 32(sp),a0
    bd98:	|               move.l 28(a0),d0
    bd9c:	|               move.l d0,-(sp)
    bd9e:	|               jsr 174ec <__floatsisf>
    bda4:	|               addq.l #4,sp
    bda6:	|               move.l d0,-(sp)
    bda8:	|               move.l d2,-(sp)
    bdaa:	|               jsr 1759e <__mulsf3>
    bdb0:	|               addq.l #8,sp
    bdb2:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bdb6:	|               move.l 24(sp),-(sp)
    bdba:	|               jsr 1740e <__extendsfdf2>
    bdc0:	|               addq.l #4,sp
    bdc2:	|               move.l #-1717986918,-(sp)
    bdc8:	|               move.l #1070176665,-(sp)
    bdce:	|               move.l d1,-(sp)
    bdd0:	|               move.l d0,-(sp)
    bdd2:	|               jsr 176c4 <__ltdf2>
    bdd8:	|               lea 16(sp),sp
    bddc:	|               tst.l d0
    bdde:	|           ,-- bge.s bde8 <walkMe+0xde>
    bde0:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bde8:	|           '-> move.l 20(sp),-(sp)
    bdec:	|               jsr 17484 <__fixsfsi>
    bdf2:	|               addq.l #4,sp
    bdf4:	|               move.l d0,-(sp)
    bdf6:	|               jsr 8f52 <TF_abs>
    bdfc:	|               addq.l #4,sp
    bdfe:	|               move.l d0,d2
    be00:	|               move.l 16(sp),-(sp)
    be04:	|               jsr 17484 <__fixsfsi>
    be0a:	|               addq.l #4,sp
    be0c:	|               move.l d0,-(sp)
    be0e:	|               jsr 8f52 <TF_abs>
    be14:	|               addq.l #4,sp
    be16:	|               cmp.l d2,d0
    be18:	|        ,----- bgt.s be3c <walkMe+0x132>
    be1a:	|        |      move.l 20(sp),-(sp)
    be1e:	|        |      jsr 17484 <__fixsfsi>
    be24:	|        |      addq.l #4,sp
    be26:	|        |      move.l d0,-(sp)
    be28:	|        |      jsr 8f52 <TF_abs>
    be2e:	|        |      addq.l #4,sp
    be30:	|        |      move.l d0,-(sp)
    be32:	|        |      jsr 174ec <__floatsisf>
    be38:	|        |      addq.l #4,sp
    be3a:	|        |  ,-- bra.s be5c <walkMe+0x152>
    be3c:	|        '--|-> move.l 16(sp),-(sp)
    be40:	|           |   jsr 17484 <__fixsfsi>
    be46:	|           |   addq.l #4,sp
    be48:	|           |   move.l d0,-(sp)
    be4a:	|           |   jsr 8f52 <TF_abs>
    be50:	|           |   addq.l #4,sp
    be52:	|           |   move.l d0,-(sp)
    be54:	|           |   jsr 174ec <__floatsisf>
    be5a:	|           |   addq.l #4,sp
    be5c:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    be60:	|               move.l 12(sp),-(sp)
    be64:	|               jsr 17484 <__fixsfsi>
    be6a:	|               addq.l #4,sp
    be6c:	|               move.l d0,-(sp)
    be6e:	|               jsr 8f52 <TF_abs>
    be74:	|               addq.l #4,sp
    be76:	|               move.l d0,-(sp)
    be78:	|               jsr 174ec <__floatsisf>
    be7e:	|               addq.l #4,sp
    be80:	|               move.l d0,-(sp)
    be82:	|               move.l 28(sp),-(sp)
    be86:	|               jsr 17712 <__ltsf2>
    be8c:	|               addq.l #8,sp
    be8e:	|               tst.l d0
    be90:	|        ,----- bge.w bf42 <walkMe+0x238>
			if (thisPerson->spinning) {
    be94:	|        |      movea.l 32(sp),a0
    be98:	|        |      move.w 66(a0),d0
    be9c:	|        |  ,-- beq.s beba <walkMe+0x1b0>
				spinStep(thisPerson);
    be9e:	|        |  |   move.l 32(sp),-(sp)
    bea2:	|        |  |   jsr ba26 <spinStep>
    bea8:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    beaa:	|        |  |   pea 1 <_start+0x1>
    beae:	|        |  |   move.l 36(sp),-(sp)
    beb2:	|        |  |   jsr 3fb6 <setFrames>
    beb8:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    beba:	|        |  '-> move.l 24(sp),-(sp)
    bebe:	|        |      move.l 16(sp),-(sp)
    bec2:	|        |      jsr 173a2 <__divsf3>
    bec8:	|        |      addq.l #8,sp
    beca:	|        |      move.l d0,24(sp)
			if (move)
    bece:	|        |      tst.w 10(sp)
    bed2:	|        |  ,-- beq.s bf3c <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bed4:	|        |  |   movea.l 32(sp),a0
    bed8:	|        |  |   move.l 4(a0),d2
    bedc:	|        |  |   move.l 24(sp),d0
    bee0:	|        |  |   move.l d0,-(sp)
    bee2:	|        |  |   move.l d0,-(sp)
    bee4:	|        |  |   jsr 172a8 <__addsf3>
    beea:	|        |  |   addq.l #8,sp
    beec:	|        |  |   move.l d0,-(sp)
    beee:	|        |  |   move.l 20(sp),-(sp)
    bef2:	|        |  |   jsr 173a2 <__divsf3>
    bef8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    befa:	|        |  |   move.l d0,-(sp)
    befc:	|        |  |   move.l d2,-(sp)
    befe:	|        |  |   jsr 172a8 <__addsf3>
    bf04:	|        |  |   addq.l #8,sp
    bf06:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bf08:	|        |  |   movea.l 32(sp),a0
    bf0c:	|        |  |   move.l (a0),d3
    bf0e:	|        |  |   move.l 24(sp),-(sp)
    bf12:	|        |  |   move.l 24(sp),-(sp)
    bf16:	|        |  |   jsr 173a2 <__divsf3>
    bf1c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bf1e:	|        |  |   move.l d0,-(sp)
    bf20:	|        |  |   move.l d3,-(sp)
    bf22:	|        |  |   jsr 172a8 <__addsf3>
    bf28:	|        |  |   addq.l #8,sp
    bf2a:	|        |  |   move.l d2,-(sp)
    bf2c:	|        |  |   move.l d0,-(sp)
    bf2e:	|        |  |   move.l 40(sp),-(sp)
    bf32:	|        |  |   jsr ab0c <moveAndScale>
    bf38:	|        |  |   lea 12(sp),sp
			return TRUE;
    bf3c:	|        |  '-> moveq #1,d0
    bf3e:	|  ,-----|----- bra.w bff0 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bf42:	|  |     '----> movea.l 32(sp),a0
    bf46:	|  |            move.l 56(a0),d0
    bf4a:	|  |            moveq #-1,d1
    bf4c:	|  |            cmp.l d0,d1
    bf4e:	|  |        ,-- bne.s bf86 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bf50:	|  |        |   movea.l 32(sp),a0
    bf54:	|  |        |   move.l 110(a0),d0
    bf58:	|  |        |   moveq #-1,d1
    bf5a:	|  |        |   cmp.l d0,d1
    bf5c:	|  |  ,-----|-- beq.s bf9a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    bf5e:	|  |  |     |   movea.l 32(sp),a0
    bf62:	|  |  |     |   move.l 110(a0),d0
    bf66:	|  |  |     |   movea.l 32(sp),a0
    bf6a:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    bf6e:	|  |  |     |   movea.l 32(sp),a0
    bf72:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    bf78:	|  |  |     |   move.l 32(sp),-(sp)
    bf7c:	|  |  |     |   jsr ba26 <spinStep>
    bf82:	|  |  |     |   addq.l #4,sp
			}
			break;
    bf84:	|  |  +-----|-- bra.s bf9a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    bf86:	|  |  |     '-> move.l 32(sp),-(sp)
    bf8a:	|  |  |         jsr 96c4 <doBorderStuff>
    bf90:	|  |  |         addq.l #4,sp
    bf92:	|  |  |         tst.w d0
    bf94:	|  |  |  ,----- beq.s bf9e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf96:	'--|--|--|----- bra.w bd2a <walkMe+0x20>
			break;
    bf9a:	   |  '--|----> nop
    bf9c:	   |     |  ,-- bra.s bfa0 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    bf9e:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    bfa0:	   |        '-> movea.l 32(sp),a0
    bfa4:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    bfa8:	   |            clr.l -(sp)
    bfaa:	   |            move.l 36(sp),-(sp)
    bfae:	   |            jsr 3fb6 <setFrames>
    bfb4:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    bfb6:	   |            movea.l 32(sp),a0
    bfba:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    bfbe:	   |            move.l d0,-(sp)
    bfc0:	   |            jsr 174ec <__floatsisf>
    bfc6:	   |            addq.l #4,sp
    bfc8:	   |            move.l d0,d2
				 thisPerson->walkToX,
    bfca:	   |            movea.l 32(sp),a0
    bfce:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    bfd2:	   |            move.l d0,-(sp)
    bfd4:	   |            jsr 174ec <__floatsisf>
    bfda:	   |            addq.l #4,sp
    bfdc:	   |            move.l d2,-(sp)
    bfde:	   |            move.l d0,-(sp)
    bfe0:	   |            move.l 40(sp),-(sp)
    bfe4:	   |            jsr ab0c <moveAndScale>
    bfea:	   |            lea 12(sp),sp
	return FALSE;
    bfee:	   |            clr.w d0
}
    bff0:	   '----------> move.l (sp)+,d2
    bff2:	                move.l (sp)+,d3
    bff4:	                lea 20(sp),sp
    bff8:	                rts

0000bffa <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    bffa:	       subq.l #8,sp
    bffc:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    bffe:	   ,-- bra.s c02e <clearStackLib+0x34>
		k = stackLib;
    c000:	,--|-> move.l 1c9d4 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c008:	|  |   movea.l 1c9d4 <stackLib>,a0
    c00e:	|  |   move.l 4(a0),d0
    c012:	|  |   move.l d0,1c9d4 <stackLib>
		FreeVec(k);
    c018:	|  |   move.l 8(sp),4(sp)
    c01e:	|  |   move.l 1c948 <SysBase>,d0
    c024:	|  |   movea.l d0,a6
    c026:	|  |   movea.l 4(sp),a1
    c02a:	|  |   jsr -690(a6)
	while (stackLib) {
    c02e:	|  '-> move.l 1c9d4 <stackLib>,d0
    c034:	'----- bne.s c000 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c036:	       clr.l 1c9d0 <stackLibTotal>
}
    c03c:	       nop
    c03e:	       movea.l (sp)+,a6
    c040:	       addq.l #8,sp
    c042:	       rts

0000c044 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c044:	          lea -128(sp),sp
    c048:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c04c:	      ,-- bra.s c05e <loadGame+0x1a>
    c04e:	   ,--|-> move.l 1c8e0 <allRunningFunctions>,d0
    c054:	   |  |   move.l d0,-(sp)
    c056:	   |  |   jsr 5e48 <finishFunction>
    c05c:	   |  |   addq.l #4,sp
    c05e:	   |  '-> move.l 1c8e0 <allRunningFunctions>,d0
    c064:	   '----- bne.s c04e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c066:	          pea 1c9d8 <ssgVersion>
    c06c:	          pea 19189 <PutChar+0x162d>
    c072:	          pea 41 <_start+0x41>
    c076:	          pea 53 <_start+0x53>
    c07a:	          move.l 160(sp),-(sp)
    c07e:	          jsr 6c12 <openAndVerify>
    c084:	          lea 20(sp),sp
    c088:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c08c:	      ,-- bne.s c094 <loadGame+0x50>
    c08e:	      |   clr.w d0
    c090:	,-----|-- bra.w c33a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c094:	|     '-> move.l 112(sp),108(sp)
    c09a:	|         lea 140(sp),a0
    c09e:	|         lea -126(a0),a0
    c0a2:	|         move.l a0,120(sp)
    c0a6:	|         moveq #8,d0
    c0a8:	|         move.l d0,116(sp)
    c0ac:	|         move.l 1c950 <DOSBase>,d0
    c0b2:	|         movea.l d0,a6
    c0b4:	|         move.l 108(sp),d1
    c0b8:	|         move.l 120(sp),d2
    c0bc:	|         move.l 116(sp),d3
    c0c0:	|         jsr -42(a6)
    c0c4:	|         move.l d0,132(sp)
    c0c8:	|         move.l 132(sp),d0
    c0cc:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c0d0:	|         moveq #8,d0
    c0d2:	|         cmp.l 128(sp),d0
    c0d6:	|     ,-- beq.s c0e6 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c0d8:	|     |   pea 191aa <PutChar+0x164e>
    c0de:	|     |   jsr 170ba <KPrintF>
    c0e4:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c0e6:	|     '-> move.l 14(sp),d1
    c0ea:	|         move.l 1c8ea <fileTime>,d0
    c0f0:	|         cmp.l d1,d0
    c0f2:	|     ,-- bne.s c102 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c0f4:	|     |   move.l 18(sp),d1
    c0f8:	|     |   move.l 1c8ee <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c0fe:	|     |   cmp.l d1,d0
    c100:	|  ,--|-- beq.s c122 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c102:	|  |  '-> move.l 144(sp),-(sp)
    c106:	|  |      pea 191c6 <PutChar+0x166a>
    c10c:	|  |      pea 1928d <PutChar+0x1731>
    c112:	|  |      jsr 170ba <KPrintF>
    c118:	|  |      lea 12(sp),sp
		return FALSE; 
    c11c:	|  |      clr.w d0
    c11e:	+--|----- bra.w c33a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c122:	|  '----> move.l 112(sp),124(sp)
    c128:	|         move.l 1c950 <DOSBase>,d0
    c12e:	|         movea.l d0,a6
    c130:	|         move.l 124(sp),d1
    c134:	|         jsr -306(a6)
    c138:	|         move.l d0,136(sp)
    c13c:	|         move.l 136(sp),d0
    c140:	|         move.l d0,d0
    c142:	|         move.w d0,1c198 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c148:	|         move.l 112(sp),100(sp)
    c14e:	|         move.l 1c950 <DOSBase>,d0
    c154:	|         movea.l d0,a6
    c156:	|         move.l 100(sp),d1
    c15a:	|         jsr -306(a6)
    c15e:	|         move.l d0,96(sp)
    c162:	|         move.l 96(sp),d0
    c166:	|         move.l d0,d0
    c168:	|         move.w d0,1c8e8 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c16e:	|         move.l 112(sp),92(sp)
    c174:	|         move.l 1c950 <DOSBase>,d0
    c17a:	|         movea.l d0,a6
    c17c:	|         move.l 92(sp),d1
    c180:	|         jsr -306(a6)
    c184:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c188:	|         move.l 112(sp),84(sp)
    c18e:	|         move.l 1c950 <DOSBase>,d0
    c194:	|         movea.l d0,a6
    c196:	|         move.l 84(sp),d1
    c19a:	|         jsr -306(a6)
    c19e:	|         move.l d0,80(sp)
    c1a2:	|         move.l 80(sp),d0
    c1a6:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c1aa:	|     ,-- beq.s c1de <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c1ac:	|     |   move.l 112(sp),-(sp)
    c1b0:	|     |   jsr 6bc <get2bytes>
    c1b6:	|     |   addq.l #4,sp
    c1b8:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c1bc:	|     |   move.l 112(sp),-(sp)
    c1c0:	|     |   jsr 6bc <get2bytes>
    c1c6:	|     |   addq.l #4,sp
    c1c8:	|     |   move.l d0,1ca3c <fontHeight>
		charOrder = readString(fp);		
    c1ce:	|     |   move.l 112(sp),-(sp)
    c1d2:	|     |   jsr b02 <readString>
    c1d8:	|     |   addq.l #4,sp
    c1da:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c1de:	|     '-> move.l 104(sp),70(sp)
    c1e4:	|         move.l 1c948 <SysBase>,d0
    c1ea:	|         movea.l d0,a6
    c1ec:	|         movea.l 70(sp),a1
    c1f0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c1f4:	|         move.l 112(sp),-(sp)
    c1f8:	|         jsr 854 <getSigned>
    c1fe:	|         addq.l #4,sp
    c200:	|         move.w d0,1c840 <fontSpace>

	killAllPeople ();
    c206:	|         jsr a776 <killAllPeople>
	killAllRegions ();
    c20c:	|         jsr 158ca <killAllRegions>

	int camerX = get2bytes (fp);
    c212:	|         move.l 112(sp),-(sp)
    c216:	|         jsr 6bc <get2bytes>
    c21c:	|         addq.l #4,sp
    c21e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c222:	|         move.l 112(sp),-(sp)
    c226:	|         jsr 6bc <get2bytes>
    c22c:	|         addq.l #4,sp
    c22e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c232:	|         move.l 112(sp),-(sp)
    c236:	|         jsr 7d8 <getFloat>
    c23c:	|         addq.l #4,sp
    c23e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c242:	|         move.l 112(sp),54(sp)
    c248:	|         move.l 1c950 <DOSBase>,d0
    c24e:	|         movea.l d0,a6
    c250:	|         move.l 54(sp),d1
    c254:	|         jsr -306(a6)
    c258:	|         move.l d0,50(sp)
    c25c:	|         move.l 50(sp),d0
    c260:	|         move.l d0,d0
    c262:	|         move.b d0,1c2b6 <brightnessLevel>

	loadHandlers (fp);
    c268:	|         move.l 112(sp),-(sp)
    c26c:	|         jsr 6b72 <loadHandlers>
    c272:	|         addq.l #4,sp
	loadRegions (fp);
    c274:	|         move.l 112(sp),-(sp)
    c278:	|         jsr 15926 <loadRegions>
    c27e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c280:	|         moveq #12,d0
    c282:	|         move.l d0,46(sp)
    c286:	|         clr.l 42(sp)
    c28a:	|         move.l 1c948 <SysBase>,d0
    c290:	|         movea.l d0,a6
    c292:	|         move.l 46(sp),d0
    c296:	|         move.l 42(sp),d1
    c29a:	|         jsr -684(a6)
    c29e:	|         move.l d0,38(sp)
    c2a2:	|         move.l 38(sp),d0
    c2a6:	|         move.l d0,1c842 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c2ac:	|         move.l 1c842 <mouseCursorAnim>,d0
    c2b2:	|     ,-- bne.s c2c6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c2b4:	|     |   pea 19297 <PutChar+0x173b>
    c2ba:	|     |   jsr 170ba <KPrintF>
    c2c0:	|     |   addq.l #4,sp
		return FALSE;
    c2c2:	|     |   clr.w d0
    c2c4:	+-----|-- bra.s c33a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c2c6:	|     '-> jsr d16a <nosnapshot>
	if (FGetC (fp)) {
    c2cc:	|         move.l 112(sp),34(sp)
    c2d2:	|         move.l 1c950 <DOSBase>,d0
    c2d8:	|         movea.l d0,a6
    c2da:	|         move.l 34(sp),d1
    c2de:	|         jsr -306(a6)
    c2e2:	|         move.l d0,30(sp)
    c2e6:	|         move.l 30(sp),d0
    c2ea:	|     ,-- beq.s c300 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c2ec:	|     |   move.l 112(sp),-(sp)
    c2f0:	|     |   jsr d1ea <restoreSnapshot>
    c2f6:	|     |   addq.l #4,sp
    c2f8:	|     |   tst.w d0
    c2fa:	|     +-- bne.s c300 <loadGame+0x2bc>
    c2fc:	|     |   clr.w d0
    c2fe:	+-----|-- bra.s c33a <loadGame+0x2f6>
	}

	Close (fp);
    c300:	|     '-> move.l 112(sp),26(sp)
    c306:	|         move.l 1c950 <DOSBase>,d0
    c30c:	|         movea.l d0,a6
    c30e:	|         move.l 26(sp),d1
    c312:	|         jsr -36(a6)
    c316:	|         move.l d0,22(sp)
	clearStackLib ();
    c31a:	|         jsr bffa <clearStackLib>

	cameraX = camerX;
    c320:	|         move.l 66(sp),1c9fe <cameraX>
	cameraY = camerY;
    c328:	|         move.l 62(sp),1ca02 <cameraY>
	cameraZoom = camerZ;
    c330:	|         move.l 58(sp),1c2da <cameraZoom>

	return TRUE;
    c338:	|         moveq #1,d0
}
    c33a:	'-------> movem.l (sp)+,d2-d3/a6
    c33e:	          lea 128(sp),sp
    c342:	          rts

0000c344 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c344:	   ,-> lea -64(sp),sp
    c348:	   |   move.l a6,-(sp)
    c34a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c34c:	   |   movea.l 76(sp),a0
    c350:	   |   move.l (a0),d0
    c352:	   |   move.l 80(sp),-(sp)
    c356:	   |   move.l d0,-(sp)
    c358:	   |   jsr 8d0 <put2bytes>
    c35e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c360:	   |   movea.l 76(sp),a0
    c364:	   |   move.l 40(a0),d0
    c368:	,--|-- beq.s c3a4 <saveFunction+0x60>
		FPutC (fp, 1);
    c36a:	|  |   move.l 80(sp),52(sp)
    c370:	|  |   moveq #1,d0
    c372:	|  |   move.l d0,48(sp)
    c376:	|  |   move.l 1c950 <DOSBase>,d0
    c37c:	|  |   movea.l d0,a6
    c37e:	|  |   move.l 52(sp),d1
    c382:	|  |   move.l 48(sp),d2
    c386:	|  |   jsr -312(a6)
    c38a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c38e:	|  |   movea.l 76(sp),a0
    c392:	|  |   move.l 40(a0),d0
    c396:	|  |   move.l 80(sp),-(sp)
    c39a:	|  |   move.l d0,-(sp)
    c39c:	|  '-- jsr c344 <saveFunction>(pc)
    c3a0:	|      addq.l #8,sp
    c3a2:	|  ,-- bra.s c3c6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c3a4:	'--|-> move.l 80(sp),64(sp)
    c3aa:	   |   clr.l 60(sp)
    c3ae:	   |   move.l 1c950 <DOSBase>,d0
    c3b4:	   |   movea.l d0,a6
    c3b6:	   |   move.l 64(sp),d1
    c3ba:	   |   move.l 60(sp),d2
    c3be:	   |   jsr -312(a6)
    c3c2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c3c6:	   '-> movea.l 76(sp),a0
    c3ca:	       move.l 12(a0),d0
    c3ce:	       move.l 80(sp),-(sp)
    c3d2:	       move.l d0,-(sp)
    c3d4:	       jsr 958 <put4bytes>
    c3da:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c3dc:	       movea.l 76(sp),a0
    c3e0:	       move.l 36(a0),d0
    c3e4:	       move.l 80(sp),-(sp)
    c3e8:	       move.l d0,-(sp)
    c3ea:	       jsr 8d0 <put2bytes>
    c3f0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c3f2:	       move.l 80(sp),40(sp)
    c3f8:	       movea.l 76(sp),a0
    c3fc:	       move.w 54(a0),d0
    c400:	       movea.w d0,a0
    c402:	       move.l a0,36(sp)
    c406:	       move.l 1c950 <DOSBase>,d0
    c40c:	       movea.l d0,a6
    c40e:	       move.l 40(sp),d1
    c412:	       move.l 36(sp),d2
    c416:	       jsr -312(a6)
    c41a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c41e:	       move.l 80(sp),28(sp)
    c424:	       movea.l 76(sp),a0
    c428:	       move.w 48(a0),d0
    c42c:	       movea.w d0,a0
    c42e:	       move.l a0,24(sp)
    c432:	       move.l 1c950 <DOSBase>,d0
    c438:	       movea.l d0,a6
    c43a:	       move.l 28(sp),d1
    c43e:	       move.l 24(sp),d2
    c442:	       jsr -312(a6)
    c446:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c44a:	       move.l 80(sp),16(sp)
    c450:	       movea.l 76(sp),a0
    c454:	       move.w 50(a0),d0
    c458:	       movea.w d0,a0
    c45a:	       move.l a0,12(sp)
    c45e:	       move.l 1c950 <DOSBase>,d0
    c464:	       movea.l d0,a6
    c466:	       move.l 16(sp),d1
    c46a:	       move.l 12(sp),d2
    c46e:	       jsr -312(a6)
    c472:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c476:	       moveq #28,d0
    c478:	       add.l 76(sp),d0
    c47c:	       move.l 80(sp),-(sp)
    c480:	       move.l d0,-(sp)
    c482:	       jsr cb9c <saveVariable>
    c488:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c48a:	       movea.l 76(sp),a0
    c48e:	       move.b 56(a0),d0
    c492:	   ,-- beq.s c4a2 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c494:	   |   pea 192b8 <PutChar+0x175c>
    c49a:	   |   jsr 170ba <KPrintF>
    c4a0:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c4a2:	   '-> movea.l 76(sp),a0
    c4a6:	       move.l 24(a0),d0
    c4aa:	       move.l 80(sp),-(sp)
    c4ae:	       move.l d0,-(sp)
    c4b0:	       jsr ca10 <saveStack>
    c4b6:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c4b8:	       clr.l 68(sp)
    c4bc:	   ,-- bra.s c4e0 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c4be:	,--|-> movea.l 76(sp),a0
    c4c2:	|  |   move.l 20(a0),d1
    c4c6:	|  |   move.l 68(sp),d0
    c4ca:	|  |   lsl.l #3,d0
    c4cc:	|  |   add.l d1,d0
    c4ce:	|  |   move.l 80(sp),-(sp)
    c4d2:	|  |   move.l d0,-(sp)
    c4d4:	|  |   jsr cb9c <saveVariable>
    c4da:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c4dc:	|  |   addq.l #1,68(sp)
    c4e0:	|  '-> movea.l 76(sp),a0
    c4e4:	|      move.l 8(a0),d0
    c4e8:	|      cmp.l 68(sp),d0
    c4ec:	'----- bgt.s c4be <saveFunction+0x17a>
	}
}
    c4ee:	       nop
    c4f0:	       nop
    c4f2:	       move.l (sp)+,d2
    c4f4:	       movea.l (sp)+,a6
    c4f6:	       lea 64(sp),sp
    c4fa:	       rts

0000c4fc <saveGame>:

BOOL saveGame (char * fname) {
    c4fc:	          lea -248(sp),sp
    c500:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c504:	          move.l 264(sp),244(sp)
    c50a:	          move.l #1006,240(sp)
    c512:	          move.l 1c950 <DOSBase>,d0
    c518:	          movea.l d0,a6
    c51a:	          move.l 244(sp),d1
    c51e:	          move.l 240(sp),d2
    c522:	          jsr -30(a6)
    c526:	          move.l d0,236(sp)
    c52a:	          move.l 236(sp),d0
    c52e:	          move.l d0,232(sp)
	if (fp == NULL) {
    c532:	      ,-- bne.s c548 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c534:	      |   pea 192da <PutChar+0x177e>
    c53a:	      |   jsr 170ba <KPrintF>
    c540:	      |   addq.l #4,sp
		return FALSE;
    c542:	      |   clr.w d0
    c544:	,-----|-- bra.w ca06 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c548:	|     '-> move.l 232(sp),228(sp)
    c54e:	|         move.l #103159,224(sp)
    c556:	|         moveq #6,d0
    c558:	|         move.l d0,220(sp)
    c55c:	|         move.l 1c950 <DOSBase>,d0
    c562:	|         movea.l d0,a6
    c564:	|         move.l 228(sp),d1
    c568:	|         move.l 224(sp),d2
    c56c:	|         move.l 220(sp),d3
    c570:	|         jsr -48(a6)
    c574:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c578:	|         move.l 232(sp),212(sp)
    c57e:	|         clr.l 208(sp)
    c582:	|         move.l 1c950 <DOSBase>,d0
    c588:	|         movea.l d0,a6
    c58a:	|         move.l 212(sp),d1
    c58e:	|         move.l 208(sp),d2
    c592:	|         jsr -312(a6)
    c596:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c59a:	|         move.l 232(sp),200(sp)
    c5a0:	|         clr.l 196(sp)
    c5a4:	|         move.l 1c950 <DOSBase>,d0
    c5aa:	|         movea.l d0,a6
    c5ac:	|         move.l 200(sp),d1
    c5b0:	|         move.l 196(sp),d2
    c5b4:	|         jsr -312(a6)
    c5b8:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c5bc:	|         move.l 232(sp),188(sp)
    c5c2:	|         moveq #2,d0
    c5c4:	|         move.l d0,184(sp)
    c5c8:	|         move.l 1c950 <DOSBase>,d0
    c5ce:	|         movea.l d0,a6
    c5d0:	|         move.l 188(sp),d1
    c5d4:	|         move.l 184(sp),d2
    c5d8:	|         jsr -312(a6)
    c5dc:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c5e0:	|         move.l 232(sp),176(sp)
    c5e6:	|         moveq #2,d0
    c5e8:	|         move.l d0,172(sp)
    c5ec:	|         move.l 1c950 <DOSBase>,d0
    c5f2:	|         movea.l d0,a6
    c5f4:	|         move.l 176(sp),d1
    c5f8:	|         move.l 172(sp),d2
    c5fc:	|         jsr -312(a6)
    c600:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c604:	|         move.l 232(sp),164(sp)
    c60a:	|         move.l #116970,160(sp)
    c612:	|         moveq #8,d0
    c614:	|         move.l d0,156(sp)
    c618:	|         move.l 1c950 <DOSBase>,d0
    c61e:	|         movea.l d0,a6
    c620:	|         move.l 164(sp),d1
    c624:	|         move.l 160(sp),d2
    c628:	|         move.l 156(sp),d3
    c62c:	|         jsr -48(a6)
    c630:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c634:	|         move.l 232(sp),148(sp)
    c63a:	|         move.w 1c198 <allowAnyFilename>,d0
    c640:	|         movea.w d0,a0
    c642:	|         move.l a0,144(sp)
    c646:	|         move.l 1c950 <DOSBase>,d0
    c64c:	|         movea.l d0,a6
    c64e:	|         move.l 148(sp),d1
    c652:	|         move.l 144(sp),d2
    c656:	|         jsr -312(a6)
    c65a:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c65e:	|         move.l 232(sp),136(sp)
    c664:	|         move.w 1c8e8 <captureAllKeys>,d0
    c66a:	|         movea.w d0,a0
    c66c:	|         move.l a0,132(sp)
    c670:	|         move.l 1c950 <DOSBase>,d0
    c676:	|         movea.l d0,a6
    c678:	|         move.l 136(sp),d1
    c67c:	|         move.l 132(sp),d2
    c680:	|         jsr -312(a6)
    c684:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c688:	|         move.l 232(sp),124(sp)
    c68e:	|         moveq #1,d0
    c690:	|         move.l d0,120(sp)
    c694:	|         move.l 1c950 <DOSBase>,d0
    c69a:	|         movea.l d0,a6
    c69c:	|         move.l 124(sp),d1
    c6a0:	|         move.l 120(sp),d2
    c6a4:	|         jsr -312(a6)
    c6a8:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c6ac:	|         move.l 232(sp),112(sp)
    c6b2:	|         move.l 1ca4c <fontTableSize>,d0
    c6b8:	|         sgt d0
    c6ba:	|         neg.b d0
    c6bc:	|         move.b d0,d0
    c6be:	|         andi.l #255,d0
    c6c4:	|         move.l d0,108(sp)
    c6c8:	|         move.l 1c950 <DOSBase>,d0
    c6ce:	|         movea.l d0,a6
    c6d0:	|         move.l 112(sp),d1
    c6d4:	|         move.l 108(sp),d2
    c6d8:	|         jsr -312(a6)
    c6dc:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c6e0:	|         move.l 1ca4c <fontTableSize>,d0
    c6e6:	|     ,-- ble.s c724 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c6e8:	|     |   move.l 1ca40 <loadedFontNum>,d0
    c6ee:	|     |   move.l 232(sp),-(sp)
    c6f2:	|     |   move.l d0,-(sp)
    c6f4:	|     |   jsr 8d0 <put2bytes>
    c6fa:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c6fc:	|     |   move.l 1ca3c <fontHeight>,d0
    c702:	|     |   move.l 232(sp),-(sp)
    c706:	|     |   move.l d0,-(sp)
    c708:	|     |   jsr 8d0 <put2bytes>
    c70e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c710:	|     |   move.l 1ca44 <fontOrderString>,d0
    c716:	|     |   move.l 232(sp),-(sp)
    c71a:	|     |   move.l d0,-(sp)
    c71c:	|     |   jsr bd8 <writeString>
    c722:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c724:	|     '-> move.w 1c840 <fontSpace>,d0
    c72a:	|         movea.w d0,a0
    c72c:	|         move.l 232(sp),-(sp)
    c730:	|         move.l a0,-(sp)
    c732:	|         jsr a9c <putSigned>
    c738:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c73a:	|         move.l 1c9fe <cameraX>,d0
    c740:	|         move.l 232(sp),-(sp)
    c744:	|         move.l d0,-(sp)
    c746:	|         jsr 8d0 <put2bytes>
    c74c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c74e:	|         move.l 1ca02 <cameraY>,d0
    c754:	|         move.l 232(sp),-(sp)
    c758:	|         move.l d0,-(sp)
    c75a:	|         jsr 8d0 <put2bytes>
    c760:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c762:	|         move.l 1c2da <cameraZoom>,d0
    c768:	|         move.l 232(sp),-(sp)
    c76c:	|         move.l d0,-(sp)
    c76e:	|         jsr a46 <putFloat>
    c774:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c776:	|         move.l 232(sp),100(sp)
    c77c:	|         move.b 1c2b6 <brightnessLevel>,d0
    c782:	|         move.b d0,d0
    c784:	|         andi.l #255,d0
    c78a:	|         move.l d0,96(sp)
    c78e:	|         move.l 1c950 <DOSBase>,d0
    c794:	|         movea.l d0,a6
    c796:	|         move.l 100(sp),d1
    c79a:	|         move.l 96(sp),d2
    c79e:	|         jsr -312(a6)
    c7a2:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c7a6:	|         move.l 232(sp),-(sp)
    c7aa:	|         jsr 70f6 <saveHandlers>
    c7b0:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c7b2:	|         move.l 232(sp),-(sp)
    c7b6:	|         jsr 15ae0 <saveRegions>
    c7bc:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c7be:	|         move.l 1c842 <mouseCursorAnim>,d0
    c7c4:	|         move.l 232(sp),-(sp)
    c7c8:	|         move.l d0,-(sp)
    c7ca:	|         jsr ad20 <saveAnim>
    c7d0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c7d2:	|         move.l 1c846 <mouseCursorFrameNum>,d0
    c7d8:	|         move.l 232(sp),-(sp)
    c7dc:	|         move.l d0,-(sp)
    c7de:	|         jsr 8d0 <put2bytes>
    c7e4:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c7e6:	|         move.l 1c8e0 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c7ee:	|         clr.l 248(sp)
	while (thisFunction) {
    c7f2:	|     ,-- bra.s c802 <saveGame+0x306>
		countFunctions ++;
    c7f4:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c7f8:	|  |  |   movea.l 252(sp),a0
    c7fc:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c802:	|  |  '-> tst.l 252(sp)
    c806:	|  '----- bne.s c7f4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c808:	|         move.l 232(sp),-(sp)
    c80c:	|         move.l 252(sp),-(sp)
    c810:	|         jsr 8d0 <put2bytes>
    c816:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c818:	|         move.l 1c8e0 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c820:	|     ,-- bra.s c83c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c822:	|  ,--|-> move.l 232(sp),-(sp)
    c826:	|  |  |   move.l 256(sp),-(sp)
    c82a:	|  |  |   jsr c344 <saveFunction>
    c830:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c832:	|  |  |   movea.l 252(sp),a0
    c836:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c83c:	|  |  '-> tst.l 252(sp)
    c840:	|  '----- bne.s c822 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c842:	|         clr.l 256(sp)
    c846:	|     ,-- bra.s c868 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c848:	|  ,--|-> move.l 1c8f6 <globalVars>,d1
    c84e:	|  |  |   move.l 256(sp),d0
    c852:	|  |  |   lsl.l #3,d0
    c854:	|  |  |   add.l d1,d0
    c856:	|  |  |   move.l 232(sp),-(sp)
    c85a:	|  |  |   move.l d0,-(sp)
    c85c:	|  |  |   jsr cb9c <saveVariable>
    c862:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c864:	|  |  |   addq.l #1,256(sp)
    c868:	|  |  '-> move.l 1c920 <numGlobals>,d0
    c86e:	|  |      cmp.l 256(sp),d0
    c872:	|  '----- bgt.s c848 <saveGame+0x34c>
	}

	savePeople (fp);
    c874:	|         move.l 232(sp),-(sp)
    c878:	|         jsr ae48 <savePeople>
    c87e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c880:	|         movea.l 1ca60 <currentFloor>,a0
    c886:	|         move.l 8(a0),d0
    c88a:	|  ,----- beq.s c8c8 <saveGame+0x3cc>
		FPutC (fp, 1);
    c88c:	|  |      move.l 232(sp),76(sp)
    c892:	|  |      moveq #1,d0
    c894:	|  |      move.l d0,72(sp)
    c898:	|  |      move.l 1c950 <DOSBase>,d0
    c89e:	|  |      movea.l d0,a6
    c8a0:	|  |      move.l 76(sp),d1
    c8a4:	|  |      move.l 72(sp),d2
    c8a8:	|  |      jsr -312(a6)
    c8ac:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c8b0:	|  |      movea.l 1ca60 <currentFloor>,a0
    c8b6:	|  |      move.l (a0),d0
    c8b8:	|  |      move.l 232(sp),-(sp)
    c8bc:	|  |      move.l d0,-(sp)
    c8be:	|  |      jsr 8d0 <put2bytes>
    c8c4:	|  |      addq.l #8,sp
    c8c6:	|  |  ,-- bra.s c8ea <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c8c8:	|  '--|-> move.l 232(sp),88(sp)
    c8ce:	|     |   clr.l 84(sp)
    c8d2:	|     |   move.l 1c950 <DOSBase>,d0
    c8d8:	|     |   movea.l d0,a6
    c8da:	|     |   move.l 88(sp),d1
    c8de:	|     |   move.l 84(sp),d2
    c8e2:	|     |   jsr -312(a6)
    c8e6:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c8ea:	|     '-> move.l 232(sp),64(sp)
    c8f0:	|         move.l 1ca12 <speechMode>,60(sp)
    c8f8:	|         move.l 1c950 <DOSBase>,d0
    c8fe:	|         movea.l d0,a6
    c900:	|         move.l 64(sp),d1
    c904:	|         move.l 60(sp),d2
    c908:	|         jsr -312(a6)
    c90c:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c910:	|         move.b 1c816 <fadeMode>,d0
    c916:	|         move.b d0,d0
    c918:	|         andi.l #255,d0
    c91e:	|         move.l d0,52(sp)
    c922:	|         move.l 232(sp),48(sp)
    c928:	|         move.l 1c950 <DOSBase>,d0
    c92e:	|         movea.l d0,a6
    c930:	|         move.l 52(sp),d1
    c934:	|         move.l 48(sp),d2
    c938:	|         jsr -312(a6)
    c93c:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c940:	|         move.l 1c898 <speech>,d0
    c946:	|         move.l 232(sp),-(sp)
    c94a:	|         move.l d0,-(sp)
    c94c:	|         jsr 3e6a <saveSpeech>
    c952:	|         addq.l #8,sp
	saveStatusBars (fp);
    c954:	|         move.l 232(sp),-(sp)
    c958:	|         jsr 817a <saveStatusBars>
    c95e:	|         addq.l #4,sp
	saveSounds (fp);
    c960:	|         move.l 232(sp),-(sp)
    c964:	|         jsr cf0e <saveSounds>
    c96a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c96c:	|         move.w 1c9fc <saveEncoding>,d0
    c972:	|         move.w d0,d0
    c974:	|         andi.l #65535,d0
    c97a:	|         move.l 232(sp),-(sp)
    c97e:	|         move.l d0,-(sp)
    c980:	|         jsr 8d0 <put2bytes>
    c986:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c988:	|         move.l 1c9ee <parallaxStuff>,d0
    c98e:	|         move.l 232(sp),-(sp)
    c992:	|         move.l d0,-(sp)
    c994:	|         jsr d210 <saveParallaxRecursive>
    c99a:	|         addq.l #8,sp
	FPutC (fp, 0);
    c99c:	|         move.l 232(sp),40(sp)
    c9a2:	|         clr.l 36(sp)
    c9a6:	|         move.l 1c950 <DOSBase>,d0
    c9ac:	|         movea.l d0,a6
    c9ae:	|         move.l 40(sp),d1
    c9b2:	|         move.l 36(sp),d2
    c9b6:	|         jsr -312(a6)
    c9ba:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c9be:	|         move.l 232(sp),28(sp)
    c9c4:	|         move.l 1c2bc <languageNum>,24(sp)
    c9cc:	|         move.l 1c950 <DOSBase>,d0
    c9d2:	|         movea.l d0,a6
    c9d4:	|         move.l 28(sp),d1
    c9d8:	|         move.l 24(sp),d2
    c9dc:	|         jsr -312(a6)
    c9e0:	|         move.l d0,20(sp)

	Close(fp);
    c9e4:	|         move.l 232(sp),16(sp)
    c9ea:	|         move.l 1c950 <DOSBase>,d0
    c9f0:	|         movea.l d0,a6
    c9f2:	|         move.l 16(sp),d1
    c9f6:	|         jsr -36(a6)
    c9fa:	|         move.l d0,12(sp)
	clearStackLib ();
    c9fe:	|         jsr bffa <clearStackLib>
	return TRUE;
    ca04:	|         moveq #1,d0
}
    ca06:	'-------> movem.l (sp)+,d2-d3/a6
    ca0a:	          lea 248(sp),sp
    ca0e:	          rts

0000ca10 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    ca10:	       lea -12(sp),sp
	int elements = 0;
    ca14:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    ca18:	       move.l 16(sp),(sp)
	while (search) {
    ca1c:	   ,-- bra.s ca28 <saveStack+0x18>
		elements ++;
    ca1e:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    ca22:	|  |   movea.l (sp),a0
    ca24:	|  |   move.l 8(a0),(sp)
	while (search) {
    ca28:	|  '-> tst.l (sp)
    ca2a:	'----- bne.s ca1e <saveStack+0xe>
	}

	put2bytes (elements, fp);
    ca2c:	       move.l 20(sp),-(sp)
    ca30:	       move.l 12(sp),-(sp)
    ca34:	       jsr 8d0 <put2bytes>
    ca3a:	       addq.l #8,sp
	search = vs;
    ca3c:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    ca40:	       clr.l 4(sp)
    ca44:	   ,-- bra.s ca60 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    ca46:	,--|-> move.l (sp),d0
    ca48:	|  |   move.l 20(sp),-(sp)
    ca4c:	|  |   move.l d0,-(sp)
    ca4e:	|  |   jsr cb9c <saveVariable>
    ca54:	|  |   addq.l #8,sp
		search = search -> next;
    ca56:	|  |   movea.l (sp),a0
    ca58:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ca5c:	|  |   addq.l #1,4(sp)
    ca60:	|  '-> move.l 4(sp),d0
    ca64:	|      cmp.l 8(sp),d0
    ca68:	'----- blt.s ca46 <saveStack+0x36>
	}
}
    ca6a:	       nop
    ca6c:	       nop
    ca6e:	       lea 12(sp),sp
    ca72:	       rts

0000ca74 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ca74:	             lea -44(sp),sp
    ca78:	             move.l a6,-(sp)
    ca7a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ca7c:	             move.l 1c9d4 <stackLib>,48(sp)
	int a = 0;
    ca84:	             clr.l 44(sp)
	while (s) {
    ca88:	      ,----- bra.s cae6 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ca8a:	   ,--|----> movea.l 48(sp),a0
    ca8e:	   |  |      move.l (a0),d0
    ca90:	   |  |      cmp.l 56(sp),d0
    ca94:	   |  |  ,-- bne.s cad8 <saveStackRef+0x64>
			FPutC (fp, 1);
    ca96:	   |  |  |   move.l 60(sp),16(sp)
    ca9c:	   |  |  |   moveq #1,d0
    ca9e:	   |  |  |   move.l d0,12(sp)
    caa2:	   |  |  |   move.l 1c950 <DOSBase>,d0
    caa8:	   |  |  |   movea.l d0,a6
    caaa:	   |  |  |   move.l 16(sp),d1
    caae:	   |  |  |   move.l 12(sp),d2
    cab2:	   |  |  |   jsr -312(a6)
    cab6:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    caba:	   |  |  |   move.l 1c9d0 <stackLibTotal>,d0
    cac0:	   |  |  |   sub.l 44(sp),d0
    cac4:	   |  |  |   move.l 60(sp),-(sp)
    cac8:	   |  |  |   move.l d0,-(sp)
    caca:	   |  |  |   jsr 8d0 <put2bytes>
    cad0:	   |  |  |   addq.l #8,sp
			return TRUE;
    cad2:	   |  |  |   moveq #1,d0
    cad4:	,--|--|--|-- bra.w cb92 <saveStackRef+0x11e>
		}
		s = s -> next;
    cad8:	|  |  |  '-> movea.l 48(sp),a0
    cadc:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cae2:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cae6:	|  |  '----> tst.l 48(sp)
    caea:	|  '-------- bne.s ca8a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    caec:	|            move.l 60(sp),40(sp)
    caf2:	|            clr.l 36(sp)
    caf6:	|            move.l 1c950 <DOSBase>,d0
    cafc:	|            movea.l d0,a6
    cafe:	|            move.l 40(sp),d1
    cb02:	|            move.l 36(sp),d2
    cb06:	|            jsr -312(a6)
    cb0a:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cb0e:	|            movea.l 56(sp),a0
    cb12:	|            move.l (a0),d0
    cb14:	|            move.l 60(sp),-(sp)
    cb18:	|            move.l d0,-(sp)
    cb1a:	|            jsr ca10 <saveStack>
    cb20:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cb22:	|            moveq #8,d0
    cb24:	|            move.l d0,28(sp)
    cb28:	|            clr.l 24(sp)
    cb2c:	|            move.l 1c948 <SysBase>,d0
    cb32:	|            movea.l d0,a6
    cb34:	|            move.l 28(sp),d0
    cb38:	|            move.l 24(sp),d1
    cb3c:	|            jsr -684(a6)
    cb40:	|            move.l d0,20(sp)
    cb44:	|            move.l 20(sp),d0
    cb48:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cb4c:	|            move.l 1c9d0 <stackLibTotal>,d0
    cb52:	|            addq.l #1,d0
    cb54:	|            move.l d0,1c9d0 <stackLibTotal>
	if (! s) {
    cb5a:	|            tst.l 48(sp)
    cb5e:	|        ,-- bne.s cb72 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cb60:	|        |   pea 19326 <PutChar+0x17ca>
    cb66:	|        |   jsr 170ba <KPrintF>
    cb6c:	|        |   addq.l #4,sp
		return FALSE;
    cb6e:	|        |   clr.w d0
    cb70:	+--------|-- bra.s cb92 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cb72:	|        '-> move.l 1c9d4 <stackLib>,d0
    cb78:	|            movea.l 48(sp),a0
    cb7c:	|            move.l d0,4(a0)
	s -> stack = vs;
    cb80:	|            movea.l 48(sp),a0
    cb84:	|            move.l 56(sp),(a0)
	stackLib = s;
    cb88:	|            move.l 48(sp),1c9d4 <stackLib>
	return TRUE;
    cb90:	|            moveq #1,d0
}
    cb92:	'----------> move.l (sp)+,d2
    cb94:	             movea.l (sp)+,a6
    cb96:	             lea 44(sp),sp
    cb9a:	             rts

0000cb9c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cb9c:	          lea -12(sp),sp
    cba0:	          move.l a6,-(sp)
    cba2:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cba4:	          move.l 28(sp),16(sp)
    cbaa:	          movea.l 24(sp),a0
    cbae:	          move.l (a0),d0
    cbb0:	          move.l d0,12(sp)
    cbb4:	          move.l 1c950 <DOSBase>,d0
    cbba:	          movea.l d0,a6
    cbbc:	          move.l 16(sp),d1
    cbc0:	          move.l 12(sp),d2
    cbc4:	          jsr -312(a6)
    cbc8:	          move.l d0,8(sp)
	switch (from -> varType) {
    cbcc:	          movea.l 24(sp),a0
    cbd0:	          move.l (a0),d0
    cbd2:	          moveq #9,d1
    cbd4:	          cmp.l d0,d1
    cbd6:	      ,-- bcs.w cc86 <saveVariable+0xea>
    cbda:	      |   add.l d0,d0
    cbdc:	      |   movea.l d0,a0
    cbde:	      |   adda.l #52202,a0
    cbe4:	      |   move.w (a0),d0
    cbe6:	      |   jmp (cbea <saveVariable+0x4e>,pc,d0.w)
    cbea:	      |   ori.l #1310740,(a0)+
    cbf0:	      |   ori.b #20,(20,a0,d0.w)
    cbf6:	      |   .short 0x004c
    cbf8:	      |   ori.b #126,(a4)
    cbfc:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cc00:	      |   ori.b #40,(a0)+
    cc04:	      |   ori.b #47,d4
    cc08:	      |   ori.b #0,(a4)+
    cc0c:	      |   jsr 958 <put4bytes>
    cc12:	      |   addq.l #8,sp
		return TRUE;
    cc14:	      |   moveq #1,d0
    cc16:	,-----|-- bra.w ccc2 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cc1a:	|     |   movea.l 24(sp),a0
    cc1e:	|     |   move.l 4(a0),d0
    cc22:	|     |   move.l 28(sp),-(sp)
    cc26:	|     |   move.l d0,-(sp)
    cc28:	|     |   jsr bd8 <writeString>
    cc2e:	|     |   addq.l #8,sp
		return TRUE;
    cc30:	|     |   moveq #1,d0
    cc32:	+-----|-- bra.w ccc2 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cc36:	|     |   movea.l 24(sp),a0
    cc3a:	|     |   move.l 4(a0),d0
    cc3e:	|     |   move.l 28(sp),-(sp)
    cc42:	|     |   move.l d0,-(sp)
    cc44:	|     |   jsr ca74 <saveStackRef>
    cc4a:	|     |   addq.l #8,sp
    cc4c:	+-----|-- bra.s ccc2 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cc4e:	|     |   movea.l 24(sp),a0
    cc52:	|     |   move.l 4(a0),d0
    cc56:	|     |   move.l 28(sp),-(sp)
    cc5a:	|     |   move.l d0,-(sp)
    cc5c:	|     |   jsr adea <saveCostume>
    cc62:	|     |   addq.l #8,sp
		return FALSE;
    cc64:	|     |   clr.w d0
    cc66:	+-----|-- bra.s ccc2 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cc68:	|     |   movea.l 24(sp),a0
    cc6c:	|     |   move.l 4(a0),d0
    cc70:	|     |   move.l 28(sp),-(sp)
    cc74:	|     |   move.l d0,-(sp)
    cc76:	|     |   jsr ad20 <saveAnim>
    cc7c:	|     |   addq.l #8,sp
		return FALSE;
    cc7e:	|     |   clr.w d0
    cc80:	+-----|-- bra.s ccc2 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cc82:	|     |   clr.w d0
    cc84:	+-----|-- bra.s ccc2 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cc86:	|     '-> movea.l 24(sp),a0
    cc8a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc8c:	|         moveq #10,d1
    cc8e:	|         cmp.l d0,d1
    cc90:	|  ,----- bcs.s ccaa <saveVariable+0x10e>
						typeName[from->varType] :
    cc92:	|  |      movea.l 24(sp),a0
    cc96:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc98:	|  |      add.l d0,d0
    cc9a:	|  |      movea.l d0,a1
    cc9c:	|  |      adda.l d0,a1
    cc9e:	|  |      lea 1c818 <typeName>,a0
    cca4:	|  |      move.l (0,a1,a0.l),d0
    cca8:	|  |  ,-- bra.s ccb0 <saveVariable+0x114>
    ccaa:	|  '--|-> move.l #103243,d0
    ccb0:	|     '-> move.l d0,-(sp)
    ccb2:	|         pea 19352 <PutChar+0x17f6>
    ccb8:	|         jsr 170ba <KPrintF>
    ccbe:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    ccc0:	|         moveq #1,d0
    ccc2:	'-------> move.l (sp)+,d2
    ccc4:	          movea.l (sp)+,a6
    ccc6:	          lea 12(sp),sp
    ccca:	          rts

0000cccc <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cccc:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    ccd0:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    ccd8:	          movea.l 4(sp),a0
    ccdc:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cce2:	          movea.l 4(sp),a0
    cce6:	          move.w 10(a0),d0
    ccea:	          lsr.w #8,d0
    ccec:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    ccf0:	          movea.l 4(sp),a0
    ccf4:	          move.w 10(a0),d0
    ccf8:	          move.b d0,(sp)

    if(counterx_new)
    ccfa:	,-------- beq.w cda0 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    ccfe:	|         clr.w d1
    cd00:	|         move.b (sp),d1
    cd02:	|         move.w 1c9dc <counterx_old>,d0
    cd08:	|         sub.w d0,d1
    cd0a:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cd0e:	|         cmpi.w #128,10(sp)
    cd14:	|     ,-- blt.s cd2c <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cd16:	|     |   move.w #1,1c8fe <input+0x4>
            counterx_diff -= 256;    
    cd1e:	|     |   move.w 10(sp),d0
    cd22:	|     |   addi.w #-256,d0
    cd26:	|     |   move.w d0,10(sp)
    cd2a:	|  ,--|-- bra.s cd58 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cd2c:	|  |  '-> cmpi.w #-129,10(sp)
    cd32:	|  |  ,-- bgt.s cd4a <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cd34:	|  |  |   move.w 10(sp),d0
    cd38:	|  |  |   addi.w #256,d0
    cd3c:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cd40:	|  |  |   move.w #1,1c8fe <input+0x4>
    cd48:	|  +--|-- bra.s cd58 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cd4a:	|  |  '-> tst.w 10(sp)
    cd4e:	|  +----- beq.s cd58 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cd50:	|  |      move.w #1,1c8fe <input+0x4>
        }

        input.mouseX += counterx_diff;
    cd58:	|  '----> move.l 1c904 <input+0xa>,d0
    cd5e:	|         movea.w 10(sp),a0
    cd62:	|         add.l a0,d0
    cd64:	|         move.l d0,1c904 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cd6a:	|         move.l 1c904 <input+0xa>,d1
    cd70:	|         move.l 1c89c <winWidth>,d0
    cd76:	|         cmp.l d1,d0
    cd78:	|     ,-- bge.s cd88 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cd7a:	|     |   move.l 1c89c <winWidth>,d0
    cd80:	|     |   move.l d0,1c904 <input+0xa>
    cd86:	|  ,--|-- bra.s cd96 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cd88:	|  |  '-> move.l 1c904 <input+0xa>,d0
    cd8e:	|  +----- bpl.s cd96 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cd90:	|  |      clr.l 1c904 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cd96:	|  '----> clr.w d0
    cd98:	|         move.b (sp),d0
    cd9a:	|         move.w d0,1c9dc <counterx_old>
    }    

    if(countery_new)
    cda0:	'-------> tst.b 1(sp)
    cda4:	,-------- beq.w ce4e <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cda8:	|         clr.w d1
    cdaa:	|         move.b 1(sp),d1
    cdae:	|         move.w 1c9de <countery_old>,d0
    cdb4:	|         sub.w d0,d1
    cdb6:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cdba:	|         cmpi.w #128,8(sp)
    cdc0:	|     ,-- blt.s cdd8 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cdc2:	|     |   move.w #1,1c8fe <input+0x4>
            countery_diff -= 256;    
    cdca:	|     |   move.w 8(sp),d0
    cdce:	|     |   addi.w #-256,d0
    cdd2:	|     |   move.w d0,8(sp)
    cdd6:	|  ,--|-- bra.s ce04 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cdd8:	|  |  '-> cmpi.w #-129,8(sp)
    cdde:	|  |  ,-- bgt.s cdf6 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cde0:	|  |  |   move.w #1,1c8fe <input+0x4>
            countery_diff += 256;
    cde8:	|  |  |   move.w 8(sp),d0
    cdec:	|  |  |   addi.w #256,d0
    cdf0:	|  |  |   move.w d0,8(sp)
    cdf4:	|  +--|-- bra.s ce04 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cdf6:	|  |  '-> tst.w 8(sp)
    cdfa:	|  +----- beq.s ce04 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cdfc:	|  |      move.w #1,1c8fe <input+0x4>
        }

        input.mouseY += countery_diff;
    ce04:	|  '----> move.l 1c908 <input+0xe>,d0
    ce0a:	|         movea.w 8(sp),a0
    ce0e:	|         add.l a0,d0
    ce10:	|         move.l d0,1c908 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    ce16:	|         move.l 1c908 <input+0xe>,d1
    ce1c:	|         move.l 1c8a0 <winHeight>,d0
    ce22:	|         cmp.l d1,d0
    ce24:	|     ,-- bge.s ce34 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    ce26:	|     |   move.l 1c8a0 <winHeight>,d0
    ce2c:	|     |   move.l d0,1c908 <input+0xe>
    ce32:	|  ,--|-- bra.s ce42 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    ce34:	|  |  '-> move.l 1c908 <input+0xe>,d0
    ce3a:	|  +----- bpl.s ce42 <CsiCheckInput+0x176>
            input.mouseY = 0;
    ce3c:	|  |      clr.l 1c908 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    ce42:	|  '----> clr.w d0
    ce44:	|         move.b 1(sp),d0
    ce48:	|         move.w d0,1c9de <countery_old>
    } 

    input.leftRelease = FALSE;
    ce4e:	'-------> clr.w 1c900 <input+0x6>
    input.rightRelease = FALSE;
    ce54:	          clr.w 1c902 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    ce5a:	          move.w 1c8fa <input>,d0
    ce60:	      ,-- beq.s ce86 <CsiCheckInput+0x1ba>
    ce62:	      |   movea.l #12574721,a0
    ce68:	      |   move.b (a0),d0
    ce6a:	      |   move.b d0,d0
    ce6c:	      |   andi.l #255,d0
    ce72:	      |   moveq #64,d1
    ce74:	      |   and.l d1,d0
    ce76:	      +-- beq.s ce86 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    ce78:	      |   clr.w 1c8fa <input>
        input.leftRelease = TRUE;
    ce7e:	      |   move.w #1,1c900 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    ce86:	      '-> move.w 1c8fc <input+0x2>,d0
    ce8c:	      ,-- beq.s ceb4 <CsiCheckInput+0x1e8>
    ce8e:	      |   movea.l #14675990,a0
    ce94:	      |   move.w (a0),d0
    ce96:	      |   move.w d0,d0
    ce98:	      |   andi.l #65535,d0
    ce9e:	      |   andi.l #1024,d0
    cea4:	      +-- beq.s ceb4 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    cea6:	      |   clr.w 1c8fc <input+0x2>
        input.rightRelease = TRUE;
    ceac:	      |   move.w #1,1c902 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    ceb4:	      '-> movea.l #12574721,a0
    ceba:	          move.b (a0),d0
    cebc:	          move.b d0,d0
    cebe:	          andi.l #255,d0
    cec4:	          moveq #64,d1
    cec6:	          and.l d1,d0
    cec8:	      ,-- bne.s ced2 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    ceca:	      |   move.w #1,1c8fa <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    ced2:	      '-> movea.l #14675990,a0
    ced8:	          move.w (a0),d0
    ceda:	          move.w d0,d0
    cedc:	          andi.l #65535,d0
    cee2:	          andi.l #1024,d0
    cee8:	      ,-- bne.s cef2 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    ceea:	      |   move.w #1,1c8fc <input+0x2>
    }

    cef2:	      '-> nop
    cef4:	          lea 12(sp),sp
    cef8:	          rts

0000cefa <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cefa:	moveq #0,d0
}
    cefc:	rts

0000cefe <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cefe:	nop
    cf00:	rts

0000cf02 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cf02:	nop
    cf04:	rts

0000cf06 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cf06:	moveq #1,d0
}
    cf08:	rts

0000cf0a <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cf0a:	nop
    cf0c:	rts

0000cf0e <saveSounds>:

void saveSounds (BPTR fp) {
    cf0e:	lea -12(sp),sp
    cf12:	move.l a6,-(sp)
    cf14:	move.l d2,-(sp)
	FPutC (fp,0);
    cf16:	move.l 24(sp),16(sp)
    cf1c:	clr.l 12(sp)
    cf20:	move.l 1c950 <DOSBase>,d0
    cf26:	movea.l d0,a6
    cf28:	move.l 16(sp),d1
    cf2c:	move.l 12(sp),d2
    cf30:	jsr -312(a6)
    cf34:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cf38:	move.l 1c2d6 <defSoundVol>,d0
    cf3e:	move.l 24(sp),-(sp)
    cf42:	move.l d0,-(sp)
    cf44:	jsr 8d0 <put2bytes>
    cf4a:	addq.l #8,sp
	put2bytes (defVol, fp);
    cf4c:	move.l 1c2d2 <defVol>,d0
    cf52:	move.l 24(sp),-(sp)
    cf56:	move.l d0,-(sp)
    cf58:	jsr 8d0 <put2bytes>
    cf5e:	addq.l #8,sp
}
    cf60:	nop
    cf62:	move.l (sp)+,d2
    cf64:	movea.l (sp)+,a6
    cf66:	lea 12(sp),sp
    cf6a:	rts

0000cf6c <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    cf6c:	move.l 4(sp),1c2d2 <defVol>
}
    cf74:	nop
    cf76:	rts

0000cf78 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    cf78:	move.l 4(sp),1c2d6 <defSoundVol>
}
    cf80:	nop
    cf82:	rts

0000cf84 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    cf84:	nop
    cf86:	rts

0000cf88 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf88:	nop
    cf8a:	rts

0000cf8c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf8c:	nop
    cf8e:	rts

0000cf90 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    cf90:	subq.l #4,sp
    cf92:	move.l 12(sp),d0
    cf96:	move.w d0,d0
    cf98:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    cf9c:	moveq #1,d0
}
    cf9e:	addq.l #4,sp
    cfa0:	rts

0000cfa2 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    cfa2:	nop
    cfa4:	rts

0000cfa6 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    cfa6:	move.l 16(sp),-(sp)
    cfaa:	move.l 16(sp),-(sp)
    cfae:	move.l 16(sp),-(sp)
    cfb2:	move.l 16(sp),-(sp)
    cfb6:	jsr e0e <CstBlankScreen>
    cfbc:	lea 16(sp),sp
}
    cfc0:	nop
    cfc2:	rts

0000cfc4 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    cfc4:	pea 19375 <PutChar+0x1819>
    cfca:	jsr 170ba <KPrintF>
    cfd0:	addq.l #4,sp
}
    cfd2:	nop
    cfd4:	rts

0000cfd6 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    cfd6:	movea.l 8(sp),a1
    cfda:	movea.l 12(sp),a0
    cfde:	move.l 8(sp),d1
    cfe2:	move.l 4(sp),d0
    cfe6:	move.l a1,-(sp)
    cfe8:	move.l a0,-(sp)
    cfea:	move.l d1,-(sp)
    cfec:	move.l d0,-(sp)
    cfee:	jsr 4564 <drawLine>
    cff4:	lea 16(sp),sp
}
    cff8:	nop
    cffa:	rts

0000cffc <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    cffc:	movea.l 12(sp),a1
    d000:	movea.l 4(sp),a0
    d004:	move.l 8(sp),d1
    d008:	move.l 4(sp),d0
    d00c:	move.l a1,-(sp)
    d00e:	move.l a0,-(sp)
    d010:	move.l d1,-(sp)
    d012:	move.l d0,-(sp)
    d014:	jsr 4564 <drawLine>
    d01a:	lea 16(sp),sp
}
    d01e:	nop
    d020:	rts

0000d022 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d022:	pea 193ae <PutChar+0x1852>
    d028:	jsr 170ba <KPrintF>
    d02e:	addq.l #4,sp
}
    d030:	nop
    d032:	rts

0000d034 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d034:	jsr 1ae2 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d03a:	pea 1c9e8 <backdropTextureName>
    d040:	pea 1 <_start+0x1>
    d044:	jsr 46e6 <deleteTextures>
    d04a:	addq.l #8,sp
	backdropTextureName = 0;
    d04c:	clr.l 1c9e8 <backdropTextureName>
	backdropExists = FALSE;
    d052:	clr.w 1c9ec <backdropExists>
}
    d058:	nop
    d05a:	rts

0000d05c <killParallax>:

void killParallax () {
    d05c:	          lea -12(sp),sp
    d060:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d062:	   ,----- bra.s d0ce <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d064:	,--|----> move.l 1c9ee <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d06c:	|  |      movea.l 12(sp),a0
    d070:	|  |      move.l 42(a0),d0
    d074:	|  |      move.l d0,1c9ee <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d07a:	|  |      move.l 12(sp),d0
    d07e:	|  |      addq.l #4,d0
    d080:	|  |      move.l d0,-(sp)
    d082:	|  |      pea 1 <_start+0x1>
    d086:	|  |      jsr 46e6 <deleteTextures>
    d08c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d08e:	|  |      movea.l 12(sp),a0
    d092:	|  |      move.l (a0),d0
    d094:	|  |  ,-- beq.s d0ae <killParallax+0x52>
    d096:	|  |  |   movea.l 12(sp),a0
    d09a:	|  |  |   move.l (a0),8(sp)
    d09e:	|  |  |   move.l 1c948 <SysBase>,d0
    d0a4:	|  |  |   movea.l d0,a6
    d0a6:	|  |  |   movea.l 8(sp),a1
    d0aa:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d0ae:	|  |  '-> tst.l 12(sp)
    d0b2:	|  |  ,-- beq.s d0ca <killParallax+0x6e>
    d0b4:	|  |  |   move.l 12(sp),4(sp)
    d0ba:	|  |  |   move.l 1c948 <SysBase>,d0
    d0c0:	|  |  |   movea.l d0,a6
    d0c2:	|  |  |   movea.l 4(sp),a1
    d0c6:	|  |  |   jsr -690(a6)
		k = NULL;
    d0ca:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d0ce:	|  '----> move.l 1c9ee <parallaxStuff>,d0
    d0d4:	'-------- bne.s d064 <killParallax+0x8>
	}
}
    d0d6:	          nop
    d0d8:	          nop
    d0da:	          movea.l (sp)+,a6
    d0dc:	          lea 12(sp),sp
    d0e0:	          rts

0000d0e2 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d0e2:	       move.l 4(sp),-(sp)
    d0e6:	       jsr 74d0 <openFileFromNum>
    d0ec:	       addq.l #4,sp
    d0ee:	       tst.l d0
    d0f0:	   ,-- bne.s d102 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d0f2:	   |   pea 193cf <PutChar+0x1873>
    d0f8:	   |   jsr 170ba <KPrintF>
    d0fe:	   |   addq.l #4,sp
		return;
    d100:	,--|-- bra.s d122 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d102:	|  '-> move.l 1c930 <bigDataFile>,d0
    d108:	|      move.l 12(sp),-(sp)
    d10c:	|      move.l 12(sp),-(sp)
    d110:	|      move.l d0,-(sp)
    d112:	|      jsr 1d5a <CstLoadBackdrop>
    d118:	|      lea 12(sp),sp
	finishAccess ();
    d11c:	|      jsr 73c8 <finishAccess>
	
}
    d122:	'----> rts

0000d124 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d124:	subq.l #8,sp
    d126:	movea.l 12(sp),a0
    d12a:	move.l 16(sp),d1
    d12e:	move.l 20(sp),d0
    d132:	movea.w a0,a0
    d134:	move.w a0,6(sp)
    d138:	move.w d1,d1
    d13a:	move.w d1,4(sp)
    d13e:	move.w d0,d0
    d140:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d144:	pea 1941e <PutChar+0x18c2>
    d14a:	jsr 170ba <KPrintF>
    d150:	addq.l #4,sp

}
    d152:	nop
    d154:	addq.l #8,sp
    d156:	rts

0000d158 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d158:	pea 19441 <PutChar+0x18e5>
    d15e:	jsr 170ba <KPrintF>
    d164:	addq.l #4,sp
}
    d166:	nop
    d168:	rts

0000d16a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d16a:	pea 1c9f2 <snapshotTextureName>
    d170:	pea 1 <_start+0x1>
    d174:	jsr 46e6 <deleteTextures>
    d17a:	addq.l #8,sp
	snapshotTextureName = 0;
    d17c:	clr.l 1c9f2 <snapshotTextureName>
}
    d182:	nop
    d184:	rts

0000d186 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d186:	clr.l 1c9fe <cameraX>
	cameraY = 0;
    d18c:	clr.l 1ca02 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d192:	move.l 1c9e4 <sceneHeight>,d0
    d198:	move.l d0,d1
    d19a:	move.l 1c9e0 <sceneWidth>,d0
    d1a0:	move.l d1,-(sp)
    d1a2:	move.l d0,-(sp)
    d1a4:	jsr 3626 <CstReserveBackdrop>
    d1aa:	addq.l #8,sp
}
    d1ac:	rts

0000d1ae <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d1ae:	jsr d034 <killBackDrop>
	killParallax ();
    d1b4:	jsr d05c <killParallax>
	killZBuffer ();
    d1ba:	jsr 83e6 <killZBuffer>
	sceneWidth = x;
    d1c0:	move.l 4(sp),d0
    d1c4:	move.l d0,1c9e0 <sceneWidth>
	sceneHeight = y;
    d1ca:	move.l 8(sp),d0
    d1ce:	move.l d0,1c9e4 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d1d4:	pea 1947a <PutChar+0x191e>
    d1da:	jsr 170ba <KPrintF>
    d1e0:	addq.l #4,sp
	return reserveBackdrop();
    d1e2:	jsr d186 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d1e8:	rts

0000d1ea <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d1ea:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d1ec:	move.l 12(sp),-(sp)
    d1f0:	jsr 6bc <get2bytes>
    d1f6:	addq.l #4,sp
    d1f8:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d1fc:	move.l 12(sp),-(sp)
    d200:	jsr 6bc <get2bytes>
    d206:	addq.l #4,sp
    d208:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d20a:	moveq #1,d0
}
    d20c:	addq.l #8,sp
    d20e:	rts

0000d210 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d210:	   ,-> lea -12(sp),sp
    d214:	   |   move.l a6,-(sp)
    d216:	   |   move.l d2,-(sp)
	if (me) {
    d218:	   |   tst.l 24(sp)
    d21c:	,--|-- beq.w d2b2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d220:	|  |   movea.l 24(sp),a0
    d224:	|  |   move.l 42(a0),d0
    d228:	|  |   move.l 28(sp),-(sp)
    d22c:	|  |   move.l d0,-(sp)
    d22e:	|  '-- jsr d210 <saveParallaxRecursive>(pc)
    d232:	|      addq.l #8,sp
		FPutC (fp, 1);
    d234:	|      move.l 28(sp),16(sp)
    d23a:	|      moveq #1,d0
    d23c:	|      move.l d0,12(sp)
    d240:	|      move.l 1c950 <DOSBase>,d0
    d246:	|      movea.l d0,a6
    d248:	|      move.l 16(sp),d1
    d24c:	|      move.l 12(sp),d2
    d250:	|      jsr -312(a6)
    d254:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d258:	|      movea.l 24(sp),a0
    d25c:	|      move.w 28(a0),d0
    d260:	|      move.w d0,d0
    d262:	|      andi.l #65535,d0
    d268:	|      move.l 28(sp),-(sp)
    d26c:	|      move.l d0,-(sp)
    d26e:	|      jsr 8d0 <put2bytes>
    d274:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d276:	|      movea.l 24(sp),a0
    d27a:	|      move.w 30(a0),d0
    d27e:	|      move.w d0,d0
    d280:	|      andi.l #65535,d0
    d286:	|      move.l 28(sp),-(sp)
    d28a:	|      move.l d0,-(sp)
    d28c:	|      jsr 8d0 <put2bytes>
    d292:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d294:	|      movea.l 24(sp),a0
    d298:	|      move.w 32(a0),d0
    d29c:	|      move.w d0,d0
    d29e:	|      andi.l #65535,d0
    d2a4:	|      move.l 28(sp),-(sp)
    d2a8:	|      move.l d0,-(sp)
    d2aa:	|      jsr 8d0 <put2bytes>
    d2b0:	|      addq.l #8,sp
	}
}
    d2b2:	'----> nop
    d2b4:	       move.l (sp)+,d2
    d2b6:	       movea.l (sp)+,a6
    d2b8:	       lea 12(sp),sp
    d2bc:	       rts

0000d2be <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d2be:	pea 194a1 <PutChar+0x1945>
    d2c4:	jsr 170ba <KPrintF>
    d2ca:	addq.l #4,sp
	return TRUE;
    d2cc:	moveq #1,d0
    d2ce:	rts

0000d2d0 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d2d0:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d2d2:	             move.l 1c9f6 <allObjectTypes>,(sp)

	while (huntType) {
    d2d8:	      ,----- bra.s d2f0 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d2da:	   ,--|----> movea.l (sp),a0
    d2dc:	   |  |      move.l 4(a0),d0
    d2e0:	   |  |      cmp.l 8(sp),d0
    d2e4:	   |  |  ,-- bne.s d2ea <findObjectType+0x1a>
    d2e6:	   |  |  |   move.l (sp),d0
    d2e8:	,--|--|--|-- bra.s d300 <findObjectType+0x30>
		huntType = huntType -> next;
    d2ea:	|  |  |  '-> movea.l (sp),a0
    d2ec:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d2f0:	|  |  '----> tst.l (sp)
    d2f2:	|  '-------- bne.s d2da <findObjectType+0xa>
	}

	return loadObjectType (i);
    d2f4:	|            move.l 8(sp),-(sp)
    d2f8:	|            jsr d3c0 <loadObjectType>
    d2fe:	|            addq.l #4,sp
}
    d300:	'----------> addq.l #4,sp
    d302:	             rts

0000d304 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d304:	             lea -12(sp),sp
	int i, num = 0;
    d308:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d30c:	             move.l 20(sp),-(sp)
    d310:	             jsr d2d0 <findObjectType>
    d316:	             addq.l #4,sp
    d318:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d31a:	             clr.l 8(sp)
    d31e:	   ,-------- bra.s d354 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d320:	,--|-------> movea.l (sp),a0
    d322:	|  |         move.l 38(a0),d1
    d326:	|  |         move.l 8(sp),d0
    d32a:	|  |         lsl.l #3,d0
    d32c:	|  |         movea.l d1,a0
    d32e:	|  |         adda.l d0,a0
    d330:	|  |         move.l (a0),d0
    d332:	|  |         cmp.l 16(sp),d0
    d336:	|  |  ,----- bne.s d350 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d338:	|  |  |      movea.l (sp),a0
    d33a:	|  |  |      move.l 38(a0),d1
    d33e:	|  |  |      move.l 8(sp),d0
    d342:	|  |  |      lsl.l #3,d0
    d344:	|  |  |      movea.l d1,a0
    d346:	|  |  |      adda.l d0,a0
    d348:	|  |  |      move.l 4(a0),4(sp)
			break;
    d34e:	|  |  |  ,-- bra.s d360 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d350:	|  |  '--|-> addq.l #1,8(sp)
    d354:	|  '-----|-> movea.l (sp),a0
    d356:	|        |   move.l 16(a0),d0
    d35a:	|        |   cmp.l 8(sp),d0
    d35e:	'--------|-- bgt.s d320 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d360:	         '-> move.l 4(sp),d0
}
    d364:	             lea 12(sp),sp
    d368:	             rts

0000d36a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d36a:	moveq #1,d0
}
    d36c:	rts

0000d36e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d36e:	subq.l #8,sp
    d370:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d372:	move.l 16(sp),-(sp)
    d376:	jsr 6bc <get2bytes>
    d37c:	addq.l #4,sp
    d37e:	move.l d0,-(sp)
    d380:	jsr d3c0 <loadObjectType>
    d386:	addq.l #4,sp
    d388:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d38c:	movea.l 8(sp),a0
    d390:	move.l (a0),4(sp)
    d394:	move.l 1c948 <SysBase>,d0
    d39a:	movea.l d0,a6
    d39c:	movea.l 4(sp),a1
    d3a0:	jsr -690(a6)
	r -> screenName = readString (fp);
    d3a4:	move.l 16(sp),-(sp)
    d3a8:	jsr b02 <readString>
    d3ae:	addq.l #4,sp
    d3b0:	movea.l 8(sp),a0
    d3b4:	move.l d0,(a0)
	return r;
    d3b6:	move.l 8(sp),d0
}
    d3ba:	movea.l (sp)+,a6
    d3bc:	addq.l #8,sp
    d3be:	rts

0000d3c0 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d3c0:	          lea -84(sp),sp
    d3c4:	          move.l a6,-(sp)
    d3c6:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d3c8:	          moveq #42,d0
    d3ca:	          move.l d0,84(sp)
    d3ce:	          clr.l 80(sp)
    d3d2:	          move.l 1c948 <SysBase>,d0
    d3d8:	          movea.l d0,a6
    d3da:	          move.l 84(sp),d0
    d3de:	          move.l 80(sp),d1
    d3e2:	          jsr -684(a6)
    d3e6:	          move.l d0,76(sp)
    d3ea:	          move.l 76(sp),d0
    d3ee:	          move.l d0,72(sp)

    if (newType) {
    d3f2:	,-------- beq.w d66c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d3f6:	|         move.l 96(sp),-(sp)
    d3fa:	|         jsr 7598 <openObjectSlice>
    d400:	|         addq.l #4,sp
    d402:	|         tst.w d0
    d404:	+-------- beq.w d66c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d408:	|         move.l 1c930 <bigDataFile>,d0
    d40e:	|         move.l d0,-(sp)
    d410:	|         jsr 6bc <get2bytes>
    d416:	|         addq.l #4,sp
    d418:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d41c:	|         move.l 1c930 <bigDataFile>,64(sp)
    d424:	|         move.l 1c950 <DOSBase>,d0
    d42a:	|         movea.l d0,a6
    d42c:	|         move.l 64(sp),d1
    d430:	|         jsr -306(a6)
    d434:	|         move.l d0,60(sp)
    d438:	|         move.l 60(sp),d0
    d43c:	|         move.l d0,d0
    d43e:	|         movea.l 72(sp),a0
    d442:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d446:	|         move.l 1c930 <bigDataFile>,56(sp)
    d44e:	|         move.l 1c950 <DOSBase>,d0
    d454:	|         movea.l d0,a6
    d456:	|         move.l 56(sp),d1
    d45a:	|         jsr -306(a6)
    d45e:	|         move.l d0,52(sp)
    d462:	|         move.l 52(sp),d0
    d466:	|         move.l d0,d0
    d468:	|         movea.l 72(sp),a0
    d46c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d470:	|         move.l 1c930 <bigDataFile>,48(sp)
    d478:	|         move.l 1c950 <DOSBase>,d0
    d47e:	|         movea.l d0,a6
    d480:	|         move.l 48(sp),d1
    d484:	|         jsr -306(a6)
    d488:	|         move.l d0,44(sp)
    d48c:	|         move.l 44(sp),d0
    d490:	|         move.l d0,d0
    d492:	|         movea.l 72(sp),a0
    d496:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d49a:	|         move.l 1c930 <bigDataFile>,40(sp)
    d4a2:	|         move.l 1c950 <DOSBase>,d0
    d4a8:	|         movea.l d0,a6
    d4aa:	|         move.l 40(sp),d1
    d4ae:	|         jsr -306(a6)
    d4b2:	|         move.l d0,36(sp)
    d4b6:	|         move.l 36(sp),d0
    d4ba:	|         movea.l 72(sp),a0
    d4be:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d4c2:	|         move.l 1c930 <bigDataFile>,32(sp)
    d4ca:	|         move.l 1c950 <DOSBase>,d0
    d4d0:	|         movea.l d0,a6
    d4d2:	|         move.l 32(sp),d1
    d4d6:	|         jsr -306(a6)
    d4da:	|         move.l d0,28(sp)
    d4de:	|         move.l 28(sp),d0
    d4e2:	|         movea.l 72(sp),a0
    d4e6:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d4ea:	|         move.l 1c930 <bigDataFile>,d0
    d4f0:	|         move.l d0,-(sp)
    d4f2:	|         jsr 718 <get4bytes>
    d4f8:	|         addq.l #4,sp
    d4fa:	|         movea.l 72(sp),a0
    d4fe:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d502:	|         move.l 1c930 <bigDataFile>,d0
    d508:	|         move.l d0,-(sp)
    d50a:	|         jsr 6bc <get2bytes>
    d510:	|         addq.l #4,sp
    d512:	|         movea.l 72(sp),a0
    d516:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d51a:	|         move.l 1c930 <bigDataFile>,24(sp)
    d522:	|         move.l 1c950 <DOSBase>,d0
    d528:	|         movea.l d0,a6
    d52a:	|         move.l 24(sp),d1
    d52e:	|         jsr -306(a6)
    d532:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d536:	|         move.l 1c930 <bigDataFile>,d0
    d53c:	|         move.l d0,-(sp)
    d53e:	|         jsr 7d8 <getFloat>
    d544:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d546:	|         move.l 1c930 <bigDataFile>,d0
    d54c:	|         move.l d0,-(sp)
    d54e:	|         jsr 7d8 <getFloat>
    d554:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d556:	|         move.l 1c930 <bigDataFile>,d0
    d55c:	|         move.l d0,-(sp)
    d55e:	|         jsr 6bc <get2bytes>
    d564:	|         addq.l #4,sp
    d566:	|         move.l d0,d0
    d568:	|         movea.l 72(sp),a0
    d56c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d570:	|         move.l 1c930 <bigDataFile>,d0
    d576:	|         move.l d0,-(sp)
    d578:	|         jsr 6bc <get2bytes>
    d57e:	|         addq.l #4,sp
    d580:	|         movea.l 72(sp),a0
    d584:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d588:	|         movea.l 72(sp),a0
    d58c:	|         move.l 16(a0),d0
    d590:	|  ,----- beq.s d5c2 <loadObjectType+0x202>
    d592:	|  |      movea.l 72(sp),a0
    d596:	|  |      move.l 16(a0),d0
    d59a:	|  |      lsl.l #3,d0
    d59c:	|  |      move.l d0,16(sp)
    d5a0:	|  |      clr.l 12(sp)
    d5a4:	|  |      move.l 1c948 <SysBase>,d0
    d5aa:	|  |      movea.l d0,a6
    d5ac:	|  |      move.l 16(sp),d0
    d5b0:	|  |      move.l 12(sp),d1
    d5b4:	|  |      jsr -684(a6)
    d5b8:	|  |      move.l d0,8(sp)
    d5bc:	|  |      move.l 8(sp),d0
    d5c0:	|  |  ,-- bra.s d5c4 <loadObjectType+0x204>
    d5c2:	|  '--|-> moveq #0,d0
    d5c4:	|     '-> movea.l 72(sp),a0
    d5c8:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d5cc:	|         clr.l 88(sp)
    d5d0:	|     ,-- bra.s d620 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d5d2:	|  ,--|-> move.l 1c930 <bigDataFile>,d1
    d5d8:	|  |  |   movea.l 72(sp),a0
    d5dc:	|  |  |   movea.l 38(a0),a0
    d5e0:	|  |  |   move.l 88(sp),d0
    d5e4:	|  |  |   lsl.l #3,d0
    d5e6:	|  |  |   lea (0,a0,d0.l),a2
    d5ea:	|  |  |   move.l d1,-(sp)
    d5ec:	|  |  |   jsr 6bc <get2bytes>
    d5f2:	|  |  |   addq.l #4,sp
    d5f4:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d5f6:	|  |  |   move.l 1c930 <bigDataFile>,d1
    d5fc:	|  |  |   movea.l 72(sp),a0
    d600:	|  |  |   movea.l 38(a0),a0
    d604:	|  |  |   move.l 88(sp),d0
    d608:	|  |  |   lsl.l #3,d0
    d60a:	|  |  |   lea (0,a0,d0.l),a2
    d60e:	|  |  |   move.l d1,-(sp)
    d610:	|  |  |   jsr 6bc <get2bytes>
    d616:	|  |  |   addq.l #4,sp
    d618:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d61c:	|  |  |   addq.l #1,88(sp)
    d620:	|  |  '-> movea.l 72(sp),a0
    d624:	|  |      move.l 16(a0),d0
    d628:	|  |      cmp.l 88(sp),d0
    d62c:	|  '----- bgt.s d5d2 <loadObjectType+0x212>
            }
            finishAccess();
    d62e:	|         jsr 73c8 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d634:	|         move.l 68(sp),-(sp)
    d638:	|         jsr 73d2 <getNumberedString>
    d63e:	|         addq.l #4,sp
    d640:	|         movea.l 72(sp),a0
    d644:	|         move.l d0,(a0)
            newType->objectNum = i;
    d646:	|         movea.l 72(sp),a0
    d64a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d650:	|         move.l 1c9f6 <allObjectTypes>,d0
    d656:	|         movea.l 72(sp),a0
    d65a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d65e:	|         move.l 72(sp),1c9f6 <allObjectTypes>
            return newType;
    d666:	|         move.l 72(sp),d0
    d66a:	|     ,-- bra.s d66e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d66c:	'-----|-> moveq #0,d0
}
    d66e:	      '-> movea.l (sp)+,a2
    d670:	          movea.l (sp)+,a6
    d672:	          lea 84(sp),sp
    d676:	          rts

0000d678 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d678:	             lea -16(sp),sp
    d67c:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d67e:	             move.l #117238,16(sp)

	while (* huntRegion) {
    d686:	   ,-------- bra.s d6fa <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d688:	,--|-------> movea.l 16(sp),a0
    d68c:	|  |         move.l (a0),d0
    d68e:	|  |         cmp.l 24(sp),d0
    d692:	|  |  ,----- bne.s d6ec <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d694:	|  |  |      movea.l 24(sp),a0
    d698:	|  |  |      move.l 8(a0),d0
    d69c:	|  |  |      movea.l 16(sp),a0
    d6a0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d6a2:	|  |  |      movea.l 24(sp),a0
    d6a6:	|  |  |      move.l 38(a0),12(sp)
    d6ac:	|  |  |      move.l 1c948 <SysBase>,d0
    d6b2:	|  |  |      movea.l d0,a6
    d6b4:	|  |  |      movea.l 12(sp),a1
    d6b8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d6bc:	|  |  |      movea.l 24(sp),a0
    d6c0:	|  |  |      move.l (a0),8(sp)
    d6c4:	|  |  |      move.l 1c948 <SysBase>,d0
    d6ca:	|  |  |      movea.l d0,a6
    d6cc:	|  |  |      movea.l 8(sp),a1
    d6d0:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d6d4:	|  |  |      move.l 24(sp),4(sp)
    d6da:	|  |  |      move.l 1c948 <SysBase>,d0
    d6e0:	|  |  |      movea.l d0,a6
    d6e2:	|  |  |      movea.l 4(sp),a1
    d6e6:	|  |  |      jsr -690(a6)
			return;
    d6ea:	|  |  |  ,-- bra.s d710 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d6ec:	|  |  '--|-> movea.l 16(sp),a0
    d6f0:	|  |     |   move.l (a0),d0
    d6f2:	|  |     |   move.l d0,d1
    d6f4:	|  |     |   addq.l #8,d1
    d6f6:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d6fa:	|  '-----|-> movea.l 16(sp),a0
    d6fe:	|        |   move.l (a0),d0
    d700:	'--------|-- bne.s d688 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d702:	         |   pea 194c8 <PutChar+0x196c>
    d708:	         |   jsr 170ba <KPrintF>
    d70e:	         |   addq.l #4,sp
}
    d710:	         '-> movea.l (sp)+,a6
    d712:	             lea 16(sp),sp
    d716:	             rts

0000d718 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d718:	movea.l 4(sp),a0
    d71c:	move.l 4(a0),d0
    d720:	move.l 8(sp),-(sp)
    d724:	move.l d0,-(sp)
    d726:	jsr 8d0 <put2bytes>
    d72c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d72e:	movea.l 4(sp),a0
    d732:	move.l (a0),d0
    d734:	move.l 8(sp),-(sp)
    d738:	move.l d0,-(sp)
    d73a:	jsr bd8 <writeString>
    d740:	addq.l #8,sp
    d742:	nop
    d744:	rts

0000d746 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d746:	                         lea -112(sp),sp
    d74a:	                         move.l a6,-(sp)
    d74c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d74e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d752:	                         move.w 1c9fc <saveEncoding>,d0
    d758:	                  ,----- beq.s d762 <fileToStack+0x1c>
    d75a:	                  |      move.l #103662,d0
    d760:	                  |  ,-- bra.s d768 <fileToStack+0x22>
    d762:	                  '--|-> move.l #103688,d0
    d768:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d76c:	                         move.l 124(sp),112(sp)
    d772:	                         move.l #1005,108(sp)
    d77a:	                         move.l 1c950 <DOSBase>,d0
    d780:	                         movea.l d0,a6
    d782:	                         move.l 112(sp),d1
    d786:	                         move.l 108(sp),d2
    d78a:	                         jsr -30(a6)
    d78e:	                         move.l d0,104(sp)
    d792:	                         move.l 104(sp),d0
    d796:	                         move.l d0,100(sp)
    if (!fp) {
    d79a:	                     ,-- bne.s d7b4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d79c:	                     |   move.l 124(sp),-(sp)
    d7a0:	                     |   pea 1951f <PutChar+0x19c3>
    d7a6:	                     |   jsr 170ba <KPrintF>
    d7ac:	                     |   addq.l #8,sp
        return FALSE;
    d7ae:	                     |   clr.w d0
    d7b0:	,--------------------|-- bra.w daaa <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d7b4:	|                    '-> move.w 1c9fc <saveEncoding>,d0
    d7ba:	|                        move.l d0,d0
    d7bc:	|                        move.b d0,1c9fa <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d7c2:	|                        move.w 1c9fc <saveEncoding>,d0
    d7c8:	|                        lsr.w #8,d0
    d7ca:	|                        move.l d0,d0
    d7cc:	|                        move.b d0,1c9fb <encode2>

    while (*checker) {
    d7d2:	|                 ,----- bra.s d836 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d7d4:	|              ,--|----> move.l 100(sp),30(sp)
    d7da:	|              |  |      move.l 1c950 <DOSBase>,d0
    d7e0:	|              |  |      movea.l d0,a6
    d7e2:	|              |  |      move.l 30(sp),d1
    d7e6:	|              |  |      jsr -306(a6)
    d7ea:	|              |  |      move.l d0,26(sp)
    d7ee:	|              |  |      move.l 26(sp),d1
    d7f2:	|              |  |      movea.l 116(sp),a0
    d7f6:	|              |  |      move.b (a0),d0
    d7f8:	|              |  |      ext.w d0
    d7fa:	|              |  |      movea.w d0,a0
    d7fc:	|              |  |      cmpa.l d1,a0
    d7fe:	|              |  |  ,-- beq.s d832 <fileToStack+0xec>
            Close(fp);
    d800:	|              |  |  |   move.l 100(sp),22(sp)
    d806:	|              |  |  |   move.l 1c950 <DOSBase>,d0
    d80c:	|              |  |  |   movea.l d0,a6
    d80e:	|              |  |  |   move.l 22(sp),d1
    d812:	|              |  |  |   jsr -36(a6)
    d816:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d81a:	|              |  |  |   move.l 124(sp),-(sp)
    d81e:	|              |  |  |   pea 1952c <PutChar+0x19d0>
    d824:	|              |  |  |   jsr 170ba <KPrintF>
    d82a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d82c:	|              |  |  |   clr.w d0
    d82e:	+--------------|--|--|-- bra.w daaa <fileToStack+0x364>
        }
        checker++;
    d832:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    d836:	|              |  '----> movea.l 116(sp),a0
    d83a:	|              |         move.b (a0),d0
    d83c:	|              '-------- bne.s d7d4 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d83e:	|                        move.w 1c9fc <saveEncoding>,d0
    d844:	|  ,-------------------- beq.s d8b8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d846:	|  |                     move.l 100(sp),-(sp)
    d84a:	|  |                     jsr dab4 <readStringEncoded>
    d850:	|  |                     addq.l #4,sp
    d852:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d856:	|  |                     pea 1956d <PutChar+0x1a11>
    d85c:	|  |                     move.l 100(sp),-(sp)
    d860:	|  |                     jsr 13a86 <strcmp>
    d866:	|  |                     addq.l #8,sp
    d868:	|  |                     tst.l d0
    d86a:	|  |                 ,-- beq.s d89e <fileToStack+0x158>
            Close(fp);
    d86c:	|  |                 |   move.l 100(sp),88(sp)
    d872:	|  |                 |   move.l 1c950 <DOSBase>,d0
    d878:	|  |                 |   movea.l d0,a6
    d87a:	|  |                 |   move.l 88(sp),d1
    d87e:	|  |                 |   jsr -36(a6)
    d882:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d886:	|  |                 |   move.l 124(sp),-(sp)
    d88a:	|  |                 |   pea 1957c <PutChar+0x1a20>
    d890:	|  |                 |   jsr 170ba <KPrintF>
    d896:	|  |                 |   addq.l #8,sp
            return FALSE;
    d898:	|  |                 |   clr.w d0
    d89a:	+--|-----------------|-- bra.w daaa <fileToStack+0x364>
        }
        FreeVec(checker);
    d89e:	|  |                 '-> move.l 96(sp),92(sp)
    d8a4:	|  |                     move.l 1c948 <SysBase>,d0
    d8aa:	|  |                     movea.l d0,a6
    d8ac:	|  |                     movea.l 92(sp),a1
    d8b0:	|  |                     jsr -690(a6)
        checker = NULL;
    d8b4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d8b8:	|  >-------------------> move.w 1c9fc <saveEncoding>,d0
    d8be:	|  |     ,-------------- beq.w d9f2 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d8c2:	|  |     |               move.l 100(sp),76(sp)
    d8c8:	|  |     |               move.l 1c950 <DOSBase>,d0
    d8ce:	|  |     |               movea.l d0,a6
    d8d0:	|  |     |               move.l 76(sp),d1
    d8d4:	|  |     |               jsr -306(a6)
    d8d8:	|  |     |               move.l d0,72(sp)
    d8dc:	|  |     |               move.l 72(sp),d0
    d8e0:	|  |     |               move.b 1c9fa <encode1>,d1
    d8e6:	|  |     |               ext.w d1
    d8e8:	|  |     |               ext.l d1
    d8ea:	|  |     |               move.l d0,d2
    d8ec:	|  |     |               eor.l d1,d2
    d8ee:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d8f2:	|  |     |               moveq #-1,d0
    d8f4:	|  |     |               cmp.l 68(sp),d0
    d8f8:	|  |  ,--|-------------- beq.w da88 <fileToStack+0x342>

            char i = (char) tmp;
    d8fc:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d902:	|  |  |  |               move.b 67(sp),d0
    d906:	|  |  |  |               ext.w d0
    d908:	|  |  |  |               movea.w d0,a0
    d90a:	|  |  |  |               moveq #2,d2
    d90c:	|  |  |  |               cmp.l a0,d2
    d90e:	|  |  |  |     ,-------- beq.s d98a <fileToStack+0x244>
    d910:	|  |  |  |     |         moveq #2,d0
    d912:	|  |  |  |     |         cmp.l a0,d0
    d914:	|  |  |  |  ,--|-------- blt.w d9c0 <fileToStack+0x27a>
    d918:	|  |  |  |  |  |         cmpa.w #0,a0
    d91c:	|  |  |  |  |  |     ,-- beq.s d928 <fileToStack+0x1e2>
    d91e:	|  |  |  |  |  |     |   moveq #1,d2
    d920:	|  |  |  |  |  |     |   cmp.l a0,d2
    d922:	|  |  |  |  |  |  ,--|-- beq.s d964 <fileToStack+0x21e>
    d924:	|  |  |  |  +--|--|--|-- bra.w d9c0 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d928:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    d92c:	|  |  |  |  |  |  |      jsr dab4 <readStringEncoded>
    d932:	|  |  |  |  |  |  |      addq.l #4,sp
    d934:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d938:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d93c:	|  |  |  |  |  |  |      lea 14(sp),a0
    d940:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d942:	|  |  |  |  |  |  |      jsr 147fc <makeTextVar>
    d948:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d94a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d950:	|  |  |  |  |  |  |      move.l 1c948 <SysBase>,d0
    d956:	|  |  |  |  |  |  |      movea.l d0,a6
    d958:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d95c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d960:	|  |  |  |  |  |  |  ,-- bra.w da18 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d964:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    d968:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d96e:	|  |  |  |  |  |     |   addq.l #4,sp
    d970:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d972:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d976:	|  |  |  |  |  |     |   lea 18(sp),a0
    d97a:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d97c:	|  |  |  |  |  |     |   jsr 14ecc <setVariable>
    d982:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d986:	|  |  |  |  |  |     +-- bra.w da18 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d98a:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    d990:	|  |  |  |  |        |   move.l 1c950 <DOSBase>,d0
    d996:	|  |  |  |  |        |   movea.l d0,a6
    d998:	|  |  |  |  |        |   move.l 62(sp),d1
    d99c:	|  |  |  |  |        |   jsr -306(a6)
    d9a0:	|  |  |  |  |        |   move.l d0,58(sp)
    d9a4:	|  |  |  |  |        |   move.l 58(sp),d0
    d9a8:	|  |  |  |  |        |   move.l d0,-(sp)
    d9aa:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d9ae:	|  |  |  |  |        |   lea 18(sp),a0
    d9b2:	|  |  |  |  |        |   move.l a0,-(sp)
    d9b4:	|  |  |  |  |        |   jsr 14ecc <setVariable>
    d9ba:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d9be:	|  |  |  |  |        +-- bra.s da18 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d9c0:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    d9c4:	|  |  |  |           |   pea 195fe <PutChar+0x1aa2>
    d9ca:	|  |  |  |           |   jsr 170ba <KPrintF>
    d9d0:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d9d2:	|  |  |  |           |   move.l 100(sp),46(sp)
    d9d8:	|  |  |  |           |   move.l 1c950 <DOSBase>,d0
    d9de:	|  |  |  |           |   movea.l d0,a6
    d9e0:	|  |  |  |           |   move.l 46(sp),d1
    d9e4:	|  |  |  |           |   jsr -36(a6)
    d9e8:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d9ec:	|  |  |  |           |   clr.w d0
    d9ee:	+--|--|--|-----------|-- bra.w daaa <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d9f2:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    d9f6:	|  |  |              |   jsr db7a <readTextPlain>
    d9fc:	|  |  |              |   addq.l #4,sp
    d9fe:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    da02:	|  |  |        ,-----|-- beq.w da8c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    da06:	|  |  |        |     |   move.l 80(sp),-(sp)
    da0a:	|  |  |        |     |   lea 14(sp),a0
    da0e:	|  |  |        |     |   move.l a0,-(sp)
    da10:	|  |  |        |     |   jsr 147fc <makeTextVar>
    da16:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    da18:	|  |  |        |     '-> movea.l 128(sp),a0
    da1c:	|  |  |        |         move.l (a0),d0
    da1e:	|  |  |        |  ,----- bne.s da4e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    da20:	|  |  |        |  |      move.l 128(sp),d0
    da24:	|  |  |        |  |      move.l d0,-(sp)
    da26:	|  |  |        |  |      lea 14(sp),a0
    da2a:	|  |  |        |  |      move.l a0,-(sp)
    da2c:	|  |  |        |  |      jsr 13e9c <addVarToStackQuick>
    da32:	|  |  |        |  |      addq.l #8,sp
    da34:	|  |  |        |  |      tst.w d0
    da36:	|  |  |        |  |  ,-- bne.s da3c <fileToStack+0x2f6>
    da38:	|  |  |        |  |  |   clr.w d0
    da3a:	+--|--|--------|--|--|-- bra.s daaa <fileToStack+0x364>
            sH->last = sH->first;
    da3c:	|  |  |        |  |  '-> movea.l 128(sp),a0
    da40:	|  |  |        |  |      move.l (a0),d0
    da42:	|  |  |        |  |      movea.l 128(sp),a0
    da46:	|  |  |        |  |      move.l d0,4(a0)
    da4a:	|  +--|--------|--|----- bra.w d8b8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    da4e:	|  |  |        |  '----> movea.l 128(sp),a0
    da52:	|  |  |        |         move.l 4(a0),d0
    da56:	|  |  |        |         addq.l #8,d0
    da58:	|  |  |        |         move.l d0,-(sp)
    da5a:	|  |  |        |         lea 14(sp),a0
    da5e:	|  |  |        |         move.l a0,-(sp)
    da60:	|  |  |        |         jsr 13e9c <addVarToStackQuick>
    da66:	|  |  |        |         addq.l #8,sp
    da68:	|  |  |        |         tst.w d0
    da6a:	|  |  |        |     ,-- bne.s da70 <fileToStack+0x32a>
    da6c:	|  |  |        |     |   clr.w d0
    da6e:	+--|--|--------|-----|-- bra.s daaa <fileToStack+0x364>
            sH->last = sH->last->next;
    da70:	|  |  |        |     '-> movea.l 128(sp),a0
    da74:	|  |  |        |         movea.l 4(a0),a0
    da78:	|  |  |        |         move.l 8(a0),d0
    da7c:	|  |  |        |         movea.l 128(sp),a0
    da80:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    da84:	|  '--|--------|-------- bra.w d8b8 <fileToStack+0x172>
            if (tmp == -1) break;
    da88:	|     '--------|-------> nop
    da8a:	|              |     ,-- bra.s da8e <fileToStack+0x348>
            if (!line) break;
    da8c:	|              '-----|-> nop
        }
    }
    Close(fp);
    da8e:	|                    '-> move.l 100(sp),38(sp)
    da94:	|                        move.l 1c950 <DOSBase>,d0
    da9a:	|                        movea.l d0,a6
    da9c:	|                        move.l 38(sp),d1
    daa0:	|                        jsr -36(a6)
    daa4:	|                        move.l d0,34(sp)
    return TRUE;
    daa8:	|                        moveq #1,d0
}
    daaa:	'----------------------> move.l (sp)+,d2
    daac:	                         movea.l (sp)+,a6
    daae:	                         lea 112(sp),sp
    dab2:	                         rts

0000dab4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dab4:	          lea -32(sp),sp
    dab8:	          move.l a6,-(sp)
    daba:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dabc:	          move.l 44(sp),-(sp)
    dac0:	          jsr 6bc <get2bytes>
    dac6:	          addq.l #4,sp
    dac8:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dacc:	          move.l 32(sp),d0
    dad0:	          addq.l #1,d0
    dad2:	          move.l d0,28(sp)
    dad6:	          clr.l 24(sp)
    dada:	          move.l 1c948 <SysBase>,d0
    dae0:	          movea.l d0,a6
    dae2:	          move.l 28(sp),d0
    dae6:	          move.l 24(sp),d1
    daea:	          jsr -684(a6)
    daee:	          move.l d0,20(sp)
    daf2:	          move.l 20(sp),d0
    daf6:	          move.l d0,16(sp)
    if (!s) return NULL;
    dafa:	      ,-- bne.s db00 <readStringEncoded+0x4c>
    dafc:	      |   moveq #0,d0
    dafe:	,-----|-- bra.s db70 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    db00:	|     '-> clr.l 36(sp)
    db04:	|     ,-- bra.s db56 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    db06:	|  ,--|-> move.l 44(sp),12(sp)
    db0c:	|  |  |   move.l 1c950 <DOSBase>,d0
    db12:	|  |  |   movea.l d0,a6
    db14:	|  |  |   move.l 12(sp),d1
    db18:	|  |  |   jsr -306(a6)
    db1c:	|  |  |   move.l d0,8(sp)
    db20:	|  |  |   move.l 8(sp),d0
    db24:	|  |  |   move.l d0,d1
    db26:	|  |  |   move.b 1c9fa <encode1>,d2
    db2c:	|  |  |   move.l 36(sp),d0
    db30:	|  |  |   movea.l 16(sp),a0
    db34:	|  |  |   adda.l d0,a0
    db36:	|  |  |   move.b d1,d0
    db38:	|  |  |   eor.b d2,d0
    db3a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    db3c:	|  |  |   move.b 1c9fa <encode1>,d0
    db42:	|  |  |   move.b d0,d1
    db44:	|  |  |   move.b 1c9fb <encode2>,d0
    db4a:	|  |  |   add.b d1,d0
    db4c:	|  |  |   move.b d0,1c9fa <encode1>
    for (a = 0; a < len; a++) {
    db52:	|  |  |   addq.l #1,36(sp)
    db56:	|  |  '-> move.l 36(sp),d0
    db5a:	|  |      cmp.l 32(sp),d0
    db5e:	|  '----- blt.s db06 <readStringEncoded+0x52>
    }
    s[len] = 0;
    db60:	|         move.l 32(sp),d0
    db64:	|         movea.l 16(sp),a0
    db68:	|         adda.l d0,a0
    db6a:	|         clr.b (a0)
    return s;
    db6c:	|         move.l 16(sp),d0
}
    db70:	'-------> move.l (sp)+,d2
    db72:	          movea.l (sp)+,a6
    db74:	          lea 32(sp),sp
    db78:	          rts

0000db7a <readTextPlain>:

char *readTextPlain(BPTR fp) {
    db7a:	             lea -104(sp),sp
    db7e:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    db82:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    db86:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    db8c:	             move.l 124(sp),106(sp)
    db92:	             clr.l 102(sp)
    db96:	             clr.l 98(sp)
    db9a:	             move.l 1c950 <DOSBase>,d0
    dba0:	             movea.l d0,a6
    dba2:	             move.l 106(sp),d1
    dba6:	             move.l 102(sp),d2
    dbaa:	             move.l 98(sp),d3
    dbae:	             jsr -66(a6)
    dbb2:	             move.l d0,94(sp)
    dbb6:	             move.l 94(sp),d0
    dbba:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dbbe:	   ,-------- bra.s dc02 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dbc0:	,--|-------> move.l 124(sp),22(sp)
    dbc6:	|  |         move.l 1c950 <DOSBase>,d0
    dbcc:	|  |         movea.l d0,a6
    dbce:	|  |         move.l 22(sp),d1
    dbd2:	|  |         jsr -306(a6)
    dbd6:	|  |         move.l d0,18(sp)
    dbda:	|  |         move.l 18(sp),d0
    dbde:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dbe2:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dbe8:	|  |         cmpi.b #10,17(sp)
    dbee:	|  |  ,----- beq.s dbf8 <readTextPlain+0x7e>
    dbf0:	|  |  |      moveq #-1,d0
    dbf2:	|  |  |      cmp.l 110(sp),d0
    dbf6:	|  |  |  ,-- bne.s dbfe <readTextPlain+0x84>
            keepGoing = FALSE;
    dbf8:	|  |  '--|-> clr.w 114(sp)
    dbfc:	|  +-----|-- bra.s dc02 <readTextPlain+0x88>
        } else {
            stringSize++;
    dbfe:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    dc02:	|  '-------> tst.w 114(sp)
    dc06:	'----------- bne.s dbc0 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dc08:	             tst.l 116(sp)
    dc0c:	         ,-- bne.s dc1c <readTextPlain+0xa2>
    dc0e:	         |   moveq #-1,d0
    dc10:	         |   cmp.l 110(sp),d0
    dc14:	         +-- bne.s dc1c <readTextPlain+0xa2>
        return NULL;
    dc16:	         |   moveq #0,d0
    dc18:	      ,--|-- bra.w dd02 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dc1c:	      |  '-> move.l 124(sp),86(sp)
    dc22:	      |      move.l 90(sp),82(sp)
    dc28:	      |      moveq #-1,d0
    dc2a:	      |      move.l d0,78(sp)
    dc2e:	      |      move.l 1c950 <DOSBase>,d0
    dc34:	      |      movea.l d0,a6
    dc36:	      |      move.l 86(sp),d1
    dc3a:	      |      move.l 82(sp),d2
    dc3e:	      |      move.l 78(sp),d3
    dc42:	      |      jsr -66(a6)
    dc46:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dc4a:	      |      move.l 116(sp),d0
    dc4e:	      |      addq.l #1,d0
    dc50:	      |      move.l d0,70(sp)
    dc54:	      |      clr.l 66(sp)
    dc58:	      |      move.l 1c948 <SysBase>,d0
    dc5e:	      |      movea.l d0,a6
    dc60:	      |      move.l 70(sp),d0
    dc64:	      |      move.l 66(sp),d1
    dc68:	      |      jsr -684(a6)
    dc6c:	      |      move.l d0,62(sp)
    dc70:	      |      move.l 62(sp),d0
    dc74:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dc78:	      |  ,-- bne.s dc80 <readTextPlain+0x106>
    dc7a:	      |  |   moveq #0,d0
    dc7c:	      +--|-- bra.w dd02 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dc80:	      |  '-> move.l 124(sp),54(sp)
    dc86:	      |      move.l 58(sp),50(sp)
    dc8c:	      |      moveq #1,d0
    dc8e:	      |      move.l d0,46(sp)
    dc92:	      |      move.l 116(sp),42(sp)
    dc98:	      |      move.l 1c950 <DOSBase>,d0
    dc9e:	      |      movea.l d0,a6
    dca0:	      |      move.l 54(sp),d1
    dca4:	      |      move.l 50(sp),d2
    dca8:	      |      move.l 46(sp),d3
    dcac:	      |      move.l 42(sp),d4
    dcb0:	      |      jsr -324(a6)
    dcb4:	      |      move.l d0,38(sp)
    dcb8:	      |      move.l 38(sp),d0
    dcbc:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dcc0:	      |      move.l 34(sp),d0
    dcc4:	      |      cmp.l 116(sp),d0
    dcc8:	      |  ,-- beq.s dcd8 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dcca:	      |  |   pea 19633 <PutChar+0x1ad7>
    dcd0:	      |  |   jsr 170ba <KPrintF>
    dcd6:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dcd8:	      |  '-> move.l 124(sp),30(sp)
    dcde:	      |      move.l 1c950 <DOSBase>,d0
    dce4:	      |      movea.l d0,a6
    dce6:	      |      move.l 30(sp),d1
    dcea:	      |      jsr -306(a6)
    dcee:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dcf2:	      |      move.l 116(sp),d0
    dcf6:	      |      movea.l 58(sp),a0
    dcfa:	      |      adda.l d0,a0
    dcfc:	      |      clr.b (a0)
    }

    return reply;
    dcfe:	      |      move.l 58(sp),d0
}
    dd02:	      '----> movem.l (sp)+,d2-d4/a6
    dd06:	             lea 104(sp),sp
    dd0a:	             rts

0000dd0c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    dd0c:	                      lea -144(sp),sp
    dd10:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    dd14:	                      move.l 160(sp),148(sp)
    dd1a:	                      move.l #1006,144(sp)
    dd22:	                      move.l 1c950 <DOSBase>,d0
    dd28:	                      movea.l d0,a6
    dd2a:	                      move.l 148(sp),d1
    dd2e:	                      move.l 144(sp),d2
    dd32:	                      jsr -30(a6)
    dd36:	                      move.l d0,140(sp)
    dd3a:	                      move.l 140(sp),d0
    dd3e:	                      move.l d0,136(sp)

    if (!fp) {
    dd42:	                  ,-- bne.s dd5c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    dd44:	                  |   move.l 160(sp),-(sp)
    dd48:	                  |   pea 19654 <PutChar+0x1af8>
    dd4e:	                  |   jsr 170ba <KPrintF>
    dd54:	                  |   addq.l #8,sp
        return FALSE;
    dd56:	                  |   clr.w d0
    dd58:	,-----------------|-- bra.w e018 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dd5c:	|                 '-> movea.l 164(sp),a0
    dd60:	|                     movea.l 4(a0),a0
    dd64:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dd68:	|                     move.w 1c9fc <saveEncoding>,d0
    dd6e:	|                     move.l d0,d0
    dd70:	|                     move.b d0,1c9fa <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dd76:	|                     move.w 1c9fc <saveEncoding>,d0
    dd7c:	|                     lsr.w #8,d0
    dd7e:	|                     move.l d0,d0
    dd80:	|                     move.b d0,1c9fb <encode2>

    if (saveEncoding) {
    dd86:	|                     move.w 1c9fc <saveEncoding>,d0
    dd8c:	|                 ,-- beq.s ddde <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dd8e:	|                 |   move.l 136(sp),116(sp)
    dd94:	|                 |   move.l #103662,112(sp)
    dd9c:	|                 |   moveq #99,d0
    dd9e:	|                 |   not.b d0
    dda0:	|                 |   add.l sp,d0
    dda2:	|                 |   addi.l #-144,d0
    dda8:	|                 |   move.l d0,108(sp)
    ddac:	|                 |   move.l 1c950 <DOSBase>,d0
    ddb2:	|                 |   movea.l d0,a6
    ddb4:	|                 |   move.l 116(sp),d1
    ddb8:	|                 |   move.l 112(sp),d2
    ddbc:	|                 |   move.l 108(sp),d3
    ddc0:	|                 |   jsr -354(a6)
    ddc4:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    ddc8:	|                 |   move.l 136(sp),-(sp)
    ddcc:	|                 |   pea 1956d <PutChar+0x1a11>
    ddd2:	|                 |   jsr e022 <writeStringEncoded>
    ddd8:	|                 |   addq.l #8,sp
    ddda:	|  ,--------------|-- bra.w dff0 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    ddde:	|  |              '-> move.l 136(sp),132(sp)
    dde4:	|  |                  move.l #103688,128(sp)
    ddec:	|  |                  moveq #99,d1
    ddee:	|  |                  not.b d1
    ddf0:	|  |                  add.l sp,d1
    ddf2:	|  |                  addi.l #-144,d1
    ddf8:	|  |                  move.l d1,124(sp)
    ddfc:	|  |                  move.l 1c950 <DOSBase>,d0
    de02:	|  |                  movea.l d0,a6
    de04:	|  |                  move.l 132(sp),d1
    de08:	|  |                  move.l 128(sp),d2
    de0c:	|  |                  move.l 124(sp),d3
    de10:	|  |                  jsr -354(a6)
    de14:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    de18:	|  +----------------- bra.w dff0 <stackToFile+0x2e4>
        if (saveEncoding) {
    de1c:	|  |  ,-------------> move.w 1c9fc <saveEncoding>,d0
    de22:	|  |  |     ,-------- beq.w df74 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    de26:	|  |  |     |         movea.l 152(sp),a0
    de2a:	|  |  |     |         move.l (a0),d0
    de2c:	|  |  |     |         moveq #1,d1
    de2e:	|  |  |     |         cmp.l d0,d1
    de30:	|  |  |     |     ,-- beq.s de80 <stackToFile+0x174>
    de32:	|  |  |     |     |   moveq #3,d1
    de34:	|  |  |     |     |   cmp.l d0,d1
    de36:	|  |  |     |  ,--|-- bne.w df42 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    de3a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    de40:	|  |  |     |  |  |   move.b 1c9fa <encode1>,d0
    de46:	|  |  |     |  |  |   ext.w d0
    de48:	|  |  |     |  |  |   movea.w d0,a0
    de4a:	|  |  |     |  |  |   move.l a0,72(sp)
    de4e:	|  |  |     |  |  |   move.l 1c950 <DOSBase>,d0
    de54:	|  |  |     |  |  |   movea.l d0,a6
    de56:	|  |  |     |  |  |   move.l 76(sp),d1
    de5a:	|  |  |     |  |  |   move.l 72(sp),d2
    de5e:	|  |  |     |  |  |   jsr -312(a6)
    de62:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    de66:	|  |  |     |  |  |   movea.l 152(sp),a0
    de6a:	|  |  |     |  |  |   move.l 4(a0),d0
    de6e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    de72:	|  |  |     |  |  |   move.l d0,-(sp)
    de74:	|  |  |     |  |  |   jsr e022 <writeStringEncoded>
    de7a:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    de7c:	|  |  |  ,--|--|--|-- bra.w dfe6 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    de80:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    de84:	|  |  |  |  |  |      move.l 4(a0),d0
    de88:	|  |  |  |  |  |  ,-- bmi.s def8 <stackToFile+0x1ec>
    de8a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    de8e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    de92:	|  |  |  |  |  |  |   cmpi.l #255,d0
    de98:	|  |  |  |  |  |  +-- bgt.s def8 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    de9a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    dea0:	|  |  |  |  |  |  |   move.b 1c9fa <encode1>,d0
    dea6:	|  |  |  |  |  |  |   eori.b #2,d0
    deaa:	|  |  |  |  |  |  |   ext.w d0
    deac:	|  |  |  |  |  |  |   movea.w d0,a0
    deae:	|  |  |  |  |  |  |   move.l a0,60(sp)
    deb2:	|  |  |  |  |  |  |   move.l 1c950 <DOSBase>,d0
    deb8:	|  |  |  |  |  |  |   movea.l d0,a6
    deba:	|  |  |  |  |  |  |   move.l 64(sp),d1
    debe:	|  |  |  |  |  |  |   move.l 60(sp),d2
    dec2:	|  |  |  |  |  |  |   jsr -312(a6)
    dec6:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    deca:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    ded0:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    ded4:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    deda:	|  |  |  |  |  |  |   move.l 1c950 <DOSBase>,d0
    dee0:	|  |  |  |  |  |  |   movea.l d0,a6
    dee2:	|  |  |  |  |  |  |   move.l 52(sp),d1
    dee6:	|  |  |  |  |  |  |   move.l 48(sp),d2
    deea:	|  |  |  |  |  |  |   jsr -312(a6)
    deee:	|  |  |  |  |  |  |   move.l d0,44(sp)
    def2:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    def4:	|  |  |  +--|--|--|-- bra.w dfe6 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    def8:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    defe:	|  |  |  |  |  |      move.b 1c9fa <encode1>,d0
    df04:	|  |  |  |  |  |      eori.b #1,d0
    df08:	|  |  |  |  |  |      ext.w d0
    df0a:	|  |  |  |  |  |      movea.w d0,a0
    df0c:	|  |  |  |  |  |      move.l a0,36(sp)
    df10:	|  |  |  |  |  |      move.l 1c950 <DOSBase>,d0
    df16:	|  |  |  |  |  |      movea.l d0,a6
    df18:	|  |  |  |  |  |      move.l 40(sp),d1
    df1c:	|  |  |  |  |  |      move.l 36(sp),d2
    df20:	|  |  |  |  |  |      jsr -312(a6)
    df24:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    df28:	|  |  |  |  |  |      movea.l 152(sp),a0
    df2c:	|  |  |  |  |  |      move.l 4(a0),d0
    df30:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    df34:	|  |  |  |  |  |      move.l d0,-(sp)
    df36:	|  |  |  |  |  |      jsr 958 <put4bytes>
    df3c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    df3e:	|  |  |  +--|--|----- bra.w dfe6 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    df42:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    df46:	|  |  |  |  |         pea 19666 <PutChar+0x1b0a>
    df4c:	|  |  |  |  |         jsr 170ba <KPrintF>
    df52:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    df54:	|  |  |  |  |         move.l 136(sp),28(sp)
    df5a:	|  |  |  |  |         move.l 1c950 <DOSBase>,d0
    df60:	|  |  |  |  |         movea.l d0,a6
    df62:	|  |  |  |  |         move.l 28(sp),d1
    df66:	|  |  |  |  |         jsr -36(a6)
    df6a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    df6e:	|  |  |  |  |         clr.w d0
    df70:	+--|--|--|--|-------- bra.w e018 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    df74:	|  |  |  |  '-------> move.l 152(sp),d0
    df78:	|  |  |  |            move.l d0,-(sp)
    df7a:	|  |  |  |            jsr 14bb0 <getTextFromAnyVar>
    df80:	|  |  |  |            addq.l #4,sp
    df82:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    df86:	|  |  |  |     ,----- beq.s dffa <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    df88:	|  |  |  |     |      movea.l 100(sp),a0
    df8c:	|  |  |  |     |      move.b (a0),d0
    df8e:	|  |  |  |     |      ext.w d0
    df90:	|  |  |  |     |      movea.w d0,a0
    df92:	|  |  |  |     |      move.l a0,12(sp)
    df96:	|  |  |  |     |      move.l 136(sp),96(sp)
    df9c:	|  |  |  |     |      move.l #104130,92(sp)
    dfa4:	|  |  |  |     |      moveq #99,d0
    dfa6:	|  |  |  |     |      not.b d0
    dfa8:	|  |  |  |     |      add.l sp,d0
    dfaa:	|  |  |  |     |      addi.l #-144,d0
    dfb0:	|  |  |  |     |      move.l d0,88(sp)
    dfb4:	|  |  |  |     |      move.l 1c950 <DOSBase>,d0
    dfba:	|  |  |  |     |      movea.l d0,a6
    dfbc:	|  |  |  |     |      move.l 96(sp),d1
    dfc0:	|  |  |  |     |      move.l 92(sp),d2
    dfc4:	|  |  |  |     |      move.l 88(sp),d3
    dfc8:	|  |  |  |     |      jsr -354(a6)
    dfcc:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    dfd0:	|  |  |  |     |      move.l 100(sp),80(sp)
    dfd6:	|  |  |  |     |      move.l 1c948 <SysBase>,d0
    dfdc:	|  |  |  |     |      movea.l d0,a6
    dfde:	|  |  |  |     |      movea.l 80(sp),a1
    dfe2:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    dfe6:	|  |  |  '-----|----> movea.l 152(sp),a0
    dfea:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    dff0:	|  '--|--------|----> tst.l 152(sp)
    dff4:	|     '--------|----- bne.w de1c <stackToFile+0x110>
    dff8:	|              |  ,-- bra.s dffc <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    dffa:	|              '--|-> nop
    }
    Close(fp);
    dffc:	|                 '-> move.l 136(sp),20(sp)
    e002:	|                     move.l 1c950 <DOSBase>,d0
    e008:	|                     movea.l d0,a6
    e00a:	|                     move.l 20(sp),d1
    e00e:	|                     jsr -36(a6)
    e012:	|                     move.l d0,16(sp)
    return TRUE;
    e016:	|                     moveq #1,d0
}
    e018:	'-------------------> movem.l (sp)+,d2-d3/a6
    e01c:	                      lea 144(sp),sp
    e020:	                      rts

0000e022 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e022:	       lea -20(sp),sp
    e026:	       move.l a6,-(sp)
    e028:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e02a:	       move.l 32(sp),-(sp)
    e02e:	       jsr 13ac6 <strlen>
    e034:	       addq.l #4,sp
    e036:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e03a:	       move.l 36(sp),-(sp)
    e03e:	       move.l 24(sp),-(sp)
    e042:	       jsr 8d0 <put2bytes>
    e048:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e04a:	       clr.l 24(sp)
    e04e:	   ,-- bra.s e0a4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e050:	,--|-> move.l 36(sp),16(sp)
    e056:	|  |   move.l 24(sp),d0
    e05a:	|  |   movea.l 32(sp),a0
    e05e:	|  |   adda.l d0,a0
    e060:	|  |   move.b (a0),d1
    e062:	|  |   move.b 1c9fa <encode1>,d0
    e068:	|  |   eor.b d1,d0
    e06a:	|  |   ext.w d0
    e06c:	|  |   movea.w d0,a0
    e06e:	|  |   move.l a0,12(sp)
    e072:	|  |   move.l 1c950 <DOSBase>,d0
    e078:	|  |   movea.l d0,a6
    e07a:	|  |   move.l 16(sp),d1
    e07e:	|  |   move.l 12(sp),d2
    e082:	|  |   jsr -312(a6)
    e086:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e08a:	|  |   move.b 1c9fa <encode1>,d0
    e090:	|  |   move.b d0,d1
    e092:	|  |   move.b 1c9fb <encode2>,d0
    e098:	|  |   add.b d1,d0
    e09a:	|  |   move.b d0,1c9fa <encode1>
	for (a = 0; a < len; a ++) {
    e0a0:	|  |   addq.l #1,24(sp)
    e0a4:	|  '-> move.l 24(sp),d0
    e0a8:	|      cmp.l 20(sp),d0
    e0ac:	'----- blt.s e050 <writeStringEncoded+0x2e>
	}
}
    e0ae:	       nop
    e0b0:	       nop
    e0b2:	       move.l (sp)+,d2
    e0b4:	       movea.l (sp)+,a6
    e0b6:	       lea 20(sp),sp
    e0ba:	       rts

0000e0bc <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e0bc:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e0be:	                   tst.l 8(sp)
    e0c2:	               ,-- bne.s e0c8 <failSecurityCheck+0xc>
    e0c4:	               |   moveq #1,d0
    e0c6:	,--------------|-- bra.s e146 <failSecurityCheck+0x8a>

	int a = 0;
    e0c8:	|              '-> clr.l (sp)

	while (fn[a]) {
    e0ca:	|     ,----------- bra.s e138 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e0cc:	|  ,--|----------> move.l (sp),d0
    e0ce:	|  |  |            movea.l 8(sp),a0
    e0d2:	|  |  |            adda.l d0,a0
    e0d4:	|  |  |            move.b (a0),d0
    e0d6:	|  |  |            ext.w d0
    e0d8:	|  |  |            movea.w d0,a0
    e0da:	|  |  |            moveq #124,d0
    e0dc:	|  |  |            cmp.l a0,d0
    e0de:	|  |  |     ,----- beq.s e120 <failSecurityCheck+0x64>
    e0e0:	|  |  |     |      moveq #124,d1
    e0e2:	|  |  |     |      cmp.l a0,d1
    e0e4:	|  |  |  ,--|----- blt.s e136 <failSecurityCheck+0x7a>
    e0e6:	|  |  |  |  |      moveq #92,d0
    e0e8:	|  |  |  |  |      cmp.l a0,d0
    e0ea:	|  |  |  |  +----- beq.s e120 <failSecurityCheck+0x64>
    e0ec:	|  |  |  |  |      moveq #92,d1
    e0ee:	|  |  |  |  |      cmp.l a0,d1
    e0f0:	|  |  |  +--|----- blt.s e136 <failSecurityCheck+0x7a>
    e0f2:	|  |  |  |  |      moveq #60,d0
    e0f4:	|  |  |  |  |      cmp.l a0,d0
    e0f6:	|  |  |  |  |  ,-- blt.s e116 <failSecurityCheck+0x5a>
    e0f8:	|  |  |  |  |  |   moveq #34,d1
    e0fa:	|  |  |  |  |  |   cmp.l a0,d1
    e0fc:	|  |  |  +--|--|-- bgt.s e136 <failSecurityCheck+0x7a>
    e0fe:	|  |  |  |  |  |   moveq #-34,d1
    e100:	|  |  |  |  |  |   add.l a0,d1
    e102:	|  |  |  |  |  |   move.l #83894529,d0
    e108:	|  |  |  |  |  |   lsr.l d1,d0
    e10a:	|  |  |  |  |  |   moveq #1,d1
    e10c:	|  |  |  |  |  |   and.l d1,d0
    e10e:	|  |  |  |  |  |   sne d0
    e110:	|  |  |  |  |  |   neg.b d0
    e112:	|  |  |  |  +--|-- bne.s e120 <failSecurityCheck+0x64>
    e114:	|  |  |  +--|--|-- bra.s e136 <failSecurityCheck+0x7a>
    e116:	|  |  |  |  |  '-> lea -62(a0),a0
    e11a:	|  |  |  |  |      moveq #1,d0
    e11c:	|  |  |  |  |      cmp.l a0,d0
    e11e:	|  |  |  +--|----- bcs.s e136 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e120:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e124:	|  |  |  |         pea 196c6 <PutChar+0x1b6a>
    e12a:	|  |  |  |         jsr 170ba <KPrintF>
    e130:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e132:	|  |  |  |         moveq #1,d0
    e134:	+--|--|--|-------- bra.s e146 <failSecurityCheck+0x8a>
		}
		a++;
    e136:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e138:	|  |  '----------> move.l (sp),d0
    e13a:	|  |               movea.l 8(sp),a0
    e13e:	|  |               adda.l d0,a0
    e140:	|  |               move.b (a0),d0
    e142:	|  '-------------- bne.s e0cc <failSecurityCheck+0x10>
	}
	return FALSE;
    e144:	|                  clr.w d0
}
    e146:	'----------------> addq.l #4,sp
    e148:	                   rts

0000e14a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e14a:	             lea -24(sp),sp
    e14e:	             move.l a6,-(sp)
    e150:	             move.l 40(sp),d0
    e154:	             move.w d0,d0
    e156:	             move.w d0,6(sp)
	int fileNum = -1;
    e15a:	             moveq #-1,d0
    e15c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e160:	             jsr 693c <killSpeechTimers>

	switch (numParams) {
    e166:	             moveq #2,d0
    e168:	             cmp.l 32(sp),d0
    e16c:	      ,----- beq.s e1b0 <sayCore+0x66>
    e16e:	      |      moveq #3,d0
    e170:	      |      cmp.l 32(sp),d0
    e174:	,-----|----- bne.w e292 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e178:	|     |      movea.l 36(sp),a0
    e17c:	|     |      move.l 24(a0),d0
    e180:	|     |      move.l d0,-(sp)
    e182:	|     |      pea 5 <_start+0x5>
    e186:	|     |      lea 20(sp),a0
    e18a:	|     |      move.l a0,-(sp)
    e18c:	|     |      jsr 145da <getValueType>
    e192:	|     |      lea 12(sp),sp
    e196:	|     |      tst.w d0
    e198:	|     |  ,-- bne.s e1a0 <sayCore+0x56>
    e19a:	|     |  |   moveq #1,d0
    e19c:	|  ,--|--|-- bra.w e2a2 <sayCore+0x158>
			trimStack (&fun -> stack);
    e1a0:	|  |  |  '-> moveq #24,d0
    e1a2:	|  |  |      add.l 36(sp),d0
    e1a6:	|  |  |      move.l d0,-(sp)
    e1a8:	|  |  |      jsr 14f5e <trimStack>
    e1ae:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e1b0:	|  |  '----> movea.l 36(sp),a0
    e1b4:	|  |         move.l 24(a0),d0
    e1b8:	|  |         move.l d0,-(sp)
    e1ba:	|  |         jsr 14bb0 <getTextFromAnyVar>
    e1c0:	|  |         addq.l #4,sp
    e1c2:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e1c6:	|  |     ,-- bne.s e1ce <sayCore+0x84>
    e1c8:	|  |     |   moveq #1,d0
    e1ca:	|  +-----|-- bra.w e2a2 <sayCore+0x158>
			trimStack (&fun -> stack);
    e1ce:	|  |     '-> moveq #24,d0
    e1d0:	|  |         add.l 36(sp),d0
    e1d4:	|  |         move.l d0,-(sp)
    e1d6:	|  |         jsr 14f5e <trimStack>
    e1dc:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e1de:	|  |         movea.l 36(sp),a0
    e1e2:	|  |         move.l 24(a0),d0
    e1e6:	|  |         move.l d0,-(sp)
    e1e8:	|  |         pea 7 <_start+0x7>
    e1ec:	|  |         lea 16(sp),a0
    e1f0:	|  |         move.l a0,-(sp)
    e1f2:	|  |         jsr 145da <getValueType>
    e1f8:	|  |         lea 12(sp),sp
    e1fc:	|  |         tst.w d0
    e1fe:	|  |     ,-- bne.s e206 <sayCore+0xbc>
    e200:	|  |     |   moveq #1,d0
    e202:	|  +-----|-- bra.w e2a2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e206:	|  |     '-> movea.l 36(sp),a0
    e20a:	|  |         move.l 24(a0),d0
    e20e:	|  |         move.l d0,-(sp)
    e210:	|  |         pea 7 <_start+0x7>
    e214:	|  |         lea 16(sp),a0
    e218:	|  |         move.l a0,-(sp)
    e21a:	|  |         jsr 145da <getValueType>
    e220:	|  |         lea 12(sp),sp
    e224:	|  |         tst.w d0
    e226:	|  |     ,-- bne.s e22c <sayCore+0xe2>
    e228:	|  |     |   moveq #1,d0
    e22a:	|  +-----|-- bra.s e2a2 <sayCore+0x158>
			trimStack (&fun -> stack);
    e22c:	|  |     '-> moveq #24,d0
    e22e:	|  |         add.l 36(sp),d0
    e232:	|  |         move.l d0,-(sp)
    e234:	|  |         jsr 14f5e <trimStack>
    e23a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e23c:	|  |         movea.w 6(sp),a0
    e240:	|  |         move.l 12(sp),d1
    e244:	|  |         move.l 8(sp),d0
    e248:	|  |         move.l a0,-(sp)
    e24a:	|  |         move.l d1,-(sp)
    e24c:	|  |         move.l d0,-(sp)
    e24e:	|  |         move.l 36(sp),-(sp)
    e252:	|  |         jsr 4000 <wrapSpeech>
    e258:	|  |         lea 16(sp),sp
    e25c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e260:	|  |         movea.l 36(sp),a0
    e264:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e26a:	|  |         movea.l 36(sp),a0
    e26e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e274:	|  |         move.l 24(sp),16(sp)
    e27a:	|  |         move.l 1c948 <SysBase>,d0
    e280:	|  |         movea.l d0,a6
    e282:	|  |         movea.l 16(sp),a1
    e286:	|  |         jsr -690(a6)
			newText = NULL;
    e28a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e28e:	|  |         moveq #0,d0
    e290:	|  +-------- bra.s e2a2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e292:	'--|-------> pea 1974c <PutChar+0x1bf0>
    e298:	   |         jsr 170ba <KPrintF>
    e29e:	   |         addq.l #4,sp
	return BR_ERROR;
    e2a0:	   |         moveq #1,d0
}
    e2a2:	   '-------> movea.l (sp)+,a6
    e2a4:	             lea 24(sp),sp
    e2a8:	             rts

0000e2aa <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e2aa:	pea 1 <_start+0x1>
    e2ae:	move.l 12(sp),-(sp)
    e2b2:	move.l 12(sp),-(sp)
    e2b6:	jsr e14a <sayCore>
    e2bc:	lea 12(sp),sp
}
    e2c0:	rts

0000e2c2 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e2c2:	clr.l -(sp)
    e2c4:	move.l 12(sp),-(sp)
    e2c8:	move.l 12(sp),-(sp)
    e2cc:	jsr e14a <sayCore>
    e2d2:	lea 12(sp),sp
}
    e2d6:	rts

0000e2d8 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e2d8:	jsr 14fa6 <freeze>
	freezeSubs (); 
    e2de:	jsr 5f2c <freezeSubs>
	fun -> freezerLevel = 0;
    e2e4:	movea.l 8(sp),a0
    e2e8:	clr.b 56(a0)
	return BR_CONTINUE;
    e2ec:	moveq #2,d0
}
    e2ee:	rts

0000e2f0 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e2f0:	jsr 151aa <unfreeze>
	unfreezeSubs (); 
    e2f6:	jsr 7396 <unfreezeSubs>
	return BR_CONTINUE;
    e2fc:	moveq #2,d0
}
    e2fe:	rts

0000e300 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e300:	jsr 15186 <howFrozen>
    e306:	move.l d0,d1
    e308:	moveq #28,d0
    e30a:	add.l 8(sp),d0
    e30e:	move.l d1,-(sp)
    e310:	pea 1 <_start+0x1>
    e314:	move.l d0,-(sp)
    e316:	jsr 14ecc <setVariable>
    e31c:	lea 12(sp),sp
	return BR_CONTINUE; 
    e320:	moveq #2,d0
}
    e322:	rts

0000e324 <builtIn_setCursor>:

builtIn(setCursor)
{
    e324:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e326:	movea.l 12(sp),a0
    e32a:	move.l 24(a0),d0
    e32e:	move.l d0,-(sp)
    e330:	jsr 14ab2 <getAnimationFromVar>
    e336:	addq.l #4,sp
    e338:	move.l d0,(sp)
	pickAnimCursor (aa);
    e33a:	move.l (sp),-(sp)
    e33c:	jsr d6c <pickAnimCursor>
    e342:	addq.l #4,sp
	trimStack (&fun -> stack);
    e344:	moveq #24,d0
    e346:	add.l 12(sp),d0
    e34a:	move.l d0,-(sp)
    e34c:	jsr 14f5e <trimStack>
    e352:	addq.l #4,sp
	return BR_CONTINUE;
    e354:	moveq #2,d0
}
    e356:	addq.l #4,sp
    e358:	rts

0000e35a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e35a:	move.l 1c904 <input+0xa>,d1
    e360:	move.l 1c9fe <cameraX>,d0
    e366:	add.l d0,d1
    e368:	moveq #28,d0
    e36a:	add.l 8(sp),d0
    e36e:	move.l d1,-(sp)
    e370:	pea 1 <_start+0x1>
    e374:	move.l d0,-(sp)
    e376:	jsr 14ecc <setVariable>
    e37c:	lea 12(sp),sp
	return BR_CONTINUE;
    e380:	moveq #2,d0
}
    e382:	rts

0000e384 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e384:	move.l 1c908 <input+0xe>,d1
    e38a:	move.l 1ca02 <cameraY>,d0
    e390:	add.l d0,d1
    e392:	moveq #28,d0
    e394:	add.l 8(sp),d0
    e398:	move.l d1,-(sp)
    e39a:	pea 1 <_start+0x1>
    e39e:	move.l d0,-(sp)
    e3a0:	jsr 14ecc <setVariable>
    e3a6:	lea 12(sp),sp
	return BR_CONTINUE;
    e3aa:	moveq #2,d0
}
    e3ac:	rts

0000e3ae <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e3ae:	move.l 1c904 <input+0xa>,d0
    e3b4:	move.l d0,-(sp)
    e3b6:	jsr 174ec <__floatsisf>
    e3bc:	addq.l #4,sp
    e3be:	move.l d0,d1
    e3c0:	move.l 1c2da <cameraZoom>,d0
    e3c6:	move.l d0,-(sp)
    e3c8:	move.l d1,-(sp)
    e3ca:	jsr 1759e <__mulsf3>
    e3d0:	addq.l #8,sp
    e3d2:	move.l d0,-(sp)
    e3d4:	jsr 17484 <__fixsfsi>
    e3da:	addq.l #4,sp
    e3dc:	move.l d0,d1
    e3de:	moveq #28,d0
    e3e0:	add.l 8(sp),d0
    e3e4:	move.l d1,-(sp)
    e3e6:	pea 1 <_start+0x1>
    e3ea:	move.l d0,-(sp)
    e3ec:	jsr 14ecc <setVariable>
    e3f2:	lea 12(sp),sp
	return BR_CONTINUE;
    e3f6:	moveq #2,d0
}
    e3f8:	rts

0000e3fa <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e3fa:	move.l 1c908 <input+0xe>,d0
    e400:	move.l d0,-(sp)
    e402:	jsr 174ec <__floatsisf>
    e408:	addq.l #4,sp
    e40a:	move.l d0,d1
    e40c:	move.l 1c2da <cameraZoom>,d0
    e412:	move.l d0,-(sp)
    e414:	move.l d1,-(sp)
    e416:	jsr 1759e <__mulsf3>
    e41c:	addq.l #8,sp
    e41e:	move.l d0,-(sp)
    e420:	jsr 17484 <__fixsfsi>
    e426:	addq.l #4,sp
    e428:	move.l d0,d1
    e42a:	moveq #28,d0
    e42c:	add.l 8(sp),d0
    e430:	move.l d1,-(sp)
    e432:	pea 1 <_start+0x1>
    e436:	move.l d0,-(sp)
    e438:	jsr 14ecc <setVariable>
    e43e:	lea 12(sp),sp
	return BR_CONTINUE;
    e442:	moveq #2,d0
}
    e444:	rts

0000e446 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e446:	jsr 83c8 <statusBarText>
    e44c:	move.l d0,d1
    e44e:	moveq #28,d0
    e450:	add.l 8(sp),d0
    e454:	move.l d1,-(sp)
    e456:	move.l d0,-(sp)
    e458:	jsr 147fc <makeTextVar>
    e45e:	addq.l #8,sp
	return BR_CONTINUE;
    e460:	moveq #2,d0
}
    e462:	rts

0000e464 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e464:	       lea -20(sp),sp
    e468:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e46a:	       movea.l 32(sp),a0
    e46e:	       move.l 24(a0),d0
    e472:	       move.l d0,-(sp)
    e474:	       jsr 14bb0 <getTextFromAnyVar>
    e47a:	       addq.l #4,sp
    e47c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e480:	   ,-- bne.s e488 <builtIn_getMatchingFiles+0x24>
    e482:	   |   moveq #1,d0
    e484:	,--|-- bra.w e54a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e488:	|  '-> moveq #24,d0
    e48a:	|      add.l 32(sp),d0
    e48e:	|      move.l d0,-(sp)
    e490:	|      jsr 14f5e <trimStack>
    e496:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e498:	|      moveq #28,d0
    e49a:	|      add.l 32(sp),d0
    e49e:	|      move.l d0,-(sp)
    e4a0:	|      jsr 14828 <unlinkVar>
    e4a6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e4a8:	|      movea.l 32(sp),a0
    e4ac:	|      moveq #6,d0
    e4ae:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e4b2:	|      moveq #12,d0
    e4b4:	|      move.l d0,16(sp)
    e4b8:	|      clr.l 12(sp)
    e4bc:	|      move.l 1c948 <SysBase>,d0
    e4c2:	|      movea.l d0,a6
    e4c4:	|      move.l 16(sp),d0
    e4c8:	|      move.l 12(sp),d1
    e4cc:	|      jsr -684(a6)
    e4d0:	|      move.l d0,8(sp)
    e4d4:	|      move.l 8(sp),d0
    e4d8:	|      movea.l 32(sp),a0
    e4dc:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e4e0:	|      moveq #32,d0
    e4e2:	|      add.l 32(sp),d0
    e4e6:	|  ,-- bne.s e4ec <builtIn_getMatchingFiles+0x88>
    e4e8:	|  |   moveq #1,d0
    e4ea:	+--|-- bra.s e54a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e4ec:	|  '-> movea.l 32(sp),a0
    e4f0:	|      movea.l 32(a0),a0
    e4f4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e4f6:	|      movea.l 32(sp),a0
    e4fa:	|      movea.l 32(a0),a0
    e4fe:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e502:	|      movea.l 32(sp),a0
    e506:	|      movea.l 32(a0),a0
    e50a:	|      moveq #1,d0
    e50c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e510:	|      movea.l 32(sp),a0
    e514:	|      move.l 32(a0),d0
    e518:	|      move.l 20(sp),-(sp)
    e51c:	|      move.l d0,-(sp)
    e51e:	|      jsr 14396 <getSavedGamesStack>
    e524:	|      addq.l #8,sp
    e526:	|      tst.w d0
    e528:	|  ,-- bne.s e52e <builtIn_getMatchingFiles+0xca>
    e52a:	|  |   moveq #1,d0
    e52c:	+--|-- bra.s e54a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e52e:	|  '-> move.l 20(sp),4(sp)
    e534:	|      move.l 1c948 <SysBase>,d0
    e53a:	|      movea.l d0,a6
    e53c:	|      movea.l 4(sp),a1
    e540:	|      jsr -690(a6)
	newText = NULL;
    e544:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e548:	|      moveq #2,d0
}
    e54a:	'----> movea.l (sp)+,a6
    e54c:	       lea 20(sp),sp
    e550:	       rts

0000e552 <builtIn_saveGame>:

builtIn(saveGame)
{
    e552:	       lea -12(sp),sp
    e556:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e558:	       movea.l 24(sp),a0
    e55c:	       move.l 24(a0),d0
    e560:	       move.l d0,-(sp)
    e562:	       jsr 14bb0 <getTextFromAnyVar>
    e568:	       addq.l #4,sp
    e56a:	       move.l d0,1c914 <loadNow>
    trimStack(&fun->stack);
    e570:	       moveq #24,d0
    e572:	       add.l 24(sp),d0
    e576:	       move.l d0,-(sp)
    e578:	       jsr 14f5e <trimStack>
    e57e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e580:	       move.l 1c914 <loadNow>,d0
    e586:	       move.l d0,-(sp)
    e588:	       jsr 2fe <encodeFilename>
    e58e:	       addq.l #4,sp
    e590:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e594:	       move.l 1c914 <loadNow>,8(sp)
    e59c:	       move.l 1c948 <SysBase>,d0
    e5a2:	       movea.l d0,a6
    e5a4:	       movea.l 8(sp),a1
    e5a8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e5ac:	       move.l 12(sp),-(sp)
    e5b0:	       jsr e0bc <failSecurityCheck>
    e5b6:	       addq.l #4,sp
    e5b8:	       tst.w d0
    e5ba:	   ,-- beq.s e5c0 <builtIn_saveGame+0x6e>
    e5bc:	   |   moveq #1,d0
    e5be:	,--|-- bra.s e610 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e5c0:	|  '-> move.l 12(sp),-(sp)
    e5c4:	|      pea 1977a <PutChar+0x1c1e>
    e5ca:	|      jsr 13b06 <joinStrings>
    e5d0:	|      addq.l #8,sp
    e5d2:	|      move.l d0,1c914 <loadNow>
    FreeVec(aaaaa);
    e5d8:	|      move.l 12(sp),4(sp)
    e5de:	|      move.l 1c948 <SysBase>,d0
    e5e4:	|      movea.l d0,a6
    e5e6:	|      movea.l 4(sp),a1
    e5ea:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e5ee:	|      moveq #28,d0
    e5f0:	|      add.l 24(sp),d0
    e5f4:	|      clr.l -(sp)
    e5f6:	|      pea 1 <_start+0x1>
    e5fa:	|      move.l d0,-(sp)
    e5fc:	|      jsr 14ecc <setVariable>
    e602:	|      lea 12(sp),sp
    saverFunc = fun;
    e606:	|      move.l 24(sp),1ca0e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e60e:	|      moveq #0,d0
}
    e610:	'----> movea.l (sp)+,a6
    e612:	       lea 12(sp),sp
    e616:	       rts

0000e618 <builtIn_fileExists>:

builtIn(fileExists)
{
    e618:	       lea -36(sp),sp
    e61c:	       move.l a6,-(sp)
    e61e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e620:	       movea.l 52(sp),a0
    e624:	       move.l 24(a0),d0
    e628:	       move.l d0,-(sp)
    e62a:	       jsr 14bb0 <getTextFromAnyVar>
    e630:	       addq.l #4,sp
    e632:	       move.l d0,1c914 <loadNow>
    trimStack(&fun->stack);
    e638:	       moveq #24,d0
    e63a:	       add.l 52(sp),d0
    e63e:	       move.l d0,-(sp)
    e640:	       jsr 14f5e <trimStack>
    e646:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e648:	       move.l 1c914 <loadNow>,d0
    e64e:	       move.l d0,-(sp)
    e650:	       jsr 2fe <encodeFilename>
    e656:	       addq.l #4,sp
    e658:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e65c:	       move.l 1c914 <loadNow>,36(sp)
    e664:	       move.l 1c948 <SysBase>,d0
    e66a:	       movea.l d0,a6
    e66c:	       movea.l 36(sp),a1
    e670:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e674:	       move.l 40(sp),-(sp)
    e678:	       jsr e0bc <failSecurityCheck>
    e67e:	       addq.l #4,sp
    e680:	       tst.w d0
    e682:	   ,-- beq.s e68a <builtIn_fileExists+0x72>
    e684:	   |   moveq #1,d0
    e686:	,--|-- bra.w e72a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e68a:	|  '-> move.l 40(sp),32(sp)
    e690:	|      move.l #1005,28(sp)
    e698:	|      move.l 1c950 <DOSBase>,d0
    e69e:	|      movea.l d0,a6
    e6a0:	|      move.l 32(sp),d1
    e6a4:	|      move.l 28(sp),d2
    e6a8:	|      jsr -30(a6)
    e6ac:	|      move.l d0,24(sp)
    e6b0:	|      move.l 24(sp),d0
    e6b4:	|      move.l d0,20(sp)
    if (!fp) {        
    e6b8:	|  ,-- bne.s e6c8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e6ba:	|  |   pea 1977c <PutChar+0x1c20>
    e6c0:	|  |   jsr 170ba <KPrintF>
    e6c6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e6c8:	|  '-> tst.l 20(sp)
    e6cc:	|      sne d0
    e6ce:	|      neg.b d0
    e6d0:	|      moveq #0,d1
    e6d2:	|      move.b d0,d1
    e6d4:	|      moveq #28,d0
    e6d6:	|      add.l 52(sp),d0
    e6da:	|      move.l d1,-(sp)
    e6dc:	|      pea 1 <_start+0x1>
    e6e0:	|      move.l d0,-(sp)
    e6e2:	|      jsr 14ecc <setVariable>
    e6e8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e6ec:	|      tst.l 20(sp)
    e6f0:	|  ,-- beq.s e70c <builtIn_fileExists+0xf4>
    e6f2:	|  |   move.l 20(sp),16(sp)
    e6f8:	|  |   move.l 1c950 <DOSBase>,d0
    e6fe:	|  |   movea.l d0,a6
    e700:	|  |   move.l 16(sp),d1
    e704:	|  |   jsr -36(a6)
    e708:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e70c:	|  '-> move.l 40(sp),8(sp)
    e712:	|      move.l 1c948 <SysBase>,d0
    e718:	|      movea.l d0,a6
    e71a:	|      movea.l 8(sp),a1
    e71e:	|      jsr -690(a6)
    loadNow = NULL;
    e722:	|      clr.l 1c914 <loadNow>
    return BR_CONTINUE;
    e728:	|      moveq #2,d0
}
    e72a:	'----> move.l (sp)+,d2
    e72c:	       movea.l (sp)+,a6
    e72e:	       lea 36(sp),sp
    e732:	       rts

0000e734 <builtIn_loadGame>:

builtIn(loadGame)
{
    e734:	       lea -36(sp),sp
    e738:	       move.l a6,-(sp)
    e73a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e73c:	       movea.l 52(sp),a0
    e740:	       move.l 24(a0),d0
    e744:	       move.l d0,-(sp)
    e746:	       jsr 14bb0 <getTextFromAnyVar>
    e74c:	       addq.l #4,sp
    e74e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e752:	       moveq #24,d0
    e754:	       add.l 52(sp),d0
    e758:	       move.l d0,-(sp)
    e75a:	       jsr 14f5e <trimStack>
    e760:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e762:	       move.l 40(sp),-(sp)
    e766:	       jsr 2fe <encodeFilename>
    e76c:	       addq.l #4,sp
    e76e:	       move.l d0,1c914 <loadNow>
    FreeVec(aaaaa);
    e774:	       move.l 40(sp),36(sp)
    e77a:	       move.l 1c948 <SysBase>,d0
    e780:	       movea.l d0,a6
    e782:	       movea.l 36(sp),a1
    e786:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e78a:	       move.l 1c914 <loadNow>,d0
    e790:	       move.l d0,-(sp)
    e792:	       jsr e0bc <failSecurityCheck>
    e798:	       addq.l #4,sp
    e79a:	       tst.w d0
    e79c:	   ,-- beq.s e7a2 <builtIn_loadGame+0x6e>
    e79e:	   |   moveq #1,d0
    e7a0:	,--|-- bra.s e812 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e7a2:	|  '-> move.l 1c914 <loadNow>,32(sp)
    e7aa:	|      move.l #1005,28(sp)
    e7b2:	|      move.l 1c950 <DOSBase>,d0
    e7b8:	|      movea.l d0,a6
    e7ba:	|      move.l 32(sp),d1
    e7be:	|      move.l 28(sp),d2
    e7c2:	|      jsr -30(a6)
    e7c6:	|      move.l d0,24(sp)
    e7ca:	|      move.l 24(sp),d0
    e7ce:	|      move.l d0,20(sp)
    if (fp) {
    e7d2:	|  ,-- beq.s e7f2 <builtIn_loadGame+0xbe>
        Close(fp);
    e7d4:	|  |   move.l 20(sp),12(sp)
    e7da:	|  |   move.l 1c950 <DOSBase>,d0
    e7e0:	|  |   movea.l d0,a6
    e7e2:	|  |   move.l 12(sp),d1
    e7e6:	|  |   jsr -36(a6)
    e7ea:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e7ee:	|  |   moveq #0,d0
    e7f0:	+--|-- bra.s e812 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e7f2:	|  '-> move.l 1c914 <loadNow>,16(sp)
    e7fa:	|      move.l 1c948 <SysBase>,d0
    e800:	|      movea.l d0,a6
    e802:	|      movea.l 16(sp),a1
    e806:	|      jsr -690(a6)
    loadNow = NULL;
    e80a:	|      clr.l 1c914 <loadNow>
    return BR_CONTINUE;
    e810:	|      moveq #2,d0
}
    e812:	'----> move.l (sp)+,d2
    e814:	       movea.l (sp)+,a6
    e816:	       lea 36(sp),sp
    e81a:	       rts

0000e81c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e81c:	move.l 1c9e4 <sceneHeight>,d0
    e822:	move.l d0,d1
    e824:	move.l 1c9e0 <sceneWidth>,d0
    e82a:	move.l d1,-(sp)
    e82c:	move.l d0,-(sp)
    e82e:	clr.l -(sp)
    e830:	clr.l -(sp)
    e832:	jsr cfa6 <blankScreen>
    e838:	lea 16(sp),sp
	return BR_CONTINUE;
    e83c:	moveq #2,d0
}
    e83e:	rts

0000e840 <builtIn_blankArea>:

builtIn(blankArea)
{
    e840:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e844:	       movea.l 24(sp),a0
    e848:	       move.l 24(a0),d0
    e84c:	       move.l d0,-(sp)
    e84e:	       pea 1 <_start+0x1>
    e852:	       lea 8(sp),a0
    e856:	       move.l a0,-(sp)
    e858:	       jsr 145da <getValueType>
    e85e:	       lea 12(sp),sp
    e862:	       tst.w d0
    e864:	   ,-- bne.s e86c <builtIn_blankArea+0x2c>
    e866:	   |   moveq #1,d0
    e868:	,--|-- bra.w e942 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e86c:	|  '-> moveq #24,d0
    e86e:	|      add.l 24(sp),d0
    e872:	|      move.l d0,-(sp)
    e874:	|      jsr 14f5e <trimStack>
    e87a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e87c:	|      movea.l 24(sp),a0
    e880:	|      move.l 24(a0),d0
    e884:	|      move.l d0,-(sp)
    e886:	|      pea 1 <_start+0x1>
    e88a:	|      lea 12(sp),a0
    e88e:	|      move.l a0,-(sp)
    e890:	|      jsr 145da <getValueType>
    e896:	|      lea 12(sp),sp
    e89a:	|      tst.w d0
    e89c:	|  ,-- bne.s e8a4 <builtIn_blankArea+0x64>
    e89e:	|  |   moveq #1,d0
    e8a0:	+--|-- bra.w e942 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e8a4:	|  '-> moveq #24,d0
    e8a6:	|      add.l 24(sp),d0
    e8aa:	|      move.l d0,-(sp)
    e8ac:	|      jsr 14f5e <trimStack>
    e8b2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e8b4:	|      movea.l 24(sp),a0
    e8b8:	|      move.l 24(a0),d0
    e8bc:	|      move.l d0,-(sp)
    e8be:	|      pea 1 <_start+0x1>
    e8c2:	|      moveq #16,d0
    e8c4:	|      add.l sp,d0
    e8c6:	|      move.l d0,-(sp)
    e8c8:	|      jsr 145da <getValueType>
    e8ce:	|      lea 12(sp),sp
    e8d2:	|      tst.w d0
    e8d4:	|  ,-- bne.s e8da <builtIn_blankArea+0x9a>
    e8d6:	|  |   moveq #1,d0
    e8d8:	+--|-- bra.s e942 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e8da:	|  '-> moveq #24,d0
    e8dc:	|      add.l 24(sp),d0
    e8e0:	|      move.l d0,-(sp)
    e8e2:	|      jsr 14f5e <trimStack>
    e8e8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e8ea:	|      movea.l 24(sp),a0
    e8ee:	|      move.l 24(a0),d0
    e8f2:	|      move.l d0,-(sp)
    e8f4:	|      pea 1 <_start+0x1>
    e8f8:	|      moveq #20,d0
    e8fa:	|      add.l sp,d0
    e8fc:	|      move.l d0,-(sp)
    e8fe:	|      jsr 145da <getValueType>
    e904:	|      lea 12(sp),sp
    e908:	|      tst.w d0
    e90a:	|  ,-- bne.s e910 <builtIn_blankArea+0xd0>
    e90c:	|  |   moveq #1,d0
    e90e:	+--|-- bra.s e942 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e910:	|  '-> moveq #24,d0
    e912:	|      add.l 24(sp),d0
    e916:	|      move.l d0,-(sp)
    e918:	|      jsr 14f5e <trimStack>
    e91e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e920:	|      movea.l (sp),a1
    e922:	|      movea.l 4(sp),a0
    e926:	|      move.l 8(sp),d1
    e92a:	|      move.l 12(sp),d0
    e92e:	|      move.l a1,-(sp)
    e930:	|      move.l a0,-(sp)
    e932:	|      move.l d1,-(sp)
    e934:	|      move.l d0,-(sp)
    e936:	|      jsr cfa6 <blankScreen>
    e93c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e940:	|      moveq #2,d0
}
    e942:	'----> lea 16(sp),sp
    e946:	       rts

0000e948 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e948:	jsr cfc4 <darkScreen>
	return BR_CONTINUE;
    e94e:	moveq #2,d0
}
    e950:	rts

0000e952 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e952:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e956:	       movea.l 20(sp),a0
    e95a:	       move.l 24(a0),d0
    e95e:	       move.l d0,-(sp)
    e960:	       pea 1 <_start+0x1>
    e964:	       lea 8(sp),a0
    e968:	       move.l a0,-(sp)
    e96a:	       jsr 145da <getValueType>
    e970:	       lea 12(sp),sp
    e974:	       tst.w d0
    e976:	   ,-- bne.s e97e <builtIn_addOverlay+0x2c>
    e978:	   |   moveq #1,d0
    e97a:	,--|-- bra.w ea16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e97e:	|  '-> moveq #24,d0
    e980:	|      add.l 20(sp),d0
    e984:	|      move.l d0,-(sp)
    e986:	|      jsr 14f5e <trimStack>
    e98c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e98e:	|      movea.l 20(sp),a0
    e992:	|      move.l 24(a0),d0
    e996:	|      move.l d0,-(sp)
    e998:	|      pea 1 <_start+0x1>
    e99c:	|      moveq #12,d0
    e99e:	|      add.l sp,d0
    e9a0:	|      move.l d0,-(sp)
    e9a2:	|      jsr 145da <getValueType>
    e9a8:	|      lea 12(sp),sp
    e9ac:	|      tst.w d0
    e9ae:	|  ,-- bne.s e9b4 <builtIn_addOverlay+0x62>
    e9b0:	|  |   moveq #1,d0
    e9b2:	+--|-- bra.s ea16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e9b4:	|  '-> moveq #24,d0
    e9b6:	|      add.l 20(sp),d0
    e9ba:	|      move.l d0,-(sp)
    e9bc:	|      jsr 14f5e <trimStack>
    e9c2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e9c4:	|      movea.l 20(sp),a0
    e9c8:	|      move.l 24(a0),d0
    e9cc:	|      move.l d0,-(sp)
    e9ce:	|      pea 5 <_start+0x5>
    e9d2:	|      moveq #16,d0
    e9d4:	|      add.l sp,d0
    e9d6:	|      move.l d0,-(sp)
    e9d8:	|      jsr 145da <getValueType>
    e9de:	|      lea 12(sp),sp
    e9e2:	|      tst.w d0
    e9e4:	|  ,-- bne.s e9ea <builtIn_addOverlay+0x98>
    e9e6:	|  |   moveq #1,d0
    e9e8:	+--|-- bra.s ea16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e9ea:	|  '-> moveq #24,d0
    e9ec:	|      add.l 20(sp),d0
    e9f0:	|      move.l d0,-(sp)
    e9f2:	|      jsr 14f5e <trimStack>
    e9f8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e9fa:	|      movea.l (sp),a0
    e9fc:	|      move.l 4(sp),d1
    ea00:	|      move.l 8(sp),d0
    ea04:	|      move.l a0,-(sp)
    ea06:	|      move.l d1,-(sp)
    ea08:	|      move.l d0,-(sp)
    ea0a:	|      jsr d0e2 <loadBackDrop>
    ea10:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea14:	|      moveq #2,d0
}
    ea16:	'----> lea 12(sp),sp
    ea1a:	       rts

0000ea1c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ea1c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea20:	       movea.l 20(sp),a0
    ea24:	       move.l 24(a0),d0
    ea28:	       move.l d0,-(sp)
    ea2a:	       pea 1 <_start+0x1>
    ea2e:	       lea 8(sp),a0
    ea32:	       move.l a0,-(sp)
    ea34:	       jsr 145da <getValueType>
    ea3a:	       lea 12(sp),sp
    ea3e:	       tst.w d0
    ea40:	   ,-- bne.s ea48 <builtIn_mixOverlay+0x2c>
    ea42:	   |   moveq #1,d0
    ea44:	,--|-- bra.w eae0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ea48:	|  '-> moveq #24,d0
    ea4a:	|      add.l 20(sp),d0
    ea4e:	|      move.l d0,-(sp)
    ea50:	|      jsr 14f5e <trimStack>
    ea56:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea58:	|      movea.l 20(sp),a0
    ea5c:	|      move.l 24(a0),d0
    ea60:	|      move.l d0,-(sp)
    ea62:	|      pea 1 <_start+0x1>
    ea66:	|      moveq #12,d0
    ea68:	|      add.l sp,d0
    ea6a:	|      move.l d0,-(sp)
    ea6c:	|      jsr 145da <getValueType>
    ea72:	|      lea 12(sp),sp
    ea76:	|      tst.w d0
    ea78:	|  ,-- bne.s ea7e <builtIn_mixOverlay+0x62>
    ea7a:	|  |   moveq #1,d0
    ea7c:	+--|-- bra.s eae0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ea7e:	|  '-> moveq #24,d0
    ea80:	|      add.l 20(sp),d0
    ea84:	|      move.l d0,-(sp)
    ea86:	|      jsr 14f5e <trimStack>
    ea8c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea8e:	|      movea.l 20(sp),a0
    ea92:	|      move.l 24(a0),d0
    ea96:	|      move.l d0,-(sp)
    ea98:	|      pea 5 <_start+0x5>
    ea9c:	|      moveq #16,d0
    ea9e:	|      add.l sp,d0
    eaa0:	|      move.l d0,-(sp)
    eaa2:	|      jsr 145da <getValueType>
    eaa8:	|      lea 12(sp),sp
    eaac:	|      tst.w d0
    eaae:	|  ,-- bne.s eab4 <builtIn_mixOverlay+0x98>
    eab0:	|  |   moveq #1,d0
    eab2:	+--|-- bra.s eae0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eab4:	|  '-> moveq #24,d0
    eab6:	|      add.l 20(sp),d0
    eaba:	|      move.l d0,-(sp)
    eabc:	|      jsr 14f5e <trimStack>
    eac2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eac4:	|      movea.l (sp),a0
    eac6:	|      move.l 4(sp),d1
    eaca:	|      move.l 8(sp),d0
    eace:	|      move.l a0,-(sp)
    ead0:	|      move.l d1,-(sp)
    ead2:	|      move.l d0,-(sp)
    ead4:	|      jsr d158 <mixBackDrop>
    eada:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eade:	|      moveq #2,d0
}
    eae0:	'----> lea 12(sp),sp
    eae4:	       rts

0000eae6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    eae6:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eaea:	       movea.l 20(sp),a0
    eaee:	       move.l 24(a0),d0
    eaf2:	       move.l d0,-(sp)
    eaf4:	       pea 1 <_start+0x1>
    eaf8:	       lea 8(sp),a0
    eafc:	       move.l a0,-(sp)
    eafe:	       jsr 145da <getValueType>
    eb04:	       lea 12(sp),sp
    eb08:	       tst.w d0
    eb0a:	   ,-- bne.s eb12 <builtIn_pasteImage+0x2c>
    eb0c:	   |   moveq #1,d0
    eb0e:	,--|-- bra.w eba2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eb12:	|  '-> moveq #24,d0
    eb14:	|      add.l 20(sp),d0
    eb18:	|      move.l d0,-(sp)
    eb1a:	|      jsr 14f5e <trimStack>
    eb20:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb22:	|      movea.l 20(sp),a0
    eb26:	|      move.l 24(a0),d0
    eb2a:	|      move.l d0,-(sp)
    eb2c:	|      pea 1 <_start+0x1>
    eb30:	|      moveq #12,d0
    eb32:	|      add.l sp,d0
    eb34:	|      move.l d0,-(sp)
    eb36:	|      jsr 145da <getValueType>
    eb3c:	|      lea 12(sp),sp
    eb40:	|      tst.w d0
    eb42:	|  ,-- bne.s eb48 <builtIn_pasteImage+0x62>
    eb44:	|  |   moveq #1,d0
    eb46:	+--|-- bra.s eba2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eb48:	|  '-> moveq #24,d0
    eb4a:	|      add.l 20(sp),d0
    eb4e:	|      move.l d0,-(sp)
    eb50:	|      jsr 14f5e <trimStack>
    eb56:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eb58:	|      movea.l 20(sp),a0
    eb5c:	|      move.l 24(a0),d0
    eb60:	|      move.l d0,-(sp)
    eb62:	|      jsr 14ab2 <getAnimationFromVar>
    eb68:	|      addq.l #4,sp
    eb6a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    eb6e:	|      moveq #24,d0
    eb70:	|      add.l 20(sp),d0
    eb74:	|      move.l d0,-(sp)
    eb76:	|      jsr 14f5e <trimStack>
    eb7c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    eb7e:	|      tst.l 8(sp)
    eb82:	|  ,-- bne.s eb88 <builtIn_pasteImage+0xa2>
    eb84:	|  |   moveq #2,d0
    eb86:	+--|-- bra.s eba2 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    eb88:	|  '-> move.l (sp),d1
    eb8a:	|      move.l 4(sp),d0
    eb8e:	|      move.l 8(sp),-(sp)
    eb92:	|      move.l d1,-(sp)
    eb94:	|      move.l d0,-(sp)
    eb96:	|      jsr d94 <pasteCursor>
    eb9c:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    eba0:	|      moveq #2,d0
}
    eba2:	'----> lea 12(sp),sp
    eba6:	       rts

0000eba8 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    eba8:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebaa:	       movea.l 16(sp),a0
    ebae:	       move.l 24(a0),d0
    ebb2:	       move.l d0,-(sp)
    ebb4:	       pea 1 <_start+0x1>
    ebb8:	       move.l sp,d0
    ebba:	       addq.l #8,d0
    ebbc:	       move.l d0,-(sp)
    ebbe:	       jsr 145da <getValueType>
    ebc4:	       lea 12(sp),sp
    ebc8:	       tst.w d0
    ebca:	   ,-- bne.s ebd2 <builtIn_setSceneDimensions+0x2a>
    ebcc:	   |   moveq #1,d0
    ebce:	,--|-- bra.w ec5a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ebd2:	|  '-> moveq #24,d0
    ebd4:	|      add.l 16(sp),d0
    ebd8:	|      move.l d0,-(sp)
    ebda:	|      jsr 14f5e <trimStack>
    ebe0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebe2:	|      movea.l 16(sp),a0
    ebe6:	|      move.l 24(a0),d0
    ebea:	|      move.l d0,-(sp)
    ebec:	|      pea 1 <_start+0x1>
    ebf0:	|      moveq #12,d0
    ebf2:	|      add.l sp,d0
    ebf4:	|      move.l d0,-(sp)
    ebf6:	|      jsr 145da <getValueType>
    ebfc:	|      lea 12(sp),sp
    ec00:	|      tst.w d0
    ec02:	|  ,-- bne.s ec08 <builtIn_setSceneDimensions+0x60>
    ec04:	|  |   moveq #1,d0
    ec06:	+--|-- bra.s ec5a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ec08:	|  '-> moveq #24,d0
    ec0a:	|      add.l 16(sp),d0
    ec0e:	|      move.l d0,-(sp)
    ec10:	|      jsr 14f5e <trimStack>
    ec16:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ec18:	|      move.l (sp),d1
    ec1a:	|      move.l 4(sp),d0
    ec1e:	|      move.l d1,-(sp)
    ec20:	|      move.l d0,-(sp)
    ec22:	|      jsr d1ae <resizeBackdrop>
    ec28:	|      addq.l #8,sp
    ec2a:	|      tst.w d0
    ec2c:	|  ,-- beq.s ec4a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ec2e:	|  |   move.l (sp),d1
    ec30:	|  |   move.l 4(sp),d0
    ec34:	|  |   move.l d1,-(sp)
    ec36:	|  |   move.l d0,-(sp)
    ec38:	|  |   clr.l -(sp)
    ec3a:	|  |   clr.l -(sp)
    ec3c:	|  |   jsr cfa6 <blankScreen>
    ec42:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ec46:	|  |   moveq #2,d0
    ec48:	+--|-- bra.s ec5a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ec4a:	|  '-> pea 1979a <PutChar+0x1c3e>
    ec50:	|      jsr 170ba <KPrintF>
    ec56:	|      addq.l #4,sp
	return BR_ERROR;
    ec58:	|      moveq #1,d0
}
    ec5a:	'----> addq.l #8,sp
    ec5c:	       rts

0000ec5e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ec5e:	          move.l d3,-(sp)
    ec60:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec62:	          movea.l 16(sp),a0
    ec66:	          move.l 24(a0),d0
    ec6a:	          move.l d0,-(sp)
    ec6c:	          pea 1 <_start+0x1>
    ec70:	          pea 1ca02 <cameraY>
    ec76:	          jsr 145da <getValueType>
    ec7c:	          lea 12(sp),sp
    ec80:	          tst.w d0
    ec82:	      ,-- bne.s ec8a <builtIn_aimCamera+0x2c>
    ec84:	      |   moveq #1,d0
    ec86:	,-----|-- bra.w ef0c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ec8a:	|     '-> moveq #24,d0
    ec8c:	|         add.l 16(sp),d0
    ec90:	|         move.l d0,-(sp)
    ec92:	|         jsr 14f5e <trimStack>
    ec98:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec9a:	|         movea.l 16(sp),a0
    ec9e:	|         move.l 24(a0),d0
    eca2:	|         move.l d0,-(sp)
    eca4:	|         pea 1 <_start+0x1>
    eca8:	|         pea 1c9fe <cameraX>
    ecae:	|         jsr 145da <getValueType>
    ecb4:	|         lea 12(sp),sp
    ecb8:	|         tst.w d0
    ecba:	|     ,-- bne.s ecc2 <builtIn_aimCamera+0x64>
    ecbc:	|     |   moveq #1,d0
    ecbe:	+-----|-- bra.w ef0c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ecc2:	|     '-> moveq #24,d0
    ecc4:	|         add.l 16(sp),d0
    ecc8:	|         move.l d0,-(sp)
    ecca:	|         jsr 14f5e <trimStack>
    ecd0:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ecd2:	|         move.l 1c9fe <cameraX>,d0
    ecd8:	|         move.l d0,-(sp)
    ecda:	|         jsr 174ec <__floatsisf>
    ece0:	|         addq.l #4,sp
    ece2:	|         move.l d0,d2
    ece4:	|         move.l 1c89c <winWidth>,d0
    ecea:	|         lsr.l #1,d0
    ecec:	|         move.l d0,-(sp)
    ecee:	|         jsr 17514 <__floatunsisf>
    ecf4:	|         addq.l #4,sp
    ecf6:	|         move.l d0,d1
    ecf8:	|         move.l 1c2da <cameraZoom>,d0
    ecfe:	|         move.l d0,-(sp)
    ed00:	|         move.l d1,-(sp)
    ed02:	|         jsr 173a2 <__divsf3>
    ed08:	|         addq.l #8,sp
    ed0a:	|         move.l d0,-(sp)
    ed0c:	|         move.l d2,-(sp)
    ed0e:	|         jsr 177e0 <__subsf3>
    ed14:	|         addq.l #8,sp
    ed16:	|         move.l d0,-(sp)
    ed18:	|         jsr 17484 <__fixsfsi>
    ed1e:	|         addq.l #4,sp
    ed20:	|         move.l d0,1c9fe <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ed26:	|         move.l 1ca02 <cameraY>,d0
    ed2c:	|         move.l d0,-(sp)
    ed2e:	|         jsr 174ec <__floatsisf>
    ed34:	|         addq.l #4,sp
    ed36:	|         move.l d0,d2
    ed38:	|         move.l 1c8a0 <winHeight>,d0
    ed3e:	|         lsr.l #1,d0
    ed40:	|         move.l d0,-(sp)
    ed42:	|         jsr 17514 <__floatunsisf>
    ed48:	|         addq.l #4,sp
    ed4a:	|         move.l d0,d1
    ed4c:	|         move.l 1c2da <cameraZoom>,d0
    ed52:	|         move.l d0,-(sp)
    ed54:	|         move.l d1,-(sp)
    ed56:	|         jsr 173a2 <__divsf3>
    ed5c:	|         addq.l #8,sp
    ed5e:	|         move.l d0,-(sp)
    ed60:	|         move.l d2,-(sp)
    ed62:	|         jsr 177e0 <__subsf3>
    ed68:	|         addq.l #8,sp
    ed6a:	|         move.l d0,-(sp)
    ed6c:	|         jsr 17484 <__fixsfsi>
    ed72:	|         addq.l #4,sp
    ed74:	|         move.l d0,1ca02 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ed7a:	|         move.l 1c9fe <cameraX>,d0
    ed80:	|     ,-- bpl.s ed8c <builtIn_aimCamera+0x12e>
    ed82:	|     |   clr.l 1c9fe <cameraX>
    ed88:	|  ,--|-- bra.w ee42 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ed8c:	|  |  '-> move.l 1c9fe <cameraX>,d0
    ed92:	|  |      move.l d0,-(sp)
    ed94:	|  |      jsr 174ec <__floatsisf>
    ed9a:	|  |      addq.l #4,sp
    ed9c:	|  |      move.l d0,d2
    ed9e:	|  |      move.l 1c9e0 <sceneWidth>,d0
    eda4:	|  |      move.l d0,-(sp)
    eda6:	|  |      jsr 17514 <__floatunsisf>
    edac:	|  |      addq.l #4,sp
    edae:	|  |      move.l d0,d3
    edb0:	|  |      move.l 1c89c <winWidth>,d0
    edb6:	|  |      move.l d0,-(sp)
    edb8:	|  |      jsr 17514 <__floatunsisf>
    edbe:	|  |      addq.l #4,sp
    edc0:	|  |      move.l d0,d1
    edc2:	|  |      move.l 1c2da <cameraZoom>,d0
    edc8:	|  |      move.l d0,-(sp)
    edca:	|  |      move.l d1,-(sp)
    edcc:	|  |      jsr 173a2 <__divsf3>
    edd2:	|  |      addq.l #8,sp
    edd4:	|  |      move.l d0,-(sp)
    edd6:	|  |      move.l d3,-(sp)
    edd8:	|  |      jsr 177e0 <__subsf3>
    edde:	|  |      addq.l #8,sp
    ede0:	|  |      move.l d0,-(sp)
    ede2:	|  |      move.l d2,-(sp)
    ede4:	|  |      jsr 17658 <__gtsf2>
    edea:	|  |      addq.l #8,sp
    edec:	|  |      tst.l d0
    edee:	|  +----- ble.s ee42 <builtIn_aimCamera+0x1e4>
    edf0:	|  |      move.l 1c9e0 <sceneWidth>,d0
    edf6:	|  |      move.l d0,-(sp)
    edf8:	|  |      jsr 17514 <__floatunsisf>
    edfe:	|  |      addq.l #4,sp
    ee00:	|  |      move.l d0,d2
    ee02:	|  |      move.l 1c89c <winWidth>,d0
    ee08:	|  |      move.l d0,-(sp)
    ee0a:	|  |      jsr 17514 <__floatunsisf>
    ee10:	|  |      addq.l #4,sp
    ee12:	|  |      move.l d0,d1
    ee14:	|  |      move.l 1c2da <cameraZoom>,d0
    ee1a:	|  |      move.l d0,-(sp)
    ee1c:	|  |      move.l d1,-(sp)
    ee1e:	|  |      jsr 173a2 <__divsf3>
    ee24:	|  |      addq.l #8,sp
    ee26:	|  |      move.l d0,-(sp)
    ee28:	|  |      move.l d2,-(sp)
    ee2a:	|  |      jsr 177e0 <__subsf3>
    ee30:	|  |      addq.l #8,sp
    ee32:	|  |      move.l d0,-(sp)
    ee34:	|  |      jsr 17484 <__fixsfsi>
    ee3a:	|  |      addq.l #4,sp
    ee3c:	|  |      move.l d0,1c9fe <cameraX>
	if (cameraY < 0) cameraY = 0;
    ee42:	|  '----> move.l 1ca02 <cameraY>,d0
    ee48:	|     ,-- bpl.s ee54 <builtIn_aimCamera+0x1f6>
    ee4a:	|     |   clr.l 1ca02 <cameraY>
    ee50:	|  ,--|-- bra.w ef0a <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    ee54:	|  |  '-> move.l 1ca02 <cameraY>,d0
    ee5a:	|  |      move.l d0,-(sp)
    ee5c:	|  |      jsr 174ec <__floatsisf>
    ee62:	|  |      addq.l #4,sp
    ee64:	|  |      move.l d0,d2
    ee66:	|  |      move.l 1c9e4 <sceneHeight>,d0
    ee6c:	|  |      move.l d0,-(sp)
    ee6e:	|  |      jsr 17514 <__floatunsisf>
    ee74:	|  |      addq.l #4,sp
    ee76:	|  |      move.l d0,d3
    ee78:	|  |      move.l 1c8a0 <winHeight>,d0
    ee7e:	|  |      move.l d0,-(sp)
    ee80:	|  |      jsr 17514 <__floatunsisf>
    ee86:	|  |      addq.l #4,sp
    ee88:	|  |      move.l d0,d1
    ee8a:	|  |      move.l 1c2da <cameraZoom>,d0
    ee90:	|  |      move.l d0,-(sp)
    ee92:	|  |      move.l d1,-(sp)
    ee94:	|  |      jsr 173a2 <__divsf3>
    ee9a:	|  |      addq.l #8,sp
    ee9c:	|  |      move.l d0,-(sp)
    ee9e:	|  |      move.l d3,-(sp)
    eea0:	|  |      jsr 177e0 <__subsf3>
    eea6:	|  |      addq.l #8,sp
    eea8:	|  |      move.l d0,-(sp)
    eeaa:	|  |      move.l d2,-(sp)
    eeac:	|  |      jsr 17658 <__gtsf2>
    eeb2:	|  |      addq.l #8,sp
    eeb4:	|  |      tst.l d0
    eeb6:	|  +----- ble.s ef0a <builtIn_aimCamera+0x2ac>
    eeb8:	|  |      move.l 1c9e4 <sceneHeight>,d0
    eebe:	|  |      move.l d0,-(sp)
    eec0:	|  |      jsr 17514 <__floatunsisf>
    eec6:	|  |      addq.l #4,sp
    eec8:	|  |      move.l d0,d2
    eeca:	|  |      move.l 1c8a0 <winHeight>,d0
    eed0:	|  |      move.l d0,-(sp)
    eed2:	|  |      jsr 17514 <__floatunsisf>
    eed8:	|  |      addq.l #4,sp
    eeda:	|  |      move.l d0,d1
    eedc:	|  |      move.l 1c2da <cameraZoom>,d0
    eee2:	|  |      move.l d0,-(sp)
    eee4:	|  |      move.l d1,-(sp)
    eee6:	|  |      jsr 173a2 <__divsf3>
    eeec:	|  |      addq.l #8,sp
    eeee:	|  |      move.l d0,-(sp)
    eef0:	|  |      move.l d2,-(sp)
    eef2:	|  |      jsr 177e0 <__subsf3>
    eef8:	|  |      addq.l #8,sp
    eefa:	|  |      move.l d0,-(sp)
    eefc:	|  |      jsr 17484 <__fixsfsi>
    ef02:	|  |      addq.l #4,sp
    ef04:	|  |      move.l d0,1ca02 <cameraY>
	return BR_CONTINUE;
    ef0a:	|  '----> moveq #2,d0
}
    ef0c:	'-------> move.l (sp)+,d2
    ef0e:	          move.l (sp)+,d3
    ef10:	          rts

0000ef12 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ef12:	       subq.l #4,sp
    ef14:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef16:	       movea.l 16(sp),a0
    ef1a:	       move.l 24(a0),d0
    ef1e:	       move.l d0,-(sp)
    ef20:	       pea 1 <_start+0x1>
    ef24:	       moveq #12,d0
    ef26:	       add.l sp,d0
    ef28:	       move.l d0,-(sp)
    ef2a:	       jsr 145da <getValueType>
    ef30:	       lea 12(sp),sp
    ef34:	       tst.w d0
    ef36:	   ,-- bne.s ef3e <builtIn_zoomCamera+0x2c>
    ef38:	   |   moveq #1,d0
    ef3a:	,--|-- bra.w f138 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ef3e:	|  '-> moveq #24,d0
    ef40:	|      add.l 16(sp),d0
    ef44:	|      move.l d0,-(sp)
    ef46:	|      jsr 14f5e <trimStack>
    ef4c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ef4e:	|      move.l 1c904 <input+0xa>,d0
    ef54:	|      move.l d0,-(sp)
    ef56:	|      jsr 174ec <__floatsisf>
    ef5c:	|      addq.l #4,sp
    ef5e:	|      move.l d0,d1
    ef60:	|      move.l 1c2da <cameraZoom>,d0
    ef66:	|      move.l d0,-(sp)
    ef68:	|      move.l d1,-(sp)
    ef6a:	|      jsr 1759e <__mulsf3>
    ef70:	|      addq.l #8,sp
    ef72:	|      move.l d0,-(sp)
    ef74:	|      jsr 17484 <__fixsfsi>
    ef7a:	|      addq.l #4,sp
    ef7c:	|      move.l d0,1c904 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    ef82:	|      move.l 1c908 <input+0xe>,d0
    ef88:	|      move.l d0,-(sp)
    ef8a:	|      jsr 174ec <__floatsisf>
    ef90:	|      addq.l #4,sp
    ef92:	|      move.l d0,d1
    ef94:	|      move.l 1c2da <cameraZoom>,d0
    ef9a:	|      move.l d0,-(sp)
    ef9c:	|      move.l d1,-(sp)
    ef9e:	|      jsr 1759e <__mulsf3>
    efa4:	|      addq.l #8,sp
    efa6:	|      move.l d0,-(sp)
    efa8:	|      jsr 17484 <__fixsfsi>
    efae:	|      addq.l #4,sp
    efb0:	|      move.l d0,1c908 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    efb6:	|      move.l 4(sp),d0
    efba:	|      move.l d0,-(sp)
    efbc:	|      jsr 174ec <__floatsisf>
    efc2:	|      addq.l #4,sp
    efc4:	|      move.l #1008981770,-(sp)
    efca:	|      move.l d0,-(sp)
    efcc:	|      jsr 1759e <__mulsf3>
    efd2:	|      addq.l #8,sp
    efd4:	|      move.l d0,1c2da <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    efda:	|      move.l 1c89c <winWidth>,d0
    efe0:	|      move.l d0,-(sp)
    efe2:	|      jsr 17514 <__floatunsisf>
    efe8:	|      addq.l #4,sp
    efea:	|      move.l d0,d1
    efec:	|      move.l 1c2da <cameraZoom>,d0
    eff2:	|      move.l d0,-(sp)
    eff4:	|      move.l d1,-(sp)
    eff6:	|      jsr 173a2 <__divsf3>
    effc:	|      addq.l #8,sp
    effe:	|      move.l d0,d2
    f000:	|      move.l 1c9e0 <sceneWidth>,d0
    f006:	|      move.l d0,-(sp)
    f008:	|      jsr 17514 <__floatunsisf>
    f00e:	|      addq.l #4,sp
    f010:	|      move.l d0,-(sp)
    f012:	|      move.l d2,-(sp)
    f014:	|      jsr 17658 <__gtsf2>
    f01a:	|      addq.l #8,sp
    f01c:	|      tst.l d0
    f01e:	|  ,-- ble.s f054 <builtIn_zoomCamera+0x142>
    f020:	|  |   move.l 1c89c <winWidth>,d0
    f026:	|  |   move.l d0,-(sp)
    f028:	|  |   jsr 17514 <__floatunsisf>
    f02e:	|  |   addq.l #4,sp
    f030:	|  |   move.l d0,d2
    f032:	|  |   move.l 1c9e0 <sceneWidth>,d0
    f038:	|  |   move.l d0,-(sp)
    f03a:	|  |   jsr 17514 <__floatunsisf>
    f040:	|  |   addq.l #4,sp
    f042:	|  |   move.l d0,-(sp)
    f044:	|  |   move.l d2,-(sp)
    f046:	|  |   jsr 173a2 <__divsf3>
    f04c:	|  |   addq.l #8,sp
    f04e:	|  |   move.l d0,1c2da <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f054:	|  '-> move.l 1c8a0 <winHeight>,d0
    f05a:	|      move.l d0,-(sp)
    f05c:	|      jsr 17514 <__floatunsisf>
    f062:	|      addq.l #4,sp
    f064:	|      move.l d0,d1
    f066:	|      move.l 1c2da <cameraZoom>,d0
    f06c:	|      move.l d0,-(sp)
    f06e:	|      move.l d1,-(sp)
    f070:	|      jsr 173a2 <__divsf3>
    f076:	|      addq.l #8,sp
    f078:	|      move.l d0,d2
    f07a:	|      move.l 1c9e4 <sceneHeight>,d0
    f080:	|      move.l d0,-(sp)
    f082:	|      jsr 17514 <__floatunsisf>
    f088:	|      addq.l #4,sp
    f08a:	|      move.l d0,-(sp)
    f08c:	|      move.l d2,-(sp)
    f08e:	|      jsr 17658 <__gtsf2>
    f094:	|      addq.l #8,sp
    f096:	|      tst.l d0
    f098:	|  ,-- ble.s f0ce <builtIn_zoomCamera+0x1bc>
    f09a:	|  |   move.l 1c8a0 <winHeight>,d0
    f0a0:	|  |   move.l d0,-(sp)
    f0a2:	|  |   jsr 17514 <__floatunsisf>
    f0a8:	|  |   addq.l #4,sp
    f0aa:	|  |   move.l d0,d2
    f0ac:	|  |   move.l 1c9e4 <sceneHeight>,d0
    f0b2:	|  |   move.l d0,-(sp)
    f0b4:	|  |   jsr 17514 <__floatunsisf>
    f0ba:	|  |   addq.l #4,sp
    f0bc:	|  |   move.l d0,-(sp)
    f0be:	|  |   move.l d2,-(sp)
    f0c0:	|  |   jsr 173a2 <__divsf3>
    f0c6:	|  |   addq.l #8,sp
    f0c8:	|  |   move.l d0,1c2da <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f0ce:	|  '-> move.l 1c904 <input+0xa>,d0
    f0d4:	|      move.l d0,-(sp)
    f0d6:	|      jsr 174ec <__floatsisf>
    f0dc:	|      addq.l #4,sp
    f0de:	|      move.l d0,d1
    f0e0:	|      move.l 1c2da <cameraZoom>,d0
    f0e6:	|      move.l d0,-(sp)
    f0e8:	|      move.l d1,-(sp)
    f0ea:	|      jsr 173a2 <__divsf3>
    f0f0:	|      addq.l #8,sp
    f0f2:	|      move.l d0,-(sp)
    f0f4:	|      jsr 17484 <__fixsfsi>
    f0fa:	|      addq.l #4,sp
    f0fc:	|      move.l d0,1c904 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f102:	|      move.l 1c908 <input+0xe>,d0
    f108:	|      move.l d0,-(sp)
    f10a:	|      jsr 174ec <__floatsisf>
    f110:	|      addq.l #4,sp
    f112:	|      move.l d0,d1
    f114:	|      move.l 1c2da <cameraZoom>,d0
    f11a:	|      move.l d0,-(sp)
    f11c:	|      move.l d1,-(sp)
    f11e:	|      jsr 173a2 <__divsf3>
    f124:	|      addq.l #8,sp
    f126:	|      move.l d0,-(sp)
    f128:	|      jsr 17484 <__fixsfsi>
    f12e:	|      addq.l #4,sp
    f130:	|      move.l d0,1c908 <input+0xe>

	return BR_CONTINUE;
    f136:	|      moveq #2,d0
}
    f138:	'----> move.l (sp)+,d2
    f13a:	       addq.l #4,sp
    f13c:	       rts

0000f13e <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f13e:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f140:	             tst.l 8(sp)
    f144:	         ,-- bne.s f158 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f146:	         |   pea 197bf <PutChar+0x1c63>
    f14c:	         |   jsr 170ba <KPrintF>
    f152:	         |   addq.l #4,sp
		return BR_ERROR;
    f154:	         |   moveq #1,d0
    f156:	,--------|-- bra.s f1b8 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f158:	|        '-> jsr 15c7a <rand>
    f15e:	|            move.l d0,d1
    f160:	|            move.l 8(sp),d0
    f164:	|            move.l d0,-(sp)
    f166:	|            move.l d1,-(sp)
    f168:	|            jsr 17b20 <__umodsi3>
    f16e:	|            addq.l #8,sp
    f170:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f172:	|     ,----- bra.s f1a6 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f174:	|  ,--|----> move.l (sp),d0
    f176:	|  |  |      cmp.l 8(sp),d0
    f17a:	|  |  |  ,-- bne.s f196 <builtIn_pickOne+0x58>
    f17c:	|  |  |  |   moveq #28,d0
    f17e:	|  |  |  |   add.l 12(sp),d0
    f182:	|  |  |  |   movea.l 12(sp),a0
    f186:	|  |  |  |   move.l 24(a0),d1
    f18a:	|  |  |  |   move.l d0,-(sp)
    f18c:	|  |  |  |   move.l d1,-(sp)
    f18e:	|  |  |  |   jsr 14a94 <copyVariable>
    f194:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f196:	|  |  |  '-> moveq #24,d0
    f198:	|  |  |      add.l 12(sp),d0
    f19c:	|  |  |      move.l d0,-(sp)
    f19e:	|  |  |      jsr 14f5e <trimStack>
    f1a4:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f1a6:	|  |  '----> move.l 8(sp),d0
    f1aa:	|  |         move.l d0,d1
    f1ac:	|  |         subq.l #1,d1
    f1ae:	|  |         move.l d1,8(sp)
    f1b2:	|  |         tst.l d0
    f1b4:	|  '-------- bne.s f174 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f1b6:	|            moveq #2,d0
}
    f1b8:	'----------> addq.l #4,sp
    f1ba:	             rts

0000f1bc <builtIn_substring>:

builtIn(substring)
{
    f1bc:	       lea -40(sp),sp
    f1c0:	       move.l a6,-(sp)
    f1c2:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f1c4:	       movea.l 56(sp),a0
    f1c8:	       move.l 24(a0),d0
    f1cc:	       move.l d0,-(sp)
    f1ce:	       pea 1 <_start+0x1>
    f1d2:	       lea 16(sp),a0
    f1d6:	       move.l a0,-(sp)
    f1d8:	       jsr 145da <getValueType>
    f1de:	       lea 12(sp),sp
    f1e2:	       tst.w d0
    f1e4:	   ,-- bne.s f1ec <builtIn_substring+0x30>
    f1e6:	   |   moveq #1,d0
    f1e8:	,--|-- bra.w f364 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f1ec:	|  '-> moveq #24,d0
    f1ee:	|      add.l 56(sp),d0
    f1f2:	|      move.l d0,-(sp)
    f1f4:	|      jsr 14f5e <trimStack>
    f1fa:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f1fc:	|      movea.l 56(sp),a0
    f200:	|      move.l 24(a0),d0
    f204:	|      move.l d0,-(sp)
    f206:	|      pea 1 <_start+0x1>
    f20a:	|      lea 20(sp),a0
    f20e:	|      move.l a0,-(sp)
    f210:	|      jsr 145da <getValueType>
    f216:	|      lea 12(sp),sp
    f21a:	|      tst.w d0
    f21c:	|  ,-- bne.s f224 <builtIn_substring+0x68>
    f21e:	|  |   moveq #1,d0
    f220:	+--|-- bra.w f364 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f224:	|  '-> moveq #24,d0
    f226:	|      add.l 56(sp),d0
    f22a:	|      move.l d0,-(sp)
    f22c:	|      jsr 14f5e <trimStack>
    f232:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f234:	|      movea.l 56(sp),a0
    f238:	|      move.l 24(a0),d0
    f23c:	|      move.l d0,-(sp)
    f23e:	|      jsr 14bb0 <getTextFromAnyVar>
    f244:	|      addq.l #4,sp
    f246:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f24a:	|      moveq #24,d0
    f24c:	|      add.l 56(sp),d0
    f250:	|      move.l d0,-(sp)
    f252:	|      jsr 14f5e <trimStack>
    f258:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f25a:	|      move.l 44(sp),-(sp)
    f25e:	|      jsr 13ac6 <strlen>
    f264:	|      addq.l #4,sp
    f266:	|      move.l d0,d1
    f268:	|      move.l 12(sp),d0
    f26c:	|      movea.l d0,a0
    f26e:	|      move.l 8(sp),d0
    f272:	|      add.l a0,d0
    f274:	|      cmp.l d1,d0
    f276:	|  ,-- bls.s f2ac <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f278:	|  |   move.l 44(sp),-(sp)
    f27c:	|  |   jsr 13ac6 <strlen>
    f282:	|  |   addq.l #4,sp
    f284:	|  |   move.l d0,d1
    f286:	|  |   move.l 12(sp),d0
    f28a:	|  |   sub.l d0,d1
    f28c:	|  |   move.l d1,d0
    f28e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f292:	|  |   move.l 44(sp),-(sp)
    f296:	|  |   jsr 13ac6 <strlen>
    f29c:	|  |   addq.l #4,sp
    f29e:	|  |   move.l d0,d1
    f2a0:	|  |   move.l 12(sp),d0
    f2a4:	|  |   cmp.l d1,d0
    f2a6:	|  +-- bls.s f2ac <builtIn_substring+0xf0>
            start = 0;
    f2a8:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f2ac:	|  '-> move.l 8(sp),d0
    f2b0:	|  ,-- bpl.s f2b6 <builtIn_substring+0xfa>
        length = 0;
    f2b2:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f2b6:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f2bc:	|      move.l 12(sp),d1
    f2c0:	|      move.l 8(sp),d0
    f2c4:	|      move.l d1,d2
    f2c6:	|      add.l d0,d2
    f2c8:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f2cc:	|      move.l 36(sp),d0
    f2d0:	|      sub.l 40(sp),d0
    f2d4:	|      addq.l #1,d0
    f2d6:	|      move.l d0,32(sp)
    f2da:	|      clr.l 28(sp)
    f2de:	|      move.l 1c948 <SysBase>,d0
    f2e4:	|      movea.l d0,a6
    f2e6:	|      move.l 32(sp),d0
    f2ea:	|      move.l 28(sp),d1
    f2ee:	|      jsr -684(a6)
    f2f2:	|      move.l d0,24(sp)
    f2f6:	|      move.l 24(sp),d0
    f2fa:	|      move.l d0,20(sp)
    if (!newString) {
    f2fe:	|  ,-- bne.s f304 <builtIn_substring+0x148>
        return BR_ERROR;
    f300:	|  |   moveq #1,d0
    f302:	+--|-- bra.s f364 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f304:	|  '-> move.l 36(sp),d0
    f308:	|      sub.l 40(sp),d0
    f30c:	|      move.l d0,d1
    f30e:	|      move.l 40(sp),d0
    f312:	|      add.l 44(sp),d0
    f316:	|      move.l d1,-(sp)
    f318:	|      move.l d0,-(sp)
    f31a:	|      move.l 28(sp),-(sp)
    f31e:	|      jsr 1706e <memcpy>
    f324:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f328:	|      move.l 36(sp),d0
    f32c:	|      sub.l 40(sp),d0
    f330:	|      movea.l 20(sp),a0
    f334:	|      adda.l d0,a0
    f336:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f338:	|      moveq #28,d0
    f33a:	|      add.l 56(sp),d0
    f33e:	|      move.l 20(sp),-(sp)
    f342:	|      move.l d0,-(sp)
    f344:	|      jsr 147fc <makeTextVar>
    f34a:	|      addq.l #8,sp
    FreeVec(newString);
    f34c:	|      move.l 20(sp),16(sp)
    f352:	|      move.l 1c948 <SysBase>,d0
    f358:	|      movea.l d0,a6
    f35a:	|      movea.l 16(sp),a1
    f35e:	|      jsr -690(a6)
    return BR_CONTINUE;
    f362:	|      moveq #2,d0
}
    f364:	'----> move.l (sp)+,d2
    f366:	       movea.l (sp)+,a6
    f368:	       lea 40(sp),sp
    f36c:	       rts

0000f36e <builtIn_stringLength>:

builtIn(stringLength)
{
    f36e:	subq.l #8,sp
    f370:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f372:	movea.l 20(sp),a0
    f376:	move.l 24(a0),d0
    f37a:	move.l d0,-(sp)
    f37c:	jsr 14bb0 <getTextFromAnyVar>
    f382:	addq.l #4,sp
    f384:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f388:	moveq #24,d0
    f38a:	add.l 20(sp),d0
    f38e:	move.l d0,-(sp)
    f390:	jsr 14f5e <trimStack>
    f396:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f398:	move.l 8(sp),-(sp)
    f39c:	jsr 13ac6 <strlen>
    f3a2:	addq.l #4,sp
    f3a4:	move.l d0,d1
    f3a6:	moveq #28,d0
    f3a8:	add.l 20(sp),d0
    f3ac:	move.l d1,-(sp)
    f3ae:	pea 1 <_start+0x1>
    f3b2:	move.l d0,-(sp)
    f3b4:	jsr 14ecc <setVariable>
    f3ba:	lea 12(sp),sp
	FreeVec(newText);
    f3be:	move.l 8(sp),4(sp)
    f3c4:	move.l 1c948 <SysBase>,d0
    f3ca:	movea.l d0,a6
    f3cc:	movea.l 4(sp),a1
    f3d0:	jsr -690(a6)
	return BR_CONTINUE;
    f3d4:	moveq #2,d0
}
    f3d6:	movea.l (sp)+,a6
    f3d8:	addq.l #8,sp
    f3da:	rts

0000f3dc <builtIn_newStack>:

builtIn(newStack)
{
    f3dc:	             lea -12(sp),sp
    f3e0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f3e2:	             moveq #28,d0
    f3e4:	             add.l 24(sp),d0
    f3e8:	             move.l d0,-(sp)
    f3ea:	             jsr 14828 <unlinkVar>
    f3f0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f3f2:	             movea.l 24(sp),a0
    f3f6:	             moveq #6,d0
    f3f8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f3fc:	             moveq #12,d1
    f3fe:	             move.l d1,12(sp)
    f402:	             clr.l 8(sp)
    f406:	             move.l 1c948 <SysBase>,d0
    f40c:	             movea.l d0,a6
    f40e:	             move.l 12(sp),d0
    f412:	             move.l 8(sp),d1
    f416:	             jsr -684(a6)
    f41a:	             move.l d0,4(sp)
    f41e:	             move.l 4(sp),d0
    f422:	             movea.l 24(sp),a0
    f426:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f42a:	             movea.l 24(sp),a0
    f42e:	             move.l 32(a0),d0
    f432:	         ,-- bne.s f43a <builtIn_newStack+0x5e>
    f434:	         |   moveq #1,d0
    f436:	,--------|-- bra.w f4cc <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f43a:	|        '-> movea.l 24(sp),a0
    f43e:	|            movea.l 32(a0),a0
    f442:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f444:	|            movea.l 24(sp),a0
    f448:	|            movea.l 32(a0),a0
    f44c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f450:	|            movea.l 24(sp),a0
    f454:	|            movea.l 32(a0),a0
    f458:	|            moveq #1,d0
    f45a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f45e:	|     ,----- bra.s f4ba <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f460:	|  ,--|----> movea.l 24(sp),a0
    f464:	|  |  |      move.l 32(a0),d0
    f468:	|  |  |      move.l d0,d1
    f46a:	|  |  |      movea.l 24(sp),a0
    f46e:	|  |  |      move.l 24(a0),d0
    f472:	|  |  |      move.l d1,-(sp)
    f474:	|  |  |      move.l d0,-(sp)
    f476:	|  |  |      jsr 13e16 <addVarToStack>
    f47c:	|  |  |      addq.l #8,sp
    f47e:	|  |  |      tst.w d0
    f480:	|  |  |  ,-- bne.s f486 <builtIn_newStack+0xaa>
    f482:	|  |  |  |   moveq #1,d0
    f484:	+--|--|--|-- bra.s f4cc <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f486:	|  |  |  '-> movea.l 24(sp),a0
    f48a:	|  |  |      movea.l 32(a0),a0
    f48e:	|  |  |      move.l 4(a0),d0
    f492:	|  |  |  ,-- bne.s f4aa <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f494:	|  |  |  |   movea.l 24(sp),a0
    f498:	|  |  |  |   movea.l 32(a0),a1
    f49c:	|  |  |  |   movea.l 24(sp),a0
    f4a0:	|  |  |  |   movea.l 32(a0),a0
    f4a4:	|  |  |  |   move.l (a1),d0
    f4a6:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f4aa:	|  |  |  '-> moveq #24,d0
    f4ac:	|  |  |      add.l 24(sp),d0
    f4b0:	|  |  |      move.l d0,-(sp)
    f4b2:	|  |  |      jsr 14f5e <trimStack>
    f4b8:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f4ba:	|  |  '----> move.l 20(sp),d0
    f4be:	|  |         move.l d0,d1
    f4c0:	|  |         subq.l #1,d1
    f4c2:	|  |         move.l d1,20(sp)
    f4c6:	|  |         tst.l d0
    f4c8:	|  '-------- bne.s f460 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f4ca:	|            moveq #2,d0
}
    f4cc:	'----------> movea.l (sp)+,a6
    f4ce:	             lea 12(sp),sp
    f4d2:	             rts

0000f4d4 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f4d4:	          movea.l 8(sp),a0
    f4d8:	          movea.l 24(a0),a0
    f4dc:	          move.l (a0),d0
    f4de:	          moveq #6,d1
    f4e0:	          cmp.l d0,d1
    f4e2:	      ,-- beq.s f4fe <builtIn_stackSize+0x2a>
    f4e4:	      |   moveq #10,d1
    f4e6:	      |   cmp.l d0,d1
    f4e8:	   ,--|-- beq.s f542 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f4ea:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f4ec:	   |  |   pea 197f2 <PutChar+0x1c96>
    f4f2:	   |  |   jsr 170ba <KPrintF>
    f4f8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f4fa:	   |  |   moveq #1,d0
    f4fc:	,--|--|-- bra.s f57c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f4fe:	|  |  '-> movea.l 8(sp),a0
    f502:	|  |      movea.l 24(a0),a0
    f506:	|  |      move.l 4(a0),d0
    f50a:	|  |      move.l d0,-(sp)
    f50c:	|  |      jsr 14f3a <stackSize>
    f512:	|  |      addq.l #4,sp
    f514:	|  |      move.l d0,d1
    f516:	|  |      moveq #28,d0
    f518:	|  |      add.l 8(sp),d0
    f51c:	|  |      move.l d1,-(sp)
    f51e:	|  |      pea 1 <_start+0x1>
    f522:	|  |      move.l d0,-(sp)
    f524:	|  |      jsr 14ecc <setVariable>
    f52a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f52e:	|  |      moveq #24,d0
    f530:	|  |      add.l 8(sp),d0
    f534:	|  |      move.l d0,-(sp)
    f536:	|  |      jsr 14f5e <trimStack>
    f53c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f53e:	|  |      moveq #2,d0
    f540:	+--|----- bra.s f57c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f542:	|  '----> movea.l 8(sp),a0
    f546:	|         movea.l 24(a0),a0
    f54a:	|         movea.l 4(a0),a0
    f54e:	|         move.l 4(a0),d1
    f552:	|         moveq #28,d0
    f554:	|         add.l 8(sp),d0
    f558:	|         move.l d1,-(sp)
    f55a:	|         pea 1 <_start+0x1>
    f55e:	|         move.l d0,-(sp)
    f560:	|         jsr 14ecc <setVariable>
    f566:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f56a:	|         moveq #24,d0
    f56c:	|         add.l 8(sp),d0
    f570:	|         move.l d0,-(sp)
    f572:	|         jsr 14f5e <trimStack>
    f578:	|         addq.l #4,sp
			return BR_CONTINUE;
    f57a:	|         moveq #2,d0
}
    f57c:	'-------> rts

0000f57e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f57e:	       movea.l 8(sp),a0
    f582:	       movea.l 24(a0),a0
    f586:	       move.l (a0),d0
    f588:	       moveq #6,d1
    f58a:	       cmp.l d0,d1
    f58c:	   ,-- beq.s f5a0 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f58e:	   |   pea 1981b <PutChar+0x1cbf>
    f594:	   |   jsr 170ba <KPrintF>
    f59a:	   |   addq.l #4,sp
		return BR_ERROR;
    f59c:	   |   moveq #1,d0
    f59e:	,--|-- bra.s f5d4 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f5a0:	|  '-> moveq #28,d0
    f5a2:	|      add.l 8(sp),d0
    f5a6:	|      movea.l 8(sp),a0
    f5aa:	|      move.l 24(a0),d1
    f5ae:	|      move.l d0,-(sp)
    f5b0:	|      move.l d1,-(sp)
    f5b2:	|      jsr 140e0 <copyStack>
    f5b8:	|      addq.l #8,sp
    f5ba:	|      tst.w d0
    f5bc:	|  ,-- bne.s f5c2 <builtIn_copyStack+0x44>
    f5be:	|  |   moveq #1,d0
    f5c0:	+--|-- bra.s f5d4 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f5c2:	|  '-> moveq #24,d0
    f5c4:	|      add.l 8(sp),d0
    f5c8:	|      move.l d0,-(sp)
    f5ca:	|      jsr 14f5e <trimStack>
    f5d0:	|      addq.l #4,sp
	return BR_CONTINUE;
    f5d2:	|      moveq #2,d0
}
    f5d4:	'----> rts

0000f5d6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f5d6:	       movea.l 8(sp),a0
    f5da:	       movea.l 24(a0),a0
    f5de:	       movea.l 8(a0),a0
    f5e2:	       move.l (a0),d0
    f5e4:	       moveq #6,d1
    f5e6:	       cmp.l d0,d1
    f5e8:	   ,-- beq.s f5fe <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f5ea:	   |   pea 19834 <PutChar+0x1cd8>
    f5f0:	   |   jsr 170ba <KPrintF>
    f5f6:	   |   addq.l #4,sp
		return BR_ERROR;
    f5f8:	   |   moveq #1,d0
    f5fa:	,--|-- bra.w f68c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f5fe:	|  '-> movea.l 8(sp),a0
    f602:	|      movea.l 24(a0),a0
    f606:	|      movea.l 8(a0),a0
    f60a:	|      move.l 4(a0),d0
    f60e:	|      move.l d0,d1
    f610:	|      movea.l 8(sp),a0
    f614:	|      move.l 24(a0),d0
    f618:	|      move.l d1,-(sp)
    f61a:	|      move.l d0,-(sp)
    f61c:	|      jsr 13e16 <addVarToStack>
    f622:	|      addq.l #8,sp
    f624:	|      tst.w d0
    f626:	|  ,-- bne.s f62c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f628:	|  |   moveq #1,d0
    f62a:	+--|-- bra.s f68c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f62c:	|  '-> movea.l 8(sp),a0
    f630:	|      movea.l 24(a0),a0
    f634:	|      movea.l 8(a0),a0
    f638:	|      movea.l 4(a0),a0
    f63c:	|      movea.l (a0),a0
    f63e:	|      move.l 8(a0),d0
    f642:	|  ,-- bne.s f66a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f644:	|  |   movea.l 8(sp),a0
    f648:	|  |   movea.l 24(a0),a0
    f64c:	|  |   movea.l 8(a0),a0
    f650:	|  |   movea.l 4(a0),a1
    f654:	|  |   movea.l 8(sp),a0
    f658:	|  |   movea.l 24(a0),a0
    f65c:	|  |   movea.l 8(a0),a0
    f660:	|  |   movea.l 4(a0),a0
    f664:	|  |   move.l (a1),d0
    f666:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f66a:	|  '-> moveq #24,d0
    f66c:	|      add.l 8(sp),d0
    f670:	|      move.l d0,-(sp)
    f672:	|      jsr 14f5e <trimStack>
    f678:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f67a:	|      moveq #24,d0
    f67c:	|      add.l 8(sp),d0
    f680:	|      move.l d0,-(sp)
    f682:	|      jsr 14f5e <trimStack>
    f688:	|      addq.l #4,sp
	return BR_CONTINUE;
    f68a:	|      moveq #2,d0
}
    f68c:	'----> rts

0000f68e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f68e:	             movea.l 8(sp),a0
    f692:	             movea.l 24(a0),a0
    f696:	             movea.l 8(a0),a0
    f69a:	             move.l (a0),d0
    f69c:	             moveq #6,d1
    f69e:	             cmp.l d0,d1
    f6a0:	         ,-- beq.s f6b6 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f6a2:	         |   pea 19834 <PutChar+0x1cd8>
    f6a8:	         |   jsr 170ba <KPrintF>
    f6ae:	         |   addq.l #4,sp
		return BR_ERROR;
    f6b0:	         |   moveq #1,d0
    f6b2:	,--------|-- bra.w f7a4 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f6b6:	|        '-> movea.l 8(sp),a0
    f6ba:	|            movea.l 24(a0),a0
    f6be:	|            movea.l 8(a0),a0
    f6c2:	|            movea.l 4(a0),a0
    f6c6:	|            move.l (a0),d0
    f6c8:	|     ,----- bne.s f722 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f6ca:	|     |      movea.l 8(sp),a0
    f6ce:	|     |      movea.l 24(a0),a0
    f6d2:	|     |      movea.l 8(a0),a0
    f6d6:	|     |      move.l 4(a0),d0
    f6da:	|     |      move.l d0,d1
    f6dc:	|     |      movea.l 8(sp),a0
    f6e0:	|     |      move.l 24(a0),d0
    f6e4:	|     |      move.l d1,-(sp)
    f6e6:	|     |      move.l d0,-(sp)
    f6e8:	|     |      jsr 13e16 <addVarToStack>
    f6ee:	|     |      addq.l #8,sp
    f6f0:	|     |      tst.w d0
    f6f2:	|     |  ,-- bne.s f6fa <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f6f4:	|     |  |   moveq #1,d0
    f6f6:	+-----|--|-- bra.w f7a4 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f6fa:	|     |  '-> movea.l 8(sp),a0
    f6fe:	|     |      movea.l 24(a0),a0
    f702:	|     |      movea.l 8(a0),a0
    f706:	|     |      movea.l 4(a0),a1
    f70a:	|     |      movea.l 8(sp),a0
    f70e:	|     |      movea.l 24(a0),a0
    f712:	|     |      movea.l 8(a0),a0
    f716:	|     |      movea.l 4(a0),a0
    f71a:	|     |      move.l (a1),d0
    f71c:	|     |      move.l d0,4(a0)
    f720:	|  ,--|----- bra.s f782 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f722:	|  |  '----> movea.l 8(sp),a0
    f726:	|  |         movea.l 24(a0),a0
    f72a:	|  |         movea.l 8(a0),a0
    f72e:	|  |         movea.l 4(a0),a0
    f732:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f736:	|  |         move.l d0,d1
    f738:	|  |         addq.l #8,d1
    f73a:	|  |         movea.l 8(sp),a0
    f73e:	|  |         move.l 24(a0),d0
    f742:	|  |         move.l d1,-(sp)
    f744:	|  |         move.l d0,-(sp)
    f746:	|  |         jsr 13e16 <addVarToStack>
    f74c:	|  |         addq.l #8,sp
    f74e:	|  |         tst.w d0
    f750:	|  |     ,-- bne.s f756 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f752:	|  |     |   moveq #1,d0
    f754:	+--|-----|-- bra.s f7a4 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f756:	|  |     '-> movea.l 8(sp),a0
    f75a:	|  |         movea.l 24(a0),a0
    f75e:	|  |         movea.l 8(a0),a0
    f762:	|  |         movea.l 4(a0),a0
    f766:	|  |         movea.l 4(a0),a1
    f76a:	|  |         movea.l 8(sp),a0
    f76e:	|  |         movea.l 24(a0),a0
    f772:	|  |         movea.l 8(a0),a0
    f776:	|  |         movea.l 4(a0),a0
    f77a:	|  |         move.l 8(a1),d0
    f77e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f782:	|  '-------> moveq #24,d0
    f784:	|            add.l 8(sp),d0
    f788:	|            move.l d0,-(sp)
    f78a:	|            jsr 14f5e <trimStack>
    f790:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f792:	|            moveq #24,d0
    f794:	|            add.l 8(sp),d0
    f798:	|            move.l d0,-(sp)
    f79a:	|            jsr 14f5e <trimStack>
    f7a0:	|            addq.l #4,sp
	return BR_CONTINUE;
    f7a2:	|            moveq #2,d0
}
    f7a4:	'----------> rts

0000f7a6 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f7a6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7a8:	       movea.l 12(sp),a0
    f7ac:	       movea.l 24(a0),a0
    f7b0:	       movea.l 8(a0),a0
    f7b4:	       move.l (a0),d0
    f7b6:	       moveq #6,d1
    f7b8:	       cmp.l d0,d1
    f7ba:	   ,-- beq.s f7d0 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f7bc:	   |   pea 1981b <PutChar+0x1cbf>
    f7c2:	   |   jsr 170ba <KPrintF>
    f7c8:	   |   addq.l #4,sp
		return BR_ERROR;
    f7ca:	   |   moveq #1,d0
    f7cc:	,--|-- bra.w f866 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f7d0:	|  '-> movea.l 12(sp),a0
    f7d4:	|      movea.l 24(a0),a0
    f7d8:	|      movea.l 8(a0),a0
    f7dc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f7e0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f7e2:	|      movea.l 12(sp),a0
    f7e6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f7ea:	|      clr.l -(sp)
    f7ec:	|      move.l d1,-(sp)
    f7ee:	|      move.l d0,-(sp)
    f7f0:	|      jsr 141b6 <deleteVarFromStack>
    f7f6:	|      lea 12(sp),sp
    f7fa:	|      move.l d0,d1
    f7fc:	|      moveq #28,d0
    f7fe:	|      add.l 12(sp),d0
    f802:	|      move.l d1,-(sp)
    f804:	|      pea 1 <_start+0x1>
    f808:	|      move.l d0,-(sp)
    f80a:	|      jsr 14ecc <setVariable>
    f810:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f814:	|      movea.l 12(sp),a0
    f818:	|      movea.l 24(a0),a0
    f81c:	|      movea.l 8(a0),a0
    f820:	|      movea.l 4(a0),a0
    f824:	|      move.l (a0),d0
    f826:	|      movea.l 12(sp),a0
    f82a:	|      movea.l 24(a0),a0
    f82e:	|      movea.l 8(a0),a0
    f832:	|      movea.l 4(a0),a2
    f836:	|      move.l d0,-(sp)
    f838:	|      jsr 14f16 <stackFindLast>
    f83e:	|      addq.l #4,sp
    f840:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f844:	|      moveq #24,d0
    f846:	|      add.l 12(sp),d0
    f84a:	|      move.l d0,-(sp)
    f84c:	|      jsr 14f5e <trimStack>
    f852:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f854:	|      moveq #24,d0
    f856:	|      add.l 12(sp),d0
    f85a:	|      move.l d0,-(sp)
    f85c:	|      jsr 14f5e <trimStack>
    f862:	|      addq.l #4,sp
	return BR_CONTINUE;
    f864:	|      moveq #2,d0
}
    f866:	'----> movea.l (sp)+,a2
    f868:	       rts

0000f86a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f86a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f86c:	       movea.l 12(sp),a0
    f870:	       movea.l 24(a0),a0
    f874:	       movea.l 8(a0),a0
    f878:	       move.l (a0),d0
    f87a:	       moveq #6,d1
    f87c:	       cmp.l d0,d1
    f87e:	   ,-- beq.s f894 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f880:	   |   pea 1981b <PutChar+0x1cbf>
    f886:	   |   jsr 170ba <KPrintF>
    f88c:	   |   addq.l #4,sp
		return BR_ERROR;
    f88e:	   |   moveq #1,d0
    f890:	,--|-- bra.w f92c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f894:	|  '-> movea.l 12(sp),a0
    f898:	|      movea.l 24(a0),a0
    f89c:	|      movea.l 8(a0),a0
    f8a0:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f8a4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f8a6:	|      movea.l 12(sp),a0
    f8aa:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f8ae:	|      pea 1 <_start+0x1>
    f8b2:	|      move.l d1,-(sp)
    f8b4:	|      move.l d0,-(sp)
    f8b6:	|      jsr 141b6 <deleteVarFromStack>
    f8bc:	|      lea 12(sp),sp
    f8c0:	|      move.l d0,d1
    f8c2:	|      moveq #28,d0
    f8c4:	|      add.l 12(sp),d0
    f8c8:	|      move.l d1,-(sp)
    f8ca:	|      pea 1 <_start+0x1>
    f8ce:	|      move.l d0,-(sp)
    f8d0:	|      jsr 14ecc <setVariable>
    f8d6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f8da:	|      movea.l 12(sp),a0
    f8de:	|      movea.l 24(a0),a0
    f8e2:	|      movea.l 8(a0),a0
    f8e6:	|      movea.l 4(a0),a0
    f8ea:	|      move.l (a0),d0
    f8ec:	|      movea.l 12(sp),a0
    f8f0:	|      movea.l 24(a0),a0
    f8f4:	|      movea.l 8(a0),a0
    f8f8:	|      movea.l 4(a0),a2
    f8fc:	|      move.l d0,-(sp)
    f8fe:	|      jsr 14f16 <stackFindLast>
    f904:	|      addq.l #4,sp
    f906:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f90a:	|      moveq #24,d0
    f90c:	|      add.l 12(sp),d0
    f910:	|      move.l d0,-(sp)
    f912:	|      jsr 14f5e <trimStack>
    f918:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f91a:	|      moveq #24,d0
    f91c:	|      add.l 12(sp),d0
    f920:	|      move.l d0,-(sp)
    f922:	|      jsr 14f5e <trimStack>
    f928:	|      addq.l #4,sp
	return BR_CONTINUE;
    f92a:	|      moveq #2,d0
} 
    f92c:	'----> movea.l (sp)+,a2
    f92e:	       rts

0000f930 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f930:	       movea.l 8(sp),a0
    f934:	       movea.l 24(a0),a0
    f938:	       move.l (a0),d0
    f93a:	       moveq #6,d1
    f93c:	       cmp.l d0,d1
    f93e:	   ,-- beq.s f952 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f940:	   |   pea 1981b <PutChar+0x1cbf>
    f946:	   |   jsr 170ba <KPrintF>
    f94c:	   |   addq.l #4,sp
		return BR_ERROR;
    f94e:	   |   moveq #1,d0
    f950:	,--|-- bra.s f9bc <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f952:	|  '-> movea.l 8(sp),a0
    f956:	|      movea.l 24(a0),a0
    f95a:	|      movea.l 4(a0),a0
    f95e:	|      move.l (a0),d0
    f960:	|  ,-- bne.s f974 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f962:	|  |   pea 1984c <PutChar+0x1cf0>
    f968:	|  |   jsr 170ba <KPrintF>
    f96e:	|  |   addq.l #4,sp
		return BR_ERROR;
    f970:	|  |   moveq #1,d0
    f972:	+--|-- bra.s f9bc <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f974:	|  '-> moveq #28,d0
    f976:	|      add.l 8(sp),d0
    f97a:	|      movea.l 8(sp),a0
    f97e:	|      movea.l 24(a0),a0
    f982:	|      movea.l 4(a0),a0
    f986:	|      move.l (a0),d1
    f988:	|      move.l d0,-(sp)
    f98a:	|      move.l d1,-(sp)
    f98c:	|      jsr 14a94 <copyVariable>
    f992:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f994:	|      movea.l 8(sp),a0
    f998:	|      movea.l 24(a0),a0
    f99c:	|      move.l 4(a0),d0
    f9a0:	|      move.l d0,-(sp)
    f9a2:	|      jsr 14f5e <trimStack>
    f9a8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9aa:	|      moveq #24,d0
    f9ac:	|      add.l 8(sp),d0
    f9b0:	|      move.l d0,-(sp)
    f9b2:	|      jsr 14f5e <trimStack>
    f9b8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9ba:	|      moveq #2,d0
}
    f9bc:	'----> rts

0000f9be <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9be:	       movea.l 8(sp),a0
    f9c2:	       movea.l 24(a0),a0
    f9c6:	       move.l (a0),d0
    f9c8:	       moveq #6,d1
    f9ca:	       cmp.l d0,d1
    f9cc:	   ,-- beq.s f9e0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9ce:	   |   pea 1981b <PutChar+0x1cbf>
    f9d4:	   |   jsr 170ba <KPrintF>
    f9da:	   |   addq.l #4,sp
		return BR_ERROR;
    f9dc:	   |   moveq #1,d0
    f9de:	,--|-- bra.s fa34 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9e0:	|  '-> movea.l 8(sp),a0
    f9e4:	|      movea.l 24(a0),a0
    f9e8:	|      movea.l 4(a0),a0
    f9ec:	|      move.l (a0),d0
    f9ee:	|  ,-- bne.s fa02 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f9f0:	|  |   pea 1984c <PutChar+0x1cf0>
    f9f6:	|  |   jsr 170ba <KPrintF>
    f9fc:	|  |   addq.l #4,sp
		return BR_ERROR;
    f9fe:	|  |   moveq #1,d0
    fa00:	+--|-- bra.s fa34 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fa02:	|  '-> moveq #28,d0
    fa04:	|      add.l 8(sp),d0
    fa08:	|      movea.l 8(sp),a0
    fa0c:	|      movea.l 24(a0),a0
    fa10:	|      movea.l 4(a0),a0
    fa14:	|      move.l (a0),d1
    fa16:	|      move.l d0,-(sp)
    fa18:	|      move.l d1,-(sp)
    fa1a:	|      jsr 14a94 <copyVariable>
    fa20:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fa22:	|      moveq #24,d0
    fa24:	|      add.l 8(sp),d0
    fa28:	|      move.l d0,-(sp)
    fa2a:	|      jsr 14f5e <trimStack>
    fa30:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa32:	|      moveq #2,d0
}
    fa34:	'----> rts

0000fa36 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa36:	       movea.l 8(sp),a0
    fa3a:	       movea.l 24(a0),a0
    fa3e:	       move.l (a0),d0
    fa40:	       moveq #6,d1
    fa42:	       cmp.l d0,d1
    fa44:	   ,-- beq.s fa58 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa46:	   |   pea 1981b <PutChar+0x1cbf>
    fa4c:	   |   jsr 170ba <KPrintF>
    fa52:	   |   addq.l #4,sp
		return BR_ERROR;
    fa54:	   |   moveq #1,d0
    fa56:	,--|-- bra.s faae <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fa58:	|  '-> movea.l 8(sp),a0
    fa5c:	|      movea.l 24(a0),a0
    fa60:	|      movea.l 4(a0),a0
    fa64:	|      move.l (a0),d0
    fa66:	|  ,-- bne.s fa7a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fa68:	|  |   pea 1984c <PutChar+0x1cf0>
    fa6e:	|  |   jsr 170ba <KPrintF>
    fa74:	|  |   addq.l #4,sp
		return BR_ERROR;
    fa76:	|  |   moveq #1,d0
    fa78:	+--|-- bra.s faae <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fa7a:	|  '-> moveq #28,d0
    fa7c:	|      add.l 8(sp),d0
    fa80:	|      movea.l 8(sp),a0
    fa84:	|      movea.l 24(a0),a0
    fa88:	|      movea.l 4(a0),a0
    fa8c:	|      move.l 4(a0),d1
    fa90:	|      move.l d0,-(sp)
    fa92:	|      move.l d1,-(sp)
    fa94:	|      jsr 14a94 <copyVariable>
    fa9a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fa9c:	|      moveq #24,d0
    fa9e:	|      add.l 8(sp),d0
    faa2:	|      move.l d0,-(sp)
    faa4:	|      jsr 14f5e <trimStack>
    faaa:	|      addq.l #4,sp
	return BR_CONTINUE;
    faac:	|      moveq #2,d0
}
    faae:	'----> rts

0000fab0 <builtIn_random>:

builtIn(random)
{
    fab0:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fab2:	       movea.l 12(sp),a0
    fab6:	       move.l 24(a0),d0
    faba:	       move.l d0,-(sp)
    fabc:	       pea 1 <_start+0x1>
    fac0:	       move.l sp,d0
    fac2:	       addq.l #8,d0
    fac4:	       move.l d0,-(sp)
    fac6:	       jsr 145da <getValueType>
    facc:	       lea 12(sp),sp
    fad0:	       tst.w d0
    fad2:	   ,-- bne.s fad8 <builtIn_random+0x28>
		return BR_ERROR;
    fad4:	   |   moveq #1,d0
    fad6:	,--|-- bra.s fb22 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fad8:	|  '-> moveq #24,d0
    fada:	|      add.l 12(sp),d0
    fade:	|      move.l d0,-(sp)
    fae0:	|      jsr 14f5e <trimStack>
    fae6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fae8:	|      move.l (sp),d0
    faea:	|  ,-- bgt.s faf0 <builtIn_random+0x40>
    faec:	|  |   moveq #1,d0
    faee:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    faf0:	|  '-> jsr 15c7a <rand>
    faf6:	|      move.l d0,d1
    faf8:	|      move.l (sp),d0
    fafa:	|      move.l d0,-(sp)
    fafc:	|      move.l d1,-(sp)
    fafe:	|      jsr 17b20 <__umodsi3>
    fb04:	|      addq.l #8,sp
    fb06:	|      move.l d0,d1
    fb08:	|      moveq #28,d0
    fb0a:	|      add.l 12(sp),d0
    fb0e:	|      move.l d1,-(sp)
    fb10:	|      pea 1 <_start+0x1>
    fb14:	|      move.l d0,-(sp)
    fb16:	|      jsr 14ecc <setVariable>
    fb1c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb20:	|      moveq #2,d0
}
    fb22:	'----> addq.l #4,sp
    fb24:	       rts

0000fb26 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fb26:	nop
    fb28:	rts

0000fb2a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fb2a:	moveq #2,d0
}
    fb2c:	rts

0000fb2e <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fb2e:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fb30:	       movea.l 12(sp),a0
    fb34:	       move.l 24(a0),d0
    fb38:	       move.l d0,-(sp)
    fb3a:	       pea 1 <_start+0x1>
    fb3e:	       move.l sp,d0
    fb40:	       addq.l #8,d0
    fb42:	       move.l d0,-(sp)
    fb44:	       jsr 145da <getValueType>
    fb4a:	       lea 12(sp),sp
    fb4e:	       tst.w d0
    fb50:	   ,-- bne.s fb64 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fb52:	   |   pea 1985f <PutChar+0x1d03>
    fb58:	   |   jsr 170ba <KPrintF>
    fb5e:	   |   addq.l #4,sp
		return BR_ERROR;
    fb60:	   |   moveq #1,d0
    fb62:	,--|-- bra.s fba4 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fb64:	|  '-> moveq #24,d0
    fb66:	|      add.l 12(sp),d0
    fb6a:	|      move.l d0,-(sp)
    fb6c:	|      jsr 14f5e <trimStack>
    fb72:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fb74:	|      move.l (sp),d0
    fb76:	|      move.l d0,d0
    fb78:	|      move.w d0,1c856 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fb7e:	|      move.w 1c856 <textPaletteIndex>,d0
    fb84:	|      cmpi.w #31,d0
    fb88:	|  ,-- bls.s fba2 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fb8a:	|  |   pea 19886 <PutChar+0x1d2a>
    fb90:	|  |   jsr 170ba <KPrintF>
    fb96:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fb98:	|  |   clr.w 1c856 <textPaletteIndex>
		return BR_ERROR;
    fb9e:	|  |   moveq #1,d0
    fba0:	+--|-- bra.s fba4 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fba2:	|  '-> moveq #2,d0
}
    fba4:	'----> addq.l #4,sp
    fba6:	       rts

0000fba8 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fba8:	moveq #2,d0
}
    fbaa:	rts

0000fbac <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fbac:	moveq #2,d0
}
    fbae:	rts

0000fbb0 <builtIn_setFont>:


builtIn(setFont)
{
    fbb0:	       lea -16(sp),sp
    fbb4:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fbb6:	       movea.l 28(sp),a0
    fbba:	       move.l 24(a0),d0
    fbbe:	       move.l d0,-(sp)
    fbc0:	       pea 1 <_start+0x1>
    fbc4:	       lea 12(sp),a0
    fbc8:	       move.l a0,-(sp)
    fbca:	       jsr 145da <getValueType>
    fbd0:	       lea 12(sp),sp
    fbd4:	       tst.w d0
    fbd6:	   ,-- bne.s fbde <builtIn_setFont+0x2e>
    fbd8:	   |   moveq #1,d0
    fbda:	,--|-- bra.w fc8c <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fbde:	|  '-> moveq #24,d0
    fbe0:	|      add.l 28(sp),d0
    fbe4:	|      move.l d0,-(sp)
    fbe6:	|      jsr 14f5e <trimStack>
    fbec:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fbee:	|      movea.l 28(sp),a0
    fbf2:	|      move.l 24(a0),d0
    fbf6:	|      move.l d0,-(sp)
    fbf8:	|      jsr 14bb0 <getTextFromAnyVar>
    fbfe:	|      addq.l #4,sp
    fc00:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fc04:	|  ,-- bne.s fc0c <builtIn_setFont+0x5c>
    fc06:	|  |   moveq #1,d0
    fc08:	+--|-- bra.w fc8c <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fc0c:	|  '-> moveq #24,d0
    fc0e:	|      add.l 28(sp),d0
    fc12:	|      move.l d0,-(sp)
    fc14:	|      jsr 14f5e <trimStack>
    fc1a:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fc1c:	|      movea.l 28(sp),a0
    fc20:	|      move.l 24(a0),d0
    fc24:	|      move.l d0,-(sp)
    fc26:	|      pea 5 <_start+0x5>
    fc2a:	|      lea 16(sp),a0
    fc2e:	|      move.l a0,-(sp)
    fc30:	|      jsr 145da <getValueType>
    fc36:	|      lea 12(sp),sp
    fc3a:	|      tst.w d0
    fc3c:	|  ,-- bne.s fc42 <builtIn_setFont+0x92>
    fc3e:	|  |   moveq #1,d0
    fc40:	+--|-- bra.s fc8c <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fc42:	|  '-> moveq #24,d0
    fc44:	|      add.l 28(sp),d0
    fc48:	|      move.l d0,-(sp)
    fc4a:	|      jsr 14f5e <trimStack>
    fc50:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fc52:	|      move.l 4(sp),d1
    fc56:	|      move.l 8(sp),d0
    fc5a:	|      move.l d1,-(sp)
    fc5c:	|      move.l 20(sp),-(sp)
    fc60:	|      move.l d0,-(sp)
    fc62:	|      jsr 15412 <loadFont>
    fc68:	|      lea 12(sp),sp
    fc6c:	|      tst.w d0
    fc6e:	|  ,-- bne.s fc74 <builtIn_setFont+0xc4>
    fc70:	|  |   moveq #1,d0
    fc72:	+--|-- bra.s fc8c <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fc74:	|  '-> move.l 16(sp),12(sp)
    fc7a:	|      move.l 1c948 <SysBase>,d0
    fc80:	|      movea.l d0,a6
    fc82:	|      movea.l 12(sp),a1
    fc86:	|      jsr -690(a6)

    return BR_CONTINUE;
    fc8a:	|      moveq #2,d0
}
    fc8c:	'----> movea.l (sp)+,a6
    fc8e:	       lea 16(sp),sp
    fc92:	       rts

0000fc94 <builtIn_inFont>:

builtIn(inFont)
{
    fc94:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fc96:	       movea.l 12(sp),a0
    fc9a:	       move.l 24(a0),d0
    fc9e:	       move.l d0,-(sp)
    fca0:	       jsr 14bb0 <getTextFromAnyVar>
    fca6:	       addq.l #4,sp
    fca8:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fcaa:	   ,-- bne.s fcb0 <builtIn_inFont+0x1c>
    fcac:	   |   moveq #1,d0
    fcae:	,--|-- bra.s fce6 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fcb0:	|  '-> moveq #24,d0
    fcb2:	|      add.l 12(sp),d0
    fcb6:	|      move.l d0,-(sp)
    fcb8:	|      jsr 14f5e <trimStack>
    fcbe:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fcc0:	|      move.l (sp),-(sp)
    fcc2:	|      jsr 15400 <isInFont>
    fcc8:	|      addq.l #4,sp
    fcca:	|      movea.w d0,a0
    fccc:	|      moveq #28,d0
    fcce:	|      add.l 12(sp),d0
    fcd2:	|      move.l a0,-(sp)
    fcd4:	|      pea 1 <_start+0x1>
    fcd8:	|      move.l d0,-(sp)
    fcda:	|      jsr 14ecc <setVariable>
    fce0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fce4:	|      moveq #2,d0
}
    fce6:	'----> addq.l #4,sp
    fce8:	       rts

0000fcea <builtIn_pasteString>:

builtIn(pasteString)
{
    fcea:	       lea -16(sp),sp
    fcee:	       move.l a6,-(sp)
    fcf0:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fcf2:	       movea.l 32(sp),a0
    fcf6:	       move.l 24(a0),d0
    fcfa:	       move.l d0,-(sp)
    fcfc:	       jsr 14bb0 <getTextFromAnyVar>
    fd02:	       addq.l #4,sp
    fd04:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fd08:	       moveq #24,d0
    fd0a:	       add.l 32(sp),d0
    fd0e:	       move.l d0,-(sp)
    fd10:	       jsr 14f5e <trimStack>
    fd16:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fd18:	       movea.l 32(sp),a0
    fd1c:	       move.l 24(a0),d0
    fd20:	       move.l d0,-(sp)
    fd22:	       pea 1 <_start+0x1>
    fd26:	       lea 20(sp),a0
    fd2a:	       move.l a0,-(sp)
    fd2c:	       jsr 145da <getValueType>
    fd32:	       lea 12(sp),sp
    fd36:	       tst.w d0
    fd38:	   ,-- bne.s fd40 <builtIn_pasteString+0x56>
    fd3a:	   |   moveq #1,d0
    fd3c:	,--|-- bra.w fde2 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fd40:	|  '-> moveq #24,d0
    fd42:	|      add.l 32(sp),d0
    fd46:	|      move.l d0,-(sp)
    fd48:	|      jsr 14f5e <trimStack>
    fd4e:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fd50:	|      movea.l 32(sp),a0
    fd54:	|      move.l 24(a0),d0
    fd58:	|      move.l d0,-(sp)
    fd5a:	|      pea 1 <_start+0x1>
    fd5e:	|      lea 16(sp),a0
    fd62:	|      move.l a0,-(sp)
    fd64:	|      jsr 145da <getValueType>
    fd6a:	|      lea 12(sp),sp
    fd6e:	|      tst.w d0
    fd70:	|  ,-- bne.s fd76 <builtIn_pasteString+0x8c>
    fd72:	|  |   moveq #1,d0
    fd74:	+--|-- bra.s fde2 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fd76:	|  '-> moveq #24,d0
    fd78:	|      add.l 32(sp),d0
    fd7c:	|      move.l d0,-(sp)
    fd7e:	|      jsr 14f5e <trimStack>
    fd84:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
    fd86:	|      move.l 8(sp),d0
    fd8a:	|      cmpi.l #65535,d0
    fd90:	|  ,-- bne.s fdb0 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
    fd92:	|  |   move.l 1c89c <winWidth>,d2
    fd98:	|  |   move.l 20(sp),-(sp)
    fd9c:	|  |   jsr 156c4 <stringWidth>
    fda2:	|  |   addq.l #4,sp
    fda4:	|  |   move.l d2,d1
    fda6:	|  |   sub.l d0,d1
    fda8:	|  |   move.l d1,d0
    fdaa:	|  |   lsr.l #1,d0
    fdac:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fdb0:	|  '-> move.l 12(sp),d1
    fdb4:	|      move.l 8(sp),d0
    fdb8:	|      move.l d1,-(sp)
    fdba:	|      move.l d0,-(sp)
    fdbc:	|      move.l 28(sp),-(sp)
    fdc0:	|      jsr 155e6 <pasteStringToBackdrop>
    fdc6:	|      lea 12(sp),sp
    FreeVec(newText); 
    fdca:	|      move.l 20(sp),16(sp)
    fdd0:	|      move.l 1c948 <SysBase>,d0
    fdd6:	|      movea.l d0,a6
    fdd8:	|      movea.l 16(sp),a1
    fddc:	|      jsr -690(a6)
    return BR_CONTINUE;
    fde0:	|      moveq #2,d0
}
    fde2:	'----> move.l (sp)+,d2
    fde4:	       movea.l (sp)+,a6
    fde6:	       lea 16(sp),sp
    fdea:	       rts

0000fdec <builtIn_anim>:

builtIn(anim)
{
    fdec:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fdf0:	       moveq #1,d0
    fdf2:	       cmp.l 16(sp),d0
    fdf6:	   ,-- blt.s fe0c <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fdf8:	   |   pea 198b0 <PutChar+0x1d54>
    fdfe:	   |   jsr 170ba <KPrintF>
    fe04:	   |   addq.l #4,sp
		return BR_ERROR;
    fe06:	   |   moveq #1,d0
    fe08:	,--|-- bra.w fe9a <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fe0c:	|  '-> moveq #24,d1
    fe0e:	|      add.l 20(sp),d1
    fe12:	|      move.l 16(sp),d0
    fe16:	|      subq.l #1,d0
    fe18:	|      move.l d1,-(sp)
    fe1a:	|      move.l d0,-(sp)
    fe1c:	|      jsr 941e <createPersonaAnim>
    fe22:	|      addq.l #8,sp
    fe24:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe28:	|      movea.l 20(sp),a0
    fe2c:	|      move.l 24(a0),d0
    fe30:	|      move.l d0,-(sp)
    fe32:	|      pea 5 <_start+0x5>
    fe36:	|      lea 8(sp),a0
    fe3a:	|      move.l a0,-(sp)
    fe3c:	|      jsr 145da <getValueType>
    fe42:	|      lea 12(sp),sp
    fe46:	|      tst.w d0
    fe48:	|  ,-- bne.s fe4e <builtIn_anim+0x62>
    fe4a:	|  |   moveq #1,d0
    fe4c:	+--|-- bra.s fe9a <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fe4e:	|  '-> moveq #24,d0
    fe50:	|      add.l 20(sp),d0
    fe54:	|      move.l d0,-(sp)
    fe56:	|      jsr 14f5e <trimStack>
    fe5c:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    fe5e:	|      move.l (sp),d0
    fe60:	|      move.l d0,-(sp)
    fe62:	|      jsr 15ddc <loadBankForAnim>
    fe68:	|      addq.l #4,sp
    fe6a:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fe6e:	|  ,-- bne.s fe74 <builtIn_anim+0x88>
    fe70:	|  |   moveq #1,d0
    fe72:	+--|-- bra.s fe9a <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fe74:	|  '-> move.l 4(sp),-(sp)
    fe78:	|      move.l 12(sp),-(sp)
    fe7c:	|      jsr b32a <setBankFile>
    fe82:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    fe84:	|      moveq #28,d0
    fe86:	|      add.l 20(sp),d0
    fe8a:	|      move.l 8(sp),-(sp)
    fe8e:	|      move.l d0,-(sp)
    fe90:	|      jsr 14e88 <newAnimationVariable>
    fe96:	|      addq.l #8,sp
	return BR_CONTINUE;
    fe98:	|      moveq #2,d0
}
    fe9a:	'----> lea 12(sp),sp
    fe9e:	       rts

0000fea0 <builtIn_costume>:

builtIn(costume)
{
    fea0:	          lea -32(sp),sp
    fea4:	          move.l a6,-(sp)
    fea6:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    fea8:	          moveq #8,d0
    feaa:	          move.l d0,32(sp)
    feae:	          clr.l 28(sp)
    feb2:	          move.l 1c948 <SysBase>,d0
    feb8:	          movea.l d0,a6
    feba:	          move.l 32(sp),d0
    febe:	          move.l 28(sp),d1
    fec2:	          jsr -684(a6)
    fec6:	          move.l d0,24(sp)
    feca:	          move.l 24(sp),d0
    fece:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    fed2:	      ,-- bne.s feda <builtIn_costume+0x3a>
    fed4:	      |   moveq #1,d0
    fed6:	,-----|-- bra.w ffc2 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    feda:	|     '-> move.l 44(sp),d0
    fede:	|         pea 3 <_start+0x3>
    fee2:	|         move.l d0,-(sp)
    fee4:	|         jsr 17ac4 <__divsi3>
    feea:	|         addq.l #8,sp
    feec:	|         movea.l 20(sp),a0
    fef0:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    fef4:	|         tst.l 44(sp)
    fef8:	|     ,-- beq.s ff0e <builtIn_costume+0x6e>
    fefa:	|     |   movea.l 20(sp),a0
    fefe:	|     |   move.l 4(a0),d1
    ff02:	|     |   move.l d1,d0
    ff04:	|     |   add.l d0,d0
    ff06:	|     |   add.l d1,d0
    ff08:	|     |   cmp.l 44(sp),d0
    ff0c:	|  ,--|-- beq.s ff22 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ff0e:	|  |  '-> pea 198ea <PutChar+0x1d8e>
    ff14:	|  |      jsr 170ba <KPrintF>
    ff1a:	|  |      addq.l #4,sp
        return BR_ERROR;
    ff1c:	|  |      moveq #1,d0
    ff1e:	+--|----- bra.w ffc2 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    ff22:	|  '----> move.l 44(sp),d0
    ff26:	|         add.l d0,d0
    ff28:	|         add.l d0,d0
    ff2a:	|         move.l d0,16(sp)
    ff2e:	|         clr.l 12(sp)
    ff32:	|         move.l 1c948 <SysBase>,d0
    ff38:	|         movea.l d0,a6
    ff3a:	|         move.l 16(sp),d0
    ff3e:	|         move.l 12(sp),d1
    ff42:	|         jsr -684(a6)
    ff46:	|         move.l d0,8(sp)
    ff4a:	|         move.l 8(sp),d0
    ff4e:	|         movea.l 20(sp),a0
    ff52:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    ff54:	|         movea.l 20(sp),a0
    ff58:	|         move.l (a0),d0
    ff5a:	|     ,-- bne.s ff60 <builtIn_costume+0xc0>
    ff5c:	|     |   moveq #1,d0
    ff5e:	+-----|-- bra.s ffc2 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    ff60:	|     '-> move.l 44(sp),d0
    ff64:	|         subq.l #1,d0
    ff66:	|         move.l d0,36(sp)
    ff6a:	|     ,-- bra.s ffa6 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    ff6c:	|  ,--|-> movea.l 48(sp),a0
    ff70:	|  |  |   move.l 24(a0),d0
    ff74:	|  |  |   movea.l 20(sp),a0
    ff78:	|  |  |   movea.l (a0),a0
    ff7a:	|  |  |   move.l 36(sp),d1
    ff7e:	|  |  |   add.l d1,d1
    ff80:	|  |  |   add.l d1,d1
    ff82:	|  |  |   lea (0,a0,d1.l),a2
    ff86:	|  |  |   move.l d0,-(sp)
    ff88:	|  |  |   jsr 14ab2 <getAnimationFromVar>
    ff8e:	|  |  |   addq.l #4,sp
    ff90:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    ff92:	|  |  |   moveq #24,d0
    ff94:	|  |  |   add.l 48(sp),d0
    ff98:	|  |  |   move.l d0,-(sp)
    ff9a:	|  |  |   jsr 14f5e <trimStack>
    ffa0:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    ffa2:	|  |  |   subq.l #1,36(sp)
    ffa6:	|  |  '-> tst.l 36(sp)
    ffaa:	|  '----- bge.s ff6c <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    ffac:	|         moveq #28,d0
    ffae:	|         add.l 48(sp),d0
    ffb2:	|         move.l 20(sp),-(sp)
    ffb6:	|         move.l d0,-(sp)
    ffb8:	|         jsr 14eaa <newCostumeVariable>
    ffbe:	|         addq.l #8,sp
    return BR_CONTINUE;
    ffc0:	|         moveq #2,d0
}
    ffc2:	'-------> movea.l (sp)+,a2
    ffc4:	          movea.l (sp)+,a6
    ffc6:	          lea 32(sp),sp
    ffca:	          rts

0000ffcc <builtIn_launch>:

builtIn(launch)
{
    ffcc:	          lea -20(sp),sp
    ffd0:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ffd2:	          movea.l 32(sp),a0
    ffd6:	          move.l 24(a0),d0
    ffda:	          move.l d0,-(sp)
    ffdc:	          jsr 14bb0 <getTextFromAnyVar>
    ffe2:	          addq.l #4,sp
    ffe4:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    ffe8:	      ,-- bne.s fff0 <builtIn_launch+0x24>
    ffea:	      |   moveq #1,d0
    ffec:	,-----|-- bra.w 1011e <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    fff0:	|     '-> move.l 20(sp),-(sp)
    fff4:	|         jsr 2fe <encodeFilename>
    fffa:	|         addq.l #4,sp
    fffc:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10000:	|         moveq #24,d0
   10002:	|         add.l 32(sp),d0
   10006:	|         move.l d0,-(sp)
   10008:	|         jsr 14f5e <trimStack>
   1000e:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10010:	|         movea.l 20(sp),a0
   10014:	|         move.b (a0),d0
   10016:	|         cmpi.b #104,d0
   1001a:	|  ,----- bne.s 10084 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1001c:	|  |      movea.l 20(sp),a0
   10020:	|  |      addq.l #1,a0
   10022:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10024:	|  |      cmpi.b #116,d0
   10028:	|  +----- bne.s 10084 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1002a:	|  |      movea.l 20(sp),a0
   1002e:	|  |      addq.l #2,a0
   10030:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10032:	|  |      cmpi.b #116,d0
   10036:	|  +----- bne.s 10084 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10038:	|  |      movea.l 20(sp),a0
   1003c:	|  |      addq.l #3,a0
   1003e:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10040:	|  |      cmpi.b #112,d0
   10044:	|  +----- bne.s 10084 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10046:	|  |      movea.l 20(sp),a0
   1004a:	|  |      addq.l #4,a0
   1004c:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1004e:	|  |      cmpi.b #58,d0
   10052:	|  |  ,-- beq.s 10070 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10054:	|  |  |   movea.l 20(sp),a0
   10058:	|  |  |   addq.l #4,a0
   1005a:	|  |  |   move.b (a0),d0
   1005c:	|  |  |   cmpi.b #115,d0
   10060:	|  +--|-- bne.s 10084 <builtIn_launch+0xb8>
   10062:	|  |  |   movea.l 20(sp),a0
   10066:	|  |  |   addq.l #5,a0
   10068:	|  |  |   move.b (a0),d0
   1006a:	|  |  |   cmpi.b #58,d0
   1006e:	|  +--|-- bne.s 10084 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10070:	|  |  '-> move.l 20(sp),-(sp)
   10074:	|  |      jsr b8 <copyString>
   1007a:	|  |      addq.l #4,sp
   1007c:	|  |      move.l d0,1ca06 <launchMe>
   10082:	|  |  ,-- bra.s 100d6 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10084:	|  '--|-> move.l 1c8b0 <gamePath>,d0
   1008a:	|     |   pea 19935 <talk.c.490538ff+0x16>
   10090:	|     |   move.l d0,-(sp)
   10092:	|     |   jsr 13b06 <joinStrings>
   10098:	|     |   addq.l #8,sp
   1009a:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1009e:	|     |   move.l 16(sp),-(sp)
   100a2:	|     |   move.l 16(sp),-(sp)
   100a6:	|     |   jsr 13b06 <joinStrings>
   100ac:	|     |   addq.l #8,sp
   100ae:	|     |   move.l d0,1ca06 <launchMe>
        FreeVec(newText);
   100b4:	|     |   move.l 16(sp),8(sp)
   100ba:	|     |   move.l 1c948 <SysBase>,d0
   100c0:	|     |   movea.l d0,a6
   100c2:	|     |   movea.l 8(sp),a1
   100c6:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   100ca:	|     |   move.l 1ca06 <launchMe>,d0
   100d0:	|     +-- bne.s 100d6 <builtIn_launch+0x10a>
   100d2:	|     |   moveq #1,d0
   100d4:	+-----|-- bra.s 1011e <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   100d6:	|     '-> move.l 20(sp),4(sp)
   100dc:	|         move.l 1c948 <SysBase>,d0
   100e2:	|         movea.l d0,a6
   100e4:	|         movea.l 4(sp),a1
   100e8:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   100ec:	|         clr.l -(sp)
   100ee:	|         jsr 47da <setGraphicsWindow>
   100f4:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   100f6:	|         moveq #28,d0
   100f8:	|         add.l 32(sp),d0
   100fc:	|         pea 1 <_start+0x1>
   10100:	|         pea 1 <_start+0x1>
   10104:	|         move.l d0,-(sp)
   10106:	|         jsr 14ecc <setVariable>
   1010c:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10110:	|         moveq #28,d0
   10112:	|         add.l 32(sp),d0
   10116:	|         move.l d0,1ca0a <launchResult>

    return BR_KEEP_AND_PAUSE;
   1011c:	|         moveq #0,d0
}
   1011e:	'-------> movea.l (sp)+,a6
   10120:	          lea 20(sp),sp
   10124:	          rts

00010126 <builtIn_pause>:

builtIn(pause)
{
   10126:	       subq.l #4,sp
	KPrintF("pause: Started\n");
   10128:	       pea 19937 <talk.c.490538ff+0x18>
   1012e:	       jsr 170ba <KPrintF>
   10134:	       addq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10136:	       movea.l 12(sp),a0
   1013a:	       move.l 24(a0),d0
   1013e:	       move.l d0,-(sp)
   10140:	       pea 1 <_start+0x1>
   10144:	       move.l sp,d0
   10146:	       addq.l #8,d0
   10148:	       move.l d0,-(sp)
   1014a:	       jsr 145da <getValueType>
   10150:	       lea 12(sp),sp
   10154:	       tst.w d0
   10156:	   ,-- bne.s 1015c <builtIn_pause+0x36>
   10158:	   |   moveq #1,d0
   1015a:	,--|-- bra.s 1018a <builtIn_pause+0x64>
	trimStack (&fun -> stack);
   1015c:	|  '-> moveq #24,d0
   1015e:	|      add.l 12(sp),d0
   10162:	|      move.l d0,-(sp)
   10164:	|      jsr 14f5e <trimStack>
   1016a:	|      addq.l #4,sp
	if (theTime > 0) {
   1016c:	|      move.l (sp),d0
   1016e:	|  ,-- ble.s 10188 <builtIn_pause+0x62>
		fun -> timeLeft = theTime - 1;
   10170:	|  |   move.l (sp),d0
   10172:	|  |   subq.l #1,d0
   10174:	|  |   movea.l 12(sp),a0
   10178:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1017c:	|  |   movea.l 12(sp),a0
   10180:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10184:	|  |   moveq #0,d0
   10186:	+--|-- bra.s 1018a <builtIn_pause+0x64>
	}
	return BR_CONTINUE;
   10188:	|  '-> moveq #2,d0
}
   1018a:	'----> addq.l #4,sp
   1018c:	       rts

0001018e <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1018e:	jsr 4f6e <completeTimers>
	return BR_CONTINUE;
   10194:	moveq #2,d0
}
   10196:	rts

00010198 <builtIn_callEvent>:

builtIn(callEvent)
{
   10198:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1019c:	       movea.l 20(sp),a0
   101a0:	       move.l 24(a0),d0
   101a4:	       move.l d0,-(sp)
   101a6:	       pea 7 <_start+0x7>
   101aa:	       lea 8(sp),a0
   101ae:	       move.l a0,-(sp)
   101b0:	       jsr 145da <getValueType>
   101b6:	       lea 12(sp),sp
   101ba:	       tst.w d0
   101bc:	   ,-- bne.s 101c4 <builtIn_callEvent+0x2c>
   101be:	   |   moveq #1,d0
   101c0:	,--|-- bra.w 1025a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   101c4:	|  '-> moveq #24,d0
   101c6:	|      add.l 20(sp),d0
   101ca:	|      move.l d0,-(sp)
   101cc:	|      jsr 14f5e <trimStack>
   101d2:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101d4:	|      movea.l 20(sp),a0
   101d8:	|      move.l 24(a0),d0
   101dc:	|      move.l d0,-(sp)
   101de:	|      pea 7 <_start+0x7>
   101e2:	|      moveq #12,d0
   101e4:	|      add.l sp,d0
   101e6:	|      move.l d0,-(sp)
   101e8:	|      jsr 145da <getValueType>
   101ee:	|      lea 12(sp),sp
   101f2:	|      tst.w d0
   101f4:	|  ,-- bne.s 101fa <builtIn_callEvent+0x62>
   101f6:	|  |   moveq #1,d0
   101f8:	+--|-- bra.s 1025a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   101fa:	|  '-> moveq #24,d0
   101fc:	|      add.l 20(sp),d0
   10200:	|      move.l d0,-(sp)
   10202:	|      jsr 14f5e <trimStack>
   10208:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1020a:	|      move.l (sp),d1
   1020c:	|      move.l 4(sp),d0
   10210:	|      move.l d1,-(sp)
   10212:	|      move.l d0,-(sp)
   10214:	|      jsr d304 <getCombinationFunction>
   1021a:	|      addq.l #8,sp
   1021c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10220:	|  ,-- beq.s 10240 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10222:	|  |   moveq #28,d0
   10224:	|  |   add.l 20(sp),d0
   10228:	|  |   move.l 8(sp),-(sp)
   1022c:	|  |   pea 2 <_start+0x2>
   10230:	|  |   move.l d0,-(sp)
   10232:	|  |   jsr 14ecc <setVariable>
   10238:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1023c:	|  |   moveq #4,d0
   1023e:	+--|-- bra.s 1025a <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10240:	|  '-> moveq #28,d0
   10242:	|      add.l 20(sp),d0
   10246:	|      clr.l -(sp)
   10248:	|      pea 1 <_start+0x1>
   1024c:	|      move.l d0,-(sp)
   1024e:	|      jsr 14ecc <setVariable>
   10254:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10258:	|      moveq #2,d0
}
   1025a:	'----> lea 12(sp),sp
   1025e:	       rts

00010260 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10260:	move.w #1,1ca16 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10268:	moveq #2,d0
}
   1026a:	rts

0001026c <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1026c:	moveq #24,d0
   1026e:	add.l 8(sp),d0
   10272:	move.l d0,-(sp)
   10274:	jsr 14f5e <trimStack>
   1027a:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1027c:	pea 19947 <talk.c.490538ff+0x28>
   10282:	jsr 170ba <KPrintF>
   10288:	addq.l #4,sp
	return BR_CONTINUE;
   1028a:	moveq #2,d0
}
   1028c:	rts

0001028e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1028e:	pea 19947 <talk.c.490538ff+0x28>
   10294:	jsr 170ba <KPrintF>
   1029a:	addq.l #4,sp
	return BR_CONTINUE;
   1029c:	moveq #2,d0
}
   1029e:	rts

000102a0 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   102a0:	pea 19947 <talk.c.490538ff+0x28>
   102a6:	jsr 170ba <KPrintF>
   102ac:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   102ae:	moveq #2,d0
}
   102b0:	rts

000102b2 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   102b2:	pea 19947 <talk.c.490538ff+0x28>
   102b8:	jsr 170ba <KPrintF>
   102be:	addq.l #4,sp
	return BR_CONTINUE;
   102c0:	moveq #2,d0
}
   102c2:	rts

000102c4 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   102c4:	pea 19947 <talk.c.490538ff+0x28>
   102ca:	jsr 170ba <KPrintF>
   102d0:	addq.l #4,sp
	return BR_CONTINUE;
   102d2:	moveq #2,d0
}
   102d4:	rts

000102d6 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   102d6:	pea 19947 <talk.c.490538ff+0x28>
   102dc:	jsr 170ba <KPrintF>
   102e2:	addq.l #4,sp
	return BR_CONTINUE;
   102e4:	moveq #2,d0
}
   102e6:	rts

000102e8 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   102e8:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   102ec:	       movea.l 20(sp),a0
   102f0:	       move.l 24(a0),d0
   102f4:	       move.l d0,-(sp)
   102f6:	       pea 1 <_start+0x1>
   102fa:	       moveq #16,d0
   102fc:	       add.l sp,d0
   102fe:	       move.l d0,-(sp)
   10300:	       jsr 145da <getValueType>
   10306:	       lea 12(sp),sp
   1030a:	       tst.w d0
   1030c:	   ,-- bne.s 10314 <builtIn_startMusic+0x2c>
   1030e:	   |   moveq #1,d0
   10310:	,--|-- bra.w 103b4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10314:	|  '-> moveq #24,d0
   10316:	|      add.l 20(sp),d0
   1031a:	|      move.l d0,-(sp)
   1031c:	|      jsr 14f5e <trimStack>
   10322:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10324:	|      movea.l 20(sp),a0
   10328:	|      move.l 24(a0),d0
   1032c:	|      move.l d0,-(sp)
   1032e:	|      pea 1 <_start+0x1>
   10332:	|      moveq #12,d0
   10334:	|      add.l sp,d0
   10336:	|      move.l d0,-(sp)
   10338:	|      jsr 145da <getValueType>
   1033e:	|      lea 12(sp),sp
   10342:	|      tst.w d0
   10344:	|  ,-- bne.s 1034a <builtIn_startMusic+0x62>
   10346:	|  |   moveq #1,d0
   10348:	+--|-- bra.s 103b4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1034a:	|  '-> moveq #24,d0
   1034c:	|      add.l 20(sp),d0
   10350:	|      move.l d0,-(sp)
   10352:	|      jsr 14f5e <trimStack>
   10358:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1035a:	|      movea.l 20(sp),a0
   1035e:	|      move.l 24(a0),d0
   10362:	|      move.l d0,-(sp)
   10364:	|      pea 5 <_start+0x5>
   10368:	|      lea 8(sp),a0
   1036c:	|      move.l a0,-(sp)
   1036e:	|      jsr 145da <getValueType>
   10374:	|      lea 12(sp),sp
   10378:	|      tst.w d0
   1037a:	|  ,-- bne.s 10380 <builtIn_startMusic+0x98>
   1037c:	|  |   moveq #1,d0
   1037e:	+--|-- bra.s 103b4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10380:	|  '-> moveq #24,d0
   10382:	|      add.l 20(sp),d0
   10386:	|      move.l d0,-(sp)
   10388:	|      jsr 14f5e <trimStack>
   1038e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10390:	|      movea.l 8(sp),a0
   10394:	|      move.l 4(sp),d1
   10398:	|      move.l (sp),d0
   1039a:	|      move.l a0,-(sp)
   1039c:	|      move.l d1,-(sp)
   1039e:	|      move.l d0,-(sp)
   103a0:	|      jsr cf06 <playMOD>
   103a6:	|      lea 12(sp),sp
   103aa:	|      tst.w d0
   103ac:	|  ,-- bne.s 103b2 <builtIn_startMusic+0xca>
   103ae:	|  |   moveq #2,d0
   103b0:	+--|-- bra.s 103b4 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   103b2:	|  '-> moveq #2,d0
}
   103b4:	'----> lea 12(sp),sp
   103b8:	       rts

000103ba <builtIn_stopMusic>:

builtIn(stopMusic)
{
   103ba:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103bc:	       movea.l 12(sp),a0
   103c0:	       move.l 24(a0),d0
   103c4:	       move.l d0,-(sp)
   103c6:	       pea 1 <_start+0x1>
   103ca:	       move.l sp,d0
   103cc:	       addq.l #8,d0
   103ce:	       move.l d0,-(sp)
   103d0:	       jsr 145da <getValueType>
   103d6:	       lea 12(sp),sp
   103da:	       tst.w d0
   103dc:	   ,-- bne.s 103e2 <builtIn_stopMusic+0x28>
   103de:	   |   moveq #1,d0
   103e0:	,--|-- bra.s 10400 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   103e2:	|  '-> moveq #24,d0
   103e4:	|      add.l 12(sp),d0
   103e8:	|      move.l d0,-(sp)
   103ea:	|      jsr 14f5e <trimStack>
   103f0:	|      addq.l #4,sp
	stopMOD (v);
   103f2:	|      move.l (sp),d0
   103f4:	|      move.l d0,-(sp)
   103f6:	|      jsr cfa2 <stopMOD>
   103fc:	|      addq.l #4,sp
	return BR_CONTINUE;
   103fe:	|      moveq #2,d0
}
   10400:	'----> addq.l #4,sp
   10402:	       rts

00010404 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10404:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10406:	       movea.l 16(sp),a0
   1040a:	       move.l 24(a0),d0
   1040e:	       move.l d0,-(sp)
   10410:	       pea 1 <_start+0x1>
   10414:	       move.l sp,d0
   10416:	       addq.l #8,d0
   10418:	       move.l d0,-(sp)
   1041a:	       jsr 145da <getValueType>
   10420:	       lea 12(sp),sp
   10424:	       tst.w d0
   10426:	   ,-- bne.s 1042c <builtIn_setMusicVolume+0x28>
   10428:	   |   moveq #1,d0
   1042a:	,--|-- bra.s 10486 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1042c:	|  '-> moveq #24,d0
   1042e:	|      add.l 16(sp),d0
   10432:	|      move.l d0,-(sp)
   10434:	|      jsr 14f5e <trimStack>
   1043a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1043c:	|      movea.l 16(sp),a0
   10440:	|      move.l 24(a0),d0
   10444:	|      move.l d0,-(sp)
   10446:	|      pea 1 <_start+0x1>
   1044a:	|      moveq #12,d0
   1044c:	|      add.l sp,d0
   1044e:	|      move.l d0,-(sp)
   10450:	|      jsr 145da <getValueType>
   10456:	|      lea 12(sp),sp
   1045a:	|      tst.w d0
   1045c:	|  ,-- bne.s 10462 <builtIn_setMusicVolume+0x5e>
   1045e:	|  |   moveq #1,d0
   10460:	+--|-- bra.s 10486 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10462:	|  '-> moveq #24,d0
   10464:	|      add.l 16(sp),d0
   10468:	|      move.l d0,-(sp)
   1046a:	|      jsr 14f5e <trimStack>
   10470:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10472:	|      move.l (sp),d1
   10474:	|      move.l 4(sp),d0
   10478:	|      move.l d1,-(sp)
   1047a:	|      move.l d0,-(sp)
   1047c:	|      jsr cf88 <setMusicVolume>
   10482:	|      addq.l #8,sp
	return BR_CONTINUE;
   10484:	|      moveq #2,d0
}
   10486:	'----> addq.l #8,sp
   10488:	       rts

0001048a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1048a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1048c:	       movea.l 12(sp),a0
   10490:	       move.l 24(a0),d0
   10494:	       move.l d0,-(sp)
   10496:	       pea 1 <_start+0x1>
   1049a:	       move.l sp,d0
   1049c:	       addq.l #8,d0
   1049e:	       move.l d0,-(sp)
   104a0:	       jsr 145da <getValueType>
   104a6:	       lea 12(sp),sp
   104aa:	       tst.w d0
   104ac:	   ,-- bne.s 104b2 <builtIn_setDefaultMusicVolume+0x28>
   104ae:	   |   moveq #1,d0
   104b0:	,--|-- bra.s 104d0 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   104b2:	|  '-> moveq #24,d0
   104b4:	|      add.l 12(sp),d0
   104b8:	|      move.l d0,-(sp)
   104ba:	|      jsr 14f5e <trimStack>
   104c0:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   104c2:	|      move.l (sp),d0
   104c4:	|      move.l d0,-(sp)
   104c6:	|      jsr cf6c <setDefaultMusicVolume>
   104cc:	|      addq.l #4,sp
	return BR_CONTINUE;
   104ce:	|      moveq #2,d0
}
   104d0:	'----> addq.l #4,sp
   104d2:	       rts

000104d4 <builtIn_playSound>:

builtIn(playSound)
{
   104d4:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   104d6:	       movea.l 12(sp),a0
   104da:	       move.l 24(a0),d0
   104de:	       move.l d0,-(sp)
   104e0:	       pea 5 <_start+0x5>
   104e4:	       move.l sp,d0
   104e6:	       addq.l #8,d0
   104e8:	       move.l d0,-(sp)
   104ea:	       jsr 145da <getValueType>
   104f0:	       lea 12(sp),sp
   104f4:	       tst.w d0
   104f6:	   ,-- bne.s 104fc <builtIn_playSound+0x28>
   104f8:	   |   moveq #1,d0
   104fa:	,--|-- bra.s 10524 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   104fc:	|  '-> moveq #24,d0
   104fe:	|      add.l 12(sp),d0
   10502:	|      move.l d0,-(sp)
   10504:	|      jsr 14f5e <trimStack>
   1050a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1050c:	|      move.l (sp),d0
   1050e:	|      clr.l -(sp)
   10510:	|      move.l d0,-(sp)
   10512:	|      jsr cf90 <startSound>
   10518:	|      addq.l #8,sp
   1051a:	|      tst.w d0
   1051c:	|  ,-- bne.s 10522 <builtIn_playSound+0x4e>
   1051e:	|  |   moveq #2,d0
   10520:	+--|-- bra.s 10524 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10522:	|  '-> moveq #2,d0
}
   10524:	'----> addq.l #4,sp
   10526:	       rts

00010528 <builtIn_loopSound>:

builtIn(loopSound)
{
   10528:	             lea -28(sp),sp
   1052c:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1052e:	             tst.l 36(sp)
   10532:	         ,-- bgt.s 10548 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10534:	         |   pea 1996a <talk.c.490538ff+0x4b>
   1053a:	         |   jsr 170ba <KPrintF>
   10540:	         |   addq.l #4,sp
		return BR_ERROR;
   10542:	         |   moveq #1,d0
   10544:	,--------|-- bra.w 10704 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10548:	|        '-> moveq #1,d0
   1054a:	|            cmp.l 36(sp),d0
   1054e:	|     ,----- blt.s 105aa <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10550:	|     |      movea.l 40(sp),a0
   10554:	|     |      move.l 24(a0),d0
   10558:	|     |      move.l d0,-(sp)
   1055a:	|     |      pea 5 <_start+0x5>
   1055e:	|     |      lea 16(sp),a0
   10562:	|     |      move.l a0,-(sp)
   10564:	|     |      jsr 145da <getValueType>
   1056a:	|     |      lea 12(sp),sp
   1056e:	|     |      tst.w d0
   10570:	|     |  ,-- bne.s 10578 <builtIn_loopSound+0x50>
   10572:	|     |  |   moveq #1,d0
   10574:	+-----|--|-- bra.w 10704 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10578:	|     |  '-> moveq #24,d0
   1057a:	|     |      add.l 40(sp),d0
   1057e:	|     |      move.l d0,-(sp)
   10580:	|     |      jsr 14f5e <trimStack>
   10586:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10588:	|     |      move.l 8(sp),d0
   1058c:	|     |      pea 1 <_start+0x1>
   10590:	|     |      move.l d0,-(sp)
   10592:	|     |      jsr cf90 <startSound>
   10598:	|     |      addq.l #8,sp
   1059a:	|     |      tst.w d0
   1059c:	|     |  ,-- bne.s 105a4 <builtIn_loopSound+0x7c>
   1059e:	|     |  |   moveq #2,d0
   105a0:	+-----|--|-- bra.w 10704 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   105a4:	|     |  '-> moveq #2,d0
   105a6:	+-----|----- bra.w 10704 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   105aa:	|     '----> moveq #2,d1
   105ac:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   105b0:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   105b4:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   105b8:	|            movea.l 40(sp),a0
   105bc:	|            movea.l 24(a0),a0
   105c0:	|            move.l (a0),d0
   105c2:	|            moveq #5,d1
   105c4:	|            cmp.l d0,d1
   105c6:	|  ,-------- beq.w 1069e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   105ca:	|  |         movea.l 40(sp),a0
   105ce:	|  |         move.l 24(a0),d0
   105d2:	|  |         move.l d0,-(sp)
   105d4:	|  |         pea 1 <_start+0x1>
   105d8:	|  |         lea 12(sp),a0
   105dc:	|  |         move.l a0,-(sp)
   105de:	|  |         jsr 145da <getValueType>
   105e4:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   105e8:	|  |         moveq #24,d0
   105ea:	|  |         add.l 40(sp),d0
   105ee:	|  |         move.l d0,-(sp)
   105f0:	|  |         jsr 14f5e <trimStack>
   105f6:	|  |         addq.l #4,sp
			numParams--;
   105f8:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   105fc:	|  +-------- bra.w 1069e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10600:	|  |  ,----> movea.l 40(sp),a0
   10604:	|  |  |      move.l 24(a0),d0
   10608:	|  |  |      move.l d0,-(sp)
   1060a:	|  |  |      pea 5 <_start+0x5>
   1060e:	|  |  |      lea 16(sp),a0
   10612:	|  |  |      move.l a0,-(sp)
   10614:	|  |  |      jsr 145da <getValueType>
   1061a:	|  |  |      lea 12(sp),sp
   1061e:	|  |  |      tst.w d0
   10620:	|  |  |  ,-- bne.s 10636 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10622:	|  |  |  |   pea 199a8 <talk.c.490538ff+0x89>
   10628:	|  |  |  |   jsr 170ba <KPrintF>
   1062e:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10630:	|  |  |  |   moveq #1,d0
   10632:	+--|--|--|-- bra.w 10704 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10636:	|  |  |  '-> moveq #20,d0
   10638:	|  |  |      move.l d0,20(sp)
   1063c:	|  |  |      clr.l 16(sp)
   10640:	|  |  |      move.l 1c948 <SysBase>,d0
   10646:	|  |  |      movea.l d0,a6
   10648:	|  |  |      move.l 20(sp),d0
   1064c:	|  |  |      move.l 16(sp),d1
   10650:	|  |  |      jsr -684(a6)
   10654:	|  |  |      move.l d0,12(sp)
   10658:	|  |  |      move.l 12(sp),d0
   1065c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10660:	|  |  |  ,-- bne.s 10668 <builtIn_loopSound+0x140>
   10662:	|  |  |  |   moveq #1,d0
   10664:	+--|--|--|-- bra.w 10704 <builtIn_loopSound+0x1dc>

			s->next = old;
   10668:	|  |  |  '-> movea.l 28(sp),a0
   1066c:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10672:	|  |  |      movea.l 28(sp),a0
   10676:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1067a:	|  |  |      move.l 8(sp),d0
   1067e:	|  |  |      movea.l 28(sp),a0
   10682:	|  |  |      move.l d0,(a0)
			old = s;
   10684:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1068a:	|  |  |      moveq #24,d0
   1068c:	|  |  |      add.l 40(sp),d0
   10690:	|  |  |      move.l d0,-(sp)
   10692:	|  |  |      jsr 14f5e <trimStack>
   10698:	|  |  |      addq.l #4,sp
			numParams--;
   1069a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   1069e:	|  '--|----> tst.l 36(sp)
   106a2:	|     '----- bne.w 10600 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   106a6:	|        ,-- bra.s 106b2 <builtIn_loopSound+0x18a>
   106a8:	|     ,--|-> movea.l 28(sp),a0
   106ac:	|     |  |   move.l 4(a0),28(sp)
   106b2:	|     |  '-> movea.l 28(sp),a0
   106b6:	|     |      move.l 4(a0),d0
   106ba:	|     '----- bne.s 106a8 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   106bc:	|            move.l 4(sp),d0
   106c0:	|            moveq #1,d1
   106c2:	|            cmp.l d0,d1
   106c4:	|     ,----- bge.s 106dc <builtIn_loopSound+0x1b4>
			s->next = old;
   106c6:	|     |      movea.l 28(sp),a0
   106ca:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   106d0:	|     |      movea.l 24(sp),a0
   106d4:	|     |      move.l 28(sp),8(a0)
   106da:	|     |  ,-- bra.s 106ec <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   106dc:	|     '--|-> move.l 4(sp),d0
   106e0:	|        +-- beq.s 106ec <builtIn_loopSound+0x1c4>
			s->next = s;
   106e2:	|        |   movea.l 28(sp),a0
   106e6:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   106ec:	|        '-> movea.l 24(sp),a0
   106f0:	|            moveq #-1,d0
   106f2:	|            move.l d0,16(a0)
		playSoundList(old);
   106f6:	|            move.l 24(sp),-(sp)
   106fa:	|            jsr cf0a <playSoundList>
   10700:	|            addq.l #4,sp
		return BR_CONTINUE;
   10702:	|            moveq #2,d0
	}
}
   10704:	'----------> movea.l (sp)+,a6
   10706:	             lea 28(sp),sp
   1070a:	             rts

0001070c <builtIn_stopSound>:

builtIn(stopSound)
{
   1070c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1070e:	       movea.l 12(sp),a0
   10712:	       move.l 24(a0),d0
   10716:	       move.l d0,-(sp)
   10718:	       pea 5 <_start+0x5>
   1071c:	       move.l sp,d0
   1071e:	       addq.l #8,d0
   10720:	       move.l d0,-(sp)
   10722:	       jsr 145da <getValueType>
   10728:	       lea 12(sp),sp
   1072c:	       tst.w d0
   1072e:	   ,-- bne.s 10734 <builtIn_stopSound+0x28>
   10730:	   |   moveq #1,d0
   10732:	,--|-- bra.s 10752 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10734:	|  '-> moveq #24,d0
   10736:	|      add.l 12(sp),d0
   1073a:	|      move.l d0,-(sp)
   1073c:	|      jsr 14f5e <trimStack>
   10742:	|      addq.l #4,sp
	huntKillSound (v);
   10744:	|      move.l (sp),d0
   10746:	|      move.l d0,-(sp)
   10748:	|      jsr cf02 <huntKillSound>
   1074e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10750:	|      moveq #2,d0
}
   10752:	'----> addq.l #4,sp
   10754:	       rts

00010756 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10756:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10758:	       movea.l 12(sp),a0
   1075c:	       move.l 24(a0),d0
   10760:	       move.l d0,-(sp)
   10762:	       pea 1 <_start+0x1>
   10766:	       move.l sp,d0
   10768:	       addq.l #8,d0
   1076a:	       move.l d0,-(sp)
   1076c:	       jsr 145da <getValueType>
   10772:	       lea 12(sp),sp
   10776:	       tst.w d0
   10778:	   ,-- bne.s 1077e <builtIn_setDefaultSoundVolume+0x28>
   1077a:	   |   moveq #1,d0
   1077c:	,--|-- bra.s 1079c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1077e:	|  '-> moveq #24,d0
   10780:	|      add.l 12(sp),d0
   10784:	|      move.l d0,-(sp)
   10786:	|      jsr 14f5e <trimStack>
   1078c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   1078e:	|      move.l (sp),d0
   10790:	|      move.l d0,-(sp)
   10792:	|      jsr cf78 <setDefaultSoundVolume>
   10798:	|      addq.l #4,sp
	return BR_CONTINUE;
   1079a:	|      moveq #2,d0
}
   1079c:	'----> addq.l #4,sp
   1079e:	       rts

000107a0 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   107a0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107a2:	       movea.l 16(sp),a0
   107a6:	       move.l 24(a0),d0
   107aa:	       move.l d0,-(sp)
   107ac:	       pea 1 <_start+0x1>
   107b0:	       move.l sp,d0
   107b2:	       addq.l #8,d0
   107b4:	       move.l d0,-(sp)
   107b6:	       jsr 145da <getValueType>
   107bc:	       lea 12(sp),sp
   107c0:	       tst.w d0
   107c2:	   ,-- bne.s 107c8 <builtIn_setSoundVolume+0x28>
   107c4:	   |   moveq #1,d0
   107c6:	,--|-- bra.s 10822 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   107c8:	|  '-> moveq #24,d0
   107ca:	|      add.l 16(sp),d0
   107ce:	|      move.l d0,-(sp)
   107d0:	|      jsr 14f5e <trimStack>
   107d6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107d8:	|      movea.l 16(sp),a0
   107dc:	|      move.l 24(a0),d0
   107e0:	|      move.l d0,-(sp)
   107e2:	|      pea 5 <_start+0x5>
   107e6:	|      moveq #12,d0
   107e8:	|      add.l sp,d0
   107ea:	|      move.l d0,-(sp)
   107ec:	|      jsr 145da <getValueType>
   107f2:	|      lea 12(sp),sp
   107f6:	|      tst.w d0
   107f8:	|  ,-- bne.s 107fe <builtIn_setSoundVolume+0x5e>
   107fa:	|  |   moveq #1,d0
   107fc:	+--|-- bra.s 10822 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   107fe:	|  '-> moveq #24,d0
   10800:	|      add.l 16(sp),d0
   10804:	|      move.l d0,-(sp)
   10806:	|      jsr 14f5e <trimStack>
   1080c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   1080e:	|      move.l (sp),d1
   10810:	|      move.l 4(sp),d0
   10814:	|      move.l d1,-(sp)
   10816:	|      move.l d0,-(sp)
   10818:	|      jsr cf8c <setSoundVolume>
   1081e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10820:	|      moveq #2,d0
}
   10822:	'----> addq.l #8,sp
   10824:	       rts

00010826 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10826:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1082a:	       movea.l 20(sp),a0
   1082e:	       move.l 24(a0),d0
   10832:	       move.l d0,-(sp)
   10834:	       pea 1 <_start+0x1>
   10838:	       moveq #12,d0
   1083a:	       add.l sp,d0
   1083c:	       move.l d0,-(sp)
   1083e:	       jsr 145da <getValueType>
   10844:	       lea 12(sp),sp
   10848:	       tst.w d0
   1084a:	   ,-- bne.s 10852 <builtIn_setSoundLoopPoints+0x2c>
   1084c:	   |   moveq #1,d0
   1084e:	,--|-- bra.w 108ea <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10852:	|  '-> moveq #24,d0
   10854:	|      add.l 20(sp),d0
   10858:	|      move.l d0,-(sp)
   1085a:	|      jsr 14f5e <trimStack>
   10860:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10862:	|      movea.l 20(sp),a0
   10866:	|      move.l 24(a0),d0
   1086a:	|      move.l d0,-(sp)
   1086c:	|      pea 1 <_start+0x1>
   10870:	|      lea 8(sp),a0
   10874:	|      move.l a0,-(sp)
   10876:	|      jsr 145da <getValueType>
   1087c:	|      lea 12(sp),sp
   10880:	|      tst.w d0
   10882:	|  ,-- bne.s 10888 <builtIn_setSoundLoopPoints+0x62>
   10884:	|  |   moveq #1,d0
   10886:	+--|-- bra.s 108ea <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10888:	|  '-> moveq #24,d0
   1088a:	|      add.l 20(sp),d0
   1088e:	|      move.l d0,-(sp)
   10890:	|      jsr 14f5e <trimStack>
   10896:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10898:	|      movea.l 20(sp),a0
   1089c:	|      move.l 24(a0),d0
   108a0:	|      move.l d0,-(sp)
   108a2:	|      pea 5 <_start+0x5>
   108a6:	|      moveq #16,d0
   108a8:	|      add.l sp,d0
   108aa:	|      move.l d0,-(sp)
   108ac:	|      jsr 145da <getValueType>
   108b2:	|      lea 12(sp),sp
   108b6:	|      tst.w d0
   108b8:	|  ,-- bne.s 108be <builtIn_setSoundLoopPoints+0x98>
   108ba:	|  |   moveq #1,d0
   108bc:	+--|-- bra.s 108ea <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   108be:	|  '-> moveq #24,d0
   108c0:	|      add.l 20(sp),d0
   108c4:	|      move.l d0,-(sp)
   108c6:	|      jsr 14f5e <trimStack>
   108cc:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   108ce:	|      movea.l 4(sp),a0
   108d2:	|      move.l (sp),d1
   108d4:	|      move.l 8(sp),d0
   108d8:	|      move.l a0,-(sp)
   108da:	|      move.l d1,-(sp)
   108dc:	|      move.l d0,-(sp)
   108de:	|      jsr cf84 <setSoundLoop>
   108e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   108e8:	|      moveq #2,d0
}
   108ea:	'----> lea 12(sp),sp
   108ee:	       rts

000108f0 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   108f0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   108f2:	          movea.l 12(sp),a0
   108f6:	          movea.l 24(a0),a0
   108fa:	          move.l (a0),d0
   108fc:	          moveq #5,d1
   108fe:	          cmp.l d0,d1
   10900:	,-------- bne.s 10944 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10902:	|         movea.l 12(sp),a0
   10906:	|         move.l 24(a0),d0
   1090a:	|         move.l d0,-(sp)
   1090c:	|         pea 5 <_start+0x5>
   10910:	|         move.l sp,d0
   10912:	|         addq.l #8,d0
   10914:	|         move.l d0,-(sp)
   10916:	|         jsr 145da <getValueType>
   1091c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10920:	|         moveq #24,d0
   10922:	|         add.l 12(sp),d0
   10926:	|         move.l d0,-(sp)
   10928:	|         jsr 14f5e <trimStack>
   1092e:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10930:	|         move.l (sp),d0
   10932:	|         move.l d0,-(sp)
   10934:	|         jsr 16864 <setFloor>
   1093a:	|         addq.l #4,sp
   1093c:	|         tst.w d0
   1093e:	|  ,----- bne.s 1095a <builtIn_setFloor+0x6a>
   10940:	|  |      moveq #1,d0
   10942:	|  |  ,-- bra.s 1095c <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10944:	'--|--|-> moveq #24,d0
   10946:	   |  |   add.l 12(sp),d0
   1094a:	   |  |   move.l d0,-(sp)
   1094c:	   |  |   jsr 14f5e <trimStack>
   10952:	   |  |   addq.l #4,sp
		setFloorNull ();
   10954:	   |  |   jsr 16fde <setFloorNull>
	}
	return BR_CONTINUE;
   1095a:	   '--|-> moveq #2,d0
}
   1095c:	      '-> addq.l #4,sp
   1095e:	          rts

00010960 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10960:	jsr 160e0 <drawFloor>
	return BR_CONTINUE;
   10966:	moveq #2,d0
}
   10968:	rts

0001096a <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   1096a:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1096c:	          movea.l 12(sp),a0
   10970:	          movea.l 24(a0),a0
   10974:	          move.l (a0),d0
   10976:	          moveq #5,d1
   10978:	          cmp.l d0,d1
   1097a:	,-------- bne.s 109be <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1097c:	|         movea.l 12(sp),a0
   10980:	|         move.l 24(a0),d0
   10984:	|         move.l d0,-(sp)
   10986:	|         pea 5 <_start+0x5>
   1098a:	|         move.l sp,d0
   1098c:	|         addq.l #8,d0
   1098e:	|         move.l d0,-(sp)
   10990:	|         jsr 145da <getValueType>
   10996:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   1099a:	|         moveq #24,d0
   1099c:	|         add.l 12(sp),d0
   109a0:	|         move.l d0,-(sp)
   109a2:	|         jsr 14f5e <trimStack>
   109a8:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   109aa:	|         move.l (sp),d0
   109ac:	|         move.l d0,-(sp)
   109ae:	|         jsr 8432 <setZBuffer>
   109b4:	|         addq.l #4,sp
   109b6:	|         tst.w d0
   109b8:	|  ,----- bne.s 109d4 <builtIn_setZBuffer+0x6a>
   109ba:	|  |      moveq #1,d0
   109bc:	|  |  ,-- bra.s 109d6 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   109be:	'--|--|-> moveq #24,d0
   109c0:	   |  |   add.l 12(sp),d0
   109c4:	   |  |   move.l d0,-(sp)
   109c6:	   |  |   jsr 14f5e <trimStack>
   109cc:	   |  |   addq.l #4,sp
		killZBuffer ();
   109ce:	   |  |   jsr 83e6 <killZBuffer>
	}
	return BR_CONTINUE;
   109d4:	   '--|-> moveq #2,d0
}
   109d6:	      '-> addq.l #4,sp
   109d8:	          rts

000109da <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   109da:	pea 199df <talk.c.490538ff+0xc0>
   109e0:	jsr 170ba <KPrintF>
   109e6:	addq.l #4,sp
	return BR_CONTINUE;
   109e8:	moveq #2,d0
}
   109ea:	rts

000109ec <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109ec:	          movea.l 8(sp),a0
   109f0:	          move.l 24(a0),d0
   109f4:	          move.l d0,-(sp)
   109f6:	          pea 1 <_start+0x1>
   109fa:	          pea 1ca12 <speechMode>
   10a00:	          jsr 145da <getValueType>
   10a06:	          lea 12(sp),sp
   10a0a:	          tst.w d0
   10a0c:	      ,-- bne.s 10a12 <builtIn_setSpeechMode+0x26>
   10a0e:	      |   moveq #1,d0
   10a10:	,-----|-- bra.s 10a4a <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10a12:	|     '-> moveq #24,d0
   10a14:	|         add.l 8(sp),d0
   10a18:	|         move.l d0,-(sp)
   10a1a:	|         jsr 14f5e <trimStack>
   10a20:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10a22:	|         move.l 1ca12 <speechMode>,d0
   10a28:	|     ,-- bmi.s 10a36 <builtIn_setSpeechMode+0x4a>
   10a2a:	|     |   move.l 1ca12 <speechMode>,d0
   10a30:	|     |   moveq #2,d1
   10a32:	|     |   cmp.l d0,d1
   10a34:	|  ,--|-- bge.s 10a48 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10a36:	|  |  '-> pea 199f8 <talk.c.490538ff+0xd9>
   10a3c:	|  |      jsr 170ba <KPrintF>
   10a42:	|  |      addq.l #4,sp
		return BR_ERROR;
   10a44:	|  |      moveq #1,d0
   10a46:	+--|----- bra.s 10a4a <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10a48:	|  '----> moveq #2,d0
}
   10a4a:	'-------> rts

00010a4c <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10a4c:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10a4e:	       jsr 3d6c <isThereAnySpeechGoingOn>
   10a54:	       move.l d0,(sp)
	if (i == -1) {
   10a56:	       moveq #-1,d0
   10a58:	       cmp.l (sp),d0
   10a5a:	,----- bne.s 10a76 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10a5c:	|      moveq #28,d0
   10a5e:	|      add.l 12(sp),d0
   10a62:	|      clr.l -(sp)
   10a64:	|      pea 1 <_start+0x1>
   10a68:	|      move.l d0,-(sp)
   10a6a:	|      jsr 14ecc <setVariable>
   10a70:	|      lea 12(sp),sp
   10a74:	|  ,-- bra.s 10a8e <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10a76:	'--|-> moveq #28,d0
   10a78:	   |   add.l 12(sp),d0
   10a7c:	   |   move.l (sp),-(sp)
   10a7e:	   |   pea 7 <_start+0x7>
   10a82:	   |   move.l d0,-(sp)
   10a84:	   |   jsr 14ecc <setVariable>
   10a8a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10a8e:	   '-> moveq #2,d0
}
   10a90:	       addq.l #4,sp
   10a92:	       rts

00010a94 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10a94:	jsr 693c <killSpeechTimers>
	return BR_CONTINUE;
   10a9a:	moveq #2,d0
}
   10a9c:	rts

00010a9e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10a9e:	       move.l 1ca58 <overRegion>,d0
   10aa4:	,----- beq.s 10ace <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10aa6:	|      movea.l 1ca58 <overRegion>,a0
   10aac:	|      movea.l 28(a0),a0
   10ab0:	|      move.l 4(a0),d1
   10ab4:	|      moveq #28,d0
   10ab6:	|      add.l 8(sp),d0
   10aba:	|      move.l d1,-(sp)
   10abc:	|      pea 7 <_start+0x7>
   10ac0:	|      move.l d0,-(sp)
   10ac2:	|      jsr 14ecc <setVariable>
   10ac8:	|      lea 12(sp),sp
   10acc:	|  ,-- bra.s 10ae6 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10ace:	'--|-> moveq #28,d0
   10ad0:	   |   add.l 8(sp),d0
   10ad4:	   |   clr.l -(sp)
   10ad6:	   |   pea 1 <_start+0x1>
   10ada:	   |   move.l d0,-(sp)
   10adc:	   |   jsr 14ecc <setVariable>
   10ae2:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10ae6:	   '-> moveq #2,d0
}
   10ae8:	       rts

00010aea <builtIn_rename>:

builtIn(rename)
{
   10aea:	       lea -16(sp),sp
   10aee:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10af0:	       movea.l 28(sp),a0
   10af4:	       move.l 24(a0),d0
   10af8:	       move.l d0,-(sp)
   10afa:	       jsr 14bb0 <getTextFromAnyVar>
   10b00:	       addq.l #4,sp
   10b02:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10b06:	   ,-- bne.s 10b0c <builtIn_rename+0x22>
   10b08:	   |   moveq #1,d0
   10b0a:	,--|-- bra.s 10b86 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10b0c:	|  '-> moveq #24,d0
   10b0e:	|      add.l 28(sp),d0
   10b12:	|      move.l d0,-(sp)
   10b14:	|      jsr 14f5e <trimStack>
   10b1a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10b1c:	|      movea.l 28(sp),a0
   10b20:	|      move.l 24(a0),d0
   10b24:	|      move.l d0,-(sp)
   10b26:	|      pea 7 <_start+0x7>
   10b2a:	|      lea 12(sp),a0
   10b2e:	|      move.l a0,-(sp)
   10b30:	|      jsr 145da <getValueType>
   10b36:	|      lea 12(sp),sp
   10b3a:	|      tst.w d0
   10b3c:	|  ,-- bne.s 10b42 <builtIn_rename+0x58>
   10b3e:	|  |   moveq #1,d0
   10b40:	+--|-- bra.s 10b86 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10b42:	|  '-> moveq #24,d0
   10b44:	|      add.l 28(sp),d0
   10b48:	|      move.l d0,-(sp)
   10b4a:	|      jsr 14f5e <trimStack>
   10b50:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10b52:	|      move.l 4(sp),d0
   10b56:	|      move.l d0,-(sp)
   10b58:	|      jsr d2d0 <findObjectType>
   10b5e:	|      addq.l #4,sp
   10b60:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10b64:	|      movea.l 12(sp),a0
   10b68:	|      move.l (a0),8(sp)
   10b6c:	|      move.l 1c948 <SysBase>,d0
   10b72:	|      movea.l d0,a6
   10b74:	|      movea.l 8(sp),a1
   10b78:	|      jsr -690(a6)
	o->screenName = newText;
   10b7c:	|      movea.l 12(sp),a0
   10b80:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10b84:	|      moveq #2,d0
}
   10b86:	'----> movea.l (sp)+,a6
   10b88:	       lea 16(sp),sp
   10b8c:	       rts

00010b8e <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10b8e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b92:	          movea.l 20(sp),a0
   10b96:	          move.l 24(a0),d0
   10b9a:	          move.l d0,-(sp)
   10b9c:	          pea 7 <_start+0x7>
   10ba0:	          lea 8(sp),a0
   10ba4:	          move.l a0,-(sp)
   10ba6:	          jsr 145da <getValueType>
   10bac:	          lea 12(sp),sp
   10bb0:	          tst.w d0
   10bb2:	      ,-- bne.s 10bba <builtIn_getObjectX+0x2c>
   10bb4:	      |   moveq #1,d0
   10bb6:	,-----|-- bra.w 10c56 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10bba:	|     '-> moveq #24,d0
   10bbc:	|         add.l 20(sp),d0
   10bc0:	|         move.l d0,-(sp)
   10bc2:	|         jsr 14f5e <trimStack>
   10bc8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10bca:	|         move.l (sp),d0
   10bcc:	|         move.l d0,-(sp)
   10bce:	|         jsr a362 <findPerson>
   10bd4:	|         addq.l #4,sp
   10bd6:	|         move.l d0,8(sp)
	if (pers) {
   10bda:	|     ,-- beq.s 10c08 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10bdc:	|     |   movea.l 8(sp),a0
   10be0:	|     |   move.l (a0),d0
   10be2:	|     |   move.l d0,-(sp)
   10be4:	|     |   jsr 17484 <__fixsfsi>
   10bea:	|     |   addq.l #4,sp
   10bec:	|     |   move.l d0,d1
   10bee:	|     |   moveq #28,d0
   10bf0:	|     |   add.l 20(sp),d0
   10bf4:	|     |   move.l d1,-(sp)
   10bf6:	|     |   pea 1 <_start+0x1>
   10bfa:	|     |   move.l d0,-(sp)
   10bfc:	|     |   jsr 14ecc <setVariable>
   10c02:	|     |   lea 12(sp),sp
   10c06:	|  ,--|-- bra.s 10c54 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10c08:	|  |  '-> move.l (sp),d0
   10c0a:	|  |      move.l d0,-(sp)
   10c0c:	|  |      jsr 1589c <getRegionForObject>
   10c12:	|  |      addq.l #4,sp
   10c14:	|  |      move.l d0,4(sp)
		if (la) {
   10c18:	|  |  ,-- beq.s 10c3c <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10c1a:	|  |  |   movea.l 4(sp),a0
   10c1e:	|  |  |   move.l 16(a0),d1
   10c22:	|  |  |   moveq #28,d0
   10c24:	|  |  |   add.l 20(sp),d0
   10c28:	|  |  |   move.l d1,-(sp)
   10c2a:	|  |  |   pea 1 <_start+0x1>
   10c2e:	|  |  |   move.l d0,-(sp)
   10c30:	|  |  |   jsr 14ecc <setVariable>
   10c36:	|  |  |   lea 12(sp),sp
   10c3a:	|  +--|-- bra.s 10c54 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10c3c:	|  |  '-> moveq #28,d0
   10c3e:	|  |      add.l 20(sp),d0
   10c42:	|  |      clr.l -(sp)
   10c44:	|  |      pea 1 <_start+0x1>
   10c48:	|  |      move.l d0,-(sp)
   10c4a:	|  |      jsr 14ecc <setVariable>
   10c50:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10c54:	|  '----> moveq #2,d0
}
   10c56:	'-------> lea 12(sp),sp
   10c5a:	          rts

00010c5c <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10c5c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c60:	          movea.l 20(sp),a0
   10c64:	          move.l 24(a0),d0
   10c68:	          move.l d0,-(sp)
   10c6a:	          pea 7 <_start+0x7>
   10c6e:	          lea 8(sp),a0
   10c72:	          move.l a0,-(sp)
   10c74:	          jsr 145da <getValueType>
   10c7a:	          lea 12(sp),sp
   10c7e:	          tst.w d0
   10c80:	      ,-- bne.s 10c88 <builtIn_getObjectY+0x2c>
   10c82:	      |   moveq #1,d0
   10c84:	,-----|-- bra.w 10d26 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10c88:	|     '-> moveq #24,d0
   10c8a:	|         add.l 20(sp),d0
   10c8e:	|         move.l d0,-(sp)
   10c90:	|         jsr 14f5e <trimStack>
   10c96:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c98:	|         move.l (sp),d0
   10c9a:	|         move.l d0,-(sp)
   10c9c:	|         jsr a362 <findPerson>
   10ca2:	|         addq.l #4,sp
   10ca4:	|         move.l d0,8(sp)
	if (pers) {
   10ca8:	|     ,-- beq.s 10cd8 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10caa:	|     |   movea.l 8(sp),a0
   10cae:	|     |   move.l 4(a0),d0
   10cb2:	|     |   move.l d0,-(sp)
   10cb4:	|     |   jsr 17484 <__fixsfsi>
   10cba:	|     |   addq.l #4,sp
   10cbc:	|     |   move.l d0,d1
   10cbe:	|     |   moveq #28,d0
   10cc0:	|     |   add.l 20(sp),d0
   10cc4:	|     |   move.l d1,-(sp)
   10cc6:	|     |   pea 1 <_start+0x1>
   10cca:	|     |   move.l d0,-(sp)
   10ccc:	|     |   jsr 14ecc <setVariable>
   10cd2:	|     |   lea 12(sp),sp
   10cd6:	|  ,--|-- bra.s 10d24 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10cd8:	|  |  '-> move.l (sp),d0
   10cda:	|  |      move.l d0,-(sp)
   10cdc:	|  |      jsr 1589c <getRegionForObject>
   10ce2:	|  |      addq.l #4,sp
   10ce4:	|  |      move.l d0,4(sp)
		if (la) {
   10ce8:	|  |  ,-- beq.s 10d0c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10cea:	|  |  |   movea.l 4(sp),a0
   10cee:	|  |  |   move.l 20(a0),d1
   10cf2:	|  |  |   moveq #28,d0
   10cf4:	|  |  |   add.l 20(sp),d0
   10cf8:	|  |  |   move.l d1,-(sp)
   10cfa:	|  |  |   pea 1 <_start+0x1>
   10cfe:	|  |  |   move.l d0,-(sp)
   10d00:	|  |  |   jsr 14ecc <setVariable>
   10d06:	|  |  |   lea 12(sp),sp
   10d0a:	|  +--|-- bra.s 10d24 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10d0c:	|  |  '-> moveq #28,d0
   10d0e:	|  |      add.l 20(sp),d0
   10d12:	|  |      clr.l -(sp)
   10d14:	|  |      pea 1 <_start+0x1>
   10d18:	|  |      move.l d0,-(sp)
   10d1a:	|  |      jsr 14ecc <setVariable>
   10d20:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10d24:	|  '----> moveq #2,d0
}
   10d26:	'-------> lea 12(sp),sp
   10d2a:	          rts

00010d2c <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10d2c:	       lea -32(sp),sp
   10d30:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d34:	       movea.l 56(sp),a0
   10d38:	       move.l 24(a0),d0
   10d3c:	       move.l d0,-(sp)
   10d3e:	       pea 1 <_start+0x1>
   10d42:	       lea 28(sp),a0
   10d46:	       move.l a0,-(sp)
   10d48:	       jsr 145da <getValueType>
   10d4e:	       lea 12(sp),sp
   10d52:	       tst.w d0
   10d54:	   ,-- bne.s 10d5c <builtIn_addScreenRegion+0x30>
   10d56:	   |   moveq #1,d0
   10d58:	,--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d5c:	|  '-> moveq #24,d0
   10d5e:	|      add.l 56(sp),d0
   10d62:	|      move.l d0,-(sp)
   10d64:	|      jsr 14f5e <trimStack>
   10d6a:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d6c:	|      movea.l 56(sp),a0
   10d70:	|      move.l 24(a0),d0
   10d74:	|      move.l d0,-(sp)
   10d76:	|      pea 1 <_start+0x1>
   10d7a:	|      moveq #48,d0
   10d7c:	|      add.l sp,d0
   10d7e:	|      move.l d0,-(sp)
   10d80:	|      jsr 145da <getValueType>
   10d86:	|      lea 12(sp),sp
   10d8a:	|      tst.w d0
   10d8c:	|  ,-- bne.s 10d94 <builtIn_addScreenRegion+0x68>
   10d8e:	|  |   moveq #1,d0
   10d90:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d94:	|  '-> moveq #24,d0
   10d96:	|      add.l 56(sp),d0
   10d9a:	|      move.l d0,-(sp)
   10d9c:	|      jsr 14f5e <trimStack>
   10da2:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10da4:	|      movea.l 56(sp),a0
   10da8:	|      move.l 24(a0),d0
   10dac:	|      move.l d0,-(sp)
   10dae:	|      pea 1 <_start+0x1>
   10db2:	|      moveq #52,d0
   10db4:	|      add.l sp,d0
   10db6:	|      move.l d0,-(sp)
   10db8:	|      jsr 145da <getValueType>
   10dbe:	|      lea 12(sp),sp
   10dc2:	|      tst.w d0
   10dc4:	|  ,-- bne.s 10dcc <builtIn_addScreenRegion+0xa0>
   10dc6:	|  |   moveq #1,d0
   10dc8:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10dcc:	|  '-> moveq #24,d0
   10dce:	|      add.l 56(sp),d0
   10dd2:	|      move.l d0,-(sp)
   10dd4:	|      jsr 14f5e <trimStack>
   10dda:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ddc:	|      movea.l 56(sp),a0
   10de0:	|      move.l 24(a0),d0
   10de4:	|      move.l d0,-(sp)
   10de6:	|      pea 1 <_start+0x1>
   10dea:	|      lea 32(sp),a0
   10dee:	|      move.l a0,-(sp)
   10df0:	|      jsr 145da <getValueType>
   10df6:	|      lea 12(sp),sp
   10dfa:	|      tst.w d0
   10dfc:	|  ,-- bne.s 10e04 <builtIn_addScreenRegion+0xd8>
   10dfe:	|  |   moveq #1,d0
   10e00:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e04:	|  '-> moveq #24,d0
   10e06:	|      add.l 56(sp),d0
   10e0a:	|      move.l d0,-(sp)
   10e0c:	|      jsr 14f5e <trimStack>
   10e12:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e14:	|      movea.l 56(sp),a0
   10e18:	|      move.l 24(a0),d0
   10e1c:	|      move.l d0,-(sp)
   10e1e:	|      pea 1 <_start+0x1>
   10e22:	|      lea 36(sp),a0
   10e26:	|      move.l a0,-(sp)
   10e28:	|      jsr 145da <getValueType>
   10e2e:	|      lea 12(sp),sp
   10e32:	|      tst.w d0
   10e34:	|  ,-- bne.s 10e3c <builtIn_addScreenRegion+0x110>
   10e36:	|  |   moveq #1,d0
   10e38:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e3c:	|  '-> moveq #24,d0
   10e3e:	|      add.l 56(sp),d0
   10e42:	|      move.l d0,-(sp)
   10e44:	|      jsr 14f5e <trimStack>
   10e4a:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e4c:	|      movea.l 56(sp),a0
   10e50:	|      move.l 24(a0),d0
   10e54:	|      move.l d0,-(sp)
   10e56:	|      pea 1 <_start+0x1>
   10e5a:	|      lea 40(sp),a0
   10e5e:	|      move.l a0,-(sp)
   10e60:	|      jsr 145da <getValueType>
   10e66:	|      lea 12(sp),sp
   10e6a:	|      tst.w d0
   10e6c:	|  ,-- bne.s 10e74 <builtIn_addScreenRegion+0x148>
   10e6e:	|  |   moveq #1,d0
   10e70:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e74:	|  '-> moveq #24,d0
   10e76:	|      add.l 56(sp),d0
   10e7a:	|      move.l d0,-(sp)
   10e7c:	|      jsr 14f5e <trimStack>
   10e82:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e84:	|      movea.l 56(sp),a0
   10e88:	|      move.l 24(a0),d0
   10e8c:	|      move.l d0,-(sp)
   10e8e:	|      pea 1 <_start+0x1>
   10e92:	|      lea 44(sp),a0
   10e96:	|      move.l a0,-(sp)
   10e98:	|      jsr 145da <getValueType>
   10e9e:	|      lea 12(sp),sp
   10ea2:	|      tst.w d0
   10ea4:	|  ,-- bne.s 10eac <builtIn_addScreenRegion+0x180>
   10ea6:	|  |   moveq #1,d0
   10ea8:	+--|-- bra.w 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10eac:	|  '-> moveq #24,d0
   10eae:	|      add.l 56(sp),d0
   10eb2:	|      move.l d0,-(sp)
   10eb4:	|      jsr 14f5e <trimStack>
   10eba:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ebc:	|      movea.l 56(sp),a0
   10ec0:	|      move.l 24(a0),d0
   10ec4:	|      move.l d0,-(sp)
   10ec6:	|      pea 7 <_start+0x7>
   10eca:	|      lea 24(sp),a0
   10ece:	|      move.l a0,-(sp)
   10ed0:	|      jsr 145da <getValueType>
   10ed6:	|      lea 12(sp),sp
   10eda:	|      tst.w d0
   10edc:	|  ,-- bne.s 10ee2 <builtIn_addScreenRegion+0x1b6>
   10ede:	|  |   moveq #1,d0
   10ee0:	+--|-- bra.s 10f36 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ee2:	|  '-> moveq #24,d0
   10ee4:	|      add.l 56(sp),d0
   10ee8:	|      move.l d0,-(sp)
   10eea:	|      jsr 14f5e <trimStack>
   10ef0:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10ef2:	|      move.l 16(sp),d5
   10ef6:	|      move.l 20(sp),d4
   10efa:	|      move.l 40(sp),d3
   10efe:	|      move.l 44(sp),d2
   10f02:	|      movea.l 24(sp),a1
   10f06:	|      movea.l 28(sp),a0
   10f0a:	|      move.l 32(sp),d1
   10f0e:	|      move.l 36(sp),d0
   10f12:	|      move.l d5,-(sp)
   10f14:	|      move.l d4,-(sp)
   10f16:	|      move.l d3,-(sp)
   10f18:	|      move.l d2,-(sp)
   10f1a:	|      move.l a1,-(sp)
   10f1c:	|      move.l a0,-(sp)
   10f1e:	|      move.l d1,-(sp)
   10f20:	|      move.l d0,-(sp)
   10f22:	|      jsr 15756 <addScreenRegion>
   10f28:	|      lea 32(sp),sp
   10f2c:	|      tst.w d0
   10f2e:	|  ,-- beq.s 10f34 <builtIn_addScreenRegion+0x208>
   10f30:	|  |   moveq #2,d0
   10f32:	+--|-- bra.s 10f36 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10f34:	|  '-> moveq #1,d0

}
   10f36:	'----> movem.l (sp)+,d2-d5
   10f3a:	       lea 32(sp),sp
   10f3e:	       rts

00010f40 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10f40:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f42:	       movea.l 12(sp),a0
   10f46:	       move.l 24(a0),d0
   10f4a:	       move.l d0,-(sp)
   10f4c:	       pea 7 <_start+0x7>
   10f50:	       move.l sp,d0
   10f52:	       addq.l #8,d0
   10f54:	       move.l d0,-(sp)
   10f56:	       jsr 145da <getValueType>
   10f5c:	       lea 12(sp),sp
   10f60:	       tst.w d0
   10f62:	   ,-- bne.s 10f68 <builtIn_removeScreenRegion+0x28>
   10f64:	   |   moveq #1,d0
   10f66:	,--|-- bra.s 10f86 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10f68:	|  '-> moveq #24,d0
   10f6a:	|      add.l 12(sp),d0
   10f6e:	|      move.l d0,-(sp)
   10f70:	|      jsr 14f5e <trimStack>
   10f76:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10f78:	|      move.l (sp),d0
   10f7a:	|      move.l d0,-(sp)
   10f7c:	|      jsr 15a44 <removeScreenRegion>
   10f82:	|      addq.l #4,sp
	return BR_CONTINUE;
   10f84:	|      moveq #2,d0
}
   10f86:	'----> addq.l #4,sp
   10f88:	       rts

00010f8a <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10f8a:	jsr 15bc8 <showBoxes>
	return BR_CONTINUE;
   10f90:	moveq #2,d0
}
   10f92:	rts

00010f94 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10f94:	jsr 158ca <killAllRegions>
	return BR_CONTINUE;
   10f9a:	moveq #2,d0
}
   10f9c:	rts

00010f9e <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10f9e:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10fa2:	       movea.l 24(sp),a0
   10fa6:	       move.l 24(a0),d0
   10faa:	       move.l d0,-(sp)
   10fac:	       jsr 14286 <getCostumeFromVar>
   10fb2:	       addq.l #4,sp
   10fb4:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10fb8:	   ,-- bne.s 10fc0 <builtIn_addCharacter+0x22>
   10fba:	   |   moveq #1,d0
   10fbc:	,--|-- bra.w 1109c <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10fc0:	|  '-> moveq #24,d0
   10fc2:	|      add.l 24(sp),d0
   10fc6:	|      move.l d0,-(sp)
   10fc8:	|      jsr 14f5e <trimStack>
   10fce:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fd0:	|      movea.l 24(sp),a0
   10fd4:	|      move.l 24(a0),d0
   10fd8:	|      move.l d0,-(sp)
   10fda:	|      pea 1 <_start+0x1>
   10fde:	|      lea 12(sp),a0
   10fe2:	|      move.l a0,-(sp)
   10fe4:	|      jsr 145da <getValueType>
   10fea:	|      lea 12(sp),sp
   10fee:	|      tst.w d0
   10ff0:	|  ,-- bne.s 10ff8 <builtIn_addCharacter+0x5a>
   10ff2:	|  |   moveq #1,d0
   10ff4:	+--|-- bra.w 1109c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10ff8:	|  '-> moveq #24,d0
   10ffa:	|      add.l 24(sp),d0
   10ffe:	|      move.l d0,-(sp)
   11000:	|      jsr 14f5e <trimStack>
   11006:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11008:	|      movea.l 24(sp),a0
   1100c:	|      move.l 24(a0),d0
   11010:	|      move.l d0,-(sp)
   11012:	|      pea 1 <_start+0x1>
   11016:	|      moveq #16,d0
   11018:	|      add.l sp,d0
   1101a:	|      move.l d0,-(sp)
   1101c:	|      jsr 145da <getValueType>
   11022:	|      lea 12(sp),sp
   11026:	|      tst.w d0
   11028:	|  ,-- bne.s 1102e <builtIn_addCharacter+0x90>
   1102a:	|  |   moveq #1,d0
   1102c:	+--|-- bra.s 1109c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1102e:	|  '-> moveq #24,d0
   11030:	|      add.l 24(sp),d0
   11034:	|      move.l d0,-(sp)
   11036:	|      jsr 14f5e <trimStack>
   1103c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1103e:	|      movea.l 24(sp),a0
   11042:	|      move.l 24(a0),d0
   11046:	|      move.l d0,-(sp)
   11048:	|      pea 7 <_start+0x7>
   1104c:	|      lea 8(sp),a0
   11050:	|      move.l a0,-(sp)
   11052:	|      jsr 145da <getValueType>
   11058:	|      lea 12(sp),sp
   1105c:	|      tst.w d0
   1105e:	|  ,-- bne.s 11064 <builtIn_addCharacter+0xc6>
   11060:	|  |   moveq #1,d0
   11062:	+--|-- bra.s 1109c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11064:	|  '-> moveq #24,d0
   11066:	|      add.l 24(sp),d0
   1106a:	|      move.l d0,-(sp)
   1106c:	|      jsr 14f5e <trimStack>
   11072:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11074:	|      movea.l (sp),a0
   11076:	|      move.l 4(sp),d1
   1107a:	|      move.l 8(sp),d0
   1107e:	|      move.l 12(sp),-(sp)
   11082:	|      move.l a0,-(sp)
   11084:	|      move.l d1,-(sp)
   11086:	|      move.l d0,-(sp)
   11088:	|      jsr 8f5c <addPerson>
   1108e:	|      lea 16(sp),sp
   11092:	|      tst.w d0
   11094:	|  ,-- beq.s 1109a <builtIn_addCharacter+0xfc>
   11096:	|  |   moveq #2,d0
   11098:	+--|-- bra.s 1109c <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1109a:	|  '-> moveq #1,d0
}
   1109c:	'----> lea 16(sp),sp
   110a0:	       rts

000110a2 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   110a2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110a4:	       movea.l 12(sp),a0
   110a8:	       move.l 24(a0),d0
   110ac:	       move.l d0,-(sp)
   110ae:	       pea 7 <_start+0x7>
   110b2:	       move.l sp,d0
   110b4:	       addq.l #8,d0
   110b6:	       move.l d0,-(sp)
   110b8:	       jsr 145da <getValueType>
   110be:	       lea 12(sp),sp
   110c2:	       tst.w d0
   110c4:	   ,-- bne.s 110ca <builtIn_hideCharacter+0x28>
   110c6:	   |   moveq #1,d0
   110c8:	,--|-- bra.s 110ea <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   110ca:	|  '-> moveq #24,d0
   110cc:	|      add.l 12(sp),d0
   110d0:	|      move.l d0,-(sp)
   110d2:	|      jsr 14f5e <trimStack>
   110d8:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   110da:	|      move.l (sp),d0
   110dc:	|      move.l d0,-(sp)
   110de:	|      clr.l -(sp)
   110e0:	|      jsr b9f8 <setShown>
   110e6:	|      addq.l #8,sp
	return BR_CONTINUE;
   110e8:	|      moveq #2,d0
}
   110ea:	'----> addq.l #4,sp
   110ec:	       rts

000110ee <builtIn_showCharacter>:

builtIn(showCharacter)
{
   110ee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110f0:	       movea.l 12(sp),a0
   110f4:	       move.l 24(a0),d0
   110f8:	       move.l d0,-(sp)
   110fa:	       pea 7 <_start+0x7>
   110fe:	       move.l sp,d0
   11100:	       addq.l #8,d0
   11102:	       move.l d0,-(sp)
   11104:	       jsr 145da <getValueType>
   1110a:	       lea 12(sp),sp
   1110e:	       tst.w d0
   11110:	   ,-- bne.s 11116 <builtIn_showCharacter+0x28>
   11112:	   |   moveq #1,d0
   11114:	,--|-- bra.s 11138 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11116:	|  '-> moveq #24,d0
   11118:	|      add.l 12(sp),d0
   1111c:	|      move.l d0,-(sp)
   1111e:	|      jsr 14f5e <trimStack>
   11124:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11126:	|      move.l (sp),d0
   11128:	|      move.l d0,-(sp)
   1112a:	|      pea 1 <_start+0x1>
   1112e:	|      jsr b9f8 <setShown>
   11134:	|      addq.l #8,sp
	return BR_CONTINUE;
   11136:	|      moveq #2,d0
}
   11138:	'----> addq.l #4,sp
   1113a:	       rts

0001113c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1113c:	jsr 693c <killSpeechTimers>
	killMostPeople ();
   11142:	jsr a7f8 <killMostPeople>
	return BR_CONTINUE;
   11148:	moveq #2,d0
}
   1114a:	rts

0001114c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1114c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1114e:	       movea.l 16(sp),a0
   11152:	       move.l 24(a0),d0
   11156:	       move.l d0,-(sp)
   11158:	       pea 1 <_start+0x1>
   1115c:	       move.l sp,d0
   1115e:	       addq.l #8,d0
   11160:	       move.l d0,-(sp)
   11162:	       jsr 145da <getValueType>
   11168:	       lea 12(sp),sp
   1116c:	       tst.w d0
   1116e:	   ,-- bne.s 11174 <builtIn_setCharacterDrawMode+0x28>
   11170:	   |   moveq #1,d0
   11172:	,--|-- bra.s 111ce <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11174:	|  '-> moveq #24,d0
   11176:	|      add.l 16(sp),d0
   1117a:	|      move.l d0,-(sp)
   1117c:	|      jsr 14f5e <trimStack>
   11182:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11184:	|      movea.l 16(sp),a0
   11188:	|      move.l 24(a0),d0
   1118c:	|      move.l d0,-(sp)
   1118e:	|      pea 7 <_start+0x7>
   11192:	|      moveq #12,d0
   11194:	|      add.l sp,d0
   11196:	|      move.l d0,-(sp)
   11198:	|      jsr 145da <getValueType>
   1119e:	|      lea 12(sp),sp
   111a2:	|      tst.w d0
   111a4:	|  ,-- bne.s 111aa <builtIn_setCharacterDrawMode+0x5e>
   111a6:	|  |   moveq #1,d0
   111a8:	+--|-- bra.s 111ce <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   111aa:	|  '-> moveq #24,d0
   111ac:	|      add.l 16(sp),d0
   111b0:	|      move.l d0,-(sp)
   111b2:	|      jsr 14f5e <trimStack>
   111b8:	|      addq.l #4,sp
	setDrawMode (di, obj);
   111ba:	|      move.l 4(sp),d1
   111be:	|      move.l (sp),d0
   111c0:	|      move.l d1,-(sp)
   111c2:	|      move.l d0,-(sp)
   111c4:	|      jsr b336 <setDrawMode>
   111ca:	|      addq.l #8,sp
	return BR_CONTINUE;
   111cc:	|      moveq #2,d0
}
   111ce:	'----> addq.l #8,sp
   111d0:	       rts

000111d2 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   111d2:	pea 19a36 <talk.c.490538ff+0x117>
   111d8:	jsr 170ba <KPrintF>
   111de:	addq.l #4,sp
	return BR_CONTINUE;
   111e0:	moveq #2,d0
}
   111e2:	rts

000111e4 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   111e4:	pea 19a69 <talk.c.490538ff+0x14a>
   111ea:	jsr 170ba <KPrintF>
   111f0:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   111f2:	moveq #2,d0
}
   111f4:	rts

000111f6 <builtIn_setScale>:

builtIn(setScale)
{
   111f6:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111f8:	       movea.l 16(sp),a0
   111fc:	       move.l 24(a0),d0
   11200:	       move.l d0,-(sp)
   11202:	       pea 1 <_start+0x1>
   11206:	       move.l sp,d0
   11208:	       addq.l #8,d0
   1120a:	       move.l d0,-(sp)
   1120c:	       jsr 145da <getValueType>
   11212:	       lea 12(sp),sp
   11216:	       tst.w d0
   11218:	   ,-- bne.s 1121e <builtIn_setScale+0x28>
   1121a:	   |   moveq #1,d0
   1121c:	,--|-- bra.s 11280 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1121e:	|  '-> moveq #24,d0
   11220:	|      add.l 16(sp),d0
   11224:	|      move.l d0,-(sp)
   11226:	|      jsr 14f5e <trimStack>
   1122c:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1122e:	|      movea.l 16(sp),a0
   11232:	|      move.l 24(a0),d0
   11236:	|      move.l d0,-(sp)
   11238:	|      pea 1 <_start+0x1>
   1123c:	|      moveq #12,d0
   1123e:	|      add.l sp,d0
   11240:	|      move.l d0,-(sp)
   11242:	|      jsr 145da <getValueType>
   11248:	|      lea 12(sp),sp
   1124c:	|      tst.w d0
   1124e:	|  ,-- bne.s 11254 <builtIn_setScale+0x5e>
   11250:	|  |   moveq #1,d0
   11252:	+--|-- bra.s 11280 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11254:	|  '-> moveq #24,d0
   11256:	|      add.l 16(sp),d0
   1125a:	|      move.l d0,-(sp)
   1125c:	|      jsr 14f5e <trimStack>
   11262:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11264:	|      move.l (sp),d0
   11266:	|      move.l d0,d0
   11268:	|      movea.w d0,a1
   1126a:	|      move.l 4(sp),d0
   1126e:	|      move.l d0,d0
   11270:	|      movea.w d0,a0
   11272:	|      move.l a1,-(sp)
   11274:	|      move.l a0,-(sp)
   11276:	|      jsr b9d0 <setScale>
   1127c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1127e:	|      moveq #2,d0
}
   11280:	'----> addq.l #8,sp
   11282:	       rts

00011284 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11284:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11286:	       movea.l 12(sp),a0
   1128a:	       move.l 24(a0),d0
   1128e:	       move.l d0,-(sp)
   11290:	       pea 7 <_start+0x7>
   11294:	       move.l sp,d0
   11296:	       addq.l #8,d0
   11298:	       move.l d0,-(sp)
   1129a:	       jsr 145da <getValueType>
   112a0:	       lea 12(sp),sp
   112a4:	       tst.w d0
   112a6:	   ,-- bne.s 112ac <builtIn_stopCharacter+0x28>
   112a8:	   |   moveq #1,d0
   112aa:	,--|-- bra.s 112e4 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   112ac:	|  '-> moveq #24,d0
   112ae:	|      add.l 12(sp),d0
   112b2:	|      move.l d0,-(sp)
   112b4:	|      jsr 14f5e <trimStack>
   112ba:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   112bc:	|      move.l (sp),d0
   112be:	|      move.l d0,-(sp)
   112c0:	|      jsr bb04 <stopPerson>
   112c6:	|      addq.l #4,sp
   112c8:	|      movea.w d0,a0
   112ca:	|      moveq #28,d0
   112cc:	|      add.l 12(sp),d0
   112d0:	|      move.l a0,-(sp)
   112d2:	|      pea 1 <_start+0x1>
   112d6:	|      move.l d0,-(sp)
   112d8:	|      jsr 14ecc <setVariable>
   112de:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112e2:	|      moveq #2,d0
}
   112e4:	'----> addq.l #4,sp
   112e6:	       rts

000112e8 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   112e8:	pea 19aa3 <talk.c.490538ff+0x184>
   112ee:	jsr 170ba <KPrintF>
   112f4:	addq.l #4,sp
	return BR_CONTINUE;
   112f6:	moveq #2,d0
}
   112f8:	rts

000112fa <builtIn_animate>:

builtIn(animate)
{
   112fa:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   112fc:	       movea.l 16(sp),a0
   11300:	       move.l 24(a0),d0
   11304:	       move.l d0,-(sp)
   11306:	       jsr 14ab2 <getAnimationFromVar>
   1130c:	       addq.l #4,sp
   1130e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11312:	   ,-- bne.s 11318 <builtIn_animate+0x1e>
   11314:	   |   moveq #1,d0
   11316:	,--|-- bra.s 11396 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11318:	|  '-> moveq #24,d0
   1131a:	|      add.l 16(sp),d0
   1131e:	|      move.l d0,-(sp)
   11320:	|      jsr 14f5e <trimStack>
   11326:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11328:	|      movea.l 16(sp),a0
   1132c:	|      move.l 24(a0),d0
   11330:	|      move.l d0,-(sp)
   11332:	|      pea 7 <_start+0x7>
   11336:	|      move.l sp,d0
   11338:	|      addq.l #8,d0
   1133a:	|      move.l d0,-(sp)
   1133c:	|      jsr 145da <getValueType>
   11342:	|      lea 12(sp),sp
   11346:	|      tst.w d0
   11348:	|  ,-- bne.s 1134e <builtIn_animate+0x54>
   1134a:	|  |   moveq #1,d0
   1134c:	+--|-- bra.s 11396 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1134e:	|  '-> moveq #24,d0
   11350:	|      add.l 16(sp),d0
   11354:	|      move.l d0,-(sp)
   11356:	|      jsr 14f5e <trimStack>
   1135c:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1135e:	|      move.l (sp),d0
   11360:	|      move.l 4(sp),-(sp)
   11364:	|      move.l d0,-(sp)
   11366:	|      jsr 91d2 <animatePerson>
   1136c:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1136e:	|      move.l 4(sp),-(sp)
   11372:	|      jsr bb58 <timeForAnim>
   11378:	|      addq.l #4,sp
   1137a:	|      move.l d0,d1
   1137c:	|      moveq #28,d0
   1137e:	|      add.l 16(sp),d0
   11382:	|      move.l d1,-(sp)
   11384:	|      pea 1 <_start+0x1>
   11388:	|      move.l d0,-(sp)
   1138a:	|      jsr 14ecc <setVariable>
   11390:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11394:	|      moveq #2,d0
}
   11396:	'----> addq.l #8,sp
   11398:	       rts

0001139a <builtIn_setCostume>:

builtIn(setCostume)
{
   1139a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1139c:	       movea.l 16(sp),a0
   113a0:	       move.l 24(a0),d0
   113a4:	       move.l d0,-(sp)
   113a6:	       jsr 14286 <getCostumeFromVar>
   113ac:	       addq.l #4,sp
   113ae:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   113b2:	   ,-- bne.s 113b8 <builtIn_setCostume+0x1e>
   113b4:	   |   moveq #1,d0
   113b6:	,--|-- bra.s 11410 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   113b8:	|  '-> moveq #24,d0
   113ba:	|      add.l 16(sp),d0
   113be:	|      move.l d0,-(sp)
   113c0:	|      jsr 14f5e <trimStack>
   113c6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113c8:	|      movea.l 16(sp),a0
   113cc:	|      move.l 24(a0),d0
   113d0:	|      move.l d0,-(sp)
   113d2:	|      pea 7 <_start+0x7>
   113d6:	|      move.l sp,d0
   113d8:	|      addq.l #8,d0
   113da:	|      move.l d0,-(sp)
   113dc:	|      jsr 145da <getValueType>
   113e2:	|      lea 12(sp),sp
   113e6:	|      tst.w d0
   113e8:	|  ,-- bne.s 113ee <builtIn_setCostume+0x54>
   113ea:	|  |   moveq #1,d0
   113ec:	+--|-- bra.s 11410 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   113ee:	|  '-> moveq #24,d0
   113f0:	|      add.l 16(sp),d0
   113f4:	|      move.l d0,-(sp)
   113f6:	|      jsr 14f5e <trimStack>
   113fc:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   113fe:	|      move.l (sp),d0
   11400:	|      move.l 4(sp),-(sp)
   11404:	|      move.l d0,-(sp)
   11406:	|      jsr 921c <animatePersonUsingPersona>
   1140c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1140e:	|      moveq #2,d0
}
   11410:	'----> addq.l #8,sp
   11412:	       rts

00011414 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11414:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11416:	       movea.l 16(sp),a0
   1141a:	       move.l 24(a0),d0
   1141e:	       move.l d0,-(sp)
   11420:	       pea 1 <_start+0x1>
   11424:	       move.l sp,d0
   11426:	       addq.l #8,d0
   11428:	       move.l d0,-(sp)
   1142a:	       jsr 145da <getValueType>
   11430:	       lea 12(sp),sp
   11434:	       tst.w d0
   11436:	   ,-- bne.s 1143c <builtIn_floatCharacter+0x28>
   11438:	   |   moveq #1,d0
   1143a:	,--|-- bra.s 114b0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1143c:	|  '-> moveq #24,d0
   1143e:	|      add.l 16(sp),d0
   11442:	|      move.l d0,-(sp)
   11444:	|      jsr 14f5e <trimStack>
   1144a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1144c:	|      movea.l 16(sp),a0
   11450:	|      move.l 24(a0),d0
   11454:	|      move.l d0,-(sp)
   11456:	|      pea 7 <_start+0x7>
   1145a:	|      moveq #12,d0
   1145c:	|      add.l sp,d0
   1145e:	|      move.l d0,-(sp)
   11460:	|      jsr 145da <getValueType>
   11466:	|      lea 12(sp),sp
   1146a:	|      tst.w d0
   1146c:	|  ,-- bne.s 11472 <builtIn_floatCharacter+0x5e>
   1146e:	|  |   moveq #1,d0
   11470:	+--|-- bra.s 114b0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11472:	|  '-> moveq #24,d0
   11474:	|      add.l 16(sp),d0
   11478:	|      move.l d0,-(sp)
   1147a:	|      jsr 14f5e <trimStack>
   11480:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11482:	|      move.l 4(sp),d1
   11486:	|      move.l (sp),d0
   11488:	|      move.l d1,-(sp)
   1148a:	|      move.l d0,-(sp)
   1148c:	|      jsr a3ac <floatCharacter>
   11492:	|      addq.l #8,sp
   11494:	|      movea.w d0,a0
   11496:	|      moveq #28,d0
   11498:	|      add.l 16(sp),d0
   1149c:	|      move.l a0,-(sp)
   1149e:	|      pea 1 <_start+0x1>
   114a2:	|      move.l d0,-(sp)
   114a4:	|      jsr 14ecc <setVariable>
   114aa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114ae:	|      moveq #2,d0
}
   114b0:	'----> addq.l #8,sp
   114b2:	       rts

000114b4 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   114b4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114b6:	       movea.l 16(sp),a0
   114ba:	       move.l 24(a0),d0
   114be:	       move.l d0,-(sp)
   114c0:	       pea 1 <_start+0x1>
   114c4:	       move.l sp,d0
   114c6:	       addq.l #8,d0
   114c8:	       move.l d0,-(sp)
   114ca:	       jsr 145da <getValueType>
   114d0:	       lea 12(sp),sp
   114d4:	       tst.w d0
   114d6:	   ,-- bne.s 114dc <builtIn_setCharacterWalkSpeed+0x28>
   114d8:	   |   moveq #1,d0
   114da:	,--|-- bra.s 11550 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   114dc:	|  '-> moveq #24,d0
   114de:	|      add.l 16(sp),d0
   114e2:	|      move.l d0,-(sp)
   114e4:	|      jsr 14f5e <trimStack>
   114ea:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114ec:	|      movea.l 16(sp),a0
   114f0:	|      move.l 24(a0),d0
   114f4:	|      move.l d0,-(sp)
   114f6:	|      pea 7 <_start+0x7>
   114fa:	|      moveq #12,d0
   114fc:	|      add.l sp,d0
   114fe:	|      move.l d0,-(sp)
   11500:	|      jsr 145da <getValueType>
   11506:	|      lea 12(sp),sp
   1150a:	|      tst.w d0
   1150c:	|  ,-- bne.s 11512 <builtIn_setCharacterWalkSpeed+0x5e>
   1150e:	|  |   moveq #1,d0
   11510:	+--|-- bra.s 11550 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11512:	|  '-> moveq #24,d0
   11514:	|      add.l 16(sp),d0
   11518:	|      move.l d0,-(sp)
   1151a:	|      jsr 14f5e <trimStack>
   11520:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11522:	|      move.l 4(sp),d1
   11526:	|      move.l (sp),d0
   11528:	|      move.l d1,-(sp)
   1152a:	|      move.l d0,-(sp)
   1152c:	|      jsr b96c <setCharacterWalkSpeed>
   11532:	|      addq.l #8,sp
   11534:	|      movea.w d0,a0
   11536:	|      moveq #28,d0
   11538:	|      add.l 16(sp),d0
   1153c:	|      move.l a0,-(sp)
   1153e:	|      pea 1 <_start+0x1>
   11542:	|      move.l d0,-(sp)
   11544:	|      jsr 14ecc <setVariable>
   1154a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1154e:	|      moveq #2,d0
}
   11550:	'----> addq.l #8,sp
   11552:	       rts

00011554 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11554:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11556:	       movea.l 16(sp),a0
   1155a:	       move.l 24(a0),d0
   1155e:	       move.l d0,-(sp)
   11560:	       pea 1 <_start+0x1>
   11564:	       move.l sp,d0
   11566:	       addq.l #8,d0
   11568:	       move.l d0,-(sp)
   1156a:	       jsr 145da <getValueType>
   11570:	       lea 12(sp),sp
   11574:	       tst.w d0
   11576:	   ,-- bne.s 1157c <builtIn_turnCharacter+0x28>
   11578:	   |   moveq #1,d0
   1157a:	,--|-- bra.s 115f0 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1157c:	|  '-> moveq #24,d0
   1157e:	|      add.l 16(sp),d0
   11582:	|      move.l d0,-(sp)
   11584:	|      jsr 14f5e <trimStack>
   1158a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1158c:	|      movea.l 16(sp),a0
   11590:	|      move.l 24(a0),d0
   11594:	|      move.l d0,-(sp)
   11596:	|      pea 7 <_start+0x7>
   1159a:	|      moveq #12,d0
   1159c:	|      add.l sp,d0
   1159e:	|      move.l d0,-(sp)
   115a0:	|      jsr 145da <getValueType>
   115a6:	|      lea 12(sp),sp
   115aa:	|      tst.w d0
   115ac:	|  ,-- bne.s 115b2 <builtIn_turnCharacter+0x5e>
   115ae:	|  |   moveq #1,d0
   115b0:	+--|-- bra.s 115f0 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   115b2:	|  '-> moveq #24,d0
   115b4:	|      add.l 16(sp),d0
   115b8:	|      move.l d0,-(sp)
   115ba:	|      jsr 14f5e <trimStack>
   115c0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   115c2:	|      move.l (sp),d1
   115c4:	|      move.l 4(sp),d0
   115c8:	|      move.l d1,-(sp)
   115ca:	|      move.l d0,-(sp)
   115cc:	|      jsr bc10 <turnPersonToFace>
   115d2:	|      addq.l #8,sp
   115d4:	|      movea.w d0,a0
   115d6:	|      moveq #28,d0
   115d8:	|      add.l 16(sp),d0
   115dc:	|      move.l a0,-(sp)
   115de:	|      pea 1 <_start+0x1>
   115e2:	|      move.l d0,-(sp)
   115e4:	|      jsr 14ecc <setVariable>
   115ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115ee:	|      moveq #2,d0
}
   115f0:	'----> addq.l #8,sp
   115f2:	       rts

000115f4 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   115f4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115f6:	       movea.l 16(sp),a0
   115fa:	       move.l 24(a0),d0
   115fe:	       move.l d0,-(sp)
   11600:	       pea 1 <_start+0x1>
   11604:	       move.l sp,d0
   11606:	       addq.l #8,d0
   11608:	       move.l d0,-(sp)
   1160a:	       jsr 145da <getValueType>
   11610:	       lea 12(sp),sp
   11614:	       tst.w d0
   11616:	   ,-- bne.s 1161c <builtIn_setCharacterExtra+0x28>
   11618:	   |   moveq #1,d0
   1161a:	,--|-- bra.s 11690 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1161c:	|  '-> moveq #24,d0
   1161e:	|      add.l 16(sp),d0
   11622:	|      move.l d0,-(sp)
   11624:	|      jsr 14f5e <trimStack>
   1162a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1162c:	|      movea.l 16(sp),a0
   11630:	|      move.l 24(a0),d0
   11634:	|      move.l d0,-(sp)
   11636:	|      pea 7 <_start+0x7>
   1163a:	|      moveq #12,d0
   1163c:	|      add.l sp,d0
   1163e:	|      move.l d0,-(sp)
   11640:	|      jsr 145da <getValueType>
   11646:	|      lea 12(sp),sp
   1164a:	|      tst.w d0
   1164c:	|  ,-- bne.s 11652 <builtIn_setCharacterExtra+0x5e>
   1164e:	|  |   moveq #1,d0
   11650:	+--|-- bra.s 11690 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11652:	|  '-> moveq #24,d0
   11654:	|      add.l 16(sp),d0
   11658:	|      move.l d0,-(sp)
   1165a:	|      jsr 14f5e <trimStack>
   11660:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11662:	|      move.l (sp),d1
   11664:	|      move.l 4(sp),d0
   11668:	|      move.l d1,-(sp)
   1166a:	|      move.l d0,-(sp)
   1166c:	|      jsr b99a <setPersonExtra>
   11672:	|      addq.l #8,sp
   11674:	|      movea.w d0,a0
   11676:	|      moveq #28,d0
   11678:	|      add.l 16(sp),d0
   1167c:	|      move.l a0,-(sp)
   1167e:	|      pea 1 <_start+0x1>
   11682:	|      move.l d0,-(sp)
   11684:	|      jsr 14ecc <setVariable>
   1168a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1168e:	|      moveq #2,d0
}
   11690:	'----> addq.l #8,sp
   11692:	       rts

00011694 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11694:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11696:	       movea.l 12(sp),a0
   1169a:	       move.l 24(a0),d0
   1169e:	       move.l d0,-(sp)
   116a0:	       pea 7 <_start+0x7>
   116a4:	       move.l sp,d0
   116a6:	       addq.l #8,d0
   116a8:	       move.l d0,-(sp)
   116aa:	       jsr 145da <getValueType>
   116b0:	       lea 12(sp),sp
   116b4:	       tst.w d0
   116b6:	   ,-- bne.s 116bc <builtIn_removeCharacter+0x28>
   116b8:	   |   moveq #1,d0
   116ba:	,--|-- bra.s 116da <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   116bc:	|  '-> moveq #24,d0
   116be:	|      add.l 12(sp),d0
   116c2:	|      move.l d0,-(sp)
   116c4:	|      jsr 14f5e <trimStack>
   116ca:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   116cc:	|      move.l (sp),d0
   116ce:	|      move.l d0,-(sp)
   116d0:	|      jsr ab9a <removeOneCharacter>
   116d6:	|      addq.l #4,sp
	return BR_CONTINUE;
   116d8:	|      moveq #2,d0
}
   116da:	'----> addq.l #4,sp
   116dc:	       rts

000116de <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   116de:	                lea -28(sp),sp
   116e2:	                move.l d2,-(sp)
   116e4:	                move.l 44(sp),d1
   116e8:	                move.l 48(sp),d0
   116ec:	                move.w d1,d1
   116ee:	                move.w d1,6(sp)
   116f2:	                move.w d0,d0
   116f4:	                move.w d0,4(sp)
	KPrintF("moveChr started\n");
   116f8:	                pea 19ac1 <talk.c.490538ff+0x1a2>
   116fe:	                jsr 170ba <KPrintF>
   11704:	                addq.l #4,sp
	switch (numParams) {
   11706:	                moveq #2,d0
   11708:	                cmp.l 36(sp),d0
   1170c:	      ,-------- beq.w 11886 <moveChr+0x1a8>
   11710:	      |         moveq #3,d0
   11712:	      |         cmp.l 36(sp),d0
   11716:	,-----|-------- bne.w 119c8 <moveChr+0x2ea>
		case 3:
		{
			KPrintF("movechr - three parameters\n");
   1171a:	|     |         pea 19ad2 <talk.c.490538ff+0x1b3>
   11720:	|     |         jsr 170ba <KPrintF>
   11726:	|     |         addq.l #4,sp
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11728:	|     |         movea.l 40(sp),a0
   1172c:	|     |         move.l 24(a0),d0
   11730:	|     |         move.l d0,-(sp)
   11732:	|     |         pea 1 <_start+0x1>
   11736:	|     |         lea 20(sp),a0
   1173a:	|     |         move.l a0,-(sp)
   1173c:	|     |         jsr 145da <getValueType>
   11742:	|     |         lea 12(sp),sp
   11746:	|     |         tst.w d0
   11748:	|     |     ,-- bne.s 11750 <moveChr+0x72>
   1174a:	|     |     |   moveq #1,d0
   1174c:	|  ,--|-----|-- bra.w 119d8 <moveChr+0x2fa>
			trimStack (&fun -> stack);
   11750:	|  |  |     '-> moveq #24,d0
   11752:	|  |  |         add.l 40(sp),d0
   11756:	|  |  |         move.l d0,-(sp)
   11758:	|  |  |         jsr 14f5e <trimStack>
   1175e:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11760:	|  |  |         movea.l 40(sp),a0
   11764:	|  |  |         move.l 24(a0),d0
   11768:	|  |  |         move.l d0,-(sp)
   1176a:	|  |  |         pea 1 <_start+0x1>
   1176e:	|  |  |         lea 24(sp),a0
   11772:	|  |  |         move.l a0,-(sp)
   11774:	|  |  |         jsr 145da <getValueType>
   1177a:	|  |  |         lea 12(sp),sp
   1177e:	|  |  |         tst.w d0
   11780:	|  |  |     ,-- bne.s 11788 <moveChr+0xaa>
   11782:	|  |  |     |   moveq #1,d0
   11784:	|  +--|-----|-- bra.w 119d8 <moveChr+0x2fa>
			trimStack (&fun -> stack);
   11788:	|  |  |     '-> moveq #24,d0
   1178a:	|  |  |         add.l 40(sp),d0
   1178e:	|  |  |         move.l d0,-(sp)
   11790:	|  |  |         jsr 14f5e <trimStack>
   11796:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11798:	|  |  |         movea.l 40(sp),a0
   1179c:	|  |  |         move.l 24(a0),d0
   117a0:	|  |  |         move.l d0,-(sp)
   117a2:	|  |  |         pea 7 <_start+0x7>
   117a6:	|  |  |         lea 16(sp),a0
   117aa:	|  |  |         move.l a0,-(sp)
   117ac:	|  |  |         jsr 145da <getValueType>
   117b2:	|  |  |         lea 12(sp),sp
   117b6:	|  |  |         tst.w d0
   117b8:	|  |  |     ,-- bne.s 117c0 <moveChr+0xe2>
   117ba:	|  |  |     |   moveq #1,d0
   117bc:	|  +--|-----|-- bra.w 119d8 <moveChr+0x2fa>
			trimStack (&fun -> stack);
   117c0:	|  |  |     '-> moveq #24,d0
   117c2:	|  |  |         add.l 40(sp),d0
   117c6:	|  |  |         move.l d0,-(sp)
   117c8:	|  |  |         jsr 14f5e <trimStack>
   117ce:	|  |  |         addq.l #4,sp

			if (force) {
   117d0:	|  |  |         tst.w 6(sp)
   117d4:	|  |  |     ,-- beq.s 11812 <moveChr+0x134>
				KPrintF("movechr - force walk\n");
   117d6:	|  |  |     |   pea 19aee <talk.c.490538ff+0x1cf>
   117dc:	|  |  |     |   jsr 170ba <KPrintF>
   117e2:	|  |  |     |   addq.l #4,sp
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   117e4:	|  |  |     |   movea.l 8(sp),a0
   117e8:	|  |  |     |   move.l 12(sp),d1
   117ec:	|  |  |     |   move.l 16(sp),d0
   117f0:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4df7>
   117f4:	|  |  |     |   move.l 44(sp),-(sp)
   117f8:	|  |  |     |   move.l a0,-(sp)
   117fa:	|  |  |     |   move.l d1,-(sp)
   117fc:	|  |  |     |   move.l d0,-(sp)
   117fe:	|  |  |     |   jsr a3d0 <forceWalkingPerson>
   11804:	|  |  |     |   lea 20(sp),sp
   11808:	|  |  |     |   tst.w d0
   1180a:	|  |  |  ,--|-- beq.s 11880 <moveChr+0x1a2>
   1180c:	|  |  |  |  |   moveq #3,d0
   1180e:	|  +--|--|--|-- bra.w 119d8 <moveChr+0x2fa>
			} else if (immediate) {
   11812:	|  |  |  |  '-> tst.w 4(sp)
   11816:	|  |  |  |  ,-- beq.s 11844 <moveChr+0x166>
				KPrintF("movechr - immediate\n");
   11818:	|  |  |  |  |   pea 19b04 <talk.c.490538ff+0x1e5>
   1181e:	|  |  |  |  |   jsr 170ba <KPrintF>
   11824:	|  |  |  |  |   addq.l #4,sp
				jumpPerson (x, y, objectNumber);
   11826:	|  |  |  |  |   movea.l 8(sp),a0
   1182a:	|  |  |  |  |   move.l 12(sp),d1
   1182e:	|  |  |  |  |   move.l 16(sp),d0
   11832:	|  |  |  |  |   move.l a0,-(sp)
   11834:	|  |  |  |  |   move.l d1,-(sp)
   11836:	|  |  |  |  |   move.l d0,-(sp)
   11838:	|  |  |  |  |   jsr a6e6 <jumpPerson>
   1183e:	|  |  |  |  |   lea 12(sp),sp
   11842:	|  |  |  +--|-- bra.s 11880 <moveChr+0x1a2>
			} else {
				KPrintF("movechr - make walk\n");
   11844:	|  |  |  |  '-> pea 19b19 <talk.c.490538ff+0x1fa>
   1184a:	|  |  |  |      jsr 170ba <KPrintF>
   11850:	|  |  |  |      addq.l #4,sp
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11852:	|  |  |  |      movea.l 8(sp),a0
   11856:	|  |  |  |      move.l 12(sp),d1
   1185a:	|  |  |  |      move.l 16(sp),d0
   1185e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4df7>
   11862:	|  |  |  |      move.l 44(sp),-(sp)
   11866:	|  |  |  |      move.l a0,-(sp)
   11868:	|  |  |  |      move.l d1,-(sp)
   1186a:	|  |  |  |      move.l d0,-(sp)
   1186c:	|  |  |  |      jsr a8b6 <makeWalkingPerson>
   11872:	|  |  |  |      lea 20(sp),sp
   11876:	|  |  |  |      tst.w d0
   11878:	|  |  |  +----- beq.s 11880 <moveChr+0x1a2>
   1187a:	|  |  |  |      moveq #3,d0
   1187c:	|  +--|--|----- bra.w 119d8 <moveChr+0x2fa>
			}
			return BR_CONTINUE;
   11880:	|  |  |  '----> moveq #2,d0
   11882:	|  +--|-------- bra.w 119d8 <moveChr+0x2fa>
		}

		case 2:
		{
			KPrintF("two parameters\n");
   11886:	|  |  '-------> pea 19b2e <talk.c.490538ff+0x20f>
   1188c:	|  |            jsr 170ba <KPrintF>
   11892:	|  |            addq.l #4,sp
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11894:	|  |            movea.l 40(sp),a0
   11898:	|  |            move.l 24(a0),d0
   1189c:	|  |            move.l d0,-(sp)
   1189e:	|  |            pea 7 <_start+0x7>
   118a2:	|  |            moveq #32,d0
   118a4:	|  |            add.l sp,d0
   118a6:	|  |            move.l d0,-(sp)
   118a8:	|  |            jsr 145da <getValueType>
   118ae:	|  |            lea 12(sp),sp
   118b2:	|  |            tst.w d0
   118b4:	|  |        ,-- bne.s 118bc <moveChr+0x1de>
   118b6:	|  |        |   moveq #1,d0
   118b8:	|  +--------|-- bra.w 119d8 <moveChr+0x2fa>
			trimStack (&fun -> stack);
   118bc:	|  |        '-> moveq #24,d0
   118be:	|  |            add.l 40(sp),d0
   118c2:	|  |            move.l d0,-(sp)
   118c4:	|  |            jsr 14f5e <trimStack>
   118ca:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118cc:	|  |            movea.l 40(sp),a0
   118d0:	|  |            move.l 24(a0),d0
   118d4:	|  |            move.l d0,-(sp)
   118d6:	|  |            pea 7 <_start+0x7>
   118da:	|  |            lea 28(sp),a0
   118de:	|  |            move.l a0,-(sp)
   118e0:	|  |            jsr 145da <getValueType>
   118e6:	|  |            lea 12(sp),sp
   118ea:	|  |            tst.w d0
   118ec:	|  |        ,-- bne.s 118f4 <moveChr+0x216>
   118ee:	|  |        |   moveq #1,d0
   118f0:	|  +--------|-- bra.w 119d8 <moveChr+0x2fa>
			trimStack (&fun -> stack);
   118f4:	|  |        '-> moveq #24,d0
   118f6:	|  |            add.l 40(sp),d0
   118fa:	|  |            move.l d0,-(sp)
   118fc:	|  |            jsr 14f5e <trimStack>
   11902:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11904:	|  |            move.l 24(sp),d0
   11908:	|  |            move.l d0,-(sp)
   1190a:	|  |            jsr 1589c <getRegionForObject>
   11910:	|  |            addq.l #4,sp
   11912:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11916:	|  |        ,-- bne.s 1191e <moveChr+0x240>
   11918:	|  |        |   moveq #2,d0
   1191a:	|  +--------|-- bra.w 119d8 <moveChr+0x2fa>

			if (force)
   1191e:	|  |        '-> tst.w 6(sp)
   11922:	|  |        ,-- beq.s 1195e <moveChr+0x280>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11924:	|  |        |   movea.l 28(sp),a0
   11928:	|  |        |   move.l 24(a0),d2
   1192c:	|  |        |   movea.l 20(sp),a1
   11930:	|  |        |   movea.l 28(sp),a0
   11934:	|  |        |   move.l 20(a0),d1
   11938:	|  |        |   movea.l 28(sp),a0
   1193c:	|  |        |   move.l 16(a0),d0
   11940:	|  |        |   move.l d2,-(sp)
   11942:	|  |        |   move.l 44(sp),-(sp)
   11946:	|  |        |   move.l a1,-(sp)
   11948:	|  |        |   move.l d1,-(sp)
   1194a:	|  |        |   move.l d0,-(sp)
   1194c:	|  |        |   jsr a3d0 <forceWalkingPerson>
   11952:	|  |        |   lea 20(sp),sp
   11956:	|  |        |   tst.w d0
   11958:	|  |     ,--|-- beq.s 119c4 <moveChr+0x2e6>
   1195a:	|  |     |  |   moveq #3,d0
   1195c:	|  +-----|--|-- bra.s 119d8 <moveChr+0x2fa>
			}
			else if (immediate)
   1195e:	|  |     |  '-> tst.w 4(sp)
   11962:	|  |     |  ,-- beq.s 1198a <moveChr+0x2ac>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11964:	|  |     |  |   movea.l 20(sp),a1
   11968:	|  |     |  |   movea.l 28(sp),a0
   1196c:	|  |     |  |   move.l 20(a0),d1
   11970:	|  |     |  |   movea.l 28(sp),a0
   11974:	|  |     |  |   move.l 16(a0),d0
   11978:	|  |     |  |   move.l a1,-(sp)
   1197a:	|  |     |  |   move.l d1,-(sp)
   1197c:	|  |     |  |   move.l d0,-(sp)
   1197e:	|  |     |  |   jsr a6e6 <jumpPerson>
   11984:	|  |     |  |   lea 12(sp),sp
   11988:	|  |     +--|-- bra.s 119c4 <moveChr+0x2e6>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   1198a:	|  |     |  '-> movea.l 28(sp),a0
   1198e:	|  |     |      move.l 24(a0),d2
   11992:	|  |     |      movea.l 20(sp),a1
   11996:	|  |     |      movea.l 28(sp),a0
   1199a:	|  |     |      move.l 20(a0),d1
   1199e:	|  |     |      movea.l 28(sp),a0
   119a2:	|  |     |      move.l 16(a0),d0
   119a6:	|  |     |      move.l d2,-(sp)
   119a8:	|  |     |      move.l 44(sp),-(sp)
   119ac:	|  |     |      move.l a1,-(sp)
   119ae:	|  |     |      move.l d1,-(sp)
   119b0:	|  |     |      move.l d0,-(sp)
   119b2:	|  |     |      jsr a8b6 <makeWalkingPerson>
   119b8:	|  |     |      lea 20(sp),sp
   119bc:	|  |     |      tst.w d0
   119be:	|  |     +----- beq.s 119c4 <moveChr+0x2e6>
   119c0:	|  |     |      moveq #3,d0
   119c2:	|  +-----|----- bra.s 119d8 <moveChr+0x2fa>
			}
			return BR_CONTINUE;
   119c4:	|  |     '----> moveq #2,d0
   119c6:	|  +----------- bra.s 119d8 <moveChr+0x2fa>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   119c8:	'--|----------> pea 19b3e <talk.c.490538ff+0x21f>
   119ce:	   |            jsr 170ba <KPrintF>
   119d4:	   |            addq.l #4,sp
			return BR_ERROR;
   119d6:	   |            moveq #1,d0
	}
}
   119d8:	   '----------> move.l (sp)+,d2
   119da:	                lea 28(sp),sp
   119de:	                rts

000119e0 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	KPrintF("Builtin Movecharacter started\n");
   119e0:	pea 19b74 <talk.c.490538ff+0x255>
   119e6:	jsr 170ba <KPrintF>
   119ec:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);	
   119ee:	clr.l -(sp)
   119f0:	clr.l -(sp)
   119f2:	move.l 16(sp),-(sp)
   119f6:	move.l 16(sp),-(sp)
   119fa:	jsr 116de <moveChr>
   11a00:	lea 16(sp),sp
}
   11a04:	rts

00011a06 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11a06:	clr.l -(sp)
   11a08:	pea 1 <_start+0x1>
   11a0c:	move.l 16(sp),-(sp)
   11a10:	move.l 16(sp),-(sp)
   11a14:	jsr 116de <moveChr>
   11a1a:	lea 16(sp),sp
}
   11a1e:	rts

00011a20 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11a20:	pea 1 <_start+0x1>
   11a24:	clr.l -(sp)
   11a26:	move.l 16(sp),-(sp)
   11a2a:	move.l 16(sp),-(sp)
   11a2e:	jsr 116de <moveChr>
   11a34:	lea 16(sp),sp
}
   11a38:	rts

00011a3a <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11a3a:	jsr 8054 <clearStatusBar>
	return BR_CONTINUE;
   11a40:	moveq #2,d0
}
   11a42:	rts

00011a44 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11a44:	jsr 80fc <killLastStatus>
	return BR_CONTINUE;
   11a4a:	moveq #2,d0
}
   11a4c:	rts

00011a4e <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11a4e:	jsr 7fea <addStatusBar>
	return BR_CONTINUE;
   11a54:	moveq #2,d0
}
   11a56:	rts

00011a58 <builtIn_statusText>:

builtIn(statusText)
{
   11a58:	       subq.l #8,sp
   11a5a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11a5c:	       movea.l 20(sp),a0
   11a60:	       move.l 24(a0),d0
   11a64:	       move.l d0,-(sp)
   11a66:	       jsr 14bb0 <getTextFromAnyVar>
   11a6c:	       addq.l #4,sp
   11a6e:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11a72:	   ,-- bne.s 11a78 <builtIn_statusText+0x20>
   11a74:	   |   moveq #1,d0
   11a76:	,--|-- bra.s 11aac <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11a78:	|  '-> moveq #24,d0
   11a7a:	|      add.l 20(sp),d0
   11a7e:	|      move.l d0,-(sp)
   11a80:	|      jsr 14f5e <trimStack>
   11a86:	|      addq.l #4,sp
	setStatusBar(newText);
   11a88:	|      move.l 8(sp),-(sp)
   11a8c:	|      jsr 837c <setStatusBar>
   11a92:	|      addq.l #4,sp
	FreeVec(newText);
   11a94:	|      move.l 8(sp),4(sp)
   11a9a:	|      move.l 1c948 <SysBase>,d0
   11aa0:	|      movea.l d0,a6
   11aa2:	|      movea.l 4(sp),a1
   11aa6:	|      jsr -690(a6)
	return BR_CONTINUE;
   11aaa:	|      moveq #2,d0
}
   11aac:	'----> movea.l (sp)+,a6
   11aae:	       addq.l #8,sp
   11ab0:	       rts

00011ab2 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ab2:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ab4:	       movea.l 12(sp),a0
   11ab8:	       move.l 24(a0),d0
   11abc:	       move.l d0,-(sp)
   11abe:	       pea 1 <_start+0x1>
   11ac2:	       move.l sp,d0
   11ac4:	       addq.l #8,d0
   11ac6:	       move.l d0,-(sp)
   11ac8:	       jsr 145da <getValueType>
   11ace:	       lea 12(sp),sp
   11ad2:	       tst.w d0
   11ad4:	   ,-- bne.s 11ada <builtIn_lightStatus+0x28>
   11ad6:	   |   moveq #1,d0
   11ad8:	,--|-- bra.s 11af8 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11ada:	|  '-> moveq #24,d0
   11adc:	|      add.l 12(sp),d0
   11ae0:	|      move.l d0,-(sp)
   11ae2:	|      jsr 14f5e <trimStack>
   11ae8:	|      addq.l #4,sp
	setLitStatus (val);
   11aea:	|      move.l (sp),d0
   11aec:	|      move.l d0,-(sp)
   11aee:	|      jsr 836c <setLitStatus>
   11af4:	|      addq.l #4,sp
	return BR_CONTINUE;
   11af6:	|      moveq #2,d0
}
   11af8:	'----> addq.l #4,sp
   11afa:	       rts

00011afc <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11afc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11afe:	       movea.l 16(sp),a0
   11b02:	       move.l 24(a0),d0
   11b06:	       move.l d0,-(sp)
   11b08:	       pea 1 <_start+0x1>
   11b0c:	       move.l sp,d0
   11b0e:	       addq.l #8,d0
   11b10:	       move.l d0,-(sp)
   11b12:	       jsr 145da <getValueType>
   11b18:	       lea 12(sp),sp
   11b1c:	       tst.w d0
   11b1e:	   ,-- bne.s 11b24 <builtIn_positionStatus+0x28>
   11b20:	   |   moveq #1,d0
   11b22:	,--|-- bra.s 11b7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b24:	|  '-> moveq #24,d0
   11b26:	|      add.l 16(sp),d0
   11b2a:	|      move.l d0,-(sp)
   11b2c:	|      jsr 14f5e <trimStack>
   11b32:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b34:	|      movea.l 16(sp),a0
   11b38:	|      move.l 24(a0),d0
   11b3c:	|      move.l d0,-(sp)
   11b3e:	|      pea 1 <_start+0x1>
   11b42:	|      moveq #12,d0
   11b44:	|      add.l sp,d0
   11b46:	|      move.l d0,-(sp)
   11b48:	|      jsr 145da <getValueType>
   11b4e:	|      lea 12(sp),sp
   11b52:	|      tst.w d0
   11b54:	|  ,-- bne.s 11b5a <builtIn_positionStatus+0x5e>
   11b56:	|  |   moveq #1,d0
   11b58:	+--|-- bra.s 11b7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b5a:	|  '-> moveq #24,d0
   11b5c:	|      add.l 16(sp),d0
   11b60:	|      move.l d0,-(sp)
   11b62:	|      jsr 14f5e <trimStack>
   11b68:	|      addq.l #4,sp
	positionStatus (x, y);
   11b6a:	|      move.l (sp),d1
   11b6c:	|      move.l 4(sp),d0
   11b70:	|      move.l d1,-(sp)
   11b72:	|      move.l d0,-(sp)
   11b74:	|      jsr 815e <positionStatus>
   11b7a:	|      addq.l #8,sp
	return BR_CONTINUE;
   11b7c:	|      moveq #2,d0
}
   11b7e:	'----> addq.l #8,sp
   11b80:	       rts

00011b82 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11b82:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b84:	       movea.l 12(sp),a0
   11b88:	       move.l 24(a0),d0
   11b8c:	       move.l d0,-(sp)
   11b8e:	       pea 1 <_start+0x1>
   11b92:	       move.l sp,d0
   11b94:	       addq.l #8,d0
   11b96:	       move.l d0,-(sp)
   11b98:	       jsr 145da <getValueType>
   11b9e:	       lea 12(sp),sp
   11ba2:	       tst.w d0
   11ba4:	   ,-- bne.s 11baa <builtIn_alignStatus+0x28>
   11ba6:	   |   moveq #1,d0
   11ba8:	,--|-- bra.s 11bca <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11baa:	|  '-> moveq #24,d0
   11bac:	|      add.l 12(sp),d0
   11bb0:	|      move.l d0,-(sp)
   11bb2:	|      jsr 14f5e <trimStack>
   11bb8:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11bba:	|      move.l (sp),d0
   11bbc:	|      movea.l 1c2c6 <nowStatus>,a0
   11bc2:	|      move.l d0,d0
   11bc4:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11bc8:	|      moveq #2,d0
}
   11bca:	'----> addq.l #4,sp
   11bcc:	       rts

00011bce <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11bce:	             tst.l 4(sp)
   11bd2:	      ,----- beq.s 11bde <getFuncNumForCallback+0x10>
   11bd4:	      |      moveq #1,d0
   11bd6:	      |      cmp.l 4(sp),d0
   11bda:	      |  ,-- beq.s 11be4 <getFuncNumForCallback+0x16>
   11bdc:	   ,--|--|-- bra.s 11c1a <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11bde:	   |  '--|-> clr.l 12(sp)
			break;
   11be2:	,--|-----|-- bra.s 11c2c <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11be4:	|  |     '-> movea.l 8(sp),a0
   11be8:	|  |         move.l 24(a0),d0
   11bec:	|  |         move.l d0,-(sp)
   11bee:	|  |         pea 2 <_start+0x2>
   11bf2:	|  |         move.l 20(sp),-(sp)
   11bf6:	|  |         jsr 145da <getValueType>
   11bfc:	|  |         lea 12(sp),sp
   11c00:	|  |         tst.w d0
   11c02:	|  |     ,-- bne.s 11c08 <getFuncNumForCallback+0x3a>
   11c04:	|  |     |   clr.w d0
   11c06:	|  |  ,--|-- bra.s 11c2e <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11c08:	|  |  |  '-> moveq #24,d0
   11c0a:	|  |  |      add.l 8(sp),d0
   11c0e:	|  |  |      move.l d0,-(sp)
   11c10:	|  |  |      jsr 14f5e <trimStack>
   11c16:	|  |  |      addq.l #4,sp
			break;
   11c18:	+--|--|----- bra.s 11c2c <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11c1a:	|  '--|----> pea 19b93 <talk.c.490538ff+0x274>
   11c20:	|     |      jsr 170ba <KPrintF>
   11c26:	|     |      addq.l #4,sp
			return FALSE;
   11c28:	|     |      clr.w d0
   11c2a:	|     +----- bra.s 11c2e <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11c2c:	'-----|----> moveq #1,d0
}
   11c2e:	      '----> rts

00011c30 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11c30:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c32:	       move.l sp,d0
   11c34:	       move.l d0,-(sp)
   11c36:	       move.l 16(sp),-(sp)
   11c3a:	       move.l 16(sp),-(sp)
   11c3e:	       jsr 11bce <getFuncNumForCallback>
   11c44:	       lea 12(sp),sp
   11c48:	       tst.w d0
   11c4a:	,----- beq.s 11c5a <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11c4c:	|      movea.l 1c2b8 <currentEvents>,a0
   11c52:	|      move.l (sp),d0
   11c54:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11c56:	|      moveq #2,d0
   11c58:	|  ,-- bra.s 11c5c <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11c5a:	'--|-> moveq #1,d0
}
   11c5c:	   '-> addq.l #4,sp
   11c5e:	       rts

00011c60 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11c60:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c62:	       move.l sp,d0
   11c64:	       move.l d0,-(sp)
   11c66:	       move.l 16(sp),-(sp)
   11c6a:	       move.l 16(sp),-(sp)
   11c6e:	       jsr 11bce <getFuncNumForCallback>
   11c74:	       lea 12(sp),sp
   11c78:	       tst.w d0
   11c7a:	,----- beq.s 11c8c <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11c7c:	|      movea.l 1c2b8 <currentEvents>,a0
   11c82:	|      move.l (sp),d0
   11c84:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11c88:	|      moveq #2,d0
   11c8a:	|  ,-- bra.s 11c8e <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11c8c:	'--|-> moveq #1,d0
}
   11c8e:	   '-> addq.l #4,sp
   11c90:	       rts

00011c92 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11c92:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c94:	       move.l sp,d0
   11c96:	       move.l d0,-(sp)
   11c98:	       move.l 16(sp),-(sp)
   11c9c:	       move.l 16(sp),-(sp)
   11ca0:	       jsr 11bce <getFuncNumForCallback>
   11ca6:	       lea 12(sp),sp
   11caa:	       tst.w d0
   11cac:	,----- beq.s 11cbe <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11cae:	|      movea.l 1c2b8 <currentEvents>,a0
   11cb4:	|      move.l (sp),d0
   11cb6:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11cba:	|      moveq #2,d0
   11cbc:	|  ,-- bra.s 11cc0 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11cbe:	'--|-> moveq #1,d0
}
   11cc0:	   '-> addq.l #4,sp
   11cc2:	       rts

00011cc4 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11cc4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cc6:	       move.l sp,d0
   11cc8:	       move.l d0,-(sp)
   11cca:	       move.l 16(sp),-(sp)
   11cce:	       move.l 16(sp),-(sp)
   11cd2:	       jsr 11bce <getFuncNumForCallback>
   11cd8:	       lea 12(sp),sp
   11cdc:	       tst.w d0
   11cde:	,----- beq.s 11cf0 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11ce0:	|      movea.l 1c2b8 <currentEvents>,a0
   11ce6:	|      move.l (sp),d0
   11ce8:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11cec:	|      moveq #2,d0
   11cee:	|  ,-- bra.s 11cf2 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11cf0:	'--|-> moveq #1,d0
}
   11cf2:	   '-> addq.l #4,sp
   11cf4:	       rts

00011cf6 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11cf6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cf8:	       move.l sp,d0
   11cfa:	       move.l d0,-(sp)
   11cfc:	       move.l 16(sp),-(sp)
   11d00:	       move.l 16(sp),-(sp)
   11d04:	       jsr 11bce <getFuncNumForCallback>
   11d0a:	       lea 12(sp),sp
   11d0e:	       tst.w d0
   11d10:	,----- beq.s 11d22 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11d12:	|      movea.l 1c2b8 <currentEvents>,a0
   11d18:	|      move.l (sp),d0
   11d1a:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11d1e:	|      moveq #2,d0
   11d20:	|  ,-- bra.s 11d24 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11d22:	'--|-> moveq #1,d0
}
   11d24:	   '-> addq.l #4,sp
   11d26:	       rts

00011d28 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11d28:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d2a:	       move.l sp,d0
   11d2c:	       move.l d0,-(sp)
   11d2e:	       move.l 16(sp),-(sp)
   11d32:	       move.l 16(sp),-(sp)
   11d36:	       jsr 11bce <getFuncNumForCallback>
   11d3c:	       lea 12(sp),sp
   11d40:	       tst.w d0
   11d42:	,----- beq.s 11d54 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11d44:	|      movea.l 1c2b8 <currentEvents>,a0
   11d4a:	|      move.l (sp),d0
   11d4c:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11d50:	|      moveq #2,d0
   11d52:	|  ,-- bra.s 11d56 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11d54:	'--|-> moveq #1,d0
}
   11d56:	   '-> addq.l #4,sp
   11d58:	       rts

00011d5a <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11d5a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d5c:	       move.l sp,d0
   11d5e:	       move.l d0,-(sp)
   11d60:	       move.l 16(sp),-(sp)
   11d64:	       move.l 16(sp),-(sp)
   11d68:	       jsr 11bce <getFuncNumForCallback>
   11d6e:	       lea 12(sp),sp
   11d72:	       tst.w d0
   11d74:	,----- beq.s 11d86 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11d76:	|      movea.l 1c2b8 <currentEvents>,a0
   11d7c:	|      move.l (sp),d0
   11d7e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11d82:	|      moveq #2,d0
   11d84:	|  ,-- bra.s 11d88 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11d86:	'--|-> moveq #1,d0
}
   11d88:	   '-> addq.l #4,sp
   11d8a:	       rts

00011d8c <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11d8c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d8e:	          move.l sp,d0
   11d90:	          move.l d0,-(sp)
   11d92:	          move.l 16(sp),-(sp)
   11d96:	          move.l 16(sp),-(sp)
   11d9a:	          jsr 11bce <getFuncNumForCallback>
   11da0:	          lea 12(sp),sp
   11da4:	          tst.w d0
   11da6:	,-------- beq.s 11dd2 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11da8:	|         move.l 1c918 <noStack>,d1
   11dae:	|         move.l (sp),d0
   11db0:	|         pea 1 <_start+0x1>
   11db4:	|         move.l d1,-(sp)
   11db6:	|         clr.l -(sp)
   11db8:	|         clr.l -(sp)
   11dba:	|         move.l d0,-(sp)
   11dbc:	|         jsr 7210 <startNewFunctionNum>
   11dc2:	|         lea 20(sp),sp
   11dc6:	|         tst.l d0
   11dc8:	|     ,-- bne.s 11dce <builtIn_spawnSub+0x42>
   11dca:	|     |   moveq #1,d0
   11dcc:	|  ,--|-- bra.s 11dd4 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11dce:	|  |  '-> moveq #2,d0
   11dd0:	|  +----- bra.s 11dd4 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11dd2:	'--|----> moveq #1,d0
}
   11dd4:	   '----> addq.l #4,sp
   11dd6:	          rts

00011dd8 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11dd8:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dda:	          move.l sp,d0
   11ddc:	          addq.l #4,d0
   11dde:	          move.l d0,-(sp)
   11de0:	          move.l 20(sp),-(sp)
   11de4:	          move.l 20(sp),-(sp)
   11de8:	          jsr 11bce <getFuncNumForCallback>
   11dee:	          lea 12(sp),sp
   11df2:	          tst.w d0
   11df4:	,-------- beq.s 11e2a <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11df6:	|         move.l 4(sp),d1
   11dfa:	|         move.l sp,d0
   11dfc:	|         addq.l #2,d0
   11dfe:	|         move.l d0,-(sp)
   11e00:	|         move.l 20(sp),-(sp)
   11e04:	|         move.l d1,-(sp)
   11e06:	|         jsr 4f22 <cancelAFunction>
   11e0c:	|         lea 12(sp),sp
		if (killedMyself) {
   11e10:	|         move.w 2(sp),d0
   11e14:	|  ,----- beq.s 11e26 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11e16:	|  |      move.l 16(sp),-(sp)
   11e1a:	|  |      jsr 4e14 <abortFunction>
   11e20:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11e22:	|  |      moveq #5,d0
   11e24:	|  |  ,-- bra.s 11e2c <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11e26:	|  '--|-> moveq #2,d0
   11e28:	|     +-- bra.s 11e2c <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11e2a:	'-----|-> moveq #1,d0
}
   11e2c:	      '-> addq.l #8,sp
   11e2e:	          rts

00011e30 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11e30:	       subq.l #8,sp
   11e32:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11e34:	       movea.l 20(sp),a0
   11e38:	       move.l 24(a0),d0
   11e3c:	       move.l d0,-(sp)
   11e3e:	       jsr 14bb0 <getTextFromAnyVar>
   11e44:	       addq.l #4,sp
   11e46:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11e4a:	   ,-- bne.s 11e50 <builtIn_stringWidth+0x20>
   11e4c:	   |   moveq #1,d0
   11e4e:	,--|-- bra.s 11e9e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11e50:	|  '-> moveq #24,d0
   11e52:	|      add.l 20(sp),d0
   11e56:	|      move.l d0,-(sp)
   11e58:	|      jsr 14f5e <trimStack>
   11e5e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11e60:	|      move.l 8(sp),-(sp)
   11e64:	|      jsr 156c4 <stringWidth>
   11e6a:	|      addq.l #4,sp
   11e6c:	|      move.l d0,d1
   11e6e:	|      moveq #28,d0
   11e70:	|      add.l 20(sp),d0
   11e74:	|      move.l d1,-(sp)
   11e76:	|      pea 1 <_start+0x1>
   11e7a:	|      move.l d0,-(sp)
   11e7c:	|      jsr 14ecc <setVariable>
   11e82:	|      lea 12(sp),sp
	FreeVec(theText);
   11e86:	|      move.l 8(sp),4(sp)
   11e8c:	|      move.l 1c948 <SysBase>,d0
   11e92:	|      movea.l d0,a6
   11e94:	|      movea.l 4(sp),a1
   11e98:	|      jsr -690(a6)
	return BR_CONTINUE;
   11e9c:	|      moveq #2,d0
}
   11e9e:	'----> movea.l (sp)+,a6
   11ea0:	       addq.l #8,sp
   11ea2:	       rts

00011ea4 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11ea4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ea6:	       movea.l 12(sp),a0
   11eaa:	       move.l 24(a0),d0
   11eae:	       move.l d0,-(sp)
   11eb0:	       pea 1 <_start+0x1>
   11eb4:	       move.l sp,d0
   11eb6:	       addq.l #8,d0
   11eb8:	       move.l d0,-(sp)
   11eba:	       jsr 145da <getValueType>
   11ec0:	       lea 12(sp),sp
   11ec4:	       tst.w d0
   11ec6:	   ,-- bne.s 11ecc <builtIn_hardScroll+0x28>
   11ec8:	   |   moveq #1,d0
   11eca:	,--|-- bra.s 11eea <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11ecc:	|  '-> moveq #24,d0
   11ece:	|      add.l 12(sp),d0
   11ed2:	|      move.l d0,-(sp)
   11ed4:	|      jsr 14f5e <trimStack>
   11eda:	|      addq.l #4,sp
	hardScroll (v);
   11edc:	|      move.l (sp),d0
   11ede:	|      move.l d0,-(sp)
   11ee0:	|      jsr d022 <hardScroll>
   11ee6:	|      addq.l #4,sp
	return BR_CONTINUE;
   11ee8:	|      moveq #2,d0
}
   11eea:	'----> addq.l #4,sp
   11eec:	       rts

00011eee <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11eee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ef0:	       movea.l 12(sp),a0
   11ef4:	       move.l 24(a0),d0
   11ef8:	       move.l d0,-(sp)
   11efa:	       pea 7 <_start+0x7>
   11efe:	       move.l sp,d0
   11f00:	       addq.l #8,d0
   11f02:	       move.l d0,-(sp)
   11f04:	       jsr 145da <getValueType>
   11f0a:	       lea 12(sp),sp
   11f0e:	       tst.w d0
   11f10:	   ,-- bne.s 11f16 <builtIn_isScreenRegion+0x28>
   11f12:	   |   moveq #1,d0
   11f14:	,--|-- bra.s 11f56 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11f16:	|  '-> moveq #24,d0
   11f18:	|      add.l 12(sp),d0
   11f1c:	|      move.l d0,-(sp)
   11f1e:	|      jsr 14f5e <trimStack>
   11f24:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11f26:	|      move.l (sp),d0
   11f28:	|      move.l d0,-(sp)
   11f2a:	|      jsr 1589c <getRegionForObject>
   11f30:	|      addq.l #4,sp
   11f32:	|      tst.l d0
   11f34:	|      sne d0
   11f36:	|      neg.b d0
   11f38:	|      moveq #0,d1
   11f3a:	|      move.b d0,d1
   11f3c:	|      moveq #28,d0
   11f3e:	|      add.l 12(sp),d0
   11f42:	|      move.l d1,-(sp)
   11f44:	|      pea 1 <_start+0x1>
   11f48:	|      move.l d0,-(sp)
   11f4a:	|      jsr 14ecc <setVariable>
   11f50:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f54:	|      moveq #2,d0
}
   11f56:	'----> addq.l #4,sp
   11f58:	       rts

00011f5a <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11f5a:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f5c:	       movea.l 12(sp),a0
   11f60:	       move.l 24(a0),d0
   11f64:	       move.l d0,-(sp)
   11f66:	       pea 1 <_start+0x1>
   11f6a:	       move.l sp,d0
   11f6c:	       addq.l #8,d0
   11f6e:	       move.l d0,-(sp)
   11f70:	       jsr 145da <getValueType>
   11f76:	       lea 12(sp),sp
   11f7a:	       tst.w d0
   11f7c:	   ,-- bne.s 11f82 <builtIn_setSpeechSpeed+0x28>
   11f7e:	   |   moveq #1,d0
   11f80:	,--|-- bra.s 11fd0 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11f82:	|  '-> moveq #24,d0
   11f84:	|      add.l 12(sp),d0
   11f88:	|      move.l d0,-(sp)
   11f8a:	|      jsr 14f5e <trimStack>
   11f90:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11f92:	|      move.l (sp),d0
   11f94:	|      move.l d0,-(sp)
   11f96:	|      jsr 174ec <__floatsisf>
   11f9c:	|      addq.l #4,sp
   11f9e:	|      move.l #1008981770,-(sp)
   11fa4:	|      move.l d0,-(sp)
   11fa6:	|      jsr 1759e <__mulsf3>
   11fac:	|      addq.l #8,sp
   11fae:	|      move.l d0,1c2b2 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11fb4:	|      moveq #28,d0
   11fb6:	|      add.l 12(sp),d0
   11fba:	|      pea 1 <_start+0x1>
   11fbe:	|      pea 1 <_start+0x1>
   11fc2:	|      move.l d0,-(sp)
   11fc4:	|      jsr 14ecc <setVariable>
   11fca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11fce:	|      moveq #2,d0
}
   11fd0:	'----> addq.l #4,sp
   11fd2:	       rts

00011fd4 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11fd4:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fd6:	       movea.l 12(sp),a0
   11fda:	       move.l 24(a0),d0
   11fde:	       move.l d0,-(sp)
   11fe0:	       pea 1 <_start+0x1>
   11fe4:	       move.l sp,d0
   11fe6:	       addq.l #8,d0
   11fe8:	       move.l d0,-(sp)
   11fea:	       jsr 145da <getValueType>
   11ff0:	       lea 12(sp),sp
   11ff4:	       tst.w d0
   11ff6:	   ,-- bne.s 11ffc <builtIn_setFontSpacing+0x28>
   11ff8:	   |   moveq #1,d0
   11ffa:	,--|-- bra.s 12032 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11ffc:	|  '-> move.l (sp),d0
   11ffe:	|      move.l d0,d0
   12000:	|      move.w d0,1c840 <fontSpace>
	trimStack (&fun -> stack);
   12006:	|      moveq #24,d0
   12008:	|      add.l 12(sp),d0
   1200c:	|      move.l d0,-(sp)
   1200e:	|      jsr 14f5e <trimStack>
   12014:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12016:	|      moveq #28,d0
   12018:	|      add.l 12(sp),d0
   1201c:	|      pea 1 <_start+0x1>
   12020:	|      pea 1 <_start+0x1>
   12024:	|      move.l d0,-(sp)
   12026:	|      jsr 14ecc <setVariable>
   1202c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12030:	|      moveq #2,d0
}
   12032:	'----> addq.l #4,sp
   12034:	       rts

00012036 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12036:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12038:	          movea.l 12(sp),a0
   1203c:	          move.l 24(a0),d0
   12040:	          move.l d0,-(sp)
   12042:	          pea 1 <_start+0x1>
   12046:	          move.l sp,d0
   12048:	          addq.l #8,d0
   1204a:	          move.l d0,-(sp)
   1204c:	          jsr 145da <getValueType>
   12052:	          lea 12(sp),sp
   12056:	          tst.w d0
   12058:	      ,-- bne.s 1205e <builtIn_transitionLevel+0x28>
   1205a:	      |   moveq #1,d0
   1205c:	,-----|-- bra.s 120b2 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1205e:	|     '-> moveq #24,d0
   12060:	|         add.l 12(sp),d0
   12064:	|         move.l d0,-(sp)
   12066:	|         jsr 14f5e <trimStack>
   1206c:	|         addq.l #4,sp

	if (number < 0)
   1206e:	|         move.l (sp),d0
   12070:	|     ,-- bpl.s 1207a <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12072:	|     |   clr.b 1c2b6 <brightnessLevel>
   12078:	|  ,--|-- bra.s 12096 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1207a:	|  |  '-> move.l (sp),d0
   1207c:	|  |      cmpi.l #255,d0
   12082:	|  |  ,-- ble.s 1208c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12084:	|  |  |   st 1c2b6 <brightnessLevel>
   1208a:	|  +--|-- bra.s 12096 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1208c:	|  |  '-> move.l (sp),d0
   1208e:	|  |      move.l d0,d0
   12090:	|  |      move.b d0,1c2b6 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12096:	|  '----> moveq #28,d0
   12098:	|         add.l 12(sp),d0
   1209c:	|         pea 1 <_start+0x1>
   120a0:	|         pea 1 <_start+0x1>
   120a4:	|         move.l d0,-(sp)
   120a6:	|         jsr 14ecc <setVariable>
   120ac:	|         lea 12(sp),sp
	return BR_CONTINUE;
   120b0:	|         moveq #2,d0
}
   120b2:	'-------> addq.l #4,sp
   120b4:	          rts

000120b6 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   120b6:	movea.l 8(sp),a0
   120ba:	move.l 24(a0),d0
   120be:	move.l d0,-(sp)
   120c0:	jsr 14b1a <getBoolean>
   120c6:	addq.l #4,sp
   120c8:	move.w d0,1c8e8 <captureAllKeys>
	trimStack (&fun -> stack);
   120ce:	moveq #24,d0
   120d0:	add.l 8(sp),d0
   120d4:	move.l d0,-(sp)
   120d6:	jsr 14f5e <trimStack>
   120dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   120de:	move.w 1c8e8 <captureAllKeys>,d0
   120e4:	movea.w d0,a0
   120e6:	moveq #28,d0
   120e8:	add.l 8(sp),d0
   120ec:	move.l a0,-(sp)
   120ee:	pea 1 <_start+0x1>
   120f2:	move.l d0,-(sp)
   120f4:	jsr 14ecc <setVariable>
   120fa:	lea 12(sp),sp
	return BR_CONTINUE;
   120fe:	moveq #2,d0
}
   12100:	rts

00012102 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12102:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12106:	       movea.l 20(sp),a0
   1210a:	       move.l 24(a0),d0
   1210e:	       move.l d0,-(sp)
   12110:	       pea 1 <_start+0x1>
   12114:	       moveq #12,d0
   12116:	       add.l sp,d0
   12118:	       move.l d0,-(sp)
   1211a:	       jsr 145da <getValueType>
   12120:	       lea 12(sp),sp
   12124:	       tst.w d0
   12126:	   ,-- bne.s 1212e <builtIn_spinCharacter+0x2c>
   12128:	   |   moveq #1,d0
   1212a:	,--|-- bra.w 121de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1212e:	|  '-> moveq #24,d0
   12130:	|      add.l 20(sp),d0
   12134:	|      move.l d0,-(sp)
   12136:	|      jsr 14f5e <trimStack>
   1213c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1213e:	|      movea.l 20(sp),a0
   12142:	|      move.l 24(a0),d0
   12146:	|      move.l d0,-(sp)
   12148:	|      pea 7 <_start+0x7>
   1214c:	|      lea 8(sp),a0
   12150:	|      move.l a0,-(sp)
   12152:	|      jsr 145da <getValueType>
   12158:	|      lea 12(sp),sp
   1215c:	|      tst.w d0
   1215e:	|  ,-- bne.s 12164 <builtIn_spinCharacter+0x62>
   12160:	|  |   moveq #1,d0
   12162:	+--|-- bra.s 121de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12164:	|  '-> moveq #24,d0
   12166:	|      add.l 20(sp),d0
   1216a:	|      move.l d0,-(sp)
   1216c:	|      jsr 14f5e <trimStack>
   12172:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12174:	|      move.l (sp),d0
   12176:	|      move.l d0,-(sp)
   12178:	|      jsr a362 <findPerson>
   1217e:	|      addq.l #4,sp
   12180:	|      move.l d0,8(sp)
	if (thisPerson) {
   12184:	|  ,-- beq.s 121c4 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12186:	|  |   move.l 4(sp),d0
   1218a:	|  |   movea.l 8(sp),a0
   1218e:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12192:	|  |   movea.l 8(sp),a0
   12196:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1219c:	|  |   movea.l 8(sp),a0
   121a0:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   121a6:	|  |   moveq #28,d0
   121a8:	|  |   add.l 20(sp),d0
   121ac:	|  |   pea 1 <_start+0x1>
   121b0:	|  |   pea 1 <_start+0x1>
   121b4:	|  |   move.l d0,-(sp)
   121b6:	|  |   jsr 14ecc <setVariable>
   121bc:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   121c0:	|  |   moveq #3,d0
   121c2:	+--|-- bra.s 121de <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   121c4:	|  '-> moveq #28,d0
   121c6:	|      add.l 20(sp),d0
   121ca:	|      clr.l -(sp)
   121cc:	|      pea 1 <_start+0x1>
   121d0:	|      move.l d0,-(sp)
   121d2:	|      jsr 14ecc <setVariable>
   121d8:	|      lea 12(sp),sp
		return BR_CONTINUE;
   121dc:	|      moveq #2,d0
	}
}
   121de:	'----> lea 12(sp),sp
   121e2:	       rts

000121e4 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   121e4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121e6:	          movea.l 16(sp),a0
   121ea:	          move.l 24(a0),d0
   121ee:	          move.l d0,-(sp)
   121f0:	          pea 7 <_start+0x7>
   121f4:	          move.l sp,d0
   121f6:	          addq.l #8,d0
   121f8:	          move.l d0,-(sp)
   121fa:	          jsr 145da <getValueType>
   12200:	          lea 12(sp),sp
   12204:	          tst.w d0
   12206:	      ,-- bne.s 1220c <builtIn_getCharacterDirection+0x28>
   12208:	      |   moveq #1,d0
   1220a:	,-----|-- bra.s 1226a <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1220c:	|     '-> moveq #24,d0
   1220e:	|         add.l 16(sp),d0
   12212:	|         move.l d0,-(sp)
   12214:	|         jsr 14f5e <trimStack>
   1221a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1221c:	|         move.l (sp),d0
   1221e:	|         move.l d0,-(sp)
   12220:	|         jsr a362 <findPerson>
   12226:	|         addq.l #4,sp
   12228:	|         move.l d0,4(sp)
	if (thisPerson) {
   1222c:	|  ,----- beq.s 12250 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1222e:	|  |      movea.l 4(sp),a0
   12232:	|  |      move.l 106(a0),d1
   12236:	|  |      moveq #28,d0
   12238:	|  |      add.l 16(sp),d0
   1223c:	|  |      move.l d1,-(sp)
   1223e:	|  |      pea 1 <_start+0x1>
   12242:	|  |      move.l d0,-(sp)
   12244:	|  |      jsr 14ecc <setVariable>
   1224a:	|  |      lea 12(sp),sp
   1224e:	|  |  ,-- bra.s 12268 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12250:	|  '--|-> moveq #28,d0
   12252:	|     |   add.l 16(sp),d0
   12256:	|     |   clr.l -(sp)
   12258:	|     |   pea 1 <_start+0x1>
   1225c:	|     |   move.l d0,-(sp)
   1225e:	|     |   jsr 14ecc <setVariable>
   12264:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12268:	|     '-> moveq #2,d0
}
   1226a:	'-------> addq.l #8,sp
   1226c:	          rts

0001226e <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1226e:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12270:	       movea.l 16(sp),a0
   12274:	       move.l 24(a0),d0
   12278:	       move.l d0,-(sp)
   1227a:	       pea 7 <_start+0x7>
   1227e:	       move.l sp,d0
   12280:	       addq.l #8,d0
   12282:	       move.l d0,-(sp)
   12284:	       jsr 145da <getValueType>
   1228a:	       lea 12(sp),sp
   1228e:	       tst.w d0
   12290:	   ,-- bne.s 12296 <builtIn_isCharacter+0x28>
   12292:	   |   moveq #1,d0
   12294:	,--|-- bra.s 122d8 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12296:	|  '-> moveq #24,d0
   12298:	|      add.l 16(sp),d0
   1229c:	|      move.l d0,-(sp)
   1229e:	|      jsr 14f5e <trimStack>
   122a4:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122a6:	|      move.l (sp),d0
   122a8:	|      move.l d0,-(sp)
   122aa:	|      jsr a362 <findPerson>
   122b0:	|      addq.l #4,sp
   122b2:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   122b6:	|      sne d0
   122b8:	|      neg.b d0
   122ba:	|      moveq #0,d1
   122bc:	|      move.b d0,d1
   122be:	|      moveq #28,d0
   122c0:	|      add.l 16(sp),d0
   122c4:	|      move.l d1,-(sp)
   122c6:	|      pea 1 <_start+0x1>
   122ca:	|      move.l d0,-(sp)
   122cc:	|      jsr 14ecc <setVariable>
   122d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122d6:	|      moveq #2,d0
}
   122d8:	'----> addq.l #8,sp
   122da:	       rts

000122dc <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   122dc:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122de:	          movea.l 16(sp),a0
   122e2:	          move.l 24(a0),d0
   122e6:	          move.l d0,-(sp)
   122e8:	          pea 7 <_start+0x7>
   122ec:	          move.l sp,d0
   122ee:	          addq.l #8,d0
   122f0:	          move.l d0,-(sp)
   122f2:	          jsr 145da <getValueType>
   122f8:	          lea 12(sp),sp
   122fc:	          tst.w d0
   122fe:	      ,-- bne.s 12304 <builtIn_normalCharacter+0x28>
   12300:	      |   moveq #1,d0
   12302:	,-----|-- bra.s 12380 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12304:	|     '-> moveq #24,d0
   12306:	|         add.l 16(sp),d0
   1230a:	|         move.l d0,-(sp)
   1230c:	|         jsr 14f5e <trimStack>
   12312:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12314:	|         move.l (sp),d0
   12316:	|         move.l d0,-(sp)
   12318:	|         jsr a362 <findPerson>
   1231e:	|         addq.l #4,sp
   12320:	|         move.l d0,4(sp)
	if (thisPerson)
   12324:	|  ,----- beq.s 12366 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12326:	|  |      movea.l 4(sp),a0
   1232a:	|  |      movea.l 80(a0),a0
   1232e:	|  |      move.l (a0),d1
   12330:	|  |      movea.l 4(sp),a0
   12334:	|  |      move.l 106(a0),d0
   12338:	|  |      add.l d0,d0
   1233a:	|  |      add.l d0,d0
   1233c:	|  |      movea.l d1,a0
   1233e:	|  |      adda.l d0,a0
   12340:	|  |      move.l (a0),d0
   12342:	|  |      movea.l 4(sp),a0
   12346:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1234a:	|  |      moveq #28,d0
   1234c:	|  |      add.l 16(sp),d0
   12350:	|  |      pea 1 <_start+0x1>
   12354:	|  |      pea 1 <_start+0x1>
   12358:	|  |      move.l d0,-(sp)
   1235a:	|  |      jsr 14ecc <setVariable>
   12360:	|  |      lea 12(sp),sp
   12364:	|  |  ,-- bra.s 1237e <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12366:	|  '--|-> moveq #28,d0
   12368:	|     |   add.l 16(sp),d0
   1236c:	|     |   clr.l -(sp)
   1236e:	|     |   pea 1 <_start+0x1>
   12372:	|     |   move.l d0,-(sp)
   12374:	|     |   jsr 14ecc <setVariable>
   1237a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1237e:	|     '-> moveq #2,d0
}
   12380:	'-------> addq.l #8,sp
   12382:	          rts

00012384 <builtIn_isMoving>:

builtIn(isMoving)
{
   12384:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12386:	          movea.l 16(sp),a0
   1238a:	          move.l 24(a0),d0
   1238e:	          move.l d0,-(sp)
   12390:	          pea 7 <_start+0x7>
   12394:	          move.l sp,d0
   12396:	          addq.l #8,d0
   12398:	          move.l d0,-(sp)
   1239a:	          jsr 145da <getValueType>
   123a0:	          lea 12(sp),sp
   123a4:	          tst.w d0
   123a6:	      ,-- bne.s 123ac <builtIn_isMoving+0x28>
   123a8:	      |   moveq #1,d0
   123aa:	,-----|-- bra.s 1240c <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   123ac:	|     '-> moveq #24,d0
   123ae:	|         add.l 16(sp),d0
   123b2:	|         move.l d0,-(sp)
   123b4:	|         jsr 14f5e <trimStack>
   123ba:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   123bc:	|         move.l (sp),d0
   123be:	|         move.l d0,-(sp)
   123c0:	|         jsr a362 <findPerson>
   123c6:	|         addq.l #4,sp
   123c8:	|         move.l d0,4(sp)
	if (thisPerson)
   123cc:	|  ,----- beq.s 123f2 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   123ce:	|  |      movea.l 4(sp),a0
   123d2:	|  |      move.w 64(a0),d0
   123d6:	|  |      movea.w d0,a0
   123d8:	|  |      moveq #28,d0
   123da:	|  |      add.l 16(sp),d0
   123de:	|  |      move.l a0,-(sp)
   123e0:	|  |      pea 1 <_start+0x1>
   123e4:	|  |      move.l d0,-(sp)
   123e6:	|  |      jsr 14ecc <setVariable>
   123ec:	|  |      lea 12(sp),sp
   123f0:	|  |  ,-- bra.s 1240a <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123f2:	|  '--|-> moveq #28,d0
   123f4:	|     |   add.l 16(sp),d0
   123f8:	|     |   clr.l -(sp)
   123fa:	|     |   pea 1 <_start+0x1>
   123fe:	|     |   move.l d0,-(sp)
   12400:	|     |   jsr 14ecc <setVariable>
   12406:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1240a:	|     '-> moveq #2,d0
}
   1240c:	'-------> addq.l #8,sp
   1240e:	          rts

00012410 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12410:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12414:	          movea.l 20(sp),a0
   12418:	          move.l 24(a0),d0
   1241c:	          move.l d0,-(sp)
   1241e:	          pea 7 <_start+0x7>
   12422:	          lea 8(sp),a0
   12426:	          move.l a0,-(sp)
   12428:	          jsr 145da <getValueType>
   1242e:	          lea 12(sp),sp
   12432:	          tst.w d0
   12434:	      ,-- bne.s 1243c <builtIn_fetchEvent+0x2c>
   12436:	      |   moveq #1,d0
   12438:	,-----|-- bra.w 124d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1243c:	|     '-> moveq #24,d0
   1243e:	|         add.l 20(sp),d0
   12442:	|         move.l d0,-(sp)
   12444:	|         jsr 14f5e <trimStack>
   1244a:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1244c:	|         movea.l 20(sp),a0
   12450:	|         move.l 24(a0),d0
   12454:	|         move.l d0,-(sp)
   12456:	|         pea 7 <_start+0x7>
   1245a:	|         moveq #12,d0
   1245c:	|         add.l sp,d0
   1245e:	|         move.l d0,-(sp)
   12460:	|         jsr 145da <getValueType>
   12466:	|         lea 12(sp),sp
   1246a:	|         tst.w d0
   1246c:	|     ,-- bne.s 12472 <builtIn_fetchEvent+0x62>
   1246e:	|     |   moveq #1,d0
   12470:	+-----|-- bra.s 124d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12472:	|     '-> moveq #24,d0
   12474:	|         add.l 20(sp),d0
   12478:	|         move.l d0,-(sp)
   1247a:	|         jsr 14f5e <trimStack>
   12480:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12482:	|         move.l (sp),d1
   12484:	|         move.l 4(sp),d0
   12488:	|         move.l d1,-(sp)
   1248a:	|         move.l d0,-(sp)
   1248c:	|         jsr d304 <getCombinationFunction>
   12492:	|         addq.l #8,sp
   12494:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12498:	|  ,----- beq.s 124b6 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1249a:	|  |      moveq #28,d0
   1249c:	|  |      add.l 20(sp),d0
   124a0:	|  |      move.l 8(sp),-(sp)
   124a4:	|  |      pea 2 <_start+0x2>
   124a8:	|  |      move.l d0,-(sp)
   124aa:	|  |      jsr 14ecc <setVariable>
   124b0:	|  |      lea 12(sp),sp
   124b4:	|  |  ,-- bra.s 124ce <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124b6:	|  '--|-> moveq #28,d0
   124b8:	|     |   add.l 20(sp),d0
   124bc:	|     |   clr.l -(sp)
   124be:	|     |   pea 1 <_start+0x1>
   124c2:	|     |   move.l d0,-(sp)
   124c4:	|     |   jsr 14ecc <setVariable>
   124ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   124ce:	|     '-> moveq #2,d0
}
   124d0:	'-------> lea 12(sp),sp
   124d4:	          rts

000124d6 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   124d6:	       lea -24(sp),sp
   124da:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   124dc:	       movea.l 36(sp),a0
   124e0:	       move.l 24(a0),d0
   124e4:	       move.l d0,-(sp)
   124e6:	       jsr 14bb0 <getTextFromAnyVar>
   124ec:	       addq.l #4,sp
   124ee:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   124f2:	       moveq #24,d0
   124f4:	       add.l 36(sp),d0
   124f8:	       move.l d0,-(sp)
   124fa:	       jsr 14f5e <trimStack>
   12500:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12502:	       move.l 24(sp),-(sp)
   12506:	       jsr 2fe <encodeFilename>
   1250c:	       addq.l #4,sp
   1250e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12512:	       move.l 24(sp),16(sp)
   12518:	       move.l 1c948 <SysBase>,d0
   1251e:	       movea.l d0,a6
   12520:	       movea.l 16(sp),a1
   12524:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12528:	       move.l 20(sp),-(sp)
   1252c:	       jsr e0bc <failSecurityCheck>
   12532:	       addq.l #4,sp
   12534:	       tst.w d0
   12536:	   ,-- beq.s 1253c <builtIn_deleteFile+0x66>
   12538:	   |   moveq #1,d0
   1253a:	,--|-- bra.s 1258a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1253c:	|  '-> move.l 20(sp),12(sp)
   12542:	|      move.l 1c950 <DOSBase>,d0
   12548:	|      movea.l d0,a6
   1254a:	|      move.l 12(sp),d1
   1254e:	|      jsr -72(a6)
   12552:	|      move.l d0,8(sp)
   12556:	|      move.l 8(sp),d1
   1255a:	|      moveq #28,d0
   1255c:	|      add.l 36(sp),d0
   12560:	|      move.l d1,-(sp)
   12562:	|      pea 1 <_start+0x1>
   12566:	|      move.l d0,-(sp)
   12568:	|      jsr 14ecc <setVariable>
   1256e:	|      lea 12(sp),sp
    FreeVec(nam);
   12572:	|      move.l 20(sp),4(sp)
   12578:	|      move.l 1c948 <SysBase>,d0
   1257e:	|      movea.l d0,a6
   12580:	|      movea.l 4(sp),a1
   12584:	|      jsr -690(a6)

    return BR_CONTINUE;
   12588:	|      moveq #2,d0
}
   1258a:	'----> movea.l (sp)+,a6
   1258c:	       lea 24(sp),sp
   12590:	       rts

00012592 <builtIn_renameFile>:

builtIn(renameFile)
{
   12592:	       lea -40(sp),sp
   12596:	       move.l a6,-(sp)
   12598:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1259a:	       movea.l 56(sp),a0
   1259e:	       move.l 24(a0),d0
   125a2:	       move.l d0,-(sp)
   125a4:	       jsr 14bb0 <getTextFromAnyVar>
   125aa:	       addq.l #4,sp
   125ac:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   125b0:	       move.l 44(sp),-(sp)
   125b4:	       jsr 2fe <encodeFilename>
   125ba:	       addq.l #4,sp
   125bc:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   125c0:	       moveq #24,d0
   125c2:	       add.l 56(sp),d0
   125c6:	       move.l d0,-(sp)
   125c8:	       jsr 14f5e <trimStack>
   125ce:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   125d0:	       move.l 40(sp),-(sp)
   125d4:	       jsr e0bc <failSecurityCheck>
   125da:	       addq.l #4,sp
   125dc:	       tst.w d0
   125de:	   ,-- beq.s 125e6 <builtIn_renameFile+0x54>
   125e0:	   |   moveq #1,d0
   125e2:	,--|-- bra.w 126cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   125e6:	|  '-> move.l 44(sp),36(sp)
   125ec:	|      move.l 1c948 <SysBase>,d0
   125f2:	|      movea.l d0,a6
   125f4:	|      movea.l 36(sp),a1
   125f8:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   125fc:	|      movea.l 56(sp),a0
   12600:	|      move.l 24(a0),d0
   12604:	|      move.l d0,-(sp)
   12606:	|      jsr 14bb0 <getTextFromAnyVar>
   1260c:	|      addq.l #4,sp
   1260e:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12612:	|      move.l 44(sp),-(sp)
   12616:	|      jsr 2fe <encodeFilename>
   1261c:	|      addq.l #4,sp
   1261e:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12622:	|      moveq #24,d0
   12624:	|      add.l 56(sp),d0
   12628:	|      move.l d0,-(sp)
   1262a:	|      jsr 14f5e <trimStack>
   12630:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12632:	|      move.l 32(sp),-(sp)
   12636:	|      jsr e0bc <failSecurityCheck>
   1263c:	|      addq.l #4,sp
   1263e:	|      tst.w d0
   12640:	|  ,-- beq.s 12648 <builtIn_renameFile+0xb6>
   12642:	|  |   moveq #1,d0
   12644:	+--|-- bra.w 126cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12648:	|  '-> move.l 44(sp),28(sp)
   1264e:	|      move.l 1c948 <SysBase>,d0
   12654:	|      movea.l d0,a6
   12656:	|      movea.l 28(sp),a1
   1265a:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1265e:	|      move.l 32(sp),24(sp)
   12664:	|      move.l 40(sp),20(sp)
   1266a:	|      move.l 1c950 <DOSBase>,d0
   12670:	|      movea.l d0,a6
   12672:	|      move.l 24(sp),d1
   12676:	|      move.l 20(sp),d2
   1267a:	|      jsr -78(a6)
   1267e:	|      move.l d0,16(sp)
   12682:	|      move.l 16(sp),d1
   12686:	|      moveq #28,d0
   12688:	|      add.l 56(sp),d0
   1268c:	|      move.l d1,-(sp)
   1268e:	|      pea 1 <_start+0x1>
   12692:	|      move.l d0,-(sp)
   12694:	|      jsr 14ecc <setVariable>
   1269a:	|      lea 12(sp),sp
	FreeVec(nam);
   1269e:	|      move.l 32(sp),12(sp)
   126a4:	|      move.l 1c948 <SysBase>,d0
   126aa:	|      movea.l d0,a6
   126ac:	|      movea.l 12(sp),a1
   126b0:	|      jsr -690(a6)
	FreeVec(newnam);
   126b4:	|      move.l 40(sp),8(sp)
   126ba:	|      move.l 1c948 <SysBase>,d0
   126c0:	|      movea.l d0,a6
   126c2:	|      movea.l 8(sp),a1
   126c6:	|      jsr -690(a6)

	return BR_CONTINUE;
   126ca:	|      moveq #2,d0
}
   126cc:	'----> move.l (sp)+,d2
   126ce:	       movea.l (sp)+,a6
   126d0:	       lea 40(sp),sp
   126d4:	       rts

000126d6 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   126d6:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   126d8:	       movea.l 12(sp),a0
   126dc:	       move.l 24(a0),d0
   126e0:	       move.l d0,-(sp)
   126e2:	       pea 5 <_start+0x5>
   126e6:	       move.l sp,d0
   126e8:	       addq.l #8,d0
   126ea:	       move.l d0,-(sp)
   126ec:	       jsr 145da <getValueType>
   126f2:	       lea 12(sp),sp
   126f6:	       tst.w d0
   126f8:	   ,-- bne.s 126fe <builtIn_cacheSound+0x28>
   126fa:	   |   moveq #1,d0
   126fc:	,--|-- bra.s 12726 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   126fe:	|  '-> moveq #24,d0
   12700:	|      add.l 12(sp),d0
   12704:	|      move.l d0,-(sp)
   12706:	|      jsr 14f5e <trimStack>
   1270c:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   1270e:	|      move.l (sp),d0
   12710:	|      move.l d0,-(sp)
   12712:	|      jsr cefa <cacheSound>
   12718:	|      addq.l #4,sp
   1271a:	|      moveq #-1,d1
   1271c:	|      cmp.l d0,d1
   1271e:	|  ,-- bne.s 12724 <builtIn_cacheSound+0x4e>
   12720:	|  |   moveq #1,d0
   12722:	+--|-- bra.s 12726 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12724:	|  '-> moveq #2,d0
}
   12726:	'----> addq.l #4,sp
   12728:	       rts

0001272a <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1272a:	pea 19ba8 <talk.c.490538ff+0x289>
   12730:	jsr 170ba <KPrintF>
   12736:	addq.l #4,sp
	return BR_CONTINUE;
   12738:	moveq #2,d0
}
   1273a:	rts

0001273c <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   1273c:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12740:	          movea.l 20(sp),a0
   12744:	          move.l 24(a0),d0
   12748:	          move.l d0,-(sp)
   1274a:	          pea 1 <_start+0x1>
   1274e:	          moveq #12,d0
   12750:	          add.l sp,d0
   12752:	          move.l d0,-(sp)
   12754:	          jsr 145da <getValueType>
   1275a:	          lea 12(sp),sp
   1275e:	          tst.w d0
   12760:	      ,-- bne.s 12768 <builtIn_setCharacterSpinSpeed+0x2c>
   12762:	      |   moveq #1,d0
   12764:	,-----|-- bra.w 12802 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12768:	|     '-> moveq #24,d0
   1276a:	|         add.l 20(sp),d0
   1276e:	|         move.l d0,-(sp)
   12770:	|         jsr 14f5e <trimStack>
   12776:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12778:	|         movea.l 20(sp),a0
   1277c:	|         move.l 24(a0),d0
   12780:	|         move.l d0,-(sp)
   12782:	|         pea 7 <_start+0x7>
   12786:	|         lea 8(sp),a0
   1278a:	|         move.l a0,-(sp)
   1278c:	|         jsr 145da <getValueType>
   12792:	|         lea 12(sp),sp
   12796:	|         tst.w d0
   12798:	|     ,-- bne.s 1279e <builtIn_setCharacterSpinSpeed+0x62>
   1279a:	|     |   moveq #1,d0
   1279c:	+-----|-- bra.s 12802 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1279e:	|     '-> moveq #24,d0
   127a0:	|         add.l 20(sp),d0
   127a4:	|         move.l d0,-(sp)
   127a6:	|         jsr 14f5e <trimStack>
   127ac:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   127ae:	|         move.l (sp),d0
   127b0:	|         move.l d0,-(sp)
   127b2:	|         jsr a362 <findPerson>
   127b8:	|         addq.l #4,sp
   127ba:	|         move.l d0,8(sp)

	if (thisPerson) {
   127be:	|  ,----- beq.s 127e8 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   127c0:	|  |      move.l 4(sp),d0
   127c4:	|  |      movea.l 8(sp),a0
   127c8:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   127cc:	|  |      moveq #28,d0
   127ce:	|  |      add.l 20(sp),d0
   127d2:	|  |      pea 1 <_start+0x1>
   127d6:	|  |      pea 1 <_start+0x1>
   127da:	|  |      move.l d0,-(sp)
   127dc:	|  |      jsr 14ecc <setVariable>
   127e2:	|  |      lea 12(sp),sp
   127e6:	|  |  ,-- bra.s 12800 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127e8:	|  '--|-> moveq #28,d0
   127ea:	|     |   add.l 20(sp),d0
   127ee:	|     |   clr.l -(sp)
   127f0:	|     |   pea 1 <_start+0x1>
   127f4:	|     |   move.l d0,-(sp)
   127f6:	|     |   jsr 14ecc <setVariable>
   127fc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12800:	|     '-> moveq #2,d0
}
   12802:	'-------> lea 12(sp),sp
   12806:	          rts

00012808 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12808:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1280c:	          movea.l 20(sp),a0
   12810:	          move.l 24(a0),d0
   12814:	          move.l d0,-(sp)
   12816:	          pea 1 <_start+0x1>
   1281a:	          moveq #12,d0
   1281c:	          add.l sp,d0
   1281e:	          move.l d0,-(sp)
   12820:	          jsr 145da <getValueType>
   12826:	          lea 12(sp),sp
   1282a:	          tst.w d0
   1282c:	      ,-- bne.s 12834 <builtIn_setCharacterAngleOffset+0x2c>
   1282e:	      |   moveq #1,d0
   12830:	,-----|-- bra.w 128ce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12834:	|     '-> moveq #24,d0
   12836:	|         add.l 20(sp),d0
   1283a:	|         move.l d0,-(sp)
   1283c:	|         jsr 14f5e <trimStack>
   12842:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12844:	|         movea.l 20(sp),a0
   12848:	|         move.l 24(a0),d0
   1284c:	|         move.l d0,-(sp)
   1284e:	|         pea 7 <_start+0x7>
   12852:	|         lea 8(sp),a0
   12856:	|         move.l a0,-(sp)
   12858:	|         jsr 145da <getValueType>
   1285e:	|         lea 12(sp),sp
   12862:	|         tst.w d0
   12864:	|     ,-- bne.s 1286a <builtIn_setCharacterAngleOffset+0x62>
   12866:	|     |   moveq #1,d0
   12868:	+-----|-- bra.s 128ce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1286a:	|     '-> moveq #24,d0
   1286c:	|         add.l 20(sp),d0
   12870:	|         move.l d0,-(sp)
   12872:	|         jsr 14f5e <trimStack>
   12878:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1287a:	|         move.l (sp),d0
   1287c:	|         move.l d0,-(sp)
   1287e:	|         jsr a362 <findPerson>
   12884:	|         addq.l #4,sp
   12886:	|         move.l d0,8(sp)

	if (thisPerson) {
   1288a:	|  ,----- beq.s 128b4 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   1288c:	|  |      move.l 4(sp),d0
   12890:	|  |      movea.l 8(sp),a0
   12894:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12898:	|  |      moveq #28,d0
   1289a:	|  |      add.l 20(sp),d0
   1289e:	|  |      pea 1 <_start+0x1>
   128a2:	|  |      pea 1 <_start+0x1>
   128a6:	|  |      move.l d0,-(sp)
   128a8:	|  |      jsr 14ecc <setVariable>
   128ae:	|  |      lea 12(sp),sp
   128b2:	|  |  ,-- bra.s 128cc <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128b4:	|  '--|-> moveq #28,d0
   128b6:	|     |   add.l 20(sp),d0
   128ba:	|     |   clr.l -(sp)
   128bc:	|     |   pea 1 <_start+0x1>
   128c0:	|     |   move.l d0,-(sp)
   128c2:	|     |   jsr 14ecc <setVariable>
   128c8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   128cc:	|     '-> moveq #2,d0
}
   128ce:	'-------> lea 12(sp),sp
   128d2:	          rts

000128d4 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   128d4:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128d6:	       movea.l 12(sp),a0
   128da:	       move.l 24(a0),d0
   128de:	       move.l d0,-(sp)
   128e0:	       pea 1 <_start+0x1>
   128e4:	       move.l sp,d0
   128e6:	       addq.l #8,d0
   128e8:	       move.l d0,-(sp)
   128ea:	       jsr 145da <getValueType>
   128f0:	       lea 12(sp),sp
   128f4:	       tst.w d0
   128f6:	   ,-- bne.s 128fc <builtIn_transitionMode+0x28>
   128f8:	   |   moveq #1,d0
   128fa:	,--|-- bra.s 12932 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   128fc:	|  '-> move.l (sp),d0
   128fe:	|      move.l d0,d0
   12900:	|      move.b d0,1c816 <fadeMode>
	trimStack (&fun -> stack);
   12906:	|      moveq #24,d0
   12908:	|      add.l 12(sp),d0
   1290c:	|      move.l d0,-(sp)
   1290e:	|      jsr 14f5e <trimStack>
   12914:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12916:	|      moveq #28,d0
   12918:	|      add.l 12(sp),d0
   1291c:	|      pea 1 <_start+0x1>
   12920:	|      pea 1 <_start+0x1>
   12924:	|      move.l d0,-(sp)
   12926:	|      jsr 14ecc <setVariable>
   1292c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12930:	|      moveq #2,d0
}
   12932:	'----> addq.l #4,sp
   12934:	       rts

00012936 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12936:	moveq #24,d0
   12938:	add.l 8(sp),d0
   1293c:	move.l d0,-(sp)
   1293e:	jsr 14f5e <trimStack>
   12944:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12946:	moveq #28,d0
   12948:	add.l 8(sp),d0
   1294c:	pea 1 <_start+0x1>
   12950:	pea 1 <_start+0x1>
   12954:	move.l d0,-(sp)
   12956:	jsr 14ecc <setVariable>
   1295c:	lea 12(sp),sp
	return BR_CONTINUE;
   12960:	moveq #2,d0
}
   12962:	rts

00012964 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12964:	pea 19bd2 <talk.c.490538ff+0x2b3>
   1296a:	jsr 170ba <KPrintF>
   12970:	addq.l #4,sp
	return BR_CONTINUE;
   12972:	moveq #2,d0
}
   12974:	rts

00012976 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12976:	       lea -16(sp),sp
   1297a:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   1297c:	       movea.l 28(sp),a0
   12980:	       move.l 24(a0),d0
   12984:	       move.l d0,-(sp)
   12986:	       jsr 14bb0 <getTextFromAnyVar>
   1298c:	       addq.l #4,sp
   1298e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12992:	   ,-- bne.s 1299a <builtIn_saveCustomData+0x24>
   12994:	   |   moveq #1,d0
   12996:	,--|-- bra.w 12a4c <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   1299a:	|  '-> move.l 16(sp),-(sp)
   1299e:	|      jsr 2fe <encodeFilename>
   129a4:	|      addq.l #4,sp
   129a6:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   129aa:	|      move.l 16(sp),8(sp)
   129b0:	|      move.l 1c948 <SysBase>,d0
   129b6:	|      movea.l d0,a6
   129b8:	|      movea.l 8(sp),a1
   129bc:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   129c0:	|      move.l 12(sp),-(sp)
   129c4:	|      jsr e0bc <failSecurityCheck>
   129ca:	|      addq.l #4,sp
   129cc:	|      tst.w d0
   129ce:	|  ,-- beq.s 129d4 <builtIn_saveCustomData+0x5e>
   129d0:	|  |   moveq #1,d0
   129d2:	+--|-- bra.s 12a4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   129d4:	|  '-> moveq #24,d0
   129d6:	|      add.l 28(sp),d0
   129da:	|      move.l d0,-(sp)
   129dc:	|      jsr 14f5e <trimStack>
   129e2:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   129e4:	|      movea.l 28(sp),a0
   129e8:	|      movea.l 24(a0),a0
   129ec:	|      move.l (a0),d0
   129ee:	|      moveq #6,d1
   129f0:	|      cmp.l d0,d1
   129f2:	|  ,-- beq.s 12a06 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   129f4:	|  |   pea 19bff <talk.c.490538ff+0x2e0>
   129fa:	|  |   jsr 170ba <KPrintF>
   12a00:	|  |   addq.l #4,sp
		return BR_ERROR;
   12a02:	|  |   moveq #1,d0
   12a04:	+--|-- bra.s 12a4c <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12a06:	|  '-> movea.l 28(sp),a0
   12a0a:	|      move.l 24(a0),d0
   12a0e:	|      move.l d0,-(sp)
   12a10:	|      move.l 16(sp),-(sp)
   12a14:	|      jsr dd0c <stackToFile>
   12a1a:	|      addq.l #8,sp
   12a1c:	|      tst.w d0
   12a1e:	|  ,-- bne.s 12a24 <builtIn_saveCustomData+0xae>
   12a20:	|  |   moveq #1,d0
   12a22:	+--|-- bra.s 12a4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a24:	|  '-> moveq #24,d0
   12a26:	|      add.l 28(sp),d0
   12a2a:	|      move.l d0,-(sp)
   12a2c:	|      jsr 14f5e <trimStack>
   12a32:	|      addq.l #4,sp
	FreeVec(fileName);
   12a34:	|      move.l 12(sp),4(sp)
   12a3a:	|      move.l 1c948 <SysBase>,d0
   12a40:	|      movea.l d0,a6
   12a42:	|      movea.l 4(sp),a1
   12a46:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a4a:	|      moveq #2,d0
}
   12a4c:	'----> movea.l (sp)+,a6
   12a4e:	       lea 16(sp),sp
   12a52:	       rts

00012a54 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12a54:	       lea -28(sp),sp
   12a58:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12a5a:	       movea.l 40(sp),a0
   12a5e:	       move.l 24(a0),d0
   12a62:	       move.l d0,-(sp)
   12a64:	       jsr 14bb0 <getTextFromAnyVar>
   12a6a:	       addq.l #4,sp
   12a6c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12a70:	   ,-- bne.s 12a78 <builtIn_loadCustomData+0x24>
   12a72:	   |   moveq #1,d0
   12a74:	,--|-- bra.w 12b74 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12a78:	|  '-> move.l 28(sp),-(sp)
   12a7c:	|      jsr 2fe <encodeFilename>
   12a82:	|      addq.l #4,sp
   12a84:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12a88:	|      move.l 28(sp),20(sp)
   12a8e:	|      move.l 1c948 <SysBase>,d0
   12a94:	|      movea.l d0,a6
   12a96:	|      movea.l 20(sp),a1
   12a9a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12a9e:	|      move.l 24(sp),-(sp)
   12aa2:	|      jsr e0bc <failSecurityCheck>
   12aa8:	|      addq.l #4,sp
   12aaa:	|      tst.w d0
   12aac:	|  ,-- beq.s 12ab4 <builtIn_loadCustomData+0x60>
   12aae:	|  |   moveq #1,d0
   12ab0:	+--|-- bra.w 12b74 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12ab4:	|  '-> moveq #24,d0
   12ab6:	|      add.l 40(sp),d0
   12aba:	|      move.l d0,-(sp)
   12abc:	|      jsr 14f5e <trimStack>
   12ac2:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12ac4:	|      moveq #28,d0
   12ac6:	|      add.l 40(sp),d0
   12aca:	|      move.l d0,-(sp)
   12acc:	|      jsr 14828 <unlinkVar>
   12ad2:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12ad4:	|      movea.l 40(sp),a0
   12ad8:	|      moveq #6,d0
   12ada:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12ade:	|      moveq #12,d0
   12ae0:	|      move.l d0,16(sp)
   12ae4:	|      clr.l 12(sp)
   12ae8:	|      move.l 1c948 <SysBase>,d0
   12aee:	|      movea.l d0,a6
   12af0:	|      move.l 16(sp),d0
   12af4:	|      move.l 12(sp),d1
   12af8:	|      jsr -684(a6)
   12afc:	|      move.l d0,8(sp)
   12b00:	|      move.l 8(sp),d0
   12b04:	|      movea.l 40(sp),a0
   12b08:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12b0c:	|      movea.l 40(sp),a0
   12b10:	|      move.l 32(a0),d0
   12b14:	|  ,-- bne.s 12b1a <builtIn_loadCustomData+0xc6>
   12b16:	|  |   moveq #1,d0
   12b18:	+--|-- bra.s 12b74 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12b1a:	|  '-> movea.l 40(sp),a0
   12b1e:	|      movea.l 32(a0),a0
   12b22:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12b24:	|      movea.l 40(sp),a0
   12b28:	|      movea.l 32(a0),a0
   12b2c:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12b30:	|      movea.l 40(sp),a0
   12b34:	|      movea.l 32(a0),a0
   12b38:	|      moveq #1,d0
   12b3a:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12b3e:	|      movea.l 40(sp),a0
   12b42:	|      move.l 32(a0),d0
   12b46:	|      move.l d0,-(sp)
   12b48:	|      move.l 28(sp),-(sp)
   12b4c:	|      jsr d746 <fileToStack>
   12b52:	|      addq.l #8,sp
   12b54:	|      tst.w d0
   12b56:	|  ,-- bne.s 12b5c <builtIn_loadCustomData+0x108>
   12b58:	|  |   moveq #1,d0
   12b5a:	+--|-- bra.s 12b74 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12b5c:	|  '-> move.l 24(sp),4(sp)
   12b62:	|      move.l 1c948 <SysBase>,d0
   12b68:	|      movea.l d0,a6
   12b6a:	|      movea.l 4(sp),a1
   12b6e:	|      jsr -690(a6)
	return BR_CONTINUE;
   12b72:	|      moveq #2,d0
}
   12b74:	'----> movea.l (sp)+,a6
   12b76:	       lea 28(sp),sp
   12b7a:	       rts

00012b7c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12b7c:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b7e:	       movea.l 12(sp),a0
   12b82:	       move.l 24(a0),d0
   12b86:	       move.l d0,-(sp)
   12b88:	       pea 1 <_start+0x1>
   12b8c:	       move.l sp,d0
   12b8e:	       addq.l #8,d0
   12b90:	       move.l d0,-(sp)
   12b92:	       jsr 145da <getValueType>
   12b98:	       lea 12(sp),sp
   12b9c:	       tst.w d0
   12b9e:	   ,-- bne.s 12ba4 <builtIn_setCustomEncoding+0x28>
   12ba0:	   |   moveq #1,d0
   12ba2:	,--|-- bra.s 12bda <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12ba4:	|  '-> move.l (sp),d0
   12ba6:	|      move.l d0,d0
   12ba8:	|      move.w d0,1c9fc <saveEncoding>
	trimStack (&fun -> stack);
   12bae:	|      moveq #24,d0
   12bb0:	|      add.l 12(sp),d0
   12bb4:	|      move.l d0,-(sp)
   12bb6:	|      jsr 14f5e <trimStack>
   12bbc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bbe:	|      moveq #28,d0
   12bc0:	|      add.l 12(sp),d0
   12bc4:	|      pea 1 <_start+0x1>
   12bc8:	|      pea 1 <_start+0x1>
   12bcc:	|      move.l d0,-(sp)
   12bce:	|      jsr 14ecc <setVariable>
   12bd4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12bd8:	|      moveq #2,d0
}
   12bda:	'----> addq.l #4,sp
   12bdc:	       rts

00012bde <builtIn_freeSound>:

builtIn(freeSound)
{
   12bde:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12be0:	       movea.l 12(sp),a0
   12be4:	       move.l 24(a0),d0
   12be8:	       move.l d0,-(sp)
   12bea:	       pea 5 <_start+0x5>
   12bee:	       move.l sp,d0
   12bf0:	       addq.l #8,d0
   12bf2:	       move.l d0,-(sp)
   12bf4:	       jsr 145da <getValueType>
   12bfa:	       lea 12(sp),sp
   12bfe:	       tst.w d0
   12c00:	   ,-- bne.s 12c06 <builtIn_freeSound+0x28>
   12c02:	   |   moveq #1,d0
   12c04:	,--|-- bra.s 12c24 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12c06:	|  '-> moveq #24,d0
   12c08:	|      add.l 12(sp),d0
   12c0c:	|      move.l d0,-(sp)
   12c0e:	|      jsr 14f5e <trimStack>
   12c14:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12c16:	|      move.l (sp),d0
   12c18:	|      move.l d0,-(sp)
   12c1a:	|      jsr cefe <huntKillFreeSound>
   12c20:	|      addq.l #4,sp
	return BR_CONTINUE;
   12c22:	|      moveq #2,d0
}
   12c24:	'----> addq.l #4,sp
   12c26:	       rts

00012c28 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12c28:	       lea -12(sp),sp
   12c2c:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c2e:	       movea.l 24(sp),a0
   12c32:	       move.l 24(a0),d0
   12c36:	       move.l d0,-(sp)
   12c38:	       pea 1 <_start+0x1>
   12c3c:	       moveq #16,d0
   12c3e:	       add.l sp,d0
   12c40:	       move.l d0,-(sp)
   12c42:	       jsr 145da <getValueType>
   12c48:	       lea 12(sp),sp
   12c4c:	       tst.w d0
   12c4e:	   ,-- bne.s 12c56 <builtIn_parallaxAdd+0x2e>
   12c50:	   |   moveq #1,d0
   12c52:	,--|-- bra.w 12d2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12c56:	|  '-> moveq #24,d0
   12c58:	|      add.l 24(sp),d0
   12c5c:	|      move.l d0,-(sp)
   12c5e:	|      jsr 14f5e <trimStack>
   12c64:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c66:	|      movea.l 24(sp),a0
   12c6a:	|      move.l 24(a0),d0
   12c6e:	|      move.l d0,-(sp)
   12c70:	|      pea 1 <_start+0x1>
   12c74:	|      moveq #20,d0
   12c76:	|      add.l sp,d0
   12c78:	|      move.l d0,-(sp)
   12c7a:	|      jsr 145da <getValueType>
   12c80:	|      lea 12(sp),sp
   12c84:	|      tst.w d0
   12c86:	|  ,-- bne.s 12c8e <builtIn_parallaxAdd+0x66>
   12c88:	|  |   moveq #1,d0
   12c8a:	+--|-- bra.w 12d2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12c8e:	|  '-> moveq #24,d0
   12c90:	|      add.l 24(sp),d0
   12c94:	|      move.l d0,-(sp)
   12c96:	|      jsr 14f5e <trimStack>
   12c9c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c9e:	|      movea.l 24(sp),a0
   12ca2:	|      move.l 24(a0),d0
   12ca6:	|      move.l d0,-(sp)
   12ca8:	|      pea 5 <_start+0x5>
   12cac:	|      lea 12(sp),a0
   12cb0:	|      move.l a0,-(sp)
   12cb2:	|      jsr 145da <getValueType>
   12cb8:	|      lea 12(sp),sp
   12cbc:	|      tst.w d0
   12cbe:	|  ,-- bne.s 12cc4 <builtIn_parallaxAdd+0x9c>
   12cc0:	|  |   moveq #1,d0
   12cc2:	+--|-- bra.s 12d2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cc4:	|  '-> moveq #24,d0
   12cc6:	|      add.l 24(sp),d0
   12cca:	|      move.l d0,-(sp)
   12ccc:	|      jsr 14f5e <trimStack>
   12cd2:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12cd4:	|      move.l 8(sp),d0
   12cd8:	|      move.l d0,d0
   12cda:	|      moveq #0,d2
   12cdc:	|      move.w d0,d2
   12cde:	|      move.l 12(sp),d0
   12ce2:	|      move.l d0,d0
   12ce4:	|      moveq #0,d1
   12ce6:	|      move.w d0,d1
   12ce8:	|      move.l 4(sp),d0
   12cec:	|      move.l d0,d0
   12cee:	|      move.w d0,d0
   12cf0:	|      andi.l #65535,d0
   12cf6:	|      move.l d2,-(sp)
   12cf8:	|      move.l d1,-(sp)
   12cfa:	|      move.l d0,-(sp)
   12cfc:	|      jsr d124 <loadParallax>
   12d02:	|      lea 12(sp),sp
   12d06:	|      tst.w d0
   12d08:	|  ,-- bne.s 12d0e <builtIn_parallaxAdd+0xe6>
   12d0a:	|  |   moveq #1,d0
   12d0c:	+--|-- bra.s 12d2a <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12d0e:	|  '-> moveq #28,d0
   12d10:	|      add.l 24(sp),d0
   12d14:	|      pea 1 <_start+0x1>
   12d18:	|      pea 1 <_start+0x1>
   12d1c:	|      move.l d0,-(sp)
   12d1e:	|      jsr 14ecc <setVariable>
   12d24:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12d28:	|      moveq #2,d0
}
   12d2a:	'----> move.l (sp)+,d2
   12d2c:	       lea 12(sp),sp
   12d30:	       rts

00012d32 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12d32:	jsr d05c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12d38:	moveq #28,d0
   12d3a:	add.l 8(sp),d0
   12d3e:	pea 1 <_start+0x1>
   12d42:	pea 1 <_start+0x1>
   12d46:	move.l d0,-(sp)
   12d48:	jsr 14ecc <setVariable>
   12d4e:	lea 12(sp),sp
	return BR_CONTINUE;
   12d52:	moveq #2,d0
}
   12d54:	rts

00012d56 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12d56:	pea 19c1d <talk.c.490538ff+0x2fe>
   12d5c:	jsr 170ba <KPrintF>
   12d62:	addq.l #4,sp

	return BR_CONTINUE;
   12d64:	moveq #2,d0
}
   12d66:	rts

00012d68 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12d68:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12d6a:	             movea.l 16(sp),a0
   12d6e:	             movea.l 24(a0),a0
   12d72:	             move.l (a0),d0
   12d74:	             moveq #1,d1
   12d76:	             cmp.l d0,d1
   12d78:	      ,----- beq.s 12dc0 <builtIn_makeFastArray+0x58>
   12d7a:	      |      moveq #6,d1
   12d7c:	      |      cmp.l d0,d1
   12d7e:	,-----|----- bne.s 12dfe <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12d80:	|     |      movea.l 16(sp),a0
   12d84:	|     |      movea.l 24(a0),a0
   12d88:	|     |      move.l 4(a0),d1
   12d8c:	|     |      moveq #28,d0
   12d8e:	|     |      add.l 16(sp),d0
   12d92:	|     |      move.l d1,-(sp)
   12d94:	|     |      move.l d0,-(sp)
   12d96:	|     |      jsr 1468c <makeFastArrayFromStack>
   12d9c:	|     |      addq.l #8,sp
   12d9e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12da2:	|     |      moveq #24,d0
   12da4:	|     |      add.l 16(sp),d0
   12da8:	|     |      move.l d0,-(sp)
   12daa:	|     |      jsr 14f5e <trimStack>
   12db0:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12db2:	|     |      tst.w 6(sp)
   12db6:	|     |  ,-- beq.s 12dbc <builtIn_makeFastArray+0x54>
   12db8:	|     |  |   moveq #2,d0
   12dba:	|  ,--|--|-- bra.s 12e10 <builtIn_makeFastArray+0xa8>
   12dbc:	|  |  |  '-> moveq #1,d0
   12dbe:	|  +--|----- bra.s 12e10 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12dc0:	|  |  '----> movea.l 16(sp),a0
   12dc4:	|  |         movea.l 24(a0),a0
   12dc8:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12dce:	|  |         moveq #24,d0
   12dd0:	|  |         add.l 16(sp),d0
   12dd4:	|  |         move.l d0,-(sp)
   12dd6:	|  |         jsr 14f5e <trimStack>
   12ddc:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12dde:	|  |         moveq #28,d0
   12de0:	|  |         add.l 16(sp),d0
   12de4:	|  |         move.l 2(sp),-(sp)
   12de8:	|  |         move.l d0,-(sp)
   12dea:	|  |         jsr 146f6 <makeFastArraySize>
   12df0:	|  |         addq.l #8,sp
   12df2:	|  |         tst.w d0
   12df4:	|  |     ,-- beq.s 12dfa <builtIn_makeFastArray+0x92>
   12df6:	|  |     |   moveq #2,d0
   12df8:	|  +-----|-- bra.s 12e10 <builtIn_makeFastArray+0xa8>
   12dfa:	|  |     '-> moveq #1,d0
   12dfc:	|  +-------- bra.s 12e10 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12dfe:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12e00:	   |         pea 19c46 <talk.c.490538ff+0x327>
   12e06:	   |         jsr 170ba <KPrintF>
   12e0c:	   |         addq.l #4,sp
	return BR_ERROR;
   12e0e:	   |         moveq #1,d0
}
   12e10:	   '-------> addq.l #8,sp
   12e12:	             rts

00012e14 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12e14:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e16:	          movea.l 16(sp),a0
   12e1a:	          move.l 24(a0),d0
   12e1e:	          move.l d0,-(sp)
   12e20:	          pea 7 <_start+0x7>
   12e24:	          move.l sp,d0
   12e26:	          addq.l #8,d0
   12e28:	          move.l d0,-(sp)
   12e2a:	          jsr 145da <getValueType>
   12e30:	          lea 12(sp),sp
   12e34:	          tst.w d0
   12e36:	      ,-- bne.s 12e3c <builtIn_getCharacterScale+0x28>
   12e38:	      |   moveq #1,d0
   12e3a:	,-----|-- bra.s 12eb6 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12e3c:	|     '-> moveq #24,d0
   12e3e:	|         add.l 16(sp),d0
   12e42:	|         move.l d0,-(sp)
   12e44:	|         jsr 14f5e <trimStack>
   12e4a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12e4c:	|         move.l (sp),d0
   12e4e:	|         move.l d0,-(sp)
   12e50:	|         jsr a362 <findPerson>
   12e56:	|         addq.l #4,sp
   12e58:	|         move.l d0,4(sp)
	if (pers) {
   12e5c:	|  ,----- beq.s 12e9c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12e5e:	|  |      movea.l 4(sp),a0
   12e62:	|  |      move.l 32(a0),d0
   12e66:	|  |      move.l #1120403456,-(sp)
   12e6c:	|  |      move.l d0,-(sp)
   12e6e:	|  |      jsr 1759e <__mulsf3>
   12e74:	|  |      addq.l #8,sp
   12e76:	|  |      move.l d0,-(sp)
   12e78:	|  |      jsr 17484 <__fixsfsi>
   12e7e:	|  |      addq.l #4,sp
   12e80:	|  |      move.l d0,d1
   12e82:	|  |      moveq #28,d0
   12e84:	|  |      add.l 16(sp),d0
   12e88:	|  |      move.l d1,-(sp)
   12e8a:	|  |      pea 1 <_start+0x1>
   12e8e:	|  |      move.l d0,-(sp)
   12e90:	|  |      jsr 14ecc <setVariable>
   12e96:	|  |      lea 12(sp),sp
   12e9a:	|  |  ,-- bra.s 12eb4 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12e9c:	|  '--|-> moveq #28,d0
   12e9e:	|     |   add.l 16(sp),d0
   12ea2:	|     |   clr.l -(sp)
   12ea4:	|     |   pea 1 <_start+0x1>
   12ea8:	|     |   move.l d0,-(sp)
   12eaa:	|     |   jsr 14ecc <setVariable>
   12eb0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12eb4:	|     '-> moveq #2,d0
}
   12eb6:	'-------> addq.l #8,sp
   12eb8:	          rts

00012eba <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12eba:	move.l 1ca20 <gameSettings>,d0
   12ec0:	move.l d0,d1
   12ec2:	moveq #28,d0
   12ec4:	add.l 8(sp),d0
   12ec8:	move.l d1,-(sp)
   12eca:	pea 1 <_start+0x1>
   12ece:	move.l d0,-(sp)
   12ed0:	jsr 14ecc <setVariable>
   12ed6:	lea 12(sp),sp
	return BR_CONTINUE;
   12eda:	moveq #2,d0
}
   12edc:	rts

00012ede <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12ede:	moveq #24,d0
   12ee0:	add.l 8(sp),d0
   12ee4:	move.l d0,-(sp)
   12ee6:	jsr 14f5e <trimStack>
   12eec:	addq.l #4,sp
	trimStack (&fun -> stack);
   12eee:	moveq #24,d0
   12ef0:	add.l 8(sp),d0
   12ef4:	move.l d0,-(sp)
   12ef6:	jsr 14f5e <trimStack>
   12efc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12efe:	moveq #28,d0
   12f00:	add.l 8(sp),d0
   12f04:	clr.l -(sp)
   12f06:	pea 1 <_start+0x1>
   12f0a:	move.l d0,-(sp)
   12f0c:	jsr 14ecc <setVariable>
   12f12:	lea 12(sp),sp

	return BR_CONTINUE;
   12f16:	moveq #2,d0

}
   12f18:	rts

00012f1a <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12f1a:	move.l 1c2c0 <lastFramesPerSecond>,d1
   12f20:	moveq #28,d0
   12f22:	add.l 8(sp),d0
   12f26:	move.l d1,-(sp)
   12f28:	pea 1 <_start+0x1>
   12f2c:	move.l d0,-(sp)
   12f2e:	jsr 14ecc <setVariable>
   12f34:	lea 12(sp),sp
	return BR_CONTINUE;
   12f38:	moveq #2,d0
}
   12f3a:	rts

00012f3c <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12f3c:	moveq #2,d0
}
   12f3e:	rts

00012f40 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12f40:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f44:	          movea.l 60(sp),a0
   12f48:	          move.l 24(a0),d0
   12f4c:	          move.l d0,-(sp)
   12f4e:	          pea 1 <_start+0x1>
   12f52:	          pea 1c852 <thumbHeight>
   12f58:	          jsr 145da <getValueType>
   12f5e:	          lea 12(sp),sp
   12f62:	          tst.w d0
   12f64:	      ,-- bne.s 12f6c <builtIn_setThumbnailSize+0x2c>
   12f66:	      |   moveq #1,d0
   12f68:	,-----|-- bra.w 13028 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12f6c:	|     '-> moveq #24,d0
   12f6e:	|         add.l 60(sp),d0
   12f72:	|         move.l d0,-(sp)
   12f74:	|         jsr 14f5e <trimStack>
   12f7a:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f7c:	|         movea.l 60(sp),a0
   12f80:	|         move.l 24(a0),d0
   12f84:	|         move.l d0,-(sp)
   12f86:	|         pea 1 <_start+0x1>
   12f8a:	|         pea 1c84e <thumbWidth>
   12f90:	|         jsr 145da <getValueType>
   12f96:	|         lea 12(sp),sp
   12f9a:	|         tst.w d0
   12f9c:	|     ,-- bne.s 12fa4 <builtIn_setThumbnailSize+0x64>
   12f9e:	|     |   moveq #1,d0
   12fa0:	+-----|-- bra.w 13028 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fa4:	|     '-> moveq #24,d0
   12fa6:	|         add.l 60(sp),d0
   12faa:	|         move.l d0,-(sp)
   12fac:	|         jsr 14f5e <trimStack>
   12fb2:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12fb4:	|         move.l 1c84e <thumbWidth>,d0
   12fba:	|     ,-- bmi.s 12fe8 <builtIn_setThumbnailSize+0xa8>
   12fbc:	|     |   move.l 1c852 <thumbHeight>,d0
   12fc2:	|     +-- bmi.s 12fe8 <builtIn_setThumbnailSize+0xa8>
   12fc4:	|     |   move.l 1c84e <thumbWidth>,d0
   12fca:	|     |   move.l d0,d1
   12fcc:	|     |   move.l 1c89c <winWidth>,d0
   12fd2:	|     |   cmp.l d1,d0
   12fd4:	|     +-- bcs.s 12fe8 <builtIn_setThumbnailSize+0xa8>
   12fd6:	|     |   move.l 1c852 <thumbHeight>,d0
   12fdc:	|     |   move.l d0,d1
   12fde:	|     |   move.l 1c8a0 <winHeight>,d0
   12fe4:	|     |   cmp.l d1,d0
   12fe6:	|  ,--|-- bcc.s 13026 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12fe8:	|  |  '-> move.l 1c852 <thumbHeight>,d1
   12fee:	|  |      move.l 1c84e <thumbWidth>,d0
   12ff4:	|  |      move.l d1,-(sp)
   12ff6:	|  |      move.l d0,-(sp)
   12ff8:	|  |      pea 19c6d <talk.c.490538ff+0x34e>
   12ffe:	|  |      lea 14(sp),a0
   13002:	|  |      move.l a0,-(sp)
   13004:	|  |      jsr 13de4 <sprintf>
   1300a:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1300e:	|  |      lea 2(sp),a0
   13012:	|  |      move.l a0,-(sp)
   13014:	|  |      pea 19c75 <talk.c.490538ff+0x356>
   1301a:	|  |      jsr 170ba <KPrintF>
   13020:	|  |      addq.l #8,sp
		return BR_ERROR;
   13022:	|  |      moveq #1,d0
   13024:	+--|----- bra.s 13028 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13026:	|  '----> moveq #2,d0
}
   13028:	'-------> lea 52(sp),sp
   1302c:	          rts

0001302e <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1302e:	       lea -12(sp),sp
   13032:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13034:	       movea.l 24(sp),a0
   13038:	       move.l 24(a0),d0
   1303c:	       move.l d0,-(sp)
   1303e:	       pea 1 <_start+0x1>
   13042:	       lea 12(sp),a0
   13046:	       move.l a0,-(sp)
   13048:	       jsr 145da <getValueType>
   1304e:	       lea 12(sp),sp
   13052:	       tst.w d0
   13054:	   ,-- bne.s 1305c <builtIn_hasFlag+0x2e>
   13056:	   |   moveq #1,d0
   13058:	,--|-- bra.w 130ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1305c:	|  '-> moveq #24,d0
   1305e:	|      add.l 24(sp),d0
   13062:	|      move.l d0,-(sp)
   13064:	|      jsr 14f5e <trimStack>
   1306a:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1306c:	|      movea.l 24(sp),a0
   13070:	|      move.l 24(a0),d0
   13074:	|      move.l d0,-(sp)
   13076:	|      pea 7 <_start+0x7>
   1307a:	|      moveq #16,d0
   1307c:	|      add.l sp,d0
   1307e:	|      move.l d0,-(sp)
   13080:	|      jsr 145da <getValueType>
   13086:	|      lea 12(sp),sp
   1308a:	|      tst.w d0
   1308c:	|  ,-- bne.s 13092 <builtIn_hasFlag+0x64>
   1308e:	|  |   moveq #1,d0
   13090:	+--|-- bra.s 130ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13092:	|  '-> moveq #24,d0
   13094:	|      add.l 24(sp),d0
   13098:	|      move.l d0,-(sp)
   1309a:	|      jsr 14f5e <trimStack>
   130a0:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   130a2:	|      move.l 8(sp),d0
   130a6:	|      move.l d0,-(sp)
   130a8:	|      jsr d2d0 <findObjectType>
   130ae:	|      addq.l #4,sp
   130b0:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   130b4:	|  ,-- bne.s 130ba <builtIn_hasFlag+0x8c>
   130b6:	|  |   moveq #1,d0
   130b8:	+--|-- bra.s 130ec <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   130ba:	|  '-> movea.l 12(sp),a0
   130be:	|      move.w 36(a0),d0
   130c2:	|      moveq #0,d2
   130c4:	|      move.w d0,d2
   130c6:	|      move.l 4(sp),d1
   130ca:	|      moveq #1,d0
   130cc:	|      lsl.l d1,d0
   130ce:	|      move.l d2,d1
   130d0:	|      and.l d0,d1
   130d2:	|      moveq #28,d0
   130d4:	|      add.l 24(sp),d0
   130d8:	|      move.l d1,-(sp)
   130da:	|      pea 1 <_start+0x1>
   130de:	|      move.l d0,-(sp)
   130e0:	|      jsr 14ecc <setVariable>
   130e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   130ea:	|      moveq #2,d0
}
   130ec:	'----> move.l (sp)+,d2
   130ee:	       lea 12(sp),sp
   130f2:	       rts

000130f4 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   130f4:	       jsr d2be <snapshot>
   130fa:	       tst.w d0
   130fc:	,----- beq.s 13102 <builtIn_snapshotGrab+0xe>
   130fe:	|      moveq #2,d0
   13100:	|  ,-- bra.s 13104 <builtIn_snapshotGrab+0x10>
   13102:	'--|-> moveq #1,d0
}
   13104:	   '-> rts

00013106 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13106:	jsr d16a <nosnapshot>
	return BR_CONTINUE;
   1310c:	moveq #2,d0
}
   1310e:	rts

00013110 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13110:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13112:	move.w 1c198 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1311a:	movea.l 12(sp),a0
   1311e:	move.l 24(a0),d0
   13122:	move.l d0,-(sp)
   13124:	jsr 14b1a <getBoolean>
   1312a:	addq.l #4,sp
   1312c:	move.w d0,1c198 <allowAnyFilename>
	trimStack (&fun -> stack);
   13132:	moveq #24,d0
   13134:	add.l 12(sp),d0
   13138:	move.l d0,-(sp)
   1313a:	jsr 14f5e <trimStack>
   13140:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13142:	movea.w 2(sp),a0
   13146:	moveq #28,d0
   13148:	add.l 12(sp),d0
   1314c:	move.l a0,-(sp)
   1314e:	pea 1 <_start+0x1>
   13152:	move.l d0,-(sp)
   13154:	jsr 14ecc <setVariable>
   1315a:	lea 12(sp),sp
	return BR_CONTINUE;
   1315e:	moveq #2,d0
}
   13160:	addq.l #4,sp
   13162:	rts

00013164 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13164:	moveq #24,d0
   13166:	add.l 8(sp),d0
   1316a:	move.l d0,-(sp)
   1316c:	jsr 14f5e <trimStack>
   13172:	addq.l #4,sp
	trimStack (&fun -> stack);
   13174:	moveq #24,d0
   13176:	add.l 8(sp),d0
   1317a:	move.l d0,-(sp)
   1317c:	jsr 14f5e <trimStack>
   13182:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13184:	moveq #28,d0
   13186:	add.l 8(sp),d0
   1318a:	clr.l -(sp)
   1318c:	pea 1 <_start+0x1>
   13190:	move.l d0,-(sp)
   13192:	jsr 14ecc <setVariable>
   13198:	lea 12(sp),sp

	return BR_CONTINUE;
   1319c:	moveq #2,d0
}
   1319e:	rts

000131a0 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   131a0:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   131a2:	movea.l 12(sp),a0
   131a6:	move.l 24(a0),d0
   131aa:	move.l d0,-(sp)
   131ac:	jsr 14bb0 <getTextFromAnyVar>
   131b2:	addq.l #4,sp
   131b4:	move.l d0,(sp)
	trimStack (&fun -> stack);
   131b6:	moveq #24,d0
   131b8:	add.l 12(sp),d0
   131bc:	move.l d0,-(sp)
   131be:	jsr 14f5e <trimStack>
   131c4:	addq.l #4,sp
	KPrintF (mess);
   131c6:	move.l (sp),-(sp)
   131c8:	jsr 170ba <KPrintF>
   131ce:	addq.l #4,sp
	return BR_ERROR;
   131d0:	moveq #1,d0
}
   131d2:	addq.l #4,sp
   131d4:	rts

000131d6 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   131d6:	moveq #24,d0
   131d8:	add.l 8(sp),d0
   131dc:	move.l d0,-(sp)
   131de:	jsr 14f5e <trimStack>
   131e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   131e6:	moveq #24,d0
   131e8:	add.l 8(sp),d0
   131ec:	move.l d0,-(sp)
   131ee:	jsr 14f5e <trimStack>
   131f4:	addq.l #4,sp
	trimStack (&fun -> stack);
   131f6:	moveq #24,d0
   131f8:	add.l 8(sp),d0
   131fc:	move.l d0,-(sp)
   131fe:	jsr 14f5e <trimStack>
   13204:	addq.l #4,sp
	trimStack (&fun -> stack);
   13206:	moveq #24,d0
   13208:	add.l 8(sp),d0
   1320c:	move.l d0,-(sp)
   1320e:	jsr 14f5e <trimStack>
   13214:	addq.l #4,sp

	return BR_CONTINUE;
   13216:	moveq #2,d0
}
   13218:	rts

0001321a <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1321a:	moveq #24,d0
   1321c:	add.l 8(sp),d0
   13220:	move.l d0,-(sp)
   13222:	jsr 14f5e <trimStack>
   13228:	addq.l #4,sp
	trimStack (&fun -> stack);
   1322a:	moveq #24,d0
   1322c:	add.l 8(sp),d0
   13230:	move.l d0,-(sp)
   13232:	jsr 14f5e <trimStack>
   13238:	addq.l #4,sp
	trimStack (&fun -> stack);
   1323a:	moveq #24,d0
   1323c:	add.l 8(sp),d0
   13240:	move.l d0,-(sp)
   13242:	jsr 14f5e <trimStack>
   13248:	addq.l #4,sp

	return BR_CONTINUE;
   1324a:	moveq #2,d0

}
   1324c:	rts

0001324e <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1324e:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13250:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13256:	sne d0
   13258:	neg.b d0
   1325a:	moveq #0,d1
   1325c:	move.b d0,d1
   1325e:	moveq #28,d0
   13260:	add.l 12(sp),d0
   13264:	move.l d1,-(sp)
   13266:	pea 1 <_start+0x1>
   1326a:	move.l d0,-(sp)
   1326c:	jsr 14ecc <setVariable>
   13272:	lea 12(sp),sp
	return BR_CONTINUE;
   13276:	moveq #2,d0
}
   13278:	addq.l #4,sp
   1327a:	rts

0001327c <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1327c:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1327e:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13284:	pea 19c8c <talk.c.490538ff+0x36d>
   1328a:	jsr 170ba <KPrintF>
   13290:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13292:	tst.w 2(sp)
   13296:	sne d0
   13298:	neg.b d0
   1329a:	moveq #0,d1
   1329c:	move.b d0,d1
   1329e:	moveq #28,d0
   132a0:	add.l 12(sp),d0
   132a4:	move.l d1,-(sp)
   132a6:	pea 1 <_start+0x1>
   132aa:	move.l d0,-(sp)
   132ac:	jsr 14ecc <setVariable>
   132b2:	lea 12(sp),sp
	return BR_CONTINUE;
   132b6:	moveq #2,d0
}
   132b8:	addq.l #4,sp
   132ba:	rts

000132bc <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   132bc:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   132c0:	             move.l 104(sp),d0
   132c4:	             cmpi.l #166,d0
   132ca:	,----------- bhi.w 133ac <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   132ce:	|            move.l 104(sp),d0
   132d2:	|            add.l d0,d0
   132d4:	|            movea.l d0,a1
   132d6:	|            adda.l d0,a1
   132d8:	|            lea 1c2de <paramNum>,a0
   132de:	|            move.l (0,a1,a0.l),d0
   132e2:	|            moveq #-1,d1
   132e4:	|            cmp.l d0,d1
   132e6:	|  ,-------- beq.w 13374 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   132ea:	|  |         move.l 104(sp),d0
   132ee:	|  |         add.l d0,d0
   132f0:	|  |         movea.l d0,a1
   132f2:	|  |         adda.l d0,a1
   132f4:	|  |         lea 1c2de <paramNum>,a0
   132fa:	|  |         move.l (0,a1,a0.l),d0
   132fe:	|  |         cmp.l 108(sp),d0
   13302:	|  +-------- beq.s 13374 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13304:	|  |         move.l 104(sp),d0
   13308:	|  |         add.l d0,d0
   1330a:	|  |         movea.l d0,a1
   1330c:	|  |         adda.l d0,a1
   1330e:	|  |         lea 1c2de <paramNum>,a0
   13314:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13318:	|  |         moveq #1,d1
   1331a:	|  |         cmp.l d0,d1
   1331c:	|  |  ,----- bne.s 13326 <callBuiltIn+0x6a>
   1331e:	|  |  |      move.l #100490,d0
   13324:	|  |  |  ,-- bra.s 1332c <callBuiltIn+0x70>
   13326:	|  |  '--|-> move.l #105666,d0
   1332c:	|  |     '-> move.l 104(sp),d1
   13330:	|  |         add.l d1,d1
   13332:	|  |         movea.l d1,a1
   13334:	|  |         adda.l d1,a1
   13336:	|  |         lea 1c2de <paramNum>,a0
   1333c:	|  |         move.l (0,a1,a0.l),d1
   13340:	|  |         move.l d0,-(sp)
   13342:	|  |         move.l d1,-(sp)
   13344:	|  |         pea 19cc4 <talk.c.490538ff+0x3a5>
   1334a:	|  |         lea 12(sp),a0
   1334e:	|  |         move.l a0,-(sp)
   13350:	|  |         jsr 13de4 <sprintf>
   13356:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1335a:	|  |         movea.l sp,a0
   1335c:	|  |         move.l a0,-(sp)
   1335e:	|  |         jsr b8 <copyString>
   13364:	|  |         addq.l #4,sp
   13366:	|  |         move.l d0,-(sp)
   13368:	|  |         jsr 170ba <KPrintF>
   1336e:	|  |         addq.l #4,sp
				return BR_ERROR;
   13370:	|  |         moveq #1,d0
   13372:	|  |     ,-- bra.s 133bc <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13374:	|  '-----|-> move.l 104(sp),d0
   13378:	|        |   add.l d0,d0
   1337a:	|        |   movea.l d0,a1
   1337c:	|        |   adda.l d0,a1
   1337e:	|        |   lea 1c57a <builtInFunctionArray>,a0
   13384:	|        |   move.l (0,a1,a0.l),d0
   13388:	+--------|-- beq.s 133ac <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1338a:	|        |   move.l 104(sp),d0
   1338e:	|        |   add.l d0,d0
   13390:	|        |   movea.l d0,a1
   13392:	|        |   adda.l d0,a1
   13394:	|        |   lea 1c57a <builtInFunctionArray>,a0
   1339a:	|        |   movea.l (0,a1,a0.l),a0
   1339e:	|        |   move.l 112(sp),-(sp)
   133a2:	|        |   move.l 112(sp),-(sp)
   133a6:	|        |   jsr (a0)
   133a8:	|        |   addq.l #8,sp
   133aa:	|        +-- bra.s 133bc <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   133ac:	'--------|-> pea 19cef <talk.c.490538ff+0x3d0>
   133b2:	         |   jsr 170ba <KPrintF>
   133b8:	         |   addq.l #4,sp
	return BR_ERROR;
   133ba:	         |   moveq #1,d0
}
   133bc:	         '-> lea 100(sp),sp
   133c0:	             rts

000133c2 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   133c2:	          subq.l #8,sp
	int indexNum = -1;
   133c4:	          moveq #-1,d0
   133c6:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   133ca:	          clr.l (sp)
   133cc:	   ,----- bra.s 133f2 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   133ce:	,--|----> move.l 1ca18 <languageTable>,d1
   133d4:	|  |      move.l (sp),d0
   133d6:	|  |      add.l d0,d0
   133d8:	|  |      add.l d0,d0
   133da:	|  |      movea.l d1,a0
   133dc:	|  |      adda.l d0,a0
   133de:	|  |      move.l (a0),d0
   133e0:	|  |      move.l d0,d1
   133e2:	|  |      move.l 1ca20 <gameSettings>,d0
   133e8:	|  |      cmp.l d1,d0
   133ea:	|  |  ,-- bne.s 133f0 <getLanguageForFileB+0x2e>
   133ec:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   133f0:	|  |  '-> addq.l #1,(sp)
   133f2:	|  '----> move.l 1ca24 <gameSettings+0x4>,d0
   133f8:	|         cmp.l (sp),d0
   133fa:	'-------- bcc.s 133ce <getLanguageForFileB+0xc>
	}

	return indexNum;
   133fc:	          move.l 4(sp),d0
}
   13400:	          addq.l #8,sp
   13402:	          rts

00013404 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13404:	          lea -20(sp),sp
   13408:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1340a:	          move.l 28(sp),-(sp)
   1340e:	          jsr 13ac6 <strlen>
   13414:	          addq.l #4,sp
   13416:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1341a:	          moveq #4,d0
   1341c:	          cmp.l 12(sp),d0
   13420:	      ,-- bge.s 13444 <getPrefsFilename+0x40>
   13422:	      |   move.l 12(sp),d0
   13426:	      |   subq.l #4,d0
   13428:	      |   movea.l 28(sp),a0
   1342c:	      |   adda.l d0,a0
   1342e:	      |   move.b (a0),d0
   13430:	      |   cmpi.b #46,d0
   13434:	      +-- bne.s 13444 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13436:	      |   move.l 12(sp),d0
   1343a:	      |   subq.l #4,d0
   1343c:	      |   movea.l 28(sp),a0
   13440:	      |   adda.l d0,a0
   13442:	      |   clr.b (a0)
	}

	char * f = filename;
   13444:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1344a:	          clr.l 20(sp)
   1344e:	   ,----- bra.s 13476 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13450:	,--|----> move.l 20(sp),d0
   13454:	|  |      movea.l 28(sp),a0
   13458:	|  |      adda.l d0,a0
   1345a:	|  |      move.b (a0),d0
   1345c:	|  |      cmpi.b #47,d0
   13460:	|  |  ,-- bne.s 13472 <getPrefsFilename+0x6e>
   13462:	|  |  |   move.l 20(sp),d0
   13466:	|  |  |   addq.l #1,d0
   13468:	|  |  |   move.l 28(sp),d1
   1346c:	|  |  |   add.l d0,d1
   1346e:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13472:	|  |  '-> addq.l #1,20(sp)
   13476:	|  '----> move.l 20(sp),d0
   1347a:	|         cmp.l 12(sp),d0
   1347e:	'-------- blt.s 13450 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13480:	          pea 19d1a <talk.c.490538ff+0x3fb>
   13486:	          move.l 20(sp),-(sp)
   1348a:	          jsr 13b06 <joinStrings>
   13490:	          addq.l #8,sp
   13492:	          move.l d0,8(sp)

	FreeVec(filename);
   13496:	          move.l 28(sp),4(sp)
   1349c:	          move.l 1c948 <SysBase>,d0
   134a2:	          movea.l d0,a6
   134a4:	          movea.l 4(sp),a1
   134a8:	          jsr -690(a6)
	filename = NULL;
   134ac:	          clr.l 28(sp)
	return joined;
   134b0:	          move.l 8(sp),d0
}
   134b4:	          movea.l (sp)+,a6
   134b6:	          lea 20(sp),sp
   134ba:	          rts

000134bc <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   134bc:	             lea -28(sp),sp
   134c0:	             move.l a6,-(sp)
   134c2:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   134c4:	             move.l 1ca24 <gameSettings+0x4>,d0
   134ca:	             move.l d0,d1
   134cc:	             addq.l #1,d1
   134ce:	             move.l d1,28(sp)
   134d2:	             clr.l 24(sp)
   134d6:	             move.l 1c948 <SysBase>,d0
   134dc:	             movea.l d0,a6
   134de:	             move.l 28(sp),d0
   134e2:	             move.l 24(sp),d1
   134e6:	             jsr -684(a6)
   134ea:	             move.l d0,20(sp)
   134ee:	             move.l 20(sp),d0
   134f2:	             move.l d0,1ca18 <languageTable>
    if( languageTable == 0) {
   134f8:	             move.l 1ca18 <languageTable>,d0
   134fe:	         ,-- bne.s 1350e <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13500:	         |   pea 19d1f <talk.c.490538ff+0x400>
   13506:	         |   jsr 170ba <KPrintF>
   1350c:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1350e:	         '-> move.l 1ca24 <gameSettings+0x4>,d0
   13514:	             move.l d0,d1
   13516:	             addq.l #1,d1
   13518:	             move.l d1,16(sp)
   1351c:	             clr.l 12(sp)
   13520:	             move.l 1c948 <SysBase>,d0
   13526:	             movea.l d0,a6
   13528:	             move.l 16(sp),d0
   1352c:	             move.l 12(sp),d1
   13530:	             jsr -684(a6)
   13534:	             move.l d0,8(sp)
   13538:	             move.l 8(sp),d0
   1353c:	             move.l d0,1ca1c <languageName>
	if( languageName == 0) {
   13542:	             move.l 1ca1c <languageName>,d0
   13548:	         ,-- bne.s 13558 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1354a:	         |   pea 19d55 <talk.c.490538ff+0x436>
   13550:	         |   jsr 170ba <KPrintF>
   13556:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13558:	         '-> clr.l 32(sp)
   1355c:	   ,-------- bra.s 135d4 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1355e:	,--|-------> tst.l 32(sp)
   13562:	|  |  ,----- beq.s 13572 <makeLanguageTable+0xb6>
   13564:	|  |  |      move.l 40(sp),-(sp)
   13568:	|  |  |      jsr 6bc <get2bytes>
   1356e:	|  |  |      addq.l #4,sp
   13570:	|  |  |  ,-- bra.s 13574 <makeLanguageTable+0xb8>
   13572:	|  |  '--|-> moveq #0,d0
   13574:	|  |     '-> movea.l 1ca18 <languageTable>,a0
   1357a:	|  |         move.l 32(sp),d1
   1357e:	|  |         add.l d1,d1
   13580:	|  |         add.l d1,d1
   13582:	|  |         adda.l d1,a0
   13584:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13586:	|  |         move.l 1ca1c <languageName>,d1
   1358c:	|  |         move.l 32(sp),d0
   13590:	|  |         add.l d0,d0
   13592:	|  |         add.l d0,d0
   13594:	|  |         movea.l d1,a0
   13596:	|  |         adda.l d0,a0
   13598:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1359a:	|  |         move.l 1c8f2 <gameVersion>,d0
   135a0:	|  |         cmpi.l #511,d0
   135a6:	|  |     ,-- ble.s 135d0 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   135a8:	|  |     |   move.l 1ca24 <gameSettings+0x4>,d0
   135ae:	|  |     +-- beq.s 135d0 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   135b0:	|  |     |   move.l 1ca1c <languageName>,d1
   135b6:	|  |     |   move.l 32(sp),d0
   135ba:	|  |     |   add.l d0,d0
   135bc:	|  |     |   add.l d0,d0
   135be:	|  |     |   movea.l d1,a2
   135c0:	|  |     |   adda.l d0,a2
   135c2:	|  |     |   move.l 40(sp),-(sp)
   135c6:	|  |     |   jsr b02 <readString>
   135cc:	|  |     |   addq.l #4,sp
   135ce:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135d0:	|  |     '-> addq.l #1,32(sp)
   135d4:	|  '-------> move.l 1ca24 <gameSettings+0x4>,d0
   135da:	|            cmp.l 32(sp),d0
   135de:	'----------- bcc.w 1355e <makeLanguageTable+0xa2>
		}
	}
}
   135e2:	             nop
   135e4:	             nop
   135e6:	             movea.l (sp)+,a2
   135e8:	             movea.l (sp)+,a6
   135ea:	             lea 28(sp),sp
   135ee:	             rts

000135f0 <readIniFile>:

void readIniFile (char * filename) {
   135f0:	                      lea -564(sp),sp
   135f4:	                      move.l a6,-(sp)
   135f6:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   135f8:	                      move.l 576(sp),-(sp)
   135fc:	                      jsr b8 <copyString>
   13602:	                      addq.l #4,sp
   13604:	                      move.l d0,-(sp)
   13606:	                      jsr 13404 <getPrefsFilename>
   1360c:	                      addq.l #4,sp
   1360e:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13612:	                      move.l 562(sp),558(sp)
   13618:	                      move.l #1005,554(sp)
   13620:	                      move.l 1c950 <DOSBase>,d0
   13626:	                      movea.l d0,a6
   13628:	                      move.l 558(sp),d1
   1362c:	                      move.l 554(sp),d2
   13630:	                      jsr -30(a6)
   13634:	                      move.l d0,550(sp)
   13638:	                      move.l 550(sp),d0
   1363c:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13640:	                      clr.l 1ca20 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13646:	                      move.w #1,1ca28 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1364e:	                      clr.l 1ca2a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13654:	                      moveq #1,d0
   13656:	                      move.l d0,1ca2e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1365c:	                      clr.w 1ca32 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13662:	                      clr.w 1ca34 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13668:	                      clr.w 1ca36 <gameSettings+0x16>

	FreeVec(langName);
   1366e:	                      move.l 562(sp),542(sp)
   13674:	                      move.l 1c948 <SysBase>,d0
   1367a:	                      movea.l d0,a6
   1367c:	                      movea.l 542(sp),a1
   13680:	                      jsr -690(a6)
	langName = NULL;
   13684:	                      clr.l 562(sp)

	if (fp) {
   13688:	                      tst.l 546(sp)
   1368c:	,-------------------- beq.w 1396a <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13690:	|                     move.l sp,d0
   13692:	|                     addi.l #265,d0
   13698:	|                     move.l #257,d1
   1369e:	|                     move.l d1,-(sp)
   136a0:	|                     clr.l -(sp)
   136a2:	|                     move.l d0,-(sp)
   136a4:	|                     jsr 1703e <memset>
   136aa:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   136ae:	|                     move.l sp,d0
   136b0:	|                     addq.l #8,d0
   136b2:	|                     move.l #257,d1
   136b8:	|                     move.l d1,-(sp)
   136ba:	|                     clr.l -(sp)
   136bc:	|                     move.l d0,-(sp)
   136be:	|                     jsr 1703e <memset>
   136c4:	|                     lea 12(sp),sp
		unsigned char here = 0;
   136c8:	|                     clr.b 571(sp)
		char readChar = ' ';
   136cc:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   136d2:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   136d8:	|                     clr.w 566(sp)
		LONG tmp = 0;
   136dc:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   136e0:	|  ,----------------> move.l 546(sp),534(sp)
   136e6:	|  |                  move.l 1c950 <DOSBase>,d0
   136ec:	|  |                  movea.l d0,a6
   136ee:	|  |                  move.l 534(sp),d1
   136f2:	|  |                  jsr -306(a6)
   136f6:	|  |                  move.l d0,530(sp)
   136fa:	|  |                  move.l 530(sp),d0
   136fe:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13702:	|  |                  moveq #-1,d1
   13704:	|  |                  cmp.l 538(sp),d1
   13708:	|  |           ,----- bne.s 13716 <readIniFile+0x126>
				readChar = '\n';
   1370a:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13710:	|  |           |      clr.w 568(sp)
   13714:	|  |           |  ,-- bra.s 1371c <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13716:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1371c:	|  |              '-> move.b 570(sp),d0
   13720:	|  |                  ext.w d0
   13722:	|  |                  movea.w d0,a0
   13724:	|  |                  moveq #61,d0
   13726:	|  |                  cmp.l a0,d0
   13728:	|  |     ,----------- beq.w 138d2 <readIniFile+0x2e2>
   1372c:	|  |     |            moveq #61,d1
   1372e:	|  |     |            cmp.l a0,d1
   13730:	|  |  ,--|----------- blt.w 138de <readIniFile+0x2ee>
   13734:	|  |  |  |            moveq #10,d0
   13736:	|  |  |  |            cmp.l a0,d0
   13738:	|  |  |  |        ,-- beq.s 13742 <readIniFile+0x152>
   1373a:	|  |  |  |        |   moveq #13,d1
   1373c:	|  |  |  |        |   cmp.l a0,d1
   1373e:	|  |  +--|--------|-- bne.w 138de <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13742:	|  |  |  |        '-> tst.w 566(sp)
   13746:	|  |  |  |     ,----- beq.w 138c0 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1374a:	|  |  |  |     |      pea 19d89 <talk.c.490538ff+0x46a>
   13750:	|  |  |  |     |      move.l sp,d0
   13752:	|  |  |  |     |      addi.l #269,d0
   13758:	|  |  |  |     |      move.l d0,-(sp)
   1375a:	|  |  |  |     |      jsr 13a86 <strcmp>
   13760:	|  |  |  |     |      addq.l #8,sp
   13762:	|  |  |  |     |      tst.l d0
   13764:	|  |  |  |     |  ,-- bne.s 1377e <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13766:	|  |  |  |     |  |   move.l sp,d0
   13768:	|  |  |  |     |  |   addq.l #8,d0
   1376a:	|  |  |  |     |  |   move.l d0,-(sp)
   1376c:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   13772:	|  |  |  |     |  |   addq.l #4,sp
   13774:	|  |  |  |     |  |   move.l d0,1ca20 <gameSettings>
   1377a:	|  |  |  |     +--|-- bra.w 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1377e:	|  |  |  |     |  '-> pea 19d92 <talk.c.490538ff+0x473>
   13784:	|  |  |  |     |      move.l sp,d0
   13786:	|  |  |  |     |      addi.l #269,d0
   1378c:	|  |  |  |     |      move.l d0,-(sp)
   1378e:	|  |  |  |     |      jsr 13a86 <strcmp>
   13794:	|  |  |  |     |      addq.l #8,sp
   13796:	|  |  |  |     |      tst.l d0
   13798:	|  |  |  |     |  ,-- bne.s 137be <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1379a:	|  |  |  |     |  |   move.l sp,d0
   1379c:	|  |  |  |     |  |   addq.l #8,d0
   1379e:	|  |  |  |     |  |   move.l d0,-(sp)
   137a0:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   137a6:	|  |  |  |     |  |   addq.l #4,sp
   137a8:	|  |  |  |     |  |   tst.l d0
   137aa:	|  |  |  |     |  |   seq d0
   137ac:	|  |  |  |     |  |   neg.b d0
   137ae:	|  |  |  |     |  |   move.b d0,d0
   137b0:	|  |  |  |     |  |   andi.w #255,d0
   137b4:	|  |  |  |     |  |   move.w d0,1ca28 <gameSettings+0x8>
   137ba:	|  |  |  |     +--|-- bra.w 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   137be:	|  |  |  |     |  '-> pea 19d99 <talk.c.490538ff+0x47a>
   137c4:	|  |  |  |     |      move.l sp,d0
   137c6:	|  |  |  |     |      addi.l #269,d0
   137cc:	|  |  |  |     |      move.l d0,-(sp)
   137ce:	|  |  |  |     |      jsr 13a86 <strcmp>
   137d4:	|  |  |  |     |      addq.l #8,sp
   137d6:	|  |  |  |     |      tst.l d0
   137d8:	|  |  |  |     |  ,-- bne.s 137f2 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   137da:	|  |  |  |     |  |   move.l sp,d0
   137dc:	|  |  |  |     |  |   addq.l #8,d0
   137de:	|  |  |  |     |  |   move.l d0,-(sp)
   137e0:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   137e6:	|  |  |  |     |  |   addq.l #4,sp
   137e8:	|  |  |  |     |  |   move.l d0,1ca2a <gameSettings+0xa>
   137ee:	|  |  |  |     +--|-- bra.w 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   137f2:	|  |  |  |     |  '-> pea 19da1 <talk.c.490538ff+0x482>
   137f8:	|  |  |  |     |      move.l sp,d0
   137fa:	|  |  |  |     |      addi.l #269,d0
   13800:	|  |  |  |     |      move.l d0,-(sp)
   13802:	|  |  |  |     |      jsr 13a86 <strcmp>
   13808:	|  |  |  |     |      addq.l #8,sp
   1380a:	|  |  |  |     |      tst.l d0
   1380c:	|  |  |  |     |  ,-- bne.s 13826 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   1380e:	|  |  |  |     |  |   move.l sp,d0
   13810:	|  |  |  |     |  |   addq.l #8,d0
   13812:	|  |  |  |     |  |   move.l d0,-(sp)
   13814:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   1381a:	|  |  |  |     |  |   addq.l #4,sp
   1381c:	|  |  |  |     |  |   move.l d0,1ca2e <gameSettings+0xe>
   13822:	|  |  |  |     +--|-- bra.w 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13826:	|  |  |  |     |  '-> pea 19dab <talk.c.490538ff+0x48c>
   1382c:	|  |  |  |     |      move.l sp,d0
   1382e:	|  |  |  |     |      addi.l #269,d0
   13834:	|  |  |  |     |      move.l d0,-(sp)
   13836:	|  |  |  |     |      jsr 13a86 <strcmp>
   1383c:	|  |  |  |     |      addq.l #8,sp
   1383e:	|  |  |  |     |      tst.l d0
   13840:	|  |  |  |     |  ,-- bne.s 1385a <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13842:	|  |  |  |     |  |   move.l sp,d0
   13844:	|  |  |  |     |  |   addq.l #8,d0
   13846:	|  |  |  |     |  |   move.l d0,-(sp)
   13848:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   1384e:	|  |  |  |     |  |   addq.l #4,sp
   13850:	|  |  |  |     |  |   move.l d0,d0
   13852:	|  |  |  |     |  |   move.w d0,1ca32 <gameSettings+0x12>
   13858:	|  |  |  |     +--|-- bra.s 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1385a:	|  |  |  |     |  '-> pea 19db7 <talk.c.490538ff+0x498>
   13860:	|  |  |  |     |      move.l sp,d0
   13862:	|  |  |  |     |      addi.l #269,d0
   13868:	|  |  |  |     |      move.l d0,-(sp)
   1386a:	|  |  |  |     |      jsr 13a86 <strcmp>
   13870:	|  |  |  |     |      addq.l #8,sp
   13872:	|  |  |  |     |      tst.l d0
   13874:	|  |  |  |     |  ,-- bne.s 1388e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13876:	|  |  |  |     |  |   move.l sp,d0
   13878:	|  |  |  |     |  |   addq.l #8,d0
   1387a:	|  |  |  |     |  |   move.l d0,-(sp)
   1387c:	|  |  |  |     |  |   jsr 13976 <stringToInt>
   13882:	|  |  |  |     |  |   addq.l #4,sp
   13884:	|  |  |  |     |  |   move.l d0,d0
   13886:	|  |  |  |     |  |   move.w d0,1ca34 <gameSettings+0x14>
   1388c:	|  |  |  |     +--|-- bra.s 138c0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1388e:	|  |  |  |     |  '-> pea 19dc5 <talk.c.490538ff+0x4a6>
   13894:	|  |  |  |     |      move.l sp,d0
   13896:	|  |  |  |     |      addi.l #269,d0
   1389c:	|  |  |  |     |      move.l d0,-(sp)
   1389e:	|  |  |  |     |      jsr 13a86 <strcmp>
   138a4:	|  |  |  |     |      addq.l #8,sp
   138a6:	|  |  |  |     |      tst.l d0
   138a8:	|  |  |  |     +----- bne.s 138c0 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   138aa:	|  |  |  |     |      move.l sp,d0
   138ac:	|  |  |  |     |      addq.l #8,d0
   138ae:	|  |  |  |     |      move.l d0,-(sp)
   138b0:	|  |  |  |     |      jsr 13976 <stringToInt>
   138b6:	|  |  |  |     |      addq.l #4,sp
   138b8:	|  |  |  |     |      move.l d0,d0
   138ba:	|  |  |  |     |      move.w d0,1ca36 <gameSettings+0x16>
					}
				}
				here = 0;
   138c0:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   138c4:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   138c8:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   138cc:	|  |  |  |            clr.b 8(sp)
				break;
   138d0:	|  |  |  |  ,-------- bra.s 13948 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   138d2:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   138d8:	|  |  |     |         clr.b 571(sp)
				break;
   138dc:	|  |  |     +-------- bra.s 13948 <readIniFile+0x358>

				default:
				if (doingSecond) {
   138de:	|  |  '-----|-------> tst.w 566(sp)
   138e2:	|  |        |  ,----- beq.s 13916 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   138e4:	|  |        |  |      move.b 571(sp),d0
   138e8:	|  |        |  |      move.b d0,d1
   138ea:	|  |        |  |      addq.b #1,d1
   138ec:	|  |        |  |      move.b d1,571(sp)
   138f0:	|  |        |  |      move.b d0,d0
   138f2:	|  |        |  |      andi.l #255,d0
   138f8:	|  |        |  |      lea 572(sp),a0
   138fc:	|  |        |  |      adda.l d0,a0
   138fe:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13904:	|  |        |  |      moveq #0,d0
   13906:	|  |        |  |      move.b 571(sp),d0
   1390a:	|  |        |  |      lea 572(sp),a0
   1390e:	|  |        |  |      adda.l d0,a0
   13910:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13914:	|  |        |  |  ,-- bra.s 13946 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13916:	|  |        |  '--|-> move.b 571(sp),d0
   1391a:	|  |        |     |   move.b d0,d1
   1391c:	|  |        |     |   addq.b #1,d1
   1391e:	|  |        |     |   move.b d1,571(sp)
   13922:	|  |        |     |   move.b d0,d0
   13924:	|  |        |     |   andi.l #255,d0
   1392a:	|  |        |     |   lea 572(sp),a0
   1392e:	|  |        |     |   adda.l d0,a0
   13930:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13936:	|  |        |     |   moveq #0,d0
   13938:	|  |        |     |   move.b 571(sp),d0
   1393c:	|  |        |     |   lea 572(sp),a0
   13940:	|  |        |     |   adda.l d0,a0
   13942:	|  |        |     |   clr.b -307(a0)
				break;
   13946:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13948:	|  |        '-------> tst.w 568(sp)
   1394c:	|  '----------------- bne.w 136e0 <readIniFile+0xf0>

		Close(fp);
   13950:	|                     move.l 546(sp),526(sp)
   13956:	|                     move.l 1c950 <DOSBase>,d0
   1395c:	|                     movea.l d0,a6
   1395e:	|                     move.l 526(sp),d1
   13962:	|                     jsr -36(a6)
   13966:	|                     move.l d0,522(sp)
	}
}
   1396a:	'-------------------> nop
   1396c:	                      move.l (sp)+,d2
   1396e:	                      movea.l (sp)+,a6
   13970:	                      lea 564(sp),sp
   13974:	                      rts

00013976 <stringToInt>:

unsigned int stringToInt (char * s) {
   13976:	             subq.l #8,sp
	int i = 0;
   13978:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1397c:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13980:	,----------> movea.l 12(sp),a0
   13984:	|            move.b (a0),d0
   13986:	|            cmpi.b #47,d0
   1398a:	|        ,-- ble.s 139c2 <stringToInt+0x4c>
   1398c:	|        |   movea.l 12(sp),a0
   13990:	|        |   move.b (a0),d0
   13992:	|        |   cmpi.b #57,d0
   13996:	|        +-- bgt.s 139c2 <stringToInt+0x4c>
			i *= 10;
   13998:	|        |   move.l 4(sp),d1
   1399c:	|        |   move.l d1,d0
   1399e:	|        |   add.l d0,d0
   139a0:	|        |   add.l d0,d0
   139a2:	|        |   add.l d1,d0
   139a4:	|        |   add.l d0,d0
   139a6:	|        |   move.l d0,4(sp)
			i += *s - '0';
   139aa:	|        |   movea.l 12(sp),a0
   139ae:	|        |   move.b (a0),d0
   139b0:	|        |   ext.w d0
   139b2:	|        |   movea.w d0,a0
   139b4:	|        |   moveq #-48,d0
   139b6:	|        |   add.l a0,d0
   139b8:	|        |   add.l d0,4(sp)
			s ++;
   139bc:	|        |   addq.l #1,12(sp)
   139c0:	|  ,-----|-- bra.s 139fa <stringToInt+0x84>
		} else if (*s == '-') {
   139c2:	|  |     '-> movea.l 12(sp),a0
   139c6:	|  |         move.b (a0),d0
   139c8:	|  |         cmpi.b #45,d0
   139cc:	|  |     ,-- bne.s 139e6 <stringToInt+0x70>
			negative = ! negative;
   139ce:	|  |     |   tst.w 2(sp)
   139d2:	|  |     |   seq d0
   139d4:	|  |     |   neg.b d0
   139d6:	|  |     |   move.b d0,d0
   139d8:	|  |     |   andi.w #255,d0
   139dc:	|  |     |   move.w d0,2(sp)
			s++;
   139e0:	|  |     |   addq.l #1,12(sp)
   139e4:	+--|-----|-- bra.s 13980 <stringToInt+0xa>
		} else {
			if (negative)
   139e6:	|  |     '-> tst.w 2(sp)
   139ea:	|  |     ,-- beq.s 139f4 <stringToInt+0x7e>
				return -i;
   139ec:	|  |     |   move.l 4(sp),d0
   139f0:	|  |     |   neg.l d0
   139f2:	|  |  ,--|-- bra.s 139fc <stringToInt+0x86>
			return i;
   139f4:	|  |  |  '-> move.l 4(sp),d0
   139f8:	|  |  +----- bra.s 139fc <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   139fa:	'--'--|----X bra.s 13980 <stringToInt+0xa>
		}
	}
   139fc:	      '----> addq.l #8,sp
   139fe:	             rts

00013a00 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13a00:	    lea -28(sp),sp
   13a04:	    move.l a6,-(sp)
   13a06:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13a08:	    pea 19dcf <talk.c.490538ff+0x4b0>
   13a0e:	    jsr 170ba <KPrintF>
   13a14:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13a16:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13a1a:	    move.l 40(sp),30(sp)
   13a20:	    move.l #1005,26(sp)
   13a28:	    move.l 1c950 <DOSBase>,d0
   13a2e:	    movea.l d0,a6
   13a30:	    move.l 30(sp),d1
   13a34:	    move.l 26(sp),d2
   13a38:	    jsr -30(a6)
   13a3c:	    move.l d0,22(sp)
   13a40:	    move.l 22(sp),d0
   13a44:	    move.l d0,18(sp)
	if (tester) {
   13a48:	,-- beq.s 13a78 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13a4a:	|   pea 19de9 <talk.c.490538ff+0x4ca>
   13a50:	|   jsr 170ba <KPrintF>
   13a56:	|   addq.l #4,sp
		retval = 1;
   13a58:	|   move.b #1,35(sp)
		Close(tester);
   13a5e:	|   move.l 18(sp),14(sp)
   13a64:	|   move.l 1c950 <DOSBase>,d0
   13a6a:	|   movea.l d0,a6
   13a6c:	|   move.l 14(sp),d1
   13a70:	|   jsr -36(a6)
   13a74:	|   move.l d0,10(sp)
	}
	return retval;
   13a78:	'-> move.b 35(sp),d0
   13a7c:	    move.l (sp)+,d2
   13a7e:	    movea.l (sp)+,a6
   13a80:	    lea 28(sp),sp
   13a84:	    rts

00013a86 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13a86:	   ,-- bra.s 13a90 <strcmp+0xa>
    {
        s1++;
   13a88:	,--|-> addq.l #1,4(sp)
        s2++;
   13a8c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13a90:	|  '-> movea.l 4(sp),a0
   13a94:	|      move.b (a0),d0
   13a96:	|  ,-- beq.s 13aa8 <strcmp+0x22>
   13a98:	|  |   movea.l 4(sp),a0
   13a9c:	|  |   move.b (a0),d1
   13a9e:	|  |   movea.l 8(sp),a0
   13aa2:	|  |   move.b (a0),d0
   13aa4:	|  |   cmp.b d1,d0
   13aa6:	'--|-- beq.s 13a88 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13aa8:	   '-> movea.l 4(sp),a0
   13aac:	       move.b (a0),d0
   13aae:	       moveq #0,d1
   13ab0:	       move.b d0,d1
   13ab2:	       movea.l 8(sp),a0
   13ab6:	       move.b (a0),d0
   13ab8:	       move.b d0,d0
   13aba:	       andi.l #255,d0
   13ac0:	       sub.l d0,d1
   13ac2:	       move.l d1,d0
}
   13ac4:	       rts

00013ac6 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13ac6:	       subq.l #4,sp
	long unsigned int i = 0;
   13ac8:	       clr.l (sp)
	while(s[i]) i++; 
   13aca:	   ,-- bra.s 13ace <strlen+0x8>
   13acc:	,--|-> addq.l #1,(sp)
   13ace:	|  '-> movea.l 8(sp),a0
   13ad2:	|      adda.l (sp),a0
   13ad4:	|      move.b (a0),d0
   13ad6:	'----- bne.s 13acc <strlen+0x6>
	return(i);
   13ad8:	       move.l (sp),d0
}
   13ada:	       addq.l #4,sp
   13adc:	       rts

00013ade <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13ade:	    nop
   13ae0:	,-> move.l 8(sp),d0
   13ae4:	|   move.l d0,d1
   13ae6:	|   addq.l #1,d1
   13ae8:	|   move.l d1,8(sp)
   13aec:	|   movea.l 4(sp),a0
   13af0:	|   lea 1(a0),a1
   13af4:	|   move.l a1,4(sp)
   13af8:	|   movea.l d0,a1
   13afa:	|   move.b (a1),d0
   13afc:	|   move.b d0,(a0)
   13afe:	|   move.b (a0),d0
   13b00:	'-- bne.s 13ae0 <strcpy+0x2>
}
   13b02:	    nop
   13b04:	    rts

00013b06 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13b06:	    lea -20(sp),sp
   13b0a:	    move.l a6,-(sp)
   13b0c:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13b0e:	    move.l 32(sp),-(sp)
   13b12:	    jsr 13ac6 <strlen>
   13b18:	    addq.l #4,sp
   13b1a:	    move.l d0,d2
   13b1c:	    move.l 36(sp),-(sp)
   13b20:	    jsr 13ac6 <strlen>
   13b26:	    addq.l #4,sp
   13b28:	    add.l d2,d0
   13b2a:	    move.l d0,d1
   13b2c:	    addq.l #1,d1
   13b2e:	    move.l d1,20(sp)
   13b32:	    clr.l 16(sp)
   13b36:	    move.l 1c948 <SysBase>,d0
   13b3c:	    movea.l d0,a6
   13b3e:	    move.l 20(sp),d0
   13b42:	    move.l 16(sp),d1
   13b46:	    jsr -684(a6)
   13b4a:	    move.l d0,12(sp)
   13b4e:	    move.l 12(sp),d0
   13b52:	    move.l d0,8(sp)
	char * t = newString;
   13b56:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13b5c:	    nop
   13b5e:	,-> move.l 32(sp),d0
   13b62:	|   move.l d0,d1
   13b64:	|   addq.l #1,d1
   13b66:	|   move.l d1,32(sp)
   13b6a:	|   movea.l 24(sp),a0
   13b6e:	|   lea 1(a0),a1
   13b72:	|   move.l a1,24(sp)
   13b76:	|   movea.l d0,a1
   13b78:	|   move.b (a1),d0
   13b7a:	|   move.b d0,(a0)
   13b7c:	|   move.b (a0),d0
   13b7e:	'-- bne.s 13b5e <joinStrings+0x58>
	t--;
   13b80:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13b84:	    nop
   13b86:	,-> move.l 36(sp),d0
   13b8a:	|   move.l d0,d1
   13b8c:	|   addq.l #1,d1
   13b8e:	|   move.l d1,36(sp)
   13b92:	|   movea.l 24(sp),a0
   13b96:	|   lea 1(a0),a1
   13b9a:	|   move.l a1,24(sp)
   13b9e:	|   movea.l d0,a1
   13ba0:	|   move.b (a1),d0
   13ba2:	|   move.b d0,(a0)
   13ba4:	|   move.b (a0),d0
   13ba6:	'-- bne.s 13b86 <joinStrings+0x80>

	return newString;
   13ba8:	    move.l 8(sp),d0
}
   13bac:	    move.l (sp)+,d2
   13bae:	    movea.l (sp)+,a6
   13bb0:	    lea 20(sp),sp
   13bb4:	    rts

00013bb6 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13bb6:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13bba:	       moveq #10,d0
   13bbc:	       cmp.l 28(sp),d0
   13bc0:	   ,-- bne.s 13bde <itoa+0x28>
   13bc2:	   |   tst.l 20(sp)
   13bc6:	   +-- bge.s 13bde <itoa+0x28>
        *str++ = '-';
   13bc8:	   |   move.l 24(sp),d0
   13bcc:	   |   move.l d0,d1
   13bce:	   |   addq.l #1,d1
   13bd0:	   |   move.l d1,24(sp)
   13bd4:	   |   movea.l d0,a0
   13bd6:	   |   move.b #45,(a0)
        value *= -1;
   13bda:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13bde:	   '-> move.l 24(sp),12(sp)
   13be4:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13bea:	   ,-> move.l 20(sp),d0
   13bee:	   |   move.l 28(sp),-(sp)
   13bf2:	   |   move.l d0,-(sp)
   13bf4:	   |   jsr 17af2 <__modsi3>
   13bfa:	   |   addq.l #8,sp
   13bfc:	   |   movea.l d0,a1
   13bfe:	   |   move.l 12(sp),d0
   13c02:	   |   move.l d0,d1
   13c04:	   |   addq.l #1,d1
   13c06:	   |   move.l d1,12(sp)
   13c0a:	   |   lea 19e01 <talk.c.490538ff+0x4e2>,a0
   13c10:	   |   move.b (0,a1,a0.l),d1
   13c14:	   |   movea.l d0,a0
   13c16:	   |   move.b d1,(a0)
        value /= base;
   13c18:	   |   move.l 28(sp),-(sp)
   13c1c:	   |   move.l 24(sp),-(sp)
   13c20:	   |   jsr 17ac4 <__divsi3>
   13c26:	   |   addq.l #8,sp
   13c28:	   |   move.l d0,20(sp)
    } while (value);
   13c2c:	   '-- bne.s 13bea <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13c2e:	       move.l 12(sp),d0
   13c32:	       move.l d0,d1
   13c34:	       subq.l #1,d1
   13c36:	       move.l d1,12(sp)
   13c3a:	       movea.l d0,a0
   13c3c:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13c3e:	       move.l 4(sp),8(sp)
   13c44:	   ,-- bra.s 13c6a <itoa+0xb4>
        char temp = *low;
   13c46:	,--|-> movea.l 8(sp),a0
   13c4a:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13c4e:	|  |   movea.l 12(sp),a0
   13c52:	|  |   move.b (a0),d0
   13c54:	|  |   movea.l 8(sp),a0
   13c58:	|  |   move.b d0,(a0)
        *ptr = temp;
   13c5a:	|  |   movea.l 12(sp),a0
   13c5e:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13c62:	|  |   addq.l #1,8(sp)
   13c66:	|  |   subq.l #1,12(sp)
   13c6a:	|  '-> move.l 8(sp),d0
   13c6e:	|      cmp.l 12(sp),d0
   13c72:	'----- bcs.s 13c46 <itoa+0x90>
    }
    return rc;
   13c74:	       move.l 4(sp),d0
}
   13c78:	       lea 16(sp),sp
   13c7c:	       rts

00013c7e <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13c7e:	                            lea -40(sp),sp
   13c82:	                            move.l d2,-(sp)
    char* s = str;
   13c84:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13c8a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13c90:	   ,----------------------- bra.w 13dc4 <vsprintf2+0x146>
        if (*p == '%') {
   13c94:	,--|----------------------> movea.l 36(sp),a0
   13c98:	|  |                        move.b (a0),d0
   13c9a:	|  |                        cmpi.b #37,d0
   13c9e:	|  |  ,-------------------- bne.w 13daa <vsprintf2+0x12c>
            switch (*++p) {
   13ca2:	|  |  |                     addq.l #1,36(sp)
   13ca6:	|  |  |                     movea.l 36(sp),a0
   13caa:	|  |  |                     move.b (a0),d0
   13cac:	|  |  |                     ext.w d0
   13cae:	|  |  |                     movea.w d0,a0
   13cb0:	|  |  |                     moveq #115,d0
   13cb2:	|  |  |                     cmp.l a0,d0
   13cb4:	|  |  |           ,-------- beq.s 13d2c <vsprintf2+0xae>
   13cb6:	|  |  |           |         moveq #115,d1
   13cb8:	|  |  |           |         cmp.l a0,d1
   13cba:	|  |  |  ,--------|-------- blt.w 13d92 <vsprintf2+0x114>
   13cbe:	|  |  |  |        |         moveq #99,d2
   13cc0:	|  |  |  |        |         cmp.l a0,d2
   13cc2:	|  |  |  |  ,-----|-------- beq.w 13d6a <vsprintf2+0xec>
   13cc6:	|  |  |  |  |     |         moveq #100,d0
   13cc8:	|  |  |  |  |     |         cmp.l a0,d0
   13cca:	|  |  |  +--|-----|-------- bne.w 13d92 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13cce:	|  |  |  |  |     |         addq.l #4,56(sp)
   13cd2:	|  |  |  |  |     |         movea.l 56(sp),a0
   13cd6:	|  |  |  |  |     |         move.l (a0),d0
   13cd8:	|  |  |  |  |     |         move.l d0,d1
   13cda:	|  |  |  |  |     |         subq.l #1,d1
   13cdc:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13ce0:	|  |  |  |  |     |         pea a <_start+0xa>
   13ce4:	|  |  |  |  |     |         lea 8(sp),a0
   13ce8:	|  |  |  |  |     |         move.l a0,-(sp)
   13cea:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13cee:	|  |  |  |  |     |         jsr 13bb6 <itoa>
   13cf4:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13cf8:	|  |  |  |  |     |         lea 44(sp),a0
   13cfc:	|  |  |  |  |     |         lea -40(a0),a0
   13d00:	|  |  |  |  |     |         move.l a0,28(sp)
   13d04:	|  |  |  |  |     |     ,-- bra.s 13d20 <vsprintf2+0xa2>
                        *s++ = *b;
   13d06:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13d0a:	|  |  |  |  |     |  |  |   move.l d0,d1
   13d0c:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13d0e:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13d12:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13d16:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13d18:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13d1a:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13d1c:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13d20:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13d24:	|  |  |  |  |     |  |      move.b (a0),d0
   13d26:	|  |  |  |  |     |  '----- bne.s 13d06 <vsprintf2+0x88>
                    }
                    break;
   13d28:	|  |  |  |  |  ,--|-------- bra.w 13dc0 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13d2c:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13d30:	|  |  |  |  |  |            movea.l 56(sp),a0
   13d34:	|  |  |  |  |  |            move.l (a0),d0
   13d36:	|  |  |  |  |  |            move.l d0,d1
   13d38:	|  |  |  |  |  |            subq.l #1,d1
   13d3a:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13d3e:	|  |  |  |  |  |        ,-- bra.s 13d60 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13d40:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13d44:	|  |  |  |  |  |     |  |   move.l d1,d2
   13d46:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d48:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13d4c:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13d50:	|  |  |  |  |  |     |  |   move.l d0,d2
   13d52:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d54:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13d58:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13d5a:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13d5c:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13d5e:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13d60:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13d64:	|  |  |  |  |  |     |      move.b (a0),d0
   13d66:	|  |  |  |  |  |     '----- bne.s 13d40 <vsprintf2+0xc2>
                    }
                    break;
   13d68:	|  |  |  |  |  +----------- bra.s 13dc0 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13d6a:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13d6e:	|  |  |  |     |            movea.l 56(sp),a0
   13d72:	|  |  |  |     |            move.l (a0),d0
   13d74:	|  |  |  |     |            move.l d0,d1
   13d76:	|  |  |  |     |            subq.l #1,d1
   13d78:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13d7c:	|  |  |  |     |            move.l 40(sp),d0
   13d80:	|  |  |  |     |            move.l d0,d2
   13d82:	|  |  |  |     |            addq.l #1,d2
   13d84:	|  |  |  |     |            move.l d2,40(sp)
   13d88:	|  |  |  |     |            move.l 24(sp),d1
   13d8c:	|  |  |  |     |            movea.l d0,a0
   13d8e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13d90:	|  |  |  |     +----------- bra.s 13dc0 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13d92:	|  |  |  '-----|----------> move.l 40(sp),d0
   13d96:	|  |  |        |            move.l d0,d1
   13d98:	|  |  |        |            addq.l #1,d1
   13d9a:	|  |  |        |            move.l d1,40(sp)
   13d9e:	|  |  |        |            movea.l 36(sp),a0
   13da2:	|  |  |        |            move.b (a0),d1
   13da4:	|  |  |        |            movea.l d0,a0
   13da6:	|  |  |        |            move.b d1,(a0)
                    break;
   13da8:	|  |  |        +----------- bra.s 13dc0 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13daa:	|  |  '--------|----------> move.l 40(sp),d0
   13dae:	|  |           |            move.l d0,d1
   13db0:	|  |           |            addq.l #1,d1
   13db2:	|  |           |            move.l d1,40(sp)
   13db6:	|  |           |            movea.l 36(sp),a0
   13dba:	|  |           |            move.b (a0),d1
   13dbc:	|  |           |            movea.l d0,a0
   13dbe:	|  |           |            move.b d1,(a0)
        }
        p++;
   13dc0:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13dc4:	|  '----------------------> movea.l 36(sp),a0
   13dc8:	|                           move.b (a0),d0
   13dca:	'-------------------------- bne.w 13c94 <vsprintf2+0x16>
    }
    *s = '\0';
   13dce:	                            movea.l 40(sp),a0
   13dd2:	                            clr.b (a0)
    return s - str;
   13dd4:	                            move.l 40(sp),d0
   13dd8:	                            sub.l 48(sp),d0
}
   13ddc:	                            move.l (sp)+,d2
   13dde:	                            lea 40(sp),sp
   13de2:	                            rts

00013de4 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13de4:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13de6:	moveq #16,d0
   13de8:	add.l sp,d0
   13dea:	move.l d0,d1
   13dec:	addq.l #4,d1
   13dee:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13df2:	move.l 16(sp),d0
   13df6:	move.l 4(sp),-(sp)
   13dfa:	move.l d0,-(sp)
   13dfc:	move.l 20(sp),-(sp)
   13e00:	jsr 13c7e <vsprintf2>
   13e06:	lea 12(sp),sp
   13e0a:	move.l d0,(sp)
    va_end(args);
   13e0c:	clr.l 4(sp)

    return done;
   13e10:	move.l (sp),d0
}
   13e12:	addq.l #8,sp
   13e14:	rts

00013e16 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13e16:	       lea -20(sp),sp
   13e1a:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13e1c:	       moveq #12,d0
   13e1e:	       move.l d0,20(sp)
   13e22:	       clr.l 16(sp)
   13e26:	       move.l 1c948 <SysBase>,d0
   13e2c:	       movea.l d0,a6
   13e2e:	       move.l 20(sp),d0
   13e32:	       move.l 16(sp),d1
   13e36:	       jsr -684(a6)
   13e3a:	       move.l d0,12(sp)
   13e3e:	       move.l 12(sp),d0
   13e42:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13e46:	   ,-- bne.s 13e4c <addVarToStack+0x36>
   13e48:	   |   clr.w d0
   13e4a:	,--|-- bra.s 13e94 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13e4c:	|  '-> move.l 8(sp),d0
   13e50:	|      move.l d0,-(sp)
   13e52:	|      move.l 32(sp),-(sp)
   13e56:	|      jsr 14978 <copyMain>
   13e5c:	|      addq.l #8,sp
   13e5e:	|      tst.w d0
   13e60:	|  ,-- bne.s 13e7c <addVarToStack+0x66>
        FreeVec(newStack);
   13e62:	|  |   move.l 8(sp),4(sp)
   13e68:	|  |   move.l 1c948 <SysBase>,d0
   13e6e:	|  |   movea.l d0,a6
   13e70:	|  |   movea.l 4(sp),a1
   13e74:	|  |   jsr -690(a6)
        return FALSE;
   13e78:	|  |   clr.w d0
   13e7a:	+--|-- bra.s 13e94 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13e7c:	|  '-> movea.l 32(sp),a0
   13e80:	|      move.l (a0),d0
   13e82:	|      movea.l 8(sp),a0
   13e86:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13e8a:	|      movea.l 32(sp),a0
   13e8e:	|      move.l 8(sp),(a0)
    return TRUE;
   13e92:	|      moveq #1,d0
}
   13e94:	'----> movea.l (sp)+,a6
   13e96:	       lea 20(sp),sp
   13e9a:	       rts

00013e9c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13e9c:	       lea -16(sp),sp
   13ea0:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13ea2:	       moveq #12,d0
   13ea4:	       move.l d0,16(sp)
   13ea8:	       clr.l 12(sp)
   13eac:	       move.l 1c948 <SysBase>,d0
   13eb2:	       movea.l d0,a6
   13eb4:	       move.l 16(sp),d0
   13eb8:	       move.l 12(sp),d1
   13ebc:	       jsr -684(a6)
   13ec0:	       move.l d0,8(sp)
   13ec4:	       move.l 8(sp),d0
   13ec8:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13ecc:	   ,-- bne.s 13ed2 <addVarToStackQuick+0x36>
   13ece:	   |   clr.w d0
   13ed0:	,--|-- bra.s 13f08 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13ed2:	|  '-> move.l 4(sp),d0
   13ed6:	|      pea 8 <_start+0x8>
   13eda:	|      move.l 28(sp),-(sp)
   13ede:	|      move.l d0,-(sp)
   13ee0:	|      jsr 1706e <memcpy>
   13ee6:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13eea:	|      movea.l 24(sp),a0
   13eee:	|      clr.l (a0)

    newStack->next = *thisStack;
   13ef0:	|      movea.l 28(sp),a0
   13ef4:	|      move.l (a0),d0
   13ef6:	|      movea.l 4(sp),a0
   13efa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13efe:	|      movea.l 28(sp),a0
   13f02:	|      move.l 4(sp),(a0)
    return TRUE;
   13f06:	|      moveq #1,d0
}
   13f08:	'----> movea.l (sp)+,a6
   13f0a:	       lea 16(sp),sp
   13f0e:	       rts

00013f10 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13f10:	       lea -16(sp),sp
   13f14:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13f16:	       movea.l 24(sp),a0
   13f1a:	       move.l (a0),d0
   13f1c:	       moveq #1,d1
   13f1e:	       cmp.l d0,d1
   13f20:	   ,-- bne.s 13f4a <addVariablesInSecond+0x3a>
   13f22:	   |   movea.l 28(sp),a0
   13f26:	   |   move.l (a0),d0
   13f28:	   |   moveq #1,d1
   13f2a:	   |   cmp.l d0,d1
   13f2c:	   +-- bne.s 13f4a <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13f2e:	   |   movea.l 28(sp),a0
   13f32:	   |   move.l 4(a0),d1
   13f36:	   |   movea.l 24(sp),a0
   13f3a:	   |   move.l 4(a0),d0
   13f3e:	   |   add.l d1,d0
   13f40:	   |   movea.l 28(sp),a0
   13f44:	   |   move.l d0,4(a0)
   13f48:	,--|-- bra.s 13fc4 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13f4a:	|  '-> move.l 24(sp),-(sp)
   13f4e:	|      jsr 14bb0 <getTextFromAnyVar>
   13f54:	|      addq.l #4,sp
   13f56:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13f5a:	|      move.l 28(sp),-(sp)
   13f5e:	|      jsr 14bb0 <getTextFromAnyVar>
   13f64:	|      addq.l #4,sp
   13f66:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13f6a:	|      move.l 28(sp),-(sp)
   13f6e:	|      jsr 14828 <unlinkVar>
   13f74:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13f76:	|      move.l 12(sp),-(sp)
   13f7a:	|      move.l 20(sp),-(sp)
   13f7e:	|      jsr 13b06 <joinStrings>
   13f84:	|      addq.l #8,sp
   13f86:	|      movea.l 28(sp),a0
   13f8a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13f8e:	|      movea.l 28(sp),a0
   13f92:	|      moveq #3,d0
   13f94:	|      move.l d0,(a0)
		FreeVec(string1);
   13f96:	|      move.l 16(sp),8(sp)
   13f9c:	|      move.l 1c948 <SysBase>,d0
   13fa2:	|      movea.l d0,a6
   13fa4:	|      movea.l 8(sp),a1
   13fa8:	|      jsr -690(a6)
		FreeVec(string2);
   13fac:	|      move.l 12(sp),4(sp)
   13fb2:	|      move.l 1c948 <SysBase>,d0
   13fb8:	|      movea.l d0,a6
   13fba:	|      movea.l 4(sp),a1
   13fbe:	|      jsr -690(a6)
	}
}
   13fc2:	|      nop
   13fc4:	'----> nop
   13fc6:	       movea.l (sp)+,a6
   13fc8:	       lea 16(sp),sp
   13fcc:	       rts

00013fce <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13fce:	movea.l 8(sp),a0
   13fd2:	move.l 4(a0),-(sp)
   13fd6:	move.l (a0),-(sp)
   13fd8:	movea.l 12(sp),a0
   13fdc:	move.l 4(a0),-(sp)
   13fe0:	move.l (a0),-(sp)
   13fe2:	jsr 14004 <compareVars>
   13fe8:	lea 16(sp),sp
   13fec:	move.l d0,-(sp)
   13fee:	pea 1 <_start+0x1>
   13ff2:	move.l 16(sp),-(sp)
   13ff6:	jsr 14ecc <setVariable>
   13ffc:	lea 12(sp),sp
}
   14000:	nop
   14002:	rts

00014004 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14004:	       subq.l #4,sp
	int re = 0;
   14006:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14008:	       move.l 8(sp),d1
   1400c:	       move.l 16(sp),d0
   14010:	       cmp.l d1,d0
   14012:	,----- bne.w 140da <compareVars+0xd6>
		switch (var1.varType) {
   14016:	|      move.l 8(sp),d0
   1401a:	|      moveq #9,d1
   1401c:	|      cmp.l d0,d1
   1401e:	|  ,-- bcs.w 140c2 <compareVars+0xbe>
   14022:	|  |   add.l d0,d0
   14024:	|  |   movea.l d0,a0
   14026:	|  |   adda.l #81970,a0
   1402c:	|  |   move.w (a0),d0
   1402e:	|  |   jmp (14032 <compareVars+0x2e>,pc,d0.w)
   14032:	|  |   ori.b #-112,(a4)
   14036:	|  |   ori.l #5243024,(a0)
   1403c:	|  |   ori.l #7733392,(a0)
   14042:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14048:	|  |   move.l d0,(sp)
			break;
   1404a:	+--|-- bra.w 140da <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1404e:	|  |   move.l 12(sp),d1
   14052:	|  |   move.l 20(sp),d0
   14056:	|  |   cmp.l d1,d0
   14058:	|  |   seq d0
   1405a:	|  |   neg.b d0
   1405c:	|  |   move.b d0,d0
   1405e:	|  |   andi.l #255,d0
   14064:	|  |   move.l d0,(sp)
			break;
   14066:	+--|-- bra.s 140da <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14068:	|  |   move.l 12(sp),d1
   1406c:	|  |   move.l 20(sp),d0
   14070:	|  |   cmp.l d1,d0
   14072:	|  |   seq d0
   14074:	|  |   neg.b d0
   14076:	|  |   move.b d0,d0
   14078:	|  |   andi.l #255,d0
   1407e:	|  |   move.l d0,(sp)
			break;
   14080:	+--|-- bra.s 140da <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14082:	|  |   move.l 20(sp),d1
   14086:	|  |   move.l 12(sp),d0
   1408a:	|  |   move.l d1,-(sp)
   1408c:	|  |   move.l d0,-(sp)
   1408e:	|  |   jsr 13a86 <strcmp>
   14094:	|  |   addq.l #8,sp
   14096:	|  |   tst.l d0
   14098:	|  |   seq d0
   1409a:	|  |   neg.b d0
   1409c:	|  |   move.b d0,d0
   1409e:	|  |   andi.l #255,d0
   140a4:	|  |   move.l d0,(sp)
			break;
   140a6:	+--|-- bra.s 140da <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   140a8:	|  |   move.l 12(sp),d1
   140ac:	|  |   move.l 20(sp),d0
   140b0:	|  |   cmp.l d1,d0
   140b2:	|  |   seq d0
   140b4:	|  |   neg.b d0
   140b6:	|  |   move.b d0,d0
   140b8:	|  |   andi.l #255,d0
   140be:	|  |   move.l d0,(sp)
			break;
   140c0:	+--|-- bra.s 140da <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   140c2:	|  '-> move.l 12(sp),d1
   140c6:	|      move.l 20(sp),d0
   140ca:	|      cmp.l d1,d0
   140cc:	|      seq d0
   140ce:	|      neg.b d0
   140d0:	|      move.b d0,d0
   140d2:	|      andi.l #255,d0
   140d8:	|      move.l d0,(sp)
		}
	}
	return re;
   140da:	'----> move.l (sp),d0
}
   140dc:	       addq.l #4,sp
   140de:	       rts

000140e0 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   140e0:	             lea -16(sp),sp
   140e4:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   140e6:	             movea.l 28(sp),a0
   140ea:	             moveq #6,d0
   140ec:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   140ee:	             moveq #12,d0
   140f0:	             move.l d0,12(sp)
   140f4:	             clr.l 8(sp)
   140f8:	             move.l 1c948 <SysBase>,d0
   140fe:	             movea.l d0,a6
   14100:	             move.l 12(sp),d0
   14104:	             move.l 8(sp),d1
   14108:	             jsr -684(a6)
   1410c:	             move.l d0,4(sp)
   14110:	             move.l 4(sp),d0
   14114:	             movea.l 28(sp),a0
   14118:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1411c:	             movea.l 28(sp),a0
   14120:	             move.l 4(a0),d0
   14124:	         ,-- bne.s 1412c <copyStack+0x4c>
   14126:	         |   clr.w d0
   14128:	,--------|-- bra.w 141ae <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1412c:	|        '-> movea.l 28(sp),a0
   14130:	|            movea.l 4(a0),a0
   14134:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14136:	|            movea.l 28(sp),a0
   1413a:	|            movea.l 4(a0),a0
   1413e:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14142:	|            movea.l 28(sp),a0
   14146:	|            movea.l 4(a0),a0
   1414a:	|            moveq #1,d0
   1414c:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14150:	|            movea.l 24(sp),a0
   14154:	|            movea.l 4(a0),a0
   14158:	|            move.l (a0),16(sp)

	while (a) {
   1415c:	|     ,----- bra.s 141a6 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1415e:	|  ,--|----> movea.l 28(sp),a0
   14162:	|  |  |      move.l 4(a0),d0
   14166:	|  |  |      move.l d0,d1
   14168:	|  |  |      move.l 16(sp),d0
   1416c:	|  |  |      move.l d1,-(sp)
   1416e:	|  |  |      move.l d0,-(sp)
   14170:	|  |  |      jsr 13e16 <addVarToStack>
   14176:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14178:	|  |  |      movea.l 28(sp),a0
   1417c:	|  |  |      movea.l 4(a0),a0
   14180:	|  |  |      move.l 4(a0),d0
   14184:	|  |  |  ,-- bne.s 1419c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14186:	|  |  |  |   movea.l 28(sp),a0
   1418a:	|  |  |  |   movea.l 4(a0),a1
   1418e:	|  |  |  |   movea.l 28(sp),a0
   14192:	|  |  |  |   movea.l 4(a0),a0
   14196:	|  |  |  |   move.l (a1),d0
   14198:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1419c:	|  |  |  '-> movea.l 16(sp),a0
   141a0:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   141a6:	|  |  '----> tst.l 16(sp)
   141aa:	|  '-------- bne.s 1415e <copyStack+0x7e>
	}

	return TRUE;
   141ac:	|            moveq #1,d0
}
   141ae:	'----------> movea.l (sp)+,a6
   141b0:	             lea 16(sp),sp
   141b4:	             rts

000141b6 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   141b6:	                lea -20(sp),sp
   141ba:	                move.l a6,-(sp)
   141bc:	                move.l 36(sp),d0
   141c0:	                move.w d0,d0
   141c2:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   141c6:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   141cc:	                clr.l 16(sp)

    while (*huntVar) {
   141d0:	   ,----------- bra.s 1424e <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   141d2:	,--|----------> movea.l 20(sp),a0
   141d6:	|  |            movea.l (a0),a0
   141d8:	|  |            movea.l 28(sp),a1
   141dc:	|  |            move.l 4(a1),-(sp)
   141e0:	|  |            move.l (a1),-(sp)
   141e2:	|  |            move.l 4(a0),-(sp)
   141e6:	|  |            move.l (a0),-(sp)
   141e8:	|  |            jsr 14004 <compareVars>
   141ee:	|  |            lea 16(sp),sp
   141f2:	|  |            tst.l d0
   141f4:	|  |  ,-------- beq.s 14240 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   141f6:	|  |  |         movea.l 20(sp),a0
   141fa:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   141fe:	|  |  |         movea.l 12(sp),a0
   14202:	|  |  |         move.l 8(a0),d0
   14206:	|  |  |         movea.l 20(sp),a0
   1420a:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1420c:	|  |  |         move.l 12(sp),d0
   14210:	|  |  |         move.l d0,-(sp)
   14212:	|  |  |         jsr 14828 <unlinkVar>
   14218:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1421a:	|  |  |         move.l 12(sp),8(sp)
   14220:	|  |  |         move.l 1c948 <SysBase>,d0
   14226:	|  |  |         movea.l d0,a6
   14228:	|  |  |         movea.l 8(sp),a1
   1422c:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14230:	|  |  |         tst.w 6(sp)
   14234:	|  |  |     ,-- bne.s 1423a <deleteVarFromStack+0x84>
   14236:	|  |  |     |   moveq #1,d0
   14238:	|  |  |  ,--|-- bra.s 1425c <deleteVarFromStack+0xa6>
            reply++;
   1423a:	|  |  |  |  '-> addq.l #1,16(sp)
   1423e:	|  +--|--|----- bra.s 1424e <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14240:	|  |  '--|----> movea.l 20(sp),a0
   14244:	|  |     |      move.l (a0),d0
   14246:	|  |     |      move.l d0,d1
   14248:	|  |     |      addq.l #8,d1
   1424a:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1424e:	|  '-----|----> movea.l 20(sp),a0
   14252:	|        |      move.l (a0),d0
   14254:	'--------|----- bne.w 141d2 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14258:	         |      move.l 16(sp),d0
}
   1425c:	         '----> movea.l (sp)+,a6
   1425e:	                lea 20(sp),sp
   14262:	                rts

00014264 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14264:	       movea.l 4(sp),a0
   14268:	       move.l 4(a0),d0
   1426c:	       cmp.l 8(sp),d0
   14270:	   ,-- bhi.s 14276 <fastArrayGetByIndex+0x12>
   14272:	   |   moveq #0,d0
   14274:	,--|-- bra.s 14284 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14276:	|  '-> movea.l 4(sp),a0
   1427a:	|      move.l (a0),d1
   1427c:	|      move.l 8(sp),d0
   14280:	|      lsl.l #3,d0
   14282:	|      add.l d1,d0
}
   14284:	'----> rts

00014286 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14286:	                lea -32(sp),sp
   1428a:	                move.l a6,-(sp)
   1428c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1428e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14292:	                movea.l 44(sp),a0
   14296:	                move.l (a0),d0
   14298:	                moveq #8,d1
   1429a:	                cmp.l d0,d1
   1429c:	            ,-- beq.s 142aa <getCostumeFromVar+0x24>
   1429e:	            |   moveq #9,d1
   142a0:	            |   cmp.l d0,d1
   142a2:	   ,--------|-- beq.w 14358 <getCostumeFromVar+0xd2>
   142a6:	,--|--------|-- bra.w 14362 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   142aa:	|  |        '-> moveq #8,d0
   142ac:	|  |            move.l d0,28(sp)
   142b0:	|  |            clr.l 24(sp)
   142b4:	|  |            move.l 1c948 <SysBase>,d0
   142ba:	|  |            movea.l d0,a6
   142bc:	|  |            move.l 28(sp),d0
   142c0:	|  |            move.l 24(sp),d1
   142c4:	|  |            jsr -684(a6)
   142c8:	|  |            move.l d0,20(sp)
   142cc:	|  |            move.l 20(sp),d0
   142d0:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   142d4:	|  |        ,-- bne.s 142dc <getCostumeFromVar+0x56>
   142d6:	|  |        |   moveq #0,d0
   142d8:	|  |  ,-----|-- bra.w 1438c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   142dc:	|  |  |     '-> movea.l 36(sp),a0
   142e0:	|  |  |         moveq #1,d1
   142e2:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   142e6:	|  |  |         moveq #12,d0
   142e8:	|  |  |         move.l d0,16(sp)
   142ec:	|  |  |         clr.l 12(sp)
   142f0:	|  |  |         move.l 1c948 <SysBase>,d0
   142f6:	|  |  |         movea.l d0,a6
   142f8:	|  |  |         move.l 16(sp),d0
   142fc:	|  |  |         move.l 12(sp),d1
   14300:	|  |  |         jsr -684(a6)
   14304:	|  |  |         move.l d0,8(sp)
   14308:	|  |  |         move.l 8(sp),d0
   1430c:	|  |  |         movea.l 36(sp),a0
   14310:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14312:	|  |  |         movea.l 36(sp),a0
   14316:	|  |  |         move.l (a0),d0
   14318:	|  |  |     ,-- bne.s 1431e <getCostumeFromVar+0x98>
   1431a:	|  |  |     |   moveq #0,d0
   1431c:	|  |  +-----|-- bra.s 1438c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1431e:	|  |  |     '-> clr.l 32(sp)
   14322:	|  |  |     ,-- bra.s 1434e <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14324:	|  |  |  ,--|-> movea.l 44(sp),a0
   14328:	|  |  |  |  |   move.l 4(a0),d0
   1432c:	|  |  |  |  |   movea.l 36(sp),a0
   14330:	|  |  |  |  |   movea.l (a0),a0
   14332:	|  |  |  |  |   move.l 32(sp),d1
   14336:	|  |  |  |  |   add.l d1,d1
   14338:	|  |  |  |  |   add.l d1,d1
   1433a:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1433e:	|  |  |  |  |   move.l d0,-(sp)
   14340:	|  |  |  |  |   jsr 9274 <copyAnim>
   14346:	|  |  |  |  |   addq.l #4,sp
   14348:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1434a:	|  |  |  |  |   addq.l #1,32(sp)
   1434e:	|  |  |  |  '-> moveq #2,d1
   14350:	|  |  |  |      cmp.l 32(sp),d1
   14354:	|  |  |  '----- bge.s 14324 <getCostumeFromVar+0x9e>
            }
            break;
   14356:	|  |  |     ,-- bra.s 14388 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14358:	|  '--|-----|-> movea.l 44(sp),a0
   1435c:	|     |     |   move.l 4(a0),d0
   14360:	|     +-----|-- bra.s 1438c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14362:	'-----|-----|-> movea.l 44(sp),a0
   14366:	      |     |   move.l (a0),d0
   14368:	      |     |   add.l d0,d0
   1436a:	      |     |   movea.l d0,a1
   1436c:	      |     |   adda.l d0,a1
   1436e:	      |     |   lea 1c818 <typeName>,a0
   14374:	      |     |   move.l (0,a1,a0.l),d0
   14378:	      |     |   move.l d0,-(sp)
   1437a:	      |     |   pea 19e73 <talk.c.490538ff+0x554>
   14380:	      |     |   jsr 170ba <KPrintF>
   14386:	      |     |   addq.l #8,sp
    }

    return p;
   14388:	      |     '-> move.l 36(sp),d0
}
   1438c:	      '-------> movea.l (sp)+,a2
   1438e:	                movea.l (sp)+,a6
   14390:	                lea 32(sp),sp
   14394:	                rts

00014396 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14396:	                lea -96(sp),sp
   1439a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1439e:	                move.l 116(sp),-(sp)
   143a2:	                pea 19eab <talk.c.490538ff+0x58c>
   143a8:	                jsr 13b06 <joinStrings>
   143ae:	                addq.l #8,sp
   143b0:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   143b4:	            ,-- bne.s 143bc <getSavedGamesStack+0x26>
   143b6:	            |   clr.w d0
   143b8:	,-----------|-- bra.w 145d0 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   143bc:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   143c0:	|               move.l #106157,98(sp)
   143c8:	|               moveq #-2,d0
   143ca:	|               move.l d0,94(sp)
   143ce:	|               move.l 1c950 <DOSBase>,d0
   143d4:	|               movea.l d0,a6
   143d6:	|               move.l 98(sp),d1
   143da:	|               move.l 94(sp),d2
   143de:	|               jsr -84(a6)
   143e2:	|               move.l d0,90(sp)
   143e6:	|               move.l 90(sp),d0
   143ea:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   143ee:	|           ,-- bne.s 143f6 <getSavedGamesStack+0x60>
   143f0:	|           |   clr.w d0
   143f2:	+-----------|-- bra.w 145d0 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   143f6:	|           '-> move.l #260,82(sp)
   143fe:	|               move.l #65536,78(sp)
   14406:	|               move.l 1c948 <SysBase>,d0
   1440c:	|               movea.l d0,a6
   1440e:	|               move.l 82(sp),d0
   14412:	|               move.l 78(sp),d1
   14416:	|               jsr -684(a6)
   1441a:	|               move.l d0,74(sp)
   1441e:	|               move.l 74(sp),d0
   14422:	|               move.l d0,70(sp)
	if (!fib) {
   14426:	|           ,-- bne.s 14444 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14428:	|           |   move.l 86(sp),22(sp)
   1442e:	|           |   move.l 1c950 <DOSBase>,d0
   14434:	|           |   movea.l d0,a6
   14436:	|           |   move.l 22(sp),d1
   1443a:	|           |   jsr -90(a6)
		return FALSE;
   1443e:	|           |   clr.w d0
   14440:	+-----------|-- bra.w 145d0 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14444:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14448:	|               move.l 86(sp),66(sp)
   1444e:	|               move.l 70(sp),62(sp)
   14454:	|               move.l 1c950 <DOSBase>,d0
   1445a:	|               movea.l d0,a6
   1445c:	|               move.l 66(sp),d1
   14460:	|               move.l 62(sp),d2
   14464:	|               jsr -102(a6)
   14468:	|               move.l d0,58(sp)
   1446c:	|               move.l 58(sp),d0
   14470:	|  ,----------- beq.w 14584 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14474:	|  |        ,-- bra.w 14550 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14478:	|  |  ,-----|-> move.l 70(sp),d2
   1447c:	|  |  |     |   addq.l #8,d2
   1447e:	|  |  |     |   move.l 70(sp),d0
   14482:	|  |  |     |   addq.l #8,d0
   14484:	|  |  |     |   move.l d0,-(sp)
   14486:	|  |  |     |   jsr 13ac6 <strlen>
   1448c:	|  |  |     |   addq.l #4,sp
   1448e:	|  |  |     |   move.l d0,d3
   14490:	|  |  |     |   move.l 116(sp),-(sp)
   14494:	|  |  |     |   jsr 13ac6 <strlen>
   1449a:	|  |  |     |   addq.l #4,sp
   1449c:	|  |  |     |   move.l d3,d1
   1449e:	|  |  |     |   sub.l d0,d1
   144a0:	|  |  |     |   move.l d2,d0
   144a2:	|  |  |     |   add.l d1,d0
   144a4:	|  |  |     |   move.l 116(sp),-(sp)
   144a8:	|  |  |     |   move.l d0,-(sp)
   144aa:	|  |  |     |   jsr 13a86 <strcmp>
   144b0:	|  |  |     |   addq.l #8,sp
   144b2:	|  |  |     |   tst.l d0
   144b4:	|  |  |     +-- bne.w 14550 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   144b8:	|  |  |     |   move.l 70(sp),d0
   144bc:	|  |  |     |   addq.l #8,d0
   144be:	|  |  |     |   move.l d0,-(sp)
   144c0:	|  |  |     |   jsr 13ac6 <strlen>
   144c6:	|  |  |     |   addq.l #4,sp
   144c8:	|  |  |     |   move.l d0,d2
   144ca:	|  |  |     |   move.l 116(sp),-(sp)
   144ce:	|  |  |     |   jsr 13ac6 <strlen>
   144d4:	|  |  |     |   addq.l #4,sp
   144d6:	|  |  |     |   move.l d0,d1
   144d8:	|  |  |     |   move.l d2,d0
   144da:	|  |  |     |   sub.l d1,d0
   144dc:	|  |  |     |   movea.l 70(sp),a0
   144e0:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   144e4:	|  |  |     |   move.l 70(sp),d0
   144e8:	|  |  |     |   addq.l #8,d0
   144ea:	|  |  |     |   move.l d0,-(sp)
   144ec:	|  |  |     |   jsr 118 <decodeFilename>
   144f2:	|  |  |     |   addq.l #4,sp
   144f4:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   144f8:	|  |  |     |   move.l 42(sp),-(sp)
   144fc:	|  |  |     |   lea 18(sp),a0
   14500:	|  |  |     |   move.l a0,-(sp)
   14502:	|  |  |     |   jsr 147fc <makeTextVar>
   14508:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1450a:	|  |  |     |   move.l 42(sp),38(sp)
   14510:	|  |  |     |   move.l 1c948 <SysBase>,d0
   14516:	|  |  |     |   movea.l d0,a6
   14518:	|  |  |     |   movea.l 38(sp),a1
   1451c:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14520:	|  |  |     |   move.l 112(sp),d0
   14524:	|  |  |     |   move.l d0,-(sp)
   14526:	|  |  |     |   lea 18(sp),a0
   1452a:	|  |  |     |   move.l a0,-(sp)
   1452c:	|  |  |     |   jsr 13e16 <addVarToStack>
   14532:	|  |  |     |   addq.l #8,sp
   14534:	|  |  |     |   tst.w d0
   14536:	|  |  |  ,--|-- beq.s 14588 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14538:	|  |  |  |  |   movea.l 112(sp),a0
   1453c:	|  |  |  |  |   move.l 4(a0),d0
   14540:	|  |  |  |  +-- bne.s 14550 <getSavedGamesStack+0x1ba>
   14542:	|  |  |  |  |   movea.l 112(sp),a0
   14546:	|  |  |  |  |   move.l (a0),d0
   14548:	|  |  |  |  |   movea.l 112(sp),a0
   1454c:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14550:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14556:	|  |  |  |      move.l 70(sp),50(sp)
   1455c:	|  |  |  |      move.l 1c950 <DOSBase>,d0
   14562:	|  |  |  |      movea.l d0,a6
   14564:	|  |  |  |      move.l 54(sp),d1
   14568:	|  |  |  |      move.l 50(sp),d2
   1456c:	|  |  |  |      jsr -108(a6)
   14570:	|  |  |  |      move.l d0,46(sp)
   14574:	|  |  |  |      move.l 46(sp),d0
   14578:	|  |  '--|----- bne.w 14478 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1457c:	|  |     |      move.w #1,106(sp)
   14582:	|  |     |  ,-- bra.s 1458a <getSavedGamesStack+0x1f4>
	}

cleanup:
   14584:	|  '-----|--|-> nop
   14586:	|        |  +-- bra.s 1458a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14588:	|        '--|-> nop
	FreeVec(fib);
   1458a:	|           '-> move.l 70(sp),34(sp)
   14590:	|               move.l 1c948 <SysBase>,d0
   14596:	|               movea.l d0,a6
   14598:	|               movea.l 34(sp),a1
   1459c:	|               jsr -690(a6)
	UnLock(dirLock);
   145a0:	|               move.l 86(sp),30(sp)
   145a6:	|               move.l 1c950 <DOSBase>,d0
   145ac:	|               movea.l d0,a6
   145ae:	|               move.l 30(sp),d1
   145b2:	|               jsr -90(a6)
	FreeVec(pattern);
   145b6:	|               move.l 102(sp),26(sp)
   145bc:	|               move.l 1c948 <SysBase>,d0
   145c2:	|               movea.l d0,a6
   145c4:	|               movea.l 26(sp),a1
   145c8:	|               jsr -690(a6)
	return result;
   145cc:	|               move.w 106(sp),d0
}
   145d0:	'-------------> movem.l (sp)+,d2-d3/a6
   145d4:	                lea 96(sp),sp
   145d8:	                rts

000145da <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   145da:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   145dc:	       movea.l 20(sp),a0
   145e0:	       move.l (a0),d0
   145e2:	       cmp.l 16(sp),d0
   145e6:	,----- beq.s 1464a <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   145e8:	|      move.l 16(sp),d0
   145ec:	|      add.l d0,d0
   145ee:	|      movea.l d0,a1
   145f0:	|      adda.l d0,a1
   145f2:	|      lea 1c818 <typeName>,a0
   145f8:	|      move.l (0,a1,a0.l),d0
   145fc:	|      move.l d0,-(sp)
   145fe:	|      pea 19eaf <talk.c.490538ff+0x590>
   14604:	|      jsr 13b06 <joinStrings>
   1460a:	|      addq.l #8,sp
   1460c:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14610:	|      movea.l 20(sp),a0
   14614:	|      move.l (a0),d0
   14616:	|      add.l d0,d0
   14618:	|      movea.l d0,a1
   1461a:	|      adda.l d0,a1
   1461c:	|      lea 1c818 <typeName>,a0
   14622:	|      move.l (0,a1,a0.l),d0
   14626:	|      move.l d0,-(sp)
   14628:	|      pea 19ef1 <talk.c.490538ff+0x5d2>
   1462e:	|      jsr 13b06 <joinStrings>
   14634:	|      addq.l #8,sp
   14636:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14638:	|      move.l (sp),-(sp)
   1463a:	|      move.l 8(sp),-(sp)
   1463e:	|      jsr 170ba <KPrintF>
   14644:	|      addq.l #8,sp

		return FALSE;
   14646:	|      clr.w d0
   14648:	|  ,-- bra.s 1465a <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1464a:	'--|-> movea.l 20(sp),a0
   1464e:	   |   move.l 4(a0),d0
   14652:	   |   movea.l 12(sp),a0
   14656:	   |   move.l d0,(a0)
	return TRUE;
   14658:	   |   moveq #1,d0
}
   1465a:	   '-> addq.l #8,sp
   1465c:	       rts

0001465e <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1465e:	move.l 8(sp),-(sp)
   14662:	jsr 73d2 <getNumberedString>
   14668:	addq.l #4,sp
   1466a:	move.l d0,-(sp)
   1466c:	move.l 8(sp),-(sp)
   14670:	jsr 147fc <makeTextVar>
   14676:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14678:	movea.l 4(sp),a0
   1467c:	move.l 4(a0),d0
   14680:	sne d0
   14682:	neg.b d0
   14684:	move.b d0,d0
   14686:	andi.w #255,d0
}
   1468a:	rts

0001468c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1468c:	          subq.l #8,sp
    int size = stackSize(stacky);
   1468e:	          move.l 16(sp),-(sp)
   14692:	          jsr 14f3a <stackSize>
   14698:	          addq.l #4,sp
   1469a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1469e:	          move.l 4(sp),-(sp)
   146a2:	          move.l 16(sp),-(sp)
   146a6:	          jsr 146f6 <makeFastArraySize>
   146ac:	          addq.l #8,sp
   146ae:	          tst.w d0
   146b0:	      ,-- bne.s 146b6 <makeFastArrayFromStack+0x2a>
   146b2:	      |   clr.w d0
   146b4:	,-----|-- bra.s 146f2 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   146b6:	|     '-> movea.l 16(sp),a0
   146ba:	|         move.l (a0),(sp)
    size = 0;
   146bc:	|         clr.l 4(sp)
    while (allV) {
   146c0:	|     ,-- bra.s 146ec <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   146c2:	|  ,--|-> movea.l 12(sp),a0
   146c6:	|  |  |   movea.l 4(a0),a0
   146ca:	|  |  |   move.l (a0),d1
   146cc:	|  |  |   move.l 4(sp),d0
   146d0:	|  |  |   lsl.l #3,d0
   146d2:	|  |  |   add.l d0,d1
   146d4:	|  |  |   move.l (sp),d0
   146d6:	|  |  |   move.l d1,-(sp)
   146d8:	|  |  |   move.l d0,-(sp)
   146da:	|  |  |   jsr 14978 <copyMain>
   146e0:	|  |  |   addq.l #8,sp
        size++;
   146e2:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   146e6:	|  |  |   movea.l (sp),a0
   146e8:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   146ec:	|  |  '-> tst.l (sp)
   146ee:	|  '----- bne.s 146c2 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   146f0:	|         moveq #1,d0
}
   146f2:	'-------> addq.l #8,sp
   146f4:	          rts

000146f6 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   146f6:	          lea -28(sp),sp
   146fa:	          move.l a6,-(sp)
    if (size < 0) {
   146fc:	          tst.l 40(sp)
   14700:	      ,-- bge.s 14716 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14702:	      |   pea 19f36 <talk.c.490538ff+0x617>
   14708:	      |   jsr 170ba <KPrintF>
   1470e:	      |   addq.l #4,sp
		return FALSE;
   14710:	      |   clr.w d0
   14712:	,-----|-- bra.w 147f4 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14716:	|     '-> move.l 36(sp),-(sp)
   1471a:	|         jsr 14828 <unlinkVar>
   14720:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14722:	|         movea.l 36(sp),a0
   14726:	|         moveq #10,d0
   14728:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1472a:	|         moveq #12,d0
   1472c:	|         move.l d0,24(sp)
   14730:	|         clr.l 20(sp)
   14734:	|         move.l 1c948 <SysBase>,d0
   1473a:	|         movea.l d0,a6
   1473c:	|         move.l 24(sp),d0
   14740:	|         move.l 20(sp),d1
   14744:	|         jsr -684(a6)
   14748:	|         move.l d0,16(sp)
   1474c:	|         move.l 16(sp),d0
   14750:	|         movea.l 36(sp),a0
   14754:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14758:	|         movea.l 36(sp),a0
   1475c:	|         move.l 4(a0),d0
   14760:	|     ,-- bne.s 14768 <makeFastArraySize+0x72>
   14762:	|     |   clr.w d0
   14764:	+-----|-- bra.w 147f4 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14768:	|     '-> move.l 40(sp),d0
   1476c:	|         lsl.l #3,d0
   1476e:	|         move.l d0,12(sp)
   14772:	|         clr.l 8(sp)
   14776:	|         move.l 1c948 <SysBase>,d0
   1477c:	|         movea.l d0,a6
   1477e:	|         move.l 12(sp),d0
   14782:	|         move.l 8(sp),d1
   14786:	|         jsr -684(a6)
   1478a:	|         move.l d0,4(sp)
   1478e:	|         move.l 4(sp),d0
   14792:	|         movea.l 36(sp),a0
   14796:	|         movea.l 4(a0),a0
   1479a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1479c:	|         movea.l 36(sp),a0
   147a0:	|         movea.l 4(a0),a0
   147a4:	|         move.l (a0),d0
   147a6:	|     ,-- bne.s 147ac <makeFastArraySize+0xb6>
   147a8:	|     |   clr.w d0
   147aa:	+-----|-- bra.s 147f4 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   147ac:	|     '-> clr.l 28(sp)
   147b0:	|     ,-- bra.s 147cc <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   147b2:	|  ,--|-> movea.l 36(sp),a0
   147b6:	|  |  |   movea.l 4(a0),a0
   147ba:	|  |  |   move.l (a0),d1
   147bc:	|  |  |   move.l 28(sp),d0
   147c0:	|  |  |   lsl.l #3,d0
   147c2:	|  |  |   movea.l d1,a0
   147c4:	|  |  |   adda.l d0,a0
   147c6:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   147c8:	|  |  |   addq.l #1,28(sp)
   147cc:	|  |  '-> move.l 28(sp),d0
   147d0:	|  |      cmp.l 40(sp),d0
   147d4:	|  '----- blt.s 147b2 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   147d6:	|         movea.l 36(sp),a0
   147da:	|         movea.l 4(a0),a0
   147de:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   147e4:	|         movea.l 36(sp),a0
   147e8:	|         movea.l 4(a0),a0
   147ec:	|         moveq #1,d0
   147ee:	|         move.l d0,8(a0)
    return TRUE;
   147f2:	|         moveq #1,d0
}
   147f4:	'-------> movea.l (sp)+,a6
   147f6:	          lea 28(sp),sp
   147fa:	          rts

000147fc <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   147fc:	move.l 4(sp),-(sp)
   14800:	jsr 14828 <unlinkVar>
   14806:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14808:	movea.l 4(sp),a0
   1480c:	moveq #3,d0
   1480e:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14810:	move.l 8(sp),-(sp)
   14814:	jsr b8 <copyString>
   1481a:	addq.l #4,sp
   1481c:	movea.l 4(sp),a0
   14820:	move.l d0,4(a0)
}
   14824:	nop
   14826:	rts

00014828 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14828:	                      lea -16(sp),sp
   1482c:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   1482e:	                      movea.l 24(sp),a0
   14832:	                      move.l (a0),d0
   14834:	                      moveq #10,d1
   14836:	                      cmp.l d0,d1
   14838:	            ,-------- beq.w 148f0 <unlinkVar+0xc8>
   1483c:	            |         moveq #10,d1
   1483e:	            |         cmp.l d0,d1
   14840:	,-----------|-------- bcs.w 14964 <unlinkVar+0x13c>
   14844:	|           |         moveq #8,d1
   14846:	|           |         cmp.l d0,d1
   14848:	|  ,--------|-------- beq.w 14950 <unlinkVar+0x128>
   1484c:	|  |        |         moveq #8,d1
   1484e:	|  |        |         cmp.l d0,d1
   14850:	+--|--------|-------- bcs.w 14964 <unlinkVar+0x13c>
   14854:	|  |        |         moveq #3,d1
   14856:	|  |        |         cmp.l d0,d1
   14858:	|  |        |     ,-- beq.s 14864 <unlinkVar+0x3c>
   1485a:	|  |        |     |   moveq #6,d1
   1485c:	|  |        |     |   cmp.l d0,d1
   1485e:	|  |        |  ,--|-- beq.s 1488a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14860:	+--|--------|--|--|-- bra.w 14964 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14864:	|  |        |  |  '-> movea.l 24(sp),a0
   14868:	|  |        |  |      move.l 4(a0),4(sp)
   1486e:	|  |        |  |      move.l 1c948 <SysBase>,d0
   14874:	|  |        |  |      movea.l d0,a6
   14876:	|  |        |  |      movea.l 4(sp),a1
   1487a:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   1487e:	|  |        |  |      movea.l 24(sp),a0
   14882:	|  |        |  |      clr.l 4(a0)
		break;
   14886:	|  |  ,-----|--|----- bra.w 1496e <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1488a:	|  |  |     |  '----> movea.l 24(sp),a0
   1488e:	|  |  |     |         movea.l 4(a0),a0
   14892:	|  |  |     |         move.l 8(a0),d0
   14896:	|  |  |     |         subq.l #1,d0
   14898:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1489c:	|  |  |     |         movea.l 24(sp),a0
   148a0:	|  |  |     |         movea.l 4(a0),a0
   148a4:	|  |  |     |         move.l 8(a0),d0
   148a8:	|  |  |  ,--|-------- bgt.w 14968 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   148ac:	|  |  |  |  |     ,-- bra.s 148c0 <unlinkVar+0x98>
   148ae:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   148b2:	|  |  |  |  |  |  |   move.l 4(a0),d0
   148b6:	|  |  |  |  |  |  |   move.l d0,-(sp)
   148b8:	|  |  |  |  |  |  |   jsr 14f5e <trimStack>
   148be:	|  |  |  |  |  |  |   addq.l #4,sp
   148c0:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   148c4:	|  |  |  |  |  |      movea.l 4(a0),a0
   148c8:	|  |  |  |  |  |      move.l (a0),d0
   148ca:	|  |  |  |  |  '----- bne.s 148ae <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   148cc:	|  |  |  |  |         movea.l 24(sp),a0
   148d0:	|  |  |  |  |         move.l 4(a0),8(sp)
   148d6:	|  |  |  |  |         move.l 1c948 <SysBase>,d0
   148dc:	|  |  |  |  |         movea.l d0,a6
   148de:	|  |  |  |  |         movea.l 8(sp),a1
   148e2:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   148e6:	|  |  |  |  |         movea.l 24(sp),a0
   148ea:	|  |  |  |  |         clr.l 4(a0)
		break;
   148ee:	|  |  |  +--|-------- bra.s 14968 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   148f0:	|  |  |  |  '-------> movea.l 24(sp),a0
   148f4:	|  |  |  |            movea.l 4(a0),a0
   148f8:	|  |  |  |            move.l 8(a0),d0
   148fc:	|  |  |  |            subq.l #1,d0
   148fe:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14902:	|  |  |  |            movea.l 24(sp),a0
   14906:	|  |  |  |            movea.l 4(a0),a0
   1490a:	|  |  |  |            move.l 8(a0),d0
   1490e:	|  |  |  |        ,-- bgt.s 1496c <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14910:	|  |  |  |        |   movea.l 24(sp),a0
   14914:	|  |  |  |        |   movea.l 4(a0),a0
   14918:	|  |  |  |        |   move.l (a0),16(sp)
   1491c:	|  |  |  |        |   move.l 1c948 <SysBase>,d0
   14922:	|  |  |  |        |   movea.l d0,a6
   14924:	|  |  |  |        |   movea.l 16(sp),a1
   14928:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1492c:	|  |  |  |        |   movea.l 24(sp),a0
   14930:	|  |  |  |        |   move.l 4(a0),12(sp)
   14936:	|  |  |  |        |   move.l 1c948 <SysBase>,d0
   1493c:	|  |  |  |        |   movea.l d0,a6
   1493e:	|  |  |  |        |   movea.l 12(sp),a1
   14942:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14946:	|  |  |  |        |   movea.l 24(sp),a0
   1494a:	|  |  |  |        |   clr.l 4(a0)
		break;
   1494e:	|  |  |  |        +-- bra.s 1496c <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14950:	|  '--|--|--------|-> movea.l 24(sp),a0
   14954:	|     |  |        |   move.l 4(a0),d0
   14958:	|     |  |        |   move.l d0,-(sp)
   1495a:	|     |  |        |   jsr 9640 <deleteAnim>
   14960:	|     |  |        |   addq.l #4,sp
		break;
   14962:	|     +--|--------|-- bra.s 1496e <unlinkVar+0x146>
		break;
   14964:	'-----|--|--------|-> nop
   14966:	      +--|--------|-- bra.s 1496e <unlinkVar+0x146>
		break;
   14968:	      |  '--------|-> nop
   1496a:	      +-----------|-- bra.s 1496e <unlinkVar+0x146>
		break;
   1496c:	      |           '-> nop
	}
}
   1496e:	      '-------------> nop
   14970:	                      movea.l (sp)+,a6
   14972:	                      lea 16(sp),sp
   14976:	                      rts

00014978 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14978:	       movea.l 4(sp),a0
   1497c:	       move.l (a0),d0
   1497e:	       movea.l 8(sp),a0
   14982:	       move.l d0,(a0)
	switch (to->varType) {
   14984:	       movea.l 8(sp),a0
   14988:	       move.l (a0),d0
   1498a:	       moveq #10,d1
   1498c:	       cmp.l d0,d1
   1498e:	,----- bcs.w 14a80 <copyMain+0x108>
   14992:	|      add.l d0,d0
   14994:	|      movea.l d0,a0
   14996:	|      adda.l #84386,a0
   1499c:	|      move.w (a0),d0
   1499e:	|      jmp (149a2 <copyMain+0x2a>,pc,d0.w)
   149a2:	|      .short 0x00da
   149a4:	|      ori.b #22,(a6)
   149a8:	|      ori.w #22,(a4)
   149ac:	|      ori.b #-126,(a6)
   149b0:	|      ori.b #-68,(a6)
   149b4:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   149bc:	|      move.l 4(a0),d0
   149c0:	|      movea.l 8(sp),a0
   149c4:	|      move.l d0,4(a0)
		return TRUE;
   149c8:	|      moveq #1,d0
   149ca:	|  ,-- bra.w 14a92 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   149ce:	|  |   movea.l 4(sp),a0
   149d2:	|  |   move.l 4(a0),d0
   149d6:	|  |   movea.l 8(sp),a0
   149da:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   149de:	|  |   movea.l 8(sp),a0
   149e2:	|  |   movea.l 4(a0),a0
   149e6:	|  |   move.l 8(a0),d0
   149ea:	|  |   addq.l #1,d0
   149ec:	|  |   move.l d0,8(a0)
		return TRUE;
   149f0:	|  |   moveq #1,d0
   149f2:	|  +-- bra.w 14a92 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   149f6:	|  |   movea.l 4(sp),a0
   149fa:	|  |   move.l 4(a0),d0
   149fe:	|  |   move.l d0,-(sp)
   14a00:	|  |   jsr b8 <copyString>
   14a06:	|  |   addq.l #4,sp
   14a08:	|  |   movea.l 8(sp),a0
   14a0c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14a10:	|  |   movea.l 8(sp),a0
   14a14:	|  |   move.l 4(a0),d0
   14a18:	|  |   sne d0
   14a1a:	|  |   neg.b d0
   14a1c:	|  |   move.b d0,d0
   14a1e:	|  |   andi.w #255,d0
   14a22:	|  +-- bra.s 14a92 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14a24:	|  |   movea.l 4(sp),a0
   14a28:	|  |   move.l 4(a0),d0
   14a2c:	|  |   movea.l 8(sp),a0
   14a30:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14a34:	|  |   movea.l 8(sp),a0
   14a38:	|  |   movea.l 4(a0),a0
   14a3c:	|  |   move.l 8(a0),d0
   14a40:	|  |   addq.l #1,d0
   14a42:	|  |   move.l d0,8(a0)
		return TRUE;
   14a46:	|  |   moveq #1,d0
   14a48:	|  +-- bra.s 14a92 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14a4a:	|  |   movea.l 4(sp),a0
   14a4e:	|  |   move.l 4(a0),d0
   14a52:	|  |   movea.l 8(sp),a0
   14a56:	|  |   move.l d0,4(a0)
		return TRUE;
   14a5a:	|  |   moveq #1,d0
   14a5c:	|  +-- bra.s 14a92 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14a5e:	|  |   movea.l 4(sp),a0
   14a62:	|  |   move.l 4(a0),d0
   14a66:	|  |   move.l d0,-(sp)
   14a68:	|  |   jsr 9274 <copyAnim>
   14a6e:	|  |   addq.l #4,sp
   14a70:	|  |   movea.l 8(sp),a0
   14a74:	|  |   move.l d0,4(a0)
		return TRUE;
   14a78:	|  |   moveq #1,d0
   14a7a:	|  +-- bra.s 14a92 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14a7c:	|  |   moveq #1,d0
   14a7e:	|  +-- bra.s 14a92 <copyMain+0x11a>

		default:
		break;
   14a80:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14a82:	   |   pea 19f87 <talk.c.490538ff+0x668>
   14a88:	   |   jsr 170ba <KPrintF>
   14a8e:	   |   addq.l #4,sp
	return FALSE;
   14a90:	   |   clr.w d0
}
   14a92:	   '-> rts

00014a94 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14a94:	move.l 8(sp),-(sp)
   14a98:	jsr 14828 <unlinkVar>
   14a9e:	addq.l #4,sp
	return copyMain(from, to);
   14aa0:	move.l 8(sp),-(sp)
   14aa4:	move.l 8(sp),-(sp)
   14aa8:	jsr 14978 <copyMain>
   14aae:	addq.l #8,sp
}
   14ab0:	rts

00014ab2 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14ab2:	       movea.l 4(sp),a0
   14ab6:	       move.l (a0),d0
   14ab8:	       moveq #8,d1
   14aba:	       cmp.l d0,d1
   14abc:	   ,-- bne.s 14ad2 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14abe:	   |   movea.l 4(sp),a0
   14ac2:	   |   move.l 4(a0),d0
   14ac6:	   |   move.l d0,-(sp)
   14ac8:	   |   jsr 9274 <copyAnim>
   14ace:	   |   addq.l #4,sp
   14ad0:	,--|-- bra.s 14b18 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14ad2:	|  '-> movea.l 4(sp),a0
   14ad6:	|      move.l (a0),d0
   14ad8:	|      moveq #1,d1
   14ada:	|      cmp.l d0,d1
   14adc:	|  ,-- bne.s 14af0 <getAnimationFromVar+0x3e>
   14ade:	|  |   movea.l 4(sp),a0
   14ae2:	|  |   move.l 4(a0),d0
   14ae6:	|  +-- bne.s 14af0 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14ae8:	|  |   jsr aaa6 <makeNullAnim>
   14aee:	+--|-- bra.s 14b18 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14af0:	|  '-> movea.l 4(sp),a0
   14af4:	|      move.l (a0),d0
   14af6:	|      add.l d0,d0
   14af8:	|      movea.l d0,a1
   14afa:	|      adda.l d0,a1
   14afc:	|      lea 1c818 <typeName>,a0
   14b02:	|      move.l (0,a1,a0.l),d0
   14b06:	|      move.l d0,-(sp)
   14b08:	|      pea 19e73 <talk.c.490538ff+0x554>
   14b0e:	|      jsr 170ba <KPrintF>
   14b14:	|      addq.l #8,sp
	return NULL;
   14b16:	|      moveq #0,d0
}
   14b18:	'----> rts

00014b1a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14b1a:	       movea.l 4(sp),a0
   14b1e:	       move.l (a0),d0
   14b20:	       moveq #10,d1
   14b22:	       cmp.l d0,d1
   14b24:	,----- bcs.w 14baa <getBoolean+0x90>
   14b28:	|      add.l d0,d0
   14b2a:	|      movea.l d0,a0
   14b2c:	|      adda.l #84792,a0
   14b32:	|      move.w (a0),d0
   14b34:	|      jmp (14b38 <getBoolean+0x1e>,pc,d0.w)
   14b38:	|      ori.b #26,(a6)
   14b3c:	|      ori.w #68,(114,a2,d0.w)
   14b42:	|      ori.w #46,(114,a2,d0.w)
   14b48:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14b4e:	|      clr.w d0
   14b50:	|  ,-- bra.s 14bae <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14b52:	|  |   movea.l 4(sp),a0
   14b56:	|  |   move.l 4(a0),d0
   14b5a:	|  |   sne d0
   14b5c:	|  |   neg.b d0
   14b5e:	|  |   move.b d0,d0
   14b60:	|  |   andi.w #255,d0
   14b64:	|  +-- bra.s 14bae <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14b66:	|  |   movea.l 4(sp),a0
   14b6a:	|  |   movea.l 4(a0),a0
   14b6e:	|  |   move.l (a0),d0
   14b70:	|  |   sne d0
   14b72:	|  |   neg.b d0
   14b74:	|  |   move.b d0,d0
   14b76:	|  |   andi.w #255,d0
   14b7a:	|  +-- bra.s 14bae <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14b7c:	|  |   movea.l 4(sp),a0
   14b80:	|  |   movea.l 4(a0),a0
   14b84:	|  |   move.b (a0),d0
   14b86:	|  |   sne d0
   14b88:	|  |   neg.b d0
   14b8a:	|  |   move.b d0,d0
   14b8c:	|  |   andi.w #255,d0
   14b90:	|  +-- bra.s 14bae <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14b92:	|  |   movea.l 4(sp),a0
   14b96:	|  |   movea.l 4(a0),a0
   14b9a:	|  |   move.l 4(a0),d0
   14b9e:	|  |   sne d0
   14ba0:	|  |   neg.b d0
   14ba2:	|  |   move.b d0,d0
   14ba4:	|  |   andi.w #255,d0
   14ba8:	|  +-- bra.s 14bae <getBoolean+0x94>

		default:
		break;
   14baa:	'--|-> nop
	}
	return TRUE;
   14bac:	   |   moveq #1,d0
}
   14bae:	   '-> rts

00014bb0 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14bb0:	      ,----------> lea -76(sp),sp
   14bb4:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14bb6:	      |            movea.l 84(sp),a0
   14bba:	      |            move.l (a0),d0
   14bbc:	      |            moveq #10,d1
   14bbe:	      |            cmp.l d0,d1
   14bc0:	,-----|----------- bcs.w 14e5e <getTextFromAnyVar+0x2ae>
   14bc4:	|     |            add.l d0,d0
   14bc6:	|     |            movea.l d0,a0
   14bc8:	|     |            adda.l #84948,a0
   14bce:	|     |            move.w (a0),d0
   14bd0:	|     |            jmp (14bd4 <getTextFromAnyVar+0x24>,pc,d0.w)
   14bd4:	|     |            .short 0x028a
   14bd6:	|     |            bset d0,(a0)+
   14bd8:	|     |            .short 0x028a
   14bda:	|     |            ori.b #-118,(a6)
   14bde:	|     |            andi.b #8,ccr
   14be2:	|     |            andi.w #650,-(a0)
   14be6:	|     |            .short 0x028a
   14be8:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14bee:	|     |            move.l 4(a0),d0
   14bf2:	|     |            move.l d0,-(sp)
   14bf4:	|     |            jsr b8 <copyString>
   14bfa:	|     |            addq.l #4,sp
   14bfc:	|  ,--|----------- bra.w 14e80 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14c00:	|  |  |            pea 19f9a <talk.c.490538ff+0x67b>
   14c06:	|  |  |            jsr b8 <copyString>
   14c0c:	|  |  |            addq.l #4,sp
   14c0e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14c12:	|  |  |            clr.l 72(sp)
   14c16:	|  |  |     ,----- bra.w 14cc0 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14c1a:	|  |  |  ,--|----> pea 19fa0 <talk.c.490538ff+0x681>
   14c20:	|  |  |  |  |      move.l 80(sp),-(sp)
   14c24:	|  |  |  |  |      jsr 13b06 <joinStrings>
   14c2a:	|  |  |  |  |      addq.l #8,sp
   14c2c:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14c30:	|  |  |  |  |  ,-- bne.s 14c38 <getTextFromAnyVar+0x88>
   14c32:	|  |  |  |  |  |   moveq #0,d0
   14c34:	|  +--|--|--|--|-- bra.w 14e80 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c38:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14c3e:	|  |  |  |  |      move.l 1c948 <SysBase>,d0
   14c44:	|  |  |  |  |      movea.l d0,a6
   14c46:	|  |  |  |  |      movea.l 56(sp),a1
   14c4a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14c4e:	|  |  |  |  |      movea.l 84(sp),a0
   14c52:	|  |  |  |  |      movea.l 4(a0),a0
   14c56:	|  |  |  |  |      move.l (a0),d1
   14c58:	|  |  |  |  |      move.l 72(sp),d0
   14c5c:	|  |  |  |  |      lsl.l #3,d0
   14c5e:	|  |  |  |  |      add.l d1,d0
   14c60:	|  |  |  |  |      move.l d0,-(sp)
   14c62:	|  |  +--|--|----- jsr 14bb0 <getTextFromAnyVar>(pc)
   14c66:	|  |  |  |  |      addq.l #4,sp
   14c68:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14c6c:	|  |  |  |  |      move.l 52(sp),-(sp)
   14c70:	|  |  |  |  |      move.l 64(sp),-(sp)
   14c74:	|  |  |  |  |      jsr 13b06 <joinStrings>
   14c7a:	|  |  |  |  |      addq.l #8,sp
   14c7c:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14c80:	|  |  |  |  |  ,-- bne.s 14c88 <getTextFromAnyVar+0xd8>
   14c82:	|  |  |  |  |  |   moveq #0,d0
   14c84:	|  +--|--|--|--|-- bra.w 14e80 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14c88:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14c8e:	|  |  |  |  |      move.l 1c948 <SysBase>,d0
   14c94:	|  |  |  |  |      movea.l d0,a6
   14c96:	|  |  |  |  |      movea.l 48(sp),a1
   14c9a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14c9e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14ca2:	|  |  |  |  |      move.l 60(sp),44(sp)
   14ca8:	|  |  |  |  |      move.l 1c948 <SysBase>,d0
   14cae:	|  |  |  |  |      movea.l d0,a6
   14cb0:	|  |  |  |  |      movea.l 44(sp),a1
   14cb4:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14cb8:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14cbc:	|  |  |  |  |      addq.l #1,72(sp)
   14cc0:	|  |  |  |  '----> movea.l 84(sp),a0
   14cc4:	|  |  |  |         movea.l 4(a0),a0
   14cc8:	|  |  |  |         move.l 4(a0),d0
   14ccc:	|  |  |  |         cmp.l 72(sp),d0
   14cd0:	|  |  |  '-------- bgt.w 14c1a <getTextFromAnyVar+0x6a>
			}
			return builder;
   14cd4:	|  |  |            move.l 76(sp),d0
   14cd8:	|  +--|----------- bra.w 14e80 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14cdc:	|  |  |            pea 19fa2 <talk.c.490538ff+0x683>
   14ce2:	|  |  |            jsr b8 <copyString>
   14ce8:	|  |  |            addq.l #4,sp
   14cea:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14cee:	|  |  |            movea.l 84(sp),a0
   14cf2:	|  |  |            movea.l 4(a0),a0
   14cf6:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14cfa:	|  |  |     ,----- bra.w 14d9c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14cfe:	|  |  |  ,--|----> pea 19fa0 <talk.c.490538ff+0x681>
   14d04:	|  |  |  |  |      move.l 72(sp),-(sp)
   14d08:	|  |  |  |  |      jsr 13b06 <joinStrings>
   14d0e:	|  |  |  |  |      addq.l #8,sp
   14d10:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14d14:	|  |  |  |  |  ,-- bne.s 14d1c <getTextFromAnyVar+0x16c>
   14d16:	|  |  |  |  |  |   moveq #0,d0
   14d18:	|  +--|--|--|--|-- bra.w 14e80 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14d1c:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14d22:	|  |  |  |  |      move.l 1c948 <SysBase>,d0
   14d28:	|  |  |  |  |      movea.l d0,a6
   14d2a:	|  |  |  |  |      movea.l 32(sp),a1
   14d2e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14d32:	|  |  |  |  |      move.l 64(sp),d0
   14d36:	|  |  |  |  |      move.l d0,-(sp)
   14d38:	|  |  '--|--|----- jsr 14bb0 <getTextFromAnyVar>(pc)
   14d3c:	|  |     |  |      addq.l #4,sp
   14d3e:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14d42:	|  |     |  |      move.l 28(sp),-(sp)
   14d46:	|  |     |  |      move.l 40(sp),-(sp)
   14d4a:	|  |     |  |      jsr 13b06 <joinStrings>
   14d50:	|  |     |  |      addq.l #8,sp
   14d52:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14d56:	|  |     |  |  ,-- bne.s 14d5e <getTextFromAnyVar+0x1ae>
   14d58:	|  |     |  |  |   moveq #0,d0
   14d5a:	|  +-----|--|--|-- bra.w 14e80 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14d5e:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14d64:	|  |     |  |      move.l 1c948 <SysBase>,d0
   14d6a:	|  |     |  |      movea.l d0,a6
   14d6c:	|  |     |  |      movea.l 24(sp),a1
   14d70:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14d74:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14d78:	|  |     |  |      move.l 36(sp),20(sp)
   14d7e:	|  |     |  |      move.l 1c948 <SysBase>,d0
   14d84:	|  |     |  |      movea.l d0,a6
   14d86:	|  |     |  |      movea.l 20(sp),a1
   14d8a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14d8e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14d92:	|  |     |  |      movea.l 64(sp),a0
   14d96:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14d9c:	|  |     |  '----> tst.l 64(sp)
   14da0:	|  |     '-------- bne.w 14cfe <getTextFromAnyVar+0x14e>
			}
			return builder;
   14da4:	|  |               move.l 68(sp),d0
   14da8:	|  +-------------- bra.w 14e80 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14dac:	|  |               moveq #10,d0
   14dae:	|  |               move.l d0,16(sp)
   14db2:	|  |               clr.l 12(sp)
   14db6:	|  |               move.l 1c948 <SysBase>,d0
   14dbc:	|  |               movea.l d0,a6
   14dbe:	|  |               move.l 16(sp),d0
   14dc2:	|  |               move.l 12(sp),d1
   14dc6:	|  |               jsr -684(a6)
   14dca:	|  |               move.l d0,8(sp)
   14dce:	|  |               move.l 8(sp),d0
   14dd2:	|  |               move.l d0,4(sp)
			if (! buff) {
   14dd6:	|  |           ,-- bne.s 14dec <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14dd8:	|  |           |   pea 19fa9 <talk.c.490538ff+0x68a>
   14dde:	|  |           |   jsr 170ba <KPrintF>
   14de4:	|  |           |   addq.l #4,sp
				return NULL;
   14de6:	|  |           |   moveq #0,d0
   14de8:	|  +-----------|-- bra.w 14e80 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14dec:	|  |           '-> movea.l 84(sp),a0
   14df0:	|  |               move.l 4(a0),d0
   14df4:	|  |               move.l d0,-(sp)
   14df6:	|  |               pea 19fd3 <talk.c.490538ff+0x6b4>
   14dfc:	|  |               move.l 12(sp),-(sp)
   14e00:	|  |               jsr 13de4 <sprintf>
   14e06:	|  |               lea 12(sp),sp
			return buff;
   14e0a:	|  |               move.l 4(sp),d0
   14e0e:	|  +-------------- bra.s 14e80 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14e10:	|  |               movea.l 84(sp),a0
   14e14:	|  |               move.l 4(a0),d0
   14e18:	|  |               move.l d0,-(sp)
   14e1a:	|  |               jsr 47fa <resourceNameFromNum>
   14e20:	|  |               addq.l #4,sp
   14e22:	|  |               move.l d0,-(sp)
   14e24:	|  |               pea 1888a <PutChar+0xd2e>
   14e2a:	|  |               jsr 13b06 <joinStrings>
   14e30:	|  |               addq.l #8,sp
   14e32:	|  +-------------- bra.s 14e80 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14e34:	|  |               movea.l 84(sp),a0
   14e38:	|  |               move.l 4(a0),d0
   14e3c:	|  |               move.l d0,-(sp)
   14e3e:	|  |               jsr d2d0 <findObjectType>
   14e44:	|  |               addq.l #4,sp
   14e46:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14e4a:	+--|-------------- beq.s 14e5e <getTextFromAnyVar+0x2ae>
   14e4c:	|  |               movea.l 40(sp),a0
   14e50:	|  |               move.l (a0),d0
   14e52:	|  |               move.l d0,-(sp)
   14e54:	|  |               jsr b8 <copyString>
   14e5a:	|  |               addq.l #4,sp
   14e5c:	|  +-------------- bra.s 14e80 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14e5e:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14e60:	   |               movea.l 84(sp),a0
   14e64:	   |               move.l (a0),d0
   14e66:	   |               add.l d0,d0
   14e68:	   |               movea.l d0,a1
   14e6a:	   |               adda.l d0,a1
   14e6c:	   |               lea 1c818 <typeName>,a0
   14e72:	   |               move.l (0,a1,a0.l),d0
   14e76:	   |               move.l d0,-(sp)
   14e78:	   |               jsr b8 <copyString>
   14e7e:	   |               addq.l #4,sp
}
   14e80:	   '-------------> movea.l (sp)+,a6
   14e82:	                   lea 76(sp),sp
   14e86:	                   rts

00014e88 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14e88:	move.l 4(sp),-(sp)
   14e8c:	jsr 14828 <unlinkVar>
   14e92:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14e94:	movea.l 4(sp),a0
   14e98:	moveq #8,d0
   14e9a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14e9c:	movea.l 4(sp),a0
   14ea0:	move.l 8(sp),4(a0)
}
   14ea6:	nop
   14ea8:	rts

00014eaa <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14eaa:	move.l 4(sp),-(sp)
   14eae:	jsr 14828 <unlinkVar>
   14eb4:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14eb6:	movea.l 4(sp),a0
   14eba:	moveq #9,d0
   14ebc:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14ebe:	movea.l 4(sp),a0
   14ec2:	move.l 8(sp),4(a0)
}
   14ec8:	nop
   14eca:	rts

00014ecc <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   14ecc:	move.l 4(sp),-(sp)
   14ed0:	jsr 14828 <unlinkVar>
   14ed6:	addq.l #4,sp
   14ed8:	movea.l 4(sp),a0
   14edc:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   14ee0:	movea.l 4(sp),a0
   14ee4:	move.l 12(sp),4(a0)
   14eea:	nop
   14eec:	rts

00014eee <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14eee:	      ,-- bra.s 14f00 <stackGetByIndex+0x12>
        vS = vS->next;
   14ef0:	,-----|-> movea.l 4(sp),a0
   14ef4:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14efa:	|     +-- bne.s 14f00 <stackGetByIndex+0x12>
            return NULL;
   14efc:	|     |   moveq #0,d0
   14efe:	|  ,--|-- bra.s 14f14 <stackGetByIndex+0x26>
    while (theIndex--) {
   14f00:	|  |  '-> move.l 8(sp),d0
   14f04:	|  |      move.l d0,d1
   14f06:	|  |      subq.l #1,d1
   14f08:	|  |      move.l d1,8(sp)
   14f0c:	|  |      tst.l d0
   14f0e:	'--|----- bne.s 14ef0 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14f10:	   |      move.l 4(sp),d0
}
   14f14:	   '----> rts

00014f16 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14f16:	          tst.l 4(sp)
   14f1a:	      ,-- bne.s 14f2a <stackFindLast+0x14>
		return NULL;
   14f1c:	      |   moveq #0,d0
   14f1e:	,-----|-- bra.s 14f38 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14f20:	|  ,--|-> movea.l 4(sp),a0
   14f24:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14f2a:	|  |  '-> movea.l 4(sp),a0
   14f2e:	|  |      move.l 8(a0),d0
   14f32:	|  '----- bne.s 14f20 <stackFindLast+0xa>

	return hunt;
   14f34:	|         move.l 4(sp),d0
}
   14f38:	'-------> rts

00014f3a <stackSize>:

int stackSize (const struct stackHandler * me) {
   14f3a:	       subq.l #8,sp
	int r = 0;
   14f3c:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14f40:	       movea.l 12(sp),a0
   14f44:	       move.l (a0),(sp)
	while (a) {
   14f46:	   ,-- bra.s 14f52 <stackSize+0x18>
		r ++;
   14f48:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   14f4c:	|  |   movea.l (sp),a0
   14f4e:	|  |   move.l 8(a0),(sp)
	while (a) {
   14f52:	|  '-> tst.l (sp)
   14f54:	'----- bne.s 14f48 <stackSize+0xe>
	}
	return r;
   14f56:	       move.l 4(sp),d0
}
   14f5a:	       addq.l #8,sp
   14f5c:	       rts

00014f5e <trimStack>:

void trimStack (struct variableStack ** stack) {
   14f5e:	subq.l #8,sp
   14f60:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14f62:	movea.l 16(sp),a0
   14f66:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14f6a:	movea.l 16(sp),a0
   14f6e:	movea.l (a0),a0
   14f70:	move.l 8(a0),d0
   14f74:	movea.l 16(sp),a0
   14f78:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14f7a:	move.l 8(sp),d0
   14f7e:	move.l d0,-(sp)
   14f80:	jsr 14828 <unlinkVar>
   14f86:	addq.l #4,sp
	FreeVec(killMe);
   14f88:	move.l 8(sp),4(sp)
   14f8e:	move.l 1c948 <SysBase>,d0
   14f94:	movea.l d0,a6
   14f96:	movea.l 4(sp),a1
   14f9a:	jsr -690(a6)
   14f9e:	nop
   14fa0:	movea.l (sp)+,a6
   14fa2:	addq.l #8,sp
   14fa4:	rts

00014fa6 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14fa6:	       lea -52(sp),sp
   14faa:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14fac:	       pea 19fd6 <talk.c.490538ff+0x6b7>
   14fb2:	       jsr 170ba <KPrintF>
   14fb8:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14fba:	       moveq #68,d0
   14fbc:	       move.l d0,52(sp)
   14fc0:	       clr.l 48(sp)
   14fc4:	       move.l 1c948 <SysBase>,d0
   14fca:	       movea.l d0,a6
   14fcc:	       move.l 52(sp),d0
   14fd0:	       move.l 48(sp),d1
   14fd4:	       jsr -684(a6)
   14fd8:	       move.l d0,44(sp)
   14fdc:	       move.l 44(sp),d0
   14fe0:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14fe4:	   ,-- bne.s 14fec <freeze+0x46>
   14fe6:	   |   clr.w d0
   14fe8:	,--|-- bra.w 1517e <freeze+0x1d8>

	CstFreeze();
   14fec:	|  '-> jsr 1baa <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14ff2:	|      move.l 1c9e0 <sceneWidth>,d0
   14ff8:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14ffc:	|      move.l 1c9e4 <sceneHeight>,d0
   15002:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15006:	|      move.l 1c9e0 <sceneWidth>,d0
   1500c:	|      movea.l 40(sp),a0
   15010:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15014:	|      move.l 1c9e4 <sceneHeight>,d0
   1501a:	|      movea.l 40(sp),a0
   1501e:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15022:	|      move.l 1c9fe <cameraX>,d0
   15028:	|      movea.l 40(sp),a0
   1502c:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15030:	|      move.l 1ca02 <cameraY>,d0
   15036:	|      movea.l 40(sp),a0
   1503a:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1503e:	|      move.l 1c2da <cameraZoom>,d0
   15044:	|      movea.l 40(sp),a0
   15048:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1504c:	|      move.w #1,1c9ec <backdropExists>

	newFreezer -> allPeople = allPeople;
   15054:	|      move.l 1c9a8 <allPeople>,d0
   1505a:	|      movea.l 40(sp),a0
   1505e:	|      move.l d0,(a0)
	allPeople = NULL;
   15060:	|      clr.l 1c9a8 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15066:	|      moveq #42,d0
   15068:	|      move.l d0,28(sp)
   1506c:	|      clr.l 24(sp)
   15070:	|      move.l 1c948 <SysBase>,d0
   15076:	|      movea.l d0,a6
   15078:	|      move.l 28(sp),d0
   1507c:	|      move.l 24(sp),d1
   15080:	|      jsr -684(a6)
   15084:	|      move.l d0,20(sp)
   15088:	|      move.l 20(sp),d0
   1508c:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15090:	|  ,-- bne.s 15098 <freeze+0xf2>
   15092:	|  |   clr.w d0
   15094:	+--|-- bra.w 1517e <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15098:	|  '-> move.l 1ca54 <allScreenRegions>,d0
   1509e:	|      movea.l 40(sp),a0
   150a2:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   150a6:	|      clr.l 1ca54 <allScreenRegions>
	overRegion = NULL;
   150ac:	|      clr.l 1ca58 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   150b2:	|      move.l 1c842 <mouseCursorAnim>,d0
   150b8:	|      movea.l 40(sp),a0
   150bc:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   150c0:	|      move.l 1c846 <mouseCursorFrameNum>,d0
   150c6:	|      movea.l 40(sp),a0
   150ca:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   150ce:	|      jsr aaa6 <makeNullAnim>
   150d4:	|      move.l d0,1c842 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   150da:	|      clr.l 1c846 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   150e0:	|      move.l 1c9a4 <zBuffer>,d0
   150e6:	|      movea.l 40(sp),a0
   150ea:	|      move.l d0,60(a0)
	zBuffer = NULL;
   150ee:	|      clr.l 1c9a4 <zBuffer>

	newFreezer -> speech = speech;
   150f4:	|      move.l 1c898 <speech>,d0
   150fa:	|      movea.l 40(sp),a0
   150fe:	|      move.l d0,20(a0)
	initSpeech ();
   15102:	|      jsr 3cf0 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   15108:	|      move.l 1c2b8 <currentEvents>,d0
   1510e:	|      movea.l 40(sp),a0
   15112:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15116:	|      moveq #28,d0
   15118:	|      move.l d0,12(sp)
   1511c:	|      clr.l 8(sp)
   15120:	|      move.l 1c948 <SysBase>,d0
   15126:	|      movea.l d0,a6
   15128:	|      move.l 12(sp),d0
   1512c:	|      move.l 8(sp),d1
   15130:	|      jsr -684(a6)
   15134:	|      move.l d0,4(sp)
   15138:	|      move.l 4(sp),d0
   1513c:	|      move.l d0,1c2b8 <currentEvents>
	if (!currentEvents) return FALSE;
   15142:	|      move.l 1c2b8 <currentEvents>,d0
   15148:	|  ,-- bne.s 1514e <freeze+0x1a8>
   1514a:	|  |   clr.w d0
   1514c:	+--|-- bra.s 1517e <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   1514e:	|  '-> move.l 1c2b8 <currentEvents>,d0
   15154:	|      pea 1c <_start+0x1c>
   15158:	|      clr.l -(sp)
   1515a:	|      move.l d0,-(sp)
   1515c:	|      jsr 1703e <memset>
   15162:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15166:	|      move.l 1ca38 <frozenStuff>,d0
   1516c:	|      movea.l 40(sp),a0
   15170:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15174:	|      move.l 40(sp),1ca38 <frozenStuff>

	return TRUE;
   1517c:	|      moveq #1,d0
}
   1517e:	'----> movea.l (sp)+,a6
   15180:	       lea 52(sp),sp
   15184:	       rts

00015186 <howFrozen>:

int howFrozen () {
   15186:	       subq.l #8,sp
	int a = 0;
   15188:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1518c:	       move.l 1ca38 <frozenStuff>,(sp)
	while (f) {
   15192:	   ,-- bra.s 1519e <howFrozen+0x18>
		a ++;
   15194:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15198:	|  |   movea.l (sp),a0
   1519a:	|  |   move.l 64(a0),(sp)
	while (f) {
   1519e:	|  '-> tst.l (sp)
   151a0:	'----- bne.s 15194 <howFrozen+0xe>
	}
	return a;
   151a2:	       move.l 4(sp),d0
}
   151a6:	       addq.l #8,sp
   151a8:	       rts

000151aa <unfreeze>:

void unfreeze () {
   151aa:	       lea -16(sp),sp
   151ae:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   151b0:	       move.l 1ca38 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   151b8:	       move.l 1ca38 <frozenStuff>,d0
   151be:	,----- beq.w 153f6 <unfreeze+0x24c>

	CstUnfreeze();
   151c2:	|      jsr 3988 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   151c8:	|      movea.l 1ca38 <frozenStuff>,a0
   151ce:	|      move.l 48(a0),d0
   151d2:	|      move.l d0,1c9e0 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   151d8:	|      movea.l 1ca38 <frozenStuff>,a0
   151de:	|      move.l 52(a0),d0
   151e2:	|      move.l d0,1c9e4 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   151e8:	|      movea.l 1ca38 <frozenStuff>,a0
   151ee:	|      move.l 40(a0),d0
   151f2:	|      move.l d0,1c9fe <cameraX>
	cameraY = frozenStuff -> cameraY;
   151f8:	|      movea.l 1ca38 <frozenStuff>,a0
   151fe:	|      move.l 44(a0),d0
   15202:	|      move.l d0,1ca02 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15208:	|      move.l 1c904 <input+0xa>,d0
   1520e:	|      move.l d0,-(sp)
   15210:	|      jsr 174ec <__floatsisf>
   15216:	|      addq.l #4,sp
   15218:	|      move.l d0,d1
   1521a:	|      move.l 1c2da <cameraZoom>,d0
   15220:	|      move.l d0,-(sp)
   15222:	|      move.l d1,-(sp)
   15224:	|      jsr 1759e <__mulsf3>
   1522a:	|      addq.l #8,sp
   1522c:	|      move.l d0,-(sp)
   1522e:	|      jsr 17484 <__fixsfsi>
   15234:	|      addq.l #4,sp
   15236:	|      move.l d0,1c904 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1523c:	|      move.l 1c908 <input+0xe>,d0
   15242:	|      move.l d0,-(sp)
   15244:	|      jsr 174ec <__floatsisf>
   1524a:	|      addq.l #4,sp
   1524c:	|      move.l d0,d1
   1524e:	|      move.l 1c2da <cameraZoom>,d0
   15254:	|      move.l d0,-(sp)
   15256:	|      move.l d1,-(sp)
   15258:	|      jsr 1759e <__mulsf3>
   1525e:	|      addq.l #8,sp
   15260:	|      move.l d0,-(sp)
   15262:	|      jsr 17484 <__fixsfsi>
   15268:	|      addq.l #4,sp
   1526a:	|      move.l d0,1c908 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15270:	|      movea.l 1ca38 <frozenStuff>,a0
   15276:	|      move.l 56(a0),d0
   1527a:	|      move.l d0,1c2da <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15280:	|      move.l 1c904 <input+0xa>,d0
   15286:	|      move.l d0,-(sp)
   15288:	|      jsr 174ec <__floatsisf>
   1528e:	|      addq.l #4,sp
   15290:	|      move.l d0,d1
   15292:	|      move.l 1c2da <cameraZoom>,d0
   15298:	|      move.l d0,-(sp)
   1529a:	|      move.l d1,-(sp)
   1529c:	|      jsr 173a2 <__divsf3>
   152a2:	|      addq.l #8,sp
   152a4:	|      move.l d0,-(sp)
   152a6:	|      jsr 17484 <__fixsfsi>
   152ac:	|      addq.l #4,sp
   152ae:	|      move.l d0,1c904 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   152b4:	|      move.l 1c908 <input+0xe>,d0
   152ba:	|      move.l d0,-(sp)
   152bc:	|      jsr 174ec <__floatsisf>
   152c2:	|      addq.l #4,sp
   152c4:	|      move.l d0,d1
   152c6:	|      move.l 1c2da <cameraZoom>,d0
   152cc:	|      move.l d0,-(sp)
   152ce:	|      move.l d1,-(sp)
   152d0:	|      jsr 173a2 <__divsf3>
   152d6:	|      addq.l #8,sp
   152d8:	|      move.l d0,-(sp)
   152da:	|      jsr 17484 <__fixsfsi>
   152e0:	|      addq.l #4,sp
   152e2:	|      move.l d0,1c908 <input+0xe>

	killAllPeople ();
   152e8:	|      jsr a776 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   152ee:	|      movea.l 1ca38 <frozenStuff>,a0
   152f4:	|      move.l (a0),d0
   152f6:	|      move.l d0,1c9a8 <allPeople>

	killAllRegions ();
   152fc:	|      jsr 158ca <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15302:	|      movea.l 1ca38 <frozenStuff>,a0
   15308:	|      move.l 4(a0),d0
   1530c:	|      move.l d0,1ca54 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15312:	|      move.l 1c842 <mouseCursorAnim>,d0
   15318:	|      move.l d0,-(sp)
   1531a:	|      jsr 9640 <deleteAnim>
   15320:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15322:	|      movea.l 1ca38 <frozenStuff>,a0
   15328:	|      move.l 32(a0),d0
   1532c:	|      move.l d0,1c842 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15332:	|      movea.l 1ca38 <frozenStuff>,a0
   15338:	|      move.l 36(a0),d0
   1533c:	|      move.l d0,1c846 <mouseCursorFrameNum>

	killZBuffer ();
   15342:	|      jsr 83e6 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15348:	|      movea.l 1ca38 <frozenStuff>,a0
   1534e:	|      move.l 60(a0),d0
   15352:	|      move.l d0,1c9a4 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15358:	|      move.l 1c2b8 <currentEvents>,d0
   1535e:	|  ,-- beq.s 15378 <unfreeze+0x1ce>
   15360:	|  |   move.l 1c2b8 <currentEvents>,12(sp)
   15368:	|  |   move.l 1c948 <SysBase>,d0
   1536e:	|  |   movea.l d0,a6
   15370:	|  |   movea.l 12(sp),a1
   15374:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15378:	|  '-> movea.l 1ca38 <frozenStuff>,a0
   1537e:	|      move.l 28(a0),d0
   15382:	|      move.l d0,1c2b8 <currentEvents>

	killAllSpeech ();
   15388:	|      jsr 3d88 <killAllSpeech>
	if (speech) FreeVec(speech);
   1538e:	|      move.l 1c898 <speech>,d0
   15394:	|  ,-- beq.s 153ae <unfreeze+0x204>
   15396:	|  |   move.l 1c898 <speech>,8(sp)
   1539e:	|  |   move.l 1c948 <SysBase>,d0
   153a4:	|  |   movea.l d0,a6
   153a6:	|  |   movea.l 8(sp),a1
   153aa:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   153ae:	|  '-> movea.l 1ca38 <frozenStuff>,a0
   153b4:	|      move.l 20(a0),d0
   153b8:	|      move.l d0,1c898 <speech>

	frozenStuff = frozenStuff -> next;
   153be:	|      movea.l 1ca38 <frozenStuff>,a0
   153c4:	|      move.l 64(a0),d0
   153c8:	|      move.l d0,1ca38 <frozenStuff>

	overRegion = NULL;
   153ce:	|      clr.l 1ca58 <overRegion>
	if (killMe) FreeVec(killMe);
   153d4:	|      tst.l 16(sp)
   153d8:	|  ,-- beq.s 153f0 <unfreeze+0x246>
   153da:	|  |   move.l 16(sp),4(sp)
   153e0:	|  |   move.l 1c948 <SysBase>,d0
   153e6:	|  |   movea.l d0,a6
   153e8:	|  |   movea.l 4(sp),a1
   153ec:	|  |   jsr -690(a6)
	killMe = NULL;
   153f0:	|  '-> clr.l 16(sp)
   153f4:	|  ,-- bra.s 153f8 <unfreeze+0x24e>
	if (! frozenStuff) return;
   153f6:	'--|-> nop
}
   153f8:	   '-> movea.l (sp)+,a6
   153fa:	       lea 16(sp),sp
   153fe:	       rts

00015400 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15400:	pea 19fe8 <talk.c.490538ff+0x6c9>
   15406:	jsr 170ba <KPrintF>
   1540c:	addq.l #4,sp
	return FALSE;
   1540e:	clr.w d0
}
   15410:	rts

00015412 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15412:	          lea -32(sp),sp
   15416:	          move.l a6,-(sp)
   15418:	          move.l d2,-(sp)
	unsigned int a = 0;
   1541a:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1541e:	          move.l 1ca44 <fontOrderString>,d0
   15424:	      ,-- beq.s 1543e <loadFont+0x2c>
   15426:	      |   move.l 1ca44 <fontOrderString>,24(sp)
   1542e:	      |   move.l 1c948 <SysBase>,d0
   15434:	      |   movea.l d0,a6
   15436:	      |   movea.l 24(sp),a1
   1543a:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   1543e:	      '-> move.l 48(sp),-(sp)
   15442:	          jsr b8 <copyString>
   15448:	          addq.l #4,sp
   1544a:	          move.l d0,1ca44 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15450:	          move.l 1ca50 <theFont>,d0
   15456:	      ,-- beq.s 15468 <loadFont+0x56>
   15458:	      |   move.l 1ca50 <theFont>,d0
   1545e:	      |   move.l d0,-(sp)
   15460:	      |   jsr 8724 <forgetSpriteBank>
   15466:	      |   addq.l #4,sp
	theFont = NULL;
   15468:	      '-> clr.l 1ca50 <theFont>

	loadedFontNum = filenum;
   1546e:	          move.l 44(sp),1ca40 <loadedFontNum>

	fontTableSize = 0;
   15476:	          clr.l 1ca4c <fontTableSize>
	char *tmp = charOrder;
   1547c:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15482:	   ,----- bra.s 154be <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15484:	,--|----> movea.l 32(sp),a0
   15488:	|  |      move.b (a0),d0
   1548a:	|  |      ext.w d0
   1548c:	|  |      movea.w d0,a0
   1548e:	|  |      move.l 1ca4c <fontTableSize>,d0
   15494:	|  |      move.l d0,d0
   15496:	|  |      move.b d0,d0
   15498:	|  |      andi.l #255,d0
   1549e:	|  |      cmp.l a0,d0
   154a0:	|  |  ,-- bge.s 154b2 <loadFont+0xa0>
   154a2:	|  |  |   movea.l 32(sp),a0
   154a6:	|  |  |   move.b (a0),d0
   154a8:	|  |  |   ext.w d0
   154aa:	|  |  |   movea.w d0,a0
   154ac:	|  |  |   move.l a0,1ca4c <fontTableSize>
		*tmp++;
   154b2:	|  |  '-> move.l 32(sp),d0
   154b6:	|  |      move.l d0,d1
   154b8:	|  |      addq.l #1,d1
   154ba:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   154be:	|  '----> movea.l 32(sp),a0
   154c2:	|         move.b (a0),d0
   154c4:	'-------- bne.s 15484 <loadFont+0x72>
	}
	fontTableSize++;
   154c6:	          move.l 1ca4c <fontTableSize>,d0
   154cc:	          addq.l #1,d0
   154ce:	          move.l d0,1ca4c <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   154d4:	          move.l 1ca48 <fontTable>,d0
   154da:	      ,-- beq.s 154f4 <loadFont+0xe2>
   154dc:	      |   move.l 1ca48 <fontTable>,20(sp)
   154e4:	      |   move.l 1c948 <SysBase>,d0
   154ea:	      |   movea.l d0,a6
   154ec:	      |   movea.l 20(sp),a1
   154f0:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   154f4:	      '-> move.l 1ca4c <fontTableSize>,d0
   154fa:	          add.l d0,d0
   154fc:	          add.l d0,d0
   154fe:	          move.l d0,16(sp)
   15502:	          clr.l 12(sp)
   15506:	          move.l 1c948 <SysBase>,d0
   1550c:	          movea.l d0,a6
   1550e:	          move.l 16(sp),d0
   15512:	          move.l 12(sp),d1
   15516:	          jsr -684(a6)
   1551a:	          move.l d0,8(sp)
   1551e:	          move.l 8(sp),d0
   15522:	          move.l d0,1ca48 <fontTable>
	if (!fontTable) return FALSE;
   15528:	          move.l 1ca48 <fontTable>,d0
   1552e:	      ,-- bne.s 15536 <loadFont+0x124>
   15530:	      |   clr.w d0
   15532:	,-----|-- bra.w 155dc <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15536:	|     '-> clr.l 36(sp)
   1553a:	|     ,-- bra.s 15554 <loadFont+0x142>
		fontTable[a] = 0;
   1553c:	|  ,--|-> move.l 1ca48 <fontTable>,d1
   15542:	|  |  |   move.l 36(sp),d0
   15546:	|  |  |   add.l d0,d0
   15548:	|  |  |   add.l d0,d0
   1554a:	|  |  |   movea.l d1,a0
   1554c:	|  |  |   adda.l d0,a0
   1554e:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15550:	|  |  |   addq.l #1,36(sp)
   15554:	|  |  '-> move.l 1ca4c <fontTableSize>,d0
   1555a:	|  |      cmp.l 36(sp),d0
   1555e:	|  '----- bhi.s 1553c <loadFont+0x12a>
	}
	a = 0;
   15560:	|         clr.l 36(sp)
	int i = 0;
   15564:	|         clr.l 28(sp)
	tmp = charOrder;
   15568:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   1556e:	|     ,-- bra.s 1559e <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15570:	|  ,--|-> move.l 1ca48 <fontTable>,d1
   15576:	|  |  |   move.l 32(sp),d0
   1557a:	|  |  |   move.l d0,d2
   1557c:	|  |  |   addq.l #1,d2
   1557e:	|  |  |   move.l d2,32(sp)
   15582:	|  |  |   movea.l d0,a0
   15584:	|  |  |   move.b (a0),d0
   15586:	|  |  |   ext.w d0
   15588:	|  |  |   movea.w d0,a0
   1558a:	|  |  |   move.l a0,d0
   1558c:	|  |  |   add.l a0,d0
   1558e:	|  |  |   add.l d0,d0
   15590:	|  |  |   movea.l d1,a0
   15592:	|  |  |   adda.l d0,a0
   15594:	|  |  |   move.l 28(sp),d0
   15598:	|  |  |   move.l d0,(a0)
		i++;
   1559a:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   1559e:	|  |  '-> movea.l 32(sp),a0
   155a2:	|  |      move.b (a0),d0
   155a4:	|  '----- bne.s 15570 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   155a6:	|         move.l 44(sp),-(sp)
   155aa:	|         jsr 15ddc <loadBankForAnim>
   155b0:	|         addq.l #4,sp
   155b2:	|         move.l d0,1ca50 <theFont>
	if (!theFont) {
   155b8:	|         move.l 1ca50 <theFont>,d0
   155be:	|     ,-- bne.s 155d2 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   155c0:	|     |   pea 1a00f <talk.c.490538ff+0x6f0>
   155c6:	|     |   jsr 170ba <KPrintF>
   155cc:	|     |   addq.l #4,sp
		return FALSE;
   155ce:	|     |   clr.w d0
   155d0:	+-----|-- bra.s 155dc <loadFont+0x1ca>
	}
	fontHeight = h;
   155d2:	|     '-> move.l 52(sp),1ca3c <fontHeight>
	return TRUE;
   155da:	|         moveq #1,d0
}
   155dc:	'-------> move.l (sp)+,d2
   155de:	          movea.l (sp)+,a6
   155e0:	          lea 32(sp),sp
   155e4:	          rts

000155e6 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   155e6:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   155ea:	                clr.l 4(sp)

    if (!fontTableSize) return;
   155ee:	                move.l 1ca4c <fontTableSize>,d0
   155f4:	,-------------- beq.w 156bc <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   155f8:	|               move.w 1c840 <fontSpace>,d0
   155fe:	|               asr.w #1,d0
   15600:	|               ext.l d0
   15602:	|               add.l d0,20(sp)
	char *tmp = theText;
   15606:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1560c:	|     ,-------- bra.w 156b0 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15610:	|  ,--|-------> movea.l 1ca50 <theFont>,a0
   15616:	|  |  |         movea.l 16(a0),a0
   1561a:	|  |  |         movea.l 8(sp),a1
   1561e:	|  |  |         move.b (a1),d0
   15620:	|  |  |         move.b d0,d0
   15622:	|  |  |         andi.l #255,d0
   15628:	|  |  |         move.l 1ca4c <fontTableSize>,d1
   1562e:	|  |  |         cmp.l d0,d1
   15630:	|  |  |  ,----- bls.s 1565c <pasteStringToBackdrop+0x76>
   15632:	|  |  |  |      move.l 1ca48 <fontTable>,d1
   15638:	|  |  |  |      movea.l 8(sp),a1
   1563c:	|  |  |  |      move.b (a1),d0
   1563e:	|  |  |  |      move.b d0,d0
   15640:	|  |  |  |      andi.l #255,d0
   15646:	|  |  |  |      add.l d0,d0
   15648:	|  |  |  |      add.l d0,d0
   1564a:	|  |  |  |      movea.l d1,a1
   1564c:	|  |  |  |      adda.l d0,a1
   1564e:	|  |  |  |      move.l (a1),d1
   15650:	|  |  |  |      move.l d1,d0
   15652:	|  |  |  |      lsl.l #3,d0
   15654:	|  |  |  |      sub.l d1,d0
   15656:	|  |  |  |      add.l d0,d0
   15658:	|  |  |  |      add.l d0,d0
   1565a:	|  |  |  |  ,-- bra.s 1565e <pasteStringToBackdrop+0x78>
   1565c:	|  |  |  '--|-> moveq #0,d0
   1565e:	|  |  |     '-> adda.l d0,a0
   15660:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15662:	|  |  |         move.l 24(sp),d1
   15666:	|  |  |         movea.l (sp),a0
   15668:	|  |  |         move.l 12(a0),d0
   1566c:	|  |  |         move.l d0,d0
   1566e:	|  |  |         sub.w d0,d1
   15670:	|  |  |         move.w d1,d0
   15672:	|  |  |         movea.w d0,a1
   15674:	|  |  |         move.l 20(sp),d1
   15678:	|  |  |         movea.l (sp),a0
   1567a:	|  |  |         move.l 8(a0),d0
   1567e:	|  |  |         move.l d0,d0
   15680:	|  |  |         sub.w d0,d1
   15682:	|  |  |         move.w d1,d0
   15684:	|  |  |         movea.w d0,a0
   15686:	|  |  |         move.l a1,-(sp)
   15688:	|  |  |         move.l a0,-(sp)
   1568a:	|  |  |         move.l 8(sp),-(sp)
   1568e:	|  |  |         jsr 21c2 <CstPasteChar>
   15694:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15698:	|  |  |         movea.l (sp),a0
   1569a:	|  |  |         move.l (a0),d1
   1569c:	|  |  |         move.w 1c840 <fontSpace>,d0
   156a2:	|  |  |         movea.w d0,a0
   156a4:	|  |  |         move.l d1,d0
   156a6:	|  |  |         add.l a0,d0
   156a8:	|  |  |         add.l d0,20(sp)
		tmp++;
   156ac:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   156b0:	|  |  '-------> movea.l 8(sp),a0
   156b4:	|  |            move.b (a0),d0
   156b6:	|  '----------- bne.w 15610 <pasteStringToBackdrop+0x2a>
   156ba:	|           ,-- bra.s 156be <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   156bc:	'-----------|-> nop
    }
}
   156be:	            '-> lea 12(sp),sp
   156c2:	                rts

000156c4 <stringWidth>:


int stringWidth (char * theText) {
   156c4:	                lea -16(sp),sp
	int a = 0;
   156c8:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   156cc:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   156d0:	                move.l 1ca4c <fontTableSize>,d0
   156d6:	            ,-- bne.s 156dc <stringWidth+0x18>
   156d8:	            |   moveq #0,d0
   156da:	,-----------|-- bra.s 15750 <stringWidth+0x8c>

	char *tmp = theText;
   156dc:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   156e2:	|     ,-------- bra.s 15744 <stringWidth+0x80>
        c = *tmp++;
   156e4:	|  ,--|-------> move.l 8(sp),d0
   156e8:	|  |  |         move.l d0,d1
   156ea:	|  |  |         addq.l #1,d1
   156ec:	|  |  |         move.l d1,8(sp)
   156f0:	|  |  |         movea.l d0,a0
   156f2:	|  |  |         move.b (a0),d0
   156f4:	|  |  |         ext.w d0
   156f6:	|  |  |         movea.w d0,a0
   156f8:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   156fa:	|  |  |         movea.l 1ca50 <theFont>,a0
   15700:	|  |  |         movea.l 16(a0),a1
   15704:	|  |  |         move.l 1ca4c <fontTableSize>,d0
   1570a:	|  |  |         cmp.l (sp),d0
   1570c:	|  |  |  ,----- bls.s 1572c <stringWidth+0x68>
   1570e:	|  |  |  |      move.l 1ca48 <fontTable>,d1
   15714:	|  |  |  |      move.l (sp),d0
   15716:	|  |  |  |      add.l d0,d0
   15718:	|  |  |  |      add.l d0,d0
   1571a:	|  |  |  |      movea.l d1,a0
   1571c:	|  |  |  |      adda.l d0,a0
   1571e:	|  |  |  |      move.l (a0),d1
   15720:	|  |  |  |      move.l d1,d0
   15722:	|  |  |  |      lsl.l #3,d0
   15724:	|  |  |  |      sub.l d1,d0
   15726:	|  |  |  |      add.l d0,d0
   15728:	|  |  |  |      add.l d0,d0
   1572a:	|  |  |  |  ,-- bra.s 1572e <stringWidth+0x6a>
   1572c:	|  |  |  '--|-> moveq #0,d0
   1572e:	|  |  |     '-> lea (0,a1,d0.l),a0
   15732:	|  |  |         move.l (a0),d1
   15734:	|  |  |         move.w 1c840 <fontSpace>,d0
   1573a:	|  |  |         movea.w d0,a0
   1573c:	|  |  |         move.l d1,d0
   1573e:	|  |  |         add.l a0,d0
   15740:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15744:	|  |  '-------> movea.l 8(sp),a0
   15748:	|  |            move.b (a0),d0
   1574a:	|  '----------- bne.s 156e4 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   1574c:	|               move.l 12(sp),d0
}
   15750:	'-------------> lea 16(sp),sp
   15754:	                rts

00015756 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15756:	       lea -16(sp),sp
   1575a:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   1575c:	       moveq #36,d0
   1575e:	       move.l d0,16(sp)
   15762:	       clr.l 12(sp)
   15766:	       move.l 1c948 <SysBase>,d0
   1576c:	       movea.l d0,a6
   1576e:	       move.l 16(sp),d0
   15772:	       move.l 12(sp),d1
   15776:	       jsr -684(a6)
   1577a:	       move.l d0,8(sp)
   1577e:	       move.l 8(sp),d0
   15782:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15786:	   ,-- bne.s 1578e <addScreenRegion+0x38>
   15788:	   |   clr.w d0
   1578a:	,--|-- bra.w 1580e <addScreenRegion+0xb8>
    newRegion->di = di;
   1578e:	|  '-> movea.l 4(sp),a0
   15792:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15798:	|      movea.l 4(sp),a0
   1579c:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   157a0:	|      movea.l 4(sp),a0
   157a4:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   157aa:	|      movea.l 4(sp),a0
   157ae:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   157b4:	|      movea.l 4(sp),a0
   157b8:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   157be:	|      movea.l 4(sp),a0
   157c2:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   157c8:	|      movea.l 4(sp),a0
   157cc:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   157d2:	|      move.l 52(sp),-(sp)
   157d6:	|      jsr d3c0 <loadObjectType>
   157dc:	|      addq.l #4,sp
   157de:	|      movea.l 4(sp),a0
   157e2:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   157e6:	|      move.l 1ca54 <allScreenRegions>,d0
   157ec:	|      movea.l 4(sp),a0
   157f0:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   157f4:	|      move.l 4(sp),1ca54 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   157fc:	|      movea.l 4(sp),a0
   15800:	|      move.l 28(a0),d0
   15804:	|      sne d0
   15806:	|      neg.b d0
   15808:	|      move.b d0,d0
   1580a:	|      andi.w #255,d0
}
   1580e:	'----> movea.l (sp)+,a6
   15810:	       lea 16(sp),sp
   15814:	       rts

00015816 <getOverRegion>:

void getOverRegion () {
   15816:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15818:	             move.l 1ca54 <allScreenRegions>,(sp)
	while (thisRegion) {
   1581e:	   ,-------- bra.s 1588c <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15820:	,--|-------> move.l 1c904 <input+0xa>,d0
   15826:	|  |         movea.l (sp),a0
   15828:	|  |         movea.l (a0),a0
   1582a:	|  |         move.l 1c9fe <cameraX>,d1
   15830:	|  |         suba.l d1,a0
   15832:	|  |         cmpa.l d0,a0
   15834:	|  |  ,----- bgt.s 15886 <getOverRegion+0x70>
   15836:	|  |  |      move.l 1c908 <input+0xe>,d0
   1583c:	|  |  |      movea.l (sp),a0
   1583e:	|  |  |      movea.l 4(a0),a0
   15842:	|  |  |      move.l 1ca02 <cameraY>,d1
   15848:	|  |  |      suba.l d1,a0
   1584a:	|  |  |      cmpa.l d0,a0
   1584c:	|  |  +----- bgt.s 15886 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1584e:	|  |  |      move.l 1c904 <input+0xa>,d0
   15854:	|  |  |      movea.l (sp),a0
   15856:	|  |  |      movea.l 8(a0),a0
   1585a:	|  |  |      move.l 1c9fe <cameraX>,d1
   15860:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15862:	|  |  |      cmpa.l d0,a0
   15864:	|  |  +----- blt.s 15886 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15866:	|  |  |      move.l 1c908 <input+0xe>,d0
   1586c:	|  |  |      movea.l (sp),a0
   1586e:	|  |  |      movea.l 12(a0),a0
   15872:	|  |  |      move.l 1ca02 <cameraY>,d1
   15878:	|  |  |      suba.l d1,a0
   1587a:	|  |  |      cmpa.l d0,a0
   1587c:	|  |  +----- blt.s 15886 <getOverRegion+0x70>
			overRegion = thisRegion;
   1587e:	|  |  |      move.l (sp),1ca58 <overRegion>
			return;
   15884:	|  |  |  ,-- bra.s 15898 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15886:	|  |  '--|-> movea.l (sp),a0
   15888:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1588c:	|  '-----|-> tst.l (sp)
   1588e:	'--------|-- bne.s 15820 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15890:	         |   clr.l 1ca58 <overRegion>
	return;
   15896:	         |   nop
}
   15898:	         '-> addq.l #4,sp
   1589a:	             rts

0001589c <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1589c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1589e:	             move.l 1ca54 <allScreenRegions>,(sp)

	while (thisRegion) {
   158a4:	   ,-------- bra.s 158c0 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   158a6:	,--|-------> movea.l (sp),a0
   158a8:	|  |         movea.l 28(a0),a0
   158ac:	|  |         move.l 4(a0),d0
   158b0:	|  |         cmp.l 8(sp),d0
   158b4:	|  |     ,-- bne.s 158ba <getRegionForObject+0x1e>
			return thisRegion;
   158b6:	|  |     |   move.l (sp),d0
   158b8:	|  |  ,--|-- bra.s 158c6 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   158ba:	|  |  |  '-> movea.l (sp),a0
   158bc:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   158c0:	|  '--|----> tst.l (sp)
   158c2:	'-----|----- bne.s 158a6 <getRegionForObject+0xa>
	}

	return NULL;
   158c4:	      |      moveq #0,d0
}
   158c6:	      '----> addq.l #4,sp
   158c8:	             rts

000158ca <killAllRegions>:

void killAllRegions () {
   158ca:	       subq.l #8,sp
   158cc:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   158ce:	   ,-- bra.s 15910 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   158d0:	,--|-> move.l 1ca54 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   158d8:	|  |   movea.l 1ca54 <allScreenRegions>,a0
   158de:	|  |   move.l 32(a0),d0
   158e2:	|  |   move.l d0,1ca54 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   158e8:	|  |   movea.l 8(sp),a0
   158ec:	|  |   move.l 28(a0),d0
   158f0:	|  |   move.l d0,-(sp)
   158f2:	|  |   jsr d678 <removeObjectType>
   158f8:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   158fa:	|  |   move.l 8(sp),4(sp)
   15900:	|  |   move.l 1c948 <SysBase>,d0
   15906:	|  |   movea.l d0,a6
   15908:	|  |   movea.l 4(sp),a1
   1590c:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15910:	|  '-> move.l 1ca54 <allScreenRegions>,d0
   15916:	'----- bne.s 158d0 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15918:	       clr.l 1ca58 <overRegion>
}
   1591e:	       nop
   15920:	       movea.l (sp)+,a6
   15922:	       addq.l #8,sp
   15924:	       rts

00015926 <loadRegions>:

void loadRegions (BPTR fp) {
   15926:	       lea -24(sp),sp
   1592a:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1592c:	       move.l 32(sp),-(sp)
   15930:	       jsr 6bc <get2bytes>
   15936:	       addq.l #4,sp
   15938:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1593c:	       move.l #117332,20(sp)

	while (numRegions --) {
   15944:	   ,-- bra.w 15a22 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15948:	,--|-> moveq #36,d0
   1594a:	|  |   move.l d0,16(sp)
   1594e:	|  |   clr.l 12(sp)
   15952:	|  |   move.l 1c948 <SysBase>,d0
   15958:	|  |   movea.l d0,a6
   1595a:	|  |   move.l 16(sp),d0
   1595e:	|  |   move.l 12(sp),d1
   15962:	|  |   jsr -684(a6)
   15966:	|  |   move.l d0,8(sp)
   1596a:	|  |   move.l 8(sp),d0
   1596e:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15972:	|  |   movea.l 20(sp),a0
   15976:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   1597a:	|  |   moveq #32,d1
   1597c:	|  |   add.l 4(sp),d1
   15980:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15984:	|  |   move.l 32(sp),-(sp)
   15988:	|  |   jsr 6bc <get2bytes>
   1598e:	|  |   addq.l #4,sp
   15990:	|  |   movea.l 4(sp),a0
   15994:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15996:	|  |   move.l 32(sp),-(sp)
   1599a:	|  |   jsr 6bc <get2bytes>
   159a0:	|  |   addq.l #4,sp
   159a2:	|  |   movea.l 4(sp),a0
   159a6:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   159aa:	|  |   move.l 32(sp),-(sp)
   159ae:	|  |   jsr 6bc <get2bytes>
   159b4:	|  |   addq.l #4,sp
   159b6:	|  |   movea.l 4(sp),a0
   159ba:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   159be:	|  |   move.l 32(sp),-(sp)
   159c2:	|  |   jsr 6bc <get2bytes>
   159c8:	|  |   addq.l #4,sp
   159ca:	|  |   movea.l 4(sp),a0
   159ce:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   159d2:	|  |   move.l 32(sp),-(sp)
   159d6:	|  |   jsr 6bc <get2bytes>
   159dc:	|  |   addq.l #4,sp
   159de:	|  |   movea.l 4(sp),a0
   159e2:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   159e6:	|  |   move.l 32(sp),-(sp)
   159ea:	|  |   jsr 6bc <get2bytes>
   159f0:	|  |   addq.l #4,sp
   159f2:	|  |   movea.l 4(sp),a0
   159f6:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   159fa:	|  |   move.l 32(sp),-(sp)
   159fe:	|  |   jsr 6bc <get2bytes>
   15a04:	|  |   addq.l #4,sp
   15a06:	|  |   movea.l 4(sp),a0
   15a0a:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15a0e:	|  |   move.l 32(sp),-(sp)
   15a12:	|  |   jsr d36e <loadObjectRef>
   15a18:	|  |   addq.l #4,sp
   15a1a:	|  |   movea.l 4(sp),a0
   15a1e:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15a22:	|  '-> move.l 24(sp),d0
   15a26:	|      move.l d0,d1
   15a28:	|      subq.l #1,d1
   15a2a:	|      move.l d1,24(sp)
   15a2e:	|      tst.l d0
   15a30:	'----- bne.w 15948 <loadRegions+0x22>
	}
	* pointy = NULL;
   15a34:	       movea.l 20(sp),a0
   15a38:	       clr.l (a0)
}
   15a3a:	       nop
   15a3c:	       movea.l (sp)+,a6
   15a3e:	       lea 24(sp),sp
   15a42:	       rts

00015a44 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15a44:	             lea -12(sp),sp
   15a48:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15a4a:	             move.l #117332,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15a52:	   ,-------- bra.s 15acc <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15a54:	,--|-------> movea.l 12(sp),a0
   15a58:	|  |         movea.l (a0),a0
   15a5a:	|  |         movea.l 28(a0),a0
   15a5e:	|  |         move.l 4(a0),d0
   15a62:	|  |         cmp.l 20(sp),d0
   15a66:	|  |  ,----- bne.s 15abe <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15a68:	|  |  |      movea.l 12(sp),a0
   15a6c:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15a70:	|  |  |      movea.l 8(sp),a0
   15a74:	|  |  |      move.l 32(a0),d0
   15a78:	|  |  |      movea.l 12(sp),a0
   15a7c:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15a7e:	|  |  |      movea.l 8(sp),a0
   15a82:	|  |  |      move.l 28(a0),d0
   15a86:	|  |  |      move.l d0,-(sp)
   15a88:	|  |  |      jsr d678 <removeObjectType>
   15a8e:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15a90:	|  |  |      move.l 1ca58 <overRegion>,d0
   15a96:	|  |  |      cmp.l 8(sp),d0
   15a9a:	|  |  |  ,-- bne.s 15aa2 <removeScreenRegion+0x5e>
   15a9c:	|  |  |  |   clr.l 1ca58 <overRegion>
            FreeVec(killMe);
   15aa2:	|  |  |  '-> move.l 8(sp),4(sp)
   15aa8:	|  |  |      move.l 1c948 <SysBase>,d0
   15aae:	|  |  |      movea.l d0,a6
   15ab0:	|  |  |      movea.l 4(sp),a1
   15ab4:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15ab8:	|  |  |      clr.l 8(sp)
   15abc:	|  +--|----- bra.s 15acc <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15abe:	|  |  '----> movea.l 12(sp),a0
   15ac2:	|  |         move.l (a0),d0
   15ac4:	|  |         moveq #32,d1
   15ac6:	|  |         add.l d0,d1
   15ac8:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15acc:	|  '-------> movea.l 12(sp),a0
   15ad0:	|            move.l (a0),d0
   15ad2:	'----------- bne.s 15a54 <removeScreenRegion+0x10>
        }
    }
}
   15ad4:	             nop
   15ad6:	             nop
   15ad8:	             movea.l (sp)+,a6
   15ada:	             lea 12(sp),sp
   15ade:	             rts

00015ae0 <saveRegions>:

void saveRegions (BPTR fp) {
   15ae0:	       subq.l #8,sp
	int numRegions = 0;
   15ae2:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15ae6:	       move.l 1ca54 <allScreenRegions>,(sp)
	while (thisRegion) {
   15aec:	   ,-- bra.s 15af8 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15aee:	,--|-> movea.l (sp),a0
   15af0:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15af4:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15af8:	|  '-> tst.l (sp)
   15afa:	'----- bne.s 15aee <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15afc:	       move.l 12(sp),-(sp)
   15b00:	       move.l 8(sp),-(sp)
   15b04:	       jsr 8d0 <put2bytes>
   15b0a:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15b0c:	       move.l 1ca54 <allScreenRegions>,(sp)
	while (thisRegion) {
   15b12:	,----- bra.w 15bba <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15b16:	|  ,-> movea.l (sp),a0
   15b18:	|  |   move.l (a0),d0
   15b1a:	|  |   move.l 12(sp),-(sp)
   15b1e:	|  |   move.l d0,-(sp)
   15b20:	|  |   jsr 8d0 <put2bytes>
   15b26:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15b28:	|  |   movea.l (sp),a0
   15b2a:	|  |   move.l 4(a0),d0
   15b2e:	|  |   move.l 12(sp),-(sp)
   15b32:	|  |   move.l d0,-(sp)
   15b34:	|  |   jsr 8d0 <put2bytes>
   15b3a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15b3c:	|  |   movea.l (sp),a0
   15b3e:	|  |   move.l 8(a0),d0
   15b42:	|  |   move.l 12(sp),-(sp)
   15b46:	|  |   move.l d0,-(sp)
   15b48:	|  |   jsr 8d0 <put2bytes>
   15b4e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15b50:	|  |   movea.l (sp),a0
   15b52:	|  |   move.l 12(a0),d0
   15b56:	|  |   move.l 12(sp),-(sp)
   15b5a:	|  |   move.l d0,-(sp)
   15b5c:	|  |   jsr 8d0 <put2bytes>
   15b62:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15b64:	|  |   movea.l (sp),a0
   15b66:	|  |   move.l 16(a0),d0
   15b6a:	|  |   move.l 12(sp),-(sp)
   15b6e:	|  |   move.l d0,-(sp)
   15b70:	|  |   jsr 8d0 <put2bytes>
   15b76:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15b78:	|  |   movea.l (sp),a0
   15b7a:	|  |   move.l 20(a0),d0
   15b7e:	|  |   move.l 12(sp),-(sp)
   15b82:	|  |   move.l d0,-(sp)
   15b84:	|  |   jsr 8d0 <put2bytes>
   15b8a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15b8c:	|  |   movea.l (sp),a0
   15b8e:	|  |   move.l 24(a0),d0
   15b92:	|  |   move.l 12(sp),-(sp)
   15b96:	|  |   move.l d0,-(sp)
   15b98:	|  |   jsr 8d0 <put2bytes>
   15b9e:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15ba0:	|  |   movea.l (sp),a0
   15ba2:	|  |   move.l 28(a0),d0
   15ba6:	|  |   move.l 12(sp),-(sp)
   15baa:	|  |   move.l d0,-(sp)
   15bac:	|  |   jsr d718 <saveObjectRef>
   15bb2:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15bb4:	|  |   movea.l (sp),a0
   15bb6:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15bba:	'--|-> tst.l (sp)
   15bbc:	   '-- bne.w 15b16 <saveRegions+0x36>
	}
}
   15bc0:	       nop
   15bc2:	       nop
   15bc4:	       addq.l #8,sp
   15bc6:	       rts

00015bc8 <showBoxes>:

void showBoxes () {
   15bc8:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15bca:	       move.l 1ca54 <allScreenRegions>,(sp)

	while (huntRegion) {
   15bd0:	,----- bra.w 15c6c <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15bd4:	|  ,-> movea.l (sp),a0
   15bd6:	|  |   move.l 12(a0),d0
   15bda:	|  |   movea.l d0,a1
   15bdc:	|  |   movea.l (sp),a0
   15bde:	|  |   move.l 4(a0),d0
   15be2:	|  |   move.l d0,d1
   15be4:	|  |   movea.l (sp),a0
   15be6:	|  |   move.l (a0),d0
   15be8:	|  |   move.l a1,-(sp)
   15bea:	|  |   move.l d1,-(sp)
   15bec:	|  |   move.l d0,-(sp)
   15bee:	|  |   jsr cffc <drawVerticalLine>
   15bf4:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15bf8:	|  |   movea.l (sp),a0
   15bfa:	|  |   move.l 12(a0),d0
   15bfe:	|  |   movea.l d0,a1
   15c00:	|  |   movea.l (sp),a0
   15c02:	|  |   move.l 4(a0),d0
   15c06:	|  |   move.l d0,d1
   15c08:	|  |   movea.l (sp),a0
   15c0a:	|  |   move.l 8(a0),d0
   15c0e:	|  |   move.l a1,-(sp)
   15c10:	|  |   move.l d1,-(sp)
   15c12:	|  |   move.l d0,-(sp)
   15c14:	|  |   jsr cffc <drawVerticalLine>
   15c1a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15c1e:	|  |   movea.l (sp),a0
   15c20:	|  |   move.l 8(a0),d0
   15c24:	|  |   movea.l d0,a1
   15c26:	|  |   movea.l (sp),a0
   15c28:	|  |   move.l 4(a0),d0
   15c2c:	|  |   move.l d0,d1
   15c2e:	|  |   movea.l (sp),a0
   15c30:	|  |   move.l (a0),d0
   15c32:	|  |   move.l a1,-(sp)
   15c34:	|  |   move.l d1,-(sp)
   15c36:	|  |   move.l d0,-(sp)
   15c38:	|  |   jsr cfd6 <drawHorizontalLine>
   15c3e:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15c42:	|  |   movea.l (sp),a0
   15c44:	|  |   move.l 8(a0),d0
   15c48:	|  |   movea.l d0,a1
   15c4a:	|  |   movea.l (sp),a0
   15c4c:	|  |   move.l 12(a0),d0
   15c50:	|  |   move.l d0,d1
   15c52:	|  |   movea.l (sp),a0
   15c54:	|  |   move.l (a0),d0
   15c56:	|  |   move.l a1,-(sp)
   15c58:	|  |   move.l d1,-(sp)
   15c5a:	|  |   move.l d0,-(sp)
   15c5c:	|  |   jsr cfd6 <drawHorizontalLine>
   15c62:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15c66:	|  |   movea.l (sp),a0
   15c68:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15c6c:	'--|-> tst.l (sp)
   15c6e:	   '-- bne.w 15bd4 <showBoxes+0xc>
	}
   15c72:	       nop
   15c74:	       nop
   15c76:	       addq.l #4,sp
   15c78:	       rts

00015c7a <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15c7a:	       lea -88(sp),sp
   15c7e:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15c80:	       move.l 1c948 <SysBase>,d0
   15c86:	       movea.l d0,a6
   15c88:	       jsr -666(a6)
   15c8c:	       move.l d0,88(sp)
   15c90:	       move.l 88(sp),d0
   15c94:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15c98:	       move.l 84(sp),80(sp)
   15c9e:	       moveq #40,d0
   15ca0:	       move.l d0,76(sp)
   15ca4:	       move.l 1c948 <SysBase>,d0
   15caa:	       movea.l d0,a6
   15cac:	       movea.l 80(sp),a0
   15cb0:	       move.l 76(sp),d0
   15cb4:	       jsr -654(a6)
   15cb8:	       move.l d0,72(sp)
   15cbc:	       move.l 72(sp),d0
   15cc0:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15cc4:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15cca:	       move.l #106537,60(sp)
   15cd2:	       clr.l 56(sp)
   15cd6:	       move.l 64(sp),52(sp)
   15cdc:	       clr.l 48(sp)
   15ce0:	       move.l 1c948 <SysBase>,d0
   15ce6:	       movea.l d0,a6
   15ce8:	       movea.l 60(sp),a0
   15cec:	       move.l 56(sp),d0
   15cf0:	       movea.l 52(sp),a1
   15cf4:	       move.l 48(sp),d1
   15cf8:	       jsr -444(a6)
   15cfc:	       move.b d0,47(sp)
   15d00:	       move.b 47(sp),d0
   15d04:	   ,-- beq.s 15d1a <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15d06:	   |   pea 1a036 <talk.c.490538ff+0x717>
   15d0c:	   |   jsr 170ba <KPrintF>
   15d12:	   |   addq.l #4,sp
        return 0;
   15d14:	   |   moveq #0,d0
   15d16:	,--|-- bra.w 15dd4 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15d1a:	|  '-> movea.l 64(sp),a0
   15d1e:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15d24:	|      lea 92(sp),a0
   15d28:	|      lea -86(a0),a0
   15d2c:	|      move.l a0,38(sp)
   15d30:	|      movea.l 42(sp),a6
   15d34:	|      movea.l 38(sp),a0
   15d38:	|      jsr -60(a6)
   15d3c:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15d40:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15d46:	|      move.l #1103515245,-(sp)
   15d4c:	|      move.l 34(sp),-(sp)
   15d50:	|      jsr 17a46 <__mulsi3>
   15d56:	|      addq.l #8,sp
   15d58:	|      addi.l #12345,d0
   15d5e:	|      move.l d0,d1
   15d60:	|      bclr #31,d1
   15d64:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15d68:	|      move.l 30(sp),d0
   15d6c:	|      pea 64 <_start+0x64>
   15d70:	|      move.l d0,-(sp)
   15d72:	|      jsr 17b20 <__umodsi3>
   15d78:	|      addq.l #8,sp
   15d7a:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15d7e:	|      move.l 26(sp),-(sp)
   15d82:	|      pea 1a053 <talk.c.490538ff+0x734>
   15d88:	|      jsr 170ba <KPrintF>
   15d8e:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15d90:	|      move.l 64(sp),22(sp)
   15d96:	|      move.l 1c948 <SysBase>,d0
   15d9c:	|      movea.l d0,a6
   15d9e:	|      movea.l 22(sp),a1
   15da2:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15da6:	|      move.l 64(sp),18(sp)
   15dac:	|      move.l 1c948 <SysBase>,d0
   15db2:	|      movea.l d0,a6
   15db4:	|      movea.l 18(sp),a0
   15db8:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15dbc:	|      move.l 84(sp),14(sp)
   15dc2:	|      move.l 1c948 <SysBase>,d0
   15dc8:	|      movea.l d0,a6
   15dca:	|      movea.l 14(sp),a0
   15dce:	|      jsr -672(a6)
    return 0;
   15dd2:	|      moveq #0,d0
   15dd4:	'----> movea.l (sp)+,a6
   15dd6:	       lea 88(sp),sp
   15dda:	       rts

00015ddc <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15ddc:	             lea -20(sp),sp
   15de0:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15de2:	             move.l 1ca5c <allLoadedBanks>,20(sp)
	while (returnMe) {
   15dea:	      ,----- bra.s 15e1c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15dec:	   ,--|----> movea.l 20(sp),a0
   15df0:	   |  |      move.l (a0),d0
   15df2:	   |  |      cmp.l 28(sp),d0
   15df6:	   |  |  ,-- bne.s 15e12 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15df8:	   |  |  |   movea.l 20(sp),a0
   15dfc:	   |  |  |   move.l 4(a0),d0
   15e00:	   |  |  |   addq.l #1,d0
   15e02:	   |  |  |   movea.l 20(sp),a0
   15e06:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15e0a:	   |  |  |   move.l 20(sp),d0
   15e0e:	,--|--|--|-- bra.w 15eb0 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15e12:	|  |  |  '-> movea.l 20(sp),a0
   15e16:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15e1c:	|  |  '----> tst.l 20(sp)
   15e20:	|  '-------- bne.s 15dec <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15e22:	|            moveq #26,d0
   15e24:	|            move.l d0,16(sp)
   15e28:	|            clr.l 12(sp)
   15e2c:	|            move.l 1c948 <SysBase>,d0
   15e32:	|            movea.l d0,a6
   15e34:	|            move.l 16(sp),d0
   15e38:	|            move.l 12(sp),d1
   15e3c:	|            jsr -684(a6)
   15e40:	|            move.l d0,8(sp)
   15e44:	|            move.l 8(sp),d0
   15e48:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15e4c:	|     ,----- beq.s 15eae <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15e4e:	|     |      movea.l 20(sp),a0
   15e52:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   15e56:	|     |      move.l 20(sp),d0
   15e5a:	|     |      addq.l #8,d0
   15e5c:	|     |      move.l d0,-(sp)
   15e5e:	|     |      move.l 32(sp),-(sp)
   15e62:	|     |      jsr 8830 <loadSpriteBank>
   15e68:	|     |      addq.l #8,sp
   15e6a:	|     |      tst.w d0
   15e6c:	|     |  ,-- beq.s 15e94 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15e6e:	|     |  |   movea.l 20(sp),a0
   15e72:	|     |  |   moveq #1,d0
   15e74:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15e78:	|     |  |   move.l 1ca5c <allLoadedBanks>,d0
   15e7e:	|     |  |   movea.l 20(sp),a0
   15e82:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15e86:	|     |  |   move.l 20(sp),1ca5c <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15e8e:	|     |  |   move.l 20(sp),d0
   15e92:	+-----|--|-- bra.s 15eb0 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15e94:	|     |  '-> move.l 20(sp),4(sp)
   15e9a:	|     |      move.l 1c948 <SysBase>,d0
   15ea0:	|     |      movea.l d0,a6
   15ea2:	|     |      movea.l 4(sp),a1
   15ea6:	|     |      jsr -690(a6)
			return NULL;
   15eaa:	|     |      moveq #0,d0
   15eac:	+-----|----- bra.s 15eb0 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15eae:	|     '----> moveq #0,d0
}
   15eb0:	'----------> movea.l (sp)+,a6
   15eb2:	             lea 20(sp),sp
   15eb6:	             rts

00015eb8 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15eb8:	       lea -60(sp),sp
   15ebc:	       move.l d3,-(sp)
   15ebe:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15ec0:	       move.l 88(sp),d0
   15ec4:	       sub.l 80(sp),d0
   15ec8:	       move.l d0,-(sp)
   15eca:	       jsr 174ac <__floatsidf>
   15ed0:	       addq.l #4,sp
   15ed2:	       move.l d0,32(sp)
   15ed6:	       move.l d1,36(sp)
   15eda:	       move.l 32(sp),60(sp)
   15ee0:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15ee6:	       move.l 92(sp),d0
   15eea:	       sub.l 84(sp),d0
   15eee:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15ef2:	       move.l 96(sp),d0
   15ef6:	       sub.l 80(sp),d0
   15efa:	       move.l d0,-(sp)
   15efc:	       jsr 174ac <__floatsidf>
   15f02:	       addq.l #4,sp
   15f04:	       move.l 64(sp),-(sp)
   15f08:	       move.l 64(sp),-(sp)
   15f0c:	       move.l d1,-(sp)
   15f0e:	       move.l d0,-(sp)
   15f10:	       jsr 1753c <__muldf3>
   15f16:	       lea 16(sp),sp
   15f1a:	       move.l d0,d2
   15f1c:	       move.l d1,d3
   15f1e:	       move.l 100(sp),d0
   15f22:	       sub.l 84(sp),d0
   15f26:	       move.l 56(sp),-(sp)
   15f2a:	       move.l d0,-(sp)
   15f2c:	       jsr 17a46 <__mulsi3>
   15f32:	       addq.l #8,sp
   15f34:	       move.l d0,-(sp)
   15f36:	       jsr 174ac <__floatsidf>
   15f3c:	       addq.l #4,sp
   15f3e:	       move.l d1,-(sp)
   15f40:	       move.l d0,-(sp)
   15f42:	       move.l d3,-(sp)
   15f44:	       move.l d2,-(sp)
   15f46:	       jsr 172de <__adddf3>
   15f4c:	       lea 16(sp),sp
   15f50:	       move.l d0,24(sp)
   15f54:	       move.l d1,28(sp)
   15f58:	       move.l 24(sp),48(sp)
   15f5e:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15f64:	       move.l 64(sp),-(sp)
   15f68:	       move.l 64(sp),-(sp)
   15f6c:	       move.l 72(sp),-(sp)
   15f70:	       move.l 72(sp),-(sp)
   15f74:	       jsr 1753c <__muldf3>
   15f7a:	       lea 16(sp),sp
   15f7e:	       move.l d0,d2
   15f80:	       move.l d1,d3
   15f82:	       move.l 56(sp),-(sp)
   15f86:	       move.l 60(sp),-(sp)
   15f8a:	       jsr 17a46 <__mulsi3>
   15f90:	       addq.l #8,sp
   15f92:	       move.l d0,-(sp)
   15f94:	       jsr 174ac <__floatsidf>
   15f9a:	       addq.l #4,sp
   15f9c:	       move.l d1,-(sp)
   15f9e:	       move.l d0,-(sp)
   15fa0:	       move.l d3,-(sp)
   15fa2:	       move.l d2,-(sp)
   15fa4:	       jsr 172de <__adddf3>
   15faa:	       lea 16(sp),sp
   15fae:	       move.l d1,-(sp)
   15fb0:	       move.l d0,-(sp)
   15fb2:	       move.l 60(sp),-(sp)
   15fb6:	       move.l 60(sp),-(sp)
   15fba:	       jsr 17340 <__divdf3>
   15fc0:	       lea 16(sp),sp
   15fc4:	       move.l d0,16(sp)
   15fc8:	       move.l d1,20(sp)
   15fcc:	       move.l 16(sp),48(sp)
   15fd2:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   15fd8:	       clr.l -(sp)
   15fda:	       clr.l -(sp)
   15fdc:	       move.l 60(sp),-(sp)
   15fe0:	       move.l 60(sp),-(sp)
   15fe4:	       jsr 176c4 <__ltdf2>
   15fea:	       lea 16(sp),sp
   15fee:	       tst.l d0
   15ff0:	   ,-- bge.s 16006 <closestPointOnLine+0x14e>
		*closestX = x1;
   15ff2:	   |   movea.l 72(sp),a0
   15ff6:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   15ffa:	   |   movea.l 76(sp),a0
   15ffe:	   |   move.l 84(sp),(a0)
   16002:	,--|-- bra.w 160d4 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   16006:	|  '-> clr.l -(sp)
   16008:	|      move.l #1072693248,-(sp)
   1600e:	|      move.l 60(sp),-(sp)
   16012:	|      move.l 60(sp),-(sp)
   16016:	|      jsr 1760a <__gtdf2>
   1601c:	|      lea 16(sp),sp
   16020:	|      tst.l d0
   16022:	|  ,-- ble.s 16038 <closestPointOnLine+0x180>
		*closestX = x2;
   16024:	|  |   movea.l 72(sp),a0
   16028:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1602c:	|  |   movea.l 76(sp),a0
   16030:	|  |   move.l 92(sp),(a0)
   16034:	+--|-- bra.w 160d4 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16038:	|  '-> move.l 64(sp),-(sp)
   1603c:	|      move.l 64(sp),-(sp)
   16040:	|      move.l 60(sp),-(sp)
   16044:	|      move.l 60(sp),-(sp)
   16048:	|      jsr 1753c <__muldf3>
   1604e:	|      lea 16(sp),sp
   16052:	|      move.l d0,8(sp)
   16056:	|      move.l d1,12(sp)
   1605a:	|      move.l 8(sp),40(sp)
   16060:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16066:	|      move.l 44(sp),-(sp)
   1606a:	|      move.l 44(sp),-(sp)
   1606e:	|      jsr 1744e <__fixdfsi>
   16074:	|      addq.l #8,sp
   16076:	|      movea.l 72(sp),a0
   1607a:	|      move.l d0,(a0)
		*closestX += x1;
   1607c:	|      movea.l 72(sp),a0
   16080:	|      move.l (a0),d0
   16082:	|      add.l 80(sp),d0
   16086:	|      movea.l 72(sp),a0
   1608a:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1608c:	|      move.l 56(sp),-(sp)
   16090:	|      jsr 174ac <__floatsidf>
   16096:	|      addq.l #4,sp
   16098:	|      move.l 52(sp),-(sp)
   1609c:	|      move.l 52(sp),-(sp)
   160a0:	|      move.l d1,-(sp)
   160a2:	|      move.l d0,-(sp)
   160a4:	|      jsr 1753c <__muldf3>
   160aa:	|      lea 16(sp),sp
   160ae:	|      move.l d1,-(sp)
   160b0:	|      move.l d0,-(sp)
   160b2:	|      jsr 1744e <__fixdfsi>
   160b8:	|      addq.l #8,sp
   160ba:	|      movea.l 76(sp),a0
   160be:	|      move.l d0,(a0)
		*closestY += y1;
   160c0:	|      movea.l 76(sp),a0
   160c4:	|      move.l (a0),d0
   160c6:	|      add.l 84(sp),d0
   160ca:	|      movea.l 76(sp),a0
   160ce:	|      move.l d0,(a0)
		return TRUE;
   160d0:	|      moveq #1,d0
   160d2:	|  ,-- bra.s 160d6 <closestPointOnLine+0x21e>
	}
	return FALSE;
   160d4:	'--|-> clr.w d0
}
   160d6:	   '-> move.l (sp)+,d2
   160d8:	       move.l (sp)+,d3
   160da:	       lea 60(sp),sp
   160de:	       rts

000160e0 <drawFloor>:

void drawFloor() {
   160e0:	                lea -12(sp),sp
   160e4:	                move.l d3,-(sp)
   160e6:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   160e8:	                clr.l 16(sp)
   160ec:	   ,----------- bra.w 16300 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   160f0:	,--|----------> movea.l 1ca60 <currentFloor>,a0
   160f6:	|  |            move.l 12(a0),d1
   160fa:	|  |            move.l 16(sp),d0
   160fe:	|  |            lsl.l #3,d0
   16100:	|  |            movea.l d1,a0
   16102:	|  |            adda.l d0,a0
   16104:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16108:	|  |            moveq #1,d0
   1610a:	|  |            cmp.l 8(sp),d0
   1610e:	|  |  ,-------- bge.w 162fc <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16112:	|  |  |         moveq #1,d0
   16114:	|  |  |         move.l d0,12(sp)
   16118:	|  |  |     ,-- bra.w 16212 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1611c:	|  |  |  ,--|-> movea.l 1ca60 <currentFloor>,a0
   16122:	|  |  |  |  |   move.l 4(a0),d1
   16126:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   1612c:	|  |  |  |  |   movea.l 12(a0),a0
   16130:	|  |  |  |  |   move.l 16(sp),d0
   16134:	|  |  |  |  |   lsl.l #3,d0
   16136:	|  |  |  |  |   adda.l d0,a0
   16138:	|  |  |  |  |   movea.l 4(a0),a0
   1613c:	|  |  |  |  |   move.l 12(sp),d0
   16140:	|  |  |  |  |   add.l d0,d0
   16142:	|  |  |  |  |   add.l d0,d0
   16144:	|  |  |  |  |   adda.l d0,a0
   16146:	|  |  |  |  |   move.l (a0),d0
   16148:	|  |  |  |  |   lsl.l #3,d0
   1614a:	|  |  |  |  |   movea.l d1,a0
   1614c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1614e:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16152:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16158:	|  |  |  |  |   move.l 4(a0),d1
   1615c:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16162:	|  |  |  |  |   movea.l 12(a0),a0
   16166:	|  |  |  |  |   move.l 16(sp),d0
   1616a:	|  |  |  |  |   lsl.l #3,d0
   1616c:	|  |  |  |  |   adda.l d0,a0
   1616e:	|  |  |  |  |   movea.l 4(a0),a0
   16172:	|  |  |  |  |   move.l 12(sp),d0
   16176:	|  |  |  |  |   add.l d0,d0
   16178:	|  |  |  |  |   add.l d0,d0
   1617a:	|  |  |  |  |   adda.l d0,a0
   1617c:	|  |  |  |  |   move.l (a0),d0
   1617e:	|  |  |  |  |   lsl.l #3,d0
   16180:	|  |  |  |  |   movea.l d1,a0
   16182:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16184:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16186:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   1618c:	|  |  |  |  |   move.l 4(a0),d1
   16190:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16196:	|  |  |  |  |   movea.l 12(a0),a0
   1619a:	|  |  |  |  |   move.l 16(sp),d0
   1619e:	|  |  |  |  |   lsl.l #3,d0
   161a0:	|  |  |  |  |   adda.l d0,a0
   161a2:	|  |  |  |  |   movea.l 4(a0),a0
   161a6:	|  |  |  |  |   move.l 12(sp),d0
   161aa:	|  |  |  |  |   addi.l #1073741823,d0
   161b0:	|  |  |  |  |   add.l d0,d0
   161b2:	|  |  |  |  |   add.l d0,d0
   161b4:	|  |  |  |  |   adda.l d0,a0
   161b6:	|  |  |  |  |   move.l (a0),d0
   161b8:	|  |  |  |  |   lsl.l #3,d0
   161ba:	|  |  |  |  |   movea.l d1,a0
   161bc:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   161be:	|  |  |  |  |   move.l 4(a0),d1
   161c2:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   161c8:	|  |  |  |  |   move.l 4(a0),d3
   161cc:	|  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   161d2:	|  |  |  |  |   movea.l 12(a0),a0
   161d6:	|  |  |  |  |   move.l 16(sp),d0
   161da:	|  |  |  |  |   lsl.l #3,d0
   161dc:	|  |  |  |  |   adda.l d0,a0
   161de:	|  |  |  |  |   movea.l 4(a0),a0
   161e2:	|  |  |  |  |   move.l 12(sp),d0
   161e6:	|  |  |  |  |   addi.l #1073741823,d0
   161ec:	|  |  |  |  |   add.l d0,d0
   161ee:	|  |  |  |  |   add.l d0,d0
   161f0:	|  |  |  |  |   adda.l d0,a0
   161f2:	|  |  |  |  |   move.l (a0),d0
   161f4:	|  |  |  |  |   lsl.l #3,d0
   161f6:	|  |  |  |  |   movea.l d3,a0
   161f8:	|  |  |  |  |   adda.l d0,a0
   161fa:	|  |  |  |  |   move.l (a0),d0
   161fc:	|  |  |  |  |   move.l d2,-(sp)
   161fe:	|  |  |  |  |   move.l a1,-(sp)
   16200:	|  |  |  |  |   move.l d1,-(sp)
   16202:	|  |  |  |  |   move.l d0,-(sp)
   16204:	|  |  |  |  |   jsr 4564 <drawLine>
   1620a:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1620e:	|  |  |  |  |   addq.l #1,12(sp)
   16212:	|  |  |  |  '-> move.l 12(sp),d0
   16216:	|  |  |  |      cmp.l 8(sp),d0
   1621a:	|  |  |  '----- blt.w 1611c <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1621e:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   16224:	|  |  |         move.l 4(a0),d1
   16228:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   1622e:	|  |  |         movea.l 12(a0),a0
   16232:	|  |  |         move.l 16(sp),d0
   16236:	|  |  |         lsl.l #3,d0
   16238:	|  |  |         adda.l d0,a0
   1623a:	|  |  |         movea.l 4(a0),a0
   1623e:	|  |  |         move.l 8(sp),d0
   16242:	|  |  |         addi.l #1073741823,d0
   16248:	|  |  |         add.l d0,d0
   1624a:	|  |  |         add.l d0,d0
   1624c:	|  |  |         adda.l d0,a0
   1624e:	|  |  |         move.l (a0),d0
   16250:	|  |  |         lsl.l #3,d0
   16252:	|  |  |         movea.l d1,a0
   16254:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16256:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1625a:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   16260:	|  |  |         move.l 4(a0),d1
   16264:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   1626a:	|  |  |         movea.l 12(a0),a0
   1626e:	|  |  |         move.l 16(sp),d0
   16272:	|  |  |         lsl.l #3,d0
   16274:	|  |  |         adda.l d0,a0
   16276:	|  |  |         movea.l 4(a0),a0
   1627a:	|  |  |         move.l 8(sp),d0
   1627e:	|  |  |         addi.l #1073741823,d0
   16284:	|  |  |         add.l d0,d0
   16286:	|  |  |         add.l d0,d0
   16288:	|  |  |         adda.l d0,a0
   1628a:	|  |  |         move.l (a0),d0
   1628c:	|  |  |         lsl.l #3,d0
   1628e:	|  |  |         movea.l d1,a0
   16290:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16292:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16294:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   1629a:	|  |  |         move.l 4(a0),d1
   1629e:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   162a4:	|  |  |         movea.l 12(a0),a0
   162a8:	|  |  |         move.l 16(sp),d0
   162ac:	|  |  |         lsl.l #3,d0
   162ae:	|  |  |         adda.l d0,a0
   162b0:	|  |  |         movea.l 4(a0),a0
   162b4:	|  |  |         move.l (a0),d0
   162b6:	|  |  |         lsl.l #3,d0
   162b8:	|  |  |         movea.l d1,a0
   162ba:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   162bc:	|  |  |         move.l 4(a0),d1
   162c0:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   162c6:	|  |  |         move.l 4(a0),d3
   162ca:	|  |  |         movea.l 1ca60 <currentFloor>,a0
   162d0:	|  |  |         movea.l 12(a0),a0
   162d4:	|  |  |         move.l 16(sp),d0
   162d8:	|  |  |         lsl.l #3,d0
   162da:	|  |  |         adda.l d0,a0
   162dc:	|  |  |         movea.l 4(a0),a0
   162e0:	|  |  |         move.l (a0),d0
   162e2:	|  |  |         lsl.l #3,d0
   162e4:	|  |  |         movea.l d3,a0
   162e6:	|  |  |         adda.l d0,a0
   162e8:	|  |  |         move.l (a0),d0
   162ea:	|  |  |         move.l d2,-(sp)
   162ec:	|  |  |         move.l a1,-(sp)
   162ee:	|  |  |         move.l d1,-(sp)
   162f0:	|  |  |         move.l d0,-(sp)
   162f2:	|  |  |         jsr 4564 <drawLine>
   162f8:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   162fc:	|  |  '-------> addq.l #1,16(sp)
   16300:	|  '----------> movea.l 1ca60 <currentFloor>,a0
   16306:	|               move.l 8(a0),d0
   1630a:	|               cmp.l 16(sp),d0
   1630e:	'-------------- bgt.w 160f0 <drawFloor+0x10>
        }
    }
}
   16312:	                nop
   16314:	                nop
   16316:	                move.l (sp)+,d2
   16318:	                move.l (sp)+,d3
   1631a:	                lea 12(sp),sp
   1631e:	                rts

00016320 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16320:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16324:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16328:	                      clr.l 4(sp)
   1632c:	   ,----------------- bra.w 163be <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16330:	,--|----------------> clr.l (sp)
   16332:	|  |     ,----------- bra.s 163ae <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16334:	|  |  ,--|----------> movea.l 16(sp),a0
   16338:	|  |  |  |            move.l 4(a0),d1
   1633c:	|  |  |  |            move.l 4(sp),d0
   16340:	|  |  |  |            add.l d0,d0
   16342:	|  |  |  |            add.l d0,d0
   16344:	|  |  |  |            movea.l d1,a0
   16346:	|  |  |  |            adda.l d0,a0
   16348:	|  |  |  |            move.l (a0),d1
   1634a:	|  |  |  |            movea.l 20(sp),a0
   1634e:	|  |  |  |            movea.l 4(a0),a0
   16352:	|  |  |  |            move.l (sp),d0
   16354:	|  |  |  |            add.l d0,d0
   16356:	|  |  |  |            add.l d0,d0
   16358:	|  |  |  |            adda.l d0,a0
   1635a:	|  |  |  |            move.l (a0),d0
   1635c:	|  |  |  |            cmp.l d1,d0
   1635e:	|  |  |  |  ,-------- bne.s 163ac <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16360:	|  |  |  |  |         move.l 8(sp),d0
   16364:	|  |  |  |  |         move.l d0,d1
   16366:	|  |  |  |  |         addq.l #1,d1
   16368:	|  |  |  |  |         move.l d1,8(sp)
   1636c:	|  |  |  |  |         tst.l d0
   1636e:	|  |  |  |  |     ,-- beq.s 16390 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16370:	|  |  |  |  |     |   movea.l 16(sp),a0
   16374:	|  |  |  |  |     |   move.l 4(a0),d1
   16378:	|  |  |  |  |     |   move.l 4(sp),d0
   1637c:	|  |  |  |  |     |   add.l d0,d0
   1637e:	|  |  |  |  |     |   add.l d0,d0
   16380:	|  |  |  |  |     |   movea.l d1,a0
   16382:	|  |  |  |  |     |   adda.l d0,a0
   16384:	|  |  |  |  |     |   move.l (a0),d0
   16386:	|  |  |  |  |     |   movea.l 28(sp),a0
   1638a:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1638c:	|  |  |  |  |     |   moveq #1,d0
   1638e:	|  |  |  |  |  ,--|-- bra.s 163ce <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16390:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16394:	|  |  |  |  |  |      move.l 4(a0),d1
   16398:	|  |  |  |  |  |      move.l 4(sp),d0
   1639c:	|  |  |  |  |  |      add.l d0,d0
   1639e:	|  |  |  |  |  |      add.l d0,d0
   163a0:	|  |  |  |  |  |      movea.l d1,a0
   163a2:	|  |  |  |  |  |      adda.l d0,a0
   163a4:	|  |  |  |  |  |      move.l (a0),d0
   163a6:	|  |  |  |  |  |      movea.l 24(sp),a0
   163aa:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   163ac:	|  |  |  |  '--|----> addq.l #1,(sp)
   163ae:	|  |  |  '-----|----> movea.l 20(sp),a0
   163b2:	|  |  |        |      move.l (a0),d0
   163b4:	|  |  |        |      cmp.l (sp),d0
   163b6:	|  |  '--------|----- bgt.w 16334 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   163ba:	|  |           |      addq.l #1,4(sp)
   163be:	|  '-----------|----> movea.l 16(sp),a0
   163c2:	|              |      move.l (a0),d0
   163c4:	|              |      cmp.l 4(sp),d0
   163c8:	'--------------|----- bgt.w 16330 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   163cc:	               |      clr.w d0
}
   163ce:	               '----> lea 12(sp),sp
   163d2:	                      rts

000163d4 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   163d4:	movea.l 1ca60 <currentFloor>,a0
   163da:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   163de:	movea.l 1ca60 <currentFloor>,a0
   163e4:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   163e8:	movea.l 1ca60 <currentFloor>,a0
   163ee:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   163f2:	movea.l 1ca60 <currentFloor>,a0
   163f8:	clr.l 16(a0)
}
   163fc:	nop
   163fe:	rts

00016400 <inFloor>:

int inFloor (int x, int y) {
   16400:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16402:	          pea 1a066 <talk.c.490538ff+0x747>
   16408:	          jsr 170ba <KPrintF>
   1640e:	          addq.l #4,sp
	int i, r = -1;
   16410:	          moveq #-1,d0
   16412:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16414:	          clr.l 4(sp)
   16418:	   ,----- bra.s 1644c <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1641a:	,--|----> movea.l 1ca60 <currentFloor>,a0
   16420:	|  |      move.l 12(a0),d1
   16424:	|  |      move.l 4(sp),d0
   16428:	|  |      lsl.l #3,d0
   1642a:	|  |      add.l d1,d0
   1642c:	|  |      move.l 16(sp),-(sp)
   16430:	|  |      move.l 16(sp),-(sp)
   16434:	|  |      move.l d0,-(sp)
   16436:	|  |      jsr 16626 <pointInFloorPolygon>
   1643c:	|  |      lea 12(sp),sp
   16440:	|  |      tst.w d0
   16442:	|  |  ,-- beq.s 16448 <inFloor+0x48>
			r = i;
   16444:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16448:	|  |  '-> addq.l #1,4(sp)
   1644c:	|  '----> movea.l 1ca60 <currentFloor>,a0
   16452:	|         move.l 8(a0),d0
   16456:	|         cmp.l 4(sp),d0
   1645a:	'-------- bgt.s 1641a <inFloor+0x1a>

	KPrintF("infloor finished\n");
   1645c:	          pea 1a077 <talk.c.490538ff+0x758>
   16462:	          jsr 170ba <KPrintF>
   16468:	          addq.l #4,sp
	return r;
   1646a:	          move.l (sp),d0
}
   1646c:	          addq.l #8,sp
   1646e:	          rts

00016470 <initFloor>:

BOOL initFloor () {
   16470:	       lea -12(sp),sp
   16474:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16476:	       moveq #20,d0
   16478:	       move.l d0,12(sp)
   1647c:	       clr.l 8(sp)
   16480:	       move.l 1c948 <SysBase>,d0
   16486:	       movea.l d0,a6
   16488:	       move.l 12(sp),d0
   1648c:	       move.l 8(sp),d1
   16490:	       jsr -684(a6)
   16494:	       move.l d0,4(sp)
   16498:	       move.l 4(sp),d0
   1649c:	       move.l d0,1ca60 <currentFloor>

    if(currentFloor == 0) {
   164a2:	       move.l 1ca60 <currentFloor>,d0
   164a8:	,----- bne.s 164bc <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   164aa:	|      pea 1a089 <talk.c.490538ff+0x76a>
   164b0:	|      jsr 170ba <KPrintF>
   164b6:	|      addq.l #4,sp
        return FALSE;
   164b8:	|      clr.w d0
   164ba:	|  ,-- bra.s 164c4 <initFloor+0x54>
    }

	noFloor ();
   164bc:	'--|-> jsr 163d4 <noFloor>
	return TRUE;
   164c2:	   |   moveq #1,d0
}
   164c4:	   '-> movea.l (sp)+,a6
   164c6:	       lea 12(sp),sp
   164ca:	       rts

000164cc <killFloor>:

void killFloor () {
   164cc:	       lea -24(sp),sp
   164d0:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   164d2:	       clr.l 24(sp)
   164d6:	   ,-- bra.s 16530 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   164d8:	,--|-> movea.l 1ca60 <currentFloor>,a0
   164de:	|  |   move.l 12(a0),d1
   164e2:	|  |   move.l 24(sp),d0
   164e6:	|  |   lsl.l #3,d0
   164e8:	|  |   movea.l d1,a0
   164ea:	|  |   adda.l d0,a0
   164ec:	|  |   move.l 4(a0),8(sp)
   164f2:	|  |   move.l 1c948 <SysBase>,d0
   164f8:	|  |   movea.l d0,a6
   164fa:	|  |   movea.l 8(sp),a1
   164fe:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16502:	|  |   movea.l 1ca60 <currentFloor>,a0
   16508:	|  |   move.l 16(a0),d1
   1650c:	|  |   move.l 24(sp),d0
   16510:	|  |   add.l d0,d0
   16512:	|  |   add.l d0,d0
   16514:	|  |   movea.l d1,a0
   16516:	|  |   adda.l d0,a0
   16518:	|  |   move.l (a0),4(sp)
   1651c:	|  |   move.l 1c948 <SysBase>,d0
   16522:	|  |   movea.l d0,a6
   16524:	|  |   movea.l 4(sp),a1
   16528:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1652c:	|  |   addq.l #1,24(sp)
   16530:	|  '-> movea.l 1ca60 <currentFloor>,a0
   16536:	|      move.l 8(a0),d0
   1653a:	|      cmp.l 24(sp),d0
   1653e:	'----- bgt.s 164d8 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16540:	       movea.l 1ca60 <currentFloor>,a0
   16546:	       move.l 12(a0),20(sp)
   1654c:	       move.l 1c948 <SysBase>,d0
   16552:	       movea.l d0,a6
   16554:	       movea.l 20(sp),a1
   16558:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1655c:	       movea.l 1ca60 <currentFloor>,a0
   16562:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16566:	       movea.l 1ca60 <currentFloor>,a0
   1656c:	       move.l 4(a0),16(sp)
   16572:	       move.l 1c948 <SysBase>,d0
   16578:	       movea.l d0,a6
   1657a:	       movea.l 16(sp),a1
   1657e:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16582:	       movea.l 1ca60 <currentFloor>,a0
   16588:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1658c:	       movea.l 1ca60 <currentFloor>,a0
   16592:	       move.l 16(a0),12(sp)
   16598:	       move.l 1c948 <SysBase>,d0
   1659e:	       movea.l d0,a6
   165a0:	       movea.l 12(sp),a1
   165a4:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   165a8:	       movea.l 1ca60 <currentFloor>,a0
   165ae:	       clr.l 16(a0)
}
   165b2:	       nop
   165b4:	       movea.l (sp)+,a6
   165b6:	       lea 24(sp),sp
   165ba:	       rts

000165bc <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   165bc:	                   lea -12(sp),sp
	int sharedVertices = 0;
   165c0:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   165c4:	                   clr.l 4(sp)
   165c8:	   ,-------------- bra.s 16614 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   165ca:	,--|-------------> clr.l (sp)
   165cc:	|  |     ,-------- bra.s 16608 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   165ce:	|  |  ,--|-------> move.l 20(sp),d1
   165d2:	|  |  |  |         move.l 4(sp),d0
   165d6:	|  |  |  |         add.l d0,d0
   165d8:	|  |  |  |         add.l d0,d0
   165da:	|  |  |  |         movea.l d1,a0
   165dc:	|  |  |  |         adda.l d0,a0
   165de:	|  |  |  |         move.l (a0),d1
   165e0:	|  |  |  |         movea.l 28(sp),a0
   165e4:	|  |  |  |         move.l (sp),d0
   165e6:	|  |  |  |         add.l d0,d0
   165e8:	|  |  |  |         add.l d0,d0
   165ea:	|  |  |  |         adda.l d0,a0
   165ec:	|  |  |  |         move.l (a0),d0
   165ee:	|  |  |  |         cmp.l d1,d0
   165f0:	|  |  |  |     ,-- bne.s 16606 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   165f2:	|  |  |  |     |   move.l 8(sp),d0
   165f6:	|  |  |  |     |   move.l d0,d1
   165f8:	|  |  |  |     |   addq.l #1,d1
   165fa:	|  |  |  |     |   move.l d1,8(sp)
   165fe:	|  |  |  |     |   tst.l d0
   16600:	|  |  |  |     +-- beq.s 16606 <polysShareSide+0x4a>
   16602:	|  |  |  |     |   moveq #1,d0
   16604:	|  |  |  |  ,--|-- bra.s 16620 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16606:	|  |  |  |  |  '-> addq.l #1,(sp)
   16608:	|  |  |  '--|----> move.l 24(sp),d0
   1660c:	|  |  |     |      cmp.l (sp),d0
   1660e:	|  |  '-----|----- bgt.s 165ce <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16610:	|  |        |      addq.l #1,4(sp)
   16614:	|  '--------|----> move.l 16(sp),d0
   16618:	|           |      cmp.l 4(sp),d0
   1661c:	'-----------|----- bgt.s 165ca <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1661e:	            |      clr.w d0
}
   16620:	            '----> lea 12(sp),sp
   16624:	                   rts

00016626 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16626:	             lea -28(sp),sp
   1662a:	             move.l d3,-(sp)
   1662c:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1662e:	             clr.l 32(sp)
   16632:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16636:	             movea.l 40(sp),a0
   1663a:	             move.l (a0),d0
   1663c:	             move.l d0,d1
   1663e:	             subq.l #1,d1
   16640:	             move.l d1,28(sp)
   16644:	   ,-------- bra.w 1683e <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16648:	,--|-------> movea.l 1ca60 <currentFloor>,a0
   1664e:	|  |         move.l 4(a0),d1
   16652:	|  |         movea.l 40(sp),a0
   16656:	|  |         movea.l 4(a0),a0
   1665a:	|  |         move.l 32(sp),d0
   1665e:	|  |         add.l d0,d0
   16660:	|  |         add.l d0,d0
   16662:	|  |         adda.l d0,a0
   16664:	|  |         move.l (a0),d0
   16666:	|  |         lsl.l #3,d0
   16668:	|  |         movea.l d1,a0
   1666a:	|  |         adda.l d0,a0
   1666c:	|  |         move.l (a0),d0
   1666e:	|  |         move.l d0,-(sp)
   16670:	|  |         jsr 174ec <__floatsisf>
   16676:	|  |         addq.l #4,sp
   16678:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1667c:	|  |         movea.l 1ca60 <currentFloor>,a0
   16682:	|  |         move.l 4(a0),d1
   16686:	|  |         movea.l 40(sp),a0
   1668a:	|  |         movea.l 4(a0),a0
   1668e:	|  |         move.l 32(sp),d0
   16692:	|  |         add.l d0,d0
   16694:	|  |         add.l d0,d0
   16696:	|  |         adda.l d0,a0
   16698:	|  |         move.l (a0),d0
   1669a:	|  |         lsl.l #3,d0
   1669c:	|  |         movea.l d1,a0
   1669e:	|  |         adda.l d0,a0
   166a0:	|  |         move.l 4(a0),d0
   166a4:	|  |         move.l d0,-(sp)
   166a6:	|  |         jsr 174ec <__floatsisf>
   166ac:	|  |         addq.l #4,sp
   166ae:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   166b2:	|  |         movea.l 1ca60 <currentFloor>,a0
   166b8:	|  |         move.l 4(a0),d1
   166bc:	|  |         movea.l 40(sp),a0
   166c0:	|  |         movea.l 4(a0),a0
   166c4:	|  |         move.l 28(sp),d0
   166c8:	|  |         add.l d0,d0
   166ca:	|  |         add.l d0,d0
   166cc:	|  |         adda.l d0,a0
   166ce:	|  |         move.l (a0),d0
   166d0:	|  |         lsl.l #3,d0
   166d2:	|  |         movea.l d1,a0
   166d4:	|  |         adda.l d0,a0
   166d6:	|  |         move.l (a0),d0
   166d8:	|  |         move.l d0,-(sp)
   166da:	|  |         jsr 174ec <__floatsisf>
   166e0:	|  |         addq.l #4,sp
   166e2:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   166e6:	|  |         movea.l 1ca60 <currentFloor>,a0
   166ec:	|  |         move.l 4(a0),d1
   166f0:	|  |         movea.l 40(sp),a0
   166f4:	|  |         movea.l 4(a0),a0
   166f8:	|  |         move.l 28(sp),d0
   166fc:	|  |         add.l d0,d0
   166fe:	|  |         add.l d0,d0
   16700:	|  |         adda.l d0,a0
   16702:	|  |         move.l (a0),d0
   16704:	|  |         lsl.l #3,d0
   16706:	|  |         movea.l d1,a0
   16708:	|  |         adda.l d0,a0
   1670a:	|  |         move.l 4(a0),d0
   1670e:	|  |         move.l d0,-(sp)
   16710:	|  |         jsr 174ec <__floatsisf>
   16716:	|  |         addq.l #4,sp
   16718:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1671c:	|  |         move.l 48(sp),-(sp)
   16720:	|  |         jsr 174ec <__floatsisf>
   16726:	|  |         addq.l #4,sp
   16728:	|  |         move.l d0,-(sp)
   1672a:	|  |         move.l 20(sp),-(sp)
   1672e:	|  |         jsr 1768e <__lesf2>
   16734:	|  |         addq.l #8,sp
   16736:	|  |         tst.l d0
   16738:	|  |     ,-- bgt.s 16758 <pointInFloorPolygon+0x132>
   1673a:	|  |     |   move.l 48(sp),-(sp)
   1673e:	|  |     |   jsr 174ec <__floatsisf>
   16744:	|  |     |   addq.l #4,sp
   16746:	|  |     |   move.l d0,-(sp)
   16748:	|  |     |   move.l 12(sp),-(sp)
   1674c:	|  |     |   jsr 17658 <__gtsf2>
   16752:	|  |     |   addq.l #8,sp
   16754:	|  |     |   tst.l d0
   16756:	|  |  ,--|-- bgt.s 16798 <pointInFloorPolygon+0x172>
   16758:	|  |  |  '-> move.l 48(sp),-(sp)
   1675c:	|  |  |      jsr 174ec <__floatsisf>
   16762:	|  |  |      addq.l #4,sp
   16764:	|  |  |      move.l d0,-(sp)
   16766:	|  |  |      move.l 12(sp),-(sp)
   1676a:	|  |  |      jsr 1768e <__lesf2>
   16770:	|  |  |      addq.l #8,sp
   16772:	|  |  |      tst.l d0
   16774:	|  |  |  ,-- bgt.w 1682e <pointInFloorPolygon+0x208>
   16778:	|  |  |  |   move.l 48(sp),-(sp)
   1677c:	|  |  |  |   jsr 174ec <__floatsisf>
   16782:	|  |  |  |   addq.l #4,sp
   16784:	|  |  |  |   move.l d0,-(sp)
   16786:	|  |  |  |   move.l 20(sp),-(sp)
   1678a:	|  |  |  |   jsr 17658 <__gtsf2>
   16790:	|  |  |  |   addq.l #8,sp
   16792:	|  |  |  |   tst.l d0
   16794:	|  |  |  +-- ble.w 1682e <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16798:	|  |  '--|-> move.l 44(sp),-(sp)
   1679c:	|  |     |   jsr 174ec <__floatsisf>
   167a2:	|  |     |   addq.l #4,sp
   167a4:	|  |     |   move.l d0,d3
   167a6:	|  |     |   move.l 20(sp),-(sp)
   167aa:	|  |     |   move.l 16(sp),-(sp)
   167ae:	|  |     |   jsr 177e0 <__subsf3>
   167b4:	|  |     |   addq.l #8,sp
   167b6:	|  |     |   move.l d0,d2
   167b8:	|  |     |   move.l 48(sp),-(sp)
   167bc:	|  |     |   jsr 174ec <__floatsisf>
   167c2:	|  |     |   addq.l #4,sp
   167c4:	|  |     |   move.l 16(sp),-(sp)
   167c8:	|  |     |   move.l d0,-(sp)
   167ca:	|  |     |   jsr 177e0 <__subsf3>
   167d0:	|  |     |   addq.l #8,sp
   167d2:	|  |     |   move.l d0,-(sp)
   167d4:	|  |     |   move.l d2,-(sp)
   167d6:	|  |     |   jsr 1759e <__mulsf3>
   167dc:	|  |     |   addq.l #8,sp
   167de:	|  |     |   move.l d0,d2
   167e0:	|  |     |   move.l 16(sp),-(sp)
   167e4:	|  |     |   move.l 12(sp),-(sp)
   167e8:	|  |     |   jsr 177e0 <__subsf3>
   167ee:	|  |     |   addq.l #8,sp
   167f0:	|  |     |   move.l d0,-(sp)
   167f2:	|  |     |   move.l d2,-(sp)
   167f4:	|  |     |   jsr 173a2 <__divsf3>
   167fa:	|  |     |   addq.l #8,sp
   167fc:	|  |     |   move.l 20(sp),-(sp)
   16800:	|  |     |   move.l d0,-(sp)
   16802:	|  |     |   jsr 172a8 <__addsf3>
   16808:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1680a:	|  |     |   move.l d0,-(sp)
   1680c:	|  |     |   move.l d3,-(sp)
   1680e:	|  |     |   jsr 17712 <__ltsf2>
   16814:	|  |     |   addq.l #8,sp
   16816:	|  |     |   tst.l d0
   16818:	|  |     +-- bge.s 1682e <pointInFloorPolygon+0x208>

			c = !c;
   1681a:	|  |     |   tst.l 24(sp)
   1681e:	|  |     |   seq d0
   16820:	|  |     |   neg.b d0
   16822:	|  |     |   move.b d0,d0
   16824:	|  |     |   andi.l #255,d0
   1682a:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1682e:	|  |     '-> move.l 32(sp),d0
   16832:	|  |         move.l d0,d1
   16834:	|  |         addq.l #1,d1
   16836:	|  |         move.l d1,32(sp)
   1683a:	|  |         move.l d0,28(sp)
   1683e:	|  '-------> movea.l 40(sp),a0
   16842:	|            move.l (a0),d0
   16844:	|            cmp.l 32(sp),d0
   16848:	'----------- bgt.w 16648 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1684c:	             tst.l 24(sp)
   16850:	             sne d0
   16852:	             neg.b d0
   16854:	             move.b d0,d0
   16856:	             andi.w #255,d0
}
   1685a:	             move.l (sp)+,d2
   1685c:	             move.l (sp)+,d3
   1685e:	             lea 28(sp),sp
   16862:	             rts

00016864 <setFloor>:

BOOL setFloor (int fileNum) {
   16864:	                               lea -132(sp),sp
   16868:	                               move.l a6,-(sp)
   1686a:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1686c:	                               jsr 164cc <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16872:	                               move.l 144(sp),-(sp)
   16876:	                               jsr 74d0 <openFileFromNum>
   1687c:	                               addq.l #4,sp
   1687e:	                               tst.l d0
   16880:	                           ,-- bne.s 16888 <setFloor+0x24>
   16882:	                           |   clr.w d0
   16884:	,--------------------------|-- bra.w 16fd4 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16888:	|                          '-> movea.l 1ca60 <currentFloor>,a0
   1688e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16892:	|                              move.l 1c930 <bigDataFile>,118(sp)
   1689a:	|                              move.l 1c950 <DOSBase>,d0
   168a0:	|                              movea.l d0,a6
   168a2:	|                              move.l 118(sp),d1
   168a6:	|                              jsr -306(a6)
   168aa:	|                              move.l d0,114(sp)
   168ae:	|                              move.l 114(sp),d0
   168b2:	|                              movea.l 1ca60 <currentFloor>,a0
   168b8:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   168bc:	|                              movea.l 1ca60 <currentFloor>,a0
   168c2:	|                              move.l 8(a0),d0
   168c6:	|                              lsl.l #3,d0
   168c8:	|                              move.l d0,110(sp)
   168cc:	|                              clr.l 106(sp)
   168d0:	|                              move.l 1c948 <SysBase>,d0
   168d6:	|                              movea.l d0,a6
   168d8:	|                              move.l 110(sp),d0
   168dc:	|                              move.l 106(sp),d1
   168e0:	|                              jsr -684(a6)
   168e4:	|                              move.l d0,102(sp)
   168e8:	|                              move.l 102(sp),d0
   168ec:	|                              movea.l 1ca60 <currentFloor>,a0
   168f2:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   168f6:	|                              movea.l 1ca60 <currentFloor>,a0
   168fc:	|                              move.l 12(a0),d0
   16900:	|                          ,-- bne.s 16916 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16902:	|                          |   pea 1a0ad <talk.c.490538ff+0x78e>
   16908:	|                          |   jsr 170ba <KPrintF>
   1690e:	|                          |   addq.l #4,sp
		return FALSE;
   16910:	|                          |   clr.w d0
   16912:	+--------------------------|-- bra.w 16fd4 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16916:	|                          '-> clr.l 136(sp)
   1691a:	|                    ,-------- bra.w 16a32 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1691e:	|                 ,--|-------> move.l 1c930 <bigDataFile>,26(sp)
   16926:	|                 |  |         move.l 1c950 <DOSBase>,d0
   1692c:	|                 |  |         movea.l d0,a6
   1692e:	|                 |  |         move.l 26(sp),d1
   16932:	|                 |  |         jsr -306(a6)
   16936:	|                 |  |         move.l d0,22(sp)
   1693a:	|                 |  |         move.l 22(sp),d1
   1693e:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16944:	|                 |  |         movea.l 12(a0),a0
   16948:	|                 |  |         move.l 136(sp),d0
   1694c:	|                 |  |         lsl.l #3,d0
   1694e:	|                 |  |         adda.l d0,a0
   16950:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16952:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16958:	|                 |  |         move.l 12(a0),d1
   1695c:	|                 |  |         move.l 136(sp),d0
   16960:	|                 |  |         lsl.l #3,d0
   16962:	|                 |  |         movea.l d1,a0
   16964:	|                 |  |         adda.l d0,a0
   16966:	|                 |  |         move.l (a0),d0
   16968:	|                 |  |         add.l d0,d0
   1696a:	|                 |  |         add.l d0,d0
   1696c:	|                 |  |         move.l d0,18(sp)
   16970:	|                 |  |         clr.l 14(sp)
   16974:	|                 |  |         move.l 1c948 <SysBase>,d0
   1697a:	|                 |  |         movea.l d0,a6
   1697c:	|                 |  |         move.l 18(sp),d0
   16980:	|                 |  |         move.l 14(sp),d1
   16984:	|                 |  |         jsr -684(a6)
   16988:	|                 |  |         move.l d0,10(sp)
   1698c:	|                 |  |         move.l 10(sp),d1
   16990:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16996:	|                 |  |         movea.l 12(a0),a0
   1699a:	|                 |  |         move.l 136(sp),d0
   1699e:	|                 |  |         lsl.l #3,d0
   169a0:	|                 |  |         adda.l d0,a0
   169a2:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   169a6:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   169ac:	|                 |  |         move.l 12(a0),d1
   169b0:	|                 |  |         move.l 136(sp),d0
   169b4:	|                 |  |         lsl.l #3,d0
   169b6:	|                 |  |         movea.l d1,a0
   169b8:	|                 |  |         adda.l d0,a0
   169ba:	|                 |  |         move.l 4(a0),d0
   169be:	|                 |  |     ,-- bne.s 169d4 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   169c0:	|                 |  |     |   pea 1a0ad <talk.c.490538ff+0x78e>
   169c6:	|                 |  |     |   jsr 170ba <KPrintF>
   169cc:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   169ce:	|                 |  |     |   clr.w d0
   169d0:	+-----------------|--|-----|-- bra.w 16fd4 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   169d4:	|                 |  |     '-> clr.l 132(sp)
   169d8:	|                 |  |     ,-- bra.s 16a12 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   169da:	|                 |  |  ,--|-> move.l 1c930 <bigDataFile>,d1
   169e0:	|                 |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   169e6:	|                 |  |  |  |   movea.l 12(a0),a0
   169ea:	|                 |  |  |  |   move.l 136(sp),d0
   169ee:	|                 |  |  |  |   lsl.l #3,d0
   169f0:	|                 |  |  |  |   adda.l d0,a0
   169f2:	|                 |  |  |  |   movea.l 4(a0),a0
   169f6:	|                 |  |  |  |   move.l 132(sp),d0
   169fa:	|                 |  |  |  |   add.l d0,d0
   169fc:	|                 |  |  |  |   add.l d0,d0
   169fe:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16a02:	|                 |  |  |  |   move.l d1,-(sp)
   16a04:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16a0a:	|                 |  |  |  |   addq.l #4,sp
   16a0c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16a0e:	|                 |  |  |  |   addq.l #1,132(sp)
   16a12:	|                 |  |  |  '-> movea.l 1ca60 <currentFloor>,a0
   16a18:	|                 |  |  |      move.l 12(a0),d1
   16a1c:	|                 |  |  |      move.l 136(sp),d0
   16a20:	|                 |  |  |      lsl.l #3,d0
   16a22:	|                 |  |  |      movea.l d1,a0
   16a24:	|                 |  |  |      adda.l d0,a0
   16a26:	|                 |  |  |      move.l (a0),d0
   16a28:	|                 |  |  |      cmp.l 132(sp),d0
   16a2c:	|                 |  |  '----- bgt.s 169da <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a2e:	|                 |  |         addq.l #1,136(sp)
   16a32:	|                 |  '-------> movea.l 1ca60 <currentFloor>,a0
   16a38:	|                 |            move.l 8(a0),d0
   16a3c:	|                 |            cmp.l 136(sp),d0
   16a40:	|                 '----------- bgt.w 1691e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16a44:	|                              move.l 1c930 <bigDataFile>,d0
   16a4a:	|                              move.l d0,-(sp)
   16a4c:	|                              jsr 6bc <get2bytes>
   16a52:	|                              addq.l #4,sp
   16a54:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16a58:	|                              move.l 136(sp),d0
   16a5c:	|                              lsl.l #3,d0
   16a5e:	|                              move.l d0,98(sp)
   16a62:	|                              clr.l 94(sp)
   16a66:	|                              move.l 1c948 <SysBase>,d0
   16a6c:	|                              movea.l d0,a6
   16a6e:	|                              move.l 98(sp),d0
   16a72:	|                              move.l 94(sp),d1
   16a76:	|                              jsr -684(a6)
   16a7a:	|                              move.l d0,90(sp)
   16a7e:	|                              move.l 90(sp),d0
   16a82:	|                              movea.l 1ca60 <currentFloor>,a0
   16a88:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16a8c:	|                              movea.l 1ca60 <currentFloor>,a0
   16a92:	|                              move.l 4(a0),d0
   16a96:	|                          ,-- bne.s 16aac <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16a98:	|                          |   pea 1a0ad <talk.c.490538ff+0x78e>
   16a9e:	|                          |   jsr 170ba <KPrintF>
   16aa4:	|                          |   addq.l #4,sp
		return FALSE;
   16aa6:	|                          |   clr.w d0
   16aa8:	+--------------------------|-- bra.w 16fd4 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16aac:	|                          '-> clr.l 132(sp)
   16ab0:	|                          ,-- bra.s 16b04 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16ab2:	|                       ,--|-> move.l 1c930 <bigDataFile>,d1
   16ab8:	|                       |  |   movea.l 1ca60 <currentFloor>,a0
   16abe:	|                       |  |   movea.l 4(a0),a0
   16ac2:	|                       |  |   move.l 132(sp),d0
   16ac6:	|                       |  |   lsl.l #3,d0
   16ac8:	|                       |  |   lea (0,a0,d0.l),a2
   16acc:	|                       |  |   move.l d1,-(sp)
   16ace:	|                       |  |   jsr 6bc <get2bytes>
   16ad4:	|                       |  |   addq.l #4,sp
   16ad6:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16ad8:	|                       |  |   move.l 1c930 <bigDataFile>,d1
   16ade:	|                       |  |   movea.l 1ca60 <currentFloor>,a0
   16ae4:	|                       |  |   movea.l 4(a0),a0
   16ae8:	|                       |  |   move.l 132(sp),d0
   16aec:	|                       |  |   lsl.l #3,d0
   16aee:	|                       |  |   lea (0,a0,d0.l),a2
   16af2:	|                       |  |   move.l d1,-(sp)
   16af4:	|                       |  |   jsr 6bc <get2bytes>
   16afa:	|                       |  |   addq.l #4,sp
   16afc:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16b00:	|                       |  |   addq.l #1,132(sp)
   16b04:	|                       |  '-> move.l 132(sp),d0
   16b08:	|                       |      cmp.l 136(sp),d0
   16b0c:	|                       '----- blt.s 16ab2 <setFloor+0x24e>
	}

	finishAccess ();
   16b0e:	|                              jsr 73c8 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16b14:	|                              movea.l 1ca60 <currentFloor>,a0
   16b1a:	|                              move.l 8(a0),d0
   16b1e:	|                              add.l d0,d0
   16b20:	|                              add.l d0,d0
   16b22:	|                              move.l d0,86(sp)
   16b26:	|                              clr.l 82(sp)
   16b2a:	|                              move.l 1c948 <SysBase>,d0
   16b30:	|                              movea.l d0,a6
   16b32:	|                              move.l 86(sp),d0
   16b36:	|                              move.l 82(sp),d1
   16b3a:	|                              jsr -684(a6)
   16b3e:	|                              move.l d0,78(sp)
   16b42:	|                              move.l 78(sp),d0
   16b46:	|                              movea.l 1ca60 <currentFloor>,a0
   16b4c:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16b50:	|                              movea.l 1ca60 <currentFloor>,a0
   16b56:	|                              move.l 8(a0),d0
   16b5a:	|                              add.l d0,d0
   16b5c:	|                              add.l d0,d0
   16b5e:	|                              move.l d0,74(sp)
   16b62:	|                              clr.l 70(sp)
   16b66:	|                              move.l 1c948 <SysBase>,d0
   16b6c:	|                              movea.l d0,a6
   16b6e:	|                              move.l 74(sp),d0
   16b72:	|                              move.l 70(sp),d1
   16b76:	|                              jsr -684(a6)
   16b7a:	|                              move.l d0,66(sp)
   16b7e:	|                              move.l 66(sp),d0
   16b82:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16b86:	|                              movea.l 1ca60 <currentFloor>,a0
   16b8c:	|                              move.l 16(a0),d0
   16b90:	|                          ,-- bne.s 16ba6 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16b92:	|                          |   pea 1a0ad <talk.c.490538ff+0x78e>
   16b98:	|                          |   jsr 170ba <KPrintF>
   16b9e:	|                          |   addq.l #4,sp
		return FALSE;
   16ba0:	|                          |   clr.w d0
   16ba2:	+--------------------------|-- bra.w 16fd4 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ba6:	|                          '-> clr.l 136(sp)
   16baa:	|                    ,-------- bra.w 16cce <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16bae:	|                 ,--|-------> movea.l 1ca60 <currentFloor>,a0
   16bb4:	|                 |  |         move.l 8(a0),d0
   16bb8:	|                 |  |         add.l d0,d0
   16bba:	|                 |  |         add.l d0,d0
   16bbc:	|                 |  |         move.l d0,50(sp)
   16bc0:	|                 |  |         clr.l 46(sp)
   16bc4:	|                 |  |         move.l 1c948 <SysBase>,d0
   16bca:	|                 |  |         movea.l d0,a6
   16bcc:	|                 |  |         move.l 50(sp),d0
   16bd0:	|                 |  |         move.l 46(sp),d1
   16bd4:	|                 |  |         jsr -684(a6)
   16bd8:	|                 |  |         move.l d0,42(sp)
   16bdc:	|                 |  |         move.l 42(sp),d0
   16be0:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16be6:	|                 |  |         movea.l 16(a0),a0
   16bea:	|                 |  |         move.l 136(sp),d1
   16bee:	|                 |  |         add.l d1,d1
   16bf0:	|                 |  |         add.l d1,d1
   16bf2:	|                 |  |         adda.l d1,a0
   16bf4:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16bf6:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16bfc:	|                 |  |         move.l 8(a0),d0
   16c00:	|                 |  |         add.l d0,d0
   16c02:	|                 |  |         add.l d0,d0
   16c04:	|                 |  |         move.l d0,38(sp)
   16c08:	|                 |  |         clr.l 34(sp)
   16c0c:	|                 |  |         move.l 1c948 <SysBase>,d0
   16c12:	|                 |  |         movea.l d0,a6
   16c14:	|                 |  |         move.l 38(sp),d0
   16c18:	|                 |  |         move.l 34(sp),d1
   16c1c:	|                 |  |         jsr -684(a6)
   16c20:	|                 |  |         move.l d0,30(sp)
   16c24:	|                 |  |         move.l 30(sp),d1
   16c28:	|                 |  |         move.l 136(sp),d0
   16c2c:	|                 |  |         add.l d0,d0
   16c2e:	|                 |  |         add.l d0,d0
   16c30:	|                 |  |         movea.l 62(sp),a0
   16c34:	|                 |  |         adda.l d0,a0
   16c36:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16c38:	|                 |  |         movea.l 1ca60 <currentFloor>,a0
   16c3e:	|                 |  |         move.l 16(a0),d1
   16c42:	|                 |  |         move.l 136(sp),d0
   16c46:	|                 |  |         add.l d0,d0
   16c48:	|                 |  |         add.l d0,d0
   16c4a:	|                 |  |         movea.l d1,a0
   16c4c:	|                 |  |         adda.l d0,a0
   16c4e:	|                 |  |         move.l (a0),d0
   16c50:	|                 |  |     ,-- bne.s 16c66 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16c52:	|                 |  |     |   pea 1a0ad <talk.c.490538ff+0x78e>
   16c58:	|                 |  |     |   jsr 170ba <KPrintF>
   16c5e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16c60:	|                 |  |     |   clr.w d0
   16c62:	+-----------------|--|-----|-- bra.w 16fd4 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c66:	|                 |  |     '-> clr.l 132(sp)
   16c6a:	|                 |  |     ,-- bra.s 16cba <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16c6c:	|                 |  |  ,--|-> movea.l 1ca60 <currentFloor>,a0
   16c72:	|                 |  |  |  |   move.l 16(a0),d1
   16c76:	|                 |  |  |  |   move.l 136(sp),d0
   16c7a:	|                 |  |  |  |   add.l d0,d0
   16c7c:	|                 |  |  |  |   add.l d0,d0
   16c7e:	|                 |  |  |  |   movea.l d1,a0
   16c80:	|                 |  |  |  |   adda.l d0,a0
   16c82:	|                 |  |  |  |   move.l (a0),d1
   16c84:	|                 |  |  |  |   move.l 132(sp),d0
   16c88:	|                 |  |  |  |   add.l d0,d0
   16c8a:	|                 |  |  |  |   add.l d0,d0
   16c8c:	|                 |  |  |  |   movea.l d1,a0
   16c8e:	|                 |  |  |  |   adda.l d0,a0
   16c90:	|                 |  |  |  |   moveq #-1,d1
   16c92:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16c94:	|                 |  |  |  |   move.l 136(sp),d0
   16c98:	|                 |  |  |  |   add.l d0,d0
   16c9a:	|                 |  |  |  |   add.l d0,d0
   16c9c:	|                 |  |  |  |   movea.l 62(sp),a0
   16ca0:	|                 |  |  |  |   adda.l d0,a0
   16ca2:	|                 |  |  |  |   move.l (a0),d1
   16ca4:	|                 |  |  |  |   move.l 132(sp),d0
   16ca8:	|                 |  |  |  |   add.l d0,d0
   16caa:	|                 |  |  |  |   add.l d0,d0
   16cac:	|                 |  |  |  |   movea.l d1,a0
   16cae:	|                 |  |  |  |   adda.l d0,a0
   16cb0:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16cb6:	|                 |  |  |  |   addq.l #1,132(sp)
   16cba:	|                 |  |  |  '-> movea.l 1ca60 <currentFloor>,a0
   16cc0:	|                 |  |  |      move.l 8(a0),d0
   16cc4:	|                 |  |  |      cmp.l 132(sp),d0
   16cc8:	|                 |  |  '----- bgt.s 16c6c <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cca:	|                 |  |         addq.l #1,136(sp)
   16cce:	|                 |  '-------> movea.l 1ca60 <currentFloor>,a0
   16cd4:	|                 |            move.l 8(a0),d0
   16cd8:	|                 |            cmp.l 136(sp),d0
   16cdc:	|                 '----------- bgt.w 16bae <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ce0:	|                              clr.l 136(sp)
   16ce4:	|              ,-------------- bra.w 16dea <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ce8:	|           ,--|-------------> clr.l 132(sp)
   16cec:	|           |  |     ,-------- bra.w 16dd4 <setFloor+0x570>
			if (i != j) {
   16cf0:	|           |  |  ,--|-------> move.l 136(sp),d0
   16cf4:	|           |  |  |  |         cmp.l 132(sp),d0
   16cf8:	|           |  |  |  |     ,-- beq.w 16d8a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16cfc:	|           |  |  |  |     |   movea.l 1ca60 <currentFloor>,a0
   16d02:	|           |  |  |  |     |   move.l 12(a0),d1
   16d06:	|           |  |  |  |     |   move.l 132(sp),d0
   16d0a:	|           |  |  |  |     |   lsl.l #3,d0
   16d0c:	|           |  |  |  |     |   movea.l d1,a1
   16d0e:	|           |  |  |  |     |   adda.l d0,a1
   16d10:	|           |  |  |  |     |   movea.l 1ca60 <currentFloor>,a0
   16d16:	|           |  |  |  |     |   move.l 12(a0),d1
   16d1a:	|           |  |  |  |     |   move.l 136(sp),d0
   16d1e:	|           |  |  |  |     |   lsl.l #3,d0
   16d20:	|           |  |  |  |     |   movea.l d1,a0
   16d22:	|           |  |  |  |     |   adda.l d0,a0
   16d24:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16d28:	|           |  |  |  |     |   move.l (a1),-(sp)
   16d2a:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16d2e:	|           |  |  |  |     |   move.l (a0),-(sp)
   16d30:	|           |  |  |  |     |   jsr 165bc <polysShareSide>
   16d36:	|           |  |  |  |     |   lea 16(sp),sp
   16d3a:	|           |  |  |  |     |   tst.w d0
   16d3c:	|           |  |  |  |  ,--|-- beq.w 16dd0 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16d40:	|           |  |  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16d46:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16d4a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16d4e:	|           |  |  |  |  |  |   add.l d0,d0
   16d50:	|           |  |  |  |  |  |   add.l d0,d0
   16d52:	|           |  |  |  |  |  |   movea.l d1,a0
   16d54:	|           |  |  |  |  |  |   adda.l d0,a0
   16d56:	|           |  |  |  |  |  |   move.l (a0),d1
   16d58:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16d5c:	|           |  |  |  |  |  |   add.l d0,d0
   16d5e:	|           |  |  |  |  |  |   add.l d0,d0
   16d60:	|           |  |  |  |  |  |   movea.l d1,a0
   16d62:	|           |  |  |  |  |  |   adda.l d0,a0
   16d64:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16d68:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16d6c:	|           |  |  |  |  |  |   add.l d0,d0
   16d6e:	|           |  |  |  |  |  |   add.l d0,d0
   16d70:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16d74:	|           |  |  |  |  |  |   adda.l d0,a0
   16d76:	|           |  |  |  |  |  |   move.l (a0),d1
   16d78:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16d7c:	|           |  |  |  |  |  |   add.l d0,d0
   16d7e:	|           |  |  |  |  |  |   add.l d0,d0
   16d80:	|           |  |  |  |  |  |   movea.l d1,a0
   16d82:	|           |  |  |  |  |  |   adda.l d0,a0
   16d84:	|           |  |  |  |  |  |   moveq #1,d1
   16d86:	|           |  |  |  |  |  |   move.l d1,(a0)
   16d88:	|           |  |  |  |  +--|-- bra.s 16dd0 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16d8a:	|           |  |  |  |  |  '-> movea.l 1ca60 <currentFloor>,a0
   16d90:	|           |  |  |  |  |      move.l 16(a0),d1
   16d94:	|           |  |  |  |  |      move.l 136(sp),d0
   16d98:	|           |  |  |  |  |      add.l d0,d0
   16d9a:	|           |  |  |  |  |      add.l d0,d0
   16d9c:	|           |  |  |  |  |      movea.l d1,a0
   16d9e:	|           |  |  |  |  |      adda.l d0,a0
   16da0:	|           |  |  |  |  |      move.l (a0),d1
   16da2:	|           |  |  |  |  |      move.l 132(sp),d0
   16da6:	|           |  |  |  |  |      add.l d0,d0
   16da8:	|           |  |  |  |  |      add.l d0,d0
   16daa:	|           |  |  |  |  |      movea.l d1,a0
   16dac:	|           |  |  |  |  |      adda.l d0,a0
   16dae:	|           |  |  |  |  |      moveq #-2,d0
   16db0:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16db2:	|           |  |  |  |  |      move.l 136(sp),d0
   16db6:	|           |  |  |  |  |      add.l d0,d0
   16db8:	|           |  |  |  |  |      add.l d0,d0
   16dba:	|           |  |  |  |  |      movea.l 62(sp),a0
   16dbe:	|           |  |  |  |  |      adda.l d0,a0
   16dc0:	|           |  |  |  |  |      move.l (a0),d1
   16dc2:	|           |  |  |  |  |      move.l 132(sp),d0
   16dc6:	|           |  |  |  |  |      add.l d0,d0
   16dc8:	|           |  |  |  |  |      add.l d0,d0
   16dca:	|           |  |  |  |  |      movea.l d1,a0
   16dcc:	|           |  |  |  |  |      adda.l d0,a0
   16dce:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dd0:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16dd4:	|           |  |  |  '-------> movea.l 1ca60 <currentFloor>,a0
   16dda:	|           |  |  |            move.l 8(a0),d0
   16dde:	|           |  |  |            cmp.l 132(sp),d0
   16de2:	|           |  |  '----------- bgt.w 16cf0 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16de6:	|           |  |               addq.l #1,136(sp)
   16dea:	|           |  '-------------> movea.l 1ca60 <currentFloor>,a0
   16df0:	|           |                  move.l 8(a0),d0
   16df4:	|           |                  cmp.l 136(sp),d0
   16df8:	|           '----------------- bgt.w 16ce8 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16dfc:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16e00:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16e04:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e08:	|  |                           clr.l 136(sp)
   16e0c:	|  |     ,-------------------- bra.w 16f62 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e10:	|  |  ,--|-------------------> clr.l 132(sp)
   16e14:	|  |  |  |     ,-------------- bra.w 16f4c <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16e18:	|  |  |  |  ,--|-------------> movea.l 1ca60 <currentFloor>,a0
   16e1e:	|  |  |  |  |  |               move.l 16(a0),d1
   16e22:	|  |  |  |  |  |               move.l 136(sp),d0
   16e26:	|  |  |  |  |  |               add.l d0,d0
   16e28:	|  |  |  |  |  |               add.l d0,d0
   16e2a:	|  |  |  |  |  |               movea.l d1,a0
   16e2c:	|  |  |  |  |  |               adda.l d0,a0
   16e2e:	|  |  |  |  |  |               move.l (a0),d1
   16e30:	|  |  |  |  |  |               move.l 132(sp),d0
   16e34:	|  |  |  |  |  |               add.l d0,d0
   16e36:	|  |  |  |  |  |               add.l d0,d0
   16e38:	|  |  |  |  |  |               movea.l d1,a0
   16e3a:	|  |  |  |  |  |               adda.l d0,a0
   16e3c:	|  |  |  |  |  |               move.l (a0),d0
   16e3e:	|  |  |  |  |  |               moveq #-1,d1
   16e40:	|  |  |  |  |  |               cmp.l d0,d1
   16e42:	|  |  |  |  |  |  ,----------- bne.w 16f48 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16e46:	|  |  |  |  |  |  |            clr.l 122(sp)
   16e4a:	|  |  |  |  |  |  |     ,----- bra.w 16f36 <setFloor+0x6d2>
						if (d != i && d != j) {
   16e4e:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   16e52:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16e56:	|  |  |  |  |  |  |  |  |  ,-- beq.w 16f32 <setFloor+0x6ce>
   16e5a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16e5e:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16e62:	|  |  |  |  |  |  |  |  |  +-- beq.w 16f32 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16e66:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16e6c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e70:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e74:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e76:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e78:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e7a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e7c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e7e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e82:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e84:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e86:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e88:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e8a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16e8c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16e90:	|  |  |  |  |  |  |  |  |  +-- bne.w 16f32 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16e94:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16e9a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e9e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ea2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ea4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ea6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ea8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16eaa:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16eac:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16eb0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16eb2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16eb4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16eb6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16eb8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16eba:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16f32 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16ebc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ec0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ec2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ec4:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16ec8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16eca:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ecc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16ed0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ed2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ed4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ed6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ed8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16eda:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16ede:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16f32 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16ee0:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca60 <currentFloor>,a0
   16ee6:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16eea:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16eee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ef0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ef2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ef4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ef6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ef8:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16efc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16efe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f00:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f02:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f04:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16f08:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f0c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f10:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16f14:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f16:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f18:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f1c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f1e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f20:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f22:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f24:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16f28:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16f2a:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16f2c:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f32:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   16f36:	|  |  |  |  |  |  |  |  '----> movea.l 1ca60 <currentFloor>,a0
   16f3c:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16f40:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16f44:	|  |  |  |  |  |  |  '-------- bgt.w 16e4e <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f48:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   16f4c:	|  |  |  |  |  '-------------> movea.l 1ca60 <currentFloor>,a0
   16f52:	|  |  |  |  |                  move.l 8(a0),d0
   16f56:	|  |  |  |  |                  cmp.l 132(sp),d0
   16f5a:	|  |  |  |  '----------------- bgt.w 16e18 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f5e:	|  |  |  |                     addq.l #1,136(sp)
   16f62:	|  |  |  '-------------------> movea.l 1ca60 <currentFloor>,a0
   16f68:	|  |  |                        move.l 8(a0),d0
   16f6c:	|  |  |                        cmp.l 136(sp),d0
   16f70:	|  |  '----------------------- bgt.w 16e10 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16f74:	|  |                           tst.w 130(sp)
   16f78:	|  '-------------------------- bne.w 16e00 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f7c:	|                              clr.l 136(sp)
   16f80:	|                          ,-- bra.s 16fa8 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16f82:	|                       ,--|-> move.l 136(sp),d0
   16f86:	|                       |  |   add.l d0,d0
   16f88:	|                       |  |   add.l d0,d0
   16f8a:	|                       |  |   movea.l 62(sp),a0
   16f8e:	|                       |  |   adda.l d0,a0
   16f90:	|                       |  |   move.l (a0),54(sp)
   16f94:	|                       |  |   move.l 1c948 <SysBase>,d0
   16f9a:	|                       |  |   movea.l d0,a6
   16f9c:	|                       |  |   movea.l 54(sp),a1
   16fa0:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fa4:	|                       |  |   addq.l #1,136(sp)
   16fa8:	|                       |  '-> movea.l 1ca60 <currentFloor>,a0
   16fae:	|                       |      move.l 8(a0),d0
   16fb2:	|                       |      cmp.l 136(sp),d0
   16fb6:	|                       '----- bgt.s 16f82 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16fb8:	|                              move.l 62(sp),58(sp)
   16fbe:	|                              move.l 1c948 <SysBase>,d0
   16fc4:	|                              movea.l d0,a6
   16fc6:	|                              movea.l 58(sp),a1
   16fca:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16fce:	|                              clr.l 62(sp)

	return TRUE;
   16fd2:	|                              moveq #1,d0
}
   16fd4:	'----------------------------> movea.l (sp)+,a2
   16fd6:	                               movea.l (sp)+,a6
   16fd8:	                               lea 132(sp),sp
   16fdc:	                               rts

00016fde <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16fde:	jsr 164cc <killFloor>
	noFloor ();
   16fe4:	jsr 163d4 <noFloor>
   16fea:	nop
   16fec:	rts

00016fee <WaitVbl>:
void WaitVbl() {
   16fee:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16ff0:	   ,-> movea.l #14675972,a0
   16ff6:	   |   move.l (a0),d0
   16ff8:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16ffa:	   |   move.l (sp),d0
   16ffc:	   |   andi.l #130816,d0
   17002:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17004:	   |   move.l (sp),d0
   17006:	   |   cmpi.l #76800,d0
   1700c:	   '-- beq.s 16ff0 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1700e:	,----> movea.l #14675972,a0
   17014:	|      move.l (a0),d0
   17016:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1701a:	|      move.l 4(sp),d0
   1701e:	|      andi.l #130816,d0
   17024:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17028:	|      move.l 4(sp),d0
   1702c:	|      cmpi.l #76800,d0
   17032:	|  ,-- beq.s 17036 <WaitVbl+0x48>
	while (1) {
   17034:	'--|-- bra.s 1700e <WaitVbl+0x20>
			break;
   17036:	   '-> nop
}
   17038:	       nop
   1703a:	       addq.l #8,sp
   1703c:	       rts

0001703e <memset>:
void* memset(void *dest, int val, unsigned long len) {
   1703e:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17040:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17044:	   ,-- bra.s 17056 <memset+0x18>
		*ptr++ = val;
   17046:	,--|-> move.l (sp),d0
   17048:	|  |   move.l d0,d1
   1704a:	|  |   addq.l #1,d1
   1704c:	|  |   move.l d1,(sp)
   1704e:	|  |   move.l 12(sp),d1
   17052:	|  |   movea.l d0,a0
   17054:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17056:	|  '-> move.l 16(sp),d0
   1705a:	|      move.l d0,d1
   1705c:	|      subq.l #1,d1
   1705e:	|      move.l d1,16(sp)
   17062:	|      tst.l d0
   17064:	'----- bne.s 17046 <memset+0x8>
	return dest;
   17066:	       move.l 8(sp),d0
}
   1706a:	       addq.l #4,sp
   1706c:	       rts

0001706e <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1706e:	       subq.l #8,sp
   17070:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17072:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17078:	       move.l 20(sp),4(sp)
	while(len--)
   1707e:	   ,-- bra.s 170a0 <memcpy+0x32>
		*d++ = *s++;
   17080:	,--|-> move.l 4(sp),d1
   17084:	|  |   move.l d1,d0
   17086:	|  |   addq.l #1,d0
   17088:	|  |   move.l d0,4(sp)
   1708c:	|  |   move.l 8(sp),d0
   17090:	|  |   move.l d0,d2
   17092:	|  |   addq.l #1,d2
   17094:	|  |   move.l d2,8(sp)
   17098:	|  |   movea.l d1,a0
   1709a:	|  |   move.b (a0),d1
   1709c:	|  |   movea.l d0,a0
   1709e:	|  |   move.b d1,(a0)
	while(len--)
   170a0:	|  '-> move.l 24(sp),d0
   170a4:	|      move.l d0,d1
   170a6:	|      subq.l #1,d1
   170a8:	|      move.l d1,24(sp)
   170ac:	|      tst.l d0
   170ae:	'----- bne.s 17080 <memcpy+0x12>
	return dest;
   170b0:	       move.l 16(sp),d0
}
   170b4:	       move.l (sp)+,d2
   170b6:	       addq.l #8,sp
   170b8:	       rts

000170ba <KPrintF>:
void KPrintF(const char* fmt, ...) {
   170ba:	       lea -128(sp),sp
   170be:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   170c2:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d58>,d0
   170c8:	       cmpi.w #20153,d0
   170cc:	   ,-- beq.s 170f0 <KPrintF+0x36>
   170ce:	   |   cmpi.w #-24562,d0
   170d2:	   +-- beq.s 170f0 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   170d4:	   |   movea.l 1c948 <SysBase>,a6
   170da:	   |   movea.l 144(sp),a0
   170de:	   |   lea 148(sp),a1
   170e2:	   |   lea 17b4e <KPutCharX>,a2
   170e8:	   |   suba.l a3,a3
   170ea:	   |   jsr -522(a6)
}
   170ee:	,--|-- bra.s 1711a <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   170f0:	|  '-> movea.l 1c948 <SysBase>,a6
   170f6:	|      movea.l 144(sp),a0
   170fa:	|      lea 148(sp),a1
   170fe:	|      lea 17b5c <PutChar>,a2
   17104:	|      lea 12(sp),a3
   17108:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1710c:	|      move.l a3,-(sp)
   1710e:	|      pea 56 <_start+0x56>
   17112:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d58>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17118:	|      addq.l #8,sp
}
   1711a:	'----> movem.l (sp)+,a2-a3/a6
   1711e:	       lea 128(sp),sp
   17122:	       rts

00017124 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17124:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17126:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1712c:	       movea.l (sp),a0
   1712e:	       move.w (a0),d0
   17130:	       cmpi.w #20153,d0
   17134:	   ,-- beq.s 17140 <debug_cmd+0x1c>
   17136:	   |   movea.l (sp),a0
   17138:	   |   move.w (a0),d0
   1713a:	   |   cmpi.w #-24562,d0
   1713e:	,--|-- bne.s 1715e <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17140:	|  '-> move.l 20(sp),-(sp)
   17144:	|      move.l 20(sp),-(sp)
   17148:	|      move.l 20(sp),-(sp)
   1714c:	|      move.l 20(sp),-(sp)
   17150:	|      pea 58 <_start+0x58>
   17154:	|      movea.l 20(sp),a0
   17158:	|      jsr (a0)
   1715a:	|      lea 20(sp),sp
	}
}
   1715e:	'----> nop
   17160:	       addq.l #4,sp
   17162:	       rts

00017164 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17164:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17166:	   ,-- bra.s 17188 <my_strncpy+0x24>
		*destination++ = *source++;
   17168:	,--|-> move.l 12(sp),d1
   1716c:	|  |   move.l d1,d0
   1716e:	|  |   addq.l #1,d0
   17170:	|  |   move.l d0,12(sp)
   17174:	|  |   move.l 8(sp),d0
   17178:	|  |   move.l d0,d2
   1717a:	|  |   addq.l #1,d2
   1717c:	|  |   move.l d2,8(sp)
   17180:	|  |   movea.l d1,a0
   17182:	|  |   move.b (a0),d1
   17184:	|  |   movea.l d0,a0
   17186:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17188:	|  '-> movea.l 12(sp),a0
   1718c:	|      move.b (a0),d0
   1718e:	|  ,-- beq.s 17196 <my_strncpy+0x32>
   17190:	|  |   subq.l #1,16(sp)
   17194:	'--|-- bne.s 17168 <my_strncpy+0x4>
	*destination = '\0';
   17196:	   '-> movea.l 8(sp),a0
   1719a:	       clr.b (a0)
}
   1719c:	       nop
   1719e:	       move.l (sp)+,d2
   171a0:	       rts

000171a2 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   171a2:	    lea -60(sp),sp
   171a6:	    movea.l 72(sp),a1
   171aa:	    movea.l 76(sp),a0
   171ae:	    move.l 80(sp),d1
   171b2:	    move.l 84(sp),d0
   171b6:	    movea.w a1,a1
   171b8:	    move.w a1,8(sp)
   171bc:	    movea.w a0,a0
   171be:	    move.w a0,6(sp)
   171c2:	    move.w d1,d1
   171c4:	    move.w d1,4(sp)
   171c8:	    move.w d0,d0
   171ca:	    move.w d0,2(sp)
	struct debug_resource resource = {
   171ce:	    lea 10(sp),a0
   171d2:	    clr.l (a0)
   171d4:	    addq.l #4,a0
   171d6:	    clr.l (a0)
   171d8:	    addq.l #4,a0
   171da:	    clr.l (a0)
   171dc:	    addq.l #4,a0
   171de:	    clr.l (a0)
   171e0:	    addq.l #4,a0
   171e2:	    clr.l (a0)
   171e4:	    addq.l #4,a0
   171e6:	    clr.l (a0)
   171e8:	    addq.l #4,a0
   171ea:	    clr.l (a0)
   171ec:	    addq.l #4,a0
   171ee:	    clr.l (a0)
   171f0:	    addq.l #4,a0
   171f2:	    clr.l (a0)
   171f4:	    addq.l #4,a0
   171f6:	    clr.l (a0)
   171f8:	    addq.l #4,a0
   171fa:	    clr.l (a0)
   171fc:	    addq.l #4,a0
   171fe:	    clr.l (a0)
   17200:	    addq.l #4,a0
   17202:	    clr.w (a0)
   17204:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17206:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1720a:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1720e:	    move.w 8(sp),d0
   17212:	,-- bpl.s 17216 <debug_register_bitmap+0x74>
   17214:	|   addq.w #7,d0
   17216:	'-> asr.w #3,d0
   17218:	    movea.w d0,a0
   1721a:	    movea.w 6(sp),a1
   1721e:	    move.l a1,-(sp)
   17220:	    move.l a0,-(sp)
   17222:	    jsr 17a46 <__mulsi3>
   17228:	    addq.l #8,sp
   1722a:	    movea.w 4(sp),a0
   1722e:	    move.l a0,-(sp)
   17230:	    move.l d0,-(sp)
   17232:	    jsr 17a46 <__mulsi3>
   17238:	    addq.l #8,sp
	struct debug_resource resource = {
   1723a:	    move.l d0,14(sp)
   1723e:	    move.w 2(sp),52(sp)
   17244:	    move.w 8(sp),54(sp)
   1724a:	    move.w 6(sp),56(sp)
   17250:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17256:	    moveq #0,d0
   17258:	    move.w 2(sp),d0
   1725c:	    moveq #2,d1
   1725e:	    and.l d1,d0
   17260:	,-- beq.s 1726c <debug_register_bitmap+0xca>
		resource.size *= 2;
   17262:	|   move.l 14(sp),d0
   17266:	|   add.l d0,d0
   17268:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1726c:	'-> pea 20 <_start+0x20>
   17270:	    move.l 72(sp),-(sp)
   17274:	    lea 18(sp),a0
   17278:	    move.l a0,d0
   1727a:	    addq.l #8,d0
   1727c:	    move.l d0,-(sp)
   1727e:	    jsr 17164 <my_strncpy>
   17284:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17288:	    lea 10(sp),a0
   1728c:	    clr.l -(sp)
   1728e:	    clr.l -(sp)
   17290:	    move.l a0,-(sp)
   17292:	    pea 4 <_start+0x4>
   17296:	    jsr 17124 <debug_cmd>
   1729c:	    lea 16(sp),sp
}
   172a0:	    nop
   172a2:	    lea 60(sp),sp
   172a6:	    rts

000172a8 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   172a8:	lea -12(sp),sp
   172ac:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   172ae:	move.l 20(sp),12(sp)
   172b4:	move.l 24(sp),8(sp)
   172ba:	move.l 1c958 <MathIeeeSingBasBase>,d0
   172c0:	movea.l d0,a6
   172c2:	move.l 12(sp),d0
   172c6:	move.l 8(sp),d1
   172ca:	jsr -66(a6)
   172ce:	move.l d0,4(sp)
   172d2:	move.l 4(sp),d0
}
   172d6:	movea.l (sp)+,a6
   172d8:	lea 12(sp),sp
   172dc:	rts

000172de <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   172de:	lea -32(sp),sp
   172e2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   172e6:	move.l 48(sp),36(sp)
   172ec:	move.l 52(sp),40(sp)
   172f2:	move.l 56(sp),28(sp)
   172f8:	move.l 60(sp),32(sp)
   172fe:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   17304:	movea.l d0,a6
   17306:	move.l 36(sp),d0
   1730a:	move.l 40(sp),d1
   1730e:	move.l 28(sp),d2
   17312:	move.l 32(sp),d3
   17316:	jsr -66(a6)
   1731a:	move.l d0,12(sp)
   1731e:	move.l d1,16(sp)
   17322:	move.l 12(sp),20(sp)
   17328:	move.l 16(sp),24(sp)
   1732e:	move.l 20(sp),d0
   17332:	move.l 24(sp),d1
}
   17336:	movem.l (sp)+,d2-d3/a6
   1733a:	lea 32(sp),sp
   1733e:	rts

00017340 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17340:	lea -32(sp),sp
   17344:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17348:	move.l 48(sp),36(sp)
   1734e:	move.l 52(sp),40(sp)
   17354:	move.l 56(sp),28(sp)
   1735a:	move.l 60(sp),32(sp)
   17360:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   17366:	movea.l d0,a6
   17368:	move.l 36(sp),d0
   1736c:	move.l 40(sp),d1
   17370:	move.l 28(sp),d2
   17374:	move.l 32(sp),d3
   17378:	jsr -84(a6)
   1737c:	move.l d0,12(sp)
   17380:	move.l d1,16(sp)
   17384:	move.l 12(sp),20(sp)
   1738a:	move.l 16(sp),24(sp)
   17390:	move.l 20(sp),d0
   17394:	move.l 24(sp),d1
}
   17398:	movem.l (sp)+,d2-d3/a6
   1739c:	lea 32(sp),sp
   173a0:	rts

000173a2 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   173a2:	lea -12(sp),sp
   173a6:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   173a8:	move.l 20(sp),12(sp)
   173ae:	move.l 24(sp),8(sp)
   173b4:	move.l 1c958 <MathIeeeSingBasBase>,d0
   173ba:	movea.l d0,a6
   173bc:	move.l 12(sp),d0
   173c0:	move.l 8(sp),d1
   173c4:	jsr -84(a6)
   173c8:	move.l d0,4(sp)
   173cc:	move.l 4(sp),d0
}
   173d0:	movea.l (sp)+,a6
   173d2:	lea 12(sp),sp
   173d6:	rts

000173d8 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   173d8:	lea -12(sp),sp
   173dc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   173de:	move.l 20(sp),12(sp)
   173e4:	move.l 24(sp),8(sp)
   173ea:	move.l 1c958 <MathIeeeSingBasBase>,d0
   173f0:	movea.l d0,a6
   173f2:	move.l 12(sp),d0
   173f6:	move.l 8(sp),d1
   173fa:	jsr -42(a6)
   173fe:	move.l d0,4(sp)
   17402:	move.l 4(sp),d0
}
   17406:	movea.l (sp)+,a6
   17408:	lea 12(sp),sp
   1740c:	rts

0001740e <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1740e:	lea -20(sp),sp
   17412:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17414:	move.l 28(sp),20(sp)
   1741a:	move.l 1c964 <MathIeeeDoubTransBase>,d0
   17420:	movea.l d0,a6
   17422:	move.l 20(sp),d0
   17426:	jsr -108(a6)
   1742a:	move.l d0,4(sp)
   1742e:	move.l d1,8(sp)
   17432:	move.l 4(sp),12(sp)
   17438:	move.l 8(sp),16(sp)
   1743e:	move.l 12(sp),d0
   17442:	move.l 16(sp),d1
}
   17446:	movea.l (sp)+,a6
   17448:	lea 20(sp),sp
   1744c:	rts

0001744e <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   1744e:	lea -12(sp),sp
   17452:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17454:	move.l 20(sp),8(sp)
   1745a:	move.l 24(sp),12(sp)
   17460:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   17466:	movea.l d0,a6
   17468:	move.l 8(sp),d0
   1746c:	move.l 12(sp),d1
   17470:	jsr -30(a6)
   17474:	move.l d0,4(sp)
   17478:	move.l 4(sp),d0
}
   1747c:	movea.l (sp)+,a6
   1747e:	lea 12(sp),sp
   17482:	rts

00017484 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17484:	subq.l #8,sp
   17486:	move.l a6,-(sp)
	return IEEESPFix(value);
   17488:	move.l 16(sp),8(sp)
   1748e:	move.l 1c958 <MathIeeeSingBasBase>,d0
   17494:	movea.l d0,a6
   17496:	move.l 8(sp),d0
   1749a:	jsr -30(a6)
   1749e:	move.l d0,4(sp)
   174a2:	move.l 4(sp),d0
}
   174a6:	movea.l (sp)+,a6
   174a8:	addq.l #8,sp
   174aa:	rts

000174ac <__floatsidf>:


DOUBLE __floatsidf (int i) {
   174ac:	lea -20(sp),sp
   174b0:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   174b2:	move.l 28(sp),20(sp)
   174b8:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   174be:	movea.l d0,a6
   174c0:	move.l 20(sp),d0
   174c4:	jsr -36(a6)
   174c8:	move.l d0,4(sp)
   174cc:	move.l d1,8(sp)
   174d0:	move.l 4(sp),12(sp)
   174d6:	move.l 8(sp),16(sp)
   174dc:	move.l 12(sp),d0
   174e0:	move.l 16(sp),d1
}
   174e4:	movea.l (sp)+,a6
   174e6:	lea 20(sp),sp
   174ea:	rts

000174ec <__floatsisf>:

FLOAT __floatsisf(int i) {
   174ec:	subq.l #8,sp
   174ee:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   174f0:	move.l 16(sp),8(sp)
   174f6:	move.l 1c958 <MathIeeeSingBasBase>,d0
   174fc:	movea.l d0,a6
   174fe:	move.l 8(sp),d0
   17502:	jsr -36(a6)
   17506:	move.l d0,4(sp)
   1750a:	move.l 4(sp),d0
}
   1750e:	movea.l (sp)+,a6
   17510:	addq.l #8,sp
   17512:	rts

00017514 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17514:	subq.l #8,sp
   17516:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17518:	move.l 16(sp),8(sp)
   1751e:	move.l 1c958 <MathIeeeSingBasBase>,d0
   17524:	movea.l d0,a6
   17526:	move.l 8(sp),d0
   1752a:	jsr -36(a6)
   1752e:	move.l d0,4(sp)
   17532:	move.l 4(sp),d0
}
   17536:	movea.l (sp)+,a6
   17538:	addq.l #8,sp
   1753a:	rts

0001753c <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1753c:	lea -32(sp),sp
   17540:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17544:	move.l 48(sp),36(sp)
   1754a:	move.l 52(sp),40(sp)
   17550:	move.l 56(sp),28(sp)
   17556:	move.l 60(sp),32(sp)
   1755c:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   17562:	movea.l d0,a6
   17564:	move.l 36(sp),d0
   17568:	move.l 40(sp),d1
   1756c:	move.l 28(sp),d2
   17570:	move.l 32(sp),d3
   17574:	jsr -78(a6)
   17578:	move.l d0,12(sp)
   1757c:	move.l d1,16(sp)
   17580:	move.l 12(sp),20(sp)
   17586:	move.l 16(sp),24(sp)
   1758c:	move.l 20(sp),d0
   17590:	move.l 24(sp),d1
}
   17594:	movem.l (sp)+,d2-d3/a6
   17598:	lea 32(sp),sp
   1759c:	rts

0001759e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1759e:	lea -12(sp),sp
   175a2:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   175a4:	move.l 20(sp),12(sp)
   175aa:	move.l 24(sp),8(sp)
   175b0:	move.l 1c958 <MathIeeeSingBasBase>,d0
   175b6:	movea.l d0,a6
   175b8:	move.l 12(sp),d0
   175bc:	move.l 8(sp),d1
   175c0:	jsr -78(a6)
   175c4:	move.l d0,4(sp)
   175c8:	move.l 4(sp),d0
}
   175cc:	movea.l (sp)+,a6
   175ce:	lea 12(sp),sp
   175d2:	rts

000175d4 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   175d4:	lea -12(sp),sp
   175d8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175da:	move.l 20(sp),12(sp)
   175e0:	move.l 24(sp),8(sp)
   175e6:	move.l 1c958 <MathIeeeSingBasBase>,d0
   175ec:	movea.l d0,a6
   175ee:	move.l 12(sp),d0
   175f2:	move.l 8(sp),d1
   175f6:	jsr -42(a6)
   175fa:	move.l d0,4(sp)
   175fe:	move.l 4(sp),d0
}
   17602:	movea.l (sp)+,a6
   17604:	lea 12(sp),sp
   17608:	rts

0001760a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1760a:	lea -20(sp),sp
   1760e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17612:	move.l 36(sp),24(sp)
   17618:	move.l 40(sp),28(sp)
   1761e:	move.l 44(sp),16(sp)
   17624:	move.l 48(sp),20(sp)
   1762a:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   17630:	movea.l d0,a6
   17632:	move.l 24(sp),d0
   17636:	move.l 28(sp),d1
   1763a:	move.l 16(sp),d2
   1763e:	move.l 20(sp),d3
   17642:	jsr -42(a6)
   17646:	move.l d0,12(sp)
   1764a:	move.l 12(sp),d0
}
   1764e:	movem.l (sp)+,d2-d3/a6
   17652:	lea 20(sp),sp
   17656:	rts

00017658 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17658:	lea -12(sp),sp
   1765c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1765e:	move.l 20(sp),12(sp)
   17664:	move.l 24(sp),8(sp)
   1766a:	move.l 1c958 <MathIeeeSingBasBase>,d0
   17670:	movea.l d0,a6
   17672:	move.l 12(sp),d0
   17676:	move.l 8(sp),d1
   1767a:	jsr -42(a6)
   1767e:	move.l d0,4(sp)
   17682:	move.l 4(sp),d0
}
   17686:	movea.l (sp)+,a6
   17688:	lea 12(sp),sp
   1768c:	rts

0001768e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1768e:	lea -12(sp),sp
   17692:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17694:	move.l 20(sp),12(sp)
   1769a:	move.l 24(sp),8(sp)
   176a0:	move.l 1c958 <MathIeeeSingBasBase>,d0
   176a6:	movea.l d0,a6
   176a8:	move.l 12(sp),d0
   176ac:	move.l 8(sp),d1
   176b0:	jsr -42(a6)
   176b4:	move.l d0,4(sp)
   176b8:	move.l 4(sp),d0
}
   176bc:	movea.l (sp)+,a6
   176be:	lea 12(sp),sp
   176c2:	rts

000176c4 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   176c4:	lea -20(sp),sp
   176c8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   176cc:	move.l 36(sp),24(sp)
   176d2:	move.l 40(sp),28(sp)
   176d8:	move.l 44(sp),16(sp)
   176de:	move.l 48(sp),20(sp)
   176e4:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   176ea:	movea.l d0,a6
   176ec:	move.l 24(sp),d0
   176f0:	move.l 28(sp),d1
   176f4:	move.l 16(sp),d2
   176f8:	move.l 20(sp),d3
   176fc:	jsr -42(a6)
   17700:	move.l d0,12(sp)
   17704:	move.l 12(sp),d0
}
   17708:	movem.l (sp)+,d2-d3/a6
   1770c:	lea 20(sp),sp
   17710:	rts

00017712 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17712:	lea -12(sp),sp
   17716:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17718:	move.l 20(sp),12(sp)
   1771e:	move.l 24(sp),8(sp)
   17724:	move.l 1c958 <MathIeeeSingBasBase>,d0
   1772a:	movea.l d0,a6
   1772c:	move.l 12(sp),d0
   17730:	move.l 8(sp),d1
   17734:	jsr -42(a6)
   17738:	move.l d0,4(sp)
   1773c:	move.l 4(sp),d0
}
   17740:	movea.l (sp)+,a6
   17742:	lea 12(sp),sp
   17746:	rts

00017748 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17748:	lea -12(sp),sp
   1774c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1774e:	move.l 20(sp),12(sp)
   17754:	move.l 24(sp),8(sp)
   1775a:	move.l 1c958 <MathIeeeSingBasBase>,d0
   17760:	movea.l d0,a6
   17762:	move.l 12(sp),d0
   17766:	move.l 8(sp),d1
   1776a:	jsr -42(a6)
   1776e:	move.l d0,4(sp)
   17772:	move.l 4(sp),d0
}
   17776:	movea.l (sp)+,a6
   17778:	lea 12(sp),sp
   1777c:	rts

0001777e <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1777e:	lea -32(sp),sp
   17782:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17786:	move.l 48(sp),36(sp)
   1778c:	move.l 52(sp),40(sp)
   17792:	move.l 56(sp),28(sp)
   17798:	move.l 60(sp),32(sp)
   1779e:	move.l 1c960 <MathIeeeDoubBasBase>,d0
   177a4:	movea.l d0,a6
   177a6:	move.l 36(sp),d0
   177aa:	move.l 40(sp),d1
   177ae:	move.l 28(sp),d2
   177b2:	move.l 32(sp),d3
   177b6:	jsr -72(a6)
   177ba:	move.l d0,12(sp)
   177be:	move.l d1,16(sp)
   177c2:	move.l 12(sp),20(sp)
   177c8:	move.l 16(sp),24(sp)
   177ce:	move.l 20(sp),d0
   177d2:	move.l 24(sp),d1
}
   177d6:	movem.l (sp)+,d2-d3/a6
   177da:	lea 32(sp),sp
   177de:	rts

000177e0 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   177e0:	lea -12(sp),sp
   177e4:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   177e6:	move.l 20(sp),12(sp)
   177ec:	move.l 24(sp),8(sp)
   177f2:	move.l 1c958 <MathIeeeSingBasBase>,d0
   177f8:	movea.l d0,a6
   177fa:	move.l 12(sp),d0
   177fe:	move.l 8(sp),d1
   17802:	jsr -72(a6)
   17806:	move.l d0,4(sp)
   1780a:	move.l 4(sp),d0
}
   1780e:	movea.l (sp)+,a6
   17810:	lea 12(sp),sp
   17814:	rts

00017816 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17816:	lea -12(sp),sp
   1781a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1781c:	move.l 20(sp),8(sp)
   17822:	move.l 24(sp),12(sp)
   17828:	move.l 1c964 <MathIeeeDoubTransBase>,d0
   1782e:	movea.l d0,a6
   17830:	move.l 8(sp),d0
   17834:	move.l 12(sp),d1
   17838:	jsr -102(a6)
   1783c:	move.l d0,4(sp)
   17840:	move.l 4(sp),d0
}
   17844:	movea.l (sp)+,a6
   17846:	lea 12(sp),sp
   1784a:	rts

0001784c <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   1784c:	       lea -24(sp),sp
   17850:	       move.l a6,-(sp)
    if (x > 0) {
   17852:	       clr.l -(sp)
   17854:	       move.l 40(sp),-(sp)
   17858:	       jsr 17658 <__gtsf2>
   1785e:	       addq.l #8,sp
   17860:	       tst.l d0
   17862:	   ,-- ble.s 17894 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17864:	   |   move.l 36(sp),-(sp)
   17868:	   |   move.l 36(sp),-(sp)
   1786c:	   |   jsr 173a2 <__divsf3>
   17872:	   |   addq.l #8,sp
   17874:	   |   move.l d0,8(sp)
   17878:	   |   move.l 1c95c <MathIeeeSingTransBase>,d0
   1787e:	   |   movea.l d0,a6
   17880:	   |   move.l 8(sp),d0
   17884:	   |   jsr -30(a6)
   17888:	   |   move.l d0,4(sp)
   1788c:	   |   move.l 4(sp),d0
   17890:	,--|-- bra.w 179f4 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17894:	|  '-> clr.l -(sp)
   17896:	|      move.l 40(sp),-(sp)
   1789a:	|      jsr 17712 <__ltsf2>
   178a0:	|      addq.l #8,sp
   178a2:	|      tst.l d0
   178a4:	|  ,-- bge.s 17918 <atan2f+0xcc>
   178a6:	|  |   clr.l -(sp)
   178a8:	|  |   move.l 36(sp),-(sp)
   178ac:	|  |   jsr 175d4 <__gesf2>
   178b2:	|  |   addq.l #8,sp
   178b4:	|  |   tst.l d0
   178b6:	|  +-- blt.s 17918 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   178b8:	|  |   move.l 36(sp),-(sp)
   178bc:	|  |   move.l 36(sp),-(sp)
   178c0:	|  |   jsr 173a2 <__divsf3>
   178c6:	|  |   addq.l #8,sp
   178c8:	|  |   move.l d0,24(sp)
   178cc:	|  |   move.l 1c95c <MathIeeeSingTransBase>,d0
   178d2:	|  |   movea.l d0,a6
   178d4:	|  |   move.l 24(sp),d0
   178d8:	|  |   jsr -30(a6)
   178dc:	|  |   move.l d0,20(sp)
   178e0:	|  |   move.l 20(sp),d0
   178e4:	|  |   move.l d0,-(sp)
   178e6:	|  |   jsr 1740e <__extendsfdf2>
   178ec:	|  |   addq.l #4,sp
   178ee:	|  |   move.l #1413754136,-(sp)
   178f4:	|  |   move.l #1074340347,-(sp)
   178fa:	|  |   move.l d1,-(sp)
   178fc:	|  |   move.l d0,-(sp)
   178fe:	|  |   jsr 172de <__adddf3>
   17904:	|  |   lea 16(sp),sp
   17908:	|  |   move.l d1,-(sp)
   1790a:	|  |   move.l d0,-(sp)
   1790c:	|  |   jsr 17816 <__truncdfsf2>
   17912:	|  |   addq.l #8,sp
   17914:	+--|-- bra.w 179f4 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17918:	|  '-> clr.l -(sp)
   1791a:	|      move.l 40(sp),-(sp)
   1791e:	|      jsr 17712 <__ltsf2>
   17924:	|      addq.l #8,sp
   17926:	|      tst.l d0
   17928:	|  ,-- bge.s 1799a <atan2f+0x14e>
   1792a:	|  |   clr.l -(sp)
   1792c:	|  |   move.l 36(sp),-(sp)
   17930:	|  |   jsr 17712 <__ltsf2>
   17936:	|  |   addq.l #8,sp
   17938:	|  |   tst.l d0
   1793a:	|  +-- bge.s 1799a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1793c:	|  |   move.l 36(sp),-(sp)
   17940:	|  |   move.l 36(sp),-(sp)
   17944:	|  |   jsr 173a2 <__divsf3>
   1794a:	|  |   addq.l #8,sp
   1794c:	|  |   move.l d0,16(sp)
   17950:	|  |   move.l 1c95c <MathIeeeSingTransBase>,d0
   17956:	|  |   movea.l d0,a6
   17958:	|  |   move.l 16(sp),d0
   1795c:	|  |   jsr -30(a6)
   17960:	|  |   move.l d0,12(sp)
   17964:	|  |   move.l 12(sp),d0
   17968:	|  |   move.l d0,-(sp)
   1796a:	|  |   jsr 1740e <__extendsfdf2>
   17970:	|  |   addq.l #4,sp
   17972:	|  |   move.l #1413754136,-(sp)
   17978:	|  |   move.l #1074340347,-(sp)
   1797e:	|  |   move.l d1,-(sp)
   17980:	|  |   move.l d0,-(sp)
   17982:	|  |   jsr 1777e <__subdf3>
   17988:	|  |   lea 16(sp),sp
   1798c:	|  |   move.l d1,-(sp)
   1798e:	|  |   move.l d0,-(sp)
   17990:	|  |   jsr 17816 <__truncdfsf2>
   17996:	|  |   addq.l #8,sp
   17998:	+--|-- bra.s 179f4 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1799a:	|  '-> clr.l -(sp)
   1799c:	|      move.l 40(sp),-(sp)
   179a0:	|      jsr 173d8 <__eqsf2>
   179a6:	|      addq.l #8,sp
   179a8:	|      tst.l d0
   179aa:	|  ,-- bne.s 179c6 <atan2f+0x17a>
   179ac:	|  |   clr.l -(sp)
   179ae:	|  |   move.l 36(sp),-(sp)
   179b2:	|  |   jsr 17658 <__gtsf2>
   179b8:	|  |   addq.l #8,sp
   179ba:	|  |   tst.l d0
   179bc:	|  +-- ble.s 179c6 <atan2f+0x17a>
        return PI / 2;
   179be:	|  |   move.l #1070141403,d0
   179c4:	+--|-- bra.s 179f4 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   179c6:	|  '-> clr.l -(sp)
   179c8:	|      move.l 40(sp),-(sp)
   179cc:	|      jsr 173d8 <__eqsf2>
   179d2:	|      addq.l #8,sp
   179d4:	|      tst.l d0
   179d6:	|  ,-- bne.s 179f2 <atan2f+0x1a6>
   179d8:	|  |   clr.l -(sp)
   179da:	|  |   move.l 36(sp),-(sp)
   179de:	|  |   jsr 17712 <__ltsf2>
   179e4:	|  |   addq.l #8,sp
   179e6:	|  |   tst.l d0
   179e8:	|  +-- bge.s 179f2 <atan2f+0x1a6>
        return -PI / 2;
   179ea:	|  |   move.l #-1077342245,d0
   179f0:	+--|-- bra.s 179f4 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   179f2:	|  '-> moveq #0,d0
    }
}
   179f4:	'----> movea.l (sp)+,a6
   179f6:	       lea 24(sp),sp
   179fa:	       rts

000179fc <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   179fc:	lea -24(sp),sp
   17a00:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17a02:	move.l 32(sp),20(sp)
   17a08:	move.l 36(sp),24(sp)
   17a0e:	move.l 1c964 <MathIeeeDoubTransBase>,d0
   17a14:	movea.l d0,a6
   17a16:	move.l 20(sp),d0
   17a1a:	move.l 24(sp),d1
   17a1e:	jsr -96(a6)
   17a22:	move.l d0,4(sp)
   17a26:	move.l d1,8(sp)
   17a2a:	move.l 4(sp),12(sp)
   17a30:	move.l 8(sp),16(sp)
   17a36:	move.l 12(sp),d0
   17a3a:	move.l 16(sp),d1
}
   17a3e:	movea.l (sp)+,a6
   17a40:	lea 24(sp),sp
   17a44:	rts

00017a46 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17a46:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17a4a:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17a4e:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17a52:	mulu.w 8(sp),d1
	addw	d1, d0
   17a56:	add.w d1,d0
	swap	d0
   17a58:	swap d0
	clrw	d0
   17a5a:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17a5c:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17a60:	mulu.w 10(sp),d1
	addl	d1, d0
   17a64:	add.l d1,d0
	rts
   17a66:	rts

00017a68 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17a68:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17a6a:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17a6e:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17a72:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17a78:	   ,-- bcc.s 17a90 <__udivsi3+0x28>
	movel	d0, d2
   17a7a:	   |   move.l d0,d2
	clrw	d2
   17a7c:	   |   clr.w d2
	swap	d2
   17a7e:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17a80:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17a82:	   |   move.w d2,d0
	swap	d0
   17a84:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17a86:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17a8a:	   |   divu.w d1,d2
	movew	d2, d0
   17a8c:	   |   move.w d2,d0
	jra	6f
   17a8e:	,--|-- bra.s 17ac0 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17a90:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17a92:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17a94:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17a96:	|  |   cmpi.l #65536,d1
	jcc	4b
   17a9c:	|  '-- bcc.s 17a92 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17a9e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17aa0:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17aa6:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17aa8:	|      mulu.w d0,d1
	swap	d2
   17aaa:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17aac:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17aae:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17ab0:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17ab2:	|  ,-- bne.s 17abe <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17ab4:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17ab6:	|  +-- bcs.s 17abe <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17ab8:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17abc:	+--|-- bls.s 17ac0 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17abe:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17ac0:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17ac2:	       rts

00017ac4 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17ac4:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17ac6:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17ac8:	    move.l 12(sp),d1
	jpl	1f
   17acc:	,-- bpl.s 17ad2 <__divsi3+0xe>
	negl	d1
   17ace:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17ad0:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17ad2:	'-> move.l 8(sp),d0
	jpl	2f
   17ad6:	,-- bpl.s 17adc <__divsi3+0x18>
	negl	d0
   17ad8:	|   neg.l d0
	negb	d2
   17ada:	|   neg.b d2

2:	movel	d1, sp@-
   17adc:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ade:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17ae0:	    jsr 17a68 <__udivsi3>
	addql	#8, sp
   17ae6:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17ae8:	    tst.b d2
	jpl	3f
   17aea:	,-- bpl.s 17aee <__divsi3+0x2a>
	negl	d0
   17aec:	|   neg.l d0

3:	movel	sp@+, d2
   17aee:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17af0:	    rts

00017af2 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17af2:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17af6:	move.l 4(sp),d0
	movel	d1, sp@-
   17afa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17afc:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17afe:	jsr 17ac4 <__divsi3>
	addql	#8, sp
   17b04:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b06:	move.l 8(sp),d1
	movel	d1, sp@-
   17b0a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b0c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b0e:	jsr 17a46 <__mulsi3>
	addql	#8, sp
   17b14:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b16:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b1a:	sub.l d0,d1
	movel	d1, d0
   17b1c:	move.l d1,d0
	rts
   17b1e:	rts

00017b20 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17b20:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17b24:	move.l 4(sp),d0
	movel	d1, sp@-
   17b28:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b2a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17b2c:	jsr 17a68 <__udivsi3>
	addql	#8, sp
   17b32:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b34:	move.l 8(sp),d1
	movel	d1, sp@-
   17b38:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b3a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b3c:	jsr 17a46 <__mulsi3>
	addql	#8, sp
   17b42:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b44:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b48:	sub.l d0,d1
	movel	d1, d0
   17b4a:	move.l d1,d0
	rts
   17b4c:	rts

00017b4e <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17b4e:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17b50:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17b54:	jsr -516(a6)
    move.l (sp)+, a6
   17b58:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17b5a:	rts

00017b5c <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17b5c:	move.b d0,(a3)+
	rts
   17b5e:	rts
