
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #90112,d0
       8:	       subi.l #90112,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 16000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #90112,d0
      40:	       subi.l #90112,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 16000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 44a2 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #90112,d0
      7e:	       subi.l #90112,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 16000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr f534 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 17b28 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr f54c <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 16000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr f534 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 17b28 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 16000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr f534 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 17b28 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 12ae4 <PutChar+0x4>
     35c:	|  |              |   jsr 12018 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 17b30 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 17b30 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 17b30 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 17b30 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 17b30 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 17b30 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 17b30 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 12b0e <PutChar+0x2e>
     834:	|   jsr 12018 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 17b30 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 12b2a <PutChar+0x4a>
     8a6:	|   jsr 12018 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 17b30 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 17b30 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 17b30 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 17b30 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 17b30 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 17b30 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 17b30 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 17b30 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 17b28 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 17b30 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr f534 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 17b30 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 17b28 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 17b28 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #76626,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 17b28 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 12b5f <PutChar+0x7f>
     cea:	   |   jsr 12018 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 129ca <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 12aa4 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 12b7c <PutChar+0x9c>
     d66:	|      jsr 12018 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 17b28 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 17b28 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 17b28 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 17a14 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 5ac4 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),17a14 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 17a18 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 17a1c <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 12b8f <PutChar+0xaf>
     de8:	jsr 12018 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
     df4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
     df8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
     dfc:	       tst.l 24(sp)
     e00:	   /-- bge.s e06 <drawLine+0x12>
     e02:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
     e06:	   \-> tst.l 28(sp)
     e0a:	   /-- bge.s e10 <drawLine+0x1c>
     e0c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
     e10:	   \-> tst.l 32(sp)
     e14:	   /-- bge.s e1a <drawLine+0x26>
     e16:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
     e1a:	   \-> tst.l 36(sp)
     e1e:	   /-- bge.s e24 <drawLine+0x30>
     e20:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
     e24:	   \-> move.l 17baa <sceneWidth>,d0
     e2a:	       cmp.l 24(sp),d0
     e2e:	   /-- bge.s e3e <drawLine+0x4a>
     e30:	   |   move.l 17baa <sceneWidth>,d0
     e36:	   |   move.l d0,d1
     e38:	   |   subq.l #1,d1
     e3a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
     e3e:	   \-> move.l 17baa <sceneWidth>,d0
     e44:	       cmp.l 32(sp),d0
     e48:	   /-- bge.s e58 <drawLine+0x64>
     e4a:	   |   move.l 17baa <sceneWidth>,d0
     e50:	   |   move.l d0,d1
     e52:	   |   subq.l #1,d1
     e54:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
     e58:	   \-> move.l 17bae <sceneHeight>,d0
     e5e:	       cmp.l 28(sp),d0
     e62:	   /-- bge.s e72 <drawLine+0x7e>
     e64:	   |   move.l 17bae <sceneHeight>,d0
     e6a:	   |   move.l d0,d1
     e6c:	   |   subq.l #1,d1
     e6e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
     e72:	   \-> move.l 17bae <sceneHeight>,d0
     e78:	       cmp.l 36(sp),d0
     e7c:	   /-- bge.s e8c <drawLine+0x98>
     e7e:	   |   move.l 17bae <sceneHeight>,d0
     e84:	   |   move.l d0,d1
     e86:	   |   subq.l #1,d1
     e88:	   |   move.l d1,36(sp)

	if (x1 > x2) {
     e8c:	   \-> move.l 24(sp),d0
     e90:	       cmp.l 32(sp),d0
     e94:	/----- ble.s eb0 <drawLine+0xbc>
		x = x2; 
     e96:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
     e9c:	|      tst.w 10(sp)
     ea0:	|      seq d0
     ea2:	|      neg.b d0
     ea4:	|      move.b d0,d0
     ea6:	|      andi.w #255,d0
     eaa:	|      move.w d0,10(sp)
     eae:	|  /-- bra.s eb6 <drawLine+0xc2>
	} else x = x1;
     eb0:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
     eb6:	   \-> move.l 28(sp),d1
     eba:	       cmp.l 36(sp),d1
     ebe:	/----- ble.s eda <drawLine+0xe6>
		y = y2; 
     ec0:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
     ec6:	|      tst.w 10(sp)
     eca:	|      seq d0
     ecc:	|      neg.b d0
     ece:	|      move.b d0,d0
     ed0:	|      andi.w #255,d0
     ed4:	|      move.w d0,10(sp)
     ed8:	|  /-- bra.s ee0 <drawLine+0xec>
	} else y = y1;	
     eda:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
     ee0:	   \-> move.l 32(sp),d0
     ee4:	       sub.l 24(sp),d0
     ee8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
     eec:	       move.l 6(sp),d0
     ef0:	   /-- bpl.s ef4 <drawLine+0x100>
     ef2:	   |   neg.l d0
     ef4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
     ef8:	       move.l 36(sp),d1
     efc:	       sub.l 28(sp),d1
     f00:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
     f04:	       move.l 2(sp),d0
     f08:	   /-- bpl.s f0c <drawLine+0x118>
     f0a:	   |   neg.l d0
     f0c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
     f10:	       tst.l 6(sp)
     f14:	   /-- bne.s f38 <drawLine+0x144>
		diffX = 1;
     f16:	   |   moveq #1,d0
     f18:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
     f1c:	   |   move.l 17baa <sceneWidth>,d0
     f22:	   |   subq.l #1,d0
     f24:	   |   cmp.l 16(sp),d0
     f28:	   +-- bne.s f38 <drawLine+0x144>
     f2a:	   |   move.l 17baa <sceneWidth>,d0
     f30:	   |   move.l d0,d1
     f32:	   |   subq.l #2,d1
     f34:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
     f38:	   \-> tst.l 2(sp)
     f3c:	   /-- bne.s f60 <drawLine+0x16c>
		diffY = 1;
     f3e:	   |   moveq #1,d0
     f40:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
     f44:	   |   move.l 17bae <sceneHeight>,d0
     f4a:	   |   subq.l #1,d0
     f4c:	   |   cmp.l 12(sp),d0
     f50:	   +-- bne.s f60 <drawLine+0x16c>
     f52:	   |   move.l 17bae <sceneHeight>,d0
     f58:	   |   move.l d0,d1
     f5a:	   |   subq.l #2,d1
     f5c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
     f60:	   \-> pea 12bc8 <PutChar+0xe8>
     f66:	       jsr 12018 <KPrintF>
     f6c:	       addq.l #4,sp
	
}
     f6e:	       nop
     f70:	       lea 20(sp),sp
     f74:	       rts

00000f76 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
     f76:	                      lea -24(sp),sp
     f7a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
     f7c:	                      move.l 17a30 <firstTexture>,d0
     f82:	/-------------------- beq.w 1060 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
     f86:	|                     clr.l 24(sp)
     f8a:	|     /-------------- bra.w 1054 <deleteTextures+0xde>
			BOOL found = FALSE;
     f8e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
     f92:	|  |  |               move.l 17a30 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
     f9a:	|  |  |               movea.l 20(sp),a0
     f9e:	|  |  |               move.l (a0),d1
     fa0:	|  |  |               move.l 24(sp),d0
     fa4:	|  |  |               add.l d0,d0
     fa6:	|  |  |               add.l d0,d0
     fa8:	|  |  |               movea.l 36(sp),a0
     fac:	|  |  |               adda.l d0,a0
     fae:	|  |  |               move.l (a0),d0
     fb0:	|  |  |               cmp.l d1,d0
     fb2:	|  |  |  /----------- bne.w 1046 <deleteTextures+0xd0>
				found = TRUE;
     fb6:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
     fbc:	|  |  |  |            movea.l 20(sp),a0
     fc0:	|  |  |  |            move.l 12(a0),d0
     fc4:	|  |  |  |            move.l d0,17a30 <firstTexture>
				FreeVec(list);
     fca:	|  |  |  |            move.l 20(sp),6(sp)
     fd0:	|  |  |  |            move.l 17b28 <SysBase>,d0
     fd6:	|  |  |  |            movea.l d0,a6
     fd8:	|  |  |  |            movea.l 6(sp),a1
     fdc:	|  |  |  |            jsr -690(a6)
				continue;
     fe0:	|  |  |  |  /-------- bra.s 1050 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
     fe2:	|  |  |  |  |  /----> movea.l 20(sp),a0
     fe6:	|  |  |  |  |  |      movea.l 12(a0),a0
     fea:	|  |  |  |  |  |      move.l (a0),d1
     fec:	|  |  |  |  |  |      move.l 24(sp),d0
     ff0:	|  |  |  |  |  |      add.l d0,d0
     ff2:	|  |  |  |  |  |      add.l d0,d0
     ff4:	|  |  |  |  |  |      movea.l 36(sp),a0
     ff8:	|  |  |  |  |  |      adda.l d0,a0
     ffa:	|  |  |  |  |  |      move.l (a0),d0
     ffc:	|  |  |  |  |  |      cmp.l d1,d0
     ffe:	|  |  |  |  |  |  /-- bne.s 103c <deleteTextures+0xc6>
					found = TRUE;
    1000:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1006:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    100a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1010:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1014:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1018:	|  |  |  |  |  |  |   move.l 12(a0),d0
    101c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1020:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1024:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    102a:	|  |  |  |  |  |  |   move.l 17b28 <SysBase>,d0
    1030:	|  |  |  |  |  |  |   movea.l d0,a6
    1032:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1036:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    103a:	|  |  |  |  +--|--|-- bra.s 1050 <deleteTextures+0xda>
				}
				list = list->next;
    103c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1040:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1046:	|  |  |  \--|--|----> movea.l 20(sp),a0
    104a:	|  |  |     |  |      move.l 12(a0),d0
    104e:	|  |  |     |  \----- bne.s fe2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1050:	|  |  |     \-------> addq.l #1,24(sp)
    1054:	|  |  \-------------> move.l 24(sp),d0
    1058:	|  |                  cmp.l 32(sp),d0
    105c:	|  \----------------- bcs.w f8e <deleteTextures+0x18>
			}
		}
	}
}
    1060:	\-------------------> nop
    1062:	                      movea.l (sp)+,a6
    1064:	                      lea 24(sp),sp
    1068:	                      rts

0000106a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    106a:	subq.l #4,sp
    106c:	move.l 8(sp),d0
    1070:	move.w d0,d0
    1072:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1076:	pea 12beb <PutChar+0x10b>
    107c:	jsr 12018 <KPrintF>
    1082:	addq.l #4,sp
    1084:	nop
    1086:	addq.l #4,sp
    1088:	rts

0000108a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    108a:	       moveq #-1,d0
    108c:	       cmp.l 4(sp),d0
    1090:	   /-- bne.s 1096 <resourceNameFromNum+0xc>
    1092:	   |   moveq #0,d0
    1094:	/--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1096:	|  \-> move.l 17b04 <numResourceNames>,d0
    109c:	|  /-- bne.s 10a6 <resourceNameFromNum+0x1c>
    109e:	|  |   move.l #76827,d0
    10a4:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    10a6:	|  \-> move.l 17b04 <numResourceNames>,d0
    10ac:	|      cmp.l 4(sp),d0
    10b0:	|  /-- ble.s 10c8 <resourceNameFromNum+0x3e>
    10b2:	|  |   move.l 17ac0 <allResourceNames>,d1
    10b8:	|  |   move.l 4(sp),d0
    10bc:	|  |   add.l d0,d0
    10be:	|  |   add.l d0,d0
    10c0:	|  |   movea.l d1,a0
    10c2:	|  |   adda.l d0,a0
    10c4:	|  |   move.l (a0),d0
    10c6:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	return "Unknown resource";
    10c8:	|  \-> move.l #76836,d0
    10ce:	\----> rts

000010d0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    10d0:	          lea -40(sp),sp
    10d4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    10d8:	          move.l #320,17a28 <winWidth>
    winHeight = 256;
    10e2:	          move.l #256,17a2c <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    10ec:	          tst.l 56(sp)
    10f0:	      /-- bne.s 1108 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    10f2:	      |   pea 12c35 <PutChar+0x155>
    10f8:	      |   jsr b8 <copyString>
    10fe:	      |   addq.l #4,sp
    1100:	      |   move.l d0,17a40 <bundleFolder>
    1106:	   /--|-- bra.s 111e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1108:	   |  \-> movea.l 60(sp),a0
    110c:	   |      move.l (a0),d0
    110e:	   |      move.l d0,-(sp)
    1110:	   |      jsr b8 <copyString>
    1116:	   |      addq.l #4,sp
    1118:	   |      move.l d0,17a40 <bundleFolder>
	}
    
	int lastSlash = -1;
    111e:	   \----> moveq #-1,d0
    1120:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1124:	          clr.l 40(sp)
    1128:	   /----- bra.s 114a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    112a:	/--|----> move.l 17a40 <bundleFolder>,d1
    1130:	|  |      move.l 40(sp),d0
    1134:	|  |      movea.l d1,a0
    1136:	|  |      adda.l d0,a0
    1138:	|  |      move.b (a0),d0
    113a:	|  |      cmpi.b #47,d0
    113e:	|  |  /-- bne.s 1146 <main_sludge+0x76>
    1140:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1146:	|  |  \-> addq.l #1,40(sp)
    114a:	|  \----> move.l 17a40 <bundleFolder>,d1
    1150:	|         move.l 40(sp),d0
    1154:	|         movea.l d1,a0
    1156:	|         adda.l d0,a0
    1158:	|         move.b (a0),d0
    115a:	\-------- bne.s 112a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    115c:	          move.l 17a40 <bundleFolder>,d0
    1162:	          move.l 44(sp),d1
    1166:	          addq.l #1,d1
    1168:	          movea.l d0,a0
    116a:	          adda.l d1,a0
    116c:	          clr.b (a0)

	if (argc > 1) {
    116e:	          moveq #1,d0
    1170:	          cmp.l 56(sp),d0
    1174:	      /-- bge.s 1190 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1176:	      |   move.l 56(sp),d0
    117a:	      |   addi.l #1073741823,d0
    1180:	      |   add.l d0,d0
    1182:	      |   add.l d0,d0
    1184:	      |   movea.l 60(sp),a0
    1188:	      |   adda.l d0,a0
    118a:	      |   move.l (a0),48(sp)
    118e:	   /--|-- bra.s 11ea <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1190:	   |  \-> move.l 17a40 <bundleFolder>,d0
    1196:	   |      pea 12c3b <PutChar+0x15b>
    119c:	   |      move.l d0,-(sp)
    119e:	   |      jsr f574 <joinStrings>
    11a4:	   |      addq.l #8,sp
    11a6:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    11aa:	   |      move.l 48(sp),-(sp)
    11ae:	   |      jsr f48a <fileExists>
    11b4:	   |      addq.l #4,sp
    11b6:	   |      tst.b d0
    11b8:	   +----- bne.s 11ea <main_sludge+0x11a>
			FreeVec(sludgeFile);
    11ba:	   |      move.l 48(sp),36(sp)
    11c0:	   |      move.l 17b28 <SysBase>,d0
    11c6:	   |      movea.l d0,a6
    11c8:	   |      movea.l 36(sp),a1
    11cc:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    11d0:	   |      move.l 17a40 <bundleFolder>,d0
    11d6:	   |      pea 12c48 <PutChar+0x168>
    11dc:	   |      move.l d0,-(sp)
    11de:	   |      jsr f574 <joinStrings>
    11e4:	   |      addq.l #8,sp
    11e6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    11ea:	   \----> move.l 48(sp),-(sp)
    11ee:	          jsr f48a <fileExists>
    11f4:	          addq.l #4,sp
    11f6:	          tst.b d0
    11f8:	      /-- bne.s 1242 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    11fa:	      |   move.l 17b30 <DOSBase>,d0
    1200:	      |   movea.l d0,a6
    1202:	      |   jsr -60(a6)
    1206:	      |   move.l d0,28(sp)
    120a:	      |   move.l 28(sp),d0
    120e:	      |   move.l d0,24(sp)
    1212:	      |   move.l #76881,20(sp)
    121a:	      |   moveq #21,d0
    121c:	      |   move.l d0,16(sp)
    1220:	      |   move.l 17b30 <DOSBase>,d0
    1226:	      |   movea.l d0,a6
    1228:	      |   move.l 24(sp),d1
    122c:	      |   move.l 20(sp),d2
    1230:	      |   move.l 16(sp),d3
    1234:	      |   jsr -48(a6)
    1238:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    123c:	      |   moveq #0,d0
    123e:	/-----|-- bra.w 1354 <main_sludge+0x284>
	}

	setGameFilePath (sludgeFile);
    1242:	|     \-> move.l 48(sp),-(sp)
    1246:	|         jsr 135e <setGameFilePath>
    124c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    124e:	|         move.l 48(sp),-(sp)
    1252:	|         jsr 2c78 <initSludge>
    1258:	|         addq.l #4,sp
    125a:	|         tst.w d0
    125c:	|     /-- bne.s 1264 <main_sludge+0x194>
    125e:	|     |   moveq #0,d0
    1260:	+-----|-- bra.w 1354 <main_sludge+0x284>
	
	if (! resizeBackdrop (winWidth, winHeight)) {
    1264:	|     \-> move.l 17a2c <winHeight>,d0
    126a:	|         move.l d0,d1
    126c:	|         move.l 17a28 <winWidth>,d0
    1272:	|         move.l d1,-(sp)
    1274:	|         move.l d0,-(sp)
    1276:	|         jsr 8c86 <resizeBackdrop>
    127c:	|         addq.l #8,sp
    127e:	|         tst.w d0
    1280:	|     /-- bne.s 1296 <main_sludge+0x1c6>
		KPrintF("Couldn't allocate memory for backdrop");
    1282:	|     |   pea 12c67 <PutChar+0x187>
    1288:	|     |   jsr 12018 <KPrintF>
    128e:	|     |   addq.l #4,sp
		return FALSE;
    1290:	|     |   moveq #0,d0
    1292:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initPeople ())
    1296:	|     \-> jsr 650a <initPeople>
    129c:	|         tst.w d0
    129e:	|     /-- bne.s 12b4 <main_sludge+0x1e4>
	{
		KPrintF("Couldn't initialise people stuff");
    12a0:	|     |   pea 12c8d <PutChar+0x1ad>
    12a6:	|     |   jsr 12018 <KPrintF>
    12ac:	|     |   addq.l #4,sp
		return FALSE;
    12ae:	|     |   moveq #0,d0
    12b0:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initFloor ())
    12b4:	|     \-> jsr 1141e <initFloor>
    12ba:	|         tst.w d0
    12bc:	|     /-- bne.s 12d2 <main_sludge+0x202>
	{
		KPrintF("Couldn't initialise floor stuff");
    12be:	|     |   pea 12cae <PutChar+0x1ce>
    12c4:	|     |   jsr 12018 <KPrintF>
    12ca:	|     |   addq.l #4,sp
		return FALSE;
    12cc:	|     |   moveq #0,d0
    12ce:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initObjectTypes ())
    12d2:	|     \-> jsr 8e30 <initObjectTypes>
    12d8:	|         tst.w d0
    12da:	|     /-- bne.s 12ee <main_sludge+0x21e>
	{
		KPrintF("Couldn't initialise object type stuff");
    12dc:	|     |   pea 12cce <PutChar+0x1ee>
    12e2:	|     |   jsr 12018 <KPrintF>
    12e8:	|     |   addq.l #4,sp
		return FALSE;
    12ea:	|     |   moveq #0,d0
    12ec:	+-----|-- bra.s 1354 <main_sludge+0x284>
	}

	initSpeech ();
    12ee:	|     \-> jsr 4d98 <initSpeech>
	initStatusBar ();
    12f4:	|         jsr 485c <initStatusBar>

	gameName = getNumberedString(1);
    12fa:	|         pea 1 <_start+0x1>
    12fe:	|         jsr 3df6 <getNumberedString>
    1304:	|         addq.l #4,sp
    1306:	|         move.l d0,17a38 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    130c:	|         move.l 17af8 <noStack>,d0
    1312:	|         pea 1 <_start+0x1>
    1316:	|         move.l d0,-(sp)
    1318:	|         clr.l -(sp)
    131a:	|         clr.l -(sp)
    131c:	|         clr.l -(sp)
    131e:	|         jsr 3c86 <startNewFunctionNum>
    1324:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1328:	|         clr.l 17a44 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {
    132e:	|     /-- bra.s 1336 <main_sludge+0x266>
		handleInput();
    1330:	|  /--|-> jsr 2c70 <handleInput>
	while ( !weAreDoneSoQuit ) {
    1336:	|  |  \-> move.l 17a44 <weAreDoneSoQuit>,d0
    133c:	|  \----- beq.s 1330 <main_sludge+0x260>
	}
	//Amiga Cleanup
	FreeVec(sludgeFile);
    133e:	|         move.l 48(sp),32(sp)
    1344:	|         move.l 17b28 <SysBase>,d0
    134a:	|         movea.l d0,a6
    134c:	|         movea.l 32(sp),a1
    1350:	|         jsr -690(a6)
}
    1354:	\-------> movem.l (sp)+,d2-d3/a6
    1358:	          lea 40(sp),sp
    135c:	          rts

0000135e <setGameFilePath>:

void setGameFilePath (char * f) {
    135e:	          lea -1104(sp),sp
    1362:	          move.l a6,-(sp)
    1364:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1366:	          move.l #1112,d0
    136c:	          add.l sp,d0
    136e:	          addi.l #-1102,d0
    1374:	          move.l d0,1100(sp)
    1378:	          move.l #998,1096(sp)
    1380:	          move.l 17b30 <DOSBase>,d0
    1386:	          movea.l d0,a6
    1388:	          move.l 1100(sp),d1
    138c:	          move.l 1096(sp),d2
    1390:	          jsr -564(a6)
    1394:	          move.w d0,1094(sp)
    1398:	          move.w 1094(sp),d0
    139c:	      /-- bne.s 13ac <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    139e:	      |   pea 12cf4 <PutChar+0x214>
    13a4:	      |   jsr 12018 <KPrintF>
    13aa:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    13ac:	      \-> moveq #-1,d0
    13ae:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    13b2:	          clr.l 1104(sp)
    13b6:	   /----- bra.s 13d4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    13b8:	/--|----> move.l 1104(sp),d0
    13bc:	|  |      movea.l 1116(sp),a0
    13c0:	|  |      adda.l d0,a0
    13c2:	|  |      move.b (a0),d0
    13c4:	|  |      cmpi.b #47,d0
    13c8:	|  |  /-- bne.s 13d0 <setGameFilePath+0x72>
    13ca:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    13d0:	|  |  \-> addq.l #1,1104(sp)
    13d4:	|  \----> move.l 1104(sp),d0
    13d8:	|         movea.l 1116(sp),a0
    13dc:	|         adda.l d0,a0
    13de:	|         move.b (a0),d0
    13e0:	\-------- bne.s 13b8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    13e2:	          moveq #-1,d0
    13e4:	          cmp.l 1108(sp),d0
    13e8:	   /----- beq.s 1462 <setGameFilePath+0x104>
		f[got] = 0;	
    13ea:	   |      move.l 1108(sp),d0
    13ee:	   |      movea.l 1116(sp),a0
    13f2:	   |      adda.l d0,a0
    13f4:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    13f6:	   |      move.l 1116(sp),1090(sp)
    13fc:	   |      moveq #-2,d0
    13fe:	   |      move.l d0,1086(sp)
    1402:	   |      move.l 17b30 <DOSBase>,d0
    1408:	   |      movea.l d0,a6
    140a:	   |      move.l 1090(sp),d1
    140e:	   |      move.l 1086(sp),d2
    1412:	   |      jsr -84(a6)
    1416:	   |      move.l d0,1082(sp)
    141a:	   |      move.l 1082(sp),d0
    141e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1422:	   |      move.l 1078(sp),1074(sp)
    1428:	   |      move.l 17b30 <DOSBase>,d0
    142e:	   |      movea.l d0,a6
    1430:	   |      move.l 1074(sp),d1
    1434:	   |      jsr -126(a6)
    1438:	   |      move.l d0,1070(sp)
    143c:	   |      move.l 1070(sp),d0
    1440:	   |  /-- bne.s 1454 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1442:	   |  |   move.l 1116(sp),-(sp)
    1446:	   |  |   pea 12d1a <PutChar+0x23a>
    144c:	   |  |   jsr 12018 <KPrintF>
    1452:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1454:	   |  \-> move.l 1108(sp),d0
    1458:	   |      movea.l 1116(sp),a0
    145c:	   |      adda.l d0,a0
    145e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1462:	   \----> move.l #400,1066(sp)
    146a:	          clr.l 1062(sp)
    146e:	          move.l 17b28 <SysBase>,d0
    1474:	          movea.l d0,a6
    1476:	          move.l 1066(sp),d0
    147a:	          move.l 1062(sp),d1
    147e:	          jsr -684(a6)
    1482:	          move.l d0,1058(sp)
    1486:	          move.l 1058(sp),d0
    148a:	          move.l d0,17a3c <gamePath>
	if (gamePath==0) {
    1490:	          move.l 17a3c <gamePath>,d0
    1496:	      /-- bne.s 14aa <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1498:	      |   pea 12d4d <PutChar+0x26d>
    149e:	      |   jsr 12018 <KPrintF>
    14a4:	      |   addq.l #4,sp
    14a6:	   /--|-- bra.w 1592 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    14aa:	   |  \-> move.l 17a3c <gamePath>,1054(sp)
    14b2:	   |      moveq #-2,d0
    14b4:	   |      move.l d0,1050(sp)
    14b8:	   |      move.l 17b30 <DOSBase>,d0
    14be:	   |      movea.l d0,a6
    14c0:	   |      move.l 1054(sp),d1
    14c4:	   |      move.l 1050(sp),d2
    14c8:	   |      jsr -84(a6)
    14cc:	   |      move.l d0,1046(sp)
    14d0:	   |      move.l 1046(sp),d0
    14d4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    14d8:	   |      move.l 1042(sp),1038(sp)
    14de:	   |      move.l 17b30 <DOSBase>,d0
    14e4:	   |      movea.l d0,a6
    14e6:	   |      move.l 1038(sp),d1
    14ea:	   |      jsr -126(a6)
    14ee:	   |      move.l d0,1034(sp)
    14f2:	   |      move.l 1034(sp),d0
    14f6:	   |  /-- bne.s 1506 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    14f8:	   |  |   pea 12d88 <PutChar+0x2a8>
    14fe:	   |  |   jsr 12018 <KPrintF>
    1504:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1506:	   |  \-> move.l #1112,d0
    150c:	   |      add.l sp,d0
    150e:	   |      addi.l #-1102,d0
    1514:	   |      move.l d0,1030(sp)
    1518:	   |      moveq #-2,d0
    151a:	   |      move.l d0,1026(sp)
    151e:	   |      move.l 17b30 <DOSBase>,d0
    1524:	   |      movea.l d0,a6
    1526:	   |      move.l 1030(sp),d1
    152a:	   |      move.l 1026(sp),d2
    152e:	   |      jsr -84(a6)
    1532:	   |      move.l d0,1022(sp)
    1536:	   |      move.l 1022(sp),d0
    153a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    153e:	   |      move.l 1042(sp),1018(sp)
    1544:	   |      move.l 17b30 <DOSBase>,d0
    154a:	   |      movea.l d0,a6
    154c:	   |      move.l 1018(sp),d1
    1550:	   |      jsr -126(a6)
    1554:	   |      move.l d0,1014(sp)
    1558:	   |      move.l 1014(sp),d0
    155c:	   |  /-- bne.s 1572 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    155e:	   |  |   moveq #10,d0
    1560:	   |  |   add.l sp,d0
    1562:	   |  |   move.l d0,-(sp)
    1564:	   |  |   pea 12db4 <PutChar+0x2d4>
    156a:	   |  |   jsr 12018 <KPrintF>
    1570:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1572:	   |  \-> move.l 17a3c <gamePath>,d0
    1578:	   +----- beq.s 1592 <setGameFilePath+0x234>
    157a:	   |      move.l 17a3c <gamePath>,1010(sp)
    1582:	   |      move.l 17b28 <SysBase>,d0
    1588:	   |      movea.l d0,a6
    158a:	   |      movea.l 1010(sp),a1
    158e:	   |      jsr -690(a6)
}
    1592:	   \----> move.l (sp)+,d2
    1594:	          movea.l (sp)+,a6
    1596:	          lea 1104(sp),sp
    159a:	          rts

0000159c <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    159c:	    subq.l #4,sp
    159e:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    15a0:	    move.l 17a98 <zBuffer+0x50>,d0
    15a6:	/-- beq.s 15de <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    15a8:	|   pea 17a9c <zBuffer+0x54>
    15ae:	|   pea 1 <_start+0x1>
    15b2:	|   jsr f76 <deleteTextures>
    15b8:	|   addq.l #8,sp
		zBuffer.texName = 0;
    15ba:	|   clr.l 17a9c <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    15c0:	|   move.l 17a98 <zBuffer+0x50>,4(sp)
    15c8:	|   move.l 17b28 <SysBase>,d0
    15ce:	|   movea.l d0,a6
    15d0:	|   movea.l 4(sp),a1
    15d4:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    15d8:	|   clr.l 17a98 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    15de:	\-> clr.l 17a50 <zBuffer+0x8>
	zBuffer.originalNum =0;
    15e4:	    clr.l 17a94 <zBuffer+0x4c>
}
    15ea:	    nop
    15ec:	    movea.l (sp)+,a6
    15ee:	    addq.l #4,sp
    15f0:	    rts

000015f2 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    15f2:	                         lea -528(sp),sp
    15f6:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    15fa:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    15fe:	                         jsr 159c <killZBuffer>

	zBuffer.originalNum = y;
    1604:	                         move.l 544(sp),d0
    1608:	                         move.l d0,17a94 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    160e:	                         move.l 544(sp),d0
    1612:	                         move.l d0,-(sp)
    1614:	                         jsr 3ef4 <openFileFromNum>
    161a:	                         addq.l #4,sp
    161c:	                         tst.l d0
    161e:	                     /-- bne.s 1626 <setZBuffer+0x34>
    1620:	                     |   clr.w d0
    1622:	/--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1626:	|                    \-> move.l 17b10 <bigDataFile>,524(sp)
    162e:	|                        move.l 17b30 <DOSBase>,d0
    1634:	|                        movea.l d0,a6
    1636:	|                        move.l 524(sp),d1
    163a:	|                        jsr -306(a6)
    163e:	|                        move.l d0,520(sp)
    1642:	|                        move.l 520(sp),d0
    1646:	|                        moveq #83,d1
    1648:	|                        cmp.l d0,d1
    164a:	|                    /-- beq.s 16ac <setZBuffer+0xba>
    164c:	|                    |   move.l 17b10 <bigDataFile>,516(sp)
    1654:	|                    |   move.l 17b30 <DOSBase>,d0
    165a:	|                    |   movea.l d0,a6
    165c:	|                    |   move.l 516(sp),d1
    1660:	|                    |   jsr -306(a6)
    1664:	|                    |   move.l d0,512(sp)
    1668:	|                    |   move.l 512(sp),d0
    166c:	|                    |   moveq #122,d1
    166e:	|                    |   cmp.l d0,d1
    1670:	|                    +-- beq.s 16ac <setZBuffer+0xba>
    1672:	|                    |   move.l 17b10 <bigDataFile>,508(sp)
    167a:	|                    |   move.l 17b30 <DOSBase>,d0
    1680:	|                    |   movea.l d0,a6
    1682:	|                    |   move.l 508(sp),d1
    1686:	|                    |   jsr -306(a6)
    168a:	|                    |   move.l d0,504(sp)
    168e:	|                    |   move.l 504(sp),d0
    1692:	|                    |   moveq #98,d1
    1694:	|                    |   cmp.l d0,d1
    1696:	|                    +-- beq.s 16ac <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1698:	|                    |   pea 12de6 <cursors.c.46c58bd4+0x1f>
    169e:	|                    |   jsr 12018 <KPrintF>
    16a4:	|                    |   addq.l #4,sp
		 return FALSE;
    16a6:	|                    |   clr.w d0
    16a8:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    16ac:	|                    \-> move.l 17b10 <bigDataFile>,500(sp)
    16b4:	|                        move.l 17b30 <DOSBase>,d0
    16ba:	|                        movea.l d0,a6
    16bc:	|                        move.l 500(sp),d1
    16c0:	|                        jsr -306(a6)
    16c4:	|                        move.l d0,496(sp)
    16c8:	|                        move.l 496(sp),d0
    16cc:	|                    /-- beq.s 16d6 <setZBuffer+0xe4>
    16ce:	|                    |   moveq #1,d1
    16d0:	|                    |   cmp.l d0,d1
    16d2:	|                 /--|-- beq.s 16ec <setZBuffer+0xfa>
    16d4:	|              /--|--|-- bra.s 171a <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    16d6:	|              |  |  \-> move.l #640,17a48 <zBuffer>
		zBuffer.height = 480;
    16e0:	|              |  |      move.l #480,17a4c <zBuffer+0x4>
		break;
    16ea:	|              |  |  /-- bra.s 172e <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    16ec:	|              |  \--|-> move.l 17b10 <bigDataFile>,d0
    16f2:	|              |     |   move.l d0,-(sp)
    16f4:	|              |     |   jsr 6bc <get2bytes>
    16fa:	|              |     |   addq.l #4,sp
    16fc:	|              |     |   move.l d0,17a48 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1702:	|              |     |   move.l 17b10 <bigDataFile>,d0
    1708:	|              |     |   move.l d0,-(sp)
    170a:	|              |     |   jsr 6bc <get2bytes>
    1710:	|              |     |   addq.l #4,sp
    1712:	|              |     |   move.l d0,17a4c <zBuffer+0x4>
		break;
    1718:	|              |     +-- bra.s 172e <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    171a:	|              \-----|-> pea 12dfa <cursors.c.46c58bd4+0x33>
    1720:	|                    |   jsr 12018 <KPrintF>
    1726:	|                    |   addq.l #4,sp
		return FALSE;
    1728:	|                    |   clr.w d0
    172a:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    172e:	|                    \-> move.l 17a48 <zBuffer>,d0
    1734:	|                        move.l d0,d1
    1736:	|                        move.l 17baa <sceneWidth>,d0
    173c:	|                        cmp.l d1,d0
    173e:	|                    /-- bne.s 1752 <setZBuffer+0x160>
    1740:	|                    |   move.l 17a4c <zBuffer+0x4>,d0
    1746:	|                    |   move.l d0,d1
    1748:	|                    |   move.l 17bae <sceneHeight>,d0
    174e:	|                    |   cmp.l d1,d0
    1750:	|                 /--|-- beq.s 17a2 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1752:	|                 |  \-> movea.l 17bae <sceneHeight>,a1
    1758:	|                 |      movea.l 17baa <sceneWidth>,a0
    175e:	|                 |      move.l 17a4c <zBuffer+0x4>,d1
    1764:	|                 |      move.l 17a48 <zBuffer>,d0
    176a:	|                 |      move.l a1,-(sp)
    176c:	|                 |      move.l a0,-(sp)
    176e:	|                 |      move.l d1,-(sp)
    1770:	|                 |      move.l d0,-(sp)
    1772:	|                 |      pea 12e46 <cursors.c.46c58bd4+0x7f>
    1778:	|                 |      moveq #32,d0
    177a:	|                 |      add.l sp,d0
    177c:	|                 |      move.l d0,-(sp)
    177e:	|                 |      jsr f852 <sprintf>
    1784:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    1788:	|                 |      moveq #12,d0
    178a:	|                 |      add.l sp,d0
    178c:	|                 |      move.l d0,-(sp)
    178e:	|                 |      pea 12e61 <cursors.c.46c58bd4+0x9a>
    1794:	|                 |      jsr 12018 <KPrintF>
    179a:	|                 |      addq.l #8,sp
		return FALSE;
    179c:	|                 |      clr.w d0
    179e:	+-----------------|----- bra.w 1a04 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    17a2:	|                 \----> move.l 17b10 <bigDataFile>,492(sp)
    17aa:	|                        move.l 17b30 <DOSBase>,d0
    17b0:	|                        movea.l d0,a6
    17b2:	|                        move.l 492(sp),d1
    17b6:	|                        jsr -306(a6)
    17ba:	|                        move.l d0,488(sp)
    17be:	|                        move.l 488(sp),d0
    17c2:	|                        move.l d0,17a50 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17c8:	|                        clr.l 544(sp)
    17cc:	|                    /-- bra.s 17f8 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    17ce:	|                 /--|-> move.l 17b10 <bigDataFile>,d0
    17d4:	|                 |  |   move.l d0,-(sp)
    17d6:	|                 |  |   jsr 6bc <get2bytes>
    17dc:	|                 |  |   addq.l #4,sp
    17de:	|                 |  |   move.l 544(sp),d1
    17e2:	|                 |  |   add.l d1,d1
    17e4:	|                 |  |   add.l d1,d1
    17e6:	|                 |  |   lea 540(sp),a0
    17ea:	|                 |  |   add.l a0,d1
    17ec:	|                 |  |   movea.l d1,a0
    17ee:	|                 |  |   lea -144(a0),a0
    17f2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17f4:	|                 |  |   addq.l #1,544(sp)
    17f8:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    17fe:	|                 |      cmp.l 544(sp),d0
    1802:	|                 \----- bhi.s 17ce <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1804:	|                        move.l 17a50 <zBuffer+0x8>,d0
    180a:	|                        move.l d0,-(sp)
    180c:	|                        move.l sp,d0
    180e:	|                        addi.l #336,d0
    1814:	|                        move.l d0,-(sp)
    1816:	|                        move.l sp,d0
    1818:	|                        addi.l #404,d0
    181e:	|                        move.l d0,-(sp)
    1820:	|                        jsr 1a0e <sortZPal>
    1826:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    182a:	|                        clr.l 544(sp)
    182e:	|                    /-- bra.s 18a6 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1830:	|                 /--|-> move.l 544(sp),d0
    1834:	|                 |  |   add.l d0,d0
    1836:	|                 |  |   add.l d0,d0
    1838:	|                 |  |   move.l #540,d1
    183e:	|                 |  |   add.l sp,d1
    1840:	|                 |  |   add.l d1,d0
    1842:	|                 |  |   movea.l d0,a0
    1844:	|                 |  |   lea -208(a0),a0
    1848:	|                 |  |   move.l (a0),d0
    184a:	|                 |  |   add.l d0,d0
    184c:	|                 |  |   add.l d0,d0
    184e:	|                 |  |   lea 540(sp),a0
    1852:	|                 |  |   add.l a0,d0
    1854:	|                 |  |   movea.l d0,a0
    1856:	|                 |  |   lea -144(a0),a0
    185a:	|                 |  |   move.l (a0),d0
    185c:	|                 |  |   move.l 544(sp),d1
    1860:	|                 |  |   addq.l #3,d1
    1862:	|                 |  |   add.l d1,d1
    1864:	|                 |  |   movea.l d1,a1
    1866:	|                 |  |   adda.l d1,a1
    1868:	|                 |  |   lea 17a48 <zBuffer>,a0
    186e:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1872:	|                 |  |   move.l 544(sp),d0
    1876:	|                 |  |   add.l d0,d0
    1878:	|                 |  |   add.l d0,d0
    187a:	|                 |  |   move.l #540,d1
    1880:	|                 |  |   add.l sp,d1
    1882:	|                 |  |   add.l d1,d0
    1884:	|                 |  |   movea.l d0,a0
    1886:	|                 |  |   lea -208(a0),a0
    188a:	|                 |  |   move.l (a0),d1
    188c:	|                 |  |   move.l 544(sp),d0
    1890:	|                 |  |   add.l d1,d1
    1892:	|                 |  |   add.l d1,d1
    1894:	|                 |  |   lea 540(sp),a0
    1898:	|                 |  |   add.l a0,d1
    189a:	|                 |  |   movea.l d1,a0
    189c:	|                 |  |   lea -272(a0),a0
    18a0:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    18a2:	|                 |  |   addq.l #1,544(sp)
    18a6:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    18ac:	|                 |      cmp.l 544(sp),d0
    18b0:	|                 \----- bhi.w 1830 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    18b4:	|                        move.l 17baa <sceneWidth>,d0
    18ba:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    18be:	|                        move.l 17bae <sceneHeight>,d0
    18c4:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    18c8:	|                        move.l 484(sp),-(sp)
    18cc:	|                        move.l 484(sp),-(sp)
    18d0:	|                        jsr 129ca <__mulsi3>
    18d6:	|                        addq.l #8,sp
    18d8:	|                        move.l d0,476(sp)
    18dc:	|                        clr.l 472(sp)
    18e0:	|                        move.l 17b28 <SysBase>,d0
    18e6:	|                        movea.l d0,a6
    18e8:	|                        move.l 476(sp),d0
    18ec:	|                        move.l 472(sp),d1
    18f0:	|                        jsr -684(a6)
    18f4:	|                        move.l d0,468(sp)
    18f8:	|                        move.l 468(sp),d0
    18fc:	|                        move.l d0,17a98 <zBuffer+0x50>
	if (!zBuffer.tex) {
    1902:	|                        move.l 17a98 <zBuffer+0x50>,d0
    1908:	|                    /-- bne.s 191e <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    190a:	|                    |   pea 12e9e <cursors.c.46c58bd4+0xd7>
    1910:	|                    |   jsr 12018 <KPrintF>
    1916:	|                    |   addq.l #4,sp
		return FALSE;
    1918:	|                    |   clr.w d0
    191a:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    191e:	|                    \-> clr.l 544(sp)
    1922:	|     /----------------- bra.w 19ee <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1926:	|  /--|----------------> clr.l 536(sp)
    192a:	|  |  |     /----------- bra.w 19da <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    192e:	|  |  |  /--|----------> tst.l 528(sp)
    1932:	|  |  |  |  |  /-------- bne.s 1990 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1934:	|  |  |  |  |  |         move.l 17b10 <bigDataFile>,464(sp)
    193c:	|  |  |  |  |  |         move.l 17b30 <DOSBase>,d0
    1942:	|  |  |  |  |  |         movea.l d0,a6
    1944:	|  |  |  |  |  |         move.l 464(sp),d1
    1948:	|  |  |  |  |  |         jsr -306(a6)
    194c:	|  |  |  |  |  |         move.l d0,460(sp)
    1950:	|  |  |  |  |  |         move.l 460(sp),d0
    1954:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    1958:	|  |  |  |  |  |         move.l 532(sp),d0
    195c:	|  |  |  |  |  |         asr.l #4,d0
    195e:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1962:	|  |  |  |  |  |         moveq #15,d0
    1964:	|  |  |  |  |  |         cmp.l 528(sp),d0
    1968:	|  |  |  |  |  |  /----- bne.s 1986 <setZBuffer+0x394>
    196a:	|  |  |  |  |  |  |      move.l 17b10 <bigDataFile>,d0
    1970:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1972:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    1978:	|  |  |  |  |  |  |      addq.l #4,sp
    197a:	|  |  |  |  |  |  |      movea.l d0,a0
    197c:	|  |  |  |  |  |  |      lea 16(a0),a0
    1980:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1984:	|  |  |  |  |  |  |  /-- bra.s 198a <setZBuffer+0x398>
				else stillToGo ++;
    1986:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    198a:	|  |  |  |  |  |     \-> moveq #15,d1
    198c:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    1990:	|  |  |  |  |  \-------> move.l 532(sp),d0
    1994:	|  |  |  |  |            add.l d0,d0
    1996:	|  |  |  |  |            add.l d0,d0
    1998:	|  |  |  |  |            lea 540(sp),a0
    199c:	|  |  |  |  |            add.l a0,d0
    199e:	|  |  |  |  |            movea.l d0,a0
    19a0:	|  |  |  |  |            lea -272(a0),a0
    19a4:	|  |  |  |  |            move.l (a0),d0
    19a6:	|  |  |  |  |            move.l d0,d2
    19a8:	|  |  |  |  |            move.l 17a98 <zBuffer+0x50>,d3
    19ae:	|  |  |  |  |            move.l 484(sp),d0
    19b2:	|  |  |  |  |            move.l 544(sp),-(sp)
    19b6:	|  |  |  |  |            move.l d0,-(sp)
    19b8:	|  |  |  |  |            jsr 129ca <__mulsi3>
    19be:	|  |  |  |  |            addq.l #8,sp
    19c0:	|  |  |  |  |            move.l d0,d1
    19c2:	|  |  |  |  |            move.l 536(sp),d0
    19c6:	|  |  |  |  |            add.l d1,d0
    19c8:	|  |  |  |  |            movea.l d3,a0
    19ca:	|  |  |  |  |            adda.l d0,a0
    19cc:	|  |  |  |  |            move.b d2,d0
    19ce:	|  |  |  |  |            lsl.b #4,d0
    19d0:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    19d2:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    19d6:	|  |  |  |  |            addq.l #1,536(sp)
    19da:	|  |  |  |  \----------> move.l 536(sp),d1
    19de:	|  |  |  |               move.l 17baa <sceneWidth>,d0
    19e4:	|  |  |  |               cmp.l d1,d0
    19e6:	|  |  |  \-------------- bhi.w 192e <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    19ea:	|  |  |                  addq.l #1,544(sp)
    19ee:	|  |  \----------------> move.l 17bae <sceneHeight>,d0
    19f4:	|  |                     cmp.l 544(sp),d0
    19f8:	|  \-------------------- bhi.w 1926 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    19fc:	|                        jsr 3dec <finishAccess>
	
	return TRUE;
    1a02:	|                        moveq #1,d0
}
    1a04:	\----------------------> movem.l (sp)+,d2-d3/a6
    1a08:	                         lea 528(sp),sp
    1a0c:	                         rts

00001a0e <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1a0e:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1a10:	             clr.l 4(sp)
    1a14:	         /-- bra.s 1a2c <sortZPal+0x1e>
		newpal[i] = i;
    1a16:	      /--|-> move.l 4(sp),d0
    1a1a:	      |  |   add.l d0,d0
    1a1c:	      |  |   add.l d0,d0
    1a1e:	      |  |   movea.l 16(sp),a0
    1a22:	      |  |   adda.l d0,a0
    1a24:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    1a28:	      |  |   addq.l #1,4(sp)
    1a2c:	      |  \-> move.l 4(sp),d0
    1a30:	      |      cmp.l 20(sp),d0
    1a34:	      \----- blt.s 1a16 <sortZPal+0x8>
	}

	if (size < 2) return;		
    1a36:	             moveq #1,d0
    1a38:	             cmp.l 20(sp),d0
    1a3c:	/----------- bge.w 1aee <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    1a40:	|            moveq #1,d0
    1a42:	|            move.l d0,4(sp)
    1a46:	|     /----- bra.w 1ae0 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    1a4a:	|  /--|----> move.l 4(sp),d0
    1a4e:	|  |  |      add.l d0,d0
    1a50:	|  |  |      add.l d0,d0
    1a52:	|  |  |      movea.l 16(sp),a0
    1a56:	|  |  |      adda.l d0,a0
    1a58:	|  |  |      move.l (a0),d0
    1a5a:	|  |  |      add.l d0,d0
    1a5c:	|  |  |      add.l d0,d0
    1a5e:	|  |  |      movea.l 12(sp),a0
    1a62:	|  |  |      adda.l d0,a0
    1a64:	|  |  |      move.l (a0),d1
    1a66:	|  |  |      move.l 4(sp),d0
    1a6a:	|  |  |      addi.l #1073741823,d0
    1a70:	|  |  |      add.l d0,d0
    1a72:	|  |  |      add.l d0,d0
    1a74:	|  |  |      movea.l 16(sp),a0
    1a78:	|  |  |      adda.l d0,a0
    1a7a:	|  |  |      move.l (a0),d0
    1a7c:	|  |  |      add.l d0,d0
    1a7e:	|  |  |      add.l d0,d0
    1a80:	|  |  |      movea.l 12(sp),a0
    1a84:	|  |  |      adda.l d0,a0
    1a86:	|  |  |      move.l (a0),d0
    1a88:	|  |  |      cmp.l d1,d0
    1a8a:	|  |  |  /-- ble.s 1adc <sortZPal+0xce>
			tmp = newpal[i];
    1a8c:	|  |  |  |   move.l 4(sp),d0
    1a90:	|  |  |  |   add.l d0,d0
    1a92:	|  |  |  |   add.l d0,d0
    1a94:	|  |  |  |   movea.l 16(sp),a0
    1a98:	|  |  |  |   adda.l d0,a0
    1a9a:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    1a9c:	|  |  |  |   move.l 4(sp),d0
    1aa0:	|  |  |  |   addi.l #1073741823,d0
    1aa6:	|  |  |  |   add.l d0,d0
    1aa8:	|  |  |  |   add.l d0,d0
    1aaa:	|  |  |  |   movea.l 16(sp),a1
    1aae:	|  |  |  |   adda.l d0,a1
    1ab0:	|  |  |  |   move.l 4(sp),d0
    1ab4:	|  |  |  |   add.l d0,d0
    1ab6:	|  |  |  |   add.l d0,d0
    1ab8:	|  |  |  |   movea.l 16(sp),a0
    1abc:	|  |  |  |   adda.l d0,a0
    1abe:	|  |  |  |   move.l (a1),d0
    1ac0:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    1ac2:	|  |  |  |   move.l 4(sp),d0
    1ac6:	|  |  |  |   addi.l #1073741823,d0
    1acc:	|  |  |  |   add.l d0,d0
    1ace:	|  |  |  |   add.l d0,d0
    1ad0:	|  |  |  |   movea.l 16(sp),a0
    1ad4:	|  |  |  |   adda.l d0,a0
    1ad6:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    1ad8:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    1adc:	|  |  |  \-> addq.l #1,4(sp)
    1ae0:	|  |  \----> move.l 4(sp),d0
    1ae4:	|  |         cmp.l 20(sp),d0
    1ae8:	|  \-------- blt.w 1a4a <sortZPal+0x3c>
    1aec:	|        /-- bra.s 1af0 <sortZPal+0xe2>
	if (size < 2) return;		
    1aee:	\--------|-> nop
		}
	}
    1af0:	         \-> addq.l #8,sp
    1af2:	             rts

00001af4 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    1af4:	/-------> lea -16(sp),sp
    1af8:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    1afa:	|         move.l 24(sp),-(sp)
    1afe:	|         jsr 3a24 <pauseFunction>
    1b04:	|         addq.l #4,sp
	while (fun -> stack) trimStack (fun -> stack);
    1b06:	|     /-- bra.s 1b1a <abortFunction+0x26>
    1b08:	|  /--|-> movea.l 24(sp),a0
    1b0c:	|  |  |   move.l 24(a0),d0
    1b10:	|  |  |   move.l d0,-(sp)
    1b12:	|  |  |   jsr 109ac <trimStack>
    1b18:	|  |  |   addq.l #4,sp
    1b1a:	|  |  \-> movea.l 24(sp),a0
    1b1e:	|  |      move.l 24(a0),d0
    1b22:	|  \----- bne.s 1b08 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    1b24:	|         movea.l 24(sp),a0
    1b28:	|         move.l 4(a0),12(sp)
    1b2e:	|         move.l 17b28 <SysBase>,d0
    1b34:	|         movea.l d0,a6
    1b36:	|         movea.l 12(sp),a1
    1b3a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    1b3e:	|         clr.l 16(sp)
    1b42:	|     /-- bra.s 1b62 <abortFunction+0x6e>
    1b44:	|  /--|-> movea.l 24(sp),a0
    1b48:	|  |  |   move.l 20(a0),d1
    1b4c:	|  |  |   move.l 16(sp),d0
    1b50:	|  |  |   lsl.l #3,d0
    1b52:	|  |  |   add.l d1,d0
    1b54:	|  |  |   move.l d0,-(sp)
    1b56:	|  |  |   jsr 10296 <unlinkVar>
    1b5c:	|  |  |   addq.l #4,sp
    1b5e:	|  |  |   addq.l #1,16(sp)
    1b62:	|  |  \-> movea.l 24(sp),a0
    1b66:	|  |      move.l 8(a0),d0
    1b6a:	|  |      cmp.l 16(sp),d0
    1b6e:	|  \----- bgt.s 1b44 <abortFunction+0x50>
	FreeVec(fun -> localVars);
    1b70:	|         movea.l 24(sp),a0
    1b74:	|         move.l 20(a0),8(sp)
    1b7a:	|         move.l 17b28 <SysBase>,d0
    1b80:	|         movea.l d0,a6
    1b82:	|         movea.l 8(sp),a1
    1b86:	|         jsr -690(a6)
	unlinkVar (fun -> reg);
    1b8a:	|         movea.l 24(sp),a0
    1b8e:	|         move.l 28(a0),d0
    1b92:	|         move.l d0,-(sp)
    1b94:	|         jsr 10296 <unlinkVar>
    1b9a:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    1b9c:	|         movea.l 24(sp),a0
    1ba0:	|         move.l 36(a0),d0
    1ba4:	|     /-- beq.s 1bb6 <abortFunction+0xc2>
    1ba6:	|     |   movea.l 24(sp),a0
    1baa:	|     |   move.l 36(a0),d0
    1bae:	|     |   move.l d0,-(sp)
    1bb0:	\-----|-- jsr 1af4 <abortFunction>(pc)
    1bb4:	      |   addq.l #4,sp
	FreeVec(fun);
    1bb6:	      \-> move.l 24(sp),4(sp)
    1bbc:	          move.l 17b28 <SysBase>,d0
    1bc2:	          movea.l d0,a6
    1bc4:	          movea.l 4(sp),a1
    1bc8:	          jsr -690(a6)
	fun = NULL;
    1bcc:	          clr.l 24(sp)
}
    1bd0:	          nop
    1bd2:	          movea.l (sp)+,a6
    1bd4:	          lea 16(sp),sp
    1bd8:	          rts

00001bda <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    1bda:	          subq.l #8,sp
	int n = 0;
    1bdc:	          clr.l 4(sp)
	*killedMyself = FALSE;
    1be0:	          movea.l 20(sp),a0
    1be4:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    1be6:	          move.l 17ac4 <allRunningFunctions>,(sp)
	while (fun) {
    1bec:	   /----- bra.s 1c1a <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    1bee:	/--|----> movea.l (sp),a0
    1bf0:	|  |      move.l (a0),d0
    1bf2:	|  |      cmp.l 12(sp),d0
    1bf6:	|  |  /-- bne.s 1c14 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    1bf8:	|  |  |   movea.l (sp),a0
    1bfa:	|  |  |   move.w #1,50(a0)
			n++;
    1c00:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    1c04:	|  |  |   move.l (sp),d0
    1c06:	|  |  |   cmp.l 16(sp),d0
    1c0a:	|  |  +-- bne.s 1c14 <cancelAFunction+0x3a>
    1c0c:	|  |  |   movea.l 20(sp),a0
    1c10:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    1c14:	|  |  \-> movea.l (sp),a0
    1c16:	|  |      move.l 40(a0),(sp)
	while (fun) {
    1c1a:	|  \----> tst.l (sp)
    1c1c:	\-------- bne.s 1bee <cancelAFunction+0x14>
	}
	return n;
    1c1e:	          move.l 4(sp),d0
}
    1c22:	          addq.l #8,sp
    1c24:	          rts

00001c26 <completeTimers>:


void completeTimers () {
    1c26:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    1c28:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    1c2e:	   /----- bra.s 1c44 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    1c30:	/--|----> movea.l (sp),a0
    1c32:	|  |      move.b 52(a0),d0
    1c36:	|  |  /-- bne.s 1c3e <completeTimers+0x18>
    1c38:	|  |  |   movea.l (sp),a0
    1c3a:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    1c3e:	|  |  \-> movea.l (sp),a0
    1c40:	|  |      move.l 40(a0),(sp)
	while (thisFunction) {
    1c44:	|  \----> tst.l (sp)
    1c46:	\-------- bne.s 1c30 <completeTimers+0xa>
	}
}
    1c48:	          nop
    1c4a:	          nop
    1c4c:	          addq.l #4,sp
    1c4e:	          rts

00001c50 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    1c50:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    1c54:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    1c5a:	                                                             movea.l 80(sp),a0
    1c5e:	                                                             move.w 50(a0),d0
    1c62:	/----------------------------------------------------------- beq.w 2b94 <continueFunction+0xf44>
		abortFunction (fun);
    1c66:	|                                                            move.l 80(sp),-(sp)
    1c6a:	|                                                            jsr 1af4 <abortFunction>
    1c70:	|                                                            addq.l #4,sp
		return TRUE;
    1c72:	|                                                            moveq #1,d0
    1c74:	|  /-------------------------------------------------------- bra.w 2b9e <continueFunction+0xf4e>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    1c78:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    1c7e:	|  |  |                                                      movea.l 80(sp),a0
    1c82:	|  |  |                                                      move.l 4(a0),d1
    1c86:	|  |  |                                                      movea.l 80(sp),a0
    1c8a:	|  |  |                                                      move.l 32(a0),d0
    1c8e:	|  |  |                                                      lsl.l #3,d0
    1c90:	|  |  |                                                      movea.l d1,a0
    1c92:	|  |  |                                                      adda.l d0,a0
    1c94:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    1c9a:	|  |  |                                                      movea.l 80(sp),a0
    1c9e:	|  |  |                                                      move.l 4(a0),d1
    1ca2:	|  |  |                                                      movea.l 80(sp),a0
    1ca6:	|  |  |                                                      move.l 32(a0),d0
    1caa:	|  |  |                                                      lsl.l #3,d0
    1cac:	|  |  |                                                      movea.l d1,a0
    1cae:	|  |  |                                                      adda.l d0,a0
    1cb0:	|  |  |                                                      move.l (a0),64(sp)
//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    1cb4:	|  |  |                                                      moveq #41,d0
    1cb6:	|  |  |                                                      cmp.l 64(sp),d0
    1cba:	|  |  |  /-------------------------------------------------- bcs.w 2b48 <continueFunction+0xef8>
    1cbe:	|  |  |  |                                                   move.l 64(sp),d0
    1cc2:	|  |  |  |                                                   add.l d0,d0
    1cc4:	|  |  |  |                                                   movea.l d0,a0
    1cc6:	|  |  |  |                                                   adda.l #7378,a0
    1ccc:	|  |  |  |                                                   move.w (a0),d0
    1cce:	|  |  |  |                                                   jmp (1cd2 <continueFunction+0x82>,pc,d0.w)
    1cd2:	|  |  |  |                                                   .short 0x0e76
    1cd4:	|  |  |  |                                                   ori.w #2772,(a4)
    1cd8:	|  |  |  |                                                   eori.l #163842452,2546(a2)
    1ce0:	|  |  |  |                                                   andi.l #187960116,-(a0)
    1ce6:	|  |  |  |                                                   ([,0)btst d5,([47186738,a4],d0.l:2,0)
    1cee:	|  |  |  |                                                   ([,0)btst d5,([187957886,a4],d0.l:2,0)
    1cf6:	|  |  |  |                                                   ([,0)bclr d1,([0],d0.w:2,0)
    1cfa:	|  |  |  |                                                   .short 0x00c8
    1cfc:	|  |  |  |                                                   subi.b #92,(a4)+
    1d00:	|  |  |  |                                                   bset d1,(a0)+
    1d02:	|  |  |  |                                                   eori.w #576,2592(a4)
    1d08:	|  |  |  |                                                   ([,0)btst d5,([182846458,a4],d0.l:2,0)
    1d10:	|  |  |  |                                                   ([,0)btst d5,([128714912,a4],d0.l:2,0)
    1d18:	|  |  |  |                                                   btst #28,1642(a0)
    1d1e:	|  |  |  |                                                   subi.w #1088,d0
    1d22:	|  |  |  |                                                   subi.w #2630,d0
			case SLU_RETURN:
			if (fun -> calledBy) {
    1d26:	|  |  |  |                                                   movea.l 80(sp),a0
    1d2a:	|  |  |  |                                                   move.l 36(a0),d0
    1d2e:	|  |  |  |                                            /----- beq.s 1d82 <continueFunction+0x132>
				struct loadedFunction * returnTo = fun -> calledBy;
    1d30:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d34:	|  |  |  |                                            |      move.l 36(a0),44(sp)
				if (fun -> returnSomething) copyVariable (fun -> reg, returnTo -> reg);
    1d3a:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d3e:	|  |  |  |                                            |      move.w 44(a0),d0
    1d42:	|  |  |  |                                            |  /-- beq.s 1d60 <continueFunction+0x110>
    1d44:	|  |  |  |                                            |  |   movea.l 44(sp),a0
    1d48:	|  |  |  |                                            |  |   move.l 28(a0),d1
    1d4c:	|  |  |  |                                            |  |   movea.l 80(sp),a0
    1d50:	|  |  |  |                                            |  |   move.l 28(a0),d0
    1d54:	|  |  |  |                                            |  |   move.l d1,-(sp)
    1d56:	|  |  |  |                                            |  |   move.l d0,-(sp)
    1d58:	|  |  |  |                                            |  |   jsr 10504 <copyVariable>
    1d5e:	|  |  |  |                                            |  |   addq.l #8,sp
				finishFunction (fun);
    1d60:	|  |  |  |                                            |  \-> move.l 80(sp),-(sp)
    1d64:	|  |  |  |                                            |      jsr 2ba4 <finishFunction>
    1d6a:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    1d6c:	|  |  |  |                                            |      move.l 44(sp),80(sp)
				restartFunction (fun);
    1d72:	|  |  |  |                                            |      move.l 80(sp),-(sp)
    1d76:	|  |  |  |                                            |      jsr 3a66 <restartFunction>
    1d7c:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    1d7e:	|  |  |  |  /-----------------------------------------|----- bra.w 2b7c <continueFunction+0xf2c>
				finishFunction (fun);
    1d82:	|  |  |  |  |                                         \----> move.l 80(sp),-(sp)
    1d86:	|  |  |  |  |                                                jsr 2ba4 <finishFunction>
    1d8c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1d8e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    1d92:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    1d96:	|  |  |  |  +----------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_CALLIT:
			switch (fun -> reg->varType) {
    1d9a:	|  |  |  |  |                                                movea.l 80(sp),a0
    1d9e:	|  |  |  |  |                                                movea.l 28(a0),a0
    1da2:	|  |  |  |  |                                                move.l (a0),d0
    1da4:	|  |  |  |  |                                                moveq #2,d1
    1da6:	|  |  |  |  |                                                cmp.l d0,d1
    1da8:	|  |  |  |  |                                            /-- beq.s 1db4 <continueFunction+0x164>
    1daa:	|  |  |  |  |                                            |   moveq #4,d1
    1dac:	|  |  |  |  |                                            |   cmp.l d0,d1
    1dae:	|  |  |  |  |                                         /--|-- beq.s 1e08 <continueFunction+0x1b8>
    1db0:	|  |  |  |  |                                /--------|--|-- bra.w 1efa <continueFunction+0x2aa>
				case SVT_FUNC:
				pauseFunction (fun);		
    1db4:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    1db8:	|  |  |  |  |                                |        |      jsr 3a24 <pauseFunction>
    1dbe:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg->varData.intValue, param, fun, fun -> stack,TRUE)) return FALSE;
    1dc0:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dc4:	|  |  |  |  |                                |        |      move.l 24(a0),d1
    1dc8:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dcc:	|  |  |  |  |                                |        |      movea.l 28(a0),a0
    1dd0:	|  |  |  |  |                                |        |      move.l 4(a0),d0
    1dd4:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    1dd8:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    1dda:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    1dde:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    1de2:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    1de4:	|  |  |  |  |                                |        |      jsr 3c86 <startNewFunctionNum>
    1dea:	|  |  |  |  |                                |        |      lea 20(sp),sp
    1dee:	|  |  |  |  |                                |        |      tst.l d0
    1df0:	|  |  |  |  |                                |        |  /-- bne.s 1df8 <continueFunction+0x1a8>
    1df2:	|  |  |  |  |                                |        |  |   clr.w d0
    1df4:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 2b9e <continueFunction+0xf4e>
				fun = allRunningFunctions;
    1df8:	|  |  |  |  |                                |        |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1e00:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    1e04:	|  |  |  |  |                                |  /-----|----- bra.w 1f0e <continueFunction+0x2be>

				case SVT_BUILT:
					{
					enum builtReturn br = callBuiltIn (fun -> reg->varData.intValue, param, fun);
    1e08:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    1e0c:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    1e10:	|  |  |  |  |                                |  |            movea.l 28(a0),a0
    1e14:	|  |  |  |  |                                |  |            move.l 4(a0),d0
    1e18:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    1e1c:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    1e1e:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    1e20:	|  |  |  |  |                                |  |            jsr ed46 <callBuiltIn>
    1e26:	|  |  |  |  |                                |  |            lea 12(sp),sp
    1e2a:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    1e2e:	|  |  |  |  |                                |  |            moveq #5,d0
    1e30:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    1e34:	|  |  |  |  |                                |  |  /-------- bcs.w 1ef6 <continueFunction+0x2a6>
    1e38:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    1e3c:	|  |  |  |  |                                |  |  |         add.l d0,d0
    1e3e:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    1e40:	|  |  |  |  |                                |  |  |         adda.l #7756,a0
    1e46:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    1e48:	|  |  |  |  |                                |  |  |         jmp (1e4c <continueFunction+0x1fc>,pc,d0.w)
    1e4c:	|  |  |  |  |                                |  |  |         ori.b #12,170(a4)
    1e52:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    1e56:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    1e5c:	|  |  |  |  |                                |  |  |         move.l d1,(sp)+
    1e5e:	|  |  |  |  |                                |  |  |         jsr 12018 <KPrintF>
    1e64:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    1e66:	|  |  |  |  |                                |  |  |         clr.w d0
    1e68:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 2b9e <continueFunction+0xf4e>

						case BR_PAUSE:
						pauseFunction (fun);
    1e6c:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    1e70:	|  |  |  |  |                                |  |  |         jsr 3a24 <pauseFunction>
    1e76:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    1e78:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    1e7c:	|  |  |  |  |                                |  |  |  /----- bra.s 1ef8 <continueFunction+0x2a8>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    1e7e:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    1e82:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    1e86:	|  |  |  |  |                                |  |  |  +----- bra.s 1ef8 <continueFunction+0x2a8>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg->varData.intValue;
    1e88:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    1e8c:	|  |  |  |  |                                |  |  |  |      movea.l 28(a0),a0
    1e90:	|  |  |  |  |                                |  |  |  |      move.l 4(a0),48(sp)
							setVariable (fun -> reg, SVT_INT, 1);
    1e96:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    1e9a:	|  |  |  |  |                                |  |  |  |      move.l 28(a0),d0
    1e9e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1ea2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1ea6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ea8:	|  |  |  |  |                                |  |  |  |      jsr 1091a <setVariable>
    1eae:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    1eb2:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    1eb6:	|  |  |  |  |                                |  |  |  |      jsr 3a24 <pauseFunction>
    1ebc:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    1ebe:	|  |  |  |  |                                |  |  |  |      move.l 17af8 <noStack>,d1
    1ec4:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    1ec8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1eca:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    1ecc:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    1ed0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1ed2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ed4:	|  |  |  |  |                                |  |  |  |      jsr 3c86 <startNewFunctionNum>
    1eda:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    1ede:	|  |  |  |  |                                |  |  |  |      tst.l d0
    1ee0:	|  |  |  |  |                                |  |  |  |  /-- bne.s 1ee8 <continueFunction+0x298>
    1ee2:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    1ee4:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 2b9e <continueFunction+0xf4e>
							fun = allRunningFunctions;
    1ee8:	|  |  |  |  |                                |  |  |  |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    1ef0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    1ef4:	|  |  |  |  |                                |  |  |  +----- bra.s 1ef8 <continueFunction+0x2a8>

						default:
						break;
    1ef6:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    1ef8:	|  |  |  |  |                                |  +-----\----X bra.s 1f0e <continueFunction+0x2be>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    1efa:	|  |  |  |  |                                \--|----------> pea 12f0c <cursors.c.46c58bd4+0x145>
    1f00:	|  |  |  |  |                                   |            jsr 12018 <KPrintF>
    1f06:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    1f08:	|  |  |  |  |                                   |            clr.w d0
    1f0a:	|  +--|--|--|-----------------------------------|----------- bra.w 2b9e <continueFunction+0xf4e>
			}
			break;
    1f0e:	|  |  |  |  +-----------------------------------\----------X bra.w 2b7c <continueFunction+0xf2c>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (fun -> reg, SVT_NULL, 0);
    1f12:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f16:	|  |  |  |  |                                                move.l 28(a0),d0
    1f1a:	|  |  |  |  |                                                clr.l -(sp)
    1f1c:	|  |  |  |  |                                                clr.l -(sp)
    1f1e:	|  |  |  |  |                                                move.l d0,-(sp)
    1f20:	|  |  |  |  |                                                jsr 1091a <setVariable>
    1f26:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f2a:	|  |  |  |  +----------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_FILE:
			setVariable (fun -> reg, SVT_FILE, param);
    1f2e:	|  |  |  |  |                                                move.l 68(sp),d1
    1f32:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f36:	|  |  |  |  |                                                move.l 28(a0),d0
    1f3a:	|  |  |  |  |                                                move.l d1,-(sp)
    1f3c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    1f40:	|  |  |  |  |                                                move.l d0,-(sp)
    1f42:	|  |  |  |  |                                                jsr 1091a <setVariable>
    1f48:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f4c:	|  |  |  |  +----------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_VALUE:
			setVariable (fun -> reg, SVT_INT, param);
    1f50:	|  |  |  |  |                                                move.l 68(sp),d1
    1f54:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f58:	|  |  |  |  |                                                move.l 28(a0),d0
    1f5c:	|  |  |  |  |                                                move.l d1,-(sp)
    1f5e:	|  |  |  |  |                                                pea 1 <_start+0x1>
    1f62:	|  |  |  |  |                                                move.l d0,-(sp)
    1f64:	|  |  |  |  |                                                jsr 1091a <setVariable>
    1f6a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f6e:	|  |  |  |  +----------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), fun -> reg)) return FALSE;
    1f72:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f76:	|  |  |  |  |                                                move.l 28(a0),d1
    1f7a:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f7e:	|  |  |  |  |                                                movea.l 20(a0),a0
    1f82:	|  |  |  |  |                                                move.l 68(sp),d0
    1f86:	|  |  |  |  |                                                lsl.l #3,d0
    1f88:	|  |  |  |  |                                                add.l a0,d0
    1f8a:	|  |  |  |  |                                                move.l d1,-(sp)
    1f8c:	|  |  |  |  |                                                move.l d0,-(sp)
    1f8e:	|  |  |  |  |                                                jsr 10504 <copyVariable>
    1f94:	|  |  |  |  |                                                addq.l #8,sp
    1f96:	|  |  |  |  |                                                tst.w d0
    1f98:	|  |  |  |  |  /-------------------------------------------- bne.w 2b5a <continueFunction+0xf0a>
    1f9c:	|  |  |  |  |  |                                             clr.w d0
    1f9e:	|  +--|--|--|--|-------------------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_AND:
			setVariable (fun -> reg, SVT_INT, getBoolean (fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    1fa2:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    1fa6:	|  |  |  |  |  |                                             move.l 28(a0),d0
    1faa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fac:	|  |  |  |  |  |                                             jsr 1058a <getBoolean>
    1fb2:	|  |  |  |  |  |                                             addq.l #4,sp
    1fb4:	|  |  |  |  |  |                                             tst.w d0
    1fb6:	|  |  |  |  |  |                                      /----- beq.s 1fd2 <continueFunction+0x382>
    1fb8:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    1fbc:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    1fc0:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    1fc2:	|  |  |  |  |  |                                      |      jsr 1058a <getBoolean>
    1fc8:	|  |  |  |  |  |                                      |      addq.l #4,sp
    1fca:	|  |  |  |  |  |                                      |      tst.w d0
    1fcc:	|  |  |  |  |  |                                      +----- beq.s 1fd2 <continueFunction+0x382>
    1fce:	|  |  |  |  |  |                                      |      moveq #1,d0
    1fd0:	|  |  |  |  |  |                                      |  /-- bra.s 1fd4 <continueFunction+0x384>
    1fd2:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    1fd4:	|  |  |  |  |  |                                         \-> movea.l 80(sp),a0
    1fd8:	|  |  |  |  |  |                                             move.l 28(a0),d1
    1fdc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fde:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    1fe2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    1fe4:	|  |  |  |  |  |                                             jsr 1091a <setVariable>
    1fea:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (fun -> stack);
    1fee:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    1ff2:	|  |  |  |  |  |                                             move.l 24(a0),d0
    1ff6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1ff8:	|  |  |  |  |  |                                             jsr 109ac <trimStack>
    1ffe:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2000:	|  |  |  |  +--|-------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_OR:
			setVariable (fun -> reg, SVT_INT, getBoolean (fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    2004:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    2008:	|  |  |  |  |  |                                             move.l 28(a0),d0
    200c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    200e:	|  |  |  |  |  |                                             jsr 1058a <getBoolean>
    2014:	|  |  |  |  |  |                                             addq.l #4,sp
    2016:	|  |  |  |  |  |                                             tst.w d0
    2018:	|  |  |  |  |  |                                         /-- bne.s 2030 <continueFunction+0x3e0>
    201a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    201e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2022:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2024:	|  |  |  |  |  |                                         |   jsr 1058a <getBoolean>
    202a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    202c:	|  |  |  |  |  |                                         |   tst.w d0
    202e:	|  |  |  |  |  |                                      /--|-- beq.s 2034 <continueFunction+0x3e4>
    2030:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2032:	|  |  |  |  |  |                                      |  /-- bra.s 2036 <continueFunction+0x3e6>
    2034:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2036:	|  |  |  |  |  |                                         \-> movea.l 80(sp),a0
    203a:	|  |  |  |  |  |                                             move.l 28(a0),d1
    203e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2040:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2044:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2046:	|  |  |  |  |  |                                             jsr 1091a <setVariable>
    204c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (fun -> stack);
    2050:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    2054:	|  |  |  |  |  |                                             move.l 24(a0),d0
    2058:	|  |  |  |  |  |                                             move.l d0,-(sp)
    205a:	|  |  |  |  |  |                                             jsr 109ac <trimStack>
    2060:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2062:	|  |  |  |  +--|-------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_FUNC:
			setVariable (fun -> reg, SVT_FUNC, param);
    2066:	|  |  |  |  |  |                                             move.l 68(sp),d1
    206a:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    206e:	|  |  |  |  |  |                                             move.l 28(a0),d0
    2072:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2074:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2078:	|  |  |  |  |  |                                             move.l d0,-(sp)
    207a:	|  |  |  |  |  |                                             jsr 1091a <setVariable>
    2080:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2084:	|  |  |  |  +--|-------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_BUILT:
			setVariable (fun -> reg, SVT_BUILT, param);
    2088:	|  |  |  |  |  |                                             move.l 68(sp),d1
    208c:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    2090:	|  |  |  |  |  |                                             move.l 28(a0),d0
    2094:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2096:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    209a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    209c:	|  |  |  |  |  |                                             jsr 1091a <setVariable>
    20a2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    20a6:	|  |  |  |  +--|-------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_LOAD_OBJTYPE:
			setVariable (fun -> reg, SVT_OBJTYPE, param);
    20aa:	|  |  |  |  |  |                                             move.l 68(sp),d1
    20ae:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    20b2:	|  |  |  |  |  |                                             move.l 28(a0),d0
    20b6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    20b8:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    20bc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    20be:	|  |  |  |  |  |                                             jsr 1091a <setVariable>
    20c4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    20c8:	|  |  |  |  +--|-------------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_UNREG:
			if (dialogValue != 1) {
    20cc:	|  |  |  |  |  |                                             move.l 17a34 <dialogValue>,d0
    20d2:	|  |  |  |  |  |                                             moveq #1,d1
    20d4:	|  |  |  |  |  |                                             cmp.l d0,d1
    20d6:	|  |  |  |  |  |  /----------------------------------------- beq.w 2b5e <continueFunction+0xf0e>
				KPrintF(ERROR_HACKER);
    20da:	|  |  |  |  |  |  |                                          pea 12f21 <cursors.c.46c58bd4+0x15a>
    20e0:	|  |  |  |  |  |  |                                          jsr 12018 <KPrintF>
    20e6:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    20e8:	|  |  |  |  |  |  |                                          clr.w d0
    20ea:	|  +--|--|--|--|--|----------------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (fun -> reg, param)) {
    20ee:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    20f2:	|  |  |  |  |  |  |                                          movea.l 80(sp),a0
    20f6:	|  |  |  |  |  |  |                                          move.l 28(a0),d0
    20fa:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    20fc:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    20fe:	|  |  |  |  |  |  |                                          jsr 100cc <loadStringToVar>
    2104:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2106:	|  |  |  |  |  |  |                                          tst.w d0
    2108:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 2b62 <continueFunction+0xf12>
					return FALSE;
    210c:	|  |  |  |  |  |  |  |                                       clr.w d0
    210e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2112:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2116:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    211a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    211c:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    211e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2120:	|  |  |  |  |  |  |  |                                /----- beq.s 2182 <continueFunction+0x532>
    2122:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2124:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2126:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2322 <continueFunction+0x6d2>
    212a:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    212c:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2138 <continueFunction+0x4e8>
    212e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2130:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2132:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2182 <continueFunction+0x532>
    2134:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2322 <continueFunction+0x6d2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2138:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    213a:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    213e:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 216e <continueFunction+0x51e>
					setVariable (fun -> reg, SVT_NULL, 0);
    2140:	|  |  |  |  |  |  |  |              |                 |  |   movea.l 80(sp),a0
    2144:	|  |  |  |  |  |  |  |              |                 |  |   move.l 28(a0),d0
    2148:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    214a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    214c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    214e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1091a <setVariable>
    2154:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (fun -> stack);
    2158:	|  |  |  |  |  |  |  |              |                 |  |   movea.l 80(sp),a0
    215c:	|  |  |  |  |  |  |  |              |                 |  |   move.l 24(a0),d0
    2160:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2162:	|  |  |  |  |  |  |  |              |                 |  |   jsr 109ac <trimStack>
    2168:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    216a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2338 <continueFunction+0x6e8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    216e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 12f62 <cursors.c.46c58bd4+0x19b>
    2174:	|  |  |  |  |  |  |  |              |  |              |      jsr 12018 <KPrintF>
    217a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    217c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    217e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 2b9e <continueFunction+0xf4e>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2182:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2186:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    218a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    218e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2190:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21a6 <continueFunction+0x556>
					KPrintF((ERROR_INDEX_EMPTY));
    2192:	|  |  |  |  |  |  |  |              |  |                 |   pea 12f9e <cursors.c.46c58bd4+0x1d7>
    2198:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12018 <KPrintF>
    219e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    21a0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    21a2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b9e <continueFunction+0xf4e>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,fun -> reg)) return FALSE;
    21a6:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    21aa:	|  |  |  |  |  |  |  |              |  |                     move.l 28(a0),d0
    21ae:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    21b0:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    21b4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    21b8:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    21ba:	|  |  |  |  |  |  |  |              |  |                     jsr 10048 <getValueType>
    21c0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    21c4:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    21c6:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21ce <continueFunction+0x57e>
    21c8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    21ca:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b9e <continueFunction+0xf4e>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    21ce:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    21d2:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    21d6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    21d8:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    21da:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    21dc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21fe <continueFunction+0x5ae>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    21de:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    21e2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    21e4:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    21e8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    21ec:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    21f0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    21f2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    21f4:	|  |  |  |  |  |  |  |              |  |                 |   jsr fcd2 <fastArrayGetByIndex>
    21fa:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    21fc:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 221e <continueFunction+0x5ce>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    21fe:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2202:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2204:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2208:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    220c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2210:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2212:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2214:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2216:	|  |  |  |  |  |  |  |              |  |              |      jsr 1093c <stackGetByIndex>
    221c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    221e:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (fun -> stack);
    2222:	|  |  |  |  |  |  |  |              |  |                     movea.l 80(sp),a0
    2226:	|  |  |  |  |  |  |  |              |  |                     move.l 24(a0),d0
    222a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    222c:	|  |  |  |  |  |  |  |              |  |                     jsr 109ac <trimStack>
    2232:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2234:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2238:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2256 <continueFunction+0x606>
						setVariable (fun -> reg, SVT_NULL, 0);
    223a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    223e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 28(a0),d0
    2242:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2244:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2246:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2248:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1091a <setVariable>
    224e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2252:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2336 <continueFunction+0x6e6>
    2256:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2258:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    225c:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 226a <continueFunction+0x61a>
    225e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2260:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2264:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 22b6 <continueFunction+0x666>
    2266:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2300 <continueFunction+0x6b0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    226a:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    226e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2272:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2276:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2278:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10048 <getValueType>
    227e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2282:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2284:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 228c <continueFunction+0x63c>
    2286:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2288:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 231c <continueFunction+0x6cc>
							setVariable (fun -> reg, SVT_INT, ii);
    228c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    228e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 80(sp),a0
    2292:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l 28(a0),d0
    2296:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2298:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    229c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    229e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1091a <setVariable>
    22a4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    22a8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    22aa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    22ac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    22b0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    22b4:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2320 <continueFunction+0x6d0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    22b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    22ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22be:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    22c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    22c4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10048 <getValueType>
    22ca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    22ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    22d0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 22d6 <continueFunction+0x686>
    22d2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    22d4:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 231c <continueFunction+0x6cc>
							setVariable (fun -> reg, SVT_INT, ii);
    22d6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    22d8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 80(sp),a0
    22dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l 28(a0),d0
    22e0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    22e2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22e6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    22e8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1091a <setVariable>
    22ee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    22f2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    22f4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    22f6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    22fa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    22fe:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2320 <continueFunction+0x6d0>
							if (! copyVariable (grab, fun -> reg)) return FALSE;
    2300:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> movea.l 80(sp),a0
    2304:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 28(a0),d0
    2308:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    230a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    230e:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 10504 <copyVariable>
    2314:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2316:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2318:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2336 <continueFunction+0x6e6>
    231a:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,fun -> reg)) return FALSE;
    231c:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 2b9e <continueFunction+0xf4e>
				break;
    2320:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2336 <continueFunction+0x6e6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2322:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 12fbc <cursors.c.46c58bd4+0x1f5>
    2328:	|  |  |  |  |  |  |  |                 |  |                  jsr 12018 <KPrintF>
    232e:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2330:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2332:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 2b9e <continueFunction+0xf4e>
				break;
    2336:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2338:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 2b7c <continueFunction+0xf2c>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    233c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2340:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2344:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2346:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2348:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    234a:	|  |  |  |  |  |  |  |                                   /-- beq.s 2358 <continueFunction+0x708>
    234c:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    234e:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2350:	|  |  |  |  |  |  |  |                                /--|-- beq.w 240a <continueFunction+0x7ba>
    2354:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 246a <continueFunction+0x81a>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2358:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    235c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2360:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2364:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2366:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 237c <continueFunction+0x72c>
					KPrintF((ERROR_INDEX_EMPTY));
    2368:	|  |  |  |  |  |  |  |                             |  |  |   pea 12f9e <cursors.c.46c58bd4+0x1d7>
    236e:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12018 <KPrintF>
    2374:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2376:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2378:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b9e <continueFunction+0xf4e>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,fun -> reg)) return FALSE;
    237c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2380:	|  |  |  |  |  |  |  |                             |  |      move.l 28(a0),d0
    2384:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2386:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    238a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    238e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2390:	|  |  |  |  |  |  |  |                             |  |      jsr 10048 <getValueType>
    2396:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    239a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    239c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 23a4 <continueFunction+0x754>
    239e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    23a0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b9e <continueFunction+0xf4e>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    23a4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    23a8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    23ac:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    23b0:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    23b2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    23b6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    23b8:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    23bc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    23c0:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    23c4:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    23c6:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    23c8:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    23ca:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23cc:	|  |  |  |  |  |  |  |                             |  |      jsr 3c42 <stackSetByIndex>
    23d2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    23d6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    23d8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 23e0 <continueFunction+0x790>
						return FALSE;
    23da:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    23dc:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b9e <continueFunction+0xf4e>
					}
					trimStack (fun -> stack);
    23e0:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    23e4:	|  |  |  |  |  |  |  |                             |  |      move.l 24(a0),d0
    23e8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23ea:	|  |  |  |  |  |  |  |                             |  |      jsr 109ac <trimStack>
    23f0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (fun -> stack);
    23f2:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    23f6:	|  |  |  |  |  |  |  |                             |  |      move.l 24(a0),d0
    23fa:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23fc:	|  |  |  |  |  |  |  |                             |  |      jsr 109ac <trimStack>
    2402:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2404:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2406:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 2b7c <continueFunction+0xf2c>
					if (! getValueType (&ii, SVT_INT, fun->reg)) return FALSE;
    240a:	|  |  |  |  |  |  |  |                             |  \----> movea.l 80(sp),a0
    240e:	|  |  |  |  |  |  |  |                             |         move.l 28(a0),d0
    2412:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2414:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2418:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    241c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    241e:	|  |  |  |  |  |  |  |                             |         jsr 10048 <getValueType>
    2424:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2428:	|  |  |  |  |  |  |  |                             |         tst.w d0
    242a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2432 <continueFunction+0x7e2>
    242c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    242e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 2b9e <continueFunction+0xf4e>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2432:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2436:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2438:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    243c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2440:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2444:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2446:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2448:	|  |  |  |  |  |  |  |                             |         jsr fcd2 <fastArrayGetByIndex>
    244e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2450:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2454:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2464 <continueFunction+0x814>
    2456:	|  |  |  |  |  |  |  |                             |     |   pea 12fe0 <cursors.c.46c58bd4+0x219>
    245c:	|  |  |  |  |  |  |  |                             |     |   jsr 12018 <KPrintF>
    2462:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2464:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2466:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 2b9e <continueFunction+0xf4e>
				KPrintF((ERROR_INDEX_NONSTACK));
    246a:	|  |  |  |  |  |  |  |                             \-------> pea 12fbc <cursors.c.46c58bd4+0x1f5>
    2470:	|  |  |  |  |  |  |  |                                       jsr 12018 <KPrintF>
    2476:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2478:	|  |  |  |  |  |  |  |                                       clr.w d0
    247a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    247e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2482:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2486:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    248a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    248c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    248e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2490:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2494:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2498:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    249a:	|  |  |  |  |  |  |  |                                       jsr 10048 <getValueType>
    24a0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    24a4:	|  |  |  |  |  |  |  |                                       tst.w d0
    24a6:	|  |  |  |  |  |  |  |                                   /-- bne.s 24ae <continueFunction+0x85e>
    24a8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    24aa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b9e <continueFunction+0xf4e>
				setVariable (fun -> reg, SVT_INT, ii);
    24ae:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    24b2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    24b6:	|  |  |  |  |  |  |  |                                       move.l 28(a0),d0
    24ba:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24bc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24c0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24c2:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    24c8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    24cc:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    24d0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    24d2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    24d4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    24d8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    24dc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24e0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24e2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    24e4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24e6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24ea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24ec:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    24f2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    24f6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    24fa:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    2500:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2504:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2506:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2508:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    250a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    250e:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2512:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2514:	|  |  |  |  |  |  |  |                                       jsr 10048 <getValueType>
    251a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    251e:	|  |  |  |  |  |  |  |                                       tst.w d0
    2520:	|  |  |  |  |  |  |  |                                   /-- bne.s 2528 <continueFunction+0x8d8>
    2522:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2524:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b9e <continueFunction+0xf4e>
				setVariable (fun -> reg, SVT_INT, ii);
    2528:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    252c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2530:	|  |  |  |  |  |  |  |                                       move.l 28(a0),d0
    2534:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2536:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    253a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    253c:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    2542:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2546:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    254a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    254c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    254e:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2554:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2558:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    255a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    255c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    255e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2562:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2564:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    256a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    256e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2572:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2576:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    257a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    257e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2580:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2582:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2584:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2588:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    258c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    258e:	|  |  |  |  |  |  |  |                                       jsr 10048 <getValueType>
    2594:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2598:	|  |  |  |  |  |  |  |                                       tst.w d0
    259a:	|  |  |  |  |  |  |  |                                   /-- bne.s 25a2 <continueFunction+0x952>
    259c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    259e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b9e <continueFunction+0xf4e>
				setVariable (fun -> reg, SVT_INT, ii);
    25a2:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    25a6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    25aa:	|  |  |  |  |  |  |  |                                       move.l 28(a0),d0
    25ae:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    25b0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25b4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25b6:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    25bc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    25c0:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    25c4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    25c6:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    25c8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    25cc:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    25d0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25d4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25d6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    25d8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    25da:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25de:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25e0:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    25e6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    25ea:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    25ee:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    25f4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25f8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25fa:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    25fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25fe:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2602:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2606:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2608:	|  |  |  |  |  |  |  |                                       jsr 10048 <getValueType>
    260e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2612:	|  |  |  |  |  |  |  |                                       tst.w d0
    2614:	|  |  |  |  |  |  |  |                                   /-- bne.s 261c <continueFunction+0x9cc>
    2616:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2618:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b9e <continueFunction+0xf4e>
				setVariable (fun -> reg, SVT_INT, ii);
    261c:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2620:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2624:	|  |  |  |  |  |  |  |                                       move.l 28(a0),d0
    2628:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    262a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    262e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2630:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    2636:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    263a:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    263e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2640:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2642:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2648:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    264c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    264e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2650:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2652:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2656:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2658:	|  |  |  |  |  |  |  |                                       jsr 1091a <setVariable>
    265e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2662:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_SET_LOCAL:
			if (! copyVariable (fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2666:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    266a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    266e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2672:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2674:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2676:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    267a:	|  |  |  |  |  |  |  |                                       move.l 28(a0),d0
    267e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2680:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2682:	|  |  |  |  |  |  |  |                                       jsr 10504 <copyVariable>
    2688:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    268a:	|  |  |  |  |  |  |  |                                       tst.w d0
    268c:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 2b66 <continueFunction+0xf16>
    2690:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2692:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (fun -> reg, &globalVars[param])) return FALSE;
    2696:	|  |  |  |  |  |  |  |  |                                    move.l 17ada <globalVars>,d1
    269c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    26a0:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    26a2:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    26a4:	|  |  |  |  |  |  |  |  |                                    movea.l 80(sp),a0
    26a8:	|  |  |  |  |  |  |  |  |                                    move.l 28(a0),d0
    26ac:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    26ae:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    26b0:	|  |  |  |  |  |  |  |  |                                    jsr 10504 <copyVariable>
    26b6:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    26b8:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    26ba:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 2b6a <continueFunction+0xf1a>
    26be:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    26c0:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], fun -> reg)) return FALSE;
    26c4:	|  |  |  |  |  |  |  |  |  |                                 movea.l 80(sp),a0
    26c8:	|  |  |  |  |  |  |  |  |  |                                 move.l 28(a0),d1
    26cc:	|  |  |  |  |  |  |  |  |  |                                 movea.l 17ada <globalVars>,a0
    26d2:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d0
    26d6:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d0
    26d8:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d0
    26da:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    26dc:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    26de:	|  |  |  |  |  |  |  |  |  |                                 jsr 10504 <copyVariable>
    26e4:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    26e6:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    26e8:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 2b6e <continueFunction+0xf1e>
    26ec:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    26ee:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (fun -> reg, &fun -> stack)) return FALSE;
    26f2:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d0
    26f4:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    26f8:	|  |  |  |  |  |  |  |  |  |  |                              movea.l 80(sp),a0
    26fc:	|  |  |  |  |  |  |  |  |  |  |                              move.l 28(a0),d1
    2700:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2702:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2704:	|  |  |  |  |  |  |  |  |  |  |                              jsr f884 <addVarToStack>
    270a:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    270c:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    270e:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 2b72 <continueFunction+0xf22>
    2712:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2714:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (fun -> reg, &fun -> stack)) return FALSE;
    2718:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d0
    271a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    271e:	|  |  |  |  |  |  |  |  |  |  |  |                           movea.l 80(sp),a0
    2722:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l 28(a0),d1
    2726:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2728:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    272a:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr f90a <addVarToStackQuick>
    2730:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2732:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2734:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 2b76 <continueFunction+0xf26>
    2738:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    273a:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 2b9e <continueFunction+0xf4e>
			break;

			case SLU_NOT:
			setVariable (fun -> reg, SVT_INT, ! getBoolean (fun -> reg));
    273e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        movea.l 80(sp),a0
    2742:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l 28(a0),d0
    2746:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2748:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1058a <getBoolean>
    274e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2750:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2752:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2754:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2756:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d0
    2758:	|  |  |  |  |  |  |  |  |  |  |  |  |                        andi.l #255,d0
    275e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        movea.l 80(sp),a0
    2762:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l 28(a0),d1
    2766:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2768:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    276c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    276e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1091a <setVariable>
    2774:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2778:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_BR_ZERO:
			if (! getBoolean (fun -> reg)) {
    277c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        movea.l 80(sp),a0
    2780:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l 28(a0),d0
    2784:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2786:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1058a <getBoolean>
    278c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    278e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2790:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 2b7a <continueFunction+0xf2a>
				advanceNow = FALSE;
    2794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2798:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    279c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),32(a0)
			}
			break;
    27a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 2b7a <continueFunction+0xf2a>

			case SLU_BRANCH:
			advanceNow = FALSE;
    27a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    27aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),32(a0)
			break;
    27b4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2b7c <continueFunction+0xf2c>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,fun -> reg)) return FALSE;
    27b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 28(a0),d0
    27c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    27c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    27c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    27ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    27cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10048 <getValueType>
    27d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    27d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    27d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 27e0 <continueFunction+0xb90>
    27da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    27dc:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 2b9e <continueFunction+0xf4e>
				setVariable (fun -> reg, SVT_INT, -i);
    27e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    27e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    27e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    27e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 28(a0),d0
    27f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    27f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    27f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    27f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1091a <setVariable>
    27fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2802:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2b7c <continueFunction+0xf2c>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    280a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    280e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 2b32 <continueFunction+0xee2>
    2812:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2814:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2818:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.w 289e <continueFunction+0xc4e>
    281c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    281e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 28f4 <continueFunction+0xca4>
    2826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    282c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 283a <continueFunction+0xbea>
    282e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2830:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 286c <continueFunction+0xc1c>
    2836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 28f4 <continueFunction+0xca4>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, fun -> reg);
    283a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> movea.l 80(sp),a0
    283e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 28(a0),d1
    2842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2846:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d0
    284a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    284c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    284e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr f97e <addVariablesInSecond>
    2854:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (fun -> stack);
    2856:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    285a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d0
    285e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 109ac <trimStack>
    2866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2868:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 2b46 <continueFunction+0xef6>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), fun -> reg);
    286c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> movea.l 80(sp),a0
    2870:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 28(a0),d1
    2874:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2878:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d0
    287c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    287e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2880:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr fa3c <compareVariablesInSecond>
    2886:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (fun -> stack);
    2888:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    288c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d0
    2890:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2892:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 109ac <trimStack>
    2898:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    289a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 2b46 <continueFunction+0xef6>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), fun -> reg);
    289e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> movea.l 80(sp),a0
    28a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 28(a0),d1
    28a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    28aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d0
    28ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    28b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    28b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr fa3c <compareVariablesInSecond>
    28b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (fun -> stack);
    28ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    28be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d0
    28c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    28c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 109ac <trimStack>
    28ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg->varData.intValue = ! fun -> reg->varData.intValue;
    28cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    28d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 28(a0),a0
    28d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 4(a0),d0
    28d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    28da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    28dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    28e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 28(a0),a0
    28e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    28e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    28ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,4(a0)
					break;
    28f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 2b46 <continueFunction+0xef6>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    28f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    28f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    28fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2902:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2906:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2908:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10048 <getValueType>
    290e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2912:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2914:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 291c <continueFunction+0xccc>
    2916:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2918:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b9e <continueFunction+0xf4e>
					if (! getValueType(&secondValue, SVT_INT,fun -> reg)) return FALSE;
    291c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> movea.l 80(sp),a0
    2920:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 28(a0),d0
    2924:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2926:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    292a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    292e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2930:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10048 <getValueType>
    2936:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    293a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    293c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2944 <continueFunction+0xcf4>
    293e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2940:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b9e <continueFunction+0xf4e>
					trimStack (fun -> stack);
    2944:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> movea.l 80(sp),a0
    2948:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    294c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    294e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 109ac <trimStack>
    2954:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2956:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2958:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    295c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    295e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2960:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 2b44 <continueFunction+0xef4>
    2964:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2966:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2968:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #10612,a0
    296e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2970:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2974 <continueFunction+0xd24>,pc,d0.w)
    2974:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a4)
    2978:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00c0
    297a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    297c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    297e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2980:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2982:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x008c
    2984:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2986:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2988:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    298a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    298c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    298e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2990:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2992:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2994:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2996:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    2998:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00f4
    299a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   btst d0,464(a0)
    299e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bset d0,(a0)
    29a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bchg d0,(a2)+
    29a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movep.w d0,8239(a4)

					switch (com) {
						case SLU_MULT:
						setVariable (fun -> reg, SVT_INT, firstValue * secondValue);
    29a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.b #47,36(a0)
    29ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 129ca <__mulsi3>
    29b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    29be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d0
    29c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    29d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2b46 <continueFunction+0xef6>

						case SLU_MINUS:
						setVariable (fun -> reg, SVT_INT, firstValue - secondValue);
    29d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    29dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    29e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    29e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    29e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d0
    29ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    29f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2b46 <continueFunction+0xef6>

						case SLU_MODULUS:
						setVariable (fun -> reg, SVT_INT, firstValue % secondValue);
    2a00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2a04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2a08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a76 <__modsi3>
    2a12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2a14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2a16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2a1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d0
    2a1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2a2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2b46 <continueFunction+0xef6>

						case SLU_DIVIDE:
						setVariable (fun -> reg, SVT_INT, firstValue / secondValue);
    2a34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2a38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2a3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a48 <__divsi3>
    2a46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2a48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2a4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2a4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d0
    2a52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2a60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2b46 <continueFunction+0xef6>

						case SLU_LESSTHAN:
						setVariable (fun -> reg, SVT_INT, firstValue < secondValue);
    2a68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    2a74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d0
    2a78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   andi.l #255,d0
    2a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2a82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d1
    2a86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2a94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2b46 <continueFunction+0xef6>

						case SLU_MORETHAN:
						setVariable (fun -> reg, SVT_INT, firstValue > secondValue);
    2a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2aa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2aa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2aa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    2aa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2aaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d0
    2aac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   andi.l #255,d0
    2ab2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2ab6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d1
    2aba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2abc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2ac0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ac2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2ac8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2acc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2b46 <continueFunction+0xef6>

						case SLU_LESS_EQUAL:
						setVariable (fun -> reg, SVT_INT, firstValue <= secondValue);
    2ace:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2ad2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2ad6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2ad8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    2ada:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2adc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d0
    2ade:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   andi.l #255,d0
    2ae4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2ae8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d1
    2aec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2aee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2af2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2af4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2afa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2afe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2b46 <continueFunction+0xef6>

						case SLU_MORE_EQUAL:
						setVariable (fun -> reg, SVT_INT, firstValue >= secondValue);
    2b00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2b04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2b08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2b0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    2b0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2b0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d0
    2b10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   andi.l #255,d0
    2b16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l 80(sp),a0
    2b1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 28(a0),d1
    2b1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2b20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2b24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2b26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1091a <setVariable>
    2b2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2b30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2b46 <continueFunction+0xef6>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    2b32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 13001 <cursors.c.46c58bd4+0x23a>
    2b38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12018 <KPrintF>
    2b3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    2b40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    2b42:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 2b9e <continueFunction+0xf4e>
						break;
    2b44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    2b46:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 2b7c <continueFunction+0xf2c>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    2b48:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 13019 <cursors.c.46c58bd4+0x252>
    2b4e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12018 <KPrintF>
    2b54:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    2b56:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    2b58:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 2b9e <continueFunction+0xf4e>
			break;
    2b5a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    2b5c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b5e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    2b60:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b62:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    2b64:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b66:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    2b68:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b6a:	|  |  |     |              \--|--|--|--|-------------------> nop
    2b6c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b6e:	|  |  |     |                 \--|--|--|-------------------> nop
    2b70:	|  |  |     +--------------------|--|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b72:	|  |  |     |                    \--|--|-------------------> nop
    2b74:	|  |  |     +-----------------------|--|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b76:	|  |  |     |                       \--|-------------------> nop
    2b78:	|  |  |     +--------------------------|-------------------- bra.s 2b7c <continueFunction+0xf2c>
			break;
    2b7a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    2b7c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    2b80:	+--|--|----------------------------------------------------- beq.s 2b94 <continueFunction+0xf44>
    2b82:	|  |  |                                                      movea.l 80(sp),a0
    2b86:	|  |  |                                                      move.l 32(a0),d0
    2b8a:	|  |  |                                                      addq.l #1,d0
    2b8c:	|  |  |                                                      movea.l 80(sp),a0
    2b90:	|  |  |                                                      move.l d0,32(a0)
	while (keepLooping) {
    2b94:	\--|--|----------------------------------------------------> tst.w 74(sp)
    2b98:	   |  \----------------------------------------------------- bne.w 1c78 <continueFunction+0x28>

	}
	return TRUE;
    2b9c:	   |                                                         moveq #1,d0
}
    2b9e:	   \-------------------------------------------------------> lea 76(sp),sp
    2ba2:	                                                             rts

00002ba4 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    2ba4:	       lea -16(sp),sp
    2ba8:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2baa:	       move.l 24(sp),-(sp)
    2bae:	       jsr 3a24 <pauseFunction>
    2bb4:	       addq.l #4,sp
	if (fun -> stack) KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    2bb6:	       movea.l 24(sp),a0
    2bba:	       move.l 24(a0),d0
    2bbe:	   /-- beq.s 2bd4 <finishFunction+0x30>
    2bc0:	   |   pea 13045 <cursors.c.46c58bd4+0x27e>
    2bc6:	   |   pea 13072 <cursors.c.46c58bd4+0x2ab>
    2bcc:	   |   jsr 12018 <KPrintF>
    2bd2:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    2bd4:	   \-> movea.l 24(sp),a0
    2bd8:	       move.l 4(a0),12(sp)
    2bde:	       move.l 17b28 <SysBase>,d0
    2be4:	       movea.l d0,a6
    2be6:	       movea.l 12(sp),a1
    2bea:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2bee:	       clr.l 16(sp)
    2bf2:	   /-- bra.s 2c12 <finishFunction+0x6e>
    2bf4:	/--|-> movea.l 24(sp),a0
    2bf8:	|  |   move.l 20(a0),d1
    2bfc:	|  |   move.l 16(sp),d0
    2c00:	|  |   lsl.l #3,d0
    2c02:	|  |   add.l d1,d0
    2c04:	|  |   move.l d0,-(sp)
    2c06:	|  |   jsr 10296 <unlinkVar>
    2c0c:	|  |   addq.l #4,sp
    2c0e:	|  |   addq.l #1,16(sp)
    2c12:	|  \-> movea.l 24(sp),a0
    2c16:	|      move.l 8(a0),d0
    2c1a:	|      cmp.l 16(sp),d0
    2c1e:	\----- bgt.s 2bf4 <finishFunction+0x50>
	FreeVec(fun -> localVars);
    2c20:	       movea.l 24(sp),a0
    2c24:	       move.l 20(a0),8(sp)
    2c2a:	       move.l 17b28 <SysBase>,d0
    2c30:	       movea.l d0,a6
    2c32:	       movea.l 8(sp),a1
    2c36:	       jsr -690(a6)
	unlinkVar (fun -> reg);
    2c3a:	       movea.l 24(sp),a0
    2c3e:	       move.l 28(a0),d0
    2c42:	       move.l d0,-(sp)
    2c44:	       jsr 10296 <unlinkVar>
    2c4a:	       addq.l #4,sp
	FreeVec(fun);
    2c4c:	       move.l 24(sp),4(sp)
    2c52:	       move.l 17b28 <SysBase>,d0
    2c58:	       movea.l d0,a6
    2c5a:	       movea.l 4(sp),a1
    2c5e:	       jsr -690(a6)
	fun = NULL;
    2c62:	       clr.l 24(sp)
}
    2c66:	       nop
    2c68:	       movea.l (sp)+,a6
    2c6a:	       lea 16(sp),sp
    2c6e:	       rts

00002c70 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    2c70:	jsr 3a80 <runSludge>
}
    2c76:	rts

00002c78 <initSludge>:

BOOL initSludge (char * filename) {
    2c78:	             lea -296(sp),sp
    2c7c:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    2c80:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    2c84:	             jsr 68b0 <makeNullAnim>
    2c8a:	             move.l d0,17a14 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    2c90:	             pea 17ad6 <gameVersion>
    2c96:	             pea 13082 <cursors.c.46c58bd4+0x2bb>
    2c9c:	             pea 45 <_start+0x45>
    2ca0:	             pea 47 <_start+0x47>
    2ca4:	             move.l 336(sp),-(sp)
    2ca8:	             jsr 36b4 <openAndVerify>
    2cae:	             lea 20(sp),sp
    2cb2:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    2cb6:	         /-- bne.s 2cbe <initSludge+0x46>
    2cb8:	         |   clr.w d0
    2cba:	/--------|-- bra.w 33dc <initSludge+0x764>
	if (FGetC (fp)) {
    2cbe:	|        \-> move.l 292(sp),288(sp)
    2cc4:	|            move.l 17b30 <DOSBase>,d0
    2cca:	|            movea.l d0,a6
    2ccc:	|            move.l 288(sp),d1
    2cd0:	|            jsr -306(a6)
    2cd4:	|            move.l d0,284(sp)
    2cd8:	|            move.l 284(sp),d0
    2cdc:	|  /-------- beq.w 2e82 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    2ce0:	|  |         move.l 292(sp),-(sp)
    2ce4:	|  |         jsr 6bc <get2bytes>
    2cea:	|  |         addq.l #4,sp
    2cec:	|  |         move.l d0,17afc <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    2cf2:	|  |         move.l 17afc <numBIFNames>,d0
    2cf8:	|  |         move.l d0,280(sp)
    2cfc:	|  |         clr.l 276(sp)
    2d00:	|  |         move.l 17b28 <SysBase>,d0
    2d06:	|  |         movea.l d0,a6
    2d08:	|  |         move.l 280(sp),d0
    2d0c:	|  |         move.l 276(sp),d1
    2d10:	|  |         jsr -684(a6)
    2d14:	|  |         move.l d0,272(sp)
    2d18:	|  |         move.l 272(sp),d0
    2d1c:	|  |         move.l d0,17abc <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    2d22:	|  |         move.l 17abc <allBIFNames>,d0
    2d28:	|  |     /-- bne.s 2d30 <initSludge+0xb8>
    2d2a:	|  |     |   clr.w d0
    2d2c:	+--|-----|-- bra.w 33dc <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2d30:	|  |     \-> clr.l 308(sp)
    2d34:	|  |     /-- bra.s 2d5a <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    2d36:	|  |  /--|-> move.l 17abc <allBIFNames>,d1
    2d3c:	|  |  |  |   move.l 308(sp),d0
    2d40:	|  |  |  |   add.l d0,d0
    2d42:	|  |  |  |   add.l d0,d0
    2d44:	|  |  |  |   movea.l d1,a2
    2d46:	|  |  |  |   adda.l d0,a2
    2d48:	|  |  |  |   move.l 292(sp),-(sp)
    2d4c:	|  |  |  |   jsr b02 <readString>
    2d52:	|  |  |  |   addq.l #4,sp
    2d54:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2d56:	|  |  |  |   addq.l #1,308(sp)
    2d5a:	|  |  |  \-> move.l 17afc <numBIFNames>,d0
    2d60:	|  |  |      cmp.l 308(sp),d0
    2d64:	|  |  \----- bgt.s 2d36 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    2d66:	|  |         move.l 292(sp),-(sp)
    2d6a:	|  |         jsr 6bc <get2bytes>
    2d70:	|  |         addq.l #4,sp
    2d72:	|  |         move.l d0,17b08 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    2d78:	|  |         move.l 17b08 <numUserFunc>,d0
    2d7e:	|  |         move.l d0,268(sp)
    2d82:	|  |         clr.l 264(sp)
    2d86:	|  |         move.l 17b28 <SysBase>,d0
    2d8c:	|  |         movea.l d0,a6
    2d8e:	|  |         move.l 268(sp),d0
    2d92:	|  |         move.l 264(sp),d1
    2d96:	|  |         jsr -684(a6)
    2d9a:	|  |         move.l d0,260(sp)
    2d9e:	|  |         move.l 260(sp),d0
    2da2:	|  |         move.l d0,17ac8 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    2da8:	|  |         move.l 17ac8 <allUserFunc>,d0
    2dae:	|  |     /-- bne.s 2db6 <initSludge+0x13e>
    2db0:	|  |     |   clr.w d0
    2db2:	+--|-----|-- bra.w 33dc <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    2db6:	|  |     \-> clr.l 304(sp)
    2dba:	|  |     /-- bra.s 2de0 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    2dbc:	|  |  /--|-> move.l 17ac8 <allUserFunc>,d1
    2dc2:	|  |  |  |   move.l 304(sp),d0
    2dc6:	|  |  |  |   add.l d0,d0
    2dc8:	|  |  |  |   add.l d0,d0
    2dca:	|  |  |  |   movea.l d1,a2
    2dcc:	|  |  |  |   adda.l d0,a2
    2dce:	|  |  |  |   move.l 292(sp),-(sp)
    2dd2:	|  |  |  |   jsr b02 <readString>
    2dd8:	|  |  |  |   addq.l #4,sp
    2dda:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    2ddc:	|  |  |  |   addq.l #1,304(sp)
    2de0:	|  |  |  \-> move.l 17b08 <numUserFunc>,d0
    2de6:	|  |  |      cmp.l 304(sp),d0
    2dea:	|  |  \----- bgt.s 2dbc <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    2dec:	|  |         move.l 17ad6 <gameVersion>,d0
    2df2:	|  |         cmpi.l #258,d0
    2df8:	|  +-------- ble.w 2e82 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    2dfc:	|  |         move.l 292(sp),-(sp)
    2e00:	|  |         jsr 6bc <get2bytes>
    2e06:	|  |         addq.l #4,sp
    2e08:	|  |         move.l d0,17b04 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    2e0e:	|  |         move.l 17b04 <numResourceNames>,d0
    2e14:	|  |         move.l d0,256(sp)
    2e18:	|  |         clr.l 252(sp)
    2e1c:	|  |         move.l 17b28 <SysBase>,d0
    2e22:	|  |         movea.l d0,a6
    2e24:	|  |         move.l 256(sp),d0
    2e28:	|  |         move.l 252(sp),d1
    2e2c:	|  |         jsr -684(a6)
    2e30:	|  |         move.l d0,248(sp)
    2e34:	|  |         move.l 248(sp),d0
    2e38:	|  |         move.l d0,17ac0 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    2e3e:	|  |         move.l 17ac0 <allResourceNames>,d0
    2e44:	|  |     /-- bne.s 2e4c <initSludge+0x1d4>
    2e46:	|  |     |   clr.w d0
    2e48:	+--|-----|-- bra.w 33dc <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    2e4c:	|  |     \-> clr.l 300(sp)
    2e50:	|  |     /-- bra.s 2e76 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    2e52:	|  |  /--|-> move.l 17ac0 <allResourceNames>,d1
    2e58:	|  |  |  |   move.l 300(sp),d0
    2e5c:	|  |  |  |   add.l d0,d0
    2e5e:	|  |  |  |   add.l d0,d0
    2e60:	|  |  |  |   movea.l d1,a2
    2e62:	|  |  |  |   adda.l d0,a2
    2e64:	|  |  |  |   move.l 292(sp),-(sp)
    2e68:	|  |  |  |   jsr b02 <readString>
    2e6e:	|  |  |  |   addq.l #4,sp
    2e70:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    2e72:	|  |  |  |   addq.l #1,300(sp)
    2e76:	|  |  |  \-> move.l 17b04 <numResourceNames>,d0
    2e7c:	|  |  |      cmp.l 300(sp),d0
    2e80:	|  |  \----- bgt.s 2e52 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    2e82:	|  \-------> move.l 292(sp),-(sp)
    2e86:	|            jsr 6bc <get2bytes>
    2e8c:	|            addq.l #4,sp
    2e8e:	|            move.l d0,17a28 <winWidth>
	winHeight = get2bytes (fp);
    2e94:	|            move.l 292(sp),-(sp)
    2e98:	|            jsr 6bc <get2bytes>
    2e9e:	|            addq.l #4,sp
    2ea0:	|            move.l d0,17a2c <winHeight>
	specialSettings = FGetC (fp);
    2ea6:	|            move.l 292(sp),244(sp)
    2eac:	|            move.l 17b30 <DOSBase>,d0
    2eb2:	|            movea.l d0,a6
    2eb4:	|            move.l 244(sp),d1
    2eb8:	|            jsr -306(a6)
    2ebc:	|            move.l d0,240(sp)
    2ec0:	|            move.l 240(sp),d0
    2ec4:	|            move.l d0,17b0c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    2eca:	|            move.l 292(sp),236(sp)
    2ed0:	|            move.l 17b30 <DOSBase>,d0
    2ed6:	|            movea.l d0,a6
    2ed8:	|            move.l 236(sp),d1
    2edc:	|            jsr -306(a6)
    2ee0:	|            move.l d0,232(sp)
    2ee4:	|            move.l 232(sp),d0
    2ee8:	|            move.l d0,-(sp)
    2eea:	|            pea 3e8 <encodeFilename+0xea>
    2eee:	|            jsr 12a48 <__divsi3>
    2ef4:	|            addq.l #8,sp
    2ef6:	|            move.l d0,16022 <desiredfps>

	FreeVec(readString (fp));
    2efc:	|            move.l 292(sp),-(sp)
    2f00:	|            jsr b02 <readString>
    2f06:	|            addq.l #4,sp
    2f08:	|            move.l d0,228(sp)
    2f0c:	|            move.l 17b28 <SysBase>,d0
    2f12:	|            movea.l d0,a6
    2f14:	|            movea.l 228(sp),a1
    2f18:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    2f1c:	|            move.l 292(sp),224(sp)
    2f22:	|            move.l #96974,220(sp)
    2f2a:	|            moveq #8,d0
    2f2c:	|            move.l d0,216(sp)
    2f30:	|            moveq #1,d1
    2f32:	|            move.l d1,212(sp)
    2f36:	|            move.l 17b30 <DOSBase>,d0
    2f3c:	|            movea.l d0,a6
    2f3e:	|            move.l 224(sp),d1
    2f42:	|            move.l 220(sp),d2
    2f46:	|            move.l 216(sp),d3
    2f4a:	|            move.l 212(sp),d4
    2f4e:	|            jsr -324(a6)
    2f52:	|            move.l d0,208(sp)
    2f56:	|            move.l 208(sp),d0
    2f5a:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    2f5e:	|            moveq #1,d0
    2f60:	|            cmp.l 204(sp),d0
    2f64:	|        /-- beq.s 2f74 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    2f66:	|        |   pea 130bb <cursors.c.46c58bd4+0x2f4>
    2f6c:	|        |   jsr 12018 <KPrintF>
    2f72:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    2f74:	|        \-> move.l 17ad6 <gameVersion>,d0
    2f7a:	|            cmpi.l #258,d0
    2f80:	|        /-- ble.s 2f90 <initSludge+0x318>
    2f82:	|        |   move.l 292(sp),-(sp)
    2f86:	|        |   jsr b02 <readString>
    2f8c:	|        |   addq.l #4,sp
    2f8e:	|     /--|-- bra.s 2fa4 <initSludge+0x32c>
    2f90:	|     |  \-> pea 130d9 <cursors.c.46c58bd4+0x312>
    2f96:	|     |      pea 130d9 <cursors.c.46c58bd4+0x312>
    2f9c:	|     |      jsr f574 <joinStrings>
    2fa2:	|     |      addq.l #8,sp
    2fa4:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    2fa8:	|            move.l 17ad6 <gameVersion>,d0
    2fae:	|            cmpi.l #258,d0
    2fb4:	|     /----- ble.s 2fd6 <initSludge+0x35e>
    2fb6:	|     |      move.l 292(sp),196(sp)
    2fbc:	|     |      move.l 17b30 <DOSBase>,d0
    2fc2:	|     |      movea.l d0,a6
    2fc4:	|     |      move.l 196(sp),d1
    2fc8:	|     |      jsr -306(a6)
    2fcc:	|     |      move.l d0,192(sp)
    2fd0:	|     |      move.l 192(sp),d0
    2fd4:	|     |  /-- bra.s 2fd8 <initSludge+0x360>
    2fd6:	|     \--|-> moveq #0,d0
    2fd8:	|        \-> move.l d0,17bf6 <gameSettings+0x4>
	makeLanguageTable (fp);
    2fde:	|            move.l 292(sp),-(sp)
    2fe2:	|            jsr ef46 <makeLanguageTable>
    2fe8:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    2fea:	|            move.l 17ad6 <gameVersion>,d0
    2ff0:	|            cmpi.l #261,d0
    2ff6:	|        /-- ble.s 3044 <initSludge+0x3cc>
	{
		FGetC(fp);
    2ff8:	|        |   move.l 292(sp),188(sp)
    2ffe:	|        |   move.l 17b30 <DOSBase>,d0
    3004:	|        |   movea.l d0,a6
    3006:	|        |   move.l 188(sp),d1
    300a:	|        |   jsr -306(a6)
    300e:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3012:	|        |   move.l 292(sp),180(sp)
    3018:	|        |   move.l 17b30 <DOSBase>,d0
    301e:	|        |   movea.l d0,a6
    3020:	|        |   move.l 180(sp),d1
    3024:	|        |   jsr -306(a6)
    3028:	|        |   move.l d0,176(sp)
		getFloat (fp);
    302c:	|        |   move.l 292(sp),-(sp)
    3030:	|        |   jsr 7d8 <getFloat>
    3036:	|        |   addq.l #4,sp
		getFloat (fp);
    3038:	|        |   move.l 292(sp),-(sp)
    303c:	|        |   jsr 7d8 <getFloat>
    3042:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3044:	|        \-> move.l 292(sp),-(sp)
    3048:	|            jsr b02 <readString>
    304e:	|            addq.l #4,sp
    3050:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3054:	|            pea 130da <cursors.c.46c58bd4+0x313>
    305a:	|            move.l 176(sp),-(sp)
    305e:	|            jsr f4f4 <strcmp>
    3064:	|            addq.l #8,sp
    3066:	|            tst.l d0
    3068:	|        /-- beq.s 3070 <initSludge+0x3f8>
		return FALSE;
    306a:	|        |   clr.w d0
    306c:	+--------|-- bra.w 33dc <initSludge+0x764>
	}
	FreeVec( checker);
    3070:	|        \-> move.l 172(sp),168(sp)
    3076:	|            move.l 17b28 <SysBase>,d0
    307c:	|            movea.l d0,a6
    307e:	|            movea.l 168(sp),a1
    3082:	|            jsr -690(a6)
	checker = NULL;
    3086:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    308a:	|            move.l 292(sp),164(sp)
    3090:	|            move.l 17b30 <DOSBase>,d0
    3096:	|            movea.l d0,a6
    3098:	|            move.l 164(sp),d1
    309c:	|            jsr -306(a6)
    30a0:	|            move.l d0,160(sp)
    30a4:	|            move.l 160(sp),d0
    30a8:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    30ac:	|            moveq #0,d0
    30ae:	|            move.b 159(sp),d0
    30b2:	|            moveq #1,d1
    30b4:	|            and.l d1,d0
    30b6:	|        /-- beq.s 310e <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    30b8:	|        |   move.l 17b30 <DOSBase>,d0
    30be:	|        |   movea.l d0,a6
    30c0:	|        |   jsr -60(a6)
    30c4:	|        |   move.l d0,38(sp)
    30c8:	|        |   move.l 38(sp),d0
    30cc:	|        |   move.l d0,34(sp)
    30d0:	|        |   move.l #78050,30(sp)
    30d8:	|        |   moveq #54,d0
    30da:	|        |   move.l d0,26(sp)
    30de:	|        |   move.l 17b30 <DOSBase>,d0
    30e4:	|        |   movea.l d0,a6
    30e6:	|        |   move.l 34(sp),d1
    30ea:	|        |   move.l 30(sp),d2
    30ee:	|        |   move.l 26(sp),d3
    30f2:	|        |   jsr -48(a6)
    30f6:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    30fa:	|        |   pea 13119 <thumbnail.c.7eb31449+0x35>
    3100:	|        |   jsr 12018 <KPrintF>
    3106:	|        |   addq.l #4,sp
		return FALSE;
    3108:	|        |   clr.w d0
    310a:	+--------|-- bra.w 33dc <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    310e:	|        \-> move.l 292(sp),-(sp)
    3112:	|            jsr 6bc <get2bytes>
    3118:	|            addq.l #4,sp
    311a:	|            move.l d0,17b00 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3120:	|            move.l 17b00 <numGlobals>,d0
    3126:	|            lsl.l #3,d0
    3128:	|            move.l d0,154(sp)
    312c:	|            clr.l 150(sp)
    3130:	|            move.l 17b28 <SysBase>,d0
    3136:	|            movea.l d0,a6
    3138:	|            move.l 154(sp),d0
    313c:	|            move.l 150(sp),d1
    3140:	|            jsr -684(a6)
    3144:	|            move.l d0,146(sp)
    3148:	|            move.l 146(sp),d0
    314c:	|            move.l d0,17ada <globalVars>
	if(globalVars == 0) {
    3152:	|            move.l 17ada <globalVars>,d0
    3158:	|        /-- bne.s 316e <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    315a:	|        |   pea 13151 <thumbnail.c.7eb31449+0x6d>
    3160:	|        |   jsr 12018 <KPrintF>
    3166:	|        |   addq.l #4,sp
		return FALSE;
    3168:	|        |   clr.w d0
    316a:	+--------|-- bra.w 33dc <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    316e:	|        \-> clr.l 312(sp)
    3172:	|        /-- bra.s 318a <initSludge+0x512>
    3174:	|     /--|-> move.l 17ada <globalVars>,d1
    317a:	|     |  |   move.l 312(sp),d0
    317e:	|     |  |   lsl.l #3,d0
    3180:	|     |  |   movea.l d1,a0
    3182:	|     |  |   adda.l d0,a0
    3184:	|     |  |   clr.l (a0)
    3186:	|     |  |   addq.l #1,312(sp)
    318a:	|     |  \-> move.l 17b00 <numGlobals>,d0
    3190:	|     |      cmp.l 312(sp),d0
    3194:	|     \----- bgt.s 3174 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3196:	|            move.l 17bf6 <gameSettings+0x4>,d0
    319c:	|            clr.l -(sp)
    319e:	|            move.l d0,-(sp)
    31a0:	|            move.l 300(sp),-(sp)
    31a4:	|            jsr 413c <setFileIndices>
    31aa:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    31ae:	|            pea 1 <_start+0x1>
    31b2:	|            jsr 3df6 <getNumberedString>
    31b8:	|            addq.l #4,sp
    31ba:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    31be:	|            move.l 142(sp),-(sp)
    31c2:	|            jsr 2fe <encodeFilename>
    31c8:	|            addq.l #4,sp
    31ca:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    31ce:	|            move.l 142(sp),134(sp)
    31d4:	|            move.l 17b28 <SysBase>,d0
    31da:	|            movea.l d0,a6
    31dc:	|            movea.l 134(sp),a1
    31e0:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    31e4:	|            move.l 138(sp),130(sp)
    31ea:	|            move.l 17b30 <DOSBase>,d0
    31f0:	|            movea.l d0,a6
    31f2:	|            move.l 130(sp),d1
    31f6:	|            jsr -120(a6)
    31fa:	|            move.l d0,126(sp)
    31fe:	|            move.l 126(sp),d0
    3202:	|            move.l d0,296(sp)
	if(lock == 0) {
    3206:	|        /-- bne.s 3234 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3208:	|        |   move.l 138(sp),122(sp)
    320e:	|        |   moveq #-2,d1
    3210:	|        |   move.l d1,118(sp)
    3214:	|        |   move.l 17b30 <DOSBase>,d0
    321a:	|        |   movea.l d0,a6
    321c:	|        |   move.l 122(sp),d1
    3220:	|        |   move.l 118(sp),d2
    3224:	|        |   jsr -84(a6)
    3228:	|        |   move.l d0,114(sp)
    322c:	|        |   move.l 114(sp),d0
    3230:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3234:	|        \-> move.l 296(sp),110(sp)
    323a:	|            move.l 17b30 <DOSBase>,d0
    3240:	|            movea.l d0,a6
    3242:	|            move.l 110(sp),d1
    3246:	|            jsr -126(a6)
    324a:	|            move.l d0,106(sp)
    324e:	|            move.l 106(sp),d0
    3252:	|        /-- bne.s 32ae <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3254:	|        |   move.l 138(sp),-(sp)
    3258:	|        |   pea 13184 <thumbnail.c.7eb31449+0xa0>
    325e:	|        |   jsr 12018 <KPrintF>
    3264:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3266:	|        |   move.l 17b30 <DOSBase>,d0
    326c:	|        |   movea.l d0,a6
    326e:	|        |   jsr -60(a6)
    3272:	|        |   move.l d0,58(sp)
    3276:	|        |   move.l 58(sp),d0
    327a:	|        |   move.l d0,54(sp)
    327e:	|        |   move.l #78257,50(sp)
    3286:	|        |   moveq #40,d0
    3288:	|        |   move.l d0,46(sp)
    328c:	|        |   move.l 17b30 <DOSBase>,d0
    3292:	|        |   movea.l d0,a6
    3294:	|        |   move.l 54(sp),d1
    3298:	|        |   move.l 50(sp),d2
    329c:	|        |   move.l 46(sp),d3
    32a0:	|        |   jsr -48(a6)
    32a4:	|        |   move.l d0,42(sp)
		return FALSE;
    32a8:	|        |   clr.w d0
    32aa:	+--------|-- bra.w 33dc <initSludge+0x764>
	}

	FreeVec(gameName);
    32ae:	|        \-> move.l 138(sp),102(sp)
    32b4:	|            move.l 17b28 <SysBase>,d0
    32ba:	|            movea.l d0,a6
    32bc:	|            movea.l 102(sp),a1
    32c0:	|            jsr -690(a6)

	readIniFile (filename);
    32c4:	|            move.l 320(sp),-(sp)
    32c8:	|            jsr f07a <readIniFile>
    32ce:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    32d0:	|            jsr ee4c <getLanguageForFileB>
    32d6:	|            move.l d0,16008 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    32dc:	|            move.l 16008 <languageNum>,d0
    32e2:	|        /-- bpl.s 32f2 <initSludge+0x67a>
    32e4:	|        |   pea 131da <thumbnail.c.7eb31449+0xf6>
    32ea:	|        |   jsr 12018 <KPrintF>
    32f0:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    32f2:	|        \-> move.l 16008 <languageNum>,d0
    32f8:	|            move.l d0,d1
    32fa:	|            move.l 17bf6 <gameSettings+0x4>,d0
    3300:	|            move.l d1,-(sp)
    3302:	|            move.l d0,-(sp)
    3304:	|            clr.l -(sp)
    3306:	|            jsr 413c <setFileIndices>
    330c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3310:	|            movea.l 200(sp),a0
    3314:	|            move.b (a0),d0
    3316:	|     /----- beq.w 33c0 <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    331a:	|     |      move.l 200(sp),-(sp)
    331e:	|     |      jsr 2fe <encodeFilename>
    3324:	|     |      addq.l #4,sp
    3326:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    332a:	|     |      move.l 98(sp),94(sp)
    3330:	|     |      move.l 17b30 <DOSBase>,d0
    3336:	|     |      movea.l d0,a6
    3338:	|     |      move.l 94(sp),d1
    333c:	|     |      jsr -120(a6)
    3340:	|     |      move.l d0,90(sp)
    3344:	|     |      move.l 90(sp),d0
    3348:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    334c:	|     |  /-- bne.s 337a <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    334e:	|     |  |   move.l 98(sp),86(sp)
    3354:	|     |  |   moveq #-2,d1
    3356:	|     |  |   move.l d1,82(sp)
    335a:	|     |  |   move.l 17b30 <DOSBase>,d0
    3360:	|     |  |   movea.l d0,a6
    3362:	|     |  |   move.l 86(sp),d1
    3366:	|     |  |   move.l 82(sp),d2
    336a:	|     |  |   jsr -84(a6)
    336e:	|     |  |   move.l d0,78(sp)
    3372:	|     |  |   move.l 78(sp),d0
    3376:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    337a:	|     |  \-> move.l 296(sp),74(sp)
    3380:	|     |      move.l 17b30 <DOSBase>,d0
    3386:	|     |      movea.l d0,a6
    3388:	|     |      move.l 74(sp),d1
    338c:	|     |      jsr -126(a6)
    3390:	|     |      move.l d0,70(sp)
    3394:	|     |      move.l 70(sp),d0
    3398:	|     |  /-- bne.s 33aa <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    339a:	|     |  |   move.l 17b30 <DOSBase>,d0
    33a0:	|     |  |   movea.l d0,a6
    33a2:	|     |  |   jsr -60(a6)
    33a6:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    33aa:	|     |  \-> move.l 98(sp),62(sp)
    33b0:	|     |      move.l 17b28 <SysBase>,d0
    33b6:	|     |      movea.l d0,a6
    33b8:	|     |      movea.l 62(sp),a1
    33bc:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    33c0:	|     \----> movea.l 17a2c <winHeight>,a0
    33c6:	|            lea -15(a0),a0
    33ca:	|            move.l a0,d0
    33cc:	|            move.l d0,-(sp)
    33ce:	|            pea a <_start+0xa>
    33d2:	|            jsr 48f2 <positionStatus>
    33d8:	|            addq.l #8,sp

	return TRUE;
    33da:	|            moveq #1,d0
}
    33dc:	\----------> movem.l (sp)+,d2-d4/a2/a6
    33e0:	             lea 296(sp),sp
    33e4:	             rts

000033e6 <killSpeechTimers>:

void killSpeechTimers () {
    33e6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    33e8:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    33ee:	   /----- bra.s 341a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    33f0:	/--|----> movea.l (sp),a0
    33f2:	|  |      move.b 52(a0),d0
    33f6:	|  |  /-- bne.s 3414 <killSpeechTimers+0x2e>
    33f8:	|  |  |   movea.l (sp),a0
    33fa:	|  |  |   move.w 46(a0),d0
    33fe:	|  |  +-- beq.s 3414 <killSpeechTimers+0x2e>
    3400:	|  |  |   movea.l (sp),a0
    3402:	|  |  |   move.l 12(a0),d0
    3406:	|  |  +-- beq.s 3414 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3408:	|  |  |   movea.l (sp),a0
    340a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    340e:	|  |  |   movea.l (sp),a0
    3410:	|  |  |   clr.w 46(a0)
		}
		thisFunction = thisFunction -> next;
    3414:	|  |  \-> movea.l (sp),a0
    3416:	|  |      move.l 40(a0),(sp)
	while (thisFunction) {
    341a:	|  \----> tst.l (sp)
    341c:	\-------- bne.s 33f0 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    341e:	          jsr 4e30 <killAllSpeech>
}
    3424:	          nop
    3426:	          addq.l #4,sp
    3428:	          rts

0000342a <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    342a:	             lea -52(sp),sp
    342e:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3430:	             movea.l 60(sp),a0
    3434:	             move.l (a0),d0
    3436:	             move.l d0,-(sp)
    3438:	             jsr 407c <openSubSlice>
    343e:	             addq.l #4,sp
    3440:	             tst.w d0
    3442:	         /-- bne.s 344a <loadFunctionCode+0x20>
    3444:	         |   clr.w d0
    3446:	/--------|-- bra.w 360c <loadFunctionCode+0x1e2>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    344a:	|        \-> move.l 17b10 <bigDataFile>,44(sp)
    3452:	|            move.l 17b30 <DOSBase>,d0
    3458:	|            movea.l d0,a6
    345a:	|            move.l 44(sp),d1
    345e:	|            jsr -306(a6)
    3462:	|            move.l d0,40(sp)
    3466:	|            move.l 40(sp),d0
    346a:	|            move.l d0,d0
    346c:	|            movea.l 60(sp),a0
    3470:	|            move.w d0,48(a0)
	numLines				= get2bytes (bigDataFile);
    3474:	|            move.l 17b10 <bigDataFile>,d0
    347a:	|            move.l d0,-(sp)
    347c:	|            jsr 6bc <get2bytes>
    3482:	|            addq.l #4,sp
    3484:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3488:	|            move.l 17b10 <bigDataFile>,d0
    348e:	|            move.l d0,-(sp)
    3490:	|            jsr 6bc <get2bytes>
    3496:	|            addq.l #4,sp
    3498:	|            movea.l 60(sp),a0
    349c:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    34a0:	|            move.l 17b10 <bigDataFile>,d0
    34a6:	|            move.l d0,-(sp)
    34a8:	|            jsr 6bc <get2bytes>
    34ae:	|            addq.l #4,sp
    34b0:	|            movea.l 60(sp),a0
    34b4:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    34b8:	|            move.l 36(sp),d0
    34bc:	|            lsl.l #3,d0
    34be:	|            move.l d0,32(sp)
    34c2:	|            clr.l 28(sp)
    34c6:	|            move.l 17b28 <SysBase>,d0
    34cc:	|            movea.l d0,a6
    34ce:	|            move.l 32(sp),d0
    34d2:	|            move.l 28(sp),d1
    34d6:	|            jsr -684(a6)
    34da:	|            move.l d0,24(sp)
    34de:	|            move.l 24(sp),d0
    34e2:	|            movea.l 60(sp),a0
    34e6:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    34ea:	|            movea.l 60(sp),a0
    34ee:	|            move.l 4(a0),d0
    34f2:	|        /-- bne.s 3508 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    34f4:	|        |   pea 13205 <thumbnail.c.7eb31449+0x121>
    34fa:	|        |   jsr 12018 <KPrintF>
    3500:	|        |   addq.l #4,sp
		return FALSE;
    3502:	|        |   clr.w d0
    3504:	+--------|-- bra.w 360c <loadFunctionCode+0x1e2>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3508:	|        \-> clr.l 52(sp)
    350c:	|        /-- bra.s 356e <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    350e:	|     /--|-> move.l 17b10 <bigDataFile>,8(sp)
    3516:	|     |  |   move.l 17b30 <DOSBase>,d0
    351c:	|     |  |   movea.l d0,a6
    351e:	|     |  |   move.l 8(sp),d1
    3522:	|     |  |   jsr -306(a6)
    3526:	|     |  |   move.l d0,4(sp)
    352a:	|     |  |   move.l 4(sp),d1
    352e:	|     |  |   movea.l 60(sp),a0
    3532:	|     |  |   movea.l 4(a0),a0
    3536:	|     |  |   move.l 52(sp),d0
    353a:	|     |  |   lsl.l #3,d0
    353c:	|     |  |   adda.l d0,a0
    353e:	|     |  |   move.l d1,d0
    3540:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3542:	|     |  |   move.l 17b10 <bigDataFile>,d0
    3548:	|     |  |   move.l d0,-(sp)
    354a:	|     |  |   jsr 6bc <get2bytes>
    3550:	|     |  |   addq.l #4,sp
    3552:	|     |  |   move.l d0,d1
    3554:	|     |  |   movea.l 60(sp),a0
    3558:	|     |  |   movea.l 4(a0),a0
    355c:	|     |  |   move.l 52(sp),d0
    3560:	|     |  |   lsl.l #3,d0
    3562:	|     |  |   adda.l d0,a0
    3564:	|     |  |   move.l d1,d0
    3566:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    356a:	|     |  |   addq.l #1,52(sp)
    356e:	|     |  \-> move.l 52(sp),d0
    3572:	|     |      cmp.l 36(sp),d0
    3576:	|     \----- bcs.s 350e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3578:	|            jsr 3dec <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 1) {
    357e:	|            movea.l 60(sp),a0
    3582:	|            move.l 8(a0),d0
    3586:	|            moveq #1,d1
    3588:	|            cmp.l d0,d1
    358a:	|  /-------- bge.s 360a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    358c:	|  |         movea.l 60(sp),a0
    3590:	|  |         move.l 8(a0),d0
    3594:	|  |         lsl.l #3,d0
    3596:	|  |         move.l d0,20(sp)
    359a:	|  |         clr.l 16(sp)
    359e:	|  |         move.l 17b28 <SysBase>,d0
    35a4:	|  |         movea.l d0,a6
    35a6:	|  |         move.l 20(sp),d0
    35aa:	|  |         move.l 16(sp),d1
    35ae:	|  |         jsr -684(a6)
    35b2:	|  |         move.l d0,12(sp)
    35b6:	|  |         move.l 12(sp),d0
    35ba:	|  |         movea.l 60(sp),a0
    35be:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    35c2:	|  |         movea.l 60(sp),a0
    35c6:	|  |         move.l 20(a0),d0
    35ca:	|  |     /-- bne.s 35de <loadFunctionCode+0x1b4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    35cc:	|  |     |   pea 13205 <thumbnail.c.7eb31449+0x121>
    35d2:	|  |     |   jsr 12018 <KPrintF>
    35d8:	|  |     |   addq.l #4,sp
			return FALSE;
    35da:	|  |     |   clr.w d0
    35dc:	+--|-----|-- bra.s 360c <loadFunctionCode+0x1e2>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    35de:	|  |     \-> clr.l 48(sp)
    35e2:	|  |     /-- bra.s 35fc <loadFunctionCode+0x1d2>
			initVarNew (newFunc -> localVars[a]);
    35e4:	|  |  /--|-> movea.l 60(sp),a0
    35e8:	|  |  |  |   move.l 20(a0),d1
    35ec:	|  |  |  |   move.l 48(sp),d0
    35f0:	|  |  |  |   lsl.l #3,d0
    35f2:	|  |  |  |   movea.l d1,a0
    35f4:	|  |  |  |   adda.l d0,a0
    35f6:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    35f8:	|  |  |  |   addq.l #1,48(sp)
    35fc:	|  |  |  \-> movea.l 60(sp),a0
    3600:	|  |  |      move.l 8(a0),d0
    3604:	|  |  |      cmp.l 48(sp),d0
    3608:	|  |  \----- bgt.s 35e4 <loadFunctionCode+0x1ba>
		}
	}
	return TRUE;
    360a:	|  \-------> moveq #1,d0
}
    360c:	\----------> movea.l (sp)+,a6
    360e:	             lea 52(sp),sp
    3612:	             rts

00003614 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3614:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3616:	movea.l 16004 <currentEvents>,a2
    361c:	move.l 8(sp),-(sp)
    3620:	jsr 6bc <get2bytes>
    3626:	addq.l #4,sp
    3628:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    362a:	movea.l 16004 <currentEvents>,a2
    3630:	move.l 8(sp),-(sp)
    3634:	jsr 6bc <get2bytes>
    363a:	addq.l #4,sp
    363c:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3640:	movea.l 16004 <currentEvents>,a2
    3646:	move.l 8(sp),-(sp)
    364a:	jsr 6bc <get2bytes>
    3650:	addq.l #4,sp
    3652:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3656:	movea.l 16004 <currentEvents>,a2
    365c:	move.l 8(sp),-(sp)
    3660:	jsr 6bc <get2bytes>
    3666:	addq.l #4,sp
    3668:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    366c:	movea.l 16004 <currentEvents>,a2
    3672:	move.l 8(sp),-(sp)
    3676:	jsr 6bc <get2bytes>
    367c:	addq.l #4,sp
    367e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3682:	movea.l 16004 <currentEvents>,a2
    3688:	move.l 8(sp),-(sp)
    368c:	jsr 6bc <get2bytes>
    3692:	addq.l #4,sp
    3694:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3698:	movea.l 16004 <currentEvents>,a2
    369e:	move.l 8(sp),-(sp)
    36a2:	jsr 6bc <get2bytes>
    36a8:	addq.l #4,sp
    36aa:	move.l d0,24(a2)
}
    36ae:	nop
    36b0:	movea.l (sp)+,a2
    36b2:	rts

000036b4 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    36b4:	       lea -312(sp),sp
    36b8:	       movem.l d2-d3/a6,-(sp)
    36bc:	       move.l 332(sp),d1
    36c0:	       move.l 336(sp),d0
    36c4:	       move.b d1,d1
    36c6:	       move.b d1,16(sp)
    36ca:	       move.b d0,d0
    36cc:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    36d0:	       move.l 328(sp),318(sp)
    36d6:	       move.l #1005,314(sp)
    36de:	       move.l 17b30 <DOSBase>,d0
    36e4:	       movea.l d0,a6
    36e6:	       move.l 318(sp),d1
    36ea:	       move.l 314(sp),d2
    36ee:	       jsr -30(a6)
    36f2:	       move.l d0,310(sp)
    36f6:	       move.l 310(sp),d0
    36fa:	       move.l d0,306(sp)

	if (! fp) {
    36fe:	   /-- bne.s 375a <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3700:	   |   move.l 17b30 <DOSBase>,d0
    3706:	   |   movea.l d0,a6
    3708:	   |   jsr -60(a6)
    370c:	   |   move.l d0,154(sp)
    3710:	   |   move.l 154(sp),d0
    3714:	   |   move.l d0,150(sp)
    3718:	   |   move.l #78382,146(sp)
    3720:	   |   moveq #31,d0
    3722:	   |   move.l d0,142(sp)
    3726:	   |   move.l 17b30 <DOSBase>,d0
    372c:	   |   movea.l d0,a6
    372e:	   |   move.l 150(sp),d1
    3732:	   |   move.l 146(sp),d2
    3736:	   |   move.l 142(sp),d3
    373a:	   |   jsr -48(a6)
    373e:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3742:	   |   move.l 328(sp),-(sp)
    3746:	   |   pea 1324e <line.c.ed97c08b+0x36>
    374c:	   |   jsr 12018 <KPrintF>
    3752:	   |   addq.l #8,sp
		return NULL;
    3754:	   |   moveq #0,d0
    3756:	/--|-- bra.w 3a1a <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    375a:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    375e:	|      move.l 306(sp),302(sp)
    3764:	|      move.l 17b30 <DOSBase>,d0
    376a:	|      movea.l d0,a6
    376c:	|      move.l 302(sp),d1
    3770:	|      jsr -306(a6)
    3774:	|      move.l d0,298(sp)
    3778:	|      move.l 298(sp),d0
    377c:	|      moveq #83,d1
    377e:	|      cmp.l d0,d1
    3780:	|  /-- beq.s 3788 <openAndVerify+0xd4>
    3782:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3788:	|  \-> move.l 306(sp),294(sp)
    378e:	|      move.l 17b30 <DOSBase>,d0
    3794:	|      movea.l d0,a6
    3796:	|      move.l 294(sp),d1
    379a:	|      jsr -306(a6)
    379e:	|      move.l d0,290(sp)
    37a2:	|      move.l 290(sp),d0
    37a6:	|      moveq #76,d1
    37a8:	|      cmp.l d0,d1
    37aa:	|  /-- beq.s 37b2 <openAndVerify+0xfe>
    37ac:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    37b2:	|  \-> move.l 306(sp),286(sp)
    37b8:	|      move.l 17b30 <DOSBase>,d0
    37be:	|      movea.l d0,a6
    37c0:	|      move.l 286(sp),d1
    37c4:	|      jsr -306(a6)
    37c8:	|      move.l d0,282(sp)
    37cc:	|      move.l 282(sp),d0
    37d0:	|      moveq #85,d1
    37d2:	|      cmp.l d0,d1
    37d4:	|  /-- beq.s 37dc <openAndVerify+0x128>
    37d6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    37dc:	|  \-> move.l 306(sp),278(sp)
    37e2:	|      move.l 17b30 <DOSBase>,d0
    37e8:	|      movea.l d0,a6
    37ea:	|      move.l 278(sp),d1
    37ee:	|      jsr -306(a6)
    37f2:	|      move.l d0,274(sp)
    37f6:	|      move.l 274(sp),d0
    37fa:	|      moveq #68,d1
    37fc:	|      cmp.l d0,d1
    37fe:	|  /-- beq.s 3806 <openAndVerify+0x152>
    3800:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3806:	|  \-> move.l 306(sp),270(sp)
    380c:	|      move.l 17b30 <DOSBase>,d0
    3812:	|      movea.l d0,a6
    3814:	|      move.l 270(sp),d1
    3818:	|      jsr -306(a6)
    381c:	|      move.l d0,266(sp)
    3820:	|      move.l 266(sp),d1
    3824:	|      move.b 16(sp),d0
    3828:	|      ext.w d0
    382a:	|      movea.w d0,a0
    382c:	|      cmpa.l d1,a0
    382e:	|  /-- beq.s 3836 <openAndVerify+0x182>
    3830:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3836:	|  \-> move.l 306(sp),262(sp)
    383c:	|      move.l 17b30 <DOSBase>,d0
    3842:	|      movea.l d0,a6
    3844:	|      move.l 262(sp),d1
    3848:	|      jsr -306(a6)
    384c:	|      move.l d0,258(sp)
    3850:	|      move.l 258(sp),d1
    3854:	|      move.b 14(sp),d0
    3858:	|      ext.w d0
    385a:	|      movea.w d0,a0
    385c:	|      cmpa.l d1,a0
    385e:	|  /-- beq.s 3866 <openAndVerify+0x1b2>
    3860:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3866:	|  \-> tst.w 322(sp)
    386a:	|  /-- beq.s 38c2 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    386c:	|  |   move.l 17b30 <DOSBase>,d0
    3872:	|  |   movea.l d0,a6
    3874:	|  |   jsr -60(a6)
    3878:	|  |   move.l d0,174(sp)
    387c:	|  |   move.l 174(sp),d0
    3880:	|  |   move.l d0,170(sp)
    3884:	|  |   move.l #78445,166(sp)
    388c:	|  |   moveq #31,d0
    388e:	|  |   move.l d0,162(sp)
    3892:	|  |   move.l 17b30 <DOSBase>,d0
    3898:	|  |   movea.l d0,a6
    389a:	|  |   move.l 170(sp),d1
    389e:	|  |   move.l 166(sp),d2
    38a2:	|  |   move.l 162(sp),d3
    38a6:	|  |   jsr -48(a6)
    38aa:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    38ae:	|  |   pea 1326d <line.c.ed97c08b+0x55>
    38b4:	|  |   jsr 12018 <KPrintF>
    38ba:	|  |   addq.l #4,sp
		return NULL;
    38bc:	|  |   moveq #0,d0
    38be:	+--|-- bra.w 3a1a <openAndVerify+0x366>
	}
	FGetC (fp);
    38c2:	|  \-> move.l 306(sp),254(sp)
    38c8:	|      move.l 17b30 <DOSBase>,d0
    38ce:	|      movea.l d0,a6
    38d0:	|      move.l 254(sp),d1
    38d4:	|      jsr -306(a6)
    38d8:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    38dc:	|      nop
    38de:	|  /-> move.l 306(sp),246(sp)
    38e4:	|  |   move.l 17b30 <DOSBase>,d0
    38ea:	|  |   movea.l d0,a6
    38ec:	|  |   move.l 246(sp),d1
    38f0:	|  |   jsr -306(a6)
    38f4:	|  |   move.l d0,242(sp)
    38f8:	|  |   move.l 242(sp),d0
    38fc:	|  \-- bne.s 38de <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    38fe:	|      move.l 306(sp),238(sp)
    3904:	|      move.l 17b30 <DOSBase>,d0
    390a:	|      movea.l d0,a6
    390c:	|      move.l 238(sp),d1
    3910:	|      jsr -306(a6)
    3914:	|      move.l d0,234(sp)
    3918:	|      move.l 234(sp),d0
    391c:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3920:	|      move.l 306(sp),226(sp)
    3926:	|      move.l 17b30 <DOSBase>,d0
    392c:	|      movea.l d0,a6
    392e:	|      move.l 226(sp),d1
    3932:	|      jsr -306(a6)
    3936:	|      move.l d0,222(sp)
    393a:	|      move.l 222(sp),d0
    393e:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3942:	|      move.l 230(sp),d0
    3946:	|      lsl.l #8,d0
    3948:	|      add.l 218(sp),d0
    394c:	|      movea.l 344(sp),a0
    3950:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3952:	|      movea.l 344(sp),a0
    3956:	|      move.l (a0),d0
    3958:	|      cmpi.l #514,d0
    395e:	|  /-- ble.s 39b4 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3960:	|  |   move.l 17b30 <DOSBase>,d0
    3966:	|  |   movea.l d0,a6
    3968:	|  |   jsr -60(a6)
    396c:	|  |   move.l d0,194(sp)
    3970:	|  |   move.l 194(sp),d0
    3974:	|  |   move.l d0,190(sp)
    3978:	|  |   move.l #78472,186(sp)
    3980:	|  |   moveq #100,d1
    3982:	|  |   move.l d1,182(sp)
    3986:	|  |   move.l 17b30 <DOSBase>,d0
    398c:	|  |   movea.l d0,a6
    398e:	|  |   move.l 190(sp),d1
    3992:	|  |   move.l 186(sp),d2
    3996:	|  |   move.l 182(sp),d3
    399a:	|  |   jsr -48(a6)
    399e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    39a2:	|  |   pea 13288 <line.c.ed97c08b+0x70>
    39a8:	|  |   jsr 12018 <KPrintF>
    39ae:	|  |   addq.l #4,sp
		return NULL;
    39b0:	|  |   moveq #0,d0
    39b2:	+--|-- bra.s 3a1a <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    39b4:	|  \-> movea.l 344(sp),a0
    39b8:	|      move.l (a0),d0
    39ba:	|      cmpi.l #257,d0
    39c0:	|  /-- bgt.s 3a16 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    39c2:	|  |   move.l 17b30 <DOSBase>,d0
    39c8:	|  |   movea.l d0,a6
    39ca:	|  |   jsr -60(a6)
    39ce:	|  |   move.l d0,214(sp)
    39d2:	|  |   move.l 214(sp),d0
    39d6:	|  |   move.l d0,210(sp)
    39da:	|  |   move.l #78541,206(sp)
    39e2:	|  |   moveq #100,d0
    39e4:	|  |   move.l d0,202(sp)
    39e8:	|  |   move.l 17b30 <DOSBase>,d0
    39ee:	|  |   movea.l d0,a6
    39f0:	|  |   move.l 210(sp),d1
    39f4:	|  |   move.l 206(sp),d2
    39f8:	|  |   move.l 202(sp),d3
    39fc:	|  |   jsr -48(a6)
    3a00:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3a04:	|  |   pea 132cd <line.c.ed97c08b+0xb5>
    3a0a:	|  |   jsr 12018 <KPrintF>
    3a10:	|  |   addq.l #4,sp
		return NULL;
    3a12:	|  |   moveq #0,d0
    3a14:	+--|-- bra.s 3a1a <openAndVerify+0x366>
	}
	return fp;
    3a16:	|  \-> move.l 306(sp),d0
}
    3a1a:	\----> movem.l (sp)+,d2-d3/a6
    3a1e:	       lea 312(sp),sp
    3a22:	       rts

00003a24 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    3a24:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    3a26:	          move.l #96964,(sp)
	while (* huntAndDestroy) {
    3a2c:	   /----- bra.s 3a58 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    3a2e:	/--|----> movea.l (sp),a0
    3a30:	|  |      move.l (a0),d0
    3a32:	|  |      cmp.l 8(sp),d0
    3a36:	|  |  /-- bne.s 3a4e <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    3a38:	|  |  |   movea.l (sp),a0
    3a3a:	|  |  |   movea.l (a0),a0
    3a3c:	|  |  |   move.l 40(a0),d0
    3a40:	|  |  |   movea.l (sp),a0
    3a42:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    3a44:	|  |  |   movea.l 8(sp),a0
    3a48:	|  |  |   clr.l 40(a0)
    3a4c:	|  +--|-- bra.s 3a58 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    3a4e:	|  |  \-> movea.l (sp),a0
    3a50:	|  |      move.l (a0),d0
    3a52:	|  |      moveq #40,d1
    3a54:	|  |      add.l d0,d1
    3a56:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    3a58:	|  \----> movea.l (sp),a0
    3a5a:	|         move.l (a0),d0
    3a5c:	\-------- bne.s 3a2e <pauseFunction+0xa>
		}
	}
}
    3a5e:	          nop
    3a60:	          nop
    3a62:	          addq.l #4,sp
    3a64:	          rts

00003a66 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    3a66:	move.l 17ac4 <allRunningFunctions>,d0
    3a6c:	movea.l 4(sp),a0
    3a70:	move.l d0,40(a0)
	allRunningFunctions = fun;
    3a74:	move.l 4(sp),17ac4 <allRunningFunctions>
}
    3a7c:	nop
    3a7e:	rts

00003a80 <runSludge>:

BOOL runSludge () {
    3a80:	                   lea -12(sp),sp
    3a84:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    3a86:	                   move.l 17ac4 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    3a8e:	      /----------- bra.s 3b0a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    3a90:	   /--|----------> movea.l 12(sp),a0
    3a94:	   |  |            move.l 40(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    3a9a:	   |  |            movea.l 12(sp),a0
    3a9e:	   |  |            move.b 52(a0),d0
    3aa2:	   |  |  /-------- bne.s 3b04 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    3aa4:	   |  |  |         movea.l 12(sp),a0
    3aa8:	   |  |  |         move.l 12(a0),d0
    3aac:	   |  |  |  /----- beq.s 3ad6 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    3aae:	   |  |  |  |      movea.l 12(sp),a0
    3ab2:	   |  |  |  |      move.l 12(a0),d0
    3ab6:	   |  |  |  |  /-- bpl.s 3ac2 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    3ab8:	   |  |  |  |  |   movea.l 12(sp),a0
    3abc:	   |  |  |  |  |   clr.l 12(a0)
    3ac0:	   |  |  +--|--|-- bra.s 3b04 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    3ac2:	   |  |  |  |  \-> movea.l 12(sp),a0
    3ac6:	   |  |  |  |      move.l 12(a0),d0
    3aca:	   |  |  |  |      subq.l #1,d0
    3acc:	   |  |  |  |      movea.l 12(sp),a0
    3ad0:	   |  |  |  |      move.l d0,12(a0)
    3ad4:	   |  |  +--|----- bra.s 3b04 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    3ad6:	   |  |  |  \----> movea.l 12(sp),a0
    3ada:	   |  |  |         move.w 46(a0),d0
    3ade:	   |  |  |     /-- beq.s 3aee <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    3ae0:	   |  |  |     |   movea.l 12(sp),a0
    3ae4:	   |  |  |     |   clr.w 46(a0)
					killAllSpeech ();
    3ae8:	   |  |  |     |   jsr 4e30 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    3aee:	   |  |  |     \-> move.l 12(sp),-(sp)
    3af2:	   |  |  |         jsr 1c50 <continueFunction>
    3af8:	   |  |  |         addq.l #4,sp
    3afa:	   |  |  |         tst.w d0
    3afc:	   |  |  +-------- bne.s 3b04 <runSludge+0x84>
					return FALSE;
    3afe:	   |  |  |         clr.w d0
    3b00:	/--|--|--|-------- bra.w 3b90 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    3b04:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    3b0a:	|  |  \----------> tst.l 12(sp)
    3b0e:	|  \-------------- bne.s 3a90 <runSludge+0x10>
	}

	if (loadNow) {
    3b10:	|                  move.l 17af4 <loadNow>,d0
    3b16:	|        /-------- beq.s 3b8e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    3b18:	|        |         movea.l 17af4 <loadNow>,a0
    3b1e:	|        |         move.b (a0),d0
    3b20:	|        |         cmpi.b #58,d0
    3b24:	|        |  /----- bne.s 3b58 <runSludge+0xd8>
			saveGame (loadNow + 1);
    3b26:	|        |  |      move.l 17af4 <loadNow>,d0
    3b2c:	|        |  |      addq.l #1,d0
    3b2e:	|        |  |      move.l d0,-(sp)
    3b30:	|        |  |      jsr 8144 <saveGame>
    3b36:	|        |  |      addq.l #4,sp
			setVariable (saverFunc->reg, SVT_INT, 1);
    3b38:	|        |  |      movea.l 17be0 <saverFunc>,a0
    3b3e:	|        |  |      move.l 28(a0),d0
    3b42:	|        |  |      pea 1 <_start+0x1>
    3b46:	|        |  |      pea 1 <_start+0x1>
    3b4a:	|        |  |      move.l d0,-(sp)
    3b4c:	|        |  |      jsr 1091a <setVariable>
    3b52:	|        |  |      lea 12(sp),sp
    3b56:	|        |  |  /-- bra.s 3b70 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    3b58:	|        |  \--|-> move.l 17af4 <loadNow>,d0
    3b5e:	|        |     |   move.l d0,-(sp)
    3b60:	|        |     |   jsr 7c8a <loadGame>
    3b66:	|        |     |   addq.l #4,sp
    3b68:	|        |     |   tst.w d0
    3b6a:	|        |     +-- bne.s 3b70 <runSludge+0xf0>
    3b6c:	|        |     |   clr.w d0
    3b6e:	+--------|-----|-- bra.s 3b90 <runSludge+0x110>
		}
		FreeVec(loadNow);
    3b70:	|        |     \-> move.l 17af4 <loadNow>,8(sp)
    3b78:	|        |         move.l 17b28 <SysBase>,d0
    3b7e:	|        |         movea.l d0,a6
    3b80:	|        |         movea.l 8(sp),a1
    3b84:	|        |         jsr -690(a6)
		loadNow = NULL;
    3b88:	|        |         clr.l 17af4 <loadNow>
	}

	return TRUE;
    3b8e:	|        \-------> moveq #1,d0
}
    3b90:	\----------------> movea.l (sp)+,a6
    3b92:	                   lea 12(sp),sp
    3b96:	                   rts

00003b98 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    3b98:	movea.l 16004 <currentEvents>,a0
    3b9e:	move.l (a0),d0
    3ba0:	move.l 4(sp),-(sp)
    3ba4:	move.l d0,-(sp)
    3ba6:	jsr 8d0 <put2bytes>
    3bac:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    3bae:	movea.l 16004 <currentEvents>,a0
    3bb4:	move.l 4(a0),d0
    3bb8:	move.l 4(sp),-(sp)
    3bbc:	move.l d0,-(sp)
    3bbe:	jsr 8d0 <put2bytes>
    3bc4:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    3bc6:	movea.l 16004 <currentEvents>,a0
    3bcc:	move.l 8(a0),d0
    3bd0:	move.l 4(sp),-(sp)
    3bd4:	move.l d0,-(sp)
    3bd6:	jsr 8d0 <put2bytes>
    3bdc:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    3bde:	movea.l 16004 <currentEvents>,a0
    3be4:	move.l 12(a0),d0
    3be8:	move.l 4(sp),-(sp)
    3bec:	move.l d0,-(sp)
    3bee:	jsr 8d0 <put2bytes>
    3bf4:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    3bf6:	movea.l 16004 <currentEvents>,a0
    3bfc:	move.l 16(a0),d0
    3c00:	move.l 4(sp),-(sp)
    3c04:	move.l d0,-(sp)
    3c06:	jsr 8d0 <put2bytes>
    3c0c:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    3c0e:	movea.l 16004 <currentEvents>,a0
    3c14:	move.l 20(a0),d0
    3c18:	move.l 4(sp),-(sp)
    3c1c:	move.l d0,-(sp)
    3c1e:	jsr 8d0 <put2bytes>
    3c24:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    3c26:	movea.l 16004 <currentEvents>,a0
    3c2c:	move.l 24(a0),d0
    3c30:	move.l 4(sp),-(sp)
    3c34:	move.l d0,-(sp)
    3c36:	jsr 8d0 <put2bytes>
    3c3c:	addq.l #8,sp
}
    3c3e:	nop
    3c40:	rts

00003c42 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    3c42:	      /-- bra.s 3c62 <stackSetByIndex+0x20>
		vS = vS->next;
    3c44:	/-----|-> movea.l 4(sp),a0
    3c48:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    3c4e:	|     +-- bne.s 3c62 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    3c50:	|     |   pea 13314 <line.c.ed97c08b+0xfc>
    3c56:	|     |   jsr 12018 <KPrintF>
    3c5c:	|     |   addq.l #4,sp
			return FALSE;
    3c5e:	|     |   clr.w d0
    3c60:	|  /--|-- bra.s 3c84 <stackSetByIndex+0x42>
	while (theIndex--) {
    3c62:	|  |  \-> move.l 8(sp),d0
    3c66:	|  |      move.l d0,d1
    3c68:	|  |      subq.l #1,d1
    3c6a:	|  |      move.l d1,8(sp)
    3c6e:	|  |      tst.l d0
    3c70:	\--|----- bne.s 3c44 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    3c72:	   |      move.l 4(sp),d0
    3c76:	   |      move.l d0,-(sp)
    3c78:	   |      move.l 16(sp),-(sp)
    3c7c:	   |      jsr 10504 <copyVariable>
    3c82:	   |      addq.l #8,sp
}
    3c84:	   \----> rts

00003c86 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack * vStack, BOOL returnSommet) {
    3c86:	             lea -20(sp),sp
    3c8a:	             move.l a6,-(sp)
    3c8c:	             move.l 44(sp),d0
    3c90:	             move.w d0,d0
    3c92:	             move.w d0,6(sp)
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    3c96:	             moveq #54,d0
    3c98:	             move.l d0,20(sp)
    3c9c:	             clr.l 16(sp)
    3ca0:	             move.l 17b28 <SysBase>,d0
    3ca6:	             movea.l d0,a6
    3ca8:	             move.l 20(sp),d0
    3cac:	             move.l 16(sp),d1
    3cb0:	             jsr -684(a6)
    3cb4:	             move.l d0,12(sp)
    3cb8:	             move.l 12(sp),d0
    3cbc:	             move.l d0,8(sp)
	if(!newFunc) {
    3cc0:	         /-- bne.s 3cd6 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    3cc2:	         |   pea 1332d <line.c.ed97c08b+0x115>
    3cc8:	         |   jsr 12018 <KPrintF>
    3cce:	         |   addq.l #4,sp
		return 0;
    3cd0:	         |   moveq #0,d0
    3cd2:	/--------|-- bra.w 3de4 <startNewFunctionNum+0x15e>
	}
	newFunc -> originalNumber = funcNum;
    3cd6:	|        \-> move.l 28(sp),d0
    3cda:	|            movea.l 8(sp),a0
    3cde:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    3ce0:	|            move.l 8(sp),-(sp)
    3ce4:	|            jsr 342a <loadFunctionCode>
    3cea:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    3cec:	|            movea.l 8(sp),a0
    3cf0:	|            move.l 16(a0),d1
    3cf4:	|            move.l 32(sp),d0
    3cf8:	|            cmp.l d1,d0
    3cfa:	|        /-- beq.s 3d10 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    3cfc:	|        |   pea 13356 <line.c.ed97c08b+0x13e>
    3d02:	|        |   jsr 12018 <KPrintF>
    3d08:	|        |   addq.l #4,sp
		return NULL; 
    3d0a:	|        |   moveq #0,d0
    3d0c:	+--------|-- bra.w 3de4 <startNewFunctionNum+0x15e>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    3d10:	|        \-> movea.l 8(sp),a0
    3d14:	|            move.l 16(a0),d1
    3d18:	|            movea.l 8(sp),a0
    3d1c:	|            move.l 8(a0),d0
    3d20:	|            cmp.l d1,d0
    3d22:	|  /-------- bge.s 3d82 <startNewFunctionNum+0xfc>
		KPrintF ("More arguments than local variable space!");
    3d24:	|  |         pea 13372 <line.c.ed97c08b+0x15a>
    3d2a:	|  |         jsr 12018 <KPrintF>
    3d30:	|  |         addq.l #4,sp
		return NULL; 
    3d32:	|  |         moveq #0,d0
    3d34:	+--|-------- bra.w 3de4 <startNewFunctionNum+0x15e>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		numParamsExpected --;
    3d38:	|  |  /----> subq.l #1,32(sp)
		if (vStack == NULL) {
    3d3c:	|  |  |      tst.l 40(sp)
    3d40:	|  |  |  /-- bne.s 3d56 <startNewFunctionNum+0xd0>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    3d42:	|  |  |  |   pea 1339c <line.c.ed97c08b+0x184>
    3d48:	|  |  |  |   jsr 12018 <KPrintF>
    3d4e:	|  |  |  |   addq.l #4,sp
			return NULL;
    3d50:	|  |  |  |   moveq #0,d0
    3d52:	+--|--|--|-- bra.w 3de4 <startNewFunctionNum+0x15e>
		}
		copyVariable (&vStack -> thisVar, &newFunc->localVars[numParamsExpected]);
    3d56:	|  |  |  \-> movea.l 8(sp),a0
    3d5a:	|  |  |      move.l 20(a0),d1
    3d5e:	|  |  |      move.l 32(sp),d0
    3d62:	|  |  |      lsl.l #3,d0
    3d64:	|  |  |      add.l d0,d1
    3d66:	|  |  |      move.l 40(sp),d0
    3d6a:	|  |  |      move.l d1,-(sp)
    3d6c:	|  |  |      move.l d0,-(sp)
    3d6e:	|  |  |      jsr 10504 <copyVariable>
    3d74:	|  |  |      addq.l #8,sp
		trimStack (vStack);
    3d76:	|  |  |      move.l 40(sp),-(sp)
    3d7a:	|  |  |      jsr 109ac <trimStack>
    3d80:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    3d82:	|  \--|----> tst.l 32(sp)
    3d86:	|     \----- bne.s 3d38 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    3d88:	|            movea.l 8(sp),a0
    3d8c:	|            clr.w 50(a0)
	newFunc -> timeLeft = 0;
    3d90:	|            movea.l 8(sp),a0
    3d94:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    3d98:	|            movea.l 8(sp),a0
    3d9c:	|            move.w 6(sp),44(a0)
	newFunc -> calledBy = calledBy;
    3da2:	|            movea.l 8(sp),a0
    3da6:	|            move.l 36(sp),36(a0)
	newFunc -> stack = NULL;
    3dac:	|            movea.l 8(sp),a0
    3db0:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    3db4:	|            movea.l 8(sp),a0
    3db8:	|            clr.b 52(a0)
	newFunc -> runThisLine = 0;
    3dbc:	|            movea.l 8(sp),a0
    3dc0:	|            clr.l 32(a0)
	newFunc -> isSpeech = 0;
    3dc4:	|            movea.l 8(sp),a0
    3dc8:	|            clr.w 46(a0)
	newFunc -> reg -> varType = SVT_NULL;
    3dcc:	|            movea.l 8(sp),a0
    3dd0:	|            movea.l 28(a0),a0
    3dd4:	|            clr.l (a0)

	restartFunction (newFunc);
    3dd6:	|            move.l 8(sp),-(sp)
    3dda:	|            jsr 3a66 <restartFunction>
    3de0:	|            addq.l #4,sp
	return 1;
    3de2:	|            moveq #1,d0
}
    3de4:	\----------> movea.l (sp)+,a6
    3de6:	             lea 20(sp),sp
    3dea:	             rts

00003dec <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    3dec:	clr.w 16010 <sliceBusy>
}
    3df2:	nop
    3df4:	rts

00003df6 <getNumberedString>:

char * getNumberedString (int value) {
    3df6:	       lea -56(sp),sp
    3dfa:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    3dfe:	       move.w 16010 <sliceBusy>,d0
    3e04:	   /-- beq.s 3e4e <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    3e06:	   |   move.l 17b30 <DOSBase>,d0
    3e0c:	   |   movea.l d0,a6
    3e0e:	   |   jsr -60(a6)
    3e12:	   |   move.l d0,28(sp)
    3e16:	   |   move.l 28(sp),d0
    3e1a:	   |   move.l d0,24(sp)
    3e1e:	   |   move.l #78823,20(sp)
    3e26:	   |   moveq #76,d0
    3e28:	   |   move.l d0,16(sp)
    3e2c:	   |   move.l 17b30 <DOSBase>,d0
    3e32:	   |   movea.l d0,a6
    3e34:	   |   move.l 24(sp),d1
    3e38:	   |   move.l 20(sp),d2
    3e3c:	   |   move.l 16(sp),d3
    3e40:	   |   jsr -48(a6)
    3e44:	   |   move.l d0,12(sp)
		return NULL;
    3e48:	   |   moveq #0,d0
    3e4a:	/--|-- bra.w 3eea <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    3e4e:	|  \-> move.l 17b10 <bigDataFile>,64(sp)
    3e56:	|      move.l 72(sp),d0
    3e5a:	|      add.l d0,d0
    3e5c:	|      add.l d0,d0
    3e5e:	|      move.l d0,d1
    3e60:	|      move.l 17b1c <startOfTextIndex>,d0
    3e66:	|      add.l d1,d0
    3e68:	|      move.l d0,60(sp)
    3e6c:	|      moveq #-1,d0
    3e6e:	|      move.l d0,56(sp)
    3e72:	|      move.l 17b30 <DOSBase>,d0
    3e78:	|      movea.l d0,a6
    3e7a:	|      move.l 64(sp),d1
    3e7e:	|      move.l 60(sp),d2
    3e82:	|      move.l 56(sp),d3
    3e86:	|      jsr -66(a6)
    3e8a:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    3e8e:	|      move.l 17b10 <bigDataFile>,d0
    3e94:	|      move.l d0,-(sp)
    3e96:	|      jsr 718 <get4bytes>
    3e9c:	|      addq.l #4,sp
    3e9e:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    3ea2:	|      move.l 17b10 <bigDataFile>,48(sp)
    3eaa:	|      move.l 72(sp),44(sp)
    3eb0:	|      moveq #-1,d0
    3eb2:	|      move.l d0,40(sp)
    3eb6:	|      move.l 17b30 <DOSBase>,d0
    3ebc:	|      movea.l d0,a6
    3ebe:	|      move.l 48(sp),d1
    3ec2:	|      move.l 44(sp),d2
    3ec6:	|      move.l 40(sp),d3
    3eca:	|      jsr -66(a6)
    3ece:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    3ed2:	|      move.l 17b10 <bigDataFile>,d0
    3ed8:	|      move.l d0,-(sp)
    3eda:	|      jsr b02 <readString>
    3ee0:	|      addq.l #4,sp
    3ee2:	|      move.l d0,32(sp)
	
	return s;
    3ee6:	|      move.l 32(sp),d0
}
    3eea:	\----> movem.l (sp)+,d2-d3/a6
    3eee:	       lea 56(sp),sp
    3ef2:	       rts

00003ef4 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    3ef4:	       lea -32(sp),sp
    3ef8:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    3efc:	       move.w 16010 <sliceBusy>,d0
    3f02:	   /-- beq.s 3f1e <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    3f04:	   |   pea 13434 <line.c.ed97c08b+0x21c>
    3f0a:	   |   pea 13452 <line.c.ed97c08b+0x23a>
    3f10:	   |   jsr 12018 <KPrintF>
    3f16:	   |   addq.l #8,sp
		return 0;
    3f18:	   |   moveq #0,d0
    3f1a:	/--|-- bra.w 3fb2 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), 0);	
    3f1e:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3f26:	|      move.l 48(sp),d0
    3f2a:	|      add.l d0,d0
    3f2c:	|      add.l d0,d0
    3f2e:	|      move.l d0,d1
    3f30:	|      move.l 17b18 <startOfDataIndex>,d0
    3f36:	|      add.l d1,d0
    3f38:	|      move.l d0,36(sp)
    3f3c:	|      clr.l 32(sp)
    3f40:	|      move.l 17b30 <DOSBase>,d0
    3f46:	|      movea.l d0,a6
    3f48:	|      move.l 40(sp),d1
    3f4c:	|      move.l 36(sp),d2
    3f50:	|      move.l 32(sp),d3
    3f54:	|      jsr -66(a6)
    3f58:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), 1);
    3f5c:	|      move.l 17b10 <bigDataFile>,24(sp)
    3f64:	|      move.l 17b10 <bigDataFile>,d0
    3f6a:	|      move.l d0,-(sp)
    3f6c:	|      jsr 718 <get4bytes>
    3f72:	|      addq.l #4,sp
    3f74:	|      move.l d0,20(sp)
    3f78:	|      moveq #1,d0
    3f7a:	|      move.l d0,16(sp)
    3f7e:	|      move.l 17b30 <DOSBase>,d0
    3f84:	|      movea.l d0,a6
    3f86:	|      move.l 24(sp),d1
    3f8a:	|      move.l 20(sp),d2
    3f8e:	|      move.l 16(sp),d3
    3f92:	|      jsr -66(a6)
    3f96:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    3f9a:	|      move.w #1,16010 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    3fa2:	|      move.l 17b10 <bigDataFile>,d0
    3fa8:	|      move.l d0,-(sp)
    3faa:	|      jsr 718 <get4bytes>
    3fb0:	|      addq.l #4,sp
}
    3fb2:	\----> movem.l (sp)+,d2-d3/a6
    3fb6:	       lea 32(sp),sp
    3fba:	       rts

00003fbc <openObjectSlice>:

BOOL openObjectSlice (int num) {
    3fbc:	       lea -32(sp),sp
    3fc0:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    3fc4:	       move.w 16010 <sliceBusy>,d0
    3fca:	   /-- beq.s 3fe6 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    3fcc:	   |   pea 13434 <line.c.ed97c08b+0x21c>
    3fd2:	   |   pea 13452 <line.c.ed97c08b+0x23a>
    3fd8:	   |   jsr 12018 <KPrintF>
    3fde:	   |   addq.l #8,sp
        return FALSE;
    3fe0:	   |   clr.w d0
    3fe2:	/--|-- bra.w 4072 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    3fe6:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3fee:	|      move.l 48(sp),d0
    3ff2:	|      add.l d0,d0
    3ff4:	|      add.l d0,d0
    3ff6:	|      move.l d0,d1
    3ff8:	|      move.l 17b24 <startOfObjectIndex>,d0
    3ffe:	|      add.l d1,d0
    4000:	|      move.l d0,36(sp)
    4004:	|      moveq #-1,d0
    4006:	|      move.l d0,32(sp)
    400a:	|      move.l 17b30 <DOSBase>,d0
    4010:	|      movea.l d0,a6
    4012:	|      move.l 40(sp),d1
    4016:	|      move.l 36(sp),d2
    401a:	|      move.l 32(sp),d3
    401e:	|      jsr -66(a6)
    4022:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    4026:	|      move.l 17b10 <bigDataFile>,24(sp)
    402e:	|      move.l 17b10 <bigDataFile>,d0
    4034:	|      move.l d0,-(sp)
    4036:	|      jsr 718 <get4bytes>
    403c:	|      addq.l #4,sp
    403e:	|      move.l d0,20(sp)
    4042:	|      moveq #-1,d0
    4044:	|      move.l d0,16(sp)
    4048:	|      move.l 17b30 <DOSBase>,d0
    404e:	|      movea.l d0,a6
    4050:	|      move.l 24(sp),d1
    4054:	|      move.l 20(sp),d2
    4058:	|      move.l 16(sp),d3
    405c:	|      jsr -66(a6)
    4060:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    4064:	|      move.w #1,16010 <sliceBusy>
    406c:	|      move.w 16010 <sliceBusy>,d0
}
    4072:	\----> movem.l (sp)+,d2-d3/a6
    4076:	       lea 32(sp),sp
    407a:	       rts

0000407c <openSubSlice>:

BOOL openSubSlice (int num) {
    407c:	       lea -32(sp),sp
    4080:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4084:	       move.w 16010 <sliceBusy>,d0
    408a:	   /-- beq.s 40a6 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    408c:	   |   pea 13434 <line.c.ed97c08b+0x21c>
    4092:	   |   pea 13452 <line.c.ed97c08b+0x23a>
    4098:	   |   jsr 12018 <KPrintF>
    409e:	   |   addq.l #8,sp
		return FALSE;
    40a0:	   |   clr.w d0
    40a2:	/--|-- bra.w 4132 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    40a6:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    40ae:	|      move.l 48(sp),d0
    40b2:	|      add.l d0,d0
    40b4:	|      add.l d0,d0
    40b6:	|      move.l d0,d1
    40b8:	|      move.l 17b20 <startOfSubIndex>,d0
    40be:	|      add.l d1,d0
    40c0:	|      move.l d0,36(sp)
    40c4:	|      moveq #-1,d0
    40c6:	|      move.l d0,32(sp)
    40ca:	|      move.l 17b30 <DOSBase>,d0
    40d0:	|      movea.l d0,a6
    40d2:	|      move.l 40(sp),d1
    40d6:	|      move.l 36(sp),d2
    40da:	|      move.l 32(sp),d3
    40de:	|      jsr -66(a6)
    40e2:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    40e6:	|      move.l 17b10 <bigDataFile>,24(sp)
    40ee:	|      move.l 17b10 <bigDataFile>,d0
    40f4:	|      move.l d0,-(sp)
    40f6:	|      jsr 718 <get4bytes>
    40fc:	|      addq.l #4,sp
    40fe:	|      move.l d0,20(sp)
    4102:	|      moveq #-1,d0
    4104:	|      move.l d0,16(sp)
    4108:	|      move.l 17b30 <DOSBase>,d0
    410e:	|      movea.l d0,a6
    4110:	|      move.l 24(sp),d1
    4114:	|      move.l 20(sp),d2
    4118:	|      move.l 16(sp),d3
    411c:	|      jsr -66(a6)
    4120:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4124:	|      move.w #1,16010 <sliceBusy>
    412c:	|      move.w 16010 <sliceBusy>,d0
}
    4132:	\----> movem.l (sp)+,d2-d3/a6
    4136:	       lea 32(sp),sp
    413a:	       rts

0000413c <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    413c:	       lea -180(sp),sp
    4140:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4144:	       tst.l 196(sp)
    4148:	/----- beq.s 4188 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    414a:	|      move.l 196(sp),17b10 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4152:	|      move.l 196(sp),168(sp)
    4158:	|      clr.l 164(sp)
    415c:	|      clr.l 160(sp)
    4160:	|      move.l 17b30 <DOSBase>,d0
    4166:	|      movea.l d0,a6
    4168:	|      move.l 168(sp),d1
    416c:	|      move.l 164(sp),d2
    4170:	|      move.l 160(sp),d3
    4174:	|      jsr -66(a6)
    4178:	|      move.l d0,156(sp)
    417c:	|      move.l 156(sp),d0
    4180:	|      move.l d0,17b14 <startIndex>
    4186:	|  /-- bra.s 41c2 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4188:	\--|-> move.l 17b10 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4190:	   |   move.l 196(sp),184(sp)
    4196:	   |   move.l 17b14 <startIndex>,d0
    419c:	   |   move.l d0,180(sp)
    41a0:	   |   moveq #-1,d0
    41a2:	   |   move.l d0,176(sp)
    41a6:	   |   move.l 17b30 <DOSBase>,d0
    41ac:	   |   movea.l d0,a6
    41ae:	   |   move.l 184(sp),d1
    41b2:	   |   move.l 180(sp),d2
    41b6:	   |   move.l 176(sp),d3
    41ba:	   |   jsr -66(a6)
    41be:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    41c2:	   \-> clr.w 16010 <sliceBusy>

	if (skipBefore > numLanguages) {
    41c8:	       move.l 204(sp),d0
    41cc:	       cmp.l 200(sp),d0
    41d0:	   /-- bls.s 41e4 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    41d2:	   |   pea 1346c <line.c.ed97c08b+0x254>
    41d8:	   |   jsr 12018 <KPrintF>
    41de:	   |   addq.l #4,sp
		skipBefore = 0;
    41e0:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    41e4:	   \-> move.l 200(sp),d0
    41e8:	       sub.l 204(sp),d0
    41ec:	       move.l d0,188(sp)
	while (skipBefore) {
    41f0:	   /-- bra.s 422c <setFileIndices+0xf0>
        Seek(fp, get4bytes(fp),0);		
    41f2:	/--|-> move.l 196(sp),24(sp)
    41f8:	|  |   move.l 196(sp),-(sp)
    41fc:	|  |   jsr 718 <get4bytes>
    4202:	|  |   addq.l #4,sp
    4204:	|  |   move.l d0,20(sp)
    4208:	|  |   clr.l 16(sp)
    420c:	|  |   move.l 17b30 <DOSBase>,d0
    4212:	|  |   movea.l d0,a6
    4214:	|  |   move.l 24(sp),d1
    4218:	|  |   move.l 20(sp),d2
    421c:	|  |   move.l 16(sp),d3
    4220:	|  |   jsr -66(a6)
    4224:	|  |   move.l d0,12(sp)
		skipBefore --;
    4228:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    422c:	|  \-> tst.l 204(sp)
    4230:	\----- bne.s 41f2 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4232:	       move.l 196(sp),152(sp)
    4238:	       clr.l 148(sp)
    423c:	       clr.l 144(sp)
    4240:	       move.l 17b30 <DOSBase>,d0
    4246:	       movea.l d0,a6
    4248:	       move.l 152(sp),d1
    424c:	       move.l 148(sp),d2
    4250:	       move.l 144(sp),d3
    4254:	       jsr -66(a6)
    4258:	       move.l d0,140(sp)
    425c:	       move.l 140(sp),d0
    4260:	       addq.l #4,d0
    4262:	       move.l d0,17b1c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4268:	       move.l 196(sp),136(sp)
    426e:	       move.l 196(sp),-(sp)
    4272:	       jsr 718 <get4bytes>
    4278:	       addq.l #4,sp
    427a:	       move.l d0,132(sp)
    427e:	       moveq #-1,d0
    4280:	       move.l d0,128(sp)
    4284:	       move.l 17b30 <DOSBase>,d0
    428a:	       movea.l d0,a6
    428c:	       move.l 136(sp),d1
    4290:	       move.l 132(sp),d2
    4294:	       move.l 128(sp),d3
    4298:	       jsr -66(a6)
    429c:	       move.l d0,124(sp)

	while (skipAfter) {
    42a0:	   /-- bra.s 42de <setFileIndices+0x1a2>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    42a2:	/--|-> move.l 196(sp),40(sp)
    42a8:	|  |   move.l 196(sp),-(sp)
    42ac:	|  |   jsr 718 <get4bytes>
    42b2:	|  |   addq.l #4,sp
    42b4:	|  |   move.l d0,36(sp)
    42b8:	|  |   moveq #-1,d0
    42ba:	|  |   move.l d0,32(sp)
    42be:	|  |   move.l 17b30 <DOSBase>,d0
    42c4:	|  |   movea.l d0,a6
    42c6:	|  |   move.l 40(sp),d1
    42ca:	|  |   move.l 36(sp),d2
    42ce:	|  |   move.l 32(sp),d3
    42d2:	|  |   jsr -66(a6)
    42d6:	|  |   move.l d0,28(sp)
		skipAfter --;
    42da:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    42de:	|  \-> tst.l 188(sp)
    42e2:	\----- bne.s 42a2 <setFileIndices+0x166>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    42e4:	       move.l 196(sp),120(sp)
    42ea:	       clr.l 116(sp)
    42ee:	       clr.l 112(sp)
    42f2:	       move.l 17b30 <DOSBase>,d0
    42f8:	       movea.l d0,a6
    42fa:	       move.l 120(sp),d1
    42fe:	       move.l 116(sp),d2
    4302:	       move.l 112(sp),d3
    4306:	       jsr -66(a6)
    430a:	       move.l d0,108(sp)
    430e:	       move.l 108(sp),d0
    4312:	       addq.l #4,d0
    4314:	       move.l d0,17b20 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    431a:	       move.l 196(sp),104(sp)
    4320:	       move.l 196(sp),-(sp)
    4324:	       jsr 718 <get4bytes>
    432a:	       addq.l #4,sp
    432c:	       move.l d0,100(sp)
    4330:	       clr.l 96(sp)
    4334:	       move.l 17b30 <DOSBase>,d0
    433a:	       movea.l d0,a6
    433c:	       move.l 104(sp),d1
    4340:	       move.l 100(sp),d2
    4344:	       move.l 96(sp),d3
    4348:	       jsr -66(a6)
    434c:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4350:	       move.l 196(sp),88(sp)
    4356:	       clr.l 84(sp)
    435a:	       clr.l 80(sp)
    435e:	       move.l 17b30 <DOSBase>,d0
    4364:	       movea.l d0,a6
    4366:	       move.l 88(sp),d1
    436a:	       move.l 84(sp),d2
    436e:	       move.l 80(sp),d3
    4372:	       jsr -66(a6)
    4376:	       move.l d0,76(sp)
    437a:	       move.l 76(sp),d0
    437e:	       addq.l #4,d0
    4380:	       move.l d0,17b24 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4386:	       move.l 196(sp),72(sp)
    438c:	       move.l 196(sp),-(sp)
    4390:	       jsr 718 <get4bytes>
    4396:	       addq.l #4,sp
    4398:	       move.l d0,68(sp)
    439c:	       clr.l 64(sp)
    43a0:	       move.l 17b30 <DOSBase>,d0
    43a6:	       movea.l d0,a6
    43a8:	       move.l 72(sp),d1
    43ac:	       move.l 68(sp),d2
    43b0:	       move.l 64(sp),d3
    43b4:	       jsr -66(a6)
    43b8:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    43bc:	       move.l 196(sp),56(sp)
    43c2:	       clr.l 52(sp)
    43c6:	       clr.l 48(sp)
    43ca:	       move.l 17b30 <DOSBase>,d0
    43d0:	       movea.l d0,a6
    43d2:	       move.l 56(sp),d1
    43d6:	       move.l 52(sp),d2
    43da:	       move.l 48(sp),d3
    43de:	       jsr -66(a6)
    43e2:	       move.l d0,44(sp)
    43e6:	       move.l 44(sp),d0
    43ea:	       move.l d0,17b18 <startOfDataIndex>
    43f0:	       nop
    43f2:	       movem.l (sp)+,d2-d3/a6
    43f6:	       lea 180(sp),sp
    43fa:	       rts

000043fc <WaitVbl>:
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
}

//vblank begins at vpos 312 hpos 1 and ends at vpos 25 hpos 1
//vsync begins at line 2 hpos 132 and ends at vpos 5 hpos 18 
void WaitVbl() {
    43fc:	       subq.l #8,sp
	debug_start_idle();
    43fe:	       jsr 121f0 <debug_start_idle>
	while (1) {
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    4404:	   /-> movea.l #14675972,a0
    440a:	   |   move.l (a0),d0
    440c:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
    440e:	   |   move.l (sp),d0
    4410:	   |   andi.l #130816,d0
    4416:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
    4418:	   |   move.l (sp),d0
    441a:	   |   cmpi.l #79616,d0
    4420:	   \-- beq.s 4404 <WaitVbl+0x8>
			break;
	}
	while (1) {
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    4422:	/----> movea.l #14675972,a0
    4428:	|      move.l (a0),d0
    442a:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
    442e:	|      move.l 4(sp),d0
    4432:	|      andi.l #130816,d0
    4438:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
    443c:	|      move.l 4(sp),d0
    4440:	|      cmpi.l #79616,d0
    4446:	|  /-- beq.s 444a <WaitVbl+0x4e>
	while (1) {
    4448:	\--|-- bra.s 4422 <WaitVbl+0x26>
			break;
    444a:	   \-> nop
	}
	debug_stop_idle();
    444c:	       jsr 1220a <debug_stop_idle>
}
    4452:	       nop
    4454:	       addq.l #8,sp
    4456:	       rts

00004458 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    4458:	move.l a3,-(sp)
    445a:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    445c:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4460:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    4462:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    4464:	move.l 16012 <player>,d0
    446a:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    446c:	movem.l d1-d7/a4-a6,-(sp)
    4470:	jsr (a3)
    4472:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    4476:	movea.l (sp)+,a2
    4478:	movea.l (sp)+,a3
    447a:	rts

0000447c <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    447c:	move.l a6,-(sp)
    447e:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    4480:	move.l 16012 <player>,d0
    4486:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    4488:	movea.l #14675968,a6
		__asm volatile (
    448e:	movem.l d0-d1/a0-a1,-(sp)
    4492:	jsr 8(a3)
    4496:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    449a:	nop
    449c:	movea.l (sp)+,a3
    449e:	movea.l (sp)+,a6
    44a0:	rts

000044a2 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    44a2:	    lea -128(sp),sp
    44a6:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    44aa:	    movea.w #4,a0
    44ae:	    move.l (a0),d0
    44b0:	    move.l d0,17b28 <SysBase>
	custom = (struct Custom*)0xdff000;	
    44b6:	    move.l #14675968,17b2c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    44c0:	    move.l #85533,136(sp)
    44c8:	    clr.l 132(sp)
    44cc:	    move.l 17b28 <SysBase>,d0
    44d2:	    movea.l d0,a6
    44d4:	    movea.l 136(sp),a1
    44d8:	    move.l 132(sp),d0
    44dc:	    jsr -552(a6)
    44e0:	    move.l d0,128(sp)
    44e4:	    move.l 128(sp),d0
    44e8:	    move.l d0,17b34 <GfxBase>
	if (!GfxBase)
    44ee:	    move.l 17b34 <GfxBase>,d0
    44f4:	/-- bne.s 450a <main+0x68>
		Exit(0);
    44f6:	|   clr.l 124(sp)
    44fa:	|   move.l 17b30 <DOSBase>,d0
    4500:	|   movea.l d0,a6
    4502:	|   move.l 124(sp),d1
    4506:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    450a:	\-> move.l #85550,120(sp)
    4512:	    clr.l 116(sp)
    4516:	    move.l 17b28 <SysBase>,d0
    451c:	    movea.l d0,a6
    451e:	    movea.l 120(sp),a1
    4522:	    move.l 116(sp),d0
    4526:	    jsr -552(a6)
    452a:	    move.l d0,112(sp)
    452e:	    move.l 112(sp),d0
    4532:	    move.l d0,17b30 <DOSBase>
	if (!DOSBase)
    4538:	    move.l 17b30 <DOSBase>,d0
    453e:	/-- bne.s 4554 <main+0xb2>
		Exit(0);
    4540:	|   clr.l 108(sp)
    4544:	|   move.l 17b30 <DOSBase>,d0
    454a:	|   movea.l d0,a6
    454c:	|   move.l 108(sp),d1
    4550:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4554:	\-> move.l #85562,104(sp)
    455c:	    clr.l 100(sp)
    4560:	    move.l 17b28 <SysBase>,d0
    4566:	    movea.l d0,a6
    4568:	    movea.l 104(sp),a1
    456c:	    move.l 100(sp),d0
    4570:	    jsr -552(a6)
    4574:	    move.l d0,96(sp)
    4578:	    move.l 96(sp),d0
    457c:	    move.l d0,17b38 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4582:	    move.l 17b38 <MathIeeeSingBasBase>,d0
    4588:	/-- bne.s 459e <main+0xfc>
		Exit(0);	
    458a:	|   clr.l 92(sp)
    458e:	|   move.l 17b30 <DOSBase>,d0
    4594:	|   movea.l d0,a6
    4596:	|   move.l 92(sp),d1
    459a:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    459e:	\-> move.l #85586,88(sp)
    45a6:	    clr.l 84(sp)
    45aa:	    move.l 17b28 <SysBase>,d0
    45b0:	    movea.l d0,a6
    45b2:	    movea.l 88(sp),a1
    45b6:	    move.l 84(sp),d0
    45ba:	    jsr -552(a6)
    45be:	    move.l d0,80(sp)
    45c2:	    move.l 80(sp),d0
    45c6:	    move.l d0,17b3c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    45cc:	    move.l 17b3c <MathIeeeSingTransBase>,d0
    45d2:	/-- bne.s 45e8 <main+0x146>
		Exit(0);
    45d4:	|   clr.l 76(sp)
    45d8:	|   move.l 17b30 <DOSBase>,d0
    45de:	|   movea.l d0,a6
    45e0:	|   move.l 76(sp),d1
    45e4:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    45e8:	\-> move.l #85612,72(sp)
    45f0:	    clr.l 68(sp)
    45f4:	    move.l 17b28 <SysBase>,d0
    45fa:	    movea.l d0,a6
    45fc:	    movea.l 72(sp),a1
    4600:	    move.l 68(sp),d0
    4604:	    jsr -552(a6)
    4608:	    move.l d0,64(sp)
    460c:	    move.l 64(sp),d0
    4610:	    move.l d0,17b44 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4616:	    move.l 17b44 <MathIeeeDoubTransBase>,d0
    461c:	/-- bne.s 4632 <main+0x190>
		Exit(0);
    461e:	|   clr.l 60(sp)
    4622:	|   move.l 17b30 <DOSBase>,d0
    4628:	|   movea.l d0,a6
    462a:	|   move.l 60(sp),d1
    462e:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4632:	\-> move.l #85638,56(sp)
    463a:	    clr.l 52(sp)
    463e:	    move.l 17b28 <SysBase>,d0
    4644:	    movea.l d0,a6
    4646:	    movea.l 56(sp),a1
    464a:	    move.l 52(sp),d0
    464e:	    jsr -552(a6)
    4652:	    move.l d0,48(sp)
    4656:	    move.l 48(sp),d0
    465a:	    move.l d0,17b40 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4660:	    move.l 17b40 <MathIeeeDoubBasBase>,d0
    4666:	/-- bne.s 467c <main+0x1da>
		Exit(0);
    4668:	|   clr.l 44(sp)
    466c:	|   move.l 17b30 <DOSBase>,d0
    4672:	|   movea.l d0,a6
    4674:	|   move.l 44(sp),d1
    4678:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    467c:	\-> pea 14e9e <incbin_player_end+0x82>
    4682:	    jsr 12018 <KPrintF>
    4688:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    468a:	    move.l 17b30 <DOSBase>,d0
    4690:	    movea.l d0,a6
    4692:	    jsr -60(a6)
    4696:	    move.l d0,40(sp)
    469a:	    move.l 40(sp),d0
    469e:	    move.l d0,36(sp)
    46a2:	    move.l #85690,32(sp)
    46aa:	    moveq #15,d0
    46ac:	    move.l d0,28(sp)
    46b0:	    move.l 17b30 <DOSBase>,d0
    46b6:	    movea.l d0,a6
    46b8:	    move.l 36(sp),d1
    46bc:	    move.l 32(sp),d2
    46c0:	    move.l 28(sp),d3
    46c4:	    jsr -48(a6)
    46c8:	    move.l d0,24(sp)
	Delay(50);
    46cc:	    moveq #50,d0
    46ce:	    move.l d0,20(sp)
    46d2:	    move.l 17b30 <DOSBase>,d0
    46d8:	    movea.l d0,a6
    46da:	    move.l 20(sp),d1
    46de:	    jsr -198(a6)

	warpmode(1);
    46e2:	    pea 1 <_start+0x1>
    46e6:	    jsr 12082 <warpmode>
    46ec:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    46ee:	    move.l 16016 <module>,d0
    46f4:	    move.l d0,-(sp)
    46f6:	    jsr 4458 <p61Init>
    46fc:	    addq.l #4,sp
    46fe:	    tst.l d0
    4700:	/-- beq.s 4710 <main+0x26e>
		KPrintF("p61Init failed!\n");
    4702:	|   pea 14eca <incbin_player_end+0xae>
    4708:	|   jsr 12018 <KPrintF>
    470e:	|   addq.l #4,sp
#endif
	warpmode(0);
    4710:	\-> clr.l -(sp)
    4712:	    jsr 12082 <warpmode>
    4718:	    addq.l #4,sp

	//TakeSystem();
	custom->dmacon = 0x87ff;
    471a:	    movea.l 17b2c <custom>,a0
    4720:	    move.w #-30721,150(a0)
	WaitVbl();
    4726:	    jsr 43fc <WaitVbl>

	main_sludge(argc, argv);
    472c:	    move.l 148(sp),-(sp)
    4730:	    move.l 148(sp),-(sp)
    4734:	    jsr 10d0 <main_sludge>
    473a:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    473c:	    jsr 447c <p61End>
#endif

	// END
	//FreeSystem();

	CloseLibrary((struct Library*)DOSBase);
    4742:	    move.l 17b30 <DOSBase>,16(sp)
    474a:	    move.l 17b28 <SysBase>,d0
    4750:	    movea.l d0,a6
    4752:	    movea.l 16(sp),a1
    4756:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    475a:	    move.l 17b34 <GfxBase>,12(sp)
    4762:	    move.l 17b28 <SysBase>,d0
    4768:	    movea.l d0,a6
    476a:	    movea.l 12(sp),a1
    476e:	    jsr -414(a6)
    4772:	    moveq #0,d0
}
    4774:	    movem.l (sp)+,d2-d3/a6
    4778:	    lea 128(sp),sp
    477c:	    rts

0000477e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    477e:	    lea -16(sp),sp
    4782:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    4784:	    moveq #8,d0
    4786:	    move.l d0,16(sp)
    478a:	    clr.l 12(sp)
    478e:	    move.l 17b28 <SysBase>,d0
    4794:	    movea.l d0,a6
    4796:	    move.l 16(sp),d0
    479a:	    move.l 12(sp),d1
    479e:	    jsr -684(a6)
    47a2:	    move.l d0,8(sp)
    47a6:	    move.l 8(sp),d0
    47aa:	    move.l d0,4(sp)
	if (!newStat) {
    47ae:	/-- bne.s 47de <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    47b0:	|   movea.l 1601a <nowStatus>,a0
    47b6:	|   move.l (a0),d0
    47b8:	|   movea.l 4(sp),a0
    47bc:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    47c0:	|   pea 130d9 <cursors.c.46c58bd4+0x312>
    47c6:	|   jsr b8 <copyString>
    47cc:	|   addq.l #4,sp
    47ce:	|   movea.l 4(sp),a0
    47d2:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    47d4:	|   movea.l 1601a <nowStatus>,a0
    47da:	|   move.l 4(sp),(a0)
	}
}
    47de:	\-> nop
    47e0:	    movea.l (sp)+,a6
    47e2:	    lea 16(sp),sp
    47e6:	    rts

000047e8 <clearStatusBar>:

void clearStatusBar () {
    47e8:	       lea -16(sp),sp
    47ec:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    47ee:	       movea.l 1601a <nowStatus>,a0
    47f4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    47f8:	       movea.l 1601a <nowStatus>,a0
    47fe:	       moveq #-1,d0
    4800:	       move.l d0,6(a0)
	while (stat) {
    4804:	   /-- bra.s 4844 <clearStatusBar+0x5c>
		kill = stat;
    4806:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    480c:	|  |   movea.l 16(sp),a0
    4810:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    4816:	|  |   movea.l 12(sp),a0
    481a:	|  |   move.l (a0),8(sp)
    481e:	|  |   move.l 17b28 <SysBase>,d0
    4824:	|  |   movea.l d0,a6
    4826:	|  |   movea.l 8(sp),a1
    482a:	|  |   jsr -690(a6)
		FreeVec(kill);
    482e:	|  |   move.l 12(sp),4(sp)
    4834:	|  |   move.l 17b28 <SysBase>,d0
    483a:	|  |   movea.l d0,a6
    483c:	|  |   movea.l 4(sp),a1
    4840:	|  |   jsr -690(a6)
	while (stat) {
    4844:	|  \-> tst.l 16(sp)
    4848:	\----- bne.s 4806 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    484a:	       movea.l 1601a <nowStatus>,a0
    4850:	       clr.l (a0)
}
    4852:	       nop
    4854:	       movea.l (sp)+,a6
    4856:	       lea 16(sp),sp
    485a:	       rts

0000485c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    485c:	clr.l 17b48 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    4862:	move.w #-1,17b4c <mainStatus+0x4>
	mainStatus.litStatus = -1;
    486a:	moveq #-1,d0
    486c:	move.l d0,17b4e <mainStatus+0x6>
	mainStatus.statusX = 10;
    4872:	moveq #10,d0
    4874:	move.l d0,17b52 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    487a:	movea.l 17a2c <winHeight>,a0
    4880:	lea -15(a0),a0
    4884:	move.l a0,d0
    4886:	move.l d0,17b56 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    488c:	nop
    488e:	rts

00004890 <killLastStatus>:

void killLastStatus () {
    4890:	    lea -12(sp),sp
    4894:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    4896:	    movea.l 1601a <nowStatus>,a0
    489c:	    move.l (a0),d0
    489e:	/-- beq.s 48e8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    48a0:	|   movea.l 1601a <nowStatus>,a0
    48a6:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    48aa:	|   movea.l 1601a <nowStatus>,a0
    48b0:	|   movea.l 12(sp),a1
    48b4:	|   move.l 4(a1),d0
    48b8:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    48ba:	|   movea.l 12(sp),a0
    48be:	|   move.l (a0),8(sp)
    48c2:	|   move.l 17b28 <SysBase>,d0
    48c8:	|   movea.l d0,a6
    48ca:	|   movea.l 8(sp),a1
    48ce:	|   jsr -690(a6)
		FreeVec(kill);
    48d2:	|   move.l 12(sp),4(sp)
    48d8:	|   move.l 17b28 <SysBase>,d0
    48de:	|   movea.l d0,a6
    48e0:	|   movea.l 4(sp),a1
    48e4:	|   jsr -690(a6)
	}
}
    48e8:	\-> nop
    48ea:	    movea.l (sp)+,a6
    48ec:	    lea 12(sp),sp
    48f0:	    rts

000048f2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    48f2:	movea.l 1601a <nowStatus>,a0
    48f8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    48fe:	movea.l 1601a <nowStatus>,a0
    4904:	move.l 8(sp),14(a0)
}
    490a:	nop
    490c:	rts

0000490e <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    490e:	       lea -100(sp),sp
    4912:	       move.l a6,-(sp)
    4914:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    4916:	       movea.l 1601a <nowStatus>,a0
    491c:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    4920:	       movea.l 1601a <nowStatus>,a0
    4926:	       move.w 4(a0),d0
    492a:	       move.w d0,d0
    492c:	       andi.l #65535,d0
    4932:	       move.l 112(sp),-(sp)
    4936:	       move.l d0,-(sp)
    4938:	       jsr 8d0 <put2bytes>
    493e:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    4940:	       movea.l 1601a <nowStatus>,a0
    4946:	       move.l 6(a0),d0
    494a:	       move.l d0,d0
    494c:	       movea.w d0,a0
    494e:	       move.l 112(sp),-(sp)
    4952:	       move.l a0,-(sp)
    4954:	       jsr a9c <putSigned>
    495a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    495c:	       movea.l 1601a <nowStatus>,a0
    4962:	       move.l 10(a0),d0
    4966:	       move.l 112(sp),-(sp)
    496a:	       move.l d0,-(sp)
    496c:	       jsr 8d0 <put2bytes>
    4972:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    4974:	       movea.l 1601a <nowStatus>,a0
    497a:	       move.l 14(a0),d0
    497e:	       move.l 112(sp),-(sp)
    4982:	       move.l d0,-(sp)
    4984:	       jsr 8d0 <put2bytes>
    498a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    498c:	       move.l 112(sp),100(sp)
    4992:	       movea.l 1601a <nowStatus>,a0
    4998:	       move.l 18(a0),96(sp)
    499e:	       move.l 17b30 <DOSBase>,d0
    49a4:	       movea.l d0,a6
    49a6:	       move.l 100(sp),d1
    49aa:	       move.l 96(sp),d2
    49ae:	       jsr -312(a6)
    49b2:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    49b6:	       move.l 112(sp),88(sp)
    49bc:	       movea.l 1601a <nowStatus>,a0
    49c2:	       move.l 22(a0),84(sp)
    49c8:	       move.l 17b30 <DOSBase>,d0
    49ce:	       movea.l d0,a6
    49d0:	       move.l 88(sp),d1
    49d4:	       move.l 84(sp),d2
    49d8:	       jsr -312(a6)
    49dc:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    49e0:	       move.l 112(sp),76(sp)
    49e6:	       movea.l 1601a <nowStatus>,a0
    49ec:	       move.l 26(a0),72(sp)
    49f2:	       move.l 17b30 <DOSBase>,d0
    49f8:	       movea.l d0,a6
    49fa:	       move.l 76(sp),d1
    49fe:	       move.l 72(sp),d2
    4a02:	       jsr -312(a6)
    4a06:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    4a0a:	       move.l 112(sp),64(sp)
    4a10:	       movea.l 1601a <nowStatus>,a0
    4a16:	       move.l 30(a0),60(sp)
    4a1c:	       move.l 17b30 <DOSBase>,d0
    4a22:	       movea.l d0,a6
    4a24:	       move.l 64(sp),d1
    4a28:	       move.l 60(sp),d2
    4a2c:	       jsr -312(a6)
    4a30:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    4a34:	       move.l 112(sp),52(sp)
    4a3a:	       movea.l 1601a <nowStatus>,a0
    4a40:	       move.l 34(a0),48(sp)
    4a46:	       move.l 17b30 <DOSBase>,d0
    4a4c:	       movea.l d0,a6
    4a4e:	       move.l 52(sp),d1
    4a52:	       move.l 48(sp),d2
    4a56:	       jsr -312(a6)
    4a5a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    4a5e:	       move.l 112(sp),40(sp)
    4a64:	       movea.l 1601a <nowStatus>,a0
    4a6a:	       move.l 38(a0),36(sp)
    4a70:	       move.l 17b30 <DOSBase>,d0
    4a76:	       movea.l d0,a6
    4a78:	       move.l 40(sp),d1
    4a7c:	       move.l 36(sp),d2
    4a80:	       jsr -312(a6)
    4a84:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    4a88:	   /-- bra.s 4acc <saveStatusBars+0x1be>
		FPutC (fp,1);
    4a8a:	/--|-> move.l 112(sp),16(sp)
    4a90:	|  |   moveq #1,d0
    4a92:	|  |   move.l d0,12(sp)
    4a96:	|  |   move.l 17b30 <DOSBase>,d0
    4a9c:	|  |   movea.l d0,a6
    4a9e:	|  |   move.l 16(sp),d1
    4aa2:	|  |   move.l 12(sp),d2
    4aa6:	|  |   jsr -312(a6)
    4aaa:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    4aae:	|  |   movea.l 104(sp),a0
    4ab2:	|  |   move.l (a0),d0
    4ab4:	|  |   move.l 112(sp),-(sp)
    4ab8:	|  |   move.l d0,-(sp)
    4aba:	|  |   jsr bd8 <writeString>
    4ac0:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    4ac2:	|  |   movea.l 104(sp),a0
    4ac6:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    4acc:	|  \-> tst.l 104(sp)
    4ad0:	\----- bne.s 4a8a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    4ad2:	       move.l 112(sp),28(sp)
    4ad8:	       clr.l 24(sp)
    4adc:	       move.l 17b30 <DOSBase>,d0
    4ae2:	       movea.l d0,a6
    4ae4:	       move.l 28(sp),d1
    4ae8:	       move.l 24(sp),d2
    4aec:	       jsr -312(a6)
    4af0:	       move.l d0,20(sp)
}
    4af4:	       nop
    4af6:	       move.l (sp)+,d2
    4af8:	       movea.l (sp)+,a6
    4afa:	       lea 100(sp),sp
    4afe:	       rts

00004b00 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    4b00:	movea.l 1601a <nowStatus>,a0
    4b06:	move.l 4(sp),6(a0)
}
    4b0c:	nop
    4b0e:	rts

00004b10 <setStatusBar>:

void setStatusBar (char * txt) {
    4b10:	    subq.l #4,sp
    4b12:	    move.l a6,-(sp)
    4b14:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    4b16:	    movea.l 1601a <nowStatus>,a0
    4b1c:	    move.l (a0),d0
    4b1e:	/-- beq.s 4b52 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    4b20:	|   movea.l 1601a <nowStatus>,a0
    4b26:	|   movea.l (a0),a0
    4b28:	|   move.l (a0),8(sp)
    4b2c:	|   move.l 17b28 <SysBase>,d0
    4b32:	|   movea.l d0,a6
    4b34:	|   movea.l 8(sp),a1
    4b38:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    4b3c:	|   movea.l 1601a <nowStatus>,a0
    4b42:	|   movea.l (a0),a2
    4b44:	|   move.l 16(sp),-(sp)
    4b48:	|   jsr b8 <copyString>
    4b4e:	|   addq.l #4,sp
    4b50:	|   move.l d0,(a2)
	}
}
    4b52:	\-> nop
    4b54:	    movea.l (sp)+,a2
    4b56:	    movea.l (sp)+,a6
    4b58:	    addq.l #4,sp
    4b5a:	    rts

00004b5c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    4b5c:	       movea.l 1601a <nowStatus>,a0
    4b62:	       move.l (a0),d0
    4b64:	/----- beq.s 4b72 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    4b66:	|      movea.l 1601a <nowStatus>,a0
    4b6c:	|      movea.l (a0),a0
    4b6e:	|      move.l (a0),d0
    4b70:	|  /-- bra.s 4b78 <statusBarText+0x1c>
	} else {
		return "";
    4b72:	\--|-> move.l #78041,d0
	}
    4b78:	   \-> rts

00004b7a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4b7a:	       lea -28(sp),sp
    4b7e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4b82:	       move.l 52(sp),-(sp)
    4b86:	       jsr 109fe <stringWidth>
    4b8c:	       addq.l #4,sp
    4b8e:	       asr.l #1,d0
    4b90:	       move.l d0,-(sp)
    4b92:	       jsr 12470 <__floatsisf>
    4b98:	       addq.l #4,sp
    4b9a:	       move.l d0,d1
    4b9c:	       move.l 16032 <cameraZoom>,d0
    4ba2:	       move.l d0,-(sp)
    4ba4:	       move.l d1,-(sp)
    4ba6:	       jsr 1231c <__divsf3>
    4bac:	       addq.l #8,sp
    4bae:	       move.l d0,-(sp)
    4bb0:	       jsr 12408 <__fixsfsi>
    4bb6:	       addq.l #4,sp
    4bb8:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4bbc:	       move.l 56(sp),d0
    4bc0:	       sub.l 44(sp),d0
    4bc4:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4bc8:	       move.l 56(sp),d0
    4bcc:	       add.l 44(sp),d0
    4bd0:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4bd4:	       moveq #12,d0
    4bd6:	       move.l d0,32(sp)
    4bda:	       clr.l 28(sp)
    4bde:	       move.l 17b28 <SysBase>,d0
    4be4:	       movea.l d0,a6
    4be6:	       move.l 32(sp),d0
    4bea:	       move.l 28(sp),d1
    4bee:	       jsr -684(a6)
    4bf2:	       move.l d0,24(sp)
    4bf6:	       move.l 24(sp),d0
    4bfa:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4bfe:	       movea.l 17b72 <speech>,a0
    4c04:	       move.l 4(a0),d0
    4c08:	       movea.l 20(sp),a0
    4c0c:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    4c10:	       move.l 52(sp),-(sp)
    4c14:	       jsr b8 <copyString>
    4c1a:	       addq.l #4,sp
    4c1c:	       movea.l 20(sp),a0
    4c20:	       move.l d0,(a0)
	newLine -> x = xx1;
    4c22:	       movea.l 20(sp),a0
    4c26:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4c2c:	       movea.l 17b72 <speech>,a0
    4c32:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    4c38:	       moveq #4,d0
    4c3a:	       cmp.l 40(sp),d0
    4c3e:	   /-- blt.s 4c60 <addSpeechLine+0xe6>
    4c40:	   |   movea.l 60(sp),a0
    4c44:	   |   move.l (a0),d1
    4c46:	   |   moveq #5,d0
    4c48:	   |   sub.l 40(sp),d0
    4c4c:	   |   cmp.l d1,d0
    4c4e:	   +-- ble.s 4c60 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4c50:	   |   moveq #5,d0
    4c52:	   |   sub.l 40(sp),d0
    4c56:	   |   movea.l 60(sp),a0
    4c5a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4c5c:	/--|-- bra.w 4d8c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4c60:	|  \-> move.l 36(sp),-(sp)
    4c64:	|      jsr 12470 <__floatsisf>
    4c6a:	|      addq.l #4,sp
    4c6c:	|      move.l d0,d2
    4c6e:	|      move.l 17a28 <winWidth>,d0
    4c74:	|      move.l d0,-(sp)
    4c76:	|      jsr 12498 <__floatunsisf>
    4c7c:	|      addq.l #4,sp
    4c7e:	|      move.l d0,d1
    4c80:	|      move.l 16032 <cameraZoom>,d0
    4c86:	|      move.l d0,-(sp)
    4c88:	|      move.l d1,-(sp)
    4c8a:	|      jsr 1231c <__divsf3>
    4c90:	|      addq.l #8,sp
    4c92:	|      move.l #1084227584,-(sp)
    4c98:	|      move.l d0,-(sp)
    4c9a:	|      jsr 12764 <__subsf3>
    4ca0:	|      addq.l #8,sp
    4ca2:	|      move.l d0,-(sp)
    4ca4:	|      move.l d2,-(sp)
    4ca6:	|      jsr 12558 <__gesf2>
    4cac:	|      addq.l #8,sp
    4cae:	|      tst.l d0
    4cb0:	|  /-- bge.s 4cb6 <addSpeechLine+0x13c>
}
    4cb2:	+--|-- bra.w 4d8c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4cb6:	|  \-> movea.l 60(sp),a0
    4cba:	|      move.l (a0),d0
    4cbc:	|      move.l d0,-(sp)
    4cbe:	|      jsr 12470 <__floatsisf>
    4cc4:	|      addq.l #4,sp
    4cc6:	|      move.l d0,-(sp)
    4cc8:	|      jsr 12388 <__extendsfdf2>
    4cce:	|      addq.l #4,sp
    4cd0:	|      move.l d0,d4
    4cd2:	|      move.l d1,d5
    4cd4:	|      move.l 17a28 <winWidth>,d0
    4cda:	|      move.l d0,-(sp)
    4cdc:	|      jsr 12498 <__floatunsisf>
    4ce2:	|      addq.l #4,sp
    4ce4:	|      move.l d0,d1
    4ce6:	|      move.l 16032 <cameraZoom>,d0
    4cec:	|      move.l d0,-(sp)
    4cee:	|      move.l d1,-(sp)
    4cf0:	|      jsr 1231c <__divsf3>
    4cf6:	|      addq.l #8,sp
    4cf8:	|      move.l d0,-(sp)
    4cfa:	|      jsr 12388 <__extendsfdf2>
    4d00:	|      addq.l #4,sp
    4d02:	|      clr.l -(sp)
    4d04:	|      move.l #1075052544,-(sp)
    4d0a:	|      move.l d1,-(sp)
    4d0c:	|      move.l d0,-(sp)
    4d0e:	|      jsr 12702 <__subdf3>
    4d14:	|      lea 16(sp),sp
    4d18:	|      move.l d0,d2
    4d1a:	|      move.l d1,d3
    4d1c:	|      move.l 36(sp),-(sp)
    4d20:	|      jsr 12430 <__floatsidf>
    4d26:	|      addq.l #4,sp
    4d28:	|      move.l d1,-(sp)
    4d2a:	|      move.l d0,-(sp)
    4d2c:	|      move.l d3,-(sp)
    4d2e:	|      move.l d2,-(sp)
    4d30:	|      jsr 12702 <__subdf3>
    4d36:	|      lea 16(sp),sp
    4d3a:	|      move.l d1,-(sp)
    4d3c:	|      move.l d0,-(sp)
    4d3e:	|      move.l d5,-(sp)
    4d40:	|      move.l d4,-(sp)
    4d42:	|      jsr 1258e <__gtdf2>
    4d48:	|      lea 16(sp),sp
    4d4c:	|      tst.l d0
    4d4e:	|  /-- bgt.s 4d52 <addSpeechLine+0x1d8>
}
    4d50:	+--|-- bra.s 4d8c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    4d52:	|  \-> move.l 17a28 <winWidth>,d0
    4d58:	|      move.l d0,-(sp)
    4d5a:	|      jsr 12498 <__floatunsisf>
    4d60:	|      addq.l #4,sp
    4d62:	|      move.l d0,d1
    4d64:	|      move.l 16032 <cameraZoom>,d0
    4d6a:	|      move.l d0,-(sp)
    4d6c:	|      move.l d1,-(sp)
    4d6e:	|      jsr 1231c <__divsf3>
    4d74:	|      addq.l #8,sp
    4d76:	|      move.l d0,-(sp)
    4d78:	|      jsr 12408 <__fixsfsi>
    4d7e:	|      addq.l #4,sp
    4d80:	|      subq.l #5,d0
    4d82:	|      sub.l 36(sp),d0
    4d86:	|      movea.l 60(sp),a0
    4d8a:	|      move.l d0,(a0)
}
    4d8c:	\----> nop
    4d8e:	       movem.l (sp)+,d2-d5/a6
    4d92:	       lea 28(sp),sp
    4d96:	       rts

00004d98 <initSpeech>:


void initSpeech () {
    4d98:	       lea -12(sp),sp
    4d9c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4d9e:	       moveq #20,d0
    4da0:	       move.l d0,12(sp)
    4da4:	       clr.l 8(sp)
    4da8:	       move.l 17b28 <SysBase>,d0
    4dae:	       movea.l d0,a6
    4db0:	       move.l 12(sp),d0
    4db4:	       move.l 8(sp),d1
    4db8:	       jsr -684(a6)
    4dbc:	       move.l d0,4(sp)
    4dc0:	       move.l 4(sp),d0
    4dc4:	       move.l d0,17b72 <speech>
	if (speech) {
    4dca:	       move.l 17b72 <speech>,d0
    4dd0:	/----- beq.s 4dfc <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4dd2:	|      movea.l 17b72 <speech>,a0
    4dd8:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4dda:	|      movea.l 17b72 <speech>,a0
    4de0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4de4:	|      movea.l 17b72 <speech>,a0
    4dea:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4dee:	|      movea.l 17b72 <speech>,a0
    4df4:	|      moveq #-1,d0
    4df6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4dfa:	|  /-- bra.s 4e0a <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4dfc:	\--|-> pea 14f02 <incbin_player_end+0xe6>
    4e02:	   |   jsr 12018 <KPrintF>
    4e08:	   |   addq.l #4,sp
}
    4e0a:	   \-> nop
    4e0c:	       movea.l (sp)+,a6
    4e0e:	       lea 12(sp),sp
    4e12:	       rts

00004e14 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4e14:	       movea.l 17b72 <speech>,a0
    4e1a:	       move.l 4(a0),d0
    4e1e:	/----- beq.s 4e2c <isThereAnySpeechGoingOn+0x18>
    4e20:	|      movea.l 17b72 <speech>,a0
    4e26:	|      move.l 16(a0),d0
    4e2a:	|  /-- bra.s 4e2e <isThereAnySpeechGoingOn+0x1a>
    4e2c:	\--|-> moveq #-1,d0
}
    4e2e:	   \-> rts

00004e30 <killAllSpeech>:

void killAllSpeech () {
    4e30:	       lea -12(sp),sp
    4e34:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4e36:	       movea.l 17b72 <speech>,a0
    4e3c:	       move.l 12(a0),d0
    4e40:	       moveq #-1,d1
    4e42:	       cmp.l d0,d1
    4e44:	   /-- beq.s 4e52 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4e46:	   |   movea.l 17b72 <speech>,a0
    4e4c:	   |   moveq #-1,d0
    4e4e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    4e52:	   \-> movea.l 17b72 <speech>,a0
    4e58:	       move.l (a0),d0
    4e5a:	/----- beq.w 4ee6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4e5e:	|      movea.l 17b72 <speech>,a0
    4e64:	|      move.l (a0),d0
    4e66:	|      lea -120(sp),sp
    4e6a:	|      move.l sp,d1
    4e6c:	|      movea.l d0,a0
    4e6e:	|      moveq #120,d0
    4e70:	|      move.l d0,-(sp)
    4e72:	|      move.l a0,-(sp)
    4e74:	|      move.l d1,-(sp)
    4e76:	|      jsr 11fcc <memcpy>
    4e7c:	|      lea 12(sp),sp
    4e80:	|      jsr 66e4 <makeSilent>
    4e86:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    4e8a:	|      movea.l 17b72 <speech>,a0
    4e90:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4e92:	+----- bra.s 4ee6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4e94:	|  /-> movea.l 17b72 <speech>,a0
    4e9a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4ea0:	|  |   movea.l 17b72 <speech>,a0
    4ea6:	|  |   movea.l 4(a0),a1
    4eaa:	|  |   movea.l 17b72 <speech>,a0
    4eb0:	|  |   move.l 4(a1),d0
    4eb4:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4eb8:	|  |   movea.l 12(sp),a0
    4ebc:	|  |   move.l (a0),8(sp)
    4ec0:	|  |   move.l 17b28 <SysBase>,d0
    4ec6:	|  |   movea.l d0,a6
    4ec8:	|  |   movea.l 8(sp),a1
    4ecc:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4ed0:	|  |   move.l 12(sp),4(sp)
    4ed6:	|  |   move.l 17b28 <SysBase>,d0
    4edc:	|  |   movea.l d0,a6
    4ede:	|  |   movea.l 4(sp),a1
    4ee2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4ee6:	\--|-> movea.l 17b72 <speech>,a0
    4eec:	   |   move.l 4(a0),d0
    4ef0:	   \-- bne.s 4e94 <killAllSpeech+0x64>
	}
}
    4ef2:	       nop
    4ef4:	       nop
    4ef6:	       movea.l (sp)+,a6
    4ef8:	       lea 12(sp),sp
    4efc:	       rts

00004efe <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4efe:	pea 2 <_start+0x2>
    4f02:	move.l 8(sp),-(sp)
    4f06:	jsr 505e <setFrames>
    4f0c:	addq.l #8,sp
}
    4f0e:	nop
    4f10:	rts

00004f12 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4f12:	       lea -52(sp),sp
    4f16:	       move.l a6,-(sp)
    4f18:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4f1a:	       movea.l 64(sp),a0
    4f1e:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4f24:	       move.l 1601e <speechSpeed>,d0
    4f2a:	       move.l 68(sp),-(sp)
    4f2e:	       move.l d0,-(sp)
    4f30:	       jsr a46 <putFloat>
    4f36:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4f38:	       movea.l 64(sp),a0
    4f3c:	       move.l 8(a0),d0
    4f40:	       move.l 68(sp),-(sp)
    4f44:	       move.l d0,-(sp)
    4f46:	       jsr 8d0 <put2bytes>
    4f4c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4f4e:	       movea.l 64(sp),a0
    4f52:	       move.l 16(a0),d0
    4f56:	       move.l 68(sp),-(sp)
    4f5a:	       move.l d0,-(sp)
    4f5c:	       jsr 8d0 <put2bytes>
    4f62:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4f64:	       movea.l 64(sp),a0
    4f68:	       move.l (a0),d0
    4f6a:	   /-- beq.s 4fae <saveSpeech+0x9c>
			FPutC (fp, 1);
    4f6c:	   |   move.l 68(sp),40(sp)
    4f72:	   |   moveq #1,d0
    4f74:	   |   move.l d0,36(sp)
    4f78:	   |   move.l 17b30 <DOSBase>,d0
    4f7e:	   |   movea.l d0,a6
    4f80:	   |   move.l 40(sp),d1
    4f84:	   |   move.l 36(sp),d2
    4f88:	   |   jsr -312(a6)
    4f8c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4f90:	   |   movea.l 64(sp),a0
    4f94:	   |   movea.l (a0),a0
    4f96:	   |   movea.l 102(a0),a0
    4f9a:	   |   move.l 4(a0),d0
    4f9e:	   |   move.l 68(sp),-(sp)
    4fa2:	   |   move.l d0,-(sp)
    4fa4:	   |   jsr 8d0 <put2bytes>
    4faa:	   |   addq.l #8,sp
    4fac:	/--|-- bra.s 502a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4fae:	|  \-> move.l 68(sp),52(sp)
    4fb4:	|      clr.l 48(sp)
    4fb8:	|      move.l 17b30 <DOSBase>,d0
    4fbe:	|      movea.l d0,a6
    4fc0:	|      move.l 52(sp),d1
    4fc4:	|      move.l 48(sp),d2
    4fc8:	|      jsr -312(a6)
    4fcc:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4fd0:	+----- bra.s 502a <saveSpeech+0x118>
			FPutC (fp, 1);
    4fd2:	|  /-> move.l 68(sp),16(sp)
    4fd8:	|  |   moveq #1,d0
    4fda:	|  |   move.l d0,12(sp)
    4fde:	|  |   move.l 17b30 <DOSBase>,d0
    4fe4:	|  |   movea.l d0,a6
    4fe6:	|  |   move.l 16(sp),d1
    4fea:	|  |   move.l 12(sp),d2
    4fee:	|  |   jsr -312(a6)
    4ff2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4ff6:	|  |   movea.l 56(sp),a0
    4ffa:	|  |   move.l (a0),d0
    4ffc:	|  |   move.l 68(sp),-(sp)
    5000:	|  |   move.l d0,-(sp)
    5002:	|  |   jsr bd8 <writeString>
    5008:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    500a:	|  |   movea.l 56(sp),a0
    500e:	|  |   move.l 8(a0),d0
    5012:	|  |   move.l 68(sp),-(sp)
    5016:	|  |   move.l d0,-(sp)
    5018:	|  |   jsr 8d0 <put2bytes>
    501e:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5020:	|  |   movea.l 56(sp),a0
    5024:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    502a:	\--|-> tst.l 56(sp)
    502e:	   \-- bne.s 4fd2 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5030:	       move.l 68(sp),28(sp)
    5036:	       clr.l 24(sp)
    503a:	       move.l 17b30 <DOSBase>,d0
    5040:	       movea.l d0,a6
    5042:	       move.l 28(sp),d1
    5046:	       move.l 24(sp),d2
    504a:	       jsr -312(a6)
    504e:	       move.l d0,20(sp)
}
    5052:	       nop
    5054:	       move.l (sp)+,d2
    5056:	       movea.l (sp)+,a6
    5058:	       lea 52(sp),sp
    505c:	       rts

0000505e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    505e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5060:	movea.l 8(sp),a0
    5064:	movea.l 68(a0),a0
    5068:	move.l (a0),d2
    506a:	movea.l 8(sp),a0
    506e:	movea.l 68(a0),a0
    5072:	move.l 4(a0),d0
    5076:	move.l 12(sp),-(sp)
    507a:	move.l d0,-(sp)
    507c:	jsr 129ca <__mulsi3>
    5082:	addq.l #8,sp
    5084:	move.l d0,d1
    5086:	movea.l 8(sp),a0
    508a:	move.l 94(a0),d0
    508e:	add.l d1,d0
    5090:	add.l d0,d0
    5092:	add.l d0,d0
    5094:	movea.l d2,a0
    5096:	adda.l d0,a0
    5098:	move.l (a0),d0
    509a:	movea.l 8(sp),a0
    509e:	move.l d0,60(a0)
}
    50a2:	nop
    50a4:	move.l (sp)+,d2
    50a6:	rts

000050a8 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    50a8:	       lea -20(sp),sp
    50ac:	       move.l d2,-(sp)
    50ae:	       move.l 40(sp),d0
    50b2:	       move.w d0,d0
    50b4:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    50b8:	       movea.l 17b72 <speech>,a0
    50be:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    50c4:	       move.l 32(sp),-(sp)
    50c8:	       jsr 61ce <findPerson>
    50ce:	       addq.l #4,sp
    50d0:	       move.l d0,16(sp)
    if (thisPerson) {
    50d4:	   /-- beq.s 50fa <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    50d6:	   |   movea.w 6(sp),a0
    50da:	   |   move.l a0,-(sp)
    50dc:	   |   move.l 40(sp),-(sp)
    50e0:	   |   move.l 24(sp),-(sp)
    50e4:	   |   move.l 40(sp),-(sp)
    50e8:	   |   jsr 51c0 <wrapSpeechPerson>
    50ee:	   |   lea 16(sp),sp
    50f2:	   |   move.l d0,20(sp)
    50f6:	/--|-- bra.w 51b4 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    50fa:	|  \-> move.l 32(sp),-(sp)
    50fe:	|      jsr 10aea <getRegionForObject>
    5104:	|      addq.l #4,sp
    5106:	|      move.l d0,12(sp)
        if (thisRegion) {
    510a:	|  /-- beq.s 5176 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    510c:	|  |   movea.l 12(sp),a0
    5110:	|  |   movea.l 28(a0),a0
    5114:	|  |   move.l 28(a0),d0
    5118:	|  |   movea.l 12(sp),a0
    511c:	|  |   movea.l 4(a0),a1
    5120:	|  |   movea.l 12(sp),a0
    5124:	|  |   movea.l 28(a0),a0
    5128:	|  |   move.l 20(a0),d1
    512c:	|  |   movea.l a1,a0
    512e:	|  |   suba.l d1,a0
    5130:	|  |   move.l 17bd4 <cameraY>,d1
    5136:	|  |   movea.l a0,a1
    5138:	|  |   suba.l d1,a1
    513a:	|  |   movea.l 12(sp),a0
    513e:	|  |   move.l (a0),d2
    5140:	|  |   movea.l 12(sp),a0
    5144:	|  |   move.l 8(a0),d1
    5148:	|  |   add.l d2,d1
    514a:	|  |   move.l d1,d2
    514c:	|  |   asr.l #1,d2
    514e:	|  |   move.l 17bd0 <cameraX>,d1
    5154:	|  |   movea.l d2,a0
    5156:	|  |   suba.l d1,a0
    5158:	|  |   move.l 36(sp),-(sp)
    515c:	|  |   move.l d0,-(sp)
    515e:	|  |   move.l a1,-(sp)
    5160:	|  |   move.l a0,-(sp)
    5162:	|  |   move.l 44(sp),-(sp)
    5166:	|  |   jsr 52de <wrapSpeechXY>
    516c:	|  |   lea 20(sp),sp
    5170:	|  |   move.l d0,20(sp)
    5174:	+--|-- bra.s 51b4 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5176:	|  \-> move.l 32(sp),-(sp)
    517a:	|      jsr 8d96 <findObjectType>
    5180:	|      addq.l #4,sp
    5182:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5186:	|      movea.l 8(sp),a0
    518a:	|      move.l 28(a0),d1
    518e:	|      move.l 17a28 <winWidth>,d0
    5194:	|      lsr.l #1,d0
    5196:	|      move.l 36(sp),-(sp)
    519a:	|      move.l d1,-(sp)
    519c:	|      pea a <_start+0xa>
    51a0:	|      move.l d0,-(sp)
    51a2:	|      move.l 44(sp),-(sp)
    51a6:	|      jsr 52de <wrapSpeechXY>
    51ac:	|      lea 20(sp),sp
    51b0:	|      move.l d0,20(sp)
        }
    }
    return i;
    51b4:	\----> move.l 20(sp),d0
}
    51b8:	       move.l (sp)+,d2
    51ba:	       lea 20(sp),sp
    51be:	       rts

000051c0 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    51c0:	    subq.l #8,sp
    51c2:	    movem.l d2-d4,-(sp)
    51c6:	    move.l 36(sp),d0
    51ca:	    move.w d0,d0
    51cc:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    51d0:	    movea.l 28(sp),a0
    51d4:	    movea.l 102(a0),a0
    51d8:	    move.l 28(a0),d2
    51dc:	    movea.l 28(sp),a0
    51e0:	    move.l 4(a0),d3
    51e4:	    move.l 17bd4 <cameraY>,d0
    51ea:	    move.l d0,-(sp)
    51ec:	    jsr 12470 <__floatsisf>
    51f2:	    addq.l #4,sp
    51f4:	    move.l d0,-(sp)
    51f6:	    move.l d3,-(sp)
    51f8:	    jsr 12764 <__subsf3>
    51fe:	    addq.l #8,sp
    5200:	    move.l d0,d3
    5202:	    movea.l 28(sp),a0
    5206:	    move.l 20(a0),d4
    520a:	    movea.l 28(sp),a0
    520e:	    move.l 8(a0),d1
    5212:	    movea.l 28(sp),a0
    5216:	    move.l 12(a0),d0
    521a:	    sub.l d0,d1
    521c:	    move.l d1,-(sp)
    521e:	    jsr 12470 <__floatsisf>
    5224:	    addq.l #4,sp
    5226:	    move.l d0,-(sp)
    5228:	    move.l d4,-(sp)
    522a:	    jsr 12522 <__mulsf3>
    5230:	    addq.l #8,sp
    5232:	    move.l d0,-(sp)
    5234:	    move.l d3,-(sp)
    5236:	    jsr 12764 <__subsf3>
    523c:	    addq.l #8,sp
    523e:	    move.l d0,d3
    5240:	    movea.l 28(sp),a0
    5244:	    movea.l 102(a0),a0
    5248:	    move.l 20(a0),d0
    524c:	    move.l d0,-(sp)
    524e:	    jsr 12470 <__floatsisf>
    5254:	    addq.l #4,sp
    5256:	    move.l d0,-(sp)
    5258:	    move.l d3,-(sp)
    525a:	    jsr 12764 <__subsf3>
    5260:	    addq.l #8,sp
    5262:	    move.l d0,-(sp)
    5264:	    jsr 12408 <__fixsfsi>
    526a:	    addq.l #4,sp
    526c:	    move.l d0,d4
    526e:	    movea.l 28(sp),a0
    5272:	    move.l (a0),d3
    5274:	    move.l 17bd0 <cameraX>,d0
    527a:	    move.l d0,-(sp)
    527c:	    jsr 12470 <__floatsisf>
    5282:	    addq.l #4,sp
    5284:	    move.l d0,-(sp)
    5286:	    move.l d3,-(sp)
    5288:	    jsr 12764 <__subsf3>
    528e:	    addq.l #8,sp
    5290:	    move.l d0,-(sp)
    5292:	    jsr 12408 <__fixsfsi>
    5298:	    addq.l #4,sp
    529a:	    move.l 32(sp),-(sp)
    529e:	    move.l d2,-(sp)
    52a0:	    move.l d4,-(sp)
    52a2:	    move.l d0,-(sp)
    52a4:	    move.l 40(sp),-(sp)
    52a8:	    jsr 52de <wrapSpeechXY>
    52ae:	    lea 20(sp),sp
    52b2:	    move.l d0,16(sp)
	if (animPerson) {
    52b6:	    tst.w 14(sp)
    52ba:	/-- beq.s 52d2 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    52bc:	|   move.l 28(sp),-(sp)
    52c0:	|   jsr 4efe <makeTalker>
    52c6:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    52c8:	|   movea.l 17b72 <speech>,a0
    52ce:	|   move.l 28(sp),(a0)
	}
	return i;
    52d2:	\-> move.l 16(sp),d0
}
    52d6:	    movem.l (sp)+,d2-d4
    52da:	    addq.l #8,sp
    52dc:	    rts

000052de <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    52de:	                   lea -16(sp),sp
    52e2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    52e6:	                   clr.l 16(sp)
    killAllSpeech();
    52ea:	                   jsr 4e30 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    52f0:	                   move.l 36(sp),-(sp)
    52f4:	                   jsr f534 <strlen>
    52fa:	                   addq.l #4,sp
    52fc:	                   movea.l d0,a0
    52fe:	                   lea 20(a0),a0
    5302:	                   move.l a0,-(sp)
    5304:	                   jsr 12498 <__floatunsisf>
    530a:	                   addq.l #4,sp
    530c:	                   move.l d0,d1
    530e:	                   move.l 1601e <speechSpeed>,d0
    5314:	                   move.l d0,-(sp)
    5316:	                   move.l d1,-(sp)
    5318:	                   jsr 12522 <__mulsf3>
    531e:	                   addq.l #8,sp
    5320:	                   move.l d0,-(sp)
    5322:	                   jsr 12408 <__fixsfsi>
    5328:	                   addq.l #4,sp
    532a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    532e:	               /-- bgt.s 5336 <wrapSpeechXY+0x58>
    5330:	               |   moveq #1,d0
    5332:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5336:	               \-> moveq #-1,d1
    5338:	                   cmp.l 52(sp),d1
    533c:	               /-- beq.s 537c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    533e:	               |   move.l 17be4 <speechMode>,d0
    5344:	               +-- ble.s 537c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5346:	               |   clr.l -(sp)
    5348:	               |   move.l 56(sp),-(sp)
    534c:	               |   jsr 8a0e <startSound>
    5352:	               |   addq.l #8,sp
    5354:	               |   tst.w d0
    5356:	               +-- beq.s 537c <wrapSpeechXY+0x9e>
                speechTime = -10;
    5358:	               |   moveq #-10,d0
    535a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    535e:	               |   movea.l 17b72 <speech>,a0
    5364:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    536a:	               |   move.l 17be4 <speechMode>,d0
    5370:	               |   moveq #2,d1
    5372:	               |   cmp.l d0,d1
    5374:	               +-- bne.s 537c <wrapSpeechXY+0x9e>
    5376:	               |   moveq #-10,d0
    5378:	/--------------|-- bra.w 5602 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    537c:	|              \-> movea.l 17b72 <speech>,a0
    5382:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5388:	|     /----------- bra.w 543c <wrapSpeechXY+0x15e>
        a = wrap;
    538c:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5392:	|  |  |        /-- bra.s 53a2 <wrapSpeechXY+0xc4>
            a--;
    5394:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5398:	|  |  |  |     +-- bne.s 53a2 <wrapSpeechXY+0xc4>
                a = wrap;
    539a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    53a0:	|  |  |  |  /--|-- bra.s 53b4 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    53a2:	|  |  |  |  |  \-> move.l 28(sp),d0
    53a6:	|  |  |  |  |      movea.l 36(sp),a0
    53aa:	|  |  |  |  |      adda.l d0,a0
    53ac:	|  |  |  |  |      move.b (a0),d0
    53ae:	|  |  |  |  |      cmpi.b #32,d0
    53b2:	|  |  |  \--|----- bne.s 5394 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    53b4:	|  |  |     \----> move.l 28(sp),d0
    53b8:	|  |  |            movea.l 36(sp),a0
    53bc:	|  |  |            adda.l d0,a0
    53be:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    53c0:	|  |  |            lea 16(sp),a0
    53c4:	|  |  |            move.l a0,-(sp)
    53c6:	|  |  |            move.l 44(sp),-(sp)
    53ca:	|  |  |            move.l 44(sp),-(sp)
    53ce:	|  |  |            jsr 4b7a <addSpeechLine>
    53d4:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    53d8:	|  |  |            move.l 28(sp),d0
    53dc:	|  |  |            movea.l 36(sp),a0
    53e0:	|  |  |            adda.l d0,a0
    53e2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    53e6:	|  |  |            move.l 28(sp),d0
    53ea:	|  |  |            addq.l #1,d0
    53ec:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    53f0:	|  |  |            move.l 44(sp),-(sp)
    53f4:	|  |  |            jsr 12470 <__floatsisf>
    53fa:	|  |  |            addq.l #4,sp
    53fc:	|  |  |            move.l d0,d2
    53fe:	|  |  |            move.l 17c0a <fontHeight>,d0
    5404:	|  |  |            move.l d0,-(sp)
    5406:	|  |  |            jsr 12470 <__floatsisf>
    540c:	|  |  |            addq.l #4,sp
    540e:	|  |  |            move.l d0,d1
    5410:	|  |  |            move.l 16032 <cameraZoom>,d0
    5416:	|  |  |            move.l d0,-(sp)
    5418:	|  |  |            move.l d1,-(sp)
    541a:	|  |  |            jsr 1231c <__divsf3>
    5420:	|  |  |            addq.l #8,sp
    5422:	|  |  |            move.l d0,-(sp)
    5424:	|  |  |            move.l d2,-(sp)
    5426:	|  |  |            jsr 12764 <__subsf3>
    542c:	|  |  |            addq.l #8,sp
    542e:	|  |  |            move.l d0,-(sp)
    5430:	|  |  |            jsr 12408 <__fixsfsi>
    5436:	|  |  |            addq.l #4,sp
    5438:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    543c:	|  |  \----------> move.l 36(sp),-(sp)
    5440:	|  |               jsr f534 <strlen>
    5446:	|  |               addq.l #4,sp
    5448:	|  |               move.l d0,d1
    544a:	|  |               move.l 48(sp),d0
    544e:	|  |               cmp.l d1,d0
    5450:	|  \-------------- bcs.w 538c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5454:	|                  lea 16(sp),a0
    5458:	|                  move.l a0,-(sp)
    545a:	|                  move.l 44(sp),-(sp)
    545e:	|                  move.l 44(sp),-(sp)
    5462:	|                  jsr 4b7a <addSpeechLine>
    5468:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    546c:	|                  move.l 44(sp),-(sp)
    5470:	|                  jsr 12470 <__floatsisf>
    5476:	|                  addq.l #4,sp
    5478:	|                  move.l d0,d2
    547a:	|                  move.l 17c0a <fontHeight>,d0
    5480:	|                  move.l d0,-(sp)
    5482:	|                  jsr 12470 <__floatsisf>
    5488:	|                  addq.l #4,sp
    548a:	|                  move.l d0,d1
    548c:	|                  move.l 16032 <cameraZoom>,d0
    5492:	|                  move.l d0,-(sp)
    5494:	|                  move.l d1,-(sp)
    5496:	|                  jsr 1231c <__divsf3>
    549c:	|                  addq.l #8,sp
    549e:	|                  move.l d0,-(sp)
    54a0:	|                  move.l d2,-(sp)
    54a2:	|                  jsr 12764 <__subsf3>
    54a8:	|                  addq.l #8,sp
    54aa:	|                  move.l d0,-(sp)
    54ac:	|                  jsr 12408 <__fixsfsi>
    54b2:	|                  addq.l #4,sp
    54b4:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    54b8:	|              /-- bpl.s 54d6 <wrapSpeechXY+0x1f8>
    54ba:	|              |   movea.l 17b72 <speech>,a0
    54c0:	|              |   move.l 8(a0),d0
    54c4:	|              |   movea.l 17b72 <speech>,a0
    54ca:	|              |   sub.l 44(sp),d0
    54ce:	|              |   move.l d0,8(a0)
    54d2:	|           /--|-- bra.w 55c4 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    54d6:	|           |  \-> movea.l 17b72 <speech>,a0
    54dc:	|           |      move.l 8(a0),d0
    54e0:	|           |      move.l d0,-(sp)
    54e2:	|           |      jsr 12470 <__floatsisf>
    54e8:	|           |      addq.l #4,sp
    54ea:	|           |      move.l d0,d2
    54ec:	|           |      move.l 17bd4 <cameraY>,d0
    54f2:	|           |      move.l d0,-(sp)
    54f4:	|           |      jsr 12470 <__floatsisf>
    54fa:	|           |      addq.l #4,sp
    54fc:	|           |      move.l d0,d3
    54fe:	|           |      move.l 17a2c <winHeight>,d4
    5504:	|           |      move.l 17c0a <fontHeight>,d0
    550a:	|           |      pea 3 <_start+0x3>
    550e:	|           |      move.l d0,-(sp)
    5510:	|           |      jsr 12a48 <__divsi3>
    5516:	|           |      addq.l #8,sp
    5518:	|           |      move.l d4,d1
    551a:	|           |      sub.l d0,d1
    551c:	|           |      move.l d1,-(sp)
    551e:	|           |      jsr 12498 <__floatunsisf>
    5524:	|           |      addq.l #4,sp
    5526:	|           |      move.l d0,d1
    5528:	|           |      move.l 16032 <cameraZoom>,d0
    552e:	|           |      move.l d0,-(sp)
    5530:	|           |      move.l d1,-(sp)
    5532:	|           |      jsr 1231c <__divsf3>
    5538:	|           |      addq.l #8,sp
    553a:	|           |      move.l d0,-(sp)
    553c:	|           |      move.l d3,-(sp)
    553e:	|           |      jsr 12222 <__addsf3>
    5544:	|           |      addq.l #8,sp
    5546:	|           |      move.l d0,-(sp)
    5548:	|           |      move.l d2,-(sp)
    554a:	|           |      jsr 125dc <__gtsf2>
    5550:	|           |      addq.l #8,sp
    5552:	|           |      tst.l d0
    5554:	|           +----- ble.s 55c4 <wrapSpeechXY+0x2e6>
    5556:	|           |      move.l 17bd4 <cameraY>,d0
    555c:	|           |      move.l d0,-(sp)
    555e:	|           |      jsr 12470 <__floatsisf>
    5564:	|           |      addq.l #4,sp
    5566:	|           |      move.l d0,d2
    5568:	|           |      move.l 17a2c <winHeight>,d3
    556e:	|           |      move.l 17c0a <fontHeight>,d0
    5574:	|           |      pea 3 <_start+0x3>
    5578:	|           |      move.l d0,-(sp)
    557a:	|           |      jsr 12a48 <__divsi3>
    5580:	|           |      addq.l #8,sp
    5582:	|           |      move.l d3,d1
    5584:	|           |      sub.l d0,d1
    5586:	|           |      move.l d1,-(sp)
    5588:	|           |      jsr 12498 <__floatunsisf>
    558e:	|           |      addq.l #4,sp
    5590:	|           |      move.l d0,d1
    5592:	|           |      move.l 16032 <cameraZoom>,d0
    5598:	|           |      move.l d0,-(sp)
    559a:	|           |      move.l d1,-(sp)
    559c:	|           |      jsr 1231c <__divsf3>
    55a2:	|           |      addq.l #8,sp
    55a4:	|           |      move.l d0,-(sp)
    55a6:	|           |      move.l d2,-(sp)
    55a8:	|           |      jsr 12222 <__addsf3>
    55ae:	|           |      addq.l #8,sp
    55b0:	|           |      movea.l 17b72 <speech>,a2
    55b6:	|           |      move.l d0,-(sp)
    55b8:	|           |      jsr 12408 <__fixsfsi>
    55be:	|           |      addq.l #4,sp
    55c0:	|           |      move.l d0,8(a2)

    if (offset) {
    55c4:	|           \----> move.l 16(sp),d0
    55c8:	|        /-------- beq.s 55fe <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    55ca:	|        |         movea.l 17b72 <speech>,a0
    55d0:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    55d6:	|        |     /-- bra.s 55f8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    55d8:	|        |  /--|-> movea.l 20(sp),a0
    55dc:	|        |  |  |   move.l 8(a0),d1
    55e0:	|        |  |  |   move.l 16(sp),d0
    55e4:	|        |  |  |   add.l d1,d0
    55e6:	|        |  |  |   movea.l 20(sp),a0
    55ea:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    55ee:	|        |  |  |   movea.l 20(sp),a0
    55f2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    55f8:	|        |  |  \-> tst.l 20(sp)
    55fc:	|        |  \----- bne.s 55d8 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    55fe:	|        \-------> move.l 24(sp),d0
}
    5602:	\----------------> movem.l (sp)+,d2-d4/a2
    5606:	                   lea 16(sp),sp
    560a:	                   rts

0000560c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    560c:	    move.l 4(sp),d0
    5610:	/-- bpl.s 5614 <TF_abs+0x8>
    5612:	|   neg.l d0
}
    5614:	\-> rts

00005616 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    5616:	             lea -28(sp),sp
    561a:	             move.l a6,-(sp)
    561c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    561e:	             moveq #120,d0
    5620:	             move.l d0,28(sp)
    5624:	             clr.l 24(sp)
    5628:	             move.l 17b28 <SysBase>,d0
    562e:	             movea.l d0,a6
    5630:	             move.l 28(sp),d0
    5634:	             move.l 24(sp),d1
    5638:	             jsr -684(a6)
    563c:	             move.l d0,20(sp)
    5640:	             move.l 20(sp),d0
    5644:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    5648:	         /-- bne.s 5650 <addPerson+0x3a>
    564a:	         |   clr.w d0
    564c:	/--------|-- bra.w 587e <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    5650:	|        \-> move.l 48(sp),-(sp)
    5654:	|            jsr 8e86 <loadObjectType>
    565a:	|            addq.l #4,sp
    565c:	|            movea.l 16(sp),a0
    5660:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    5664:	|            movea.l 16(sp),a0
    5668:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    5670:	|            movea.l 16(sp),a0
    5674:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    5678:	|            movea.l 16(sp),a0
    567c:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    5680:	|            move.l 44(sp),-(sp)
    5684:	|            jsr 12470 <__floatsisf>
    568a:	|            addq.l #4,sp
    568c:	|            move.l d0,d2
    568e:	|            move.l 40(sp),-(sp)
    5692:	|            jsr 12470 <__floatsisf>
    5698:	|            addq.l #4,sp
    569a:	|            move.l d2,-(sp)
    569c:	|            move.l d0,-(sp)
    569e:	|            move.l 24(sp),-(sp)
    56a2:	|            jsr 6916 <moveAndScale>
    56a8:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    56ac:	|            movea.l 16(sp),a0
    56b0:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    56b4:	|            movea.l 16(sp),a0
    56b8:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    56be:	|            movea.l 16(sp),a0
    56c2:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    56c8:	|            movea.l 16(sp),a0
    56cc:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    56d0:	|            movea.l 16(sp),a0
    56d4:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    56d8:	|            movea.l 16(sp),a0
    56dc:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    56e2:	|            movea.l 16(sp),a0
    56e6:	|            clr.l 94(a0)
    newPerson->angle = 180;
    56ea:	|            movea.l 16(sp),a0
    56ee:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    56f6:	|            movea.l 16(sp),a0
    56fa:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    5702:	|            movea.l 16(sp),a0
    5706:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    570a:	|            movea.l 16(sp),a0
    570e:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    5712:	|            movea.l 16(sp),a0
    5716:	|            movea.l 102(a0),a0
    571a:	|            move.l 24(a0),d0
    571e:	|            movea.l 16(sp),a0
    5722:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    5726:	|            movea.l 16(sp),a0
    572a:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    572e:	|            movea.l 16(sp),a0
    5732:	|            movea.l 102(a0),a0
    5736:	|            move.l 32(a0),d0
    573a:	|            movea.l 16(sp),a0
    573e:	|            move.l d0,110(a0)
    newPerson->r = 0;
    5742:	|            movea.l 16(sp),a0
    5746:	|            clr.b 114(a0)
    newPerson->g = 0;
    574a:	|            movea.l 16(sp),a0
    574e:	|            clr.b 115(a0)
    newPerson->b = 0;
    5752:	|            movea.l 16(sp),a0
    5756:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    575a:	|            movea.l 16(sp),a0
    575e:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    5762:	|            movea.l 16(sp),a0
    5766:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    576a:	|            movea.l 16(sp),a0
    576e:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    5774:	|            clr.l -(sp)
    5776:	|            move.l 20(sp),-(sp)
    577a:	|            jsr 505e <setFrames>
    5780:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    5782:	|            movea.l 52(sp),a0
    5786:	|            movea.l (a0),a0
    5788:	|            movea.l (a0),a0
    578a:	|            movea.l 4(a0),a0
    578e:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    5792:	|     /----- bpl.s 579c <addPerson+0x186>
    5794:	|     |      move.l 12(sp),d0
    5798:	|     |      neg.l d0
    579a:	|     |  /-- bra.s 579e <addPerson+0x188>
    579c:	|     \--|-> moveq #1,d0
    579e:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    57a2:	|            movea.l 52(sp),a0
    57a6:	|            movea.l (a0),a0
    57a8:	|            movea.l (a0),a0
    57aa:	|            movea.l (a0),a0
    57ac:	|            move.l 8(a0),d0
    57b0:	|            cmp.l 8(sp),d0
    57b4:	|     /----- bgt.s 57e6 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    57b6:	|     |      tst.l 12(sp)
    57ba:	|     |  /-- bge.s 57c8 <addPerson+0x1b2>
            newPerson->height = 5;
    57bc:	|     |  |   movea.l 16(sp),a0
    57c0:	|     |  |   moveq #5,d1
    57c2:	|     |  |   move.l d1,8(a0)
    57c6:	|  /--|--|-- bra.s 5810 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    57c8:	|  |  |  \-> movea.l 52(sp),a0
    57cc:	|  |  |      movea.l (a0),a0
    57ce:	|  |  |      movea.l (a0),a0
    57d0:	|  |  |      movea.l (a0),a0
    57d2:	|  |  |      movea.l 16(a0),a0
    57d6:	|  |  |      move.l 12(a0),d0
    57da:	|  |  |      addq.l #5,d0
    57dc:	|  |  |      movea.l 16(sp),a0
    57e0:	|  |  |      move.l d0,8(a0)
    57e4:	|  +--|----- bra.s 5810 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    57e6:	|  |  \----> movea.l 52(sp),a0
    57ea:	|  |         movea.l (a0),a0
    57ec:	|  |         movea.l (a0),a0
    57ee:	|  |         movea.l (a0),a0
    57f0:	|  |         movea.l 16(a0),a0
    57f4:	|  |         move.l 8(sp),d1
    57f8:	|  |         move.l d1,d0
    57fa:	|  |         add.l d0,d0
    57fc:	|  |         add.l d1,d0
    57fe:	|  |         lsl.l #3,d0
    5800:	|  |         adda.l d0,a0
    5802:	|  |         move.l 12(a0),d0
    5806:	|  |         addq.l #5,d0
    5808:	|  |         movea.l 16(sp),a0
    580c:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    5810:	|  \-------> move.l #97142,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5818:	|        /-- bra.s 5828 <addPerson+0x212>
        changethat = &((*changethat)->next);
    581a:	|     /--|-> movea.l 32(sp),a0
    581e:	|     |  |   move.l (a0),d0
    5820:	|     |  |   moveq #24,d1
    5822:	|     |  |   add.l d0,d1
    5824:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5828:	|     |  \-> movea.l 32(sp),a0
    582c:	|     |      move.l (a0),d0
    582e:	|     |  /-- beq.s 5856 <addPerson+0x240>
    5830:	|     |  |   movea.l 32(sp),a0
    5834:	|     |  |   movea.l (a0),a0
    5836:	|     |  |   move.l 4(a0),d2
    583a:	|     |  |   move.l 44(sp),-(sp)
    583e:	|     |  |   jsr 12470 <__floatsisf>
    5844:	|     |  |   addq.l #4,sp
    5846:	|     |  |   move.l d0,-(sp)
    5848:	|     |  |   move.l d2,-(sp)
    584a:	|     |  |   jsr 12696 <__ltsf2>
    5850:	|     |  |   addq.l #8,sp
    5852:	|     |  |   tst.l d0
    5854:	|     \--|-- blt.s 581a <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    5856:	|        \-> movea.l 32(sp),a0
    585a:	|            move.l (a0),d0
    585c:	|            movea.l 16(sp),a0
    5860:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    5864:	|            movea.l 32(sp),a0
    5868:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    586c:	|            movea.l 16(sp),a0
    5870:	|            move.l 102(a0),d0
    5874:	|            sne d0
    5876:	|            neg.b d0
    5878:	|            move.b d0,d0
    587a:	|            andi.w #255,d0
}
    587e:	\----------> move.l (sp)+,d2
    5880:	             movea.l (sp)+,a6
    5882:	             lea 28(sp),sp
    5886:	             rts

00005888 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    5888:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    588a:	       move.l 8(sp),-(sp)
    588e:	       jsr 61ce <findPerson>
    5894:	       addq.l #4,sp
    5896:	       move.l d0,(sp)
    if (moveMe) {
    5898:	/----- beq.s 58cc <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    589a:	|      movea.l (sp),a0
    589c:	|      move.l 56(a0),d0
    58a0:	|  /-- beq.s 58b2 <animatePerson+0x2a>
    58a2:	|  |   movea.l (sp),a0
    58a4:	|  |   move.l 56(a0),d0
    58a8:	|  |   move.l d0,-(sp)
    58aa:	|  |   jsr 1af4 <abortFunction>
    58b0:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    58b2:	|  \-> movea.l (sp),a0
    58b4:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    58b8:	|      movea.l (sp),a0
    58ba:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    58be:	|      movea.l (sp),a0
    58c0:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    58c4:	|      movea.l (sp),a0
    58c6:	|      move.l 12(sp),60(a0)
    }
}
    58cc:	\----> nop
    58ce:	       addq.l #4,sp
    58d0:	       rts

000058d2 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    58d2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    58d4:	       move.l 8(sp),-(sp)
    58d8:	       jsr 61ce <findPerson>
    58de:	       addq.l #4,sp
    58e0:	       move.l d0,(sp)
    if (moveMe) {
    58e2:	/----- beq.s 5924 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    58e4:	|      movea.l (sp),a0
    58e6:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    58ea:	|      movea.l (sp),a0
    58ec:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    58f2:	|      move.l (sp),-(sp)
    58f4:	|      jsr 6a60 <rethinkAngle>
    58fa:	|      addq.l #4,sp
        if (moveMe->walking) {
    58fc:	|      movea.l (sp),a0
    58fe:	|      move.w 52(a0),d0
    5902:	|  /-- beq.s 5916 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    5904:	|  |   pea 1 <_start+0x1>
    5908:	|  |   move.l 4(sp),-(sp)
    590c:	|  |   jsr 505e <setFrames>
    5912:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    5914:	+--|-- bra.s 5924 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    5916:	|  \-> clr.l -(sp)
    5918:	|      move.l 4(sp),-(sp)
    591c:	|      jsr 505e <setFrames>
    5922:	|      addq.l #8,sp
}
    5924:	\----> nop
    5926:	       addq.l #4,sp
    5928:	       rts

0000592a <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    592a:	             lea -36(sp),sp
    592e:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    5930:	             movea.l 44(sp),a0
    5934:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    593a:	             moveq #12,d0
    593c:	             move.l d0,28(sp)
    5940:	             clr.l 24(sp)
    5944:	             move.l 17b28 <SysBase>,d0
    594a:	             movea.l d0,a6
    594c:	             move.l 28(sp),d0
    5950:	             move.l 24(sp),d1
    5954:	             jsr -684(a6)
    5958:	             move.l d0,20(sp)
    595c:	             move.l 20(sp),d0
    5960:	             move.l d0,16(sp)
	if (!(newAnim)) {
    5964:	         /-- bne.s 597a <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    5966:	         |   pea 14f5f <incbin_player_end+0x143>
    596c:	         |   jsr 12018 <KPrintF>
    5972:	         |   addq.l #4,sp
		return NULL;
    5974:	         |   moveq #0,d0
    5976:	/--------|-- bra.w 5abc <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    597a:	|        \-> movea.l 44(sp),a0
    597e:	|            move.l (a0),d0
    5980:	|            movea.l 16(sp),a0
    5984:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    5986:	|            movea.l 16(sp),a0
    598a:	|            move.l 32(sp),8(a0)

	if (num) {
    5990:	|  /-------- beq.w 5ab0 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    5994:	|  |         move.l 32(sp),d1
    5998:	|  |         move.l d1,d0
    599a:	|  |         add.l d0,d0
    599c:	|  |         add.l d1,d0
    599e:	|  |         add.l d0,d0
    59a0:	|  |         add.l d0,d0
    59a2:	|  |         move.l d0,12(sp)
    59a6:	|  |         clr.l 8(sp)
    59aa:	|  |         move.l 17b28 <SysBase>,d0
    59b0:	|  |         movea.l d0,a6
    59b2:	|  |         move.l 12(sp),d0
    59b6:	|  |         move.l 8(sp),d1
    59ba:	|  |         jsr -684(a6)
    59be:	|  |         move.l d0,4(sp)
    59c2:	|  |         move.l 4(sp),d0
    59c6:	|  |         movea.l 16(sp),a0
    59ca:	|  |         move.l d0,4(a0)
		if (newAnim->frames) {
    59ce:	|  |         movea.l 16(sp),a0
    59d2:	|  |         move.l 4(a0),d0
    59d6:	|  |     /-- beq.s 59ec <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    59d8:	|  |     |   pea 14f5f <incbin_player_end+0x143>
    59de:	|  |     |   jsr 12018 <KPrintF>
    59e4:	|  |     |   addq.l #4,sp
			return NULL;
    59e6:	|  |     |   moveq #0,d0
    59e8:	+--|-----|-- bra.w 5abc <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    59ec:	|  |     \-> clr.l 36(sp)
    59f0:	|  |     /-- bra.w 5aa2 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    59f4:	|  |  /--|-> movea.l 44(sp),a0
    59f8:	|  |  |  |   movea.l 4(a0),a0
    59fc:	|  |  |  |   move.l 36(sp),d1
    5a00:	|  |  |  |   move.l d1,d0
    5a02:	|  |  |  |   add.l d0,d0
    5a04:	|  |  |  |   add.l d1,d0
    5a06:	|  |  |  |   add.l d0,d0
    5a08:	|  |  |  |   add.l d0,d0
    5a0a:	|  |  |  |   lea (0,a0,d0.l),a1
    5a0e:	|  |  |  |   movea.l 16(sp),a0
    5a12:	|  |  |  |   movea.l 4(a0),a0
    5a16:	|  |  |  |   move.l 36(sp),d1
    5a1a:	|  |  |  |   move.l d1,d0
    5a1c:	|  |  |  |   add.l d0,d0
    5a1e:	|  |  |  |   add.l d1,d0
    5a20:	|  |  |  |   add.l d0,d0
    5a22:	|  |  |  |   add.l d0,d0
    5a24:	|  |  |  |   adda.l d0,a0
    5a26:	|  |  |  |   move.l (a1),d0
    5a28:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    5a2a:	|  |  |  |   movea.l 44(sp),a0
    5a2e:	|  |  |  |   movea.l 4(a0),a0
    5a32:	|  |  |  |   move.l 36(sp),d1
    5a36:	|  |  |  |   move.l d1,d0
    5a38:	|  |  |  |   add.l d0,d0
    5a3a:	|  |  |  |   add.l d1,d0
    5a3c:	|  |  |  |   add.l d0,d0
    5a3e:	|  |  |  |   add.l d0,d0
    5a40:	|  |  |  |   lea (0,a0,d0.l),a1
    5a44:	|  |  |  |   movea.l 16(sp),a0
    5a48:	|  |  |  |   movea.l 4(a0),a0
    5a4c:	|  |  |  |   move.l 36(sp),d1
    5a50:	|  |  |  |   move.l d1,d0
    5a52:	|  |  |  |   add.l d0,d0
    5a54:	|  |  |  |   add.l d1,d0
    5a56:	|  |  |  |   add.l d0,d0
    5a58:	|  |  |  |   add.l d0,d0
    5a5a:	|  |  |  |   adda.l d0,a0
    5a5c:	|  |  |  |   move.l 4(a1),d0
    5a60:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    5a64:	|  |  |  |   movea.l 44(sp),a0
    5a68:	|  |  |  |   movea.l 4(a0),a0
    5a6c:	|  |  |  |   move.l 36(sp),d1
    5a70:	|  |  |  |   move.l d1,d0
    5a72:	|  |  |  |   add.l d0,d0
    5a74:	|  |  |  |   add.l d1,d0
    5a76:	|  |  |  |   add.l d0,d0
    5a78:	|  |  |  |   add.l d0,d0
    5a7a:	|  |  |  |   lea (0,a0,d0.l),a1
    5a7e:	|  |  |  |   movea.l 16(sp),a0
    5a82:	|  |  |  |   movea.l 4(a0),a0
    5a86:	|  |  |  |   move.l 36(sp),d1
    5a8a:	|  |  |  |   move.l d1,d0
    5a8c:	|  |  |  |   add.l d0,d0
    5a8e:	|  |  |  |   add.l d1,d0
    5a90:	|  |  |  |   add.l d0,d0
    5a92:	|  |  |  |   add.l d0,d0
    5a94:	|  |  |  |   adda.l d0,a0
    5a96:	|  |  |  |   move.l 8(a1),d0
    5a9a:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    5a9e:	|  |  |  |   addq.l #1,36(sp)
    5aa2:	|  |  |  \-> move.l 36(sp),d0
    5aa6:	|  |  |      cmp.l 32(sp),d0
    5aaa:	|  |  \----- blt.w 59f4 <copyAnim+0xca>
    5aae:	|  |     /-- bra.s 5ab8 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    5ab0:	|  \-----|-> movea.l 16(sp),a0
    5ab4:	|        |   clr.l 4(a0)
	}

	return newAnim;
    5ab8:	|        \-> move.l 16(sp),d0
}
    5abc:	\----------> movea.l (sp)+,a6
    5abe:	             lea 36(sp),sp
    5ac2:	             rts

00005ac4 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    5ac4:	       subq.l #8,sp
    5ac6:	       move.l a6,-(sp)

	if (orig)
    5ac8:	       tst.l 16(sp)
    5acc:	/----- beq.s 5b0c <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    5ace:	|      movea.l 16(sp),a0
    5ad2:	|      move.l 8(a0),d0
    5ad6:	|  /-- beq.s 5af2 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    5ad8:	|  |   movea.l 16(sp),a0
    5adc:	|  |   move.l 4(a0),8(sp)
    5ae2:	|  |   move.l 17b28 <SysBase>,d0
    5ae8:	|  |   movea.l d0,a6
    5aea:	|  |   movea.l 8(sp),a1
    5aee:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    5af2:	|  \-> move.l 16(sp),4(sp)
    5af8:	|      move.l 17b28 <SysBase>,d0
    5afe:	|      movea.l d0,a6
    5b00:	|      movea.l 4(sp),a1
    5b04:	|      jsr -690(a6)
		orig = NULL;
    5b08:	|      clr.l 16(sp)
	}
}
    5b0c:	\----> nop
    5b0e:	       movea.l (sp)+,a6
    5b10:	       addq.l #8,sp
    5b12:	       rts

00005b14 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    5b14:	          lea -124(sp),sp
    5b18:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    5b1c:	          movea.l 152(sp),a0
    5b20:	          move.l 44(a0),d1
    5b24:	          movea.l 152(sp),a0
    5b28:	          move.l 48(a0),d0
    5b2c:	          cmp.l d1,d0
    5b2e:	      /-- bne.s 5b5e <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    5b30:	      |   movea.l 152(sp),a0
    5b34:	      |   moveq #-1,d0
    5b36:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    5b3a:	      |   movea.l 152(sp),a0
    5b3e:	      |   move.l 28(a0),d0
    5b42:	      |   movea.l 152(sp),a0
    5b46:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    5b4a:	      |   movea.l 152(sp),a0
    5b4e:	      |   move.l 32(a0),d0
    5b52:	      |   movea.l 152(sp),a0
    5b56:	      |   move.l d0,40(a0)
    5b5a:	   /--|-- bra.w 60c4 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    5b5e:	   |  \-> movea.l 17c22 <currentFloor>,a0
    5b64:	   |      move.l 16(a0),d1
    5b68:	   |      movea.l 152(sp),a0
    5b6c:	   |      move.l 44(a0),d0
    5b70:	   |      add.l d0,d0
    5b72:	   |      add.l d0,d0
    5b74:	   |      movea.l d1,a0
    5b76:	   |      adda.l d0,a0
    5b78:	   |      move.l (a0),d1
    5b7a:	   |      movea.l 152(sp),a0
    5b7e:	   |      move.l 48(a0),d0
    5b82:	   |      add.l d0,d0
    5b84:	   |      add.l d0,d0
    5b86:	   |      movea.l d1,a0
    5b88:	   |      adda.l d0,a0
    5b8a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    5b8e:	   |      moveq #-1,d0
    5b90:	   |      cmp.l 144(sp),d0
    5b94:	   |  /-- bne.s 5b9c <doBorderStuff+0x88>
    5b96:	   |  |   clr.w d0
    5b98:	/--|--|-- bra.w 61c4 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    5b9c:	|  |  \-> movea.l 17c22 <currentFloor>,a0
    5ba2:	|  |      move.l 12(a0),d1
    5ba6:	|  |      move.l 144(sp),d0
    5baa:	|  |      lsl.l #3,d0
    5bac:	|  |      add.l d0,d1
    5bae:	|  |      movea.l 17c22 <currentFloor>,a0
    5bb4:	|  |      movea.l 12(a0),a1
    5bb8:	|  |      movea.l 152(sp),a0
    5bbc:	|  |      move.l 44(a0),d0
    5bc0:	|  |      lsl.l #3,d0
    5bc2:	|  |      add.l a1,d0
    5bc4:	|  |      lea 40(sp),a0
    5bc8:	|  |      move.l a0,-(sp)
    5bca:	|  |      lea 48(sp),a0
    5bce:	|  |      move.l a0,-(sp)
    5bd0:	|  |      move.l d1,-(sp)
    5bd2:	|  |      move.l d0,-(sp)
    5bd4:	|  |      jsr 112ea <getMatchingCorners>
    5bda:	|  |      lea 16(sp),sp
    5bde:	|  |      tst.w d0
    5be0:	|  |  /-- bne.s 5bf6 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    5be2:	|  |  |   pea 14f80 <incbin_player_end+0x164>
    5be8:	|  |  |   jsr 12018 <KPrintF>
    5bee:	|  |  |   addq.l #4,sp
            return FALSE;
    5bf0:	|  |  |   clr.w d0
    5bf2:	+--|--|-- bra.w 61c4 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    5bf6:	|  |  \-> movea.l 152(sp),a0
    5bfa:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    5c00:	|  |      movea.l 152(sp),a0
    5c04:	|  |      move.l (a0),d0
    5c06:	|  |      move.l d0,-(sp)
    5c08:	|  |      jsr 12408 <__fixsfsi>
    5c0e:	|  |      addq.l #4,sp
    5c10:	|  |      move.l d0,140(sp)
    5c14:	|  |      movea.l 152(sp),a0
    5c18:	|  |      move.l 4(a0),d0
    5c1c:	|  |      move.l d0,-(sp)
    5c1e:	|  |      jsr 12408 <__fixsfsi>
    5c24:	|  |      addq.l #4,sp
    5c26:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    5c2a:	|  |      movea.l 152(sp),a0
    5c2e:	|  |      move.l 28(a0),132(sp)
    5c34:	|  |      movea.l 152(sp),a0
    5c38:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    5c3e:	|  |      movea.l 17c22 <currentFloor>,a0
    5c44:	|  |      move.l 4(a0),d1
    5c48:	|  |      move.l 44(sp),d0
    5c4c:	|  |      lsl.l #3,d0
    5c4e:	|  |      movea.l d1,a0
    5c50:	|  |      adda.l d0,a0
    5c52:	|  |      move.l (a0),124(sp)
    5c56:	|  |      movea.l 17c22 <currentFloor>,a0
    5c5c:	|  |      move.l 4(a0),d1
    5c60:	|  |      move.l 44(sp),d0
    5c64:	|  |      lsl.l #3,d0
    5c66:	|  |      movea.l d1,a0
    5c68:	|  |      adda.l d0,a0
    5c6a:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    5c70:	|  |      movea.l 17c22 <currentFloor>,a0
    5c76:	|  |      move.l 4(a0),d1
    5c7a:	|  |      move.l 40(sp),d0
    5c7e:	|  |      lsl.l #3,d0
    5c80:	|  |      movea.l d1,a0
    5c82:	|  |      adda.l d0,a0
    5c84:	|  |      move.l (a0),116(sp)
    5c88:	|  |      movea.l 17c22 <currentFloor>,a0
    5c8e:	|  |      move.l 4(a0),d1
    5c92:	|  |      move.l 40(sp),d0
    5c96:	|  |      lsl.l #3,d0
    5c98:	|  |      movea.l d1,a0
    5c9a:	|  |      adda.l d0,a0
    5c9c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    5ca2:	|  |      move.l 140(sp),d0
    5ca6:	|  |      sub.l 132(sp),d0
    5caa:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    5cae:	|  |      move.l 136(sp),d0
    5cb2:	|  |      sub.l 128(sp),d0
    5cb6:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    5cba:	|  |      move.l 116(sp),d0
    5cbe:	|  |      sub.l 124(sp),d0
    5cc2:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    5cc6:	|  |      move.l 112(sp),d0
    5cca:	|  |      sub.l 120(sp),d0
    5cce:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    5cd2:	|  |      move.l 124(sp),d0
    5cd6:	|  |      sub.l 140(sp),d0
    5cda:	|  |      move.l 104(sp),-(sp)
    5cde:	|  |      move.l d0,-(sp)
    5ce0:	|  |      jsr 129ca <__mulsi3>
    5ce6:	|  |      addq.l #8,sp
    5ce8:	|  |      move.l d0,d2
    5cea:	|  |      move.l 120(sp),d0
    5cee:	|  |      sub.l 136(sp),d0
    5cf2:	|  |      move.l 108(sp),-(sp)
    5cf6:	|  |      move.l d0,-(sp)
    5cf8:	|  |      jsr 129ca <__mulsi3>
    5cfe:	|  |      addq.l #8,sp
    5d00:	|  |      move.l d2,d1
    5d02:	|  |      sub.l d0,d1
    5d04:	|  |      move.l d1,-(sp)
    5d06:	|  |      jsr 12430 <__floatsidf>
    5d0c:	|  |      addq.l #4,sp
    5d0e:	|  |      move.l d0,32(sp)
    5d12:	|  |      move.l d1,36(sp)
    5d16:	|  |      move.l 32(sp),88(sp)
    5d1c:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    5d22:	|  |      move.l 96(sp),-(sp)
    5d26:	|  |      move.l 112(sp),-(sp)
    5d2a:	|  |      jsr 129ca <__mulsi3>
    5d30:	|  |      addq.l #8,sp
    5d32:	|  |      move.l d0,d2
    5d34:	|  |      move.l 100(sp),-(sp)
    5d38:	|  |      move.l 108(sp),-(sp)
    5d3c:	|  |      jsr 129ca <__mulsi3>
    5d42:	|  |      addq.l #8,sp
    5d44:	|  |      move.l d2,d1
    5d46:	|  |      sub.l d0,d1
    5d48:	|  |      move.l d1,-(sp)
    5d4a:	|  |      jsr 12430 <__floatsidf>
    5d50:	|  |      addq.l #4,sp
    5d52:	|  |      move.l d1,-(sp)
    5d54:	|  |      move.l d0,-(sp)
    5d56:	|  |      move.l 100(sp),-(sp)
    5d5a:	|  |      move.l 100(sp),-(sp)
    5d5e:	|  |      jsr 122ba <__divdf3>
    5d64:	|  |      lea 16(sp),sp
    5d68:	|  |      move.l d0,24(sp)
    5d6c:	|  |      move.l d1,28(sp)
    5d70:	|  |      move.l 24(sp),88(sp)
    5d76:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    5d7c:	|  |      clr.l -(sp)
    5d7e:	|  |      clr.l -(sp)
    5d80:	|  |      move.l 100(sp),-(sp)
    5d84:	|  |      move.l 100(sp),-(sp)
    5d88:	|  |      jsr 1258e <__gtdf2>
    5d8e:	|  |      lea 16(sp),sp
    5d92:	|  |      tst.l d0
    5d94:	|  |  /-- ble.w 5e6c <doBorderStuff+0x358>
    5d98:	|  |  |   clr.l -(sp)
    5d9a:	|  |  |   move.l #1072693248,-(sp)
    5da0:	|  |  |   move.l 100(sp),-(sp)
    5da4:	|  |  |   move.l 100(sp),-(sp)
    5da8:	|  |  |   jsr 12648 <__ltdf2>
    5dae:	|  |  |   lea 16(sp),sp
    5db2:	|  |  |   tst.l d0
    5db4:	|  |  +-- bge.w 5e6c <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    5db8:	|  |  |   move.l 124(sp),-(sp)
    5dbc:	|  |  |   jsr 12430 <__floatsidf>
    5dc2:	|  |  |   addq.l #4,sp
    5dc4:	|  |  |   move.l d0,d2
    5dc6:	|  |  |   move.l d1,d3
    5dc8:	|  |  |   move.l 100(sp),-(sp)
    5dcc:	|  |  |   jsr 12430 <__floatsidf>
    5dd2:	|  |  |   addq.l #4,sp
    5dd4:	|  |  |   move.l 92(sp),-(sp)
    5dd8:	|  |  |   move.l 92(sp),-(sp)
    5ddc:	|  |  |   move.l d1,-(sp)
    5dde:	|  |  |   move.l d0,-(sp)
    5de0:	|  |  |   jsr 124c0 <__muldf3>
    5de6:	|  |  |   lea 16(sp),sp
    5dea:	|  |  |   move.l d1,-(sp)
    5dec:	|  |  |   move.l d0,-(sp)
    5dee:	|  |  |   move.l d3,-(sp)
    5df0:	|  |  |   move.l d2,-(sp)
    5df2:	|  |  |   jsr 12258 <__adddf3>
    5df8:	|  |  |   lea 16(sp),sp
    5dfc:	|  |  |   move.l d1,-(sp)
    5dfe:	|  |  |   move.l d0,-(sp)
    5e00:	|  |  |   jsr 123c8 <__fixdfsi>
    5e06:	|  |  |   addq.l #8,sp
    5e08:	|  |  |   movea.l 152(sp),a0
    5e0c:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    5e10:	|  |  |   move.l 120(sp),-(sp)
    5e14:	|  |  |   jsr 12430 <__floatsidf>
    5e1a:	|  |  |   addq.l #4,sp
    5e1c:	|  |  |   move.l d0,d2
    5e1e:	|  |  |   move.l d1,d3
    5e20:	|  |  |   move.l 96(sp),-(sp)
    5e24:	|  |  |   jsr 12430 <__floatsidf>
    5e2a:	|  |  |   addq.l #4,sp
    5e2c:	|  |  |   move.l 92(sp),-(sp)
    5e30:	|  |  |   move.l 92(sp),-(sp)
    5e34:	|  |  |   move.l d1,-(sp)
    5e36:	|  |  |   move.l d0,-(sp)
    5e38:	|  |  |   jsr 124c0 <__muldf3>
    5e3e:	|  |  |   lea 16(sp),sp
    5e42:	|  |  |   move.l d1,-(sp)
    5e44:	|  |  |   move.l d0,-(sp)
    5e46:	|  |  |   move.l d3,-(sp)
    5e48:	|  |  |   move.l d2,-(sp)
    5e4a:	|  |  |   jsr 12258 <__adddf3>
    5e50:	|  |  |   lea 16(sp),sp
    5e54:	|  |  |   move.l d1,-(sp)
    5e56:	|  |  |   move.l d0,-(sp)
    5e58:	|  |  |   jsr 123c8 <__fixdfsi>
    5e5e:	|  |  |   addq.l #8,sp
    5e60:	|  |  |   movea.l 152(sp),a0
    5e64:	|  |  |   move.l d0,40(a0)
    5e68:	|  +--|-- bra.w 60c4 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    5e6c:	|  |  \-> move.l 140(sp),d0
    5e70:	|  |      sub.l 124(sp),d0
    5e74:	|  |      move.l d0,84(sp)
    5e78:	|  |      move.l 140(sp),d0
    5e7c:	|  |      sub.l 116(sp),d0
    5e80:	|  |      move.l d0,80(sp)
    5e84:	|  |      move.l 132(sp),d0
    5e88:	|  |      sub.l 124(sp),d0
    5e8c:	|  |      move.l d0,76(sp)
    5e90:	|  |      move.l 132(sp),d0
    5e94:	|  |      sub.l 116(sp),d0
    5e98:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    5e9c:	|  |      move.l 136(sp),d0
    5ea0:	|  |      sub.l 120(sp),d0
    5ea4:	|  |      move.l d0,68(sp)
    5ea8:	|  |      move.l 136(sp),d0
    5eac:	|  |      sub.l 112(sp),d0
    5eb0:	|  |      move.l d0,64(sp)
    5eb4:	|  |      move.l 128(sp),d0
    5eb8:	|  |      sub.l 120(sp),d0
    5ebc:	|  |      move.l d0,60(sp)
    5ec0:	|  |      move.l 128(sp),d0
    5ec4:	|  |      sub.l 112(sp),d0
    5ec8:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    5ecc:	|  |      move.l 84(sp),-(sp)
    5ed0:	|  |      move.l 88(sp),-(sp)
    5ed4:	|  |      jsr 129ca <__mulsi3>
    5eda:	|  |      addq.l #8,sp
    5edc:	|  |      move.l d0,84(sp)
    5ee0:	|  |      move.l 80(sp),-(sp)
    5ee4:	|  |      move.l 84(sp),-(sp)
    5ee8:	|  |      jsr 129ca <__mulsi3>
    5eee:	|  |      addq.l #8,sp
    5ef0:	|  |      move.l d0,80(sp)
    5ef4:	|  |      move.l 76(sp),-(sp)
    5ef8:	|  |      move.l 80(sp),-(sp)
    5efc:	|  |      jsr 129ca <__mulsi3>
    5f02:	|  |      addq.l #8,sp
    5f04:	|  |      move.l d0,76(sp)
    5f08:	|  |      move.l 72(sp),-(sp)
    5f0c:	|  |      move.l 76(sp),-(sp)
    5f10:	|  |      jsr 129ca <__mulsi3>
    5f16:	|  |      addq.l #8,sp
    5f18:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    5f1c:	|  |      move.l 68(sp),-(sp)
    5f20:	|  |      move.l 72(sp),-(sp)
    5f24:	|  |      jsr 129ca <__mulsi3>
    5f2a:	|  |      addq.l #8,sp
    5f2c:	|  |      move.l d0,68(sp)
    5f30:	|  |      move.l 64(sp),-(sp)
    5f34:	|  |      move.l 68(sp),-(sp)
    5f38:	|  |      jsr 129ca <__mulsi3>
    5f3e:	|  |      addq.l #8,sp
    5f40:	|  |      move.l d0,64(sp)
    5f44:	|  |      move.l 60(sp),-(sp)
    5f48:	|  |      move.l 64(sp),-(sp)
    5f4c:	|  |      jsr 129ca <__mulsi3>
    5f52:	|  |      addq.l #8,sp
    5f54:	|  |      move.l d0,60(sp)
    5f58:	|  |      move.l 56(sp),-(sp)
    5f5c:	|  |      move.l 60(sp),-(sp)
    5f60:	|  |      jsr 129ca <__mulsi3>
    5f66:	|  |      addq.l #8,sp
    5f68:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    5f6c:	|  |      move.l 84(sp),-(sp)
    5f70:	|  |      jsr 12430 <__floatsidf>
    5f76:	|  |      addq.l #4,sp
    5f78:	|  |      move.l d0,d2
    5f7a:	|  |      move.l d1,d3
    5f7c:	|  |      move.l 68(sp),-(sp)
    5f80:	|  |      jsr 12430 <__floatsidf>
    5f86:	|  |      addq.l #4,sp
    5f88:	|  |      move.l d1,-(sp)
    5f8a:	|  |      move.l d0,-(sp)
    5f8c:	|  |      move.l d3,-(sp)
    5f8e:	|  |      move.l d2,-(sp)
    5f90:	|  |      jsr 12258 <__adddf3>
    5f96:	|  |      lea 16(sp),sp
    5f9a:	|  |      move.l d1,-(sp)
    5f9c:	|  |      move.l d0,-(sp)
    5f9e:	|  |      jsr 12980 <sqrt>
    5fa4:	|  |      addq.l #8,sp
    5fa6:	|  |      move.l d0,d2
    5fa8:	|  |      move.l d1,d3
    5faa:	|  |      move.l 76(sp),-(sp)
    5fae:	|  |      jsr 12430 <__floatsidf>
    5fb4:	|  |      addq.l #4,sp
    5fb6:	|  |      move.l d0,d4
    5fb8:	|  |      move.l d1,d5
    5fba:	|  |      move.l 60(sp),-(sp)
    5fbe:	|  |      jsr 12430 <__floatsidf>
    5fc4:	|  |      addq.l #4,sp
    5fc6:	|  |      move.l d1,-(sp)
    5fc8:	|  |      move.l d0,-(sp)
    5fca:	|  |      move.l d5,-(sp)
    5fcc:	|  |      move.l d4,-(sp)
    5fce:	|  |      jsr 12258 <__adddf3>
    5fd4:	|  |      lea 16(sp),sp
    5fd8:	|  |      move.l d1,-(sp)
    5fda:	|  |      move.l d0,-(sp)
    5fdc:	|  |      jsr 12980 <sqrt>
    5fe2:	|  |      addq.l #8,sp
    5fe4:	|  |      move.l d1,-(sp)
    5fe6:	|  |      move.l d0,-(sp)
    5fe8:	|  |      move.l d3,-(sp)
    5fea:	|  |      move.l d2,-(sp)
    5fec:	|  |      jsr 12258 <__adddf3>
    5ff2:	|  |      lea 16(sp),sp
    5ff6:	|  |      move.l d0,d2
    5ff8:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    5ffa:	|  |      move.l 80(sp),-(sp)
    5ffe:	|  |      jsr 12430 <__floatsidf>
    6004:	|  |      addq.l #4,sp
    6006:	|  |      move.l d0,d4
    6008:	|  |      move.l d1,d5
    600a:	|  |      move.l 64(sp),-(sp)
    600e:	|  |      jsr 12430 <__floatsidf>
    6014:	|  |      addq.l #4,sp
    6016:	|  |      move.l d1,-(sp)
    6018:	|  |      move.l d0,-(sp)
    601a:	|  |      move.l d5,-(sp)
    601c:	|  |      move.l d4,-(sp)
    601e:	|  |      jsr 12258 <__adddf3>
    6024:	|  |      lea 16(sp),sp
    6028:	|  |      move.l d1,-(sp)
    602a:	|  |      move.l d0,-(sp)
    602c:	|  |      jsr 12980 <sqrt>
    6032:	|  |      addq.l #8,sp
    6034:	|  |      move.l d0,d4
    6036:	|  |      move.l d1,d5
    6038:	|  |      move.l 72(sp),-(sp)
    603c:	|  |      jsr 12430 <__floatsidf>
    6042:	|  |      addq.l #4,sp
    6044:	|  |      move.l d0,d6
    6046:	|  |      move.l d1,d7
    6048:	|  |      move.l 56(sp),-(sp)
    604c:	|  |      jsr 12430 <__floatsidf>
    6052:	|  |      addq.l #4,sp
    6054:	|  |      move.l d1,-(sp)
    6056:	|  |      move.l d0,-(sp)
    6058:	|  |      move.l d7,-(sp)
    605a:	|  |      move.l d6,-(sp)
    605c:	|  |      jsr 12258 <__adddf3>
    6062:	|  |      lea 16(sp),sp
    6066:	|  |      move.l d1,-(sp)
    6068:	|  |      move.l d0,-(sp)
    606a:	|  |      jsr 12980 <sqrt>
    6070:	|  |      addq.l #8,sp
    6072:	|  |      move.l d1,-(sp)
    6074:	|  |      move.l d0,-(sp)
    6076:	|  |      move.l d5,-(sp)
    6078:	|  |      move.l d4,-(sp)
    607a:	|  |      jsr 12258 <__adddf3>
    6080:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6084:	|  |      move.l d1,-(sp)
    6086:	|  |      move.l d0,-(sp)
    6088:	|  |      move.l d3,-(sp)
    608a:	|  |      move.l d2,-(sp)
    608c:	|  |      jsr 12648 <__ltdf2>
    6092:	|  |      lea 16(sp),sp
    6096:	|  |      tst.l d0
    6098:	|  |  /-- bge.s 60b0 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    609a:	|  |  |   movea.l 152(sp),a0
    609e:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    60a4:	|  |  |   movea.l 152(sp),a0
    60a8:	|  |  |   move.l 120(sp),40(a0)
    60ae:	|  +--|-- bra.s 60c4 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    60b0:	|  |  \-> movea.l 152(sp),a0
    60b4:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    60ba:	|  |      movea.l 152(sp),a0
    60be:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    60c4:	|  \----> movea.l 152(sp),a0
    60c8:	|         move.l 40(a0),d0
    60cc:	|         move.l d0,-(sp)
    60ce:	|         jsr 12470 <__floatsisf>
    60d4:	|         addq.l #4,sp
    60d6:	|         move.l d0,d1
    60d8:	|         movea.l 152(sp),a0
    60dc:	|         move.l 4(a0),d0
    60e0:	|         move.l d0,-(sp)
    60e2:	|         move.l d1,-(sp)
    60e4:	|         jsr 12764 <__subsf3>
    60ea:	|         addq.l #8,sp
    60ec:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    60f0:	|         movea.l 152(sp),a0
    60f4:	|         move.l (a0),d2
    60f6:	|         movea.l 152(sp),a0
    60fa:	|         move.l 36(a0),d0
    60fe:	|         move.l d0,-(sp)
    6100:	|         jsr 12470 <__floatsisf>
    6106:	|         addq.l #4,sp
    6108:	|         move.l d0,-(sp)
    610a:	|         move.l d2,-(sp)
    610c:	|         jsr 12764 <__subsf3>
    6112:	|         addq.l #8,sp
    6114:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6118:	|         clr.l -(sp)
    611a:	|         move.l 52(sp),-(sp)
    611e:	|         jsr 126cc <__nesf2>
    6124:	|         addq.l #8,sp
    6126:	|         tst.l d0
    6128:	|     /-- bne.s 613c <doBorderStuff+0x628>
    612a:	|     |   clr.l -(sp)
    612c:	|     |   move.l 56(sp),-(sp)
    6130:	|     |   jsr 126cc <__nesf2>
    6136:	|     |   addq.l #8,sp
    6138:	|     |   tst.l d0
    613a:	|  /--|-- beq.s 61b2 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    613c:	|  |  \-> move.l 52(sp),d0
    6140:	|  |      move.l d0,-(sp)
    6142:	|  |      move.l d0,-(sp)
    6144:	|  |      jsr 12222 <__addsf3>
    614a:	|  |      addq.l #8,sp
    614c:	|  |      move.l d0,-(sp)
    614e:	|  |      move.l 52(sp),-(sp)
    6152:	|  |      jsr 127d0 <atan2f>
    6158:	|  |      addq.l #8,sp
    615a:	|  |      move.l d0,-(sp)
    615c:	|  |      jsr 12388 <__extendsfdf2>
    6162:	|  |      addq.l #4,sp
    6164:	|  |      move.l #-1540411785,-(sp)
    616a:	|  |      move.l #1078765033,-(sp)
    6170:	|  |      move.l d1,-(sp)
    6172:	|  |      move.l d0,-(sp)
    6174:	|  |      jsr 124c0 <__muldf3>
    617a:	|  |      lea 16(sp),sp
    617e:	|  |      clr.l -(sp)
    6180:	|  |      move.l #1080459264,-(sp)
    6186:	|  |      move.l d1,-(sp)
    6188:	|  |      move.l d0,-(sp)
    618a:	|  |      jsr 12258 <__adddf3>
    6190:	|  |      lea 16(sp),sp
    6194:	|  |      move.l d1,-(sp)
    6196:	|  |      move.l d0,-(sp)
    6198:	|  |      jsr 123c8 <__fixdfsi>
    619e:	|  |      addq.l #8,sp
    61a0:	|  |      movea.l 152(sp),a0
    61a4:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    61a8:	|  |      movea.l 152(sp),a0
    61ac:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    61b2:	|  \----> pea 1 <_start+0x1>
    61b6:	|         move.l 156(sp),-(sp)
    61ba:	|         jsr 505e <setFrames>
    61c0:	|         addq.l #8,sp
    return TRUE;
    61c2:	|         moveq #1,d0
}
    61c4:	\-------> movem.l (sp)+,d2-d7
    61c8:	          lea 124(sp),sp
    61cc:	          rts

000061ce <findPerson>:


struct onScreenPerson * findPerson (int v) {
    61ce:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    61d0:	          move.l 17b76 <allPeople>,(sp)
	while (thisPerson) {
    61d6:	      /-- bra.s 61ee <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    61d8:	/-----|-> movea.l (sp),a0
    61da:	|     |   movea.l 102(a0),a0
    61de:	|     |   move.l 4(a0),d0
    61e2:	|     |   cmp.l 8(sp),d0
    61e6:	|  /--|-- beq.s 61f4 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    61e8:	|  |  |   movea.l (sp),a0
    61ea:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    61ee:	|  |  \-> tst.l (sp)
    61f0:	\--|----- bne.s 61d8 <findPerson+0xa>
    61f2:	   |  /-- bra.s 61f6 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    61f4:	   \--|-> nop
	}
	return thisPerson;
    61f6:	      \-> move.l (sp),d0
}
    61f8:	          addq.l #4,sp
    61fa:	          rts

000061fc <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    61fc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    61fe:	       move.l 12(sp),-(sp)
    6202:	       jsr 61ce <findPerson>
    6208:	       addq.l #4,sp
    620a:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    620c:	   /-- bne.s 6212 <floatCharacter+0x16>
    620e:	   |   clr.w d0
    6210:	/--|-- bra.s 621c <floatCharacter+0x20>
	moveMe -> floaty = f;
    6212:	|  \-> movea.l (sp),a0
    6214:	|      move.l 8(sp),12(a0)
	return TRUE;
    621a:	|      moveq #1,d0
}
    621c:	\----> addq.l #4,sp
    621e:	       rts

00006220 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6220:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    6222:	          tst.l 8(sp)
    6226:	      /-- bne.s 6234 <forceWalkingPerson+0x14>
    6228:	      |   tst.l 12(sp)
    622c:	      +-- bne.s 6234 <forceWalkingPerson+0x14>
    622e:	      |   clr.w d0
    6230:	/-----|-- bra.w 62c6 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6234:	|     \-> move.l 16(sp),-(sp)
    6238:	|         jsr 61ce <findPerson>
    623e:	|         addq.l #4,sp
    6240:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    6242:	|     /-- bne.s 6248 <forceWalkingPerson+0x28>
    6244:	|     |   clr.w d0
    6246:	+-----|-- bra.s 62c6 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6248:	|     \-> movea.l (sp),a0
    624a:	|         move.l 56(a0),d0
    624e:	|     /-- beq.s 6260 <forceWalkingPerson+0x40>
    6250:	|     |   movea.l (sp),a0
    6252:	|     |   move.l 56(a0),d0
    6256:	|     |   move.l d0,-(sp)
    6258:	|     |   jsr 1af4 <abortFunction>
    625e:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    6260:	|     \-> movea.l (sp),a0
    6262:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    6268:	|         movea.l (sp),a0
    626a:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    626e:	|         movea.l (sp),a0
    6270:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    6276:	|         movea.l (sp),a0
    6278:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    627e:	|         movea.l (sp),a0
    6280:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    6286:	|         movea.l (sp),a0
    6288:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    628c:	|         movea.l (sp),a0
    628e:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    6292:	|         move.l (sp),-(sp)
    6294:	|         jsr 5b14 <doBorderStuff>
    629a:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    629c:	|         pea 1 <_start+0x1>
    62a0:	|         move.l 4(sp),-(sp)
    62a4:	|         jsr 7950 <walkMe>
    62aa:	|         addq.l #8,sp
    62ac:	|         tst.w d0
    62ae:	|     /-- bne.s 62b8 <forceWalkingPerson+0x98>
    62b0:	|     |   movea.l (sp),a0
    62b2:	|     |   move.w 54(a0),d0
    62b6:	|  /--|-- beq.s 62c4 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    62b8:	|  |  \-> movea.l (sp),a0
    62ba:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    62c0:	|  |      moveq #1,d0
    62c2:	+--|----- bra.s 62c6 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    62c4:	|  \----> clr.w d0
    }
}
    62c6:	\-------> addq.l #4,sp
    62c8:	          rts

000062ca <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    62ca:	                lea -56(sp),sp
    62ce:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    62d0:	                move.l #320,56(sp)
    62d8:	                move.l #200,52(sp)
    62e0:	                moveq #-1,d0
    62e2:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    62e6:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    62ee:	                clr.l 44(sp)
    62f2:	   /----------- bra.w 64ca <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    62f6:	/--|----------> movea.l 17c22 <currentFloor>,a0
    62fc:	|  |            move.l 12(a0),d1
    6300:	|  |            move.l 44(sp),d0
    6304:	|  |            lsl.l #3,d0
    6306:	|  |            movea.l d1,a0
    6308:	|  |            adda.l d0,a0
    630a:	|  |            move.l (a0),d0
    630c:	|  |            move.l d0,d1
    630e:	|  |            subq.l #1,d1
    6310:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6314:	|  |            clr.l 40(sp)
    6318:	|  |     /----- bra.w 64a8 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    631c:	|  |  /--|----> movea.l 17c22 <currentFloor>,a0
    6322:	|  |  |  |      move.l 4(a0),d1
    6326:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    632c:	|  |  |  |      movea.l 12(a0),a0
    6330:	|  |  |  |      move.l 44(sp),d0
    6334:	|  |  |  |      lsl.l #3,d0
    6336:	|  |  |  |      adda.l d0,a0
    6338:	|  |  |  |      movea.l 4(a0),a0
    633c:	|  |  |  |      move.l 40(sp),d0
    6340:	|  |  |  |      add.l d0,d0
    6342:	|  |  |  |      add.l d0,d0
    6344:	|  |  |  |      adda.l d0,a0
    6346:	|  |  |  |      move.l (a0),d0
    6348:	|  |  |  |      lsl.l #3,d0
    634a:	|  |  |  |      movea.l d1,a0
    634c:	|  |  |  |      adda.l d0,a0
    634e:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    6352:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6358:	|  |  |  |      move.l 4(a0),d1
    635c:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6362:	|  |  |  |      movea.l 12(a0),a0
    6366:	|  |  |  |      move.l 44(sp),d0
    636a:	|  |  |  |      lsl.l #3,d0
    636c:	|  |  |  |      adda.l d0,a0
    636e:	|  |  |  |      movea.l 4(a0),a0
    6372:	|  |  |  |      move.l 40(sp),d0
    6376:	|  |  |  |      add.l d0,d0
    6378:	|  |  |  |      add.l d0,d0
    637a:	|  |  |  |      adda.l d0,a0
    637c:	|  |  |  |      move.l (a0),d0
    637e:	|  |  |  |      lsl.l #3,d0
    6380:	|  |  |  |      movea.l d1,a0
    6382:	|  |  |  |      adda.l d0,a0
    6384:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    638a:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6390:	|  |  |  |      move.l 4(a0),d1
    6394:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    639a:	|  |  |  |      movea.l 12(a0),a0
    639e:	|  |  |  |      move.l 44(sp),d0
    63a2:	|  |  |  |      lsl.l #3,d0
    63a4:	|  |  |  |      adda.l d0,a0
    63a6:	|  |  |  |      movea.l 4(a0),a0
    63aa:	|  |  |  |      move.l 36(sp),d0
    63ae:	|  |  |  |      add.l d0,d0
    63b0:	|  |  |  |      add.l d0,d0
    63b2:	|  |  |  |      adda.l d0,a0
    63b4:	|  |  |  |      move.l (a0),d0
    63b6:	|  |  |  |      lsl.l #3,d0
    63b8:	|  |  |  |      movea.l d1,a0
    63ba:	|  |  |  |      adda.l d0,a0
    63bc:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    63c0:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    63c6:	|  |  |  |      move.l 4(a0),d1
    63ca:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    63d0:	|  |  |  |      movea.l 12(a0),a0
    63d4:	|  |  |  |      move.l 44(sp),d0
    63d8:	|  |  |  |      lsl.l #3,d0
    63da:	|  |  |  |      adda.l d0,a0
    63dc:	|  |  |  |      movea.l 4(a0),a0
    63e0:	|  |  |  |      move.l 36(sp),d0
    63e4:	|  |  |  |      add.l d0,d0
    63e6:	|  |  |  |      add.l d0,d0
    63e8:	|  |  |  |      adda.l d0,a0
    63ea:	|  |  |  |      move.l (a0),d0
    63ec:	|  |  |  |      lsl.l #3,d0
    63ee:	|  |  |  |      movea.l d1,a0
    63f0:	|  |  |  |      adda.l d0,a0
    63f2:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    63f8:	|  |  |  |      movea.l 68(sp),a0
    63fc:	|  |  |  |      move.l (a0),d1
    63fe:	|  |  |  |      movea.l 64(sp),a0
    6402:	|  |  |  |      move.l (a0),d0
    6404:	|  |  |  |      move.l d1,-(sp)
    6406:	|  |  |  |      move.l d0,-(sp)
    6408:	|  |  |  |      move.l 24(sp),-(sp)
    640c:	|  |  |  |      move.l 32(sp),-(sp)
    6410:	|  |  |  |      move.l 40(sp),-(sp)
    6414:	|  |  |  |      move.l 48(sp),-(sp)
    6418:	|  |  |  |      lea 28(sp),a0
    641c:	|  |  |  |      move.l a0,-(sp)
    641e:	|  |  |  |      lea 36(sp),a0
    6422:	|  |  |  |      move.l a0,-(sp)
    6424:	|  |  |  |      jsr 10ec8 <closestPointOnLine>
    642a:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    642e:	|  |  |  |      movea.l 64(sp),a0
    6432:	|  |  |  |      move.l (a0),d0
    6434:	|  |  |  |      move.l 8(sp),d1
    6438:	|  |  |  |      move.l d0,d2
    643a:	|  |  |  |      sub.l d1,d2
    643c:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    6440:	|  |  |  |      movea.l 68(sp),a0
    6444:	|  |  |  |      move.l (a0),d0
    6446:	|  |  |  |      move.l 4(sp),d1
    644a:	|  |  |  |      move.l d0,d2
    644c:	|  |  |  |      sub.l d1,d2
    644e:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    6452:	|  |  |  |      move.l 28(sp),-(sp)
    6456:	|  |  |  |      move.l 32(sp),-(sp)
    645a:	|  |  |  |      jsr 129ca <__mulsi3>
    6460:	|  |  |  |      addq.l #8,sp
    6462:	|  |  |  |      move.l d0,d2
    6464:	|  |  |  |      move.l 24(sp),-(sp)
    6468:	|  |  |  |      move.l 28(sp),-(sp)
    646c:	|  |  |  |      jsr 129ca <__mulsi3>
    6472:	|  |  |  |      addq.l #8,sp
    6474:	|  |  |  |      move.l d2,d1
    6476:	|  |  |  |      add.l d0,d1
    6478:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    647c:	|  |  |  |      move.l 12(sp),d2
    6480:	|  |  |  |      cmp.l 32(sp),d2
    6484:	|  |  |  |  /-- bge.s 649e <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    6486:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    648c:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    6492:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6498:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    649e:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    64a4:	|  |  |  |      addq.l #1,40(sp)
    64a8:	|  |  |  \----> movea.l 17c22 <currentFloor>,a0
    64ae:	|  |  |         move.l 12(a0),d1
    64b2:	|  |  |         move.l 44(sp),d0
    64b6:	|  |  |         lsl.l #3,d0
    64b8:	|  |  |         movea.l d1,a0
    64ba:	|  |  |         adda.l d0,a0
    64bc:	|  |  |         move.l (a0),d0
    64be:	|  |  |         cmp.l 40(sp),d0
    64c2:	|  |  \-------- bgt.w 631c <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    64c6:	|  |            addq.l #1,44(sp)
    64ca:	|  \----------> movea.l 17c22 <currentFloor>,a0
    64d0:	|               move.l 8(a0),d0
    64d4:	|               cmp.l 44(sp),d0
    64d8:	\-------------- bgt.w 62f6 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    64dc:	                moveq #-1,d0
    64de:	                cmp.l 48(sp),d0
    64e2:	            /-- bne.s 64e8 <handleClosestPoint+0x21e>
    64e4:	            |   clr.w d0
    64e6:	         /--|-- bra.s 6502 <handleClosestPoint+0x238>
	*setX = gotX;
    64e8:	         |  \-> movea.l 64(sp),a0
    64ec:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    64f0:	         |      movea.l 68(sp),a0
    64f4:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    64f8:	         |      movea.l 72(sp),a0
    64fc:	         |      move.l 48(sp),(a0)

	return TRUE;
    6500:	         |      moveq #1,d0
}
    6502:	         \----> move.l (sp)+,d2
    6504:	                lea 56(sp),sp
    6508:	                rts

0000650a <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    650a:	clr.l 17b8a <personRegion+0x10>
	personRegion.sY = 0;
    6510:	clr.l 17b8e <personRegion+0x14>
	personRegion.di = -1;
    6516:	moveq #-1,d0
    6518:	move.l d0,17b92 <personRegion+0x18>
	allScreenRegions = NULL;
    651e:	clr.l 17c1a <allScreenRegions>

	return TRUE;
    6524:	moveq #1,d0
}
    6526:	rts

00006528 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6528:	          subq.l #4,sp
    652a:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    652c:	          tst.l 12(sp)
    6530:	      /-- bne.s 6538 <jumpPerson+0x10>
    6532:	      |   tst.l 16(sp)
    6536:	/-----|-- beq.s 65ac <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6538:	|     \-> move.l 20(sp),-(sp)
    653c:	|         jsr 61ce <findPerson>
    6542:	|         addq.l #4,sp
    6544:	|         move.l d0,4(sp)
    if (!moveMe) return;
    6548:	|  /----- beq.s 65b0 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    654a:	|  |      movea.l 4(sp),a0
    654e:	|  |      move.l 56(a0),d0
    6552:	|  |  /-- beq.s 6566 <jumpPerson+0x3e>
    6554:	|  |  |   movea.l 4(sp),a0
    6558:	|  |  |   move.l 56(a0),d0
    655c:	|  |  |   move.l d0,-(sp)
    655e:	|  |  |   jsr 1af4 <abortFunction>
    6564:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    6566:	|  |  \-> movea.l 4(sp),a0
    656a:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    656e:	|  |      movea.l 4(sp),a0
    6572:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    6576:	|  |      movea.l 4(sp),a0
    657a:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    657e:	|  |      move.l 16(sp),-(sp)
    6582:	|  |      jsr 12470 <__floatsisf>
    6588:	|  |      addq.l #4,sp
    658a:	|  |      move.l d0,d2
    658c:	|  |      move.l 12(sp),-(sp)
    6590:	|  |      jsr 12470 <__floatsisf>
    6596:	|  |      addq.l #4,sp
    6598:	|  |      move.l d2,-(sp)
    659a:	|  |      move.l d0,-(sp)
    659c:	|  |      move.l 12(sp),-(sp)
    65a0:	|  |      jsr 6916 <moveAndScale>
    65a6:	|  |      lea 12(sp),sp
    65aa:	|  |  /-- bra.s 65b2 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    65ac:	\--|--|-> nop
    65ae:	   |  +-- bra.s 65b2 <jumpPerson+0x8a>
    if (!moveMe) return;
    65b0:	   \--|-> nop
}
    65b2:	      \-> move.l (sp)+,d2
    65b4:	          addq.l #4,sp
    65b6:	          rts

000065b8 <killAllPeople>:


void killAllPeople () {
    65b8:	          subq.l #8,sp
    65ba:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    65bc:	   /----- bra.s 6628 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    65be:	/--|----> movea.l 17b76 <allPeople>,a0
    65c4:	|  |      move.l 56(a0),d0
    65c8:	|  |  /-- beq.s 65de <killAllPeople+0x26>
    65ca:	|  |  |   movea.l 17b76 <allPeople>,a0
    65d0:	|  |  |   move.l 56(a0),d0
    65d4:	|  |  |   move.l d0,-(sp)
    65d6:	|  |  |   jsr 1af4 <abortFunction>
    65dc:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    65de:	|  |  \-> movea.l 17b76 <allPeople>,a0
    65e4:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    65e8:	|  |      move.l 17b76 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    65f0:	|  |      movea.l 17b76 <allPeople>,a0
    65f6:	|  |      move.l 24(a0),d0
    65fa:	|  |      move.l d0,17b76 <allPeople>
		removeObjectType (killPeople -> thisType);
    6600:	|  |      movea.l 8(sp),a0
    6604:	|  |      move.l 102(a0),d0
    6608:	|  |      move.l d0,-(sp)
    660a:	|  |      jsr 913e <removeObjectType>
    6610:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    6612:	|  |      move.l 8(sp),4(sp)
    6618:	|  |      move.l 17b28 <SysBase>,d0
    661e:	|  |      movea.l d0,a6
    6620:	|  |      movea.l 4(sp),a1
    6624:	|  |      jsr -690(a6)
	while (allPeople) {
    6628:	|  \----> move.l 17b76 <allPeople>,d0
    662e:	\-------- bne.s 65be <killAllPeople+0x6>
	}
}
    6630:	          nop
    6632:	          nop
    6634:	          movea.l (sp)+,a6
    6636:	          addq.l #8,sp
    6638:	          rts

0000663a <killMostPeople>:

void killMostPeople() {
    663a:	          lea -12(sp),sp
    663e:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    6640:	          move.l #97142,12(sp)

    while (*lookyHere) {
    6648:	   /----- bra.w 66ce <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    664c:	/--|----> movea.l 12(sp),a0
    6650:	|  |      movea.l (a0),a0
    6652:	|  |      move.l 106(a0),d0
    6656:	|  |      moveq #32,d1
    6658:	|  |      and.l d1,d0
    665a:	|  |  /-- beq.s 666c <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    665c:	|  |  |   movea.l 12(sp),a0
    6660:	|  |  |   move.l (a0),d0
    6662:	|  |  |   moveq #24,d1
    6664:	|  |  |   add.l d0,d1
    6666:	|  |  |   move.l d1,12(sp)
    666a:	|  +--|-- bra.s 66ce <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    666c:	|  |  \-> movea.l 12(sp),a0
    6670:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    6674:	|  |      movea.l 8(sp),a0
    6678:	|  |      move.l 24(a0),d0
    667c:	|  |      movea.l 12(sp),a0
    6680:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    6682:	|  |      movea.l 8(sp),a0
    6686:	|  |      move.l 56(a0),d0
    668a:	|  |  /-- beq.s 669e <killMostPeople+0x64>
    668c:	|  |  |   movea.l 8(sp),a0
    6690:	|  |  |   move.l 56(a0),d0
    6694:	|  |  |   move.l d0,-(sp)
    6696:	|  |  |   jsr 1af4 <abortFunction>
    669c:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    669e:	|  |  \-> movea.l 8(sp),a0
    66a2:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    66a6:	|  |      movea.l 8(sp),a0
    66aa:	|  |      move.l 102(a0),d0
    66ae:	|  |      move.l d0,-(sp)
    66b0:	|  |      jsr 913e <removeObjectType>
    66b6:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    66b8:	|  |      move.l 8(sp),4(sp)
    66be:	|  |      move.l 17b28 <SysBase>,d0
    66c4:	|  |      movea.l d0,a6
    66c6:	|  |      movea.l 4(sp),a1
    66ca:	|  |      jsr -690(a6)
    while (*lookyHere) {
    66ce:	|  \----> movea.l 12(sp),a0
    66d2:	|         move.l (a0),d0
    66d4:	\-------- bne.w 664c <killMostPeople+0x12>
        }
    }
}
    66d8:	          nop
    66da:	          nop
    66dc:	          movea.l (sp)+,a6
    66de:	          lea 12(sp),sp
    66e2:	          rts

000066e4 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    66e4:	clr.l -(sp)
    66e6:	move.l sp,d0
    66e8:	addq.l #8,d0
    66ea:	move.l d0,-(sp)
    66ec:	jsr 505e <setFrames>
    66f2:	addq.l #8,sp
}
    66f4:	nop
    66f6:	rts

000066f8 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    66f8:	          lea -12(sp),sp
    66fc:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    66fe:	          tst.l 20(sp)
    6702:	      /-- bne.s 6710 <makeWalkingPerson+0x18>
    6704:	      |   tst.l 24(sp)
    6708:	      +-- bne.s 6710 <makeWalkingPerson+0x18>
    670a:	      |   clr.w d0
    670c:	/-----|-- bra.w 68a8 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    6710:	|     \-> movea.l 17c22 <currentFloor>,a0
    6716:	|         move.l 8(a0),d0
    671a:	|     /-- bne.s 6722 <makeWalkingPerson+0x2a>
    671c:	|     |   clr.w d0
    671e:	+-----|-- bra.w 68a8 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    6722:	|     \-> move.l 28(sp),-(sp)
    6726:	|         jsr 61ce <findPerson>
    672c:	|         addq.l #4,sp
    672e:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    6732:	|     /-- bne.s 673a <makeWalkingPerson+0x42>
    6734:	|     |   clr.w d0
    6736:	+-----|-- bra.w 68a8 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    673a:	|     \-> movea.l 12(sp),a0
    673e:	|         move.l 56(a0),d0
    6742:	|     /-- beq.s 6756 <makeWalkingPerson+0x5e>
    6744:	|     |   movea.l 12(sp),a0
    6748:	|     |   move.l 56(a0),d0
    674c:	|     |   move.l d0,-(sp)
    674e:	|     |   jsr 1af4 <abortFunction>
    6754:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    6756:	|     \-> movea.l 12(sp),a0
    675a:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    675e:	|         movea.l 12(sp),a0
    6762:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    6768:	|         movea.l 12(sp),a0
    676c:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    6772:	|         movea.l 12(sp),a0
    6776:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    677c:	|         movea.l 12(sp),a0
    6780:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    6786:	|         move.l 24(sp),-(sp)
    678a:	|         move.l 24(sp),-(sp)
    678e:	|         jsr 113ca <inFloor>
    6794:	|         addq.l #8,sp
    6796:	|         movea.l 12(sp),a0
    679a:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    679e:	|         movea.l 12(sp),a0
    67a2:	|         move.l 48(a0),d0
    67a6:	|         moveq #-1,d1
    67a8:	|         cmp.l d0,d1
    67aa:	|     /-- bne.s 67da <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    67ac:	|     |   movea.w #48,a0
    67b0:	|     |   adda.l 12(sp),a0
    67b4:	|     |   moveq #32,d1
    67b6:	|     |   add.l 12(sp),d1
    67ba:	|     |   moveq #28,d0
    67bc:	|     |   add.l 12(sp),d0
    67c0:	|     |   move.l a0,-(sp)
    67c2:	|     |   move.l d1,-(sp)
    67c4:	|     |   move.l d0,-(sp)
    67c6:	|     |   jsr 62ca <handleClosestPoint>
    67cc:	|     |   lea 12(sp),sp
    67d0:	|     |   tst.w d0
    67d2:	|     +-- bne.s 67da <makeWalkingPerson+0xe2>
    67d4:	|     |   clr.w d0
    67d6:	+-----|-- bra.w 68a8 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    67da:	|     \-> movea.l 12(sp),a0
    67de:	|         move.l 4(a0),d0
    67e2:	|         move.l d0,-(sp)
    67e4:	|         jsr 12408 <__fixsfsi>
    67ea:	|         addq.l #4,sp
    67ec:	|         move.l d0,d2
    67ee:	|         movea.l 12(sp),a0
    67f2:	|         move.l (a0),d0
    67f4:	|         move.l d0,-(sp)
    67f6:	|         jsr 12408 <__fixsfsi>
    67fc:	|         addq.l #4,sp
    67fe:	|         move.l d2,-(sp)
    6800:	|         move.l d0,-(sp)
    6802:	|         jsr 113ca <inFloor>
    6808:	|         addq.l #8,sp
    680a:	|         movea.l 12(sp),a0
    680e:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    6812:	|         movea.l 12(sp),a0
    6816:	|         move.l 44(a0),d0
    681a:	|         moveq #-1,d1
    681c:	|         cmp.l d0,d1
    681e:	|     /-- bne.s 6870 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    6820:	|     |   movea.l 12(sp),a0
    6824:	|     |   move.l (a0),d0
    6826:	|     |   move.l d0,-(sp)
    6828:	|     |   jsr 12408 <__fixsfsi>
    682e:	|     |   addq.l #4,sp
    6830:	|     |   move.l d0,8(sp)
    6834:	|     |   movea.l 12(sp),a0
    6838:	|     |   move.l 4(a0),d0
    683c:	|     |   move.l d0,-(sp)
    683e:	|     |   jsr 12408 <__fixsfsi>
    6844:	|     |   addq.l #4,sp
    6846:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    684a:	|     |   moveq #44,d0
    684c:	|     |   add.l 12(sp),d0
    6850:	|     |   move.l d0,-(sp)
    6852:	|     |   lea 8(sp),a0
    6856:	|     |   move.l a0,-(sp)
    6858:	|     |   moveq #16,d0
    685a:	|     |   add.l sp,d0
    685c:	|     |   move.l d0,-(sp)
    685e:	|     |   jsr 62ca <handleClosestPoint>
    6864:	|     |   lea 12(sp),sp
    6868:	|     |   tst.w d0
    686a:	|     +-- bne.s 6870 <makeWalkingPerson+0x178>
    686c:	|     |   clr.w d0
    686e:	+-----|-- bra.s 68a8 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    6870:	|     \-> move.l 12(sp),-(sp)
    6874:	|         jsr 5b14 <doBorderStuff>
    687a:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    687c:	|         clr.l -(sp)
    687e:	|         move.l 16(sp),-(sp)
    6882:	|         jsr 7950 <walkMe>
    6888:	|         addq.l #8,sp
    688a:	|         tst.w d0
    688c:	|     /-- bne.s 6898 <makeWalkingPerson+0x1a0>
    688e:	|     |   movea.l 12(sp),a0
    6892:	|     |   move.w 54(a0),d0
    6896:	|  /--|-- beq.s 68a6 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    6898:	|  |  \-> movea.l 12(sp),a0
    689c:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    68a2:	|  |      moveq #1,d0
    68a4:	+--|----- bra.s 68a8 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    68a6:	|  \----> clr.w d0
	}
}
    68a8:	\-------> move.l (sp)+,d2
    68aa:	          lea 12(sp),sp
    68ae:	          rts

000068b0 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    68b0:	       lea -16(sp),sp
    68b4:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    68b6:	       moveq #12,d0
    68b8:	       move.l d0,16(sp)
    68bc:	       clr.l 12(sp)
    68c0:	       move.l 17b28 <SysBase>,d0
    68c6:	       movea.l d0,a6
    68c8:	       move.l 16(sp),d0
    68cc:	       move.l 12(sp),d1
    68d0:	       jsr -684(a6)
    68d4:	       move.l d0,8(sp)
    68d8:	       move.l 8(sp),d0
    68dc:	       move.l d0,4(sp)
    if(newAnim == 0) {
    68e0:	   /-- bne.s 68f4 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    68e2:	   |   pea 15000 <incbin_player_end+0x1e4>
    68e8:	   |   jsr 12018 <KPrintF>
    68ee:	   |   addq.l #4,sp
        return NULL;    
    68f0:	   |   moveq #0,d0
    68f2:	/--|-- bra.s 690e <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    68f4:	|  \-> movea.l 4(sp),a0
    68f8:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    68fa:	|      movea.l 4(sp),a0
    68fe:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    6902:	|      movea.l 4(sp),a0
    6906:	|      clr.l 4(a0)
	return newAnim;
    690a:	|      move.l 4(sp),d0
}
    690e:	\----> movea.l (sp)+,a6
    6910:	       lea 16(sp),sp
    6914:	       rts

00006916 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    6916:	    move.l d2,-(sp)
	me->x = x;
    6918:	    movea.l 8(sp),a0
    691c:	    move.l 12(sp),(a0)
	me->y = y;
    6920:	    movea.l 8(sp),a0
    6924:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    692a:	    movea.l 8(sp),a0
    692e:	    move.l 106(a0),d0
    6932:	    moveq #2,d1
    6934:	    and.l d1,d0
    6936:	/-- bne.s 698e <moveAndScale+0x78>
    6938:	|   move.w 16028 <scaleDivide>,d0
    693e:	+-- beq.s 698e <moveAndScale+0x78>
    6940:	|   movea.l 8(sp),a0
    6944:	|   move.l 4(a0),d2
    6948:	|   move.w 16026 <scaleHorizon>,d0
    694e:	|   movea.w d0,a0
    6950:	|   move.l a0,-(sp)
    6952:	|   jsr 12470 <__floatsisf>
    6958:	|   addq.l #4,sp
    695a:	|   move.l d0,-(sp)
    695c:	|   move.l d2,-(sp)
    695e:	|   jsr 12764 <__subsf3>
    6964:	|   addq.l #8,sp
    6966:	|   move.l d0,d2
    6968:	|   move.w 16028 <scaleDivide>,d0
    696e:	|   movea.w d0,a0
    6970:	|   move.l a0,-(sp)
    6972:	|   jsr 12470 <__floatsisf>
    6978:	|   addq.l #4,sp
    697a:	|   move.l d0,-(sp)
    697c:	|   move.l d2,-(sp)
    697e:	|   jsr 1231c <__divsf3>
    6984:	|   addq.l #8,sp
    6986:	|   movea.l 8(sp),a0
    698a:	|   move.l d0,20(a0)
}
    698e:	\-> nop
    6990:	    move.l (sp)+,d2
    6992:	    rts

00006994 <removeOneCharacter>:

void removeOneCharacter (int i) {
    6994:	          lea -12(sp),sp
    6998:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    699a:	          move.l 20(sp),-(sp)
    699e:	          jsr 61ce <findPerson>
    69a4:	          addq.l #4,sp
    69a6:	          move.l d0,8(sp)

    if (p) {
    69aa:	/-------- beq.w 6a56 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    69ae:	|         move.l 17c1e <overRegion>,d0
    69b4:	|         cmpi.l #97146,d0
    69ba:	|     /-- bne.s 69d8 <removeOneCharacter+0x44>
    69bc:	|     |   movea.l 17c1e <overRegion>,a0
    69c2:	|     |   move.l 28(a0),d1
    69c6:	|     |   movea.l 8(sp),a0
    69ca:	|     |   move.l 102(a0),d0
    69ce:	|     |   cmp.l d1,d0
    69d0:	|     +-- bne.s 69d8 <removeOneCharacter+0x44>
            overRegion = NULL;
    69d2:	|     |   clr.l 17c1e <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    69d8:	|     \-> movea.l 8(sp),a0
    69dc:	|         move.l 56(a0),d0
    69e0:	|     /-- beq.s 69f4 <removeOneCharacter+0x60>
    69e2:	|     |   movea.l 8(sp),a0
    69e6:	|     |   move.l 56(a0),d0
    69ea:	|     |   move.l d0,-(sp)
    69ec:	|     |   jsr 1af4 <abortFunction>
    69f2:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    69f4:	|     \-> movea.l 8(sp),a0
    69f8:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    69fc:	|         move.l #97142,12(sp)
    6a04:	|     /-- bra.s 6a14 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    6a06:	|  /--|-> movea.l 12(sp),a0
    6a0a:	|  |  |   move.l (a0),d0
    6a0c:	|  |  |   moveq #24,d1
    6a0e:	|  |  |   add.l d0,d1
    6a10:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    6a14:	|  |  \-> movea.l 12(sp),a0
    6a18:	|  |      move.l (a0),d0
    6a1a:	|  |      cmp.l 8(sp),d0
    6a1e:	|  \----- bne.s 6a06 <removeOneCharacter+0x72>

        *killPeople = p->next;
    6a20:	|         movea.l 8(sp),a0
    6a24:	|         move.l 24(a0),d0
    6a28:	|         movea.l 12(sp),a0
    6a2c:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    6a2e:	|         movea.l 8(sp),a0
    6a32:	|         move.l 102(a0),d0
    6a36:	|         move.l d0,-(sp)
    6a38:	|         jsr 913e <removeObjectType>
    6a3e:	|         addq.l #4,sp
        FreeVec(p);
    6a40:	|         move.l 8(sp),4(sp)
    6a46:	|         move.l 17b28 <SysBase>,d0
    6a4c:	|         movea.l d0,a6
    6a4e:	|         movea.l 4(sp),a1
    6a52:	|         jsr -690(a6)
    }
}
    6a56:	\-------> nop
    6a58:	          movea.l (sp)+,a6
    6a5a:	          lea 12(sp),sp
    6a5e:	          rts

00006a60 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    6a60:	       subq.l #8,sp
    6a62:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    6a64:	       movea.l 16(sp),a0
    6a68:	       movea.l 68(a0),a0
    6a6c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    6a72:	       movea.l 16(sp),a0
    6a76:	       move.l 80(a0),d2
    6a7a:	       move.l 4(sp),-(sp)
    6a7e:	       pea b4 <_start+0xb4>
    6a82:	       jsr 12a48 <__divsi3>
    6a88:	       addq.l #8,sp
    6a8a:	       add.l d2,d0
    6a8c:	       move.l d0,d1
    6a8e:	       addi.l #180,d1
    6a94:	       movea.l 16(sp),a0
    6a98:	       move.l 88(a0),d0
    6a9c:	       move.l d1,d2
    6a9e:	       add.l d0,d2
    6aa0:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    6aa4:	   /-- bra.s 6aae <rethinkAngle+0x4e>
    6aa6:	/--|-> addi.l #-360,8(sp)
    6aae:	|  \-> cmpi.l #359,8(sp)
    6ab6:	\----- bgt.s 6aa6 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    6ab8:	       move.l 4(sp),-(sp)
    6abc:	       move.l 12(sp),-(sp)
    6ac0:	       jsr 129ca <__mulsi3>
    6ac6:	       addq.l #8,sp
    6ac8:	       pea 168 <decodeFilename+0x50>
    6acc:	       move.l d0,-(sp)
    6ace:	       jsr 12a48 <__divsi3>
    6ad4:	       addq.l #8,sp
    6ad6:	       movea.l 16(sp),a0
    6ada:	       move.l d0,94(a0)
}
    6ade:	       nop
    6ae0:	       move.l (sp)+,d2
    6ae2:	       addq.l #8,sp
    6ae4:	       rts

00006ae6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    6ae6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    6ae8:	          movea.l 8(sp),a0
    6aec:	          move.l 8(a0),d0
    6af0:	          move.l 12(sp),-(sp)
    6af4:	          move.l d0,-(sp)
    6af6:	          jsr 8d0 <put2bytes>
    6afc:	          addq.l #8,sp
	if (p -> numFrames) {
    6afe:	          movea.l 8(sp),a0
    6b02:	          move.l 8(a0),d0
    6b06:	/-------- beq.w 6baa <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    6b0a:	|         movea.l 8(sp),a0
    6b0e:	|         movea.l (a0),a0
    6b10:	|         move.l (a0),d0
    6b12:	|         move.l 12(sp),-(sp)
    6b16:	|         move.l d0,-(sp)
    6b18:	|         jsr 958 <put4bytes>
    6b1e:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    6b20:	|         clr.l (sp)
    6b22:	|     /-- bra.s 6b9c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    6b24:	|  /--|-> movea.l 8(sp),a0
    6b28:	|  |  |   movea.l 4(a0),a0
    6b2c:	|  |  |   move.l (sp),d1
    6b2e:	|  |  |   move.l d1,d0
    6b30:	|  |  |   add.l d0,d0
    6b32:	|  |  |   add.l d1,d0
    6b34:	|  |  |   add.l d0,d0
    6b36:	|  |  |   add.l d0,d0
    6b38:	|  |  |   adda.l d0,a0
    6b3a:	|  |  |   move.l (a0),d0
    6b3c:	|  |  |   move.l 12(sp),-(sp)
    6b40:	|  |  |   move.l d0,-(sp)
    6b42:	|  |  |   jsr 958 <put4bytes>
    6b48:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    6b4a:	|  |  |   movea.l 8(sp),a0
    6b4e:	|  |  |   movea.l 4(a0),a0
    6b52:	|  |  |   move.l (sp),d1
    6b54:	|  |  |   move.l d1,d0
    6b56:	|  |  |   add.l d0,d0
    6b58:	|  |  |   add.l d1,d0
    6b5a:	|  |  |   add.l d0,d0
    6b5c:	|  |  |   add.l d0,d0
    6b5e:	|  |  |   adda.l d0,a0
    6b60:	|  |  |   move.l 4(a0),d0
    6b64:	|  |  |   move.l 12(sp),-(sp)
    6b68:	|  |  |   move.l d0,-(sp)
    6b6a:	|  |  |   jsr 958 <put4bytes>
    6b70:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    6b72:	|  |  |   movea.l 8(sp),a0
    6b76:	|  |  |   movea.l 4(a0),a0
    6b7a:	|  |  |   move.l (sp),d1
    6b7c:	|  |  |   move.l d1,d0
    6b7e:	|  |  |   add.l d0,d0
    6b80:	|  |  |   add.l d1,d0
    6b82:	|  |  |   add.l d0,d0
    6b84:	|  |  |   add.l d0,d0
    6b86:	|  |  |   adda.l d0,a0
    6b88:	|  |  |   move.l 8(a0),d0
    6b8c:	|  |  |   move.l 12(sp),-(sp)
    6b90:	|  |  |   move.l d0,-(sp)
    6b92:	|  |  |   jsr 958 <put4bytes>
    6b98:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    6b9a:	|  |  |   addq.l #1,(sp)
    6b9c:	|  |  \-> movea.l 8(sp),a0
    6ba0:	|  |      move.l 8(a0),d0
    6ba4:	|  |      cmp.l (sp),d0
    6ba6:	|  \----- bgt.w 6b24 <saveAnim+0x3e>
		}
	}
	return TRUE;
    6baa:	\-------> moveq #1,d0
}
    6bac:	          addq.l #4,sp
    6bae:	          rts

00006bb0 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    6bb0:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    6bb2:	             movea.l 8(sp),a0
    6bb6:	             move.l 4(a0),d0
    6bba:	             move.l 12(sp),-(sp)
    6bbe:	             move.l d0,-(sp)
    6bc0:	             jsr 8d0 <put2bytes>
    6bc6:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6bc8:	             clr.l (sp)
    6bca:	   /-------- bra.s 6bf6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    6bcc:	/--|-------> movea.l 8(sp),a0
    6bd0:	|  |         move.l (a0),d1
    6bd2:	|  |         move.l (sp),d0
    6bd4:	|  |         add.l d0,d0
    6bd6:	|  |         add.l d0,d0
    6bd8:	|  |         movea.l d1,a0
    6bda:	|  |         adda.l d0,a0
    6bdc:	|  |         move.l (a0),d0
    6bde:	|  |         move.l 12(sp),-(sp)
    6be2:	|  |         move.l d0,-(sp)
    6be4:	|  |         jsr 6ae6 <saveAnim>
    6bea:	|  |         addq.l #8,sp
    6bec:	|  |         tst.w d0
    6bee:	|  |     /-- bne.s 6bf4 <saveCostume+0x44>
    6bf0:	|  |     |   clr.w d0
    6bf2:	|  |  /--|-- bra.s 6c0a <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6bf4:	|  |  |  \-> addq.l #1,(sp)
    6bf6:	|  \--|----> movea.l 8(sp),a0
    6bfa:	|     |      move.l 4(a0),d1
    6bfe:	|     |      move.l d1,d0
    6c00:	|     |      add.l d0,d0
    6c02:	|     |      add.l d1,d0
    6c04:	|     |      cmp.l (sp),d0
    6c06:	\-----|----- bgt.s 6bcc <saveCostume+0x1c>
	}

	return TRUE;
    6c08:	      |      moveq #1,d0
}
    6c0a:	      \----> addq.l #4,sp
    6c0c:	             rts

00006c0e <savePeople>:

BOOL savePeople (BPTR fp) {
    6c0e:	             lea -144(sp),sp
    6c12:	             move.l a6,-(sp)
    6c14:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    6c16:	             move.l 17b76 <allPeople>,148(sp)
	int countPeople = 0, a;
    6c1e:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    6c22:	             move.w 16026 <scaleHorizon>,d0
    6c28:	             movea.w d0,a0
    6c2a:	             move.l 156(sp),-(sp)
    6c2e:	             move.l a0,-(sp)
    6c30:	             jsr a9c <putSigned>
    6c36:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    6c38:	             move.w 16028 <scaleDivide>,d0
    6c3e:	             movea.w d0,a0
    6c40:	             move.l 156(sp),-(sp)
    6c44:	             move.l a0,-(sp)
    6c46:	             jsr a9c <putSigned>
    6c4c:	             addq.l #8,sp

	while (me) {
    6c4e:	         /-- bra.s 6c5e <savePeople+0x50>
		countPeople ++;
    6c50:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    6c54:	      |  |   movea.l 148(sp),a0
    6c58:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    6c5e:	      |  \-> tst.l 148(sp)
    6c62:	      \----- bne.s 6c50 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    6c64:	             move.l 156(sp),-(sp)
    6c68:	             move.l 148(sp),-(sp)
    6c6c:	             jsr 8d0 <put2bytes>
    6c72:	             addq.l #8,sp

	me = allPeople;
    6c74:	             move.l 17b76 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    6c7c:	             clr.l 140(sp)
    6c80:	   /-------- bra.w 70d8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    6c84:	/--|-------> movea.l 148(sp),a0
    6c88:	|  |         move.l (a0),d0
    6c8a:	|  |         move.l 156(sp),-(sp)
    6c8e:	|  |         move.l d0,-(sp)
    6c90:	|  |         jsr a46 <putFloat>
    6c96:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    6c98:	|  |         movea.l 148(sp),a0
    6c9c:	|  |         move.l 4(a0),d0
    6ca0:	|  |         move.l 156(sp),-(sp)
    6ca4:	|  |         move.l d0,-(sp)
    6ca6:	|  |         jsr a46 <putFloat>
    6cac:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    6cae:	|  |         movea.l 148(sp),a0
    6cb2:	|  |         move.l 68(a0),d0
    6cb6:	|  |         move.l 156(sp),-(sp)
    6cba:	|  |         move.l d0,-(sp)
    6cbc:	|  |         jsr 6bb0 <saveCostume>
    6cc2:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    6cc4:	|  |         movea.l 148(sp),a0
    6cc8:	|  |         move.l 60(a0),d0
    6ccc:	|  |         move.l 156(sp),-(sp)
    6cd0:	|  |         move.l d0,-(sp)
    6cd2:	|  |         jsr 6ae6 <saveAnim>
    6cd8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    6cda:	|  |         move.l 156(sp),136(sp)
    6ce0:	|  |         movea.l 148(sp),a0
    6ce4:	|  |         move.l 60(a0),d1
    6ce8:	|  |         movea.l 148(sp),a0
    6cec:	|  |         move.l 64(a0),d0
    6cf0:	|  |         cmp.l d1,d0
    6cf2:	|  |         seq d0
    6cf4:	|  |         neg.b d0
    6cf6:	|  |         move.b d0,d0
    6cf8:	|  |         andi.l #255,d0
    6cfe:	|  |         move.l d0,132(sp)
    6d02:	|  |         move.l 17b30 <DOSBase>,d0
    6d08:	|  |         movea.l d0,a6
    6d0a:	|  |         move.l 136(sp),d1
    6d0e:	|  |         move.l 132(sp),d2
    6d12:	|  |         jsr -312(a6)
    6d16:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    6d1a:	|  |         movea.l 148(sp),a0
    6d1e:	|  |         move.l 20(a0),d0
    6d22:	|  |         move.l 156(sp),-(sp)
    6d26:	|  |         move.l d0,-(sp)
    6d28:	|  |         jsr a46 <putFloat>
    6d2e:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    6d30:	|  |         movea.l 148(sp),a0
    6d34:	|  |         move.l 106(a0),d0
    6d38:	|  |         move.l 156(sp),-(sp)
    6d3c:	|  |         move.l d0,-(sp)
    6d3e:	|  |         jsr 8d0 <put2bytes>
    6d44:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    6d46:	|  |         movea.l 148(sp),a0
    6d4a:	|  |         move.l 8(a0),d0
    6d4e:	|  |         move.l 156(sp),-(sp)
    6d52:	|  |         move.l d0,-(sp)
    6d54:	|  |         jsr 8d0 <put2bytes>
    6d5a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    6d5c:	|  |         movea.l 148(sp),a0
    6d60:	|  |         move.l 28(a0),d0
    6d64:	|  |         move.l 156(sp),-(sp)
    6d68:	|  |         move.l d0,-(sp)
    6d6a:	|  |         jsr 8d0 <put2bytes>
    6d70:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    6d72:	|  |         movea.l 148(sp),a0
    6d76:	|  |         move.l 32(a0),d0
    6d7a:	|  |         move.l 156(sp),-(sp)
    6d7e:	|  |         move.l d0,-(sp)
    6d80:	|  |         jsr 8d0 <put2bytes>
    6d86:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    6d88:	|  |         movea.l 148(sp),a0
    6d8c:	|  |         move.l 36(a0),d0
    6d90:	|  |         move.l 156(sp),-(sp)
    6d94:	|  |         move.l d0,-(sp)
    6d96:	|  |         jsr 8d0 <put2bytes>
    6d9c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    6d9e:	|  |         movea.l 148(sp),a0
    6da2:	|  |         move.l 40(a0),d0
    6da6:	|  |         move.l 156(sp),-(sp)
    6daa:	|  |         move.l d0,-(sp)
    6dac:	|  |         jsr 8d0 <put2bytes>
    6db2:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    6db4:	|  |         movea.l 148(sp),a0
    6db8:	|  |         move.l 72(a0),d0
    6dbc:	|  |         move.l 156(sp),-(sp)
    6dc0:	|  |         move.l d0,-(sp)
    6dc2:	|  |         jsr 8d0 <put2bytes>
    6dc8:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    6dca:	|  |         movea.l 148(sp),a0
    6dce:	|  |         move.l 76(a0),d0
    6dd2:	|  |         move.l 156(sp),-(sp)
    6dd6:	|  |         move.l d0,-(sp)
    6dd8:	|  |         jsr 8d0 <put2bytes>
    6dde:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    6de0:	|  |         movea.l 148(sp),a0
    6de4:	|  |         move.l 16(a0),d0
    6de8:	|  |         move.l 156(sp),-(sp)
    6dec:	|  |         move.l d0,-(sp)
    6dee:	|  |         jsr 8d0 <put2bytes>
    6df4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    6df6:	|  |         movea.l 148(sp),a0
    6dfa:	|  |         move.l 110(a0),d0
    6dfe:	|  |         move.l 156(sp),-(sp)
    6e02:	|  |         move.l d0,-(sp)
    6e04:	|  |         jsr 8d0 <put2bytes>
    6e0a:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    6e0c:	|  |         movea.l 148(sp),a0
    6e10:	|  |         move.l 12(a0),d0
    6e14:	|  |         move.l d0,d0
    6e16:	|  |         movea.w d0,a0
    6e18:	|  |         move.l 156(sp),-(sp)
    6e1c:	|  |         move.l a0,-(sp)
    6e1e:	|  |         jsr a9c <putSigned>
    6e24:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    6e26:	|  |         move.l 156(sp),124(sp)
    6e2c:	|  |         movea.l 148(sp),a0
    6e30:	|  |         move.w 92(a0),d0
    6e34:	|  |         movea.w d0,a0
    6e36:	|  |         move.l a0,120(sp)
    6e3a:	|  |         move.l 17b30 <DOSBase>,d0
    6e40:	|  |         movea.l d0,a6
    6e42:	|  |         move.l 124(sp),d1
    6e46:	|  |         move.l 120(sp),d2
    6e4a:	|  |         jsr -312(a6)
    6e4e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    6e52:	|  |         move.l 156(sp),112(sp)
    6e58:	|  |         movea.l 148(sp),a0
    6e5c:	|  |         move.w 52(a0),d0
    6e60:	|  |         movea.w d0,a0
    6e62:	|  |         move.l a0,108(sp)
    6e66:	|  |         move.l 17b30 <DOSBase>,d0
    6e6c:	|  |         movea.l d0,a6
    6e6e:	|  |         move.l 112(sp),d1
    6e72:	|  |         move.l 108(sp),d2
    6e76:	|  |         jsr -312(a6)
    6e7a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    6e7e:	|  |         move.l 156(sp),100(sp)
    6e84:	|  |         movea.l 148(sp),a0
    6e88:	|  |         move.w 54(a0),d0
    6e8c:	|  |         movea.w d0,a0
    6e8e:	|  |         move.l a0,96(sp)
    6e92:	|  |         move.l 17b30 <DOSBase>,d0
    6e98:	|  |         movea.l d0,a6
    6e9a:	|  |         move.l 100(sp),d1
    6e9e:	|  |         move.l 96(sp),d2
    6ea2:	|  |         jsr -312(a6)
    6ea6:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    6eaa:	|  |         movea.l 148(sp),a0
    6eae:	|  |         move.l 56(a0),d0
    6eb2:	|  |  /----- beq.s 6ef0 <savePeople+0x2e2>
			FPutC (fp, 1);
    6eb4:	|  |  |      move.l 156(sp),76(sp)
    6eba:	|  |  |      moveq #1,d0
    6ebc:	|  |  |      move.l d0,72(sp)
    6ec0:	|  |  |      move.l 17b30 <DOSBase>,d0
    6ec6:	|  |  |      movea.l d0,a6
    6ec8:	|  |  |      move.l 76(sp),d1
    6ecc:	|  |  |      move.l 72(sp),d2
    6ed0:	|  |  |      jsr -312(a6)
    6ed4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    6ed8:	|  |  |      movea.l 148(sp),a0
    6edc:	|  |  |      move.l 56(a0),d0
    6ee0:	|  |  |      move.l 156(sp),-(sp)
    6ee4:	|  |  |      move.l d0,-(sp)
    6ee6:	|  |  |      jsr 7f8a <saveFunction>
    6eec:	|  |  |      addq.l #8,sp
    6eee:	|  |  |  /-- bra.s 6f14 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    6ef0:	|  |  \--|-> move.l 156(sp),88(sp)
    6ef6:	|  |     |   moveq #1,d0
    6ef8:	|  |     |   move.l d0,84(sp)
    6efc:	|  |     |   move.l 17b30 <DOSBase>,d0
    6f02:	|  |     |   movea.l d0,a6
    6f04:	|  |     |   move.l 88(sp),d1
    6f08:	|  |     |   move.l 84(sp),d2
    6f0c:	|  |     |   jsr -312(a6)
    6f10:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    6f14:	|  |     \-> movea.l 148(sp),a0
    6f18:	|  |         move.l 94(a0),d0
    6f1c:	|  |         move.l 156(sp),-(sp)
    6f20:	|  |         move.l d0,-(sp)
    6f22:	|  |         jsr 8d0 <put2bytes>
    6f28:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    6f2a:	|  |         movea.l 148(sp),a0
    6f2e:	|  |         move.l 80(a0),d0
    6f32:	|  |         move.l 156(sp),-(sp)
    6f36:	|  |         move.l d0,-(sp)
    6f38:	|  |         jsr 8d0 <put2bytes>
    6f3e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    6f40:	|  |         movea.l 148(sp),a0
    6f44:	|  |         move.l 88(a0),d0
    6f48:	|  |         move.l 156(sp),-(sp)
    6f4c:	|  |         move.l d0,-(sp)
    6f4e:	|  |         jsr 8d0 <put2bytes>
    6f54:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    6f56:	|  |         movea.l 148(sp),a0
    6f5a:	|  |         move.l 84(a0),d0
    6f5e:	|  |         move.l 156(sp),-(sp)
    6f62:	|  |         move.l d0,-(sp)
    6f64:	|  |         jsr 8d0 <put2bytes>
    6f6a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    6f6c:	|  |         movea.l 148(sp),a0
    6f70:	|  |         move.l 98(a0),d0
    6f74:	|  |         move.l d0,d0
    6f76:	|  |         movea.w d0,a0
    6f78:	|  |         move.l 156(sp),-(sp)
    6f7c:	|  |         move.l a0,-(sp)
    6f7e:	|  |         jsr a9c <putSigned>
    6f84:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    6f86:	|  |         movea.l 148(sp),a0
    6f8a:	|  |         move.l 44(a0),d0
    6f8e:	|  |         move.l d0,d0
    6f90:	|  |         movea.w d0,a0
    6f92:	|  |         move.l 156(sp),-(sp)
    6f96:	|  |         move.l a0,-(sp)
    6f98:	|  |         jsr a9c <putSigned>
    6f9e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    6fa0:	|  |         movea.l 148(sp),a0
    6fa4:	|  |         move.l 48(a0),d0
    6fa8:	|  |         move.l d0,d0
    6faa:	|  |         movea.w d0,a0
    6fac:	|  |         move.l 156(sp),-(sp)
    6fb0:	|  |         move.l a0,-(sp)
    6fb2:	|  |         jsr a9c <putSigned>
    6fb8:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    6fba:	|  |         move.l 156(sp),64(sp)
    6fc0:	|  |         movea.l 148(sp),a0
    6fc4:	|  |         move.b 114(a0),d0
    6fc8:	|  |         move.b d0,d0
    6fca:	|  |         andi.l #255,d0
    6fd0:	|  |         move.l d0,60(sp)
    6fd4:	|  |         move.l 17b30 <DOSBase>,d0
    6fda:	|  |         movea.l d0,a6
    6fdc:	|  |         move.l 64(sp),d1
    6fe0:	|  |         move.l 60(sp),d2
    6fe4:	|  |         jsr -312(a6)
    6fe8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    6fec:	|  |         move.l 156(sp),52(sp)
    6ff2:	|  |         movea.l 148(sp),a0
    6ff6:	|  |         move.b 115(a0),d0
    6ffa:	|  |         move.b d0,d0
    6ffc:	|  |         andi.l #255,d0
    7002:	|  |         move.l d0,48(sp)
    7006:	|  |         move.l 17b30 <DOSBase>,d0
    700c:	|  |         movea.l d0,a6
    700e:	|  |         move.l 52(sp),d1
    7012:	|  |         move.l 48(sp),d2
    7016:	|  |         jsr -312(a6)
    701a:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    701e:	|  |         move.l 156(sp),40(sp)
    7024:	|  |         movea.l 148(sp),a0
    7028:	|  |         move.b 116(a0),d0
    702c:	|  |         move.b d0,d0
    702e:	|  |         andi.l #255,d0
    7034:	|  |         move.l d0,36(sp)
    7038:	|  |         move.l 17b30 <DOSBase>,d0
    703e:	|  |         movea.l d0,a6
    7040:	|  |         move.l 40(sp),d1
    7044:	|  |         move.l 36(sp),d2
    7048:	|  |         jsr -312(a6)
    704c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7050:	|  |         move.l 156(sp),28(sp)
    7056:	|  |         movea.l 148(sp),a0
    705a:	|  |         move.b 117(a0),d0
    705e:	|  |         move.b d0,d0
    7060:	|  |         andi.l #255,d0
    7066:	|  |         move.l d0,24(sp)
    706a:	|  |         move.l 17b30 <DOSBase>,d0
    7070:	|  |         movea.l d0,a6
    7072:	|  |         move.l 28(sp),d1
    7076:	|  |         move.l 24(sp),d2
    707a:	|  |         jsr -312(a6)
    707e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7082:	|  |         move.l 156(sp),16(sp)
    7088:	|  |         movea.l 148(sp),a0
    708c:	|  |         move.b 118(a0),d0
    7090:	|  |         move.b d0,d0
    7092:	|  |         andi.l #255,d0
    7098:	|  |         move.l d0,12(sp)
    709c:	|  |         move.l 17b30 <DOSBase>,d0
    70a2:	|  |         movea.l d0,a6
    70a4:	|  |         move.l 16(sp),d1
    70a8:	|  |         move.l 12(sp),d2
    70ac:	|  |         jsr -312(a6)
    70b0:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    70b4:	|  |         movea.l 148(sp),a0
    70b8:	|  |         move.l 102(a0),d0
    70bc:	|  |         move.l 156(sp),-(sp)
    70c0:	|  |         move.l d0,-(sp)
    70c2:	|  |         jsr 91de <saveObjectRef>
    70c8:	|  |         addq.l #8,sp

		me = me -> next;
    70ca:	|  |         movea.l 148(sp),a0
    70ce:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    70d4:	|  |         addq.l #1,140(sp)
    70d8:	|  \-------> movea.l 140(sp),a0
    70dc:	|            cmpa.l 144(sp),a0
    70e0:	\----------- blt.w 6c84 <savePeople+0x76>
	}
	return TRUE;
    70e4:	             moveq #1,d0
}
    70e6:	             move.l (sp)+,d2
    70e8:	             movea.l (sp)+,a6
    70ea:	             lea 144(sp),sp
    70ee:	             rts

000070f0 <setDrawMode>:

void setDrawMode (int h, int ob) {
    70f0:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    70f2:	       move.l 12(sp),-(sp)
    70f6:	       jsr 61ce <findPerson>
    70fc:	       addq.l #4,sp
    70fe:	       move.l d0,(sp)
	if (! moveMe) return;
    7100:	/----- beq.s 7114 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7102:	|      move.l 8(sp),-(sp)
    7106:	|      move.l 4(sp),-(sp)
    710a:	|      jsr 711a <setMyDrawMode>
    7110:	|      addq.l #8,sp
    7112:	|  /-- bra.s 7116 <setDrawMode+0x26>
	if (! moveMe) return;
    7114:	\--|-> nop
}
    7116:	   \-> addq.l #4,sp
    7118:	       rts

0000711a <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    711a:	       moveq #19,d0
    711c:	       cmp.l 8(sp),d0
    7120:	/----- bcs.w 75f8 <setMyDrawMode+0x4de>
    7124:	|      move.l 8(sp),d0
    7128:	|      add.l d0,d0
    712a:	|      movea.l d0,a0
    712c:	|      adda.l #28984,a0
    7132:	|      move.w (a0),d0
    7134:	|      jmp (7138 <setMyDrawMode+0x1e>,pc,d0.w)
    7138:	|      .short 0x04c0
    713a:	|      ori.l #6684712,-(a4)
    7140:	|      btst d0,-(a0)
    7142:	|      bchg d0,(a6)+
    7144:	|      bclr d0,(a4)+
    7146:	|      bset d0,(a2)+
    7148:	|      andi.b #84,(a6)
    714c:	|      andi.l #55575312,(a2)
    7152:	|      .short 0x02d0
    7154:	|      bclr d1,(a0)
    7156:	|      .short 0x044a
    7158:	|      .short 0x040c
    715a:	|      movep.l d1,1158(a6)
    715e:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7160:	|      movea.l 4(sp),a0
    7164:	|      clr.b 116(a0)
    7168:	|      movea.l 4(sp),a0
    716c:	|      move.b 116(a0),d0
    7170:	|      movea.l 4(sp),a0
    7174:	|      move.b d0,115(a0)
    7178:	|      movea.l 4(sp),a0
    717c:	|      move.b 115(a0),d0
    7180:	|      movea.l 4(sp),a0
    7184:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    7188:	|      movea.l 4(sp),a0
    718c:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7190:	|      movea.l 4(sp),a0
    7194:	|      move.b #64,118(a0)
			break;
    719a:	|  /-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    719e:	|  |   movea.l 4(sp),a0
    71a2:	|  |   clr.b 116(a0)
    71a6:	|  |   movea.l 4(sp),a0
    71aa:	|  |   move.b 116(a0),d0
    71ae:	|  |   movea.l 4(sp),a0
    71b2:	|  |   move.b d0,115(a0)
    71b6:	|  |   movea.l 4(sp),a0
    71ba:	|  |   move.b 115(a0),d0
    71be:	|  |   movea.l 4(sp),a0
    71c2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    71c6:	|  |   movea.l 4(sp),a0
    71ca:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    71ce:	|  |   movea.l 4(sp),a0
    71d2:	|  |   move.b #-128,118(a0)
			break;
    71d8:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    71dc:	|  |   movea.l 4(sp),a0
    71e0:	|  |   clr.b 116(a0)
    71e4:	|  |   movea.l 4(sp),a0
    71e8:	|  |   move.b 116(a0),d0
    71ec:	|  |   movea.l 4(sp),a0
    71f0:	|  |   move.b d0,115(a0)
    71f4:	|  |   movea.l 4(sp),a0
    71f8:	|  |   move.b 115(a0),d0
    71fc:	|  |   movea.l 4(sp),a0
    7200:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7204:	|  |   movea.l 4(sp),a0
    7208:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    720c:	|  |   movea.l 4(sp),a0
    7210:	|  |   move.b #-64,118(a0)
			break;
    7216:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    721a:	|  |   movea.l 4(sp),a0
    721e:	|  |   clr.b 116(a0)
    7222:	|  |   movea.l 4(sp),a0
    7226:	|  |   move.b 116(a0),d0
    722a:	|  |   movea.l 4(sp),a0
    722e:	|  |   move.b d0,115(a0)
    7232:	|  |   movea.l 4(sp),a0
    7236:	|  |   move.b 115(a0),d0
    723a:	|  |   movea.l 4(sp),a0
    723e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7242:	|  |   movea.l 4(sp),a0
    7246:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    724a:	|  |   movea.l 4(sp),a0
    724e:	|  |   move.b #-2,118(a0)
			break;
    7254:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7258:	|  |   movea.l 4(sp),a0
    725c:	|  |   clr.b 116(a0)
    7260:	|  |   movea.l 4(sp),a0
    7264:	|  |   move.b 116(a0),d0
    7268:	|  |   movea.l 4(sp),a0
    726c:	|  |   move.b d0,115(a0)
    7270:	|  |   movea.l 4(sp),a0
    7274:	|  |   move.b 115(a0),d0
    7278:	|  |   movea.l 4(sp),a0
    727c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7280:	|  |   movea.l 4(sp),a0
    7284:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    728a:	|  |   movea.l 4(sp),a0
    728e:	|  |   clr.b 118(a0)
			break;
    7292:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7296:	|  |   movea.l 4(sp),a0
    729a:	|  |   clr.b 116(a0)
    729e:	|  |   movea.l 4(sp),a0
    72a2:	|  |   move.b 116(a0),d0
    72a6:	|  |   movea.l 4(sp),a0
    72aa:	|  |   move.b d0,115(a0)
    72ae:	|  |   movea.l 4(sp),a0
    72b2:	|  |   move.b 115(a0),d0
    72b6:	|  |   movea.l 4(sp),a0
    72ba:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    72be:	|  |   movea.l 4(sp),a0
    72c2:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    72c8:	|  |   movea.l 4(sp),a0
    72cc:	|  |   clr.b 118(a0)
			break;
    72d0:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    72d4:	|  |   movea.l 4(sp),a0
    72d8:	|  |   clr.b 116(a0)
    72dc:	|  |   movea.l 4(sp),a0
    72e0:	|  |   move.b 116(a0),d0
    72e4:	|  |   movea.l 4(sp),a0
    72e8:	|  |   move.b d0,115(a0)
    72ec:	|  |   movea.l 4(sp),a0
    72f0:	|  |   move.b 115(a0),d0
    72f4:	|  |   movea.l 4(sp),a0
    72f8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    72fc:	|  |   movea.l 4(sp),a0
    7300:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7306:	|  |   movea.l 4(sp),a0
    730a:	|  |   clr.b 118(a0)
			break;
    730e:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7312:	|  |   movea.l 4(sp),a0
    7316:	|  |   clr.b 116(a0)
    731a:	|  |   movea.l 4(sp),a0
    731e:	|  |   move.b 116(a0),d0
    7322:	|  |   movea.l 4(sp),a0
    7326:	|  |   move.b d0,115(a0)
    732a:	|  |   movea.l 4(sp),a0
    732e:	|  |   move.b 115(a0),d0
    7332:	|  |   movea.l 4(sp),a0
    7336:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    733a:	|  |   movea.l 4(sp),a0
    733e:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7342:	|  |   movea.l 4(sp),a0
    7346:	|  |   clr.b 118(a0)
			break;
    734a:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    734e:	|  |   movea.l 4(sp),a0
    7352:	|  |   clr.b 116(a0)
    7356:	|  |   movea.l 4(sp),a0
    735a:	|  |   move.b 116(a0),d0
    735e:	|  |   movea.l 4(sp),a0
    7362:	|  |   move.b d0,115(a0)
    7366:	|  |   movea.l 4(sp),a0
    736a:	|  |   move.b 115(a0),d0
    736e:	|  |   movea.l 4(sp),a0
    7372:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7376:	|  |   movea.l 4(sp),a0
    737a:	|  |   st 117(a0)
			moveMe->transparency = 64;
    737e:	|  |   movea.l 4(sp),a0
    7382:	|  |   move.b #64,118(a0)
			break;
    7388:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    738c:	|  |   movea.l 4(sp),a0
    7390:	|  |   clr.b 116(a0)
    7394:	|  |   movea.l 4(sp),a0
    7398:	|  |   move.b 116(a0),d0
    739c:	|  |   movea.l 4(sp),a0
    73a0:	|  |   move.b d0,115(a0)
    73a4:	|  |   movea.l 4(sp),a0
    73a8:	|  |   move.b 115(a0),d0
    73ac:	|  |   movea.l 4(sp),a0
    73b0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    73b4:	|  |   movea.l 4(sp),a0
    73b8:	|  |   st 117(a0)
			moveMe->transparency = 128;
    73bc:	|  |   movea.l 4(sp),a0
    73c0:	|  |   move.b #-128,118(a0)
			break;
    73c6:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    73ca:	|  |   movea.l 4(sp),a0
    73ce:	|  |   clr.b 116(a0)
    73d2:	|  |   movea.l 4(sp),a0
    73d6:	|  |   move.b 116(a0),d0
    73da:	|  |   movea.l 4(sp),a0
    73de:	|  |   move.b d0,115(a0)
    73e2:	|  |   movea.l 4(sp),a0
    73e6:	|  |   move.b 115(a0),d0
    73ea:	|  |   movea.l 4(sp),a0
    73ee:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    73f2:	|  |   movea.l 4(sp),a0
    73f6:	|  |   st 117(a0)
			moveMe->transparency = 192;
    73fa:	|  |   movea.l 4(sp),a0
    73fe:	|  |   move.b #-64,118(a0)
			break;
    7404:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7408:	|  |   movea.l 4(sp),a0
    740c:	|  |   move.b #-128,116(a0)
    7412:	|  |   movea.l 4(sp),a0
    7416:	|  |   move.b 116(a0),d0
    741a:	|  |   movea.l 4(sp),a0
    741e:	|  |   move.b d0,115(a0)
    7422:	|  |   movea.l 4(sp),a0
    7426:	|  |   move.b 115(a0),d0
    742a:	|  |   movea.l 4(sp),a0
    742e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7432:	|  |   movea.l 4(sp),a0
    7436:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    743c:	|  |   movea.l 4(sp),a0
    7440:	|  |   clr.b 118(a0)
			break;
    7444:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7448:	|  |   movea.l 4(sp),a0
    744c:	|  |   move.b #-128,116(a0)
    7452:	|  |   movea.l 4(sp),a0
    7456:	|  |   move.b 116(a0),d0
    745a:	|  |   movea.l 4(sp),a0
    745e:	|  |   move.b d0,115(a0)
    7462:	|  |   movea.l 4(sp),a0
    7466:	|  |   move.b 115(a0),d0
    746a:	|  |   movea.l 4(sp),a0
    746e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7472:	|  |   movea.l 4(sp),a0
    7476:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    747c:	|  |   movea.l 4(sp),a0
    7480:	|  |   clr.b 118(a0)
			break;
    7484:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7488:	|  |   movea.l 4(sp),a0
    748c:	|  |   move.b #-128,116(a0)
    7492:	|  |   movea.l 4(sp),a0
    7496:	|  |   move.b 116(a0),d0
    749a:	|  |   movea.l 4(sp),a0
    749e:	|  |   move.b d0,115(a0)
    74a2:	|  |   movea.l 4(sp),a0
    74a6:	|  |   move.b 115(a0),d0
    74aa:	|  |   movea.l 4(sp),a0
    74ae:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    74b2:	|  |   movea.l 4(sp),a0
    74b6:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    74bc:	|  |   movea.l 4(sp),a0
    74c0:	|  |   clr.b 118(a0)
			break;
    74c4:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    74c8:	|  |   movea.l 4(sp),a0
    74cc:	|  |   move.b #-128,116(a0)
    74d2:	|  |   movea.l 4(sp),a0
    74d6:	|  |   move.b 116(a0),d0
    74da:	|  |   movea.l 4(sp),a0
    74de:	|  |   move.b d0,115(a0)
    74e2:	|  |   movea.l 4(sp),a0
    74e6:	|  |   move.b 115(a0),d0
    74ea:	|  |   movea.l 4(sp),a0
    74ee:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    74f2:	|  |   movea.l 4(sp),a0
    74f6:	|  |   st 117(a0)
			moveMe->transparency = 0;
    74fa:	|  |   movea.l 4(sp),a0
    74fe:	|  |   clr.b 118(a0)
			break;
    7502:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7506:	|  |   movea.l 4(sp),a0
    750a:	|  |   st 116(a0)
    750e:	|  |   movea.l 4(sp),a0
    7512:	|  |   move.b 116(a0),d0
    7516:	|  |   movea.l 4(sp),a0
    751a:	|  |   move.b d0,115(a0)
    751e:	|  |   movea.l 4(sp),a0
    7522:	|  |   move.b 115(a0),d0
    7526:	|  |   movea.l 4(sp),a0
    752a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    752e:	|  |   movea.l 4(sp),a0
    7532:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7538:	|  |   movea.l 4(sp),a0
    753c:	|  |   clr.b 118(a0)
			break;
    7540:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7544:	|  |   movea.l 4(sp),a0
    7548:	|  |   st 116(a0)
    754c:	|  |   movea.l 4(sp),a0
    7550:	|  |   move.b 116(a0),d0
    7554:	|  |   movea.l 4(sp),a0
    7558:	|  |   move.b d0,115(a0)
    755c:	|  |   movea.l 4(sp),a0
    7560:	|  |   move.b 115(a0),d0
    7564:	|  |   movea.l 4(sp),a0
    7568:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    756c:	|  |   movea.l 4(sp),a0
    7570:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7576:	|  |   movea.l 4(sp),a0
    757a:	|  |   clr.b 118(a0)
			break;
    757e:	|  +-- bra.w 7632 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7582:	|  |   movea.l 4(sp),a0
    7586:	|  |   st 116(a0)
    758a:	|  |   movea.l 4(sp),a0
    758e:	|  |   move.b 116(a0),d0
    7592:	|  |   movea.l 4(sp),a0
    7596:	|  |   move.b d0,115(a0)
    759a:	|  |   movea.l 4(sp),a0
    759e:	|  |   move.b 115(a0),d0
    75a2:	|  |   movea.l 4(sp),a0
    75a6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    75aa:	|  |   movea.l 4(sp),a0
    75ae:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    75b4:	|  |   movea.l 4(sp),a0
    75b8:	|  |   clr.b 118(a0)
			break;
    75bc:	|  +-- bra.s 7632 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    75be:	|  |   movea.l 4(sp),a0
    75c2:	|  |   st 116(a0)
    75c6:	|  |   movea.l 4(sp),a0
    75ca:	|  |   move.b 116(a0),d0
    75ce:	|  |   movea.l 4(sp),a0
    75d2:	|  |   move.b d0,115(a0)
    75d6:	|  |   movea.l 4(sp),a0
    75da:	|  |   move.b 115(a0),d0
    75de:	|  |   movea.l 4(sp),a0
    75e2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    75e6:	|  |   movea.l 4(sp),a0
    75ea:	|  |   st 117(a0)
			moveMe->transparency = 0;
    75ee:	|  |   movea.l 4(sp),a0
    75f2:	|  |   clr.b 118(a0)
			break;
    75f6:	|  +-- bra.s 7632 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    75f8:	\--|-> movea.l 4(sp),a0
    75fc:	   |   clr.b 116(a0)
    7600:	   |   movea.l 4(sp),a0
    7604:	   |   move.b 116(a0),d0
    7608:	   |   movea.l 4(sp),a0
    760c:	   |   move.b d0,115(a0)
    7610:	   |   movea.l 4(sp),a0
    7614:	   |   move.b 115(a0),d0
    7618:	   |   movea.l 4(sp),a0
    761c:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7620:	   |   movea.l 4(sp),a0
    7624:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    7628:	   |   movea.l 4(sp),a0
    762c:	   |   clr.b 118(a0)
			break;
    7630:	   |   nop
	}
}
    7632:	   \-> nop
    7634:	       rts

00007636 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    7636:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    7638:	       tst.l 8(sp)
    763c:	   /-- bgt.s 7642 <setCharacterWalkSpeed+0xc>
    763e:	   |   clr.w d0
    7640:	/--|-- bra.s 7660 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    7642:	|  \-> move.l 12(sp),-(sp)
    7646:	|      jsr 61ce <findPerson>
    764c:	|      addq.l #4,sp
    764e:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    7650:	|  /-- bne.s 7656 <setCharacterWalkSpeed+0x20>
    7652:	|  |   clr.w d0
    7654:	+--|-- bra.s 7660 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    7656:	|  \-> movea.l (sp),a0
    7658:	|      move.l 8(sp),16(a0)
	return TRUE;
    765e:	|      moveq #1,d0
}
    7660:	\----> addq.l #4,sp
    7662:	       rts

00007664 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    7664:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    7666:	       move.l 8(sp),-(sp)
    766a:	       jsr 61ce <findPerson>
    7670:	       addq.l #4,sp
    7672:	       move.l d0,(sp)
    if (thisPerson) {
    7674:	/----- beq.s 7694 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    7676:	|      movea.l (sp),a0
    7678:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    767e:	|      moveq #2,d0
    7680:	|      and.l 12(sp),d0
    7684:	|  /-- beq.s 7690 <setPersonExtra+0x2c>
    7686:	|  |   movea.l (sp),a0
    7688:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    7690:	|  \-> moveq #1,d0
    7692:	|  /-- bra.s 7696 <setPersonExtra+0x32>
    }
    return FALSE;
    7694:	\--|-> clr.w d0
}
    7696:	   \-> addq.l #4,sp
    7698:	       rts

0000769a <setScale>:


void setScale (short int h, short int d) {
    769a:	subq.l #4,sp
    769c:	move.l 8(sp),d1
    76a0:	move.l 12(sp),d0
    76a4:	move.w d1,d1
    76a6:	move.w d1,2(sp)
    76aa:	move.w d0,d0
    76ac:	move.w d0,(sp)
	scaleHorizon = h;
    76ae:	move.w 2(sp),16026 <scaleHorizon>
	scaleDivide = d;
    76b6:	move.w (sp),16028 <scaleDivide>
}
    76bc:	nop
    76be:	addq.l #4,sp
    76c0:	rts

000076c2 <setShown>:

void setShown (BOOL h, int ob) {
    76c2:	    subq.l #8,sp
    76c4:	    move.l 12(sp),d0
    76c8:	    move.w d0,d0
    76ca:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    76ce:	    move.l 16(sp),-(sp)
    76d2:	    jsr 61ce <findPerson>
    76d8:	    addq.l #4,sp
    76da:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    76de:	/-- beq.s 76ea <setShown+0x28>
    76e0:	|   movea.l 4(sp),a0
    76e4:	|   move.w 2(sp),92(a0)
}
    76ea:	\-> nop
    76ec:	    addq.l #8,sp
    76ee:	    rts

000076f0 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    76f0:	       subq.l #8,sp
    76f2:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    76f4:	       movea.l 16(sp),a0
    76f8:	       move.l 80(a0),d0
    76fc:	       move.l d0,d1
    76fe:	       addi.l #360,d1
    7704:	       movea.l 16(sp),a0
    7708:	       move.l 84(a0),d0
    770c:	       move.l d1,d2
    770e:	       sub.l d0,d2
    7710:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    7714:	       movea.l 16(sp),a0
    7718:	       move.l 110(a0),d0
    771c:	   /-- beq.s 7728 <spinStep+0x38>
    771e:	   |   movea.l 16(sp),a0
    7722:	   |   move.l 110(a0),d0
    7726:	/--|-- bra.s 7742 <spinStep+0x52>
    7728:	|  \-> movea.l 16(sp),a0
    772c:	|      movea.l 68(a0),a0
    7730:	|      move.l 4(a0),d0
    7734:	|      move.l d0,-(sp)
    7736:	|      pea 168 <decodeFilename+0x50>
    773a:	|      jsr 12a48 <__divsi3>
    7740:	|      addq.l #8,sp
    7742:	\----> move.l d0,4(sp)
	while (diff > 180) {
    7746:	   /-- bra.s 7750 <spinStep+0x60>
		diff -= 360;
    7748:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    7750:	|  \-> cmpi.l #180,8(sp)
    7758:	\----- bgt.s 7748 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    775a:	       move.l 8(sp),d0
    775e:	       cmp.l 4(sp),d0
    7762:	   /-- blt.s 7780 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    7764:	   |   movea.l 16(sp),a0
    7768:	   |   move.l 80(a0),d0
    776c:	   |   sub.l 4(sp),d0
    7770:	   |   move.l d0,-(sp)
    7772:	   |   move.l 20(sp),-(sp)
    7776:	   |   jsr 7860 <turnMeAngle>
    777c:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    777e:	/--|-- bra.s 77c6 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    7780:	|  \-> move.l 4(sp),d0
    7784:	|      neg.l d0
    7786:	|      cmp.l 8(sp),d0
    778a:	|  /-- blt.s 77a8 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    778c:	|  |   movea.l 16(sp),a0
    7790:	|  |   move.l 80(a0),d0
    7794:	|  |   add.l 4(sp),d0
    7798:	|  |   move.l d0,-(sp)
    779a:	|  |   move.l 20(sp),-(sp)
    779e:	|  |   jsr 7860 <turnMeAngle>
    77a4:	|  |   addq.l #8,sp
}
    77a6:	+--|-- bra.s 77c6 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    77a8:	|  \-> movea.l 16(sp),a0
    77ac:	|      move.l 84(a0),d0
    77b0:	|      move.l d0,-(sp)
    77b2:	|      move.l 20(sp),-(sp)
    77b6:	|      jsr 7860 <turnMeAngle>
    77bc:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    77be:	|      movea.l 16(sp),a0
    77c2:	|      clr.w 54(a0)
}
    77c6:	\----> nop
    77c8:	       move.l (sp)+,d2
    77ca:	       addq.l #8,sp
    77cc:	       rts

000077ce <stopPerson>:


BOOL stopPerson (int o) {
    77ce:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    77d0:	       move.l 8(sp),-(sp)
    77d4:	       jsr 61ce <findPerson>
    77da:	       addq.l #4,sp
    77dc:	       move.l d0,(sp)
    if (moveMe)
    77de:	/----- beq.s 781c <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    77e0:	|      movea.l (sp),a0
    77e2:	|      move.l 56(a0),d0
    77e6:	+----- beq.s 781c <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    77e8:	|      movea.l (sp),a0
    77ea:	|      move.l 56(a0),d0
    77ee:	|      move.l d0,-(sp)
    77f0:	|      jsr 1af4 <abortFunction>
    77f6:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    77f8:	|      movea.l (sp),a0
    77fa:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    77fe:	|      movea.l (sp),a0
    7800:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    7804:	|      movea.l (sp),a0
    7806:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    780a:	|      clr.l -(sp)
    780c:	|      move.l 4(sp),-(sp)
    7810:	|      jsr 505e <setFrames>
    7816:	|      addq.l #8,sp
            return TRUE;
    7818:	|      moveq #1,d0
    781a:	|  /-- bra.s 781e <stopPerson+0x50>
        }
    return FALSE;
    781c:	\--|-> clr.w d0
}
    781e:	   \-> addq.l #4,sp
    7820:	       rts

00007822 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    7822:	       subq.l #8,sp
	int total = 0;
    7824:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    7828:	       clr.l (sp)
    782a:	   /-- bra.s 784c <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    782c:	/--|-> movea.l 12(sp),a0
    7830:	|  |   movea.l 4(a0),a0
    7834:	|  |   move.l (sp),d1
    7836:	|  |   move.l d1,d0
    7838:	|  |   add.l d0,d0
    783a:	|  |   add.l d1,d0
    783c:	|  |   add.l d0,d0
    783e:	|  |   add.l d0,d0
    7840:	|  |   adda.l d0,a0
    7842:	|  |   move.l 4(a0),d0
    7846:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    784a:	|  |   addq.l #1,(sp)
    784c:	|  \-> movea.l 12(sp),a0
    7850:	|      move.l 8(a0),d0
    7854:	|      cmp.l (sp),d0
    7856:	\----- bgt.s 782c <timeForAnim+0xa>
	}
	return total;
    7858:	       move.l 4(sp),d0
}
    785c:	       addq.l #8,sp
    785e:	       rts

00007860 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    7860:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    7862:	       movea.l 8(sp),a0
    7866:	       movea.l 68(a0),a0
    786a:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    786e:	       movea.l 8(sp),a0
    7872:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    7878:	       move.l (sp),-(sp)
    787a:	       pea b4 <_start+0xb4>
    787e:	       jsr 12a48 <__divsi3>
    7884:	       addq.l #8,sp
    7886:	       move.l d0,d1
    7888:	       addi.l #180,d1
    788e:	       movea.l 8(sp),a0
    7892:	       move.l 88(a0),d0
    7896:	       add.l d1,d0
    7898:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    789c:	   /-- bra.s 78a6 <turnMeAngle+0x46>
    789e:	/--|-> addi.l #-360,12(sp)
    78a6:	|  \-> cmpi.l #359,12(sp)
    78ae:	\----- bgt.s 789e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    78b0:	       move.l (sp),-(sp)
    78b2:	       move.l 16(sp),-(sp)
    78b6:	       jsr 129ca <__mulsi3>
    78bc:	       addq.l #8,sp
    78be:	       pea 168 <decodeFilename+0x50>
    78c2:	       move.l d0,-(sp)
    78c4:	       jsr 12a48 <__divsi3>
    78ca:	       addq.l #8,sp
    78cc:	       movea.l 8(sp),a0
    78d0:	       move.l d0,94(a0)
}
    78d4:	       nop
    78d6:	       addq.l #4,sp
    78d8:	       rts

000078da <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    78da:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    78dc:	          move.l 8(sp),-(sp)
    78e0:	          jsr 61ce <findPerson>
    78e6:	          addq.l #4,sp
    78e8:	          move.l d0,(sp)
    if (thisPerson) {
    78ea:	/-------- beq.s 794a <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    78ec:	|         movea.l (sp),a0
    78ee:	|         move.l 56(a0),d0
    78f2:	|     /-- beq.s 7904 <turnPersonToFace+0x2a>
    78f4:	|     |   movea.l (sp),a0
    78f6:	|     |   move.l 56(a0),d0
    78fa:	|     |   move.l d0,-(sp)
    78fc:	|     |   jsr 1af4 <abortFunction>
    7902:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    7904:	|     \-> movea.l (sp),a0
    7906:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    790a:	|         movea.l (sp),a0
    790c:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    7910:	|         movea.l (sp),a0
    7912:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    7916:	|         move.l 12(sp),-(sp)
    791a:	|         move.l 4(sp),-(sp)
    791e:	|         jsr 7860 <turnMeAngle>
    7924:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    7926:	|         movea.l 17b72 <speech>,a0
    792c:	|         move.l (a0),d0
    792e:	|         cmp.l (sp),d0
    7930:	|  /----- bne.s 7936 <turnPersonToFace+0x5c>
    7932:	|  |      moveq #2,d0
    7934:	|  |  /-- bra.s 7938 <turnPersonToFace+0x5e>
    7936:	|  \--|-> moveq #0,d0
    7938:	|     \-> move.l d0,-(sp)
    793a:	|         move.l 4(sp),-(sp)
    793e:	|         jsr 505e <setFrames>
    7944:	|         addq.l #8,sp
        return TRUE;
    7946:	|         moveq #1,d0
    7948:	|     /-- bra.s 794c <turnPersonToFace+0x72>
    }
    return FALSE;
    794a:	\-----|-> clr.w d0
}
    794c:	      \-> addq.l #4,sp
    794e:	          rts

00007950 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    7950:	                lea -20(sp),sp
    7954:	                move.l d3,-(sp)
    7956:	                move.l d2,-(sp)
    7958:	                move.l 36(sp),d0
    795c:	                move.w d0,d0
    795e:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    7962:	                cmpi.w #-1,10(sp)
    7968:	/-------------- bne.s 7970 <walkMe+0x20>
    796a:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7970:	>-------------> movea.l 32(sp),a0
    7974:	|               move.l 36(a0),d0
    7978:	|               move.l d0,-(sp)
    797a:	|               jsr 12470 <__floatsisf>
    7980:	|               addq.l #4,sp
    7982:	|               move.l d0,d1
    7984:	|               movea.l 32(sp),a0
    7988:	|               move.l (a0),d0
    798a:	|               move.l d0,-(sp)
    798c:	|               move.l d1,-(sp)
    798e:	|               jsr 12764 <__subsf3>
    7994:	|               addq.l #8,sp
    7996:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    799a:	|               movea.l 32(sp),a0
    799e:	|               move.l 40(a0),d0
    79a2:	|               move.l d0,-(sp)
    79a4:	|               jsr 12470 <__floatsisf>
    79aa:	|               addq.l #4,sp
    79ac:	|               move.l d0,d1
    79ae:	|               movea.l 32(sp),a0
    79b2:	|               move.l 4(a0),d0
    79b6:	|               move.l d0,-(sp)
    79b8:	|               move.l d1,-(sp)
    79ba:	|               jsr 12764 <__subsf3>
    79c0:	|               addq.l #8,sp
    79c2:	|               move.l d0,-(sp)
    79c4:	|               move.l d0,-(sp)
    79c6:	|               jsr 12222 <__addsf3>
    79cc:	|               addq.l #8,sp
    79ce:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    79d2:	|               movea.l 32(sp),a0
    79d6:	|               move.l 20(a0),d2
    79da:	|               movea.l 32(sp),a0
    79de:	|               move.l 16(a0),d0
    79e2:	|               move.l d0,-(sp)
    79e4:	|               jsr 12470 <__floatsisf>
    79ea:	|               addq.l #4,sp
    79ec:	|               move.l d0,-(sp)
    79ee:	|               move.l d2,-(sp)
    79f0:	|               jsr 12522 <__mulsf3>
    79f6:	|               addq.l #8,sp
    79f8:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    79fc:	|               move.l 24(sp),-(sp)
    7a00:	|               jsr 12388 <__extendsfdf2>
    7a06:	|               addq.l #4,sp
    7a08:	|               move.l #-1717986918,-(sp)
    7a0e:	|               move.l #1070176665,-(sp)
    7a14:	|               move.l d1,-(sp)
    7a16:	|               move.l d0,-(sp)
    7a18:	|               jsr 12648 <__ltdf2>
    7a1e:	|               lea 16(sp),sp
    7a22:	|               tst.l d0
    7a24:	|           /-- bge.s 7a2e <walkMe+0xde>
    7a26:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    7a2e:	|           \-> move.l 20(sp),-(sp)
    7a32:	|               jsr 12408 <__fixsfsi>
    7a38:	|               addq.l #4,sp
    7a3a:	|               move.l d0,-(sp)
    7a3c:	|               jsr 560c <TF_abs>
    7a42:	|               addq.l #4,sp
    7a44:	|               move.l d0,d2
    7a46:	|               move.l 16(sp),-(sp)
    7a4a:	|               jsr 12408 <__fixsfsi>
    7a50:	|               addq.l #4,sp
    7a52:	|               move.l d0,-(sp)
    7a54:	|               jsr 560c <TF_abs>
    7a5a:	|               addq.l #4,sp
    7a5c:	|               cmp.l d2,d0
    7a5e:	|        /----- bgt.s 7a82 <walkMe+0x132>
    7a60:	|        |      move.l 20(sp),-(sp)
    7a64:	|        |      jsr 12408 <__fixsfsi>
    7a6a:	|        |      addq.l #4,sp
    7a6c:	|        |      move.l d0,-(sp)
    7a6e:	|        |      jsr 560c <TF_abs>
    7a74:	|        |      addq.l #4,sp
    7a76:	|        |      move.l d0,-(sp)
    7a78:	|        |      jsr 12470 <__floatsisf>
    7a7e:	|        |      addq.l #4,sp
    7a80:	|        |  /-- bra.s 7aa2 <walkMe+0x152>
    7a82:	|        \--|-> move.l 16(sp),-(sp)
    7a86:	|           |   jsr 12408 <__fixsfsi>
    7a8c:	|           |   addq.l #4,sp
    7a8e:	|           |   move.l d0,-(sp)
    7a90:	|           |   jsr 560c <TF_abs>
    7a96:	|           |   addq.l #4,sp
    7a98:	|           |   move.l d0,-(sp)
    7a9a:	|           |   jsr 12470 <__floatsisf>
    7aa0:	|           |   addq.l #4,sp
    7aa2:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    7aa6:	|               move.l 12(sp),-(sp)
    7aaa:	|               jsr 12408 <__fixsfsi>
    7ab0:	|               addq.l #4,sp
    7ab2:	|               move.l d0,-(sp)
    7ab4:	|               jsr 560c <TF_abs>
    7aba:	|               addq.l #4,sp
    7abc:	|               move.l d0,-(sp)
    7abe:	|               jsr 12470 <__floatsisf>
    7ac4:	|               addq.l #4,sp
    7ac6:	|               move.l d0,-(sp)
    7ac8:	|               move.l 28(sp),-(sp)
    7acc:	|               jsr 12696 <__ltsf2>
    7ad2:	|               addq.l #8,sp
    7ad4:	|               tst.l d0
    7ad6:	|        /----- bge.w 7b88 <walkMe+0x238>
			if (thisPerson->spinning) {
    7ada:	|        |      movea.l 32(sp),a0
    7ade:	|        |      move.w 54(a0),d0
    7ae2:	|        |  /-- beq.s 7b00 <walkMe+0x1b0>
				spinStep(thisPerson);
    7ae4:	|        |  |   move.l 32(sp),-(sp)
    7ae8:	|        |  |   jsr 76f0 <spinStep>
    7aee:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    7af0:	|        |  |   pea 1 <_start+0x1>
    7af4:	|        |  |   move.l 36(sp),-(sp)
    7af8:	|        |  |   jsr 505e <setFrames>
    7afe:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    7b00:	|        |  \-> move.l 24(sp),-(sp)
    7b04:	|        |      move.l 16(sp),-(sp)
    7b08:	|        |      jsr 1231c <__divsf3>
    7b0e:	|        |      addq.l #8,sp
    7b10:	|        |      move.l d0,24(sp)
			if (move)
    7b14:	|        |      tst.w 10(sp)
    7b18:	|        |  /-- beq.s 7b82 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    7b1a:	|        |  |   movea.l 32(sp),a0
    7b1e:	|        |  |   move.l 4(a0),d2
    7b22:	|        |  |   move.l 24(sp),d0
    7b26:	|        |  |   move.l d0,-(sp)
    7b28:	|        |  |   move.l d0,-(sp)
    7b2a:	|        |  |   jsr 12222 <__addsf3>
    7b30:	|        |  |   addq.l #8,sp
    7b32:	|        |  |   move.l d0,-(sp)
    7b34:	|        |  |   move.l 20(sp),-(sp)
    7b38:	|        |  |   jsr 1231c <__divsf3>
    7b3e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7b40:	|        |  |   move.l d0,-(sp)
    7b42:	|        |  |   move.l d2,-(sp)
    7b44:	|        |  |   jsr 12222 <__addsf3>
    7b4a:	|        |  |   addq.l #8,sp
    7b4c:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    7b4e:	|        |  |   movea.l 32(sp),a0
    7b52:	|        |  |   move.l (a0),d3
    7b54:	|        |  |   move.l 24(sp),-(sp)
    7b58:	|        |  |   move.l 24(sp),-(sp)
    7b5c:	|        |  |   jsr 1231c <__divsf3>
    7b62:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7b64:	|        |  |   move.l d0,-(sp)
    7b66:	|        |  |   move.l d3,-(sp)
    7b68:	|        |  |   jsr 12222 <__addsf3>
    7b6e:	|        |  |   addq.l #8,sp
    7b70:	|        |  |   move.l d2,-(sp)
    7b72:	|        |  |   move.l d0,-(sp)
    7b74:	|        |  |   move.l 40(sp),-(sp)
    7b78:	|        |  |   jsr 6916 <moveAndScale>
    7b7e:	|        |  |   lea 12(sp),sp
			return TRUE;
    7b82:	|        |  \-> moveq #1,d0
    7b84:	|  /-----|----- bra.w 7c36 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    7b88:	|  |     \----> movea.l 32(sp),a0
    7b8c:	|  |            move.l 44(a0),d0
    7b90:	|  |            moveq #-1,d1
    7b92:	|  |            cmp.l d0,d1
    7b94:	|  |        /-- bne.s 7bcc <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    7b96:	|  |        |   movea.l 32(sp),a0
    7b9a:	|  |        |   move.l 98(a0),d0
    7b9e:	|  |        |   moveq #-1,d1
    7ba0:	|  |        |   cmp.l d0,d1
    7ba2:	|  |  /-----|-- beq.s 7be0 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    7ba4:	|  |  |     |   movea.l 32(sp),a0
    7ba8:	|  |  |     |   move.l 98(a0),d0
    7bac:	|  |  |     |   movea.l 32(sp),a0
    7bb0:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    7bb4:	|  |  |     |   movea.l 32(sp),a0
    7bb8:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    7bbe:	|  |  |     |   move.l 32(sp),-(sp)
    7bc2:	|  |  |     |   jsr 76f0 <spinStep>
    7bc8:	|  |  |     |   addq.l #4,sp
			}
			break;
    7bca:	|  |  +-----|-- bra.s 7be0 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    7bcc:	|  |  |     \-> move.l 32(sp),-(sp)
    7bd0:	|  |  |         jsr 5b14 <doBorderStuff>
    7bd6:	|  |  |         addq.l #4,sp
    7bd8:	|  |  |         tst.w d0
    7bda:	|  |  |  /----- beq.s 7be4 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7bdc:	\--|--|--|----- bra.w 7970 <walkMe+0x20>
			break;
    7be0:	   |  \--|----> nop
    7be2:	   |     |  /-- bra.s 7be6 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    7be4:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    7be6:	   |        \-> movea.l 32(sp),a0
    7bea:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    7bee:	   |            clr.l -(sp)
    7bf0:	   |            move.l 36(sp),-(sp)
    7bf4:	   |            jsr 505e <setFrames>
    7bfa:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    7bfc:	   |            movea.l 32(sp),a0
    7c00:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    7c04:	   |            move.l d0,-(sp)
    7c06:	   |            jsr 12470 <__floatsisf>
    7c0c:	   |            addq.l #4,sp
    7c0e:	   |            move.l d0,d2
				 thisPerson->walkToX,
    7c10:	   |            movea.l 32(sp),a0
    7c14:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    7c18:	   |            move.l d0,-(sp)
    7c1a:	   |            jsr 12470 <__floatsisf>
    7c20:	   |            addq.l #4,sp
    7c22:	   |            move.l d2,-(sp)
    7c24:	   |            move.l d0,-(sp)
    7c26:	   |            move.l 40(sp),-(sp)
    7c2a:	   |            jsr 6916 <moveAndScale>
    7c30:	   |            lea 12(sp),sp
	return FALSE;
    7c34:	   |            clr.w d0
}
    7c36:	   \----------> move.l (sp)+,d2
    7c38:	                move.l (sp)+,d3
    7c3a:	                lea 20(sp),sp
    7c3e:	                rts

00007c40 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    7c40:	       subq.l #8,sp
    7c42:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    7c44:	   /-- bra.s 7c74 <clearStackLib+0x34>
		k = stackLib;
    7c46:	/--|-> move.l 17ba2 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    7c4e:	|  |   movea.l 17ba2 <stackLib>,a0
    7c54:	|  |   move.l 4(a0),d0
    7c58:	|  |   move.l d0,17ba2 <stackLib>
		FreeVec(k);
    7c5e:	|  |   move.l 8(sp),4(sp)
    7c64:	|  |   move.l 17b28 <SysBase>,d0
    7c6a:	|  |   movea.l d0,a6
    7c6c:	|  |   movea.l 4(sp),a1
    7c70:	|  |   jsr -690(a6)
	while (stackLib) {
    7c74:	|  \-> move.l 17ba2 <stackLib>,d0
    7c7a:	\----- bne.s 7c46 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    7c7c:	       clr.l 17b9e <stackLibTotal>
}
    7c82:	       nop
    7c84:	       movea.l (sp)+,a6
    7c86:	       addq.l #8,sp
    7c88:	       rts

00007c8a <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    7c8a:	          lea -128(sp),sp
    7c8e:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    7c92:	      /-- bra.s 7ca4 <loadGame+0x1a>
    7c94:	   /--|-> move.l 17ac4 <allRunningFunctions>,d0
    7c9a:	   |  |   move.l d0,-(sp)
    7c9c:	   |  |   jsr 2ba4 <finishFunction>
    7ca2:	   |  |   addq.l #4,sp
    7ca4:	   |  \-> move.l 17ac4 <allRunningFunctions>,d0
    7caa:	   \----- bne.s 7c94 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    7cac:	          pea 17ba6 <ssgVersion>
    7cb2:	          pea 150af <incbin_player_end+0x293>
    7cb8:	          pea 41 <_start+0x41>
    7cbc:	          pea 53 <_start+0x53>
    7cc0:	          move.l 160(sp),-(sp)
    7cc4:	          jsr 36b4 <openAndVerify>
    7cca:	          lea 20(sp),sp
    7cce:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    7cd2:	      /-- bne.s 7cda <loadGame+0x50>
    7cd4:	      |   clr.w d0
    7cd6:	/-----|-- bra.w 7f80 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    7cda:	|     \-> move.l 112(sp),108(sp)
    7ce0:	|         lea 140(sp),a0
    7ce4:	|         lea -126(a0),a0
    7ce8:	|         move.l a0,120(sp)
    7cec:	|         moveq #8,d0
    7cee:	|         move.l d0,116(sp)
    7cf2:	|         move.l 17b30 <DOSBase>,d0
    7cf8:	|         movea.l d0,a6
    7cfa:	|         move.l 108(sp),d1
    7cfe:	|         move.l 120(sp),d2
    7d02:	|         move.l 116(sp),d3
    7d06:	|         jsr -42(a6)
    7d0a:	|         move.l d0,132(sp)
    7d0e:	|         move.l 132(sp),d0
    7d12:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    7d16:	|         moveq #8,d0
    7d18:	|         cmp.l 128(sp),d0
    7d1c:	|     /-- beq.s 7d2c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    7d1e:	|     |   pea 150d0 <incbin_player_end+0x2b4>
    7d24:	|     |   jsr 12018 <KPrintF>
    7d2a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7d2c:	|     \-> move.l 14(sp),d1
    7d30:	|         move.l 17ace <fileTime>,d0
    7d36:	|         cmp.l d1,d0
    7d38:	|     /-- bne.s 7d48 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    7d3a:	|     |   move.l 18(sp),d1
    7d3e:	|     |   move.l 17ad2 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7d44:	|     |   cmp.l d1,d0
    7d46:	|  /--|-- beq.s 7d68 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    7d48:	|  |  \-> move.l 144(sp),-(sp)
    7d4c:	|  |      pea 150ec <incbin_player_end+0x2d0>
    7d52:	|  |      pea 151b3 <incbin_player_end+0x397>
    7d58:	|  |      jsr 12018 <KPrintF>
    7d5e:	|  |      lea 12(sp),sp
		return FALSE; 
    7d62:	|  |      clr.w d0
    7d64:	+--|----- bra.w 7f80 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    7d68:	|  \----> move.l 112(sp),124(sp)
    7d6e:	|         move.l 17b30 <DOSBase>,d0
    7d74:	|         movea.l d0,a6
    7d76:	|         move.l 124(sp),d1
    7d7a:	|         jsr -306(a6)
    7d7e:	|         move.l d0,136(sp)
    7d82:	|         move.l 136(sp),d0
    7d86:	|         move.l d0,d0
    7d88:	|         move.w d0,16000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    7d8e:	|         move.l 112(sp),100(sp)
    7d94:	|         move.l 17b30 <DOSBase>,d0
    7d9a:	|         movea.l d0,a6
    7d9c:	|         move.l 100(sp),d1
    7da0:	|         jsr -306(a6)
    7da4:	|         move.l d0,96(sp)
    7da8:	|         move.l 96(sp),d0
    7dac:	|         move.l d0,d0
    7dae:	|         move.w d0,17acc <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    7db4:	|         move.l 112(sp),92(sp)
    7dba:	|         move.l 17b30 <DOSBase>,d0
    7dc0:	|         movea.l d0,a6
    7dc2:	|         move.l 92(sp),d1
    7dc6:	|         jsr -306(a6)
    7dca:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    7dce:	|         move.l 112(sp),84(sp)
    7dd4:	|         move.l 17b30 <DOSBase>,d0
    7dda:	|         movea.l d0,a6
    7ddc:	|         move.l 84(sp),d1
    7de0:	|         jsr -306(a6)
    7de4:	|         move.l d0,80(sp)
    7de8:	|         move.l 80(sp),d0
    7dec:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    7df0:	|     /-- beq.s 7e24 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    7df2:	|     |   move.l 112(sp),-(sp)
    7df6:	|     |   jsr 6bc <get2bytes>
    7dfc:	|     |   addq.l #4,sp
    7dfe:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    7e02:	|     |   move.l 112(sp),-(sp)
    7e06:	|     |   jsr 6bc <get2bytes>
    7e0c:	|     |   addq.l #4,sp
    7e0e:	|     |   move.l d0,17c0a <fontHeight>
		charOrder = readString(fp);		
    7e14:	|     |   move.l 112(sp),-(sp)
    7e18:	|     |   jsr b02 <readString>
    7e1e:	|     |   addq.l #4,sp
    7e20:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    7e24:	|     \-> move.l 104(sp),70(sp)
    7e2a:	|         move.l 17b28 <SysBase>,d0
    7e30:	|         movea.l d0,a6
    7e32:	|         movea.l 70(sp),a1
    7e36:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    7e3a:	|         move.l 112(sp),-(sp)
    7e3e:	|         jsr 854 <getSigned>
    7e44:	|         addq.l #4,sp
    7e46:	|         move.w d0,16598 <fontSpace>

	killAllPeople ();
    7e4c:	|         jsr 65b8 <killAllPeople>
	killAllRegions ();
    7e52:	|         jsr 10b18 <killAllRegions>

	int camerX = get2bytes (fp);
    7e58:	|         move.l 112(sp),-(sp)
    7e5c:	|         jsr 6bc <get2bytes>
    7e62:	|         addq.l #4,sp
    7e64:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    7e68:	|         move.l 112(sp),-(sp)
    7e6c:	|         jsr 6bc <get2bytes>
    7e72:	|         addq.l #4,sp
    7e74:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    7e78:	|         move.l 112(sp),-(sp)
    7e7c:	|         jsr 7d8 <getFloat>
    7e82:	|         addq.l #4,sp
    7e84:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    7e88:	|         move.l 112(sp),54(sp)
    7e8e:	|         move.l 17b30 <DOSBase>,d0
    7e94:	|         movea.l d0,a6
    7e96:	|         move.l 54(sp),d1
    7e9a:	|         jsr -306(a6)
    7e9e:	|         move.l d0,50(sp)
    7ea2:	|         move.l 50(sp),d0
    7ea6:	|         move.l d0,d0
    7ea8:	|         move.b d0,16002 <brightnessLevel>

	loadHandlers (fp);
    7eae:	|         move.l 112(sp),-(sp)
    7eb2:	|         jsr 3614 <loadHandlers>
    7eb8:	|         addq.l #4,sp
	loadRegions (fp);
    7eba:	|         move.l 112(sp),-(sp)
    7ebe:	|         jsr 10b74 <loadRegions>
    7ec4:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    7ec6:	|         moveq #12,d0
    7ec8:	|         move.l d0,46(sp)
    7ecc:	|         clr.l 42(sp)
    7ed0:	|         move.l 17b28 <SysBase>,d0
    7ed6:	|         movea.l d0,a6
    7ed8:	|         move.l 46(sp),d0
    7edc:	|         move.l 42(sp),d1
    7ee0:	|         jsr -684(a6)
    7ee4:	|         move.l d0,38(sp)
    7ee8:	|         move.l 38(sp),d0
    7eec:	|         move.l d0,17a14 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    7ef2:	|         move.l 17a14 <mouseCursorAnim>,d0
    7ef8:	|     /-- bne.s 7f0c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    7efa:	|     |   pea 151bd <incbin_player_end+0x3a1>
    7f00:	|     |   jsr 12018 <KPrintF>
    7f06:	|     |   addq.l #4,sp
		return FALSE;
    7f08:	|     |   clr.w d0
    7f0a:	+-----|-- bra.s 7f80 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    7f0c:	|     \-> jsr 8c6a <nosnapshot>
	if (FGetC (fp)) {
    7f12:	|         move.l 112(sp),34(sp)
    7f18:	|         move.l 17b30 <DOSBase>,d0
    7f1e:	|         movea.l d0,a6
    7f20:	|         move.l 34(sp),d1
    7f24:	|         jsr -306(a6)
    7f28:	|         move.l d0,30(sp)
    7f2c:	|         move.l 30(sp),d0
    7f30:	|     /-- beq.s 7f46 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    7f32:	|     |   move.l 112(sp),-(sp)
    7f36:	|     |   jsr 8cb0 <restoreSnapshot>
    7f3c:	|     |   addq.l #4,sp
    7f3e:	|     |   tst.w d0
    7f40:	|     +-- bne.s 7f46 <loadGame+0x2bc>
    7f42:	|     |   clr.w d0
    7f44:	+-----|-- bra.s 7f80 <loadGame+0x2f6>
	}

	Close (fp);
    7f46:	|     \-> move.l 112(sp),26(sp)
    7f4c:	|         move.l 17b30 <DOSBase>,d0
    7f52:	|         movea.l d0,a6
    7f54:	|         move.l 26(sp),d1
    7f58:	|         jsr -36(a6)
    7f5c:	|         move.l d0,22(sp)
	clearStackLib ();
    7f60:	|         jsr 7c40 <clearStackLib>

	cameraX = camerX;
    7f66:	|         move.l 66(sp),17bd0 <cameraX>
	cameraY = camerY;
    7f6e:	|         move.l 62(sp),17bd4 <cameraY>
	cameraZoom = camerZ;
    7f76:	|         move.l 58(sp),16032 <cameraZoom>

	return TRUE;
    7f7e:	|         moveq #1,d0
}
    7f80:	\-------> movem.l (sp)+,d2-d3/a6
    7f84:	          lea 128(sp),sp
    7f88:	          rts

00007f8a <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    7f8a:	   /-> lea -64(sp),sp
    7f8e:	   |   move.l a6,-(sp)
    7f90:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    7f92:	   |   movea.l 76(sp),a0
    7f96:	   |   move.l (a0),d0
    7f98:	   |   move.l 80(sp),-(sp)
    7f9c:	   |   move.l d0,-(sp)
    7f9e:	   |   jsr 8d0 <put2bytes>
    7fa4:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    7fa6:	   |   movea.l 76(sp),a0
    7faa:	   |   move.l 36(a0),d0
    7fae:	/--|-- beq.s 7fea <saveFunction+0x60>
		FPutC (fp, 1);
    7fb0:	|  |   move.l 80(sp),52(sp)
    7fb6:	|  |   moveq #1,d0
    7fb8:	|  |   move.l d0,48(sp)
    7fbc:	|  |   move.l 17b30 <DOSBase>,d0
    7fc2:	|  |   movea.l d0,a6
    7fc4:	|  |   move.l 52(sp),d1
    7fc8:	|  |   move.l 48(sp),d2
    7fcc:	|  |   jsr -312(a6)
    7fd0:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    7fd4:	|  |   movea.l 76(sp),a0
    7fd8:	|  |   move.l 36(a0),d0
    7fdc:	|  |   move.l 80(sp),-(sp)
    7fe0:	|  |   move.l d0,-(sp)
    7fe2:	|  \-- jsr 7f8a <saveFunction>(pc)
    7fe6:	|      addq.l #8,sp
    7fe8:	|  /-- bra.s 800c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    7fea:	\--|-> move.l 80(sp),64(sp)
    7ff0:	   |   clr.l 60(sp)
    7ff4:	   |   move.l 17b30 <DOSBase>,d0
    7ffa:	   |   movea.l d0,a6
    7ffc:	   |   move.l 64(sp),d1
    8000:	   |   move.l 60(sp),d2
    8004:	   |   jsr -312(a6)
    8008:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    800c:	   \-> movea.l 76(sp),a0
    8010:	       move.l 12(a0),d0
    8014:	       move.l 80(sp),-(sp)
    8018:	       move.l d0,-(sp)
    801a:	       jsr 958 <put4bytes>
    8020:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8022:	       movea.l 76(sp),a0
    8026:	       move.l 32(a0),d0
    802a:	       move.l 80(sp),-(sp)
    802e:	       move.l d0,-(sp)
    8030:	       jsr 8d0 <put2bytes>
    8036:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8038:	       move.l 80(sp),40(sp)
    803e:	       movea.l 76(sp),a0
    8042:	       move.w 50(a0),d0
    8046:	       movea.w d0,a0
    8048:	       move.l a0,36(sp)
    804c:	       move.l 17b30 <DOSBase>,d0
    8052:	       movea.l d0,a6
    8054:	       move.l 40(sp),d1
    8058:	       move.l 36(sp),d2
    805c:	       jsr -312(a6)
    8060:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    8064:	       move.l 80(sp),28(sp)
    806a:	       movea.l 76(sp),a0
    806e:	       move.w 44(a0),d0
    8072:	       movea.w d0,a0
    8074:	       move.l a0,24(sp)
    8078:	       move.l 17b30 <DOSBase>,d0
    807e:	       movea.l d0,a6
    8080:	       move.l 28(sp),d1
    8084:	       move.l 24(sp),d2
    8088:	       jsr -312(a6)
    808c:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    8090:	       move.l 80(sp),16(sp)
    8096:	       movea.l 76(sp),a0
    809a:	       move.w 46(a0),d0
    809e:	       movea.w d0,a0
    80a0:	       move.l a0,12(sp)
    80a4:	       move.l 17b30 <DOSBase>,d0
    80aa:	       movea.l d0,a6
    80ac:	       move.l 16(sp),d1
    80b0:	       move.l 12(sp),d2
    80b4:	       jsr -312(a6)
    80b8:	       move.l d0,8(sp)
	saveVariable ((fun -> reg), fp);
    80bc:	       movea.l 76(sp),a0
    80c0:	       move.l 28(a0),d0
    80c4:	       move.l 80(sp),-(sp)
    80c8:	       move.l d0,-(sp)
    80ca:	       jsr 8848 <saveVariable>
    80d0:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    80d2:	       movea.l 76(sp),a0
    80d6:	       move.b 52(a0),d0
    80da:	   /-- beq.s 80ea <saveFunction+0x160>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    80dc:	   |   pea 151de <incbin_player_end+0x3c2>
    80e2:	   |   jsr 12018 <KPrintF>
    80e8:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    80ea:	   \-> movea.l 76(sp),a0
    80ee:	       move.l 24(a0),d0
    80f2:	       move.l 80(sp),-(sp)
    80f6:	       move.l d0,-(sp)
    80f8:	       jsr 86bc <saveStack>
    80fe:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8100:	       clr.l 68(sp)
    8104:	   /-- bra.s 8128 <saveFunction+0x19e>
		saveVariable (& (fun -> localVars[a]), fp);
    8106:	/--|-> movea.l 76(sp),a0
    810a:	|  |   move.l 20(a0),d1
    810e:	|  |   move.l 68(sp),d0
    8112:	|  |   lsl.l #3,d0
    8114:	|  |   add.l d1,d0
    8116:	|  |   move.l 80(sp),-(sp)
    811a:	|  |   move.l d0,-(sp)
    811c:	|  |   jsr 8848 <saveVariable>
    8122:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8124:	|  |   addq.l #1,68(sp)
    8128:	|  \-> movea.l 76(sp),a0
    812c:	|      move.l 8(a0),d0
    8130:	|      cmp.l 68(sp),d0
    8134:	\----- bgt.s 8106 <saveFunction+0x17c>
	}
}
    8136:	       nop
    8138:	       nop
    813a:	       move.l (sp)+,d2
    813c:	       movea.l (sp)+,a6
    813e:	       lea 64(sp),sp
    8142:	       rts

00008144 <saveGame>:

BOOL saveGame (char * fname) {
    8144:	          lea -272(sp),sp
    8148:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    814c:	          move.l 288(sp),268(sp)
    8152:	          move.l #1006,264(sp)
    815a:	          move.l 17b30 <DOSBase>,d0
    8160:	          movea.l d0,a6
    8162:	          move.l 268(sp),d1
    8166:	          move.l 264(sp),d2
    816a:	          jsr -30(a6)
    816e:	          move.l d0,260(sp)
    8172:	          move.l 260(sp),d0
    8176:	          move.l d0,256(sp)
	if (fp == NULL) {
    817a:	      /-- bne.s 8190 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    817c:	      |   pea 15200 <incbin_player_end+0x3e4>
    8182:	      |   jsr 12018 <KPrintF>
    8188:	      |   addq.l #4,sp
		return FALSE;
    818a:	      |   clr.w d0
    818c:	/-----|-- bra.w 86b2 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    8190:	|     \-> move.l 256(sp),252(sp)
    8196:	|         move.l #86557,248(sp)
    819e:	|         moveq #6,d0
    81a0:	|         move.l d0,244(sp)
    81a4:	|         move.l 17b30 <DOSBase>,d0
    81aa:	|         movea.l d0,a6
    81ac:	|         move.l 252(sp),d1
    81b0:	|         move.l 248(sp),d2
    81b4:	|         move.l 244(sp),d3
    81b8:	|         jsr -48(a6)
    81bc:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    81c0:	|         move.l 256(sp),236(sp)
    81c6:	|         clr.l 232(sp)
    81ca:	|         move.l 17b30 <DOSBase>,d0
    81d0:	|         movea.l d0,a6
    81d2:	|         move.l 236(sp),d1
    81d6:	|         move.l 232(sp),d2
    81da:	|         jsr -312(a6)
    81de:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    81e2:	|         move.l 256(sp),224(sp)
    81e8:	|         clr.l 220(sp)
    81ec:	|         move.l 17b30 <DOSBase>,d0
    81f2:	|         movea.l d0,a6
    81f4:	|         move.l 224(sp),d1
    81f8:	|         move.l 220(sp),d2
    81fc:	|         jsr -312(a6)
    8200:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    8204:	|         move.l 256(sp),212(sp)
    820a:	|         moveq #2,d0
    820c:	|         move.l d0,208(sp)
    8210:	|         move.l 17b30 <DOSBase>,d0
    8216:	|         movea.l d0,a6
    8218:	|         move.l 212(sp),d1
    821c:	|         move.l 208(sp),d2
    8220:	|         jsr -312(a6)
    8224:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8228:	|         move.l 256(sp),200(sp)
    822e:	|         moveq #2,d0
    8230:	|         move.l d0,196(sp)
    8234:	|         move.l 17b30 <DOSBase>,d0
    823a:	|         movea.l d0,a6
    823c:	|         move.l 200(sp),d1
    8240:	|         move.l 196(sp),d2
    8244:	|         jsr -312(a6)
    8248:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    824c:	|         move.l 256(sp),188(sp)
    8252:	|         move.l #96974,184(sp)
    825a:	|         moveq #8,d0
    825c:	|         move.l d0,180(sp)
    8260:	|         move.l 17b30 <DOSBase>,d0
    8266:	|         movea.l d0,a6
    8268:	|         move.l 188(sp),d1
    826c:	|         move.l 184(sp),d2
    8270:	|         move.l 180(sp),d3
    8274:	|         jsr -48(a6)
    8278:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    827c:	|         move.l 256(sp),172(sp)
    8282:	|         move.w 16000 <allowAnyFilename>,d0
    8288:	|         movea.w d0,a0
    828a:	|         move.l a0,168(sp)
    828e:	|         move.l 17b30 <DOSBase>,d0
    8294:	|         movea.l d0,a6
    8296:	|         move.l 172(sp),d1
    829a:	|         move.l 168(sp),d2
    829e:	|         jsr -312(a6)
    82a2:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    82a6:	|         move.l 256(sp),160(sp)
    82ac:	|         move.w 17acc <captureAllKeys>,d0
    82b2:	|         movea.w d0,a0
    82b4:	|         move.l a0,156(sp)
    82b8:	|         move.l 17b30 <DOSBase>,d0
    82be:	|         movea.l d0,a6
    82c0:	|         move.l 160(sp),d1
    82c4:	|         move.l 156(sp),d2
    82c8:	|         jsr -312(a6)
    82cc:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    82d0:	|         move.l 256(sp),148(sp)
    82d6:	|         moveq #1,d0
    82d8:	|         move.l d0,144(sp)
    82dc:	|         move.l 17b30 <DOSBase>,d0
    82e2:	|         movea.l d0,a6
    82e4:	|         move.l 148(sp),d1
    82e8:	|         move.l 144(sp),d2
    82ec:	|         jsr -312(a6)
    82f0:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    82f4:	|         move.l 256(sp),136(sp)
    82fa:	|         move.l 17c16 <fontTableSize>,d0
    8300:	|         sgt d0
    8302:	|         neg.b d0
    8304:	|         move.b d0,d0
    8306:	|         andi.l #255,d0
    830c:	|         move.l d0,132(sp)
    8310:	|         move.l 17b30 <DOSBase>,d0
    8316:	|         movea.l d0,a6
    8318:	|         move.l 136(sp),d1
    831c:	|         move.l 132(sp),d2
    8320:	|         jsr -312(a6)
    8324:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8328:	|         move.l 17c16 <fontTableSize>,d0
    832e:	|     /-- ble.s 836c <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    8330:	|     |   move.l 17c0e <loadedFontNum>,d0
    8336:	|     |   move.l 256(sp),-(sp)
    833a:	|     |   move.l d0,-(sp)
    833c:	|     |   jsr 8d0 <put2bytes>
    8342:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    8344:	|     |   move.l 17c0a <fontHeight>,d0
    834a:	|     |   move.l 256(sp),-(sp)
    834e:	|     |   move.l d0,-(sp)
    8350:	|     |   jsr 8d0 <put2bytes>
    8356:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    8358:	|     |   move.l 17c12 <fontOrderString>,d0
    835e:	|     |   move.l 256(sp),-(sp)
    8362:	|     |   move.l d0,-(sp)
    8364:	|     |   jsr bd8 <writeString>
    836a:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    836c:	|     \-> move.w 16598 <fontSpace>,d0
    8372:	|         movea.w d0,a0
    8374:	|         move.l 256(sp),-(sp)
    8378:	|         move.l a0,-(sp)
    837a:	|         jsr a9c <putSigned>
    8380:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    8382:	|         move.l 17bd0 <cameraX>,d0
    8388:	|         move.l 256(sp),-(sp)
    838c:	|         move.l d0,-(sp)
    838e:	|         jsr 8d0 <put2bytes>
    8394:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    8396:	|         move.l 17bd4 <cameraY>,d0
    839c:	|         move.l 256(sp),-(sp)
    83a0:	|         move.l d0,-(sp)
    83a2:	|         jsr 8d0 <put2bytes>
    83a8:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    83aa:	|         move.l 16032 <cameraZoom>,d0
    83b0:	|         move.l 256(sp),-(sp)
    83b4:	|         move.l d0,-(sp)
    83b6:	|         jsr a46 <putFloat>
    83bc:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    83be:	|         move.l 256(sp),124(sp)
    83c4:	|         move.b 16002 <brightnessLevel>,d0
    83ca:	|         move.b d0,d0
    83cc:	|         andi.l #255,d0
    83d2:	|         move.l d0,120(sp)
    83d6:	|         move.l 17b30 <DOSBase>,d0
    83dc:	|         movea.l d0,a6
    83de:	|         move.l 124(sp),d1
    83e2:	|         move.l 120(sp),d2
    83e6:	|         jsr -312(a6)
    83ea:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    83ee:	|         move.l 256(sp),-(sp)
    83f2:	|         jsr 3b98 <saveHandlers>
    83f8:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    83fa:	|         move.l 256(sp),-(sp)
    83fe:	|         jsr 10d2e <saveRegions>
    8404:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8406:	|         move.l 17a14 <mouseCursorAnim>,d0
    840c:	|         move.l 256(sp),-(sp)
    8410:	|         move.l d0,-(sp)
    8412:	|         jsr 6ae6 <saveAnim>
    8418:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    841a:	|         move.l 17a18 <mouseCursorFrameNum>,d0
    8420:	|         move.l 256(sp),-(sp)
    8424:	|         move.l d0,-(sp)
    8426:	|         jsr 8d0 <put2bytes>
    842c:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    842e:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    8436:	|         clr.l 272(sp)
	while (thisFunction) {
    843a:	|     /-- bra.s 844a <saveGame+0x306>
		countFunctions ++;
    843c:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    8440:	|  |  |   movea.l 276(sp),a0
    8444:	|  |  |   move.l 40(a0),276(sp)
	while (thisFunction) {
    844a:	|  |  \-> tst.l 276(sp)
    844e:	|  \----- bne.s 843c <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    8450:	|         move.l 256(sp),-(sp)
    8454:	|         move.l 276(sp),-(sp)
    8458:	|         jsr 8d0 <put2bytes>
    845e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    8460:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    8468:	|     /-- bra.s 8484 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    846a:	|  /--|-> move.l 256(sp),-(sp)
    846e:	|  |  |   move.l 280(sp),-(sp)
    8472:	|  |  |   jsr 7f8a <saveFunction>
    8478:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    847a:	|  |  |   movea.l 276(sp),a0
    847e:	|  |  |   move.l 40(a0),276(sp)
	while (thisFunction) {
    8484:	|  |  \-> tst.l 276(sp)
    8488:	|  \----- bne.s 846a <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    848a:	|         clr.l 280(sp)
    848e:	|     /-- bra.s 84b0 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    8490:	|  /--|-> move.l 17ada <globalVars>,d1
    8496:	|  |  |   move.l 280(sp),d0
    849a:	|  |  |   lsl.l #3,d0
    849c:	|  |  |   add.l d1,d0
    849e:	|  |  |   move.l 256(sp),-(sp)
    84a2:	|  |  |   move.l d0,-(sp)
    84a4:	|  |  |   jsr 8848 <saveVariable>
    84aa:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    84ac:	|  |  |   addq.l #1,280(sp)
    84b0:	|  |  \-> move.l 17b00 <numGlobals>,d0
    84b6:	|  |      cmp.l 280(sp),d0
    84ba:	|  \----- bgt.s 8490 <saveGame+0x34c>
	}

	savePeople (fp);
    84bc:	|         move.l 256(sp),-(sp)
    84c0:	|         jsr 6c0e <savePeople>
    84c6:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    84c8:	|         movea.l 17c22 <currentFloor>,a0
    84ce:	|         move.l 8(a0),d0
    84d2:	|  /----- beq.s 8510 <saveGame+0x3cc>
		FPutC (fp, 1);
    84d4:	|  |      move.l 256(sp),100(sp)
    84da:	|  |      moveq #1,d0
    84dc:	|  |      move.l d0,96(sp)
    84e0:	|  |      move.l 17b30 <DOSBase>,d0
    84e6:	|  |      movea.l d0,a6
    84e8:	|  |      move.l 100(sp),d1
    84ec:	|  |      move.l 96(sp),d2
    84f0:	|  |      jsr -312(a6)
    84f4:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    84f8:	|  |      movea.l 17c22 <currentFloor>,a0
    84fe:	|  |      move.l (a0),d0
    8500:	|  |      move.l 256(sp),-(sp)
    8504:	|  |      move.l d0,-(sp)
    8506:	|  |      jsr 8d0 <put2bytes>
    850c:	|  |      addq.l #8,sp
    850e:	|  |  /-- bra.s 8532 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    8510:	|  \--|-> move.l 256(sp),112(sp)
    8516:	|     |   clr.l 108(sp)
    851a:	|     |   move.l 17b30 <DOSBase>,d0
    8520:	|     |   movea.l d0,a6
    8522:	|     |   move.l 112(sp),d1
    8526:	|     |   move.l 108(sp),d2
    852a:	|     |   jsr -312(a6)
    852e:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    8532:	|     \-> move.l 17a98 <zBuffer+0x50>,d0
    8538:	|  /----- beq.s 8574 <saveGame+0x430>
		FPutC (fp, 1);
    853a:	|  |      move.l 256(sp),76(sp)
    8540:	|  |      moveq #1,d0
    8542:	|  |      move.l d0,72(sp)
    8546:	|  |      move.l 17b30 <DOSBase>,d0
    854c:	|  |      movea.l d0,a6
    854e:	|  |      move.l 76(sp),d1
    8552:	|  |      move.l 72(sp),d2
    8556:	|  |      jsr -312(a6)
    855a:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    855e:	|  |      move.l 17a94 <zBuffer+0x4c>,d0
    8564:	|  |      move.l 256(sp),-(sp)
    8568:	|  |      move.l d0,-(sp)
    856a:	|  |      jsr 8d0 <put2bytes>
    8570:	|  |      addq.l #8,sp
    8572:	|  |  /-- bra.s 8596 <saveGame+0x452>
	} else FPutC (fp,0);
    8574:	|  \--|-> move.l 256(sp),88(sp)
    857a:	|     |   clr.l 84(sp)
    857e:	|     |   move.l 17b30 <DOSBase>,d0
    8584:	|     |   movea.l d0,a6
    8586:	|     |   move.l 88(sp),d1
    858a:	|     |   move.l 84(sp),d2
    858e:	|     |   jsr -312(a6)
    8592:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    8596:	|     \-> move.l 256(sp),64(sp)
    859c:	|         move.l 17be4 <speechMode>,60(sp)
    85a4:	|         move.l 17b30 <DOSBase>,d0
    85aa:	|         movea.l d0,a6
    85ac:	|         move.l 64(sp),d1
    85b0:	|         move.l 60(sp),d2
    85b4:	|         jsr -312(a6)
    85b8:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    85bc:	|         move.b 1656e <fadeMode>,d0
    85c2:	|         move.b d0,d0
    85c4:	|         andi.l #255,d0
    85ca:	|         move.l d0,52(sp)
    85ce:	|         move.l 256(sp),48(sp)
    85d4:	|         move.l 17b30 <DOSBase>,d0
    85da:	|         movea.l d0,a6
    85dc:	|         move.l 52(sp),d1
    85e0:	|         move.l 48(sp),d2
    85e4:	|         jsr -312(a6)
    85e8:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    85ec:	|         move.l 17b72 <speech>,d0
    85f2:	|         move.l 256(sp),-(sp)
    85f6:	|         move.l d0,-(sp)
    85f8:	|         jsr 4f12 <saveSpeech>
    85fe:	|         addq.l #8,sp
	saveStatusBars (fp);
    8600:	|         move.l 256(sp),-(sp)
    8604:	|         jsr 490e <saveStatusBars>
    860a:	|         addq.l #4,sp
	saveSounds (fp);
    860c:	|         move.l 256(sp),-(sp)
    8610:	|         jsr 898c <saveSounds>
    8616:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    8618:	|         move.w 17bce <saveEncoding>,d0
    861e:	|         move.w d0,d0
    8620:	|         andi.l #65535,d0
    8626:	|         move.l 256(sp),-(sp)
    862a:	|         move.l d0,-(sp)
    862c:	|         jsr 8d0 <put2bytes>
    8632:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    8634:	|         move.l 17bb8 <parallaxStuff>,d0
    863a:	|         move.l 256(sp),-(sp)
    863e:	|         move.l d0,-(sp)
    8640:	|         jsr 8cd6 <saveParallaxRecursive>
    8646:	|         addq.l #8,sp
	FPutC (fp, 0);
    8648:	|         move.l 256(sp),40(sp)
    864e:	|         clr.l 36(sp)
    8652:	|         move.l 17b30 <DOSBase>,d0
    8658:	|         movea.l d0,a6
    865a:	|         move.l 40(sp),d1
    865e:	|         move.l 36(sp),d2
    8662:	|         jsr -312(a6)
    8666:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    866a:	|         move.l 256(sp),28(sp)
    8670:	|         move.l 16008 <languageNum>,24(sp)
    8678:	|         move.l 17b30 <DOSBase>,d0
    867e:	|         movea.l d0,a6
    8680:	|         move.l 28(sp),d1
    8684:	|         move.l 24(sp),d2
    8688:	|         jsr -312(a6)
    868c:	|         move.l d0,20(sp)

	Close(fp);
    8690:	|         move.l 256(sp),16(sp)
    8696:	|         move.l 17b30 <DOSBase>,d0
    869c:	|         movea.l d0,a6
    869e:	|         move.l 16(sp),d1
    86a2:	|         jsr -36(a6)
    86a6:	|         move.l d0,12(sp)
	clearStackLib ();
    86aa:	|         jsr 7c40 <clearStackLib>
	return TRUE;
    86b0:	|         moveq #1,d0
}
    86b2:	\-------> movem.l (sp)+,d2-d3/a6
    86b6:	          lea 272(sp),sp
    86ba:	          rts

000086bc <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    86bc:	       lea -12(sp),sp
	int elements = 0;
    86c0:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    86c4:	       move.l 16(sp),(sp)
	while (search) {
    86c8:	   /-- bra.s 86d4 <saveStack+0x18>
		elements ++;
    86ca:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    86ce:	|  |   movea.l (sp),a0
    86d0:	|  |   move.l 8(a0),(sp)
	while (search) {
    86d4:	|  \-> tst.l (sp)
    86d6:	\----- bne.s 86ca <saveStack+0xe>
	}

	put2bytes (elements, fp);
    86d8:	       move.l 20(sp),-(sp)
    86dc:	       move.l 12(sp),-(sp)
    86e0:	       jsr 8d0 <put2bytes>
    86e6:	       addq.l #8,sp
	search = vs;
    86e8:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    86ec:	       clr.l 4(sp)
    86f0:	   /-- bra.s 870c <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    86f2:	/--|-> move.l (sp),d0
    86f4:	|  |   move.l 20(sp),-(sp)
    86f8:	|  |   move.l d0,-(sp)
    86fa:	|  |   jsr 8848 <saveVariable>
    8700:	|  |   addq.l #8,sp
		search = search -> next;
    8702:	|  |   movea.l (sp),a0
    8704:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    8708:	|  |   addq.l #1,4(sp)
    870c:	|  \-> move.l 4(sp),d0
    8710:	|      cmp.l 8(sp),d0
    8714:	\----- blt.s 86f2 <saveStack+0x36>
	}
}
    8716:	       nop
    8718:	       nop
    871a:	       lea 12(sp),sp
    871e:	       rts

00008720 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    8720:	             lea -44(sp),sp
    8724:	             move.l a6,-(sp)
    8726:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    8728:	             move.l 17ba2 <stackLib>,48(sp)
	int a = 0;
    8730:	             clr.l 44(sp)
	while (s) {
    8734:	      /----- bra.s 8792 <saveStackRef+0x72>
		if (s -> stack == vs) {
    8736:	   /--|----> movea.l 48(sp),a0
    873a:	   |  |      move.l (a0),d0
    873c:	   |  |      cmp.l 56(sp),d0
    8740:	   |  |  /-- bne.s 8784 <saveStackRef+0x64>
			FPutC (fp, 1);
    8742:	   |  |  |   move.l 60(sp),16(sp)
    8748:	   |  |  |   moveq #1,d0
    874a:	   |  |  |   move.l d0,12(sp)
    874e:	   |  |  |   move.l 17b30 <DOSBase>,d0
    8754:	   |  |  |   movea.l d0,a6
    8756:	   |  |  |   move.l 16(sp),d1
    875a:	   |  |  |   move.l 12(sp),d2
    875e:	   |  |  |   jsr -312(a6)
    8762:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    8766:	   |  |  |   move.l 17b9e <stackLibTotal>,d0
    876c:	   |  |  |   sub.l 44(sp),d0
    8770:	   |  |  |   move.l 60(sp),-(sp)
    8774:	   |  |  |   move.l d0,-(sp)
    8776:	   |  |  |   jsr 8d0 <put2bytes>
    877c:	   |  |  |   addq.l #8,sp
			return TRUE;
    877e:	   |  |  |   moveq #1,d0
    8780:	/--|--|--|-- bra.w 883e <saveStackRef+0x11e>
		}
		s = s -> next;
    8784:	|  |  |  \-> movea.l 48(sp),a0
    8788:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    878e:	|  |  |      addq.l #1,44(sp)
	while (s) {
    8792:	|  |  \----> tst.l 48(sp)
    8796:	|  \-------- bne.s 8736 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    8798:	|            move.l 60(sp),40(sp)
    879e:	|            clr.l 36(sp)
    87a2:	|            move.l 17b30 <DOSBase>,d0
    87a8:	|            movea.l d0,a6
    87aa:	|            move.l 40(sp),d1
    87ae:	|            move.l 36(sp),d2
    87b2:	|            jsr -312(a6)
    87b6:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    87ba:	|            movea.l 56(sp),a0
    87be:	|            move.l (a0),d0
    87c0:	|            move.l 60(sp),-(sp)
    87c4:	|            move.l d0,-(sp)
    87c6:	|            jsr 86bc <saveStack>
    87cc:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    87ce:	|            moveq #8,d0
    87d0:	|            move.l d0,28(sp)
    87d4:	|            clr.l 24(sp)
    87d8:	|            move.l 17b28 <SysBase>,d0
    87de:	|            movea.l d0,a6
    87e0:	|            move.l 28(sp),d0
    87e4:	|            move.l 24(sp),d1
    87e8:	|            jsr -684(a6)
    87ec:	|            move.l d0,20(sp)
    87f0:	|            move.l 20(sp),d0
    87f4:	|            move.l d0,48(sp)
	stackLibTotal ++;
    87f8:	|            move.l 17b9e <stackLibTotal>,d0
    87fe:	|            addq.l #1,d0
    8800:	|            move.l d0,17b9e <stackLibTotal>
	if (! s) {
    8806:	|            tst.l 48(sp)
    880a:	|        /-- bne.s 881e <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    880c:	|        |   pea 1524c <incbin_player_end+0x430>
    8812:	|        |   jsr 12018 <KPrintF>
    8818:	|        |   addq.l #4,sp
		return FALSE;
    881a:	|        |   clr.w d0
    881c:	+--------|-- bra.s 883e <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    881e:	|        \-> move.l 17ba2 <stackLib>,d0
    8824:	|            movea.l 48(sp),a0
    8828:	|            move.l d0,4(a0)
	s -> stack = vs;
    882c:	|            movea.l 48(sp),a0
    8830:	|            move.l 56(sp),(a0)
	stackLib = s;
    8834:	|            move.l 48(sp),17ba2 <stackLib>
	return TRUE;
    883c:	|            moveq #1,d0
}
    883e:	\----------> move.l (sp)+,d2
    8840:	             movea.l (sp)+,a6
    8842:	             lea 44(sp),sp
    8846:	             rts

00008848 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    8848:	          lea -12(sp),sp
    884c:	          move.l a6,-(sp)
    884e:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    8850:	          move.l 28(sp),16(sp)
    8856:	          movea.l 24(sp),a0
    885a:	          move.l (a0),d0
    885c:	          move.l d0,12(sp)
    8860:	          move.l 17b30 <DOSBase>,d0
    8866:	          movea.l d0,a6
    8868:	          move.l 16(sp),d1
    886c:	          move.l 12(sp),d2
    8870:	          jsr -312(a6)
    8874:	          move.l d0,8(sp)
	switch (from -> varType) {
    8878:	          movea.l 24(sp),a0
    887c:	          move.l (a0),d0
    887e:	          moveq #9,d1
    8880:	          cmp.l d0,d1
    8882:	      /-- bcs.w 8932 <saveVariable+0xea>
    8886:	      |   add.l d0,d0
    8888:	      |   movea.l d0,a0
    888a:	      |   adda.l #34966,a0
    8890:	      |   move.w (a0),d0
    8892:	      |   jmp (8896 <saveVariable+0x4e>,pc,d0.w)
    8896:	      |   ori.l #1310740,(a0)+
    889c:	      |   ori.b #20,(20,a0,d0.w)
    88a2:	      |   .short 0x004c
    88a4:	      |   ori.b #126,(a4)
    88a8:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    88ac:	      |   ori.b #40,(a0)+
    88b0:	      |   ori.b #47,d4
    88b4:	      |   ori.b #0,(a4)+
    88b8:	      |   jsr 958 <put4bytes>
    88be:	      |   addq.l #8,sp
		return TRUE;
    88c0:	      |   moveq #1,d0
    88c2:	/-----|-- bra.w 896e <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    88c6:	|     |   movea.l 24(sp),a0
    88ca:	|     |   move.l 4(a0),d0
    88ce:	|     |   move.l 28(sp),-(sp)
    88d2:	|     |   move.l d0,-(sp)
    88d4:	|     |   jsr bd8 <writeString>
    88da:	|     |   addq.l #8,sp
		return TRUE;
    88dc:	|     |   moveq #1,d0
    88de:	+-----|-- bra.w 896e <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    88e2:	|     |   movea.l 24(sp),a0
    88e6:	|     |   move.l 4(a0),d0
    88ea:	|     |   move.l 28(sp),-(sp)
    88ee:	|     |   move.l d0,-(sp)
    88f0:	|     |   jsr 8720 <saveStackRef>
    88f6:	|     |   addq.l #8,sp
    88f8:	+-----|-- bra.s 896e <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    88fa:	|     |   movea.l 24(sp),a0
    88fe:	|     |   move.l 4(a0),d0
    8902:	|     |   move.l 28(sp),-(sp)
    8906:	|     |   move.l d0,-(sp)
    8908:	|     |   jsr 6bb0 <saveCostume>
    890e:	|     |   addq.l #8,sp
		return FALSE;
    8910:	|     |   clr.w d0
    8912:	+-----|-- bra.s 896e <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    8914:	|     |   movea.l 24(sp),a0
    8918:	|     |   move.l 4(a0),d0
    891c:	|     |   move.l 28(sp),-(sp)
    8920:	|     |   move.l d0,-(sp)
    8922:	|     |   jsr 6ae6 <saveAnim>
    8928:	|     |   addq.l #8,sp
		return FALSE;
    892a:	|     |   clr.w d0
    892c:	+-----|-- bra.s 896e <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    892e:	|     |   clr.w d0
    8930:	+-----|-- bra.s 896e <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    8932:	|     \-> movea.l 24(sp),a0
    8936:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8938:	|         moveq #10,d1
    893a:	|         cmp.l d0,d1
    893c:	|  /----- bcs.s 8956 <saveVariable+0x10e>
						typeName[from->varType] :
    893e:	|  |      movea.l 24(sp),a0
    8942:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8944:	|  |      add.l d0,d0
    8946:	|  |      movea.l d0,a1
    8948:	|  |      adda.l d0,a1
    894a:	|  |      lea 16570 <typeName>,a0
    8950:	|  |      move.l (0,a1,a0.l),d0
    8954:	|  |  /-- bra.s 895c <saveVariable+0x114>
    8956:	|  \--|-> move.l #86641,d0
    895c:	|     \-> move.l d0,-(sp)
    895e:	|         pea 15278 <incbin_player_end+0x45c>
    8964:	|         jsr 12018 <KPrintF>
    896a:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    896c:	|         moveq #1,d0
    896e:	\-------> move.l (sp)+,d2
    8970:	          movea.l (sp)+,a6
    8972:	          lea 12(sp),sp
    8976:	          rts

00008978 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    8978:	moveq #0,d0
}
    897a:	rts

0000897c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    897c:	nop
    897e:	rts

00008980 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    8980:	nop
    8982:	rts

00008984 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    8984:	moveq #1,d0
}
    8986:	rts

00008988 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    8988:	nop
    898a:	rts

0000898c <saveSounds>:

void saveSounds (BPTR fp) {
    898c:	lea -12(sp),sp
    8990:	move.l a6,-(sp)
    8992:	move.l d2,-(sp)
	FPutC (fp,0);
    8994:	move.l 24(sp),16(sp)
    899a:	clr.l 12(sp)
    899e:	move.l 17b30 <DOSBase>,d0
    89a4:	movea.l d0,a6
    89a6:	move.l 16(sp),d1
    89aa:	move.l 12(sp),d2
    89ae:	jsr -312(a6)
    89b2:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    89b6:	move.l 1602e <defSoundVol>,d0
    89bc:	move.l 24(sp),-(sp)
    89c0:	move.l d0,-(sp)
    89c2:	jsr 8d0 <put2bytes>
    89c8:	addq.l #8,sp
	put2bytes (defVol, fp);
    89ca:	move.l 1602a <defVol>,d0
    89d0:	move.l 24(sp),-(sp)
    89d4:	move.l d0,-(sp)
    89d6:	jsr 8d0 <put2bytes>
    89dc:	addq.l #8,sp
}
    89de:	nop
    89e0:	move.l (sp)+,d2
    89e2:	movea.l (sp)+,a6
    89e4:	lea 12(sp),sp
    89e8:	rts

000089ea <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    89ea:	move.l 4(sp),1602a <defVol>
}
    89f2:	nop
    89f4:	rts

000089f6 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    89f6:	move.l 4(sp),1602e <defSoundVol>
}
    89fe:	nop
    8a00:	rts

00008a02 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    8a02:	nop
    8a04:	rts

00008a06 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    8a06:	nop
    8a08:	rts

00008a0a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    8a0a:	nop
    8a0c:	rts

00008a0e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    8a0e:	subq.l #4,sp
    8a10:	move.l 12(sp),d0
    8a14:	move.w d0,d0
    8a16:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    8a1a:	moveq #1,d0
}
    8a1c:	addq.l #4,sp
    8a1e:	rts

00008a20 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    8a20:	nop
    8a22:	rts

00008a24 <blankScreen>:
int lightMapNumber;
int viewportHeight, viewportWidth;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
    8a24:	                lea -24(sp),sp
	if (y1 < 0) y1 = 0;
    8a28:	                tst.l 32(sp)
    8a2c:	            /-- bge.s 8a32 <blankScreen+0xe>
    8a2e:	            |   clr.l 32(sp)
	if (x1 < 0) x1 = 0;
    8a32:	            \-> tst.l 28(sp)
    8a36:	            /-- bge.s 8a3c <blankScreen+0x18>
    8a38:	            |   clr.l 28(sp)
	if (x2 > (int)sceneWidth) x2 = (int)sceneWidth;
    8a3c:	            \-> move.l 17baa <sceneWidth>,d0
    8a42:	                cmp.l 36(sp),d0
    8a46:	            /-- bge.s 8a52 <blankScreen+0x2e>
    8a48:	            |   move.l 17baa <sceneWidth>,d0
    8a4e:	            |   move.l d0,36(sp)
	if (y2 > (int)sceneHeight) y2 = (int)sceneHeight;
    8a52:	            \-> move.l 17bae <sceneHeight>,d0
    8a58:	                cmp.l 40(sp),d0
    8a5c:	            /-- bge.s 8a68 <blankScreen+0x44>
    8a5e:	            |   move.l 17bae <sceneHeight>,d0
    8a64:	            |   move.l d0,40(sp)

	int picWidth = x2 - x1;
    8a68:	            \-> move.l 36(sp),d0
    8a6c:	                sub.l 28(sp),d0
    8a70:	                move.l d0,12(sp)
	int picHeight = y2 - y1;
    8a74:	                move.l 40(sp),d0
    8a78:	                sub.l 32(sp),d0
    8a7c:	                move.l d0,8(sp)

	//setPixelCoords(TRUE);

	int xoffset = 0;
    8a80:	                clr.l 20(sp)
	while (xoffset < picWidth) {
    8a84:	   /----------- bra.s 8ae6 <blankScreen+0xc2>
		int w = (picWidth - xoffset < viewportWidth) ? picWidth - xoffset : viewportWidth;
    8a86:	/--|----------> move.l 12(sp),d0
    8a8a:	|  |            sub.l 20(sp),d0
    8a8e:	|  |            move.l 17bc0 <viewportWidth>,d1
    8a94:	|  |            cmp.l d0,d1
    8a96:	|  |        /-- bge.s 8a9a <blankScreen+0x76>
    8a98:	|  |        |   move.l d1,d0
    8a9a:	|  |        \-> move.l d0,4(sp)

		int yoffset = 0;
    8a9e:	|  |            clr.l 16(sp)
		while (yoffset < picHeight) {
    8aa2:	|  |     /----- bra.s 8ad2 <blankScreen+0xae>
			int h = (picHeight - yoffset < viewportHeight) ? picHeight - yoffset : viewportHeight;
    8aa4:	|  |  /--|----> move.l 8(sp),d0
    8aa8:	|  |  |  |      sub.l 16(sp),d0
    8aac:	|  |  |  |      move.l 17bbc <viewportHeight>,d1
    8ab2:	|  |  |  |      cmp.l d0,d1
    8ab4:	|  |  |  |  /-- bge.s 8ab8 <blankScreen+0x94>
    8ab6:	|  |  |  |  |   move.l d1,d0
    8ab8:	|  |  |  |  \-> move.l d0,(sp)
		
			KPrintF("Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8aba:	|  |  |  |      pea 1529b <incbin_player_end+0x47f>
    8ac0:	|  |  |  |      jsr 12018 <KPrintF>
    8ac6:	|  |  |  |      addq.l #4,sp

			yoffset += viewportHeight;
    8ac8:	|  |  |  |      move.l 17bbc <viewportHeight>,d0
    8ace:	|  |  |  |      add.l d0,16(sp)
		while (yoffset < picHeight) {
    8ad2:	|  |  |  \----> move.l 16(sp),d0
    8ad6:	|  |  |         cmp.l 8(sp),d0
    8ada:	|  |  \-------- blt.s 8aa4 <blankScreen+0x80>
		}
		xoffset += viewportWidth;
    8adc:	|  |            move.l 17bc0 <viewportWidth>,d0
    8ae2:	|  |            add.l d0,20(sp)
	while (xoffset < picWidth) {
    8ae6:	|  \----------> move.l 20(sp),d0
    8aea:	|               cmp.l 12(sp),d0
    8aee:	\-------------- blt.s 8a86 <blankScreen+0x62>
	}

	//setPixelCoords(FALSE);
}
    8af0:	                nop
    8af2:	                nop
    8af4:	                lea 24(sp),sp
    8af8:	                rts

00008afa <darkScreen>:

void darkScreen () {
	KPrintF("Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8afa:	pea 1529b <incbin_player_end+0x47f>
    8b00:	jsr 12018 <KPrintF>
    8b06:	addq.l #4,sp
}
    8b08:	nop
    8b0a:	rts

00008b0c <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    8b0c:	movea.l 8(sp),a1
    8b10:	movea.l 12(sp),a0
    8b14:	move.l 8(sp),d1
    8b18:	move.l 4(sp),d0
    8b1c:	move.l a1,-(sp)
    8b1e:	move.l a0,-(sp)
    8b20:	move.l d1,-(sp)
    8b22:	move.l d0,-(sp)
    8b24:	jsr df4 <drawLine>
    8b2a:	lea 16(sp),sp
}
    8b2e:	nop
    8b30:	rts

00008b32 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    8b32:	movea.l 12(sp),a1
    8b36:	movea.l 4(sp),a0
    8b3a:	move.l 8(sp),d1
    8b3e:	move.l 4(sp),d0
    8b42:	move.l a1,-(sp)
    8b44:	move.l a0,-(sp)
    8b46:	move.l d1,-(sp)
    8b48:	move.l d0,-(sp)
    8b4a:	jsr df4 <drawLine>
    8b50:	lea 16(sp),sp
}
    8b54:	nop
    8b56:	rts

00008b58 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    8b58:	pea 152c8 <incbin_player_end+0x4ac>
    8b5e:	jsr 12018 <KPrintF>
    8b64:	addq.l #4,sp
}
    8b66:	nop
    8b68:	rts

00008b6a <killBackDrop>:


void killBackDrop () {
	deleteTextures (1, &backdropTextureName);
    8b6a:	pea 17bb2 <backdropTextureName>
    8b70:	pea 1 <_start+0x1>
    8b74:	jsr f76 <deleteTextures>
    8b7a:	addq.l #8,sp
	backdropTextureName = 0;
    8b7c:	clr.l 17bb2 <backdropTextureName>
	backdropExists = FALSE;
    8b82:	clr.w 17bb6 <backdropExists>
}
    8b88:	nop
    8b8a:	rts

00008b8c <killParallax>:

void killParallax () {
    8b8c:	          lea -12(sp),sp
    8b90:	          move.l a6,-(sp)
	while (parallaxStuff) {
    8b92:	   /----- bra.s 8bfe <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    8b94:	/--|----> move.l 17bb8 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    8b9c:	|  |      movea.l 12(sp),a0
    8ba0:	|  |      move.l 42(a0),d0
    8ba4:	|  |      move.l d0,17bb8 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    8baa:	|  |      move.l 12(sp),d0
    8bae:	|  |      addq.l #4,d0
    8bb0:	|  |      move.l d0,-(sp)
    8bb2:	|  |      pea 1 <_start+0x1>
    8bb6:	|  |      jsr f76 <deleteTextures>
    8bbc:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    8bbe:	|  |      movea.l 12(sp),a0
    8bc2:	|  |      move.l (a0),d0
    8bc4:	|  |  /-- beq.s 8bde <killParallax+0x52>
    8bc6:	|  |  |   movea.l 12(sp),a0
    8bca:	|  |  |   move.l (a0),8(sp)
    8bce:	|  |  |   move.l 17b28 <SysBase>,d0
    8bd4:	|  |  |   movea.l d0,a6
    8bd6:	|  |  |   movea.l 8(sp),a1
    8bda:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    8bde:	|  |  \-> tst.l 12(sp)
    8be2:	|  |  /-- beq.s 8bfa <killParallax+0x6e>
    8be4:	|  |  |   move.l 12(sp),4(sp)
    8bea:	|  |  |   move.l 17b28 <SysBase>,d0
    8bf0:	|  |  |   movea.l d0,a6
    8bf2:	|  |  |   movea.l 4(sp),a1
    8bf6:	|  |  |   jsr -690(a6)
		k = NULL;
    8bfa:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    8bfe:	|  \----> move.l 17bb8 <parallaxStuff>,d0
    8c04:	\-------- bne.s 8b94 <killParallax+0x8>
	}
}
    8c06:	          nop
    8c08:	          nop
    8c0a:	          movea.l (sp)+,a6
    8c0c:	          lea 12(sp),sp
    8c10:	          rts

00008c12 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {

	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8c12:	pea 152e9 <incbin_player_end+0x4cd>
    8c18:	jsr 12018 <KPrintF>
    8c1e:	addq.l #4,sp
}
    8c20:	nop
    8c22:	rts

00008c24 <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    8c24:	subq.l #8,sp
    8c26:	movea.l 12(sp),a0
    8c2a:	move.l 16(sp),d1
    8c2e:	move.l 20(sp),d0
    8c32:	movea.w a0,a0
    8c34:	move.w a0,6(sp)
    8c38:	move.w d1,d1
    8c3a:	move.w d1,4(sp)
    8c3e:	move.w d0,d0
    8c40:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    8c44:	pea 15323 <incbin_player_end+0x507>
    8c4a:	jsr 12018 <KPrintF>
    8c50:	addq.l #4,sp

}
    8c52:	nop
    8c54:	addq.l #8,sp
    8c56:	rts

00008c58 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8c58:	pea 15346 <incbin_player_end+0x52a>
    8c5e:	jsr 12018 <KPrintF>
    8c64:	addq.l #4,sp
}
    8c66:	nop
    8c68:	rts

00008c6a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    8c6a:	pea 17bc4 <snapshotTextureName>
    8c70:	pea 1 <_start+0x1>
    8c74:	jsr f76 <deleteTextures>
    8c7a:	addq.l #8,sp
	snapshotTextureName = 0;
    8c7c:	clr.l 17bc4 <snapshotTextureName>
}
    8c82:	nop
    8c84:	rts

00008c86 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    8c86:	jsr 8b6a <killBackDrop>
	killParallax ();
    8c8c:	jsr 8b8c <killParallax>
	killZBuffer ();
    8c92:	jsr 159c <killZBuffer>
	sceneWidth = x;
    8c98:	move.l 4(sp),d0
    8c9c:	move.l d0,17baa <sceneWidth>
	sceneHeight = y;
    8ca2:	move.l 8(sp),d0
    8ca6:	move.l d0,17bae <sceneHeight>
	return TRUE;
    8cac:	moveq #1,d0
}
    8cae:	rts

00008cb0 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    8cb0:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    8cb2:	move.l 12(sp),-(sp)
    8cb6:	jsr 6bc <get2bytes>
    8cbc:	addq.l #4,sp
    8cbe:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    8cc2:	move.l 12(sp),-(sp)
    8cc6:	jsr 6bc <get2bytes>
    8ccc:	addq.l #4,sp
    8cce:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    8cd0:	moveq #1,d0
}
    8cd2:	addq.l #8,sp
    8cd4:	rts

00008cd6 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    8cd6:	   /-> lea -12(sp),sp
    8cda:	   |   move.l a6,-(sp)
    8cdc:	   |   move.l d2,-(sp)
	if (me) {
    8cde:	   |   tst.l 24(sp)
    8ce2:	/--|-- beq.w 8d78 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    8ce6:	|  |   movea.l 24(sp),a0
    8cea:	|  |   move.l 42(a0),d0
    8cee:	|  |   move.l 28(sp),-(sp)
    8cf2:	|  |   move.l d0,-(sp)
    8cf4:	|  \-- jsr 8cd6 <saveParallaxRecursive>(pc)
    8cf8:	|      addq.l #8,sp
		FPutC (fp, 1);
    8cfa:	|      move.l 28(sp),16(sp)
    8d00:	|      moveq #1,d0
    8d02:	|      move.l d0,12(sp)
    8d06:	|      move.l 17b30 <DOSBase>,d0
    8d0c:	|      movea.l d0,a6
    8d0e:	|      move.l 16(sp),d1
    8d12:	|      move.l 12(sp),d2
    8d16:	|      jsr -312(a6)
    8d1a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    8d1e:	|      movea.l 24(sp),a0
    8d22:	|      move.w 28(a0),d0
    8d26:	|      move.w d0,d0
    8d28:	|      andi.l #65535,d0
    8d2e:	|      move.l 28(sp),-(sp)
    8d32:	|      move.l d0,-(sp)
    8d34:	|      jsr 8d0 <put2bytes>
    8d3a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    8d3c:	|      movea.l 24(sp),a0
    8d40:	|      move.w 30(a0),d0
    8d44:	|      move.w d0,d0
    8d46:	|      andi.l #65535,d0
    8d4c:	|      move.l 28(sp),-(sp)
    8d50:	|      move.l d0,-(sp)
    8d52:	|      jsr 8d0 <put2bytes>
    8d58:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    8d5a:	|      movea.l 24(sp),a0
    8d5e:	|      move.w 32(a0),d0
    8d62:	|      move.w d0,d0
    8d64:	|      andi.l #65535,d0
    8d6a:	|      move.l 28(sp),-(sp)
    8d6e:	|      move.l d0,-(sp)
    8d70:	|      jsr 8d0 <put2bytes>
    8d76:	|      addq.l #8,sp
	}
}
    8d78:	\----> nop
    8d7a:	       move.l (sp)+,d2
    8d7c:	       movea.l (sp)+,a6
    8d7e:	       lea 12(sp),sp
    8d82:	       rts

00008d84 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    8d84:	pea 1537f <incbin_player_end+0x563>
    8d8a:	jsr 12018 <KPrintF>
    8d90:	addq.l #4,sp
	return TRUE;
    8d92:	moveq #1,d0
    8d94:	rts

00008d96 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    8d96:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    8d98:	             move.l 17bc8 <allObjectTypes>,(sp)

	while (huntType) {
    8d9e:	      /----- bra.s 8db6 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    8da0:	   /--|----> movea.l (sp),a0
    8da2:	   |  |      move.l 4(a0),d0
    8da6:	   |  |      cmp.l 8(sp),d0
    8daa:	   |  |  /-- bne.s 8db0 <findObjectType+0x1a>
    8dac:	   |  |  |   move.l (sp),d0
    8dae:	/--|--|--|-- bra.s 8dc6 <findObjectType+0x30>
		huntType = huntType -> next;
    8db0:	|  |  |  \-> movea.l (sp),a0
    8db2:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    8db6:	|  |  \----> tst.l (sp)
    8db8:	|  \-------- bne.s 8da0 <findObjectType+0xa>
	}

	return loadObjectType (i);
    8dba:	|            move.l 8(sp),-(sp)
    8dbe:	|            jsr 8e86 <loadObjectType>
    8dc4:	|            addq.l #4,sp
}
    8dc6:	\----------> addq.l #4,sp
    8dc8:	             rts

00008dca <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    8dca:	             lea -12(sp),sp
	int i, num = 0;
    8dce:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    8dd2:	             move.l 20(sp),-(sp)
    8dd6:	             jsr 8d96 <findObjectType>
    8ddc:	             addq.l #4,sp
    8dde:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    8de0:	             clr.l 8(sp)
    8de4:	   /-------- bra.s 8e1a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    8de6:	/--|-------> movea.l (sp),a0
    8de8:	|  |         move.l 38(a0),d1
    8dec:	|  |         move.l 8(sp),d0
    8df0:	|  |         lsl.l #3,d0
    8df2:	|  |         movea.l d1,a0
    8df4:	|  |         adda.l d0,a0
    8df6:	|  |         move.l (a0),d0
    8df8:	|  |         cmp.l 16(sp),d0
    8dfc:	|  |  /----- bne.s 8e16 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    8dfe:	|  |  |      movea.l (sp),a0
    8e00:	|  |  |      move.l 38(a0),d1
    8e04:	|  |  |      move.l 8(sp),d0
    8e08:	|  |  |      lsl.l #3,d0
    8e0a:	|  |  |      movea.l d1,a0
    8e0c:	|  |  |      adda.l d0,a0
    8e0e:	|  |  |      move.l 4(a0),4(sp)
			break;
    8e14:	|  |  |  /-- bra.s 8e26 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    8e16:	|  |  \--|-> addq.l #1,8(sp)
    8e1a:	|  \-----|-> movea.l (sp),a0
    8e1c:	|        |   move.l 16(a0),d0
    8e20:	|        |   cmp.l 8(sp),d0
    8e24:	\--------|-- bgt.s 8de6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    8e26:	         \-> move.l 4(sp),d0
}
    8e2a:	             lea 12(sp),sp
    8e2e:	             rts

00008e30 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    8e30:	moveq #1,d0
}
    8e32:	rts

00008e34 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    8e34:	subq.l #8,sp
    8e36:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    8e38:	move.l 16(sp),-(sp)
    8e3c:	jsr 6bc <get2bytes>
    8e42:	addq.l #4,sp
    8e44:	move.l d0,-(sp)
    8e46:	jsr 8e86 <loadObjectType>
    8e4c:	addq.l #4,sp
    8e4e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    8e52:	movea.l 8(sp),a0
    8e56:	move.l (a0),4(sp)
    8e5a:	move.l 17b28 <SysBase>,d0
    8e60:	movea.l d0,a6
    8e62:	movea.l 4(sp),a1
    8e66:	jsr -690(a6)
	r -> screenName = readString (fp);
    8e6a:	move.l 16(sp),-(sp)
    8e6e:	jsr b02 <readString>
    8e74:	addq.l #4,sp
    8e76:	movea.l 8(sp),a0
    8e7a:	move.l d0,(a0)
	return r;
    8e7c:	move.l 8(sp),d0
}
    8e80:	movea.l (sp)+,a6
    8e82:	addq.l #8,sp
    8e84:	rts

00008e86 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    8e86:	          lea -84(sp),sp
    8e8a:	          move.l a6,-(sp)
    8e8c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    8e8e:	          moveq #42,d0
    8e90:	          move.l d0,84(sp)
    8e94:	          clr.l 80(sp)
    8e98:	          move.l 17b28 <SysBase>,d0
    8e9e:	          movea.l d0,a6
    8ea0:	          move.l 84(sp),d0
    8ea4:	          move.l 80(sp),d1
    8ea8:	          jsr -684(a6)
    8eac:	          move.l d0,76(sp)
    8eb0:	          move.l 76(sp),d0
    8eb4:	          move.l d0,72(sp)

    if (newType) {
    8eb8:	/-------- beq.w 9132 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    8ebc:	|         move.l 96(sp),-(sp)
    8ec0:	|         jsr 3fbc <openObjectSlice>
    8ec6:	|         addq.l #4,sp
    8ec8:	|         tst.w d0
    8eca:	+-------- beq.w 9132 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    8ece:	|         move.l 17b10 <bigDataFile>,d0
    8ed4:	|         move.l d0,-(sp)
    8ed6:	|         jsr 6bc <get2bytes>
    8edc:	|         addq.l #4,sp
    8ede:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    8ee2:	|         move.l 17b10 <bigDataFile>,64(sp)
    8eea:	|         move.l 17b30 <DOSBase>,d0
    8ef0:	|         movea.l d0,a6
    8ef2:	|         move.l 64(sp),d1
    8ef6:	|         jsr -306(a6)
    8efa:	|         move.l d0,60(sp)
    8efe:	|         move.l 60(sp),d0
    8f02:	|         move.l d0,d0
    8f04:	|         movea.l 72(sp),a0
    8f08:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    8f0c:	|         move.l 17b10 <bigDataFile>,56(sp)
    8f14:	|         move.l 17b30 <DOSBase>,d0
    8f1a:	|         movea.l d0,a6
    8f1c:	|         move.l 56(sp),d1
    8f20:	|         jsr -306(a6)
    8f24:	|         move.l d0,52(sp)
    8f28:	|         move.l 52(sp),d0
    8f2c:	|         move.l d0,d0
    8f2e:	|         movea.l 72(sp),a0
    8f32:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    8f36:	|         move.l 17b10 <bigDataFile>,48(sp)
    8f3e:	|         move.l 17b30 <DOSBase>,d0
    8f44:	|         movea.l d0,a6
    8f46:	|         move.l 48(sp),d1
    8f4a:	|         jsr -306(a6)
    8f4e:	|         move.l d0,44(sp)
    8f52:	|         move.l 44(sp),d0
    8f56:	|         move.l d0,d0
    8f58:	|         movea.l 72(sp),a0
    8f5c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    8f60:	|         move.l 17b10 <bigDataFile>,40(sp)
    8f68:	|         move.l 17b30 <DOSBase>,d0
    8f6e:	|         movea.l d0,a6
    8f70:	|         move.l 40(sp),d1
    8f74:	|         jsr -306(a6)
    8f78:	|         move.l d0,36(sp)
    8f7c:	|         move.l 36(sp),d0
    8f80:	|         movea.l 72(sp),a0
    8f84:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    8f88:	|         move.l 17b10 <bigDataFile>,32(sp)
    8f90:	|         move.l 17b30 <DOSBase>,d0
    8f96:	|         movea.l d0,a6
    8f98:	|         move.l 32(sp),d1
    8f9c:	|         jsr -306(a6)
    8fa0:	|         move.l d0,28(sp)
    8fa4:	|         move.l 28(sp),d0
    8fa8:	|         movea.l 72(sp),a0
    8fac:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    8fb0:	|         move.l 17b10 <bigDataFile>,d0
    8fb6:	|         move.l d0,-(sp)
    8fb8:	|         jsr 718 <get4bytes>
    8fbe:	|         addq.l #4,sp
    8fc0:	|         movea.l 72(sp),a0
    8fc4:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    8fc8:	|         move.l 17b10 <bigDataFile>,d0
    8fce:	|         move.l d0,-(sp)
    8fd0:	|         jsr 6bc <get2bytes>
    8fd6:	|         addq.l #4,sp
    8fd8:	|         movea.l 72(sp),a0
    8fdc:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    8fe0:	|         move.l 17b10 <bigDataFile>,24(sp)
    8fe8:	|         move.l 17b30 <DOSBase>,d0
    8fee:	|         movea.l d0,a6
    8ff0:	|         move.l 24(sp),d1
    8ff4:	|         jsr -306(a6)
    8ff8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    8ffc:	|         move.l 17b10 <bigDataFile>,d0
    9002:	|         move.l d0,-(sp)
    9004:	|         jsr 7d8 <getFloat>
    900a:	|         addq.l #4,sp
            getFloat(bigDataFile);
    900c:	|         move.l 17b10 <bigDataFile>,d0
    9012:	|         move.l d0,-(sp)
    9014:	|         jsr 7d8 <getFloat>
    901a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    901c:	|         move.l 17b10 <bigDataFile>,d0
    9022:	|         move.l d0,-(sp)
    9024:	|         jsr 6bc <get2bytes>
    902a:	|         addq.l #4,sp
    902c:	|         move.l d0,d0
    902e:	|         movea.l 72(sp),a0
    9032:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9036:	|         move.l 17b10 <bigDataFile>,d0
    903c:	|         move.l d0,-(sp)
    903e:	|         jsr 6bc <get2bytes>
    9044:	|         addq.l #4,sp
    9046:	|         movea.l 72(sp),a0
    904a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    904e:	|         movea.l 72(sp),a0
    9052:	|         move.l 16(a0),d0
    9056:	|  /----- beq.s 9088 <loadObjectType+0x202>
    9058:	|  |      movea.l 72(sp),a0
    905c:	|  |      move.l 16(a0),d0
    9060:	|  |      lsl.l #3,d0
    9062:	|  |      move.l d0,16(sp)
    9066:	|  |      clr.l 12(sp)
    906a:	|  |      move.l 17b28 <SysBase>,d0
    9070:	|  |      movea.l d0,a6
    9072:	|  |      move.l 16(sp),d0
    9076:	|  |      move.l 12(sp),d1
    907a:	|  |      jsr -684(a6)
    907e:	|  |      move.l d0,8(sp)
    9082:	|  |      move.l 8(sp),d0
    9086:	|  |  /-- bra.s 908a <loadObjectType+0x204>
    9088:	|  \--|-> moveq #0,d0
    908a:	|     \-> movea.l 72(sp),a0
    908e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    9092:	|         clr.l 88(sp)
    9096:	|     /-- bra.s 90e6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9098:	|  /--|-> move.l 17b10 <bigDataFile>,d1
    909e:	|  |  |   movea.l 72(sp),a0
    90a2:	|  |  |   movea.l 38(a0),a0
    90a6:	|  |  |   move.l 88(sp),d0
    90aa:	|  |  |   lsl.l #3,d0
    90ac:	|  |  |   lea (0,a0,d0.l),a2
    90b0:	|  |  |   move.l d1,-(sp)
    90b2:	|  |  |   jsr 6bc <get2bytes>
    90b8:	|  |  |   addq.l #4,sp
    90ba:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    90bc:	|  |  |   move.l 17b10 <bigDataFile>,d1
    90c2:	|  |  |   movea.l 72(sp),a0
    90c6:	|  |  |   movea.l 38(a0),a0
    90ca:	|  |  |   move.l 88(sp),d0
    90ce:	|  |  |   lsl.l #3,d0
    90d0:	|  |  |   lea (0,a0,d0.l),a2
    90d4:	|  |  |   move.l d1,-(sp)
    90d6:	|  |  |   jsr 6bc <get2bytes>
    90dc:	|  |  |   addq.l #4,sp
    90de:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    90e2:	|  |  |   addq.l #1,88(sp)
    90e6:	|  |  \-> movea.l 72(sp),a0
    90ea:	|  |      move.l 16(a0),d0
    90ee:	|  |      cmp.l 88(sp),d0
    90f2:	|  \----- bgt.s 9098 <loadObjectType+0x212>
            }
            finishAccess();
    90f4:	|         jsr 3dec <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    90fa:	|         move.l 68(sp),-(sp)
    90fe:	|         jsr 3df6 <getNumberedString>
    9104:	|         addq.l #4,sp
    9106:	|         movea.l 72(sp),a0
    910a:	|         move.l d0,(a0)
            newType->objectNum = i;
    910c:	|         movea.l 72(sp),a0
    9110:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    9116:	|         move.l 17bc8 <allObjectTypes>,d0
    911c:	|         movea.l 72(sp),a0
    9120:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    9124:	|         move.l 72(sp),17bc8 <allObjectTypes>
            return newType;
    912c:	|         move.l 72(sp),d0
    9130:	|     /-- bra.s 9134 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    9132:	\-----|-> moveq #0,d0
}
    9134:	      \-> movea.l (sp)+,a2
    9136:	          movea.l (sp)+,a6
    9138:	          lea 84(sp),sp
    913c:	          rts

0000913e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    913e:	             lea -16(sp),sp
    9142:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    9144:	             move.l #97224,16(sp)

	while (* huntRegion) {
    914c:	   /-------- bra.s 91c0 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    914e:	/--|-------> movea.l 16(sp),a0
    9152:	|  |         move.l (a0),d0
    9154:	|  |         cmp.l 24(sp),d0
    9158:	|  |  /----- bne.s 91b2 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    915a:	|  |  |      movea.l 24(sp),a0
    915e:	|  |  |      move.l 8(a0),d0
    9162:	|  |  |      movea.l 16(sp),a0
    9166:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    9168:	|  |  |      movea.l 24(sp),a0
    916c:	|  |  |      move.l 38(a0),12(sp)
    9172:	|  |  |      move.l 17b28 <SysBase>,d0
    9178:	|  |  |      movea.l d0,a6
    917a:	|  |  |      movea.l 12(sp),a1
    917e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    9182:	|  |  |      movea.l 24(sp),a0
    9186:	|  |  |      move.l (a0),8(sp)
    918a:	|  |  |      move.l 17b28 <SysBase>,d0
    9190:	|  |  |      movea.l d0,a6
    9192:	|  |  |      movea.l 8(sp),a1
    9196:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    919a:	|  |  |      move.l 24(sp),4(sp)
    91a0:	|  |  |      move.l 17b28 <SysBase>,d0
    91a6:	|  |  |      movea.l d0,a6
    91a8:	|  |  |      movea.l 4(sp),a1
    91ac:	|  |  |      jsr -690(a6)
			return;
    91b0:	|  |  |  /-- bra.s 91d6 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    91b2:	|  |  \--|-> movea.l 16(sp),a0
    91b6:	|  |     |   move.l (a0),d0
    91b8:	|  |     |   move.l d0,d1
    91ba:	|  |     |   addq.l #8,d1
    91bc:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    91c0:	|  \-----|-> movea.l 16(sp),a0
    91c4:	|        |   move.l (a0),d0
    91c6:	\--------|-- bne.s 914e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    91c8:	         |   pea 153a6 <incbin_player_end+0x58a>
    91ce:	         |   jsr 12018 <KPrintF>
    91d4:	         |   addq.l #4,sp
}
    91d6:	         \-> movea.l (sp)+,a6
    91d8:	             lea 16(sp),sp
    91dc:	             rts

000091de <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    91de:	movea.l 4(sp),a0
    91e2:	move.l 4(a0),d0
    91e6:	move.l 8(sp),-(sp)
    91ea:	move.l d0,-(sp)
    91ec:	jsr 8d0 <put2bytes>
    91f2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    91f4:	movea.l 4(sp),a0
    91f8:	move.l (a0),d0
    91fa:	move.l 8(sp),-(sp)
    91fe:	move.l d0,-(sp)
    9200:	jsr bd8 <writeString>
    9206:	addq.l #8,sp
    9208:	nop
    920a:	rts

0000920c <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    920c:	                         lea -112(sp),sp
    9210:	                         move.l a6,-(sp)
    9212:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    9214:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    9218:	                         move.w 17bce <saveEncoding>,d0
    921e:	                  /----- beq.s 9228 <fileToStack+0x1c>
    9220:	                  |      move.l #86988,d0
    9226:	                  |  /-- bra.s 922e <fileToStack+0x22>
    9228:	                  \--|-> move.l #87014,d0
    922e:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    9232:	                         move.l 124(sp),112(sp)
    9238:	                         move.l #1005,108(sp)
    9240:	                         move.l 17b30 <DOSBase>,d0
    9246:	                         movea.l d0,a6
    9248:	                         move.l 112(sp),d1
    924c:	                         move.l 108(sp),d2
    9250:	                         jsr -30(a6)
    9254:	                         move.l d0,104(sp)
    9258:	                         move.l 104(sp),d0
    925c:	                         move.l d0,100(sp)
    if (!fp) {
    9260:	                     /-- bne.s 927a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    9262:	                     |   move.l 124(sp),-(sp)
    9266:	                     |   pea 153fd <incbin_player_end+0x5e1>
    926c:	                     |   jsr 12018 <KPrintF>
    9272:	                     |   addq.l #8,sp
        return FALSE;
    9274:	                     |   clr.w d0
    9276:	/--------------------|-- bra.w 9570 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    927a:	|                    \-> move.w 17bce <saveEncoding>,d0
    9280:	|                        move.l d0,d0
    9282:	|                        move.b d0,17bcc <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    9288:	|                        move.w 17bce <saveEncoding>,d0
    928e:	|                        lsr.w #8,d0
    9290:	|                        move.l d0,d0
    9292:	|                        move.b d0,17bcd <encode2>

    while (*checker) {
    9298:	|                 /----- bra.s 92fc <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    929a:	|              /--|----> move.l 100(sp),30(sp)
    92a0:	|              |  |      move.l 17b30 <DOSBase>,d0
    92a6:	|              |  |      movea.l d0,a6
    92a8:	|              |  |      move.l 30(sp),d1
    92ac:	|              |  |      jsr -306(a6)
    92b0:	|              |  |      move.l d0,26(sp)
    92b4:	|              |  |      move.l 26(sp),d1
    92b8:	|              |  |      movea.l 116(sp),a0
    92bc:	|              |  |      move.b (a0),d0
    92be:	|              |  |      ext.w d0
    92c0:	|              |  |      movea.w d0,a0
    92c2:	|              |  |      cmpa.l d1,a0
    92c4:	|              |  |  /-- beq.s 92f8 <fileToStack+0xec>
            Close(fp);
    92c6:	|              |  |  |   move.l 100(sp),22(sp)
    92cc:	|              |  |  |   move.l 17b30 <DOSBase>,d0
    92d2:	|              |  |  |   movea.l d0,a6
    92d4:	|              |  |  |   move.l 22(sp),d1
    92d8:	|              |  |  |   jsr -36(a6)
    92dc:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    92e0:	|              |  |  |   move.l 124(sp),-(sp)
    92e4:	|              |  |  |   pea 1540a <incbin_player_end+0x5ee>
    92ea:	|              |  |  |   jsr 12018 <KPrintF>
    92f0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    92f2:	|              |  |  |   clr.w d0
    92f4:	+--------------|--|--|-- bra.w 9570 <fileToStack+0x364>
        }
        checker++;
    92f8:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    92fc:	|              |  \----> movea.l 116(sp),a0
    9300:	|              |         move.b (a0),d0
    9302:	|              \-------- bne.s 929a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    9304:	|                        move.w 17bce <saveEncoding>,d0
    930a:	|  /-------------------- beq.s 937e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    930c:	|  |                     move.l 100(sp),-(sp)
    9310:	|  |                     jsr 957a <readStringEncoded>
    9316:	|  |                     addq.l #4,sp
    9318:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    931c:	|  |                     pea 1544b <incbin_player_end+0x62f>
    9322:	|  |                     move.l 100(sp),-(sp)
    9326:	|  |                     jsr f4f4 <strcmp>
    932c:	|  |                     addq.l #8,sp
    932e:	|  |                     tst.l d0
    9330:	|  |                 /-- beq.s 9364 <fileToStack+0x158>
            Close(fp);
    9332:	|  |                 |   move.l 100(sp),88(sp)
    9338:	|  |                 |   move.l 17b30 <DOSBase>,d0
    933e:	|  |                 |   movea.l d0,a6
    9340:	|  |                 |   move.l 88(sp),d1
    9344:	|  |                 |   jsr -36(a6)
    9348:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    934c:	|  |                 |   move.l 124(sp),-(sp)
    9350:	|  |                 |   pea 1545a <incbin_player_end+0x63e>
    9356:	|  |                 |   jsr 12018 <KPrintF>
    935c:	|  |                 |   addq.l #8,sp
            return FALSE;
    935e:	|  |                 |   clr.w d0
    9360:	+--|-----------------|-- bra.w 9570 <fileToStack+0x364>
        }
        FreeVec(checker);
    9364:	|  |                 \-> move.l 96(sp),92(sp)
    936a:	|  |                     move.l 17b28 <SysBase>,d0
    9370:	|  |                     movea.l d0,a6
    9372:	|  |                     movea.l 92(sp),a1
    9376:	|  |                     jsr -690(a6)
        checker = NULL;
    937a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    937e:	|  >-------------------> move.w 17bce <saveEncoding>,d0
    9384:	|  |     /-------------- beq.w 94b8 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    9388:	|  |     |               move.l 100(sp),76(sp)
    938e:	|  |     |               move.l 17b30 <DOSBase>,d0
    9394:	|  |     |               movea.l d0,a6
    9396:	|  |     |               move.l 76(sp),d1
    939a:	|  |     |               jsr -306(a6)
    939e:	|  |     |               move.l d0,72(sp)
    93a2:	|  |     |               move.l 72(sp),d0
    93a6:	|  |     |               move.b 17bcc <encode1>,d1
    93ac:	|  |     |               ext.w d1
    93ae:	|  |     |               ext.l d1
    93b0:	|  |     |               move.l d0,d2
    93b2:	|  |     |               eor.l d1,d2
    93b4:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    93b8:	|  |     |               moveq #-1,d0
    93ba:	|  |     |               cmp.l 68(sp),d0
    93be:	|  |  /--|-------------- beq.w 954e <fileToStack+0x342>

            char i = (char) tmp;
    93c2:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    93c8:	|  |  |  |               move.b 67(sp),d0
    93cc:	|  |  |  |               ext.w d0
    93ce:	|  |  |  |               movea.w d0,a0
    93d0:	|  |  |  |               moveq #2,d2
    93d2:	|  |  |  |               cmp.l a0,d2
    93d4:	|  |  |  |     /-------- beq.s 9450 <fileToStack+0x244>
    93d6:	|  |  |  |     |         moveq #2,d0
    93d8:	|  |  |  |     |         cmp.l a0,d0
    93da:	|  |  |  |  /--|-------- blt.w 9486 <fileToStack+0x27a>
    93de:	|  |  |  |  |  |         cmpa.w #0,a0
    93e2:	|  |  |  |  |  |     /-- beq.s 93ee <fileToStack+0x1e2>
    93e4:	|  |  |  |  |  |     |   moveq #1,d2
    93e6:	|  |  |  |  |  |     |   cmp.l a0,d2
    93e8:	|  |  |  |  |  |  /--|-- beq.s 942a <fileToStack+0x21e>
    93ea:	|  |  |  |  +--|--|--|-- bra.w 9486 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    93ee:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    93f2:	|  |  |  |  |  |  |      jsr 957a <readStringEncoded>
    93f8:	|  |  |  |  |  |  |      addq.l #4,sp
    93fa:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    93fe:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    9402:	|  |  |  |  |  |  |      lea 14(sp),a0
    9406:	|  |  |  |  |  |  |      move.l a0,-(sp)
    9408:	|  |  |  |  |  |  |      jsr 1026a <makeTextVar>
    940e:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    9410:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    9416:	|  |  |  |  |  |  |      move.l 17b28 <SysBase>,d0
    941c:	|  |  |  |  |  |  |      movea.l d0,a6
    941e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    9422:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    9426:	|  |  |  |  |  |  |  /-- bra.w 94de <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    942a:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    942e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    9434:	|  |  |  |  |  |     |   addq.l #4,sp
    9436:	|  |  |  |  |  |     |   move.l d0,-(sp)
    9438:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    943c:	|  |  |  |  |  |     |   lea 18(sp),a0
    9440:	|  |  |  |  |  |     |   move.l a0,-(sp)
    9442:	|  |  |  |  |  |     |   jsr 1091a <setVariable>
    9448:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    944c:	|  |  |  |  |  |     +-- bra.w 94de <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    9450:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    9456:	|  |  |  |  |        |   move.l 17b30 <DOSBase>,d0
    945c:	|  |  |  |  |        |   movea.l d0,a6
    945e:	|  |  |  |  |        |   move.l 62(sp),d1
    9462:	|  |  |  |  |        |   jsr -306(a6)
    9466:	|  |  |  |  |        |   move.l d0,58(sp)
    946a:	|  |  |  |  |        |   move.l 58(sp),d0
    946e:	|  |  |  |  |        |   move.l d0,-(sp)
    9470:	|  |  |  |  |        |   pea 1 <_start+0x1>
    9474:	|  |  |  |  |        |   lea 18(sp),a0
    9478:	|  |  |  |  |        |   move.l a0,-(sp)
    947a:	|  |  |  |  |        |   jsr 1091a <setVariable>
    9480:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    9484:	|  |  |  |  |        +-- bra.s 94de <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    9486:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    948a:	|  |  |  |           |   pea 154dc <incbin_player_end+0x6c0>
    9490:	|  |  |  |           |   jsr 12018 <KPrintF>
    9496:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    9498:	|  |  |  |           |   move.l 100(sp),46(sp)
    949e:	|  |  |  |           |   move.l 17b30 <DOSBase>,d0
    94a4:	|  |  |  |           |   movea.l d0,a6
    94a6:	|  |  |  |           |   move.l 46(sp),d1
    94aa:	|  |  |  |           |   jsr -36(a6)
    94ae:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    94b2:	|  |  |  |           |   clr.w d0
    94b4:	+--|--|--|-----------|-- bra.w 9570 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    94b8:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    94bc:	|  |  |              |   jsr 9640 <readTextPlain>
    94c2:	|  |  |              |   addq.l #4,sp
    94c4:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    94c8:	|  |  |        /-----|-- beq.w 9552 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    94cc:	|  |  |        |     |   move.l 80(sp),-(sp)
    94d0:	|  |  |        |     |   lea 14(sp),a0
    94d4:	|  |  |        |     |   move.l a0,-(sp)
    94d6:	|  |  |        |     |   jsr 1026a <makeTextVar>
    94dc:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    94de:	|  |  |        |     \-> movea.l 128(sp),a0
    94e2:	|  |  |        |         move.l (a0),d0
    94e4:	|  |  |        |  /----- bne.s 9514 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    94e6:	|  |  |        |  |      move.l 128(sp),d0
    94ea:	|  |  |        |  |      move.l d0,-(sp)
    94ec:	|  |  |        |  |      lea 14(sp),a0
    94f0:	|  |  |        |  |      move.l a0,-(sp)
    94f2:	|  |  |        |  |      jsr f90a <addVarToStackQuick>
    94f8:	|  |  |        |  |      addq.l #8,sp
    94fa:	|  |  |        |  |      tst.w d0
    94fc:	|  |  |        |  |  /-- bne.s 9502 <fileToStack+0x2f6>
    94fe:	|  |  |        |  |  |   clr.w d0
    9500:	+--|--|--------|--|--|-- bra.s 9570 <fileToStack+0x364>
            sH->last = sH->first;
    9502:	|  |  |        |  |  \-> movea.l 128(sp),a0
    9506:	|  |  |        |  |      move.l (a0),d0
    9508:	|  |  |        |  |      movea.l 128(sp),a0
    950c:	|  |  |        |  |      move.l d0,4(a0)
    9510:	|  +--|--------|--|----- bra.w 937e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    9514:	|  |  |        |  \----> movea.l 128(sp),a0
    9518:	|  |  |        |         move.l 4(a0),d0
    951c:	|  |  |        |         addq.l #8,d0
    951e:	|  |  |        |         move.l d0,-(sp)
    9520:	|  |  |        |         lea 14(sp),a0
    9524:	|  |  |        |         move.l a0,-(sp)
    9526:	|  |  |        |         jsr f90a <addVarToStackQuick>
    952c:	|  |  |        |         addq.l #8,sp
    952e:	|  |  |        |         tst.w d0
    9530:	|  |  |        |     /-- bne.s 9536 <fileToStack+0x32a>
    9532:	|  |  |        |     |   clr.w d0
    9534:	+--|--|--------|-----|-- bra.s 9570 <fileToStack+0x364>
            sH->last = sH->last->next;
    9536:	|  |  |        |     \-> movea.l 128(sp),a0
    953a:	|  |  |        |         movea.l 4(a0),a0
    953e:	|  |  |        |         move.l 8(a0),d0
    9542:	|  |  |        |         movea.l 128(sp),a0
    9546:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    954a:	|  \--|--------|-------- bra.w 937e <fileToStack+0x172>
            if (tmp == -1) break;
    954e:	|     \--------|-------> nop
    9550:	|              |     /-- bra.s 9554 <fileToStack+0x348>
            if (!line) break;
    9552:	|              \-----|-> nop
        }
    }
    Close(fp);
    9554:	|                    \-> move.l 100(sp),38(sp)
    955a:	|                        move.l 17b30 <DOSBase>,d0
    9560:	|                        movea.l d0,a6
    9562:	|                        move.l 38(sp),d1
    9566:	|                        jsr -36(a6)
    956a:	|                        move.l d0,34(sp)
    return TRUE;
    956e:	|                        moveq #1,d0
}
    9570:	\----------------------> move.l (sp)+,d2
    9572:	                         movea.l (sp)+,a6
    9574:	                         lea 112(sp),sp
    9578:	                         rts

0000957a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    957a:	          lea -32(sp),sp
    957e:	          move.l a6,-(sp)
    9580:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    9582:	          move.l 44(sp),-(sp)
    9586:	          jsr 6bc <get2bytes>
    958c:	          addq.l #4,sp
    958e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    9592:	          move.l 32(sp),d0
    9596:	          addq.l #1,d0
    9598:	          move.l d0,28(sp)
    959c:	          clr.l 24(sp)
    95a0:	          move.l 17b28 <SysBase>,d0
    95a6:	          movea.l d0,a6
    95a8:	          move.l 28(sp),d0
    95ac:	          move.l 24(sp),d1
    95b0:	          jsr -684(a6)
    95b4:	          move.l d0,20(sp)
    95b8:	          move.l 20(sp),d0
    95bc:	          move.l d0,16(sp)
    if (!s) return NULL;
    95c0:	      /-- bne.s 95c6 <readStringEncoded+0x4c>
    95c2:	      |   moveq #0,d0
    95c4:	/-----|-- bra.s 9636 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    95c6:	|     \-> clr.l 36(sp)
    95ca:	|     /-- bra.s 961c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    95cc:	|  /--|-> move.l 44(sp),12(sp)
    95d2:	|  |  |   move.l 17b30 <DOSBase>,d0
    95d8:	|  |  |   movea.l d0,a6
    95da:	|  |  |   move.l 12(sp),d1
    95de:	|  |  |   jsr -306(a6)
    95e2:	|  |  |   move.l d0,8(sp)
    95e6:	|  |  |   move.l 8(sp),d0
    95ea:	|  |  |   move.l d0,d1
    95ec:	|  |  |   move.b 17bcc <encode1>,d2
    95f2:	|  |  |   move.l 36(sp),d0
    95f6:	|  |  |   movea.l 16(sp),a0
    95fa:	|  |  |   adda.l d0,a0
    95fc:	|  |  |   move.b d1,d0
    95fe:	|  |  |   eor.b d2,d0
    9600:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    9602:	|  |  |   move.b 17bcc <encode1>,d0
    9608:	|  |  |   move.b d0,d1
    960a:	|  |  |   move.b 17bcd <encode2>,d0
    9610:	|  |  |   add.b d1,d0
    9612:	|  |  |   move.b d0,17bcc <encode1>
    for (a = 0; a < len; a++) {
    9618:	|  |  |   addq.l #1,36(sp)
    961c:	|  |  \-> move.l 36(sp),d0
    9620:	|  |      cmp.l 32(sp),d0
    9624:	|  \----- blt.s 95cc <readStringEncoded+0x52>
    }
    s[len] = 0;
    9626:	|         move.l 32(sp),d0
    962a:	|         movea.l 16(sp),a0
    962e:	|         adda.l d0,a0
    9630:	|         clr.b (a0)
    return s;
    9632:	|         move.l 16(sp),d0
}
    9636:	\-------> move.l (sp)+,d2
    9638:	          movea.l (sp)+,a6
    963a:	          lea 32(sp),sp
    963e:	          rts

00009640 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    9640:	             lea -104(sp),sp
    9644:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    9648:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    964c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    9652:	             move.l 124(sp),106(sp)
    9658:	             clr.l 102(sp)
    965c:	             clr.l 98(sp)
    9660:	             move.l 17b30 <DOSBase>,d0
    9666:	             movea.l d0,a6
    9668:	             move.l 106(sp),d1
    966c:	             move.l 102(sp),d2
    9670:	             move.l 98(sp),d3
    9674:	             jsr -66(a6)
    9678:	             move.l d0,94(sp)
    967c:	             move.l 94(sp),d0
    9680:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    9684:	   /-------- bra.s 96c8 <readTextPlain+0x88>
        tmp = FGetC(fp);
    9686:	/--|-------> move.l 124(sp),22(sp)
    968c:	|  |         move.l 17b30 <DOSBase>,d0
    9692:	|  |         movea.l d0,a6
    9694:	|  |         move.l 22(sp),d1
    9698:	|  |         jsr -306(a6)
    969c:	|  |         move.l d0,18(sp)
    96a0:	|  |         move.l 18(sp),d0
    96a4:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    96a8:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    96ae:	|  |         cmpi.b #10,17(sp)
    96b4:	|  |  /----- beq.s 96be <readTextPlain+0x7e>
    96b6:	|  |  |      moveq #-1,d0
    96b8:	|  |  |      cmp.l 110(sp),d0
    96bc:	|  |  |  /-- bne.s 96c4 <readTextPlain+0x84>
            keepGoing = FALSE;
    96be:	|  |  \--|-> clr.w 114(sp)
    96c2:	|  +-----|-- bra.s 96c8 <readTextPlain+0x88>
        } else {
            stringSize++;
    96c4:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    96c8:	|  \-------> tst.w 114(sp)
    96cc:	\----------- bne.s 9686 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    96ce:	             tst.l 116(sp)
    96d2:	         /-- bne.s 96e2 <readTextPlain+0xa2>
    96d4:	         |   moveq #-1,d0
    96d6:	         |   cmp.l 110(sp),d0
    96da:	         +-- bne.s 96e2 <readTextPlain+0xa2>
        return NULL;
    96dc:	         |   moveq #0,d0
    96de:	      /--|-- bra.w 97c8 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    96e2:	      |  \-> move.l 124(sp),86(sp)
    96e8:	      |      move.l 90(sp),82(sp)
    96ee:	      |      moveq #-1,d0
    96f0:	      |      move.l d0,78(sp)
    96f4:	      |      move.l 17b30 <DOSBase>,d0
    96fa:	      |      movea.l d0,a6
    96fc:	      |      move.l 86(sp),d1
    9700:	      |      move.l 82(sp),d2
    9704:	      |      move.l 78(sp),d3
    9708:	      |      jsr -66(a6)
    970c:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    9710:	      |      move.l 116(sp),d0
    9714:	      |      addq.l #1,d0
    9716:	      |      move.l d0,70(sp)
    971a:	      |      clr.l 66(sp)
    971e:	      |      move.l 17b28 <SysBase>,d0
    9724:	      |      movea.l d0,a6
    9726:	      |      move.l 70(sp),d0
    972a:	      |      move.l 66(sp),d1
    972e:	      |      jsr -684(a6)
    9732:	      |      move.l d0,62(sp)
    9736:	      |      move.l 62(sp),d0
    973a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    973e:	      |  /-- bne.s 9746 <readTextPlain+0x106>
    9740:	      |  |   moveq #0,d0
    9742:	      +--|-- bra.w 97c8 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    9746:	      |  \-> move.l 124(sp),54(sp)
    974c:	      |      move.l 58(sp),50(sp)
    9752:	      |      moveq #1,d0
    9754:	      |      move.l d0,46(sp)
    9758:	      |      move.l 116(sp),42(sp)
    975e:	      |      move.l 17b30 <DOSBase>,d0
    9764:	      |      movea.l d0,a6
    9766:	      |      move.l 54(sp),d1
    976a:	      |      move.l 50(sp),d2
    976e:	      |      move.l 46(sp),d3
    9772:	      |      move.l 42(sp),d4
    9776:	      |      jsr -324(a6)
    977a:	      |      move.l d0,38(sp)
    977e:	      |      move.l 38(sp),d0
    9782:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    9786:	      |      move.l 34(sp),d0
    978a:	      |      cmp.l 116(sp),d0
    978e:	      |  /-- beq.s 979e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    9790:	      |  |   pea 15511 <incbin_player_end+0x6f5>
    9796:	      |  |   jsr 12018 <KPrintF>
    979c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    979e:	      |  \-> move.l 124(sp),30(sp)
    97a4:	      |      move.l 17b30 <DOSBase>,d0
    97aa:	      |      movea.l d0,a6
    97ac:	      |      move.l 30(sp),d1
    97b0:	      |      jsr -306(a6)
    97b4:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    97b8:	      |      move.l 116(sp),d0
    97bc:	      |      movea.l 58(sp),a0
    97c0:	      |      adda.l d0,a0
    97c2:	      |      clr.b (a0)
    }

    return reply;
    97c4:	      |      move.l 58(sp),d0
}
    97c8:	      \----> movem.l (sp)+,d2-d4/a6
    97cc:	             lea 104(sp),sp
    97d0:	             rts

000097d2 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    97d2:	                      lea -144(sp),sp
    97d6:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    97da:	                      move.l 160(sp),148(sp)
    97e0:	                      move.l #1006,144(sp)
    97e8:	                      move.l 17b30 <DOSBase>,d0
    97ee:	                      movea.l d0,a6
    97f0:	                      move.l 148(sp),d1
    97f4:	                      move.l 144(sp),d2
    97f8:	                      jsr -30(a6)
    97fc:	                      move.l d0,140(sp)
    9800:	                      move.l 140(sp),d0
    9804:	                      move.l d0,136(sp)

    if (!fp) {
    9808:	                  /-- bne.s 9822 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    980a:	                  |   move.l 160(sp),-(sp)
    980e:	                  |   pea 15532 <incbin_player_end+0x716>
    9814:	                  |   jsr 12018 <KPrintF>
    981a:	                  |   addq.l #8,sp
        return FALSE;
    981c:	                  |   clr.w d0
    981e:	/-----------------|-- bra.w 9ade <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    9822:	|                 \-> movea.l 164(sp),a0
    9826:	|                     movea.l 4(a0),a0
    982a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    982e:	|                     move.w 17bce <saveEncoding>,d0
    9834:	|                     move.l d0,d0
    9836:	|                     move.b d0,17bcc <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    983c:	|                     move.w 17bce <saveEncoding>,d0
    9842:	|                     lsr.w #8,d0
    9844:	|                     move.l d0,d0
    9846:	|                     move.b d0,17bcd <encode2>

    if (saveEncoding) {
    984c:	|                     move.w 17bce <saveEncoding>,d0
    9852:	|                 /-- beq.s 98a4 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    9854:	|                 |   move.l 136(sp),116(sp)
    985a:	|                 |   move.l #86988,112(sp)
    9862:	|                 |   moveq #99,d0
    9864:	|                 |   not.b d0
    9866:	|                 |   add.l sp,d0
    9868:	|                 |   addi.l #-144,d0
    986e:	|                 |   move.l d0,108(sp)
    9872:	|                 |   move.l 17b30 <DOSBase>,d0
    9878:	|                 |   movea.l d0,a6
    987a:	|                 |   move.l 116(sp),d1
    987e:	|                 |   move.l 112(sp),d2
    9882:	|                 |   move.l 108(sp),d3
    9886:	|                 |   jsr -354(a6)
    988a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    988e:	|                 |   move.l 136(sp),-(sp)
    9892:	|                 |   pea 1544b <incbin_player_end+0x62f>
    9898:	|                 |   jsr 9ae8 <writeStringEncoded>
    989e:	|                 |   addq.l #8,sp
    98a0:	|  /--------------|-- bra.w 9ab6 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    98a4:	|  |              \-> move.l 136(sp),132(sp)
    98aa:	|  |                  move.l #87014,128(sp)
    98b2:	|  |                  moveq #99,d1
    98b4:	|  |                  not.b d1
    98b6:	|  |                  add.l sp,d1
    98b8:	|  |                  addi.l #-144,d1
    98be:	|  |                  move.l d1,124(sp)
    98c2:	|  |                  move.l 17b30 <DOSBase>,d0
    98c8:	|  |                  movea.l d0,a6
    98ca:	|  |                  move.l 132(sp),d1
    98ce:	|  |                  move.l 128(sp),d2
    98d2:	|  |                  move.l 124(sp),d3
    98d6:	|  |                  jsr -354(a6)
    98da:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    98de:	|  +----------------- bra.w 9ab6 <stackToFile+0x2e4>
        if (saveEncoding) {
    98e2:	|  |  /-------------> move.w 17bce <saveEncoding>,d0
    98e8:	|  |  |     /-------- beq.w 9a3a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    98ec:	|  |  |     |         movea.l 152(sp),a0
    98f0:	|  |  |     |         move.l (a0),d0
    98f2:	|  |  |     |         moveq #1,d1
    98f4:	|  |  |     |         cmp.l d0,d1
    98f6:	|  |  |     |     /-- beq.s 9946 <stackToFile+0x174>
    98f8:	|  |  |     |     |   moveq #3,d1
    98fa:	|  |  |     |     |   cmp.l d0,d1
    98fc:	|  |  |     |  /--|-- bne.w 9a08 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    9900:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    9906:	|  |  |     |  |  |   move.b 17bcc <encode1>,d0
    990c:	|  |  |     |  |  |   ext.w d0
    990e:	|  |  |     |  |  |   movea.w d0,a0
    9910:	|  |  |     |  |  |   move.l a0,72(sp)
    9914:	|  |  |     |  |  |   move.l 17b30 <DOSBase>,d0
    991a:	|  |  |     |  |  |   movea.l d0,a6
    991c:	|  |  |     |  |  |   move.l 76(sp),d1
    9920:	|  |  |     |  |  |   move.l 72(sp),d2
    9924:	|  |  |     |  |  |   jsr -312(a6)
    9928:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    992c:	|  |  |     |  |  |   movea.l 152(sp),a0
    9930:	|  |  |     |  |  |   move.l 4(a0),d0
    9934:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    9938:	|  |  |     |  |  |   move.l d0,-(sp)
    993a:	|  |  |     |  |  |   jsr 9ae8 <writeStringEncoded>
    9940:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    9942:	|  |  |  /--|--|--|-- bra.w 9aac <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    9946:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    994a:	|  |  |  |  |  |      move.l 4(a0),d0
    994e:	|  |  |  |  |  |  /-- bmi.s 99be <stackToFile+0x1ec>
    9950:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9954:	|  |  |  |  |  |  |   move.l 4(a0),d0
    9958:	|  |  |  |  |  |  |   cmpi.l #255,d0
    995e:	|  |  |  |  |  |  +-- bgt.s 99be <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    9960:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    9966:	|  |  |  |  |  |  |   move.b 17bcc <encode1>,d0
    996c:	|  |  |  |  |  |  |   eori.b #2,d0
    9970:	|  |  |  |  |  |  |   ext.w d0
    9972:	|  |  |  |  |  |  |   movea.w d0,a0
    9974:	|  |  |  |  |  |  |   move.l a0,60(sp)
    9978:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    997e:	|  |  |  |  |  |  |   movea.l d0,a6
    9980:	|  |  |  |  |  |  |   move.l 64(sp),d1
    9984:	|  |  |  |  |  |  |   move.l 60(sp),d2
    9988:	|  |  |  |  |  |  |   jsr -312(a6)
    998c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    9990:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    9996:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    999a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    99a0:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    99a6:	|  |  |  |  |  |  |   movea.l d0,a6
    99a8:	|  |  |  |  |  |  |   move.l 52(sp),d1
    99ac:	|  |  |  |  |  |  |   move.l 48(sp),d2
    99b0:	|  |  |  |  |  |  |   jsr -312(a6)
    99b4:	|  |  |  |  |  |  |   move.l d0,44(sp)
    99b8:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    99ba:	|  |  |  +--|--|--|-- bra.w 9aac <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    99be:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    99c4:	|  |  |  |  |  |      move.b 17bcc <encode1>,d0
    99ca:	|  |  |  |  |  |      eori.b #1,d0
    99ce:	|  |  |  |  |  |      ext.w d0
    99d0:	|  |  |  |  |  |      movea.w d0,a0
    99d2:	|  |  |  |  |  |      move.l a0,36(sp)
    99d6:	|  |  |  |  |  |      move.l 17b30 <DOSBase>,d0
    99dc:	|  |  |  |  |  |      movea.l d0,a6
    99de:	|  |  |  |  |  |      move.l 40(sp),d1
    99e2:	|  |  |  |  |  |      move.l 36(sp),d2
    99e6:	|  |  |  |  |  |      jsr -312(a6)
    99ea:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    99ee:	|  |  |  |  |  |      movea.l 152(sp),a0
    99f2:	|  |  |  |  |  |      move.l 4(a0),d0
    99f6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    99fa:	|  |  |  |  |  |      move.l d0,-(sp)
    99fc:	|  |  |  |  |  |      jsr 958 <put4bytes>
    9a02:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    9a04:	|  |  |  +--|--|----- bra.w 9aac <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    9a08:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    9a0c:	|  |  |  |  |         pea 15544 <incbin_player_end+0x728>
    9a12:	|  |  |  |  |         jsr 12018 <KPrintF>
    9a18:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    9a1a:	|  |  |  |  |         move.l 136(sp),28(sp)
    9a20:	|  |  |  |  |         move.l 17b30 <DOSBase>,d0
    9a26:	|  |  |  |  |         movea.l d0,a6
    9a28:	|  |  |  |  |         move.l 28(sp),d1
    9a2c:	|  |  |  |  |         jsr -36(a6)
    9a30:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    9a34:	|  |  |  |  |         clr.w d0
    9a36:	+--|--|--|--|-------- bra.w 9ade <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    9a3a:	|  |  |  |  \-------> move.l 152(sp),d0
    9a3e:	|  |  |  |            move.l d0,-(sp)
    9a40:	|  |  |  |            jsr 10620 <getTextFromAnyVar>
    9a46:	|  |  |  |            addq.l #4,sp
    9a48:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    9a4c:	|  |  |  |     /----- beq.s 9ac0 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    9a4e:	|  |  |  |     |      movea.l 100(sp),a0
    9a52:	|  |  |  |     |      move.b (a0),d0
    9a54:	|  |  |  |     |      ext.w d0
    9a56:	|  |  |  |     |      movea.w d0,a0
    9a58:	|  |  |  |     |      move.l a0,12(sp)
    9a5c:	|  |  |  |     |      move.l 136(sp),96(sp)
    9a62:	|  |  |  |     |      move.l #87456,92(sp)
    9a6a:	|  |  |  |     |      moveq #99,d0
    9a6c:	|  |  |  |     |      not.b d0
    9a6e:	|  |  |  |     |      add.l sp,d0
    9a70:	|  |  |  |     |      addi.l #-144,d0
    9a76:	|  |  |  |     |      move.l d0,88(sp)
    9a7a:	|  |  |  |     |      move.l 17b30 <DOSBase>,d0
    9a80:	|  |  |  |     |      movea.l d0,a6
    9a82:	|  |  |  |     |      move.l 96(sp),d1
    9a86:	|  |  |  |     |      move.l 92(sp),d2
    9a8a:	|  |  |  |     |      move.l 88(sp),d3
    9a8e:	|  |  |  |     |      jsr -354(a6)
    9a92:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    9a96:	|  |  |  |     |      move.l 100(sp),80(sp)
    9a9c:	|  |  |  |     |      move.l 17b28 <SysBase>,d0
    9aa2:	|  |  |  |     |      movea.l d0,a6
    9aa4:	|  |  |  |     |      movea.l 80(sp),a1
    9aa8:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    9aac:	|  |  |  \-----|----> movea.l 152(sp),a0
    9ab0:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    9ab6:	|  \--|--------|----> tst.l 152(sp)
    9aba:	|     \--------|----- bne.w 98e2 <stackToFile+0x110>
    9abe:	|              |  /-- bra.s 9ac2 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    9ac0:	|              \--|-> nop
    }
    Close(fp);
    9ac2:	|                 \-> move.l 136(sp),20(sp)
    9ac8:	|                     move.l 17b30 <DOSBase>,d0
    9ace:	|                     movea.l d0,a6
    9ad0:	|                     move.l 20(sp),d1
    9ad4:	|                     jsr -36(a6)
    9ad8:	|                     move.l d0,16(sp)
    return TRUE;
    9adc:	|                     moveq #1,d0
}
    9ade:	\-------------------> movem.l (sp)+,d2-d3/a6
    9ae2:	                      lea 144(sp),sp
    9ae6:	                      rts

00009ae8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    9ae8:	       lea -20(sp),sp
    9aec:	       move.l a6,-(sp)
    9aee:	       move.l d2,-(sp)
	int a, len = strlen (s);
    9af0:	       move.l 32(sp),-(sp)
    9af4:	       jsr f534 <strlen>
    9afa:	       addq.l #4,sp
    9afc:	       move.l d0,20(sp)

	put2bytes (len, fp);
    9b00:	       move.l 36(sp),-(sp)
    9b04:	       move.l 24(sp),-(sp)
    9b08:	       jsr 8d0 <put2bytes>
    9b0e:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    9b10:	       clr.l 24(sp)
    9b14:	   /-- bra.s 9b6a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    9b16:	/--|-> move.l 36(sp),16(sp)
    9b1c:	|  |   move.l 24(sp),d0
    9b20:	|  |   movea.l 32(sp),a0
    9b24:	|  |   adda.l d0,a0
    9b26:	|  |   move.b (a0),d1
    9b28:	|  |   move.b 17bcc <encode1>,d0
    9b2e:	|  |   eor.b d1,d0
    9b30:	|  |   ext.w d0
    9b32:	|  |   movea.w d0,a0
    9b34:	|  |   move.l a0,12(sp)
    9b38:	|  |   move.l 17b30 <DOSBase>,d0
    9b3e:	|  |   movea.l d0,a6
    9b40:	|  |   move.l 16(sp),d1
    9b44:	|  |   move.l 12(sp),d2
    9b48:	|  |   jsr -312(a6)
    9b4c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    9b50:	|  |   move.b 17bcc <encode1>,d0
    9b56:	|  |   move.b d0,d1
    9b58:	|  |   move.b 17bcd <encode2>,d0
    9b5e:	|  |   add.b d1,d0
    9b60:	|  |   move.b d0,17bcc <encode1>
	for (a = 0; a < len; a ++) {
    9b66:	|  |   addq.l #1,24(sp)
    9b6a:	|  \-> move.l 24(sp),d0
    9b6e:	|      cmp.l 20(sp),d0
    9b72:	\----- blt.s 9b16 <writeStringEncoded+0x2e>
	}
}
    9b74:	       nop
    9b76:	       nop
    9b78:	       move.l (sp)+,d2
    9b7a:	       movea.l (sp)+,a6
    9b7c:	       lea 20(sp),sp
    9b80:	       rts

00009b82 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    9b82:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    9b84:	                   tst.l 8(sp)
    9b88:	               /-- bne.s 9b8e <failSecurityCheck+0xc>
    9b8a:	               |   moveq #1,d0
    9b8c:	/--------------|-- bra.s 9c0c <failSecurityCheck+0x8a>

	int a = 0;
    9b8e:	|              \-> clr.l (sp)

	while (fn[a]) {
    9b90:	|     /----------- bra.s 9bfe <failSecurityCheck+0x7c>
		switch (fn[a]) {
    9b92:	|  /--|----------> move.l (sp),d0
    9b94:	|  |  |            movea.l 8(sp),a0
    9b98:	|  |  |            adda.l d0,a0
    9b9a:	|  |  |            move.b (a0),d0
    9b9c:	|  |  |            ext.w d0
    9b9e:	|  |  |            movea.w d0,a0
    9ba0:	|  |  |            moveq #124,d0
    9ba2:	|  |  |            cmp.l a0,d0
    9ba4:	|  |  |     /----- beq.s 9be6 <failSecurityCheck+0x64>
    9ba6:	|  |  |     |      moveq #124,d1
    9ba8:	|  |  |     |      cmp.l a0,d1
    9baa:	|  |  |  /--|----- blt.s 9bfc <failSecurityCheck+0x7a>
    9bac:	|  |  |  |  |      moveq #92,d0
    9bae:	|  |  |  |  |      cmp.l a0,d0
    9bb0:	|  |  |  |  +----- beq.s 9be6 <failSecurityCheck+0x64>
    9bb2:	|  |  |  |  |      moveq #92,d1
    9bb4:	|  |  |  |  |      cmp.l a0,d1
    9bb6:	|  |  |  +--|----- blt.s 9bfc <failSecurityCheck+0x7a>
    9bb8:	|  |  |  |  |      moveq #60,d0
    9bba:	|  |  |  |  |      cmp.l a0,d0
    9bbc:	|  |  |  |  |  /-- blt.s 9bdc <failSecurityCheck+0x5a>
    9bbe:	|  |  |  |  |  |   moveq #34,d1
    9bc0:	|  |  |  |  |  |   cmp.l a0,d1
    9bc2:	|  |  |  +--|--|-- bgt.s 9bfc <failSecurityCheck+0x7a>
    9bc4:	|  |  |  |  |  |   moveq #-34,d1
    9bc6:	|  |  |  |  |  |   add.l a0,d1
    9bc8:	|  |  |  |  |  |   move.l #83894529,d0
    9bce:	|  |  |  |  |  |   lsr.l d1,d0
    9bd0:	|  |  |  |  |  |   moveq #1,d1
    9bd2:	|  |  |  |  |  |   and.l d1,d0
    9bd4:	|  |  |  |  |  |   sne d0
    9bd6:	|  |  |  |  |  |   neg.b d0
    9bd8:	|  |  |  |  +--|-- bne.s 9be6 <failSecurityCheck+0x64>
    9bda:	|  |  |  +--|--|-- bra.s 9bfc <failSecurityCheck+0x7a>
    9bdc:	|  |  |  |  |  \-> lea -62(a0),a0
    9be0:	|  |  |  |  |      moveq #1,d0
    9be2:	|  |  |  |  |      cmp.l a0,d0
    9be4:	|  |  |  +--|----- bcs.s 9bfc <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    9be6:	|  |  |  |  \----> move.l 8(sp),-(sp)
    9bea:	|  |  |  |         pea 155a4 <zbuffer.c.d110ca03+0x5e>
    9bf0:	|  |  |  |         jsr 12018 <KPrintF>
    9bf6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    9bf8:	|  |  |  |         moveq #1,d0
    9bfa:	+--|--|--|-------- bra.s 9c0c <failSecurityCheck+0x8a>
		}
		a++;
    9bfc:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    9bfe:	|  |  \----------> move.l (sp),d0
    9c00:	|  |               movea.l 8(sp),a0
    9c04:	|  |               adda.l d0,a0
    9c06:	|  |               move.b (a0),d0
    9c08:	|  \-------------- bne.s 9b92 <failSecurityCheck+0x10>
	}
	return FALSE;
    9c0a:	|                  clr.w d0
}
    9c0c:	\----------------> addq.l #4,sp
    9c0e:	                   rts

00009c10 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    9c10:	             lea -24(sp),sp
    9c14:	             move.l a6,-(sp)
    9c16:	             move.l 40(sp),d0
    9c1a:	             move.w d0,d0
    9c1c:	             move.w d0,6(sp)
	int fileNum = -1;
    9c20:	             moveq #-1,d0
    9c22:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    9c26:	             jsr 33e6 <killSpeechTimers>

	switch (numParams) {
    9c2c:	             moveq #2,d0
    9c2e:	             cmp.l 32(sp),d0
    9c32:	      /----- beq.s 9c78 <sayCore+0x68>
    9c34:	      |      moveq #3,d0
    9c36:	      |      cmp.l 32(sp),d0
    9c3a:	/-----|----- bne.w 9d5e <sayCore+0x14e>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    9c3e:	|     |      movea.l 36(sp),a0
    9c42:	|     |      move.l 24(a0),d0
    9c46:	|     |      move.l d0,-(sp)
    9c48:	|     |      pea 5 <_start+0x5>
    9c4c:	|     |      lea 20(sp),a0
    9c50:	|     |      move.l a0,-(sp)
    9c52:	|     |      jsr 10048 <getValueType>
    9c58:	|     |      lea 12(sp),sp
    9c5c:	|     |      tst.w d0
    9c5e:	|     |  /-- bne.s 9c66 <sayCore+0x56>
    9c60:	|     |  |   moveq #1,d0
    9c62:	|  /--|--|-- bra.w 9d6e <sayCore+0x15e>
			trimStack (fun -> stack);
    9c66:	|  |  |  \-> movea.l 36(sp),a0
    9c6a:	|  |  |      move.l 24(a0),d0
    9c6e:	|  |  |      move.l d0,-(sp)
    9c70:	|  |  |      jsr 109ac <trimStack>
    9c76:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    9c78:	|  |  \----> movea.l 36(sp),a0
    9c7c:	|  |         move.l 24(a0),d0
    9c80:	|  |         move.l d0,-(sp)
    9c82:	|  |         jsr 10620 <getTextFromAnyVar>
    9c88:	|  |         addq.l #4,sp
    9c8a:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    9c8e:	|  |     /-- bne.s 9c96 <sayCore+0x86>
    9c90:	|  |     |   moveq #1,d0
    9c92:	|  +-----|-- bra.w 9d6e <sayCore+0x15e>
			trimStack (fun -> stack);
    9c96:	|  |     \-> movea.l 36(sp),a0
    9c9a:	|  |         move.l 24(a0),d0
    9c9e:	|  |         move.l d0,-(sp)
    9ca0:	|  |         jsr 109ac <trimStack>
    9ca6:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9ca8:	|  |         movea.l 36(sp),a0
    9cac:	|  |         move.l 24(a0),d0
    9cb0:	|  |         move.l d0,-(sp)
    9cb2:	|  |         pea 7 <_start+0x7>
    9cb6:	|  |         lea 16(sp),a0
    9cba:	|  |         move.l a0,-(sp)
    9cbc:	|  |         jsr 10048 <getValueType>
    9cc2:	|  |         lea 12(sp),sp
    9cc6:	|  |         tst.w d0
    9cc8:	|  |     /-- bne.s 9cd0 <sayCore+0xc0>
    9cca:	|  |     |   moveq #1,d0
    9ccc:	|  +-----|-- bra.w 9d6e <sayCore+0x15e>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9cd0:	|  |     \-> movea.l 36(sp),a0
    9cd4:	|  |         move.l 24(a0),d0
    9cd8:	|  |         move.l d0,-(sp)
    9cda:	|  |         pea 7 <_start+0x7>
    9cde:	|  |         lea 16(sp),a0
    9ce2:	|  |         move.l a0,-(sp)
    9ce4:	|  |         jsr 10048 <getValueType>
    9cea:	|  |         lea 12(sp),sp
    9cee:	|  |         tst.w d0
    9cf0:	|  |     /-- bne.s 9cf6 <sayCore+0xe6>
    9cf2:	|  |     |   moveq #1,d0
    9cf4:	|  +-----|-- bra.s 9d6e <sayCore+0x15e>
			trimStack (fun -> stack);
    9cf6:	|  |     \-> movea.l 36(sp),a0
    9cfa:	|  |         move.l 24(a0),d0
    9cfe:	|  |         move.l d0,-(sp)
    9d00:	|  |         jsr 109ac <trimStack>
    9d06:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    9d08:	|  |         movea.w 6(sp),a0
    9d0c:	|  |         move.l 12(sp),d1
    9d10:	|  |         move.l 8(sp),d0
    9d14:	|  |         move.l a0,-(sp)
    9d16:	|  |         move.l d1,-(sp)
    9d18:	|  |         move.l d0,-(sp)
    9d1a:	|  |         move.l 36(sp),-(sp)
    9d1e:	|  |         jsr 50a8 <wrapSpeech>
    9d24:	|  |         lea 16(sp),sp
    9d28:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    9d2c:	|  |         movea.l 36(sp),a0
    9d30:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    9d36:	|  |         movea.l 36(sp),a0
    9d3a:	|  |         move.w #1,46(a0)
			FreeVec(newText);
    9d40:	|  |         move.l 24(sp),16(sp)
    9d46:	|  |         move.l 17b28 <SysBase>,d0
    9d4c:	|  |         movea.l d0,a6
    9d4e:	|  |         movea.l 16(sp),a1
    9d52:	|  |         jsr -690(a6)
			newText = NULL;
    9d56:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    9d5a:	|  |         moveq #0,d0
    9d5c:	|  +-------- bra.s 9d6e <sayCore+0x15e>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    9d5e:	\--|-------> pea 1562a <zbuffer.c.d110ca03+0xe4>
    9d64:	   |         jsr 12018 <KPrintF>
    9d6a:	   |         addq.l #4,sp
	return BR_ERROR;
    9d6c:	   |         moveq #1,d0
}
    9d6e:	   \-------> movea.l (sp)+,a6
    9d70:	             lea 24(sp),sp
    9d74:	             rts

00009d76 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    9d76:	pea 1 <_start+0x1>
    9d7a:	move.l 12(sp),-(sp)
    9d7e:	move.l 12(sp),-(sp)
    9d82:	jsr 9c10 <sayCore>
    9d88:	lea 12(sp),sp
}
    9d8c:	rts

00009d8e <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    9d8e:	clr.l -(sp)
    9d90:	move.l 12(sp),-(sp)
    9d94:	move.l 12(sp),-(sp)
    9d98:	jsr 9c10 <sayCore>
    9d9e:	lea 12(sp),sp
}
    9da2:	rts

00009da4 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    9da4:	moveq #2,d0
}
    9da6:	rts

00009da8 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    9da8:	moveq #2,d0
}
    9daa:	rts

00009dac <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    9dac:	nop
    9dae:	rts

00009db0 <builtIn_setCursor>:

builtIn(setCursor)
{
    9db0:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    9db2:	movea.l 12(sp),a0
    9db6:	move.l 24(a0),d0
    9dba:	move.l d0,-(sp)
    9dbc:	jsr 10522 <getAnimationFromVar>
    9dc2:	addq.l #4,sp
    9dc4:	move.l d0,(sp)
	pickAnimCursor (aa);
    9dc6:	move.l (sp),-(sp)
    9dc8:	jsr dba <pickAnimCursor>
    9dce:	addq.l #4,sp
	trimStack (fun -> stack);
    9dd0:	movea.l 12(sp),a0
    9dd4:	move.l 24(a0),d0
    9dd8:	move.l d0,-(sp)
    9dda:	jsr 109ac <trimStack>
    9de0:	addq.l #4,sp
	return BR_CONTINUE;
    9de2:	moveq #2,d0
}
    9de4:	addq.l #4,sp
    9de6:	rts

00009de8 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, input.mouseX + cameraX);
    9de8:	move.l 17ae8 <input+0xa>,d1
    9dee:	move.l 17bd0 <cameraX>,d0
    9df4:	add.l d0,d1
    9df6:	movea.l 8(sp),a0
    9dfa:	move.l 28(a0),d0
    9dfe:	move.l d1,-(sp)
    9e00:	pea 1 <_start+0x1>
    9e04:	move.l d0,-(sp)
    9e06:	jsr 1091a <setVariable>
    9e0c:	lea 12(sp),sp
	return BR_CONTINUE;
    9e10:	moveq #2,d0
}
    9e12:	rts

00009e14 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, input.mouseY + cameraY);
    9e14:	move.l 17aec <input+0xe>,d1
    9e1a:	move.l 17bd4 <cameraY>,d0
    9e20:	add.l d0,d1
    9e22:	movea.l 8(sp),a0
    9e26:	move.l 28(a0),d0
    9e2a:	move.l d1,-(sp)
    9e2c:	pea 1 <_start+0x1>
    9e30:	move.l d0,-(sp)
    9e32:	jsr 1091a <setVariable>
    9e38:	lea 12(sp),sp
	return BR_CONTINUE;
    9e3c:	moveq #2,d0
}
    9e3e:	rts

00009e40 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    9e40:	move.l 17ae8 <input+0xa>,d0
    9e46:	move.l d0,-(sp)
    9e48:	jsr 12470 <__floatsisf>
    9e4e:	addq.l #4,sp
    9e50:	move.l d0,d1
    9e52:	move.l 16032 <cameraZoom>,d0
    9e58:	move.l d0,-(sp)
    9e5a:	move.l d1,-(sp)
    9e5c:	jsr 12522 <__mulsf3>
    9e62:	addq.l #8,sp
    9e64:	move.l d0,-(sp)
    9e66:	jsr 12408 <__fixsfsi>
    9e6c:	addq.l #4,sp
    9e6e:	move.l d0,d1
    9e70:	movea.l 8(sp),a0
    9e74:	move.l 28(a0),d0
    9e78:	move.l d1,-(sp)
    9e7a:	pea 1 <_start+0x1>
    9e7e:	move.l d0,-(sp)
    9e80:	jsr 1091a <setVariable>
    9e86:	lea 12(sp),sp
	return BR_CONTINUE;
    9e8a:	moveq #2,d0
}
    9e8c:	rts

00009e8e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    9e8e:	move.l 17aec <input+0xe>,d0
    9e94:	move.l d0,-(sp)
    9e96:	jsr 12470 <__floatsisf>
    9e9c:	addq.l #4,sp
    9e9e:	move.l d0,d1
    9ea0:	move.l 16032 <cameraZoom>,d0
    9ea6:	move.l d0,-(sp)
    9ea8:	move.l d1,-(sp)
    9eaa:	jsr 12522 <__mulsf3>
    9eb0:	addq.l #8,sp
    9eb2:	move.l d0,-(sp)
    9eb4:	jsr 12408 <__fixsfsi>
    9eba:	addq.l #4,sp
    9ebc:	move.l d0,d1
    9ebe:	movea.l 8(sp),a0
    9ec2:	move.l 28(a0),d0
    9ec6:	move.l d1,-(sp)
    9ec8:	pea 1 <_start+0x1>
    9ecc:	move.l d0,-(sp)
    9ece:	jsr 1091a <setVariable>
    9ed4:	lea 12(sp),sp
	return BR_CONTINUE;
    9ed8:	moveq #2,d0
}
    9eda:	rts

00009edc <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (fun -> reg, statusBarText ());
    9edc:	jsr 4b5c <statusBarText>
    9ee2:	move.l d0,d1
    9ee4:	movea.l 8(sp),a0
    9ee8:	move.l 28(a0),d0
    9eec:	move.l d1,-(sp)
    9eee:	move.l d0,-(sp)
    9ef0:	jsr 1026a <makeTextVar>
    9ef6:	addq.l #8,sp
	return BR_CONTINUE;
    9ef8:	moveq #2,d0
}
    9efa:	rts

00009efc <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    9efc:	       lea -20(sp),sp
    9f00:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    9f02:	       movea.l 32(sp),a0
    9f06:	       move.l 24(a0),d0
    9f0a:	       move.l d0,-(sp)
    9f0c:	       jsr 10620 <getTextFromAnyVar>
    9f12:	       addq.l #4,sp
    9f14:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    9f18:	   /-- bne.s 9f20 <builtIn_getMatchingFiles+0x24>
    9f1a:	   |   moveq #1,d0
    9f1c:	/--|-- bra.w a002 <builtIn_getMatchingFiles+0x106>
	trimStack (fun -> stack);
    9f20:	|  \-> movea.l 32(sp),a0
    9f24:	|      move.l 24(a0),d0
    9f28:	|      move.l d0,-(sp)
    9f2a:	|      jsr 109ac <trimStack>
    9f30:	|      addq.l #4,sp
	unlinkVar (fun -> reg);
    9f32:	|      movea.l 32(sp),a0
    9f36:	|      move.l 28(a0),d0
    9f3a:	|      move.l d0,-(sp)
    9f3c:	|      jsr 10296 <unlinkVar>
    9f42:	|      addq.l #4,sp

	// Return value
	fun -> reg->varType = SVT_STACK;
    9f44:	|      movea.l 32(sp),a0
    9f48:	|      movea.l 28(a0),a0
    9f4c:	|      moveq #6,d0
    9f4e:	|      move.l d0,(a0)
	fun -> reg->varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    9f50:	|      moveq #12,d0
    9f52:	|      move.l d0,16(sp)
    9f56:	|      clr.l 12(sp)
    9f5a:	|      move.l 17b28 <SysBase>,d0
    9f60:	|      movea.l d0,a6
    9f62:	|      move.l 16(sp),d0
    9f66:	|      move.l 12(sp),d1
    9f6a:	|      jsr -684(a6)
    9f6e:	|      move.l d0,8(sp)
    9f72:	|      move.l 8(sp),d0
    9f76:	|      movea.l 32(sp),a0
    9f7a:	|      movea.l 28(a0),a0
    9f7e:	|      move.l d0,4(a0)
	if (!(fun -> reg->varData.theStack)) return BR_ERROR;
    9f82:	|      movea.l 32(sp),a0
    9f86:	|      movea.l 28(a0),a0
    9f8a:	|      move.l 4(a0),d0
    9f8e:	|  /-- bne.s 9f94 <builtIn_getMatchingFiles+0x98>
    9f90:	|  |   moveq #1,d0
    9f92:	+--|-- bra.s a002 <builtIn_getMatchingFiles+0x106>
	fun -> reg->varData.theStack -> first = NULL;
    9f94:	|  \-> movea.l 32(sp),a0
    9f98:	|      movea.l 28(a0),a0
    9f9c:	|      movea.l 4(a0),a0
    9fa0:	|      clr.l (a0)
	fun -> reg->varData.theStack -> last = NULL;
    9fa2:	|      movea.l 32(sp),a0
    9fa6:	|      movea.l 28(a0),a0
    9faa:	|      movea.l 4(a0),a0
    9fae:	|      clr.l 4(a0)
	fun -> reg->varData.theStack -> timesUsed = 1;
    9fb2:	|      movea.l 32(sp),a0
    9fb6:	|      movea.l 28(a0),a0
    9fba:	|      movea.l 4(a0),a0
    9fbe:	|      moveq #1,d0
    9fc0:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg->varData.theStack, newText)) return BR_ERROR;
    9fc4:	|      movea.l 32(sp),a0
    9fc8:	|      movea.l 28(a0),a0
    9fcc:	|      move.l 4(a0),d0
    9fd0:	|      move.l 20(sp),-(sp)
    9fd4:	|      move.l d0,-(sp)
    9fd6:	|      jsr fe04 <getSavedGamesStack>
    9fdc:	|      addq.l #8,sp
    9fde:	|      tst.w d0
    9fe0:	|  /-- bne.s 9fe6 <builtIn_getMatchingFiles+0xea>
    9fe2:	|  |   moveq #1,d0
    9fe4:	+--|-- bra.s a002 <builtIn_getMatchingFiles+0x106>
	FreeVec(newText);
    9fe6:	|  \-> move.l 20(sp),4(sp)
    9fec:	|      move.l 17b28 <SysBase>,d0
    9ff2:	|      movea.l d0,a6
    9ff4:	|      movea.l 4(sp),a1
    9ff8:	|      jsr -690(a6)
	newText = NULL;
    9ffc:	|      clr.l 20(sp)
	return BR_CONTINUE;
    a000:	|      moveq #2,d0
}
    a002:	\----> movea.l (sp)+,a6
    a004:	       lea 20(sp),sp
    a008:	       rts

0000a00a <builtIn_saveGame>:

builtIn(saveGame)
{
    a00a:	       lea -12(sp),sp
    a00e:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a010:	       movea.l 24(sp),a0
    a014:	       move.l 24(a0),d0
    a018:	       move.l d0,-(sp)
    a01a:	       jsr 10620 <getTextFromAnyVar>
    a020:	       addq.l #4,sp
    a022:	       move.l d0,17af4 <loadNow>
    trimStack(fun->stack);
    a028:	       movea.l 24(sp),a0
    a02c:	       move.l 24(a0),d0
    a030:	       move.l d0,-(sp)
    a032:	       jsr 109ac <trimStack>
    a038:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    a03a:	       move.l 17af4 <loadNow>,d0
    a040:	       move.l d0,-(sp)
    a042:	       jsr 2fe <encodeFilename>
    a048:	       addq.l #4,sp
    a04a:	       move.l d0,12(sp)
    FreeVec(loadNow);
    a04e:	       move.l 17af4 <loadNow>,8(sp)
    a056:	       move.l 17b28 <SysBase>,d0
    a05c:	       movea.l d0,a6
    a05e:	       movea.l 8(sp),a1
    a062:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    a066:	       move.l 12(sp),-(sp)
    a06a:	       jsr 9b82 <failSecurityCheck>
    a070:	       addq.l #4,sp
    a072:	       tst.w d0
    a074:	   /-- beq.s a07a <builtIn_saveGame+0x70>
    a076:	   |   moveq #1,d0
    a078:	/--|-- bra.s a0cc <builtIn_saveGame+0xc2>

    loadNow = joinStrings(":", aaaaa);
    a07a:	|  \-> move.l 12(sp),-(sp)
    a07e:	|      pea 15658 <zbuffer.c.d110ca03+0x112>
    a084:	|      jsr f574 <joinStrings>
    a08a:	|      addq.l #8,sp
    a08c:	|      move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    a092:	|      move.l 12(sp),4(sp)
    a098:	|      move.l 17b28 <SysBase>,d0
    a09e:	|      movea.l d0,a6
    a0a0:	|      movea.l 4(sp),a1
    a0a4:	|      jsr -690(a6)

    setVariable(fun->reg, SVT_INT, 0);
    a0a8:	|      movea.l 24(sp),a0
    a0ac:	|      move.l 28(a0),d0
    a0b0:	|      clr.l -(sp)
    a0b2:	|      pea 1 <_start+0x1>
    a0b6:	|      move.l d0,-(sp)
    a0b8:	|      jsr 1091a <setVariable>
    a0be:	|      lea 12(sp),sp
    saverFunc = fun;
    a0c2:	|      move.l 24(sp),17be0 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    a0ca:	|      moveq #0,d0
}
    a0cc:	\----> movea.l (sp)+,a6
    a0ce:	       lea 12(sp),sp
    a0d2:	       rts

0000a0d4 <builtIn_fileExists>:

builtIn(fileExists)
{
    a0d4:	       lea -36(sp),sp
    a0d8:	       move.l a6,-(sp)
    a0da:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a0dc:	       movea.l 52(sp),a0
    a0e0:	       move.l 24(a0),d0
    a0e4:	       move.l d0,-(sp)
    a0e6:	       jsr 10620 <getTextFromAnyVar>
    a0ec:	       addq.l #4,sp
    a0ee:	       move.l d0,17af4 <loadNow>
    trimStack(fun->stack);
    a0f4:	       movea.l 52(sp),a0
    a0f8:	       move.l 24(a0),d0
    a0fc:	       move.l d0,-(sp)
    a0fe:	       jsr 109ac <trimStack>
    a104:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    a106:	       move.l 17af4 <loadNow>,d0
    a10c:	       move.l d0,-(sp)
    a10e:	       jsr 2fe <encodeFilename>
    a114:	       addq.l #4,sp
    a116:	       move.l d0,40(sp)
    FreeVec(loadNow);
    a11a:	       move.l 17af4 <loadNow>,36(sp)
    a122:	       move.l 17b28 <SysBase>,d0
    a128:	       movea.l d0,a6
    a12a:	       movea.l 36(sp),a1
    a12e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    a132:	       move.l 40(sp),-(sp)
    a136:	       jsr 9b82 <failSecurityCheck>
    a13c:	       addq.l #4,sp
    a13e:	       tst.w d0
    a140:	   /-- beq.s a148 <builtIn_fileExists+0x74>
    a142:	   |   moveq #1,d0
    a144:	/--|-- bra.w a1ee <builtIn_fileExists+0x11a>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    a148:	|  \-> move.l 40(sp),32(sp)
    a14e:	|      move.l #1005,28(sp)
    a156:	|      move.l 17b30 <DOSBase>,d0
    a15c:	|      movea.l d0,a6
    a15e:	|      move.l 32(sp),d1
    a162:	|      move.l 28(sp),d2
    a166:	|      jsr -30(a6)
    a16a:	|      move.l d0,24(sp)
    a16e:	|      move.l 24(sp),d0
    a172:	|      move.l d0,20(sp)
    if (!fp) {        
    a176:	|  /-- bne.s a186 <builtIn_fileExists+0xb2>
        KPrintF("Can't get current directory.\n");      
    a178:	|  |   pea 1565a <zbuffer.c.d110ca03+0x114>
    a17e:	|  |   jsr 12018 <KPrintF>
    a184:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(fun->reg, SVT_INT, (fp != NULL));
    a186:	|  \-> tst.l 20(sp)
    a18a:	|      sne d0
    a18c:	|      neg.b d0
    a18e:	|      move.b d0,d0
    a190:	|      andi.l #255,d0
    a196:	|      movea.l 52(sp),a0
    a19a:	|      move.l 28(a0),d1
    a19e:	|      move.l d0,-(sp)
    a1a0:	|      pea 1 <_start+0x1>
    a1a4:	|      move.l d1,-(sp)
    a1a6:	|      jsr 1091a <setVariable>
    a1ac:	|      lea 12(sp),sp
    if (fp) Close(fp);
    a1b0:	|      tst.l 20(sp)
    a1b4:	|  /-- beq.s a1d0 <builtIn_fileExists+0xfc>
    a1b6:	|  |   move.l 20(sp),16(sp)
    a1bc:	|  |   move.l 17b30 <DOSBase>,d0
    a1c2:	|  |   movea.l d0,a6
    a1c4:	|  |   move.l 16(sp),d1
    a1c8:	|  |   jsr -36(a6)
    a1cc:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    a1d0:	|  \-> move.l 40(sp),8(sp)
    a1d6:	|      move.l 17b28 <SysBase>,d0
    a1dc:	|      movea.l d0,a6
    a1de:	|      movea.l 8(sp),a1
    a1e2:	|      jsr -690(a6)
    loadNow = NULL;
    a1e6:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a1ec:	|      moveq #2,d0
}
    a1ee:	\----> move.l (sp)+,d2
    a1f0:	       movea.l (sp)+,a6
    a1f2:	       lea 36(sp),sp
    a1f6:	       rts

0000a1f8 <builtIn_loadGame>:

builtIn(loadGame)
{
    a1f8:	       lea -36(sp),sp
    a1fc:	       move.l a6,-(sp)
    a1fe:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    a200:	       movea.l 52(sp),a0
    a204:	       move.l 24(a0),d0
    a208:	       move.l d0,-(sp)
    a20a:	       jsr 10620 <getTextFromAnyVar>
    a210:	       addq.l #4,sp
    a212:	       move.l d0,40(sp)
    trimStack(fun->stack);
    a216:	       movea.l 52(sp),a0
    a21a:	       move.l 24(a0),d0
    a21e:	       move.l d0,-(sp)
    a220:	       jsr 109ac <trimStack>
    a226:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    a228:	       move.l 40(sp),-(sp)
    a22c:	       jsr 2fe <encodeFilename>
    a232:	       addq.l #4,sp
    a234:	       move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    a23a:	       move.l 40(sp),36(sp)
    a240:	       move.l 17b28 <SysBase>,d0
    a246:	       movea.l d0,a6
    a248:	       movea.l 36(sp),a1
    a24c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    a250:	       move.l 17af4 <loadNow>,d0
    a256:	       move.l d0,-(sp)
    a258:	       jsr 9b82 <failSecurityCheck>
    a25e:	       addq.l #4,sp
    a260:	       tst.w d0
    a262:	   /-- beq.s a268 <builtIn_loadGame+0x70>
    a264:	   |   moveq #1,d0
    a266:	/--|-- bra.s a2d8 <builtIn_loadGame+0xe0>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    a268:	|  \-> move.l 17af4 <loadNow>,32(sp)
    a270:	|      move.l #1005,28(sp)
    a278:	|      move.l 17b30 <DOSBase>,d0
    a27e:	|      movea.l d0,a6
    a280:	|      move.l 32(sp),d1
    a284:	|      move.l 28(sp),d2
    a288:	|      jsr -30(a6)
    a28c:	|      move.l d0,24(sp)
    a290:	|      move.l 24(sp),d0
    a294:	|      move.l d0,20(sp)
    if (fp) {
    a298:	|  /-- beq.s a2b8 <builtIn_loadGame+0xc0>
        Close(fp);
    a29a:	|  |   move.l 20(sp),12(sp)
    a2a0:	|  |   move.l 17b30 <DOSBase>,d0
    a2a6:	|  |   movea.l d0,a6
    a2a8:	|  |   move.l 12(sp),d1
    a2ac:	|  |   jsr -36(a6)
    a2b0:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    a2b4:	|  |   moveq #0,d0
    a2b6:	+--|-- bra.s a2d8 <builtIn_loadGame+0xe0>
    }
    FreeVec(loadNow);
    a2b8:	|  \-> move.l 17af4 <loadNow>,16(sp)
    a2c0:	|      move.l 17b28 <SysBase>,d0
    a2c6:	|      movea.l d0,a6
    a2c8:	|      movea.l 16(sp),a1
    a2cc:	|      jsr -690(a6)
    loadNow = NULL;
    a2d0:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a2d6:	|      moveq #2,d0
}
    a2d8:	\----> move.l (sp)+,d2
    a2da:	       movea.l (sp)+,a6
    a2dc:	       lea 36(sp),sp
    a2e0:	       rts

0000a2e2 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    a2e2:	move.l 17bae <sceneHeight>,d0
    a2e8:	move.l d0,d1
    a2ea:	move.l 17baa <sceneWidth>,d0
    a2f0:	move.l d1,-(sp)
    a2f2:	move.l d0,-(sp)
    a2f4:	clr.l -(sp)
    a2f6:	clr.l -(sp)
    a2f8:	jsr 8a24 <blankScreen>
    a2fe:	lea 16(sp),sp
	return BR_CONTINUE;
    a302:	moveq #2,d0
}
    a304:	rts

0000a306 <builtIn_blankArea>:

builtIn(blankArea)
{
    a306:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a30a:	       movea.l 24(sp),a0
    a30e:	       move.l 24(a0),d0
    a312:	       move.l d0,-(sp)
    a314:	       pea 1 <_start+0x1>
    a318:	       lea 8(sp),a0
    a31c:	       move.l a0,-(sp)
    a31e:	       jsr 10048 <getValueType>
    a324:	       lea 12(sp),sp
    a328:	       tst.w d0
    a32a:	   /-- bne.s a332 <builtIn_blankArea+0x2c>
    a32c:	   |   moveq #1,d0
    a32e:	/--|-- bra.w a410 <builtIn_blankArea+0x10a>
	trimStack (fun -> stack);
    a332:	|  \-> movea.l 24(sp),a0
    a336:	|      move.l 24(a0),d0
    a33a:	|      move.l d0,-(sp)
    a33c:	|      jsr 109ac <trimStack>
    a342:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a344:	|      movea.l 24(sp),a0
    a348:	|      move.l 24(a0),d0
    a34c:	|      move.l d0,-(sp)
    a34e:	|      pea 1 <_start+0x1>
    a352:	|      lea 12(sp),a0
    a356:	|      move.l a0,-(sp)
    a358:	|      jsr 10048 <getValueType>
    a35e:	|      lea 12(sp),sp
    a362:	|      tst.w d0
    a364:	|  /-- bne.s a36c <builtIn_blankArea+0x66>
    a366:	|  |   moveq #1,d0
    a368:	+--|-- bra.w a410 <builtIn_blankArea+0x10a>
	trimStack (fun -> stack);
    a36c:	|  \-> movea.l 24(sp),a0
    a370:	|      move.l 24(a0),d0
    a374:	|      move.l d0,-(sp)
    a376:	|      jsr 109ac <trimStack>
    a37c:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a37e:	|      movea.l 24(sp),a0
    a382:	|      move.l 24(a0),d0
    a386:	|      move.l d0,-(sp)
    a388:	|      pea 1 <_start+0x1>
    a38c:	|      moveq #16,d0
    a38e:	|      add.l sp,d0
    a390:	|      move.l d0,-(sp)
    a392:	|      jsr 10048 <getValueType>
    a398:	|      lea 12(sp),sp
    a39c:	|      tst.w d0
    a39e:	|  /-- bne.s a3a4 <builtIn_blankArea+0x9e>
    a3a0:	|  |   moveq #1,d0
    a3a2:	+--|-- bra.s a410 <builtIn_blankArea+0x10a>
	trimStack (fun -> stack);
    a3a4:	|  \-> movea.l 24(sp),a0
    a3a8:	|      move.l 24(a0),d0
    a3ac:	|      move.l d0,-(sp)
    a3ae:	|      jsr 109ac <trimStack>
    a3b4:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a3b6:	|      movea.l 24(sp),a0
    a3ba:	|      move.l 24(a0),d0
    a3be:	|      move.l d0,-(sp)
    a3c0:	|      pea 1 <_start+0x1>
    a3c4:	|      moveq #20,d0
    a3c6:	|      add.l sp,d0
    a3c8:	|      move.l d0,-(sp)
    a3ca:	|      jsr 10048 <getValueType>
    a3d0:	|      lea 12(sp),sp
    a3d4:	|      tst.w d0
    a3d6:	|  /-- bne.s a3dc <builtIn_blankArea+0xd6>
    a3d8:	|  |   moveq #1,d0
    a3da:	+--|-- bra.s a410 <builtIn_blankArea+0x10a>
	trimStack (fun -> stack);
    a3dc:	|  \-> movea.l 24(sp),a0
    a3e0:	|      move.l 24(a0),d0
    a3e4:	|      move.l d0,-(sp)
    a3e6:	|      jsr 109ac <trimStack>
    a3ec:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    a3ee:	|      movea.l (sp),a1
    a3f0:	|      movea.l 4(sp),a0
    a3f4:	|      move.l 8(sp),d1
    a3f8:	|      move.l 12(sp),d0
    a3fc:	|      move.l a1,-(sp)
    a3fe:	|      move.l a0,-(sp)
    a400:	|      move.l d1,-(sp)
    a402:	|      move.l d0,-(sp)
    a404:	|      jsr 8a24 <blankScreen>
    a40a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    a40e:	|      moveq #2,d0
}
    a410:	\----> lea 16(sp),sp
    a414:	       rts

0000a416 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    a416:	jsr 8afa <darkScreen>
	return BR_CONTINUE;
    a41c:	moveq #2,d0
}
    a41e:	rts

0000a420 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    a420:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a424:	       movea.l 20(sp),a0
    a428:	       move.l 24(a0),d0
    a42c:	       move.l d0,-(sp)
    a42e:	       pea 1 <_start+0x1>
    a432:	       lea 8(sp),a0
    a436:	       move.l a0,-(sp)
    a438:	       jsr 10048 <getValueType>
    a43e:	       lea 12(sp),sp
    a442:	       tst.w d0
    a444:	   /-- bne.s a44c <builtIn_addOverlay+0x2c>
    a446:	   |   moveq #1,d0
    a448:	/--|-- bra.w a4ea <builtIn_addOverlay+0xca>
	trimStack (fun -> stack);
    a44c:	|  \-> movea.l 20(sp),a0
    a450:	|      move.l 24(a0),d0
    a454:	|      move.l d0,-(sp)
    a456:	|      jsr 109ac <trimStack>
    a45c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a45e:	|      movea.l 20(sp),a0
    a462:	|      move.l 24(a0),d0
    a466:	|      move.l d0,-(sp)
    a468:	|      pea 1 <_start+0x1>
    a46c:	|      moveq #12,d0
    a46e:	|      add.l sp,d0
    a470:	|      move.l d0,-(sp)
    a472:	|      jsr 10048 <getValueType>
    a478:	|      lea 12(sp),sp
    a47c:	|      tst.w d0
    a47e:	|  /-- bne.s a484 <builtIn_addOverlay+0x64>
    a480:	|  |   moveq #1,d0
    a482:	+--|-- bra.s a4ea <builtIn_addOverlay+0xca>
	trimStack (fun -> stack);
    a484:	|  \-> movea.l 20(sp),a0
    a488:	|      move.l 24(a0),d0
    a48c:	|      move.l d0,-(sp)
    a48e:	|      jsr 109ac <trimStack>
    a494:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a496:	|      movea.l 20(sp),a0
    a49a:	|      move.l 24(a0),d0
    a49e:	|      move.l d0,-(sp)
    a4a0:	|      pea 5 <_start+0x5>
    a4a4:	|      moveq #16,d0
    a4a6:	|      add.l sp,d0
    a4a8:	|      move.l d0,-(sp)
    a4aa:	|      jsr 10048 <getValueType>
    a4b0:	|      lea 12(sp),sp
    a4b4:	|      tst.w d0
    a4b6:	|  /-- bne.s a4bc <builtIn_addOverlay+0x9c>
    a4b8:	|  |   moveq #1,d0
    a4ba:	+--|-- bra.s a4ea <builtIn_addOverlay+0xca>
	trimStack (fun -> stack);
    a4bc:	|  \-> movea.l 20(sp),a0
    a4c0:	|      move.l 24(a0),d0
    a4c4:	|      move.l d0,-(sp)
    a4c6:	|      jsr 109ac <trimStack>
    a4cc:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    a4ce:	|      movea.l (sp),a0
    a4d0:	|      move.l 4(sp),d1
    a4d4:	|      move.l 8(sp),d0
    a4d8:	|      move.l a0,-(sp)
    a4da:	|      move.l d1,-(sp)
    a4dc:	|      move.l d0,-(sp)
    a4de:	|      jsr 8c12 <loadBackDrop>
    a4e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a4e8:	|      moveq #2,d0
}
    a4ea:	\----> lea 12(sp),sp
    a4ee:	       rts

0000a4f0 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    a4f0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a4f4:	       movea.l 20(sp),a0
    a4f8:	       move.l 24(a0),d0
    a4fc:	       move.l d0,-(sp)
    a4fe:	       pea 1 <_start+0x1>
    a502:	       lea 8(sp),a0
    a506:	       move.l a0,-(sp)
    a508:	       jsr 10048 <getValueType>
    a50e:	       lea 12(sp),sp
    a512:	       tst.w d0
    a514:	   /-- bne.s a51c <builtIn_mixOverlay+0x2c>
    a516:	   |   moveq #1,d0
    a518:	/--|-- bra.w a5ba <builtIn_mixOverlay+0xca>
	trimStack (fun -> stack);
    a51c:	|  \-> movea.l 20(sp),a0
    a520:	|      move.l 24(a0),d0
    a524:	|      move.l d0,-(sp)
    a526:	|      jsr 109ac <trimStack>
    a52c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a52e:	|      movea.l 20(sp),a0
    a532:	|      move.l 24(a0),d0
    a536:	|      move.l d0,-(sp)
    a538:	|      pea 1 <_start+0x1>
    a53c:	|      moveq #12,d0
    a53e:	|      add.l sp,d0
    a540:	|      move.l d0,-(sp)
    a542:	|      jsr 10048 <getValueType>
    a548:	|      lea 12(sp),sp
    a54c:	|      tst.w d0
    a54e:	|  /-- bne.s a554 <builtIn_mixOverlay+0x64>
    a550:	|  |   moveq #1,d0
    a552:	+--|-- bra.s a5ba <builtIn_mixOverlay+0xca>
	trimStack (fun -> stack);
    a554:	|  \-> movea.l 20(sp),a0
    a558:	|      move.l 24(a0),d0
    a55c:	|      move.l d0,-(sp)
    a55e:	|      jsr 109ac <trimStack>
    a564:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a566:	|      movea.l 20(sp),a0
    a56a:	|      move.l 24(a0),d0
    a56e:	|      move.l d0,-(sp)
    a570:	|      pea 5 <_start+0x5>
    a574:	|      moveq #16,d0
    a576:	|      add.l sp,d0
    a578:	|      move.l d0,-(sp)
    a57a:	|      jsr 10048 <getValueType>
    a580:	|      lea 12(sp),sp
    a584:	|      tst.w d0
    a586:	|  /-- bne.s a58c <builtIn_mixOverlay+0x9c>
    a588:	|  |   moveq #1,d0
    a58a:	+--|-- bra.s a5ba <builtIn_mixOverlay+0xca>
	trimStack (fun -> stack);
    a58c:	|  \-> movea.l 20(sp),a0
    a590:	|      move.l 24(a0),d0
    a594:	|      move.l d0,-(sp)
    a596:	|      jsr 109ac <trimStack>
    a59c:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    a59e:	|      movea.l (sp),a0
    a5a0:	|      move.l 4(sp),d1
    a5a4:	|      move.l 8(sp),d0
    a5a8:	|      move.l a0,-(sp)
    a5aa:	|      move.l d1,-(sp)
    a5ac:	|      move.l d0,-(sp)
    a5ae:	|      jsr 8c58 <mixBackDrop>
    a5b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a5b8:	|      moveq #2,d0
}
    a5ba:	\----> lea 12(sp),sp
    a5be:	       rts

0000a5c0 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    a5c0:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a5c4:	       movea.l 20(sp),a0
    a5c8:	       move.l 24(a0),d0
    a5cc:	       move.l d0,-(sp)
    a5ce:	       pea 1 <_start+0x1>
    a5d2:	       lea 8(sp),a0
    a5d6:	       move.l a0,-(sp)
    a5d8:	       jsr 10048 <getValueType>
    a5de:	       lea 12(sp),sp
    a5e2:	       tst.w d0
    a5e4:	   /-- bne.s a5ec <builtIn_pasteImage+0x2c>
    a5e6:	   |   moveq #1,d0
    a5e8:	/--|-- bra.w a682 <builtIn_pasteImage+0xc2>
	trimStack (fun -> stack);
    a5ec:	|  \-> movea.l 20(sp),a0
    a5f0:	|      move.l 24(a0),d0
    a5f4:	|      move.l d0,-(sp)
    a5f6:	|      jsr 109ac <trimStack>
    a5fc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a5fe:	|      movea.l 20(sp),a0
    a602:	|      move.l 24(a0),d0
    a606:	|      move.l d0,-(sp)
    a608:	|      pea 1 <_start+0x1>
    a60c:	|      moveq #12,d0
    a60e:	|      add.l sp,d0
    a610:	|      move.l d0,-(sp)
    a612:	|      jsr 10048 <getValueType>
    a618:	|      lea 12(sp),sp
    a61c:	|      tst.w d0
    a61e:	|  /-- bne.s a624 <builtIn_pasteImage+0x64>
    a620:	|  |   moveq #1,d0
    a622:	+--|-- bra.s a682 <builtIn_pasteImage+0xc2>
	trimStack (fun -> stack);
    a624:	|  \-> movea.l 20(sp),a0
    a628:	|      move.l 24(a0),d0
    a62c:	|      move.l d0,-(sp)
    a62e:	|      jsr 109ac <trimStack>
    a634:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    a636:	|      movea.l 20(sp),a0
    a63a:	|      move.l 24(a0),d0
    a63e:	|      move.l d0,-(sp)
    a640:	|      jsr 10522 <getAnimationFromVar>
    a646:	|      addq.l #4,sp
    a648:	|      move.l d0,8(sp)
	trimStack (fun -> stack);
    a64c:	|      movea.l 20(sp),a0
    a650:	|      move.l 24(a0),d0
    a654:	|      move.l d0,-(sp)
    a656:	|      jsr 109ac <trimStack>
    a65c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    a65e:	|      tst.l 8(sp)
    a662:	|  /-- bne.s a668 <builtIn_pasteImage+0xa8>
    a664:	|  |   moveq #2,d0
    a666:	+--|-- bra.s a682 <builtIn_pasteImage+0xc2>

	pasteCursor (x, y, pp);
    a668:	|  \-> move.l (sp),d1
    a66a:	|      move.l 4(sp),d0
    a66e:	|      move.l 8(sp),-(sp)
    a672:	|      move.l d1,-(sp)
    a674:	|      move.l d0,-(sp)
    a676:	|      jsr de2 <pasteCursor>
    a67c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a680:	|      moveq #2,d0
}
    a682:	\----> lea 12(sp),sp
    a686:	       rts

0000a688 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    a688:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a68a:	       movea.l 16(sp),a0
    a68e:	       move.l 24(a0),d0
    a692:	       move.l d0,-(sp)
    a694:	       pea 1 <_start+0x1>
    a698:	       move.l sp,d0
    a69a:	       addq.l #8,d0
    a69c:	       move.l d0,-(sp)
    a69e:	       jsr 10048 <getValueType>
    a6a4:	       lea 12(sp),sp
    a6a8:	       tst.w d0
    a6aa:	   /-- bne.s a6b2 <builtIn_setSceneDimensions+0x2a>
    a6ac:	   |   moveq #1,d0
    a6ae:	/--|-- bra.w a73e <builtIn_setSceneDimensions+0xb6>
	trimStack (fun -> stack);
    a6b2:	|  \-> movea.l 16(sp),a0
    a6b6:	|      move.l 24(a0),d0
    a6ba:	|      move.l d0,-(sp)
    a6bc:	|      jsr 109ac <trimStack>
    a6c2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a6c4:	|      movea.l 16(sp),a0
    a6c8:	|      move.l 24(a0),d0
    a6cc:	|      move.l d0,-(sp)
    a6ce:	|      pea 1 <_start+0x1>
    a6d2:	|      moveq #12,d0
    a6d4:	|      add.l sp,d0
    a6d6:	|      move.l d0,-(sp)
    a6d8:	|      jsr 10048 <getValueType>
    a6de:	|      lea 12(sp),sp
    a6e2:	|      tst.w d0
    a6e4:	|  /-- bne.s a6ea <builtIn_setSceneDimensions+0x62>
    a6e6:	|  |   moveq #1,d0
    a6e8:	+--|-- bra.s a73e <builtIn_setSceneDimensions+0xb6>
	trimStack (fun -> stack);
    a6ea:	|  \-> movea.l 16(sp),a0
    a6ee:	|      move.l 24(a0),d0
    a6f2:	|      move.l d0,-(sp)
    a6f4:	|      jsr 109ac <trimStack>
    a6fa:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    a6fc:	|      move.l (sp),d1
    a6fe:	|      move.l 4(sp),d0
    a702:	|      move.l d1,-(sp)
    a704:	|      move.l d0,-(sp)
    a706:	|      jsr 8c86 <resizeBackdrop>
    a70c:	|      addq.l #8,sp
    a70e:	|      tst.w d0
    a710:	|  /-- beq.s a72e <builtIn_setSceneDimensions+0xa6>
		blankScreen (0, 0, x, y);
    a712:	|  |   move.l (sp),d1
    a714:	|  |   move.l 4(sp),d0
    a718:	|  |   move.l d1,-(sp)
    a71a:	|  |   move.l d0,-(sp)
    a71c:	|  |   clr.l -(sp)
    a71e:	|  |   clr.l -(sp)
    a720:	|  |   jsr 8a24 <blankScreen>
    a726:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    a72a:	|  |   moveq #2,d0
    a72c:	+--|-- bra.s a73e <builtIn_setSceneDimensions+0xb6>
	}
	KPrintF("Out of memory creating new backdrop.");
    a72e:	|  \-> pea 15678 <zbuffer.c.d110ca03+0x132>
    a734:	|      jsr 12018 <KPrintF>
    a73a:	|      addq.l #4,sp
	return BR_ERROR;
    a73c:	|      moveq #1,d0
}
    a73e:	\----> addq.l #8,sp
    a740:	       rts

0000a742 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    a742:	          move.l d3,-(sp)
    a744:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a746:	          movea.l 16(sp),a0
    a74a:	          move.l 24(a0),d0
    a74e:	          move.l d0,-(sp)
    a750:	          pea 1 <_start+0x1>
    a754:	          pea 17bd4 <cameraY>
    a75a:	          jsr 10048 <getValueType>
    a760:	          lea 12(sp),sp
    a764:	          tst.w d0
    a766:	      /-- bne.s a76e <builtIn_aimCamera+0x2c>
    a768:	      |   moveq #1,d0
    a76a:	/-----|-- bra.w a9f4 <builtIn_aimCamera+0x2b2>
	trimStack (fun -> stack);
    a76e:	|     \-> movea.l 16(sp),a0
    a772:	|         move.l 24(a0),d0
    a776:	|         move.l d0,-(sp)
    a778:	|         jsr 109ac <trimStack>
    a77e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a780:	|         movea.l 16(sp),a0
    a784:	|         move.l 24(a0),d0
    a788:	|         move.l d0,-(sp)
    a78a:	|         pea 1 <_start+0x1>
    a78e:	|         pea 17bd0 <cameraX>
    a794:	|         jsr 10048 <getValueType>
    a79a:	|         lea 12(sp),sp
    a79e:	|         tst.w d0
    a7a0:	|     /-- bne.s a7a8 <builtIn_aimCamera+0x66>
    a7a2:	|     |   moveq #1,d0
    a7a4:	+-----|-- bra.w a9f4 <builtIn_aimCamera+0x2b2>
	trimStack (fun -> stack);
    a7a8:	|     \-> movea.l 16(sp),a0
    a7ac:	|         move.l 24(a0),d0
    a7b0:	|         move.l d0,-(sp)
    a7b2:	|         jsr 109ac <trimStack>
    a7b8:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    a7ba:	|         move.l 17bd0 <cameraX>,d0
    a7c0:	|         move.l d0,-(sp)
    a7c2:	|         jsr 12470 <__floatsisf>
    a7c8:	|         addq.l #4,sp
    a7ca:	|         move.l d0,d2
    a7cc:	|         move.l 17a28 <winWidth>,d0
    a7d2:	|         lsr.l #1,d0
    a7d4:	|         move.l d0,-(sp)
    a7d6:	|         jsr 12498 <__floatunsisf>
    a7dc:	|         addq.l #4,sp
    a7de:	|         move.l d0,d1
    a7e0:	|         move.l 16032 <cameraZoom>,d0
    a7e6:	|         move.l d0,-(sp)
    a7e8:	|         move.l d1,-(sp)
    a7ea:	|         jsr 1231c <__divsf3>
    a7f0:	|         addq.l #8,sp
    a7f2:	|         move.l d0,-(sp)
    a7f4:	|         move.l d2,-(sp)
    a7f6:	|         jsr 12764 <__subsf3>
    a7fc:	|         addq.l #8,sp
    a7fe:	|         move.l d0,-(sp)
    a800:	|         jsr 12408 <__fixsfsi>
    a806:	|         addq.l #4,sp
    a808:	|         move.l d0,17bd0 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    a80e:	|         move.l 17bd4 <cameraY>,d0
    a814:	|         move.l d0,-(sp)
    a816:	|         jsr 12470 <__floatsisf>
    a81c:	|         addq.l #4,sp
    a81e:	|         move.l d0,d2
    a820:	|         move.l 17a2c <winHeight>,d0
    a826:	|         lsr.l #1,d0
    a828:	|         move.l d0,-(sp)
    a82a:	|         jsr 12498 <__floatunsisf>
    a830:	|         addq.l #4,sp
    a832:	|         move.l d0,d1
    a834:	|         move.l 16032 <cameraZoom>,d0
    a83a:	|         move.l d0,-(sp)
    a83c:	|         move.l d1,-(sp)
    a83e:	|         jsr 1231c <__divsf3>
    a844:	|         addq.l #8,sp
    a846:	|         move.l d0,-(sp)
    a848:	|         move.l d2,-(sp)
    a84a:	|         jsr 12764 <__subsf3>
    a850:	|         addq.l #8,sp
    a852:	|         move.l d0,-(sp)
    a854:	|         jsr 12408 <__fixsfsi>
    a85a:	|         addq.l #4,sp
    a85c:	|         move.l d0,17bd4 <cameraY>

	if (cameraX < 0) cameraX = 0;
    a862:	|         move.l 17bd0 <cameraX>,d0
    a868:	|     /-- bpl.s a874 <builtIn_aimCamera+0x132>
    a86a:	|     |   clr.l 17bd0 <cameraX>
    a870:	|  /--|-- bra.w a92a <builtIn_aimCamera+0x1e8>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    a874:	|  |  \-> move.l 17bd0 <cameraX>,d0
    a87a:	|  |      move.l d0,-(sp)
    a87c:	|  |      jsr 12470 <__floatsisf>
    a882:	|  |      addq.l #4,sp
    a884:	|  |      move.l d0,d2
    a886:	|  |      move.l 17baa <sceneWidth>,d0
    a88c:	|  |      move.l d0,-(sp)
    a88e:	|  |      jsr 12498 <__floatunsisf>
    a894:	|  |      addq.l #4,sp
    a896:	|  |      move.l d0,d3
    a898:	|  |      move.l 17a28 <winWidth>,d0
    a89e:	|  |      move.l d0,-(sp)
    a8a0:	|  |      jsr 12498 <__floatunsisf>
    a8a6:	|  |      addq.l #4,sp
    a8a8:	|  |      move.l d0,d1
    a8aa:	|  |      move.l 16032 <cameraZoom>,d0
    a8b0:	|  |      move.l d0,-(sp)
    a8b2:	|  |      move.l d1,-(sp)
    a8b4:	|  |      jsr 1231c <__divsf3>
    a8ba:	|  |      addq.l #8,sp
    a8bc:	|  |      move.l d0,-(sp)
    a8be:	|  |      move.l d3,-(sp)
    a8c0:	|  |      jsr 12764 <__subsf3>
    a8c6:	|  |      addq.l #8,sp
    a8c8:	|  |      move.l d0,-(sp)
    a8ca:	|  |      move.l d2,-(sp)
    a8cc:	|  |      jsr 125dc <__gtsf2>
    a8d2:	|  |      addq.l #8,sp
    a8d4:	|  |      tst.l d0
    a8d6:	|  +----- ble.s a92a <builtIn_aimCamera+0x1e8>
    a8d8:	|  |      move.l 17baa <sceneWidth>,d0
    a8de:	|  |      move.l d0,-(sp)
    a8e0:	|  |      jsr 12498 <__floatunsisf>
    a8e6:	|  |      addq.l #4,sp
    a8e8:	|  |      move.l d0,d2
    a8ea:	|  |      move.l 17a28 <winWidth>,d0
    a8f0:	|  |      move.l d0,-(sp)
    a8f2:	|  |      jsr 12498 <__floatunsisf>
    a8f8:	|  |      addq.l #4,sp
    a8fa:	|  |      move.l d0,d1
    a8fc:	|  |      move.l 16032 <cameraZoom>,d0
    a902:	|  |      move.l d0,-(sp)
    a904:	|  |      move.l d1,-(sp)
    a906:	|  |      jsr 1231c <__divsf3>
    a90c:	|  |      addq.l #8,sp
    a90e:	|  |      move.l d0,-(sp)
    a910:	|  |      move.l d2,-(sp)
    a912:	|  |      jsr 12764 <__subsf3>
    a918:	|  |      addq.l #8,sp
    a91a:	|  |      move.l d0,-(sp)
    a91c:	|  |      jsr 12408 <__fixsfsi>
    a922:	|  |      addq.l #4,sp
    a924:	|  |      move.l d0,17bd0 <cameraX>
	if (cameraY < 0) cameraY = 0;
    a92a:	|  \----> move.l 17bd4 <cameraY>,d0
    a930:	|     /-- bpl.s a93c <builtIn_aimCamera+0x1fa>
    a932:	|     |   clr.l 17bd4 <cameraY>
    a938:	|  /--|-- bra.w a9f2 <builtIn_aimCamera+0x2b0>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    a93c:	|  |  \-> move.l 17bd4 <cameraY>,d0
    a942:	|  |      move.l d0,-(sp)
    a944:	|  |      jsr 12470 <__floatsisf>
    a94a:	|  |      addq.l #4,sp
    a94c:	|  |      move.l d0,d2
    a94e:	|  |      move.l 17bae <sceneHeight>,d0
    a954:	|  |      move.l d0,-(sp)
    a956:	|  |      jsr 12498 <__floatunsisf>
    a95c:	|  |      addq.l #4,sp
    a95e:	|  |      move.l d0,d3
    a960:	|  |      move.l 17a2c <winHeight>,d0
    a966:	|  |      move.l d0,-(sp)
    a968:	|  |      jsr 12498 <__floatunsisf>
    a96e:	|  |      addq.l #4,sp
    a970:	|  |      move.l d0,d1
    a972:	|  |      move.l 16032 <cameraZoom>,d0
    a978:	|  |      move.l d0,-(sp)
    a97a:	|  |      move.l d1,-(sp)
    a97c:	|  |      jsr 1231c <__divsf3>
    a982:	|  |      addq.l #8,sp
    a984:	|  |      move.l d0,-(sp)
    a986:	|  |      move.l d3,-(sp)
    a988:	|  |      jsr 12764 <__subsf3>
    a98e:	|  |      addq.l #8,sp
    a990:	|  |      move.l d0,-(sp)
    a992:	|  |      move.l d2,-(sp)
    a994:	|  |      jsr 125dc <__gtsf2>
    a99a:	|  |      addq.l #8,sp
    a99c:	|  |      tst.l d0
    a99e:	|  +----- ble.s a9f2 <builtIn_aimCamera+0x2b0>
    a9a0:	|  |      move.l 17bae <sceneHeight>,d0
    a9a6:	|  |      move.l d0,-(sp)
    a9a8:	|  |      jsr 12498 <__floatunsisf>
    a9ae:	|  |      addq.l #4,sp
    a9b0:	|  |      move.l d0,d2
    a9b2:	|  |      move.l 17a2c <winHeight>,d0
    a9b8:	|  |      move.l d0,-(sp)
    a9ba:	|  |      jsr 12498 <__floatunsisf>
    a9c0:	|  |      addq.l #4,sp
    a9c2:	|  |      move.l d0,d1
    a9c4:	|  |      move.l 16032 <cameraZoom>,d0
    a9ca:	|  |      move.l d0,-(sp)
    a9cc:	|  |      move.l d1,-(sp)
    a9ce:	|  |      jsr 1231c <__divsf3>
    a9d4:	|  |      addq.l #8,sp
    a9d6:	|  |      move.l d0,-(sp)
    a9d8:	|  |      move.l d2,-(sp)
    a9da:	|  |      jsr 12764 <__subsf3>
    a9e0:	|  |      addq.l #8,sp
    a9e2:	|  |      move.l d0,-(sp)
    a9e4:	|  |      jsr 12408 <__fixsfsi>
    a9ea:	|  |      addq.l #4,sp
    a9ec:	|  |      move.l d0,17bd4 <cameraY>
	return BR_CONTINUE;
    a9f2:	|  \----> moveq #2,d0
}
    a9f4:	\-------> move.l (sp)+,d2
    a9f6:	          move.l (sp)+,d3
    a9f8:	          rts

0000a9fa <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    a9fa:	       subq.l #4,sp
    a9fc:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a9fe:	       movea.l 16(sp),a0
    aa02:	       move.l 24(a0),d0
    aa06:	       move.l d0,-(sp)
    aa08:	       pea 1 <_start+0x1>
    aa0c:	       moveq #12,d0
    aa0e:	       add.l sp,d0
    aa10:	       move.l d0,-(sp)
    aa12:	       jsr 10048 <getValueType>
    aa18:	       lea 12(sp),sp
    aa1c:	       tst.w d0
    aa1e:	   /-- bne.s aa26 <builtIn_zoomCamera+0x2c>
    aa20:	   |   moveq #1,d0
    aa22:	/--|-- bra.w ac22 <builtIn_zoomCamera+0x228>
	trimStack (fun -> stack);
    aa26:	|  \-> movea.l 16(sp),a0
    aa2a:	|      move.l 24(a0),d0
    aa2e:	|      move.l d0,-(sp)
    aa30:	|      jsr 109ac <trimStack>
    aa36:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    aa38:	|      move.l 17ae8 <input+0xa>,d0
    aa3e:	|      move.l d0,-(sp)
    aa40:	|      jsr 12470 <__floatsisf>
    aa46:	|      addq.l #4,sp
    aa48:	|      move.l d0,d1
    aa4a:	|      move.l 16032 <cameraZoom>,d0
    aa50:	|      move.l d0,-(sp)
    aa52:	|      move.l d1,-(sp)
    aa54:	|      jsr 12522 <__mulsf3>
    aa5a:	|      addq.l #8,sp
    aa5c:	|      move.l d0,-(sp)
    aa5e:	|      jsr 12408 <__fixsfsi>
    aa64:	|      addq.l #4,sp
    aa66:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    aa6c:	|      move.l 17aec <input+0xe>,d0
    aa72:	|      move.l d0,-(sp)
    aa74:	|      jsr 12470 <__floatsisf>
    aa7a:	|      addq.l #4,sp
    aa7c:	|      move.l d0,d1
    aa7e:	|      move.l 16032 <cameraZoom>,d0
    aa84:	|      move.l d0,-(sp)
    aa86:	|      move.l d1,-(sp)
    aa88:	|      jsr 12522 <__mulsf3>
    aa8e:	|      addq.l #8,sp
    aa90:	|      move.l d0,-(sp)
    aa92:	|      jsr 12408 <__fixsfsi>
    aa98:	|      addq.l #4,sp
    aa9a:	|      move.l d0,17aec <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    aaa0:	|      move.l 4(sp),d0
    aaa4:	|      move.l d0,-(sp)
    aaa6:	|      jsr 12470 <__floatsisf>
    aaac:	|      addq.l #4,sp
    aaae:	|      move.l #1008981770,-(sp)
    aab4:	|      move.l d0,-(sp)
    aab6:	|      jsr 12522 <__mulsf3>
    aabc:	|      addq.l #8,sp
    aabe:	|      move.l d0,16032 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    aac4:	|      move.l 17a28 <winWidth>,d0
    aaca:	|      move.l d0,-(sp)
    aacc:	|      jsr 12498 <__floatunsisf>
    aad2:	|      addq.l #4,sp
    aad4:	|      move.l d0,d1
    aad6:	|      move.l 16032 <cameraZoom>,d0
    aadc:	|      move.l d0,-(sp)
    aade:	|      move.l d1,-(sp)
    aae0:	|      jsr 1231c <__divsf3>
    aae6:	|      addq.l #8,sp
    aae8:	|      move.l d0,d2
    aaea:	|      move.l 17baa <sceneWidth>,d0
    aaf0:	|      move.l d0,-(sp)
    aaf2:	|      jsr 12498 <__floatunsisf>
    aaf8:	|      addq.l #4,sp
    aafa:	|      move.l d0,-(sp)
    aafc:	|      move.l d2,-(sp)
    aafe:	|      jsr 125dc <__gtsf2>
    ab04:	|      addq.l #8,sp
    ab06:	|      tst.l d0
    ab08:	|  /-- ble.s ab3e <builtIn_zoomCamera+0x144>
    ab0a:	|  |   move.l 17a28 <winWidth>,d0
    ab10:	|  |   move.l d0,-(sp)
    ab12:	|  |   jsr 12498 <__floatunsisf>
    ab18:	|  |   addq.l #4,sp
    ab1a:	|  |   move.l d0,d2
    ab1c:	|  |   move.l 17baa <sceneWidth>,d0
    ab22:	|  |   move.l d0,-(sp)
    ab24:	|  |   jsr 12498 <__floatunsisf>
    ab2a:	|  |   addq.l #4,sp
    ab2c:	|  |   move.l d0,-(sp)
    ab2e:	|  |   move.l d2,-(sp)
    ab30:	|  |   jsr 1231c <__divsf3>
    ab36:	|  |   addq.l #8,sp
    ab38:	|  |   move.l d0,16032 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ab3e:	|  \-> move.l 17a2c <winHeight>,d0
    ab44:	|      move.l d0,-(sp)
    ab46:	|      jsr 12498 <__floatunsisf>
    ab4c:	|      addq.l #4,sp
    ab4e:	|      move.l d0,d1
    ab50:	|      move.l 16032 <cameraZoom>,d0
    ab56:	|      move.l d0,-(sp)
    ab58:	|      move.l d1,-(sp)
    ab5a:	|      jsr 1231c <__divsf3>
    ab60:	|      addq.l #8,sp
    ab62:	|      move.l d0,d2
    ab64:	|      move.l 17bae <sceneHeight>,d0
    ab6a:	|      move.l d0,-(sp)
    ab6c:	|      jsr 12498 <__floatunsisf>
    ab72:	|      addq.l #4,sp
    ab74:	|      move.l d0,-(sp)
    ab76:	|      move.l d2,-(sp)
    ab78:	|      jsr 125dc <__gtsf2>
    ab7e:	|      addq.l #8,sp
    ab80:	|      tst.l d0
    ab82:	|  /-- ble.s abb8 <builtIn_zoomCamera+0x1be>
    ab84:	|  |   move.l 17a2c <winHeight>,d0
    ab8a:	|  |   move.l d0,-(sp)
    ab8c:	|  |   jsr 12498 <__floatunsisf>
    ab92:	|  |   addq.l #4,sp
    ab94:	|  |   move.l d0,d2
    ab96:	|  |   move.l 17bae <sceneHeight>,d0
    ab9c:	|  |   move.l d0,-(sp)
    ab9e:	|  |   jsr 12498 <__floatunsisf>
    aba4:	|  |   addq.l #4,sp
    aba6:	|  |   move.l d0,-(sp)
    aba8:	|  |   move.l d2,-(sp)
    abaa:	|  |   jsr 1231c <__divsf3>
    abb0:	|  |   addq.l #8,sp
    abb2:	|  |   move.l d0,16032 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    abb8:	|  \-> move.l 17ae8 <input+0xa>,d0
    abbe:	|      move.l d0,-(sp)
    abc0:	|      jsr 12470 <__floatsisf>
    abc6:	|      addq.l #4,sp
    abc8:	|      move.l d0,d1
    abca:	|      move.l 16032 <cameraZoom>,d0
    abd0:	|      move.l d0,-(sp)
    abd2:	|      move.l d1,-(sp)
    abd4:	|      jsr 1231c <__divsf3>
    abda:	|      addq.l #8,sp
    abdc:	|      move.l d0,-(sp)
    abde:	|      jsr 12408 <__fixsfsi>
    abe4:	|      addq.l #4,sp
    abe6:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    abec:	|      move.l 17aec <input+0xe>,d0
    abf2:	|      move.l d0,-(sp)
    abf4:	|      jsr 12470 <__floatsisf>
    abfa:	|      addq.l #4,sp
    abfc:	|      move.l d0,d1
    abfe:	|      move.l 16032 <cameraZoom>,d0
    ac04:	|      move.l d0,-(sp)
    ac06:	|      move.l d1,-(sp)
    ac08:	|      jsr 1231c <__divsf3>
    ac0e:	|      addq.l #8,sp
    ac10:	|      move.l d0,-(sp)
    ac12:	|      jsr 12408 <__fixsfsi>
    ac18:	|      addq.l #4,sp
    ac1a:	|      move.l d0,17aec <input+0xe>

	return BR_CONTINUE;
    ac20:	|      moveq #2,d0
}
    ac22:	\----> move.l (sp)+,d2
    ac24:	       addq.l #4,sp
    ac26:	       rts

0000ac28 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ac28:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ac2a:	             tst.l 8(sp)
    ac2e:	         /-- bne.s ac42 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ac30:	         |   pea 1569d <zbuffer.c.d110ca03+0x157>
    ac36:	         |   jsr 12018 <KPrintF>
    ac3c:	         |   addq.l #4,sp
		return BR_ERROR;
    ac3e:	         |   moveq #1,d0
    ac40:	/--------|-- bra.s aca6 <builtIn_pickOne+0x7e>
	}
	int i = rand() % numParams;
    ac42:	|        \-> jsr c58 <rand>
    ac48:	|            move.l d0,d1
    ac4a:	|            move.l 8(sp),d0
    ac4e:	|            move.l d0,-(sp)
    ac50:	|            move.l d1,-(sp)
    ac52:	|            jsr 12aa4 <__umodsi3>
    ac58:	|            addq.l #8,sp
    ac5a:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ac5c:	|     /----- bra.s ac94 <builtIn_pickOne+0x6c>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), fun -> reg);
    ac5e:	|  /--|----> move.l (sp),d0
    ac60:	|  |  |      cmp.l 8(sp),d0
    ac64:	|  |  |  /-- bne.s ac82 <builtIn_pickOne+0x5a>
    ac66:	|  |  |  |   movea.l 12(sp),a0
    ac6a:	|  |  |  |   move.l 28(a0),d1
    ac6e:	|  |  |  |   movea.l 12(sp),a0
    ac72:	|  |  |  |   move.l 24(a0),d0
    ac76:	|  |  |  |   move.l d1,-(sp)
    ac78:	|  |  |  |   move.l d0,-(sp)
    ac7a:	|  |  |  |   jsr 10504 <copyVariable>
    ac80:	|  |  |  |   addq.l #8,sp
		trimStack (fun -> stack);
    ac82:	|  |  |  \-> movea.l 12(sp),a0
    ac86:	|  |  |      move.l 24(a0),d0
    ac8a:	|  |  |      move.l d0,-(sp)
    ac8c:	|  |  |      jsr 109ac <trimStack>
    ac92:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ac94:	|  |  \----> move.l 8(sp),d0
    ac98:	|  |         move.l d0,d1
    ac9a:	|  |         subq.l #1,d1
    ac9c:	|  |         move.l d1,8(sp)
    aca0:	|  |         tst.l d0
    aca2:	|  \-------- bne.s ac5e <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    aca4:	|            moveq #2,d0
}
    aca6:	\----------> addq.l #4,sp
    aca8:	             rts

0000acaa <builtIn_substring>:

builtIn(substring)
{
    acaa:	       lea -40(sp),sp
    acae:	       move.l a6,-(sp)
    acb0:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    acb2:	       movea.l 56(sp),a0
    acb6:	       move.l 24(a0),d0
    acba:	       move.l d0,-(sp)
    acbc:	       pea 1 <_start+0x1>
    acc0:	       lea 16(sp),a0
    acc4:	       move.l a0,-(sp)
    acc6:	       jsr 10048 <getValueType>
    accc:	       lea 12(sp),sp
    acd0:	       tst.w d0
    acd2:	   /-- bne.s acda <builtIn_substring+0x30>
    acd4:	   |   moveq #1,d0
    acd6:	/--|-- bra.w ae5a <builtIn_substring+0x1b0>
    trimStack(fun->stack);
    acda:	|  \-> movea.l 56(sp),a0
    acde:	|      move.l 24(a0),d0
    ace2:	|      move.l d0,-(sp)
    ace4:	|      jsr 109ac <trimStack>
    acea:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    acec:	|      movea.l 56(sp),a0
    acf0:	|      move.l 24(a0),d0
    acf4:	|      move.l d0,-(sp)
    acf6:	|      pea 1 <_start+0x1>
    acfa:	|      lea 20(sp),a0
    acfe:	|      move.l a0,-(sp)
    ad00:	|      jsr 10048 <getValueType>
    ad06:	|      lea 12(sp),sp
    ad0a:	|      tst.w d0
    ad0c:	|  /-- bne.s ad14 <builtIn_substring+0x6a>
    ad0e:	|  |   moveq #1,d0
    ad10:	+--|-- bra.w ae5a <builtIn_substring+0x1b0>
    trimStack(fun->stack);
    ad14:	|  \-> movea.l 56(sp),a0
    ad18:	|      move.l 24(a0),d0
    ad1c:	|      move.l d0,-(sp)
    ad1e:	|      jsr 109ac <trimStack>
    ad24:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    ad26:	|      movea.l 56(sp),a0
    ad2a:	|      move.l 24(a0),d0
    ad2e:	|      move.l d0,-(sp)
    ad30:	|      jsr 10620 <getTextFromAnyVar>
    ad36:	|      addq.l #4,sp
    ad38:	|      move.l d0,44(sp)
    trimStack(fun->stack);
    ad3c:	|      movea.l 56(sp),a0
    ad40:	|      move.l 24(a0),d0
    ad44:	|      move.l d0,-(sp)
    ad46:	|      jsr 109ac <trimStack>
    ad4c:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ad4e:	|      move.l 44(sp),-(sp)
    ad52:	|      jsr f534 <strlen>
    ad58:	|      addq.l #4,sp
    ad5a:	|      move.l d0,d1
    ad5c:	|      move.l 12(sp),d0
    ad60:	|      movea.l d0,a0
    ad62:	|      move.l 8(sp),d0
    ad66:	|      add.l a0,d0
    ad68:	|      cmp.l d1,d0
    ad6a:	|  /-- bls.s ada0 <builtIn_substring+0xf6>
        length = strlen(wholeString) - start;
    ad6c:	|  |   move.l 44(sp),-(sp)
    ad70:	|  |   jsr f534 <strlen>
    ad76:	|  |   addq.l #4,sp
    ad78:	|  |   move.l d0,d1
    ad7a:	|  |   move.l 12(sp),d0
    ad7e:	|  |   sub.l d0,d1
    ad80:	|  |   move.l d1,d0
    ad82:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    ad86:	|  |   move.l 44(sp),-(sp)
    ad8a:	|  |   jsr f534 <strlen>
    ad90:	|  |   addq.l #4,sp
    ad92:	|  |   move.l d0,d1
    ad94:	|  |   move.l 12(sp),d0
    ad98:	|  |   cmp.l d1,d0
    ad9a:	|  +-- bls.s ada0 <builtIn_substring+0xf6>
            start = 0;
    ad9c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    ada0:	|  \-> move.l 8(sp),d0
    ada4:	|  /-- bpl.s adaa <builtIn_substring+0x100>
        length = 0;
    ada6:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    adaa:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    adb0:	|      move.l 12(sp),d1
    adb4:	|      move.l 8(sp),d0
    adb8:	|      move.l d1,d2
    adba:	|      add.l d0,d2
    adbc:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    adc0:	|      move.l 36(sp),d0
    adc4:	|      sub.l 40(sp),d0
    adc8:	|      addq.l #1,d0
    adca:	|      move.l d0,32(sp)
    adce:	|      clr.l 28(sp)
    add2:	|      move.l 17b28 <SysBase>,d0
    add8:	|      movea.l d0,a6
    adda:	|      move.l 32(sp),d0
    adde:	|      move.l 28(sp),d1
    ade2:	|      jsr -684(a6)
    ade6:	|      move.l d0,24(sp)
    adea:	|      move.l 24(sp),d0
    adee:	|      move.l d0,20(sp)
    if (!newString) {
    adf2:	|  /-- bne.s adf8 <builtIn_substring+0x14e>
        return BR_ERROR;
    adf4:	|  |   moveq #1,d0
    adf6:	+--|-- bra.s ae5a <builtIn_substring+0x1b0>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    adf8:	|  \-> move.l 36(sp),d0
    adfc:	|      sub.l 40(sp),d0
    ae00:	|      move.l d0,d1
    ae02:	|      move.l 40(sp),d0
    ae06:	|      add.l 44(sp),d0
    ae0a:	|      move.l d1,-(sp)
    ae0c:	|      move.l d0,-(sp)
    ae0e:	|      move.l 28(sp),-(sp)
    ae12:	|      jsr 11fcc <memcpy>
    ae18:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    ae1c:	|      move.l 36(sp),d0
    ae20:	|      sub.l 40(sp),d0
    ae24:	|      movea.l 20(sp),a0
    ae28:	|      adda.l d0,a0
    ae2a:	|      clr.b (a0)
    
    makeTextVar(fun->reg, newString);
    ae2c:	|      movea.l 56(sp),a0
    ae30:	|      move.l 28(a0),d0
    ae34:	|      move.l 20(sp),-(sp)
    ae38:	|      move.l d0,-(sp)
    ae3a:	|      jsr 1026a <makeTextVar>
    ae40:	|      addq.l #8,sp
    FreeVec(newString);
    ae42:	|      move.l 20(sp),16(sp)
    ae48:	|      move.l 17b28 <SysBase>,d0
    ae4e:	|      movea.l d0,a6
    ae50:	|      movea.l 16(sp),a1
    ae54:	|      jsr -690(a6)
    return BR_CONTINUE;
    ae58:	|      moveq #2,d0
}
    ae5a:	\----> move.l (sp)+,d2
    ae5c:	       movea.l (sp)+,a6
    ae5e:	       lea 40(sp),sp
    ae62:	       rts

0000ae64 <builtIn_stringLength>:

builtIn(stringLength)
{
    ae64:	subq.l #8,sp
    ae66:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ae68:	movea.l 20(sp),a0
    ae6c:	move.l 24(a0),d0
    ae70:	move.l d0,-(sp)
    ae72:	jsr 10620 <getTextFromAnyVar>
    ae78:	addq.l #4,sp
    ae7a:	move.l d0,8(sp)
	trimStack (fun -> stack);
    ae7e:	movea.l 20(sp),a0
    ae82:	move.l 24(a0),d0
    ae86:	move.l d0,-(sp)
    ae88:	jsr 109ac <trimStack>
    ae8e:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, strlen(newText));
    ae90:	move.l 8(sp),-(sp)
    ae94:	jsr f534 <strlen>
    ae9a:	addq.l #4,sp
    ae9c:	move.l d0,d1
    ae9e:	movea.l 20(sp),a0
    aea2:	move.l 28(a0),d0
    aea6:	move.l d1,-(sp)
    aea8:	pea 1 <_start+0x1>
    aeac:	move.l d0,-(sp)
    aeae:	jsr 1091a <setVariable>
    aeb4:	lea 12(sp),sp
	FreeVec(newText);
    aeb8:	move.l 8(sp),4(sp)
    aebe:	move.l 17b28 <SysBase>,d0
    aec4:	movea.l d0,a6
    aec6:	movea.l 4(sp),a1
    aeca:	jsr -690(a6)
	return BR_CONTINUE;
    aece:	moveq #2,d0
}
    aed0:	movea.l (sp)+,a6
    aed2:	addq.l #8,sp
    aed4:	rts

0000aed6 <builtIn_newStack>:

builtIn(newStack)
{
    aed6:	             lea -12(sp),sp
    aeda:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(fun->reg);
    aedc:	             movea.l 24(sp),a0
    aee0:	             move.l 28(a0),d0
    aee4:	             move.l d0,-(sp)
    aee6:	             jsr 10296 <unlinkVar>
    aeec:	             addq.l #4,sp

    // Return value
    fun->reg->varType = SVT_STACK;
    aeee:	             movea.l 24(sp),a0
    aef2:	             movea.l 28(a0),a0
    aef6:	             moveq #6,d0
    aef8:	             move.l d0,(a0)
    fun->reg->varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    aefa:	             moveq #12,d1
    aefc:	             move.l d1,12(sp)
    af00:	             clr.l 8(sp)
    af04:	             move.l 17b28 <SysBase>,d0
    af0a:	             movea.l d0,a6
    af0c:	             move.l 12(sp),d0
    af10:	             move.l 8(sp),d1
    af14:	             jsr -684(a6)
    af18:	             move.l d0,4(sp)
    af1c:	             move.l 4(sp),d0
    af20:	             movea.l 24(sp),a0
    af24:	             movea.l 28(a0),a0
    af28:	             move.l d0,4(a0)
    if (!fun->reg->varData.theStack) return BR_ERROR;
    af2c:	             movea.l 24(sp),a0
    af30:	             movea.l 28(a0),a0
    af34:	             move.l 4(a0),d0
    af38:	         /-- bne.s af40 <builtIn_newStack+0x6a>
    af3a:	         |   moveq #1,d0
    af3c:	/--------|-- bra.w aff0 <builtIn_newStack+0x11a>
    fun->reg->varData.theStack->first = NULL;
    af40:	|        \-> movea.l 24(sp),a0
    af44:	|            movea.l 28(a0),a0
    af48:	|            movea.l 4(a0),a0
    af4c:	|            clr.l (a0)
    fun->reg->varData.theStack->last = NULL;
    af4e:	|            movea.l 24(sp),a0
    af52:	|            movea.l 28(a0),a0
    af56:	|            movea.l 4(a0),a0
    af5a:	|            clr.l 4(a0)
    fun->reg->varData.theStack->timesUsed = 1;
    af5e:	|            movea.l 24(sp),a0
    af62:	|            movea.l 28(a0),a0
    af66:	|            movea.l 4(a0),a0
    af6a:	|            moveq #1,d0
    af6c:	|            move.l d0,8(a0)
    
    while (numParams--) {
    af70:	|     /----- bra.s afde <builtIn_newStack+0x108>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg->varData.theStack->first)) return BR_ERROR;
    af72:	|  /--|----> movea.l 24(sp),a0
    af76:	|  |  |      movea.l 28(a0),a0
    af7a:	|  |  |      move.l 4(a0),d0
    af7e:	|  |  |      move.l d0,d1
    af80:	|  |  |      movea.l 24(sp),a0
    af84:	|  |  |      move.l 24(a0),d0
    af88:	|  |  |      move.l d1,-(sp)
    af8a:	|  |  |      move.l d0,-(sp)
    af8c:	|  |  |      jsr f884 <addVarToStack>
    af92:	|  |  |      addq.l #8,sp
    af94:	|  |  |      tst.w d0
    af96:	|  |  |  /-- bne.s af9c <builtIn_newStack+0xc6>
    af98:	|  |  |  |   moveq #1,d0
    af9a:	+--|--|--|-- bra.s aff0 <builtIn_newStack+0x11a>
        if (fun->reg->varData.theStack->last == NULL) {
    af9c:	|  |  |  \-> movea.l 24(sp),a0
    afa0:	|  |  |      movea.l 28(a0),a0
    afa4:	|  |  |      movea.l 4(a0),a0
    afa8:	|  |  |      move.l 4(a0),d0
    afac:	|  |  |  /-- bne.s afcc <builtIn_newStack+0xf6>
            fun->reg->varData.theStack->last = fun->reg->varData.theStack->first;
    afae:	|  |  |  |   movea.l 24(sp),a0
    afb2:	|  |  |  |   movea.l 28(a0),a0
    afb6:	|  |  |  |   movea.l 4(a0),a1
    afba:	|  |  |  |   movea.l 24(sp),a0
    afbe:	|  |  |  |   movea.l 28(a0),a0
    afc2:	|  |  |  |   movea.l 4(a0),a0
    afc6:	|  |  |  |   move.l (a1),d0
    afc8:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(fun->stack);
    afcc:	|  |  |  \-> movea.l 24(sp),a0
    afd0:	|  |  |      move.l 24(a0),d0
    afd4:	|  |  |      move.l d0,-(sp)
    afd6:	|  |  |      jsr 109ac <trimStack>
    afdc:	|  |  |      addq.l #4,sp
    while (numParams--) {
    afde:	|  |  \----> move.l 20(sp),d0
    afe2:	|  |         move.l d0,d1
    afe4:	|  |         subq.l #1,d1
    afe6:	|  |         move.l d1,20(sp)
    afea:	|  |         tst.l d0
    afec:	|  \-------- bne.s af72 <builtIn_newStack+0x9c>
    }
    return BR_CONTINUE;
    afee:	|            moveq #2,d0
}
    aff0:	\----------> movea.l (sp)+,a6
    aff2:	             lea 12(sp),sp
    aff6:	             rts

0000aff8 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    aff8:	          movea.l 8(sp),a0
    affc:	          movea.l 24(a0),a0
    b000:	          move.l (a0),d0
    b002:	          moveq #6,d1
    b004:	          cmp.l d0,d1
    b006:	      /-- beq.s b024 <builtIn_stackSize+0x2c>
    b008:	      |   moveq #10,d1
    b00a:	      |   cmp.l d0,d1
    b00c:	   /--|-- beq.s b06c <builtIn_stackSize+0x74>
			setVariable (fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    b00e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    b010:	   |  |   pea 156d0 <zbuffer.c.d110ca03+0x18a>
    b016:	   |  |   jsr 12018 <KPrintF>
    b01c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    b01e:	   |  |   moveq #1,d0
    b020:	/--|--|-- bra.w b0aa <builtIn_stackSize+0xb2>
			setVariable (fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    b024:	|  |  \-> movea.l 8(sp),a0
    b028:	|  |      movea.l 24(a0),a0
    b02c:	|  |      move.l 4(a0),d0
    b030:	|  |      move.l d0,-(sp)
    b032:	|  |      jsr 10988 <stackSize>
    b038:	|  |      addq.l #4,sp
    b03a:	|  |      move.l d0,d1
    b03c:	|  |      movea.l 8(sp),a0
    b040:	|  |      move.l 28(a0),d0
    b044:	|  |      move.l d1,-(sp)
    b046:	|  |      pea 1 <_start+0x1>
    b04a:	|  |      move.l d0,-(sp)
    b04c:	|  |      jsr 1091a <setVariable>
    b052:	|  |      lea 12(sp),sp
			trimStack (fun -> stack);
    b056:	|  |      movea.l 8(sp),a0
    b05a:	|  |      move.l 24(a0),d0
    b05e:	|  |      move.l d0,-(sp)
    b060:	|  |      jsr 109ac <trimStack>
    b066:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    b068:	|  |      moveq #2,d0
    b06a:	+--|----- bra.s b0aa <builtIn_stackSize+0xb2>
			setVariable (fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    b06c:	|  \----> movea.l 8(sp),a0
    b070:	|         movea.l 24(a0),a0
    b074:	|         movea.l 4(a0),a0
    b078:	|         move.l 4(a0),d1
    b07c:	|         movea.l 8(sp),a0
    b080:	|         move.l 28(a0),d0
    b084:	|         move.l d1,-(sp)
    b086:	|         pea 1 <_start+0x1>
    b08a:	|         move.l d0,-(sp)
    b08c:	|         jsr 1091a <setVariable>
    b092:	|         lea 12(sp),sp
			trimStack (fun -> stack);
    b096:	|         movea.l 8(sp),a0
    b09a:	|         move.l 24(a0),d0
    b09e:	|         move.l d0,-(sp)
    b0a0:	|         jsr 109ac <trimStack>
    b0a6:	|         addq.l #4,sp
			return BR_CONTINUE;
    b0a8:	|         moveq #2,d0
}
    b0aa:	\-------> rts

0000b0ac <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b0ac:	       movea.l 8(sp),a0
    b0b0:	       movea.l 24(a0),a0
    b0b4:	       move.l (a0),d0
    b0b6:	       moveq #6,d1
    b0b8:	       cmp.l d0,d1
    b0ba:	   /-- beq.s b0ce <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b0bc:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b0c2:	   |   jsr 12018 <KPrintF>
    b0c8:	   |   addq.l #4,sp
		return BR_ERROR;
    b0ca:	   |   moveq #1,d0
    b0cc:	/--|-- bra.s b106 <builtIn_copyStack+0x5a>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, fun -> reg)) return BR_ERROR;
    b0ce:	|  \-> movea.l 8(sp),a0
    b0d2:	|      move.l 28(a0),d1
    b0d6:	|      movea.l 8(sp),a0
    b0da:	|      move.l 24(a0),d0
    b0de:	|      move.l d1,-(sp)
    b0e0:	|      move.l d0,-(sp)
    b0e2:	|      jsr fb4e <copyStack>
    b0e8:	|      addq.l #8,sp
    b0ea:	|      tst.w d0
    b0ec:	|  /-- bne.s b0f2 <builtIn_copyStack+0x46>
    b0ee:	|  |   moveq #1,d0
    b0f0:	+--|-- bra.s b106 <builtIn_copyStack+0x5a>
	trimStack (fun -> stack);
    b0f2:	|  \-> movea.l 8(sp),a0
    b0f6:	|      move.l 24(a0),d0
    b0fa:	|      move.l d0,-(sp)
    b0fc:	|      jsr 109ac <trimStack>
    b102:	|      addq.l #4,sp
	return BR_CONTINUE;
    b104:	|      moveq #2,d0
}
    b106:	\----> rts

0000b108 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b108:	       movea.l 8(sp),a0
    b10c:	       movea.l 24(a0),a0
    b110:	       movea.l 8(a0),a0
    b114:	       move.l (a0),d0
    b116:	       moveq #6,d1
    b118:	       cmp.l d0,d1
    b11a:	   /-- beq.s b130 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    b11c:	   |   pea 15712 <zbuffer.c.d110ca03+0x1cc>
    b122:	   |   jsr 12018 <KPrintF>
    b128:	   |   addq.l #4,sp
		return BR_ERROR;
    b12a:	   |   moveq #1,d0
    b12c:	/--|-- bra.w b1c2 <builtIn_pushToStack+0xba>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b130:	|  \-> movea.l 8(sp),a0
    b134:	|      movea.l 24(a0),a0
    b138:	|      movea.l 8(a0),a0
    b13c:	|      move.l 4(a0),d0
    b140:	|      move.l d0,d1
    b142:	|      movea.l 8(sp),a0
    b146:	|      move.l 24(a0),d0
    b14a:	|      move.l d1,-(sp)
    b14c:	|      move.l d0,-(sp)
    b14e:	|      jsr f884 <addVarToStack>
    b154:	|      addq.l #8,sp
    b156:	|      tst.w d0
    b158:	|  /-- bne.s b15e <builtIn_pushToStack+0x56>
		return BR_ERROR;
    b15a:	|  |   moveq #1,d0
    b15c:	+--|-- bra.s b1c2 <builtIn_pushToStack+0xba>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    b15e:	|  \-> movea.l 8(sp),a0
    b162:	|      movea.l 24(a0),a0
    b166:	|      movea.l 8(a0),a0
    b16a:	|      movea.l 4(a0),a0
    b16e:	|      movea.l (a0),a0
    b170:	|      move.l 8(a0),d0
    b174:	|  /-- bne.s b19c <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b176:	|  |   movea.l 8(sp),a0
    b17a:	|  |   movea.l 24(a0),a0
    b17e:	|  |   movea.l 8(a0),a0
    b182:	|  |   movea.l 4(a0),a1
    b186:	|  |   movea.l 8(sp),a0
    b18a:	|  |   movea.l 24(a0),a0
    b18e:	|  |   movea.l 8(a0),a0
    b192:	|  |   movea.l 4(a0),a0
    b196:	|  |   move.l (a1),d0
    b198:	|  |   move.l d0,4(a0)

	trimStack (fun -> stack);
    b19c:	|  \-> movea.l 8(sp),a0
    b1a0:	|      move.l 24(a0),d0
    b1a4:	|      move.l d0,-(sp)
    b1a6:	|      jsr 109ac <trimStack>
    b1ac:	|      addq.l #4,sp
	trimStack (fun -> stack);
    b1ae:	|      movea.l 8(sp),a0
    b1b2:	|      move.l 24(a0),d0
    b1b6:	|      move.l d0,-(sp)
    b1b8:	|      jsr 109ac <trimStack>
    b1be:	|      addq.l #4,sp
	return BR_CONTINUE;
    b1c0:	|      moveq #2,d0
}
    b1c2:	\----> rts

0000b1c4 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b1c4:	             movea.l 8(sp),a0
    b1c8:	             movea.l 24(a0),a0
    b1cc:	             movea.l 8(a0),a0
    b1d0:	             move.l (a0),d0
    b1d2:	             moveq #6,d1
    b1d4:	             cmp.l d0,d1
    b1d6:	         /-- beq.s b1ec <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    b1d8:	         |   pea 15712 <zbuffer.c.d110ca03+0x1cc>
    b1de:	         |   jsr 12018 <KPrintF>
    b1e4:	         |   addq.l #4,sp
		return BR_ERROR;
    b1e6:	         |   moveq #1,d0
    b1e8:	/--------|-- bra.w b2de <builtIn_enqueue+0x11a>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    b1ec:	|        \-> movea.l 8(sp),a0
    b1f0:	|            movea.l 24(a0),a0
    b1f4:	|            movea.l 8(a0),a0
    b1f8:	|            movea.l 4(a0),a0
    b1fc:	|            move.l (a0),d0
    b1fe:	|     /----- bne.s b258 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b200:	|     |      movea.l 8(sp),a0
    b204:	|     |      movea.l 24(a0),a0
    b208:	|     |      movea.l 8(a0),a0
    b20c:	|     |      move.l 4(a0),d0
    b210:	|     |      move.l d0,d1
    b212:	|     |      movea.l 8(sp),a0
    b216:	|     |      move.l 24(a0),d0
    b21a:	|     |      move.l d1,-(sp)
    b21c:	|     |      move.l d0,-(sp)
    b21e:	|     |      jsr f884 <addVarToStack>
    b224:	|     |      addq.l #8,sp
    b226:	|     |      tst.w d0
    b228:	|     |  /-- bne.s b230 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    b22a:	|     |  |   moveq #1,d0
    b22c:	+-----|--|-- bra.w b2de <builtIn_enqueue+0x11a>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b230:	|     |  \-> movea.l 8(sp),a0
    b234:	|     |      movea.l 24(a0),a0
    b238:	|     |      movea.l 8(a0),a0
    b23c:	|     |      movea.l 4(a0),a1
    b240:	|     |      movea.l 8(sp),a0
    b244:	|     |      movea.l 24(a0),a0
    b248:	|     |      movea.l 8(a0),a0
    b24c:	|     |      movea.l 4(a0),a0
    b250:	|     |      move.l (a1),d0
    b252:	|     |      move.l d0,4(a0)
    b256:	|  /--|----- bra.s b2b8 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    b258:	|  |  \----> movea.l 8(sp),a0
    b25c:	|  |         movea.l 24(a0),a0
    b260:	|  |         movea.l 8(a0),a0
    b264:	|  |         movea.l 4(a0),a0
    b268:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    b26c:	|  |         move.l d0,d1
    b26e:	|  |         addq.l #8,d1
    b270:	|  |         movea.l 8(sp),a0
    b274:	|  |         move.l 24(a0),d0
    b278:	|  |         move.l d1,-(sp)
    b27a:	|  |         move.l d0,-(sp)
    b27c:	|  |         jsr f884 <addVarToStack>
    b282:	|  |         addq.l #8,sp
    b284:	|  |         tst.w d0
    b286:	|  |     /-- bne.s b28c <builtIn_enqueue+0xc8>
			return BR_ERROR;
    b288:	|  |     |   moveq #1,d0
    b28a:	+--|-----|-- bra.s b2de <builtIn_enqueue+0x11a>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    b28c:	|  |     \-> movea.l 8(sp),a0
    b290:	|  |         movea.l 24(a0),a0
    b294:	|  |         movea.l 8(a0),a0
    b298:	|  |         movea.l 4(a0),a0
    b29c:	|  |         movea.l 4(a0),a1
    b2a0:	|  |         movea.l 8(sp),a0
    b2a4:	|  |         movea.l 24(a0),a0
    b2a8:	|  |         movea.l 8(a0),a0
    b2ac:	|  |         movea.l 4(a0),a0
    b2b0:	|  |         move.l 8(a1),d0
    b2b4:	|  |         move.l d0,4(a0)
	}

	trimStack (fun -> stack);
    b2b8:	|  \-------> movea.l 8(sp),a0
    b2bc:	|            move.l 24(a0),d0
    b2c0:	|            move.l d0,-(sp)
    b2c2:	|            jsr 109ac <trimStack>
    b2c8:	|            addq.l #4,sp
	trimStack (fun -> stack);
    b2ca:	|            movea.l 8(sp),a0
    b2ce:	|            move.l 24(a0),d0
    b2d2:	|            move.l d0,-(sp)
    b2d4:	|            jsr 109ac <trimStack>
    b2da:	|            addq.l #4,sp
	return BR_CONTINUE;
    b2dc:	|            moveq #2,d0
}
    b2de:	\----------> rts

0000b2e0 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    b2e0:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b2e2:	       movea.l 12(sp),a0
    b2e6:	       movea.l 24(a0),a0
    b2ea:	       movea.l 8(a0),a0
    b2ee:	       move.l (a0),d0
    b2f0:	       moveq #6,d1
    b2f2:	       cmp.l d0,d1
    b2f4:	   /-- beq.s b30a <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b2f6:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b2fc:	   |   jsr 12018 <KPrintF>
    b302:	   |   addq.l #4,sp
		return BR_ERROR;
    b304:	   |   moveq #1,d0
    b306:	/--|-- bra.w b3a6 <builtIn_deleteFromStack+0xc6>
	}

	// Return value
	setVariable (fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    b30a:	|  \-> movea.l 12(sp),a0
    b30e:	|      movea.l 24(a0),a0
    b312:	|      movea.l 8(a0),a0
    b316:	|      move.l 4(a0),d0
	setVariable (fun -> reg, SVT_INT,
    b31a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b31c:	|      movea.l 12(sp),a0
    b320:	|      move.l 24(a0),d0
	setVariable (fun -> reg, SVT_INT,
    b324:	|      clr.l -(sp)
    b326:	|      move.l d1,-(sp)
    b328:	|      move.l d0,-(sp)
    b32a:	|      jsr fc24 <deleteVarFromStack>
    b330:	|      lea 12(sp),sp
    b334:	|      move.l d0,d1
    b336:	|      movea.l 12(sp),a0
    b33a:	|      move.l 28(a0),d0
    b33e:	|      move.l d1,-(sp)
    b340:	|      pea 1 <_start+0x1>
    b344:	|      move.l d0,-(sp)
    b346:	|      jsr 1091a <setVariable>
    b34c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b350:	|      movea.l 12(sp),a0
    b354:	|      movea.l 24(a0),a0
    b358:	|      movea.l 8(a0),a0
    b35c:	|      movea.l 4(a0),a0
    b360:	|      move.l (a0),d0
    b362:	|      movea.l 12(sp),a0
    b366:	|      movea.l 24(a0),a0
    b36a:	|      movea.l 8(a0),a0
    b36e:	|      movea.l 4(a0),a2
    b372:	|      move.l d0,-(sp)
    b374:	|      jsr 10964 <stackFindLast>
    b37a:	|      addq.l #4,sp
    b37c:	|      move.l d0,4(a2)

	trimStack (fun -> stack);
    b380:	|      movea.l 12(sp),a0
    b384:	|      move.l 24(a0),d0
    b388:	|      move.l d0,-(sp)
    b38a:	|      jsr 109ac <trimStack>
    b390:	|      addq.l #4,sp
	trimStack (fun -> stack);
    b392:	|      movea.l 12(sp),a0
    b396:	|      move.l 24(a0),d0
    b39a:	|      move.l d0,-(sp)
    b39c:	|      jsr 109ac <trimStack>
    b3a2:	|      addq.l #4,sp
	return BR_CONTINUE;
    b3a4:	|      moveq #2,d0
}
    b3a6:	\----> movea.l (sp)+,a2
    b3a8:	       rts

0000b3aa <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    b3aa:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b3ac:	       movea.l 12(sp),a0
    b3b0:	       movea.l 24(a0),a0
    b3b4:	       movea.l 8(a0),a0
    b3b8:	       move.l (a0),d0
    b3ba:	       moveq #6,d1
    b3bc:	       cmp.l d0,d1
    b3be:	   /-- beq.s b3d4 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b3c0:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b3c6:	   |   jsr 12018 <KPrintF>
    b3cc:	   |   addq.l #4,sp
		return BR_ERROR;
    b3ce:	   |   moveq #1,d0
    b3d0:	/--|-- bra.w b472 <builtIn_deleteAllFromStack+0xc8>
	}

	// Return value
	setVariable (fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    b3d4:	|  \-> movea.l 12(sp),a0
    b3d8:	|      movea.l 24(a0),a0
    b3dc:	|      movea.l 8(a0),a0
    b3e0:	|      move.l 4(a0),d0
	setVariable (fun -> reg, SVT_INT,
    b3e4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b3e6:	|      movea.l 12(sp),a0
    b3ea:	|      move.l 24(a0),d0
	setVariable (fun -> reg, SVT_INT,
    b3ee:	|      pea 1 <_start+0x1>
    b3f2:	|      move.l d1,-(sp)
    b3f4:	|      move.l d0,-(sp)
    b3f6:	|      jsr fc24 <deleteVarFromStack>
    b3fc:	|      lea 12(sp),sp
    b400:	|      move.l d0,d1
    b402:	|      movea.l 12(sp),a0
    b406:	|      move.l 28(a0),d0
    b40a:	|      move.l d1,-(sp)
    b40c:	|      pea 1 <_start+0x1>
    b410:	|      move.l d0,-(sp)
    b412:	|      jsr 1091a <setVariable>
    b418:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b41c:	|      movea.l 12(sp),a0
    b420:	|      movea.l 24(a0),a0
    b424:	|      movea.l 8(a0),a0
    b428:	|      movea.l 4(a0),a0
    b42c:	|      move.l (a0),d0
    b42e:	|      movea.l 12(sp),a0
    b432:	|      movea.l 24(a0),a0
    b436:	|      movea.l 8(a0),a0
    b43a:	|      movea.l 4(a0),a2
    b43e:	|      move.l d0,-(sp)
    b440:	|      jsr 10964 <stackFindLast>
    b446:	|      addq.l #4,sp
    b448:	|      move.l d0,4(a2)

	trimStack (fun -> stack);
    b44c:	|      movea.l 12(sp),a0
    b450:	|      move.l 24(a0),d0
    b454:	|      move.l d0,-(sp)
    b456:	|      jsr 109ac <trimStack>
    b45c:	|      addq.l #4,sp
	trimStack (fun -> stack);
    b45e:	|      movea.l 12(sp),a0
    b462:	|      move.l 24(a0),d0
    b466:	|      move.l d0,-(sp)
    b468:	|      jsr 109ac <trimStack>
    b46e:	|      addq.l #4,sp
	return BR_CONTINUE;
    b470:	|      moveq #2,d0
}
    b472:	\----> movea.l (sp)+,a2
    b474:	       rts

0000b476 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b476:	       movea.l 8(sp),a0
    b47a:	       movea.l 24(a0),a0
    b47e:	       move.l (a0),d0
    b480:	       moveq #6,d1
    b482:	       cmp.l d0,d1
    b484:	   /-- beq.s b498 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b486:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b48c:	   |   jsr 12018 <KPrintF>
    b492:	   |   addq.l #4,sp
		return BR_ERROR;
    b494:	   |   moveq #1,d0
    b496:	/--|-- bra.s b508 <builtIn_popFromStack+0x92>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b498:	|  \-> movea.l 8(sp),a0
    b49c:	|      movea.l 24(a0),a0
    b4a0:	|      movea.l 4(a0),a0
    b4a4:	|      move.l (a0),d0
    b4a6:	|  /-- bne.s b4ba <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    b4a8:	|  |   pea 1572a <zbuffer.c.d110ca03+0x1e4>
    b4ae:	|  |   jsr 12018 <KPrintF>
    b4b4:	|  |   addq.l #4,sp
		return BR_ERROR;
    b4b6:	|  |   moveq #1,d0
    b4b8:	+--|-- bra.s b508 <builtIn_popFromStack+0x92>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), fun -> reg);
    b4ba:	|  \-> movea.l 8(sp),a0
    b4be:	|      move.l 28(a0),d1
    b4c2:	|      movea.l 8(sp),a0
    b4c6:	|      movea.l 24(a0),a0
    b4ca:	|      movea.l 4(a0),a0
    b4ce:	|      move.l (a0),d0
    b4d0:	|      move.l d1,-(sp)
    b4d2:	|      move.l d0,-(sp)
    b4d4:	|      jsr 10504 <copyVariable>
    b4da:	|      addq.l #8,sp
	trimStack (fun -> stack -> thisVar.varData.theStack -> first);
    b4dc:	|      movea.l 8(sp),a0
    b4e0:	|      movea.l 24(a0),a0
    b4e4:	|      movea.l 4(a0),a0
    b4e8:	|      move.l (a0),d0
    b4ea:	|      move.l d0,-(sp)
    b4ec:	|      jsr 109ac <trimStack>
    b4f2:	|      addq.l #4,sp
	trimStack (fun -> stack);
    b4f4:	|      movea.l 8(sp),a0
    b4f8:	|      move.l 24(a0),d0
    b4fc:	|      move.l d0,-(sp)
    b4fe:	|      jsr 109ac <trimStack>
    b504:	|      addq.l #4,sp
	return BR_CONTINUE;
    b506:	|      moveq #2,d0
}
    b508:	\----> rts

0000b50a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b50a:	       movea.l 8(sp),a0
    b50e:	       movea.l 24(a0),a0
    b512:	       move.l (a0),d0
    b514:	       moveq #6,d1
    b516:	       cmp.l d0,d1
    b518:	   /-- beq.s b52c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    b51a:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b520:	   |   jsr 12018 <KPrintF>
    b526:	   |   addq.l #4,sp
		return BR_ERROR;
    b528:	   |   moveq #1,d0
    b52a:	/--|-- bra.s b584 <builtIn_peekStart+0x7a>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b52c:	|  \-> movea.l 8(sp),a0
    b530:	|      movea.l 24(a0),a0
    b534:	|      movea.l 4(a0),a0
    b538:	|      move.l (a0),d0
    b53a:	|  /-- bne.s b54e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    b53c:	|  |   pea 1572a <zbuffer.c.d110ca03+0x1e4>
    b542:	|  |   jsr 12018 <KPrintF>
    b548:	|  |   addq.l #4,sp
		return BR_ERROR;
    b54a:	|  |   moveq #1,d0
    b54c:	+--|-- bra.s b584 <builtIn_peekStart+0x7a>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), fun -> reg);
    b54e:	|  \-> movea.l 8(sp),a0
    b552:	|      move.l 28(a0),d1
    b556:	|      movea.l 8(sp),a0
    b55a:	|      movea.l 24(a0),a0
    b55e:	|      movea.l 4(a0),a0
    b562:	|      move.l (a0),d0
    b564:	|      move.l d1,-(sp)
    b566:	|      move.l d0,-(sp)
    b568:	|      jsr 10504 <copyVariable>
    b56e:	|      addq.l #8,sp
	trimStack (fun -> stack);
    b570:	|      movea.l 8(sp),a0
    b574:	|      move.l 24(a0),d0
    b578:	|      move.l d0,-(sp)
    b57a:	|      jsr 109ac <trimStack>
    b580:	|      addq.l #4,sp
	return BR_CONTINUE;
    b582:	|      moveq #2,d0
}
    b584:	\----> rts

0000b586 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b586:	       movea.l 8(sp),a0
    b58a:	       movea.l 24(a0),a0
    b58e:	       move.l (a0),d0
    b590:	       moveq #6,d1
    b592:	       cmp.l d0,d1
    b594:	   /-- beq.s b5a8 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    b596:	   |   pea 156f9 <zbuffer.c.d110ca03+0x1b3>
    b59c:	   |   jsr 12018 <KPrintF>
    b5a2:	   |   addq.l #4,sp
		return BR_ERROR;
    b5a4:	   |   moveq #1,d0
    b5a6:	/--|-- bra.s b602 <builtIn_peekEnd+0x7c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b5a8:	|  \-> movea.l 8(sp),a0
    b5ac:	|      movea.l 24(a0),a0
    b5b0:	|      movea.l 4(a0),a0
    b5b4:	|      move.l (a0),d0
    b5b6:	|  /-- bne.s b5ca <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    b5b8:	|  |   pea 1572a <zbuffer.c.d110ca03+0x1e4>
    b5be:	|  |   jsr 12018 <KPrintF>
    b5c4:	|  |   addq.l #4,sp
		return BR_ERROR;
    b5c6:	|  |   moveq #1,d0
    b5c8:	+--|-- bra.s b602 <builtIn_peekEnd+0x7c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), fun -> reg);
    b5ca:	|  \-> movea.l 8(sp),a0
    b5ce:	|      move.l 28(a0),d1
    b5d2:	|      movea.l 8(sp),a0
    b5d6:	|      movea.l 24(a0),a0
    b5da:	|      movea.l 4(a0),a0
    b5de:	|      move.l 4(a0),d0
    b5e2:	|      move.l d1,-(sp)
    b5e4:	|      move.l d0,-(sp)
    b5e6:	|      jsr 10504 <copyVariable>
    b5ec:	|      addq.l #8,sp
	trimStack (fun -> stack);
    b5ee:	|      movea.l 8(sp),a0
    b5f2:	|      move.l 24(a0),d0
    b5f6:	|      move.l d0,-(sp)
    b5f8:	|      jsr 109ac <trimStack>
    b5fe:	|      addq.l #4,sp
	return BR_CONTINUE;
    b600:	|      moveq #2,d0
}
    b602:	\----> rts

0000b604 <builtIn_random>:

builtIn(random)
{
    b604:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    b606:	       movea.l 12(sp),a0
    b60a:	       move.l 24(a0),d0
    b60e:	       move.l d0,-(sp)
    b610:	       pea 1 <_start+0x1>
    b614:	       move.l sp,d0
    b616:	       addq.l #8,d0
    b618:	       move.l d0,-(sp)
    b61a:	       jsr 10048 <getValueType>
    b620:	       lea 12(sp),sp
    b624:	       tst.w d0
    b626:	   /-- bne.s b62c <builtIn_random+0x28>
		return BR_ERROR;
    b628:	   |   moveq #1,d0
    b62a:	/--|-- bra.s b67a <builtIn_random+0x76>

	trimStack (fun -> stack);
    b62c:	|  \-> movea.l 12(sp),a0
    b630:	|      move.l 24(a0),d0
    b634:	|      move.l d0,-(sp)
    b636:	|      jsr 109ac <trimStack>
    b63c:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    b63e:	|      move.l (sp),d0
    b640:	|  /-- bgt.s b646 <builtIn_random+0x42>
    b642:	|  |   moveq #1,d0
    b644:	|  |   move.l d0,(sp)
	setVariable (fun -> reg, SVT_INT, rand() % num);
    b646:	|  \-> jsr c58 <rand>
    b64c:	|      move.l d0,d1
    b64e:	|      move.l (sp),d0
    b650:	|      move.l d0,-(sp)
    b652:	|      move.l d1,-(sp)
    b654:	|      jsr 12aa4 <__umodsi3>
    b65a:	|      addq.l #8,sp
    b65c:	|      move.l d0,d1
    b65e:	|      movea.l 12(sp),a0
    b662:	|      move.l 28(a0),d0
    b666:	|      move.l d1,-(sp)
    b668:	|      pea 1 <_start+0x1>
    b66c:	|      move.l d0,-(sp)
    b66e:	|      jsr 1091a <setVariable>
    b674:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b678:	|      moveq #2,d0
}
    b67a:	\----> addq.l #4,sp
    b67c:	       rts

0000b67e <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    b67e:	nop
    b680:	rts

0000b682 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    b682:	moveq #2,d0
}
    b684:	rts

0000b686 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    b686:	moveq #2,d0
}
    b688:	rts

0000b68a <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b68a:	moveq #2,d0
}
    b68c:	rts

0000b68e <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b68e:	moveq #2,d0
}
    b690:	rts

0000b692 <builtIn_setFont>:


builtIn(setFont)
{
    b692:	       lea -16(sp),sp
    b696:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b698:	       movea.l 28(sp),a0
    b69c:	       move.l 24(a0),d0
    b6a0:	       move.l d0,-(sp)
    b6a2:	       pea 1 <_start+0x1>
    b6a6:	       lea 12(sp),a0
    b6aa:	       move.l a0,-(sp)
    b6ac:	       jsr 10048 <getValueType>
    b6b2:	       lea 12(sp),sp
    b6b6:	       tst.w d0
    b6b8:	   /-- bne.s b6c0 <builtIn_setFont+0x2e>
    b6ba:	   |   moveq #1,d0
    b6bc:	/--|-- bra.w b774 <builtIn_setFont+0xe2>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(fun->stack);
    b6c0:	|  \-> movea.l 28(sp),a0
    b6c4:	|      move.l 24(a0),d0
    b6c8:	|      move.l d0,-(sp)
    b6ca:	|      jsr 109ac <trimStack>
    b6d0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    b6d2:	|      movea.l 28(sp),a0
    b6d6:	|      move.l 24(a0),d0
    b6da:	|      move.l d0,-(sp)
    b6dc:	|      jsr 10620 <getTextFromAnyVar>
    b6e2:	|      addq.l #4,sp
    b6e4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    b6e8:	|  /-- bne.s b6f0 <builtIn_setFont+0x5e>
    b6ea:	|  |   moveq #1,d0
    b6ec:	+--|-- bra.w b774 <builtIn_setFont+0xe2>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(fun->stack);
    b6f0:	|  \-> movea.l 28(sp),a0
    b6f4:	|      move.l 24(a0),d0
    b6f8:	|      move.l d0,-(sp)
    b6fa:	|      jsr 109ac <trimStack>
    b700:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    b702:	|      movea.l 28(sp),a0
    b706:	|      move.l 24(a0),d0
    b70a:	|      move.l d0,-(sp)
    b70c:	|      pea 5 <_start+0x5>
    b710:	|      lea 16(sp),a0
    b714:	|      move.l a0,-(sp)
    b716:	|      jsr 10048 <getValueType>
    b71c:	|      lea 12(sp),sp
    b720:	|      tst.w d0
    b722:	|  /-- bne.s b728 <builtIn_setFont+0x96>
    b724:	|  |   moveq #1,d0
    b726:	+--|-- bra.s b774 <builtIn_setFont+0xe2>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(fun->stack);
    b728:	|  \-> movea.l 28(sp),a0
    b72c:	|      move.l 24(a0),d0
    b730:	|      move.l d0,-(sp)
    b732:	|      jsr 109ac <trimStack>
    b738:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    b73a:	|      move.l 4(sp),d1
    b73e:	|      move.l 8(sp),d0
    b742:	|      move.l d1,-(sp)
    b744:	|      move.l 20(sp),-(sp)
    b748:	|      move.l d0,-(sp)
    b74a:	|      jsr 10a18 <loadFont>
    b750:	|      lea 12(sp),sp
    b754:	|      tst.w d0
    b756:	|  /-- bne.s b75c <builtIn_setFont+0xca>
    b758:	|  |   moveq #1,d0
    b75a:	+--|-- bra.s b774 <builtIn_setFont+0xe2>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    b75c:	|  \-> move.l 16(sp),12(sp)
    b762:	|      move.l 17b28 <SysBase>,d0
    b768:	|      movea.l d0,a6
    b76a:	|      movea.l 12(sp),a1
    b76e:	|      jsr -690(a6)

    return BR_CONTINUE;
    b772:	|      moveq #2,d0
}
    b774:	\----> movea.l (sp)+,a6
    b776:	       lea 16(sp),sp
    b77a:	       rts

0000b77c <builtIn_inFont>:

builtIn(inFont)
{
    b77c:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b77e:	       movea.l 12(sp),a0
    b782:	       move.l 24(a0),d0
    b786:	       move.l d0,-(sp)
    b788:	       jsr 10620 <getTextFromAnyVar>
    b78e:	       addq.l #4,sp
    b790:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    b792:	   /-- bne.s b798 <builtIn_inFont+0x1c>
    b794:	   |   moveq #1,d0
    b796:	/--|-- bra.s b7d2 <builtIn_inFont+0x56>
	trimStack (fun -> stack);
    b798:	|  \-> movea.l 12(sp),a0
    b79c:	|      move.l 24(a0),d0
    b7a0:	|      move.l d0,-(sp)
    b7a2:	|      jsr 109ac <trimStack>
    b7a8:	|      addq.l #4,sp

	// Return value
	
	setVariable (fun -> reg, SVT_INT, isInFont(newText));
    b7aa:	|      move.l (sp),-(sp)
    b7ac:	|      jsr 109ec <isInFont>
    b7b2:	|      addq.l #4,sp
    b7b4:	|      movea.w d0,a0
    b7b6:	|      movea.l 12(sp),a1
    b7ba:	|      move.l 28(a1),d0
    b7be:	|      move.l a0,-(sp)
    b7c0:	|      pea 1 <_start+0x1>
    b7c4:	|      move.l d0,-(sp)
    b7c6:	|      jsr 1091a <setVariable>
    b7cc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b7d0:	|      moveq #2,d0
}
    b7d2:	\----> addq.l #4,sp
    b7d4:	       rts

0000b7d6 <builtIn_pasteString>:
    trimStack(fun->stack);
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fixFont(pastePalette);
    pasteStringToBackdrop(newText, x, y, pastePalette);
    FreeVec(newText); Todo Amigize this*/
    return BR_CONTINUE;
    b7d6:	moveq #2,d0
}
    b7d8:	rts

0000b7da <builtIn_anim>:

builtIn(anim)
{
	UNUSEDALL
	if (numParams < 2) {
    b7da:	       moveq #1,d0
    b7dc:	       cmp.l 4(sp),d0
    b7e0:	/----- blt.s b7f4 <builtIn_anim+0x1a>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    b7e2:	|      pea 1573d <zbuffer.c.d110ca03+0x1f7>
    b7e8:	|      jsr 12018 <KPrintF>
    b7ee:	|      addq.l #4,sp
		return BR_ERROR;
    b7f0:	|      moveq #1,d0
    b7f2:	|  /-- bra.s b7f6 <builtIn_anim+0x1c>
	setBankFile (ba, sprBanky);

	// Return value
	newAnimationVariable (fun -> reg, ba);Todo Amigize This*/

	return BR_CONTINUE;
    b7f4:	\--|-> moveq #2,d0
}
    b7f6:	   \-> rts

0000b7f8 <builtIn_costume>:

builtIn(costume)
{
    b7f8:	          lea -32(sp),sp
    b7fc:	          move.l a6,-(sp)
    b7fe:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    b800:	          moveq #8,d0
    b802:	          move.l d0,32(sp)
    b806:	          clr.l 28(sp)
    b80a:	          move.l 17b28 <SysBase>,d0
    b810:	          movea.l d0,a6
    b812:	          move.l 32(sp),d0
    b816:	          move.l 28(sp),d1
    b81a:	          jsr -684(a6)
    b81e:	          move.l d0,24(sp)
    b822:	          move.l 24(sp),d0
    b826:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    b82a:	      /-- bne.s b832 <builtIn_costume+0x3a>
    b82c:	      |   moveq #1,d0
    b82e:	/-----|-- bra.w b91e <builtIn_costume+0x126>
    newPersona->numDirections = numParams / 3;
    b832:	|     \-> move.l 44(sp),d0
    b836:	|         pea 3 <_start+0x3>
    b83a:	|         move.l d0,-(sp)
    b83c:	|         jsr 12a48 <__divsi3>
    b842:	|         addq.l #8,sp
    b844:	|         movea.l 20(sp),a0
    b848:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    b84c:	|         tst.l 44(sp)
    b850:	|     /-- beq.s b866 <builtIn_costume+0x6e>
    b852:	|     |   movea.l 20(sp),a0
    b856:	|     |   move.l 4(a0),d1
    b85a:	|     |   move.l d1,d0
    b85c:	|     |   add.l d0,d0
    b85e:	|     |   add.l d1,d0
    b860:	|     |   cmp.l 44(sp),d0
    b864:	|  /--|-- beq.s b87a <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    b866:	|  |  \-> pea 15777 <zbuffer.c.d110ca03+0x231>
    b86c:	|  |      jsr 12018 <KPrintF>
    b872:	|  |      addq.l #4,sp
        return BR_ERROR;
    b874:	|  |      moveq #1,d0
    b876:	+--|----- bra.w b91e <builtIn_costume+0x126>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    b87a:	|  \----> move.l 44(sp),d0
    b87e:	|         add.l d0,d0
    b880:	|         add.l d0,d0
    b882:	|         move.l d0,16(sp)
    b886:	|         clr.l 12(sp)
    b88a:	|         move.l 17b28 <SysBase>,d0
    b890:	|         movea.l d0,a6
    b892:	|         move.l 16(sp),d0
    b896:	|         move.l 12(sp),d1
    b89a:	|         jsr -684(a6)
    b89e:	|         move.l d0,8(sp)
    b8a2:	|         move.l 8(sp),d0
    b8a6:	|         movea.l 20(sp),a0
    b8aa:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    b8ac:	|         movea.l 20(sp),a0
    b8b0:	|         move.l (a0),d0
    b8b2:	|     /-- bne.s b8b8 <builtIn_costume+0xc0>
    b8b4:	|     |   moveq #1,d0
    b8b6:	+-----|-- bra.s b91e <builtIn_costume+0x126>
    for (iii = numParams - 1; iii >= 0; iii--) {
    b8b8:	|     \-> move.l 44(sp),d0
    b8bc:	|         subq.l #1,d0
    b8be:	|         move.l d0,36(sp)
    b8c2:	|     /-- bra.s b900 <builtIn_costume+0x108>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    b8c4:	|  /--|-> movea.l 48(sp),a0
    b8c8:	|  |  |   move.l 24(a0),d0
    b8cc:	|  |  |   movea.l 20(sp),a0
    b8d0:	|  |  |   movea.l (a0),a0
    b8d2:	|  |  |   move.l 36(sp),d1
    b8d6:	|  |  |   add.l d1,d1
    b8d8:	|  |  |   add.l d1,d1
    b8da:	|  |  |   lea (0,a0,d1.l),a2
    b8de:	|  |  |   move.l d0,-(sp)
    b8e0:	|  |  |   jsr 10522 <getAnimationFromVar>
    b8e6:	|  |  |   addq.l #4,sp
    b8e8:	|  |  |   move.l d0,(a2)
        trimStack(fun->stack);
    b8ea:	|  |  |   movea.l 48(sp),a0
    b8ee:	|  |  |   move.l 24(a0),d0
    b8f2:	|  |  |   move.l d0,-(sp)
    b8f4:	|  |  |   jsr 109ac <trimStack>
    b8fa:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    b8fc:	|  |  |   subq.l #1,36(sp)
    b900:	|  |  \-> tst.l 36(sp)
    b904:	|  \----- bge.s b8c4 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(fun->reg, newPersona);
    b906:	|         movea.l 48(sp),a0
    b90a:	|         move.l 28(a0),d0
    b90e:	|         move.l 20(sp),-(sp)
    b912:	|         move.l d0,-(sp)
    b914:	|         jsr 108f8 <newCostumeVariable>
    b91a:	|         addq.l #8,sp
    return BR_CONTINUE;
    b91c:	|         moveq #2,d0
}
    b91e:	\-------> movea.l (sp)+,a2
    b920:	          movea.l (sp)+,a6
    b922:	          lea 32(sp),sp
    b926:	          rts

0000b928 <builtIn_launch>:

builtIn(launch)
{
    b928:	          lea -20(sp),sp
    b92c:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    b92e:	          movea.l 32(sp),a0
    b932:	          move.l 24(a0),d0
    b936:	          move.l d0,-(sp)
    b938:	          jsr 10620 <getTextFromAnyVar>
    b93e:	          addq.l #4,sp
    b940:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    b944:	      /-- bne.s b94c <builtIn_launch+0x24>
    b946:	      |   moveq #1,d0
    b948:	/-----|-- bra.w ba80 <builtIn_launch+0x158>

    char * newText = encodeFilename(newTextA);
    b94c:	|     \-> move.l 20(sp),-(sp)
    b950:	|         jsr 2fe <encodeFilename>
    b956:	|         addq.l #4,sp
    b958:	|         move.l d0,16(sp)

    trimStack(fun->stack);
    b95c:	|         movea.l 32(sp),a0
    b960:	|         move.l 24(a0),d0
    b964:	|         move.l d0,-(sp)
    b966:	|         jsr 109ac <trimStack>
    b96c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    b96e:	|         movea.l 20(sp),a0
    b972:	|         move.b (a0),d0
    b974:	|         cmpi.b #104,d0
    b978:	|  /----- bne.s b9e2 <builtIn_launch+0xba>
        newTextA[1] == 't' &&
    b97a:	|  |      movea.l 20(sp),a0
    b97e:	|  |      addq.l #1,a0
    b980:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    b982:	|  |      cmpi.b #116,d0
    b986:	|  +----- bne.s b9e2 <builtIn_launch+0xba>
        newTextA[2] == 't' &&
    b988:	|  |      movea.l 20(sp),a0
    b98c:	|  |      addq.l #2,a0
    b98e:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    b990:	|  |      cmpi.b #116,d0
    b994:	|  +----- bne.s b9e2 <builtIn_launch+0xba>
        newTextA[3] == 'p' &&
    b996:	|  |      movea.l 20(sp),a0
    b99a:	|  |      addq.l #3,a0
    b99c:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    b99e:	|  |      cmpi.b #112,d0
    b9a2:	|  +----- bne.s b9e2 <builtIn_launch+0xba>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    b9a4:	|  |      movea.l 20(sp),a0
    b9a8:	|  |      addq.l #4,a0
    b9aa:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    b9ac:	|  |      cmpi.b #58,d0
    b9b0:	|  |  /-- beq.s b9ce <builtIn_launch+0xa6>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    b9b2:	|  |  |   movea.l 20(sp),a0
    b9b6:	|  |  |   addq.l #4,a0
    b9b8:	|  |  |   move.b (a0),d0
    b9ba:	|  |  |   cmpi.b #115,d0
    b9be:	|  +--|-- bne.s b9e2 <builtIn_launch+0xba>
    b9c0:	|  |  |   movea.l 20(sp),a0
    b9c4:	|  |  |   addq.l #5,a0
    b9c6:	|  |  |   move.b (a0),d0
    b9c8:	|  |  |   cmpi.b #58,d0
    b9cc:	|  +--|-- bne.s b9e2 <builtIn_launch+0xba>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    b9ce:	|  |  \-> move.l 20(sp),-(sp)
    b9d2:	|  |      jsr b8 <copyString>
    b9d8:	|  |      addq.l #4,sp
    b9da:	|  |      move.l d0,17bd8 <launchMe>
    b9e0:	|  |  /-- bra.s ba34 <builtIn_launch+0x10c>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    b9e2:	|  \--|-> move.l 17a3c <gamePath>,d0
    b9e8:	|     |   pea 157c2 <zbuffer.c.d110ca03+0x27c>
    b9ee:	|     |   move.l d0,-(sp)
    b9f0:	|     |   jsr f574 <joinStrings>
    b9f6:	|     |   addq.l #8,sp
    b9f8:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    b9fc:	|     |   move.l 16(sp),-(sp)
    ba00:	|     |   move.l 16(sp),-(sp)
    ba04:	|     |   jsr f574 <joinStrings>
    ba0a:	|     |   addq.l #8,sp
    ba0c:	|     |   move.l d0,17bd8 <launchMe>
        FreeVec(newText);
    ba12:	|     |   move.l 16(sp),8(sp)
    ba18:	|     |   move.l 17b28 <SysBase>,d0
    ba1e:	|     |   movea.l d0,a6
    ba20:	|     |   movea.l 8(sp),a1
    ba24:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    ba28:	|     |   move.l 17bd8 <launchMe>,d0
    ba2e:	|     +-- bne.s ba34 <builtIn_launch+0x10c>
    ba30:	|     |   moveq #1,d0
    ba32:	+-----|-- bra.s ba80 <builtIn_launch+0x158>
    }
    FreeVec(newTextA);
    ba34:	|     \-> move.l 20(sp),4(sp)
    ba3a:	|         move.l 17b28 <SysBase>,d0
    ba40:	|         movea.l d0,a6
    ba42:	|         movea.l 4(sp),a1
    ba46:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    ba4a:	|         clr.l -(sp)
    ba4c:	|         jsr 106a <setGraphicsWindow>
    ba52:	|         addq.l #4,sp
    setVariable(fun->reg, SVT_INT, 1);
    ba54:	|         movea.l 32(sp),a0
    ba58:	|         move.l 28(a0),d0
    ba5c:	|         pea 1 <_start+0x1>
    ba60:	|         pea 1 <_start+0x1>
    ba64:	|         move.l d0,-(sp)
    ba66:	|         jsr 1091a <setVariable>
    ba6c:	|         lea 12(sp),sp
    launchResult = fun->reg;
    ba70:	|         movea.l 32(sp),a0
    ba74:	|         move.l 28(a0),d0
    ba78:	|         move.l d0,17bdc <launchResult>

    return BR_KEEP_AND_PAUSE;
    ba7e:	|         moveq #0,d0
}
    ba80:	\-------> movea.l (sp)+,a6
    ba82:	          lea 20(sp),sp
    ba86:	          rts

0000ba88 <builtIn_pause>:

builtIn(pause)
{
    ba88:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ba8a:	       movea.l 12(sp),a0
    ba8e:	       move.l 24(a0),d0
    ba92:	       move.l d0,-(sp)
    ba94:	       pea 1 <_start+0x1>
    ba98:	       move.l sp,d0
    ba9a:	       addq.l #8,d0
    ba9c:	       move.l d0,-(sp)
    ba9e:	       jsr 10048 <getValueType>
    baa4:	       lea 12(sp),sp
    baa8:	       tst.w d0
    baaa:	   /-- bne.s bab0 <builtIn_pause+0x28>
    baac:	   |   moveq #1,d0
    baae:	/--|-- bra.s bae0 <builtIn_pause+0x58>
	trimStack (fun -> stack);
    bab0:	|  \-> movea.l 12(sp),a0
    bab4:	|      move.l 24(a0),d0
    bab8:	|      move.l d0,-(sp)
    baba:	|      jsr 109ac <trimStack>
    bac0:	|      addq.l #4,sp
	if (theTime > 0) {
    bac2:	|      move.l (sp),d0
    bac4:	|  /-- ble.s bade <builtIn_pause+0x56>
		fun -> timeLeft = theTime - 1;
    bac6:	|  |   move.l (sp),d0
    bac8:	|  |   subq.l #1,d0
    baca:	|  |   movea.l 12(sp),a0
    bace:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    bad2:	|  |   movea.l 12(sp),a0
    bad6:	|  |   clr.w 46(a0)
		return BR_KEEP_AND_PAUSE;
    bada:	|  |   moveq #0,d0
    badc:	+--|-- bra.s bae0 <builtIn_pause+0x58>
	}
	return BR_CONTINUE;
    bade:	|  \-> moveq #2,d0
}
    bae0:	\----> addq.l #4,sp
    bae2:	       rts

0000bae4 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    bae4:	jsr 1c26 <completeTimers>
	return BR_CONTINUE;
    baea:	moveq #2,d0
}
    baec:	rts

0000baee <builtIn_callEvent>:

builtIn(callEvent)
{
    baee:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    baf2:	       movea.l 20(sp),a0
    baf6:	       move.l 24(a0),d0
    bafa:	       move.l d0,-(sp)
    bafc:	       pea 7 <_start+0x7>
    bb00:	       lea 8(sp),a0
    bb04:	       move.l a0,-(sp)
    bb06:	       jsr 10048 <getValueType>
    bb0c:	       lea 12(sp),sp
    bb10:	       tst.w d0
    bb12:	   /-- bne.s bb1a <builtIn_callEvent+0x2c>
    bb14:	   |   moveq #1,d0
    bb16:	/--|-- bra.w bbb8 <builtIn_callEvent+0xca>
	trimStack (fun -> stack);
    bb1a:	|  \-> movea.l 20(sp),a0
    bb1e:	|      move.l 24(a0),d0
    bb22:	|      move.l d0,-(sp)
    bb24:	|      jsr 109ac <trimStack>
    bb2a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bb2c:	|      movea.l 20(sp),a0
    bb30:	|      move.l 24(a0),d0
    bb34:	|      move.l d0,-(sp)
    bb36:	|      pea 7 <_start+0x7>
    bb3a:	|      moveq #12,d0
    bb3c:	|      add.l sp,d0
    bb3e:	|      move.l d0,-(sp)
    bb40:	|      jsr 10048 <getValueType>
    bb46:	|      lea 12(sp),sp
    bb4a:	|      tst.w d0
    bb4c:	|  /-- bne.s bb52 <builtIn_callEvent+0x64>
    bb4e:	|  |   moveq #1,d0
    bb50:	+--|-- bra.s bbb8 <builtIn_callEvent+0xca>
	trimStack (fun -> stack);
    bb52:	|  \-> movea.l 20(sp),a0
    bb56:	|      move.l 24(a0),d0
    bb5a:	|      move.l d0,-(sp)
    bb5c:	|      jsr 109ac <trimStack>
    bb62:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    bb64:	|      move.l (sp),d1
    bb66:	|      move.l 4(sp),d0
    bb6a:	|      move.l d1,-(sp)
    bb6c:	|      move.l d0,-(sp)
    bb6e:	|      jsr 8dca <getCombinationFunction>
    bb74:	|      addq.l #8,sp
    bb76:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    bb7a:	|  /-- beq.s bb9c <builtIn_callEvent+0xae>
		setVariable (fun -> reg, SVT_FUNC, fNum);
    bb7c:	|  |   movea.l 20(sp),a0
    bb80:	|  |   move.l 28(a0),d0
    bb84:	|  |   move.l 8(sp),-(sp)
    bb88:	|  |   pea 2 <_start+0x2>
    bb8c:	|  |   move.l d0,-(sp)
    bb8e:	|  |   jsr 1091a <setVariable>
    bb94:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    bb98:	|  |   moveq #4,d0
    bb9a:	+--|-- bra.s bbb8 <builtIn_callEvent+0xca>
	}
	setVariable (fun -> reg, SVT_INT, 0);
    bb9c:	|  \-> movea.l 20(sp),a0
    bba0:	|      move.l 28(a0),d0
    bba4:	|      clr.l -(sp)
    bba6:	|      pea 1 <_start+0x1>
    bbaa:	|      move.l d0,-(sp)
    bbac:	|      jsr 1091a <setVariable>
    bbb2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bbb6:	|      moveq #2,d0
}
    bbb8:	\----> lea 12(sp),sp
    bbbc:	       rts

0000bbbe <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    bbbe:	move.w #1,17be8 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    bbc6:	moveq #2,d0
}
    bbc8:	rts

0000bbca <builtIn__rem_movieStart>:
// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	/*trimStack (fun -> stack);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bbca:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bbd0:	jsr 12018 <KPrintF>
    bbd6:	addq.l #4,sp
	return BR_CONTINUE;
    bbd8:	moveq #2,d0
}
    bbda:	rts

0000bbdc <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    bbdc:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bbe2:	jsr 12018 <KPrintF>
    bbe8:	addq.l #4,sp
	return BR_CONTINUE;
    bbea:	moveq #2,d0
}
    bbec:	rts

0000bbee <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    bbee:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bbf4:	jsr 12018 <KPrintF>
    bbfa:	addq.l #4,sp
	//setVariable (fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    bbfc:	moveq #2,d0
}
    bbfe:	rts

0000bc00 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    bc00:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bc06:	jsr 12018 <KPrintF>
    bc0c:	addq.l #4,sp
	return BR_CONTINUE;
    bc0e:	moveq #2,d0
}
    bc10:	rts

0000bc12 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bc12:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bc18:	jsr 12018 <KPrintF>
    bc1e:	addq.l #4,sp
	return BR_CONTINUE;
    bc20:	moveq #2,d0
}
    bc22:	rts

0000bc24 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bc24:	pea 157c4 <zbuffer.c.d110ca03+0x27e>
    bc2a:	jsr 12018 <KPrintF>
    bc30:	addq.l #4,sp
	return BR_CONTINUE;
    bc32:	moveq #2,d0
}
    bc34:	rts

0000bc36 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    bc36:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bc3a:	       movea.l 20(sp),a0
    bc3e:	       move.l 24(a0),d0
    bc42:	       move.l d0,-(sp)
    bc44:	       pea 1 <_start+0x1>
    bc48:	       moveq #16,d0
    bc4a:	       add.l sp,d0
    bc4c:	       move.l d0,-(sp)
    bc4e:	       jsr 10048 <getValueType>
    bc54:	       lea 12(sp),sp
    bc58:	       tst.w d0
    bc5a:	   /-- bne.s bc62 <builtIn_startMusic+0x2c>
    bc5c:	   |   moveq #1,d0
    bc5e:	/--|-- bra.w bd08 <builtIn_startMusic+0xd2>
	trimStack (fun -> stack);
    bc62:	|  \-> movea.l 20(sp),a0
    bc66:	|      move.l 24(a0),d0
    bc6a:	|      move.l d0,-(sp)
    bc6c:	|      jsr 109ac <trimStack>
    bc72:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bc74:	|      movea.l 20(sp),a0
    bc78:	|      move.l 24(a0),d0
    bc7c:	|      move.l d0,-(sp)
    bc7e:	|      pea 1 <_start+0x1>
    bc82:	|      moveq #12,d0
    bc84:	|      add.l sp,d0
    bc86:	|      move.l d0,-(sp)
    bc88:	|      jsr 10048 <getValueType>
    bc8e:	|      lea 12(sp),sp
    bc92:	|      tst.w d0
    bc94:	|  /-- bne.s bc9a <builtIn_startMusic+0x64>
    bc96:	|  |   moveq #1,d0
    bc98:	+--|-- bra.s bd08 <builtIn_startMusic+0xd2>
	trimStack (fun -> stack);
    bc9a:	|  \-> movea.l 20(sp),a0
    bc9e:	|      move.l 24(a0),d0
    bca2:	|      move.l d0,-(sp)
    bca4:	|      jsr 109ac <trimStack>
    bcaa:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bcac:	|      movea.l 20(sp),a0
    bcb0:	|      move.l 24(a0),d0
    bcb4:	|      move.l d0,-(sp)
    bcb6:	|      pea 5 <_start+0x5>
    bcba:	|      lea 8(sp),a0
    bcbe:	|      move.l a0,-(sp)
    bcc0:	|      jsr 10048 <getValueType>
    bcc6:	|      lea 12(sp),sp
    bcca:	|      tst.w d0
    bccc:	|  /-- bne.s bcd2 <builtIn_startMusic+0x9c>
    bcce:	|  |   moveq #1,d0
    bcd0:	+--|-- bra.s bd08 <builtIn_startMusic+0xd2>
	trimStack (fun -> stack);
    bcd2:	|  \-> movea.l 20(sp),a0
    bcd6:	|      move.l 24(a0),d0
    bcda:	|      move.l d0,-(sp)
    bcdc:	|      jsr 109ac <trimStack>
    bce2:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    bce4:	|      movea.l 8(sp),a0
    bce8:	|      move.l 4(sp),d1
    bcec:	|      move.l (sp),d0
    bcee:	|      move.l a0,-(sp)
    bcf0:	|      move.l d1,-(sp)
    bcf2:	|      move.l d0,-(sp)
    bcf4:	|      jsr 8984 <playMOD>
    bcfa:	|      lea 12(sp),sp
    bcfe:	|      tst.w d0
    bd00:	|  /-- bne.s bd06 <builtIn_startMusic+0xd0>
    bd02:	|  |   moveq #2,d0
    bd04:	+--|-- bra.s bd08 <builtIn_startMusic+0xd2>
	return BR_CONTINUE;
    bd06:	|  \-> moveq #2,d0
}
    bd08:	\----> lea 12(sp),sp
    bd0c:	       rts

0000bd0e <builtIn_stopMusic>:

builtIn(stopMusic)
{
    bd0e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bd10:	       movea.l 12(sp),a0
    bd14:	       move.l 24(a0),d0
    bd18:	       move.l d0,-(sp)
    bd1a:	       pea 1 <_start+0x1>
    bd1e:	       move.l sp,d0
    bd20:	       addq.l #8,d0
    bd22:	       move.l d0,-(sp)
    bd24:	       jsr 10048 <getValueType>
    bd2a:	       lea 12(sp),sp
    bd2e:	       tst.w d0
    bd30:	   /-- bne.s bd36 <builtIn_stopMusic+0x28>
    bd32:	   |   moveq #1,d0
    bd34:	/--|-- bra.s bd56 <builtIn_stopMusic+0x48>
	trimStack (fun -> stack);
    bd36:	|  \-> movea.l 12(sp),a0
    bd3a:	|      move.l 24(a0),d0
    bd3e:	|      move.l d0,-(sp)
    bd40:	|      jsr 109ac <trimStack>
    bd46:	|      addq.l #4,sp
	stopMOD (v);
    bd48:	|      move.l (sp),d0
    bd4a:	|      move.l d0,-(sp)
    bd4c:	|      jsr 8a20 <stopMOD>
    bd52:	|      addq.l #4,sp
	return BR_CONTINUE;
    bd54:	|      moveq #2,d0
}
    bd56:	\----> addq.l #4,sp
    bd58:	       rts

0000bd5a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    bd5a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bd5c:	       movea.l 16(sp),a0
    bd60:	       move.l 24(a0),d0
    bd64:	       move.l d0,-(sp)
    bd66:	       pea 1 <_start+0x1>
    bd6a:	       move.l sp,d0
    bd6c:	       addq.l #8,d0
    bd6e:	       move.l d0,-(sp)
    bd70:	       jsr 10048 <getValueType>
    bd76:	       lea 12(sp),sp
    bd7a:	       tst.w d0
    bd7c:	   /-- bne.s bd82 <builtIn_setMusicVolume+0x28>
    bd7e:	   |   moveq #1,d0
    bd80:	/--|-- bra.s bde0 <builtIn_setMusicVolume+0x86>
	trimStack (fun -> stack);
    bd82:	|  \-> movea.l 16(sp),a0
    bd86:	|      move.l 24(a0),d0
    bd8a:	|      move.l d0,-(sp)
    bd8c:	|      jsr 109ac <trimStack>
    bd92:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bd94:	|      movea.l 16(sp),a0
    bd98:	|      move.l 24(a0),d0
    bd9c:	|      move.l d0,-(sp)
    bd9e:	|      pea 1 <_start+0x1>
    bda2:	|      moveq #12,d0
    bda4:	|      add.l sp,d0
    bda6:	|      move.l d0,-(sp)
    bda8:	|      jsr 10048 <getValueType>
    bdae:	|      lea 12(sp),sp
    bdb2:	|      tst.w d0
    bdb4:	|  /-- bne.s bdba <builtIn_setMusicVolume+0x60>
    bdb6:	|  |   moveq #1,d0
    bdb8:	+--|-- bra.s bde0 <builtIn_setMusicVolume+0x86>
	trimStack (fun -> stack);
    bdba:	|  \-> movea.l 16(sp),a0
    bdbe:	|      move.l 24(a0),d0
    bdc2:	|      move.l d0,-(sp)
    bdc4:	|      jsr 109ac <trimStack>
    bdca:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    bdcc:	|      move.l (sp),d1
    bdce:	|      move.l 4(sp),d0
    bdd2:	|      move.l d1,-(sp)
    bdd4:	|      move.l d0,-(sp)
    bdd6:	|      jsr 8a06 <setMusicVolume>
    bddc:	|      addq.l #8,sp
	return BR_CONTINUE;
    bdde:	|      moveq #2,d0
}
    bde0:	\----> addq.l #8,sp
    bde2:	       rts

0000bde4 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    bde4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bde6:	       movea.l 12(sp),a0
    bdea:	       move.l 24(a0),d0
    bdee:	       move.l d0,-(sp)
    bdf0:	       pea 1 <_start+0x1>
    bdf4:	       move.l sp,d0
    bdf6:	       addq.l #8,d0
    bdf8:	       move.l d0,-(sp)
    bdfa:	       jsr 10048 <getValueType>
    be00:	       lea 12(sp),sp
    be04:	       tst.w d0
    be06:	   /-- bne.s be0c <builtIn_setDefaultMusicVolume+0x28>
    be08:	   |   moveq #1,d0
    be0a:	/--|-- bra.s be2c <builtIn_setDefaultMusicVolume+0x48>
	trimStack (fun -> stack);
    be0c:	|  \-> movea.l 12(sp),a0
    be10:	|      move.l 24(a0),d0
    be14:	|      move.l d0,-(sp)
    be16:	|      jsr 109ac <trimStack>
    be1c:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    be1e:	|      move.l (sp),d0
    be20:	|      move.l d0,-(sp)
    be22:	|      jsr 89ea <setDefaultMusicVolume>
    be28:	|      addq.l #4,sp
	return BR_CONTINUE;
    be2a:	|      moveq #2,d0
}
    be2c:	\----> addq.l #4,sp
    be2e:	       rts

0000be30 <builtIn_playSound>:

builtIn(playSound)
{
    be30:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    be32:	       movea.l 12(sp),a0
    be36:	       move.l 24(a0),d0
    be3a:	       move.l d0,-(sp)
    be3c:	       pea 5 <_start+0x5>
    be40:	       move.l sp,d0
    be42:	       addq.l #8,d0
    be44:	       move.l d0,-(sp)
    be46:	       jsr 10048 <getValueType>
    be4c:	       lea 12(sp),sp
    be50:	       tst.w d0
    be52:	   /-- bne.s be58 <builtIn_playSound+0x28>
    be54:	   |   moveq #1,d0
    be56:	/--|-- bra.s be82 <builtIn_playSound+0x52>
	trimStack (fun -> stack);
    be58:	|  \-> movea.l 12(sp),a0
    be5c:	|      move.l 24(a0),d0
    be60:	|      move.l d0,-(sp)
    be62:	|      jsr 109ac <trimStack>
    be68:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    be6a:	|      move.l (sp),d0
    be6c:	|      clr.l -(sp)
    be6e:	|      move.l d0,-(sp)
    be70:	|      jsr 8a0e <startSound>
    be76:	|      addq.l #8,sp
    be78:	|      tst.w d0
    be7a:	|  /-- bne.s be80 <builtIn_playSound+0x50>
    be7c:	|  |   moveq #2,d0
    be7e:	+--|-- bra.s be82 <builtIn_playSound+0x52>
	return BR_CONTINUE;
    be80:	|  \-> moveq #2,d0
}
    be82:	\----> addq.l #4,sp
    be84:	       rts

0000be86 <builtIn_loopSound>:

builtIn(loopSound)
{
    be86:	             lea -28(sp),sp
    be8a:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    be8c:	             tst.l 36(sp)
    be90:	         /-- bgt.s bea6 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    be92:	         |   pea 157e7 <zbuffer.c.d110ca03+0x2a1>
    be98:	         |   jsr 12018 <KPrintF>
    be9e:	         |   addq.l #4,sp
		return BR_ERROR;
    bea0:	         |   moveq #1,d0
    bea2:	/--------|-- bra.w c068 <builtIn_loopSound+0x1e2>
	} else if (numParams < 2) {
    bea6:	|        \-> moveq #1,d0
    bea8:	|            cmp.l 36(sp),d0
    beac:	|     /----- blt.s bf0a <builtIn_loopSound+0x84>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    beae:	|     |      movea.l 40(sp),a0
    beb2:	|     |      move.l 24(a0),d0
    beb6:	|     |      move.l d0,-(sp)
    beb8:	|     |      pea 5 <_start+0x5>
    bebc:	|     |      lea 16(sp),a0
    bec0:	|     |      move.l a0,-(sp)
    bec2:	|     |      jsr 10048 <getValueType>
    bec8:	|     |      lea 12(sp),sp
    becc:	|     |      tst.w d0
    bece:	|     |  /-- bne.s bed6 <builtIn_loopSound+0x50>
    bed0:	|     |  |   moveq #1,d0
    bed2:	+-----|--|-- bra.w c068 <builtIn_loopSound+0x1e2>
		trimStack(fun->stack);
    bed6:	|     |  \-> movea.l 40(sp),a0
    beda:	|     |      move.l 24(a0),d0
    bede:	|     |      move.l d0,-(sp)
    bee0:	|     |      jsr 109ac <trimStack>
    bee6:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    bee8:	|     |      move.l 8(sp),d0
    beec:	|     |      pea 1 <_start+0x1>
    bef0:	|     |      move.l d0,-(sp)
    bef2:	|     |      jsr 8a0e <startSound>
    bef8:	|     |      addq.l #8,sp
    befa:	|     |      tst.w d0
    befc:	|     |  /-- bne.s bf04 <builtIn_loopSound+0x7e>
    befe:	|     |  |   moveq #2,d0
    bf00:	+-----|--|-- bra.w c068 <builtIn_loopSound+0x1e2>
		return BR_CONTINUE;
    bf04:	|     |  \-> moveq #2,d0
    bf06:	+-----|----- bra.w c068 <builtIn_loopSound+0x1e2>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    bf0a:	|     \----> moveq #2,d1
    bf0c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    bf10:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    bf14:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    bf18:	|            movea.l 40(sp),a0
    bf1c:	|            movea.l 24(a0),a0
    bf20:	|            move.l (a0),d0
    bf22:	|            moveq #5,d1
    bf24:	|            cmp.l d0,d1
    bf26:	|  /-------- beq.w c002 <builtIn_loopSound+0x17c>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    bf2a:	|  |         movea.l 40(sp),a0
    bf2e:	|  |         move.l 24(a0),d0
    bf32:	|  |         move.l d0,-(sp)
    bf34:	|  |         pea 1 <_start+0x1>
    bf38:	|  |         lea 12(sp),a0
    bf3c:	|  |         move.l a0,-(sp)
    bf3e:	|  |         jsr 10048 <getValueType>
    bf44:	|  |         lea 12(sp),sp
			trimStack(fun->stack);
    bf48:	|  |         movea.l 40(sp),a0
    bf4c:	|  |         move.l 24(a0),d0
    bf50:	|  |         move.l d0,-(sp)
    bf52:	|  |         jsr 109ac <trimStack>
    bf58:	|  |         addq.l #4,sp
			numParams--;
    bf5a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    bf5e:	|  +-------- bra.w c002 <builtIn_loopSound+0x17c>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    bf62:	|  |  /----> movea.l 40(sp),a0
    bf66:	|  |  |      move.l 24(a0),d0
    bf6a:	|  |  |      move.l d0,-(sp)
    bf6c:	|  |  |      pea 5 <_start+0x5>
    bf70:	|  |  |      lea 16(sp),a0
    bf74:	|  |  |      move.l a0,-(sp)
    bf76:	|  |  |      jsr 10048 <getValueType>
    bf7c:	|  |  |      lea 12(sp),sp
    bf80:	|  |  |      tst.w d0
    bf82:	|  |  |  /-- bne.s bf98 <builtIn_loopSound+0x112>
				KPrintF("Illegal parameter given built-in function loopSound().");
    bf84:	|  |  |  |   pea 15825 <zbuffer.c.d110ca03+0x2df>
    bf8a:	|  |  |  |   jsr 12018 <KPrintF>
    bf90:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    bf92:	|  |  |  |   moveq #1,d0
    bf94:	+--|--|--|-- bra.w c068 <builtIn_loopSound+0x1e2>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    bf98:	|  |  |  \-> moveq #20,d0
    bf9a:	|  |  |      move.l d0,20(sp)
    bf9e:	|  |  |      clr.l 16(sp)
    bfa2:	|  |  |      move.l 17b28 <SysBase>,d0
    bfa8:	|  |  |      movea.l d0,a6
    bfaa:	|  |  |      move.l 20(sp),d0
    bfae:	|  |  |      move.l 16(sp),d1
    bfb2:	|  |  |      jsr -684(a6)
    bfb6:	|  |  |      move.l d0,12(sp)
    bfba:	|  |  |      move.l 12(sp),d0
    bfbe:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    bfc2:	|  |  |  /-- bne.s bfca <builtIn_loopSound+0x144>
    bfc4:	|  |  |  |   moveq #1,d0
    bfc6:	+--|--|--|-- bra.w c068 <builtIn_loopSound+0x1e2>

			s->next = old;
    bfca:	|  |  |  \-> movea.l 28(sp),a0
    bfce:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    bfd4:	|  |  |      movea.l 28(sp),a0
    bfd8:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    bfdc:	|  |  |      move.l 8(sp),d0
    bfe0:	|  |  |      movea.l 28(sp),a0
    bfe4:	|  |  |      move.l d0,(a0)
			old = s;
    bfe6:	|  |  |      move.l 28(sp),24(sp)

			trimStack(fun->stack);
    bfec:	|  |  |      movea.l 40(sp),a0
    bff0:	|  |  |      move.l 24(a0),d0
    bff4:	|  |  |      move.l d0,-(sp)
    bff6:	|  |  |      jsr 109ac <trimStack>
    bffc:	|  |  |      addq.l #4,sp
			numParams--;
    bffe:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    c002:	|  \--|----> tst.l 36(sp)
    c006:	|     \----- bne.w bf62 <builtIn_loopSound+0xdc>
		}
		while (s->next) s = s->next;
    c00a:	|        /-- bra.s c016 <builtIn_loopSound+0x190>
    c00c:	|     /--|-> movea.l 28(sp),a0
    c010:	|     |  |   move.l 4(a0),28(sp)
    c016:	|     |  \-> movea.l 28(sp),a0
    c01a:	|     |      move.l 4(a0),d0
    c01e:	|     \----- bne.s c00c <builtIn_loopSound+0x186>
		if (doLoop > 1) {
    c020:	|            move.l 4(sp),d0
    c024:	|            moveq #1,d1
    c026:	|            cmp.l d0,d1
    c028:	|     /----- bge.s c040 <builtIn_loopSound+0x1ba>
			s->next = old;
    c02a:	|     |      movea.l 28(sp),a0
    c02e:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    c034:	|     |      movea.l 24(sp),a0
    c038:	|     |      move.l 28(sp),8(a0)
    c03e:	|     |  /-- bra.s c050 <builtIn_loopSound+0x1ca>
		} else if (doLoop) {
    c040:	|     \--|-> move.l 4(sp),d0
    c044:	|        +-- beq.s c050 <builtIn_loopSound+0x1ca>
			s->next = s;
    c046:	|        |   movea.l 28(sp),a0
    c04a:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    c050:	|        \-> movea.l 24(sp),a0
    c054:	|            moveq #-1,d0
    c056:	|            move.l d0,16(a0)
		playSoundList(old);
    c05a:	|            move.l 24(sp),-(sp)
    c05e:	|            jsr 8988 <playSoundList>
    c064:	|            addq.l #4,sp
		return BR_CONTINUE;
    c066:	|            moveq #2,d0
	}
}
    c068:	\----------> movea.l (sp)+,a6
    c06a:	             lea 28(sp),sp
    c06e:	             rts

0000c070 <builtIn_stopSound>:

builtIn(stopSound)
{
    c070:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c072:	       movea.l 12(sp),a0
    c076:	       move.l 24(a0),d0
    c07a:	       move.l d0,-(sp)
    c07c:	       pea 5 <_start+0x5>
    c080:	       move.l sp,d0
    c082:	       addq.l #8,d0
    c084:	       move.l d0,-(sp)
    c086:	       jsr 10048 <getValueType>
    c08c:	       lea 12(sp),sp
    c090:	       tst.w d0
    c092:	   /-- bne.s c098 <builtIn_stopSound+0x28>
    c094:	   |   moveq #1,d0
    c096:	/--|-- bra.s c0b8 <builtIn_stopSound+0x48>
	trimStack (fun -> stack);
    c098:	|  \-> movea.l 12(sp),a0
    c09c:	|      move.l 24(a0),d0
    c0a0:	|      move.l d0,-(sp)
    c0a2:	|      jsr 109ac <trimStack>
    c0a8:	|      addq.l #4,sp
	huntKillSound (v);
    c0aa:	|      move.l (sp),d0
    c0ac:	|      move.l d0,-(sp)
    c0ae:	|      jsr 8980 <huntKillSound>
    c0b4:	|      addq.l #4,sp
	return BR_CONTINUE;
    c0b6:	|      moveq #2,d0
}
    c0b8:	\----> addq.l #4,sp
    c0ba:	       rts

0000c0bc <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    c0bc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c0be:	       movea.l 12(sp),a0
    c0c2:	       move.l 24(a0),d0
    c0c6:	       move.l d0,-(sp)
    c0c8:	       pea 1 <_start+0x1>
    c0cc:	       move.l sp,d0
    c0ce:	       addq.l #8,d0
    c0d0:	       move.l d0,-(sp)
    c0d2:	       jsr 10048 <getValueType>
    c0d8:	       lea 12(sp),sp
    c0dc:	       tst.w d0
    c0de:	   /-- bne.s c0e4 <builtIn_setDefaultSoundVolume+0x28>
    c0e0:	   |   moveq #1,d0
    c0e2:	/--|-- bra.s c104 <builtIn_setDefaultSoundVolume+0x48>
	trimStack (fun -> stack);
    c0e4:	|  \-> movea.l 12(sp),a0
    c0e8:	|      move.l 24(a0),d0
    c0ec:	|      move.l d0,-(sp)
    c0ee:	|      jsr 109ac <trimStack>
    c0f4:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    c0f6:	|      move.l (sp),d0
    c0f8:	|      move.l d0,-(sp)
    c0fa:	|      jsr 89f6 <setDefaultSoundVolume>
    c100:	|      addq.l #4,sp
	return BR_CONTINUE;
    c102:	|      moveq #2,d0
}
    c104:	\----> addq.l #4,sp
    c106:	       rts

0000c108 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    c108:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c10a:	       movea.l 16(sp),a0
    c10e:	       move.l 24(a0),d0
    c112:	       move.l d0,-(sp)
    c114:	       pea 1 <_start+0x1>
    c118:	       move.l sp,d0
    c11a:	       addq.l #8,d0
    c11c:	       move.l d0,-(sp)
    c11e:	       jsr 10048 <getValueType>
    c124:	       lea 12(sp),sp
    c128:	       tst.w d0
    c12a:	   /-- bne.s c130 <builtIn_setSoundVolume+0x28>
    c12c:	   |   moveq #1,d0
    c12e:	/--|-- bra.s c18e <builtIn_setSoundVolume+0x86>
	trimStack (fun -> stack);
    c130:	|  \-> movea.l 16(sp),a0
    c134:	|      move.l 24(a0),d0
    c138:	|      move.l d0,-(sp)
    c13a:	|      jsr 109ac <trimStack>
    c140:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c142:	|      movea.l 16(sp),a0
    c146:	|      move.l 24(a0),d0
    c14a:	|      move.l d0,-(sp)
    c14c:	|      pea 5 <_start+0x5>
    c150:	|      moveq #12,d0
    c152:	|      add.l sp,d0
    c154:	|      move.l d0,-(sp)
    c156:	|      jsr 10048 <getValueType>
    c15c:	|      lea 12(sp),sp
    c160:	|      tst.w d0
    c162:	|  /-- bne.s c168 <builtIn_setSoundVolume+0x60>
    c164:	|  |   moveq #1,d0
    c166:	+--|-- bra.s c18e <builtIn_setSoundVolume+0x86>
	trimStack (fun -> stack);
    c168:	|  \-> movea.l 16(sp),a0
    c16c:	|      move.l 24(a0),d0
    c170:	|      move.l d0,-(sp)
    c172:	|      jsr 109ac <trimStack>
    c178:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    c17a:	|      move.l (sp),d1
    c17c:	|      move.l 4(sp),d0
    c180:	|      move.l d1,-(sp)
    c182:	|      move.l d0,-(sp)
    c184:	|      jsr 8a0a <setSoundVolume>
    c18a:	|      addq.l #8,sp
	return BR_CONTINUE;
    c18c:	|      moveq #2,d0
}
    c18e:	\----> addq.l #8,sp
    c190:	       rts

0000c192 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    c192:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c196:	       movea.l 20(sp),a0
    c19a:	       move.l 24(a0),d0
    c19e:	       move.l d0,-(sp)
    c1a0:	       pea 1 <_start+0x1>
    c1a4:	       moveq #12,d0
    c1a6:	       add.l sp,d0
    c1a8:	       move.l d0,-(sp)
    c1aa:	       jsr 10048 <getValueType>
    c1b0:	       lea 12(sp),sp
    c1b4:	       tst.w d0
    c1b6:	   /-- bne.s c1be <builtIn_setSoundLoopPoints+0x2c>
    c1b8:	   |   moveq #1,d0
    c1ba:	/--|-- bra.w c25c <builtIn_setSoundLoopPoints+0xca>
	trimStack (fun -> stack);
    c1be:	|  \-> movea.l 20(sp),a0
    c1c2:	|      move.l 24(a0),d0
    c1c6:	|      move.l d0,-(sp)
    c1c8:	|      jsr 109ac <trimStack>
    c1ce:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1d0:	|      movea.l 20(sp),a0
    c1d4:	|      move.l 24(a0),d0
    c1d8:	|      move.l d0,-(sp)
    c1da:	|      pea 1 <_start+0x1>
    c1de:	|      lea 8(sp),a0
    c1e2:	|      move.l a0,-(sp)
    c1e4:	|      jsr 10048 <getValueType>
    c1ea:	|      lea 12(sp),sp
    c1ee:	|      tst.w d0
    c1f0:	|  /-- bne.s c1f6 <builtIn_setSoundLoopPoints+0x64>
    c1f2:	|  |   moveq #1,d0
    c1f4:	+--|-- bra.s c25c <builtIn_setSoundLoopPoints+0xca>
	trimStack (fun -> stack);
    c1f6:	|  \-> movea.l 20(sp),a0
    c1fa:	|      move.l 24(a0),d0
    c1fe:	|      move.l d0,-(sp)
    c200:	|      jsr 109ac <trimStack>
    c206:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c208:	|      movea.l 20(sp),a0
    c20c:	|      move.l 24(a0),d0
    c210:	|      move.l d0,-(sp)
    c212:	|      pea 5 <_start+0x5>
    c216:	|      moveq #16,d0
    c218:	|      add.l sp,d0
    c21a:	|      move.l d0,-(sp)
    c21c:	|      jsr 10048 <getValueType>
    c222:	|      lea 12(sp),sp
    c226:	|      tst.w d0
    c228:	|  /-- bne.s c22e <builtIn_setSoundLoopPoints+0x9c>
    c22a:	|  |   moveq #1,d0
    c22c:	+--|-- bra.s c25c <builtIn_setSoundLoopPoints+0xca>
	trimStack (fun -> stack);
    c22e:	|  \-> movea.l 20(sp),a0
    c232:	|      move.l 24(a0),d0
    c236:	|      move.l d0,-(sp)
    c238:	|      jsr 109ac <trimStack>
    c23e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    c240:	|      movea.l 4(sp),a0
    c244:	|      move.l (sp),d1
    c246:	|      move.l 8(sp),d0
    c24a:	|      move.l a0,-(sp)
    c24c:	|      move.l d1,-(sp)
    c24e:	|      move.l d0,-(sp)
    c250:	|      jsr 8a02 <setSoundLoop>
    c256:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c25a:	|      moveq #2,d0
}
    c25c:	\----> lea 12(sp),sp
    c260:	       rts

0000c262 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    c262:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c264:	          movea.l 12(sp),a0
    c268:	          movea.l 24(a0),a0
    c26c:	          move.l (a0),d0
    c26e:	          moveq #5,d1
    c270:	          cmp.l d0,d1
    c272:	/-------- bne.s c2b8 <builtIn_setFloor+0x56>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c274:	|         movea.l 12(sp),a0
    c278:	|         move.l 24(a0),d0
    c27c:	|         move.l d0,-(sp)
    c27e:	|         pea 5 <_start+0x5>
    c282:	|         move.l sp,d0
    c284:	|         addq.l #8,d0
    c286:	|         move.l d0,-(sp)
    c288:	|         jsr 10048 <getValueType>
    c28e:	|         lea 12(sp),sp
		trimStack (fun -> stack);
    c292:	|         movea.l 12(sp),a0
    c296:	|         move.l 24(a0),d0
    c29a:	|         move.l d0,-(sp)
    c29c:	|         jsr 109ac <trimStack>
    c2a2:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    c2a4:	|         move.l (sp),d0
    c2a6:	|         move.l d0,-(sp)
    c2a8:	|         jsr 11812 <setFloor>
    c2ae:	|         addq.l #4,sp
    c2b0:	|         tst.w d0
    c2b2:	|  /----- bne.s c2d0 <builtIn_setFloor+0x6e>
    c2b4:	|  |      moveq #1,d0
    c2b6:	|  |  /-- bra.s c2d2 <builtIn_setFloor+0x70>
	} else {
		trimStack (fun -> stack);
    c2b8:	\--|--|-> movea.l 12(sp),a0
    c2bc:	   |  |   move.l 24(a0),d0
    c2c0:	   |  |   move.l d0,-(sp)
    c2c2:	   |  |   jsr 109ac <trimStack>
    c2c8:	   |  |   addq.l #4,sp
		setFloorNull ();
    c2ca:	   |  |   jsr 11f8c <setFloorNull>
	}
	return BR_CONTINUE;
    c2d0:	   \--|-> moveq #2,d0
}
    c2d2:	      \-> addq.l #4,sp
    c2d4:	          rts

0000c2d6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    c2d6:	jsr 110aa <drawFloor>
	return BR_CONTINUE;
    c2dc:	moveq #2,d0
}
    c2de:	rts

0000c2e0 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    c2e0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c2e2:	          movea.l 12(sp),a0
    c2e6:	          movea.l 24(a0),a0
    c2ea:	          move.l (a0),d0
    c2ec:	          moveq #5,d1
    c2ee:	          cmp.l d0,d1
    c2f0:	/-------- bne.s c336 <builtIn_setZBuffer+0x56>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c2f2:	|         movea.l 12(sp),a0
    c2f6:	|         move.l 24(a0),d0
    c2fa:	|         move.l d0,-(sp)
    c2fc:	|         pea 5 <_start+0x5>
    c300:	|         move.l sp,d0
    c302:	|         addq.l #8,d0
    c304:	|         move.l d0,-(sp)
    c306:	|         jsr 10048 <getValueType>
    c30c:	|         lea 12(sp),sp
		trimStack (fun -> stack);
    c310:	|         movea.l 12(sp),a0
    c314:	|         move.l 24(a0),d0
    c318:	|         move.l d0,-(sp)
    c31a:	|         jsr 109ac <trimStack>
    c320:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    c322:	|         move.l (sp),d0
    c324:	|         move.l d0,-(sp)
    c326:	|         jsr 15f2 <setZBuffer>
    c32c:	|         addq.l #4,sp
    c32e:	|         tst.w d0
    c330:	|  /----- bne.s c34e <builtIn_setZBuffer+0x6e>
    c332:	|  |      moveq #1,d0
    c334:	|  |  /-- bra.s c350 <builtIn_setZBuffer+0x70>
	} else {
		trimStack (fun -> stack);
    c336:	\--|--|-> movea.l 12(sp),a0
    c33a:	   |  |   move.l 24(a0),d0
    c33e:	   |  |   move.l d0,-(sp)
    c340:	   |  |   jsr 109ac <trimStack>
    c346:	   |  |   addq.l #4,sp
		killZBuffer ();
    c348:	   |  |   jsr 159c <killZBuffer>
	}
	return BR_CONTINUE;
    c34e:	   \--|-> moveq #2,d0
}
    c350:	      \-> addq.l #4,sp
    c352:	          rts

0000c354 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    c354:	pea 1585c <zbuffer.c.d110ca03+0x316>
    c35a:	jsr 12018 <KPrintF>
    c360:	addq.l #4,sp
	return BR_CONTINUE;
    c362:	moveq #2,d0
}
    c364:	rts

0000c366 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c366:	          movea.l 8(sp),a0
    c36a:	          move.l 24(a0),d0
    c36e:	          move.l d0,-(sp)
    c370:	          pea 1 <_start+0x1>
    c374:	          pea 17be4 <speechMode>
    c37a:	          jsr 10048 <getValueType>
    c380:	          lea 12(sp),sp
    c384:	          tst.w d0
    c386:	      /-- bne.s c38c <builtIn_setSpeechMode+0x26>
    c388:	      |   moveq #1,d0
    c38a:	/-----|-- bra.s c3c6 <builtIn_setSpeechMode+0x60>
	trimStack (fun -> stack);
    c38c:	|     \-> movea.l 8(sp),a0
    c390:	|         move.l 24(a0),d0
    c394:	|         move.l d0,-(sp)
    c396:	|         jsr 109ac <trimStack>
    c39c:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    c39e:	|         move.l 17be4 <speechMode>,d0
    c3a4:	|     /-- bmi.s c3b2 <builtIn_setSpeechMode+0x4c>
    c3a6:	|     |   move.l 17be4 <speechMode>,d0
    c3ac:	|     |   moveq #2,d1
    c3ae:	|     |   cmp.l d0,d1
    c3b0:	|  /--|-- bge.s c3c4 <builtIn_setSpeechMode+0x5e>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    c3b2:	|  |  \-> pea 15875 <zbuffer.c.d110ca03+0x32f>
    c3b8:	|  |      jsr 12018 <KPrintF>
    c3be:	|  |      addq.l #4,sp
		return BR_ERROR;
    c3c0:	|  |      moveq #1,d0
    c3c2:	+--|----- bra.s c3c6 <builtIn_setSpeechMode+0x60>
	}
	return BR_CONTINUE;
    c3c4:	|  \----> moveq #2,d0
}
    c3c6:	\-------> rts

0000c3c8 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    c3c8:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    c3ca:	       jsr 4e14 <isThereAnySpeechGoingOn>
    c3d0:	       move.l d0,(sp)
	if (i == -1) {
    c3d2:	       moveq #-1,d0
    c3d4:	       cmp.l (sp),d0
    c3d6:	/----- bne.s c3f4 <builtIn_somethingSpeaking+0x2c>
		setVariable (fun -> reg, SVT_INT, 0);
    c3d8:	|      movea.l 12(sp),a0
    c3dc:	|      move.l 28(a0),d0
    c3e0:	|      clr.l -(sp)
    c3e2:	|      pea 1 <_start+0x1>
    c3e6:	|      move.l d0,-(sp)
    c3e8:	|      jsr 1091a <setVariable>
    c3ee:	|      lea 12(sp),sp
    c3f2:	|  /-- bra.s c40e <builtIn_somethingSpeaking+0x46>
	} else {
		setVariable (fun -> reg, SVT_OBJTYPE, i);
    c3f4:	\--|-> movea.l 12(sp),a0
    c3f8:	   |   move.l 28(a0),d0
    c3fc:	   |   move.l (sp),-(sp)
    c3fe:	   |   pea 7 <_start+0x7>
    c402:	   |   move.l d0,-(sp)
    c404:	   |   jsr 1091a <setVariable>
    c40a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    c40e:	   \-> moveq #2,d0
}
    c410:	       addq.l #4,sp
    c412:	       rts

0000c414 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    c414:	jsr 33e6 <killSpeechTimers>
	return BR_CONTINUE;
    c41a:	moveq #2,d0
}
    c41c:	rts

0000c41e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    c41e:	       move.l 17c1e <overRegion>,d0
    c424:	/----- beq.s c450 <builtIn_getOverObject+0x32>
		// Return value
		setVariable (fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    c426:	|      movea.l 17c1e <overRegion>,a0
    c42c:	|      movea.l 28(a0),a0
    c430:	|      move.l 4(a0),d1
    c434:	|      movea.l 8(sp),a0
    c438:	|      move.l 28(a0),d0
    c43c:	|      move.l d1,-(sp)
    c43e:	|      pea 7 <_start+0x7>
    c442:	|      move.l d0,-(sp)
    c444:	|      jsr 1091a <setVariable>
    c44a:	|      lea 12(sp),sp
    c44e:	|  /-- bra.s c46a <builtIn_getOverObject+0x4c>
	else
		// Return value
		setVariable (fun -> reg, SVT_INT, 0);
    c450:	\--|-> movea.l 8(sp),a0
    c454:	   |   move.l 28(a0),d0
    c458:	   |   clr.l -(sp)
    c45a:	   |   pea 1 <_start+0x1>
    c45e:	   |   move.l d0,-(sp)
    c460:	   |   jsr 1091a <setVariable>
    c466:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    c46a:	   \-> moveq #2,d0
}
    c46c:	       rts

0000c46e <builtIn_rename>:

builtIn(rename)
{
    c46e:	       lea -16(sp),sp
    c472:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c474:	       movea.l 28(sp),a0
    c478:	       move.l 24(a0),d0
    c47c:	       move.l d0,-(sp)
    c47e:	       jsr 10620 <getTextFromAnyVar>
    c484:	       addq.l #4,sp
    c486:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    c48a:	   /-- bne.s c490 <builtIn_rename+0x22>
    c48c:	   |   moveq #1,d0
    c48e:	/--|-- bra.s c50e <builtIn_rename+0xa0>
	trimStack(fun->stack);
    c490:	|  \-> movea.l 28(sp),a0
    c494:	|      move.l 24(a0),d0
    c498:	|      move.l d0,-(sp)
    c49a:	|      jsr 109ac <trimStack>
    c4a0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    c4a2:	|      movea.l 28(sp),a0
    c4a6:	|      move.l 24(a0),d0
    c4aa:	|      move.l d0,-(sp)
    c4ac:	|      pea 7 <_start+0x7>
    c4b0:	|      lea 12(sp),a0
    c4b4:	|      move.l a0,-(sp)
    c4b6:	|      jsr 10048 <getValueType>
    c4bc:	|      lea 12(sp),sp
    c4c0:	|      tst.w d0
    c4c2:	|  /-- bne.s c4c8 <builtIn_rename+0x5a>
    c4c4:	|  |   moveq #1,d0
    c4c6:	+--|-- bra.s c50e <builtIn_rename+0xa0>
	trimStack(fun->stack);
    c4c8:	|  \-> movea.l 28(sp),a0
    c4cc:	|      move.l 24(a0),d0
    c4d0:	|      move.l d0,-(sp)
    c4d2:	|      jsr 109ac <trimStack>
    c4d8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    c4da:	|      move.l 4(sp),d0
    c4de:	|      move.l d0,-(sp)
    c4e0:	|      jsr 8d96 <findObjectType>
    c4e6:	|      addq.l #4,sp
    c4e8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    c4ec:	|      movea.l 12(sp),a0
    c4f0:	|      move.l (a0),8(sp)
    c4f4:	|      move.l 17b28 <SysBase>,d0
    c4fa:	|      movea.l d0,a6
    c4fc:	|      movea.l 8(sp),a1
    c500:	|      jsr -690(a6)
	o->screenName = newText;
    c504:	|      movea.l 12(sp),a0
    c508:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    c50c:	|      moveq #2,d0
}
    c50e:	\----> movea.l (sp)+,a6
    c510:	       lea 16(sp),sp
    c514:	       rts

0000c516 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    c516:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c51a:	          movea.l 20(sp),a0
    c51e:	          move.l 24(a0),d0
    c522:	          move.l d0,-(sp)
    c524:	          pea 7 <_start+0x7>
    c528:	          lea 8(sp),a0
    c52c:	          move.l a0,-(sp)
    c52e:	          jsr 10048 <getValueType>
    c534:	          lea 12(sp),sp
    c538:	          tst.w d0
    c53a:	      /-- bne.s c542 <builtIn_getObjectX+0x2c>
    c53c:	      |   moveq #1,d0
    c53e:	/-----|-- bra.w c5e6 <builtIn_getObjectX+0xd0>
	trimStack (fun -> stack);
    c542:	|     \-> movea.l 20(sp),a0
    c546:	|         move.l 24(a0),d0
    c54a:	|         move.l d0,-(sp)
    c54c:	|         jsr 109ac <trimStack>
    c552:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c554:	|         move.l (sp),d0
    c556:	|         move.l d0,-(sp)
    c558:	|         jsr 61ce <findPerson>
    c55e:	|         addq.l #4,sp
    c560:	|         move.l d0,8(sp)
	if (pers) {
    c564:	|     /-- beq.s c594 <builtIn_getObjectX+0x7e>
		setVariable (fun -> reg, SVT_INT, pers -> x);
    c566:	|     |   movea.l 8(sp),a0
    c56a:	|     |   move.l (a0),d0
    c56c:	|     |   move.l d0,-(sp)
    c56e:	|     |   jsr 12408 <__fixsfsi>
    c574:	|     |   addq.l #4,sp
    c576:	|     |   move.l d0,d1
    c578:	|     |   movea.l 20(sp),a0
    c57c:	|     |   move.l 28(a0),d0
    c580:	|     |   move.l d1,-(sp)
    c582:	|     |   pea 1 <_start+0x1>
    c586:	|     |   move.l d0,-(sp)
    c588:	|     |   jsr 1091a <setVariable>
    c58e:	|     |   lea 12(sp),sp
    c592:	|  /--|-- bra.s c5e4 <builtIn_getObjectX+0xce>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c594:	|  |  \-> move.l (sp),d0
    c596:	|  |      move.l d0,-(sp)
    c598:	|  |      jsr 10aea <getRegionForObject>
    c59e:	|  |      addq.l #4,sp
    c5a0:	|  |      move.l d0,4(sp)
		if (la) {
    c5a4:	|  |  /-- beq.s c5ca <builtIn_getObjectX+0xb4>
			setVariable (fun -> reg, SVT_INT, la -> sX);
    c5a6:	|  |  |   movea.l 4(sp),a0
    c5aa:	|  |  |   move.l 16(a0),d1
    c5ae:	|  |  |   movea.l 20(sp),a0
    c5b2:	|  |  |   move.l 28(a0),d0
    c5b6:	|  |  |   move.l d1,-(sp)
    c5b8:	|  |  |   pea 1 <_start+0x1>
    c5bc:	|  |  |   move.l d0,-(sp)
    c5be:	|  |  |   jsr 1091a <setVariable>
    c5c4:	|  |  |   lea 12(sp),sp
    c5c8:	|  +--|-- bra.s c5e4 <builtIn_getObjectX+0xce>
		} else {
			setVariable (fun -> reg, SVT_INT, 0);
    c5ca:	|  |  \-> movea.l 20(sp),a0
    c5ce:	|  |      move.l 28(a0),d0
    c5d2:	|  |      clr.l -(sp)
    c5d4:	|  |      pea 1 <_start+0x1>
    c5d8:	|  |      move.l d0,-(sp)
    c5da:	|  |      jsr 1091a <setVariable>
    c5e0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c5e4:	|  \----> moveq #2,d0
}
    c5e6:	\-------> lea 12(sp),sp
    c5ea:	          rts

0000c5ec <builtIn_getObjectY>:

builtIn (getObjectY)
{
    c5ec:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c5f0:	          movea.l 20(sp),a0
    c5f4:	          move.l 24(a0),d0
    c5f8:	          move.l d0,-(sp)
    c5fa:	          pea 7 <_start+0x7>
    c5fe:	          lea 8(sp),a0
    c602:	          move.l a0,-(sp)
    c604:	          jsr 10048 <getValueType>
    c60a:	          lea 12(sp),sp
    c60e:	          tst.w d0
    c610:	      /-- bne.s c618 <builtIn_getObjectY+0x2c>
    c612:	      |   moveq #1,d0
    c614:	/-----|-- bra.w c6be <builtIn_getObjectY+0xd2>
	trimStack (fun -> stack);
    c618:	|     \-> movea.l 20(sp),a0
    c61c:	|         move.l 24(a0),d0
    c620:	|         move.l d0,-(sp)
    c622:	|         jsr 109ac <trimStack>
    c628:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c62a:	|         move.l (sp),d0
    c62c:	|         move.l d0,-(sp)
    c62e:	|         jsr 61ce <findPerson>
    c634:	|         addq.l #4,sp
    c636:	|         move.l d0,8(sp)
	if (pers) {
    c63a:	|     /-- beq.s c66c <builtIn_getObjectY+0x80>
		setVariable (fun -> reg, SVT_INT, pers -> y);
    c63c:	|     |   movea.l 8(sp),a0
    c640:	|     |   move.l 4(a0),d0
    c644:	|     |   move.l d0,-(sp)
    c646:	|     |   jsr 12408 <__fixsfsi>
    c64c:	|     |   addq.l #4,sp
    c64e:	|     |   move.l d0,d1
    c650:	|     |   movea.l 20(sp),a0
    c654:	|     |   move.l 28(a0),d0
    c658:	|     |   move.l d1,-(sp)
    c65a:	|     |   pea 1 <_start+0x1>
    c65e:	|     |   move.l d0,-(sp)
    c660:	|     |   jsr 1091a <setVariable>
    c666:	|     |   lea 12(sp),sp
    c66a:	|  /--|-- bra.s c6bc <builtIn_getObjectY+0xd0>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c66c:	|  |  \-> move.l (sp),d0
    c66e:	|  |      move.l d0,-(sp)
    c670:	|  |      jsr 10aea <getRegionForObject>
    c676:	|  |      addq.l #4,sp
    c678:	|  |      move.l d0,4(sp)
		if (la) {
    c67c:	|  |  /-- beq.s c6a2 <builtIn_getObjectY+0xb6>
			setVariable (fun -> reg, SVT_INT, la -> sY);
    c67e:	|  |  |   movea.l 4(sp),a0
    c682:	|  |  |   move.l 20(a0),d1
    c686:	|  |  |   movea.l 20(sp),a0
    c68a:	|  |  |   move.l 28(a0),d0
    c68e:	|  |  |   move.l d1,-(sp)
    c690:	|  |  |   pea 1 <_start+0x1>
    c694:	|  |  |   move.l d0,-(sp)
    c696:	|  |  |   jsr 1091a <setVariable>
    c69c:	|  |  |   lea 12(sp),sp
    c6a0:	|  +--|-- bra.s c6bc <builtIn_getObjectY+0xd0>
		} else {
			setVariable (fun -> reg, SVT_INT, 0);
    c6a2:	|  |  \-> movea.l 20(sp),a0
    c6a6:	|  |      move.l 28(a0),d0
    c6aa:	|  |      clr.l -(sp)
    c6ac:	|  |      pea 1 <_start+0x1>
    c6b0:	|  |      move.l d0,-(sp)
    c6b2:	|  |      jsr 1091a <setVariable>
    c6b8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c6bc:	|  \----> moveq #2,d0
}
    c6be:	\-------> lea 12(sp),sp
    c6c2:	          rts

0000c6c4 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    c6c4:	       lea -32(sp),sp
    c6c8:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c6cc:	       movea.l 56(sp),a0
    c6d0:	       move.l 24(a0),d0
    c6d4:	       move.l d0,-(sp)
    c6d6:	       pea 1 <_start+0x1>
    c6da:	       lea 28(sp),a0
    c6de:	       move.l a0,-(sp)
    c6e0:	       jsr 10048 <getValueType>
    c6e6:	       lea 12(sp),sp
    c6ea:	       tst.w d0
    c6ec:	   /-- bne.s c6f4 <builtIn_addScreenRegion+0x30>
    c6ee:	   |   moveq #1,d0
    c6f0:	/--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c6f4:	|  \-> movea.l 56(sp),a0
    c6f8:	|      move.l 24(a0),d0
    c6fc:	|      move.l d0,-(sp)
    c6fe:	|      jsr 109ac <trimStack>
    c704:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c706:	|      movea.l 56(sp),a0
    c70a:	|      move.l 24(a0),d0
    c70e:	|      move.l d0,-(sp)
    c710:	|      pea 1 <_start+0x1>
    c714:	|      moveq #48,d0
    c716:	|      add.l sp,d0
    c718:	|      move.l d0,-(sp)
    c71a:	|      jsr 10048 <getValueType>
    c720:	|      lea 12(sp),sp
    c724:	|      tst.w d0
    c726:	|  /-- bne.s c72e <builtIn_addScreenRegion+0x6a>
    c728:	|  |   moveq #1,d0
    c72a:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c72e:	|  \-> movea.l 56(sp),a0
    c732:	|      move.l 24(a0),d0
    c736:	|      move.l d0,-(sp)
    c738:	|      jsr 109ac <trimStack>
    c73e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c740:	|      movea.l 56(sp),a0
    c744:	|      move.l 24(a0),d0
    c748:	|      move.l d0,-(sp)
    c74a:	|      pea 1 <_start+0x1>
    c74e:	|      moveq #52,d0
    c750:	|      add.l sp,d0
    c752:	|      move.l d0,-(sp)
    c754:	|      jsr 10048 <getValueType>
    c75a:	|      lea 12(sp),sp
    c75e:	|      tst.w d0
    c760:	|  /-- bne.s c768 <builtIn_addScreenRegion+0xa4>
    c762:	|  |   moveq #1,d0
    c764:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c768:	|  \-> movea.l 56(sp),a0
    c76c:	|      move.l 24(a0),d0
    c770:	|      move.l d0,-(sp)
    c772:	|      jsr 109ac <trimStack>
    c778:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c77a:	|      movea.l 56(sp),a0
    c77e:	|      move.l 24(a0),d0
    c782:	|      move.l d0,-(sp)
    c784:	|      pea 1 <_start+0x1>
    c788:	|      lea 32(sp),a0
    c78c:	|      move.l a0,-(sp)
    c78e:	|      jsr 10048 <getValueType>
    c794:	|      lea 12(sp),sp
    c798:	|      tst.w d0
    c79a:	|  /-- bne.s c7a2 <builtIn_addScreenRegion+0xde>
    c79c:	|  |   moveq #1,d0
    c79e:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c7a2:	|  \-> movea.l 56(sp),a0
    c7a6:	|      move.l 24(a0),d0
    c7aa:	|      move.l d0,-(sp)
    c7ac:	|      jsr 109ac <trimStack>
    c7b2:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7b4:	|      movea.l 56(sp),a0
    c7b8:	|      move.l 24(a0),d0
    c7bc:	|      move.l d0,-(sp)
    c7be:	|      pea 1 <_start+0x1>
    c7c2:	|      lea 36(sp),a0
    c7c6:	|      move.l a0,-(sp)
    c7c8:	|      jsr 10048 <getValueType>
    c7ce:	|      lea 12(sp),sp
    c7d2:	|      tst.w d0
    c7d4:	|  /-- bne.s c7dc <builtIn_addScreenRegion+0x118>
    c7d6:	|  |   moveq #1,d0
    c7d8:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c7dc:	|  \-> movea.l 56(sp),a0
    c7e0:	|      move.l 24(a0),d0
    c7e4:	|      move.l d0,-(sp)
    c7e6:	|      jsr 109ac <trimStack>
    c7ec:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7ee:	|      movea.l 56(sp),a0
    c7f2:	|      move.l 24(a0),d0
    c7f6:	|      move.l d0,-(sp)
    c7f8:	|      pea 1 <_start+0x1>
    c7fc:	|      lea 40(sp),a0
    c800:	|      move.l a0,-(sp)
    c802:	|      jsr 10048 <getValueType>
    c808:	|      lea 12(sp),sp
    c80c:	|      tst.w d0
    c80e:	|  /-- bne.s c816 <builtIn_addScreenRegion+0x152>
    c810:	|  |   moveq #1,d0
    c812:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c816:	|  \-> movea.l 56(sp),a0
    c81a:	|      move.l 24(a0),d0
    c81e:	|      move.l d0,-(sp)
    c820:	|      jsr 109ac <trimStack>
    c826:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c828:	|      movea.l 56(sp),a0
    c82c:	|      move.l 24(a0),d0
    c830:	|      move.l d0,-(sp)
    c832:	|      pea 1 <_start+0x1>
    c836:	|      lea 44(sp),a0
    c83a:	|      move.l a0,-(sp)
    c83c:	|      jsr 10048 <getValueType>
    c842:	|      lea 12(sp),sp
    c846:	|      tst.w d0
    c848:	|  /-- bne.s c850 <builtIn_addScreenRegion+0x18c>
    c84a:	|  |   moveq #1,d0
    c84c:	+--|-- bra.w c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c850:	|  \-> movea.l 56(sp),a0
    c854:	|      move.l 24(a0),d0
    c858:	|      move.l d0,-(sp)
    c85a:	|      jsr 109ac <trimStack>
    c860:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c862:	|      movea.l 56(sp),a0
    c866:	|      move.l 24(a0),d0
    c86a:	|      move.l d0,-(sp)
    c86c:	|      pea 7 <_start+0x7>
    c870:	|      lea 24(sp),a0
    c874:	|      move.l a0,-(sp)
    c876:	|      jsr 10048 <getValueType>
    c87c:	|      lea 12(sp),sp
    c880:	|      tst.w d0
    c882:	|  /-- bne.s c888 <builtIn_addScreenRegion+0x1c4>
    c884:	|  |   moveq #1,d0
    c886:	+--|-- bra.s c8de <builtIn_addScreenRegion+0x21a>
	trimStack (fun -> stack);
    c888:	|  \-> movea.l 56(sp),a0
    c88c:	|      move.l 24(a0),d0
    c890:	|      move.l d0,-(sp)
    c892:	|      jsr 109ac <trimStack>
    c898:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    c89a:	|      move.l 16(sp),d5
    c89e:	|      move.l 20(sp),d4
    c8a2:	|      move.l 40(sp),d3
    c8a6:	|      move.l 44(sp),d2
    c8aa:	|      movea.l 24(sp),a1
    c8ae:	|      movea.l 28(sp),a0
    c8b2:	|      move.l 32(sp),d1
    c8b6:	|      move.l 36(sp),d0
    c8ba:	|      move.l d5,-(sp)
    c8bc:	|      move.l d4,-(sp)
    c8be:	|      move.l d3,-(sp)
    c8c0:	|      move.l d2,-(sp)
    c8c2:	|      move.l a1,-(sp)
    c8c4:	|      move.l a0,-(sp)
    c8c6:	|      move.l d1,-(sp)
    c8c8:	|      move.l d0,-(sp)
    c8ca:	|      jsr 10a2a <addScreenRegion>
    c8d0:	|      lea 32(sp),sp
    c8d4:	|      tst.w d0
    c8d6:	|  /-- beq.s c8dc <builtIn_addScreenRegion+0x218>
    c8d8:	|  |   moveq #2,d0
    c8da:	+--|-- bra.s c8de <builtIn_addScreenRegion+0x21a>
	return BR_ERROR;
    c8dc:	|  \-> moveq #1,d0

}
    c8de:	\----> movem.l (sp)+,d2-d5
    c8e2:	       lea 32(sp),sp
    c8e6:	       rts

0000c8e8 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    c8e8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c8ea:	       movea.l 12(sp),a0
    c8ee:	       move.l 24(a0),d0
    c8f2:	       move.l d0,-(sp)
    c8f4:	       pea 7 <_start+0x7>
    c8f8:	       move.l sp,d0
    c8fa:	       addq.l #8,d0
    c8fc:	       move.l d0,-(sp)
    c8fe:	       jsr 10048 <getValueType>
    c904:	       lea 12(sp),sp
    c908:	       tst.w d0
    c90a:	   /-- bne.s c910 <builtIn_removeScreenRegion+0x28>
    c90c:	   |   moveq #1,d0
    c90e:	/--|-- bra.s c930 <builtIn_removeScreenRegion+0x48>
	trimStack (fun -> stack);
    c910:	|  \-> movea.l 12(sp),a0
    c914:	|      move.l 24(a0),d0
    c918:	|      move.l d0,-(sp)
    c91a:	|      jsr 109ac <trimStack>
    c920:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    c922:	|      move.l (sp),d0
    c924:	|      move.l d0,-(sp)
    c926:	|      jsr 10c92 <removeScreenRegion>
    c92c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c92e:	|      moveq #2,d0
}
    c930:	\----> addq.l #4,sp
    c932:	       rts

0000c934 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    c934:	jsr 10e16 <showBoxes>
	return BR_CONTINUE;
    c93a:	moveq #2,d0
}
    c93c:	rts

0000c93e <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    c93e:	jsr 10b18 <killAllRegions>
	return BR_CONTINUE;
    c944:	moveq #2,d0
}
    c946:	rts

0000c948 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    c948:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    c94c:	       movea.l 24(sp),a0
    c950:	       move.l 24(a0),d0
    c954:	       move.l d0,-(sp)
    c956:	       jsr fcf4 <getCostumeFromVar>
    c95c:	       addq.l #4,sp
    c95e:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    c962:	   /-- bne.s c96a <builtIn_addCharacter+0x22>
    c964:	   |   moveq #1,d0
    c966:	/--|-- bra.w ca4e <builtIn_addCharacter+0x106>

	trimStack (fun -> stack);
    c96a:	|  \-> movea.l 24(sp),a0
    c96e:	|      move.l 24(a0),d0
    c972:	|      move.l d0,-(sp)
    c974:	|      jsr 109ac <trimStack>
    c97a:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c97c:	|      movea.l 24(sp),a0
    c980:	|      move.l 24(a0),d0
    c984:	|      move.l d0,-(sp)
    c986:	|      pea 1 <_start+0x1>
    c98a:	|      lea 12(sp),a0
    c98e:	|      move.l a0,-(sp)
    c990:	|      jsr 10048 <getValueType>
    c996:	|      lea 12(sp),sp
    c99a:	|      tst.w d0
    c99c:	|  /-- bne.s c9a4 <builtIn_addCharacter+0x5c>
    c99e:	|  |   moveq #1,d0
    c9a0:	+--|-- bra.w ca4e <builtIn_addCharacter+0x106>
	trimStack (fun -> stack);
    c9a4:	|  \-> movea.l 24(sp),a0
    c9a8:	|      move.l 24(a0),d0
    c9ac:	|      move.l d0,-(sp)
    c9ae:	|      jsr 109ac <trimStack>
    c9b4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c9b6:	|      movea.l 24(sp),a0
    c9ba:	|      move.l 24(a0),d0
    c9be:	|      move.l d0,-(sp)
    c9c0:	|      pea 1 <_start+0x1>
    c9c4:	|      moveq #16,d0
    c9c6:	|      add.l sp,d0
    c9c8:	|      move.l d0,-(sp)
    c9ca:	|      jsr 10048 <getValueType>
    c9d0:	|      lea 12(sp),sp
    c9d4:	|      tst.w d0
    c9d6:	|  /-- bne.s c9dc <builtIn_addCharacter+0x94>
    c9d8:	|  |   moveq #1,d0
    c9da:	+--|-- bra.s ca4e <builtIn_addCharacter+0x106>
	trimStack (fun -> stack);
    c9dc:	|  \-> movea.l 24(sp),a0
    c9e0:	|      move.l 24(a0),d0
    c9e4:	|      move.l d0,-(sp)
    c9e6:	|      jsr 109ac <trimStack>
    c9ec:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c9ee:	|      movea.l 24(sp),a0
    c9f2:	|      move.l 24(a0),d0
    c9f6:	|      move.l d0,-(sp)
    c9f8:	|      pea 7 <_start+0x7>
    c9fc:	|      lea 8(sp),a0
    ca00:	|      move.l a0,-(sp)
    ca02:	|      jsr 10048 <getValueType>
    ca08:	|      lea 12(sp),sp
    ca0c:	|      tst.w d0
    ca0e:	|  /-- bne.s ca14 <builtIn_addCharacter+0xcc>
    ca10:	|  |   moveq #1,d0
    ca12:	+--|-- bra.s ca4e <builtIn_addCharacter+0x106>
	trimStack (fun -> stack);
    ca14:	|  \-> movea.l 24(sp),a0
    ca18:	|      move.l 24(a0),d0
    ca1c:	|      move.l d0,-(sp)
    ca1e:	|      jsr 109ac <trimStack>
    ca24:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    ca26:	|      movea.l (sp),a0
    ca28:	|      move.l 4(sp),d1
    ca2c:	|      move.l 8(sp),d0
    ca30:	|      move.l 12(sp),-(sp)
    ca34:	|      move.l a0,-(sp)
    ca36:	|      move.l d1,-(sp)
    ca38:	|      move.l d0,-(sp)
    ca3a:	|      jsr 5616 <addPerson>
    ca40:	|      lea 16(sp),sp
    ca44:	|      tst.w d0
    ca46:	|  /-- beq.s ca4c <builtIn_addCharacter+0x104>
    ca48:	|  |   moveq #2,d0
    ca4a:	+--|-- bra.s ca4e <builtIn_addCharacter+0x106>
	return BR_ERROR;
    ca4c:	|  \-> moveq #1,d0
}
    ca4e:	\----> lea 16(sp),sp
    ca52:	       rts

0000ca54 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    ca54:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ca56:	       movea.l 12(sp),a0
    ca5a:	       move.l 24(a0),d0
    ca5e:	       move.l d0,-(sp)
    ca60:	       pea 7 <_start+0x7>
    ca64:	       move.l sp,d0
    ca66:	       addq.l #8,d0
    ca68:	       move.l d0,-(sp)
    ca6a:	       jsr 10048 <getValueType>
    ca70:	       lea 12(sp),sp
    ca74:	       tst.w d0
    ca76:	   /-- bne.s ca7c <builtIn_hideCharacter+0x28>
    ca78:	   |   moveq #1,d0
    ca7a:	/--|-- bra.s ca9e <builtIn_hideCharacter+0x4a>
	trimStack (fun -> stack);
    ca7c:	|  \-> movea.l 12(sp),a0
    ca80:	|      move.l 24(a0),d0
    ca84:	|      move.l d0,-(sp)
    ca86:	|      jsr 109ac <trimStack>
    ca8c:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    ca8e:	|      move.l (sp),d0
    ca90:	|      move.l d0,-(sp)
    ca92:	|      clr.l -(sp)
    ca94:	|      jsr 76c2 <setShown>
    ca9a:	|      addq.l #8,sp
	return BR_CONTINUE;
    ca9c:	|      moveq #2,d0
}
    ca9e:	\----> addq.l #4,sp
    caa0:	       rts

0000caa2 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    caa2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    caa4:	       movea.l 12(sp),a0
    caa8:	       move.l 24(a0),d0
    caac:	       move.l d0,-(sp)
    caae:	       pea 7 <_start+0x7>
    cab2:	       move.l sp,d0
    cab4:	       addq.l #8,d0
    cab6:	       move.l d0,-(sp)
    cab8:	       jsr 10048 <getValueType>
    cabe:	       lea 12(sp),sp
    cac2:	       tst.w d0
    cac4:	   /-- bne.s caca <builtIn_showCharacter+0x28>
    cac6:	   |   moveq #1,d0
    cac8:	/--|-- bra.s caee <builtIn_showCharacter+0x4c>
	trimStack (fun -> stack);
    caca:	|  \-> movea.l 12(sp),a0
    cace:	|      move.l 24(a0),d0
    cad2:	|      move.l d0,-(sp)
    cad4:	|      jsr 109ac <trimStack>
    cada:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    cadc:	|      move.l (sp),d0
    cade:	|      move.l d0,-(sp)
    cae0:	|      pea 1 <_start+0x1>
    cae4:	|      jsr 76c2 <setShown>
    caea:	|      addq.l #8,sp
	return BR_CONTINUE;
    caec:	|      moveq #2,d0
}
    caee:	\----> addq.l #4,sp
    caf0:	       rts

0000caf2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    caf2:	jsr 33e6 <killSpeechTimers>
	killMostPeople ();
    caf8:	jsr 663a <killMostPeople>
	return BR_CONTINUE;
    cafe:	moveq #2,d0
}
    cb00:	rts

0000cb02 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    cb02:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cb04:	       movea.l 16(sp),a0
    cb08:	       move.l 24(a0),d0
    cb0c:	       move.l d0,-(sp)
    cb0e:	       pea 1 <_start+0x1>
    cb12:	       move.l sp,d0
    cb14:	       addq.l #8,d0
    cb16:	       move.l d0,-(sp)
    cb18:	       jsr 10048 <getValueType>
    cb1e:	       lea 12(sp),sp
    cb22:	       tst.w d0
    cb24:	   /-- bne.s cb2a <builtIn_setCharacterDrawMode+0x28>
    cb26:	   |   moveq #1,d0
    cb28:	/--|-- bra.s cb88 <builtIn_setCharacterDrawMode+0x86>
	trimStack (fun -> stack);
    cb2a:	|  \-> movea.l 16(sp),a0
    cb2e:	|      move.l 24(a0),d0
    cb32:	|      move.l d0,-(sp)
    cb34:	|      jsr 109ac <trimStack>
    cb3a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb3c:	|      movea.l 16(sp),a0
    cb40:	|      move.l 24(a0),d0
    cb44:	|      move.l d0,-(sp)
    cb46:	|      pea 7 <_start+0x7>
    cb4a:	|      moveq #12,d0
    cb4c:	|      add.l sp,d0
    cb4e:	|      move.l d0,-(sp)
    cb50:	|      jsr 10048 <getValueType>
    cb56:	|      lea 12(sp),sp
    cb5a:	|      tst.w d0
    cb5c:	|  /-- bne.s cb62 <builtIn_setCharacterDrawMode+0x60>
    cb5e:	|  |   moveq #1,d0
    cb60:	+--|-- bra.s cb88 <builtIn_setCharacterDrawMode+0x86>
	trimStack (fun -> stack);
    cb62:	|  \-> movea.l 16(sp),a0
    cb66:	|      move.l 24(a0),d0
    cb6a:	|      move.l d0,-(sp)
    cb6c:	|      jsr 109ac <trimStack>
    cb72:	|      addq.l #4,sp
	setDrawMode (di, obj);
    cb74:	|      move.l 4(sp),d1
    cb78:	|      move.l (sp),d0
    cb7a:	|      move.l d1,-(sp)
    cb7c:	|      move.l d0,-(sp)
    cb7e:	|      jsr 70f0 <setDrawMode>
    cb84:	|      addq.l #8,sp
	return BR_CONTINUE;
    cb86:	|      moveq #2,d0
}
    cb88:	\----> addq.l #8,sp
    cb8a:	       rts

0000cb8c <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    cb8c:	pea 158b3 <zbuffer.c.d110ca03+0x36d>
    cb92:	jsr 12018 <KPrintF>
    cb98:	addq.l #4,sp
	return BR_CONTINUE;
    cb9a:	moveq #2,d0
}
    cb9c:	rts

0000cb9e <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    cb9e:	pea 158e6 <zbuffer.c.d110ca03+0x3a0>
    cba4:	jsr 12018 <KPrintF>
    cbaa:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    cbac:	moveq #2,d0
}
    cbae:	rts

0000cbb0 <builtIn_setScale>:

builtIn(setScale)
{
    cbb0:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbb2:	       movea.l 16(sp),a0
    cbb6:	       move.l 24(a0),d0
    cbba:	       move.l d0,-(sp)
    cbbc:	       pea 1 <_start+0x1>
    cbc0:	       move.l sp,d0
    cbc2:	       addq.l #8,d0
    cbc4:	       move.l d0,-(sp)
    cbc6:	       jsr 10048 <getValueType>
    cbcc:	       lea 12(sp),sp
    cbd0:	       tst.w d0
    cbd2:	   /-- bne.s cbd8 <builtIn_setScale+0x28>
    cbd4:	   |   moveq #1,d0
    cbd6:	/--|-- bra.s cc3e <builtIn_setScale+0x8e>
	trimStack (fun -> stack);
    cbd8:	|  \-> movea.l 16(sp),a0
    cbdc:	|      move.l 24(a0),d0
    cbe0:	|      move.l d0,-(sp)
    cbe2:	|      jsr 109ac <trimStack>
    cbe8:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbea:	|      movea.l 16(sp),a0
    cbee:	|      move.l 24(a0),d0
    cbf2:	|      move.l d0,-(sp)
    cbf4:	|      pea 1 <_start+0x1>
    cbf8:	|      moveq #12,d0
    cbfa:	|      add.l sp,d0
    cbfc:	|      move.l d0,-(sp)
    cbfe:	|      jsr 10048 <getValueType>
    cc04:	|      lea 12(sp),sp
    cc08:	|      tst.w d0
    cc0a:	|  /-- bne.s cc10 <builtIn_setScale+0x60>
    cc0c:	|  |   moveq #1,d0
    cc0e:	+--|-- bra.s cc3e <builtIn_setScale+0x8e>
	trimStack (fun -> stack);
    cc10:	|  \-> movea.l 16(sp),a0
    cc14:	|      move.l 24(a0),d0
    cc18:	|      move.l d0,-(sp)
    cc1a:	|      jsr 109ac <trimStack>
    cc20:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    cc22:	|      move.l (sp),d0
    cc24:	|      move.l d0,d0
    cc26:	|      movea.w d0,a1
    cc28:	|      move.l 4(sp),d0
    cc2c:	|      move.l d0,d0
    cc2e:	|      movea.w d0,a0
    cc30:	|      move.l a1,-(sp)
    cc32:	|      move.l a0,-(sp)
    cc34:	|      jsr 769a <setScale>
    cc3a:	|      addq.l #8,sp
	return BR_CONTINUE;
    cc3c:	|      moveq #2,d0
}
    cc3e:	\----> addq.l #8,sp
    cc40:	       rts

0000cc42 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    cc42:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc44:	       movea.l 12(sp),a0
    cc48:	       move.l 24(a0),d0
    cc4c:	       move.l d0,-(sp)
    cc4e:	       pea 7 <_start+0x7>
    cc52:	       move.l sp,d0
    cc54:	       addq.l #8,d0
    cc56:	       move.l d0,-(sp)
    cc58:	       jsr 10048 <getValueType>
    cc5e:	       lea 12(sp),sp
    cc62:	       tst.w d0
    cc64:	   /-- bne.s cc6a <builtIn_stopCharacter+0x28>
    cc66:	   |   moveq #1,d0
    cc68:	/--|-- bra.s cca6 <builtIn_stopCharacter+0x64>
	trimStack (fun -> stack);
    cc6a:	|  \-> movea.l 12(sp),a0
    cc6e:	|      move.l 24(a0),d0
    cc72:	|      move.l d0,-(sp)
    cc74:	|      jsr 109ac <trimStack>
    cc7a:	|      addq.l #4,sp

	// Return value
	setVariable (fun -> reg, SVT_INT, stopPerson (obj));
    cc7c:	|      move.l (sp),d0
    cc7e:	|      move.l d0,-(sp)
    cc80:	|      jsr 77ce <stopPerson>
    cc86:	|      addq.l #4,sp
    cc88:	|      movea.w d0,a0
    cc8a:	|      movea.l 12(sp),a1
    cc8e:	|      move.l 28(a1),d0
    cc92:	|      move.l a0,-(sp)
    cc94:	|      pea 1 <_start+0x1>
    cc98:	|      move.l d0,-(sp)
    cc9a:	|      jsr 1091a <setVariable>
    cca0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cca4:	|      moveq #2,d0
}
    cca6:	\----> addq.l #4,sp
    cca8:	       rts

0000ccaa <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (fun -> reg, SVT_INT, 1);
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    ccaa:	pea 15920 <zbuffer.c.d110ca03+0x3da>
    ccb0:	jsr 12018 <KPrintF>
    ccb6:	addq.l #4,sp
	return BR_CONTINUE;
    ccb8:	moveq #2,d0
}
    ccba:	rts

0000ccbc <builtIn_animate>:

builtIn(animate)
{
    ccbc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ccbe:	       movea.l 16(sp),a0
    ccc2:	       move.l 24(a0),d0
    ccc6:	       move.l d0,-(sp)
    ccc8:	       jsr 10522 <getAnimationFromVar>
    ccce:	       addq.l #4,sp
    ccd0:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    ccd4:	   /-- bne.s ccdc <builtIn_animate+0x20>
    ccd6:	   |   moveq #1,d0
    ccd8:	/--|-- bra.w cd60 <builtIn_animate+0xa4>
	trimStack (fun -> stack);
    ccdc:	|  \-> movea.l 16(sp),a0
    cce0:	|      move.l 24(a0),d0
    cce4:	|      move.l d0,-(sp)
    cce6:	|      jsr 109ac <trimStack>
    ccec:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ccee:	|      movea.l 16(sp),a0
    ccf2:	|      move.l 24(a0),d0
    ccf6:	|      move.l d0,-(sp)
    ccf8:	|      pea 7 <_start+0x7>
    ccfc:	|      move.l sp,d0
    ccfe:	|      addq.l #8,d0
    cd00:	|      move.l d0,-(sp)
    cd02:	|      jsr 10048 <getValueType>
    cd08:	|      lea 12(sp),sp
    cd0c:	|      tst.w d0
    cd0e:	|  /-- bne.s cd14 <builtIn_animate+0x58>
    cd10:	|  |   moveq #1,d0
    cd12:	+--|-- bra.s cd60 <builtIn_animate+0xa4>
	trimStack (fun -> stack);
    cd14:	|  \-> movea.l 16(sp),a0
    cd18:	|      move.l 24(a0),d0
    cd1c:	|      move.l d0,-(sp)
    cd1e:	|      jsr 109ac <trimStack>
    cd24:	|      addq.l #4,sp
	animatePerson (obj, pp);
    cd26:	|      move.l (sp),d0
    cd28:	|      move.l 4(sp),-(sp)
    cd2c:	|      move.l d0,-(sp)
    cd2e:	|      jsr 5888 <animatePerson>
    cd34:	|      addq.l #8,sp
	setVariable (fun -> reg, SVT_INT, timeForAnim (pp));
    cd36:	|      move.l 4(sp),-(sp)
    cd3a:	|      jsr 7822 <timeForAnim>
    cd40:	|      addq.l #4,sp
    cd42:	|      move.l d0,d1
    cd44:	|      movea.l 16(sp),a0
    cd48:	|      move.l 28(a0),d0
    cd4c:	|      move.l d1,-(sp)
    cd4e:	|      pea 1 <_start+0x1>
    cd52:	|      move.l d0,-(sp)
    cd54:	|      jsr 1091a <setVariable>
    cd5a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cd5e:	|      moveq #2,d0
}
    cd60:	\----> addq.l #8,sp
    cd62:	       rts

0000cd64 <builtIn_setCostume>:

builtIn(setCostume)
{
    cd64:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    cd66:	       movea.l 16(sp),a0
    cd6a:	       move.l 24(a0),d0
    cd6e:	       move.l d0,-(sp)
    cd70:	       jsr fcf4 <getCostumeFromVar>
    cd76:	       addq.l #4,sp
    cd78:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    cd7c:	   /-- bne.s cd82 <builtIn_setCostume+0x1e>
    cd7e:	   |   moveq #1,d0
    cd80:	/--|-- bra.s cdde <builtIn_setCostume+0x7a>
	trimStack (fun -> stack);
    cd82:	|  \-> movea.l 16(sp),a0
    cd86:	|      move.l 24(a0),d0
    cd8a:	|      move.l d0,-(sp)
    cd8c:	|      jsr 109ac <trimStack>
    cd92:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd94:	|      movea.l 16(sp),a0
    cd98:	|      move.l 24(a0),d0
    cd9c:	|      move.l d0,-(sp)
    cd9e:	|      pea 7 <_start+0x7>
    cda2:	|      move.l sp,d0
    cda4:	|      addq.l #8,d0
    cda6:	|      move.l d0,-(sp)
    cda8:	|      jsr 10048 <getValueType>
    cdae:	|      lea 12(sp),sp
    cdb2:	|      tst.w d0
    cdb4:	|  /-- bne.s cdba <builtIn_setCostume+0x56>
    cdb6:	|  |   moveq #1,d0
    cdb8:	+--|-- bra.s cdde <builtIn_setCostume+0x7a>
	trimStack (fun -> stack);
    cdba:	|  \-> movea.l 16(sp),a0
    cdbe:	|      move.l 24(a0),d0
    cdc2:	|      move.l d0,-(sp)
    cdc4:	|      jsr 109ac <trimStack>
    cdca:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    cdcc:	|      move.l (sp),d0
    cdce:	|      move.l 4(sp),-(sp)
    cdd2:	|      move.l d0,-(sp)
    cdd4:	|      jsr 58d2 <animatePersonUsingPersona>
    cdda:	|      addq.l #8,sp
	return BR_CONTINUE;
    cddc:	|      moveq #2,d0
}
    cdde:	\----> addq.l #8,sp
    cde0:	       rts

0000cde2 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    cde2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cde4:	       movea.l 16(sp),a0
    cde8:	       move.l 24(a0),d0
    cdec:	       move.l d0,-(sp)
    cdee:	       pea 1 <_start+0x1>
    cdf2:	       move.l sp,d0
    cdf4:	       addq.l #8,d0
    cdf6:	       move.l d0,-(sp)
    cdf8:	       jsr 10048 <getValueType>
    cdfe:	       lea 12(sp),sp
    ce02:	       tst.w d0
    ce04:	   /-- bne.s ce0a <builtIn_floatCharacter+0x28>
    ce06:	   |   moveq #1,d0
    ce08:	/--|-- bra.s ce84 <builtIn_floatCharacter+0xa2>
	trimStack (fun -> stack);
    ce0a:	|  \-> movea.l 16(sp),a0
    ce0e:	|      move.l 24(a0),d0
    ce12:	|      move.l d0,-(sp)
    ce14:	|      jsr 109ac <trimStack>
    ce1a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce1c:	|      movea.l 16(sp),a0
    ce20:	|      move.l 24(a0),d0
    ce24:	|      move.l d0,-(sp)
    ce26:	|      pea 7 <_start+0x7>
    ce2a:	|      moveq #12,d0
    ce2c:	|      add.l sp,d0
    ce2e:	|      move.l d0,-(sp)
    ce30:	|      jsr 10048 <getValueType>
    ce36:	|      lea 12(sp),sp
    ce3a:	|      tst.w d0
    ce3c:	|  /-- bne.s ce42 <builtIn_floatCharacter+0x60>
    ce3e:	|  |   moveq #1,d0
    ce40:	+--|-- bra.s ce84 <builtIn_floatCharacter+0xa2>
	trimStack (fun -> stack);
    ce42:	|  \-> movea.l 16(sp),a0
    ce46:	|      move.l 24(a0),d0
    ce4a:	|      move.l d0,-(sp)
    ce4c:	|      jsr 109ac <trimStack>
    ce52:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, floatCharacter (di, obj));
    ce54:	|      move.l 4(sp),d1
    ce58:	|      move.l (sp),d0
    ce5a:	|      move.l d1,-(sp)
    ce5c:	|      move.l d0,-(sp)
    ce5e:	|      jsr 61fc <floatCharacter>
    ce64:	|      addq.l #8,sp
    ce66:	|      movea.w d0,a0
    ce68:	|      movea.l 16(sp),a1
    ce6c:	|      move.l 28(a1),d0
    ce70:	|      move.l a0,-(sp)
    ce72:	|      pea 1 <_start+0x1>
    ce76:	|      move.l d0,-(sp)
    ce78:	|      jsr 1091a <setVariable>
    ce7e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ce82:	|      moveq #2,d0
}
    ce84:	\----> addq.l #8,sp
    ce86:	       rts

0000ce88 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    ce88:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ce8a:	       movea.l 16(sp),a0
    ce8e:	       move.l 24(a0),d0
    ce92:	       move.l d0,-(sp)
    ce94:	       pea 1 <_start+0x1>
    ce98:	       move.l sp,d0
    ce9a:	       addq.l #8,d0
    ce9c:	       move.l d0,-(sp)
    ce9e:	       jsr 10048 <getValueType>
    cea4:	       lea 12(sp),sp
    cea8:	       tst.w d0
    ceaa:	   /-- bne.s ceb0 <builtIn_setCharacterWalkSpeed+0x28>
    ceac:	   |   moveq #1,d0
    ceae:	/--|-- bra.s cf2a <builtIn_setCharacterWalkSpeed+0xa2>
	trimStack (fun -> stack);
    ceb0:	|  \-> movea.l 16(sp),a0
    ceb4:	|      move.l 24(a0),d0
    ceb8:	|      move.l d0,-(sp)
    ceba:	|      jsr 109ac <trimStack>
    cec0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cec2:	|      movea.l 16(sp),a0
    cec6:	|      move.l 24(a0),d0
    ceca:	|      move.l d0,-(sp)
    cecc:	|      pea 7 <_start+0x7>
    ced0:	|      moveq #12,d0
    ced2:	|      add.l sp,d0
    ced4:	|      move.l d0,-(sp)
    ced6:	|      jsr 10048 <getValueType>
    cedc:	|      lea 12(sp),sp
    cee0:	|      tst.w d0
    cee2:	|  /-- bne.s cee8 <builtIn_setCharacterWalkSpeed+0x60>
    cee4:	|  |   moveq #1,d0
    cee6:	+--|-- bra.s cf2a <builtIn_setCharacterWalkSpeed+0xa2>
	trimStack (fun -> stack);
    cee8:	|  \-> movea.l 16(sp),a0
    ceec:	|      move.l 24(a0),d0
    cef0:	|      move.l d0,-(sp)
    cef2:	|      jsr 109ac <trimStack>
    cef8:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    cefa:	|      move.l 4(sp),d1
    cefe:	|      move.l (sp),d0
    cf00:	|      move.l d1,-(sp)
    cf02:	|      move.l d0,-(sp)
    cf04:	|      jsr 7636 <setCharacterWalkSpeed>
    cf0a:	|      addq.l #8,sp
    cf0c:	|      movea.w d0,a0
    cf0e:	|      movea.l 16(sp),a1
    cf12:	|      move.l 28(a1),d0
    cf16:	|      move.l a0,-(sp)
    cf18:	|      pea 1 <_start+0x1>
    cf1c:	|      move.l d0,-(sp)
    cf1e:	|      jsr 1091a <setVariable>
    cf24:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cf28:	|      moveq #2,d0
}
    cf2a:	\----> addq.l #8,sp
    cf2c:	       rts

0000cf2e <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    cf2e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf30:	       movea.l 16(sp),a0
    cf34:	       move.l 24(a0),d0
    cf38:	       move.l d0,-(sp)
    cf3a:	       pea 1 <_start+0x1>
    cf3e:	       move.l sp,d0
    cf40:	       addq.l #8,d0
    cf42:	       move.l d0,-(sp)
    cf44:	       jsr 10048 <getValueType>
    cf4a:	       lea 12(sp),sp
    cf4e:	       tst.w d0
    cf50:	   /-- bne.s cf56 <builtIn_turnCharacter+0x28>
    cf52:	   |   moveq #1,d0
    cf54:	/--|-- bra.s cfd0 <builtIn_turnCharacter+0xa2>
	trimStack (fun -> stack);
    cf56:	|  \-> movea.l 16(sp),a0
    cf5a:	|      move.l 24(a0),d0
    cf5e:	|      move.l d0,-(sp)
    cf60:	|      jsr 109ac <trimStack>
    cf66:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf68:	|      movea.l 16(sp),a0
    cf6c:	|      move.l 24(a0),d0
    cf70:	|      move.l d0,-(sp)
    cf72:	|      pea 7 <_start+0x7>
    cf76:	|      moveq #12,d0
    cf78:	|      add.l sp,d0
    cf7a:	|      move.l d0,-(sp)
    cf7c:	|      jsr 10048 <getValueType>
    cf82:	|      lea 12(sp),sp
    cf86:	|      tst.w d0
    cf88:	|  /-- bne.s cf8e <builtIn_turnCharacter+0x60>
    cf8a:	|  |   moveq #1,d0
    cf8c:	+--|-- bra.s cfd0 <builtIn_turnCharacter+0xa2>
	trimStack (fun -> stack);
    cf8e:	|  \-> movea.l 16(sp),a0
    cf92:	|      move.l 24(a0),d0
    cf96:	|      move.l d0,-(sp)
    cf98:	|      jsr 109ac <trimStack>
    cf9e:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    cfa0:	|      move.l (sp),d1
    cfa2:	|      move.l 4(sp),d0
    cfa6:	|      move.l d1,-(sp)
    cfa8:	|      move.l d0,-(sp)
    cfaa:	|      jsr 78da <turnPersonToFace>
    cfb0:	|      addq.l #8,sp
    cfb2:	|      movea.w d0,a0
    cfb4:	|      movea.l 16(sp),a1
    cfb8:	|      move.l 28(a1),d0
    cfbc:	|      move.l a0,-(sp)
    cfbe:	|      pea 1 <_start+0x1>
    cfc2:	|      move.l d0,-(sp)
    cfc4:	|      jsr 1091a <setVariable>
    cfca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cfce:	|      moveq #2,d0
}
    cfd0:	\----> addq.l #8,sp
    cfd2:	       rts

0000cfd4 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    cfd4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cfd6:	       movea.l 16(sp),a0
    cfda:	       move.l 24(a0),d0
    cfde:	       move.l d0,-(sp)
    cfe0:	       pea 1 <_start+0x1>
    cfe4:	       move.l sp,d0
    cfe6:	       addq.l #8,d0
    cfe8:	       move.l d0,-(sp)
    cfea:	       jsr 10048 <getValueType>
    cff0:	       lea 12(sp),sp
    cff4:	       tst.w d0
    cff6:	   /-- bne.s cffc <builtIn_setCharacterExtra+0x28>
    cff8:	   |   moveq #1,d0
    cffa:	/--|-- bra.s d076 <builtIn_setCharacterExtra+0xa2>
	trimStack (fun -> stack);
    cffc:	|  \-> movea.l 16(sp),a0
    d000:	|      move.l 24(a0),d0
    d004:	|      move.l d0,-(sp)
    d006:	|      jsr 109ac <trimStack>
    d00c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d00e:	|      movea.l 16(sp),a0
    d012:	|      move.l 24(a0),d0
    d016:	|      move.l d0,-(sp)
    d018:	|      pea 7 <_start+0x7>
    d01c:	|      moveq #12,d0
    d01e:	|      add.l sp,d0
    d020:	|      move.l d0,-(sp)
    d022:	|      jsr 10048 <getValueType>
    d028:	|      lea 12(sp),sp
    d02c:	|      tst.w d0
    d02e:	|  /-- bne.s d034 <builtIn_setCharacterExtra+0x60>
    d030:	|  |   moveq #1,d0
    d032:	+--|-- bra.s d076 <builtIn_setCharacterExtra+0xa2>
	trimStack (fun -> stack);
    d034:	|  \-> movea.l 16(sp),a0
    d038:	|      move.l 24(a0),d0
    d03c:	|      move.l d0,-(sp)
    d03e:	|      jsr 109ac <trimStack>
    d044:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, setPersonExtra (obj, di));
    d046:	|      move.l (sp),d1
    d048:	|      move.l 4(sp),d0
    d04c:	|      move.l d1,-(sp)
    d04e:	|      move.l d0,-(sp)
    d050:	|      jsr 7664 <setPersonExtra>
    d056:	|      addq.l #8,sp
    d058:	|      movea.w d0,a0
    d05a:	|      movea.l 16(sp),a1
    d05e:	|      move.l 28(a1),d0
    d062:	|      move.l a0,-(sp)
    d064:	|      pea 1 <_start+0x1>
    d068:	|      move.l d0,-(sp)
    d06a:	|      jsr 1091a <setVariable>
    d070:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d074:	|      moveq #2,d0
}
    d076:	\----> addq.l #8,sp
    d078:	       rts

0000d07a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    d07a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d07c:	       movea.l 12(sp),a0
    d080:	       move.l 24(a0),d0
    d084:	       move.l d0,-(sp)
    d086:	       pea 7 <_start+0x7>
    d08a:	       move.l sp,d0
    d08c:	       addq.l #8,d0
    d08e:	       move.l d0,-(sp)
    d090:	       jsr 10048 <getValueType>
    d096:	       lea 12(sp),sp
    d09a:	       tst.w d0
    d09c:	   /-- bne.s d0a2 <builtIn_removeCharacter+0x28>
    d09e:	   |   moveq #1,d0
    d0a0:	/--|-- bra.s d0c2 <builtIn_removeCharacter+0x48>
	trimStack (fun -> stack);
    d0a2:	|  \-> movea.l 12(sp),a0
    d0a6:	|      move.l 24(a0),d0
    d0aa:	|      move.l d0,-(sp)
    d0ac:	|      jsr 109ac <trimStack>
    d0b2:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    d0b4:	|      move.l (sp),d0
    d0b6:	|      move.l d0,-(sp)
    d0b8:	|      jsr 6994 <removeOneCharacter>
    d0be:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0c0:	|      moveq #2,d0
}
    d0c2:	\----> addq.l #4,sp
    d0c4:	       rts

0000d0c6 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    d0c6:	                lea -28(sp),sp
    d0ca:	                move.l d2,-(sp)
    d0cc:	                move.l 44(sp),d1
    d0d0:	                move.l 48(sp),d0
    d0d4:	                move.w d1,d1
    d0d6:	                move.w d1,6(sp)
    d0da:	                move.w d0,d0
    d0dc:	                move.w d0,4(sp)
	switch (numParams) {
    d0e0:	                moveq #2,d0
    d0e2:	                cmp.l 36(sp),d0
    d0e6:	      /-------- beq.w d22e <moveChr+0x168>
    d0ea:	      |         moveq #3,d0
    d0ec:	      |         cmp.l 36(sp),d0
    d0f0:	/-----|-------- bne.w d366 <moveChr+0x2a0>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0f4:	|     |         movea.l 40(sp),a0
    d0f8:	|     |         move.l 24(a0),d0
    d0fc:	|     |         move.l d0,-(sp)
    d0fe:	|     |         pea 1 <_start+0x1>
    d102:	|     |         lea 20(sp),a0
    d106:	|     |         move.l a0,-(sp)
    d108:	|     |         jsr 10048 <getValueType>
    d10e:	|     |         lea 12(sp),sp
    d112:	|     |         tst.w d0
    d114:	|     |     /-- bne.s d11c <moveChr+0x56>
    d116:	|     |     |   moveq #1,d0
    d118:	|  /--|-----|-- bra.w d376 <moveChr+0x2b0>
			trimStack (fun -> stack);
    d11c:	|  |  |     \-> movea.l 40(sp),a0
    d120:	|  |  |         move.l 24(a0),d0
    d124:	|  |  |         move.l d0,-(sp)
    d126:	|  |  |         jsr 109ac <trimStack>
    d12c:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d12e:	|  |  |         movea.l 40(sp),a0
    d132:	|  |  |         move.l 24(a0),d0
    d136:	|  |  |         move.l d0,-(sp)
    d138:	|  |  |         pea 1 <_start+0x1>
    d13c:	|  |  |         lea 24(sp),a0
    d140:	|  |  |         move.l a0,-(sp)
    d142:	|  |  |         jsr 10048 <getValueType>
    d148:	|  |  |         lea 12(sp),sp
    d14c:	|  |  |         tst.w d0
    d14e:	|  |  |     /-- bne.s d156 <moveChr+0x90>
    d150:	|  |  |     |   moveq #1,d0
    d152:	|  +--|-----|-- bra.w d376 <moveChr+0x2b0>
			trimStack (fun -> stack);
    d156:	|  |  |     \-> movea.l 40(sp),a0
    d15a:	|  |  |         move.l 24(a0),d0
    d15e:	|  |  |         move.l d0,-(sp)
    d160:	|  |  |         jsr 109ac <trimStack>
    d166:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d168:	|  |  |         movea.l 40(sp),a0
    d16c:	|  |  |         move.l 24(a0),d0
    d170:	|  |  |         move.l d0,-(sp)
    d172:	|  |  |         pea 7 <_start+0x7>
    d176:	|  |  |         lea 16(sp),a0
    d17a:	|  |  |         move.l a0,-(sp)
    d17c:	|  |  |         jsr 10048 <getValueType>
    d182:	|  |  |         lea 12(sp),sp
    d186:	|  |  |         tst.w d0
    d188:	|  |  |     /-- bne.s d190 <moveChr+0xca>
    d18a:	|  |  |     |   moveq #1,d0
    d18c:	|  +--|-----|-- bra.w d376 <moveChr+0x2b0>
			trimStack (fun -> stack);
    d190:	|  |  |     \-> movea.l 40(sp),a0
    d194:	|  |  |         move.l 24(a0),d0
    d198:	|  |  |         move.l d0,-(sp)
    d19a:	|  |  |         jsr 109ac <trimStack>
    d1a0:	|  |  |         addq.l #4,sp

			if (force) {
    d1a2:	|  |  |         tst.w 6(sp)
    d1a6:	|  |  |     /-- beq.s d1d6 <moveChr+0x110>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d1a8:	|  |  |     |   movea.l 8(sp),a0
    d1ac:	|  |  |     |   move.l 12(sp),d1
    d1b0:	|  |  |     |   move.l 16(sp),d0
    d1b4:	|  |  |     |   pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
    d1b8:	|  |  |     |   move.l 44(sp),-(sp)
    d1bc:	|  |  |     |   move.l a0,-(sp)
    d1be:	|  |  |     |   move.l d1,-(sp)
    d1c0:	|  |  |     |   move.l d0,-(sp)
    d1c2:	|  |  |     |   jsr 6220 <forceWalkingPerson>
    d1c8:	|  |  |     |   lea 20(sp),sp
    d1cc:	|  |  |     |   tst.w d0
    d1ce:	|  |  |  /--|-- beq.s d228 <moveChr+0x162>
    d1d0:	|  |  |  |  |   moveq #3,d0
    d1d2:	|  +--|--|--|-- bra.w d376 <moveChr+0x2b0>
			} else if (immediate) {
    d1d6:	|  |  |  |  \-> tst.w 4(sp)
    d1da:	|  |  |  |  /-- beq.s d1fa <moveChr+0x134>
				jumpPerson (x, y, objectNumber);
    d1dc:	|  |  |  |  |   movea.l 8(sp),a0
    d1e0:	|  |  |  |  |   move.l 12(sp),d1
    d1e4:	|  |  |  |  |   move.l 16(sp),d0
    d1e8:	|  |  |  |  |   move.l a0,-(sp)
    d1ea:	|  |  |  |  |   move.l d1,-(sp)
    d1ec:	|  |  |  |  |   move.l d0,-(sp)
    d1ee:	|  |  |  |  |   jsr 6528 <jumpPerson>
    d1f4:	|  |  |  |  |   lea 12(sp),sp
    d1f8:	|  |  |  +--|-- bra.s d228 <moveChr+0x162>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d1fa:	|  |  |  |  \-> movea.l 8(sp),a0
    d1fe:	|  |  |  |      move.l 12(sp),d1
    d202:	|  |  |  |      move.l 16(sp),d0
    d206:	|  |  |  |      pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
    d20a:	|  |  |  |      move.l 44(sp),-(sp)
    d20e:	|  |  |  |      move.l a0,-(sp)
    d210:	|  |  |  |      move.l d1,-(sp)
    d212:	|  |  |  |      move.l d0,-(sp)
    d214:	|  |  |  |      jsr 66f8 <makeWalkingPerson>
    d21a:	|  |  |  |      lea 20(sp),sp
    d21e:	|  |  |  |      tst.w d0
    d220:	|  |  |  +----- beq.s d228 <moveChr+0x162>
    d222:	|  |  |  |      moveq #3,d0
    d224:	|  +--|--|----- bra.w d376 <moveChr+0x2b0>
			}
			return BR_CONTINUE;
    d228:	|  |  |  \----> moveq #2,d0
    d22a:	|  +--|-------- bra.w d376 <moveChr+0x2b0>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d22e:	|  |  \-------> movea.l 40(sp),a0
    d232:	|  |            move.l 24(a0),d0
    d236:	|  |            move.l d0,-(sp)
    d238:	|  |            pea 7 <_start+0x7>
    d23c:	|  |            moveq #32,d0
    d23e:	|  |            add.l sp,d0
    d240:	|  |            move.l d0,-(sp)
    d242:	|  |            jsr 10048 <getValueType>
    d248:	|  |            lea 12(sp),sp
    d24c:	|  |            tst.w d0
    d24e:	|  |        /-- bne.s d256 <moveChr+0x190>
    d250:	|  |        |   moveq #1,d0
    d252:	|  +--------|-- bra.w d376 <moveChr+0x2b0>
			trimStack (fun -> stack);
    d256:	|  |        \-> movea.l 40(sp),a0
    d25a:	|  |            move.l 24(a0),d0
    d25e:	|  |            move.l d0,-(sp)
    d260:	|  |            jsr 109ac <trimStack>
    d266:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d268:	|  |            movea.l 40(sp),a0
    d26c:	|  |            move.l 24(a0),d0
    d270:	|  |            move.l d0,-(sp)
    d272:	|  |            pea 7 <_start+0x7>
    d276:	|  |            lea 28(sp),a0
    d27a:	|  |            move.l a0,-(sp)
    d27c:	|  |            jsr 10048 <getValueType>
    d282:	|  |            lea 12(sp),sp
    d286:	|  |            tst.w d0
    d288:	|  |        /-- bne.s d290 <moveChr+0x1ca>
    d28a:	|  |        |   moveq #1,d0
    d28c:	|  +--------|-- bra.w d376 <moveChr+0x2b0>
			trimStack (fun -> stack);
    d290:	|  |        \-> movea.l 40(sp),a0
    d294:	|  |            move.l 24(a0),d0
    d298:	|  |            move.l d0,-(sp)
    d29a:	|  |            jsr 109ac <trimStack>
    d2a0:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    d2a2:	|  |            move.l 24(sp),d0
    d2a6:	|  |            move.l d0,-(sp)
    d2a8:	|  |            jsr 10aea <getRegionForObject>
    d2ae:	|  |            addq.l #4,sp
    d2b0:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    d2b4:	|  |        /-- bne.s d2bc <moveChr+0x1f6>
    d2b6:	|  |        |   moveq #2,d0
    d2b8:	|  +--------|-- bra.w d376 <moveChr+0x2b0>

			if (force)
    d2bc:	|  |        \-> tst.w 6(sp)
    d2c0:	|  |        /-- beq.s d2fc <moveChr+0x236>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d2c2:	|  |        |   movea.l 28(sp),a0
    d2c6:	|  |        |   move.l 24(a0),d2
    d2ca:	|  |        |   movea.l 20(sp),a1
    d2ce:	|  |        |   movea.l 28(sp),a0
    d2d2:	|  |        |   move.l 20(a0),d1
    d2d6:	|  |        |   movea.l 28(sp),a0
    d2da:	|  |        |   move.l 16(a0),d0
    d2de:	|  |        |   move.l d2,-(sp)
    d2e0:	|  |        |   move.l 44(sp),-(sp)
    d2e4:	|  |        |   move.l a1,-(sp)
    d2e6:	|  |        |   move.l d1,-(sp)
    d2e8:	|  |        |   move.l d0,-(sp)
    d2ea:	|  |        |   jsr 6220 <forceWalkingPerson>
    d2f0:	|  |        |   lea 20(sp),sp
    d2f4:	|  |        |   tst.w d0
    d2f6:	|  |     /--|-- beq.s d362 <moveChr+0x29c>
    d2f8:	|  |     |  |   moveq #3,d0
    d2fa:	|  +-----|--|-- bra.s d376 <moveChr+0x2b0>
			}
			else if (immediate)
    d2fc:	|  |     |  \-> tst.w 4(sp)
    d300:	|  |     |  /-- beq.s d328 <moveChr+0x262>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    d302:	|  |     |  |   movea.l 20(sp),a1
    d306:	|  |     |  |   movea.l 28(sp),a0
    d30a:	|  |     |  |   move.l 20(a0),d1
    d30e:	|  |     |  |   movea.l 28(sp),a0
    d312:	|  |     |  |   move.l 16(a0),d0
    d316:	|  |     |  |   move.l a1,-(sp)
    d318:	|  |     |  |   move.l d1,-(sp)
    d31a:	|  |     |  |   move.l d0,-(sp)
    d31c:	|  |     |  |   jsr 6528 <jumpPerson>
    d322:	|  |     |  |   lea 12(sp),sp
    d326:	|  |     +--|-- bra.s d362 <moveChr+0x29c>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d328:	|  |     |  \-> movea.l 28(sp),a0
    d32c:	|  |     |      move.l 24(a0),d2
    d330:	|  |     |      movea.l 20(sp),a1
    d334:	|  |     |      movea.l 28(sp),a0
    d338:	|  |     |      move.l 20(a0),d1
    d33c:	|  |     |      movea.l 28(sp),a0
    d340:	|  |     |      move.l 16(a0),d0
    d344:	|  |     |      move.l d2,-(sp)
    d346:	|  |     |      move.l 44(sp),-(sp)
    d34a:	|  |     |      move.l a1,-(sp)
    d34c:	|  |     |      move.l d1,-(sp)
    d34e:	|  |     |      move.l d0,-(sp)
    d350:	|  |     |      jsr 66f8 <makeWalkingPerson>
    d356:	|  |     |      lea 20(sp),sp
    d35a:	|  |     |      tst.w d0
    d35c:	|  |     +----- beq.s d362 <moveChr+0x29c>
    d35e:	|  |     |      moveq #3,d0
    d360:	|  +-----|----- bra.s d376 <moveChr+0x2b0>
			}
			return BR_CONTINUE;
    d362:	|  |     \----> moveq #2,d0
    d364:	|  +----------- bra.s d376 <moveChr+0x2b0>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    d366:	\--|----------> pea 1593e <zbuffer.c.d110ca03+0x3f8>
    d36c:	   |            jsr 12018 <KPrintF>
    d372:	   |            addq.l #4,sp
			return BR_ERROR;
    d374:	   |            moveq #1,d0
	}
}
    d376:	   \----------> move.l (sp)+,d2
    d378:	                lea 28(sp),sp
    d37c:	                rts

0000d37e <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    d37e:	clr.l -(sp)
    d380:	clr.l -(sp)
    d382:	move.l 16(sp),-(sp)
    d386:	move.l 16(sp),-(sp)
    d38a:	jsr d0c6 <moveChr>
    d390:	lea 16(sp),sp
}
    d394:	rts

0000d396 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    d396:	clr.l -(sp)
    d398:	pea 1 <_start+0x1>
    d39c:	move.l 16(sp),-(sp)
    d3a0:	move.l 16(sp),-(sp)
    d3a4:	jsr d0c6 <moveChr>
    d3aa:	lea 16(sp),sp
}
    d3ae:	rts

0000d3b0 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    d3b0:	pea 1 <_start+0x1>
    d3b4:	clr.l -(sp)
    d3b6:	move.l 16(sp),-(sp)
    d3ba:	move.l 16(sp),-(sp)
    d3be:	jsr d0c6 <moveChr>
    d3c4:	lea 16(sp),sp
}
    d3c8:	rts

0000d3ca <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    d3ca:	jsr 47e8 <clearStatusBar>
	return BR_CONTINUE;
    d3d0:	moveq #2,d0
}
    d3d2:	rts

0000d3d4 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    d3d4:	jsr 4890 <killLastStatus>
	return BR_CONTINUE;
    d3da:	moveq #2,d0
}
    d3dc:	rts

0000d3de <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    d3de:	jsr 477e <addStatusBar>
	return BR_CONTINUE;
    d3e4:	moveq #2,d0
}
    d3e6:	rts

0000d3e8 <builtIn_statusText>:

builtIn(statusText)
{
    d3e8:	       subq.l #8,sp
    d3ea:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d3ec:	       movea.l 20(sp),a0
    d3f0:	       move.l 24(a0),d0
    d3f4:	       move.l d0,-(sp)
    d3f6:	       jsr 10620 <getTextFromAnyVar>
    d3fc:	       addq.l #4,sp
    d3fe:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    d402:	   /-- bne.s d408 <builtIn_statusText+0x20>
    d404:	   |   moveq #1,d0
    d406:	/--|-- bra.s d43e <builtIn_statusText+0x56>
	trimStack(fun->stack);
    d408:	|  \-> movea.l 20(sp),a0
    d40c:	|      move.l 24(a0),d0
    d410:	|      move.l d0,-(sp)
    d412:	|      jsr 109ac <trimStack>
    d418:	|      addq.l #4,sp
	setStatusBar(newText);
    d41a:	|      move.l 8(sp),-(sp)
    d41e:	|      jsr 4b10 <setStatusBar>
    d424:	|      addq.l #4,sp
	FreeVec(newText);
    d426:	|      move.l 8(sp),4(sp)
    d42c:	|      move.l 17b28 <SysBase>,d0
    d432:	|      movea.l d0,a6
    d434:	|      movea.l 4(sp),a1
    d438:	|      jsr -690(a6)
	return BR_CONTINUE;
    d43c:	|      moveq #2,d0
}
    d43e:	\----> movea.l (sp)+,a6
    d440:	       addq.l #8,sp
    d442:	       rts

0000d444 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    d444:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d446:	       movea.l 12(sp),a0
    d44a:	       move.l 24(a0),d0
    d44e:	       move.l d0,-(sp)
    d450:	       pea 1 <_start+0x1>
    d454:	       move.l sp,d0
    d456:	       addq.l #8,d0
    d458:	       move.l d0,-(sp)
    d45a:	       jsr 10048 <getValueType>
    d460:	       lea 12(sp),sp
    d464:	       tst.w d0
    d466:	   /-- bne.s d46c <builtIn_lightStatus+0x28>
    d468:	   |   moveq #1,d0
    d46a:	/--|-- bra.s d48c <builtIn_lightStatus+0x48>
	trimStack (fun -> stack);
    d46c:	|  \-> movea.l 12(sp),a0
    d470:	|      move.l 24(a0),d0
    d474:	|      move.l d0,-(sp)
    d476:	|      jsr 109ac <trimStack>
    d47c:	|      addq.l #4,sp
	setLitStatus (val);
    d47e:	|      move.l (sp),d0
    d480:	|      move.l d0,-(sp)
    d482:	|      jsr 4b00 <setLitStatus>
    d488:	|      addq.l #4,sp
	return BR_CONTINUE;
    d48a:	|      moveq #2,d0
}
    d48c:	\----> addq.l #4,sp
    d48e:	       rts

0000d490 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    d490:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d492:	       movea.l 16(sp),a0
    d496:	       move.l 24(a0),d0
    d49a:	       move.l d0,-(sp)
    d49c:	       pea 1 <_start+0x1>
    d4a0:	       move.l sp,d0
    d4a2:	       addq.l #8,d0
    d4a4:	       move.l d0,-(sp)
    d4a6:	       jsr 10048 <getValueType>
    d4ac:	       lea 12(sp),sp
    d4b0:	       tst.w d0
    d4b2:	   /-- bne.s d4b8 <builtIn_positionStatus+0x28>
    d4b4:	   |   moveq #1,d0
    d4b6:	/--|-- bra.s d516 <builtIn_positionStatus+0x86>
	trimStack (fun -> stack);
    d4b8:	|  \-> movea.l 16(sp),a0
    d4bc:	|      move.l 24(a0),d0
    d4c0:	|      move.l d0,-(sp)
    d4c2:	|      jsr 109ac <trimStack>
    d4c8:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d4ca:	|      movea.l 16(sp),a0
    d4ce:	|      move.l 24(a0),d0
    d4d2:	|      move.l d0,-(sp)
    d4d4:	|      pea 1 <_start+0x1>
    d4d8:	|      moveq #12,d0
    d4da:	|      add.l sp,d0
    d4dc:	|      move.l d0,-(sp)
    d4de:	|      jsr 10048 <getValueType>
    d4e4:	|      lea 12(sp),sp
    d4e8:	|      tst.w d0
    d4ea:	|  /-- bne.s d4f0 <builtIn_positionStatus+0x60>
    d4ec:	|  |   moveq #1,d0
    d4ee:	+--|-- bra.s d516 <builtIn_positionStatus+0x86>
	trimStack (fun -> stack);
    d4f0:	|  \-> movea.l 16(sp),a0
    d4f4:	|      move.l 24(a0),d0
    d4f8:	|      move.l d0,-(sp)
    d4fa:	|      jsr 109ac <trimStack>
    d500:	|      addq.l #4,sp
	positionStatus (x, y);
    d502:	|      move.l (sp),d1
    d504:	|      move.l 4(sp),d0
    d508:	|      move.l d1,-(sp)
    d50a:	|      move.l d0,-(sp)
    d50c:	|      jsr 48f2 <positionStatus>
    d512:	|      addq.l #8,sp
	return BR_CONTINUE;
    d514:	|      moveq #2,d0
}
    d516:	\----> addq.l #8,sp
    d518:	       rts

0000d51a <builtIn_alignStatus>:

builtIn(alignStatus)
{
    d51a:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d51c:	       movea.l 12(sp),a0
    d520:	       move.l 24(a0),d0
    d524:	       move.l d0,-(sp)
    d526:	       pea 1 <_start+0x1>
    d52a:	       move.l sp,d0
    d52c:	       addq.l #8,d0
    d52e:	       move.l d0,-(sp)
    d530:	       jsr 10048 <getValueType>
    d536:	       lea 12(sp),sp
    d53a:	       tst.w d0
    d53c:	   /-- bne.s d542 <builtIn_alignStatus+0x28>
    d53e:	   |   moveq #1,d0
    d540:	/--|-- bra.s d564 <builtIn_alignStatus+0x4a>
	trimStack (fun -> stack);
    d542:	|  \-> movea.l 12(sp),a0
    d546:	|      move.l 24(a0),d0
    d54a:	|      move.l d0,-(sp)
    d54c:	|      jsr 109ac <trimStack>
    d552:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    d554:	|      move.l (sp),d0
    d556:	|      movea.l 1601a <nowStatus>,a0
    d55c:	|      move.l d0,d0
    d55e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    d562:	|      moveq #2,d0
}
    d564:	\----> addq.l #4,sp
    d566:	       rts

0000d568 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    d568:	             tst.l 4(sp)
    d56c:	      /----- beq.s d578 <getFuncNumForCallback+0x10>
    d56e:	      |      moveq #1,d0
    d570:	      |      cmp.l 4(sp),d0
    d574:	      |  /-- beq.s d57e <getFuncNumForCallback+0x16>
    d576:	   /--|--|-- bra.s d5b6 <getFuncNumForCallback+0x4e>
		case 0:
			functionNum = 0;
    d578:	   |  \--|-> clr.l 12(sp)
			break;
    d57c:	/--|-----|-- bra.s d5c8 <getFuncNumForCallback+0x60>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    d57e:	|  |     \-> movea.l 8(sp),a0
    d582:	|  |         move.l 24(a0),d0
    d586:	|  |         move.l d0,-(sp)
    d588:	|  |         pea 2 <_start+0x2>
    d58c:	|  |         move.l 20(sp),-(sp)
    d590:	|  |         jsr 10048 <getValueType>
    d596:	|  |         lea 12(sp),sp
    d59a:	|  |         tst.w d0
    d59c:	|  |     /-- bne.s d5a2 <getFuncNumForCallback+0x3a>
    d59e:	|  |     |   clr.w d0
    d5a0:	|  |  /--|-- bra.s d5ca <getFuncNumForCallback+0x62>
			trimStack (fun -> stack);
    d5a2:	|  |  |  \-> movea.l 8(sp),a0
    d5a6:	|  |  |      move.l 24(a0),d0
    d5aa:	|  |  |      move.l d0,-(sp)
    d5ac:	|  |  |      jsr 109ac <trimStack>
    d5b2:	|  |  |      addq.l #4,sp
			break;
    d5b4:	+--|--|----- bra.s d5c8 <getFuncNumForCallback+0x60>

		default:
			KPrintF ("Too many parameters.");
    d5b6:	|  \--|----> pea 15974 <zbuffer.c.d110ca03+0x42e>
    d5bc:	|     |      jsr 12018 <KPrintF>
    d5c2:	|     |      addq.l #4,sp
			return FALSE;
    d5c4:	|     |      clr.w d0
    d5c6:	|     +----- bra.s d5ca <getFuncNumForCallback+0x62>
	}
	return TRUE;
    d5c8:	\-----|----> moveq #1,d0
}
    d5ca:	      \----> rts

0000d5cc <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    d5cc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d5ce:	       move.l sp,d0
    d5d0:	       move.l d0,-(sp)
    d5d2:	       move.l 16(sp),-(sp)
    d5d6:	       move.l 16(sp),-(sp)
    d5da:	       jsr d568 <getFuncNumForCallback>
    d5e0:	       lea 12(sp),sp
    d5e4:	       tst.w d0
    d5e6:	/----- beq.s d5f6 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    d5e8:	|      movea.l 16004 <currentEvents>,a0
    d5ee:	|      move.l (sp),d0
    d5f0:	|      move.l d0,(a0)
		return BR_CONTINUE;
    d5f2:	|      moveq #2,d0
    d5f4:	|  /-- bra.s d5f8 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    d5f6:	\--|-> moveq #1,d0
}
    d5f8:	   \-> addq.l #4,sp
    d5fa:	       rts

0000d5fc <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    d5fc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d5fe:	       move.l sp,d0
    d600:	       move.l d0,-(sp)
    d602:	       move.l 16(sp),-(sp)
    d606:	       move.l 16(sp),-(sp)
    d60a:	       jsr d568 <getFuncNumForCallback>
    d610:	       lea 12(sp),sp
    d614:	       tst.w d0
    d616:	/----- beq.s d628 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    d618:	|      movea.l 16004 <currentEvents>,a0
    d61e:	|      move.l (sp),d0
    d620:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    d624:	|      moveq #2,d0
    d626:	|  /-- bra.s d62a <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    d628:	\--|-> moveq #1,d0
}
    d62a:	   \-> addq.l #4,sp
    d62c:	       rts

0000d62e <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    d62e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d630:	       move.l sp,d0
    d632:	       move.l d0,-(sp)
    d634:	       move.l 16(sp),-(sp)
    d638:	       move.l 16(sp),-(sp)
    d63c:	       jsr d568 <getFuncNumForCallback>
    d642:	       lea 12(sp),sp
    d646:	       tst.w d0
    d648:	/----- beq.s d65a <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    d64a:	|      movea.l 16004 <currentEvents>,a0
    d650:	|      move.l (sp),d0
    d652:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    d656:	|      moveq #2,d0
    d658:	|  /-- bra.s d65c <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    d65a:	\--|-> moveq #1,d0
}
    d65c:	   \-> addq.l #4,sp
    d65e:	       rts

0000d660 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    d660:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d662:	       move.l sp,d0
    d664:	       move.l d0,-(sp)
    d666:	       move.l 16(sp),-(sp)
    d66a:	       move.l 16(sp),-(sp)
    d66e:	       jsr d568 <getFuncNumForCallback>
    d674:	       lea 12(sp),sp
    d678:	       tst.w d0
    d67a:	/----- beq.s d68c <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    d67c:	|      movea.l 16004 <currentEvents>,a0
    d682:	|      move.l (sp),d0
    d684:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    d688:	|      moveq #2,d0
    d68a:	|  /-- bra.s d68e <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    d68c:	\--|-> moveq #1,d0
}
    d68e:	   \-> addq.l #4,sp
    d690:	       rts

0000d692 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    d692:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d694:	       move.l sp,d0
    d696:	       move.l d0,-(sp)
    d698:	       move.l 16(sp),-(sp)
    d69c:	       move.l 16(sp),-(sp)
    d6a0:	       jsr d568 <getFuncNumForCallback>
    d6a6:	       lea 12(sp),sp
    d6aa:	       tst.w d0
    d6ac:	/----- beq.s d6be <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    d6ae:	|      movea.l 16004 <currentEvents>,a0
    d6b4:	|      move.l (sp),d0
    d6b6:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    d6ba:	|      moveq #2,d0
    d6bc:	|  /-- bra.s d6c0 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    d6be:	\--|-> moveq #1,d0
}
    d6c0:	   \-> addq.l #4,sp
    d6c2:	       rts

0000d6c4 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    d6c4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d6c6:	       move.l sp,d0
    d6c8:	       move.l d0,-(sp)
    d6ca:	       move.l 16(sp),-(sp)
    d6ce:	       move.l 16(sp),-(sp)
    d6d2:	       jsr d568 <getFuncNumForCallback>
    d6d8:	       lea 12(sp),sp
    d6dc:	       tst.w d0
    d6de:	/----- beq.s d6f0 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    d6e0:	|      movea.l 16004 <currentEvents>,a0
    d6e6:	|      move.l (sp),d0
    d6e8:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    d6ec:	|      moveq #2,d0
    d6ee:	|  /-- bra.s d6f2 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    d6f0:	\--|-> moveq #1,d0
}
    d6f2:	   \-> addq.l #4,sp
    d6f4:	       rts

0000d6f6 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    d6f6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d6f8:	       move.l sp,d0
    d6fa:	       move.l d0,-(sp)
    d6fc:	       move.l 16(sp),-(sp)
    d700:	       move.l 16(sp),-(sp)
    d704:	       jsr d568 <getFuncNumForCallback>
    d70a:	       lea 12(sp),sp
    d70e:	       tst.w d0
    d710:	/----- beq.s d722 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    d712:	|      movea.l 16004 <currentEvents>,a0
    d718:	|      move.l (sp),d0
    d71a:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    d71e:	|      moveq #2,d0
    d720:	|  /-- bra.s d724 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    d722:	\--|-> moveq #1,d0
}
    d724:	   \-> addq.l #4,sp
    d726:	       rts

0000d728 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    d728:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d72a:	          move.l sp,d0
    d72c:	          move.l d0,-(sp)
    d72e:	          move.l 16(sp),-(sp)
    d732:	          move.l 16(sp),-(sp)
    d736:	          jsr d568 <getFuncNumForCallback>
    d73c:	          lea 12(sp),sp
    d740:	          tst.w d0
    d742:	/-------- beq.s d76e <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    d744:	|         move.l 17af8 <noStack>,d1
    d74a:	|         move.l (sp),d0
    d74c:	|         pea 1 <_start+0x1>
    d750:	|         move.l d1,-(sp)
    d752:	|         clr.l -(sp)
    d754:	|         clr.l -(sp)
    d756:	|         move.l d0,-(sp)
    d758:	|         jsr 3c86 <startNewFunctionNum>
    d75e:	|         lea 20(sp),sp
    d762:	|         tst.l d0
    d764:	|     /-- bne.s d76a <builtIn_spawnSub+0x42>
    d766:	|     |   moveq #1,d0
    d768:	|  /--|-- bra.s d770 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    d76a:	|  |  \-> moveq #2,d0
    d76c:	|  +----- bra.s d770 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    d76e:	\--|----> moveq #1,d0
}
    d770:	   \----> addq.l #4,sp
    d772:	          rts

0000d774 <builtIn_cancelSub>:

builtIn (cancelSub)
{
    d774:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d776:	          move.l sp,d0
    d778:	          addq.l #4,d0
    d77a:	          move.l d0,-(sp)
    d77c:	          move.l 20(sp),-(sp)
    d780:	          move.l 20(sp),-(sp)
    d784:	          jsr d568 <getFuncNumForCallback>
    d78a:	          lea 12(sp),sp
    d78e:	          tst.w d0
    d790:	/-------- beq.s d7c6 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    d792:	|         move.l 4(sp),d1
    d796:	|         move.l sp,d0
    d798:	|         addq.l #2,d0
    d79a:	|         move.l d0,-(sp)
    d79c:	|         move.l 20(sp),-(sp)
    d7a0:	|         move.l d1,-(sp)
    d7a2:	|         jsr 1bda <cancelAFunction>
    d7a8:	|         lea 12(sp),sp
		if (killedMyself) {
    d7ac:	|         move.w 2(sp),d0
    d7b0:	|  /----- beq.s d7c2 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    d7b2:	|  |      move.l 16(sp),-(sp)
    d7b6:	|  |      jsr 1af4 <abortFunction>
    d7bc:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    d7be:	|  |      moveq #5,d0
    d7c0:	|  |  /-- bra.s d7c8 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    d7c2:	|  \--|-> moveq #2,d0
    d7c4:	|     +-- bra.s d7c8 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    d7c6:	\-----|-> moveq #1,d0
}
    d7c8:	      \-> addq.l #8,sp
    d7ca:	          rts

0000d7cc <builtIn_stringWidth>:

builtIn(stringWidth)
{
    d7cc:	       subq.l #8,sp
    d7ce:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    d7d0:	       movea.l 20(sp),a0
    d7d4:	       move.l 24(a0),d0
    d7d8:	       move.l d0,-(sp)
    d7da:	       jsr 10620 <getTextFromAnyVar>
    d7e0:	       addq.l #4,sp
    d7e2:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    d7e6:	   /-- bne.s d7ec <builtIn_stringWidth+0x20>
    d7e8:	   |   moveq #1,d0
    d7ea:	/--|-- bra.s d83e <builtIn_stringWidth+0x72>
	trimStack(fun->stack);
    d7ec:	|  \-> movea.l 20(sp),a0
    d7f0:	|      move.l 24(a0),d0
    d7f4:	|      move.l d0,-(sp)
    d7f6:	|      jsr 109ac <trimStack>
    d7fc:	|      addq.l #4,sp

	// Return value
	setVariable(fun->reg, SVT_INT, stringWidth(theText));
    d7fe:	|      move.l 8(sp),-(sp)
    d802:	|      jsr 109fe <stringWidth>
    d808:	|      addq.l #4,sp
    d80a:	|      move.l d0,d1
    d80c:	|      movea.l 20(sp),a0
    d810:	|      move.l 28(a0),d0
    d814:	|      move.l d1,-(sp)
    d816:	|      pea 1 <_start+0x1>
    d81a:	|      move.l d0,-(sp)
    d81c:	|      jsr 1091a <setVariable>
    d822:	|      lea 12(sp),sp
	FreeVec(theText);
    d826:	|      move.l 8(sp),4(sp)
    d82c:	|      move.l 17b28 <SysBase>,d0
    d832:	|      movea.l d0,a6
    d834:	|      movea.l 4(sp),a1
    d838:	|      jsr -690(a6)
	return BR_CONTINUE;
    d83c:	|      moveq #2,d0
}
    d83e:	\----> movea.l (sp)+,a6
    d840:	       addq.l #8,sp
    d842:	       rts

0000d844 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    d844:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d846:	       movea.l 12(sp),a0
    d84a:	       move.l 24(a0),d0
    d84e:	       move.l d0,-(sp)
    d850:	       pea 1 <_start+0x1>
    d854:	       move.l sp,d0
    d856:	       addq.l #8,d0
    d858:	       move.l d0,-(sp)
    d85a:	       jsr 10048 <getValueType>
    d860:	       lea 12(sp),sp
    d864:	       tst.w d0
    d866:	   /-- bne.s d86c <builtIn_hardScroll+0x28>
    d868:	   |   moveq #1,d0
    d86a:	/--|-- bra.s d88c <builtIn_hardScroll+0x48>
	trimStack (fun -> stack);
    d86c:	|  \-> movea.l 12(sp),a0
    d870:	|      move.l 24(a0),d0
    d874:	|      move.l d0,-(sp)
    d876:	|      jsr 109ac <trimStack>
    d87c:	|      addq.l #4,sp
	hardScroll (v);
    d87e:	|      move.l (sp),d0
    d880:	|      move.l d0,-(sp)
    d882:	|      jsr 8b58 <hardScroll>
    d888:	|      addq.l #4,sp
	return BR_CONTINUE;
    d88a:	|      moveq #2,d0
}
    d88c:	\----> addq.l #4,sp
    d88e:	       rts

0000d890 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    d890:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d892:	       movea.l 12(sp),a0
    d896:	       move.l 24(a0),d0
    d89a:	       move.l d0,-(sp)
    d89c:	       pea 7 <_start+0x7>
    d8a0:	       move.l sp,d0
    d8a2:	       addq.l #8,d0
    d8a4:	       move.l d0,-(sp)
    d8a6:	       jsr 10048 <getValueType>
    d8ac:	       lea 12(sp),sp
    d8b0:	       tst.w d0
    d8b2:	   /-- bne.s d8b8 <builtIn_isScreenRegion+0x28>
    d8b4:	   |   moveq #1,d0
    d8b6:	/--|-- bra.s d900 <builtIn_isScreenRegion+0x70>
	trimStack (fun -> stack);
    d8b8:	|  \-> movea.l 12(sp),a0
    d8bc:	|      move.l 24(a0),d0
    d8c0:	|      move.l d0,-(sp)
    d8c2:	|      jsr 109ac <trimStack>
    d8c8:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    d8ca:	|      move.l (sp),d0
    d8cc:	|      move.l d0,-(sp)
    d8ce:	|      jsr 10aea <getRegionForObject>
    d8d4:	|      addq.l #4,sp
    d8d6:	|      tst.l d0
    d8d8:	|      sne d0
    d8da:	|      neg.b d0
    d8dc:	|      move.b d0,d0
    d8de:	|      andi.l #255,d0
    d8e4:	|      movea.l 12(sp),a0
    d8e8:	|      move.l 28(a0),d1
    d8ec:	|      move.l d0,-(sp)
    d8ee:	|      pea 1 <_start+0x1>
    d8f2:	|      move.l d1,-(sp)
    d8f4:	|      jsr 1091a <setVariable>
    d8fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d8fe:	|      moveq #2,d0
}
    d900:	\----> addq.l #4,sp
    d902:	       rts

0000d904 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    d904:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d906:	       movea.l 12(sp),a0
    d90a:	       move.l 24(a0),d0
    d90e:	       move.l d0,-(sp)
    d910:	       pea 1 <_start+0x1>
    d914:	       move.l sp,d0
    d916:	       addq.l #8,d0
    d918:	       move.l d0,-(sp)
    d91a:	       jsr 10048 <getValueType>
    d920:	       lea 12(sp),sp
    d924:	       tst.w d0
    d926:	   /-- bne.s d92c <builtIn_setSpeechSpeed+0x28>
    d928:	   |   moveq #1,d0
    d92a:	/--|-- bra.s d97e <builtIn_setSpeechSpeed+0x7a>
	trimStack (fun -> stack);
    d92c:	|  \-> movea.l 12(sp),a0
    d930:	|      move.l 24(a0),d0
    d934:	|      move.l d0,-(sp)
    d936:	|      jsr 109ac <trimStack>
    d93c:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    d93e:	|      move.l (sp),d0
    d940:	|      move.l d0,-(sp)
    d942:	|      jsr 12470 <__floatsisf>
    d948:	|      addq.l #4,sp
    d94a:	|      move.l #1008981770,-(sp)
    d950:	|      move.l d0,-(sp)
    d952:	|      jsr 12522 <__mulsf3>
    d958:	|      addq.l #8,sp
    d95a:	|      move.l d0,1601e <speechSpeed>
	setVariable (fun -> reg, SVT_INT, 1);
    d960:	|      movea.l 12(sp),a0
    d964:	|      move.l 28(a0),d0
    d968:	|      pea 1 <_start+0x1>
    d96c:	|      pea 1 <_start+0x1>
    d970:	|      move.l d0,-(sp)
    d972:	|      jsr 1091a <setVariable>
    d978:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d97c:	|      moveq #2,d0
}
    d97e:	\----> addq.l #4,sp
    d980:	       rts

0000d982 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    d982:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d984:	       movea.l 12(sp),a0
    d988:	       move.l 24(a0),d0
    d98c:	       move.l d0,-(sp)
    d98e:	       pea 1 <_start+0x1>
    d992:	       move.l sp,d0
    d994:	       addq.l #8,d0
    d996:	       move.l d0,-(sp)
    d998:	       jsr 10048 <getValueType>
    d99e:	       lea 12(sp),sp
    d9a2:	       tst.w d0
    d9a4:	   /-- bne.s d9aa <builtIn_setFontSpacing+0x28>
    d9a6:	   |   moveq #1,d0
    d9a8:	/--|-- bra.s d9e4 <builtIn_setFontSpacing+0x62>
	fontSpace = fontSpaceI;
    d9aa:	|  \-> move.l (sp),d0
    d9ac:	|      move.l d0,d0
    d9ae:	|      move.w d0,16598 <fontSpace>
	trimStack (fun -> stack);
    d9b4:	|      movea.l 12(sp),a0
    d9b8:	|      move.l 24(a0),d0
    d9bc:	|      move.l d0,-(sp)
    d9be:	|      jsr 109ac <trimStack>
    d9c4:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, 1);
    d9c6:	|      movea.l 12(sp),a0
    d9ca:	|      move.l 28(a0),d0
    d9ce:	|      pea 1 <_start+0x1>
    d9d2:	|      pea 1 <_start+0x1>
    d9d6:	|      move.l d0,-(sp)
    d9d8:	|      jsr 1091a <setVariable>
    d9de:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d9e2:	|      moveq #2,d0
}
    d9e4:	\----> addq.l #4,sp
    d9e6:	       rts

0000d9e8 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    d9e8:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d9ea:	          movea.l 12(sp),a0
    d9ee:	          move.l 24(a0),d0
    d9f2:	          move.l d0,-(sp)
    d9f4:	          pea 1 <_start+0x1>
    d9f8:	          move.l sp,d0
    d9fa:	          addq.l #8,d0
    d9fc:	          move.l d0,-(sp)
    d9fe:	          jsr 10048 <getValueType>
    da04:	          lea 12(sp),sp
    da08:	          tst.w d0
    da0a:	      /-- bne.s da10 <builtIn_transitionLevel+0x28>
    da0c:	      |   moveq #1,d0
    da0e:	/-----|-- bra.s da68 <builtIn_transitionLevel+0x80>
	trimStack (fun -> stack);
    da10:	|     \-> movea.l 12(sp),a0
    da14:	|         move.l 24(a0),d0
    da18:	|         move.l d0,-(sp)
    da1a:	|         jsr 109ac <trimStack>
    da20:	|         addq.l #4,sp

	if (number < 0)
    da22:	|         move.l (sp),d0
    da24:	|     /-- bpl.s da2e <builtIn_transitionLevel+0x46>
		brightnessLevel = 0;
    da26:	|     |   clr.b 16002 <brightnessLevel>
    da2c:	|  /--|-- bra.s da4a <builtIn_transitionLevel+0x62>
	else if (number > 255)
    da2e:	|  |  \-> move.l (sp),d0
    da30:	|  |      cmpi.l #255,d0
    da36:	|  |  /-- ble.s da40 <builtIn_transitionLevel+0x58>
		brightnessLevel = 255;
    da38:	|  |  |   st 16002 <brightnessLevel>
    da3e:	|  +--|-- bra.s da4a <builtIn_transitionLevel+0x62>
	else
		brightnessLevel = number;
    da40:	|  |  \-> move.l (sp),d0
    da42:	|  |      move.l d0,d0
    da44:	|  |      move.b d0,16002 <brightnessLevel>

	setVariable (fun -> reg, SVT_INT, 1);
    da4a:	|  \----> movea.l 12(sp),a0
    da4e:	|         move.l 28(a0),d0
    da52:	|         pea 1 <_start+0x1>
    da56:	|         pea 1 <_start+0x1>
    da5a:	|         move.l d0,-(sp)
    da5c:	|         jsr 1091a <setVariable>
    da62:	|         lea 12(sp),sp
	return BR_CONTINUE;
    da66:	|         moveq #2,d0
}
    da68:	\-------> addq.l #4,sp
    da6a:	          rts

0000da6c <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    da6c:	movea.l 8(sp),a0
    da70:	move.l 24(a0),d0
    da74:	move.l d0,-(sp)
    da76:	jsr 1058a <getBoolean>
    da7c:	addq.l #4,sp
    da7e:	move.w d0,17acc <captureAllKeys>
	trimStack (fun -> stack);
    da84:	movea.l 8(sp),a0
    da88:	move.l 24(a0),d0
    da8c:	move.l d0,-(sp)
    da8e:	jsr 109ac <trimStack>
    da94:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, captureAllKeys);
    da96:	move.w 17acc <captureAllKeys>,d0
    da9c:	movea.w d0,a0
    da9e:	movea.l 8(sp),a1
    daa2:	move.l 28(a1),d0
    daa6:	move.l a0,-(sp)
    daa8:	pea 1 <_start+0x1>
    daac:	move.l d0,-(sp)
    daae:	jsr 1091a <setVariable>
    dab4:	lea 12(sp),sp
	return BR_CONTINUE;
    dab8:	moveq #2,d0
}
    daba:	rts

0000dabc <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    dabc:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dac0:	       movea.l 20(sp),a0
    dac4:	       move.l 24(a0),d0
    dac8:	       move.l d0,-(sp)
    daca:	       pea 1 <_start+0x1>
    dace:	       moveq #12,d0
    dad0:	       add.l sp,d0
    dad2:	       move.l d0,-(sp)
    dad4:	       jsr 10048 <getValueType>
    dada:	       lea 12(sp),sp
    dade:	       tst.w d0
    dae0:	   /-- bne.s dae8 <builtIn_spinCharacter+0x2c>
    dae2:	   |   moveq #1,d0
    dae4:	/--|-- bra.w dba2 <builtIn_spinCharacter+0xe6>
	trimStack (fun -> stack);
    dae8:	|  \-> movea.l 20(sp),a0
    daec:	|      move.l 24(a0),d0
    daf0:	|      move.l d0,-(sp)
    daf2:	|      jsr 109ac <trimStack>
    daf8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dafa:	|      movea.l 20(sp),a0
    dafe:	|      move.l 24(a0),d0
    db02:	|      move.l d0,-(sp)
    db04:	|      pea 7 <_start+0x7>
    db08:	|      lea 8(sp),a0
    db0c:	|      move.l a0,-(sp)
    db0e:	|      jsr 10048 <getValueType>
    db14:	|      lea 12(sp),sp
    db18:	|      tst.w d0
    db1a:	|  /-- bne.s db22 <builtIn_spinCharacter+0x66>
    db1c:	|  |   moveq #1,d0
    db1e:	+--|-- bra.w dba2 <builtIn_spinCharacter+0xe6>
	trimStack (fun -> stack);
    db22:	|  \-> movea.l 20(sp),a0
    db26:	|      move.l 24(a0),d0
    db2a:	|      move.l d0,-(sp)
    db2c:	|      jsr 109ac <trimStack>
    db32:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    db34:	|      move.l (sp),d0
    db36:	|      move.l d0,-(sp)
    db38:	|      jsr 61ce <findPerson>
    db3e:	|      addq.l #4,sp
    db40:	|      move.l d0,8(sp)
	if (thisPerson) {
    db44:	|  /-- beq.s db86 <builtIn_spinCharacter+0xca>
		thisPerson -> wantAngle = number;
    db46:	|  |   move.l 4(sp),d0
    db4a:	|  |   movea.l 8(sp),a0
    db4e:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    db52:	|  |   movea.l 8(sp),a0
    db56:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    db5c:	|  |   movea.l 8(sp),a0
    db60:	|  |   move.l 20(sp),56(a0)
		setVariable (fun -> reg, SVT_INT, 1);
    db66:	|  |   movea.l 20(sp),a0
    db6a:	|  |   move.l 28(a0),d0
    db6e:	|  |   pea 1 <_start+0x1>
    db72:	|  |   pea 1 <_start+0x1>
    db76:	|  |   move.l d0,-(sp)
    db78:	|  |   jsr 1091a <setVariable>
    db7e:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    db82:	|  |   moveq #3,d0
    db84:	+--|-- bra.s dba2 <builtIn_spinCharacter+0xe6>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    db86:	|  \-> movea.l 20(sp),a0
    db8a:	|      move.l 28(a0),d0
    db8e:	|      clr.l -(sp)
    db90:	|      pea 1 <_start+0x1>
    db94:	|      move.l d0,-(sp)
    db96:	|      jsr 1091a <setVariable>
    db9c:	|      lea 12(sp),sp
		return BR_CONTINUE;
    dba0:	|      moveq #2,d0
	}
}
    dba2:	\----> lea 12(sp),sp
    dba6:	       rts

0000dba8 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    dba8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbaa:	          movea.l 16(sp),a0
    dbae:	          move.l 24(a0),d0
    dbb2:	          move.l d0,-(sp)
    dbb4:	          pea 7 <_start+0x7>
    dbb8:	          move.l sp,d0
    dbba:	          addq.l #8,d0
    dbbc:	          move.l d0,-(sp)
    dbbe:	          jsr 10048 <getValueType>
    dbc4:	          lea 12(sp),sp
    dbc8:	          tst.w d0
    dbca:	      /-- bne.s dbd0 <builtIn_getCharacterDirection+0x28>
    dbcc:	      |   moveq #1,d0
    dbce:	/-----|-- bra.s dc34 <builtIn_getCharacterDirection+0x8c>
	trimStack (fun -> stack);
    dbd0:	|     \-> movea.l 16(sp),a0
    dbd4:	|         move.l 24(a0),d0
    dbd8:	|         move.l d0,-(sp)
    dbda:	|         jsr 109ac <trimStack>
    dbe0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dbe2:	|         move.l (sp),d0
    dbe4:	|         move.l d0,-(sp)
    dbe6:	|         jsr 61ce <findPerson>
    dbec:	|         addq.l #4,sp
    dbee:	|         move.l d0,4(sp)
	if (thisPerson) {
    dbf2:	|  /----- beq.s dc18 <builtIn_getCharacterDirection+0x70>
		setVariable (fun -> reg, SVT_INT, thisPerson -> direction);
    dbf4:	|  |      movea.l 4(sp),a0
    dbf8:	|  |      move.l 94(a0),d1
    dbfc:	|  |      movea.l 16(sp),a0
    dc00:	|  |      move.l 28(a0),d0
    dc04:	|  |      move.l d1,-(sp)
    dc06:	|  |      pea 1 <_start+0x1>
    dc0a:	|  |      move.l d0,-(sp)
    dc0c:	|  |      jsr 1091a <setVariable>
    dc12:	|  |      lea 12(sp),sp
    dc16:	|  |  /-- bra.s dc32 <builtIn_getCharacterDirection+0x8a>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    dc18:	|  \--|-> movea.l 16(sp),a0
    dc1c:	|     |   move.l 28(a0),d0
    dc20:	|     |   clr.l -(sp)
    dc22:	|     |   pea 1 <_start+0x1>
    dc26:	|     |   move.l d0,-(sp)
    dc28:	|     |   jsr 1091a <setVariable>
    dc2e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dc32:	|     \-> moveq #2,d0
}
    dc34:	\-------> addq.l #8,sp
    dc36:	          rts

0000dc38 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    dc38:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc3a:	       movea.l 16(sp),a0
    dc3e:	       move.l 24(a0),d0
    dc42:	       move.l d0,-(sp)
    dc44:	       pea 7 <_start+0x7>
    dc48:	       move.l sp,d0
    dc4a:	       addq.l #8,d0
    dc4c:	       move.l d0,-(sp)
    dc4e:	       jsr 10048 <getValueType>
    dc54:	       lea 12(sp),sp
    dc58:	       tst.w d0
    dc5a:	   /-- bne.s dc60 <builtIn_isCharacter+0x28>
    dc5c:	   |   moveq #1,d0
    dc5e:	/--|-- bra.s dcaa <builtIn_isCharacter+0x72>
	trimStack (fun -> stack);
    dc60:	|  \-> movea.l 16(sp),a0
    dc64:	|      move.l 24(a0),d0
    dc68:	|      move.l d0,-(sp)
    dc6a:	|      jsr 109ac <trimStack>
    dc70:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dc72:	|      move.l (sp),d0
    dc74:	|      move.l d0,-(sp)
    dc76:	|      jsr 61ce <findPerson>
    dc7c:	|      addq.l #4,sp
    dc7e:	|      move.l d0,4(sp)
	setVariable (fun -> reg, SVT_INT, thisPerson != NULL);
    dc82:	|      sne d0
    dc84:	|      neg.b d0
    dc86:	|      move.b d0,d0
    dc88:	|      andi.l #255,d0
    dc8e:	|      movea.l 16(sp),a0
    dc92:	|      move.l 28(a0),d1
    dc96:	|      move.l d0,-(sp)
    dc98:	|      pea 1 <_start+0x1>
    dc9c:	|      move.l d1,-(sp)
    dc9e:	|      jsr 1091a <setVariable>
    dca4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dca8:	|      moveq #2,d0
}
    dcaa:	\----> addq.l #8,sp
    dcac:	       rts

0000dcae <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    dcae:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dcb0:	          movea.l 16(sp),a0
    dcb4:	          move.l 24(a0),d0
    dcb8:	          move.l d0,-(sp)
    dcba:	          pea 7 <_start+0x7>
    dcbe:	          move.l sp,d0
    dcc0:	          addq.l #8,d0
    dcc2:	          move.l d0,-(sp)
    dcc4:	          jsr 10048 <getValueType>
    dcca:	          lea 12(sp),sp
    dcce:	          tst.w d0
    dcd0:	      /-- bne.s dcd8 <builtIn_normalCharacter+0x2a>
    dcd2:	      |   moveq #1,d0
    dcd4:	/-----|-- bra.w dd5a <builtIn_normalCharacter+0xac>
	trimStack (fun -> stack);
    dcd8:	|     \-> movea.l 16(sp),a0
    dcdc:	|         move.l 24(a0),d0
    dce0:	|         move.l d0,-(sp)
    dce2:	|         jsr 109ac <trimStack>
    dce8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dcea:	|         move.l (sp),d0
    dcec:	|         move.l d0,-(sp)
    dcee:	|         jsr 61ce <findPerson>
    dcf4:	|         addq.l #4,sp
    dcf6:	|         move.l d0,4(sp)
	if (thisPerson)
    dcfa:	|  /----- beq.s dd3e <builtIn_normalCharacter+0x90>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    dcfc:	|  |      movea.l 4(sp),a0
    dd00:	|  |      movea.l 68(a0),a0
    dd04:	|  |      move.l (a0),d1
    dd06:	|  |      movea.l 4(sp),a0
    dd0a:	|  |      move.l 94(a0),d0
    dd0e:	|  |      add.l d0,d0
    dd10:	|  |      add.l d0,d0
    dd12:	|  |      movea.l d1,a0
    dd14:	|  |      adda.l d0,a0
    dd16:	|  |      move.l (a0),d0
    dd18:	|  |      movea.l 4(sp),a0
    dd1c:	|  |      move.l d0,60(a0)
		setVariable (fun -> reg, SVT_INT, 1);
    dd20:	|  |      movea.l 16(sp),a0
    dd24:	|  |      move.l 28(a0),d0
    dd28:	|  |      pea 1 <_start+0x1>
    dd2c:	|  |      pea 1 <_start+0x1>
    dd30:	|  |      move.l d0,-(sp)
    dd32:	|  |      jsr 1091a <setVariable>
    dd38:	|  |      lea 12(sp),sp
    dd3c:	|  |  /-- bra.s dd58 <builtIn_normalCharacter+0xaa>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    dd3e:	|  \--|-> movea.l 16(sp),a0
    dd42:	|     |   move.l 28(a0),d0
    dd46:	|     |   clr.l -(sp)
    dd48:	|     |   pea 1 <_start+0x1>
    dd4c:	|     |   move.l d0,-(sp)
    dd4e:	|     |   jsr 1091a <setVariable>
    dd54:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dd58:	|     \-> moveq #2,d0
}
    dd5a:	\-------> addq.l #8,sp
    dd5c:	          rts

0000dd5e <builtIn_isMoving>:

builtIn(isMoving)
{
    dd5e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd60:	          movea.l 16(sp),a0
    dd64:	          move.l 24(a0),d0
    dd68:	          move.l d0,-(sp)
    dd6a:	          pea 7 <_start+0x7>
    dd6e:	          move.l sp,d0
    dd70:	          addq.l #8,d0
    dd72:	          move.l d0,-(sp)
    dd74:	          jsr 10048 <getValueType>
    dd7a:	          lea 12(sp),sp
    dd7e:	          tst.w d0
    dd80:	      /-- bne.s dd86 <builtIn_isMoving+0x28>
    dd82:	      |   moveq #1,d0
    dd84:	/-----|-- bra.s ddec <builtIn_isMoving+0x8e>
	trimStack (fun -> stack);
    dd86:	|     \-> movea.l 16(sp),a0
    dd8a:	|         move.l 24(a0),d0
    dd8e:	|         move.l d0,-(sp)
    dd90:	|         jsr 109ac <trimStack>
    dd96:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dd98:	|         move.l (sp),d0
    dd9a:	|         move.l d0,-(sp)
    dd9c:	|         jsr 61ce <findPerson>
    dda2:	|         addq.l #4,sp
    dda4:	|         move.l d0,4(sp)
	if (thisPerson)
    dda8:	|  /----- beq.s ddd0 <builtIn_isMoving+0x72>
	{
		setVariable (fun -> reg, SVT_INT, thisPerson -> walking);
    ddaa:	|  |      movea.l 4(sp),a0
    ddae:	|  |      move.w 52(a0),d0
    ddb2:	|  |      movea.w d0,a0
    ddb4:	|  |      movea.l 16(sp),a1
    ddb8:	|  |      move.l 28(a1),d0
    ddbc:	|  |      move.l a0,-(sp)
    ddbe:	|  |      pea 1 <_start+0x1>
    ddc2:	|  |      move.l d0,-(sp)
    ddc4:	|  |      jsr 1091a <setVariable>
    ddca:	|  |      lea 12(sp),sp
    ddce:	|  |  /-- bra.s ddea <builtIn_isMoving+0x8c>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    ddd0:	|  \--|-> movea.l 16(sp),a0
    ddd4:	|     |   move.l 28(a0),d0
    ddd8:	|     |   clr.l -(sp)
    ddda:	|     |   pea 1 <_start+0x1>
    ddde:	|     |   move.l d0,-(sp)
    dde0:	|     |   jsr 1091a <setVariable>
    dde6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ddea:	|     \-> moveq #2,d0
}
    ddec:	\-------> addq.l #8,sp
    ddee:	          rts

0000ddf0 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ddf0:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddf4:	          movea.l 20(sp),a0
    ddf8:	          move.l 24(a0),d0
    ddfc:	          move.l d0,-(sp)
    ddfe:	          pea 7 <_start+0x7>
    de02:	          lea 8(sp),a0
    de06:	          move.l a0,-(sp)
    de08:	          jsr 10048 <getValueType>
    de0e:	          lea 12(sp),sp
    de12:	          tst.w d0
    de14:	      /-- bne.s de1c <builtIn_fetchEvent+0x2c>
    de16:	      |   moveq #1,d0
    de18:	/-----|-- bra.w deb8 <builtIn_fetchEvent+0xc8>
	trimStack (fun -> stack);
    de1c:	|     \-> movea.l 20(sp),a0
    de20:	|         move.l 24(a0),d0
    de24:	|         move.l d0,-(sp)
    de26:	|         jsr 109ac <trimStack>
    de2c:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de2e:	|         movea.l 20(sp),a0
    de32:	|         move.l 24(a0),d0
    de36:	|         move.l d0,-(sp)
    de38:	|         pea 7 <_start+0x7>
    de3c:	|         moveq #12,d0
    de3e:	|         add.l sp,d0
    de40:	|         move.l d0,-(sp)
    de42:	|         jsr 10048 <getValueType>
    de48:	|         lea 12(sp),sp
    de4c:	|         tst.w d0
    de4e:	|     /-- bne.s de54 <builtIn_fetchEvent+0x64>
    de50:	|     |   moveq #1,d0
    de52:	+-----|-- bra.s deb8 <builtIn_fetchEvent+0xc8>
	trimStack (fun -> stack);
    de54:	|     \-> movea.l 20(sp),a0
    de58:	|         move.l 24(a0),d0
    de5c:	|         move.l d0,-(sp)
    de5e:	|         jsr 109ac <trimStack>
    de64:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    de66:	|         move.l (sp),d1
    de68:	|         move.l 4(sp),d0
    de6c:	|         move.l d1,-(sp)
    de6e:	|         move.l d0,-(sp)
    de70:	|         jsr 8dca <getCombinationFunction>
    de76:	|         addq.l #8,sp
    de78:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    de7c:	|  /----- beq.s de9c <builtIn_fetchEvent+0xac>
		setVariable (fun -> reg, SVT_FUNC, fNum);
    de7e:	|  |      movea.l 20(sp),a0
    de82:	|  |      move.l 28(a0),d0
    de86:	|  |      move.l 8(sp),-(sp)
    de8a:	|  |      pea 2 <_start+0x2>
    de8e:	|  |      move.l d0,-(sp)
    de90:	|  |      jsr 1091a <setVariable>
    de96:	|  |      lea 12(sp),sp
    de9a:	|  |  /-- bra.s deb6 <builtIn_fetchEvent+0xc6>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    de9c:	|  \--|-> movea.l 20(sp),a0
    dea0:	|     |   move.l 28(a0),d0
    dea4:	|     |   clr.l -(sp)
    dea6:	|     |   pea 1 <_start+0x1>
    deaa:	|     |   move.l d0,-(sp)
    deac:	|     |   jsr 1091a <setVariable>
    deb2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    deb6:	|     \-> moveq #2,d0
}
    deb8:	\-------> lea 12(sp),sp
    debc:	          rts

0000debe <builtIn_deleteFile>:

builtIn(deleteFile)
{
    debe:	       lea -24(sp),sp
    dec2:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    dec4:	       movea.l 36(sp),a0
    dec8:	       move.l 24(a0),d0
    decc:	       move.l d0,-(sp)
    dece:	       jsr 10620 <getTextFromAnyVar>
    ded4:	       addq.l #4,sp
    ded6:	       move.l d0,24(sp)
    trimStack(fun->stack);
    deda:	       movea.l 36(sp),a0
    dede:	       move.l 24(a0),d0
    dee2:	       move.l d0,-(sp)
    dee4:	       jsr 109ac <trimStack>
    deea:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    deec:	       move.l 24(sp),-(sp)
    def0:	       jsr 2fe <encodeFilename>
    def6:	       addq.l #4,sp
    def8:	       move.l d0,20(sp)
    FreeVec(namNormal);
    defc:	       move.l 24(sp),16(sp)
    df02:	       move.l 17b28 <SysBase>,d0
    df08:	       movea.l d0,a6
    df0a:	       movea.l 16(sp),a1
    df0e:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    df12:	       move.l 20(sp),-(sp)
    df16:	       jsr 9b82 <failSecurityCheck>
    df1c:	       addq.l #4,sp
    df1e:	       tst.w d0
    df20:	   /-- beq.s df26 <builtIn_deleteFile+0x68>
    df22:	   |   moveq #1,d0
    df24:	/--|-- bra.s df76 <builtIn_deleteFile+0xb8>
    setVariable(fun->reg, SVT_INT, DeleteFile(nam));
    df26:	|  \-> move.l 20(sp),12(sp)
    df2c:	|      move.l 17b30 <DOSBase>,d0
    df32:	|      movea.l d0,a6
    df34:	|      move.l 12(sp),d1
    df38:	|      jsr -72(a6)
    df3c:	|      move.l d0,8(sp)
    df40:	|      move.l 8(sp),d1
    df44:	|      movea.l 36(sp),a0
    df48:	|      move.l 28(a0),d0
    df4c:	|      move.l d1,-(sp)
    df4e:	|      pea 1 <_start+0x1>
    df52:	|      move.l d0,-(sp)
    df54:	|      jsr 1091a <setVariable>
    df5a:	|      lea 12(sp),sp
    FreeVec(nam);
    df5e:	|      move.l 20(sp),4(sp)
    df64:	|      move.l 17b28 <SysBase>,d0
    df6a:	|      movea.l d0,a6
    df6c:	|      movea.l 4(sp),a1
    df70:	|      jsr -690(a6)

    return BR_CONTINUE;
    df74:	|      moveq #2,d0
}
    df76:	\----> movea.l (sp)+,a6
    df78:	       lea 24(sp),sp
    df7c:	       rts

0000df7e <builtIn_renameFile>:

builtIn(renameFile)
{
    df7e:	       lea -40(sp),sp
    df82:	       move.l a6,-(sp)
    df84:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    df86:	       movea.l 56(sp),a0
    df8a:	       move.l 24(a0),d0
    df8e:	       move.l d0,-(sp)
    df90:	       jsr 10620 <getTextFromAnyVar>
    df96:	       addq.l #4,sp
    df98:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    df9c:	       move.l 44(sp),-(sp)
    dfa0:	       jsr 2fe <encodeFilename>
    dfa6:	       addq.l #4,sp
    dfa8:	       move.l d0,40(sp)
	trimStack(fun->stack);
    dfac:	       movea.l 56(sp),a0
    dfb0:	       move.l 24(a0),d0
    dfb4:	       move.l d0,-(sp)
    dfb6:	       jsr 109ac <trimStack>
    dfbc:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    dfbe:	       move.l 40(sp),-(sp)
    dfc2:	       jsr 9b82 <failSecurityCheck>
    dfc8:	       addq.l #4,sp
    dfca:	       tst.w d0
    dfcc:	   /-- beq.s dfd4 <builtIn_renameFile+0x56>
    dfce:	   |   moveq #1,d0
    dfd0:	/--|-- bra.w e0be <builtIn_renameFile+0x140>
	FreeVec(temp);
    dfd4:	|  \-> move.l 44(sp),36(sp)
    dfda:	|      move.l 17b28 <SysBase>,d0
    dfe0:	|      movea.l d0,a6
    dfe2:	|      movea.l 36(sp),a1
    dfe6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    dfea:	|      movea.l 56(sp),a0
    dfee:	|      move.l 24(a0),d0
    dff2:	|      move.l d0,-(sp)
    dff4:	|      jsr 10620 <getTextFromAnyVar>
    dffa:	|      addq.l #4,sp
    dffc:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    e000:	|      move.l 44(sp),-(sp)
    e004:	|      jsr 2fe <encodeFilename>
    e00a:	|      addq.l #4,sp
    e00c:	|      move.l d0,32(sp)
	trimStack(fun->stack);
    e010:	|      movea.l 56(sp),a0
    e014:	|      move.l 24(a0),d0
    e018:	|      move.l d0,-(sp)
    e01a:	|      jsr 109ac <trimStack>
    e020:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    e022:	|      move.l 32(sp),-(sp)
    e026:	|      jsr 9b82 <failSecurityCheck>
    e02c:	|      addq.l #4,sp
    e02e:	|      tst.w d0
    e030:	|  /-- beq.s e038 <builtIn_renameFile+0xba>
    e032:	|  |   moveq #1,d0
    e034:	+--|-- bra.w e0be <builtIn_renameFile+0x140>
	FreeVec(temp);
    e038:	|  \-> move.l 44(sp),28(sp)
    e03e:	|      move.l 17b28 <SysBase>,d0
    e044:	|      movea.l d0,a6
    e046:	|      movea.l 28(sp),a1
    e04a:	|      jsr -690(a6)

	setVariable(fun->reg, SVT_INT, Rename(nam, newnam));
    e04e:	|      move.l 32(sp),24(sp)
    e054:	|      move.l 40(sp),20(sp)
    e05a:	|      move.l 17b30 <DOSBase>,d0
    e060:	|      movea.l d0,a6
    e062:	|      move.l 24(sp),d1
    e066:	|      move.l 20(sp),d2
    e06a:	|      jsr -78(a6)
    e06e:	|      move.l d0,16(sp)
    e072:	|      move.l 16(sp),d1
    e076:	|      movea.l 56(sp),a0
    e07a:	|      move.l 28(a0),d0
    e07e:	|      move.l d1,-(sp)
    e080:	|      pea 1 <_start+0x1>
    e084:	|      move.l d0,-(sp)
    e086:	|      jsr 1091a <setVariable>
    e08c:	|      lea 12(sp),sp
	FreeVec(nam);
    e090:	|      move.l 32(sp),12(sp)
    e096:	|      move.l 17b28 <SysBase>,d0
    e09c:	|      movea.l d0,a6
    e09e:	|      movea.l 12(sp),a1
    e0a2:	|      jsr -690(a6)
	FreeVec(newnam);
    e0a6:	|      move.l 40(sp),8(sp)
    e0ac:	|      move.l 17b28 <SysBase>,d0
    e0b2:	|      movea.l d0,a6
    e0b4:	|      movea.l 8(sp),a1
    e0b8:	|      jsr -690(a6)

	return BR_CONTINUE;
    e0bc:	|      moveq #2,d0
}
    e0be:	\----> move.l (sp)+,d2
    e0c0:	       movea.l (sp)+,a6
    e0c2:	       lea 40(sp),sp
    e0c6:	       rts

0000e0c8 <builtIn_cacheSound>:

builtIn(cacheSound)
{
    e0c8:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0ca:	       movea.l 12(sp),a0
    e0ce:	       move.l 24(a0),d0
    e0d2:	       move.l d0,-(sp)
    e0d4:	       pea 5 <_start+0x5>
    e0d8:	       move.l sp,d0
    e0da:	       addq.l #8,d0
    e0dc:	       move.l d0,-(sp)
    e0de:	       jsr 10048 <getValueType>
    e0e4:	       lea 12(sp),sp
    e0e8:	       tst.w d0
    e0ea:	   /-- bne.s e0f0 <builtIn_cacheSound+0x28>
    e0ec:	   |   moveq #1,d0
    e0ee:	/--|-- bra.s e11a <builtIn_cacheSound+0x52>
	trimStack (fun -> stack);
    e0f0:	|  \-> movea.l 12(sp),a0
    e0f4:	|      move.l 24(a0),d0
    e0f8:	|      move.l d0,-(sp)
    e0fa:	|      jsr 109ac <trimStack>
    e100:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    e102:	|      move.l (sp),d0
    e104:	|      move.l d0,-(sp)
    e106:	|      jsr 8978 <cacheSound>
    e10c:	|      addq.l #4,sp
    e10e:	|      moveq #-1,d1
    e110:	|      cmp.l d0,d1
    e112:	|  /-- bne.s e118 <builtIn_cacheSound+0x50>
    e114:	|  |   moveq #1,d0
    e116:	+--|-- bra.s e11a <builtIn_cacheSound+0x52>
	return BR_CONTINUE;
    e118:	|  \-> moveq #2,d0
}
    e11a:	\----> addq.l #4,sp
    e11c:	       rts

0000e11e <builtIn_burnString>:
	trimStack (fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    e11e:	pea 15989 <zbuffer.c.d110ca03+0x443>
    e124:	jsr 12018 <KPrintF>
    e12a:	addq.l #4,sp
	return BR_CONTINUE;
    e12c:	moveq #2,d0
}
    e12e:	rts

0000e130 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    e130:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e134:	          movea.l 20(sp),a0
    e138:	          move.l 24(a0),d0
    e13c:	          move.l d0,-(sp)
    e13e:	          pea 1 <_start+0x1>
    e142:	          moveq #12,d0
    e144:	          add.l sp,d0
    e146:	          move.l d0,-(sp)
    e148:	          jsr 10048 <getValueType>
    e14e:	          lea 12(sp),sp
    e152:	          tst.w d0
    e154:	      /-- bne.s e15c <builtIn_setCharacterSpinSpeed+0x2c>
    e156:	      |   moveq #1,d0
    e158:	/-----|-- bra.w e1fe <builtIn_setCharacterSpinSpeed+0xce>
	trimStack (fun -> stack);
    e15c:	|     \-> movea.l 20(sp),a0
    e160:	|         move.l 24(a0),d0
    e164:	|         move.l d0,-(sp)
    e166:	|         jsr 109ac <trimStack>
    e16c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e16e:	|         movea.l 20(sp),a0
    e172:	|         move.l 24(a0),d0
    e176:	|         move.l d0,-(sp)
    e178:	|         pea 7 <_start+0x7>
    e17c:	|         lea 8(sp),a0
    e180:	|         move.l a0,-(sp)
    e182:	|         jsr 10048 <getValueType>
    e188:	|         lea 12(sp),sp
    e18c:	|         tst.w d0
    e18e:	|     /-- bne.s e194 <builtIn_setCharacterSpinSpeed+0x64>
    e190:	|     |   moveq #1,d0
    e192:	+-----|-- bra.s e1fe <builtIn_setCharacterSpinSpeed+0xce>
	trimStack (fun -> stack);
    e194:	|     \-> movea.l 20(sp),a0
    e198:	|         move.l 24(a0),d0
    e19c:	|         move.l d0,-(sp)
    e19e:	|         jsr 109ac <trimStack>
    e1a4:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e1a6:	|         move.l (sp),d0
    e1a8:	|         move.l d0,-(sp)
    e1aa:	|         jsr 61ce <findPerson>
    e1b0:	|         addq.l #4,sp
    e1b2:	|         move.l d0,8(sp)

	if (thisPerson) {
    e1b6:	|  /----- beq.s e1e2 <builtIn_setCharacterSpinSpeed+0xb2>
		thisPerson -> spinSpeed = speed;
    e1b8:	|  |      move.l 4(sp),d0
    e1bc:	|  |      movea.l 8(sp),a0
    e1c0:	|  |      move.l d0,110(a0)
		setVariable (fun -> reg, SVT_INT, 1);
    e1c4:	|  |      movea.l 20(sp),a0
    e1c8:	|  |      move.l 28(a0),d0
    e1cc:	|  |      pea 1 <_start+0x1>
    e1d0:	|  |      pea 1 <_start+0x1>
    e1d4:	|  |      move.l d0,-(sp)
    e1d6:	|  |      jsr 1091a <setVariable>
    e1dc:	|  |      lea 12(sp),sp
    e1e0:	|  |  /-- bra.s e1fc <builtIn_setCharacterSpinSpeed+0xcc>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    e1e2:	|  \--|-> movea.l 20(sp),a0
    e1e6:	|     |   move.l 28(a0),d0
    e1ea:	|     |   clr.l -(sp)
    e1ec:	|     |   pea 1 <_start+0x1>
    e1f0:	|     |   move.l d0,-(sp)
    e1f2:	|     |   jsr 1091a <setVariable>
    e1f8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e1fc:	|     \-> moveq #2,d0
}
    e1fe:	\-------> lea 12(sp),sp
    e202:	          rts

0000e204 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    e204:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e208:	          movea.l 20(sp),a0
    e20c:	          move.l 24(a0),d0
    e210:	          move.l d0,-(sp)
    e212:	          pea 1 <_start+0x1>
    e216:	          moveq #12,d0
    e218:	          add.l sp,d0
    e21a:	          move.l d0,-(sp)
    e21c:	          jsr 10048 <getValueType>
    e222:	          lea 12(sp),sp
    e226:	          tst.w d0
    e228:	      /-- bne.s e230 <builtIn_setCharacterAngleOffset+0x2c>
    e22a:	      |   moveq #1,d0
    e22c:	/-----|-- bra.w e2d2 <builtIn_setCharacterAngleOffset+0xce>
	trimStack (fun -> stack);
    e230:	|     \-> movea.l 20(sp),a0
    e234:	|         move.l 24(a0),d0
    e238:	|         move.l d0,-(sp)
    e23a:	|         jsr 109ac <trimStack>
    e240:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e242:	|         movea.l 20(sp),a0
    e246:	|         move.l 24(a0),d0
    e24a:	|         move.l d0,-(sp)
    e24c:	|         pea 7 <_start+0x7>
    e250:	|         lea 8(sp),a0
    e254:	|         move.l a0,-(sp)
    e256:	|         jsr 10048 <getValueType>
    e25c:	|         lea 12(sp),sp
    e260:	|         tst.w d0
    e262:	|     /-- bne.s e268 <builtIn_setCharacterAngleOffset+0x64>
    e264:	|     |   moveq #1,d0
    e266:	+-----|-- bra.s e2d2 <builtIn_setCharacterAngleOffset+0xce>
	trimStack (fun -> stack);
    e268:	|     \-> movea.l 20(sp),a0
    e26c:	|         move.l 24(a0),d0
    e270:	|         move.l d0,-(sp)
    e272:	|         jsr 109ac <trimStack>
    e278:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e27a:	|         move.l (sp),d0
    e27c:	|         move.l d0,-(sp)
    e27e:	|         jsr 61ce <findPerson>
    e284:	|         addq.l #4,sp
    e286:	|         move.l d0,8(sp)

	if (thisPerson) {
    e28a:	|  /----- beq.s e2b6 <builtIn_setCharacterAngleOffset+0xb2>
		thisPerson -> angleOffset = angle;
    e28c:	|  |      move.l 4(sp),d0
    e290:	|  |      movea.l 8(sp),a0
    e294:	|  |      move.l d0,88(a0)
		setVariable (fun -> reg, SVT_INT, 1);
    e298:	|  |      movea.l 20(sp),a0
    e29c:	|  |      move.l 28(a0),d0
    e2a0:	|  |      pea 1 <_start+0x1>
    e2a4:	|  |      pea 1 <_start+0x1>
    e2a8:	|  |      move.l d0,-(sp)
    e2aa:	|  |      jsr 1091a <setVariable>
    e2b0:	|  |      lea 12(sp),sp
    e2b4:	|  |  /-- bra.s e2d0 <builtIn_setCharacterAngleOffset+0xcc>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    e2b6:	|  \--|-> movea.l 20(sp),a0
    e2ba:	|     |   move.l 28(a0),d0
    e2be:	|     |   clr.l -(sp)
    e2c0:	|     |   pea 1 <_start+0x1>
    e2c4:	|     |   move.l d0,-(sp)
    e2c6:	|     |   jsr 1091a <setVariable>
    e2cc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e2d0:	|     \-> moveq #2,d0
}
    e2d2:	\-------> lea 12(sp),sp
    e2d6:	          rts

0000e2d8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    e2d8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2da:	       movea.l 12(sp),a0
    e2de:	       move.l 24(a0),d0
    e2e2:	       move.l d0,-(sp)
    e2e4:	       pea 1 <_start+0x1>
    e2e8:	       move.l sp,d0
    e2ea:	       addq.l #8,d0
    e2ec:	       move.l d0,-(sp)
    e2ee:	       jsr 10048 <getValueType>
    e2f4:	       lea 12(sp),sp
    e2f8:	       tst.w d0
    e2fa:	   /-- bne.s e300 <builtIn_transitionMode+0x28>
    e2fc:	   |   moveq #1,d0
    e2fe:	/--|-- bra.s e33a <builtIn_transitionMode+0x62>
	fadeMode = n;
    e300:	|  \-> move.l (sp),d0
    e302:	|      move.l d0,d0
    e304:	|      move.b d0,1656e <fadeMode>
	trimStack (fun -> stack);
    e30a:	|      movea.l 12(sp),a0
    e30e:	|      move.l 24(a0),d0
    e312:	|      move.l d0,-(sp)
    e314:	|      jsr 109ac <trimStack>
    e31a:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, 1);
    e31c:	|      movea.l 12(sp),a0
    e320:	|      move.l 28(a0),d0
    e324:	|      pea 1 <_start+0x1>
    e328:	|      pea 1 <_start+0x1>
    e32c:	|      move.l d0,-(sp)
    e32e:	|      jsr 1091a <setVariable>
    e334:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e338:	|      moveq #2,d0
}
    e33a:	\----> addq.l #4,sp
    e33c:	       rts

0000e33e <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (fun -> stack);
    e33e:	movea.l 8(sp),a0
    e342:	move.l 24(a0),d0
    e346:	move.l d0,-(sp)
    e348:	jsr 109ac <trimStack>
    e34e:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, TRUE);
    e350:	movea.l 8(sp),a0
    e354:	move.l 28(a0),d0
    e358:	pea 1 <_start+0x1>
    e35c:	pea 1 <_start+0x1>
    e360:	move.l d0,-(sp)
    e362:	jsr 1091a <setVariable>
    e368:	lea 12(sp),sp
	return BR_CONTINUE;
    e36c:	moveq #2,d0
}
    e36e:	rts

0000e370 <builtIn_getSoundCache>:
	if (! checkNew (fun -> reg->varData.theStack)) return BR_ERROR;
	fun -> reg->varData.theStack -> first = NULL;
	fun -> reg->varData.theStack -> last = NULL;
	fun -> reg->varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (fun -> reg->varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    e370:	pea 159b3 <zbuffer.c.d110ca03+0x46d>
    e376:	jsr 12018 <KPrintF>
    e37c:	addq.l #4,sp
	return BR_CONTINUE;
    e37e:	moveq #2,d0
}
    e380:	rts

0000e382 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    e382:	       lea -16(sp),sp
    e386:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    e388:	       movea.l 28(sp),a0
    e38c:	       move.l 24(a0),d0
    e390:	       move.l d0,-(sp)
    e392:	       jsr 10620 <getTextFromAnyVar>
    e398:	       addq.l #4,sp
    e39a:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    e39e:	   /-- bne.s e3a6 <builtIn_saveCustomData+0x24>
    e3a0:	   |   moveq #1,d0
    e3a2:	/--|-- bra.w e45c <builtIn_saveCustomData+0xda>

	char * fileName = encodeFilename(fileNameB);
    e3a6:	|  \-> move.l 16(sp),-(sp)
    e3aa:	|      jsr 2fe <encodeFilename>
    e3b0:	|      addq.l #4,sp
    e3b2:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    e3b6:	|      move.l 16(sp),8(sp)
    e3bc:	|      move.l 17b28 <SysBase>,d0
    e3c2:	|      movea.l d0,a6
    e3c4:	|      movea.l 8(sp),a1
    e3c8:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    e3cc:	|      move.l 12(sp),-(sp)
    e3d0:	|      jsr 9b82 <failSecurityCheck>
    e3d6:	|      addq.l #4,sp
    e3d8:	|      tst.w d0
    e3da:	|  /-- beq.s e3e0 <builtIn_saveCustomData+0x5e>
    e3dc:	|  |   moveq #1,d0
    e3de:	+--|-- bra.s e45c <builtIn_saveCustomData+0xda>
	trimStack(fun->stack);
    e3e0:	|  \-> movea.l 28(sp),a0
    e3e4:	|      move.l 24(a0),d0
    e3e8:	|      move.l d0,-(sp)
    e3ea:	|      jsr 109ac <trimStack>
    e3f0:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    e3f2:	|      movea.l 28(sp),a0
    e3f6:	|      movea.l 24(a0),a0
    e3fa:	|      move.l (a0),d0
    e3fc:	|      moveq #6,d1
    e3fe:	|      cmp.l d0,d1
    e400:	|  /-- beq.s e414 <builtIn_saveCustomData+0x92>
		KPrintF("First parameter isn't a stack");
    e402:	|  |   pea 159e0 <zbuffer.c.d110ca03+0x49a>
    e408:	|  |   jsr 12018 <KPrintF>
    e40e:	|  |   addq.l #4,sp
		return BR_ERROR;
    e410:	|  |   moveq #1,d0
    e412:	+--|-- bra.s e45c <builtIn_saveCustomData+0xda>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    e414:	|  \-> movea.l 28(sp),a0
    e418:	|      move.l 24(a0),d0
    e41c:	|      move.l d0,-(sp)
    e41e:	|      move.l 16(sp),-(sp)
    e422:	|      jsr 97d2 <stackToFile>
    e428:	|      addq.l #8,sp
    e42a:	|      tst.w d0
    e42c:	|  /-- bne.s e432 <builtIn_saveCustomData+0xb0>
    e42e:	|  |   moveq #1,d0
    e430:	+--|-- bra.s e45c <builtIn_saveCustomData+0xda>
	trimStack(fun->stack);
    e432:	|  \-> movea.l 28(sp),a0
    e436:	|      move.l 24(a0),d0
    e43a:	|      move.l d0,-(sp)
    e43c:	|      jsr 109ac <trimStack>
    e442:	|      addq.l #4,sp
	FreeVec(fileName);
    e444:	|      move.l 12(sp),4(sp)
    e44a:	|      move.l 17b28 <SysBase>,d0
    e450:	|      movea.l d0,a6
    e452:	|      movea.l 4(sp),a1
    e456:	|      jsr -690(a6)
	return BR_CONTINUE;
    e45a:	|      moveq #2,d0
}
    e45c:	\----> movea.l (sp)+,a6
    e45e:	       lea 16(sp),sp
    e462:	       rts

0000e464 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    e464:	       lea -28(sp),sp
    e468:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e46a:	       movea.l 40(sp),a0
    e46e:	       move.l 24(a0),d0
    e472:	       move.l d0,-(sp)
    e474:	       jsr 10620 <getTextFromAnyVar>
    e47a:	       addq.l #4,sp
    e47c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    e480:	   /-- bne.s e488 <builtIn_loadCustomData+0x24>
    e482:	   |   moveq #1,d0
    e484:	/--|-- bra.w e5a2 <builtIn_loadCustomData+0x13e>

	char * newText = encodeFilename(newTextA);
    e488:	|  \-> move.l 28(sp),-(sp)
    e48c:	|      jsr 2fe <encodeFilename>
    e492:	|      addq.l #4,sp
    e494:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    e498:	|      move.l 28(sp),20(sp)
    e49e:	|      move.l 17b28 <SysBase>,d0
    e4a4:	|      movea.l d0,a6
    e4a6:	|      movea.l 20(sp),a1
    e4aa:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    e4ae:	|      move.l 24(sp),-(sp)
    e4b2:	|      jsr 9b82 <failSecurityCheck>
    e4b8:	|      addq.l #4,sp
    e4ba:	|      tst.w d0
    e4bc:	|  /-- beq.s e4c4 <builtIn_loadCustomData+0x60>
    e4be:	|  |   moveq #1,d0
    e4c0:	+--|-- bra.w e5a2 <builtIn_loadCustomData+0x13e>
	trimStack(fun->stack);
    e4c4:	|  \-> movea.l 40(sp),a0
    e4c8:	|      move.l 24(a0),d0
    e4cc:	|      move.l d0,-(sp)
    e4ce:	|      jsr 109ac <trimStack>
    e4d4:	|      addq.l #4,sp

	unlinkVar(fun->reg);
    e4d6:	|      movea.l 40(sp),a0
    e4da:	|      move.l 28(a0),d0
    e4de:	|      move.l d0,-(sp)
    e4e0:	|      jsr 10296 <unlinkVar>
    e4e6:	|      addq.l #4,sp
	fun->reg->varType = SVT_STACK;
    e4e8:	|      movea.l 40(sp),a0
    e4ec:	|      movea.l 28(a0),a0
    e4f0:	|      moveq #6,d0
    e4f2:	|      move.l d0,(a0)
	fun->reg->varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e4f4:	|      moveq #12,d0
    e4f6:	|      move.l d0,16(sp)
    e4fa:	|      clr.l 12(sp)
    e4fe:	|      move.l 17b28 <SysBase>,d0
    e504:	|      movea.l d0,a6
    e506:	|      move.l 16(sp),d0
    e50a:	|      move.l 12(sp),d1
    e50e:	|      jsr -684(a6)
    e512:	|      move.l d0,8(sp)
    e516:	|      move.l 8(sp),d0
    e51a:	|      movea.l 40(sp),a0
    e51e:	|      movea.l 28(a0),a0
    e522:	|      move.l d0,4(a0)
	if (!fun->reg->varData.theStack) return BR_ERROR;
    e526:	|      movea.l 40(sp),a0
    e52a:	|      movea.l 28(a0),a0
    e52e:	|      move.l 4(a0),d0
    e532:	|  /-- bne.s e538 <builtIn_loadCustomData+0xd4>
    e534:	|  |   moveq #1,d0
    e536:	+--|-- bra.s e5a2 <builtIn_loadCustomData+0x13e>
	fun->reg->varData.theStack->first = NULL;
    e538:	|  \-> movea.l 40(sp),a0
    e53c:	|      movea.l 28(a0),a0
    e540:	|      movea.l 4(a0),a0
    e544:	|      clr.l (a0)
	fun->reg->varData.theStack->last = NULL;
    e546:	|      movea.l 40(sp),a0
    e54a:	|      movea.l 28(a0),a0
    e54e:	|      movea.l 4(a0),a0
    e552:	|      clr.l 4(a0)
	fun->reg->varData.theStack->timesUsed = 1;
    e556:	|      movea.l 40(sp),a0
    e55a:	|      movea.l 28(a0),a0
    e55e:	|      movea.l 4(a0),a0
    e562:	|      moveq #1,d0
    e564:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg->varData.theStack)) return BR_ERROR;
    e568:	|      movea.l 40(sp),a0
    e56c:	|      movea.l 28(a0),a0
    e570:	|      move.l 4(a0),d0
    e574:	|      move.l d0,-(sp)
    e576:	|      move.l 28(sp),-(sp)
    e57a:	|      jsr 920c <fileToStack>
    e580:	|      addq.l #8,sp
    e582:	|      tst.w d0
    e584:	|  /-- bne.s e58a <builtIn_loadCustomData+0x126>
    e586:	|  |   moveq #1,d0
    e588:	+--|-- bra.s e5a2 <builtIn_loadCustomData+0x13e>
	FreeVec(newText);
    e58a:	|  \-> move.l 24(sp),4(sp)
    e590:	|      move.l 17b28 <SysBase>,d0
    e596:	|      movea.l d0,a6
    e598:	|      movea.l 4(sp),a1
    e59c:	|      jsr -690(a6)
	return BR_CONTINUE;
    e5a0:	|      moveq #2,d0
}
    e5a2:	\----> movea.l (sp)+,a6
    e5a4:	       lea 28(sp),sp
    e5a8:	       rts

0000e5aa <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    e5aa:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5ac:	       movea.l 12(sp),a0
    e5b0:	       move.l 24(a0),d0
    e5b4:	       move.l d0,-(sp)
    e5b6:	       pea 1 <_start+0x1>
    e5ba:	       move.l sp,d0
    e5bc:	       addq.l #8,d0
    e5be:	       move.l d0,-(sp)
    e5c0:	       jsr 10048 <getValueType>
    e5c6:	       lea 12(sp),sp
    e5ca:	       tst.w d0
    e5cc:	   /-- bne.s e5d2 <builtIn_setCustomEncoding+0x28>
    e5ce:	   |   moveq #1,d0
    e5d0:	/--|-- bra.s e60c <builtIn_setCustomEncoding+0x62>
	saveEncoding = n;
    e5d2:	|  \-> move.l (sp),d0
    e5d4:	|      move.l d0,d0
    e5d6:	|      move.w d0,17bce <saveEncoding>
	trimStack (fun -> stack);
    e5dc:	|      movea.l 12(sp),a0
    e5e0:	|      move.l 24(a0),d0
    e5e4:	|      move.l d0,-(sp)
    e5e6:	|      jsr 109ac <trimStack>
    e5ec:	|      addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, 1);
    e5ee:	|      movea.l 12(sp),a0
    e5f2:	|      move.l 28(a0),d0
    e5f6:	|      pea 1 <_start+0x1>
    e5fa:	|      pea 1 <_start+0x1>
    e5fe:	|      move.l d0,-(sp)
    e600:	|      jsr 1091a <setVariable>
    e606:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e60a:	|      moveq #2,d0
}
    e60c:	\----> addq.l #4,sp
    e60e:	       rts

0000e610 <builtIn_freeSound>:

builtIn(freeSound)
{
    e610:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e612:	       movea.l 12(sp),a0
    e616:	       move.l 24(a0),d0
    e61a:	       move.l d0,-(sp)
    e61c:	       pea 5 <_start+0x5>
    e620:	       move.l sp,d0
    e622:	       addq.l #8,d0
    e624:	       move.l d0,-(sp)
    e626:	       jsr 10048 <getValueType>
    e62c:	       lea 12(sp),sp
    e630:	       tst.w d0
    e632:	   /-- bne.s e638 <builtIn_freeSound+0x28>
    e634:	   |   moveq #1,d0
    e636:	/--|-- bra.s e658 <builtIn_freeSound+0x48>
	trimStack (fun -> stack);
    e638:	|  \-> movea.l 12(sp),a0
    e63c:	|      move.l 24(a0),d0
    e640:	|      move.l d0,-(sp)
    e642:	|      jsr 109ac <trimStack>
    e648:	|      addq.l #4,sp
	huntKillFreeSound (v);
    e64a:	|      move.l (sp),d0
    e64c:	|      move.l d0,-(sp)
    e64e:	|      jsr 897c <huntKillFreeSound>
    e654:	|      addq.l #4,sp
	return BR_CONTINUE;
    e656:	|      moveq #2,d0
}
    e658:	\----> addq.l #4,sp
    e65a:	       rts

0000e65c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    e65c:	       lea -12(sp),sp
    e660:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e662:	       movea.l 24(sp),a0
    e666:	       move.l 24(a0),d0
    e66a:	       move.l d0,-(sp)
    e66c:	       pea 1 <_start+0x1>
    e670:	       moveq #16,d0
    e672:	       add.l sp,d0
    e674:	       move.l d0,-(sp)
    e676:	       jsr 10048 <getValueType>
    e67c:	       lea 12(sp),sp
    e680:	       tst.w d0
    e682:	   /-- bne.s e68a <builtIn_parallaxAdd+0x2e>
    e684:	   |   moveq #1,d0
    e686:	/--|-- bra.w e766 <builtIn_parallaxAdd+0x10a>
		trimStack (fun -> stack);
    e68a:	|  \-> movea.l 24(sp),a0
    e68e:	|      move.l 24(a0),d0
    e692:	|      move.l d0,-(sp)
    e694:	|      jsr 109ac <trimStack>
    e69a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e69c:	|      movea.l 24(sp),a0
    e6a0:	|      move.l 24(a0),d0
    e6a4:	|      move.l d0,-(sp)
    e6a6:	|      pea 1 <_start+0x1>
    e6aa:	|      moveq #20,d0
    e6ac:	|      add.l sp,d0
    e6ae:	|      move.l d0,-(sp)
    e6b0:	|      jsr 10048 <getValueType>
    e6b6:	|      lea 12(sp),sp
    e6ba:	|      tst.w d0
    e6bc:	|  /-- bne.s e6c4 <builtIn_parallaxAdd+0x68>
    e6be:	|  |   moveq #1,d0
    e6c0:	+--|-- bra.w e766 <builtIn_parallaxAdd+0x10a>
		trimStack (fun -> stack);
    e6c4:	|  \-> movea.l 24(sp),a0
    e6c8:	|      move.l 24(a0),d0
    e6cc:	|      move.l d0,-(sp)
    e6ce:	|      jsr 109ac <trimStack>
    e6d4:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6d6:	|      movea.l 24(sp),a0
    e6da:	|      move.l 24(a0),d0
    e6de:	|      move.l d0,-(sp)
    e6e0:	|      pea 5 <_start+0x5>
    e6e4:	|      lea 12(sp),a0
    e6e8:	|      move.l a0,-(sp)
    e6ea:	|      jsr 10048 <getValueType>
    e6f0:	|      lea 12(sp),sp
    e6f4:	|      tst.w d0
    e6f6:	|  /-- bne.s e6fc <builtIn_parallaxAdd+0xa0>
    e6f8:	|  |   moveq #1,d0
    e6fa:	+--|-- bra.s e766 <builtIn_parallaxAdd+0x10a>
		trimStack (fun -> stack);
    e6fc:	|  \-> movea.l 24(sp),a0
    e700:	|      move.l 24(a0),d0
    e704:	|      move.l d0,-(sp)
    e706:	|      jsr 109ac <trimStack>
    e70c:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    e70e:	|      move.l 8(sp),d0
    e712:	|      move.l d0,d0
    e714:	|      moveq #0,d2
    e716:	|      move.w d0,d2
    e718:	|      move.l 12(sp),d0
    e71c:	|      move.l d0,d0
    e71e:	|      moveq #0,d1
    e720:	|      move.w d0,d1
    e722:	|      move.l 4(sp),d0
    e726:	|      move.l d0,d0
    e728:	|      move.w d0,d0
    e72a:	|      andi.l #65535,d0
    e730:	|      move.l d2,-(sp)
    e732:	|      move.l d1,-(sp)
    e734:	|      move.l d0,-(sp)
    e736:	|      jsr 8c24 <loadParallax>
    e73c:	|      lea 12(sp),sp
    e740:	|      tst.w d0
    e742:	|  /-- bne.s e748 <builtIn_parallaxAdd+0xec>
    e744:	|  |   moveq #1,d0
    e746:	+--|-- bra.s e766 <builtIn_parallaxAdd+0x10a>
		setVariable (fun -> reg, SVT_INT, 1);
    e748:	|  \-> movea.l 24(sp),a0
    e74c:	|      move.l 28(a0),d0
    e750:	|      pea 1 <_start+0x1>
    e754:	|      pea 1 <_start+0x1>
    e758:	|      move.l d0,-(sp)
    e75a:	|      jsr 1091a <setVariable>
    e760:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    e764:	|      moveq #2,d0
}
    e766:	\----> move.l (sp)+,d2
    e768:	       lea 12(sp),sp
    e76c:	       rts

0000e76e <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    e76e:	jsr 8b8c <killParallax>
	setVariable (fun -> reg, SVT_INT, 1);
    e774:	movea.l 8(sp),a0
    e778:	move.l 28(a0),d0
    e77c:	pea 1 <_start+0x1>
    e780:	pea 1 <_start+0x1>
    e784:	move.l d0,-(sp)
    e786:	jsr 1091a <setVariable>
    e78c:	lea 12(sp),sp
	return BR_CONTINUE;
    e790:	moveq #2,d0
}
    e792:	rts

0000e794 <builtIn_getPixelColour>:
	if (! checkNew (fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    e794:	pea 159fe <zbuffer.c.d110ca03+0x4b8>
    e79a:	jsr 12018 <KPrintF>
    e7a0:	addq.l #4,sp

	return BR_CONTINUE;
    e7a2:	moveq #2,d0
}
    e7a4:	rts

0000e7a6 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    e7a6:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e7a8:	             movea.l 16(sp),a0
    e7ac:	             movea.l 24(a0),a0
    e7b0:	             move.l (a0),d0
    e7b2:	             moveq #1,d1
    e7b4:	             cmp.l d0,d1
    e7b6:	      /----- beq.s e804 <builtIn_makeFastArray+0x5e>
    e7b8:	      |      moveq #6,d1
    e7ba:	      |      cmp.l d0,d1
    e7bc:	/-----|----- bne.w e846 <builtIn_makeFastArray+0xa0>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (fun -> reg, fun -> stack -> thisVar.varData.theStack);
    e7c0:	|     |      movea.l 16(sp),a0
    e7c4:	|     |      movea.l 24(a0),a0
    e7c8:	|     |      move.l 4(a0),d1
    e7cc:	|     |      movea.l 16(sp),a0
    e7d0:	|     |      move.l 28(a0),d0
    e7d4:	|     |      move.l d1,-(sp)
    e7d6:	|     |      move.l d0,-(sp)
    e7d8:	|     |      jsr 100fa <makeFastArrayFromStack>
    e7de:	|     |      addq.l #8,sp
    e7e0:	|     |      move.w d0,6(sp)
			trimStack (fun -> stack);
    e7e4:	|     |      movea.l 16(sp),a0
    e7e8:	|     |      move.l 24(a0),d0
    e7ec:	|     |      move.l d0,-(sp)
    e7ee:	|     |      jsr 109ac <trimStack>
    e7f4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    e7f6:	|     |      tst.w 6(sp)
    e7fa:	|     |  /-- beq.s e800 <builtIn_makeFastArray+0x5a>
    e7fc:	|     |  |   moveq #2,d0
    e7fe:	|  /--|--|-- bra.s e858 <builtIn_makeFastArray+0xb2>
    e800:	|  |  |  \-> moveq #1,d0
    e802:	|  +--|----- bra.s e858 <builtIn_makeFastArray+0xb2>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    e804:	|  |  \----> movea.l 16(sp),a0
    e808:	|  |         movea.l 24(a0),a0
    e80c:	|  |         move.l 4(a0),2(sp)
			trimStack (fun -> stack);
    e812:	|  |         movea.l 16(sp),a0
    e816:	|  |         move.l 24(a0),d0
    e81a:	|  |         move.l d0,-(sp)
    e81c:	|  |         jsr 109ac <trimStack>
    e822:	|  |         addq.l #4,sp
			return makeFastArraySize (fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    e824:	|  |         movea.l 16(sp),a0
    e828:	|  |         move.l 28(a0),d0
    e82c:	|  |         move.l 2(sp),-(sp)
    e830:	|  |         move.l d0,-(sp)
    e832:	|  |         jsr 10164 <makeFastArraySize>
    e838:	|  |         addq.l #8,sp
    e83a:	|  |         tst.w d0
    e83c:	|  |     /-- beq.s e842 <builtIn_makeFastArray+0x9c>
    e83e:	|  |     |   moveq #2,d0
    e840:	|  +-----|-- bra.s e858 <builtIn_makeFastArray+0xb2>
    e842:	|  |     \-> moveq #1,d0
    e844:	|  +-------- bra.s e858 <builtIn_makeFastArray+0xb2>
		}
			break;

		default:
			break;
    e846:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    e848:	   |         pea 15a27 <zbuffer.c.d110ca03+0x4e1>
    e84e:	   |         jsr 12018 <KPrintF>
    e854:	   |         addq.l #4,sp
	return BR_ERROR;
    e856:	   |         moveq #1,d0
}
    e858:	   \-------> addq.l #8,sp
    e85a:	             rts

0000e85c <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    e85c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e85e:	          movea.l 16(sp),a0
    e862:	          move.l 24(a0),d0
    e866:	          move.l d0,-(sp)
    e868:	          pea 7 <_start+0x7>
    e86c:	          move.l sp,d0
    e86e:	          addq.l #8,d0
    e870:	          move.l d0,-(sp)
    e872:	          jsr 10048 <getValueType>
    e878:	          lea 12(sp),sp
    e87c:	          tst.w d0
    e87e:	      /-- bne.s e886 <builtIn_getCharacterScale+0x2a>
    e880:	      |   moveq #1,d0
    e882:	/-----|-- bra.w e906 <builtIn_getCharacterScale+0xaa>
	trimStack (fun -> stack);
    e886:	|     \-> movea.l 16(sp),a0
    e88a:	|         move.l 24(a0),d0
    e88e:	|         move.l d0,-(sp)
    e890:	|         jsr 109ac <trimStack>
    e896:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e898:	|         move.l (sp),d0
    e89a:	|         move.l d0,-(sp)
    e89c:	|         jsr 61ce <findPerson>
    e8a2:	|         addq.l #4,sp
    e8a4:	|         move.l d0,4(sp)
	if (pers) {
    e8a8:	|  /----- beq.s e8ea <builtIn_getCharacterScale+0x8e>
		setVariable (fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    e8aa:	|  |      movea.l 4(sp),a0
    e8ae:	|  |      move.l 20(a0),d0
    e8b2:	|  |      move.l #1120403456,-(sp)
    e8b8:	|  |      move.l d0,-(sp)
    e8ba:	|  |      jsr 12522 <__mulsf3>
    e8c0:	|  |      addq.l #8,sp
    e8c2:	|  |      move.l d0,-(sp)
    e8c4:	|  |      jsr 12408 <__fixsfsi>
    e8ca:	|  |      addq.l #4,sp
    e8cc:	|  |      move.l d0,d1
    e8ce:	|  |      movea.l 16(sp),a0
    e8d2:	|  |      move.l 28(a0),d0
    e8d6:	|  |      move.l d1,-(sp)
    e8d8:	|  |      pea 1 <_start+0x1>
    e8dc:	|  |      move.l d0,-(sp)
    e8de:	|  |      jsr 1091a <setVariable>
    e8e4:	|  |      lea 12(sp),sp
    e8e8:	|  |  /-- bra.s e904 <builtIn_getCharacterScale+0xa8>
	} else {
		setVariable (fun -> reg, SVT_INT, 0);
    e8ea:	|  \--|-> movea.l 16(sp),a0
    e8ee:	|     |   move.l 28(a0),d0
    e8f2:	|     |   clr.l -(sp)
    e8f4:	|     |   pea 1 <_start+0x1>
    e8f8:	|     |   move.l d0,-(sp)
    e8fa:	|     |   jsr 1091a <setVariable>
    e900:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e904:	|     \-> moveq #2,d0
}
    e906:	\-------> addq.l #8,sp
    e908:	          rts

0000e90a <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, gameSettings.languageID);
    e90a:	move.l 17bf2 <gameSettings>,d0
    e910:	move.l d0,d1
    e912:	movea.l 8(sp),a0
    e916:	move.l 28(a0),d0
    e91a:	move.l d1,-(sp)
    e91c:	pea 1 <_start+0x1>
    e920:	move.l d0,-(sp)
    e922:	jsr 1091a <setVariable>
    e928:	lea 12(sp),sp
	return BR_CONTINUE;
    e92c:	moveq #2,d0
}
    e92e:	rts

0000e930 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (fun -> stack);
    e930:	movea.l 8(sp),a0
    e934:	move.l 24(a0),d0
    e938:	move.l d0,-(sp)
    e93a:	jsr 109ac <trimStack>
    e940:	addq.l #4,sp
	trimStack (fun -> stack);
    e942:	movea.l 8(sp),a0
    e946:	move.l 24(a0),d0
    e94a:	move.l d0,-(sp)
    e94c:	jsr 109ac <trimStack>
    e952:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, FALSE);
    e954:	movea.l 8(sp),a0
    e958:	move.l 28(a0),d0
    e95c:	clr.l -(sp)
    e95e:	pea 1 <_start+0x1>
    e962:	move.l d0,-(sp)
    e964:	jsr 1091a <setVariable>
    e96a:	lea 12(sp),sp

	return BR_CONTINUE;
    e96e:	moveq #2,d0

}
    e970:	rts

0000e972 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (fun -> reg, SVT_INT, lastFramesPerSecond);
    e972:	move.l 1600c <lastFramesPerSecond>,d1
    e978:	movea.l 8(sp),a0
    e97c:	move.l 28(a0),d0
    e980:	move.l d1,-(sp)
    e982:	pea 1 <_start+0x1>
    e986:	move.l d0,-(sp)
    e988:	jsr 1091a <setVariable>
    e98e:	lea 12(sp),sp
	return BR_CONTINUE;
    e992:	moveq #2,d0
}
    e994:	rts

0000e996 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    e996:	moveq #2,d0
}
    e998:	rts

0000e99a <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    e99a:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e99e:	          movea.l 60(sp),a0
    e9a2:	          move.l 24(a0),d0
    e9a6:	          move.l d0,-(sp)
    e9a8:	          pea 1 <_start+0x1>
    e9ac:	          pea 17a24 <thumbHeight>
    e9b2:	          jsr 10048 <getValueType>
    e9b8:	          lea 12(sp),sp
    e9bc:	          tst.w d0
    e9be:	      /-- bne.s e9c6 <builtIn_setThumbnailSize+0x2c>
    e9c0:	      |   moveq #1,d0
    e9c2:	/-----|-- bra.w ea86 <builtIn_setThumbnailSize+0xec>
	trimStack (fun -> stack);
    e9c6:	|     \-> movea.l 60(sp),a0
    e9ca:	|         move.l 24(a0),d0
    e9ce:	|         move.l d0,-(sp)
    e9d0:	|         jsr 109ac <trimStack>
    e9d6:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9d8:	|         movea.l 60(sp),a0
    e9dc:	|         move.l 24(a0),d0
    e9e0:	|         move.l d0,-(sp)
    e9e2:	|         pea 1 <_start+0x1>
    e9e6:	|         pea 17a20 <thumbWidth>
    e9ec:	|         jsr 10048 <getValueType>
    e9f2:	|         lea 12(sp),sp
    e9f6:	|         tst.w d0
    e9f8:	|     /-- bne.s ea00 <builtIn_setThumbnailSize+0x66>
    e9fa:	|     |   moveq #1,d0
    e9fc:	+-----|-- bra.w ea86 <builtIn_setThumbnailSize+0xec>
	trimStack (fun -> stack);
    ea00:	|     \-> movea.l 60(sp),a0
    ea04:	|         move.l 24(a0),d0
    ea08:	|         move.l d0,-(sp)
    ea0a:	|         jsr 109ac <trimStack>
    ea10:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    ea12:	|         move.l 17a20 <thumbWidth>,d0
    ea18:	|     /-- bmi.s ea46 <builtIn_setThumbnailSize+0xac>
    ea1a:	|     |   move.l 17a24 <thumbHeight>,d0
    ea20:	|     +-- bmi.s ea46 <builtIn_setThumbnailSize+0xac>
    ea22:	|     |   move.l 17a20 <thumbWidth>,d0
    ea28:	|     |   move.l d0,d1
    ea2a:	|     |   move.l 17a28 <winWidth>,d0
    ea30:	|     |   cmp.l d1,d0
    ea32:	|     +-- bcs.s ea46 <builtIn_setThumbnailSize+0xac>
    ea34:	|     |   move.l 17a24 <thumbHeight>,d0
    ea3a:	|     |   move.l d0,d1
    ea3c:	|     |   move.l 17a2c <winHeight>,d0
    ea42:	|     |   cmp.l d1,d0
    ea44:	|  /--|-- bcc.s ea84 <builtIn_setThumbnailSize+0xea>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    ea46:	|  |  \-> move.l 17a24 <thumbHeight>,d1
    ea4c:	|  |      move.l 17a20 <thumbWidth>,d0
    ea52:	|  |      move.l d1,-(sp)
    ea54:	|  |      move.l d0,-(sp)
    ea56:	|  |      pea 15a4e <zbuffer.c.d110ca03+0x508>
    ea5c:	|  |      lea 14(sp),a0
    ea60:	|  |      move.l a0,-(sp)
    ea62:	|  |      jsr f852 <sprintf>
    ea68:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    ea6c:	|  |      lea 2(sp),a0
    ea70:	|  |      move.l a0,-(sp)
    ea72:	|  |      pea 15a56 <zbuffer.c.d110ca03+0x510>
    ea78:	|  |      jsr 12018 <KPrintF>
    ea7e:	|  |      addq.l #8,sp
		return BR_ERROR;
    ea80:	|  |      moveq #1,d0
    ea82:	+--|----- bra.s ea86 <builtIn_setThumbnailSize+0xec>
	}
	return BR_CONTINUE;
    ea84:	|  \----> moveq #2,d0
}
    ea86:	\-------> lea 52(sp),sp
    ea8a:	          rts

0000ea8c <builtIn_hasFlag>:

builtIn(hasFlag)
{
    ea8c:	       lea -12(sp),sp
    ea90:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea92:	       movea.l 24(sp),a0
    ea96:	       move.l 24(a0),d0
    ea9a:	       move.l d0,-(sp)
    ea9c:	       pea 1 <_start+0x1>
    eaa0:	       lea 12(sp),a0
    eaa4:	       move.l a0,-(sp)
    eaa6:	       jsr 10048 <getValueType>
    eaac:	       lea 12(sp),sp
    eab0:	       tst.w d0
    eab2:	   /-- bne.s eaba <builtIn_hasFlag+0x2e>
    eab4:	   |   moveq #1,d0
    eab6:	/--|-- bra.w eb50 <builtIn_hasFlag+0xc4>
	trimStack (fun -> stack);
    eaba:	|  \-> movea.l 24(sp),a0
    eabe:	|      move.l 24(a0),d0
    eac2:	|      move.l d0,-(sp)
    eac4:	|      jsr 109ac <trimStack>
    eaca:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eacc:	|      movea.l 24(sp),a0
    ead0:	|      move.l 24(a0),d0
    ead4:	|      move.l d0,-(sp)
    ead6:	|      pea 7 <_start+0x7>
    eada:	|      moveq #16,d0
    eadc:	|      add.l sp,d0
    eade:	|      move.l d0,-(sp)
    eae0:	|      jsr 10048 <getValueType>
    eae6:	|      lea 12(sp),sp
    eaea:	|      tst.w d0
    eaec:	|  /-- bne.s eaf2 <builtIn_hasFlag+0x66>
    eaee:	|  |   moveq #1,d0
    eaf0:	+--|-- bra.s eb50 <builtIn_hasFlag+0xc4>
	trimStack (fun -> stack);
    eaf2:	|  \-> movea.l 24(sp),a0
    eaf6:	|      move.l 24(a0),d0
    eafa:	|      move.l d0,-(sp)
    eafc:	|      jsr 109ac <trimStack>
    eb02:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    eb04:	|      move.l 8(sp),d0
    eb08:	|      move.l d0,-(sp)
    eb0a:	|      jsr 8d96 <findObjectType>
    eb10:	|      addq.l #4,sp
    eb12:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    eb16:	|  /-- bne.s eb1c <builtIn_hasFlag+0x90>
    eb18:	|  |   moveq #1,d0
    eb1a:	+--|-- bra.s eb50 <builtIn_hasFlag+0xc4>
	setVariable (fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    eb1c:	|  \-> movea.l 12(sp),a0
    eb20:	|      move.w 36(a0),d0
    eb24:	|      moveq #0,d2
    eb26:	|      move.w d0,d2
    eb28:	|      move.l 4(sp),d1
    eb2c:	|      moveq #1,d0
    eb2e:	|      lsl.l d1,d0
    eb30:	|      move.l d2,d1
    eb32:	|      and.l d0,d1
    eb34:	|      movea.l 24(sp),a0
    eb38:	|      move.l 28(a0),d0
    eb3c:	|      move.l d1,-(sp)
    eb3e:	|      pea 1 <_start+0x1>
    eb42:	|      move.l d0,-(sp)
    eb44:	|      jsr 1091a <setVariable>
    eb4a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb4e:	|      moveq #2,d0
}
    eb50:	\----> move.l (sp)+,d2
    eb52:	       lea 12(sp),sp
    eb56:	       rts

0000eb58 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    eb58:	       jsr 8d84 <snapshot>
    eb5e:	       tst.w d0
    eb60:	/----- beq.s eb66 <builtIn_snapshotGrab+0xe>
    eb62:	|      moveq #2,d0
    eb64:	|  /-- bra.s eb68 <builtIn_snapshotGrab+0x10>
    eb66:	\--|-> moveq #1,d0
}
    eb68:	   \-> rts

0000eb6a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    eb6a:	jsr 8c6a <nosnapshot>
	return BR_CONTINUE;
    eb70:	moveq #2,d0
}
    eb72:	rts

0000eb74 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    eb74:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    eb76:	move.w 16000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    eb7e:	movea.l 12(sp),a0
    eb82:	move.l 24(a0),d0
    eb86:	move.l d0,-(sp)
    eb88:	jsr 1058a <getBoolean>
    eb8e:	addq.l #4,sp
    eb90:	move.w d0,16000 <allowAnyFilename>
	trimStack (fun -> stack);
    eb96:	movea.l 12(sp),a0
    eb9a:	move.l 24(a0),d0
    eb9e:	move.l d0,-(sp)
    eba0:	jsr 109ac <trimStack>
    eba6:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, lastValue);
    eba8:	movea.w 2(sp),a0
    ebac:	movea.l 12(sp),a1
    ebb0:	move.l 28(a1),d0
    ebb4:	move.l a0,-(sp)
    ebb6:	pea 1 <_start+0x1>
    ebba:	move.l d0,-(sp)
    ebbc:	jsr 1091a <setVariable>
    ebc2:	lea 12(sp),sp
	return BR_CONTINUE;
    ebc6:	moveq #2,d0
}
    ebc8:	addq.l #4,sp
    ebca:	rts

0000ebcc <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (fun -> stack);
    ebcc:	movea.l 8(sp),a0
    ebd0:	move.l 24(a0),d0
    ebd4:	move.l d0,-(sp)
    ebd6:	jsr 109ac <trimStack>
    ebdc:	addq.l #4,sp
	trimStack (fun -> stack);
    ebde:	movea.l 8(sp),a0
    ebe2:	move.l 24(a0),d0
    ebe6:	move.l d0,-(sp)
    ebe8:	jsr 109ac <trimStack>
    ebee:	addq.l #4,sp
	setVariable (fun -> reg, SVT_INT, 0);
    ebf0:	movea.l 8(sp),a0
    ebf4:	move.l 28(a0),d0
    ebf8:	clr.l -(sp)
    ebfa:	pea 1 <_start+0x1>
    ebfe:	move.l d0,-(sp)
    ec00:	jsr 1091a <setVariable>
    ec06:	lea 12(sp),sp

	return BR_CONTINUE;
    ec0a:	moveq #2,d0
}
    ec0c:	rts

0000ec0e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    ec0e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    ec10:	movea.l 12(sp),a0
    ec14:	move.l 24(a0),d0
    ec18:	move.l d0,-(sp)
    ec1a:	jsr 10620 <getTextFromAnyVar>
    ec20:	addq.l #4,sp
    ec22:	move.l d0,(sp)
	trimStack (fun -> stack);
    ec24:	movea.l 12(sp),a0
    ec28:	move.l 24(a0),d0
    ec2c:	move.l d0,-(sp)
    ec2e:	jsr 109ac <trimStack>
    ec34:	addq.l #4,sp
	KPrintF (mess);
    ec36:	move.l (sp),-(sp)
    ec38:	jsr 12018 <KPrintF>
    ec3e:	addq.l #4,sp
	return BR_ERROR;
    ec40:	moveq #1,d0
}
    ec42:	addq.l #4,sp
    ec44:	rts

0000ec46 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (fun -> stack);
    ec46:	movea.l 8(sp),a0
    ec4a:	move.l 24(a0),d0
    ec4e:	move.l d0,-(sp)
    ec50:	jsr 109ac <trimStack>
    ec56:	addq.l #4,sp
	trimStack (fun -> stack);
    ec58:	movea.l 8(sp),a0
    ec5c:	move.l 24(a0),d0
    ec60:	move.l d0,-(sp)
    ec62:	jsr 109ac <trimStack>
    ec68:	addq.l #4,sp
	trimStack (fun -> stack);
    ec6a:	movea.l 8(sp),a0
    ec6e:	move.l 24(a0),d0
    ec72:	move.l d0,-(sp)
    ec74:	jsr 109ac <trimStack>
    ec7a:	addq.l #4,sp
	trimStack (fun -> stack);
    ec7c:	movea.l 8(sp),a0
    ec80:	move.l 24(a0),d0
    ec84:	move.l d0,-(sp)
    ec86:	jsr 109ac <trimStack>
    ec8c:	addq.l #4,sp

	return BR_CONTINUE;
    ec8e:	moveq #2,d0
}
    ec90:	rts

0000ec92 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (fun -> stack);
    ec92:	movea.l 8(sp),a0
    ec96:	move.l 24(a0),d0
    ec9a:	move.l d0,-(sp)
    ec9c:	jsr 109ac <trimStack>
    eca2:	addq.l #4,sp
	trimStack (fun -> stack);
    eca4:	movea.l 8(sp),a0
    eca8:	move.l 24(a0),d0
    ecac:	move.l d0,-(sp)
    ecae:	jsr 109ac <trimStack>
    ecb4:	addq.l #4,sp
	trimStack (fun -> stack);
    ecb6:	movea.l 8(sp),a0
    ecba:	move.l 24(a0),d0
    ecbe:	move.l d0,-(sp)
    ecc0:	jsr 109ac <trimStack>
    ecc6:	addq.l #4,sp

	return BR_CONTINUE;
    ecc8:	moveq #2,d0

}
    ecca:	rts

0000eccc <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    eccc:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    ecce:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (fun -> reg, SVT_INT, done ? 1 : 0);
    ecd4:	sne d0
    ecd6:	neg.b d0
    ecd8:	move.b d0,d0
    ecda:	andi.l #255,d0
    ece0:	movea.l 12(sp),a0
    ece4:	move.l 28(a0),d1
    ece8:	move.l d0,-(sp)
    ecea:	pea 1 <_start+0x1>
    ecee:	move.l d1,-(sp)
    ecf0:	jsr 1091a <setVariable>
    ecf6:	lea 12(sp),sp
	return BR_CONTINUE;
    ecfa:	moveq #2,d0
}
    ecfc:	addq.l #4,sp
    ecfe:	rts

0000ed00 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    ed00:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    ed02:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    ed08:	pea 15a6d <zbuffer.c.d110ca03+0x527>
    ed0e:	jsr 12018 <KPrintF>
    ed14:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (fun -> reg, SVT_INT, done ? 1 : 0);
    ed16:	tst.w 2(sp)
    ed1a:	sne d0
    ed1c:	neg.b d0
    ed1e:	move.b d0,d0
    ed20:	andi.l #255,d0
    ed26:	movea.l 12(sp),a0
    ed2a:	move.l 28(a0),d1
    ed2e:	move.l d0,-(sp)
    ed30:	pea 1 <_start+0x1>
    ed34:	move.l d1,-(sp)
    ed36:	jsr 1091a <setVariable>
    ed3c:	lea 12(sp),sp
	return BR_CONTINUE;
    ed40:	moveq #2,d0
}
    ed42:	addq.l #4,sp
    ed44:	rts

0000ed46 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    ed46:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    ed4a:	             move.l 104(sp),d0
    ed4e:	             cmpi.l #166,d0
    ed54:	/----------- bhi.w ee36 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    ed58:	|            move.l 104(sp),d0
    ed5c:	|            add.l d0,d0
    ed5e:	|            movea.l d0,a1
    ed60:	|            adda.l d0,a1
    ed62:	|            lea 16036 <paramNum>,a0
    ed68:	|            move.l (0,a1,a0.l),d0
    ed6c:	|            moveq #-1,d1
    ed6e:	|            cmp.l d0,d1
    ed70:	|  /-------- beq.w edfe <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    ed74:	|  |         move.l 104(sp),d0
    ed78:	|  |         add.l d0,d0
    ed7a:	|  |         movea.l d0,a1
    ed7c:	|  |         adda.l d0,a1
    ed7e:	|  |         lea 16036 <paramNum>,a0
    ed84:	|  |         move.l (0,a1,a0.l),d0
    ed88:	|  |         cmp.l 108(sp),d0
    ed8c:	|  +-------- beq.s edfe <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    ed8e:	|  |         move.l 104(sp),d0
    ed92:	|  |         add.l d0,d0
    ed94:	|  |         movea.l d0,a1
    ed96:	|  |         adda.l d0,a1
    ed98:	|  |         lea 16036 <paramNum>,a0
    ed9e:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    eda2:	|  |         moveq #1,d1
    eda4:	|  |         cmp.l d0,d1
    eda6:	|  |  /----- bne.s edb0 <callBuiltIn+0x6a>
    eda8:	|  |  |      move.l #78041,d0
    edae:	|  |  |  /-- bra.s edb6 <callBuiltIn+0x70>
    edb0:	|  |  \--|-> move.l #88739,d0
    edb6:	|  |     \-> move.l 104(sp),d1
    edba:	|  |         add.l d1,d1
    edbc:	|  |         movea.l d1,a1
    edbe:	|  |         adda.l d1,a1
    edc0:	|  |         lea 16036 <paramNum>,a0
    edc6:	|  |         move.l (0,a1,a0.l),d1
    edca:	|  |         move.l d0,-(sp)
    edcc:	|  |         move.l d1,-(sp)
    edce:	|  |         pea 15aa5 <zbuffer.c.d110ca03+0x55f>
    edd4:	|  |         lea 12(sp),a0
    edd8:	|  |         move.l a0,-(sp)
    edda:	|  |         jsr f852 <sprintf>
    ede0:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    ede4:	|  |         movea.l sp,a0
    ede6:	|  |         move.l a0,-(sp)
    ede8:	|  |         jsr b8 <copyString>
    edee:	|  |         addq.l #4,sp
    edf0:	|  |         move.l d0,-(sp)
    edf2:	|  |         jsr 12018 <KPrintF>
    edf8:	|  |         addq.l #4,sp
				return BR_ERROR;
    edfa:	|  |         moveq #1,d0
    edfc:	|  |     /-- bra.s ee46 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    edfe:	|  \-----|-> move.l 104(sp),d0
    ee02:	|        |   add.l d0,d0
    ee04:	|        |   movea.l d0,a1
    ee06:	|        |   adda.l d0,a1
    ee08:	|        |   lea 162d2 <builtInFunctionArray>,a0
    ee0e:	|        |   move.l (0,a1,a0.l),d0
    ee12:	+--------|-- beq.s ee36 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    ee14:	|        |   move.l 104(sp),d0
    ee18:	|        |   add.l d0,d0
    ee1a:	|        |   movea.l d0,a1
    ee1c:	|        |   adda.l d0,a1
    ee1e:	|        |   lea 162d2 <builtInFunctionArray>,a0
    ee24:	|        |   movea.l (0,a1,a0.l),a0
    ee28:	|        |   move.l 112(sp),-(sp)
    ee2c:	|        |   move.l 112(sp),-(sp)
    ee30:	|        |   jsr (a0)
    ee32:	|        |   addq.l #8,sp
    ee34:	|        +-- bra.s ee46 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    ee36:	\--------|-> pea 15ad0 <zbuffer.c.d110ca03+0x58a>
    ee3c:	         |   jsr 12018 <KPrintF>
    ee42:	         |   addq.l #4,sp
	return BR_ERROR;
    ee44:	         |   moveq #1,d0
}
    ee46:	         \-> lea 100(sp),sp
    ee4a:	             rts

0000ee4c <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    ee4c:	          subq.l #8,sp
	int indexNum = -1;
    ee4e:	          moveq #-1,d0
    ee50:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ee54:	          clr.l (sp)
    ee56:	   /----- bra.s ee7c <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    ee58:	/--|----> move.l 17bea <languageTable>,d1
    ee5e:	|  |      move.l (sp),d0
    ee60:	|  |      add.l d0,d0
    ee62:	|  |      add.l d0,d0
    ee64:	|  |      movea.l d1,a0
    ee66:	|  |      adda.l d0,a0
    ee68:	|  |      move.l (a0),d0
    ee6a:	|  |      move.l d0,d1
    ee6c:	|  |      move.l 17bf2 <gameSettings>,d0
    ee72:	|  |      cmp.l d1,d0
    ee74:	|  |  /-- bne.s ee7a <getLanguageForFileB+0x2e>
    ee76:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ee7a:	|  |  \-> addq.l #1,(sp)
    ee7c:	|  \----> move.l 17bf6 <gameSettings+0x4>,d0
    ee82:	|         cmp.l (sp),d0
    ee84:	\-------- bcc.s ee58 <getLanguageForFileB+0xc>
	}

	return indexNum;
    ee86:	          move.l 4(sp),d0
}
    ee8a:	          addq.l #8,sp
    ee8c:	          rts

0000ee8e <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    ee8e:	          lea -20(sp),sp
    ee92:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    ee94:	          move.l 28(sp),-(sp)
    ee98:	          jsr f534 <strlen>
    ee9e:	          addq.l #4,sp
    eea0:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    eea4:	          moveq #4,d0
    eea6:	          cmp.l 12(sp),d0
    eeaa:	      /-- bge.s eece <getPrefsFilename+0x40>
    eeac:	      |   move.l 12(sp),d0
    eeb0:	      |   subq.l #4,d0
    eeb2:	      |   movea.l 28(sp),a0
    eeb6:	      |   adda.l d0,a0
    eeb8:	      |   move.b (a0),d0
    eeba:	      |   cmpi.b #46,d0
    eebe:	      +-- bne.s eece <getPrefsFilename+0x40>
		filename[n-4] = 0;
    eec0:	      |   move.l 12(sp),d0
    eec4:	      |   subq.l #4,d0
    eec6:	      |   movea.l 28(sp),a0
    eeca:	      |   adda.l d0,a0
    eecc:	      |   clr.b (a0)
	}

	char * f = filename;
    eece:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    eed4:	          clr.l 20(sp)
    eed8:	   /----- bra.s ef00 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    eeda:	/--|----> move.l 20(sp),d0
    eede:	|  |      movea.l 28(sp),a0
    eee2:	|  |      adda.l d0,a0
    eee4:	|  |      move.b (a0),d0
    eee6:	|  |      cmpi.b #47,d0
    eeea:	|  |  /-- bne.s eefc <getPrefsFilename+0x6e>
    eeec:	|  |  |   move.l 20(sp),d0
    eef0:	|  |  |   addq.l #1,d0
    eef2:	|  |  |   move.l 28(sp),d1
    eef6:	|  |  |   add.l d0,d1
    eef8:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    eefc:	|  |  \-> addq.l #1,20(sp)
    ef00:	|  \----> move.l 20(sp),d0
    ef04:	|         cmp.l 12(sp),d0
    ef08:	\-------- blt.s eeda <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    ef0a:	          pea 15afb <zbuffer.c.d110ca03+0x5b5>
    ef10:	          move.l 20(sp),-(sp)
    ef14:	          jsr f574 <joinStrings>
    ef1a:	          addq.l #8,sp
    ef1c:	          move.l d0,8(sp)

	FreeVec(filename);
    ef20:	          move.l 28(sp),4(sp)
    ef26:	          move.l 17b28 <SysBase>,d0
    ef2c:	          movea.l d0,a6
    ef2e:	          movea.l 4(sp),a1
    ef32:	          jsr -690(a6)
	filename = NULL;
    ef36:	          clr.l 28(sp)
	return joined;
    ef3a:	          move.l 8(sp),d0
}
    ef3e:	          movea.l (sp)+,a6
    ef40:	          lea 20(sp),sp
    ef44:	          rts

0000ef46 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    ef46:	             lea -28(sp),sp
    ef4a:	             move.l a6,-(sp)
    ef4c:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ef4e:	             move.l 17bf6 <gameSettings+0x4>,d0
    ef54:	             move.l d0,d1
    ef56:	             addq.l #1,d1
    ef58:	             move.l d1,28(sp)
    ef5c:	             clr.l 24(sp)
    ef60:	             move.l 17b28 <SysBase>,d0
    ef66:	             movea.l d0,a6
    ef68:	             move.l 28(sp),d0
    ef6c:	             move.l 24(sp),d1
    ef70:	             jsr -684(a6)
    ef74:	             move.l d0,20(sp)
    ef78:	             move.l 20(sp),d0
    ef7c:	             move.l d0,17bea <languageTable>
    if( languageTable == 0) {
    ef82:	             move.l 17bea <languageTable>,d0
    ef88:	         /-- bne.s ef98 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    ef8a:	         |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
    ef90:	         |   jsr 12018 <KPrintF>
    ef96:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ef98:	         \-> move.l 17bf6 <gameSettings+0x4>,d0
    ef9e:	             move.l d0,d1
    efa0:	             addq.l #1,d1
    efa2:	             move.l d1,16(sp)
    efa6:	             clr.l 12(sp)
    efaa:	             move.l 17b28 <SysBase>,d0
    efb0:	             movea.l d0,a6
    efb2:	             move.l 16(sp),d0
    efb6:	             move.l 12(sp),d1
    efba:	             jsr -684(a6)
    efbe:	             move.l d0,8(sp)
    efc2:	             move.l 8(sp),d0
    efc6:	             move.l d0,17bee <languageName>
	if( languageName == 0) {
    efcc:	             move.l 17bee <languageName>,d0
    efd2:	         /-- bne.s efe2 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    efd4:	         |   pea 15b36 <zbuffer.c.d110ca03+0x5f0>
    efda:	         |   jsr 12018 <KPrintF>
    efe0:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    efe2:	         \-> clr.l 32(sp)
    efe6:	   /-------- bra.s f05e <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    efe8:	/--|-------> tst.l 32(sp)
    efec:	|  |  /----- beq.s effc <makeLanguageTable+0xb6>
    efee:	|  |  |      move.l 40(sp),-(sp)
    eff2:	|  |  |      jsr 6bc <get2bytes>
    eff8:	|  |  |      addq.l #4,sp
    effa:	|  |  |  /-- bra.s effe <makeLanguageTable+0xb8>
    effc:	|  |  \--|-> moveq #0,d0
    effe:	|  |     \-> movea.l 17bea <languageTable>,a0
    f004:	|  |         move.l 32(sp),d1
    f008:	|  |         add.l d1,d1
    f00a:	|  |         add.l d1,d1
    f00c:	|  |         adda.l d1,a0
    f00e:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    f010:	|  |         move.l 17bee <languageName>,d1
    f016:	|  |         move.l 32(sp),d0
    f01a:	|  |         add.l d0,d0
    f01c:	|  |         add.l d0,d0
    f01e:	|  |         movea.l d1,a0
    f020:	|  |         adda.l d0,a0
    f022:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    f024:	|  |         move.l 17ad6 <gameVersion>,d0
    f02a:	|  |         cmpi.l #511,d0
    f030:	|  |     /-- ble.s f05a <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    f032:	|  |     |   move.l 17bf6 <gameSettings+0x4>,d0
    f038:	|  |     +-- beq.s f05a <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    f03a:	|  |     |   move.l 17bee <languageName>,d1
    f040:	|  |     |   move.l 32(sp),d0
    f044:	|  |     |   add.l d0,d0
    f046:	|  |     |   add.l d0,d0
    f048:	|  |     |   movea.l d1,a2
    f04a:	|  |     |   adda.l d0,a2
    f04c:	|  |     |   move.l 40(sp),-(sp)
    f050:	|  |     |   jsr b02 <readString>
    f056:	|  |     |   addq.l #4,sp
    f058:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f05a:	|  |     \-> addq.l #1,32(sp)
    f05e:	|  \-------> move.l 17bf6 <gameSettings+0x4>,d0
    f064:	|            cmp.l 32(sp),d0
    f068:	\----------- bcc.w efe8 <makeLanguageTable+0xa2>
		}
	}
}
    f06c:	             nop
    f06e:	             nop
    f070:	             movea.l (sp)+,a2
    f072:	             movea.l (sp)+,a6
    f074:	             lea 28(sp),sp
    f078:	             rts

0000f07a <readIniFile>:

void readIniFile (char * filename) {
    f07a:	                      lea -564(sp),sp
    f07e:	                      move.l a6,-(sp)
    f080:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    f082:	                      move.l 576(sp),-(sp)
    f086:	                      jsr b8 <copyString>
    f08c:	                      addq.l #4,sp
    f08e:	                      move.l d0,-(sp)
    f090:	                      jsr ee8e <getPrefsFilename>
    f096:	                      addq.l #4,sp
    f098:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    f09c:	                      move.l 562(sp),558(sp)
    f0a2:	                      move.l #1005,554(sp)
    f0aa:	                      move.l 17b30 <DOSBase>,d0
    f0b0:	                      movea.l d0,a6
    f0b2:	                      move.l 558(sp),d1
    f0b6:	                      move.l 554(sp),d2
    f0ba:	                      jsr -30(a6)
    f0be:	                      move.l d0,550(sp)
    f0c2:	                      move.l 550(sp),d0
    f0c6:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    f0ca:	                      clr.l 17bf2 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    f0d0:	                      move.w #1,17bfa <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    f0d8:	                      clr.l 17bfc <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    f0de:	                      moveq #1,d0
    f0e0:	                      move.l d0,17c00 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    f0e6:	                      clr.w 17c04 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    f0ec:	                      clr.w 17c06 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    f0f2:	                      clr.w 17c08 <gameSettings+0x16>

	FreeVec(langName);
    f0f8:	                      move.l 562(sp),542(sp)
    f0fe:	                      move.l 17b28 <SysBase>,d0
    f104:	                      movea.l d0,a6
    f106:	                      movea.l 542(sp),a1
    f10a:	                      jsr -690(a6)
	langName = NULL;
    f10e:	                      clr.l 562(sp)

	if (fp) {
    f112:	                      tst.l 546(sp)
    f116:	/-------------------- beq.w f3f4 <readIniFile+0x37a>
		char lineSoFar[257] = "";
    f11a:	|                     move.l sp,d0
    f11c:	|                     addi.l #265,d0
    f122:	|                     move.l #257,d1
    f128:	|                     move.l d1,-(sp)
    f12a:	|                     clr.l -(sp)
    f12c:	|                     move.l d0,-(sp)
    f12e:	|                     jsr 11f9c <memset>
    f134:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    f138:	|                     move.l sp,d0
    f13a:	|                     addq.l #8,d0
    f13c:	|                     move.l #257,d1
    f142:	|                     move.l d1,-(sp)
    f144:	|                     clr.l -(sp)
    f146:	|                     move.l d0,-(sp)
    f148:	|                     jsr 11f9c <memset>
    f14e:	|                     lea 12(sp),sp
		unsigned char here = 0;
    f152:	|                     clr.b 571(sp)
		char readChar = ' ';
    f156:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    f15c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    f162:	|                     clr.w 566(sp)
		LONG tmp = 0;
    f166:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    f16a:	|  /----------------> move.l 546(sp),534(sp)
    f170:	|  |                  move.l 17b30 <DOSBase>,d0
    f176:	|  |                  movea.l d0,a6
    f178:	|  |                  move.l 534(sp),d1
    f17c:	|  |                  jsr -306(a6)
    f180:	|  |                  move.l d0,530(sp)
    f184:	|  |                  move.l 530(sp),d0
    f188:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    f18c:	|  |                  moveq #-1,d1
    f18e:	|  |                  cmp.l 538(sp),d1
    f192:	|  |           /----- bne.s f1a0 <readIniFile+0x126>
				readChar = '\n';
    f194:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    f19a:	|  |           |      clr.w 568(sp)
    f19e:	|  |           |  /-- bra.s f1a6 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    f1a0:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    f1a6:	|  |              \-> move.b 570(sp),d0
    f1aa:	|  |                  ext.w d0
    f1ac:	|  |                  movea.w d0,a0
    f1ae:	|  |                  moveq #61,d0
    f1b0:	|  |                  cmp.l a0,d0
    f1b2:	|  |     /----------- beq.w f35c <readIniFile+0x2e2>
    f1b6:	|  |     |            moveq #61,d1
    f1b8:	|  |     |            cmp.l a0,d1
    f1ba:	|  |  /--|----------- blt.w f368 <readIniFile+0x2ee>
    f1be:	|  |  |  |            moveq #10,d0
    f1c0:	|  |  |  |            cmp.l a0,d0
    f1c2:	|  |  |  |        /-- beq.s f1cc <readIniFile+0x152>
    f1c4:	|  |  |  |        |   moveq #13,d1
    f1c6:	|  |  |  |        |   cmp.l a0,d1
    f1c8:	|  |  +--|--------|-- bne.w f368 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    f1cc:	|  |  |  |        \-> tst.w 566(sp)
    f1d0:	|  |  |  |     /----- beq.w f34a <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    f1d4:	|  |  |  |     |      pea 15b6a <zbuffer.c.d110ca03+0x624>
    f1da:	|  |  |  |     |      move.l sp,d0
    f1dc:	|  |  |  |     |      addi.l #269,d0
    f1e2:	|  |  |  |     |      move.l d0,-(sp)
    f1e4:	|  |  |  |     |      jsr f4f4 <strcmp>
    f1ea:	|  |  |  |     |      addq.l #8,sp
    f1ec:	|  |  |  |     |      tst.l d0
    f1ee:	|  |  |  |     |  /-- bne.s f208 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    f1f0:	|  |  |  |     |  |   move.l sp,d0
    f1f2:	|  |  |  |     |  |   addq.l #8,d0
    f1f4:	|  |  |  |     |  |   move.l d0,-(sp)
    f1f6:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f1fc:	|  |  |  |     |  |   addq.l #4,sp
    f1fe:	|  |  |  |     |  |   move.l d0,17bf2 <gameSettings>
    f204:	|  |  |  |     +--|-- bra.w f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    f208:	|  |  |  |     |  \-> pea 15b73 <zbuffer.c.d110ca03+0x62d>
    f20e:	|  |  |  |     |      move.l sp,d0
    f210:	|  |  |  |     |      addi.l #269,d0
    f216:	|  |  |  |     |      move.l d0,-(sp)
    f218:	|  |  |  |     |      jsr f4f4 <strcmp>
    f21e:	|  |  |  |     |      addq.l #8,sp
    f220:	|  |  |  |     |      tst.l d0
    f222:	|  |  |  |     |  /-- bne.s f248 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    f224:	|  |  |  |     |  |   move.l sp,d0
    f226:	|  |  |  |     |  |   addq.l #8,d0
    f228:	|  |  |  |     |  |   move.l d0,-(sp)
    f22a:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f230:	|  |  |  |     |  |   addq.l #4,sp
    f232:	|  |  |  |     |  |   tst.l d0
    f234:	|  |  |  |     |  |   seq d0
    f236:	|  |  |  |     |  |   neg.b d0
    f238:	|  |  |  |     |  |   move.b d0,d0
    f23a:	|  |  |  |     |  |   andi.w #255,d0
    f23e:	|  |  |  |     |  |   move.w d0,17bfa <gameSettings+0x8>
    f244:	|  |  |  |     +--|-- bra.w f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    f248:	|  |  |  |     |  \-> pea 15b7a <zbuffer.c.d110ca03+0x634>
    f24e:	|  |  |  |     |      move.l sp,d0
    f250:	|  |  |  |     |      addi.l #269,d0
    f256:	|  |  |  |     |      move.l d0,-(sp)
    f258:	|  |  |  |     |      jsr f4f4 <strcmp>
    f25e:	|  |  |  |     |      addq.l #8,sp
    f260:	|  |  |  |     |      tst.l d0
    f262:	|  |  |  |     |  /-- bne.s f27c <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    f264:	|  |  |  |     |  |   move.l sp,d0
    f266:	|  |  |  |     |  |   addq.l #8,d0
    f268:	|  |  |  |     |  |   move.l d0,-(sp)
    f26a:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f270:	|  |  |  |     |  |   addq.l #4,sp
    f272:	|  |  |  |     |  |   move.l d0,17bfc <gameSettings+0xa>
    f278:	|  |  |  |     +--|-- bra.w f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    f27c:	|  |  |  |     |  \-> pea 15b82 <zbuffer.c.d110ca03+0x63c>
    f282:	|  |  |  |     |      move.l sp,d0
    f284:	|  |  |  |     |      addi.l #269,d0
    f28a:	|  |  |  |     |      move.l d0,-(sp)
    f28c:	|  |  |  |     |      jsr f4f4 <strcmp>
    f292:	|  |  |  |     |      addq.l #8,sp
    f294:	|  |  |  |     |      tst.l d0
    f296:	|  |  |  |     |  /-- bne.s f2b0 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    f298:	|  |  |  |     |  |   move.l sp,d0
    f29a:	|  |  |  |     |  |   addq.l #8,d0
    f29c:	|  |  |  |     |  |   move.l d0,-(sp)
    f29e:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f2a4:	|  |  |  |     |  |   addq.l #4,sp
    f2a6:	|  |  |  |     |  |   move.l d0,17c00 <gameSettings+0xe>
    f2ac:	|  |  |  |     +--|-- bra.w f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    f2b0:	|  |  |  |     |  \-> pea 15b8c <zbuffer.c.d110ca03+0x646>
    f2b6:	|  |  |  |     |      move.l sp,d0
    f2b8:	|  |  |  |     |      addi.l #269,d0
    f2be:	|  |  |  |     |      move.l d0,-(sp)
    f2c0:	|  |  |  |     |      jsr f4f4 <strcmp>
    f2c6:	|  |  |  |     |      addq.l #8,sp
    f2c8:	|  |  |  |     |      tst.l d0
    f2ca:	|  |  |  |     |  /-- bne.s f2e4 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    f2cc:	|  |  |  |     |  |   move.l sp,d0
    f2ce:	|  |  |  |     |  |   addq.l #8,d0
    f2d0:	|  |  |  |     |  |   move.l d0,-(sp)
    f2d2:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f2d8:	|  |  |  |     |  |   addq.l #4,sp
    f2da:	|  |  |  |     |  |   move.l d0,d0
    f2dc:	|  |  |  |     |  |   move.w d0,17c04 <gameSettings+0x12>
    f2e2:	|  |  |  |     +--|-- bra.s f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    f2e4:	|  |  |  |     |  \-> pea 15b98 <zbuffer.c.d110ca03+0x652>
    f2ea:	|  |  |  |     |      move.l sp,d0
    f2ec:	|  |  |  |     |      addi.l #269,d0
    f2f2:	|  |  |  |     |      move.l d0,-(sp)
    f2f4:	|  |  |  |     |      jsr f4f4 <strcmp>
    f2fa:	|  |  |  |     |      addq.l #8,sp
    f2fc:	|  |  |  |     |      tst.l d0
    f2fe:	|  |  |  |     |  /-- bne.s f318 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    f300:	|  |  |  |     |  |   move.l sp,d0
    f302:	|  |  |  |     |  |   addq.l #8,d0
    f304:	|  |  |  |     |  |   move.l d0,-(sp)
    f306:	|  |  |  |     |  |   jsr f400 <stringToInt>
    f30c:	|  |  |  |     |  |   addq.l #4,sp
    f30e:	|  |  |  |     |  |   move.l d0,d0
    f310:	|  |  |  |     |  |   move.w d0,17c06 <gameSettings+0x14>
    f316:	|  |  |  |     +--|-- bra.s f34a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    f318:	|  |  |  |     |  \-> pea 15ba6 <zbuffer.c.d110ca03+0x660>
    f31e:	|  |  |  |     |      move.l sp,d0
    f320:	|  |  |  |     |      addi.l #269,d0
    f326:	|  |  |  |     |      move.l d0,-(sp)
    f328:	|  |  |  |     |      jsr f4f4 <strcmp>
    f32e:	|  |  |  |     |      addq.l #8,sp
    f330:	|  |  |  |     |      tst.l d0
    f332:	|  |  |  |     +----- bne.s f34a <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    f334:	|  |  |  |     |      move.l sp,d0
    f336:	|  |  |  |     |      addq.l #8,d0
    f338:	|  |  |  |     |      move.l d0,-(sp)
    f33a:	|  |  |  |     |      jsr f400 <stringToInt>
    f340:	|  |  |  |     |      addq.l #4,sp
    f342:	|  |  |  |     |      move.l d0,d0
    f344:	|  |  |  |     |      move.w d0,17c08 <gameSettings+0x16>
					}
				}
				here = 0;
    f34a:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    f34e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    f352:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    f356:	|  |  |  |            clr.b 8(sp)
				break;
    f35a:	|  |  |  |  /-------- bra.s f3d2 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    f35c:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    f362:	|  |  |     |         clr.b 571(sp)
				break;
    f366:	|  |  |     +-------- bra.s f3d2 <readIniFile+0x358>

				default:
				if (doingSecond) {
    f368:	|  |  \-----|-------> tst.w 566(sp)
    f36c:	|  |        |  /----- beq.s f3a0 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    f36e:	|  |        |  |      move.b 571(sp),d0
    f372:	|  |        |  |      move.b d0,d1
    f374:	|  |        |  |      addq.b #1,d1
    f376:	|  |        |  |      move.b d1,571(sp)
    f37a:	|  |        |  |      move.b d0,d0
    f37c:	|  |        |  |      andi.l #255,d0
    f382:	|  |        |  |      lea 572(sp),a0
    f386:	|  |        |  |      adda.l d0,a0
    f388:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    f38e:	|  |        |  |      moveq #0,d0
    f390:	|  |        |  |      move.b 571(sp),d0
    f394:	|  |        |  |      lea 572(sp),a0
    f398:	|  |        |  |      adda.l d0,a0
    f39a:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    f39e:	|  |        |  |  /-- bra.s f3d0 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    f3a0:	|  |        |  \--|-> move.b 571(sp),d0
    f3a4:	|  |        |     |   move.b d0,d1
    f3a6:	|  |        |     |   addq.b #1,d1
    f3a8:	|  |        |     |   move.b d1,571(sp)
    f3ac:	|  |        |     |   move.b d0,d0
    f3ae:	|  |        |     |   andi.l #255,d0
    f3b4:	|  |        |     |   lea 572(sp),a0
    f3b8:	|  |        |     |   adda.l d0,a0
    f3ba:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    f3c0:	|  |        |     |   moveq #0,d0
    f3c2:	|  |        |     |   move.b 571(sp),d0
    f3c6:	|  |        |     |   lea 572(sp),a0
    f3ca:	|  |        |     |   adda.l d0,a0
    f3cc:	|  |        |     |   clr.b -307(a0)
				break;
    f3d0:	|  |        |     \-> nop
			}
		} while (keepGoing);
    f3d2:	|  |        \-------> tst.w 568(sp)
    f3d6:	|  \----------------- bne.w f16a <readIniFile+0xf0>

		Close(fp);
    f3da:	|                     move.l 546(sp),526(sp)
    f3e0:	|                     move.l 17b30 <DOSBase>,d0
    f3e6:	|                     movea.l d0,a6
    f3e8:	|                     move.l 526(sp),d1
    f3ec:	|                     jsr -36(a6)
    f3f0:	|                     move.l d0,522(sp)
	}
}
    f3f4:	\-------------------> nop
    f3f6:	                      move.l (sp)+,d2
    f3f8:	                      movea.l (sp)+,a6
    f3fa:	                      lea 564(sp),sp
    f3fe:	                      rts

0000f400 <stringToInt>:

unsigned int stringToInt (char * s) {
    f400:	             subq.l #8,sp
	int i = 0;
    f402:	             clr.l 4(sp)
	BOOL negative = FALSE;
    f406:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    f40a:	/----------> movea.l 12(sp),a0
    f40e:	|            move.b (a0),d0
    f410:	|            cmpi.b #47,d0
    f414:	|        /-- ble.s f44c <stringToInt+0x4c>
    f416:	|        |   movea.l 12(sp),a0
    f41a:	|        |   move.b (a0),d0
    f41c:	|        |   cmpi.b #57,d0
    f420:	|        +-- bgt.s f44c <stringToInt+0x4c>
			i *= 10;
    f422:	|        |   move.l 4(sp),d1
    f426:	|        |   move.l d1,d0
    f428:	|        |   add.l d0,d0
    f42a:	|        |   add.l d0,d0
    f42c:	|        |   add.l d1,d0
    f42e:	|        |   add.l d0,d0
    f430:	|        |   move.l d0,4(sp)
			i += *s - '0';
    f434:	|        |   movea.l 12(sp),a0
    f438:	|        |   move.b (a0),d0
    f43a:	|        |   ext.w d0
    f43c:	|        |   movea.w d0,a0
    f43e:	|        |   moveq #-48,d0
    f440:	|        |   add.l a0,d0
    f442:	|        |   add.l d0,4(sp)
			s ++;
    f446:	|        |   addq.l #1,12(sp)
    f44a:	|  /-----|-- bra.s f484 <stringToInt+0x84>
		} else if (*s == '-') {
    f44c:	|  |     \-> movea.l 12(sp),a0
    f450:	|  |         move.b (a0),d0
    f452:	|  |         cmpi.b #45,d0
    f456:	|  |     /-- bne.s f470 <stringToInt+0x70>
			negative = ! negative;
    f458:	|  |     |   tst.w 2(sp)
    f45c:	|  |     |   seq d0
    f45e:	|  |     |   neg.b d0
    f460:	|  |     |   move.b d0,d0
    f462:	|  |     |   andi.w #255,d0
    f466:	|  |     |   move.w d0,2(sp)
			s++;
    f46a:	|  |     |   addq.l #1,12(sp)
    f46e:	+--|-----|-- bra.s f40a <stringToInt+0xa>
		} else {
			if (negative)
    f470:	|  |     \-> tst.w 2(sp)
    f474:	|  |     /-- beq.s f47e <stringToInt+0x7e>
				return -i;
    f476:	|  |     |   move.l 4(sp),d0
    f47a:	|  |     |   neg.l d0
    f47c:	|  |  /--|-- bra.s f486 <stringToInt+0x86>
			return i;
    f47e:	|  |  |  \-> move.l 4(sp),d0
    f482:	|  |  +----- bra.s f486 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    f484:	\--\--|----X bra.s f40a <stringToInt+0xa>
		}
	}
    f486:	      \----> addq.l #8,sp
    f488:	             rts

0000f48a <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    f48a:	    lea -28(sp),sp
    f48e:	    move.l a6,-(sp)
    f490:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    f492:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    f496:	    move.l 40(sp),30(sp)
    f49c:	    move.l #1005,26(sp)
    f4a4:	    move.l 17b30 <DOSBase>,d0
    f4aa:	    movea.l d0,a6
    f4ac:	    move.l 30(sp),d1
    f4b0:	    move.l 26(sp),d2
    f4b4:	    jsr -30(a6)
    f4b8:	    move.l d0,22(sp)
    f4bc:	    move.l 22(sp),d0
    f4c0:	    move.l d0,18(sp)
	if (tester) {
    f4c4:	/-- beq.s f4e6 <fileExists+0x5c>
		retval = 1;
    f4c6:	|   move.b #1,35(sp)
		Close(tester);
    f4cc:	|   move.l 18(sp),14(sp)
    f4d2:	|   move.l 17b30 <DOSBase>,d0
    f4d8:	|   movea.l d0,a6
    f4da:	|   move.l 14(sp),d1
    f4de:	|   jsr -36(a6)
    f4e2:	|   move.l d0,10(sp)
	}
	return retval;
    f4e6:	\-> move.b 35(sp),d0
    f4ea:	    move.l (sp)+,d2
    f4ec:	    movea.l (sp)+,a6
    f4ee:	    lea 28(sp),sp
    f4f2:	    rts

0000f4f4 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    f4f4:	   /-- bra.s f4fe <strcmp+0xa>
    {
        s1++;
    f4f6:	/--|-> addq.l #1,4(sp)
        s2++;
    f4fa:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    f4fe:	|  \-> movea.l 4(sp),a0
    f502:	|      move.b (a0),d0
    f504:	|  /-- beq.s f516 <strcmp+0x22>
    f506:	|  |   movea.l 4(sp),a0
    f50a:	|  |   move.b (a0),d1
    f50c:	|  |   movea.l 8(sp),a0
    f510:	|  |   move.b (a0),d0
    f512:	|  |   cmp.b d1,d0
    f514:	\--|-- beq.s f4f6 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f516:	   \-> movea.l 4(sp),a0
    f51a:	       move.b (a0),d0
    f51c:	       moveq #0,d1
    f51e:	       move.b d0,d1
    f520:	       movea.l 8(sp),a0
    f524:	       move.b (a0),d0
    f526:	       move.b d0,d0
    f528:	       andi.l #255,d0
    f52e:	       sub.l d0,d1
    f530:	       move.l d1,d0
}
    f532:	       rts

0000f534 <strlen>:

long unsigned int strlen (const char *s) 
{  
    f534:	       subq.l #4,sp
	long unsigned int i = 0;
    f536:	       clr.l (sp)
	while(s[i]) i++; 
    f538:	   /-- bra.s f53c <strlen+0x8>
    f53a:	/--|-> addq.l #1,(sp)
    f53c:	|  \-> movea.l 8(sp),a0
    f540:	|      adda.l (sp),a0
    f542:	|      move.b (a0),d0
    f544:	\----- bne.s f53a <strlen+0x6>
	return(i);
    f546:	       move.l (sp),d0
}
    f548:	       addq.l #4,sp
    f54a:	       rts

0000f54c <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    f54c:	    nop
    f54e:	/-> move.l 8(sp),d0
    f552:	|   move.l d0,d1
    f554:	|   addq.l #1,d1
    f556:	|   move.l d1,8(sp)
    f55a:	|   movea.l 4(sp),a0
    f55e:	|   lea 1(a0),a1
    f562:	|   move.l a1,4(sp)
    f566:	|   movea.l d0,a1
    f568:	|   move.b (a1),d0
    f56a:	|   move.b d0,(a0)
    f56c:	|   move.b (a0),d0
    f56e:	\-- bne.s f54e <strcpy+0x2>
}
    f570:	    nop
    f572:	    rts

0000f574 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    f574:	    lea -20(sp),sp
    f578:	    move.l a6,-(sp)
    f57a:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    f57c:	    move.l 32(sp),-(sp)
    f580:	    jsr f534 <strlen>
    f586:	    addq.l #4,sp
    f588:	    move.l d0,d2
    f58a:	    move.l 36(sp),-(sp)
    f58e:	    jsr f534 <strlen>
    f594:	    addq.l #4,sp
    f596:	    add.l d2,d0
    f598:	    move.l d0,d1
    f59a:	    addq.l #1,d1
    f59c:	    move.l d1,20(sp)
    f5a0:	    clr.l 16(sp)
    f5a4:	    move.l 17b28 <SysBase>,d0
    f5aa:	    movea.l d0,a6
    f5ac:	    move.l 20(sp),d0
    f5b0:	    move.l 16(sp),d1
    f5b4:	    jsr -684(a6)
    f5b8:	    move.l d0,12(sp)
    f5bc:	    move.l 12(sp),d0
    f5c0:	    move.l d0,8(sp)
	char * t = newString;
    f5c4:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    f5ca:	    nop
    f5cc:	/-> move.l 32(sp),d0
    f5d0:	|   move.l d0,d1
    f5d2:	|   addq.l #1,d1
    f5d4:	|   move.l d1,32(sp)
    f5d8:	|   movea.l 24(sp),a0
    f5dc:	|   lea 1(a0),a1
    f5e0:	|   move.l a1,24(sp)
    f5e4:	|   movea.l d0,a1
    f5e6:	|   move.b (a1),d0
    f5e8:	|   move.b d0,(a0)
    f5ea:	|   move.b (a0),d0
    f5ec:	\-- bne.s f5cc <joinStrings+0x58>
	t--;
    f5ee:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    f5f2:	    nop
    f5f4:	/-> move.l 36(sp),d0
    f5f8:	|   move.l d0,d1
    f5fa:	|   addq.l #1,d1
    f5fc:	|   move.l d1,36(sp)
    f600:	|   movea.l 24(sp),a0
    f604:	|   lea 1(a0),a1
    f608:	|   move.l a1,24(sp)
    f60c:	|   movea.l d0,a1
    f60e:	|   move.b (a1),d0
    f610:	|   move.b d0,(a0)
    f612:	|   move.b (a0),d0
    f614:	\-- bne.s f5f4 <joinStrings+0x80>

	return newString;
    f616:	    move.l 8(sp),d0
}
    f61a:	    move.l (sp)+,d2
    f61c:	    movea.l (sp)+,a6
    f61e:	    lea 20(sp),sp
    f622:	    rts

0000f624 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    f624:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    f628:	       moveq #10,d0
    f62a:	       cmp.l 28(sp),d0
    f62e:	   /-- bne.s f64c <itoa+0x28>
    f630:	   |   tst.l 20(sp)
    f634:	   +-- bge.s f64c <itoa+0x28>
        *str++ = '-';
    f636:	   |   move.l 24(sp),d0
    f63a:	   |   move.l d0,d1
    f63c:	   |   addq.l #1,d1
    f63e:	   |   move.l d1,24(sp)
    f642:	   |   movea.l d0,a0
    f644:	   |   move.b #45,(a0)
        value *= -1;
    f648:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    f64c:	   \-> move.l 24(sp),12(sp)
    f652:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    f658:	   /-> move.l 20(sp),d0
    f65c:	   |   move.l 28(sp),-(sp)
    f660:	   |   move.l d0,-(sp)
    f662:	   |   jsr 12a76 <__modsi3>
    f668:	   |   addq.l #8,sp
    f66a:	   |   movea.l d0,a1
    f66c:	   |   move.l 12(sp),d0
    f670:	   |   move.l d0,d1
    f672:	   |   addq.l #1,d1
    f674:	   |   move.l d1,12(sp)
    f678:	   |   lea 15bb0 <zbuffer.c.d110ca03+0x66a>,a0
    f67e:	   |   move.b (0,a1,a0.l),d1
    f682:	   |   movea.l d0,a0
    f684:	   |   move.b d1,(a0)
        value /= base;
    f686:	   |   move.l 28(sp),-(sp)
    f68a:	   |   move.l 24(sp),-(sp)
    f68e:	   |   jsr 12a48 <__divsi3>
    f694:	   |   addq.l #8,sp
    f696:	   |   move.l d0,20(sp)
    } while (value);
    f69a:	   \-- bne.s f658 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
    f69c:	       move.l 12(sp),d0
    f6a0:	       move.l d0,d1
    f6a2:	       subq.l #1,d1
    f6a4:	       move.l d1,12(sp)
    f6a8:	       movea.l d0,a0
    f6aa:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
    f6ac:	       move.l 4(sp),8(sp)
    f6b2:	   /-- bra.s f6d8 <itoa+0xb4>
        char temp = *low;
    f6b4:	/--|-> movea.l 8(sp),a0
    f6b8:	|  |   move.b (a0),3(sp)
        *low = *ptr;
    f6bc:	|  |   movea.l 12(sp),a0
    f6c0:	|  |   move.b (a0),d0
    f6c2:	|  |   movea.l 8(sp),a0
    f6c6:	|  |   move.b d0,(a0)
        *ptr = temp;
    f6c8:	|  |   movea.l 12(sp),a0
    f6cc:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
    f6d0:	|  |   addq.l #1,8(sp)
    f6d4:	|  |   subq.l #1,12(sp)
    f6d8:	|  \-> move.l 8(sp),d0
    f6dc:	|      cmp.l 12(sp),d0
    f6e0:	\----- bcs.s f6b4 <itoa+0x90>
    }
    return rc;
    f6e2:	       move.l 4(sp),d0
}
    f6e6:	       lea 16(sp),sp
    f6ea:	       rts

0000f6ec <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
    f6ec:	                            lea -40(sp),sp
    f6f0:	                            move.l d2,-(sp)
    char* s = str;
    f6f2:	                            move.l 48(sp),40(sp)
    const char* p = format;
    f6f8:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
    f6fe:	   /----------------------- bra.w f832 <vsprintf2+0x146>
        if (*p == '%') {
    f702:	/--|----------------------> movea.l 36(sp),a0
    f706:	|  |                        move.b (a0),d0
    f708:	|  |                        cmpi.b #37,d0
    f70c:	|  |  /-------------------- bne.w f818 <vsprintf2+0x12c>
            switch (*++p) {
    f710:	|  |  |                     addq.l #1,36(sp)
    f714:	|  |  |                     movea.l 36(sp),a0
    f718:	|  |  |                     move.b (a0),d0
    f71a:	|  |  |                     ext.w d0
    f71c:	|  |  |                     movea.w d0,a0
    f71e:	|  |  |                     moveq #115,d0
    f720:	|  |  |                     cmp.l a0,d0
    f722:	|  |  |           /-------- beq.s f79a <vsprintf2+0xae>
    f724:	|  |  |           |         moveq #115,d1
    f726:	|  |  |           |         cmp.l a0,d1
    f728:	|  |  |  /--------|-------- blt.w f800 <vsprintf2+0x114>
    f72c:	|  |  |  |        |         moveq #99,d2
    f72e:	|  |  |  |        |         cmp.l a0,d2
    f730:	|  |  |  |  /-----|-------- beq.w f7d8 <vsprintf2+0xec>
    f734:	|  |  |  |  |     |         moveq #100,d0
    f736:	|  |  |  |  |     |         cmp.l a0,d0
    f738:	|  |  |  +--|-----|-------- bne.w f800 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
    f73c:	|  |  |  |  |     |         addq.l #4,56(sp)
    f740:	|  |  |  |  |     |         movea.l 56(sp),a0
    f744:	|  |  |  |  |     |         move.l (a0),d0
    f746:	|  |  |  |  |     |         move.l d0,d1
    f748:	|  |  |  |  |     |         subq.l #1,d1
    f74a:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
    f74e:	|  |  |  |  |     |         pea a <_start+0xa>
    f752:	|  |  |  |  |     |         lea 8(sp),a0
    f756:	|  |  |  |  |     |         move.l a0,-(sp)
    f758:	|  |  |  |  |     |         move.l 32(sp),-(sp)
    f75c:	|  |  |  |  |     |         jsr f624 <itoa>
    f762:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
    f766:	|  |  |  |  |     |         lea 44(sp),a0
    f76a:	|  |  |  |  |     |         lea -40(a0),a0
    f76e:	|  |  |  |  |     |         move.l a0,28(sp)
    f772:	|  |  |  |  |     |     /-- bra.s f78e <vsprintf2+0xa2>
                        *s++ = *b;
    f774:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
    f778:	|  |  |  |  |     |  |  |   move.l d0,d1
    f77a:	|  |  |  |  |     |  |  |   addq.l #1,d1
    f77c:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
    f780:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
    f784:	|  |  |  |  |     |  |  |   move.b (a0),d1
    f786:	|  |  |  |  |     |  |  |   movea.l d0,a0
    f788:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
    f78a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
    f78e:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
    f792:	|  |  |  |  |     |  |      move.b (a0),d0
    f794:	|  |  |  |  |     |  \----- bne.s f774 <vsprintf2+0x88>
                    }
                    break;
    f796:	|  |  |  |  |  /--|-------- bra.w f82e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
    f79a:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
    f79e:	|  |  |  |  |  |            movea.l 56(sp),a0
    f7a2:	|  |  |  |  |  |            move.l (a0),d0
    f7a4:	|  |  |  |  |  |            move.l d0,d1
    f7a6:	|  |  |  |  |  |            subq.l #1,d1
    f7a8:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
    f7ac:	|  |  |  |  |  |        /-- bra.s f7ce <vsprintf2+0xe2>
                        *s++ = *sval++;
    f7ae:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
    f7b2:	|  |  |  |  |  |     |  |   move.l d1,d2
    f7b4:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f7b6:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
    f7ba:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
    f7be:	|  |  |  |  |  |     |  |   move.l d0,d2
    f7c0:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f7c2:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
    f7c6:	|  |  |  |  |  |     |  |   movea.l d1,a0
    f7c8:	|  |  |  |  |  |     |  |   move.b (a0),d1
    f7ca:	|  |  |  |  |  |     |  |   movea.l d0,a0
    f7cc:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
    f7ce:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
    f7d2:	|  |  |  |  |  |     |      move.b (a0),d0
    f7d4:	|  |  |  |  |  |     \----- bne.s f7ae <vsprintf2+0xc2>
                    }
                    break;
    f7d6:	|  |  |  |  |  +----------- bra.s f82e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
    f7d8:	|  |  |  |  \--|----------> addq.l #4,56(sp)
    f7dc:	|  |  |  |     |            movea.l 56(sp),a0
    f7e0:	|  |  |  |     |            move.l (a0),d0
    f7e2:	|  |  |  |     |            move.l d0,d1
    f7e4:	|  |  |  |     |            subq.l #1,d1
    f7e6:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
    f7ea:	|  |  |  |     |            move.l 40(sp),d0
    f7ee:	|  |  |  |     |            move.l d0,d2
    f7f0:	|  |  |  |     |            addq.l #1,d2
    f7f2:	|  |  |  |     |            move.l d2,40(sp)
    f7f6:	|  |  |  |     |            move.l 24(sp),d1
    f7fa:	|  |  |  |     |            movea.l d0,a0
    f7fc:	|  |  |  |     |            move.b d1,(a0)
                    break;
    f7fe:	|  |  |  |     +----------- bra.s f82e <vsprintf2+0x142>
                default:
                    *s++ = *p;
    f800:	|  |  |  \-----|----------> move.l 40(sp),d0
    f804:	|  |  |        |            move.l d0,d1
    f806:	|  |  |        |            addq.l #1,d1
    f808:	|  |  |        |            move.l d1,40(sp)
    f80c:	|  |  |        |            movea.l 36(sp),a0
    f810:	|  |  |        |            move.b (a0),d1
    f812:	|  |  |        |            movea.l d0,a0
    f814:	|  |  |        |            move.b d1,(a0)
                    break;
    f816:	|  |  |        +----------- bra.s f82e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
    f818:	|  |  \--------|----------> move.l 40(sp),d0
    f81c:	|  |           |            move.l d0,d1
    f81e:	|  |           |            addq.l #1,d1
    f820:	|  |           |            move.l d1,40(sp)
    f824:	|  |           |            movea.l 36(sp),a0
    f828:	|  |           |            move.b (a0),d1
    f82a:	|  |           |            movea.l d0,a0
    f82c:	|  |           |            move.b d1,(a0)
        }
        p++;
    f82e:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
    f832:	|  \----------------------> movea.l 36(sp),a0
    f836:	|                           move.b (a0),d0
    f838:	\-------------------------- bne.w f702 <vsprintf2+0x16>
    }
    *s = '\0';
    f83c:	                            movea.l 40(sp),a0
    f840:	                            clr.b (a0)
    return s - str;
    f842:	                            move.l 40(sp),d0
    f846:	                            sub.l 48(sp),d0
}
    f84a:	                            move.l (sp)+,d2
    f84c:	                            lea 40(sp),sp
    f850:	                            rts

0000f852 <sprintf>:

int sprintf(char* str, const char* format, ...) {
    f852:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
    f854:	moveq #16,d0
    f856:	add.l sp,d0
    f858:	move.l d0,d1
    f85a:	addq.l #4,d1
    f85c:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
    f860:	move.l 16(sp),d0
    f864:	move.l 4(sp),-(sp)
    f868:	move.l d0,-(sp)
    f86a:	move.l 20(sp),-(sp)
    f86e:	jsr f6ec <vsprintf2>
    f874:	lea 12(sp),sp
    f878:	move.l d0,(sp)
    va_end(args);
    f87a:	clr.l 4(sp)

    return done;
    f87e:	move.l (sp),d0
}
    f880:	addq.l #8,sp
    f882:	rts

0000f884 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
    f884:	       lea -20(sp),sp
    f888:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f88a:	       moveq #12,d0
    f88c:	       move.l d0,20(sp)
    f890:	       clr.l 16(sp)
    f894:	       move.l 17b28 <SysBase>,d0
    f89a:	       movea.l d0,a6
    f89c:	       move.l 20(sp),d0
    f8a0:	       move.l 16(sp),d1
    f8a4:	       jsr -684(a6)
    f8a8:	       move.l d0,12(sp)
    f8ac:	       move.l 12(sp),d0
    f8b0:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
    f8b4:	   /-- bne.s f8ba <addVarToStack+0x36>
    f8b6:	   |   clr.w d0
    f8b8:	/--|-- bra.s f902 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
    f8ba:	|  \-> move.l 8(sp),d0
    f8be:	|      move.l d0,-(sp)
    f8c0:	|      move.l 32(sp),-(sp)
    f8c4:	|      jsr 103e8 <copyMain>
    f8ca:	|      addq.l #8,sp
    f8cc:	|      tst.w d0
    f8ce:	|  /-- bne.s f8ea <addVarToStack+0x66>
        FreeVec(newStack);
    f8d0:	|  |   move.l 8(sp),4(sp)
    f8d6:	|  |   move.l 17b28 <SysBase>,d0
    f8dc:	|  |   movea.l d0,a6
    f8de:	|  |   movea.l 4(sp),a1
    f8e2:	|  |   jsr -690(a6)
        return FALSE;
    f8e6:	|  |   clr.w d0
    f8e8:	+--|-- bra.s f902 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
    f8ea:	|  \-> movea.l 32(sp),a0
    f8ee:	|      move.l (a0),d0
    f8f0:	|      movea.l 8(sp),a0
    f8f4:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f8f8:	|      movea.l 32(sp),a0
    f8fc:	|      move.l 8(sp),(a0)
    return TRUE;
    f900:	|      moveq #1,d0
}
    f902:	\----> movea.l (sp)+,a6
    f904:	       lea 20(sp),sp
    f908:	       rts

0000f90a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
    f90a:	       lea -16(sp),sp
    f90e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f910:	       moveq #12,d0
    f912:	       move.l d0,16(sp)
    f916:	       clr.l 12(sp)
    f91a:	       move.l 17b28 <SysBase>,d0
    f920:	       movea.l d0,a6
    f922:	       move.l 16(sp),d0
    f926:	       move.l 12(sp),d1
    f92a:	       jsr -684(a6)
    f92e:	       move.l d0,8(sp)
    f932:	       move.l 8(sp),d0
    f936:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
    f93a:	   /-- bne.s f940 <addVarToStackQuick+0x36>
    f93c:	   |   clr.w d0
    f93e:	/--|-- bra.s f976 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
    f940:	|  \-> move.l 4(sp),d0
    f944:	|      pea 8 <_start+0x8>
    f948:	|      move.l 28(sp),-(sp)
    f94c:	|      move.l d0,-(sp)
    f94e:	|      jsr 11fcc <memcpy>
    f954:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
    f958:	|      movea.l 24(sp),a0
    f95c:	|      clr.l (a0)

    newStack->next = *thisStack;
    f95e:	|      movea.l 28(sp),a0
    f962:	|      move.l (a0),d0
    f964:	|      movea.l 4(sp),a0
    f968:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f96c:	|      movea.l 28(sp),a0
    f970:	|      move.l 4(sp),(a0)
    return TRUE;
    f974:	|      moveq #1,d0
}
    f976:	\----> movea.l (sp)+,a6
    f978:	       lea 16(sp),sp
    f97c:	       rts

0000f97e <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
    f97e:	       lea -16(sp),sp
    f982:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
    f984:	       movea.l 24(sp),a0
    f988:	       move.l (a0),d0
    f98a:	       moveq #1,d1
    f98c:	       cmp.l d0,d1
    f98e:	   /-- bne.s f9b8 <addVariablesInSecond+0x3a>
    f990:	   |   movea.l 28(sp),a0
    f994:	   |   move.l (a0),d0
    f996:	   |   moveq #1,d1
    f998:	   |   cmp.l d0,d1
    f99a:	   +-- bne.s f9b8 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
    f99c:	   |   movea.l 28(sp),a0
    f9a0:	   |   move.l 4(a0),d1
    f9a4:	   |   movea.l 24(sp),a0
    f9a8:	   |   move.l 4(a0),d0
    f9ac:	   |   add.l d1,d0
    f9ae:	   |   movea.l 28(sp),a0
    f9b2:	   |   move.l d0,4(a0)
    f9b6:	/--|-- bra.s fa32 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
    f9b8:	|  \-> move.l 24(sp),-(sp)
    f9bc:	|      jsr 10620 <getTextFromAnyVar>
    f9c2:	|      addq.l #4,sp
    f9c4:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
    f9c8:	|      move.l 28(sp),-(sp)
    f9cc:	|      jsr 10620 <getTextFromAnyVar>
    f9d2:	|      addq.l #4,sp
    f9d4:	|      move.l d0,12(sp)

		unlinkVar(var2);
    f9d8:	|      move.l 28(sp),-(sp)
    f9dc:	|      jsr 10296 <unlinkVar>
    f9e2:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
    f9e4:	|      move.l 12(sp),-(sp)
    f9e8:	|      move.l 20(sp),-(sp)
    f9ec:	|      jsr f574 <joinStrings>
    f9f2:	|      addq.l #8,sp
    f9f4:	|      movea.l 28(sp),a0
    f9f8:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
    f9fc:	|      movea.l 28(sp),a0
    fa00:	|      moveq #3,d0
    fa02:	|      move.l d0,(a0)
		FreeVec(string1);
    fa04:	|      move.l 16(sp),8(sp)
    fa0a:	|      move.l 17b28 <SysBase>,d0
    fa10:	|      movea.l d0,a6
    fa12:	|      movea.l 8(sp),a1
    fa16:	|      jsr -690(a6)
		FreeVec(string2);
    fa1a:	|      move.l 12(sp),4(sp)
    fa20:	|      move.l 17b28 <SysBase>,d0
    fa26:	|      movea.l d0,a6
    fa28:	|      movea.l 4(sp),a1
    fa2c:	|      jsr -690(a6)
	}
}
    fa30:	|      nop
    fa32:	\----> nop
    fa34:	       movea.l (sp)+,a6
    fa36:	       lea 16(sp),sp
    fa3a:	       rts

0000fa3c <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
    fa3c:	movea.l 8(sp),a0
    fa40:	move.l 4(a0),-(sp)
    fa44:	move.l (a0),-(sp)
    fa46:	movea.l 12(sp),a0
    fa4a:	move.l 4(a0),-(sp)
    fa4e:	move.l (a0),-(sp)
    fa50:	jsr fa72 <compareVars>
    fa56:	lea 16(sp),sp
    fa5a:	move.l d0,-(sp)
    fa5c:	pea 1 <_start+0x1>
    fa60:	move.l 16(sp),-(sp)
    fa64:	jsr 1091a <setVariable>
    fa6a:	lea 12(sp),sp
}
    fa6e:	nop
    fa70:	rts

0000fa72 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
    fa72:	       subq.l #4,sp
	int re = 0;
    fa74:	       clr.l (sp)
	if (var1.varType == var2.varType) {
    fa76:	       move.l 8(sp),d1
    fa7a:	       move.l 16(sp),d0
    fa7e:	       cmp.l d1,d0
    fa80:	/----- bne.w fb48 <compareVars+0xd6>
		switch (var1.varType) {
    fa84:	|      move.l 8(sp),d0
    fa88:	|      moveq #9,d1
    fa8a:	|      cmp.l d0,d1
    fa8c:	|  /-- bcs.w fb30 <compareVars+0xbe>
    fa90:	|  |   add.l d0,d0
    fa92:	|  |   movea.l d0,a0
    fa94:	|  |   adda.l #64160,a0
    fa9a:	|  |   move.w (a0),d0
    fa9c:	|  |   jmp (faa0 <compareVars+0x2e>,pc,d0.w)
    faa0:	|  |   ori.b #-112,(a4)
    faa4:	|  |   ori.l #5243024,(a0)
    faaa:	|  |   ori.l #7733392,(a0)
    fab0:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
    fab6:	|  |   move.l d0,(sp)
			break;
    fab8:	+--|-- bra.w fb48 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
    fabc:	|  |   move.l 12(sp),d1
    fac0:	|  |   move.l 20(sp),d0
    fac4:	|  |   cmp.l d1,d0
    fac6:	|  |   seq d0
    fac8:	|  |   neg.b d0
    faca:	|  |   move.b d0,d0
    facc:	|  |   andi.l #255,d0
    fad2:	|  |   move.l d0,(sp)
			break;
    fad4:	+--|-- bra.s fb48 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
    fad6:	|  |   move.l 12(sp),d1
    fada:	|  |   move.l 20(sp),d0
    fade:	|  |   cmp.l d1,d0
    fae0:	|  |   seq d0
    fae2:	|  |   neg.b d0
    fae4:	|  |   move.b d0,d0
    fae6:	|  |   andi.l #255,d0
    faec:	|  |   move.l d0,(sp)
			break;
    faee:	+--|-- bra.s fb48 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
    faf0:	|  |   move.l 20(sp),d1
    faf4:	|  |   move.l 12(sp),d0
    faf8:	|  |   move.l d1,-(sp)
    fafa:	|  |   move.l d0,-(sp)
    fafc:	|  |   jsr f4f4 <strcmp>
    fb02:	|  |   addq.l #8,sp
    fb04:	|  |   tst.l d0
    fb06:	|  |   seq d0
    fb08:	|  |   neg.b d0
    fb0a:	|  |   move.b d0,d0
    fb0c:	|  |   andi.l #255,d0
    fb12:	|  |   move.l d0,(sp)
			break;
    fb14:	+--|-- bra.s fb48 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
    fb16:	|  |   move.l 12(sp),d1
    fb1a:	|  |   move.l 20(sp),d0
    fb1e:	|  |   cmp.l d1,d0
    fb20:	|  |   seq d0
    fb22:	|  |   neg.b d0
    fb24:	|  |   move.b d0,d0
    fb26:	|  |   andi.l #255,d0
    fb2c:	|  |   move.l d0,(sp)
			break;
    fb2e:	+--|-- bra.s fb48 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
    fb30:	|  \-> move.l 12(sp),d1
    fb34:	|      move.l 20(sp),d0
    fb38:	|      cmp.l d1,d0
    fb3a:	|      seq d0
    fb3c:	|      neg.b d0
    fb3e:	|      move.b d0,d0
    fb40:	|      andi.l #255,d0
    fb46:	|      move.l d0,(sp)
		}
	}
	return re;
    fb48:	\----> move.l (sp),d0
}
    fb4a:	       addq.l #4,sp
    fb4c:	       rts

0000fb4e <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
    fb4e:	             lea -16(sp),sp
    fb52:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
    fb54:	             movea.l 28(sp),a0
    fb58:	             moveq #6,d0
    fb5a:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fb5c:	             moveq #12,d0
    fb5e:	             move.l d0,12(sp)
    fb62:	             clr.l 8(sp)
    fb66:	             move.l 17b28 <SysBase>,d0
    fb6c:	             movea.l d0,a6
    fb6e:	             move.l 12(sp),d0
    fb72:	             move.l 8(sp),d1
    fb76:	             jsr -684(a6)
    fb7a:	             move.l d0,4(sp)
    fb7e:	             move.l 4(sp),d0
    fb82:	             movea.l 28(sp),a0
    fb86:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
    fb8a:	             movea.l 28(sp),a0
    fb8e:	             move.l 4(a0),d0
    fb92:	         /-- bne.s fb9a <copyStack+0x4c>
    fb94:	         |   clr.w d0
    fb96:	/--------|-- bra.w fc1c <copyStack+0xce>
	to->varData.theStack->first = NULL;
    fb9a:	|        \-> movea.l 28(sp),a0
    fb9e:	|            movea.l 4(a0),a0
    fba2:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
    fba4:	|            movea.l 28(sp),a0
    fba8:	|            movea.l 4(a0),a0
    fbac:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
    fbb0:	|            movea.l 28(sp),a0
    fbb4:	|            movea.l 4(a0),a0
    fbb8:	|            moveq #1,d0
    fbba:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
    fbbe:	|            movea.l 24(sp),a0
    fbc2:	|            movea.l 4(a0),a0
    fbc6:	|            move.l (a0),16(sp)

	while (a) {
    fbca:	|     /----- bra.s fc14 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
    fbcc:	|  /--|----> movea.l 28(sp),a0
    fbd0:	|  |  |      move.l 4(a0),d0
    fbd4:	|  |  |      move.l d0,d1
    fbd6:	|  |  |      move.l 16(sp),d0
    fbda:	|  |  |      move.l d1,-(sp)
    fbdc:	|  |  |      move.l d0,-(sp)
    fbde:	|  |  |      jsr f884 <addVarToStack>
    fbe4:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
    fbe6:	|  |  |      movea.l 28(sp),a0
    fbea:	|  |  |      movea.l 4(a0),a0
    fbee:	|  |  |      move.l 4(a0),d0
    fbf2:	|  |  |  /-- bne.s fc0a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
    fbf4:	|  |  |  |   movea.l 28(sp),a0
    fbf8:	|  |  |  |   movea.l 4(a0),a1
    fbfc:	|  |  |  |   movea.l 28(sp),a0
    fc00:	|  |  |  |   movea.l 4(a0),a0
    fc04:	|  |  |  |   move.l (a1),d0
    fc06:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
    fc0a:	|  |  |  \-> movea.l 16(sp),a0
    fc0e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
    fc14:	|  |  \----> tst.l 16(sp)
    fc18:	|  \-------- bne.s fbcc <copyStack+0x7e>
	}

	return TRUE;
    fc1a:	|            moveq #1,d0
}
    fc1c:	\----------> movea.l (sp)+,a6
    fc1e:	             lea 16(sp),sp
    fc22:	             rts

0000fc24 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
    fc24:	                lea -20(sp),sp
    fc28:	                move.l a6,-(sp)
    fc2a:	                move.l 36(sp),d0
    fc2e:	                move.w d0,d0
    fc30:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
    fc34:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
    fc3a:	                clr.l 16(sp)

    while (*huntVar) {
    fc3e:	   /----------- bra.s fcbc <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
    fc40:	/--|----------> movea.l 20(sp),a0
    fc44:	|  |            movea.l (a0),a0
    fc46:	|  |            movea.l 28(sp),a1
    fc4a:	|  |            move.l 4(a1),-(sp)
    fc4e:	|  |            move.l (a1),-(sp)
    fc50:	|  |            move.l 4(a0),-(sp)
    fc54:	|  |            move.l (a0),-(sp)
    fc56:	|  |            jsr fa72 <compareVars>
    fc5c:	|  |            lea 16(sp),sp
    fc60:	|  |            tst.l d0
    fc62:	|  |  /-------- beq.s fcae <deleteVarFromStack+0x8a>
            killMe = *huntVar;
    fc64:	|  |  |         movea.l 20(sp),a0
    fc68:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
    fc6c:	|  |  |         movea.l 12(sp),a0
    fc70:	|  |  |         move.l 8(a0),d0
    fc74:	|  |  |         movea.l 20(sp),a0
    fc78:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
    fc7a:	|  |  |         move.l 12(sp),d0
    fc7e:	|  |  |         move.l d0,-(sp)
    fc80:	|  |  |         jsr 10296 <unlinkVar>
    fc86:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
    fc88:	|  |  |         move.l 12(sp),8(sp)
    fc8e:	|  |  |         move.l 17b28 <SysBase>,d0
    fc94:	|  |  |         movea.l d0,a6
    fc96:	|  |  |         movea.l 8(sp),a1
    fc9a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
    fc9e:	|  |  |         tst.w 6(sp)
    fca2:	|  |  |     /-- bne.s fca8 <deleteVarFromStack+0x84>
    fca4:	|  |  |     |   moveq #1,d0
    fca6:	|  |  |  /--|-- bra.s fcca <deleteVarFromStack+0xa6>
            reply++;
    fca8:	|  |  |  |  \-> addq.l #1,16(sp)
    fcac:	|  +--|--|----- bra.s fcbc <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
    fcae:	|  |  \--|----> movea.l 20(sp),a0
    fcb2:	|  |     |      move.l (a0),d0
    fcb4:	|  |     |      move.l d0,d1
    fcb6:	|  |     |      addq.l #8,d1
    fcb8:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
    fcbc:	|  \-----|----> movea.l 20(sp),a0
    fcc0:	|        |      move.l (a0),d0
    fcc2:	\--------|----- bne.w fc40 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
    fcc6:	         |      move.l 16(sp),d0
}
    fcca:	         \----> movea.l (sp)+,a6
    fccc:	                lea 20(sp),sp
    fcd0:	                rts

0000fcd2 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
    fcd2:	       movea.l 4(sp),a0
    fcd6:	       move.l 4(a0),d0
    fcda:	       cmp.l 8(sp),d0
    fcde:	   /-- bhi.s fce4 <fastArrayGetByIndex+0x12>
    fce0:	   |   moveq #0,d0
    fce2:	/--|-- bra.s fcf2 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
    fce4:	|  \-> movea.l 4(sp),a0
    fce8:	|      move.l (a0),d1
    fcea:	|      move.l 8(sp),d0
    fcee:	|      lsl.l #3,d0
    fcf0:	|      add.l d1,d0
}
    fcf2:	\----> rts

0000fcf4 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
    fcf4:	                lea -32(sp),sp
    fcf8:	                move.l a6,-(sp)
    fcfa:	                move.l a2,-(sp)
    struct persona *p = NULL;
    fcfc:	                clr.l 36(sp)

    switch (thisVar->varType) {
    fd00:	                movea.l 44(sp),a0
    fd04:	                move.l (a0),d0
    fd06:	                moveq #8,d1
    fd08:	                cmp.l d0,d1
    fd0a:	            /-- beq.s fd18 <getCostumeFromVar+0x24>
    fd0c:	            |   moveq #9,d1
    fd0e:	            |   cmp.l d0,d1
    fd10:	   /--------|-- beq.w fdc6 <getCostumeFromVar+0xd2>
    fd14:	/--|--------|-- bra.w fdd0 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
    fd18:	|  |        \-> moveq #8,d0
    fd1a:	|  |            move.l d0,28(sp)
    fd1e:	|  |            clr.l 24(sp)
    fd22:	|  |            move.l 17b28 <SysBase>,d0
    fd28:	|  |            movea.l d0,a6
    fd2a:	|  |            move.l 28(sp),d0
    fd2e:	|  |            move.l 24(sp),d1
    fd32:	|  |            jsr -684(a6)
    fd36:	|  |            move.l d0,20(sp)
    fd3a:	|  |            move.l 20(sp),d0
    fd3e:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
    fd42:	|  |        /-- bne.s fd4a <getCostumeFromVar+0x56>
    fd44:	|  |        |   moveq #0,d0
    fd46:	|  |  /-----|-- bra.w fdfa <getCostumeFromVar+0x106>
            p->numDirections = 1;
    fd4a:	|  |  |     \-> movea.l 36(sp),a0
    fd4e:	|  |  |         moveq #1,d1
    fd50:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
    fd54:	|  |  |         moveq #12,d0
    fd56:	|  |  |         move.l d0,16(sp)
    fd5a:	|  |  |         clr.l 12(sp)
    fd5e:	|  |  |         move.l 17b28 <SysBase>,d0
    fd64:	|  |  |         movea.l d0,a6
    fd66:	|  |  |         move.l 16(sp),d0
    fd6a:	|  |  |         move.l 12(sp),d1
    fd6e:	|  |  |         jsr -684(a6)
    fd72:	|  |  |         move.l d0,8(sp)
    fd76:	|  |  |         move.l 8(sp),d0
    fd7a:	|  |  |         movea.l 36(sp),a0
    fd7e:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
    fd80:	|  |  |         movea.l 36(sp),a0
    fd84:	|  |  |         move.l (a0),d0
    fd86:	|  |  |     /-- bne.s fd8c <getCostumeFromVar+0x98>
    fd88:	|  |  |     |   moveq #0,d0
    fd8a:	|  |  +-----|-- bra.s fdfa <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
    fd8c:	|  |  |     \-> clr.l 32(sp)
    fd90:	|  |  |     /-- bra.s fdbc <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
    fd92:	|  |  |  /--|-> movea.l 44(sp),a0
    fd96:	|  |  |  |  |   move.l 4(a0),d0
    fd9a:	|  |  |  |  |   movea.l 36(sp),a0
    fd9e:	|  |  |  |  |   movea.l (a0),a0
    fda0:	|  |  |  |  |   move.l 32(sp),d1
    fda4:	|  |  |  |  |   add.l d1,d1
    fda6:	|  |  |  |  |   add.l d1,d1
    fda8:	|  |  |  |  |   lea (0,a0,d1.l),a2
    fdac:	|  |  |  |  |   move.l d0,-(sp)
    fdae:	|  |  |  |  |   jsr 592a <copyAnim>
    fdb4:	|  |  |  |  |   addq.l #4,sp
    fdb6:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
    fdb8:	|  |  |  |  |   addq.l #1,32(sp)
    fdbc:	|  |  |  |  \-> moveq #2,d1
    fdbe:	|  |  |  |      cmp.l 32(sp),d1
    fdc2:	|  |  |  \----- bge.s fd92 <getCostumeFromVar+0x9e>
            }
            break;
    fdc4:	|  |  |     /-- bra.s fdf6 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
    fdc6:	|  \--|-----|-> movea.l 44(sp),a0
    fdca:	|     |     |   move.l 4(a0),d0
    fdce:	|     +-----|-- bra.s fdfa <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
    fdd0:	\-----|-----|-> movea.l 44(sp),a0
    fdd4:	      |     |   move.l (a0),d0
    fdd6:	      |     |   add.l d0,d0
    fdd8:	      |     |   movea.l d0,a1
    fdda:	      |     |   adda.l d0,a1
    fddc:	      |     |   lea 16570 <typeName>,a0
    fde2:	      |     |   move.l (0,a1,a0.l),d0
    fde6:	      |     |   move.l d0,-(sp)
    fde8:	      |     |   pea 15c22 <zbuffer.c.d110ca03+0x6dc>
    fdee:	      |     |   jsr 12018 <KPrintF>
    fdf4:	      |     |   addq.l #8,sp
    }

    return p;
    fdf6:	      |     \-> move.l 36(sp),d0
}
    fdfa:	      \-------> movea.l (sp)+,a2
    fdfc:	                movea.l (sp)+,a6
    fdfe:	                lea 32(sp),sp
    fe02:	                rts

0000fe04 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
    fe04:	                lea -96(sp),sp
    fe08:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
    fe0c:	                move.l 116(sp),-(sp)
    fe10:	                pea 15c5a <zbuffer.c.d110ca03+0x714>
    fe16:	                jsr f574 <joinStrings>
    fe1c:	                addq.l #8,sp
    fe1e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
    fe22:	            /-- bne.s fe2a <getSavedGamesStack+0x26>
    fe24:	            |   clr.w d0
    fe26:	/-----------|-- bra.w 1003e <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
    fe2a:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
    fe2e:	|               move.l #89180,98(sp)
    fe36:	|               moveq #-2,d0
    fe38:	|               move.l d0,94(sp)
    fe3c:	|               move.l 17b30 <DOSBase>,d0
    fe42:	|               movea.l d0,a6
    fe44:	|               move.l 98(sp),d1
    fe48:	|               move.l 94(sp),d2
    fe4c:	|               jsr -84(a6)
    fe50:	|               move.l d0,90(sp)
    fe54:	|               move.l 90(sp),d0
    fe58:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
    fe5c:	|           /-- bne.s fe64 <getSavedGamesStack+0x60>
    fe5e:	|           |   clr.w d0
    fe60:	+-----------|-- bra.w 1003e <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
    fe64:	|           \-> move.l #260,82(sp)
    fe6c:	|               move.l #65536,78(sp)
    fe74:	|               move.l 17b28 <SysBase>,d0
    fe7a:	|               movea.l d0,a6
    fe7c:	|               move.l 82(sp),d0
    fe80:	|               move.l 78(sp),d1
    fe84:	|               jsr -684(a6)
    fe88:	|               move.l d0,74(sp)
    fe8c:	|               move.l 74(sp),d0
    fe90:	|               move.l d0,70(sp)
	if (!fib) {
    fe94:	|           /-- bne.s feb2 <getSavedGamesStack+0xae>
		UnLock(dirLock);
    fe96:	|           |   move.l 86(sp),22(sp)
    fe9c:	|           |   move.l 17b30 <DOSBase>,d0
    fea2:	|           |   movea.l d0,a6
    fea4:	|           |   move.l 22(sp),d1
    fea8:	|           |   jsr -90(a6)
		return FALSE;
    feac:	|           |   clr.w d0
    feae:	+-----------|-- bra.w 1003e <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
    feb2:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
    feb6:	|               move.l 86(sp),66(sp)
    febc:	|               move.l 70(sp),62(sp)
    fec2:	|               move.l 17b30 <DOSBase>,d0
    fec8:	|               movea.l d0,a6
    feca:	|               move.l 66(sp),d1
    fece:	|               move.l 62(sp),d2
    fed2:	|               jsr -102(a6)
    fed6:	|               move.l d0,58(sp)
    feda:	|               move.l 58(sp),d0
    fede:	|  /----------- beq.w fff2 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
    fee2:	|  |        /-- bra.w ffbe <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
    fee6:	|  |  /-----|-> move.l 70(sp),d2
    feea:	|  |  |     |   addq.l #8,d2
    feec:	|  |  |     |   move.l 70(sp),d0
    fef0:	|  |  |     |   addq.l #8,d0
    fef2:	|  |  |     |   move.l d0,-(sp)
    fef4:	|  |  |     |   jsr f534 <strlen>
    fefa:	|  |  |     |   addq.l #4,sp
    fefc:	|  |  |     |   move.l d0,d3
    fefe:	|  |  |     |   move.l 116(sp),-(sp)
    ff02:	|  |  |     |   jsr f534 <strlen>
    ff08:	|  |  |     |   addq.l #4,sp
    ff0a:	|  |  |     |   move.l d3,d1
    ff0c:	|  |  |     |   sub.l d0,d1
    ff0e:	|  |  |     |   move.l d2,d0
    ff10:	|  |  |     |   add.l d1,d0
    ff12:	|  |  |     |   move.l 116(sp),-(sp)
    ff16:	|  |  |     |   move.l d0,-(sp)
    ff18:	|  |  |     |   jsr f4f4 <strcmp>
    ff1e:	|  |  |     |   addq.l #8,sp
    ff20:	|  |  |     |   tst.l d0
    ff22:	|  |  |     +-- bne.w ffbe <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
    ff26:	|  |  |     |   move.l 70(sp),d0
    ff2a:	|  |  |     |   addq.l #8,d0
    ff2c:	|  |  |     |   move.l d0,-(sp)
    ff2e:	|  |  |     |   jsr f534 <strlen>
    ff34:	|  |  |     |   addq.l #4,sp
    ff36:	|  |  |     |   move.l d0,d2
    ff38:	|  |  |     |   move.l 116(sp),-(sp)
    ff3c:	|  |  |     |   jsr f534 <strlen>
    ff42:	|  |  |     |   addq.l #4,sp
    ff44:	|  |  |     |   move.l d0,d1
    ff46:	|  |  |     |   move.l d2,d0
    ff48:	|  |  |     |   sub.l d1,d0
    ff4a:	|  |  |     |   movea.l 70(sp),a0
    ff4e:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
    ff52:	|  |  |     |   move.l 70(sp),d0
    ff56:	|  |  |     |   addq.l #8,d0
    ff58:	|  |  |     |   move.l d0,-(sp)
    ff5a:	|  |  |     |   jsr 118 <decodeFilename>
    ff60:	|  |  |     |   addq.l #4,sp
    ff62:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
    ff66:	|  |  |     |   move.l 42(sp),-(sp)
    ff6a:	|  |  |     |   lea 18(sp),a0
    ff6e:	|  |  |     |   move.l a0,-(sp)
    ff70:	|  |  |     |   jsr 1026a <makeTextVar>
    ff76:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
    ff78:	|  |  |     |   move.l 42(sp),38(sp)
    ff7e:	|  |  |     |   move.l 17b28 <SysBase>,d0
    ff84:	|  |  |     |   movea.l d0,a6
    ff86:	|  |  |     |   movea.l 38(sp),a1
    ff8a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    ff8e:	|  |  |     |   move.l 112(sp),d0
    ff92:	|  |  |     |   move.l d0,-(sp)
    ff94:	|  |  |     |   lea 18(sp),a0
    ff98:	|  |  |     |   move.l a0,-(sp)
    ff9a:	|  |  |     |   jsr f884 <addVarToStack>
    ffa0:	|  |  |     |   addq.l #8,sp
    ffa2:	|  |  |     |   tst.w d0
    ffa4:	|  |  |  /--|-- beq.s fff6 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
    ffa6:	|  |  |  |  |   movea.l 112(sp),a0
    ffaa:	|  |  |  |  |   move.l 4(a0),d0
    ffae:	|  |  |  |  +-- bne.s ffbe <getSavedGamesStack+0x1ba>
    ffb0:	|  |  |  |  |   movea.l 112(sp),a0
    ffb4:	|  |  |  |  |   move.l (a0),d0
    ffb6:	|  |  |  |  |   movea.l 112(sp),a0
    ffba:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
    ffbe:	|  |  |  |  \-> move.l 86(sp),54(sp)
    ffc4:	|  |  |  |      move.l 70(sp),50(sp)
    ffca:	|  |  |  |      move.l 17b30 <DOSBase>,d0
    ffd0:	|  |  |  |      movea.l d0,a6
    ffd2:	|  |  |  |      move.l 54(sp),d1
    ffd6:	|  |  |  |      move.l 50(sp),d2
    ffda:	|  |  |  |      jsr -108(a6)
    ffde:	|  |  |  |      move.l d0,46(sp)
    ffe2:	|  |  |  |      move.l 46(sp),d0
    ffe6:	|  |  \--|----- bne.w fee6 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
    ffea:	|  |     |      move.w #1,106(sp)
    fff0:	|  |     |  /-- bra.s fff8 <getSavedGamesStack+0x1f4>
	}

cleanup:
    fff2:	|  \-----|--|-> nop
    fff4:	|        |  +-- bra.s fff8 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    fff6:	|        \--|-> nop
	FreeVec(fib);
    fff8:	|           \-> move.l 70(sp),34(sp)
    fffe:	|               move.l 17b28 <SysBase>,d0
   10004:	|               movea.l d0,a6
   10006:	|               movea.l 34(sp),a1
   1000a:	|               jsr -690(a6)
	UnLock(dirLock);
   1000e:	|               move.l 86(sp),30(sp)
   10014:	|               move.l 17b30 <DOSBase>,d0
   1001a:	|               movea.l d0,a6
   1001c:	|               move.l 30(sp),d1
   10020:	|               jsr -90(a6)
	FreeVec(pattern);
   10024:	|               move.l 102(sp),26(sp)
   1002a:	|               move.l 17b28 <SysBase>,d0
   10030:	|               movea.l d0,a6
   10032:	|               movea.l 26(sp),a1
   10036:	|               jsr -690(a6)
	return result;
   1003a:	|               move.w 106(sp),d0
}
   1003e:	\-------------> movem.l (sp)+,d2-d3/a6
   10042:	                lea 96(sp),sp
   10046:	                rts

00010048 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10048:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1004a:	       movea.l 20(sp),a0
   1004e:	       move.l (a0),d0
   10050:	       cmp.l 16(sp),d0
   10054:	/----- beq.s 100b8 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   10056:	|      move.l 16(sp),d0
   1005a:	|      add.l d0,d0
   1005c:	|      movea.l d0,a1
   1005e:	|      adda.l d0,a1
   10060:	|      lea 16570 <typeName>,a0
   10066:	|      move.l (0,a1,a0.l),d0
   1006a:	|      move.l d0,-(sp)
   1006c:	|      pea 15c5e <zbuffer.c.d110ca03+0x718>
   10072:	|      jsr f574 <joinStrings>
   10078:	|      addq.l #8,sp
   1007a:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1007e:	|      movea.l 20(sp),a0
   10082:	|      move.l (a0),d0
   10084:	|      add.l d0,d0
   10086:	|      movea.l d0,a1
   10088:	|      adda.l d0,a1
   1008a:	|      lea 16570 <typeName>,a0
   10090:	|      move.l (0,a1,a0.l),d0
   10094:	|      move.l d0,-(sp)
   10096:	|      pea 15ca0 <zbuffer.c.d110ca03+0x75a>
   1009c:	|      jsr f574 <joinStrings>
   100a2:	|      addq.l #8,sp
   100a4:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   100a6:	|      move.l (sp),-(sp)
   100a8:	|      move.l 8(sp),-(sp)
   100ac:	|      jsr 12018 <KPrintF>
   100b2:	|      addq.l #8,sp

		return FALSE;
   100b4:	|      clr.w d0
   100b6:	|  /-- bra.s 100c8 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   100b8:	\--|-> movea.l 20(sp),a0
   100bc:	   |   move.l 4(a0),d0
   100c0:	   |   movea.l 12(sp),a0
   100c4:	   |   move.l d0,(a0)
	return TRUE;
   100c6:	   |   moveq #1,d0
}
   100c8:	   \-> addq.l #8,sp
   100ca:	       rts

000100cc <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   100cc:	move.l 8(sp),-(sp)
   100d0:	jsr 3df6 <getNumberedString>
   100d6:	addq.l #4,sp
   100d8:	move.l d0,-(sp)
   100da:	move.l 8(sp),-(sp)
   100de:	jsr 1026a <makeTextVar>
   100e4:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   100e6:	movea.l 4(sp),a0
   100ea:	move.l 4(a0),d0
   100ee:	sne d0
   100f0:	neg.b d0
   100f2:	move.b d0,d0
   100f4:	andi.w #255,d0
}
   100f8:	rts

000100fa <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   100fa:	          subq.l #8,sp
    int size = stackSize(stacky);
   100fc:	          move.l 16(sp),-(sp)
   10100:	          jsr 10988 <stackSize>
   10106:	          addq.l #4,sp
   10108:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1010c:	          move.l 4(sp),-(sp)
   10110:	          move.l 16(sp),-(sp)
   10114:	          jsr 10164 <makeFastArraySize>
   1011a:	          addq.l #8,sp
   1011c:	          tst.w d0
   1011e:	      /-- bne.s 10124 <makeFastArrayFromStack+0x2a>
   10120:	      |   clr.w d0
   10122:	/-----|-- bra.s 10160 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   10124:	|     \-> movea.l 16(sp),a0
   10128:	|         move.l (a0),(sp)
    size = 0;
   1012a:	|         clr.l 4(sp)
    while (allV) {
   1012e:	|     /-- bra.s 1015a <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10130:	|  /--|-> movea.l 12(sp),a0
   10134:	|  |  |   movea.l 4(a0),a0
   10138:	|  |  |   move.l (a0),d1
   1013a:	|  |  |   move.l 4(sp),d0
   1013e:	|  |  |   lsl.l #3,d0
   10140:	|  |  |   add.l d0,d1
   10142:	|  |  |   move.l (sp),d0
   10144:	|  |  |   move.l d1,-(sp)
   10146:	|  |  |   move.l d0,-(sp)
   10148:	|  |  |   jsr 103e8 <copyMain>
   1014e:	|  |  |   addq.l #8,sp
        size++;
   10150:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10154:	|  |  |   movea.l (sp),a0
   10156:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   1015a:	|  |  \-> tst.l (sp)
   1015c:	|  \----- bne.s 10130 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1015e:	|         moveq #1,d0
}
   10160:	\-------> addq.l #8,sp
   10162:	          rts

00010164 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10164:	          lea -28(sp),sp
   10168:	          move.l a6,-(sp)
    if (size < 0) {
   1016a:	          tst.l 40(sp)
   1016e:	      /-- bge.s 10184 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10170:	      |   pea 15ce5 <zbuffer.c.d110ca03+0x79f>
   10176:	      |   jsr 12018 <KPrintF>
   1017c:	      |   addq.l #4,sp
		return FALSE;
   1017e:	      |   clr.w d0
   10180:	/-----|-- bra.w 10262 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10184:	|     \-> move.l 36(sp),-(sp)
   10188:	|         jsr 10296 <unlinkVar>
   1018e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10190:	|         movea.l 36(sp),a0
   10194:	|         moveq #10,d0
   10196:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   10198:	|         moveq #12,d0
   1019a:	|         move.l d0,24(sp)
   1019e:	|         clr.l 20(sp)
   101a2:	|         move.l 17b28 <SysBase>,d0
   101a8:	|         movea.l d0,a6
   101aa:	|         move.l 24(sp),d0
   101ae:	|         move.l 20(sp),d1
   101b2:	|         jsr -684(a6)
   101b6:	|         move.l d0,16(sp)
   101ba:	|         move.l 16(sp),d0
   101be:	|         movea.l 36(sp),a0
   101c2:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   101c6:	|         movea.l 36(sp),a0
   101ca:	|         move.l 4(a0),d0
   101ce:	|     /-- bne.s 101d6 <makeFastArraySize+0x72>
   101d0:	|     |   clr.w d0
   101d2:	+-----|-- bra.w 10262 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   101d6:	|     \-> move.l 40(sp),d0
   101da:	|         lsl.l #3,d0
   101dc:	|         move.l d0,12(sp)
   101e0:	|         clr.l 8(sp)
   101e4:	|         move.l 17b28 <SysBase>,d0
   101ea:	|         movea.l d0,a6
   101ec:	|         move.l 12(sp),d0
   101f0:	|         move.l 8(sp),d1
   101f4:	|         jsr -684(a6)
   101f8:	|         move.l d0,4(sp)
   101fc:	|         move.l 4(sp),d0
   10200:	|         movea.l 36(sp),a0
   10204:	|         movea.l 4(a0),a0
   10208:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1020a:	|         movea.l 36(sp),a0
   1020e:	|         movea.l 4(a0),a0
   10212:	|         move.l (a0),d0
   10214:	|     /-- bne.s 1021a <makeFastArraySize+0xb6>
   10216:	|     |   clr.w d0
   10218:	+-----|-- bra.s 10262 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1021a:	|     \-> clr.l 28(sp)
   1021e:	|     /-- bra.s 1023a <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   10220:	|  /--|-> movea.l 36(sp),a0
   10224:	|  |  |   movea.l 4(a0),a0
   10228:	|  |  |   move.l (a0),d1
   1022a:	|  |  |   move.l 28(sp),d0
   1022e:	|  |  |   lsl.l #3,d0
   10230:	|  |  |   movea.l d1,a0
   10232:	|  |  |   adda.l d0,a0
   10234:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   10236:	|  |  |   addq.l #1,28(sp)
   1023a:	|  |  \-> move.l 28(sp),d0
   1023e:	|  |      cmp.l 40(sp),d0
   10242:	|  \----- blt.s 10220 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   10244:	|         movea.l 36(sp),a0
   10248:	|         movea.l 4(a0),a0
   1024c:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   10252:	|         movea.l 36(sp),a0
   10256:	|         movea.l 4(a0),a0
   1025a:	|         moveq #1,d0
   1025c:	|         move.l d0,8(a0)
    return TRUE;
   10260:	|         moveq #1,d0
}
   10262:	\-------> movea.l (sp)+,a6
   10264:	          lea 28(sp),sp
   10268:	          rts

0001026a <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   1026a:	move.l 4(sp),-(sp)
   1026e:	jsr 10296 <unlinkVar>
   10274:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   10276:	movea.l 4(sp),a0
   1027a:	moveq #3,d0
   1027c:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   1027e:	move.l 8(sp),-(sp)
   10282:	jsr b8 <copyString>
   10288:	addq.l #4,sp
   1028a:	movea.l 4(sp),a0
   1028e:	move.l d0,4(a0)
}
   10292:	nop
   10294:	rts

00010296 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   10296:	                      lea -16(sp),sp
   1029a:	                      move.l a6,-(sp)
	switch (thisVar->varType) {
   1029c:	                      movea.l 24(sp),a0
   102a0:	                      move.l (a0),d0
   102a2:	                      moveq #10,d1
   102a4:	                      cmp.l d0,d1
   102a6:	            /-------- beq.w 10360 <unlinkVar+0xca>
   102aa:	            |         moveq #10,d1
   102ac:	            |         cmp.l d0,d1
   102ae:	/-----------|-------- bcs.w 103d4 <unlinkVar+0x13e>
   102b2:	|           |         moveq #8,d1
   102b4:	|           |         cmp.l d0,d1
   102b6:	|  /--------|-------- beq.w 103c0 <unlinkVar+0x12a>
   102ba:	|  |        |         moveq #8,d1
   102bc:	|  |        |         cmp.l d0,d1
   102be:	+--|--------|-------- bcs.w 103d4 <unlinkVar+0x13e>
   102c2:	|  |        |         moveq #3,d1
   102c4:	|  |        |         cmp.l d0,d1
   102c6:	|  |        |     /-- beq.s 102d2 <unlinkVar+0x3c>
   102c8:	|  |        |     |   moveq #6,d1
   102ca:	|  |        |     |   cmp.l d0,d1
   102cc:	|  |        |  /--|-- beq.s 102f8 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   102ce:	+--|--------|--|--|-- bra.w 103d4 <unlinkVar+0x13e>
        FreeVec(thisVar->varData.theString);
   102d2:	|  |        |  |  \-> movea.l 24(sp),a0
   102d6:	|  |        |  |      move.l 4(a0),4(sp)
   102dc:	|  |        |  |      move.l 17b28 <SysBase>,d0
   102e2:	|  |        |  |      movea.l d0,a6
   102e4:	|  |        |  |      movea.l 4(sp),a1
   102e8:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   102ec:	|  |        |  |      movea.l 24(sp),a0
   102f0:	|  |        |  |      clr.l 4(a0)
		break;
   102f4:	|  |  /-----|--|----- bra.w 103de <unlinkVar+0x148>
		thisVar->varData.theStack -> timesUsed --;
   102f8:	|  |  |     |  \----> movea.l 24(sp),a0
   102fc:	|  |  |     |         movea.l 4(a0),a0
   10300:	|  |  |     |         move.l 8(a0),d0
   10304:	|  |  |     |         subq.l #1,d0
   10306:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1030a:	|  |  |     |         movea.l 24(sp),a0
   1030e:	|  |  |     |         movea.l 4(a0),a0
   10312:	|  |  |     |         move.l 8(a0),d0
   10316:	|  |  |  /--|-------- bgt.w 103d8 <unlinkVar+0x142>
			while (thisVar->varData.theStack -> first) trimStack (thisVar->varData.theStack -> first);
   1031a:	|  |  |  |  |     /-- bra.s 10330 <unlinkVar+0x9a>
   1031c:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   10320:	|  |  |  |  |  |  |   movea.l 4(a0),a0
   10324:	|  |  |  |  |  |  |   move.l (a0),d0
   10326:	|  |  |  |  |  |  |   move.l d0,-(sp)
   10328:	|  |  |  |  |  |  |   jsr 109ac <trimStack>
   1032e:	|  |  |  |  |  |  |   addq.l #4,sp
   10330:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   10334:	|  |  |  |  |  |      movea.l 4(a0),a0
   10338:	|  |  |  |  |  |      move.l (a0),d0
   1033a:	|  |  |  |  |  \----- bne.s 1031c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   1033c:	|  |  |  |  |         movea.l 24(sp),a0
   10340:	|  |  |  |  |         move.l 4(a0),8(sp)
   10346:	|  |  |  |  |         move.l 17b28 <SysBase>,d0
   1034c:	|  |  |  |  |         movea.l d0,a6
   1034e:	|  |  |  |  |         movea.l 8(sp),a1
   10352:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   10356:	|  |  |  |  |         movea.l 24(sp),a0
   1035a:	|  |  |  |  |         clr.l 4(a0)
		break;
   1035e:	|  |  |  +--|-------- bra.s 103d8 <unlinkVar+0x142>
		thisVar->varData.fastArray -> timesUsed --;
   10360:	|  |  |  |  \-------> movea.l 24(sp),a0
   10364:	|  |  |  |            movea.l 4(a0),a0
   10368:	|  |  |  |            move.l 8(a0),d0
   1036c:	|  |  |  |            subq.l #1,d0
   1036e:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10372:	|  |  |  |            movea.l 24(sp),a0
   10376:	|  |  |  |            movea.l 4(a0),a0
   1037a:	|  |  |  |            move.l 8(a0),d0
   1037e:	|  |  |  |        /-- bgt.s 103dc <unlinkVar+0x146>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   10380:	|  |  |  |        |   movea.l 24(sp),a0
   10384:	|  |  |  |        |   movea.l 4(a0),a0
   10388:	|  |  |  |        |   move.l (a0),16(sp)
   1038c:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   10392:	|  |  |  |        |   movea.l d0,a6
   10394:	|  |  |  |        |   movea.l 16(sp),a1
   10398:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1039c:	|  |  |  |        |   movea.l 24(sp),a0
   103a0:	|  |  |  |        |   move.l 4(a0),12(sp)
   103a6:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   103ac:	|  |  |  |        |   movea.l d0,a6
   103ae:	|  |  |  |        |   movea.l 12(sp),a1
   103b2:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   103b6:	|  |  |  |        |   movea.l 24(sp),a0
   103ba:	|  |  |  |        |   clr.l 4(a0)
		break;
   103be:	|  |  |  |        +-- bra.s 103dc <unlinkVar+0x146>
		deleteAnim (thisVar->varData.animHandler);
   103c0:	|  \--|--|--------|-> movea.l 24(sp),a0
   103c4:	|     |  |        |   move.l 4(a0),d0
   103c8:	|     |  |        |   move.l d0,-(sp)
   103ca:	|     |  |        |   jsr 5ac4 <deleteAnim>
   103d0:	|     |  |        |   addq.l #4,sp
		break;
   103d2:	|     +--|--------|-- bra.s 103de <unlinkVar+0x148>
		break;
   103d4:	\-----|--|--------|-> nop
   103d6:	      +--|--------|-- bra.s 103de <unlinkVar+0x148>
		break;
   103d8:	      |  \--------|-> nop
   103da:	      +-----------|-- bra.s 103de <unlinkVar+0x148>
		break;
   103dc:	      |           \-> nop
	}
}
   103de:	      \-------------> nop
   103e0:	                      movea.l (sp)+,a6
   103e2:	                      lea 16(sp),sp
   103e6:	                      rts

000103e8 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   103e8:	       movea.l 4(sp),a0
   103ec:	       move.l (a0),d0
   103ee:	       movea.l 8(sp),a0
   103f2:	       move.l d0,(a0)
	switch (to->varType) {
   103f4:	       movea.l 8(sp),a0
   103f8:	       move.l (a0),d0
   103fa:	       moveq #10,d1
   103fc:	       cmp.l d0,d1
   103fe:	/----- bcs.w 104f0 <copyMain+0x108>
   10402:	|      add.l d0,d0
   10404:	|      movea.l d0,a0
   10406:	|      adda.l #66578,a0
   1040c:	|      move.w (a0),d0
   1040e:	|      jmp (10412 <copyMain+0x2a>,pc,d0.w)
   10412:	|      .short 0x00da
   10414:	|      ori.b #22,(a6)
   10418:	|      ori.w #22,(a4)
   1041c:	|      ori.b #-126,(a6)
   10420:	|      ori.b #-68,(a6)
   10424:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   1042c:	|      move.l 4(a0),d0
   10430:	|      movea.l 8(sp),a0
   10434:	|      move.l d0,4(a0)
		return TRUE;
   10438:	|      moveq #1,d0
   1043a:	|  /-- bra.w 10502 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   1043e:	|  |   movea.l 4(sp),a0
   10442:	|  |   move.l 4(a0),d0
   10446:	|  |   movea.l 8(sp),a0
   1044a:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   1044e:	|  |   movea.l 8(sp),a0
   10452:	|  |   movea.l 4(a0),a0
   10456:	|  |   move.l 8(a0),d0
   1045a:	|  |   addq.l #1,d0
   1045c:	|  |   move.l d0,8(a0)
		return TRUE;
   10460:	|  |   moveq #1,d0
   10462:	|  +-- bra.w 10502 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   10466:	|  |   movea.l 4(sp),a0
   1046a:	|  |   move.l 4(a0),d0
   1046e:	|  |   move.l d0,-(sp)
   10470:	|  |   jsr b8 <copyString>
   10476:	|  |   addq.l #4,sp
   10478:	|  |   movea.l 8(sp),a0
   1047c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   10480:	|  |   movea.l 8(sp),a0
   10484:	|  |   move.l 4(a0),d0
   10488:	|  |   sne d0
   1048a:	|  |   neg.b d0
   1048c:	|  |   move.b d0,d0
   1048e:	|  |   andi.w #255,d0
   10492:	|  +-- bra.s 10502 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   10494:	|  |   movea.l 4(sp),a0
   10498:	|  |   move.l 4(a0),d0
   1049c:	|  |   movea.l 8(sp),a0
   104a0:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   104a4:	|  |   movea.l 8(sp),a0
   104a8:	|  |   movea.l 4(a0),a0
   104ac:	|  |   move.l 8(a0),d0
   104b0:	|  |   addq.l #1,d0
   104b2:	|  |   move.l d0,8(a0)
		return TRUE;
   104b6:	|  |   moveq #1,d0
   104b8:	|  +-- bra.s 10502 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   104ba:	|  |   movea.l 4(sp),a0
   104be:	|  |   move.l 4(a0),d0
   104c2:	|  |   movea.l 8(sp),a0
   104c6:	|  |   move.l d0,4(a0)
		return TRUE;
   104ca:	|  |   moveq #1,d0
   104cc:	|  +-- bra.s 10502 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   104ce:	|  |   movea.l 4(sp),a0
   104d2:	|  |   move.l 4(a0),d0
   104d6:	|  |   move.l d0,-(sp)
   104d8:	|  |   jsr 592a <copyAnim>
   104de:	|  |   addq.l #4,sp
   104e0:	|  |   movea.l 8(sp),a0
   104e4:	|  |   move.l d0,4(a0)
		return TRUE;
   104e8:	|  |   moveq #1,d0
   104ea:	|  +-- bra.s 10502 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   104ec:	|  |   moveq #1,d0
   104ee:	|  +-- bra.s 10502 <copyMain+0x11a>

		default:
		break;
   104f0:	\--|-> nop
	}
	KPrintF("Unknown value type");
   104f2:	   |   pea 15d36 <zbuffer.c.d110ca03+0x7f0>
   104f8:	   |   jsr 12018 <KPrintF>
   104fe:	   |   addq.l #4,sp
	return FALSE;
   10500:	   |   clr.w d0
}
   10502:	   \-> rts

00010504 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   10504:	move.l 8(sp),-(sp)
   10508:	jsr 10296 <unlinkVar>
   1050e:	addq.l #4,sp
	return copyMain(from, to);
   10510:	move.l 8(sp),-(sp)
   10514:	move.l 8(sp),-(sp)
   10518:	jsr 103e8 <copyMain>
   1051e:	addq.l #8,sp
}
   10520:	rts

00010522 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   10522:	       movea.l 4(sp),a0
   10526:	       move.l (a0),d0
   10528:	       moveq #8,d1
   1052a:	       cmp.l d0,d1
   1052c:	   /-- bne.s 10542 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   1052e:	   |   movea.l 4(sp),a0
   10532:	   |   move.l 4(a0),d0
   10536:	   |   move.l d0,-(sp)
   10538:	   |   jsr 592a <copyAnim>
   1053e:	   |   addq.l #4,sp
   10540:	/--|-- bra.s 10588 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   10542:	|  \-> movea.l 4(sp),a0
   10546:	|      move.l (a0),d0
   10548:	|      moveq #1,d1
   1054a:	|      cmp.l d0,d1
   1054c:	|  /-- bne.s 10560 <getAnimationFromVar+0x3e>
   1054e:	|  |   movea.l 4(sp),a0
   10552:	|  |   move.l 4(a0),d0
   10556:	|  +-- bne.s 10560 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   10558:	|  |   jsr 68b0 <makeNullAnim>
   1055e:	+--|-- bra.s 10588 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10560:	|  \-> movea.l 4(sp),a0
   10564:	|      move.l (a0),d0
   10566:	|      add.l d0,d0
   10568:	|      movea.l d0,a1
   1056a:	|      adda.l d0,a1
   1056c:	|      lea 16570 <typeName>,a0
   10572:	|      move.l (0,a1,a0.l),d0
   10576:	|      move.l d0,-(sp)
   10578:	|      pea 15c22 <zbuffer.c.d110ca03+0x6dc>
   1057e:	|      jsr 12018 <KPrintF>
   10584:	|      addq.l #8,sp
	return NULL;
   10586:	|      moveq #0,d0
}
   10588:	\----> rts

0001058a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1058a:	       movea.l 4(sp),a0
   1058e:	       move.l (a0),d0
   10590:	       moveq #10,d1
   10592:	       cmp.l d0,d1
   10594:	/----- bcs.w 1061a <getBoolean+0x90>
   10598:	|      add.l d0,d0
   1059a:	|      movea.l d0,a0
   1059c:	|      adda.l #66984,a0
   105a2:	|      move.w (a0),d0
   105a4:	|      jmp (105a8 <getBoolean+0x1e>,pc,d0.w)
   105a8:	|      ori.b #26,(a6)
   105ac:	|      ori.w #68,(114,a2,d0.w)
   105b2:	|      ori.w #46,(114,a2,d0.w)
   105b8:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   105be:	|      clr.w d0
   105c0:	|  /-- bra.s 1061e <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   105c2:	|  |   movea.l 4(sp),a0
   105c6:	|  |   move.l 4(a0),d0
   105ca:	|  |   sne d0
   105cc:	|  |   neg.b d0
   105ce:	|  |   move.b d0,d0
   105d0:	|  |   andi.w #255,d0
   105d4:	|  +-- bra.s 1061e <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   105d6:	|  |   movea.l 4(sp),a0
   105da:	|  |   movea.l 4(a0),a0
   105de:	|  |   move.l (a0),d0
   105e0:	|  |   sne d0
   105e2:	|  |   neg.b d0
   105e4:	|  |   move.b d0,d0
   105e6:	|  |   andi.w #255,d0
   105ea:	|  +-- bra.s 1061e <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   105ec:	|  |   movea.l 4(sp),a0
   105f0:	|  |   movea.l 4(a0),a0
   105f4:	|  |   move.b (a0),d0
   105f6:	|  |   sne d0
   105f8:	|  |   neg.b d0
   105fa:	|  |   move.b d0,d0
   105fc:	|  |   andi.w #255,d0
   10600:	|  +-- bra.s 1061e <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   10602:	|  |   movea.l 4(sp),a0
   10606:	|  |   movea.l 4(a0),a0
   1060a:	|  |   move.l 4(a0),d0
   1060e:	|  |   sne d0
   10610:	|  |   neg.b d0
   10612:	|  |   move.b d0,d0
   10614:	|  |   andi.w #255,d0
   10618:	|  +-- bra.s 1061e <getBoolean+0x94>

		default:
		break;
   1061a:	\--|-> nop
	}
	return TRUE;
   1061c:	   |   moveq #1,d0
}
   1061e:	   \-> rts

00010620 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   10620:	      /----------> lea -76(sp),sp
   10624:	      |            move.l a6,-(sp)
	switch (from->varType) {
   10626:	      |            movea.l 84(sp),a0
   1062a:	      |            move.l (a0),d0
   1062c:	      |            moveq #10,d1
   1062e:	      |            cmp.l d0,d1
   10630:	/-----|----------- bcs.w 108ce <getTextFromAnyVar+0x2ae>
   10634:	|     |            add.l d0,d0
   10636:	|     |            movea.l d0,a0
   10638:	|     |            adda.l #67140,a0
   1063e:	|     |            move.w (a0),d0
   10640:	|     |            jmp (10644 <getTextFromAnyVar+0x24>,pc,d0.w)
   10644:	|     |            .short 0x028a
   10646:	|     |            bset d0,(a0)+
   10648:	|     |            .short 0x028a
   1064a:	|     |            ori.b #-118,(a6)
   1064e:	|     |            andi.b #8,ccr
   10652:	|     |            andi.w #650,-(a0)
   10656:	|     |            .short 0x028a
   10658:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   1065e:	|     |            move.l 4(a0),d0
   10662:	|     |            move.l d0,-(sp)
   10664:	|     |            jsr b8 <copyString>
   1066a:	|     |            addq.l #4,sp
   1066c:	|  /--|----------- bra.w 108f0 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   10670:	|  |  |            pea 15d49 <zbuffer.c.d110ca03+0x803>
   10676:	|  |  |            jsr b8 <copyString>
   1067c:	|  |  |            addq.l #4,sp
   1067e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10682:	|  |  |            clr.l 72(sp)
   10686:	|  |  |     /----- bra.w 10730 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1068a:	|  |  |  /--|----> pea 15d4f <zbuffer.c.d110ca03+0x809>
   10690:	|  |  |  |  |      move.l 80(sp),-(sp)
   10694:	|  |  |  |  |      jsr f574 <joinStrings>
   1069a:	|  |  |  |  |      addq.l #8,sp
   1069c:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   106a0:	|  |  |  |  |  /-- bne.s 106a8 <getTextFromAnyVar+0x88>
   106a2:	|  |  |  |  |  |   moveq #0,d0
   106a4:	|  +--|--|--|--|-- bra.w 108f0 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   106a8:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   106ae:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   106b4:	|  |  |  |  |      movea.l d0,a6
   106b6:	|  |  |  |  |      movea.l 56(sp),a1
   106ba:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   106be:	|  |  |  |  |      movea.l 84(sp),a0
   106c2:	|  |  |  |  |      movea.l 4(a0),a0
   106c6:	|  |  |  |  |      move.l (a0),d1
   106c8:	|  |  |  |  |      move.l 72(sp),d0
   106cc:	|  |  |  |  |      lsl.l #3,d0
   106ce:	|  |  |  |  |      add.l d1,d0
   106d0:	|  |  |  |  |      move.l d0,-(sp)
   106d2:	|  |  +--|--|----- jsr 10620 <getTextFromAnyVar>(pc)
   106d6:	|  |  |  |  |      addq.l #4,sp
   106d8:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   106dc:	|  |  |  |  |      move.l 52(sp),-(sp)
   106e0:	|  |  |  |  |      move.l 64(sp),-(sp)
   106e4:	|  |  |  |  |      jsr f574 <joinStrings>
   106ea:	|  |  |  |  |      addq.l #8,sp
   106ec:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   106f0:	|  |  |  |  |  /-- bne.s 106f8 <getTextFromAnyVar+0xd8>
   106f2:	|  |  |  |  |  |   moveq #0,d0
   106f4:	|  +--|--|--|--|-- bra.w 108f0 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   106f8:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   106fe:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   10704:	|  |  |  |  |      movea.l d0,a6
   10706:	|  |  |  |  |      movea.l 48(sp),a1
   1070a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1070e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   10712:	|  |  |  |  |      move.l 60(sp),44(sp)
   10718:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   1071e:	|  |  |  |  |      movea.l d0,a6
   10720:	|  |  |  |  |      movea.l 44(sp),a1
   10724:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   10728:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1072c:	|  |  |  |  |      addq.l #1,72(sp)
   10730:	|  |  |  |  \----> movea.l 84(sp),a0
   10734:	|  |  |  |         movea.l 4(a0),a0
   10738:	|  |  |  |         move.l 4(a0),d0
   1073c:	|  |  |  |         cmp.l 72(sp),d0
   10740:	|  |  |  \-------- bgt.w 1068a <getTextFromAnyVar+0x6a>
			}
			return builder;
   10744:	|  |  |            move.l 76(sp),d0
   10748:	|  +--|----------- bra.w 108f0 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1074c:	|  |  |            pea 15d51 <zbuffer.c.d110ca03+0x80b>
   10752:	|  |  |            jsr b8 <copyString>
   10758:	|  |  |            addq.l #4,sp
   1075a:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   1075e:	|  |  |            movea.l 84(sp),a0
   10762:	|  |  |            movea.l 4(a0),a0
   10766:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1076a:	|  |  |     /----- bra.w 1080c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   1076e:	|  |  |  /--|----> pea 15d4f <zbuffer.c.d110ca03+0x809>
   10774:	|  |  |  |  |      move.l 72(sp),-(sp)
   10778:	|  |  |  |  |      jsr f574 <joinStrings>
   1077e:	|  |  |  |  |      addq.l #8,sp
   10780:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   10784:	|  |  |  |  |  /-- bne.s 1078c <getTextFromAnyVar+0x16c>
   10786:	|  |  |  |  |  |   moveq #0,d0
   10788:	|  +--|--|--|--|-- bra.w 108f0 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1078c:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   10792:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   10798:	|  |  |  |  |      movea.l d0,a6
   1079a:	|  |  |  |  |      movea.l 32(sp),a1
   1079e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   107a2:	|  |  |  |  |      move.l 64(sp),d0
   107a6:	|  |  |  |  |      move.l d0,-(sp)
   107a8:	|  |  \--|--|----- jsr 10620 <getTextFromAnyVar>(pc)
   107ac:	|  |     |  |      addq.l #4,sp
   107ae:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   107b2:	|  |     |  |      move.l 28(sp),-(sp)
   107b6:	|  |     |  |      move.l 40(sp),-(sp)
   107ba:	|  |     |  |      jsr f574 <joinStrings>
   107c0:	|  |     |  |      addq.l #8,sp
   107c2:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   107c6:	|  |     |  |  /-- bne.s 107ce <getTextFromAnyVar+0x1ae>
   107c8:	|  |     |  |  |   moveq #0,d0
   107ca:	|  +-----|--|--|-- bra.w 108f0 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   107ce:	|  |     |  |  \-> move.l 28(sp),24(sp)
   107d4:	|  |     |  |      move.l 17b28 <SysBase>,d0
   107da:	|  |     |  |      movea.l d0,a6
   107dc:	|  |     |  |      movea.l 24(sp),a1
   107e0:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   107e4:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   107e8:	|  |     |  |      move.l 36(sp),20(sp)
   107ee:	|  |     |  |      move.l 17b28 <SysBase>,d0
   107f4:	|  |     |  |      movea.l d0,a6
   107f6:	|  |     |  |      movea.l 20(sp),a1
   107fa:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   107fe:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   10802:	|  |     |  |      movea.l 64(sp),a0
   10806:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1080c:	|  |     |  \----> tst.l 64(sp)
   10810:	|  |     \-------- bne.w 1076e <getTextFromAnyVar+0x14e>
			}
			return builder;
   10814:	|  |               move.l 68(sp),d0
   10818:	|  +-------------- bra.w 108f0 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1081c:	|  |               moveq #10,d0
   1081e:	|  |               move.l d0,16(sp)
   10822:	|  |               clr.l 12(sp)
   10826:	|  |               move.l 17b28 <SysBase>,d0
   1082c:	|  |               movea.l d0,a6
   1082e:	|  |               move.l 16(sp),d0
   10832:	|  |               move.l 12(sp),d1
   10836:	|  |               jsr -684(a6)
   1083a:	|  |               move.l d0,8(sp)
   1083e:	|  |               move.l 8(sp),d0
   10842:	|  |               move.l d0,4(sp)
			if (! buff) {
   10846:	|  |           /-- bne.s 1085c <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   10848:	|  |           |   pea 15d58 <zbuffer.c.d110ca03+0x812>
   1084e:	|  |           |   jsr 12018 <KPrintF>
   10854:	|  |           |   addq.l #4,sp
				return NULL;
   10856:	|  |           |   moveq #0,d0
   10858:	|  +-----------|-- bra.w 108f0 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   1085c:	|  |           \-> movea.l 84(sp),a0
   10860:	|  |               move.l 4(a0),d0
   10864:	|  |               move.l d0,-(sp)
   10866:	|  |               pea 15d82 <zbuffer.c.d110ca03+0x83c>
   1086c:	|  |               move.l 12(sp),-(sp)
   10870:	|  |               jsr f852 <sprintf>
   10876:	|  |               lea 12(sp),sp
			return buff;
   1087a:	|  |               move.l 4(sp),d0
   1087e:	|  +-------------- bra.s 108f0 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   10880:	|  |               movea.l 84(sp),a0
   10884:	|  |               move.l 4(a0),d0
   10888:	|  |               move.l d0,-(sp)
   1088a:	|  |               jsr 108a <resourceNameFromNum>
   10890:	|  |               addq.l #4,sp
   10892:	|  |               move.l d0,-(sp)
   10894:	|  |               pea 130d9 <cursors.c.46c58bd4+0x312>
   1089a:	|  |               jsr f574 <joinStrings>
   108a0:	|  |               addq.l #8,sp
   108a2:	|  +-------------- bra.s 108f0 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   108a4:	|  |               movea.l 84(sp),a0
   108a8:	|  |               move.l 4(a0),d0
   108ac:	|  |               move.l d0,-(sp)
   108ae:	|  |               jsr 8d96 <findObjectType>
   108b4:	|  |               addq.l #4,sp
   108b6:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   108ba:	+--|-------------- beq.s 108ce <getTextFromAnyVar+0x2ae>
   108bc:	|  |               movea.l 40(sp),a0
   108c0:	|  |               move.l (a0),d0
   108c2:	|  |               move.l d0,-(sp)
   108c4:	|  |               jsr b8 <copyString>
   108ca:	|  |               addq.l #4,sp
   108cc:	|  +-------------- bra.s 108f0 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   108ce:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   108d0:	   |               movea.l 84(sp),a0
   108d4:	   |               move.l (a0),d0
   108d6:	   |               add.l d0,d0
   108d8:	   |               movea.l d0,a1
   108da:	   |               adda.l d0,a1
   108dc:	   |               lea 16570 <typeName>,a0
   108e2:	   |               move.l (0,a1,a0.l),d0
   108e6:	   |               move.l d0,-(sp)
   108e8:	   |               jsr b8 <copyString>
   108ee:	   |               addq.l #4,sp
}
   108f0:	   \-------------> movea.l (sp)+,a6
   108f2:	                   lea 76(sp),sp
   108f6:	                   rts

000108f8 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   108f8:	move.l 4(sp),-(sp)
   108fc:	jsr 10296 <unlinkVar>
   10902:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   10904:	movea.l 4(sp),a0
   10908:	moveq #9,d0
   1090a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1090c:	movea.l 4(sp),a0
   10910:	move.l 8(sp),4(a0)
}
   10916:	nop
   10918:	rts

0001091a <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   1091a:	move.l 4(sp),-(sp)
   1091e:	jsr 10296 <unlinkVar>
   10924:	addq.l #4,sp
	thisVar->varType = vT;
   10926:	movea.l 4(sp),a0
   1092a:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1092e:	movea.l 4(sp),a0
   10932:	move.l 12(sp),4(a0)
}
   10938:	nop
   1093a:	rts

0001093c <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1093c:	      /-- bra.s 1094e <stackGetByIndex+0x12>
        vS = vS->next;
   1093e:	/-----|-> movea.l 4(sp),a0
   10942:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   10948:	|     +-- bne.s 1094e <stackGetByIndex+0x12>
            return NULL;
   1094a:	|     |   moveq #0,d0
   1094c:	|  /--|-- bra.s 10962 <stackGetByIndex+0x26>
    while (theIndex--) {
   1094e:	|  |  \-> move.l 8(sp),d0
   10952:	|  |      move.l d0,d1
   10954:	|  |      subq.l #1,d1
   10956:	|  |      move.l d1,8(sp)
   1095a:	|  |      tst.l d0
   1095c:	\--|----- bne.s 1093e <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1095e:	   |      move.l 4(sp),d0
}
   10962:	   \----> rts

00010964 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   10964:	          tst.l 4(sp)
   10968:	      /-- bne.s 10978 <stackFindLast+0x14>
		return NULL;
   1096a:	      |   moveq #0,d0
   1096c:	/-----|-- bra.s 10986 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1096e:	|  /--|-> movea.l 4(sp),a0
   10972:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   10978:	|  |  \-> movea.l 4(sp),a0
   1097c:	|  |      move.l 8(a0),d0
   10980:	|  \----- bne.s 1096e <stackFindLast+0xa>

	return hunt;
   10982:	|         move.l 4(sp),d0
}
   10986:	\-------> rts

00010988 <stackSize>:

int stackSize (const struct stackHandler * me) {
   10988:	       subq.l #8,sp
	int r = 0;
   1098a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1098e:	       movea.l 12(sp),a0
   10992:	       move.l (a0),(sp)
	while (a) {
   10994:	   /-- bra.s 109a0 <stackSize+0x18>
		r ++;
   10996:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   1099a:	|  |   movea.l (sp),a0
   1099c:	|  |   move.l 8(a0),(sp)
	while (a) {
   109a0:	|  \-> tst.l (sp)
   109a2:	\----- bne.s 10996 <stackSize+0xe>
	}
	return r;
   109a4:	       move.l 4(sp),d0
}
   109a8:	       addq.l #8,sp
   109aa:	       rts

000109ac <trimStack>:

void trimStack (struct variableStack * stack) {
   109ac:	subq.l #8,sp
   109ae:	move.l a6,-(sp)
	struct variableStack * killMe = stack;
   109b0:	move.l 16(sp),8(sp)
	stack = stack -> next;
   109b6:	movea.l 16(sp),a0
   109ba:	move.l 8(a0),16(sp)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   109c0:	move.l 8(sp),d0
   109c4:	move.l d0,-(sp)
   109c6:	jsr 10296 <unlinkVar>
   109cc:	addq.l #4,sp
	FreeVec(killMe);
   109ce:	move.l 8(sp),4(sp)
   109d4:	move.l 17b28 <SysBase>,d0
   109da:	movea.l d0,a6
   109dc:	movea.l 4(sp),a1
   109e0:	jsr -690(a6)
   109e4:	nop
   109e6:	movea.l (sp)+,a6
   109e8:	addq.l #8,sp
   109ea:	rts

000109ec <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   109ec:	pea 15d85 <zbuffer.c.d110ca03+0x83f>
   109f2:	jsr 12018 <KPrintF>
   109f8:	addq.l #4,sp
	return FALSE;
   109fa:	clr.w d0
}
   109fc:	rts

000109fe <stringWidth>:

int stringWidth (char * theText) {
   109fe:	       subq.l #8,sp
	int a = 0;
   10a00:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   10a04:	       clr.l (sp)

	if (! fontTableSize) return 0;
   10a06:	       move.l 17c16 <fontTableSize>,d0
   10a0c:	/----- bne.s 10a12 <stringWidth+0x14>
   10a0e:	|      moveq #0,d0
   10a10:	|  /-- bra.s 10a14 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   10a12:	\--|-> move.l (sp),d0
}
   10a14:	   \-> addq.l #8,sp
   10a16:	       rts

00010a18 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   10a18:	pea 15dac <zbuffer.c.d110ca03+0x866>
   10a1e:	jsr 12018 <KPrintF>
   10a24:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   10a26:	moveq #1,d0
}
   10a28:	rts

00010a2a <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   10a2a:	       lea -16(sp),sp
   10a2e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   10a30:	       moveq #36,d0
   10a32:	       move.l d0,16(sp)
   10a36:	       clr.l 12(sp)
   10a3a:	       move.l 17b28 <SysBase>,d0
   10a40:	       movea.l d0,a6
   10a42:	       move.l 16(sp),d0
   10a46:	       move.l 12(sp),d1
   10a4a:	       jsr -684(a6)
   10a4e:	       move.l d0,8(sp)
   10a52:	       move.l 8(sp),d0
   10a56:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   10a5a:	   /-- bne.s 10a62 <addScreenRegion+0x38>
   10a5c:	   |   clr.w d0
   10a5e:	/--|-- bra.w 10ae2 <addScreenRegion+0xb8>
    newRegion->di = di;
   10a62:	|  \-> movea.l 4(sp),a0
   10a66:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   10a6c:	|      movea.l 4(sp),a0
   10a70:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   10a74:	|      movea.l 4(sp),a0
   10a78:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   10a7e:	|      movea.l 4(sp),a0
   10a82:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   10a88:	|      movea.l 4(sp),a0
   10a8c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   10a92:	|      movea.l 4(sp),a0
   10a96:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   10a9c:	|      movea.l 4(sp),a0
   10aa0:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   10aa6:	|      move.l 52(sp),-(sp)
   10aaa:	|      jsr 8e86 <loadObjectType>
   10ab0:	|      addq.l #4,sp
   10ab2:	|      movea.l 4(sp),a0
   10ab6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   10aba:	|      move.l 17c1a <allScreenRegions>,d0
   10ac0:	|      movea.l 4(sp),a0
   10ac4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   10ac8:	|      move.l 4(sp),17c1a <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   10ad0:	|      movea.l 4(sp),a0
   10ad4:	|      move.l 28(a0),d0
   10ad8:	|      sne d0
   10ada:	|      neg.b d0
   10adc:	|      move.b d0,d0
   10ade:	|      andi.w #255,d0
}
   10ae2:	\----> movea.l (sp)+,a6
   10ae4:	       lea 16(sp),sp
   10ae8:	       rts

00010aea <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   10aea:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   10aec:	             move.l 17c1a <allScreenRegions>,(sp)

	while (thisRegion) {
   10af2:	   /-------- bra.s 10b0e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   10af4:	/--|-------> movea.l (sp),a0
   10af6:	|  |         movea.l 28(a0),a0
   10afa:	|  |         move.l 4(a0),d0
   10afe:	|  |         cmp.l 8(sp),d0
   10b02:	|  |     /-- bne.s 10b08 <getRegionForObject+0x1e>
			return thisRegion;
   10b04:	|  |     |   move.l (sp),d0
   10b06:	|  |  /--|-- bra.s 10b14 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   10b08:	|  |  |  \-> movea.l (sp),a0
   10b0a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   10b0e:	|  \--|----> tst.l (sp)
   10b10:	\-----|----- bne.s 10af4 <getRegionForObject+0xa>
	}

	return NULL;
   10b12:	      |      moveq #0,d0
}
   10b14:	      \----> addq.l #4,sp
   10b16:	             rts

00010b18 <killAllRegions>:

void killAllRegions () {
   10b18:	       subq.l #8,sp
   10b1a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   10b1c:	   /-- bra.s 10b5e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   10b1e:	/--|-> move.l 17c1a <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   10b26:	|  |   movea.l 17c1a <allScreenRegions>,a0
   10b2c:	|  |   move.l 32(a0),d0
   10b30:	|  |   move.l d0,17c1a <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   10b36:	|  |   movea.l 8(sp),a0
   10b3a:	|  |   move.l 28(a0),d0
   10b3e:	|  |   move.l d0,-(sp)
   10b40:	|  |   jsr 913e <removeObjectType>
   10b46:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   10b48:	|  |   move.l 8(sp),4(sp)
   10b4e:	|  |   move.l 17b28 <SysBase>,d0
   10b54:	|  |   movea.l d0,a6
   10b56:	|  |   movea.l 4(sp),a1
   10b5a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   10b5e:	|  \-> move.l 17c1a <allScreenRegions>,d0
   10b64:	\----- bne.s 10b1e <killAllRegions+0x6>
	}
	overRegion = NULL;
   10b66:	       clr.l 17c1e <overRegion>
}
   10b6c:	       nop
   10b6e:	       movea.l (sp)+,a6
   10b70:	       addq.l #8,sp
   10b72:	       rts

00010b74 <loadRegions>:

void loadRegions (BPTR fp) {
   10b74:	       lea -24(sp),sp
   10b78:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   10b7a:	       move.l 32(sp),-(sp)
   10b7e:	       jsr 6bc <get2bytes>
   10b84:	       addq.l #4,sp
   10b86:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   10b8a:	       move.l #97306,20(sp)

	while (numRegions --) {
   10b92:	   /-- bra.w 10c70 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   10b96:	/--|-> moveq #36,d0
   10b98:	|  |   move.l d0,16(sp)
   10b9c:	|  |   clr.l 12(sp)
   10ba0:	|  |   move.l 17b28 <SysBase>,d0
   10ba6:	|  |   movea.l d0,a6
   10ba8:	|  |   move.l 16(sp),d0
   10bac:	|  |   move.l 12(sp),d1
   10bb0:	|  |   jsr -684(a6)
   10bb4:	|  |   move.l d0,8(sp)
   10bb8:	|  |   move.l 8(sp),d0
   10bbc:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   10bc0:	|  |   movea.l 20(sp),a0
   10bc4:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   10bc8:	|  |   moveq #32,d1
   10bca:	|  |   add.l 4(sp),d1
   10bce:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   10bd2:	|  |   move.l 32(sp),-(sp)
   10bd6:	|  |   jsr 6bc <get2bytes>
   10bdc:	|  |   addq.l #4,sp
   10bde:	|  |   movea.l 4(sp),a0
   10be2:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   10be4:	|  |   move.l 32(sp),-(sp)
   10be8:	|  |   jsr 6bc <get2bytes>
   10bee:	|  |   addq.l #4,sp
   10bf0:	|  |   movea.l 4(sp),a0
   10bf4:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   10bf8:	|  |   move.l 32(sp),-(sp)
   10bfc:	|  |   jsr 6bc <get2bytes>
   10c02:	|  |   addq.l #4,sp
   10c04:	|  |   movea.l 4(sp),a0
   10c08:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   10c0c:	|  |   move.l 32(sp),-(sp)
   10c10:	|  |   jsr 6bc <get2bytes>
   10c16:	|  |   addq.l #4,sp
   10c18:	|  |   movea.l 4(sp),a0
   10c1c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   10c20:	|  |   move.l 32(sp),-(sp)
   10c24:	|  |   jsr 6bc <get2bytes>
   10c2a:	|  |   addq.l #4,sp
   10c2c:	|  |   movea.l 4(sp),a0
   10c30:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   10c34:	|  |   move.l 32(sp),-(sp)
   10c38:	|  |   jsr 6bc <get2bytes>
   10c3e:	|  |   addq.l #4,sp
   10c40:	|  |   movea.l 4(sp),a0
   10c44:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   10c48:	|  |   move.l 32(sp),-(sp)
   10c4c:	|  |   jsr 6bc <get2bytes>
   10c52:	|  |   addq.l #4,sp
   10c54:	|  |   movea.l 4(sp),a0
   10c58:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   10c5c:	|  |   move.l 32(sp),-(sp)
   10c60:	|  |   jsr 8e34 <loadObjectRef>
   10c66:	|  |   addq.l #4,sp
   10c68:	|  |   movea.l 4(sp),a0
   10c6c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   10c70:	|  \-> move.l 24(sp),d0
   10c74:	|      move.l d0,d1
   10c76:	|      subq.l #1,d1
   10c78:	|      move.l d1,24(sp)
   10c7c:	|      tst.l d0
   10c7e:	\----- bne.w 10b96 <loadRegions+0x22>
	}
	* pointy = NULL;
   10c82:	       movea.l 20(sp),a0
   10c86:	       clr.l (a0)
}
   10c88:	       nop
   10c8a:	       movea.l (sp)+,a6
   10c8c:	       lea 24(sp),sp
   10c90:	       rts

00010c92 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   10c92:	             lea -12(sp),sp
   10c96:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   10c98:	             move.l #97306,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   10ca0:	   /-------- bra.s 10d1a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   10ca2:	/--|-------> movea.l 12(sp),a0
   10ca6:	|  |         movea.l (a0),a0
   10ca8:	|  |         movea.l 28(a0),a0
   10cac:	|  |         move.l 4(a0),d0
   10cb0:	|  |         cmp.l 20(sp),d0
   10cb4:	|  |  /----- bne.s 10d0c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   10cb6:	|  |  |      movea.l 12(sp),a0
   10cba:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   10cbe:	|  |  |      movea.l 8(sp),a0
   10cc2:	|  |  |      move.l 32(a0),d0
   10cc6:	|  |  |      movea.l 12(sp),a0
   10cca:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   10ccc:	|  |  |      movea.l 8(sp),a0
   10cd0:	|  |  |      move.l 28(a0),d0
   10cd4:	|  |  |      move.l d0,-(sp)
   10cd6:	|  |  |      jsr 913e <removeObjectType>
   10cdc:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   10cde:	|  |  |      move.l 17c1e <overRegion>,d0
   10ce4:	|  |  |      cmp.l 8(sp),d0
   10ce8:	|  |  |  /-- bne.s 10cf0 <removeScreenRegion+0x5e>
   10cea:	|  |  |  |   clr.l 17c1e <overRegion>
            FreeVec(killMe);
   10cf0:	|  |  |  \-> move.l 8(sp),4(sp)
   10cf6:	|  |  |      move.l 17b28 <SysBase>,d0
   10cfc:	|  |  |      movea.l d0,a6
   10cfe:	|  |  |      movea.l 4(sp),a1
   10d02:	|  |  |      jsr -690(a6)
            killMe = NULL;
   10d06:	|  |  |      clr.l 8(sp)
   10d0a:	|  +--|----- bra.s 10d1a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   10d0c:	|  |  \----> movea.l 12(sp),a0
   10d10:	|  |         move.l (a0),d0
   10d12:	|  |         moveq #32,d1
   10d14:	|  |         add.l d0,d1
   10d16:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   10d1a:	|  \-------> movea.l 12(sp),a0
   10d1e:	|            move.l (a0),d0
   10d20:	\----------- bne.s 10ca2 <removeScreenRegion+0x10>
        }
    }
}
   10d22:	             nop
   10d24:	             nop
   10d26:	             movea.l (sp)+,a6
   10d28:	             lea 12(sp),sp
   10d2c:	             rts

00010d2e <saveRegions>:

void saveRegions (BPTR fp) {
   10d2e:	       subq.l #8,sp
	int numRegions = 0;
   10d30:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   10d34:	       move.l 17c1a <allScreenRegions>,(sp)
	while (thisRegion) {
   10d3a:	   /-- bra.s 10d46 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   10d3c:	/--|-> movea.l (sp),a0
   10d3e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   10d42:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   10d46:	|  \-> tst.l (sp)
   10d48:	\----- bne.s 10d3c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   10d4a:	       move.l 12(sp),-(sp)
   10d4e:	       move.l 8(sp),-(sp)
   10d52:	       jsr 8d0 <put2bytes>
   10d58:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   10d5a:	       move.l 17c1a <allScreenRegions>,(sp)
	while (thisRegion) {
   10d60:	/----- bra.w 10e08 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   10d64:	|  /-> movea.l (sp),a0
   10d66:	|  |   move.l (a0),d0
   10d68:	|  |   move.l 12(sp),-(sp)
   10d6c:	|  |   move.l d0,-(sp)
   10d6e:	|  |   jsr 8d0 <put2bytes>
   10d74:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   10d76:	|  |   movea.l (sp),a0
   10d78:	|  |   move.l 4(a0),d0
   10d7c:	|  |   move.l 12(sp),-(sp)
   10d80:	|  |   move.l d0,-(sp)
   10d82:	|  |   jsr 8d0 <put2bytes>
   10d88:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   10d8a:	|  |   movea.l (sp),a0
   10d8c:	|  |   move.l 8(a0),d0
   10d90:	|  |   move.l 12(sp),-(sp)
   10d94:	|  |   move.l d0,-(sp)
   10d96:	|  |   jsr 8d0 <put2bytes>
   10d9c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   10d9e:	|  |   movea.l (sp),a0
   10da0:	|  |   move.l 12(a0),d0
   10da4:	|  |   move.l 12(sp),-(sp)
   10da8:	|  |   move.l d0,-(sp)
   10daa:	|  |   jsr 8d0 <put2bytes>
   10db0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   10db2:	|  |   movea.l (sp),a0
   10db4:	|  |   move.l 16(a0),d0
   10db8:	|  |   move.l 12(sp),-(sp)
   10dbc:	|  |   move.l d0,-(sp)
   10dbe:	|  |   jsr 8d0 <put2bytes>
   10dc4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   10dc6:	|  |   movea.l (sp),a0
   10dc8:	|  |   move.l 20(a0),d0
   10dcc:	|  |   move.l 12(sp),-(sp)
   10dd0:	|  |   move.l d0,-(sp)
   10dd2:	|  |   jsr 8d0 <put2bytes>
   10dd8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   10dda:	|  |   movea.l (sp),a0
   10ddc:	|  |   move.l 24(a0),d0
   10de0:	|  |   move.l 12(sp),-(sp)
   10de4:	|  |   move.l d0,-(sp)
   10de6:	|  |   jsr 8d0 <put2bytes>
   10dec:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   10dee:	|  |   movea.l (sp),a0
   10df0:	|  |   move.l 28(a0),d0
   10df4:	|  |   move.l 12(sp),-(sp)
   10df8:	|  |   move.l d0,-(sp)
   10dfa:	|  |   jsr 91de <saveObjectRef>
   10e00:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   10e02:	|  |   movea.l (sp),a0
   10e04:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   10e08:	\--|-> tst.l (sp)
   10e0a:	   \-- bne.w 10d64 <saveRegions+0x36>
	}
}
   10e0e:	       nop
   10e10:	       nop
   10e12:	       addq.l #8,sp
   10e14:	       rts

00010e16 <showBoxes>:

void showBoxes () {
   10e16:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   10e18:	       move.l 17c1a <allScreenRegions>,(sp)

	while (huntRegion) {
   10e1e:	/----- bra.w 10eba <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   10e22:	|  /-> movea.l (sp),a0
   10e24:	|  |   move.l 12(a0),d0
   10e28:	|  |   movea.l d0,a1
   10e2a:	|  |   movea.l (sp),a0
   10e2c:	|  |   move.l 4(a0),d0
   10e30:	|  |   move.l d0,d1
   10e32:	|  |   movea.l (sp),a0
   10e34:	|  |   move.l (a0),d0
   10e36:	|  |   move.l a1,-(sp)
   10e38:	|  |   move.l d1,-(sp)
   10e3a:	|  |   move.l d0,-(sp)
   10e3c:	|  |   jsr 8b32 <drawVerticalLine>
   10e42:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   10e46:	|  |   movea.l (sp),a0
   10e48:	|  |   move.l 12(a0),d0
   10e4c:	|  |   movea.l d0,a1
   10e4e:	|  |   movea.l (sp),a0
   10e50:	|  |   move.l 4(a0),d0
   10e54:	|  |   move.l d0,d1
   10e56:	|  |   movea.l (sp),a0
   10e58:	|  |   move.l 8(a0),d0
   10e5c:	|  |   move.l a1,-(sp)
   10e5e:	|  |   move.l d1,-(sp)
   10e60:	|  |   move.l d0,-(sp)
   10e62:	|  |   jsr 8b32 <drawVerticalLine>
   10e68:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   10e6c:	|  |   movea.l (sp),a0
   10e6e:	|  |   move.l 8(a0),d0
   10e72:	|  |   movea.l d0,a1
   10e74:	|  |   movea.l (sp),a0
   10e76:	|  |   move.l 4(a0),d0
   10e7a:	|  |   move.l d0,d1
   10e7c:	|  |   movea.l (sp),a0
   10e7e:	|  |   move.l (a0),d0
   10e80:	|  |   move.l a1,-(sp)
   10e82:	|  |   move.l d1,-(sp)
   10e84:	|  |   move.l d0,-(sp)
   10e86:	|  |   jsr 8b0c <drawHorizontalLine>
   10e8c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   10e90:	|  |   movea.l (sp),a0
   10e92:	|  |   move.l 8(a0),d0
   10e96:	|  |   movea.l d0,a1
   10e98:	|  |   movea.l (sp),a0
   10e9a:	|  |   move.l 12(a0),d0
   10e9e:	|  |   move.l d0,d1
   10ea0:	|  |   movea.l (sp),a0
   10ea2:	|  |   move.l (a0),d0
   10ea4:	|  |   move.l a1,-(sp)
   10ea6:	|  |   move.l d1,-(sp)
   10ea8:	|  |   move.l d0,-(sp)
   10eaa:	|  |   jsr 8b0c <drawHorizontalLine>
   10eb0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   10eb4:	|  |   movea.l (sp),a0
   10eb6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   10eba:	\--|-> tst.l (sp)
   10ebc:	   \-- bne.w 10e22 <showBoxes+0xc>
	}
   10ec0:	       nop
   10ec2:	       nop
   10ec4:	       addq.l #4,sp
   10ec6:	       rts

00010ec8 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   10ec8:	       lea -32(sp),sp
   10ecc:	       move.l d3,-(sp)
   10ece:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   10ed0:	       move.l 60(sp),d0
   10ed4:	       sub.l 52(sp),d0
   10ed8:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   10edc:	       move.l 64(sp),d0
   10ee0:	       sub.l 56(sp),d0
   10ee4:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   10ee8:	       move.l 68(sp),d0
   10eec:	       sub.l 52(sp),d0
   10ef0:	       move.l 36(sp),-(sp)
   10ef4:	       move.l d0,-(sp)
   10ef6:	       jsr 129ca <__mulsi3>
   10efc:	       addq.l #8,sp
   10efe:	       move.l d0,d2
   10f00:	       move.l 72(sp),d0
   10f04:	       sub.l 56(sp),d0
   10f08:	       move.l 32(sp),-(sp)
   10f0c:	       move.l d0,-(sp)
   10f0e:	       jsr 129ca <__mulsi3>
   10f14:	       addq.l #8,sp
   10f16:	       add.l d2,d0
   10f18:	       move.l d0,-(sp)
   10f1a:	       jsr 12430 <__floatsidf>
   10f20:	       addq.l #4,sp
   10f22:	       move.l d0,16(sp)
   10f26:	       move.l d1,20(sp)
   10f2a:	       move.l 16(sp),24(sp)
   10f30:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   10f36:	       move.l 36(sp),-(sp)
   10f3a:	       move.l 40(sp),-(sp)
   10f3e:	       jsr 129ca <__mulsi3>
   10f44:	       addq.l #8,sp
   10f46:	       move.l d0,d2
   10f48:	       move.l 32(sp),-(sp)
   10f4c:	       move.l 36(sp),-(sp)
   10f50:	       jsr 129ca <__mulsi3>
   10f56:	       addq.l #8,sp
   10f58:	       add.l d2,d0
   10f5a:	       move.l d0,-(sp)
   10f5c:	       jsr 12430 <__floatsidf>
   10f62:	       addq.l #4,sp
   10f64:	       move.l d1,-(sp)
   10f66:	       move.l d0,-(sp)
   10f68:	       move.l 36(sp),-(sp)
   10f6c:	       move.l 36(sp),-(sp)
   10f70:	       jsr 122ba <__divdf3>
   10f76:	       lea 16(sp),sp
   10f7a:	       move.l d0,8(sp)
   10f7e:	       move.l d1,12(sp)
   10f82:	       move.l 8(sp),24(sp)
   10f88:	       move.l 12(sp),28(sp)

	if (m < 0) {
   10f8e:	       clr.l -(sp)
   10f90:	       clr.l -(sp)
   10f92:	       move.l 36(sp),-(sp)
   10f96:	       move.l 36(sp),-(sp)
   10f9a:	       jsr 12648 <__ltdf2>
   10fa0:	       lea 16(sp),sp
   10fa4:	       tst.l d0
   10fa6:	   /-- bge.s 10fbc <closestPointOnLine+0xf4>
		*closestX = x1;
   10fa8:	   |   movea.l 44(sp),a0
   10fac:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   10fb0:	   |   movea.l 48(sp),a0
   10fb4:	   |   move.l 56(sp),(a0)
   10fb8:	/--|-- bra.w 1109e <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   10fbc:	|  \-> clr.l -(sp)
   10fbe:	|      move.l #1072693248,-(sp)
   10fc4:	|      move.l 36(sp),-(sp)
   10fc8:	|      move.l 36(sp),-(sp)
   10fcc:	|      jsr 1258e <__gtdf2>
   10fd2:	|      lea 16(sp),sp
   10fd6:	|      tst.l d0
   10fd8:	|  /-- ble.s 10fee <closestPointOnLine+0x126>
		*closestX = x2;
   10fda:	|  |   movea.l 44(sp),a0
   10fde:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   10fe2:	|  |   movea.l 48(sp),a0
   10fe6:	|  |   move.l 64(sp),(a0)
   10fea:	+--|-- bra.w 1109e <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   10fee:	|  \-> move.l 52(sp),-(sp)
   10ff2:	|      jsr 12430 <__floatsidf>
   10ff8:	|      addq.l #4,sp
   10ffa:	|      move.l d0,d2
   10ffc:	|      move.l d1,d3
   10ffe:	|      move.l 36(sp),-(sp)
   11002:	|      jsr 12430 <__floatsidf>
   11008:	|      addq.l #4,sp
   1100a:	|      move.l 28(sp),-(sp)
   1100e:	|      move.l 28(sp),-(sp)
   11012:	|      move.l d1,-(sp)
   11014:	|      move.l d0,-(sp)
   11016:	|      jsr 124c0 <__muldf3>
   1101c:	|      lea 16(sp),sp
   11020:	|      move.l d1,-(sp)
   11022:	|      move.l d0,-(sp)
   11024:	|      move.l d3,-(sp)
   11026:	|      move.l d2,-(sp)
   11028:	|      jsr 12258 <__adddf3>
   1102e:	|      lea 16(sp),sp
   11032:	|      move.l d1,-(sp)
   11034:	|      move.l d0,-(sp)
   11036:	|      jsr 123c8 <__fixdfsi>
   1103c:	|      addq.l #8,sp
   1103e:	|      movea.l 44(sp),a0
   11042:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11044:	|      move.l 56(sp),-(sp)
   11048:	|      jsr 12430 <__floatsidf>
   1104e:	|      addq.l #4,sp
   11050:	|      move.l d0,d2
   11052:	|      move.l d1,d3
   11054:	|      move.l 32(sp),-(sp)
   11058:	|      jsr 12430 <__floatsidf>
   1105e:	|      addq.l #4,sp
   11060:	|      move.l 28(sp),-(sp)
   11064:	|      move.l 28(sp),-(sp)
   11068:	|      move.l d1,-(sp)
   1106a:	|      move.l d0,-(sp)
   1106c:	|      jsr 124c0 <__muldf3>
   11072:	|      lea 16(sp),sp
   11076:	|      move.l d1,-(sp)
   11078:	|      move.l d0,-(sp)
   1107a:	|      move.l d3,-(sp)
   1107c:	|      move.l d2,-(sp)
   1107e:	|      jsr 12258 <__adddf3>
   11084:	|      lea 16(sp),sp
   11088:	|      move.l d1,-(sp)
   1108a:	|      move.l d0,-(sp)
   1108c:	|      jsr 123c8 <__fixdfsi>
   11092:	|      addq.l #8,sp
   11094:	|      movea.l 48(sp),a0
   11098:	|      move.l d0,(a0)
		return TRUE;
   1109a:	|      moveq #1,d0
   1109c:	|  /-- bra.s 110a0 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   1109e:	\--|-> clr.w d0
}
   110a0:	   \-> move.l (sp)+,d2
   110a2:	       move.l (sp)+,d3
   110a4:	       lea 32(sp),sp
   110a8:	       rts

000110aa <drawFloor>:

void drawFloor() {
   110aa:	                lea -12(sp),sp
   110ae:	                move.l d3,-(sp)
   110b0:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   110b2:	                clr.l 16(sp)
   110b6:	   /----------- bra.w 112ca <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   110ba:	/--|----------> movea.l 17c22 <currentFloor>,a0
   110c0:	|  |            move.l 12(a0),d1
   110c4:	|  |            move.l 16(sp),d0
   110c8:	|  |            lsl.l #3,d0
   110ca:	|  |            movea.l d1,a0
   110cc:	|  |            adda.l d0,a0
   110ce:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   110d2:	|  |            moveq #1,d0
   110d4:	|  |            cmp.l 8(sp),d0
   110d8:	|  |  /-------- bge.w 112c6 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   110dc:	|  |  |         moveq #1,d0
   110de:	|  |  |         move.l d0,12(sp)
   110e2:	|  |  |     /-- bra.w 111dc <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   110e6:	|  |  |  /--|-> movea.l 17c22 <currentFloor>,a0
   110ec:	|  |  |  |  |   move.l 4(a0),d1
   110f0:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   110f6:	|  |  |  |  |   movea.l 12(a0),a0
   110fa:	|  |  |  |  |   move.l 16(sp),d0
   110fe:	|  |  |  |  |   lsl.l #3,d0
   11100:	|  |  |  |  |   adda.l d0,a0
   11102:	|  |  |  |  |   movea.l 4(a0),a0
   11106:	|  |  |  |  |   move.l 12(sp),d0
   1110a:	|  |  |  |  |   add.l d0,d0
   1110c:	|  |  |  |  |   add.l d0,d0
   1110e:	|  |  |  |  |   adda.l d0,a0
   11110:	|  |  |  |  |   move.l (a0),d0
   11112:	|  |  |  |  |   lsl.l #3,d0
   11114:	|  |  |  |  |   movea.l d1,a0
   11116:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11118:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1111c:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11122:	|  |  |  |  |   move.l 4(a0),d1
   11126:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   1112c:	|  |  |  |  |   movea.l 12(a0),a0
   11130:	|  |  |  |  |   move.l 16(sp),d0
   11134:	|  |  |  |  |   lsl.l #3,d0
   11136:	|  |  |  |  |   adda.l d0,a0
   11138:	|  |  |  |  |   movea.l 4(a0),a0
   1113c:	|  |  |  |  |   move.l 12(sp),d0
   11140:	|  |  |  |  |   add.l d0,d0
   11142:	|  |  |  |  |   add.l d0,d0
   11144:	|  |  |  |  |   adda.l d0,a0
   11146:	|  |  |  |  |   move.l (a0),d0
   11148:	|  |  |  |  |   lsl.l #3,d0
   1114a:	|  |  |  |  |   movea.l d1,a0
   1114c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1114e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11150:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11156:	|  |  |  |  |   move.l 4(a0),d1
   1115a:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11160:	|  |  |  |  |   movea.l 12(a0),a0
   11164:	|  |  |  |  |   move.l 16(sp),d0
   11168:	|  |  |  |  |   lsl.l #3,d0
   1116a:	|  |  |  |  |   adda.l d0,a0
   1116c:	|  |  |  |  |   movea.l 4(a0),a0
   11170:	|  |  |  |  |   move.l 12(sp),d0
   11174:	|  |  |  |  |   addi.l #1073741823,d0
   1117a:	|  |  |  |  |   add.l d0,d0
   1117c:	|  |  |  |  |   add.l d0,d0
   1117e:	|  |  |  |  |   adda.l d0,a0
   11180:	|  |  |  |  |   move.l (a0),d0
   11182:	|  |  |  |  |   lsl.l #3,d0
   11184:	|  |  |  |  |   movea.l d1,a0
   11186:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11188:	|  |  |  |  |   move.l 4(a0),d1
   1118c:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11192:	|  |  |  |  |   move.l 4(a0),d3
   11196:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   1119c:	|  |  |  |  |   movea.l 12(a0),a0
   111a0:	|  |  |  |  |   move.l 16(sp),d0
   111a4:	|  |  |  |  |   lsl.l #3,d0
   111a6:	|  |  |  |  |   adda.l d0,a0
   111a8:	|  |  |  |  |   movea.l 4(a0),a0
   111ac:	|  |  |  |  |   move.l 12(sp),d0
   111b0:	|  |  |  |  |   addi.l #1073741823,d0
   111b6:	|  |  |  |  |   add.l d0,d0
   111b8:	|  |  |  |  |   add.l d0,d0
   111ba:	|  |  |  |  |   adda.l d0,a0
   111bc:	|  |  |  |  |   move.l (a0),d0
   111be:	|  |  |  |  |   lsl.l #3,d0
   111c0:	|  |  |  |  |   movea.l d3,a0
   111c2:	|  |  |  |  |   adda.l d0,a0
   111c4:	|  |  |  |  |   move.l (a0),d0
   111c6:	|  |  |  |  |   move.l d2,-(sp)
   111c8:	|  |  |  |  |   move.l a1,-(sp)
   111ca:	|  |  |  |  |   move.l d1,-(sp)
   111cc:	|  |  |  |  |   move.l d0,-(sp)
   111ce:	|  |  |  |  |   jsr df4 <drawLine>
   111d4:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   111d8:	|  |  |  |  |   addq.l #1,12(sp)
   111dc:	|  |  |  |  \-> move.l 12(sp),d0
   111e0:	|  |  |  |      cmp.l 8(sp),d0
   111e4:	|  |  |  \----- blt.w 110e6 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   111e8:	|  |  |         movea.l 17c22 <currentFloor>,a0
   111ee:	|  |  |         move.l 4(a0),d1
   111f2:	|  |  |         movea.l 17c22 <currentFloor>,a0
   111f8:	|  |  |         movea.l 12(a0),a0
   111fc:	|  |  |         move.l 16(sp),d0
   11200:	|  |  |         lsl.l #3,d0
   11202:	|  |  |         adda.l d0,a0
   11204:	|  |  |         movea.l 4(a0),a0
   11208:	|  |  |         move.l 8(sp),d0
   1120c:	|  |  |         addi.l #1073741823,d0
   11212:	|  |  |         add.l d0,d0
   11214:	|  |  |         add.l d0,d0
   11216:	|  |  |         adda.l d0,a0
   11218:	|  |  |         move.l (a0),d0
   1121a:	|  |  |         lsl.l #3,d0
   1121c:	|  |  |         movea.l d1,a0
   1121e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11220:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   11224:	|  |  |         movea.l 17c22 <currentFloor>,a0
   1122a:	|  |  |         move.l 4(a0),d1
   1122e:	|  |  |         movea.l 17c22 <currentFloor>,a0
   11234:	|  |  |         movea.l 12(a0),a0
   11238:	|  |  |         move.l 16(sp),d0
   1123c:	|  |  |         lsl.l #3,d0
   1123e:	|  |  |         adda.l d0,a0
   11240:	|  |  |         movea.l 4(a0),a0
   11244:	|  |  |         move.l 8(sp),d0
   11248:	|  |  |         addi.l #1073741823,d0
   1124e:	|  |  |         add.l d0,d0
   11250:	|  |  |         add.l d0,d0
   11252:	|  |  |         adda.l d0,a0
   11254:	|  |  |         move.l (a0),d0
   11256:	|  |  |         lsl.l #3,d0
   11258:	|  |  |         movea.l d1,a0
   1125a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1125c:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1125e:	|  |  |         movea.l 17c22 <currentFloor>,a0
   11264:	|  |  |         move.l 4(a0),d1
   11268:	|  |  |         movea.l 17c22 <currentFloor>,a0
   1126e:	|  |  |         movea.l 12(a0),a0
   11272:	|  |  |         move.l 16(sp),d0
   11276:	|  |  |         lsl.l #3,d0
   11278:	|  |  |         adda.l d0,a0
   1127a:	|  |  |         movea.l 4(a0),a0
   1127e:	|  |  |         move.l (a0),d0
   11280:	|  |  |         lsl.l #3,d0
   11282:	|  |  |         movea.l d1,a0
   11284:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11286:	|  |  |         move.l 4(a0),d1
   1128a:	|  |  |         movea.l 17c22 <currentFloor>,a0
   11290:	|  |  |         move.l 4(a0),d3
   11294:	|  |  |         movea.l 17c22 <currentFloor>,a0
   1129a:	|  |  |         movea.l 12(a0),a0
   1129e:	|  |  |         move.l 16(sp),d0
   112a2:	|  |  |         lsl.l #3,d0
   112a4:	|  |  |         adda.l d0,a0
   112a6:	|  |  |         movea.l 4(a0),a0
   112aa:	|  |  |         move.l (a0),d0
   112ac:	|  |  |         lsl.l #3,d0
   112ae:	|  |  |         movea.l d3,a0
   112b0:	|  |  |         adda.l d0,a0
   112b2:	|  |  |         move.l (a0),d0
   112b4:	|  |  |         move.l d2,-(sp)
   112b6:	|  |  |         move.l a1,-(sp)
   112b8:	|  |  |         move.l d1,-(sp)
   112ba:	|  |  |         move.l d0,-(sp)
   112bc:	|  |  |         jsr df4 <drawLine>
   112c2:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   112c6:	|  |  \-------> addq.l #1,16(sp)
   112ca:	|  \----------> movea.l 17c22 <currentFloor>,a0
   112d0:	|               move.l 8(a0),d0
   112d4:	|               cmp.l 16(sp),d0
   112d8:	\-------------- bgt.w 110ba <drawFloor+0x10>
        }
    }
}
   112dc:	                nop
   112de:	                nop
   112e0:	                move.l (sp)+,d2
   112e2:	                move.l (sp)+,d3
   112e4:	                lea 12(sp),sp
   112e8:	                rts

000112ea <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   112ea:	                      lea -12(sp),sp
    int sharedVertices = 0;
   112ee:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   112f2:	                      clr.l 4(sp)
   112f6:	   /----------------- bra.w 11388 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   112fa:	/--|----------------> clr.l (sp)
   112fc:	|  |     /----------- bra.s 11378 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   112fe:	|  |  /--|----------> movea.l 16(sp),a0
   11302:	|  |  |  |            move.l 4(a0),d1
   11306:	|  |  |  |            move.l 4(sp),d0
   1130a:	|  |  |  |            add.l d0,d0
   1130c:	|  |  |  |            add.l d0,d0
   1130e:	|  |  |  |            movea.l d1,a0
   11310:	|  |  |  |            adda.l d0,a0
   11312:	|  |  |  |            move.l (a0),d1
   11314:	|  |  |  |            movea.l 20(sp),a0
   11318:	|  |  |  |            movea.l 4(a0),a0
   1131c:	|  |  |  |            move.l (sp),d0
   1131e:	|  |  |  |            add.l d0,d0
   11320:	|  |  |  |            add.l d0,d0
   11322:	|  |  |  |            adda.l d0,a0
   11324:	|  |  |  |            move.l (a0),d0
   11326:	|  |  |  |            cmp.l d1,d0
   11328:	|  |  |  |  /-------- bne.s 11376 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1132a:	|  |  |  |  |         move.l 8(sp),d0
   1132e:	|  |  |  |  |         move.l d0,d1
   11330:	|  |  |  |  |         addq.l #1,d1
   11332:	|  |  |  |  |         move.l d1,8(sp)
   11336:	|  |  |  |  |         tst.l d0
   11338:	|  |  |  |  |     /-- beq.s 1135a <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1133a:	|  |  |  |  |     |   movea.l 16(sp),a0
   1133e:	|  |  |  |  |     |   move.l 4(a0),d1
   11342:	|  |  |  |  |     |   move.l 4(sp),d0
   11346:	|  |  |  |  |     |   add.l d0,d0
   11348:	|  |  |  |  |     |   add.l d0,d0
   1134a:	|  |  |  |  |     |   movea.l d1,a0
   1134c:	|  |  |  |  |     |   adda.l d0,a0
   1134e:	|  |  |  |  |     |   move.l (a0),d0
   11350:	|  |  |  |  |     |   movea.l 28(sp),a0
   11354:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   11356:	|  |  |  |  |     |   moveq #1,d0
   11358:	|  |  |  |  |  /--|-- bra.s 11398 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1135a:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1135e:	|  |  |  |  |  |      move.l 4(a0),d1
   11362:	|  |  |  |  |  |      move.l 4(sp),d0
   11366:	|  |  |  |  |  |      add.l d0,d0
   11368:	|  |  |  |  |  |      add.l d0,d0
   1136a:	|  |  |  |  |  |      movea.l d1,a0
   1136c:	|  |  |  |  |  |      adda.l d0,a0
   1136e:	|  |  |  |  |  |      move.l (a0),d0
   11370:	|  |  |  |  |  |      movea.l 24(sp),a0
   11374:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   11376:	|  |  |  |  \--|----> addq.l #1,(sp)
   11378:	|  |  |  \-----|----> movea.l 20(sp),a0
   1137c:	|  |  |        |      move.l (a0),d0
   1137e:	|  |  |        |      cmp.l (sp),d0
   11380:	|  |  \--------|----- bgt.w 112fe <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11384:	|  |           |      addq.l #1,4(sp)
   11388:	|  \-----------|----> movea.l 16(sp),a0
   1138c:	|              |      move.l (a0),d0
   1138e:	|              |      cmp.l 4(sp),d0
   11392:	\--------------|----- bgt.w 112fa <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   11396:	               |      clr.w d0
}
   11398:	               \----> lea 12(sp),sp
   1139c:	                      rts

0001139e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1139e:	movea.l 17c22 <currentFloor>,a0
   113a4:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   113a8:	movea.l 17c22 <currentFloor>,a0
   113ae:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   113b2:	movea.l 17c22 <currentFloor>,a0
   113b8:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   113bc:	movea.l 17c22 <currentFloor>,a0
   113c2:	clr.l 16(a0)
}
   113c6:	nop
   113c8:	rts

000113ca <inFloor>:

int inFloor (int x, int y) {
   113ca:	          subq.l #8,sp
	int i, r = -1;
   113cc:	          moveq #-1,d0
   113ce:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   113d0:	          clr.l 4(sp)
   113d4:	   /----- bra.s 11408 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   113d6:	/--|----> movea.l 17c22 <currentFloor>,a0
   113dc:	|  |      move.l 12(a0),d1
   113e0:	|  |      move.l 4(sp),d0
   113e4:	|  |      lsl.l #3,d0
   113e6:	|  |      add.l d1,d0
   113e8:	|  |      move.l 16(sp),-(sp)
   113ec:	|  |      move.l 16(sp),-(sp)
   113f0:	|  |      move.l d0,-(sp)
   113f2:	|  |      jsr 115d4 <pointInFloorPolygon>
   113f8:	|  |      lea 12(sp),sp
   113fc:	|  |      tst.w d0
   113fe:	|  |  /-- beq.s 11404 <inFloor+0x3a>
			r = i;
   11400:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   11404:	|  |  \-> addq.l #1,4(sp)
   11408:	|  \----> movea.l 17c22 <currentFloor>,a0
   1140e:	|         move.l 8(a0),d0
   11412:	|         cmp.l 4(sp),d0
   11416:	\-------- bgt.s 113d6 <inFloor+0xc>

	return r;
   11418:	          move.l (sp),d0
}
   1141a:	          addq.l #8,sp
   1141c:	          rts

0001141e <initFloor>:

BOOL initFloor () {
   1141e:	       lea -12(sp),sp
   11422:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   11424:	       moveq #20,d0
   11426:	       move.l d0,12(sp)
   1142a:	       clr.l 8(sp)
   1142e:	       move.l 17b28 <SysBase>,d0
   11434:	       movea.l d0,a6
   11436:	       move.l 12(sp),d0
   1143a:	       move.l 8(sp),d1
   1143e:	       jsr -684(a6)
   11442:	       move.l d0,4(sp)
   11446:	       move.l 4(sp),d0
   1144a:	       move.l d0,17c22 <currentFloor>

    if(currentFloor == 0) {
   11450:	       move.l 17c22 <currentFloor>,d0
   11456:	/----- bne.s 1146a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   11458:	|      pea 15dcf <zbuffer.c.d110ca03+0x889>
   1145e:	|      jsr 12018 <KPrintF>
   11464:	|      addq.l #4,sp
        return FALSE;
   11466:	|      clr.w d0
   11468:	|  /-- bra.s 11472 <initFloor+0x54>
    }

	noFloor ();
   1146a:	\--|-> jsr 1139e <noFloor>
	return TRUE;
   11470:	   |   moveq #1,d0
}
   11472:	   \-> movea.l (sp)+,a6
   11474:	       lea 12(sp),sp
   11478:	       rts

0001147a <killFloor>:

void killFloor () {
   1147a:	       lea -24(sp),sp
   1147e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11480:	       clr.l 24(sp)
   11484:	   /-- bra.s 114de <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   11486:	/--|-> movea.l 17c22 <currentFloor>,a0
   1148c:	|  |   move.l 12(a0),d1
   11490:	|  |   move.l 24(sp),d0
   11494:	|  |   lsl.l #3,d0
   11496:	|  |   movea.l d1,a0
   11498:	|  |   adda.l d0,a0
   1149a:	|  |   move.l 4(a0),8(sp)
   114a0:	|  |   move.l 17b28 <SysBase>,d0
   114a6:	|  |   movea.l d0,a6
   114a8:	|  |   movea.l 8(sp),a1
   114ac:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   114b0:	|  |   movea.l 17c22 <currentFloor>,a0
   114b6:	|  |   move.l 16(a0),d1
   114ba:	|  |   move.l 24(sp),d0
   114be:	|  |   add.l d0,d0
   114c0:	|  |   add.l d0,d0
   114c2:	|  |   movea.l d1,a0
   114c4:	|  |   adda.l d0,a0
   114c6:	|  |   move.l (a0),4(sp)
   114ca:	|  |   move.l 17b28 <SysBase>,d0
   114d0:	|  |   movea.l d0,a6
   114d2:	|  |   movea.l 4(sp),a1
   114d6:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   114da:	|  |   addq.l #1,24(sp)
   114de:	|  \-> movea.l 17c22 <currentFloor>,a0
   114e4:	|      move.l 8(a0),d0
   114e8:	|      cmp.l 24(sp),d0
   114ec:	\----- bgt.s 11486 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   114ee:	       movea.l 17c22 <currentFloor>,a0
   114f4:	       move.l 12(a0),20(sp)
   114fa:	       move.l 17b28 <SysBase>,d0
   11500:	       movea.l d0,a6
   11502:	       movea.l 20(sp),a1
   11506:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1150a:	       movea.l 17c22 <currentFloor>,a0
   11510:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   11514:	       movea.l 17c22 <currentFloor>,a0
   1151a:	       move.l 4(a0),16(sp)
   11520:	       move.l 17b28 <SysBase>,d0
   11526:	       movea.l d0,a6
   11528:	       movea.l 16(sp),a1
   1152c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   11530:	       movea.l 17c22 <currentFloor>,a0
   11536:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1153a:	       movea.l 17c22 <currentFloor>,a0
   11540:	       move.l 16(a0),12(sp)
   11546:	       move.l 17b28 <SysBase>,d0
   1154c:	       movea.l d0,a6
   1154e:	       movea.l 12(sp),a1
   11552:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   11556:	       movea.l 17c22 <currentFloor>,a0
   1155c:	       clr.l 16(a0)
}
   11560:	       nop
   11562:	       movea.l (sp)+,a6
   11564:	       lea 24(sp),sp
   11568:	       rts

0001156a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1156a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1156e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   11572:	                   clr.l 4(sp)
   11576:	   /-------------- bra.s 115c2 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   11578:	/--|-------------> clr.l (sp)
   1157a:	|  |     /-------- bra.s 115b6 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1157c:	|  |  /--|-------> move.l 20(sp),d1
   11580:	|  |  |  |         move.l 4(sp),d0
   11584:	|  |  |  |         add.l d0,d0
   11586:	|  |  |  |         add.l d0,d0
   11588:	|  |  |  |         movea.l d1,a0
   1158a:	|  |  |  |         adda.l d0,a0
   1158c:	|  |  |  |         move.l (a0),d1
   1158e:	|  |  |  |         movea.l 28(sp),a0
   11592:	|  |  |  |         move.l (sp),d0
   11594:	|  |  |  |         add.l d0,d0
   11596:	|  |  |  |         add.l d0,d0
   11598:	|  |  |  |         adda.l d0,a0
   1159a:	|  |  |  |         move.l (a0),d0
   1159c:	|  |  |  |         cmp.l d1,d0
   1159e:	|  |  |  |     /-- bne.s 115b4 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   115a0:	|  |  |  |     |   move.l 8(sp),d0
   115a4:	|  |  |  |     |   move.l d0,d1
   115a6:	|  |  |  |     |   addq.l #1,d1
   115a8:	|  |  |  |     |   move.l d1,8(sp)
   115ac:	|  |  |  |     |   tst.l d0
   115ae:	|  |  |  |     +-- beq.s 115b4 <polysShareSide+0x4a>
   115b0:	|  |  |  |     |   moveq #1,d0
   115b2:	|  |  |  |  /--|-- bra.s 115ce <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   115b4:	|  |  |  |  |  \-> addq.l #1,(sp)
   115b6:	|  |  |  \--|----> move.l 24(sp),d0
   115ba:	|  |  |     |      cmp.l (sp),d0
   115bc:	|  |  \-----|----- bgt.s 1157c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   115be:	|  |        |      addq.l #1,4(sp)
   115c2:	|  \--------|----> move.l 16(sp),d0
   115c6:	|           |      cmp.l 4(sp),d0
   115ca:	\-----------|----- bgt.s 11578 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   115cc:	            |      clr.w d0
}
   115ce:	            \----> lea 12(sp),sp
   115d2:	                   rts

000115d4 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   115d4:	             lea -28(sp),sp
   115d8:	             move.l d3,-(sp)
   115da:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   115dc:	             clr.l 32(sp)
   115e0:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   115e4:	             movea.l 40(sp),a0
   115e8:	             move.l (a0),d0
   115ea:	             move.l d0,d1
   115ec:	             subq.l #1,d1
   115ee:	             move.l d1,28(sp)
   115f2:	   /-------- bra.w 117ec <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   115f6:	/--|-------> movea.l 17c22 <currentFloor>,a0
   115fc:	|  |         move.l 4(a0),d1
   11600:	|  |         movea.l 40(sp),a0
   11604:	|  |         movea.l 4(a0),a0
   11608:	|  |         move.l 32(sp),d0
   1160c:	|  |         add.l d0,d0
   1160e:	|  |         add.l d0,d0
   11610:	|  |         adda.l d0,a0
   11612:	|  |         move.l (a0),d0
   11614:	|  |         lsl.l #3,d0
   11616:	|  |         movea.l d1,a0
   11618:	|  |         adda.l d0,a0
   1161a:	|  |         move.l (a0),d0
   1161c:	|  |         move.l d0,-(sp)
   1161e:	|  |         jsr 12470 <__floatsisf>
   11624:	|  |         addq.l #4,sp
   11626:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1162a:	|  |         movea.l 17c22 <currentFloor>,a0
   11630:	|  |         move.l 4(a0),d1
   11634:	|  |         movea.l 40(sp),a0
   11638:	|  |         movea.l 4(a0),a0
   1163c:	|  |         move.l 32(sp),d0
   11640:	|  |         add.l d0,d0
   11642:	|  |         add.l d0,d0
   11644:	|  |         adda.l d0,a0
   11646:	|  |         move.l (a0),d0
   11648:	|  |         lsl.l #3,d0
   1164a:	|  |         movea.l d1,a0
   1164c:	|  |         adda.l d0,a0
   1164e:	|  |         move.l 4(a0),d0
   11652:	|  |         move.l d0,-(sp)
   11654:	|  |         jsr 12470 <__floatsisf>
   1165a:	|  |         addq.l #4,sp
   1165c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   11660:	|  |         movea.l 17c22 <currentFloor>,a0
   11666:	|  |         move.l 4(a0),d1
   1166a:	|  |         movea.l 40(sp),a0
   1166e:	|  |         movea.l 4(a0),a0
   11672:	|  |         move.l 28(sp),d0
   11676:	|  |         add.l d0,d0
   11678:	|  |         add.l d0,d0
   1167a:	|  |         adda.l d0,a0
   1167c:	|  |         move.l (a0),d0
   1167e:	|  |         lsl.l #3,d0
   11680:	|  |         movea.l d1,a0
   11682:	|  |         adda.l d0,a0
   11684:	|  |         move.l (a0),d0
   11686:	|  |         move.l d0,-(sp)
   11688:	|  |         jsr 12470 <__floatsisf>
   1168e:	|  |         addq.l #4,sp
   11690:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   11694:	|  |         movea.l 17c22 <currentFloor>,a0
   1169a:	|  |         move.l 4(a0),d1
   1169e:	|  |         movea.l 40(sp),a0
   116a2:	|  |         movea.l 4(a0),a0
   116a6:	|  |         move.l 28(sp),d0
   116aa:	|  |         add.l d0,d0
   116ac:	|  |         add.l d0,d0
   116ae:	|  |         adda.l d0,a0
   116b0:	|  |         move.l (a0),d0
   116b2:	|  |         lsl.l #3,d0
   116b4:	|  |         movea.l d1,a0
   116b6:	|  |         adda.l d0,a0
   116b8:	|  |         move.l 4(a0),d0
   116bc:	|  |         move.l d0,-(sp)
   116be:	|  |         jsr 12470 <__floatsisf>
   116c4:	|  |         addq.l #4,sp
   116c6:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   116ca:	|  |         move.l 48(sp),-(sp)
   116ce:	|  |         jsr 12470 <__floatsisf>
   116d4:	|  |         addq.l #4,sp
   116d6:	|  |         move.l d0,-(sp)
   116d8:	|  |         move.l 20(sp),-(sp)
   116dc:	|  |         jsr 12612 <__lesf2>
   116e2:	|  |         addq.l #8,sp
   116e4:	|  |         tst.l d0
   116e6:	|  |     /-- bgt.s 11706 <pointInFloorPolygon+0x132>
   116e8:	|  |     |   move.l 48(sp),-(sp)
   116ec:	|  |     |   jsr 12470 <__floatsisf>
   116f2:	|  |     |   addq.l #4,sp
   116f4:	|  |     |   move.l d0,-(sp)
   116f6:	|  |     |   move.l 12(sp),-(sp)
   116fa:	|  |     |   jsr 125dc <__gtsf2>
   11700:	|  |     |   addq.l #8,sp
   11702:	|  |     |   tst.l d0
   11704:	|  |  /--|-- bgt.s 11746 <pointInFloorPolygon+0x172>
   11706:	|  |  |  \-> move.l 48(sp),-(sp)
   1170a:	|  |  |      jsr 12470 <__floatsisf>
   11710:	|  |  |      addq.l #4,sp
   11712:	|  |  |      move.l d0,-(sp)
   11714:	|  |  |      move.l 12(sp),-(sp)
   11718:	|  |  |      jsr 12612 <__lesf2>
   1171e:	|  |  |      addq.l #8,sp
   11720:	|  |  |      tst.l d0
   11722:	|  |  |  /-- bgt.w 117dc <pointInFloorPolygon+0x208>
   11726:	|  |  |  |   move.l 48(sp),-(sp)
   1172a:	|  |  |  |   jsr 12470 <__floatsisf>
   11730:	|  |  |  |   addq.l #4,sp
   11732:	|  |  |  |   move.l d0,-(sp)
   11734:	|  |  |  |   move.l 20(sp),-(sp)
   11738:	|  |  |  |   jsr 125dc <__gtsf2>
   1173e:	|  |  |  |   addq.l #8,sp
   11740:	|  |  |  |   tst.l d0
   11742:	|  |  |  +-- ble.w 117dc <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   11746:	|  |  \--|-> move.l 44(sp),-(sp)
   1174a:	|  |     |   jsr 12470 <__floatsisf>
   11750:	|  |     |   addq.l #4,sp
   11752:	|  |     |   move.l d0,d3
   11754:	|  |     |   move.l 20(sp),-(sp)
   11758:	|  |     |   move.l 16(sp),-(sp)
   1175c:	|  |     |   jsr 12764 <__subsf3>
   11762:	|  |     |   addq.l #8,sp
   11764:	|  |     |   move.l d0,d2
   11766:	|  |     |   move.l 48(sp),-(sp)
   1176a:	|  |     |   jsr 12470 <__floatsisf>
   11770:	|  |     |   addq.l #4,sp
   11772:	|  |     |   move.l 16(sp),-(sp)
   11776:	|  |     |   move.l d0,-(sp)
   11778:	|  |     |   jsr 12764 <__subsf3>
   1177e:	|  |     |   addq.l #8,sp
   11780:	|  |     |   move.l d0,-(sp)
   11782:	|  |     |   move.l d2,-(sp)
   11784:	|  |     |   jsr 12522 <__mulsf3>
   1178a:	|  |     |   addq.l #8,sp
   1178c:	|  |     |   move.l d0,d2
   1178e:	|  |     |   move.l 16(sp),-(sp)
   11792:	|  |     |   move.l 12(sp),-(sp)
   11796:	|  |     |   jsr 12764 <__subsf3>
   1179c:	|  |     |   addq.l #8,sp
   1179e:	|  |     |   move.l d0,-(sp)
   117a0:	|  |     |   move.l d2,-(sp)
   117a2:	|  |     |   jsr 1231c <__divsf3>
   117a8:	|  |     |   addq.l #8,sp
   117aa:	|  |     |   move.l 20(sp),-(sp)
   117ae:	|  |     |   move.l d0,-(sp)
   117b0:	|  |     |   jsr 12222 <__addsf3>
   117b6:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   117b8:	|  |     |   move.l d0,-(sp)
   117ba:	|  |     |   move.l d3,-(sp)
   117bc:	|  |     |   jsr 12696 <__ltsf2>
   117c2:	|  |     |   addq.l #8,sp
   117c4:	|  |     |   tst.l d0
   117c6:	|  |     +-- bge.s 117dc <pointInFloorPolygon+0x208>

			c = !c;
   117c8:	|  |     |   tst.l 24(sp)
   117cc:	|  |     |   seq d0
   117ce:	|  |     |   neg.b d0
   117d0:	|  |     |   move.b d0,d0
   117d2:	|  |     |   andi.l #255,d0
   117d8:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   117dc:	|  |     \-> move.l 32(sp),d0
   117e0:	|  |         move.l d0,d1
   117e2:	|  |         addq.l #1,d1
   117e4:	|  |         move.l d1,32(sp)
   117e8:	|  |         move.l d0,28(sp)
   117ec:	|  \-------> movea.l 40(sp),a0
   117f0:	|            move.l (a0),d0
   117f2:	|            cmp.l 32(sp),d0
   117f6:	\----------- bgt.w 115f6 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   117fa:	             tst.l 24(sp)
   117fe:	             sne d0
   11800:	             neg.b d0
   11802:	             move.b d0,d0
   11804:	             andi.w #255,d0
}
   11808:	             move.l (sp)+,d2
   1180a:	             move.l (sp)+,d3
   1180c:	             lea 28(sp),sp
   11810:	             rts

00011812 <setFloor>:

BOOL setFloor (int fileNum) {
   11812:	                               lea -132(sp),sp
   11816:	                               move.l a6,-(sp)
   11818:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1181a:	                               jsr 1147a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   11820:	                               move.l 144(sp),-(sp)
   11824:	                               jsr 3ef4 <openFileFromNum>
   1182a:	                               addq.l #4,sp
   1182c:	                               tst.l d0
   1182e:	                           /-- bne.s 11836 <setFloor+0x24>
   11830:	                           |   clr.w d0
   11832:	/--------------------------|-- bra.w 11f82 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   11836:	|                          \-> movea.l 17c22 <currentFloor>,a0
   1183c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   11840:	|                              move.l 17b10 <bigDataFile>,118(sp)
   11848:	|                              move.l 17b30 <DOSBase>,d0
   1184e:	|                              movea.l d0,a6
   11850:	|                              move.l 118(sp),d1
   11854:	|                              jsr -306(a6)
   11858:	|                              move.l d0,114(sp)
   1185c:	|                              move.l 114(sp),d0
   11860:	|                              movea.l 17c22 <currentFloor>,a0
   11866:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1186a:	|                              movea.l 17c22 <currentFloor>,a0
   11870:	|                              move.l 8(a0),d0
   11874:	|                              lsl.l #3,d0
   11876:	|                              move.l d0,110(sp)
   1187a:	|                              clr.l 106(sp)
   1187e:	|                              move.l 17b28 <SysBase>,d0
   11884:	|                              movea.l d0,a6
   11886:	|                              move.l 110(sp),d0
   1188a:	|                              move.l 106(sp),d1
   1188e:	|                              jsr -684(a6)
   11892:	|                              move.l d0,102(sp)
   11896:	|                              move.l 102(sp),d0
   1189a:	|                              movea.l 17c22 <currentFloor>,a0
   118a0:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   118a4:	|                              movea.l 17c22 <currentFloor>,a0
   118aa:	|                              move.l 12(a0),d0
   118ae:	|                          /-- bne.s 118c4 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   118b0:	|                          |   pea 15df3 <zbuffer.c.d110ca03+0x8ad>
   118b6:	|                          |   jsr 12018 <KPrintF>
   118bc:	|                          |   addq.l #4,sp
		return FALSE;
   118be:	|                          |   clr.w d0
   118c0:	+--------------------------|-- bra.w 11f82 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   118c4:	|                          \-> clr.l 136(sp)
   118c8:	|                    /-------- bra.w 119e0 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   118cc:	|                 /--|-------> move.l 17b10 <bigDataFile>,26(sp)
   118d4:	|                 |  |         move.l 17b30 <DOSBase>,d0
   118da:	|                 |  |         movea.l d0,a6
   118dc:	|                 |  |         move.l 26(sp),d1
   118e0:	|                 |  |         jsr -306(a6)
   118e4:	|                 |  |         move.l d0,22(sp)
   118e8:	|                 |  |         move.l 22(sp),d1
   118ec:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   118f2:	|                 |  |         movea.l 12(a0),a0
   118f6:	|                 |  |         move.l 136(sp),d0
   118fa:	|                 |  |         lsl.l #3,d0
   118fc:	|                 |  |         adda.l d0,a0
   118fe:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   11900:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11906:	|                 |  |         move.l 12(a0),d1
   1190a:	|                 |  |         move.l 136(sp),d0
   1190e:	|                 |  |         lsl.l #3,d0
   11910:	|                 |  |         movea.l d1,a0
   11912:	|                 |  |         adda.l d0,a0
   11914:	|                 |  |         move.l (a0),d0
   11916:	|                 |  |         add.l d0,d0
   11918:	|                 |  |         add.l d0,d0
   1191a:	|                 |  |         move.l d0,18(sp)
   1191e:	|                 |  |         clr.l 14(sp)
   11922:	|                 |  |         move.l 17b28 <SysBase>,d0
   11928:	|                 |  |         movea.l d0,a6
   1192a:	|                 |  |         move.l 18(sp),d0
   1192e:	|                 |  |         move.l 14(sp),d1
   11932:	|                 |  |         jsr -684(a6)
   11936:	|                 |  |         move.l d0,10(sp)
   1193a:	|                 |  |         move.l 10(sp),d1
   1193e:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11944:	|                 |  |         movea.l 12(a0),a0
   11948:	|                 |  |         move.l 136(sp),d0
   1194c:	|                 |  |         lsl.l #3,d0
   1194e:	|                 |  |         adda.l d0,a0
   11950:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   11954:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   1195a:	|                 |  |         move.l 12(a0),d1
   1195e:	|                 |  |         move.l 136(sp),d0
   11962:	|                 |  |         lsl.l #3,d0
   11964:	|                 |  |         movea.l d1,a0
   11966:	|                 |  |         adda.l d0,a0
   11968:	|                 |  |         move.l 4(a0),d0
   1196c:	|                 |  |     /-- bne.s 11982 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1196e:	|                 |  |     |   pea 15df3 <zbuffer.c.d110ca03+0x8ad>
   11974:	|                 |  |     |   jsr 12018 <KPrintF>
   1197a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1197c:	|                 |  |     |   clr.w d0
   1197e:	+-----------------|--|-----|-- bra.w 11f82 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11982:	|                 |  |     \-> clr.l 132(sp)
   11986:	|                 |  |     /-- bra.s 119c0 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   11988:	|                 |  |  /--|-> move.l 17b10 <bigDataFile>,d1
   1198e:	|                 |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11994:	|                 |  |  |  |   movea.l 12(a0),a0
   11998:	|                 |  |  |  |   move.l 136(sp),d0
   1199c:	|                 |  |  |  |   lsl.l #3,d0
   1199e:	|                 |  |  |  |   adda.l d0,a0
   119a0:	|                 |  |  |  |   movea.l 4(a0),a0
   119a4:	|                 |  |  |  |   move.l 132(sp),d0
   119a8:	|                 |  |  |  |   add.l d0,d0
   119aa:	|                 |  |  |  |   add.l d0,d0
   119ac:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   119b0:	|                 |  |  |  |   move.l d1,-(sp)
   119b2:	|                 |  |  |  |   jsr 6bc <get2bytes>
   119b8:	|                 |  |  |  |   addq.l #4,sp
   119ba:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   119bc:	|                 |  |  |  |   addq.l #1,132(sp)
   119c0:	|                 |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   119c6:	|                 |  |  |      move.l 12(a0),d1
   119ca:	|                 |  |  |      move.l 136(sp),d0
   119ce:	|                 |  |  |      lsl.l #3,d0
   119d0:	|                 |  |  |      movea.l d1,a0
   119d2:	|                 |  |  |      adda.l d0,a0
   119d4:	|                 |  |  |      move.l (a0),d0
   119d6:	|                 |  |  |      cmp.l 132(sp),d0
   119da:	|                 |  |  \----- bgt.s 11988 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   119dc:	|                 |  |         addq.l #1,136(sp)
   119e0:	|                 |  \-------> movea.l 17c22 <currentFloor>,a0
   119e6:	|                 |            move.l 8(a0),d0
   119ea:	|                 |            cmp.l 136(sp),d0
   119ee:	|                 \----------- bgt.w 118cc <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   119f2:	|                              move.l 17b10 <bigDataFile>,d0
   119f8:	|                              move.l d0,-(sp)
   119fa:	|                              jsr 6bc <get2bytes>
   11a00:	|                              addq.l #4,sp
   11a02:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   11a06:	|                              move.l 136(sp),d0
   11a0a:	|                              lsl.l #3,d0
   11a0c:	|                              move.l d0,98(sp)
   11a10:	|                              clr.l 94(sp)
   11a14:	|                              move.l 17b28 <SysBase>,d0
   11a1a:	|                              movea.l d0,a6
   11a1c:	|                              move.l 98(sp),d0
   11a20:	|                              move.l 94(sp),d1
   11a24:	|                              jsr -684(a6)
   11a28:	|                              move.l d0,90(sp)
   11a2c:	|                              move.l 90(sp),d0
   11a30:	|                              movea.l 17c22 <currentFloor>,a0
   11a36:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   11a3a:	|                              movea.l 17c22 <currentFloor>,a0
   11a40:	|                              move.l 4(a0),d0
   11a44:	|                          /-- bne.s 11a5a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   11a46:	|                          |   pea 15df3 <zbuffer.c.d110ca03+0x8ad>
   11a4c:	|                          |   jsr 12018 <KPrintF>
   11a52:	|                          |   addq.l #4,sp
		return FALSE;
   11a54:	|                          |   clr.w d0
   11a56:	+--------------------------|-- bra.w 11f82 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   11a5a:	|                          \-> clr.l 132(sp)
   11a5e:	|                          /-- bra.s 11ab2 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   11a60:	|                       /--|-> move.l 17b10 <bigDataFile>,d1
   11a66:	|                       |  |   movea.l 17c22 <currentFloor>,a0
   11a6c:	|                       |  |   movea.l 4(a0),a0
   11a70:	|                       |  |   move.l 132(sp),d0
   11a74:	|                       |  |   lsl.l #3,d0
   11a76:	|                       |  |   lea (0,a0,d0.l),a2
   11a7a:	|                       |  |   move.l d1,-(sp)
   11a7c:	|                       |  |   jsr 6bc <get2bytes>
   11a82:	|                       |  |   addq.l #4,sp
   11a84:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   11a86:	|                       |  |   move.l 17b10 <bigDataFile>,d1
   11a8c:	|                       |  |   movea.l 17c22 <currentFloor>,a0
   11a92:	|                       |  |   movea.l 4(a0),a0
   11a96:	|                       |  |   move.l 132(sp),d0
   11a9a:	|                       |  |   lsl.l #3,d0
   11a9c:	|                       |  |   lea (0,a0,d0.l),a2
   11aa0:	|                       |  |   move.l d1,-(sp)
   11aa2:	|                       |  |   jsr 6bc <get2bytes>
   11aa8:	|                       |  |   addq.l #4,sp
   11aaa:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   11aae:	|                       |  |   addq.l #1,132(sp)
   11ab2:	|                       |  \-> move.l 132(sp),d0
   11ab6:	|                       |      cmp.l 136(sp),d0
   11aba:	|                       \----- blt.s 11a60 <setFloor+0x24e>
	}

	finishAccess ();
   11abc:	|                              jsr 3dec <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11ac2:	|                              movea.l 17c22 <currentFloor>,a0
   11ac8:	|                              move.l 8(a0),d0
   11acc:	|                              add.l d0,d0
   11ace:	|                              add.l d0,d0
   11ad0:	|                              move.l d0,86(sp)
   11ad4:	|                              clr.l 82(sp)
   11ad8:	|                              move.l 17b28 <SysBase>,d0
   11ade:	|                              movea.l d0,a6
   11ae0:	|                              move.l 86(sp),d0
   11ae4:	|                              move.l 82(sp),d1
   11ae8:	|                              jsr -684(a6)
   11aec:	|                              move.l d0,78(sp)
   11af0:	|                              move.l 78(sp),d0
   11af4:	|                              movea.l 17c22 <currentFloor>,a0
   11afa:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11afe:	|                              movea.l 17c22 <currentFloor>,a0
   11b04:	|                              move.l 8(a0),d0
   11b08:	|                              add.l d0,d0
   11b0a:	|                              add.l d0,d0
   11b0c:	|                              move.l d0,74(sp)
   11b10:	|                              clr.l 70(sp)
   11b14:	|                              move.l 17b28 <SysBase>,d0
   11b1a:	|                              movea.l d0,a6
   11b1c:	|                              move.l 74(sp),d0
   11b20:	|                              move.l 70(sp),d1
   11b24:	|                              jsr -684(a6)
   11b28:	|                              move.l d0,66(sp)
   11b2c:	|                              move.l 66(sp),d0
   11b30:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   11b34:	|                              movea.l 17c22 <currentFloor>,a0
   11b3a:	|                              move.l 16(a0),d0
   11b3e:	|                          /-- bne.s 11b54 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   11b40:	|                          |   pea 15df3 <zbuffer.c.d110ca03+0x8ad>
   11b46:	|                          |   jsr 12018 <KPrintF>
   11b4c:	|                          |   addq.l #4,sp
		return FALSE;
   11b4e:	|                          |   clr.w d0
   11b50:	+--------------------------|-- bra.w 11f82 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11b54:	|                          \-> clr.l 136(sp)
   11b58:	|                    /-------- bra.w 11c7c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11b5c:	|                 /--|-------> movea.l 17c22 <currentFloor>,a0
   11b62:	|                 |  |         move.l 8(a0),d0
   11b66:	|                 |  |         add.l d0,d0
   11b68:	|                 |  |         add.l d0,d0
   11b6a:	|                 |  |         move.l d0,50(sp)
   11b6e:	|                 |  |         clr.l 46(sp)
   11b72:	|                 |  |         move.l 17b28 <SysBase>,d0
   11b78:	|                 |  |         movea.l d0,a6
   11b7a:	|                 |  |         move.l 50(sp),d0
   11b7e:	|                 |  |         move.l 46(sp),d1
   11b82:	|                 |  |         jsr -684(a6)
   11b86:	|                 |  |         move.l d0,42(sp)
   11b8a:	|                 |  |         move.l 42(sp),d0
   11b8e:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11b94:	|                 |  |         movea.l 16(a0),a0
   11b98:	|                 |  |         move.l 136(sp),d1
   11b9c:	|                 |  |         add.l d1,d1
   11b9e:	|                 |  |         add.l d1,d1
   11ba0:	|                 |  |         adda.l d1,a0
   11ba2:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11ba4:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11baa:	|                 |  |         move.l 8(a0),d0
   11bae:	|                 |  |         add.l d0,d0
   11bb0:	|                 |  |         add.l d0,d0
   11bb2:	|                 |  |         move.l d0,38(sp)
   11bb6:	|                 |  |         clr.l 34(sp)
   11bba:	|                 |  |         move.l 17b28 <SysBase>,d0
   11bc0:	|                 |  |         movea.l d0,a6
   11bc2:	|                 |  |         move.l 38(sp),d0
   11bc6:	|                 |  |         move.l 34(sp),d1
   11bca:	|                 |  |         jsr -684(a6)
   11bce:	|                 |  |         move.l d0,30(sp)
   11bd2:	|                 |  |         move.l 30(sp),d1
   11bd6:	|                 |  |         move.l 136(sp),d0
   11bda:	|                 |  |         add.l d0,d0
   11bdc:	|                 |  |         add.l d0,d0
   11bde:	|                 |  |         movea.l 62(sp),a0
   11be2:	|                 |  |         adda.l d0,a0
   11be4:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   11be6:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11bec:	|                 |  |         move.l 16(a0),d1
   11bf0:	|                 |  |         move.l 136(sp),d0
   11bf4:	|                 |  |         add.l d0,d0
   11bf6:	|                 |  |         add.l d0,d0
   11bf8:	|                 |  |         movea.l d1,a0
   11bfa:	|                 |  |         adda.l d0,a0
   11bfc:	|                 |  |         move.l (a0),d0
   11bfe:	|                 |  |     /-- bne.s 11c14 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   11c00:	|                 |  |     |   pea 15df3 <zbuffer.c.d110ca03+0x8ad>
   11c06:	|                 |  |     |   jsr 12018 <KPrintF>
   11c0c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   11c0e:	|                 |  |     |   clr.w d0
   11c10:	+-----------------|--|-----|-- bra.w 11f82 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11c14:	|                 |  |     \-> clr.l 132(sp)
   11c18:	|                 |  |     /-- bra.s 11c68 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   11c1a:	|                 |  |  /--|-> movea.l 17c22 <currentFloor>,a0
   11c20:	|                 |  |  |  |   move.l 16(a0),d1
   11c24:	|                 |  |  |  |   move.l 136(sp),d0
   11c28:	|                 |  |  |  |   add.l d0,d0
   11c2a:	|                 |  |  |  |   add.l d0,d0
   11c2c:	|                 |  |  |  |   movea.l d1,a0
   11c2e:	|                 |  |  |  |   adda.l d0,a0
   11c30:	|                 |  |  |  |   move.l (a0),d1
   11c32:	|                 |  |  |  |   move.l 132(sp),d0
   11c36:	|                 |  |  |  |   add.l d0,d0
   11c38:	|                 |  |  |  |   add.l d0,d0
   11c3a:	|                 |  |  |  |   movea.l d1,a0
   11c3c:	|                 |  |  |  |   adda.l d0,a0
   11c3e:	|                 |  |  |  |   moveq #-1,d1
   11c40:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   11c42:	|                 |  |  |  |   move.l 136(sp),d0
   11c46:	|                 |  |  |  |   add.l d0,d0
   11c48:	|                 |  |  |  |   add.l d0,d0
   11c4a:	|                 |  |  |  |   movea.l 62(sp),a0
   11c4e:	|                 |  |  |  |   adda.l d0,a0
   11c50:	|                 |  |  |  |   move.l (a0),d1
   11c52:	|                 |  |  |  |   move.l 132(sp),d0
   11c56:	|                 |  |  |  |   add.l d0,d0
   11c58:	|                 |  |  |  |   add.l d0,d0
   11c5a:	|                 |  |  |  |   movea.l d1,a0
   11c5c:	|                 |  |  |  |   adda.l d0,a0
   11c5e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11c64:	|                 |  |  |  |   addq.l #1,132(sp)
   11c68:	|                 |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   11c6e:	|                 |  |  |      move.l 8(a0),d0
   11c72:	|                 |  |  |      cmp.l 132(sp),d0
   11c76:	|                 |  |  \----- bgt.s 11c1a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c78:	|                 |  |         addq.l #1,136(sp)
   11c7c:	|                 |  \-------> movea.l 17c22 <currentFloor>,a0
   11c82:	|                 |            move.l 8(a0),d0
   11c86:	|                 |            cmp.l 136(sp),d0
   11c8a:	|                 \----------- bgt.w 11b5c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c8e:	|                              clr.l 136(sp)
   11c92:	|              /-------------- bra.w 11d98 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11c96:	|           /--|-------------> clr.l 132(sp)
   11c9a:	|           |  |     /-------- bra.w 11d82 <setFloor+0x570>
			if (i != j) {
   11c9e:	|           |  |  /--|-------> move.l 136(sp),d0
   11ca2:	|           |  |  |  |         cmp.l 132(sp),d0
   11ca6:	|           |  |  |  |     /-- beq.w 11d38 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   11caa:	|           |  |  |  |     |   movea.l 17c22 <currentFloor>,a0
   11cb0:	|           |  |  |  |     |   move.l 12(a0),d1
   11cb4:	|           |  |  |  |     |   move.l 132(sp),d0
   11cb8:	|           |  |  |  |     |   lsl.l #3,d0
   11cba:	|           |  |  |  |     |   movea.l d1,a1
   11cbc:	|           |  |  |  |     |   adda.l d0,a1
   11cbe:	|           |  |  |  |     |   movea.l 17c22 <currentFloor>,a0
   11cc4:	|           |  |  |  |     |   move.l 12(a0),d1
   11cc8:	|           |  |  |  |     |   move.l 136(sp),d0
   11ccc:	|           |  |  |  |     |   lsl.l #3,d0
   11cce:	|           |  |  |  |     |   movea.l d1,a0
   11cd0:	|           |  |  |  |     |   adda.l d0,a0
   11cd2:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   11cd6:	|           |  |  |  |     |   move.l (a1),-(sp)
   11cd8:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   11cdc:	|           |  |  |  |     |   move.l (a0),-(sp)
   11cde:	|           |  |  |  |     |   jsr 1156a <polysShareSide>
   11ce4:	|           |  |  |  |     |   lea 16(sp),sp
   11ce8:	|           |  |  |  |     |   tst.w d0
   11cea:	|           |  |  |  |  /--|-- beq.w 11d7e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   11cee:	|           |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11cf4:	|           |  |  |  |  |  |   move.l 16(a0),d1
   11cf8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11cfc:	|           |  |  |  |  |  |   add.l d0,d0
   11cfe:	|           |  |  |  |  |  |   add.l d0,d0
   11d00:	|           |  |  |  |  |  |   movea.l d1,a0
   11d02:	|           |  |  |  |  |  |   adda.l d0,a0
   11d04:	|           |  |  |  |  |  |   move.l (a0),d1
   11d06:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11d0a:	|           |  |  |  |  |  |   add.l d0,d0
   11d0c:	|           |  |  |  |  |  |   add.l d0,d0
   11d0e:	|           |  |  |  |  |  |   movea.l d1,a0
   11d10:	|           |  |  |  |  |  |   adda.l d0,a0
   11d12:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   11d16:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11d1a:	|           |  |  |  |  |  |   add.l d0,d0
   11d1c:	|           |  |  |  |  |  |   add.l d0,d0
   11d1e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   11d22:	|           |  |  |  |  |  |   adda.l d0,a0
   11d24:	|           |  |  |  |  |  |   move.l (a0),d1
   11d26:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11d2a:	|           |  |  |  |  |  |   add.l d0,d0
   11d2c:	|           |  |  |  |  |  |   add.l d0,d0
   11d2e:	|           |  |  |  |  |  |   movea.l d1,a0
   11d30:	|           |  |  |  |  |  |   adda.l d0,a0
   11d32:	|           |  |  |  |  |  |   moveq #1,d1
   11d34:	|           |  |  |  |  |  |   move.l d1,(a0)
   11d36:	|           |  |  |  |  +--|-- bra.s 11d7e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   11d38:	|           |  |  |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   11d3e:	|           |  |  |  |  |      move.l 16(a0),d1
   11d42:	|           |  |  |  |  |      move.l 136(sp),d0
   11d46:	|           |  |  |  |  |      add.l d0,d0
   11d48:	|           |  |  |  |  |      add.l d0,d0
   11d4a:	|           |  |  |  |  |      movea.l d1,a0
   11d4c:	|           |  |  |  |  |      adda.l d0,a0
   11d4e:	|           |  |  |  |  |      move.l (a0),d1
   11d50:	|           |  |  |  |  |      move.l 132(sp),d0
   11d54:	|           |  |  |  |  |      add.l d0,d0
   11d56:	|           |  |  |  |  |      add.l d0,d0
   11d58:	|           |  |  |  |  |      movea.l d1,a0
   11d5a:	|           |  |  |  |  |      adda.l d0,a0
   11d5c:	|           |  |  |  |  |      moveq #-2,d0
   11d5e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   11d60:	|           |  |  |  |  |      move.l 136(sp),d0
   11d64:	|           |  |  |  |  |      add.l d0,d0
   11d66:	|           |  |  |  |  |      add.l d0,d0
   11d68:	|           |  |  |  |  |      movea.l 62(sp),a0
   11d6c:	|           |  |  |  |  |      adda.l d0,a0
   11d6e:	|           |  |  |  |  |      move.l (a0),d1
   11d70:	|           |  |  |  |  |      move.l 132(sp),d0
   11d74:	|           |  |  |  |  |      add.l d0,d0
   11d76:	|           |  |  |  |  |      add.l d0,d0
   11d78:	|           |  |  |  |  |      movea.l d1,a0
   11d7a:	|           |  |  |  |  |      adda.l d0,a0
   11d7c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11d7e:	|           |  |  |  |  \----> addq.l #1,132(sp)
   11d82:	|           |  |  |  \-------> movea.l 17c22 <currentFloor>,a0
   11d88:	|           |  |  |            move.l 8(a0),d0
   11d8c:	|           |  |  |            cmp.l 132(sp),d0
   11d90:	|           |  |  \----------- bgt.w 11c9e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11d94:	|           |  |               addq.l #1,136(sp)
   11d98:	|           |  \-------------> movea.l 17c22 <currentFloor>,a0
   11d9e:	|           |                  move.l 8(a0),d0
   11da2:	|           |                  cmp.l 136(sp),d0
   11da6:	|           \----------------- bgt.w 11c96 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   11daa:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   11dae:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   11db2:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11db6:	|  |                           clr.l 136(sp)
   11dba:	|  |     /-------------------- bra.w 11f10 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11dbe:	|  |  /--|-------------------> clr.l 132(sp)
   11dc2:	|  |  |  |     /-------------- bra.w 11efa <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   11dc6:	|  |  |  |  /--|-------------> movea.l 17c22 <currentFloor>,a0
   11dcc:	|  |  |  |  |  |               move.l 16(a0),d1
   11dd0:	|  |  |  |  |  |               move.l 136(sp),d0
   11dd4:	|  |  |  |  |  |               add.l d0,d0
   11dd6:	|  |  |  |  |  |               add.l d0,d0
   11dd8:	|  |  |  |  |  |               movea.l d1,a0
   11dda:	|  |  |  |  |  |               adda.l d0,a0
   11ddc:	|  |  |  |  |  |               move.l (a0),d1
   11dde:	|  |  |  |  |  |               move.l 132(sp),d0
   11de2:	|  |  |  |  |  |               add.l d0,d0
   11de4:	|  |  |  |  |  |               add.l d0,d0
   11de6:	|  |  |  |  |  |               movea.l d1,a0
   11de8:	|  |  |  |  |  |               adda.l d0,a0
   11dea:	|  |  |  |  |  |               move.l (a0),d0
   11dec:	|  |  |  |  |  |               moveq #-1,d1
   11dee:	|  |  |  |  |  |               cmp.l d0,d1
   11df0:	|  |  |  |  |  |  /----------- bne.w 11ef6 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11df4:	|  |  |  |  |  |  |            clr.l 122(sp)
   11df8:	|  |  |  |  |  |  |     /----- bra.w 11ee4 <setFloor+0x6d2>
						if (d != i && d != j) {
   11dfc:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   11e00:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   11e04:	|  |  |  |  |  |  |  |  |  /-- beq.w 11ee0 <setFloor+0x6ce>
   11e08:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   11e0c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   11e10:	|  |  |  |  |  |  |  |  |  +-- beq.w 11ee0 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   11e14:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11e1a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11e1e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11e22:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e26:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e28:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e2a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e2c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e30:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e34:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e36:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e38:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   11e3a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   11e3e:	|  |  |  |  |  |  |  |  |  +-- bne.w 11ee0 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   11e42:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11e48:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11e4c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e50:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e52:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e54:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e56:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e58:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e5a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e62:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e64:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e66:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   11e68:	|  |  |  |  |  |  |  |  |  +-- bmi.s 11ee0 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   11e6a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e72:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11e76:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e78:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e7a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e82:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e84:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e86:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   11e88:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   11e8c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 11ee0 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   11e8e:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11e94:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11e98:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11e9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ea0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ea2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ea4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11ea6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11eaa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11eac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11eae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11eb0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11eb2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   11eb6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11eba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ebc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ebe:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11ec2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ec4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11ec6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11eca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ecc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ece:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ed0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ed2:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   11ed6:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   11ed8:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   11eda:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11ee0:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   11ee4:	|  |  |  |  |  |  |  |  \----> movea.l 17c22 <currentFloor>,a0
   11eea:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   11eee:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   11ef2:	|  |  |  |  |  |  |  \-------- bgt.w 11dfc <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11ef6:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   11efa:	|  |  |  |  |  \-------------> movea.l 17c22 <currentFloor>,a0
   11f00:	|  |  |  |  |                  move.l 8(a0),d0
   11f04:	|  |  |  |  |                  cmp.l 132(sp),d0
   11f08:	|  |  |  |  \----------------- bgt.w 11dc6 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11f0c:	|  |  |  |                     addq.l #1,136(sp)
   11f10:	|  |  |  \-------------------> movea.l 17c22 <currentFloor>,a0
   11f16:	|  |  |                        move.l 8(a0),d0
   11f1a:	|  |  |                        cmp.l 136(sp),d0
   11f1e:	|  |  \----------------------- bgt.w 11dbe <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   11f22:	|  |                           tst.w 130(sp)
   11f26:	|  \-------------------------- bne.w 11dae <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11f2a:	|                              clr.l 136(sp)
   11f2e:	|                          /-- bra.s 11f56 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   11f30:	|                       /--|-> move.l 136(sp),d0
   11f34:	|                       |  |   add.l d0,d0
   11f36:	|                       |  |   add.l d0,d0
   11f38:	|                       |  |   movea.l 62(sp),a0
   11f3c:	|                       |  |   adda.l d0,a0
   11f3e:	|                       |  |   move.l (a0),54(sp)
   11f42:	|                       |  |   move.l 17b28 <SysBase>,d0
   11f48:	|                       |  |   movea.l d0,a6
   11f4a:	|                       |  |   movea.l 54(sp),a1
   11f4e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11f52:	|                       |  |   addq.l #1,136(sp)
   11f56:	|                       |  \-> movea.l 17c22 <currentFloor>,a0
   11f5c:	|                       |      move.l 8(a0),d0
   11f60:	|                       |      cmp.l 136(sp),d0
   11f64:	|                       \----- bgt.s 11f30 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   11f66:	|                              move.l 62(sp),58(sp)
   11f6c:	|                              move.l 17b28 <SysBase>,d0
   11f72:	|                              movea.l d0,a6
   11f74:	|                              movea.l 58(sp),a1
   11f78:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   11f7c:	|                              clr.l 62(sp)

	return TRUE;
   11f80:	|                              moveq #1,d0
}
   11f82:	\----------------------------> movea.l (sp)+,a2
   11f84:	                               movea.l (sp)+,a6
   11f86:	                               lea 132(sp),sp
   11f8a:	                               rts

00011f8c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   11f8c:	jsr 1147a <killFloor>
	noFloor ();
   11f92:	jsr 1139e <noFloor>
   11f98:	nop
   11f9a:	rts

00011f9c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   11f9c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   11f9e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   11fa2:	   /-- bra.s 11fb4 <memset+0x18>
		*ptr++ = val;
   11fa4:	/--|-> move.l (sp),d0
   11fa6:	|  |   move.l d0,d1
   11fa8:	|  |   addq.l #1,d1
   11faa:	|  |   move.l d1,(sp)
   11fac:	|  |   move.l 12(sp),d1
   11fb0:	|  |   movea.l d0,a0
   11fb2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   11fb4:	|  \-> move.l 16(sp),d0
   11fb8:	|      move.l d0,d1
   11fba:	|      subq.l #1,d1
   11fbc:	|      move.l d1,16(sp)
   11fc0:	|      tst.l d0
   11fc2:	\----- bne.s 11fa4 <memset+0x8>
	return dest;
   11fc4:	       move.l 8(sp),d0
}
   11fc8:	       addq.l #4,sp
   11fca:	       rts

00011fcc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   11fcc:	       subq.l #8,sp
   11fce:	       move.l d2,-(sp)
	char *d = (char *)dest;
   11fd0:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   11fd6:	       move.l 20(sp),4(sp)
	while(len--)
   11fdc:	   /-- bra.s 11ffe <memcpy+0x32>
		*d++ = *s++;
   11fde:	/--|-> move.l 4(sp),d1
   11fe2:	|  |   move.l d1,d0
   11fe4:	|  |   addq.l #1,d0
   11fe6:	|  |   move.l d0,4(sp)
   11fea:	|  |   move.l 8(sp),d0
   11fee:	|  |   move.l d0,d2
   11ff0:	|  |   addq.l #1,d2
   11ff2:	|  |   move.l d2,8(sp)
   11ff6:	|  |   movea.l d1,a0
   11ff8:	|  |   move.b (a0),d1
   11ffa:	|  |   movea.l d0,a0
   11ffc:	|  |   move.b d1,(a0)
	while(len--)
   11ffe:	|  \-> move.l 24(sp),d0
   12002:	|      move.l d0,d1
   12004:	|      subq.l #1,d1
   12006:	|      move.l d1,24(sp)
   1200a:	|      tst.l d0
   1200c:	\----- bne.s 11fde <memcpy+0x12>
	return dest;
   1200e:	       move.l 16(sp),d0
}
   12012:	       move.l (sp)+,d2
   12014:	       addq.l #8,sp
   12016:	       rts

00012018 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12018:	       lea -128(sp),sp
   1201c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12020:	       move.w f0ff60 <gcc8_c_support.c.114adc9d+0xed3ccf>,d0
   12026:	       cmpi.w #20153,d0
   1202a:	   /-- beq.s 1204e <KPrintF+0x36>
   1202c:	   |   cmpi.w #-24562,d0
   12030:	   +-- beq.s 1204e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12032:	   |   movea.l 17b28 <SysBase>,a6
   12038:	   |   movea.l 144(sp),a0
   1203c:	   |   lea 148(sp),a1
   12040:	   |   lea 12ad2 <KPutCharX>,a2
   12046:	   |   suba.l a3,a3
   12048:	   |   jsr -522(a6)
}
   1204c:	/--|-- bra.s 12078 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1204e:	|  \-> movea.l 17b28 <SysBase>,a6
   12054:	|      movea.l 144(sp),a0
   12058:	|      lea 148(sp),a1
   1205c:	|      lea 12ae0 <PutChar>,a2
   12062:	|      lea 12(sp),a3
   12066:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1206a:	|      move.l a3,-(sp)
   1206c:	|      pea 56 <_start+0x56>
   12070:	|      jsr f0ff60 <gcc8_c_support.c.114adc9d+0xed3ccf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12076:	|      addq.l #8,sp
}
   12078:	\----> movem.l (sp)+,a2-a3/a6
   1207c:	       lea 128(sp),sp
   12080:	       rts

00012082 <warpmode>:

void warpmode(int on) { // bool
   12082:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12084:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   1208c:	          movea.l 4(sp),a0
   12090:	          move.w (a0),d0
   12092:	          cmpi.w #20153,d0
   12096:	      /-- beq.s 120a6 <warpmode+0x24>
   12098:	      |   movea.l 4(sp),a0
   1209c:	      |   move.w (a0),d0
   1209e:	      |   cmpi.w #-24562,d0
   120a2:	/-----|-- bne.w 121aa <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   120a6:	|     \-> tst.l 12(sp)
   120aa:	|  /----- beq.s 120b4 <warpmode+0x32>
   120ac:	|  |      move.l #89620,d0
   120b2:	|  |  /-- bra.s 120ba <warpmode+0x38>
   120b4:	|  \--|-> move.l #89634,d0
   120ba:	|     \-> pea 1 <_start+0x1>
   120be:	|         move.l sp,d1
   120c0:	|         addq.l #7,d1
   120c2:	|         move.l d1,-(sp)
   120c4:	|         clr.l -(sp)
   120c6:	|         move.l d0,-(sp)
   120c8:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   120cc:	|         pea 52 <_start+0x52>
   120d0:	|         movea.l 28(sp),a0
   120d4:	|         jsr (a0)
   120d6:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   120da:	|         tst.l 12(sp)
   120de:	|  /----- beq.s 120e8 <warpmode+0x66>
   120e0:	|  |      move.l #89649,d0
   120e6:	|  |  /-- bra.s 120ee <warpmode+0x6c>
   120e8:	|  \--|-> move.l #89671,d0
   120ee:	|     \-> pea 1 <_start+0x1>
   120f2:	|         move.l sp,d1
   120f4:	|         addq.l #7,d1
   120f6:	|         move.l d1,-(sp)
   120f8:	|         clr.l -(sp)
   120fa:	|         move.l d0,-(sp)
   120fc:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   12100:	|         pea 52 <_start+0x52>
   12104:	|         movea.l 28(sp),a0
   12108:	|         jsr (a0)
   1210a:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   1210e:	|         tst.l 12(sp)
   12112:	|  /----- beq.s 1211c <warpmode+0x9a>
   12114:	|  |      move.l #89692,d0
   1211a:	|  |  /-- bra.s 12122 <warpmode+0xa0>
   1211c:	|  \--|-> move.l #89721,d0
   12122:	|     \-> pea 1 <_start+0x1>
   12126:	|         move.l sp,d1
   12128:	|         addq.l #7,d1
   1212a:	|         move.l d1,-(sp)
   1212c:	|         clr.l -(sp)
   1212e:	|         move.l d0,-(sp)
   12130:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   12134:	|         pea 52 <_start+0x52>
   12138:	|         movea.l 28(sp),a0
   1213c:	|         jsr (a0)
   1213e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   12142:	|         tst.l 12(sp)
   12146:	|  /----- beq.s 12150 <warpmode+0xce>
   12148:	|  |      move.l #89749,d0
   1214e:	|  |  /-- bra.s 12156 <warpmode+0xd4>
   12150:	|  \--|-> move.l #89775,d0
   12156:	|     \-> pea 1 <_start+0x1>
   1215a:	|         move.l sp,d1
   1215c:	|         addq.l #7,d1
   1215e:	|         move.l d1,-(sp)
   12160:	|         clr.l -(sp)
   12162:	|         move.l d0,-(sp)
   12164:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   12168:	|         pea 52 <_start+0x52>
   1216c:	|         movea.l 28(sp),a0
   12170:	|         jsr (a0)
   12172:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   12176:	|         tst.l 12(sp)
   1217a:	|  /----- beq.s 12184 <warpmode+0x102>
   1217c:	|  |      move.l #89800,d0
   12182:	|  |  /-- bra.s 1218a <warpmode+0x108>
   12184:	|  \--|-> move.l #89810,d0
   1218a:	|     \-> pea 1 <_start+0x1>
   1218e:	|         move.l sp,d1
   12190:	|         addq.l #7,d1
   12192:	|         move.l d1,-(sp)
   12194:	|         clr.l -(sp)
   12196:	|         move.l d0,-(sp)
   12198:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   1219c:	|         pea 52 <_start+0x52>
   121a0:	|         movea.l 28(sp),a0
   121a4:	|         jsr (a0)
   121a6:	|         lea 24(sp),sp
	}
}
   121aa:	\-------> nop
   121ac:	          addq.l #8,sp
   121ae:	          rts

000121b0 <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   121b0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   121b2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   121b8:	       movea.l (sp),a0
   121ba:	       move.w (a0),d0
   121bc:	       cmpi.w #20153,d0
   121c0:	   /-- beq.s 121cc <debug_cmd+0x1c>
   121c2:	   |   movea.l (sp),a0
   121c4:	   |   move.w (a0),d0
   121c6:	   |   cmpi.w #-24562,d0
   121ca:	/--|-- bne.s 121ea <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   121cc:	|  \-> move.l 20(sp),-(sp)
   121d0:	|      move.l 20(sp),-(sp)
   121d4:	|      move.l 20(sp),-(sp)
   121d8:	|      move.l 20(sp),-(sp)
   121dc:	|      pea 58 <_start+0x58>
   121e0:	|      movea.l 20(sp),a0
   121e4:	|      jsr (a0)
   121e6:	|      lea 20(sp),sp
	}
}
   121ea:	\----> nop
   121ec:	       addq.l #4,sp
   121ee:	       rts

000121f0 <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   121f0:	clr.l -(sp)
   121f2:	clr.l -(sp)
   121f4:	pea 1 <_start+0x1>
   121f8:	pea 5 <_start+0x5>
   121fc:	jsr 121b0 <debug_cmd>
   12202:	lea 16(sp),sp
}
   12206:	nop
   12208:	rts

0001220a <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   1220a:	clr.l -(sp)
   1220c:	clr.l -(sp)
   1220e:	clr.l -(sp)
   12210:	pea 5 <_start+0x5>
   12214:	jsr 121b0 <debug_cmd>
   1221a:	lea 16(sp),sp
}
   1221e:	nop
   12220:	rts

00012222 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   12222:	lea -12(sp),sp
   12226:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   12228:	move.l 20(sp),12(sp)
   1222e:	move.l 24(sp),8(sp)
   12234:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1223a:	movea.l d0,a6
   1223c:	move.l 12(sp),d0
   12240:	move.l 8(sp),d1
   12244:	jsr -66(a6)
   12248:	move.l d0,4(sp)
   1224c:	move.l 4(sp),d0
}
   12250:	movea.l (sp)+,a6
   12252:	lea 12(sp),sp
   12256:	rts

00012258 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   12258:	lea -32(sp),sp
   1225c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   12260:	move.l 48(sp),36(sp)
   12266:	move.l 52(sp),40(sp)
   1226c:	move.l 56(sp),28(sp)
   12272:	move.l 60(sp),32(sp)
   12278:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   1227e:	movea.l d0,a6
   12280:	move.l 36(sp),d0
   12284:	move.l 40(sp),d1
   12288:	move.l 28(sp),d2
   1228c:	move.l 32(sp),d3
   12290:	jsr -66(a6)
   12294:	move.l d0,12(sp)
   12298:	move.l d1,16(sp)
   1229c:	move.l 12(sp),20(sp)
   122a2:	move.l 16(sp),24(sp)
   122a8:	move.l 20(sp),d0
   122ac:	move.l 24(sp),d1
}
   122b0:	movem.l (sp)+,d2-d3/a6
   122b4:	lea 32(sp),sp
   122b8:	rts

000122ba <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   122ba:	lea -32(sp),sp
   122be:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   122c2:	move.l 48(sp),36(sp)
   122c8:	move.l 52(sp),40(sp)
   122ce:	move.l 56(sp),28(sp)
   122d4:	move.l 60(sp),32(sp)
   122da:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   122e0:	movea.l d0,a6
   122e2:	move.l 36(sp),d0
   122e6:	move.l 40(sp),d1
   122ea:	move.l 28(sp),d2
   122ee:	move.l 32(sp),d3
   122f2:	jsr -84(a6)
   122f6:	move.l d0,12(sp)
   122fa:	move.l d1,16(sp)
   122fe:	move.l 12(sp),20(sp)
   12304:	move.l 16(sp),24(sp)
   1230a:	move.l 20(sp),d0
   1230e:	move.l 24(sp),d1
}
   12312:	movem.l (sp)+,d2-d3/a6
   12316:	lea 32(sp),sp
   1231a:	rts

0001231c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1231c:	lea -12(sp),sp
   12320:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   12322:	move.l 20(sp),12(sp)
   12328:	move.l 24(sp),8(sp)
   1232e:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12334:	movea.l d0,a6
   12336:	move.l 12(sp),d0
   1233a:	move.l 8(sp),d1
   1233e:	jsr -84(a6)
   12342:	move.l d0,4(sp)
   12346:	move.l 4(sp),d0
}
   1234a:	movea.l (sp)+,a6
   1234c:	lea 12(sp),sp
   12350:	rts

00012352 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   12352:	lea -12(sp),sp
   12356:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12358:	move.l 20(sp),12(sp)
   1235e:	move.l 24(sp),8(sp)
   12364:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1236a:	movea.l d0,a6
   1236c:	move.l 12(sp),d0
   12370:	move.l 8(sp),d1
   12374:	jsr -42(a6)
   12378:	move.l d0,4(sp)
   1237c:	move.l 4(sp),d0
}
   12380:	movea.l (sp)+,a6
   12382:	lea 12(sp),sp
   12386:	rts

00012388 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   12388:	lea -20(sp),sp
   1238c:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1238e:	move.l 28(sp),20(sp)
   12394:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   1239a:	movea.l d0,a6
   1239c:	move.l 20(sp),d0
   123a0:	jsr -108(a6)
   123a4:	move.l d0,4(sp)
   123a8:	move.l d1,8(sp)
   123ac:	move.l 4(sp),12(sp)
   123b2:	move.l 8(sp),16(sp)
   123b8:	move.l 12(sp),d0
   123bc:	move.l 16(sp),d1
}
   123c0:	movea.l (sp)+,a6
   123c2:	lea 20(sp),sp
   123c6:	rts

000123c8 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   123c8:	lea -12(sp),sp
   123cc:	move.l a6,-(sp)
	return IEEEDPFix(value);
   123ce:	move.l 20(sp),8(sp)
   123d4:	move.l 24(sp),12(sp)
   123da:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   123e0:	movea.l d0,a6
   123e2:	move.l 8(sp),d0
   123e6:	move.l 12(sp),d1
   123ea:	jsr -30(a6)
   123ee:	move.l d0,4(sp)
   123f2:	move.l 4(sp),d0
   123f6:	move.l d0,-(sp)
   123f8:	jsr 12430 <__floatsidf>
   123fe:	addq.l #4,sp
}
   12400:	movea.l (sp)+,a6
   12402:	lea 12(sp),sp
   12406:	rts

00012408 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   12408:	subq.l #8,sp
   1240a:	move.l a6,-(sp)
	return IEEESPFix(value);
   1240c:	move.l 16(sp),8(sp)
   12412:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12418:	movea.l d0,a6
   1241a:	move.l 8(sp),d0
   1241e:	jsr -30(a6)
   12422:	move.l d0,4(sp)
   12426:	move.l 4(sp),d0
}
   1242a:	movea.l (sp)+,a6
   1242c:	addq.l #8,sp
   1242e:	rts

00012430 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12430:	lea -20(sp),sp
   12434:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   12436:	move.l 28(sp),20(sp)
   1243c:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12442:	movea.l d0,a6
   12444:	move.l 20(sp),d0
   12448:	jsr -36(a6)
   1244c:	move.l d0,4(sp)
   12450:	move.l d1,8(sp)
   12454:	move.l 4(sp),12(sp)
   1245a:	move.l 8(sp),16(sp)
   12460:	move.l 12(sp),d0
   12464:	move.l 16(sp),d1
}
   12468:	movea.l (sp)+,a6
   1246a:	lea 20(sp),sp
   1246e:	rts

00012470 <__floatsisf>:

FLOAT __floatsisf(int i) {
   12470:	subq.l #8,sp
   12472:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12474:	move.l 16(sp),8(sp)
   1247a:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12480:	movea.l d0,a6
   12482:	move.l 8(sp),d0
   12486:	jsr -36(a6)
   1248a:	move.l d0,4(sp)
   1248e:	move.l 4(sp),d0
}
   12492:	movea.l (sp)+,a6
   12494:	addq.l #8,sp
   12496:	rts

00012498 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   12498:	subq.l #8,sp
   1249a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1249c:	move.l 16(sp),8(sp)
   124a2:	move.l 17b38 <MathIeeeSingBasBase>,d0
   124a8:	movea.l d0,a6
   124aa:	move.l 8(sp),d0
   124ae:	jsr -36(a6)
   124b2:	move.l d0,4(sp)
   124b6:	move.l 4(sp),d0
}
   124ba:	movea.l (sp)+,a6
   124bc:	addq.l #8,sp
   124be:	rts

000124c0 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   124c0:	lea -32(sp),sp
   124c4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   124c8:	move.l 48(sp),36(sp)
   124ce:	move.l 52(sp),40(sp)
   124d4:	move.l 56(sp),28(sp)
   124da:	move.l 60(sp),32(sp)
   124e0:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   124e6:	movea.l d0,a6
   124e8:	move.l 36(sp),d0
   124ec:	move.l 40(sp),d1
   124f0:	move.l 28(sp),d2
   124f4:	move.l 32(sp),d3
   124f8:	jsr -78(a6)
   124fc:	move.l d0,12(sp)
   12500:	move.l d1,16(sp)
   12504:	move.l 12(sp),20(sp)
   1250a:	move.l 16(sp),24(sp)
   12510:	move.l 20(sp),d0
   12514:	move.l 24(sp),d1
}
   12518:	movem.l (sp)+,d2-d3/a6
   1251c:	lea 32(sp),sp
   12520:	rts

00012522 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   12522:	lea -12(sp),sp
   12526:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12528:	move.l 20(sp),12(sp)
   1252e:	move.l 24(sp),8(sp)
   12534:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1253a:	movea.l d0,a6
   1253c:	move.l 12(sp),d0
   12540:	move.l 8(sp),d1
   12544:	jsr -78(a6)
   12548:	move.l d0,4(sp)
   1254c:	move.l 4(sp),d0
}
   12550:	movea.l (sp)+,a6
   12552:	lea 12(sp),sp
   12556:	rts

00012558 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12558:	lea -12(sp),sp
   1255c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1255e:	move.l 20(sp),12(sp)
   12564:	move.l 24(sp),8(sp)
   1256a:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12570:	movea.l d0,a6
   12572:	move.l 12(sp),d0
   12576:	move.l 8(sp),d1
   1257a:	jsr -42(a6)
   1257e:	move.l d0,4(sp)
   12582:	move.l 4(sp),d0
}
   12586:	movea.l (sp)+,a6
   12588:	lea 12(sp),sp
   1258c:	rts

0001258e <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1258e:	lea -20(sp),sp
   12592:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12596:	move.l 36(sp),24(sp)
   1259c:	move.l 40(sp),28(sp)
   125a2:	move.l 44(sp),16(sp)
   125a8:	move.l 48(sp),20(sp)
   125ae:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   125b4:	movea.l d0,a6
   125b6:	move.l 24(sp),d0
   125ba:	move.l 28(sp),d1
   125be:	move.l 16(sp),d2
   125c2:	move.l 20(sp),d3
   125c6:	jsr -42(a6)
   125ca:	move.l d0,12(sp)
   125ce:	move.l 12(sp),d0
}
   125d2:	movem.l (sp)+,d2-d3/a6
   125d6:	lea 20(sp),sp
   125da:	rts

000125dc <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   125dc:	lea -12(sp),sp
   125e0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   125e2:	move.l 20(sp),12(sp)
   125e8:	move.l 24(sp),8(sp)
   125ee:	move.l 17b38 <MathIeeeSingBasBase>,d0
   125f4:	movea.l d0,a6
   125f6:	move.l 12(sp),d0
   125fa:	move.l 8(sp),d1
   125fe:	jsr -42(a6)
   12602:	move.l d0,4(sp)
   12606:	move.l 4(sp),d0
}
   1260a:	movea.l (sp)+,a6
   1260c:	lea 12(sp),sp
   12610:	rts

00012612 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   12612:	lea -12(sp),sp
   12616:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12618:	move.l 20(sp),12(sp)
   1261e:	move.l 24(sp),8(sp)
   12624:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1262a:	movea.l d0,a6
   1262c:	move.l 12(sp),d0
   12630:	move.l 8(sp),d1
   12634:	jsr -42(a6)
   12638:	move.l d0,4(sp)
   1263c:	move.l 4(sp),d0
}
   12640:	movea.l (sp)+,a6
   12642:	lea 12(sp),sp
   12646:	rts

00012648 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   12648:	lea -20(sp),sp
   1264c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12650:	move.l 36(sp),24(sp)
   12656:	move.l 40(sp),28(sp)
   1265c:	move.l 44(sp),16(sp)
   12662:	move.l 48(sp),20(sp)
   12668:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   1266e:	movea.l d0,a6
   12670:	move.l 24(sp),d0
   12674:	move.l 28(sp),d1
   12678:	move.l 16(sp),d2
   1267c:	move.l 20(sp),d3
   12680:	jsr -42(a6)
   12684:	move.l d0,12(sp)
   12688:	move.l 12(sp),d0
}
   1268c:	movem.l (sp)+,d2-d3/a6
   12690:	lea 20(sp),sp
   12694:	rts

00012696 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   12696:	lea -12(sp),sp
   1269a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1269c:	move.l 20(sp),12(sp)
   126a2:	move.l 24(sp),8(sp)
   126a8:	move.l 17b38 <MathIeeeSingBasBase>,d0
   126ae:	movea.l d0,a6
   126b0:	move.l 12(sp),d0
   126b4:	move.l 8(sp),d1
   126b8:	jsr -42(a6)
   126bc:	move.l d0,4(sp)
   126c0:	move.l 4(sp),d0
}
   126c4:	movea.l (sp)+,a6
   126c6:	lea 12(sp),sp
   126ca:	rts

000126cc <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   126cc:	lea -12(sp),sp
   126d0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   126d2:	move.l 20(sp),12(sp)
   126d8:	move.l 24(sp),8(sp)
   126de:	move.l 17b38 <MathIeeeSingBasBase>,d0
   126e4:	movea.l d0,a6
   126e6:	move.l 12(sp),d0
   126ea:	move.l 8(sp),d1
   126ee:	jsr -42(a6)
   126f2:	move.l d0,4(sp)
   126f6:	move.l 4(sp),d0
}
   126fa:	movea.l (sp)+,a6
   126fc:	lea 12(sp),sp
   12700:	rts

00012702 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   12702:	lea -32(sp),sp
   12706:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1270a:	move.l 48(sp),36(sp)
   12710:	move.l 52(sp),40(sp)
   12716:	move.l 56(sp),28(sp)
   1271c:	move.l 60(sp),32(sp)
   12722:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12728:	movea.l d0,a6
   1272a:	move.l 36(sp),d0
   1272e:	move.l 40(sp),d1
   12732:	move.l 28(sp),d2
   12736:	move.l 32(sp),d3
   1273a:	jsr -72(a6)
   1273e:	move.l d0,12(sp)
   12742:	move.l d1,16(sp)
   12746:	move.l 12(sp),20(sp)
   1274c:	move.l 16(sp),24(sp)
   12752:	move.l 20(sp),d0
   12756:	move.l 24(sp),d1
}
   1275a:	movem.l (sp)+,d2-d3/a6
   1275e:	lea 32(sp),sp
   12762:	rts

00012764 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   12764:	lea -12(sp),sp
   12768:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1276a:	move.l 20(sp),12(sp)
   12770:	move.l 24(sp),8(sp)
   12776:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1277c:	movea.l d0,a6
   1277e:	move.l 12(sp),d0
   12782:	move.l 8(sp),d1
   12786:	jsr -72(a6)
   1278a:	move.l d0,4(sp)
   1278e:	move.l 4(sp),d0
}
   12792:	movea.l (sp)+,a6
   12794:	lea 12(sp),sp
   12798:	rts

0001279a <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1279a:	lea -12(sp),sp
   1279e:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   127a0:	move.l 20(sp),8(sp)
   127a6:	move.l 24(sp),12(sp)
   127ac:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   127b2:	movea.l d0,a6
   127b4:	move.l 8(sp),d0
   127b8:	move.l 12(sp),d1
   127bc:	jsr -102(a6)
   127c0:	move.l d0,4(sp)
   127c4:	move.l 4(sp),d0
}
   127c8:	movea.l (sp)+,a6
   127ca:	lea 12(sp),sp
   127ce:	rts

000127d0 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   127d0:	       lea -24(sp),sp
   127d4:	       move.l a6,-(sp)
    if (x > 0) {
   127d6:	       clr.l -(sp)
   127d8:	       move.l 40(sp),-(sp)
   127dc:	       jsr 125dc <__gtsf2>
   127e2:	       addq.l #8,sp
   127e4:	       tst.l d0
   127e6:	   /-- ble.s 12818 <atan2f+0x48>
        return IEEESPAtan(y / x);
   127e8:	   |   move.l 36(sp),-(sp)
   127ec:	   |   move.l 36(sp),-(sp)
   127f0:	   |   jsr 1231c <__divsf3>
   127f6:	   |   addq.l #8,sp
   127f8:	   |   move.l d0,8(sp)
   127fc:	   |   move.l 17b3c <MathIeeeSingTransBase>,d0
   12802:	   |   movea.l d0,a6
   12804:	   |   move.l 8(sp),d0
   12808:	   |   jsr -30(a6)
   1280c:	   |   move.l d0,4(sp)
   12810:	   |   move.l 4(sp),d0
   12814:	/--|-- bra.w 12978 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   12818:	|  \-> clr.l -(sp)
   1281a:	|      move.l 40(sp),-(sp)
   1281e:	|      jsr 12696 <__ltsf2>
   12824:	|      addq.l #8,sp
   12826:	|      tst.l d0
   12828:	|  /-- bge.s 1289c <atan2f+0xcc>
   1282a:	|  |   clr.l -(sp)
   1282c:	|  |   move.l 36(sp),-(sp)
   12830:	|  |   jsr 12558 <__gesf2>
   12836:	|  |   addq.l #8,sp
   12838:	|  |   tst.l d0
   1283a:	|  +-- blt.s 1289c <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1283c:	|  |   move.l 36(sp),-(sp)
   12840:	|  |   move.l 36(sp),-(sp)
   12844:	|  |   jsr 1231c <__divsf3>
   1284a:	|  |   addq.l #8,sp
   1284c:	|  |   move.l d0,24(sp)
   12850:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   12856:	|  |   movea.l d0,a6
   12858:	|  |   move.l 24(sp),d0
   1285c:	|  |   jsr -30(a6)
   12860:	|  |   move.l d0,20(sp)
   12864:	|  |   move.l 20(sp),d0
   12868:	|  |   move.l d0,-(sp)
   1286a:	|  |   jsr 12388 <__extendsfdf2>
   12870:	|  |   addq.l #4,sp
   12872:	|  |   move.l #1413754136,-(sp)
   12878:	|  |   move.l #1074340347,-(sp)
   1287e:	|  |   move.l d1,-(sp)
   12880:	|  |   move.l d0,-(sp)
   12882:	|  |   jsr 12258 <__adddf3>
   12888:	|  |   lea 16(sp),sp
   1288c:	|  |   move.l d1,-(sp)
   1288e:	|  |   move.l d0,-(sp)
   12890:	|  |   jsr 1279a <__truncdfsf2>
   12896:	|  |   addq.l #8,sp
   12898:	+--|-- bra.w 12978 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1289c:	|  \-> clr.l -(sp)
   1289e:	|      move.l 40(sp),-(sp)
   128a2:	|      jsr 12696 <__ltsf2>
   128a8:	|      addq.l #8,sp
   128aa:	|      tst.l d0
   128ac:	|  /-- bge.s 1291e <atan2f+0x14e>
   128ae:	|  |   clr.l -(sp)
   128b0:	|  |   move.l 36(sp),-(sp)
   128b4:	|  |   jsr 12696 <__ltsf2>
   128ba:	|  |   addq.l #8,sp
   128bc:	|  |   tst.l d0
   128be:	|  +-- bge.s 1291e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   128c0:	|  |   move.l 36(sp),-(sp)
   128c4:	|  |   move.l 36(sp),-(sp)
   128c8:	|  |   jsr 1231c <__divsf3>
   128ce:	|  |   addq.l #8,sp
   128d0:	|  |   move.l d0,16(sp)
   128d4:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   128da:	|  |   movea.l d0,a6
   128dc:	|  |   move.l 16(sp),d0
   128e0:	|  |   jsr -30(a6)
   128e4:	|  |   move.l d0,12(sp)
   128e8:	|  |   move.l 12(sp),d0
   128ec:	|  |   move.l d0,-(sp)
   128ee:	|  |   jsr 12388 <__extendsfdf2>
   128f4:	|  |   addq.l #4,sp
   128f6:	|  |   move.l #1413754136,-(sp)
   128fc:	|  |   move.l #1074340347,-(sp)
   12902:	|  |   move.l d1,-(sp)
   12904:	|  |   move.l d0,-(sp)
   12906:	|  |   jsr 12702 <__subdf3>
   1290c:	|  |   lea 16(sp),sp
   12910:	|  |   move.l d1,-(sp)
   12912:	|  |   move.l d0,-(sp)
   12914:	|  |   jsr 1279a <__truncdfsf2>
   1291a:	|  |   addq.l #8,sp
   1291c:	+--|-- bra.s 12978 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1291e:	|  \-> clr.l -(sp)
   12920:	|      move.l 40(sp),-(sp)
   12924:	|      jsr 12352 <__eqsf2>
   1292a:	|      addq.l #8,sp
   1292c:	|      tst.l d0
   1292e:	|  /-- bne.s 1294a <atan2f+0x17a>
   12930:	|  |   clr.l -(sp)
   12932:	|  |   move.l 36(sp),-(sp)
   12936:	|  |   jsr 125dc <__gtsf2>
   1293c:	|  |   addq.l #8,sp
   1293e:	|  |   tst.l d0
   12940:	|  +-- ble.s 1294a <atan2f+0x17a>
        return PI / 2;
   12942:	|  |   move.l #1070141403,d0
   12948:	+--|-- bra.s 12978 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1294a:	|  \-> clr.l -(sp)
   1294c:	|      move.l 40(sp),-(sp)
   12950:	|      jsr 12352 <__eqsf2>
   12956:	|      addq.l #8,sp
   12958:	|      tst.l d0
   1295a:	|  /-- bne.s 12976 <atan2f+0x1a6>
   1295c:	|  |   clr.l -(sp)
   1295e:	|  |   move.l 36(sp),-(sp)
   12962:	|  |   jsr 12696 <__ltsf2>
   12968:	|  |   addq.l #8,sp
   1296a:	|  |   tst.l d0
   1296c:	|  +-- bge.s 12976 <atan2f+0x1a6>
        return -PI / 2;
   1296e:	|  |   move.l #-1077342245,d0
   12974:	+--|-- bra.s 12978 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   12976:	|  \-> moveq #0,d0
    }
}
   12978:	\----> movea.l (sp)+,a6
   1297a:	       lea 24(sp),sp
   1297e:	       rts

00012980 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   12980:	lea -24(sp),sp
   12984:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   12986:	move.l 32(sp),20(sp)
   1298c:	move.l 36(sp),24(sp)
   12992:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   12998:	movea.l d0,a6
   1299a:	move.l 20(sp),d0
   1299e:	move.l 24(sp),d1
   129a2:	jsr -96(a6)
   129a6:	move.l d0,4(sp)
   129aa:	move.l d1,8(sp)
   129ae:	move.l 4(sp),12(sp)
   129b4:	move.l 8(sp),16(sp)
   129ba:	move.l 12(sp),d0
   129be:	move.l 16(sp),d1
}
   129c2:	movea.l (sp)+,a6
   129c4:	lea 24(sp),sp
   129c8:	rts

000129ca <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   129ca:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   129ce:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   129d2:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   129d6:	mulu.w 8(sp),d1
	addw	d1, d0
   129da:	add.w d1,d0
	swap	d0
   129dc:	swap d0
	clrw	d0
   129de:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   129e0:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   129e4:	mulu.w 10(sp),d1
	addl	d1, d0
   129e8:	add.l d1,d0
	rts
   129ea:	rts

000129ec <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   129ec:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   129ee:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   129f2:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   129f6:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   129fc:	   /-- bcc.s 12a14 <__udivsi3+0x28>
	movel	d0, d2
   129fe:	   |   move.l d0,d2
	clrw	d2
   12a00:	   |   clr.w d2
	swap	d2
   12a02:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   12a04:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   12a06:	   |   move.w d2,d0
	swap	d0
   12a08:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   12a0a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   12a0e:	   |   divu.w d1,d2
	movew	d2, d0
   12a10:	   |   move.w d2,d0
	jra	6f
   12a12:	/--|-- bra.s 12a44 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   12a14:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   12a16:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   12a18:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   12a1a:	|  |   cmpi.l #65536,d1
	jcc	4b
   12a20:	|  \-- bcc.s 12a16 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   12a22:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   12a24:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   12a2a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   12a2c:	|      mulu.w d0,d1
	swap	d2
   12a2e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   12a30:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   12a32:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   12a34:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   12a36:	|  /-- bne.s 12a42 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   12a38:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   12a3a:	|  +-- bcs.s 12a42 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   12a3c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   12a40:	+--|-- bls.s 12a44 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   12a42:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   12a44:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12a46:	       rts

00012a48 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   12a48:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   12a4a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   12a4c:	    move.l 12(sp),d1
	jpl	1f
   12a50:	/-- bpl.s 12a56 <__divsi3+0xe>
	negl	d1
   12a52:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   12a54:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   12a56:	\-> move.l 8(sp),d0
	jpl	2f
   12a5a:	/-- bpl.s 12a60 <__divsi3+0x18>
	negl	d0
   12a5c:	|   neg.l d0
	negb	d2
   12a5e:	|   neg.b d2

2:	movel	d1, sp@-
   12a60:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12a62:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   12a64:	    jsr 129ec <__udivsi3>
	addql	#8, sp
   12a6a:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   12a6c:	    tst.b d2
	jpl	3f
   12a6e:	/-- bpl.s 12a72 <__divsi3+0x2a>
	negl	d0
   12a70:	|   neg.l d0

3:	movel	sp@+, d2
   12a72:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12a74:	    rts

00012a76 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12a76:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12a7a:	move.l 4(sp),d0
	movel	d1, sp@-
   12a7e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12a80:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   12a82:	jsr 12a48 <__divsi3>
	addql	#8, sp
   12a88:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12a8a:	move.l 8(sp),d1
	movel	d1, sp@-
   12a8e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12a90:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12a92:	jsr 129ca <__mulsi3>
	addql	#8, sp
   12a98:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12a9a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12a9e:	sub.l d0,d1
	movel	d1, d0
   12aa0:	move.l d1,d0
	rts
   12aa2:	rts

00012aa4 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12aa4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12aa8:	move.l 4(sp),d0
	movel	d1, sp@-
   12aac:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12aae:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   12ab0:	jsr 129ec <__udivsi3>
	addql	#8, sp
   12ab6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12ab8:	move.l 8(sp),d1
	movel	d1, sp@-
   12abc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12abe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12ac0:	jsr 129ca <__mulsi3>
	addql	#8, sp
   12ac6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12ac8:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12acc:	sub.l d0,d1
	movel	d1, d0
   12ace:	move.l d1,d0
	rts
   12ad0:	rts

00012ad2 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   12ad2:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   12ad4:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   12ad8:	jsr -516(a6)
    move.l (sp)+, a6
   12adc:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   12ade:	rts

00012ae0 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   12ae0:	move.b d0,(a3)+
	rts
   12ae2:	rts
