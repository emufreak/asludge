
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #110757,d0
       8:	       subi.l #110757,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1b0a5 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #110757,d0
      40:	       subi.l #110757,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1b0a5 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 65fc <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #110757,d0
      7e:	       subi.l #110757,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1b0a5 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12e40 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1b848 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12e58 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1b0a6 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12e40 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1b848 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1b0a6 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12e40 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1b848 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 16bc8 <PutChar+0x4>
     35c:	|  |              |   jsr 16274 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1b850 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1b850 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1b850 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1b850 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1b850 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1b850 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1b850 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 16bf2 <PutChar+0x2e>
     834:	|   jsr 16274 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1b850 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 16c0e <PutChar+0x4a>
     8a6:	|   jsr 16274 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1b850 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1b850 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1b850 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1b850 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1b850 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1b850 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1b850 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1b850 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1b848 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1b850 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12e40 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1b850 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1b750 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1b750 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1b750 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1b750 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1b750 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1b808 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1b750 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1b750 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1b804 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1b750 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1b750 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1b750 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 8b44 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1b750 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1b754 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1b758 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 1df2 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 16c36 <PutChar+0x72>
     e1a:	          jsr 16274 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1b76a <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 16c4f <PutChar+0x8b>
     e30:	      |   jsr 16274 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1b764 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1b854 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1b76a <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 16c7d <PutChar+0xb9>
     ef0:	|         jsr 16274 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1b854 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 16c9d <PutChar+0xd9>
     f3c:	|         jsr 16274 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1b776 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1b79c <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1b78c <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1b7a0 <winHeight>,d0
     f6e:	|         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1b78c <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1b78c <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1b78c <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1b78c <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 16cbd <PutChar+0xf9>
     fbe:	|         jsr 16274 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1b848 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 16cd2 <PutChar+0x10e>
    1010:	   |   jsr 16274 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1b850 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1b798 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #110760,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #110824,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #110872,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #110912,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1b790 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 16d0d <PutChar+0x149>
    11c6:	                jsr 16274 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1b788 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1b78c <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1b788 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1b77c <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1b854 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1b79c <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1b79c <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1b79c <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 16aae <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1b76a <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1b79c <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 16aae <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1b77c <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1b79c <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1b7a0 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 16aae <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1b79c <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1b7a0 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 16aae <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1b854 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1b794 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1b790 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1b798 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1b798 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1b776 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1b776 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1b776 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1b77c <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1b77c <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1b848 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1b778 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1b778 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1b848 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1b772 <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1b772 <CstCopperList>,12(sp)
    153e:	|   move.l 1b848 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1b76a <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1b76a <CstBackDrop>,8(sp)
    155e:	|   move.l 1b848 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1b76e <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1b76e <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1b848 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1b77c <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1b778 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1b772 <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1b76a <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 16d29 <PutChar+0x165>
    15be:	       jsr 16274 <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1b79c <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1b7a0 <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1b848 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1b76e <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1b76e <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 16d50 <PutChar+0x18c>
    162e:	   |   jsr 16274 <KPrintF>
    1634:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1636:	   \-> move.l 1b76a <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    163e:	       move.l 1b76e <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1646:	       clr.l 32(sp)
    164a:	   /-- bra.s 1670 <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    164c:	/--|-> move.l 40(sp),d1
    1650:	|  |   move.l d1,d0
    1652:	|  |   addq.l #4,d0
    1654:	|  |   move.l d0,40(sp)
    1658:	|  |   move.l 36(sp),d0
    165c:	|  |   move.l d0,d2
    165e:	|  |   addq.l #4,d2
    1660:	|  |   move.l d2,36(sp)
    1664:	|  |   movea.l d1,a0
    1666:	|  |   move.l (a0),d1
    1668:	|  |   movea.l d0,a0
    166a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    166c:	|  |   addq.l #1,32(sp)
    1670:	|  \-> move.w 26(sp),d0
    1674:	|      lsr.w #2,d0
    1676:	|      move.w d0,d0
    1678:	|      andi.l #65535,d0
    167e:	|      cmp.l 32(sp),d0
    1682:	\----- bgt.s 164c <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1684:	       move.l 1b778 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    168c:	       move.l 1b76a <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1694:	       clr.l 28(sp)
    1698:	   /-- bra.s 16be <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    169a:	/--|-> move.l 40(sp),d1
    169e:	|  |   move.l d1,d0
    16a0:	|  |   addq.l #4,d0
    16a2:	|  |   move.l d0,40(sp)
    16a6:	|  |   move.l 36(sp),d0
    16aa:	|  |   move.l d0,d2
    16ac:	|  |   addq.l #4,d2
    16ae:	|  |   move.l d2,36(sp)
    16b2:	|  |   movea.l d1,a0
    16b4:	|  |   move.l (a0),d1
    16b6:	|  |   movea.l d0,a0
    16b8:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16ba:	|  |   addq.l #1,28(sp)
    16be:	|  \-> move.w 26(sp),d0
    16c2:	|      lsr.w #2,d0
    16c4:	|      move.w d0,d0
    16c6:	|      andi.l #65535,d0
    16cc:	|      cmp.l 28(sp),d0
    16d0:	\----- bgt.s 169a <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    16d2:	       move.w #2,1b776 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    16da:	       move.l 1b79c <winWidth>,d0
    16e0:	       lsr.l #4,d0
    16e2:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    16e8:	       move.l a0,d1
    16ea:	       addq.l #2,d1
    16ec:	       move.l d1,1b78c <CstBackDropBufferApplyCursor>
    16f2:	       move.l d0,d0
    16f4:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    16f6:	       move.l 1b7a0 <winHeight>,d0
    16fc:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1702:	       move.l a0,d1
    1704:	       addq.l #2,d1
    1706:	       move.l d1,1b78c <CstBackDropBufferApplyCursor>
    170c:	       move.l d0,d0
    170e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1710:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1716:	       move.l a0,d0
    1718:	       addq.l #2,d0
    171a:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1720:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1722:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1728:	       move.l a0,d0
    172a:	       addq.l #2,d0
    172c:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1732:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1734:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    173a:	       move.l a0,d0
    173c:	       addq.l #2,d0
    173e:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1744:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1746:	       pea 16d88 <PutChar+0x1c4>
    174c:	       jsr 16274 <KPrintF>
    1752:	       addq.l #4,sp

}  
    1754:	       nop
    1756:	       move.l (sp)+,d2
    1758:	       movea.l (sp)+,a6
    175a:	       lea 36(sp),sp
    175e:	       rts

00001760 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1760:	             lea -144(sp),sp
    1764:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1768:	             pea 16d9c <PutChar+0x1d8>
    176e:	             jsr 16274 <KPrintF>
    1774:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1776:	             move.l 164(sp),-(sp)
    177a:	             jsr 6bc <get2bytes>
    1780:	             addq.l #4,sp
    1782:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1786:	             move.l 164(sp),-(sp)
    178a:	             jsr 6bc <get2bytes>
    1790:	             addq.l #4,sp
    1792:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1796:	             move.w 134(sp),d0
    179a:	             lsr.w #3,d0
    179c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17a0:	             move.w 130(sp),d0
    17a4:	             lsr.w #1,d0
    17a6:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17aa:	             move.l 1b79c <winWidth>,d0
    17b0:	             lsr.l #3,d0
    17b2:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17b6:	             move.w 130(sp),d0
    17ba:	             muls.w 132(sp),d0
    17be:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17c2:	             move.w 124(sp),d1
    17c6:	             move.w d1,d0
    17c8:	             add.w d0,d0
    17ca:	             add.w d0,d0
    17cc:	             move.w d0,d2
    17ce:	             add.w d1,d2
    17d0:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    17d4:	             move.w 1b764 <CstPaletteLoaded>,d0
    17da:	/----------- bne.w 1874 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    17de:	|            move.w #384,120(sp)

    if(CstPalette) {
    17e4:	|            move.l 1b794 <CstPalette>,d0
    17ea:	|        /-- beq.s 1804 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    17ec:	|        |   move.l 1b794 <CstPalette>,116(sp)
    17f4:	|        |   move.l 1b848 <SysBase>,d0
    17fa:	|        |   movea.l d0,a6
    17fc:	|        |   movea.l 116(sp),a1
    1800:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1804:	|        \-> moveq #64,d0
    1806:	|            move.l d0,112(sp)
    180a:	|            clr.l 108(sp)
    180e:	|            move.l 1b848 <SysBase>,d0
    1814:	|            movea.l d0,a6
    1816:	|            move.l 112(sp),d0
    181a:	|            move.l 108(sp),d1
    181e:	|            jsr -684(a6)
    1822:	|            move.l d0,104(sp)
    1826:	|            move.l 104(sp),d0
    182a:	|            move.l d0,1b794 <CstPalette>
    CstPaletteLoaded = 1;
    1830:	|            move.w #1,1b764 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1838:	|            move.l 1b794 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1840:	|            clr.l 152(sp)
    1844:	|        /-- bra.s 186a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1846:	|     /--|-> move.l 164(sp),-(sp)
    184a:	|     |  |   jsr 6bc <get2bytes>
    1850:	|     |  |   addq.l #4,sp
    1852:	|     |  |   move.l d0,d1
    1854:	|     |  |   move.l 156(sp),d0
    1858:	|     |  |   move.l d0,d2
    185a:	|     |  |   addq.l #2,d2
    185c:	|     |  |   move.l d2,156(sp)
    1860:	|     |  |   move.l d1,d1
    1862:	|     |  |   movea.l d0,a0
    1864:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1866:	|     |  |   addq.l #1,152(sp)
    186a:	|     |  \-> moveq #31,d0
    186c:	|     |      cmp.l 152(sp),d0
    1870:	|     \----- bge.s 1846 <CstLoadBackdrop+0xe6>
    1872:	|  /-------- bra.s 1892 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1874:	\--|-------> clr.l 148(sp)
    1878:	   |     /-- bra.s 188a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    187a:	   |  /--|-> move.l 164(sp),-(sp)
    187e:	   |  |  |   jsr 6bc <get2bytes>
    1884:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1886:	   |  |  |   addq.l #1,148(sp)
    188a:	   |  |  \-> moveq #31,d2
    188c:	   |  |      cmp.l 148(sp),d2
    1890:	   |  \----- bge.s 187a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1892:	   \-------> moveq #0,d0
    1894:	             move.w 122(sp),d0
    1898:	             move.l d0,100(sp)
    189c:	             moveq #2,d0
    189e:	             move.l d0,96(sp)
    18a2:	             move.l 1b848 <SysBase>,d0
    18a8:	             movea.l d0,a6
    18aa:	             move.l 100(sp),d0
    18ae:	             move.l 96(sp),d1
    18b2:	             jsr -684(a6)
    18b6:	             move.l d0,92(sp)
    18ba:	             move.l 92(sp),d0
    18be:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18c2:	         /-- bne.s 18d2 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18c4:	         |   pea 16dcb <PutChar+0x207>
    18ca:	         |   jsr 16274 <KPrintF>
    18d0:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    18d2:	         \-> moveq #0,d0
    18d4:	             move.w 124(sp),d0
    18d8:	             move.l d0,84(sp)
    18dc:	             moveq #2,d2
    18de:	             move.l d2,80(sp)
    18e2:	             move.l 1b848 <SysBase>,d0
    18e8:	             movea.l d0,a6
    18ea:	             move.l 84(sp),d0
    18ee:	             move.l 80(sp),d1
    18f2:	             jsr -684(a6)
    18f6:	             move.l d0,76(sp)
    18fa:	             move.l 76(sp),d0
    18fe:	             move.l d0,72(sp)
  if( !tmpmask)
    1902:	         /-- bne.s 1912 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1904:	         |   pea 16e01 <PutChar+0x23d>
    190a:	         |   jsr 16274 <KPrintF>
    1910:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1912:	         \-> move.l 164(sp),68(sp)
    1918:	             move.l 88(sp),64(sp)
    191e:	             moveq #2,d0
    1920:	             move.l d0,60(sp)
    1924:	             move.w 122(sp),d0
    1928:	             lsr.w #1,d0
    192a:	             move.w d0,d0
    192c:	             andi.l #65535,d0
    1932:	             move.l d0,56(sp)
    1936:	             move.l 1b850 <DOSBase>,d0
    193c:	             movea.l d0,a6
    193e:	             move.l 68(sp),d1
    1942:	             move.l 64(sp),d2
    1946:	             move.l 60(sp),d3
    194a:	             move.l 56(sp),d4
    194e:	             jsr -324(a6)
    1952:	             move.l d0,52(sp)
    1956:	             move.l 52(sp),d0
    195a:	             move.w d0,50(sp)
  if(!count) {
    195e:	         /-- bne.s 1972 <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1960:	         |   pea 16e35 <PutChar+0x271>
    1966:	         |   jsr 16274 <KPrintF>
    196c:	         |   addq.l #4,sp
    return;
    196e:	   /-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1972:	   |     \-> move.l 164(sp),46(sp)
    1978:	   |         move.l 72(sp),42(sp)
    197e:	   |         moveq #2,d2
    1980:	   |         move.l d2,38(sp)
    1984:	   |         move.w 124(sp),d0
    1988:	   |         lsr.w #1,d0
    198a:	   |         move.w d0,d0
    198c:	   |         andi.l #65535,d0
    1992:	   |         move.l d0,34(sp)
    1996:	   |         move.l 1b850 <DOSBase>,d0
    199c:	   |         movea.l d0,a6
    199e:	   |         move.l 46(sp),d1
    19a2:	   |         move.l 42(sp),d2
    19a6:	   |         move.l 38(sp),d3
    19aa:	   |         move.l 34(sp),d4
    19ae:	   |         jsr -324(a6)
    19b2:	   |         move.l d0,30(sp)
    19b6:	   |         move.l 30(sp),d0
    19ba:	   |         move.w d0,50(sp)
   

  if(!count) {
    19be:	   |     /-- bne.s 19d2 <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    19c0:	   |     |   pea 16e35 <PutChar+0x271>
    19c6:	   |     |   jsr 16274 <KPrintF>
    19cc:	   |     |   addq.l #4,sp
    return;
    19ce:	   +-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    19d2:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    19da:	   |         move.l 1b76a <CstBackDrop>,d0
    19e0:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    19e4:	   |         move.l 172(sp),d0
    19e8:	   |         move.w d0,d1
    19ea:	   |         muls.w 126(sp),d1
    19ee:	   |         move.l 168(sp),d0
    19f2:	   |     /-- bpl.s 19f6 <CstLoadBackdrop+0x296>
    19f4:	   |     |   addq.l #7,d0
    19f6:	   |     \-> asr.l #3,d0
    19f8:	   |         move.l d0,d0
    19fa:	   |         movea.w d1,a0
    19fc:	   |         adda.w d0,a0
    19fe:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a02:	   |         moveq #0,d0
    1a04:	   |         move.w 24(sp),d0
    1a08:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a0c:	   |         pea 16e50 <PutChar+0x28c>
    1a12:	   |         jsr 16274 <KPrintF>
    1a18:	   |         addq.l #4,sp


  WaitBlit();
    1a1a:	   |         move.l 1b854 <GfxBase>,d0
    1a20:	   |         movea.l d0,a6
    1a22:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1a26:	   |         movea.l 26(sp),a0
    1a2a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1a30:	   |         movea.l 26(sp),a0
    1a34:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1a3a:	   |         movea.l 26(sp),a0
    1a3e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1a44:	   |         movea.l 26(sp),a0
    1a48:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1a4e:	   |         move.w 126(sp),d0
    1a52:	   |         sub.w 130(sp),d0
    1a56:	   |         movea.l 26(sp),a0
    1a5a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1a5e:	   |         move.w 126(sp),d0
    1a62:	   |         sub.w 130(sp),d0
    1a66:	   |         movea.l 26(sp),a0
    1a6a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1a6e:	   |         movea.l 26(sp),a0
    1a72:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1a78:	   |         movea.l 26(sp),a0
    1a7c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1a82:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a88:	   |         clr.l 136(sp)
    1a8c:	   |     /-- bra.s 1aee <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    1a8e:	   |  /--|-> movea.l 26(sp),a0
    1a92:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1a98:	   |  |  |   move.l 140(sp),d0
    1a9c:	   |  |  |   movea.l 26(sp),a0
    1aa0:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1aa4:	   |  |  |   move.l 144(sp),d0
    1aa8:	   |  |  |   movea.l 26(sp),a0
    1aac:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1ab0:	   |  |  |   move.l 144(sp),d0
    1ab4:	   |  |  |   movea.l 26(sp),a0
    1ab8:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1abc:	   |  |  |   move.w 132(sp),d0
    1ac0:	   |  |  |   lsl.w #6,d0
    1ac2:	   |  |  |   add.w 128(sp),d0
    1ac6:	   |  |  |   movea.l 26(sp),a0
    1aca:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1ace:	   |  |  |   moveq #0,d0
    1ad0:	   |  |  |   move.w 124(sp),d0
    1ad4:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1ad8:	   |  |  |   move.w 1b768 <CstBackdropSizePlane>,d0
    1ade:	   |  |  |   move.w d0,d0
    1ae0:	   |  |  |   andi.l #65535,d0
    1ae6:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1aea:	   |  |  |   addq.l #1,136(sp)
    1aee:	   |  |  \-> moveq #4,d0
    1af0:	   |  |      cmp.l 136(sp),d0
    1af4:	   |  \----- bge.s 1a8e <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    1af6:	   |         move.l 1b854 <GfxBase>,d0
    1afc:	   |         movea.l d0,a6
    1afe:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b02:	   |         pea 16e6f <PutChar+0x2ab>
    1b08:	   |         jsr 16274 <KPrintF>
    1b0e:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b10:	   |         move.l 88(sp),20(sp)
    1b16:	   |         move.l 1b848 <SysBase>,d0
    1b1c:	   |         movea.l d0,a6
    1b1e:	   |         movea.l 20(sp),a1
    1b22:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1b26:	   |         move.l 72(sp),16(sp)
    1b2c:	   |         move.l 1b848 <SysBase>,d0
    1b32:	   |         movea.l d0,a6
    1b34:	   |         movea.l 16(sp),a1
    1b38:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1b3c:	   |         move.w #2,1b776 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1b44:	   |         move.l 1b79c <winWidth>,d0
    1b4a:	   |         lsr.l #4,d0
    1b4c:	   |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1b52:	   |         move.l a0,d1
    1b54:	   |         addq.l #2,d1
    1b56:	   |         move.l d1,1b78c <CstBackDropBufferApplyCursor>
    1b5c:	   |         move.l d0,d0
    1b5e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1b60:	   |         move.l 1b7a0 <winHeight>,d0
    1b66:	   |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1b6c:	   |         move.l a0,d1
    1b6e:	   |         addq.l #2,d1
    1b70:	   |         move.l d1,1b78c <CstBackDropBufferApplyCursor>
    1b76:	   |         move.l d0,d0
    1b78:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b7a:	   |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1b80:	   |         move.l a0,d0
    1b82:	   |         addq.l #2,d0
    1b84:	   |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1b8a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b8c:	   |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1b92:	   |         move.l a0,d0
    1b94:	   |         addq.l #2,d0
    1b96:	   |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1b9c:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b9e:	   |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    1ba4:	   |         move.l a0,d0
    1ba6:	   |         addq.l #2,d0
    1ba8:	   |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    1bae:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1bb0:	   |         pea 16e8f <PutChar+0x2cb>
    1bb6:	   |         jsr 16274 <KPrintF>
    1bbc:	   |         addq.l #4,sp

}
    1bbe:	   \-------> movem.l (sp)+,d2-d4/a6
    1bc2:	             lea 144(sp),sp
    1bc6:	             rts

00001bc8 <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1bc8:	                   lea -24(sp),sp
    1bcc:	                   move.l a6,-(sp)
    1bce:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1bd0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    1bd8:	                   move.l 1b784 <CstCleanupQueueDrawBuffer>,d0
    1bde:	/----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    1be2:	|                  move.l 1b77c <CstDrawBuffer>,d0
    1be8:	+----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    1bec:	|                  move.l 1b854 <GfxBase>,d0
    1bf2:	|                  movea.l d0,a6
    1bf4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1bf8:	|                  movea.l 16(sp),a0
    1bfc:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1c02:	|                  movea.l 16(sp),a0
    1c06:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1c0c:	|                  movea.l 16(sp),a0
    1c10:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    1c16:	|     /----------- bra.w 1dda <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    1c1a:	|  /--|----------> movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1c20:	|  |  |            move.l 4(a0),d0
    1c24:	|  |  |  /-------- beq.w 1da8 <CstRestoreScreen+0x1e0>
    1c28:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1c2e:	|  |  |  |         movea.l 4(a0),a0
    1c32:	|  |  |  |         move.l 16(a0),d0
    1c36:	|  |  |  |         moveq #2,d1
    1c38:	|  |  |  |         cmp.l d0,d1
    1c3a:	|  |  |  +-------- blt.w 1da8 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c3e:	|  |  |  |         move.l 1b79c <winWidth>,d0
    1c44:	|  |  |  |         lsr.l #3,d0
    1c46:	|  |  |  |         move.l d0,d1
    1c48:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1c4e:	|  |  |  |         move.w 8(a0),d0
    1c52:	|  |  |  |         add.w d0,d0
    1c54:	|  |  |  |         sub.w d0,d1
    1c56:	|  |  |  |         movea.l 16(sp),a0
    1c5a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c5e:	|  |  |  |         move.l 1b79c <winWidth>,d0
    1c64:	|  |  |  |         lsr.l #3,d0
    1c66:	|  |  |  |         move.l d0,d1
    1c68:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1c6e:	|  |  |  |         move.w 8(a0),d0
    1c72:	|  |  |  |         add.w d0,d0
    1c74:	|  |  |  |         sub.w d0,d1
    1c76:	|  |  |  |         movea.l 16(sp),a0
    1c7a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1c7e:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1c84:	|  |  |  |         move.w 14(a0),d0
    1c88:	|  |  |  |         move.w d0,d0
    1c8a:	|  |  |  |         andi.l #65535,d0
    1c90:	|  |  |  |         move.l 1b79c <winWidth>,d1
    1c96:	|  |  |  |         move.l d1,-(sp)
    1c98:	|  |  |  |         move.l d0,-(sp)
    1c9a:	|  |  |  |         jsr 16aae <__mulsi3>
    1ca0:	|  |  |  |         addq.l #8,sp
    1ca2:	|  |  |  |         move.l d0,d1
    1ca4:	|  |  |  |         lsr.l #3,d1
    1ca6:	|  |  |  |         move.l 1b76a <CstBackDrop>,d0
    1cac:	|  |  |  |         add.l d0,d1
    1cae:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1cb4:	|  |  |  |         move.w 12(a0),d0
    1cb8:	|  |  |  |         move.w d0,d0
    1cba:	|  |  |  |         andi.l #65535,d0
    1cc0:	|  |  |  |         move.l d1,d2
    1cc2:	|  |  |  |         add.l d0,d2
    1cc4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1cc8:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1cce:	|  |  |  |         move.w 14(a0),d0
    1cd2:	|  |  |  |         move.w d0,d0
    1cd4:	|  |  |  |         andi.l #65535,d0
    1cda:	|  |  |  |         move.l 1b79c <winWidth>,d1
    1ce0:	|  |  |  |         move.l d1,-(sp)
    1ce2:	|  |  |  |         move.l d0,-(sp)
    1ce4:	|  |  |  |         jsr 16aae <__mulsi3>
    1cea:	|  |  |  |         addq.l #8,sp
    1cec:	|  |  |  |         move.l d0,d1
    1cee:	|  |  |  |         lsr.l #3,d1
    1cf0:	|  |  |  |         move.l 1b77c <CstDrawBuffer>,d0
    1cf6:	|  |  |  |         add.l d0,d1
    1cf8:	|  |  |  |         movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1cfe:	|  |  |  |         move.w 12(a0),d0
    1d02:	|  |  |  |         move.w d0,d0
    1d04:	|  |  |  |         andi.l #65535,d0
    1d0a:	|  |  |  |         move.l d1,d2
    1d0c:	|  |  |  |         add.l d0,d2
    1d0e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d12:	|  |  |  |         clr.l 20(sp)
    1d16:	|  |  |  |     /-- bra.w 1d9e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    1d1a:	|  |  |  |  /--|-> move.l 28(sp),d0
    1d1e:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d22:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    1d26:	|  |  |  |  |  |   move.l 24(sp),d0
    1d2a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d2e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    1d32:	|  |  |  |  |  |   movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1d38:	|  |  |  |  |  |   move.w 10(a0),d0
    1d3c:	|  |  |  |  |  |   lsl.w #6,d0
    1d3e:	|  |  |  |  |  |   movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1d44:	|  |  |  |  |  |   move.w 8(a0),d1
    1d48:	|  |  |  |  |  |   add.w d1,d0
    1d4a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d4e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    1d52:	|  |  |  |  |  |   move.l 1b79c <winWidth>,d0
    1d58:	|  |  |  |  |  |   lsr.l #3,d0
    1d5a:	|  |  |  |  |  |   move.l 1b7a0 <winHeight>,d1
    1d60:	|  |  |  |  |  |   move.l d1,-(sp)
    1d62:	|  |  |  |  |  |   move.l d0,-(sp)
    1d64:	|  |  |  |  |  |   jsr 16aae <__mulsi3>
    1d6a:	|  |  |  |  |  |   addq.l #8,sp
    1d6c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    1d70:	|  |  |  |  |  |   move.l 1b79c <winWidth>,d0
    1d76:	|  |  |  |  |  |   lsr.l #3,d0
    1d78:	|  |  |  |  |  |   move.l 1b7a0 <winHeight>,d1
    1d7e:	|  |  |  |  |  |   move.l d1,-(sp)
    1d80:	|  |  |  |  |  |   move.l d0,-(sp)
    1d82:	|  |  |  |  |  |   jsr 16aae <__mulsi3>
    1d88:	|  |  |  |  |  |   addq.l #8,sp
    1d8a:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    1d8e:	|  |  |  |  |  |   move.l 1b854 <GfxBase>,d0
    1d94:	|  |  |  |  |  |   movea.l d0,a6
    1d96:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d9a:	|  |  |  |  |  |   addq.l #1,20(sp)
    1d9e:	|  |  |  |  |  \-> moveq #4,d0
    1da0:	|  |  |  |  |      cmp.l 20(sp),d0
    1da4:	|  |  |  |  \----- bge.w 1d1a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    1da8:	|  |  |  \-------> move.l 1b784 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    1db0:	|  |  |            movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    1db6:	|  |  |            move.l 16(a0),d0
    1dba:	|  |  |            move.l d0,1b784 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    1dc0:	|  |  |            move.l 12(sp),8(sp)
    1dc6:	|  |  |            move.l 1b848 <SysBase>,d0
    1dcc:	|  |  |            movea.l d0,a6
    1dce:	|  |  |            movea.l 8(sp),a1
    1dd2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    1dd6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    1dda:	|  |  \----------> move.l 1b784 <CstCleanupQueueDrawBuffer>,d0
    1de0:	|  \-------------- bne.w 1c1a <CstRestoreScreen+0x52>
    1de4:	|              /-- bra.s 1de8 <CstRestoreScreen+0x220>
    return;
    1de6:	\--------------|-> nop
  }
  
}
    1de8:	               \-> move.l (sp)+,d2
    1dea:	                   movea.l (sp)+,a6
    1dec:	                   lea 24(sp),sp
    1df0:	                   rts

00001df2 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    1df2:	                lea -124(sp),sp
    1df6:	                movem.l d2-d3/a6,-(sp)
    1dfa:	                movea.l 148(sp),a0
    1dfe:	                move.l 152(sp),d1
    1e02:	                move.l 156(sp),d0
    1e06:	                movea.w a0,a0
    1e08:	                move.w a0,16(sp)
    1e0c:	                move.w d1,d1
    1e0e:	                move.w d1,14(sp)
    1e12:	                move.w d0,d0
    1e14:	                move.w d0,12(sp)
  UWORD *destination = 0;
    1e18:	                clr.l 132(sp)
  switch(destinationtype)
    1e1c:	                moveq #0,d0
    1e1e:	                move.w 12(sp),d0
    1e22:	                moveq #1,d1
    1e24:	                cmp.l d0,d1
    1e26:	            /-- beq.s 1e30 <CstScaleSprite+0x3e>
    1e28:	            |   moveq #2,d2
    1e2a:	            |   cmp.l d0,d2
    1e2c:	         /--|-- beq.s 1e3a <CstScaleSprite+0x48>
    1e2e:	      /--|--|-- bra.s 1e4c <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1e30:	      |  |  \-> move.l 1b77c <CstDrawBuffer>,132(sp)
      break;
    1e38:	      +--|----- bra.s 1e4c <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    1e3a:	      |  \----> move.w #2,1b776 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1e42:	      |         move.l 1b76a <CstBackDrop>,132(sp)
      break;
    1e4a:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1e4c:	      \-------> tst.w 14(sp)
    1e50:	         /----- bge.s 1e98 <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1e52:	         |      movea.w 14(sp),a1
    1e56:	         |      movea.l 140(sp),a0
    1e5a:	         |      move.l 4(a0),d0
    1e5e:	         |      add.l a1,d0
    1e60:	         |  /-- bpl.s 1e74 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1e62:	         |  |   pea 16ea9 <PutChar+0x2e5>
    1e68:	         |  |   jsr 16274 <KPrintF>
    1e6e:	         |  |   addq.l #4,sp
      return;
    1e70:	/--------|--|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    ystartdst = 0;
    1e74:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    1e78:	|        |      move.w 14(sp),d0
    1e7c:	|        |      ext.l d0
    1e7e:	|        |      neg.l d0
    1e80:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    1e84:	|        |      movea.l 140(sp),a0
    1e88:	|        |      move.l 4(a0),d0
    1e8c:	|        |      movea.w 14(sp),a0
    1e90:	|        |      add.l a0,d0
    1e92:	|        |      move.l d0,88(sp)
    1e96:	|     /--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1e98:	|     |  \----> movea.w 14(sp),a1
    1e9c:	|     |         movea.l 140(sp),a0
    1ea0:	|     |         move.l 4(a0),d0
    1ea4:	|     |         move.l a1,d1
    1ea6:	|     |         add.l d0,d1
    1ea8:	|     |         move.l 1b7a0 <winHeight>,d0
    1eae:	|     |         cmp.l d1,d0
    1eb0:	|     |  /----- bge.s 1ef2 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1eb2:	|     |  |      movea.w 14(sp),a0
    1eb6:	|     |  |      move.l 1b7a0 <winHeight>,d0
    1ebc:	|     |  |      cmp.l a0,d0
    1ebe:	|     |  |  /-- bge.s 1ed2 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1ec0:	|     |  |  |   pea 16ea9 <PutChar+0x2e5>
    1ec6:	|     |  |  |   jsr 16274 <KPrintF>
    1ecc:	|     |  |  |   addq.l #4,sp
      return;
    1ece:	+-----|--|--|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    ystartdst = y;
    1ed2:	|     |  |  \-> movea.w 14(sp),a0
    1ed6:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    1eda:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    1ede:	|     |  |      move.l 1b7a0 <winHeight>,d0
    1ee4:	|     |  |      movea.w 14(sp),a0
    1ee8:	|     |  |      move.l d0,d1
    1eea:	|     |  |      sub.l a0,d1
    1eec:	|     |  |      move.l d1,88(sp)
    1ef0:	|     +--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1ef2:	|     |  \----> movea.w 14(sp),a0
    1ef6:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    1efa:	|     |         clr.l 92(sp)
    blitheight = single->height;
    1efe:	|     |         movea.l 140(sp),a0
    1f02:	|     |         move.l 4(a0),d0
    1f06:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1f0a:	|     \-------> tst.w 16(sp)
    1f0e:	|     /-------- bge.w 21be <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    1f12:	|     |         movea.w 16(sp),a1
    1f16:	|     |         movea.l 140(sp),a0
    1f1a:	|     |         move.l (a0),d0
    1f1c:	|     |         add.l a1,d0
    1f1e:	|     |     /-- bpl.s 1f32 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f20:	|     |     |   pea 16ea9 <PutChar+0x2e5>
    1f26:	|     |     |   jsr 16274 <KPrintF>
    1f2c:	|     |     |   addq.l #4,sp
      return;
    1f2e:	+-----|-----|-- bra.w 2928 <CstScaleSprite+0xb36>

    }
    
    extrawords = 1;
    1f32:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    1f38:	|     |         move.w 16(sp),d0
    1f3c:	|     |     /-- bpl.s 1f42 <CstScaleSprite+0x150>
    1f3e:	|     |     |   addi.w #15,d0
    1f42:	|     |     \-> asr.w #4,d0
    1f44:	|     |         neg.w d0
    1f46:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    1f4a:	|     |         move.w 16(sp),d0
    1f4e:	|     |         ext.l d0
    1f50:	|     |         neg.l d0
    1f52:	|     |         andi.l #-2147483633,d0
    1f58:	|     |     /-- bpl.s 1f62 <CstScaleSprite+0x170>
    1f5a:	|     |     |   subq.l #1,d0
    1f5c:	|     |     |   moveq #-16,d1
    1f5e:	|     |     |   or.l d1,d0
    1f60:	|     |     |   addq.l #1,d0
    1f62:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1f66:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1f6a:	|     |         movea.l 140(sp),a0
    1f6e:	|     |         move.l 24(a0),d0
    1f72:	|     |         move.l d0,d2
    1f74:	|     |         moveq #0,d0
    1f76:	|     |         move.w 128(sp),d0
    1f7a:	|     |         add.l d0,d0
    1f7c:	|     |         move.l d0,d3
    1f7e:	|     |         movea.l 140(sp),a0
    1f82:	|     |         move.l (a0),d0
    1f84:	|     |     /-- bpl.s 1f88 <CstScaleSprite+0x196>
    1f86:	|     |     |   addq.l #7,d0
    1f88:	|     |     \-> asr.l #3,d0
    1f8a:	|     |         movea.l 140(sp),a0
    1f8e:	|     |         move.l 4(a0),d1
    1f92:	|     |         move.l d1,-(sp)
    1f94:	|     |         move.l d0,-(sp)
    1f96:	|     |         jsr 16aae <__mulsi3>
    1f9c:	|     |         addq.l #8,sp
    1f9e:	|     |         move.l d0,d1
    1fa0:	|     |         move.l d1,d0
    1fa2:	|     |         add.l d0,d0
    1fa4:	|     |         add.l d0,d0
    1fa6:	|     |         add.l d1,d0
    1fa8:	|     |         add.l d3,d0
    1faa:	|     |         add.l d0,d2
    1fac:	|     |         movea.l 140(sp),a0
    1fb0:	|     |         move.l (a0),d0
    1fb2:	|     |         move.l 92(sp),-(sp)
    1fb6:	|     |         move.l d0,-(sp)
    1fb8:	|     |         jsr 16aae <__mulsi3>
    1fbe:	|     |         addq.l #8,sp
    1fc0:	|     |         lsr.l #3,d0
    1fc2:	|     |         move.l d2,d1
    1fc4:	|     |         add.l d0,d1
    1fc6:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1fca:	|     |         movea.l 140(sp),a0
    1fce:	|     |         move.l 24(a0),d0
    1fd2:	|     |         move.l d0,d1
    1fd4:	|     |         moveq #0,d0
    1fd6:	|     |         move.w 128(sp),d0
    1fda:	|     |         add.l d0,d0
    1fdc:	|     |         move.l d1,d2
    1fde:	|     |         add.l d0,d2
    1fe0:	|     |         movea.l 140(sp),a0
    1fe4:	|     |         move.l (a0),d0
    1fe6:	|     |         move.l 92(sp),-(sp)
    1fea:	|     |         move.l d0,-(sp)
    1fec:	|     |         jsr 16aae <__mulsi3>
    1ff2:	|     |         addq.l #8,sp
    1ff4:	|     |         lsr.l #3,d0
    1ff6:	|     |         move.l d2,d1
    1ff8:	|     |         add.l d0,d1
    1ffa:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ffe:	|     |         move.l 1b79c <winWidth>,d0
    2004:	|     |         move.l 96(sp),-(sp)
    2008:	|     |         move.l d0,-(sp)
    200a:	|     |         jsr 16aae <__mulsi3>
    2010:	|     |         addq.l #8,sp
    2012:	|     |         lsr.l #3,d0
    2014:	|     |         move.l 132(sp),d1
    2018:	|     |         add.l d1,d0
    201a:	|     |         move.l d0,d2
    201c:	|     |         subq.l #2,d2
    201e:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2022:	|     |         move.l 1b79c <winWidth>,d0
    2028:	|     |         move.l 96(sp),-(sp)
    202c:	|     |         move.l d0,-(sp)
    202e:	|     |         jsr 16aae <__mulsi3>
    2034:	|     |         addq.l #8,sp
    2036:	|     |         lsr.l #3,d0
    2038:	|     |         move.l 132(sp),d1
    203c:	|     |         add.l d1,d0
    203e:	|     |         move.l d0,d1
    2040:	|     |         subq.l #2,d1
    2042:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2046:	|     |         moveq #0,d0
    2048:	|     |         move.w 126(sp),d0
    204c:	|     |         moveq #16,d1
    204e:	|     |         sub.l d0,d1
    2050:	|     |         move.l d1,d0
    2052:	|     |         moveq #12,d2
    2054:	|     |         lsl.l d2,d0
    2056:	|     |         addi.l #4042,d0
    205c:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2060:	|     |         moveq #0,d0
    2062:	|     |         move.w 126(sp),d0
    2066:	|     |         moveq #16,d1
    2068:	|     |         sub.l d0,d1
    206a:	|     |         move.l d1,d0
    206c:	|     |         moveq #12,d1
    206e:	|     |         lsl.l d1,d0
    2070:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2074:	|     |         cmpi.w #1,12(sp)
    207a:	|     |  /----- bne.w 2138 <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    207e:	|     |  |      move.l 1b784 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2086:	|     |  |      moveq #20,d2
    2088:	|     |  |      move.l d2,44(sp)
    208c:	|     |  |      clr.l 40(sp)
    2090:	|     |  |      move.l 1b848 <SysBase>,d0
    2096:	|     |  |      movea.l d0,a6
    2098:	|     |  |      move.l 44(sp),d0
    209c:	|     |  |      move.l 40(sp),d1
    20a0:	|     |  |      jsr -684(a6)
    20a4:	|     |  |      move.l d0,36(sp)
    20a8:	|     |  |      move.l 36(sp),d0
    20ac:	|     |  |      move.l d0,1b784 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    20b2:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    20b8:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    20be:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    20c4:	|     |  |      move.w 16(sp),d0
    20c8:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    20ca:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    20d0:	|     |  |      move.w 14(sp),d0
    20d4:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    20d8:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    20de:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    20e4:	|     |  |      movea.l 140(sp),a0
    20e8:	|     |  |      move.l (a0),d0
    20ea:	|     |  |      movea.l d0,a0
    20ec:	|     |  |      cmpa.w #0,a0
    20f0:	|     |  |  /-- bge.s 20f6 <CstScaleSprite+0x304>
    20f2:	|     |  |  |   lea 15(a0),a0
    20f6:	|     |  |  \-> move.l a0,d0
    20f8:	|     |  |      asr.l #4,d0
    20fa:	|     |  |      move.l d0,d0
    20fc:	|     |  |      add.w 128(sp),d0
    2100:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2106:	|     |  |      add.w 130(sp),d0
    210a:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    210e:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2114:	|     |  |      move.l 88(sp),d0
    2118:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    211c:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2122:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2126:	|     |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    212c:	|     |  |      move.l 96(sp),d0
    2130:	|     |  |      move.w d0,14(a0)
    2134:	|  /--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2138:	|  |  |  \----> movea.l 140(sp),a0
    213c:	|  |  |         move.l (a0),d0
    213e:	|  |  |         movea.l d0,a0
    2140:	|  |  |         cmpa.w #0,a0
    2144:	|  |  |     /-- bge.s 214a <CstScaleSprite+0x358>
    2146:	|  |  |     |   lea 15(a0),a0
    214a:	|  |  |     \-> move.l a0,d0
    214c:	|  |  |         asr.l #4,d0
    214e:	|  |  |         move.l d0,d0
    2150:	|  |  |         add.w 128(sp),d0
    2154:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    215a:	|  |  |         move.l a0,d1
    215c:	|  |  |         addq.l #2,d1
    215e:	|  |  |         move.l d1,1b78c <CstBackDropBufferApplyCursor>
    2164:	|  |  |         add.w 130(sp),d0
    2168:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    216a:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2170:	|  |  |         move.l a0,d0
    2172:	|  |  |         addq.l #2,d0
    2174:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    217a:	|  |  |         move.l 88(sp),d0
    217e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2180:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2186:	|  |  |         move.l a0,d0
    2188:	|  |  |         addq.l #2,d0
    218a:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2190:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2192:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2198:	|  |  |         move.l a0,d0
    219a:	|  |  |         addq.l #2,d0
    219c:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    21a2:	|  |  |         move.l 96(sp),d0
    21a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    21a8:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    21ae:	|  |  |         move.l a0,d0
    21b0:	|  |  |         addq.l #2,d0
    21b2:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    21b8:	|  |  |         clr.w (a0)
    21ba:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    21be:	|  |  \-------> movea.w 16(sp),a1
    21c2:	|  |            movea.l 140(sp),a0
    21c6:	|  |            move.l (a0),d0
    21c8:	|  |            move.l a1,d1
    21ca:	|  |            add.l d0,d1
    21cc:	|  |            move.l 1b79c <winWidth>,d0
    21d2:	|  |            cmp.l d1,d0
    21d4:	|  |  /-------- bge.w 24b6 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    21d8:	|  |  |         movea.w 16(sp),a1
    21dc:	|  |  |         movea.l 140(sp),a0
    21e0:	|  |  |         move.l (a0),d0
    21e2:	|  |  |         move.l a1,d1
    21e4:	|  |  |         sub.l d0,d1
    21e6:	|  |  |         move.l 1b79c <winWidth>,d0
    21ec:	|  |  |         cmp.l d1,d0
    21ee:	|  |  |     /-- bge.s 2202 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    21f0:	|  |  |     |   pea 16ea9 <PutChar+0x2e5>
    21f6:	|  |  |     |   jsr 16274 <KPrintF>
    21fc:	|  |  |     |   addq.l #4,sp
      return;
    21fe:	+--|--|-----|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2202:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2206:	|  |  |         movea.w 16(sp),a1
    220a:	|  |  |         movea.l 140(sp),a0
    220e:	|  |  |         move.l (a0),d0
    2210:	|  |  |         add.l a1,d0
    2212:	|  |  |         move.l d0,d1
    2214:	|  |  |         move.l 1b79c <winWidth>,d0
    221a:	|  |  |         sub.l d0,d1
    221c:	|  |  |         move.l d1,d0
    221e:	|  |  |         lsr.l #4,d0
    2220:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    2224:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2228:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    222e:	|  |  |         movea.l 140(sp),a0
    2232:	|  |  |         move.l 24(a0),d0
    2236:	|  |  |         move.l d0,d2
    2238:	|  |  |         movea.l 140(sp),a0
    223c:	|  |  |         move.l (a0),d0
    223e:	|  |  |     /-- bpl.s 2242 <CstScaleSprite+0x450>
    2240:	|  |  |     |   addq.l #7,d0
    2242:	|  |  |     \-> asr.l #3,d0
    2244:	|  |  |         movea.l 140(sp),a0
    2248:	|  |  |         move.l 4(a0),d1
    224c:	|  |  |         move.l d1,-(sp)
    224e:	|  |  |         move.l d0,-(sp)
    2250:	|  |  |         jsr 16aae <__mulsi3>
    2256:	|  |  |         addq.l #8,sp
    2258:	|  |  |         move.l d0,d1
    225a:	|  |  |         move.l d1,d0
    225c:	|  |  |         add.l d0,d0
    225e:	|  |  |         add.l d0,d0
    2260:	|  |  |         add.l d1,d0
    2262:	|  |  |         add.l d0,d2
    2264:	|  |  |         movea.l 140(sp),a0
    2268:	|  |  |         move.l (a0),d0
    226a:	|  |  |         move.l 92(sp),-(sp)
    226e:	|  |  |         move.l d0,-(sp)
    2270:	|  |  |         jsr 16aae <__mulsi3>
    2276:	|  |  |         addq.l #8,sp
    2278:	|  |  |         lsr.l #3,d0
    227a:	|  |  |         move.l d2,d1
    227c:	|  |  |         add.l d0,d1
    227e:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2282:	|  |  |         movea.l 140(sp),a0
    2286:	|  |  |         move.l 24(a0),d0
    228a:	|  |  |         move.l d0,d2
    228c:	|  |  |         movea.l 140(sp),a0
    2290:	|  |  |         move.l (a0),d0
    2292:	|  |  |         move.l 92(sp),-(sp)
    2296:	|  |  |         move.l d0,-(sp)
    2298:	|  |  |         jsr 16aae <__mulsi3>
    229e:	|  |  |         addq.l #8,sp
    22a0:	|  |  |         lsr.l #3,d0
    22a2:	|  |  |         move.l d2,d1
    22a4:	|  |  |         add.l d0,d1
    22a6:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22aa:	|  |  |         move.l 1b79c <winWidth>,d0
    22b0:	|  |  |         move.l 96(sp),-(sp)
    22b4:	|  |  |         move.l d0,-(sp)
    22b6:	|  |  |         jsr 16aae <__mulsi3>
    22bc:	|  |  |         addq.l #8,sp
    22be:	|  |  |         lsr.l #3,d0
    22c0:	|  |  |         move.l 132(sp),d1
    22c4:	|  |  |         add.l d0,d1
    22c6:	|  |  |         move.w 16(sp),d0
    22ca:	|  |  |     /-- bpl.s 22d0 <CstScaleSprite+0x4de>
    22cc:	|  |  |     |   addi.w #15,d0
    22d0:	|  |  |     \-> asr.w #4,d0
    22d2:	|  |  |         movea.w d0,a0
    22d4:	|  |  |         move.l a0,d0
    22d6:	|  |  |         add.l a0,d0
    22d8:	|  |  |         move.l d1,d2
    22da:	|  |  |         add.l d0,d2
    22dc:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22e0:	|  |  |         move.l 1b79c <winWidth>,d0
    22e6:	|  |  |         move.l 96(sp),-(sp)
    22ea:	|  |  |         move.l d0,-(sp)
    22ec:	|  |  |         jsr 16aae <__mulsi3>
    22f2:	|  |  |         addq.l #8,sp
    22f4:	|  |  |         lsr.l #3,d0
    22f6:	|  |  |         move.l 132(sp),d1
    22fa:	|  |  |         add.l d0,d1
    22fc:	|  |  |         move.w 16(sp),d0
    2300:	|  |  |     /-- bpl.s 2306 <CstScaleSprite+0x514>
    2302:	|  |  |     |   addi.w #15,d0
    2306:	|  |  |     \-> asr.w #4,d0
    2308:	|  |  |         movea.w d0,a0
    230a:	|  |  |         move.l a0,d0
    230c:	|  |  |         add.l a0,d0
    230e:	|  |  |         move.l d1,d2
    2310:	|  |  |         add.l d0,d2
    2312:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2316:	|  |  |         movea.l 140(sp),a0
    231a:	|  |  |         move.l (a0),d0
    231c:	|  |  |         andi.l #-2147483633,d0
    2322:	|  |  |     /-- bpl.s 232c <CstScaleSprite+0x53a>
    2324:	|  |  |     |   subq.l #1,d0
    2326:	|  |  |     |   moveq #-16,d1
    2328:	|  |  |     |   or.l d1,d0
    232a:	|  |  |     |   addq.l #1,d0
    232c:	|  |  |     \-> moveq #12,d2
    232e:	|  |  |         lsl.l d2,d0
    2330:	|  |  |         addi.l #4042,d0
    2336:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    233a:	|  |  |         movea.l 140(sp),a0
    233e:	|  |  |         move.l (a0),d0
    2340:	|  |  |         andi.l #-2147483633,d0
    2346:	|  |  |     /-- bpl.s 2350 <CstScaleSprite+0x55e>
    2348:	|  |  |     |   subq.l #1,d0
    234a:	|  |  |     |   moveq #-16,d1
    234c:	|  |  |     |   or.l d1,d0
    234e:	|  |  |     |   addq.l #1,d0
    2350:	|  |  |     \-> moveq #12,d2
    2352:	|  |  |         lsl.l d2,d0
    2354:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2358:	|  |  |         cmpi.w #1,12(sp)
    235e:	|  |  |  /----- bne.w 2426 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2362:	|  |  |  |      move.l 1b784 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    236a:	|  |  |  |      moveq #20,d0
    236c:	|  |  |  |      move.l d0,60(sp)
    2370:	|  |  |  |      clr.l 56(sp)
    2374:	|  |  |  |      move.l 1b848 <SysBase>,d0
    237a:	|  |  |  |      movea.l d0,a6
    237c:	|  |  |  |      move.l 60(sp),d0
    2380:	|  |  |  |      move.l 56(sp),d1
    2384:	|  |  |  |      jsr -684(a6)
    2388:	|  |  |  |      move.l d0,52(sp)
    238c:	|  |  |  |      move.l 52(sp),d0
    2390:	|  |  |  |      move.l d0,1b784 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2396:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    239c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    23a2:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    23a8:	|  |  |  |      move.w 16(sp),d0
    23ac:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    23ae:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    23b4:	|  |  |  |      move.w 14(sp),d0
    23b8:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    23bc:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    23c2:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    23c8:	|  |  |  |      movea.l 140(sp),a0
    23cc:	|  |  |  |      move.l (a0),d0
    23ce:	|  |  |  |      movea.l d0,a0
    23d0:	|  |  |  |      cmpa.w #0,a0
    23d4:	|  |  |  |  /-- bge.s 23da <CstScaleSprite+0x5e8>
    23d6:	|  |  |  |  |   lea 15(a0),a0
    23da:	|  |  |  |  \-> move.l a0,d0
    23dc:	|  |  |  |      asr.l #4,d0
    23de:	|  |  |  |      move.l d0,d0
    23e0:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    23e6:	|  |  |  |      add.w 128(sp),d0
    23ea:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    23ee:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    23f4:	|  |  |  |      move.l 88(sp),d0
    23f8:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    23fc:	|  |  |  |      move.w 16(sp),d0
    2400:	|  |  |  |  /-- bpl.s 2406 <CstScaleSprite+0x614>
    2402:	|  |  |  |  |   addi.w #15,d0
    2406:	|  |  |  |  \-> asr.w #4,d0
    2408:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    240e:	|  |  |  |      add.w d0,d0
    2410:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2414:	|  |  |  |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    241a:	|  |  |  |      move.l 96(sp),d0
    241e:	|  |  |  |      move.w d0,14(a0)
    2422:	|  +--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2426:	|  |  |  \----> movea.l 140(sp),a0
    242a:	|  |  |         move.l (a0),d0
    242c:	|  |  |         movea.l d0,a0
    242e:	|  |  |         cmpa.w #0,a0
    2432:	|  |  |     /-- bge.s 2438 <CstScaleSprite+0x646>
    2434:	|  |  |     |   lea 15(a0),a0
    2438:	|  |  |     \-> move.l a0,d0
    243a:	|  |  |         asr.l #4,d0
    243c:	|  |  |         move.l d0,d0
    243e:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2444:	|  |  |         move.l a0,d1
    2446:	|  |  |         addq.l #2,d1
    2448:	|  |  |         move.l d1,1b78c <CstBackDropBufferApplyCursor>
    244e:	|  |  |         add.w 128(sp),d0
    2452:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2454:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    245a:	|  |  |         move.l a0,d0
    245c:	|  |  |         addq.l #2,d0
    245e:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2464:	|  |  |         move.l 88(sp),d0
    2468:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    246a:	|  |  |         move.w 16(sp),d0
    246e:	|  |  |     /-- bpl.s 2474 <CstScaleSprite+0x682>
    2470:	|  |  |     |   addi.w #15,d0
    2474:	|  |  |     \-> asr.w #4,d0
    2476:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    247c:	|  |  |         move.l a0,d1
    247e:	|  |  |         addq.l #2,d1
    2480:	|  |  |         move.l d1,1b78c <CstBackDropBufferApplyCursor>
    2486:	|  |  |         add.w d0,d0
    2488:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    248a:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2490:	|  |  |         move.l a0,d0
    2492:	|  |  |         addq.l #2,d0
    2494:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    249a:	|  |  |         move.l 96(sp),d0
    249e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    24a0:	|  |  |         movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    24a6:	|  |  |         move.l a0,d0
    24a8:	|  |  |         addq.l #2,d0
    24aa:	|  |  |         move.l d0,1b78c <CstBackDropBufferApplyCursor>
    24b0:	|  |  |         clr.w (a0)
    24b2:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    24b6:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    24bc:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    24c0:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    24c4:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    24c8:	|  |            movea.l 140(sp),a0
    24cc:	|  |            move.l 24(a0),d0
    24d0:	|  |            move.l d0,d2
    24d2:	|  |            movea.l 140(sp),a0
    24d6:	|  |            move.l (a0),d0
    24d8:	|  |        /-- bpl.s 24dc <CstScaleSprite+0x6ea>
    24da:	|  |        |   addq.l #7,d0
    24dc:	|  |        \-> asr.l #3,d0
    24de:	|  |            movea.l 140(sp),a0
    24e2:	|  |            move.l 4(a0),d1
    24e6:	|  |            move.l d1,-(sp)
    24e8:	|  |            move.l d0,-(sp)
    24ea:	|  |            jsr 16aae <__mulsi3>
    24f0:	|  |            addq.l #8,sp
    24f2:	|  |            move.l d0,d1
    24f4:	|  |            move.l d1,d0
    24f6:	|  |            add.l d0,d0
    24f8:	|  |            add.l d0,d0
    24fa:	|  |            add.l d1,d0
    24fc:	|  |            add.l d0,d2
    24fe:	|  |            movea.l 140(sp),a0
    2502:	|  |            move.l (a0),d0
    2504:	|  |            move.l 92(sp),-(sp)
    2508:	|  |            move.l d0,-(sp)
    250a:	|  |            jsr 16aae <__mulsi3>
    2510:	|  |            addq.l #8,sp
    2512:	|  |            lsr.l #3,d0
    2514:	|  |            move.l d2,d1
    2516:	|  |            add.l d0,d1
    2518:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    251c:	|  |            movea.l 140(sp),a0
    2520:	|  |            move.l 24(a0),d0
    2524:	|  |            move.l d0,d2
    2526:	|  |            movea.l 140(sp),a0
    252a:	|  |            move.l (a0),d0
    252c:	|  |            move.l 92(sp),-(sp)
    2530:	|  |            move.l d0,-(sp)
    2532:	|  |            jsr 16aae <__mulsi3>
    2538:	|  |            addq.l #8,sp
    253a:	|  |            lsr.l #3,d0
    253c:	|  |            move.l d2,d1
    253e:	|  |            add.l d0,d1
    2540:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2544:	|  |            move.l 1b79c <winWidth>,d0
    254a:	|  |            move.l 96(sp),-(sp)
    254e:	|  |            move.l d0,-(sp)
    2550:	|  |            jsr 16aae <__mulsi3>
    2556:	|  |            addq.l #8,sp
    2558:	|  |            lsr.l #3,d0
    255a:	|  |            move.l 132(sp),d1
    255e:	|  |            add.l d0,d1
    2560:	|  |            move.w 16(sp),d0
    2564:	|  |        /-- bpl.s 256a <CstScaleSprite+0x778>
    2566:	|  |        |   addi.w #15,d0
    256a:	|  |        \-> asr.w #4,d0
    256c:	|  |            movea.w d0,a0
    256e:	|  |            move.l a0,d0
    2570:	|  |            add.l a0,d0
    2572:	|  |            move.l d1,d2
    2574:	|  |            add.l d0,d2
    2576:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    257a:	|  |            move.l 1b79c <winWidth>,d0
    2580:	|  |            move.l 96(sp),-(sp)
    2584:	|  |            move.l d0,-(sp)
    2586:	|  |            jsr 16aae <__mulsi3>
    258c:	|  |            addq.l #8,sp
    258e:	|  |            lsr.l #3,d0
    2590:	|  |            move.l 132(sp),d1
    2594:	|  |            add.l d0,d1
    2596:	|  |            move.w 16(sp),d0
    259a:	|  |        /-- bpl.s 25a0 <CstScaleSprite+0x7ae>
    259c:	|  |        |   addi.w #15,d0
    25a0:	|  |        \-> asr.w #4,d0
    25a2:	|  |            movea.w d0,a0
    25a4:	|  |            move.l a0,d0
    25a6:	|  |            add.l a0,d0
    25a8:	|  |            move.l d1,d2
    25aa:	|  |            add.l d0,d2
    25ac:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    25b0:	|  |            move.w 16(sp),d0
    25b4:	|  |            andi.w #-32753,d0
    25b8:	|  |        /-- bpl.s 25c2 <CstScaleSprite+0x7d0>
    25ba:	|  |        |   subq.w #1,d0
    25bc:	|  |        |   ori.w #-16,d0
    25c0:	|  |        |   addq.w #1,d0
    25c2:	|  |        \-> ext.l d0
    25c4:	|  |            moveq #12,d1
    25c6:	|  |            lsl.l d1,d0
    25c8:	|  |            addi.l #4042,d0
    25ce:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    25d2:	|  |            move.w 16(sp),d0
    25d6:	|  |            andi.w #-32753,d0
    25da:	|  |        /-- bpl.s 25e4 <CstScaleSprite+0x7f2>
    25dc:	|  |        |   subq.w #1,d0
    25de:	|  |        |   ori.w #-16,d0
    25e2:	|  |        |   addq.w #1,d0
    25e4:	|  |        \-> ext.l d0
    25e6:	|  |            moveq #12,d2
    25e8:	|  |            lsl.l d2,d0
    25ea:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    25ee:	|  |            cmpi.w #1,12(sp)
    25f4:	|  |     /----- bne.w 26c0 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    25f8:	|  |     |      move.l 1b784 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2600:	|  |     |      moveq #20,d0
    2602:	|  |     |      move.l d0,76(sp)
    2606:	|  |     |      clr.l 72(sp)
    260a:	|  |     |      move.l 1b848 <SysBase>,d0
    2610:	|  |     |      movea.l d0,a6
    2612:	|  |     |      move.l 76(sp),d0
    2616:	|  |     |      move.l 72(sp),d1
    261a:	|  |     |      jsr -684(a6)
    261e:	|  |     |      move.l d0,68(sp)
    2622:	|  |     |      move.l 68(sp),d0
    2626:	|  |     |      move.l d0,1b784 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    262c:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2632:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2638:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    263e:	|  |     |      move.w 16(sp),d0
    2642:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2644:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    264a:	|  |     |      move.w 14(sp),d0
    264e:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2652:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2658:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    265e:	|  |     |      movea.l 140(sp),a0
    2662:	|  |     |      move.l (a0),d0
    2664:	|  |     |      movea.l d0,a0
    2666:	|  |     |      cmpa.w #0,a0
    266a:	|  |     |  /-- bge.s 2670 <CstScaleSprite+0x87e>
    266c:	|  |     |  |   lea 15(a0),a0
    2670:	|  |     |  \-> move.l a0,d0
    2672:	|  |     |      asr.l #4,d0
    2674:	|  |     |      move.l d0,d0
    2676:	|  |     |      add.w 128(sp),d0
    267a:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    2680:	|  |     |      add.w 130(sp),d0
    2684:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2688:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    268e:	|  |     |      move.l 88(sp),d0
    2692:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2696:	|  |     |      move.w 16(sp),d0
    269a:	|  |     |  /-- bpl.s 26a0 <CstScaleSprite+0x8ae>
    269c:	|  |     |  |   addi.w #15,d0
    26a0:	|  |     |  \-> asr.w #4,d0
    26a2:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    26a8:	|  |     |      add.w d0,d0
    26aa:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    26ae:	|  |     |      movea.l 1b784 <CstCleanupQueueDrawBuffer>,a0
    26b4:	|  |     |      move.l 96(sp),d0
    26b8:	|  |     |      move.w d0,14(a0)
    26bc:	|  +-----|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26c0:	|  |     \----> movea.l 140(sp),a0
    26c4:	|  |            move.l (a0),d0
    26c6:	|  |            movea.l d0,a0
    26c8:	|  |            cmpa.w #0,a0
    26cc:	|  |        /-- bge.s 26d2 <CstScaleSprite+0x8e0>
    26ce:	|  |        |   lea 15(a0),a0
    26d2:	|  |        \-> move.l a0,d0
    26d4:	|  |            asr.l #4,d0
    26d6:	|  |            move.l d0,d0
    26d8:	|  |            add.w 128(sp),d0
    26dc:	|  |            movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    26e2:	|  |            move.l a0,d1
    26e4:	|  |            addq.l #2,d1
    26e6:	|  |            move.l d1,1b78c <CstBackDropBufferApplyCursor>
    26ec:	|  |            add.w 130(sp),d0
    26f0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    26f2:	|  |            movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    26f8:	|  |            move.l a0,d0
    26fa:	|  |            addq.l #2,d0
    26fc:	|  |            move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2702:	|  |            move.l 88(sp),d0
    2706:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2708:	|  |            move.w 16(sp),d0
    270c:	|  |        /-- bpl.s 2712 <CstScaleSprite+0x920>
    270e:	|  |        |   addi.w #15,d0
    2712:	|  |        \-> asr.w #4,d0
    2714:	|  |            movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    271a:	|  |            move.l a0,d1
    271c:	|  |            addq.l #2,d1
    271e:	|  |            move.l d1,1b78c <CstBackDropBufferApplyCursor>
    2724:	|  |            add.w d0,d0
    2726:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2728:	|  |            movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    272e:	|  |            move.l a0,d0
    2730:	|  |            addq.l #2,d0
    2732:	|  |            move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2738:	|  |            move.l 96(sp),d0
    273c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    273e:	|  |            movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2744:	|  |            move.l a0,d0
    2746:	|  |            addq.l #2,d0
    2748:	|  |            move.l d0,1b78c <CstBackDropBufferApplyCursor>
    274e:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2750:	|  \----------> moveq #0,d0
    2752:	|               move.w 126(sp),d0
    2756:	|               moveq #0,d1
    2758:	|               not.w d1
    275a:	|               asr.l d0,d1
    275c:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2760:	|               moveq #0,d1
    2762:	|               move.w 128(sp),d1
    2766:	|               moveq #0,d0
    2768:	|               move.w 130(sp),d0
    276c:	|               sub.l d0,d1
    276e:	|               move.l d1,d0
    2770:	|               add.w d0,d0
    2772:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2776:	|               moveq #0,d1
    2778:	|               move.w 128(sp),d1
    277c:	|               moveq #0,d0
    277e:	|               move.w 130(sp),d0
    2782:	|               sub.l d0,d1
    2784:	|               move.l d1,d0
    2786:	|               add.w d0,d0
    2788:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    278c:	|               move.l 1b79c <winWidth>,d0
    2792:	|               lsr.l #3,d0
    2794:	|               move.l d0,d1
    2796:	|               movea.l 140(sp),a0
    279a:	|               move.l (a0),d0
    279c:	|           /-- bpl.s 27a0 <CstScaleSprite+0x9ae>
    279e:	|           |   addq.l #7,d0
    27a0:	|           \-> asr.l #3,d0
    27a2:	|               move.l d0,d0
    27a4:	|               sub.w d0,d1
    27a6:	|               move.w 128(sp),d0
    27aa:	|               sub.w 130(sp),d0
    27ae:	|               add.w d0,d0
    27b0:	|               add.w d1,d0
    27b2:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27b6:	|               move.l 1b79c <winWidth>,d0
    27bc:	|               lsr.l #3,d0
    27be:	|               move.l d0,d1
    27c0:	|               movea.l 140(sp),a0
    27c4:	|               move.l (a0),d0
    27c6:	|           /-- bpl.s 27ca <CstScaleSprite+0x9d8>
    27c8:	|           |   addq.l #7,d0
    27ca:	|           \-> asr.l #3,d0
    27cc:	|               move.l d0,d0
    27ce:	|               sub.w d0,d1
    27d0:	|               move.w 128(sp),d0
    27d4:	|               sub.w 130(sp),d0
    27d8:	|               add.w d0,d0
    27da:	|               add.w d1,d0
    27dc:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27e0:	|               move.l #14675968,22(sp)
  WaitBlit();
    27e8:	|               move.l 1b854 <GfxBase>,d0
    27ee:	|               movea.l d0,a6
    27f0:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    27f4:	|               movea.l 22(sp),a0
    27f8:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    27fe:	|               movea.l 22(sp),a0
    2802:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2808:	|               move.w 32(sp),d0
    280c:	|               movea.l 22(sp),a0
    2810:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    2814:	|               move.w 30(sp),d0
    2818:	|               movea.l 22(sp),a0
    281c:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2820:	|               move.w 28(sp),d0
    2824:	|               movea.l 22(sp),a0
    2828:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    282c:	|               move.w 26(sp),d0
    2830:	|               movea.l 22(sp),a0
    2834:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    2838:	|               move.l 104(sp),d0
    283c:	|               movea.l 22(sp),a0
    2840:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    2844:	|               move.l 100(sp),d0
    2848:	|               movea.l 22(sp),a0
    284c:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2850:	|               movea.l 140(sp),a0
    2854:	|               move.l (a0),d0
    2856:	|               asr.l #3,d0
    2858:	|               move.l d0,d1
    285a:	|               movea.l 140(sp),a0
    285e:	|               move.l 4(a0),d0
    2862:	|               move.l d0,d0
    2864:	|               move.w d1,d2
    2866:	|               muls.w d0,d2
    2868:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    286c:	|               move.l 1b79c <winWidth>,d0
    2872:	|               lsr.l #3,d0
    2874:	|               move.l d0,d1
    2876:	|               move.l 1b7a0 <winHeight>,d0
    287c:	|               move.l d0,d0
    287e:	|               move.w d1,d2
    2880:	|               muls.w d0,d2
    2882:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2886:	|               clr.l 84(sp)
    288a:	|        /----- bra.w 291e <CstScaleSprite+0xb2c>
  {
    custom->bltapt = (APTR) bltapt;
    288e:	|     /--|----> move.l 120(sp),d0
    2892:	|     |  |      movea.l 22(sp),a0
    2896:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    289a:	|     |  |      move.l 116(sp),d0
    289e:	|     |  |      movea.l 22(sp),a0
    28a2:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    28a6:	|     |  |      move.l 112(sp),d0
    28aa:	|     |  |      movea.l 22(sp),a0
    28ae:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    28b2:	|     |  |      move.l 108(sp),d0
    28b6:	|     |  |      movea.l 22(sp),a0
    28ba:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    28be:	|     |  |      move.l 88(sp),d0
    28c2:	|     |  |      move.w d0,d1
    28c4:	|     |  |      lsl.w #6,d1
    28c6:	|     |  |      movea.l 140(sp),a0
    28ca:	|     |  |      move.l (a0),d0
    28cc:	|     |  |      movea.l d0,a0
    28ce:	|     |  |      cmpa.w #0,a0
    28d2:	|     |  |  /-- bge.s 28d8 <CstScaleSprite+0xae6>
    28d4:	|     |  |  |   lea 15(a0),a0
    28d8:	|     |  |  \-> move.l a0,d0
    28da:	|     |  |      asr.l #4,d0
    28dc:	|     |  |      move.l d0,d0
    28de:	|     |  |      add.w d1,d0
    28e0:	|     |  |      sub.w 128(sp),d0
    28e4:	|     |  |      add.w 130(sp),d0
    28e8:	|     |  |      movea.l 22(sp),a0
    28ec:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    28f0:	|     |  |      moveq #0,d0
    28f2:	|     |  |      move.w 20(sp),d0
    28f6:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    28fa:	|     |  |      moveq #0,d0
    28fc:	|     |  |      move.w 18(sp),d0
    2900:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    2904:	|     |  |      moveq #0,d0
    2906:	|     |  |      move.w 18(sp),d0
    290a:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    290e:	|     |  |      move.l 1b854 <GfxBase>,d0
    2914:	|     |  |      movea.l d0,a6
    2916:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    291a:	|     |  |      addq.l #1,84(sp)
    291e:	|     |  \----> moveq #4,d0
    2920:	|     |         cmp.l 84(sp),d0
    2924:	|     \-------- bge.w 288e <CstScaleSprite+0xa9c>
  }   
}
    2928:	\-------------> movem.l (sp)+,d2-d3/a6
    292c:	                lea 124(sp),sp
    2930:	                rts

00002932 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    2932:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2934:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    293a:	move.l 8(sp),d0
    293e:	movea.l (sp),a0
    2940:	move.l d0,128(a0)
}
    2944:	nop
    2946:	addq.l #4,sp
    2948:	rts

0000294a <CstSwapBuffer>:

void CstSwapBuffer( ) {
    294a:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    294e:	move.l 1b778 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    2956:	move.l 1b77c <CstDrawBuffer>,d0
    295c:	move.l d0,1b778 <CstViewBuffer>
  CstDrawBuffer = tmp;
    2962:	move.l 16(sp),1b77c <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    296a:	move.l 1b780 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    2972:	move.l 1b784 <CstCleanupQueueDrawBuffer>,d0
    2978:	move.l d0,1b780 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    297e:	move.l 12(sp),1b784 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    2986:	move.l 1b772 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    298e:	move.l 1b778 <CstViewBuffer>,d0
    2994:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    2998:	move.l 4(sp),d0
    299c:	clr.w d0
    299e:	swap d0
    29a0:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    29a4:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    29a8:	movea.w #118,a0
    29ac:	adda.l 8(sp),a0
    29b0:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    29b2:	movea.w #114,a0
    29b6:	adda.l 8(sp),a0
    29ba:	move.w 2(sp),(a0)

  ptr +=  40*256;
    29be:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29c6:	move.l 4(sp),d0
    29ca:	clr.w d0
    29cc:	swap d0
    29ce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    29d2:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    29d6:	movea.w #126,a0
    29da:	adda.l 8(sp),a0
    29de:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    29e0:	movea.w #122,a0
    29e4:	adda.l 8(sp),a0
    29e8:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    29ec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29f4:	move.l 4(sp),d0
    29f8:	clr.w d0
    29fa:	swap d0
    29fc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a00:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    2a04:	movea.l 8(sp),a0
    2a08:	lea 134(a0),a0
    2a0c:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2a0e:	movea.l 8(sp),a0
    2a12:	lea 130(a0),a0
    2a16:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a1a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a22:	move.l 4(sp),d0
    2a26:	clr.w d0
    2a28:	swap d0
    2a2a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a2e:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2a32:	movea.l 8(sp),a0
    2a36:	lea 142(a0),a0
    2a3a:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    2a3c:	movea.l 8(sp),a0
    2a40:	lea 138(a0),a0
    2a44:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a48:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a50:	move.l 4(sp),d0
    2a54:	clr.w d0
    2a56:	swap d0
    2a58:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a5c:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2a60:	movea.l 8(sp),a0
    2a64:	lea 150(a0),a0
    2a68:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    2a6a:	movea.l 8(sp),a0
    2a6e:	lea 146(a0),a0
    2a72:	move.w 2(sp),(a0)

}
    2a76:	nop
    2a78:	lea 20(sp),sp
    2a7c:	rts

00002a7e <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    2a7e:	          lea -56(sp),sp
    2a82:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    2a84:	          pea 16edc <PutChar+0x318>
    2a8a:	          jsr 16274 <KPrintF>
    2a90:	          addq.l #4,sp

  width = width / 8;
    2a92:	          move.l 64(sp),d0
    2a96:	      /-- bpl.s 2a9a <CstReserveBackdrop+0x1c>
    2a98:	      |   addq.l #7,d0
    2a9a:	      \-> asr.l #3,d0
    2a9c:	          move.l d0,64(sp)

  if( width < 40) 
    2aa0:	          moveq #39,d0
    2aa2:	          cmp.l 64(sp),d0
    2aa6:	      /-- blt.s 2abc <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2aa8:	      |   pea 16ef6 <PutChar+0x332>
    2aae:	      |   jsr 16274 <KPrintF>
    2ab4:	      |   addq.l #4,sp
    return FALSE;
    2ab6:	      |   clr.w d0
    2ab8:	/-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    2abc:	|     \-> pea 16f34 <PutChar+0x370>
    2ac2:	|         jsr 16274 <KPrintF>
    2ac8:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    2aca:	|         move.l 64(sp),-(sp)
    2ace:	|         jsr fce <CstCreateCopperlist>
    2ad4:	|         addq.l #4,sp
    2ad6:	|         move.l d0,1b772 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    2adc:	|         pea 16f54 <PutChar+0x390>
    2ae2:	|         jsr 16274 <KPrintF>
    2ae8:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    2aea:	|         move.l 64(sp),d1
    2aee:	|         move.l 68(sp),d0
    2af2:	|         muls.w d1,d0
    2af4:	|         move.w d0,1b768 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2afa:	|         move.w 1b768 <CstBackdropSizePlane>,d1
    2b00:	|         move.w d1,d0
    2b02:	|         add.w d0,d0
    2b04:	|         add.w d0,d0
    2b06:	|         add.w d1,d0
    2b08:	|         move.w d0,1b766 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2b0e:	|         move.w 1b766 <CstBackdropSize>,d0
    2b14:	|         move.w d0,d0
    2b16:	|         andi.l #65535,d0
    2b1c:	|         move.l d0,48(sp)
    2b20:	|         moveq #2,d1
    2b22:	|         move.l d1,44(sp)
    2b26:	|         move.l 1b848 <SysBase>,d0
    2b2c:	|         movea.l d0,a6
    2b2e:	|         move.l 48(sp),d0
    2b32:	|         move.l 44(sp),d1
    2b36:	|         jsr -684(a6)
    2b3a:	|         move.l d0,40(sp)
    2b3e:	|         move.l 40(sp),d0
    2b42:	|         move.l d0,1b76a <CstBackDrop>
  if( !CstBackDrop)
    2b48:	|         move.l 1b76a <CstBackDrop>,d0
    2b4e:	|     /-- bne.s 2b64 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2b50:	|     |   pea 16f7b <PutChar+0x3b7>
    2b56:	|     |   jsr 16274 <KPrintF>
    2b5c:	|     |   addq.l #4,sp
    return FALSE;  
    2b5e:	|     |   clr.w d0
    2b60:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    2b64:	|     \-> pea 16fb3 <PutChar+0x3ef>
    2b6a:	|         jsr 16274 <KPrintF>
    2b70:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    2b72:	|         move.l 1b76a <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b7a:	|         clr.l 52(sp)
    2b7e:	|     /-- bra.s 2b94 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    2b80:	|  /--|-> move.l 56(sp),d0
    2b84:	|  |  |   move.l d0,d1
    2b86:	|  |  |   addq.l #4,d1
    2b88:	|  |  |   move.l d1,56(sp)
    2b8c:	|  |  |   movea.l d0,a0
    2b8e:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b90:	|  |  |   addq.l #1,52(sp)
    2b94:	|  |  \-> move.w 1b766 <CstBackdropSize>,d0
    2b9a:	|  |      lsr.w #2,d0
    2b9c:	|  |      move.w d0,d0
    2b9e:	|  |      andi.l #65535,d0
    2ba4:	|  |      cmp.l 52(sp),d0
    2ba8:	|  \----- bgt.s 2b80 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2baa:	|         move.w 1b766 <CstBackdropSize>,d0
    2bb0:	|         move.w d0,d0
    2bb2:	|         andi.l #65535,d0
    2bb8:	|         move.l 64(sp),d1
    2bbc:	|         add.l d1,d1
    2bbe:	|         add.l d1,d0
    2bc0:	|         move.l d0,36(sp)
    2bc4:	|         moveq #2,d0
    2bc6:	|         move.l d0,32(sp)
    2bca:	|         move.l 1b848 <SysBase>,d0
    2bd0:	|         movea.l d0,a6
    2bd2:	|         move.l 36(sp),d0
    2bd6:	|         move.l 32(sp),d1
    2bda:	|         jsr -684(a6)
    2bde:	|         move.l d0,28(sp)
    2be2:	|         move.l 28(sp),d0
    2be6:	|         move.l d0,1b77c <CstDrawBuffer>
  if( !CstDrawBuffer)
    2bec:	|         move.l 1b77c <CstDrawBuffer>,d0
    2bf2:	|     /-- bne.s 2c08 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2bf4:	|     |   pea 16fd9 <PutChar+0x415>
    2bfa:	|     |   jsr 16274 <KPrintF>
    2c00:	|     |   addq.l #4,sp
    return FALSE;  
    2c02:	|     |   clr.w d0
    2c04:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2c08:	|     \-> pea 17013 <PutChar+0x44f>
    2c0e:	|         jsr 16274 <KPrintF>
    2c14:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    2c16:	|         move.l #10000,24(sp)
    2c1e:	|         clr.l 20(sp)
    2c22:	|         move.l 1b848 <SysBase>,d0
    2c28:	|         movea.l d0,a6
    2c2a:	|         move.l 24(sp),d0
    2c2e:	|         move.l 20(sp),d1
    2c32:	|         jsr -684(a6)
    2c36:	|         move.l d0,16(sp)
    2c3a:	|         move.l 16(sp),d0
    2c3e:	|         move.l d0,1b788 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2c44:	|         move.l 1b788 <CstBackDropBufferApplyStart>,d0
    2c4a:	|     /-- bne.s 2c60 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    2c4c:	|     |   pea 1703b <PutChar+0x477>
    2c52:	|     |   jsr 16274 <KPrintF>
    2c58:	|     |   addq.l #4,sp
    return FALSE;  
    2c5a:	|     |   clr.w d0
    2c5c:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2c60:	|     \-> move.l 1b788 <CstBackDropBufferApplyStart>,d0
    2c66:	|         move.l d0,1b78c <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    2c6c:	|         movea.l 1b788 <CstBackDropBufferApplyStart>,a0
    2c72:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    2c74:	|         movea.l 1b788 <CstBackDropBufferApplyStart>,a0
    2c7a:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2c7c:	|         move.w 1b766 <CstBackdropSize>,d0
    2c82:	|         move.w d0,d0
    2c84:	|         andi.l #65535,d0
    2c8a:	|         move.l 64(sp),d1
    2c8e:	|         add.l d1,d1
    2c90:	|         add.l d1,d0
    2c92:	|         move.l d0,12(sp)
    2c96:	|         moveq #2,d1
    2c98:	|         move.l d1,8(sp)
    2c9c:	|         move.l 1b848 <SysBase>,d0
    2ca2:	|         movea.l d0,a6
    2ca4:	|         move.l 12(sp),d0
    2ca8:	|         move.l 8(sp),d1
    2cac:	|         jsr -684(a6)
    2cb0:	|         move.l d0,4(sp)
    2cb4:	|         move.l 4(sp),d0
    2cb8:	|         move.l d0,1b778 <CstViewBuffer>
  if( !CstViewBuffer)
    2cbe:	|         move.l 1b778 <CstViewBuffer>,d0
    2cc4:	|     /-- bne.s 2cda <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2cc6:	|     |   pea 17086 <PutChar+0x4c2>
    2ccc:	|     |   jsr 16274 <KPrintF>
    2cd2:	|     |   addq.l #4,sp
    return FALSE;  
    2cd4:	|     |   clr.w d0
    2cd6:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2cda:	|     \-> pea 170c0 <PutChar+0x4fc>
    2ce0:	|         jsr 16274 <KPrintF>
    2ce6:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2ce8:	|         move.l 1b77c <CstDrawBuffer>,d1
    2cee:	|         move.l 64(sp),d0
    2cf2:	|     /-- bpl.s 2cf6 <CstReserveBackdrop+0x278>
    2cf4:	|     |   addq.l #3,d0
    2cf6:	|     \-> asr.l #2,d0
    2cf8:	|         add.l d0,d0
    2cfa:	|         add.l d0,d0
    2cfc:	|         add.l d1,d0
    2cfe:	|         move.l d0,1b77c <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2d04:	|         move.l 1b778 <CstViewBuffer>,d1
    2d0a:	|         move.l 64(sp),d0
    2d0e:	|     /-- bpl.s 2d12 <CstReserveBackdrop+0x294>
    2d10:	|     |   addq.l #3,d0
    2d12:	|     \-> asr.l #2,d0
    2d14:	|         add.l d0,d0
    2d16:	|         add.l d0,d0
    2d18:	|         add.l d1,d0
    2d1a:	|         move.l d0,1b778 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2d20:	|         move.l 1b772 <CstCopperList>,d0
    2d26:	|     /-- beq.s 2d38 <CstReserveBackdrop+0x2ba>
    2d28:	|     |   move.l 1b77c <CstDrawBuffer>,d0
    2d2e:	|     +-- beq.s 2d38 <CstReserveBackdrop+0x2ba>
    2d30:	|     |   move.l 1b778 <CstViewBuffer>,d0
    2d36:	|  /--|-- bne.s 2d4a <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2d38:	|  |  \-> pea 170e8 <PutChar+0x524>
    2d3e:	|  |      jsr 16274 <KPrintF>
    2d44:	|  |      addq.l #4,sp
    return FALSE;
    2d46:	|  |      clr.w d0
    2d48:	+--|----- bra.s 2d78 <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    2d4a:	|  \----> pea 17115 <PutChar+0x551>
    2d50:	|         jsr 16274 <KPrintF>
    2d56:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    2d58:	|         move.l 1b772 <CstCopperList>,d0
    2d5e:	|         move.l d0,-(sp)
    2d60:	|         jsr 2932 <CstSetCl>
    2d66:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    2d68:	|         pea 1713c <PutChar+0x578>
    2d6e:	|         jsr 16274 <KPrintF>
    2d74:	|         addq.l #4,sp
  return TRUE;
    2d76:	|         moveq #1,d0

}
    2d78:	\-------> movea.l (sp)+,a6
    2d7a:	          lea 56(sp),sp
    2d7e:	          rts

00002d80 <CstUnfreeze>:

void CstUnfreeze() {
    2d80:	       lea -24(sp),sp
    2d84:	       move.l a6,-(sp)
    2d86:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    2d88:	       pea 1715f <PutChar+0x59b>
    2d8e:	       jsr 16274 <KPrintF>
    2d94:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    2d96:	       move.l 1b79c <winWidth>,d0
    2d9c:	       lsr.l #3,d0
    2d9e:	       move.l d0,d1
    2da0:	       move.l 1b7a0 <winHeight>,d0
    2da6:	       move.l d0,d0
    2da8:	       muls.w d0,d1
    2daa:	       move.w d1,d0
    2dac:	       add.w d0,d0
    2dae:	       add.w d0,d0
    2db0:	       move.w d0,d2
    2db2:	       add.w d1,d2
    2db4:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2db8:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    2dc0:	       move.l 1b76e <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    2dc8:	       move.l 1b76a <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    2dd0:	       clr.l 20(sp)
    2dd4:	   /-- bra.s 2dfa <CstUnfreeze+0x7a>
  {
    *dst++ = *src++;
    2dd6:	/--|-> move.l 28(sp),d1
    2dda:	|  |   move.l d1,d0
    2ddc:	|  |   addq.l #4,d0
    2dde:	|  |   move.l d0,28(sp)
    2de2:	|  |   move.l 24(sp),d0
    2de6:	|  |   move.l d0,d2
    2de8:	|  |   addq.l #4,d2
    2dea:	|  |   move.l d2,24(sp)
    2dee:	|  |   movea.l d1,a0
    2df0:	|  |   move.l (a0),d1
    2df2:	|  |   movea.l d0,a0
    2df4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    2df6:	|  |   addq.l #1,20(sp)
    2dfa:	|  \-> move.w 18(sp),d0
    2dfe:	|      lsr.w #2,d0
    2e00:	|      move.w d0,d0
    2e02:	|      andi.l #65535,d0
    2e08:	|      cmp.l 20(sp),d0
    2e0c:	\----- bgt.s 2dd6 <CstUnfreeze+0x56>
  }

  CstApplyBackDropCounter = 2;
    2e0e:	       move.w #2,1b776 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2e16:	       move.l 1b79c <winWidth>,d0
    2e1c:	       lsr.l #4,d0
    2e1e:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2e24:	       move.l a0,d1
    2e26:	       addq.l #2,d1
    2e28:	       move.l d1,1b78c <CstBackDropBufferApplyCursor>
    2e2e:	       move.l d0,d0
    2e30:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2e32:	       move.l 1b7a0 <winHeight>,d0
    2e38:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2e3e:	       move.l a0,d1
    2e40:	       addq.l #2,d1
    2e42:	       move.l d1,1b78c <CstBackDropBufferApplyCursor>
    2e48:	       move.l d0,d0
    2e4a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e4c:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2e52:	       move.l a0,d0
    2e54:	       addq.l #2,d0
    2e56:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2e5c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e5e:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2e64:	       move.l a0,d0
    2e66:	       addq.l #2,d0
    2e68:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2e6e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e70:	       movea.l 1b78c <CstBackDropBufferApplyCursor>,a0
    2e76:	       move.l a0,d0
    2e78:	       addq.l #2,d0
    2e7a:	       move.l d0,1b78c <CstBackDropBufferApplyCursor>
    2e80:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    2e82:	       move.l 1b76e <CstBackDropBackup>,d0
    2e88:	   /-- bne.s 2ea2 <CstUnfreeze+0x122>
    FreeVec( CstBackDropBackup);
    2e8a:	   |   move.l 1b76e <CstBackDropBackup>,10(sp)
    2e92:	   |   move.l 1b848 <SysBase>,d0
    2e98:	   |   movea.l d0,a6
    2e9a:	   |   movea.l 10(sp),a1
    2e9e:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    2ea2:	   \-> pea 16d88 <PutChar+0x1c4>
    2ea8:	       jsr 16274 <KPrintF>
    2eae:	       addq.l #4,sp

}
    2eb0:	       nop
    2eb2:	       move.l (sp)+,d2
    2eb4:	       movea.l (sp)+,a6
    2eb6:	       lea 24(sp),sp
    2eba:	       rts

00002ebc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2ebc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2ec0:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2ec4:	       tst.l 24(sp)
    2ec8:	   /-- bge.s 2ece <drawLine+0x12>
    2eca:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2ece:	   \-> tst.l 28(sp)
    2ed2:	   /-- bge.s 2ed8 <drawLine+0x1c>
    2ed4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2ed8:	   \-> tst.l 32(sp)
    2edc:	   /-- bge.s 2ee2 <drawLine+0x26>
    2ede:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2ee2:	   \-> tst.l 36(sp)
    2ee6:	   /-- bge.s 2eec <drawLine+0x30>
    2ee8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2eec:	   \-> move.l 1b93c <sceneWidth>,d0
    2ef2:	       cmp.l 24(sp),d0
    2ef6:	   /-- bge.s 2f06 <drawLine+0x4a>
    2ef8:	   |   move.l 1b93c <sceneWidth>,d0
    2efe:	   |   move.l d0,d1
    2f00:	   |   subq.l #1,d1
    2f02:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2f06:	   \-> move.l 1b93c <sceneWidth>,d0
    2f0c:	       cmp.l 32(sp),d0
    2f10:	   /-- bge.s 2f20 <drawLine+0x64>
    2f12:	   |   move.l 1b93c <sceneWidth>,d0
    2f18:	   |   move.l d0,d1
    2f1a:	   |   subq.l #1,d1
    2f1c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2f20:	   \-> move.l 1b940 <sceneHeight>,d0
    2f26:	       cmp.l 28(sp),d0
    2f2a:	   /-- bge.s 2f3a <drawLine+0x7e>
    2f2c:	   |   move.l 1b940 <sceneHeight>,d0
    2f32:	   |   move.l d0,d1
    2f34:	   |   subq.l #1,d1
    2f36:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2f3a:	   \-> move.l 1b940 <sceneHeight>,d0
    2f40:	       cmp.l 36(sp),d0
    2f44:	   /-- bge.s 2f54 <drawLine+0x98>
    2f46:	   |   move.l 1b940 <sceneHeight>,d0
    2f4c:	   |   move.l d0,d1
    2f4e:	   |   subq.l #1,d1
    2f50:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2f54:	   \-> move.l 24(sp),d0
    2f58:	       cmp.l 32(sp),d0
    2f5c:	/----- ble.s 2f78 <drawLine+0xbc>
		x = x2; 
    2f5e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2f64:	|      tst.w 10(sp)
    2f68:	|      seq d0
    2f6a:	|      neg.b d0
    2f6c:	|      move.b d0,d0
    2f6e:	|      andi.w #255,d0
    2f72:	|      move.w d0,10(sp)
    2f76:	|  /-- bra.s 2f7e <drawLine+0xc2>
	} else x = x1;
    2f78:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2f7e:	   \-> move.l 28(sp),d1
    2f82:	       cmp.l 36(sp),d1
    2f86:	/----- ble.s 2fa2 <drawLine+0xe6>
		y = y2; 
    2f88:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2f8e:	|      tst.w 10(sp)
    2f92:	|      seq d0
    2f94:	|      neg.b d0
    2f96:	|      move.b d0,d0
    2f98:	|      andi.w #255,d0
    2f9c:	|      move.w d0,10(sp)
    2fa0:	|  /-- bra.s 2fa8 <drawLine+0xec>
	} else y = y1;	
    2fa2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2fa8:	   \-> move.l 32(sp),d0
    2fac:	       sub.l 24(sp),d0
    2fb0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2fb4:	       move.l 6(sp),d0
    2fb8:	   /-- bpl.s 2fbc <drawLine+0x100>
    2fba:	   |   neg.l d0
    2fbc:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2fc0:	       move.l 36(sp),d1
    2fc4:	       sub.l 28(sp),d1
    2fc8:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2fcc:	       move.l 2(sp),d0
    2fd0:	   /-- bpl.s 2fd4 <drawLine+0x118>
    2fd2:	   |   neg.l d0
    2fd4:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2fd8:	       tst.l 6(sp)
    2fdc:	   /-- bne.s 3000 <drawLine+0x144>
		diffX = 1;
    2fde:	   |   moveq #1,d0
    2fe0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2fe4:	   |   move.l 1b93c <sceneWidth>,d0
    2fea:	   |   subq.l #1,d0
    2fec:	   |   cmp.l 16(sp),d0
    2ff0:	   +-- bne.s 3000 <drawLine+0x144>
    2ff2:	   |   move.l 1b93c <sceneWidth>,d0
    2ff8:	   |   move.l d0,d1
    2ffa:	   |   subq.l #2,d1
    2ffc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3000:	   \-> tst.l 2(sp)
    3004:	   /-- bne.s 3028 <drawLine+0x16c>
		diffY = 1;
    3006:	   |   moveq #1,d0
    3008:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    300c:	   |   move.l 1b940 <sceneHeight>,d0
    3012:	   |   subq.l #1,d0
    3014:	   |   cmp.l 12(sp),d0
    3018:	   +-- bne.s 3028 <drawLine+0x16c>
    301a:	   |   move.l 1b940 <sceneHeight>,d0
    3020:	   |   move.l d0,d1
    3022:	   |   subq.l #2,d1
    3024:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3028:	   \-> pea 1718a <PutChar+0x5c6>
    302e:	       jsr 16274 <KPrintF>
    3034:	       addq.l #4,sp
	
}
    3036:	       nop
    3038:	       lea 20(sp),sp
    303c:	       rts

0000303e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    303e:	                      lea -24(sp),sp
    3042:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3044:	                      move.l 1b7a4 <firstTexture>,d0
    304a:	/-------------------- beq.w 3128 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    304e:	|                     clr.l 24(sp)
    3052:	|     /-------------- bra.w 311c <deleteTextures+0xde>
			BOOL found = FALSE;
    3056:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    305a:	|  |  |               move.l 1b7a4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3062:	|  |  |               movea.l 20(sp),a0
    3066:	|  |  |               move.l (a0),d1
    3068:	|  |  |               move.l 24(sp),d0
    306c:	|  |  |               add.l d0,d0
    306e:	|  |  |               add.l d0,d0
    3070:	|  |  |               movea.l 36(sp),a0
    3074:	|  |  |               adda.l d0,a0
    3076:	|  |  |               move.l (a0),d0
    3078:	|  |  |               cmp.l d1,d0
    307a:	|  |  |  /----------- bne.w 310e <deleteTextures+0xd0>
				found = TRUE;
    307e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3084:	|  |  |  |            movea.l 20(sp),a0
    3088:	|  |  |  |            move.l 12(a0),d0
    308c:	|  |  |  |            move.l d0,1b7a4 <firstTexture>
				FreeVec(list);
    3092:	|  |  |  |            move.l 20(sp),6(sp)
    3098:	|  |  |  |            move.l 1b848 <SysBase>,d0
    309e:	|  |  |  |            movea.l d0,a6
    30a0:	|  |  |  |            movea.l 6(sp),a1
    30a4:	|  |  |  |            jsr -690(a6)
				continue;
    30a8:	|  |  |  |  /-------- bra.s 3118 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    30aa:	|  |  |  |  |  /----> movea.l 20(sp),a0
    30ae:	|  |  |  |  |  |      movea.l 12(a0),a0
    30b2:	|  |  |  |  |  |      move.l (a0),d1
    30b4:	|  |  |  |  |  |      move.l 24(sp),d0
    30b8:	|  |  |  |  |  |      add.l d0,d0
    30ba:	|  |  |  |  |  |      add.l d0,d0
    30bc:	|  |  |  |  |  |      movea.l 36(sp),a0
    30c0:	|  |  |  |  |  |      adda.l d0,a0
    30c2:	|  |  |  |  |  |      move.l (a0),d0
    30c4:	|  |  |  |  |  |      cmp.l d1,d0
    30c6:	|  |  |  |  |  |  /-- bne.s 3104 <deleteTextures+0xc6>
					found = TRUE;
    30c8:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    30ce:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30d2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    30d8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30dc:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    30e0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    30e4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30e8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    30ec:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    30f2:	|  |  |  |  |  |  |   move.l 1b848 <SysBase>,d0
    30f8:	|  |  |  |  |  |  |   movea.l d0,a6
    30fa:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    30fe:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3102:	|  |  |  |  +--|--|-- bra.s 3118 <deleteTextures+0xda>
				}
				list = list->next;
    3104:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3108:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    310e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3112:	|  |  |     |  |      move.l 12(a0),d0
    3116:	|  |  |     |  \----- bne.s 30aa <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3118:	|  |  |     \-------> addq.l #1,24(sp)
    311c:	|  |  \-------------> move.l 24(sp),d0
    3120:	|  |                  cmp.l 32(sp),d0
    3124:	|  \----------------- bcs.w 3056 <deleteTextures+0x18>
			}
		}
	}
}
    3128:	\-------------------> nop
    312a:	                      movea.l (sp)+,a6
    312c:	                      lea 24(sp),sp
    3130:	                      rts

00003132 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3132:	subq.l #4,sp
    3134:	move.l 8(sp),d0
    3138:	move.w d0,d0
    313a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    313e:	pea 171ad <PutChar+0x5e9>
    3144:	jsr 16274 <KPrintF>
    314a:	addq.l #4,sp
}
    314c:	nop
    314e:	addq.l #4,sp
    3150:	rts

00003152 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3152:	       moveq #-1,d0
    3154:	       cmp.l 4(sp),d0
    3158:	   /-- bne.s 315e <resourceNameFromNum+0xc>
    315a:	   |   moveq #0,d0
    315c:	/--|-- bra.s 3196 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    315e:	|  \-> move.l 1b824 <numResourceNames>,d0
    3164:	|  /-- bne.s 316e <resourceNameFromNum+0x1c>
    3166:	|  |   move.l #94685,d0
    316c:	+--|-- bra.s 3196 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    316e:	|  \-> move.l 1b824 <numResourceNames>,d0
    3174:	|      cmp.l 4(sp),d0
    3178:	|  /-- ble.s 3190 <resourceNameFromNum+0x3e>
    317a:	|  |   move.l 1b7dc <allResourceNames>,d1
    3180:	|  |   move.l 4(sp),d0
    3184:	|  |   add.l d0,d0
    3186:	|  |   add.l d0,d0
    3188:	|  |   movea.l d1,a0
    318a:	|  |   adda.l d0,a0
    318c:	|  |   move.l (a0),d0
    318e:	+--|-- bra.s 3196 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3190:	|  \-> move.l #94694,d0
    3196:	\----> rts

00003198 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3198:	          lea -44(sp),sp
    319c:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    31a0:	          move.l #320,1b79c <winWidth>
    winHeight = 256;
    31aa:	          move.l #256,1b7a0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    31b4:	          tst.l 60(sp)
    31b8:	      /-- bne.s 31d0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    31ba:	      |   pea 171f7 <PutChar+0x633>
    31c0:	      |   jsr b8 <copyString>
    31c6:	      |   addq.l #4,sp
    31c8:	      |   move.l d0,1b7b4 <bundleFolder>
    31ce:	   /--|-- bra.s 31e6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    31d0:	   |  \-> movea.l 64(sp),a0
    31d4:	   |      move.l (a0),d0
    31d6:	   |      move.l d0,-(sp)
    31d8:	   |      jsr b8 <copyString>
    31de:	   |      addq.l #4,sp
    31e0:	   |      move.l d0,1b7b4 <bundleFolder>
	}
    
	int lastSlash = -1;
    31e6:	   \----> moveq #-1,d0
    31e8:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    31ec:	          clr.l 44(sp)
    31f0:	   /----- bra.s 3212 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    31f2:	/--|----> move.l 1b7b4 <bundleFolder>,d1
    31f8:	|  |      move.l 44(sp),d0
    31fc:	|  |      movea.l d1,a0
    31fe:	|  |      adda.l d0,a0
    3200:	|  |      move.b (a0),d0
    3202:	|  |      cmpi.b #47,d0
    3206:	|  |  /-- bne.s 320e <main_sludge+0x76>
    3208:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    320e:	|  |  \-> addq.l #1,44(sp)
    3212:	|  \----> move.l 1b7b4 <bundleFolder>,d1
    3218:	|         move.l 44(sp),d0
    321c:	|         movea.l d1,a0
    321e:	|         adda.l d0,a0
    3220:	|         move.b (a0),d0
    3222:	\-------- bne.s 31f2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3224:	          move.l 1b7b4 <bundleFolder>,d0
    322a:	          move.l 48(sp),d1
    322e:	          addq.l #1,d1
    3230:	          movea.l d0,a0
    3232:	          adda.l d1,a0
    3234:	          clr.b (a0)

	if (argc > 1) {
    3236:	          moveq #1,d0
    3238:	          cmp.l 60(sp),d0
    323c:	      /-- bge.s 3258 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    323e:	      |   move.l 60(sp),d0
    3242:	      |   addi.l #1073741823,d0
    3248:	      |   add.l d0,d0
    324a:	      |   add.l d0,d0
    324c:	      |   movea.l 64(sp),a0
    3250:	      |   adda.l d0,a0
    3252:	      |   move.l (a0),52(sp)
    3256:	   /--|-- bra.s 32b2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3258:	   |  \-> move.l 1b7b4 <bundleFolder>,d0
    325e:	   |      pea 171fd <PutChar+0x639>
    3264:	   |      move.l d0,-(sp)
    3266:	   |      jsr 12e80 <joinStrings>
    326c:	   |      addq.l #8,sp
    326e:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3272:	   |      move.l 52(sp),-(sp)
    3276:	   |      jsr 12d7a <fileExists>
    327c:	   |      addq.l #4,sp
    327e:	   |      tst.b d0
    3280:	   +----- bne.s 32b2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3282:	   |      move.l 52(sp),40(sp)
    3288:	   |      move.l 1b848 <SysBase>,d0
    328e:	   |      movea.l d0,a6
    3290:	   |      movea.l 40(sp),a1
    3294:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3298:	   |      move.l 1b7b4 <bundleFolder>,d0
    329e:	   |      pea 1720a <PutChar+0x646>
    32a4:	   |      move.l d0,-(sp)
    32a6:	   |      jsr 12e80 <joinStrings>
    32ac:	   |      addq.l #8,sp
    32ae:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    32b2:	   \----> pea 17213 <PutChar+0x64f>
    32b8:	          jsr 16274 <KPrintF>
    32be:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    32c0:	          move.l 52(sp),-(sp)
    32c4:	          jsr 12d7a <fileExists>
    32ca:	          addq.l #4,sp
    32cc:	          tst.b d0
    32ce:	      /-- bne.s 3326 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    32d0:	      |   move.l 1b850 <DOSBase>,d0
    32d6:	      |   movea.l d0,a6
    32d8:	      |   jsr -60(a6)
    32dc:	      |   move.l d0,28(sp)
    32e0:	      |   move.l 28(sp),d0
    32e4:	      |   move.l d0,24(sp)
    32e8:	      |   move.l #94739,20(sp)
    32f0:	      |   moveq #21,d0
    32f2:	      |   move.l d0,16(sp)
    32f6:	      |   move.l 1b850 <DOSBase>,d0
    32fc:	      |   movea.l d0,a6
    32fe:	      |   move.l 24(sp),d1
    3302:	      |   move.l 20(sp),d2
    3306:	      |   move.l 16(sp),d3
    330a:	      |   jsr -48(a6)
    330e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3312:	      |   pea 17213 <PutChar+0x64f>
    3318:	      |   jsr 16274 <KPrintF>
    331e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3320:	      |   moveq #0,d0
    3322:	/-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3326:	|     \-> pea 17229 <PutChar+0x665>
    332c:	|         jsr 16274 <KPrintF>
    3332:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3334:	|         move.l 52(sp),-(sp)
    3338:	|         jsr 3528 <setGameFilePath>
    333e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3340:	|         move.l 52(sp),-(sp)
    3344:	|         jsr 4ad6 <initSludge>
    334a:	|         addq.l #4,sp
    334c:	|         tst.w d0
    334e:	|     /-- bne.s 3356 <main_sludge+0x1be>
    3350:	|     |   moveq #0,d0
    3352:	+-----|-- bra.w 351e <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3356:	|     \-> move.l 1b79c <winWidth>,d0
    335c:	|         cmpi.l #320,d0
    3362:	|     /-- bne.s 3372 <main_sludge+0x1da>
    3364:	|     |   move.l 1b7a0 <winHeight>,d0
    336a:	|     |   cmpi.l #256,d0
    3370:	|  /--|-- beq.s 3394 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3372:	|  |  \-> pea 1723a <PutChar+0x676>
    3378:	|  |      jsr 16274 <KPrintF>
    337e:	|  |      addq.l #4,sp
		winWidth = 320;
    3380:	|  |      move.l #320,1b79c <winWidth>
		winHeight = 256;
    338a:	|  |      move.l #256,1b7a0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3394:	|  \----> pea 172b7 <PutChar+0x6f3>
    339a:	|         jsr 16274 <KPrintF>
    33a0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    33a2:	|         move.l 1b7a0 <winHeight>,d0
    33a8:	|         move.l d0,d1
    33aa:	|         move.l 1b79c <winWidth>,d0
    33b0:	|         move.l d1,-(sp)
    33b2:	|         move.l d0,-(sp)
    33b4:	|         jsr c61e <resizeBackdrop>
    33ba:	|         addq.l #8,sp
    33bc:	|         tst.w d0
    33be:	|     /-- bne.s 33d4 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    33c0:	|     |   pea 172ca <PutChar+0x706>
    33c6:	|     |   jsr 16274 <KPrintF>
    33cc:	|     |   addq.l #4,sp
		return FALSE;
    33ce:	|     |   moveq #0,d0
    33d0:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    33d4:	|     \-> pea 172f0 <PutChar+0x72c>
    33da:	|         jsr 16274 <KPrintF>
    33e0:	|         addq.l #4,sp
	if (! initPeople ())
    33e2:	|         jsr 9ba2 <initPeople>
    33e8:	|         tst.w d0
    33ea:	|     /-- bne.s 3400 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    33ec:	|     |   pea 172fd <PutChar+0x739>
    33f2:	|     |   jsr 16274 <KPrintF>
    33f8:	|     |   addq.l #4,sp
		return FALSE;
    33fa:	|     |   moveq #0,d0
    33fc:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3400:	|     \-> pea 1731e <PutChar+0x75a>
    3406:	|         jsr 16274 <KPrintF>
    340c:	|         addq.l #4,sp
	if (! initFloor ())
    340e:	|         jsr 1562a <initFloor>
    3414:	|         tst.w d0
    3416:	|     /-- bne.s 342c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3418:	|     |   pea 1732a <PutChar+0x766>
    341e:	|     |   jsr 16274 <KPrintF>
    3424:	|     |   addq.l #4,sp
		
		return FALSE;
    3426:	|     |   moveq #0,d0
    3428:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    342c:	|     \-> pea 1734a <PutChar+0x786>
    3432:	|         jsr 16274 <KPrintF>
    3438:	|         addq.l #4,sp
	if (! initObjectTypes ())
    343a:	|         jsr c7da <initObjectTypes>
    3440:	|         tst.w d0
    3442:	|     /-- bne.s 3458 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3444:	|     |   pea 1735b <PutChar+0x797>
    344a:	|     |   jsr 16274 <KPrintF>
    3450:	|     |   addq.l #4,sp
		return FALSE;
    3452:	|     |   moveq #0,d0
    3454:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3458:	|     \-> pea 17381 <PutChar+0x7bd>
    345e:	|         jsr 16274 <KPrintF>
    3464:	|         addq.l #4,sp
	initSpeech ();
    3466:	|         jsr 6eea <initSpeech>
	KPrintF("Init status bar\n");
    346c:	|         pea 1738e <PutChar+0x7ca>
    3472:	|         jsr 16274 <KPrintF>
    3478:	|         addq.l #4,sp
	initStatusBar ();
    347a:	|         jsr 69ae <initStatusBar>

	KPrintF("Get numbered string\n");
    3480:	|         pea 1739f <PutChar+0x7db>
    3486:	|         jsr 16274 <KPrintF>
    348c:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    348e:	|         pea 1 <_start+0x1>
    3492:	|         jsr 5ccc <getNumberedString>
    3498:	|         addq.l #4,sp
    349a:	|         move.l d0,1b7ac <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    34a0:	|         pea 173b4 <PutChar+0x7f0>
    34a6:	|         jsr 16274 <KPrintF>
    34ac:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    34ae:	|         move.l 1b818 <noStack>,d0
    34b4:	|         pea 1 <_start+0x1>
    34b8:	|         move.l d0,-(sp)
    34ba:	|         clr.l -(sp)
    34bc:	|         clr.l -(sp)
    34be:	|         clr.l -(sp)
    34c0:	|         jsr 5b22 <startNewFunctionNum>
    34c6:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    34ca:	|         pea 173cc <PutChar+0x808>
    34d0:	|         jsr 16274 <KPrintF>
    34d6:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    34d8:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    34e0:	|         clr.l 1b7b8 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    34e6:	|     /-- bra.s 3500 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    34e8:	|  /--|-> jsr 5ab2 <sludgeDisplay>
		CsiCheckInput();
    34ee:	|  |  |   jsr c14e <CsiCheckInput>
		handleInput();
    34f4:	|  |  |   jsr 4870 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    34fa:	|  |  |   jsr 161a8 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3500:	|  |  \-> move.l 1b7b8 <weAreDoneSoQuit>,d0
    3506:	|  \----- beq.s 34e8 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3508:	|         move.l 52(sp),32(sp)
    350e:	|         move.l 1b848 <SysBase>,d0
    3514:	|         movea.l d0,a6
    3516:	|         movea.l 32(sp),a1
    351a:	|         jsr -690(a6)
}
    351e:	\-------> movem.l (sp)+,d2-d3/a6
    3522:	          lea 44(sp),sp
    3526:	          rts

00003528 <setGameFilePath>:

void setGameFilePath (char * f) {
    3528:	          lea -1104(sp),sp
    352c:	          move.l a6,-(sp)
    352e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3530:	          move.l #1112,d0
    3536:	          add.l sp,d0
    3538:	          addi.l #-1102,d0
    353e:	          move.l d0,1100(sp)
    3542:	          move.l #998,1096(sp)
    354a:	          move.l 1b850 <DOSBase>,d0
    3550:	          movea.l d0,a6
    3552:	          move.l 1100(sp),d1
    3556:	          move.l 1096(sp),d2
    355a:	          jsr -564(a6)
    355e:	          move.w d0,1094(sp)
    3562:	          move.w 1094(sp),d0
    3566:	      /-- bne.s 3576 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3568:	      |   pea 173df <PutChar+0x81b>
    356e:	      |   jsr 16274 <KPrintF>
    3574:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3576:	      \-> moveq #-1,d0
    3578:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    357c:	          clr.l 1104(sp)
    3580:	   /----- bra.s 359e <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3582:	/--|----> move.l 1104(sp),d0
    3586:	|  |      movea.l 1116(sp),a0
    358a:	|  |      adda.l d0,a0
    358c:	|  |      move.b (a0),d0
    358e:	|  |      cmpi.b #47,d0
    3592:	|  |  /-- bne.s 359a <setGameFilePath+0x72>
    3594:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    359a:	|  |  \-> addq.l #1,1104(sp)
    359e:	|  \----> move.l 1104(sp),d0
    35a2:	|         movea.l 1116(sp),a0
    35a6:	|         adda.l d0,a0
    35a8:	|         move.b (a0),d0
    35aa:	\-------- bne.s 3582 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    35ac:	          moveq #-1,d0
    35ae:	          cmp.l 1108(sp),d0
    35b2:	   /----- beq.s 362c <setGameFilePath+0x104>
		f[got] = 0;	
    35b4:	   |      move.l 1108(sp),d0
    35b8:	   |      movea.l 1116(sp),a0
    35bc:	   |      adda.l d0,a0
    35be:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    35c0:	   |      move.l 1116(sp),1090(sp)
    35c6:	   |      moveq #-2,d0
    35c8:	   |      move.l d0,1086(sp)
    35cc:	   |      move.l 1b850 <DOSBase>,d0
    35d2:	   |      movea.l d0,a6
    35d4:	   |      move.l 1090(sp),d1
    35d8:	   |      move.l 1086(sp),d2
    35dc:	   |      jsr -84(a6)
    35e0:	   |      move.l d0,1082(sp)
    35e4:	   |      move.l 1082(sp),d0
    35e8:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    35ec:	   |      move.l 1078(sp),1074(sp)
    35f2:	   |      move.l 1b850 <DOSBase>,d0
    35f8:	   |      movea.l d0,a6
    35fa:	   |      move.l 1074(sp),d1
    35fe:	   |      jsr -126(a6)
    3602:	   |      move.l d0,1070(sp)
    3606:	   |      move.l 1070(sp),d0
    360a:	   |  /-- bne.s 361e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    360c:	   |  |   move.l 1116(sp),-(sp)
    3610:	   |  |   pea 17405 <PutChar+0x841>
    3616:	   |  |   jsr 16274 <KPrintF>
    361c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    361e:	   |  \-> move.l 1108(sp),d0
    3622:	   |      movea.l 1116(sp),a0
    3626:	   |      adda.l d0,a0
    3628:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    362c:	   \----> move.l #400,1066(sp)
    3634:	          clr.l 1062(sp)
    3638:	          move.l 1b848 <SysBase>,d0
    363e:	          movea.l d0,a6
    3640:	          move.l 1066(sp),d0
    3644:	          move.l 1062(sp),d1
    3648:	          jsr -684(a6)
    364c:	          move.l d0,1058(sp)
    3650:	          move.l 1058(sp),d0
    3654:	          move.l d0,1b7b0 <gamePath>
	if (gamePath==0) {
    365a:	          move.l 1b7b0 <gamePath>,d0
    3660:	      /-- bne.s 3674 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3662:	      |   pea 17438 <PutChar+0x874>
    3668:	      |   jsr 16274 <KPrintF>
    366e:	      |   addq.l #4,sp
    3670:	   /--|-- bra.w 375c <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3674:	   |  \-> move.l 1b7b0 <gamePath>,1054(sp)
    367c:	   |      moveq #-2,d0
    367e:	   |      move.l d0,1050(sp)
    3682:	   |      move.l 1b850 <DOSBase>,d0
    3688:	   |      movea.l d0,a6
    368a:	   |      move.l 1054(sp),d1
    368e:	   |      move.l 1050(sp),d2
    3692:	   |      jsr -84(a6)
    3696:	   |      move.l d0,1046(sp)
    369a:	   |      move.l 1046(sp),d0
    369e:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    36a2:	   |      move.l 1042(sp),1038(sp)
    36a8:	   |      move.l 1b850 <DOSBase>,d0
    36ae:	   |      movea.l d0,a6
    36b0:	   |      move.l 1038(sp),d1
    36b4:	   |      jsr -126(a6)
    36b8:	   |      move.l d0,1034(sp)
    36bc:	   |      move.l 1034(sp),d0
    36c0:	   |  /-- bne.s 36d0 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    36c2:	   |  |   pea 17473 <PutChar+0x8af>
    36c8:	   |  |   jsr 16274 <KPrintF>
    36ce:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    36d0:	   |  \-> move.l #1112,d0
    36d6:	   |      add.l sp,d0
    36d8:	   |      addi.l #-1102,d0
    36de:	   |      move.l d0,1030(sp)
    36e2:	   |      moveq #-2,d0
    36e4:	   |      move.l d0,1026(sp)
    36e8:	   |      move.l 1b850 <DOSBase>,d0
    36ee:	   |      movea.l d0,a6
    36f0:	   |      move.l 1030(sp),d1
    36f4:	   |      move.l 1026(sp),d2
    36f8:	   |      jsr -84(a6)
    36fc:	   |      move.l d0,1022(sp)
    3700:	   |      move.l 1022(sp),d0
    3704:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3708:	   |      move.l 1042(sp),1018(sp)
    370e:	   |      move.l 1b850 <DOSBase>,d0
    3714:	   |      movea.l d0,a6
    3716:	   |      move.l 1018(sp),d1
    371a:	   |      jsr -126(a6)
    371e:	   |      move.l d0,1014(sp)
    3722:	   |      move.l 1014(sp),d0
    3726:	   |  /-- bne.s 373c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3728:	   |  |   moveq #10,d0
    372a:	   |  |   add.l sp,d0
    372c:	   |  |   move.l d0,-(sp)
    372e:	   |  |   pea 1749f <PutChar+0x8db>
    3734:	   |  |   jsr 16274 <KPrintF>
    373a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    373c:	   |  \-> move.l 1b7b0 <gamePath>,d0
    3742:	   +----- beq.s 375c <setGameFilePath+0x234>
    3744:	   |      move.l 1b7b0 <gamePath>,1010(sp)
    374c:	   |      move.l 1b848 <SysBase>,d0
    3752:	   |      movea.l d0,a6
    3754:	   |      movea.l 1010(sp),a1
    3758:	   |      jsr -690(a6)
}
    375c:	   \----> move.l (sp)+,d2
    375e:	          movea.l (sp)+,a6
    3760:	          lea 1104(sp),sp
    3764:	          rts

00003766 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3766:	/-------> lea -16(sp),sp
    376a:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    376c:	|         move.l 24(sp),-(sp)
    3770:	|         jsr 5894 <pauseFunction>
    3776:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3778:	|     /-- bra.s 378a <abortFunction+0x24>
    377a:	|  /--|-> moveq #24,d0
    377c:	|  |  |   add.l 24(sp),d0
    3780:	|  |  |   move.l d0,-(sp)
    3782:	|  |  |   jsr 142d8 <trimStack>
    3788:	|  |  |   addq.l #4,sp
    378a:	|  |  \-> movea.l 24(sp),a0
    378e:	|  |      move.l 24(a0),d0
    3792:	|  \----- bne.s 377a <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    3794:	|         movea.l 24(sp),a0
    3798:	|         move.l 4(a0),12(sp)
    379e:	|         move.l 1b848 <SysBase>,d0
    37a4:	|         movea.l d0,a6
    37a6:	|         movea.l 12(sp),a1
    37aa:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    37ae:	|         clr.l 16(sp)
    37b2:	|     /-- bra.s 37d2 <abortFunction+0x6c>
    37b4:	|  /--|-> movea.l 24(sp),a0
    37b8:	|  |  |   move.l 20(a0),d1
    37bc:	|  |  |   move.l 16(sp),d0
    37c0:	|  |  |   lsl.l #3,d0
    37c2:	|  |  |   add.l d1,d0
    37c4:	|  |  |   move.l d0,-(sp)
    37c6:	|  |  |   jsr 13ba2 <unlinkVar>
    37cc:	|  |  |   addq.l #4,sp
    37ce:	|  |  |   addq.l #1,16(sp)
    37d2:	|  |  \-> movea.l 24(sp),a0
    37d6:	|  |      move.l 8(a0),d0
    37da:	|  |      cmp.l 16(sp),d0
    37de:	|  \----- bgt.s 37b4 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    37e0:	|         movea.l 24(sp),a0
    37e4:	|         move.l 20(a0),8(sp)
    37ea:	|         move.l 1b848 <SysBase>,d0
    37f0:	|         movea.l d0,a6
    37f2:	|         movea.l 8(sp),a1
    37f6:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    37fa:	|         moveq #28,d0
    37fc:	|         add.l 24(sp),d0
    3800:	|         move.l d0,-(sp)
    3802:	|         jsr 13ba2 <unlinkVar>
    3808:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    380a:	|         movea.l 24(sp),a0
    380e:	|         move.l 40(a0),d0
    3812:	|     /-- beq.s 3824 <abortFunction+0xbe>
    3814:	|     |   movea.l 24(sp),a0
    3818:	|     |   move.l 40(a0),d0
    381c:	|     |   move.l d0,-(sp)
    381e:	\-----|-- jsr 3766 <abortFunction>(pc)
    3822:	      |   addq.l #4,sp
	FreeVec(fun);
    3824:	      \-> move.l 24(sp),4(sp)
    382a:	          move.l 1b848 <SysBase>,d0
    3830:	          movea.l d0,a6
    3832:	          movea.l 4(sp),a1
    3836:	          jsr -690(a6)
	fun = NULL;
    383a:	          clr.l 24(sp)
}
    383e:	          nop
    3840:	          movea.l (sp)+,a6
    3842:	          lea 16(sp),sp
    3846:	          rts

00003848 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3848:	          subq.l #8,sp
	int n = 0;
    384a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    384e:	          movea.l 20(sp),a0
    3852:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    3854:	          move.l 1b7e0 <allRunningFunctions>,(sp)
	while (fun) {
    385a:	   /----- bra.s 3888 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    385c:	/--|----> movea.l (sp),a0
    385e:	|  |      move.l (a0),d0
    3860:	|  |      cmp.l 12(sp),d0
    3864:	|  |  /-- bne.s 3882 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    3866:	|  |  |   movea.l (sp),a0
    3868:	|  |  |   move.w #1,54(a0)
			n++;
    386e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    3872:	|  |  |   move.l (sp),d0
    3874:	|  |  |   cmp.l 16(sp),d0
    3878:	|  |  +-- bne.s 3882 <cancelAFunction+0x3a>
    387a:	|  |  |   movea.l 20(sp),a0
    387e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    3882:	|  |  \-> movea.l (sp),a0
    3884:	|  |      move.l 44(a0),(sp)
	while (fun) {
    3888:	|  \----> tst.l (sp)
    388a:	\-------- bne.s 385c <cancelAFunction+0x14>
	}
	return n;
    388c:	          move.l 4(sp),d0
}
    3890:	          addq.l #8,sp
    3892:	          rts

00003894 <completeTimers>:


void completeTimers () {
    3894:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3896:	          move.l 1b7e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    389c:	   /----- bra.s 38b2 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    389e:	/--|----> movea.l (sp),a0
    38a0:	|  |      move.b 56(a0),d0
    38a4:	|  |  /-- bne.s 38ac <completeTimers+0x18>
    38a6:	|  |  |   movea.l (sp),a0
    38a8:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    38ac:	|  |  \-> movea.l (sp),a0
    38ae:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    38b2:	|  \----> tst.l (sp)
    38b4:	\-------- bne.s 389e <completeTimers+0xa>
	}
}
    38b6:	          nop
    38b8:	          nop
    38ba:	          addq.l #4,sp
    38bc:	          rts

000038be <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    38be:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    38c2:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    38c8:	                                                             movea.l 80(sp),a0
    38cc:	                                                             move.w 54(a0),d0
    38d0:	/----------------------------------------------------------- beq.w 475e <continueFunction+0xea0>
		abortFunction (fun);
    38d4:	|                                                            move.l 80(sp),-(sp)
    38d8:	|                                                            jsr 3766 <abortFunction>
    38de:	|                                                            addq.l #4,sp
		return TRUE;
    38e0:	|                                                            moveq #1,d0
    38e2:	|  /-------------------------------------------------------- bra.w 4768 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    38e6:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    38ec:	|  |  |                                                      movea.l 80(sp),a0
    38f0:	|  |  |                                                      move.l 4(a0),d1
    38f4:	|  |  |                                                      movea.l 80(sp),a0
    38f8:	|  |  |                                                      move.l 36(a0),d0
    38fc:	|  |  |                                                      lsl.l #3,d0
    38fe:	|  |  |                                                      movea.l d1,a0
    3900:	|  |  |                                                      adda.l d0,a0
    3902:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    3908:	|  |  |                                                      movea.l 80(sp),a0
    390c:	|  |  |                                                      move.l 4(a0),d1
    3910:	|  |  |                                                      movea.l 80(sp),a0
    3914:	|  |  |                                                      move.l 36(a0),d0
    3918:	|  |  |                                                      lsl.l #3,d0
    391a:	|  |  |                                                      movea.l d1,a0
    391c:	|  |  |                                                      adda.l d0,a0
    391e:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    3922:	|  |  |                                                      moveq #41,d0
    3924:	|  |  |                                                      cmp.l 64(sp),d0
    3928:	|  |  |  /-------------------------------------------------- bcs.w 4712 <continueFunction+0xe54>
    392c:	|  |  |  |                                                   move.l 64(sp),d0
    3930:	|  |  |  |                                                   add.l d0,d0
    3932:	|  |  |  |                                                   movea.l d0,a0
    3934:	|  |  |  |                                                   adda.l #14656,a0
    393a:	|  |  |  |                                                   move.w (a0),d0
    393c:	|  |  |  |                                                   jmp (3940 <continueFunction+0x82>,pc,d0.w)
    3940:	|  |  |  |                                                   bset d6,(a2)
    3942:	|  |  |  |                                                   ori.w #2670,(a4)
    3946:	|  |  |  |                                                   eori.w #2416,d6
    394a:	|  |  |  |                                                   bchg d4,d2
    394c:	|  |  |  |                                                   bclr d4,(a4)+
    394e:	|  |  |  |                                                   andi.l #181013194,d4
    3954:	|  |  |  |                                                   .short 0x0aca
    3956:	|  |  |  |                                                   .short 0x0aca
    3958:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    3960:	|  |  |  |                                                   .short 0x0aca
    3962:	|  |  |  |                                                   andi.w #906,-(a4)
    3966:	|  |  |  |                                                   bchg d1,196(a2)
    396a:	|  |  |  |                                                   bset d1,580(a4)
    396e:	|  |  |  |                                                   bclr d1,2576(a2)
    3972:	|  |  |  |                                                   andi.b #-56,2762(a2)
    3978:	|  |  |  |                                                   .short 0x0aca
    397a:	|  |  |  |                                                   eori.l #63572682,d0
    3980:	|  |  |  |                                                   .short 0x0aca
    3982:	|  |  |  |                                                   bchg d3,-(a2)
    3984:	|  |  |  |                                                   bchg #-36,(a2)
    3988:	|  |  |  |                                                   .short 0x08cc
    398a:	|  |  |  |                                                   addi.b #14,1038(a0)
    3990:	|  |  |  |                                                   .short 0x040e
    3992:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    3996:	|  |  |  |                                                   ori.w #8232,(a0)
    399a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    39a0:	|  |  |  |                                                   ori.w #12136,(a0)
    39a4:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    39aa:	|  |  |  |                                                   ori.w #12328,(a0)
    39ae:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    39b4:	|  |  |  |                                                   add.l 44(sp),d1
    39b8:	|  |  |  |                                                   moveq #28,d0
    39ba:	|  |  |  |                                                   add.l 80(sp),d0
    39be:	|  |  |  |                                                   move.l d1,-(sp)
    39c0:	|  |  |  |                                                   move.l d0,-(sp)
    39c2:	|  |  |  |                                                   jsr 13e0e <copyVariable>
    39c8:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    39ca:	|  |  |  |                                                   move.l 80(sp),-(sp)
    39ce:	|  |  |  |                                                   jsr 476e <finishFunction>
    39d4:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    39d6:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    39dc:	|  |  |  |                                                   move.l 80(sp),-(sp)
    39e0:	|  |  |  |                                                   jsr 58d6 <restartFunction>
    39e6:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    39e8:	|  |  |  |  /----------------------------------------------- bra.w 4746 <continueFunction+0xe88>
				finishFunction (fun);
    39ec:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    39f0:	|  |  |  |  |                                                jsr 476e <finishFunction>
    39f6:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    39f8:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    39fc:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    3a00:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    3a04:	|  |  |  |  |                                                movea.l 80(sp),a0
    3a08:	|  |  |  |  |                                                move.l 28(a0),d0
    3a0c:	|  |  |  |  |                                                moveq #2,d1
    3a0e:	|  |  |  |  |                                                cmp.l d0,d1
    3a10:	|  |  |  |  |                                            /-- beq.s 3a1c <continueFunction+0x15e>
    3a12:	|  |  |  |  |                                            |   moveq #4,d1
    3a14:	|  |  |  |  |                                            |   cmp.l d0,d1
    3a16:	|  |  |  |  |                                         /--|-- beq.s 3a6a <continueFunction+0x1ac>
    3a18:	|  |  |  |  |                                /--------|--|-- bra.w 3b52 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    3a1c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    3a20:	|  |  |  |  |                                |        |      jsr 5894 <pauseFunction>
    3a26:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3a28:	|  |  |  |  |                                |        |      moveq #24,d0
    3a2a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    3a2e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    3a32:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3a36:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    3a3a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    3a3c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    3a40:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    3a44:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3a46:	|  |  |  |  |                                |        |      jsr 5b22 <startNewFunctionNum>
    3a4c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    3a50:	|  |  |  |  |                                |        |      tst.l d0
    3a52:	|  |  |  |  |                                |        |  /-- bne.s 3a5a <continueFunction+0x19c>
    3a54:	|  |  |  |  |                                |        |  |   clr.w d0
    3a56:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4768 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    3a5a:	|  |  |  |  |                                |        |  \-> move.l 1b7e0 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    3a62:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    3a66:	|  |  |  |  |                                |  /-----|----- bra.w 3b66 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    3a6a:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    3a6e:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    3a72:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    3a76:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    3a7a:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    3a7c:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    3a7e:	|  |  |  |  |                                |  |            jsr 12636 <callBuiltIn>
    3a84:	|  |  |  |  |                                |  |            lea 12(sp),sp
    3a88:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    3a8c:	|  |  |  |  |                                |  |            moveq #5,d0
    3a8e:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    3a92:	|  |  |  |  |                                |  |  /-------- bcs.w 3b4e <continueFunction+0x290>
    3a96:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    3a9a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    3a9c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    3a9e:	|  |  |  |  |                                |  |  |         adda.l #15018,a0
    3aa4:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    3aa6:	|  |  |  |  |                                |  |  |         jmp (3aaa <continueFunction+0x1ec>,pc,d0.w)
    3aaa:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    3ab0:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    3ab4:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    3aba:	|  |  |  |  |                                |  |  |         .short 0x75a7
    3abc:	|  |  |  |  |                                |  |  |         jsr 16274 <KPrintF>
    3ac2:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    3ac4:	|  |  |  |  |                                |  |  |         clr.w d0
    3ac6:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4768 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    3aca:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    3ace:	|  |  |  |  |                                |  |  |         jsr 5894 <pauseFunction>
    3ad4:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    3ad6:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    3ada:	|  |  |  |  |                                |  |  |  /----- bra.s 3b50 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    3adc:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    3ae0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    3ae4:	|  |  |  |  |                                |  |  |  +----- bra.s 3b50 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    3ae6:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    3aea:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    3af0:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    3af2:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    3af6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3afa:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3afe:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3b00:	|  |  |  |  |                                |  |  |  |      jsr 14246 <setVariable>
    3b06:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    3b0a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    3b0e:	|  |  |  |  |                                |  |  |  |      jsr 5894 <pauseFunction>
    3b14:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3b16:	|  |  |  |  |                                |  |  |  |      move.l 1b818 <noStack>,d1
    3b1c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    3b20:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3b22:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3b24:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3b28:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3b2a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3b2c:	|  |  |  |  |                                |  |  |  |      jsr 5b22 <startNewFunctionNum>
    3b32:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3b36:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3b38:	|  |  |  |  |                                |  |  |  |  /-- bne.s 3b40 <continueFunction+0x282>
    3b3a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    3b3c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4768 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    3b40:	|  |  |  |  |                                |  |  |  |  \-> move.l 1b7e0 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3b48:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    3b4c:	|  |  |  |  |                                |  |  |  +----- bra.s 3b50 <continueFunction+0x292>

						default:
						break;
    3b4e:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    3b50:	|  |  |  |  |                                |  +-----\----X bra.s 3b66 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    3b52:	|  |  |  |  |                                \--|----------> pea 175f2 <PutChar+0xa2e>
    3b58:	|  |  |  |  |                                   |            jsr 16274 <KPrintF>
    3b5e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    3b60:	|  |  |  |  |                                   |            clr.w d0
    3b62:	|  +--|--|--|-----------------------------------|----------- bra.w 4768 <continueFunction+0xeaa>
			}
			break;
    3b66:	|  |  |  |  +-----------------------------------\----------X bra.w 4746 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    3b6a:	|  |  |  |  |                                                moveq #28,d0
    3b6c:	|  |  |  |  |                                                add.l 80(sp),d0
    3b70:	|  |  |  |  |                                                clr.l -(sp)
    3b72:	|  |  |  |  |                                                clr.l -(sp)
    3b74:	|  |  |  |  |                                                move.l d0,-(sp)
    3b76:	|  |  |  |  |                                                jsr 14246 <setVariable>
    3b7c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3b80:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    3b84:	|  |  |  |  |                                                move.l 68(sp),d1
    3b88:	|  |  |  |  |                                                moveq #28,d0
    3b8a:	|  |  |  |  |                                                add.l 80(sp),d0
    3b8e:	|  |  |  |  |                                                move.l d1,-(sp)
    3b90:	|  |  |  |  |                                                pea 5 <_start+0x5>
    3b94:	|  |  |  |  |                                                move.l d0,-(sp)
    3b96:	|  |  |  |  |                                                jsr 14246 <setVariable>
    3b9c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3ba0:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3ba4:	|  |  |  |  |                                                move.l 68(sp),d1
    3ba8:	|  |  |  |  |                                                moveq #28,d0
    3baa:	|  |  |  |  |                                                add.l 80(sp),d0
    3bae:	|  |  |  |  |                                                move.l d1,-(sp)
    3bb0:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3bb4:	|  |  |  |  |                                                move.l d0,-(sp)
    3bb6:	|  |  |  |  |                                                jsr 14246 <setVariable>
    3bbc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3bc0:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3bc4:	|  |  |  |  |                                                moveq #28,d0
    3bc6:	|  |  |  |  |                                                add.l 80(sp),d0
    3bca:	|  |  |  |  |                                                movea.l 80(sp),a0
    3bce:	|  |  |  |  |                                                movea.l 20(a0),a0
    3bd2:	|  |  |  |  |                                                move.l 68(sp),d1
    3bd6:	|  |  |  |  |                                                lsl.l #3,d1
    3bd8:	|  |  |  |  |                                                add.l a0,d1
    3bda:	|  |  |  |  |                                                move.l d0,-(sp)
    3bdc:	|  |  |  |  |                                                move.l d1,-(sp)
    3bde:	|  |  |  |  |                                                jsr 13e0e <copyVariable>
    3be4:	|  |  |  |  |                                                addq.l #8,sp
    3be6:	|  |  |  |  |                                                tst.w d0
    3be8:	|  |  |  |  |  /-------------------------------------------- bne.w 4724 <continueFunction+0xe66>
    3bec:	|  |  |  |  |  |                                             clr.w d0
    3bee:	|  +--|--|--|--|-------------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3bf2:	|  |  |  |  |  |                                             moveq #28,d0
    3bf4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bf8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3bfa:	|  |  |  |  |  |                                             jsr 13e94 <getBoolean>
    3c00:	|  |  |  |  |  |                                             addq.l #4,sp
    3c02:	|  |  |  |  |  |                                             tst.w d0
    3c04:	|  |  |  |  |  |                                      /----- beq.s 3c20 <continueFunction+0x362>
    3c06:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3c0a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3c0e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3c10:	|  |  |  |  |  |                                      |      jsr 13e94 <getBoolean>
    3c16:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3c18:	|  |  |  |  |  |                                      |      tst.w d0
    3c1a:	|  |  |  |  |  |                                      +----- beq.s 3c20 <continueFunction+0x362>
    3c1c:	|  |  |  |  |  |                                      |      moveq #1,d0
    3c1e:	|  |  |  |  |  |                                      |  /-- bra.s 3c22 <continueFunction+0x364>
    3c20:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3c22:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3c24:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3c28:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c2a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3c2e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3c30:	|  |  |  |  |  |                                             jsr 14246 <setVariable>
    3c36:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3c3a:	|  |  |  |  |  |                                             moveq #24,d0
    3c3c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c40:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c42:	|  |  |  |  |  |                                             jsr 142d8 <trimStack>
    3c48:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3c4a:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3c4e:	|  |  |  |  |  |                                             moveq #28,d0
    3c50:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c54:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c56:	|  |  |  |  |  |                                             jsr 13e94 <getBoolean>
    3c5c:	|  |  |  |  |  |                                             addq.l #4,sp
    3c5e:	|  |  |  |  |  |                                             tst.w d0
    3c60:	|  |  |  |  |  |                                         /-- bne.s 3c78 <continueFunction+0x3ba>
    3c62:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3c66:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3c6a:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3c6c:	|  |  |  |  |  |                                         |   jsr 13e94 <getBoolean>
    3c72:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3c74:	|  |  |  |  |  |                                         |   tst.w d0
    3c76:	|  |  |  |  |  |                                      /--|-- beq.s 3c7c <continueFunction+0x3be>
    3c78:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3c7a:	|  |  |  |  |  |                                      |  /-- bra.s 3c7e <continueFunction+0x3c0>
    3c7c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3c7e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3c80:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3c84:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c86:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3c8a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3c8c:	|  |  |  |  |  |                                             jsr 14246 <setVariable>
    3c92:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3c96:	|  |  |  |  |  |                                             moveq #24,d0
    3c98:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c9c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c9e:	|  |  |  |  |  |                                             jsr 142d8 <trimStack>
    3ca4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3ca6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3caa:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cae:	|  |  |  |  |  |                                             moveq #28,d0
    3cb0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cb4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cb6:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3cba:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cbc:	|  |  |  |  |  |                                             jsr 14246 <setVariable>
    3cc2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3cc6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3cca:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cce:	|  |  |  |  |  |                                             moveq #28,d0
    3cd0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cd4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cd6:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3cda:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cdc:	|  |  |  |  |  |                                             jsr 14246 <setVariable>
    3ce2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3ce6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3cea:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cee:	|  |  |  |  |  |                                             moveq #28,d0
    3cf0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cf4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cf6:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3cfa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cfc:	|  |  |  |  |  |                                             jsr 14246 <setVariable>
    3d02:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3d06:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3d0a:	|  |  |  |  |  |                                             move.l 1b7a8 <dialogValue>,d0
    3d10:	|  |  |  |  |  |                                             moveq #1,d1
    3d12:	|  |  |  |  |  |                                             cmp.l d0,d1
    3d14:	|  |  |  |  |  |  /----------------------------------------- beq.w 4728 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    3d18:	|  |  |  |  |  |  |                                          pea 17607 <PutChar+0xa43>
    3d1e:	|  |  |  |  |  |  |                                          jsr 16274 <KPrintF>
    3d24:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3d26:	|  |  |  |  |  |  |                                          clr.w d0
    3d28:	|  +--|--|--|--|--|----------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3d2c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3d30:	|  |  |  |  |  |  |                                          moveq #28,d0
    3d32:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3d36:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3d38:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3d3a:	|  |  |  |  |  |  |                                          jsr 139d8 <loadStringToVar>
    3d40:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3d42:	|  |  |  |  |  |  |                                          tst.w d0
    3d44:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 472c <continueFunction+0xe6e>
					return FALSE;
    3d48:	|  |  |  |  |  |  |  |                                       clr.w d0
    3d4a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3d4e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3d52:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3d56:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3d58:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3d5a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3d5c:	|  |  |  |  |  |  |  |                                /----- beq.s 3dba <continueFunction+0x4fc>
    3d5e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3d60:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3d62:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3f4e <continueFunction+0x690>
    3d66:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3d68:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3d74 <continueFunction+0x4b6>
    3d6a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3d6c:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3d6e:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3dba <continueFunction+0x4fc>
    3d70:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3f4e <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3d74:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3d76:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3d7a:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3da6 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3d7c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3d7e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3d82:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3d84:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3d86:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3d88:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14246 <setVariable>
    3d8e:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3d92:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3d94:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3d98:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3d9a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 142d8 <trimStack>
    3da0:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3da2:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3f64 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3da6:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 17648 <PutChar+0xa84>
    3dac:	|  |  |  |  |  |  |  |              |  |              |      jsr 16274 <KPrintF>
    3db2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3db4:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3db6:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4768 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3dba:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3dbe:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3dc2:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3dc6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3dc8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3dde <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    3dca:	|  |  |  |  |  |  |  |              |  |                 |   pea 17684 <PutChar+0xac0>
    3dd0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16274 <KPrintF>
    3dd6:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3dd8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3dda:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3dde:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3de0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3de4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3de6:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3dea:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3dee:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3df0:	|  |  |  |  |  |  |  |              |  |                     jsr 13954 <getValueType>
    3df6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3dfa:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3dfc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e04 <continueFunction+0x546>
    3dfe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3e00:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3e04:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3e08:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3e0c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3e0e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3e10:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3e12:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e34 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3e14:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3e18:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3e1a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3e1e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3e22:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3e26:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3e28:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3e2a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 135de <fastArrayGetByIndex>
    3e30:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3e32:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3e54 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3e34:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3e38:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3e3a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3e3e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3e42:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3e46:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3e48:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3e4a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3e4c:	|  |  |  |  |  |  |  |              |  |              |      jsr 14268 <stackGetByIndex>
    3e52:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3e54:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3e58:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3e5a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3e5e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3e60:	|  |  |  |  |  |  |  |              |  |                     jsr 142d8 <trimStack>
    3e66:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3e68:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3e6c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e88 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3e6e:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3e70:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3e74:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3e76:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3e78:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3e7a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14246 <setVariable>
    3e80:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3e84:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3f62 <continueFunction+0x6a4>
    3e88:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3e8a:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3e8e:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3e9c <continueFunction+0x5de>
    3e90:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3e92:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3e96:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3ee6 <continueFunction+0x628>
    3e98:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3f2e <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3e9c:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3ea0:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3ea4:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3ea8:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3eaa:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 13954 <getValueType>
    3eb0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3eb4:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3eb6:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3ebe <continueFunction+0x600>
    3eb8:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3eba:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3f48 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3ebe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3ec0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3ec2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3ec6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3ec8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3ecc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3ece:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14246 <setVariable>
    3ed4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3ed8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3eda:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3edc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3ee0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3ee4:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3f4c <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3ee6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3eea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3eee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3ef2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3ef4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13954 <getValueType>
    3efa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3efe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3f00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3f06 <continueFunction+0x648>
    3f02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3f04:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3f48 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3f06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3f08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3f0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3f0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3f10:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3f14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3f16:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14246 <setVariable>
    3f1c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3f20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3f22:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3f24:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3f28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3f2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3f4c <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3f2e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3f30:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3f34:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3f36:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3f3a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13e0e <copyVariable>
    3f40:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3f42:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3f44:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3f62 <continueFunction+0x6a4>
    3f46:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3f48:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4768 <continueFunction+0xeaa>
				break;
    3f4c:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3f62 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3f4e:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 176a2 <PutChar+0xade>
    3f54:	|  |  |  |  |  |  |  |                 |  |                  jsr 16274 <KPrintF>
    3f5a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3f5c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3f5e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4768 <continueFunction+0xeaa>
				break;
    3f62:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3f64:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4746 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3f68:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f6c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3f70:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3f72:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3f74:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3f76:	|  |  |  |  |  |  |  |                                   /-- beq.s 3f84 <continueFunction+0x6c6>
    3f78:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3f7a:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3f7c:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4030 <continueFunction+0x772>
    3f80:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 408e <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3f84:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3f88:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3f8c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3f90:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3f92:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3fa8 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    3f94:	|  |  |  |  |  |  |  |                             |  |  |   pea 17684 <PutChar+0xac0>
    3f9a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16274 <KPrintF>
    3fa0:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3fa2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3fa4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3fa8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3faa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3fae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3fb0:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3fb4:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3fb8:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3fba:	|  |  |  |  |  |  |  |                             |  |      jsr 13954 <getValueType>
    3fc0:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3fc4:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3fc6:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3fce <continueFunction+0x710>
    3fc8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3fca:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3fce:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3fd2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3fd6:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3fda:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3fdc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3fe0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3fe2:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3fe6:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3fea:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3fee:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3ff0:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3ff2:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3ff4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3ff6:	|  |  |  |  |  |  |  |                             |  |      jsr 5ade <stackSetByIndex>
    3ffc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4000:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4002:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 400a <continueFunction+0x74c>
						return FALSE;
    4004:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4006:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    400a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    400c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4010:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4012:	|  |  |  |  |  |  |  |                             |  |      jsr 142d8 <trimStack>
    4018:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    401a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    401c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4020:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4022:	|  |  |  |  |  |  |  |                             |  |      jsr 142d8 <trimStack>
    4028:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    402a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    402c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4746 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4030:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4032:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4036:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4038:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    403c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4040:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4042:	|  |  |  |  |  |  |  |                             |         jsr 13954 <getValueType>
    4048:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    404c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    404e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4056 <continueFunction+0x798>
    4050:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4052:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4768 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4056:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    405a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    405c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4060:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4064:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4068:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    406a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    406c:	|  |  |  |  |  |  |  |                             |         jsr 135de <fastArrayGetByIndex>
    4072:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4074:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4078:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4088 <continueFunction+0x7ca>
    407a:	|  |  |  |  |  |  |  |                             |     |   pea 176c6 <PutChar+0xb02>
    4080:	|  |  |  |  |  |  |  |                             |     |   jsr 16274 <KPrintF>
    4086:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4088:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    408a:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4768 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    408e:	|  |  |  |  |  |  |  |                             \-------> pea 176a2 <PutChar+0xade>
    4094:	|  |  |  |  |  |  |  |                                       jsr 16274 <KPrintF>
    409a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    409c:	|  |  |  |  |  |  |  |                                       clr.w d0
    409e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    40a2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40a6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    40aa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40ae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40b0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    40b2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40b4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40b8:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    40bc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    40be:	|  |  |  |  |  |  |  |                                       jsr 13954 <getValueType>
    40c4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    40c8:	|  |  |  |  |  |  |  |                                       tst.w d0
    40ca:	|  |  |  |  |  |  |  |                                   /-- bne.s 40d2 <continueFunction+0x814>
    40cc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    40ce:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    40d2:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    40d6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40d8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40e4:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    40ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    40ee:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    40f2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    40f4:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    40f6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40fa:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    40fe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4102:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4104:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4106:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4108:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    410c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    410e:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    4114:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4118:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    411c:	|  |  |  |  |  |  |  |                                       move.l 1b7f6 <globalVars>,d1
    4122:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4126:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4128:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    412a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    412c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4130:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4134:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4136:	|  |  |  |  |  |  |  |                                       jsr 13954 <getValueType>
    413c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4140:	|  |  |  |  |  |  |  |                                       tst.w d0
    4142:	|  |  |  |  |  |  |  |                                   /-- bne.s 414a <continueFunction+0x88c>
    4144:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4146:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    414a:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    414e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4150:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4154:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4156:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    415a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    415c:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    4162:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4166:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    416a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    416c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    416e:	|  |  |  |  |  |  |  |                                       movea.l 1b7f6 <globalVars>,a0
    4174:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4178:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    417a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    417c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    417e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4182:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4184:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    418a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    418e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4192:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4196:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    419a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    419e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    41a0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    41a2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41a4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41a8:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    41ac:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    41ae:	|  |  |  |  |  |  |  |                                       jsr 13954 <getValueType>
    41b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    41b8:	|  |  |  |  |  |  |  |                                       tst.w d0
    41ba:	|  |  |  |  |  |  |  |                                   /-- bne.s 41c2 <continueFunction+0x904>
    41bc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    41be:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    41c2:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    41c6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    41c8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    41cc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    41ce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41d2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41d4:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    41da:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    41de:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    41e2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    41e4:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    41e6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    41ea:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    41ee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    41f2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    41f4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    41f6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    41f8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41fe:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    4204:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4208:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    420c:	|  |  |  |  |  |  |  |                                       move.l 1b7f6 <globalVars>,d1
    4212:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4216:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4218:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    421a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    421c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4220:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4224:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4226:	|  |  |  |  |  |  |  |                                       jsr 13954 <getValueType>
    422c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4230:	|  |  |  |  |  |  |  |                                       tst.w d0
    4232:	|  |  |  |  |  |  |  |                                   /-- bne.s 423a <continueFunction+0x97c>
    4234:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4236:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    423a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    423e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4240:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4244:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4246:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    424a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    424c:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    4252:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4256:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    425a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    425c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    425e:	|  |  |  |  |  |  |  |                                       movea.l 1b7f6 <globalVars>,a0
    4264:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4268:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    426a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    426c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    426e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4272:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4274:	|  |  |  |  |  |  |  |                                       jsr 14246 <setVariable>
    427a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    427e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4282:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4286:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    428a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    428e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4290:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4292:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4294:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4298:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    429a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    429c:	|  |  |  |  |  |  |  |                                       jsr 13e0e <copyVariable>
    42a2:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    42a4:	|  |  |  |  |  |  |  |                                       tst.w d0
    42a6:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4730 <continueFunction+0xe72>
    42aa:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    42ac:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    42b0:	|  |  |  |  |  |  |  |  |                                    move.l 1b7f6 <globalVars>,d1
    42b6:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    42ba:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    42bc:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    42be:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    42c0:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    42c4:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    42c6:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    42c8:	|  |  |  |  |  |  |  |  |                                    jsr 13e0e <copyVariable>
    42ce:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    42d0:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    42d2:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4734 <continueFunction+0xe76>
    42d6:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    42d8:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    42dc:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    42de:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    42e2:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1b7f6 <globalVars>,a0
    42e8:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    42ec:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    42ee:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    42f0:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    42f2:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    42f4:	|  |  |  |  |  |  |  |  |  |                                 jsr 13e0e <copyVariable>
    42fa:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    42fc:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    42fe:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4738 <continueFunction+0xe7a>
    4302:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4304:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4308:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    430a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    430e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4310:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4314:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4316:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4318:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13190 <addVarToStack>
    431e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4320:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4322:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 473c <continueFunction+0xe7e>
    4326:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4328:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    432c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    432e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4332:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4334:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4338:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    433a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    433c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13216 <addVarToStackQuick>
    4342:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4344:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4346:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 4740 <continueFunction+0xe82>
    434a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    434c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4350:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4352:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4356:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4358:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13e94 <getBoolean>
    435e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4360:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4364:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4366:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4368:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    436a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    436c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4370:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4372:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4376:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4378:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14246 <setVariable>
    437e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4382:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4386:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4388:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    438c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    438e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13e94 <getBoolean>
    4394:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4396:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4398:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4744 <continueFunction+0xe86>
				advanceNow = FALSE;
    439c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    43a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4744 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    43ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    43b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    43b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    43bc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    43c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    43c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    43c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    43c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    43cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    43d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    43d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13954 <getValueType>
    43d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    43dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    43de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 43e6 <continueFunction+0xb28>
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    43e2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    43e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    43ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    43ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    43ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    43f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    43f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    43f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    43fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14246 <setVariable>
    4402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4406:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4746 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    440a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    440e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 46fc <continueFunction+0xe3e>
    4416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    441c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4498 <continueFunction+0xbda>
    441e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 44e2 <continueFunction+0xc24>
    4428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    442a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    442e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 443c <continueFunction+0xb7e>
    4430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 446a <continueFunction+0xbac>
    4438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 44e2 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    443c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    443e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    444a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    444e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1328a <addVariablesInSecond>
    4454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    445c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    445e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 142d8 <trimStack>
    4464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4710 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    446a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    446c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    447a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    447c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13348 <compareVariablesInSecond>
    4482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    448a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    448c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 142d8 <trimStack>
    4492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4710 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    449a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    449e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    44a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    44a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    44aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13348 <compareVariablesInSecond>
    44b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    44b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    44b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    44b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    44ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 142d8 <trimStack>
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    44c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    44ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    44ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    44d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    44d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    44de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4710 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    44e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    44ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    44ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    44f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    44f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    44f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13954 <getValueType>
    44fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 450a <continueFunction+0xc4c>
    4504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4506:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4768 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    450c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    451a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    451c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13954 <getValueType>
    4522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4530 <continueFunction+0xc72>
    452a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    452c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4768 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 142d8 <trimStack>
    453e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    454a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 470e <continueFunction+0xe50>
    454e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    4550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17758,a0
    4558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    455a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (455e <continueFunction+0xca0>,pc,d0.w)
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    456c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    456e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    457e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    458e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    459a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16aae <__mulsi3>
    45a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    45a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    45a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    45b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    45c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    45c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    45c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    45ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    45de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    45e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    45ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    45ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16b5a <__modsi3>
    45f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    45fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    45fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    460a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    4610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    461c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16b2c <__divsi3>
    462a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    462c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    462e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    463a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    463c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    4642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    464a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    464e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    465a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    465c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    465e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    466a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    4670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    467c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    468a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    468c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    469e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    46a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    46a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    46ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    46ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    46b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    46b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    46b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    46b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    46b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    46bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    46be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    46c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    46c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    46ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    46d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    46d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    46d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    46da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    46dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    46de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    46e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    46e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    46e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    46e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    46ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    46ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    46f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14246 <setVariable>
    46f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    46fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 176e7 <PutChar+0xb23>
    4702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16274 <KPrintF>
    4708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    470a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    470c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4768 <continueFunction+0xeaa>
						break;
    470e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4710:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4746 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4712:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 176ff <PutChar+0xb3b>
    4718:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16274 <KPrintF>
    471e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4720:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4722:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4768 <continueFunction+0xeaa>
			break;
    4724:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4726:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4728:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    472a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    472c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    472e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4730:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4732:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4734:	|  |  |     |              \--|--|--|--|-------------------> nop
    4736:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4738:	|  |  |     |                 \--|--|--|-------------------> nop
    473a:	|  |  |     +--------------------|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    473c:	|  |  |     |                    \--|--|-------------------> nop
    473e:	|  |  |     +-----------------------|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4740:	|  |  |     |                       \--|-------------------> nop
    4742:	|  |  |     +--------------------------|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4744:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4746:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    474a:	+--|--|----------------------------------------------------- beq.s 475e <continueFunction+0xea0>
    474c:	|  |  |                                                      movea.l 80(sp),a0
    4750:	|  |  |                                                      move.l 36(a0),d0
    4754:	|  |  |                                                      addq.l #1,d0
    4756:	|  |  |                                                      movea.l 80(sp),a0
    475a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    475e:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4762:	   |  \----------------------------------------------------- bne.w 38e6 <continueFunction+0x28>

	}
	return TRUE;
    4766:	   |                                                         moveq #1,d0
}
    4768:	   \-------------------------------------------------------> lea 76(sp),sp
    476c:	                                                             rts

0000476e <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    476e:	          lea -16(sp),sp
    4772:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4774:	          move.l 24(sp),-(sp)
    4778:	          jsr 5894 <pauseFunction>
    477e:	          addq.l #4,sp
	if (fun -> stack) 
    4780:	          movea.l 24(sp),a0
    4784:	          move.l 24(a0),d0
    4788:	      /-- beq.s 479c <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    478a:	      |   pea 1772b <PutChar+0xb67>
    4790:	      |   jsr 16274 <KPrintF>
    4796:	      |   addq.l #4,sp
		return;
    4798:	/-----|-- bra.w 4836 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    479c:	|     \-> movea.l 24(sp),a0
    47a0:	|         move.l 4(a0),12(sp)
    47a6:	|         move.l 1b848 <SysBase>,d0
    47ac:	|         movea.l d0,a6
    47ae:	|         movea.l 12(sp),a1
    47b2:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    47b6:	|         clr.l 16(sp)
    47ba:	|     /-- bra.s 47da <finishFunction+0x6c>
    47bc:	|  /--|-> movea.l 24(sp),a0
    47c0:	|  |  |   move.l 20(a0),d1
    47c4:	|  |  |   move.l 16(sp),d0
    47c8:	|  |  |   lsl.l #3,d0
    47ca:	|  |  |   add.l d1,d0
    47cc:	|  |  |   move.l d0,-(sp)
    47ce:	|  |  |   jsr 13ba2 <unlinkVar>
    47d4:	|  |  |   addq.l #4,sp
    47d6:	|  |  |   addq.l #1,16(sp)
    47da:	|  |  \-> movea.l 24(sp),a0
    47de:	|  |      move.l 8(a0),d0
    47e2:	|  |      cmp.l 16(sp),d0
    47e6:	|  \----- bgt.s 47bc <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    47e8:	|         movea.l 24(sp),a0
    47ec:	|         move.l 8(a0),d0
    47f0:	|     /-- ble.s 480c <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    47f2:	|     |   movea.l 24(sp),a0
    47f6:	|     |   move.l 20(a0),8(sp)
    47fc:	|     |   move.l 1b848 <SysBase>,d0
    4802:	|     |   movea.l d0,a6
    4804:	|     |   movea.l 8(sp),a1
    4808:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    480c:	|     \-> moveq #28,d0
    480e:	|         add.l 24(sp),d0
    4812:	|         move.l d0,-(sp)
    4814:	|         jsr 13ba2 <unlinkVar>
    481a:	|         addq.l #4,sp
	FreeVec(fun);
    481c:	|         move.l 24(sp),4(sp)
    4822:	|         move.l 1b848 <SysBase>,d0
    4828:	|         movea.l d0,a6
    482a:	|         movea.l 4(sp),a1
    482e:	|         jsr -690(a6)
	fun = NULL;
    4832:	|         clr.l 24(sp)
}
    4836:	\-------> movea.l (sp)+,a6
    4838:	          lea 16(sp),sp
    483c:	          rts

0000483e <freezeSubs>:

void freezeSubs () {
    483e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4840:	          move.l 1b7e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4846:	   /----- bra.s 4864 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    4848:	/--|----> movea.l (sp),a0
    484a:	|  |      move.w 52(a0),d0
    484e:	|  |  /-- bne.s 485e <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    4850:	|  |  |   movea.l (sp),a0
    4852:	|  |  |   move.b 56(a0),d0
    4856:	|  |  |   addq.b #1,d0
    4858:	|  |  |   movea.l (sp),a0
    485a:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    485e:	|  |  \-> movea.l (sp),a0
    4860:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4864:	|  \----> tst.l (sp)
    4866:	\-------- bne.s 4848 <freezeSubs+0xa>
	}
}
    4868:	          nop
    486a:	          nop
    486c:	          addq.l #4,sp
    486e:	          rts

00004870 <handleInput>:

BOOL handleInput () {
    4870:	             lea -16(sp),sp
    4874:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    4876:	             move.l 1b9b4 <overRegion>,d0
    487c:	         /-- bne.s 4884 <handleInput+0x14>
    487e:	         |   jsr 14a10 <getOverRegion>

	if (input.justMoved) {
    4884:	         \-> move.w 1b7fe <input+0x4>,d0
    488a:	         /-- beq.s 48c8 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    488c:	         |   movea.l 1b1c2 <currentEvents>,a0
    4892:	         |   move.l 16(a0),d0
    4896:	         +-- beq.s 48c8 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4898:	         |   move.l 1b818 <noStack>,d1
    489e:	         |   movea.l 1b1c2 <currentEvents>,a0
    48a4:	         |   move.l 16(a0),d0
    48a8:	         |   pea 1 <_start+0x1>
    48ac:	         |   move.l d1,-(sp)
    48ae:	         |   clr.l -(sp)
    48b0:	         |   clr.l -(sp)
    48b2:	         |   move.l d0,-(sp)
    48b4:	         |   jsr 5b22 <startNewFunctionNum>
    48ba:	         |   lea 20(sp),sp
    48be:	         |   tst.l d0
    48c0:	         +-- bne.s 48c8 <handleInput+0x58>
    48c2:	         |   clr.w d0
    48c4:	/--------|-- bra.w 4ace <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    48c8:	|        \-> clr.w 1b7fe <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    48ce:	|            move.l 1b810 <lastRegion>,d1
    48d4:	|            move.l 1b9b4 <overRegion>,d0
    48da:	|            cmp.l d1,d0
    48dc:	|  /-------- beq.w 49b4 <handleInput+0x144>
    48e0:	|  |         movea.l 1b1c2 <currentEvents>,a0
    48e6:	|  |         move.l 20(a0),d0
    48ea:	|  +-------- beq.w 49b4 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    48ee:	|  |         moveq #12,d0
    48f0:	|  |         move.l d0,16(sp)
    48f4:	|  |         clr.l 12(sp)
    48f8:	|  |         move.l 1b848 <SysBase>,d0
    48fe:	|  |         movea.l d0,a6
    4900:	|  |         move.l 16(sp),d0
    4904:	|  |         move.l 12(sp),d1
    4908:	|  |         jsr -684(a6)
    490c:	|  |         move.l d0,8(sp)
    4910:	|  |         move.l 8(sp),d0
    4914:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    4918:	|  |         move.l 4(sp),d0
    491c:	|  |     /-- bne.s 4932 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    491e:	|  |     |   pea 17751 <PutChar+0xb8d>
    4924:	|  |     |   jsr 16274 <KPrintF>
    492a:	|  |     |   addq.l #4,sp
			return FALSE;
    492c:	|  |     |   clr.w d0
    492e:	+--|-----|-- bra.w 4ace <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    4932:	|  |     \-> movea.l 4(sp),a0
    4936:	|  |         clr.l (a0)
		if (overRegion) {
    4938:	|  |         move.l 1b9b4 <overRegion>,d0
    493e:	|  |  /----- beq.s 4966 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    4940:	|  |  |      movea.l 1b9b4 <overRegion>,a0
    4946:	|  |  |      movea.l 28(a0),a0
    494a:	|  |  |      move.l 4(a0),d1
    494e:	|  |  |      move.l 4(sp),d0
    4952:	|  |  |      move.l d1,-(sp)
    4954:	|  |  |      pea 7 <_start+0x7>
    4958:	|  |  |      move.l d0,-(sp)
    495a:	|  |  |      jsr 14246 <setVariable>
    4960:	|  |  |      lea 12(sp),sp
    4964:	|  |  |  /-- bra.s 497c <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    4966:	|  |  \--|-> move.l 4(sp),d0
    496a:	|  |     |   clr.l -(sp)
    496c:	|  |     |   pea 1 <_start+0x1>
    4970:	|  |     |   move.l d0,-(sp)
    4972:	|  |     |   jsr 14246 <setVariable>
    4978:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    497c:	|  |     \-> movea.l 4(sp),a0
    4980:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    4984:	|  |         movea.l 1b1c2 <currentEvents>,a0
    498a:	|  |         move.l 20(a0),d0
    498e:	|  |         pea 1 <_start+0x1>
    4992:	|  |         lea 8(sp),a0
    4996:	|  |         move.l a0,-(sp)
    4998:	|  |         clr.l -(sp)
    499a:	|  |         pea 1 <_start+0x1>
    499e:	|  |         move.l d0,-(sp)
    49a0:	|  |         jsr 5b22 <startNewFunctionNum>
    49a6:	|  |         lea 20(sp),sp
    49aa:	|  |         tst.l d0
    49ac:	|  +-------- bne.s 49b4 <handleInput+0x144>
    49ae:	|  |         clr.w d0
    49b0:	+--|-------- bra.w 4ace <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    49b4:	|  \-------> move.w 1b800 <input+0x6>,d0
    49ba:	|        /-- beq.s 49f8 <handleInput+0x188>
    49bc:	|        |   movea.l 1b1c2 <currentEvents>,a0
    49c2:	|        |   move.l 4(a0),d0
    49c6:	|        +-- beq.s 49f8 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    49c8:	|        |   move.l 1b818 <noStack>,d1
    49ce:	|        |   movea.l 1b1c2 <currentEvents>,a0
    49d4:	|        |   move.l 4(a0),d0
    49d8:	|        |   pea 1 <_start+0x1>
    49dc:	|        |   move.l d1,-(sp)
    49de:	|        |   clr.l -(sp)
    49e0:	|        |   clr.l -(sp)
    49e2:	|        |   move.l d0,-(sp)
    49e4:	|        |   jsr 5b22 <startNewFunctionNum>
    49ea:	|        |   lea 20(sp),sp
    49ee:	|        |   tst.l d0
    49f0:	|        +-- bne.s 49f8 <handleInput+0x188>
    49f2:	|        |   clr.w d0
    49f4:	+--------|-- bra.w 4ace <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    49f8:	|        \-> move.w 1b802 <input+0x8>,d0
    49fe:	|        /-- beq.s 4a3c <handleInput+0x1cc>
    4a00:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a06:	|        |   move.l 12(a0),d0
    4a0a:	|        +-- beq.s 4a3c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a0c:	|        |   move.l 1b818 <noStack>,d1
    4a12:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a18:	|        |   move.l 12(a0),d0
    4a1c:	|        |   pea 1 <_start+0x1>
    4a20:	|        |   move.l d1,-(sp)
    4a22:	|        |   clr.l -(sp)
    4a24:	|        |   clr.l -(sp)
    4a26:	|        |   move.l d0,-(sp)
    4a28:	|        |   jsr 5b22 <startNewFunctionNum>
    4a2e:	|        |   lea 20(sp),sp
    4a32:	|        |   tst.l d0
    4a34:	|        +-- bne.s 4a3c <handleInput+0x1cc>
    4a36:	|        |   clr.w d0
    4a38:	+--------|-- bra.w 4ace <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    4a3c:	|        \-> move.w 1b7fa <input>,d0
    4a42:	|        /-- beq.s 4a7a <handleInput+0x20a>
    4a44:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a4a:	|        |   move.l (a0),d0
    4a4c:	|        +-- beq.s 4a7a <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a4e:	|        |   move.l 1b818 <noStack>,d1
    4a54:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a5a:	|        |   move.l (a0),d0
    4a5c:	|        |   pea 1 <_start+0x1>
    4a60:	|        |   move.l d1,-(sp)
    4a62:	|        |   clr.l -(sp)
    4a64:	|        |   clr.l -(sp)
    4a66:	|        |   move.l d0,-(sp)
    4a68:	|        |   jsr 5b22 <startNewFunctionNum>
    4a6e:	|        |   lea 20(sp),sp
    4a72:	|        |   tst.l d0
    4a74:	|        +-- bne.s 4a7a <handleInput+0x20a>
    4a76:	|        |   clr.w d0
    4a78:	+--------|-- bra.s 4ace <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    4a7a:	|        \-> move.w 1b7fc <input+0x2>,d0
    4a80:	|        /-- beq.s 4abc <handleInput+0x24c>
    4a82:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a88:	|        |   move.l 8(a0),d0
    4a8c:	|        +-- beq.s 4abc <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a8e:	|        |   move.l 1b818 <noStack>,d1
    4a94:	|        |   movea.l 1b1c2 <currentEvents>,a0
    4a9a:	|        |   move.l 8(a0),d0
    4a9e:	|        |   pea 1 <_start+0x1>
    4aa2:	|        |   move.l d1,-(sp)
    4aa4:	|        |   clr.l -(sp)
    4aa6:	|        |   clr.l -(sp)
    4aa8:	|        |   move.l d0,-(sp)
    4aaa:	|        |   jsr 5b22 <startNewFunctionNum>
    4ab0:	|        |   lea 20(sp),sp
    4ab4:	|        |   tst.l d0
    4ab6:	|        +-- bne.s 4abc <handleInput+0x24c>
    4ab8:	|        |   clr.w d0
    4aba:	+--------|-- bra.s 4ace <handleInput+0x25e>
	}

	lastRegion = overRegion;
    4abc:	|        \-> move.l 1b9b4 <overRegion>,d0
    4ac2:	|            move.l d0,1b810 <lastRegion>
	return runSludge ();
    4ac8:	|            jsr 58f0 <runSludge>
}
    4ace:	\----------> movea.l (sp)+,a6
    4ad0:	             lea 16(sp),sp
    4ad4:	             rts

00004ad6 <initSludge>:

BOOL initSludge (char * filename) {
    4ad6:	             lea -292(sp),sp
    4ada:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    4ade:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    4ae2:	             jsr 9f48 <makeNullAnim>
    4ae8:	             move.l d0,1b750 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    4aee:	             pea 1b7f2 <gameVersion>
    4af4:	             pea 17787 <PutChar+0xbc3>
    4afa:	             pea 45 <_start+0x45>
    4afe:	             pea 47 <_start+0x47>
    4b02:	             move.l 332(sp),-(sp)
    4b06:	             jsr 5524 <openAndVerify>
    4b0c:	             lea 20(sp),sp
    4b10:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    4b14:	         /-- bne.s 4b1c <initSludge+0x46>
    4b16:	         |   clr.w d0
    4b18:	/--------|-- bra.w 5244 <initSludge+0x76e>
	if (FGetC (fp)) {
    4b1c:	|        \-> move.l 288(sp),284(sp)
    4b22:	|            move.l 1b850 <DOSBase>,d0
    4b28:	|            movea.l d0,a6
    4b2a:	|            move.l 284(sp),d1
    4b2e:	|            jsr -306(a6)
    4b32:	|            move.l d0,280(sp)
    4b36:	|            move.l 280(sp),d0
    4b3a:	|  /-------- beq.w 4ce4 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    4b3e:	|  |         move.l 288(sp),-(sp)
    4b42:	|  |         jsr 6bc <get2bytes>
    4b48:	|  |         addq.l #4,sp
    4b4a:	|  |         move.l d0,1b81c <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4b50:	|  |         move.l 1b81c <numBIFNames>,d0
    4b56:	|  |         move.l d0,276(sp)
    4b5a:	|  |         clr.l 272(sp)
    4b5e:	|  |         move.l 1b848 <SysBase>,d0
    4b64:	|  |         movea.l d0,a6
    4b66:	|  |         move.l 276(sp),d0
    4b6a:	|  |         move.l 272(sp),d1
    4b6e:	|  |         jsr -684(a6)
    4b72:	|  |         move.l d0,268(sp)
    4b76:	|  |         move.l 268(sp),d0
    4b7a:	|  |         move.l d0,1b7d8 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4b80:	|  |         move.l 1b7d8 <allBIFNames>,d0
    4b86:	|  |     /-- bne.s 4b8e <initSludge+0xb8>
    4b88:	|  |     |   clr.w d0
    4b8a:	+--|-----|-- bra.w 5244 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4b8e:	|  |     \-> clr.l 304(sp)
    4b92:	|  |     /-- bra.s 4bb8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4b94:	|  |  /--|-> move.l 1b7d8 <allBIFNames>,d1
    4b9a:	|  |  |  |   move.l 304(sp),d0
    4b9e:	|  |  |  |   add.l d0,d0
    4ba0:	|  |  |  |   add.l d0,d0
    4ba2:	|  |  |  |   movea.l d1,a2
    4ba4:	|  |  |  |   adda.l d0,a2
    4ba6:	|  |  |  |   move.l 288(sp),-(sp)
    4baa:	|  |  |  |   jsr b02 <readString>
    4bb0:	|  |  |  |   addq.l #4,sp
    4bb2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4bb4:	|  |  |  |   addq.l #1,304(sp)
    4bb8:	|  |  |  \-> move.l 1b81c <numBIFNames>,d0
    4bbe:	|  |  |      cmp.l 304(sp),d0
    4bc2:	|  |  \----- bgt.s 4b94 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4bc4:	|  |         move.l 288(sp),-(sp)
    4bc8:	|  |         jsr 6bc <get2bytes>
    4bce:	|  |         addq.l #4,sp
    4bd0:	|  |         move.l d0,1b828 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4bd6:	|  |         move.l 1b828 <numUserFunc>,d0
    4bdc:	|  |         move.l d0,264(sp)
    4be0:	|  |         clr.l 260(sp)
    4be4:	|  |         move.l 1b848 <SysBase>,d0
    4bea:	|  |         movea.l d0,a6
    4bec:	|  |         move.l 264(sp),d0
    4bf0:	|  |         move.l 260(sp),d1
    4bf4:	|  |         jsr -684(a6)
    4bf8:	|  |         move.l d0,256(sp)
    4bfc:	|  |         move.l 256(sp),d0
    4c00:	|  |         move.l d0,1b7e4 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4c06:	|  |         move.l 1b7e4 <allUserFunc>,d0
    4c0c:	|  |     /-- bne.s 4c14 <initSludge+0x13e>
    4c0e:	|  |     |   clr.w d0
    4c10:	+--|-----|-- bra.w 5244 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4c14:	|  |     \-> clr.l 300(sp)
    4c18:	|  |     /-- bra.s 4c3e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4c1a:	|  |  /--|-> move.l 1b7e4 <allUserFunc>,d1
    4c20:	|  |  |  |   move.l 300(sp),d0
    4c24:	|  |  |  |   add.l d0,d0
    4c26:	|  |  |  |   add.l d0,d0
    4c28:	|  |  |  |   movea.l d1,a2
    4c2a:	|  |  |  |   adda.l d0,a2
    4c2c:	|  |  |  |   move.l 288(sp),-(sp)
    4c30:	|  |  |  |   jsr b02 <readString>
    4c36:	|  |  |  |   addq.l #4,sp
    4c38:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4c3a:	|  |  |  |   addq.l #1,300(sp)
    4c3e:	|  |  |  \-> move.l 1b828 <numUserFunc>,d0
    4c44:	|  |  |      cmp.l 300(sp),d0
    4c48:	|  |  \----- bgt.s 4c1a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4c4a:	|  |         move.l 1b7f2 <gameVersion>,d0
    4c50:	|  |         cmpi.l #258,d0
    4c56:	|  +-------- ble.w 4ce4 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4c5a:	|  |         move.l 288(sp),-(sp)
    4c5e:	|  |         jsr 6bc <get2bytes>
    4c64:	|  |         addq.l #4,sp
    4c66:	|  |         move.l d0,1b824 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4c6c:	|  |         move.l 1b824 <numResourceNames>,d0
    4c72:	|  |         add.l d0,d0
    4c74:	|  |         add.l d0,d0
    4c76:	|  |         move.l d0,252(sp)
    4c7a:	|  |         clr.l 248(sp)
    4c7e:	|  |         move.l 1b848 <SysBase>,d0
    4c84:	|  |         movea.l d0,a6
    4c86:	|  |         move.l 252(sp),d0
    4c8a:	|  |         move.l 248(sp),d1
    4c8e:	|  |         jsr -684(a6)
    4c92:	|  |         move.l d0,244(sp)
    4c96:	|  |         move.l 244(sp),d0
    4c9a:	|  |         move.l d0,1b7dc <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4ca0:	|  |         move.l 1b7dc <allResourceNames>,d0
    4ca6:	|  |     /-- bne.s 4cae <initSludge+0x1d8>
    4ca8:	|  |     |   clr.w d0
    4caa:	+--|-----|-- bra.w 5244 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4cae:	|  |     \-> clr.l 296(sp)
    4cb2:	|  |     /-- bra.s 4cd8 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4cb4:	|  |  /--|-> move.l 1b7dc <allResourceNames>,d1
    4cba:	|  |  |  |   move.l 296(sp),d0
    4cbe:	|  |  |  |   add.l d0,d0
    4cc0:	|  |  |  |   add.l d0,d0
    4cc2:	|  |  |  |   movea.l d1,a2
    4cc4:	|  |  |  |   adda.l d0,a2
    4cc6:	|  |  |  |   move.l 288(sp),-(sp)
    4cca:	|  |  |  |   jsr b02 <readString>
    4cd0:	|  |  |  |   addq.l #4,sp
    4cd2:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4cd4:	|  |  |  |   addq.l #1,296(sp)
    4cd8:	|  |  |  \-> move.l 1b824 <numResourceNames>,d0
    4cde:	|  |  |      cmp.l 296(sp),d0
    4ce2:	|  |  \----- bgt.s 4cb4 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4ce4:	|  \-------> move.l #129,1b804 <input+0xa>
	input.mouseY = 100;
    4cee:	|            moveq #100,d0
    4cf0:	|            move.l d0,1b808 <input+0xe>
	winWidth = get2bytes (fp);
    4cf6:	|            move.l 288(sp),-(sp)
    4cfa:	|            jsr 6bc <get2bytes>
    4d00:	|            addq.l #4,sp
    4d02:	|            move.l d0,1b79c <winWidth>
	winHeight = get2bytes (fp);
    4d08:	|            move.l 288(sp),-(sp)
    4d0c:	|            jsr 6bc <get2bytes>
    4d12:	|            addq.l #4,sp
    4d14:	|            move.l d0,1b7a0 <winHeight>
	specialSettings = FGetC (fp);
    4d1a:	|            move.l 288(sp),240(sp)
    4d20:	|            move.l 1b850 <DOSBase>,d0
    4d26:	|            movea.l d0,a6
    4d28:	|            move.l 240(sp),d1
    4d2c:	|            jsr -306(a6)
    4d30:	|            move.l d0,236(sp)
    4d34:	|            move.l 236(sp),d0
    4d38:	|            move.l d0,1b82c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4d3e:	|            move.l 288(sp),232(sp)
    4d44:	|            move.l 1b850 <DOSBase>,d0
    4d4a:	|            movea.l d0,a6
    4d4c:	|            move.l 232(sp),d1
    4d50:	|            jsr -306(a6)
    4d54:	|            move.l d0,228(sp)
    4d58:	|            move.l 228(sp),d0
    4d5c:	|            move.l d0,-(sp)
    4d5e:	|            pea 3e8 <encodeFilename+0xea>
    4d62:	|            jsr 16b2c <__divsi3>
    4d68:	|            addq.l #8,sp
    4d6a:	|            move.l d0,1b1d8 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4d70:	|            move.l 288(sp),-(sp)
    4d74:	|            jsr b02 <readString>
    4d7a:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4d7c:	|            move.l 288(sp),224(sp)
    4d82:	|            move.l #112618,220(sp)
    4d8a:	|            moveq #8,d1
    4d8c:	|            move.l d1,216(sp)
    4d90:	|            moveq #1,d0
    4d92:	|            move.l d0,212(sp)
    4d96:	|            move.l 1b850 <DOSBase>,d0
    4d9c:	|            movea.l d0,a6
    4d9e:	|            move.l 224(sp),d1
    4da2:	|            move.l 220(sp),d2
    4da6:	|            move.l 216(sp),d3
    4daa:	|            move.l 212(sp),d4
    4dae:	|            jsr -324(a6)
    4db2:	|            move.l d0,208(sp)
    4db6:	|            move.l 208(sp),d0
    4dba:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4dbe:	|            moveq #1,d1
    4dc0:	|            cmp.l 204(sp),d1
    4dc4:	|        /-- beq.s 4dd4 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4dc6:	|        |   pea 177c0 <PutChar+0xbfc>
    4dcc:	|        |   jsr 16274 <KPrintF>
    4dd2:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4dd4:	|        \-> move.l 1b7f2 <gameVersion>,d0
    4dda:	|            cmpi.l #258,d0
    4de0:	|        /-- ble.s 4df0 <initSludge+0x31a>
    4de2:	|        |   move.l 288(sp),-(sp)
    4de6:	|        |   jsr b02 <readString>
    4dec:	|        |   addq.l #4,sp
    4dee:	|     /--|-- bra.s 4e04 <initSludge+0x32e>
    4df0:	|     |  \-> pea 177de <PutChar+0xc1a>
    4df6:	|     |      pea 177de <PutChar+0xc1a>
    4dfc:	|     |      jsr 12e80 <joinStrings>
    4e02:	|     |      addq.l #8,sp
    4e04:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4e08:	|            move.l 1b7f2 <gameVersion>,d0
    4e0e:	|            cmpi.l #258,d0
    4e14:	|     /----- ble.s 4e36 <initSludge+0x360>
    4e16:	|     |      move.l 288(sp),196(sp)
    4e1c:	|     |      move.l 1b850 <DOSBase>,d0
    4e22:	|     |      movea.l d0,a6
    4e24:	|     |      move.l 196(sp),d1
    4e28:	|     |      jsr -306(a6)
    4e2c:	|     |      move.l d0,192(sp)
    4e30:	|     |      move.l 192(sp),d0
    4e34:	|     |  /-- bra.s 4e38 <initSludge+0x362>
    4e36:	|     \--|-> moveq #0,d0
    4e38:	|        \-> move.l d0,1b980 <gameSettings+0x4>
	makeLanguageTable (fp);
    4e3e:	|            move.l 288(sp),-(sp)
    4e42:	|            jsr 12836 <makeLanguageTable>
    4e48:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4e4a:	|            move.l 1b7f2 <gameVersion>,d0
    4e50:	|            cmpi.l #261,d0
    4e56:	|        /-- ble.s 4ea4 <initSludge+0x3ce>
	{
		FGetC(fp);
    4e58:	|        |   move.l 288(sp),188(sp)
    4e5e:	|        |   move.l 1b850 <DOSBase>,d0
    4e64:	|        |   movea.l d0,a6
    4e66:	|        |   move.l 188(sp),d1
    4e6a:	|        |   jsr -306(a6)
    4e6e:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4e72:	|        |   move.l 288(sp),180(sp)
    4e78:	|        |   move.l 1b850 <DOSBase>,d0
    4e7e:	|        |   movea.l d0,a6
    4e80:	|        |   move.l 180(sp),d1
    4e84:	|        |   jsr -306(a6)
    4e88:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4e8c:	|        |   move.l 288(sp),-(sp)
    4e90:	|        |   jsr 7d8 <getFloat>
    4e96:	|        |   addq.l #4,sp
		getFloat (fp);
    4e98:	|        |   move.l 288(sp),-(sp)
    4e9c:	|        |   jsr 7d8 <getFloat>
    4ea2:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4ea4:	|        \-> move.l 288(sp),-(sp)
    4ea8:	|            jsr b02 <readString>
    4eae:	|            addq.l #4,sp
    4eb0:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4eb4:	|            pea 177df <PutChar+0xc1b>
    4eba:	|            move.l 176(sp),-(sp)
    4ebe:	|            jsr 12e00 <strcmp>
    4ec4:	|            addq.l #8,sp
    4ec6:	|            tst.l d0
    4ec8:	|        /-- beq.s 4ed0 <initSludge+0x3fa>
		return FALSE;
    4eca:	|        |   clr.w d0
    4ecc:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}
	FreeVec( checker);
    4ed0:	|        \-> move.l 172(sp),168(sp)
    4ed6:	|            move.l 1b848 <SysBase>,d0
    4edc:	|            movea.l d0,a6
    4ede:	|            movea.l 168(sp),a1
    4ee2:	|            jsr -690(a6)
	checker = NULL;
    4ee6:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4eea:	|            move.l 288(sp),164(sp)
    4ef0:	|            move.l 1b850 <DOSBase>,d0
    4ef6:	|            movea.l d0,a6
    4ef8:	|            move.l 164(sp),d1
    4efc:	|            jsr -306(a6)
    4f00:	|            move.l d0,160(sp)
    4f04:	|            move.l 160(sp),d0
    4f08:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4f0c:	|            moveq #0,d0
    4f0e:	|            move.b 159(sp),d0
    4f12:	|            moveq #1,d1
    4f14:	|            and.l d1,d0
    4f16:	|        /-- beq.s 4f6e <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4f18:	|        |   move.l 1b850 <DOSBase>,d0
    4f1e:	|        |   movea.l d0,a6
    4f20:	|        |   jsr -60(a6)
    4f24:	|        |   move.l d0,38(sp)
    4f28:	|        |   move.l 38(sp),d0
    4f2c:	|        |   move.l d0,34(sp)
    4f30:	|        |   move.l #96231,30(sp)
    4f38:	|        |   moveq #54,d0
    4f3a:	|        |   move.l d0,26(sp)
    4f3e:	|        |   move.l 1b850 <DOSBase>,d0
    4f44:	|        |   movea.l d0,a6
    4f46:	|        |   move.l 34(sp),d1
    4f4a:	|        |   move.l 30(sp),d2
    4f4e:	|        |   move.l 26(sp),d3
    4f52:	|        |   jsr -48(a6)
    4f56:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4f5a:	|        |   pea 1781e <PutChar+0xc5a>
    4f60:	|        |   jsr 16274 <KPrintF>
    4f66:	|        |   addq.l #4,sp
		return FALSE;
    4f68:	|        |   clr.w d0
    4f6a:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4f6e:	|        \-> move.l 288(sp),-(sp)
    4f72:	|            jsr 6bc <get2bytes>
    4f78:	|            addq.l #4,sp
    4f7a:	|            move.l d0,1b820 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4f80:	|            move.l 1b820 <numGlobals>,d0
    4f86:	|            lsl.l #3,d0
    4f88:	|            move.l d0,154(sp)
    4f8c:	|            clr.l 150(sp)
    4f90:	|            move.l 1b848 <SysBase>,d0
    4f96:	|            movea.l d0,a6
    4f98:	|            move.l 154(sp),d0
    4f9c:	|            move.l 150(sp),d1
    4fa0:	|            jsr -684(a6)
    4fa4:	|            move.l d0,146(sp)
    4fa8:	|            move.l 146(sp),d0
    4fac:	|            move.l d0,1b7f6 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4fb2:	|            move.l 1b7f6 <globalVars>,d0
    4fb8:	|        /-- bne.s 4fd6 <initSludge+0x500>
    4fba:	|        |   move.l 1b820 <numGlobals>,d0
    4fc0:	|        +-- ble.s 4fd6 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4fc2:	|        |   pea 17856 <PutChar+0xc92>
    4fc8:	|        |   jsr 16274 <KPrintF>
    4fce:	|        |   addq.l #4,sp
		return FALSE;
    4fd0:	|        |   clr.w d0
    4fd2:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4fd6:	|        \-> clr.l 308(sp)
    4fda:	|        /-- bra.s 4ff2 <initSludge+0x51c>
    4fdc:	|     /--|-> move.l 1b7f6 <globalVars>,d1
    4fe2:	|     |  |   move.l 308(sp),d0
    4fe6:	|     |  |   lsl.l #3,d0
    4fe8:	|     |  |   movea.l d1,a0
    4fea:	|     |  |   adda.l d0,a0
    4fec:	|     |  |   clr.l (a0)
    4fee:	|     |  |   addq.l #1,308(sp)
    4ff2:	|     |  \-> move.l 1b820 <numGlobals>,d0
    4ff8:	|     |      cmp.l 308(sp),d0
    4ffc:	|     \----- bgt.s 4fdc <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4ffe:	|            move.l 1b980 <gameSettings+0x4>,d0
    5004:	|            clr.l -(sp)
    5006:	|            move.l d0,-(sp)
    5008:	|            move.l 296(sp),-(sp)
    500c:	|            jsr 6012 <setFileIndices>
    5012:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5016:	|            pea 1 <_start+0x1>
    501a:	|            jsr 5ccc <getNumberedString>
    5020:	|            addq.l #4,sp
    5022:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5026:	|            move.l 142(sp),-(sp)
    502a:	|            jsr 2fe <encodeFilename>
    5030:	|            addq.l #4,sp
    5032:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5036:	|            move.l 142(sp),134(sp)
    503c:	|            move.l 1b848 <SysBase>,d0
    5042:	|            movea.l d0,a6
    5044:	|            movea.l 134(sp),a1
    5048:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    504c:	|            move.l 138(sp),130(sp)
    5052:	|            move.l 1b850 <DOSBase>,d0
    5058:	|            movea.l d0,a6
    505a:	|            move.l 130(sp),d1
    505e:	|            jsr -120(a6)
    5062:	|            move.l d0,126(sp)
    5066:	|            move.l 126(sp),d0
    506a:	|            move.l d0,292(sp)
	if(lock == 0) {
    506e:	|        /-- bne.s 509c <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5070:	|        |   move.l 138(sp),122(sp)
    5076:	|        |   moveq #-2,d1
    5078:	|        |   move.l d1,118(sp)
    507c:	|        |   move.l 1b850 <DOSBase>,d0
    5082:	|        |   movea.l d0,a6
    5084:	|        |   move.l 122(sp),d1
    5088:	|        |   move.l 118(sp),d2
    508c:	|        |   jsr -84(a6)
    5090:	|        |   move.l d0,114(sp)
    5094:	|        |   move.l 114(sp),d0
    5098:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    509c:	|        \-> move.l 292(sp),110(sp)
    50a2:	|            move.l 1b850 <DOSBase>,d0
    50a8:	|            movea.l d0,a6
    50aa:	|            move.l 110(sp),d1
    50ae:	|            jsr -126(a6)
    50b2:	|            move.l d0,106(sp)
    50b6:	|            move.l 106(sp),d0
    50ba:	|        /-- bne.s 5116 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    50bc:	|        |   move.l 138(sp),-(sp)
    50c0:	|        |   pea 17889 <PutChar+0xcc5>
    50c6:	|        |   jsr 16274 <KPrintF>
    50cc:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    50ce:	|        |   move.l 1b850 <DOSBase>,d0
    50d4:	|        |   movea.l d0,a6
    50d6:	|        |   jsr -60(a6)
    50da:	|        |   move.l d0,58(sp)
    50de:	|        |   move.l 58(sp),d0
    50e2:	|        |   move.l d0,54(sp)
    50e6:	|        |   move.l #96438,50(sp)
    50ee:	|        |   moveq #40,d0
    50f0:	|        |   move.l d0,46(sp)
    50f4:	|        |   move.l 1b850 <DOSBase>,d0
    50fa:	|        |   movea.l d0,a6
    50fc:	|        |   move.l 54(sp),d1
    5100:	|        |   move.l 50(sp),d2
    5104:	|        |   move.l 46(sp),d3
    5108:	|        |   jsr -48(a6)
    510c:	|        |   move.l d0,42(sp)
		return FALSE;
    5110:	|        |   clr.w d0
    5112:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5116:	|        \-> move.l 138(sp),102(sp)
    511c:	|            move.l 1b848 <SysBase>,d0
    5122:	|            movea.l d0,a6
    5124:	|            movea.l 102(sp),a1
    5128:	|            jsr -690(a6)

	readIniFile (filename);
    512c:	|            move.l 316(sp),-(sp)
    5130:	|            jsr 1296a <readIniFile>
    5136:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5138:	|            jsr 1273c <getLanguageForFileB>
    513e:	|            move.l d0,1b1c6 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5144:	|            move.l 1b1c6 <languageNum>,d0
    514a:	|        /-- bpl.s 515a <initSludge+0x684>
    514c:	|        |   pea 178df <PutChar+0xd1b>
    5152:	|        |   jsr 16274 <KPrintF>
    5158:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    515a:	|        \-> move.l 1b1c6 <languageNum>,d0
    5160:	|            move.l d0,d1
    5162:	|            move.l 1b980 <gameSettings+0x4>,d0
    5168:	|            move.l d1,-(sp)
    516a:	|            move.l d0,-(sp)
    516c:	|            clr.l -(sp)
    516e:	|            jsr 6012 <setFileIndices>
    5174:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5178:	|            movea.l 200(sp),a0
    517c:	|            move.b (a0),d0
    517e:	|     /----- beq.w 5228 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5182:	|     |      move.l 200(sp),-(sp)
    5186:	|     |      jsr 2fe <encodeFilename>
    518c:	|     |      addq.l #4,sp
    518e:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5192:	|     |      move.l 98(sp),94(sp)
    5198:	|     |      move.l 1b850 <DOSBase>,d0
    519e:	|     |      movea.l d0,a6
    51a0:	|     |      move.l 94(sp),d1
    51a4:	|     |      jsr -120(a6)
    51a8:	|     |      move.l d0,90(sp)
    51ac:	|     |      move.l 90(sp),d0
    51b0:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    51b4:	|     |  /-- bne.s 51e2 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    51b6:	|     |  |   move.l 98(sp),86(sp)
    51bc:	|     |  |   moveq #-2,d1
    51be:	|     |  |   move.l d1,82(sp)
    51c2:	|     |  |   move.l 1b850 <DOSBase>,d0
    51c8:	|     |  |   movea.l d0,a6
    51ca:	|     |  |   move.l 86(sp),d1
    51ce:	|     |  |   move.l 82(sp),d2
    51d2:	|     |  |   jsr -84(a6)
    51d6:	|     |  |   move.l d0,78(sp)
    51da:	|     |  |   move.l 78(sp),d0
    51de:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    51e2:	|     |  \-> move.l 292(sp),74(sp)
    51e8:	|     |      move.l 1b850 <DOSBase>,d0
    51ee:	|     |      movea.l d0,a6
    51f0:	|     |      move.l 74(sp),d1
    51f4:	|     |      jsr -126(a6)
    51f8:	|     |      move.l d0,70(sp)
    51fc:	|     |      move.l 70(sp),d0
    5200:	|     |  /-- bne.s 5212 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5202:	|     |  |   move.l 1b850 <DOSBase>,d0
    5208:	|     |  |   movea.l d0,a6
    520a:	|     |  |   jsr -60(a6)
    520e:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5212:	|     |  \-> move.l 98(sp),62(sp)
    5218:	|     |      move.l 1b848 <SysBase>,d0
    521e:	|     |      movea.l d0,a6
    5220:	|     |      movea.l 62(sp),a1
    5224:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5228:	|     \----> movea.l 1b7a0 <winHeight>,a0
    522e:	|            lea -15(a0),a0
    5232:	|            move.l a0,d0
    5234:	|            move.l d0,-(sp)
    5236:	|            pea a <_start+0xa>
    523a:	|            jsr 6a44 <positionStatus>
    5240:	|            addq.l #8,sp

	return TRUE;
    5242:	|            moveq #1,d0
}
    5244:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5248:	             lea 292(sp),sp
    524c:	             rts

0000524e <killSpeechTimers>:

void killSpeechTimers () {
    524e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5250:	          move.l 1b7e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    5256:	   /----- bra.s 5282 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5258:	/--|----> movea.l (sp),a0
    525a:	|  |      move.b 56(a0),d0
    525e:	|  |  /-- bne.s 527c <killSpeechTimers+0x2e>
    5260:	|  |  |   movea.l (sp),a0
    5262:	|  |  |   move.w 50(a0),d0
    5266:	|  |  +-- beq.s 527c <killSpeechTimers+0x2e>
    5268:	|  |  |   movea.l (sp),a0
    526a:	|  |  |   move.l 12(a0),d0
    526e:	|  |  +-- beq.s 527c <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5270:	|  |  |   movea.l (sp),a0
    5272:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5276:	|  |  |   movea.l (sp),a0
    5278:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    527c:	|  |  \-> movea.l (sp),a0
    527e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5282:	|  \----> tst.l (sp)
    5284:	\-------- bne.s 5258 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5286:	          jsr 6f82 <killAllSpeech>
}
    528c:	          nop
    528e:	          addq.l #4,sp
    5290:	          rts

00005292 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5292:	             lea -52(sp),sp
    5296:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5298:	             movea.l 60(sp),a0
    529c:	             move.l (a0),d0
    529e:	             move.l d0,-(sp)
    52a0:	             jsr 5f52 <openSubSlice>
    52a6:	             addq.l #4,sp
    52a8:	             tst.w d0
    52aa:	         /-- bne.s 52b2 <loadFunctionCode+0x20>
    52ac:	         |   clr.w d0
    52ae:	/--------|-- bra.w 547c <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    52b2:	|        \-> move.l 1b830 <bigDataFile>,44(sp)
    52ba:	|            move.l 1b850 <DOSBase>,d0
    52c0:	|            movea.l d0,a6
    52c2:	|            move.l 44(sp),d1
    52c6:	|            jsr -306(a6)
    52ca:	|            move.l d0,40(sp)
    52ce:	|            move.l 40(sp),d0
    52d2:	|            move.l d0,d0
    52d4:	|            movea.l 60(sp),a0
    52d8:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    52dc:	|            move.l 1b830 <bigDataFile>,d0
    52e2:	|            move.l d0,-(sp)
    52e4:	|            jsr 6bc <get2bytes>
    52ea:	|            addq.l #4,sp
    52ec:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    52f0:	|            move.l 1b830 <bigDataFile>,d0
    52f6:	|            move.l d0,-(sp)
    52f8:	|            jsr 6bc <get2bytes>
    52fe:	|            addq.l #4,sp
    5300:	|            movea.l 60(sp),a0
    5304:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5308:	|            move.l 1b830 <bigDataFile>,d0
    530e:	|            move.l d0,-(sp)
    5310:	|            jsr 6bc <get2bytes>
    5316:	|            addq.l #4,sp
    5318:	|            movea.l 60(sp),a0
    531c:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5320:	|            move.l 36(sp),d0
    5324:	|            lsl.l #3,d0
    5326:	|            move.l d0,32(sp)
    532a:	|            clr.l 28(sp)
    532e:	|            move.l 1b848 <SysBase>,d0
    5334:	|            movea.l d0,a6
    5336:	|            move.l 32(sp),d0
    533a:	|            move.l 28(sp),d1
    533e:	|            jsr -684(a6)
    5342:	|            move.l d0,24(sp)
    5346:	|            move.l 24(sp),d0
    534a:	|            movea.l 60(sp),a0
    534e:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5352:	|            movea.l 60(sp),a0
    5356:	|            move.l 4(a0),d0
    535a:	|        /-- bne.s 5370 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    535c:	|        |   pea 1790a <PutChar+0xd46>
    5362:	|        |   jsr 16274 <KPrintF>
    5368:	|        |   addq.l #4,sp
		return FALSE;
    536a:	|        |   clr.w d0
    536c:	+--------|-- bra.w 547c <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5370:	|        \-> clr.l 52(sp)
    5374:	|        /-- bra.s 53d6 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5376:	|     /--|-> move.l 1b830 <bigDataFile>,8(sp)
    537e:	|     |  |   move.l 1b850 <DOSBase>,d0
    5384:	|     |  |   movea.l d0,a6
    5386:	|     |  |   move.l 8(sp),d1
    538a:	|     |  |   jsr -306(a6)
    538e:	|     |  |   move.l d0,4(sp)
    5392:	|     |  |   move.l 4(sp),d1
    5396:	|     |  |   movea.l 60(sp),a0
    539a:	|     |  |   movea.l 4(a0),a0
    539e:	|     |  |   move.l 52(sp),d0
    53a2:	|     |  |   lsl.l #3,d0
    53a4:	|     |  |   adda.l d0,a0
    53a6:	|     |  |   move.l d1,d0
    53a8:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    53aa:	|     |  |   move.l 1b830 <bigDataFile>,d0
    53b0:	|     |  |   move.l d0,-(sp)
    53b2:	|     |  |   jsr 6bc <get2bytes>
    53b8:	|     |  |   addq.l #4,sp
    53ba:	|     |  |   move.l d0,d1
    53bc:	|     |  |   movea.l 60(sp),a0
    53c0:	|     |  |   movea.l 4(a0),a0
    53c4:	|     |  |   move.l 52(sp),d0
    53c8:	|     |  |   lsl.l #3,d0
    53ca:	|     |  |   adda.l d0,a0
    53cc:	|     |  |   move.l d1,d0
    53ce:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    53d2:	|     |  |   addq.l #1,52(sp)
    53d6:	|     |  \-> move.l 52(sp),d0
    53da:	|     |      cmp.l 36(sp),d0
    53de:	|     \----- bcs.s 5376 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    53e0:	|            jsr 5cc2 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    53e6:	|            movea.l 60(sp),a0
    53ea:	|            move.l 8(a0),d0
    53ee:	|  /-------- ble.w 5472 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    53f2:	|  |         movea.l 60(sp),a0
    53f6:	|  |         move.l 8(a0),d0
    53fa:	|  |         lsl.l #3,d0
    53fc:	|  |         move.l d0,20(sp)
    5400:	|  |         clr.l 16(sp)
    5404:	|  |         move.l 1b848 <SysBase>,d0
    540a:	|  |         movea.l d0,a6
    540c:	|  |         move.l 20(sp),d0
    5410:	|  |         move.l 16(sp),d1
    5414:	|  |         jsr -684(a6)
    5418:	|  |         move.l d0,12(sp)
    541c:	|  |         move.l 12(sp),d0
    5420:	|  |         movea.l 60(sp),a0
    5424:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5428:	|  |         movea.l 60(sp),a0
    542c:	|  |         move.l 20(a0),d0
    5430:	|  |     /-- bne.s 5444 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5432:	|  |     |   pea 1790a <PutChar+0xd46>
    5438:	|  |     |   jsr 16274 <KPrintF>
    543e:	|  |     |   addq.l #4,sp
			return FALSE;
    5440:	|  |     |   clr.w d0
    5442:	+--|-----|-- bra.s 547c <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5444:	|  |     \-> clr.l 48(sp)
    5448:	|  |     /-- bra.s 5462 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    544a:	|  |  /--|-> movea.l 60(sp),a0
    544e:	|  |  |  |   move.l 20(a0),d1
    5452:	|  |  |  |   move.l 48(sp),d0
    5456:	|  |  |  |   lsl.l #3,d0
    5458:	|  |  |  |   movea.l d1,a0
    545a:	|  |  |  |   adda.l d0,a0
    545c:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    545e:	|  |  |  |   addq.l #1,48(sp)
    5462:	|  |  |  \-> movea.l 60(sp),a0
    5466:	|  |  |      move.l 8(a0),d0
    546a:	|  |  |      cmp.l 48(sp),d0
    546e:	|  |  \----- bgt.s 544a <loadFunctionCode+0x1b8>
    5470:	|  |     /-- bra.s 547a <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5472:	|  \-----|-> movea.l 60(sp),a0
    5476:	|        |   clr.l 8(a0)
	}
	return TRUE;
    547a:	|        \-> moveq #1,d0
}
    547c:	\----------> movea.l (sp)+,a6
    547e:	             lea 52(sp),sp
    5482:	             rts

00005484 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5484:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5486:	movea.l 1b1c2 <currentEvents>,a2
    548c:	move.l 8(sp),-(sp)
    5490:	jsr 6bc <get2bytes>
    5496:	addq.l #4,sp
    5498:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    549a:	movea.l 1b1c2 <currentEvents>,a2
    54a0:	move.l 8(sp),-(sp)
    54a4:	jsr 6bc <get2bytes>
    54aa:	addq.l #4,sp
    54ac:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    54b0:	movea.l 1b1c2 <currentEvents>,a2
    54b6:	move.l 8(sp),-(sp)
    54ba:	jsr 6bc <get2bytes>
    54c0:	addq.l #4,sp
    54c2:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    54c6:	movea.l 1b1c2 <currentEvents>,a2
    54cc:	move.l 8(sp),-(sp)
    54d0:	jsr 6bc <get2bytes>
    54d6:	addq.l #4,sp
    54d8:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    54dc:	movea.l 1b1c2 <currentEvents>,a2
    54e2:	move.l 8(sp),-(sp)
    54e6:	jsr 6bc <get2bytes>
    54ec:	addq.l #4,sp
    54ee:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    54f2:	movea.l 1b1c2 <currentEvents>,a2
    54f8:	move.l 8(sp),-(sp)
    54fc:	jsr 6bc <get2bytes>
    5502:	addq.l #4,sp
    5504:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    5508:	movea.l 1b1c2 <currentEvents>,a2
    550e:	move.l 8(sp),-(sp)
    5512:	jsr 6bc <get2bytes>
    5518:	addq.l #4,sp
    551a:	move.l d0,24(a2)
}
    551e:	nop
    5520:	movea.l (sp)+,a2
    5522:	rts

00005524 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5524:	       lea -312(sp),sp
    5528:	       movem.l d2-d3/a6,-(sp)
    552c:	       move.l 332(sp),d1
    5530:	       move.l 336(sp),d0
    5534:	       move.b d1,d1
    5536:	       move.b d1,16(sp)
    553a:	       move.b d0,d0
    553c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5540:	       move.l 328(sp),318(sp)
    5546:	       move.l #1005,314(sp)
    554e:	       move.l 1b850 <DOSBase>,d0
    5554:	       movea.l d0,a6
    5556:	       move.l 318(sp),d1
    555a:	       move.l 314(sp),d2
    555e:	       jsr -30(a6)
    5562:	       move.l d0,310(sp)
    5566:	       move.l 310(sp),d0
    556a:	       move.l d0,306(sp)

	if (! fp) {
    556e:	   /-- bne.s 55ca <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5570:	   |   move.l 1b850 <DOSBase>,d0
    5576:	   |   movea.l d0,a6
    5578:	   |   jsr -60(a6)
    557c:	   |   move.l d0,154(sp)
    5580:	   |   move.l 154(sp),d0
    5584:	   |   move.l d0,150(sp)
    5588:	   |   move.l #96563,146(sp)
    5590:	   |   moveq #31,d0
    5592:	   |   move.l d0,142(sp)
    5596:	   |   move.l 1b850 <DOSBase>,d0
    559c:	   |   movea.l d0,a6
    559e:	   |   move.l 150(sp),d1
    55a2:	   |   move.l 146(sp),d2
    55a6:	   |   move.l 142(sp),d3
    55aa:	   |   jsr -48(a6)
    55ae:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    55b2:	   |   move.l 328(sp),-(sp)
    55b6:	   |   pea 17953 <PutChar+0xd8f>
    55bc:	   |   jsr 16274 <KPrintF>
    55c2:	   |   addq.l #8,sp
		return NULL;
    55c4:	   |   moveq #0,d0
    55c6:	/--|-- bra.w 588a <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    55ca:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    55ce:	|      move.l 306(sp),302(sp)
    55d4:	|      move.l 1b850 <DOSBase>,d0
    55da:	|      movea.l d0,a6
    55dc:	|      move.l 302(sp),d1
    55e0:	|      jsr -306(a6)
    55e4:	|      move.l d0,298(sp)
    55e8:	|      move.l 298(sp),d0
    55ec:	|      moveq #83,d1
    55ee:	|      cmp.l d0,d1
    55f0:	|  /-- beq.s 55f8 <openAndVerify+0xd4>
    55f2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    55f8:	|  \-> move.l 306(sp),294(sp)
    55fe:	|      move.l 1b850 <DOSBase>,d0
    5604:	|      movea.l d0,a6
    5606:	|      move.l 294(sp),d1
    560a:	|      jsr -306(a6)
    560e:	|      move.l d0,290(sp)
    5612:	|      move.l 290(sp),d0
    5616:	|      moveq #76,d1
    5618:	|      cmp.l d0,d1
    561a:	|  /-- beq.s 5622 <openAndVerify+0xfe>
    561c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5622:	|  \-> move.l 306(sp),286(sp)
    5628:	|      move.l 1b850 <DOSBase>,d0
    562e:	|      movea.l d0,a6
    5630:	|      move.l 286(sp),d1
    5634:	|      jsr -306(a6)
    5638:	|      move.l d0,282(sp)
    563c:	|      move.l 282(sp),d0
    5640:	|      moveq #85,d1
    5642:	|      cmp.l d0,d1
    5644:	|  /-- beq.s 564c <openAndVerify+0x128>
    5646:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    564c:	|  \-> move.l 306(sp),278(sp)
    5652:	|      move.l 1b850 <DOSBase>,d0
    5658:	|      movea.l d0,a6
    565a:	|      move.l 278(sp),d1
    565e:	|      jsr -306(a6)
    5662:	|      move.l d0,274(sp)
    5666:	|      move.l 274(sp),d0
    566a:	|      moveq #68,d1
    566c:	|      cmp.l d0,d1
    566e:	|  /-- beq.s 5676 <openAndVerify+0x152>
    5670:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5676:	|  \-> move.l 306(sp),270(sp)
    567c:	|      move.l 1b850 <DOSBase>,d0
    5682:	|      movea.l d0,a6
    5684:	|      move.l 270(sp),d1
    5688:	|      jsr -306(a6)
    568c:	|      move.l d0,266(sp)
    5690:	|      move.l 266(sp),d1
    5694:	|      move.b 16(sp),d0
    5698:	|      ext.w d0
    569a:	|      movea.w d0,a0
    569c:	|      cmpa.l d1,a0
    569e:	|  /-- beq.s 56a6 <openAndVerify+0x182>
    56a0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    56a6:	|  \-> move.l 306(sp),262(sp)
    56ac:	|      move.l 1b850 <DOSBase>,d0
    56b2:	|      movea.l d0,a6
    56b4:	|      move.l 262(sp),d1
    56b8:	|      jsr -306(a6)
    56bc:	|      move.l d0,258(sp)
    56c0:	|      move.l 258(sp),d1
    56c4:	|      move.b 14(sp),d0
    56c8:	|      ext.w d0
    56ca:	|      movea.w d0,a0
    56cc:	|      cmpa.l d1,a0
    56ce:	|  /-- beq.s 56d6 <openAndVerify+0x1b2>
    56d0:	|  |   move.w #1,322(sp)
	if (headerBad) {
    56d6:	|  \-> tst.w 322(sp)
    56da:	|  /-- beq.s 5732 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    56dc:	|  |   move.l 1b850 <DOSBase>,d0
    56e2:	|  |   movea.l d0,a6
    56e4:	|  |   jsr -60(a6)
    56e8:	|  |   move.l d0,174(sp)
    56ec:	|  |   move.l 174(sp),d0
    56f0:	|  |   move.l d0,170(sp)
    56f4:	|  |   move.l #96626,166(sp)
    56fc:	|  |   moveq #31,d0
    56fe:	|  |   move.l d0,162(sp)
    5702:	|  |   move.l 1b850 <DOSBase>,d0
    5708:	|  |   movea.l d0,a6
    570a:	|  |   move.l 170(sp),d1
    570e:	|  |   move.l 166(sp),d2
    5712:	|  |   move.l 162(sp),d3
    5716:	|  |   jsr -48(a6)
    571a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    571e:	|  |   pea 17972 <PutChar+0xdae>
    5724:	|  |   jsr 16274 <KPrintF>
    572a:	|  |   addq.l #4,sp
		return NULL;
    572c:	|  |   moveq #0,d0
    572e:	+--|-- bra.w 588a <openAndVerify+0x366>
	}
	FGetC (fp);
    5732:	|  \-> move.l 306(sp),254(sp)
    5738:	|      move.l 1b850 <DOSBase>,d0
    573e:	|      movea.l d0,a6
    5740:	|      move.l 254(sp),d1
    5744:	|      jsr -306(a6)
    5748:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    574c:	|      nop
    574e:	|  /-> move.l 306(sp),246(sp)
    5754:	|  |   move.l 1b850 <DOSBase>,d0
    575a:	|  |   movea.l d0,a6
    575c:	|  |   move.l 246(sp),d1
    5760:	|  |   jsr -306(a6)
    5764:	|  |   move.l d0,242(sp)
    5768:	|  |   move.l 242(sp),d0
    576c:	|  \-- bne.s 574e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    576e:	|      move.l 306(sp),238(sp)
    5774:	|      move.l 1b850 <DOSBase>,d0
    577a:	|      movea.l d0,a6
    577c:	|      move.l 238(sp),d1
    5780:	|      jsr -306(a6)
    5784:	|      move.l d0,234(sp)
    5788:	|      move.l 234(sp),d0
    578c:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    5790:	|      move.l 306(sp),226(sp)
    5796:	|      move.l 1b850 <DOSBase>,d0
    579c:	|      movea.l d0,a6
    579e:	|      move.l 226(sp),d1
    57a2:	|      jsr -306(a6)
    57a6:	|      move.l d0,222(sp)
    57aa:	|      move.l 222(sp),d0
    57ae:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    57b2:	|      move.l 230(sp),d0
    57b6:	|      lsl.l #8,d0
    57b8:	|      add.l 218(sp),d0
    57bc:	|      movea.l 344(sp),a0
    57c0:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    57c2:	|      movea.l 344(sp),a0
    57c6:	|      move.l (a0),d0
    57c8:	|      cmpi.l #514,d0
    57ce:	|  /-- ble.s 5824 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    57d0:	|  |   move.l 1b850 <DOSBase>,d0
    57d6:	|  |   movea.l d0,a6
    57d8:	|  |   jsr -60(a6)
    57dc:	|  |   move.l d0,194(sp)
    57e0:	|  |   move.l 194(sp),d0
    57e4:	|  |   move.l d0,190(sp)
    57e8:	|  |   move.l #96653,186(sp)
    57f0:	|  |   moveq #100,d1
    57f2:	|  |   move.l d1,182(sp)
    57f6:	|  |   move.l 1b850 <DOSBase>,d0
    57fc:	|  |   movea.l d0,a6
    57fe:	|  |   move.l 190(sp),d1
    5802:	|  |   move.l 186(sp),d2
    5806:	|  |   move.l 182(sp),d3
    580a:	|  |   jsr -48(a6)
    580e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    5812:	|  |   pea 1798d <PutChar+0xdc9>
    5818:	|  |   jsr 16274 <KPrintF>
    581e:	|  |   addq.l #4,sp
		return NULL;
    5820:	|  |   moveq #0,d0
    5822:	+--|-- bra.s 588a <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    5824:	|  \-> movea.l 344(sp),a0
    5828:	|      move.l (a0),d0
    582a:	|      cmpi.l #257,d0
    5830:	|  /-- bgt.s 5886 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    5832:	|  |   move.l 1b850 <DOSBase>,d0
    5838:	|  |   movea.l d0,a6
    583a:	|  |   jsr -60(a6)
    583e:	|  |   move.l d0,214(sp)
    5842:	|  |   move.l 214(sp),d0
    5846:	|  |   move.l d0,210(sp)
    584a:	|  |   move.l #96722,206(sp)
    5852:	|  |   moveq #100,d0
    5854:	|  |   move.l d0,202(sp)
    5858:	|  |   move.l 1b850 <DOSBase>,d0
    585e:	|  |   movea.l d0,a6
    5860:	|  |   move.l 210(sp),d1
    5864:	|  |   move.l 206(sp),d2
    5868:	|  |   move.l 202(sp),d3
    586c:	|  |   jsr -48(a6)
    5870:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    5874:	|  |   pea 179d2 <PutChar+0xe0e>
    587a:	|  |   jsr 16274 <KPrintF>
    5880:	|  |   addq.l #4,sp
		return NULL;
    5882:	|  |   moveq #0,d0
    5884:	+--|-- bra.s 588a <openAndVerify+0x366>
	}
	return fp;
    5886:	|  \-> move.l 306(sp),d0
}
    588a:	\----> movem.l (sp)+,d2-d3/a6
    588e:	       lea 312(sp),sp
    5892:	       rts

00005894 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    5894:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    5896:	          move.l #112608,(sp)
	while (* huntAndDestroy) {
    589c:	   /----- bra.s 58c8 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    589e:	/--|----> movea.l (sp),a0
    58a0:	|  |      move.l (a0),d0
    58a2:	|  |      cmp.l 8(sp),d0
    58a6:	|  |  /-- bne.s 58be <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    58a8:	|  |  |   movea.l (sp),a0
    58aa:	|  |  |   movea.l (a0),a0
    58ac:	|  |  |   move.l 44(a0),d0
    58b0:	|  |  |   movea.l (sp),a0
    58b2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    58b4:	|  |  |   movea.l 8(sp),a0
    58b8:	|  |  |   clr.l 44(a0)
    58bc:	|  +--|-- bra.s 58c8 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    58be:	|  |  \-> movea.l (sp),a0
    58c0:	|  |      move.l (a0),d0
    58c2:	|  |      moveq #44,d1
    58c4:	|  |      add.l d0,d1
    58c6:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    58c8:	|  \----> movea.l (sp),a0
    58ca:	|         move.l (a0),d0
    58cc:	\-------- bne.s 589e <pauseFunction+0xa>
		}
	}
}
    58ce:	          nop
    58d0:	          nop
    58d2:	          addq.l #4,sp
    58d4:	          rts

000058d6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    58d6:	move.l 1b7e0 <allRunningFunctions>,d0
    58dc:	movea.l 4(sp),a0
    58e0:	move.l d0,44(a0)
	allRunningFunctions = fun;
    58e4:	move.l 4(sp),1b7e0 <allRunningFunctions>
}
    58ec:	nop
    58ee:	rts

000058f0 <runSludge>:

BOOL runSludge () {
    58f0:	                   lea -12(sp),sp
    58f4:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    58f6:	                   move.l 1b7e0 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    58fe:	      /----------- bra.s 597a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    5900:	   /--|----------> movea.l 12(sp),a0
    5904:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    590a:	   |  |            movea.l 12(sp),a0
    590e:	   |  |            move.b 56(a0),d0
    5912:	   |  |  /-------- bne.s 5974 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    5914:	   |  |  |         movea.l 12(sp),a0
    5918:	   |  |  |         move.l 12(a0),d0
    591c:	   |  |  |  /----- beq.s 5946 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    591e:	   |  |  |  |      movea.l 12(sp),a0
    5922:	   |  |  |  |      move.l 12(a0),d0
    5926:	   |  |  |  |  /-- bpl.s 5932 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    5928:	   |  |  |  |  |   movea.l 12(sp),a0
    592c:	   |  |  |  |  |   clr.l 12(a0)
    5930:	   |  |  +--|--|-- bra.s 5974 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    5932:	   |  |  |  |  \-> movea.l 12(sp),a0
    5936:	   |  |  |  |      move.l 12(a0),d0
    593a:	   |  |  |  |      subq.l #1,d0
    593c:	   |  |  |  |      movea.l 12(sp),a0
    5940:	   |  |  |  |      move.l d0,12(a0)
    5944:	   |  |  +--|----- bra.s 5974 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    5946:	   |  |  |  \----> movea.l 12(sp),a0
    594a:	   |  |  |         move.w 50(a0),d0
    594e:	   |  |  |     /-- beq.s 595e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    5950:	   |  |  |     |   movea.l 12(sp),a0
    5954:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5958:	   |  |  |     |   jsr 6f82 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    595e:	   |  |  |     \-> move.l 12(sp),-(sp)
    5962:	   |  |  |         jsr 38be <continueFunction>
    5968:	   |  |  |         addq.l #4,sp
    596a:	   |  |  |         tst.w d0
    596c:	   |  |  +-------- bne.s 5974 <runSludge+0x84>
					return FALSE;
    596e:	   |  |  |         clr.w d0
    5970:	/--|--|--|-------- bra.w 5a00 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    5974:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    597a:	|  |  \----------> tst.l 12(sp)
    597e:	|  \-------------- bne.s 5900 <runSludge+0x10>
	}

	if (loadNow) {
    5980:	|                  move.l 1b814 <loadNow>,d0
    5986:	|        /-------- beq.s 59fe <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5988:	|        |         movea.l 1b814 <loadNow>,a0
    598e:	|        |         move.b (a0),d0
    5990:	|        |         cmpi.b #58,d0
    5994:	|        |  /----- bne.s 59c8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    5996:	|        |  |      move.l 1b814 <loadNow>,d0
    599c:	|        |  |      addq.l #1,d0
    599e:	|        |  |      move.l d0,-(sp)
    59a0:	|        |  |      jsr b91a <saveGame>
    59a6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    59a8:	|        |  |      movea.l 1b96a <saverFunc>,a0
    59ae:	|        |  |      lea 28(a0),a0
    59b2:	|        |  |      pea 1 <_start+0x1>
    59b6:	|        |  |      pea 1 <_start+0x1>
    59ba:	|        |  |      move.l a0,-(sp)
    59bc:	|        |  |      jsr 14246 <setVariable>
    59c2:	|        |  |      lea 12(sp),sp
    59c6:	|        |  |  /-- bra.s 59e0 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    59c8:	|        |  \--|-> move.l 1b814 <loadNow>,d0
    59ce:	|        |     |   move.l d0,-(sp)
    59d0:	|        |     |   jsr b462 <loadGame>
    59d6:	|        |     |   addq.l #4,sp
    59d8:	|        |     |   tst.w d0
    59da:	|        |     +-- bne.s 59e0 <runSludge+0xf0>
    59dc:	|        |     |   clr.w d0
    59de:	+--------|-----|-- bra.s 5a00 <runSludge+0x110>
		}
		FreeVec(loadNow);
    59e0:	|        |     \-> move.l 1b814 <loadNow>,8(sp)
    59e8:	|        |         move.l 1b848 <SysBase>,d0
    59ee:	|        |         movea.l d0,a6
    59f0:	|        |         movea.l 8(sp),a1
    59f4:	|        |         jsr -690(a6)
		loadNow = NULL;
    59f8:	|        |         clr.l 1b814 <loadNow>
	}

	return TRUE;
    59fe:	|        \-------> moveq #1,d0
}
    5a00:	\----------------> movea.l (sp)+,a6
    5a02:	                   lea 12(sp),sp
    5a06:	                   rts

00005a08 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    5a08:	movea.l 1b1c2 <currentEvents>,a0
    5a0e:	move.l (a0),d0
    5a10:	move.l 4(sp),-(sp)
    5a14:	move.l d0,-(sp)
    5a16:	jsr 8d0 <put2bytes>
    5a1c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    5a1e:	movea.l 1b1c2 <currentEvents>,a0
    5a24:	move.l 4(a0),d0
    5a28:	move.l 4(sp),-(sp)
    5a2c:	move.l d0,-(sp)
    5a2e:	jsr 8d0 <put2bytes>
    5a34:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    5a36:	movea.l 1b1c2 <currentEvents>,a0
    5a3c:	move.l 8(a0),d0
    5a40:	move.l 4(sp),-(sp)
    5a44:	move.l d0,-(sp)
    5a46:	jsr 8d0 <put2bytes>
    5a4c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    5a4e:	movea.l 1b1c2 <currentEvents>,a0
    5a54:	move.l 12(a0),d0
    5a58:	move.l 4(sp),-(sp)
    5a5c:	move.l d0,-(sp)
    5a5e:	jsr 8d0 <put2bytes>
    5a64:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    5a66:	movea.l 1b1c2 <currentEvents>,a0
    5a6c:	move.l 16(a0),d0
    5a70:	move.l 4(sp),-(sp)
    5a74:	move.l d0,-(sp)
    5a76:	jsr 8d0 <put2bytes>
    5a7c:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    5a7e:	movea.l 1b1c2 <currentEvents>,a0
    5a84:	move.l 20(a0),d0
    5a88:	move.l 4(sp),-(sp)
    5a8c:	move.l d0,-(sp)
    5a8e:	jsr 8d0 <put2bytes>
    5a94:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    5a96:	movea.l 1b1c2 <currentEvents>,a0
    5a9c:	move.l 24(a0),d0
    5aa0:	move.l 4(sp),-(sp)
    5aa4:	move.l d0,-(sp)
    5aa6:	jsr 8d0 <put2bytes>
    5aac:	addq.l #8,sp
}
    5aae:	nop
    5ab0:	rts

00005ab2 <sludgeDisplay>:

void sludgeDisplay () {					
    5ab2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5ab4:	move.l #14675968,(sp)
	displayCursor();
    5aba:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    5ac0:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    5ac6:	jsr 1bc8 <CstRestoreScreen>
	drawPeople();
    5acc:	jsr 9282 <drawPeople>
	CstSwapBuffer();
    5ad2:	jsr 294a <CstSwapBuffer>
}
    5ad8:	nop
    5ada:	addq.l #4,sp
    5adc:	rts

00005ade <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    5ade:	      /-- bra.s 5afe <stackSetByIndex+0x20>
		vS = vS->next;
    5ae0:	/-----|-> movea.l 4(sp),a0
    5ae4:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    5aea:	|     +-- bne.s 5afe <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    5aec:	|     |   pea 17a19 <PutChar+0xe55>
    5af2:	|     |   jsr 16274 <KPrintF>
    5af8:	|     |   addq.l #4,sp
			return FALSE;
    5afa:	|     |   clr.w d0
    5afc:	|  /--|-- bra.s 5b20 <stackSetByIndex+0x42>
	while (theIndex--) {
    5afe:	|  |  \-> move.l 8(sp),d0
    5b02:	|  |      move.l d0,d1
    5b04:	|  |      subq.l #1,d1
    5b06:	|  |      move.l d1,8(sp)
    5b0a:	|  |      tst.l d0
    5b0c:	\--|----- bne.s 5ae0 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    5b0e:	   |      move.l 4(sp),d0
    5b12:	   |      move.l d0,-(sp)
    5b14:	   |      move.l 16(sp),-(sp)
    5b18:	   |      jsr 13e0e <copyVariable>
    5b1e:	   |      addq.l #8,sp
}
    5b20:	   \----> rts

00005b22 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    5b22:	             lea -24(sp),sp
    5b26:	             move.l a6,-(sp)
    5b28:	             move.l 48(sp),d0
    5b2c:	             move.w d0,d0
    5b2e:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    5b32:	             moveq #58,d0
    5b34:	             move.l d0,24(sp)
    5b38:	             clr.l 20(sp)
    5b3c:	             move.l 1b848 <SysBase>,d0
    5b42:	             movea.l d0,a6
    5b44:	             move.l 24(sp),d0
    5b48:	             move.l 20(sp),d1
    5b4c:	             jsr -684(a6)
    5b50:	             move.l d0,16(sp)
    5b54:	             move.l 16(sp),d0
    5b58:	             move.l d0,12(sp)
	if(!newFunc) {
    5b5c:	         /-- bne.s 5b72 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5b5e:	         |   pea 17a32 <PutChar+0xe6e>
    5b64:	         |   jsr 16274 <KPrintF>
    5b6a:	         |   addq.l #4,sp
		return 0;
    5b6c:	         |   moveq #0,d0
    5b6e:	/--------|-- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    5b72:	|        \-> move.l 32(sp),d0
    5b76:	|            movea.l 12(sp),a0
    5b7a:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5b7c:	|            move.l 12(sp),-(sp)
    5b80:	|            jsr 5292 <loadFunctionCode>
    5b86:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5b88:	|            movea.l 12(sp),a0
    5b8c:	|            move.l 16(a0),d1
    5b90:	|            move.l 36(sp),d0
    5b94:	|            cmp.l d1,d0
    5b96:	|        /-- beq.s 5bac <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5b98:	|        |   pea 17a5b <PutChar+0xe97>
    5b9e:	|        |   jsr 16274 <KPrintF>
    5ba4:	|        |   addq.l #4,sp
		return NULL; 
    5ba6:	|        |   moveq #0,d0
    5ba8:	+--------|-- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5bac:	|        \-> movea.l 12(sp),a0
    5bb0:	|            move.l 16(a0),d1
    5bb4:	|            movea.l 12(sp),a0
    5bb8:	|            move.l 8(a0),d0
    5bbc:	|            cmp.l d1,d0
    5bbe:	|  /-------- bge.s 5c28 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5bc0:	|  |         pea 17a77 <PutChar+0xeb3>
    5bc6:	|  |         jsr 16274 <KPrintF>
    5bcc:	|  |         addq.l #4,sp
		return NULL; 
    5bce:	|  |         moveq #0,d0
    5bd0:	+--|-------- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5bd4:	|  |  /----> movea.l 44(sp),a0
    5bd8:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5bdc:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5be0:	|  |  |      movea.l 44(sp),a0
    5be4:	|  |  |      move.l (a0),d0
    5be6:	|  |  |  /-- bne.s 5bfc <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5be8:	|  |  |  |   pea 17aa1 <PutChar+0xedd>
    5bee:	|  |  |  |   jsr 16274 <KPrintF>
    5bf4:	|  |  |  |   addq.l #4,sp
			return NULL;
    5bf6:	|  |  |  |   moveq #0,d0
    5bf8:	+--|--|--|-- bra.w 5c88 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5bfc:	|  |  |  \-> movea.l 12(sp),a0
    5c00:	|  |  |      move.l 20(a0),d1
    5c04:	|  |  |      move.l 36(sp),d0
    5c08:	|  |  |      lsl.l #3,d0
    5c0a:	|  |  |      add.l d0,d1
    5c0c:	|  |  |      move.l 8(sp),d0
    5c10:	|  |  |      move.l d1,-(sp)
    5c12:	|  |  |      move.l d0,-(sp)
    5c14:	|  |  |      jsr 13e0e <copyVariable>
    5c1a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5c1c:	|  |  |      move.l 44(sp),-(sp)
    5c20:	|  |  |      jsr 142d8 <trimStack>
    5c26:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5c28:	|  \--|----> tst.l 36(sp)
    5c2c:	|     \----- bne.s 5bd4 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5c2e:	|            movea.l 12(sp),a0
    5c32:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5c36:	|            movea.l 12(sp),a0
    5c3a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5c3e:	|            movea.l 12(sp),a0
    5c42:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5c48:	|            movea.l 12(sp),a0
    5c4c:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5c52:	|            movea.l 12(sp),a0
    5c56:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5c5a:	|            movea.l 12(sp),a0
    5c5e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5c62:	|            movea.l 12(sp),a0
    5c66:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5c6a:	|            movea.l 12(sp),a0
    5c6e:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5c72:	|            movea.l 12(sp),a0
    5c76:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5c7a:	|            move.l 12(sp),-(sp)
    5c7e:	|            jsr 58d6 <restartFunction>
    5c84:	|            addq.l #4,sp
	return 1;
    5c86:	|            moveq #1,d0
}
    5c88:	\----------> movea.l (sp)+,a6
    5c8a:	             lea 24(sp),sp
    5c8e:	             rts

00005c90 <unfreezeSubs>:

void unfreezeSubs () {
    5c90:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5c92:	          move.l 1b7e0 <allRunningFunctions>,(sp)

	while (thisFunction) {
    5c98:	   /----- bra.s 5cb6 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    5c9a:	/--|----> movea.l (sp),a0
    5c9c:	|  |      move.b 56(a0),d0
    5ca0:	|  |  /-- beq.s 5cb0 <unfreezeSubs+0x20>
    5ca2:	|  |  |   movea.l (sp),a0
    5ca4:	|  |  |   move.b 56(a0),d0
    5ca8:	|  |  |   subq.b #1,d0
    5caa:	|  |  |   movea.l (sp),a0
    5cac:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    5cb0:	|  |  \-> movea.l (sp),a0
    5cb2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5cb6:	|  \----> tst.l (sp)
    5cb8:	\-------- bne.s 5c9a <unfreezeSubs+0xa>
	}
}
    5cba:	          nop
    5cbc:	          nop
    5cbe:	          addq.l #4,sp
    5cc0:	          rts

00005cc2 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5cc2:	clr.w 1b1ce <sliceBusy>
}
    5cc8:	nop
    5cca:	rts

00005ccc <getNumberedString>:

char * getNumberedString (int value) {
    5ccc:	       lea -56(sp),sp
    5cd0:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5cd4:	       move.w 1b1ce <sliceBusy>,d0
    5cda:	   /-- beq.s 5d24 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5cdc:	   |   move.l 1b850 <DOSBase>,d0
    5ce2:	   |   movea.l d0,a6
    5ce4:	   |   jsr -60(a6)
    5ce8:	   |   move.l d0,28(sp)
    5cec:	   |   move.l 28(sp),d0
    5cf0:	   |   move.l d0,24(sp)
    5cf4:	   |   move.l #97004,20(sp)
    5cfc:	   |   moveq #76,d0
    5cfe:	   |   move.l d0,16(sp)
    5d02:	   |   move.l 1b850 <DOSBase>,d0
    5d08:	   |   movea.l d0,a6
    5d0a:	   |   move.l 24(sp),d1
    5d0e:	   |   move.l 20(sp),d2
    5d12:	   |   move.l 16(sp),d3
    5d16:	   |   jsr -48(a6)
    5d1a:	   |   move.l d0,12(sp)
		return NULL;
    5d1e:	   |   moveq #0,d0
    5d20:	/--|-- bra.w 5dc0 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5d24:	|  \-> move.l 1b830 <bigDataFile>,64(sp)
    5d2c:	|      move.l 72(sp),d0
    5d30:	|      add.l d0,d0
    5d32:	|      add.l d0,d0
    5d34:	|      move.l d0,d1
    5d36:	|      move.l 1b83c <startOfTextIndex>,d0
    5d3c:	|      add.l d1,d0
    5d3e:	|      move.l d0,60(sp)
    5d42:	|      moveq #-1,d0
    5d44:	|      move.l d0,56(sp)
    5d48:	|      move.l 1b850 <DOSBase>,d0
    5d4e:	|      movea.l d0,a6
    5d50:	|      move.l 64(sp),d1
    5d54:	|      move.l 60(sp),d2
    5d58:	|      move.l 56(sp),d3
    5d5c:	|      jsr -66(a6)
    5d60:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5d64:	|      move.l 1b830 <bigDataFile>,d0
    5d6a:	|      move.l d0,-(sp)
    5d6c:	|      jsr 718 <get4bytes>
    5d72:	|      addq.l #4,sp
    5d74:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5d78:	|      move.l 1b830 <bigDataFile>,48(sp)
    5d80:	|      move.l 72(sp),44(sp)
    5d86:	|      moveq #-1,d0
    5d88:	|      move.l d0,40(sp)
    5d8c:	|      move.l 1b850 <DOSBase>,d0
    5d92:	|      movea.l d0,a6
    5d94:	|      move.l 48(sp),d1
    5d98:	|      move.l 44(sp),d2
    5d9c:	|      move.l 40(sp),d3
    5da0:	|      jsr -66(a6)
    5da4:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5da8:	|      move.l 1b830 <bigDataFile>,d0
    5dae:	|      move.l d0,-(sp)
    5db0:	|      jsr b02 <readString>
    5db6:	|      addq.l #4,sp
    5db8:	|      move.l d0,32(sp)
	
	return s;
    5dbc:	|      move.l 32(sp),d0
}
    5dc0:	\----> movem.l (sp)+,d2-d3/a6
    5dc4:	       lea 56(sp),sp
    5dc8:	       rts

00005dca <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5dca:	       lea -32(sp),sp
    5dce:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5dd2:	       move.w 1b1ce <sliceBusy>,d0
    5dd8:	   /-- beq.s 5df4 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5dda:	   |   pea 17b39 <PutChar+0xf75>
    5de0:	   |   pea 17b57 <PutChar+0xf93>
    5de6:	   |   jsr 16274 <KPrintF>
    5dec:	   |   addq.l #8,sp
		return 0;
    5dee:	   |   moveq #0,d0
    5df0:	/--|-- bra.w 5e88 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5df4:	|  \-> move.l 1b830 <bigDataFile>,40(sp)
    5dfc:	|      move.l 48(sp),d0
    5e00:	|      add.l d0,d0
    5e02:	|      add.l d0,d0
    5e04:	|      move.l d0,d1
    5e06:	|      move.l 1b838 <startOfDataIndex>,d0
    5e0c:	|      add.l d1,d0
    5e0e:	|      move.l d0,36(sp)
    5e12:	|      moveq #-1,d0
    5e14:	|      move.l d0,32(sp)
    5e18:	|      move.l 1b850 <DOSBase>,d0
    5e1e:	|      movea.l d0,a6
    5e20:	|      move.l 40(sp),d1
    5e24:	|      move.l 36(sp),d2
    5e28:	|      move.l 32(sp),d3
    5e2c:	|      jsr -66(a6)
    5e30:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5e34:	|      move.l 1b830 <bigDataFile>,24(sp)
    5e3c:	|      move.l 1b830 <bigDataFile>,d0
    5e42:	|      move.l d0,-(sp)
    5e44:	|      jsr 718 <get4bytes>
    5e4a:	|      addq.l #4,sp
    5e4c:	|      move.l d0,20(sp)
    5e50:	|      clr.l 16(sp)
    5e54:	|      move.l 1b850 <DOSBase>,d0
    5e5a:	|      movea.l d0,a6
    5e5c:	|      move.l 24(sp),d1
    5e60:	|      move.l 20(sp),d2
    5e64:	|      move.l 16(sp),d3
    5e68:	|      jsr -66(a6)
    5e6c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5e70:	|      move.w #1,1b1ce <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5e78:	|      move.l 1b830 <bigDataFile>,d0
    5e7e:	|      move.l d0,-(sp)
    5e80:	|      jsr 718 <get4bytes>
    5e86:	|      addq.l #4,sp
}
    5e88:	\----> movem.l (sp)+,d2-d3/a6
    5e8c:	       lea 32(sp),sp
    5e90:	       rts

00005e92 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5e92:	       lea -32(sp),sp
    5e96:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5e9a:	       move.w 1b1ce <sliceBusy>,d0
    5ea0:	   /-- beq.s 5ebc <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5ea2:	   |   pea 17b39 <PutChar+0xf75>
    5ea8:	   |   pea 17b57 <PutChar+0xf93>
    5eae:	   |   jsr 16274 <KPrintF>
    5eb4:	   |   addq.l #8,sp
        return FALSE;
    5eb6:	   |   clr.w d0
    5eb8:	/--|-- bra.w 5f48 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5ebc:	|  \-> move.l 1b830 <bigDataFile>,40(sp)
    5ec4:	|      move.l 48(sp),d0
    5ec8:	|      add.l d0,d0
    5eca:	|      add.l d0,d0
    5ecc:	|      move.l d0,d1
    5ece:	|      move.l 1b844 <startOfObjectIndex>,d0
    5ed4:	|      add.l d1,d0
    5ed6:	|      move.l d0,36(sp)
    5eda:	|      moveq #-1,d0
    5edc:	|      move.l d0,32(sp)
    5ee0:	|      move.l 1b850 <DOSBase>,d0
    5ee6:	|      movea.l d0,a6
    5ee8:	|      move.l 40(sp),d1
    5eec:	|      move.l 36(sp),d2
    5ef0:	|      move.l 32(sp),d3
    5ef4:	|      jsr -66(a6)
    5ef8:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5efc:	|      move.l 1b830 <bigDataFile>,24(sp)
    5f04:	|      move.l 1b830 <bigDataFile>,d0
    5f0a:	|      move.l d0,-(sp)
    5f0c:	|      jsr 718 <get4bytes>
    5f12:	|      addq.l #4,sp
    5f14:	|      move.l d0,20(sp)
    5f18:	|      moveq #-1,d0
    5f1a:	|      move.l d0,16(sp)
    5f1e:	|      move.l 1b850 <DOSBase>,d0
    5f24:	|      movea.l d0,a6
    5f26:	|      move.l 24(sp),d1
    5f2a:	|      move.l 20(sp),d2
    5f2e:	|      move.l 16(sp),d3
    5f32:	|      jsr -66(a6)
    5f36:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5f3a:	|      move.w #1,1b1ce <sliceBusy>
    5f42:	|      move.w 1b1ce <sliceBusy>,d0
}
    5f48:	\----> movem.l (sp)+,d2-d3/a6
    5f4c:	       lea 32(sp),sp
    5f50:	       rts

00005f52 <openSubSlice>:

BOOL openSubSlice (int num) {
    5f52:	       lea -32(sp),sp
    5f56:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5f5a:	       move.w 1b1ce <sliceBusy>,d0
    5f60:	   /-- beq.s 5f7c <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5f62:	   |   pea 17b39 <PutChar+0xf75>
    5f68:	   |   pea 17b57 <PutChar+0xf93>
    5f6e:	   |   jsr 16274 <KPrintF>
    5f74:	   |   addq.l #8,sp
		return FALSE;
    5f76:	   |   clr.w d0
    5f78:	/--|-- bra.w 6008 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5f7c:	|  \-> move.l 1b830 <bigDataFile>,40(sp)
    5f84:	|      move.l 48(sp),d0
    5f88:	|      add.l d0,d0
    5f8a:	|      add.l d0,d0
    5f8c:	|      move.l d0,d1
    5f8e:	|      move.l 1b840 <startOfSubIndex>,d0
    5f94:	|      add.l d1,d0
    5f96:	|      move.l d0,36(sp)
    5f9a:	|      moveq #-1,d0
    5f9c:	|      move.l d0,32(sp)
    5fa0:	|      move.l 1b850 <DOSBase>,d0
    5fa6:	|      movea.l d0,a6
    5fa8:	|      move.l 40(sp),d1
    5fac:	|      move.l 36(sp),d2
    5fb0:	|      move.l 32(sp),d3
    5fb4:	|      jsr -66(a6)
    5fb8:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5fbc:	|      move.l 1b830 <bigDataFile>,24(sp)
    5fc4:	|      move.l 1b830 <bigDataFile>,d0
    5fca:	|      move.l d0,-(sp)
    5fcc:	|      jsr 718 <get4bytes>
    5fd2:	|      addq.l #4,sp
    5fd4:	|      move.l d0,20(sp)
    5fd8:	|      moveq #-1,d0
    5fda:	|      move.l d0,16(sp)
    5fde:	|      move.l 1b850 <DOSBase>,d0
    5fe4:	|      movea.l d0,a6
    5fe6:	|      move.l 24(sp),d1
    5fea:	|      move.l 20(sp),d2
    5fee:	|      move.l 16(sp),d3
    5ff2:	|      jsr -66(a6)
    5ff6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5ffa:	|      move.w #1,1b1ce <sliceBusy>
    6002:	|      move.w 1b1ce <sliceBusy>,d0
}
    6008:	\----> movem.l (sp)+,d2-d3/a6
    600c:	       lea 32(sp),sp
    6010:	       rts

00006012 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6012:	       lea -180(sp),sp
    6016:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    601a:	       tst.l 196(sp)
    601e:	/----- beq.s 605e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6020:	|      move.l 196(sp),1b830 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6028:	|      move.l 196(sp),168(sp)
    602e:	|      clr.l 164(sp)
    6032:	|      clr.l 160(sp)
    6036:	|      move.l 1b850 <DOSBase>,d0
    603c:	|      movea.l d0,a6
    603e:	|      move.l 168(sp),d1
    6042:	|      move.l 164(sp),d2
    6046:	|      move.l 160(sp),d3
    604a:	|      jsr -66(a6)
    604e:	|      move.l d0,156(sp)
    6052:	|      move.l 156(sp),d0
    6056:	|      move.l d0,1b834 <startIndex>
    605c:	|  /-- bra.s 6098 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    605e:	\--|-> move.l 1b830 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6066:	   |   move.l 196(sp),184(sp)
    606c:	   |   move.l 1b834 <startIndex>,d0
    6072:	   |   move.l d0,180(sp)
    6076:	   |   moveq #-1,d0
    6078:	   |   move.l d0,176(sp)
    607c:	   |   move.l 1b850 <DOSBase>,d0
    6082:	   |   movea.l d0,a6
    6084:	   |   move.l 184(sp),d1
    6088:	   |   move.l 180(sp),d2
    608c:	   |   move.l 176(sp),d3
    6090:	   |   jsr -66(a6)
    6094:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6098:	   \-> clr.w 1b1ce <sliceBusy>

	if (skipBefore > numLanguages) {
    609e:	       move.l 204(sp),d0
    60a2:	       cmp.l 200(sp),d0
    60a6:	   /-- bls.s 60ba <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    60a8:	   |   pea 17b71 <PutChar+0xfad>
    60ae:	   |   jsr 16274 <KPrintF>
    60b4:	   |   addq.l #4,sp
		skipBefore = 0;
    60b6:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    60ba:	   \-> move.l 200(sp),d0
    60be:	       sub.l 204(sp),d0
    60c2:	       move.l d0,188(sp)
	while (skipBefore) {
    60c6:	   /-- bra.s 6104 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    60c8:	/--|-> move.l 196(sp),24(sp)
    60ce:	|  |   move.l 196(sp),-(sp)
    60d2:	|  |   jsr 718 <get4bytes>
    60d8:	|  |   addq.l #4,sp
    60da:	|  |   move.l d0,20(sp)
    60de:	|  |   moveq #-1,d0
    60e0:	|  |   move.l d0,16(sp)
    60e4:	|  |   move.l 1b850 <DOSBase>,d0
    60ea:	|  |   movea.l d0,a6
    60ec:	|  |   move.l 24(sp),d1
    60f0:	|  |   move.l 20(sp),d2
    60f4:	|  |   move.l 16(sp),d3
    60f8:	|  |   jsr -66(a6)
    60fc:	|  |   move.l d0,12(sp)
		skipBefore --;
    6100:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6104:	|  \-> tst.l 204(sp)
    6108:	\----- bne.s 60c8 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    610a:	       move.l 196(sp),152(sp)
    6110:	       clr.l 148(sp)
    6114:	       clr.l 144(sp)
    6118:	       move.l 1b850 <DOSBase>,d0
    611e:	       movea.l d0,a6
    6120:	       move.l 152(sp),d1
    6124:	       move.l 148(sp),d2
    6128:	       move.l 144(sp),d3
    612c:	       jsr -66(a6)
    6130:	       move.l d0,140(sp)
    6134:	       move.l 140(sp),d0
    6138:	       addq.l #4,d0
    613a:	       move.l d0,1b83c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6140:	       move.l 196(sp),136(sp)
    6146:	       move.l 196(sp),-(sp)
    614a:	       jsr 718 <get4bytes>
    6150:	       addq.l #4,sp
    6152:	       move.l d0,132(sp)
    6156:	       moveq #-1,d0
    6158:	       move.l d0,128(sp)
    615c:	       move.l 1b850 <DOSBase>,d0
    6162:	       movea.l d0,a6
    6164:	       move.l 136(sp),d1
    6168:	       move.l 132(sp),d2
    616c:	       move.l 128(sp),d3
    6170:	       jsr -66(a6)
    6174:	       move.l d0,124(sp)

	while (skipAfter) {
    6178:	   /-- bra.s 61b6 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    617a:	/--|-> move.l 196(sp),40(sp)
    6180:	|  |   move.l 196(sp),-(sp)
    6184:	|  |   jsr 718 <get4bytes>
    618a:	|  |   addq.l #4,sp
    618c:	|  |   move.l d0,36(sp)
    6190:	|  |   moveq #-1,d0
    6192:	|  |   move.l d0,32(sp)
    6196:	|  |   move.l 1b850 <DOSBase>,d0
    619c:	|  |   movea.l d0,a6
    619e:	|  |   move.l 40(sp),d1
    61a2:	|  |   move.l 36(sp),d2
    61a6:	|  |   move.l 32(sp),d3
    61aa:	|  |   jsr -66(a6)
    61ae:	|  |   move.l d0,28(sp)
		skipAfter --;
    61b2:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    61b6:	|  \-> tst.l 188(sp)
    61ba:	\----- bne.s 617a <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    61bc:	       move.l 196(sp),120(sp)
    61c2:	       clr.l 116(sp)
    61c6:	       clr.l 112(sp)
    61ca:	       move.l 1b850 <DOSBase>,d0
    61d0:	       movea.l d0,a6
    61d2:	       move.l 120(sp),d1
    61d6:	       move.l 116(sp),d2
    61da:	       move.l 112(sp),d3
    61de:	       jsr -66(a6)
    61e2:	       move.l d0,108(sp)
    61e6:	       move.l 108(sp),d0
    61ea:	       addq.l #4,d0
    61ec:	       move.l d0,1b840 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    61f2:	       move.l 196(sp),104(sp)
    61f8:	       move.l 196(sp),-(sp)
    61fc:	       jsr 718 <get4bytes>
    6202:	       addq.l #4,sp
    6204:	       move.l d0,100(sp)
    6208:	       clr.l 96(sp)
    620c:	       move.l 1b850 <DOSBase>,d0
    6212:	       movea.l d0,a6
    6214:	       move.l 104(sp),d1
    6218:	       move.l 100(sp),d2
    621c:	       move.l 96(sp),d3
    6220:	       jsr -66(a6)
    6224:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6228:	       move.l 196(sp),88(sp)
    622e:	       clr.l 84(sp)
    6232:	       clr.l 80(sp)
    6236:	       move.l 1b850 <DOSBase>,d0
    623c:	       movea.l d0,a6
    623e:	       move.l 88(sp),d1
    6242:	       move.l 84(sp),d2
    6246:	       move.l 80(sp),d3
    624a:	       jsr -66(a6)
    624e:	       move.l d0,76(sp)
    6252:	       move.l 76(sp),d0
    6256:	       addq.l #4,d0
    6258:	       move.l d0,1b844 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    625e:	       move.l 196(sp),72(sp)
    6264:	       move.l 196(sp),-(sp)
    6268:	       jsr 718 <get4bytes>
    626e:	       addq.l #4,sp
    6270:	       move.l d0,68(sp)
    6274:	       clr.l 64(sp)
    6278:	       move.l 1b850 <DOSBase>,d0
    627e:	       movea.l d0,a6
    6280:	       move.l 72(sp),d1
    6284:	       move.l 68(sp),d2
    6288:	       move.l 64(sp),d3
    628c:	       jsr -66(a6)
    6290:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6294:	       move.l 196(sp),56(sp)
    629a:	       clr.l 52(sp)
    629e:	       clr.l 48(sp)
    62a2:	       move.l 1b850 <DOSBase>,d0
    62a8:	       movea.l d0,a6
    62aa:	       move.l 56(sp),d1
    62ae:	       move.l 52(sp),d2
    62b2:	       move.l 48(sp),d3
    62b6:	       jsr -66(a6)
    62ba:	       move.l d0,44(sp)
    62be:	       move.l 44(sp),d0
    62c2:	       move.l d0,1b838 <startOfDataIndex>
    62c8:	       nop
    62ca:	       movem.l (sp)+,d2-d3/a6
    62ce:	       lea 180(sp),sp
    62d2:	       rts

000062d4 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    62d4:	    lea -20(sp),sp
    62d8:	    move.l a6,-(sp)
    62da:	    move.l d7,-(sp)
	APTR vbr = 0;
    62dc:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    62e0:	    move.w #20090,10(sp)
    62e6:	    move.w #2049,12(sp)
    62ec:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    62f2:	    movea.l 1b848 <SysBase>,a0
    62f8:	    move.w 296(a0),d0
    62fc:	    move.w d0,d0
    62fe:	    andi.l #65535,d0
    6304:	    moveq #1,d1
    6306:	    and.l d1,d0
    6308:	/-- beq.s 6336 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    630a:	|   lea 28(sp),a0
    630e:	|   lea -18(a0),a0
    6312:	|   move.l a0,20(sp)
    6316:	|   move.l 1b848 <SysBase>,d0
    631c:	|   movea.l d0,a6
    631e:	|   move.l 20(sp),d7
    6322:	|   exg d7,a5
    6324:	|   jsr -30(a6)
    6328:	|   exg d7,a5
    632a:	|   move.l d0,16(sp)
    632e:	|   move.l 16(sp),d0
    6332:	|   move.l d0,24(sp)

	return vbr;
    6336:	\-> move.l 24(sp),d0
}
    633a:	    move.l (sp)+,d7
    633c:	    movea.l (sp)+,a6
    633e:	    lea 20(sp),sp
    6342:	    rts

00006344 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6344:	movea.l 1b86e <VBR>,a0
    634a:	lea 108(a0),a0
    634e:	move.l 4(sp),(a0)
}
    6352:	nop
    6354:	rts

00006356 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6356:	movea.l 1b86e <VBR>,a0
    635c:	move.l 108(a0),d0
}
    6360:	rts

00006362 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6362:	       subq.l #8,sp
    6364:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6366:	       pea 17bba <PutChar+0xff6>
    636c:	       jsr 16274 <KPrintF>
    6372:	       addq.l #4,sp
	Forbid();
    6374:	       move.l 1b848 <SysBase>,d0
    637a:	       movea.l d0,a6
    637c:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6380:	       pea 17bd2 <PutChar+0x100e>
    6386:	       jsr 16274 <KPrintF>
    638c:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    638e:	       movea.l 1b84c <custom>,a0
    6394:	       move.w 16(a0),d0
    6398:	       move.w d0,1b86c <SystemADKCON>
	SystemInts=custom->intenar;
    639e:	       movea.l 1b84c <custom>,a0
    63a4:	       move.w 28(a0),d0
    63a8:	       move.w d0,1b868 <SystemInts>
	SystemDMA=custom->dmaconr;
    63ae:	       movea.l 1b84c <custom>,a0
    63b4:	       move.w 2(a0),d0
    63b8:	       move.w d0,1b86a <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    63be:	       movea.l 1b854 <GfxBase>,a0
    63c4:	       move.l 34(a0),d0
    63c8:	       move.l d0,1b876 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    63ce:	       pea 17bf0 <PutChar+0x102c>
    63d4:	       jsr 16274 <KPrintF>
    63da:	       addq.l #4,sp
	LoadView(0);
    63dc:	       clr.l 4(sp)
    63e0:	       move.l 1b854 <GfxBase>,d0
    63e6:	       movea.l d0,a6
    63e8:	       movea.l 4(sp),a1
    63ec:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    63f0:	       pea 17c06 <PutChar+0x1042>
    63f6:	       jsr 16274 <KPrintF>
    63fc:	       addq.l #4,sp
	WaitTOF();
    63fe:	       move.l 1b854 <GfxBase>,d0
    6404:	       movea.l d0,a6
    6406:	       jsr -270(a6)
	WaitTOF();
    640a:	       move.l 1b854 <GfxBase>,d0
    6410:	       movea.l d0,a6
    6412:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6416:	       pea 17c1b <PutChar+0x1057>
    641c:	       jsr 16274 <KPrintF>
    6422:	       addq.l #4,sp
	WaitVbl();
    6424:	       jsr 161a8 <WaitVbl>
	WaitVbl();
    642a:	       jsr 161a8 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6430:	       pea 17c30 <PutChar+0x106c>
    6436:	       jsr 16274 <KPrintF>
    643c:	       addq.l #4,sp
	OwnBlitter();
    643e:	       move.l 1b854 <GfxBase>,d0
    6444:	       movea.l d0,a6
    6446:	       jsr -456(a6)
	WaitBlit();	
    644a:	       move.l 1b854 <GfxBase>,d0
    6450:	       movea.l d0,a6
    6452:	       jsr -228(a6)
	Disable();
    6456:	       move.l 1b848 <SysBase>,d0
    645c:	       movea.l d0,a6
    645e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6462:	       pea 17c51 <PutChar+0x108d>
    6468:	       jsr 16274 <KPrintF>
    646e:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6470:	       movea.l 1b84c <custom>,a0
    6476:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    647c:	       pea 17c68 <PutChar+0x10a4>
    6482:	       jsr 16274 <KPrintF>
    6488:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    648a:	       clr.l 8(sp)
    648e:	   /-- bra.s 64ac <TakeSystem+0x14a>
		custom->color[a]=0;
    6490:	/--|-> movea.l 1b84c <custom>,a0
    6496:	|  |   move.l 8(sp),d0
    649a:	|  |   addi.l #192,d0
    64a0:	|  |   add.l d0,d0
    64a2:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    64a8:	|  |   addq.l #1,8(sp)
    64ac:	|  \-> moveq #31,d0
    64ae:	|      cmp.l 8(sp),d0
    64b2:	\----- bge.s 6490 <TakeSystem+0x12e>

	WaitVbl();
    64b4:	       jsr 161a8 <WaitVbl>
	WaitVbl();
    64ba:	       jsr 161a8 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    64c0:	       pea 17c8d <PutChar+0x10c9>
    64c6:	       jsr 16274 <KPrintF>
    64cc:	       addq.l #4,sp
	VBR=GetVBR();
    64ce:	       jsr 62d4 <GetVBR>
    64d4:	       move.l d0,1b86e <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    64da:	       jsr 6356 <GetInterruptHandler>
    64e0:	       move.l d0,1b872 <SystemIrq>
}
    64e6:	       nop
    64e8:	       movea.l (sp)+,a6
    64ea:	       addq.l #8,sp
    64ec:	       rts

000064ee <FreeSystem>:

void FreeSystem() { 
    64ee:	subq.l #4,sp
    64f0:	move.l a6,-(sp)
	WaitVbl();
    64f2:	jsr 161a8 <WaitVbl>
	WaitBlit();
    64f8:	move.l 1b854 <GfxBase>,d0
    64fe:	movea.l d0,a6
    6500:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6504:	movea.l 1b84c <custom>,a0
    650a:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6510:	movea.l 1b84c <custom>,a0
    6516:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    651c:	movea.l 1b84c <custom>,a0
    6522:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    6528:	move.l 1b872 <SystemIrq>,d0
    652e:	move.l d0,-(sp)
    6530:	jsr 6344 <SetInterruptHandler>
    6536:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    6538:	movea.l 1b854 <GfxBase>,a0
    653e:	move.l 38(a0),d0
    6542:	movea.l 1b84c <custom>,a0
    6548:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    654c:	movea.l 1b854 <GfxBase>,a0
    6552:	move.l 50(a0),d0
    6556:	movea.l 1b84c <custom>,a0
    655c:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6560:	movea.l 1b84c <custom>,a0
    6566:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    656c:	move.w 1b86a <SystemDMA>,d0
    6572:	movea.l 1b84c <custom>,a0
    6578:	ori.w #-32768,d0
    657c:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6580:	move.w 1b86c <SystemADKCON>,d0
    6586:	movea.l 1b84c <custom>,a0
    658c:	ori.w #-32768,d0
    6590:	move.w d0,158(a0)

	WaitBlit();	
    6594:	move.l 1b854 <GfxBase>,d0
    659a:	movea.l d0,a6
    659c:	jsr -228(a6)
	DisownBlitter();
    65a0:	move.l 1b854 <GfxBase>,d0
    65a6:	movea.l d0,a6
    65a8:	jsr -462(a6)
	Enable();
    65ac:	move.l 1b848 <SysBase>,d0
    65b2:	movea.l d0,a6
    65b4:	jsr -126(a6)

	LoadView(ActiView);
    65b8:	move.l 1b876 <ActiView>,4(sp)
    65c0:	move.l 1b854 <GfxBase>,d0
    65c6:	movea.l d0,a6
    65c8:	movea.l 4(sp),a1
    65cc:	jsr -222(a6)
	WaitTOF();
    65d0:	move.l 1b854 <GfxBase>,d0
    65d6:	movea.l d0,a6
    65d8:	jsr -270(a6)
	WaitTOF();
    65dc:	move.l 1b854 <GfxBase>,d0
    65e2:	movea.l d0,a6
    65e4:	jsr -270(a6)

	Permit();
    65e8:	move.l 1b848 <SysBase>,d0
    65ee:	movea.l d0,a6
    65f0:	jsr -138(a6)
}
    65f4:	nop
    65f6:	movea.l (sp)+,a6
    65f8:	addq.l #4,sp
    65fa:	rts

000065fc <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    65fc:	    lea -128(sp),sp
    6600:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6604:	    movea.w #4,a0
    6608:	    move.l (a0),d0
    660a:	    move.l d0,1b848 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6610:	    move.l #14675968,1b84c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    661a:	    move.l #97457,136(sp)
    6622:	    clr.l 132(sp)
    6626:	    move.l 1b848 <SysBase>,d0
    662c:	    movea.l d0,a6
    662e:	    movea.l 136(sp),a1
    6632:	    move.l 132(sp),d0
    6636:	    jsr -552(a6)
    663a:	    move.l d0,128(sp)
    663e:	    move.l 128(sp),d0
    6642:	    move.l d0,1b854 <GfxBase>
	if (!GfxBase)
    6648:	    move.l 1b854 <GfxBase>,d0
    664e:	/-- bne.s 6664 <main+0x68>
		Exit(0);
    6650:	|   clr.l 124(sp)
    6654:	|   move.l 1b850 <DOSBase>,d0
    665a:	|   movea.l d0,a6
    665c:	|   move.l 124(sp),d1
    6660:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6664:	\-> move.l #97474,120(sp)
    666c:	    clr.l 116(sp)
    6670:	    move.l 1b848 <SysBase>,d0
    6676:	    movea.l d0,a6
    6678:	    movea.l 120(sp),a1
    667c:	    move.l 116(sp),d0
    6680:	    jsr -552(a6)
    6684:	    move.l d0,112(sp)
    6688:	    move.l 112(sp),d0
    668c:	    move.l d0,1b850 <DOSBase>
	if (!DOSBase)
    6692:	    move.l 1b850 <DOSBase>,d0
    6698:	/-- bne.s 66ae <main+0xb2>
		Exit(0);
    669a:	|   clr.l 108(sp)
    669e:	|   move.l 1b850 <DOSBase>,d0
    66a4:	|   movea.l d0,a6
    66a6:	|   move.l 108(sp),d1
    66aa:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    66ae:	\-> move.l #97486,104(sp)
    66b6:	    clr.l 100(sp)
    66ba:	    move.l 1b848 <SysBase>,d0
    66c0:	    movea.l d0,a6
    66c2:	    movea.l 104(sp),a1
    66c6:	    move.l 100(sp),d0
    66ca:	    jsr -552(a6)
    66ce:	    move.l d0,96(sp)
    66d2:	    move.l 96(sp),d0
    66d6:	    move.l d0,1b858 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    66dc:	    move.l 1b858 <MathIeeeSingBasBase>,d0
    66e2:	/-- bne.s 66f8 <main+0xfc>
		Exit(0);	
    66e4:	|   clr.l 92(sp)
    66e8:	|   move.l 1b850 <DOSBase>,d0
    66ee:	|   movea.l d0,a6
    66f0:	|   move.l 92(sp),d1
    66f4:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    66f8:	\-> move.l #97510,88(sp)
    6700:	    clr.l 84(sp)
    6704:	    move.l 1b848 <SysBase>,d0
    670a:	    movea.l d0,a6
    670c:	    movea.l 88(sp),a1
    6710:	    move.l 84(sp),d0
    6714:	    jsr -552(a6)
    6718:	    move.l d0,80(sp)
    671c:	    move.l 80(sp),d0
    6720:	    move.l d0,1b85c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6726:	    move.l 1b85c <MathIeeeSingTransBase>,d0
    672c:	/-- bne.s 6742 <main+0x146>
		Exit(0);
    672e:	|   clr.l 76(sp)
    6732:	|   move.l 1b850 <DOSBase>,d0
    6738:	|   movea.l d0,a6
    673a:	|   move.l 76(sp),d1
    673e:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6742:	\-> move.l #97536,72(sp)
    674a:	    clr.l 68(sp)
    674e:	    move.l 1b848 <SysBase>,d0
    6754:	    movea.l d0,a6
    6756:	    movea.l 72(sp),a1
    675a:	    move.l 68(sp),d0
    675e:	    jsr -552(a6)
    6762:	    move.l d0,64(sp)
    6766:	    move.l 64(sp),d0
    676a:	    move.l d0,1b864 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6770:	    move.l 1b864 <MathIeeeDoubTransBase>,d0
    6776:	/-- bne.s 678c <main+0x190>
		Exit(0);
    6778:	|   clr.l 60(sp)
    677c:	|   move.l 1b850 <DOSBase>,d0
    6782:	|   movea.l d0,a6
    6784:	|   move.l 60(sp),d1
    6788:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    678c:	\-> move.l #97562,56(sp)
    6794:	    clr.l 52(sp)
    6798:	    move.l 1b848 <SysBase>,d0
    679e:	    movea.l d0,a6
    67a0:	    movea.l 56(sp),a1
    67a4:	    move.l 52(sp),d0
    67a8:	    jsr -552(a6)
    67ac:	    move.l d0,48(sp)
    67b0:	    move.l 48(sp),d0
    67b4:	    move.l d0,1b860 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    67ba:	    move.l 1b860 <MathIeeeDoubBasBase>,d0
    67c0:	/-- bne.s 67d6 <main+0x1da>
		Exit(0);
    67c2:	|   clr.l 44(sp)
    67c6:	|   move.l 1b850 <DOSBase>,d0
    67cc:	|   movea.l d0,a6
    67ce:	|   move.l 44(sp),d1
    67d2:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    67d6:	\-> pea 17d32 <PutChar+0x116e>
    67dc:	    jsr 16274 <KPrintF>
    67e2:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    67e4:	    move.l 1b850 <DOSBase>,d0
    67ea:	    movea.l d0,a6
    67ec:	    jsr -60(a6)
    67f0:	    move.l d0,40(sp)
    67f4:	    move.l 40(sp),d0
    67f8:	    move.l d0,36(sp)
    67fc:	    move.l #97618,32(sp)
    6804:	    moveq #25,d0
    6806:	    move.l d0,28(sp)
    680a:	    move.l 1b850 <DOSBase>,d0
    6810:	    movea.l d0,a6
    6812:	    move.l 36(sp),d1
    6816:	    move.l 32(sp),d2
    681a:	    move.l 28(sp),d3
    681e:	    jsr -48(a6)
    6822:	    move.l d0,24(sp)
	Delay(50);
    6826:	    moveq #50,d0
    6828:	    move.l d0,20(sp)
    682c:	    move.l 1b850 <DOSBase>,d0
    6832:	    movea.l d0,a6
    6834:	    move.l 20(sp),d1
    6838:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    683c:	    pea 17d6b <PutChar+0x11a7>
    6842:	    jsr 16274 <KPrintF>
    6848:	    addq.l #4,sp
	TakeSystem();
    684a:	    jsr 6362 <TakeSystem>
	KPrintF("System Taken\n");
    6850:	    pea 17d7a <PutChar+0x11b6>
    6856:	    jsr 16274 <KPrintF>
    685c:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    685e:	    movea.l 1b84c <custom>,a0
    6864:	    move.w #-30721,150(a0)
	WaitVbl();
    686a:	    jsr 161a8 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    6870:	    pea 17d88 <PutChar+0x11c4>
    6876:	    jsr 16274 <KPrintF>
    687c:	    addq.l #4,sp
	main_sludge(argc, argv);	
    687e:	    move.l 148(sp),-(sp)
    6882:	    move.l 148(sp),-(sp)
    6886:	    jsr 3198 <main_sludge>
    688c:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    688e:	    jsr 64ee <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    6894:	    move.l 1b850 <DOSBase>,16(sp)
    689c:	    move.l 1b848 <SysBase>,d0
    68a2:	    movea.l d0,a6
    68a4:	    movea.l 16(sp),a1
    68a8:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    68ac:	    move.l 1b854 <GfxBase>,12(sp)
    68b4:	    move.l 1b848 <SysBase>,d0
    68ba:	    movea.l d0,a6
    68bc:	    movea.l 12(sp),a1
    68c0:	    jsr -414(a6)
    68c4:	    moveq #0,d0
}
    68c6:	    movem.l (sp)+,d2-d3/a6
    68ca:	    lea 128(sp),sp
    68ce:	    rts

000068d0 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    68d0:	    lea -16(sp),sp
    68d4:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    68d6:	    moveq #8,d0
    68d8:	    move.l d0,16(sp)
    68dc:	    clr.l 12(sp)
    68e0:	    move.l 1b848 <SysBase>,d0
    68e6:	    movea.l d0,a6
    68e8:	    move.l 16(sp),d0
    68ec:	    move.l 12(sp),d1
    68f0:	    jsr -684(a6)
    68f4:	    move.l d0,8(sp)
    68f8:	    move.l 8(sp),d0
    68fc:	    move.l d0,4(sp)
	if (!newStat) {
    6900:	/-- bne.s 6930 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    6902:	|   movea.l 1b1d0 <nowStatus>,a0
    6908:	|   move.l (a0),d0
    690a:	|   movea.l 4(sp),a0
    690e:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    6912:	|   pea 177de <PutChar+0xc1a>
    6918:	|   jsr b8 <copyString>
    691e:	|   addq.l #4,sp
    6920:	|   movea.l 4(sp),a0
    6924:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    6926:	|   movea.l 1b1d0 <nowStatus>,a0
    692c:	|   move.l 4(sp),(a0)
	}
}
    6930:	\-> nop
    6932:	    movea.l (sp)+,a6
    6934:	    lea 16(sp),sp
    6938:	    rts

0000693a <clearStatusBar>:

void clearStatusBar () {
    693a:	       lea -16(sp),sp
    693e:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    6940:	       movea.l 1b1d0 <nowStatus>,a0
    6946:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    694a:	       movea.l 1b1d0 <nowStatus>,a0
    6950:	       moveq #-1,d0
    6952:	       move.l d0,6(a0)
	while (stat) {
    6956:	   /-- bra.s 6996 <clearStatusBar+0x5c>
		kill = stat;
    6958:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    695e:	|  |   movea.l 16(sp),a0
    6962:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    6968:	|  |   movea.l 12(sp),a0
    696c:	|  |   move.l (a0),8(sp)
    6970:	|  |   move.l 1b848 <SysBase>,d0
    6976:	|  |   movea.l d0,a6
    6978:	|  |   movea.l 8(sp),a1
    697c:	|  |   jsr -690(a6)
		FreeVec(kill);
    6980:	|  |   move.l 12(sp),4(sp)
    6986:	|  |   move.l 1b848 <SysBase>,d0
    698c:	|  |   movea.l d0,a6
    698e:	|  |   movea.l 4(sp),a1
    6992:	|  |   jsr -690(a6)
	while (stat) {
    6996:	|  \-> tst.l 16(sp)
    699a:	\----- bne.s 6958 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    699c:	       movea.l 1b1d0 <nowStatus>,a0
    69a2:	       clr.l (a0)
}
    69a4:	       nop
    69a6:	       movea.l (sp)+,a6
    69a8:	       lea 16(sp),sp
    69ac:	       rts

000069ae <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    69ae:	clr.l 1b87a <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    69b4:	move.w #-1,1b87e <mainStatus+0x4>
	mainStatus.litStatus = -1;
    69bc:	moveq #-1,d0
    69be:	move.l d0,1b880 <mainStatus+0x6>
	mainStatus.statusX = 10;
    69c4:	moveq #10,d0
    69c6:	move.l d0,1b884 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    69cc:	movea.l 1b7a0 <winHeight>,a0
    69d2:	lea -15(a0),a0
    69d6:	move.l a0,d0
    69d8:	move.l d0,1b888 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    69de:	nop
    69e0:	rts

000069e2 <killLastStatus>:

void killLastStatus () {
    69e2:	    lea -12(sp),sp
    69e6:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    69e8:	    movea.l 1b1d0 <nowStatus>,a0
    69ee:	    move.l (a0),d0
    69f0:	/-- beq.s 6a3a <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    69f2:	|   movea.l 1b1d0 <nowStatus>,a0
    69f8:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    69fc:	|   movea.l 1b1d0 <nowStatus>,a0
    6a02:	|   movea.l 12(sp),a1
    6a06:	|   move.l 4(a1),d0
    6a0a:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    6a0c:	|   movea.l 12(sp),a0
    6a10:	|   move.l (a0),8(sp)
    6a14:	|   move.l 1b848 <SysBase>,d0
    6a1a:	|   movea.l d0,a6
    6a1c:	|   movea.l 8(sp),a1
    6a20:	|   jsr -690(a6)
		FreeVec(kill);
    6a24:	|   move.l 12(sp),4(sp)
    6a2a:	|   move.l 1b848 <SysBase>,d0
    6a30:	|   movea.l d0,a6
    6a32:	|   movea.l 4(sp),a1
    6a36:	|   jsr -690(a6)
	}
}
    6a3a:	\-> nop
    6a3c:	    movea.l (sp)+,a6
    6a3e:	    lea 12(sp),sp
    6a42:	    rts

00006a44 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    6a44:	movea.l 1b1d0 <nowStatus>,a0
    6a4a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    6a50:	movea.l 1b1d0 <nowStatus>,a0
    6a56:	move.l 8(sp),14(a0)
}
    6a5c:	nop
    6a5e:	rts

00006a60 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    6a60:	       lea -100(sp),sp
    6a64:	       move.l a6,-(sp)
    6a66:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    6a68:	       movea.l 1b1d0 <nowStatus>,a0
    6a6e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    6a72:	       movea.l 1b1d0 <nowStatus>,a0
    6a78:	       move.w 4(a0),d0
    6a7c:	       move.w d0,d0
    6a7e:	       andi.l #65535,d0
    6a84:	       move.l 112(sp),-(sp)
    6a88:	       move.l d0,-(sp)
    6a8a:	       jsr 8d0 <put2bytes>
    6a90:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    6a92:	       movea.l 1b1d0 <nowStatus>,a0
    6a98:	       move.l 6(a0),d0
    6a9c:	       move.l d0,d0
    6a9e:	       movea.w d0,a0
    6aa0:	       move.l 112(sp),-(sp)
    6aa4:	       move.l a0,-(sp)
    6aa6:	       jsr a9c <putSigned>
    6aac:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    6aae:	       movea.l 1b1d0 <nowStatus>,a0
    6ab4:	       move.l 10(a0),d0
    6ab8:	       move.l 112(sp),-(sp)
    6abc:	       move.l d0,-(sp)
    6abe:	       jsr 8d0 <put2bytes>
    6ac4:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    6ac6:	       movea.l 1b1d0 <nowStatus>,a0
    6acc:	       move.l 14(a0),d0
    6ad0:	       move.l 112(sp),-(sp)
    6ad4:	       move.l d0,-(sp)
    6ad6:	       jsr 8d0 <put2bytes>
    6adc:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    6ade:	       move.l 112(sp),100(sp)
    6ae4:	       movea.l 1b1d0 <nowStatus>,a0
    6aea:	       move.l 18(a0),96(sp)
    6af0:	       move.l 1b850 <DOSBase>,d0
    6af6:	       movea.l d0,a6
    6af8:	       move.l 100(sp),d1
    6afc:	       move.l 96(sp),d2
    6b00:	       jsr -312(a6)
    6b04:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    6b08:	       move.l 112(sp),88(sp)
    6b0e:	       movea.l 1b1d0 <nowStatus>,a0
    6b14:	       move.l 22(a0),84(sp)
    6b1a:	       move.l 1b850 <DOSBase>,d0
    6b20:	       movea.l d0,a6
    6b22:	       move.l 88(sp),d1
    6b26:	       move.l 84(sp),d2
    6b2a:	       jsr -312(a6)
    6b2e:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    6b32:	       move.l 112(sp),76(sp)
    6b38:	       movea.l 1b1d0 <nowStatus>,a0
    6b3e:	       move.l 26(a0),72(sp)
    6b44:	       move.l 1b850 <DOSBase>,d0
    6b4a:	       movea.l d0,a6
    6b4c:	       move.l 76(sp),d1
    6b50:	       move.l 72(sp),d2
    6b54:	       jsr -312(a6)
    6b58:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    6b5c:	       move.l 112(sp),64(sp)
    6b62:	       movea.l 1b1d0 <nowStatus>,a0
    6b68:	       move.l 30(a0),60(sp)
    6b6e:	       move.l 1b850 <DOSBase>,d0
    6b74:	       movea.l d0,a6
    6b76:	       move.l 64(sp),d1
    6b7a:	       move.l 60(sp),d2
    6b7e:	       jsr -312(a6)
    6b82:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    6b86:	       move.l 112(sp),52(sp)
    6b8c:	       movea.l 1b1d0 <nowStatus>,a0
    6b92:	       move.l 34(a0),48(sp)
    6b98:	       move.l 1b850 <DOSBase>,d0
    6b9e:	       movea.l d0,a6
    6ba0:	       move.l 52(sp),d1
    6ba4:	       move.l 48(sp),d2
    6ba8:	       jsr -312(a6)
    6bac:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6bb0:	       move.l 112(sp),40(sp)
    6bb6:	       movea.l 1b1d0 <nowStatus>,a0
    6bbc:	       move.l 38(a0),36(sp)
    6bc2:	       move.l 1b850 <DOSBase>,d0
    6bc8:	       movea.l d0,a6
    6bca:	       move.l 40(sp),d1
    6bce:	       move.l 36(sp),d2
    6bd2:	       jsr -312(a6)
    6bd6:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6bda:	   /-- bra.s 6c1e <saveStatusBars+0x1be>
		FPutC (fp,1);
    6bdc:	/--|-> move.l 112(sp),16(sp)
    6be2:	|  |   moveq #1,d0
    6be4:	|  |   move.l d0,12(sp)
    6be8:	|  |   move.l 1b850 <DOSBase>,d0
    6bee:	|  |   movea.l d0,a6
    6bf0:	|  |   move.l 16(sp),d1
    6bf4:	|  |   move.l 12(sp),d2
    6bf8:	|  |   jsr -312(a6)
    6bfc:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6c00:	|  |   movea.l 104(sp),a0
    6c04:	|  |   move.l (a0),d0
    6c06:	|  |   move.l 112(sp),-(sp)
    6c0a:	|  |   move.l d0,-(sp)
    6c0c:	|  |   jsr bd8 <writeString>
    6c12:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6c14:	|  |   movea.l 104(sp),a0
    6c18:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6c1e:	|  \-> tst.l 104(sp)
    6c22:	\----- bne.s 6bdc <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6c24:	       move.l 112(sp),28(sp)
    6c2a:	       clr.l 24(sp)
    6c2e:	       move.l 1b850 <DOSBase>,d0
    6c34:	       movea.l d0,a6
    6c36:	       move.l 28(sp),d1
    6c3a:	       move.l 24(sp),d2
    6c3e:	       jsr -312(a6)
    6c42:	       move.l d0,20(sp)
}
    6c46:	       nop
    6c48:	       move.l (sp)+,d2
    6c4a:	       movea.l (sp)+,a6
    6c4c:	       lea 100(sp),sp
    6c50:	       rts

00006c52 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6c52:	movea.l 1b1d0 <nowStatus>,a0
    6c58:	move.l 4(sp),6(a0)
}
    6c5e:	nop
    6c60:	rts

00006c62 <setStatusBar>:

void setStatusBar (char * txt) {
    6c62:	    subq.l #4,sp
    6c64:	    move.l a6,-(sp)
    6c66:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6c68:	    movea.l 1b1d0 <nowStatus>,a0
    6c6e:	    move.l (a0),d0
    6c70:	/-- beq.s 6ca4 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6c72:	|   movea.l 1b1d0 <nowStatus>,a0
    6c78:	|   movea.l (a0),a0
    6c7a:	|   move.l (a0),8(sp)
    6c7e:	|   move.l 1b848 <SysBase>,d0
    6c84:	|   movea.l d0,a6
    6c86:	|   movea.l 8(sp),a1
    6c8a:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6c8e:	|   movea.l 1b1d0 <nowStatus>,a0
    6c94:	|   movea.l (a0),a2
    6c96:	|   move.l 16(sp),-(sp)
    6c9a:	|   jsr b8 <copyString>
    6ca0:	|   addq.l #4,sp
    6ca2:	|   move.l d0,(a2)
	}
}
    6ca4:	\-> nop
    6ca6:	    movea.l (sp)+,a2
    6ca8:	    movea.l (sp)+,a6
    6caa:	    addq.l #4,sp
    6cac:	    rts

00006cae <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6cae:	       movea.l 1b1d0 <nowStatus>,a0
    6cb4:	       move.l (a0),d0
    6cb6:	/----- beq.s 6cc4 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6cb8:	|      movea.l 1b1d0 <nowStatus>,a0
    6cbe:	|      movea.l (a0),a0
    6cc0:	|      move.l (a0),d0
    6cc2:	|  /-- bra.s 6cca <statusBarText+0x1c>
	} else {
		return "";
    6cc4:	\--|-> move.l #96222,d0
	}
    6cca:	   \-> rts

00006ccc <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6ccc:	       lea -28(sp),sp
    6cd0:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6cd4:	       move.l 52(sp),-(sp)
    6cd8:	       jsr 14936 <stringWidth>
    6cde:	       addq.l #4,sp
    6ce0:	       asr.l #1,d0
    6ce2:	       move.l d0,-(sp)
    6ce4:	       jsr 1652c <__floatsisf>
    6cea:	       addq.l #4,sp
    6cec:	       move.l d0,d1
    6cee:	       move.l 1b1e8 <cameraZoom>,d0
    6cf4:	       move.l d0,-(sp)
    6cf6:	       move.l d1,-(sp)
    6cf8:	       jsr 163d8 <__divsf3>
    6cfe:	       addq.l #8,sp
    6d00:	       move.l d0,-(sp)
    6d02:	       jsr 164c4 <__fixsfsi>
    6d08:	       addq.l #4,sp
    6d0a:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6d0e:	       move.l 56(sp),d0
    6d12:	       sub.l 44(sp),d0
    6d16:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6d1a:	       move.l 56(sp),d0
    6d1e:	       add.l 44(sp),d0
    6d22:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6d26:	       moveq #12,d0
    6d28:	       move.l d0,32(sp)
    6d2c:	       clr.l 28(sp)
    6d30:	       move.l 1b848 <SysBase>,d0
    6d36:	       movea.l d0,a6
    6d38:	       move.l 32(sp),d0
    6d3c:	       move.l 28(sp),d1
    6d40:	       jsr -684(a6)
    6d44:	       move.l d0,24(sp)
    6d48:	       move.l 24(sp),d0
    6d4c:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6d50:	       movea.l 1b8a4 <speech>,a0
    6d56:	       move.l 4(a0),d0
    6d5a:	       movea.l 20(sp),a0
    6d5e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6d62:	       move.l 52(sp),-(sp)
    6d66:	       jsr b8 <copyString>
    6d6c:	       addq.l #4,sp
    6d6e:	       movea.l 20(sp),a0
    6d72:	       move.l d0,(a0)
	newLine -> x = xx1;
    6d74:	       movea.l 20(sp),a0
    6d78:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6d7e:	       movea.l 1b8a4 <speech>,a0
    6d84:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6d8a:	       moveq #4,d0
    6d8c:	       cmp.l 40(sp),d0
    6d90:	   /-- blt.s 6db2 <addSpeechLine+0xe6>
    6d92:	   |   movea.l 60(sp),a0
    6d96:	   |   move.l (a0),d1
    6d98:	   |   moveq #5,d0
    6d9a:	   |   sub.l 40(sp),d0
    6d9e:	   |   cmp.l d1,d0
    6da0:	   +-- ble.s 6db2 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6da2:	   |   moveq #5,d0
    6da4:	   |   sub.l 40(sp),d0
    6da8:	   |   movea.l 60(sp),a0
    6dac:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6dae:	/--|-- bra.w 6ede <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6db2:	|  \-> move.l 36(sp),-(sp)
    6db6:	|      jsr 1652c <__floatsisf>
    6dbc:	|      addq.l #4,sp
    6dbe:	|      move.l d0,d2
    6dc0:	|      move.l 1b79c <winWidth>,d0
    6dc6:	|      move.l d0,-(sp)
    6dc8:	|      jsr 16554 <__floatunsisf>
    6dce:	|      addq.l #4,sp
    6dd0:	|      move.l d0,d1
    6dd2:	|      move.l 1b1e8 <cameraZoom>,d0
    6dd8:	|      move.l d0,-(sp)
    6dda:	|      move.l d1,-(sp)
    6ddc:	|      jsr 163d8 <__divsf3>
    6de2:	|      addq.l #8,sp
    6de4:	|      move.l #1084227584,-(sp)
    6dea:	|      move.l d0,-(sp)
    6dec:	|      jsr 16820 <__subsf3>
    6df2:	|      addq.l #8,sp
    6df4:	|      move.l d0,-(sp)
    6df6:	|      move.l d2,-(sp)
    6df8:	|      jsr 16614 <__gesf2>
    6dfe:	|      addq.l #8,sp
    6e00:	|      tst.l d0
    6e02:	|  /-- bge.s 6e08 <addSpeechLine+0x13c>
}
    6e04:	+--|-- bra.w 6ede <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6e08:	|  \-> movea.l 60(sp),a0
    6e0c:	|      move.l (a0),d0
    6e0e:	|      move.l d0,-(sp)
    6e10:	|      jsr 1652c <__floatsisf>
    6e16:	|      addq.l #4,sp
    6e18:	|      move.l d0,-(sp)
    6e1a:	|      jsr 16444 <__extendsfdf2>
    6e20:	|      addq.l #4,sp
    6e22:	|      move.l d0,d4
    6e24:	|      move.l d1,d5
    6e26:	|      move.l 1b79c <winWidth>,d0
    6e2c:	|      move.l d0,-(sp)
    6e2e:	|      jsr 16554 <__floatunsisf>
    6e34:	|      addq.l #4,sp
    6e36:	|      move.l d0,d1
    6e38:	|      move.l 1b1e8 <cameraZoom>,d0
    6e3e:	|      move.l d0,-(sp)
    6e40:	|      move.l d1,-(sp)
    6e42:	|      jsr 163d8 <__divsf3>
    6e48:	|      addq.l #8,sp
    6e4a:	|      move.l d0,-(sp)
    6e4c:	|      jsr 16444 <__extendsfdf2>
    6e52:	|      addq.l #4,sp
    6e54:	|      clr.l -(sp)
    6e56:	|      move.l #1075052544,-(sp)
    6e5c:	|      move.l d1,-(sp)
    6e5e:	|      move.l d0,-(sp)
    6e60:	|      jsr 167be <__subdf3>
    6e66:	|      lea 16(sp),sp
    6e6a:	|      move.l d0,d2
    6e6c:	|      move.l d1,d3
    6e6e:	|      move.l 36(sp),-(sp)
    6e72:	|      jsr 164ec <__floatsidf>
    6e78:	|      addq.l #4,sp
    6e7a:	|      move.l d1,-(sp)
    6e7c:	|      move.l d0,-(sp)
    6e7e:	|      move.l d3,-(sp)
    6e80:	|      move.l d2,-(sp)
    6e82:	|      jsr 167be <__subdf3>
    6e88:	|      lea 16(sp),sp
    6e8c:	|      move.l d1,-(sp)
    6e8e:	|      move.l d0,-(sp)
    6e90:	|      move.l d5,-(sp)
    6e92:	|      move.l d4,-(sp)
    6e94:	|      jsr 1664a <__gtdf2>
    6e9a:	|      lea 16(sp),sp
    6e9e:	|      tst.l d0
    6ea0:	|  /-- bgt.s 6ea4 <addSpeechLine+0x1d8>
}
    6ea2:	+--|-- bra.s 6ede <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6ea4:	|  \-> move.l 1b79c <winWidth>,d0
    6eaa:	|      move.l d0,-(sp)
    6eac:	|      jsr 16554 <__floatunsisf>
    6eb2:	|      addq.l #4,sp
    6eb4:	|      move.l d0,d1
    6eb6:	|      move.l 1b1e8 <cameraZoom>,d0
    6ebc:	|      move.l d0,-(sp)
    6ebe:	|      move.l d1,-(sp)
    6ec0:	|      jsr 163d8 <__divsf3>
    6ec6:	|      addq.l #8,sp
    6ec8:	|      move.l d0,-(sp)
    6eca:	|      jsr 164c4 <__fixsfsi>
    6ed0:	|      addq.l #4,sp
    6ed2:	|      subq.l #5,d0
    6ed4:	|      sub.l 36(sp),d0
    6ed8:	|      movea.l 60(sp),a0
    6edc:	|      move.l d0,(a0)
}
    6ede:	\----> nop
    6ee0:	       movem.l (sp)+,d2-d5/a6
    6ee4:	       lea 28(sp),sp
    6ee8:	       rts

00006eea <initSpeech>:


void initSpeech () {
    6eea:	       lea -12(sp),sp
    6eee:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6ef0:	       moveq #20,d0
    6ef2:	       move.l d0,12(sp)
    6ef6:	       clr.l 8(sp)
    6efa:	       move.l 1b848 <SysBase>,d0
    6f00:	       movea.l d0,a6
    6f02:	       move.l 12(sp),d0
    6f06:	       move.l 8(sp),d1
    6f0a:	       jsr -684(a6)
    6f0e:	       move.l d0,4(sp)
    6f12:	       move.l 4(sp),d0
    6f16:	       move.l d0,1b8a4 <speech>
	if (speech) {
    6f1c:	       move.l 1b8a4 <speech>,d0
    6f22:	/----- beq.s 6f4e <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6f24:	|      movea.l 1b8a4 <speech>,a0
    6f2a:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6f2c:	|      movea.l 1b8a4 <speech>,a0
    6f32:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6f36:	|      movea.l 1b8a4 <speech>,a0
    6f3c:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6f40:	|      movea.l 1b8a4 <speech>,a0
    6f46:	|      moveq #-1,d0
    6f48:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6f4c:	|  /-- bra.s 6f5c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6f4e:	\--|-> pea 17dc5 <PutChar+0x1201>
    6f54:	   |   jsr 16274 <KPrintF>
    6f5a:	   |   addq.l #4,sp
}
    6f5c:	   \-> nop
    6f5e:	       movea.l (sp)+,a6
    6f60:	       lea 12(sp),sp
    6f64:	       rts

00006f66 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6f66:	       movea.l 1b8a4 <speech>,a0
    6f6c:	       move.l 4(a0),d0
    6f70:	/----- beq.s 6f7e <isThereAnySpeechGoingOn+0x18>
    6f72:	|      movea.l 1b8a4 <speech>,a0
    6f78:	|      move.l 16(a0),d0
    6f7c:	|  /-- bra.s 6f80 <isThereAnySpeechGoingOn+0x1a>
    6f7e:	\--|-> moveq #-1,d0
}
    6f80:	   \-> rts

00006f82 <killAllSpeech>:

void killAllSpeech () {
    6f82:	       lea -12(sp),sp
    6f86:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6f88:	       movea.l 1b8a4 <speech>,a0
    6f8e:	       move.l 12(a0),d0
    6f92:	       moveq #-1,d1
    6f94:	       cmp.l d0,d1
    6f96:	   /-- beq.s 6fa4 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6f98:	   |   movea.l 1b8a4 <speech>,a0
    6f9e:	   |   moveq #-1,d0
    6fa0:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6fa4:	   \-> movea.l 1b8a4 <speech>,a0
    6faa:	       move.l (a0),d0
    6fac:	/----- beq.w 7038 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6fb0:	|      movea.l 1b8a4 <speech>,a0
    6fb6:	|      move.l (a0),d1
    6fb8:	|      lea -132(sp),sp
    6fbc:	|      move.l sp,d0
    6fbe:	|      movea.w #132,a0
    6fc2:	|      move.l a0,-(sp)
    6fc4:	|      move.l d1,-(sp)
    6fc6:	|      move.l d0,-(sp)
    6fc8:	|      jsr 16228 <memcpy>
    6fce:	|      lea 12(sp),sp
    6fd2:	|      jsr 9d7c <makeSilent>
    6fd8:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    6fdc:	|      movea.l 1b8a4 <speech>,a0
    6fe2:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6fe4:	+----- bra.s 7038 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6fe6:	|  /-> movea.l 1b8a4 <speech>,a0
    6fec:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6ff2:	|  |   movea.l 1b8a4 <speech>,a0
    6ff8:	|  |   movea.l 4(a0),a1
    6ffc:	|  |   movea.l 1b8a4 <speech>,a0
    7002:	|  |   move.l 4(a1),d0
    7006:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    700a:	|  |   movea.l 12(sp),a0
    700e:	|  |   move.l (a0),8(sp)
    7012:	|  |   move.l 1b848 <SysBase>,d0
    7018:	|  |   movea.l d0,a6
    701a:	|  |   movea.l 8(sp),a1
    701e:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7022:	|  |   move.l 12(sp),4(sp)
    7028:	|  |   move.l 1b848 <SysBase>,d0
    702e:	|  |   movea.l d0,a6
    7030:	|  |   movea.l 4(sp),a1
    7034:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7038:	\--|-> movea.l 1b8a4 <speech>,a0
    703e:	   |   move.l 4(a0),d0
    7042:	   \-- bne.s 6fe6 <killAllSpeech+0x64>
	}
}
    7044:	       nop
    7046:	       nop
    7048:	       movea.l (sp)+,a6
    704a:	       lea 12(sp),sp
    704e:	       rts

00007050 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7050:	pea 2 <_start+0x2>
    7054:	move.l 8(sp),-(sp)
    7058:	jsr 71b0 <setFrames>
    705e:	addq.l #8,sp
}
    7060:	nop
    7062:	rts

00007064 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7064:	       lea -52(sp),sp
    7068:	       move.l a6,-(sp)
    706a:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    706c:	       movea.l 64(sp),a0
    7070:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7076:	       move.l 1b1d4 <speechSpeed>,d0
    707c:	       move.l 68(sp),-(sp)
    7080:	       move.l d0,-(sp)
    7082:	       jsr a46 <putFloat>
    7088:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    708a:	       movea.l 64(sp),a0
    708e:	       move.l 8(a0),d0
    7092:	       move.l 68(sp),-(sp)
    7096:	       move.l d0,-(sp)
    7098:	       jsr 8d0 <put2bytes>
    709e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    70a0:	       movea.l 64(sp),a0
    70a4:	       move.l 16(a0),d0
    70a8:	       move.l 68(sp),-(sp)
    70ac:	       move.l d0,-(sp)
    70ae:	       jsr 8d0 <put2bytes>
    70b4:	       addq.l #8,sp
		if (sS -> currentTalker) {
    70b6:	       movea.l 64(sp),a0
    70ba:	       move.l (a0),d0
    70bc:	   /-- beq.s 7100 <saveSpeech+0x9c>
			FPutC (fp, 1);
    70be:	   |   move.l 68(sp),40(sp)
    70c4:	   |   moveq #1,d0
    70c6:	   |   move.l d0,36(sp)
    70ca:	   |   move.l 1b850 <DOSBase>,d0
    70d0:	   |   movea.l d0,a6
    70d2:	   |   move.l 40(sp),d1
    70d6:	   |   move.l 36(sp),d2
    70da:	   |   jsr -312(a6)
    70de:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    70e2:	   |   movea.l 64(sp),a0
    70e6:	   |   movea.l (a0),a0
    70e8:	   |   movea.l 114(a0),a0
    70ec:	   |   move.l 4(a0),d0
    70f0:	   |   move.l 68(sp),-(sp)
    70f4:	   |   move.l d0,-(sp)
    70f6:	   |   jsr 8d0 <put2bytes>
    70fc:	   |   addq.l #8,sp
    70fe:	/--|-- bra.s 717c <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7100:	|  \-> move.l 68(sp),52(sp)
    7106:	|      clr.l 48(sp)
    710a:	|      move.l 1b850 <DOSBase>,d0
    7110:	|      movea.l d0,a6
    7112:	|      move.l 52(sp),d1
    7116:	|      move.l 48(sp),d2
    711a:	|      jsr -312(a6)
    711e:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7122:	+----- bra.s 717c <saveSpeech+0x118>
			FPutC (fp, 1);
    7124:	|  /-> move.l 68(sp),16(sp)
    712a:	|  |   moveq #1,d0
    712c:	|  |   move.l d0,12(sp)
    7130:	|  |   move.l 1b850 <DOSBase>,d0
    7136:	|  |   movea.l d0,a6
    7138:	|  |   move.l 16(sp),d1
    713c:	|  |   move.l 12(sp),d2
    7140:	|  |   jsr -312(a6)
    7144:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7148:	|  |   movea.l 56(sp),a0
    714c:	|  |   move.l (a0),d0
    714e:	|  |   move.l 68(sp),-(sp)
    7152:	|  |   move.l d0,-(sp)
    7154:	|  |   jsr bd8 <writeString>
    715a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    715c:	|  |   movea.l 56(sp),a0
    7160:	|  |   move.l 8(a0),d0
    7164:	|  |   move.l 68(sp),-(sp)
    7168:	|  |   move.l d0,-(sp)
    716a:	|  |   jsr 8d0 <put2bytes>
    7170:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7172:	|  |   movea.l 56(sp),a0
    7176:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    717c:	\--|-> tst.l 56(sp)
    7180:	   \-- bne.s 7124 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7182:	       move.l 68(sp),28(sp)
    7188:	       clr.l 24(sp)
    718c:	       move.l 1b850 <DOSBase>,d0
    7192:	       movea.l d0,a6
    7194:	       move.l 28(sp),d1
    7198:	       move.l 24(sp),d2
    719c:	       jsr -312(a6)
    71a0:	       move.l d0,20(sp)
}
    71a4:	       nop
    71a6:	       move.l (sp)+,d2
    71a8:	       movea.l (sp)+,a6
    71aa:	       lea 52(sp),sp
    71ae:	       rts

000071b0 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    71b0:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    71b2:	movea.l 8(sp),a0
    71b6:	movea.l 80(a0),a0
    71ba:	move.l (a0),d2
    71bc:	movea.l 8(sp),a0
    71c0:	movea.l 80(a0),a0
    71c4:	move.l 4(a0),d0
    71c8:	move.l 12(sp),-(sp)
    71cc:	move.l d0,-(sp)
    71ce:	jsr 16aae <__mulsi3>
    71d4:	addq.l #8,sp
    71d6:	move.l d0,d1
    71d8:	movea.l 8(sp),a0
    71dc:	move.l 106(a0),d0
    71e0:	add.l d1,d0
    71e2:	add.l d0,d0
    71e4:	add.l d0,d0
    71e6:	movea.l d2,a0
    71e8:	adda.l d0,a0
    71ea:	move.l (a0),d0
    71ec:	movea.l 8(sp),a0
    71f0:	move.l d0,72(a0)
}
    71f4:	nop
    71f6:	move.l (sp)+,d2
    71f8:	rts

000071fa <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    71fa:	       lea -20(sp),sp
    71fe:	       move.l d2,-(sp)
    7200:	       move.l 40(sp),d0
    7204:	       move.w d0,d0
    7206:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    720a:	       movea.l 1b8a4 <speech>,a0
    7210:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7216:	       move.l 32(sp),-(sp)
    721a:	       jsr 9866 <findPerson>
    7220:	       addq.l #4,sp
    7222:	       move.l d0,16(sp)
    if (thisPerson) {
    7226:	   /-- beq.s 724c <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7228:	   |   movea.w 6(sp),a0
    722c:	   |   move.l a0,-(sp)
    722e:	   |   move.l 40(sp),-(sp)
    7232:	   |   move.l 24(sp),-(sp)
    7236:	   |   move.l 40(sp),-(sp)
    723a:	   |   jsr 7312 <wrapSpeechPerson>
    7240:	   |   lea 16(sp),sp
    7244:	   |   move.l d0,20(sp)
    7248:	/--|-- bra.w 7306 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    724c:	|  \-> move.l 32(sp),-(sp)
    7250:	|      jsr 14a96 <getRegionForObject>
    7256:	|      addq.l #4,sp
    7258:	|      move.l d0,12(sp)
        if (thisRegion) {
    725c:	|  /-- beq.s 72c8 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    725e:	|  |   movea.l 12(sp),a0
    7262:	|  |   movea.l 28(a0),a0
    7266:	|  |   move.l 28(a0),d0
    726a:	|  |   movea.l 12(sp),a0
    726e:	|  |   movea.l 4(a0),a1
    7272:	|  |   movea.l 12(sp),a0
    7276:	|  |   movea.l 28(a0),a0
    727a:	|  |   move.l 20(a0),d1
    727e:	|  |   movea.l a1,a0
    7280:	|  |   suba.l d1,a0
    7282:	|  |   move.l 1b95e <cameraY>,d1
    7288:	|  |   movea.l a0,a1
    728a:	|  |   suba.l d1,a1
    728c:	|  |   movea.l 12(sp),a0
    7290:	|  |   move.l (a0),d2
    7292:	|  |   movea.l 12(sp),a0
    7296:	|  |   move.l 8(a0),d1
    729a:	|  |   add.l d2,d1
    729c:	|  |   move.l d1,d2
    729e:	|  |   asr.l #1,d2
    72a0:	|  |   move.l 1b95a <cameraX>,d1
    72a6:	|  |   movea.l d2,a0
    72a8:	|  |   suba.l d1,a0
    72aa:	|  |   move.l 36(sp),-(sp)
    72ae:	|  |   move.l d0,-(sp)
    72b0:	|  |   move.l a1,-(sp)
    72b2:	|  |   move.l a0,-(sp)
    72b4:	|  |   move.l 44(sp),-(sp)
    72b8:	|  |   jsr 7430 <wrapSpeechXY>
    72be:	|  |   lea 20(sp),sp
    72c2:	|  |   move.l d0,20(sp)
    72c6:	+--|-- bra.s 7306 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    72c8:	|  \-> move.l 32(sp),-(sp)
    72cc:	|      jsr c740 <findObjectType>
    72d2:	|      addq.l #4,sp
    72d4:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    72d8:	|      movea.l 8(sp),a0
    72dc:	|      move.l 28(a0),d1
    72e0:	|      move.l 1b79c <winWidth>,d0
    72e6:	|      lsr.l #1,d0
    72e8:	|      move.l 36(sp),-(sp)
    72ec:	|      move.l d1,-(sp)
    72ee:	|      pea a <_start+0xa>
    72f2:	|      move.l d0,-(sp)
    72f4:	|      move.l 44(sp),-(sp)
    72f8:	|      jsr 7430 <wrapSpeechXY>
    72fe:	|      lea 20(sp),sp
    7302:	|      move.l d0,20(sp)
        }
    }
    return i;
    7306:	\----> move.l 20(sp),d0
}
    730a:	       move.l (sp)+,d2
    730c:	       lea 20(sp),sp
    7310:	       rts

00007312 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7312:	    subq.l #8,sp
    7314:	    movem.l d2-d4,-(sp)
    7318:	    move.l 36(sp),d0
    731c:	    move.w d0,d0
    731e:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7322:	    movea.l 28(sp),a0
    7326:	    movea.l 114(a0),a0
    732a:	    move.l 28(a0),d2
    732e:	    movea.l 28(sp),a0
    7332:	    move.l 4(a0),d3
    7336:	    move.l 1b95e <cameraY>,d0
    733c:	    move.l d0,-(sp)
    733e:	    jsr 1652c <__floatsisf>
    7344:	    addq.l #4,sp
    7346:	    move.l d0,-(sp)
    7348:	    move.l d3,-(sp)
    734a:	    jsr 16820 <__subsf3>
    7350:	    addq.l #8,sp
    7352:	    move.l d0,d3
    7354:	    movea.l 28(sp),a0
    7358:	    move.l 32(a0),d4
    735c:	    movea.l 28(sp),a0
    7360:	    move.l 20(a0),d1
    7364:	    movea.l 28(sp),a0
    7368:	    move.l 24(a0),d0
    736c:	    sub.l d0,d1
    736e:	    move.l d1,-(sp)
    7370:	    jsr 1652c <__floatsisf>
    7376:	    addq.l #4,sp
    7378:	    move.l d0,-(sp)
    737a:	    move.l d4,-(sp)
    737c:	    jsr 165de <__mulsf3>
    7382:	    addq.l #8,sp
    7384:	    move.l d0,-(sp)
    7386:	    move.l d3,-(sp)
    7388:	    jsr 16820 <__subsf3>
    738e:	    addq.l #8,sp
    7390:	    move.l d0,d3
    7392:	    movea.l 28(sp),a0
    7396:	    movea.l 114(a0),a0
    739a:	    move.l 20(a0),d0
    739e:	    move.l d0,-(sp)
    73a0:	    jsr 1652c <__floatsisf>
    73a6:	    addq.l #4,sp
    73a8:	    move.l d0,-(sp)
    73aa:	    move.l d3,-(sp)
    73ac:	    jsr 16820 <__subsf3>
    73b2:	    addq.l #8,sp
    73b4:	    move.l d0,-(sp)
    73b6:	    jsr 164c4 <__fixsfsi>
    73bc:	    addq.l #4,sp
    73be:	    move.l d0,d4
    73c0:	    movea.l 28(sp),a0
    73c4:	    move.l (a0),d3
    73c6:	    move.l 1b95a <cameraX>,d0
    73cc:	    move.l d0,-(sp)
    73ce:	    jsr 1652c <__floatsisf>
    73d4:	    addq.l #4,sp
    73d6:	    move.l d0,-(sp)
    73d8:	    move.l d3,-(sp)
    73da:	    jsr 16820 <__subsf3>
    73e0:	    addq.l #8,sp
    73e2:	    move.l d0,-(sp)
    73e4:	    jsr 164c4 <__fixsfsi>
    73ea:	    addq.l #4,sp
    73ec:	    move.l 32(sp),-(sp)
    73f0:	    move.l d2,-(sp)
    73f2:	    move.l d4,-(sp)
    73f4:	    move.l d0,-(sp)
    73f6:	    move.l 40(sp),-(sp)
    73fa:	    jsr 7430 <wrapSpeechXY>
    7400:	    lea 20(sp),sp
    7404:	    move.l d0,16(sp)
	if (animPerson) {
    7408:	    tst.w 14(sp)
    740c:	/-- beq.s 7424 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    740e:	|   move.l 28(sp),-(sp)
    7412:	|   jsr 7050 <makeTalker>
    7418:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    741a:	|   movea.l 1b8a4 <speech>,a0
    7420:	|   move.l 28(sp),(a0)
	}
	return i;
    7424:	\-> move.l 16(sp),d0
}
    7428:	    movem.l (sp)+,d2-d4
    742c:	    addq.l #8,sp
    742e:	    rts

00007430 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7430:	                   lea -16(sp),sp
    7434:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    7438:	                   clr.l 16(sp)
    killAllSpeech();
    743c:	                   jsr 6f82 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7442:	                   move.l 36(sp),-(sp)
    7446:	                   jsr 12e40 <strlen>
    744c:	                   addq.l #4,sp
    744e:	                   movea.l d0,a0
    7450:	                   lea 20(a0),a0
    7454:	                   move.l a0,-(sp)
    7456:	                   jsr 16554 <__floatunsisf>
    745c:	                   addq.l #4,sp
    745e:	                   move.l d0,d1
    7460:	                   move.l 1b1d4 <speechSpeed>,d0
    7466:	                   move.l d0,-(sp)
    7468:	                   move.l d1,-(sp)
    746a:	                   jsr 165de <__mulsf3>
    7470:	                   addq.l #8,sp
    7472:	                   move.l d0,-(sp)
    7474:	                   jsr 164c4 <__fixsfsi>
    747a:	                   addq.l #4,sp
    747c:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7480:	               /-- bgt.s 7488 <wrapSpeechXY+0x58>
    7482:	               |   moveq #1,d0
    7484:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7488:	               \-> moveq #-1,d1
    748a:	                   cmp.l 52(sp),d1
    748e:	               /-- beq.s 74ce <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7490:	               |   move.l 1b96e <speechMode>,d0
    7496:	               +-- ble.s 74ce <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7498:	               |   clr.l -(sp)
    749a:	               |   move.l 56(sp),-(sp)
    749e:	               |   jsr c40a <startSound>
    74a4:	               |   addq.l #8,sp
    74a6:	               |   tst.w d0
    74a8:	               +-- beq.s 74ce <wrapSpeechXY+0x9e>
                speechTime = -10;
    74aa:	               |   moveq #-10,d0
    74ac:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    74b0:	               |   movea.l 1b8a4 <speech>,a0
    74b6:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    74bc:	               |   move.l 1b96e <speechMode>,d0
    74c2:	               |   moveq #2,d1
    74c4:	               |   cmp.l d0,d1
    74c6:	               +-- bne.s 74ce <wrapSpeechXY+0x9e>
    74c8:	               |   moveq #-10,d0
    74ca:	/--------------|-- bra.w 7754 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    74ce:	|              \-> movea.l 1b8a4 <speech>,a0
    74d4:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    74da:	|     /----------- bra.w 758e <wrapSpeechXY+0x15e>
        a = wrap;
    74de:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    74e4:	|  |  |        /-- bra.s 74f4 <wrapSpeechXY+0xc4>
            a--;
    74e6:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    74ea:	|  |  |  |     +-- bne.s 74f4 <wrapSpeechXY+0xc4>
                a = wrap;
    74ec:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    74f2:	|  |  |  |  /--|-- bra.s 7506 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    74f4:	|  |  |  |  |  \-> move.l 28(sp),d0
    74f8:	|  |  |  |  |      movea.l 36(sp),a0
    74fc:	|  |  |  |  |      adda.l d0,a0
    74fe:	|  |  |  |  |      move.b (a0),d0
    7500:	|  |  |  |  |      cmpi.b #32,d0
    7504:	|  |  |  \--|----- bne.s 74e6 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7506:	|  |  |     \----> move.l 28(sp),d0
    750a:	|  |  |            movea.l 36(sp),a0
    750e:	|  |  |            adda.l d0,a0
    7510:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7512:	|  |  |            lea 16(sp),a0
    7516:	|  |  |            move.l a0,-(sp)
    7518:	|  |  |            move.l 44(sp),-(sp)
    751c:	|  |  |            move.l 44(sp),-(sp)
    7520:	|  |  |            jsr 6ccc <addSpeechLine>
    7526:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    752a:	|  |  |            move.l 28(sp),d0
    752e:	|  |  |            movea.l 36(sp),a0
    7532:	|  |  |            adda.l d0,a0
    7534:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    7538:	|  |  |            move.l 28(sp),d0
    753c:	|  |  |            addq.l #1,d0
    753e:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7542:	|  |  |            move.l 44(sp),-(sp)
    7546:	|  |  |            jsr 1652c <__floatsisf>
    754c:	|  |  |            addq.l #4,sp
    754e:	|  |  |            move.l d0,d2
    7550:	|  |  |            move.l 1b998 <fontHeight>,d0
    7556:	|  |  |            move.l d0,-(sp)
    7558:	|  |  |            jsr 1652c <__floatsisf>
    755e:	|  |  |            addq.l #4,sp
    7560:	|  |  |            move.l d0,d1
    7562:	|  |  |            move.l 1b1e8 <cameraZoom>,d0
    7568:	|  |  |            move.l d0,-(sp)
    756a:	|  |  |            move.l d1,-(sp)
    756c:	|  |  |            jsr 163d8 <__divsf3>
    7572:	|  |  |            addq.l #8,sp
    7574:	|  |  |            move.l d0,-(sp)
    7576:	|  |  |            move.l d2,-(sp)
    7578:	|  |  |            jsr 16820 <__subsf3>
    757e:	|  |  |            addq.l #8,sp
    7580:	|  |  |            move.l d0,-(sp)
    7582:	|  |  |            jsr 164c4 <__fixsfsi>
    7588:	|  |  |            addq.l #4,sp
    758a:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    758e:	|  |  \----------> move.l 36(sp),-(sp)
    7592:	|  |               jsr 12e40 <strlen>
    7598:	|  |               addq.l #4,sp
    759a:	|  |               move.l d0,d1
    759c:	|  |               move.l 48(sp),d0
    75a0:	|  |               cmp.l d1,d0
    75a2:	|  \-------------- bcs.w 74de <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    75a6:	|                  lea 16(sp),a0
    75aa:	|                  move.l a0,-(sp)
    75ac:	|                  move.l 44(sp),-(sp)
    75b0:	|                  move.l 44(sp),-(sp)
    75b4:	|                  jsr 6ccc <addSpeechLine>
    75ba:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    75be:	|                  move.l 44(sp),-(sp)
    75c2:	|                  jsr 1652c <__floatsisf>
    75c8:	|                  addq.l #4,sp
    75ca:	|                  move.l d0,d2
    75cc:	|                  move.l 1b998 <fontHeight>,d0
    75d2:	|                  move.l d0,-(sp)
    75d4:	|                  jsr 1652c <__floatsisf>
    75da:	|                  addq.l #4,sp
    75dc:	|                  move.l d0,d1
    75de:	|                  move.l 1b1e8 <cameraZoom>,d0
    75e4:	|                  move.l d0,-(sp)
    75e6:	|                  move.l d1,-(sp)
    75e8:	|                  jsr 163d8 <__divsf3>
    75ee:	|                  addq.l #8,sp
    75f0:	|                  move.l d0,-(sp)
    75f2:	|                  move.l d2,-(sp)
    75f4:	|                  jsr 16820 <__subsf3>
    75fa:	|                  addq.l #8,sp
    75fc:	|                  move.l d0,-(sp)
    75fe:	|                  jsr 164c4 <__fixsfsi>
    7604:	|                  addq.l #4,sp
    7606:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    760a:	|              /-- bpl.s 7628 <wrapSpeechXY+0x1f8>
    760c:	|              |   movea.l 1b8a4 <speech>,a0
    7612:	|              |   move.l 8(a0),d0
    7616:	|              |   movea.l 1b8a4 <speech>,a0
    761c:	|              |   sub.l 44(sp),d0
    7620:	|              |   move.l d0,8(a0)
    7624:	|           /--|-- bra.w 7716 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    7628:	|           |  \-> movea.l 1b8a4 <speech>,a0
    762e:	|           |      move.l 8(a0),d0
    7632:	|           |      move.l d0,-(sp)
    7634:	|           |      jsr 1652c <__floatsisf>
    763a:	|           |      addq.l #4,sp
    763c:	|           |      move.l d0,d2
    763e:	|           |      move.l 1b95e <cameraY>,d0
    7644:	|           |      move.l d0,-(sp)
    7646:	|           |      jsr 1652c <__floatsisf>
    764c:	|           |      addq.l #4,sp
    764e:	|           |      move.l d0,d3
    7650:	|           |      move.l 1b7a0 <winHeight>,d4
    7656:	|           |      move.l 1b998 <fontHeight>,d0
    765c:	|           |      pea 3 <_start+0x3>
    7660:	|           |      move.l d0,-(sp)
    7662:	|           |      jsr 16b2c <__divsi3>
    7668:	|           |      addq.l #8,sp
    766a:	|           |      move.l d4,d1
    766c:	|           |      sub.l d0,d1
    766e:	|           |      move.l d1,-(sp)
    7670:	|           |      jsr 16554 <__floatunsisf>
    7676:	|           |      addq.l #4,sp
    7678:	|           |      move.l d0,d1
    767a:	|           |      move.l 1b1e8 <cameraZoom>,d0
    7680:	|           |      move.l d0,-(sp)
    7682:	|           |      move.l d1,-(sp)
    7684:	|           |      jsr 163d8 <__divsf3>
    768a:	|           |      addq.l #8,sp
    768c:	|           |      move.l d0,-(sp)
    768e:	|           |      move.l d3,-(sp)
    7690:	|           |      jsr 162de <__addsf3>
    7696:	|           |      addq.l #8,sp
    7698:	|           |      move.l d0,-(sp)
    769a:	|           |      move.l d2,-(sp)
    769c:	|           |      jsr 16698 <__gtsf2>
    76a2:	|           |      addq.l #8,sp
    76a4:	|           |      tst.l d0
    76a6:	|           +----- ble.s 7716 <wrapSpeechXY+0x2e6>
    76a8:	|           |      move.l 1b95e <cameraY>,d0
    76ae:	|           |      move.l d0,-(sp)
    76b0:	|           |      jsr 1652c <__floatsisf>
    76b6:	|           |      addq.l #4,sp
    76b8:	|           |      move.l d0,d2
    76ba:	|           |      move.l 1b7a0 <winHeight>,d3
    76c0:	|           |      move.l 1b998 <fontHeight>,d0
    76c6:	|           |      pea 3 <_start+0x3>
    76ca:	|           |      move.l d0,-(sp)
    76cc:	|           |      jsr 16b2c <__divsi3>
    76d2:	|           |      addq.l #8,sp
    76d4:	|           |      move.l d3,d1
    76d6:	|           |      sub.l d0,d1
    76d8:	|           |      move.l d1,-(sp)
    76da:	|           |      jsr 16554 <__floatunsisf>
    76e0:	|           |      addq.l #4,sp
    76e2:	|           |      move.l d0,d1
    76e4:	|           |      move.l 1b1e8 <cameraZoom>,d0
    76ea:	|           |      move.l d0,-(sp)
    76ec:	|           |      move.l d1,-(sp)
    76ee:	|           |      jsr 163d8 <__divsf3>
    76f4:	|           |      addq.l #8,sp
    76f6:	|           |      move.l d0,-(sp)
    76f8:	|           |      move.l d2,-(sp)
    76fa:	|           |      jsr 162de <__addsf3>
    7700:	|           |      addq.l #8,sp
    7702:	|           |      movea.l 1b8a4 <speech>,a2
    7708:	|           |      move.l d0,-(sp)
    770a:	|           |      jsr 164c4 <__fixsfsi>
    7710:	|           |      addq.l #4,sp
    7712:	|           |      move.l d0,8(a2)

    if (offset) {
    7716:	|           \----> move.l 16(sp),d0
    771a:	|        /-------- beq.s 7750 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    771c:	|        |         movea.l 1b8a4 <speech>,a0
    7722:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    7728:	|        |     /-- bra.s 774a <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    772a:	|        |  /--|-> movea.l 20(sp),a0
    772e:	|        |  |  |   move.l 8(a0),d1
    7732:	|        |  |  |   move.l 16(sp),d0
    7736:	|        |  |  |   add.l d1,d0
    7738:	|        |  |  |   movea.l 20(sp),a0
    773c:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7740:	|        |  |  |   movea.l 20(sp),a0
    7744:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    774a:	|        |  |  \-> tst.l 20(sp)
    774e:	|        |  \----- bne.s 772a <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7750:	|        \-------> move.l 24(sp),d0
}
    7754:	\----------------> movem.l (sp)+,d2-d4/a2
    7758:	                   lea 16(sp),sp
    775c:	                   rts

0000775e <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    775e:	    subq.l #4,sp
    7760:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    7762:	    move.l 1b8f8 <zBuffer+0x50>,d0
    7768:	/-- beq.s 77a0 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    776a:	|   pea 1b8fc <zBuffer+0x54>
    7770:	|   pea 1 <_start+0x1>
    7774:	|   jsr 303e <deleteTextures>
    777a:	|   addq.l #8,sp
		zBuffer.texName = 0;
    777c:	|   clr.l 1b8fc <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    7782:	|   move.l 1b8f8 <zBuffer+0x50>,4(sp)
    778a:	|   move.l 1b848 <SysBase>,d0
    7790:	|   movea.l d0,a6
    7792:	|   movea.l 4(sp),a1
    7796:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    779a:	|   clr.l 1b8f8 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    77a0:	\-> clr.l 1b8b0 <zBuffer+0x8>
	zBuffer.originalNum =0;
    77a6:	    clr.l 1b8f4 <zBuffer+0x4c>
}
    77ac:	    nop
    77ae:	    movea.l (sp)+,a6
    77b0:	    addq.l #4,sp
    77b2:	    rts

000077b4 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    77b4:	                         lea -528(sp),sp
    77b8:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    77bc:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    77c0:	                         jsr 775e <killZBuffer>

	zBuffer.originalNum = y;
    77c6:	                         move.l 544(sp),d0
    77ca:	                         move.l d0,1b8f4 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    77d0:	                         move.l 544(sp),d0
    77d4:	                         move.l d0,-(sp)
    77d6:	                         jsr 5dca <openFileFromNum>
    77dc:	                         addq.l #4,sp
    77de:	                         tst.l d0
    77e0:	                     /-- bne.s 77e8 <setZBuffer+0x34>
    77e2:	                     |   clr.w d0
    77e4:	/--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    77e8:	|                    \-> move.l 1b830 <bigDataFile>,524(sp)
    77f0:	|                        move.l 1b850 <DOSBase>,d0
    77f6:	|                        movea.l d0,a6
    77f8:	|                        move.l 524(sp),d1
    77fc:	|                        jsr -306(a6)
    7800:	|                        move.l d0,520(sp)
    7804:	|                        move.l 520(sp),d0
    7808:	|                        moveq #83,d1
    780a:	|                        cmp.l d0,d1
    780c:	|                    /-- beq.s 786e <setZBuffer+0xba>
    780e:	|                    |   move.l 1b830 <bigDataFile>,516(sp)
    7816:	|                    |   move.l 1b850 <DOSBase>,d0
    781c:	|                    |   movea.l d0,a6
    781e:	|                    |   move.l 516(sp),d1
    7822:	|                    |   jsr -306(a6)
    7826:	|                    |   move.l d0,512(sp)
    782a:	|                    |   move.l 512(sp),d0
    782e:	|                    |   moveq #122,d1
    7830:	|                    |   cmp.l d0,d1
    7832:	|                    +-- beq.s 786e <setZBuffer+0xba>
    7834:	|                    |   move.l 1b830 <bigDataFile>,508(sp)
    783c:	|                    |   move.l 1b850 <DOSBase>,d0
    7842:	|                    |   movea.l d0,a6
    7844:	|                    |   move.l 508(sp),d1
    7848:	|                    |   jsr -306(a6)
    784c:	|                    |   move.l d0,504(sp)
    7850:	|                    |   move.l 504(sp),d0
    7854:	|                    |   moveq #98,d1
    7856:	|                    |   cmp.l d0,d1
    7858:	|                    +-- beq.s 786e <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    785a:	|                    |   pea 17e02 <PutChar+0x123e>
    7860:	|                    |   jsr 16274 <KPrintF>
    7866:	|                    |   addq.l #4,sp
		 return FALSE;
    7868:	|                    |   clr.w d0
    786a:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    786e:	|                    \-> move.l 1b830 <bigDataFile>,500(sp)
    7876:	|                        move.l 1b850 <DOSBase>,d0
    787c:	|                        movea.l d0,a6
    787e:	|                        move.l 500(sp),d1
    7882:	|                        jsr -306(a6)
    7886:	|                        move.l d0,496(sp)
    788a:	|                        move.l 496(sp),d0
    788e:	|                    /-- beq.s 7898 <setZBuffer+0xe4>
    7890:	|                    |   moveq #1,d1
    7892:	|                    |   cmp.l d0,d1
    7894:	|                 /--|-- beq.s 78ae <setZBuffer+0xfa>
    7896:	|              /--|--|-- bra.s 78dc <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    7898:	|              |  |  \-> move.l #640,1b8a8 <zBuffer>
		zBuffer.height = 480;
    78a2:	|              |  |      move.l #480,1b8ac <zBuffer+0x4>
		break;
    78ac:	|              |  |  /-- bra.s 78f0 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    78ae:	|              |  \--|-> move.l 1b830 <bigDataFile>,d0
    78b4:	|              |     |   move.l d0,-(sp)
    78b6:	|              |     |   jsr 6bc <get2bytes>
    78bc:	|              |     |   addq.l #4,sp
    78be:	|              |     |   move.l d0,1b8a8 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    78c4:	|              |     |   move.l 1b830 <bigDataFile>,d0
    78ca:	|              |     |   move.l d0,-(sp)
    78cc:	|              |     |   jsr 6bc <get2bytes>
    78d2:	|              |     |   addq.l #4,sp
    78d4:	|              |     |   move.l d0,1b8ac <zBuffer+0x4>
		break;
    78da:	|              |     +-- bra.s 78f0 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    78dc:	|              \-----|-> pea 17e16 <PutChar+0x1252>
    78e2:	|                    |   jsr 16274 <KPrintF>
    78e8:	|                    |   addq.l #4,sp
		return FALSE;
    78ea:	|                    |   clr.w d0
    78ec:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    78f0:	|                    \-> move.l 1b8a8 <zBuffer>,d0
    78f6:	|                        move.l d0,d1
    78f8:	|                        move.l 1b93c <sceneWidth>,d0
    78fe:	|                        cmp.l d1,d0
    7900:	|                    /-- bne.s 7914 <setZBuffer+0x160>
    7902:	|                    |   move.l 1b8ac <zBuffer+0x4>,d0
    7908:	|                    |   move.l d0,d1
    790a:	|                    |   move.l 1b940 <sceneHeight>,d0
    7910:	|                    |   cmp.l d1,d0
    7912:	|                 /--|-- beq.s 7964 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    7914:	|                 |  \-> movea.l 1b940 <sceneHeight>,a1
    791a:	|                 |      movea.l 1b93c <sceneWidth>,a0
    7920:	|                 |      move.l 1b8ac <zBuffer+0x4>,d1
    7926:	|                 |      move.l 1b8a8 <zBuffer>,d0
    792c:	|                 |      move.l a1,-(sp)
    792e:	|                 |      move.l a0,-(sp)
    7930:	|                 |      move.l d1,-(sp)
    7932:	|                 |      move.l d0,-(sp)
    7934:	|                 |      pea 17e62 <PutChar+0x129e>
    793a:	|                 |      moveq #32,d0
    793c:	|                 |      add.l sp,d0
    793e:	|                 |      move.l d0,-(sp)
    7940:	|                 |      jsr 1315e <sprintf>
    7946:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    794a:	|                 |      moveq #12,d0
    794c:	|                 |      add.l sp,d0
    794e:	|                 |      move.l d0,-(sp)
    7950:	|                 |      pea 17e7d <PutChar+0x12b9>
    7956:	|                 |      jsr 16274 <KPrintF>
    795c:	|                 |      addq.l #8,sp
		return FALSE;
    795e:	|                 |      clr.w d0
    7960:	+-----------------|----- bra.w 7bc6 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    7964:	|                 \----> move.l 1b830 <bigDataFile>,492(sp)
    796c:	|                        move.l 1b850 <DOSBase>,d0
    7972:	|                        movea.l d0,a6
    7974:	|                        move.l 492(sp),d1
    7978:	|                        jsr -306(a6)
    797c:	|                        move.l d0,488(sp)
    7980:	|                        move.l 488(sp),d0
    7984:	|                        move.l d0,1b8b0 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    798a:	|                        clr.l 544(sp)
    798e:	|                    /-- bra.s 79ba <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    7990:	|                 /--|-> move.l 1b830 <bigDataFile>,d0
    7996:	|                 |  |   move.l d0,-(sp)
    7998:	|                 |  |   jsr 6bc <get2bytes>
    799e:	|                 |  |   addq.l #4,sp
    79a0:	|                 |  |   move.l 544(sp),d1
    79a4:	|                 |  |   add.l d1,d1
    79a6:	|                 |  |   add.l d1,d1
    79a8:	|                 |  |   lea 540(sp),a0
    79ac:	|                 |  |   add.l a0,d1
    79ae:	|                 |  |   movea.l d1,a0
    79b0:	|                 |  |   lea -144(a0),a0
    79b4:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    79b6:	|                 |  |   addq.l #1,544(sp)
    79ba:	|                 |  \-> move.l 1b8b0 <zBuffer+0x8>,d0
    79c0:	|                 |      cmp.l 544(sp),d0
    79c4:	|                 \----- bhi.s 7990 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    79c6:	|                        move.l 1b8b0 <zBuffer+0x8>,d0
    79cc:	|                        move.l d0,-(sp)
    79ce:	|                        move.l sp,d0
    79d0:	|                        addi.l #336,d0
    79d6:	|                        move.l d0,-(sp)
    79d8:	|                        move.l sp,d0
    79da:	|                        addi.l #404,d0
    79e0:	|                        move.l d0,-(sp)
    79e2:	|                        jsr 7bd0 <sortZPal>
    79e8:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    79ec:	|                        clr.l 544(sp)
    79f0:	|                    /-- bra.s 7a68 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    79f2:	|                 /--|-> move.l 544(sp),d0
    79f6:	|                 |  |   add.l d0,d0
    79f8:	|                 |  |   add.l d0,d0
    79fa:	|                 |  |   move.l #540,d1
    7a00:	|                 |  |   add.l sp,d1
    7a02:	|                 |  |   add.l d1,d0
    7a04:	|                 |  |   movea.l d0,a0
    7a06:	|                 |  |   lea -208(a0),a0
    7a0a:	|                 |  |   move.l (a0),d0
    7a0c:	|                 |  |   add.l d0,d0
    7a0e:	|                 |  |   add.l d0,d0
    7a10:	|                 |  |   lea 540(sp),a0
    7a14:	|                 |  |   add.l a0,d0
    7a16:	|                 |  |   movea.l d0,a0
    7a18:	|                 |  |   lea -144(a0),a0
    7a1c:	|                 |  |   move.l (a0),d0
    7a1e:	|                 |  |   move.l 544(sp),d1
    7a22:	|                 |  |   addq.l #3,d1
    7a24:	|                 |  |   add.l d1,d1
    7a26:	|                 |  |   movea.l d1,a1
    7a28:	|                 |  |   adda.l d1,a1
    7a2a:	|                 |  |   lea 1b8a8 <zBuffer>,a0
    7a30:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    7a34:	|                 |  |   move.l 544(sp),d0
    7a38:	|                 |  |   add.l d0,d0
    7a3a:	|                 |  |   add.l d0,d0
    7a3c:	|                 |  |   move.l #540,d1
    7a42:	|                 |  |   add.l sp,d1
    7a44:	|                 |  |   add.l d1,d0
    7a46:	|                 |  |   movea.l d0,a0
    7a48:	|                 |  |   lea -208(a0),a0
    7a4c:	|                 |  |   move.l (a0),d1
    7a4e:	|                 |  |   move.l 544(sp),d0
    7a52:	|                 |  |   add.l d1,d1
    7a54:	|                 |  |   add.l d1,d1
    7a56:	|                 |  |   lea 540(sp),a0
    7a5a:	|                 |  |   add.l a0,d1
    7a5c:	|                 |  |   movea.l d1,a0
    7a5e:	|                 |  |   lea -272(a0),a0
    7a62:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7a64:	|                 |  |   addq.l #1,544(sp)
    7a68:	|                 |  \-> move.l 1b8b0 <zBuffer+0x8>,d0
    7a6e:	|                 |      cmp.l 544(sp),d0
    7a72:	|                 \----- bhi.w 79f2 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    7a76:	|                        move.l 1b93c <sceneWidth>,d0
    7a7c:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    7a80:	|                        move.l 1b940 <sceneHeight>,d0
    7a86:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7a8a:	|                        move.l 484(sp),-(sp)
    7a8e:	|                        move.l 484(sp),-(sp)
    7a92:	|                        jsr 16aae <__mulsi3>
    7a98:	|                        addq.l #8,sp
    7a9a:	|                        move.l d0,476(sp)
    7a9e:	|                        clr.l 472(sp)
    7aa2:	|                        move.l 1b848 <SysBase>,d0
    7aa8:	|                        movea.l d0,a6
    7aaa:	|                        move.l 476(sp),d0
    7aae:	|                        move.l 472(sp),d1
    7ab2:	|                        jsr -684(a6)
    7ab6:	|                        move.l d0,468(sp)
    7aba:	|                        move.l 468(sp),d0
    7abe:	|                        move.l d0,1b8f8 <zBuffer+0x50>
	if (!zBuffer.tex) {
    7ac4:	|                        move.l 1b8f8 <zBuffer+0x50>,d0
    7aca:	|                    /-- bne.s 7ae0 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7acc:	|                    |   pea 17eba <PutChar+0x12f6>
    7ad2:	|                    |   jsr 16274 <KPrintF>
    7ad8:	|                    |   addq.l #4,sp
		return FALSE;
    7ada:	|                    |   clr.w d0
    7adc:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    7ae0:	|                    \-> clr.l 544(sp)
    7ae4:	|     /----------------- bra.w 7bb0 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7ae8:	|  /--|----------------> clr.l 536(sp)
    7aec:	|  |  |     /----------- bra.w 7b9c <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    7af0:	|  |  |  /--|----------> tst.l 528(sp)
    7af4:	|  |  |  |  |  /-------- bne.s 7b52 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    7af6:	|  |  |  |  |  |         move.l 1b830 <bigDataFile>,464(sp)
    7afe:	|  |  |  |  |  |         move.l 1b850 <DOSBase>,d0
    7b04:	|  |  |  |  |  |         movea.l d0,a6
    7b06:	|  |  |  |  |  |         move.l 464(sp),d1
    7b0a:	|  |  |  |  |  |         jsr -306(a6)
    7b0e:	|  |  |  |  |  |         move.l d0,460(sp)
    7b12:	|  |  |  |  |  |         move.l 460(sp),d0
    7b16:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    7b1a:	|  |  |  |  |  |         move.l 532(sp),d0
    7b1e:	|  |  |  |  |  |         asr.l #4,d0
    7b20:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    7b24:	|  |  |  |  |  |         moveq #15,d0
    7b26:	|  |  |  |  |  |         cmp.l 528(sp),d0
    7b2a:	|  |  |  |  |  |  /----- bne.s 7b48 <setZBuffer+0x394>
    7b2c:	|  |  |  |  |  |  |      move.l 1b830 <bigDataFile>,d0
    7b32:	|  |  |  |  |  |  |      move.l d0,-(sp)
    7b34:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    7b3a:	|  |  |  |  |  |  |      addq.l #4,sp
    7b3c:	|  |  |  |  |  |  |      movea.l d0,a0
    7b3e:	|  |  |  |  |  |  |      lea 16(a0),a0
    7b42:	|  |  |  |  |  |  |      move.l a0,528(sp)
    7b46:	|  |  |  |  |  |  |  /-- bra.s 7b4c <setZBuffer+0x398>
				else stillToGo ++;
    7b48:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    7b4c:	|  |  |  |  |  |     \-> moveq #15,d1
    7b4e:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    7b52:	|  |  |  |  |  \-------> move.l 532(sp),d0
    7b56:	|  |  |  |  |            add.l d0,d0
    7b58:	|  |  |  |  |            add.l d0,d0
    7b5a:	|  |  |  |  |            lea 540(sp),a0
    7b5e:	|  |  |  |  |            add.l a0,d0
    7b60:	|  |  |  |  |            movea.l d0,a0
    7b62:	|  |  |  |  |            lea -272(a0),a0
    7b66:	|  |  |  |  |            move.l (a0),d0
    7b68:	|  |  |  |  |            move.l d0,d2
    7b6a:	|  |  |  |  |            move.l 1b8f8 <zBuffer+0x50>,d3
    7b70:	|  |  |  |  |            move.l 484(sp),d0
    7b74:	|  |  |  |  |            move.l 544(sp),-(sp)
    7b78:	|  |  |  |  |            move.l d0,-(sp)
    7b7a:	|  |  |  |  |            jsr 16aae <__mulsi3>
    7b80:	|  |  |  |  |            addq.l #8,sp
    7b82:	|  |  |  |  |            move.l d0,d1
    7b84:	|  |  |  |  |            move.l 536(sp),d0
    7b88:	|  |  |  |  |            add.l d1,d0
    7b8a:	|  |  |  |  |            movea.l d3,a0
    7b8c:	|  |  |  |  |            adda.l d0,a0
    7b8e:	|  |  |  |  |            move.b d2,d0
    7b90:	|  |  |  |  |            lsl.b #4,d0
    7b92:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7b94:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7b98:	|  |  |  |  |            addq.l #1,536(sp)
    7b9c:	|  |  |  |  \----------> move.l 536(sp),d1
    7ba0:	|  |  |  |               move.l 1b93c <sceneWidth>,d0
    7ba6:	|  |  |  |               cmp.l d1,d0
    7ba8:	|  |  |  \-------------- bhi.w 7af0 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7bac:	|  |  |                  addq.l #1,544(sp)
    7bb0:	|  |  \----------------> move.l 1b940 <sceneHeight>,d0
    7bb6:	|  |                     cmp.l 544(sp),d0
    7bba:	|  \-------------------- bhi.w 7ae8 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7bbe:	|                        jsr 5cc2 <finishAccess>
	
	return TRUE;
    7bc4:	|                        moveq #1,d0
}
    7bc6:	\----------------------> movem.l (sp)+,d2-d3/a6
    7bca:	                         lea 528(sp),sp
    7bce:	                         rts

00007bd0 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7bd0:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7bd2:	             clr.l 4(sp)
    7bd6:	         /-- bra.s 7bee <sortZPal+0x1e>
		newpal[i] = i;
    7bd8:	      /--|-> move.l 4(sp),d0
    7bdc:	      |  |   add.l d0,d0
    7bde:	      |  |   add.l d0,d0
    7be0:	      |  |   movea.l 16(sp),a0
    7be4:	      |  |   adda.l d0,a0
    7be6:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7bea:	      |  |   addq.l #1,4(sp)
    7bee:	      |  \-> move.l 4(sp),d0
    7bf2:	      |      cmp.l 20(sp),d0
    7bf6:	      \----- blt.s 7bd8 <sortZPal+0x8>
	}

	if (size < 2) return;		
    7bf8:	             moveq #1,d0
    7bfa:	             cmp.l 20(sp),d0
    7bfe:	/----------- bge.w 7cb0 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7c02:	|            moveq #1,d0
    7c04:	|            move.l d0,4(sp)
    7c08:	|     /----- bra.w 7ca2 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7c0c:	|  /--|----> move.l 4(sp),d0
    7c10:	|  |  |      add.l d0,d0
    7c12:	|  |  |      add.l d0,d0
    7c14:	|  |  |      movea.l 16(sp),a0
    7c18:	|  |  |      adda.l d0,a0
    7c1a:	|  |  |      move.l (a0),d0
    7c1c:	|  |  |      add.l d0,d0
    7c1e:	|  |  |      add.l d0,d0
    7c20:	|  |  |      movea.l 12(sp),a0
    7c24:	|  |  |      adda.l d0,a0
    7c26:	|  |  |      move.l (a0),d1
    7c28:	|  |  |      move.l 4(sp),d0
    7c2c:	|  |  |      addi.l #1073741823,d0
    7c32:	|  |  |      add.l d0,d0
    7c34:	|  |  |      add.l d0,d0
    7c36:	|  |  |      movea.l 16(sp),a0
    7c3a:	|  |  |      adda.l d0,a0
    7c3c:	|  |  |      move.l (a0),d0
    7c3e:	|  |  |      add.l d0,d0
    7c40:	|  |  |      add.l d0,d0
    7c42:	|  |  |      movea.l 12(sp),a0
    7c46:	|  |  |      adda.l d0,a0
    7c48:	|  |  |      move.l (a0),d0
    7c4a:	|  |  |      cmp.l d1,d0
    7c4c:	|  |  |  /-- ble.s 7c9e <sortZPal+0xce>
			tmp = newpal[i];
    7c4e:	|  |  |  |   move.l 4(sp),d0
    7c52:	|  |  |  |   add.l d0,d0
    7c54:	|  |  |  |   add.l d0,d0
    7c56:	|  |  |  |   movea.l 16(sp),a0
    7c5a:	|  |  |  |   adda.l d0,a0
    7c5c:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7c5e:	|  |  |  |   move.l 4(sp),d0
    7c62:	|  |  |  |   addi.l #1073741823,d0
    7c68:	|  |  |  |   add.l d0,d0
    7c6a:	|  |  |  |   add.l d0,d0
    7c6c:	|  |  |  |   movea.l 16(sp),a1
    7c70:	|  |  |  |   adda.l d0,a1
    7c72:	|  |  |  |   move.l 4(sp),d0
    7c76:	|  |  |  |   add.l d0,d0
    7c78:	|  |  |  |   add.l d0,d0
    7c7a:	|  |  |  |   movea.l 16(sp),a0
    7c7e:	|  |  |  |   adda.l d0,a0
    7c80:	|  |  |  |   move.l (a1),d0
    7c82:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7c84:	|  |  |  |   move.l 4(sp),d0
    7c88:	|  |  |  |   addi.l #1073741823,d0
    7c8e:	|  |  |  |   add.l d0,d0
    7c90:	|  |  |  |   add.l d0,d0
    7c92:	|  |  |  |   movea.l 16(sp),a0
    7c96:	|  |  |  |   adda.l d0,a0
    7c98:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7c9a:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7c9e:	|  |  |  \-> addq.l #1,4(sp)
    7ca2:	|  |  \----> move.l 4(sp),d0
    7ca6:	|  |         cmp.l 20(sp),d0
    7caa:	|  \-------- blt.w 7c0c <sortZPal+0x3c>
    7cae:	|        /-- bra.s 7cb2 <sortZPal+0xe2>
	if (size < 2) return;		
    7cb0:	\--------|-> nop
		}
	}
    7cb2:	         \-> addq.l #8,sp
    7cb4:	             rts

00007cb6 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7cb6:	          lea -36(sp),sp
    7cba:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7cbc:	          move.l 44(sp),d0
    7cc0:	          addq.l #8,d0
    7cc2:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7cc6:	          clr.l 36(sp)
    7cca:	   /----- bra.s 7d10 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7ccc:	/--|----> movea.l 28(sp),a0
    7cd0:	|  |      movea.l 8(a0),a0
    7cd4:	|  |      move.l 36(sp),d1
    7cd8:	|  |      move.l d1,d0
    7cda:	|  |      lsl.l #3,d0
    7cdc:	|  |      sub.l d1,d0
    7cde:	|  |      add.l d0,d0
    7ce0:	|  |      add.l d0,d0
    7ce2:	|  |      adda.l d0,a0
    7ce4:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7ce8:	|  |      movea.l 8(sp),a0
    7cec:	|  |      move.l 24(a0),d0
    7cf0:	|  |  /-- beq.s 7d0c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7cf2:	|  |  |   movea.l 8(sp),a0
    7cf6:	|  |  |   move.l 24(a0),4(sp)
    7cfc:	|  |  |   move.l 1b848 <SysBase>,d0
    7d02:	|  |  |   movea.l d0,a6
    7d04:	|  |  |   movea.l 4(sp),a1
    7d08:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7d0c:	|  |  \-> addq.l #1,36(sp)
    7d10:	|  \----> movea.l 28(sp),a0
    7d14:	|         move.l (a0),d0
    7d16:	|         cmp.l 36(sp),d0
    7d1a:	\-------- bgt.s 7ccc <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7d1c:	          movea.l 28(sp),a0
    7d20:	          move.l 8(a0),24(sp)
    7d26:	          move.l 1b848 <SysBase>,d0
    7d2c:	          movea.l d0,a6
    7d2e:	          movea.l 24(sp),a1
    7d32:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7d36:	          move.l 28(sp),20(sp)
    7d3c:	          move.l 1b848 <SysBase>,d0
    7d42:	          movea.l d0,a6
    7d44:	          movea.l 20(sp),a1
    7d48:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7d4c:	          move.l 1b9b8 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7d54:	      /-- bra.s 7d60 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7d56:	   /--|-> movea.l 32(sp),a0
    7d5a:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7d60:	   |  \-> movea.l 32(sp),a0
    7d64:	   |      movea.l 22(a0),a0
    7d68:	   |      move.l (a0),d1
    7d6a:	   |      movea.l 44(sp),a0
    7d6e:	   |      move.l (a0),d0
    7d70:	   |      cmp.l d1,d0
    7d72:	   |  /-- beq.s 7d7a <forgetSpriteBank+0xc4>
    7d74:	   |  |   tst.l 32(sp)
    7d78:	   \--|-- bne.s 7d56 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7d7a:	      \-> tst.l 32(sp)
    7d7e:	   /----- beq.s 7da8 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7d80:	   |      movea.l 44(sp),a0
    7d84:	   |      move.l 22(a0),d0
    7d88:	   |      movea.l 32(sp),a0
    7d8c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7d90:	   |      move.l 44(sp),12(sp)
    7d96:	   |      move.l 1b848 <SysBase>,d0
    7d9c:	   |      movea.l d0,a6
    7d9e:	   |      movea.l 12(sp),a1
    7da2:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7da6:	   |  /-- bra.s 7dce <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7da8:	   \--|-> movea.l 1b9b8 <allLoadedBanks>,a0
    7dae:	      |   move.l 22(a0),d0
    7db2:	      |   move.l d0,1b9b8 <allLoadedBanks>
		FreeVec( forgetme);
    7db8:	      |   move.l 44(sp),16(sp)
    7dbe:	      |   move.l 1b848 <SysBase>,d0
    7dc4:	      |   movea.l d0,a6
    7dc6:	      |   movea.l 16(sp),a1
    7dca:	      |   jsr -690(a6)
}
    7dce:	      \-> nop
    7dd0:	          movea.l (sp)+,a6
    7dd2:	          lea 36(sp),sp
    7dd6:	          rts

00007dd8 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7dd8:	                      lea -84(sp),sp
    7ddc:	                      movem.l d2-d4/a2/a6,-(sp)
    7de0:	                      move.l 116(sp),d0
    7de4:	                      move.w d0,d0
    7de6:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7dea:	                      clr.l 94(sp)
    7dee:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7df2:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7df6:	                      move.l 108(sp),-(sp)
    7dfa:	                      jsr 5dca <openFileFromNum>
    7e00:	                      addq.l #4,sp
    7e02:	                      tst.l d0
    7e04:	                  /-- bne.s 7e1a <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7e06:	                  |   pea 17edd <PutChar+0x1319>
    7e0c:	                  |   jsr 16274 <KPrintF>
    7e12:	                  |   addq.l #4,sp
		return FALSE;
    7e14:	                  |   clr.w d0
    7e16:	/-----------------|-- bra.w 81e2 <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    7e1a:	|                 \-> movea.l 112(sp),a0
    7e1e:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7e24:	|                     move.l 1b830 <bigDataFile>,d0
    7e2a:	|                     move.l d0,-(sp)
    7e2c:	|                     jsr 6bc <get2bytes>
    7e32:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7e34:	|                     move.l 1b830 <bigDataFile>,82(sp)
    7e3c:	|                     move.l 1b850 <DOSBase>,d0
    7e42:	|                     movea.l d0,a6
    7e44:	|                     move.l 82(sp),d1
    7e48:	|                     jsr -306(a6)
    7e4c:	|                     move.l d0,78(sp)
    7e50:	|                     move.l 78(sp),d0
    7e54:	|                     movea.l 112(sp),a0
    7e58:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7e5c:	|                     move.l 1b830 <bigDataFile>,d0
    7e62:	|                     move.l d0,-(sp)
    7e64:	|                     jsr 6bc <get2bytes>
    7e6a:	|                     addq.l #4,sp
    7e6c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    7e70:	|                 /-- bgt.s 7e86 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7e72:	|                 |   pea 17f0b <PutChar+0x1347>
    7e78:	|                 |   jsr 16274 <KPrintF>
    7e7e:	|                 |   addq.l #4,sp
		return FALSE;
    7e80:	|                 |   clr.w d0
    7e82:	+-----------------|-- bra.w 81e2 <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    7e86:	|                 \-> movea.l 112(sp),a0
    7e8a:	|                     move.l 4(a0),d0
    7e8e:	|                     moveq #3,d1
    7e90:	|                     cmp.l d0,d1
    7e92:	|                 /-- bge.s 7ea8 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7e94:	|                 |   pea 17f4b <PutChar+0x1387>
    7e9a:	|                 |   jsr 16274 <KPrintF>
    7ea0:	|                 |   addq.l #4,sp
		return FALSE;
    7ea2:	|                 |   clr.w d0
    7ea4:	+-----------------|-- bra.w 81e2 <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    7ea8:	|                 \-> movea.l 112(sp),a0
    7eac:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7eb0:	|                     move.l 74(sp),d1
    7eb4:	|                     move.l d1,d0
    7eb6:	|                     lsl.l #3,d0
    7eb8:	|                     sub.l d1,d0
    7eba:	|                     add.l d0,d0
    7ebc:	|                     add.l d0,d0
    7ebe:	|                     move.l d0,70(sp)
    7ec2:	|                     clr.l 66(sp)
    7ec6:	|                     move.l 1b848 <SysBase>,d0
    7ecc:	|                     movea.l d0,a6
    7ece:	|                     move.l 70(sp),d0
    7ed2:	|                     move.l 66(sp),d1
    7ed6:	|                     jsr -684(a6)
    7eda:	|                     move.l d0,62(sp)
    7ede:	|                     move.l 62(sp),d0
    7ee2:	|                     movea.l 112(sp),a0
    7ee6:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7eea:	|                     movea.l 112(sp),a0
    7eee:	|                     move.l 8(a0),d0
    7ef2:	|                 /-- bne.s 7efa <loadSpriteBank+0x122>
    7ef4:	|                 |   clr.w d0
    7ef6:	+-----------------|-- bra.w 81e2 <loadSpriteBank+0x40a>
	
	startIndex = 1;
    7efa:	|                 \-> moveq #1,d0
    7efc:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    7f00:	|                     clr.l 100(sp)
    7f04:	|     /-------------- bra.w 81ce <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    7f08:	|  /--|-------------> move.l 1b830 <bigDataFile>,d0
    7f0e:	|  |  |               move.l d0,-(sp)
    7f10:	|  |  |               jsr 6bc <get2bytes>
    7f16:	|  |  |               addq.l #4,sp
    7f18:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    7f1c:	|  |  |               movea.l 112(sp),a0
    7f20:	|  |  |               movea.l 8(a0),a0
    7f24:	|  |  |               move.l 100(sp),d1
    7f28:	|  |  |               move.l d1,d0
    7f2a:	|  |  |               lsl.l #3,d0
    7f2c:	|  |  |               sub.l d1,d0
    7f2e:	|  |  |               add.l d0,d0
    7f30:	|  |  |               add.l d0,d0
    7f32:	|  |  |               adda.l d0,a0
    7f34:	|  |  |               moveq #0,d0
    7f36:	|  |  |               move.w 60(sp),d0
    7f3a:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7f3c:	|  |  |               movea.l 1b830 <bigDataFile>,a1
    7f42:	|  |  |               movea.l 112(sp),a0
    7f46:	|  |  |               movea.l 8(a0),a0
    7f4a:	|  |  |               move.l 100(sp),d1
    7f4e:	|  |  |               move.l d1,d0
    7f50:	|  |  |               lsl.l #3,d0
    7f52:	|  |  |               sub.l d1,d0
    7f54:	|  |  |               add.l d0,d0
    7f56:	|  |  |               add.l d0,d0
    7f58:	|  |  |               lea (0,a0,d0.l),a2
    7f5c:	|  |  |               move.l a1,-(sp)
    7f5e:	|  |  |               jsr 6bc <get2bytes>
    7f64:	|  |  |               addq.l #4,sp
    7f66:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7f6a:	|  |  |               movea.l 1b830 <bigDataFile>,a1
    7f70:	|  |  |               movea.l 112(sp),a0
    7f74:	|  |  |               movea.l 8(a0),a0
    7f78:	|  |  |               move.l 100(sp),d1
    7f7c:	|  |  |               move.l d1,d0
    7f7e:	|  |  |               lsl.l #3,d0
    7f80:	|  |  |               sub.l d1,d0
    7f82:	|  |  |               add.l d0,d0
    7f84:	|  |  |               add.l d0,d0
    7f86:	|  |  |               lea (0,a0,d0.l),a2
    7f8a:	|  |  |               move.l a1,-(sp)
    7f8c:	|  |  |               jsr 6bc <get2bytes>
    7f92:	|  |  |               addq.l #4,sp
    7f94:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7f98:	|  |  |               movea.l 1b830 <bigDataFile>,a1
    7f9e:	|  |  |               movea.l 112(sp),a0
    7fa2:	|  |  |               movea.l 8(a0),a0
    7fa6:	|  |  |               move.l 100(sp),d1
    7faa:	|  |  |               move.l d1,d0
    7fac:	|  |  |               lsl.l #3,d0
    7fae:	|  |  |               sub.l d1,d0
    7fb0:	|  |  |               add.l d0,d0
    7fb2:	|  |  |               add.l d0,d0
    7fb4:	|  |  |               lea (0,a0,d0.l),a2
    7fb8:	|  |  |               move.l a1,-(sp)
    7fba:	|  |  |               jsr 6bc <get2bytes>
    7fc0:	|  |  |               addq.l #4,sp
    7fc2:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    7fc6:	|  |  |               movea.l 112(sp),a0
    7fca:	|  |  |               move.l 4(a0),d0
    7fce:	|  |  |               moveq #3,d1
    7fd0:	|  |  |               cmp.l d0,d1
    7fd2:	|  |  |     /-------- beq.w 806e <loadSpriteBank+0x296>
    7fd6:	|  |  |     |         moveq #3,d1
    7fd8:	|  |  |     |         cmp.l d0,d1
    7fda:	|  |  |  /--|-------- blt.w 8106 <loadSpriteBank+0x32e>
    7fde:	|  |  |  |  |         moveq #1,d1
    7fe0:	|  |  |  |  |         cmp.l d0,d1
    7fe2:	|  |  |  |  |     /-- beq.s 7fee <loadSpriteBank+0x216>
    7fe4:	|  |  |  |  |     |   moveq #2,d1
    7fe6:	|  |  |  |  |     |   cmp.l d0,d1
    7fe8:	|  |  |  |  |  /--|-- beq.s 801a <loadSpriteBank+0x242>
    7fea:	|  |  |  +--|--|--|-- bra.w 8106 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    7fee:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    7ff2:	|  |  |  |  |  |      movea.l 8(a0),a0
    7ff6:	|  |  |  |  |  |      move.l 100(sp),d1
    7ffa:	|  |  |  |  |  |      move.l d1,d0
    7ffc:	|  |  |  |  |  |      lsl.l #3,d0
    7ffe:	|  |  |  |  |  |      sub.l d1,d0
    8000:	|  |  |  |  |  |      add.l d0,d0
    8002:	|  |  |  |  |  |      add.l d0,d0
    8004:	|  |  |  |  |  |      adda.l d0,a0
    8006:	|  |  |  |  |  |      move.l 4(a0),d0
    800a:	|  |  |  |  |  |      addq.l #2,d0
    800c:	|  |  |  |  |  |      move.l d0,d0
    800e:	|  |  |  |  |  |      add.w d0,d0
    8010:	|  |  |  |  |  |      add.w d0,d0
    8012:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8016:	|  |  |  +--|--|----- bra.w 8106 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    801a:	|  |  |  |  |  \----> movea.l 112(sp),a0
    801e:	|  |  |  |  |         movea.l 8(a0),a0
    8022:	|  |  |  |  |         move.l 100(sp),d1
    8026:	|  |  |  |  |         move.l d1,d0
    8028:	|  |  |  |  |         lsl.l #3,d0
    802a:	|  |  |  |  |         sub.l d1,d0
    802c:	|  |  |  |  |         add.l d0,d0
    802e:	|  |  |  |  |         add.l d0,d0
    8030:	|  |  |  |  |         adda.l d0,a0
    8032:	|  |  |  |  |         move.l (a0),d0
    8034:	|  |  |  |  |     /-- bpl.s 8038 <loadSpriteBank+0x260>
    8036:	|  |  |  |  |     |   addq.l #7,d0
    8038:	|  |  |  |  |     \-> asr.l #3,d0
    803a:	|  |  |  |  |         move.l d0,d2
    803c:	|  |  |  |  |         movea.l 112(sp),a0
    8040:	|  |  |  |  |         movea.l 8(a0),a0
    8044:	|  |  |  |  |         move.l 100(sp),d1
    8048:	|  |  |  |  |         move.l d1,d0
    804a:	|  |  |  |  |         lsl.l #3,d0
    804c:	|  |  |  |  |         sub.l d1,d0
    804e:	|  |  |  |  |         add.l d0,d0
    8050:	|  |  |  |  |         add.l d0,d0
    8052:	|  |  |  |  |         adda.l d0,a0
    8054:	|  |  |  |  |         move.l 4(a0),d0
    8058:	|  |  |  |  |         move.l d0,d0
    805a:	|  |  |  |  |         move.w d2,d1
    805c:	|  |  |  |  |         muls.w d0,d1
    805e:	|  |  |  |  |         move.w d1,d0
    8060:	|  |  |  |  |         add.w d0,d0
    8062:	|  |  |  |  |         add.w d1,d0
    8064:	|  |  |  |  |         add.w d0,d0
    8066:	|  |  |  |  |         move.w d0,98(sp)
				break;
    806a:	|  |  |  +--|-------- bra.w 8106 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    806e:	|  |  |  |  \-------> movea.l 112(sp),a0
    8072:	|  |  |  |            movea.l 8(a0),a0
    8076:	|  |  |  |            move.l 100(sp),d1
    807a:	|  |  |  |            move.l d1,d0
    807c:	|  |  |  |            lsl.l #3,d0
    807e:	|  |  |  |            sub.l d1,d0
    8080:	|  |  |  |            add.l d0,d0
    8082:	|  |  |  |            add.l d0,d0
    8084:	|  |  |  |            adda.l d0,a0
    8086:	|  |  |  |            move.l (a0),d0
    8088:	|  |  |  |            andi.l #-2147483633,d0
    808e:	|  |  |  |        /-- bpl.s 8098 <loadSpriteBank+0x2c0>
    8090:	|  |  |  |        |   subq.l #1,d0
    8092:	|  |  |  |        |   moveq #-16,d1
    8094:	|  |  |  |        |   or.l d1,d0
    8096:	|  |  |  |        |   addq.l #1,d0
    8098:	|  |  |  |        \-> tst.l d0
    809a:	|  |  |  |     /----- ble.s 80a0 <loadSpriteBank+0x2c8>
    809c:	|  |  |  |     |      moveq #2,d0
    809e:	|  |  |  |     |  /-- bra.s 80a2 <loadSpriteBank+0x2ca>
    80a0:	|  |  |  |     \--|-> clr.w d0
    80a2:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    80a6:	|  |  |  |            movea.l 112(sp),a0
    80aa:	|  |  |  |            movea.l 8(a0),a0
    80ae:	|  |  |  |            move.l 100(sp),d1
    80b2:	|  |  |  |            move.l d1,d0
    80b4:	|  |  |  |            lsl.l #3,d0
    80b6:	|  |  |  |            sub.l d1,d0
    80b8:	|  |  |  |            add.l d0,d0
    80ba:	|  |  |  |            add.l d0,d0
    80bc:	|  |  |  |            adda.l d0,a0
    80be:	|  |  |  |            move.l (a0),d0
    80c0:	|  |  |  |            movea.l d0,a0
    80c2:	|  |  |  |            cmpa.w #0,a0
    80c6:	|  |  |  |        /-- bge.s 80cc <loadSpriteBank+0x2f4>
    80c8:	|  |  |  |        |   lea 15(a0),a0
    80cc:	|  |  |  |        \-> move.l a0,d0
    80ce:	|  |  |  |            asr.l #4,d0
    80d0:	|  |  |  |            add.l d0,d0
    80d2:	|  |  |  |            move.l d0,d1
    80d4:	|  |  |  |            moveq #0,d0
    80d6:	|  |  |  |            move.w 58(sp),d0
    80da:	|  |  |  |            add.l d1,d0
    80dc:	|  |  |  |            move.l d0,d2
    80de:	|  |  |  |            movea.l 112(sp),a0
    80e2:	|  |  |  |            movea.l 8(a0),a0
    80e6:	|  |  |  |            move.l 100(sp),d1
    80ea:	|  |  |  |            move.l d1,d0
    80ec:	|  |  |  |            lsl.l #3,d0
    80ee:	|  |  |  |            sub.l d1,d0
    80f0:	|  |  |  |            add.l d0,d0
    80f2:	|  |  |  |            add.l d0,d0
    80f4:	|  |  |  |            adda.l d0,a0
    80f6:	|  |  |  |            move.l 4(a0),d0
    80fa:	|  |  |  |            move.l d0,d0
    80fc:	|  |  |  |            move.w d2,d1
    80fe:	|  |  |  |            muls.w d0,d1
    8100:	|  |  |  |            move.w d1,98(sp)
				break;
    8104:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8106:	|  |  |  \----------> moveq #0,d0
    8108:	|  |  |               move.w 98(sp),d0
    810c:	|  |  |               add.l d0,d0
    810e:	|  |  |               move.l d0,54(sp)
    8112:	|  |  |               moveq #2,d0
    8114:	|  |  |               move.l d0,50(sp)
    8118:	|  |  |               move.l 1b848 <SysBase>,d0
    811e:	|  |  |               movea.l d0,a6
    8120:	|  |  |               move.l 54(sp),d0
    8124:	|  |  |               move.l 50(sp),d1
    8128:	|  |  |               jsr -684(a6)
    812c:	|  |  |               move.l d0,46(sp)
    8130:	|  |  |               movea.l 46(sp),a1
    8134:	|  |  |               movea.l 112(sp),a0
    8138:	|  |  |               movea.l 8(a0),a0
    813c:	|  |  |               move.l 100(sp),d1
    8140:	|  |  |               move.l d1,d0
    8142:	|  |  |               lsl.l #3,d0
    8144:	|  |  |               sub.l d1,d0
    8146:	|  |  |               add.l d0,d0
    8148:	|  |  |               add.l d0,d0
    814a:	|  |  |               adda.l d0,a0
    814c:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8150:	|  |  |               move.l 1b830 <bigDataFile>,42(sp)
    8158:	|  |  |               movea.l 112(sp),a0
    815c:	|  |  |               movea.l 8(a0),a0
    8160:	|  |  |               move.l 100(sp),d1
    8164:	|  |  |               move.l d1,d0
    8166:	|  |  |               lsl.l #3,d0
    8168:	|  |  |               sub.l d1,d0
    816a:	|  |  |               add.l d0,d0
    816c:	|  |  |               add.l d0,d0
    816e:	|  |  |               adda.l d0,a0
    8170:	|  |  |               move.l 24(a0),38(sp)
    8176:	|  |  |               moveq #2,d1
    8178:	|  |  |               move.l d1,34(sp)
    817c:	|  |  |               move.w 98(sp),d0
    8180:	|  |  |               lsr.w #1,d0
    8182:	|  |  |               move.w d0,d0
    8184:	|  |  |               andi.l #65535,d0
    818a:	|  |  |               move.l d0,30(sp)
    818e:	|  |  |               move.l 1b850 <DOSBase>,d0
    8194:	|  |  |               movea.l d0,a6
    8196:	|  |  |               move.l 42(sp),d1
    819a:	|  |  |               move.l 38(sp),d2
    819e:	|  |  |               move.l 34(sp),d3
    81a2:	|  |  |               move.l 30(sp),d4
    81a6:	|  |  |               jsr -324(a6)
    81aa:	|  |  |               move.l d0,26(sp)
    81ae:	|  |  |               move.l 26(sp),d0
    81b2:	|  |  |               move.w d0,24(sp)
		if (!count) {
    81b6:	|  |  |           /-- bne.s 81ca <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    81b8:	|  |  |           |   pea 17f80 <PutChar+0x13bc>
    81be:	|  |  |           |   jsr 16274 <KPrintF>
    81c4:	|  |  |           |   addq.l #4,sp
			return FALSE;
    81c6:	|  |  |           |   clr.w d0
    81c8:	+--|--|-----------|-- bra.s 81e2 <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    81ca:	|  |  |           \-> addq.l #1,100(sp)
    81ce:	|  |  \-------------> move.l 100(sp),d0
    81d2:	|  |                  cmp.l 74(sp),d0
    81d6:	|  \----------------- blt.w 7f08 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    81da:	|                     jsr 5cc2 <finishAccess>

	return TRUE;
    81e0:	|                     moveq #1,d0
}
    81e2:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    81e6:	                      lea 84(sp),sp
    81ea:	                      rts

000081ec <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    81ec:	                   lea -16(sp),sp
    81f0:	                   move.l 28(sp),d0
    81f4:	                   move.w d0,d0
    81f6:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    81fa:	                   movea.l 24(sp),a0
    81fe:	                   move.l (a0),d0
    8200:	                   move.l d0,-(sp)
    8202:	                   jsr 1688c <__fixunssfsi>
    8208:	                   addq.l #4,sp
    820a:	                   move.l d0,d0
    820c:	                   movea.l 20(sp),a0
    8210:	                   move.l 8(a0),d1
    8214:	                   move.l d1,d1
    8216:	                   movea.w d0,a0
    8218:	                   suba.w d1,a0
    821a:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    821e:	                   movea.l 24(sp),a0
    8222:	                   move.l 4(a0),d0
    8226:	                   move.l d0,-(sp)
    8228:	                   jsr 1688c <__fixunssfsi>
    822e:	                   addq.l #4,sp
    8230:	                   move.l d0,d0
    8232:	                   movea.l 20(sp),a0
    8236:	                   move.l 12(a0),d1
    823a:	                   move.l d1,d1
    823c:	                   movea.w d0,a0
    823e:	                   suba.w d1,a0
    8240:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8244:	                   move.w 4(sp),d0
    8248:	                   movea.w d0,a1
    824a:	                   move.w 6(sp),d0
    824e:	                   movea.w d0,a0
    8250:	                   pea 1 <_start+0x1>
    8254:	                   move.l a1,-(sp)
    8256:	                   move.l a0,-(sp)
    8258:	                   move.l 36(sp),-(sp)
    825c:	                   move.l 36(sp),-(sp)
    8260:	                   jsr 1df2 <CstScaleSprite>
    8266:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    826a:	                   movea.l 24(sp),a0
    826e:	                   move.l 118(a0),d0
    8272:	                   moveq #8,d1
    8274:	                   and.l d1,d0
    8276:	   /-------------- beq.w 8338 <scaleSprite+0x14c>
		if (single->xhot < 0)
    827a:	   |               movea.l 20(sp),a0
    827e:	   |               move.l 8(a0),d0
    8282:	   |  /----------- bpl.s 82ba <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8284:	   |  |            tst.w 2(sp)
    8288:	   |  |     /----- beq.s 82a0 <scaleSprite+0xb4>
    828a:	   |  |     |      movea.l 20(sp),a0
    828e:	   |  |     |      move.l (a0),d0
    8290:	   |  |     |      move.l d0,d1
    8292:	   |  |     |      movea.l 20(sp),a0
    8296:	   |  |     |      move.l 8(a0),d0
    829a:	   |  |     |      move.l d0,d0
    829c:	   |  |     |      sub.w d0,d1
    829e:	   |  |     |  /-- bra.s 82ae <scaleSprite+0xc2>
    82a0:	   |  |     \--|-> movea.l 20(sp),a0
    82a4:	   |  |        |   move.l 8(a0),d0
    82a8:	   |  |        |   move.l d0,d0
    82aa:	   |  |        |   move.w d0,d1
    82ac:	   |  |        |   addq.w #1,d1
    82ae:	   |  |        \-> movea.w 6(sp),a0
    82b2:	   |  |            suba.w d1,a0
    82b4:	   |  |            move.w a0,14(sp)
    82b8:	   |  |  /-------- bra.s 82ee <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    82ba:	   |  \--|-------> tst.w 2(sp)
    82be:	   |     |  /----- beq.s 82da <scaleSprite+0xee>
    82c0:	   |     |  |      movea.l 20(sp),a0
    82c4:	   |     |  |      move.l (a0),d0
    82c6:	   |     |  |      move.l d0,d1
    82c8:	   |     |  |      movea.l 20(sp),a0
    82cc:	   |     |  |      move.l 8(a0),d0
    82d0:	   |     |  |      move.l d0,d0
    82d2:	   |     |  |      sub.w d0,d1
    82d4:	   |     |  |      move.w d1,d0
    82d6:	   |     |  |      subq.w #1,d0
    82d8:	   |     |  |  /-- bra.s 82e4 <scaleSprite+0xf8>
    82da:	   |     |  \--|-> movea.l 20(sp),a0
    82de:	   |     |     |   move.l 8(a0),d0
    82e2:	   |     |     |   move.l d0,d0
    82e4:	   |     |     \-> move.w 6(sp),d1
    82e8:	   |     |         sub.w d0,d1
    82ea:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    82ee:	   |     \-------> movea.l 24(sp),a0
    82f2:	   |               move.l 24(a0),d0
    82f6:	   |               move.l d0,d1
    82f8:	   |               movea.l 20(sp),a0
    82fc:	   |               move.l 12(a0),d0
    8300:	   |               move.l d0,d0
    8302:	   |               sub.w d0,d1
    8304:	   |               movea.w 4(sp),a0
    8308:	   |               adda.w d1,a0
    830a:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    830e:	   |               movea.l 20(sp),a0
    8312:	   |               move.l (a0),d0
    8314:	   |               move.l d0,d0
    8316:	   |               move.w 14(sp),d1
    831a:	   |               add.w d0,d1
    831c:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8320:	   |               movea.l 20(sp),a0
    8324:	   |               move.l 4(a0),d0
    8328:	   |               move.l d0,d0
    832a:	   |               movea.w 12(sp),a0
    832e:	   |               adda.w d0,a0
    8330:	   |               move.w a0,8(sp)
    8334:	/--|-------------- bra.w 840a <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8338:	|  \-------------> move.l 1b95a <cameraX>,d0
    833e:	|                  move.l d0,d0
    8340:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8344:	|                  move.l 1b95e <cameraY>,d0
    834a:	|                  move.l d0,d0
    834c:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8350:	|                  movea.l 20(sp),a0
    8354:	|                  move.l 8(a0),d0
    8358:	|     /----------- bpl.s 8390 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    835a:	|     |            tst.w 2(sp)
    835e:	|     |     /----- beq.s 8376 <scaleSprite+0x18a>
    8360:	|     |     |      movea.l 20(sp),a0
    8364:	|     |     |      move.l (a0),d0
    8366:	|     |     |      move.l d0,d1
    8368:	|     |     |      movea.l 20(sp),a0
    836c:	|     |     |      move.l 8(a0),d0
    8370:	|     |     |      move.l d0,d0
    8372:	|     |     |      sub.w d0,d1
    8374:	|     |     |  /-- bra.s 8384 <scaleSprite+0x198>
    8376:	|     |     \--|-> movea.l 20(sp),a0
    837a:	|     |        |   move.l 8(a0),d0
    837e:	|     |        |   move.l d0,d0
    8380:	|     |        |   move.w d0,d1
    8382:	|     |        |   addq.w #1,d1
    8384:	|     |        \-> move.w 6(sp),d0
    8388:	|     |            sub.w d1,d0
    838a:	|     |            move.w d0,14(sp)
    838e:	|     |  /-------- bra.s 83c4 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8390:	|     \--|-------> tst.w 2(sp)
    8394:	|        |  /----- beq.s 83b0 <scaleSprite+0x1c4>
    8396:	|        |  |      movea.l 20(sp),a0
    839a:	|        |  |      move.l (a0),d0
    839c:	|        |  |      move.l d0,d1
    839e:	|        |  |      movea.l 20(sp),a0
    83a2:	|        |  |      move.l 8(a0),d0
    83a6:	|        |  |      move.l d0,d0
    83a8:	|        |  |      sub.w d0,d1
    83aa:	|        |  |      move.w d1,d0
    83ac:	|        |  |      subq.w #1,d0
    83ae:	|        |  |  /-- bra.s 83ba <scaleSprite+0x1ce>
    83b0:	|        |  \--|-> movea.l 20(sp),a0
    83b4:	|        |     |   move.l 8(a0),d0
    83b8:	|        |     |   move.l d0,d0
    83ba:	|        |     \-> move.w 6(sp),d1
    83be:	|        |         sub.w d0,d1
    83c0:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    83c4:	|        \-------> movea.l 24(sp),a0
    83c8:	|                  move.l 24(a0),d0
    83cc:	|                  move.l d0,d1
    83ce:	|                  movea.l 20(sp),a0
    83d2:	|                  move.l 12(a0),d0
    83d6:	|                  move.l d0,d0
    83d8:	|                  sub.w d0,d1
    83da:	|                  movea.w 4(sp),a0
    83de:	|                  adda.w d1,a0
    83e0:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    83e4:	|                  movea.l 20(sp),a0
    83e8:	|                  move.l (a0),d0
    83ea:	|                  move.l d0,d0
    83ec:	|                  move.w 14(sp),d1
    83f0:	|                  add.w d0,d1
    83f2:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    83f6:	|                  movea.l 20(sp),a0
    83fa:	|                  move.l 4(a0),d0
    83fe:	|                  move.l d0,d0
    8400:	|                  movea.w 12(sp),a0
    8404:	|                  adda.w d0,a0
    8406:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    840a:	\----------------> move.l 1b804 <input+0xa>,d1
    8410:	                   moveq #0,d0
    8412:	                   move.w 14(sp),d0
    8416:	                   cmp.l d1,d0
    8418:	            /----- bgt.s 844e <scaleSprite+0x262>
    841a:	            |      move.l 1b804 <input+0xa>,d1
    8420:	            |      moveq #0,d0
    8422:	            |      move.w 10(sp),d0
    8426:	            |      cmp.l d1,d0
    8428:	            +----- blt.s 844e <scaleSprite+0x262>
    842a:	            |      move.l 1b808 <input+0xe>,d1
    8430:	            |      moveq #0,d0
    8432:	            |      move.w 12(sp),d0
    8436:	            |      cmp.l d1,d0
    8438:	            +----- bgt.s 844e <scaleSprite+0x262>
    843a:	            |      move.l 1b808 <input+0xe>,d1
    8440:	            |      moveq #0,d0
    8442:	            |      move.w 8(sp),d0
    8446:	            |      cmp.l d1,d0
    8448:	            +----- blt.s 844e <scaleSprite+0x262>
		return TRUE;
    844a:	            |      moveq #1,d0
    844c:	            |  /-- bra.s 8450 <scaleSprite+0x264>
	}
	return FALSE;
    844e:	            \--|-> clr.w d0
    8450:	               \-> lea 16(sp),sp
    8454:	                   rts

00008456 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8456:	    move.l 4(sp),d0
    845a:	/-- bpl.s 845e <TF_abs+0x8>
    845c:	|   neg.l d0
}
    845e:	\-> rts

00008460 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8460:	             lea -28(sp),sp
    8464:	             move.l a6,-(sp)
    8466:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8468:	             move.l #132,28(sp)
    8470:	             clr.l 24(sp)
    8474:	             move.l 1b848 <SysBase>,d0
    847a:	             movea.l d0,a6
    847c:	             move.l 28(sp),d0
    8480:	             move.l 24(sp),d1
    8484:	             jsr -684(a6)
    8488:	             move.l d0,20(sp)
    848c:	             move.l 20(sp),d0
    8490:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8494:	         /-- bne.s 849c <addPerson+0x3c>
    8496:	         |   clr.w d0
    8498:	/--------|-- bra.w 86cc <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    849c:	|        \-> move.l 48(sp),-(sp)
    84a0:	|            jsr c830 <loadObjectType>
    84a6:	|            addq.l #4,sp
    84a8:	|            movea.l 16(sp),a0
    84ac:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    84b0:	|            movea.l 16(sp),a0
    84b4:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    84bc:	|            movea.l 16(sp),a0
    84c0:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    84c4:	|            movea.l 16(sp),a0
    84c8:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    84cc:	|            move.l 44(sp),-(sp)
    84d0:	|            jsr 1652c <__floatsisf>
    84d6:	|            addq.l #4,sp
    84d8:	|            move.l d0,d2
    84da:	|            move.l 40(sp),-(sp)
    84de:	|            jsr 1652c <__floatsisf>
    84e4:	|            addq.l #4,sp
    84e6:	|            move.l d2,-(sp)
    84e8:	|            move.l d0,-(sp)
    84ea:	|            move.l 24(sp),-(sp)
    84ee:	|            jsr 9fae <moveAndScale>
    84f4:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    84f8:	|            movea.l 16(sp),a0
    84fc:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8500:	|            movea.l 16(sp),a0
    8504:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    850a:	|            movea.l 16(sp),a0
    850e:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8514:	|            movea.l 16(sp),a0
    8518:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    851c:	|            movea.l 16(sp),a0
    8520:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8524:	|            movea.l 16(sp),a0
    8528:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    852e:	|            movea.l 16(sp),a0
    8532:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8536:	|            movea.l 16(sp),a0
    853a:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    8542:	|            movea.l 16(sp),a0
    8546:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    854e:	|            movea.l 16(sp),a0
    8552:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8556:	|            movea.l 16(sp),a0
    855a:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    855e:	|            movea.l 16(sp),a0
    8562:	|            movea.l 114(a0),a0
    8566:	|            move.l 24(a0),d0
    856a:	|            movea.l 16(sp),a0
    856e:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    8572:	|            movea.l 16(sp),a0
    8576:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    857a:	|            movea.l 16(sp),a0
    857e:	|            movea.l 114(a0),a0
    8582:	|            move.l 32(a0),d0
    8586:	|            movea.l 16(sp),a0
    858a:	|            move.l d0,122(a0)
    newPerson->r = 0;
    858e:	|            movea.l 16(sp),a0
    8592:	|            clr.b 126(a0)
    newPerson->g = 0;
    8596:	|            movea.l 16(sp),a0
    859a:	|            clr.b 127(a0)
    newPerson->b = 0;
    859e:	|            movea.l 16(sp),a0
    85a2:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    85a6:	|            movea.l 16(sp),a0
    85aa:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    85ae:	|            movea.l 16(sp),a0
    85b2:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    85b6:	|            movea.l 16(sp),a0
    85ba:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    85c0:	|            clr.l -(sp)
    85c2:	|            move.l 20(sp),-(sp)
    85c6:	|            jsr 71b0 <setFrames>
    85cc:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    85ce:	|            movea.l 52(sp),a0
    85d2:	|            movea.l (a0),a0
    85d4:	|            movea.l (a0),a0
    85d6:	|            movea.l 4(a0),a0
    85da:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    85de:	|     /----- bpl.s 85e8 <addPerson+0x188>
    85e0:	|     |      move.l 12(sp),d0
    85e4:	|     |      neg.l d0
    85e6:	|     |  /-- bra.s 85ea <addPerson+0x18a>
    85e8:	|     \--|-> moveq #1,d0
    85ea:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    85ee:	|            movea.l 52(sp),a0
    85f2:	|            movea.l (a0),a0
    85f4:	|            movea.l (a0),a0
    85f6:	|            movea.l (a0),a0
    85f8:	|            move.l 8(a0),d0
    85fc:	|            cmp.l 8(sp),d0
    8600:	|     /----- bgt.s 8632 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8602:	|     |      tst.l 12(sp)
    8606:	|     |  /-- bge.s 8614 <addPerson+0x1b4>
            newPerson->height = 5;
    8608:	|     |  |   movea.l 16(sp),a0
    860c:	|     |  |   moveq #5,d0
    860e:	|     |  |   move.l d0,20(a0)
    8612:	|  /--|--|-- bra.s 865e <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8614:	|  |  |  \-> movea.l 52(sp),a0
    8618:	|  |  |      movea.l (a0),a0
    861a:	|  |  |      movea.l (a0),a0
    861c:	|  |  |      movea.l (a0),a0
    861e:	|  |  |      movea.l 16(a0),a0
    8622:	|  |  |      move.l 12(a0),d0
    8626:	|  |  |      addq.l #5,d0
    8628:	|  |  |      movea.l 16(sp),a0
    862c:	|  |  |      move.l d0,20(a0)
    8630:	|  +--|----- bra.s 865e <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8632:	|  |  \----> movea.l 52(sp),a0
    8636:	|  |         movea.l (a0),a0
    8638:	|  |         movea.l (a0),a0
    863a:	|  |         movea.l (a0),a0
    863c:	|  |         movea.l 16(a0),a0
    8640:	|  |         move.l 8(sp),d1
    8644:	|  |         move.l d1,d0
    8646:	|  |         lsl.l #3,d0
    8648:	|  |         sub.l d1,d0
    864a:	|  |         add.l d0,d0
    864c:	|  |         add.l d0,d0
    864e:	|  |         adda.l d0,a0
    8650:	|  |         move.l 12(a0),d0
    8654:	|  |         addq.l #5,d0
    8656:	|  |         movea.l 16(sp),a0
    865a:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    865e:	|  \-------> move.l #112896,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8666:	|        /-- bra.s 8676 <addPerson+0x216>
        changethat = &((*changethat)->next);
    8668:	|     /--|-> movea.l 32(sp),a0
    866c:	|     |  |   move.l (a0),d0
    866e:	|     |  |   moveq #36,d1
    8670:	|     |  |   add.l d0,d1
    8672:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8676:	|     |  \-> movea.l 32(sp),a0
    867a:	|     |      move.l (a0),d0
    867c:	|     |  /-- beq.s 86a4 <addPerson+0x244>
    867e:	|     |  |   movea.l 32(sp),a0
    8682:	|     |  |   movea.l (a0),a0
    8684:	|     |  |   move.l 4(a0),d2
    8688:	|     |  |   move.l 44(sp),-(sp)
    868c:	|     |  |   jsr 1652c <__floatsisf>
    8692:	|     |  |   addq.l #4,sp
    8694:	|     |  |   move.l d0,-(sp)
    8696:	|     |  |   move.l d2,-(sp)
    8698:	|     |  |   jsr 16752 <__ltsf2>
    869e:	|     |  |   addq.l #8,sp
    86a0:	|     |  |   tst.l d0
    86a2:	|     \--|-- blt.s 8668 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    86a4:	|        \-> movea.l 32(sp),a0
    86a8:	|            move.l (a0),d0
    86aa:	|            movea.l 16(sp),a0
    86ae:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    86b2:	|            movea.l 32(sp),a0
    86b6:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    86ba:	|            movea.l 16(sp),a0
    86be:	|            move.l 114(a0),d0
    86c2:	|            sne d0
    86c4:	|            neg.b d0
    86c6:	|            move.b d0,d0
    86c8:	|            andi.w #255,d0
}
    86cc:	\----------> move.l (sp)+,d2
    86ce:	             movea.l (sp)+,a6
    86d0:	             lea 28(sp),sp
    86d4:	             rts

000086d6 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    86d6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    86d8:	       move.l 8(sp),-(sp)
    86dc:	       jsr 9866 <findPerson>
    86e2:	       addq.l #4,sp
    86e4:	       move.l d0,(sp)
    if (moveMe) {
    86e6:	/----- beq.s 871a <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    86e8:	|      movea.l (sp),a0
    86ea:	|      move.l 68(a0),d0
    86ee:	|  /-- beq.s 8700 <animatePerson+0x2a>
    86f0:	|  |   movea.l (sp),a0
    86f2:	|  |   move.l 68(a0),d0
    86f6:	|  |   move.l d0,-(sp)
    86f8:	|  |   jsr 3766 <abortFunction>
    86fe:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    8700:	|  \-> movea.l (sp),a0
    8702:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    8706:	|      movea.l (sp),a0
    8708:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    870c:	|      movea.l (sp),a0
    870e:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    8712:	|      movea.l (sp),a0
    8714:	|      move.l 12(sp),72(a0)
    }
}
    871a:	\----> nop
    871c:	       addq.l #4,sp
    871e:	       rts

00008720 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    8720:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8722:	       move.l 8(sp),-(sp)
    8726:	       jsr 9866 <findPerson>
    872c:	       addq.l #4,sp
    872e:	       move.l d0,(sp)
    if (moveMe) {
    8730:	/----- beq.s 8772 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8732:	|      movea.l (sp),a0
    8734:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8738:	|      movea.l (sp),a0
    873a:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    8740:	|      move.l (sp),-(sp)
    8742:	|      jsr a13c <rethinkAngle>
    8748:	|      addq.l #4,sp
        if (moveMe->walking) {
    874a:	|      movea.l (sp),a0
    874c:	|      move.w 64(a0),d0
    8750:	|  /-- beq.s 8764 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8752:	|  |   pea 1 <_start+0x1>
    8756:	|  |   move.l 4(sp),-(sp)
    875a:	|  |   jsr 71b0 <setFrames>
    8760:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8762:	+--|-- bra.s 8772 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8764:	|  \-> clr.l -(sp)
    8766:	|      move.l 4(sp),-(sp)
    876a:	|      jsr 71b0 <setFrames>
    8770:	|      addq.l #8,sp
}
    8772:	\----> nop
    8774:	       addq.l #4,sp
    8776:	       rts

00008778 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    8778:	             lea -36(sp),sp
    877c:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    877e:	             movea.l 44(sp),a0
    8782:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    8788:	             moveq #12,d0
    878a:	             move.l d0,28(sp)
    878e:	             clr.l 24(sp)
    8792:	             move.l 1b848 <SysBase>,d0
    8798:	             movea.l d0,a6
    879a:	             move.l 28(sp),d0
    879e:	             move.l 24(sp),d1
    87a2:	             jsr -684(a6)
    87a6:	             move.l d0,20(sp)
    87aa:	             move.l 20(sp),d0
    87ae:	             move.l d0,16(sp)
	if (!(newAnim)) {
    87b2:	         /-- bne.s 87c8 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    87b4:	         |   pea 17fb3 <PutChar+0x13ef>
    87ba:	         |   jsr 16274 <KPrintF>
    87c0:	         |   addq.l #4,sp
		return NULL;
    87c2:	         |   moveq #0,d0
    87c4:	/--------|-- bra.w 891a <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    87c8:	|        \-> movea.l 44(sp),a0
    87cc:	|            move.l (a0),d0
    87ce:	|            movea.l 16(sp),a0
    87d2:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    87d4:	|            movea.l 16(sp),a0
    87d8:	|            movea.l (a0),a0
    87da:	|            move.l 4(a0),d0
    87de:	|            addq.l #1,d0
    87e0:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    87e4:	|            movea.l 16(sp),a0
    87e8:	|            move.l 32(sp),8(a0)

	if (num) {
    87ee:	|  /-------- beq.w 890e <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    87f2:	|  |         move.l 32(sp),d1
    87f6:	|  |         move.l d1,d0
    87f8:	|  |         add.l d0,d0
    87fa:	|  |         add.l d1,d0
    87fc:	|  |         add.l d0,d0
    87fe:	|  |         add.l d0,d0
    8800:	|  |         move.l d0,12(sp)
    8804:	|  |         clr.l 8(sp)
    8808:	|  |         move.l 1b848 <SysBase>,d0
    880e:	|  |         movea.l d0,a6
    8810:	|  |         move.l 12(sp),d0
    8814:	|  |         move.l 8(sp),d1
    8818:	|  |         jsr -684(a6)
    881c:	|  |         move.l d0,4(sp)
    8820:	|  |         move.l 4(sp),d0
    8824:	|  |         movea.l 16(sp),a0
    8828:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    882c:	|  |         movea.l 16(sp),a0
    8830:	|  |         move.l 4(a0),d0
    8834:	|  |     /-- bne.s 884a <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    8836:	|  |     |   pea 17fb3 <PutChar+0x13ef>
    883c:	|  |     |   jsr 16274 <KPrintF>
    8842:	|  |     |   addq.l #4,sp
			return NULL;
    8844:	|  |     |   moveq #0,d0
    8846:	+--|-----|-- bra.w 891a <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    884a:	|  |     \-> clr.l 36(sp)
    884e:	|  |     /-- bra.w 8900 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8852:	|  |  /--|-> movea.l 44(sp),a0
    8856:	|  |  |  |   movea.l 4(a0),a0
    885a:	|  |  |  |   move.l 36(sp),d1
    885e:	|  |  |  |   move.l d1,d0
    8860:	|  |  |  |   add.l d0,d0
    8862:	|  |  |  |   add.l d1,d0
    8864:	|  |  |  |   add.l d0,d0
    8866:	|  |  |  |   add.l d0,d0
    8868:	|  |  |  |   lea (0,a0,d0.l),a1
    886c:	|  |  |  |   movea.l 16(sp),a0
    8870:	|  |  |  |   movea.l 4(a0),a0
    8874:	|  |  |  |   move.l 36(sp),d1
    8878:	|  |  |  |   move.l d1,d0
    887a:	|  |  |  |   add.l d0,d0
    887c:	|  |  |  |   add.l d1,d0
    887e:	|  |  |  |   add.l d0,d0
    8880:	|  |  |  |   add.l d0,d0
    8882:	|  |  |  |   adda.l d0,a0
    8884:	|  |  |  |   move.l (a1),d0
    8886:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    8888:	|  |  |  |   movea.l 44(sp),a0
    888c:	|  |  |  |   movea.l 4(a0),a0
    8890:	|  |  |  |   move.l 36(sp),d1
    8894:	|  |  |  |   move.l d1,d0
    8896:	|  |  |  |   add.l d0,d0
    8898:	|  |  |  |   add.l d1,d0
    889a:	|  |  |  |   add.l d0,d0
    889c:	|  |  |  |   add.l d0,d0
    889e:	|  |  |  |   lea (0,a0,d0.l),a1
    88a2:	|  |  |  |   movea.l 16(sp),a0
    88a6:	|  |  |  |   movea.l 4(a0),a0
    88aa:	|  |  |  |   move.l 36(sp),d1
    88ae:	|  |  |  |   move.l d1,d0
    88b0:	|  |  |  |   add.l d0,d0
    88b2:	|  |  |  |   add.l d1,d0
    88b4:	|  |  |  |   add.l d0,d0
    88b6:	|  |  |  |   add.l d0,d0
    88b8:	|  |  |  |   adda.l d0,a0
    88ba:	|  |  |  |   move.l 4(a1),d0
    88be:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    88c2:	|  |  |  |   movea.l 44(sp),a0
    88c6:	|  |  |  |   movea.l 4(a0),a0
    88ca:	|  |  |  |   move.l 36(sp),d1
    88ce:	|  |  |  |   move.l d1,d0
    88d0:	|  |  |  |   add.l d0,d0
    88d2:	|  |  |  |   add.l d1,d0
    88d4:	|  |  |  |   add.l d0,d0
    88d6:	|  |  |  |   add.l d0,d0
    88d8:	|  |  |  |   lea (0,a0,d0.l),a1
    88dc:	|  |  |  |   movea.l 16(sp),a0
    88e0:	|  |  |  |   movea.l 4(a0),a0
    88e4:	|  |  |  |   move.l 36(sp),d1
    88e8:	|  |  |  |   move.l d1,d0
    88ea:	|  |  |  |   add.l d0,d0
    88ec:	|  |  |  |   add.l d1,d0
    88ee:	|  |  |  |   add.l d0,d0
    88f0:	|  |  |  |   add.l d0,d0
    88f2:	|  |  |  |   adda.l d0,a0
    88f4:	|  |  |  |   move.l 8(a1),d0
    88f8:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    88fc:	|  |  |  |   addq.l #1,36(sp)
    8900:	|  |  |  \-> move.l 36(sp),d0
    8904:	|  |  |      cmp.l 32(sp),d0
    8908:	|  |  \----- blt.w 8852 <copyAnim+0xda>
    890c:	|  |     /-- bra.s 8916 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    890e:	|  \-----|-> movea.l 16(sp),a0
    8912:	|        |   clr.l 4(a0)
	}

	return newAnim;
    8916:	|        \-> move.l 16(sp),d0
}
    891a:	\----------> movea.l (sp)+,a6
    891c:	             lea 36(sp),sp
    8920:	             rts

00008922 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    8922:	                lea -44(sp),sp
    8926:	                move.l a6,-(sp)
    8928:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    892a:	                moveq #12,d0
    892c:	                move.l d0,40(sp)
    8930:	                clr.l 36(sp)
    8934:	                move.l 1b848 <SysBase>,d0
    893a:	                movea.l d0,a6
    893c:	                move.l 40(sp),d0
    8940:	                move.l 36(sp),d1
    8944:	                jsr -684(a6)
    8948:	                move.l d0,32(sp)
    894c:	                move.l 32(sp),d0
    8950:	                move.l d0,28(sp)
	if( !newP) {
    8954:	            /-- bne.s 896a <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8956:	            |   pea 17fd4 <PutChar+0x1410>
    895c:	            |   jsr 16274 <KPrintF>
    8962:	            |   addq.l #4,sp
		return NULL;
    8964:	            |   moveq #0,d0
    8966:	/-----------|-- bra.w 8b3a <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    896a:	|           \-> movea.l 28(sp),a0
    896e:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    8974:	|               move.l 56(sp),d1
    8978:	|               move.l d1,d0
    897a:	|               add.l d0,d0
    897c:	|               add.l d1,d0
    897e:	|               add.l d0,d0
    8980:	|               add.l d0,d0
    8982:	|               move.l d0,24(sp)
    8986:	|               clr.l 20(sp)
    898a:	|               move.l 1b848 <SysBase>,d0
    8990:	|               movea.l d0,a6
    8992:	|               move.l 24(sp),d0
    8996:	|               move.l 20(sp),d1
    899a:	|               jsr -684(a6)
    899e:	|               move.l d0,16(sp)
    89a2:	|               move.l 16(sp),d0
    89a6:	|               movea.l 28(sp),a0
    89aa:	|               move.l d0,4(a0)
	if( !newP->frames) {
    89ae:	|               movea.l 28(sp),a0
    89b2:	|               move.l 4(a0),d0
    89b6:	|           /-- bne.s 89cc <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    89b8:	|           |   pea 17fd4 <PutChar+0x1410>
    89be:	|           |   jsr 16274 <KPrintF>
    89c4:	|           |   addq.l #4,sp
		return NULL;
    89c6:	|           |   moveq #0,d0
    89c8:	+-----------|-- bra.w 8b3a <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    89cc:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    89d2:	|               movea.l 60(sp),a0
    89d6:	|               move.l (a0),44(sp)
	while (a) {
    89da:	|     /-------- bra.w 8b2e <createPersonaAnim+0x20c>
		a --;
    89de:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    89e2:	|  |  |         movea.l 28(sp),a0
    89e6:	|  |  |         movea.l 4(a0),a0
    89ea:	|  |  |         move.l 48(sp),d1
    89ee:	|  |  |         move.l d1,d0
    89f0:	|  |  |         add.l d0,d0
    89f2:	|  |  |         add.l d1,d0
    89f4:	|  |  |         add.l d0,d0
    89f6:	|  |  |         add.l d0,d0
    89f8:	|  |  |         adda.l d0,a0
    89fa:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    89fe:	|  |  |         movea.l 44(sp),a0
    8a02:	|  |  |         move.l (a0),d0
    8a04:	|  |  |         moveq #5,d1
    8a06:	|  |  |         cmp.l d0,d1
    8a08:	|  |  |     /-- bne.s 8a34 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    8a0a:	|  |  |     |   movea.l 28(sp),a0
    8a0e:	|  |  |     |   movea.l 4(a0),a0
    8a12:	|  |  |     |   move.l 48(sp),d1
    8a16:	|  |  |     |   move.l d1,d0
    8a18:	|  |  |     |   add.l d0,d0
    8a1a:	|  |  |     |   add.l d1,d0
    8a1c:	|  |  |     |   add.l d0,d0
    8a1e:	|  |  |     |   add.l d0,d0
    8a20:	|  |  |     |   lea (0,a0,d0.l),a1
    8a24:	|  |  |     |   movea.l 44(sp),a0
    8a28:	|  |  |     |   move.l 4(a0),d0
    8a2c:	|  |  |     |   move.l d0,8(a1)
    8a30:	|  |  |  /--|-- bra.w 8adc <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    8a34:	|  |  |  |  \-> movea.l 44(sp),a0
    8a38:	|  |  |  |      move.l (a0),d0
    8a3a:	|  |  |  |      moveq #2,d1
    8a3c:	|  |  |  |      cmp.l d0,d1
    8a3e:	|  |  |  |  /-- bne.s 8a6a <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    8a40:	|  |  |  |  |   movea.l 44(sp),a0
    8a44:	|  |  |  |  |   move.l 4(a0),d2
    8a48:	|  |  |  |  |   movea.l 28(sp),a0
    8a4c:	|  |  |  |  |   movea.l 4(a0),a0
    8a50:	|  |  |  |  |   move.l 48(sp),d1
    8a54:	|  |  |  |  |   move.l d1,d0
    8a56:	|  |  |  |  |   add.l d0,d0
    8a58:	|  |  |  |  |   add.l d1,d0
    8a5a:	|  |  |  |  |   add.l d0,d0
    8a5c:	|  |  |  |  |   add.l d0,d0
    8a5e:	|  |  |  |  |   adda.l d0,a0
    8a60:	|  |  |  |  |   move.l d2,d0
    8a62:	|  |  |  |  |   neg.l d0
    8a64:	|  |  |  |  |   move.l d0,8(a0)
    8a68:	|  |  |  +--|-- bra.s 8adc <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    8a6a:	|  |  |  |  \-> movea.l 44(sp),a0
    8a6e:	|  |  |  |      move.l (a0),d0
    8a70:	|  |  |  |      moveq #6,d1
    8a72:	|  |  |  |      cmp.l d0,d1
    8a74:	|  |  |  |  /-- bne.s 8abc <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    8a76:	|  |  |  |  |   movea.l 44(sp),a0
    8a7a:	|  |  |  |  |   movea.l 4(a0),a0
    8a7e:	|  |  |  |  |   move.l (a0),d0
    8a80:	|  |  |  |  |   move.l d0,-(sp)
    8a82:	|  |  |  |  |   pea 1 <_start+0x1>
    8a86:	|  |  |  |  |   lea 20(sp),a0
    8a8a:	|  |  |  |  |   move.l a0,-(sp)
    8a8c:	|  |  |  |  |   jsr 13954 <getValueType>
    8a92:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    8a96:	|  |  |  |  |   movea.l 44(sp),a0
    8a9a:	|  |  |  |  |   movea.l 4(a0),a0
    8a9e:	|  |  |  |  |   movea.l (a0),a0
    8aa0:	|  |  |  |  |   move.l 8(a0),d0
    8aa4:	|  |  |  |  |   move.l d0,-(sp)
    8aa6:	|  |  |  |  |   pea 1 <_start+0x1>
    8aaa:	|  |  |  |  |   lea 16(sp),a0
    8aae:	|  |  |  |  |   move.l a0,-(sp)
    8ab0:	|  |  |  |  |   jsr 13954 <getValueType>
    8ab6:	|  |  |  |  |   lea 12(sp),sp
    8aba:	|  |  |  +--|-- bra.s 8adc <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    8abc:	|  |  |  |  \-> move.l 44(sp),d0
    8ac0:	|  |  |  |      move.l d0,-(sp)
    8ac2:	|  |  |  |      pea 1 <_start+0x1>
    8ac6:	|  |  |  |      lea 20(sp),a0
    8aca:	|  |  |  |      move.l a0,-(sp)
    8acc:	|  |  |  |      jsr 13954 <getValueType>
    8ad2:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    8ad6:	|  |  |  |      moveq #1,d0
    8ad8:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    8adc:	|  |  |  \----> move.l 60(sp),-(sp)
    8ae0:	|  |  |         jsr 142d8 <trimStack>
    8ae6:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    8ae8:	|  |  |         movea.l 28(sp),a0
    8aec:	|  |  |         movea.l 4(a0),a0
    8af0:	|  |  |         move.l 48(sp),d1
    8af4:	|  |  |         move.l d1,d0
    8af6:	|  |  |         add.l d0,d0
    8af8:	|  |  |         add.l d1,d0
    8afa:	|  |  |         add.l d0,d0
    8afc:	|  |  |         add.l d0,d0
    8afe:	|  |  |         adda.l d0,a0
    8b00:	|  |  |         move.l 12(sp),d0
    8b04:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    8b06:	|  |  |         movea.l 28(sp),a0
    8b0a:	|  |  |         movea.l 4(a0),a0
    8b0e:	|  |  |         move.l 48(sp),d1
    8b12:	|  |  |         move.l d1,d0
    8b14:	|  |  |         add.l d0,d0
    8b16:	|  |  |         add.l d1,d0
    8b18:	|  |  |         add.l d0,d0
    8b1a:	|  |  |         add.l d0,d0
    8b1c:	|  |  |         adda.l d0,a0
    8b1e:	|  |  |         move.l 8(sp),d0
    8b22:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    8b26:	|  |  |         movea.l 60(sp),a0
    8b2a:	|  |  |         move.l (a0),44(sp)
	while (a) {
    8b2e:	|  |  \-------> tst.l 48(sp)
    8b32:	|  \----------- bne.w 89de <createPersonaAnim+0xbc>
	}

	return newP;
    8b36:	|               move.l 28(sp),d0
}
    8b3a:	\-------------> move.l (sp)+,d2
    8b3c:	                movea.l (sp)+,a6
    8b3e:	                lea 44(sp),sp
    8b42:	                rts

00008b44 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    8b44:	       lea -12(sp),sp
    8b48:	       move.l a6,-(sp)

	if(orig->theSprites)
    8b4a:	       movea.l 20(sp),a0
    8b4e:	       move.l (a0),d0
    8b50:	   /-- beq.s 8b7a <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    8b52:	   |   movea.l 20(sp),a0
    8b56:	   |   movea.l (a0),a0
    8b58:	   |   move.l 4(a0),d0
    8b5c:	   |   subq.l #1,d0
    8b5e:	   |   move.l d0,4(a0)
    8b62:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    8b68:	   +-- bne.s 8b7a <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    8b6a:	   |   movea.l 20(sp),a0
    8b6e:	   |   move.l (a0),d0
    8b70:	   |   move.l d0,-(sp)
    8b72:	   |   jsr 7cb6 <forgetSpriteBank>
    8b78:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    8b7a:	   \-> tst.l 20(sp)
    8b7e:	/----- beq.s 8bbe <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    8b80:	|      movea.l 20(sp),a0
    8b84:	|      move.l 8(a0),d0
    8b88:	|  /-- beq.s 8ba4 <deleteAnim+0x60>
			FreeVec( orig->frames);
    8b8a:	|  |   movea.l 20(sp),a0
    8b8e:	|  |   move.l 4(a0),8(sp)
    8b94:	|  |   move.l 1b848 <SysBase>,d0
    8b9a:	|  |   movea.l d0,a6
    8b9c:	|  |   movea.l 8(sp),a1
    8ba0:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    8ba4:	|  \-> move.l 20(sp),4(sp)
    8baa:	|      move.l 1b848 <SysBase>,d0
    8bb0:	|      movea.l d0,a6
    8bb2:	|      movea.l 4(sp),a1
    8bb6:	|      jsr -690(a6)
		orig = NULL;
    8bba:	|      clr.l 20(sp)
	}	
	
}
    8bbe:	\----> nop
    8bc0:	       movea.l (sp)+,a6
    8bc2:	       lea 12(sp),sp
    8bc6:	       rts

00008bc8 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    8bc8:	          lea -124(sp),sp
    8bcc:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    8bd0:	          movea.l 152(sp),a0
    8bd4:	          move.l 56(a0),d1
    8bd8:	          movea.l 152(sp),a0
    8bdc:	          move.l 60(a0),d0
    8be0:	          cmp.l d1,d0
    8be2:	      /-- bne.s 8c12 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    8be4:	      |   movea.l 152(sp),a0
    8be8:	      |   moveq #-1,d0
    8bea:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    8bee:	      |   movea.l 152(sp),a0
    8bf2:	      |   move.l 40(a0),d0
    8bf6:	      |   movea.l 152(sp),a0
    8bfa:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    8bfe:	      |   movea.l 152(sp),a0
    8c02:	      |   move.l 44(a0),d0
    8c06:	      |   movea.l 152(sp),a0
    8c0a:	      |   move.l d0,52(a0)
    8c0e:	   /--|-- bra.w 9178 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    8c12:	   |  \-> movea.l 1b9bc <currentFloor>,a0
    8c18:	   |      move.l 16(a0),d1
    8c1c:	   |      movea.l 152(sp),a0
    8c20:	   |      move.l 56(a0),d0
    8c24:	   |      add.l d0,d0
    8c26:	   |      add.l d0,d0
    8c28:	   |      movea.l d1,a0
    8c2a:	   |      adda.l d0,a0
    8c2c:	   |      move.l (a0),d1
    8c2e:	   |      movea.l 152(sp),a0
    8c32:	   |      move.l 60(a0),d0
    8c36:	   |      add.l d0,d0
    8c38:	   |      add.l d0,d0
    8c3a:	   |      movea.l d1,a0
    8c3c:	   |      adda.l d0,a0
    8c3e:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    8c42:	   |      moveq #-1,d0
    8c44:	   |      cmp.l 144(sp),d0
    8c48:	   |  /-- bne.s 8c50 <doBorderStuff+0x88>
    8c4a:	   |  |   clr.w d0
    8c4c:	/--|--|-- bra.w 9278 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    8c50:	|  |  \-> movea.l 1b9bc <currentFloor>,a0
    8c56:	|  |      move.l 12(a0),d1
    8c5a:	|  |      move.l 144(sp),d0
    8c5e:	|  |      lsl.l #3,d0
    8c60:	|  |      add.l d0,d1
    8c62:	|  |      movea.l 1b9bc <currentFloor>,a0
    8c68:	|  |      movea.l 12(a0),a1
    8c6c:	|  |      movea.l 152(sp),a0
    8c70:	|  |      move.l 56(a0),d0
    8c74:	|  |      lsl.l #3,d0
    8c76:	|  |      add.l a1,d0
    8c78:	|  |      lea 40(sp),a0
    8c7c:	|  |      move.l a0,-(sp)
    8c7e:	|  |      lea 48(sp),a0
    8c82:	|  |      move.l a0,-(sp)
    8c84:	|  |      move.l d1,-(sp)
    8c86:	|  |      move.l d0,-(sp)
    8c88:	|  |      jsr 154f6 <getMatchingCorners>
    8c8e:	|  |      lea 16(sp),sp
    8c92:	|  |      tst.w d0
    8c94:	|  |  /-- bne.s 8caa <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    8c96:	|  |  |   pea 17ffe <PutChar+0x143a>
    8c9c:	|  |  |   jsr 16274 <KPrintF>
    8ca2:	|  |  |   addq.l #4,sp
            return FALSE;
    8ca4:	|  |  |   clr.w d0
    8ca6:	+--|--|-- bra.w 9278 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    8caa:	|  |  \-> movea.l 152(sp),a0
    8cae:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8cb4:	|  |      movea.l 152(sp),a0
    8cb8:	|  |      move.l (a0),d0
    8cba:	|  |      move.l d0,-(sp)
    8cbc:	|  |      jsr 164c4 <__fixsfsi>
    8cc2:	|  |      addq.l #4,sp
    8cc4:	|  |      move.l d0,140(sp)
    8cc8:	|  |      movea.l 152(sp),a0
    8ccc:	|  |      move.l 4(a0),d0
    8cd0:	|  |      move.l d0,-(sp)
    8cd2:	|  |      jsr 164c4 <__fixsfsi>
    8cd8:	|  |      addq.l #4,sp
    8cda:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8cde:	|  |      movea.l 152(sp),a0
    8ce2:	|  |      move.l 40(a0),132(sp)
    8ce8:	|  |      movea.l 152(sp),a0
    8cec:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8cf2:	|  |      movea.l 1b9bc <currentFloor>,a0
    8cf8:	|  |      move.l 4(a0),d1
    8cfc:	|  |      move.l 44(sp),d0
    8d00:	|  |      lsl.l #3,d0
    8d02:	|  |      movea.l d1,a0
    8d04:	|  |      adda.l d0,a0
    8d06:	|  |      move.l (a0),124(sp)
    8d0a:	|  |      movea.l 1b9bc <currentFloor>,a0
    8d10:	|  |      move.l 4(a0),d1
    8d14:	|  |      move.l 44(sp),d0
    8d18:	|  |      lsl.l #3,d0
    8d1a:	|  |      movea.l d1,a0
    8d1c:	|  |      adda.l d0,a0
    8d1e:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8d24:	|  |      movea.l 1b9bc <currentFloor>,a0
    8d2a:	|  |      move.l 4(a0),d1
    8d2e:	|  |      move.l 40(sp),d0
    8d32:	|  |      lsl.l #3,d0
    8d34:	|  |      movea.l d1,a0
    8d36:	|  |      adda.l d0,a0
    8d38:	|  |      move.l (a0),116(sp)
    8d3c:	|  |      movea.l 1b9bc <currentFloor>,a0
    8d42:	|  |      move.l 4(a0),d1
    8d46:	|  |      move.l 40(sp),d0
    8d4a:	|  |      lsl.l #3,d0
    8d4c:	|  |      movea.l d1,a0
    8d4e:	|  |      adda.l d0,a0
    8d50:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8d56:	|  |      move.l 140(sp),d0
    8d5a:	|  |      sub.l 132(sp),d0
    8d5e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8d62:	|  |      move.l 136(sp),d0
    8d66:	|  |      sub.l 128(sp),d0
    8d6a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8d6e:	|  |      move.l 116(sp),d0
    8d72:	|  |      sub.l 124(sp),d0
    8d76:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8d7a:	|  |      move.l 112(sp),d0
    8d7e:	|  |      sub.l 120(sp),d0
    8d82:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8d86:	|  |      move.l 124(sp),d0
    8d8a:	|  |      sub.l 140(sp),d0
    8d8e:	|  |      move.l 104(sp),-(sp)
    8d92:	|  |      move.l d0,-(sp)
    8d94:	|  |      jsr 16aae <__mulsi3>
    8d9a:	|  |      addq.l #8,sp
    8d9c:	|  |      move.l d0,d2
    8d9e:	|  |      move.l 120(sp),d0
    8da2:	|  |      sub.l 136(sp),d0
    8da6:	|  |      move.l 108(sp),-(sp)
    8daa:	|  |      move.l d0,-(sp)
    8dac:	|  |      jsr 16aae <__mulsi3>
    8db2:	|  |      addq.l #8,sp
    8db4:	|  |      move.l d2,d1
    8db6:	|  |      sub.l d0,d1
    8db8:	|  |      move.l d1,-(sp)
    8dba:	|  |      jsr 164ec <__floatsidf>
    8dc0:	|  |      addq.l #4,sp
    8dc2:	|  |      move.l d0,32(sp)
    8dc6:	|  |      move.l d1,36(sp)
    8dca:	|  |      move.l 32(sp),88(sp)
    8dd0:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8dd6:	|  |      move.l 96(sp),-(sp)
    8dda:	|  |      move.l 112(sp),-(sp)
    8dde:	|  |      jsr 16aae <__mulsi3>
    8de4:	|  |      addq.l #8,sp
    8de6:	|  |      move.l d0,d2
    8de8:	|  |      move.l 100(sp),-(sp)
    8dec:	|  |      move.l 108(sp),-(sp)
    8df0:	|  |      jsr 16aae <__mulsi3>
    8df6:	|  |      addq.l #8,sp
    8df8:	|  |      move.l d2,d1
    8dfa:	|  |      sub.l d0,d1
    8dfc:	|  |      move.l d1,-(sp)
    8dfe:	|  |      jsr 164ec <__floatsidf>
    8e04:	|  |      addq.l #4,sp
    8e06:	|  |      move.l d1,-(sp)
    8e08:	|  |      move.l d0,-(sp)
    8e0a:	|  |      move.l 100(sp),-(sp)
    8e0e:	|  |      move.l 100(sp),-(sp)
    8e12:	|  |      jsr 16376 <__divdf3>
    8e18:	|  |      lea 16(sp),sp
    8e1c:	|  |      move.l d0,24(sp)
    8e20:	|  |      move.l d1,28(sp)
    8e24:	|  |      move.l 24(sp),88(sp)
    8e2a:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8e30:	|  |      clr.l -(sp)
    8e32:	|  |      clr.l -(sp)
    8e34:	|  |      move.l 100(sp),-(sp)
    8e38:	|  |      move.l 100(sp),-(sp)
    8e3c:	|  |      jsr 1664a <__gtdf2>
    8e42:	|  |      lea 16(sp),sp
    8e46:	|  |      tst.l d0
    8e48:	|  |  /-- ble.w 8f20 <doBorderStuff+0x358>
    8e4c:	|  |  |   clr.l -(sp)
    8e4e:	|  |  |   move.l #1072693248,-(sp)
    8e54:	|  |  |   move.l 100(sp),-(sp)
    8e58:	|  |  |   move.l 100(sp),-(sp)
    8e5c:	|  |  |   jsr 16704 <__ltdf2>
    8e62:	|  |  |   lea 16(sp),sp
    8e66:	|  |  |   tst.l d0
    8e68:	|  |  +-- bge.w 8f20 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8e6c:	|  |  |   move.l 124(sp),-(sp)
    8e70:	|  |  |   jsr 164ec <__floatsidf>
    8e76:	|  |  |   addq.l #4,sp
    8e78:	|  |  |   move.l d0,d2
    8e7a:	|  |  |   move.l d1,d3
    8e7c:	|  |  |   move.l 100(sp),-(sp)
    8e80:	|  |  |   jsr 164ec <__floatsidf>
    8e86:	|  |  |   addq.l #4,sp
    8e88:	|  |  |   move.l 92(sp),-(sp)
    8e8c:	|  |  |   move.l 92(sp),-(sp)
    8e90:	|  |  |   move.l d1,-(sp)
    8e92:	|  |  |   move.l d0,-(sp)
    8e94:	|  |  |   jsr 1657c <__muldf3>
    8e9a:	|  |  |   lea 16(sp),sp
    8e9e:	|  |  |   move.l d1,-(sp)
    8ea0:	|  |  |   move.l d0,-(sp)
    8ea2:	|  |  |   move.l d3,-(sp)
    8ea4:	|  |  |   move.l d2,-(sp)
    8ea6:	|  |  |   jsr 16314 <__adddf3>
    8eac:	|  |  |   lea 16(sp),sp
    8eb0:	|  |  |   move.l d1,-(sp)
    8eb2:	|  |  |   move.l d0,-(sp)
    8eb4:	|  |  |   jsr 16484 <__fixdfsi>
    8eba:	|  |  |   addq.l #8,sp
    8ebc:	|  |  |   movea.l 152(sp),a0
    8ec0:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8ec4:	|  |  |   move.l 120(sp),-(sp)
    8ec8:	|  |  |   jsr 164ec <__floatsidf>
    8ece:	|  |  |   addq.l #4,sp
    8ed0:	|  |  |   move.l d0,d2
    8ed2:	|  |  |   move.l d1,d3
    8ed4:	|  |  |   move.l 96(sp),-(sp)
    8ed8:	|  |  |   jsr 164ec <__floatsidf>
    8ede:	|  |  |   addq.l #4,sp
    8ee0:	|  |  |   move.l 92(sp),-(sp)
    8ee4:	|  |  |   move.l 92(sp),-(sp)
    8ee8:	|  |  |   move.l d1,-(sp)
    8eea:	|  |  |   move.l d0,-(sp)
    8eec:	|  |  |   jsr 1657c <__muldf3>
    8ef2:	|  |  |   lea 16(sp),sp
    8ef6:	|  |  |   move.l d1,-(sp)
    8ef8:	|  |  |   move.l d0,-(sp)
    8efa:	|  |  |   move.l d3,-(sp)
    8efc:	|  |  |   move.l d2,-(sp)
    8efe:	|  |  |   jsr 16314 <__adddf3>
    8f04:	|  |  |   lea 16(sp),sp
    8f08:	|  |  |   move.l d1,-(sp)
    8f0a:	|  |  |   move.l d0,-(sp)
    8f0c:	|  |  |   jsr 16484 <__fixdfsi>
    8f12:	|  |  |   addq.l #8,sp
    8f14:	|  |  |   movea.l 152(sp),a0
    8f18:	|  |  |   move.l d0,52(a0)
    8f1c:	|  +--|-- bra.w 9178 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8f20:	|  |  \-> move.l 140(sp),d0
    8f24:	|  |      sub.l 124(sp),d0
    8f28:	|  |      move.l d0,84(sp)
    8f2c:	|  |      move.l 140(sp),d0
    8f30:	|  |      sub.l 116(sp),d0
    8f34:	|  |      move.l d0,80(sp)
    8f38:	|  |      move.l 132(sp),d0
    8f3c:	|  |      sub.l 124(sp),d0
    8f40:	|  |      move.l d0,76(sp)
    8f44:	|  |      move.l 132(sp),d0
    8f48:	|  |      sub.l 116(sp),d0
    8f4c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8f50:	|  |      move.l 136(sp),d0
    8f54:	|  |      sub.l 120(sp),d0
    8f58:	|  |      move.l d0,68(sp)
    8f5c:	|  |      move.l 136(sp),d0
    8f60:	|  |      sub.l 112(sp),d0
    8f64:	|  |      move.l d0,64(sp)
    8f68:	|  |      move.l 128(sp),d0
    8f6c:	|  |      sub.l 120(sp),d0
    8f70:	|  |      move.l d0,60(sp)
    8f74:	|  |      move.l 128(sp),d0
    8f78:	|  |      sub.l 112(sp),d0
    8f7c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8f80:	|  |      move.l 84(sp),-(sp)
    8f84:	|  |      move.l 88(sp),-(sp)
    8f88:	|  |      jsr 16aae <__mulsi3>
    8f8e:	|  |      addq.l #8,sp
    8f90:	|  |      move.l d0,84(sp)
    8f94:	|  |      move.l 80(sp),-(sp)
    8f98:	|  |      move.l 84(sp),-(sp)
    8f9c:	|  |      jsr 16aae <__mulsi3>
    8fa2:	|  |      addq.l #8,sp
    8fa4:	|  |      move.l d0,80(sp)
    8fa8:	|  |      move.l 76(sp),-(sp)
    8fac:	|  |      move.l 80(sp),-(sp)
    8fb0:	|  |      jsr 16aae <__mulsi3>
    8fb6:	|  |      addq.l #8,sp
    8fb8:	|  |      move.l d0,76(sp)
    8fbc:	|  |      move.l 72(sp),-(sp)
    8fc0:	|  |      move.l 76(sp),-(sp)
    8fc4:	|  |      jsr 16aae <__mulsi3>
    8fca:	|  |      addq.l #8,sp
    8fcc:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8fd0:	|  |      move.l 68(sp),-(sp)
    8fd4:	|  |      move.l 72(sp),-(sp)
    8fd8:	|  |      jsr 16aae <__mulsi3>
    8fde:	|  |      addq.l #8,sp
    8fe0:	|  |      move.l d0,68(sp)
    8fe4:	|  |      move.l 64(sp),-(sp)
    8fe8:	|  |      move.l 68(sp),-(sp)
    8fec:	|  |      jsr 16aae <__mulsi3>
    8ff2:	|  |      addq.l #8,sp
    8ff4:	|  |      move.l d0,64(sp)
    8ff8:	|  |      move.l 60(sp),-(sp)
    8ffc:	|  |      move.l 64(sp),-(sp)
    9000:	|  |      jsr 16aae <__mulsi3>
    9006:	|  |      addq.l #8,sp
    9008:	|  |      move.l d0,60(sp)
    900c:	|  |      move.l 56(sp),-(sp)
    9010:	|  |      move.l 60(sp),-(sp)
    9014:	|  |      jsr 16aae <__mulsi3>
    901a:	|  |      addq.l #8,sp
    901c:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9020:	|  |      move.l 84(sp),-(sp)
    9024:	|  |      jsr 164ec <__floatsidf>
    902a:	|  |      addq.l #4,sp
    902c:	|  |      move.l d0,d2
    902e:	|  |      move.l d1,d3
    9030:	|  |      move.l 68(sp),-(sp)
    9034:	|  |      jsr 164ec <__floatsidf>
    903a:	|  |      addq.l #4,sp
    903c:	|  |      move.l d1,-(sp)
    903e:	|  |      move.l d0,-(sp)
    9040:	|  |      move.l d3,-(sp)
    9042:	|  |      move.l d2,-(sp)
    9044:	|  |      jsr 16314 <__adddf3>
    904a:	|  |      lea 16(sp),sp
    904e:	|  |      move.l d1,-(sp)
    9050:	|  |      move.l d0,-(sp)
    9052:	|  |      jsr 16a64 <sqrt>
    9058:	|  |      addq.l #8,sp
    905a:	|  |      move.l d0,d2
    905c:	|  |      move.l d1,d3
    905e:	|  |      move.l 76(sp),-(sp)
    9062:	|  |      jsr 164ec <__floatsidf>
    9068:	|  |      addq.l #4,sp
    906a:	|  |      move.l d0,d4
    906c:	|  |      move.l d1,d5
    906e:	|  |      move.l 60(sp),-(sp)
    9072:	|  |      jsr 164ec <__floatsidf>
    9078:	|  |      addq.l #4,sp
    907a:	|  |      move.l d1,-(sp)
    907c:	|  |      move.l d0,-(sp)
    907e:	|  |      move.l d5,-(sp)
    9080:	|  |      move.l d4,-(sp)
    9082:	|  |      jsr 16314 <__adddf3>
    9088:	|  |      lea 16(sp),sp
    908c:	|  |      move.l d1,-(sp)
    908e:	|  |      move.l d0,-(sp)
    9090:	|  |      jsr 16a64 <sqrt>
    9096:	|  |      addq.l #8,sp
    9098:	|  |      move.l d1,-(sp)
    909a:	|  |      move.l d0,-(sp)
    909c:	|  |      move.l d3,-(sp)
    909e:	|  |      move.l d2,-(sp)
    90a0:	|  |      jsr 16314 <__adddf3>
    90a6:	|  |      lea 16(sp),sp
    90aa:	|  |      move.l d0,d2
    90ac:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    90ae:	|  |      move.l 80(sp),-(sp)
    90b2:	|  |      jsr 164ec <__floatsidf>
    90b8:	|  |      addq.l #4,sp
    90ba:	|  |      move.l d0,d4
    90bc:	|  |      move.l d1,d5
    90be:	|  |      move.l 64(sp),-(sp)
    90c2:	|  |      jsr 164ec <__floatsidf>
    90c8:	|  |      addq.l #4,sp
    90ca:	|  |      move.l d1,-(sp)
    90cc:	|  |      move.l d0,-(sp)
    90ce:	|  |      move.l d5,-(sp)
    90d0:	|  |      move.l d4,-(sp)
    90d2:	|  |      jsr 16314 <__adddf3>
    90d8:	|  |      lea 16(sp),sp
    90dc:	|  |      move.l d1,-(sp)
    90de:	|  |      move.l d0,-(sp)
    90e0:	|  |      jsr 16a64 <sqrt>
    90e6:	|  |      addq.l #8,sp
    90e8:	|  |      move.l d0,d4
    90ea:	|  |      move.l d1,d5
    90ec:	|  |      move.l 72(sp),-(sp)
    90f0:	|  |      jsr 164ec <__floatsidf>
    90f6:	|  |      addq.l #4,sp
    90f8:	|  |      move.l d0,d6
    90fa:	|  |      move.l d1,d7
    90fc:	|  |      move.l 56(sp),-(sp)
    9100:	|  |      jsr 164ec <__floatsidf>
    9106:	|  |      addq.l #4,sp
    9108:	|  |      move.l d1,-(sp)
    910a:	|  |      move.l d0,-(sp)
    910c:	|  |      move.l d7,-(sp)
    910e:	|  |      move.l d6,-(sp)
    9110:	|  |      jsr 16314 <__adddf3>
    9116:	|  |      lea 16(sp),sp
    911a:	|  |      move.l d1,-(sp)
    911c:	|  |      move.l d0,-(sp)
    911e:	|  |      jsr 16a64 <sqrt>
    9124:	|  |      addq.l #8,sp
    9126:	|  |      move.l d1,-(sp)
    9128:	|  |      move.l d0,-(sp)
    912a:	|  |      move.l d5,-(sp)
    912c:	|  |      move.l d4,-(sp)
    912e:	|  |      jsr 16314 <__adddf3>
    9134:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9138:	|  |      move.l d1,-(sp)
    913a:	|  |      move.l d0,-(sp)
    913c:	|  |      move.l d3,-(sp)
    913e:	|  |      move.l d2,-(sp)
    9140:	|  |      jsr 16704 <__ltdf2>
    9146:	|  |      lea 16(sp),sp
    914a:	|  |      tst.l d0
    914c:	|  |  /-- bge.s 9164 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    914e:	|  |  |   movea.l 152(sp),a0
    9152:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9158:	|  |  |   movea.l 152(sp),a0
    915c:	|  |  |   move.l 120(sp),52(a0)
    9162:	|  +--|-- bra.s 9178 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9164:	|  |  \-> movea.l 152(sp),a0
    9168:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    916e:	|  |      movea.l 152(sp),a0
    9172:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9178:	|  \----> movea.l 152(sp),a0
    917c:	|         move.l 52(a0),d0
    9180:	|         move.l d0,-(sp)
    9182:	|         jsr 1652c <__floatsisf>
    9188:	|         addq.l #4,sp
    918a:	|         move.l d0,d1
    918c:	|         movea.l 152(sp),a0
    9190:	|         move.l 4(a0),d0
    9194:	|         move.l d0,-(sp)
    9196:	|         move.l d1,-(sp)
    9198:	|         jsr 16820 <__subsf3>
    919e:	|         addq.l #8,sp
    91a0:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    91a4:	|         movea.l 152(sp),a0
    91a8:	|         move.l (a0),d2
    91aa:	|         movea.l 152(sp),a0
    91ae:	|         move.l 48(a0),d0
    91b2:	|         move.l d0,-(sp)
    91b4:	|         jsr 1652c <__floatsisf>
    91ba:	|         addq.l #4,sp
    91bc:	|         move.l d0,-(sp)
    91be:	|         move.l d2,-(sp)
    91c0:	|         jsr 16820 <__subsf3>
    91c6:	|         addq.l #8,sp
    91c8:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    91cc:	|         clr.l -(sp)
    91ce:	|         move.l 52(sp),-(sp)
    91d2:	|         jsr 16788 <__nesf2>
    91d8:	|         addq.l #8,sp
    91da:	|         tst.l d0
    91dc:	|     /-- bne.s 91f0 <doBorderStuff+0x628>
    91de:	|     |   clr.l -(sp)
    91e0:	|     |   move.l 56(sp),-(sp)
    91e4:	|     |   jsr 16788 <__nesf2>
    91ea:	|     |   addq.l #8,sp
    91ec:	|     |   tst.l d0
    91ee:	|  /--|-- beq.s 9266 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    91f0:	|  |  \-> move.l 52(sp),d0
    91f4:	|  |      move.l d0,-(sp)
    91f6:	|  |      move.l d0,-(sp)
    91f8:	|  |      jsr 162de <__addsf3>
    91fe:	|  |      addq.l #8,sp
    9200:	|  |      move.l d0,-(sp)
    9202:	|  |      move.l 52(sp),-(sp)
    9206:	|  |      jsr 168b4 <atan2f>
    920c:	|  |      addq.l #8,sp
    920e:	|  |      move.l d0,-(sp)
    9210:	|  |      jsr 16444 <__extendsfdf2>
    9216:	|  |      addq.l #4,sp
    9218:	|  |      move.l #-1540411785,-(sp)
    921e:	|  |      move.l #1078765033,-(sp)
    9224:	|  |      move.l d1,-(sp)
    9226:	|  |      move.l d0,-(sp)
    9228:	|  |      jsr 1657c <__muldf3>
    922e:	|  |      lea 16(sp),sp
    9232:	|  |      clr.l -(sp)
    9234:	|  |      move.l #1080459264,-(sp)
    923a:	|  |      move.l d1,-(sp)
    923c:	|  |      move.l d0,-(sp)
    923e:	|  |      jsr 16314 <__adddf3>
    9244:	|  |      lea 16(sp),sp
    9248:	|  |      move.l d1,-(sp)
    924a:	|  |      move.l d0,-(sp)
    924c:	|  |      jsr 16484 <__fixdfsi>
    9252:	|  |      addq.l #8,sp
    9254:	|  |      movea.l 152(sp),a0
    9258:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    925c:	|  |      movea.l 152(sp),a0
    9260:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9266:	|  \----> pea 1 <_start+0x1>
    926a:	|         move.l 156(sp),-(sp)
    926e:	|         jsr 71b0 <setFrames>
    9274:	|         addq.l #8,sp
    return TRUE;
    9276:	|         moveq #1,d0
}
    9278:	\-------> movem.l (sp)+,d2-d7
    927c:	          lea 124(sp),sp
    9280:	          rts

00009282 <drawPeople>:

void drawPeople () {
    9282:	                   lea -24(sp),sp
    9286:	                   move.l d2,-(sp)

	shufflePeople ();
    9288:	                   jsr ad1e <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    928e:	                   move.l 1b900 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9296:	                   clr.l 20(sp)
	overRegion = NULL;
    929a:	                   clr.l 1b9b4 <overRegion>

	while (thisPerson) {
    92a0:	   /-------------- bra.w 9852 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    92a4:	/--|-------------> movea.l 24(sp),a0
    92a8:	|  |               move.w 104(a0),d0
    92ac:	|  |  /----------- beq.w 9606 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    92b0:	|  |  |            movea.l 24(sp),a0
    92b4:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    92ba:	|  |  |            movea.l 24(sp),a0
    92be:	|  |  |            move.l 76(a0),d0
    92c2:	|  |  |            cmp.l 20(sp),d0
    92c6:	|  |  |  /-------- beq.w 9494 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    92ca:	|  |  |  |         movea.l 24(sp),a0
    92ce:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    92d2:	|  |  |  |         movea.l 24(sp),a0
    92d6:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    92dc:	|  |  |  |         movea.l 24(sp),a0
    92e0:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    92e4:	|  |  |  |         movea.l 20(sp),a0
    92e8:	|  |  |  |         movea.l 4(a0),a0
    92ec:	|  |  |  |         move.l 4(a0),d0
    92f0:	|  |  |  |         movea.l 24(sp),a0
    92f4:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    92f8:	|  |  |  |         movea.l 20(sp),a0
    92fc:	|  |  |  |         movea.l 4(a0),a1
    9300:	|  |  |  |         movea.l 24(sp),a0
    9304:	|  |  |  |         move.l 84(a0),d0
    9308:	|  |  |  |         move.l d0,d1
    930a:	|  |  |  |         move.l d1,d0
    930c:	|  |  |  |         add.l d0,d0
    930e:	|  |  |  |         add.l d1,d0
    9310:	|  |  |  |         add.l d0,d0
    9312:	|  |  |  |         add.l d0,d0
    9314:	|  |  |  |         lea (0,a1,d0.l),a0
    9318:	|  |  |  |         move.l 8(a0),d0
    931c:	|  |  |  |     /-- ble.w 93be <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9320:	|  |  |  |     |   movea.l 20(sp),a0
    9324:	|  |  |  |     |   movea.l 4(a0),a1
    9328:	|  |  |  |     |   movea.l 24(sp),a0
    932c:	|  |  |  |     |   move.l 84(a0),d0
    9330:	|  |  |  |     |   move.l d0,d1
    9332:	|  |  |  |     |   move.l d1,d0
    9334:	|  |  |  |     |   add.l d0,d0
    9336:	|  |  |  |     |   add.l d1,d0
    9338:	|  |  |  |     |   add.l d0,d0
    933a:	|  |  |  |     |   add.l d0,d0
    933c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9340:	|  |  |  |     |   move.l 8(a0),d0
    9344:	|  |  |  |     |   clr.l -(sp)
    9346:	|  |  |  |     |   move.l d0,-(sp)
    9348:	|  |  |  |     |   jsr c40a <startSound>
    934e:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9350:	|  |  |  |     |   movea.l 24(sp),a0
    9354:	|  |  |  |     |   move.l 84(a0),d0
    9358:	|  |  |  |     |   addq.l #1,d0
    935a:	|  |  |  |     |   movea.l 24(sp),a0
    935e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9362:	|  |  |  |     |   movea.l 24(sp),a0
    9366:	|  |  |  |     |   move.l 84(a0),d0
    936a:	|  |  |  |     |   movea.l 24(sp),a0
    936e:	|  |  |  |     |   movea.l 72(a0),a0
    9372:	|  |  |  |     |   move.l 8(a0),d1
    9376:	|  |  |  |     |   move.l d1,-(sp)
    9378:	|  |  |  |     |   move.l d0,-(sp)
    937a:	|  |  |  |     |   jsr 16b5a <__modsi3>
    9380:	|  |  |  |     |   addq.l #8,sp
    9382:	|  |  |  |     |   movea.l 24(sp),a0
    9386:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    938a:	|  |  |  |     |   movea.l 24(sp),a0
    938e:	|  |  |  |     |   movea.l 72(a0),a0
    9392:	|  |  |  |     |   movea.l 4(a0),a1
    9396:	|  |  |  |     |   movea.l 24(sp),a0
    939a:	|  |  |  |     |   move.l 84(a0),d0
    939e:	|  |  |  |     |   move.l d0,d1
    93a0:	|  |  |  |     |   move.l d1,d0
    93a2:	|  |  |  |     |   add.l d0,d0
    93a4:	|  |  |  |     |   add.l d1,d0
    93a6:	|  |  |  |     |   add.l d0,d0
    93a8:	|  |  |  |     |   add.l d0,d0
    93aa:	|  |  |  |     |   lea (0,a1,d0.l),a0
    93ae:	|  |  |  |     |   move.l 4(a0),d0
    93b2:	|  |  |  |     |   movea.l 24(sp),a0
    93b6:	|  |  |  |     |   move.l d0,88(a0)
    93ba:	|  |  |  |  /--|-- bra.w 94fc <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    93be:	|  |  |  |  |  \-> movea.l 20(sp),a0
    93c2:	|  |  |  |  |      movea.l 4(a0),a1
    93c6:	|  |  |  |  |      movea.l 24(sp),a0
    93ca:	|  |  |  |  |      move.l 84(a0),d0
    93ce:	|  |  |  |  |      move.l d0,d1
    93d0:	|  |  |  |  |      move.l d1,d0
    93d2:	|  |  |  |  |      add.l d0,d0
    93d4:	|  |  |  |  |      add.l d1,d0
    93d6:	|  |  |  |  |      add.l d0,d0
    93d8:	|  |  |  |  |      add.l d0,d0
    93da:	|  |  |  |  |      lea (0,a1,d0.l),a0
    93de:	|  |  |  |  |      move.l 8(a0),d0
    93e2:	|  |  |  |  +----- beq.w 94fc <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    93e6:	|  |  |  |  |      movea.l 1b818 <noStack>,a1
    93ec:	|  |  |  |  |      movea.l 20(sp),a0
    93f0:	|  |  |  |  |      move.l 4(a0),d2
    93f4:	|  |  |  |  |      movea.l 24(sp),a0
    93f8:	|  |  |  |  |      move.l 84(a0),d0
    93fc:	|  |  |  |  |      move.l d0,d1
    93fe:	|  |  |  |  |      move.l d1,d0
    9400:	|  |  |  |  |      add.l d0,d0
    9402:	|  |  |  |  |      add.l d1,d0
    9404:	|  |  |  |  |      add.l d0,d0
    9406:	|  |  |  |  |      add.l d0,d0
    9408:	|  |  |  |  |      movea.l d2,a0
    940a:	|  |  |  |  |      adda.l d0,a0
    940c:	|  |  |  |  |      move.l 8(a0),d0
    9410:	|  |  |  |  |      neg.l d0
    9412:	|  |  |  |  |      pea 1 <_start+0x1>
    9416:	|  |  |  |  |      move.l a1,-(sp)
    9418:	|  |  |  |  |      clr.l -(sp)
    941a:	|  |  |  |  |      clr.l -(sp)
    941c:	|  |  |  |  |      move.l d0,-(sp)
    941e:	|  |  |  |  |      jsr 5b22 <startNewFunctionNum>
    9424:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9428:	|  |  |  |  |      movea.l 24(sp),a0
    942c:	|  |  |  |  |      move.l 84(a0),d0
    9430:	|  |  |  |  |      addq.l #1,d0
    9432:	|  |  |  |  |      movea.l 24(sp),a0
    9436:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    943a:	|  |  |  |  |      movea.l 24(sp),a0
    943e:	|  |  |  |  |      move.l 84(a0),d0
    9442:	|  |  |  |  |      movea.l 24(sp),a0
    9446:	|  |  |  |  |      movea.l 72(a0),a0
    944a:	|  |  |  |  |      move.l 8(a0),d1
    944e:	|  |  |  |  |      move.l d1,-(sp)
    9450:	|  |  |  |  |      move.l d0,-(sp)
    9452:	|  |  |  |  |      jsr 16b5a <__modsi3>
    9458:	|  |  |  |  |      addq.l #8,sp
    945a:	|  |  |  |  |      movea.l 24(sp),a0
    945e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9462:	|  |  |  |  |      movea.l 24(sp),a0
    9466:	|  |  |  |  |      movea.l 72(a0),a0
    946a:	|  |  |  |  |      movea.l 4(a0),a1
    946e:	|  |  |  |  |      movea.l 24(sp),a0
    9472:	|  |  |  |  |      move.l 84(a0),d0
    9476:	|  |  |  |  |      move.l d0,d1
    9478:	|  |  |  |  |      move.l d1,d0
    947a:	|  |  |  |  |      add.l d0,d0
    947c:	|  |  |  |  |      add.l d1,d0
    947e:	|  |  |  |  |      add.l d0,d0
    9480:	|  |  |  |  |      add.l d0,d0
    9482:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9486:	|  |  |  |  |      move.l 4(a0),d0
    948a:	|  |  |  |  |      movea.l 24(sp),a0
    948e:	|  |  |  |  |      move.l d0,88(a0)
    9492:	|  |  |  |  +----- bra.s 94fc <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9494:	|  |  |  \--|----> movea.l 24(sp),a0
    9498:	|  |  |     |      move.l (a0),d0
    949a:	|  |  |     |      movea.l 24(sp),a0
    949e:	|  |  |     |      move.l 8(a0),d1
    94a2:	|  |  |     |      move.l d1,-(sp)
    94a4:	|  |  |     |      move.l d0,-(sp)
    94a6:	|  |  |     |      jsr 1640e <__eqsf2>
    94ac:	|  |  |     |      addq.l #8,sp
    94ae:	|  |  |     |      tst.l d0
    94b0:	|  |  |     |  /-- bne.s 94f4 <drawPeople+0x272>
    94b2:	|  |  |     |  |   movea.l 24(sp),a0
    94b6:	|  |  |     |  |   move.l 4(a0),d0
    94ba:	|  |  |     |  |   movea.l 24(sp),a0
    94be:	|  |  |     |  |   move.l 12(a0),d1
    94c2:	|  |  |     |  |   move.l d1,-(sp)
    94c4:	|  |  |     |  |   move.l d0,-(sp)
    94c6:	|  |  |     |  |   jsr 1640e <__eqsf2>
    94cc:	|  |  |     |  |   addq.l #8,sp
    94ce:	|  |  |     |  |   tst.l d0
    94d0:	|  |  |     |  +-- bne.s 94f4 <drawPeople+0x272>
    94d2:	|  |  |     |  |   movea.l 20(sp),a0
    94d6:	|  |  |     |  |   move.l 8(a0),d0
    94da:	|  |  |     |  |   moveq #1,d1
    94dc:	|  |  |     |  |   cmp.l d0,d1
    94de:	|  |  |     |  +-- bne.s 94f4 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    94e0:	|  |  |     |  |   movea.l 24(sp),a0
    94e4:	|  |  |     |  |   move.l 16(a0),d0
    94e8:	|  |  |     |  |   addq.l #1,d0
    94ea:	|  |  |     |  |   movea.l 24(sp),a0
    94ee:	|  |  |     |  |   move.l d0,16(a0)
    94f2:	|  |  |     +--|-- bra.s 94fc <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    94f4:	|  |  |     |  \-> movea.l 24(sp),a0
    94f8:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    94fc:	|  |  |     \----> movea.l 24(sp),a0
    9500:	|  |  |            move.l (a0),d0
    9502:	|  |  |            movea.l 24(sp),a0
    9506:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    950a:	|  |  |            movea.l 24(sp),a0
    950e:	|  |  |            move.l 4(a0),d0
    9512:	|  |  |            movea.l 24(sp),a0
    9516:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    951a:	|  |  |            movea.l 20(sp),a0
    951e:	|  |  |            movea.l 4(a0),a1
    9522:	|  |  |            movea.l 24(sp),a0
    9526:	|  |  |            move.l 84(a0),d0
    952a:	|  |  |            move.l d0,d1
    952c:	|  |  |            move.l d1,d0
    952e:	|  |  |            add.l d0,d0
    9530:	|  |  |            add.l d1,d0
    9532:	|  |  |            add.l d0,d0
    9534:	|  |  |            add.l d0,d0
    9536:	|  |  |            lea (0,a1,d0.l),a0
    953a:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    953e:	|  |  |            move.l 8(sp),d0
    9542:	|  |  |            add.l d0,d0
    9544:	|  |  |            subx.l d0,d0
    9546:	|  |  |            neg.l d0
    9548:	|  |  |            move.b d0,d0
    954a:	|  |  |            move.b d0,d0
    954c:	|  |  |            andi.l #255,d0
    9552:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9556:	|  |  |            move.l 8(sp),-(sp)
    955a:	|  |  |            jsr 8456 <TF_abs>
    9560:	|  |  |            addq.l #4,sp
    9562:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9566:	|  |  |            movea.l 20(sp),a0
    956a:	|  |  |            movea.l (a0),a0
    956c:	|  |  |            move.l 8(a0),d0
    9570:	|  |  |            cmp.l 12(sp),d0
    9574:	|  |  |        /-- bgt.s 9584 <drawPeople+0x302>
				fNum = 0;
    9576:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    957a:	|  |  |        |   moveq #2,d0
    957c:	|  |  |        |   sub.l 16(sp),d0
    9580:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    9584:	|  |  |        \-> moveq #2,d1
    9586:	|  |  |            cmp.l 16(sp),d1
    958a:	|  |  +----------- beq.s 9606 <drawPeople+0x384>
				BOOL r = FALSE;
    958c:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    9590:	|  |  |            move.l 16(sp),d0
    9594:	|  |  |            movea.w d0,a0
    9596:	|  |  |            movea.l 20(sp),a1
    959a:	|  |  |            movea.l (a1),a1
    959c:	|  |  |            movea.l 16(a1),a1
    95a0:	|  |  |            move.l 12(sp),d1
    95a4:	|  |  |            move.l d1,d0
    95a6:	|  |  |            lsl.l #3,d0
    95a8:	|  |  |            sub.l d1,d0
    95aa:	|  |  |            add.l d0,d0
    95ac:	|  |  |            add.l d0,d0
    95ae:	|  |  |            add.l a1,d0
    95b0:	|  |  |            move.l a0,-(sp)
    95b2:	|  |  |            move.l 28(sp),-(sp)
    95b6:	|  |  |            move.l d0,-(sp)
    95b8:	|  |  |            jsr 81ec <scaleSprite>
    95be:	|  |  |            lea 12(sp),sp
    95c2:	|  |  |            move.w d0,6(sp)
				if (r) {
    95c6:	|  |  +----------- beq.s 9606 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    95c8:	|  |  |            movea.l 24(sp),a0
    95cc:	|  |  |            movea.l 114(a0),a0
    95d0:	|  |  |            movea.l (a0),a0
    95d2:	|  |  |            move.b (a0),d0
    95d4:	|  |  +----------- beq.s 9606 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    95d6:	|  |  |            move.l 1b920 <personRegion+0x1c>,d1
    95dc:	|  |  |            movea.l 24(sp),a0
    95e0:	|  |  |            move.l 114(a0),d0
    95e4:	|  |  |            cmp.l d1,d0
    95e6:	|  |  |        /-- beq.s 95ee <drawPeople+0x36c>
    95e8:	|  |  |        |   clr.l 1b810 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    95ee:	|  |  |        \-> movea.l 24(sp),a0
    95f2:	|  |  |            move.l 114(a0),d0
    95f6:	|  |  |            move.l d0,1b920 <personRegion+0x1c>
						overRegion = & personRegion;
    95fc:	|  |  |            move.l #112900,1b9b4 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    9606:	|  |  \----------> movea.l 24(sp),a0
    960a:	|  |               move.l 88(a0),d0
    960e:	|  |               subq.l #1,d0
    9610:	|  |               movea.l 24(sp),a0
    9614:	|  |               move.l d0,88(a0)
    9618:	|  |               movea.l 24(sp),a0
    961c:	|  |               move.l 88(a0),d0
    9620:	|  |        /----- bne.w 9848 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9624:	|  |        |      movea.l 24(sp),a0
    9628:	|  |        |      move.l 84(a0),d0
    962c:	|  |        |      addq.l #1,d0
    962e:	|  |        |      movea.l 24(sp),a0
    9632:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9636:	|  |        |      movea.l 24(sp),a0
    963a:	|  |        |      move.l 84(a0),d0
    963e:	|  |        |      movea.l 24(sp),a0
    9642:	|  |        |      movea.l 72(a0),a0
    9646:	|  |        |      move.l 8(a0),d1
    964a:	|  |        |      move.l d1,-(sp)
    964c:	|  |        |      move.l d0,-(sp)
    964e:	|  |        |      jsr 16b5a <__modsi3>
    9654:	|  |        |      addq.l #8,sp
    9656:	|  |        |      movea.l 24(sp),a0
    965a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    965e:	|  |        |      movea.l 24(sp),a0
    9662:	|  |        |      movea.l 72(a0),a0
    9666:	|  |        |      movea.l 4(a0),a1
    966a:	|  |        |      movea.l 24(sp),a0
    966e:	|  |        |      move.l 84(a0),d0
    9672:	|  |        |      move.l d0,d1
    9674:	|  |        |      move.l d1,d0
    9676:	|  |        |      add.l d0,d0
    9678:	|  |        |      add.l d1,d0
    967a:	|  |        |      add.l d0,d0
    967c:	|  |        |      add.l d0,d0
    967e:	|  |        |      lea (0,a1,d0.l),a0
    9682:	|  |        |      move.l 4(a0),d0
    9686:	|  |        |      movea.l 24(sp),a0
    968a:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    968e:	|  |        |      movea.l 24(sp),a0
    9692:	|  |        |      move.w 104(a0),d0
    9696:	|  |        +----- beq.w 9848 <drawPeople+0x5c6>
    969a:	|  |        |      tst.l 20(sp)
    969e:	|  |        +----- beq.w 9848 <drawPeople+0x5c6>
    96a2:	|  |        |      movea.l 20(sp),a0
    96a6:	|  |        |      move.l 4(a0),d0
    96aa:	|  |        +----- beq.w 9848 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    96ae:	|  |        |      movea.l 20(sp),a0
    96b2:	|  |        |      movea.l 4(a0),a1
    96b6:	|  |        |      movea.l 24(sp),a0
    96ba:	|  |        |      move.l 84(a0),d0
    96be:	|  |        |      move.l d0,d1
    96c0:	|  |        |      move.l d1,d0
    96c2:	|  |        |      add.l d0,d0
    96c4:	|  |        |      add.l d1,d0
    96c6:	|  |        |      add.l d0,d0
    96c8:	|  |        |      add.l d0,d0
    96ca:	|  |        |      lea (0,a1,d0.l),a0
    96ce:	|  |        |      move.l 8(a0),d0
    96d2:	|  |        |  /-- ble.w 9774 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    96d6:	|  |        |  |   movea.l 20(sp),a0
    96da:	|  |        |  |   movea.l 4(a0),a1
    96de:	|  |        |  |   movea.l 24(sp),a0
    96e2:	|  |        |  |   move.l 84(a0),d0
    96e6:	|  |        |  |   move.l d0,d1
    96e8:	|  |        |  |   move.l d1,d0
    96ea:	|  |        |  |   add.l d0,d0
    96ec:	|  |        |  |   add.l d1,d0
    96ee:	|  |        |  |   add.l d0,d0
    96f0:	|  |        |  |   add.l d0,d0
    96f2:	|  |        |  |   lea (0,a1,d0.l),a0
    96f6:	|  |        |  |   move.l 8(a0),d0
    96fa:	|  |        |  |   clr.l -(sp)
    96fc:	|  |        |  |   move.l d0,-(sp)
    96fe:	|  |        |  |   jsr c40a <startSound>
    9704:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9706:	|  |        |  |   movea.l 24(sp),a0
    970a:	|  |        |  |   move.l 84(a0),d0
    970e:	|  |        |  |   addq.l #1,d0
    9710:	|  |        |  |   movea.l 24(sp),a0
    9714:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9718:	|  |        |  |   movea.l 24(sp),a0
    971c:	|  |        |  |   move.l 84(a0),d0
    9720:	|  |        |  |   movea.l 24(sp),a0
    9724:	|  |        |  |   movea.l 72(a0),a0
    9728:	|  |        |  |   move.l 8(a0),d1
    972c:	|  |        |  |   move.l d1,-(sp)
    972e:	|  |        |  |   move.l d0,-(sp)
    9730:	|  |        |  |   jsr 16b5a <__modsi3>
    9736:	|  |        |  |   addq.l #8,sp
    9738:	|  |        |  |   movea.l 24(sp),a0
    973c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9740:	|  |        |  |   movea.l 24(sp),a0
    9744:	|  |        |  |   movea.l 72(a0),a0
    9748:	|  |        |  |   movea.l 4(a0),a1
    974c:	|  |        |  |   movea.l 24(sp),a0
    9750:	|  |        |  |   move.l 84(a0),d0
    9754:	|  |        |  |   move.l d0,d1
    9756:	|  |        |  |   move.l d1,d0
    9758:	|  |        |  |   add.l d0,d0
    975a:	|  |        |  |   add.l d1,d0
    975c:	|  |        |  |   add.l d0,d0
    975e:	|  |        |  |   add.l d0,d0
    9760:	|  |        |  |   lea (0,a1,d0.l),a0
    9764:	|  |        |  |   move.l 4(a0),d0
    9768:	|  |        |  |   movea.l 24(sp),a0
    976c:	|  |        |  |   move.l d0,88(a0)
    9770:	|  |        +--|-- bra.w 9848 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9774:	|  |        |  \-> movea.l 20(sp),a0
    9778:	|  |        |      movea.l 4(a0),a1
    977c:	|  |        |      movea.l 24(sp),a0
    9780:	|  |        |      move.l 84(a0),d0
    9784:	|  |        |      move.l d0,d1
    9786:	|  |        |      move.l d1,d0
    9788:	|  |        |      add.l d0,d0
    978a:	|  |        |      add.l d1,d0
    978c:	|  |        |      add.l d0,d0
    978e:	|  |        |      add.l d0,d0
    9790:	|  |        |      lea (0,a1,d0.l),a0
    9794:	|  |        |      move.l 8(a0),d0
    9798:	|  |        +----- beq.w 9848 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    979c:	|  |        |      movea.l 1b818 <noStack>,a1
    97a2:	|  |        |      movea.l 20(sp),a0
    97a6:	|  |        |      move.l 4(a0),d2
    97aa:	|  |        |      movea.l 24(sp),a0
    97ae:	|  |        |      move.l 84(a0),d0
    97b2:	|  |        |      move.l d0,d1
    97b4:	|  |        |      move.l d1,d0
    97b6:	|  |        |      add.l d0,d0
    97b8:	|  |        |      add.l d1,d0
    97ba:	|  |        |      add.l d0,d0
    97bc:	|  |        |      add.l d0,d0
    97be:	|  |        |      movea.l d2,a0
    97c0:	|  |        |      adda.l d0,a0
    97c2:	|  |        |      move.l 8(a0),d0
    97c6:	|  |        |      neg.l d0
    97c8:	|  |        |      pea 1 <_start+0x1>
    97cc:	|  |        |      move.l a1,-(sp)
    97ce:	|  |        |      clr.l -(sp)
    97d0:	|  |        |      clr.l -(sp)
    97d2:	|  |        |      move.l d0,-(sp)
    97d4:	|  |        |      jsr 5b22 <startNewFunctionNum>
    97da:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    97de:	|  |        |      movea.l 24(sp),a0
    97e2:	|  |        |      move.l 84(a0),d0
    97e6:	|  |        |      addq.l #1,d0
    97e8:	|  |        |      movea.l 24(sp),a0
    97ec:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    97f0:	|  |        |      movea.l 24(sp),a0
    97f4:	|  |        |      move.l 84(a0),d0
    97f8:	|  |        |      movea.l 24(sp),a0
    97fc:	|  |        |      movea.l 72(a0),a0
    9800:	|  |        |      move.l 8(a0),d1
    9804:	|  |        |      move.l d1,-(sp)
    9806:	|  |        |      move.l d0,-(sp)
    9808:	|  |        |      jsr 16b5a <__modsi3>
    980e:	|  |        |      addq.l #8,sp
    9810:	|  |        |      movea.l 24(sp),a0
    9814:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9818:	|  |        |      movea.l 24(sp),a0
    981c:	|  |        |      movea.l 72(a0),a0
    9820:	|  |        |      movea.l 4(a0),a1
    9824:	|  |        |      movea.l 24(sp),a0
    9828:	|  |        |      move.l 84(a0),d0
    982c:	|  |        |      move.l d0,d1
    982e:	|  |        |      move.l d1,d0
    9830:	|  |        |      add.l d0,d0
    9832:	|  |        |      add.l d1,d0
    9834:	|  |        |      add.l d0,d0
    9836:	|  |        |      add.l d0,d0
    9838:	|  |        |      lea (0,a1,d0.l),a0
    983c:	|  |        |      move.l 4(a0),d0
    9840:	|  |        |      movea.l 24(sp),a0
    9844:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    9848:	|  |        \----> movea.l 24(sp),a0
    984c:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    9852:	|  \-------------> tst.l 24(sp)
    9856:	\----------------- bne.w 92a4 <drawPeople+0x22>
	}
}
    985a:	                   nop
    985c:	                   nop
    985e:	                   move.l (sp)+,d2
    9860:	                   lea 24(sp),sp
    9864:	                   rts

00009866 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    9866:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    9868:	          move.l 1b900 <allPeople>,(sp)
	while (thisPerson) {
    986e:	      /-- bra.s 9886 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    9870:	/-----|-> movea.l (sp),a0
    9872:	|     |   movea.l 114(a0),a0
    9876:	|     |   move.l 4(a0),d0
    987a:	|     |   cmp.l 8(sp),d0
    987e:	|  /--|-- beq.s 988c <findPerson+0x26>
		thisPerson = thisPerson -> next;
    9880:	|  |  |   movea.l (sp),a0
    9882:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    9886:	|  |  \-> tst.l (sp)
    9888:	\--|----- bne.s 9870 <findPerson+0xa>
    988a:	   |  /-- bra.s 988e <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    988c:	   \--|-> nop
	}
	return thisPerson;
    988e:	      \-> move.l (sp),d0
}
    9890:	          addq.l #4,sp
    9892:	          rts

00009894 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    9894:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    9896:	       move.l 12(sp),-(sp)
    989a:	       jsr 9866 <findPerson>
    98a0:	       addq.l #4,sp
    98a2:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    98a4:	   /-- bne.s 98aa <floatCharacter+0x16>
    98a6:	   |   clr.w d0
    98a8:	/--|-- bra.s 98b4 <floatCharacter+0x20>
	moveMe -> floaty = f;
    98aa:	|  \-> movea.l (sp),a0
    98ac:	|      move.l 8(sp),24(a0)
	return TRUE;
    98b2:	|      moveq #1,d0
}
    98b4:	\----> addq.l #4,sp
    98b6:	       rts

000098b8 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    98b8:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    98ba:	          tst.l 8(sp)
    98be:	      /-- bne.s 98cc <forceWalkingPerson+0x14>
    98c0:	      |   tst.l 12(sp)
    98c4:	      +-- bne.s 98cc <forceWalkingPerson+0x14>
    98c6:	      |   clr.w d0
    98c8:	/-----|-- bra.w 995e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    98cc:	|     \-> move.l 16(sp),-(sp)
    98d0:	|         jsr 9866 <findPerson>
    98d6:	|         addq.l #4,sp
    98d8:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    98da:	|     /-- bne.s 98e0 <forceWalkingPerson+0x28>
    98dc:	|     |   clr.w d0
    98de:	+-----|-- bra.s 995e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    98e0:	|     \-> movea.l (sp),a0
    98e2:	|         move.l 68(a0),d0
    98e6:	|     /-- beq.s 98f8 <forceWalkingPerson+0x40>
    98e8:	|     |   movea.l (sp),a0
    98ea:	|     |   move.l 68(a0),d0
    98ee:	|     |   move.l d0,-(sp)
    98f0:	|     |   jsr 3766 <abortFunction>
    98f6:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    98f8:	|     \-> movea.l (sp),a0
    98fa:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    9900:	|         movea.l (sp),a0
    9902:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    9906:	|         movea.l (sp),a0
    9908:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    990e:	|         movea.l (sp),a0
    9910:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    9916:	|         movea.l (sp),a0
    9918:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    991e:	|         movea.l (sp),a0
    9920:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    9924:	|         movea.l (sp),a0
    9926:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    992a:	|         move.l (sp),-(sp)
    992c:	|         jsr 8bc8 <doBorderStuff>
    9932:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    9934:	|         pea 1 <_start+0x1>
    9938:	|         move.l 4(sp),-(sp)
    993c:	|         jsr b128 <walkMe>
    9942:	|         addq.l #8,sp
    9944:	|         tst.w d0
    9946:	|     /-- bne.s 9950 <forceWalkingPerson+0x98>
    9948:	|     |   movea.l (sp),a0
    994a:	|     |   move.w 66(a0),d0
    994e:	|  /--|-- beq.s 995c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    9950:	|  |  \-> movea.l (sp),a0
    9952:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    9958:	|  |      moveq #1,d0
    995a:	+--|----- bra.s 995e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    995c:	|  \----> clr.w d0
    }
}
    995e:	\-------> addq.l #4,sp
    9960:	          rts

00009962 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    9962:	                lea -56(sp),sp
    9966:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    9968:	                move.l #320,56(sp)
    9970:	                move.l #200,52(sp)
    9978:	                moveq #-1,d0
    997a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    997e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9986:	                clr.l 44(sp)
    998a:	   /----------- bra.w 9b62 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    998e:	/--|----------> movea.l 1b9bc <currentFloor>,a0
    9994:	|  |            move.l 12(a0),d1
    9998:	|  |            move.l 44(sp),d0
    999c:	|  |            lsl.l #3,d0
    999e:	|  |            movea.l d1,a0
    99a0:	|  |            adda.l d0,a0
    99a2:	|  |            move.l (a0),d0
    99a4:	|  |            move.l d0,d1
    99a6:	|  |            subq.l #1,d1
    99a8:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    99ac:	|  |            clr.l 40(sp)
    99b0:	|  |     /----- bra.w 9b40 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    99b4:	|  |  /--|----> movea.l 1b9bc <currentFloor>,a0
    99ba:	|  |  |  |      move.l 4(a0),d1
    99be:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    99c4:	|  |  |  |      movea.l 12(a0),a0
    99c8:	|  |  |  |      move.l 44(sp),d0
    99cc:	|  |  |  |      lsl.l #3,d0
    99ce:	|  |  |  |      adda.l d0,a0
    99d0:	|  |  |  |      movea.l 4(a0),a0
    99d4:	|  |  |  |      move.l 40(sp),d0
    99d8:	|  |  |  |      add.l d0,d0
    99da:	|  |  |  |      add.l d0,d0
    99dc:	|  |  |  |      adda.l d0,a0
    99de:	|  |  |  |      move.l (a0),d0
    99e0:	|  |  |  |      lsl.l #3,d0
    99e2:	|  |  |  |      movea.l d1,a0
    99e4:	|  |  |  |      adda.l d0,a0
    99e6:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    99ea:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    99f0:	|  |  |  |      move.l 4(a0),d1
    99f4:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    99fa:	|  |  |  |      movea.l 12(a0),a0
    99fe:	|  |  |  |      move.l 44(sp),d0
    9a02:	|  |  |  |      lsl.l #3,d0
    9a04:	|  |  |  |      adda.l d0,a0
    9a06:	|  |  |  |      movea.l 4(a0),a0
    9a0a:	|  |  |  |      move.l 40(sp),d0
    9a0e:	|  |  |  |      add.l d0,d0
    9a10:	|  |  |  |      add.l d0,d0
    9a12:	|  |  |  |      adda.l d0,a0
    9a14:	|  |  |  |      move.l (a0),d0
    9a16:	|  |  |  |      lsl.l #3,d0
    9a18:	|  |  |  |      movea.l d1,a0
    9a1a:	|  |  |  |      adda.l d0,a0
    9a1c:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    9a22:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    9a28:	|  |  |  |      move.l 4(a0),d1
    9a2c:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    9a32:	|  |  |  |      movea.l 12(a0),a0
    9a36:	|  |  |  |      move.l 44(sp),d0
    9a3a:	|  |  |  |      lsl.l #3,d0
    9a3c:	|  |  |  |      adda.l d0,a0
    9a3e:	|  |  |  |      movea.l 4(a0),a0
    9a42:	|  |  |  |      move.l 36(sp),d0
    9a46:	|  |  |  |      add.l d0,d0
    9a48:	|  |  |  |      add.l d0,d0
    9a4a:	|  |  |  |      adda.l d0,a0
    9a4c:	|  |  |  |      move.l (a0),d0
    9a4e:	|  |  |  |      lsl.l #3,d0
    9a50:	|  |  |  |      movea.l d1,a0
    9a52:	|  |  |  |      adda.l d0,a0
    9a54:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    9a58:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    9a5e:	|  |  |  |      move.l 4(a0),d1
    9a62:	|  |  |  |      movea.l 1b9bc <currentFloor>,a0
    9a68:	|  |  |  |      movea.l 12(a0),a0
    9a6c:	|  |  |  |      move.l 44(sp),d0
    9a70:	|  |  |  |      lsl.l #3,d0
    9a72:	|  |  |  |      adda.l d0,a0
    9a74:	|  |  |  |      movea.l 4(a0),a0
    9a78:	|  |  |  |      move.l 36(sp),d0
    9a7c:	|  |  |  |      add.l d0,d0
    9a7e:	|  |  |  |      add.l d0,d0
    9a80:	|  |  |  |      adda.l d0,a0
    9a82:	|  |  |  |      move.l (a0),d0
    9a84:	|  |  |  |      lsl.l #3,d0
    9a86:	|  |  |  |      movea.l d1,a0
    9a88:	|  |  |  |      adda.l d0,a0
    9a8a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    9a90:	|  |  |  |      movea.l 68(sp),a0
    9a94:	|  |  |  |      move.l (a0),d1
    9a96:	|  |  |  |      movea.l 64(sp),a0
    9a9a:	|  |  |  |      move.l (a0),d0
    9a9c:	|  |  |  |      move.l d1,-(sp)
    9a9e:	|  |  |  |      move.l d0,-(sp)
    9aa0:	|  |  |  |      move.l 24(sp),-(sp)
    9aa4:	|  |  |  |      move.l 32(sp),-(sp)
    9aa8:	|  |  |  |      move.l 40(sp),-(sp)
    9aac:	|  |  |  |      move.l 48(sp),-(sp)
    9ab0:	|  |  |  |      lea 28(sp),a0
    9ab4:	|  |  |  |      move.l a0,-(sp)
    9ab6:	|  |  |  |      lea 36(sp),a0
    9aba:	|  |  |  |      move.l a0,-(sp)
    9abc:	|  |  |  |      jsr 150d4 <closestPointOnLine>
    9ac2:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    9ac6:	|  |  |  |      movea.l 64(sp),a0
    9aca:	|  |  |  |      move.l (a0),d0
    9acc:	|  |  |  |      move.l 8(sp),d1
    9ad0:	|  |  |  |      move.l d0,d2
    9ad2:	|  |  |  |      sub.l d1,d2
    9ad4:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    9ad8:	|  |  |  |      movea.l 68(sp),a0
    9adc:	|  |  |  |      move.l (a0),d0
    9ade:	|  |  |  |      move.l 4(sp),d1
    9ae2:	|  |  |  |      move.l d0,d2
    9ae4:	|  |  |  |      sub.l d1,d2
    9ae6:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    9aea:	|  |  |  |      move.l 28(sp),-(sp)
    9aee:	|  |  |  |      move.l 32(sp),-(sp)
    9af2:	|  |  |  |      jsr 16aae <__mulsi3>
    9af8:	|  |  |  |      addq.l #8,sp
    9afa:	|  |  |  |      move.l d0,d2
    9afc:	|  |  |  |      move.l 24(sp),-(sp)
    9b00:	|  |  |  |      move.l 28(sp),-(sp)
    9b04:	|  |  |  |      jsr 16aae <__mulsi3>
    9b0a:	|  |  |  |      addq.l #8,sp
    9b0c:	|  |  |  |      move.l d2,d1
    9b0e:	|  |  |  |      add.l d0,d1
    9b10:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    9b14:	|  |  |  |      move.l 12(sp),d2
    9b18:	|  |  |  |      cmp.l 32(sp),d2
    9b1c:	|  |  |  |  /-- bge.s 9b36 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    9b1e:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    9b24:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    9b2a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    9b30:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    9b36:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9b3c:	|  |  |  |      addq.l #1,40(sp)
    9b40:	|  |  |  \----> movea.l 1b9bc <currentFloor>,a0
    9b46:	|  |  |         move.l 12(a0),d1
    9b4a:	|  |  |         move.l 44(sp),d0
    9b4e:	|  |  |         lsl.l #3,d0
    9b50:	|  |  |         movea.l d1,a0
    9b52:	|  |  |         adda.l d0,a0
    9b54:	|  |  |         move.l (a0),d0
    9b56:	|  |  |         cmp.l 40(sp),d0
    9b5a:	|  |  \-------- bgt.w 99b4 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9b5e:	|  |            addq.l #1,44(sp)
    9b62:	|  \----------> movea.l 1b9bc <currentFloor>,a0
    9b68:	|               move.l 8(a0),d0
    9b6c:	|               cmp.l 44(sp),d0
    9b70:	\-------------- bgt.w 998e <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    9b74:	                moveq #-1,d0
    9b76:	                cmp.l 48(sp),d0
    9b7a:	            /-- bne.s 9b80 <handleClosestPoint+0x21e>
    9b7c:	            |   clr.w d0
    9b7e:	         /--|-- bra.s 9b9a <handleClosestPoint+0x238>
	*setX = gotX;
    9b80:	         |  \-> movea.l 64(sp),a0
    9b84:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    9b88:	         |      movea.l 68(sp),a0
    9b8c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    9b90:	         |      movea.l 72(sp),a0
    9b94:	         |      move.l 48(sp),(a0)

	return TRUE;
    9b98:	         |      moveq #1,d0
}
    9b9a:	         \----> move.l (sp)+,d2
    9b9c:	                lea 56(sp),sp
    9ba0:	                rts

00009ba2 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    9ba2:	clr.l 1b914 <personRegion+0x10>
	personRegion.sY = 0;
    9ba8:	clr.l 1b918 <personRegion+0x14>
	personRegion.di = -1;
    9bae:	moveq #-1,d0
    9bb0:	move.l d0,1b91c <personRegion+0x18>
	allScreenRegions = NULL;
    9bb6:	clr.l 1b9b0 <allScreenRegions>

	return TRUE;
    9bbc:	moveq #1,d0
}
    9bbe:	rts

00009bc0 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    9bc0:	          subq.l #4,sp
    9bc2:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    9bc4:	          tst.l 12(sp)
    9bc8:	      /-- bne.s 9bd0 <jumpPerson+0x10>
    9bca:	      |   tst.l 16(sp)
    9bce:	/-----|-- beq.s 9c44 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9bd0:	|     \-> move.l 20(sp),-(sp)
    9bd4:	|         jsr 9866 <findPerson>
    9bda:	|         addq.l #4,sp
    9bdc:	|         move.l d0,4(sp)
    if (!moveMe) return;
    9be0:	|  /----- beq.s 9c48 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9be2:	|  |      movea.l 4(sp),a0
    9be6:	|  |      move.l 68(a0),d0
    9bea:	|  |  /-- beq.s 9bfe <jumpPerson+0x3e>
    9bec:	|  |  |   movea.l 4(sp),a0
    9bf0:	|  |  |   move.l 68(a0),d0
    9bf4:	|  |  |   move.l d0,-(sp)
    9bf6:	|  |  |   jsr 3766 <abortFunction>
    9bfc:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    9bfe:	|  |  \-> movea.l 4(sp),a0
    9c02:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    9c06:	|  |      movea.l 4(sp),a0
    9c0a:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    9c0e:	|  |      movea.l 4(sp),a0
    9c12:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    9c16:	|  |      move.l 16(sp),-(sp)
    9c1a:	|  |      jsr 1652c <__floatsisf>
    9c20:	|  |      addq.l #4,sp
    9c22:	|  |      move.l d0,d2
    9c24:	|  |      move.l 12(sp),-(sp)
    9c28:	|  |      jsr 1652c <__floatsisf>
    9c2e:	|  |      addq.l #4,sp
    9c30:	|  |      move.l d2,-(sp)
    9c32:	|  |      move.l d0,-(sp)
    9c34:	|  |      move.l 12(sp),-(sp)
    9c38:	|  |      jsr 9fae <moveAndScale>
    9c3e:	|  |      lea 12(sp),sp
    9c42:	|  |  /-- bra.s 9c4a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    9c44:	\--|--|-> nop
    9c46:	   |  +-- bra.s 9c4a <jumpPerson+0x8a>
    if (!moveMe) return;
    9c48:	   \--|-> nop
}
    9c4a:	      \-> move.l (sp)+,d2
    9c4c:	          addq.l #4,sp
    9c4e:	          rts

00009c50 <killAllPeople>:


void killAllPeople () {
    9c50:	          subq.l #8,sp
    9c52:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9c54:	   /----- bra.s 9cc0 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    9c56:	/--|----> movea.l 1b900 <allPeople>,a0
    9c5c:	|  |      move.l 68(a0),d0
    9c60:	|  |  /-- beq.s 9c76 <killAllPeople+0x26>
    9c62:	|  |  |   movea.l 1b900 <allPeople>,a0
    9c68:	|  |  |   move.l 68(a0),d0
    9c6c:	|  |  |   move.l d0,-(sp)
    9c6e:	|  |  |   jsr 3766 <abortFunction>
    9c74:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    9c76:	|  |  \-> movea.l 1b900 <allPeople>,a0
    9c7c:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    9c80:	|  |      move.l 1b900 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    9c88:	|  |      movea.l 1b900 <allPeople>,a0
    9c8e:	|  |      move.l 36(a0),d0
    9c92:	|  |      move.l d0,1b900 <allPeople>
		removeObjectType (killPeople -> thisType);
    9c98:	|  |      movea.l 8(sp),a0
    9c9c:	|  |      move.l 114(a0),d0
    9ca0:	|  |      move.l d0,-(sp)
    9ca2:	|  |      jsr cae8 <removeObjectType>
    9ca8:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    9caa:	|  |      move.l 8(sp),4(sp)
    9cb0:	|  |      move.l 1b848 <SysBase>,d0
    9cb6:	|  |      movea.l d0,a6
    9cb8:	|  |      movea.l 4(sp),a1
    9cbc:	|  |      jsr -690(a6)
	while (allPeople) {
    9cc0:	|  \----> move.l 1b900 <allPeople>,d0
    9cc6:	\-------- bne.s 9c56 <killAllPeople+0x6>
	}
}
    9cc8:	          nop
    9cca:	          nop
    9ccc:	          movea.l (sp)+,a6
    9cce:	          addq.l #8,sp
    9cd0:	          rts

00009cd2 <killMostPeople>:

void killMostPeople() {
    9cd2:	          lea -12(sp),sp
    9cd6:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9cd8:	          move.l #112896,12(sp)

    while (*lookyHere) {
    9ce0:	   /----- bra.w 9d66 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9ce4:	/--|----> movea.l 12(sp),a0
    9ce8:	|  |      movea.l (a0),a0
    9cea:	|  |      move.l 118(a0),d0
    9cee:	|  |      moveq #32,d1
    9cf0:	|  |      and.l d1,d0
    9cf2:	|  |  /-- beq.s 9d04 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9cf4:	|  |  |   movea.l 12(sp),a0
    9cf8:	|  |  |   move.l (a0),d0
    9cfa:	|  |  |   moveq #36,d1
    9cfc:	|  |  |   add.l d0,d1
    9cfe:	|  |  |   move.l d1,12(sp)
    9d02:	|  +--|-- bra.s 9d66 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9d04:	|  |  \-> movea.l 12(sp),a0
    9d08:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9d0c:	|  |      movea.l 8(sp),a0
    9d10:	|  |      move.l 36(a0),d0
    9d14:	|  |      movea.l 12(sp),a0
    9d18:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    9d1a:	|  |      movea.l 8(sp),a0
    9d1e:	|  |      move.l 68(a0),d0
    9d22:	|  |  /-- beq.s 9d36 <killMostPeople+0x64>
    9d24:	|  |  |   movea.l 8(sp),a0
    9d28:	|  |  |   move.l 68(a0),d0
    9d2c:	|  |  |   move.l d0,-(sp)
    9d2e:	|  |  |   jsr 3766 <abortFunction>
    9d34:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    9d36:	|  |  \-> movea.l 8(sp),a0
    9d3a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    9d3e:	|  |      movea.l 8(sp),a0
    9d42:	|  |      move.l 114(a0),d0
    9d46:	|  |      move.l d0,-(sp)
    9d48:	|  |      jsr cae8 <removeObjectType>
    9d4e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9d50:	|  |      move.l 8(sp),4(sp)
    9d56:	|  |      move.l 1b848 <SysBase>,d0
    9d5c:	|  |      movea.l d0,a6
    9d5e:	|  |      movea.l 4(sp),a1
    9d62:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9d66:	|  \----> movea.l 12(sp),a0
    9d6a:	|         move.l (a0),d0
    9d6c:	\-------- bne.w 9ce4 <killMostPeople+0x12>
        }
    }
}
    9d70:	          nop
    9d72:	          nop
    9d74:	          movea.l (sp)+,a6
    9d76:	          lea 12(sp),sp
    9d7a:	          rts

00009d7c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9d7c:	clr.l -(sp)
    9d7e:	move.l sp,d0
    9d80:	addq.l #8,d0
    9d82:	move.l d0,-(sp)
    9d84:	jsr 71b0 <setFrames>
    9d8a:	addq.l #8,sp
}
    9d8c:	nop
    9d8e:	rts

00009d90 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9d90:	          lea -12(sp),sp
    9d94:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9d96:	          tst.l 20(sp)
    9d9a:	      /-- bne.s 9da8 <makeWalkingPerson+0x18>
    9d9c:	      |   tst.l 24(sp)
    9da0:	      +-- bne.s 9da8 <makeWalkingPerson+0x18>
    9da2:	      |   clr.w d0
    9da4:	/-----|-- bra.w 9f40 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9da8:	|     \-> movea.l 1b9bc <currentFloor>,a0
    9dae:	|         move.l 8(a0),d0
    9db2:	|     /-- bne.s 9dba <makeWalkingPerson+0x2a>
    9db4:	|     |   clr.w d0
    9db6:	+-----|-- bra.w 9f40 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9dba:	|     \-> move.l 28(sp),-(sp)
    9dbe:	|         jsr 9866 <findPerson>
    9dc4:	|         addq.l #4,sp
    9dc6:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9dca:	|     /-- bne.s 9dd2 <makeWalkingPerson+0x42>
    9dcc:	|     |   clr.w d0
    9dce:	+-----|-- bra.w 9f40 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9dd2:	|     \-> movea.l 12(sp),a0
    9dd6:	|         move.l 68(a0),d0
    9dda:	|     /-- beq.s 9dee <makeWalkingPerson+0x5e>
    9ddc:	|     |   movea.l 12(sp),a0
    9de0:	|     |   move.l 68(a0),d0
    9de4:	|     |   move.l d0,-(sp)
    9de6:	|     |   jsr 3766 <abortFunction>
    9dec:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9dee:	|     \-> movea.l 12(sp),a0
    9df2:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    9df6:	|         movea.l 12(sp),a0
    9dfa:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    9e00:	|         movea.l 12(sp),a0
    9e04:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    9e0a:	|         movea.l 12(sp),a0
    9e0e:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    9e14:	|         movea.l 12(sp),a0
    9e18:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9e1e:	|         move.l 24(sp),-(sp)
    9e22:	|         move.l 24(sp),-(sp)
    9e26:	|         jsr 155d6 <inFloor>
    9e2c:	|         addq.l #8,sp
    9e2e:	|         movea.l 12(sp),a0
    9e32:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    9e36:	|         movea.l 12(sp),a0
    9e3a:	|         move.l 60(a0),d0
    9e3e:	|         moveq #-1,d1
    9e40:	|         cmp.l d0,d1
    9e42:	|     /-- bne.s 9e72 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9e44:	|     |   movea.w #60,a0
    9e48:	|     |   adda.l 12(sp),a0
    9e4c:	|     |   moveq #44,d1
    9e4e:	|     |   add.l 12(sp),d1
    9e52:	|     |   moveq #40,d0
    9e54:	|     |   add.l 12(sp),d0
    9e58:	|     |   move.l a0,-(sp)
    9e5a:	|     |   move.l d1,-(sp)
    9e5c:	|     |   move.l d0,-(sp)
    9e5e:	|     |   jsr 9962 <handleClosestPoint>
    9e64:	|     |   lea 12(sp),sp
    9e68:	|     |   tst.w d0
    9e6a:	|     +-- bne.s 9e72 <makeWalkingPerson+0xe2>
    9e6c:	|     |   clr.w d0
    9e6e:	+-----|-- bra.w 9f40 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9e72:	|     \-> movea.l 12(sp),a0
    9e76:	|         move.l 4(a0),d0
    9e7a:	|         move.l d0,-(sp)
    9e7c:	|         jsr 164c4 <__fixsfsi>
    9e82:	|         addq.l #4,sp
    9e84:	|         move.l d0,d2
    9e86:	|         movea.l 12(sp),a0
    9e8a:	|         move.l (a0),d0
    9e8c:	|         move.l d0,-(sp)
    9e8e:	|         jsr 164c4 <__fixsfsi>
    9e94:	|         addq.l #4,sp
    9e96:	|         move.l d2,-(sp)
    9e98:	|         move.l d0,-(sp)
    9e9a:	|         jsr 155d6 <inFloor>
    9ea0:	|         addq.l #8,sp
    9ea2:	|         movea.l 12(sp),a0
    9ea6:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    9eaa:	|         movea.l 12(sp),a0
    9eae:	|         move.l 56(a0),d0
    9eb2:	|         moveq #-1,d1
    9eb4:	|         cmp.l d0,d1
    9eb6:	|     /-- bne.s 9f08 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9eb8:	|     |   movea.l 12(sp),a0
    9ebc:	|     |   move.l (a0),d0
    9ebe:	|     |   move.l d0,-(sp)
    9ec0:	|     |   jsr 164c4 <__fixsfsi>
    9ec6:	|     |   addq.l #4,sp
    9ec8:	|     |   move.l d0,8(sp)
    9ecc:	|     |   movea.l 12(sp),a0
    9ed0:	|     |   move.l 4(a0),d0
    9ed4:	|     |   move.l d0,-(sp)
    9ed6:	|     |   jsr 164c4 <__fixsfsi>
    9edc:	|     |   addq.l #4,sp
    9ede:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9ee2:	|     |   moveq #56,d0
    9ee4:	|     |   add.l 12(sp),d0
    9ee8:	|     |   move.l d0,-(sp)
    9eea:	|     |   lea 8(sp),a0
    9eee:	|     |   move.l a0,-(sp)
    9ef0:	|     |   moveq #16,d0
    9ef2:	|     |   add.l sp,d0
    9ef4:	|     |   move.l d0,-(sp)
    9ef6:	|     |   jsr 9962 <handleClosestPoint>
    9efc:	|     |   lea 12(sp),sp
    9f00:	|     |   tst.w d0
    9f02:	|     +-- bne.s 9f08 <makeWalkingPerson+0x178>
    9f04:	|     |   clr.w d0
    9f06:	+-----|-- bra.s 9f40 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9f08:	|     \-> move.l 12(sp),-(sp)
    9f0c:	|         jsr 8bc8 <doBorderStuff>
    9f12:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9f14:	|         clr.l -(sp)
    9f16:	|         move.l 16(sp),-(sp)
    9f1a:	|         jsr b128 <walkMe>
    9f20:	|         addq.l #8,sp
    9f22:	|         tst.w d0
    9f24:	|     /-- bne.s 9f30 <makeWalkingPerson+0x1a0>
    9f26:	|     |   movea.l 12(sp),a0
    9f2a:	|     |   move.w 66(a0),d0
    9f2e:	|  /--|-- beq.s 9f3e <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9f30:	|  |  \-> movea.l 12(sp),a0
    9f34:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    9f3a:	|  |      moveq #1,d0
    9f3c:	+--|----- bra.s 9f40 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9f3e:	|  \----> clr.w d0
	}
}
    9f40:	\-------> move.l (sp)+,d2
    9f42:	          lea 12(sp),sp
    9f46:	          rts

00009f48 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9f48:	       lea -16(sp),sp
    9f4c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9f4e:	       moveq #12,d0
    9f50:	       move.l d0,16(sp)
    9f54:	       clr.l 12(sp)
    9f58:	       move.l 1b848 <SysBase>,d0
    9f5e:	       movea.l d0,a6
    9f60:	       move.l 16(sp),d0
    9f64:	       move.l 12(sp),d1
    9f68:	       jsr -684(a6)
    9f6c:	       move.l d0,8(sp)
    9f70:	       move.l 8(sp),d0
    9f74:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9f78:	   /-- bne.s 9f8c <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9f7a:	   |   pea 1807e <PutChar+0x14ba>
    9f80:	   |   jsr 16274 <KPrintF>
    9f86:	   |   addq.l #4,sp
        return NULL;    
    9f88:	   |   moveq #0,d0
    9f8a:	/--|-- bra.s 9fa6 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9f8c:	|  \-> movea.l 4(sp),a0
    9f90:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9f92:	|      movea.l 4(sp),a0
    9f96:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9f9a:	|      movea.l 4(sp),a0
    9f9e:	|      clr.l 4(a0)
	return newAnim;
    9fa2:	|      move.l 4(sp),d0
}
    9fa6:	\----> movea.l (sp)+,a6
    9fa8:	       lea 16(sp),sp
    9fac:	       rts

00009fae <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9fae:	    move.l d2,-(sp)
	me->x = x;
    9fb0:	    movea.l 8(sp),a0
    9fb4:	    move.l 12(sp),(a0)
	me->y = y;
    9fb8:	    movea.l 8(sp),a0
    9fbc:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    9fc2:	    movea.l 8(sp),a0
    9fc6:	    clr.l 8(a0)
	me->oldy = 0;
    9fca:	    movea.l 8(sp),a0
    9fce:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9fd2:	    movea.l 8(sp),a0
    9fd6:	    move.l 118(a0),d0
    9fda:	    moveq #2,d1
    9fdc:	    and.l d1,d0
    9fde:	/-- bne.s a036 <moveAndScale+0x88>
    9fe0:	|   move.w 1b1de <scaleDivide>,d0
    9fe6:	+-- beq.s a036 <moveAndScale+0x88>
    9fe8:	|   movea.l 8(sp),a0
    9fec:	|   move.l 4(a0),d2
    9ff0:	|   move.w 1b1dc <scaleHorizon>,d0
    9ff6:	|   movea.w d0,a0
    9ff8:	|   move.l a0,-(sp)
    9ffa:	|   jsr 1652c <__floatsisf>
    a000:	|   addq.l #4,sp
    a002:	|   move.l d0,-(sp)
    a004:	|   move.l d2,-(sp)
    a006:	|   jsr 16820 <__subsf3>
    a00c:	|   addq.l #8,sp
    a00e:	|   move.l d0,d2
    a010:	|   move.w 1b1de <scaleDivide>,d0
    a016:	|   movea.w d0,a0
    a018:	|   move.l a0,-(sp)
    a01a:	|   jsr 1652c <__floatsisf>
    a020:	|   addq.l #4,sp
    a022:	|   move.l d0,-(sp)
    a024:	|   move.l d2,-(sp)
    a026:	|   jsr 163d8 <__divsf3>
    a02c:	|   addq.l #8,sp
    a02e:	|   movea.l 8(sp),a0
    a032:	|   move.l d0,32(a0)
}
    a036:	\-> nop
    a038:	    move.l (sp)+,d2
    a03a:	    rts

0000a03c <removeOneCharacter>:

void removeOneCharacter (int i) {
    a03c:	          lea -16(sp),sp
    a040:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    a042:	          move.l 24(sp),-(sp)
    a046:	          jsr 9866 <findPerson>
    a04c:	          addq.l #4,sp
    a04e:	          move.l d0,8(sp)

    if (p) {
    a052:	/-------- beq.w a132 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    a056:	|         move.l 1b9b4 <overRegion>,d0
    a05c:	|         cmpi.l #112900,d0
    a062:	|     /-- bne.s a080 <removeOneCharacter+0x44>
    a064:	|     |   movea.l 1b9b4 <overRegion>,a0
    a06a:	|     |   move.l 28(a0),d1
    a06e:	|     |   movea.l 8(sp),a0
    a072:	|     |   move.l 114(a0),d0
    a076:	|     |   cmp.l d1,d0
    a078:	|     +-- bne.s a080 <removeOneCharacter+0x44>
            overRegion = NULL;
    a07a:	|     |   clr.l 1b9b4 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    a080:	|     \-> movea.l 8(sp),a0
    a084:	|         move.l 68(a0),d0
    a088:	|     /-- beq.s a09c <removeOneCharacter+0x60>
    a08a:	|     |   movea.l 8(sp),a0
    a08e:	|     |   move.l 68(a0),d0
    a092:	|     |   move.l d0,-(sp)
    a094:	|     |   jsr 3766 <abortFunction>
    a09a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    a09c:	|     \-> movea.l 8(sp),a0
    a0a0:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    a0a4:	|         clr.l 12(sp)
    a0a8:	|     /-- bra.s a0d0 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    a0aa:	|  /--|-> movea.l 8(sp),a0
    a0ae:	|  |  |   movea.l 80(a0),a0
    a0b2:	|  |  |   move.l (a0),d1
    a0b4:	|  |  |   move.l 12(sp),d0
    a0b8:	|  |  |   add.l d0,d0
    a0ba:	|  |  |   add.l d0,d0
    a0bc:	|  |  |   movea.l d1,a0
    a0be:	|  |  |   adda.l d0,a0
    a0c0:	|  |  |   move.l (a0),d0
    a0c2:	|  |  |   move.l d0,-(sp)
    a0c4:	|  |  |   jsr 8b44 <deleteAnim>
    a0ca:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    a0cc:	|  |  |   addq.l #1,12(sp)
    a0d0:	|  |  \-> moveq #2,d0
    a0d2:	|  |      cmp.l 12(sp),d0
    a0d6:	|  \----- bge.s a0aa <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    a0d8:	|         move.l #112896,16(sp)
    a0e0:	|     /-- bra.s a0f0 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    a0e2:	|  /--|-> movea.l 16(sp),a0
    a0e6:	|  |  |   move.l (a0),d0
    a0e8:	|  |  |   moveq #36,d1
    a0ea:	|  |  |   add.l d0,d1
    a0ec:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    a0f0:	|  |  \-> movea.l 16(sp),a0
    a0f4:	|  |      move.l (a0),d0
    a0f6:	|  |      cmp.l 8(sp),d0
    a0fa:	|  \----- bne.s a0e2 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    a0fc:	|         movea.l 8(sp),a0
    a100:	|         move.l 36(a0),d0
    a104:	|         movea.l 16(sp),a0
    a108:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    a10a:	|         movea.l 8(sp),a0
    a10e:	|         move.l 114(a0),d0
    a112:	|         move.l d0,-(sp)
    a114:	|         jsr cae8 <removeObjectType>
    a11a:	|         addq.l #4,sp
        FreeVec(p);
    a11c:	|         move.l 8(sp),4(sp)
    a122:	|         move.l 1b848 <SysBase>,d0
    a128:	|         movea.l d0,a6
    a12a:	|         movea.l 4(sp),a1
    a12e:	|         jsr -690(a6)
    }
}
    a132:	\-------> nop
    a134:	          movea.l (sp)+,a6
    a136:	          lea 16(sp),sp
    a13a:	          rts

0000a13c <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    a13c:	       subq.l #8,sp
    a13e:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    a140:	       movea.l 16(sp),a0
    a144:	       movea.l 80(a0),a0
    a148:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    a14e:	       movea.l 16(sp),a0
    a152:	       move.l 92(a0),d2
    a156:	       move.l 4(sp),-(sp)
    a15a:	       pea b4 <_start+0xb4>
    a15e:	       jsr 16b2c <__divsi3>
    a164:	       addq.l #8,sp
    a166:	       add.l d2,d0
    a168:	       move.l d0,d1
    a16a:	       addi.l #180,d1
    a170:	       movea.l 16(sp),a0
    a174:	       move.l 100(a0),d0
    a178:	       move.l d1,d2
    a17a:	       add.l d0,d2
    a17c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    a180:	   /-- bra.s a18a <rethinkAngle+0x4e>
    a182:	/--|-> addi.l #-360,8(sp)
    a18a:	|  \-> cmpi.l #359,8(sp)
    a192:	\----- bgt.s a182 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    a194:	       move.l 4(sp),-(sp)
    a198:	       move.l 12(sp),-(sp)
    a19c:	       jsr 16aae <__mulsi3>
    a1a2:	       addq.l #8,sp
    a1a4:	       pea 168 <decodeFilename+0x50>
    a1a8:	       move.l d0,-(sp)
    a1aa:	       jsr 16b2c <__divsi3>
    a1b0:	       addq.l #8,sp
    a1b2:	       movea.l 16(sp),a0
    a1b6:	       move.l d0,106(a0)
}
    a1ba:	       nop
    a1bc:	       move.l (sp)+,d2
    a1be:	       addq.l #8,sp
    a1c0:	       rts

0000a1c2 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    a1c2:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    a1c4:	          movea.l 8(sp),a0
    a1c8:	          move.l 8(a0),d0
    a1cc:	          move.l 12(sp),-(sp)
    a1d0:	          move.l d0,-(sp)
    a1d2:	          jsr 8d0 <put2bytes>
    a1d8:	          addq.l #8,sp
	if (p -> numFrames) {
    a1da:	          movea.l 8(sp),a0
    a1de:	          move.l 8(a0),d0
    a1e2:	/-------- beq.w a286 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    a1e6:	|         movea.l 8(sp),a0
    a1ea:	|         movea.l (a0),a0
    a1ec:	|         move.l (a0),d0
    a1ee:	|         move.l 12(sp),-(sp)
    a1f2:	|         move.l d0,-(sp)
    a1f4:	|         jsr 958 <put4bytes>
    a1fa:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    a1fc:	|         clr.l (sp)
    a1fe:	|     /-- bra.s a278 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    a200:	|  /--|-> movea.l 8(sp),a0
    a204:	|  |  |   movea.l 4(a0),a0
    a208:	|  |  |   move.l (sp),d1
    a20a:	|  |  |   move.l d1,d0
    a20c:	|  |  |   add.l d0,d0
    a20e:	|  |  |   add.l d1,d0
    a210:	|  |  |   add.l d0,d0
    a212:	|  |  |   add.l d0,d0
    a214:	|  |  |   adda.l d0,a0
    a216:	|  |  |   move.l (a0),d0
    a218:	|  |  |   move.l 12(sp),-(sp)
    a21c:	|  |  |   move.l d0,-(sp)
    a21e:	|  |  |   jsr 958 <put4bytes>
    a224:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    a226:	|  |  |   movea.l 8(sp),a0
    a22a:	|  |  |   movea.l 4(a0),a0
    a22e:	|  |  |   move.l (sp),d1
    a230:	|  |  |   move.l d1,d0
    a232:	|  |  |   add.l d0,d0
    a234:	|  |  |   add.l d1,d0
    a236:	|  |  |   add.l d0,d0
    a238:	|  |  |   add.l d0,d0
    a23a:	|  |  |   adda.l d0,a0
    a23c:	|  |  |   move.l 4(a0),d0
    a240:	|  |  |   move.l 12(sp),-(sp)
    a244:	|  |  |   move.l d0,-(sp)
    a246:	|  |  |   jsr 958 <put4bytes>
    a24c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    a24e:	|  |  |   movea.l 8(sp),a0
    a252:	|  |  |   movea.l 4(a0),a0
    a256:	|  |  |   move.l (sp),d1
    a258:	|  |  |   move.l d1,d0
    a25a:	|  |  |   add.l d0,d0
    a25c:	|  |  |   add.l d1,d0
    a25e:	|  |  |   add.l d0,d0
    a260:	|  |  |   add.l d0,d0
    a262:	|  |  |   adda.l d0,a0
    a264:	|  |  |   move.l 8(a0),d0
    a268:	|  |  |   move.l 12(sp),-(sp)
    a26c:	|  |  |   move.l d0,-(sp)
    a26e:	|  |  |   jsr 958 <put4bytes>
    a274:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    a276:	|  |  |   addq.l #1,(sp)
    a278:	|  |  \-> movea.l 8(sp),a0
    a27c:	|  |      move.l 8(a0),d0
    a280:	|  |      cmp.l (sp),d0
    a282:	|  \----- bgt.w a200 <saveAnim+0x3e>
		}
	}
	return TRUE;
    a286:	\-------> moveq #1,d0
}
    a288:	          addq.l #4,sp
    a28a:	          rts

0000a28c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    a28c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    a28e:	             movea.l 8(sp),a0
    a292:	             move.l 4(a0),d0
    a296:	             move.l 12(sp),-(sp)
    a29a:	             move.l d0,-(sp)
    a29c:	             jsr 8d0 <put2bytes>
    a2a2:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a2a4:	             clr.l (sp)
    a2a6:	   /-------- bra.s a2d2 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    a2a8:	/--|-------> movea.l 8(sp),a0
    a2ac:	|  |         move.l (a0),d1
    a2ae:	|  |         move.l (sp),d0
    a2b0:	|  |         add.l d0,d0
    a2b2:	|  |         add.l d0,d0
    a2b4:	|  |         movea.l d1,a0
    a2b6:	|  |         adda.l d0,a0
    a2b8:	|  |         move.l (a0),d0
    a2ba:	|  |         move.l 12(sp),-(sp)
    a2be:	|  |         move.l d0,-(sp)
    a2c0:	|  |         jsr a1c2 <saveAnim>
    a2c6:	|  |         addq.l #8,sp
    a2c8:	|  |         tst.w d0
    a2ca:	|  |     /-- bne.s a2d0 <saveCostume+0x44>
    a2cc:	|  |     |   clr.w d0
    a2ce:	|  |  /--|-- bra.s a2e6 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a2d0:	|  |  |  \-> addq.l #1,(sp)
    a2d2:	|  \--|----> movea.l 8(sp),a0
    a2d6:	|     |      move.l 4(a0),d1
    a2da:	|     |      move.l d1,d0
    a2dc:	|     |      add.l d0,d0
    a2de:	|     |      add.l d1,d0
    a2e0:	|     |      cmp.l (sp),d0
    a2e2:	\-----|----- bgt.s a2a8 <saveCostume+0x1c>
	}

	return TRUE;
    a2e4:	      |      moveq #1,d0
}
    a2e6:	      \----> addq.l #4,sp
    a2e8:	             rts

0000a2ea <savePeople>:

BOOL savePeople (BPTR fp) {
    a2ea:	             lea -144(sp),sp
    a2ee:	             move.l a6,-(sp)
    a2f0:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a2f2:	             move.l 1b900 <allPeople>,148(sp)
	int countPeople = 0, a;
    a2fa:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a2fe:	             move.w 1b1dc <scaleHorizon>,d0
    a304:	             movea.w d0,a0
    a306:	             move.l 156(sp),-(sp)
    a30a:	             move.l a0,-(sp)
    a30c:	             jsr a9c <putSigned>
    a312:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a314:	             move.w 1b1de <scaleDivide>,d0
    a31a:	             movea.w d0,a0
    a31c:	             move.l 156(sp),-(sp)
    a320:	             move.l a0,-(sp)
    a322:	             jsr a9c <putSigned>
    a328:	             addq.l #8,sp

	while (me) {
    a32a:	         /-- bra.s a33a <savePeople+0x50>
		countPeople ++;
    a32c:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a330:	      |  |   movea.l 148(sp),a0
    a334:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    a33a:	      |  \-> tst.l 148(sp)
    a33e:	      \----- bne.s a32c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a340:	             move.l 156(sp),-(sp)
    a344:	             move.l 148(sp),-(sp)
    a348:	             jsr 8d0 <put2bytes>
    a34e:	             addq.l #8,sp

	me = allPeople;
    a350:	             move.l 1b900 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a358:	             clr.l 140(sp)
    a35c:	   /-------- bra.w a7b4 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a360:	/--|-------> movea.l 148(sp),a0
    a364:	|  |         move.l (a0),d0
    a366:	|  |         move.l 156(sp),-(sp)
    a36a:	|  |         move.l d0,-(sp)
    a36c:	|  |         jsr a46 <putFloat>
    a372:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a374:	|  |         movea.l 148(sp),a0
    a378:	|  |         move.l 4(a0),d0
    a37c:	|  |         move.l 156(sp),-(sp)
    a380:	|  |         move.l d0,-(sp)
    a382:	|  |         jsr a46 <putFloat>
    a388:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a38a:	|  |         movea.l 148(sp),a0
    a38e:	|  |         move.l 80(a0),d0
    a392:	|  |         move.l 156(sp),-(sp)
    a396:	|  |         move.l d0,-(sp)
    a398:	|  |         jsr a28c <saveCostume>
    a39e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a3a0:	|  |         movea.l 148(sp),a0
    a3a4:	|  |         move.l 72(a0),d0
    a3a8:	|  |         move.l 156(sp),-(sp)
    a3ac:	|  |         move.l d0,-(sp)
    a3ae:	|  |         jsr a1c2 <saveAnim>
    a3b4:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a3b6:	|  |         move.l 156(sp),136(sp)
    a3bc:	|  |         movea.l 148(sp),a0
    a3c0:	|  |         move.l 72(a0),d1
    a3c4:	|  |         movea.l 148(sp),a0
    a3c8:	|  |         move.l 76(a0),d0
    a3cc:	|  |         cmp.l d1,d0
    a3ce:	|  |         seq d0
    a3d0:	|  |         neg.b d0
    a3d2:	|  |         move.b d0,d0
    a3d4:	|  |         andi.l #255,d0
    a3da:	|  |         move.l d0,132(sp)
    a3de:	|  |         move.l 1b850 <DOSBase>,d0
    a3e4:	|  |         movea.l d0,a6
    a3e6:	|  |         move.l 136(sp),d1
    a3ea:	|  |         move.l 132(sp),d2
    a3ee:	|  |         jsr -312(a6)
    a3f2:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a3f6:	|  |         movea.l 148(sp),a0
    a3fa:	|  |         move.l 32(a0),d0
    a3fe:	|  |         move.l 156(sp),-(sp)
    a402:	|  |         move.l d0,-(sp)
    a404:	|  |         jsr a46 <putFloat>
    a40a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a40c:	|  |         movea.l 148(sp),a0
    a410:	|  |         move.l 118(a0),d0
    a414:	|  |         move.l 156(sp),-(sp)
    a418:	|  |         move.l d0,-(sp)
    a41a:	|  |         jsr 8d0 <put2bytes>
    a420:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a422:	|  |         movea.l 148(sp),a0
    a426:	|  |         move.l 20(a0),d0
    a42a:	|  |         move.l 156(sp),-(sp)
    a42e:	|  |         move.l d0,-(sp)
    a430:	|  |         jsr 8d0 <put2bytes>
    a436:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a438:	|  |         movea.l 148(sp),a0
    a43c:	|  |         move.l 40(a0),d0
    a440:	|  |         move.l 156(sp),-(sp)
    a444:	|  |         move.l d0,-(sp)
    a446:	|  |         jsr 8d0 <put2bytes>
    a44c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a44e:	|  |         movea.l 148(sp),a0
    a452:	|  |         move.l 44(a0),d0
    a456:	|  |         move.l 156(sp),-(sp)
    a45a:	|  |         move.l d0,-(sp)
    a45c:	|  |         jsr 8d0 <put2bytes>
    a462:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a464:	|  |         movea.l 148(sp),a0
    a468:	|  |         move.l 48(a0),d0
    a46c:	|  |         move.l 156(sp),-(sp)
    a470:	|  |         move.l d0,-(sp)
    a472:	|  |         jsr 8d0 <put2bytes>
    a478:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a47a:	|  |         movea.l 148(sp),a0
    a47e:	|  |         move.l 52(a0),d0
    a482:	|  |         move.l 156(sp),-(sp)
    a486:	|  |         move.l d0,-(sp)
    a488:	|  |         jsr 8d0 <put2bytes>
    a48e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a490:	|  |         movea.l 148(sp),a0
    a494:	|  |         move.l 84(a0),d0
    a498:	|  |         move.l 156(sp),-(sp)
    a49c:	|  |         move.l d0,-(sp)
    a49e:	|  |         jsr 8d0 <put2bytes>
    a4a4:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a4a6:	|  |         movea.l 148(sp),a0
    a4aa:	|  |         move.l 88(a0),d0
    a4ae:	|  |         move.l 156(sp),-(sp)
    a4b2:	|  |         move.l d0,-(sp)
    a4b4:	|  |         jsr 8d0 <put2bytes>
    a4ba:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a4bc:	|  |         movea.l 148(sp),a0
    a4c0:	|  |         move.l 28(a0),d0
    a4c4:	|  |         move.l 156(sp),-(sp)
    a4c8:	|  |         move.l d0,-(sp)
    a4ca:	|  |         jsr 8d0 <put2bytes>
    a4d0:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a4d2:	|  |         movea.l 148(sp),a0
    a4d6:	|  |         move.l 122(a0),d0
    a4da:	|  |         move.l 156(sp),-(sp)
    a4de:	|  |         move.l d0,-(sp)
    a4e0:	|  |         jsr 8d0 <put2bytes>
    a4e6:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a4e8:	|  |         movea.l 148(sp),a0
    a4ec:	|  |         move.l 24(a0),d0
    a4f0:	|  |         move.l d0,d0
    a4f2:	|  |         movea.w d0,a0
    a4f4:	|  |         move.l 156(sp),-(sp)
    a4f8:	|  |         move.l a0,-(sp)
    a4fa:	|  |         jsr a9c <putSigned>
    a500:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a502:	|  |         move.l 156(sp),124(sp)
    a508:	|  |         movea.l 148(sp),a0
    a50c:	|  |         move.w 104(a0),d0
    a510:	|  |         movea.w d0,a0
    a512:	|  |         move.l a0,120(sp)
    a516:	|  |         move.l 1b850 <DOSBase>,d0
    a51c:	|  |         movea.l d0,a6
    a51e:	|  |         move.l 124(sp),d1
    a522:	|  |         move.l 120(sp),d2
    a526:	|  |         jsr -312(a6)
    a52a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a52e:	|  |         move.l 156(sp),112(sp)
    a534:	|  |         movea.l 148(sp),a0
    a538:	|  |         move.w 64(a0),d0
    a53c:	|  |         movea.w d0,a0
    a53e:	|  |         move.l a0,108(sp)
    a542:	|  |         move.l 1b850 <DOSBase>,d0
    a548:	|  |         movea.l d0,a6
    a54a:	|  |         move.l 112(sp),d1
    a54e:	|  |         move.l 108(sp),d2
    a552:	|  |         jsr -312(a6)
    a556:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a55a:	|  |         move.l 156(sp),100(sp)
    a560:	|  |         movea.l 148(sp),a0
    a564:	|  |         move.w 66(a0),d0
    a568:	|  |         movea.w d0,a0
    a56a:	|  |         move.l a0,96(sp)
    a56e:	|  |         move.l 1b850 <DOSBase>,d0
    a574:	|  |         movea.l d0,a6
    a576:	|  |         move.l 100(sp),d1
    a57a:	|  |         move.l 96(sp),d2
    a57e:	|  |         jsr -312(a6)
    a582:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a586:	|  |         movea.l 148(sp),a0
    a58a:	|  |         move.l 68(a0),d0
    a58e:	|  |  /----- beq.s a5cc <savePeople+0x2e2>
			FPutC (fp, 1);
    a590:	|  |  |      move.l 156(sp),76(sp)
    a596:	|  |  |      moveq #1,d0
    a598:	|  |  |      move.l d0,72(sp)
    a59c:	|  |  |      move.l 1b850 <DOSBase>,d0
    a5a2:	|  |  |      movea.l d0,a6
    a5a4:	|  |  |      move.l 76(sp),d1
    a5a8:	|  |  |      move.l 72(sp),d2
    a5ac:	|  |  |      jsr -312(a6)
    a5b0:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a5b4:	|  |  |      movea.l 148(sp),a0
    a5b8:	|  |  |      move.l 68(a0),d0
    a5bc:	|  |  |      move.l 156(sp),-(sp)
    a5c0:	|  |  |      move.l d0,-(sp)
    a5c2:	|  |  |      jsr b762 <saveFunction>
    a5c8:	|  |  |      addq.l #8,sp
    a5ca:	|  |  |  /-- bra.s a5f0 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a5cc:	|  |  \--|-> move.l 156(sp),88(sp)
    a5d2:	|  |     |   moveq #1,d0
    a5d4:	|  |     |   move.l d0,84(sp)
    a5d8:	|  |     |   move.l 1b850 <DOSBase>,d0
    a5de:	|  |     |   movea.l d0,a6
    a5e0:	|  |     |   move.l 88(sp),d1
    a5e4:	|  |     |   move.l 84(sp),d2
    a5e8:	|  |     |   jsr -312(a6)
    a5ec:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a5f0:	|  |     \-> movea.l 148(sp),a0
    a5f4:	|  |         move.l 106(a0),d0
    a5f8:	|  |         move.l 156(sp),-(sp)
    a5fc:	|  |         move.l d0,-(sp)
    a5fe:	|  |         jsr 8d0 <put2bytes>
    a604:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a606:	|  |         movea.l 148(sp),a0
    a60a:	|  |         move.l 92(a0),d0
    a60e:	|  |         move.l 156(sp),-(sp)
    a612:	|  |         move.l d0,-(sp)
    a614:	|  |         jsr 8d0 <put2bytes>
    a61a:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a61c:	|  |         movea.l 148(sp),a0
    a620:	|  |         move.l 100(a0),d0
    a624:	|  |         move.l 156(sp),-(sp)
    a628:	|  |         move.l d0,-(sp)
    a62a:	|  |         jsr 8d0 <put2bytes>
    a630:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a632:	|  |         movea.l 148(sp),a0
    a636:	|  |         move.l 96(a0),d0
    a63a:	|  |         move.l 156(sp),-(sp)
    a63e:	|  |         move.l d0,-(sp)
    a640:	|  |         jsr 8d0 <put2bytes>
    a646:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a648:	|  |         movea.l 148(sp),a0
    a64c:	|  |         move.l 110(a0),d0
    a650:	|  |         move.l d0,d0
    a652:	|  |         movea.w d0,a0
    a654:	|  |         move.l 156(sp),-(sp)
    a658:	|  |         move.l a0,-(sp)
    a65a:	|  |         jsr a9c <putSigned>
    a660:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a662:	|  |         movea.l 148(sp),a0
    a666:	|  |         move.l 56(a0),d0
    a66a:	|  |         move.l d0,d0
    a66c:	|  |         movea.w d0,a0
    a66e:	|  |         move.l 156(sp),-(sp)
    a672:	|  |         move.l a0,-(sp)
    a674:	|  |         jsr a9c <putSigned>
    a67a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a67c:	|  |         movea.l 148(sp),a0
    a680:	|  |         move.l 60(a0),d0
    a684:	|  |         move.l d0,d0
    a686:	|  |         movea.w d0,a0
    a688:	|  |         move.l 156(sp),-(sp)
    a68c:	|  |         move.l a0,-(sp)
    a68e:	|  |         jsr a9c <putSigned>
    a694:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a696:	|  |         move.l 156(sp),64(sp)
    a69c:	|  |         movea.l 148(sp),a0
    a6a0:	|  |         move.b 126(a0),d0
    a6a4:	|  |         move.b d0,d0
    a6a6:	|  |         andi.l #255,d0
    a6ac:	|  |         move.l d0,60(sp)
    a6b0:	|  |         move.l 1b850 <DOSBase>,d0
    a6b6:	|  |         movea.l d0,a6
    a6b8:	|  |         move.l 64(sp),d1
    a6bc:	|  |         move.l 60(sp),d2
    a6c0:	|  |         jsr -312(a6)
    a6c4:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a6c8:	|  |         move.l 156(sp),52(sp)
    a6ce:	|  |         movea.l 148(sp),a0
    a6d2:	|  |         move.b 127(a0),d0
    a6d6:	|  |         move.b d0,d0
    a6d8:	|  |         andi.l #255,d0
    a6de:	|  |         move.l d0,48(sp)
    a6e2:	|  |         move.l 1b850 <DOSBase>,d0
    a6e8:	|  |         movea.l d0,a6
    a6ea:	|  |         move.l 52(sp),d1
    a6ee:	|  |         move.l 48(sp),d2
    a6f2:	|  |         jsr -312(a6)
    a6f6:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a6fa:	|  |         move.l 156(sp),40(sp)
    a700:	|  |         movea.l 148(sp),a0
    a704:	|  |         move.b 128(a0),d0
    a708:	|  |         move.b d0,d0
    a70a:	|  |         andi.l #255,d0
    a710:	|  |         move.l d0,36(sp)
    a714:	|  |         move.l 1b850 <DOSBase>,d0
    a71a:	|  |         movea.l d0,a6
    a71c:	|  |         move.l 40(sp),d1
    a720:	|  |         move.l 36(sp),d2
    a724:	|  |         jsr -312(a6)
    a728:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a72c:	|  |         move.l 156(sp),28(sp)
    a732:	|  |         movea.l 148(sp),a0
    a736:	|  |         move.b 129(a0),d0
    a73a:	|  |         move.b d0,d0
    a73c:	|  |         andi.l #255,d0
    a742:	|  |         move.l d0,24(sp)
    a746:	|  |         move.l 1b850 <DOSBase>,d0
    a74c:	|  |         movea.l d0,a6
    a74e:	|  |         move.l 28(sp),d1
    a752:	|  |         move.l 24(sp),d2
    a756:	|  |         jsr -312(a6)
    a75a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a75e:	|  |         move.l 156(sp),16(sp)
    a764:	|  |         movea.l 148(sp),a0
    a768:	|  |         move.b 130(a0),d0
    a76c:	|  |         move.b d0,d0
    a76e:	|  |         andi.l #255,d0
    a774:	|  |         move.l d0,12(sp)
    a778:	|  |         move.l 1b850 <DOSBase>,d0
    a77e:	|  |         movea.l d0,a6
    a780:	|  |         move.l 16(sp),d1
    a784:	|  |         move.l 12(sp),d2
    a788:	|  |         jsr -312(a6)
    a78c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a790:	|  |         movea.l 148(sp),a0
    a794:	|  |         move.l 114(a0),d0
    a798:	|  |         move.l 156(sp),-(sp)
    a79c:	|  |         move.l d0,-(sp)
    a79e:	|  |         jsr cb88 <saveObjectRef>
    a7a4:	|  |         addq.l #8,sp

		me = me -> next;
    a7a6:	|  |         movea.l 148(sp),a0
    a7aa:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a7b0:	|  |         addq.l #1,140(sp)
    a7b4:	|  \-------> movea.l 140(sp),a0
    a7b8:	|            cmpa.l 144(sp),a0
    a7bc:	\----------- blt.w a360 <savePeople+0x76>
	}
	return TRUE;
    a7c0:	             moveq #1,d0
}
    a7c2:	             move.l (sp)+,d2
    a7c4:	             movea.l (sp)+,a6
    a7c6:	             lea 144(sp),sp
    a7ca:	             rts

0000a7cc <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a7cc:	movea.l 4(sp),a0
    a7d0:	move.l 8(sp),(a0)
}
    a7d4:	nop
    a7d6:	rts

0000a7d8 <setDrawMode>:


void setDrawMode (int h, int ob) {
    a7d8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a7da:	       move.l 12(sp),-(sp)
    a7de:	       jsr 9866 <findPerson>
    a7e4:	       addq.l #4,sp
    a7e6:	       move.l d0,(sp)
	if (! moveMe) return;
    a7e8:	/----- beq.s a7fc <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a7ea:	|      move.l 8(sp),-(sp)
    a7ee:	|      move.l 4(sp),-(sp)
    a7f2:	|      jsr a802 <setMyDrawMode>
    a7f8:	|      addq.l #8,sp
    a7fa:	|  /-- bra.s a7fe <setDrawMode+0x26>
	if (! moveMe) return;
    a7fc:	\--|-> nop
}
    a7fe:	   \-> addq.l #4,sp
    a800:	       rts

0000a802 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a802:	       moveq #19,d0
    a804:	       cmp.l 8(sp),d0
    a808:	/----- bcs.w ace0 <setMyDrawMode+0x4de>
    a80c:	|      move.l 8(sp),d0
    a810:	|      add.l d0,d0
    a812:	|      movea.l d0,a0
    a814:	|      adda.l #43040,a0
    a81a:	|      move.w (a0),d0
    a81c:	|      jmp (a820 <setMyDrawMode+0x1e>,pc,d0.w)
    a820:	|      .short 0x04c0
    a822:	|      ori.l #6684712,-(a4)
    a828:	|      btst d0,-(a0)
    a82a:	|      bchg d0,(a6)+
    a82c:	|      bclr d0,(a4)+
    a82e:	|      bset d0,(a2)+
    a830:	|      andi.b #84,(a6)
    a834:	|      andi.l #55575312,(a2)
    a83a:	|      .short 0x02d0
    a83c:	|      bclr d1,(a0)
    a83e:	|      .short 0x044a
    a840:	|      .short 0x040c
    a842:	|      movep.l d1,1158(a6)
    a846:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a848:	|      movea.l 4(sp),a0
    a84c:	|      clr.b 128(a0)
    a850:	|      movea.l 4(sp),a0
    a854:	|      move.b 128(a0),d0
    a858:	|      movea.l 4(sp),a0
    a85c:	|      move.b d0,127(a0)
    a860:	|      movea.l 4(sp),a0
    a864:	|      move.b 127(a0),d0
    a868:	|      movea.l 4(sp),a0
    a86c:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    a870:	|      movea.l 4(sp),a0
    a874:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    a878:	|      movea.l 4(sp),a0
    a87c:	|      move.b #64,130(a0)
			break;
    a882:	|  /-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a886:	|  |   movea.l 4(sp),a0
    a88a:	|  |   clr.b 128(a0)
    a88e:	|  |   movea.l 4(sp),a0
    a892:	|  |   move.b 128(a0),d0
    a896:	|  |   movea.l 4(sp),a0
    a89a:	|  |   move.b d0,127(a0)
    a89e:	|  |   movea.l 4(sp),a0
    a8a2:	|  |   move.b 127(a0),d0
    a8a6:	|  |   movea.l 4(sp),a0
    a8aa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a8ae:	|  |   movea.l 4(sp),a0
    a8b2:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    a8b6:	|  |   movea.l 4(sp),a0
    a8ba:	|  |   move.b #-128,130(a0)
			break;
    a8c0:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a8c4:	|  |   movea.l 4(sp),a0
    a8c8:	|  |   clr.b 128(a0)
    a8cc:	|  |   movea.l 4(sp),a0
    a8d0:	|  |   move.b 128(a0),d0
    a8d4:	|  |   movea.l 4(sp),a0
    a8d8:	|  |   move.b d0,127(a0)
    a8dc:	|  |   movea.l 4(sp),a0
    a8e0:	|  |   move.b 127(a0),d0
    a8e4:	|  |   movea.l 4(sp),a0
    a8e8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a8ec:	|  |   movea.l 4(sp),a0
    a8f0:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    a8f4:	|  |   movea.l 4(sp),a0
    a8f8:	|  |   move.b #-64,130(a0)
			break;
    a8fe:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a902:	|  |   movea.l 4(sp),a0
    a906:	|  |   clr.b 128(a0)
    a90a:	|  |   movea.l 4(sp),a0
    a90e:	|  |   move.b 128(a0),d0
    a912:	|  |   movea.l 4(sp),a0
    a916:	|  |   move.b d0,127(a0)
    a91a:	|  |   movea.l 4(sp),a0
    a91e:	|  |   move.b 127(a0),d0
    a922:	|  |   movea.l 4(sp),a0
    a926:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a92a:	|  |   movea.l 4(sp),a0
    a92e:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    a932:	|  |   movea.l 4(sp),a0
    a936:	|  |   move.b #-2,130(a0)
			break;
    a93c:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a940:	|  |   movea.l 4(sp),a0
    a944:	|  |   clr.b 128(a0)
    a948:	|  |   movea.l 4(sp),a0
    a94c:	|  |   move.b 128(a0),d0
    a950:	|  |   movea.l 4(sp),a0
    a954:	|  |   move.b d0,127(a0)
    a958:	|  |   movea.l 4(sp),a0
    a95c:	|  |   move.b 127(a0),d0
    a960:	|  |   movea.l 4(sp),a0
    a964:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a968:	|  |   movea.l 4(sp),a0
    a96c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a972:	|  |   movea.l 4(sp),a0
    a976:	|  |   clr.b 130(a0)
			break;
    a97a:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a97e:	|  |   movea.l 4(sp),a0
    a982:	|  |   clr.b 128(a0)
    a986:	|  |   movea.l 4(sp),a0
    a98a:	|  |   move.b 128(a0),d0
    a98e:	|  |   movea.l 4(sp),a0
    a992:	|  |   move.b d0,127(a0)
    a996:	|  |   movea.l 4(sp),a0
    a99a:	|  |   move.b 127(a0),d0
    a99e:	|  |   movea.l 4(sp),a0
    a9a2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a9a6:	|  |   movea.l 4(sp),a0
    a9aa:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a9b0:	|  |   movea.l 4(sp),a0
    a9b4:	|  |   clr.b 130(a0)
			break;
    a9b8:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a9bc:	|  |   movea.l 4(sp),a0
    a9c0:	|  |   clr.b 128(a0)
    a9c4:	|  |   movea.l 4(sp),a0
    a9c8:	|  |   move.b 128(a0),d0
    a9cc:	|  |   movea.l 4(sp),a0
    a9d0:	|  |   move.b d0,127(a0)
    a9d4:	|  |   movea.l 4(sp),a0
    a9d8:	|  |   move.b 127(a0),d0
    a9dc:	|  |   movea.l 4(sp),a0
    a9e0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a9e4:	|  |   movea.l 4(sp),a0
    a9e8:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a9ee:	|  |   movea.l 4(sp),a0
    a9f2:	|  |   clr.b 130(a0)
			break;
    a9f6:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a9fa:	|  |   movea.l 4(sp),a0
    a9fe:	|  |   clr.b 128(a0)
    aa02:	|  |   movea.l 4(sp),a0
    aa06:	|  |   move.b 128(a0),d0
    aa0a:	|  |   movea.l 4(sp),a0
    aa0e:	|  |   move.b d0,127(a0)
    aa12:	|  |   movea.l 4(sp),a0
    aa16:	|  |   move.b 127(a0),d0
    aa1a:	|  |   movea.l 4(sp),a0
    aa1e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aa22:	|  |   movea.l 4(sp),a0
    aa26:	|  |   st 129(a0)
			moveMe->transparency = 0;
    aa2a:	|  |   movea.l 4(sp),a0
    aa2e:	|  |   clr.b 130(a0)
			break;
    aa32:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aa36:	|  |   movea.l 4(sp),a0
    aa3a:	|  |   clr.b 128(a0)
    aa3e:	|  |   movea.l 4(sp),a0
    aa42:	|  |   move.b 128(a0),d0
    aa46:	|  |   movea.l 4(sp),a0
    aa4a:	|  |   move.b d0,127(a0)
    aa4e:	|  |   movea.l 4(sp),a0
    aa52:	|  |   move.b 127(a0),d0
    aa56:	|  |   movea.l 4(sp),a0
    aa5a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aa5e:	|  |   movea.l 4(sp),a0
    aa62:	|  |   st 129(a0)
			moveMe->transparency = 64;
    aa66:	|  |   movea.l 4(sp),a0
    aa6a:	|  |   move.b #64,130(a0)
			break;
    aa70:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aa74:	|  |   movea.l 4(sp),a0
    aa78:	|  |   clr.b 128(a0)
    aa7c:	|  |   movea.l 4(sp),a0
    aa80:	|  |   move.b 128(a0),d0
    aa84:	|  |   movea.l 4(sp),a0
    aa88:	|  |   move.b d0,127(a0)
    aa8c:	|  |   movea.l 4(sp),a0
    aa90:	|  |   move.b 127(a0),d0
    aa94:	|  |   movea.l 4(sp),a0
    aa98:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aa9c:	|  |   movea.l 4(sp),a0
    aaa0:	|  |   st 129(a0)
			moveMe->transparency = 128;
    aaa4:	|  |   movea.l 4(sp),a0
    aaa8:	|  |   move.b #-128,130(a0)
			break;
    aaae:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aab2:	|  |   movea.l 4(sp),a0
    aab6:	|  |   clr.b 128(a0)
    aaba:	|  |   movea.l 4(sp),a0
    aabe:	|  |   move.b 128(a0),d0
    aac2:	|  |   movea.l 4(sp),a0
    aac6:	|  |   move.b d0,127(a0)
    aaca:	|  |   movea.l 4(sp),a0
    aace:	|  |   move.b 127(a0),d0
    aad2:	|  |   movea.l 4(sp),a0
    aad6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aada:	|  |   movea.l 4(sp),a0
    aade:	|  |   st 129(a0)
			moveMe->transparency = 192;
    aae2:	|  |   movea.l 4(sp),a0
    aae6:	|  |   move.b #-64,130(a0)
			break;
    aaec:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    aaf0:	|  |   movea.l 4(sp),a0
    aaf4:	|  |   move.b #-128,128(a0)
    aafa:	|  |   movea.l 4(sp),a0
    aafe:	|  |   move.b 128(a0),d0
    ab02:	|  |   movea.l 4(sp),a0
    ab06:	|  |   move.b d0,127(a0)
    ab0a:	|  |   movea.l 4(sp),a0
    ab0e:	|  |   move.b 127(a0),d0
    ab12:	|  |   movea.l 4(sp),a0
    ab16:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ab1a:	|  |   movea.l 4(sp),a0
    ab1e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ab24:	|  |   movea.l 4(sp),a0
    ab28:	|  |   clr.b 130(a0)
			break;
    ab2c:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ab30:	|  |   movea.l 4(sp),a0
    ab34:	|  |   move.b #-128,128(a0)
    ab3a:	|  |   movea.l 4(sp),a0
    ab3e:	|  |   move.b 128(a0),d0
    ab42:	|  |   movea.l 4(sp),a0
    ab46:	|  |   move.b d0,127(a0)
    ab4a:	|  |   movea.l 4(sp),a0
    ab4e:	|  |   move.b 127(a0),d0
    ab52:	|  |   movea.l 4(sp),a0
    ab56:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ab5a:	|  |   movea.l 4(sp),a0
    ab5e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ab64:	|  |   movea.l 4(sp),a0
    ab68:	|  |   clr.b 130(a0)
			break;
    ab6c:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ab70:	|  |   movea.l 4(sp),a0
    ab74:	|  |   move.b #-128,128(a0)
    ab7a:	|  |   movea.l 4(sp),a0
    ab7e:	|  |   move.b 128(a0),d0
    ab82:	|  |   movea.l 4(sp),a0
    ab86:	|  |   move.b d0,127(a0)
    ab8a:	|  |   movea.l 4(sp),a0
    ab8e:	|  |   move.b 127(a0),d0
    ab92:	|  |   movea.l 4(sp),a0
    ab96:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ab9a:	|  |   movea.l 4(sp),a0
    ab9e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    aba4:	|  |   movea.l 4(sp),a0
    aba8:	|  |   clr.b 130(a0)
			break;
    abac:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    abb0:	|  |   movea.l 4(sp),a0
    abb4:	|  |   move.b #-128,128(a0)
    abba:	|  |   movea.l 4(sp),a0
    abbe:	|  |   move.b 128(a0),d0
    abc2:	|  |   movea.l 4(sp),a0
    abc6:	|  |   move.b d0,127(a0)
    abca:	|  |   movea.l 4(sp),a0
    abce:	|  |   move.b 127(a0),d0
    abd2:	|  |   movea.l 4(sp),a0
    abd6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    abda:	|  |   movea.l 4(sp),a0
    abde:	|  |   st 129(a0)
			moveMe->transparency = 0;
    abe2:	|  |   movea.l 4(sp),a0
    abe6:	|  |   clr.b 130(a0)
			break;
    abea:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    abee:	|  |   movea.l 4(sp),a0
    abf2:	|  |   st 128(a0)
    abf6:	|  |   movea.l 4(sp),a0
    abfa:	|  |   move.b 128(a0),d0
    abfe:	|  |   movea.l 4(sp),a0
    ac02:	|  |   move.b d0,127(a0)
    ac06:	|  |   movea.l 4(sp),a0
    ac0a:	|  |   move.b 127(a0),d0
    ac0e:	|  |   movea.l 4(sp),a0
    ac12:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ac16:	|  |   movea.l 4(sp),a0
    ac1a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ac20:	|  |   movea.l 4(sp),a0
    ac24:	|  |   clr.b 130(a0)
			break;
    ac28:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ac2c:	|  |   movea.l 4(sp),a0
    ac30:	|  |   st 128(a0)
    ac34:	|  |   movea.l 4(sp),a0
    ac38:	|  |   move.b 128(a0),d0
    ac3c:	|  |   movea.l 4(sp),a0
    ac40:	|  |   move.b d0,127(a0)
    ac44:	|  |   movea.l 4(sp),a0
    ac48:	|  |   move.b 127(a0),d0
    ac4c:	|  |   movea.l 4(sp),a0
    ac50:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ac54:	|  |   movea.l 4(sp),a0
    ac58:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ac5e:	|  |   movea.l 4(sp),a0
    ac62:	|  |   clr.b 130(a0)
			break;
    ac66:	|  +-- bra.w ad1a <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ac6a:	|  |   movea.l 4(sp),a0
    ac6e:	|  |   st 128(a0)
    ac72:	|  |   movea.l 4(sp),a0
    ac76:	|  |   move.b 128(a0),d0
    ac7a:	|  |   movea.l 4(sp),a0
    ac7e:	|  |   move.b d0,127(a0)
    ac82:	|  |   movea.l 4(sp),a0
    ac86:	|  |   move.b 127(a0),d0
    ac8a:	|  |   movea.l 4(sp),a0
    ac8e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ac92:	|  |   movea.l 4(sp),a0
    ac96:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ac9c:	|  |   movea.l 4(sp),a0
    aca0:	|  |   clr.b 130(a0)
			break;
    aca4:	|  +-- bra.s ad1a <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aca6:	|  |   movea.l 4(sp),a0
    acaa:	|  |   st 128(a0)
    acae:	|  |   movea.l 4(sp),a0
    acb2:	|  |   move.b 128(a0),d0
    acb6:	|  |   movea.l 4(sp),a0
    acba:	|  |   move.b d0,127(a0)
    acbe:	|  |   movea.l 4(sp),a0
    acc2:	|  |   move.b 127(a0),d0
    acc6:	|  |   movea.l 4(sp),a0
    acca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    acce:	|  |   movea.l 4(sp),a0
    acd2:	|  |   st 129(a0)
			moveMe->transparency = 0;
    acd6:	|  |   movea.l 4(sp),a0
    acda:	|  |   clr.b 130(a0)
			break;
    acde:	|  +-- bra.s ad1a <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ace0:	\--|-> movea.l 4(sp),a0
    ace4:	   |   clr.b 128(a0)
    ace8:	   |   movea.l 4(sp),a0
    acec:	   |   move.b 128(a0),d0
    acf0:	   |   movea.l 4(sp),a0
    acf4:	   |   move.b d0,127(a0)
    acf8:	   |   movea.l 4(sp),a0
    acfc:	   |   move.b 127(a0),d0
    ad00:	   |   movea.l 4(sp),a0
    ad04:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ad08:	   |   movea.l 4(sp),a0
    ad0c:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    ad10:	   |   movea.l 4(sp),a0
    ad14:	   |   clr.b 130(a0)
			break;
    ad18:	   |   nop
	}
}
    ad1a:	   \-> nop
    ad1c:	       rts

0000ad1e <shufflePeople>:

void shufflePeople () {
    ad1e:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    ad22:	             move.l #112896,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    ad2a:	             move.l 1b900 <allPeople>,d0
    ad30:	/----------- beq.w ae06 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    ad34:	|     /----- bra.w adf6 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    ad38:	|  /--|----> movea.l 16(sp),a0
    ad3c:	|  |  |      movea.l (a0),a0
    ad3e:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    ad44:	|  |  |      movea.l 16(sp),a0
    ad48:	|  |  |      movea.l (a0),a0
    ad4a:	|  |  |      move.l 118(a0),d0
    ad4e:	|  |  |      moveq #1,d1
    ad50:	|  |  |      and.l d1,d0
    ad52:	|  |  |  /-- beq.s ad6a <shufflePeople+0x4c>
    ad54:	|  |  |  |   move.l #1148846080,-(sp)
    ad5a:	|  |  |  |   move.l 16(sp),-(sp)
    ad5e:	|  |  |  |   jsr 162de <__addsf3>
    ad64:	|  |  |  |   addq.l #8,sp
    ad66:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    ad6a:	|  |  |  \-> movea.l 16(sp),a0
    ad6e:	|  |  |      movea.l (a0),a0
    ad70:	|  |  |      movea.l 36(a0),a0
    ad74:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    ad7a:	|  |  |      movea.l 16(sp),a0
    ad7e:	|  |  |      movea.l (a0),a0
    ad80:	|  |  |      movea.l 36(a0),a0
    ad84:	|  |  |      move.l 118(a0),d0
    ad88:	|  |  |      moveq #1,d1
    ad8a:	|  |  |      and.l d1,d0
    ad8c:	|  |  |  /-- beq.s ada4 <shufflePeople+0x86>
    ad8e:	|  |  |  |   move.l #1148846080,-(sp)
    ad94:	|  |  |  |   move.l 12(sp),-(sp)
    ad98:	|  |  |  |   jsr 162de <__addsf3>
    ad9e:	|  |  |  |   addq.l #8,sp
    ada0:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    ada4:	|  |  |  \-> move.l 8(sp),-(sp)
    ada8:	|  |  |      move.l 16(sp),-(sp)
    adac:	|  |  |      jsr 16698 <__gtsf2>
    adb2:	|  |  |      addq.l #8,sp
    adb4:	|  |  |      tst.l d0
    adb6:	|  |  |  /-- ble.s ade8 <shufflePeople+0xca>
			A = (*thisReference);
    adb8:	|  |  |  |   movea.l 16(sp),a0
    adbc:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    adc0:	|  |  |  |   movea.l 16(sp),a0
    adc4:	|  |  |  |   movea.l (a0),a0
    adc6:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    adca:	|  |  |  |   movea.l (sp),a0
    adcc:	|  |  |  |   move.l 36(a0),d0
    add0:	|  |  |  |   movea.l 4(sp),a0
    add4:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    add8:	|  |  |  |   movea.l (sp),a0
    adda:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    ade0:	|  |  |  |   movea.l 16(sp),a0
    ade4:	|  |  |  |   move.l (sp),(a0)
    ade6:	|  |  +--|-- bra.s adf6 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ade8:	|  |  |  \-> movea.l 16(sp),a0
    adec:	|  |  |      move.l (a0),d0
    adee:	|  |  |      moveq #36,d1
    adf0:	|  |  |      add.l d0,d1
    adf2:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    adf6:	|  |  \----> movea.l 16(sp),a0
    adfa:	|  |         movea.l (a0),a0
    adfc:	|  |         move.l 36(a0),d0
    ae00:	|  \-------- bne.w ad38 <shufflePeople+0x1a>
    ae04:	|        /-- bra.s ae08 <shufflePeople+0xea>
	if (!allPeople) return;
    ae06:	\--------|-> nop
		}
	}
}
    ae08:	         \-> lea 20(sp),sp
    ae0c:	             rts

0000ae0e <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    ae0e:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    ae10:	       tst.l 8(sp)
    ae14:	   /-- bgt.s ae1a <setCharacterWalkSpeed+0xc>
    ae16:	   |   clr.w d0
    ae18:	/--|-- bra.s ae38 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ae1a:	|  \-> move.l 12(sp),-(sp)
    ae1e:	|      jsr 9866 <findPerson>
    ae24:	|      addq.l #4,sp
    ae26:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ae28:	|  /-- bne.s ae2e <setCharacterWalkSpeed+0x20>
    ae2a:	|  |   clr.w d0
    ae2c:	+--|-- bra.s ae38 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ae2e:	|  \-> movea.l (sp),a0
    ae30:	|      move.l 8(sp),28(a0)
	return TRUE;
    ae36:	|      moveq #1,d0
}
    ae38:	\----> addq.l #4,sp
    ae3a:	       rts

0000ae3c <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ae3c:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ae3e:	       move.l 8(sp),-(sp)
    ae42:	       jsr 9866 <findPerson>
    ae48:	       addq.l #4,sp
    ae4a:	       move.l d0,(sp)
    if (thisPerson) {
    ae4c:	/----- beq.s ae6c <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ae4e:	|      movea.l (sp),a0
    ae50:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ae56:	|      moveq #2,d0
    ae58:	|      and.l 12(sp),d0
    ae5c:	|  /-- beq.s ae68 <setPersonExtra+0x2c>
    ae5e:	|  |   movea.l (sp),a0
    ae60:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ae68:	|  \-> moveq #1,d0
    ae6a:	|  /-- bra.s ae6e <setPersonExtra+0x32>
    }
    return FALSE;
    ae6c:	\--|-> clr.w d0
}
    ae6e:	   \-> addq.l #4,sp
    ae70:	       rts

0000ae72 <setScale>:


void setScale (short int h, short int d) {
    ae72:	subq.l #4,sp
    ae74:	move.l 8(sp),d1
    ae78:	move.l 12(sp),d0
    ae7c:	move.w d1,d1
    ae7e:	move.w d1,2(sp)
    ae82:	move.w d0,d0
    ae84:	move.w d0,(sp)
	scaleHorizon = h;
    ae86:	move.w 2(sp),1b1dc <scaleHorizon>
	scaleDivide = d;
    ae8e:	move.w (sp),1b1de <scaleDivide>
}
    ae94:	nop
    ae96:	addq.l #4,sp
    ae98:	rts

0000ae9a <setShown>:

void setShown (BOOL h, int ob) {
    ae9a:	    subq.l #8,sp
    ae9c:	    move.l 12(sp),d0
    aea0:	    move.w d0,d0
    aea2:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    aea6:	    move.l 16(sp),-(sp)
    aeaa:	    jsr 9866 <findPerson>
    aeb0:	    addq.l #4,sp
    aeb2:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    aeb6:	/-- beq.s aec2 <setShown+0x28>
    aeb8:	|   movea.l 4(sp),a0
    aebc:	|   move.w 2(sp),104(a0)
}
    aec2:	\-> nop
    aec4:	    addq.l #8,sp
    aec6:	    rts

0000aec8 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    aec8:	       subq.l #8,sp
    aeca:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    aecc:	       movea.l 16(sp),a0
    aed0:	       move.l 92(a0),d0
    aed4:	       move.l d0,d1
    aed6:	       addi.l #360,d1
    aedc:	       movea.l 16(sp),a0
    aee0:	       move.l 96(a0),d0
    aee4:	       move.l d1,d2
    aee6:	       sub.l d0,d2
    aee8:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    aeec:	       movea.l 16(sp),a0
    aef0:	       move.l 122(a0),d0
    aef4:	   /-- beq.s af00 <spinStep+0x38>
    aef6:	   |   movea.l 16(sp),a0
    aefa:	   |   move.l 122(a0),d0
    aefe:	/--|-- bra.s af1a <spinStep+0x52>
    af00:	|  \-> movea.l 16(sp),a0
    af04:	|      movea.l 80(a0),a0
    af08:	|      move.l 4(a0),d0
    af0c:	|      move.l d0,-(sp)
    af0e:	|      pea 168 <decodeFilename+0x50>
    af12:	|      jsr 16b2c <__divsi3>
    af18:	|      addq.l #8,sp
    af1a:	\----> move.l d0,4(sp)
	while (diff > 180) {
    af1e:	   /-- bra.s af28 <spinStep+0x60>
		diff -= 360;
    af20:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    af28:	|  \-> cmpi.l #180,8(sp)
    af30:	\----- bgt.s af20 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    af32:	       move.l 8(sp),d0
    af36:	       cmp.l 4(sp),d0
    af3a:	   /-- blt.s af58 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    af3c:	   |   movea.l 16(sp),a0
    af40:	   |   move.l 92(a0),d0
    af44:	   |   sub.l 4(sp),d0
    af48:	   |   move.l d0,-(sp)
    af4a:	   |   move.l 20(sp),-(sp)
    af4e:	   |   jsr b038 <turnMeAngle>
    af54:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    af56:	/--|-- bra.s af9e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    af58:	|  \-> move.l 4(sp),d0
    af5c:	|      neg.l d0
    af5e:	|      cmp.l 8(sp),d0
    af62:	|  /-- blt.s af80 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    af64:	|  |   movea.l 16(sp),a0
    af68:	|  |   move.l 92(a0),d0
    af6c:	|  |   add.l 4(sp),d0
    af70:	|  |   move.l d0,-(sp)
    af72:	|  |   move.l 20(sp),-(sp)
    af76:	|  |   jsr b038 <turnMeAngle>
    af7c:	|  |   addq.l #8,sp
}
    af7e:	+--|-- bra.s af9e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    af80:	|  \-> movea.l 16(sp),a0
    af84:	|      move.l 96(a0),d0
    af88:	|      move.l d0,-(sp)
    af8a:	|      move.l 20(sp),-(sp)
    af8e:	|      jsr b038 <turnMeAngle>
    af94:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    af96:	|      movea.l 16(sp),a0
    af9a:	|      clr.w 66(a0)
}
    af9e:	\----> nop
    afa0:	       move.l (sp)+,d2
    afa2:	       addq.l #8,sp
    afa4:	       rts

0000afa6 <stopPerson>:


BOOL stopPerson (int o) {
    afa6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    afa8:	       move.l 8(sp),-(sp)
    afac:	       jsr 9866 <findPerson>
    afb2:	       addq.l #4,sp
    afb4:	       move.l d0,(sp)
    if (moveMe)
    afb6:	/----- beq.s aff4 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    afb8:	|      movea.l (sp),a0
    afba:	|      move.l 68(a0),d0
    afbe:	+----- beq.s aff4 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    afc0:	|      movea.l (sp),a0
    afc2:	|      move.l 68(a0),d0
    afc6:	|      move.l d0,-(sp)
    afc8:	|      jsr 3766 <abortFunction>
    afce:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    afd0:	|      movea.l (sp),a0
    afd2:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    afd6:	|      movea.l (sp),a0
    afd8:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    afdc:	|      movea.l (sp),a0
    afde:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    afe2:	|      clr.l -(sp)
    afe4:	|      move.l 4(sp),-(sp)
    afe8:	|      jsr 71b0 <setFrames>
    afee:	|      addq.l #8,sp
            return TRUE;
    aff0:	|      moveq #1,d0
    aff2:	|  /-- bra.s aff6 <stopPerson+0x50>
        }
    return FALSE;
    aff4:	\--|-> clr.w d0
}
    aff6:	   \-> addq.l #4,sp
    aff8:	       rts

0000affa <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    affa:	       subq.l #8,sp
	int total = 0;
    affc:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b000:	       clr.l (sp)
    b002:	   /-- bra.s b024 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    b004:	/--|-> movea.l 12(sp),a0
    b008:	|  |   movea.l 4(a0),a0
    b00c:	|  |   move.l (sp),d1
    b00e:	|  |   move.l d1,d0
    b010:	|  |   add.l d0,d0
    b012:	|  |   add.l d1,d0
    b014:	|  |   add.l d0,d0
    b016:	|  |   add.l d0,d0
    b018:	|  |   adda.l d0,a0
    b01a:	|  |   move.l 4(a0),d0
    b01e:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b022:	|  |   addq.l #1,(sp)
    b024:	|  \-> movea.l 12(sp),a0
    b028:	|      move.l 8(a0),d0
    b02c:	|      cmp.l (sp),d0
    b02e:	\----- bgt.s b004 <timeForAnim+0xa>
	}
	return total;
    b030:	       move.l 4(sp),d0
}
    b034:	       addq.l #8,sp
    b036:	       rts

0000b038 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    b038:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    b03a:	       movea.l 8(sp),a0
    b03e:	       movea.l 80(a0),a0
    b042:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    b046:	       movea.l 8(sp),a0
    b04a:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    b050:	       move.l (sp),-(sp)
    b052:	       pea b4 <_start+0xb4>
    b056:	       jsr 16b2c <__divsi3>
    b05c:	       addq.l #8,sp
    b05e:	       move.l d0,d1
    b060:	       addi.l #180,d1
    b066:	       movea.l 8(sp),a0
    b06a:	       move.l 100(a0),d0
    b06e:	       add.l d1,d0
    b070:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    b074:	   /-- bra.s b07e <turnMeAngle+0x46>
    b076:	/--|-> addi.l #-360,12(sp)
    b07e:	|  \-> cmpi.l #359,12(sp)
    b086:	\----- bgt.s b076 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    b088:	       move.l (sp),-(sp)
    b08a:	       move.l 16(sp),-(sp)
    b08e:	       jsr 16aae <__mulsi3>
    b094:	       addq.l #8,sp
    b096:	       pea 168 <decodeFilename+0x50>
    b09a:	       move.l d0,-(sp)
    b09c:	       jsr 16b2c <__divsi3>
    b0a2:	       addq.l #8,sp
    b0a4:	       movea.l 8(sp),a0
    b0a8:	       move.l d0,106(a0)
}
    b0ac:	       nop
    b0ae:	       addq.l #4,sp
    b0b0:	       rts

0000b0b2 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    b0b2:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b0b4:	          move.l 8(sp),-(sp)
    b0b8:	          jsr 9866 <findPerson>
    b0be:	          addq.l #4,sp
    b0c0:	          move.l d0,(sp)
    if (thisPerson) {
    b0c2:	/-------- beq.s b122 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    b0c4:	|         movea.l (sp),a0
    b0c6:	|         move.l 68(a0),d0
    b0ca:	|     /-- beq.s b0dc <turnPersonToFace+0x2a>
    b0cc:	|     |   movea.l (sp),a0
    b0ce:	|     |   move.l 68(a0),d0
    b0d2:	|     |   move.l d0,-(sp)
    b0d4:	|     |   jsr 3766 <abortFunction>
    b0da:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    b0dc:	|     \-> movea.l (sp),a0
    b0de:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    b0e2:	|         movea.l (sp),a0
    b0e4:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    b0e8:	|         movea.l (sp),a0
    b0ea:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    b0ee:	|         move.l 12(sp),-(sp)
    b0f2:	|         move.l 4(sp),-(sp)
    b0f6:	|         jsr b038 <turnMeAngle>
    b0fc:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    b0fe:	|         movea.l 1b8a4 <speech>,a0
    b104:	|         move.l (a0),d0
    b106:	|         cmp.l (sp),d0
    b108:	|  /----- bne.s b10e <turnPersonToFace+0x5c>
    b10a:	|  |      moveq #2,d0
    b10c:	|  |  /-- bra.s b110 <turnPersonToFace+0x5e>
    b10e:	|  \--|-> moveq #0,d0
    b110:	|     \-> move.l d0,-(sp)
    b112:	|         move.l 4(sp),-(sp)
    b116:	|         jsr 71b0 <setFrames>
    b11c:	|         addq.l #8,sp
        return TRUE;
    b11e:	|         moveq #1,d0
    b120:	|     /-- bra.s b124 <turnPersonToFace+0x72>
    }
    return FALSE;
    b122:	\-----|-> clr.w d0
}
    b124:	      \-> addq.l #4,sp
    b126:	          rts

0000b128 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    b128:	                lea -20(sp),sp
    b12c:	                move.l d3,-(sp)
    b12e:	                move.l d2,-(sp)
    b130:	                move.l 36(sp),d0
    b134:	                move.w d0,d0
    b136:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    b13a:	                cmpi.w #-1,10(sp)
    b140:	/-------------- bne.s b148 <walkMe+0x20>
    b142:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b148:	>-------------> movea.l 32(sp),a0
    b14c:	|               move.l 48(a0),d0
    b150:	|               move.l d0,-(sp)
    b152:	|               jsr 1652c <__floatsisf>
    b158:	|               addq.l #4,sp
    b15a:	|               move.l d0,d1
    b15c:	|               movea.l 32(sp),a0
    b160:	|               move.l (a0),d0
    b162:	|               move.l d0,-(sp)
    b164:	|               move.l d1,-(sp)
    b166:	|               jsr 16820 <__subsf3>
    b16c:	|               addq.l #8,sp
    b16e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    b172:	|               movea.l 32(sp),a0
    b176:	|               move.l 52(a0),d0
    b17a:	|               move.l d0,-(sp)
    b17c:	|               jsr 1652c <__floatsisf>
    b182:	|               addq.l #4,sp
    b184:	|               move.l d0,d1
    b186:	|               movea.l 32(sp),a0
    b18a:	|               move.l 4(a0),d0
    b18e:	|               move.l d0,-(sp)
    b190:	|               move.l d1,-(sp)
    b192:	|               jsr 16820 <__subsf3>
    b198:	|               addq.l #8,sp
    b19a:	|               move.l d0,-(sp)
    b19c:	|               move.l d0,-(sp)
    b19e:	|               jsr 162de <__addsf3>
    b1a4:	|               addq.l #8,sp
    b1a6:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    b1aa:	|               movea.l 32(sp),a0
    b1ae:	|               move.l 32(a0),d2
    b1b2:	|               movea.l 32(sp),a0
    b1b6:	|               move.l 28(a0),d0
    b1ba:	|               move.l d0,-(sp)
    b1bc:	|               jsr 1652c <__floatsisf>
    b1c2:	|               addq.l #4,sp
    b1c4:	|               move.l d0,-(sp)
    b1c6:	|               move.l d2,-(sp)
    b1c8:	|               jsr 165de <__mulsf3>
    b1ce:	|               addq.l #8,sp
    b1d0:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    b1d4:	|               move.l 24(sp),-(sp)
    b1d8:	|               jsr 16444 <__extendsfdf2>
    b1de:	|               addq.l #4,sp
    b1e0:	|               move.l #-1717986918,-(sp)
    b1e6:	|               move.l #1070176665,-(sp)
    b1ec:	|               move.l d1,-(sp)
    b1ee:	|               move.l d0,-(sp)
    b1f0:	|               jsr 16704 <__ltdf2>
    b1f6:	|               lea 16(sp),sp
    b1fa:	|               tst.l d0
    b1fc:	|           /-- bge.s b206 <walkMe+0xde>
    b1fe:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    b206:	|           \-> move.l 20(sp),-(sp)
    b20a:	|               jsr 164c4 <__fixsfsi>
    b210:	|               addq.l #4,sp
    b212:	|               move.l d0,-(sp)
    b214:	|               jsr 8456 <TF_abs>
    b21a:	|               addq.l #4,sp
    b21c:	|               move.l d0,d2
    b21e:	|               move.l 16(sp),-(sp)
    b222:	|               jsr 164c4 <__fixsfsi>
    b228:	|               addq.l #4,sp
    b22a:	|               move.l d0,-(sp)
    b22c:	|               jsr 8456 <TF_abs>
    b232:	|               addq.l #4,sp
    b234:	|               cmp.l d2,d0
    b236:	|        /----- bgt.s b25a <walkMe+0x132>
    b238:	|        |      move.l 20(sp),-(sp)
    b23c:	|        |      jsr 164c4 <__fixsfsi>
    b242:	|        |      addq.l #4,sp
    b244:	|        |      move.l d0,-(sp)
    b246:	|        |      jsr 8456 <TF_abs>
    b24c:	|        |      addq.l #4,sp
    b24e:	|        |      move.l d0,-(sp)
    b250:	|        |      jsr 1652c <__floatsisf>
    b256:	|        |      addq.l #4,sp
    b258:	|        |  /-- bra.s b27a <walkMe+0x152>
    b25a:	|        \--|-> move.l 16(sp),-(sp)
    b25e:	|           |   jsr 164c4 <__fixsfsi>
    b264:	|           |   addq.l #4,sp
    b266:	|           |   move.l d0,-(sp)
    b268:	|           |   jsr 8456 <TF_abs>
    b26e:	|           |   addq.l #4,sp
    b270:	|           |   move.l d0,-(sp)
    b272:	|           |   jsr 1652c <__floatsisf>
    b278:	|           |   addq.l #4,sp
    b27a:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    b27e:	|               move.l 12(sp),-(sp)
    b282:	|               jsr 164c4 <__fixsfsi>
    b288:	|               addq.l #4,sp
    b28a:	|               move.l d0,-(sp)
    b28c:	|               jsr 8456 <TF_abs>
    b292:	|               addq.l #4,sp
    b294:	|               move.l d0,-(sp)
    b296:	|               jsr 1652c <__floatsisf>
    b29c:	|               addq.l #4,sp
    b29e:	|               move.l d0,-(sp)
    b2a0:	|               move.l 28(sp),-(sp)
    b2a4:	|               jsr 16752 <__ltsf2>
    b2aa:	|               addq.l #8,sp
    b2ac:	|               tst.l d0
    b2ae:	|        /----- bge.w b360 <walkMe+0x238>
			if (thisPerson->spinning) {
    b2b2:	|        |      movea.l 32(sp),a0
    b2b6:	|        |      move.w 66(a0),d0
    b2ba:	|        |  /-- beq.s b2d8 <walkMe+0x1b0>
				spinStep(thisPerson);
    b2bc:	|        |  |   move.l 32(sp),-(sp)
    b2c0:	|        |  |   jsr aec8 <spinStep>
    b2c6:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    b2c8:	|        |  |   pea 1 <_start+0x1>
    b2cc:	|        |  |   move.l 36(sp),-(sp)
    b2d0:	|        |  |   jsr 71b0 <setFrames>
    b2d6:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    b2d8:	|        |  \-> move.l 24(sp),-(sp)
    b2dc:	|        |      move.l 16(sp),-(sp)
    b2e0:	|        |      jsr 163d8 <__divsf3>
    b2e6:	|        |      addq.l #8,sp
    b2e8:	|        |      move.l d0,24(sp)
			if (move)
    b2ec:	|        |      tst.w 10(sp)
    b2f0:	|        |  /-- beq.s b35a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b2f2:	|        |  |   movea.l 32(sp),a0
    b2f6:	|        |  |   move.l 4(a0),d2
    b2fa:	|        |  |   move.l 24(sp),d0
    b2fe:	|        |  |   move.l d0,-(sp)
    b300:	|        |  |   move.l d0,-(sp)
    b302:	|        |  |   jsr 162de <__addsf3>
    b308:	|        |  |   addq.l #8,sp
    b30a:	|        |  |   move.l d0,-(sp)
    b30c:	|        |  |   move.l 20(sp),-(sp)
    b310:	|        |  |   jsr 163d8 <__divsf3>
    b316:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b318:	|        |  |   move.l d0,-(sp)
    b31a:	|        |  |   move.l d2,-(sp)
    b31c:	|        |  |   jsr 162de <__addsf3>
    b322:	|        |  |   addq.l #8,sp
    b324:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b326:	|        |  |   movea.l 32(sp),a0
    b32a:	|        |  |   move.l (a0),d3
    b32c:	|        |  |   move.l 24(sp),-(sp)
    b330:	|        |  |   move.l 24(sp),-(sp)
    b334:	|        |  |   jsr 163d8 <__divsf3>
    b33a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b33c:	|        |  |   move.l d0,-(sp)
    b33e:	|        |  |   move.l d3,-(sp)
    b340:	|        |  |   jsr 162de <__addsf3>
    b346:	|        |  |   addq.l #8,sp
    b348:	|        |  |   move.l d2,-(sp)
    b34a:	|        |  |   move.l d0,-(sp)
    b34c:	|        |  |   move.l 40(sp),-(sp)
    b350:	|        |  |   jsr 9fae <moveAndScale>
    b356:	|        |  |   lea 12(sp),sp
			return TRUE;
    b35a:	|        |  \-> moveq #1,d0
    b35c:	|  /-----|----- bra.w b40e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b360:	|  |     \----> movea.l 32(sp),a0
    b364:	|  |            move.l 56(a0),d0
    b368:	|  |            moveq #-1,d1
    b36a:	|  |            cmp.l d0,d1
    b36c:	|  |        /-- bne.s b3a4 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b36e:	|  |        |   movea.l 32(sp),a0
    b372:	|  |        |   move.l 110(a0),d0
    b376:	|  |        |   moveq #-1,d1
    b378:	|  |        |   cmp.l d0,d1
    b37a:	|  |  /-----|-- beq.s b3b8 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b37c:	|  |  |     |   movea.l 32(sp),a0
    b380:	|  |  |     |   move.l 110(a0),d0
    b384:	|  |  |     |   movea.l 32(sp),a0
    b388:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    b38c:	|  |  |     |   movea.l 32(sp),a0
    b390:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    b396:	|  |  |     |   move.l 32(sp),-(sp)
    b39a:	|  |  |     |   jsr aec8 <spinStep>
    b3a0:	|  |  |     |   addq.l #4,sp
			}
			break;
    b3a2:	|  |  +-----|-- bra.s b3b8 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b3a4:	|  |  |     \-> move.l 32(sp),-(sp)
    b3a8:	|  |  |         jsr 8bc8 <doBorderStuff>
    b3ae:	|  |  |         addq.l #4,sp
    b3b0:	|  |  |         tst.w d0
    b3b2:	|  |  |  /----- beq.s b3bc <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b3b4:	\--|--|--|----- bra.w b148 <walkMe+0x20>
			break;
    b3b8:	   |  \--|----> nop
    b3ba:	   |     |  /-- bra.s b3be <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b3bc:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b3be:	   |        \-> movea.l 32(sp),a0
    b3c2:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    b3c6:	   |            clr.l -(sp)
    b3c8:	   |            move.l 36(sp),-(sp)
    b3cc:	   |            jsr 71b0 <setFrames>
    b3d2:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b3d4:	   |            movea.l 32(sp),a0
    b3d8:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    b3dc:	   |            move.l d0,-(sp)
    b3de:	   |            jsr 1652c <__floatsisf>
    b3e4:	   |            addq.l #4,sp
    b3e6:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b3e8:	   |            movea.l 32(sp),a0
    b3ec:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b3f0:	   |            move.l d0,-(sp)
    b3f2:	   |            jsr 1652c <__floatsisf>
    b3f8:	   |            addq.l #4,sp
    b3fa:	   |            move.l d2,-(sp)
    b3fc:	   |            move.l d0,-(sp)
    b3fe:	   |            move.l 40(sp),-(sp)
    b402:	   |            jsr 9fae <moveAndScale>
    b408:	   |            lea 12(sp),sp
	return FALSE;
    b40c:	   |            clr.w d0
}
    b40e:	   \----------> move.l (sp)+,d2
    b410:	                move.l (sp)+,d3
    b412:	                lea 20(sp),sp
    b416:	                rts

0000b418 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b418:	       subq.l #8,sp
    b41a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b41c:	   /-- bra.s b44c <clearStackLib+0x34>
		k = stackLib;
    b41e:	/--|-> move.l 1b92c <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b426:	|  |   movea.l 1b92c <stackLib>,a0
    b42c:	|  |   move.l 4(a0),d0
    b430:	|  |   move.l d0,1b92c <stackLib>
		FreeVec(k);
    b436:	|  |   move.l 8(sp),4(sp)
    b43c:	|  |   move.l 1b848 <SysBase>,d0
    b442:	|  |   movea.l d0,a6
    b444:	|  |   movea.l 4(sp),a1
    b448:	|  |   jsr -690(a6)
	while (stackLib) {
    b44c:	|  \-> move.l 1b92c <stackLib>,d0
    b452:	\----- bne.s b41e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b454:	       clr.l 1b928 <stackLibTotal>
}
    b45a:	       nop
    b45c:	       movea.l (sp)+,a6
    b45e:	       addq.l #8,sp
    b460:	       rts

0000b462 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b462:	          lea -128(sp),sp
    b466:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b46a:	      /-- bra.s b47c <loadGame+0x1a>
    b46c:	   /--|-> move.l 1b7e0 <allRunningFunctions>,d0
    b472:	   |  |   move.l d0,-(sp)
    b474:	   |  |   jsr 476e <finishFunction>
    b47a:	   |  |   addq.l #4,sp
    b47c:	   |  \-> move.l 1b7e0 <allRunningFunctions>,d0
    b482:	   \----- bne.s b46c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b484:	          pea 1b930 <ssgVersion>
    b48a:	          pea 180c7 <PutChar+0x1503>
    b490:	          pea 41 <_start+0x41>
    b494:	          pea 53 <_start+0x53>
    b498:	          move.l 160(sp),-(sp)
    b49c:	          jsr 5524 <openAndVerify>
    b4a2:	          lea 20(sp),sp
    b4a6:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b4aa:	      /-- bne.s b4b2 <loadGame+0x50>
    b4ac:	      |   clr.w d0
    b4ae:	/-----|-- bra.w b758 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b4b2:	|     \-> move.l 112(sp),108(sp)
    b4b8:	|         lea 140(sp),a0
    b4bc:	|         lea -126(a0),a0
    b4c0:	|         move.l a0,120(sp)
    b4c4:	|         moveq #8,d0
    b4c6:	|         move.l d0,116(sp)
    b4ca:	|         move.l 1b850 <DOSBase>,d0
    b4d0:	|         movea.l d0,a6
    b4d2:	|         move.l 108(sp),d1
    b4d6:	|         move.l 120(sp),d2
    b4da:	|         move.l 116(sp),d3
    b4de:	|         jsr -42(a6)
    b4e2:	|         move.l d0,132(sp)
    b4e6:	|         move.l 132(sp),d0
    b4ea:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b4ee:	|         moveq #8,d0
    b4f0:	|         cmp.l 128(sp),d0
    b4f4:	|     /-- beq.s b504 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b4f6:	|     |   pea 180e8 <PutChar+0x1524>
    b4fc:	|     |   jsr 16274 <KPrintF>
    b502:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b504:	|     \-> move.l 14(sp),d1
    b508:	|         move.l 1b7ea <fileTime>,d0
    b50e:	|         cmp.l d1,d0
    b510:	|     /-- bne.s b520 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b512:	|     |   move.l 18(sp),d1
    b516:	|     |   move.l 1b7ee <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b51c:	|     |   cmp.l d1,d0
    b51e:	|  /--|-- beq.s b540 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b520:	|  |  \-> move.l 144(sp),-(sp)
    b524:	|  |      pea 18104 <PutChar+0x1540>
    b52a:	|  |      pea 181cb <PutChar+0x1607>
    b530:	|  |      jsr 16274 <KPrintF>
    b536:	|  |      lea 12(sp),sp
		return FALSE; 
    b53a:	|  |      clr.w d0
    b53c:	+--|----- bra.w b758 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b540:	|  \----> move.l 112(sp),124(sp)
    b546:	|         move.l 1b850 <DOSBase>,d0
    b54c:	|         movea.l d0,a6
    b54e:	|         move.l 124(sp),d1
    b552:	|         jsr -306(a6)
    b556:	|         move.l d0,136(sp)
    b55a:	|         move.l 136(sp),d0
    b55e:	|         move.l d0,d0
    b560:	|         move.w d0,1b0a6 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b566:	|         move.l 112(sp),100(sp)
    b56c:	|         move.l 1b850 <DOSBase>,d0
    b572:	|         movea.l d0,a6
    b574:	|         move.l 100(sp),d1
    b578:	|         jsr -306(a6)
    b57c:	|         move.l d0,96(sp)
    b580:	|         move.l 96(sp),d0
    b584:	|         move.l d0,d0
    b586:	|         move.w d0,1b7e8 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b58c:	|         move.l 112(sp),92(sp)
    b592:	|         move.l 1b850 <DOSBase>,d0
    b598:	|         movea.l d0,a6
    b59a:	|         move.l 92(sp),d1
    b59e:	|         jsr -306(a6)
    b5a2:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b5a6:	|         move.l 112(sp),84(sp)
    b5ac:	|         move.l 1b850 <DOSBase>,d0
    b5b2:	|         movea.l d0,a6
    b5b4:	|         move.l 84(sp),d1
    b5b8:	|         jsr -306(a6)
    b5bc:	|         move.l d0,80(sp)
    b5c0:	|         move.l 80(sp),d0
    b5c4:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b5c8:	|     /-- beq.s b5fc <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b5ca:	|     |   move.l 112(sp),-(sp)
    b5ce:	|     |   jsr 6bc <get2bytes>
    b5d4:	|     |   addq.l #4,sp
    b5d6:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b5da:	|     |   move.l 112(sp),-(sp)
    b5de:	|     |   jsr 6bc <get2bytes>
    b5e4:	|     |   addq.l #4,sp
    b5e6:	|     |   move.l d0,1b998 <fontHeight>
		charOrder = readString(fp);		
    b5ec:	|     |   move.l 112(sp),-(sp)
    b5f0:	|     |   jsr b02 <readString>
    b5f6:	|     |   addq.l #4,sp
    b5f8:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b5fc:	|     \-> move.l 104(sp),70(sp)
    b602:	|         move.l 1b848 <SysBase>,d0
    b608:	|         movea.l d0,a6
    b60a:	|         movea.l 70(sp),a1
    b60e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b612:	|         move.l 112(sp),-(sp)
    b616:	|         jsr 854 <getSigned>
    b61c:	|         addq.l #4,sp
    b61e:	|         move.w d0,1b74e <fontSpace>

	killAllPeople ();
    b624:	|         jsr 9c50 <killAllPeople>
	killAllRegions ();
    b62a:	|         jsr 14ac4 <killAllRegions>

	int camerX = get2bytes (fp);
    b630:	|         move.l 112(sp),-(sp)
    b634:	|         jsr 6bc <get2bytes>
    b63a:	|         addq.l #4,sp
    b63c:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b640:	|         move.l 112(sp),-(sp)
    b644:	|         jsr 6bc <get2bytes>
    b64a:	|         addq.l #4,sp
    b64c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b650:	|         move.l 112(sp),-(sp)
    b654:	|         jsr 7d8 <getFloat>
    b65a:	|         addq.l #4,sp
    b65c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b660:	|         move.l 112(sp),54(sp)
    b666:	|         move.l 1b850 <DOSBase>,d0
    b66c:	|         movea.l d0,a6
    b66e:	|         move.l 54(sp),d1
    b672:	|         jsr -306(a6)
    b676:	|         move.l d0,50(sp)
    b67a:	|         move.l 50(sp),d0
    b67e:	|         move.l d0,d0
    b680:	|         move.b d0,1b1c0 <brightnessLevel>

	loadHandlers (fp);
    b686:	|         move.l 112(sp),-(sp)
    b68a:	|         jsr 5484 <loadHandlers>
    b690:	|         addq.l #4,sp
	loadRegions (fp);
    b692:	|         move.l 112(sp),-(sp)
    b696:	|         jsr 14b20 <loadRegions>
    b69c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b69e:	|         moveq #12,d0
    b6a0:	|         move.l d0,46(sp)
    b6a4:	|         clr.l 42(sp)
    b6a8:	|         move.l 1b848 <SysBase>,d0
    b6ae:	|         movea.l d0,a6
    b6b0:	|         move.l 46(sp),d0
    b6b4:	|         move.l 42(sp),d1
    b6b8:	|         jsr -684(a6)
    b6bc:	|         move.l d0,38(sp)
    b6c0:	|         move.l 38(sp),d0
    b6c4:	|         move.l d0,1b750 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b6ca:	|         move.l 1b750 <mouseCursorAnim>,d0
    b6d0:	|     /-- bne.s b6e4 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b6d2:	|     |   pea 181d5 <PutChar+0x1611>
    b6d8:	|     |   jsr 16274 <KPrintF>
    b6de:	|     |   addq.l #4,sp
		return FALSE;
    b6e0:	|     |   clr.w d0
    b6e2:	+-----|-- bra.s b758 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b6e4:	|     \-> jsr c5da <nosnapshot>
	if (FGetC (fp)) {
    b6ea:	|         move.l 112(sp),34(sp)
    b6f0:	|         move.l 1b850 <DOSBase>,d0
    b6f6:	|         movea.l d0,a6
    b6f8:	|         move.l 34(sp),d1
    b6fc:	|         jsr -306(a6)
    b700:	|         move.l d0,30(sp)
    b704:	|         move.l 30(sp),d0
    b708:	|     /-- beq.s b71e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b70a:	|     |   move.l 112(sp),-(sp)
    b70e:	|     |   jsr c65a <restoreSnapshot>
    b714:	|     |   addq.l #4,sp
    b716:	|     |   tst.w d0
    b718:	|     +-- bne.s b71e <loadGame+0x2bc>
    b71a:	|     |   clr.w d0
    b71c:	+-----|-- bra.s b758 <loadGame+0x2f6>
	}

	Close (fp);
    b71e:	|     \-> move.l 112(sp),26(sp)
    b724:	|         move.l 1b850 <DOSBase>,d0
    b72a:	|         movea.l d0,a6
    b72c:	|         move.l 26(sp),d1
    b730:	|         jsr -36(a6)
    b734:	|         move.l d0,22(sp)
	clearStackLib ();
    b738:	|         jsr b418 <clearStackLib>

	cameraX = camerX;
    b73e:	|         move.l 66(sp),1b95a <cameraX>
	cameraY = camerY;
    b746:	|         move.l 62(sp),1b95e <cameraY>
	cameraZoom = camerZ;
    b74e:	|         move.l 58(sp),1b1e8 <cameraZoom>

	return TRUE;
    b756:	|         moveq #1,d0
}
    b758:	\-------> movem.l (sp)+,d2-d3/a6
    b75c:	          lea 128(sp),sp
    b760:	          rts

0000b762 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b762:	   /-> lea -64(sp),sp
    b766:	   |   move.l a6,-(sp)
    b768:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b76a:	   |   movea.l 76(sp),a0
    b76e:	   |   move.l (a0),d0
    b770:	   |   move.l 80(sp),-(sp)
    b774:	   |   move.l d0,-(sp)
    b776:	   |   jsr 8d0 <put2bytes>
    b77c:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b77e:	   |   movea.l 76(sp),a0
    b782:	   |   move.l 40(a0),d0
    b786:	/--|-- beq.s b7c2 <saveFunction+0x60>
		FPutC (fp, 1);
    b788:	|  |   move.l 80(sp),52(sp)
    b78e:	|  |   moveq #1,d0
    b790:	|  |   move.l d0,48(sp)
    b794:	|  |   move.l 1b850 <DOSBase>,d0
    b79a:	|  |   movea.l d0,a6
    b79c:	|  |   move.l 52(sp),d1
    b7a0:	|  |   move.l 48(sp),d2
    b7a4:	|  |   jsr -312(a6)
    b7a8:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b7ac:	|  |   movea.l 76(sp),a0
    b7b0:	|  |   move.l 40(a0),d0
    b7b4:	|  |   move.l 80(sp),-(sp)
    b7b8:	|  |   move.l d0,-(sp)
    b7ba:	|  \-- jsr b762 <saveFunction>(pc)
    b7be:	|      addq.l #8,sp
    b7c0:	|  /-- bra.s b7e4 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b7c2:	\--|-> move.l 80(sp),64(sp)
    b7c8:	   |   clr.l 60(sp)
    b7cc:	   |   move.l 1b850 <DOSBase>,d0
    b7d2:	   |   movea.l d0,a6
    b7d4:	   |   move.l 64(sp),d1
    b7d8:	   |   move.l 60(sp),d2
    b7dc:	   |   jsr -312(a6)
    b7e0:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b7e4:	   \-> movea.l 76(sp),a0
    b7e8:	       move.l 12(a0),d0
    b7ec:	       move.l 80(sp),-(sp)
    b7f0:	       move.l d0,-(sp)
    b7f2:	       jsr 958 <put4bytes>
    b7f8:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b7fa:	       movea.l 76(sp),a0
    b7fe:	       move.l 36(a0),d0
    b802:	       move.l 80(sp),-(sp)
    b806:	       move.l d0,-(sp)
    b808:	       jsr 8d0 <put2bytes>
    b80e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b810:	       move.l 80(sp),40(sp)
    b816:	       movea.l 76(sp),a0
    b81a:	       move.w 54(a0),d0
    b81e:	       movea.w d0,a0
    b820:	       move.l a0,36(sp)
    b824:	       move.l 1b850 <DOSBase>,d0
    b82a:	       movea.l d0,a6
    b82c:	       move.l 40(sp),d1
    b830:	       move.l 36(sp),d2
    b834:	       jsr -312(a6)
    b838:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b83c:	       move.l 80(sp),28(sp)
    b842:	       movea.l 76(sp),a0
    b846:	       move.w 48(a0),d0
    b84a:	       movea.w d0,a0
    b84c:	       move.l a0,24(sp)
    b850:	       move.l 1b850 <DOSBase>,d0
    b856:	       movea.l d0,a6
    b858:	       move.l 28(sp),d1
    b85c:	       move.l 24(sp),d2
    b860:	       jsr -312(a6)
    b864:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b868:	       move.l 80(sp),16(sp)
    b86e:	       movea.l 76(sp),a0
    b872:	       move.w 50(a0),d0
    b876:	       movea.w d0,a0
    b878:	       move.l a0,12(sp)
    b87c:	       move.l 1b850 <DOSBase>,d0
    b882:	       movea.l d0,a6
    b884:	       move.l 16(sp),d1
    b888:	       move.l 12(sp),d2
    b88c:	       jsr -312(a6)
    b890:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b894:	       moveq #28,d0
    b896:	       add.l 76(sp),d0
    b89a:	       move.l 80(sp),-(sp)
    b89e:	       move.l d0,-(sp)
    b8a0:	       jsr c01e <saveVariable>
    b8a6:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b8a8:	       movea.l 76(sp),a0
    b8ac:	       move.b 56(a0),d0
    b8b0:	   /-- beq.s b8c0 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b8b2:	   |   pea 181f6 <PutChar+0x1632>
    b8b8:	   |   jsr 16274 <KPrintF>
    b8be:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b8c0:	   \-> movea.l 76(sp),a0
    b8c4:	       move.l 24(a0),d0
    b8c8:	       move.l 80(sp),-(sp)
    b8cc:	       move.l d0,-(sp)
    b8ce:	       jsr be92 <saveStack>
    b8d4:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b8d6:	       clr.l 68(sp)
    b8da:	   /-- bra.s b8fe <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b8dc:	/--|-> movea.l 76(sp),a0
    b8e0:	|  |   move.l 20(a0),d1
    b8e4:	|  |   move.l 68(sp),d0
    b8e8:	|  |   lsl.l #3,d0
    b8ea:	|  |   add.l d1,d0
    b8ec:	|  |   move.l 80(sp),-(sp)
    b8f0:	|  |   move.l d0,-(sp)
    b8f2:	|  |   jsr c01e <saveVariable>
    b8f8:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b8fa:	|  |   addq.l #1,68(sp)
    b8fe:	|  \-> movea.l 76(sp),a0
    b902:	|      move.l 8(a0),d0
    b906:	|      cmp.l 68(sp),d0
    b90a:	\----- bgt.s b8dc <saveFunction+0x17a>
	}
}
    b90c:	       nop
    b90e:	       nop
    b910:	       move.l (sp)+,d2
    b912:	       movea.l (sp)+,a6
    b914:	       lea 64(sp),sp
    b918:	       rts

0000b91a <saveGame>:

BOOL saveGame (char * fname) {
    b91a:	          lea -272(sp),sp
    b91e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b922:	          move.l 288(sp),268(sp)
    b928:	          move.l #1006,264(sp)
    b930:	          move.l 1b850 <DOSBase>,d0
    b936:	          movea.l d0,a6
    b938:	          move.l 268(sp),d1
    b93c:	          move.l 264(sp),d2
    b940:	          jsr -30(a6)
    b944:	          move.l d0,260(sp)
    b948:	          move.l 260(sp),d0
    b94c:	          move.l d0,256(sp)
	if (fp == NULL) {
    b950:	      /-- bne.s b966 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b952:	      |   pea 18218 <PutChar+0x1654>
    b958:	      |   jsr 16274 <KPrintF>
    b95e:	      |   addq.l #4,sp
		return FALSE;
    b960:	      |   clr.w d0
    b962:	/-----|-- bra.w be88 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b966:	|     \-> move.l 256(sp),252(sp)
    b96c:	|         move.l #98869,248(sp)
    b974:	|         moveq #6,d0
    b976:	|         move.l d0,244(sp)
    b97a:	|         move.l 1b850 <DOSBase>,d0
    b980:	|         movea.l d0,a6
    b982:	|         move.l 252(sp),d1
    b986:	|         move.l 248(sp),d2
    b98a:	|         move.l 244(sp),d3
    b98e:	|         jsr -48(a6)
    b992:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b996:	|         move.l 256(sp),236(sp)
    b99c:	|         clr.l 232(sp)
    b9a0:	|         move.l 1b850 <DOSBase>,d0
    b9a6:	|         movea.l d0,a6
    b9a8:	|         move.l 236(sp),d1
    b9ac:	|         move.l 232(sp),d2
    b9b0:	|         jsr -312(a6)
    b9b4:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b9b8:	|         move.l 256(sp),224(sp)
    b9be:	|         clr.l 220(sp)
    b9c2:	|         move.l 1b850 <DOSBase>,d0
    b9c8:	|         movea.l d0,a6
    b9ca:	|         move.l 224(sp),d1
    b9ce:	|         move.l 220(sp),d2
    b9d2:	|         jsr -312(a6)
    b9d6:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b9da:	|         move.l 256(sp),212(sp)
    b9e0:	|         moveq #2,d0
    b9e2:	|         move.l d0,208(sp)
    b9e6:	|         move.l 1b850 <DOSBase>,d0
    b9ec:	|         movea.l d0,a6
    b9ee:	|         move.l 212(sp),d1
    b9f2:	|         move.l 208(sp),d2
    b9f6:	|         jsr -312(a6)
    b9fa:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b9fe:	|         move.l 256(sp),200(sp)
    ba04:	|         moveq #2,d0
    ba06:	|         move.l d0,196(sp)
    ba0a:	|         move.l 1b850 <DOSBase>,d0
    ba10:	|         movea.l d0,a6
    ba12:	|         move.l 200(sp),d1
    ba16:	|         move.l 196(sp),d2
    ba1a:	|         jsr -312(a6)
    ba1e:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    ba22:	|         move.l 256(sp),188(sp)
    ba28:	|         move.l #112618,184(sp)
    ba30:	|         moveq #8,d0
    ba32:	|         move.l d0,180(sp)
    ba36:	|         move.l 1b850 <DOSBase>,d0
    ba3c:	|         movea.l d0,a6
    ba3e:	|         move.l 188(sp),d1
    ba42:	|         move.l 184(sp),d2
    ba46:	|         move.l 180(sp),d3
    ba4a:	|         jsr -48(a6)
    ba4e:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    ba52:	|         move.l 256(sp),172(sp)
    ba58:	|         move.w 1b0a6 <allowAnyFilename>,d0
    ba5e:	|         movea.w d0,a0
    ba60:	|         move.l a0,168(sp)
    ba64:	|         move.l 1b850 <DOSBase>,d0
    ba6a:	|         movea.l d0,a6
    ba6c:	|         move.l 172(sp),d1
    ba70:	|         move.l 168(sp),d2
    ba74:	|         jsr -312(a6)
    ba78:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    ba7c:	|         move.l 256(sp),160(sp)
    ba82:	|         move.w 1b7e8 <captureAllKeys>,d0
    ba88:	|         movea.w d0,a0
    ba8a:	|         move.l a0,156(sp)
    ba8e:	|         move.l 1b850 <DOSBase>,d0
    ba94:	|         movea.l d0,a6
    ba96:	|         move.l 160(sp),d1
    ba9a:	|         move.l 156(sp),d2
    ba9e:	|         jsr -312(a6)
    baa2:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    baa6:	|         move.l 256(sp),148(sp)
    baac:	|         moveq #1,d0
    baae:	|         move.l d0,144(sp)
    bab2:	|         move.l 1b850 <DOSBase>,d0
    bab8:	|         movea.l d0,a6
    baba:	|         move.l 148(sp),d1
    babe:	|         move.l 144(sp),d2
    bac2:	|         jsr -312(a6)
    bac6:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    baca:	|         move.l 256(sp),136(sp)
    bad0:	|         move.l 1b9a8 <fontTableSize>,d0
    bad6:	|         sgt d0
    bad8:	|         neg.b d0
    bada:	|         move.b d0,d0
    badc:	|         andi.l #255,d0
    bae2:	|         move.l d0,132(sp)
    bae6:	|         move.l 1b850 <DOSBase>,d0
    baec:	|         movea.l d0,a6
    baee:	|         move.l 136(sp),d1
    baf2:	|         move.l 132(sp),d2
    baf6:	|         jsr -312(a6)
    bafa:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    bafe:	|         move.l 1b9a8 <fontTableSize>,d0
    bb04:	|     /-- ble.s bb42 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    bb06:	|     |   move.l 1b99c <loadedFontNum>,d0
    bb0c:	|     |   move.l 256(sp),-(sp)
    bb10:	|     |   move.l d0,-(sp)
    bb12:	|     |   jsr 8d0 <put2bytes>
    bb18:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    bb1a:	|     |   move.l 1b998 <fontHeight>,d0
    bb20:	|     |   move.l 256(sp),-(sp)
    bb24:	|     |   move.l d0,-(sp)
    bb26:	|     |   jsr 8d0 <put2bytes>
    bb2c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    bb2e:	|     |   move.l 1b9a0 <fontOrderString>,d0
    bb34:	|     |   move.l 256(sp),-(sp)
    bb38:	|     |   move.l d0,-(sp)
    bb3a:	|     |   jsr bd8 <writeString>
    bb40:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    bb42:	|     \-> move.w 1b74e <fontSpace>,d0
    bb48:	|         movea.w d0,a0
    bb4a:	|         move.l 256(sp),-(sp)
    bb4e:	|         move.l a0,-(sp)
    bb50:	|         jsr a9c <putSigned>
    bb56:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    bb58:	|         move.l 1b95a <cameraX>,d0
    bb5e:	|         move.l 256(sp),-(sp)
    bb62:	|         move.l d0,-(sp)
    bb64:	|         jsr 8d0 <put2bytes>
    bb6a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    bb6c:	|         move.l 1b95e <cameraY>,d0
    bb72:	|         move.l 256(sp),-(sp)
    bb76:	|         move.l d0,-(sp)
    bb78:	|         jsr 8d0 <put2bytes>
    bb7e:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    bb80:	|         move.l 1b1e8 <cameraZoom>,d0
    bb86:	|         move.l 256(sp),-(sp)
    bb8a:	|         move.l d0,-(sp)
    bb8c:	|         jsr a46 <putFloat>
    bb92:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    bb94:	|         move.l 256(sp),124(sp)
    bb9a:	|         move.b 1b1c0 <brightnessLevel>,d0
    bba0:	|         move.b d0,d0
    bba2:	|         andi.l #255,d0
    bba8:	|         move.l d0,120(sp)
    bbac:	|         move.l 1b850 <DOSBase>,d0
    bbb2:	|         movea.l d0,a6
    bbb4:	|         move.l 124(sp),d1
    bbb8:	|         move.l 120(sp),d2
    bbbc:	|         jsr -312(a6)
    bbc0:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    bbc4:	|         move.l 256(sp),-(sp)
    bbc8:	|         jsr 5a08 <saveHandlers>
    bbce:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    bbd0:	|         move.l 256(sp),-(sp)
    bbd4:	|         jsr 14cda <saveRegions>
    bbda:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    bbdc:	|         move.l 1b750 <mouseCursorAnim>,d0
    bbe2:	|         move.l 256(sp),-(sp)
    bbe6:	|         move.l d0,-(sp)
    bbe8:	|         jsr a1c2 <saveAnim>
    bbee:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    bbf0:	|         move.l 1b754 <mouseCursorFrameNum>,d0
    bbf6:	|         move.l 256(sp),-(sp)
    bbfa:	|         move.l d0,-(sp)
    bbfc:	|         jsr 8d0 <put2bytes>
    bc02:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    bc04:	|         move.l 1b7e0 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    bc0c:	|         clr.l 272(sp)
	while (thisFunction) {
    bc10:	|     /-- bra.s bc20 <saveGame+0x306>
		countFunctions ++;
    bc12:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    bc16:	|  |  |   movea.l 276(sp),a0
    bc1a:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    bc20:	|  |  \-> tst.l 276(sp)
    bc24:	|  \----- bne.s bc12 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    bc26:	|         move.l 256(sp),-(sp)
    bc2a:	|         move.l 276(sp),-(sp)
    bc2e:	|         jsr 8d0 <put2bytes>
    bc34:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    bc36:	|         move.l 1b7e0 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    bc3e:	|     /-- bra.s bc5a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    bc40:	|  /--|-> move.l 256(sp),-(sp)
    bc44:	|  |  |   move.l 280(sp),-(sp)
    bc48:	|  |  |   jsr b762 <saveFunction>
    bc4e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    bc50:	|  |  |   movea.l 276(sp),a0
    bc54:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    bc5a:	|  |  \-> tst.l 276(sp)
    bc5e:	|  \----- bne.s bc40 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    bc60:	|         clr.l 280(sp)
    bc64:	|     /-- bra.s bc86 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    bc66:	|  /--|-> move.l 1b7f6 <globalVars>,d1
    bc6c:	|  |  |   move.l 280(sp),d0
    bc70:	|  |  |   lsl.l #3,d0
    bc72:	|  |  |   add.l d1,d0
    bc74:	|  |  |   move.l 256(sp),-(sp)
    bc78:	|  |  |   move.l d0,-(sp)
    bc7a:	|  |  |   jsr c01e <saveVariable>
    bc80:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    bc82:	|  |  |   addq.l #1,280(sp)
    bc86:	|  |  \-> move.l 1b820 <numGlobals>,d0
    bc8c:	|  |      cmp.l 280(sp),d0
    bc90:	|  \----- bgt.s bc66 <saveGame+0x34c>
	}

	savePeople (fp);
    bc92:	|         move.l 256(sp),-(sp)
    bc96:	|         jsr a2ea <savePeople>
    bc9c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    bc9e:	|         movea.l 1b9bc <currentFloor>,a0
    bca4:	|         move.l 8(a0),d0
    bca8:	|  /----- beq.s bce6 <saveGame+0x3cc>
		FPutC (fp, 1);
    bcaa:	|  |      move.l 256(sp),100(sp)
    bcb0:	|  |      moveq #1,d0
    bcb2:	|  |      move.l d0,96(sp)
    bcb6:	|  |      move.l 1b850 <DOSBase>,d0
    bcbc:	|  |      movea.l d0,a6
    bcbe:	|  |      move.l 100(sp),d1
    bcc2:	|  |      move.l 96(sp),d2
    bcc6:	|  |      jsr -312(a6)
    bcca:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    bcce:	|  |      movea.l 1b9bc <currentFloor>,a0
    bcd4:	|  |      move.l (a0),d0
    bcd6:	|  |      move.l 256(sp),-(sp)
    bcda:	|  |      move.l d0,-(sp)
    bcdc:	|  |      jsr 8d0 <put2bytes>
    bce2:	|  |      addq.l #8,sp
    bce4:	|  |  /-- bra.s bd08 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    bce6:	|  \--|-> move.l 256(sp),112(sp)
    bcec:	|     |   clr.l 108(sp)
    bcf0:	|     |   move.l 1b850 <DOSBase>,d0
    bcf6:	|     |   movea.l d0,a6
    bcf8:	|     |   move.l 112(sp),d1
    bcfc:	|     |   move.l 108(sp),d2
    bd00:	|     |   jsr -312(a6)
    bd04:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    bd08:	|     \-> move.l 1b8f8 <zBuffer+0x50>,d0
    bd0e:	|  /----- beq.s bd4a <saveGame+0x430>
		FPutC (fp, 1);
    bd10:	|  |      move.l 256(sp),76(sp)
    bd16:	|  |      moveq #1,d0
    bd18:	|  |      move.l d0,72(sp)
    bd1c:	|  |      move.l 1b850 <DOSBase>,d0
    bd22:	|  |      movea.l d0,a6
    bd24:	|  |      move.l 76(sp),d1
    bd28:	|  |      move.l 72(sp),d2
    bd2c:	|  |      jsr -312(a6)
    bd30:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    bd34:	|  |      move.l 1b8f4 <zBuffer+0x4c>,d0
    bd3a:	|  |      move.l 256(sp),-(sp)
    bd3e:	|  |      move.l d0,-(sp)
    bd40:	|  |      jsr 8d0 <put2bytes>
    bd46:	|  |      addq.l #8,sp
    bd48:	|  |  /-- bra.s bd6c <saveGame+0x452>
	} else FPutC (fp,0);
    bd4a:	|  \--|-> move.l 256(sp),88(sp)
    bd50:	|     |   clr.l 84(sp)
    bd54:	|     |   move.l 1b850 <DOSBase>,d0
    bd5a:	|     |   movea.l d0,a6
    bd5c:	|     |   move.l 88(sp),d1
    bd60:	|     |   move.l 84(sp),d2
    bd64:	|     |   jsr -312(a6)
    bd68:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    bd6c:	|     \-> move.l 256(sp),64(sp)
    bd72:	|         move.l 1b96e <speechMode>,60(sp)
    bd7a:	|         move.l 1b850 <DOSBase>,d0
    bd80:	|         movea.l d0,a6
    bd82:	|         move.l 64(sp),d1
    bd86:	|         move.l 60(sp),d2
    bd8a:	|         jsr -312(a6)
    bd8e:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    bd92:	|         move.b 1b724 <fadeMode>,d0
    bd98:	|         move.b d0,d0
    bd9a:	|         andi.l #255,d0
    bda0:	|         move.l d0,52(sp)
    bda4:	|         move.l 256(sp),48(sp)
    bdaa:	|         move.l 1b850 <DOSBase>,d0
    bdb0:	|         movea.l d0,a6
    bdb2:	|         move.l 52(sp),d1
    bdb6:	|         move.l 48(sp),d2
    bdba:	|         jsr -312(a6)
    bdbe:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    bdc2:	|         move.l 1b8a4 <speech>,d0
    bdc8:	|         move.l 256(sp),-(sp)
    bdcc:	|         move.l d0,-(sp)
    bdce:	|         jsr 7064 <saveSpeech>
    bdd4:	|         addq.l #8,sp
	saveStatusBars (fp);
    bdd6:	|         move.l 256(sp),-(sp)
    bdda:	|         jsr 6a60 <saveStatusBars>
    bde0:	|         addq.l #4,sp
	saveSounds (fp);
    bde2:	|         move.l 256(sp),-(sp)
    bde6:	|         jsr c388 <saveSounds>
    bdec:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    bdee:	|         move.w 1b958 <saveEncoding>,d0
    bdf4:	|         move.w d0,d0
    bdf6:	|         andi.l #65535,d0
    bdfc:	|         move.l 256(sp),-(sp)
    be00:	|         move.l d0,-(sp)
    be02:	|         jsr 8d0 <put2bytes>
    be08:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    be0a:	|         move.l 1b94a <parallaxStuff>,d0
    be10:	|         move.l 256(sp),-(sp)
    be14:	|         move.l d0,-(sp)
    be16:	|         jsr c680 <saveParallaxRecursive>
    be1c:	|         addq.l #8,sp
	FPutC (fp, 0);
    be1e:	|         move.l 256(sp),40(sp)
    be24:	|         clr.l 36(sp)
    be28:	|         move.l 1b850 <DOSBase>,d0
    be2e:	|         movea.l d0,a6
    be30:	|         move.l 40(sp),d1
    be34:	|         move.l 36(sp),d2
    be38:	|         jsr -312(a6)
    be3c:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    be40:	|         move.l 256(sp),28(sp)
    be46:	|         move.l 1b1c6 <languageNum>,24(sp)
    be4e:	|         move.l 1b850 <DOSBase>,d0
    be54:	|         movea.l d0,a6
    be56:	|         move.l 28(sp),d1
    be5a:	|         move.l 24(sp),d2
    be5e:	|         jsr -312(a6)
    be62:	|         move.l d0,20(sp)

	Close(fp);
    be66:	|         move.l 256(sp),16(sp)
    be6c:	|         move.l 1b850 <DOSBase>,d0
    be72:	|         movea.l d0,a6
    be74:	|         move.l 16(sp),d1
    be78:	|         jsr -36(a6)
    be7c:	|         move.l d0,12(sp)
	clearStackLib ();
    be80:	|         jsr b418 <clearStackLib>
	return TRUE;
    be86:	|         moveq #1,d0
}
    be88:	\-------> movem.l (sp)+,d2-d3/a6
    be8c:	          lea 272(sp),sp
    be90:	          rts

0000be92 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    be92:	       lea -12(sp),sp
	int elements = 0;
    be96:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    be9a:	       move.l 16(sp),(sp)
	while (search) {
    be9e:	   /-- bra.s beaa <saveStack+0x18>
		elements ++;
    bea0:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bea4:	|  |   movea.l (sp),a0
    bea6:	|  |   move.l 8(a0),(sp)
	while (search) {
    beaa:	|  \-> tst.l (sp)
    beac:	\----- bne.s bea0 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    beae:	       move.l 20(sp),-(sp)
    beb2:	       move.l 12(sp),-(sp)
    beb6:	       jsr 8d0 <put2bytes>
    bebc:	       addq.l #8,sp
	search = vs;
    bebe:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    bec2:	       clr.l 4(sp)
    bec6:	   /-- bra.s bee2 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    bec8:	/--|-> move.l (sp),d0
    beca:	|  |   move.l 20(sp),-(sp)
    bece:	|  |   move.l d0,-(sp)
    bed0:	|  |   jsr c01e <saveVariable>
    bed6:	|  |   addq.l #8,sp
		search = search -> next;
    bed8:	|  |   movea.l (sp),a0
    beda:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    bede:	|  |   addq.l #1,4(sp)
    bee2:	|  \-> move.l 4(sp),d0
    bee6:	|      cmp.l 8(sp),d0
    beea:	\----- blt.s bec8 <saveStack+0x36>
	}
}
    beec:	       nop
    beee:	       nop
    bef0:	       lea 12(sp),sp
    bef4:	       rts

0000bef6 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    bef6:	             lea -44(sp),sp
    befa:	             move.l a6,-(sp)
    befc:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    befe:	             move.l 1b92c <stackLib>,48(sp)
	int a = 0;
    bf06:	             clr.l 44(sp)
	while (s) {
    bf0a:	      /----- bra.s bf68 <saveStackRef+0x72>
		if (s -> stack == vs) {
    bf0c:	   /--|----> movea.l 48(sp),a0
    bf10:	   |  |      move.l (a0),d0
    bf12:	   |  |      cmp.l 56(sp),d0
    bf16:	   |  |  /-- bne.s bf5a <saveStackRef+0x64>
			FPutC (fp, 1);
    bf18:	   |  |  |   move.l 60(sp),16(sp)
    bf1e:	   |  |  |   moveq #1,d0
    bf20:	   |  |  |   move.l d0,12(sp)
    bf24:	   |  |  |   move.l 1b850 <DOSBase>,d0
    bf2a:	   |  |  |   movea.l d0,a6
    bf2c:	   |  |  |   move.l 16(sp),d1
    bf30:	   |  |  |   move.l 12(sp),d2
    bf34:	   |  |  |   jsr -312(a6)
    bf38:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    bf3c:	   |  |  |   move.l 1b928 <stackLibTotal>,d0
    bf42:	   |  |  |   sub.l 44(sp),d0
    bf46:	   |  |  |   move.l 60(sp),-(sp)
    bf4a:	   |  |  |   move.l d0,-(sp)
    bf4c:	   |  |  |   jsr 8d0 <put2bytes>
    bf52:	   |  |  |   addq.l #8,sp
			return TRUE;
    bf54:	   |  |  |   moveq #1,d0
    bf56:	/--|--|--|-- bra.w c014 <saveStackRef+0x11e>
		}
		s = s -> next;
    bf5a:	|  |  |  \-> movea.l 48(sp),a0
    bf5e:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bf64:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bf68:	|  |  \----> tst.l 48(sp)
    bf6c:	|  \-------- bne.s bf0c <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    bf6e:	|            move.l 60(sp),40(sp)
    bf74:	|            clr.l 36(sp)
    bf78:	|            move.l 1b850 <DOSBase>,d0
    bf7e:	|            movea.l d0,a6
    bf80:	|            move.l 40(sp),d1
    bf84:	|            move.l 36(sp),d2
    bf88:	|            jsr -312(a6)
    bf8c:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bf90:	|            movea.l 56(sp),a0
    bf94:	|            move.l (a0),d0
    bf96:	|            move.l 60(sp),-(sp)
    bf9a:	|            move.l d0,-(sp)
    bf9c:	|            jsr be92 <saveStack>
    bfa2:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bfa4:	|            moveq #8,d0
    bfa6:	|            move.l d0,28(sp)
    bfaa:	|            clr.l 24(sp)
    bfae:	|            move.l 1b848 <SysBase>,d0
    bfb4:	|            movea.l d0,a6
    bfb6:	|            move.l 28(sp),d0
    bfba:	|            move.l 24(sp),d1
    bfbe:	|            jsr -684(a6)
    bfc2:	|            move.l d0,20(sp)
    bfc6:	|            move.l 20(sp),d0
    bfca:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bfce:	|            move.l 1b928 <stackLibTotal>,d0
    bfd4:	|            addq.l #1,d0
    bfd6:	|            move.l d0,1b928 <stackLibTotal>
	if (! s) {
    bfdc:	|            tst.l 48(sp)
    bfe0:	|        /-- bne.s bff4 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bfe2:	|        |   pea 18264 <PutChar+0x16a0>
    bfe8:	|        |   jsr 16274 <KPrintF>
    bfee:	|        |   addq.l #4,sp
		return FALSE;
    bff0:	|        |   clr.w d0
    bff2:	+--------|-- bra.s c014 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bff4:	|        \-> move.l 1b92c <stackLib>,d0
    bffa:	|            movea.l 48(sp),a0
    bffe:	|            move.l d0,4(a0)
	s -> stack = vs;
    c002:	|            movea.l 48(sp),a0
    c006:	|            move.l 56(sp),(a0)
	stackLib = s;
    c00a:	|            move.l 48(sp),1b92c <stackLib>
	return TRUE;
    c012:	|            moveq #1,d0
}
    c014:	\----------> move.l (sp)+,d2
    c016:	             movea.l (sp)+,a6
    c018:	             lea 44(sp),sp
    c01c:	             rts

0000c01e <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    c01e:	          lea -12(sp),sp
    c022:	          move.l a6,-(sp)
    c024:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    c026:	          move.l 28(sp),16(sp)
    c02c:	          movea.l 24(sp),a0
    c030:	          move.l (a0),d0
    c032:	          move.l d0,12(sp)
    c036:	          move.l 1b850 <DOSBase>,d0
    c03c:	          movea.l d0,a6
    c03e:	          move.l 16(sp),d1
    c042:	          move.l 12(sp),d2
    c046:	          jsr -312(a6)
    c04a:	          move.l d0,8(sp)
	switch (from -> varType) {
    c04e:	          movea.l 24(sp),a0
    c052:	          move.l (a0),d0
    c054:	          moveq #9,d1
    c056:	          cmp.l d0,d1
    c058:	      /-- bcs.w c108 <saveVariable+0xea>
    c05c:	      |   add.l d0,d0
    c05e:	      |   movea.l d0,a0
    c060:	      |   adda.l #49260,a0
    c066:	      |   move.w (a0),d0
    c068:	      |   jmp (c06c <saveVariable+0x4e>,pc,d0.w)
    c06c:	      |   ori.l #1310740,(a0)+
    c072:	      |   ori.b #20,(20,a0,d0.w)
    c078:	      |   .short 0x004c
    c07a:	      |   ori.b #126,(a4)
    c07e:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    c082:	      |   ori.b #40,(a0)+
    c086:	      |   ori.b #47,d4
    c08a:	      |   ori.b #0,(a4)+
    c08e:	      |   jsr 958 <put4bytes>
    c094:	      |   addq.l #8,sp
		return TRUE;
    c096:	      |   moveq #1,d0
    c098:	/-----|-- bra.w c144 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    c09c:	|     |   movea.l 24(sp),a0
    c0a0:	|     |   move.l 4(a0),d0
    c0a4:	|     |   move.l 28(sp),-(sp)
    c0a8:	|     |   move.l d0,-(sp)
    c0aa:	|     |   jsr bd8 <writeString>
    c0b0:	|     |   addq.l #8,sp
		return TRUE;
    c0b2:	|     |   moveq #1,d0
    c0b4:	+-----|-- bra.w c144 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    c0b8:	|     |   movea.l 24(sp),a0
    c0bc:	|     |   move.l 4(a0),d0
    c0c0:	|     |   move.l 28(sp),-(sp)
    c0c4:	|     |   move.l d0,-(sp)
    c0c6:	|     |   jsr bef6 <saveStackRef>
    c0cc:	|     |   addq.l #8,sp
    c0ce:	+-----|-- bra.s c144 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    c0d0:	|     |   movea.l 24(sp),a0
    c0d4:	|     |   move.l 4(a0),d0
    c0d8:	|     |   move.l 28(sp),-(sp)
    c0dc:	|     |   move.l d0,-(sp)
    c0de:	|     |   jsr a28c <saveCostume>
    c0e4:	|     |   addq.l #8,sp
		return FALSE;
    c0e6:	|     |   clr.w d0
    c0e8:	+-----|-- bra.s c144 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    c0ea:	|     |   movea.l 24(sp),a0
    c0ee:	|     |   move.l 4(a0),d0
    c0f2:	|     |   move.l 28(sp),-(sp)
    c0f6:	|     |   move.l d0,-(sp)
    c0f8:	|     |   jsr a1c2 <saveAnim>
    c0fe:	|     |   addq.l #8,sp
		return FALSE;
    c100:	|     |   clr.w d0
    c102:	+-----|-- bra.s c144 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    c104:	|     |   clr.w d0
    c106:	+-----|-- bra.s c144 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    c108:	|     \-> movea.l 24(sp),a0
    c10c:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c10e:	|         moveq #10,d1
    c110:	|         cmp.l d0,d1
    c112:	|  /----- bcs.s c12c <saveVariable+0x10e>
						typeName[from->varType] :
    c114:	|  |      movea.l 24(sp),a0
    c118:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c11a:	|  |      add.l d0,d0
    c11c:	|  |      movea.l d0,a1
    c11e:	|  |      adda.l d0,a1
    c120:	|  |      lea 1b726 <typeName>,a0
    c126:	|  |      move.l (0,a1,a0.l),d0
    c12a:	|  |  /-- bra.s c132 <saveVariable+0x114>
    c12c:	|  \--|-> move.l #98953,d0
    c132:	|     \-> move.l d0,-(sp)
    c134:	|         pea 18290 <PutChar+0x16cc>
    c13a:	|         jsr 16274 <KPrintF>
    c140:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    c142:	|         moveq #1,d0
    c144:	\-------> move.l (sp)+,d2
    c146:	          movea.l (sp)+,a6
    c148:	          lea 12(sp),sp
    c14c:	          rts

0000c14e <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    c14e:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    c152:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    c15a:	          movea.l 4(sp),a0
    c15e:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    c164:	          movea.l 4(sp),a0
    c168:	          move.w 10(a0),d0
    c16c:	          lsr.w #8,d0
    c16e:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    c172:	          movea.l 4(sp),a0
    c176:	          move.w 10(a0),d0
    c17a:	          move.b d0,(sp)

    if(counterx_new)
    c17c:	/-------- beq.w c224 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    c180:	|         clr.w d1
    c182:	|         move.b (sp),d1
    c184:	|         move.l 1b934 <counterx_old>,d0
    c18a:	|         move.l d0,d0
    c18c:	|         sub.w d0,d1
    c18e:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    c192:	|         cmpi.w #128,10(sp)
    c198:	|     /-- blt.s c1b0 <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    c19a:	|     |   move.w #1,1b7fe <input+0x4>
            counterx_diff -= 256;    
    c1a2:	|     |   move.w 10(sp),d0
    c1a6:	|     |   addi.w #-256,d0
    c1aa:	|     |   move.w d0,10(sp)
    c1ae:	|  /--|-- bra.s c1dc <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    c1b0:	|  |  \-> cmpi.w #-129,10(sp)
    c1b6:	|  |  /-- bgt.s c1ce <CsiCheckInput+0x80>
            counterx_diff += 256;
    c1b8:	|  |  |   move.w 10(sp),d0
    c1bc:	|  |  |   addi.w #256,d0
    c1c0:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    c1c4:	|  |  |   move.w #1,1b7fe <input+0x4>
    c1cc:	|  +--|-- bra.s c1dc <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    c1ce:	|  |  \-> tst.w 10(sp)
    c1d2:	|  +----- beq.s c1dc <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    c1d4:	|  |      move.w #1,1b7fe <input+0x4>
        }

        input.mouseX += counterx_diff;
    c1dc:	|  \----> move.l 1b804 <input+0xa>,d0
    c1e2:	|         movea.w 10(sp),a0
    c1e6:	|         add.l a0,d0
    c1e8:	|         move.l d0,1b804 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    c1ee:	|         move.l 1b804 <input+0xa>,d1
    c1f4:	|         move.l 1b79c <winWidth>,d0
    c1fa:	|         cmp.l d1,d0
    c1fc:	|     /-- bge.s c20c <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    c1fe:	|     |   move.l 1b79c <winWidth>,d0
    c204:	|     |   move.l d0,1b804 <input+0xa>
    c20a:	|  /--|-- bra.s c21a <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    c20c:	|  |  \-> move.l 1b804 <input+0xa>,d0
    c212:	|  +----- bpl.s c21a <CsiCheckInput+0xcc>
            input.mouseX = 0;
    c214:	|  |      clr.l 1b804 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    c21a:	|  \----> moveq #0,d0
    c21c:	|         move.b (sp),d0
    c21e:	|         move.l d0,1b934 <counterx_old>
    }    

    if(countery_new)
    c224:	\-------> tst.b 1(sp)
    c228:	/-------- beq.w c2d4 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    c22c:	|         clr.w d1
    c22e:	|         move.b 1(sp),d1
    c232:	|         move.l 1b938 <countery_old>,d0
    c238:	|         move.l d0,d0
    c23a:	|         sub.w d0,d1
    c23c:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    c240:	|         cmpi.w #128,8(sp)
    c246:	|     /-- blt.s c25e <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    c248:	|     |   move.w #1,1b7fe <input+0x4>
            countery_diff -= 256;    
    c250:	|     |   move.w 8(sp),d0
    c254:	|     |   addi.w #-256,d0
    c258:	|     |   move.w d0,8(sp)
    c25c:	|  /--|-- bra.s c28a <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    c25e:	|  |  \-> cmpi.w #-129,8(sp)
    c264:	|  |  /-- bgt.s c27c <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    c266:	|  |  |   move.w #1,1b7fe <input+0x4>
            countery_diff += 256;
    c26e:	|  |  |   move.w 8(sp),d0
    c272:	|  |  |   addi.w #256,d0
    c276:	|  |  |   move.w d0,8(sp)
    c27a:	|  +--|-- bra.s c28a <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    c27c:	|  |  \-> tst.w 8(sp)
    c280:	|  +----- beq.s c28a <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    c282:	|  |      move.w #1,1b7fe <input+0x4>
        }

        input.mouseY += countery_diff;
    c28a:	|  \----> move.l 1b808 <input+0xe>,d0
    c290:	|         movea.w 8(sp),a0
    c294:	|         add.l a0,d0
    c296:	|         move.l d0,1b808 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    c29c:	|         move.l 1b808 <input+0xe>,d1
    c2a2:	|         move.l 1b7a0 <winHeight>,d0
    c2a8:	|         cmp.l d1,d0
    c2aa:	|     /-- bge.s c2ba <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    c2ac:	|     |   move.l 1b7a0 <winHeight>,d0
    c2b2:	|     |   move.l d0,1b808 <input+0xe>
    c2b8:	|  /--|-- bra.s c2c8 <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    c2ba:	|  |  \-> move.l 1b808 <input+0xe>,d0
    c2c0:	|  +----- bpl.s c2c8 <CsiCheckInput+0x17a>
            input.mouseY = 0;
    c2c2:	|  |      clr.l 1b808 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    c2c8:	|  \----> moveq #0,d0
    c2ca:	|         move.b 1(sp),d0
    c2ce:	|         move.l d0,1b938 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    c2d4:	\-------> move.w 1b7fa <input>,d0
    c2da:	      /-- beq.s c300 <CsiCheckInput+0x1b2>
    c2dc:	      |   movea.l #12574721,a0
    c2e2:	      |   move.b (a0),d0
    c2e4:	      |   move.b d0,d0
    c2e6:	      |   andi.l #255,d0
    c2ec:	      |   moveq #64,d1
    c2ee:	      |   and.l d1,d0
    c2f0:	      +-- beq.s c300 <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    c2f2:	      |   clr.w 1b7fa <input>
        input.leftRelease = TRUE;
    c2f8:	      |   move.w #1,1b800 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c300:	      \-> move.w 1b7fc <input+0x2>,d0
    c306:	      /-- beq.s c32e <CsiCheckInput+0x1e0>
    c308:	      |   movea.l #14675990,a0
    c30e:	      |   move.w (a0),d0
    c310:	      |   move.w d0,d0
    c312:	      |   andi.l #65535,d0
    c318:	      |   andi.l #1024,d0
    c31e:	      +-- beq.s c32e <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    c320:	      |   clr.w 1b7fc <input+0x2>
        input.rightRelease = TRUE;
    c326:	      |   move.w #1,1b802 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c32e:	      \-> movea.l #12574721,a0
    c334:	          move.b (a0),d0
    c336:	          move.b d0,d0
    c338:	          andi.l #255,d0
    c33e:	          moveq #64,d1
    c340:	          and.l d1,d0
    c342:	      /-- bne.s c34c <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    c344:	      |   move.w #1,1b7fa <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c34c:	      \-> movea.l #14675990,a0
    c352:	          move.w (a0),d0
    c354:	          move.w d0,d0
    c356:	          andi.l #65535,d0
    c35c:	          andi.l #1024,d0
    c362:	      /-- bne.s c36c <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c364:	      |   move.w #1,1b7fc <input+0x2>
    }

    c36c:	      \-> nop
    c36e:	          lea 12(sp),sp
    c372:	          rts

0000c374 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c374:	moveq #0,d0
}
    c376:	rts

0000c378 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c378:	nop
    c37a:	rts

0000c37c <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c37c:	nop
    c37e:	rts

0000c380 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c380:	moveq #1,d0
}
    c382:	rts

0000c384 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c384:	nop
    c386:	rts

0000c388 <saveSounds>:

void saveSounds (BPTR fp) {
    c388:	lea -12(sp),sp
    c38c:	move.l a6,-(sp)
    c38e:	move.l d2,-(sp)
	FPutC (fp,0);
    c390:	move.l 24(sp),16(sp)
    c396:	clr.l 12(sp)
    c39a:	move.l 1b850 <DOSBase>,d0
    c3a0:	movea.l d0,a6
    c3a2:	move.l 16(sp),d1
    c3a6:	move.l 12(sp),d2
    c3aa:	jsr -312(a6)
    c3ae:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c3b2:	move.l 1b1e4 <defSoundVol>,d0
    c3b8:	move.l 24(sp),-(sp)
    c3bc:	move.l d0,-(sp)
    c3be:	jsr 8d0 <put2bytes>
    c3c4:	addq.l #8,sp
	put2bytes (defVol, fp);
    c3c6:	move.l 1b1e0 <defVol>,d0
    c3cc:	move.l 24(sp),-(sp)
    c3d0:	move.l d0,-(sp)
    c3d2:	jsr 8d0 <put2bytes>
    c3d8:	addq.l #8,sp
}
    c3da:	nop
    c3dc:	move.l (sp)+,d2
    c3de:	movea.l (sp)+,a6
    c3e0:	lea 12(sp),sp
    c3e4:	rts

0000c3e6 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c3e6:	move.l 4(sp),1b1e0 <defVol>
}
    c3ee:	nop
    c3f0:	rts

0000c3f2 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c3f2:	move.l 4(sp),1b1e4 <defSoundVol>
}
    c3fa:	nop
    c3fc:	rts

0000c3fe <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c3fe:	nop
    c400:	rts

0000c402 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c402:	nop
    c404:	rts

0000c406 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c406:	nop
    c408:	rts

0000c40a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c40a:	subq.l #4,sp
    c40c:	move.l 12(sp),d0
    c410:	move.w d0,d0
    c412:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c416:	moveq #1,d0
}
    c418:	addq.l #4,sp
    c41a:	rts

0000c41c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c41c:	nop
    c41e:	rts

0000c420 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c420:	move.l 16(sp),-(sp)
    c424:	move.l 16(sp),-(sp)
    c428:	jsr e0e <CstBlankScreen>
    c42e:	addq.l #8,sp
}
    c430:	nop
    c432:	rts

0000c434 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c434:	pea 182b3 <PutChar+0x16ef>
    c43a:	jsr 16274 <KPrintF>
    c440:	addq.l #4,sp
}
    c442:	nop
    c444:	rts

0000c446 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c446:	movea.l 8(sp),a1
    c44a:	movea.l 12(sp),a0
    c44e:	move.l 8(sp),d1
    c452:	move.l 4(sp),d0
    c456:	move.l a1,-(sp)
    c458:	move.l a0,-(sp)
    c45a:	move.l d1,-(sp)
    c45c:	move.l d0,-(sp)
    c45e:	jsr 2ebc <drawLine>
    c464:	lea 16(sp),sp
}
    c468:	nop
    c46a:	rts

0000c46c <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c46c:	movea.l 12(sp),a1
    c470:	movea.l 4(sp),a0
    c474:	move.l 8(sp),d1
    c478:	move.l 4(sp),d0
    c47c:	move.l a1,-(sp)
    c47e:	move.l a0,-(sp)
    c480:	move.l d1,-(sp)
    c482:	move.l d0,-(sp)
    c484:	jsr 2ebc <drawLine>
    c48a:	lea 16(sp),sp
}
    c48e:	nop
    c490:	rts

0000c492 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c492:	pea 182ec <PutChar+0x1728>
    c498:	jsr 16274 <KPrintF>
    c49e:	addq.l #4,sp
}
    c4a0:	nop
    c4a2:	rts

0000c4a4 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c4a4:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c4aa:	pea 1b944 <backdropTextureName>
    c4b0:	pea 1 <_start+0x1>
    c4b4:	jsr 303e <deleteTextures>
    c4ba:	addq.l #8,sp
	backdropTextureName = 0;
    c4bc:	clr.l 1b944 <backdropTextureName>
	backdropExists = FALSE;
    c4c2:	clr.w 1b948 <backdropExists>
}
    c4c8:	nop
    c4ca:	rts

0000c4cc <killParallax>:

void killParallax () {
    c4cc:	          lea -12(sp),sp
    c4d0:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c4d2:	   /----- bra.s c53e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c4d4:	/--|----> move.l 1b94a <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c4dc:	|  |      movea.l 12(sp),a0
    c4e0:	|  |      move.l 42(a0),d0
    c4e4:	|  |      move.l d0,1b94a <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c4ea:	|  |      move.l 12(sp),d0
    c4ee:	|  |      addq.l #4,d0
    c4f0:	|  |      move.l d0,-(sp)
    c4f2:	|  |      pea 1 <_start+0x1>
    c4f6:	|  |      jsr 303e <deleteTextures>
    c4fc:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c4fe:	|  |      movea.l 12(sp),a0
    c502:	|  |      move.l (a0),d0
    c504:	|  |  /-- beq.s c51e <killParallax+0x52>
    c506:	|  |  |   movea.l 12(sp),a0
    c50a:	|  |  |   move.l (a0),8(sp)
    c50e:	|  |  |   move.l 1b848 <SysBase>,d0
    c514:	|  |  |   movea.l d0,a6
    c516:	|  |  |   movea.l 8(sp),a1
    c51a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c51e:	|  |  \-> tst.l 12(sp)
    c522:	|  |  /-- beq.s c53a <killParallax+0x6e>
    c524:	|  |  |   move.l 12(sp),4(sp)
    c52a:	|  |  |   move.l 1b848 <SysBase>,d0
    c530:	|  |  |   movea.l d0,a6
    c532:	|  |  |   movea.l 4(sp),a1
    c536:	|  |  |   jsr -690(a6)
		k = NULL;
    c53a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c53e:	|  \----> move.l 1b94a <parallaxStuff>,d0
    c544:	\-------- bne.s c4d4 <killParallax+0x8>
	}
}
    c546:	          nop
    c548:	          nop
    c54a:	          movea.l (sp)+,a6
    c54c:	          lea 12(sp),sp
    c550:	          rts

0000c552 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c552:	       move.l 4(sp),-(sp)
    c556:	       jsr 5dca <openFileFromNum>
    c55c:	       addq.l #4,sp
    c55e:	       tst.l d0
    c560:	   /-- bne.s c572 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c562:	   |   pea 1830d <PutChar+0x1749>
    c568:	   |   jsr 16274 <KPrintF>
    c56e:	   |   addq.l #4,sp
		return;
    c570:	/--|-- bra.s c592 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c572:	|  \-> move.l 1b830 <bigDataFile>,d0
    c578:	|      move.l 12(sp),-(sp)
    c57c:	|      move.l 12(sp),-(sp)
    c580:	|      move.l d0,-(sp)
    c582:	|      jsr 1760 <CstLoadBackdrop>
    c588:	|      lea 12(sp),sp
	finishAccess ();
    c58c:	|      jsr 5cc2 <finishAccess>
	
}
    c592:	\----> rts

0000c594 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c594:	subq.l #8,sp
    c596:	movea.l 12(sp),a0
    c59a:	move.l 16(sp),d1
    c59e:	move.l 20(sp),d0
    c5a2:	movea.w a0,a0
    c5a4:	move.w a0,6(sp)
    c5a8:	move.w d1,d1
    c5aa:	move.w d1,4(sp)
    c5ae:	move.w d0,d0
    c5b0:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c5b4:	pea 1835c <PutChar+0x1798>
    c5ba:	jsr 16274 <KPrintF>
    c5c0:	addq.l #4,sp

}
    c5c2:	nop
    c5c4:	addq.l #8,sp
    c5c6:	rts

0000c5c8 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c5c8:	pea 1837f <PutChar+0x17bb>
    c5ce:	jsr 16274 <KPrintF>
    c5d4:	addq.l #4,sp
}
    c5d6:	nop
    c5d8:	rts

0000c5da <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c5da:	pea 1b94e <snapshotTextureName>
    c5e0:	pea 1 <_start+0x1>
    c5e4:	jsr 303e <deleteTextures>
    c5ea:	addq.l #8,sp
	snapshotTextureName = 0;
    c5ec:	clr.l 1b94e <snapshotTextureName>
}
    c5f2:	nop
    c5f4:	rts

0000c5f6 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c5f6:	clr.l 1b95a <cameraX>
	cameraY = 0;
    c5fc:	clr.l 1b95e <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c602:	move.l 1b940 <sceneHeight>,d0
    c608:	move.l d0,d1
    c60a:	move.l 1b93c <sceneWidth>,d0
    c610:	move.l d1,-(sp)
    c612:	move.l d0,-(sp)
    c614:	jsr 2a7e <CstReserveBackdrop>
    c61a:	addq.l #8,sp
}
    c61c:	rts

0000c61e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c61e:	jsr c4a4 <killBackDrop>
	killParallax ();
    c624:	jsr c4cc <killParallax>
	killZBuffer ();
    c62a:	jsr 775e <killZBuffer>
	sceneWidth = x;
    c630:	move.l 4(sp),d0
    c634:	move.l d0,1b93c <sceneWidth>
	sceneHeight = y;
    c63a:	move.l 8(sp),d0
    c63e:	move.l d0,1b940 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c644:	pea 183b8 <PutChar+0x17f4>
    c64a:	jsr 16274 <KPrintF>
    c650:	addq.l #4,sp
	return reserveBackdrop();
    c652:	jsr c5f6 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c658:	rts

0000c65a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c65a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c65c:	move.l 12(sp),-(sp)
    c660:	jsr 6bc <get2bytes>
    c666:	addq.l #4,sp
    c668:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c66c:	move.l 12(sp),-(sp)
    c670:	jsr 6bc <get2bytes>
    c676:	addq.l #4,sp
    c678:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c67a:	moveq #1,d0
}
    c67c:	addq.l #8,sp
    c67e:	rts

0000c680 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c680:	   /-> lea -12(sp),sp
    c684:	   |   move.l a6,-(sp)
    c686:	   |   move.l d2,-(sp)
	if (me) {
    c688:	   |   tst.l 24(sp)
    c68c:	/--|-- beq.w c722 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c690:	|  |   movea.l 24(sp),a0
    c694:	|  |   move.l 42(a0),d0
    c698:	|  |   move.l 28(sp),-(sp)
    c69c:	|  |   move.l d0,-(sp)
    c69e:	|  \-- jsr c680 <saveParallaxRecursive>(pc)
    c6a2:	|      addq.l #8,sp
		FPutC (fp, 1);
    c6a4:	|      move.l 28(sp),16(sp)
    c6aa:	|      moveq #1,d0
    c6ac:	|      move.l d0,12(sp)
    c6b0:	|      move.l 1b850 <DOSBase>,d0
    c6b6:	|      movea.l d0,a6
    c6b8:	|      move.l 16(sp),d1
    c6bc:	|      move.l 12(sp),d2
    c6c0:	|      jsr -312(a6)
    c6c4:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c6c8:	|      movea.l 24(sp),a0
    c6cc:	|      move.w 28(a0),d0
    c6d0:	|      move.w d0,d0
    c6d2:	|      andi.l #65535,d0
    c6d8:	|      move.l 28(sp),-(sp)
    c6dc:	|      move.l d0,-(sp)
    c6de:	|      jsr 8d0 <put2bytes>
    c6e4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c6e6:	|      movea.l 24(sp),a0
    c6ea:	|      move.w 30(a0),d0
    c6ee:	|      move.w d0,d0
    c6f0:	|      andi.l #65535,d0
    c6f6:	|      move.l 28(sp),-(sp)
    c6fa:	|      move.l d0,-(sp)
    c6fc:	|      jsr 8d0 <put2bytes>
    c702:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c704:	|      movea.l 24(sp),a0
    c708:	|      move.w 32(a0),d0
    c70c:	|      move.w d0,d0
    c70e:	|      andi.l #65535,d0
    c714:	|      move.l 28(sp),-(sp)
    c718:	|      move.l d0,-(sp)
    c71a:	|      jsr 8d0 <put2bytes>
    c720:	|      addq.l #8,sp
	}
}
    c722:	\----> nop
    c724:	       move.l (sp)+,d2
    c726:	       movea.l (sp)+,a6
    c728:	       lea 12(sp),sp
    c72c:	       rts

0000c72e <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c72e:	pea 183df <PutChar+0x181b>
    c734:	jsr 16274 <KPrintF>
    c73a:	addq.l #4,sp
	return TRUE;
    c73c:	moveq #1,d0
    c73e:	rts

0000c740 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c740:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c742:	             move.l 1b952 <allObjectTypes>,(sp)

	while (huntType) {
    c748:	      /----- bra.s c760 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c74a:	   /--|----> movea.l (sp),a0
    c74c:	   |  |      move.l 4(a0),d0
    c750:	   |  |      cmp.l 8(sp),d0
    c754:	   |  |  /-- bne.s c75a <findObjectType+0x1a>
    c756:	   |  |  |   move.l (sp),d0
    c758:	/--|--|--|-- bra.s c770 <findObjectType+0x30>
		huntType = huntType -> next;
    c75a:	|  |  |  \-> movea.l (sp),a0
    c75c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c760:	|  |  \----> tst.l (sp)
    c762:	|  \-------- bne.s c74a <findObjectType+0xa>
	}

	return loadObjectType (i);
    c764:	|            move.l 8(sp),-(sp)
    c768:	|            jsr c830 <loadObjectType>
    c76e:	|            addq.l #4,sp
}
    c770:	\----------> addq.l #4,sp
    c772:	             rts

0000c774 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c774:	             lea -12(sp),sp
	int i, num = 0;
    c778:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c77c:	             move.l 20(sp),-(sp)
    c780:	             jsr c740 <findObjectType>
    c786:	             addq.l #4,sp
    c788:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c78a:	             clr.l 8(sp)
    c78e:	   /-------- bra.s c7c4 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c790:	/--|-------> movea.l (sp),a0
    c792:	|  |         move.l 38(a0),d1
    c796:	|  |         move.l 8(sp),d0
    c79a:	|  |         lsl.l #3,d0
    c79c:	|  |         movea.l d1,a0
    c79e:	|  |         adda.l d0,a0
    c7a0:	|  |         move.l (a0),d0
    c7a2:	|  |         cmp.l 16(sp),d0
    c7a6:	|  |  /----- bne.s c7c0 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c7a8:	|  |  |      movea.l (sp),a0
    c7aa:	|  |  |      move.l 38(a0),d1
    c7ae:	|  |  |      move.l 8(sp),d0
    c7b2:	|  |  |      lsl.l #3,d0
    c7b4:	|  |  |      movea.l d1,a0
    c7b6:	|  |  |      adda.l d0,a0
    c7b8:	|  |  |      move.l 4(a0),4(sp)
			break;
    c7be:	|  |  |  /-- bra.s c7d0 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c7c0:	|  |  \--|-> addq.l #1,8(sp)
    c7c4:	|  \-----|-> movea.l (sp),a0
    c7c6:	|        |   move.l 16(a0),d0
    c7ca:	|        |   cmp.l 8(sp),d0
    c7ce:	\--------|-- bgt.s c790 <getCombinationFunction+0x1c>
		}
	}

	return num;
    c7d0:	         \-> move.l 4(sp),d0
}
    c7d4:	             lea 12(sp),sp
    c7d8:	             rts

0000c7da <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c7da:	moveq #1,d0
}
    c7dc:	rts

0000c7de <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c7de:	subq.l #8,sp
    c7e0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c7e2:	move.l 16(sp),-(sp)
    c7e6:	jsr 6bc <get2bytes>
    c7ec:	addq.l #4,sp
    c7ee:	move.l d0,-(sp)
    c7f0:	jsr c830 <loadObjectType>
    c7f6:	addq.l #4,sp
    c7f8:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c7fc:	movea.l 8(sp),a0
    c800:	move.l (a0),4(sp)
    c804:	move.l 1b848 <SysBase>,d0
    c80a:	movea.l d0,a6
    c80c:	movea.l 4(sp),a1
    c810:	jsr -690(a6)
	r -> screenName = readString (fp);
    c814:	move.l 16(sp),-(sp)
    c818:	jsr b02 <readString>
    c81e:	addq.l #4,sp
    c820:	movea.l 8(sp),a0
    c824:	move.l d0,(a0)
	return r;
    c826:	move.l 8(sp),d0
}
    c82a:	movea.l (sp)+,a6
    c82c:	addq.l #8,sp
    c82e:	rts

0000c830 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c830:	          lea -84(sp),sp
    c834:	          move.l a6,-(sp)
    c836:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c838:	          moveq #42,d0
    c83a:	          move.l d0,84(sp)
    c83e:	          clr.l 80(sp)
    c842:	          move.l 1b848 <SysBase>,d0
    c848:	          movea.l d0,a6
    c84a:	          move.l 84(sp),d0
    c84e:	          move.l 80(sp),d1
    c852:	          jsr -684(a6)
    c856:	          move.l d0,76(sp)
    c85a:	          move.l 76(sp),d0
    c85e:	          move.l d0,72(sp)

    if (newType) {
    c862:	/-------- beq.w cadc <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c866:	|         move.l 96(sp),-(sp)
    c86a:	|         jsr 5e92 <openObjectSlice>
    c870:	|         addq.l #4,sp
    c872:	|         tst.w d0
    c874:	+-------- beq.w cadc <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c878:	|         move.l 1b830 <bigDataFile>,d0
    c87e:	|         move.l d0,-(sp)
    c880:	|         jsr 6bc <get2bytes>
    c886:	|         addq.l #4,sp
    c888:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c88c:	|         move.l 1b830 <bigDataFile>,64(sp)
    c894:	|         move.l 1b850 <DOSBase>,d0
    c89a:	|         movea.l d0,a6
    c89c:	|         move.l 64(sp),d1
    c8a0:	|         jsr -306(a6)
    c8a4:	|         move.l d0,60(sp)
    c8a8:	|         move.l 60(sp),d0
    c8ac:	|         move.l d0,d0
    c8ae:	|         movea.l 72(sp),a0
    c8b2:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c8b6:	|         move.l 1b830 <bigDataFile>,56(sp)
    c8be:	|         move.l 1b850 <DOSBase>,d0
    c8c4:	|         movea.l d0,a6
    c8c6:	|         move.l 56(sp),d1
    c8ca:	|         jsr -306(a6)
    c8ce:	|         move.l d0,52(sp)
    c8d2:	|         move.l 52(sp),d0
    c8d6:	|         move.l d0,d0
    c8d8:	|         movea.l 72(sp),a0
    c8dc:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c8e0:	|         move.l 1b830 <bigDataFile>,48(sp)
    c8e8:	|         move.l 1b850 <DOSBase>,d0
    c8ee:	|         movea.l d0,a6
    c8f0:	|         move.l 48(sp),d1
    c8f4:	|         jsr -306(a6)
    c8f8:	|         move.l d0,44(sp)
    c8fc:	|         move.l 44(sp),d0
    c900:	|         move.l d0,d0
    c902:	|         movea.l 72(sp),a0
    c906:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c90a:	|         move.l 1b830 <bigDataFile>,40(sp)
    c912:	|         move.l 1b850 <DOSBase>,d0
    c918:	|         movea.l d0,a6
    c91a:	|         move.l 40(sp),d1
    c91e:	|         jsr -306(a6)
    c922:	|         move.l d0,36(sp)
    c926:	|         move.l 36(sp),d0
    c92a:	|         movea.l 72(sp),a0
    c92e:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c932:	|         move.l 1b830 <bigDataFile>,32(sp)
    c93a:	|         move.l 1b850 <DOSBase>,d0
    c940:	|         movea.l d0,a6
    c942:	|         move.l 32(sp),d1
    c946:	|         jsr -306(a6)
    c94a:	|         move.l d0,28(sp)
    c94e:	|         move.l 28(sp),d0
    c952:	|         movea.l 72(sp),a0
    c956:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c95a:	|         move.l 1b830 <bigDataFile>,d0
    c960:	|         move.l d0,-(sp)
    c962:	|         jsr 718 <get4bytes>
    c968:	|         addq.l #4,sp
    c96a:	|         movea.l 72(sp),a0
    c96e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c972:	|         move.l 1b830 <bigDataFile>,d0
    c978:	|         move.l d0,-(sp)
    c97a:	|         jsr 6bc <get2bytes>
    c980:	|         addq.l #4,sp
    c982:	|         movea.l 72(sp),a0
    c986:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c98a:	|         move.l 1b830 <bigDataFile>,24(sp)
    c992:	|         move.l 1b850 <DOSBase>,d0
    c998:	|         movea.l d0,a6
    c99a:	|         move.l 24(sp),d1
    c99e:	|         jsr -306(a6)
    c9a2:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c9a6:	|         move.l 1b830 <bigDataFile>,d0
    c9ac:	|         move.l d0,-(sp)
    c9ae:	|         jsr 7d8 <getFloat>
    c9b4:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c9b6:	|         move.l 1b830 <bigDataFile>,d0
    c9bc:	|         move.l d0,-(sp)
    c9be:	|         jsr 7d8 <getFloat>
    c9c4:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c9c6:	|         move.l 1b830 <bigDataFile>,d0
    c9cc:	|         move.l d0,-(sp)
    c9ce:	|         jsr 6bc <get2bytes>
    c9d4:	|         addq.l #4,sp
    c9d6:	|         move.l d0,d0
    c9d8:	|         movea.l 72(sp),a0
    c9dc:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c9e0:	|         move.l 1b830 <bigDataFile>,d0
    c9e6:	|         move.l d0,-(sp)
    c9e8:	|         jsr 6bc <get2bytes>
    c9ee:	|         addq.l #4,sp
    c9f0:	|         movea.l 72(sp),a0
    c9f4:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c9f8:	|         movea.l 72(sp),a0
    c9fc:	|         move.l 16(a0),d0
    ca00:	|  /----- beq.s ca32 <loadObjectType+0x202>
    ca02:	|  |      movea.l 72(sp),a0
    ca06:	|  |      move.l 16(a0),d0
    ca0a:	|  |      lsl.l #3,d0
    ca0c:	|  |      move.l d0,16(sp)
    ca10:	|  |      clr.l 12(sp)
    ca14:	|  |      move.l 1b848 <SysBase>,d0
    ca1a:	|  |      movea.l d0,a6
    ca1c:	|  |      move.l 16(sp),d0
    ca20:	|  |      move.l 12(sp),d1
    ca24:	|  |      jsr -684(a6)
    ca28:	|  |      move.l d0,8(sp)
    ca2c:	|  |      move.l 8(sp),d0
    ca30:	|  |  /-- bra.s ca34 <loadObjectType+0x204>
    ca32:	|  \--|-> moveq #0,d0
    ca34:	|     \-> movea.l 72(sp),a0
    ca38:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    ca3c:	|         clr.l 88(sp)
    ca40:	|     /-- bra.s ca90 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    ca42:	|  /--|-> move.l 1b830 <bigDataFile>,d1
    ca48:	|  |  |   movea.l 72(sp),a0
    ca4c:	|  |  |   movea.l 38(a0),a0
    ca50:	|  |  |   move.l 88(sp),d0
    ca54:	|  |  |   lsl.l #3,d0
    ca56:	|  |  |   lea (0,a0,d0.l),a2
    ca5a:	|  |  |   move.l d1,-(sp)
    ca5c:	|  |  |   jsr 6bc <get2bytes>
    ca62:	|  |  |   addq.l #4,sp
    ca64:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    ca66:	|  |  |   move.l 1b830 <bigDataFile>,d1
    ca6c:	|  |  |   movea.l 72(sp),a0
    ca70:	|  |  |   movea.l 38(a0),a0
    ca74:	|  |  |   move.l 88(sp),d0
    ca78:	|  |  |   lsl.l #3,d0
    ca7a:	|  |  |   lea (0,a0,d0.l),a2
    ca7e:	|  |  |   move.l d1,-(sp)
    ca80:	|  |  |   jsr 6bc <get2bytes>
    ca86:	|  |  |   addq.l #4,sp
    ca88:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    ca8c:	|  |  |   addq.l #1,88(sp)
    ca90:	|  |  \-> movea.l 72(sp),a0
    ca94:	|  |      move.l 16(a0),d0
    ca98:	|  |      cmp.l 88(sp),d0
    ca9c:	|  \----- bgt.s ca42 <loadObjectType+0x212>
            }
            finishAccess();
    ca9e:	|         jsr 5cc2 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    caa4:	|         move.l 68(sp),-(sp)
    caa8:	|         jsr 5ccc <getNumberedString>
    caae:	|         addq.l #4,sp
    cab0:	|         movea.l 72(sp),a0
    cab4:	|         move.l d0,(a0)
            newType->objectNum = i;
    cab6:	|         movea.l 72(sp),a0
    caba:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    cac0:	|         move.l 1b952 <allObjectTypes>,d0
    cac6:	|         movea.l 72(sp),a0
    caca:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    cace:	|         move.l 72(sp),1b952 <allObjectTypes>
            return newType;
    cad6:	|         move.l 72(sp),d0
    cada:	|     /-- bra.s cade <loadObjectType+0x2ae>
        }
    }
    return NULL;
    cadc:	\-----|-> moveq #0,d0
}
    cade:	      \-> movea.l (sp)+,a2
    cae0:	          movea.l (sp)+,a6
    cae2:	          lea 84(sp),sp
    cae6:	          rts

0000cae8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    cae8:	             lea -16(sp),sp
    caec:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    caee:	             move.l #112978,16(sp)

	while (* huntRegion) {
    caf6:	   /-------- bra.s cb6a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    caf8:	/--|-------> movea.l 16(sp),a0
    cafc:	|  |         move.l (a0),d0
    cafe:	|  |         cmp.l 24(sp),d0
    cb02:	|  |  /----- bne.s cb5c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    cb04:	|  |  |      movea.l 24(sp),a0
    cb08:	|  |  |      move.l 8(a0),d0
    cb0c:	|  |  |      movea.l 16(sp),a0
    cb10:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    cb12:	|  |  |      movea.l 24(sp),a0
    cb16:	|  |  |      move.l 38(a0),12(sp)
    cb1c:	|  |  |      move.l 1b848 <SysBase>,d0
    cb22:	|  |  |      movea.l d0,a6
    cb24:	|  |  |      movea.l 12(sp),a1
    cb28:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    cb2c:	|  |  |      movea.l 24(sp),a0
    cb30:	|  |  |      move.l (a0),8(sp)
    cb34:	|  |  |      move.l 1b848 <SysBase>,d0
    cb3a:	|  |  |      movea.l d0,a6
    cb3c:	|  |  |      movea.l 8(sp),a1
    cb40:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    cb44:	|  |  |      move.l 24(sp),4(sp)
    cb4a:	|  |  |      move.l 1b848 <SysBase>,d0
    cb50:	|  |  |      movea.l d0,a6
    cb52:	|  |  |      movea.l 4(sp),a1
    cb56:	|  |  |      jsr -690(a6)
			return;
    cb5a:	|  |  |  /-- bra.s cb80 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    cb5c:	|  |  \--|-> movea.l 16(sp),a0
    cb60:	|  |     |   move.l (a0),d0
    cb62:	|  |     |   move.l d0,d1
    cb64:	|  |     |   addq.l #8,d1
    cb66:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    cb6a:	|  \-----|-> movea.l 16(sp),a0
    cb6e:	|        |   move.l (a0),d0
    cb70:	\--------|-- bne.s caf8 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    cb72:	         |   pea 18406 <PutChar+0x1842>
    cb78:	         |   jsr 16274 <KPrintF>
    cb7e:	         |   addq.l #4,sp
}
    cb80:	         \-> movea.l (sp)+,a6
    cb82:	             lea 16(sp),sp
    cb86:	             rts

0000cb88 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    cb88:	movea.l 4(sp),a0
    cb8c:	move.l 4(a0),d0
    cb90:	move.l 8(sp),-(sp)
    cb94:	move.l d0,-(sp)
    cb96:	jsr 8d0 <put2bytes>
    cb9c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    cb9e:	movea.l 4(sp),a0
    cba2:	move.l (a0),d0
    cba4:	move.l 8(sp),-(sp)
    cba8:	move.l d0,-(sp)
    cbaa:	jsr bd8 <writeString>
    cbb0:	addq.l #8,sp
    cbb2:	nop
    cbb4:	rts

0000cbb6 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    cbb6:	                         lea -112(sp),sp
    cbba:	                         move.l a6,-(sp)
    cbbc:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    cbbe:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    cbc2:	                         move.w 1b958 <saveEncoding>,d0
    cbc8:	                  /----- beq.s cbd2 <fileToStack+0x1c>
    cbca:	                  |      move.l #99372,d0
    cbd0:	                  |  /-- bra.s cbd8 <fileToStack+0x22>
    cbd2:	                  \--|-> move.l #99398,d0
    cbd8:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    cbdc:	                         move.l 124(sp),112(sp)
    cbe2:	                         move.l #1005,108(sp)
    cbea:	                         move.l 1b850 <DOSBase>,d0
    cbf0:	                         movea.l d0,a6
    cbf2:	                         move.l 112(sp),d1
    cbf6:	                         move.l 108(sp),d2
    cbfa:	                         jsr -30(a6)
    cbfe:	                         move.l d0,104(sp)
    cc02:	                         move.l 104(sp),d0
    cc06:	                         move.l d0,100(sp)
    if (!fp) {
    cc0a:	                     /-- bne.s cc24 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    cc0c:	                     |   move.l 124(sp),-(sp)
    cc10:	                     |   pea 1845d <PutChar+0x1899>
    cc16:	                     |   jsr 16274 <KPrintF>
    cc1c:	                     |   addq.l #8,sp
        return FALSE;
    cc1e:	                     |   clr.w d0
    cc20:	/--------------------|-- bra.w cf1a <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    cc24:	|                    \-> move.w 1b958 <saveEncoding>,d0
    cc2a:	|                        move.l d0,d0
    cc2c:	|                        move.b d0,1b956 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    cc32:	|                        move.w 1b958 <saveEncoding>,d0
    cc38:	|                        lsr.w #8,d0
    cc3a:	|                        move.l d0,d0
    cc3c:	|                        move.b d0,1b957 <encode2>

    while (*checker) {
    cc42:	|                 /----- bra.s cca6 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    cc44:	|              /--|----> move.l 100(sp),30(sp)
    cc4a:	|              |  |      move.l 1b850 <DOSBase>,d0
    cc50:	|              |  |      movea.l d0,a6
    cc52:	|              |  |      move.l 30(sp),d1
    cc56:	|              |  |      jsr -306(a6)
    cc5a:	|              |  |      move.l d0,26(sp)
    cc5e:	|              |  |      move.l 26(sp),d1
    cc62:	|              |  |      movea.l 116(sp),a0
    cc66:	|              |  |      move.b (a0),d0
    cc68:	|              |  |      ext.w d0
    cc6a:	|              |  |      movea.w d0,a0
    cc6c:	|              |  |      cmpa.l d1,a0
    cc6e:	|              |  |  /-- beq.s cca2 <fileToStack+0xec>
            Close(fp);
    cc70:	|              |  |  |   move.l 100(sp),22(sp)
    cc76:	|              |  |  |   move.l 1b850 <DOSBase>,d0
    cc7c:	|              |  |  |   movea.l d0,a6
    cc7e:	|              |  |  |   move.l 22(sp),d1
    cc82:	|              |  |  |   jsr -36(a6)
    cc86:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    cc8a:	|              |  |  |   move.l 124(sp),-(sp)
    cc8e:	|              |  |  |   pea 1846a <PutChar+0x18a6>
    cc94:	|              |  |  |   jsr 16274 <KPrintF>
    cc9a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    cc9c:	|              |  |  |   clr.w d0
    cc9e:	+--------------|--|--|-- bra.w cf1a <fileToStack+0x364>
        }
        checker++;
    cca2:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    cca6:	|              |  \----> movea.l 116(sp),a0
    ccaa:	|              |         move.b (a0),d0
    ccac:	|              \-------- bne.s cc44 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    ccae:	|                        move.w 1b958 <saveEncoding>,d0
    ccb4:	|  /-------------------- beq.s cd28 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    ccb6:	|  |                     move.l 100(sp),-(sp)
    ccba:	|  |                     jsr cf24 <readStringEncoded>
    ccc0:	|  |                     addq.l #4,sp
    ccc2:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    ccc6:	|  |                     pea 184ab <PutChar+0x18e7>
    cccc:	|  |                     move.l 100(sp),-(sp)
    ccd0:	|  |                     jsr 12e00 <strcmp>
    ccd6:	|  |                     addq.l #8,sp
    ccd8:	|  |                     tst.l d0
    ccda:	|  |                 /-- beq.s cd0e <fileToStack+0x158>
            Close(fp);
    ccdc:	|  |                 |   move.l 100(sp),88(sp)
    cce2:	|  |                 |   move.l 1b850 <DOSBase>,d0
    cce8:	|  |                 |   movea.l d0,a6
    ccea:	|  |                 |   move.l 88(sp),d1
    ccee:	|  |                 |   jsr -36(a6)
    ccf2:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    ccf6:	|  |                 |   move.l 124(sp),-(sp)
    ccfa:	|  |                 |   pea 184ba <PutChar+0x18f6>
    cd00:	|  |                 |   jsr 16274 <KPrintF>
    cd06:	|  |                 |   addq.l #8,sp
            return FALSE;
    cd08:	|  |                 |   clr.w d0
    cd0a:	+--|-----------------|-- bra.w cf1a <fileToStack+0x364>
        }
        FreeVec(checker);
    cd0e:	|  |                 \-> move.l 96(sp),92(sp)
    cd14:	|  |                     move.l 1b848 <SysBase>,d0
    cd1a:	|  |                     movea.l d0,a6
    cd1c:	|  |                     movea.l 92(sp),a1
    cd20:	|  |                     jsr -690(a6)
        checker = NULL;
    cd24:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    cd28:	|  >-------------------> move.w 1b958 <saveEncoding>,d0
    cd2e:	|  |     /-------------- beq.w ce62 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    cd32:	|  |     |               move.l 100(sp),76(sp)
    cd38:	|  |     |               move.l 1b850 <DOSBase>,d0
    cd3e:	|  |     |               movea.l d0,a6
    cd40:	|  |     |               move.l 76(sp),d1
    cd44:	|  |     |               jsr -306(a6)
    cd48:	|  |     |               move.l d0,72(sp)
    cd4c:	|  |     |               move.l 72(sp),d0
    cd50:	|  |     |               move.b 1b956 <encode1>,d1
    cd56:	|  |     |               ext.w d1
    cd58:	|  |     |               ext.l d1
    cd5a:	|  |     |               move.l d0,d2
    cd5c:	|  |     |               eor.l d1,d2
    cd5e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    cd62:	|  |     |               moveq #-1,d0
    cd64:	|  |     |               cmp.l 68(sp),d0
    cd68:	|  |  /--|-------------- beq.w cef8 <fileToStack+0x342>

            char i = (char) tmp;
    cd6c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    cd72:	|  |  |  |               move.b 67(sp),d0
    cd76:	|  |  |  |               ext.w d0
    cd78:	|  |  |  |               movea.w d0,a0
    cd7a:	|  |  |  |               moveq #2,d2
    cd7c:	|  |  |  |               cmp.l a0,d2
    cd7e:	|  |  |  |     /-------- beq.s cdfa <fileToStack+0x244>
    cd80:	|  |  |  |     |         moveq #2,d0
    cd82:	|  |  |  |     |         cmp.l a0,d0
    cd84:	|  |  |  |  /--|-------- blt.w ce30 <fileToStack+0x27a>
    cd88:	|  |  |  |  |  |         cmpa.w #0,a0
    cd8c:	|  |  |  |  |  |     /-- beq.s cd98 <fileToStack+0x1e2>
    cd8e:	|  |  |  |  |  |     |   moveq #1,d2
    cd90:	|  |  |  |  |  |     |   cmp.l a0,d2
    cd92:	|  |  |  |  |  |  /--|-- beq.s cdd4 <fileToStack+0x21e>
    cd94:	|  |  |  |  +--|--|--|-- bra.w ce30 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    cd98:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    cd9c:	|  |  |  |  |  |  |      jsr cf24 <readStringEncoded>
    cda2:	|  |  |  |  |  |  |      addq.l #4,sp
    cda4:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    cda8:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    cdac:	|  |  |  |  |  |  |      lea 14(sp),a0
    cdb0:	|  |  |  |  |  |  |      move.l a0,-(sp)
    cdb2:	|  |  |  |  |  |  |      jsr 13b76 <makeTextVar>
    cdb8:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    cdba:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    cdc0:	|  |  |  |  |  |  |      move.l 1b848 <SysBase>,d0
    cdc6:	|  |  |  |  |  |  |      movea.l d0,a6
    cdc8:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    cdcc:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    cdd0:	|  |  |  |  |  |  |  /-- bra.w ce88 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    cdd4:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    cdd8:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    cdde:	|  |  |  |  |  |     |   addq.l #4,sp
    cde0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    cde2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    cde6:	|  |  |  |  |  |     |   lea 18(sp),a0
    cdea:	|  |  |  |  |  |     |   move.l a0,-(sp)
    cdec:	|  |  |  |  |  |     |   jsr 14246 <setVariable>
    cdf2:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    cdf6:	|  |  |  |  |  |     +-- bra.w ce88 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    cdfa:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    ce00:	|  |  |  |  |        |   move.l 1b850 <DOSBase>,d0
    ce06:	|  |  |  |  |        |   movea.l d0,a6
    ce08:	|  |  |  |  |        |   move.l 62(sp),d1
    ce0c:	|  |  |  |  |        |   jsr -306(a6)
    ce10:	|  |  |  |  |        |   move.l d0,58(sp)
    ce14:	|  |  |  |  |        |   move.l 58(sp),d0
    ce18:	|  |  |  |  |        |   move.l d0,-(sp)
    ce1a:	|  |  |  |  |        |   pea 1 <_start+0x1>
    ce1e:	|  |  |  |  |        |   lea 18(sp),a0
    ce22:	|  |  |  |  |        |   move.l a0,-(sp)
    ce24:	|  |  |  |  |        |   jsr 14246 <setVariable>
    ce2a:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    ce2e:	|  |  |  |  |        +-- bra.s ce88 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    ce30:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    ce34:	|  |  |  |           |   pea 1853c <PutChar+0x1978>
    ce3a:	|  |  |  |           |   jsr 16274 <KPrintF>
    ce40:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    ce42:	|  |  |  |           |   move.l 100(sp),46(sp)
    ce48:	|  |  |  |           |   move.l 1b850 <DOSBase>,d0
    ce4e:	|  |  |  |           |   movea.l d0,a6
    ce50:	|  |  |  |           |   move.l 46(sp),d1
    ce54:	|  |  |  |           |   jsr -36(a6)
    ce58:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    ce5c:	|  |  |  |           |   clr.w d0
    ce5e:	+--|--|--|-----------|-- bra.w cf1a <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    ce62:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    ce66:	|  |  |              |   jsr cfea <readTextPlain>
    ce6c:	|  |  |              |   addq.l #4,sp
    ce6e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    ce72:	|  |  |        /-----|-- beq.w cefc <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    ce76:	|  |  |        |     |   move.l 80(sp),-(sp)
    ce7a:	|  |  |        |     |   lea 14(sp),a0
    ce7e:	|  |  |        |     |   move.l a0,-(sp)
    ce80:	|  |  |        |     |   jsr 13b76 <makeTextVar>
    ce86:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    ce88:	|  |  |        |     \-> movea.l 128(sp),a0
    ce8c:	|  |  |        |         move.l (a0),d0
    ce8e:	|  |  |        |  /----- bne.s cebe <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    ce90:	|  |  |        |  |      move.l 128(sp),d0
    ce94:	|  |  |        |  |      move.l d0,-(sp)
    ce96:	|  |  |        |  |      lea 14(sp),a0
    ce9a:	|  |  |        |  |      move.l a0,-(sp)
    ce9c:	|  |  |        |  |      jsr 13216 <addVarToStackQuick>
    cea2:	|  |  |        |  |      addq.l #8,sp
    cea4:	|  |  |        |  |      tst.w d0
    cea6:	|  |  |        |  |  /-- bne.s ceac <fileToStack+0x2f6>
    cea8:	|  |  |        |  |  |   clr.w d0
    ceaa:	+--|--|--------|--|--|-- bra.s cf1a <fileToStack+0x364>
            sH->last = sH->first;
    ceac:	|  |  |        |  |  \-> movea.l 128(sp),a0
    ceb0:	|  |  |        |  |      move.l (a0),d0
    ceb2:	|  |  |        |  |      movea.l 128(sp),a0
    ceb6:	|  |  |        |  |      move.l d0,4(a0)
    ceba:	|  +--|--------|--|----- bra.w cd28 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    cebe:	|  |  |        |  \----> movea.l 128(sp),a0
    cec2:	|  |  |        |         move.l 4(a0),d0
    cec6:	|  |  |        |         addq.l #8,d0
    cec8:	|  |  |        |         move.l d0,-(sp)
    ceca:	|  |  |        |         lea 14(sp),a0
    cece:	|  |  |        |         move.l a0,-(sp)
    ced0:	|  |  |        |         jsr 13216 <addVarToStackQuick>
    ced6:	|  |  |        |         addq.l #8,sp
    ced8:	|  |  |        |         tst.w d0
    ceda:	|  |  |        |     /-- bne.s cee0 <fileToStack+0x32a>
    cedc:	|  |  |        |     |   clr.w d0
    cede:	+--|--|--------|-----|-- bra.s cf1a <fileToStack+0x364>
            sH->last = sH->last->next;
    cee0:	|  |  |        |     \-> movea.l 128(sp),a0
    cee4:	|  |  |        |         movea.l 4(a0),a0
    cee8:	|  |  |        |         move.l 8(a0),d0
    ceec:	|  |  |        |         movea.l 128(sp),a0
    cef0:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    cef4:	|  \--|--------|-------- bra.w cd28 <fileToStack+0x172>
            if (tmp == -1) break;
    cef8:	|     \--------|-------> nop
    cefa:	|              |     /-- bra.s cefe <fileToStack+0x348>
            if (!line) break;
    cefc:	|              \-----|-> nop
        }
    }
    Close(fp);
    cefe:	|                    \-> move.l 100(sp),38(sp)
    cf04:	|                        move.l 1b850 <DOSBase>,d0
    cf0a:	|                        movea.l d0,a6
    cf0c:	|                        move.l 38(sp),d1
    cf10:	|                        jsr -36(a6)
    cf14:	|                        move.l d0,34(sp)
    return TRUE;
    cf18:	|                        moveq #1,d0
}
    cf1a:	\----------------------> move.l (sp)+,d2
    cf1c:	                         movea.l (sp)+,a6
    cf1e:	                         lea 112(sp),sp
    cf22:	                         rts

0000cf24 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    cf24:	          lea -32(sp),sp
    cf28:	          move.l a6,-(sp)
    cf2a:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    cf2c:	          move.l 44(sp),-(sp)
    cf30:	          jsr 6bc <get2bytes>
    cf36:	          addq.l #4,sp
    cf38:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    cf3c:	          move.l 32(sp),d0
    cf40:	          addq.l #1,d0
    cf42:	          move.l d0,28(sp)
    cf46:	          clr.l 24(sp)
    cf4a:	          move.l 1b848 <SysBase>,d0
    cf50:	          movea.l d0,a6
    cf52:	          move.l 28(sp),d0
    cf56:	          move.l 24(sp),d1
    cf5a:	          jsr -684(a6)
    cf5e:	          move.l d0,20(sp)
    cf62:	          move.l 20(sp),d0
    cf66:	          move.l d0,16(sp)
    if (!s) return NULL;
    cf6a:	      /-- bne.s cf70 <readStringEncoded+0x4c>
    cf6c:	      |   moveq #0,d0
    cf6e:	/-----|-- bra.s cfe0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    cf70:	|     \-> clr.l 36(sp)
    cf74:	|     /-- bra.s cfc6 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    cf76:	|  /--|-> move.l 44(sp),12(sp)
    cf7c:	|  |  |   move.l 1b850 <DOSBase>,d0
    cf82:	|  |  |   movea.l d0,a6
    cf84:	|  |  |   move.l 12(sp),d1
    cf88:	|  |  |   jsr -306(a6)
    cf8c:	|  |  |   move.l d0,8(sp)
    cf90:	|  |  |   move.l 8(sp),d0
    cf94:	|  |  |   move.l d0,d1
    cf96:	|  |  |   move.b 1b956 <encode1>,d2
    cf9c:	|  |  |   move.l 36(sp),d0
    cfa0:	|  |  |   movea.l 16(sp),a0
    cfa4:	|  |  |   adda.l d0,a0
    cfa6:	|  |  |   move.b d1,d0
    cfa8:	|  |  |   eor.b d2,d0
    cfaa:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    cfac:	|  |  |   move.b 1b956 <encode1>,d0
    cfb2:	|  |  |   move.b d0,d1
    cfb4:	|  |  |   move.b 1b957 <encode2>,d0
    cfba:	|  |  |   add.b d1,d0
    cfbc:	|  |  |   move.b d0,1b956 <encode1>
    for (a = 0; a < len; a++) {
    cfc2:	|  |  |   addq.l #1,36(sp)
    cfc6:	|  |  \-> move.l 36(sp),d0
    cfca:	|  |      cmp.l 32(sp),d0
    cfce:	|  \----- blt.s cf76 <readStringEncoded+0x52>
    }
    s[len] = 0;
    cfd0:	|         move.l 32(sp),d0
    cfd4:	|         movea.l 16(sp),a0
    cfd8:	|         adda.l d0,a0
    cfda:	|         clr.b (a0)
    return s;
    cfdc:	|         move.l 16(sp),d0
}
    cfe0:	\-------> move.l (sp)+,d2
    cfe2:	          movea.l (sp)+,a6
    cfe4:	          lea 32(sp),sp
    cfe8:	          rts

0000cfea <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cfea:	             lea -104(sp),sp
    cfee:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cff2:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cff6:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    cffc:	             move.l 124(sp),106(sp)
    d002:	             clr.l 102(sp)
    d006:	             clr.l 98(sp)
    d00a:	             move.l 1b850 <DOSBase>,d0
    d010:	             movea.l d0,a6
    d012:	             move.l 106(sp),d1
    d016:	             move.l 102(sp),d2
    d01a:	             move.l 98(sp),d3
    d01e:	             jsr -66(a6)
    d022:	             move.l d0,94(sp)
    d026:	             move.l 94(sp),d0
    d02a:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    d02e:	   /-------- bra.s d072 <readTextPlain+0x88>
        tmp = FGetC(fp);
    d030:	/--|-------> move.l 124(sp),22(sp)
    d036:	|  |         move.l 1b850 <DOSBase>,d0
    d03c:	|  |         movea.l d0,a6
    d03e:	|  |         move.l 22(sp),d1
    d042:	|  |         jsr -306(a6)
    d046:	|  |         move.l d0,18(sp)
    d04a:	|  |         move.l 18(sp),d0
    d04e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    d052:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    d058:	|  |         cmpi.b #10,17(sp)
    d05e:	|  |  /----- beq.s d068 <readTextPlain+0x7e>
    d060:	|  |  |      moveq #-1,d0
    d062:	|  |  |      cmp.l 110(sp),d0
    d066:	|  |  |  /-- bne.s d06e <readTextPlain+0x84>
            keepGoing = FALSE;
    d068:	|  |  \--|-> clr.w 114(sp)
    d06c:	|  +-----|-- bra.s d072 <readTextPlain+0x88>
        } else {
            stringSize++;
    d06e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    d072:	|  \-------> tst.w 114(sp)
    d076:	\----------- bne.s d030 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    d078:	             tst.l 116(sp)
    d07c:	         /-- bne.s d08c <readTextPlain+0xa2>
    d07e:	         |   moveq #-1,d0
    d080:	         |   cmp.l 110(sp),d0
    d084:	         +-- bne.s d08c <readTextPlain+0xa2>
        return NULL;
    d086:	         |   moveq #0,d0
    d088:	      /--|-- bra.w d172 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    d08c:	      |  \-> move.l 124(sp),86(sp)
    d092:	      |      move.l 90(sp),82(sp)
    d098:	      |      moveq #-1,d0
    d09a:	      |      move.l d0,78(sp)
    d09e:	      |      move.l 1b850 <DOSBase>,d0
    d0a4:	      |      movea.l d0,a6
    d0a6:	      |      move.l 86(sp),d1
    d0aa:	      |      move.l 82(sp),d2
    d0ae:	      |      move.l 78(sp),d3
    d0b2:	      |      jsr -66(a6)
    d0b6:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    d0ba:	      |      move.l 116(sp),d0
    d0be:	      |      addq.l #1,d0
    d0c0:	      |      move.l d0,70(sp)
    d0c4:	      |      clr.l 66(sp)
    d0c8:	      |      move.l 1b848 <SysBase>,d0
    d0ce:	      |      movea.l d0,a6
    d0d0:	      |      move.l 70(sp),d0
    d0d4:	      |      move.l 66(sp),d1
    d0d8:	      |      jsr -684(a6)
    d0dc:	      |      move.l d0,62(sp)
    d0e0:	      |      move.l 62(sp),d0
    d0e4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    d0e8:	      |  /-- bne.s d0f0 <readTextPlain+0x106>
    d0ea:	      |  |   moveq #0,d0
    d0ec:	      +--|-- bra.w d172 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    d0f0:	      |  \-> move.l 124(sp),54(sp)
    d0f6:	      |      move.l 58(sp),50(sp)
    d0fc:	      |      moveq #1,d0
    d0fe:	      |      move.l d0,46(sp)
    d102:	      |      move.l 116(sp),42(sp)
    d108:	      |      move.l 1b850 <DOSBase>,d0
    d10e:	      |      movea.l d0,a6
    d110:	      |      move.l 54(sp),d1
    d114:	      |      move.l 50(sp),d2
    d118:	      |      move.l 46(sp),d3
    d11c:	      |      move.l 42(sp),d4
    d120:	      |      jsr -324(a6)
    d124:	      |      move.l d0,38(sp)
    d128:	      |      move.l 38(sp),d0
    d12c:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    d130:	      |      move.l 34(sp),d0
    d134:	      |      cmp.l 116(sp),d0
    d138:	      |  /-- beq.s d148 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    d13a:	      |  |   pea 18571 <PutChar+0x19ad>
    d140:	      |  |   jsr 16274 <KPrintF>
    d146:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    d148:	      |  \-> move.l 124(sp),30(sp)
    d14e:	      |      move.l 1b850 <DOSBase>,d0
    d154:	      |      movea.l d0,a6
    d156:	      |      move.l 30(sp),d1
    d15a:	      |      jsr -306(a6)
    d15e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    d162:	      |      move.l 116(sp),d0
    d166:	      |      movea.l 58(sp),a0
    d16a:	      |      adda.l d0,a0
    d16c:	      |      clr.b (a0)
    }

    return reply;
    d16e:	      |      move.l 58(sp),d0
}
    d172:	      \----> movem.l (sp)+,d2-d4/a6
    d176:	             lea 104(sp),sp
    d17a:	             rts

0000d17c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    d17c:	                      lea -144(sp),sp
    d180:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    d184:	                      move.l 160(sp),148(sp)
    d18a:	                      move.l #1006,144(sp)
    d192:	                      move.l 1b850 <DOSBase>,d0
    d198:	                      movea.l d0,a6
    d19a:	                      move.l 148(sp),d1
    d19e:	                      move.l 144(sp),d2
    d1a2:	                      jsr -30(a6)
    d1a6:	                      move.l d0,140(sp)
    d1aa:	                      move.l 140(sp),d0
    d1ae:	                      move.l d0,136(sp)

    if (!fp) {
    d1b2:	                  /-- bne.s d1cc <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    d1b4:	                  |   move.l 160(sp),-(sp)
    d1b8:	                  |   pea 18592 <PutChar+0x19ce>
    d1be:	                  |   jsr 16274 <KPrintF>
    d1c4:	                  |   addq.l #8,sp
        return FALSE;
    d1c6:	                  |   clr.w d0
    d1c8:	/-----------------|-- bra.w d488 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    d1cc:	|                 \-> movea.l 164(sp),a0
    d1d0:	|                     movea.l 4(a0),a0
    d1d4:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    d1d8:	|                     move.w 1b958 <saveEncoding>,d0
    d1de:	|                     move.l d0,d0
    d1e0:	|                     move.b d0,1b956 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    d1e6:	|                     move.w 1b958 <saveEncoding>,d0
    d1ec:	|                     lsr.w #8,d0
    d1ee:	|                     move.l d0,d0
    d1f0:	|                     move.b d0,1b957 <encode2>

    if (saveEncoding) {
    d1f6:	|                     move.w 1b958 <saveEncoding>,d0
    d1fc:	|                 /-- beq.s d24e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    d1fe:	|                 |   move.l 136(sp),116(sp)
    d204:	|                 |   move.l #99372,112(sp)
    d20c:	|                 |   moveq #99,d0
    d20e:	|                 |   not.b d0
    d210:	|                 |   add.l sp,d0
    d212:	|                 |   addi.l #-144,d0
    d218:	|                 |   move.l d0,108(sp)
    d21c:	|                 |   move.l 1b850 <DOSBase>,d0
    d222:	|                 |   movea.l d0,a6
    d224:	|                 |   move.l 116(sp),d1
    d228:	|                 |   move.l 112(sp),d2
    d22c:	|                 |   move.l 108(sp),d3
    d230:	|                 |   jsr -354(a6)
    d234:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    d238:	|                 |   move.l 136(sp),-(sp)
    d23c:	|                 |   pea 184ab <PutChar+0x18e7>
    d242:	|                 |   jsr d492 <writeStringEncoded>
    d248:	|                 |   addq.l #8,sp
    d24a:	|  /--------------|-- bra.w d460 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    d24e:	|  |              \-> move.l 136(sp),132(sp)
    d254:	|  |                  move.l #99398,128(sp)
    d25c:	|  |                  moveq #99,d1
    d25e:	|  |                  not.b d1
    d260:	|  |                  add.l sp,d1
    d262:	|  |                  addi.l #-144,d1
    d268:	|  |                  move.l d1,124(sp)
    d26c:	|  |                  move.l 1b850 <DOSBase>,d0
    d272:	|  |                  movea.l d0,a6
    d274:	|  |                  move.l 132(sp),d1
    d278:	|  |                  move.l 128(sp),d2
    d27c:	|  |                  move.l 124(sp),d3
    d280:	|  |                  jsr -354(a6)
    d284:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    d288:	|  +----------------- bra.w d460 <stackToFile+0x2e4>
        if (saveEncoding) {
    d28c:	|  |  /-------------> move.w 1b958 <saveEncoding>,d0
    d292:	|  |  |     /-------- beq.w d3e4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    d296:	|  |  |     |         movea.l 152(sp),a0
    d29a:	|  |  |     |         move.l (a0),d0
    d29c:	|  |  |     |         moveq #1,d1
    d29e:	|  |  |     |         cmp.l d0,d1
    d2a0:	|  |  |     |     /-- beq.s d2f0 <stackToFile+0x174>
    d2a2:	|  |  |     |     |   moveq #3,d1
    d2a4:	|  |  |     |     |   cmp.l d0,d1
    d2a6:	|  |  |     |  /--|-- bne.w d3b2 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    d2aa:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    d2b0:	|  |  |     |  |  |   move.b 1b956 <encode1>,d0
    d2b6:	|  |  |     |  |  |   ext.w d0
    d2b8:	|  |  |     |  |  |   movea.w d0,a0
    d2ba:	|  |  |     |  |  |   move.l a0,72(sp)
    d2be:	|  |  |     |  |  |   move.l 1b850 <DOSBase>,d0
    d2c4:	|  |  |     |  |  |   movea.l d0,a6
    d2c6:	|  |  |     |  |  |   move.l 76(sp),d1
    d2ca:	|  |  |     |  |  |   move.l 72(sp),d2
    d2ce:	|  |  |     |  |  |   jsr -312(a6)
    d2d2:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    d2d6:	|  |  |     |  |  |   movea.l 152(sp),a0
    d2da:	|  |  |     |  |  |   move.l 4(a0),d0
    d2de:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d2e2:	|  |  |     |  |  |   move.l d0,-(sp)
    d2e4:	|  |  |     |  |  |   jsr d492 <writeStringEncoded>
    d2ea:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d2ec:	|  |  |  /--|--|--|-- bra.w d456 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d2f0:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d2f4:	|  |  |  |  |  |      move.l 4(a0),d0
    d2f8:	|  |  |  |  |  |  /-- bmi.s d368 <stackToFile+0x1ec>
    d2fa:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d2fe:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d302:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d308:	|  |  |  |  |  |  +-- bgt.s d368 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d30a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d310:	|  |  |  |  |  |  |   move.b 1b956 <encode1>,d0
    d316:	|  |  |  |  |  |  |   eori.b #2,d0
    d31a:	|  |  |  |  |  |  |   ext.w d0
    d31c:	|  |  |  |  |  |  |   movea.w d0,a0
    d31e:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d322:	|  |  |  |  |  |  |   move.l 1b850 <DOSBase>,d0
    d328:	|  |  |  |  |  |  |   movea.l d0,a6
    d32a:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d32e:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d332:	|  |  |  |  |  |  |   jsr -312(a6)
    d336:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d33a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d340:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d344:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d34a:	|  |  |  |  |  |  |   move.l 1b850 <DOSBase>,d0
    d350:	|  |  |  |  |  |  |   movea.l d0,a6
    d352:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d356:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d35a:	|  |  |  |  |  |  |   jsr -312(a6)
    d35e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d362:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d364:	|  |  |  +--|--|--|-- bra.w d456 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d368:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d36e:	|  |  |  |  |  |      move.b 1b956 <encode1>,d0
    d374:	|  |  |  |  |  |      eori.b #1,d0
    d378:	|  |  |  |  |  |      ext.w d0
    d37a:	|  |  |  |  |  |      movea.w d0,a0
    d37c:	|  |  |  |  |  |      move.l a0,36(sp)
    d380:	|  |  |  |  |  |      move.l 1b850 <DOSBase>,d0
    d386:	|  |  |  |  |  |      movea.l d0,a6
    d388:	|  |  |  |  |  |      move.l 40(sp),d1
    d38c:	|  |  |  |  |  |      move.l 36(sp),d2
    d390:	|  |  |  |  |  |      jsr -312(a6)
    d394:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d398:	|  |  |  |  |  |      movea.l 152(sp),a0
    d39c:	|  |  |  |  |  |      move.l 4(a0),d0
    d3a0:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d3a4:	|  |  |  |  |  |      move.l d0,-(sp)
    d3a6:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d3ac:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d3ae:	|  |  |  +--|--|----- bra.w d456 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d3b2:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d3b6:	|  |  |  |  |         pea 185a4 <PutChar+0x19e0>
    d3bc:	|  |  |  |  |         jsr 16274 <KPrintF>
    d3c2:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d3c4:	|  |  |  |  |         move.l 136(sp),28(sp)
    d3ca:	|  |  |  |  |         move.l 1b850 <DOSBase>,d0
    d3d0:	|  |  |  |  |         movea.l d0,a6
    d3d2:	|  |  |  |  |         move.l 28(sp),d1
    d3d6:	|  |  |  |  |         jsr -36(a6)
    d3da:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d3de:	|  |  |  |  |         clr.w d0
    d3e0:	+--|--|--|--|-------- bra.w d488 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d3e4:	|  |  |  |  \-------> move.l 152(sp),d0
    d3e8:	|  |  |  |            move.l d0,-(sp)
    d3ea:	|  |  |  |            jsr 13f2a <getTextFromAnyVar>
    d3f0:	|  |  |  |            addq.l #4,sp
    d3f2:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d3f6:	|  |  |  |     /----- beq.s d46a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d3f8:	|  |  |  |     |      movea.l 100(sp),a0
    d3fc:	|  |  |  |     |      move.b (a0),d0
    d3fe:	|  |  |  |     |      ext.w d0
    d400:	|  |  |  |     |      movea.w d0,a0
    d402:	|  |  |  |     |      move.l a0,12(sp)
    d406:	|  |  |  |     |      move.l 136(sp),96(sp)
    d40c:	|  |  |  |     |      move.l #99840,92(sp)
    d414:	|  |  |  |     |      moveq #99,d0
    d416:	|  |  |  |     |      not.b d0
    d418:	|  |  |  |     |      add.l sp,d0
    d41a:	|  |  |  |     |      addi.l #-144,d0
    d420:	|  |  |  |     |      move.l d0,88(sp)
    d424:	|  |  |  |     |      move.l 1b850 <DOSBase>,d0
    d42a:	|  |  |  |     |      movea.l d0,a6
    d42c:	|  |  |  |     |      move.l 96(sp),d1
    d430:	|  |  |  |     |      move.l 92(sp),d2
    d434:	|  |  |  |     |      move.l 88(sp),d3
    d438:	|  |  |  |     |      jsr -354(a6)
    d43c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d440:	|  |  |  |     |      move.l 100(sp),80(sp)
    d446:	|  |  |  |     |      move.l 1b848 <SysBase>,d0
    d44c:	|  |  |  |     |      movea.l d0,a6
    d44e:	|  |  |  |     |      movea.l 80(sp),a1
    d452:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d456:	|  |  |  \-----|----> movea.l 152(sp),a0
    d45a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d460:	|  \--|--------|----> tst.l 152(sp)
    d464:	|     \--------|----- bne.w d28c <stackToFile+0x110>
    d468:	|              |  /-- bra.s d46c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d46a:	|              \--|-> nop
    }
    Close(fp);
    d46c:	|                 \-> move.l 136(sp),20(sp)
    d472:	|                     move.l 1b850 <DOSBase>,d0
    d478:	|                     movea.l d0,a6
    d47a:	|                     move.l 20(sp),d1
    d47e:	|                     jsr -36(a6)
    d482:	|                     move.l d0,16(sp)
    return TRUE;
    d486:	|                     moveq #1,d0
}
    d488:	\-------------------> movem.l (sp)+,d2-d3/a6
    d48c:	                      lea 144(sp),sp
    d490:	                      rts

0000d492 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d492:	       lea -20(sp),sp
    d496:	       move.l a6,-(sp)
    d498:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d49a:	       move.l 32(sp),-(sp)
    d49e:	       jsr 12e40 <strlen>
    d4a4:	       addq.l #4,sp
    d4a6:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d4aa:	       move.l 36(sp),-(sp)
    d4ae:	       move.l 24(sp),-(sp)
    d4b2:	       jsr 8d0 <put2bytes>
    d4b8:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d4ba:	       clr.l 24(sp)
    d4be:	   /-- bra.s d514 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d4c0:	/--|-> move.l 36(sp),16(sp)
    d4c6:	|  |   move.l 24(sp),d0
    d4ca:	|  |   movea.l 32(sp),a0
    d4ce:	|  |   adda.l d0,a0
    d4d0:	|  |   move.b (a0),d1
    d4d2:	|  |   move.b 1b956 <encode1>,d0
    d4d8:	|  |   eor.b d1,d0
    d4da:	|  |   ext.w d0
    d4dc:	|  |   movea.w d0,a0
    d4de:	|  |   move.l a0,12(sp)
    d4e2:	|  |   move.l 1b850 <DOSBase>,d0
    d4e8:	|  |   movea.l d0,a6
    d4ea:	|  |   move.l 16(sp),d1
    d4ee:	|  |   move.l 12(sp),d2
    d4f2:	|  |   jsr -312(a6)
    d4f6:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d4fa:	|  |   move.b 1b956 <encode1>,d0
    d500:	|  |   move.b d0,d1
    d502:	|  |   move.b 1b957 <encode2>,d0
    d508:	|  |   add.b d1,d0
    d50a:	|  |   move.b d0,1b956 <encode1>
	for (a = 0; a < len; a ++) {
    d510:	|  |   addq.l #1,24(sp)
    d514:	|  \-> move.l 24(sp),d0
    d518:	|      cmp.l 20(sp),d0
    d51c:	\----- blt.s d4c0 <writeStringEncoded+0x2e>
	}
}
    d51e:	       nop
    d520:	       nop
    d522:	       move.l (sp)+,d2
    d524:	       movea.l (sp)+,a6
    d526:	       lea 20(sp),sp
    d52a:	       rts

0000d52c <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d52c:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d52e:	                   tst.l 8(sp)
    d532:	               /-- bne.s d538 <failSecurityCheck+0xc>
    d534:	               |   moveq #1,d0
    d536:	/--------------|-- bra.s d5b6 <failSecurityCheck+0x8a>

	int a = 0;
    d538:	|              \-> clr.l (sp)

	while (fn[a]) {
    d53a:	|     /----------- bra.s d5a8 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d53c:	|  /--|----------> move.l (sp),d0
    d53e:	|  |  |            movea.l 8(sp),a0
    d542:	|  |  |            adda.l d0,a0
    d544:	|  |  |            move.b (a0),d0
    d546:	|  |  |            ext.w d0
    d548:	|  |  |            movea.w d0,a0
    d54a:	|  |  |            moveq #124,d0
    d54c:	|  |  |            cmp.l a0,d0
    d54e:	|  |  |     /----- beq.s d590 <failSecurityCheck+0x64>
    d550:	|  |  |     |      moveq #124,d1
    d552:	|  |  |     |      cmp.l a0,d1
    d554:	|  |  |  /--|----- blt.s d5a6 <failSecurityCheck+0x7a>
    d556:	|  |  |  |  |      moveq #92,d0
    d558:	|  |  |  |  |      cmp.l a0,d0
    d55a:	|  |  |  |  +----- beq.s d590 <failSecurityCheck+0x64>
    d55c:	|  |  |  |  |      moveq #92,d1
    d55e:	|  |  |  |  |      cmp.l a0,d1
    d560:	|  |  |  +--|----- blt.s d5a6 <failSecurityCheck+0x7a>
    d562:	|  |  |  |  |      moveq #60,d0
    d564:	|  |  |  |  |      cmp.l a0,d0
    d566:	|  |  |  |  |  /-- blt.s d586 <failSecurityCheck+0x5a>
    d568:	|  |  |  |  |  |   moveq #34,d1
    d56a:	|  |  |  |  |  |   cmp.l a0,d1
    d56c:	|  |  |  +--|--|-- bgt.s d5a6 <failSecurityCheck+0x7a>
    d56e:	|  |  |  |  |  |   moveq #-34,d1
    d570:	|  |  |  |  |  |   add.l a0,d1
    d572:	|  |  |  |  |  |   move.l #83894529,d0
    d578:	|  |  |  |  |  |   lsr.l d1,d0
    d57a:	|  |  |  |  |  |   moveq #1,d1
    d57c:	|  |  |  |  |  |   and.l d1,d0
    d57e:	|  |  |  |  |  |   sne d0
    d580:	|  |  |  |  |  |   neg.b d0
    d582:	|  |  |  |  +--|-- bne.s d590 <failSecurityCheck+0x64>
    d584:	|  |  |  +--|--|-- bra.s d5a6 <failSecurityCheck+0x7a>
    d586:	|  |  |  |  |  \-> lea -62(a0),a0
    d58a:	|  |  |  |  |      moveq #1,d0
    d58c:	|  |  |  |  |      cmp.l a0,d0
    d58e:	|  |  |  +--|----- bcs.s d5a6 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d590:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d594:	|  |  |  |         pea 18604 <PutChar+0x1a40>
    d59a:	|  |  |  |         jsr 16274 <KPrintF>
    d5a0:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d5a2:	|  |  |  |         moveq #1,d0
    d5a4:	+--|--|--|-------- bra.s d5b6 <failSecurityCheck+0x8a>
		}
		a++;
    d5a6:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d5a8:	|  |  \----------> move.l (sp),d0
    d5aa:	|  |               movea.l 8(sp),a0
    d5ae:	|  |               adda.l d0,a0
    d5b0:	|  |               move.b (a0),d0
    d5b2:	|  \-------------- bne.s d53c <failSecurityCheck+0x10>
	}
	return FALSE;
    d5b4:	|                  clr.w d0
}
    d5b6:	\----------------> addq.l #4,sp
    d5b8:	                   rts

0000d5ba <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d5ba:	             lea -24(sp),sp
    d5be:	             move.l a6,-(sp)
    d5c0:	             move.l 40(sp),d0
    d5c4:	             move.w d0,d0
    d5c6:	             move.w d0,6(sp)
	int fileNum = -1;
    d5ca:	             moveq #-1,d0
    d5cc:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d5d0:	             jsr 524e <killSpeechTimers>

	switch (numParams) {
    d5d6:	             moveq #2,d0
    d5d8:	             cmp.l 32(sp),d0
    d5dc:	      /----- beq.s d620 <sayCore+0x66>
    d5de:	      |      moveq #3,d0
    d5e0:	      |      cmp.l 32(sp),d0
    d5e4:	/-----|----- bne.w d702 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d5e8:	|     |      movea.l 36(sp),a0
    d5ec:	|     |      move.l 24(a0),d0
    d5f0:	|     |      move.l d0,-(sp)
    d5f2:	|     |      pea 5 <_start+0x5>
    d5f6:	|     |      lea 20(sp),a0
    d5fa:	|     |      move.l a0,-(sp)
    d5fc:	|     |      jsr 13954 <getValueType>
    d602:	|     |      lea 12(sp),sp
    d606:	|     |      tst.w d0
    d608:	|     |  /-- bne.s d610 <sayCore+0x56>
    d60a:	|     |  |   moveq #1,d0
    d60c:	|  /--|--|-- bra.w d712 <sayCore+0x158>
			trimStack (&fun -> stack);
    d610:	|  |  |  \-> moveq #24,d0
    d612:	|  |  |      add.l 36(sp),d0
    d616:	|  |  |      move.l d0,-(sp)
    d618:	|  |  |      jsr 142d8 <trimStack>
    d61e:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d620:	|  |  \----> movea.l 36(sp),a0
    d624:	|  |         move.l 24(a0),d0
    d628:	|  |         move.l d0,-(sp)
    d62a:	|  |         jsr 13f2a <getTextFromAnyVar>
    d630:	|  |         addq.l #4,sp
    d632:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d636:	|  |     /-- bne.s d63e <sayCore+0x84>
    d638:	|  |     |   moveq #1,d0
    d63a:	|  +-----|-- bra.w d712 <sayCore+0x158>
			trimStack (&fun -> stack);
    d63e:	|  |     \-> moveq #24,d0
    d640:	|  |         add.l 36(sp),d0
    d644:	|  |         move.l d0,-(sp)
    d646:	|  |         jsr 142d8 <trimStack>
    d64c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d64e:	|  |         movea.l 36(sp),a0
    d652:	|  |         move.l 24(a0),d0
    d656:	|  |         move.l d0,-(sp)
    d658:	|  |         pea 7 <_start+0x7>
    d65c:	|  |         lea 16(sp),a0
    d660:	|  |         move.l a0,-(sp)
    d662:	|  |         jsr 13954 <getValueType>
    d668:	|  |         lea 12(sp),sp
    d66c:	|  |         tst.w d0
    d66e:	|  |     /-- bne.s d676 <sayCore+0xbc>
    d670:	|  |     |   moveq #1,d0
    d672:	|  +-----|-- bra.w d712 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d676:	|  |     \-> movea.l 36(sp),a0
    d67a:	|  |         move.l 24(a0),d0
    d67e:	|  |         move.l d0,-(sp)
    d680:	|  |         pea 7 <_start+0x7>
    d684:	|  |         lea 16(sp),a0
    d688:	|  |         move.l a0,-(sp)
    d68a:	|  |         jsr 13954 <getValueType>
    d690:	|  |         lea 12(sp),sp
    d694:	|  |         tst.w d0
    d696:	|  |     /-- bne.s d69c <sayCore+0xe2>
    d698:	|  |     |   moveq #1,d0
    d69a:	|  +-----|-- bra.s d712 <sayCore+0x158>
			trimStack (&fun -> stack);
    d69c:	|  |     \-> moveq #24,d0
    d69e:	|  |         add.l 36(sp),d0
    d6a2:	|  |         move.l d0,-(sp)
    d6a4:	|  |         jsr 142d8 <trimStack>
    d6aa:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d6ac:	|  |         movea.w 6(sp),a0
    d6b0:	|  |         move.l 12(sp),d1
    d6b4:	|  |         move.l 8(sp),d0
    d6b8:	|  |         move.l a0,-(sp)
    d6ba:	|  |         move.l d1,-(sp)
    d6bc:	|  |         move.l d0,-(sp)
    d6be:	|  |         move.l 36(sp),-(sp)
    d6c2:	|  |         jsr 71fa <wrapSpeech>
    d6c8:	|  |         lea 16(sp),sp
    d6cc:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d6d0:	|  |         movea.l 36(sp),a0
    d6d4:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d6da:	|  |         movea.l 36(sp),a0
    d6de:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d6e4:	|  |         move.l 24(sp),16(sp)
    d6ea:	|  |         move.l 1b848 <SysBase>,d0
    d6f0:	|  |         movea.l d0,a6
    d6f2:	|  |         movea.l 16(sp),a1
    d6f6:	|  |         jsr -690(a6)
			newText = NULL;
    d6fa:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d6fe:	|  |         moveq #0,d0
    d700:	|  +-------- bra.s d712 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d702:	\--|-------> pea 1868a <PutChar+0x1ac6>
    d708:	   |         jsr 16274 <KPrintF>
    d70e:	   |         addq.l #4,sp
	return BR_ERROR;
    d710:	   |         moveq #1,d0
}
    d712:	   \-------> movea.l (sp)+,a6
    d714:	             lea 24(sp),sp
    d718:	             rts

0000d71a <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d71a:	pea 1 <_start+0x1>
    d71e:	move.l 12(sp),-(sp)
    d722:	move.l 12(sp),-(sp)
    d726:	jsr d5ba <sayCore>
    d72c:	lea 12(sp),sp
}
    d730:	rts

0000d732 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d732:	clr.l -(sp)
    d734:	move.l 12(sp),-(sp)
    d738:	move.l 12(sp),-(sp)
    d73c:	jsr d5ba <sayCore>
    d742:	lea 12(sp),sp
}
    d746:	rts

0000d748 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    d748:	jsr 14320 <freeze>
	freezeSubs (); 
    d74e:	jsr 483e <freezeSubs>
	fun -> freezerLevel = 0;
    d754:	movea.l 8(sp),a0
    d758:	clr.b 56(a0)
	return BR_CONTINUE;
    d75c:	moveq #2,d0
}
    d75e:	rts

0000d760 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    d760:	jsr 144e4 <unfreeze>
	unfreezeSubs (); 
    d766:	jsr 5c90 <unfreezeSubs>
	return BR_CONTINUE;
    d76c:	moveq #2,d0
}
    d76e:	rts

0000d770 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d770:	nop
    d772:	rts

0000d774 <builtIn_setCursor>:

builtIn(setCursor)
{
    d774:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d776:	movea.l 12(sp),a0
    d77a:	move.l 24(a0),d0
    d77e:	move.l d0,-(sp)
    d780:	jsr 13e2c <getAnimationFromVar>
    d786:	addq.l #4,sp
    d788:	move.l d0,(sp)
	pickAnimCursor (aa);
    d78a:	move.l (sp),-(sp)
    d78c:	jsr d6c <pickAnimCursor>
    d792:	addq.l #4,sp
	trimStack (&fun -> stack);
    d794:	moveq #24,d0
    d796:	add.l 12(sp),d0
    d79a:	move.l d0,-(sp)
    d79c:	jsr 142d8 <trimStack>
    d7a2:	addq.l #4,sp
	return BR_CONTINUE;
    d7a4:	moveq #2,d0
}
    d7a6:	addq.l #4,sp
    d7a8:	rts

0000d7aa <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d7aa:	move.l 1b804 <input+0xa>,d1
    d7b0:	move.l 1b95a <cameraX>,d0
    d7b6:	add.l d0,d1
    d7b8:	moveq #28,d0
    d7ba:	add.l 8(sp),d0
    d7be:	move.l d1,-(sp)
    d7c0:	pea 1 <_start+0x1>
    d7c4:	move.l d0,-(sp)
    d7c6:	jsr 14246 <setVariable>
    d7cc:	lea 12(sp),sp
	return BR_CONTINUE;
    d7d0:	moveq #2,d0
}
    d7d2:	rts

0000d7d4 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d7d4:	move.l 1b808 <input+0xe>,d1
    d7da:	move.l 1b95e <cameraY>,d0
    d7e0:	add.l d0,d1
    d7e2:	moveq #28,d0
    d7e4:	add.l 8(sp),d0
    d7e8:	move.l d1,-(sp)
    d7ea:	pea 1 <_start+0x1>
    d7ee:	move.l d0,-(sp)
    d7f0:	jsr 14246 <setVariable>
    d7f6:	lea 12(sp),sp
	return BR_CONTINUE;
    d7fa:	moveq #2,d0
}
    d7fc:	rts

0000d7fe <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d7fe:	move.l 1b804 <input+0xa>,d0
    d804:	move.l d0,-(sp)
    d806:	jsr 1652c <__floatsisf>
    d80c:	addq.l #4,sp
    d80e:	move.l d0,d1
    d810:	move.l 1b1e8 <cameraZoom>,d0
    d816:	move.l d0,-(sp)
    d818:	move.l d1,-(sp)
    d81a:	jsr 165de <__mulsf3>
    d820:	addq.l #8,sp
    d822:	move.l d0,-(sp)
    d824:	jsr 164c4 <__fixsfsi>
    d82a:	addq.l #4,sp
    d82c:	move.l d0,d1
    d82e:	moveq #28,d0
    d830:	add.l 8(sp),d0
    d834:	move.l d1,-(sp)
    d836:	pea 1 <_start+0x1>
    d83a:	move.l d0,-(sp)
    d83c:	jsr 14246 <setVariable>
    d842:	lea 12(sp),sp
	return BR_CONTINUE;
    d846:	moveq #2,d0
}
    d848:	rts

0000d84a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d84a:	move.l 1b808 <input+0xe>,d0
    d850:	move.l d0,-(sp)
    d852:	jsr 1652c <__floatsisf>
    d858:	addq.l #4,sp
    d85a:	move.l d0,d1
    d85c:	move.l 1b1e8 <cameraZoom>,d0
    d862:	move.l d0,-(sp)
    d864:	move.l d1,-(sp)
    d866:	jsr 165de <__mulsf3>
    d86c:	addq.l #8,sp
    d86e:	move.l d0,-(sp)
    d870:	jsr 164c4 <__fixsfsi>
    d876:	addq.l #4,sp
    d878:	move.l d0,d1
    d87a:	moveq #28,d0
    d87c:	add.l 8(sp),d0
    d880:	move.l d1,-(sp)
    d882:	pea 1 <_start+0x1>
    d886:	move.l d0,-(sp)
    d888:	jsr 14246 <setVariable>
    d88e:	lea 12(sp),sp
	return BR_CONTINUE;
    d892:	moveq #2,d0
}
    d894:	rts

0000d896 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d896:	jsr 6cae <statusBarText>
    d89c:	move.l d0,d1
    d89e:	moveq #28,d0
    d8a0:	add.l 8(sp),d0
    d8a4:	move.l d1,-(sp)
    d8a6:	move.l d0,-(sp)
    d8a8:	jsr 13b76 <makeTextVar>
    d8ae:	addq.l #8,sp
	return BR_CONTINUE;
    d8b0:	moveq #2,d0
}
    d8b2:	rts

0000d8b4 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d8b4:	       lea -20(sp),sp
    d8b8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d8ba:	       movea.l 32(sp),a0
    d8be:	       move.l 24(a0),d0
    d8c2:	       move.l d0,-(sp)
    d8c4:	       jsr 13f2a <getTextFromAnyVar>
    d8ca:	       addq.l #4,sp
    d8cc:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d8d0:	   /-- bne.s d8d8 <builtIn_getMatchingFiles+0x24>
    d8d2:	   |   moveq #1,d0
    d8d4:	/--|-- bra.w d99a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d8d8:	|  \-> moveq #24,d0
    d8da:	|      add.l 32(sp),d0
    d8de:	|      move.l d0,-(sp)
    d8e0:	|      jsr 142d8 <trimStack>
    d8e6:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d8e8:	|      moveq #28,d0
    d8ea:	|      add.l 32(sp),d0
    d8ee:	|      move.l d0,-(sp)
    d8f0:	|      jsr 13ba2 <unlinkVar>
    d8f6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d8f8:	|      movea.l 32(sp),a0
    d8fc:	|      moveq #6,d0
    d8fe:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d902:	|      moveq #12,d0
    d904:	|      move.l d0,16(sp)
    d908:	|      clr.l 12(sp)
    d90c:	|      move.l 1b848 <SysBase>,d0
    d912:	|      movea.l d0,a6
    d914:	|      move.l 16(sp),d0
    d918:	|      move.l 12(sp),d1
    d91c:	|      jsr -684(a6)
    d920:	|      move.l d0,8(sp)
    d924:	|      move.l 8(sp),d0
    d928:	|      movea.l 32(sp),a0
    d92c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d930:	|      moveq #32,d0
    d932:	|      add.l 32(sp),d0
    d936:	|  /-- bne.s d93c <builtIn_getMatchingFiles+0x88>
    d938:	|  |   moveq #1,d0
    d93a:	+--|-- bra.s d99a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d93c:	|  \-> movea.l 32(sp),a0
    d940:	|      movea.l 32(a0),a0
    d944:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d946:	|      movea.l 32(sp),a0
    d94a:	|      movea.l 32(a0),a0
    d94e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d952:	|      movea.l 32(sp),a0
    d956:	|      movea.l 32(a0),a0
    d95a:	|      moveq #1,d0
    d95c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d960:	|      movea.l 32(sp),a0
    d964:	|      move.l 32(a0),d0
    d968:	|      move.l 20(sp),-(sp)
    d96c:	|      move.l d0,-(sp)
    d96e:	|      jsr 13710 <getSavedGamesStack>
    d974:	|      addq.l #8,sp
    d976:	|      tst.w d0
    d978:	|  /-- bne.s d97e <builtIn_getMatchingFiles+0xca>
    d97a:	|  |   moveq #1,d0
    d97c:	+--|-- bra.s d99a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d97e:	|  \-> move.l 20(sp),4(sp)
    d984:	|      move.l 1b848 <SysBase>,d0
    d98a:	|      movea.l d0,a6
    d98c:	|      movea.l 4(sp),a1
    d990:	|      jsr -690(a6)
	newText = NULL;
    d994:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d998:	|      moveq #2,d0
}
    d99a:	\----> movea.l (sp)+,a6
    d99c:	       lea 20(sp),sp
    d9a0:	       rts

0000d9a2 <builtIn_saveGame>:

builtIn(saveGame)
{
    d9a2:	       lea -12(sp),sp
    d9a6:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d9a8:	       movea.l 24(sp),a0
    d9ac:	       move.l 24(a0),d0
    d9b0:	       move.l d0,-(sp)
    d9b2:	       jsr 13f2a <getTextFromAnyVar>
    d9b8:	       addq.l #4,sp
    d9ba:	       move.l d0,1b814 <loadNow>
    trimStack(&fun->stack);
    d9c0:	       moveq #24,d0
    d9c2:	       add.l 24(sp),d0
    d9c6:	       move.l d0,-(sp)
    d9c8:	       jsr 142d8 <trimStack>
    d9ce:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d9d0:	       move.l 1b814 <loadNow>,d0
    d9d6:	       move.l d0,-(sp)
    d9d8:	       jsr 2fe <encodeFilename>
    d9de:	       addq.l #4,sp
    d9e0:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d9e4:	       move.l 1b814 <loadNow>,8(sp)
    d9ec:	       move.l 1b848 <SysBase>,d0
    d9f2:	       movea.l d0,a6
    d9f4:	       movea.l 8(sp),a1
    d9f8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d9fc:	       move.l 12(sp),-(sp)
    da00:	       jsr d52c <failSecurityCheck>
    da06:	       addq.l #4,sp
    da08:	       tst.w d0
    da0a:	   /-- beq.s da10 <builtIn_saveGame+0x6e>
    da0c:	   |   moveq #1,d0
    da0e:	/--|-- bra.s da60 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    da10:	|  \-> move.l 12(sp),-(sp)
    da14:	|      pea 186b8 <PutChar+0x1af4>
    da1a:	|      jsr 12e80 <joinStrings>
    da20:	|      addq.l #8,sp
    da22:	|      move.l d0,1b814 <loadNow>
    FreeVec(aaaaa);
    da28:	|      move.l 12(sp),4(sp)
    da2e:	|      move.l 1b848 <SysBase>,d0
    da34:	|      movea.l d0,a6
    da36:	|      movea.l 4(sp),a1
    da3a:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    da3e:	|      moveq #28,d0
    da40:	|      add.l 24(sp),d0
    da44:	|      clr.l -(sp)
    da46:	|      pea 1 <_start+0x1>
    da4a:	|      move.l d0,-(sp)
    da4c:	|      jsr 14246 <setVariable>
    da52:	|      lea 12(sp),sp
    saverFunc = fun;
    da56:	|      move.l 24(sp),1b96a <saverFunc>
    return BR_KEEP_AND_PAUSE;
    da5e:	|      moveq #0,d0
}
    da60:	\----> movea.l (sp)+,a6
    da62:	       lea 12(sp),sp
    da66:	       rts

0000da68 <builtIn_fileExists>:

builtIn(fileExists)
{
    da68:	       lea -36(sp),sp
    da6c:	       move.l a6,-(sp)
    da6e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    da70:	       movea.l 52(sp),a0
    da74:	       move.l 24(a0),d0
    da78:	       move.l d0,-(sp)
    da7a:	       jsr 13f2a <getTextFromAnyVar>
    da80:	       addq.l #4,sp
    da82:	       move.l d0,1b814 <loadNow>
    trimStack(&fun->stack);
    da88:	       moveq #24,d0
    da8a:	       add.l 52(sp),d0
    da8e:	       move.l d0,-(sp)
    da90:	       jsr 142d8 <trimStack>
    da96:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    da98:	       move.l 1b814 <loadNow>,d0
    da9e:	       move.l d0,-(sp)
    daa0:	       jsr 2fe <encodeFilename>
    daa6:	       addq.l #4,sp
    daa8:	       move.l d0,40(sp)
    FreeVec(loadNow);
    daac:	       move.l 1b814 <loadNow>,36(sp)
    dab4:	       move.l 1b848 <SysBase>,d0
    daba:	       movea.l d0,a6
    dabc:	       movea.l 36(sp),a1
    dac0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    dac4:	       move.l 40(sp),-(sp)
    dac8:	       jsr d52c <failSecurityCheck>
    dace:	       addq.l #4,sp
    dad0:	       tst.w d0
    dad2:	   /-- beq.s dada <builtIn_fileExists+0x72>
    dad4:	   |   moveq #1,d0
    dad6:	/--|-- bra.w db7a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    dada:	|  \-> move.l 40(sp),32(sp)
    dae0:	|      move.l #1005,28(sp)
    dae8:	|      move.l 1b850 <DOSBase>,d0
    daee:	|      movea.l d0,a6
    daf0:	|      move.l 32(sp),d1
    daf4:	|      move.l 28(sp),d2
    daf8:	|      jsr -30(a6)
    dafc:	|      move.l d0,24(sp)
    db00:	|      move.l 24(sp),d0
    db04:	|      move.l d0,20(sp)
    if (!fp) {        
    db08:	|  /-- bne.s db18 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    db0a:	|  |   pea 186ba <PutChar+0x1af6>
    db10:	|  |   jsr 16274 <KPrintF>
    db16:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    db18:	|  \-> tst.l 20(sp)
    db1c:	|      sne d0
    db1e:	|      neg.b d0
    db20:	|      moveq #0,d1
    db22:	|      move.b d0,d1
    db24:	|      moveq #28,d0
    db26:	|      add.l 52(sp),d0
    db2a:	|      move.l d1,-(sp)
    db2c:	|      pea 1 <_start+0x1>
    db30:	|      move.l d0,-(sp)
    db32:	|      jsr 14246 <setVariable>
    db38:	|      lea 12(sp),sp
    if (fp) Close(fp);
    db3c:	|      tst.l 20(sp)
    db40:	|  /-- beq.s db5c <builtIn_fileExists+0xf4>
    db42:	|  |   move.l 20(sp),16(sp)
    db48:	|  |   move.l 1b850 <DOSBase>,d0
    db4e:	|  |   movea.l d0,a6
    db50:	|  |   move.l 16(sp),d1
    db54:	|  |   jsr -36(a6)
    db58:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    db5c:	|  \-> move.l 40(sp),8(sp)
    db62:	|      move.l 1b848 <SysBase>,d0
    db68:	|      movea.l d0,a6
    db6a:	|      movea.l 8(sp),a1
    db6e:	|      jsr -690(a6)
    loadNow = NULL;
    db72:	|      clr.l 1b814 <loadNow>
    return BR_CONTINUE;
    db78:	|      moveq #2,d0
}
    db7a:	\----> move.l (sp)+,d2
    db7c:	       movea.l (sp)+,a6
    db7e:	       lea 36(sp),sp
    db82:	       rts

0000db84 <builtIn_loadGame>:

builtIn(loadGame)
{
    db84:	       lea -36(sp),sp
    db88:	       move.l a6,-(sp)
    db8a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    db8c:	       movea.l 52(sp),a0
    db90:	       move.l 24(a0),d0
    db94:	       move.l d0,-(sp)
    db96:	       jsr 13f2a <getTextFromAnyVar>
    db9c:	       addq.l #4,sp
    db9e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    dba2:	       moveq #24,d0
    dba4:	       add.l 52(sp),d0
    dba8:	       move.l d0,-(sp)
    dbaa:	       jsr 142d8 <trimStack>
    dbb0:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    dbb2:	       move.l 40(sp),-(sp)
    dbb6:	       jsr 2fe <encodeFilename>
    dbbc:	       addq.l #4,sp
    dbbe:	       move.l d0,1b814 <loadNow>
    FreeVec(aaaaa);
    dbc4:	       move.l 40(sp),36(sp)
    dbca:	       move.l 1b848 <SysBase>,d0
    dbd0:	       movea.l d0,a6
    dbd2:	       movea.l 36(sp),a1
    dbd6:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    dbda:	       move.l 1b814 <loadNow>,d0
    dbe0:	       move.l d0,-(sp)
    dbe2:	       jsr d52c <failSecurityCheck>
    dbe8:	       addq.l #4,sp
    dbea:	       tst.w d0
    dbec:	   /-- beq.s dbf2 <builtIn_loadGame+0x6e>
    dbee:	   |   moveq #1,d0
    dbf0:	/--|-- bra.s dc62 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    dbf2:	|  \-> move.l 1b814 <loadNow>,32(sp)
    dbfa:	|      move.l #1005,28(sp)
    dc02:	|      move.l 1b850 <DOSBase>,d0
    dc08:	|      movea.l d0,a6
    dc0a:	|      move.l 32(sp),d1
    dc0e:	|      move.l 28(sp),d2
    dc12:	|      jsr -30(a6)
    dc16:	|      move.l d0,24(sp)
    dc1a:	|      move.l 24(sp),d0
    dc1e:	|      move.l d0,20(sp)
    if (fp) {
    dc22:	|  /-- beq.s dc42 <builtIn_loadGame+0xbe>
        Close(fp);
    dc24:	|  |   move.l 20(sp),12(sp)
    dc2a:	|  |   move.l 1b850 <DOSBase>,d0
    dc30:	|  |   movea.l d0,a6
    dc32:	|  |   move.l 12(sp),d1
    dc36:	|  |   jsr -36(a6)
    dc3a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    dc3e:	|  |   moveq #0,d0
    dc40:	+--|-- bra.s dc62 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    dc42:	|  \-> move.l 1b814 <loadNow>,16(sp)
    dc4a:	|      move.l 1b848 <SysBase>,d0
    dc50:	|      movea.l d0,a6
    dc52:	|      movea.l 16(sp),a1
    dc56:	|      jsr -690(a6)
    loadNow = NULL;
    dc5a:	|      clr.l 1b814 <loadNow>
    return BR_CONTINUE;
    dc60:	|      moveq #2,d0
}
    dc62:	\----> move.l (sp)+,d2
    dc64:	       movea.l (sp)+,a6
    dc66:	       lea 36(sp),sp
    dc6a:	       rts

0000dc6c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    dc6c:	move.l 1b940 <sceneHeight>,d0
    dc72:	move.l d0,d1
    dc74:	move.l 1b93c <sceneWidth>,d0
    dc7a:	move.l d1,-(sp)
    dc7c:	move.l d0,-(sp)
    dc7e:	clr.l -(sp)
    dc80:	clr.l -(sp)
    dc82:	jsr c420 <blankScreen>
    dc88:	lea 16(sp),sp
	return BR_CONTINUE;
    dc8c:	moveq #2,d0
}
    dc8e:	rts

0000dc90 <builtIn_blankArea>:

builtIn(blankArea)
{
    dc90:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dc94:	       movea.l 24(sp),a0
    dc98:	       move.l 24(a0),d0
    dc9c:	       move.l d0,-(sp)
    dc9e:	       pea 1 <_start+0x1>
    dca2:	       lea 8(sp),a0
    dca6:	       move.l a0,-(sp)
    dca8:	       jsr 13954 <getValueType>
    dcae:	       lea 12(sp),sp
    dcb2:	       tst.w d0
    dcb4:	   /-- bne.s dcbc <builtIn_blankArea+0x2c>
    dcb6:	   |   moveq #1,d0
    dcb8:	/--|-- bra.w dd92 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dcbc:	|  \-> moveq #24,d0
    dcbe:	|      add.l 24(sp),d0
    dcc2:	|      move.l d0,-(sp)
    dcc4:	|      jsr 142d8 <trimStack>
    dcca:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dccc:	|      movea.l 24(sp),a0
    dcd0:	|      move.l 24(a0),d0
    dcd4:	|      move.l d0,-(sp)
    dcd6:	|      pea 1 <_start+0x1>
    dcda:	|      lea 12(sp),a0
    dcde:	|      move.l a0,-(sp)
    dce0:	|      jsr 13954 <getValueType>
    dce6:	|      lea 12(sp),sp
    dcea:	|      tst.w d0
    dcec:	|  /-- bne.s dcf4 <builtIn_blankArea+0x64>
    dcee:	|  |   moveq #1,d0
    dcf0:	+--|-- bra.w dd92 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dcf4:	|  \-> moveq #24,d0
    dcf6:	|      add.l 24(sp),d0
    dcfa:	|      move.l d0,-(sp)
    dcfc:	|      jsr 142d8 <trimStack>
    dd02:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dd04:	|      movea.l 24(sp),a0
    dd08:	|      move.l 24(a0),d0
    dd0c:	|      move.l d0,-(sp)
    dd0e:	|      pea 1 <_start+0x1>
    dd12:	|      moveq #16,d0
    dd14:	|      add.l sp,d0
    dd16:	|      move.l d0,-(sp)
    dd18:	|      jsr 13954 <getValueType>
    dd1e:	|      lea 12(sp),sp
    dd22:	|      tst.w d0
    dd24:	|  /-- bne.s dd2a <builtIn_blankArea+0x9a>
    dd26:	|  |   moveq #1,d0
    dd28:	+--|-- bra.s dd92 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dd2a:	|  \-> moveq #24,d0
    dd2c:	|      add.l 24(sp),d0
    dd30:	|      move.l d0,-(sp)
    dd32:	|      jsr 142d8 <trimStack>
    dd38:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dd3a:	|      movea.l 24(sp),a0
    dd3e:	|      move.l 24(a0),d0
    dd42:	|      move.l d0,-(sp)
    dd44:	|      pea 1 <_start+0x1>
    dd48:	|      moveq #20,d0
    dd4a:	|      add.l sp,d0
    dd4c:	|      move.l d0,-(sp)
    dd4e:	|      jsr 13954 <getValueType>
    dd54:	|      lea 12(sp),sp
    dd58:	|      tst.w d0
    dd5a:	|  /-- bne.s dd60 <builtIn_blankArea+0xd0>
    dd5c:	|  |   moveq #1,d0
    dd5e:	+--|-- bra.s dd92 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dd60:	|  \-> moveq #24,d0
    dd62:	|      add.l 24(sp),d0
    dd66:	|      move.l d0,-(sp)
    dd68:	|      jsr 142d8 <trimStack>
    dd6e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    dd70:	|      movea.l (sp),a1
    dd72:	|      movea.l 4(sp),a0
    dd76:	|      move.l 8(sp),d1
    dd7a:	|      move.l 12(sp),d0
    dd7e:	|      move.l a1,-(sp)
    dd80:	|      move.l a0,-(sp)
    dd82:	|      move.l d1,-(sp)
    dd84:	|      move.l d0,-(sp)
    dd86:	|      jsr c420 <blankScreen>
    dd8c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    dd90:	|      moveq #2,d0
}
    dd92:	\----> lea 16(sp),sp
    dd96:	       rts

0000dd98 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    dd98:	jsr c434 <darkScreen>
	return BR_CONTINUE;
    dd9e:	moveq #2,d0
}
    dda0:	rts

0000dda2 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    dda2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dda6:	       movea.l 20(sp),a0
    ddaa:	       move.l 24(a0),d0
    ddae:	       move.l d0,-(sp)
    ddb0:	       pea 1 <_start+0x1>
    ddb4:	       lea 8(sp),a0
    ddb8:	       move.l a0,-(sp)
    ddba:	       jsr 13954 <getValueType>
    ddc0:	       lea 12(sp),sp
    ddc4:	       tst.w d0
    ddc6:	   /-- bne.s ddce <builtIn_addOverlay+0x2c>
    ddc8:	   |   moveq #1,d0
    ddca:	/--|-- bra.w de66 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ddce:	|  \-> moveq #24,d0
    ddd0:	|      add.l 20(sp),d0
    ddd4:	|      move.l d0,-(sp)
    ddd6:	|      jsr 142d8 <trimStack>
    dddc:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddde:	|      movea.l 20(sp),a0
    dde2:	|      move.l 24(a0),d0
    dde6:	|      move.l d0,-(sp)
    dde8:	|      pea 1 <_start+0x1>
    ddec:	|      moveq #12,d0
    ddee:	|      add.l sp,d0
    ddf0:	|      move.l d0,-(sp)
    ddf2:	|      jsr 13954 <getValueType>
    ddf8:	|      lea 12(sp),sp
    ddfc:	|      tst.w d0
    ddfe:	|  /-- bne.s de04 <builtIn_addOverlay+0x62>
    de00:	|  |   moveq #1,d0
    de02:	+--|-- bra.s de66 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    de04:	|  \-> moveq #24,d0
    de06:	|      add.l 20(sp),d0
    de0a:	|      move.l d0,-(sp)
    de0c:	|      jsr 142d8 <trimStack>
    de12:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    de14:	|      movea.l 20(sp),a0
    de18:	|      move.l 24(a0),d0
    de1c:	|      move.l d0,-(sp)
    de1e:	|      pea 5 <_start+0x5>
    de22:	|      moveq #16,d0
    de24:	|      add.l sp,d0
    de26:	|      move.l d0,-(sp)
    de28:	|      jsr 13954 <getValueType>
    de2e:	|      lea 12(sp),sp
    de32:	|      tst.w d0
    de34:	|  /-- bne.s de3a <builtIn_addOverlay+0x98>
    de36:	|  |   moveq #1,d0
    de38:	+--|-- bra.s de66 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    de3a:	|  \-> moveq #24,d0
    de3c:	|      add.l 20(sp),d0
    de40:	|      move.l d0,-(sp)
    de42:	|      jsr 142d8 <trimStack>
    de48:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    de4a:	|      movea.l (sp),a0
    de4c:	|      move.l 4(sp),d1
    de50:	|      move.l 8(sp),d0
    de54:	|      move.l a0,-(sp)
    de56:	|      move.l d1,-(sp)
    de58:	|      move.l d0,-(sp)
    de5a:	|      jsr c552 <loadBackDrop>
    de60:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de64:	|      moveq #2,d0
}
    de66:	\----> lea 12(sp),sp
    de6a:	       rts

0000de6c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    de6c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de70:	       movea.l 20(sp),a0
    de74:	       move.l 24(a0),d0
    de78:	       move.l d0,-(sp)
    de7a:	       pea 1 <_start+0x1>
    de7e:	       lea 8(sp),a0
    de82:	       move.l a0,-(sp)
    de84:	       jsr 13954 <getValueType>
    de8a:	       lea 12(sp),sp
    de8e:	       tst.w d0
    de90:	   /-- bne.s de98 <builtIn_mixOverlay+0x2c>
    de92:	   |   moveq #1,d0
    de94:	/--|-- bra.w df30 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    de98:	|  \-> moveq #24,d0
    de9a:	|      add.l 20(sp),d0
    de9e:	|      move.l d0,-(sp)
    dea0:	|      jsr 142d8 <trimStack>
    dea6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dea8:	|      movea.l 20(sp),a0
    deac:	|      move.l 24(a0),d0
    deb0:	|      move.l d0,-(sp)
    deb2:	|      pea 1 <_start+0x1>
    deb6:	|      moveq #12,d0
    deb8:	|      add.l sp,d0
    deba:	|      move.l d0,-(sp)
    debc:	|      jsr 13954 <getValueType>
    dec2:	|      lea 12(sp),sp
    dec6:	|      tst.w d0
    dec8:	|  /-- bne.s dece <builtIn_mixOverlay+0x62>
    deca:	|  |   moveq #1,d0
    decc:	+--|-- bra.s df30 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dece:	|  \-> moveq #24,d0
    ded0:	|      add.l 20(sp),d0
    ded4:	|      move.l d0,-(sp)
    ded6:	|      jsr 142d8 <trimStack>
    dedc:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dede:	|      movea.l 20(sp),a0
    dee2:	|      move.l 24(a0),d0
    dee6:	|      move.l d0,-(sp)
    dee8:	|      pea 5 <_start+0x5>
    deec:	|      moveq #16,d0
    deee:	|      add.l sp,d0
    def0:	|      move.l d0,-(sp)
    def2:	|      jsr 13954 <getValueType>
    def8:	|      lea 12(sp),sp
    defc:	|      tst.w d0
    defe:	|  /-- bne.s df04 <builtIn_mixOverlay+0x98>
    df00:	|  |   moveq #1,d0
    df02:	+--|-- bra.s df30 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    df04:	|  \-> moveq #24,d0
    df06:	|      add.l 20(sp),d0
    df0a:	|      move.l d0,-(sp)
    df0c:	|      jsr 142d8 <trimStack>
    df12:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    df14:	|      movea.l (sp),a0
    df16:	|      move.l 4(sp),d1
    df1a:	|      move.l 8(sp),d0
    df1e:	|      move.l a0,-(sp)
    df20:	|      move.l d1,-(sp)
    df22:	|      move.l d0,-(sp)
    df24:	|      jsr c5c8 <mixBackDrop>
    df2a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    df2e:	|      moveq #2,d0
}
    df30:	\----> lea 12(sp),sp
    df34:	       rts

0000df36 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    df36:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    df3a:	       pea 186d8 <PutChar+0x1b14>
    df40:	       jsr 16274 <KPrintF>
    df46:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df48:	       movea.l 20(sp),a0
    df4c:	       move.l 24(a0),d0
    df50:	       move.l d0,-(sp)
    df52:	       pea 1 <_start+0x1>
    df56:	       lea 8(sp),a0
    df5a:	       move.l a0,-(sp)
    df5c:	       jsr 13954 <getValueType>
    df62:	       lea 12(sp),sp
    df66:	       tst.w d0
    df68:	   /-- bne.s df70 <builtIn_pasteImage+0x3a>
    df6a:	   |   moveq #1,d0
    df6c:	/--|-- bra.w e00e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    df70:	|  \-> moveq #24,d0
    df72:	|      add.l 20(sp),d0
    df76:	|      move.l d0,-(sp)
    df78:	|      jsr 142d8 <trimStack>
    df7e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df80:	|      movea.l 20(sp),a0
    df84:	|      move.l 24(a0),d0
    df88:	|      move.l d0,-(sp)
    df8a:	|      pea 1 <_start+0x1>
    df8e:	|      moveq #12,d0
    df90:	|      add.l sp,d0
    df92:	|      move.l d0,-(sp)
    df94:	|      jsr 13954 <getValueType>
    df9a:	|      lea 12(sp),sp
    df9e:	|      tst.w d0
    dfa0:	|  /-- bne.s dfa6 <builtIn_pasteImage+0x70>
    dfa2:	|  |   moveq #1,d0
    dfa4:	+--|-- bra.s e00e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dfa6:	|  \-> moveq #24,d0
    dfa8:	|      add.l 20(sp),d0
    dfac:	|      move.l d0,-(sp)
    dfae:	|      jsr 142d8 <trimStack>
    dfb4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dfb6:	|      movea.l 20(sp),a0
    dfba:	|      move.l 24(a0),d0
    dfbe:	|      move.l d0,-(sp)
    dfc0:	|      jsr 13e2c <getAnimationFromVar>
    dfc6:	|      addq.l #4,sp
    dfc8:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    dfcc:	|      moveq #24,d0
    dfce:	|      add.l 20(sp),d0
    dfd2:	|      move.l d0,-(sp)
    dfd4:	|      jsr 142d8 <trimStack>
    dfda:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    dfdc:	|      tst.l 8(sp)
    dfe0:	|  /-- bne.s dfe6 <builtIn_pasteImage+0xb0>
    dfe2:	|  |   moveq #2,d0
    dfe4:	+--|-- bra.s e00e <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    dfe6:	|  \-> move.l (sp),d1
    dfe8:	|      move.l 4(sp),d0
    dfec:	|      move.l 8(sp),-(sp)
    dff0:	|      move.l d1,-(sp)
    dff2:	|      move.l d0,-(sp)
    dff4:	|      jsr d94 <pasteCursor>
    dffa:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    dffe:	|      pea 186ed <PutChar+0x1b29>
    e004:	|      jsr 16274 <KPrintF>
    e00a:	|      addq.l #4,sp
	return BR_CONTINUE;	
    e00c:	|      moveq #2,d0
}
    e00e:	\----> lea 12(sp),sp
    e012:	       rts

0000e014 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    e014:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e016:	       movea.l 16(sp),a0
    e01a:	       move.l 24(a0),d0
    e01e:	       move.l d0,-(sp)
    e020:	       pea 1 <_start+0x1>
    e024:	       move.l sp,d0
    e026:	       addq.l #8,d0
    e028:	       move.l d0,-(sp)
    e02a:	       jsr 13954 <getValueType>
    e030:	       lea 12(sp),sp
    e034:	       tst.w d0
    e036:	   /-- bne.s e03e <builtIn_setSceneDimensions+0x2a>
    e038:	   |   moveq #1,d0
    e03a:	/--|-- bra.w e0c6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e03e:	|  \-> moveq #24,d0
    e040:	|      add.l 16(sp),d0
    e044:	|      move.l d0,-(sp)
    e046:	|      jsr 142d8 <trimStack>
    e04c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e04e:	|      movea.l 16(sp),a0
    e052:	|      move.l 24(a0),d0
    e056:	|      move.l d0,-(sp)
    e058:	|      pea 1 <_start+0x1>
    e05c:	|      moveq #12,d0
    e05e:	|      add.l sp,d0
    e060:	|      move.l d0,-(sp)
    e062:	|      jsr 13954 <getValueType>
    e068:	|      lea 12(sp),sp
    e06c:	|      tst.w d0
    e06e:	|  /-- bne.s e074 <builtIn_setSceneDimensions+0x60>
    e070:	|  |   moveq #1,d0
    e072:	+--|-- bra.s e0c6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e074:	|  \-> moveq #24,d0
    e076:	|      add.l 16(sp),d0
    e07a:	|      move.l d0,-(sp)
    e07c:	|      jsr 142d8 <trimStack>
    e082:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    e084:	|      move.l (sp),d1
    e086:	|      move.l 4(sp),d0
    e08a:	|      move.l d1,-(sp)
    e08c:	|      move.l d0,-(sp)
    e08e:	|      jsr c61e <resizeBackdrop>
    e094:	|      addq.l #8,sp
    e096:	|      tst.w d0
    e098:	|  /-- beq.s e0b6 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    e09a:	|  |   move.l (sp),d1
    e09c:	|  |   move.l 4(sp),d0
    e0a0:	|  |   move.l d1,-(sp)
    e0a2:	|  |   move.l d0,-(sp)
    e0a4:	|  |   clr.l -(sp)
    e0a6:	|  |   clr.l -(sp)
    e0a8:	|  |   jsr c420 <blankScreen>
    e0ae:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    e0b2:	|  |   moveq #2,d0
    e0b4:	+--|-- bra.s e0c6 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    e0b6:	|  \-> pea 18703 <PutChar+0x1b3f>
    e0bc:	|      jsr 16274 <KPrintF>
    e0c2:	|      addq.l #4,sp
	return BR_ERROR;
    e0c4:	|      moveq #1,d0
}
    e0c6:	\----> addq.l #8,sp
    e0c8:	       rts

0000e0ca <builtIn_aimCamera>:

builtIn(aimCamera)
{
    e0ca:	          move.l d3,-(sp)
    e0cc:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e0ce:	          movea.l 16(sp),a0
    e0d2:	          move.l 24(a0),d0
    e0d6:	          move.l d0,-(sp)
    e0d8:	          pea 1 <_start+0x1>
    e0dc:	          pea 1b95e <cameraY>
    e0e2:	          jsr 13954 <getValueType>
    e0e8:	          lea 12(sp),sp
    e0ec:	          tst.w d0
    e0ee:	      /-- bne.s e0f6 <builtIn_aimCamera+0x2c>
    e0f0:	      |   moveq #1,d0
    e0f2:	/-----|-- bra.w e378 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e0f6:	|     \-> moveq #24,d0
    e0f8:	|         add.l 16(sp),d0
    e0fc:	|         move.l d0,-(sp)
    e0fe:	|         jsr 142d8 <trimStack>
    e104:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e106:	|         movea.l 16(sp),a0
    e10a:	|         move.l 24(a0),d0
    e10e:	|         move.l d0,-(sp)
    e110:	|         pea 1 <_start+0x1>
    e114:	|         pea 1b95a <cameraX>
    e11a:	|         jsr 13954 <getValueType>
    e120:	|         lea 12(sp),sp
    e124:	|         tst.w d0
    e126:	|     /-- bne.s e12e <builtIn_aimCamera+0x64>
    e128:	|     |   moveq #1,d0
    e12a:	+-----|-- bra.w e378 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e12e:	|     \-> moveq #24,d0
    e130:	|         add.l 16(sp),d0
    e134:	|         move.l d0,-(sp)
    e136:	|         jsr 142d8 <trimStack>
    e13c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    e13e:	|         move.l 1b95a <cameraX>,d0
    e144:	|         move.l d0,-(sp)
    e146:	|         jsr 1652c <__floatsisf>
    e14c:	|         addq.l #4,sp
    e14e:	|         move.l d0,d2
    e150:	|         move.l 1b79c <winWidth>,d0
    e156:	|         lsr.l #1,d0
    e158:	|         move.l d0,-(sp)
    e15a:	|         jsr 16554 <__floatunsisf>
    e160:	|         addq.l #4,sp
    e162:	|         move.l d0,d1
    e164:	|         move.l 1b1e8 <cameraZoom>,d0
    e16a:	|         move.l d0,-(sp)
    e16c:	|         move.l d1,-(sp)
    e16e:	|         jsr 163d8 <__divsf3>
    e174:	|         addq.l #8,sp
    e176:	|         move.l d0,-(sp)
    e178:	|         move.l d2,-(sp)
    e17a:	|         jsr 16820 <__subsf3>
    e180:	|         addq.l #8,sp
    e182:	|         move.l d0,-(sp)
    e184:	|         jsr 164c4 <__fixsfsi>
    e18a:	|         addq.l #4,sp
    e18c:	|         move.l d0,1b95a <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    e192:	|         move.l 1b95e <cameraY>,d0
    e198:	|         move.l d0,-(sp)
    e19a:	|         jsr 1652c <__floatsisf>
    e1a0:	|         addq.l #4,sp
    e1a2:	|         move.l d0,d2
    e1a4:	|         move.l 1b7a0 <winHeight>,d0
    e1aa:	|         lsr.l #1,d0
    e1ac:	|         move.l d0,-(sp)
    e1ae:	|         jsr 16554 <__floatunsisf>
    e1b4:	|         addq.l #4,sp
    e1b6:	|         move.l d0,d1
    e1b8:	|         move.l 1b1e8 <cameraZoom>,d0
    e1be:	|         move.l d0,-(sp)
    e1c0:	|         move.l d1,-(sp)
    e1c2:	|         jsr 163d8 <__divsf3>
    e1c8:	|         addq.l #8,sp
    e1ca:	|         move.l d0,-(sp)
    e1cc:	|         move.l d2,-(sp)
    e1ce:	|         jsr 16820 <__subsf3>
    e1d4:	|         addq.l #8,sp
    e1d6:	|         move.l d0,-(sp)
    e1d8:	|         jsr 164c4 <__fixsfsi>
    e1de:	|         addq.l #4,sp
    e1e0:	|         move.l d0,1b95e <cameraY>

	if (cameraX < 0) cameraX = 0;
    e1e6:	|         move.l 1b95a <cameraX>,d0
    e1ec:	|     /-- bpl.s e1f8 <builtIn_aimCamera+0x12e>
    e1ee:	|     |   clr.l 1b95a <cameraX>
    e1f4:	|  /--|-- bra.w e2ae <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    e1f8:	|  |  \-> move.l 1b95a <cameraX>,d0
    e1fe:	|  |      move.l d0,-(sp)
    e200:	|  |      jsr 1652c <__floatsisf>
    e206:	|  |      addq.l #4,sp
    e208:	|  |      move.l d0,d2
    e20a:	|  |      move.l 1b93c <sceneWidth>,d0
    e210:	|  |      move.l d0,-(sp)
    e212:	|  |      jsr 16554 <__floatunsisf>
    e218:	|  |      addq.l #4,sp
    e21a:	|  |      move.l d0,d3
    e21c:	|  |      move.l 1b79c <winWidth>,d0
    e222:	|  |      move.l d0,-(sp)
    e224:	|  |      jsr 16554 <__floatunsisf>
    e22a:	|  |      addq.l #4,sp
    e22c:	|  |      move.l d0,d1
    e22e:	|  |      move.l 1b1e8 <cameraZoom>,d0
    e234:	|  |      move.l d0,-(sp)
    e236:	|  |      move.l d1,-(sp)
    e238:	|  |      jsr 163d8 <__divsf3>
    e23e:	|  |      addq.l #8,sp
    e240:	|  |      move.l d0,-(sp)
    e242:	|  |      move.l d3,-(sp)
    e244:	|  |      jsr 16820 <__subsf3>
    e24a:	|  |      addq.l #8,sp
    e24c:	|  |      move.l d0,-(sp)
    e24e:	|  |      move.l d2,-(sp)
    e250:	|  |      jsr 16698 <__gtsf2>
    e256:	|  |      addq.l #8,sp
    e258:	|  |      tst.l d0
    e25a:	|  +----- ble.s e2ae <builtIn_aimCamera+0x1e4>
    e25c:	|  |      move.l 1b93c <sceneWidth>,d0
    e262:	|  |      move.l d0,-(sp)
    e264:	|  |      jsr 16554 <__floatunsisf>
    e26a:	|  |      addq.l #4,sp
    e26c:	|  |      move.l d0,d2
    e26e:	|  |      move.l 1b79c <winWidth>,d0
    e274:	|  |      move.l d0,-(sp)
    e276:	|  |      jsr 16554 <__floatunsisf>
    e27c:	|  |      addq.l #4,sp
    e27e:	|  |      move.l d0,d1
    e280:	|  |      move.l 1b1e8 <cameraZoom>,d0
    e286:	|  |      move.l d0,-(sp)
    e288:	|  |      move.l d1,-(sp)
    e28a:	|  |      jsr 163d8 <__divsf3>
    e290:	|  |      addq.l #8,sp
    e292:	|  |      move.l d0,-(sp)
    e294:	|  |      move.l d2,-(sp)
    e296:	|  |      jsr 16820 <__subsf3>
    e29c:	|  |      addq.l #8,sp
    e29e:	|  |      move.l d0,-(sp)
    e2a0:	|  |      jsr 164c4 <__fixsfsi>
    e2a6:	|  |      addq.l #4,sp
    e2a8:	|  |      move.l d0,1b95a <cameraX>
	if (cameraY < 0) cameraY = 0;
    e2ae:	|  \----> move.l 1b95e <cameraY>,d0
    e2b4:	|     /-- bpl.s e2c0 <builtIn_aimCamera+0x1f6>
    e2b6:	|     |   clr.l 1b95e <cameraY>
    e2bc:	|  /--|-- bra.w e376 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    e2c0:	|  |  \-> move.l 1b95e <cameraY>,d0
    e2c6:	|  |      move.l d0,-(sp)
    e2c8:	|  |      jsr 1652c <__floatsisf>
    e2ce:	|  |      addq.l #4,sp
    e2d0:	|  |      move.l d0,d2
    e2d2:	|  |      move.l 1b940 <sceneHeight>,d0
    e2d8:	|  |      move.l d0,-(sp)
    e2da:	|  |      jsr 16554 <__floatunsisf>
    e2e0:	|  |      addq.l #4,sp
    e2e2:	|  |      move.l d0,d3
    e2e4:	|  |      move.l 1b7a0 <winHeight>,d0
    e2ea:	|  |      move.l d0,-(sp)
    e2ec:	|  |      jsr 16554 <__floatunsisf>
    e2f2:	|  |      addq.l #4,sp
    e2f4:	|  |      move.l d0,d1
    e2f6:	|  |      move.l 1b1e8 <cameraZoom>,d0
    e2fc:	|  |      move.l d0,-(sp)
    e2fe:	|  |      move.l d1,-(sp)
    e300:	|  |      jsr 163d8 <__divsf3>
    e306:	|  |      addq.l #8,sp
    e308:	|  |      move.l d0,-(sp)
    e30a:	|  |      move.l d3,-(sp)
    e30c:	|  |      jsr 16820 <__subsf3>
    e312:	|  |      addq.l #8,sp
    e314:	|  |      move.l d0,-(sp)
    e316:	|  |      move.l d2,-(sp)
    e318:	|  |      jsr 16698 <__gtsf2>
    e31e:	|  |      addq.l #8,sp
    e320:	|  |      tst.l d0
    e322:	|  +----- ble.s e376 <builtIn_aimCamera+0x2ac>
    e324:	|  |      move.l 1b940 <sceneHeight>,d0
    e32a:	|  |      move.l d0,-(sp)
    e32c:	|  |      jsr 16554 <__floatunsisf>
    e332:	|  |      addq.l #4,sp
    e334:	|  |      move.l d0,d2
    e336:	|  |      move.l 1b7a0 <winHeight>,d0
    e33c:	|  |      move.l d0,-(sp)
    e33e:	|  |      jsr 16554 <__floatunsisf>
    e344:	|  |      addq.l #4,sp
    e346:	|  |      move.l d0,d1
    e348:	|  |      move.l 1b1e8 <cameraZoom>,d0
    e34e:	|  |      move.l d0,-(sp)
    e350:	|  |      move.l d1,-(sp)
    e352:	|  |      jsr 163d8 <__divsf3>
    e358:	|  |      addq.l #8,sp
    e35a:	|  |      move.l d0,-(sp)
    e35c:	|  |      move.l d2,-(sp)
    e35e:	|  |      jsr 16820 <__subsf3>
    e364:	|  |      addq.l #8,sp
    e366:	|  |      move.l d0,-(sp)
    e368:	|  |      jsr 164c4 <__fixsfsi>
    e36e:	|  |      addq.l #4,sp
    e370:	|  |      move.l d0,1b95e <cameraY>
	return BR_CONTINUE;
    e376:	|  \----> moveq #2,d0
}
    e378:	\-------> move.l (sp)+,d2
    e37a:	          move.l (sp)+,d3
    e37c:	          rts

0000e37e <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e37e:	       subq.l #4,sp
    e380:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e382:	       movea.l 16(sp),a0
    e386:	       move.l 24(a0),d0
    e38a:	       move.l d0,-(sp)
    e38c:	       pea 1 <_start+0x1>
    e390:	       moveq #12,d0
    e392:	       add.l sp,d0
    e394:	       move.l d0,-(sp)
    e396:	       jsr 13954 <getValueType>
    e39c:	       lea 12(sp),sp
    e3a0:	       tst.w d0
    e3a2:	   /-- bne.s e3aa <builtIn_zoomCamera+0x2c>
    e3a4:	   |   moveq #1,d0
    e3a6:	/--|-- bra.w e5a4 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e3aa:	|  \-> moveq #24,d0
    e3ac:	|      add.l 16(sp),d0
    e3b0:	|      move.l d0,-(sp)
    e3b2:	|      jsr 142d8 <trimStack>
    e3b8:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e3ba:	|      move.l 1b804 <input+0xa>,d0
    e3c0:	|      move.l d0,-(sp)
    e3c2:	|      jsr 1652c <__floatsisf>
    e3c8:	|      addq.l #4,sp
    e3ca:	|      move.l d0,d1
    e3cc:	|      move.l 1b1e8 <cameraZoom>,d0
    e3d2:	|      move.l d0,-(sp)
    e3d4:	|      move.l d1,-(sp)
    e3d6:	|      jsr 165de <__mulsf3>
    e3dc:	|      addq.l #8,sp
    e3de:	|      move.l d0,-(sp)
    e3e0:	|      jsr 164c4 <__fixsfsi>
    e3e6:	|      addq.l #4,sp
    e3e8:	|      move.l d0,1b804 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e3ee:	|      move.l 1b808 <input+0xe>,d0
    e3f4:	|      move.l d0,-(sp)
    e3f6:	|      jsr 1652c <__floatsisf>
    e3fc:	|      addq.l #4,sp
    e3fe:	|      move.l d0,d1
    e400:	|      move.l 1b1e8 <cameraZoom>,d0
    e406:	|      move.l d0,-(sp)
    e408:	|      move.l d1,-(sp)
    e40a:	|      jsr 165de <__mulsf3>
    e410:	|      addq.l #8,sp
    e412:	|      move.l d0,-(sp)
    e414:	|      jsr 164c4 <__fixsfsi>
    e41a:	|      addq.l #4,sp
    e41c:	|      move.l d0,1b808 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e422:	|      move.l 4(sp),d0
    e426:	|      move.l d0,-(sp)
    e428:	|      jsr 1652c <__floatsisf>
    e42e:	|      addq.l #4,sp
    e430:	|      move.l #1008981770,-(sp)
    e436:	|      move.l d0,-(sp)
    e438:	|      jsr 165de <__mulsf3>
    e43e:	|      addq.l #8,sp
    e440:	|      move.l d0,1b1e8 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e446:	|      move.l 1b79c <winWidth>,d0
    e44c:	|      move.l d0,-(sp)
    e44e:	|      jsr 16554 <__floatunsisf>
    e454:	|      addq.l #4,sp
    e456:	|      move.l d0,d1
    e458:	|      move.l 1b1e8 <cameraZoom>,d0
    e45e:	|      move.l d0,-(sp)
    e460:	|      move.l d1,-(sp)
    e462:	|      jsr 163d8 <__divsf3>
    e468:	|      addq.l #8,sp
    e46a:	|      move.l d0,d2
    e46c:	|      move.l 1b93c <sceneWidth>,d0
    e472:	|      move.l d0,-(sp)
    e474:	|      jsr 16554 <__floatunsisf>
    e47a:	|      addq.l #4,sp
    e47c:	|      move.l d0,-(sp)
    e47e:	|      move.l d2,-(sp)
    e480:	|      jsr 16698 <__gtsf2>
    e486:	|      addq.l #8,sp
    e488:	|      tst.l d0
    e48a:	|  /-- ble.s e4c0 <builtIn_zoomCamera+0x142>
    e48c:	|  |   move.l 1b79c <winWidth>,d0
    e492:	|  |   move.l d0,-(sp)
    e494:	|  |   jsr 16554 <__floatunsisf>
    e49a:	|  |   addq.l #4,sp
    e49c:	|  |   move.l d0,d2
    e49e:	|  |   move.l 1b93c <sceneWidth>,d0
    e4a4:	|  |   move.l d0,-(sp)
    e4a6:	|  |   jsr 16554 <__floatunsisf>
    e4ac:	|  |   addq.l #4,sp
    e4ae:	|  |   move.l d0,-(sp)
    e4b0:	|  |   move.l d2,-(sp)
    e4b2:	|  |   jsr 163d8 <__divsf3>
    e4b8:	|  |   addq.l #8,sp
    e4ba:	|  |   move.l d0,1b1e8 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e4c0:	|  \-> move.l 1b7a0 <winHeight>,d0
    e4c6:	|      move.l d0,-(sp)
    e4c8:	|      jsr 16554 <__floatunsisf>
    e4ce:	|      addq.l #4,sp
    e4d0:	|      move.l d0,d1
    e4d2:	|      move.l 1b1e8 <cameraZoom>,d0
    e4d8:	|      move.l d0,-(sp)
    e4da:	|      move.l d1,-(sp)
    e4dc:	|      jsr 163d8 <__divsf3>
    e4e2:	|      addq.l #8,sp
    e4e4:	|      move.l d0,d2
    e4e6:	|      move.l 1b940 <sceneHeight>,d0
    e4ec:	|      move.l d0,-(sp)
    e4ee:	|      jsr 16554 <__floatunsisf>
    e4f4:	|      addq.l #4,sp
    e4f6:	|      move.l d0,-(sp)
    e4f8:	|      move.l d2,-(sp)
    e4fa:	|      jsr 16698 <__gtsf2>
    e500:	|      addq.l #8,sp
    e502:	|      tst.l d0
    e504:	|  /-- ble.s e53a <builtIn_zoomCamera+0x1bc>
    e506:	|  |   move.l 1b7a0 <winHeight>,d0
    e50c:	|  |   move.l d0,-(sp)
    e50e:	|  |   jsr 16554 <__floatunsisf>
    e514:	|  |   addq.l #4,sp
    e516:	|  |   move.l d0,d2
    e518:	|  |   move.l 1b940 <sceneHeight>,d0
    e51e:	|  |   move.l d0,-(sp)
    e520:	|  |   jsr 16554 <__floatunsisf>
    e526:	|  |   addq.l #4,sp
    e528:	|  |   move.l d0,-(sp)
    e52a:	|  |   move.l d2,-(sp)
    e52c:	|  |   jsr 163d8 <__divsf3>
    e532:	|  |   addq.l #8,sp
    e534:	|  |   move.l d0,1b1e8 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e53a:	|  \-> move.l 1b804 <input+0xa>,d0
    e540:	|      move.l d0,-(sp)
    e542:	|      jsr 1652c <__floatsisf>
    e548:	|      addq.l #4,sp
    e54a:	|      move.l d0,d1
    e54c:	|      move.l 1b1e8 <cameraZoom>,d0
    e552:	|      move.l d0,-(sp)
    e554:	|      move.l d1,-(sp)
    e556:	|      jsr 163d8 <__divsf3>
    e55c:	|      addq.l #8,sp
    e55e:	|      move.l d0,-(sp)
    e560:	|      jsr 164c4 <__fixsfsi>
    e566:	|      addq.l #4,sp
    e568:	|      move.l d0,1b804 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e56e:	|      move.l 1b808 <input+0xe>,d0
    e574:	|      move.l d0,-(sp)
    e576:	|      jsr 1652c <__floatsisf>
    e57c:	|      addq.l #4,sp
    e57e:	|      move.l d0,d1
    e580:	|      move.l 1b1e8 <cameraZoom>,d0
    e586:	|      move.l d0,-(sp)
    e588:	|      move.l d1,-(sp)
    e58a:	|      jsr 163d8 <__divsf3>
    e590:	|      addq.l #8,sp
    e592:	|      move.l d0,-(sp)
    e594:	|      jsr 164c4 <__fixsfsi>
    e59a:	|      addq.l #4,sp
    e59c:	|      move.l d0,1b808 <input+0xe>

	return BR_CONTINUE;
    e5a2:	|      moveq #2,d0
}
    e5a4:	\----> move.l (sp)+,d2
    e5a6:	       addq.l #4,sp
    e5a8:	       rts

0000e5aa <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e5aa:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e5ac:	             tst.l 8(sp)
    e5b0:	         /-- bne.s e5c4 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e5b2:	         |   pea 18728 <PutChar+0x1b64>
    e5b8:	         |   jsr 16274 <KPrintF>
    e5be:	         |   addq.l #4,sp
		return BR_ERROR;
    e5c0:	         |   moveq #1,d0
    e5c2:	/--------|-- bra.s e624 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e5c4:	|        \-> jsr 14e74 <rand>
    e5ca:	|            move.l d0,d1
    e5cc:	|            move.l 8(sp),d0
    e5d0:	|            move.l d0,-(sp)
    e5d2:	|            move.l d1,-(sp)
    e5d4:	|            jsr 16b88 <__umodsi3>
    e5da:	|            addq.l #8,sp
    e5dc:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e5de:	|     /----- bra.s e612 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e5e0:	|  /--|----> move.l (sp),d0
    e5e2:	|  |  |      cmp.l 8(sp),d0
    e5e6:	|  |  |  /-- bne.s e602 <builtIn_pickOne+0x58>
    e5e8:	|  |  |  |   moveq #28,d0
    e5ea:	|  |  |  |   add.l 12(sp),d0
    e5ee:	|  |  |  |   movea.l 12(sp),a0
    e5f2:	|  |  |  |   move.l 24(a0),d1
    e5f6:	|  |  |  |   move.l d0,-(sp)
    e5f8:	|  |  |  |   move.l d1,-(sp)
    e5fa:	|  |  |  |   jsr 13e0e <copyVariable>
    e600:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e602:	|  |  |  \-> moveq #24,d0
    e604:	|  |  |      add.l 12(sp),d0
    e608:	|  |  |      move.l d0,-(sp)
    e60a:	|  |  |      jsr 142d8 <trimStack>
    e610:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e612:	|  |  \----> move.l 8(sp),d0
    e616:	|  |         move.l d0,d1
    e618:	|  |         subq.l #1,d1
    e61a:	|  |         move.l d1,8(sp)
    e61e:	|  |         tst.l d0
    e620:	|  \-------- bne.s e5e0 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e622:	|            moveq #2,d0
}
    e624:	\----------> addq.l #4,sp
    e626:	             rts

0000e628 <builtIn_substring>:

builtIn(substring)
{
    e628:	       lea -40(sp),sp
    e62c:	       move.l a6,-(sp)
    e62e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e630:	       movea.l 56(sp),a0
    e634:	       move.l 24(a0),d0
    e638:	       move.l d0,-(sp)
    e63a:	       pea 1 <_start+0x1>
    e63e:	       lea 16(sp),a0
    e642:	       move.l a0,-(sp)
    e644:	       jsr 13954 <getValueType>
    e64a:	       lea 12(sp),sp
    e64e:	       tst.w d0
    e650:	   /-- bne.s e658 <builtIn_substring+0x30>
    e652:	   |   moveq #1,d0
    e654:	/--|-- bra.w e7d0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e658:	|  \-> moveq #24,d0
    e65a:	|      add.l 56(sp),d0
    e65e:	|      move.l d0,-(sp)
    e660:	|      jsr 142d8 <trimStack>
    e666:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e668:	|      movea.l 56(sp),a0
    e66c:	|      move.l 24(a0),d0
    e670:	|      move.l d0,-(sp)
    e672:	|      pea 1 <_start+0x1>
    e676:	|      lea 20(sp),a0
    e67a:	|      move.l a0,-(sp)
    e67c:	|      jsr 13954 <getValueType>
    e682:	|      lea 12(sp),sp
    e686:	|      tst.w d0
    e688:	|  /-- bne.s e690 <builtIn_substring+0x68>
    e68a:	|  |   moveq #1,d0
    e68c:	+--|-- bra.w e7d0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e690:	|  \-> moveq #24,d0
    e692:	|      add.l 56(sp),d0
    e696:	|      move.l d0,-(sp)
    e698:	|      jsr 142d8 <trimStack>
    e69e:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e6a0:	|      movea.l 56(sp),a0
    e6a4:	|      move.l 24(a0),d0
    e6a8:	|      move.l d0,-(sp)
    e6aa:	|      jsr 13f2a <getTextFromAnyVar>
    e6b0:	|      addq.l #4,sp
    e6b2:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e6b6:	|      moveq #24,d0
    e6b8:	|      add.l 56(sp),d0
    e6bc:	|      move.l d0,-(sp)
    e6be:	|      jsr 142d8 <trimStack>
    e6c4:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e6c6:	|      move.l 44(sp),-(sp)
    e6ca:	|      jsr 12e40 <strlen>
    e6d0:	|      addq.l #4,sp
    e6d2:	|      move.l d0,d1
    e6d4:	|      move.l 12(sp),d0
    e6d8:	|      movea.l d0,a0
    e6da:	|      move.l 8(sp),d0
    e6de:	|      add.l a0,d0
    e6e0:	|      cmp.l d1,d0
    e6e2:	|  /-- bls.s e718 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e6e4:	|  |   move.l 44(sp),-(sp)
    e6e8:	|  |   jsr 12e40 <strlen>
    e6ee:	|  |   addq.l #4,sp
    e6f0:	|  |   move.l d0,d1
    e6f2:	|  |   move.l 12(sp),d0
    e6f6:	|  |   sub.l d0,d1
    e6f8:	|  |   move.l d1,d0
    e6fa:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e6fe:	|  |   move.l 44(sp),-(sp)
    e702:	|  |   jsr 12e40 <strlen>
    e708:	|  |   addq.l #4,sp
    e70a:	|  |   move.l d0,d1
    e70c:	|  |   move.l 12(sp),d0
    e710:	|  |   cmp.l d1,d0
    e712:	|  +-- bls.s e718 <builtIn_substring+0xf0>
            start = 0;
    e714:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e718:	|  \-> move.l 8(sp),d0
    e71c:	|  /-- bpl.s e722 <builtIn_substring+0xfa>
        length = 0;
    e71e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e722:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e728:	|      move.l 12(sp),d1
    e72c:	|      move.l 8(sp),d0
    e730:	|      move.l d1,d2
    e732:	|      add.l d0,d2
    e734:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e738:	|      move.l 36(sp),d0
    e73c:	|      sub.l 40(sp),d0
    e740:	|      addq.l #1,d0
    e742:	|      move.l d0,32(sp)
    e746:	|      clr.l 28(sp)
    e74a:	|      move.l 1b848 <SysBase>,d0
    e750:	|      movea.l d0,a6
    e752:	|      move.l 32(sp),d0
    e756:	|      move.l 28(sp),d1
    e75a:	|      jsr -684(a6)
    e75e:	|      move.l d0,24(sp)
    e762:	|      move.l 24(sp),d0
    e766:	|      move.l d0,20(sp)
    if (!newString) {
    e76a:	|  /-- bne.s e770 <builtIn_substring+0x148>
        return BR_ERROR;
    e76c:	|  |   moveq #1,d0
    e76e:	+--|-- bra.s e7d0 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e770:	|  \-> move.l 36(sp),d0
    e774:	|      sub.l 40(sp),d0
    e778:	|      move.l d0,d1
    e77a:	|      move.l 40(sp),d0
    e77e:	|      add.l 44(sp),d0
    e782:	|      move.l d1,-(sp)
    e784:	|      move.l d0,-(sp)
    e786:	|      move.l 28(sp),-(sp)
    e78a:	|      jsr 16228 <memcpy>
    e790:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e794:	|      move.l 36(sp),d0
    e798:	|      sub.l 40(sp),d0
    e79c:	|      movea.l 20(sp),a0
    e7a0:	|      adda.l d0,a0
    e7a2:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e7a4:	|      moveq #28,d0
    e7a6:	|      add.l 56(sp),d0
    e7aa:	|      move.l 20(sp),-(sp)
    e7ae:	|      move.l d0,-(sp)
    e7b0:	|      jsr 13b76 <makeTextVar>
    e7b6:	|      addq.l #8,sp
    FreeVec(newString);
    e7b8:	|      move.l 20(sp),16(sp)
    e7be:	|      move.l 1b848 <SysBase>,d0
    e7c4:	|      movea.l d0,a6
    e7c6:	|      movea.l 16(sp),a1
    e7ca:	|      jsr -690(a6)
    return BR_CONTINUE;
    e7ce:	|      moveq #2,d0
}
    e7d0:	\----> move.l (sp)+,d2
    e7d2:	       movea.l (sp)+,a6
    e7d4:	       lea 40(sp),sp
    e7d8:	       rts

0000e7da <builtIn_stringLength>:

builtIn(stringLength)
{
    e7da:	subq.l #8,sp
    e7dc:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e7de:	movea.l 20(sp),a0
    e7e2:	move.l 24(a0),d0
    e7e6:	move.l d0,-(sp)
    e7e8:	jsr 13f2a <getTextFromAnyVar>
    e7ee:	addq.l #4,sp
    e7f0:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e7f4:	moveq #24,d0
    e7f6:	add.l 20(sp),d0
    e7fa:	move.l d0,-(sp)
    e7fc:	jsr 142d8 <trimStack>
    e802:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e804:	move.l 8(sp),-(sp)
    e808:	jsr 12e40 <strlen>
    e80e:	addq.l #4,sp
    e810:	move.l d0,d1
    e812:	moveq #28,d0
    e814:	add.l 20(sp),d0
    e818:	move.l d1,-(sp)
    e81a:	pea 1 <_start+0x1>
    e81e:	move.l d0,-(sp)
    e820:	jsr 14246 <setVariable>
    e826:	lea 12(sp),sp
	FreeVec(newText);
    e82a:	move.l 8(sp),4(sp)
    e830:	move.l 1b848 <SysBase>,d0
    e836:	movea.l d0,a6
    e838:	movea.l 4(sp),a1
    e83c:	jsr -690(a6)
	return BR_CONTINUE;
    e840:	moveq #2,d0
}
    e842:	movea.l (sp)+,a6
    e844:	addq.l #8,sp
    e846:	rts

0000e848 <builtIn_newStack>:

builtIn(newStack)
{
    e848:	             lea -12(sp),sp
    e84c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e84e:	             moveq #28,d0
    e850:	             add.l 24(sp),d0
    e854:	             move.l d0,-(sp)
    e856:	             jsr 13ba2 <unlinkVar>
    e85c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e85e:	             movea.l 24(sp),a0
    e862:	             moveq #6,d0
    e864:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e868:	             moveq #12,d1
    e86a:	             move.l d1,12(sp)
    e86e:	             clr.l 8(sp)
    e872:	             move.l 1b848 <SysBase>,d0
    e878:	             movea.l d0,a6
    e87a:	             move.l 12(sp),d0
    e87e:	             move.l 8(sp),d1
    e882:	             jsr -684(a6)
    e886:	             move.l d0,4(sp)
    e88a:	             move.l 4(sp),d0
    e88e:	             movea.l 24(sp),a0
    e892:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e896:	             movea.l 24(sp),a0
    e89a:	             move.l 32(a0),d0
    e89e:	         /-- bne.s e8a6 <builtIn_newStack+0x5e>
    e8a0:	         |   moveq #1,d0
    e8a2:	/--------|-- bra.w e938 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e8a6:	|        \-> movea.l 24(sp),a0
    e8aa:	|            movea.l 32(a0),a0
    e8ae:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e8b0:	|            movea.l 24(sp),a0
    e8b4:	|            movea.l 32(a0),a0
    e8b8:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e8bc:	|            movea.l 24(sp),a0
    e8c0:	|            movea.l 32(a0),a0
    e8c4:	|            moveq #1,d0
    e8c6:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e8ca:	|     /----- bra.s e926 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e8cc:	|  /--|----> movea.l 24(sp),a0
    e8d0:	|  |  |      move.l 32(a0),d0
    e8d4:	|  |  |      move.l d0,d1
    e8d6:	|  |  |      movea.l 24(sp),a0
    e8da:	|  |  |      move.l 24(a0),d0
    e8de:	|  |  |      move.l d1,-(sp)
    e8e0:	|  |  |      move.l d0,-(sp)
    e8e2:	|  |  |      jsr 13190 <addVarToStack>
    e8e8:	|  |  |      addq.l #8,sp
    e8ea:	|  |  |      tst.w d0
    e8ec:	|  |  |  /-- bne.s e8f2 <builtIn_newStack+0xaa>
    e8ee:	|  |  |  |   moveq #1,d0
    e8f0:	+--|--|--|-- bra.s e938 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e8f2:	|  |  |  \-> movea.l 24(sp),a0
    e8f6:	|  |  |      movea.l 32(a0),a0
    e8fa:	|  |  |      move.l 4(a0),d0
    e8fe:	|  |  |  /-- bne.s e916 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e900:	|  |  |  |   movea.l 24(sp),a0
    e904:	|  |  |  |   movea.l 32(a0),a1
    e908:	|  |  |  |   movea.l 24(sp),a0
    e90c:	|  |  |  |   movea.l 32(a0),a0
    e910:	|  |  |  |   move.l (a1),d0
    e912:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e916:	|  |  |  \-> moveq #24,d0
    e918:	|  |  |      add.l 24(sp),d0
    e91c:	|  |  |      move.l d0,-(sp)
    e91e:	|  |  |      jsr 142d8 <trimStack>
    e924:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e926:	|  |  \----> move.l 20(sp),d0
    e92a:	|  |         move.l d0,d1
    e92c:	|  |         subq.l #1,d1
    e92e:	|  |         move.l d1,20(sp)
    e932:	|  |         tst.l d0
    e934:	|  \-------- bne.s e8cc <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e936:	|            moveq #2,d0
}
    e938:	\----------> movea.l (sp)+,a6
    e93a:	             lea 12(sp),sp
    e93e:	             rts

0000e940 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e940:	          movea.l 8(sp),a0
    e944:	          movea.l 24(a0),a0
    e948:	          move.l (a0),d0
    e94a:	          moveq #6,d1
    e94c:	          cmp.l d0,d1
    e94e:	      /-- beq.s e96a <builtIn_stackSize+0x2a>
    e950:	      |   moveq #10,d1
    e952:	      |   cmp.l d0,d1
    e954:	   /--|-- beq.s e9ae <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e956:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e958:	   |  |   pea 1875b <PutChar+0x1b97>
    e95e:	   |  |   jsr 16274 <KPrintF>
    e964:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e966:	   |  |   moveq #1,d0
    e968:	/--|--|-- bra.s e9e8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e96a:	|  |  \-> movea.l 8(sp),a0
    e96e:	|  |      movea.l 24(a0),a0
    e972:	|  |      move.l 4(a0),d0
    e976:	|  |      move.l d0,-(sp)
    e978:	|  |      jsr 142b4 <stackSize>
    e97e:	|  |      addq.l #4,sp
    e980:	|  |      move.l d0,d1
    e982:	|  |      moveq #28,d0
    e984:	|  |      add.l 8(sp),d0
    e988:	|  |      move.l d1,-(sp)
    e98a:	|  |      pea 1 <_start+0x1>
    e98e:	|  |      move.l d0,-(sp)
    e990:	|  |      jsr 14246 <setVariable>
    e996:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e99a:	|  |      moveq #24,d0
    e99c:	|  |      add.l 8(sp),d0
    e9a0:	|  |      move.l d0,-(sp)
    e9a2:	|  |      jsr 142d8 <trimStack>
    e9a8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e9aa:	|  |      moveq #2,d0
    e9ac:	+--|----- bra.s e9e8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e9ae:	|  \----> movea.l 8(sp),a0
    e9b2:	|         movea.l 24(a0),a0
    e9b6:	|         movea.l 4(a0),a0
    e9ba:	|         move.l 4(a0),d1
    e9be:	|         moveq #28,d0
    e9c0:	|         add.l 8(sp),d0
    e9c4:	|         move.l d1,-(sp)
    e9c6:	|         pea 1 <_start+0x1>
    e9ca:	|         move.l d0,-(sp)
    e9cc:	|         jsr 14246 <setVariable>
    e9d2:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e9d6:	|         moveq #24,d0
    e9d8:	|         add.l 8(sp),d0
    e9dc:	|         move.l d0,-(sp)
    e9de:	|         jsr 142d8 <trimStack>
    e9e4:	|         addq.l #4,sp
			return BR_CONTINUE;
    e9e6:	|         moveq #2,d0
}
    e9e8:	\-------> rts

0000e9ea <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e9ea:	       movea.l 8(sp),a0
    e9ee:	       movea.l 24(a0),a0
    e9f2:	       move.l (a0),d0
    e9f4:	       moveq #6,d1
    e9f6:	       cmp.l d0,d1
    e9f8:	   /-- beq.s ea0c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e9fa:	   |   pea 18784 <PutChar+0x1bc0>
    ea00:	   |   jsr 16274 <KPrintF>
    ea06:	   |   addq.l #4,sp
		return BR_ERROR;
    ea08:	   |   moveq #1,d0
    ea0a:	/--|-- bra.s ea40 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    ea0c:	|  \-> moveq #28,d0
    ea0e:	|      add.l 8(sp),d0
    ea12:	|      movea.l 8(sp),a0
    ea16:	|      move.l 24(a0),d1
    ea1a:	|      move.l d0,-(sp)
    ea1c:	|      move.l d1,-(sp)
    ea1e:	|      jsr 1345a <copyStack>
    ea24:	|      addq.l #8,sp
    ea26:	|      tst.w d0
    ea28:	|  /-- bne.s ea2e <builtIn_copyStack+0x44>
    ea2a:	|  |   moveq #1,d0
    ea2c:	+--|-- bra.s ea40 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    ea2e:	|  \-> moveq #24,d0
    ea30:	|      add.l 8(sp),d0
    ea34:	|      move.l d0,-(sp)
    ea36:	|      jsr 142d8 <trimStack>
    ea3c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea3e:	|      moveq #2,d0
}
    ea40:	\----> rts

0000ea42 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ea42:	       movea.l 8(sp),a0
    ea46:	       movea.l 24(a0),a0
    ea4a:	       movea.l 8(a0),a0
    ea4e:	       move.l (a0),d0
    ea50:	       moveq #6,d1
    ea52:	       cmp.l d0,d1
    ea54:	   /-- beq.s ea6a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    ea56:	   |   pea 1879d <PutChar+0x1bd9>
    ea5c:	   |   jsr 16274 <KPrintF>
    ea62:	   |   addq.l #4,sp
		return BR_ERROR;
    ea64:	   |   moveq #1,d0
    ea66:	/--|-- bra.w eaf8 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ea6a:	|  \-> movea.l 8(sp),a0
    ea6e:	|      movea.l 24(a0),a0
    ea72:	|      movea.l 8(a0),a0
    ea76:	|      move.l 4(a0),d0
    ea7a:	|      move.l d0,d1
    ea7c:	|      movea.l 8(sp),a0
    ea80:	|      move.l 24(a0),d0
    ea84:	|      move.l d1,-(sp)
    ea86:	|      move.l d0,-(sp)
    ea88:	|      jsr 13190 <addVarToStack>
    ea8e:	|      addq.l #8,sp
    ea90:	|      tst.w d0
    ea92:	|  /-- bne.s ea98 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    ea94:	|  |   moveq #1,d0
    ea96:	+--|-- bra.s eaf8 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    ea98:	|  \-> movea.l 8(sp),a0
    ea9c:	|      movea.l 24(a0),a0
    eaa0:	|      movea.l 8(a0),a0
    eaa4:	|      movea.l 4(a0),a0
    eaa8:	|      movea.l (a0),a0
    eaaa:	|      move.l 8(a0),d0
    eaae:	|  /-- bne.s ead6 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    eab0:	|  |   movea.l 8(sp),a0
    eab4:	|  |   movea.l 24(a0),a0
    eab8:	|  |   movea.l 8(a0),a0
    eabc:	|  |   movea.l 4(a0),a1
    eac0:	|  |   movea.l 8(sp),a0
    eac4:	|  |   movea.l 24(a0),a0
    eac8:	|  |   movea.l 8(a0),a0
    eacc:	|  |   movea.l 4(a0),a0
    ead0:	|  |   move.l (a1),d0
    ead2:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    ead6:	|  \-> moveq #24,d0
    ead8:	|      add.l 8(sp),d0
    eadc:	|      move.l d0,-(sp)
    eade:	|      jsr 142d8 <trimStack>
    eae4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    eae6:	|      moveq #24,d0
    eae8:	|      add.l 8(sp),d0
    eaec:	|      move.l d0,-(sp)
    eaee:	|      jsr 142d8 <trimStack>
    eaf4:	|      addq.l #4,sp
	return BR_CONTINUE;
    eaf6:	|      moveq #2,d0
}
    eaf8:	\----> rts

0000eafa <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    eafa:	             movea.l 8(sp),a0
    eafe:	             movea.l 24(a0),a0
    eb02:	             movea.l 8(a0),a0
    eb06:	             move.l (a0),d0
    eb08:	             moveq #6,d1
    eb0a:	             cmp.l d0,d1
    eb0c:	         /-- beq.s eb22 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    eb0e:	         |   pea 1879d <PutChar+0x1bd9>
    eb14:	         |   jsr 16274 <KPrintF>
    eb1a:	         |   addq.l #4,sp
		return BR_ERROR;
    eb1c:	         |   moveq #1,d0
    eb1e:	/--------|-- bra.w ec10 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    eb22:	|        \-> movea.l 8(sp),a0
    eb26:	|            movea.l 24(a0),a0
    eb2a:	|            movea.l 8(a0),a0
    eb2e:	|            movea.l 4(a0),a0
    eb32:	|            move.l (a0),d0
    eb34:	|     /----- bne.s eb8e <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    eb36:	|     |      movea.l 8(sp),a0
    eb3a:	|     |      movea.l 24(a0),a0
    eb3e:	|     |      movea.l 8(a0),a0
    eb42:	|     |      move.l 4(a0),d0
    eb46:	|     |      move.l d0,d1
    eb48:	|     |      movea.l 8(sp),a0
    eb4c:	|     |      move.l 24(a0),d0
    eb50:	|     |      move.l d1,-(sp)
    eb52:	|     |      move.l d0,-(sp)
    eb54:	|     |      jsr 13190 <addVarToStack>
    eb5a:	|     |      addq.l #8,sp
    eb5c:	|     |      tst.w d0
    eb5e:	|     |  /-- bne.s eb66 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    eb60:	|     |  |   moveq #1,d0
    eb62:	+-----|--|-- bra.w ec10 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    eb66:	|     |  \-> movea.l 8(sp),a0
    eb6a:	|     |      movea.l 24(a0),a0
    eb6e:	|     |      movea.l 8(a0),a0
    eb72:	|     |      movea.l 4(a0),a1
    eb76:	|     |      movea.l 8(sp),a0
    eb7a:	|     |      movea.l 24(a0),a0
    eb7e:	|     |      movea.l 8(a0),a0
    eb82:	|     |      movea.l 4(a0),a0
    eb86:	|     |      move.l (a1),d0
    eb88:	|     |      move.l d0,4(a0)
    eb8c:	|  /--|----- bra.s ebee <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    eb8e:	|  |  \----> movea.l 8(sp),a0
    eb92:	|  |         movea.l 24(a0),a0
    eb96:	|  |         movea.l 8(a0),a0
    eb9a:	|  |         movea.l 4(a0),a0
    eb9e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    eba2:	|  |         move.l d0,d1
    eba4:	|  |         addq.l #8,d1
    eba6:	|  |         movea.l 8(sp),a0
    ebaa:	|  |         move.l 24(a0),d0
    ebae:	|  |         move.l d1,-(sp)
    ebb0:	|  |         move.l d0,-(sp)
    ebb2:	|  |         jsr 13190 <addVarToStack>
    ebb8:	|  |         addq.l #8,sp
    ebba:	|  |         tst.w d0
    ebbc:	|  |     /-- bne.s ebc2 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    ebbe:	|  |     |   moveq #1,d0
    ebc0:	+--|-----|-- bra.s ec10 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    ebc2:	|  |     \-> movea.l 8(sp),a0
    ebc6:	|  |         movea.l 24(a0),a0
    ebca:	|  |         movea.l 8(a0),a0
    ebce:	|  |         movea.l 4(a0),a0
    ebd2:	|  |         movea.l 4(a0),a1
    ebd6:	|  |         movea.l 8(sp),a0
    ebda:	|  |         movea.l 24(a0),a0
    ebde:	|  |         movea.l 8(a0),a0
    ebe2:	|  |         movea.l 4(a0),a0
    ebe6:	|  |         move.l 8(a1),d0
    ebea:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    ebee:	|  \-------> moveq #24,d0
    ebf0:	|            add.l 8(sp),d0
    ebf4:	|            move.l d0,-(sp)
    ebf6:	|            jsr 142d8 <trimStack>
    ebfc:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    ebfe:	|            moveq #24,d0
    ec00:	|            add.l 8(sp),d0
    ec04:	|            move.l d0,-(sp)
    ec06:	|            jsr 142d8 <trimStack>
    ec0c:	|            addq.l #4,sp
	return BR_CONTINUE;
    ec0e:	|            moveq #2,d0
}
    ec10:	\----------> rts

0000ec12 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    ec12:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ec14:	       movea.l 12(sp),a0
    ec18:	       movea.l 24(a0),a0
    ec1c:	       movea.l 8(a0),a0
    ec20:	       move.l (a0),d0
    ec22:	       moveq #6,d1
    ec24:	       cmp.l d0,d1
    ec26:	   /-- beq.s ec3c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ec28:	   |   pea 18784 <PutChar+0x1bc0>
    ec2e:	   |   jsr 16274 <KPrintF>
    ec34:	   |   addq.l #4,sp
		return BR_ERROR;
    ec36:	   |   moveq #1,d0
    ec38:	/--|-- bra.w ecd2 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ec3c:	|  \-> movea.l 12(sp),a0
    ec40:	|      movea.l 24(a0),a0
    ec44:	|      movea.l 8(a0),a0
    ec48:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ec4c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ec4e:	|      movea.l 12(sp),a0
    ec52:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ec56:	|      clr.l -(sp)
    ec58:	|      move.l d1,-(sp)
    ec5a:	|      move.l d0,-(sp)
    ec5c:	|      jsr 13530 <deleteVarFromStack>
    ec62:	|      lea 12(sp),sp
    ec66:	|      move.l d0,d1
    ec68:	|      moveq #28,d0
    ec6a:	|      add.l 12(sp),d0
    ec6e:	|      move.l d1,-(sp)
    ec70:	|      pea 1 <_start+0x1>
    ec74:	|      move.l d0,-(sp)
    ec76:	|      jsr 14246 <setVariable>
    ec7c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ec80:	|      movea.l 12(sp),a0
    ec84:	|      movea.l 24(a0),a0
    ec88:	|      movea.l 8(a0),a0
    ec8c:	|      movea.l 4(a0),a0
    ec90:	|      move.l (a0),d0
    ec92:	|      movea.l 12(sp),a0
    ec96:	|      movea.l 24(a0),a0
    ec9a:	|      movea.l 8(a0),a0
    ec9e:	|      movea.l 4(a0),a2
    eca2:	|      move.l d0,-(sp)
    eca4:	|      jsr 14290 <stackFindLast>
    ecaa:	|      addq.l #4,sp
    ecac:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ecb0:	|      moveq #24,d0
    ecb2:	|      add.l 12(sp),d0
    ecb6:	|      move.l d0,-(sp)
    ecb8:	|      jsr 142d8 <trimStack>
    ecbe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ecc0:	|      moveq #24,d0
    ecc2:	|      add.l 12(sp),d0
    ecc6:	|      move.l d0,-(sp)
    ecc8:	|      jsr 142d8 <trimStack>
    ecce:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecd0:	|      moveq #2,d0
}
    ecd2:	\----> movea.l (sp)+,a2
    ecd4:	       rts

0000ecd6 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    ecd6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ecd8:	       movea.l 12(sp),a0
    ecdc:	       movea.l 24(a0),a0
    ece0:	       movea.l 8(a0),a0
    ece4:	       move.l (a0),d0
    ece6:	       moveq #6,d1
    ece8:	       cmp.l d0,d1
    ecea:	   /-- beq.s ed00 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ecec:	   |   pea 18784 <PutChar+0x1bc0>
    ecf2:	   |   jsr 16274 <KPrintF>
    ecf8:	   |   addq.l #4,sp
		return BR_ERROR;
    ecfa:	   |   moveq #1,d0
    ecfc:	/--|-- bra.w ed98 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    ed00:	|  \-> movea.l 12(sp),a0
    ed04:	|      movea.l 24(a0),a0
    ed08:	|      movea.l 8(a0),a0
    ed0c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ed10:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ed12:	|      movea.l 12(sp),a0
    ed16:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ed1a:	|      pea 1 <_start+0x1>
    ed1e:	|      move.l d1,-(sp)
    ed20:	|      move.l d0,-(sp)
    ed22:	|      jsr 13530 <deleteVarFromStack>
    ed28:	|      lea 12(sp),sp
    ed2c:	|      move.l d0,d1
    ed2e:	|      moveq #28,d0
    ed30:	|      add.l 12(sp),d0
    ed34:	|      move.l d1,-(sp)
    ed36:	|      pea 1 <_start+0x1>
    ed3a:	|      move.l d0,-(sp)
    ed3c:	|      jsr 14246 <setVariable>
    ed42:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ed46:	|      movea.l 12(sp),a0
    ed4a:	|      movea.l 24(a0),a0
    ed4e:	|      movea.l 8(a0),a0
    ed52:	|      movea.l 4(a0),a0
    ed56:	|      move.l (a0),d0
    ed58:	|      movea.l 12(sp),a0
    ed5c:	|      movea.l 24(a0),a0
    ed60:	|      movea.l 8(a0),a0
    ed64:	|      movea.l 4(a0),a2
    ed68:	|      move.l d0,-(sp)
    ed6a:	|      jsr 14290 <stackFindLast>
    ed70:	|      addq.l #4,sp
    ed72:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ed76:	|      moveq #24,d0
    ed78:	|      add.l 12(sp),d0
    ed7c:	|      move.l d0,-(sp)
    ed7e:	|      jsr 142d8 <trimStack>
    ed84:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ed86:	|      moveq #24,d0
    ed88:	|      add.l 12(sp),d0
    ed8c:	|      move.l d0,-(sp)
    ed8e:	|      jsr 142d8 <trimStack>
    ed94:	|      addq.l #4,sp
	return BR_CONTINUE;
    ed96:	|      moveq #2,d0
}
    ed98:	\----> movea.l (sp)+,a2
    ed9a:	       rts

0000ed9c <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ed9c:	       movea.l 8(sp),a0
    eda0:	       movea.l 24(a0),a0
    eda4:	       move.l (a0),d0
    eda6:	       moveq #6,d1
    eda8:	       cmp.l d0,d1
    edaa:	   /-- beq.s edbe <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    edac:	   |   pea 18784 <PutChar+0x1bc0>
    edb2:	   |   jsr 16274 <KPrintF>
    edb8:	   |   addq.l #4,sp
		return BR_ERROR;
    edba:	   |   moveq #1,d0
    edbc:	/--|-- bra.s ee28 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    edbe:	|  \-> movea.l 8(sp),a0
    edc2:	|      movea.l 24(a0),a0
    edc6:	|      movea.l 4(a0),a0
    edca:	|      move.l (a0),d0
    edcc:	|  /-- bne.s ede0 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    edce:	|  |   pea 187b5 <PutChar+0x1bf1>
    edd4:	|  |   jsr 16274 <KPrintF>
    edda:	|  |   addq.l #4,sp
		return BR_ERROR;
    eddc:	|  |   moveq #1,d0
    edde:	+--|-- bra.s ee28 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ede0:	|  \-> moveq #28,d0
    ede2:	|      add.l 8(sp),d0
    ede6:	|      movea.l 8(sp),a0
    edea:	|      movea.l 24(a0),a0
    edee:	|      movea.l 4(a0),a0
    edf2:	|      move.l (a0),d1
    edf4:	|      move.l d0,-(sp)
    edf6:	|      move.l d1,-(sp)
    edf8:	|      jsr 13e0e <copyVariable>
    edfe:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ee00:	|      movea.l 8(sp),a0
    ee04:	|      movea.l 24(a0),a0
    ee08:	|      move.l 4(a0),d0
    ee0c:	|      move.l d0,-(sp)
    ee0e:	|      jsr 142d8 <trimStack>
    ee14:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ee16:	|      moveq #24,d0
    ee18:	|      add.l 8(sp),d0
    ee1c:	|      move.l d0,-(sp)
    ee1e:	|      jsr 142d8 <trimStack>
    ee24:	|      addq.l #4,sp
	return BR_CONTINUE;
    ee26:	|      moveq #2,d0
}
    ee28:	\----> rts

0000ee2a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ee2a:	       movea.l 8(sp),a0
    ee2e:	       movea.l 24(a0),a0
    ee32:	       move.l (a0),d0
    ee34:	       moveq #6,d1
    ee36:	       cmp.l d0,d1
    ee38:	   /-- beq.s ee4c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ee3a:	   |   pea 18784 <PutChar+0x1bc0>
    ee40:	   |   jsr 16274 <KPrintF>
    ee46:	   |   addq.l #4,sp
		return BR_ERROR;
    ee48:	   |   moveq #1,d0
    ee4a:	/--|-- bra.s eea0 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ee4c:	|  \-> movea.l 8(sp),a0
    ee50:	|      movea.l 24(a0),a0
    ee54:	|      movea.l 4(a0),a0
    ee58:	|      move.l (a0),d0
    ee5a:	|  /-- bne.s ee6e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    ee5c:	|  |   pea 187b5 <PutChar+0x1bf1>
    ee62:	|  |   jsr 16274 <KPrintF>
    ee68:	|  |   addq.l #4,sp
		return BR_ERROR;
    ee6a:	|  |   moveq #1,d0
    ee6c:	+--|-- bra.s eea0 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ee6e:	|  \-> moveq #28,d0
    ee70:	|      add.l 8(sp),d0
    ee74:	|      movea.l 8(sp),a0
    ee78:	|      movea.l 24(a0),a0
    ee7c:	|      movea.l 4(a0),a0
    ee80:	|      move.l (a0),d1
    ee82:	|      move.l d0,-(sp)
    ee84:	|      move.l d1,-(sp)
    ee86:	|      jsr 13e0e <copyVariable>
    ee8c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ee8e:	|      moveq #24,d0
    ee90:	|      add.l 8(sp),d0
    ee94:	|      move.l d0,-(sp)
    ee96:	|      jsr 142d8 <trimStack>
    ee9c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ee9e:	|      moveq #2,d0
}
    eea0:	\----> rts

0000eea2 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eea2:	       movea.l 8(sp),a0
    eea6:	       movea.l 24(a0),a0
    eeaa:	       move.l (a0),d0
    eeac:	       moveq #6,d1
    eeae:	       cmp.l d0,d1
    eeb0:	   /-- beq.s eec4 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    eeb2:	   |   pea 18784 <PutChar+0x1bc0>
    eeb8:	   |   jsr 16274 <KPrintF>
    eebe:	   |   addq.l #4,sp
		return BR_ERROR;
    eec0:	   |   moveq #1,d0
    eec2:	/--|-- bra.s ef1a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eec4:	|  \-> movea.l 8(sp),a0
    eec8:	|      movea.l 24(a0),a0
    eecc:	|      movea.l 4(a0),a0
    eed0:	|      move.l (a0),d0
    eed2:	|  /-- bne.s eee6 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    eed4:	|  |   pea 187b5 <PutChar+0x1bf1>
    eeda:	|  |   jsr 16274 <KPrintF>
    eee0:	|  |   addq.l #4,sp
		return BR_ERROR;
    eee2:	|  |   moveq #1,d0
    eee4:	+--|-- bra.s ef1a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    eee6:	|  \-> moveq #28,d0
    eee8:	|      add.l 8(sp),d0
    eeec:	|      movea.l 8(sp),a0
    eef0:	|      movea.l 24(a0),a0
    eef4:	|      movea.l 4(a0),a0
    eef8:	|      move.l 4(a0),d1
    eefc:	|      move.l d0,-(sp)
    eefe:	|      move.l d1,-(sp)
    ef00:	|      jsr 13e0e <copyVariable>
    ef06:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ef08:	|      moveq #24,d0
    ef0a:	|      add.l 8(sp),d0
    ef0e:	|      move.l d0,-(sp)
    ef10:	|      jsr 142d8 <trimStack>
    ef16:	|      addq.l #4,sp
	return BR_CONTINUE;
    ef18:	|      moveq #2,d0
}
    ef1a:	\----> rts

0000ef1c <builtIn_random>:

builtIn(random)
{
    ef1c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ef1e:	       movea.l 12(sp),a0
    ef22:	       move.l 24(a0),d0
    ef26:	       move.l d0,-(sp)
    ef28:	       pea 1 <_start+0x1>
    ef2c:	       move.l sp,d0
    ef2e:	       addq.l #8,d0
    ef30:	       move.l d0,-(sp)
    ef32:	       jsr 13954 <getValueType>
    ef38:	       lea 12(sp),sp
    ef3c:	       tst.w d0
    ef3e:	   /-- bne.s ef44 <builtIn_random+0x28>
		return BR_ERROR;
    ef40:	   |   moveq #1,d0
    ef42:	/--|-- bra.s ef8e <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ef44:	|  \-> moveq #24,d0
    ef46:	|      add.l 12(sp),d0
    ef4a:	|      move.l d0,-(sp)
    ef4c:	|      jsr 142d8 <trimStack>
    ef52:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ef54:	|      move.l (sp),d0
    ef56:	|  /-- bgt.s ef5c <builtIn_random+0x40>
    ef58:	|  |   moveq #1,d0
    ef5a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ef5c:	|  \-> jsr 14e74 <rand>
    ef62:	|      move.l d0,d1
    ef64:	|      move.l (sp),d0
    ef66:	|      move.l d0,-(sp)
    ef68:	|      move.l d1,-(sp)
    ef6a:	|      jsr 16b88 <__umodsi3>
    ef70:	|      addq.l #8,sp
    ef72:	|      move.l d0,d1
    ef74:	|      moveq #28,d0
    ef76:	|      add.l 12(sp),d0
    ef7a:	|      move.l d1,-(sp)
    ef7c:	|      pea 1 <_start+0x1>
    ef80:	|      move.l d0,-(sp)
    ef82:	|      jsr 14246 <setVariable>
    ef88:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ef8c:	|      moveq #2,d0
}
    ef8e:	\----> addq.l #4,sp
    ef90:	       rts

0000ef92 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ef92:	nop
    ef94:	rts

0000ef96 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ef96:	moveq #2,d0
}
    ef98:	rts

0000ef9a <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
	UNUSEDALL
	int red, green, blue;
	KPrintF("setPasteColour: Function not implemented on Amiga. Attention using this might cause problems!\n");
    ef9a:	pea 187c8 <PutChar+0x1c04>
    efa0:	jsr 16274 <KPrintF>
    efa6:	addq.l #4,sp
	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    efa8:	moveq #2,d0
}
    efaa:	rts

0000efac <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    efac:	moveq #2,d0
}
    efae:	rts

0000efb0 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    efb0:	moveq #2,d0
}
    efb2:	rts

0000efb4 <builtIn_setFont>:


builtIn(setFont)
{
    efb4:	       lea -16(sp),sp
    efb8:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    efba:	       movea.l 28(sp),a0
    efbe:	       move.l 24(a0),d0
    efc2:	       move.l d0,-(sp)
    efc4:	       pea 1 <_start+0x1>
    efc8:	       lea 12(sp),a0
    efcc:	       move.l a0,-(sp)
    efce:	       jsr 13954 <getValueType>
    efd4:	       lea 12(sp),sp
    efd8:	       tst.w d0
    efda:	   /-- bne.s efe2 <builtIn_setFont+0x2e>
    efdc:	   |   moveq #1,d0
    efde:	/--|-- bra.w f090 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    efe2:	|  \-> moveq #24,d0
    efe4:	|      add.l 28(sp),d0
    efe8:	|      move.l d0,-(sp)
    efea:	|      jsr 142d8 <trimStack>
    eff0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    eff2:	|      movea.l 28(sp),a0
    eff6:	|      move.l 24(a0),d0
    effa:	|      move.l d0,-(sp)
    effc:	|      jsr 13f2a <getTextFromAnyVar>
    f002:	|      addq.l #4,sp
    f004:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    f008:	|  /-- bne.s f010 <builtIn_setFont+0x5c>
    f00a:	|  |   moveq #1,d0
    f00c:	+--|-- bra.w f090 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    f010:	|  \-> moveq #24,d0
    f012:	|      add.l 28(sp),d0
    f016:	|      move.l d0,-(sp)
    f018:	|      jsr 142d8 <trimStack>
    f01e:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f020:	|      movea.l 28(sp),a0
    f024:	|      move.l 24(a0),d0
    f028:	|      move.l d0,-(sp)
    f02a:	|      pea 5 <_start+0x5>
    f02e:	|      lea 16(sp),a0
    f032:	|      move.l a0,-(sp)
    f034:	|      jsr 13954 <getValueType>
    f03a:	|      lea 12(sp),sp
    f03e:	|      tst.w d0
    f040:	|  /-- bne.s f046 <builtIn_setFont+0x92>
    f042:	|  |   moveq #1,d0
    f044:	+--|-- bra.s f090 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    f046:	|  \-> moveq #24,d0
    f048:	|      add.l 28(sp),d0
    f04c:	|      move.l d0,-(sp)
    f04e:	|      jsr 142d8 <trimStack>
    f054:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    f056:	|      move.l 4(sp),d1
    f05a:	|      move.l 8(sp),d0
    f05e:	|      move.l d1,-(sp)
    f060:	|      move.l 20(sp),-(sp)
    f064:	|      move.l d0,-(sp)
    f066:	|      jsr 14736 <loadFont>
    f06c:	|      lea 12(sp),sp
    f070:	|      tst.w d0
    f072:	|  /-- bne.s f078 <builtIn_setFont+0xc4>
    f074:	|  |   moveq #1,d0
    f076:	+--|-- bra.s f090 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    f078:	|  \-> move.l 16(sp),12(sp)
    f07e:	|      move.l 1b848 <SysBase>,d0
    f084:	|      movea.l d0,a6
    f086:	|      movea.l 12(sp),a1
    f08a:	|      jsr -690(a6)

    return BR_CONTINUE;
    f08e:	|      moveq #2,d0
}
    f090:	\----> movea.l (sp)+,a6
    f092:	       lea 16(sp),sp
    f096:	       rts

0000f098 <builtIn_inFont>:

builtIn(inFont)
{
    f098:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f09a:	       movea.l 12(sp),a0
    f09e:	       move.l 24(a0),d0
    f0a2:	       move.l d0,-(sp)
    f0a4:	       jsr 13f2a <getTextFromAnyVar>
    f0aa:	       addq.l #4,sp
    f0ac:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    f0ae:	   /-- bne.s f0b4 <builtIn_inFont+0x1c>
    f0b0:	   |   moveq #1,d0
    f0b2:	/--|-- bra.s f0ea <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    f0b4:	|  \-> moveq #24,d0
    f0b6:	|      add.l 12(sp),d0
    f0ba:	|      move.l d0,-(sp)
    f0bc:	|      jsr 142d8 <trimStack>
    f0c2:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    f0c4:	|      move.l (sp),-(sp)
    f0c6:	|      jsr 14724 <isInFont>
    f0cc:	|      addq.l #4,sp
    f0ce:	|      movea.w d0,a0
    f0d0:	|      moveq #28,d0
    f0d2:	|      add.l 12(sp),d0
    f0d6:	|      move.l a0,-(sp)
    f0d8:	|      pea 1 <_start+0x1>
    f0dc:	|      move.l d0,-(sp)
    f0de:	|      jsr 14246 <setVariable>
    f0e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f0e8:	|      moveq #2,d0
}
    f0ea:	\----> addq.l #4,sp
    f0ec:	       rts

0000f0ee <builtIn_pasteString>:

builtIn(pasteString)
{
    f0ee:	       lea -16(sp),sp
    f0f2:	       move.l a6,-(sp)
    f0f4:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f0f6:	       movea.l 32(sp),a0
    f0fa:	       move.l 24(a0),d0
    f0fe:	       move.l d0,-(sp)
    f100:	       jsr 13f2a <getTextFromAnyVar>
    f106:	       addq.l #4,sp
    f108:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    f10c:	       moveq #24,d0
    f10e:	       add.l 32(sp),d0
    f112:	       move.l d0,-(sp)
    f114:	       jsr 142d8 <trimStack>
    f11a:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f11c:	       movea.l 32(sp),a0
    f120:	       move.l 24(a0),d0
    f124:	       move.l d0,-(sp)
    f126:	       pea 1 <_start+0x1>
    f12a:	       lea 20(sp),a0
    f12e:	       move.l a0,-(sp)
    f130:	       jsr 13954 <getValueType>
    f136:	       lea 12(sp),sp
    f13a:	       tst.w d0
    f13c:	   /-- bne.s f144 <builtIn_pasteString+0x56>
    f13e:	   |   moveq #1,d0
    f140:	/--|-- bra.w f1cc <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    f144:	|  \-> moveq #24,d0
    f146:	|      add.l 32(sp),d0
    f14a:	|      move.l d0,-(sp)
    f14c:	|      jsr 142d8 <trimStack>
    f152:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f154:	|      movea.l 32(sp),a0
    f158:	|      move.l 24(a0),d0
    f15c:	|      move.l d0,-(sp)
    f15e:	|      pea 1 <_start+0x1>
    f162:	|      lea 16(sp),a0
    f166:	|      move.l a0,-(sp)
    f168:	|      jsr 13954 <getValueType>
    f16e:	|      lea 12(sp),sp
    f172:	|      tst.w d0
    f174:	|  /-- bne.s f17a <builtIn_pasteString+0x8c>
    f176:	|  |   moveq #1,d0
    f178:	+--|-- bra.s f1cc <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    f17a:	|  \-> moveq #24,d0
    f17c:	|      add.l 32(sp),d0
    f180:	|      move.l d0,-(sp)
    f182:	|      jsr 142d8 <trimStack>
    f188:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    f18a:	|      move.l 8(sp),d0
    f18e:	|      cmpi.l #65535,d0
    f194:	|  /-- bne.s f1b4 <builtIn_pasteString+0xc6>
    f196:	|  |   move.l 1b79c <winWidth>,d2
    f19c:	|  |   move.l 20(sp),-(sp)
    f1a0:	|  |   jsr 14936 <stringWidth>
    f1a6:	|  |   addq.l #4,sp
    f1a8:	|  |   move.l d2,d1
    f1aa:	|  |   sub.l d0,d1
    f1ac:	|  |   move.l d1,d0
    f1ae:	|  |   lsr.l #1,d0
    f1b0:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    f1b4:	|  \-> move.l 20(sp),16(sp)
    f1ba:	|      move.l 1b848 <SysBase>,d0
    f1c0:	|      movea.l d0,a6
    f1c2:	|      movea.l 16(sp),a1
    f1c6:	|      jsr -690(a6)
    return BR_CONTINUE;
    f1ca:	|      moveq #2,d0
}
    f1cc:	\----> move.l (sp)+,d2
    f1ce:	       movea.l (sp)+,a6
    f1d0:	       lea 16(sp),sp
    f1d4:	       rts

0000f1d6 <builtIn_anim>:

builtIn(anim)
{
    f1d6:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    f1da:	       moveq #1,d0
    f1dc:	       cmp.l 16(sp),d0
    f1e0:	   /-- blt.s f1f6 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    f1e2:	   |   pea 18827 <PutChar+0x1c63>
    f1e8:	   |   jsr 16274 <KPrintF>
    f1ee:	   |   addq.l #4,sp
		return BR_ERROR;
    f1f0:	   |   moveq #1,d0
    f1f2:	/--|-- bra.w f284 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    f1f6:	|  \-> moveq #24,d1
    f1f8:	|      add.l 20(sp),d1
    f1fc:	|      move.l 16(sp),d0
    f200:	|      subq.l #1,d0
    f202:	|      move.l d1,-(sp)
    f204:	|      move.l d0,-(sp)
    f206:	|      jsr 8922 <createPersonaAnim>
    f20c:	|      addq.l #8,sp
    f20e:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f212:	|      movea.l 20(sp),a0
    f216:	|      move.l 24(a0),d0
    f21a:	|      move.l d0,-(sp)
    f21c:	|      pea 5 <_start+0x5>
    f220:	|      lea 8(sp),a0
    f224:	|      move.l a0,-(sp)
    f226:	|      jsr 13954 <getValueType>
    f22c:	|      lea 12(sp),sp
    f230:	|      tst.w d0
    f232:	|  /-- bne.s f238 <builtIn_anim+0x62>
    f234:	|  |   moveq #1,d0
    f236:	+--|-- bra.s f284 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    f238:	|  \-> moveq #24,d0
    f23a:	|      add.l 20(sp),d0
    f23e:	|      move.l d0,-(sp)
    f240:	|      jsr 142d8 <trimStack>
    f246:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    f248:	|      move.l (sp),d0
    f24a:	|      move.l d0,-(sp)
    f24c:	|      jsr 14fd6 <loadBankForAnim>
    f252:	|      addq.l #4,sp
    f254:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    f258:	|  /-- bne.s f25e <builtIn_anim+0x88>
    f25a:	|  |   moveq #1,d0
    f25c:	+--|-- bra.s f284 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    f25e:	|  \-> move.l 4(sp),-(sp)
    f262:	|      move.l 12(sp),-(sp)
    f266:	|      jsr a7cc <setBankFile>
    f26c:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    f26e:	|      moveq #28,d0
    f270:	|      add.l 20(sp),d0
    f274:	|      move.l 8(sp),-(sp)
    f278:	|      move.l d0,-(sp)
    f27a:	|      jsr 14202 <newAnimationVariable>
    f280:	|      addq.l #8,sp
	return BR_CONTINUE;
    f282:	|      moveq #2,d0
}
    f284:	\----> lea 12(sp),sp
    f288:	       rts

0000f28a <builtIn_costume>:

builtIn(costume)
{
    f28a:	          lea -32(sp),sp
    f28e:	          move.l a6,-(sp)
    f290:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    f292:	          moveq #8,d0
    f294:	          move.l d0,32(sp)
    f298:	          clr.l 28(sp)
    f29c:	          move.l 1b848 <SysBase>,d0
    f2a2:	          movea.l d0,a6
    f2a4:	          move.l 32(sp),d0
    f2a8:	          move.l 28(sp),d1
    f2ac:	          jsr -684(a6)
    f2b0:	          move.l d0,24(sp)
    f2b4:	          move.l 24(sp),d0
    f2b8:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    f2bc:	      /-- bne.s f2c4 <builtIn_costume+0x3a>
    f2be:	      |   moveq #1,d0
    f2c0:	/-----|-- bra.w f3ac <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    f2c4:	|     \-> move.l 44(sp),d0
    f2c8:	|         pea 3 <_start+0x3>
    f2cc:	|         move.l d0,-(sp)
    f2ce:	|         jsr 16b2c <__divsi3>
    f2d4:	|         addq.l #8,sp
    f2d6:	|         movea.l 20(sp),a0
    f2da:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    f2de:	|         tst.l 44(sp)
    f2e2:	|     /-- beq.s f2f8 <builtIn_costume+0x6e>
    f2e4:	|     |   movea.l 20(sp),a0
    f2e8:	|     |   move.l 4(a0),d1
    f2ec:	|     |   move.l d1,d0
    f2ee:	|     |   add.l d0,d0
    f2f0:	|     |   add.l d1,d0
    f2f2:	|     |   cmp.l 44(sp),d0
    f2f6:	|  /--|-- beq.s f30c <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    f2f8:	|  |  \-> pea 18861 <PutChar+0x1c9d>
    f2fe:	|  |      jsr 16274 <KPrintF>
    f304:	|  |      addq.l #4,sp
        return BR_ERROR;
    f306:	|  |      moveq #1,d0
    f308:	+--|----- bra.w f3ac <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    f30c:	|  \----> move.l 44(sp),d0
    f310:	|         add.l d0,d0
    f312:	|         add.l d0,d0
    f314:	|         move.l d0,16(sp)
    f318:	|         clr.l 12(sp)
    f31c:	|         move.l 1b848 <SysBase>,d0
    f322:	|         movea.l d0,a6
    f324:	|         move.l 16(sp),d0
    f328:	|         move.l 12(sp),d1
    f32c:	|         jsr -684(a6)
    f330:	|         move.l d0,8(sp)
    f334:	|         move.l 8(sp),d0
    f338:	|         movea.l 20(sp),a0
    f33c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f33e:	|         movea.l 20(sp),a0
    f342:	|         move.l (a0),d0
    f344:	|     /-- bne.s f34a <builtIn_costume+0xc0>
    f346:	|     |   moveq #1,d0
    f348:	+-----|-- bra.s f3ac <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f34a:	|     \-> move.l 44(sp),d0
    f34e:	|         subq.l #1,d0
    f350:	|         move.l d0,36(sp)
    f354:	|     /-- bra.s f390 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f356:	|  /--|-> movea.l 48(sp),a0
    f35a:	|  |  |   move.l 24(a0),d0
    f35e:	|  |  |   movea.l 20(sp),a0
    f362:	|  |  |   movea.l (a0),a0
    f364:	|  |  |   move.l 36(sp),d1
    f368:	|  |  |   add.l d1,d1
    f36a:	|  |  |   add.l d1,d1
    f36c:	|  |  |   lea (0,a0,d1.l),a2
    f370:	|  |  |   move.l d0,-(sp)
    f372:	|  |  |   jsr 13e2c <getAnimationFromVar>
    f378:	|  |  |   addq.l #4,sp
    f37a:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f37c:	|  |  |   moveq #24,d0
    f37e:	|  |  |   add.l 48(sp),d0
    f382:	|  |  |   move.l d0,-(sp)
    f384:	|  |  |   jsr 142d8 <trimStack>
    f38a:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f38c:	|  |  |   subq.l #1,36(sp)
    f390:	|  |  \-> tst.l 36(sp)
    f394:	|  \----- bge.s f356 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f396:	|         moveq #28,d0
    f398:	|         add.l 48(sp),d0
    f39c:	|         move.l 20(sp),-(sp)
    f3a0:	|         move.l d0,-(sp)
    f3a2:	|         jsr 14224 <newCostumeVariable>
    f3a8:	|         addq.l #8,sp
    return BR_CONTINUE;
    f3aa:	|         moveq #2,d0
}
    f3ac:	\-------> movea.l (sp)+,a2
    f3ae:	          movea.l (sp)+,a6
    f3b0:	          lea 32(sp),sp
    f3b4:	          rts

0000f3b6 <builtIn_launch>:

builtIn(launch)
{
    f3b6:	          lea -20(sp),sp
    f3ba:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f3bc:	          movea.l 32(sp),a0
    f3c0:	          move.l 24(a0),d0
    f3c4:	          move.l d0,-(sp)
    f3c6:	          jsr 13f2a <getTextFromAnyVar>
    f3cc:	          addq.l #4,sp
    f3ce:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f3d2:	      /-- bne.s f3da <builtIn_launch+0x24>
    f3d4:	      |   moveq #1,d0
    f3d6:	/-----|-- bra.w f508 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f3da:	|     \-> move.l 20(sp),-(sp)
    f3de:	|         jsr 2fe <encodeFilename>
    f3e4:	|         addq.l #4,sp
    f3e6:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f3ea:	|         moveq #24,d0
    f3ec:	|         add.l 32(sp),d0
    f3f0:	|         move.l d0,-(sp)
    f3f2:	|         jsr 142d8 <trimStack>
    f3f8:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f3fa:	|         movea.l 20(sp),a0
    f3fe:	|         move.b (a0),d0
    f400:	|         cmpi.b #104,d0
    f404:	|  /----- bne.s f46e <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f406:	|  |      movea.l 20(sp),a0
    f40a:	|  |      addq.l #1,a0
    f40c:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f40e:	|  |      cmpi.b #116,d0
    f412:	|  +----- bne.s f46e <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f414:	|  |      movea.l 20(sp),a0
    f418:	|  |      addq.l #2,a0
    f41a:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f41c:	|  |      cmpi.b #116,d0
    f420:	|  +----- bne.s f46e <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f422:	|  |      movea.l 20(sp),a0
    f426:	|  |      addq.l #3,a0
    f428:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f42a:	|  |      cmpi.b #112,d0
    f42e:	|  +----- bne.s f46e <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f430:	|  |      movea.l 20(sp),a0
    f434:	|  |      addq.l #4,a0
    f436:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f438:	|  |      cmpi.b #58,d0
    f43c:	|  |  /-- beq.s f45a <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f43e:	|  |  |   movea.l 20(sp),a0
    f442:	|  |  |   addq.l #4,a0
    f444:	|  |  |   move.b (a0),d0
    f446:	|  |  |   cmpi.b #115,d0
    f44a:	|  +--|-- bne.s f46e <builtIn_launch+0xb8>
    f44c:	|  |  |   movea.l 20(sp),a0
    f450:	|  |  |   addq.l #5,a0
    f452:	|  |  |   move.b (a0),d0
    f454:	|  |  |   cmpi.b #58,d0
    f458:	|  +--|-- bne.s f46e <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f45a:	|  |  \-> move.l 20(sp),-(sp)
    f45e:	|  |      jsr b8 <copyString>
    f464:	|  |      addq.l #4,sp
    f466:	|  |      move.l d0,1b962 <launchMe>
    f46c:	|  |  /-- bra.s f4c0 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f46e:	|  \--|-> move.l 1b7b0 <gamePath>,d0
    f474:	|     |   pea 188ac <PutChar+0x1ce8>
    f47a:	|     |   move.l d0,-(sp)
    f47c:	|     |   jsr 12e80 <joinStrings>
    f482:	|     |   addq.l #8,sp
    f484:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f488:	|     |   move.l 16(sp),-(sp)
    f48c:	|     |   move.l 16(sp),-(sp)
    f490:	|     |   jsr 12e80 <joinStrings>
    f496:	|     |   addq.l #8,sp
    f498:	|     |   move.l d0,1b962 <launchMe>
        FreeVec(newText);
    f49e:	|     |   move.l 16(sp),8(sp)
    f4a4:	|     |   move.l 1b848 <SysBase>,d0
    f4aa:	|     |   movea.l d0,a6
    f4ac:	|     |   movea.l 8(sp),a1
    f4b0:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f4b4:	|     |   move.l 1b962 <launchMe>,d0
    f4ba:	|     +-- bne.s f4c0 <builtIn_launch+0x10a>
    f4bc:	|     |   moveq #1,d0
    f4be:	+-----|-- bra.s f508 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f4c0:	|     \-> move.l 20(sp),4(sp)
    f4c6:	|         move.l 1b848 <SysBase>,d0
    f4cc:	|         movea.l d0,a6
    f4ce:	|         movea.l 4(sp),a1
    f4d2:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f4d6:	|         clr.l -(sp)
    f4d8:	|         jsr 3132 <setGraphicsWindow>
    f4de:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f4e0:	|         moveq #28,d0
    f4e2:	|         add.l 32(sp),d0
    f4e6:	|         pea 1 <_start+0x1>
    f4ea:	|         pea 1 <_start+0x1>
    f4ee:	|         move.l d0,-(sp)
    f4f0:	|         jsr 14246 <setVariable>
    f4f6:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f4fa:	|         moveq #28,d0
    f4fc:	|         add.l 32(sp),d0
    f500:	|         move.l d0,1b966 <launchResult>

    return BR_KEEP_AND_PAUSE;
    f506:	|         moveq #0,d0
}
    f508:	\-------> movea.l (sp)+,a6
    f50a:	          lea 20(sp),sp
    f50e:	          rts

0000f510 <builtIn_pause>:

builtIn(pause)
{
    f510:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f512:	       movea.l 12(sp),a0
    f516:	       move.l 24(a0),d0
    f51a:	       move.l d0,-(sp)
    f51c:	       pea 1 <_start+0x1>
    f520:	       move.l sp,d0
    f522:	       addq.l #8,d0
    f524:	       move.l d0,-(sp)
    f526:	       jsr 13954 <getValueType>
    f52c:	       lea 12(sp),sp
    f530:	       tst.w d0
    f532:	   /-- bne.s f538 <builtIn_pause+0x28>
    f534:	   |   moveq #1,d0
    f536:	/--|-- bra.s f566 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f538:	|  \-> moveq #24,d0
    f53a:	|      add.l 12(sp),d0
    f53e:	|      move.l d0,-(sp)
    f540:	|      jsr 142d8 <trimStack>
    f546:	|      addq.l #4,sp
	if (theTime > 0) {
    f548:	|      move.l (sp),d0
    f54a:	|  /-- ble.s f564 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f54c:	|  |   move.l (sp),d0
    f54e:	|  |   subq.l #1,d0
    f550:	|  |   movea.l 12(sp),a0
    f554:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f558:	|  |   movea.l 12(sp),a0
    f55c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f560:	|  |   moveq #0,d0
    f562:	+--|-- bra.s f566 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f564:	|  \-> moveq #2,d0
}
    f566:	\----> addq.l #4,sp
    f568:	       rts

0000f56a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f56a:	jsr 3894 <completeTimers>
	return BR_CONTINUE;
    f570:	moveq #2,d0
}
    f572:	rts

0000f574 <builtIn_callEvent>:

builtIn(callEvent)
{
    f574:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f578:	       movea.l 20(sp),a0
    f57c:	       move.l 24(a0),d0
    f580:	       move.l d0,-(sp)
    f582:	       pea 7 <_start+0x7>
    f586:	       lea 8(sp),a0
    f58a:	       move.l a0,-(sp)
    f58c:	       jsr 13954 <getValueType>
    f592:	       lea 12(sp),sp
    f596:	       tst.w d0
    f598:	   /-- bne.s f5a0 <builtIn_callEvent+0x2c>
    f59a:	   |   moveq #1,d0
    f59c:	/--|-- bra.w f636 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f5a0:	|  \-> moveq #24,d0
    f5a2:	|      add.l 20(sp),d0
    f5a6:	|      move.l d0,-(sp)
    f5a8:	|      jsr 142d8 <trimStack>
    f5ae:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f5b0:	|      movea.l 20(sp),a0
    f5b4:	|      move.l 24(a0),d0
    f5b8:	|      move.l d0,-(sp)
    f5ba:	|      pea 7 <_start+0x7>
    f5be:	|      moveq #12,d0
    f5c0:	|      add.l sp,d0
    f5c2:	|      move.l d0,-(sp)
    f5c4:	|      jsr 13954 <getValueType>
    f5ca:	|      lea 12(sp),sp
    f5ce:	|      tst.w d0
    f5d0:	|  /-- bne.s f5d6 <builtIn_callEvent+0x62>
    f5d2:	|  |   moveq #1,d0
    f5d4:	+--|-- bra.s f636 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f5d6:	|  \-> moveq #24,d0
    f5d8:	|      add.l 20(sp),d0
    f5dc:	|      move.l d0,-(sp)
    f5de:	|      jsr 142d8 <trimStack>
    f5e4:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f5e6:	|      move.l (sp),d1
    f5e8:	|      move.l 4(sp),d0
    f5ec:	|      move.l d1,-(sp)
    f5ee:	|      move.l d0,-(sp)
    f5f0:	|      jsr c774 <getCombinationFunction>
    f5f6:	|      addq.l #8,sp
    f5f8:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f5fc:	|  /-- beq.s f61c <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f5fe:	|  |   moveq #28,d0
    f600:	|  |   add.l 20(sp),d0
    f604:	|  |   move.l 8(sp),-(sp)
    f608:	|  |   pea 2 <_start+0x2>
    f60c:	|  |   move.l d0,-(sp)
    f60e:	|  |   jsr 14246 <setVariable>
    f614:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f618:	|  |   moveq #4,d0
    f61a:	+--|-- bra.s f636 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f61c:	|  \-> moveq #28,d0
    f61e:	|      add.l 20(sp),d0
    f622:	|      clr.l -(sp)
    f624:	|      pea 1 <_start+0x1>
    f628:	|      move.l d0,-(sp)
    f62a:	|      jsr 14246 <setVariable>
    f630:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f634:	|      moveq #2,d0
}
    f636:	\----> lea 12(sp),sp
    f63a:	       rts

0000f63c <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f63c:	move.w #1,1b972 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f644:	moveq #2,d0
}
    f646:	rts

0000f648 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f648:	moveq #24,d0
    f64a:	add.l 8(sp),d0
    f64e:	move.l d0,-(sp)
    f650:	jsr 142d8 <trimStack>
    f656:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f658:	pea 188ae <PutChar+0x1cea>
    f65e:	jsr 16274 <KPrintF>
    f664:	addq.l #4,sp
	return BR_CONTINUE;
    f666:	moveq #2,d0
}
    f668:	rts

0000f66a <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f66a:	pea 188ae <PutChar+0x1cea>
    f670:	jsr 16274 <KPrintF>
    f676:	addq.l #4,sp
	return BR_CONTINUE;
    f678:	moveq #2,d0
}
    f67a:	rts

0000f67c <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f67c:	pea 188ae <PutChar+0x1cea>
    f682:	jsr 16274 <KPrintF>
    f688:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f68a:	moveq #2,d0
}
    f68c:	rts

0000f68e <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f68e:	pea 188ae <PutChar+0x1cea>
    f694:	jsr 16274 <KPrintF>
    f69a:	addq.l #4,sp
	return BR_CONTINUE;
    f69c:	moveq #2,d0
}
    f69e:	rts

0000f6a0 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f6a0:	pea 188ae <PutChar+0x1cea>
    f6a6:	jsr 16274 <KPrintF>
    f6ac:	addq.l #4,sp
	return BR_CONTINUE;
    f6ae:	moveq #2,d0
}
    f6b0:	rts

0000f6b2 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f6b2:	pea 188ae <PutChar+0x1cea>
    f6b8:	jsr 16274 <KPrintF>
    f6be:	addq.l #4,sp
	return BR_CONTINUE;
    f6c0:	moveq #2,d0
}
    f6c2:	rts

0000f6c4 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f6c4:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6c8:	       movea.l 20(sp),a0
    f6cc:	       move.l 24(a0),d0
    f6d0:	       move.l d0,-(sp)
    f6d2:	       pea 1 <_start+0x1>
    f6d6:	       moveq #16,d0
    f6d8:	       add.l sp,d0
    f6da:	       move.l d0,-(sp)
    f6dc:	       jsr 13954 <getValueType>
    f6e2:	       lea 12(sp),sp
    f6e6:	       tst.w d0
    f6e8:	   /-- bne.s f6f0 <builtIn_startMusic+0x2c>
    f6ea:	   |   moveq #1,d0
    f6ec:	/--|-- bra.w f790 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f6f0:	|  \-> moveq #24,d0
    f6f2:	|      add.l 20(sp),d0
    f6f6:	|      move.l d0,-(sp)
    f6f8:	|      jsr 142d8 <trimStack>
    f6fe:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f700:	|      movea.l 20(sp),a0
    f704:	|      move.l 24(a0),d0
    f708:	|      move.l d0,-(sp)
    f70a:	|      pea 1 <_start+0x1>
    f70e:	|      moveq #12,d0
    f710:	|      add.l sp,d0
    f712:	|      move.l d0,-(sp)
    f714:	|      jsr 13954 <getValueType>
    f71a:	|      lea 12(sp),sp
    f71e:	|      tst.w d0
    f720:	|  /-- bne.s f726 <builtIn_startMusic+0x62>
    f722:	|  |   moveq #1,d0
    f724:	+--|-- bra.s f790 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f726:	|  \-> moveq #24,d0
    f728:	|      add.l 20(sp),d0
    f72c:	|      move.l d0,-(sp)
    f72e:	|      jsr 142d8 <trimStack>
    f734:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f736:	|      movea.l 20(sp),a0
    f73a:	|      move.l 24(a0),d0
    f73e:	|      move.l d0,-(sp)
    f740:	|      pea 5 <_start+0x5>
    f744:	|      lea 8(sp),a0
    f748:	|      move.l a0,-(sp)
    f74a:	|      jsr 13954 <getValueType>
    f750:	|      lea 12(sp),sp
    f754:	|      tst.w d0
    f756:	|  /-- bne.s f75c <builtIn_startMusic+0x98>
    f758:	|  |   moveq #1,d0
    f75a:	+--|-- bra.s f790 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f75c:	|  \-> moveq #24,d0
    f75e:	|      add.l 20(sp),d0
    f762:	|      move.l d0,-(sp)
    f764:	|      jsr 142d8 <trimStack>
    f76a:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f76c:	|      movea.l 8(sp),a0
    f770:	|      move.l 4(sp),d1
    f774:	|      move.l (sp),d0
    f776:	|      move.l a0,-(sp)
    f778:	|      move.l d1,-(sp)
    f77a:	|      move.l d0,-(sp)
    f77c:	|      jsr c380 <playMOD>
    f782:	|      lea 12(sp),sp
    f786:	|      tst.w d0
    f788:	|  /-- bne.s f78e <builtIn_startMusic+0xca>
    f78a:	|  |   moveq #2,d0
    f78c:	+--|-- bra.s f790 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f78e:	|  \-> moveq #2,d0
}
    f790:	\----> lea 12(sp),sp
    f794:	       rts

0000f796 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f796:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f798:	       movea.l 12(sp),a0
    f79c:	       move.l 24(a0),d0
    f7a0:	       move.l d0,-(sp)
    f7a2:	       pea 1 <_start+0x1>
    f7a6:	       move.l sp,d0
    f7a8:	       addq.l #8,d0
    f7aa:	       move.l d0,-(sp)
    f7ac:	       jsr 13954 <getValueType>
    f7b2:	       lea 12(sp),sp
    f7b6:	       tst.w d0
    f7b8:	   /-- bne.s f7be <builtIn_stopMusic+0x28>
    f7ba:	   |   moveq #1,d0
    f7bc:	/--|-- bra.s f7dc <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f7be:	|  \-> moveq #24,d0
    f7c0:	|      add.l 12(sp),d0
    f7c4:	|      move.l d0,-(sp)
    f7c6:	|      jsr 142d8 <trimStack>
    f7cc:	|      addq.l #4,sp
	stopMOD (v);
    f7ce:	|      move.l (sp),d0
    f7d0:	|      move.l d0,-(sp)
    f7d2:	|      jsr c41c <stopMOD>
    f7d8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7da:	|      moveq #2,d0
}
    f7dc:	\----> addq.l #4,sp
    f7de:	       rts

0000f7e0 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f7e0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7e2:	       movea.l 16(sp),a0
    f7e6:	       move.l 24(a0),d0
    f7ea:	       move.l d0,-(sp)
    f7ec:	       pea 1 <_start+0x1>
    f7f0:	       move.l sp,d0
    f7f2:	       addq.l #8,d0
    f7f4:	       move.l d0,-(sp)
    f7f6:	       jsr 13954 <getValueType>
    f7fc:	       lea 12(sp),sp
    f800:	       tst.w d0
    f802:	   /-- bne.s f808 <builtIn_setMusicVolume+0x28>
    f804:	   |   moveq #1,d0
    f806:	/--|-- bra.s f862 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f808:	|  \-> moveq #24,d0
    f80a:	|      add.l 16(sp),d0
    f80e:	|      move.l d0,-(sp)
    f810:	|      jsr 142d8 <trimStack>
    f816:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f818:	|      movea.l 16(sp),a0
    f81c:	|      move.l 24(a0),d0
    f820:	|      move.l d0,-(sp)
    f822:	|      pea 1 <_start+0x1>
    f826:	|      moveq #12,d0
    f828:	|      add.l sp,d0
    f82a:	|      move.l d0,-(sp)
    f82c:	|      jsr 13954 <getValueType>
    f832:	|      lea 12(sp),sp
    f836:	|      tst.w d0
    f838:	|  /-- bne.s f83e <builtIn_setMusicVolume+0x5e>
    f83a:	|  |   moveq #1,d0
    f83c:	+--|-- bra.s f862 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f83e:	|  \-> moveq #24,d0
    f840:	|      add.l 16(sp),d0
    f844:	|      move.l d0,-(sp)
    f846:	|      jsr 142d8 <trimStack>
    f84c:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f84e:	|      move.l (sp),d1
    f850:	|      move.l 4(sp),d0
    f854:	|      move.l d1,-(sp)
    f856:	|      move.l d0,-(sp)
    f858:	|      jsr c402 <setMusicVolume>
    f85e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f860:	|      moveq #2,d0
}
    f862:	\----> addq.l #8,sp
    f864:	       rts

0000f866 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f866:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f868:	       movea.l 12(sp),a0
    f86c:	       move.l 24(a0),d0
    f870:	       move.l d0,-(sp)
    f872:	       pea 1 <_start+0x1>
    f876:	       move.l sp,d0
    f878:	       addq.l #8,d0
    f87a:	       move.l d0,-(sp)
    f87c:	       jsr 13954 <getValueType>
    f882:	       lea 12(sp),sp
    f886:	       tst.w d0
    f888:	   /-- bne.s f88e <builtIn_setDefaultMusicVolume+0x28>
    f88a:	   |   moveq #1,d0
    f88c:	/--|-- bra.s f8ac <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f88e:	|  \-> moveq #24,d0
    f890:	|      add.l 12(sp),d0
    f894:	|      move.l d0,-(sp)
    f896:	|      jsr 142d8 <trimStack>
    f89c:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f89e:	|      move.l (sp),d0
    f8a0:	|      move.l d0,-(sp)
    f8a2:	|      jsr c3e6 <setDefaultMusicVolume>
    f8a8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8aa:	|      moveq #2,d0
}
    f8ac:	\----> addq.l #4,sp
    f8ae:	       rts

0000f8b0 <builtIn_playSound>:

builtIn(playSound)
{
    f8b0:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8b2:	       movea.l 12(sp),a0
    f8b6:	       move.l 24(a0),d0
    f8ba:	       move.l d0,-(sp)
    f8bc:	       pea 5 <_start+0x5>
    f8c0:	       move.l sp,d0
    f8c2:	       addq.l #8,d0
    f8c4:	       move.l d0,-(sp)
    f8c6:	       jsr 13954 <getValueType>
    f8cc:	       lea 12(sp),sp
    f8d0:	       tst.w d0
    f8d2:	   /-- bne.s f8d8 <builtIn_playSound+0x28>
    f8d4:	   |   moveq #1,d0
    f8d6:	/--|-- bra.s f900 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f8d8:	|  \-> moveq #24,d0
    f8da:	|      add.l 12(sp),d0
    f8de:	|      move.l d0,-(sp)
    f8e0:	|      jsr 142d8 <trimStack>
    f8e6:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f8e8:	|      move.l (sp),d0
    f8ea:	|      clr.l -(sp)
    f8ec:	|      move.l d0,-(sp)
    f8ee:	|      jsr c40a <startSound>
    f8f4:	|      addq.l #8,sp
    f8f6:	|      tst.w d0
    f8f8:	|  /-- bne.s f8fe <builtIn_playSound+0x4e>
    f8fa:	|  |   moveq #2,d0
    f8fc:	+--|-- bra.s f900 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f8fe:	|  \-> moveq #2,d0
}
    f900:	\----> addq.l #4,sp
    f902:	       rts

0000f904 <builtIn_loopSound>:

builtIn(loopSound)
{
    f904:	             lea -28(sp),sp
    f908:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f90a:	             tst.l 36(sp)
    f90e:	         /-- bgt.s f924 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f910:	         |   pea 188d1 <PutChar+0x1d0d>
    f916:	         |   jsr 16274 <KPrintF>
    f91c:	         |   addq.l #4,sp
		return BR_ERROR;
    f91e:	         |   moveq #1,d0
    f920:	/--------|-- bra.w fae0 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f924:	|        \-> moveq #1,d0
    f926:	|            cmp.l 36(sp),d0
    f92a:	|     /----- blt.s f986 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f92c:	|     |      movea.l 40(sp),a0
    f930:	|     |      move.l 24(a0),d0
    f934:	|     |      move.l d0,-(sp)
    f936:	|     |      pea 5 <_start+0x5>
    f93a:	|     |      lea 16(sp),a0
    f93e:	|     |      move.l a0,-(sp)
    f940:	|     |      jsr 13954 <getValueType>
    f946:	|     |      lea 12(sp),sp
    f94a:	|     |      tst.w d0
    f94c:	|     |  /-- bne.s f954 <builtIn_loopSound+0x50>
    f94e:	|     |  |   moveq #1,d0
    f950:	+-----|--|-- bra.w fae0 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f954:	|     |  \-> moveq #24,d0
    f956:	|     |      add.l 40(sp),d0
    f95a:	|     |      move.l d0,-(sp)
    f95c:	|     |      jsr 142d8 <trimStack>
    f962:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f964:	|     |      move.l 8(sp),d0
    f968:	|     |      pea 1 <_start+0x1>
    f96c:	|     |      move.l d0,-(sp)
    f96e:	|     |      jsr c40a <startSound>
    f974:	|     |      addq.l #8,sp
    f976:	|     |      tst.w d0
    f978:	|     |  /-- bne.s f980 <builtIn_loopSound+0x7c>
    f97a:	|     |  |   moveq #2,d0
    f97c:	+-----|--|-- bra.w fae0 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f980:	|     |  \-> moveq #2,d0
    f982:	+-----|----- bra.w fae0 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f986:	|     \----> moveq #2,d1
    f988:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f98c:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f990:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f994:	|            movea.l 40(sp),a0
    f998:	|            movea.l 24(a0),a0
    f99c:	|            move.l (a0),d0
    f99e:	|            moveq #5,d1
    f9a0:	|            cmp.l d0,d1
    f9a2:	|  /-------- beq.w fa7a <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f9a6:	|  |         movea.l 40(sp),a0
    f9aa:	|  |         move.l 24(a0),d0
    f9ae:	|  |         move.l d0,-(sp)
    f9b0:	|  |         pea 1 <_start+0x1>
    f9b4:	|  |         lea 12(sp),a0
    f9b8:	|  |         move.l a0,-(sp)
    f9ba:	|  |         jsr 13954 <getValueType>
    f9c0:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f9c4:	|  |         moveq #24,d0
    f9c6:	|  |         add.l 40(sp),d0
    f9ca:	|  |         move.l d0,-(sp)
    f9cc:	|  |         jsr 142d8 <trimStack>
    f9d2:	|  |         addq.l #4,sp
			numParams--;
    f9d4:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f9d8:	|  +-------- bra.w fa7a <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f9dc:	|  |  /----> movea.l 40(sp),a0
    f9e0:	|  |  |      move.l 24(a0),d0
    f9e4:	|  |  |      move.l d0,-(sp)
    f9e6:	|  |  |      pea 5 <_start+0x5>
    f9ea:	|  |  |      lea 16(sp),a0
    f9ee:	|  |  |      move.l a0,-(sp)
    f9f0:	|  |  |      jsr 13954 <getValueType>
    f9f6:	|  |  |      lea 12(sp),sp
    f9fa:	|  |  |      tst.w d0
    f9fc:	|  |  |  /-- bne.s fa12 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f9fe:	|  |  |  |   pea 1890f <PutChar+0x1d4b>
    fa04:	|  |  |  |   jsr 16274 <KPrintF>
    fa0a:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    fa0c:	|  |  |  |   moveq #1,d0
    fa0e:	+--|--|--|-- bra.w fae0 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    fa12:	|  |  |  \-> moveq #20,d0
    fa14:	|  |  |      move.l d0,20(sp)
    fa18:	|  |  |      clr.l 16(sp)
    fa1c:	|  |  |      move.l 1b848 <SysBase>,d0
    fa22:	|  |  |      movea.l d0,a6
    fa24:	|  |  |      move.l 20(sp),d0
    fa28:	|  |  |      move.l 16(sp),d1
    fa2c:	|  |  |      jsr -684(a6)
    fa30:	|  |  |      move.l d0,12(sp)
    fa34:	|  |  |      move.l 12(sp),d0
    fa38:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    fa3c:	|  |  |  /-- bne.s fa44 <builtIn_loopSound+0x140>
    fa3e:	|  |  |  |   moveq #1,d0
    fa40:	+--|--|--|-- bra.w fae0 <builtIn_loopSound+0x1dc>

			s->next = old;
    fa44:	|  |  |  \-> movea.l 28(sp),a0
    fa48:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    fa4e:	|  |  |      movea.l 28(sp),a0
    fa52:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    fa56:	|  |  |      move.l 8(sp),d0
    fa5a:	|  |  |      movea.l 28(sp),a0
    fa5e:	|  |  |      move.l d0,(a0)
			old = s;
    fa60:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    fa66:	|  |  |      moveq #24,d0
    fa68:	|  |  |      add.l 40(sp),d0
    fa6c:	|  |  |      move.l d0,-(sp)
    fa6e:	|  |  |      jsr 142d8 <trimStack>
    fa74:	|  |  |      addq.l #4,sp
			numParams--;
    fa76:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    fa7a:	|  \--|----> tst.l 36(sp)
    fa7e:	|     \----- bne.w f9dc <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    fa82:	|        /-- bra.s fa8e <builtIn_loopSound+0x18a>
    fa84:	|     /--|-> movea.l 28(sp),a0
    fa88:	|     |  |   move.l 4(a0),28(sp)
    fa8e:	|     |  \-> movea.l 28(sp),a0
    fa92:	|     |      move.l 4(a0),d0
    fa96:	|     \----- bne.s fa84 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    fa98:	|            move.l 4(sp),d0
    fa9c:	|            moveq #1,d1
    fa9e:	|            cmp.l d0,d1
    faa0:	|     /----- bge.s fab8 <builtIn_loopSound+0x1b4>
			s->next = old;
    faa2:	|     |      movea.l 28(sp),a0
    faa6:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    faac:	|     |      movea.l 24(sp),a0
    fab0:	|     |      move.l 28(sp),8(a0)
    fab6:	|     |  /-- bra.s fac8 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    fab8:	|     \--|-> move.l 4(sp),d0
    fabc:	|        +-- beq.s fac8 <builtIn_loopSound+0x1c4>
			s->next = s;
    fabe:	|        |   movea.l 28(sp),a0
    fac2:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    fac8:	|        \-> movea.l 24(sp),a0
    facc:	|            moveq #-1,d0
    face:	|            move.l d0,16(a0)
		playSoundList(old);
    fad2:	|            move.l 24(sp),-(sp)
    fad6:	|            jsr c384 <playSoundList>
    fadc:	|            addq.l #4,sp
		return BR_CONTINUE;
    fade:	|            moveq #2,d0
	}
}
    fae0:	\----------> movea.l (sp)+,a6
    fae2:	             lea 28(sp),sp
    fae6:	             rts

0000fae8 <builtIn_stopSound>:

builtIn(stopSound)
{
    fae8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    faea:	       movea.l 12(sp),a0
    faee:	       move.l 24(a0),d0
    faf2:	       move.l d0,-(sp)
    faf4:	       pea 5 <_start+0x5>
    faf8:	       move.l sp,d0
    fafa:	       addq.l #8,d0
    fafc:	       move.l d0,-(sp)
    fafe:	       jsr 13954 <getValueType>
    fb04:	       lea 12(sp),sp
    fb08:	       tst.w d0
    fb0a:	   /-- bne.s fb10 <builtIn_stopSound+0x28>
    fb0c:	   |   moveq #1,d0
    fb0e:	/--|-- bra.s fb2e <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    fb10:	|  \-> moveq #24,d0
    fb12:	|      add.l 12(sp),d0
    fb16:	|      move.l d0,-(sp)
    fb18:	|      jsr 142d8 <trimStack>
    fb1e:	|      addq.l #4,sp
	huntKillSound (v);
    fb20:	|      move.l (sp),d0
    fb22:	|      move.l d0,-(sp)
    fb24:	|      jsr c37c <huntKillSound>
    fb2a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb2c:	|      moveq #2,d0
}
    fb2e:	\----> addq.l #4,sp
    fb30:	       rts

0000fb32 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    fb32:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb34:	       movea.l 12(sp),a0
    fb38:	       move.l 24(a0),d0
    fb3c:	       move.l d0,-(sp)
    fb3e:	       pea 1 <_start+0x1>
    fb42:	       move.l sp,d0
    fb44:	       addq.l #8,d0
    fb46:	       move.l d0,-(sp)
    fb48:	       jsr 13954 <getValueType>
    fb4e:	       lea 12(sp),sp
    fb52:	       tst.w d0
    fb54:	   /-- bne.s fb5a <builtIn_setDefaultSoundVolume+0x28>
    fb56:	   |   moveq #1,d0
    fb58:	/--|-- bra.s fb78 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    fb5a:	|  \-> moveq #24,d0
    fb5c:	|      add.l 12(sp),d0
    fb60:	|      move.l d0,-(sp)
    fb62:	|      jsr 142d8 <trimStack>
    fb68:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    fb6a:	|      move.l (sp),d0
    fb6c:	|      move.l d0,-(sp)
    fb6e:	|      jsr c3f2 <setDefaultSoundVolume>
    fb74:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb76:	|      moveq #2,d0
}
    fb78:	\----> addq.l #4,sp
    fb7a:	       rts

0000fb7c <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    fb7c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb7e:	       movea.l 16(sp),a0
    fb82:	       move.l 24(a0),d0
    fb86:	       move.l d0,-(sp)
    fb88:	       pea 1 <_start+0x1>
    fb8c:	       move.l sp,d0
    fb8e:	       addq.l #8,d0
    fb90:	       move.l d0,-(sp)
    fb92:	       jsr 13954 <getValueType>
    fb98:	       lea 12(sp),sp
    fb9c:	       tst.w d0
    fb9e:	   /-- bne.s fba4 <builtIn_setSoundVolume+0x28>
    fba0:	   |   moveq #1,d0
    fba2:	/--|-- bra.s fbfe <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    fba4:	|  \-> moveq #24,d0
    fba6:	|      add.l 16(sp),d0
    fbaa:	|      move.l d0,-(sp)
    fbac:	|      jsr 142d8 <trimStack>
    fbb2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbb4:	|      movea.l 16(sp),a0
    fbb8:	|      move.l 24(a0),d0
    fbbc:	|      move.l d0,-(sp)
    fbbe:	|      pea 5 <_start+0x5>
    fbc2:	|      moveq #12,d0
    fbc4:	|      add.l sp,d0
    fbc6:	|      move.l d0,-(sp)
    fbc8:	|      jsr 13954 <getValueType>
    fbce:	|      lea 12(sp),sp
    fbd2:	|      tst.w d0
    fbd4:	|  /-- bne.s fbda <builtIn_setSoundVolume+0x5e>
    fbd6:	|  |   moveq #1,d0
    fbd8:	+--|-- bra.s fbfe <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    fbda:	|  \-> moveq #24,d0
    fbdc:	|      add.l 16(sp),d0
    fbe0:	|      move.l d0,-(sp)
    fbe2:	|      jsr 142d8 <trimStack>
    fbe8:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    fbea:	|      move.l (sp),d1
    fbec:	|      move.l 4(sp),d0
    fbf0:	|      move.l d1,-(sp)
    fbf2:	|      move.l d0,-(sp)
    fbf4:	|      jsr c406 <setSoundVolume>
    fbfa:	|      addq.l #8,sp
	return BR_CONTINUE;
    fbfc:	|      moveq #2,d0
}
    fbfe:	\----> addq.l #8,sp
    fc00:	       rts

0000fc02 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    fc02:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc06:	       movea.l 20(sp),a0
    fc0a:	       move.l 24(a0),d0
    fc0e:	       move.l d0,-(sp)
    fc10:	       pea 1 <_start+0x1>
    fc14:	       moveq #12,d0
    fc16:	       add.l sp,d0
    fc18:	       move.l d0,-(sp)
    fc1a:	       jsr 13954 <getValueType>
    fc20:	       lea 12(sp),sp
    fc24:	       tst.w d0
    fc26:	   /-- bne.s fc2e <builtIn_setSoundLoopPoints+0x2c>
    fc28:	   |   moveq #1,d0
    fc2a:	/--|-- bra.w fcc6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fc2e:	|  \-> moveq #24,d0
    fc30:	|      add.l 20(sp),d0
    fc34:	|      move.l d0,-(sp)
    fc36:	|      jsr 142d8 <trimStack>
    fc3c:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc3e:	|      movea.l 20(sp),a0
    fc42:	|      move.l 24(a0),d0
    fc46:	|      move.l d0,-(sp)
    fc48:	|      pea 1 <_start+0x1>
    fc4c:	|      lea 8(sp),a0
    fc50:	|      move.l a0,-(sp)
    fc52:	|      jsr 13954 <getValueType>
    fc58:	|      lea 12(sp),sp
    fc5c:	|      tst.w d0
    fc5e:	|  /-- bne.s fc64 <builtIn_setSoundLoopPoints+0x62>
    fc60:	|  |   moveq #1,d0
    fc62:	+--|-- bra.s fcc6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fc64:	|  \-> moveq #24,d0
    fc66:	|      add.l 20(sp),d0
    fc6a:	|      move.l d0,-(sp)
    fc6c:	|      jsr 142d8 <trimStack>
    fc72:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fc74:	|      movea.l 20(sp),a0
    fc78:	|      move.l 24(a0),d0
    fc7c:	|      move.l d0,-(sp)
    fc7e:	|      pea 5 <_start+0x5>
    fc82:	|      moveq #16,d0
    fc84:	|      add.l sp,d0
    fc86:	|      move.l d0,-(sp)
    fc88:	|      jsr 13954 <getValueType>
    fc8e:	|      lea 12(sp),sp
    fc92:	|      tst.w d0
    fc94:	|  /-- bne.s fc9a <builtIn_setSoundLoopPoints+0x98>
    fc96:	|  |   moveq #1,d0
    fc98:	+--|-- bra.s fcc6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fc9a:	|  \-> moveq #24,d0
    fc9c:	|      add.l 20(sp),d0
    fca0:	|      move.l d0,-(sp)
    fca2:	|      jsr 142d8 <trimStack>
    fca8:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    fcaa:	|      movea.l 4(sp),a0
    fcae:	|      move.l (sp),d1
    fcb0:	|      move.l 8(sp),d0
    fcb4:	|      move.l a0,-(sp)
    fcb6:	|      move.l d1,-(sp)
    fcb8:	|      move.l d0,-(sp)
    fcba:	|      jsr c3fe <setSoundLoop>
    fcc0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fcc4:	|      moveq #2,d0
}
    fcc6:	\----> lea 12(sp),sp
    fcca:	       rts

0000fccc <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    fccc:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fcce:	          movea.l 12(sp),a0
    fcd2:	          movea.l 24(a0),a0
    fcd6:	          move.l (a0),d0
    fcd8:	          moveq #5,d1
    fcda:	          cmp.l d0,d1
    fcdc:	/-------- bne.s fd20 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fcde:	|         movea.l 12(sp),a0
    fce2:	|         move.l 24(a0),d0
    fce6:	|         move.l d0,-(sp)
    fce8:	|         pea 5 <_start+0x5>
    fcec:	|         move.l sp,d0
    fcee:	|         addq.l #8,d0
    fcf0:	|         move.l d0,-(sp)
    fcf2:	|         jsr 13954 <getValueType>
    fcf8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fcfc:	|         moveq #24,d0
    fcfe:	|         add.l 12(sp),d0
    fd02:	|         move.l d0,-(sp)
    fd04:	|         jsr 142d8 <trimStack>
    fd0a:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    fd0c:	|         move.l (sp),d0
    fd0e:	|         move.l d0,-(sp)
    fd10:	|         jsr 15a1e <setFloor>
    fd16:	|         addq.l #4,sp
    fd18:	|         tst.w d0
    fd1a:	|  /----- bne.s fd36 <builtIn_setFloor+0x6a>
    fd1c:	|  |      moveq #1,d0
    fd1e:	|  |  /-- bra.s fd38 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    fd20:	\--|--|-> moveq #24,d0
    fd22:	   |  |   add.l 12(sp),d0
    fd26:	   |  |   move.l d0,-(sp)
    fd28:	   |  |   jsr 142d8 <trimStack>
    fd2e:	   |  |   addq.l #4,sp
		setFloorNull ();
    fd30:	   |  |   jsr 16198 <setFloorNull>
	}
	return BR_CONTINUE;
    fd36:	   \--|-> moveq #2,d0
}
    fd38:	      \-> addq.l #4,sp
    fd3a:	          rts

0000fd3c <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    fd3c:	jsr 152b6 <drawFloor>
	return BR_CONTINUE;
    fd42:	moveq #2,d0
}
    fd44:	rts

0000fd46 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    fd46:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fd48:	          movea.l 12(sp),a0
    fd4c:	          movea.l 24(a0),a0
    fd50:	          move.l (a0),d0
    fd52:	          moveq #5,d1
    fd54:	          cmp.l d0,d1
    fd56:	/-------- bne.s fd9a <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fd58:	|         movea.l 12(sp),a0
    fd5c:	|         move.l 24(a0),d0
    fd60:	|         move.l d0,-(sp)
    fd62:	|         pea 5 <_start+0x5>
    fd66:	|         move.l sp,d0
    fd68:	|         addq.l #8,d0
    fd6a:	|         move.l d0,-(sp)
    fd6c:	|         jsr 13954 <getValueType>
    fd72:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fd76:	|         moveq #24,d0
    fd78:	|         add.l 12(sp),d0
    fd7c:	|         move.l d0,-(sp)
    fd7e:	|         jsr 142d8 <trimStack>
    fd84:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    fd86:	|         move.l (sp),d0
    fd88:	|         move.l d0,-(sp)
    fd8a:	|         jsr 77b4 <setZBuffer>
    fd90:	|         addq.l #4,sp
    fd92:	|         tst.w d0
    fd94:	|  /----- bne.s fdb0 <builtIn_setZBuffer+0x6a>
    fd96:	|  |      moveq #1,d0
    fd98:	|  |  /-- bra.s fdb2 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    fd9a:	\--|--|-> moveq #24,d0
    fd9c:	   |  |   add.l 12(sp),d0
    fda0:	   |  |   move.l d0,-(sp)
    fda2:	   |  |   jsr 142d8 <trimStack>
    fda8:	   |  |   addq.l #4,sp
		killZBuffer ();
    fdaa:	   |  |   jsr 775e <killZBuffer>
	}
	return BR_CONTINUE;
    fdb0:	   \--|-> moveq #2,d0
}
    fdb2:	      \-> addq.l #4,sp
    fdb4:	          rts

0000fdb6 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fdb6:	pea 18946 <PutChar+0x1d82>
    fdbc:	jsr 16274 <KPrintF>
    fdc2:	addq.l #4,sp
	return BR_CONTINUE;
    fdc4:	moveq #2,d0
}
    fdc6:	rts

0000fdc8 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fdc8:	          movea.l 8(sp),a0
    fdcc:	          move.l 24(a0),d0
    fdd0:	          move.l d0,-(sp)
    fdd2:	          pea 1 <_start+0x1>
    fdd6:	          pea 1b96e <speechMode>
    fddc:	          jsr 13954 <getValueType>
    fde2:	          lea 12(sp),sp
    fde6:	          tst.w d0
    fde8:	      /-- bne.s fdee <builtIn_setSpeechMode+0x26>
    fdea:	      |   moveq #1,d0
    fdec:	/-----|-- bra.s fe26 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fdee:	|     \-> moveq #24,d0
    fdf0:	|         add.l 8(sp),d0
    fdf4:	|         move.l d0,-(sp)
    fdf6:	|         jsr 142d8 <trimStack>
    fdfc:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fdfe:	|         move.l 1b96e <speechMode>,d0
    fe04:	|     /-- bmi.s fe12 <builtIn_setSpeechMode+0x4a>
    fe06:	|     |   move.l 1b96e <speechMode>,d0
    fe0c:	|     |   moveq #2,d1
    fe0e:	|     |   cmp.l d0,d1
    fe10:	|  /--|-- bge.s fe24 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    fe12:	|  |  \-> pea 1895f <PutChar+0x1d9b>
    fe18:	|  |      jsr 16274 <KPrintF>
    fe1e:	|  |      addq.l #4,sp
		return BR_ERROR;
    fe20:	|  |      moveq #1,d0
    fe22:	+--|----- bra.s fe26 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fe24:	|  \----> moveq #2,d0
}
    fe26:	\-------> rts

0000fe28 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fe28:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fe2a:	       jsr 6f66 <isThereAnySpeechGoingOn>
    fe30:	       move.l d0,(sp)
	if (i == -1) {
    fe32:	       moveq #-1,d0
    fe34:	       cmp.l (sp),d0
    fe36:	/----- bne.s fe52 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fe38:	|      moveq #28,d0
    fe3a:	|      add.l 12(sp),d0
    fe3e:	|      clr.l -(sp)
    fe40:	|      pea 1 <_start+0x1>
    fe44:	|      move.l d0,-(sp)
    fe46:	|      jsr 14246 <setVariable>
    fe4c:	|      lea 12(sp),sp
    fe50:	|  /-- bra.s fe6a <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fe52:	\--|-> moveq #28,d0
    fe54:	   |   add.l 12(sp),d0
    fe58:	   |   move.l (sp),-(sp)
    fe5a:	   |   pea 7 <_start+0x7>
    fe5e:	   |   move.l d0,-(sp)
    fe60:	   |   jsr 14246 <setVariable>
    fe66:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fe6a:	   \-> moveq #2,d0
}
    fe6c:	       addq.l #4,sp
    fe6e:	       rts

0000fe70 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fe70:	jsr 524e <killSpeechTimers>
	return BR_CONTINUE;
    fe76:	moveq #2,d0
}
    fe78:	rts

0000fe7a <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fe7a:	       move.l 1b9b4 <overRegion>,d0
    fe80:	/----- beq.s feaa <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fe82:	|      movea.l 1b9b4 <overRegion>,a0
    fe88:	|      movea.l 28(a0),a0
    fe8c:	|      move.l 4(a0),d1
    fe90:	|      moveq #28,d0
    fe92:	|      add.l 8(sp),d0
    fe96:	|      move.l d1,-(sp)
    fe98:	|      pea 7 <_start+0x7>
    fe9c:	|      move.l d0,-(sp)
    fe9e:	|      jsr 14246 <setVariable>
    fea4:	|      lea 12(sp),sp
    fea8:	|  /-- bra.s fec2 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    feaa:	\--|-> moveq #28,d0
    feac:	   |   add.l 8(sp),d0
    feb0:	   |   clr.l -(sp)
    feb2:	   |   pea 1 <_start+0x1>
    feb6:	   |   move.l d0,-(sp)
    feb8:	   |   jsr 14246 <setVariable>
    febe:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fec2:	   \-> moveq #2,d0
}
    fec4:	       rts

0000fec6 <builtIn_rename>:

builtIn(rename)
{
    fec6:	       lea -16(sp),sp
    feca:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fecc:	       movea.l 28(sp),a0
    fed0:	       move.l 24(a0),d0
    fed4:	       move.l d0,-(sp)
    fed6:	       jsr 13f2a <getTextFromAnyVar>
    fedc:	       addq.l #4,sp
    fede:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fee2:	   /-- bne.s fee8 <builtIn_rename+0x22>
    fee4:	   |   moveq #1,d0
    fee6:	/--|-- bra.s ff62 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fee8:	|  \-> moveq #24,d0
    feea:	|      add.l 28(sp),d0
    feee:	|      move.l d0,-(sp)
    fef0:	|      jsr 142d8 <trimStack>
    fef6:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fef8:	|      movea.l 28(sp),a0
    fefc:	|      move.l 24(a0),d0
    ff00:	|      move.l d0,-(sp)
    ff02:	|      pea 7 <_start+0x7>
    ff06:	|      lea 12(sp),a0
    ff0a:	|      move.l a0,-(sp)
    ff0c:	|      jsr 13954 <getValueType>
    ff12:	|      lea 12(sp),sp
    ff16:	|      tst.w d0
    ff18:	|  /-- bne.s ff1e <builtIn_rename+0x58>
    ff1a:	|  |   moveq #1,d0
    ff1c:	+--|-- bra.s ff62 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    ff1e:	|  \-> moveq #24,d0
    ff20:	|      add.l 28(sp),d0
    ff24:	|      move.l d0,-(sp)
    ff26:	|      jsr 142d8 <trimStack>
    ff2c:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    ff2e:	|      move.l 4(sp),d0
    ff32:	|      move.l d0,-(sp)
    ff34:	|      jsr c740 <findObjectType>
    ff3a:	|      addq.l #4,sp
    ff3c:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    ff40:	|      movea.l 12(sp),a0
    ff44:	|      move.l (a0),8(sp)
    ff48:	|      move.l 1b848 <SysBase>,d0
    ff4e:	|      movea.l d0,a6
    ff50:	|      movea.l 8(sp),a1
    ff54:	|      jsr -690(a6)
	o->screenName = newText;
    ff58:	|      movea.l 12(sp),a0
    ff5c:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    ff60:	|      moveq #2,d0
}
    ff62:	\----> movea.l (sp)+,a6
    ff64:	       lea 16(sp),sp
    ff68:	       rts

0000ff6a <builtIn_getObjectX>:

builtIn (getObjectX)
{
    ff6a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff6e:	          movea.l 20(sp),a0
    ff72:	          move.l 24(a0),d0
    ff76:	          move.l d0,-(sp)
    ff78:	          pea 7 <_start+0x7>
    ff7c:	          lea 8(sp),a0
    ff80:	          move.l a0,-(sp)
    ff82:	          jsr 13954 <getValueType>
    ff88:	          lea 12(sp),sp
    ff8c:	          tst.w d0
    ff8e:	      /-- bne.s ff96 <builtIn_getObjectX+0x2c>
    ff90:	      |   moveq #1,d0
    ff92:	/-----|-- bra.w 10032 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    ff96:	|     \-> moveq #24,d0
    ff98:	|         add.l 20(sp),d0
    ff9c:	|         move.l d0,-(sp)
    ff9e:	|         jsr 142d8 <trimStack>
    ffa4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    ffa6:	|         move.l (sp),d0
    ffa8:	|         move.l d0,-(sp)
    ffaa:	|         jsr 9866 <findPerson>
    ffb0:	|         addq.l #4,sp
    ffb2:	|         move.l d0,8(sp)
	if (pers) {
    ffb6:	|     /-- beq.s ffe4 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    ffb8:	|     |   movea.l 8(sp),a0
    ffbc:	|     |   move.l (a0),d0
    ffbe:	|     |   move.l d0,-(sp)
    ffc0:	|     |   jsr 164c4 <__fixsfsi>
    ffc6:	|     |   addq.l #4,sp
    ffc8:	|     |   move.l d0,d1
    ffca:	|     |   moveq #28,d0
    ffcc:	|     |   add.l 20(sp),d0
    ffd0:	|     |   move.l d1,-(sp)
    ffd2:	|     |   pea 1 <_start+0x1>
    ffd6:	|     |   move.l d0,-(sp)
    ffd8:	|     |   jsr 14246 <setVariable>
    ffde:	|     |   lea 12(sp),sp
    ffe2:	|  /--|-- bra.s 10030 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    ffe4:	|  |  \-> move.l (sp),d0
    ffe6:	|  |      move.l d0,-(sp)
    ffe8:	|  |      jsr 14a96 <getRegionForObject>
    ffee:	|  |      addq.l #4,sp
    fff0:	|  |      move.l d0,4(sp)
		if (la) {
    fff4:	|  |  /-- beq.s 10018 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    fff6:	|  |  |   movea.l 4(sp),a0
    fffa:	|  |  |   move.l 16(a0),d1
    fffe:	|  |  |   moveq #28,d0
   10000:	|  |  |   add.l 20(sp),d0
   10004:	|  |  |   move.l d1,-(sp)
   10006:	|  |  |   pea 1 <_start+0x1>
   1000a:	|  |  |   move.l d0,-(sp)
   1000c:	|  |  |   jsr 14246 <setVariable>
   10012:	|  |  |   lea 12(sp),sp
   10016:	|  +--|-- bra.s 10030 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10018:	|  |  \-> moveq #28,d0
   1001a:	|  |      add.l 20(sp),d0
   1001e:	|  |      clr.l -(sp)
   10020:	|  |      pea 1 <_start+0x1>
   10024:	|  |      move.l d0,-(sp)
   10026:	|  |      jsr 14246 <setVariable>
   1002c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10030:	|  \----> moveq #2,d0
}
   10032:	\-------> lea 12(sp),sp
   10036:	          rts

00010038 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10038:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1003c:	          movea.l 20(sp),a0
   10040:	          move.l 24(a0),d0
   10044:	          move.l d0,-(sp)
   10046:	          pea 7 <_start+0x7>
   1004a:	          lea 8(sp),a0
   1004e:	          move.l a0,-(sp)
   10050:	          jsr 13954 <getValueType>
   10056:	          lea 12(sp),sp
   1005a:	          tst.w d0
   1005c:	      /-- bne.s 10064 <builtIn_getObjectY+0x2c>
   1005e:	      |   moveq #1,d0
   10060:	/-----|-- bra.w 10102 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10064:	|     \-> moveq #24,d0
   10066:	|         add.l 20(sp),d0
   1006a:	|         move.l d0,-(sp)
   1006c:	|         jsr 142d8 <trimStack>
   10072:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10074:	|         move.l (sp),d0
   10076:	|         move.l d0,-(sp)
   10078:	|         jsr 9866 <findPerson>
   1007e:	|         addq.l #4,sp
   10080:	|         move.l d0,8(sp)
	if (pers) {
   10084:	|     /-- beq.s 100b4 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10086:	|     |   movea.l 8(sp),a0
   1008a:	|     |   move.l 4(a0),d0
   1008e:	|     |   move.l d0,-(sp)
   10090:	|     |   jsr 164c4 <__fixsfsi>
   10096:	|     |   addq.l #4,sp
   10098:	|     |   move.l d0,d1
   1009a:	|     |   moveq #28,d0
   1009c:	|     |   add.l 20(sp),d0
   100a0:	|     |   move.l d1,-(sp)
   100a2:	|     |   pea 1 <_start+0x1>
   100a6:	|     |   move.l d0,-(sp)
   100a8:	|     |   jsr 14246 <setVariable>
   100ae:	|     |   lea 12(sp),sp
   100b2:	|  /--|-- bra.s 10100 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   100b4:	|  |  \-> move.l (sp),d0
   100b6:	|  |      move.l d0,-(sp)
   100b8:	|  |      jsr 14a96 <getRegionForObject>
   100be:	|  |      addq.l #4,sp
   100c0:	|  |      move.l d0,4(sp)
		if (la) {
   100c4:	|  |  /-- beq.s 100e8 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   100c6:	|  |  |   movea.l 4(sp),a0
   100ca:	|  |  |   move.l 20(a0),d1
   100ce:	|  |  |   moveq #28,d0
   100d0:	|  |  |   add.l 20(sp),d0
   100d4:	|  |  |   move.l d1,-(sp)
   100d6:	|  |  |   pea 1 <_start+0x1>
   100da:	|  |  |   move.l d0,-(sp)
   100dc:	|  |  |   jsr 14246 <setVariable>
   100e2:	|  |  |   lea 12(sp),sp
   100e6:	|  +--|-- bra.s 10100 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   100e8:	|  |  \-> moveq #28,d0
   100ea:	|  |      add.l 20(sp),d0
   100ee:	|  |      clr.l -(sp)
   100f0:	|  |      pea 1 <_start+0x1>
   100f4:	|  |      move.l d0,-(sp)
   100f6:	|  |      jsr 14246 <setVariable>
   100fc:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10100:	|  \----> moveq #2,d0
}
   10102:	\-------> lea 12(sp),sp
   10106:	          rts

00010108 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10108:	       lea -32(sp),sp
   1010c:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10110:	       movea.l 56(sp),a0
   10114:	       move.l 24(a0),d0
   10118:	       move.l d0,-(sp)
   1011a:	       pea 1 <_start+0x1>
   1011e:	       lea 28(sp),a0
   10122:	       move.l a0,-(sp)
   10124:	       jsr 13954 <getValueType>
   1012a:	       lea 12(sp),sp
   1012e:	       tst.w d0
   10130:	   /-- bne.s 10138 <builtIn_addScreenRegion+0x30>
   10132:	   |   moveq #1,d0
   10134:	/--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10138:	|  \-> moveq #24,d0
   1013a:	|      add.l 56(sp),d0
   1013e:	|      move.l d0,-(sp)
   10140:	|      jsr 142d8 <trimStack>
   10146:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10148:	|      movea.l 56(sp),a0
   1014c:	|      move.l 24(a0),d0
   10150:	|      move.l d0,-(sp)
   10152:	|      pea 1 <_start+0x1>
   10156:	|      moveq #48,d0
   10158:	|      add.l sp,d0
   1015a:	|      move.l d0,-(sp)
   1015c:	|      jsr 13954 <getValueType>
   10162:	|      lea 12(sp),sp
   10166:	|      tst.w d0
   10168:	|  /-- bne.s 10170 <builtIn_addScreenRegion+0x68>
   1016a:	|  |   moveq #1,d0
   1016c:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10170:	|  \-> moveq #24,d0
   10172:	|      add.l 56(sp),d0
   10176:	|      move.l d0,-(sp)
   10178:	|      jsr 142d8 <trimStack>
   1017e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10180:	|      movea.l 56(sp),a0
   10184:	|      move.l 24(a0),d0
   10188:	|      move.l d0,-(sp)
   1018a:	|      pea 1 <_start+0x1>
   1018e:	|      moveq #52,d0
   10190:	|      add.l sp,d0
   10192:	|      move.l d0,-(sp)
   10194:	|      jsr 13954 <getValueType>
   1019a:	|      lea 12(sp),sp
   1019e:	|      tst.w d0
   101a0:	|  /-- bne.s 101a8 <builtIn_addScreenRegion+0xa0>
   101a2:	|  |   moveq #1,d0
   101a4:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   101a8:	|  \-> moveq #24,d0
   101aa:	|      add.l 56(sp),d0
   101ae:	|      move.l d0,-(sp)
   101b0:	|      jsr 142d8 <trimStack>
   101b6:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101b8:	|      movea.l 56(sp),a0
   101bc:	|      move.l 24(a0),d0
   101c0:	|      move.l d0,-(sp)
   101c2:	|      pea 1 <_start+0x1>
   101c6:	|      lea 32(sp),a0
   101ca:	|      move.l a0,-(sp)
   101cc:	|      jsr 13954 <getValueType>
   101d2:	|      lea 12(sp),sp
   101d6:	|      tst.w d0
   101d8:	|  /-- bne.s 101e0 <builtIn_addScreenRegion+0xd8>
   101da:	|  |   moveq #1,d0
   101dc:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   101e0:	|  \-> moveq #24,d0
   101e2:	|      add.l 56(sp),d0
   101e6:	|      move.l d0,-(sp)
   101e8:	|      jsr 142d8 <trimStack>
   101ee:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101f0:	|      movea.l 56(sp),a0
   101f4:	|      move.l 24(a0),d0
   101f8:	|      move.l d0,-(sp)
   101fa:	|      pea 1 <_start+0x1>
   101fe:	|      lea 36(sp),a0
   10202:	|      move.l a0,-(sp)
   10204:	|      jsr 13954 <getValueType>
   1020a:	|      lea 12(sp),sp
   1020e:	|      tst.w d0
   10210:	|  /-- bne.s 10218 <builtIn_addScreenRegion+0x110>
   10212:	|  |   moveq #1,d0
   10214:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10218:	|  \-> moveq #24,d0
   1021a:	|      add.l 56(sp),d0
   1021e:	|      move.l d0,-(sp)
   10220:	|      jsr 142d8 <trimStack>
   10226:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10228:	|      movea.l 56(sp),a0
   1022c:	|      move.l 24(a0),d0
   10230:	|      move.l d0,-(sp)
   10232:	|      pea 1 <_start+0x1>
   10236:	|      lea 40(sp),a0
   1023a:	|      move.l a0,-(sp)
   1023c:	|      jsr 13954 <getValueType>
   10242:	|      lea 12(sp),sp
   10246:	|      tst.w d0
   10248:	|  /-- bne.s 10250 <builtIn_addScreenRegion+0x148>
   1024a:	|  |   moveq #1,d0
   1024c:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10250:	|  \-> moveq #24,d0
   10252:	|      add.l 56(sp),d0
   10256:	|      move.l d0,-(sp)
   10258:	|      jsr 142d8 <trimStack>
   1025e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10260:	|      movea.l 56(sp),a0
   10264:	|      move.l 24(a0),d0
   10268:	|      move.l d0,-(sp)
   1026a:	|      pea 1 <_start+0x1>
   1026e:	|      lea 44(sp),a0
   10272:	|      move.l a0,-(sp)
   10274:	|      jsr 13954 <getValueType>
   1027a:	|      lea 12(sp),sp
   1027e:	|      tst.w d0
   10280:	|  /-- bne.s 10288 <builtIn_addScreenRegion+0x180>
   10282:	|  |   moveq #1,d0
   10284:	+--|-- bra.w 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10288:	|  \-> moveq #24,d0
   1028a:	|      add.l 56(sp),d0
   1028e:	|      move.l d0,-(sp)
   10290:	|      jsr 142d8 <trimStack>
   10296:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10298:	|      movea.l 56(sp),a0
   1029c:	|      move.l 24(a0),d0
   102a0:	|      move.l d0,-(sp)
   102a2:	|      pea 7 <_start+0x7>
   102a6:	|      lea 24(sp),a0
   102aa:	|      move.l a0,-(sp)
   102ac:	|      jsr 13954 <getValueType>
   102b2:	|      lea 12(sp),sp
   102b6:	|      tst.w d0
   102b8:	|  /-- bne.s 102be <builtIn_addScreenRegion+0x1b6>
   102ba:	|  |   moveq #1,d0
   102bc:	+--|-- bra.s 10312 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   102be:	|  \-> moveq #24,d0
   102c0:	|      add.l 56(sp),d0
   102c4:	|      move.l d0,-(sp)
   102c6:	|      jsr 142d8 <trimStack>
   102cc:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   102ce:	|      move.l 16(sp),d5
   102d2:	|      move.l 20(sp),d4
   102d6:	|      move.l 40(sp),d3
   102da:	|      move.l 44(sp),d2
   102de:	|      movea.l 24(sp),a1
   102e2:	|      movea.l 28(sp),a0
   102e6:	|      move.l 32(sp),d1
   102ea:	|      move.l 36(sp),d0
   102ee:	|      move.l d5,-(sp)
   102f0:	|      move.l d4,-(sp)
   102f2:	|      move.l d3,-(sp)
   102f4:	|      move.l d2,-(sp)
   102f6:	|      move.l a1,-(sp)
   102f8:	|      move.l a0,-(sp)
   102fa:	|      move.l d1,-(sp)
   102fc:	|      move.l d0,-(sp)
   102fe:	|      jsr 14950 <addScreenRegion>
   10304:	|      lea 32(sp),sp
   10308:	|      tst.w d0
   1030a:	|  /-- beq.s 10310 <builtIn_addScreenRegion+0x208>
   1030c:	|  |   moveq #2,d0
   1030e:	+--|-- bra.s 10312 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10310:	|  \-> moveq #1,d0

}
   10312:	\----> movem.l (sp)+,d2-d5
   10316:	       lea 32(sp),sp
   1031a:	       rts

0001031c <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1031c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1031e:	       movea.l 12(sp),a0
   10322:	       move.l 24(a0),d0
   10326:	       move.l d0,-(sp)
   10328:	       pea 7 <_start+0x7>
   1032c:	       move.l sp,d0
   1032e:	       addq.l #8,d0
   10330:	       move.l d0,-(sp)
   10332:	       jsr 13954 <getValueType>
   10338:	       lea 12(sp),sp
   1033c:	       tst.w d0
   1033e:	   /-- bne.s 10344 <builtIn_removeScreenRegion+0x28>
   10340:	   |   moveq #1,d0
   10342:	/--|-- bra.s 10362 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10344:	|  \-> moveq #24,d0
   10346:	|      add.l 12(sp),d0
   1034a:	|      move.l d0,-(sp)
   1034c:	|      jsr 142d8 <trimStack>
   10352:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10354:	|      move.l (sp),d0
   10356:	|      move.l d0,-(sp)
   10358:	|      jsr 14c3e <removeScreenRegion>
   1035e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10360:	|      moveq #2,d0
}
   10362:	\----> addq.l #4,sp
   10364:	       rts

00010366 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10366:	jsr 14dc2 <showBoxes>
	return BR_CONTINUE;
   1036c:	moveq #2,d0
}
   1036e:	rts

00010370 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10370:	jsr 14ac4 <killAllRegions>
	return BR_CONTINUE;
   10376:	moveq #2,d0
}
   10378:	rts

0001037a <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1037a:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1037e:	       movea.l 24(sp),a0
   10382:	       move.l 24(a0),d0
   10386:	       move.l d0,-(sp)
   10388:	       jsr 13600 <getCostumeFromVar>
   1038e:	       addq.l #4,sp
   10390:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10394:	   /-- bne.s 1039c <builtIn_addCharacter+0x22>
   10396:	   |   moveq #1,d0
   10398:	/--|-- bra.w 10478 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1039c:	|  \-> moveq #24,d0
   1039e:	|      add.l 24(sp),d0
   103a2:	|      move.l d0,-(sp)
   103a4:	|      jsr 142d8 <trimStack>
   103aa:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103ac:	|      movea.l 24(sp),a0
   103b0:	|      move.l 24(a0),d0
   103b4:	|      move.l d0,-(sp)
   103b6:	|      pea 1 <_start+0x1>
   103ba:	|      lea 12(sp),a0
   103be:	|      move.l a0,-(sp)
   103c0:	|      jsr 13954 <getValueType>
   103c6:	|      lea 12(sp),sp
   103ca:	|      tst.w d0
   103cc:	|  /-- bne.s 103d4 <builtIn_addCharacter+0x5a>
   103ce:	|  |   moveq #1,d0
   103d0:	+--|-- bra.w 10478 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   103d4:	|  \-> moveq #24,d0
   103d6:	|      add.l 24(sp),d0
   103da:	|      move.l d0,-(sp)
   103dc:	|      jsr 142d8 <trimStack>
   103e2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103e4:	|      movea.l 24(sp),a0
   103e8:	|      move.l 24(a0),d0
   103ec:	|      move.l d0,-(sp)
   103ee:	|      pea 1 <_start+0x1>
   103f2:	|      moveq #16,d0
   103f4:	|      add.l sp,d0
   103f6:	|      move.l d0,-(sp)
   103f8:	|      jsr 13954 <getValueType>
   103fe:	|      lea 12(sp),sp
   10402:	|      tst.w d0
   10404:	|  /-- bne.s 1040a <builtIn_addCharacter+0x90>
   10406:	|  |   moveq #1,d0
   10408:	+--|-- bra.s 10478 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1040a:	|  \-> moveq #24,d0
   1040c:	|      add.l 24(sp),d0
   10410:	|      move.l d0,-(sp)
   10412:	|      jsr 142d8 <trimStack>
   10418:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1041a:	|      movea.l 24(sp),a0
   1041e:	|      move.l 24(a0),d0
   10422:	|      move.l d0,-(sp)
   10424:	|      pea 7 <_start+0x7>
   10428:	|      lea 8(sp),a0
   1042c:	|      move.l a0,-(sp)
   1042e:	|      jsr 13954 <getValueType>
   10434:	|      lea 12(sp),sp
   10438:	|      tst.w d0
   1043a:	|  /-- bne.s 10440 <builtIn_addCharacter+0xc6>
   1043c:	|  |   moveq #1,d0
   1043e:	+--|-- bra.s 10478 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10440:	|  \-> moveq #24,d0
   10442:	|      add.l 24(sp),d0
   10446:	|      move.l d0,-(sp)
   10448:	|      jsr 142d8 <trimStack>
   1044e:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10450:	|      movea.l (sp),a0
   10452:	|      move.l 4(sp),d1
   10456:	|      move.l 8(sp),d0
   1045a:	|      move.l 12(sp),-(sp)
   1045e:	|      move.l a0,-(sp)
   10460:	|      move.l d1,-(sp)
   10462:	|      move.l d0,-(sp)
   10464:	|      jsr 8460 <addPerson>
   1046a:	|      lea 16(sp),sp
   1046e:	|      tst.w d0
   10470:	|  /-- beq.s 10476 <builtIn_addCharacter+0xfc>
   10472:	|  |   moveq #2,d0
   10474:	+--|-- bra.s 10478 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10476:	|  \-> moveq #1,d0
}
   10478:	\----> lea 16(sp),sp
   1047c:	       rts

0001047e <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1047e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10480:	       movea.l 12(sp),a0
   10484:	       move.l 24(a0),d0
   10488:	       move.l d0,-(sp)
   1048a:	       pea 7 <_start+0x7>
   1048e:	       move.l sp,d0
   10490:	       addq.l #8,d0
   10492:	       move.l d0,-(sp)
   10494:	       jsr 13954 <getValueType>
   1049a:	       lea 12(sp),sp
   1049e:	       tst.w d0
   104a0:	   /-- bne.s 104a6 <builtIn_hideCharacter+0x28>
   104a2:	   |   moveq #1,d0
   104a4:	/--|-- bra.s 104c6 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   104a6:	|  \-> moveq #24,d0
   104a8:	|      add.l 12(sp),d0
   104ac:	|      move.l d0,-(sp)
   104ae:	|      jsr 142d8 <trimStack>
   104b4:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   104b6:	|      move.l (sp),d0
   104b8:	|      move.l d0,-(sp)
   104ba:	|      clr.l -(sp)
   104bc:	|      jsr ae9a <setShown>
   104c2:	|      addq.l #8,sp
	return BR_CONTINUE;
   104c4:	|      moveq #2,d0
}
   104c6:	\----> addq.l #4,sp
   104c8:	       rts

000104ca <builtIn_showCharacter>:

builtIn(showCharacter)
{
   104ca:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104cc:	       movea.l 12(sp),a0
   104d0:	       move.l 24(a0),d0
   104d4:	       move.l d0,-(sp)
   104d6:	       pea 7 <_start+0x7>
   104da:	       move.l sp,d0
   104dc:	       addq.l #8,d0
   104de:	       move.l d0,-(sp)
   104e0:	       jsr 13954 <getValueType>
   104e6:	       lea 12(sp),sp
   104ea:	       tst.w d0
   104ec:	   /-- bne.s 104f2 <builtIn_showCharacter+0x28>
   104ee:	   |   moveq #1,d0
   104f0:	/--|-- bra.s 10514 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   104f2:	|  \-> moveq #24,d0
   104f4:	|      add.l 12(sp),d0
   104f8:	|      move.l d0,-(sp)
   104fa:	|      jsr 142d8 <trimStack>
   10500:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10502:	|      move.l (sp),d0
   10504:	|      move.l d0,-(sp)
   10506:	|      pea 1 <_start+0x1>
   1050a:	|      jsr ae9a <setShown>
   10510:	|      addq.l #8,sp
	return BR_CONTINUE;
   10512:	|      moveq #2,d0
}
   10514:	\----> addq.l #4,sp
   10516:	       rts

00010518 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   10518:	jsr 524e <killSpeechTimers>
	killMostPeople ();
   1051e:	jsr 9cd2 <killMostPeople>
	return BR_CONTINUE;
   10524:	moveq #2,d0
}
   10526:	rts

00010528 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10528:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1052a:	       movea.l 16(sp),a0
   1052e:	       move.l 24(a0),d0
   10532:	       move.l d0,-(sp)
   10534:	       pea 1 <_start+0x1>
   10538:	       move.l sp,d0
   1053a:	       addq.l #8,d0
   1053c:	       move.l d0,-(sp)
   1053e:	       jsr 13954 <getValueType>
   10544:	       lea 12(sp),sp
   10548:	       tst.w d0
   1054a:	   /-- bne.s 10550 <builtIn_setCharacterDrawMode+0x28>
   1054c:	   |   moveq #1,d0
   1054e:	/--|-- bra.s 105aa <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10550:	|  \-> moveq #24,d0
   10552:	|      add.l 16(sp),d0
   10556:	|      move.l d0,-(sp)
   10558:	|      jsr 142d8 <trimStack>
   1055e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10560:	|      movea.l 16(sp),a0
   10564:	|      move.l 24(a0),d0
   10568:	|      move.l d0,-(sp)
   1056a:	|      pea 7 <_start+0x7>
   1056e:	|      moveq #12,d0
   10570:	|      add.l sp,d0
   10572:	|      move.l d0,-(sp)
   10574:	|      jsr 13954 <getValueType>
   1057a:	|      lea 12(sp),sp
   1057e:	|      tst.w d0
   10580:	|  /-- bne.s 10586 <builtIn_setCharacterDrawMode+0x5e>
   10582:	|  |   moveq #1,d0
   10584:	+--|-- bra.s 105aa <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10586:	|  \-> moveq #24,d0
   10588:	|      add.l 16(sp),d0
   1058c:	|      move.l d0,-(sp)
   1058e:	|      jsr 142d8 <trimStack>
   10594:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10596:	|      move.l 4(sp),d1
   1059a:	|      move.l (sp),d0
   1059c:	|      move.l d1,-(sp)
   1059e:	|      move.l d0,-(sp)
   105a0:	|      jsr a7d8 <setDrawMode>
   105a6:	|      addq.l #8,sp
	return BR_CONTINUE;
   105a8:	|      moveq #2,d0
}
   105aa:	\----> addq.l #8,sp
   105ac:	       rts

000105ae <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   105ae:	pea 1899d <PutChar+0x1dd9>
   105b4:	jsr 16274 <KPrintF>
   105ba:	addq.l #4,sp
	return BR_CONTINUE;
   105bc:	moveq #2,d0
}
   105be:	rts

000105c0 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   105c0:	pea 189d0 <PutChar+0x1e0c>
   105c6:	jsr 16274 <KPrintF>
   105cc:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   105ce:	moveq #2,d0
}
   105d0:	rts

000105d2 <builtIn_setScale>:

builtIn(setScale)
{
   105d2:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105d4:	       movea.l 16(sp),a0
   105d8:	       move.l 24(a0),d0
   105dc:	       move.l d0,-(sp)
   105de:	       pea 1 <_start+0x1>
   105e2:	       move.l sp,d0
   105e4:	       addq.l #8,d0
   105e6:	       move.l d0,-(sp)
   105e8:	       jsr 13954 <getValueType>
   105ee:	       lea 12(sp),sp
   105f2:	       tst.w d0
   105f4:	   /-- bne.s 105fa <builtIn_setScale+0x28>
   105f6:	   |   moveq #1,d0
   105f8:	/--|-- bra.s 1065c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   105fa:	|  \-> moveq #24,d0
   105fc:	|      add.l 16(sp),d0
   10600:	|      move.l d0,-(sp)
   10602:	|      jsr 142d8 <trimStack>
   10608:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1060a:	|      movea.l 16(sp),a0
   1060e:	|      move.l 24(a0),d0
   10612:	|      move.l d0,-(sp)
   10614:	|      pea 1 <_start+0x1>
   10618:	|      moveq #12,d0
   1061a:	|      add.l sp,d0
   1061c:	|      move.l d0,-(sp)
   1061e:	|      jsr 13954 <getValueType>
   10624:	|      lea 12(sp),sp
   10628:	|      tst.w d0
   1062a:	|  /-- bne.s 10630 <builtIn_setScale+0x5e>
   1062c:	|  |   moveq #1,d0
   1062e:	+--|-- bra.s 1065c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10630:	|  \-> moveq #24,d0
   10632:	|      add.l 16(sp),d0
   10636:	|      move.l d0,-(sp)
   10638:	|      jsr 142d8 <trimStack>
   1063e:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10640:	|      move.l (sp),d0
   10642:	|      move.l d0,d0
   10644:	|      movea.w d0,a1
   10646:	|      move.l 4(sp),d0
   1064a:	|      move.l d0,d0
   1064c:	|      movea.w d0,a0
   1064e:	|      move.l a1,-(sp)
   10650:	|      move.l a0,-(sp)
   10652:	|      jsr ae72 <setScale>
   10658:	|      addq.l #8,sp
	return BR_CONTINUE;
   1065a:	|      moveq #2,d0
}
   1065c:	\----> addq.l #8,sp
   1065e:	       rts

00010660 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   10660:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10662:	       movea.l 12(sp),a0
   10666:	       move.l 24(a0),d0
   1066a:	       move.l d0,-(sp)
   1066c:	       pea 7 <_start+0x7>
   10670:	       move.l sp,d0
   10672:	       addq.l #8,d0
   10674:	       move.l d0,-(sp)
   10676:	       jsr 13954 <getValueType>
   1067c:	       lea 12(sp),sp
   10680:	       tst.w d0
   10682:	   /-- bne.s 10688 <builtIn_stopCharacter+0x28>
   10684:	   |   moveq #1,d0
   10686:	/--|-- bra.s 106c0 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10688:	|  \-> moveq #24,d0
   1068a:	|      add.l 12(sp),d0
   1068e:	|      move.l d0,-(sp)
   10690:	|      jsr 142d8 <trimStack>
   10696:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10698:	|      move.l (sp),d0
   1069a:	|      move.l d0,-(sp)
   1069c:	|      jsr afa6 <stopPerson>
   106a2:	|      addq.l #4,sp
   106a4:	|      movea.w d0,a0
   106a6:	|      moveq #28,d0
   106a8:	|      add.l 12(sp),d0
   106ac:	|      move.l a0,-(sp)
   106ae:	|      pea 1 <_start+0x1>
   106b2:	|      move.l d0,-(sp)
   106b4:	|      jsr 14246 <setVariable>
   106ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106be:	|      moveq #2,d0
}
   106c0:	\----> addq.l #4,sp
   106c2:	       rts

000106c4 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   106c4:	pea 18a0a <PutChar+0x1e46>
   106ca:	jsr 16274 <KPrintF>
   106d0:	addq.l #4,sp
	return BR_CONTINUE;
   106d2:	moveq #2,d0
}
   106d4:	rts

000106d6 <builtIn_animate>:

builtIn(animate)
{
   106d6:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   106d8:	       movea.l 16(sp),a0
   106dc:	       move.l 24(a0),d0
   106e0:	       move.l d0,-(sp)
   106e2:	       jsr 13e2c <getAnimationFromVar>
   106e8:	       addq.l #4,sp
   106ea:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   106ee:	   /-- bne.s 106f4 <builtIn_animate+0x1e>
   106f0:	   |   moveq #1,d0
   106f2:	/--|-- bra.s 10772 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   106f4:	|  \-> moveq #24,d0
   106f6:	|      add.l 16(sp),d0
   106fa:	|      move.l d0,-(sp)
   106fc:	|      jsr 142d8 <trimStack>
   10702:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10704:	|      movea.l 16(sp),a0
   10708:	|      move.l 24(a0),d0
   1070c:	|      move.l d0,-(sp)
   1070e:	|      pea 7 <_start+0x7>
   10712:	|      move.l sp,d0
   10714:	|      addq.l #8,d0
   10716:	|      move.l d0,-(sp)
   10718:	|      jsr 13954 <getValueType>
   1071e:	|      lea 12(sp),sp
   10722:	|      tst.w d0
   10724:	|  /-- bne.s 1072a <builtIn_animate+0x54>
   10726:	|  |   moveq #1,d0
   10728:	+--|-- bra.s 10772 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1072a:	|  \-> moveq #24,d0
   1072c:	|      add.l 16(sp),d0
   10730:	|      move.l d0,-(sp)
   10732:	|      jsr 142d8 <trimStack>
   10738:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1073a:	|      move.l (sp),d0
   1073c:	|      move.l 4(sp),-(sp)
   10740:	|      move.l d0,-(sp)
   10742:	|      jsr 86d6 <animatePerson>
   10748:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1074a:	|      move.l 4(sp),-(sp)
   1074e:	|      jsr affa <timeForAnim>
   10754:	|      addq.l #4,sp
   10756:	|      move.l d0,d1
   10758:	|      moveq #28,d0
   1075a:	|      add.l 16(sp),d0
   1075e:	|      move.l d1,-(sp)
   10760:	|      pea 1 <_start+0x1>
   10764:	|      move.l d0,-(sp)
   10766:	|      jsr 14246 <setVariable>
   1076c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10770:	|      moveq #2,d0
}
   10772:	\----> addq.l #8,sp
   10774:	       rts

00010776 <builtIn_setCostume>:

builtIn(setCostume)
{
   10776:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10778:	       movea.l 16(sp),a0
   1077c:	       move.l 24(a0),d0
   10780:	       move.l d0,-(sp)
   10782:	       jsr 13600 <getCostumeFromVar>
   10788:	       addq.l #4,sp
   1078a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1078e:	   /-- bne.s 10794 <builtIn_setCostume+0x1e>
   10790:	   |   moveq #1,d0
   10792:	/--|-- bra.s 107ec <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10794:	|  \-> moveq #24,d0
   10796:	|      add.l 16(sp),d0
   1079a:	|      move.l d0,-(sp)
   1079c:	|      jsr 142d8 <trimStack>
   107a2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a4:	|      movea.l 16(sp),a0
   107a8:	|      move.l 24(a0),d0
   107ac:	|      move.l d0,-(sp)
   107ae:	|      pea 7 <_start+0x7>
   107b2:	|      move.l sp,d0
   107b4:	|      addq.l #8,d0
   107b6:	|      move.l d0,-(sp)
   107b8:	|      jsr 13954 <getValueType>
   107be:	|      lea 12(sp),sp
   107c2:	|      tst.w d0
   107c4:	|  /-- bne.s 107ca <builtIn_setCostume+0x54>
   107c6:	|  |   moveq #1,d0
   107c8:	+--|-- bra.s 107ec <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   107ca:	|  \-> moveq #24,d0
   107cc:	|      add.l 16(sp),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      jsr 142d8 <trimStack>
   107d8:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   107da:	|      move.l (sp),d0
   107dc:	|      move.l 4(sp),-(sp)
   107e0:	|      move.l d0,-(sp)
   107e2:	|      jsr 8720 <animatePersonUsingPersona>
   107e8:	|      addq.l #8,sp
	return BR_CONTINUE;
   107ea:	|      moveq #2,d0
}
   107ec:	\----> addq.l #8,sp
   107ee:	       rts

000107f0 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   107f0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107f2:	       movea.l 16(sp),a0
   107f6:	       move.l 24(a0),d0
   107fa:	       move.l d0,-(sp)
   107fc:	       pea 1 <_start+0x1>
   10800:	       move.l sp,d0
   10802:	       addq.l #8,d0
   10804:	       move.l d0,-(sp)
   10806:	       jsr 13954 <getValueType>
   1080c:	       lea 12(sp),sp
   10810:	       tst.w d0
   10812:	   /-- bne.s 10818 <builtIn_floatCharacter+0x28>
   10814:	   |   moveq #1,d0
   10816:	/--|-- bra.s 1088c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   10818:	|  \-> moveq #24,d0
   1081a:	|      add.l 16(sp),d0
   1081e:	|      move.l d0,-(sp)
   10820:	|      jsr 142d8 <trimStack>
   10826:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10828:	|      movea.l 16(sp),a0
   1082c:	|      move.l 24(a0),d0
   10830:	|      move.l d0,-(sp)
   10832:	|      pea 7 <_start+0x7>
   10836:	|      moveq #12,d0
   10838:	|      add.l sp,d0
   1083a:	|      move.l d0,-(sp)
   1083c:	|      jsr 13954 <getValueType>
   10842:	|      lea 12(sp),sp
   10846:	|      tst.w d0
   10848:	|  /-- bne.s 1084e <builtIn_floatCharacter+0x5e>
   1084a:	|  |   moveq #1,d0
   1084c:	+--|-- bra.s 1088c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1084e:	|  \-> moveq #24,d0
   10850:	|      add.l 16(sp),d0
   10854:	|      move.l d0,-(sp)
   10856:	|      jsr 142d8 <trimStack>
   1085c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1085e:	|      move.l 4(sp),d1
   10862:	|      move.l (sp),d0
   10864:	|      move.l d1,-(sp)
   10866:	|      move.l d0,-(sp)
   10868:	|      jsr 9894 <floatCharacter>
   1086e:	|      addq.l #8,sp
   10870:	|      movea.w d0,a0
   10872:	|      moveq #28,d0
   10874:	|      add.l 16(sp),d0
   10878:	|      move.l a0,-(sp)
   1087a:	|      pea 1 <_start+0x1>
   1087e:	|      move.l d0,-(sp)
   10880:	|      jsr 14246 <setVariable>
   10886:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1088a:	|      moveq #2,d0
}
   1088c:	\----> addq.l #8,sp
   1088e:	       rts

00010890 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   10890:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10892:	       movea.l 16(sp),a0
   10896:	       move.l 24(a0),d0
   1089a:	       move.l d0,-(sp)
   1089c:	       pea 1 <_start+0x1>
   108a0:	       move.l sp,d0
   108a2:	       addq.l #8,d0
   108a4:	       move.l d0,-(sp)
   108a6:	       jsr 13954 <getValueType>
   108ac:	       lea 12(sp),sp
   108b0:	       tst.w d0
   108b2:	   /-- bne.s 108b8 <builtIn_setCharacterWalkSpeed+0x28>
   108b4:	   |   moveq #1,d0
   108b6:	/--|-- bra.s 1092c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   108b8:	|  \-> moveq #24,d0
   108ba:	|      add.l 16(sp),d0
   108be:	|      move.l d0,-(sp)
   108c0:	|      jsr 142d8 <trimStack>
   108c6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   108c8:	|      movea.l 16(sp),a0
   108cc:	|      move.l 24(a0),d0
   108d0:	|      move.l d0,-(sp)
   108d2:	|      pea 7 <_start+0x7>
   108d6:	|      moveq #12,d0
   108d8:	|      add.l sp,d0
   108da:	|      move.l d0,-(sp)
   108dc:	|      jsr 13954 <getValueType>
   108e2:	|      lea 12(sp),sp
   108e6:	|      tst.w d0
   108e8:	|  /-- bne.s 108ee <builtIn_setCharacterWalkSpeed+0x5e>
   108ea:	|  |   moveq #1,d0
   108ec:	+--|-- bra.s 1092c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   108ee:	|  \-> moveq #24,d0
   108f0:	|      add.l 16(sp),d0
   108f4:	|      move.l d0,-(sp)
   108f6:	|      jsr 142d8 <trimStack>
   108fc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   108fe:	|      move.l 4(sp),d1
   10902:	|      move.l (sp),d0
   10904:	|      move.l d1,-(sp)
   10906:	|      move.l d0,-(sp)
   10908:	|      jsr ae0e <setCharacterWalkSpeed>
   1090e:	|      addq.l #8,sp
   10910:	|      movea.w d0,a0
   10912:	|      moveq #28,d0
   10914:	|      add.l 16(sp),d0
   10918:	|      move.l a0,-(sp)
   1091a:	|      pea 1 <_start+0x1>
   1091e:	|      move.l d0,-(sp)
   10920:	|      jsr 14246 <setVariable>
   10926:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1092a:	|      moveq #2,d0
}
   1092c:	\----> addq.l #8,sp
   1092e:	       rts

00010930 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   10930:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10932:	       movea.l 16(sp),a0
   10936:	       move.l 24(a0),d0
   1093a:	       move.l d0,-(sp)
   1093c:	       pea 1 <_start+0x1>
   10940:	       move.l sp,d0
   10942:	       addq.l #8,d0
   10944:	       move.l d0,-(sp)
   10946:	       jsr 13954 <getValueType>
   1094c:	       lea 12(sp),sp
   10950:	       tst.w d0
   10952:	   /-- bne.s 10958 <builtIn_turnCharacter+0x28>
   10954:	   |   moveq #1,d0
   10956:	/--|-- bra.s 109cc <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10958:	|  \-> moveq #24,d0
   1095a:	|      add.l 16(sp),d0
   1095e:	|      move.l d0,-(sp)
   10960:	|      jsr 142d8 <trimStack>
   10966:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10968:	|      movea.l 16(sp),a0
   1096c:	|      move.l 24(a0),d0
   10970:	|      move.l d0,-(sp)
   10972:	|      pea 7 <_start+0x7>
   10976:	|      moveq #12,d0
   10978:	|      add.l sp,d0
   1097a:	|      move.l d0,-(sp)
   1097c:	|      jsr 13954 <getValueType>
   10982:	|      lea 12(sp),sp
   10986:	|      tst.w d0
   10988:	|  /-- bne.s 1098e <builtIn_turnCharacter+0x5e>
   1098a:	|  |   moveq #1,d0
   1098c:	+--|-- bra.s 109cc <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1098e:	|  \-> moveq #24,d0
   10990:	|      add.l 16(sp),d0
   10994:	|      move.l d0,-(sp)
   10996:	|      jsr 142d8 <trimStack>
   1099c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1099e:	|      move.l (sp),d1
   109a0:	|      move.l 4(sp),d0
   109a4:	|      move.l d1,-(sp)
   109a6:	|      move.l d0,-(sp)
   109a8:	|      jsr b0b2 <turnPersonToFace>
   109ae:	|      addq.l #8,sp
   109b0:	|      movea.w d0,a0
   109b2:	|      moveq #28,d0
   109b4:	|      add.l 16(sp),d0
   109b8:	|      move.l a0,-(sp)
   109ba:	|      pea 1 <_start+0x1>
   109be:	|      move.l d0,-(sp)
   109c0:	|      jsr 14246 <setVariable>
   109c6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   109ca:	|      moveq #2,d0
}
   109cc:	\----> addq.l #8,sp
   109ce:	       rts

000109d0 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   109d0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109d2:	       movea.l 16(sp),a0
   109d6:	       move.l 24(a0),d0
   109da:	       move.l d0,-(sp)
   109dc:	       pea 1 <_start+0x1>
   109e0:	       move.l sp,d0
   109e2:	       addq.l #8,d0
   109e4:	       move.l d0,-(sp)
   109e6:	       jsr 13954 <getValueType>
   109ec:	       lea 12(sp),sp
   109f0:	       tst.w d0
   109f2:	   /-- bne.s 109f8 <builtIn_setCharacterExtra+0x28>
   109f4:	   |   moveq #1,d0
   109f6:	/--|-- bra.s 10a6c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   109f8:	|  \-> moveq #24,d0
   109fa:	|      add.l 16(sp),d0
   109fe:	|      move.l d0,-(sp)
   10a00:	|      jsr 142d8 <trimStack>
   10a06:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a08:	|      movea.l 16(sp),a0
   10a0c:	|      move.l 24(a0),d0
   10a10:	|      move.l d0,-(sp)
   10a12:	|      pea 7 <_start+0x7>
   10a16:	|      moveq #12,d0
   10a18:	|      add.l sp,d0
   10a1a:	|      move.l d0,-(sp)
   10a1c:	|      jsr 13954 <getValueType>
   10a22:	|      lea 12(sp),sp
   10a26:	|      tst.w d0
   10a28:	|  /-- bne.s 10a2e <builtIn_setCharacterExtra+0x5e>
   10a2a:	|  |   moveq #1,d0
   10a2c:	+--|-- bra.s 10a6c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10a2e:	|  \-> moveq #24,d0
   10a30:	|      add.l 16(sp),d0
   10a34:	|      move.l d0,-(sp)
   10a36:	|      jsr 142d8 <trimStack>
   10a3c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   10a3e:	|      move.l (sp),d1
   10a40:	|      move.l 4(sp),d0
   10a44:	|      move.l d1,-(sp)
   10a46:	|      move.l d0,-(sp)
   10a48:	|      jsr ae3c <setPersonExtra>
   10a4e:	|      addq.l #8,sp
   10a50:	|      movea.w d0,a0
   10a52:	|      moveq #28,d0
   10a54:	|      add.l 16(sp),d0
   10a58:	|      move.l a0,-(sp)
   10a5a:	|      pea 1 <_start+0x1>
   10a5e:	|      move.l d0,-(sp)
   10a60:	|      jsr 14246 <setVariable>
   10a66:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10a6a:	|      moveq #2,d0
}
   10a6c:	\----> addq.l #8,sp
   10a6e:	       rts

00010a70 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   10a70:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a72:	       movea.l 12(sp),a0
   10a76:	       move.l 24(a0),d0
   10a7a:	       move.l d0,-(sp)
   10a7c:	       pea 7 <_start+0x7>
   10a80:	       move.l sp,d0
   10a82:	       addq.l #8,d0
   10a84:	       move.l d0,-(sp)
   10a86:	       jsr 13954 <getValueType>
   10a8c:	       lea 12(sp),sp
   10a90:	       tst.w d0
   10a92:	   /-- bne.s 10a98 <builtIn_removeCharacter+0x28>
   10a94:	   |   moveq #1,d0
   10a96:	/--|-- bra.s 10ab6 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   10a98:	|  \-> moveq #24,d0
   10a9a:	|      add.l 12(sp),d0
   10a9e:	|      move.l d0,-(sp)
   10aa0:	|      jsr 142d8 <trimStack>
   10aa6:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   10aa8:	|      move.l (sp),d0
   10aaa:	|      move.l d0,-(sp)
   10aac:	|      jsr a03c <removeOneCharacter>
   10ab2:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ab4:	|      moveq #2,d0
}
   10ab6:	\----> addq.l #4,sp
   10ab8:	       rts

00010aba <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   10aba:	                lea -28(sp),sp
   10abe:	                move.l d2,-(sp)
   10ac0:	                move.l 44(sp),d1
   10ac4:	                move.l 48(sp),d0
   10ac8:	                move.w d1,d1
   10aca:	                move.w d1,6(sp)
   10ace:	                move.w d0,d0
   10ad0:	                move.w d0,4(sp)
	switch (numParams) {
   10ad4:	                moveq #2,d0
   10ad6:	                cmp.l 36(sp),d0
   10ada:	      /-------- beq.w 10c1c <moveChr+0x162>
   10ade:	      |         moveq #3,d0
   10ae0:	      |         cmp.l 36(sp),d0
   10ae4:	/-----|-------- bne.w 10d50 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ae8:	|     |         movea.l 40(sp),a0
   10aec:	|     |         move.l 24(a0),d0
   10af0:	|     |         move.l d0,-(sp)
   10af2:	|     |         pea 1 <_start+0x1>
   10af6:	|     |         lea 20(sp),a0
   10afa:	|     |         move.l a0,-(sp)
   10afc:	|     |         jsr 13954 <getValueType>
   10b02:	|     |         lea 12(sp),sp
   10b06:	|     |         tst.w d0
   10b08:	|     |     /-- bne.s 10b10 <moveChr+0x56>
   10b0a:	|     |     |   moveq #1,d0
   10b0c:	|  /--|-----|-- bra.w 10d60 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10b10:	|  |  |     \-> moveq #24,d0
   10b12:	|  |  |         add.l 40(sp),d0
   10b16:	|  |  |         move.l d0,-(sp)
   10b18:	|  |  |         jsr 142d8 <trimStack>
   10b1e:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b20:	|  |  |         movea.l 40(sp),a0
   10b24:	|  |  |         move.l 24(a0),d0
   10b28:	|  |  |         move.l d0,-(sp)
   10b2a:	|  |  |         pea 1 <_start+0x1>
   10b2e:	|  |  |         lea 24(sp),a0
   10b32:	|  |  |         move.l a0,-(sp)
   10b34:	|  |  |         jsr 13954 <getValueType>
   10b3a:	|  |  |         lea 12(sp),sp
   10b3e:	|  |  |         tst.w d0
   10b40:	|  |  |     /-- bne.s 10b48 <moveChr+0x8e>
   10b42:	|  |  |     |   moveq #1,d0
   10b44:	|  +--|-----|-- bra.w 10d60 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10b48:	|  |  |     \-> moveq #24,d0
   10b4a:	|  |  |         add.l 40(sp),d0
   10b4e:	|  |  |         move.l d0,-(sp)
   10b50:	|  |  |         jsr 142d8 <trimStack>
   10b56:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b58:	|  |  |         movea.l 40(sp),a0
   10b5c:	|  |  |         move.l 24(a0),d0
   10b60:	|  |  |         move.l d0,-(sp)
   10b62:	|  |  |         pea 7 <_start+0x7>
   10b66:	|  |  |         lea 16(sp),a0
   10b6a:	|  |  |         move.l a0,-(sp)
   10b6c:	|  |  |         jsr 13954 <getValueType>
   10b72:	|  |  |         lea 12(sp),sp
   10b76:	|  |  |         tst.w d0
   10b78:	|  |  |     /-- bne.s 10b80 <moveChr+0xc6>
   10b7a:	|  |  |     |   moveq #1,d0
   10b7c:	|  +--|-----|-- bra.w 10d60 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10b80:	|  |  |     \-> moveq #24,d0
   10b82:	|  |  |         add.l 40(sp),d0
   10b86:	|  |  |         move.l d0,-(sp)
   10b88:	|  |  |         jsr 142d8 <trimStack>
   10b8e:	|  |  |         addq.l #4,sp

			if (force) {
   10b90:	|  |  |         tst.w 6(sp)
   10b94:	|  |  |     /-- beq.s 10bc4 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10b96:	|  |  |     |   movea.l 8(sp),a0
   10b9a:	|  |  |     |   move.l 12(sp),d1
   10b9e:	|  |  |     |   move.l 16(sp),d0
   10ba2:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5b1a>
   10ba6:	|  |  |     |   move.l 44(sp),-(sp)
   10baa:	|  |  |     |   move.l a0,-(sp)
   10bac:	|  |  |     |   move.l d1,-(sp)
   10bae:	|  |  |     |   move.l d0,-(sp)
   10bb0:	|  |  |     |   jsr 98b8 <forceWalkingPerson>
   10bb6:	|  |  |     |   lea 20(sp),sp
   10bba:	|  |  |     |   tst.w d0
   10bbc:	|  |  |  /--|-- beq.s 10c16 <moveChr+0x15c>
   10bbe:	|  |  |  |  |   moveq #3,d0
   10bc0:	|  +--|--|--|-- bra.w 10d60 <moveChr+0x2a6>
			} else if (immediate) {
   10bc4:	|  |  |  |  \-> tst.w 4(sp)
   10bc8:	|  |  |  |  /-- beq.s 10be8 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   10bca:	|  |  |  |  |   movea.l 8(sp),a0
   10bce:	|  |  |  |  |   move.l 12(sp),d1
   10bd2:	|  |  |  |  |   move.l 16(sp),d0
   10bd6:	|  |  |  |  |   move.l a0,-(sp)
   10bd8:	|  |  |  |  |   move.l d1,-(sp)
   10bda:	|  |  |  |  |   move.l d0,-(sp)
   10bdc:	|  |  |  |  |   jsr 9bc0 <jumpPerson>
   10be2:	|  |  |  |  |   lea 12(sp),sp
   10be6:	|  |  |  +--|-- bra.s 10c16 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10be8:	|  |  |  |  \-> movea.l 8(sp),a0
   10bec:	|  |  |  |      move.l 12(sp),d1
   10bf0:	|  |  |  |      move.l 16(sp),d0
   10bf4:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5b1a>
   10bf8:	|  |  |  |      move.l 44(sp),-(sp)
   10bfc:	|  |  |  |      move.l a0,-(sp)
   10bfe:	|  |  |  |      move.l d1,-(sp)
   10c00:	|  |  |  |      move.l d0,-(sp)
   10c02:	|  |  |  |      jsr 9d90 <makeWalkingPerson>
   10c08:	|  |  |  |      lea 20(sp),sp
   10c0c:	|  |  |  |      tst.w d0
   10c0e:	|  |  |  +----- beq.s 10c16 <moveChr+0x15c>
   10c10:	|  |  |  |      moveq #3,d0
   10c12:	|  +--|--|----- bra.w 10d60 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10c16:	|  |  |  \----> moveq #2,d0
   10c18:	|  +--|-------- bra.w 10d60 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c1c:	|  |  \-------> movea.l 40(sp),a0
   10c20:	|  |            move.l 24(a0),d0
   10c24:	|  |            move.l d0,-(sp)
   10c26:	|  |            pea 7 <_start+0x7>
   10c2a:	|  |            moveq #32,d0
   10c2c:	|  |            add.l sp,d0
   10c2e:	|  |            move.l d0,-(sp)
   10c30:	|  |            jsr 13954 <getValueType>
   10c36:	|  |            lea 12(sp),sp
   10c3a:	|  |            tst.w d0
   10c3c:	|  |        /-- bne.s 10c44 <moveChr+0x18a>
   10c3e:	|  |        |   moveq #1,d0
   10c40:	|  +--------|-- bra.w 10d60 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10c44:	|  |        \-> moveq #24,d0
   10c46:	|  |            add.l 40(sp),d0
   10c4a:	|  |            move.l d0,-(sp)
   10c4c:	|  |            jsr 142d8 <trimStack>
   10c52:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c54:	|  |            movea.l 40(sp),a0
   10c58:	|  |            move.l 24(a0),d0
   10c5c:	|  |            move.l d0,-(sp)
   10c5e:	|  |            pea 7 <_start+0x7>
   10c62:	|  |            lea 28(sp),a0
   10c66:	|  |            move.l a0,-(sp)
   10c68:	|  |            jsr 13954 <getValueType>
   10c6e:	|  |            lea 12(sp),sp
   10c72:	|  |            tst.w d0
   10c74:	|  |        /-- bne.s 10c7c <moveChr+0x1c2>
   10c76:	|  |        |   moveq #1,d0
   10c78:	|  +--------|-- bra.w 10d60 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10c7c:	|  |        \-> moveq #24,d0
   10c7e:	|  |            add.l 40(sp),d0
   10c82:	|  |            move.l d0,-(sp)
   10c84:	|  |            jsr 142d8 <trimStack>
   10c8a:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   10c8c:	|  |            move.l 24(sp),d0
   10c90:	|  |            move.l d0,-(sp)
   10c92:	|  |            jsr 14a96 <getRegionForObject>
   10c98:	|  |            addq.l #4,sp
   10c9a:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10c9e:	|  |        /-- bne.s 10ca6 <moveChr+0x1ec>
   10ca0:	|  |        |   moveq #2,d0
   10ca2:	|  +--------|-- bra.w 10d60 <moveChr+0x2a6>

			if (force)
   10ca6:	|  |        \-> tst.w 6(sp)
   10caa:	|  |        /-- beq.s 10ce6 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10cac:	|  |        |   movea.l 28(sp),a0
   10cb0:	|  |        |   move.l 24(a0),d2
   10cb4:	|  |        |   movea.l 20(sp),a1
   10cb8:	|  |        |   movea.l 28(sp),a0
   10cbc:	|  |        |   move.l 20(a0),d1
   10cc0:	|  |        |   movea.l 28(sp),a0
   10cc4:	|  |        |   move.l 16(a0),d0
   10cc8:	|  |        |   move.l d2,-(sp)
   10cca:	|  |        |   move.l 44(sp),-(sp)
   10cce:	|  |        |   move.l a1,-(sp)
   10cd0:	|  |        |   move.l d1,-(sp)
   10cd2:	|  |        |   move.l d0,-(sp)
   10cd4:	|  |        |   jsr 98b8 <forceWalkingPerson>
   10cda:	|  |        |   lea 20(sp),sp
   10cde:	|  |        |   tst.w d0
   10ce0:	|  |     /--|-- beq.s 10d4c <moveChr+0x292>
   10ce2:	|  |     |  |   moveq #3,d0
   10ce4:	|  +-----|--|-- bra.s 10d60 <moveChr+0x2a6>
			}
			else if (immediate)
   10ce6:	|  |     |  \-> tst.w 4(sp)
   10cea:	|  |     |  /-- beq.s 10d12 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   10cec:	|  |     |  |   movea.l 20(sp),a1
   10cf0:	|  |     |  |   movea.l 28(sp),a0
   10cf4:	|  |     |  |   move.l 20(a0),d1
   10cf8:	|  |     |  |   movea.l 28(sp),a0
   10cfc:	|  |     |  |   move.l 16(a0),d0
   10d00:	|  |     |  |   move.l a1,-(sp)
   10d02:	|  |     |  |   move.l d1,-(sp)
   10d04:	|  |     |  |   move.l d0,-(sp)
   10d06:	|  |     |  |   jsr 9bc0 <jumpPerson>
   10d0c:	|  |     |  |   lea 12(sp),sp
   10d10:	|  |     +--|-- bra.s 10d4c <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10d12:	|  |     |  \-> movea.l 28(sp),a0
   10d16:	|  |     |      move.l 24(a0),d2
   10d1a:	|  |     |      movea.l 20(sp),a1
   10d1e:	|  |     |      movea.l 28(sp),a0
   10d22:	|  |     |      move.l 20(a0),d1
   10d26:	|  |     |      movea.l 28(sp),a0
   10d2a:	|  |     |      move.l 16(a0),d0
   10d2e:	|  |     |      move.l d2,-(sp)
   10d30:	|  |     |      move.l 44(sp),-(sp)
   10d34:	|  |     |      move.l a1,-(sp)
   10d36:	|  |     |      move.l d1,-(sp)
   10d38:	|  |     |      move.l d0,-(sp)
   10d3a:	|  |     |      jsr 9d90 <makeWalkingPerson>
   10d40:	|  |     |      lea 20(sp),sp
   10d44:	|  |     |      tst.w d0
   10d46:	|  |     +----- beq.s 10d4c <moveChr+0x292>
   10d48:	|  |     |      moveq #3,d0
   10d4a:	|  +-----|----- bra.s 10d60 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10d4c:	|  |     \----> moveq #2,d0
   10d4e:	|  +----------- bra.s 10d60 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   10d50:	\--|----------> pea 18a28 <PutChar+0x1e64>
   10d56:	   |            jsr 16274 <KPrintF>
   10d5c:	   |            addq.l #4,sp
			return BR_ERROR;
   10d5e:	   |            moveq #1,d0
	}
}
   10d60:	   \----------> move.l (sp)+,d2
   10d62:	                lea 28(sp),sp
   10d66:	                rts

00010d68 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   10d68:	clr.l -(sp)
   10d6a:	clr.l -(sp)
   10d6c:	move.l 16(sp),-(sp)
   10d70:	move.l 16(sp),-(sp)
   10d74:	jsr 10aba <moveChr>
   10d7a:	lea 16(sp),sp
}
   10d7e:	rts

00010d80 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   10d80:	clr.l -(sp)
   10d82:	pea 1 <_start+0x1>
   10d86:	move.l 16(sp),-(sp)
   10d8a:	move.l 16(sp),-(sp)
   10d8e:	jsr 10aba <moveChr>
   10d94:	lea 16(sp),sp
}
   10d98:	rts

00010d9a <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   10d9a:	pea 1 <_start+0x1>
   10d9e:	clr.l -(sp)
   10da0:	move.l 16(sp),-(sp)
   10da4:	move.l 16(sp),-(sp)
   10da8:	jsr 10aba <moveChr>
   10dae:	lea 16(sp),sp
}
   10db2:	rts

00010db4 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10db4:	jsr 693a <clearStatusBar>
	return BR_CONTINUE;
   10dba:	moveq #2,d0
}
   10dbc:	rts

00010dbe <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10dbe:	jsr 69e2 <killLastStatus>
	return BR_CONTINUE;
   10dc4:	moveq #2,d0
}
   10dc6:	rts

00010dc8 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10dc8:	jsr 68d0 <addStatusBar>
	return BR_CONTINUE;
   10dce:	moveq #2,d0
}
   10dd0:	rts

00010dd2 <builtIn_statusText>:

builtIn(statusText)
{
   10dd2:	       subq.l #8,sp
   10dd4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10dd6:	       movea.l 20(sp),a0
   10dda:	       move.l 24(a0),d0
   10dde:	       move.l d0,-(sp)
   10de0:	       jsr 13f2a <getTextFromAnyVar>
   10de6:	       addq.l #4,sp
   10de8:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10dec:	   /-- bne.s 10df2 <builtIn_statusText+0x20>
   10dee:	   |   moveq #1,d0
   10df0:	/--|-- bra.s 10e26 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10df2:	|  \-> moveq #24,d0
   10df4:	|      add.l 20(sp),d0
   10df8:	|      move.l d0,-(sp)
   10dfa:	|      jsr 142d8 <trimStack>
   10e00:	|      addq.l #4,sp
	setStatusBar(newText);
   10e02:	|      move.l 8(sp),-(sp)
   10e06:	|      jsr 6c62 <setStatusBar>
   10e0c:	|      addq.l #4,sp
	FreeVec(newText);
   10e0e:	|      move.l 8(sp),4(sp)
   10e14:	|      move.l 1b848 <SysBase>,d0
   10e1a:	|      movea.l d0,a6
   10e1c:	|      movea.l 4(sp),a1
   10e20:	|      jsr -690(a6)
	return BR_CONTINUE;
   10e24:	|      moveq #2,d0
}
   10e26:	\----> movea.l (sp)+,a6
   10e28:	       addq.l #8,sp
   10e2a:	       rts

00010e2c <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10e2c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e2e:	       movea.l 12(sp),a0
   10e32:	       move.l 24(a0),d0
   10e36:	       move.l d0,-(sp)
   10e38:	       pea 1 <_start+0x1>
   10e3c:	       move.l sp,d0
   10e3e:	       addq.l #8,d0
   10e40:	       move.l d0,-(sp)
   10e42:	       jsr 13954 <getValueType>
   10e48:	       lea 12(sp),sp
   10e4c:	       tst.w d0
   10e4e:	   /-- bne.s 10e54 <builtIn_lightStatus+0x28>
   10e50:	   |   moveq #1,d0
   10e52:	/--|-- bra.s 10e72 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10e54:	|  \-> moveq #24,d0
   10e56:	|      add.l 12(sp),d0
   10e5a:	|      move.l d0,-(sp)
   10e5c:	|      jsr 142d8 <trimStack>
   10e62:	|      addq.l #4,sp
	setLitStatus (val);
   10e64:	|      move.l (sp),d0
   10e66:	|      move.l d0,-(sp)
   10e68:	|      jsr 6c52 <setLitStatus>
   10e6e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10e70:	|      moveq #2,d0
}
   10e72:	\----> addq.l #4,sp
   10e74:	       rts

00010e76 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10e76:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e78:	       movea.l 16(sp),a0
   10e7c:	       move.l 24(a0),d0
   10e80:	       move.l d0,-(sp)
   10e82:	       pea 1 <_start+0x1>
   10e86:	       move.l sp,d0
   10e88:	       addq.l #8,d0
   10e8a:	       move.l d0,-(sp)
   10e8c:	       jsr 13954 <getValueType>
   10e92:	       lea 12(sp),sp
   10e96:	       tst.w d0
   10e98:	   /-- bne.s 10e9e <builtIn_positionStatus+0x28>
   10e9a:	   |   moveq #1,d0
   10e9c:	/--|-- bra.s 10ef8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10e9e:	|  \-> moveq #24,d0
   10ea0:	|      add.l 16(sp),d0
   10ea4:	|      move.l d0,-(sp)
   10ea6:	|      jsr 142d8 <trimStack>
   10eac:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10eae:	|      movea.l 16(sp),a0
   10eb2:	|      move.l 24(a0),d0
   10eb6:	|      move.l d0,-(sp)
   10eb8:	|      pea 1 <_start+0x1>
   10ebc:	|      moveq #12,d0
   10ebe:	|      add.l sp,d0
   10ec0:	|      move.l d0,-(sp)
   10ec2:	|      jsr 13954 <getValueType>
   10ec8:	|      lea 12(sp),sp
   10ecc:	|      tst.w d0
   10ece:	|  /-- bne.s 10ed4 <builtIn_positionStatus+0x5e>
   10ed0:	|  |   moveq #1,d0
   10ed2:	+--|-- bra.s 10ef8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10ed4:	|  \-> moveq #24,d0
   10ed6:	|      add.l 16(sp),d0
   10eda:	|      move.l d0,-(sp)
   10edc:	|      jsr 142d8 <trimStack>
   10ee2:	|      addq.l #4,sp
	positionStatus (x, y);
   10ee4:	|      move.l (sp),d1
   10ee6:	|      move.l 4(sp),d0
   10eea:	|      move.l d1,-(sp)
   10eec:	|      move.l d0,-(sp)
   10eee:	|      jsr 6a44 <positionStatus>
   10ef4:	|      addq.l #8,sp
	return BR_CONTINUE;
   10ef6:	|      moveq #2,d0
}
   10ef8:	\----> addq.l #8,sp
   10efa:	       rts

00010efc <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10efc:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10efe:	       movea.l 12(sp),a0
   10f02:	       move.l 24(a0),d0
   10f06:	       move.l d0,-(sp)
   10f08:	       pea 1 <_start+0x1>
   10f0c:	       move.l sp,d0
   10f0e:	       addq.l #8,d0
   10f10:	       move.l d0,-(sp)
   10f12:	       jsr 13954 <getValueType>
   10f18:	       lea 12(sp),sp
   10f1c:	       tst.w d0
   10f1e:	   /-- bne.s 10f24 <builtIn_alignStatus+0x28>
   10f20:	   |   moveq #1,d0
   10f22:	/--|-- bra.s 10f44 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10f24:	|  \-> moveq #24,d0
   10f26:	|      add.l 12(sp),d0
   10f2a:	|      move.l d0,-(sp)
   10f2c:	|      jsr 142d8 <trimStack>
   10f32:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10f34:	|      move.l (sp),d0
   10f36:	|      movea.l 1b1d0 <nowStatus>,a0
   10f3c:	|      move.l d0,d0
   10f3e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10f42:	|      moveq #2,d0
}
   10f44:	\----> addq.l #4,sp
   10f46:	       rts

00010f48 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10f48:	             tst.l 4(sp)
   10f4c:	      /----- beq.s 10f58 <getFuncNumForCallback+0x10>
   10f4e:	      |      moveq #1,d0
   10f50:	      |      cmp.l 4(sp),d0
   10f54:	      |  /-- beq.s 10f5e <getFuncNumForCallback+0x16>
   10f56:	   /--|--|-- bra.s 10f94 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10f58:	   |  \--|-> clr.l 12(sp)
			break;
   10f5c:	/--|-----|-- bra.s 10fa6 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10f5e:	|  |     \-> movea.l 8(sp),a0
   10f62:	|  |         move.l 24(a0),d0
   10f66:	|  |         move.l d0,-(sp)
   10f68:	|  |         pea 2 <_start+0x2>
   10f6c:	|  |         move.l 20(sp),-(sp)
   10f70:	|  |         jsr 13954 <getValueType>
   10f76:	|  |         lea 12(sp),sp
   10f7a:	|  |         tst.w d0
   10f7c:	|  |     /-- bne.s 10f82 <getFuncNumForCallback+0x3a>
   10f7e:	|  |     |   clr.w d0
   10f80:	|  |  /--|-- bra.s 10fa8 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10f82:	|  |  |  \-> moveq #24,d0
   10f84:	|  |  |      add.l 8(sp),d0
   10f88:	|  |  |      move.l d0,-(sp)
   10f8a:	|  |  |      jsr 142d8 <trimStack>
   10f90:	|  |  |      addq.l #4,sp
			break;
   10f92:	+--|--|----- bra.s 10fa6 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10f94:	|  \--|----> pea 18a5e <PutChar+0x1e9a>
   10f9a:	|     |      jsr 16274 <KPrintF>
   10fa0:	|     |      addq.l #4,sp
			return FALSE;
   10fa2:	|     |      clr.w d0
   10fa4:	|     +----- bra.s 10fa8 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10fa6:	\-----|----> moveq #1,d0
}
   10fa8:	      \----> rts

00010faa <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10faa:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10fac:	       move.l sp,d0
   10fae:	       move.l d0,-(sp)
   10fb0:	       move.l 16(sp),-(sp)
   10fb4:	       move.l 16(sp),-(sp)
   10fb8:	       jsr 10f48 <getFuncNumForCallback>
   10fbe:	       lea 12(sp),sp
   10fc2:	       tst.w d0
   10fc4:	/----- beq.s 10fd4 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10fc6:	|      movea.l 1b1c2 <currentEvents>,a0
   10fcc:	|      move.l (sp),d0
   10fce:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10fd0:	|      moveq #2,d0
   10fd2:	|  /-- bra.s 10fd6 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10fd4:	\--|-> moveq #1,d0
}
   10fd6:	   \-> addq.l #4,sp
   10fd8:	       rts

00010fda <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10fda:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10fdc:	       move.l sp,d0
   10fde:	       move.l d0,-(sp)
   10fe0:	       move.l 16(sp),-(sp)
   10fe4:	       move.l 16(sp),-(sp)
   10fe8:	       jsr 10f48 <getFuncNumForCallback>
   10fee:	       lea 12(sp),sp
   10ff2:	       tst.w d0
   10ff4:	/----- beq.s 11006 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10ff6:	|      movea.l 1b1c2 <currentEvents>,a0
   10ffc:	|      move.l (sp),d0
   10ffe:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11002:	|      moveq #2,d0
   11004:	|  /-- bra.s 11008 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11006:	\--|-> moveq #1,d0
}
   11008:	   \-> addq.l #4,sp
   1100a:	       rts

0001100c <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   1100c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1100e:	       move.l sp,d0
   11010:	       move.l d0,-(sp)
   11012:	       move.l 16(sp),-(sp)
   11016:	       move.l 16(sp),-(sp)
   1101a:	       jsr 10f48 <getFuncNumForCallback>
   11020:	       lea 12(sp),sp
   11024:	       tst.w d0
   11026:	/----- beq.s 11038 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11028:	|      movea.l 1b1c2 <currentEvents>,a0
   1102e:	|      move.l (sp),d0
   11030:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11034:	|      moveq #2,d0
   11036:	|  /-- bra.s 1103a <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11038:	\--|-> moveq #1,d0
}
   1103a:	   \-> addq.l #4,sp
   1103c:	       rts

0001103e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   1103e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11040:	       move.l sp,d0
   11042:	       move.l d0,-(sp)
   11044:	       move.l 16(sp),-(sp)
   11048:	       move.l 16(sp),-(sp)
   1104c:	       jsr 10f48 <getFuncNumForCallback>
   11052:	       lea 12(sp),sp
   11056:	       tst.w d0
   11058:	/----- beq.s 1106a <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1105a:	|      movea.l 1b1c2 <currentEvents>,a0
   11060:	|      move.l (sp),d0
   11062:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11066:	|      moveq #2,d0
   11068:	|  /-- bra.s 1106c <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1106a:	\--|-> moveq #1,d0
}
   1106c:	   \-> addq.l #4,sp
   1106e:	       rts

00011070 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11070:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11072:	       move.l sp,d0
   11074:	       move.l d0,-(sp)
   11076:	       move.l 16(sp),-(sp)
   1107a:	       move.l 16(sp),-(sp)
   1107e:	       jsr 10f48 <getFuncNumForCallback>
   11084:	       lea 12(sp),sp
   11088:	       tst.w d0
   1108a:	/----- beq.s 1109c <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   1108c:	|      movea.l 1b1c2 <currentEvents>,a0
   11092:	|      move.l (sp),d0
   11094:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11098:	|      moveq #2,d0
   1109a:	|  /-- bra.s 1109e <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   1109c:	\--|-> moveq #1,d0
}
   1109e:	   \-> addq.l #4,sp
   110a0:	       rts

000110a2 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   110a2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   110a4:	       move.l sp,d0
   110a6:	       move.l d0,-(sp)
   110a8:	       move.l 16(sp),-(sp)
   110ac:	       move.l 16(sp),-(sp)
   110b0:	       jsr 10f48 <getFuncNumForCallback>
   110b6:	       lea 12(sp),sp
   110ba:	       tst.w d0
   110bc:	/----- beq.s 110ce <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   110be:	|      movea.l 1b1c2 <currentEvents>,a0
   110c4:	|      move.l (sp),d0
   110c6:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   110ca:	|      moveq #2,d0
   110cc:	|  /-- bra.s 110d0 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   110ce:	\--|-> moveq #1,d0
}
   110d0:	   \-> addq.l #4,sp
   110d2:	       rts

000110d4 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   110d4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   110d6:	       move.l sp,d0
   110d8:	       move.l d0,-(sp)
   110da:	       move.l 16(sp),-(sp)
   110de:	       move.l 16(sp),-(sp)
   110e2:	       jsr 10f48 <getFuncNumForCallback>
   110e8:	       lea 12(sp),sp
   110ec:	       tst.w d0
   110ee:	/----- beq.s 11100 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   110f0:	|      movea.l 1b1c2 <currentEvents>,a0
   110f6:	|      move.l (sp),d0
   110f8:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   110fc:	|      moveq #2,d0
   110fe:	|  /-- bra.s 11102 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11100:	\--|-> moveq #1,d0
}
   11102:	   \-> addq.l #4,sp
   11104:	       rts

00011106 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11106:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11108:	          move.l sp,d0
   1110a:	          move.l d0,-(sp)
   1110c:	          move.l 16(sp),-(sp)
   11110:	          move.l 16(sp),-(sp)
   11114:	          jsr 10f48 <getFuncNumForCallback>
   1111a:	          lea 12(sp),sp
   1111e:	          tst.w d0
   11120:	/-------- beq.s 1114c <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11122:	|         move.l 1b818 <noStack>,d1
   11128:	|         move.l (sp),d0
   1112a:	|         pea 1 <_start+0x1>
   1112e:	|         move.l d1,-(sp)
   11130:	|         clr.l -(sp)
   11132:	|         clr.l -(sp)
   11134:	|         move.l d0,-(sp)
   11136:	|         jsr 5b22 <startNewFunctionNum>
   1113c:	|         lea 20(sp),sp
   11140:	|         tst.l d0
   11142:	|     /-- bne.s 11148 <builtIn_spawnSub+0x42>
   11144:	|     |   moveq #1,d0
   11146:	|  /--|-- bra.s 1114e <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11148:	|  |  \-> moveq #2,d0
   1114a:	|  +----- bra.s 1114e <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   1114c:	\--|----> moveq #1,d0
}
   1114e:	   \----> addq.l #4,sp
   11150:	          rts

00011152 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11152:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11154:	          move.l sp,d0
   11156:	          addq.l #4,d0
   11158:	          move.l d0,-(sp)
   1115a:	          move.l 20(sp),-(sp)
   1115e:	          move.l 20(sp),-(sp)
   11162:	          jsr 10f48 <getFuncNumForCallback>
   11168:	          lea 12(sp),sp
   1116c:	          tst.w d0
   1116e:	/-------- beq.s 111a4 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11170:	|         move.l 4(sp),d1
   11174:	|         move.l sp,d0
   11176:	|         addq.l #2,d0
   11178:	|         move.l d0,-(sp)
   1117a:	|         move.l 20(sp),-(sp)
   1117e:	|         move.l d1,-(sp)
   11180:	|         jsr 3848 <cancelAFunction>
   11186:	|         lea 12(sp),sp
		if (killedMyself) {
   1118a:	|         move.w 2(sp),d0
   1118e:	|  /----- beq.s 111a0 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11190:	|  |      move.l 16(sp),-(sp)
   11194:	|  |      jsr 3766 <abortFunction>
   1119a:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1119c:	|  |      moveq #5,d0
   1119e:	|  |  /-- bra.s 111a6 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   111a0:	|  \--|-> moveq #2,d0
   111a2:	|     +-- bra.s 111a6 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   111a4:	\-----|-> moveq #1,d0
}
   111a6:	      \-> addq.l #8,sp
   111a8:	          rts

000111aa <builtIn_stringWidth>:

builtIn(stringWidth)
{
   111aa:	       subq.l #8,sp
   111ac:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   111ae:	       movea.l 20(sp),a0
   111b2:	       move.l 24(a0),d0
   111b6:	       move.l d0,-(sp)
   111b8:	       jsr 13f2a <getTextFromAnyVar>
   111be:	       addq.l #4,sp
   111c0:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   111c4:	   /-- bne.s 111ca <builtIn_stringWidth+0x20>
   111c6:	   |   moveq #1,d0
   111c8:	/--|-- bra.s 11218 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   111ca:	|  \-> moveq #24,d0
   111cc:	|      add.l 20(sp),d0
   111d0:	|      move.l d0,-(sp)
   111d2:	|      jsr 142d8 <trimStack>
   111d8:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   111da:	|      move.l 8(sp),-(sp)
   111de:	|      jsr 14936 <stringWidth>
   111e4:	|      addq.l #4,sp
   111e6:	|      move.l d0,d1
   111e8:	|      moveq #28,d0
   111ea:	|      add.l 20(sp),d0
   111ee:	|      move.l d1,-(sp)
   111f0:	|      pea 1 <_start+0x1>
   111f4:	|      move.l d0,-(sp)
   111f6:	|      jsr 14246 <setVariable>
   111fc:	|      lea 12(sp),sp
	FreeVec(theText);
   11200:	|      move.l 8(sp),4(sp)
   11206:	|      move.l 1b848 <SysBase>,d0
   1120c:	|      movea.l d0,a6
   1120e:	|      movea.l 4(sp),a1
   11212:	|      jsr -690(a6)
	return BR_CONTINUE;
   11216:	|      moveq #2,d0
}
   11218:	\----> movea.l (sp)+,a6
   1121a:	       addq.l #8,sp
   1121c:	       rts

0001121e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1121e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11220:	       movea.l 12(sp),a0
   11224:	       move.l 24(a0),d0
   11228:	       move.l d0,-(sp)
   1122a:	       pea 1 <_start+0x1>
   1122e:	       move.l sp,d0
   11230:	       addq.l #8,d0
   11232:	       move.l d0,-(sp)
   11234:	       jsr 13954 <getValueType>
   1123a:	       lea 12(sp),sp
   1123e:	       tst.w d0
   11240:	   /-- bne.s 11246 <builtIn_hardScroll+0x28>
   11242:	   |   moveq #1,d0
   11244:	/--|-- bra.s 11264 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11246:	|  \-> moveq #24,d0
   11248:	|      add.l 12(sp),d0
   1124c:	|      move.l d0,-(sp)
   1124e:	|      jsr 142d8 <trimStack>
   11254:	|      addq.l #4,sp
	hardScroll (v);
   11256:	|      move.l (sp),d0
   11258:	|      move.l d0,-(sp)
   1125a:	|      jsr c492 <hardScroll>
   11260:	|      addq.l #4,sp
	return BR_CONTINUE;
   11262:	|      moveq #2,d0
}
   11264:	\----> addq.l #4,sp
   11266:	       rts

00011268 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11268:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1126a:	       movea.l 12(sp),a0
   1126e:	       move.l 24(a0),d0
   11272:	       move.l d0,-(sp)
   11274:	       pea 7 <_start+0x7>
   11278:	       move.l sp,d0
   1127a:	       addq.l #8,d0
   1127c:	       move.l d0,-(sp)
   1127e:	       jsr 13954 <getValueType>
   11284:	       lea 12(sp),sp
   11288:	       tst.w d0
   1128a:	   /-- bne.s 11290 <builtIn_isScreenRegion+0x28>
   1128c:	   |   moveq #1,d0
   1128e:	/--|-- bra.s 112d0 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11290:	|  \-> moveq #24,d0
   11292:	|      add.l 12(sp),d0
   11296:	|      move.l d0,-(sp)
   11298:	|      jsr 142d8 <trimStack>
   1129e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   112a0:	|      move.l (sp),d0
   112a2:	|      move.l d0,-(sp)
   112a4:	|      jsr 14a96 <getRegionForObject>
   112aa:	|      addq.l #4,sp
   112ac:	|      tst.l d0
   112ae:	|      sne d0
   112b0:	|      neg.b d0
   112b2:	|      moveq #0,d1
   112b4:	|      move.b d0,d1
   112b6:	|      moveq #28,d0
   112b8:	|      add.l 12(sp),d0
   112bc:	|      move.l d1,-(sp)
   112be:	|      pea 1 <_start+0x1>
   112c2:	|      move.l d0,-(sp)
   112c4:	|      jsr 14246 <setVariable>
   112ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112ce:	|      moveq #2,d0
}
   112d0:	\----> addq.l #4,sp
   112d2:	       rts

000112d4 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   112d4:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112d6:	       movea.l 12(sp),a0
   112da:	       move.l 24(a0),d0
   112de:	       move.l d0,-(sp)
   112e0:	       pea 1 <_start+0x1>
   112e4:	       move.l sp,d0
   112e6:	       addq.l #8,d0
   112e8:	       move.l d0,-(sp)
   112ea:	       jsr 13954 <getValueType>
   112f0:	       lea 12(sp),sp
   112f4:	       tst.w d0
   112f6:	   /-- bne.s 112fc <builtIn_setSpeechSpeed+0x28>
   112f8:	   |   moveq #1,d0
   112fa:	/--|-- bra.s 1134a <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   112fc:	|  \-> moveq #24,d0
   112fe:	|      add.l 12(sp),d0
   11302:	|      move.l d0,-(sp)
   11304:	|      jsr 142d8 <trimStack>
   1130a:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1130c:	|      move.l (sp),d0
   1130e:	|      move.l d0,-(sp)
   11310:	|      jsr 1652c <__floatsisf>
   11316:	|      addq.l #4,sp
   11318:	|      move.l #1008981770,-(sp)
   1131e:	|      move.l d0,-(sp)
   11320:	|      jsr 165de <__mulsf3>
   11326:	|      addq.l #8,sp
   11328:	|      move.l d0,1b1d4 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1132e:	|      moveq #28,d0
   11330:	|      add.l 12(sp),d0
   11334:	|      pea 1 <_start+0x1>
   11338:	|      pea 1 <_start+0x1>
   1133c:	|      move.l d0,-(sp)
   1133e:	|      jsr 14246 <setVariable>
   11344:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11348:	|      moveq #2,d0
}
   1134a:	\----> addq.l #4,sp
   1134c:	       rts

0001134e <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1134e:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11350:	       movea.l 12(sp),a0
   11354:	       move.l 24(a0),d0
   11358:	       move.l d0,-(sp)
   1135a:	       pea 1 <_start+0x1>
   1135e:	       move.l sp,d0
   11360:	       addq.l #8,d0
   11362:	       move.l d0,-(sp)
   11364:	       jsr 13954 <getValueType>
   1136a:	       lea 12(sp),sp
   1136e:	       tst.w d0
   11370:	   /-- bne.s 11376 <builtIn_setFontSpacing+0x28>
   11372:	   |   moveq #1,d0
   11374:	/--|-- bra.s 113ac <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11376:	|  \-> move.l (sp),d0
   11378:	|      move.l d0,d0
   1137a:	|      move.w d0,1b74e <fontSpace>
	trimStack (&fun -> stack);
   11380:	|      moveq #24,d0
   11382:	|      add.l 12(sp),d0
   11386:	|      move.l d0,-(sp)
   11388:	|      jsr 142d8 <trimStack>
   1138e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11390:	|      moveq #28,d0
   11392:	|      add.l 12(sp),d0
   11396:	|      pea 1 <_start+0x1>
   1139a:	|      pea 1 <_start+0x1>
   1139e:	|      move.l d0,-(sp)
   113a0:	|      jsr 14246 <setVariable>
   113a6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   113aa:	|      moveq #2,d0
}
   113ac:	\----> addq.l #4,sp
   113ae:	       rts

000113b0 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   113b0:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113b2:	          movea.l 12(sp),a0
   113b6:	          move.l 24(a0),d0
   113ba:	          move.l d0,-(sp)
   113bc:	          pea 1 <_start+0x1>
   113c0:	          move.l sp,d0
   113c2:	          addq.l #8,d0
   113c4:	          move.l d0,-(sp)
   113c6:	          jsr 13954 <getValueType>
   113cc:	          lea 12(sp),sp
   113d0:	          tst.w d0
   113d2:	      /-- bne.s 113d8 <builtIn_transitionLevel+0x28>
   113d4:	      |   moveq #1,d0
   113d6:	/-----|-- bra.s 1142c <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   113d8:	|     \-> moveq #24,d0
   113da:	|         add.l 12(sp),d0
   113de:	|         move.l d0,-(sp)
   113e0:	|         jsr 142d8 <trimStack>
   113e6:	|         addq.l #4,sp

	if (number < 0)
   113e8:	|         move.l (sp),d0
   113ea:	|     /-- bpl.s 113f4 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   113ec:	|     |   clr.b 1b1c0 <brightnessLevel>
   113f2:	|  /--|-- bra.s 11410 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   113f4:	|  |  \-> move.l (sp),d0
   113f6:	|  |      cmpi.l #255,d0
   113fc:	|  |  /-- ble.s 11406 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   113fe:	|  |  |   st 1b1c0 <brightnessLevel>
   11404:	|  +--|-- bra.s 11410 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11406:	|  |  \-> move.l (sp),d0
   11408:	|  |      move.l d0,d0
   1140a:	|  |      move.b d0,1b1c0 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11410:	|  \----> moveq #28,d0
   11412:	|         add.l 12(sp),d0
   11416:	|         pea 1 <_start+0x1>
   1141a:	|         pea 1 <_start+0x1>
   1141e:	|         move.l d0,-(sp)
   11420:	|         jsr 14246 <setVariable>
   11426:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1142a:	|         moveq #2,d0
}
   1142c:	\-------> addq.l #4,sp
   1142e:	          rts

00011430 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11430:	movea.l 8(sp),a0
   11434:	move.l 24(a0),d0
   11438:	move.l d0,-(sp)
   1143a:	jsr 13e94 <getBoolean>
   11440:	addq.l #4,sp
   11442:	move.w d0,1b7e8 <captureAllKeys>
	trimStack (&fun -> stack);
   11448:	moveq #24,d0
   1144a:	add.l 8(sp),d0
   1144e:	move.l d0,-(sp)
   11450:	jsr 142d8 <trimStack>
   11456:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11458:	move.w 1b7e8 <captureAllKeys>,d0
   1145e:	movea.w d0,a0
   11460:	moveq #28,d0
   11462:	add.l 8(sp),d0
   11466:	move.l a0,-(sp)
   11468:	pea 1 <_start+0x1>
   1146c:	move.l d0,-(sp)
   1146e:	jsr 14246 <setVariable>
   11474:	lea 12(sp),sp
	return BR_CONTINUE;
   11478:	moveq #2,d0
}
   1147a:	rts

0001147c <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   1147c:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11480:	       movea.l 20(sp),a0
   11484:	       move.l 24(a0),d0
   11488:	       move.l d0,-(sp)
   1148a:	       pea 1 <_start+0x1>
   1148e:	       moveq #12,d0
   11490:	       add.l sp,d0
   11492:	       move.l d0,-(sp)
   11494:	       jsr 13954 <getValueType>
   1149a:	       lea 12(sp),sp
   1149e:	       tst.w d0
   114a0:	   /-- bne.s 114a8 <builtIn_spinCharacter+0x2c>
   114a2:	   |   moveq #1,d0
   114a4:	/--|-- bra.w 11558 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   114a8:	|  \-> moveq #24,d0
   114aa:	|      add.l 20(sp),d0
   114ae:	|      move.l d0,-(sp)
   114b0:	|      jsr 142d8 <trimStack>
   114b6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114b8:	|      movea.l 20(sp),a0
   114bc:	|      move.l 24(a0),d0
   114c0:	|      move.l d0,-(sp)
   114c2:	|      pea 7 <_start+0x7>
   114c6:	|      lea 8(sp),a0
   114ca:	|      move.l a0,-(sp)
   114cc:	|      jsr 13954 <getValueType>
   114d2:	|      lea 12(sp),sp
   114d6:	|      tst.w d0
   114d8:	|  /-- bne.s 114de <builtIn_spinCharacter+0x62>
   114da:	|  |   moveq #1,d0
   114dc:	+--|-- bra.s 11558 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   114de:	|  \-> moveq #24,d0
   114e0:	|      add.l 20(sp),d0
   114e4:	|      move.l d0,-(sp)
   114e6:	|      jsr 142d8 <trimStack>
   114ec:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   114ee:	|      move.l (sp),d0
   114f0:	|      move.l d0,-(sp)
   114f2:	|      jsr 9866 <findPerson>
   114f8:	|      addq.l #4,sp
   114fa:	|      move.l d0,8(sp)
	if (thisPerson) {
   114fe:	|  /-- beq.s 1153e <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11500:	|  |   move.l 4(sp),d0
   11504:	|  |   movea.l 8(sp),a0
   11508:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1150c:	|  |   movea.l 8(sp),a0
   11510:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   11516:	|  |   movea.l 8(sp),a0
   1151a:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11520:	|  |   moveq #28,d0
   11522:	|  |   add.l 20(sp),d0
   11526:	|  |   pea 1 <_start+0x1>
   1152a:	|  |   pea 1 <_start+0x1>
   1152e:	|  |   move.l d0,-(sp)
   11530:	|  |   jsr 14246 <setVariable>
   11536:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1153a:	|  |   moveq #3,d0
   1153c:	+--|-- bra.s 11558 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1153e:	|  \-> moveq #28,d0
   11540:	|      add.l 20(sp),d0
   11544:	|      clr.l -(sp)
   11546:	|      pea 1 <_start+0x1>
   1154a:	|      move.l d0,-(sp)
   1154c:	|      jsr 14246 <setVariable>
   11552:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11556:	|      moveq #2,d0
	}
}
   11558:	\----> lea 12(sp),sp
   1155c:	       rts

0001155e <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1155e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11560:	          movea.l 16(sp),a0
   11564:	          move.l 24(a0),d0
   11568:	          move.l d0,-(sp)
   1156a:	          pea 7 <_start+0x7>
   1156e:	          move.l sp,d0
   11570:	          addq.l #8,d0
   11572:	          move.l d0,-(sp)
   11574:	          jsr 13954 <getValueType>
   1157a:	          lea 12(sp),sp
   1157e:	          tst.w d0
   11580:	      /-- bne.s 11586 <builtIn_getCharacterDirection+0x28>
   11582:	      |   moveq #1,d0
   11584:	/-----|-- bra.s 115e4 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11586:	|     \-> moveq #24,d0
   11588:	|         add.l 16(sp),d0
   1158c:	|         move.l d0,-(sp)
   1158e:	|         jsr 142d8 <trimStack>
   11594:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11596:	|         move.l (sp),d0
   11598:	|         move.l d0,-(sp)
   1159a:	|         jsr 9866 <findPerson>
   115a0:	|         addq.l #4,sp
   115a2:	|         move.l d0,4(sp)
	if (thisPerson) {
   115a6:	|  /----- beq.s 115ca <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   115a8:	|  |      movea.l 4(sp),a0
   115ac:	|  |      move.l 106(a0),d1
   115b0:	|  |      moveq #28,d0
   115b2:	|  |      add.l 16(sp),d0
   115b6:	|  |      move.l d1,-(sp)
   115b8:	|  |      pea 1 <_start+0x1>
   115bc:	|  |      move.l d0,-(sp)
   115be:	|  |      jsr 14246 <setVariable>
   115c4:	|  |      lea 12(sp),sp
   115c8:	|  |  /-- bra.s 115e2 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   115ca:	|  \--|-> moveq #28,d0
   115cc:	|     |   add.l 16(sp),d0
   115d0:	|     |   clr.l -(sp)
   115d2:	|     |   pea 1 <_start+0x1>
   115d6:	|     |   move.l d0,-(sp)
   115d8:	|     |   jsr 14246 <setVariable>
   115de:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   115e2:	|     \-> moveq #2,d0
}
   115e4:	\-------> addq.l #8,sp
   115e6:	          rts

000115e8 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   115e8:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115ea:	       movea.l 16(sp),a0
   115ee:	       move.l 24(a0),d0
   115f2:	       move.l d0,-(sp)
   115f4:	       pea 7 <_start+0x7>
   115f8:	       move.l sp,d0
   115fa:	       addq.l #8,d0
   115fc:	       move.l d0,-(sp)
   115fe:	       jsr 13954 <getValueType>
   11604:	       lea 12(sp),sp
   11608:	       tst.w d0
   1160a:	   /-- bne.s 11610 <builtIn_isCharacter+0x28>
   1160c:	   |   moveq #1,d0
   1160e:	/--|-- bra.s 11652 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11610:	|  \-> moveq #24,d0
   11612:	|      add.l 16(sp),d0
   11616:	|      move.l d0,-(sp)
   11618:	|      jsr 142d8 <trimStack>
   1161e:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11620:	|      move.l (sp),d0
   11622:	|      move.l d0,-(sp)
   11624:	|      jsr 9866 <findPerson>
   1162a:	|      addq.l #4,sp
   1162c:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11630:	|      sne d0
   11632:	|      neg.b d0
   11634:	|      moveq #0,d1
   11636:	|      move.b d0,d1
   11638:	|      moveq #28,d0
   1163a:	|      add.l 16(sp),d0
   1163e:	|      move.l d1,-(sp)
   11640:	|      pea 1 <_start+0x1>
   11644:	|      move.l d0,-(sp)
   11646:	|      jsr 14246 <setVariable>
   1164c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11650:	|      moveq #2,d0
}
   11652:	\----> addq.l #8,sp
   11654:	       rts

00011656 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11656:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11658:	          movea.l 16(sp),a0
   1165c:	          move.l 24(a0),d0
   11660:	          move.l d0,-(sp)
   11662:	          pea 7 <_start+0x7>
   11666:	          move.l sp,d0
   11668:	          addq.l #8,d0
   1166a:	          move.l d0,-(sp)
   1166c:	          jsr 13954 <getValueType>
   11672:	          lea 12(sp),sp
   11676:	          tst.w d0
   11678:	      /-- bne.s 1167e <builtIn_normalCharacter+0x28>
   1167a:	      |   moveq #1,d0
   1167c:	/-----|-- bra.s 116fa <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1167e:	|     \-> moveq #24,d0
   11680:	|         add.l 16(sp),d0
   11684:	|         move.l d0,-(sp)
   11686:	|         jsr 142d8 <trimStack>
   1168c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1168e:	|         move.l (sp),d0
   11690:	|         move.l d0,-(sp)
   11692:	|         jsr 9866 <findPerson>
   11698:	|         addq.l #4,sp
   1169a:	|         move.l d0,4(sp)
	if (thisPerson)
   1169e:	|  /----- beq.s 116e0 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   116a0:	|  |      movea.l 4(sp),a0
   116a4:	|  |      movea.l 80(a0),a0
   116a8:	|  |      move.l (a0),d1
   116aa:	|  |      movea.l 4(sp),a0
   116ae:	|  |      move.l 106(a0),d0
   116b2:	|  |      add.l d0,d0
   116b4:	|  |      add.l d0,d0
   116b6:	|  |      movea.l d1,a0
   116b8:	|  |      adda.l d0,a0
   116ba:	|  |      move.l (a0),d0
   116bc:	|  |      movea.l 4(sp),a0
   116c0:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   116c4:	|  |      moveq #28,d0
   116c6:	|  |      add.l 16(sp),d0
   116ca:	|  |      pea 1 <_start+0x1>
   116ce:	|  |      pea 1 <_start+0x1>
   116d2:	|  |      move.l d0,-(sp)
   116d4:	|  |      jsr 14246 <setVariable>
   116da:	|  |      lea 12(sp),sp
   116de:	|  |  /-- bra.s 116f8 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   116e0:	|  \--|-> moveq #28,d0
   116e2:	|     |   add.l 16(sp),d0
   116e6:	|     |   clr.l -(sp)
   116e8:	|     |   pea 1 <_start+0x1>
   116ec:	|     |   move.l d0,-(sp)
   116ee:	|     |   jsr 14246 <setVariable>
   116f4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   116f8:	|     \-> moveq #2,d0
}
   116fa:	\-------> addq.l #8,sp
   116fc:	          rts

000116fe <builtIn_isMoving>:

builtIn(isMoving)
{
   116fe:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11700:	          movea.l 16(sp),a0
   11704:	          move.l 24(a0),d0
   11708:	          move.l d0,-(sp)
   1170a:	          pea 7 <_start+0x7>
   1170e:	          move.l sp,d0
   11710:	          addq.l #8,d0
   11712:	          move.l d0,-(sp)
   11714:	          jsr 13954 <getValueType>
   1171a:	          lea 12(sp),sp
   1171e:	          tst.w d0
   11720:	      /-- bne.s 11726 <builtIn_isMoving+0x28>
   11722:	      |   moveq #1,d0
   11724:	/-----|-- bra.s 11786 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11726:	|     \-> moveq #24,d0
   11728:	|         add.l 16(sp),d0
   1172c:	|         move.l d0,-(sp)
   1172e:	|         jsr 142d8 <trimStack>
   11734:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11736:	|         move.l (sp),d0
   11738:	|         move.l d0,-(sp)
   1173a:	|         jsr 9866 <findPerson>
   11740:	|         addq.l #4,sp
   11742:	|         move.l d0,4(sp)
	if (thisPerson)
   11746:	|  /----- beq.s 1176c <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11748:	|  |      movea.l 4(sp),a0
   1174c:	|  |      move.w 64(a0),d0
   11750:	|  |      movea.w d0,a0
   11752:	|  |      moveq #28,d0
   11754:	|  |      add.l 16(sp),d0
   11758:	|  |      move.l a0,-(sp)
   1175a:	|  |      pea 1 <_start+0x1>
   1175e:	|  |      move.l d0,-(sp)
   11760:	|  |      jsr 14246 <setVariable>
   11766:	|  |      lea 12(sp),sp
   1176a:	|  |  /-- bra.s 11784 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1176c:	|  \--|-> moveq #28,d0
   1176e:	|     |   add.l 16(sp),d0
   11772:	|     |   clr.l -(sp)
   11774:	|     |   pea 1 <_start+0x1>
   11778:	|     |   move.l d0,-(sp)
   1177a:	|     |   jsr 14246 <setVariable>
   11780:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11784:	|     \-> moveq #2,d0
}
   11786:	\-------> addq.l #8,sp
   11788:	          rts

0001178a <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1178a:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1178e:	          movea.l 20(sp),a0
   11792:	          move.l 24(a0),d0
   11796:	          move.l d0,-(sp)
   11798:	          pea 7 <_start+0x7>
   1179c:	          lea 8(sp),a0
   117a0:	          move.l a0,-(sp)
   117a2:	          jsr 13954 <getValueType>
   117a8:	          lea 12(sp),sp
   117ac:	          tst.w d0
   117ae:	      /-- bne.s 117b6 <builtIn_fetchEvent+0x2c>
   117b0:	      |   moveq #1,d0
   117b2:	/-----|-- bra.w 1184a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   117b6:	|     \-> moveq #24,d0
   117b8:	|         add.l 20(sp),d0
   117bc:	|         move.l d0,-(sp)
   117be:	|         jsr 142d8 <trimStack>
   117c4:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117c6:	|         movea.l 20(sp),a0
   117ca:	|         move.l 24(a0),d0
   117ce:	|         move.l d0,-(sp)
   117d0:	|         pea 7 <_start+0x7>
   117d4:	|         moveq #12,d0
   117d6:	|         add.l sp,d0
   117d8:	|         move.l d0,-(sp)
   117da:	|         jsr 13954 <getValueType>
   117e0:	|         lea 12(sp),sp
   117e4:	|         tst.w d0
   117e6:	|     /-- bne.s 117ec <builtIn_fetchEvent+0x62>
   117e8:	|     |   moveq #1,d0
   117ea:	+-----|-- bra.s 1184a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   117ec:	|     \-> moveq #24,d0
   117ee:	|         add.l 20(sp),d0
   117f2:	|         move.l d0,-(sp)
   117f4:	|         jsr 142d8 <trimStack>
   117fa:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   117fc:	|         move.l (sp),d1
   117fe:	|         move.l 4(sp),d0
   11802:	|         move.l d1,-(sp)
   11804:	|         move.l d0,-(sp)
   11806:	|         jsr c774 <getCombinationFunction>
   1180c:	|         addq.l #8,sp
   1180e:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   11812:	|  /----- beq.s 11830 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11814:	|  |      moveq #28,d0
   11816:	|  |      add.l 20(sp),d0
   1181a:	|  |      move.l 8(sp),-(sp)
   1181e:	|  |      pea 2 <_start+0x2>
   11822:	|  |      move.l d0,-(sp)
   11824:	|  |      jsr 14246 <setVariable>
   1182a:	|  |      lea 12(sp),sp
   1182e:	|  |  /-- bra.s 11848 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11830:	|  \--|-> moveq #28,d0
   11832:	|     |   add.l 20(sp),d0
   11836:	|     |   clr.l -(sp)
   11838:	|     |   pea 1 <_start+0x1>
   1183c:	|     |   move.l d0,-(sp)
   1183e:	|     |   jsr 14246 <setVariable>
   11844:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11848:	|     \-> moveq #2,d0
}
   1184a:	\-------> lea 12(sp),sp
   1184e:	          rts

00011850 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   11850:	       lea -24(sp),sp
   11854:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11856:	       movea.l 36(sp),a0
   1185a:	       move.l 24(a0),d0
   1185e:	       move.l d0,-(sp)
   11860:	       jsr 13f2a <getTextFromAnyVar>
   11866:	       addq.l #4,sp
   11868:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1186c:	       moveq #24,d0
   1186e:	       add.l 36(sp),d0
   11872:	       move.l d0,-(sp)
   11874:	       jsr 142d8 <trimStack>
   1187a:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   1187c:	       move.l 24(sp),-(sp)
   11880:	       jsr 2fe <encodeFilename>
   11886:	       addq.l #4,sp
   11888:	       move.l d0,20(sp)
    FreeVec(namNormal);
   1188c:	       move.l 24(sp),16(sp)
   11892:	       move.l 1b848 <SysBase>,d0
   11898:	       movea.l d0,a6
   1189a:	       movea.l 16(sp),a1
   1189e:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   118a2:	       move.l 20(sp),-(sp)
   118a6:	       jsr d52c <failSecurityCheck>
   118ac:	       addq.l #4,sp
   118ae:	       tst.w d0
   118b0:	   /-- beq.s 118b6 <builtIn_deleteFile+0x66>
   118b2:	   |   moveq #1,d0
   118b4:	/--|-- bra.s 11904 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   118b6:	|  \-> move.l 20(sp),12(sp)
   118bc:	|      move.l 1b850 <DOSBase>,d0
   118c2:	|      movea.l d0,a6
   118c4:	|      move.l 12(sp),d1
   118c8:	|      jsr -72(a6)
   118cc:	|      move.l d0,8(sp)
   118d0:	|      move.l 8(sp),d1
   118d4:	|      moveq #28,d0
   118d6:	|      add.l 36(sp),d0
   118da:	|      move.l d1,-(sp)
   118dc:	|      pea 1 <_start+0x1>
   118e0:	|      move.l d0,-(sp)
   118e2:	|      jsr 14246 <setVariable>
   118e8:	|      lea 12(sp),sp
    FreeVec(nam);
   118ec:	|      move.l 20(sp),4(sp)
   118f2:	|      move.l 1b848 <SysBase>,d0
   118f8:	|      movea.l d0,a6
   118fa:	|      movea.l 4(sp),a1
   118fe:	|      jsr -690(a6)

    return BR_CONTINUE;
   11902:	|      moveq #2,d0
}
   11904:	\----> movea.l (sp)+,a6
   11906:	       lea 24(sp),sp
   1190a:	       rts

0001190c <builtIn_renameFile>:

builtIn(renameFile)
{
   1190c:	       lea -40(sp),sp
   11910:	       move.l a6,-(sp)
   11912:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11914:	       movea.l 56(sp),a0
   11918:	       move.l 24(a0),d0
   1191c:	       move.l d0,-(sp)
   1191e:	       jsr 13f2a <getTextFromAnyVar>
   11924:	       addq.l #4,sp
   11926:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1192a:	       move.l 44(sp),-(sp)
   1192e:	       jsr 2fe <encodeFilename>
   11934:	       addq.l #4,sp
   11936:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1193a:	       moveq #24,d0
   1193c:	       add.l 56(sp),d0
   11940:	       move.l d0,-(sp)
   11942:	       jsr 142d8 <trimStack>
   11948:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1194a:	       move.l 40(sp),-(sp)
   1194e:	       jsr d52c <failSecurityCheck>
   11954:	       addq.l #4,sp
   11956:	       tst.w d0
   11958:	   /-- beq.s 11960 <builtIn_renameFile+0x54>
   1195a:	   |   moveq #1,d0
   1195c:	/--|-- bra.w 11a46 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11960:	|  \-> move.l 44(sp),36(sp)
   11966:	|      move.l 1b848 <SysBase>,d0
   1196c:	|      movea.l d0,a6
   1196e:	|      movea.l 36(sp),a1
   11972:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11976:	|      movea.l 56(sp),a0
   1197a:	|      move.l 24(a0),d0
   1197e:	|      move.l d0,-(sp)
   11980:	|      jsr 13f2a <getTextFromAnyVar>
   11986:	|      addq.l #4,sp
   11988:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   1198c:	|      move.l 44(sp),-(sp)
   11990:	|      jsr 2fe <encodeFilename>
   11996:	|      addq.l #4,sp
   11998:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1199c:	|      moveq #24,d0
   1199e:	|      add.l 56(sp),d0
   119a2:	|      move.l d0,-(sp)
   119a4:	|      jsr 142d8 <trimStack>
   119aa:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   119ac:	|      move.l 32(sp),-(sp)
   119b0:	|      jsr d52c <failSecurityCheck>
   119b6:	|      addq.l #4,sp
   119b8:	|      tst.w d0
   119ba:	|  /-- beq.s 119c2 <builtIn_renameFile+0xb6>
   119bc:	|  |   moveq #1,d0
   119be:	+--|-- bra.w 11a46 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   119c2:	|  \-> move.l 44(sp),28(sp)
   119c8:	|      move.l 1b848 <SysBase>,d0
   119ce:	|      movea.l d0,a6
   119d0:	|      movea.l 28(sp),a1
   119d4:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   119d8:	|      move.l 32(sp),24(sp)
   119de:	|      move.l 40(sp),20(sp)
   119e4:	|      move.l 1b850 <DOSBase>,d0
   119ea:	|      movea.l d0,a6
   119ec:	|      move.l 24(sp),d1
   119f0:	|      move.l 20(sp),d2
   119f4:	|      jsr -78(a6)
   119f8:	|      move.l d0,16(sp)
   119fc:	|      move.l 16(sp),d1
   11a00:	|      moveq #28,d0
   11a02:	|      add.l 56(sp),d0
   11a06:	|      move.l d1,-(sp)
   11a08:	|      pea 1 <_start+0x1>
   11a0c:	|      move.l d0,-(sp)
   11a0e:	|      jsr 14246 <setVariable>
   11a14:	|      lea 12(sp),sp
	FreeVec(nam);
   11a18:	|      move.l 32(sp),12(sp)
   11a1e:	|      move.l 1b848 <SysBase>,d0
   11a24:	|      movea.l d0,a6
   11a26:	|      movea.l 12(sp),a1
   11a2a:	|      jsr -690(a6)
	FreeVec(newnam);
   11a2e:	|      move.l 40(sp),8(sp)
   11a34:	|      move.l 1b848 <SysBase>,d0
   11a3a:	|      movea.l d0,a6
   11a3c:	|      movea.l 8(sp),a1
   11a40:	|      jsr -690(a6)

	return BR_CONTINUE;
   11a44:	|      moveq #2,d0
}
   11a46:	\----> move.l (sp)+,d2
   11a48:	       movea.l (sp)+,a6
   11a4a:	       lea 40(sp),sp
   11a4e:	       rts

00011a50 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   11a50:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a52:	       movea.l 12(sp),a0
   11a56:	       move.l 24(a0),d0
   11a5a:	       move.l d0,-(sp)
   11a5c:	       pea 5 <_start+0x5>
   11a60:	       move.l sp,d0
   11a62:	       addq.l #8,d0
   11a64:	       move.l d0,-(sp)
   11a66:	       jsr 13954 <getValueType>
   11a6c:	       lea 12(sp),sp
   11a70:	       tst.w d0
   11a72:	   /-- bne.s 11a78 <builtIn_cacheSound+0x28>
   11a74:	   |   moveq #1,d0
   11a76:	/--|-- bra.s 11aa0 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   11a78:	|  \-> moveq #24,d0
   11a7a:	|      add.l 12(sp),d0
   11a7e:	|      move.l d0,-(sp)
   11a80:	|      jsr 142d8 <trimStack>
   11a86:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   11a88:	|      move.l (sp),d0
   11a8a:	|      move.l d0,-(sp)
   11a8c:	|      jsr c374 <cacheSound>
   11a92:	|      addq.l #4,sp
   11a94:	|      moveq #-1,d1
   11a96:	|      cmp.l d0,d1
   11a98:	|  /-- bne.s 11a9e <builtIn_cacheSound+0x4e>
   11a9a:	|  |   moveq #1,d0
   11a9c:	+--|-- bra.s 11aa0 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   11a9e:	|  \-> moveq #2,d0
}
   11aa0:	\----> addq.l #4,sp
   11aa2:	       rts

00011aa4 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   11aa4:	pea 18a73 <PutChar+0x1eaf>
   11aaa:	jsr 16274 <KPrintF>
   11ab0:	addq.l #4,sp
	return BR_CONTINUE;
   11ab2:	moveq #2,d0
}
   11ab4:	rts

00011ab6 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   11ab6:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aba:	          movea.l 20(sp),a0
   11abe:	          move.l 24(a0),d0
   11ac2:	          move.l d0,-(sp)
   11ac4:	          pea 1 <_start+0x1>
   11ac8:	          moveq #12,d0
   11aca:	          add.l sp,d0
   11acc:	          move.l d0,-(sp)
   11ace:	          jsr 13954 <getValueType>
   11ad4:	          lea 12(sp),sp
   11ad8:	          tst.w d0
   11ada:	      /-- bne.s 11ae2 <builtIn_setCharacterSpinSpeed+0x2c>
   11adc:	      |   moveq #1,d0
   11ade:	/-----|-- bra.w 11b7c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   11ae2:	|     \-> moveq #24,d0
   11ae4:	|         add.l 20(sp),d0
   11ae8:	|         move.l d0,-(sp)
   11aea:	|         jsr 142d8 <trimStack>
   11af0:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11af2:	|         movea.l 20(sp),a0
   11af6:	|         move.l 24(a0),d0
   11afa:	|         move.l d0,-(sp)
   11afc:	|         pea 7 <_start+0x7>
   11b00:	|         lea 8(sp),a0
   11b04:	|         move.l a0,-(sp)
   11b06:	|         jsr 13954 <getValueType>
   11b0c:	|         lea 12(sp),sp
   11b10:	|         tst.w d0
   11b12:	|     /-- bne.s 11b18 <builtIn_setCharacterSpinSpeed+0x62>
   11b14:	|     |   moveq #1,d0
   11b16:	+-----|-- bra.s 11b7c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   11b18:	|     \-> moveq #24,d0
   11b1a:	|         add.l 20(sp),d0
   11b1e:	|         move.l d0,-(sp)
   11b20:	|         jsr 142d8 <trimStack>
   11b26:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11b28:	|         move.l (sp),d0
   11b2a:	|         move.l d0,-(sp)
   11b2c:	|         jsr 9866 <findPerson>
   11b32:	|         addq.l #4,sp
   11b34:	|         move.l d0,8(sp)

	if (thisPerson) {
   11b38:	|  /----- beq.s 11b62 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   11b3a:	|  |      move.l 4(sp),d0
   11b3e:	|  |      movea.l 8(sp),a0
   11b42:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11b46:	|  |      moveq #28,d0
   11b48:	|  |      add.l 20(sp),d0
   11b4c:	|  |      pea 1 <_start+0x1>
   11b50:	|  |      pea 1 <_start+0x1>
   11b54:	|  |      move.l d0,-(sp)
   11b56:	|  |      jsr 14246 <setVariable>
   11b5c:	|  |      lea 12(sp),sp
   11b60:	|  |  /-- bra.s 11b7a <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11b62:	|  \--|-> moveq #28,d0
   11b64:	|     |   add.l 20(sp),d0
   11b68:	|     |   clr.l -(sp)
   11b6a:	|     |   pea 1 <_start+0x1>
   11b6e:	|     |   move.l d0,-(sp)
   11b70:	|     |   jsr 14246 <setVariable>
   11b76:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b7a:	|     \-> moveq #2,d0
}
   11b7c:	\-------> lea 12(sp),sp
   11b80:	          rts

00011b82 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   11b82:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b86:	          movea.l 20(sp),a0
   11b8a:	          move.l 24(a0),d0
   11b8e:	          move.l d0,-(sp)
   11b90:	          pea 1 <_start+0x1>
   11b94:	          moveq #12,d0
   11b96:	          add.l sp,d0
   11b98:	          move.l d0,-(sp)
   11b9a:	          jsr 13954 <getValueType>
   11ba0:	          lea 12(sp),sp
   11ba4:	          tst.w d0
   11ba6:	      /-- bne.s 11bae <builtIn_setCharacterAngleOffset+0x2c>
   11ba8:	      |   moveq #1,d0
   11baa:	/-----|-- bra.w 11c48 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11bae:	|     \-> moveq #24,d0
   11bb0:	|         add.l 20(sp),d0
   11bb4:	|         move.l d0,-(sp)
   11bb6:	|         jsr 142d8 <trimStack>
   11bbc:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bbe:	|         movea.l 20(sp),a0
   11bc2:	|         move.l 24(a0),d0
   11bc6:	|         move.l d0,-(sp)
   11bc8:	|         pea 7 <_start+0x7>
   11bcc:	|         lea 8(sp),a0
   11bd0:	|         move.l a0,-(sp)
   11bd2:	|         jsr 13954 <getValueType>
   11bd8:	|         lea 12(sp),sp
   11bdc:	|         tst.w d0
   11bde:	|     /-- bne.s 11be4 <builtIn_setCharacterAngleOffset+0x62>
   11be0:	|     |   moveq #1,d0
   11be2:	+-----|-- bra.s 11c48 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11be4:	|     \-> moveq #24,d0
   11be6:	|         add.l 20(sp),d0
   11bea:	|         move.l d0,-(sp)
   11bec:	|         jsr 142d8 <trimStack>
   11bf2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11bf4:	|         move.l (sp),d0
   11bf6:	|         move.l d0,-(sp)
   11bf8:	|         jsr 9866 <findPerson>
   11bfe:	|         addq.l #4,sp
   11c00:	|         move.l d0,8(sp)

	if (thisPerson) {
   11c04:	|  /----- beq.s 11c2e <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   11c06:	|  |      move.l 4(sp),d0
   11c0a:	|  |      movea.l 8(sp),a0
   11c0e:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11c12:	|  |      moveq #28,d0
   11c14:	|  |      add.l 20(sp),d0
   11c18:	|  |      pea 1 <_start+0x1>
   11c1c:	|  |      pea 1 <_start+0x1>
   11c20:	|  |      move.l d0,-(sp)
   11c22:	|  |      jsr 14246 <setVariable>
   11c28:	|  |      lea 12(sp),sp
   11c2c:	|  |  /-- bra.s 11c46 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11c2e:	|  \--|-> moveq #28,d0
   11c30:	|     |   add.l 20(sp),d0
   11c34:	|     |   clr.l -(sp)
   11c36:	|     |   pea 1 <_start+0x1>
   11c3a:	|     |   move.l d0,-(sp)
   11c3c:	|     |   jsr 14246 <setVariable>
   11c42:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11c46:	|     \-> moveq #2,d0
}
   11c48:	\-------> lea 12(sp),sp
   11c4c:	          rts

00011c4e <builtIn_transitionMode>:


builtIn(transitionMode)
{
   11c4e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c50:	       movea.l 12(sp),a0
   11c54:	       move.l 24(a0),d0
   11c58:	       move.l d0,-(sp)
   11c5a:	       pea 1 <_start+0x1>
   11c5e:	       move.l sp,d0
   11c60:	       addq.l #8,d0
   11c62:	       move.l d0,-(sp)
   11c64:	       jsr 13954 <getValueType>
   11c6a:	       lea 12(sp),sp
   11c6e:	       tst.w d0
   11c70:	   /-- bne.s 11c76 <builtIn_transitionMode+0x28>
   11c72:	   |   moveq #1,d0
   11c74:	/--|-- bra.s 11cac <builtIn_transitionMode+0x5e>
	fadeMode = n;
   11c76:	|  \-> move.l (sp),d0
   11c78:	|      move.l d0,d0
   11c7a:	|      move.b d0,1b724 <fadeMode>
	trimStack (&fun -> stack);
   11c80:	|      moveq #24,d0
   11c82:	|      add.l 12(sp),d0
   11c86:	|      move.l d0,-(sp)
   11c88:	|      jsr 142d8 <trimStack>
   11c8e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11c90:	|      moveq #28,d0
   11c92:	|      add.l 12(sp),d0
   11c96:	|      pea 1 <_start+0x1>
   11c9a:	|      pea 1 <_start+0x1>
   11c9e:	|      move.l d0,-(sp)
   11ca0:	|      jsr 14246 <setVariable>
   11ca6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11caa:	|      moveq #2,d0
}
   11cac:	\----> addq.l #4,sp
   11cae:	       rts

00011cb0 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11cb0:	moveq #24,d0
   11cb2:	add.l 8(sp),d0
   11cb6:	move.l d0,-(sp)
   11cb8:	jsr 142d8 <trimStack>
   11cbe:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   11cc0:	moveq #28,d0
   11cc2:	add.l 8(sp),d0
   11cc6:	pea 1 <_start+0x1>
   11cca:	pea 1 <_start+0x1>
   11cce:	move.l d0,-(sp)
   11cd0:	jsr 14246 <setVariable>
   11cd6:	lea 12(sp),sp
	return BR_CONTINUE;
   11cda:	moveq #2,d0
}
   11cdc:	rts

00011cde <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   11cde:	pea 18a9d <PutChar+0x1ed9>
   11ce4:	jsr 16274 <KPrintF>
   11cea:	addq.l #4,sp
	return BR_CONTINUE;
   11cec:	moveq #2,d0
}
   11cee:	rts

00011cf0 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   11cf0:	       lea -16(sp),sp
   11cf4:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   11cf6:	       movea.l 28(sp),a0
   11cfa:	       move.l 24(a0),d0
   11cfe:	       move.l d0,-(sp)
   11d00:	       jsr 13f2a <getTextFromAnyVar>
   11d06:	       addq.l #4,sp
   11d08:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   11d0c:	   /-- bne.s 11d14 <builtIn_saveCustomData+0x24>
   11d0e:	   |   moveq #1,d0
   11d10:	/--|-- bra.w 11dc6 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   11d14:	|  \-> move.l 16(sp),-(sp)
   11d18:	|      jsr 2fe <encodeFilename>
   11d1e:	|      addq.l #4,sp
   11d20:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   11d24:	|      move.l 16(sp),8(sp)
   11d2a:	|      move.l 1b848 <SysBase>,d0
   11d30:	|      movea.l d0,a6
   11d32:	|      movea.l 8(sp),a1
   11d36:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   11d3a:	|      move.l 12(sp),-(sp)
   11d3e:	|      jsr d52c <failSecurityCheck>
   11d44:	|      addq.l #4,sp
   11d46:	|      tst.w d0
   11d48:	|  /-- beq.s 11d4e <builtIn_saveCustomData+0x5e>
   11d4a:	|  |   moveq #1,d0
   11d4c:	+--|-- bra.s 11dc6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11d4e:	|  \-> moveq #24,d0
   11d50:	|      add.l 28(sp),d0
   11d54:	|      move.l d0,-(sp)
   11d56:	|      jsr 142d8 <trimStack>
   11d5c:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   11d5e:	|      movea.l 28(sp),a0
   11d62:	|      movea.l 24(a0),a0
   11d66:	|      move.l (a0),d0
   11d68:	|      moveq #6,d1
   11d6a:	|      cmp.l d0,d1
   11d6c:	|  /-- beq.s 11d80 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   11d6e:	|  |   pea 18aca <PutChar+0x1f06>
   11d74:	|  |   jsr 16274 <KPrintF>
   11d7a:	|  |   addq.l #4,sp
		return BR_ERROR;
   11d7c:	|  |   moveq #1,d0
   11d7e:	+--|-- bra.s 11dc6 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   11d80:	|  \-> movea.l 28(sp),a0
   11d84:	|      move.l 24(a0),d0
   11d88:	|      move.l d0,-(sp)
   11d8a:	|      move.l 16(sp),-(sp)
   11d8e:	|      jsr d17c <stackToFile>
   11d94:	|      addq.l #8,sp
   11d96:	|      tst.w d0
   11d98:	|  /-- bne.s 11d9e <builtIn_saveCustomData+0xae>
   11d9a:	|  |   moveq #1,d0
   11d9c:	+--|-- bra.s 11dc6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11d9e:	|  \-> moveq #24,d0
   11da0:	|      add.l 28(sp),d0
   11da4:	|      move.l d0,-(sp)
   11da6:	|      jsr 142d8 <trimStack>
   11dac:	|      addq.l #4,sp
	FreeVec(fileName);
   11dae:	|      move.l 12(sp),4(sp)
   11db4:	|      move.l 1b848 <SysBase>,d0
   11dba:	|      movea.l d0,a6
   11dbc:	|      movea.l 4(sp),a1
   11dc0:	|      jsr -690(a6)
	return BR_CONTINUE;
   11dc4:	|      moveq #2,d0
}
   11dc6:	\----> movea.l (sp)+,a6
   11dc8:	       lea 16(sp),sp
   11dcc:	       rts

00011dce <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11dce:	       lea -28(sp),sp
   11dd2:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11dd4:	       movea.l 40(sp),a0
   11dd8:	       move.l 24(a0),d0
   11ddc:	       move.l d0,-(sp)
   11dde:	       jsr 13f2a <getTextFromAnyVar>
   11de4:	       addq.l #4,sp
   11de6:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11dea:	   /-- bne.s 11df2 <builtIn_loadCustomData+0x24>
   11dec:	   |   moveq #1,d0
   11dee:	/--|-- bra.w 11eee <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11df2:	|  \-> move.l 28(sp),-(sp)
   11df6:	|      jsr 2fe <encodeFilename>
   11dfc:	|      addq.l #4,sp
   11dfe:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11e02:	|      move.l 28(sp),20(sp)
   11e08:	|      move.l 1b848 <SysBase>,d0
   11e0e:	|      movea.l d0,a6
   11e10:	|      movea.l 20(sp),a1
   11e14:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11e18:	|      move.l 24(sp),-(sp)
   11e1c:	|      jsr d52c <failSecurityCheck>
   11e22:	|      addq.l #4,sp
   11e24:	|      tst.w d0
   11e26:	|  /-- beq.s 11e2e <builtIn_loadCustomData+0x60>
   11e28:	|  |   moveq #1,d0
   11e2a:	+--|-- bra.w 11eee <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11e2e:	|  \-> moveq #24,d0
   11e30:	|      add.l 40(sp),d0
   11e34:	|      move.l d0,-(sp)
   11e36:	|      jsr 142d8 <trimStack>
   11e3c:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11e3e:	|      moveq #28,d0
   11e40:	|      add.l 40(sp),d0
   11e44:	|      move.l d0,-(sp)
   11e46:	|      jsr 13ba2 <unlinkVar>
   11e4c:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11e4e:	|      movea.l 40(sp),a0
   11e52:	|      moveq #6,d0
   11e54:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11e58:	|      moveq #12,d0
   11e5a:	|      move.l d0,16(sp)
   11e5e:	|      clr.l 12(sp)
   11e62:	|      move.l 1b848 <SysBase>,d0
   11e68:	|      movea.l d0,a6
   11e6a:	|      move.l 16(sp),d0
   11e6e:	|      move.l 12(sp),d1
   11e72:	|      jsr -684(a6)
   11e76:	|      move.l d0,8(sp)
   11e7a:	|      move.l 8(sp),d0
   11e7e:	|      movea.l 40(sp),a0
   11e82:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11e86:	|      movea.l 40(sp),a0
   11e8a:	|      move.l 32(a0),d0
   11e8e:	|  /-- bne.s 11e94 <builtIn_loadCustomData+0xc6>
   11e90:	|  |   moveq #1,d0
   11e92:	+--|-- bra.s 11eee <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11e94:	|  \-> movea.l 40(sp),a0
   11e98:	|      movea.l 32(a0),a0
   11e9c:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11e9e:	|      movea.l 40(sp),a0
   11ea2:	|      movea.l 32(a0),a0
   11ea6:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11eaa:	|      movea.l 40(sp),a0
   11eae:	|      movea.l 32(a0),a0
   11eb2:	|      moveq #1,d0
   11eb4:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11eb8:	|      movea.l 40(sp),a0
   11ebc:	|      move.l 32(a0),d0
   11ec0:	|      move.l d0,-(sp)
   11ec2:	|      move.l 28(sp),-(sp)
   11ec6:	|      jsr cbb6 <fileToStack>
   11ecc:	|      addq.l #8,sp
   11ece:	|      tst.w d0
   11ed0:	|  /-- bne.s 11ed6 <builtIn_loadCustomData+0x108>
   11ed2:	|  |   moveq #1,d0
   11ed4:	+--|-- bra.s 11eee <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11ed6:	|  \-> move.l 24(sp),4(sp)
   11edc:	|      move.l 1b848 <SysBase>,d0
   11ee2:	|      movea.l d0,a6
   11ee4:	|      movea.l 4(sp),a1
   11ee8:	|      jsr -690(a6)
	return BR_CONTINUE;
   11eec:	|      moveq #2,d0
}
   11eee:	\----> movea.l (sp)+,a6
   11ef0:	       lea 28(sp),sp
   11ef4:	       rts

00011ef6 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11ef6:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ef8:	       movea.l 12(sp),a0
   11efc:	       move.l 24(a0),d0
   11f00:	       move.l d0,-(sp)
   11f02:	       pea 1 <_start+0x1>
   11f06:	       move.l sp,d0
   11f08:	       addq.l #8,d0
   11f0a:	       move.l d0,-(sp)
   11f0c:	       jsr 13954 <getValueType>
   11f12:	       lea 12(sp),sp
   11f16:	       tst.w d0
   11f18:	   /-- bne.s 11f1e <builtIn_setCustomEncoding+0x28>
   11f1a:	   |   moveq #1,d0
   11f1c:	/--|-- bra.s 11f54 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11f1e:	|  \-> move.l (sp),d0
   11f20:	|      move.l d0,d0
   11f22:	|      move.w d0,1b958 <saveEncoding>
	trimStack (&fun -> stack);
   11f28:	|      moveq #24,d0
   11f2a:	|      add.l 12(sp),d0
   11f2e:	|      move.l d0,-(sp)
   11f30:	|      jsr 142d8 <trimStack>
   11f36:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11f38:	|      moveq #28,d0
   11f3a:	|      add.l 12(sp),d0
   11f3e:	|      pea 1 <_start+0x1>
   11f42:	|      pea 1 <_start+0x1>
   11f46:	|      move.l d0,-(sp)
   11f48:	|      jsr 14246 <setVariable>
   11f4e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f52:	|      moveq #2,d0
}
   11f54:	\----> addq.l #4,sp
   11f56:	       rts

00011f58 <builtIn_freeSound>:

builtIn(freeSound)
{
   11f58:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f5a:	       movea.l 12(sp),a0
   11f5e:	       move.l 24(a0),d0
   11f62:	       move.l d0,-(sp)
   11f64:	       pea 5 <_start+0x5>
   11f68:	       move.l sp,d0
   11f6a:	       addq.l #8,d0
   11f6c:	       move.l d0,-(sp)
   11f6e:	       jsr 13954 <getValueType>
   11f74:	       lea 12(sp),sp
   11f78:	       tst.w d0
   11f7a:	   /-- bne.s 11f80 <builtIn_freeSound+0x28>
   11f7c:	   |   moveq #1,d0
   11f7e:	/--|-- bra.s 11f9e <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11f80:	|  \-> moveq #24,d0
   11f82:	|      add.l 12(sp),d0
   11f86:	|      move.l d0,-(sp)
   11f88:	|      jsr 142d8 <trimStack>
   11f8e:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11f90:	|      move.l (sp),d0
   11f92:	|      move.l d0,-(sp)
   11f94:	|      jsr c378 <huntKillFreeSound>
   11f9a:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f9c:	|      moveq #2,d0
}
   11f9e:	\----> addq.l #4,sp
   11fa0:	       rts

00011fa2 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11fa2:	       lea -12(sp),sp
   11fa6:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fa8:	       movea.l 24(sp),a0
   11fac:	       move.l 24(a0),d0
   11fb0:	       move.l d0,-(sp)
   11fb2:	       pea 1 <_start+0x1>
   11fb6:	       moveq #16,d0
   11fb8:	       add.l sp,d0
   11fba:	       move.l d0,-(sp)
   11fbc:	       jsr 13954 <getValueType>
   11fc2:	       lea 12(sp),sp
   11fc6:	       tst.w d0
   11fc8:	   /-- bne.s 11fd0 <builtIn_parallaxAdd+0x2e>
   11fca:	   |   moveq #1,d0
   11fcc:	/--|-- bra.w 120a4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11fd0:	|  \-> moveq #24,d0
   11fd2:	|      add.l 24(sp),d0
   11fd6:	|      move.l d0,-(sp)
   11fd8:	|      jsr 142d8 <trimStack>
   11fde:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fe0:	|      movea.l 24(sp),a0
   11fe4:	|      move.l 24(a0),d0
   11fe8:	|      move.l d0,-(sp)
   11fea:	|      pea 1 <_start+0x1>
   11fee:	|      moveq #20,d0
   11ff0:	|      add.l sp,d0
   11ff2:	|      move.l d0,-(sp)
   11ff4:	|      jsr 13954 <getValueType>
   11ffa:	|      lea 12(sp),sp
   11ffe:	|      tst.w d0
   12000:	|  /-- bne.s 12008 <builtIn_parallaxAdd+0x66>
   12002:	|  |   moveq #1,d0
   12004:	+--|-- bra.w 120a4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12008:	|  \-> moveq #24,d0
   1200a:	|      add.l 24(sp),d0
   1200e:	|      move.l d0,-(sp)
   12010:	|      jsr 142d8 <trimStack>
   12016:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12018:	|      movea.l 24(sp),a0
   1201c:	|      move.l 24(a0),d0
   12020:	|      move.l d0,-(sp)
   12022:	|      pea 5 <_start+0x5>
   12026:	|      lea 12(sp),a0
   1202a:	|      move.l a0,-(sp)
   1202c:	|      jsr 13954 <getValueType>
   12032:	|      lea 12(sp),sp
   12036:	|      tst.w d0
   12038:	|  /-- bne.s 1203e <builtIn_parallaxAdd+0x9c>
   1203a:	|  |   moveq #1,d0
   1203c:	+--|-- bra.s 120a4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1203e:	|  \-> moveq #24,d0
   12040:	|      add.l 24(sp),d0
   12044:	|      move.l d0,-(sp)
   12046:	|      jsr 142d8 <trimStack>
   1204c:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   1204e:	|      move.l 8(sp),d0
   12052:	|      move.l d0,d0
   12054:	|      moveq #0,d2
   12056:	|      move.w d0,d2
   12058:	|      move.l 12(sp),d0
   1205c:	|      move.l d0,d0
   1205e:	|      moveq #0,d1
   12060:	|      move.w d0,d1
   12062:	|      move.l 4(sp),d0
   12066:	|      move.l d0,d0
   12068:	|      move.w d0,d0
   1206a:	|      andi.l #65535,d0
   12070:	|      move.l d2,-(sp)
   12072:	|      move.l d1,-(sp)
   12074:	|      move.l d0,-(sp)
   12076:	|      jsr c594 <loadParallax>
   1207c:	|      lea 12(sp),sp
   12080:	|      tst.w d0
   12082:	|  /-- bne.s 12088 <builtIn_parallaxAdd+0xe6>
   12084:	|  |   moveq #1,d0
   12086:	+--|-- bra.s 120a4 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12088:	|  \-> moveq #28,d0
   1208a:	|      add.l 24(sp),d0
   1208e:	|      pea 1 <_start+0x1>
   12092:	|      pea 1 <_start+0x1>
   12096:	|      move.l d0,-(sp)
   12098:	|      jsr 14246 <setVariable>
   1209e:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   120a2:	|      moveq #2,d0
}
   120a4:	\----> move.l (sp)+,d2
   120a6:	       lea 12(sp),sp
   120aa:	       rts

000120ac <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   120ac:	jsr c4cc <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   120b2:	moveq #28,d0
   120b4:	add.l 8(sp),d0
   120b8:	pea 1 <_start+0x1>
   120bc:	pea 1 <_start+0x1>
   120c0:	move.l d0,-(sp)
   120c2:	jsr 14246 <setVariable>
   120c8:	lea 12(sp),sp
	return BR_CONTINUE;
   120cc:	moveq #2,d0
}
   120ce:	rts

000120d0 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   120d0:	pea 18ae8 <PutChar+0x1f24>
   120d6:	jsr 16274 <KPrintF>
   120dc:	addq.l #4,sp

	return BR_CONTINUE;
   120de:	moveq #2,d0
}
   120e0:	rts

000120e2 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   120e2:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   120e4:	             movea.l 16(sp),a0
   120e8:	             movea.l 24(a0),a0
   120ec:	             move.l (a0),d0
   120ee:	             moveq #1,d1
   120f0:	             cmp.l d0,d1
   120f2:	      /----- beq.s 1213a <builtIn_makeFastArray+0x58>
   120f4:	      |      moveq #6,d1
   120f6:	      |      cmp.l d0,d1
   120f8:	/-----|----- bne.s 12178 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   120fa:	|     |      movea.l 16(sp),a0
   120fe:	|     |      movea.l 24(a0),a0
   12102:	|     |      move.l 4(a0),d1
   12106:	|     |      moveq #28,d0
   12108:	|     |      add.l 16(sp),d0
   1210c:	|     |      move.l d1,-(sp)
   1210e:	|     |      move.l d0,-(sp)
   12110:	|     |      jsr 13a06 <makeFastArrayFromStack>
   12116:	|     |      addq.l #8,sp
   12118:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   1211c:	|     |      moveq #24,d0
   1211e:	|     |      add.l 16(sp),d0
   12122:	|     |      move.l d0,-(sp)
   12124:	|     |      jsr 142d8 <trimStack>
   1212a:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   1212c:	|     |      tst.w 6(sp)
   12130:	|     |  /-- beq.s 12136 <builtIn_makeFastArray+0x54>
   12132:	|     |  |   moveq #2,d0
   12134:	|  /--|--|-- bra.s 1218a <builtIn_makeFastArray+0xa8>
   12136:	|  |  |  \-> moveq #1,d0
   12138:	|  +--|----- bra.s 1218a <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1213a:	|  |  \----> movea.l 16(sp),a0
   1213e:	|  |         movea.l 24(a0),a0
   12142:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12148:	|  |         moveq #24,d0
   1214a:	|  |         add.l 16(sp),d0
   1214e:	|  |         move.l d0,-(sp)
   12150:	|  |         jsr 142d8 <trimStack>
   12156:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12158:	|  |         moveq #28,d0
   1215a:	|  |         add.l 16(sp),d0
   1215e:	|  |         move.l 2(sp),-(sp)
   12162:	|  |         move.l d0,-(sp)
   12164:	|  |         jsr 13a70 <makeFastArraySize>
   1216a:	|  |         addq.l #8,sp
   1216c:	|  |         tst.w d0
   1216e:	|  |     /-- beq.s 12174 <builtIn_makeFastArray+0x92>
   12170:	|  |     |   moveq #2,d0
   12172:	|  +-----|-- bra.s 1218a <builtIn_makeFastArray+0xa8>
   12174:	|  |     \-> moveq #1,d0
   12176:	|  +-------- bra.s 1218a <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12178:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1217a:	   |         pea 18b11 <PutChar+0x1f4d>
   12180:	   |         jsr 16274 <KPrintF>
   12186:	   |         addq.l #4,sp
	return BR_ERROR;
   12188:	   |         moveq #1,d0
}
   1218a:	   \-------> addq.l #8,sp
   1218c:	             rts

0001218e <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   1218e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12190:	          movea.l 16(sp),a0
   12194:	          move.l 24(a0),d0
   12198:	          move.l d0,-(sp)
   1219a:	          pea 7 <_start+0x7>
   1219e:	          move.l sp,d0
   121a0:	          addq.l #8,d0
   121a2:	          move.l d0,-(sp)
   121a4:	          jsr 13954 <getValueType>
   121aa:	          lea 12(sp),sp
   121ae:	          tst.w d0
   121b0:	      /-- bne.s 121b6 <builtIn_getCharacterScale+0x28>
   121b2:	      |   moveq #1,d0
   121b4:	/-----|-- bra.s 12230 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   121b6:	|     \-> moveq #24,d0
   121b8:	|         add.l 16(sp),d0
   121bc:	|         move.l d0,-(sp)
   121be:	|         jsr 142d8 <trimStack>
   121c4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   121c6:	|         move.l (sp),d0
   121c8:	|         move.l d0,-(sp)
   121ca:	|         jsr 9866 <findPerson>
   121d0:	|         addq.l #4,sp
   121d2:	|         move.l d0,4(sp)
	if (pers) {
   121d6:	|  /----- beq.s 12216 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   121d8:	|  |      movea.l 4(sp),a0
   121dc:	|  |      move.l 32(a0),d0
   121e0:	|  |      move.l #1120403456,-(sp)
   121e6:	|  |      move.l d0,-(sp)
   121e8:	|  |      jsr 165de <__mulsf3>
   121ee:	|  |      addq.l #8,sp
   121f0:	|  |      move.l d0,-(sp)
   121f2:	|  |      jsr 164c4 <__fixsfsi>
   121f8:	|  |      addq.l #4,sp
   121fa:	|  |      move.l d0,d1
   121fc:	|  |      moveq #28,d0
   121fe:	|  |      add.l 16(sp),d0
   12202:	|  |      move.l d1,-(sp)
   12204:	|  |      pea 1 <_start+0x1>
   12208:	|  |      move.l d0,-(sp)
   1220a:	|  |      jsr 14246 <setVariable>
   12210:	|  |      lea 12(sp),sp
   12214:	|  |  /-- bra.s 1222e <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12216:	|  \--|-> moveq #28,d0
   12218:	|     |   add.l 16(sp),d0
   1221c:	|     |   clr.l -(sp)
   1221e:	|     |   pea 1 <_start+0x1>
   12222:	|     |   move.l d0,-(sp)
   12224:	|     |   jsr 14246 <setVariable>
   1222a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1222e:	|     \-> moveq #2,d0
}
   12230:	\-------> addq.l #8,sp
   12232:	          rts

00012234 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12234:	move.l 1b97c <gameSettings>,d0
   1223a:	move.l d0,d1
   1223c:	moveq #28,d0
   1223e:	add.l 8(sp),d0
   12242:	move.l d1,-(sp)
   12244:	pea 1 <_start+0x1>
   12248:	move.l d0,-(sp)
   1224a:	jsr 14246 <setVariable>
   12250:	lea 12(sp),sp
	return BR_CONTINUE;
   12254:	moveq #2,d0
}
   12256:	rts

00012258 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12258:	moveq #24,d0
   1225a:	add.l 8(sp),d0
   1225e:	move.l d0,-(sp)
   12260:	jsr 142d8 <trimStack>
   12266:	addq.l #4,sp
	trimStack (&fun -> stack);
   12268:	moveq #24,d0
   1226a:	add.l 8(sp),d0
   1226e:	move.l d0,-(sp)
   12270:	jsr 142d8 <trimStack>
   12276:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12278:	moveq #28,d0
   1227a:	add.l 8(sp),d0
   1227e:	clr.l -(sp)
   12280:	pea 1 <_start+0x1>
   12284:	move.l d0,-(sp)
   12286:	jsr 14246 <setVariable>
   1228c:	lea 12(sp),sp

	return BR_CONTINUE;
   12290:	moveq #2,d0

}
   12292:	rts

00012294 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12294:	move.l 1b1ca <lastFramesPerSecond>,d1
   1229a:	moveq #28,d0
   1229c:	add.l 8(sp),d0
   122a0:	move.l d1,-(sp)
   122a2:	pea 1 <_start+0x1>
   122a6:	move.l d0,-(sp)
   122a8:	jsr 14246 <setVariable>
   122ae:	lea 12(sp),sp
	return BR_CONTINUE;
   122b2:	moveq #2,d0
}
   122b4:	rts

000122b6 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   122b6:	moveq #2,d0
}
   122b8:	rts

000122ba <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   122ba:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122be:	          movea.l 60(sp),a0
   122c2:	          move.l 24(a0),d0
   122c6:	          move.l d0,-(sp)
   122c8:	          pea 1 <_start+0x1>
   122cc:	          pea 1b760 <thumbHeight>
   122d2:	          jsr 13954 <getValueType>
   122d8:	          lea 12(sp),sp
   122dc:	          tst.w d0
   122de:	      /-- bne.s 122e6 <builtIn_setThumbnailSize+0x2c>
   122e0:	      |   moveq #1,d0
   122e2:	/-----|-- bra.w 123a2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   122e6:	|     \-> moveq #24,d0
   122e8:	|         add.l 60(sp),d0
   122ec:	|         move.l d0,-(sp)
   122ee:	|         jsr 142d8 <trimStack>
   122f4:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122f6:	|         movea.l 60(sp),a0
   122fa:	|         move.l 24(a0),d0
   122fe:	|         move.l d0,-(sp)
   12300:	|         pea 1 <_start+0x1>
   12304:	|         pea 1b75c <thumbWidth>
   1230a:	|         jsr 13954 <getValueType>
   12310:	|         lea 12(sp),sp
   12314:	|         tst.w d0
   12316:	|     /-- bne.s 1231e <builtIn_setThumbnailSize+0x64>
   12318:	|     |   moveq #1,d0
   1231a:	+-----|-- bra.w 123a2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1231e:	|     \-> moveq #24,d0
   12320:	|         add.l 60(sp),d0
   12324:	|         move.l d0,-(sp)
   12326:	|         jsr 142d8 <trimStack>
   1232c:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1232e:	|         move.l 1b75c <thumbWidth>,d0
   12334:	|     /-- bmi.s 12362 <builtIn_setThumbnailSize+0xa8>
   12336:	|     |   move.l 1b760 <thumbHeight>,d0
   1233c:	|     +-- bmi.s 12362 <builtIn_setThumbnailSize+0xa8>
   1233e:	|     |   move.l 1b75c <thumbWidth>,d0
   12344:	|     |   move.l d0,d1
   12346:	|     |   move.l 1b79c <winWidth>,d0
   1234c:	|     |   cmp.l d1,d0
   1234e:	|     +-- bcs.s 12362 <builtIn_setThumbnailSize+0xa8>
   12350:	|     |   move.l 1b760 <thumbHeight>,d0
   12356:	|     |   move.l d0,d1
   12358:	|     |   move.l 1b7a0 <winHeight>,d0
   1235e:	|     |   cmp.l d1,d0
   12360:	|  /--|-- bcc.s 123a0 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12362:	|  |  \-> move.l 1b760 <thumbHeight>,d1
   12368:	|  |      move.l 1b75c <thumbWidth>,d0
   1236e:	|  |      move.l d1,-(sp)
   12370:	|  |      move.l d0,-(sp)
   12372:	|  |      pea 18b38 <PutChar+0x1f74>
   12378:	|  |      lea 14(sp),a0
   1237c:	|  |      move.l a0,-(sp)
   1237e:	|  |      jsr 1315e <sprintf>
   12384:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12388:	|  |      lea 2(sp),a0
   1238c:	|  |      move.l a0,-(sp)
   1238e:	|  |      pea 18b40 <PutChar+0x1f7c>
   12394:	|  |      jsr 16274 <KPrintF>
   1239a:	|  |      addq.l #8,sp
		return BR_ERROR;
   1239c:	|  |      moveq #1,d0
   1239e:	+--|----- bra.s 123a2 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   123a0:	|  \----> moveq #2,d0
}
   123a2:	\-------> lea 52(sp),sp
   123a6:	          rts

000123a8 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   123a8:	       lea -12(sp),sp
   123ac:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123ae:	       movea.l 24(sp),a0
   123b2:	       move.l 24(a0),d0
   123b6:	       move.l d0,-(sp)
   123b8:	       pea 1 <_start+0x1>
   123bc:	       lea 12(sp),a0
   123c0:	       move.l a0,-(sp)
   123c2:	       jsr 13954 <getValueType>
   123c8:	       lea 12(sp),sp
   123cc:	       tst.w d0
   123ce:	   /-- bne.s 123d6 <builtIn_hasFlag+0x2e>
   123d0:	   |   moveq #1,d0
   123d2:	/--|-- bra.w 12466 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   123d6:	|  \-> moveq #24,d0
   123d8:	|      add.l 24(sp),d0
   123dc:	|      move.l d0,-(sp)
   123de:	|      jsr 142d8 <trimStack>
   123e4:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123e6:	|      movea.l 24(sp),a0
   123ea:	|      move.l 24(a0),d0
   123ee:	|      move.l d0,-(sp)
   123f0:	|      pea 7 <_start+0x7>
   123f4:	|      moveq #16,d0
   123f6:	|      add.l sp,d0
   123f8:	|      move.l d0,-(sp)
   123fa:	|      jsr 13954 <getValueType>
   12400:	|      lea 12(sp),sp
   12404:	|      tst.w d0
   12406:	|  /-- bne.s 1240c <builtIn_hasFlag+0x64>
   12408:	|  |   moveq #1,d0
   1240a:	+--|-- bra.s 12466 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1240c:	|  \-> moveq #24,d0
   1240e:	|      add.l 24(sp),d0
   12412:	|      move.l d0,-(sp)
   12414:	|      jsr 142d8 <trimStack>
   1241a:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1241c:	|      move.l 8(sp),d0
   12420:	|      move.l d0,-(sp)
   12422:	|      jsr c740 <findObjectType>
   12428:	|      addq.l #4,sp
   1242a:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1242e:	|  /-- bne.s 12434 <builtIn_hasFlag+0x8c>
   12430:	|  |   moveq #1,d0
   12432:	+--|-- bra.s 12466 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12434:	|  \-> movea.l 12(sp),a0
   12438:	|      move.w 36(a0),d0
   1243c:	|      moveq #0,d2
   1243e:	|      move.w d0,d2
   12440:	|      move.l 4(sp),d1
   12444:	|      moveq #1,d0
   12446:	|      lsl.l d1,d0
   12448:	|      move.l d2,d1
   1244a:	|      and.l d0,d1
   1244c:	|      moveq #28,d0
   1244e:	|      add.l 24(sp),d0
   12452:	|      move.l d1,-(sp)
   12454:	|      pea 1 <_start+0x1>
   12458:	|      move.l d0,-(sp)
   1245a:	|      jsr 14246 <setVariable>
   12460:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12464:	|      moveq #2,d0
}
   12466:	\----> move.l (sp)+,d2
   12468:	       lea 12(sp),sp
   1246c:	       rts

0001246e <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1246e:	       jsr c72e <snapshot>
   12474:	       tst.w d0
   12476:	/----- beq.s 1247c <builtIn_snapshotGrab+0xe>
   12478:	|      moveq #2,d0
   1247a:	|  /-- bra.s 1247e <builtIn_snapshotGrab+0x10>
   1247c:	\--|-> moveq #1,d0
}
   1247e:	   \-> rts

00012480 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   12480:	jsr c5da <nosnapshot>
	return BR_CONTINUE;
   12486:	moveq #2,d0
}
   12488:	rts

0001248a <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1248a:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1248c:	move.w 1b0a6 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   12494:	movea.l 12(sp),a0
   12498:	move.l 24(a0),d0
   1249c:	move.l d0,-(sp)
   1249e:	jsr 13e94 <getBoolean>
   124a4:	addq.l #4,sp
   124a6:	move.w d0,1b0a6 <allowAnyFilename>
	trimStack (&fun -> stack);
   124ac:	moveq #24,d0
   124ae:	add.l 12(sp),d0
   124b2:	move.l d0,-(sp)
   124b4:	jsr 142d8 <trimStack>
   124ba:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   124bc:	movea.w 2(sp),a0
   124c0:	moveq #28,d0
   124c2:	add.l 12(sp),d0
   124c6:	move.l a0,-(sp)
   124c8:	pea 1 <_start+0x1>
   124cc:	move.l d0,-(sp)
   124ce:	jsr 14246 <setVariable>
   124d4:	lea 12(sp),sp
	return BR_CONTINUE;
   124d8:	moveq #2,d0
}
   124da:	addq.l #4,sp
   124dc:	rts

000124de <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   124de:	moveq #24,d0
   124e0:	add.l 8(sp),d0
   124e4:	move.l d0,-(sp)
   124e6:	jsr 142d8 <trimStack>
   124ec:	addq.l #4,sp
	trimStack (&fun -> stack);
   124ee:	moveq #24,d0
   124f0:	add.l 8(sp),d0
   124f4:	move.l d0,-(sp)
   124f6:	jsr 142d8 <trimStack>
   124fc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   124fe:	moveq #28,d0
   12500:	add.l 8(sp),d0
   12504:	clr.l -(sp)
   12506:	pea 1 <_start+0x1>
   1250a:	move.l d0,-(sp)
   1250c:	jsr 14246 <setVariable>
   12512:	lea 12(sp),sp

	return BR_CONTINUE;
   12516:	moveq #2,d0
}
   12518:	rts

0001251a <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1251a:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1251c:	movea.l 12(sp),a0
   12520:	move.l 24(a0),d0
   12524:	move.l d0,-(sp)
   12526:	jsr 13f2a <getTextFromAnyVar>
   1252c:	addq.l #4,sp
   1252e:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12530:	moveq #24,d0
   12532:	add.l 12(sp),d0
   12536:	move.l d0,-(sp)
   12538:	jsr 142d8 <trimStack>
   1253e:	addq.l #4,sp
	KPrintF (mess);
   12540:	move.l (sp),-(sp)
   12542:	jsr 16274 <KPrintF>
   12548:	addq.l #4,sp
	return BR_ERROR;
   1254a:	moveq #1,d0
}
   1254c:	addq.l #4,sp
   1254e:	rts

00012550 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12550:	moveq #24,d0
   12552:	add.l 8(sp),d0
   12556:	move.l d0,-(sp)
   12558:	jsr 142d8 <trimStack>
   1255e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12560:	moveq #24,d0
   12562:	add.l 8(sp),d0
   12566:	move.l d0,-(sp)
   12568:	jsr 142d8 <trimStack>
   1256e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12570:	moveq #24,d0
   12572:	add.l 8(sp),d0
   12576:	move.l d0,-(sp)
   12578:	jsr 142d8 <trimStack>
   1257e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12580:	moveq #24,d0
   12582:	add.l 8(sp),d0
   12586:	move.l d0,-(sp)
   12588:	jsr 142d8 <trimStack>
   1258e:	addq.l #4,sp

	return BR_CONTINUE;
   12590:	moveq #2,d0
}
   12592:	rts

00012594 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12594:	moveq #24,d0
   12596:	add.l 8(sp),d0
   1259a:	move.l d0,-(sp)
   1259c:	jsr 142d8 <trimStack>
   125a2:	addq.l #4,sp
	trimStack (&fun -> stack);
   125a4:	moveq #24,d0
   125a6:	add.l 8(sp),d0
   125aa:	move.l d0,-(sp)
   125ac:	jsr 142d8 <trimStack>
   125b2:	addq.l #4,sp
	trimStack (&fun -> stack);
   125b4:	moveq #24,d0
   125b6:	add.l 8(sp),d0
   125ba:	move.l d0,-(sp)
   125bc:	jsr 142d8 <trimStack>
   125c2:	addq.l #4,sp

	return BR_CONTINUE;
   125c4:	moveq #2,d0

}
   125c6:	rts

000125c8 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   125c8:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   125ca:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   125d0:	sne d0
   125d2:	neg.b d0
   125d4:	moveq #0,d1
   125d6:	move.b d0,d1
   125d8:	moveq #28,d0
   125da:	add.l 12(sp),d0
   125de:	move.l d1,-(sp)
   125e0:	pea 1 <_start+0x1>
   125e4:	move.l d0,-(sp)
   125e6:	jsr 14246 <setVariable>
   125ec:	lea 12(sp),sp
	return BR_CONTINUE;
   125f0:	moveq #2,d0
}
   125f2:	addq.l #4,sp
   125f4:	rts

000125f6 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   125f6:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   125f8:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   125fe:	pea 18b57 <PutChar+0x1f93>
   12604:	jsr 16274 <KPrintF>
   1260a:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1260c:	tst.w 2(sp)
   12610:	sne d0
   12612:	neg.b d0
   12614:	moveq #0,d1
   12616:	move.b d0,d1
   12618:	moveq #28,d0
   1261a:	add.l 12(sp),d0
   1261e:	move.l d1,-(sp)
   12620:	pea 1 <_start+0x1>
   12624:	move.l d0,-(sp)
   12626:	jsr 14246 <setVariable>
   1262c:	lea 12(sp),sp
	return BR_CONTINUE;
   12630:	moveq #2,d0
}
   12632:	addq.l #4,sp
   12634:	rts

00012636 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12636:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1263a:	             move.l 104(sp),d0
   1263e:	             cmpi.l #166,d0
   12644:	/----------- bhi.w 12726 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12648:	|            move.l 104(sp),d0
   1264c:	|            add.l d0,d0
   1264e:	|            movea.l d0,a1
   12650:	|            adda.l d0,a1
   12652:	|            lea 1b1ec <paramNum>,a0
   12658:	|            move.l (0,a1,a0.l),d0
   1265c:	|            moveq #-1,d1
   1265e:	|            cmp.l d0,d1
   12660:	|  /-------- beq.w 126ee <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   12664:	|  |         move.l 104(sp),d0
   12668:	|  |         add.l d0,d0
   1266a:	|  |         movea.l d0,a1
   1266c:	|  |         adda.l d0,a1
   1266e:	|  |         lea 1b1ec <paramNum>,a0
   12674:	|  |         move.l (0,a1,a0.l),d0
   12678:	|  |         cmp.l 108(sp),d0
   1267c:	|  +-------- beq.s 126ee <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1267e:	|  |         move.l 104(sp),d0
   12682:	|  |         add.l d0,d0
   12684:	|  |         movea.l d0,a1
   12686:	|  |         adda.l d0,a1
   12688:	|  |         lea 1b1ec <paramNum>,a0
   1268e:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   12692:	|  |         moveq #1,d1
   12694:	|  |         cmp.l d0,d1
   12696:	|  |  /----- bne.s 126a0 <callBuiltIn+0x6a>
   12698:	|  |  |      move.l #96222,d0
   1269e:	|  |  |  /-- bra.s 126a6 <callBuiltIn+0x70>
   126a0:	|  |  \--|-> move.l #101261,d0
   126a6:	|  |     \-> move.l 104(sp),d1
   126aa:	|  |         add.l d1,d1
   126ac:	|  |         movea.l d1,a1
   126ae:	|  |         adda.l d1,a1
   126b0:	|  |         lea 1b1ec <paramNum>,a0
   126b6:	|  |         move.l (0,a1,a0.l),d1
   126ba:	|  |         move.l d0,-(sp)
   126bc:	|  |         move.l d1,-(sp)
   126be:	|  |         pea 18b8f <PutChar+0x1fcb>
   126c4:	|  |         lea 12(sp),a0
   126c8:	|  |         move.l a0,-(sp)
   126ca:	|  |         jsr 1315e <sprintf>
   126d0:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   126d4:	|  |         movea.l sp,a0
   126d6:	|  |         move.l a0,-(sp)
   126d8:	|  |         jsr b8 <copyString>
   126de:	|  |         addq.l #4,sp
   126e0:	|  |         move.l d0,-(sp)
   126e2:	|  |         jsr 16274 <KPrintF>
   126e8:	|  |         addq.l #4,sp
				return BR_ERROR;
   126ea:	|  |         moveq #1,d0
   126ec:	|  |     /-- bra.s 12736 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   126ee:	|  \-----|-> move.l 104(sp),d0
   126f2:	|        |   add.l d0,d0
   126f4:	|        |   movea.l d0,a1
   126f6:	|        |   adda.l d0,a1
   126f8:	|        |   lea 1b488 <builtInFunctionArray>,a0
   126fe:	|        |   move.l (0,a1,a0.l),d0
   12702:	+--------|-- beq.s 12726 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   12704:	|        |   move.l 104(sp),d0
   12708:	|        |   add.l d0,d0
   1270a:	|        |   movea.l d0,a1
   1270c:	|        |   adda.l d0,a1
   1270e:	|        |   lea 1b488 <builtInFunctionArray>,a0
   12714:	|        |   movea.l (0,a1,a0.l),a0
   12718:	|        |   move.l 112(sp),-(sp)
   1271c:	|        |   move.l 112(sp),-(sp)
   12720:	|        |   jsr (a0)
   12722:	|        |   addq.l #8,sp
   12724:	|        +-- bra.s 12736 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12726:	\--------|-> pea 18bba <PutChar+0x1ff6>
   1272c:	         |   jsr 16274 <KPrintF>
   12732:	         |   addq.l #4,sp
	return BR_ERROR;
   12734:	         |   moveq #1,d0
}
   12736:	         \-> lea 100(sp),sp
   1273a:	             rts

0001273c <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   1273c:	          subq.l #8,sp
	int indexNum = -1;
   1273e:	          moveq #-1,d0
   12740:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12744:	          clr.l (sp)
   12746:	   /----- bra.s 1276c <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12748:	/--|----> move.l 1b974 <languageTable>,d1
   1274e:	|  |      move.l (sp),d0
   12750:	|  |      add.l d0,d0
   12752:	|  |      add.l d0,d0
   12754:	|  |      movea.l d1,a0
   12756:	|  |      adda.l d0,a0
   12758:	|  |      move.l (a0),d0
   1275a:	|  |      move.l d0,d1
   1275c:	|  |      move.l 1b97c <gameSettings>,d0
   12762:	|  |      cmp.l d1,d0
   12764:	|  |  /-- bne.s 1276a <getLanguageForFileB+0x2e>
   12766:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1276a:	|  |  \-> addq.l #1,(sp)
   1276c:	|  \----> move.l 1b980 <gameSettings+0x4>,d0
   12772:	|         cmp.l (sp),d0
   12774:	\-------- bcc.s 12748 <getLanguageForFileB+0xc>
	}

	return indexNum;
   12776:	          move.l 4(sp),d0
}
   1277a:	          addq.l #8,sp
   1277c:	          rts

0001277e <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1277e:	          lea -20(sp),sp
   12782:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   12784:	          move.l 28(sp),-(sp)
   12788:	          jsr 12e40 <strlen>
   1278e:	          addq.l #4,sp
   12790:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   12794:	          moveq #4,d0
   12796:	          cmp.l 12(sp),d0
   1279a:	      /-- bge.s 127be <getPrefsFilename+0x40>
   1279c:	      |   move.l 12(sp),d0
   127a0:	      |   subq.l #4,d0
   127a2:	      |   movea.l 28(sp),a0
   127a6:	      |   adda.l d0,a0
   127a8:	      |   move.b (a0),d0
   127aa:	      |   cmpi.b #46,d0
   127ae:	      +-- bne.s 127be <getPrefsFilename+0x40>
		filename[n-4] = 0;
   127b0:	      |   move.l 12(sp),d0
   127b4:	      |   subq.l #4,d0
   127b6:	      |   movea.l 28(sp),a0
   127ba:	      |   adda.l d0,a0
   127bc:	      |   clr.b (a0)
	}

	char * f = filename;
   127be:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   127c4:	          clr.l 20(sp)
   127c8:	   /----- bra.s 127f0 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   127ca:	/--|----> move.l 20(sp),d0
   127ce:	|  |      movea.l 28(sp),a0
   127d2:	|  |      adda.l d0,a0
   127d4:	|  |      move.b (a0),d0
   127d6:	|  |      cmpi.b #47,d0
   127da:	|  |  /-- bne.s 127ec <getPrefsFilename+0x6e>
   127dc:	|  |  |   move.l 20(sp),d0
   127e0:	|  |  |   addq.l #1,d0
   127e2:	|  |  |   move.l 28(sp),d1
   127e6:	|  |  |   add.l d0,d1
   127e8:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   127ec:	|  |  \-> addq.l #1,20(sp)
   127f0:	|  \----> move.l 20(sp),d0
   127f4:	|         cmp.l 12(sp),d0
   127f8:	\-------- blt.s 127ca <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   127fa:	          pea 18be5 <PutChar+0x2021>
   12800:	          move.l 20(sp),-(sp)
   12804:	          jsr 12e80 <joinStrings>
   1280a:	          addq.l #8,sp
   1280c:	          move.l d0,8(sp)

	FreeVec(filename);
   12810:	          move.l 28(sp),4(sp)
   12816:	          move.l 1b848 <SysBase>,d0
   1281c:	          movea.l d0,a6
   1281e:	          movea.l 4(sp),a1
   12822:	          jsr -690(a6)
	filename = NULL;
   12826:	          clr.l 28(sp)
	return joined;
   1282a:	          move.l 8(sp),d0
}
   1282e:	          movea.l (sp)+,a6
   12830:	          lea 20(sp),sp
   12834:	          rts

00012836 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   12836:	             lea -28(sp),sp
   1283a:	             move.l a6,-(sp)
   1283c:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1283e:	             move.l 1b980 <gameSettings+0x4>,d0
   12844:	             move.l d0,d1
   12846:	             addq.l #1,d1
   12848:	             move.l d1,28(sp)
   1284c:	             clr.l 24(sp)
   12850:	             move.l 1b848 <SysBase>,d0
   12856:	             movea.l d0,a6
   12858:	             move.l 28(sp),d0
   1285c:	             move.l 24(sp),d1
   12860:	             jsr -684(a6)
   12864:	             move.l d0,20(sp)
   12868:	             move.l 20(sp),d0
   1286c:	             move.l d0,1b974 <languageTable>
    if( languageTable == 0) {
   12872:	             move.l 1b974 <languageTable>,d0
   12878:	         /-- bne.s 12888 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1287a:	         |   pea 18bea <PutChar+0x2026>
   12880:	         |   jsr 16274 <KPrintF>
   12886:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12888:	         \-> move.l 1b980 <gameSettings+0x4>,d0
   1288e:	             move.l d0,d1
   12890:	             addq.l #1,d1
   12892:	             move.l d1,16(sp)
   12896:	             clr.l 12(sp)
   1289a:	             move.l 1b848 <SysBase>,d0
   128a0:	             movea.l d0,a6
   128a2:	             move.l 16(sp),d0
   128a6:	             move.l 12(sp),d1
   128aa:	             jsr -684(a6)
   128ae:	             move.l d0,8(sp)
   128b2:	             move.l 8(sp),d0
   128b6:	             move.l d0,1b978 <languageName>
	if( languageName == 0) {
   128bc:	             move.l 1b978 <languageName>,d0
   128c2:	         /-- bne.s 128d2 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   128c4:	         |   pea 18c20 <PutChar+0x205c>
   128ca:	         |   jsr 16274 <KPrintF>
   128d0:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   128d2:	         \-> clr.l 32(sp)
   128d6:	   /-------- bra.s 1294e <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   128d8:	/--|-------> tst.l 32(sp)
   128dc:	|  |  /----- beq.s 128ec <makeLanguageTable+0xb6>
   128de:	|  |  |      move.l 40(sp),-(sp)
   128e2:	|  |  |      jsr 6bc <get2bytes>
   128e8:	|  |  |      addq.l #4,sp
   128ea:	|  |  |  /-- bra.s 128ee <makeLanguageTable+0xb8>
   128ec:	|  |  \--|-> moveq #0,d0
   128ee:	|  |     \-> movea.l 1b974 <languageTable>,a0
   128f4:	|  |         move.l 32(sp),d1
   128f8:	|  |         add.l d1,d1
   128fa:	|  |         add.l d1,d1
   128fc:	|  |         adda.l d1,a0
   128fe:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   12900:	|  |         move.l 1b978 <languageName>,d1
   12906:	|  |         move.l 32(sp),d0
   1290a:	|  |         add.l d0,d0
   1290c:	|  |         add.l d0,d0
   1290e:	|  |         movea.l d1,a0
   12910:	|  |         adda.l d0,a0
   12912:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   12914:	|  |         move.l 1b7f2 <gameVersion>,d0
   1291a:	|  |         cmpi.l #511,d0
   12920:	|  |     /-- ble.s 1294a <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   12922:	|  |     |   move.l 1b980 <gameSettings+0x4>,d0
   12928:	|  |     +-- beq.s 1294a <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1292a:	|  |     |   move.l 1b978 <languageName>,d1
   12930:	|  |     |   move.l 32(sp),d0
   12934:	|  |     |   add.l d0,d0
   12936:	|  |     |   add.l d0,d0
   12938:	|  |     |   movea.l d1,a2
   1293a:	|  |     |   adda.l d0,a2
   1293c:	|  |     |   move.l 40(sp),-(sp)
   12940:	|  |     |   jsr b02 <readString>
   12946:	|  |     |   addq.l #4,sp
   12948:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1294a:	|  |     \-> addq.l #1,32(sp)
   1294e:	|  \-------> move.l 1b980 <gameSettings+0x4>,d0
   12954:	|            cmp.l 32(sp),d0
   12958:	\----------- bcc.w 128d8 <makeLanguageTable+0xa2>
		}
	}
}
   1295c:	             nop
   1295e:	             nop
   12960:	             movea.l (sp)+,a2
   12962:	             movea.l (sp)+,a6
   12964:	             lea 28(sp),sp
   12968:	             rts

0001296a <readIniFile>:

void readIniFile (char * filename) {
   1296a:	                      lea -564(sp),sp
   1296e:	                      move.l a6,-(sp)
   12970:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   12972:	                      move.l 576(sp),-(sp)
   12976:	                      jsr b8 <copyString>
   1297c:	                      addq.l #4,sp
   1297e:	                      move.l d0,-(sp)
   12980:	                      jsr 1277e <getPrefsFilename>
   12986:	                      addq.l #4,sp
   12988:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   1298c:	                      move.l 562(sp),558(sp)
   12992:	                      move.l #1005,554(sp)
   1299a:	                      move.l 1b850 <DOSBase>,d0
   129a0:	                      movea.l d0,a6
   129a2:	                      move.l 558(sp),d1
   129a6:	                      move.l 554(sp),d2
   129aa:	                      jsr -30(a6)
   129ae:	                      move.l d0,550(sp)
   129b2:	                      move.l 550(sp),d0
   129b6:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   129ba:	                      clr.l 1b97c <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   129c0:	                      move.w #1,1b984 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   129c8:	                      clr.l 1b986 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   129ce:	                      moveq #1,d0
   129d0:	                      move.l d0,1b98a <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   129d6:	                      clr.w 1b98e <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   129dc:	                      clr.w 1b990 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   129e2:	                      clr.w 1b992 <gameSettings+0x16>

	FreeVec(langName);
   129e8:	                      move.l 562(sp),542(sp)
   129ee:	                      move.l 1b848 <SysBase>,d0
   129f4:	                      movea.l d0,a6
   129f6:	                      movea.l 542(sp),a1
   129fa:	                      jsr -690(a6)
	langName = NULL;
   129fe:	                      clr.l 562(sp)

	if (fp) {
   12a02:	                      tst.l 546(sp)
   12a06:	/-------------------- beq.w 12ce4 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   12a0a:	|                     move.l sp,d0
   12a0c:	|                     addi.l #265,d0
   12a12:	|                     move.l #257,d1
   12a18:	|                     move.l d1,-(sp)
   12a1a:	|                     clr.l -(sp)
   12a1c:	|                     move.l d0,-(sp)
   12a1e:	|                     jsr 161f8 <memset>
   12a24:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   12a28:	|                     move.l sp,d0
   12a2a:	|                     addq.l #8,d0
   12a2c:	|                     move.l #257,d1
   12a32:	|                     move.l d1,-(sp)
   12a34:	|                     clr.l -(sp)
   12a36:	|                     move.l d0,-(sp)
   12a38:	|                     jsr 161f8 <memset>
   12a3e:	|                     lea 12(sp),sp
		unsigned char here = 0;
   12a42:	|                     clr.b 571(sp)
		char readChar = ' ';
   12a46:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   12a4c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   12a52:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12a56:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   12a5a:	|  /----------------> move.l 546(sp),534(sp)
   12a60:	|  |                  move.l 1b850 <DOSBase>,d0
   12a66:	|  |                  movea.l d0,a6
   12a68:	|  |                  move.l 534(sp),d1
   12a6c:	|  |                  jsr -306(a6)
   12a70:	|  |                  move.l d0,530(sp)
   12a74:	|  |                  move.l 530(sp),d0
   12a78:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   12a7c:	|  |                  moveq #-1,d1
   12a7e:	|  |                  cmp.l 538(sp),d1
   12a82:	|  |           /----- bne.s 12a90 <readIniFile+0x126>
				readChar = '\n';
   12a84:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   12a8a:	|  |           |      clr.w 568(sp)
   12a8e:	|  |           |  /-- bra.s 12a96 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   12a90:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   12a96:	|  |              \-> move.b 570(sp),d0
   12a9a:	|  |                  ext.w d0
   12a9c:	|  |                  movea.w d0,a0
   12a9e:	|  |                  moveq #61,d0
   12aa0:	|  |                  cmp.l a0,d0
   12aa2:	|  |     /----------- beq.w 12c4c <readIniFile+0x2e2>
   12aa6:	|  |     |            moveq #61,d1
   12aa8:	|  |     |            cmp.l a0,d1
   12aaa:	|  |  /--|----------- blt.w 12c58 <readIniFile+0x2ee>
   12aae:	|  |  |  |            moveq #10,d0
   12ab0:	|  |  |  |            cmp.l a0,d0
   12ab2:	|  |  |  |        /-- beq.s 12abc <readIniFile+0x152>
   12ab4:	|  |  |  |        |   moveq #13,d1
   12ab6:	|  |  |  |        |   cmp.l a0,d1
   12ab8:	|  |  +--|--------|-- bne.w 12c58 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   12abc:	|  |  |  |        \-> tst.w 566(sp)
   12ac0:	|  |  |  |     /----- beq.w 12c3a <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   12ac4:	|  |  |  |     |      pea 18c54 <PutChar+0x2090>
   12aca:	|  |  |  |     |      move.l sp,d0
   12acc:	|  |  |  |     |      addi.l #269,d0
   12ad2:	|  |  |  |     |      move.l d0,-(sp)
   12ad4:	|  |  |  |     |      jsr 12e00 <strcmp>
   12ada:	|  |  |  |     |      addq.l #8,sp
   12adc:	|  |  |  |     |      tst.l d0
   12ade:	|  |  |  |     |  /-- bne.s 12af8 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   12ae0:	|  |  |  |     |  |   move.l sp,d0
   12ae2:	|  |  |  |     |  |   addq.l #8,d0
   12ae4:	|  |  |  |     |  |   move.l d0,-(sp)
   12ae6:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12aec:	|  |  |  |     |  |   addq.l #4,sp
   12aee:	|  |  |  |     |  |   move.l d0,1b97c <gameSettings>
   12af4:	|  |  |  |     +--|-- bra.w 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   12af8:	|  |  |  |     |  \-> pea 18c5d <PutChar+0x2099>
   12afe:	|  |  |  |     |      move.l sp,d0
   12b00:	|  |  |  |     |      addi.l #269,d0
   12b06:	|  |  |  |     |      move.l d0,-(sp)
   12b08:	|  |  |  |     |      jsr 12e00 <strcmp>
   12b0e:	|  |  |  |     |      addq.l #8,sp
   12b10:	|  |  |  |     |      tst.l d0
   12b12:	|  |  |  |     |  /-- bne.s 12b38 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   12b14:	|  |  |  |     |  |   move.l sp,d0
   12b16:	|  |  |  |     |  |   addq.l #8,d0
   12b18:	|  |  |  |     |  |   move.l d0,-(sp)
   12b1a:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12b20:	|  |  |  |     |  |   addq.l #4,sp
   12b22:	|  |  |  |     |  |   tst.l d0
   12b24:	|  |  |  |     |  |   seq d0
   12b26:	|  |  |  |     |  |   neg.b d0
   12b28:	|  |  |  |     |  |   move.b d0,d0
   12b2a:	|  |  |  |     |  |   andi.w #255,d0
   12b2e:	|  |  |  |     |  |   move.w d0,1b984 <gameSettings+0x8>
   12b34:	|  |  |  |     +--|-- bra.w 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   12b38:	|  |  |  |     |  \-> pea 18c64 <PutChar+0x20a0>
   12b3e:	|  |  |  |     |      move.l sp,d0
   12b40:	|  |  |  |     |      addi.l #269,d0
   12b46:	|  |  |  |     |      move.l d0,-(sp)
   12b48:	|  |  |  |     |      jsr 12e00 <strcmp>
   12b4e:	|  |  |  |     |      addq.l #8,sp
   12b50:	|  |  |  |     |      tst.l d0
   12b52:	|  |  |  |     |  /-- bne.s 12b6c <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   12b54:	|  |  |  |     |  |   move.l sp,d0
   12b56:	|  |  |  |     |  |   addq.l #8,d0
   12b58:	|  |  |  |     |  |   move.l d0,-(sp)
   12b5a:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12b60:	|  |  |  |     |  |   addq.l #4,sp
   12b62:	|  |  |  |     |  |   move.l d0,1b986 <gameSettings+0xa>
   12b68:	|  |  |  |     +--|-- bra.w 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   12b6c:	|  |  |  |     |  \-> pea 18c6c <PutChar+0x20a8>
   12b72:	|  |  |  |     |      move.l sp,d0
   12b74:	|  |  |  |     |      addi.l #269,d0
   12b7a:	|  |  |  |     |      move.l d0,-(sp)
   12b7c:	|  |  |  |     |      jsr 12e00 <strcmp>
   12b82:	|  |  |  |     |      addq.l #8,sp
   12b84:	|  |  |  |     |      tst.l d0
   12b86:	|  |  |  |     |  /-- bne.s 12ba0 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   12b88:	|  |  |  |     |  |   move.l sp,d0
   12b8a:	|  |  |  |     |  |   addq.l #8,d0
   12b8c:	|  |  |  |     |  |   move.l d0,-(sp)
   12b8e:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12b94:	|  |  |  |     |  |   addq.l #4,sp
   12b96:	|  |  |  |     |  |   move.l d0,1b98a <gameSettings+0xe>
   12b9c:	|  |  |  |     +--|-- bra.w 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   12ba0:	|  |  |  |     |  \-> pea 18c76 <PutChar+0x20b2>
   12ba6:	|  |  |  |     |      move.l sp,d0
   12ba8:	|  |  |  |     |      addi.l #269,d0
   12bae:	|  |  |  |     |      move.l d0,-(sp)
   12bb0:	|  |  |  |     |      jsr 12e00 <strcmp>
   12bb6:	|  |  |  |     |      addq.l #8,sp
   12bb8:	|  |  |  |     |      tst.l d0
   12bba:	|  |  |  |     |  /-- bne.s 12bd4 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   12bbc:	|  |  |  |     |  |   move.l sp,d0
   12bbe:	|  |  |  |     |  |   addq.l #8,d0
   12bc0:	|  |  |  |     |  |   move.l d0,-(sp)
   12bc2:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12bc8:	|  |  |  |     |  |   addq.l #4,sp
   12bca:	|  |  |  |     |  |   move.l d0,d0
   12bcc:	|  |  |  |     |  |   move.w d0,1b98e <gameSettings+0x12>
   12bd2:	|  |  |  |     +--|-- bra.s 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   12bd4:	|  |  |  |     |  \-> pea 18c82 <PutChar+0x20be>
   12bda:	|  |  |  |     |      move.l sp,d0
   12bdc:	|  |  |  |     |      addi.l #269,d0
   12be2:	|  |  |  |     |      move.l d0,-(sp)
   12be4:	|  |  |  |     |      jsr 12e00 <strcmp>
   12bea:	|  |  |  |     |      addq.l #8,sp
   12bec:	|  |  |  |     |      tst.l d0
   12bee:	|  |  |  |     |  /-- bne.s 12c08 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   12bf0:	|  |  |  |     |  |   move.l sp,d0
   12bf2:	|  |  |  |     |  |   addq.l #8,d0
   12bf4:	|  |  |  |     |  |   move.l d0,-(sp)
   12bf6:	|  |  |  |     |  |   jsr 12cf0 <stringToInt>
   12bfc:	|  |  |  |     |  |   addq.l #4,sp
   12bfe:	|  |  |  |     |  |   move.l d0,d0
   12c00:	|  |  |  |     |  |   move.w d0,1b990 <gameSettings+0x14>
   12c06:	|  |  |  |     +--|-- bra.s 12c3a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   12c08:	|  |  |  |     |  \-> pea 18c90 <PutChar+0x20cc>
   12c0e:	|  |  |  |     |      move.l sp,d0
   12c10:	|  |  |  |     |      addi.l #269,d0
   12c16:	|  |  |  |     |      move.l d0,-(sp)
   12c18:	|  |  |  |     |      jsr 12e00 <strcmp>
   12c1e:	|  |  |  |     |      addq.l #8,sp
   12c20:	|  |  |  |     |      tst.l d0
   12c22:	|  |  |  |     +----- bne.s 12c3a <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   12c24:	|  |  |  |     |      move.l sp,d0
   12c26:	|  |  |  |     |      addq.l #8,d0
   12c28:	|  |  |  |     |      move.l d0,-(sp)
   12c2a:	|  |  |  |     |      jsr 12cf0 <stringToInt>
   12c30:	|  |  |  |     |      addq.l #4,sp
   12c32:	|  |  |  |     |      move.l d0,d0
   12c34:	|  |  |  |     |      move.w d0,1b992 <gameSettings+0x16>
					}
				}
				here = 0;
   12c3a:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   12c3e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   12c42:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   12c46:	|  |  |  |            clr.b 8(sp)
				break;
   12c4a:	|  |  |  |  /-------- bra.s 12cc2 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   12c4c:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   12c52:	|  |  |     |         clr.b 571(sp)
				break;
   12c56:	|  |  |     +-------- bra.s 12cc2 <readIniFile+0x358>

				default:
				if (doingSecond) {
   12c58:	|  |  \-----|-------> tst.w 566(sp)
   12c5c:	|  |        |  /----- beq.s 12c90 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   12c5e:	|  |        |  |      move.b 571(sp),d0
   12c62:	|  |        |  |      move.b d0,d1
   12c64:	|  |        |  |      addq.b #1,d1
   12c66:	|  |        |  |      move.b d1,571(sp)
   12c6a:	|  |        |  |      move.b d0,d0
   12c6c:	|  |        |  |      andi.l #255,d0
   12c72:	|  |        |  |      lea 572(sp),a0
   12c76:	|  |        |  |      adda.l d0,a0
   12c78:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   12c7e:	|  |        |  |      moveq #0,d0
   12c80:	|  |        |  |      move.b 571(sp),d0
   12c84:	|  |        |  |      lea 572(sp),a0
   12c88:	|  |        |  |      adda.l d0,a0
   12c8a:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   12c8e:	|  |        |  |  /-- bra.s 12cc0 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   12c90:	|  |        |  \--|-> move.b 571(sp),d0
   12c94:	|  |        |     |   move.b d0,d1
   12c96:	|  |        |     |   addq.b #1,d1
   12c98:	|  |        |     |   move.b d1,571(sp)
   12c9c:	|  |        |     |   move.b d0,d0
   12c9e:	|  |        |     |   andi.l #255,d0
   12ca4:	|  |        |     |   lea 572(sp),a0
   12ca8:	|  |        |     |   adda.l d0,a0
   12caa:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   12cb0:	|  |        |     |   moveq #0,d0
   12cb2:	|  |        |     |   move.b 571(sp),d0
   12cb6:	|  |        |     |   lea 572(sp),a0
   12cba:	|  |        |     |   adda.l d0,a0
   12cbc:	|  |        |     |   clr.b -307(a0)
				break;
   12cc0:	|  |        |     \-> nop
			}
		} while (keepGoing);
   12cc2:	|  |        \-------> tst.w 568(sp)
   12cc6:	|  \----------------- bne.w 12a5a <readIniFile+0xf0>

		Close(fp);
   12cca:	|                     move.l 546(sp),526(sp)
   12cd0:	|                     move.l 1b850 <DOSBase>,d0
   12cd6:	|                     movea.l d0,a6
   12cd8:	|                     move.l 526(sp),d1
   12cdc:	|                     jsr -36(a6)
   12ce0:	|                     move.l d0,522(sp)
	}
}
   12ce4:	\-------------------> nop
   12ce6:	                      move.l (sp)+,d2
   12ce8:	                      movea.l (sp)+,a6
   12cea:	                      lea 564(sp),sp
   12cee:	                      rts

00012cf0 <stringToInt>:

unsigned int stringToInt (char * s) {
   12cf0:	             subq.l #8,sp
	int i = 0;
   12cf2:	             clr.l 4(sp)
	BOOL negative = FALSE;
   12cf6:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   12cfa:	/----------> movea.l 12(sp),a0
   12cfe:	|            move.b (a0),d0
   12d00:	|            cmpi.b #47,d0
   12d04:	|        /-- ble.s 12d3c <stringToInt+0x4c>
   12d06:	|        |   movea.l 12(sp),a0
   12d0a:	|        |   move.b (a0),d0
   12d0c:	|        |   cmpi.b #57,d0
   12d10:	|        +-- bgt.s 12d3c <stringToInt+0x4c>
			i *= 10;
   12d12:	|        |   move.l 4(sp),d1
   12d16:	|        |   move.l d1,d0
   12d18:	|        |   add.l d0,d0
   12d1a:	|        |   add.l d0,d0
   12d1c:	|        |   add.l d1,d0
   12d1e:	|        |   add.l d0,d0
   12d20:	|        |   move.l d0,4(sp)
			i += *s - '0';
   12d24:	|        |   movea.l 12(sp),a0
   12d28:	|        |   move.b (a0),d0
   12d2a:	|        |   ext.w d0
   12d2c:	|        |   movea.w d0,a0
   12d2e:	|        |   moveq #-48,d0
   12d30:	|        |   add.l a0,d0
   12d32:	|        |   add.l d0,4(sp)
			s ++;
   12d36:	|        |   addq.l #1,12(sp)
   12d3a:	|  /-----|-- bra.s 12d74 <stringToInt+0x84>
		} else if (*s == '-') {
   12d3c:	|  |     \-> movea.l 12(sp),a0
   12d40:	|  |         move.b (a0),d0
   12d42:	|  |         cmpi.b #45,d0
   12d46:	|  |     /-- bne.s 12d60 <stringToInt+0x70>
			negative = ! negative;
   12d48:	|  |     |   tst.w 2(sp)
   12d4c:	|  |     |   seq d0
   12d4e:	|  |     |   neg.b d0
   12d50:	|  |     |   move.b d0,d0
   12d52:	|  |     |   andi.w #255,d0
   12d56:	|  |     |   move.w d0,2(sp)
			s++;
   12d5a:	|  |     |   addq.l #1,12(sp)
   12d5e:	+--|-----|-- bra.s 12cfa <stringToInt+0xa>
		} else {
			if (negative)
   12d60:	|  |     \-> tst.w 2(sp)
   12d64:	|  |     /-- beq.s 12d6e <stringToInt+0x7e>
				return -i;
   12d66:	|  |     |   move.l 4(sp),d0
   12d6a:	|  |     |   neg.l d0
   12d6c:	|  |  /--|-- bra.s 12d76 <stringToInt+0x86>
			return i;
   12d6e:	|  |  |  \-> move.l 4(sp),d0
   12d72:	|  |  +----- bra.s 12d76 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   12d74:	\--\--|----X bra.s 12cfa <stringToInt+0xa>
		}
	}
   12d76:	      \----> addq.l #8,sp
   12d78:	             rts

00012d7a <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   12d7a:	    lea -28(sp),sp
   12d7e:	    move.l a6,-(sp)
   12d80:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   12d82:	    pea 18c9a <PutChar+0x20d6>
   12d88:	    jsr 16274 <KPrintF>
   12d8e:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   12d90:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   12d94:	    move.l 40(sp),30(sp)
   12d9a:	    move.l #1005,26(sp)
   12da2:	    move.l 1b850 <DOSBase>,d0
   12da8:	    movea.l d0,a6
   12daa:	    move.l 30(sp),d1
   12dae:	    move.l 26(sp),d2
   12db2:	    jsr -30(a6)
   12db6:	    move.l d0,22(sp)
   12dba:	    move.l 22(sp),d0
   12dbe:	    move.l d0,18(sp)
	if (tester) {
   12dc2:	/-- beq.s 12df2 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12dc4:	|   pea 18cb4 <PutChar+0x20f0>
   12dca:	|   jsr 16274 <KPrintF>
   12dd0:	|   addq.l #4,sp
		retval = 1;
   12dd2:	|   move.b #1,35(sp)
		Close(tester);
   12dd8:	|   move.l 18(sp),14(sp)
   12dde:	|   move.l 1b850 <DOSBase>,d0
   12de4:	|   movea.l d0,a6
   12de6:	|   move.l 14(sp),d1
   12dea:	|   jsr -36(a6)
   12dee:	|   move.l d0,10(sp)
	}
	return retval;
   12df2:	\-> move.b 35(sp),d0
   12df6:	    move.l (sp)+,d2
   12df8:	    movea.l (sp)+,a6
   12dfa:	    lea 28(sp),sp
   12dfe:	    rts

00012e00 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12e00:	   /-- bra.s 12e0a <strcmp+0xa>
    {
        s1++;
   12e02:	/--|-> addq.l #1,4(sp)
        s2++;
   12e06:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12e0a:	|  \-> movea.l 4(sp),a0
   12e0e:	|      move.b (a0),d0
   12e10:	|  /-- beq.s 12e22 <strcmp+0x22>
   12e12:	|  |   movea.l 4(sp),a0
   12e16:	|  |   move.b (a0),d1
   12e18:	|  |   movea.l 8(sp),a0
   12e1c:	|  |   move.b (a0),d0
   12e1e:	|  |   cmp.b d1,d0
   12e20:	\--|-- beq.s 12e02 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12e22:	   \-> movea.l 4(sp),a0
   12e26:	       move.b (a0),d0
   12e28:	       moveq #0,d1
   12e2a:	       move.b d0,d1
   12e2c:	       movea.l 8(sp),a0
   12e30:	       move.b (a0),d0
   12e32:	       move.b d0,d0
   12e34:	       andi.l #255,d0
   12e3a:	       sub.l d0,d1
   12e3c:	       move.l d1,d0
}
   12e3e:	       rts

00012e40 <strlen>:

long unsigned int strlen (const char *s) 
{  
   12e40:	       subq.l #4,sp
	long unsigned int i = 0;
   12e42:	       clr.l (sp)
	while(s[i]) i++; 
   12e44:	   /-- bra.s 12e48 <strlen+0x8>
   12e46:	/--|-> addq.l #1,(sp)
   12e48:	|  \-> movea.l 8(sp),a0
   12e4c:	|      adda.l (sp),a0
   12e4e:	|      move.b (a0),d0
   12e50:	\----- bne.s 12e46 <strlen+0x6>
	return(i);
   12e52:	       move.l (sp),d0
}
   12e54:	       addq.l #4,sp
   12e56:	       rts

00012e58 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12e58:	    nop
   12e5a:	/-> move.l 8(sp),d0
   12e5e:	|   move.l d0,d1
   12e60:	|   addq.l #1,d1
   12e62:	|   move.l d1,8(sp)
   12e66:	|   movea.l 4(sp),a0
   12e6a:	|   lea 1(a0),a1
   12e6e:	|   move.l a1,4(sp)
   12e72:	|   movea.l d0,a1
   12e74:	|   move.b (a1),d0
   12e76:	|   move.b d0,(a0)
   12e78:	|   move.b (a0),d0
   12e7a:	\-- bne.s 12e5a <strcpy+0x2>
}
   12e7c:	    nop
   12e7e:	    rts

00012e80 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12e80:	    lea -20(sp),sp
   12e84:	    move.l a6,-(sp)
   12e86:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12e88:	    move.l 32(sp),-(sp)
   12e8c:	    jsr 12e40 <strlen>
   12e92:	    addq.l #4,sp
   12e94:	    move.l d0,d2
   12e96:	    move.l 36(sp),-(sp)
   12e9a:	    jsr 12e40 <strlen>
   12ea0:	    addq.l #4,sp
   12ea2:	    add.l d2,d0
   12ea4:	    move.l d0,d1
   12ea6:	    addq.l #1,d1
   12ea8:	    move.l d1,20(sp)
   12eac:	    clr.l 16(sp)
   12eb0:	    move.l 1b848 <SysBase>,d0
   12eb6:	    movea.l d0,a6
   12eb8:	    move.l 20(sp),d0
   12ebc:	    move.l 16(sp),d1
   12ec0:	    jsr -684(a6)
   12ec4:	    move.l d0,12(sp)
   12ec8:	    move.l 12(sp),d0
   12ecc:	    move.l d0,8(sp)
	char * t = newString;
   12ed0:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12ed6:	    nop
   12ed8:	/-> move.l 32(sp),d0
   12edc:	|   move.l d0,d1
   12ede:	|   addq.l #1,d1
   12ee0:	|   move.l d1,32(sp)
   12ee4:	|   movea.l 24(sp),a0
   12ee8:	|   lea 1(a0),a1
   12eec:	|   move.l a1,24(sp)
   12ef0:	|   movea.l d0,a1
   12ef2:	|   move.b (a1),d0
   12ef4:	|   move.b d0,(a0)
   12ef6:	|   move.b (a0),d0
   12ef8:	\-- bne.s 12ed8 <joinStrings+0x58>
	t--;
   12efa:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12efe:	    nop
   12f00:	/-> move.l 36(sp),d0
   12f04:	|   move.l d0,d1
   12f06:	|   addq.l #1,d1
   12f08:	|   move.l d1,36(sp)
   12f0c:	|   movea.l 24(sp),a0
   12f10:	|   lea 1(a0),a1
   12f14:	|   move.l a1,24(sp)
   12f18:	|   movea.l d0,a1
   12f1a:	|   move.b (a1),d0
   12f1c:	|   move.b d0,(a0)
   12f1e:	|   move.b (a0),d0
   12f20:	\-- bne.s 12f00 <joinStrings+0x80>

	return newString;
   12f22:	    move.l 8(sp),d0
}
   12f26:	    move.l (sp)+,d2
   12f28:	    movea.l (sp)+,a6
   12f2a:	    lea 20(sp),sp
   12f2e:	    rts

00012f30 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12f30:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12f34:	       moveq #10,d0
   12f36:	       cmp.l 28(sp),d0
   12f3a:	   /-- bne.s 12f58 <itoa+0x28>
   12f3c:	   |   tst.l 20(sp)
   12f40:	   +-- bge.s 12f58 <itoa+0x28>
        *str++ = '-';
   12f42:	   |   move.l 24(sp),d0
   12f46:	   |   move.l d0,d1
   12f48:	   |   addq.l #1,d1
   12f4a:	   |   move.l d1,24(sp)
   12f4e:	   |   movea.l d0,a0
   12f50:	   |   move.b #45,(a0)
        value *= -1;
   12f54:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12f58:	   \-> move.l 24(sp),12(sp)
   12f5e:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12f64:	   /-> move.l 20(sp),d0
   12f68:	   |   move.l 28(sp),-(sp)
   12f6c:	   |   move.l d0,-(sp)
   12f6e:	   |   jsr 16b5a <__modsi3>
   12f74:	   |   addq.l #8,sp
   12f76:	   |   movea.l d0,a1
   12f78:	   |   move.l 12(sp),d0
   12f7c:	   |   move.l d0,d1
   12f7e:	   |   addq.l #1,d1
   12f80:	   |   move.l d1,12(sp)
   12f84:	   |   lea 18ccc <line.c.05397aaf+0x5>,a0
   12f8a:	   |   move.b (0,a1,a0.l),d1
   12f8e:	   |   movea.l d0,a0
   12f90:	   |   move.b d1,(a0)
        value /= base;
   12f92:	   |   move.l 28(sp),-(sp)
   12f96:	   |   move.l 24(sp),-(sp)
   12f9a:	   |   jsr 16b2c <__divsi3>
   12fa0:	   |   addq.l #8,sp
   12fa2:	   |   move.l d0,20(sp)
    } while (value);
   12fa6:	   \-- bne.s 12f64 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12fa8:	       move.l 12(sp),d0
   12fac:	       move.l d0,d1
   12fae:	       subq.l #1,d1
   12fb0:	       move.l d1,12(sp)
   12fb4:	       movea.l d0,a0
   12fb6:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12fb8:	       move.l 4(sp),8(sp)
   12fbe:	   /-- bra.s 12fe4 <itoa+0xb4>
        char temp = *low;
   12fc0:	/--|-> movea.l 8(sp),a0
   12fc4:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12fc8:	|  |   movea.l 12(sp),a0
   12fcc:	|  |   move.b (a0),d0
   12fce:	|  |   movea.l 8(sp),a0
   12fd2:	|  |   move.b d0,(a0)
        *ptr = temp;
   12fd4:	|  |   movea.l 12(sp),a0
   12fd8:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12fdc:	|  |   addq.l #1,8(sp)
   12fe0:	|  |   subq.l #1,12(sp)
   12fe4:	|  \-> move.l 8(sp),d0
   12fe8:	|      cmp.l 12(sp),d0
   12fec:	\----- bcs.s 12fc0 <itoa+0x90>
    }
    return rc;
   12fee:	       move.l 4(sp),d0
}
   12ff2:	       lea 16(sp),sp
   12ff6:	       rts

00012ff8 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12ff8:	                            lea -40(sp),sp
   12ffc:	                            move.l d2,-(sp)
    char* s = str;
   12ffe:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13004:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1300a:	   /----------------------- bra.w 1313e <vsprintf2+0x146>
        if (*p == '%') {
   1300e:	/--|----------------------> movea.l 36(sp),a0
   13012:	|  |                        move.b (a0),d0
   13014:	|  |                        cmpi.b #37,d0
   13018:	|  |  /-------------------- bne.w 13124 <vsprintf2+0x12c>
            switch (*++p) {
   1301c:	|  |  |                     addq.l #1,36(sp)
   13020:	|  |  |                     movea.l 36(sp),a0
   13024:	|  |  |                     move.b (a0),d0
   13026:	|  |  |                     ext.w d0
   13028:	|  |  |                     movea.w d0,a0
   1302a:	|  |  |                     moveq #115,d0
   1302c:	|  |  |                     cmp.l a0,d0
   1302e:	|  |  |           /-------- beq.s 130a6 <vsprintf2+0xae>
   13030:	|  |  |           |         moveq #115,d1
   13032:	|  |  |           |         cmp.l a0,d1
   13034:	|  |  |  /--------|-------- blt.w 1310c <vsprintf2+0x114>
   13038:	|  |  |  |        |         moveq #99,d2
   1303a:	|  |  |  |        |         cmp.l a0,d2
   1303c:	|  |  |  |  /-----|-------- beq.w 130e4 <vsprintf2+0xec>
   13040:	|  |  |  |  |     |         moveq #100,d0
   13042:	|  |  |  |  |     |         cmp.l a0,d0
   13044:	|  |  |  +--|-----|-------- bne.w 1310c <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13048:	|  |  |  |  |     |         addq.l #4,56(sp)
   1304c:	|  |  |  |  |     |         movea.l 56(sp),a0
   13050:	|  |  |  |  |     |         move.l (a0),d0
   13052:	|  |  |  |  |     |         move.l d0,d1
   13054:	|  |  |  |  |     |         subq.l #1,d1
   13056:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1305a:	|  |  |  |  |     |         pea a <_start+0xa>
   1305e:	|  |  |  |  |     |         lea 8(sp),a0
   13062:	|  |  |  |  |     |         move.l a0,-(sp)
   13064:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13068:	|  |  |  |  |     |         jsr 12f30 <itoa>
   1306e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13072:	|  |  |  |  |     |         lea 44(sp),a0
   13076:	|  |  |  |  |     |         lea -40(a0),a0
   1307a:	|  |  |  |  |     |         move.l a0,28(sp)
   1307e:	|  |  |  |  |     |     /-- bra.s 1309a <vsprintf2+0xa2>
                        *s++ = *b;
   13080:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13084:	|  |  |  |  |     |  |  |   move.l d0,d1
   13086:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13088:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   1308c:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13090:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13092:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13094:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13096:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   1309a:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   1309e:	|  |  |  |  |     |  |      move.b (a0),d0
   130a0:	|  |  |  |  |     |  \----- bne.s 13080 <vsprintf2+0x88>
                    }
                    break;
   130a2:	|  |  |  |  |  /--|-------- bra.w 1313a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   130a6:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   130aa:	|  |  |  |  |  |            movea.l 56(sp),a0
   130ae:	|  |  |  |  |  |            move.l (a0),d0
   130b0:	|  |  |  |  |  |            move.l d0,d1
   130b2:	|  |  |  |  |  |            subq.l #1,d1
   130b4:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   130b8:	|  |  |  |  |  |        /-- bra.s 130da <vsprintf2+0xe2>
                        *s++ = *sval++;
   130ba:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   130be:	|  |  |  |  |  |     |  |   move.l d1,d2
   130c0:	|  |  |  |  |  |     |  |   addq.l #1,d2
   130c2:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   130c6:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   130ca:	|  |  |  |  |  |     |  |   move.l d0,d2
   130cc:	|  |  |  |  |  |     |  |   addq.l #1,d2
   130ce:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   130d2:	|  |  |  |  |  |     |  |   movea.l d1,a0
   130d4:	|  |  |  |  |  |     |  |   move.b (a0),d1
   130d6:	|  |  |  |  |  |     |  |   movea.l d0,a0
   130d8:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   130da:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   130de:	|  |  |  |  |  |     |      move.b (a0),d0
   130e0:	|  |  |  |  |  |     \----- bne.s 130ba <vsprintf2+0xc2>
                    }
                    break;
   130e2:	|  |  |  |  |  +----------- bra.s 1313a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   130e4:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   130e8:	|  |  |  |     |            movea.l 56(sp),a0
   130ec:	|  |  |  |     |            move.l (a0),d0
   130ee:	|  |  |  |     |            move.l d0,d1
   130f0:	|  |  |  |     |            subq.l #1,d1
   130f2:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   130f6:	|  |  |  |     |            move.l 40(sp),d0
   130fa:	|  |  |  |     |            move.l d0,d2
   130fc:	|  |  |  |     |            addq.l #1,d2
   130fe:	|  |  |  |     |            move.l d2,40(sp)
   13102:	|  |  |  |     |            move.l 24(sp),d1
   13106:	|  |  |  |     |            movea.l d0,a0
   13108:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1310a:	|  |  |  |     +----------- bra.s 1313a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1310c:	|  |  |  \-----|----------> move.l 40(sp),d0
   13110:	|  |  |        |            move.l d0,d1
   13112:	|  |  |        |            addq.l #1,d1
   13114:	|  |  |        |            move.l d1,40(sp)
   13118:	|  |  |        |            movea.l 36(sp),a0
   1311c:	|  |  |        |            move.b (a0),d1
   1311e:	|  |  |        |            movea.l d0,a0
   13120:	|  |  |        |            move.b d1,(a0)
                    break;
   13122:	|  |  |        +----------- bra.s 1313a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13124:	|  |  \--------|----------> move.l 40(sp),d0
   13128:	|  |           |            move.l d0,d1
   1312a:	|  |           |            addq.l #1,d1
   1312c:	|  |           |            move.l d1,40(sp)
   13130:	|  |           |            movea.l 36(sp),a0
   13134:	|  |           |            move.b (a0),d1
   13136:	|  |           |            movea.l d0,a0
   13138:	|  |           |            move.b d1,(a0)
        }
        p++;
   1313a:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1313e:	|  \----------------------> movea.l 36(sp),a0
   13142:	|                           move.b (a0),d0
   13144:	\-------------------------- bne.w 1300e <vsprintf2+0x16>
    }
    *s = '\0';
   13148:	                            movea.l 40(sp),a0
   1314c:	                            clr.b (a0)
    return s - str;
   1314e:	                            move.l 40(sp),d0
   13152:	                            sub.l 48(sp),d0
}
   13156:	                            move.l (sp)+,d2
   13158:	                            lea 40(sp),sp
   1315c:	                            rts

0001315e <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1315e:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13160:	moveq #16,d0
   13162:	add.l sp,d0
   13164:	move.l d0,d1
   13166:	addq.l #4,d1
   13168:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1316c:	move.l 16(sp),d0
   13170:	move.l 4(sp),-(sp)
   13174:	move.l d0,-(sp)
   13176:	move.l 20(sp),-(sp)
   1317a:	jsr 12ff8 <vsprintf2>
   13180:	lea 12(sp),sp
   13184:	move.l d0,(sp)
    va_end(args);
   13186:	clr.l 4(sp)

    return done;
   1318a:	move.l (sp),d0
}
   1318c:	addq.l #8,sp
   1318e:	rts

00013190 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13190:	       lea -20(sp),sp
   13194:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13196:	       moveq #12,d0
   13198:	       move.l d0,20(sp)
   1319c:	       clr.l 16(sp)
   131a0:	       move.l 1b848 <SysBase>,d0
   131a6:	       movea.l d0,a6
   131a8:	       move.l 20(sp),d0
   131ac:	       move.l 16(sp),d1
   131b0:	       jsr -684(a6)
   131b4:	       move.l d0,12(sp)
   131b8:	       move.l 12(sp),d0
   131bc:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   131c0:	   /-- bne.s 131c6 <addVarToStack+0x36>
   131c2:	   |   clr.w d0
   131c4:	/--|-- bra.s 1320e <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   131c6:	|  \-> move.l 8(sp),d0
   131ca:	|      move.l d0,-(sp)
   131cc:	|      move.l 32(sp),-(sp)
   131d0:	|      jsr 13cf2 <copyMain>
   131d6:	|      addq.l #8,sp
   131d8:	|      tst.w d0
   131da:	|  /-- bne.s 131f6 <addVarToStack+0x66>
        FreeVec(newStack);
   131dc:	|  |   move.l 8(sp),4(sp)
   131e2:	|  |   move.l 1b848 <SysBase>,d0
   131e8:	|  |   movea.l d0,a6
   131ea:	|  |   movea.l 4(sp),a1
   131ee:	|  |   jsr -690(a6)
        return FALSE;
   131f2:	|  |   clr.w d0
   131f4:	+--|-- bra.s 1320e <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   131f6:	|  \-> movea.l 32(sp),a0
   131fa:	|      move.l (a0),d0
   131fc:	|      movea.l 8(sp),a0
   13200:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13204:	|      movea.l 32(sp),a0
   13208:	|      move.l 8(sp),(a0)
    return TRUE;
   1320c:	|      moveq #1,d0
}
   1320e:	\----> movea.l (sp)+,a6
   13210:	       lea 20(sp),sp
   13214:	       rts

00013216 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13216:	       lea -16(sp),sp
   1321a:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1321c:	       moveq #12,d0
   1321e:	       move.l d0,16(sp)
   13222:	       clr.l 12(sp)
   13226:	       move.l 1b848 <SysBase>,d0
   1322c:	       movea.l d0,a6
   1322e:	       move.l 16(sp),d0
   13232:	       move.l 12(sp),d1
   13236:	       jsr -684(a6)
   1323a:	       move.l d0,8(sp)
   1323e:	       move.l 8(sp),d0
   13242:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13246:	   /-- bne.s 1324c <addVarToStackQuick+0x36>
   13248:	   |   clr.w d0
   1324a:	/--|-- bra.s 13282 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1324c:	|  \-> move.l 4(sp),d0
   13250:	|      pea 8 <_start+0x8>
   13254:	|      move.l 28(sp),-(sp)
   13258:	|      move.l d0,-(sp)
   1325a:	|      jsr 16228 <memcpy>
   13260:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13264:	|      movea.l 24(sp),a0
   13268:	|      clr.l (a0)

    newStack->next = *thisStack;
   1326a:	|      movea.l 28(sp),a0
   1326e:	|      move.l (a0),d0
   13270:	|      movea.l 4(sp),a0
   13274:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13278:	|      movea.l 28(sp),a0
   1327c:	|      move.l 4(sp),(a0)
    return TRUE;
   13280:	|      moveq #1,d0
}
   13282:	\----> movea.l (sp)+,a6
   13284:	       lea 16(sp),sp
   13288:	       rts

0001328a <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1328a:	       lea -16(sp),sp
   1328e:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13290:	       movea.l 24(sp),a0
   13294:	       move.l (a0),d0
   13296:	       moveq #1,d1
   13298:	       cmp.l d0,d1
   1329a:	   /-- bne.s 132c4 <addVariablesInSecond+0x3a>
   1329c:	   |   movea.l 28(sp),a0
   132a0:	   |   move.l (a0),d0
   132a2:	   |   moveq #1,d1
   132a4:	   |   cmp.l d0,d1
   132a6:	   +-- bne.s 132c4 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   132a8:	   |   movea.l 28(sp),a0
   132ac:	   |   move.l 4(a0),d1
   132b0:	   |   movea.l 24(sp),a0
   132b4:	   |   move.l 4(a0),d0
   132b8:	   |   add.l d1,d0
   132ba:	   |   movea.l 28(sp),a0
   132be:	   |   move.l d0,4(a0)
   132c2:	/--|-- bra.s 1333e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   132c4:	|  \-> move.l 24(sp),-(sp)
   132c8:	|      jsr 13f2a <getTextFromAnyVar>
   132ce:	|      addq.l #4,sp
   132d0:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   132d4:	|      move.l 28(sp),-(sp)
   132d8:	|      jsr 13f2a <getTextFromAnyVar>
   132de:	|      addq.l #4,sp
   132e0:	|      move.l d0,12(sp)

		unlinkVar(var2);
   132e4:	|      move.l 28(sp),-(sp)
   132e8:	|      jsr 13ba2 <unlinkVar>
   132ee:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   132f0:	|      move.l 12(sp),-(sp)
   132f4:	|      move.l 20(sp),-(sp)
   132f8:	|      jsr 12e80 <joinStrings>
   132fe:	|      addq.l #8,sp
   13300:	|      movea.l 28(sp),a0
   13304:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13308:	|      movea.l 28(sp),a0
   1330c:	|      moveq #3,d0
   1330e:	|      move.l d0,(a0)
		FreeVec(string1);
   13310:	|      move.l 16(sp),8(sp)
   13316:	|      move.l 1b848 <SysBase>,d0
   1331c:	|      movea.l d0,a6
   1331e:	|      movea.l 8(sp),a1
   13322:	|      jsr -690(a6)
		FreeVec(string2);
   13326:	|      move.l 12(sp),4(sp)
   1332c:	|      move.l 1b848 <SysBase>,d0
   13332:	|      movea.l d0,a6
   13334:	|      movea.l 4(sp),a1
   13338:	|      jsr -690(a6)
	}
}
   1333c:	|      nop
   1333e:	\----> nop
   13340:	       movea.l (sp)+,a6
   13342:	       lea 16(sp),sp
   13346:	       rts

00013348 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13348:	movea.l 8(sp),a0
   1334c:	move.l 4(a0),-(sp)
   13350:	move.l (a0),-(sp)
   13352:	movea.l 12(sp),a0
   13356:	move.l 4(a0),-(sp)
   1335a:	move.l (a0),-(sp)
   1335c:	jsr 1337e <compareVars>
   13362:	lea 16(sp),sp
   13366:	move.l d0,-(sp)
   13368:	pea 1 <_start+0x1>
   1336c:	move.l 16(sp),-(sp)
   13370:	jsr 14246 <setVariable>
   13376:	lea 12(sp),sp
}
   1337a:	nop
   1337c:	rts

0001337e <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1337e:	       subq.l #4,sp
	int re = 0;
   13380:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13382:	       move.l 8(sp),d1
   13386:	       move.l 16(sp),d0
   1338a:	       cmp.l d1,d0
   1338c:	/----- bne.w 13454 <compareVars+0xd6>
		switch (var1.varType) {
   13390:	|      move.l 8(sp),d0
   13394:	|      moveq #9,d1
   13396:	|      cmp.l d0,d1
   13398:	|  /-- bcs.w 1343c <compareVars+0xbe>
   1339c:	|  |   add.l d0,d0
   1339e:	|  |   movea.l d0,a0
   133a0:	|  |   adda.l #78764,a0
   133a6:	|  |   move.w (a0),d0
   133a8:	|  |   jmp (133ac <compareVars+0x2e>,pc,d0.w)
   133ac:	|  |   ori.b #-112,(a4)
   133b0:	|  |   ori.l #5243024,(a0)
   133b6:	|  |   ori.l #7733392,(a0)
   133bc:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   133c2:	|  |   move.l d0,(sp)
			break;
   133c4:	+--|-- bra.w 13454 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   133c8:	|  |   move.l 12(sp),d1
   133cc:	|  |   move.l 20(sp),d0
   133d0:	|  |   cmp.l d1,d0
   133d2:	|  |   seq d0
   133d4:	|  |   neg.b d0
   133d6:	|  |   move.b d0,d0
   133d8:	|  |   andi.l #255,d0
   133de:	|  |   move.l d0,(sp)
			break;
   133e0:	+--|-- bra.s 13454 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   133e2:	|  |   move.l 12(sp),d1
   133e6:	|  |   move.l 20(sp),d0
   133ea:	|  |   cmp.l d1,d0
   133ec:	|  |   seq d0
   133ee:	|  |   neg.b d0
   133f0:	|  |   move.b d0,d0
   133f2:	|  |   andi.l #255,d0
   133f8:	|  |   move.l d0,(sp)
			break;
   133fa:	+--|-- bra.s 13454 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   133fc:	|  |   move.l 20(sp),d1
   13400:	|  |   move.l 12(sp),d0
   13404:	|  |   move.l d1,-(sp)
   13406:	|  |   move.l d0,-(sp)
   13408:	|  |   jsr 12e00 <strcmp>
   1340e:	|  |   addq.l #8,sp
   13410:	|  |   tst.l d0
   13412:	|  |   seq d0
   13414:	|  |   neg.b d0
   13416:	|  |   move.b d0,d0
   13418:	|  |   andi.l #255,d0
   1341e:	|  |   move.l d0,(sp)
			break;
   13420:	+--|-- bra.s 13454 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13422:	|  |   move.l 12(sp),d1
   13426:	|  |   move.l 20(sp),d0
   1342a:	|  |   cmp.l d1,d0
   1342c:	|  |   seq d0
   1342e:	|  |   neg.b d0
   13430:	|  |   move.b d0,d0
   13432:	|  |   andi.l #255,d0
   13438:	|  |   move.l d0,(sp)
			break;
   1343a:	+--|-- bra.s 13454 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1343c:	|  \-> move.l 12(sp),d1
   13440:	|      move.l 20(sp),d0
   13444:	|      cmp.l d1,d0
   13446:	|      seq d0
   13448:	|      neg.b d0
   1344a:	|      move.b d0,d0
   1344c:	|      andi.l #255,d0
   13452:	|      move.l d0,(sp)
		}
	}
	return re;
   13454:	\----> move.l (sp),d0
}
   13456:	       addq.l #4,sp
   13458:	       rts

0001345a <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1345a:	             lea -16(sp),sp
   1345e:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13460:	             movea.l 28(sp),a0
   13464:	             moveq #6,d0
   13466:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13468:	             moveq #12,d0
   1346a:	             move.l d0,12(sp)
   1346e:	             clr.l 8(sp)
   13472:	             move.l 1b848 <SysBase>,d0
   13478:	             movea.l d0,a6
   1347a:	             move.l 12(sp),d0
   1347e:	             move.l 8(sp),d1
   13482:	             jsr -684(a6)
   13486:	             move.l d0,4(sp)
   1348a:	             move.l 4(sp),d0
   1348e:	             movea.l 28(sp),a0
   13492:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13496:	             movea.l 28(sp),a0
   1349a:	             move.l 4(a0),d0
   1349e:	         /-- bne.s 134a6 <copyStack+0x4c>
   134a0:	         |   clr.w d0
   134a2:	/--------|-- bra.w 13528 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   134a6:	|        \-> movea.l 28(sp),a0
   134aa:	|            movea.l 4(a0),a0
   134ae:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   134b0:	|            movea.l 28(sp),a0
   134b4:	|            movea.l 4(a0),a0
   134b8:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   134bc:	|            movea.l 28(sp),a0
   134c0:	|            movea.l 4(a0),a0
   134c4:	|            moveq #1,d0
   134c6:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   134ca:	|            movea.l 24(sp),a0
   134ce:	|            movea.l 4(a0),a0
   134d2:	|            move.l (a0),16(sp)

	while (a) {
   134d6:	|     /----- bra.s 13520 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   134d8:	|  /--|----> movea.l 28(sp),a0
   134dc:	|  |  |      move.l 4(a0),d0
   134e0:	|  |  |      move.l d0,d1
   134e2:	|  |  |      move.l 16(sp),d0
   134e6:	|  |  |      move.l d1,-(sp)
   134e8:	|  |  |      move.l d0,-(sp)
   134ea:	|  |  |      jsr 13190 <addVarToStack>
   134f0:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   134f2:	|  |  |      movea.l 28(sp),a0
   134f6:	|  |  |      movea.l 4(a0),a0
   134fa:	|  |  |      move.l 4(a0),d0
   134fe:	|  |  |  /-- bne.s 13516 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13500:	|  |  |  |   movea.l 28(sp),a0
   13504:	|  |  |  |   movea.l 4(a0),a1
   13508:	|  |  |  |   movea.l 28(sp),a0
   1350c:	|  |  |  |   movea.l 4(a0),a0
   13510:	|  |  |  |   move.l (a1),d0
   13512:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   13516:	|  |  |  \-> movea.l 16(sp),a0
   1351a:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13520:	|  |  \----> tst.l 16(sp)
   13524:	|  \-------- bne.s 134d8 <copyStack+0x7e>
	}

	return TRUE;
   13526:	|            moveq #1,d0
}
   13528:	\----------> movea.l (sp)+,a6
   1352a:	             lea 16(sp),sp
   1352e:	             rts

00013530 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13530:	                lea -20(sp),sp
   13534:	                move.l a6,-(sp)
   13536:	                move.l 36(sp),d0
   1353a:	                move.w d0,d0
   1353c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13540:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13546:	                clr.l 16(sp)

    while (*huntVar) {
   1354a:	   /----------- bra.s 135c8 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1354c:	/--|----------> movea.l 20(sp),a0
   13550:	|  |            movea.l (a0),a0
   13552:	|  |            movea.l 28(sp),a1
   13556:	|  |            move.l 4(a1),-(sp)
   1355a:	|  |            move.l (a1),-(sp)
   1355c:	|  |            move.l 4(a0),-(sp)
   13560:	|  |            move.l (a0),-(sp)
   13562:	|  |            jsr 1337e <compareVars>
   13568:	|  |            lea 16(sp),sp
   1356c:	|  |            tst.l d0
   1356e:	|  |  /-------- beq.s 135ba <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   13570:	|  |  |         movea.l 20(sp),a0
   13574:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13578:	|  |  |         movea.l 12(sp),a0
   1357c:	|  |  |         move.l 8(a0),d0
   13580:	|  |  |         movea.l 20(sp),a0
   13584:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13586:	|  |  |         move.l 12(sp),d0
   1358a:	|  |  |         move.l d0,-(sp)
   1358c:	|  |  |         jsr 13ba2 <unlinkVar>
   13592:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   13594:	|  |  |         move.l 12(sp),8(sp)
   1359a:	|  |  |         move.l 1b848 <SysBase>,d0
   135a0:	|  |  |         movea.l d0,a6
   135a2:	|  |  |         movea.l 8(sp),a1
   135a6:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   135aa:	|  |  |         tst.w 6(sp)
   135ae:	|  |  |     /-- bne.s 135b4 <deleteVarFromStack+0x84>
   135b0:	|  |  |     |   moveq #1,d0
   135b2:	|  |  |  /--|-- bra.s 135d6 <deleteVarFromStack+0xa6>
            reply++;
   135b4:	|  |  |  |  \-> addq.l #1,16(sp)
   135b8:	|  +--|--|----- bra.s 135c8 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   135ba:	|  |  \--|----> movea.l 20(sp),a0
   135be:	|  |     |      move.l (a0),d0
   135c0:	|  |     |      move.l d0,d1
   135c2:	|  |     |      addq.l #8,d1
   135c4:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   135c8:	|  \-----|----> movea.l 20(sp),a0
   135cc:	|        |      move.l (a0),d0
   135ce:	\--------|----- bne.w 1354c <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   135d2:	         |      move.l 16(sp),d0
}
   135d6:	         \----> movea.l (sp)+,a6
   135d8:	                lea 20(sp),sp
   135dc:	                rts

000135de <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   135de:	       movea.l 4(sp),a0
   135e2:	       move.l 4(a0),d0
   135e6:	       cmp.l 8(sp),d0
   135ea:	   /-- bhi.s 135f0 <fastArrayGetByIndex+0x12>
   135ec:	   |   moveq #0,d0
   135ee:	/--|-- bra.s 135fe <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   135f0:	|  \-> movea.l 4(sp),a0
   135f4:	|      move.l (a0),d1
   135f6:	|      move.l 8(sp),d0
   135fa:	|      lsl.l #3,d0
   135fc:	|      add.l d1,d0
}
   135fe:	\----> rts

00013600 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13600:	                lea -32(sp),sp
   13604:	                move.l a6,-(sp)
   13606:	                move.l a2,-(sp)
    struct persona *p = NULL;
   13608:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1360c:	                movea.l 44(sp),a0
   13610:	                move.l (a0),d0
   13612:	                moveq #8,d1
   13614:	                cmp.l d0,d1
   13616:	            /-- beq.s 13624 <getCostumeFromVar+0x24>
   13618:	            |   moveq #9,d1
   1361a:	            |   cmp.l d0,d1
   1361c:	   /--------|-- beq.w 136d2 <getCostumeFromVar+0xd2>
   13620:	/--|--------|-- bra.w 136dc <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13624:	|  |        \-> moveq #8,d0
   13626:	|  |            move.l d0,28(sp)
   1362a:	|  |            clr.l 24(sp)
   1362e:	|  |            move.l 1b848 <SysBase>,d0
   13634:	|  |            movea.l d0,a6
   13636:	|  |            move.l 28(sp),d0
   1363a:	|  |            move.l 24(sp),d1
   1363e:	|  |            jsr -684(a6)
   13642:	|  |            move.l d0,20(sp)
   13646:	|  |            move.l 20(sp),d0
   1364a:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1364e:	|  |        /-- bne.s 13656 <getCostumeFromVar+0x56>
   13650:	|  |        |   moveq #0,d0
   13652:	|  |  /-----|-- bra.w 13706 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13656:	|  |  |     \-> movea.l 36(sp),a0
   1365a:	|  |  |         moveq #1,d1
   1365c:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   13660:	|  |  |         moveq #12,d0
   13662:	|  |  |         move.l d0,16(sp)
   13666:	|  |  |         clr.l 12(sp)
   1366a:	|  |  |         move.l 1b848 <SysBase>,d0
   13670:	|  |  |         movea.l d0,a6
   13672:	|  |  |         move.l 16(sp),d0
   13676:	|  |  |         move.l 12(sp),d1
   1367a:	|  |  |         jsr -684(a6)
   1367e:	|  |  |         move.l d0,8(sp)
   13682:	|  |  |         move.l 8(sp),d0
   13686:	|  |  |         movea.l 36(sp),a0
   1368a:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1368c:	|  |  |         movea.l 36(sp),a0
   13690:	|  |  |         move.l (a0),d0
   13692:	|  |  |     /-- bne.s 13698 <getCostumeFromVar+0x98>
   13694:	|  |  |     |   moveq #0,d0
   13696:	|  |  +-----|-- bra.s 13706 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13698:	|  |  |     \-> clr.l 32(sp)
   1369c:	|  |  |     /-- bra.s 136c8 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1369e:	|  |  |  /--|-> movea.l 44(sp),a0
   136a2:	|  |  |  |  |   move.l 4(a0),d0
   136a6:	|  |  |  |  |   movea.l 36(sp),a0
   136aa:	|  |  |  |  |   movea.l (a0),a0
   136ac:	|  |  |  |  |   move.l 32(sp),d1
   136b0:	|  |  |  |  |   add.l d1,d1
   136b2:	|  |  |  |  |   add.l d1,d1
   136b4:	|  |  |  |  |   lea (0,a0,d1.l),a2
   136b8:	|  |  |  |  |   move.l d0,-(sp)
   136ba:	|  |  |  |  |   jsr 8778 <copyAnim>
   136c0:	|  |  |  |  |   addq.l #4,sp
   136c2:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   136c4:	|  |  |  |  |   addq.l #1,32(sp)
   136c8:	|  |  |  |  \-> moveq #2,d1
   136ca:	|  |  |  |      cmp.l 32(sp),d1
   136ce:	|  |  |  \----- bge.s 1369e <getCostumeFromVar+0x9e>
            }
            break;
   136d0:	|  |  |     /-- bra.s 13702 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   136d2:	|  \--|-----|-> movea.l 44(sp),a0
   136d6:	|     |     |   move.l 4(a0),d0
   136da:	|     +-----|-- bra.s 13706 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   136dc:	\-----|-----|-> movea.l 44(sp),a0
   136e0:	      |     |   move.l (a0),d0
   136e2:	      |     |   add.l d0,d0
   136e4:	      |     |   movea.l d0,a1
   136e6:	      |     |   adda.l d0,a1
   136e8:	      |     |   lea 1b726 <typeName>,a0
   136ee:	      |     |   move.l (0,a1,a0.l),d0
   136f2:	      |     |   move.l d0,-(sp)
   136f4:	      |     |   pea 18d3e <line.c.05397aaf+0x77>
   136fa:	      |     |   jsr 16274 <KPrintF>
   13700:	      |     |   addq.l #8,sp
    }

    return p;
   13702:	      |     \-> move.l 36(sp),d0
}
   13706:	      \-------> movea.l (sp)+,a2
   13708:	                movea.l (sp)+,a6
   1370a:	                lea 32(sp),sp
   1370e:	                rts

00013710 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   13710:	                lea -96(sp),sp
   13714:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   13718:	                move.l 116(sp),-(sp)
   1371c:	                pea 18d76 <line.c.05397aaf+0xaf>
   13722:	                jsr 12e80 <joinStrings>
   13728:	                addq.l #8,sp
   1372a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1372e:	            /-- bne.s 13736 <getSavedGamesStack+0x26>
   13730:	            |   clr.w d0
   13732:	/-----------|-- bra.w 1394a <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13736:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1373a:	|               move.l #101752,98(sp)
   13742:	|               moveq #-2,d0
   13744:	|               move.l d0,94(sp)
   13748:	|               move.l 1b850 <DOSBase>,d0
   1374e:	|               movea.l d0,a6
   13750:	|               move.l 98(sp),d1
   13754:	|               move.l 94(sp),d2
   13758:	|               jsr -84(a6)
   1375c:	|               move.l d0,90(sp)
   13760:	|               move.l 90(sp),d0
   13764:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13768:	|           /-- bne.s 13770 <getSavedGamesStack+0x60>
   1376a:	|           |   clr.w d0
   1376c:	+-----------|-- bra.w 1394a <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   13770:	|           \-> move.l #260,82(sp)
   13778:	|               move.l #65536,78(sp)
   13780:	|               move.l 1b848 <SysBase>,d0
   13786:	|               movea.l d0,a6
   13788:	|               move.l 82(sp),d0
   1378c:	|               move.l 78(sp),d1
   13790:	|               jsr -684(a6)
   13794:	|               move.l d0,74(sp)
   13798:	|               move.l 74(sp),d0
   1379c:	|               move.l d0,70(sp)
	if (!fib) {
   137a0:	|           /-- bne.s 137be <getSavedGamesStack+0xae>
		UnLock(dirLock);
   137a2:	|           |   move.l 86(sp),22(sp)
   137a8:	|           |   move.l 1b850 <DOSBase>,d0
   137ae:	|           |   movea.l d0,a6
   137b0:	|           |   move.l 22(sp),d1
   137b4:	|           |   jsr -90(a6)
		return FALSE;
   137b8:	|           |   clr.w d0
   137ba:	+-----------|-- bra.w 1394a <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   137be:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   137c2:	|               move.l 86(sp),66(sp)
   137c8:	|               move.l 70(sp),62(sp)
   137ce:	|               move.l 1b850 <DOSBase>,d0
   137d4:	|               movea.l d0,a6
   137d6:	|               move.l 66(sp),d1
   137da:	|               move.l 62(sp),d2
   137de:	|               jsr -102(a6)
   137e2:	|               move.l d0,58(sp)
   137e6:	|               move.l 58(sp),d0
   137ea:	|  /----------- beq.w 138fe <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   137ee:	|  |        /-- bra.w 138ca <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   137f2:	|  |  /-----|-> move.l 70(sp),d2
   137f6:	|  |  |     |   addq.l #8,d2
   137f8:	|  |  |     |   move.l 70(sp),d0
   137fc:	|  |  |     |   addq.l #8,d0
   137fe:	|  |  |     |   move.l d0,-(sp)
   13800:	|  |  |     |   jsr 12e40 <strlen>
   13806:	|  |  |     |   addq.l #4,sp
   13808:	|  |  |     |   move.l d0,d3
   1380a:	|  |  |     |   move.l 116(sp),-(sp)
   1380e:	|  |  |     |   jsr 12e40 <strlen>
   13814:	|  |  |     |   addq.l #4,sp
   13816:	|  |  |     |   move.l d3,d1
   13818:	|  |  |     |   sub.l d0,d1
   1381a:	|  |  |     |   move.l d2,d0
   1381c:	|  |  |     |   add.l d1,d0
   1381e:	|  |  |     |   move.l 116(sp),-(sp)
   13822:	|  |  |     |   move.l d0,-(sp)
   13824:	|  |  |     |   jsr 12e00 <strcmp>
   1382a:	|  |  |     |   addq.l #8,sp
   1382c:	|  |  |     |   tst.l d0
   1382e:	|  |  |     +-- bne.w 138ca <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   13832:	|  |  |     |   move.l 70(sp),d0
   13836:	|  |  |     |   addq.l #8,d0
   13838:	|  |  |     |   move.l d0,-(sp)
   1383a:	|  |  |     |   jsr 12e40 <strlen>
   13840:	|  |  |     |   addq.l #4,sp
   13842:	|  |  |     |   move.l d0,d2
   13844:	|  |  |     |   move.l 116(sp),-(sp)
   13848:	|  |  |     |   jsr 12e40 <strlen>
   1384e:	|  |  |     |   addq.l #4,sp
   13850:	|  |  |     |   move.l d0,d1
   13852:	|  |  |     |   move.l d2,d0
   13854:	|  |  |     |   sub.l d1,d0
   13856:	|  |  |     |   movea.l 70(sp),a0
   1385a:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1385e:	|  |  |     |   move.l 70(sp),d0
   13862:	|  |  |     |   addq.l #8,d0
   13864:	|  |  |     |   move.l d0,-(sp)
   13866:	|  |  |     |   jsr 118 <decodeFilename>
   1386c:	|  |  |     |   addq.l #4,sp
   1386e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   13872:	|  |  |     |   move.l 42(sp),-(sp)
   13876:	|  |  |     |   lea 18(sp),a0
   1387a:	|  |  |     |   move.l a0,-(sp)
   1387c:	|  |  |     |   jsr 13b76 <makeTextVar>
   13882:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   13884:	|  |  |     |   move.l 42(sp),38(sp)
   1388a:	|  |  |     |   move.l 1b848 <SysBase>,d0
   13890:	|  |  |     |   movea.l d0,a6
   13892:	|  |  |     |   movea.l 38(sp),a1
   13896:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1389a:	|  |  |     |   move.l 112(sp),d0
   1389e:	|  |  |     |   move.l d0,-(sp)
   138a0:	|  |  |     |   lea 18(sp),a0
   138a4:	|  |  |     |   move.l a0,-(sp)
   138a6:	|  |  |     |   jsr 13190 <addVarToStack>
   138ac:	|  |  |     |   addq.l #8,sp
   138ae:	|  |  |     |   tst.w d0
   138b0:	|  |  |  /--|-- beq.s 13902 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   138b2:	|  |  |  |  |   movea.l 112(sp),a0
   138b6:	|  |  |  |  |   move.l 4(a0),d0
   138ba:	|  |  |  |  +-- bne.s 138ca <getSavedGamesStack+0x1ba>
   138bc:	|  |  |  |  |   movea.l 112(sp),a0
   138c0:	|  |  |  |  |   move.l (a0),d0
   138c2:	|  |  |  |  |   movea.l 112(sp),a0
   138c6:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   138ca:	|  |  |  |  \-> move.l 86(sp),54(sp)
   138d0:	|  |  |  |      move.l 70(sp),50(sp)
   138d6:	|  |  |  |      move.l 1b850 <DOSBase>,d0
   138dc:	|  |  |  |      movea.l d0,a6
   138de:	|  |  |  |      move.l 54(sp),d1
   138e2:	|  |  |  |      move.l 50(sp),d2
   138e6:	|  |  |  |      jsr -108(a6)
   138ea:	|  |  |  |      move.l d0,46(sp)
   138ee:	|  |  |  |      move.l 46(sp),d0
   138f2:	|  |  \--|----- bne.w 137f2 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   138f6:	|  |     |      move.w #1,106(sp)
   138fc:	|  |     |  /-- bra.s 13904 <getSavedGamesStack+0x1f4>
	}

cleanup:
   138fe:	|  \-----|--|-> nop
   13900:	|        |  +-- bra.s 13904 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13902:	|        \--|-> nop
	FreeVec(fib);
   13904:	|           \-> move.l 70(sp),34(sp)
   1390a:	|               move.l 1b848 <SysBase>,d0
   13910:	|               movea.l d0,a6
   13912:	|               movea.l 34(sp),a1
   13916:	|               jsr -690(a6)
	UnLock(dirLock);
   1391a:	|               move.l 86(sp),30(sp)
   13920:	|               move.l 1b850 <DOSBase>,d0
   13926:	|               movea.l d0,a6
   13928:	|               move.l 30(sp),d1
   1392c:	|               jsr -90(a6)
	FreeVec(pattern);
   13930:	|               move.l 102(sp),26(sp)
   13936:	|               move.l 1b848 <SysBase>,d0
   1393c:	|               movea.l d0,a6
   1393e:	|               movea.l 26(sp),a1
   13942:	|               jsr -690(a6)
	return result;
   13946:	|               move.w 106(sp),d0
}
   1394a:	\-------------> movem.l (sp)+,d2-d3/a6
   1394e:	                lea 96(sp),sp
   13952:	                rts

00013954 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   13954:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13956:	       movea.l 20(sp),a0
   1395a:	       move.l (a0),d0
   1395c:	       cmp.l 16(sp),d0
   13960:	/----- beq.s 139c4 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   13962:	|      move.l 16(sp),d0
   13966:	|      add.l d0,d0
   13968:	|      movea.l d0,a1
   1396a:	|      adda.l d0,a1
   1396c:	|      lea 1b726 <typeName>,a0
   13972:	|      move.l (0,a1,a0.l),d0
   13976:	|      move.l d0,-(sp)
   13978:	|      pea 18d7a <line.c.05397aaf+0xb3>
   1397e:	|      jsr 12e80 <joinStrings>
   13984:	|      addq.l #8,sp
   13986:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1398a:	|      movea.l 20(sp),a0
   1398e:	|      move.l (a0),d0
   13990:	|      add.l d0,d0
   13992:	|      movea.l d0,a1
   13994:	|      adda.l d0,a1
   13996:	|      lea 1b726 <typeName>,a0
   1399c:	|      move.l (0,a1,a0.l),d0
   139a0:	|      move.l d0,-(sp)
   139a2:	|      pea 18dbc <line.c.05397aaf+0xf5>
   139a8:	|      jsr 12e80 <joinStrings>
   139ae:	|      addq.l #8,sp
   139b0:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   139b2:	|      move.l (sp),-(sp)
   139b4:	|      move.l 8(sp),-(sp)
   139b8:	|      jsr 16274 <KPrintF>
   139be:	|      addq.l #8,sp

		return FALSE;
   139c0:	|      clr.w d0
   139c2:	|  /-- bra.s 139d4 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   139c4:	\--|-> movea.l 20(sp),a0
   139c8:	   |   move.l 4(a0),d0
   139cc:	   |   movea.l 12(sp),a0
   139d0:	   |   move.l d0,(a0)
	return TRUE;
   139d2:	   |   moveq #1,d0
}
   139d4:	   \-> addq.l #8,sp
   139d6:	       rts

000139d8 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   139d8:	move.l 8(sp),-(sp)
   139dc:	jsr 5ccc <getNumberedString>
   139e2:	addq.l #4,sp
   139e4:	move.l d0,-(sp)
   139e6:	move.l 8(sp),-(sp)
   139ea:	jsr 13b76 <makeTextVar>
   139f0:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   139f2:	movea.l 4(sp),a0
   139f6:	move.l 4(a0),d0
   139fa:	sne d0
   139fc:	neg.b d0
   139fe:	move.b d0,d0
   13a00:	andi.w #255,d0
}
   13a04:	rts

00013a06 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   13a06:	          subq.l #8,sp
    int size = stackSize(stacky);
   13a08:	          move.l 16(sp),-(sp)
   13a0c:	          jsr 142b4 <stackSize>
   13a12:	          addq.l #4,sp
   13a14:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   13a18:	          move.l 4(sp),-(sp)
   13a1c:	          move.l 16(sp),-(sp)
   13a20:	          jsr 13a70 <makeFastArraySize>
   13a26:	          addq.l #8,sp
   13a28:	          tst.w d0
   13a2a:	      /-- bne.s 13a30 <makeFastArrayFromStack+0x2a>
   13a2c:	      |   clr.w d0
   13a2e:	/-----|-- bra.s 13a6c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   13a30:	|     \-> movea.l 16(sp),a0
   13a34:	|         move.l (a0),(sp)
    size = 0;
   13a36:	|         clr.l 4(sp)
    while (allV) {
   13a3a:	|     /-- bra.s 13a66 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   13a3c:	|  /--|-> movea.l 12(sp),a0
   13a40:	|  |  |   movea.l 4(a0),a0
   13a44:	|  |  |   move.l (a0),d1
   13a46:	|  |  |   move.l 4(sp),d0
   13a4a:	|  |  |   lsl.l #3,d0
   13a4c:	|  |  |   add.l d0,d1
   13a4e:	|  |  |   move.l (sp),d0
   13a50:	|  |  |   move.l d1,-(sp)
   13a52:	|  |  |   move.l d0,-(sp)
   13a54:	|  |  |   jsr 13cf2 <copyMain>
   13a5a:	|  |  |   addq.l #8,sp
        size++;
   13a5c:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   13a60:	|  |  |   movea.l (sp),a0
   13a62:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   13a66:	|  |  \-> tst.l (sp)
   13a68:	|  \----- bne.s 13a3c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   13a6a:	|         moveq #1,d0
}
   13a6c:	\-------> addq.l #8,sp
   13a6e:	          rts

00013a70 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   13a70:	          lea -28(sp),sp
   13a74:	          move.l a6,-(sp)
    if (size < 0) {
   13a76:	          tst.l 40(sp)
   13a7a:	      /-- bge.s 13a90 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   13a7c:	      |   pea 18e01 <line.c.05397aaf+0x13a>
   13a82:	      |   jsr 16274 <KPrintF>
   13a88:	      |   addq.l #4,sp
		return FALSE;
   13a8a:	      |   clr.w d0
   13a8c:	/-----|-- bra.w 13b6e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   13a90:	|     \-> move.l 36(sp),-(sp)
   13a94:	|         jsr 13ba2 <unlinkVar>
   13a9a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   13a9c:	|         movea.l 36(sp),a0
   13aa0:	|         moveq #10,d0
   13aa2:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   13aa4:	|         moveq #12,d0
   13aa6:	|         move.l d0,24(sp)
   13aaa:	|         clr.l 20(sp)
   13aae:	|         move.l 1b848 <SysBase>,d0
   13ab4:	|         movea.l d0,a6
   13ab6:	|         move.l 24(sp),d0
   13aba:	|         move.l 20(sp),d1
   13abe:	|         jsr -684(a6)
   13ac2:	|         move.l d0,16(sp)
   13ac6:	|         move.l 16(sp),d0
   13aca:	|         movea.l 36(sp),a0
   13ace:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   13ad2:	|         movea.l 36(sp),a0
   13ad6:	|         move.l 4(a0),d0
   13ada:	|     /-- bne.s 13ae2 <makeFastArraySize+0x72>
   13adc:	|     |   clr.w d0
   13ade:	+-----|-- bra.w 13b6e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   13ae2:	|     \-> move.l 40(sp),d0
   13ae6:	|         lsl.l #3,d0
   13ae8:	|         move.l d0,12(sp)
   13aec:	|         clr.l 8(sp)
   13af0:	|         move.l 1b848 <SysBase>,d0
   13af6:	|         movea.l d0,a6
   13af8:	|         move.l 12(sp),d0
   13afc:	|         move.l 8(sp),d1
   13b00:	|         jsr -684(a6)
   13b04:	|         move.l d0,4(sp)
   13b08:	|         move.l 4(sp),d0
   13b0c:	|         movea.l 36(sp),a0
   13b10:	|         movea.l 4(a0),a0
   13b14:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   13b16:	|         movea.l 36(sp),a0
   13b1a:	|         movea.l 4(a0),a0
   13b1e:	|         move.l (a0),d0
   13b20:	|     /-- bne.s 13b26 <makeFastArraySize+0xb6>
   13b22:	|     |   clr.w d0
   13b24:	+-----|-- bra.s 13b6e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   13b26:	|     \-> clr.l 28(sp)
   13b2a:	|     /-- bra.s 13b46 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   13b2c:	|  /--|-> movea.l 36(sp),a0
   13b30:	|  |  |   movea.l 4(a0),a0
   13b34:	|  |  |   move.l (a0),d1
   13b36:	|  |  |   move.l 28(sp),d0
   13b3a:	|  |  |   lsl.l #3,d0
   13b3c:	|  |  |   movea.l d1,a0
   13b3e:	|  |  |   adda.l d0,a0
   13b40:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   13b42:	|  |  |   addq.l #1,28(sp)
   13b46:	|  |  \-> move.l 28(sp),d0
   13b4a:	|  |      cmp.l 40(sp),d0
   13b4e:	|  \----- blt.s 13b2c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   13b50:	|         movea.l 36(sp),a0
   13b54:	|         movea.l 4(a0),a0
   13b58:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   13b5e:	|         movea.l 36(sp),a0
   13b62:	|         movea.l 4(a0),a0
   13b66:	|         moveq #1,d0
   13b68:	|         move.l d0,8(a0)
    return TRUE;
   13b6c:	|         moveq #1,d0
}
   13b6e:	\-------> movea.l (sp)+,a6
   13b70:	          lea 28(sp),sp
   13b74:	          rts

00013b76 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   13b76:	move.l 4(sp),-(sp)
   13b7a:	jsr 13ba2 <unlinkVar>
   13b80:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   13b82:	movea.l 4(sp),a0
   13b86:	moveq #3,d0
   13b88:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   13b8a:	move.l 8(sp),-(sp)
   13b8e:	jsr b8 <copyString>
   13b94:	addq.l #4,sp
   13b96:	movea.l 4(sp),a0
   13b9a:	move.l d0,4(a0)
}
   13b9e:	nop
   13ba0:	rts

00013ba2 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   13ba2:	                      lea -16(sp),sp
   13ba6:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   13ba8:	                      movea.l 24(sp),a0
   13bac:	                      move.l (a0),d0
   13bae:	                      moveq #10,d1
   13bb0:	                      cmp.l d0,d1
   13bb2:	            /-------- beq.w 13c6a <unlinkVar+0xc8>
   13bb6:	            |         moveq #10,d1
   13bb8:	            |         cmp.l d0,d1
   13bba:	/-----------|-------- bcs.w 13cde <unlinkVar+0x13c>
   13bbe:	|           |         moveq #8,d1
   13bc0:	|           |         cmp.l d0,d1
   13bc2:	|  /--------|-------- beq.w 13cca <unlinkVar+0x128>
   13bc6:	|  |        |         moveq #8,d1
   13bc8:	|  |        |         cmp.l d0,d1
   13bca:	+--|--------|-------- bcs.w 13cde <unlinkVar+0x13c>
   13bce:	|  |        |         moveq #3,d1
   13bd0:	|  |        |         cmp.l d0,d1
   13bd2:	|  |        |     /-- beq.s 13bde <unlinkVar+0x3c>
   13bd4:	|  |        |     |   moveq #6,d1
   13bd6:	|  |        |     |   cmp.l d0,d1
   13bd8:	|  |        |  /--|-- beq.s 13c04 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   13bda:	+--|--------|--|--|-- bra.w 13cde <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   13bde:	|  |        |  |  \-> movea.l 24(sp),a0
   13be2:	|  |        |  |      move.l 4(a0),4(sp)
   13be8:	|  |        |  |      move.l 1b848 <SysBase>,d0
   13bee:	|  |        |  |      movea.l d0,a6
   13bf0:	|  |        |  |      movea.l 4(sp),a1
   13bf4:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   13bf8:	|  |        |  |      movea.l 24(sp),a0
   13bfc:	|  |        |  |      clr.l 4(a0)
		break;
   13c00:	|  |  /-----|--|----- bra.w 13ce8 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   13c04:	|  |  |     |  \----> movea.l 24(sp),a0
   13c08:	|  |  |     |         movea.l 4(a0),a0
   13c0c:	|  |  |     |         move.l 8(a0),d0
   13c10:	|  |  |     |         subq.l #1,d0
   13c12:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13c16:	|  |  |     |         movea.l 24(sp),a0
   13c1a:	|  |  |     |         movea.l 4(a0),a0
   13c1e:	|  |  |     |         move.l 8(a0),d0
   13c22:	|  |  |  /--|-------- bgt.w 13ce2 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   13c26:	|  |  |  |  |     /-- bra.s 13c3a <unlinkVar+0x98>
   13c28:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   13c2c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   13c30:	|  |  |  |  |  |  |   move.l d0,-(sp)
   13c32:	|  |  |  |  |  |  |   jsr 142d8 <trimStack>
   13c38:	|  |  |  |  |  |  |   addq.l #4,sp
   13c3a:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   13c3e:	|  |  |  |  |  |      movea.l 4(a0),a0
   13c42:	|  |  |  |  |  |      move.l (a0),d0
   13c44:	|  |  |  |  |  \----- bne.s 13c28 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   13c46:	|  |  |  |  |         movea.l 24(sp),a0
   13c4a:	|  |  |  |  |         move.l 4(a0),8(sp)
   13c50:	|  |  |  |  |         move.l 1b848 <SysBase>,d0
   13c56:	|  |  |  |  |         movea.l d0,a6
   13c58:	|  |  |  |  |         movea.l 8(sp),a1
   13c5c:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   13c60:	|  |  |  |  |         movea.l 24(sp),a0
   13c64:	|  |  |  |  |         clr.l 4(a0)
		break;
   13c68:	|  |  |  +--|-------- bra.s 13ce2 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   13c6a:	|  |  |  |  \-------> movea.l 24(sp),a0
   13c6e:	|  |  |  |            movea.l 4(a0),a0
   13c72:	|  |  |  |            move.l 8(a0),d0
   13c76:	|  |  |  |            subq.l #1,d0
   13c78:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13c7c:	|  |  |  |            movea.l 24(sp),a0
   13c80:	|  |  |  |            movea.l 4(a0),a0
   13c84:	|  |  |  |            move.l 8(a0),d0
   13c88:	|  |  |  |        /-- bgt.s 13ce6 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   13c8a:	|  |  |  |        |   movea.l 24(sp),a0
   13c8e:	|  |  |  |        |   movea.l 4(a0),a0
   13c92:	|  |  |  |        |   move.l (a0),16(sp)
   13c96:	|  |  |  |        |   move.l 1b848 <SysBase>,d0
   13c9c:	|  |  |  |        |   movea.l d0,a6
   13c9e:	|  |  |  |        |   movea.l 16(sp),a1
   13ca2:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   13ca6:	|  |  |  |        |   movea.l 24(sp),a0
   13caa:	|  |  |  |        |   move.l 4(a0),12(sp)
   13cb0:	|  |  |  |        |   move.l 1b848 <SysBase>,d0
   13cb6:	|  |  |  |        |   movea.l d0,a6
   13cb8:	|  |  |  |        |   movea.l 12(sp),a1
   13cbc:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   13cc0:	|  |  |  |        |   movea.l 24(sp),a0
   13cc4:	|  |  |  |        |   clr.l 4(a0)
		break;
   13cc8:	|  |  |  |        +-- bra.s 13ce6 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   13cca:	|  \--|--|--------|-> movea.l 24(sp),a0
   13cce:	|     |  |        |   move.l 4(a0),d0
   13cd2:	|     |  |        |   move.l d0,-(sp)
   13cd4:	|     |  |        |   jsr 8b44 <deleteAnim>
   13cda:	|     |  |        |   addq.l #4,sp
		break;
   13cdc:	|     +--|--------|-- bra.s 13ce8 <unlinkVar+0x146>
		break;
   13cde:	\-----|--|--------|-> nop
   13ce0:	      +--|--------|-- bra.s 13ce8 <unlinkVar+0x146>
		break;
   13ce2:	      |  \--------|-> nop
   13ce4:	      +-----------|-- bra.s 13ce8 <unlinkVar+0x146>
		break;
   13ce6:	      |           \-> nop
	}
}
   13ce8:	      \-------------> nop
   13cea:	                      movea.l (sp)+,a6
   13cec:	                      lea 16(sp),sp
   13cf0:	                      rts

00013cf2 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   13cf2:	       movea.l 4(sp),a0
   13cf6:	       move.l (a0),d0
   13cf8:	       movea.l 8(sp),a0
   13cfc:	       move.l d0,(a0)
	switch (to->varType) {
   13cfe:	       movea.l 8(sp),a0
   13d02:	       move.l (a0),d0
   13d04:	       moveq #10,d1
   13d06:	       cmp.l d0,d1
   13d08:	/----- bcs.w 13dfa <copyMain+0x108>
   13d0c:	|      add.l d0,d0
   13d0e:	|      movea.l d0,a0
   13d10:	|      adda.l #81180,a0
   13d16:	|      move.w (a0),d0
   13d18:	|      jmp (13d1c <copyMain+0x2a>,pc,d0.w)
   13d1c:	|      .short 0x00da
   13d1e:	|      ori.b #22,(a6)
   13d22:	|      ori.w #22,(a4)
   13d26:	|      ori.b #-126,(a6)
   13d2a:	|      ori.b #-68,(a6)
   13d2e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   13d36:	|      move.l 4(a0),d0
   13d3a:	|      movea.l 8(sp),a0
   13d3e:	|      move.l d0,4(a0)
		return TRUE;
   13d42:	|      moveq #1,d0
   13d44:	|  /-- bra.w 13e0c <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   13d48:	|  |   movea.l 4(sp),a0
   13d4c:	|  |   move.l 4(a0),d0
   13d50:	|  |   movea.l 8(sp),a0
   13d54:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   13d58:	|  |   movea.l 8(sp),a0
   13d5c:	|  |   movea.l 4(a0),a0
   13d60:	|  |   move.l 8(a0),d0
   13d64:	|  |   addq.l #1,d0
   13d66:	|  |   move.l d0,8(a0)
		return TRUE;
   13d6a:	|  |   moveq #1,d0
   13d6c:	|  +-- bra.w 13e0c <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   13d70:	|  |   movea.l 4(sp),a0
   13d74:	|  |   move.l 4(a0),d0
   13d78:	|  |   move.l d0,-(sp)
   13d7a:	|  |   jsr b8 <copyString>
   13d80:	|  |   addq.l #4,sp
   13d82:	|  |   movea.l 8(sp),a0
   13d86:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   13d8a:	|  |   movea.l 8(sp),a0
   13d8e:	|  |   move.l 4(a0),d0
   13d92:	|  |   sne d0
   13d94:	|  |   neg.b d0
   13d96:	|  |   move.b d0,d0
   13d98:	|  |   andi.w #255,d0
   13d9c:	|  +-- bra.s 13e0c <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13d9e:	|  |   movea.l 4(sp),a0
   13da2:	|  |   move.l 4(a0),d0
   13da6:	|  |   movea.l 8(sp),a0
   13daa:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13dae:	|  |   movea.l 8(sp),a0
   13db2:	|  |   movea.l 4(a0),a0
   13db6:	|  |   move.l 8(a0),d0
   13dba:	|  |   addq.l #1,d0
   13dbc:	|  |   move.l d0,8(a0)
		return TRUE;
   13dc0:	|  |   moveq #1,d0
   13dc2:	|  +-- bra.s 13e0c <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13dc4:	|  |   movea.l 4(sp),a0
   13dc8:	|  |   move.l 4(a0),d0
   13dcc:	|  |   movea.l 8(sp),a0
   13dd0:	|  |   move.l d0,4(a0)
		return TRUE;
   13dd4:	|  |   moveq #1,d0
   13dd6:	|  +-- bra.s 13e0c <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13dd8:	|  |   movea.l 4(sp),a0
   13ddc:	|  |   move.l 4(a0),d0
   13de0:	|  |   move.l d0,-(sp)
   13de2:	|  |   jsr 8778 <copyAnim>
   13de8:	|  |   addq.l #4,sp
   13dea:	|  |   movea.l 8(sp),a0
   13dee:	|  |   move.l d0,4(a0)
		return TRUE;
   13df2:	|  |   moveq #1,d0
   13df4:	|  +-- bra.s 13e0c <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13df6:	|  |   moveq #1,d0
   13df8:	|  +-- bra.s 13e0c <copyMain+0x11a>

		default:
		break;
   13dfa:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13dfc:	   |   pea 18e52 <line.c.05397aaf+0x18b>
   13e02:	   |   jsr 16274 <KPrintF>
   13e08:	   |   addq.l #4,sp
	return FALSE;
   13e0a:	   |   clr.w d0
}
   13e0c:	   \-> rts

00013e0e <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13e0e:	move.l 8(sp),-(sp)
   13e12:	jsr 13ba2 <unlinkVar>
   13e18:	addq.l #4,sp
	return copyMain(from, to);
   13e1a:	move.l 8(sp),-(sp)
   13e1e:	move.l 8(sp),-(sp)
   13e22:	jsr 13cf2 <copyMain>
   13e28:	addq.l #8,sp
}
   13e2a:	rts

00013e2c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13e2c:	       movea.l 4(sp),a0
   13e30:	       move.l (a0),d0
   13e32:	       moveq #8,d1
   13e34:	       cmp.l d0,d1
   13e36:	   /-- bne.s 13e4c <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13e38:	   |   movea.l 4(sp),a0
   13e3c:	   |   move.l 4(a0),d0
   13e40:	   |   move.l d0,-(sp)
   13e42:	   |   jsr 8778 <copyAnim>
   13e48:	   |   addq.l #4,sp
   13e4a:	/--|-- bra.s 13e92 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13e4c:	|  \-> movea.l 4(sp),a0
   13e50:	|      move.l (a0),d0
   13e52:	|      moveq #1,d1
   13e54:	|      cmp.l d0,d1
   13e56:	|  /-- bne.s 13e6a <getAnimationFromVar+0x3e>
   13e58:	|  |   movea.l 4(sp),a0
   13e5c:	|  |   move.l 4(a0),d0
   13e60:	|  +-- bne.s 13e6a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13e62:	|  |   jsr 9f48 <makeNullAnim>
   13e68:	+--|-- bra.s 13e92 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13e6a:	|  \-> movea.l 4(sp),a0
   13e6e:	|      move.l (a0),d0
   13e70:	|      add.l d0,d0
   13e72:	|      movea.l d0,a1
   13e74:	|      adda.l d0,a1
   13e76:	|      lea 1b726 <typeName>,a0
   13e7c:	|      move.l (0,a1,a0.l),d0
   13e80:	|      move.l d0,-(sp)
   13e82:	|      pea 18d3e <line.c.05397aaf+0x77>
   13e88:	|      jsr 16274 <KPrintF>
   13e8e:	|      addq.l #8,sp
	return NULL;
   13e90:	|      moveq #0,d0
}
   13e92:	\----> rts

00013e94 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13e94:	       movea.l 4(sp),a0
   13e98:	       move.l (a0),d0
   13e9a:	       moveq #10,d1
   13e9c:	       cmp.l d0,d1
   13e9e:	/----- bcs.w 13f24 <getBoolean+0x90>
   13ea2:	|      add.l d0,d0
   13ea4:	|      movea.l d0,a0
   13ea6:	|      adda.l #81586,a0
   13eac:	|      move.w (a0),d0
   13eae:	|      jmp (13eb2 <getBoolean+0x1e>,pc,d0.w)
   13eb2:	|      ori.b #26,(a6)
   13eb6:	|      ori.w #68,(114,a2,d0.w)
   13ebc:	|      ori.w #46,(114,a2,d0.w)
   13ec2:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13ec8:	|      clr.w d0
   13eca:	|  /-- bra.s 13f28 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13ecc:	|  |   movea.l 4(sp),a0
   13ed0:	|  |   move.l 4(a0),d0
   13ed4:	|  |   sne d0
   13ed6:	|  |   neg.b d0
   13ed8:	|  |   move.b d0,d0
   13eda:	|  |   andi.w #255,d0
   13ede:	|  +-- bra.s 13f28 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13ee0:	|  |   movea.l 4(sp),a0
   13ee4:	|  |   movea.l 4(a0),a0
   13ee8:	|  |   move.l (a0),d0
   13eea:	|  |   sne d0
   13eec:	|  |   neg.b d0
   13eee:	|  |   move.b d0,d0
   13ef0:	|  |   andi.w #255,d0
   13ef4:	|  +-- bra.s 13f28 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13ef6:	|  |   movea.l 4(sp),a0
   13efa:	|  |   movea.l 4(a0),a0
   13efe:	|  |   move.b (a0),d0
   13f00:	|  |   sne d0
   13f02:	|  |   neg.b d0
   13f04:	|  |   move.b d0,d0
   13f06:	|  |   andi.w #255,d0
   13f0a:	|  +-- bra.s 13f28 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13f0c:	|  |   movea.l 4(sp),a0
   13f10:	|  |   movea.l 4(a0),a0
   13f14:	|  |   move.l 4(a0),d0
   13f18:	|  |   sne d0
   13f1a:	|  |   neg.b d0
   13f1c:	|  |   move.b d0,d0
   13f1e:	|  |   andi.w #255,d0
   13f22:	|  +-- bra.s 13f28 <getBoolean+0x94>

		default:
		break;
   13f24:	\--|-> nop
	}
	return TRUE;
   13f26:	   |   moveq #1,d0
}
   13f28:	   \-> rts

00013f2a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13f2a:	      /----------> lea -76(sp),sp
   13f2e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13f30:	      |            movea.l 84(sp),a0
   13f34:	      |            move.l (a0),d0
   13f36:	      |            moveq #10,d1
   13f38:	      |            cmp.l d0,d1
   13f3a:	/-----|----------- bcs.w 141d8 <getTextFromAnyVar+0x2ae>
   13f3e:	|     |            add.l d0,d0
   13f40:	|     |            movea.l d0,a0
   13f42:	|     |            adda.l #81742,a0
   13f48:	|     |            move.w (a0),d0
   13f4a:	|     |            jmp (13f4e <getTextFromAnyVar+0x24>,pc,d0.w)
   13f4e:	|     |            .short 0x028a
   13f50:	|     |            bset d0,(a0)+
   13f52:	|     |            .short 0x028a
   13f54:	|     |            ori.b #-118,(a6)
   13f58:	|     |            andi.b #8,ccr
   13f5c:	|     |            andi.w #650,-(a0)
   13f60:	|     |            .short 0x028a
   13f62:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13f68:	|     |            move.l 4(a0),d0
   13f6c:	|     |            move.l d0,-(sp)
   13f6e:	|     |            jsr b8 <copyString>
   13f74:	|     |            addq.l #4,sp
   13f76:	|  /--|----------- bra.w 141fa <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13f7a:	|  |  |            pea 18e65 <line.c.05397aaf+0x19e>
   13f80:	|  |  |            jsr b8 <copyString>
   13f86:	|  |  |            addq.l #4,sp
   13f88:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13f8c:	|  |  |            clr.l 72(sp)
   13f90:	|  |  |     /----- bra.w 1403a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13f94:	|  |  |  /--|----> pea 18e6b <line.c.05397aaf+0x1a4>
   13f9a:	|  |  |  |  |      move.l 80(sp),-(sp)
   13f9e:	|  |  |  |  |      jsr 12e80 <joinStrings>
   13fa4:	|  |  |  |  |      addq.l #8,sp
   13fa6:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13faa:	|  |  |  |  |  /-- bne.s 13fb2 <getTextFromAnyVar+0x88>
   13fac:	|  |  |  |  |  |   moveq #0,d0
   13fae:	|  +--|--|--|--|-- bra.w 141fa <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13fb2:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13fb8:	|  |  |  |  |      move.l 1b848 <SysBase>,d0
   13fbe:	|  |  |  |  |      movea.l d0,a6
   13fc0:	|  |  |  |  |      movea.l 56(sp),a1
   13fc4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13fc8:	|  |  |  |  |      movea.l 84(sp),a0
   13fcc:	|  |  |  |  |      movea.l 4(a0),a0
   13fd0:	|  |  |  |  |      move.l (a0),d1
   13fd2:	|  |  |  |  |      move.l 72(sp),d0
   13fd6:	|  |  |  |  |      lsl.l #3,d0
   13fd8:	|  |  |  |  |      add.l d1,d0
   13fda:	|  |  |  |  |      move.l d0,-(sp)
   13fdc:	|  |  +--|--|----- jsr 13f2a <getTextFromAnyVar>(pc)
   13fe0:	|  |  |  |  |      addq.l #4,sp
   13fe2:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13fe6:	|  |  |  |  |      move.l 52(sp),-(sp)
   13fea:	|  |  |  |  |      move.l 64(sp),-(sp)
   13fee:	|  |  |  |  |      jsr 12e80 <joinStrings>
   13ff4:	|  |  |  |  |      addq.l #8,sp
   13ff6:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13ffa:	|  |  |  |  |  /-- bne.s 14002 <getTextFromAnyVar+0xd8>
   13ffc:	|  |  |  |  |  |   moveq #0,d0
   13ffe:	|  +--|--|--|--|-- bra.w 141fa <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14002:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14008:	|  |  |  |  |      move.l 1b848 <SysBase>,d0
   1400e:	|  |  |  |  |      movea.l d0,a6
   14010:	|  |  |  |  |      movea.l 48(sp),a1
   14014:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14018:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   1401c:	|  |  |  |  |      move.l 60(sp),44(sp)
   14022:	|  |  |  |  |      move.l 1b848 <SysBase>,d0
   14028:	|  |  |  |  |      movea.l d0,a6
   1402a:	|  |  |  |  |      movea.l 44(sp),a1
   1402e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14032:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14036:	|  |  |  |  |      addq.l #1,72(sp)
   1403a:	|  |  |  |  \----> movea.l 84(sp),a0
   1403e:	|  |  |  |         movea.l 4(a0),a0
   14042:	|  |  |  |         move.l 4(a0),d0
   14046:	|  |  |  |         cmp.l 72(sp),d0
   1404a:	|  |  |  \-------- bgt.w 13f94 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1404e:	|  |  |            move.l 76(sp),d0
   14052:	|  +--|----------- bra.w 141fa <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14056:	|  |  |            pea 18e6d <line.c.05397aaf+0x1a6>
   1405c:	|  |  |            jsr b8 <copyString>
   14062:	|  |  |            addq.l #4,sp
   14064:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14068:	|  |  |            movea.l 84(sp),a0
   1406c:	|  |  |            movea.l 4(a0),a0
   14070:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14074:	|  |  |     /----- bra.w 14116 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14078:	|  |  |  /--|----> pea 18e6b <line.c.05397aaf+0x1a4>
   1407e:	|  |  |  |  |      move.l 72(sp),-(sp)
   14082:	|  |  |  |  |      jsr 12e80 <joinStrings>
   14088:	|  |  |  |  |      addq.l #8,sp
   1408a:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1408e:	|  |  |  |  |  /-- bne.s 14096 <getTextFromAnyVar+0x16c>
   14090:	|  |  |  |  |  |   moveq #0,d0
   14092:	|  +--|--|--|--|-- bra.w 141fa <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14096:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   1409c:	|  |  |  |  |      move.l 1b848 <SysBase>,d0
   140a2:	|  |  |  |  |      movea.l d0,a6
   140a4:	|  |  |  |  |      movea.l 32(sp),a1
   140a8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   140ac:	|  |  |  |  |      move.l 64(sp),d0
   140b0:	|  |  |  |  |      move.l d0,-(sp)
   140b2:	|  |  \--|--|----- jsr 13f2a <getTextFromAnyVar>(pc)
   140b6:	|  |     |  |      addq.l #4,sp
   140b8:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   140bc:	|  |     |  |      move.l 28(sp),-(sp)
   140c0:	|  |     |  |      move.l 40(sp),-(sp)
   140c4:	|  |     |  |      jsr 12e80 <joinStrings>
   140ca:	|  |     |  |      addq.l #8,sp
   140cc:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   140d0:	|  |     |  |  /-- bne.s 140d8 <getTextFromAnyVar+0x1ae>
   140d2:	|  |     |  |  |   moveq #0,d0
   140d4:	|  +-----|--|--|-- bra.w 141fa <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   140d8:	|  |     |  |  \-> move.l 28(sp),24(sp)
   140de:	|  |     |  |      move.l 1b848 <SysBase>,d0
   140e4:	|  |     |  |      movea.l d0,a6
   140e6:	|  |     |  |      movea.l 24(sp),a1
   140ea:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   140ee:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   140f2:	|  |     |  |      move.l 36(sp),20(sp)
   140f8:	|  |     |  |      move.l 1b848 <SysBase>,d0
   140fe:	|  |     |  |      movea.l d0,a6
   14100:	|  |     |  |      movea.l 20(sp),a1
   14104:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14108:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1410c:	|  |     |  |      movea.l 64(sp),a0
   14110:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14116:	|  |     |  \----> tst.l 64(sp)
   1411a:	|  |     \-------- bne.w 14078 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1411e:	|  |               move.l 68(sp),d0
   14122:	|  +-------------- bra.w 141fa <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14126:	|  |               moveq #10,d0
   14128:	|  |               move.l d0,16(sp)
   1412c:	|  |               clr.l 12(sp)
   14130:	|  |               move.l 1b848 <SysBase>,d0
   14136:	|  |               movea.l d0,a6
   14138:	|  |               move.l 16(sp),d0
   1413c:	|  |               move.l 12(sp),d1
   14140:	|  |               jsr -684(a6)
   14144:	|  |               move.l d0,8(sp)
   14148:	|  |               move.l 8(sp),d0
   1414c:	|  |               move.l d0,4(sp)
			if (! buff) {
   14150:	|  |           /-- bne.s 14166 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14152:	|  |           |   pea 18e74 <line.c.05397aaf+0x1ad>
   14158:	|  |           |   jsr 16274 <KPrintF>
   1415e:	|  |           |   addq.l #4,sp
				return NULL;
   14160:	|  |           |   moveq #0,d0
   14162:	|  +-----------|-- bra.w 141fa <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14166:	|  |           \-> movea.l 84(sp),a0
   1416a:	|  |               move.l 4(a0),d0
   1416e:	|  |               move.l d0,-(sp)
   14170:	|  |               pea 18e9e <line.c.05397aaf+0x1d7>
   14176:	|  |               move.l 12(sp),-(sp)
   1417a:	|  |               jsr 1315e <sprintf>
   14180:	|  |               lea 12(sp),sp
			return buff;
   14184:	|  |               move.l 4(sp),d0
   14188:	|  +-------------- bra.s 141fa <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1418a:	|  |               movea.l 84(sp),a0
   1418e:	|  |               move.l 4(a0),d0
   14192:	|  |               move.l d0,-(sp)
   14194:	|  |               jsr 3152 <resourceNameFromNum>
   1419a:	|  |               addq.l #4,sp
   1419c:	|  |               move.l d0,-(sp)
   1419e:	|  |               pea 177de <PutChar+0xc1a>
   141a4:	|  |               jsr 12e80 <joinStrings>
   141aa:	|  |               addq.l #8,sp
   141ac:	|  +-------------- bra.s 141fa <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   141ae:	|  |               movea.l 84(sp),a0
   141b2:	|  |               move.l 4(a0),d0
   141b6:	|  |               move.l d0,-(sp)
   141b8:	|  |               jsr c740 <findObjectType>
   141be:	|  |               addq.l #4,sp
   141c0:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   141c4:	+--|-------------- beq.s 141d8 <getTextFromAnyVar+0x2ae>
   141c6:	|  |               movea.l 40(sp),a0
   141ca:	|  |               move.l (a0),d0
   141cc:	|  |               move.l d0,-(sp)
   141ce:	|  |               jsr b8 <copyString>
   141d4:	|  |               addq.l #4,sp
   141d6:	|  +-------------- bra.s 141fa <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   141d8:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   141da:	   |               movea.l 84(sp),a0
   141de:	   |               move.l (a0),d0
   141e0:	   |               add.l d0,d0
   141e2:	   |               movea.l d0,a1
   141e4:	   |               adda.l d0,a1
   141e6:	   |               lea 1b726 <typeName>,a0
   141ec:	   |               move.l (0,a1,a0.l),d0
   141f0:	   |               move.l d0,-(sp)
   141f2:	   |               jsr b8 <copyString>
   141f8:	   |               addq.l #4,sp
}
   141fa:	   \-------------> movea.l (sp)+,a6
   141fc:	                   lea 76(sp),sp
   14200:	                   rts

00014202 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14202:	move.l 4(sp),-(sp)
   14206:	jsr 13ba2 <unlinkVar>
   1420c:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1420e:	movea.l 4(sp),a0
   14212:	moveq #8,d0
   14214:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14216:	movea.l 4(sp),a0
   1421a:	move.l 8(sp),4(a0)
}
   14220:	nop
   14222:	rts

00014224 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14224:	move.l 4(sp),-(sp)
   14228:	jsr 13ba2 <unlinkVar>
   1422e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14230:	movea.l 4(sp),a0
   14234:	moveq #9,d0
   14236:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14238:	movea.l 4(sp),a0
   1423c:	move.l 8(sp),4(a0)
}
   14242:	nop
   14244:	rts

00014246 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14246:	move.l 4(sp),-(sp)
   1424a:	jsr 13ba2 <unlinkVar>
   14250:	addq.l #4,sp
	thisVar->varType = vT;
   14252:	movea.l 4(sp),a0
   14256:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1425a:	movea.l 4(sp),a0
   1425e:	move.l 12(sp),4(a0)
}
   14264:	nop
   14266:	rts

00014268 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14268:	      /-- bra.s 1427a <stackGetByIndex+0x12>
        vS = vS->next;
   1426a:	/-----|-> movea.l 4(sp),a0
   1426e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14274:	|     +-- bne.s 1427a <stackGetByIndex+0x12>
            return NULL;
   14276:	|     |   moveq #0,d0
   14278:	|  /--|-- bra.s 1428e <stackGetByIndex+0x26>
    while (theIndex--) {
   1427a:	|  |  \-> move.l 8(sp),d0
   1427e:	|  |      move.l d0,d1
   14280:	|  |      subq.l #1,d1
   14282:	|  |      move.l d1,8(sp)
   14286:	|  |      tst.l d0
   14288:	\--|----- bne.s 1426a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1428a:	   |      move.l 4(sp),d0
}
   1428e:	   \----> rts

00014290 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14290:	          tst.l 4(sp)
   14294:	      /-- bne.s 142a4 <stackFindLast+0x14>
		return NULL;
   14296:	      |   moveq #0,d0
   14298:	/-----|-- bra.s 142b2 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1429a:	|  /--|-> movea.l 4(sp),a0
   1429e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   142a4:	|  |  \-> movea.l 4(sp),a0
   142a8:	|  |      move.l 8(a0),d0
   142ac:	|  \----- bne.s 1429a <stackFindLast+0xa>

	return hunt;
   142ae:	|         move.l 4(sp),d0
}
   142b2:	\-------> rts

000142b4 <stackSize>:

int stackSize (const struct stackHandler * me) {
   142b4:	       subq.l #8,sp
	int r = 0;
   142b6:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   142ba:	       movea.l 12(sp),a0
   142be:	       move.l (a0),(sp)
	while (a) {
   142c0:	   /-- bra.s 142cc <stackSize+0x18>
		r ++;
   142c2:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   142c6:	|  |   movea.l (sp),a0
   142c8:	|  |   move.l 8(a0),(sp)
	while (a) {
   142cc:	|  \-> tst.l (sp)
   142ce:	\----- bne.s 142c2 <stackSize+0xe>
	}
	return r;
   142d0:	       move.l 4(sp),d0
}
   142d4:	       addq.l #8,sp
   142d6:	       rts

000142d8 <trimStack>:

void trimStack (struct variableStack ** stack) {
   142d8:	subq.l #8,sp
   142da:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   142dc:	movea.l 16(sp),a0
   142e0:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   142e4:	movea.l 16(sp),a0
   142e8:	movea.l (a0),a0
   142ea:	move.l 8(a0),d0
   142ee:	movea.l 16(sp),a0
   142f2:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   142f4:	move.l 8(sp),d0
   142f8:	move.l d0,-(sp)
   142fa:	jsr 13ba2 <unlinkVar>
   14300:	addq.l #4,sp
	FreeVec(killMe);
   14302:	move.l 8(sp),4(sp)
   14308:	move.l 1b848 <SysBase>,d0
   1430e:	movea.l d0,a6
   14310:	movea.l 4(sp),a1
   14314:	jsr -690(a6)
   14318:	nop
   1431a:	movea.l (sp)+,a6
   1431c:	addq.l #8,sp
   1431e:	rts

00014320 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14320:	       lea -52(sp),sp
   14324:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14326:	       pea 18ea1 <line.c.05397aaf+0x1da>
   1432c:	       jsr 16274 <KPrintF>
   14332:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14334:	       moveq #64,d0
   14336:	       move.l d0,52(sp)
   1433a:	       clr.l 48(sp)
   1433e:	       move.l 1b848 <SysBase>,d0
   14344:	       movea.l d0,a6
   14346:	       move.l 52(sp),d0
   1434a:	       move.l 48(sp),d1
   1434e:	       jsr -684(a6)
   14352:	       move.l d0,44(sp)
   14356:	       move.l 44(sp),d0
   1435a:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1435e:	   /-- bne.s 14366 <freeze+0x46>
   14360:	   |   clr.w d0
   14362:	/--|-- bra.w 144dc <freeze+0x1bc>

	CstFreeze();
   14366:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1436c:	|      move.l 1b93c <sceneWidth>,d0
   14372:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14376:	|      move.l 1b940 <sceneHeight>,d0
   1437c:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14380:	|      move.l 1b93c <sceneWidth>,d0
   14386:	|      movea.l 40(sp),a0
   1438a:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1438e:	|      move.l 1b940 <sceneHeight>,d0
   14394:	|      movea.l 40(sp),a0
   14398:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1439c:	|      move.l 1b95a <cameraX>,d0
   143a2:	|      movea.l 40(sp),a0
   143a6:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   143aa:	|      move.l 1b95e <cameraY>,d0
   143b0:	|      movea.l 40(sp),a0
   143b4:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   143b8:	|      move.l 1b1e8 <cameraZoom>,d0
   143be:	|      movea.l 40(sp),a0
   143c2:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   143c6:	|      move.w #1,1b948 <backdropExists>

	newFreezer -> allPeople = allPeople;
   143ce:	|      move.l 1b900 <allPeople>,d0
   143d4:	|      movea.l 40(sp),a0
   143d8:	|      move.l d0,(a0)
	allPeople = NULL;
   143da:	|      clr.l 1b900 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   143e0:	|      moveq #42,d0
   143e2:	|      move.l d0,28(sp)
   143e6:	|      clr.l 24(sp)
   143ea:	|      move.l 1b848 <SysBase>,d0
   143f0:	|      movea.l d0,a6
   143f2:	|      move.l 28(sp),d0
   143f6:	|      move.l 24(sp),d1
   143fa:	|      jsr -684(a6)
   143fe:	|      move.l d0,20(sp)
   14402:	|      move.l 20(sp),d0
   14406:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1440a:	|  /-- bne.s 14412 <freeze+0xf2>
   1440c:	|  |   clr.w d0
   1440e:	+--|-- bra.w 144dc <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   14412:	|  \-> move.l 1b9b0 <allScreenRegions>,d0
   14418:	|      movea.l 40(sp),a0
   1441c:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14420:	|      clr.l 1b9b0 <allScreenRegions>
	overRegion = NULL;
   14426:	|      clr.l 1b9b4 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1442c:	|      move.l 1b750 <mouseCursorAnim>,d0
   14432:	|      movea.l 40(sp),a0
   14436:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1443a:	|      move.l 1b754 <mouseCursorFrameNum>,d0
   14440:	|      movea.l 40(sp),a0
   14444:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14448:	|      jsr 9f48 <makeNullAnim>
   1444e:	|      move.l d0,1b750 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14454:	|      clr.l 1b754 <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   1445a:	|      move.l 1b8a4 <speech>,d0
   14460:	|      movea.l 40(sp),a0
   14464:	|      move.l d0,20(a0)
	initSpeech ();
   14468:	|      jsr 6eea <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1446e:	|      moveq #28,d0
   14470:	|      move.l d0,12(sp)
   14474:	|      clr.l 8(sp)
   14478:	|      move.l 1b848 <SysBase>,d0
   1447e:	|      movea.l d0,a6
   14480:	|      move.l 12(sp),d0
   14484:	|      move.l 8(sp),d1
   14488:	|      jsr -684(a6)
   1448c:	|      move.l d0,4(sp)
   14490:	|      move.l 4(sp),d0
   14494:	|      movea.l 40(sp),a0
   14498:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   1449c:	|      movea.l 40(sp),a0
   144a0:	|      move.l 28(a0),d0
   144a4:	|  /-- bne.s 144aa <freeze+0x18a>
   144a6:	|  |   clr.w d0
   144a8:	+--|-- bra.s 144dc <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   144aa:	|  \-> movea.l 40(sp),a0
   144ae:	|      move.l 28(a0),d0
   144b2:	|      pea 1c <_start+0x1c>
   144b6:	|      clr.l -(sp)
   144b8:	|      move.l d0,-(sp)
   144ba:	|      jsr 161f8 <memset>
   144c0:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   144c4:	|      move.l 1b994 <frozenStuff>,d0
   144ca:	|      movea.l 40(sp),a0
   144ce:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   144d2:	|      move.l 40(sp),1b994 <frozenStuff>

	return TRUE;
   144da:	|      moveq #1,d0
}
   144dc:	\----> movea.l (sp)+,a6
   144de:	       lea 52(sp),sp
   144e2:	       rts

000144e4 <unfreeze>:

void unfreeze () {
   144e4:	       lea -16(sp),sp
   144e8:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   144ea:	       move.l 1b994 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   144f2:	       move.l 1b994 <frozenStuff>,d0
   144f8:	/----- beq.w 1471a <unfreeze+0x236>

	CstUnfreeze();
   144fc:	|      jsr 2d80 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   14502:	|      movea.l 1b994 <frozenStuff>,a0
   14508:	|      move.l 48(a0),d0
   1450c:	|      move.l d0,1b93c <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   14512:	|      movea.l 1b994 <frozenStuff>,a0
   14518:	|      move.l 52(a0),d0
   1451c:	|      move.l d0,1b940 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   14522:	|      movea.l 1b994 <frozenStuff>,a0
   14528:	|      move.l 40(a0),d0
   1452c:	|      move.l d0,1b95a <cameraX>
	cameraY = frozenStuff -> cameraY;
   14532:	|      movea.l 1b994 <frozenStuff>,a0
   14538:	|      move.l 44(a0),d0
   1453c:	|      move.l d0,1b95e <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   14542:	|      move.l 1b804 <input+0xa>,d0
   14548:	|      move.l d0,-(sp)
   1454a:	|      jsr 1652c <__floatsisf>
   14550:	|      addq.l #4,sp
   14552:	|      move.l d0,d1
   14554:	|      move.l 1b1e8 <cameraZoom>,d0
   1455a:	|      move.l d0,-(sp)
   1455c:	|      move.l d1,-(sp)
   1455e:	|      jsr 165de <__mulsf3>
   14564:	|      addq.l #8,sp
   14566:	|      move.l d0,-(sp)
   14568:	|      jsr 164c4 <__fixsfsi>
   1456e:	|      addq.l #4,sp
   14570:	|      move.l d0,1b804 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   14576:	|      move.l 1b808 <input+0xe>,d0
   1457c:	|      move.l d0,-(sp)
   1457e:	|      jsr 1652c <__floatsisf>
   14584:	|      addq.l #4,sp
   14586:	|      move.l d0,d1
   14588:	|      move.l 1b1e8 <cameraZoom>,d0
   1458e:	|      move.l d0,-(sp)
   14590:	|      move.l d1,-(sp)
   14592:	|      jsr 165de <__mulsf3>
   14598:	|      addq.l #8,sp
   1459a:	|      move.l d0,-(sp)
   1459c:	|      jsr 164c4 <__fixsfsi>
   145a2:	|      addq.l #4,sp
   145a4:	|      move.l d0,1b808 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   145aa:	|      movea.l 1b994 <frozenStuff>,a0
   145b0:	|      move.l 56(a0),d0
   145b4:	|      move.l d0,1b1e8 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   145ba:	|      move.l 1b804 <input+0xa>,d0
   145c0:	|      move.l d0,-(sp)
   145c2:	|      jsr 1652c <__floatsisf>
   145c8:	|      addq.l #4,sp
   145ca:	|      move.l d0,d1
   145cc:	|      move.l 1b1e8 <cameraZoom>,d0
   145d2:	|      move.l d0,-(sp)
   145d4:	|      move.l d1,-(sp)
   145d6:	|      jsr 163d8 <__divsf3>
   145dc:	|      addq.l #8,sp
   145de:	|      move.l d0,-(sp)
   145e0:	|      jsr 164c4 <__fixsfsi>
   145e6:	|      addq.l #4,sp
   145e8:	|      move.l d0,1b804 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   145ee:	|      move.l 1b808 <input+0xe>,d0
   145f4:	|      move.l d0,-(sp)
   145f6:	|      jsr 1652c <__floatsisf>
   145fc:	|      addq.l #4,sp
   145fe:	|      move.l d0,d1
   14600:	|      move.l 1b1e8 <cameraZoom>,d0
   14606:	|      move.l d0,-(sp)
   14608:	|      move.l d1,-(sp)
   1460a:	|      jsr 163d8 <__divsf3>
   14610:	|      addq.l #8,sp
   14612:	|      move.l d0,-(sp)
   14614:	|      jsr 164c4 <__fixsfsi>
   1461a:	|      addq.l #4,sp
   1461c:	|      move.l d0,1b808 <input+0xe>

	killAllPeople ();
   14622:	|      jsr 9c50 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   14628:	|      movea.l 1b994 <frozenStuff>,a0
   1462e:	|      move.l (a0),d0
   14630:	|      move.l d0,1b900 <allPeople>

	killAllRegions ();
   14636:	|      jsr 14ac4 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1463c:	|      movea.l 1b994 <frozenStuff>,a0
   14642:	|      move.l 4(a0),d0
   14646:	|      move.l d0,1b9b0 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1464c:	|      move.l 1b750 <mouseCursorAnim>,d0
   14652:	|      move.l d0,-(sp)
   14654:	|      jsr 8b44 <deleteAnim>
   1465a:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1465c:	|      movea.l 1b994 <frozenStuff>,a0
   14662:	|      move.l 32(a0),d0
   14666:	|      move.l d0,1b750 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1466c:	|      movea.l 1b994 <frozenStuff>,a0
   14672:	|      move.l 36(a0),d0
   14676:	|      move.l d0,1b754 <mouseCursorFrameNum>

	if (currentEvents) FreeVec(currentEvents);
   1467c:	|      move.l 1b1c2 <currentEvents>,d0
   14682:	|  /-- beq.s 1469c <unfreeze+0x1b8>
   14684:	|  |   move.l 1b1c2 <currentEvents>,12(sp)
   1468c:	|  |   move.l 1b848 <SysBase>,d0
   14692:	|  |   movea.l d0,a6
   14694:	|  |   movea.l 12(sp),a1
   14698:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1469c:	|  \-> movea.l 1b994 <frozenStuff>,a0
   146a2:	|      move.l 28(a0),d0
   146a6:	|      move.l d0,1b1c2 <currentEvents>

	killAllSpeech ();
   146ac:	|      jsr 6f82 <killAllSpeech>
	if (speech) FreeVec(speech);
   146b2:	|      move.l 1b8a4 <speech>,d0
   146b8:	|  /-- beq.s 146d2 <unfreeze+0x1ee>
   146ba:	|  |   move.l 1b8a4 <speech>,8(sp)
   146c2:	|  |   move.l 1b848 <SysBase>,d0
   146c8:	|  |   movea.l d0,a6
   146ca:	|  |   movea.l 8(sp),a1
   146ce:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   146d2:	|  \-> movea.l 1b994 <frozenStuff>,a0
   146d8:	|      move.l 20(a0),d0
   146dc:	|      move.l d0,1b8a4 <speech>

	frozenStuff = frozenStuff -> next;
   146e2:	|      movea.l 1b994 <frozenStuff>,a0
   146e8:	|      move.l 60(a0),d0
   146ec:	|      move.l d0,1b994 <frozenStuff>

	overRegion = NULL;
   146f2:	|      clr.l 1b9b4 <overRegion>
	if (killMe) FreeVec(killMe);
   146f8:	|      tst.l 16(sp)
   146fc:	|  /-- beq.s 14714 <unfreeze+0x230>
   146fe:	|  |   move.l 16(sp),4(sp)
   14704:	|  |   move.l 1b848 <SysBase>,d0
   1470a:	|  |   movea.l d0,a6
   1470c:	|  |   movea.l 4(sp),a1
   14710:	|  |   jsr -690(a6)
	killMe = NULL;
   14714:	|  \-> clr.l 16(sp)
   14718:	|  /-- bra.s 1471c <unfreeze+0x238>
	if (! frozenStuff) return;
   1471a:	\--|-> nop
}
   1471c:	   \-> movea.l (sp)+,a6
   1471e:	       lea 16(sp),sp
   14722:	       rts

00014724 <isInFont>:
ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   14724:	pea 18eb3 <line.c.05397aaf+0x1ec>
   1472a:	jsr 16274 <KPrintF>
   14730:	addq.l #4,sp
	return FALSE;
   14732:	clr.w d0
}
   14734:	rts

00014736 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   14736:	          lea -44(sp),sp
   1473a:	          move.l a6,-(sp)
   1473c:	          move.l d2,-(sp)
	unsigned int a = 0;
   1473e:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   14742:	          move.l 1b9a0 <fontOrderString>,d0
   14748:	      /-- beq.s 14762 <loadFont+0x2c>
   1474a:	      |   move.l 1b9a0 <fontOrderString>,36(sp)
   14752:	      |   move.l 1b848 <SysBase>,d0
   14758:	      |   movea.l d0,a6
   1475a:	      |   movea.l 36(sp),a1
   1475e:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   14762:	      \-> move.l 60(sp),-(sp)
   14766:	          jsr b8 <copyString>
   1476c:	          addq.l #4,sp
   1476e:	          move.l d0,1b9a0 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   14774:	          move.l 1b9ac <theFont>,d0
   1477a:	      /-- beq.s 1478c <loadFont+0x56>
   1477c:	      |   move.l 1b9ac <theFont>,d0
   14782:	      |   move.l d0,-(sp)
   14784:	      |   jsr 7cb6 <forgetSpriteBank>
   1478a:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   1478c:	      \-> moveq #26,d0
   1478e:	          move.l d0,32(sp)
   14792:	          clr.l 28(sp)
   14796:	          move.l 1b848 <SysBase>,d0
   1479c:	          movea.l d0,a6
   1479e:	          move.l 32(sp),d0
   147a2:	          move.l 28(sp),d1
   147a6:	          jsr -684(a6)
   147aa:	          move.l d0,24(sp)
   147ae:	          move.l 24(sp),d0
   147b2:	          move.l d0,1b9ac <theFont>

	loadedFontNum = filenum;
   147b8:	          move.l 56(sp),1b99c <loadedFontNum>

	fontTableSize = 0;
   147c0:	          clr.l 1b9a8 <fontTableSize>
	char *tmp = charOrder;
   147c6:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   147cc:	   /----- bra.s 14808 <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   147ce:	/--|----> movea.l 44(sp),a0
   147d2:	|  |      move.b (a0),d0
   147d4:	|  |      ext.w d0
   147d6:	|  |      movea.w d0,a0
   147d8:	|  |      move.l 1b9a8 <fontTableSize>,d0
   147de:	|  |      move.l d0,d0
   147e0:	|  |      move.b d0,d0
   147e2:	|  |      andi.l #255,d0
   147e8:	|  |      cmp.l a0,d0
   147ea:	|  |  /-- bge.s 147fc <loadFont+0xc6>
   147ec:	|  |  |   movea.l 44(sp),a0
   147f0:	|  |  |   move.b (a0),d0
   147f2:	|  |  |   ext.w d0
   147f4:	|  |  |   movea.w d0,a0
   147f6:	|  |  |   move.l a0,1b9a8 <fontTableSize>
		*tmp++;
   147fc:	|  |  \-> move.l 44(sp),d0
   14800:	|  |      move.l d0,d1
   14802:	|  |      addq.l #1,d1
   14804:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   14808:	|  \----> movea.l 44(sp),a0
   1480c:	|         move.b (a0),d0
   1480e:	\-------- bne.s 147ce <loadFont+0x98>
	}
	fontTableSize++;
   14810:	          move.l 1b9a8 <fontTableSize>,d0
   14816:	          addq.l #1,d0
   14818:	          move.l d0,1b9a8 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   1481e:	          move.l 1b9a4 <fontTable>,d0
   14824:	      /-- beq.s 1483e <loadFont+0x108>
   14826:	      |   move.l 1b9a4 <fontTable>,20(sp)
   1482e:	      |   move.l 1b848 <SysBase>,d0
   14834:	      |   movea.l d0,a6
   14836:	      |   movea.l 20(sp),a1
   1483a:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1483e:	      \-> move.l 1b9a8 <fontTableSize>,d0
   14844:	          add.l d0,d0
   14846:	          add.l d0,d0
   14848:	          move.l d0,16(sp)
   1484c:	          clr.l 12(sp)
   14850:	          move.l 1b848 <SysBase>,d0
   14856:	          movea.l d0,a6
   14858:	          move.l 16(sp),d0
   1485c:	          move.l 12(sp),d1
   14860:	          jsr -684(a6)
   14864:	          move.l d0,8(sp)
   14868:	          move.l 8(sp),d0
   1486c:	          move.l d0,1b9a4 <fontTable>
	if (!fontTable) return FALSE;
   14872:	          move.l 1b9a4 <fontTable>,d0
   14878:	      /-- bne.s 14880 <loadFont+0x14a>
   1487a:	      |   clr.w d0
   1487c:	/-----|-- bra.w 1492c <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   14880:	|     \-> clr.l 48(sp)
   14884:	|     /-- bra.s 1489e <loadFont+0x168>
		fontTable[a] = 0;
   14886:	|  /--|-> move.l 1b9a4 <fontTable>,d1
   1488c:	|  |  |   move.l 48(sp),d0
   14890:	|  |  |   add.l d0,d0
   14892:	|  |  |   add.l d0,d0
   14894:	|  |  |   movea.l d1,a0
   14896:	|  |  |   adda.l d0,a0
   14898:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   1489a:	|  |  |   addq.l #1,48(sp)
   1489e:	|  |  \-> move.l 1b9a8 <fontTableSize>,d0
   148a4:	|  |      cmp.l 48(sp),d0
   148a8:	|  \----- bhi.s 14886 <loadFont+0x150>
	}
	a = 0;
   148aa:	|         clr.l 48(sp)
	int i = 0;
   148ae:	|         clr.l 40(sp)
	tmp = charOrder;
   148b2:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   148b8:	|     /-- bra.s 148e8 <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   148ba:	|  /--|-> move.l 1b9a4 <fontTable>,d1
   148c0:	|  |  |   move.l 44(sp),d0
   148c4:	|  |  |   move.l d0,d2
   148c6:	|  |  |   addq.l #1,d2
   148c8:	|  |  |   move.l d2,44(sp)
   148cc:	|  |  |   movea.l d0,a0
   148ce:	|  |  |   move.b (a0),d0
   148d0:	|  |  |   ext.w d0
   148d2:	|  |  |   movea.w d0,a0
   148d4:	|  |  |   move.l a0,d0
   148d6:	|  |  |   add.l a0,d0
   148d8:	|  |  |   add.l d0,d0
   148da:	|  |  |   movea.l d1,a0
   148dc:	|  |  |   adda.l d0,a0
   148de:	|  |  |   move.l 40(sp),d0
   148e2:	|  |  |   move.l d0,(a0)
		i++;
   148e4:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   148e8:	|  |  \-> movea.l 44(sp),a0
   148ec:	|  |      move.b (a0),d0
   148ee:	|  \----- bne.s 148ba <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   148f0:	|         move.l 1b9ac <theFont>,d0
   148f6:	|         addq.l #8,d0
   148f8:	|         pea 1 <_start+0x1>
   148fc:	|         move.l d0,-(sp)
   148fe:	|         move.l 64(sp),-(sp)
   14902:	|         jsr 7dd8 <loadSpriteBank>
   14908:	|         lea 12(sp),sp
   1490c:	|         tst.w d0
   1490e:	|     /-- bne.s 14922 <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   14910:	|     |   pea 18eda <line.c.05397aaf+0x213>
   14916:	|     |   jsr 16274 <KPrintF>
   1491c:	|     |   addq.l #4,sp
		return FALSE;
   1491e:	|     |   clr.w d0
   14920:	+-----|-- bra.s 1492c <loadFont+0x1f6>
	}
	fontHeight = h;
   14922:	|     \-> move.l 64(sp),1b998 <fontHeight>
	return TRUE;
   1492a:	|         moveq #1,d0
}
   1492c:	\-------> move.l (sp)+,d2
   1492e:	          movea.l (sp)+,a6
   14930:	          lea 44(sp),sp
   14934:	          rts

00014936 <stringWidth>:
        xOff += mySprite->width + fontSpace;
    }
}


int stringWidth (char * theText) {
   14936:	       subq.l #8,sp
	int a = 0;
   14938:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1493c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1493e:	       move.l 1b9a8 <fontTableSize>,d0
   14944:	/----- bne.s 1494a <stringWidth+0x14>
   14946:	|      moveq #0,d0
   14948:	|  /-- bra.s 1494c <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1494a:	\--|-> move.l (sp),d0
}
   1494c:	   \-> addq.l #8,sp
   1494e:	       rts

00014950 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   14950:	       lea -16(sp),sp
   14954:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   14956:	       moveq #36,d0
   14958:	       move.l d0,16(sp)
   1495c:	       clr.l 12(sp)
   14960:	       move.l 1b848 <SysBase>,d0
   14966:	       movea.l d0,a6
   14968:	       move.l 16(sp),d0
   1496c:	       move.l 12(sp),d1
   14970:	       jsr -684(a6)
   14974:	       move.l d0,8(sp)
   14978:	       move.l 8(sp),d0
   1497c:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   14980:	   /-- bne.s 14988 <addScreenRegion+0x38>
   14982:	   |   clr.w d0
   14984:	/--|-- bra.w 14a08 <addScreenRegion+0xb8>
    newRegion->di = di;
   14988:	|  \-> movea.l 4(sp),a0
   1498c:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   14992:	|      movea.l 4(sp),a0
   14996:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1499a:	|      movea.l 4(sp),a0
   1499e:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   149a4:	|      movea.l 4(sp),a0
   149a8:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   149ae:	|      movea.l 4(sp),a0
   149b2:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   149b8:	|      movea.l 4(sp),a0
   149bc:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   149c2:	|      movea.l 4(sp),a0
   149c6:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   149cc:	|      move.l 52(sp),-(sp)
   149d0:	|      jsr c830 <loadObjectType>
   149d6:	|      addq.l #4,sp
   149d8:	|      movea.l 4(sp),a0
   149dc:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   149e0:	|      move.l 1b9b0 <allScreenRegions>,d0
   149e6:	|      movea.l 4(sp),a0
   149ea:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   149ee:	|      move.l 4(sp),1b9b0 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   149f6:	|      movea.l 4(sp),a0
   149fa:	|      move.l 28(a0),d0
   149fe:	|      sne d0
   14a00:	|      neg.b d0
   14a02:	|      move.b d0,d0
   14a04:	|      andi.w #255,d0
}
   14a08:	\----> movea.l (sp)+,a6
   14a0a:	       lea 16(sp),sp
   14a0e:	       rts

00014a10 <getOverRegion>:

void getOverRegion () {
   14a10:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14a12:	             move.l 1b9b0 <allScreenRegions>,(sp)
	while (thisRegion) {
   14a18:	   /-------- bra.s 14a86 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   14a1a:	/--|-------> move.l 1b804 <input+0xa>,d0
   14a20:	|  |         movea.l (sp),a0
   14a22:	|  |         movea.l (a0),a0
   14a24:	|  |         move.l 1b95a <cameraX>,d1
   14a2a:	|  |         suba.l d1,a0
   14a2c:	|  |         cmpa.l d0,a0
   14a2e:	|  |  /----- bgt.s 14a80 <getOverRegion+0x70>
   14a30:	|  |  |      move.l 1b808 <input+0xe>,d0
   14a36:	|  |  |      movea.l (sp),a0
   14a38:	|  |  |      movea.l 4(a0),a0
   14a3c:	|  |  |      move.l 1b95e <cameraY>,d1
   14a42:	|  |  |      suba.l d1,a0
   14a44:	|  |  |      cmpa.l d0,a0
   14a46:	|  |  +----- bgt.s 14a80 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   14a48:	|  |  |      move.l 1b804 <input+0xa>,d0
   14a4e:	|  |  |      movea.l (sp),a0
   14a50:	|  |  |      movea.l 8(a0),a0
   14a54:	|  |  |      move.l 1b95a <cameraX>,d1
   14a5a:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   14a5c:	|  |  |      cmpa.l d0,a0
   14a5e:	|  |  +----- blt.s 14a80 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   14a60:	|  |  |      move.l 1b808 <input+0xe>,d0
   14a66:	|  |  |      movea.l (sp),a0
   14a68:	|  |  |      movea.l 12(a0),a0
   14a6c:	|  |  |      move.l 1b95e <cameraY>,d1
   14a72:	|  |  |      suba.l d1,a0
   14a74:	|  |  |      cmpa.l d0,a0
   14a76:	|  |  +----- blt.s 14a80 <getOverRegion+0x70>
			overRegion = thisRegion;
   14a78:	|  |  |      move.l (sp),1b9b4 <overRegion>
			return;
   14a7e:	|  |  |  /-- bra.s 14a92 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   14a80:	|  |  \--|-> movea.l (sp),a0
   14a82:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   14a86:	|  \-----|-> tst.l (sp)
   14a88:	\--------|-- bne.s 14a1a <getOverRegion+0xa>
	}
	overRegion = NULL;
   14a8a:	         |   clr.l 1b9b4 <overRegion>
	return;
   14a90:	         |   nop
}
   14a92:	         \-> addq.l #4,sp
   14a94:	             rts

00014a96 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   14a96:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14a98:	             move.l 1b9b0 <allScreenRegions>,(sp)

	while (thisRegion) {
   14a9e:	   /-------- bra.s 14aba <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   14aa0:	/--|-------> movea.l (sp),a0
   14aa2:	|  |         movea.l 28(a0),a0
   14aa6:	|  |         move.l 4(a0),d0
   14aaa:	|  |         cmp.l 8(sp),d0
   14aae:	|  |     /-- bne.s 14ab4 <getRegionForObject+0x1e>
			return thisRegion;
   14ab0:	|  |     |   move.l (sp),d0
   14ab2:	|  |  /--|-- bra.s 14ac0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   14ab4:	|  |  |  \-> movea.l (sp),a0
   14ab6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   14aba:	|  \--|----> tst.l (sp)
   14abc:	\-----|----- bne.s 14aa0 <getRegionForObject+0xa>
	}

	return NULL;
   14abe:	      |      moveq #0,d0
}
   14ac0:	      \----> addq.l #4,sp
   14ac2:	             rts

00014ac4 <killAllRegions>:

void killAllRegions () {
   14ac4:	       subq.l #8,sp
   14ac6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   14ac8:	   /-- bra.s 14b0a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   14aca:	/--|-> move.l 1b9b0 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   14ad2:	|  |   movea.l 1b9b0 <allScreenRegions>,a0
   14ad8:	|  |   move.l 32(a0),d0
   14adc:	|  |   move.l d0,1b9b0 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   14ae2:	|  |   movea.l 8(sp),a0
   14ae6:	|  |   move.l 28(a0),d0
   14aea:	|  |   move.l d0,-(sp)
   14aec:	|  |   jsr cae8 <removeObjectType>
   14af2:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   14af4:	|  |   move.l 8(sp),4(sp)
   14afa:	|  |   move.l 1b848 <SysBase>,d0
   14b00:	|  |   movea.l d0,a6
   14b02:	|  |   movea.l 4(sp),a1
   14b06:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   14b0a:	|  \-> move.l 1b9b0 <allScreenRegions>,d0
   14b10:	\----- bne.s 14aca <killAllRegions+0x6>
	}
	overRegion = NULL;
   14b12:	       clr.l 1b9b4 <overRegion>
}
   14b18:	       nop
   14b1a:	       movea.l (sp)+,a6
   14b1c:	       addq.l #8,sp
   14b1e:	       rts

00014b20 <loadRegions>:

void loadRegions (BPTR fp) {
   14b20:	       lea -24(sp),sp
   14b24:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   14b26:	       move.l 32(sp),-(sp)
   14b2a:	       jsr 6bc <get2bytes>
   14b30:	       addq.l #4,sp
   14b32:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   14b36:	       move.l #113072,20(sp)

	while (numRegions --) {
   14b3e:	   /-- bra.w 14c1c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   14b42:	/--|-> moveq #36,d0
   14b44:	|  |   move.l d0,16(sp)
   14b48:	|  |   clr.l 12(sp)
   14b4c:	|  |   move.l 1b848 <SysBase>,d0
   14b52:	|  |   movea.l d0,a6
   14b54:	|  |   move.l 16(sp),d0
   14b58:	|  |   move.l 12(sp),d1
   14b5c:	|  |   jsr -684(a6)
   14b60:	|  |   move.l d0,8(sp)
   14b64:	|  |   move.l 8(sp),d0
   14b68:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   14b6c:	|  |   movea.l 20(sp),a0
   14b70:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   14b74:	|  |   moveq #32,d1
   14b76:	|  |   add.l 4(sp),d1
   14b7a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   14b7e:	|  |   move.l 32(sp),-(sp)
   14b82:	|  |   jsr 6bc <get2bytes>
   14b88:	|  |   addq.l #4,sp
   14b8a:	|  |   movea.l 4(sp),a0
   14b8e:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   14b90:	|  |   move.l 32(sp),-(sp)
   14b94:	|  |   jsr 6bc <get2bytes>
   14b9a:	|  |   addq.l #4,sp
   14b9c:	|  |   movea.l 4(sp),a0
   14ba0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   14ba4:	|  |   move.l 32(sp),-(sp)
   14ba8:	|  |   jsr 6bc <get2bytes>
   14bae:	|  |   addq.l #4,sp
   14bb0:	|  |   movea.l 4(sp),a0
   14bb4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   14bb8:	|  |   move.l 32(sp),-(sp)
   14bbc:	|  |   jsr 6bc <get2bytes>
   14bc2:	|  |   addq.l #4,sp
   14bc4:	|  |   movea.l 4(sp),a0
   14bc8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   14bcc:	|  |   move.l 32(sp),-(sp)
   14bd0:	|  |   jsr 6bc <get2bytes>
   14bd6:	|  |   addq.l #4,sp
   14bd8:	|  |   movea.l 4(sp),a0
   14bdc:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   14be0:	|  |   move.l 32(sp),-(sp)
   14be4:	|  |   jsr 6bc <get2bytes>
   14bea:	|  |   addq.l #4,sp
   14bec:	|  |   movea.l 4(sp),a0
   14bf0:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   14bf4:	|  |   move.l 32(sp),-(sp)
   14bf8:	|  |   jsr 6bc <get2bytes>
   14bfe:	|  |   addq.l #4,sp
   14c00:	|  |   movea.l 4(sp),a0
   14c04:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   14c08:	|  |   move.l 32(sp),-(sp)
   14c0c:	|  |   jsr c7de <loadObjectRef>
   14c12:	|  |   addq.l #4,sp
   14c14:	|  |   movea.l 4(sp),a0
   14c18:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   14c1c:	|  \-> move.l 24(sp),d0
   14c20:	|      move.l d0,d1
   14c22:	|      subq.l #1,d1
   14c24:	|      move.l d1,24(sp)
   14c28:	|      tst.l d0
   14c2a:	\----- bne.w 14b42 <loadRegions+0x22>
	}
	* pointy = NULL;
   14c2e:	       movea.l 20(sp),a0
   14c32:	       clr.l (a0)
}
   14c34:	       nop
   14c36:	       movea.l (sp)+,a6
   14c38:	       lea 24(sp),sp
   14c3c:	       rts

00014c3e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   14c3e:	             lea -12(sp),sp
   14c42:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   14c44:	             move.l #113072,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   14c4c:	   /-------- bra.s 14cc6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   14c4e:	/--|-------> movea.l 12(sp),a0
   14c52:	|  |         movea.l (a0),a0
   14c54:	|  |         movea.l 28(a0),a0
   14c58:	|  |         move.l 4(a0),d0
   14c5c:	|  |         cmp.l 20(sp),d0
   14c60:	|  |  /----- bne.s 14cb8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   14c62:	|  |  |      movea.l 12(sp),a0
   14c66:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   14c6a:	|  |  |      movea.l 8(sp),a0
   14c6e:	|  |  |      move.l 32(a0),d0
   14c72:	|  |  |      movea.l 12(sp),a0
   14c76:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   14c78:	|  |  |      movea.l 8(sp),a0
   14c7c:	|  |  |      move.l 28(a0),d0
   14c80:	|  |  |      move.l d0,-(sp)
   14c82:	|  |  |      jsr cae8 <removeObjectType>
   14c88:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   14c8a:	|  |  |      move.l 1b9b4 <overRegion>,d0
   14c90:	|  |  |      cmp.l 8(sp),d0
   14c94:	|  |  |  /-- bne.s 14c9c <removeScreenRegion+0x5e>
   14c96:	|  |  |  |   clr.l 1b9b4 <overRegion>
            FreeVec(killMe);
   14c9c:	|  |  |  \-> move.l 8(sp),4(sp)
   14ca2:	|  |  |      move.l 1b848 <SysBase>,d0
   14ca8:	|  |  |      movea.l d0,a6
   14caa:	|  |  |      movea.l 4(sp),a1
   14cae:	|  |  |      jsr -690(a6)
            killMe = NULL;
   14cb2:	|  |  |      clr.l 8(sp)
   14cb6:	|  +--|----- bra.s 14cc6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   14cb8:	|  |  \----> movea.l 12(sp),a0
   14cbc:	|  |         move.l (a0),d0
   14cbe:	|  |         moveq #32,d1
   14cc0:	|  |         add.l d0,d1
   14cc2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   14cc6:	|  \-------> movea.l 12(sp),a0
   14cca:	|            move.l (a0),d0
   14ccc:	\----------- bne.s 14c4e <removeScreenRegion+0x10>
        }
    }
}
   14cce:	             nop
   14cd0:	             nop
   14cd2:	             movea.l (sp)+,a6
   14cd4:	             lea 12(sp),sp
   14cd8:	             rts

00014cda <saveRegions>:

void saveRegions (BPTR fp) {
   14cda:	       subq.l #8,sp
	int numRegions = 0;
   14cdc:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   14ce0:	       move.l 1b9b0 <allScreenRegions>,(sp)
	while (thisRegion) {
   14ce6:	   /-- bra.s 14cf2 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   14ce8:	/--|-> movea.l (sp),a0
   14cea:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   14cee:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   14cf2:	|  \-> tst.l (sp)
   14cf4:	\----- bne.s 14ce8 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   14cf6:	       move.l 12(sp),-(sp)
   14cfa:	       move.l 8(sp),-(sp)
   14cfe:	       jsr 8d0 <put2bytes>
   14d04:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   14d06:	       move.l 1b9b0 <allScreenRegions>,(sp)
	while (thisRegion) {
   14d0c:	/----- bra.w 14db4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   14d10:	|  /-> movea.l (sp),a0
   14d12:	|  |   move.l (a0),d0
   14d14:	|  |   move.l 12(sp),-(sp)
   14d18:	|  |   move.l d0,-(sp)
   14d1a:	|  |   jsr 8d0 <put2bytes>
   14d20:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   14d22:	|  |   movea.l (sp),a0
   14d24:	|  |   move.l 4(a0),d0
   14d28:	|  |   move.l 12(sp),-(sp)
   14d2c:	|  |   move.l d0,-(sp)
   14d2e:	|  |   jsr 8d0 <put2bytes>
   14d34:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   14d36:	|  |   movea.l (sp),a0
   14d38:	|  |   move.l 8(a0),d0
   14d3c:	|  |   move.l 12(sp),-(sp)
   14d40:	|  |   move.l d0,-(sp)
   14d42:	|  |   jsr 8d0 <put2bytes>
   14d48:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   14d4a:	|  |   movea.l (sp),a0
   14d4c:	|  |   move.l 12(a0),d0
   14d50:	|  |   move.l 12(sp),-(sp)
   14d54:	|  |   move.l d0,-(sp)
   14d56:	|  |   jsr 8d0 <put2bytes>
   14d5c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   14d5e:	|  |   movea.l (sp),a0
   14d60:	|  |   move.l 16(a0),d0
   14d64:	|  |   move.l 12(sp),-(sp)
   14d68:	|  |   move.l d0,-(sp)
   14d6a:	|  |   jsr 8d0 <put2bytes>
   14d70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   14d72:	|  |   movea.l (sp),a0
   14d74:	|  |   move.l 20(a0),d0
   14d78:	|  |   move.l 12(sp),-(sp)
   14d7c:	|  |   move.l d0,-(sp)
   14d7e:	|  |   jsr 8d0 <put2bytes>
   14d84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   14d86:	|  |   movea.l (sp),a0
   14d88:	|  |   move.l 24(a0),d0
   14d8c:	|  |   move.l 12(sp),-(sp)
   14d90:	|  |   move.l d0,-(sp)
   14d92:	|  |   jsr 8d0 <put2bytes>
   14d98:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   14d9a:	|  |   movea.l (sp),a0
   14d9c:	|  |   move.l 28(a0),d0
   14da0:	|  |   move.l 12(sp),-(sp)
   14da4:	|  |   move.l d0,-(sp)
   14da6:	|  |   jsr cb88 <saveObjectRef>
   14dac:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   14dae:	|  |   movea.l (sp),a0
   14db0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   14db4:	\--|-> tst.l (sp)
   14db6:	   \-- bne.w 14d10 <saveRegions+0x36>
	}
}
   14dba:	       nop
   14dbc:	       nop
   14dbe:	       addq.l #8,sp
   14dc0:	       rts

00014dc2 <showBoxes>:

void showBoxes () {
   14dc2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   14dc4:	       move.l 1b9b0 <allScreenRegions>,(sp)

	while (huntRegion) {
   14dca:	/----- bra.w 14e66 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   14dce:	|  /-> movea.l (sp),a0
   14dd0:	|  |   move.l 12(a0),d0
   14dd4:	|  |   movea.l d0,a1
   14dd6:	|  |   movea.l (sp),a0
   14dd8:	|  |   move.l 4(a0),d0
   14ddc:	|  |   move.l d0,d1
   14dde:	|  |   movea.l (sp),a0
   14de0:	|  |   move.l (a0),d0
   14de2:	|  |   move.l a1,-(sp)
   14de4:	|  |   move.l d1,-(sp)
   14de6:	|  |   move.l d0,-(sp)
   14de8:	|  |   jsr c46c <drawVerticalLine>
   14dee:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   14df2:	|  |   movea.l (sp),a0
   14df4:	|  |   move.l 12(a0),d0
   14df8:	|  |   movea.l d0,a1
   14dfa:	|  |   movea.l (sp),a0
   14dfc:	|  |   move.l 4(a0),d0
   14e00:	|  |   move.l d0,d1
   14e02:	|  |   movea.l (sp),a0
   14e04:	|  |   move.l 8(a0),d0
   14e08:	|  |   move.l a1,-(sp)
   14e0a:	|  |   move.l d1,-(sp)
   14e0c:	|  |   move.l d0,-(sp)
   14e0e:	|  |   jsr c46c <drawVerticalLine>
   14e14:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   14e18:	|  |   movea.l (sp),a0
   14e1a:	|  |   move.l 8(a0),d0
   14e1e:	|  |   movea.l d0,a1
   14e20:	|  |   movea.l (sp),a0
   14e22:	|  |   move.l 4(a0),d0
   14e26:	|  |   move.l d0,d1
   14e28:	|  |   movea.l (sp),a0
   14e2a:	|  |   move.l (a0),d0
   14e2c:	|  |   move.l a1,-(sp)
   14e2e:	|  |   move.l d1,-(sp)
   14e30:	|  |   move.l d0,-(sp)
   14e32:	|  |   jsr c446 <drawHorizontalLine>
   14e38:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   14e3c:	|  |   movea.l (sp),a0
   14e3e:	|  |   move.l 8(a0),d0
   14e42:	|  |   movea.l d0,a1
   14e44:	|  |   movea.l (sp),a0
   14e46:	|  |   move.l 12(a0),d0
   14e4a:	|  |   move.l d0,d1
   14e4c:	|  |   movea.l (sp),a0
   14e4e:	|  |   move.l (a0),d0
   14e50:	|  |   move.l a1,-(sp)
   14e52:	|  |   move.l d1,-(sp)
   14e54:	|  |   move.l d0,-(sp)
   14e56:	|  |   jsr c446 <drawHorizontalLine>
   14e5c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   14e60:	|  |   movea.l (sp),a0
   14e62:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   14e66:	\--|-> tst.l (sp)
   14e68:	   \-- bne.w 14dce <showBoxes+0xc>
	}
   14e6c:	       nop
   14e6e:	       nop
   14e70:	       addq.l #4,sp
   14e72:	       rts

00014e74 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   14e74:	       lea -88(sp),sp
   14e78:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   14e7a:	       move.l 1b848 <SysBase>,d0
   14e80:	       movea.l d0,a6
   14e82:	       jsr -666(a6)
   14e86:	       move.l d0,88(sp)
   14e8a:	       move.l 88(sp),d0
   14e8e:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   14e92:	       move.l 84(sp),80(sp)
   14e98:	       moveq #40,d0
   14e9a:	       move.l d0,76(sp)
   14e9e:	       move.l 1b848 <SysBase>,d0
   14ea4:	       movea.l d0,a6
   14ea6:	       movea.l 80(sp),a0
   14eaa:	       move.l 76(sp),d0
   14eae:	       jsr -654(a6)
   14eb2:	       move.l d0,72(sp)
   14eb6:	       move.l 72(sp),d0
   14eba:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   14ebe:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   14ec4:	       move.l #102132,60(sp)
   14ecc:	       clr.l 56(sp)
   14ed0:	       move.l 64(sp),52(sp)
   14ed6:	       clr.l 48(sp)
   14eda:	       move.l 1b848 <SysBase>,d0
   14ee0:	       movea.l d0,a6
   14ee2:	       movea.l 60(sp),a0
   14ee6:	       move.l 56(sp),d0
   14eea:	       movea.l 52(sp),a1
   14eee:	       move.l 48(sp),d1
   14ef2:	       jsr -444(a6)
   14ef6:	       move.b d0,47(sp)
   14efa:	       move.b 47(sp),d0
   14efe:	   /-- beq.s 14f14 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   14f00:	   |   pea 18f01 <line.c.05397aaf+0x23a>
   14f06:	   |   jsr 16274 <KPrintF>
   14f0c:	   |   addq.l #4,sp
        return 0;
   14f0e:	   |   moveq #0,d0
   14f10:	/--|-- bra.w 14fce <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   14f14:	|  \-> movea.l 64(sp),a0
   14f18:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   14f1e:	|      lea 92(sp),a0
   14f22:	|      lea -86(a0),a0
   14f26:	|      move.l a0,38(sp)
   14f2a:	|      movea.l 42(sp),a6
   14f2e:	|      movea.l 38(sp),a0
   14f32:	|      jsr -60(a6)
   14f36:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   14f3a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   14f40:	|      move.l #1103515245,-(sp)
   14f46:	|      move.l 34(sp),-(sp)
   14f4a:	|      jsr 16aae <__mulsi3>
   14f50:	|      addq.l #8,sp
   14f52:	|      addi.l #12345,d0
   14f58:	|      move.l d0,d1
   14f5a:	|      bclr #31,d1
   14f5e:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   14f62:	|      move.l 30(sp),d0
   14f66:	|      pea 64 <_start+0x64>
   14f6a:	|      move.l d0,-(sp)
   14f6c:	|      jsr 16b88 <__umodsi3>
   14f72:	|      addq.l #8,sp
   14f74:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   14f78:	|      move.l 26(sp),-(sp)
   14f7c:	|      pea 18f1e <line.c.05397aaf+0x257>
   14f82:	|      jsr 16274 <KPrintF>
   14f88:	|      addq.l #8,sp

    CloseDevice(ioreq);
   14f8a:	|      move.l 64(sp),22(sp)
   14f90:	|      move.l 1b848 <SysBase>,d0
   14f96:	|      movea.l d0,a6
   14f98:	|      movea.l 22(sp),a1
   14f9c:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   14fa0:	|      move.l 64(sp),18(sp)
   14fa6:	|      move.l 1b848 <SysBase>,d0
   14fac:	|      movea.l d0,a6
   14fae:	|      movea.l 18(sp),a0
   14fb2:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   14fb6:	|      move.l 84(sp),14(sp)
   14fbc:	|      move.l 1b848 <SysBase>,d0
   14fc2:	|      movea.l d0,a6
   14fc4:	|      movea.l 14(sp),a0
   14fc8:	|      jsr -672(a6)
    return 0;
   14fcc:	|      moveq #0,d0
   14fce:	\----> movea.l (sp)+,a6
   14fd0:	       lea 88(sp),sp
   14fd4:	       rts

00014fd6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   14fd6:	             lea -20(sp),sp
   14fda:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   14fdc:	             move.l 1b9b8 <allLoadedBanks>,20(sp)
	while (returnMe) {
   14fe4:	      /----- bra.s 15016 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   14fe6:	   /--|----> movea.l 20(sp),a0
   14fea:	   |  |      move.l (a0),d0
   14fec:	   |  |      cmp.l 28(sp),d0
   14ff0:	   |  |  /-- bne.s 1500c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   14ff2:	   |  |  |   movea.l 20(sp),a0
   14ff6:	   |  |  |   move.l 4(a0),d0
   14ffa:	   |  |  |   addq.l #1,d0
   14ffc:	   |  |  |   movea.l 20(sp),a0
   15000:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15004:	   |  |  |   move.l 20(sp),d0
   15008:	/--|--|--|-- bra.w 150cc <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   1500c:	|  |  |  \-> movea.l 20(sp),a0
   15010:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15016:	|  |  \----> tst.l 20(sp)
   1501a:	|  \-------- bne.s 14fe6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1501c:	|            moveq #26,d0
   1501e:	|            move.l d0,16(sp)
   15022:	|            clr.l 12(sp)
   15026:	|            move.l 1b848 <SysBase>,d0
   1502c:	|            movea.l d0,a6
   1502e:	|            move.l 16(sp),d0
   15032:	|            move.l 12(sp),d1
   15036:	|            jsr -684(a6)
   1503a:	|            move.l d0,8(sp)
   1503e:	|            move.l 8(sp),d0
   15042:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15046:	|     /----- beq.w 150ca <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   1504a:	|     |      movea.l 20(sp),a0
   1504e:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15052:	|     |      move.l 20(sp),d0
   15056:	|     |      addq.l #8,d0
   15058:	|     |      clr.l -(sp)
   1505a:	|     |      move.l d0,-(sp)
   1505c:	|     |      move.l 36(sp),-(sp)
   15060:	|     |      jsr 7dd8 <loadSpriteBank>
   15066:	|     |      lea 12(sp),sp
   1506a:	|     |      tst.w d0
   1506c:	|     |  /-- beq.s 150a2 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   1506e:	|     |  |   movea.l 20(sp),a0
   15072:	|     |  |   moveq #1,d0
   15074:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15078:	|     |  |   move.l 1b9b8 <allLoadedBanks>,d0
   1507e:	|     |  |   movea.l 20(sp),a0
   15082:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15086:	|     |  |   move.l 20(sp),1b9b8 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   1508e:	|     |  |   pea 18f31 <graphics.c.1c13408a+0xe>
   15094:	|     |  |   jsr 16274 <KPrintF>
   1509a:	|     |  |   addq.l #4,sp
			return returnMe;
   1509c:	|     |  |   move.l 20(sp),d0
   150a0:	+-----|--|-- bra.s 150cc <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   150a2:	|     |  \-> pea 18f5e <graphics.c.1c13408a+0x3b>
   150a8:	|     |      jsr 16274 <KPrintF>
   150ae:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   150b0:	|     |      move.l 20(sp),4(sp)
   150b6:	|     |      move.l 1b848 <SysBase>,d0
   150bc:	|     |      movea.l d0,a6
   150be:	|     |      movea.l 4(sp),a1
   150c2:	|     |      jsr -690(a6)
			return NULL;
   150c6:	|     |      moveq #0,d0
   150c8:	+-----|----- bra.s 150cc <loadBankForAnim+0xf6>
		}
	} else return NULL;
   150ca:	|     \----> moveq #0,d0
}
   150cc:	\----------> movea.l (sp)+,a6
   150ce:	             lea 20(sp),sp
   150d2:	             rts

000150d4 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   150d4:	       lea -32(sp),sp
   150d8:	       move.l d3,-(sp)
   150da:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   150dc:	       move.l 60(sp),d0
   150e0:	       sub.l 52(sp),d0
   150e4:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   150e8:	       move.l 64(sp),d0
   150ec:	       sub.l 56(sp),d0
   150f0:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   150f4:	       move.l 68(sp),d0
   150f8:	       sub.l 52(sp),d0
   150fc:	       move.l 36(sp),-(sp)
   15100:	       move.l d0,-(sp)
   15102:	       jsr 16aae <__mulsi3>
   15108:	       addq.l #8,sp
   1510a:	       move.l d0,d2
   1510c:	       move.l 72(sp),d0
   15110:	       sub.l 56(sp),d0
   15114:	       move.l 32(sp),-(sp)
   15118:	       move.l d0,-(sp)
   1511a:	       jsr 16aae <__mulsi3>
   15120:	       addq.l #8,sp
   15122:	       add.l d2,d0
   15124:	       move.l d0,-(sp)
   15126:	       jsr 164ec <__floatsidf>
   1512c:	       addq.l #4,sp
   1512e:	       move.l d0,16(sp)
   15132:	       move.l d1,20(sp)
   15136:	       move.l 16(sp),24(sp)
   1513c:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15142:	       move.l 36(sp),-(sp)
   15146:	       move.l 40(sp),-(sp)
   1514a:	       jsr 16aae <__mulsi3>
   15150:	       addq.l #8,sp
   15152:	       move.l d0,d2
   15154:	       move.l 32(sp),-(sp)
   15158:	       move.l 36(sp),-(sp)
   1515c:	       jsr 16aae <__mulsi3>
   15162:	       addq.l #8,sp
   15164:	       add.l d2,d0
   15166:	       move.l d0,-(sp)
   15168:	       jsr 164ec <__floatsidf>
   1516e:	       addq.l #4,sp
   15170:	       move.l d1,-(sp)
   15172:	       move.l d0,-(sp)
   15174:	       move.l 36(sp),-(sp)
   15178:	       move.l 36(sp),-(sp)
   1517c:	       jsr 16376 <__divdf3>
   15182:	       lea 16(sp),sp
   15186:	       move.l d0,8(sp)
   1518a:	       move.l d1,12(sp)
   1518e:	       move.l 8(sp),24(sp)
   15194:	       move.l 12(sp),28(sp)

	if (m < 0) {
   1519a:	       clr.l -(sp)
   1519c:	       clr.l -(sp)
   1519e:	       move.l 36(sp),-(sp)
   151a2:	       move.l 36(sp),-(sp)
   151a6:	       jsr 16704 <__ltdf2>
   151ac:	       lea 16(sp),sp
   151b0:	       tst.l d0
   151b2:	   /-- bge.s 151c8 <closestPointOnLine+0xf4>
		*closestX = x1;
   151b4:	   |   movea.l 44(sp),a0
   151b8:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   151bc:	   |   movea.l 48(sp),a0
   151c0:	   |   move.l 56(sp),(a0)
   151c4:	/--|-- bra.w 152aa <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   151c8:	|  \-> clr.l -(sp)
   151ca:	|      move.l #1072693248,-(sp)
   151d0:	|      move.l 36(sp),-(sp)
   151d4:	|      move.l 36(sp),-(sp)
   151d8:	|      jsr 1664a <__gtdf2>
   151de:	|      lea 16(sp),sp
   151e2:	|      tst.l d0
   151e4:	|  /-- ble.s 151fa <closestPointOnLine+0x126>
		*closestX = x2;
   151e6:	|  |   movea.l 44(sp),a0
   151ea:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   151ee:	|  |   movea.l 48(sp),a0
   151f2:	|  |   move.l 64(sp),(a0)
   151f6:	+--|-- bra.w 152aa <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   151fa:	|  \-> move.l 52(sp),-(sp)
   151fe:	|      jsr 164ec <__floatsidf>
   15204:	|      addq.l #4,sp
   15206:	|      move.l d0,d2
   15208:	|      move.l d1,d3
   1520a:	|      move.l 36(sp),-(sp)
   1520e:	|      jsr 164ec <__floatsidf>
   15214:	|      addq.l #4,sp
   15216:	|      move.l 28(sp),-(sp)
   1521a:	|      move.l 28(sp),-(sp)
   1521e:	|      move.l d1,-(sp)
   15220:	|      move.l d0,-(sp)
   15222:	|      jsr 1657c <__muldf3>
   15228:	|      lea 16(sp),sp
   1522c:	|      move.l d1,-(sp)
   1522e:	|      move.l d0,-(sp)
   15230:	|      move.l d3,-(sp)
   15232:	|      move.l d2,-(sp)
   15234:	|      jsr 16314 <__adddf3>
   1523a:	|      lea 16(sp),sp
   1523e:	|      move.l d1,-(sp)
   15240:	|      move.l d0,-(sp)
   15242:	|      jsr 16484 <__fixdfsi>
   15248:	|      addq.l #8,sp
   1524a:	|      movea.l 44(sp),a0
   1524e:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   15250:	|      move.l 56(sp),-(sp)
   15254:	|      jsr 164ec <__floatsidf>
   1525a:	|      addq.l #4,sp
   1525c:	|      move.l d0,d2
   1525e:	|      move.l d1,d3
   15260:	|      move.l 32(sp),-(sp)
   15264:	|      jsr 164ec <__floatsidf>
   1526a:	|      addq.l #4,sp
   1526c:	|      move.l 28(sp),-(sp)
   15270:	|      move.l 28(sp),-(sp)
   15274:	|      move.l d1,-(sp)
   15276:	|      move.l d0,-(sp)
   15278:	|      jsr 1657c <__muldf3>
   1527e:	|      lea 16(sp),sp
   15282:	|      move.l d1,-(sp)
   15284:	|      move.l d0,-(sp)
   15286:	|      move.l d3,-(sp)
   15288:	|      move.l d2,-(sp)
   1528a:	|      jsr 16314 <__adddf3>
   15290:	|      lea 16(sp),sp
   15294:	|      move.l d1,-(sp)
   15296:	|      move.l d0,-(sp)
   15298:	|      jsr 16484 <__fixdfsi>
   1529e:	|      addq.l #8,sp
   152a0:	|      movea.l 48(sp),a0
   152a4:	|      move.l d0,(a0)
		return TRUE;
   152a6:	|      moveq #1,d0
   152a8:	|  /-- bra.s 152ac <closestPointOnLine+0x1d8>
	}
	return FALSE;
   152aa:	\--|-> clr.w d0
}
   152ac:	   \-> move.l (sp)+,d2
   152ae:	       move.l (sp)+,d3
   152b0:	       lea 32(sp),sp
   152b4:	       rts

000152b6 <drawFloor>:

void drawFloor() {
   152b6:	                lea -12(sp),sp
   152ba:	                move.l d3,-(sp)
   152bc:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   152be:	                clr.l 16(sp)
   152c2:	   /----------- bra.w 154d6 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   152c6:	/--|----------> movea.l 1b9bc <currentFloor>,a0
   152cc:	|  |            move.l 12(a0),d1
   152d0:	|  |            move.l 16(sp),d0
   152d4:	|  |            lsl.l #3,d0
   152d6:	|  |            movea.l d1,a0
   152d8:	|  |            adda.l d0,a0
   152da:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   152de:	|  |            moveq #1,d0
   152e0:	|  |            cmp.l 8(sp),d0
   152e4:	|  |  /-------- bge.w 154d2 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   152e8:	|  |  |         moveq #1,d0
   152ea:	|  |  |         move.l d0,12(sp)
   152ee:	|  |  |     /-- bra.w 153e8 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   152f2:	|  |  |  /--|-> movea.l 1b9bc <currentFloor>,a0
   152f8:	|  |  |  |  |   move.l 4(a0),d1
   152fc:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   15302:	|  |  |  |  |   movea.l 12(a0),a0
   15306:	|  |  |  |  |   move.l 16(sp),d0
   1530a:	|  |  |  |  |   lsl.l #3,d0
   1530c:	|  |  |  |  |   adda.l d0,a0
   1530e:	|  |  |  |  |   movea.l 4(a0),a0
   15312:	|  |  |  |  |   move.l 12(sp),d0
   15316:	|  |  |  |  |   add.l d0,d0
   15318:	|  |  |  |  |   add.l d0,d0
   1531a:	|  |  |  |  |   adda.l d0,a0
   1531c:	|  |  |  |  |   move.l (a0),d0
   1531e:	|  |  |  |  |   lsl.l #3,d0
   15320:	|  |  |  |  |   movea.l d1,a0
   15322:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15324:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15328:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   1532e:	|  |  |  |  |   move.l 4(a0),d1
   15332:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   15338:	|  |  |  |  |   movea.l 12(a0),a0
   1533c:	|  |  |  |  |   move.l 16(sp),d0
   15340:	|  |  |  |  |   lsl.l #3,d0
   15342:	|  |  |  |  |   adda.l d0,a0
   15344:	|  |  |  |  |   movea.l 4(a0),a0
   15348:	|  |  |  |  |   move.l 12(sp),d0
   1534c:	|  |  |  |  |   add.l d0,d0
   1534e:	|  |  |  |  |   add.l d0,d0
   15350:	|  |  |  |  |   adda.l d0,a0
   15352:	|  |  |  |  |   move.l (a0),d0
   15354:	|  |  |  |  |   lsl.l #3,d0
   15356:	|  |  |  |  |   movea.l d1,a0
   15358:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1535a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1535c:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   15362:	|  |  |  |  |   move.l 4(a0),d1
   15366:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   1536c:	|  |  |  |  |   movea.l 12(a0),a0
   15370:	|  |  |  |  |   move.l 16(sp),d0
   15374:	|  |  |  |  |   lsl.l #3,d0
   15376:	|  |  |  |  |   adda.l d0,a0
   15378:	|  |  |  |  |   movea.l 4(a0),a0
   1537c:	|  |  |  |  |   move.l 12(sp),d0
   15380:	|  |  |  |  |   addi.l #1073741823,d0
   15386:	|  |  |  |  |   add.l d0,d0
   15388:	|  |  |  |  |   add.l d0,d0
   1538a:	|  |  |  |  |   adda.l d0,a0
   1538c:	|  |  |  |  |   move.l (a0),d0
   1538e:	|  |  |  |  |   lsl.l #3,d0
   15390:	|  |  |  |  |   movea.l d1,a0
   15392:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15394:	|  |  |  |  |   move.l 4(a0),d1
   15398:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   1539e:	|  |  |  |  |   move.l 4(a0),d3
   153a2:	|  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   153a8:	|  |  |  |  |   movea.l 12(a0),a0
   153ac:	|  |  |  |  |   move.l 16(sp),d0
   153b0:	|  |  |  |  |   lsl.l #3,d0
   153b2:	|  |  |  |  |   adda.l d0,a0
   153b4:	|  |  |  |  |   movea.l 4(a0),a0
   153b8:	|  |  |  |  |   move.l 12(sp),d0
   153bc:	|  |  |  |  |   addi.l #1073741823,d0
   153c2:	|  |  |  |  |   add.l d0,d0
   153c4:	|  |  |  |  |   add.l d0,d0
   153c6:	|  |  |  |  |   adda.l d0,a0
   153c8:	|  |  |  |  |   move.l (a0),d0
   153ca:	|  |  |  |  |   lsl.l #3,d0
   153cc:	|  |  |  |  |   movea.l d3,a0
   153ce:	|  |  |  |  |   adda.l d0,a0
   153d0:	|  |  |  |  |   move.l (a0),d0
   153d2:	|  |  |  |  |   move.l d2,-(sp)
   153d4:	|  |  |  |  |   move.l a1,-(sp)
   153d6:	|  |  |  |  |   move.l d1,-(sp)
   153d8:	|  |  |  |  |   move.l d0,-(sp)
   153da:	|  |  |  |  |   jsr 2ebc <drawLine>
   153e0:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   153e4:	|  |  |  |  |   addq.l #1,12(sp)
   153e8:	|  |  |  |  \-> move.l 12(sp),d0
   153ec:	|  |  |  |      cmp.l 8(sp),d0
   153f0:	|  |  |  \----- blt.w 152f2 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   153f4:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   153fa:	|  |  |         move.l 4(a0),d1
   153fe:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   15404:	|  |  |         movea.l 12(a0),a0
   15408:	|  |  |         move.l 16(sp),d0
   1540c:	|  |  |         lsl.l #3,d0
   1540e:	|  |  |         adda.l d0,a0
   15410:	|  |  |         movea.l 4(a0),a0
   15414:	|  |  |         move.l 8(sp),d0
   15418:	|  |  |         addi.l #1073741823,d0
   1541e:	|  |  |         add.l d0,d0
   15420:	|  |  |         add.l d0,d0
   15422:	|  |  |         adda.l d0,a0
   15424:	|  |  |         move.l (a0),d0
   15426:	|  |  |         lsl.l #3,d0
   15428:	|  |  |         movea.l d1,a0
   1542a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1542c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   15430:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   15436:	|  |  |         move.l 4(a0),d1
   1543a:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   15440:	|  |  |         movea.l 12(a0),a0
   15444:	|  |  |         move.l 16(sp),d0
   15448:	|  |  |         lsl.l #3,d0
   1544a:	|  |  |         adda.l d0,a0
   1544c:	|  |  |         movea.l 4(a0),a0
   15450:	|  |  |         move.l 8(sp),d0
   15454:	|  |  |         addi.l #1073741823,d0
   1545a:	|  |  |         add.l d0,d0
   1545c:	|  |  |         add.l d0,d0
   1545e:	|  |  |         adda.l d0,a0
   15460:	|  |  |         move.l (a0),d0
   15462:	|  |  |         lsl.l #3,d0
   15464:	|  |  |         movea.l d1,a0
   15466:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15468:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1546a:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   15470:	|  |  |         move.l 4(a0),d1
   15474:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   1547a:	|  |  |         movea.l 12(a0),a0
   1547e:	|  |  |         move.l 16(sp),d0
   15482:	|  |  |         lsl.l #3,d0
   15484:	|  |  |         adda.l d0,a0
   15486:	|  |  |         movea.l 4(a0),a0
   1548a:	|  |  |         move.l (a0),d0
   1548c:	|  |  |         lsl.l #3,d0
   1548e:	|  |  |         movea.l d1,a0
   15490:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15492:	|  |  |         move.l 4(a0),d1
   15496:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   1549c:	|  |  |         move.l 4(a0),d3
   154a0:	|  |  |         movea.l 1b9bc <currentFloor>,a0
   154a6:	|  |  |         movea.l 12(a0),a0
   154aa:	|  |  |         move.l 16(sp),d0
   154ae:	|  |  |         lsl.l #3,d0
   154b0:	|  |  |         adda.l d0,a0
   154b2:	|  |  |         movea.l 4(a0),a0
   154b6:	|  |  |         move.l (a0),d0
   154b8:	|  |  |         lsl.l #3,d0
   154ba:	|  |  |         movea.l d3,a0
   154bc:	|  |  |         adda.l d0,a0
   154be:	|  |  |         move.l (a0),d0
   154c0:	|  |  |         move.l d2,-(sp)
   154c2:	|  |  |         move.l a1,-(sp)
   154c4:	|  |  |         move.l d1,-(sp)
   154c6:	|  |  |         move.l d0,-(sp)
   154c8:	|  |  |         jsr 2ebc <drawLine>
   154ce:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   154d2:	|  |  \-------> addq.l #1,16(sp)
   154d6:	|  \----------> movea.l 1b9bc <currentFloor>,a0
   154dc:	|               move.l 8(a0),d0
   154e0:	|               cmp.l 16(sp),d0
   154e4:	\-------------- bgt.w 152c6 <drawFloor+0x10>
        }
    }
}
   154e8:	                nop
   154ea:	                nop
   154ec:	                move.l (sp)+,d2
   154ee:	                move.l (sp)+,d3
   154f0:	                lea 12(sp),sp
   154f4:	                rts

000154f6 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   154f6:	                      lea -12(sp),sp
    int sharedVertices = 0;
   154fa:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   154fe:	                      clr.l 4(sp)
   15502:	   /----------------- bra.w 15594 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   15506:	/--|----------------> clr.l (sp)
   15508:	|  |     /----------- bra.s 15584 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1550a:	|  |  /--|----------> movea.l 16(sp),a0
   1550e:	|  |  |  |            move.l 4(a0),d1
   15512:	|  |  |  |            move.l 4(sp),d0
   15516:	|  |  |  |            add.l d0,d0
   15518:	|  |  |  |            add.l d0,d0
   1551a:	|  |  |  |            movea.l d1,a0
   1551c:	|  |  |  |            adda.l d0,a0
   1551e:	|  |  |  |            move.l (a0),d1
   15520:	|  |  |  |            movea.l 20(sp),a0
   15524:	|  |  |  |            movea.l 4(a0),a0
   15528:	|  |  |  |            move.l (sp),d0
   1552a:	|  |  |  |            add.l d0,d0
   1552c:	|  |  |  |            add.l d0,d0
   1552e:	|  |  |  |            adda.l d0,a0
   15530:	|  |  |  |            move.l (a0),d0
   15532:	|  |  |  |            cmp.l d1,d0
   15534:	|  |  |  |  /-------- bne.s 15582 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   15536:	|  |  |  |  |         move.l 8(sp),d0
   1553a:	|  |  |  |  |         move.l d0,d1
   1553c:	|  |  |  |  |         addq.l #1,d1
   1553e:	|  |  |  |  |         move.l d1,8(sp)
   15542:	|  |  |  |  |         tst.l d0
   15544:	|  |  |  |  |     /-- beq.s 15566 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   15546:	|  |  |  |  |     |   movea.l 16(sp),a0
   1554a:	|  |  |  |  |     |   move.l 4(a0),d1
   1554e:	|  |  |  |  |     |   move.l 4(sp),d0
   15552:	|  |  |  |  |     |   add.l d0,d0
   15554:	|  |  |  |  |     |   add.l d0,d0
   15556:	|  |  |  |  |     |   movea.l d1,a0
   15558:	|  |  |  |  |     |   adda.l d0,a0
   1555a:	|  |  |  |  |     |   move.l (a0),d0
   1555c:	|  |  |  |  |     |   movea.l 28(sp),a0
   15560:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   15562:	|  |  |  |  |     |   moveq #1,d0
   15564:	|  |  |  |  |  /--|-- bra.s 155a4 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   15566:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1556a:	|  |  |  |  |  |      move.l 4(a0),d1
   1556e:	|  |  |  |  |  |      move.l 4(sp),d0
   15572:	|  |  |  |  |  |      add.l d0,d0
   15574:	|  |  |  |  |  |      add.l d0,d0
   15576:	|  |  |  |  |  |      movea.l d1,a0
   15578:	|  |  |  |  |  |      adda.l d0,a0
   1557a:	|  |  |  |  |  |      move.l (a0),d0
   1557c:	|  |  |  |  |  |      movea.l 24(sp),a0
   15580:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   15582:	|  |  |  |  \--|----> addq.l #1,(sp)
   15584:	|  |  |  \-----|----> movea.l 20(sp),a0
   15588:	|  |  |        |      move.l (a0),d0
   1558a:	|  |  |        |      cmp.l (sp),d0
   1558c:	|  |  \--------|----- bgt.w 1550a <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   15590:	|  |           |      addq.l #1,4(sp)
   15594:	|  \-----------|----> movea.l 16(sp),a0
   15598:	|              |      move.l (a0),d0
   1559a:	|              |      cmp.l 4(sp),d0
   1559e:	\--------------|----- bgt.w 15506 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   155a2:	               |      clr.w d0
}
   155a4:	               \----> lea 12(sp),sp
   155a8:	                      rts

000155aa <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   155aa:	movea.l 1b9bc <currentFloor>,a0
   155b0:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   155b4:	movea.l 1b9bc <currentFloor>,a0
   155ba:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   155be:	movea.l 1b9bc <currentFloor>,a0
   155c4:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   155c8:	movea.l 1b9bc <currentFloor>,a0
   155ce:	clr.l 16(a0)
}
   155d2:	nop
   155d4:	rts

000155d6 <inFloor>:

int inFloor (int x, int y) {
   155d6:	          subq.l #8,sp
	int i, r = -1;
   155d8:	          moveq #-1,d0
   155da:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   155dc:	          clr.l 4(sp)
   155e0:	   /----- bra.s 15614 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   155e2:	/--|----> movea.l 1b9bc <currentFloor>,a0
   155e8:	|  |      move.l 12(a0),d1
   155ec:	|  |      move.l 4(sp),d0
   155f0:	|  |      lsl.l #3,d0
   155f2:	|  |      add.l d1,d0
   155f4:	|  |      move.l 16(sp),-(sp)
   155f8:	|  |      move.l 16(sp),-(sp)
   155fc:	|  |      move.l d0,-(sp)
   155fe:	|  |      jsr 157e0 <pointInFloorPolygon>
   15604:	|  |      lea 12(sp),sp
   15608:	|  |      tst.w d0
   1560a:	|  |  /-- beq.s 15610 <inFloor+0x3a>
			r = i;
   1560c:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15610:	|  |  \-> addq.l #1,4(sp)
   15614:	|  \----> movea.l 1b9bc <currentFloor>,a0
   1561a:	|         move.l 8(a0),d0
   1561e:	|         cmp.l 4(sp),d0
   15622:	\-------- bgt.s 155e2 <inFloor+0xc>

	return r;
   15624:	          move.l (sp),d0
}
   15626:	          addq.l #8,sp
   15628:	          rts

0001562a <initFloor>:

BOOL initFloor () {
   1562a:	       lea -12(sp),sp
   1562e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   15630:	       moveq #20,d0
   15632:	       move.l d0,12(sp)
   15636:	       clr.l 8(sp)
   1563a:	       move.l 1b848 <SysBase>,d0
   15640:	       movea.l d0,a6
   15642:	       move.l 12(sp),d0
   15646:	       move.l 8(sp),d1
   1564a:	       jsr -684(a6)
   1564e:	       move.l d0,4(sp)
   15652:	       move.l 4(sp),d0
   15656:	       move.l d0,1b9bc <currentFloor>

    if(currentFloor == 0) {
   1565c:	       move.l 1b9bc <currentFloor>,d0
   15662:	/----- bne.s 15676 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   15664:	|      pea 18f97 <graphics.c.1c13408a+0x74>
   1566a:	|      jsr 16274 <KPrintF>
   15670:	|      addq.l #4,sp
        return FALSE;
   15672:	|      clr.w d0
   15674:	|  /-- bra.s 1567e <initFloor+0x54>
    }

	noFloor ();
   15676:	\--|-> jsr 155aa <noFloor>
	return TRUE;
   1567c:	   |   moveq #1,d0
}
   1567e:	   \-> movea.l (sp)+,a6
   15680:	       lea 12(sp),sp
   15684:	       rts

00015686 <killFloor>:

void killFloor () {
   15686:	       lea -24(sp),sp
   1568a:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1568c:	       clr.l 24(sp)
   15690:	   /-- bra.s 156ea <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   15692:	/--|-> movea.l 1b9bc <currentFloor>,a0
   15698:	|  |   move.l 12(a0),d1
   1569c:	|  |   move.l 24(sp),d0
   156a0:	|  |   lsl.l #3,d0
   156a2:	|  |   movea.l d1,a0
   156a4:	|  |   adda.l d0,a0
   156a6:	|  |   move.l 4(a0),8(sp)
   156ac:	|  |   move.l 1b848 <SysBase>,d0
   156b2:	|  |   movea.l d0,a6
   156b4:	|  |   movea.l 8(sp),a1
   156b8:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   156bc:	|  |   movea.l 1b9bc <currentFloor>,a0
   156c2:	|  |   move.l 16(a0),d1
   156c6:	|  |   move.l 24(sp),d0
   156ca:	|  |   add.l d0,d0
   156cc:	|  |   add.l d0,d0
   156ce:	|  |   movea.l d1,a0
   156d0:	|  |   adda.l d0,a0
   156d2:	|  |   move.l (a0),4(sp)
   156d6:	|  |   move.l 1b848 <SysBase>,d0
   156dc:	|  |   movea.l d0,a6
   156de:	|  |   movea.l 4(sp),a1
   156e2:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   156e6:	|  |   addq.l #1,24(sp)
   156ea:	|  \-> movea.l 1b9bc <currentFloor>,a0
   156f0:	|      move.l 8(a0),d0
   156f4:	|      cmp.l 24(sp),d0
   156f8:	\----- bgt.s 15692 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   156fa:	       movea.l 1b9bc <currentFloor>,a0
   15700:	       move.l 12(a0),20(sp)
   15706:	       move.l 1b848 <SysBase>,d0
   1570c:	       movea.l d0,a6
   1570e:	       movea.l 20(sp),a1
   15712:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   15716:	       movea.l 1b9bc <currentFloor>,a0
   1571c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   15720:	       movea.l 1b9bc <currentFloor>,a0
   15726:	       move.l 4(a0),16(sp)
   1572c:	       move.l 1b848 <SysBase>,d0
   15732:	       movea.l d0,a6
   15734:	       movea.l 16(sp),a1
   15738:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1573c:	       movea.l 1b9bc <currentFloor>,a0
   15742:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   15746:	       movea.l 1b9bc <currentFloor>,a0
   1574c:	       move.l 16(a0),12(sp)
   15752:	       move.l 1b848 <SysBase>,d0
   15758:	       movea.l d0,a6
   1575a:	       movea.l 12(sp),a1
   1575e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   15762:	       movea.l 1b9bc <currentFloor>,a0
   15768:	       clr.l 16(a0)
}
   1576c:	       nop
   1576e:	       movea.l (sp)+,a6
   15770:	       lea 24(sp),sp
   15774:	       rts

00015776 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   15776:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1577a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   1577e:	                   clr.l 4(sp)
   15782:	   /-------------- bra.s 157ce <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   15784:	/--|-------------> clr.l (sp)
   15786:	|  |     /-------- bra.s 157c2 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   15788:	|  |  /--|-------> move.l 20(sp),d1
   1578c:	|  |  |  |         move.l 4(sp),d0
   15790:	|  |  |  |         add.l d0,d0
   15792:	|  |  |  |         add.l d0,d0
   15794:	|  |  |  |         movea.l d1,a0
   15796:	|  |  |  |         adda.l d0,a0
   15798:	|  |  |  |         move.l (a0),d1
   1579a:	|  |  |  |         movea.l 28(sp),a0
   1579e:	|  |  |  |         move.l (sp),d0
   157a0:	|  |  |  |         add.l d0,d0
   157a2:	|  |  |  |         add.l d0,d0
   157a4:	|  |  |  |         adda.l d0,a0
   157a6:	|  |  |  |         move.l (a0),d0
   157a8:	|  |  |  |         cmp.l d1,d0
   157aa:	|  |  |  |     /-- bne.s 157c0 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   157ac:	|  |  |  |     |   move.l 8(sp),d0
   157b0:	|  |  |  |     |   move.l d0,d1
   157b2:	|  |  |  |     |   addq.l #1,d1
   157b4:	|  |  |  |     |   move.l d1,8(sp)
   157b8:	|  |  |  |     |   tst.l d0
   157ba:	|  |  |  |     +-- beq.s 157c0 <polysShareSide+0x4a>
   157bc:	|  |  |  |     |   moveq #1,d0
   157be:	|  |  |  |  /--|-- bra.s 157da <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   157c0:	|  |  |  |  |  \-> addq.l #1,(sp)
   157c2:	|  |  |  \--|----> move.l 24(sp),d0
   157c6:	|  |  |     |      cmp.l (sp),d0
   157c8:	|  |  \-----|----- bgt.s 15788 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   157ca:	|  |        |      addq.l #1,4(sp)
   157ce:	|  \--------|----> move.l 16(sp),d0
   157d2:	|           |      cmp.l 4(sp),d0
   157d6:	\-----------|----- bgt.s 15784 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   157d8:	            |      clr.w d0
}
   157da:	            \----> lea 12(sp),sp
   157de:	                   rts

000157e0 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   157e0:	             lea -28(sp),sp
   157e4:	             move.l d3,-(sp)
   157e6:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   157e8:	             clr.l 32(sp)
   157ec:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   157f0:	             movea.l 40(sp),a0
   157f4:	             move.l (a0),d0
   157f6:	             move.l d0,d1
   157f8:	             subq.l #1,d1
   157fa:	             move.l d1,28(sp)
   157fe:	   /-------- bra.w 159f8 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   15802:	/--|-------> movea.l 1b9bc <currentFloor>,a0
   15808:	|  |         move.l 4(a0),d1
   1580c:	|  |         movea.l 40(sp),a0
   15810:	|  |         movea.l 4(a0),a0
   15814:	|  |         move.l 32(sp),d0
   15818:	|  |         add.l d0,d0
   1581a:	|  |         add.l d0,d0
   1581c:	|  |         adda.l d0,a0
   1581e:	|  |         move.l (a0),d0
   15820:	|  |         lsl.l #3,d0
   15822:	|  |         movea.l d1,a0
   15824:	|  |         adda.l d0,a0
   15826:	|  |         move.l (a0),d0
   15828:	|  |         move.l d0,-(sp)
   1582a:	|  |         jsr 1652c <__floatsisf>
   15830:	|  |         addq.l #4,sp
   15832:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   15836:	|  |         movea.l 1b9bc <currentFloor>,a0
   1583c:	|  |         move.l 4(a0),d1
   15840:	|  |         movea.l 40(sp),a0
   15844:	|  |         movea.l 4(a0),a0
   15848:	|  |         move.l 32(sp),d0
   1584c:	|  |         add.l d0,d0
   1584e:	|  |         add.l d0,d0
   15850:	|  |         adda.l d0,a0
   15852:	|  |         move.l (a0),d0
   15854:	|  |         lsl.l #3,d0
   15856:	|  |         movea.l d1,a0
   15858:	|  |         adda.l d0,a0
   1585a:	|  |         move.l 4(a0),d0
   1585e:	|  |         move.l d0,-(sp)
   15860:	|  |         jsr 1652c <__floatsisf>
   15866:	|  |         addq.l #4,sp
   15868:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1586c:	|  |         movea.l 1b9bc <currentFloor>,a0
   15872:	|  |         move.l 4(a0),d1
   15876:	|  |         movea.l 40(sp),a0
   1587a:	|  |         movea.l 4(a0),a0
   1587e:	|  |         move.l 28(sp),d0
   15882:	|  |         add.l d0,d0
   15884:	|  |         add.l d0,d0
   15886:	|  |         adda.l d0,a0
   15888:	|  |         move.l (a0),d0
   1588a:	|  |         lsl.l #3,d0
   1588c:	|  |         movea.l d1,a0
   1588e:	|  |         adda.l d0,a0
   15890:	|  |         move.l (a0),d0
   15892:	|  |         move.l d0,-(sp)
   15894:	|  |         jsr 1652c <__floatsisf>
   1589a:	|  |         addq.l #4,sp
   1589c:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   158a0:	|  |         movea.l 1b9bc <currentFloor>,a0
   158a6:	|  |         move.l 4(a0),d1
   158aa:	|  |         movea.l 40(sp),a0
   158ae:	|  |         movea.l 4(a0),a0
   158b2:	|  |         move.l 28(sp),d0
   158b6:	|  |         add.l d0,d0
   158b8:	|  |         add.l d0,d0
   158ba:	|  |         adda.l d0,a0
   158bc:	|  |         move.l (a0),d0
   158be:	|  |         lsl.l #3,d0
   158c0:	|  |         movea.l d1,a0
   158c2:	|  |         adda.l d0,a0
   158c4:	|  |         move.l 4(a0),d0
   158c8:	|  |         move.l d0,-(sp)
   158ca:	|  |         jsr 1652c <__floatsisf>
   158d0:	|  |         addq.l #4,sp
   158d2:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   158d6:	|  |         move.l 48(sp),-(sp)
   158da:	|  |         jsr 1652c <__floatsisf>
   158e0:	|  |         addq.l #4,sp
   158e2:	|  |         move.l d0,-(sp)
   158e4:	|  |         move.l 20(sp),-(sp)
   158e8:	|  |         jsr 166ce <__lesf2>
   158ee:	|  |         addq.l #8,sp
   158f0:	|  |         tst.l d0
   158f2:	|  |     /-- bgt.s 15912 <pointInFloorPolygon+0x132>
   158f4:	|  |     |   move.l 48(sp),-(sp)
   158f8:	|  |     |   jsr 1652c <__floatsisf>
   158fe:	|  |     |   addq.l #4,sp
   15900:	|  |     |   move.l d0,-(sp)
   15902:	|  |     |   move.l 12(sp),-(sp)
   15906:	|  |     |   jsr 16698 <__gtsf2>
   1590c:	|  |     |   addq.l #8,sp
   1590e:	|  |     |   tst.l d0
   15910:	|  |  /--|-- bgt.s 15952 <pointInFloorPolygon+0x172>
   15912:	|  |  |  \-> move.l 48(sp),-(sp)
   15916:	|  |  |      jsr 1652c <__floatsisf>
   1591c:	|  |  |      addq.l #4,sp
   1591e:	|  |  |      move.l d0,-(sp)
   15920:	|  |  |      move.l 12(sp),-(sp)
   15924:	|  |  |      jsr 166ce <__lesf2>
   1592a:	|  |  |      addq.l #8,sp
   1592c:	|  |  |      tst.l d0
   1592e:	|  |  |  /-- bgt.w 159e8 <pointInFloorPolygon+0x208>
   15932:	|  |  |  |   move.l 48(sp),-(sp)
   15936:	|  |  |  |   jsr 1652c <__floatsisf>
   1593c:	|  |  |  |   addq.l #4,sp
   1593e:	|  |  |  |   move.l d0,-(sp)
   15940:	|  |  |  |   move.l 20(sp),-(sp)
   15944:	|  |  |  |   jsr 16698 <__gtsf2>
   1594a:	|  |  |  |   addq.l #8,sp
   1594c:	|  |  |  |   tst.l d0
   1594e:	|  |  |  +-- ble.w 159e8 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   15952:	|  |  \--|-> move.l 44(sp),-(sp)
   15956:	|  |     |   jsr 1652c <__floatsisf>
   1595c:	|  |     |   addq.l #4,sp
   1595e:	|  |     |   move.l d0,d3
   15960:	|  |     |   move.l 20(sp),-(sp)
   15964:	|  |     |   move.l 16(sp),-(sp)
   15968:	|  |     |   jsr 16820 <__subsf3>
   1596e:	|  |     |   addq.l #8,sp
   15970:	|  |     |   move.l d0,d2
   15972:	|  |     |   move.l 48(sp),-(sp)
   15976:	|  |     |   jsr 1652c <__floatsisf>
   1597c:	|  |     |   addq.l #4,sp
   1597e:	|  |     |   move.l 16(sp),-(sp)
   15982:	|  |     |   move.l d0,-(sp)
   15984:	|  |     |   jsr 16820 <__subsf3>
   1598a:	|  |     |   addq.l #8,sp
   1598c:	|  |     |   move.l d0,-(sp)
   1598e:	|  |     |   move.l d2,-(sp)
   15990:	|  |     |   jsr 165de <__mulsf3>
   15996:	|  |     |   addq.l #8,sp
   15998:	|  |     |   move.l d0,d2
   1599a:	|  |     |   move.l 16(sp),-(sp)
   1599e:	|  |     |   move.l 12(sp),-(sp)
   159a2:	|  |     |   jsr 16820 <__subsf3>
   159a8:	|  |     |   addq.l #8,sp
   159aa:	|  |     |   move.l d0,-(sp)
   159ac:	|  |     |   move.l d2,-(sp)
   159ae:	|  |     |   jsr 163d8 <__divsf3>
   159b4:	|  |     |   addq.l #8,sp
   159b6:	|  |     |   move.l 20(sp),-(sp)
   159ba:	|  |     |   move.l d0,-(sp)
   159bc:	|  |     |   jsr 162de <__addsf3>
   159c2:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   159c4:	|  |     |   move.l d0,-(sp)
   159c6:	|  |     |   move.l d3,-(sp)
   159c8:	|  |     |   jsr 16752 <__ltsf2>
   159ce:	|  |     |   addq.l #8,sp
   159d0:	|  |     |   tst.l d0
   159d2:	|  |     +-- bge.s 159e8 <pointInFloorPolygon+0x208>

			c = !c;
   159d4:	|  |     |   tst.l 24(sp)
   159d8:	|  |     |   seq d0
   159da:	|  |     |   neg.b d0
   159dc:	|  |     |   move.b d0,d0
   159de:	|  |     |   andi.l #255,d0
   159e4:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   159e8:	|  |     \-> move.l 32(sp),d0
   159ec:	|  |         move.l d0,d1
   159ee:	|  |         addq.l #1,d1
   159f0:	|  |         move.l d1,32(sp)
   159f4:	|  |         move.l d0,28(sp)
   159f8:	|  \-------> movea.l 40(sp),a0
   159fc:	|            move.l (a0),d0
   159fe:	|            cmp.l 32(sp),d0
   15a02:	\----------- bgt.w 15802 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   15a06:	             tst.l 24(sp)
   15a0a:	             sne d0
   15a0c:	             neg.b d0
   15a0e:	             move.b d0,d0
   15a10:	             andi.w #255,d0
}
   15a14:	             move.l (sp)+,d2
   15a16:	             move.l (sp)+,d3
   15a18:	             lea 28(sp),sp
   15a1c:	             rts

00015a1e <setFloor>:

BOOL setFloor (int fileNum) {
   15a1e:	                               lea -132(sp),sp
   15a22:	                               move.l a6,-(sp)
   15a24:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   15a26:	                               jsr 15686 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   15a2c:	                               move.l 144(sp),-(sp)
   15a30:	                               jsr 5dca <openFileFromNum>
   15a36:	                               addq.l #4,sp
   15a38:	                               tst.l d0
   15a3a:	                           /-- bne.s 15a42 <setFloor+0x24>
   15a3c:	                           |   clr.w d0
   15a3e:	/--------------------------|-- bra.w 1618e <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   15a42:	|                          \-> movea.l 1b9bc <currentFloor>,a0
   15a48:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   15a4c:	|                              move.l 1b830 <bigDataFile>,118(sp)
   15a54:	|                              move.l 1b850 <DOSBase>,d0
   15a5a:	|                              movea.l d0,a6
   15a5c:	|                              move.l 118(sp),d1
   15a60:	|                              jsr -306(a6)
   15a64:	|                              move.l d0,114(sp)
   15a68:	|                              move.l 114(sp),d0
   15a6c:	|                              movea.l 1b9bc <currentFloor>,a0
   15a72:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   15a76:	|                              movea.l 1b9bc <currentFloor>,a0
   15a7c:	|                              move.l 8(a0),d0
   15a80:	|                              lsl.l #3,d0
   15a82:	|                              move.l d0,110(sp)
   15a86:	|                              clr.l 106(sp)
   15a8a:	|                              move.l 1b848 <SysBase>,d0
   15a90:	|                              movea.l d0,a6
   15a92:	|                              move.l 110(sp),d0
   15a96:	|                              move.l 106(sp),d1
   15a9a:	|                              jsr -684(a6)
   15a9e:	|                              move.l d0,102(sp)
   15aa2:	|                              move.l 102(sp),d0
   15aa6:	|                              movea.l 1b9bc <currentFloor>,a0
   15aac:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   15ab0:	|                              movea.l 1b9bc <currentFloor>,a0
   15ab6:	|                              move.l 12(a0),d0
   15aba:	|                          /-- bne.s 15ad0 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   15abc:	|                          |   pea 18fbb <graphics.c.1c13408a+0x98>
   15ac2:	|                          |   jsr 16274 <KPrintF>
   15ac8:	|                          |   addq.l #4,sp
		return FALSE;
   15aca:	|                          |   clr.w d0
   15acc:	+--------------------------|-- bra.w 1618e <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15ad0:	|                          \-> clr.l 136(sp)
   15ad4:	|                    /-------- bra.w 15bec <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   15ad8:	|                 /--|-------> move.l 1b830 <bigDataFile>,26(sp)
   15ae0:	|                 |  |         move.l 1b850 <DOSBase>,d0
   15ae6:	|                 |  |         movea.l d0,a6
   15ae8:	|                 |  |         move.l 26(sp),d1
   15aec:	|                 |  |         jsr -306(a6)
   15af0:	|                 |  |         move.l d0,22(sp)
   15af4:	|                 |  |         move.l 22(sp),d1
   15af8:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15afe:	|                 |  |         movea.l 12(a0),a0
   15b02:	|                 |  |         move.l 136(sp),d0
   15b06:	|                 |  |         lsl.l #3,d0
   15b08:	|                 |  |         adda.l d0,a0
   15b0a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   15b0c:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15b12:	|                 |  |         move.l 12(a0),d1
   15b16:	|                 |  |         move.l 136(sp),d0
   15b1a:	|                 |  |         lsl.l #3,d0
   15b1c:	|                 |  |         movea.l d1,a0
   15b1e:	|                 |  |         adda.l d0,a0
   15b20:	|                 |  |         move.l (a0),d0
   15b22:	|                 |  |         add.l d0,d0
   15b24:	|                 |  |         add.l d0,d0
   15b26:	|                 |  |         move.l d0,18(sp)
   15b2a:	|                 |  |         clr.l 14(sp)
   15b2e:	|                 |  |         move.l 1b848 <SysBase>,d0
   15b34:	|                 |  |         movea.l d0,a6
   15b36:	|                 |  |         move.l 18(sp),d0
   15b3a:	|                 |  |         move.l 14(sp),d1
   15b3e:	|                 |  |         jsr -684(a6)
   15b42:	|                 |  |         move.l d0,10(sp)
   15b46:	|                 |  |         move.l 10(sp),d1
   15b4a:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15b50:	|                 |  |         movea.l 12(a0),a0
   15b54:	|                 |  |         move.l 136(sp),d0
   15b58:	|                 |  |         lsl.l #3,d0
   15b5a:	|                 |  |         adda.l d0,a0
   15b5c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   15b60:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15b66:	|                 |  |         move.l 12(a0),d1
   15b6a:	|                 |  |         move.l 136(sp),d0
   15b6e:	|                 |  |         lsl.l #3,d0
   15b70:	|                 |  |         movea.l d1,a0
   15b72:	|                 |  |         adda.l d0,a0
   15b74:	|                 |  |         move.l 4(a0),d0
   15b78:	|                 |  |     /-- bne.s 15b8e <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   15b7a:	|                 |  |     |   pea 18fbb <graphics.c.1c13408a+0x98>
   15b80:	|                 |  |     |   jsr 16274 <KPrintF>
   15b86:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15b88:	|                 |  |     |   clr.w d0
   15b8a:	+-----------------|--|-----|-- bra.w 1618e <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   15b8e:	|                 |  |     \-> clr.l 132(sp)
   15b92:	|                 |  |     /-- bra.s 15bcc <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   15b94:	|                 |  |  /--|-> move.l 1b830 <bigDataFile>,d1
   15b9a:	|                 |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   15ba0:	|                 |  |  |  |   movea.l 12(a0),a0
   15ba4:	|                 |  |  |  |   move.l 136(sp),d0
   15ba8:	|                 |  |  |  |   lsl.l #3,d0
   15baa:	|                 |  |  |  |   adda.l d0,a0
   15bac:	|                 |  |  |  |   movea.l 4(a0),a0
   15bb0:	|                 |  |  |  |   move.l 132(sp),d0
   15bb4:	|                 |  |  |  |   add.l d0,d0
   15bb6:	|                 |  |  |  |   add.l d0,d0
   15bb8:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   15bbc:	|                 |  |  |  |   move.l d1,-(sp)
   15bbe:	|                 |  |  |  |   jsr 6bc <get2bytes>
   15bc4:	|                 |  |  |  |   addq.l #4,sp
   15bc6:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   15bc8:	|                 |  |  |  |   addq.l #1,132(sp)
   15bcc:	|                 |  |  |  \-> movea.l 1b9bc <currentFloor>,a0
   15bd2:	|                 |  |  |      move.l 12(a0),d1
   15bd6:	|                 |  |  |      move.l 136(sp),d0
   15bda:	|                 |  |  |      lsl.l #3,d0
   15bdc:	|                 |  |  |      movea.l d1,a0
   15bde:	|                 |  |  |      adda.l d0,a0
   15be0:	|                 |  |  |      move.l (a0),d0
   15be2:	|                 |  |  |      cmp.l 132(sp),d0
   15be6:	|                 |  |  \----- bgt.s 15b94 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15be8:	|                 |  |         addq.l #1,136(sp)
   15bec:	|                 |  \-------> movea.l 1b9bc <currentFloor>,a0
   15bf2:	|                 |            move.l 8(a0),d0
   15bf6:	|                 |            cmp.l 136(sp),d0
   15bfa:	|                 \----------- bgt.w 15ad8 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   15bfe:	|                              move.l 1b830 <bigDataFile>,d0
   15c04:	|                              move.l d0,-(sp)
   15c06:	|                              jsr 6bc <get2bytes>
   15c0c:	|                              addq.l #4,sp
   15c0e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   15c12:	|                              move.l 136(sp),d0
   15c16:	|                              lsl.l #3,d0
   15c18:	|                              move.l d0,98(sp)
   15c1c:	|                              clr.l 94(sp)
   15c20:	|                              move.l 1b848 <SysBase>,d0
   15c26:	|                              movea.l d0,a6
   15c28:	|                              move.l 98(sp),d0
   15c2c:	|                              move.l 94(sp),d1
   15c30:	|                              jsr -684(a6)
   15c34:	|                              move.l d0,90(sp)
   15c38:	|                              move.l 90(sp),d0
   15c3c:	|                              movea.l 1b9bc <currentFloor>,a0
   15c42:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   15c46:	|                              movea.l 1b9bc <currentFloor>,a0
   15c4c:	|                              move.l 4(a0),d0
   15c50:	|                          /-- bne.s 15c66 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   15c52:	|                          |   pea 18fbb <graphics.c.1c13408a+0x98>
   15c58:	|                          |   jsr 16274 <KPrintF>
   15c5e:	|                          |   addq.l #4,sp
		return FALSE;
   15c60:	|                          |   clr.w d0
   15c62:	+--------------------------|-- bra.w 1618e <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   15c66:	|                          \-> clr.l 132(sp)
   15c6a:	|                          /-- bra.s 15cbe <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   15c6c:	|                       /--|-> move.l 1b830 <bigDataFile>,d1
   15c72:	|                       |  |   movea.l 1b9bc <currentFloor>,a0
   15c78:	|                       |  |   movea.l 4(a0),a0
   15c7c:	|                       |  |   move.l 132(sp),d0
   15c80:	|                       |  |   lsl.l #3,d0
   15c82:	|                       |  |   lea (0,a0,d0.l),a2
   15c86:	|                       |  |   move.l d1,-(sp)
   15c88:	|                       |  |   jsr 6bc <get2bytes>
   15c8e:	|                       |  |   addq.l #4,sp
   15c90:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   15c92:	|                       |  |   move.l 1b830 <bigDataFile>,d1
   15c98:	|                       |  |   movea.l 1b9bc <currentFloor>,a0
   15c9e:	|                       |  |   movea.l 4(a0),a0
   15ca2:	|                       |  |   move.l 132(sp),d0
   15ca6:	|                       |  |   lsl.l #3,d0
   15ca8:	|                       |  |   lea (0,a0,d0.l),a2
   15cac:	|                       |  |   move.l d1,-(sp)
   15cae:	|                       |  |   jsr 6bc <get2bytes>
   15cb4:	|                       |  |   addq.l #4,sp
   15cb6:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   15cba:	|                       |  |   addq.l #1,132(sp)
   15cbe:	|                       |  \-> move.l 132(sp),d0
   15cc2:	|                       |      cmp.l 136(sp),d0
   15cc6:	|                       \----- blt.s 15c6c <setFloor+0x24e>
	}

	finishAccess ();
   15cc8:	|                              jsr 5cc2 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15cce:	|                              movea.l 1b9bc <currentFloor>,a0
   15cd4:	|                              move.l 8(a0),d0
   15cd8:	|                              add.l d0,d0
   15cda:	|                              add.l d0,d0
   15cdc:	|                              move.l d0,86(sp)
   15ce0:	|                              clr.l 82(sp)
   15ce4:	|                              move.l 1b848 <SysBase>,d0
   15cea:	|                              movea.l d0,a6
   15cec:	|                              move.l 86(sp),d0
   15cf0:	|                              move.l 82(sp),d1
   15cf4:	|                              jsr -684(a6)
   15cf8:	|                              move.l d0,78(sp)
   15cfc:	|                              move.l 78(sp),d0
   15d00:	|                              movea.l 1b9bc <currentFloor>,a0
   15d06:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15d0a:	|                              movea.l 1b9bc <currentFloor>,a0
   15d10:	|                              move.l 8(a0),d0
   15d14:	|                              add.l d0,d0
   15d16:	|                              add.l d0,d0
   15d18:	|                              move.l d0,74(sp)
   15d1c:	|                              clr.l 70(sp)
   15d20:	|                              move.l 1b848 <SysBase>,d0
   15d26:	|                              movea.l d0,a6
   15d28:	|                              move.l 74(sp),d0
   15d2c:	|                              move.l 70(sp),d1
   15d30:	|                              jsr -684(a6)
   15d34:	|                              move.l d0,66(sp)
   15d38:	|                              move.l 66(sp),d0
   15d3c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   15d40:	|                              movea.l 1b9bc <currentFloor>,a0
   15d46:	|                              move.l 16(a0),d0
   15d4a:	|                          /-- bne.s 15d60 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   15d4c:	|                          |   pea 18fbb <graphics.c.1c13408a+0x98>
   15d52:	|                          |   jsr 16274 <KPrintF>
   15d58:	|                          |   addq.l #4,sp
		return FALSE;
   15d5a:	|                          |   clr.w d0
   15d5c:	+--------------------------|-- bra.w 1618e <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15d60:	|                          \-> clr.l 136(sp)
   15d64:	|                    /-------- bra.w 15e88 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15d68:	|                 /--|-------> movea.l 1b9bc <currentFloor>,a0
   15d6e:	|                 |  |         move.l 8(a0),d0
   15d72:	|                 |  |         add.l d0,d0
   15d74:	|                 |  |         add.l d0,d0
   15d76:	|                 |  |         move.l d0,50(sp)
   15d7a:	|                 |  |         clr.l 46(sp)
   15d7e:	|                 |  |         move.l 1b848 <SysBase>,d0
   15d84:	|                 |  |         movea.l d0,a6
   15d86:	|                 |  |         move.l 50(sp),d0
   15d8a:	|                 |  |         move.l 46(sp),d1
   15d8e:	|                 |  |         jsr -684(a6)
   15d92:	|                 |  |         move.l d0,42(sp)
   15d96:	|                 |  |         move.l 42(sp),d0
   15d9a:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15da0:	|                 |  |         movea.l 16(a0),a0
   15da4:	|                 |  |         move.l 136(sp),d1
   15da8:	|                 |  |         add.l d1,d1
   15daa:	|                 |  |         add.l d1,d1
   15dac:	|                 |  |         adda.l d1,a0
   15dae:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15db0:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15db6:	|                 |  |         move.l 8(a0),d0
   15dba:	|                 |  |         add.l d0,d0
   15dbc:	|                 |  |         add.l d0,d0
   15dbe:	|                 |  |         move.l d0,38(sp)
   15dc2:	|                 |  |         clr.l 34(sp)
   15dc6:	|                 |  |         move.l 1b848 <SysBase>,d0
   15dcc:	|                 |  |         movea.l d0,a6
   15dce:	|                 |  |         move.l 38(sp),d0
   15dd2:	|                 |  |         move.l 34(sp),d1
   15dd6:	|                 |  |         jsr -684(a6)
   15dda:	|                 |  |         move.l d0,30(sp)
   15dde:	|                 |  |         move.l 30(sp),d1
   15de2:	|                 |  |         move.l 136(sp),d0
   15de6:	|                 |  |         add.l d0,d0
   15de8:	|                 |  |         add.l d0,d0
   15dea:	|                 |  |         movea.l 62(sp),a0
   15dee:	|                 |  |         adda.l d0,a0
   15df0:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   15df2:	|                 |  |         movea.l 1b9bc <currentFloor>,a0
   15df8:	|                 |  |         move.l 16(a0),d1
   15dfc:	|                 |  |         move.l 136(sp),d0
   15e00:	|                 |  |         add.l d0,d0
   15e02:	|                 |  |         add.l d0,d0
   15e04:	|                 |  |         movea.l d1,a0
   15e06:	|                 |  |         adda.l d0,a0
   15e08:	|                 |  |         move.l (a0),d0
   15e0a:	|                 |  |     /-- bne.s 15e20 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   15e0c:	|                 |  |     |   pea 18fbb <graphics.c.1c13408a+0x98>
   15e12:	|                 |  |     |   jsr 16274 <KPrintF>
   15e18:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15e1a:	|                 |  |     |   clr.w d0
   15e1c:	+-----------------|--|-----|-- bra.w 1618e <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15e20:	|                 |  |     \-> clr.l 132(sp)
   15e24:	|                 |  |     /-- bra.s 15e74 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   15e26:	|                 |  |  /--|-> movea.l 1b9bc <currentFloor>,a0
   15e2c:	|                 |  |  |  |   move.l 16(a0),d1
   15e30:	|                 |  |  |  |   move.l 136(sp),d0
   15e34:	|                 |  |  |  |   add.l d0,d0
   15e36:	|                 |  |  |  |   add.l d0,d0
   15e38:	|                 |  |  |  |   movea.l d1,a0
   15e3a:	|                 |  |  |  |   adda.l d0,a0
   15e3c:	|                 |  |  |  |   move.l (a0),d1
   15e3e:	|                 |  |  |  |   move.l 132(sp),d0
   15e42:	|                 |  |  |  |   add.l d0,d0
   15e44:	|                 |  |  |  |   add.l d0,d0
   15e46:	|                 |  |  |  |   movea.l d1,a0
   15e48:	|                 |  |  |  |   adda.l d0,a0
   15e4a:	|                 |  |  |  |   moveq #-1,d1
   15e4c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   15e4e:	|                 |  |  |  |   move.l 136(sp),d0
   15e52:	|                 |  |  |  |   add.l d0,d0
   15e54:	|                 |  |  |  |   add.l d0,d0
   15e56:	|                 |  |  |  |   movea.l 62(sp),a0
   15e5a:	|                 |  |  |  |   adda.l d0,a0
   15e5c:	|                 |  |  |  |   move.l (a0),d1
   15e5e:	|                 |  |  |  |   move.l 132(sp),d0
   15e62:	|                 |  |  |  |   add.l d0,d0
   15e64:	|                 |  |  |  |   add.l d0,d0
   15e66:	|                 |  |  |  |   movea.l d1,a0
   15e68:	|                 |  |  |  |   adda.l d0,a0
   15e6a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15e70:	|                 |  |  |  |   addq.l #1,132(sp)
   15e74:	|                 |  |  |  \-> movea.l 1b9bc <currentFloor>,a0
   15e7a:	|                 |  |  |      move.l 8(a0),d0
   15e7e:	|                 |  |  |      cmp.l 132(sp),d0
   15e82:	|                 |  |  \----- bgt.s 15e26 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15e84:	|                 |  |         addq.l #1,136(sp)
   15e88:	|                 |  \-------> movea.l 1b9bc <currentFloor>,a0
   15e8e:	|                 |            move.l 8(a0),d0
   15e92:	|                 |            cmp.l 136(sp),d0
   15e96:	|                 \----------- bgt.w 15d68 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15e9a:	|                              clr.l 136(sp)
   15e9e:	|              /-------------- bra.w 15fa4 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15ea2:	|           /--|-------------> clr.l 132(sp)
   15ea6:	|           |  |     /-------- bra.w 15f8e <setFloor+0x570>
			if (i != j) {
   15eaa:	|           |  |  /--|-------> move.l 136(sp),d0
   15eae:	|           |  |  |  |         cmp.l 132(sp),d0
   15eb2:	|           |  |  |  |     /-- beq.w 15f44 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   15eb6:	|           |  |  |  |     |   movea.l 1b9bc <currentFloor>,a0
   15ebc:	|           |  |  |  |     |   move.l 12(a0),d1
   15ec0:	|           |  |  |  |     |   move.l 132(sp),d0
   15ec4:	|           |  |  |  |     |   lsl.l #3,d0
   15ec6:	|           |  |  |  |     |   movea.l d1,a1
   15ec8:	|           |  |  |  |     |   adda.l d0,a1
   15eca:	|           |  |  |  |     |   movea.l 1b9bc <currentFloor>,a0
   15ed0:	|           |  |  |  |     |   move.l 12(a0),d1
   15ed4:	|           |  |  |  |     |   move.l 136(sp),d0
   15ed8:	|           |  |  |  |     |   lsl.l #3,d0
   15eda:	|           |  |  |  |     |   movea.l d1,a0
   15edc:	|           |  |  |  |     |   adda.l d0,a0
   15ede:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   15ee2:	|           |  |  |  |     |   move.l (a1),-(sp)
   15ee4:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   15ee8:	|           |  |  |  |     |   move.l (a0),-(sp)
   15eea:	|           |  |  |  |     |   jsr 15776 <polysShareSide>
   15ef0:	|           |  |  |  |     |   lea 16(sp),sp
   15ef4:	|           |  |  |  |     |   tst.w d0
   15ef6:	|           |  |  |  |  /--|-- beq.w 15f8a <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   15efa:	|           |  |  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   15f00:	|           |  |  |  |  |  |   move.l 16(a0),d1
   15f04:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15f08:	|           |  |  |  |  |  |   add.l d0,d0
   15f0a:	|           |  |  |  |  |  |   add.l d0,d0
   15f0c:	|           |  |  |  |  |  |   movea.l d1,a0
   15f0e:	|           |  |  |  |  |  |   adda.l d0,a0
   15f10:	|           |  |  |  |  |  |   move.l (a0),d1
   15f12:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15f16:	|           |  |  |  |  |  |   add.l d0,d0
   15f18:	|           |  |  |  |  |  |   add.l d0,d0
   15f1a:	|           |  |  |  |  |  |   movea.l d1,a0
   15f1c:	|           |  |  |  |  |  |   adda.l d0,a0
   15f1e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   15f22:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15f26:	|           |  |  |  |  |  |   add.l d0,d0
   15f28:	|           |  |  |  |  |  |   add.l d0,d0
   15f2a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   15f2e:	|           |  |  |  |  |  |   adda.l d0,a0
   15f30:	|           |  |  |  |  |  |   move.l (a0),d1
   15f32:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15f36:	|           |  |  |  |  |  |   add.l d0,d0
   15f38:	|           |  |  |  |  |  |   add.l d0,d0
   15f3a:	|           |  |  |  |  |  |   movea.l d1,a0
   15f3c:	|           |  |  |  |  |  |   adda.l d0,a0
   15f3e:	|           |  |  |  |  |  |   moveq #1,d1
   15f40:	|           |  |  |  |  |  |   move.l d1,(a0)
   15f42:	|           |  |  |  |  +--|-- bra.s 15f8a <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   15f44:	|           |  |  |  |  |  \-> movea.l 1b9bc <currentFloor>,a0
   15f4a:	|           |  |  |  |  |      move.l 16(a0),d1
   15f4e:	|           |  |  |  |  |      move.l 136(sp),d0
   15f52:	|           |  |  |  |  |      add.l d0,d0
   15f54:	|           |  |  |  |  |      add.l d0,d0
   15f56:	|           |  |  |  |  |      movea.l d1,a0
   15f58:	|           |  |  |  |  |      adda.l d0,a0
   15f5a:	|           |  |  |  |  |      move.l (a0),d1
   15f5c:	|           |  |  |  |  |      move.l 132(sp),d0
   15f60:	|           |  |  |  |  |      add.l d0,d0
   15f62:	|           |  |  |  |  |      add.l d0,d0
   15f64:	|           |  |  |  |  |      movea.l d1,a0
   15f66:	|           |  |  |  |  |      adda.l d0,a0
   15f68:	|           |  |  |  |  |      moveq #-2,d0
   15f6a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   15f6c:	|           |  |  |  |  |      move.l 136(sp),d0
   15f70:	|           |  |  |  |  |      add.l d0,d0
   15f72:	|           |  |  |  |  |      add.l d0,d0
   15f74:	|           |  |  |  |  |      movea.l 62(sp),a0
   15f78:	|           |  |  |  |  |      adda.l d0,a0
   15f7a:	|           |  |  |  |  |      move.l (a0),d1
   15f7c:	|           |  |  |  |  |      move.l 132(sp),d0
   15f80:	|           |  |  |  |  |      add.l d0,d0
   15f82:	|           |  |  |  |  |      add.l d0,d0
   15f84:	|           |  |  |  |  |      movea.l d1,a0
   15f86:	|           |  |  |  |  |      adda.l d0,a0
   15f88:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15f8a:	|           |  |  |  |  \----> addq.l #1,132(sp)
   15f8e:	|           |  |  |  \-------> movea.l 1b9bc <currentFloor>,a0
   15f94:	|           |  |  |            move.l 8(a0),d0
   15f98:	|           |  |  |            cmp.l 132(sp),d0
   15f9c:	|           |  |  \----------- bgt.w 15eaa <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15fa0:	|           |  |               addq.l #1,136(sp)
   15fa4:	|           |  \-------------> movea.l 1b9bc <currentFloor>,a0
   15faa:	|           |                  move.l 8(a0),d0
   15fae:	|           |                  cmp.l 136(sp),d0
   15fb2:	|           \----------------- bgt.w 15ea2 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   15fb6:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   15fba:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   15fbe:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15fc2:	|  |                           clr.l 136(sp)
   15fc6:	|  |     /-------------------- bra.w 1611c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15fca:	|  |  /--|-------------------> clr.l 132(sp)
   15fce:	|  |  |  |     /-------------- bra.w 16106 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   15fd2:	|  |  |  |  /--|-------------> movea.l 1b9bc <currentFloor>,a0
   15fd8:	|  |  |  |  |  |               move.l 16(a0),d1
   15fdc:	|  |  |  |  |  |               move.l 136(sp),d0
   15fe0:	|  |  |  |  |  |               add.l d0,d0
   15fe2:	|  |  |  |  |  |               add.l d0,d0
   15fe4:	|  |  |  |  |  |               movea.l d1,a0
   15fe6:	|  |  |  |  |  |               adda.l d0,a0
   15fe8:	|  |  |  |  |  |               move.l (a0),d1
   15fea:	|  |  |  |  |  |               move.l 132(sp),d0
   15fee:	|  |  |  |  |  |               add.l d0,d0
   15ff0:	|  |  |  |  |  |               add.l d0,d0
   15ff2:	|  |  |  |  |  |               movea.l d1,a0
   15ff4:	|  |  |  |  |  |               adda.l d0,a0
   15ff6:	|  |  |  |  |  |               move.l (a0),d0
   15ff8:	|  |  |  |  |  |               moveq #-1,d1
   15ffa:	|  |  |  |  |  |               cmp.l d0,d1
   15ffc:	|  |  |  |  |  |  /----------- bne.w 16102 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16000:	|  |  |  |  |  |  |            clr.l 122(sp)
   16004:	|  |  |  |  |  |  |     /----- bra.w 160f0 <setFloor+0x6d2>
						if (d != i && d != j) {
   16008:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   1600c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16010:	|  |  |  |  |  |  |  |  |  /-- beq.w 160ec <setFloor+0x6ce>
   16014:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16018:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   1601c:	|  |  |  |  |  |  |  |  |  +-- beq.w 160ec <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16020:	|  |  |  |  |  |  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   16026:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1602a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1602e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16030:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16032:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16034:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16036:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16038:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1603c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1603e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16040:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16042:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16044:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16046:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1604a:	|  |  |  |  |  |  |  |  |  +-- bne.w 160ec <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1604e:	|  |  |  |  |  |  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   16054:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16058:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1605c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1605e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16060:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16062:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16064:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16066:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1606a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1606c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1606e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16070:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16072:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16074:	|  |  |  |  |  |  |  |  |  +-- bmi.s 160ec <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16076:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1607a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1607c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1607e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16082:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16084:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16086:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1608a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1608c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1608e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16090:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16092:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16094:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16098:	|  |  |  |  |  |  |  |  |  +-- bgt.s 160ec <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1609a:	|  |  |  |  |  |  |  |  |  |   movea.l 1b9bc <currentFloor>,a0
   160a0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   160a4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   160a8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160ac:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   160ae:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   160b0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   160b2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   160b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160ba:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   160bc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   160be:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   160c2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   160c6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160c8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160ca:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   160ce:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   160d0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   160d2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   160d6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160d8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   160da:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   160dc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   160de:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   160e2:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   160e4:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   160e6:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   160ec:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   160f0:	|  |  |  |  |  |  |  |  \----> movea.l 1b9bc <currentFloor>,a0
   160f6:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   160fa:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   160fe:	|  |  |  |  |  |  |  \-------- bgt.w 16008 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16102:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16106:	|  |  |  |  |  \-------------> movea.l 1b9bc <currentFloor>,a0
   1610c:	|  |  |  |  |                  move.l 8(a0),d0
   16110:	|  |  |  |  |                  cmp.l 132(sp),d0
   16114:	|  |  |  |  \----------------- bgt.w 15fd2 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16118:	|  |  |  |                     addq.l #1,136(sp)
   1611c:	|  |  |  \-------------------> movea.l 1b9bc <currentFloor>,a0
   16122:	|  |  |                        move.l 8(a0),d0
   16126:	|  |  |                        cmp.l 136(sp),d0
   1612a:	|  |  \----------------------- bgt.w 15fca <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1612e:	|  |                           tst.w 130(sp)
   16132:	|  \-------------------------- bne.w 15fba <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16136:	|                              clr.l 136(sp)
   1613a:	|                          /-- bra.s 16162 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1613c:	|                       /--|-> move.l 136(sp),d0
   16140:	|                       |  |   add.l d0,d0
   16142:	|                       |  |   add.l d0,d0
   16144:	|                       |  |   movea.l 62(sp),a0
   16148:	|                       |  |   adda.l d0,a0
   1614a:	|                       |  |   move.l (a0),54(sp)
   1614e:	|                       |  |   move.l 1b848 <SysBase>,d0
   16154:	|                       |  |   movea.l d0,a6
   16156:	|                       |  |   movea.l 54(sp),a1
   1615a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1615e:	|                       |  |   addq.l #1,136(sp)
   16162:	|                       |  \-> movea.l 1b9bc <currentFloor>,a0
   16168:	|                       |      move.l 8(a0),d0
   1616c:	|                       |      cmp.l 136(sp),d0
   16170:	|                       \----- bgt.s 1613c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16172:	|                              move.l 62(sp),58(sp)
   16178:	|                              move.l 1b848 <SysBase>,d0
   1617e:	|                              movea.l d0,a6
   16180:	|                              movea.l 58(sp),a1
   16184:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16188:	|                              clr.l 62(sp)

	return TRUE;
   1618c:	|                              moveq #1,d0
}
   1618e:	\----------------------------> movea.l (sp)+,a2
   16190:	                               movea.l (sp)+,a6
   16192:	                               lea 132(sp),sp
   16196:	                               rts

00016198 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16198:	jsr 15686 <killFloor>
	noFloor ();
   1619e:	jsr 155aa <noFloor>
   161a4:	nop
   161a6:	rts

000161a8 <WaitVbl>:
void WaitVbl() {
   161a8:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   161aa:	   /-> movea.l #14675972,a0
   161b0:	   |   move.l (a0),d0
   161b2:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   161b4:	   |   move.l (sp),d0
   161b6:	   |   andi.l #130816,d0
   161bc:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   161be:	   |   move.l (sp),d0
   161c0:	   |   cmpi.l #76800,d0
   161c6:	   \-- beq.s 161aa <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   161c8:	/----> movea.l #14675972,a0
   161ce:	|      move.l (a0),d0
   161d0:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   161d4:	|      move.l 4(sp),d0
   161d8:	|      andi.l #130816,d0
   161de:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   161e2:	|      move.l 4(sp),d0
   161e6:	|      cmpi.l #76800,d0
   161ec:	|  /-- beq.s 161f0 <WaitVbl+0x48>
	while (1) {
   161ee:	\--|-- bra.s 161c8 <WaitVbl+0x20>
			break;
   161f0:	   \-> nop
}
   161f2:	       nop
   161f4:	       addq.l #8,sp
   161f6:	       rts

000161f8 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   161f8:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   161fa:	       move.l 8(sp),(sp)
	while(len-- > 0)
   161fe:	   /-- bra.s 16210 <memset+0x18>
		*ptr++ = val;
   16200:	/--|-> move.l (sp),d0
   16202:	|  |   move.l d0,d1
   16204:	|  |   addq.l #1,d1
   16206:	|  |   move.l d1,(sp)
   16208:	|  |   move.l 12(sp),d1
   1620c:	|  |   movea.l d0,a0
   1620e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16210:	|  \-> move.l 16(sp),d0
   16214:	|      move.l d0,d1
   16216:	|      subq.l #1,d1
   16218:	|      move.l d1,16(sp)
   1621c:	|      tst.l d0
   1621e:	\----- bne.s 16200 <memset+0x8>
	return dest;
   16220:	       move.l 8(sp),d0
}
   16224:	       addq.l #4,sp
   16226:	       rts

00016228 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16228:	       subq.l #8,sp
   1622a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1622c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16232:	       move.l 20(sp),4(sp)
	while(len--)
   16238:	   /-- bra.s 1625a <memcpy+0x32>
		*d++ = *s++;
   1623a:	/--|-> move.l 4(sp),d1
   1623e:	|  |   move.l d1,d0
   16240:	|  |   addq.l #1,d0
   16242:	|  |   move.l d0,4(sp)
   16246:	|  |   move.l 8(sp),d0
   1624a:	|  |   move.l d0,d2
   1624c:	|  |   addq.l #1,d2
   1624e:	|  |   move.l d2,8(sp)
   16252:	|  |   movea.l d1,a0
   16254:	|  |   move.b (a0),d1
   16256:	|  |   movea.l d0,a0
   16258:	|  |   move.b d1,(a0)
	while(len--)
   1625a:	|  \-> move.l 24(sp),d0
   1625e:	|      move.l d0,d1
   16260:	|      subq.l #1,d1
   16262:	|      move.l d1,24(sp)
   16266:	|      tst.l d0
   16268:	\----- bne.s 1623a <memcpy+0x12>
	return dest;
   1626a:	       move.l 16(sp),d0
}
   1626e:	       move.l (sp)+,d2
   16270:	       addq.l #8,sp
   16272:	       rts

00016274 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16274:	       lea -128(sp),sp
   16278:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1627c:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5a7b>,d0
   16282:	       cmpi.w #20153,d0
   16286:	   /-- beq.s 162aa <KPrintF+0x36>
   16288:	   |   cmpi.w #-24562,d0
   1628c:	   +-- beq.s 162aa <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1628e:	   |   movea.l 1b848 <SysBase>,a6
   16294:	   |   movea.l 144(sp),a0
   16298:	   |   lea 148(sp),a1
   1629c:	   |   lea 16bb6 <KPutCharX>,a2
   162a2:	   |   suba.l a3,a3
   162a4:	   |   jsr -522(a6)
}
   162a8:	/--|-- bra.s 162d4 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   162aa:	|  \-> movea.l 1b848 <SysBase>,a6
   162b0:	|      movea.l 144(sp),a0
   162b4:	|      lea 148(sp),a1
   162b8:	|      lea 16bc4 <PutChar>,a2
   162be:	|      lea 12(sp),a3
   162c2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   162c6:	|      move.l a3,-(sp)
   162c8:	|      pea 56 <_start+0x56>
   162cc:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5a7b>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   162d2:	|      addq.l #8,sp
}
   162d4:	\----> movem.l (sp)+,a2-a3/a6
   162d8:	       lea 128(sp),sp
   162dc:	       rts

000162de <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   162de:	lea -12(sp),sp
   162e2:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   162e4:	move.l 20(sp),12(sp)
   162ea:	move.l 24(sp),8(sp)
   162f0:	move.l 1b858 <MathIeeeSingBasBase>,d0
   162f6:	movea.l d0,a6
   162f8:	move.l 12(sp),d0
   162fc:	move.l 8(sp),d1
   16300:	jsr -66(a6)
   16304:	move.l d0,4(sp)
   16308:	move.l 4(sp),d0
}
   1630c:	movea.l (sp)+,a6
   1630e:	lea 12(sp),sp
   16312:	rts

00016314 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   16314:	lea -32(sp),sp
   16318:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1631c:	move.l 48(sp),36(sp)
   16322:	move.l 52(sp),40(sp)
   16328:	move.l 56(sp),28(sp)
   1632e:	move.l 60(sp),32(sp)
   16334:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   1633a:	movea.l d0,a6
   1633c:	move.l 36(sp),d0
   16340:	move.l 40(sp),d1
   16344:	move.l 28(sp),d2
   16348:	move.l 32(sp),d3
   1634c:	jsr -66(a6)
   16350:	move.l d0,12(sp)
   16354:	move.l d1,16(sp)
   16358:	move.l 12(sp),20(sp)
   1635e:	move.l 16(sp),24(sp)
   16364:	move.l 20(sp),d0
   16368:	move.l 24(sp),d1
}
   1636c:	movem.l (sp)+,d2-d3/a6
   16370:	lea 32(sp),sp
   16374:	rts

00016376 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   16376:	lea -32(sp),sp
   1637a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1637e:	move.l 48(sp),36(sp)
   16384:	move.l 52(sp),40(sp)
   1638a:	move.l 56(sp),28(sp)
   16390:	move.l 60(sp),32(sp)
   16396:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   1639c:	movea.l d0,a6
   1639e:	move.l 36(sp),d0
   163a2:	move.l 40(sp),d1
   163a6:	move.l 28(sp),d2
   163aa:	move.l 32(sp),d3
   163ae:	jsr -84(a6)
   163b2:	move.l d0,12(sp)
   163b6:	move.l d1,16(sp)
   163ba:	move.l 12(sp),20(sp)
   163c0:	move.l 16(sp),24(sp)
   163c6:	move.l 20(sp),d0
   163ca:	move.l 24(sp),d1
}
   163ce:	movem.l (sp)+,d2-d3/a6
   163d2:	lea 32(sp),sp
   163d6:	rts

000163d8 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   163d8:	lea -12(sp),sp
   163dc:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   163de:	move.l 20(sp),12(sp)
   163e4:	move.l 24(sp),8(sp)
   163ea:	move.l 1b858 <MathIeeeSingBasBase>,d0
   163f0:	movea.l d0,a6
   163f2:	move.l 12(sp),d0
   163f6:	move.l 8(sp),d1
   163fa:	jsr -84(a6)
   163fe:	move.l d0,4(sp)
   16402:	move.l 4(sp),d0
}
   16406:	movea.l (sp)+,a6
   16408:	lea 12(sp),sp
   1640c:	rts

0001640e <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1640e:	lea -12(sp),sp
   16412:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16414:	move.l 20(sp),12(sp)
   1641a:	move.l 24(sp),8(sp)
   16420:	move.l 1b858 <MathIeeeSingBasBase>,d0
   16426:	movea.l d0,a6
   16428:	move.l 12(sp),d0
   1642c:	move.l 8(sp),d1
   16430:	jsr -42(a6)
   16434:	move.l d0,4(sp)
   16438:	move.l 4(sp),d0
}
   1643c:	movea.l (sp)+,a6
   1643e:	lea 12(sp),sp
   16442:	rts

00016444 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   16444:	lea -20(sp),sp
   16448:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1644a:	move.l 28(sp),20(sp)
   16450:	move.l 1b864 <MathIeeeDoubTransBase>,d0
   16456:	movea.l d0,a6
   16458:	move.l 20(sp),d0
   1645c:	jsr -108(a6)
   16460:	move.l d0,4(sp)
   16464:	move.l d1,8(sp)
   16468:	move.l 4(sp),12(sp)
   1646e:	move.l 8(sp),16(sp)
   16474:	move.l 12(sp),d0
   16478:	move.l 16(sp),d1
}
   1647c:	movea.l (sp)+,a6
   1647e:	lea 20(sp),sp
   16482:	rts

00016484 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   16484:	lea -12(sp),sp
   16488:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1648a:	move.l 20(sp),8(sp)
   16490:	move.l 24(sp),12(sp)
   16496:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   1649c:	movea.l d0,a6
   1649e:	move.l 8(sp),d0
   164a2:	move.l 12(sp),d1
   164a6:	jsr -30(a6)
   164aa:	move.l d0,4(sp)
   164ae:	move.l 4(sp),d0
   164b2:	move.l d0,-(sp)
   164b4:	jsr 164ec <__floatsidf>
   164ba:	addq.l #4,sp
}
   164bc:	movea.l (sp)+,a6
   164be:	lea 12(sp),sp
   164c2:	rts

000164c4 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   164c4:	subq.l #8,sp
   164c6:	move.l a6,-(sp)
	return IEEESPFix(value);
   164c8:	move.l 16(sp),8(sp)
   164ce:	move.l 1b858 <MathIeeeSingBasBase>,d0
   164d4:	movea.l d0,a6
   164d6:	move.l 8(sp),d0
   164da:	jsr -30(a6)
   164de:	move.l d0,4(sp)
   164e2:	move.l 4(sp),d0
}
   164e6:	movea.l (sp)+,a6
   164e8:	addq.l #8,sp
   164ea:	rts

000164ec <__floatsidf>:


DOUBLE __floatsidf (int i) {
   164ec:	lea -20(sp),sp
   164f0:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   164f2:	move.l 28(sp),20(sp)
   164f8:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   164fe:	movea.l d0,a6
   16500:	move.l 20(sp),d0
   16504:	jsr -36(a6)
   16508:	move.l d0,4(sp)
   1650c:	move.l d1,8(sp)
   16510:	move.l 4(sp),12(sp)
   16516:	move.l 8(sp),16(sp)
   1651c:	move.l 12(sp),d0
   16520:	move.l 16(sp),d1
}
   16524:	movea.l (sp)+,a6
   16526:	lea 20(sp),sp
   1652a:	rts

0001652c <__floatsisf>:

FLOAT __floatsisf(int i) {
   1652c:	subq.l #8,sp
   1652e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16530:	move.l 16(sp),8(sp)
   16536:	move.l 1b858 <MathIeeeSingBasBase>,d0
   1653c:	movea.l d0,a6
   1653e:	move.l 8(sp),d0
   16542:	jsr -36(a6)
   16546:	move.l d0,4(sp)
   1654a:	move.l 4(sp),d0
}
   1654e:	movea.l (sp)+,a6
   16550:	addq.l #8,sp
   16552:	rts

00016554 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   16554:	subq.l #8,sp
   16556:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16558:	move.l 16(sp),8(sp)
   1655e:	move.l 1b858 <MathIeeeSingBasBase>,d0
   16564:	movea.l d0,a6
   16566:	move.l 8(sp),d0
   1656a:	jsr -36(a6)
   1656e:	move.l d0,4(sp)
   16572:	move.l 4(sp),d0
}
   16576:	movea.l (sp)+,a6
   16578:	addq.l #8,sp
   1657a:	rts

0001657c <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1657c:	lea -32(sp),sp
   16580:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   16584:	move.l 48(sp),36(sp)
   1658a:	move.l 52(sp),40(sp)
   16590:	move.l 56(sp),28(sp)
   16596:	move.l 60(sp),32(sp)
   1659c:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   165a2:	movea.l d0,a6
   165a4:	move.l 36(sp),d0
   165a8:	move.l 40(sp),d1
   165ac:	move.l 28(sp),d2
   165b0:	move.l 32(sp),d3
   165b4:	jsr -78(a6)
   165b8:	move.l d0,12(sp)
   165bc:	move.l d1,16(sp)
   165c0:	move.l 12(sp),20(sp)
   165c6:	move.l 16(sp),24(sp)
   165cc:	move.l 20(sp),d0
   165d0:	move.l 24(sp),d1
}
   165d4:	movem.l (sp)+,d2-d3/a6
   165d8:	lea 32(sp),sp
   165dc:	rts

000165de <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   165de:	lea -12(sp),sp
   165e2:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   165e4:	move.l 20(sp),12(sp)
   165ea:	move.l 24(sp),8(sp)
   165f0:	move.l 1b858 <MathIeeeSingBasBase>,d0
   165f6:	movea.l d0,a6
   165f8:	move.l 12(sp),d0
   165fc:	move.l 8(sp),d1
   16600:	jsr -78(a6)
   16604:	move.l d0,4(sp)
   16608:	move.l 4(sp),d0
}
   1660c:	movea.l (sp)+,a6
   1660e:	lea 12(sp),sp
   16612:	rts

00016614 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   16614:	lea -12(sp),sp
   16618:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1661a:	move.l 20(sp),12(sp)
   16620:	move.l 24(sp),8(sp)
   16626:	move.l 1b858 <MathIeeeSingBasBase>,d0
   1662c:	movea.l d0,a6
   1662e:	move.l 12(sp),d0
   16632:	move.l 8(sp),d1
   16636:	jsr -42(a6)
   1663a:	move.l d0,4(sp)
   1663e:	move.l 4(sp),d0
}
   16642:	movea.l (sp)+,a6
   16644:	lea 12(sp),sp
   16648:	rts

0001664a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1664a:	lea -20(sp),sp
   1664e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   16652:	move.l 36(sp),24(sp)
   16658:	move.l 40(sp),28(sp)
   1665e:	move.l 44(sp),16(sp)
   16664:	move.l 48(sp),20(sp)
   1666a:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   16670:	movea.l d0,a6
   16672:	move.l 24(sp),d0
   16676:	move.l 28(sp),d1
   1667a:	move.l 16(sp),d2
   1667e:	move.l 20(sp),d3
   16682:	jsr -42(a6)
   16686:	move.l d0,12(sp)
   1668a:	move.l 12(sp),d0
}
   1668e:	movem.l (sp)+,d2-d3/a6
   16692:	lea 20(sp),sp
   16696:	rts

00016698 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   16698:	lea -12(sp),sp
   1669c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1669e:	move.l 20(sp),12(sp)
   166a4:	move.l 24(sp),8(sp)
   166aa:	move.l 1b858 <MathIeeeSingBasBase>,d0
   166b0:	movea.l d0,a6
   166b2:	move.l 12(sp),d0
   166b6:	move.l 8(sp),d1
   166ba:	jsr -42(a6)
   166be:	move.l d0,4(sp)
   166c2:	move.l 4(sp),d0
}
   166c6:	movea.l (sp)+,a6
   166c8:	lea 12(sp),sp
   166cc:	rts

000166ce <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   166ce:	lea -12(sp),sp
   166d2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   166d4:	move.l 20(sp),12(sp)
   166da:	move.l 24(sp),8(sp)
   166e0:	move.l 1b858 <MathIeeeSingBasBase>,d0
   166e6:	movea.l d0,a6
   166e8:	move.l 12(sp),d0
   166ec:	move.l 8(sp),d1
   166f0:	jsr -42(a6)
   166f4:	move.l d0,4(sp)
   166f8:	move.l 4(sp),d0
}
   166fc:	movea.l (sp)+,a6
   166fe:	lea 12(sp),sp
   16702:	rts

00016704 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   16704:	lea -20(sp),sp
   16708:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1670c:	move.l 36(sp),24(sp)
   16712:	move.l 40(sp),28(sp)
   16718:	move.l 44(sp),16(sp)
   1671e:	move.l 48(sp),20(sp)
   16724:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   1672a:	movea.l d0,a6
   1672c:	move.l 24(sp),d0
   16730:	move.l 28(sp),d1
   16734:	move.l 16(sp),d2
   16738:	move.l 20(sp),d3
   1673c:	jsr -42(a6)
   16740:	move.l d0,12(sp)
   16744:	move.l 12(sp),d0
}
   16748:	movem.l (sp)+,d2-d3/a6
   1674c:	lea 20(sp),sp
   16750:	rts

00016752 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   16752:	lea -12(sp),sp
   16756:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16758:	move.l 20(sp),12(sp)
   1675e:	move.l 24(sp),8(sp)
   16764:	move.l 1b858 <MathIeeeSingBasBase>,d0
   1676a:	movea.l d0,a6
   1676c:	move.l 12(sp),d0
   16770:	move.l 8(sp),d1
   16774:	jsr -42(a6)
   16778:	move.l d0,4(sp)
   1677c:	move.l 4(sp),d0
}
   16780:	movea.l (sp)+,a6
   16782:	lea 12(sp),sp
   16786:	rts

00016788 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   16788:	lea -12(sp),sp
   1678c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1678e:	move.l 20(sp),12(sp)
   16794:	move.l 24(sp),8(sp)
   1679a:	move.l 1b858 <MathIeeeSingBasBase>,d0
   167a0:	movea.l d0,a6
   167a2:	move.l 12(sp),d0
   167a6:	move.l 8(sp),d1
   167aa:	jsr -42(a6)
   167ae:	move.l d0,4(sp)
   167b2:	move.l 4(sp),d0
}
   167b6:	movea.l (sp)+,a6
   167b8:	lea 12(sp),sp
   167bc:	rts

000167be <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   167be:	lea -32(sp),sp
   167c2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   167c6:	move.l 48(sp),36(sp)
   167cc:	move.l 52(sp),40(sp)
   167d2:	move.l 56(sp),28(sp)
   167d8:	move.l 60(sp),32(sp)
   167de:	move.l 1b860 <MathIeeeDoubBasBase>,d0
   167e4:	movea.l d0,a6
   167e6:	move.l 36(sp),d0
   167ea:	move.l 40(sp),d1
   167ee:	move.l 28(sp),d2
   167f2:	move.l 32(sp),d3
   167f6:	jsr -72(a6)
   167fa:	move.l d0,12(sp)
   167fe:	move.l d1,16(sp)
   16802:	move.l 12(sp),20(sp)
   16808:	move.l 16(sp),24(sp)
   1680e:	move.l 20(sp),d0
   16812:	move.l 24(sp),d1
}
   16816:	movem.l (sp)+,d2-d3/a6
   1681a:	lea 32(sp),sp
   1681e:	rts

00016820 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   16820:	lea -12(sp),sp
   16824:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   16826:	move.l 20(sp),12(sp)
   1682c:	move.l 24(sp),8(sp)
   16832:	move.l 1b858 <MathIeeeSingBasBase>,d0
   16838:	movea.l d0,a6
   1683a:	move.l 12(sp),d0
   1683e:	move.l 8(sp),d1
   16842:	jsr -72(a6)
   16846:	move.l d0,4(sp)
   1684a:	move.l 4(sp),d0
}
   1684e:	movea.l (sp)+,a6
   16850:	lea 12(sp),sp
   16854:	rts

00016856 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   16856:	lea -12(sp),sp
   1685a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1685c:	move.l 20(sp),8(sp)
   16862:	move.l 24(sp),12(sp)
   16868:	move.l 1b864 <MathIeeeDoubTransBase>,d0
   1686e:	movea.l d0,a6
   16870:	move.l 8(sp),d0
   16874:	move.l 12(sp),d1
   16878:	jsr -102(a6)
   1687c:	move.l d0,4(sp)
   16880:	move.l 4(sp),d0
}
   16884:	movea.l (sp)+,a6
   16886:	lea 12(sp),sp
   1688a:	rts

0001688c <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   1688c:	subq.l #8,sp
   1688e:	move.l a6,-(sp)
	return IEEESPFix(a);
   16890:	move.l 16(sp),8(sp)
   16896:	move.l 1b858 <MathIeeeSingBasBase>,d0
   1689c:	movea.l d0,a6
   1689e:	move.l 8(sp),d0
   168a2:	jsr -30(a6)
   168a6:	move.l d0,4(sp)
   168aa:	move.l 4(sp),d0
}
   168ae:	movea.l (sp)+,a6
   168b0:	addq.l #8,sp
   168b2:	rts

000168b4 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   168b4:	       lea -24(sp),sp
   168b8:	       move.l a6,-(sp)
    if (x > 0) {
   168ba:	       clr.l -(sp)
   168bc:	       move.l 40(sp),-(sp)
   168c0:	       jsr 16698 <__gtsf2>
   168c6:	       addq.l #8,sp
   168c8:	       tst.l d0
   168ca:	   /-- ble.s 168fc <atan2f+0x48>
        return IEEESPAtan(y / x);
   168cc:	   |   move.l 36(sp),-(sp)
   168d0:	   |   move.l 36(sp),-(sp)
   168d4:	   |   jsr 163d8 <__divsf3>
   168da:	   |   addq.l #8,sp
   168dc:	   |   move.l d0,8(sp)
   168e0:	   |   move.l 1b85c <MathIeeeSingTransBase>,d0
   168e6:	   |   movea.l d0,a6
   168e8:	   |   move.l 8(sp),d0
   168ec:	   |   jsr -30(a6)
   168f0:	   |   move.l d0,4(sp)
   168f4:	   |   move.l 4(sp),d0
   168f8:	/--|-- bra.w 16a5c <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   168fc:	|  \-> clr.l -(sp)
   168fe:	|      move.l 40(sp),-(sp)
   16902:	|      jsr 16752 <__ltsf2>
   16908:	|      addq.l #8,sp
   1690a:	|      tst.l d0
   1690c:	|  /-- bge.s 16980 <atan2f+0xcc>
   1690e:	|  |   clr.l -(sp)
   16910:	|  |   move.l 36(sp),-(sp)
   16914:	|  |   jsr 16614 <__gesf2>
   1691a:	|  |   addq.l #8,sp
   1691c:	|  |   tst.l d0
   1691e:	|  +-- blt.s 16980 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   16920:	|  |   move.l 36(sp),-(sp)
   16924:	|  |   move.l 36(sp),-(sp)
   16928:	|  |   jsr 163d8 <__divsf3>
   1692e:	|  |   addq.l #8,sp
   16930:	|  |   move.l d0,24(sp)
   16934:	|  |   move.l 1b85c <MathIeeeSingTransBase>,d0
   1693a:	|  |   movea.l d0,a6
   1693c:	|  |   move.l 24(sp),d0
   16940:	|  |   jsr -30(a6)
   16944:	|  |   move.l d0,20(sp)
   16948:	|  |   move.l 20(sp),d0
   1694c:	|  |   move.l d0,-(sp)
   1694e:	|  |   jsr 16444 <__extendsfdf2>
   16954:	|  |   addq.l #4,sp
   16956:	|  |   move.l #1413754136,-(sp)
   1695c:	|  |   move.l #1074340347,-(sp)
   16962:	|  |   move.l d1,-(sp)
   16964:	|  |   move.l d0,-(sp)
   16966:	|  |   jsr 16314 <__adddf3>
   1696c:	|  |   lea 16(sp),sp
   16970:	|  |   move.l d1,-(sp)
   16972:	|  |   move.l d0,-(sp)
   16974:	|  |   jsr 16856 <__truncdfsf2>
   1697a:	|  |   addq.l #8,sp
   1697c:	+--|-- bra.w 16a5c <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   16980:	|  \-> clr.l -(sp)
   16982:	|      move.l 40(sp),-(sp)
   16986:	|      jsr 16752 <__ltsf2>
   1698c:	|      addq.l #8,sp
   1698e:	|      tst.l d0
   16990:	|  /-- bge.s 16a02 <atan2f+0x14e>
   16992:	|  |   clr.l -(sp)
   16994:	|  |   move.l 36(sp),-(sp)
   16998:	|  |   jsr 16752 <__ltsf2>
   1699e:	|  |   addq.l #8,sp
   169a0:	|  |   tst.l d0
   169a2:	|  +-- bge.s 16a02 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   169a4:	|  |   move.l 36(sp),-(sp)
   169a8:	|  |   move.l 36(sp),-(sp)
   169ac:	|  |   jsr 163d8 <__divsf3>
   169b2:	|  |   addq.l #8,sp
   169b4:	|  |   move.l d0,16(sp)
   169b8:	|  |   move.l 1b85c <MathIeeeSingTransBase>,d0
   169be:	|  |   movea.l d0,a6
   169c0:	|  |   move.l 16(sp),d0
   169c4:	|  |   jsr -30(a6)
   169c8:	|  |   move.l d0,12(sp)
   169cc:	|  |   move.l 12(sp),d0
   169d0:	|  |   move.l d0,-(sp)
   169d2:	|  |   jsr 16444 <__extendsfdf2>
   169d8:	|  |   addq.l #4,sp
   169da:	|  |   move.l #1413754136,-(sp)
   169e0:	|  |   move.l #1074340347,-(sp)
   169e6:	|  |   move.l d1,-(sp)
   169e8:	|  |   move.l d0,-(sp)
   169ea:	|  |   jsr 167be <__subdf3>
   169f0:	|  |   lea 16(sp),sp
   169f4:	|  |   move.l d1,-(sp)
   169f6:	|  |   move.l d0,-(sp)
   169f8:	|  |   jsr 16856 <__truncdfsf2>
   169fe:	|  |   addq.l #8,sp
   16a00:	+--|-- bra.s 16a5c <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   16a02:	|  \-> clr.l -(sp)
   16a04:	|      move.l 40(sp),-(sp)
   16a08:	|      jsr 1640e <__eqsf2>
   16a0e:	|      addq.l #8,sp
   16a10:	|      tst.l d0
   16a12:	|  /-- bne.s 16a2e <atan2f+0x17a>
   16a14:	|  |   clr.l -(sp)
   16a16:	|  |   move.l 36(sp),-(sp)
   16a1a:	|  |   jsr 16698 <__gtsf2>
   16a20:	|  |   addq.l #8,sp
   16a22:	|  |   tst.l d0
   16a24:	|  +-- ble.s 16a2e <atan2f+0x17a>
        return PI / 2;
   16a26:	|  |   move.l #1070141403,d0
   16a2c:	+--|-- bra.s 16a5c <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   16a2e:	|  \-> clr.l -(sp)
   16a30:	|      move.l 40(sp),-(sp)
   16a34:	|      jsr 1640e <__eqsf2>
   16a3a:	|      addq.l #8,sp
   16a3c:	|      tst.l d0
   16a3e:	|  /-- bne.s 16a5a <atan2f+0x1a6>
   16a40:	|  |   clr.l -(sp)
   16a42:	|  |   move.l 36(sp),-(sp)
   16a46:	|  |   jsr 16752 <__ltsf2>
   16a4c:	|  |   addq.l #8,sp
   16a4e:	|  |   tst.l d0
   16a50:	|  +-- bge.s 16a5a <atan2f+0x1a6>
        return -PI / 2;
   16a52:	|  |   move.l #-1077342245,d0
   16a58:	+--|-- bra.s 16a5c <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   16a5a:	|  \-> moveq #0,d0
    }
}
   16a5c:	\----> movea.l (sp)+,a6
   16a5e:	       lea 24(sp),sp
   16a62:	       rts

00016a64 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   16a64:	lea -24(sp),sp
   16a68:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   16a6a:	move.l 32(sp),20(sp)
   16a70:	move.l 36(sp),24(sp)
   16a76:	move.l 1b864 <MathIeeeDoubTransBase>,d0
   16a7c:	movea.l d0,a6
   16a7e:	move.l 20(sp),d0
   16a82:	move.l 24(sp),d1
   16a86:	jsr -96(a6)
   16a8a:	move.l d0,4(sp)
   16a8e:	move.l d1,8(sp)
   16a92:	move.l 4(sp),12(sp)
   16a98:	move.l 8(sp),16(sp)
   16a9e:	move.l 12(sp),d0
   16aa2:	move.l 16(sp),d1
}
   16aa6:	movea.l (sp)+,a6
   16aa8:	lea 24(sp),sp
   16aac:	rts

00016aae <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   16aae:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   16ab2:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16ab6:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   16aba:	mulu.w 8(sp),d1
	addw	d1, d0
   16abe:	add.w d1,d0
	swap	d0
   16ac0:	swap d0
	clrw	d0
   16ac2:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16ac4:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   16ac8:	mulu.w 10(sp),d1
	addl	d1, d0
   16acc:	add.l d1,d0
	rts
   16ace:	rts

00016ad0 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   16ad0:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   16ad2:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   16ad6:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   16ada:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   16ae0:	   /-- bcc.s 16af8 <__udivsi3+0x28>
	movel	d0, d2
   16ae2:	   |   move.l d0,d2
	clrw	d2
   16ae4:	   |   clr.w d2
	swap	d2
   16ae6:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   16ae8:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   16aea:	   |   move.w d2,d0
	swap	d0
   16aec:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   16aee:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   16af2:	   |   divu.w d1,d2
	movew	d2, d0
   16af4:	   |   move.w d2,d0
	jra	6f
   16af6:	/--|-- bra.s 16b28 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   16af8:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   16afa:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   16afc:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   16afe:	|  |   cmpi.l #65536,d1
	jcc	4b
   16b04:	|  \-- bcc.s 16afa <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   16b06:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   16b08:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   16b0e:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   16b10:	|      mulu.w d0,d1
	swap	d2
   16b12:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   16b14:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   16b16:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   16b18:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   16b1a:	|  /-- bne.s 16b26 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   16b1c:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   16b1e:	|  +-- bcs.s 16b26 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   16b20:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   16b24:	+--|-- bls.s 16b28 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   16b26:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   16b28:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   16b2a:	       rts

00016b2c <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   16b2c:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   16b2e:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   16b30:	    move.l 12(sp),d1
	jpl	1f
   16b34:	/-- bpl.s 16b3a <__divsi3+0xe>
	negl	d1
   16b36:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   16b38:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   16b3a:	\-> move.l 8(sp),d0
	jpl	2f
   16b3e:	/-- bpl.s 16b44 <__divsi3+0x18>
	negl	d0
   16b40:	|   neg.l d0
	negb	d2
   16b42:	|   neg.b d2

2:	movel	d1, sp@-
   16b44:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16b46:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   16b48:	    jsr 16ad0 <__udivsi3>
	addql	#8, sp
   16b4e:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   16b50:	    tst.b d2
	jpl	3f
   16b52:	/-- bpl.s 16b56 <__divsi3+0x2a>
	negl	d0
   16b54:	|   neg.l d0

3:	movel	sp@+, d2
   16b56:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   16b58:	    rts

00016b5a <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   16b5a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16b5e:	move.l 4(sp),d0
	movel	d1, sp@-
   16b62:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16b64:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   16b66:	jsr 16b2c <__divsi3>
	addql	#8, sp
   16b6c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16b6e:	move.l 8(sp),d1
	movel	d1, sp@-
   16b72:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16b74:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16b76:	jsr 16aae <__mulsi3>
	addql	#8, sp
   16b7c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16b7e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16b82:	sub.l d0,d1
	movel	d1, d0
   16b84:	move.l d1,d0
	rts
   16b86:	rts

00016b88 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   16b88:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16b8c:	move.l 4(sp),d0
	movel	d1, sp@-
   16b90:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16b92:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   16b94:	jsr 16ad0 <__udivsi3>
	addql	#8, sp
   16b9a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16b9c:	move.l 8(sp),d1
	movel	d1, sp@-
   16ba0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16ba2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16ba4:	jsr 16aae <__mulsi3>
	addql	#8, sp
   16baa:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16bac:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16bb0:	sub.l d0,d1
	movel	d1, d0
   16bb2:	move.l d1,d0
	rts
   16bb4:	rts

00016bb6 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   16bb6:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   16bb8:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   16bbc:	jsr -516(a6)
    move.l (sp)+, a6
   16bc0:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   16bc2:	rts

00016bc4 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   16bc4:	move.b d0,(a3)+
	rts
   16bc6:	rts
