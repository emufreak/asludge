
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #123065,d0
       8:	       subi.l #123065,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1e0b9 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #123065,d0
      40:	       subi.l #123065,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1e0b9 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 86dc <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #123065,d0
      7e:	       subi.l #123065,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1e0b9 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14f0a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1e876 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 14f22 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1e0ba <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14f0a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1e876 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1e0ba <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14f0a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1e876 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 18fa4 <PutChar+0x4>
     35c:	|  |              |   jsr 184fe <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1e87e <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1e87e <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1e87e <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1e87e <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1e87e <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1e87e <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1e87e <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18fce <PutChar+0x2e>
     834:	|   jsr 184fe <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1e87e <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18fea <PutChar+0x4a>
     8a6:	|   jsr 184fe <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1e87e <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1e87e <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1e87e <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1e87e <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1e87e <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1e87e <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1e87e <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1e87e <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1e876 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1e87e <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14f0a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1e87e <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1e76c <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1e76c <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1e76c <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1e76c <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1e76c <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1e834 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1e76c <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1e76c <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1e830 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1e76c <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1e76c <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 147c <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1e76c <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr a2c8 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1e76c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1e770 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1e774 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 30cc <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 19012 <PutChar+0x72>
     e1a:	          jsr 184fe <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1e788 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 1902b <PutChar+0x8b>
     e30:	      |   jsr 184fe <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c6 <CstBlankScreen+0x2b8>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1e782 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1e882 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1e788 <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 19059 <PutChar+0xb9>
     f1e:	|         jsr 184fe <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1e882 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 19079 <PutChar+0xd9>
     f68:	|         jsr 184fe <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1e7a0 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1e876 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/2;
     fd4:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #1,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1e79c <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1e876 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1e79c <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/2;
    1078:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #1,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = y1; 
    10aa:	|         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    10b0:	|         move.l 60(sp),d0
    10b4:	|         move.w d0,14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b8:	|         pea 19099 <PutChar+0xf9>
    10be:	|         jsr 184fe <KPrintF>
    10c4:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c6:	'-------> movea.l (sp)+,a6
    10c8:	          lea 48(sp),sp
    10cc:	          rts

000010ce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ce:	       lea -52(sp),sp
    10d2:	       move.l a6,-(sp)
    10d4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d6:	       move.l #400,32(sp)
    10de:	       moveq #2,d0
    10e0:	       move.l d0,28(sp)
    10e4:	       move.l 1e876 <SysBase>,d0
    10ea:	       movea.l d0,a6
    10ec:	       move.l 32(sp),d0
    10f0:	       move.l 28(sp),d1
    10f4:	       jsr -198(a6)
    10f8:	       move.l d0,24(sp)
    10fc:	       move.l 24(sp),d0
    1100:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1104:	   ,-- bne.s 112e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1106:	   |   pea 28 <_start+0x28>
    110a:	   |   pea 190ae <PutChar+0x10e>
    1110:	   |   jsr 184fe <KPrintF>
    1116:	   |   addq.l #8,sp
    Exit(1);
    1118:	   |   moveq #1,d1
    111a:	   |   move.l d1,16(sp)
    111e:	   |   move.l 1e87e <DOSBase>,d0
    1124:	   |   movea.l d0,a6
    1126:	   |   move.l 16(sp),d1
    112a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112e:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1134:	       move.l 56(sp),1e7ac <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    113c:	       move.l #123068,52(sp)
  for(int i=0; i<16;i++)
    1144:	       clr.l 48(sp)
    1148:	   ,-- bra.s 116e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    114a:	,--|-> move.l 52(sp),d1
    114e:	|  |   move.l d1,d2
    1150:	|  |   addq.l #4,d2
    1152:	|  |   move.l d2,52(sp)
    1156:	|  |   move.l 56(sp),d0
    115a:	|  |   move.l d0,d2
    115c:	|  |   addq.l #4,d2
    115e:	|  |   move.l d2,56(sp)
    1162:	|  |   movea.l d1,a0
    1164:	|  |   move.l (a0),d1
    1166:	|  |   movea.l d0,a0
    1168:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    116a:	|  |   addq.l #1,48(sp)
    116e:	|  '-> moveq #15,d0
    1170:	|      cmp.l 48(sp),d0
    1174:	'----- bge.s 114a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1176:	       move.l #123132,52(sp)

  for(int i=0; i<12;i++)
    117e:	       clr.l 44(sp)
    1182:	   ,-- bra.s 11a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1184:	,--|-> move.l 52(sp),d1
    1188:	|  |   move.l d1,d2
    118a:	|  |   addq.l #4,d2
    118c:	|  |   move.l d2,52(sp)
    1190:	|  |   move.l 56(sp),d0
    1194:	|  |   move.l d0,d2
    1196:	|  |   addq.l #4,d2
    1198:	|  |   move.l d2,56(sp)
    119c:	|  |   movea.l d1,a0
    119e:	|  |   move.l (a0),d1
    11a0:	|  |   movea.l d0,a0
    11a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a4:	|  |   addq.l #1,44(sp)
    11a8:	|  '-> moveq #11,d0
    11aa:	|      cmp.l 44(sp),d0
    11ae:	'----- bge.s 1184 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11b0:	       move.l #123180,52(sp)
  for(int i=0; i<10;i++)
    11b8:	       clr.l 40(sp)
    11bc:	   ,-- bra.s 11e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11be:	,--|-> move.l 52(sp),d1
    11c2:	|  |   move.l d1,d2
    11c4:	|  |   addq.l #4,d2
    11c6:	|  |   move.l d2,52(sp)
    11ca:	|  |   move.l 56(sp),d0
    11ce:	|  |   move.l d0,d2
    11d0:	|  |   addq.l #4,d2
    11d2:	|  |   move.l d2,56(sp)
    11d6:	|  |   movea.l d1,a0
    11d8:	|  |   move.l (a0),d1
    11da:	|  |   movea.l d0,a0
    11dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11de:	|  |   addq.l #1,40(sp)
    11e2:	|  '-> moveq #9,d0
    11e4:	|      cmp.l 40(sp),d0
    11e8:	'----- bge.s 11be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11ea:	       move.l #123220,52(sp)
  CstClColor = (UWORD *) cl;
    11f2:	       move.l 56(sp),1e7a4 <CstClColor>
  for(int i=0; i<32;i++)
    11fa:	       clr.l 36(sp)
    11fe:	   ,-- bra.s 1224 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1200:	,--|-> move.l 52(sp),d1
    1204:	|  |   move.l d1,d2
    1206:	|  |   addq.l #4,d2
    1208:	|  |   move.l d2,52(sp)
    120c:	|  |   move.l 56(sp),d0
    1210:	|  |   move.l d0,d2
    1212:	|  |   addq.l #4,d2
    1214:	|  |   move.l d2,56(sp)
    1218:	|  |   movea.l d1,a0
    121a:	|  |   move.l (a0),d1
    121c:	|  |   movea.l d0,a0
    121e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1220:	|  |   addq.l #1,36(sp)
    1224:	|  '-> moveq #31,d0
    1226:	|      cmp.l 36(sp),d0
    122a:	'----- bge.s 1200 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    122c:	       moveq #40,d1
    122e:	       cmp.l 64(sp),d1
    1232:	   ,-- bge.s 1290 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1234:	   |   moveq #-40,d2
    1236:	   |   add.l 64(sp),d2
    123a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1244:	   |   move.l 8(sp),d0
    1248:	   |   move.l d0,d1
    124a:	   |   addq.l #2,d1
    124c:	   |   move.l d1,8(sp)
    1250:	   |   movea.l d0,a0
    1252:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1256:	   |   move.l 8(sp),d0
    125a:	   |   move.l d0,d1
    125c:	   |   addq.l #2,d1
    125e:	   |   move.l d1,8(sp)
    1262:	   |   move.l 12(sp),d1
    1266:	   |   movea.l d0,a0
    1268:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    126a:	   |   move.l 8(sp),d0
    126e:	   |   move.l d0,d1
    1270:	   |   addq.l #2,d1
    1272:	   |   move.l d1,8(sp)
    1276:	   |   movea.l d0,a0
    1278:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    127c:	   |   move.l 8(sp),d0
    1280:	   |   move.l d0,d1
    1282:	   |   addq.l #2,d1
    1284:	   |   move.l d1,8(sp)
    1288:	   |   move.l 12(sp),d1
    128c:	   |   movea.l d0,a0
    128e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xffdffffe;
    1290:	   '-> move.l 56(sp),d0
    1294:	       move.l d0,d1
    1296:	       addq.l #4,d1
    1298:	       move.l d1,56(sp)
    129c:	       movea.l d0,a0
    129e:	       move.l #-2097154,(a0)
  *cl++ = 0x2d01ff00;
    12a4:	       move.l 56(sp),d0
    12a8:	       move.l d0,d1
    12aa:	       addq.l #4,d1
    12ac:	       move.l d1,56(sp)
    12b0:	       movea.l d0,a0
    12b2:	       move.l #755105536,(a0)
  *cl++ = 0x9c8010;
    12b8:	       move.l 56(sp),d0
    12bc:	       move.l d0,d1
    12be:	       addq.l #4,d1
    12c0:	       move.l d1,56(sp)
    12c4:	       movea.l d0,a0
    12c6:	       move.l #10256400,(a0)

  *cl++ = 0xfffffffe;
    12cc:	       move.l 56(sp),d0
    12d0:	       move.l d0,d1
    12d2:	       addq.l #4,d1
    12d4:	       move.l d1,56(sp)
    12d8:	       moveq #-2,d2
    12da:	       movea.l d0,a0
    12dc:	       move.l d2,(a0)
  return (UWORD *) retval;  
    12de:	       move.l 20(sp),d0
}
    12e2:	       move.l (sp)+,d2
    12e4:	       movea.l (sp)+,a6
    12e6:	       lea 52(sp),sp
    12ea:	       rts

000012ec <CstCreateZBufferLayer>:

void CstCreateZBufferLayer (BYTE *zbufferdata, UWORD x, UWORD y, UWORD width, UWORD height)
{
    12ec:	    lea -24(sp),sp
    12f0:	    move.l a6,-(sp)
    12f2:	    movea.l 36(sp),a1
    12f6:	    movea.l 40(sp),a0
    12fa:	    move.l 44(sp),d1
    12fe:	    move.l 48(sp),d0
    1302:	    movea.w a1,a1
    1304:	    move.w a1,12(sp)
    1308:	    movea.w a0,a0
    130a:	    move.w a0,10(sp)
    130e:	    move.w d1,d1
    1310:	    move.w d1,8(sp)
    1314:	    move.w d0,d0
    1316:	    move.w d0,6(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    131a:	    move.l #14675968,22(sp)

  #ifdef EMULATOR
    debug_register_bitmap(zbufferdata, "extrazbufferlayer", 320, 250, 1, 0);
    1322:	    clr.l -(sp)
    1324:	    pea 1 <_start+0x1>
    1328:	    pea fa <copyString+0x42>
    132c:	    pea 140 <decodeFilename+0x28>
    1330:	    pea 190e9 <PutChar+0x149>
    1336:	    move.l 52(sp),-(sp)
    133a:	    jsr 185e6 <debug_register_bitmap>
    1340:	    lea 24(sp),sp
  #endif    

  WaitBlit();
    1344:	    move.l 1e882 <GfxBase>,d0
    134a:	    movea.l d0,a6
    134c:	    jsr -228(a6)
  custom->bltafwm = 0xffff;
    1350:	    movea.l 22(sp),a0
    1354:	    move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    135a:	    movea.l 22(sp),a0
    135e:	    move.w #-1,70(a0)
  custom->bltdmod = 0;  
    1364:	    movea.l 22(sp),a0
    1368:	    move.w #0,102(a0)
  custom->bltcon0 =  0x1f0;
    136e:	    movea.l 22(sp),a0
    1372:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1378:	    movea.l 22(sp),a0
    137c:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata;
    1382:	    movea.l 22(sp),a0
    1386:	    move.l 32(sp),84(a0)
  custom->bltadat = 0;
    138c:	    movea.l 22(sp),a0
    1390:	    move.w #0,116(a0)
  custom->bltsize = 256 * 64 + 20;
    1396:	    movea.l 22(sp),a0
    139a:	    move.w #16404,88(a0)

  WaitBlit();
    13a0:	    move.l 1e882 <GfxBase>,d0
    13a6:	    movea.l d0,a6
    13a8:	    jsr -228(a6)
  UWORD bltxoffset = (x / 16)*2;
    13ac:	    move.w 12(sp),d0
    13b0:	    lsr.w #4,d0
    13b2:	    add.w d0,d0
    13b4:	    move.w d0,20(sp)
  UWORD bltshift = x % 16;
    13b8:	    move.w 12(sp),d0
    13bc:	    andi.w #15,d0
    13c0:	    move.w d0,18(sp)
  UWORD bltafwm = 0xffff >> bltshift;
    13c4:	    moveq #0,d0
    13c6:	    move.w 18(sp),d0
    13ca:	    moveq #0,d1
    13cc:	    not.w d1
    13ce:	    asr.l d0,d1
    13d0:	    move.w d1,16(sp)
  UWORD bltalwm = ~bltafwm; 
    13d4:	    move.w 16(sp),d0
    13d8:	    not.w d0
    13da:	    move.w d0,14(sp)

  UWORD bltwidth = width / 16;
    13de:	    move.w 8(sp),d0
    13e2:	    lsr.w #4,d0
    13e4:	    move.w d0,26(sp)
  if(bltalwm != 0) bltwidth += 1; 
    13e8:	    tst.w 14(sp)
    13ec:	,-- beq.s 13f2 <CstCreateZBufferLayer+0x106>
    13ee:	|   addq.w #1,26(sp)

  custom->bltafwm = bltafwm;
    13f2:	'-> movea.l 22(sp),a0
    13f6:	    move.w 16(sp),68(a0)
  custom->bltalwm = bltalwm;
    13fc:	    movea.l 22(sp),a0
    1400:	    move.w 14(sp),70(a0)
  custom->bltdmod = 40 - bltwidth*2;  
    1406:	    moveq #0,d0
    1408:	    move.w 26(sp),d0
    140c:	    moveq #20,d1
    140e:	    sub.l d0,d1
    1410:	    move.l d1,d0
    1412:	    add.w d0,d0
    1414:	    movea.l 22(sp),a0
    1418:	    move.w d0,102(a0)
  custom->bltcon0 =  0x1f0;
    141c:	    movea.l 22(sp),a0
    1420:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1426:	    movea.l 22(sp),a0
    142a:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata + (y * 40) + bltxoffset;
    1430:	    moveq #0,d1
    1432:	    move.w 10(sp),d1
    1436:	    move.l d1,d0
    1438:	    add.l d0,d0
    143a:	    add.l d0,d0
    143c:	    add.l d1,d0
    143e:	    lsl.l #3,d0
    1440:	    move.l d0,d1
    1442:	    moveq #0,d0
    1444:	    move.w 20(sp),d0
    1448:	    add.l d1,d0
    144a:	    add.l 32(sp),d0
    144e:	    movea.l 22(sp),a0
    1452:	    move.l d0,84(a0)
  custom->bltadat = 0xffff;;
    1456:	    movea.l 22(sp),a0
    145a:	    move.w #-1,116(a0)
  custom->bltsize = height * 64 + bltwidth;
    1460:	    move.w 6(sp),d0
    1464:	    lsl.w #6,d0
    1466:	    add.w 26(sp),d0
    146a:	    movea.l 22(sp),a0
    146e:	    move.w d0,88(a0)

}
    1472:	    nop
    1474:	    movea.l (sp)+,a6
    1476:	    lea 24(sp),sp
    147a:	    rts

0000147c <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    147c:	lea -20(sp),sp
    1480:	movea.l 24(sp),a0
    1484:	move.l 28(sp),d1
    1488:	move.l 32(sp),d0
    148c:	movea.w a0,a0
    148e:	move.w a0,4(sp)
    1492:	move.w d1,d1
    1494:	move.w d1,2(sp)
    1498:	move.w d0,d0
    149a:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    149c:	move.w 2(sp),d0
    14a0:	movea.l 36(sp),a0
    14a4:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    14a6:	move.w 4(sp),d0
    14aa:	lsr.w #1,d0
    14ac:	movea.l 36(sp),a0
    14b0:	addq.l #1,a0
    14b2:	move.l d0,d0
    14b4:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    14b6:	move.w 2(sp),d1
    14ba:	move.w (sp),d0
    14bc:	movea.l 36(sp),a0
    14c0:	addq.l #2,a0
    14c2:	add.b d1,d0
    14c4:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    14c6:	move.w 4(sp),d0
    14ca:	andi.w #1,d0
    14ce:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    14d2:	move.w 2(sp),d0
    14d6:	add.w (sp),d0
    14d8:	move.w d0,d0
    14da:	andi.l #65535,d0
    14e0:	asr.l #7,d0
    14e2:	move.l d0,d0
    14e4:	move.w d0,d1
    14e6:	andi.w #2,d1
    14ea:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    14ee:	moveq #0,d0
    14f0:	move.w 2(sp),d0
    14f4:	asr.l #6,d0
    14f6:	move.l d0,d0
    14f8:	move.w d0,d1
    14fa:	andi.w #4,d1
    14fe:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1502:	move.w 18(sp),d1
    1506:	move.w 16(sp),d0
    150a:	add.b d0,d1
    150c:	move.w 14(sp),d0
    1510:	movea.l 36(sp),a0
    1514:	addq.l #3,a0
    1516:	add.b d1,d0
    1518:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    151a:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1520:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1526:	move.l 10(sp),d0
    152a:	clr.w d0
    152c:	swap d0
    152e:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    1532:	move.l 1e7ac <CstClCursor>,d0
    1538:	movea.l d0,a0
    153a:	addq.l #2,a0
    153c:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    1540:	move.l 1e7ac <CstClCursor>,d0
    1546:	movea.l d0,a0
    1548:	addq.l #6,a0
    154a:	move.w 8(sp),(a0)

}
    154e:	nop
    1550:	lea 20(sp),sp
    1554:	rts

00001556 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1556:	                                                                subq.l #8,sp
    1558:	                                                                movem.l d2-d7/a2-a6,-(sp)
    155c:	                                                                movea.l 56(sp),a3
    1560:	                                                                movea.l 60(sp),a2
    1564:	                                                                move.l 64(sp),d2
    1568:	                                                                move.l 68(sp),d7
    156c:	                                                                movea.w d2,a4
    156e:	                                                                move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1572:	                                                                clr.l -(sp)
    1574:	                                                                pea 1 <_start+0x1>
    1578:	                                                                movea.w 6(a3),a0
    157c:	                                                                move.l a0,-(sp)
    157e:	                                                                movea.w 2(a3),a0
    1582:	                                                                move.l a0,-(sp)
    1584:	                                                                pea 190fb <PutChar+0x15b>
    158a:	                                                                move.l 1e7b0 <CstZBufferResult>,-(sp)
    1590:	                                                                lea 185e6 <debug_register_bitmap>,a5
    1596:	                                                                jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1598:	                                                                clr.l -(sp)
    159a:	                                                                pea 1 <_start+0x1>
    159e:	                                                                movea.w 6(a3),a0
    15a2:	                                                                move.l a0,-(sp)
    15a4:	                                                                move.w 2(a3),d0
    15a8:	                                                                addi.w #16,d0
    15ac:	                                                                movea.w d0,a0
    15ae:	                                                                move.l a0,-(sp)
    15b0:	                                                                pea 19106 <PutChar+0x166>
    15b6:	                                                                move.l 1e7b4 <CstZBufferWork>,-(sp)
    15bc:	                                                                jsr (a5)
  #endif    

  while(zbuffer) 
    15be:	                                                                lea 48(sp),sp
    15c2:	                                                                cmpa.w #0,a2
    15c6:	,-------------------------------------------------------------- beq.w 1a84 <CstDrawZBuffer+0x52e>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    15ca:	|                                                               move.w d2,48(sp)
    15ce:	|                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15d0:	|                                                               movea.l 4(a3),a5
  WORD zbufferset = 0;
    15d4:	|                                                               clr.w 46(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15d8:	|                       ,-------------------------------------> move.w a5,d3
    15da:	|                       |                                       add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    15dc:	|                       |                                       andi.l #65535,d3
    15e2:	|                       |                                       cmp.l 16(a2),d3
    15e6:	|        ,--------------|-------------------------------------- bge.w 178c <CstDrawZBuffer+0x236>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15ea:	|        |              |                                       move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ee:	|        |              |                                       move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15f2:	|        |              |                                       move.w d6,d0
    15f4:	|        |              |                                       add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15f8:	|        |              |                                       move.w 6(a2),d4
    15fc:	|        |              |                                       add.w d5,d4
    {    
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15fe:	|        |              |                                       cmp.w a4,d6
    1600:	|        |           ,--|-------------------------------------- bge.w 1918 <CstDrawZBuffer+0x3c2>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1604:	|        |           |  |                                       cmp.w a4,d0
    1606:	|        +-----------|--|-------------------------------------- ble.w 178c <CstDrawZBuffer+0x236>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    160a:	|        |           |  |                                       move.w 50(sp),d0
    160e:	|        |           |  |                                       cmp.w d0,d5
    1610:	|        |     ,-----|--|-------------------------------------- blt.w 1a64 <CstDrawZBuffer+0x50e>
    1614:	|        |     |     |  |                                       movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1616:	|        |     |     |  |                                       cmpa.l d3,a0
    1618:	|        +-----|-----|--|-------------------------------------- bge.w 178c <CstDrawZBuffer+0x236>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    161c:	|        |     |     |  |                                       move.w 48(sp),d0
    1620:	|        |     |     |  |                                       sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1622:	|        |     |     |  |                                       move.w d0,d6
    1624:	|        |     |     |  |                                       andi.w #15,d6
    1628:	|        |     |     |  |                                       movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    162a:	|        |     |     |  |                                       tst.l d2
    162c:	|        |  ,--|-----|--|-------------------------------------- blt.w 17ae <CstDrawZBuffer+0x258>
    1630:	|        |  |  |  ,--|--|-------------------------------------> asr.l #4,d2
    1632:	|        |  |  |  |  |  |                                       add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1634:	|        |  |  |  |  |  |                                       move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
          custom->bltalwm = 0xffff;                      
    163c:	|        |  |  |  |  |  |                                       move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
          custom->bltcon1 = 0;          
    1644:	|        |  |  |  |  |  |                                       move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    164c:	|        |  |  |  |  |  |                                       lea 1e882 <GfxBase>,a0
    1652:	|        |  |  |  |  |  |                                       movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1654:	|        |  |  |  |  |  |                                       lsr.w #4,d0
    1656:	|        |  |  |  |  |  |                                       move.w d0,d6
    1658:	|        |  |  |  |  |  |                                       add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    165a:	|        |  |  |  |  |  |                                       andi.l #65535,d6
    1660:	|        |  |  |  |  |  |                                       add.l 20(a2),d6
          if (xdiffrest) {
    1664:	|        |  |  |  |  |  |                                       clr.w d0
    1666:	|        |  |  |  |  |  |                                       cmp.w a5,d0
    1668:	|        |  |  |  |  |  |        ,----------------------------- beq.w 17ee <CstDrawZBuffer+0x298>
            bytewidth += 2; 
    166c:	|        |  |  |  |  |  |        |        ,-------------------> addq.w #2,d2
            WaitBlit();   
    166e:	|        |  |  |  |  |  |        |        |                     jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1672:	|        |  |  |  |  |  |        |        |                     move.l 1e7b4 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    167c:	|        |  |  |  |  |  |        |        |                     move.w a5,d0
    167e:	|        |  |  |  |  |  |        |        |                     moveq #12,d1
    1680:	|        |  |  |  |  |  |        |        |                     lsl.w d1,d0
    1682:	|        |  |  |  |  |  |        |        |                     move.w #2544,d1
    1686:	|        |  |  |  |  |  |        |        |                     sub.w d0,d1
    1688:	|        |  |  |  |  |  |        |        |                     move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    168e:	|        |  |  |  |  |  |        |        |                     move.l (a2),d0
    1690:	|        |  |  |  |  |  |        |        |                     move.l d0,d1
    1692:	|  ,-----|--|--|--|--|--|--------|--------|-------------------- bmi.w 1b36 <CstDrawZBuffer+0x5e0>
    1696:	|  |     |  |  |  |  |  |        |        |                     asr.l #3,d1
    1698:	|  |     |  |  |  |  |  |        |        |                     sub.w d2,d1
    169a:	|  |     |  |  |  |  |  |        |        |                     move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
            custom->bltdmod = 0;                                                            
    16a0:	|  |     |  |  |  |  |  |        |        |                     move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    16a8:	|  |  ,--|--|--|--|--|--|--------|--------|-------------------> move.w d7,d1
    16aa:	|  |  |  |  |  |  |  |  |        |        |                     sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    16ac:	|  |  |  |  |  |  |  |  |        |        |                     movea.w d4,a0
    16ae:	|  |  |  |  |  |  |  |  |        |        |                     cmpa.l d3,a0
    16b0:	|  |  |  |  |  |  |  |  |        |     ,--|-------------------- ble.w 182e <CstDrawZBuffer+0x2d8>
          height = sprite->height;
    16b4:	|  |  |  |  |  |  |  |  |        |     |  |        ,----------> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    16b8:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.l d0,-(sp)
    16ba:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.w d1,-(sp)
    16bc:	|  |  |  |  |  |  |  |  |        |     |  |        |            clr.w -(sp)
    16be:	|  |  |  |  |  |  |  |  |        |     |  |        |            jsr 18e8a <__mulsi3>
    16c4:	|  |  |  |  |  |  |  |  |        |     |  |        |            addq.l #8,sp
    16c6:	|  |  |  |  |  |  |  |  |        |     |  |        |            tst.l d0
    16c8:	|  |  |  |  |  |  |  |  |        |     |  |  ,-----|----------- blt.w 1844 <CstDrawZBuffer+0x2ee>
    16cc:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  ,-------> asr.l #3,d0
    16ce:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.l d6,d0
    16d0:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
        UWORD bltsize =  height*64+bytewidth/2;          
    16d6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsl.w #6,d4
    16d8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    16da:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.w d2,d4
    16dc:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
       
        WaitBlit();
    16e2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lea 1e882 <GfxBase>,a0
    16e8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l (a0),a6
    16ea:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ee:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
        custom->bltalwm = 0xffff;
    16f6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
        custom->bltamod = 2;
    16fe:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
        custom->bltbmod = 0;
    1706:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb193d>
        custom->bltdmod = 0;
    170e:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1716:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
        custom->bltcon1 = 0;        
    171e:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1726:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l 1e7b4 <CstZBufferWork>,d0
    172c:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         addq.l #2,d0
    172e:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>

        if (zbufferset == 0) {
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1734:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l (a3),d2
    1736:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l 4(a3),a5
        if (zbufferset == 0) {
    173a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         tst.w 46(sp)
    173e:	|  |  |  |  |  |  |  |  |        |  ,--|--|--|-----|--|-------- bne.w 18bc <CstDrawZBuffer+0x366>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1742:	|  |  |  |  |  |  |  |  |        |  |  |  |  |  ,--|--|-------> move.l d2,d0
    1744:	|  |  |  |  |  |  |  |  |  ,-----|--|--|--|--|--|--|--|-------- bmi.w 18f2 <CstDrawZBuffer+0x39c>
    1748:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         asr.l #3,d0
    174a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l a5,-(sp)
    174c:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,-(sp)
    174e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         jsr 18e8a <__mulsi3>
    1754:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         addq.l #8,sp
    1756:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,d1
    1758:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    175a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d1,d1
    175c:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    175e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l 24(a3),d1
    1762:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
        }
        else {
          custom->bltbpt = (APTR) CstZBufferResult;
        }
        custom->bltdpt = (APTR) CstZBufferResult;
    1768:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|-------> move.l 1e7b0 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.w a5,d1
    1774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         lsl.w #6,d1
    1776:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d2,d0
    1778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----- bmi.w 18da <CstDrawZBuffer+0x384>
    177c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,-> asr.l #4,d0
    177e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
        zbufferset = 1;
    1786:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w #1,46(sp)
      }
    }
    zbuffer = zbuffer->nextPanel;
    178c:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1790:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1794:	|  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|-- bne.w 15d8 <CstDrawZBuffer+0x82>
  }
  
  if(zbufferset == 0)
    1798:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   tst.w 46(sp)
    179c:	+--|--|--|--|--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-- beq.w 1a84 <CstDrawZBuffer+0x52e>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    17a0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.l 1e7b0 <CstZBufferResult>,d0

}
    17a6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    17aa:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    17ac:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    17ae:	|  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    17b0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    17b2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    17b4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    17b6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
          custom->bltalwm = 0xffff;                      
    17be:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
          custom->bltcon1 = 0;          
    17c6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>
            WaitBlit();   
    17ce:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lea 1e882 <GfxBase>,a0
    17d4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    17d6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    17d8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    17da:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    17dc:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    17e2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    17e6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   clr.w d0
    17e8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    17ea:	|  |  |  |  |  |  |  |     |  |  |  |  |  '--|--|--|--|--|--|-- bne.w 166c <CstDrawZBuffer+0x116>
            WaitBlit();         
    17ee:	|  |  |  |  |  |  |  |     |  |  '--|--|-----|--|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17f2:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l 1e7b4 <CstZBufferWork>,d0
    17f8:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   addq.l #2,d0
    17fa:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
            custom->bltcon0 = 4096 + 0x9f0;              
    1800:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1808:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l (a2),d0
    180a:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,d1
    180c:	|  |  |  |  |  |  |  |  ,--|--|-----|--|-----|--|--|--|--|--|-- bmi.w 1b1e <CstDrawZBuffer+0x5c8>
    1810:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   asr.l #3,d1
    1812:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   sub.w d2,d1
    1814:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
            custom->bltdmod = 2;                                                            
    181a:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1822:	|  |  |  |  |  |  |  |  |  |  |  ,--|--|-----|--|--|--|--|--|-> move.w d7,d1
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   movea.w d4,a0
    1828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   cmpa.l d3,a0
    182a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|-- bgt.w 16b4 <CstDrawZBuffer+0x15e>
          height = zbuffery2oncanvas - spritey1oncanvas;
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |  '-----|--|-----|--|--|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.l d0,-(sp)
    1832:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.w d1,-(sp)
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   clr.w -(sp)
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   jsr 18e8a <__mulsi3>
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   addq.l #8,sp
    183e:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   tst.l d0
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     '--|--|-- bge.w 16cc <CstDrawZBuffer+0x176>
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |        '--|--------|--|-> addq.l #7,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   asr.l #3,d0
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.l d6,d0
    184a:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
        UWORD bltsize =  height*64+bytewidth/2;          
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsl.w #6,d4
    1852:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.w d2,d4
    1856:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
        WaitBlit();
    185c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lea 1e882 <GfxBase>,a0
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l (a0),a6
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   jsr -228(a6)
        custom->bltafwm = 0xffff;
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
        custom->bltalwm = 0xffff;
    1870:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
        custom->bltamod = 2;
    1878:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
        custom->bltbmod = 0;
    1880:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb193d>
        custom->bltdmod = 0;
    1888:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1890:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
        custom->bltcon1 = 0;        
    1898:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    18a0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l 1e7b4 <CstZBufferWork>,d0
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   addq.l #2,d0
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18ae:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l (a3),d2
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l 4(a3),a5
        if (zbufferset == 0) {
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   tst.w 46(sp)
    18b8:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--------|--|-- beq.w 1742 <CstDrawZBuffer+0x1ec>
          custom->bltbpt = (APTR) CstZBufferResult;
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  '--------------------|--|-> move.l 1e7b0 <CstZBufferResult>,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
        custom->bltdpt = (APTR) CstZBufferResult;
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l 1e7b0 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.w a5,d1
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   lsl.w #6,d1
    18d4:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l d2,d0
    18d6:	|  |  |  |  |  |  |  |  |  |  |  |                       |  '-- bpl.w 177c <CstDrawZBuffer+0x226>
    18da:	|  |  |  |  |  |  |  |  |  |  |  |                       '----> moveq #15,d0
    18dc:	|  |  |  |  |  |  |  |  |  |  |  |                              add.l d2,d0
    18de:	|  |  |  |  |  |  |  |  |  |  |  |                              asr.l #4,d0
    18e0:	|  |  |  |  |  |  |  |  |  |  |  |                              add.w d1,d0
    18e2:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
        zbufferset = 1;
    18e8:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w #1,46(sp)
    18ee:	|  |  |  +--|--|--|--|--|--|--|--|----------------------------- bra.w 178c <CstDrawZBuffer+0x236>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18f2:	|  |  |  |  |  |  |  |  |  '--|--|----------------------------> addq.l #7,d0
    18f4:	|  |  |  |  |  |  |  |  |     |  |                              asr.l #3,d0
    18f6:	|  |  |  |  |  |  |  |  |     |  |                              move.l a5,-(sp)
    18f8:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,-(sp)
    18fa:	|  |  |  |  |  |  |  |  |     |  |                              jsr 18e8a <__mulsi3>
    1900:	|  |  |  |  |  |  |  |  |     |  |                              addq.l #8,sp
    1902:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,d1
    1904:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    1906:	|  |  |  |  |  |  |  |  |     |  |                              add.l d1,d1
    1908:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    190a:	|  |  |  |  |  |  |  |  |     |  |                              add.l 24(a3),d1
    190e:	|  |  |  |  |  |  |  |  |     |  |                              move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    1914:	|  |  |  |  |  |  |  |  |     '--|----------------------------- bra.w 1768 <CstDrawZBuffer+0x212>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1918:	|  |  |  |  |  |  |  '--|--------|----------------------------> move.w 48(sp),d1
    191c:	|  |  |  |  |  |  |     |        |                              add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    191e:	|  |  |  |  |  |  |     |        |                              andi.l #65535,d1
    1924:	|  |  |  |  |  |  |     |        |                              movea.l d1,a6
    1926:	|  |  |  |  |  |  |     |        |                              movea.w d6,a1
    1928:	|  |  |  |  |  |  |     |        |                              cmpa.l d1,a1
    192a:	|  |  |  +--|--|--|-----|--------|----------------------------- bge.w 178c <CstDrawZBuffer+0x236>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    192e:	|  |  |  |  |  |  |     |        |                              move.w 50(sp),d1
    1932:	|  |  |  |  |  |  |     |        |                              cmp.w d1,d5
    1934:	|  |  |  |  |  |  |     |        |        ,-------------------- bge.w 1a40 <CstDrawZBuffer+0x4ea>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1938:	|  |  |  |  |  |  |     |        |        |                     cmp.w 50(sp),d4
    193c:	|  |  |  +--|--|--|-----|--------|--------|-------------------- ble.w 178c <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1940:	|  |  |  |  |  |  |     |        |        |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1944:	|  |  |  |  |  |  |     |        |        |                     move.w d6,d1
    1946:	|  |  |  |  |  |  |     |        |        |                     lsr.w #4,d1
    1948:	|  |  |  |  |  |  |     |        |        |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    194a:	|  |  |  |  |  |  |     |        |        |                     andi.w #15,d6
    194e:	|  |  |  |  |  |  |     |        |        |                     move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1952:	|  |  |  |  |  |  |     |        |        |                     tst.l d2
    1954:	|  |  |  |  |  |  |     |        |     ,--|-------------------- blt.w 19de <CstDrawZBuffer+0x488>
    1958:	|  |  |  |  |  |  |     |        |     |  |  ,----------------> asr.l #4,d2
    195a:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.l #1,d2
    195c:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    195e:	|  |  |  |  |  |  |     |        |     |  |  |                  movea.w d0,a0
    1960:	|  |  |  |  |  |  |     |        |     |  |  |                  cmpa.l a0,a6
    1962:	|  |  |  |  |  |  |     |        |     |  |  |  ,-------------- bge.w 19f0 <CstDrawZBuffer+0x49a>
            WaitBlit();  
    1966:	|  |  |  |  |  |  |     |        |     |  |  |  |  ,----------> lea 1e882 <GfxBase>,a0
    196c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l (a0),a6
    196e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1972:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
            custom->bltalwm = 0xffff;          
    197a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
            custom->bltdpt = CstZBufferWork;        
    1982:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l 1e7b4 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
            custom->bltcon1 = 0;               
    198c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1994:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1998:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l (a2),d0
    199a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l d0,d1
    199c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     ,----- bmi.s 1a08 <CstDrawZBuffer+0x4b2>
    199e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      asr.l #3,d1
    19a0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      movea.w d1,a6
    19a2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    19a4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      tst.w 44(sp)
    19a8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  ,--|----- beq.s 1a16 <CstDrawZBuffer+0x4c0>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    19aa:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  ,-> move.w 44(sp),d6
    19ae:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   moveq #12,d1
    19b0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   lsl.w d1,d6
    19b2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addi.w #2544,d6
    19b6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19bc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
              custom->bltdmod = 0;                                                            
    19c2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
              xdiffbyte += 2;                 
    19ca:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a5,d1
    19cc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.w #1,d1
    19ce:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19d0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   andi.l #65535,d1
    19d6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.l a0,d6
    19d8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   sub.l d1,d6
    19da:	|  |  +--|--|--|--|-----|--------|-----|--|--|--|--|--|--|--|-- bra.w 16a8 <CstDrawZBuffer+0x152>
          bytewidth = (sprite->width/16)*2 + 2;
    19de:	|  |  |  |  |  |  |     |        |     >--|--|--|--|--|--|--|-> moveq #15,d6
    19e0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.l d6,d2
    19e2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   asr.l #4,d2
    19e4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.l #1,d2
    19e6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19e8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   movea.w d0,a0
    19ea:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   cmpa.l a0,a6
    19ec:	|  |  |  |  |  |  |     |        |     |  |  |  |  '--|--|--|-- blt.w 1966 <CstDrawZBuffer+0x410>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    19f0:	|  |  |  |  |  |  |     |        |     |  |  |  '-----|--|--|-> pea 19110 <PutChar+0x170>
    19f6:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   jsr 184fe <KPrintF>
              return FALSE;
    19fc:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #4,sp
    19fe:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   moveq #0,d0
}
    1a00:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a04:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #8,sp
    1a06:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a08:	|  |  |  |  |  |  |     |        |     |  |  |        |  '--|-> addq.l #7,d1
    1a0a:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   asr.l #3,d1
    1a0c:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   movea.w d1,a6
    1a0e:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a10:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   tst.w 44(sp)
    1a14:	|  |  |  |  |  |  |     |        |     |  |  |        |     '-- bne.s 19aa <CstDrawZBuffer+0x454>
              custom->bltcon0 = 0x9f0;              
    1a16:	|  |  |  |  |  |  |     |        |     |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a1e:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
              custom->bltdmod = 0;                                                            
    1a24:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
              xdiffbyte += 2;                 
    1a2c:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a5,d1
    1a2e:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.w #1,d1
    1a30:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a32:	|  |  |  |  |  |  |     |        |     |  |  |                  andi.l #65535,d1
    1a38:	|  |  |  |  |  |  |     |        |     |  |  |                  move.l a0,d6
    1a3a:	|  |  |  |  |  |  |     |        |     |  |  |                  sub.l d1,d6
    1a3c:	|  |  +--|--|--|--|-----|--------|-----|--|--|----------------- bra.w 16a8 <CstDrawZBuffer+0x152>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1a40:	|  |  |  |  |  |  |     |        |     |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a42:	|  |  |  |  |  |  |     |        |     |     |                  cmpa.l d3,a0
    1a44:	|  |  |  +--|--|--|-----|--------|-----|-----|----------------- bge.w 178c <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1a48:	|  |  |  |  |  |  |     |        |     |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1a4c:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,d1
    1a4e:	|  |  |  |  |  |  |     |        |     |     |                  lsr.w #4,d1
    1a50:	|  |  |  |  |  |  |     |        |     |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1a52:	|  |  |  |  |  |  |     |        |     |     |                  andi.w #15,d6
    1a56:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1a5a:	|  |  |  |  |  |  |     |        |     |     |                  tst.l d2
    1a5c:	|  |  |  |  |  |  |     |        |     |     '----------------- bge.w 1958 <CstDrawZBuffer+0x402>
    1a60:	|  |  |  |  |  |  |     |        |     '----------------------- bra.w 19de <CstDrawZBuffer+0x488>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a64:	|  |  |  |  |  '--|-----|--------|----------------------------> cmp.w 50(sp),d4
    1a68:	|  |  |  '--|-----|-----|--------|----------------------------- ble.w 178c <CstDrawZBuffer+0x236>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a6c:	|  |  |     |     |     |        |                              move.w 48(sp),d0
    1a70:	|  |  |     |     |     |        |                              sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a72:	|  |  |     |     |     |        |                              move.w d0,d6
    1a74:	|  |  |     |     |     |        |                              andi.w #15,d6
    1a78:	|  |  |     |     |     |        |                              movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a7a:	|  |  |     |     |     |        |                              tst.l d2
    1a7c:	|  |  |     |     '-----|--------|----------------------------- bge.w 1630 <CstDrawZBuffer+0xda>
    1a80:	|  |  |     '-----------|--------|----------------------------- bra.w 17ae <CstDrawZBuffer+0x258>
    WaitBlit();
    1a84:	'--|--|-----------------|--------|----------------------------> movea.l 1e882 <GfxBase>,a6
    1a8a:	   |  |                 |        |                              jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a8e:	   |  |                 |        |                              move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
    custom->bltalwm = 0xffff;
    1a96:	   |  |                 |        |                              move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
    custom->bltamod = 0;
    1a9e:	   |  |                 |        |                              move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
    custom->bltbmod = 0;
    1aa6:	   |  |                 |        |                              move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb193d>
    custom->bltcmod = 0;
    1aae:	   |  |                 |        |                              move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb193b>
    custom->bltdmod = 0;
    1ab6:	   |  |                 |        |                              move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1abe:	   |  |                 |        |                              move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
    custom->bltcon1 = 0;        
    1ac6:	   |  |                 |        |                              move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1ace:	   |  |                 |        |                              move.l (a3),d2
    1ad0:	   |  |                 |        |                              move.l 4(a3),d3
    1ad4:	   |  |                 |        |                              move.l d2,d0
    1ad6:	   |  |                 |        |                    ,-------- bmi.w 1b5e <CstDrawZBuffer+0x608>
    1ada:	   |  |                 |        |                    |         asr.l #3,d0
    1adc:	   |  |                 |        |                    |         move.l d3,-(sp)
    1ade:	   |  |                 |        |                    |         move.l d0,-(sp)
    1ae0:	   |  |                 |        |                    |         jsr 18e8a <__mulsi3>
    1ae6:	   |  |                 |        |                    |         addq.l #8,sp
    1ae8:	   |  |                 |        |                    |         move.l d0,d1
    1aea:	   |  |                 |        |                    |         add.l d0,d1
    1aec:	   |  |                 |        |                    |         add.l d1,d1
    1aee:	   |  |                 |        |                    |         add.l d1,d0
    1af0:	   |  |                 |        |                    |         add.l 24(a3),d0
    1af4:	   |  |                 |        |                    |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltdpt = (APTR) CstZBufferResult;
    1afa:	   |  |                 |        |                    |         move.l 1e7b0 <CstZBufferResult>,d0
    1b00:	   |  |                 |        |                    |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b06:	   |  |                 |        |                    |         lsl.w #6,d3
    1b08:	   |  |                 |        |                    |         tst.l d2
    1b0a:	   |  |                 |        |                 ,--|-------- blt.s 1b4e <CstDrawZBuffer+0x5f8>
    1b0c:	   |  |                 |        |                 |  |  ,----> asr.l #4,d2
    1b0e:	   |  |                 |        |                 |  |  |      add.w d2,d3
    1b10:	   |  |                 |        |                 |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
}
    1b16:	   |  |                 |        |                 |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b1a:	   |  |                 |        |                 |  |  |  |   addq.l #8,sp
    1b1c:	   |  |                 |        |                 |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b1e:	   |  |                 '--------|-----------------|--|--|--|-> addq.l #7,d1
    1b20:	   |  |                          |                 |  |  |  |   asr.l #3,d1
    1b22:	   |  |                          |                 |  |  |  |   sub.w d2,d1
    1b24:	   |  |                          |                 |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
            custom->bltdmod = 2;                                                            
    1b2a:	   |  |                          |                 |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
    1b32:	   |  |                          '-----------------|--|--|--|-- bra.w 1822 <CstDrawZBuffer+0x2cc>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b36:	   '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1b38:	      |                                            |  |  |  |   asr.l #3,d1
    1b3a:	      |                                            |  |  |  |   sub.w d2,d1
    1b3c:	      |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
            custom->bltdmod = 0;                                                            
    1b42:	      |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
    1b4a:	      '--------------------------------------------|--|--|--|-- bra.w 16a8 <CstDrawZBuffer+0x152>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b4e:	                                                   >--|--|--|-> moveq #15,d1
    1b50:	                                                   |  |  |  |   add.l d1,d2
    1b52:	                                                   |  |  |  |   asr.l #4,d2
    1b54:	                                                   |  |  |  |   add.w d2,d3
    1b56:	                                                   |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
  return CstZBufferResult;
    1b5c:	                                                   |  |  |  '-- bra.s 1b16 <CstDrawZBuffer+0x5c0>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b5e:	                                                   |  '--|----> addq.l #7,d0
    1b60:	                                                   |     |      asr.l #3,d0
    1b62:	                                                   |     |      move.l d3,-(sp)
    1b64:	                                                   |     |      move.l d0,-(sp)
    1b66:	                                                   |     |      jsr 18e8a <__mulsi3>
    1b6c:	                                                   |     |      addq.l #8,sp
    1b6e:	                                                   |     |      move.l d0,d1
    1b70:	                                                   |     |      add.l d0,d1
    1b72:	                                                   |     |      add.l d1,d1
    1b74:	                                                   |     |      add.l d1,d0
    1b76:	                                                   |     |      add.l 24(a3),d0
    1b7a:	                                                   |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b80:	                                                   |     |      move.l 1e7b0 <CstZBufferResult>,d0
    1b86:	                                                   |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b8c:	                                                   |     |      lsl.w #6,d3
    1b8e:	                                                   |     |      tst.l d2
    1b90:	                                                   |     '----- bge.w 1b0c <CstDrawZBuffer+0x5b6>
    1b94:	                                                   '----------- bra.s 1b4e <CstDrawZBuffer+0x5f8>

00001b96 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b96:	    lea -20(sp),sp
    1b9a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b9c:	    move.l 1e798 <CstDrawBuffer>,d0
    1ba2:	,-- beq.s 1bbc <CstFreeBuffer+0x26>
    1ba4:	|   move.l 1e798 <CstDrawBuffer>,20(sp)
    1bac:	|   move.l 1e876 <SysBase>,d0
    1bb2:	|   movea.l d0,a6
    1bb4:	|   movea.l 20(sp),a1
    1bb8:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1bbc:	'-> move.l 1e794 <CstViewBuffer>,d0
    1bc2:	,-- beq.s 1bdc <CstFreeBuffer+0x46>
    1bc4:	|   move.l 1e794 <CstViewBuffer>,16(sp)
    1bcc:	|   move.l 1e876 <SysBase>,d0
    1bd2:	|   movea.l d0,a6
    1bd4:	|   movea.l 16(sp),a1
    1bd8:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1bdc:	'-> move.l 1e790 <CstCopperList>,d0
    1be2:	,-- beq.s 1bfc <CstFreeBuffer+0x66>
    1be4:	|   move.l 1e790 <CstCopperList>,12(sp)
    1bec:	|   move.l 1e876 <SysBase>,d0
    1bf2:	|   movea.l d0,a6
    1bf4:	|   movea.l 12(sp),a1
    1bf8:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bfc:	'-> move.l 1e788 <CstBackDrop>,d0
    1c02:	,-- beq.s 1c1c <CstFreeBuffer+0x86>
    1c04:	|   move.l 1e788 <CstBackDrop>,8(sp)
    1c0c:	|   move.l 1e876 <SysBase>,d0
    1c12:	|   movea.l d0,a6
    1c14:	|   movea.l 8(sp),a1
    1c18:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c1c:	'-> move.l 1e78c <CstBackDropBackup>,d0
    1c22:	,-- beq.s 1c3c <CstFreeBuffer+0xa6>
    1c24:	|   move.l 1e78c <CstBackDropBackup>,4(sp)
    1c2c:	|   move.l 1e876 <SysBase>,d0
    1c32:	|   movea.l d0,a6
    1c34:	|   movea.l 4(sp),a1
    1c38:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c3c:	'-> clr.l 1e798 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c42:	    clr.l 1e794 <CstViewBuffer>
  CstCopperList = NULL;
    1c48:	    clr.l 1e790 <CstCopperList>
  CstBackDrop = NULL;
    1c4e:	    clr.l 1e788 <CstBackDrop>

}
    1c54:	    nop
    1c56:	    movea.l (sp)+,a6
    1c58:	    lea 20(sp),sp
    1c5c:	    rts

00001c5e <CstFreeze>:



void CstFreeze( ) {
    1c5e:	       lea -64(sp),sp
    1c62:	       move.l a6,-(sp)
    1c64:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c66:	       pea 19160 <PutChar+0x1c0>
    1c6c:	       jsr 184fe <KPrintF>
    1c72:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c74:	       move.l 1e7bc <winWidth>,d0
    1c7a:	       lsr.l #3,d0
    1c7c:	       move.l d0,d1
    1c7e:	       move.l 1e7c0 <winHeight>,d0
    1c84:	       move.l d0,d0
    1c86:	       muls.w d0,d1
    1c88:	       move.w d1,d0
    1c8a:	       add.w d0,d0
    1c8c:	       add.w d0,d0
    1c8e:	       move.w d0,d2
    1c90:	       add.w d1,d2
    1c92:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c96:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c9e:	       moveq #0,d0
    1ca0:	       move.w 54(sp),d0
    1ca4:	       move.l d0,46(sp)
    1ca8:	       clr.l 42(sp)
    1cac:	       move.l 1e876 <SysBase>,d0
    1cb2:	       movea.l d0,a6
    1cb4:	       move.l 46(sp),d0
    1cb8:	       move.l 42(sp),d1
    1cbc:	       jsr -684(a6)
    1cc0:	       move.l d0,38(sp)
    1cc4:	       move.l 38(sp),d0
    1cc8:	       move.l d0,1e78c <CstBackDropBackup>
  if( !CstBackDropBackup)
    1cce:	       move.l 1e78c <CstBackDropBackup>,d0
    1cd4:	   ,-- bne.s 1ce4 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1cd6:	   |   pea 19187 <PutChar+0x1e7>
    1cdc:	   |   jsr 184fe <KPrintF>
    1ce2:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1ce4:	   '-> move.l 1e7c0 <winHeight>,d0
    1cea:	       move.l d0,d0
    1cec:	       movea.w d0,a1
    1cee:	       move.l 1e7bc <winWidth>,d0
    1cf4:	       move.l d0,d0
    1cf6:	       movea.w d0,a0
    1cf8:	       move.l 1e78c <CstBackDropBackup>,d0
    1cfe:	       clr.l -(sp)
    1d00:	       pea 5 <_start+0x5>
    1d04:	       move.l a1,-(sp)
    1d06:	       move.l a0,-(sp)
    1d08:	       pea 191bf <PutChar+0x21f>
    1d0e:	       move.l d0,-(sp)
    1d10:	       jsr 185e6 <debug_register_bitmap>
    1d16:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d1a:	       move.l 1e788 <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d22:	       move.l 1e78c <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d2a:	       clr.l 60(sp)
    1d2e:	   ,-- bra.s 1d54 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d30:	,--|-> move.l 68(sp),d1
    1d34:	|  |   move.l d1,d0
    1d36:	|  |   addq.l #4,d0
    1d38:	|  |   move.l d0,68(sp)
    1d3c:	|  |   move.l 64(sp),d0
    1d40:	|  |   move.l d0,d2
    1d42:	|  |   addq.l #4,d2
    1d44:	|  |   move.l d2,64(sp)
    1d48:	|  |   movea.l d1,a0
    1d4a:	|  |   move.l (a0),d1
    1d4c:	|  |   movea.l d0,a0
    1d4e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d50:	|  |   addq.l #1,60(sp)
    1d54:	|  '-> move.w 54(sp),d0
    1d58:	|      lsr.w #2,d0
    1d5a:	|      move.w d0,d0
    1d5c:	|      andi.l #65535,d0
    1d62:	|      cmp.l 60(sp),d0
    1d66:	'----- bgt.s 1d30 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d68:	       move.l 1e794 <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1d70:	       move.l 1e788 <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1d78:	       clr.l 56(sp)
    1d7c:	   ,-- bra.s 1da2 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d7e:	,--|-> move.l 68(sp),d1
    1d82:	|  |   move.l d1,d0
    1d84:	|  |   addq.l #4,d0
    1d86:	|  |   move.l d0,68(sp)
    1d8a:	|  |   move.l 64(sp),d0
    1d8e:	|  |   move.l d0,d2
    1d90:	|  |   addq.l #4,d2
    1d92:	|  |   move.l d2,64(sp)
    1d96:	|  |   movea.l d1,a0
    1d98:	|  |   move.l (a0),d1
    1d9a:	|  |   movea.l d0,a0
    1d9c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d9e:	|  |   addq.l #1,56(sp)
    1da2:	|  '-> move.w 54(sp),d0
    1da6:	|      lsr.w #2,d0
    1da8:	|      move.w d0,d0
    1daa:	|      andi.l #65535,d0
    1db0:	|      cmp.l 56(sp),d0
    1db4:	'----- bgt.s 1d7e <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1db6:	       move.l 1e7a0 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1dbe:	       moveq #20,d0
    1dc0:	       move.l d0,30(sp)
    1dc4:	       clr.l 26(sp)
    1dc8:	       move.l 1e876 <SysBase>,d0
    1dce:	       movea.l d0,a6
    1dd0:	       move.l 30(sp),d0
    1dd4:	       move.l 26(sp),d1
    1dd8:	       jsr -684(a6)
    1ddc:	       move.l d0,22(sp)
    1de0:	       move.l 22(sp),d0
    1de4:	       move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1dea:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1df0:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1df6:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1dfc:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1dfe:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e04:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e08:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e0e:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e12:	       move.l 1e7bc <winWidth>,d0
    1e18:	       lsr.l #4,d0
    1e1a:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e20:	       move.l d0,d0
    1e22:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e26:	       move.l 1e7c0 <winHeight>,d0
    1e2c:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e32:	       move.l d0,d0
    1e34:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1e38:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e3e:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1e42:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    1e48:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1e4c:	       move.l 1e79c <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e54:	       moveq #20,d2
    1e56:	       move.l d2,18(sp)
    1e5a:	       clr.l 14(sp)
    1e5e:	       move.l 1e876 <SysBase>,d0
    1e64:	       movea.l d0,a6
    1e66:	       move.l 18(sp),d0
    1e6a:	       move.l 14(sp),d1
    1e6e:	       jsr -684(a6)
    1e72:	       move.l d0,10(sp)
    1e76:	       move.l 10(sp),d0
    1e7a:	       move.l d0,1e79c <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1e80:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1e86:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1e8c:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1e92:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1e94:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1e9a:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1e9e:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1ea4:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1ea8:	       move.l 1e7bc <winWidth>,d0
    1eae:	       lsr.l #4,d0
    1eb0:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1eb6:	       move.l d0,d0
    1eb8:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1ebc:	       move.l 1e7c0 <winHeight>,d0
    1ec2:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1ec8:	       move.l d0,d0
    1eca:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1ece:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1ed4:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ed8:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    1ede:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1ee2:	       pea 191ce <PutChar+0x22e>
    1ee8:	       jsr 184fe <KPrintF>
    1eee:	       addq.l #4,sp

}  
    1ef0:	       nop
    1ef2:	       move.l (sp)+,d2
    1ef4:	       movea.l (sp)+,a6
    1ef6:	       lea 64(sp),sp
    1efa:	       rts

00001efc <CstLoadBackdrop>:

  AddIntServer( INTB_COPER, CstVbint); 

}

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1efc:	             lea -172(sp),sp
    1f00:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f04:	             pea 191f0 <PutChar+0x250>
    1f0a:	             jsr 184fe <KPrintF>
    1f10:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f12:	             move.l 192(sp),-(sp)
    1f16:	             jsr 6bc <get2bytes>
    1f1c:	             addq.l #4,sp
    1f1e:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f22:	             move.l 192(sp),-(sp)
    1f26:	             jsr 6bc <get2bytes>
    1f2c:	             addq.l #4,sp
    1f2e:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f32:	             move.w 162(sp),d0
    1f36:	             lsr.w #3,d0
    1f38:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f3c:	             move.w 158(sp),d0
    1f40:	             lsr.w #1,d0
    1f42:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f46:	             move.l 1e7bc <winWidth>,d0
    1f4c:	             lsr.l #3,d0
    1f4e:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f52:	             move.w 158(sp),d0
    1f56:	             muls.w 160(sp),d0
    1f5a:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f5e:	             move.w 152(sp),d1
    1f62:	             move.w d1,d0
    1f64:	             add.w d0,d0
    1f66:	             add.w d0,d0
    1f68:	             move.w d0,d2
    1f6a:	             add.w d1,d2
    1f6c:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f70:	             move.w 1e782 <CstPaletteLoaded>,d0
    1f76:	,----------- bne.w 2010 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f7a:	|            move.w #384,148(sp)

    if(CstPalette) {
    1f80:	|            move.l 1e7a8 <CstPalette>,d0
    1f86:	|        ,-- beq.s 1fa0 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f88:	|        |   move.l 1e7a8 <CstPalette>,144(sp)
    1f90:	|        |   move.l 1e876 <SysBase>,d0
    1f96:	|        |   movea.l d0,a6
    1f98:	|        |   movea.l 144(sp),a1
    1f9c:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fa0:	|        '-> moveq #64,d0
    1fa2:	|            move.l d0,140(sp)
    1fa6:	|            clr.l 136(sp)
    1faa:	|            move.l 1e876 <SysBase>,d0
    1fb0:	|            movea.l d0,a6
    1fb2:	|            move.l 140(sp),d0
    1fb6:	|            move.l 136(sp),d1
    1fba:	|            jsr -684(a6)
    1fbe:	|            move.l d0,132(sp)
    1fc2:	|            move.l 132(sp),d0
    1fc6:	|            move.l d0,1e7a8 <CstPalette>
    CstPaletteLoaded = 1;
    1fcc:	|            move.w #1,1e782 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1fd4:	|            move.l 1e7a8 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fdc:	|            clr.l 180(sp)
    1fe0:	|        ,-- bra.s 2006 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fe2:	|     ,--|-> move.l 192(sp),-(sp)
    1fe6:	|     |  |   jsr 6bc <get2bytes>
    1fec:	|     |  |   addq.l #4,sp
    1fee:	|     |  |   move.l d0,d1
    1ff0:	|     |  |   move.l 184(sp),d0
    1ff4:	|     |  |   move.l d0,d2
    1ff6:	|     |  |   addq.l #2,d2
    1ff8:	|     |  |   move.l d2,184(sp)
    1ffc:	|     |  |   move.l d1,d1
    1ffe:	|     |  |   movea.l d0,a0
    2000:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2002:	|     |  |   addq.l #1,180(sp)
    2006:	|     |  '-> moveq #31,d0
    2008:	|     |      cmp.l 180(sp),d0
    200c:	|     '----- bge.s 1fe2 <CstLoadBackdrop+0xe6>
    200e:	|  ,-------- bra.s 202e <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2010:	'--|-------> clr.l 176(sp)
    2014:	   |     ,-- bra.s 2026 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2016:	   |  ,--|-> move.l 192(sp),-(sp)
    201a:	   |  |  |   jsr 6bc <get2bytes>
    2020:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2022:	   |  |  |   addq.l #1,176(sp)
    2026:	   |  |  '-> moveq #31,d2
    2028:	   |  |      cmp.l 176(sp),d2
    202c:	   |  '----- bge.s 2016 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    202e:	   '-------> moveq #0,d0
    2030:	             move.w 150(sp),d0
    2034:	             move.l d0,128(sp)
    2038:	             moveq #2,d0
    203a:	             move.l d0,124(sp)
    203e:	             move.l 1e876 <SysBase>,d0
    2044:	             movea.l d0,a6
    2046:	             move.l 128(sp),d0
    204a:	             move.l 124(sp),d1
    204e:	             jsr -684(a6)
    2052:	             move.l d0,120(sp)
    2056:	             move.l 120(sp),d0
    205a:	             move.l d0,116(sp)
  if( !tmpbuffer)
    205e:	         ,-- bne.s 206e <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2060:	         |   pea 1921f <PutChar+0x27f>
    2066:	         |   jsr 184fe <KPrintF>
    206c:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    206e:	         '-> moveq #0,d0
    2070:	             move.w 152(sp),d0
    2074:	             move.l d0,112(sp)
    2078:	             moveq #2,d2
    207a:	             move.l d2,108(sp)
    207e:	             move.l 1e876 <SysBase>,d0
    2084:	             movea.l d0,a6
    2086:	             move.l 112(sp),d0
    208a:	             move.l 108(sp),d1
    208e:	             jsr -684(a6)
    2092:	             move.l d0,104(sp)
    2096:	             move.l 104(sp),d0
    209a:	             move.l d0,100(sp)
  if( !tmpmask)
    209e:	         ,-- bne.s 20ae <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20a0:	         |   pea 19255 <PutChar+0x2b5>
    20a6:	         |   jsr 184fe <KPrintF>
    20ac:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20ae:	         '-> move.w 160(sp),d0
    20b2:	             movea.w d0,a1
    20b4:	             move.w 162(sp),d0
    20b8:	             movea.w d0,a0
    20ba:	             clr.l -(sp)
    20bc:	             pea 5 <_start+0x5>
    20c0:	             move.l a1,-(sp)
    20c2:	             move.l a0,-(sp)
    20c4:	             pea 19289 <PutChar+0x2e9>
    20ca:	             move.l 136(sp),-(sp)
    20ce:	             jsr 185e6 <debug_register_bitmap>
    20d4:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20d8:	             move.w 160(sp),d0
    20dc:	             movea.w d0,a1
    20de:	             move.w 162(sp),d0
    20e2:	             movea.w d0,a0
    20e4:	             clr.l -(sp)
    20e6:	             pea 1 <_start+0x1>
    20ea:	             move.l a1,-(sp)
    20ec:	             move.l a0,-(sp)
    20ee:	             pea 19297 <PutChar+0x2f7>
    20f4:	             move.l 136(sp),-(sp)
    20f8:	             jsr 185e6 <debug_register_bitmap>
    20fe:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2102:	             move.l 192(sp),96(sp)
    2108:	             move.l 116(sp),92(sp)
    210e:	             moveq #2,d0
    2110:	             move.l d0,88(sp)
    2114:	             move.w 150(sp),d0
    2118:	             lsr.w #1,d0
    211a:	             move.w d0,d0
    211c:	             andi.l #65535,d0
    2122:	             move.l d0,84(sp)
    2126:	             move.l 1e87e <DOSBase>,d0
    212c:	             movea.l d0,a6
    212e:	             move.l 96(sp),d1
    2132:	             move.l 92(sp),d2
    2136:	             move.l 88(sp),d3
    213a:	             move.l 84(sp),d4
    213e:	             jsr -324(a6)
    2142:	             move.l d0,80(sp)
    2146:	             move.l 80(sp),d0
    214a:	             move.w d0,78(sp)
  if(!count) {
    214e:	         ,-- bne.s 2162 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2150:	         |   pea 192a3 <PutChar+0x303>
    2156:	         |   jsr 184fe <KPrintF>
    215c:	         |   addq.l #4,sp
    return;
    215e:	   ,-----|-- bra.w 2472 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2162:	   |     '-> move.l 192(sp),74(sp)
    2168:	   |         move.l 100(sp),70(sp)
    216e:	   |         moveq #2,d2
    2170:	   |         move.l d2,66(sp)
    2174:	   |         move.w 152(sp),d0
    2178:	   |         lsr.w #1,d0
    217a:	   |         move.w d0,d0
    217c:	   |         andi.l #65535,d0
    2182:	   |         move.l d0,62(sp)
    2186:	   |         move.l 1e87e <DOSBase>,d0
    218c:	   |         movea.l d0,a6
    218e:	   |         move.l 74(sp),d1
    2192:	   |         move.l 70(sp),d2
    2196:	   |         move.l 66(sp),d3
    219a:	   |         move.l 62(sp),d4
    219e:	   |         jsr -324(a6)
    21a2:	   |         move.l d0,58(sp)
    21a6:	   |         move.l 58(sp),d0
    21aa:	   |         move.w d0,78(sp)
   

  if(!count) {
    21ae:	   |     ,-- bne.s 21c2 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21b0:	   |     |   pea 192a3 <PutChar+0x303>
    21b6:	   |     |   jsr 184fe <KPrintF>
    21bc:	   |     |   addq.l #4,sp
    return;
    21be:	   +-----|-- bra.w 2472 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21c2:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21ca:	   |         move.l 1e788 <CstBackDrop>,d0
    21d0:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21d4:	   |         move.l 200(sp),d0
    21d8:	   |         move.w d0,d1
    21da:	   |         muls.w 154(sp),d1
    21de:	   |         move.l 196(sp),d0
    21e2:	   |     ,-- bpl.s 21e6 <CstLoadBackdrop+0x2ea>
    21e4:	   |     |   addq.l #7,d0
    21e6:	   |     '-> asr.l #3,d0
    21e8:	   |         move.l d0,d0
    21ea:	   |         movea.w d1,a0
    21ec:	   |         adda.w d0,a0
    21ee:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    21f2:	   |         moveq #0,d0
    21f4:	   |         move.w 52(sp),d0
    21f8:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    21fc:	   |         pea 192be <PutChar+0x31e>
    2202:	   |         jsr 184fe <KPrintF>
    2208:	   |         addq.l #4,sp


  WaitBlit();
    220a:	   |         move.l 1e882 <GfxBase>,d0
    2210:	   |         movea.l d0,a6
    2212:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2216:	   |         movea.l 54(sp),a0
    221a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2220:	   |         movea.l 54(sp),a0
    2224:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    222a:	   |         movea.l 54(sp),a0
    222e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2234:	   |         movea.l 54(sp),a0
    2238:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    223e:	   |         move.w 154(sp),d0
    2242:	   |         sub.w 158(sp),d0
    2246:	   |         movea.l 54(sp),a0
    224a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    224e:	   |         move.w 154(sp),d0
    2252:	   |         sub.w 158(sp),d0
    2256:	   |         movea.l 54(sp),a0
    225a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    225e:	   |         movea.l 54(sp),a0
    2262:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2268:	   |         movea.l 54(sp),a0
    226c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2272:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2278:	   |         clr.l 164(sp)
    227c:	   |     ,-- bra.s 22ea <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    227e:	   |  ,--|-> move.l 1e882 <GfxBase>,d0
    2284:	   |  |  |   movea.l d0,a6
    2286:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    228a:	   |  |  |   movea.l 54(sp),a0
    228e:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2294:	   |  |  |   move.l 168(sp),d0
    2298:	   |  |  |   movea.l 54(sp),a0
    229c:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    22a0:	   |  |  |   move.l 172(sp),d0
    22a4:	   |  |  |   movea.l 54(sp),a0
    22a8:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22ac:	   |  |  |   move.l 172(sp),d0
    22b0:	   |  |  |   movea.l 54(sp),a0
    22b4:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22b8:	   |  |  |   move.w 160(sp),d0
    22bc:	   |  |  |   lsl.w #6,d0
    22be:	   |  |  |   add.w 156(sp),d0
    22c2:	   |  |  |   movea.l 54(sp),a0
    22c6:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22ca:	   |  |  |   moveq #0,d0
    22cc:	   |  |  |   move.w 152(sp),d0
    22d0:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    22d4:	   |  |  |   move.w 1e786 <CstBackdropSizePlane>,d0
    22da:	   |  |  |   move.w d0,d0
    22dc:	   |  |  |   andi.l #65535,d0
    22e2:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e6:	   |  |  |   addq.l #1,164(sp)
    22ea:	   |  |  '-> moveq #4,d0
    22ec:	   |  |      cmp.l 164(sp),d0
    22f0:	   |  '----- bge.s 227e <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22f2:	   |         move.l 1e882 <GfxBase>,d0
    22f8:	   |         movea.l d0,a6
    22fa:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22fe:	   |         pea 192dd <PutChar+0x33d>
    2304:	   |         jsr 184fe <KPrintF>
    230a:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    230c:	   |         move.l 116(sp),48(sp)
    2312:	   |         move.l 1e876 <SysBase>,d0
    2318:	   |         movea.l d0,a6
    231a:	   |         movea.l 48(sp),a1
    231e:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2322:	   |         move.l 100(sp),44(sp)
    2328:	   |         move.l 1e876 <SysBase>,d0
    232e:	   |         movea.l d0,a6
    2330:	   |         movea.l 44(sp),a1
    2334:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2338:	   |         move.l 1e7a0 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2340:	   |         moveq #20,d2
    2342:	   |         move.l d2,36(sp)
    2346:	   |         clr.l 32(sp)
    234a:	   |         move.l 1e876 <SysBase>,d0
    2350:	   |         movea.l d0,a6
    2352:	   |         move.l 36(sp),d0
    2356:	   |         move.l 32(sp),d1
    235a:	   |         jsr -684(a6)
    235e:	   |         move.l d0,28(sp)
    2362:	   |         move.l 28(sp),d0
    2366:	   |         move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    236c:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2372:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2378:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    237e:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    2380:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2386:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    238a:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2390:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2394:	   |         move.l 1e7bc <winWidth>,d0
    239a:	   |         lsr.l #4,d0
    239c:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    23a2:	   |         move.l d0,d0
    23a4:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    23a8:	   |         move.l 1e7c0 <winHeight>,d0
    23ae:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    23b4:	   |         move.l d0,d0
    23b6:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    23ba:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    23c0:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    23c4:	   |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    23ca:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    23ce:	   |         move.l 1e79c <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23d6:	   |         moveq #20,d0
    23d8:	   |         move.l d0,24(sp)
    23dc:	   |         clr.l 20(sp)
    23e0:	   |         move.l 1e876 <SysBase>,d0
    23e6:	   |         movea.l d0,a6
    23e8:	   |         move.l 24(sp),d0
    23ec:	   |         move.l 20(sp),d1
    23f0:	   |         jsr -684(a6)
    23f4:	   |         move.l d0,16(sp)
    23f8:	   |         move.l 16(sp),d0
    23fc:	   |         move.l d0,1e79c <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    2402:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2408:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    240e:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2414:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2416:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    241c:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    2420:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2426:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    242a:	   |         move.l 1e7bc <winWidth>,d0
    2430:	   |         lsr.l #4,d0
    2432:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2438:	   |         move.l d0,d0
    243a:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    243e:	   |         move.l 1e7c0 <winHeight>,d0
    2444:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    244a:	   |         move.l d0,d0
    244c:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    2450:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2456:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    245a:	   |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2460:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2464:	   |         pea 192fd <PutChar+0x35d>
    246a:	   |         jsr 184fe <KPrintF>
    2470:	   |         addq.l #4,sp

}
    2472:	   '-------> movem.l (sp)+,d2-d4/a6
    2476:	             lea 172(sp),sp
    247a:	             rts

0000247c <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    247c:	                lea -156(sp),sp
    2480:	                move.l a6,-(sp)
    2482:	                move.l d2,-(sp)
    2484:	                move.l 172(sp),d1
    2488:	                move.l 176(sp),d0
    248c:	                move.w d1,d1
    248e:	                move.w d1,10(sp)
    2492:	                move.w d0,d0
    2494:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2498:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    24a0:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    24a4:	                move.l 1e788 <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    24ac:	                clr.l 140(sp)

  blitwidth = single->width/16;
    24b0:	                movea.l 168(sp),a0
    24b4:	                move.l (a0),d0
    24b6:	                movea.l d0,a0
    24b8:	                cmpa.w #0,a0
    24bc:	            ,-- bge.s 24c2 <CstPasteChar+0x46>
    24be:	            |   lea 15(a0),a0
    24c2:	            '-> move.l a0,d0
    24c4:	                asr.l #4,d0
    24c6:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    24ca:	            ,-- bne.s 24d2 <CstPasteChar+0x56>
    24cc:	            |   moveq #1,d0
    24ce:	            |   move.l d0,124(sp)

  if( y < 0) {
    24d2:	            '-> tst.w 8(sp)
    24d6:	         ,----- bge.s 2520 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    24d8:	         |      movea.w 8(sp),a1
    24dc:	         |      movea.l 168(sp),a0
    24e0:	         |      move.l 4(a0),d0
    24e4:	         |      add.l a1,d0
    24e6:	         |  ,-- bpl.s 24fa <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24e8:	         |  |   pea 19317 <PutChar+0x377>
    24ee:	         |  |   jsr 184fe <KPrintF>
    24f4:	         |  |   addq.l #4,sp
      return;
    24f6:	,--------|--|-- bra.w 2e6e <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    24fa:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    24fe:	|        |      move.w 8(sp),d0
    2502:	|        |      ext.l d0
    2504:	|        |      move.l d0,d1
    2506:	|        |      neg.l d1
    2508:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    250c:	|        |      movea.l 168(sp),a0
    2510:	|        |      move.l 4(a0),d0
    2514:	|        |      movea.w 8(sp),a0
    2518:	|        |      add.l a0,d0
    251a:	|        |      move.l d0,128(sp)
    251e:	|     ,--|----- bra.s 2592 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    2520:	|     |  '----> movea.w 8(sp),a1
    2524:	|     |         movea.l 168(sp),a0
    2528:	|     |         move.l 4(a0),d0
    252c:	|     |         move.l a1,d1
    252e:	|     |         add.l d0,d1
    2530:	|     |         move.l 1e7c0 <winHeight>,d0
    2536:	|     |         cmp.l d1,d0
    2538:	|     |  ,----- bge.s 257a <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    253a:	|     |  |      movea.w 8(sp),a0
    253e:	|     |  |      move.l 1e7c0 <winHeight>,d0
    2544:	|     |  |      cmp.l a0,d0
    2546:	|     |  |  ,-- bge.s 255a <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2548:	|     |  |  |   pea 19317 <PutChar+0x377>
    254e:	|     |  |  |   jsr 184fe <KPrintF>
    2554:	|     |  |  |   addq.l #4,sp
      return;
    2556:	+-----|--|--|-- bra.w 2e6e <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    255a:	|     |  |  '-> movea.w 8(sp),a0
    255e:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    2562:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2566:	|     |  |      move.l 1e7c0 <winHeight>,d0
    256c:	|     |  |      movea.w 8(sp),a0
    2570:	|     |  |      move.l d0,d1
    2572:	|     |  |      sub.l a0,d1
    2574:	|     |  |      move.l d1,128(sp)
    2578:	|     +--|----- bra.s 2592 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    257a:	|     |  '----> movea.w 8(sp),a0
    257e:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    2582:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2586:	|     |         movea.l 168(sp),a0
    258a:	|     |         move.l 4(a0),d0
    258e:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2592:	|     '-------> tst.w 10(sp)
    2596:	|        ,----- bge.w 27de <CstPasteChar+0x362>
    if(x + single->width < 0) {
    259a:	|        |      movea.w 10(sp),a1
    259e:	|        |      movea.l 168(sp),a0
    25a2:	|        |      move.l (a0),d0
    25a4:	|        |      add.l a1,d0
    25a6:	|        |  ,-- bpl.s 25ba <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25a8:	|        |  |   pea 19317 <PutChar+0x377>
    25ae:	|        |  |   jsr 184fe <KPrintF>
    25b4:	|        |  |   addq.l #4,sp
      return;
    25b6:	+--------|--|-- bra.w 2e6e <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    25ba:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    25c0:	|        |      move.w 10(sp),d0
    25c4:	|        |  ,-- bpl.s 25ca <CstPasteChar+0x14e>
    25c6:	|        |  |   addi.w #15,d0
    25ca:	|        |  '-> asr.w #4,d0
    25cc:	|        |      neg.w d0
    25ce:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    25d2:	|        |      move.w 10(sp),d0
    25d6:	|        |      ext.l d0
    25d8:	|        |      neg.l d0
    25da:	|        |      andi.l #-2147483633,d0
    25e0:	|        |  ,-- bpl.s 25ea <CstPasteChar+0x16e>
    25e2:	|        |  |   subq.l #1,d0
    25e4:	|        |  |   moveq #-16,d1
    25e6:	|        |  |   or.l d1,d0
    25e8:	|        |  |   addq.l #1,d0
    25ea:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25ee:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25f2:	|        |      movea.l 168(sp),a0
    25f6:	|        |      move.l 24(a0),d0
    25fa:	|        |      move.l d0,d1
    25fc:	|        |      moveq #0,d0
    25fe:	|        |      move.w 160(sp),d0
    2602:	|        |      add.l d0,d0
    2604:	|        |      move.l d1,d2
    2606:	|        |      add.l d0,d2
    2608:	|        |      movea.l 168(sp),a0
    260c:	|        |      move.l (a0),d0
    260e:	|        |      move.l 132(sp),-(sp)
    2612:	|        |      move.l d0,-(sp)
    2614:	|        |      jsr 18e8a <__mulsi3>
    261a:	|        |      addq.l #8,sp
    261c:	|        |      lsr.l #3,d0
    261e:	|        |      move.l d2,d1
    2620:	|        |      add.l d0,d1
    2622:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2626:	|        |      move.l 1e7bc <winWidth>,d0
    262c:	|        |      move.l 136(sp),-(sp)
    2630:	|        |      move.l d0,-(sp)
    2632:	|        |      jsr 18e8a <__mulsi3>
    2638:	|        |      addq.l #8,sp
    263a:	|        |      lsr.l #3,d0
    263c:	|        |      move.l 108(sp),d1
    2640:	|        |      add.l d1,d0
    2642:	|        |      move.l d0,d2
    2644:	|        |      subq.l #2,d2
    2646:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    264a:	|        |      move.l 1e7bc <winWidth>,d0
    2650:	|        |      move.l 136(sp),-(sp)
    2654:	|        |      move.l d0,-(sp)
    2656:	|        |      jsr 18e8a <__mulsi3>
    265c:	|        |      addq.l #8,sp
    265e:	|        |      lsr.l #3,d0
    2660:	|        |      move.l 108(sp),d1
    2664:	|        |      add.l d1,d0
    2666:	|        |      move.l d0,d1
    2668:	|        |      subq.l #2,d1
    266a:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    266e:	|        |      moveq #0,d0
    2670:	|        |      move.w 158(sp),d0
    2674:	|        |      moveq #16,d1
    2676:	|        |      sub.l d0,d1
    2678:	|        |      move.l d1,d0
    267a:	|        |      moveq #12,d2
    267c:	|        |      lsl.l d2,d0
    267e:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2682:	|        |      move.l 1e7a0 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    268a:	|        |      moveq #20,d0
    268c:	|        |      move.l d0,44(sp)
    2690:	|        |      clr.l 40(sp)
    2694:	|        |      move.l 1e876 <SysBase>,d0
    269a:	|        |      movea.l d0,a6
    269c:	|        |      move.l 44(sp),d0
    26a0:	|        |      move.l 40(sp),d1
    26a4:	|        |      jsr -684(a6)
    26a8:	|        |      move.l d0,36(sp)
    26ac:	|        |      move.l 36(sp),d0
    26b0:	|        |      move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    26b6:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    26bc:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    26c2:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    26c8:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    26ca:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    26d0:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    26d4:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    26da:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    26de:	|        |      movea.l 168(sp),a0
    26e2:	|        |      move.l (a0),d0
    26e4:	|        |      movea.l d0,a0
    26e6:	|        |      cmpa.w #0,a0
    26ea:	|        |  ,-- bge.s 26f0 <CstPasteChar+0x274>
    26ec:	|        |  |   lea 15(a0),a0
    26f0:	|        |  '-> move.l a0,d0
    26f2:	|        |      asr.l #4,d0
    26f4:	|        |      move.l d0,d0
    26f6:	|        |      add.w 160(sp),d0
    26fa:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2700:	|        |      add.w 162(sp),d0
    2704:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2708:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    270e:	|        |      move.l 128(sp),d0
    2712:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2716:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    271c:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2720:	|        |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2726:	|        |      move.l 136(sp),d0
    272a:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    272e:	|        |      move.l 1e79c <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2736:	|        |      moveq #20,d1
    2738:	|        |      move.l d1,32(sp)
    273c:	|        |      clr.l 28(sp)
    2740:	|        |      move.l 1e876 <SysBase>,d0
    2746:	|        |      movea.l d0,a6
    2748:	|        |      move.l 32(sp),d0
    274c:	|        |      move.l 28(sp),d1
    2750:	|        |      jsr -684(a6)
    2754:	|        |      move.l d0,24(sp)
    2758:	|        |      move.l 24(sp),d0
    275c:	|        |      move.l d0,1e79c <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2762:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2768:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    276e:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2774:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2776:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    277c:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2780:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2786:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    278a:	|        |      movea.l 168(sp),a0
    278e:	|        |      move.l (a0),d0
    2790:	|        |      movea.l d0,a0
    2792:	|        |      cmpa.w #0,a0
    2796:	|        |  ,-- bge.s 279c <CstPasteChar+0x320>
    2798:	|        |  |   lea 15(a0),a0
    279c:	|        |  '-> move.l a0,d0
    279e:	|        |      asr.l #4,d0
    27a0:	|        |      move.l d0,d0
    27a2:	|        |      add.w 160(sp),d0
    27a6:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    27ac:	|        |      add.w 162(sp),d0
    27b0:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    27b4:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    27ba:	|        |      move.l 128(sp),d0
    27be:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    27c2:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    27c8:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    27cc:	|        |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    27d2:	|        |      move.l 136(sp),d0
    27d6:	|        |      move.w d0,14(a0)
    27da:	|     ,--|----- bra.w 2cd6 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    27de:	|     |  '----> movea.w 10(sp),a1
    27e2:	|     |         movea.l 168(sp),a0
    27e6:	|     |         move.l (a0),d0
    27e8:	|     |         move.l a1,d1
    27ea:	|     |         add.l d0,d1
    27ec:	|     |         move.l 1e7bc <winWidth>,d0
    27f2:	|     |         cmp.l d1,d0
    27f4:	|     |  ,----- bge.w 2a80 <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    27f8:	|     |  |      movea.w 10(sp),a1
    27fc:	|     |  |      movea.l 168(sp),a0
    2800:	|     |  |      move.l (a0),d0
    2802:	|     |  |      move.l a1,d1
    2804:	|     |  |      sub.l d0,d1
    2806:	|     |  |      move.l 1e7bc <winWidth>,d0
    280c:	|     |  |      cmp.l d1,d0
    280e:	|     |  |  ,-- bge.s 2822 <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2810:	|     |  |  |   pea 19317 <PutChar+0x377>
    2816:	|     |  |  |   jsr 184fe <KPrintF>
    281c:	|     |  |  |   addq.l #4,sp
      return;
    281e:	+-----|--|--|-- bra.w 2e6e <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2822:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2826:	|     |  |      movea.w 10(sp),a1
    282a:	|     |  |      movea.l 168(sp),a0
    282e:	|     |  |      move.l (a0),d0
    2830:	|     |  |      add.l a1,d0
    2832:	|     |  |      move.l d0,d1
    2834:	|     |  |      move.l 1e7bc <winWidth>,d0
    283a:	|     |  |      sub.l d0,d1
    283c:	|     |  |      move.l d1,d0
    283e:	|     |  |      lsr.l #4,d0
    2840:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2844:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2848:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    284e:	|     |  |      movea.l 168(sp),a0
    2852:	|     |  |      move.l 24(a0),d0
    2856:	|     |  |      move.l d0,d2
    2858:	|     |  |      movea.l 168(sp),a0
    285c:	|     |  |      move.l (a0),d0
    285e:	|     |  |      move.l 132(sp),-(sp)
    2862:	|     |  |      move.l d0,-(sp)
    2864:	|     |  |      jsr 18e8a <__mulsi3>
    286a:	|     |  |      addq.l #8,sp
    286c:	|     |  |      lsr.l #3,d0
    286e:	|     |  |      move.l d2,d1
    2870:	|     |  |      add.l d0,d1
    2872:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2876:	|     |  |      move.l 1e7bc <winWidth>,d0
    287c:	|     |  |      move.l 136(sp),-(sp)
    2880:	|     |  |      move.l d0,-(sp)
    2882:	|     |  |      jsr 18e8a <__mulsi3>
    2888:	|     |  |      addq.l #8,sp
    288a:	|     |  |      lsr.l #3,d0
    288c:	|     |  |      move.l 108(sp),d1
    2890:	|     |  |      add.l d0,d1
    2892:	|     |  |      move.w 10(sp),d0
    2896:	|     |  |  ,-- bpl.s 289c <CstPasteChar+0x420>
    2898:	|     |  |  |   addi.w #15,d0
    289c:	|     |  |  '-> asr.w #4,d0
    289e:	|     |  |      movea.w d0,a0
    28a0:	|     |  |      move.l a0,d0
    28a2:	|     |  |      add.l a0,d0
    28a4:	|     |  |      move.l d1,d2
    28a6:	|     |  |      add.l d0,d2
    28a8:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28ac:	|     |  |      move.l 1e7bc <winWidth>,d0
    28b2:	|     |  |      move.l 136(sp),-(sp)
    28b6:	|     |  |      move.l d0,-(sp)
    28b8:	|     |  |      jsr 18e8a <__mulsi3>
    28be:	|     |  |      addq.l #8,sp
    28c0:	|     |  |      lsr.l #3,d0
    28c2:	|     |  |      move.l 108(sp),d1
    28c6:	|     |  |      add.l d0,d1
    28c8:	|     |  |      move.w 10(sp),d0
    28cc:	|     |  |  ,-- bpl.s 28d2 <CstPasteChar+0x456>
    28ce:	|     |  |  |   addi.w #15,d0
    28d2:	|     |  |  '-> asr.w #4,d0
    28d4:	|     |  |      movea.w d0,a0
    28d6:	|     |  |      move.l a0,d0
    28d8:	|     |  |      add.l a0,d0
    28da:	|     |  |      move.l d1,d2
    28dc:	|     |  |      add.l d0,d2
    28de:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    28e2:	|     |  |      movea.l 168(sp),a0
    28e6:	|     |  |      move.l (a0),d0
    28e8:	|     |  |      andi.l #-2147483633,d0
    28ee:	|     |  |  ,-- bpl.s 28f8 <CstPasteChar+0x47c>
    28f0:	|     |  |  |   subq.l #1,d0
    28f2:	|     |  |  |   moveq #-16,d1
    28f4:	|     |  |  |   or.l d1,d0
    28f6:	|     |  |  |   addq.l #1,d0
    28f8:	|     |  |  '-> moveq #12,d2
    28fa:	|     |  |      lsl.l d2,d0
    28fc:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2900:	|     |  |      move.l 1e7a0 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2908:	|     |  |      moveq #20,d0
    290a:	|     |  |      move.l d0,72(sp)
    290e:	|     |  |      clr.l 68(sp)
    2912:	|     |  |      move.l 1e876 <SysBase>,d0
    2918:	|     |  |      movea.l d0,a6
    291a:	|     |  |      move.l 72(sp),d0
    291e:	|     |  |      move.l 68(sp),d1
    2922:	|     |  |      jsr -684(a6)
    2926:	|     |  |      move.l d0,64(sp)
    292a:	|     |  |      move.l 64(sp),d0
    292e:	|     |  |      move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2934:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    293a:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2940:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2946:	|     |  |      move.w 10(sp),d0
    294a:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    294c:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2952:	|     |  |      move.l 136(sp),d0
    2956:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    295a:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2960:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2964:	|     |  |      movea.l 168(sp),a0
    2968:	|     |  |      move.l (a0),d0
    296a:	|     |  |      movea.l d0,a0
    296c:	|     |  |      cmpa.w #0,a0
    2970:	|     |  |  ,-- bge.s 2976 <CstPasteChar+0x4fa>
    2972:	|     |  |  |   lea 15(a0),a0
    2976:	|     |  |  '-> move.l a0,d0
    2978:	|     |  |      asr.l #4,d0
    297a:	|     |  |      move.l d0,d0
    297c:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2982:	|     |  |      add.w 160(sp),d0
    2986:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    298a:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2990:	|     |  |      move.l 128(sp),d0
    2994:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2998:	|     |  |      move.w 10(sp),d0
    299c:	|     |  |  ,-- bpl.s 29a2 <CstPasteChar+0x526>
    299e:	|     |  |  |   addi.w #15,d0
    29a2:	|     |  |  '-> asr.w #4,d0
    29a4:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    29aa:	|     |  |      add.w d0,d0
    29ac:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    29b0:	|     |  |      movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    29b6:	|     |  |      move.l 136(sp),d0
    29ba:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    29be:	|     |  |      move.l 1e79c <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    29c6:	|     |  |      moveq #20,d1
    29c8:	|     |  |      move.l d1,60(sp)
    29cc:	|     |  |      clr.l 56(sp)
    29d0:	|     |  |      move.l 1e876 <SysBase>,d0
    29d6:	|     |  |      movea.l d0,a6
    29d8:	|     |  |      move.l 60(sp),d0
    29dc:	|     |  |      move.l 56(sp),d1
    29e0:	|     |  |      jsr -684(a6)
    29e4:	|     |  |      move.l d0,52(sp)
    29e8:	|     |  |      move.l 52(sp),d0
    29ec:	|     |  |      move.l d0,1e79c <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    29f2:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    29f8:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    29fe:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a04:	|     |  |      move.w 10(sp),d0
    2a08:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a0a:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a10:	|     |  |      move.l 136(sp),d0
    2a14:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a18:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a1e:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2a22:	|     |  |      movea.l 168(sp),a0
    2a26:	|     |  |      move.l (a0),d0
    2a28:	|     |  |      movea.l d0,a0
    2a2a:	|     |  |      cmpa.w #0,a0
    2a2e:	|     |  |  ,-- bge.s 2a34 <CstPasteChar+0x5b8>
    2a30:	|     |  |  |   lea 15(a0),a0
    2a34:	|     |  |  '-> move.l a0,d0
    2a36:	|     |  |      asr.l #4,d0
    2a38:	|     |  |      move.l d0,d0
    2a3a:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a40:	|     |  |      add.w 160(sp),d0
    2a44:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2a48:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a4e:	|     |  |      move.l 128(sp),d0
    2a52:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2a56:	|     |  |      move.w 10(sp),d0
    2a5a:	|     |  |  ,-- bpl.s 2a60 <CstPasteChar+0x5e4>
    2a5c:	|     |  |  |   addi.w #15,d0
    2a60:	|     |  |  '-> asr.w #4,d0
    2a62:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a68:	|     |  |      add.w d0,d0
    2a6a:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2a6e:	|     |  |      movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2a74:	|     |  |      move.l 136(sp),d0
    2a78:	|     |  |      move.w d0,14(a0)
    2a7c:	|     +--|----- bra.w 2cd6 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2a80:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2a86:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2a8a:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2a8e:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2a92:	|     |         movea.l 168(sp),a0
    2a96:	|     |         move.l 24(a0),d0
    2a9a:	|     |         move.l d0,d2
    2a9c:	|     |         movea.l 168(sp),a0
    2aa0:	|     |         move.l (a0),d0
    2aa2:	|     |         movea.l d0,a0
    2aa4:	|     |         cmpa.w #0,a0
    2aa8:	|     |     ,-- bge.s 2aae <CstPasteChar+0x632>
    2aaa:	|     |     |   lea 15(a0),a0
    2aae:	|     |     '-> move.l a0,d0
    2ab0:	|     |         asr.l #4,d0
    2ab2:	|     |         move.l 132(sp),-(sp)
    2ab6:	|     |         move.l d0,-(sp)
    2ab8:	|     |         jsr 18e8a <__mulsi3>
    2abe:	|     |         addq.l #8,sp
    2ac0:	|     |         add.l d0,d0
    2ac2:	|     |         move.l d2,d1
    2ac4:	|     |         add.l d0,d1
    2ac6:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2aca:	|     |         move.l 1e7bc <winWidth>,d0
    2ad0:	|     |         move.l 136(sp),-(sp)
    2ad4:	|     |         move.l d0,-(sp)
    2ad6:	|     |         jsr 18e8a <__mulsi3>
    2adc:	|     |         addq.l #8,sp
    2ade:	|     |         lsr.l #3,d0
    2ae0:	|     |         move.l 108(sp),d1
    2ae4:	|     |         add.l d0,d1
    2ae6:	|     |         move.w 10(sp),d0
    2aea:	|     |     ,-- bpl.s 2af0 <CstPasteChar+0x674>
    2aec:	|     |     |   addi.w #15,d0
    2af0:	|     |     '-> asr.w #4,d0
    2af2:	|     |         movea.w d0,a0
    2af4:	|     |         move.l a0,d0
    2af6:	|     |         add.l a0,d0
    2af8:	|     |         move.l d1,d2
    2afa:	|     |         add.l d0,d2
    2afc:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2b00:	|     |         move.l 1e7bc <winWidth>,d0
    2b06:	|     |         move.l 136(sp),-(sp)
    2b0a:	|     |         move.l d0,-(sp)
    2b0c:	|     |         jsr 18e8a <__mulsi3>
    2b12:	|     |         addq.l #8,sp
    2b14:	|     |         lsr.l #3,d0
    2b16:	|     |         move.l 108(sp),d1
    2b1a:	|     |         add.l d0,d1
    2b1c:	|     |         move.w 10(sp),d0
    2b20:	|     |     ,-- bpl.s 2b26 <CstPasteChar+0x6aa>
    2b22:	|     |     |   addi.w #15,d0
    2b26:	|     |     '-> asr.w #4,d0
    2b28:	|     |         movea.w d0,a0
    2b2a:	|     |         move.l a0,d0
    2b2c:	|     |         add.l a0,d0
    2b2e:	|     |         move.l d1,d2
    2b30:	|     |         add.l d0,d2
    2b32:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2b36:	|     |         move.w 10(sp),d0
    2b3a:	|     |         andi.w #-32753,d0
    2b3e:	|     |     ,-- bpl.s 2b48 <CstPasteChar+0x6cc>
    2b40:	|     |     |   subq.w #1,d0
    2b42:	|     |     |   ori.w #-16,d0
    2b46:	|     |     |   addq.w #1,d0
    2b48:	|     |     '-> ext.l d0
    2b4a:	|     |         moveq #12,d1
    2b4c:	|     |         lsl.l d1,d0
    2b4e:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b52:	|     |         move.l 1e7a0 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2b5a:	|     |         moveq #20,d2
    2b5c:	|     |         move.l d2,100(sp)
    2b60:	|     |         clr.l 96(sp)
    2b64:	|     |         move.l 1e876 <SysBase>,d0
    2b6a:	|     |         movea.l d0,a6
    2b6c:	|     |         move.l 100(sp),d0
    2b70:	|     |         move.l 96(sp),d1
    2b74:	|     |         jsr -684(a6)
    2b78:	|     |         move.l d0,92(sp)
    2b7c:	|     |         move.l 92(sp),d0
    2b80:	|     |         move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2b86:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2b8c:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2b92:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2b98:	|     |         move.w 10(sp),d0
    2b9c:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2b9e:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2ba4:	|     |         move.l 136(sp),d0
    2ba8:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2bac:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2bb2:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2bb6:	|     |         movea.l 168(sp),a0
    2bba:	|     |         move.l (a0),d0
    2bbc:	|     |         movea.l d0,a0
    2bbe:	|     |         cmpa.w #0,a0
    2bc2:	|     |     ,-- bge.s 2bc8 <CstPasteChar+0x74c>
    2bc4:	|     |     |   lea 15(a0),a0
    2bc8:	|     |     '-> move.l a0,d0
    2bca:	|     |         asr.l #4,d0
    2bcc:	|     |         move.l d0,d0
    2bce:	|     |         add.w 160(sp),d0
    2bd2:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2bd8:	|     |         add.w 162(sp),d0
    2bdc:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2be0:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2be6:	|     |         move.l 128(sp),d0
    2bea:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2bee:	|     |         move.w 10(sp),d0
    2bf2:	|     |     ,-- bpl.s 2bf8 <CstPasteChar+0x77c>
    2bf4:	|     |     |   addi.w #15,d0
    2bf8:	|     |     '-> asr.w #4,d0
    2bfa:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2c00:	|     |         add.w d0,d0
    2c02:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c06:	|     |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2c0c:	|     |         move.l 136(sp),d0
    2c10:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2c14:	|     |         move.l 1e79c <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2c1c:	|     |         moveq #20,d0
    2c1e:	|     |         move.l d0,88(sp)
    2c22:	|     |         clr.l 84(sp)
    2c26:	|     |         move.l 1e876 <SysBase>,d0
    2c2c:	|     |         movea.l d0,a6
    2c2e:	|     |         move.l 88(sp),d0
    2c32:	|     |         move.l 84(sp),d1
    2c36:	|     |         jsr -684(a6)
    2c3a:	|     |         move.l d0,80(sp)
    2c3e:	|     |         move.l 80(sp),d0
    2c42:	|     |         move.l d0,1e79c <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2c48:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2c4e:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2c54:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2c5a:	|     |         move.w 10(sp),d0
    2c5e:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2c60:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2c66:	|     |         move.l 136(sp),d0
    2c6a:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2c6e:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2c74:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c78:	|     |         movea.l 168(sp),a0
    2c7c:	|     |         move.l (a0),d0
    2c7e:	|     |         movea.l d0,a0
    2c80:	|     |         cmpa.w #0,a0
    2c84:	|     |     ,-- bge.s 2c8a <CstPasteChar+0x80e>
    2c86:	|     |     |   lea 15(a0),a0
    2c8a:	|     |     '-> move.l a0,d0
    2c8c:	|     |         asr.l #4,d0
    2c8e:	|     |         move.l d0,d0
    2c90:	|     |         add.w 160(sp),d0
    2c94:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2c9a:	|     |         add.w 162(sp),d0
    2c9e:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2ca2:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2ca8:	|     |         move.l 128(sp),d0
    2cac:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2cb0:	|     |         move.w 10(sp),d0
    2cb4:	|     |     ,-- bpl.s 2cba <CstPasteChar+0x83e>
    2cb6:	|     |     |   addi.w #15,d0
    2cba:	|     |     '-> asr.w #4,d0
    2cbc:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2cc2:	|     |         add.w d0,d0
    2cc4:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2cc8:	|     |         movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    2cce:	|     |         move.l 136(sp),d0
    2cd2:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2cd6:	|     '-------> moveq #0,d0
    2cd8:	|               move.w 158(sp),d0
    2cdc:	|               moveq #0,d1
    2cde:	|               not.w d1
    2ce0:	|               asr.l d0,d1
    2ce2:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2ce6:	|               moveq #0,d1
    2ce8:	|               move.w 160(sp),d1
    2cec:	|               moveq #0,d0
    2cee:	|               move.w 162(sp),d0
    2cf2:	|               sub.l d0,d1
    2cf4:	|               move.l d1,d0
    2cf6:	|               add.w d0,d0
    2cf8:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2cfc:	|               move.l 1e7bc <winWidth>,d0
    2d02:	|               lsr.l #3,d0
    2d04:	|               move.l d0,d2
    2d06:	|               move.w 160(sp),d1
    2d0a:	|               sub.w 162(sp),d1
    2d0e:	|               move.l 124(sp),d0
    2d12:	|               sub.w d0,d1
    2d14:	|               move.w d1,d0
    2d16:	|               add.w d1,d0
    2d18:	|               add.w d2,d0
    2d1a:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d1e:	|               move.l 1e7bc <winWidth>,d0
    2d24:	|               lsr.l #3,d0
    2d26:	|               move.l d0,d2
    2d28:	|               move.w 160(sp),d1
    2d2c:	|               sub.w 162(sp),d1
    2d30:	|               move.l 124(sp),d0
    2d34:	|               sub.w d0,d1
    2d36:	|               move.w d1,d0
    2d38:	|               add.w d1,d0
    2d3a:	|               add.w d2,d0
    2d3c:	|               move.w d0,16(sp)

  WaitBlit();
    2d40:	|               move.l 1e882 <GfxBase>,d0
    2d46:	|               movea.l d0,a6
    2d48:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2d4c:	|               movea.l 112(sp),a0
    2d50:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2d56:	|               movea.l 112(sp),a0
    2d5a:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2d60:	|               move.w 20(sp),d0
    2d64:	|               movea.l 112(sp),a0
    2d68:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2d6c:	|               move.w 18(sp),d0
    2d70:	|               movea.l 112(sp),a0
    2d74:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2d78:	|               move.w 16(sp),d0
    2d7c:	|               movea.l 112(sp),a0
    2d80:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2d84:	|               move.l 1e7bc <winWidth>,d0
    2d8a:	|               lsr.l #3,d0
    2d8c:	|               move.l d0,d1
    2d8e:	|               move.l 1e7c0 <winHeight>,d0
    2d94:	|               move.l d0,d0
    2d96:	|               move.w d1,d2
    2d98:	|               muls.w d0,d2
    2d9a:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2d9e:	|               move.w 1e780 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2da6:	|               move.w 122(sp),d0
    2daa:	|               andi.w #1,d0
    2dae:	|               move.w d0,12(sp)
  if(tmp2) {
    2db2:	|        ,----- beq.s 2dbc <CstPasteChar+0x940>
    minterm = 0xbfa;
    2db4:	|        |      move.w #3066,120(sp)
    2dba:	|        |  ,-- bra.s 2dc2 <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2dbc:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2dc2:	|           '-> clr.l 116(sp)
    2dc6:	|     ,-------- bra.w 2e64 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2dca:	|  ,--|-------> move.l 140(sp),d0
    2dce:	|  |  |         add.w 120(sp),d0
    2dd2:	|  |  |         movea.l 112(sp),a0
    2dd6:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2dda:	|  |  |         move.l 152(sp),d0
    2dde:	|  |  |         movea.l 112(sp),a0
    2de2:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2de6:	|  |  |         move.l 148(sp),d0
    2dea:	|  |  |         movea.l 112(sp),a0
    2dee:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2df2:	|  |  |         move.l 144(sp),d0
    2df6:	|  |  |         movea.l 112(sp),a0
    2dfa:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2dfe:	|  |  |         move.l 128(sp),d0
    2e02:	|  |  |         lsl.w #6,d0
    2e04:	|  |  |         move.l 124(sp),d1
    2e08:	|  |  |         add.w d1,d0
    2e0a:	|  |  |         sub.w 160(sp),d0
    2e0e:	|  |  |         add.w 162(sp),d0
    2e12:	|  |  |         movea.l 112(sp),a0
    2e16:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2e1a:	|  |  |         moveq #0,d0
    2e1c:	|  |  |         move.w 14(sp),d0
    2e20:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2e24:	|  |  |         moveq #0,d0
    2e26:	|  |  |         move.w 14(sp),d0
    2e2a:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2e2e:	|  |  |         move.w 122(sp),d0
    2e32:	|  |  |         lsr.w #1,d0
    2e34:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2e38:	|  |  |         move.w 122(sp),d1
    2e3c:	|  |  |         andi.w #1,d1
    2e40:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2e44:	|  |  |  ,----- beq.s 2e4e <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2e46:	|  |  |  |      move.w #3066,120(sp)
    2e4c:	|  |  |  |  ,-- bra.s 2e54 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2e4e:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2e54:	|  |  |     '-> move.l 1e882 <GfxBase>,d0
    2e5a:	|  |  |         movea.l d0,a6
    2e5c:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e60:	|  |  |         addq.l #1,116(sp)
    2e64:	|  |  '-------> moveq #4,d2
    2e66:	|  |            cmp.l 116(sp),d2
    2e6a:	|  '----------- bge.w 2dca <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2e6e:	'-------------> move.l (sp)+,d2
    2e70:	                movea.l (sp)+,a6
    2e72:	                lea 156(sp),sp
    2e76:	                rts

00002e78 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2e78:	                lea -36(sp),sp
    2e7c:	                move.l a6,-(sp)
    2e7e:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2e80:	                move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2e88:	                move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d0
    2e8e:	,-------------- beq.w 30c0 <CstRestoreScreen+0x248>
    2e92:	|               move.l 1e798 <CstDrawBuffer>,d0
    2e98:	+-------------- beq.w 30c0 <CstRestoreScreen+0x248>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2e9c:	|               move.l 1e7a8 <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2ea4:	|               move.l 1e7a4 <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2eac:	|               clr.l 32(sp)
    2eb0:	|           ,-- bra.s 2ee2 <CstRestoreScreen+0x6a>
    *tmp++;
    2eb2:	|        ,--|-> move.l 36(sp),d0
    2eb6:	|        |  |   move.l d0,d1
    2eb8:	|        |  |   addq.l #2,d1
    2eba:	|        |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2ebe:	|        |  |   move.l 40(sp),d1
    2ec2:	|        |  |   move.l d1,d2
    2ec4:	|        |  |   addq.l #2,d2
    2ec6:	|        |  |   move.l d2,40(sp)
    2eca:	|        |  |   move.l 36(sp),d0
    2ece:	|        |  |   move.l d0,d2
    2ed0:	|        |  |   addq.l #2,d2
    2ed2:	|        |  |   move.l d2,36(sp)
    2ed6:	|        |  |   movea.l d1,a0
    2ed8:	|        |  |   move.w (a0),d1
    2eda:	|        |  |   movea.l d0,a0
    2edc:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2ede:	|        |  |   addq.l #1,32(sp)
    2ee2:	|        |  '-> moveq #31,d0
    2ee4:	|        |      cmp.l 32(sp),d0
    2ee8:	|        '----- bge.s 2eb2 <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2eea:	|               move.l 1e882 <GfxBase>,d0
    2ef0:	|               movea.l d0,a6
    2ef2:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2ef6:	|               movea.l 16(sp),a0
    2efa:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2f00:	|               movea.l 16(sp),a0
    2f04:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2f0a:	|               movea.l 16(sp),a0
    2f0e:	|               move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2f14:	|     ,-------- bra.w 30b4 <CstRestoreScreen+0x23c>
  {    

    /*if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
      || CstCleanupQueueDrawBuffer->person == NULL)
    {*/
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f18:	|  ,--|-------> move.l 1e7bc <winWidth>,d0
    2f1e:	|  |  |         lsr.l #3,d0
    2f20:	|  |  |         move.l d0,d1
    2f22:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2f28:	|  |  |         move.w 8(a0),d0
    2f2c:	|  |  |         add.w d0,d0
    2f2e:	|  |  |         sub.w d0,d1
    2f30:	|  |  |         movea.l 16(sp),a0
    2f34:	|  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f38:	|  |  |         move.l 1e7bc <winWidth>,d0
    2f3e:	|  |  |         lsr.l #3,d0
    2f40:	|  |  |         move.l d0,d1
    2f42:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2f48:	|  |  |         move.w 8(a0),d0
    2f4c:	|  |  |         add.w d0,d0
    2f4e:	|  |  |         sub.w d0,d1
    2f50:	|  |  |         movea.l 16(sp),a0
    2f54:	|  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2f58:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2f5e:	|  |  |         move.w 14(a0),d0
    2f62:	|  |  |         move.w d0,d0
    2f64:	|  |  |         andi.l #65535,d0
    2f6a:	|  |  |         move.l 1e7bc <winWidth>,d1
    2f70:	|  |  |         move.l d1,-(sp)
    2f72:	|  |  |         move.l d0,-(sp)
    2f74:	|  |  |         jsr 18e8a <__mulsi3>
    2f7a:	|  |  |         addq.l #8,sp
    2f7c:	|  |  |         move.l d0,d1
    2f7e:	|  |  |         lsr.l #3,d1
    2f80:	|  |  |         move.l 1e788 <CstBackDrop>,d0
    2f86:	|  |  |         add.l d0,d1
    2f88:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2f8e:	|  |  |         move.w 12(a0),d0
    2f92:	|  |  |         move.w d0,d0
    2f94:	|  |  |         andi.l #65535,d0
    2f9a:	|  |  |         move.l d1,d2
    2f9c:	|  |  |         add.l d0,d2
    2f9e:	|  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2fa2:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2fa8:	|  |  |         move.w 14(a0),d0
    2fac:	|  |  |         move.w d0,d0
    2fae:	|  |  |         andi.l #65535,d0
    2fb4:	|  |  |         move.l 1e7bc <winWidth>,d1
    2fba:	|  |  |         move.l d1,-(sp)
    2fbc:	|  |  |         move.l d0,-(sp)
    2fbe:	|  |  |         jsr 18e8a <__mulsi3>
    2fc4:	|  |  |         addq.l #8,sp
    2fc6:	|  |  |         move.l d0,d1
    2fc8:	|  |  |         lsr.l #3,d1
    2fca:	|  |  |         move.l 1e798 <CstDrawBuffer>,d0
    2fd0:	|  |  |         add.l d0,d1
    2fd2:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    2fd8:	|  |  |         move.w 12(a0),d0
    2fdc:	|  |  |         move.w d0,d0
    2fde:	|  |  |         andi.l #65535,d0
    2fe4:	|  |  |         move.l d1,d2
    2fe6:	|  |  |         add.l d0,d2
    2fe8:	|  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2fec:	|  |  |         clr.l 20(sp)
    2ff0:	|  |  |     ,-- bra.w 3078 <CstRestoreScreen+0x200>
      {
        custom->bltapt = (APTR) bltapt;
    2ff4:	|  |  |  ,--|-> move.l 28(sp),d0
    2ff8:	|  |  |  |  |   movea.l 16(sp),a0
    2ffc:	|  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    3000:	|  |  |  |  |   move.l 24(sp),d0
    3004:	|  |  |  |  |   movea.l 16(sp),a0
    3008:	|  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    300c:	|  |  |  |  |   movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    3012:	|  |  |  |  |   move.w 10(a0),d0
    3016:	|  |  |  |  |   lsl.w #6,d0
    3018:	|  |  |  |  |   movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    301e:	|  |  |  |  |   move.w 8(a0),d1
    3022:	|  |  |  |  |   add.w d1,d0
    3024:	|  |  |  |  |   movea.l 16(sp),a0
    3028:	|  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    302c:	|  |  |  |  |   move.l 1e7bc <winWidth>,d0
    3032:	|  |  |  |  |   lsr.l #3,d0
    3034:	|  |  |  |  |   move.l 1e7c0 <winHeight>,d1
    303a:	|  |  |  |  |   move.l d1,-(sp)
    303c:	|  |  |  |  |   move.l d0,-(sp)
    303e:	|  |  |  |  |   jsr 18e8a <__mulsi3>
    3044:	|  |  |  |  |   addq.l #8,sp
    3046:	|  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    304a:	|  |  |  |  |   move.l 1e7bc <winWidth>,d0
    3050:	|  |  |  |  |   lsr.l #3,d0
    3052:	|  |  |  |  |   move.l 1e7c0 <winHeight>,d1
    3058:	|  |  |  |  |   move.l d1,-(sp)
    305a:	|  |  |  |  |   move.l d0,-(sp)
    305c:	|  |  |  |  |   jsr 18e8a <__mulsi3>
    3062:	|  |  |  |  |   addq.l #8,sp
    3064:	|  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    3068:	|  |  |  |  |   move.l 1e882 <GfxBase>,d0
    306e:	|  |  |  |  |   movea.l d0,a6
    3070:	|  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3074:	|  |  |  |  |   addq.l #1,20(sp)
    3078:	|  |  |  |  '-> moveq #4,d0
    307a:	|  |  |  |      cmp.l 20(sp),d0
    307e:	|  |  |  '----- bge.w 2ff4 <CstRestoreScreen+0x17c>
      }
    //}
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    3082:	|  |  |         move.l 1e7a0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    308a:	|  |  |         movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    3090:	|  |  |         move.l 16(a0),d0
    3094:	|  |  |         move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    309a:	|  |  |         move.l 12(sp),8(sp)
    30a0:	|  |  |         move.l 1e876 <SysBase>,d0
    30a6:	|  |  |         movea.l d0,a6
    30a8:	|  |  |         movea.l 8(sp),a1
    30ac:	|  |  |         jsr -690(a6)
    todelete = NULL;
    30b0:	|  |  |         clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    30b4:	|  |  '-------> move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d0
    30ba:	|  '----------- bne.w 2f18 <CstRestoreScreen+0xa0>
    30be:	|           ,-- bra.s 30c2 <CstRestoreScreen+0x24a>
    return;
    30c0:	'-----------|-> nop
  }
  //custom->color[0] = 0x000;
}
    30c2:	            '-> move.l (sp)+,d2
    30c4:	                movea.l (sp)+,a6
    30c6:	                lea 36(sp),sp
    30ca:	                rts

000030cc <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    30cc:	                                                                                           lea -32(sp),sp
    30d0:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    30d4:	                                                                                           movea.l 80(sp),a2
    30d8:	                                                                                           move.l 84(sp),64(sp)
    30de:	                                                                                           move.l 88(sp),d3
    30e2:	                                                                                           move.l 92(sp),48(sp)
    30e8:	                                                                                           move.w d3,d7
    30ea:	                                                                                           move.w 50(sp),d2
    30ee:	                                                                                           move.w 98(sp),d5
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    30f2:	                                                                                           movea.w d2,a3
    30f4:	                                                                                           movea.w d3,a6
    30f6:	                                                                                           move.l a3,-(sp)
    30f8:	                                                                                           move.l a6,-(sp)
    30fa:	                                                                                           move.l 1e8d6 <zBuffer>,-(sp)
    3100:	                                                                                           move.l a2,-(sp)
    3102:	                                                                                           jsr 1556 <CstDrawZBuffer>
    3108:	                                                                                           move.l d0,d4

  UWORD *destination = 0;
  switch(destinationtype)
    310a:	                                                                                           lea 16(sp),sp
    310e:	                                                                                           cmpi.w #1,d5
    3112:	                                                            ,----------------------------- beq.w 35e2 <CstScaleSprite+0x516>
    3116:	                                                            |                              cmpi.w #2,d5
    311a:	                                                            |                 ,----------- beq.w 3448 <CstScaleSprite+0x37c>
    311e:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    3120:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    3124:	                                                            |  |              |            move.l a3,d0
    3126:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    3128:	                                                            |  |              |            tst.w d2
    312a:	                                                            |  |           ,--|----------- blt.w 345c <CstScaleSprite+0x390>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    312e:	                                                            |  |           |  |  ,-------> movea.l 1e7c0 <winHeight>,a0
    3134:	                                                            |  |           |  |  |         cmp.l a0,d0
    3136:	                                                            |  |  ,--------|--|--|-------- ble.w 35ec <CstScaleSprite+0x520>
    if(y  > (int) winHeight) {
    313a:	                                                            |  |  |        |  |  |         cmpa.l a3,a0
    313c:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 371a <CstScaleSprite+0x64e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    3140:	                     |                                      |  |  |        |  |  |         move.l a3,d6
    ystartsrc = 0;
    blitheight = winHeight-y;
    3142:	                     |                                      |  |  |        |  |  |         suba.l a3,a0
    3144:	                     |                                      |  |  |        |  |  |         move.l a0,54(sp)
    ystartsrc = 0;
    3148:	                     |                                      |  |  |        |  |  |         moveq #0,d2


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    314a:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    314c:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    314e:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    3150:	                     |                                      |  |  |  |     |  |  |         tst.w d7
    3152:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 3478 <CstScaleSprite+0x3ac>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    3156:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1e7bc <winWidth>,a5
    315c:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    315e:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 35f8 <CstScaleSprite+0x52c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    3162:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    3164:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    3166:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 371a <CstScaleSprite+0x64e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    316a:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    316c:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    316e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,68(sp)
    3172:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    3174:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18e8a <__mulsi3>,a6
    317a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,-(sp)
    317c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    317e:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    3180:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    3182:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3184:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3186:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    318a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    318e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d7
    3190:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    3192:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d6,-(sp)
    3194:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    3196:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    3198:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    319a:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    319c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    319e:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    31a0:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    31a2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    31a6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d2
    31a8:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d2
    31ac:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
    31b0:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d1
    31b2:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d3,d1
    31b4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    31b6:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d2
    31b8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d2,d0
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a4
    31bc:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 4042(a4),a4
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d0
    31c2:	                     |                                      |  |  |  |  |  |  |  |  |  |   not.w d0
    31c4:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
    31c6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,52(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31ca:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31d0:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e876 <SysBase>,a6
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    31d8:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    31de:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    31f2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    31f8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    31fa:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    31fc:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 39fa <CstScaleSprite+0x92e>
    3200:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3202:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 70(sp),a1
    3206:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3208:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    320c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 56(sp),d2
    3210:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3214:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
    3216:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,74(sp)
    321a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    321e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,54(sp)
    3222:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3226:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d6
    322a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d6,d6
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    322c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3230:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    3234:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3236:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    3238:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,58(sp)
    if( destinationtype != SCREEN)
    323c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,d5
    3240:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3a6a <CstScaleSprite+0x99e>
      next = CstCleanupQueueViewBuffer;
    3244:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e79c <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    324a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e876 <SysBase>,a6
    3250:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3252:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3254:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3258:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    325a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e79c <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3260:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    3264:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    3266:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    326c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3272:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3274:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3276:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3ab0 <CstScaleSprite+0x9e4>
    327a:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    327c:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d7
    3280:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    3282:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3286:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    328a:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3290:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    3296:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    329a:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    329c:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e7bc <winWidth>,d0
    32a2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    32a4:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    32a6:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    32a8:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    32aa:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 37ee <CstScaleSprite+0x722>
    32ae:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    32b0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d5
  WaitBlit();
    32b2:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l #125058,d3
    32b8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    32ba:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    32bc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    32c0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
  custom->bltalwm = bltalwm;
    32c6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
  custom->bltamod = bltamod;
    32ce:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
  custom->bltbmod = bltbmod;
    32d4:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb193d>
  custom->bltcmod = bltcmod;
    32da:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb193b>
  custom->bltdmod = bltdmod;
    32e0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
  custom->bltcon0 = bltcon0;
    32e6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
  custom->bltcon1 = bltcon1;  
    32ee:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    32f6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    32fa:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d6
    32fc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d6
    32fe:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d6
    bltbpt += bltbptplus;
    3302:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    3308:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e7bc <winWidth>,d5
    330e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d5
    3310:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1e7c2 <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3316:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    331c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    332a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    3330:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3336:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3338:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 387e <CstScaleSprite+0x7b2>
    333c:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    333e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    3340:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3342:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    3344:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    334a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    334e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    3350:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    bltdpt += bltcptplus;
    WaitBlit();
    3352:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3354:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3356:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    335a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    335c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3362:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    3368:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    336e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3374:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3376:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 38c0 <CstScaleSprite+0x7f4>
    337a:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    337c:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    337e:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3380:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    3382:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    3388:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    338a:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    338c:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    338e:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3390:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3394:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3396:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    339c:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    33a2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    33a8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33ae:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33b0:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 38fe <CstScaleSprite+0x832>
    33b4:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33b6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33b8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33ba:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33bc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    33c2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    33c4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    33c6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    33c8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33ca:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33ce:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33d0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    33d6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    33dc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    33e2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33e8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33ea:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 393c <CstScaleSprite+0x870>
    33ee:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33f0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33f2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33f4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33f6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    33fc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d6
    bltcpt += bltcptplus;
    33fe:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d5
    WaitBlit();
    3400:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3402:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3404:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3408:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    340a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3410:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    3416:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    341c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3422:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3424:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 397a <CstScaleSprite+0x8ae>
    3428:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    342a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    342c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d7
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d7
    3430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    WaitBlit();
    3436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    343a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
    3446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    3448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1e788 <CstBackDrop>,a4
    if(y + single->height < 0) {
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a3,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d2
    3458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 312e <CstScaleSprite+0x62>
    if(y + single->height < 0) {
    345c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    345e:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 371a <CstScaleSprite+0x64e>
    ystartsrc = y*-1;
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a3,d2
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d2
    blitheight = single->height+y;
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,54(sp)
    ystartdst = 0;
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d6
    if(x + single->width < 0) {
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d7
    3474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 3156 <CstScaleSprite+0x8a>
    if(x + single->width < 0) {
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    347a:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 371a <CstScaleSprite+0x64e>
    cutwordssource = (x*-1)/16; 
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d3,d0
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,52(sp)
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    3492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d7
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d7
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,68(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18e8a <__mulsi3>,a6
    34a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1e7bc <winWidth>,-(sp)
    34a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d6,-(sp)
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    34ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    34ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d7
    34b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 3730 <CstScaleSprite+0x664>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 52(sp),d7
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d7
    34c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,74(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    34ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 68(sp),a0
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d7
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d7
  custom->bltcon0 = bltcon0;
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d7
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,72(sp)
  custom->bltcon1 = bltcon1;  
    34e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d7
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d7
    34e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,58(sp)
      extrawords = 1;
    34e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 52(sp),a4
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,-(sp)
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    34f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d4
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    350e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l 1e876 <SysBase>,a6
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    3530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    353a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 379a <CstScaleSprite+0x6ce>
    353e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 52(sp),d0
    3544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d0
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    354a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 56(sp),d2
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,54(sp)
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 68(sp),d6
    3566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d6,d0
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    356a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 74(sp),d6
    356e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d6,d6
    if( destinationtype != SCREEN)
    3570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,d5
    3574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 37d8 <CstScaleSprite+0x70c>
      next = CstCleanupQueueViewBuffer;
    3578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1e79c <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    357e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 1e876 <SysBase>,a6
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    358c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    358e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1e79c <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    3594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    359a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person;
    35a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    35a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    35aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3a44 <CstScaleSprite+0x978>
    35ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 52(sp),d0
    35b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    35ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    35be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    35c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1e7bc <winWidth>,d0
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    35d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    35d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    35d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    35da:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32ae <CstScaleSprite+0x1e2>
    35de:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 37ee <CstScaleSprite+0x722>
      destination = (UWORD *) CstDrawBuffer;      
    35e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1e798 <CstDrawBuffer>,a4
      break;
    35e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 3120 <CstScaleSprite+0x54>
    ystartdst = y;
    35ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a3,d6
    blitheight = single->height;
    35ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,54(sp)
    ystartsrc = 0;
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d2
    35f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 314a <CstScaleSprite+0x7e>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    35f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18e8a <__mulsi3>,a3
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,-(sp)
    3600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    3602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    3604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    360a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    360e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d7
    3614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d7
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d6,-(sp)
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    361a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    361c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d7,a0
    3622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d2
    362c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d2
    3630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d2,58(sp)
    3634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    3636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d3,d0
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    363a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    363c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a3
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a3),a3
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l 1e876 <SysBase>,a6
    364e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    3650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    3652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    3656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    3658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    366a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    3674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 399e <CstScaleSprite+0x8d2>
    3678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    367c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    3680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 56(sp),d2
    3684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d7,d7
    368a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   movea.w d6,a4
    3690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    3694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    3698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 58(sp),d6
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    36a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,58(sp)
    if( destinationtype != SCREEN)
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,d5
    36a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 39d6 <CstScaleSprite+0x90a>
      next = CstCleanupQueueViewBuffer;
    36ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1e79c <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 1e876 <SysBase>,a6
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    36ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    36bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    36c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1e79c <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    36cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    36ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    36d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    36dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    36de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3a86 <CstScaleSprite+0x9ba>
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    36e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    36ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    36f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    36f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    36fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    36fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w 52(sp)
    cutwordssource = 0;
    3700:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    3702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1e7bc <winWidth>,d0
    370a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    3710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3712:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32ae <CstScaleSprite+0x1e2>
    3716:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 37ee <CstScaleSprite+0x722>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    371a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #103191,80(sp)
}
    3722:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3726:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    372a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 184fe <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3730:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    3734:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 52(sp),74(sp)
    373a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 58(sp)
    373e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    3744:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3746:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 52(sp),a4
    374a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    374c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,-(sp)
    374e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    3750:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    3752:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    3754:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    3756:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d4
    3758:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    375a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    375e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    3760:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3764:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    376a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l 1e876 <SysBase>,a6
    3770:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    3772:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    3774:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    3778:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    377a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3780:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3784:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3786:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    378c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3792:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    3794:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    3796:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 353e <CstScaleSprite+0x472>
    379a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    379c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    379e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    37a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 52(sp),d0
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d0
    37a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 56(sp),d2
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    37b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    37b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,54(sp)
    37ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    37be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    37c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 68(sp),d6
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d6,d0
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 74(sp),d6
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d6,d6
    if( destinationtype != SCREEN)
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,d5
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 3578 <CstScaleSprite+0x4ac>
    bltalwm = 0; //Last Word of this channel almost masked out
    37d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e7bc <winWidth>,d0
    37e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    37e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d5
    37e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d5
    37e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    37ea:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 32ae <CstScaleSprite+0x1e2>
    37ee:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    37f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d5
  WaitBlit();
    37f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l #125058,d3
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l d3,a0
    37fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a0),a6
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3802:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb191f>
  custom->bltalwm = bltalwm;
    3808:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1921>
  custom->bltamod = bltamod;
    3810:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb193f>
  custom->bltbmod = bltbmod;
    3816:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb193d>
  custom->bltcmod = bltcmod;
    381c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb193b>
  custom->bltdmod = bltdmod;
    3822:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1941>
  custom->bltcon0 = bltcon0;
    3828:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb191b>
  custom->bltcon1 = bltcon1;  
    3830:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb191d>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3838:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    383a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    383c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d6
    383e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d6
    3840:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d6
    bltbpt += bltbptplus;
    3844:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    384a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e7bc <winWidth>,d5
    3850:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d5
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1e7c2 <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3858:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    385e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3864:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    386c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    3872:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3878:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    387a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 333c <CstScaleSprite+0x270>
    387e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    3880:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    3882:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    3884:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d7,d0
    3886:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    3888:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w a3,d0
    388a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    3890:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    3894:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    3896:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    3898:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l d3,a0
    389a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a0),a6
    389c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    38a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    38bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 337a <CstScaleSprite+0x2ae>
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    38c2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    38c4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d7,d0
    38c8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    38ca:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w a3,d0
    38cc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    38d2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    38d4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    38d6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l d3,a0
    38d8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a0),a6
    38da:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38de:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38e0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    38e6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    38ec:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    38f2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38f8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    38fa:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 33b4 <CstScaleSprite+0x2e8>
    38fe:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3900:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3902:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3904:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d7,d0
    3906:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3908:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w a3,d0
    390a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    3910:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    3912:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    3914:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l d3,a0
    3916:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a0),a6
    3918:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    391c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    391e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3924:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    392a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    3930:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3936:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3938:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 33ee <CstScaleSprite+0x322>
    393c:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    393e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    3940:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    3942:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d7,d0
    3944:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3946:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w a3,d0
    3948:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    bltbpt += bltbptplus;
    394e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d6
    bltcpt += bltcptplus;
    3950:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d5
    WaitBlit();
    3952:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l d3,a0
    3954:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a0),a6
    3956:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    395a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    395c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb192b>
    custom->bltbpt = (APTR) bltbpt;
    3962:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1927>
    custom->bltcpt = (APTR) bltcpt;
    3968:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1923>
    custom->bltdpt = (APTR) bltdpt;
    396e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb192f>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3974:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    3976:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3428 <CstScaleSprite+0x35c>
    397a:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    397c:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d1,d0
    397e:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    3980:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d7
    3982:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d2,d7
    3984:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w a3,d7
    3986:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1933>
    WaitBlit();
    398c:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l d3,a0
    398e:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a0),a6
    3990:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    3994:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    3998:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 32(sp),sp
    399c:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    399e:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    39a0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    39a2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    39a4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    39a6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    39aa:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 56(sp),d2
    39ae:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    39b2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d7,d7
    39b4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    39b8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  movea.w d6,a4
    39ba:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    39be:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    39c2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 58(sp),d6
    39c6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    39c8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    39ca:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,58(sp)
    if( destinationtype != SCREEN)
    39ce:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,d5
    39d2:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 36ac <CstScaleSprite+0x5e0>
    extrawords = 1;
    39d6:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d7
    39d8:	|  |  |  |  |  |  |                                   |  |  |  |                           movea.w #-1,a4
    39dc:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    39de:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w 52(sp)
    cutwordssource = 0;
    39e2:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    39e4:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1e7bc <winWidth>,d0
    39ea:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d6,d5
    39ee:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d5
    39f0:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    39f2:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 32ae <CstScaleSprite+0x1e2>
    39f6:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 37ee <CstScaleSprite+0x722>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    39fa:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    39fc:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    39fe:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    3a00:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 70(sp),a1
    3a04:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a06:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a0a:	|  |  |     |  |  |                                   |  |  |  |                           move.w 56(sp),d2
    3a0e:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a12:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
    3a14:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,74(sp)
    3a18:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a1c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,54(sp)
    3a20:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a24:	|  |  |     |  |  |                                   |  |  |  |                           move.w 70(sp),d6
    3a28:	|  |  |     |  |  |                                   |  |  |  |                           add.w d6,d6
  custom->bltcon0 = bltcon0;
    3a2a:	|  |  |     |  |  |                                   |  |  |  |                           move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3a2e:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a32:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3a34:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d7
    3a36:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,58(sp)
    if( destinationtype != SCREEN)
    3a3a:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,d5
    3a3e:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 3244 <CstScaleSprite+0x178>
    3a42:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3a6a <CstScaleSprite+0x99e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3a44:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3a46:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3a48:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3a4a:	|  |  |        |  |                                   |     |  |                           add.w 52(sp),d0
    3a4e:	|  |  |        |  |                                   |     |  |                           add.w d7,d0
    3a50:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3a54:	|  |  |        |  |                                   |     |  |                           move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3a58:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3a5c:	|  |  |        |  |                                   |     |  |                           move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3a62:	|  |  |        |  |                                   |     |  |                           clr.w 52(sp)
    3a66:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 35cc <CstScaleSprite+0x500>
    3a6a:	|  |  '--------|--|-----------------------------------------|--|-------------------------> movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3a6e:	|  |           |  |                                         |  |                           clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a70:	|  |           |  |                                         |  |                           move.l 1e7bc <winWidth>,d0
    3a76:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3a78:	|  |           |  |                                         |  |                           move.w d6,d5
    3a7a:	|  |           |  |                                         |  |                           add.w d0,d5
    3a7c:	|  |           |  |                                         |  |                           tst.l d1
    3a7e:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 32ae <CstScaleSprite+0x1e2>
    3a82:	|  |           '--------------------------------------------|--|-------------------------- bra.w 37ee <CstScaleSprite+0x722>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3a86:	|  |                                                        |  '-------------------------> moveq #15,d0
    3a88:	|  |                                                        |                              add.l d1,d0
    3a8a:	|  |                                                        |                              asr.l #4,d0
    3a8c:	|  |                                                        |                              addq.w #1,d0
    3a8e:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3a92:	|  |                                                        |                              move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3a96:	|  |                                                        |                              move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3a9a:	|  |                                                        |                              move.w a4,14(a0)
    3a9e:	|  |                                                        |                              movea.w #-1,a4
    3aa2:	|  |                                                        |                              moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3aa4:	|  |                                                        |                              clr.w 52(sp)
    cutwordssource = 0;
    3aa8:	|  |                                                        |                              suba.l a3,a3
    extrawords = 1;
    3aaa:	|  |                                                        |                              moveq #1,d7
    3aac:	|  |                                                        '----------------------------- bra.w 3704 <CstScaleSprite+0x638>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3ab0:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3ab2:	|                                                                                          add.l d1,d0
    3ab4:	|                                                                                          asr.l #4,d0
    3ab6:	|                                                                                          move.w 70(sp),d7
    3aba:	|                                                                                          add.w d0,d7
    3abc:	|                                                                                          move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3ac0:	|                                                                                          move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3ac4:	|                                                                                          move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3aca:	|                                                                                          move.w 54(sp),14(a0)
    3ad0:	|                                                                                          movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3ad4:	|                                                                                          clr.w d7
    3ad6:	'----------------------------------------------------------------------------------------- bra.w 329c <CstScaleSprite+0x1d0>

00003ada <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3ada:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3adc:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3ae2:	move.l 8(sp),d0
    3ae6:	movea.l (sp),a0
    3ae8:	move.l d0,128(a0)
}
    3aec:	nop
    3aee:	addq.l #4,sp
    3af0:	rts

00003af2 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3af2:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3af6:	move.l 1e794 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3afe:	move.l 1e798 <CstDrawBuffer>,d0
    3b04:	move.l d0,1e794 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b0a:	move.l 16(sp),1e798 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b12:	move.l 1e79c <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b1a:	move.l 1e7a0 <CstCleanupQueueDrawBuffer>,d0
    3b20:	move.l d0,1e79c <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b26:	move.l 12(sp),1e7a0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3b2e:	move.l 1e790 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3b36:	move.l 1e794 <CstViewBuffer>,d0
    3b3c:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3b40:	move.l 4(sp),d0
    3b44:	clr.w d0
    3b46:	swap d0
    3b48:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3b4c:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3b50:	movea.w #118,a0
    3b54:	adda.l 8(sp),a0
    3b58:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3b5a:	movea.w #114,a0
    3b5e:	adda.l 8(sp),a0
    3b62:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3b66:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3b6e:	move.l 4(sp),d0
    3b72:	clr.w d0
    3b74:	swap d0
    3b76:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3b7a:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3b7e:	movea.w #126,a0
    3b82:	adda.l 8(sp),a0
    3b86:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3b88:	movea.w #122,a0
    3b8c:	adda.l 8(sp),a0
    3b90:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3b94:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3b9c:	move.l 4(sp),d0
    3ba0:	clr.w d0
    3ba2:	swap d0
    3ba4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3ba8:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3bac:	movea.l 8(sp),a0
    3bb0:	lea 134(a0),a0
    3bb4:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3bb6:	movea.l 8(sp),a0
    3bba:	lea 130(a0),a0
    3bbe:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bc2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bca:	move.l 4(sp),d0
    3bce:	clr.w d0
    3bd0:	swap d0
    3bd2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bd6:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3bda:	movea.l 8(sp),a0
    3bde:	lea 142(a0),a0
    3be2:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3be4:	movea.l 8(sp),a0
    3be8:	lea 138(a0),a0
    3bec:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bf0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bf8:	move.l 4(sp),d0
    3bfc:	clr.w d0
    3bfe:	swap d0
    3c00:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c04:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c08:	movea.l 8(sp),a0
    3c0c:	lea 150(a0),a0
    3c10:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c12:	movea.l 8(sp),a0
    3c16:	lea 146(a0),a0
    3c1a:	move.w 2(sp),(a0)

}
    3c1e:	nop
    3c20:	lea 20(sp),sp
    3c24:	rts

00003c26 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c26:	          lea -68(sp),sp
    3c2a:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c2c:	          pea 1934a <PutChar+0x3aa>
    3c32:	          jsr 184fe <KPrintF>
    3c38:	          addq.l #4,sp

  width = width / 8;
    3c3a:	          move.l 76(sp),d0
    3c3e:	      ,-- bpl.s 3c42 <CstReserveBackdrop+0x1c>
    3c40:	      |   addq.l #7,d0
    3c42:	      '-> asr.l #3,d0
    3c44:	          move.l d0,76(sp)

  if( width < 40) 
    3c48:	          moveq #39,d0
    3c4a:	          cmp.l 76(sp),d0
    3c4e:	      ,-- blt.s 3c64 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3c50:	      |   pea 19364 <PutChar+0x3c4>
    3c56:	      |   jsr 184fe <KPrintF>
    3c5c:	      |   addq.l #4,sp
    return FALSE;
    3c5e:	      |   clr.w d0
    3c60:	,-----|-- bra.w 3fa0 <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3c64:	|     '-> pea 193a2 <PutChar+0x402>
    3c6a:	|         jsr 184fe <KPrintF>
    3c70:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3c72:	|         move.l 76(sp),-(sp)
    3c76:	|         jsr 10ce <CstCreateCopperlist>
    3c7c:	|         addq.l #4,sp
    3c7e:	|         move.l d0,1e790 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3c84:	|         pea 193c2 <PutChar+0x422>
    3c8a:	|         jsr 184fe <KPrintF>
    3c90:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3c92:	|         move.l 76(sp),d1
    3c96:	|         move.l 80(sp),d0
    3c9a:	|         muls.w d1,d0
    3c9c:	|         move.w d0,1e786 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3ca2:	|         move.w 1e786 <CstBackdropSizePlane>,d1
    3ca8:	|         move.w d1,d0
    3caa:	|         add.w d0,d0
    3cac:	|         add.w d0,d0
    3cae:	|         add.w d1,d0
    3cb0:	|         move.w d0,1e784 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3cb6:	|         move.w 1e784 <CstBackdropSize>,d0
    3cbc:	|         move.w d0,d0
    3cbe:	|         andi.l #65535,d0
    3cc4:	|         move.l d0,60(sp)
    3cc8:	|         moveq #2,d1
    3cca:	|         move.l d1,56(sp)
    3cce:	|         move.l 1e876 <SysBase>,d0
    3cd4:	|         movea.l d0,a6
    3cd6:	|         move.l 60(sp),d0
    3cda:	|         move.l 56(sp),d1
    3cde:	|         jsr -684(a6)
    3ce2:	|         move.l d0,52(sp)
    3ce6:	|         move.l 52(sp),d0
    3cea:	|         move.l d0,1e788 <CstBackDrop>
  if( !CstBackDrop)
    3cf0:	|         move.l 1e788 <CstBackDrop>,d0
    3cf6:	|     ,-- bne.s 3d0c <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3cf8:	|     |   pea 193e9 <PutChar+0x449>
    3cfe:	|     |   jsr 184fe <KPrintF>
    3d04:	|     |   addq.l #4,sp
    return FALSE;  
    3d06:	|     |   clr.w d0
    3d08:	+-----|-- bra.w 3fa0 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d0c:	|     '-> pea 19421 <PutChar+0x481>
    3d12:	|         jsr 184fe <KPrintF>
    3d18:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d1a:	|         move.l 1e788 <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d22:	|         clr.l 64(sp)
    3d26:	|     ,-- bra.s 3d3c <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d28:	|  ,--|-> move.l 68(sp),d0
    3d2c:	|  |  |   move.l d0,d1
    3d2e:	|  |  |   addq.l #4,d1
    3d30:	|  |  |   move.l d1,68(sp)
    3d34:	|  |  |   movea.l d0,a0
    3d36:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d38:	|  |  |   addq.l #1,64(sp)
    3d3c:	|  |  '-> move.w 1e784 <CstBackdropSize>,d0
    3d42:	|  |      lsr.w #2,d0
    3d44:	|  |      move.w d0,d0
    3d46:	|  |      andi.l #65535,d0
    3d4c:	|  |      cmp.l 64(sp),d0
    3d50:	|  '----- bgt.s 3d28 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3d52:	|         move.w 1e784 <CstBackdropSize>,d0
    3d58:	|         move.w d0,d0
    3d5a:	|         andi.l #65535,d0
    3d60:	|         move.l 76(sp),d1
    3d64:	|         add.l d1,d1
    3d66:	|         add.l d1,d0
    3d68:	|         move.l d0,48(sp)
    3d6c:	|         moveq #2,d0
    3d6e:	|         move.l d0,44(sp)
    3d72:	|         move.l 1e876 <SysBase>,d0
    3d78:	|         movea.l d0,a6
    3d7a:	|         move.l 48(sp),d0
    3d7e:	|         move.l 44(sp),d1
    3d82:	|         jsr -684(a6)
    3d86:	|         move.l d0,40(sp)
    3d8a:	|         move.l 40(sp),d0
    3d8e:	|         move.l d0,1e798 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3d94:	|         move.l 1e798 <CstDrawBuffer>,d0
    3d9a:	|     ,-- bne.s 3db0 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3d9c:	|     |   pea 19447 <PutChar+0x4a7>
    3da2:	|     |   jsr 184fe <KPrintF>
    3da8:	|     |   addq.l #4,sp
    return FALSE;  
    3daa:	|     |   clr.w d0
    3dac:	+-----|-- bra.w 3fa0 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3db0:	|     '-> pea 19481 <PutChar+0x4e1>
    3db6:	|         jsr 184fe <KPrintF>
    3dbc:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3dbe:	|         move.w 1e784 <CstBackdropSize>,d0
    3dc4:	|         move.w d0,d0
    3dc6:	|         andi.l #65535,d0
    3dcc:	|         move.l 76(sp),d1
    3dd0:	|         add.l d1,d1
    3dd2:	|         add.l d1,d0
    3dd4:	|         move.l d0,36(sp)
    3dd8:	|         moveq #2,d1
    3dda:	|         move.l d1,32(sp)
    3dde:	|         move.l 1e876 <SysBase>,d0
    3de4:	|         movea.l d0,a6
    3de6:	|         move.l 36(sp),d0
    3dea:	|         move.l 32(sp),d1
    3dee:	|         jsr -684(a6)
    3df2:	|         move.l d0,28(sp)
    3df6:	|         move.l 28(sp),d0
    3dfa:	|         move.l d0,1e794 <CstViewBuffer>
  if( !CstViewBuffer)
    3e00:	|         move.l 1e794 <CstViewBuffer>,d0
    3e06:	|     ,-- bne.s 3e1c <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3e08:	|     |   pea 194a9 <PutChar+0x509>
    3e0e:	|     |   jsr 184fe <KPrintF>
    3e14:	|     |   addq.l #4,sp
    return FALSE;  
    3e16:	|     |   clr.w d0
    3e18:	+-----|-- bra.w 3fa0 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3e1c:	|     '-> pea 194e3 <PutChar+0x543>
    3e22:	|         jsr 184fe <KPrintF>
    3e28:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3e2a:	|         move.l 1e798 <CstDrawBuffer>,d1
    3e30:	|         move.l 76(sp),d0
    3e34:	|     ,-- bpl.s 3e38 <CstReserveBackdrop+0x212>
    3e36:	|     |   addq.l #3,d0
    3e38:	|     '-> asr.l #2,d0
    3e3a:	|         add.l d0,d0
    3e3c:	|         add.l d0,d0
    3e3e:	|         add.l d1,d0
    3e40:	|         move.l d0,1e798 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3e46:	|         move.l 1e794 <CstViewBuffer>,d1
    3e4c:	|         move.l 76(sp),d0
    3e50:	|     ,-- bpl.s 3e54 <CstReserveBackdrop+0x22e>
    3e52:	|     |   addq.l #3,d0
    3e54:	|     '-> asr.l #2,d0
    3e56:	|         add.l d0,d0
    3e58:	|         add.l d0,d0
    3e5a:	|         add.l d1,d0
    3e5c:	|         move.l d0,1e794 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e62:	|         move.l #5200,24(sp)
    3e6a:	|         moveq #2,d0
    3e6c:	|         move.l d0,20(sp)
    3e70:	|         move.l 1e876 <SysBase>,d0
    3e76:	|         movea.l d0,a6
    3e78:	|         move.l 24(sp),d0
    3e7c:	|         move.l 20(sp),d1
    3e80:	|         jsr -684(a6)
    3e84:	|         move.l d0,16(sp)
    3e88:	|         move.l 16(sp),d0
    3e8c:	|         move.l d0,1e7b0 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e92:	|         move.l #5600,12(sp)
    3e9a:	|         moveq #2,d1
    3e9c:	|         move.l d1,8(sp)
    3ea0:	|         move.l 1e876 <SysBase>,d0
    3ea6:	|         movea.l d0,a6
    3ea8:	|         move.l 12(sp),d0
    3eac:	|         move.l 8(sp),d1
    3eb0:	|         jsr -684(a6)
    3eb4:	|         move.l d0,4(sp)
    3eb8:	|         move.l 4(sp),d0
    3ebc:	|         move.l d0,1e7b4 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3ec2:	|         move.l 1e788 <CstBackDrop>,d0
    3ec8:	|         clr.l -(sp)
    3eca:	|         pea 5 <_start+0x5>
    3ece:	|         pea 100 <copyString+0x48>
    3ed2:	|         pea 140 <decodeFilename+0x28>
    3ed6:	|         pea 1950b <PutChar+0x56b>
    3edc:	|         move.l d0,-(sp)
    3ede:	|         jsr 185e6 <debug_register_bitmap>
    3ee4:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3ee8:	|         move.l 80(sp),d0
    3eec:	|         movea.w d0,a1
    3eee:	|         move.l 76(sp),d0
    3ef2:	|         lsl.w #3,d0
    3ef4:	|         movea.w d0,a0
    3ef6:	|         move.l 1e798 <CstDrawBuffer>,d0
    3efc:	|         clr.l -(sp)
    3efe:	|         pea 5 <_start+0x5>
    3f02:	|         move.l a1,-(sp)
    3f04:	|         move.l a0,-(sp)
    3f06:	|         pea 1951b <PutChar+0x57b>
    3f0c:	|         move.l d0,-(sp)
    3f0e:	|         jsr 185e6 <debug_register_bitmap>
    3f14:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3f18:	|         move.l 80(sp),d0
    3f1c:	|         movea.w d0,a1
    3f1e:	|         move.l 76(sp),d0
    3f22:	|         lsl.w #3,d0
    3f24:	|         movea.w d0,a0
    3f26:	|         move.l 1e794 <CstViewBuffer>,d0
    3f2c:	|         clr.l -(sp)
    3f2e:	|         pea 5 <_start+0x5>
    3f32:	|         move.l a1,-(sp)
    3f34:	|         move.l a0,-(sp)
    3f36:	|         pea 1952a <PutChar+0x58a>
    3f3c:	|         move.l d0,-(sp)
    3f3e:	|         jsr 185e6 <debug_register_bitmap>
    3f44:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3f48:	|         move.l 1e790 <CstCopperList>,d0
    3f4e:	|     ,-- beq.s 3f60 <CstReserveBackdrop+0x33a>
    3f50:	|     |   move.l 1e798 <CstDrawBuffer>,d0
    3f56:	|     +-- beq.s 3f60 <CstReserveBackdrop+0x33a>
    3f58:	|     |   move.l 1e794 <CstViewBuffer>,d0
    3f5e:	|  ,--|-- bne.s 3f72 <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3f60:	|  |  '-> pea 19539 <PutChar+0x599>
    3f66:	|  |      jsr 184fe <KPrintF>
    3f6c:	|  |      addq.l #4,sp
    return FALSE;
    3f6e:	|  |      clr.w d0
    3f70:	+--|----- bra.s 3fa0 <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3f72:	|  '----> pea 19566 <PutChar+0x5c6>
    3f78:	|         jsr 184fe <KPrintF>
    3f7e:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3f80:	|         move.l 1e790 <CstCopperList>,d0
    3f86:	|         move.l d0,-(sp)
    3f88:	|         jsr 3ada <CstSetCl>
    3f8e:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3f90:	|         pea 1958d <PutChar+0x5ed>
    3f96:	|         jsr 184fe <KPrintF>
    3f9c:	|         addq.l #4,sp
  return TRUE;
    3f9e:	|         moveq #1,d0

}
    3fa0:	'-------> movea.l (sp)+,a6
    3fa2:	          lea 68(sp),sp
    3fa6:	          rts

00003fa8 <CstUnfreeze>:

void CstUnfreeze() {
    3fa8:	       lea -52(sp),sp
    3fac:	       move.l a6,-(sp)
    3fae:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3fb0:	       pea 195b0 <PutChar+0x610>
    3fb6:	       jsr 184fe <KPrintF>
    3fbc:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3fbe:	       move.l 1e7bc <winWidth>,d0
    3fc4:	       lsr.l #3,d0
    3fc6:	       move.l d0,d1
    3fc8:	       move.l 1e7c0 <winHeight>,d0
    3fce:	       move.l d0,d0
    3fd0:	       muls.w d0,d1
    3fd2:	       move.w d1,d0
    3fd4:	       add.w d0,d0
    3fd6:	       add.w d0,d0
    3fd8:	       move.w d0,d2
    3fda:	       add.w d1,d2
    3fdc:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3fe0:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3fe8:	       move.l 1e7c0 <winHeight>,d0
    3fee:	       move.l d0,d0
    3ff0:	       movea.w d0,a1
    3ff2:	       move.l 1e7bc <winWidth>,d0
    3ff8:	       move.l d0,d0
    3ffa:	       movea.w d0,a0
    3ffc:	       move.l 1e78c <CstBackDropBackup>,d0
    4002:	       clr.l -(sp)
    4004:	       pea 5 <_start+0x5>
    4008:	       move.l a1,-(sp)
    400a:	       move.l a0,-(sp)
    400c:	       pea 191bf <PutChar+0x21f>
    4012:	       move.l d0,-(sp)
    4014:	       jsr 185e6 <debug_register_bitmap>
    401a:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    401e:	       move.l 1e78c <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    4026:	       move.l 1e788 <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    402e:	       clr.l 48(sp)
    4032:	   ,-- bra.s 4058 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    4034:	,--|-> move.l 56(sp),d1
    4038:	|  |   move.l d1,d0
    403a:	|  |   addq.l #4,d0
    403c:	|  |   move.l d0,56(sp)
    4040:	|  |   move.l 52(sp),d0
    4044:	|  |   move.l d0,d2
    4046:	|  |   addq.l #4,d2
    4048:	|  |   move.l d2,52(sp)
    404c:	|  |   movea.l d1,a0
    404e:	|  |   move.l (a0),d1
    4050:	|  |   movea.l d0,a0
    4052:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    4054:	|  |   addq.l #1,48(sp)
    4058:	|  '-> move.w 46(sp),d0
    405c:	|      lsr.w #2,d0
    405e:	|      move.w d0,d0
    4060:	|      andi.l #65535,d0
    4066:	|      cmp.l 48(sp),d0
    406a:	'----- bgt.s 4034 <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    406c:	       move.l 1e7a0 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    4074:	       moveq #20,d0
    4076:	       move.l d0,34(sp)
    407a:	       clr.l 30(sp)
    407e:	       move.l 1e876 <SysBase>,d0
    4084:	       movea.l d0,a6
    4086:	       move.l 34(sp),d0
    408a:	       move.l 30(sp),d1
    408e:	       jsr -684(a6)
    4092:	       move.l d0,26(sp)
    4096:	       move.l 26(sp),d0
    409a:	       move.l d0,1e7a0 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    40a0:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40a6:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    40ac:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40b2:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    40b4:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40ba:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    40be:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40c4:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    40c8:	       move.l 1e7bc <winWidth>,d0
    40ce:	       lsr.l #4,d0
    40d0:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40d6:	       move.l d0,d0
    40d8:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    40dc:	       move.l 1e7c0 <winHeight>,d0
    40e2:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40e8:	       move.l d0,d0
    40ea:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    40ee:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40f4:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    40f8:	       movea.l 1e7a0 <CstCleanupQueueDrawBuffer>,a0
    40fe:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    4102:	       move.l 1e79c <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    410a:	       moveq #20,d2
    410c:	       move.l d2,22(sp)
    4110:	       clr.l 18(sp)
    4114:	       move.l 1e876 <SysBase>,d0
    411a:	       movea.l d0,a6
    411c:	       move.l 22(sp),d0
    4120:	       move.l 18(sp),d1
    4124:	       jsr -684(a6)
    4128:	       move.l d0,14(sp)
    412c:	       move.l 14(sp),d0
    4130:	       move.l d0,1e79c <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    4136:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    413c:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    4142:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    4148:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    414a:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    4150:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    4154:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    415a:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    415e:	       move.l 1e7bc <winWidth>,d0
    4164:	       lsr.l #4,d0
    4166:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    416c:	       move.l d0,d0
    416e:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    4172:	       move.l 1e7c0 <winHeight>,d0
    4178:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    417e:	       move.l d0,d0
    4180:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    4184:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    418a:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    418e:	       movea.l 1e79c <CstCleanupQueueViewBuffer>,a0
    4194:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    4198:	       move.l 1e78c <CstBackDropBackup>,d0
    419e:	   ,-- beq.s 41c6 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    41a0:	   |   pea 195db <PutChar+0x63b>
    41a6:	   |   jsr 184fe <KPrintF>
    41ac:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    41ae:	   |   move.l 1e78c <CstBackDropBackup>,10(sp)
    41b6:	   |   move.l 1e876 <SysBase>,d0
    41bc:	   |   movea.l d0,a6
    41be:	   |   movea.l 10(sp),a1
    41c2:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    41c6:	   '-> pea 195ff <PutChar+0x65f>
    41cc:	       jsr 184fe <KPrintF>
    41d2:	       addq.l #4,sp

}
    41d4:	       nop
    41d6:	       move.l (sp)+,d2
    41d8:	       movea.l (sp)+,a6
    41da:	       lea 52(sp),sp
    41de:	       rts

000041e0 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    41e0:	       lea -28(sp),sp
    41e4:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    41e8:	       move.l 52(sp),-(sp)
    41ec:	       jsr 16b08 <stringWidth>
    41f2:	       addq.l #4,sp
    41f4:	       asr.l #1,d0
    41f6:	       move.l d0,-(sp)
    41f8:	       jsr 18930 <__floatsisf>
    41fe:	       addq.l #4,sp
    4200:	       move.l d0,d1
    4202:	       move.l 1e1fc <cameraZoom>,d0
    4208:	       move.l d0,-(sp)
    420a:	       move.l d1,-(sp)
    420c:	       jsr 187e6 <__divsf3>
    4212:	       addq.l #8,sp
    4214:	       move.l d0,-(sp)
    4216:	       jsr 188c8 <__fixsfsi>
    421c:	       addq.l #4,sp
    421e:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4222:	       move.l 56(sp),d0
    4226:	       sub.l 44(sp),d0
    422a:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    422e:	       move.l 56(sp),d0
    4232:	       add.l 44(sp),d0
    4236:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    423a:	       moveq #12,d0
    423c:	       move.l d0,32(sp)
    4240:	       clr.l 28(sp)
    4244:	       move.l 1e876 <SysBase>,d0
    424a:	       movea.l d0,a6
    424c:	       move.l 32(sp),d0
    4250:	       move.l 28(sp),d1
    4254:	       jsr -684(a6)
    4258:	       move.l d0,24(sp)
    425c:	       move.l 24(sp),d0
    4260:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4264:	       movea.l 1e7b8 <speech>,a0
    426a:	       move.l 4(a0),d0
    426e:	       movea.l 20(sp),a0
    4272:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    4276:	       move.l 52(sp),-(sp)
    427a:	       jsr b8 <copyString>
    4280:	       addq.l #4,sp
    4282:	       movea.l 20(sp),a0
    4286:	       move.l d0,(a0)
	newLine -> x = xx1;
    4288:	       movea.l 20(sp),a0
    428c:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4292:	       movea.l 1e7b8 <speech>,a0
    4298:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    429e:	       moveq #4,d0
    42a0:	       cmp.l 40(sp),d0
    42a4:	   ,-- blt.s 42c6 <addSpeechLine+0xe6>
    42a6:	   |   movea.l 60(sp),a0
    42aa:	   |   move.l (a0),d1
    42ac:	   |   moveq #5,d0
    42ae:	   |   sub.l 40(sp),d0
    42b2:	   |   cmp.l d1,d0
    42b4:	   +-- ble.s 42c6 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    42b6:	   |   moveq #5,d0
    42b8:	   |   sub.l 40(sp),d0
    42bc:	   |   movea.l 60(sp),a0
    42c0:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    42c2:	,--|-- bra.w 43f2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    42c6:	|  '-> move.l 36(sp),-(sp)
    42ca:	|      jsr 18930 <__floatsisf>
    42d0:	|      addq.l #4,sp
    42d2:	|      move.l d0,d2
    42d4:	|      move.l 1e7bc <winWidth>,d0
    42da:	|      move.l d0,-(sp)
    42dc:	|      jsr 18958 <__floatunsisf>
    42e2:	|      addq.l #4,sp
    42e4:	|      move.l d0,d1
    42e6:	|      move.l 1e1fc <cameraZoom>,d0
    42ec:	|      move.l d0,-(sp)
    42ee:	|      move.l d1,-(sp)
    42f0:	|      jsr 187e6 <__divsf3>
    42f6:	|      addq.l #8,sp
    42f8:	|      move.l #1084227584,-(sp)
    42fe:	|      move.l d0,-(sp)
    4300:	|      jsr 18c24 <__subsf3>
    4306:	|      addq.l #8,sp
    4308:	|      move.l d0,-(sp)
    430a:	|      move.l d2,-(sp)
    430c:	|      jsr 18a18 <__gesf2>
    4312:	|      addq.l #8,sp
    4314:	|      tst.l d0
    4316:	|  ,-- bge.s 431c <addSpeechLine+0x13c>
}
    4318:	+--|-- bra.w 43f2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    431c:	|  '-> movea.l 60(sp),a0
    4320:	|      move.l (a0),d0
    4322:	|      move.l d0,-(sp)
    4324:	|      jsr 18930 <__floatsisf>
    432a:	|      addq.l #4,sp
    432c:	|      move.l d0,-(sp)
    432e:	|      jsr 18852 <__extendsfdf2>
    4334:	|      addq.l #4,sp
    4336:	|      move.l d0,d4
    4338:	|      move.l d1,d5
    433a:	|      move.l 1e7bc <winWidth>,d0
    4340:	|      move.l d0,-(sp)
    4342:	|      jsr 18958 <__floatunsisf>
    4348:	|      addq.l #4,sp
    434a:	|      move.l d0,d1
    434c:	|      move.l 1e1fc <cameraZoom>,d0
    4352:	|      move.l d0,-(sp)
    4354:	|      move.l d1,-(sp)
    4356:	|      jsr 187e6 <__divsf3>
    435c:	|      addq.l #8,sp
    435e:	|      move.l d0,-(sp)
    4360:	|      jsr 18852 <__extendsfdf2>
    4366:	|      addq.l #4,sp
    4368:	|      clr.l -(sp)
    436a:	|      move.l #1075052544,-(sp)
    4370:	|      move.l d1,-(sp)
    4372:	|      move.l d0,-(sp)
    4374:	|      jsr 18bc2 <__subdf3>
    437a:	|      lea 16(sp),sp
    437e:	|      move.l d0,d2
    4380:	|      move.l d1,d3
    4382:	|      move.l 36(sp),-(sp)
    4386:	|      jsr 188f0 <__floatsidf>
    438c:	|      addq.l #4,sp
    438e:	|      move.l d1,-(sp)
    4390:	|      move.l d0,-(sp)
    4392:	|      move.l d3,-(sp)
    4394:	|      move.l d2,-(sp)
    4396:	|      jsr 18bc2 <__subdf3>
    439c:	|      lea 16(sp),sp
    43a0:	|      move.l d1,-(sp)
    43a2:	|      move.l d0,-(sp)
    43a4:	|      move.l d5,-(sp)
    43a6:	|      move.l d4,-(sp)
    43a8:	|      jsr 18a4e <__gtdf2>
    43ae:	|      lea 16(sp),sp
    43b2:	|      tst.l d0
    43b4:	|  ,-- bgt.s 43b8 <addSpeechLine+0x1d8>
}
    43b6:	+--|-- bra.s 43f2 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    43b8:	|  '-> move.l 1e7bc <winWidth>,d0
    43be:	|      move.l d0,-(sp)
    43c0:	|      jsr 18958 <__floatunsisf>
    43c6:	|      addq.l #4,sp
    43c8:	|      move.l d0,d1
    43ca:	|      move.l 1e1fc <cameraZoom>,d0
    43d0:	|      move.l d0,-(sp)
    43d2:	|      move.l d1,-(sp)
    43d4:	|      jsr 187e6 <__divsf3>
    43da:	|      addq.l #8,sp
    43dc:	|      move.l d0,-(sp)
    43de:	|      jsr 188c8 <__fixsfsi>
    43e4:	|      addq.l #4,sp
    43e6:	|      subq.l #5,d0
    43e8:	|      sub.l 36(sp),d0
    43ec:	|      movea.l 60(sp),a0
    43f0:	|      move.l d0,(a0)
}
    43f2:	'----> nop
    43f4:	       movem.l (sp)+,d2-d5/a6
    43f8:	       lea 28(sp),sp
    43fc:	       rts

000043fe <initSpeech>:


void initSpeech () {
    43fe:	       lea -12(sp),sp
    4402:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4404:	       moveq #20,d0
    4406:	       move.l d0,12(sp)
    440a:	       clr.l 8(sp)
    440e:	       move.l 1e876 <SysBase>,d0
    4414:	       movea.l d0,a6
    4416:	       move.l 12(sp),d0
    441a:	       move.l 8(sp),d1
    441e:	       jsr -684(a6)
    4422:	       move.l d0,4(sp)
    4426:	       move.l 4(sp),d0
    442a:	       move.l d0,1e7b8 <speech>
	if (speech) {
    4430:	       move.l 1e7b8 <speech>,d0
    4436:	,----- beq.s 4462 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4438:	|      movea.l 1e7b8 <speech>,a0
    443e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4440:	|      movea.l 1e7b8 <speech>,a0
    4446:	|      clr.l 4(a0)
		speech -> speechY = 0;
    444a:	|      movea.l 1e7b8 <speech>,a0
    4450:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4454:	|      movea.l 1e7b8 <speech>,a0
    445a:	|      moveq #-1,d0
    445c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4460:	|  ,-- bra.s 4470 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4462:	'--|-> pea 1963e <PutChar+0x69e>
    4468:	   |   jsr 184fe <KPrintF>
    446e:	   |   addq.l #4,sp
}
    4470:	   '-> nop
    4472:	       movea.l (sp)+,a6
    4474:	       lea 12(sp),sp
    4478:	       rts

0000447a <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    447a:	       movea.l 1e7b8 <speech>,a0
    4480:	       move.l 4(a0),d0
    4484:	,----- beq.s 4492 <isThereAnySpeechGoingOn+0x18>
    4486:	|      movea.l 1e7b8 <speech>,a0
    448c:	|      move.l 16(a0),d0
    4490:	|  ,-- bra.s 4494 <isThereAnySpeechGoingOn+0x1a>
    4492:	'--|-> moveq #-1,d0
}
    4494:	   '-> rts

00004496 <killAllSpeech>:

void killAllSpeech () {
    4496:	       lea -12(sp),sp
    449a:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    449c:	       movea.l 1e7b8 <speech>,a0
    44a2:	       move.l 12(a0),d0
    44a6:	       moveq #-1,d1
    44a8:	       cmp.l d0,d1
    44aa:	   ,-- beq.s 44b8 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    44ac:	   |   movea.l 1e7b8 <speech>,a0
    44b2:	   |   moveq #-1,d0
    44b4:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    44b8:	   '-> movea.l 1e7b8 <speech>,a0
    44be:	       move.l (a0),d0
    44c0:	,----- beq.w 454c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    44c4:	|      movea.l 1e7b8 <speech>,a0
    44ca:	|      move.l (a0),d1
    44cc:	|      lea -132(sp),sp
    44d0:	|      move.l sp,d0
    44d2:	|      movea.w #132,a0
    44d6:	|      move.l a0,-(sp)
    44d8:	|      move.l d1,-(sp)
    44da:	|      move.l d0,-(sp)
    44dc:	|      jsr 184b2 <memcpy>
    44e2:	|      lea 12(sp),sp
    44e6:	|      jsr b52a <makeSilent>
    44ec:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    44f0:	|      movea.l 1e7b8 <speech>,a0
    44f6:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    44f8:	+----- bra.s 454c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    44fa:	|  ,-> movea.l 1e7b8 <speech>,a0
    4500:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4506:	|  |   movea.l 1e7b8 <speech>,a0
    450c:	|  |   movea.l 4(a0),a1
    4510:	|  |   movea.l 1e7b8 <speech>,a0
    4516:	|  |   move.l 4(a1),d0
    451a:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    451e:	|  |   movea.l 12(sp),a0
    4522:	|  |   move.l (a0),8(sp)
    4526:	|  |   move.l 1e876 <SysBase>,d0
    452c:	|  |   movea.l d0,a6
    452e:	|  |   movea.l 8(sp),a1
    4532:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4536:	|  |   move.l 12(sp),4(sp)
    453c:	|  |   move.l 1e876 <SysBase>,d0
    4542:	|  |   movea.l d0,a6
    4544:	|  |   movea.l 4(sp),a1
    4548:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    454c:	'--|-> movea.l 1e7b8 <speech>,a0
    4552:	   |   move.l 4(a0),d0
    4556:	   '-- bne.s 44fa <killAllSpeech+0x64>
	}
}
    4558:	       nop
    455a:	       nop
    455c:	       movea.l (sp)+,a6
    455e:	       lea 12(sp),sp
    4562:	       rts

00004564 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4564:	pea 2 <_start+0x2>
    4568:	move.l 8(sp),-(sp)
    456c:	jsr 46c4 <setFrames>
    4572:	addq.l #8,sp
}
    4574:	nop
    4576:	rts

00004578 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4578:	       lea -52(sp),sp
    457c:	       move.l a6,-(sp)
    457e:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4580:	       movea.l 64(sp),a0
    4584:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    458a:	       move.l 1e1d4 <speechSpeed>,d0
    4590:	       move.l 68(sp),-(sp)
    4594:	       move.l d0,-(sp)
    4596:	       jsr a46 <putFloat>
    459c:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    459e:	       movea.l 64(sp),a0
    45a2:	       move.l 8(a0),d0
    45a6:	       move.l 68(sp),-(sp)
    45aa:	       move.l d0,-(sp)
    45ac:	       jsr 8d0 <put2bytes>
    45b2:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    45b4:	       movea.l 64(sp),a0
    45b8:	       move.l 16(a0),d0
    45bc:	       move.l 68(sp),-(sp)
    45c0:	       move.l d0,-(sp)
    45c2:	       jsr 8d0 <put2bytes>
    45c8:	       addq.l #8,sp
		if (sS -> currentTalker) {
    45ca:	       movea.l 64(sp),a0
    45ce:	       move.l (a0),d0
    45d0:	   ,-- beq.s 4614 <saveSpeech+0x9c>
			FPutC (fp, 1);
    45d2:	   |   move.l 68(sp),40(sp)
    45d8:	   |   moveq #1,d0
    45da:	   |   move.l d0,36(sp)
    45de:	   |   move.l 1e87e <DOSBase>,d0
    45e4:	   |   movea.l d0,a6
    45e6:	   |   move.l 40(sp),d1
    45ea:	   |   move.l 36(sp),d2
    45ee:	   |   jsr -312(a6)
    45f2:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    45f6:	   |   movea.l 64(sp),a0
    45fa:	   |   movea.l (a0),a0
    45fc:	   |   movea.l 114(a0),a0
    4600:	   |   move.l 4(a0),d0
    4604:	   |   move.l 68(sp),-(sp)
    4608:	   |   move.l d0,-(sp)
    460a:	   |   jsr 8d0 <put2bytes>
    4610:	   |   addq.l #8,sp
    4612:	,--|-- bra.s 4690 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4614:	|  '-> move.l 68(sp),52(sp)
    461a:	|      clr.l 48(sp)
    461e:	|      move.l 1e87e <DOSBase>,d0
    4624:	|      movea.l d0,a6
    4626:	|      move.l 52(sp),d1
    462a:	|      move.l 48(sp),d2
    462e:	|      jsr -312(a6)
    4632:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4636:	+----- bra.s 4690 <saveSpeech+0x118>
			FPutC (fp, 1);
    4638:	|  ,-> move.l 68(sp),16(sp)
    463e:	|  |   moveq #1,d0
    4640:	|  |   move.l d0,12(sp)
    4644:	|  |   move.l 1e87e <DOSBase>,d0
    464a:	|  |   movea.l d0,a6
    464c:	|  |   move.l 16(sp),d1
    4650:	|  |   move.l 12(sp),d2
    4654:	|  |   jsr -312(a6)
    4658:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    465c:	|  |   movea.l 56(sp),a0
    4660:	|  |   move.l (a0),d0
    4662:	|  |   move.l 68(sp),-(sp)
    4666:	|  |   move.l d0,-(sp)
    4668:	|  |   jsr bd8 <writeString>
    466e:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4670:	|  |   movea.l 56(sp),a0
    4674:	|  |   move.l 8(a0),d0
    4678:	|  |   move.l 68(sp),-(sp)
    467c:	|  |   move.l d0,-(sp)
    467e:	|  |   jsr 8d0 <put2bytes>
    4684:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    4686:	|  |   movea.l 56(sp),a0
    468a:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4690:	'--|-> tst.l 56(sp)
    4694:	   '-- bne.s 4638 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    4696:	       move.l 68(sp),28(sp)
    469c:	       clr.l 24(sp)
    46a0:	       move.l 1e87e <DOSBase>,d0
    46a6:	       movea.l d0,a6
    46a8:	       move.l 28(sp),d1
    46ac:	       move.l 24(sp),d2
    46b0:	       jsr -312(a6)
    46b4:	       move.l d0,20(sp)
}
    46b8:	       nop
    46ba:	       move.l (sp)+,d2
    46bc:	       movea.l (sp)+,a6
    46be:	       lea 52(sp),sp
    46c2:	       rts

000046c4 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    46c4:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    46c6:	movea.l 8(sp),a0
    46ca:	movea.l 80(a0),a0
    46ce:	move.l (a0),d2
    46d0:	movea.l 8(sp),a0
    46d4:	movea.l 80(a0),a0
    46d8:	move.l 4(a0),d0
    46dc:	move.l 12(sp),-(sp)
    46e0:	move.l d0,-(sp)
    46e2:	jsr 18e8a <__mulsi3>
    46e8:	addq.l #8,sp
    46ea:	move.l d0,d1
    46ec:	movea.l 8(sp),a0
    46f0:	move.l 106(a0),d0
    46f4:	add.l d1,d0
    46f6:	add.l d0,d0
    46f8:	add.l d0,d0
    46fa:	movea.l d2,a0
    46fc:	adda.l d0,a0
    46fe:	move.l (a0),d0
    4700:	movea.l 8(sp),a0
    4704:	move.l d0,72(a0)
}
    4708:	nop
    470a:	move.l (sp)+,d2
    470c:	rts

0000470e <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    470e:	       lea -20(sp),sp
    4712:	       move.l d2,-(sp)
    4714:	       move.l 40(sp),d0
    4718:	       move.w d0,d0
    471a:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    471e:	       movea.l 1e7b8 <speech>,a0
    4724:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    472a:	       move.l 32(sp),-(sp)
    472e:	       jsr afea <findPerson>
    4734:	       addq.l #4,sp
    4736:	       move.l d0,16(sp)
    if (thisPerson) {
    473a:	   ,-- beq.s 4760 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    473c:	   |   movea.w 6(sp),a0
    4740:	   |   move.l a0,-(sp)
    4742:	   |   move.l 40(sp),-(sp)
    4746:	   |   move.l 24(sp),-(sp)
    474a:	   |   move.l 40(sp),-(sp)
    474e:	   |   jsr 4826 <wrapSpeechPerson>
    4754:	   |   lea 16(sp),sp
    4758:	   |   move.l d0,20(sp)
    475c:	,--|-- bra.w 481a <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4760:	|  '-> move.l 32(sp),-(sp)
    4764:	|      jsr 16ce0 <getRegionForObject>
    476a:	|      addq.l #4,sp
    476c:	|      move.l d0,12(sp)
        if (thisRegion) {
    4770:	|  ,-- beq.s 47dc <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4772:	|  |   movea.l 12(sp),a0
    4776:	|  |   movea.l 28(a0),a0
    477a:	|  |   move.l 28(a0),d0
    477e:	|  |   movea.l 12(sp),a0
    4782:	|  |   movea.l 4(a0),a1
    4786:	|  |   movea.l 12(sp),a0
    478a:	|  |   movea.l 28(a0),a0
    478e:	|  |   move.l 20(a0),d1
    4792:	|  |   movea.l a1,a0
    4794:	|  |   suba.l d1,a0
    4796:	|  |   move.l 1e934 <cameraY>,d1
    479c:	|  |   movea.l a0,a1
    479e:	|  |   suba.l d1,a1
    47a0:	|  |   movea.l 12(sp),a0
    47a4:	|  |   move.l (a0),d2
    47a6:	|  |   movea.l 12(sp),a0
    47aa:	|  |   move.l 8(a0),d1
    47ae:	|  |   add.l d2,d1
    47b0:	|  |   move.l d1,d2
    47b2:	|  |   asr.l #1,d2
    47b4:	|  |   move.l 1e930 <cameraX>,d1
    47ba:	|  |   movea.l d2,a0
    47bc:	|  |   suba.l d1,a0
    47be:	|  |   move.l 36(sp),-(sp)
    47c2:	|  |   move.l d0,-(sp)
    47c4:	|  |   move.l a1,-(sp)
    47c6:	|  |   move.l a0,-(sp)
    47c8:	|  |   move.l 44(sp),-(sp)
    47cc:	|  |   jsr 4944 <wrapSpeechXY>
    47d2:	|  |   lea 20(sp),sp
    47d6:	|  |   move.l d0,20(sp)
    47da:	+--|-- bra.s 481a <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    47dc:	|  '-> move.l 32(sp),-(sp)
    47e0:	|      jsr df58 <findObjectType>
    47e6:	|      addq.l #4,sp
    47e8:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    47ec:	|      movea.l 8(sp),a0
    47f0:	|      move.l 28(a0),d1
    47f4:	|      move.l 1e7bc <winWidth>,d0
    47fa:	|      lsr.l #1,d0
    47fc:	|      move.l 36(sp),-(sp)
    4800:	|      move.l d1,-(sp)
    4802:	|      pea a <_start+0xa>
    4806:	|      move.l d0,-(sp)
    4808:	|      move.l 44(sp),-(sp)
    480c:	|      jsr 4944 <wrapSpeechXY>
    4812:	|      lea 20(sp),sp
    4816:	|      move.l d0,20(sp)
        }
    }
    return i;
    481a:	'----> move.l 20(sp),d0
}
    481e:	       move.l (sp)+,d2
    4820:	       lea 20(sp),sp
    4824:	       rts

00004826 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4826:	    subq.l #8,sp
    4828:	    movem.l d2-d4,-(sp)
    482c:	    move.l 36(sp),d0
    4830:	    move.w d0,d0
    4832:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4836:	    movea.l 28(sp),a0
    483a:	    movea.l 114(a0),a0
    483e:	    move.l 28(a0),d2
    4842:	    movea.l 28(sp),a0
    4846:	    move.l 4(a0),d3
    484a:	    move.l 1e934 <cameraY>,d0
    4850:	    move.l d0,-(sp)
    4852:	    jsr 18930 <__floatsisf>
    4858:	    addq.l #4,sp
    485a:	    move.l d0,-(sp)
    485c:	    move.l d3,-(sp)
    485e:	    jsr 18c24 <__subsf3>
    4864:	    addq.l #8,sp
    4866:	    move.l d0,d3
    4868:	    movea.l 28(sp),a0
    486c:	    move.l 32(a0),d4
    4870:	    movea.l 28(sp),a0
    4874:	    move.l 20(a0),d1
    4878:	    movea.l 28(sp),a0
    487c:	    move.l 24(a0),d0
    4880:	    sub.l d0,d1
    4882:	    move.l d1,-(sp)
    4884:	    jsr 18930 <__floatsisf>
    488a:	    addq.l #4,sp
    488c:	    move.l d0,-(sp)
    488e:	    move.l d4,-(sp)
    4890:	    jsr 189e2 <__mulsf3>
    4896:	    addq.l #8,sp
    4898:	    move.l d0,-(sp)
    489a:	    move.l d3,-(sp)
    489c:	    jsr 18c24 <__subsf3>
    48a2:	    addq.l #8,sp
    48a4:	    move.l d0,d3
    48a6:	    movea.l 28(sp),a0
    48aa:	    movea.l 114(a0),a0
    48ae:	    move.l 20(a0),d0
    48b2:	    move.l d0,-(sp)
    48b4:	    jsr 18930 <__floatsisf>
    48ba:	    addq.l #4,sp
    48bc:	    move.l d0,-(sp)
    48be:	    move.l d3,-(sp)
    48c0:	    jsr 18c24 <__subsf3>
    48c6:	    addq.l #8,sp
    48c8:	    move.l d0,-(sp)
    48ca:	    jsr 188c8 <__fixsfsi>
    48d0:	    addq.l #4,sp
    48d2:	    move.l d0,d4
    48d4:	    movea.l 28(sp),a0
    48d8:	    move.l (a0),d3
    48da:	    move.l 1e930 <cameraX>,d0
    48e0:	    move.l d0,-(sp)
    48e2:	    jsr 18930 <__floatsisf>
    48e8:	    addq.l #4,sp
    48ea:	    move.l d0,-(sp)
    48ec:	    move.l d3,-(sp)
    48ee:	    jsr 18c24 <__subsf3>
    48f4:	    addq.l #8,sp
    48f6:	    move.l d0,-(sp)
    48f8:	    jsr 188c8 <__fixsfsi>
    48fe:	    addq.l #4,sp
    4900:	    move.l 32(sp),-(sp)
    4904:	    move.l d2,-(sp)
    4906:	    move.l d4,-(sp)
    4908:	    move.l d0,-(sp)
    490a:	    move.l 40(sp),-(sp)
    490e:	    jsr 4944 <wrapSpeechXY>
    4914:	    lea 20(sp),sp
    4918:	    move.l d0,16(sp)
	if (animPerson) {
    491c:	    tst.w 14(sp)
    4920:	,-- beq.s 4938 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4922:	|   move.l 28(sp),-(sp)
    4926:	|   jsr 4564 <makeTalker>
    492c:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    492e:	|   movea.l 1e7b8 <speech>,a0
    4934:	|   move.l 28(sp),(a0)
	}
	return i;
    4938:	'-> move.l 16(sp),d0
}
    493c:	    movem.l (sp)+,d2-d4
    4940:	    addq.l #8,sp
    4942:	    rts

00004944 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4944:	                   lea -16(sp),sp
    4948:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    494c:	                   clr.l 16(sp)
    killAllSpeech();
    4950:	                   jsr 4496 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4956:	                   move.l 36(sp),-(sp)
    495a:	                   jsr 14f0a <strlen>
    4960:	                   addq.l #4,sp
    4962:	                   movea.l d0,a0
    4964:	                   lea 20(a0),a0
    4968:	                   move.l a0,-(sp)
    496a:	                   jsr 18958 <__floatunsisf>
    4970:	                   addq.l #4,sp
    4972:	                   move.l d0,d1
    4974:	                   move.l 1e1d4 <speechSpeed>,d0
    497a:	                   move.l d0,-(sp)
    497c:	                   move.l d1,-(sp)
    497e:	                   jsr 189e2 <__mulsf3>
    4984:	                   addq.l #8,sp
    4986:	                   move.l d0,-(sp)
    4988:	                   jsr 188c8 <__fixsfsi>
    498e:	                   addq.l #4,sp
    4990:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    4994:	               ,-- bgt.s 499c <wrapSpeechXY+0x58>
    4996:	               |   moveq #1,d0
    4998:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    499c:	               '-> moveq #-1,d1
    499e:	                   cmp.l 52(sp),d1
    49a2:	               ,-- beq.s 49e2 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    49a4:	               |   move.l 1e944 <speechMode>,d0
    49aa:	               +-- ble.s 49e2 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    49ac:	               |   clr.l -(sp)
    49ae:	               |   move.l 56(sp),-(sp)
    49b2:	               |   jsr dc18 <startSound>
    49b8:	               |   addq.l #8,sp
    49ba:	               |   tst.w d0
    49bc:	               +-- beq.s 49e2 <wrapSpeechXY+0x9e>
                speechTime = -10;
    49be:	               |   moveq #-10,d0
    49c0:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    49c4:	               |   movea.l 1e7b8 <speech>,a0
    49ca:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    49d0:	               |   move.l 1e944 <speechMode>,d0
    49d6:	               |   moveq #2,d1
    49d8:	               |   cmp.l d0,d1
    49da:	               +-- bne.s 49e2 <wrapSpeechXY+0x9e>
    49dc:	               |   moveq #-10,d0
    49de:	,--------------|-- bra.w 4c68 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    49e2:	|              '-> movea.l 1e7b8 <speech>,a0
    49e8:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    49ee:	|     ,----------- bra.w 4aa2 <wrapSpeechXY+0x15e>
        a = wrap;
    49f2:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    49f8:	|  |  |        ,-- bra.s 4a08 <wrapSpeechXY+0xc4>
            a--;
    49fa:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    49fe:	|  |  |  |     +-- bne.s 4a08 <wrapSpeechXY+0xc4>
                a = wrap;
    4a00:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4a06:	|  |  |  |  ,--|-- bra.s 4a1a <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4a08:	|  |  |  |  |  '-> move.l 28(sp),d0
    4a0c:	|  |  |  |  |      movea.l 36(sp),a0
    4a10:	|  |  |  |  |      adda.l d0,a0
    4a12:	|  |  |  |  |      move.b (a0),d0
    4a14:	|  |  |  |  |      cmpi.b #32,d0
    4a18:	|  |  |  '--|----- bne.s 49fa <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4a1a:	|  |  |     '----> move.l 28(sp),d0
    4a1e:	|  |  |            movea.l 36(sp),a0
    4a22:	|  |  |            adda.l d0,a0
    4a24:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4a26:	|  |  |            lea 16(sp),a0
    4a2a:	|  |  |            move.l a0,-(sp)
    4a2c:	|  |  |            move.l 44(sp),-(sp)
    4a30:	|  |  |            move.l 44(sp),-(sp)
    4a34:	|  |  |            jsr 41e0 <addSpeechLine>
    4a3a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4a3e:	|  |  |            move.l 28(sp),d0
    4a42:	|  |  |            movea.l 36(sp),a0
    4a46:	|  |  |            adda.l d0,a0
    4a48:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4a4c:	|  |  |            move.l 28(sp),d0
    4a50:	|  |  |            addq.l #1,d0
    4a52:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4a56:	|  |  |            move.l 44(sp),-(sp)
    4a5a:	|  |  |            jsr 18930 <__floatsisf>
    4a60:	|  |  |            addq.l #4,sp
    4a62:	|  |  |            move.l d0,d2
    4a64:	|  |  |            move.l 1e96e <fontHeight>,d0
    4a6a:	|  |  |            move.l d0,-(sp)
    4a6c:	|  |  |            jsr 18930 <__floatsisf>
    4a72:	|  |  |            addq.l #4,sp
    4a74:	|  |  |            move.l d0,d1
    4a76:	|  |  |            move.l 1e1fc <cameraZoom>,d0
    4a7c:	|  |  |            move.l d0,-(sp)
    4a7e:	|  |  |            move.l d1,-(sp)
    4a80:	|  |  |            jsr 187e6 <__divsf3>
    4a86:	|  |  |            addq.l #8,sp
    4a88:	|  |  |            move.l d0,-(sp)
    4a8a:	|  |  |            move.l d2,-(sp)
    4a8c:	|  |  |            jsr 18c24 <__subsf3>
    4a92:	|  |  |            addq.l #8,sp
    4a94:	|  |  |            move.l d0,-(sp)
    4a96:	|  |  |            jsr 188c8 <__fixsfsi>
    4a9c:	|  |  |            addq.l #4,sp
    4a9e:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4aa2:	|  |  '----------> move.l 36(sp),-(sp)
    4aa6:	|  |               jsr 14f0a <strlen>
    4aac:	|  |               addq.l #4,sp
    4aae:	|  |               move.l d0,d1
    4ab0:	|  |               move.l 48(sp),d0
    4ab4:	|  |               cmp.l d1,d0
    4ab6:	|  '-------------- bcs.w 49f2 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4aba:	|                  lea 16(sp),a0
    4abe:	|                  move.l a0,-(sp)
    4ac0:	|                  move.l 44(sp),-(sp)
    4ac4:	|                  move.l 44(sp),-(sp)
    4ac8:	|                  jsr 41e0 <addSpeechLine>
    4ace:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4ad2:	|                  move.l 44(sp),-(sp)
    4ad6:	|                  jsr 18930 <__floatsisf>
    4adc:	|                  addq.l #4,sp
    4ade:	|                  move.l d0,d2
    4ae0:	|                  move.l 1e96e <fontHeight>,d0
    4ae6:	|                  move.l d0,-(sp)
    4ae8:	|                  jsr 18930 <__floatsisf>
    4aee:	|                  addq.l #4,sp
    4af0:	|                  move.l d0,d1
    4af2:	|                  move.l 1e1fc <cameraZoom>,d0
    4af8:	|                  move.l d0,-(sp)
    4afa:	|                  move.l d1,-(sp)
    4afc:	|                  jsr 187e6 <__divsf3>
    4b02:	|                  addq.l #8,sp
    4b04:	|                  move.l d0,-(sp)
    4b06:	|                  move.l d2,-(sp)
    4b08:	|                  jsr 18c24 <__subsf3>
    4b0e:	|                  addq.l #8,sp
    4b10:	|                  move.l d0,-(sp)
    4b12:	|                  jsr 188c8 <__fixsfsi>
    4b18:	|                  addq.l #4,sp
    4b1a:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4b1e:	|              ,-- bpl.s 4b3c <wrapSpeechXY+0x1f8>
    4b20:	|              |   movea.l 1e7b8 <speech>,a0
    4b26:	|              |   move.l 8(a0),d0
    4b2a:	|              |   movea.l 1e7b8 <speech>,a0
    4b30:	|              |   sub.l 44(sp),d0
    4b34:	|              |   move.l d0,8(a0)
    4b38:	|           ,--|-- bra.w 4c2a <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4b3c:	|           |  '-> movea.l 1e7b8 <speech>,a0
    4b42:	|           |      move.l 8(a0),d0
    4b46:	|           |      move.l d0,-(sp)
    4b48:	|           |      jsr 18930 <__floatsisf>
    4b4e:	|           |      addq.l #4,sp
    4b50:	|           |      move.l d0,d2
    4b52:	|           |      move.l 1e934 <cameraY>,d0
    4b58:	|           |      move.l d0,-(sp)
    4b5a:	|           |      jsr 18930 <__floatsisf>
    4b60:	|           |      addq.l #4,sp
    4b62:	|           |      move.l d0,d3
    4b64:	|           |      move.l 1e7c0 <winHeight>,d4
    4b6a:	|           |      move.l 1e96e <fontHeight>,d0
    4b70:	|           |      pea 3 <_start+0x3>
    4b74:	|           |      move.l d0,-(sp)
    4b76:	|           |      jsr 18f08 <__divsi3>
    4b7c:	|           |      addq.l #8,sp
    4b7e:	|           |      move.l d4,d1
    4b80:	|           |      sub.l d0,d1
    4b82:	|           |      move.l d1,-(sp)
    4b84:	|           |      jsr 18958 <__floatunsisf>
    4b8a:	|           |      addq.l #4,sp
    4b8c:	|           |      move.l d0,d1
    4b8e:	|           |      move.l 1e1fc <cameraZoom>,d0
    4b94:	|           |      move.l d0,-(sp)
    4b96:	|           |      move.l d1,-(sp)
    4b98:	|           |      jsr 187e6 <__divsf3>
    4b9e:	|           |      addq.l #8,sp
    4ba0:	|           |      move.l d0,-(sp)
    4ba2:	|           |      move.l d3,-(sp)
    4ba4:	|           |      jsr 186ec <__addsf3>
    4baa:	|           |      addq.l #8,sp
    4bac:	|           |      move.l d0,-(sp)
    4bae:	|           |      move.l d2,-(sp)
    4bb0:	|           |      jsr 18a9c <__gtsf2>
    4bb6:	|           |      addq.l #8,sp
    4bb8:	|           |      tst.l d0
    4bba:	|           +----- ble.s 4c2a <wrapSpeechXY+0x2e6>
    4bbc:	|           |      move.l 1e934 <cameraY>,d0
    4bc2:	|           |      move.l d0,-(sp)
    4bc4:	|           |      jsr 18930 <__floatsisf>
    4bca:	|           |      addq.l #4,sp
    4bcc:	|           |      move.l d0,d2
    4bce:	|           |      move.l 1e7c0 <winHeight>,d3
    4bd4:	|           |      move.l 1e96e <fontHeight>,d0
    4bda:	|           |      pea 3 <_start+0x3>
    4bde:	|           |      move.l d0,-(sp)
    4be0:	|           |      jsr 18f08 <__divsi3>
    4be6:	|           |      addq.l #8,sp
    4be8:	|           |      move.l d3,d1
    4bea:	|           |      sub.l d0,d1
    4bec:	|           |      move.l d1,-(sp)
    4bee:	|           |      jsr 18958 <__floatunsisf>
    4bf4:	|           |      addq.l #4,sp
    4bf6:	|           |      move.l d0,d1
    4bf8:	|           |      move.l 1e1fc <cameraZoom>,d0
    4bfe:	|           |      move.l d0,-(sp)
    4c00:	|           |      move.l d1,-(sp)
    4c02:	|           |      jsr 187e6 <__divsf3>
    4c08:	|           |      addq.l #8,sp
    4c0a:	|           |      move.l d0,-(sp)
    4c0c:	|           |      move.l d2,-(sp)
    4c0e:	|           |      jsr 186ec <__addsf3>
    4c14:	|           |      addq.l #8,sp
    4c16:	|           |      movea.l 1e7b8 <speech>,a2
    4c1c:	|           |      move.l d0,-(sp)
    4c1e:	|           |      jsr 188c8 <__fixsfsi>
    4c24:	|           |      addq.l #4,sp
    4c26:	|           |      move.l d0,8(a2)

    if (offset) {
    4c2a:	|           '----> move.l 16(sp),d0
    4c2e:	|        ,-------- beq.s 4c64 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4c30:	|        |         movea.l 1e7b8 <speech>,a0
    4c36:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4c3c:	|        |     ,-- bra.s 4c5e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4c3e:	|        |  ,--|-> movea.l 20(sp),a0
    4c42:	|        |  |  |   move.l 8(a0),d1
    4c46:	|        |  |  |   move.l 16(sp),d0
    4c4a:	|        |  |  |   add.l d1,d0
    4c4c:	|        |  |  |   movea.l 20(sp),a0
    4c50:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4c54:	|        |  |  |   movea.l 20(sp),a0
    4c58:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4c5e:	|        |  |  '-> tst.l 20(sp)
    4c62:	|        |  '----- bne.s 4c3e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4c64:	|        '-------> move.l 24(sp),d0
}
    4c68:	'----------------> movem.l (sp)+,d2-d4/a2
    4c6c:	                   lea 16(sp),sp
    4c70:	                   rts

00004c72 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4c72:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4c76:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4c7a:	       tst.l 24(sp)
    4c7e:	   ,-- bge.s 4c84 <drawLine+0x12>
    4c80:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4c84:	   '-> tst.l 28(sp)
    4c88:	   ,-- bge.s 4c8e <drawLine+0x1c>
    4c8a:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4c8e:	   '-> tst.l 32(sp)
    4c92:	   ,-- bge.s 4c98 <drawLine+0x26>
    4c94:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4c98:	   '-> tst.l 36(sp)
    4c9c:	   ,-- bge.s 4ca2 <drawLine+0x30>
    4c9e:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4ca2:	   '-> move.l 1e912 <sceneWidth>,d0
    4ca8:	       cmp.l 24(sp),d0
    4cac:	   ,-- bge.s 4cbc <drawLine+0x4a>
    4cae:	   |   move.l 1e912 <sceneWidth>,d0
    4cb4:	   |   move.l d0,d1
    4cb6:	   |   subq.l #1,d1
    4cb8:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4cbc:	   '-> move.l 1e912 <sceneWidth>,d0
    4cc2:	       cmp.l 32(sp),d0
    4cc6:	   ,-- bge.s 4cd6 <drawLine+0x64>
    4cc8:	   |   move.l 1e912 <sceneWidth>,d0
    4cce:	   |   move.l d0,d1
    4cd0:	   |   subq.l #1,d1
    4cd2:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4cd6:	   '-> move.l 1e916 <sceneHeight>,d0
    4cdc:	       cmp.l 28(sp),d0
    4ce0:	   ,-- bge.s 4cf0 <drawLine+0x7e>
    4ce2:	   |   move.l 1e916 <sceneHeight>,d0
    4ce8:	   |   move.l d0,d1
    4cea:	   |   subq.l #1,d1
    4cec:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4cf0:	   '-> move.l 1e916 <sceneHeight>,d0
    4cf6:	       cmp.l 36(sp),d0
    4cfa:	   ,-- bge.s 4d0a <drawLine+0x98>
    4cfc:	   |   move.l 1e916 <sceneHeight>,d0
    4d02:	   |   move.l d0,d1
    4d04:	   |   subq.l #1,d1
    4d06:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4d0a:	   '-> move.l 24(sp),d0
    4d0e:	       cmp.l 32(sp),d0
    4d12:	,----- ble.s 4d2e <drawLine+0xbc>
		x = x2; 
    4d14:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4d1a:	|      tst.w 10(sp)
    4d1e:	|      seq d0
    4d20:	|      neg.b d0
    4d22:	|      move.b d0,d0
    4d24:	|      andi.w #255,d0
    4d28:	|      move.w d0,10(sp)
    4d2c:	|  ,-- bra.s 4d34 <drawLine+0xc2>
	} else x = x1;
    4d2e:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4d34:	   '-> move.l 28(sp),d1
    4d38:	       cmp.l 36(sp),d1
    4d3c:	,----- ble.s 4d58 <drawLine+0xe6>
		y = y2; 
    4d3e:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4d44:	|      tst.w 10(sp)
    4d48:	|      seq d0
    4d4a:	|      neg.b d0
    4d4c:	|      move.b d0,d0
    4d4e:	|      andi.w #255,d0
    4d52:	|      move.w d0,10(sp)
    4d56:	|  ,-- bra.s 4d5e <drawLine+0xec>
	} else y = y1;	
    4d58:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4d5e:	   '-> move.l 32(sp),d0
    4d62:	       sub.l 24(sp),d0
    4d66:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4d6a:	       move.l 6(sp),d0
    4d6e:	   ,-- bpl.s 4d72 <drawLine+0x100>
    4d70:	   |   neg.l d0
    4d72:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4d76:	       move.l 36(sp),d1
    4d7a:	       sub.l 28(sp),d1
    4d7e:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4d82:	       move.l 2(sp),d0
    4d86:	   ,-- bpl.s 4d8a <drawLine+0x118>
    4d88:	   |   neg.l d0
    4d8a:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4d8e:	       tst.l 6(sp)
    4d92:	   ,-- bne.s 4db6 <drawLine+0x144>
		diffX = 1;
    4d94:	   |   moveq #1,d0
    4d96:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4d9a:	   |   move.l 1e912 <sceneWidth>,d0
    4da0:	   |   subq.l #1,d0
    4da2:	   |   cmp.l 16(sp),d0
    4da6:	   +-- bne.s 4db6 <drawLine+0x144>
    4da8:	   |   move.l 1e912 <sceneWidth>,d0
    4dae:	   |   move.l d0,d1
    4db0:	   |   subq.l #2,d1
    4db2:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4db6:	   '-> tst.l 2(sp)
    4dba:	   ,-- bne.s 4dde <drawLine+0x16c>
		diffY = 1;
    4dbc:	   |   moveq #1,d0
    4dbe:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4dc2:	   |   move.l 1e916 <sceneHeight>,d0
    4dc8:	   |   subq.l #1,d0
    4dca:	   |   cmp.l 12(sp),d0
    4dce:	   +-- bne.s 4dde <drawLine+0x16c>
    4dd0:	   |   move.l 1e916 <sceneHeight>,d0
    4dd6:	   |   move.l d0,d1
    4dd8:	   |   subq.l #2,d1
    4dda:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4dde:	   '-> pea 1967b <PutChar+0x6db>
    4de4:	       jsr 184fe <KPrintF>
    4dea:	       addq.l #4,sp
	
}
    4dec:	       nop
    4dee:	       lea 20(sp),sp
    4df2:	       rts

00004df4 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4df4:	                      lea -24(sp),sp
    4df8:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4dfa:	                      move.l 1e7c4 <firstTexture>,d0
    4e00:	,-------------------- beq.w 4ede <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4e04:	|                     clr.l 24(sp)
    4e08:	|     ,-------------- bra.w 4ed2 <deleteTextures+0xde>
			BOOL found = FALSE;
    4e0c:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4e10:	|  |  |               move.l 1e7c4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4e18:	|  |  |               movea.l 20(sp),a0
    4e1c:	|  |  |               move.l (a0),d1
    4e1e:	|  |  |               move.l 24(sp),d0
    4e22:	|  |  |               add.l d0,d0
    4e24:	|  |  |               add.l d0,d0
    4e26:	|  |  |               movea.l 36(sp),a0
    4e2a:	|  |  |               adda.l d0,a0
    4e2c:	|  |  |               move.l (a0),d0
    4e2e:	|  |  |               cmp.l d1,d0
    4e30:	|  |  |  ,----------- bne.w 4ec4 <deleteTextures+0xd0>
				found = TRUE;
    4e34:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4e3a:	|  |  |  |            movea.l 20(sp),a0
    4e3e:	|  |  |  |            move.l 12(a0),d0
    4e42:	|  |  |  |            move.l d0,1e7c4 <firstTexture>
				FreeVec(list);
    4e48:	|  |  |  |            move.l 20(sp),6(sp)
    4e4e:	|  |  |  |            move.l 1e876 <SysBase>,d0
    4e54:	|  |  |  |            movea.l d0,a6
    4e56:	|  |  |  |            movea.l 6(sp),a1
    4e5a:	|  |  |  |            jsr -690(a6)
				continue;
    4e5e:	|  |  |  |  ,-------- bra.s 4ece <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4e60:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4e64:	|  |  |  |  |  |      movea.l 12(a0),a0
    4e68:	|  |  |  |  |  |      move.l (a0),d1
    4e6a:	|  |  |  |  |  |      move.l 24(sp),d0
    4e6e:	|  |  |  |  |  |      add.l d0,d0
    4e70:	|  |  |  |  |  |      add.l d0,d0
    4e72:	|  |  |  |  |  |      movea.l 36(sp),a0
    4e76:	|  |  |  |  |  |      adda.l d0,a0
    4e78:	|  |  |  |  |  |      move.l (a0),d0
    4e7a:	|  |  |  |  |  |      cmp.l d1,d0
    4e7c:	|  |  |  |  |  |  ,-- bne.s 4eba <deleteTextures+0xc6>
					found = TRUE;
    4e7e:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4e84:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e88:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4e8e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e92:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4e96:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4e9a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e9e:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4ea2:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4ea8:	|  |  |  |  |  |  |   move.l 1e876 <SysBase>,d0
    4eae:	|  |  |  |  |  |  |   movea.l d0,a6
    4eb0:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4eb4:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4eb8:	|  |  |  |  +--|--|-- bra.s 4ece <deleteTextures+0xda>
				}
				list = list->next;
    4eba:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ebe:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4ec4:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4ec8:	|  |  |     |  |      move.l 12(a0),d0
    4ecc:	|  |  |     |  '----- bne.s 4e60 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ece:	|  |  |     '-------> addq.l #1,24(sp)
    4ed2:	|  |  '-------------> move.l 24(sp),d0
    4ed6:	|  |                  cmp.l 32(sp),d0
    4eda:	|  '----------------- bcs.w 4e0c <deleteTextures+0x18>
			}
		}
	}
}
    4ede:	'-------------------> nop
    4ee0:	                      movea.l (sp)+,a6
    4ee2:	                      lea 24(sp),sp
    4ee6:	                      rts

00004ee8 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4ee8:	subq.l #4,sp
    4eea:	move.l 8(sp),d0
    4eee:	move.w d0,d0
    4ef0:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4ef4:	pea 1969e <PutChar+0x6fe>
    4efa:	jsr 184fe <KPrintF>
    4f00:	addq.l #4,sp
}
    4f02:	nop
    4f04:	addq.l #4,sp
    4f06:	rts

00004f08 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4f08:	       moveq #-1,d0
    4f0a:	       cmp.l 4(sp),d0
    4f0e:	   ,-- bne.s 4f14 <resourceNameFromNum+0xc>
    4f10:	   |   moveq #0,d0
    4f12:	,--|-- bra.s 4f4c <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4f14:	|  '-> move.l 1e850 <numResourceNames>,d0
    4f1a:	|  ,-- bne.s 4f24 <resourceNameFromNum+0x1c>
    4f1c:	|  |   move.l #104142,d0
    4f22:	+--|-- bra.s 4f4c <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4f24:	|  '-> move.l 1e850 <numResourceNames>,d0
    4f2a:	|      cmp.l 4(sp),d0
    4f2e:	|  ,-- ble.s 4f46 <resourceNameFromNum+0x3e>
    4f30:	|  |   move.l 1e808 <allResourceNames>,d1
    4f36:	|  |   move.l 4(sp),d0
    4f3a:	|  |   add.l d0,d0
    4f3c:	|  |   add.l d0,d0
    4f3e:	|  |   movea.l d1,a0
    4f40:	|  |   adda.l d0,a0
    4f42:	|  |   move.l (a0),d0
    4f44:	+--|-- bra.s 4f4c <resourceNameFromNum+0x44>
	return "Unknown resource";
    4f46:	|  '-> move.l #104151,d0
    4f4c:	'----> rts

00004f4e <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4f4e:	                lea -48(sp),sp
    4f52:	                movem.l d2-d3/a6,-(sp)

	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4f56:	                move.l #320,1e7bc <winWidth>
    winHeight = 256;
    4f60:	                move.l #256,1e7c0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4f6a:	                tst.l 64(sp)
    4f6e:	            ,-- bne.s 4f86 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4f70:	            |   pea 196e8 <PutChar+0x748>
    4f76:	            |   jsr b8 <copyString>
    4f7c:	            |   addq.l #4,sp
    4f7e:	            |   move.l d0,1e7d4 <bundleFolder>
    4f84:	         ,--|-- bra.s 4f9c <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4f86:	         |  '-> movea.l 68(sp),a0
    4f8a:	         |      move.l (a0),d0
    4f8c:	         |      move.l d0,-(sp)
    4f8e:	         |      jsr b8 <copyString>
    4f94:	         |      addq.l #4,sp
    4f96:	         |      move.l d0,1e7d4 <bundleFolder>
	}
    
	int lastSlash = -1;
    4f9c:	         '----> moveq #-1,d0
    4f9e:	                move.l d0,52(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fa2:	                clr.l 48(sp)
    4fa6:	         ,----- bra.s 4fc8 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4fa8:	      ,--|----> move.l 1e7d4 <bundleFolder>,d1
    4fae:	      |  |      move.l 48(sp),d0
    4fb2:	      |  |      movea.l d1,a0
    4fb4:	      |  |      adda.l d0,a0
    4fb6:	      |  |      move.b (a0),d0
    4fb8:	      |  |      cmpi.b #47,d0
    4fbc:	      |  |  ,-- bne.s 4fc4 <main_sludge+0x76>
    4fbe:	      |  |  |   move.l 48(sp),52(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fc4:	      |  |  '-> addq.l #1,48(sp)
    4fc8:	      |  '----> move.l 1e7d4 <bundleFolder>,d1
    4fce:	      |         move.l 48(sp),d0
    4fd2:	      |         movea.l d1,a0
    4fd4:	      |         adda.l d0,a0
    4fd6:	      |         move.b (a0),d0
    4fd8:	      '-------- bne.s 4fa8 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4fda:	                move.l 1e7d4 <bundleFolder>,d0
    4fe0:	                move.l 52(sp),d1
    4fe4:	                addq.l #1,d1
    4fe6:	                movea.l d0,a0
    4fe8:	                adda.l d1,a0
    4fea:	                clr.b (a0)

	if (argc > 1) {
    4fec:	                moveq #1,d0
    4fee:	                cmp.l 64(sp),d0
    4ff2:	            ,-- bge.s 500e <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4ff4:	            |   move.l 64(sp),d0
    4ff8:	            |   addi.l #1073741823,d0
    4ffe:	            |   add.l d0,d0
    5000:	            |   add.l d0,d0
    5002:	            |   movea.l 68(sp),a0
    5006:	            |   adda.l d0,a0
    5008:	            |   move.l (a0),56(sp)
    500c:	         ,--|-- bra.s 5068 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    500e:	         |  '-> move.l 1e7d4 <bundleFolder>,d0
    5014:	         |      pea 196ee <PutChar+0x74e>
    501a:	         |      move.l d0,-(sp)
    501c:	         |      jsr 14f4a <joinStrings>
    5022:	         |      addq.l #8,sp
    5024:	         |      move.l d0,56(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    5028:	         |      move.l 56(sp),-(sp)
    502c:	         |      jsr 14e44 <fileExists>
    5032:	         |      addq.l #4,sp
    5034:	         |      tst.b d0
    5036:	         +----- bne.s 5068 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    5038:	         |      move.l 56(sp),44(sp)
    503e:	         |      move.l 1e876 <SysBase>,d0
    5044:	         |      movea.l d0,a6
    5046:	         |      movea.l 44(sp),a1
    504a:	         |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    504e:	         |      move.l 1e7d4 <bundleFolder>,d0
    5054:	         |      pea 196fb <PutChar+0x75b>
    505a:	         |      move.l d0,-(sp)
    505c:	         |      jsr 14f4a <joinStrings>
    5062:	         |      addq.l #8,sp
    5064:	         |      move.l d0,56(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    5068:	         '----> move.l 56(sp),-(sp)
    506c:	                jsr 14e44 <fileExists>
    5072:	                addq.l #4,sp
    5074:	                tst.b d0
    5076:	            ,-- bne.s 50ce <main_sludge+0x180>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    5078:	            |   move.l 1e87e <DOSBase>,d0
    507e:	            |   movea.l d0,a6
    5080:	            |   jsr -60(a6)
    5084:	            |   move.l d0,32(sp)
    5088:	            |   move.l 32(sp),d0
    508c:	            |   move.l d0,28(sp)
    5090:	            |   move.l #104196,24(sp)
    5098:	            |   moveq #21,d0
    509a:	            |   move.l d0,20(sp)
    509e:	            |   move.l 1e87e <DOSBase>,d0
    50a4:	            |   movea.l d0,a6
    50a6:	            |   move.l 28(sp),d1
    50aa:	            |   move.l 24(sp),d2
    50ae:	            |   move.l 20(sp),d3
    50b2:	            |   jsr -48(a6)
    50b6:	            |   move.l d0,16(sp)
		KPrintF("Game file not found.\n");
    50ba:	            |   pea 19704 <PutChar+0x764>
    50c0:	            |   jsr 184fe <KPrintF>
    50c6:	            |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    50c8:	            |   moveq #0,d0
    50ca:	,-----------|-- bra.w 5364 <main_sludge+0x416>
	}

	KPrintF("Setgamefilepath\n");
    50ce:	|           '-> pea 1971a <PutChar+0x77a>
    50d4:	|               jsr 184fe <KPrintF>
    50da:	|               addq.l #4,sp
	setGameFilePath (sludgeFile);	
    50dc:	|               move.l 56(sp),-(sp)
    50e0:	|               jsr 536e <setGameFilePath>
    50e6:	|               addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    50e8:	|               move.l 56(sp),-(sp)
    50ec:	|               jsr 68b2 <initSludge>
    50f2:	|               addq.l #4,sp
    50f4:	|               tst.w d0
    50f6:	|           ,-- bne.s 50fe <main_sludge+0x1b0>
    50f8:	|           |   moveq #0,d0
    50fa:	+-----------|-- bra.w 5364 <main_sludge+0x416>
	
	if( winWidth != 320 || winHeight != 256) {
    50fe:	|           '-> move.l 1e7bc <winWidth>,d0
    5104:	|               cmpi.l #320,d0
    510a:	|           ,-- bne.s 511a <main_sludge+0x1cc>
    510c:	|           |   move.l 1e7c0 <winHeight>,d0
    5112:	|           |   cmpi.l #256,d0
    5118:	|        ,--|-- beq.s 513c <main_sludge+0x1ee>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    511a:	|        |  '-> pea 1972b <PutChar+0x78b>
    5120:	|        |      jsr 184fe <KPrintF>
    5126:	|        |      addq.l #4,sp
		winWidth = 320;
    5128:	|        |      move.l #320,1e7bc <winWidth>
		winHeight = 256;
    5132:	|        |      move.l #256,1e7c0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    513c:	|        '----> pea 197a8 <PutChar+0x808>
    5142:	|               jsr 184fe <KPrintF>
    5148:	|               addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    514a:	|               move.l 1e7c0 <winHeight>,d0
    5150:	|               move.l d0,d1
    5152:	|               move.l 1e7bc <winWidth>,d0
    5158:	|               move.l d1,-(sp)
    515a:	|               move.l d0,-(sp)
    515c:	|               jsr de36 <resizeBackdrop>
    5162:	|               addq.l #8,sp
    5164:	|               tst.w d0
    5166:	|           ,-- bne.s 517c <main_sludge+0x22e>
		KPrintF("Couldn't allocate memory for backdrop");
    5168:	|           |   pea 197bb <PutChar+0x81b>
    516e:	|           |   jsr 184fe <KPrintF>
    5174:	|           |   addq.l #4,sp
		return FALSE;
    5176:	|           |   moveq #0,d0
    5178:	+-----------|-- bra.w 5364 <main_sludge+0x416>
	}

	KPrintF("Init People\n");
    517c:	|           '-> pea 197e1 <PutChar+0x841>
    5182:	|               jsr 184fe <KPrintF>
    5188:	|               addq.l #4,sp
	if (! initPeople ())
    518a:	|               jsr b350 <initPeople>
    5190:	|               tst.w d0
    5192:	|           ,-- bne.s 51a8 <main_sludge+0x25a>
	{
		KPrintF("Couldn't initialise people stuff");
    5194:	|           |   pea 197ee <PutChar+0x84e>
    519a:	|           |   jsr 184fe <KPrintF>
    51a0:	|           |   addq.l #4,sp
		return FALSE;
    51a2:	|           |   moveq #0,d0
    51a4:	+-----------|-- bra.w 5364 <main_sludge+0x416>
	}

	KPrintF("Init Floor\n");
    51a8:	|           '-> pea 1980f <PutChar+0x86f>
    51ae:	|               jsr 184fe <KPrintF>
    51b4:	|               addq.l #4,sp
	if (! initFloor ())
    51b6:	|               jsr 178b4 <initFloor>
    51bc:	|               tst.w d0
    51be:	|           ,-- bne.s 51d4 <main_sludge+0x286>
	{
		KPrintF("Couldn't initialise floor stuff");
    51c0:	|           |   pea 1981b <PutChar+0x87b>
    51c6:	|           |   jsr 184fe <KPrintF>
    51cc:	|           |   addq.l #4,sp
		
		return FALSE;
    51ce:	|           |   moveq #0,d0
    51d0:	+-----------|-- bra.w 5364 <main_sludge+0x416>
	}

	KPrintF("Init Objecttype\n");
    51d4:	|           '-> pea 1983b <PutChar+0x89b>
    51da:	|               jsr 184fe <KPrintF>
    51e0:	|               addq.l #4,sp
	if (! initObjectTypes ())
    51e2:	|               jsr dff2 <initObjectTypes>
    51e8:	|               tst.w d0
    51ea:	|           ,-- bne.s 5200 <main_sludge+0x2b2>
	{
		KPrintF("Couldn't initialise object type stuff");
    51ec:	|           |   pea 1984c <PutChar+0x8ac>
    51f2:	|           |   jsr 184fe <KPrintF>
    51f8:	|           |   addq.l #4,sp
		return FALSE;
    51fa:	|           |   moveq #0,d0
    51fc:	+-----------|-- bra.w 5364 <main_sludge+0x416>
	}

	KPrintF("Init speech\n");
    5200:	|           '-> pea 19872 <PutChar+0x8d2>
    5206:	|               jsr 184fe <KPrintF>
    520c:	|               addq.l #4,sp
	initSpeech ();
    520e:	|               jsr 43fe <initSpeech>
	KPrintF("Init status bar\n");
    5214:	|               pea 1987f <PutChar+0x8df>
    521a:	|               jsr 184fe <KPrintF>
    5220:	|               addq.l #4,sp
	initStatusBar ();
    5222:	|               jsr 8c1c <initStatusBar>

	KPrintF("Get numbered string\n");
    5228:	|               pea 19890 <PutChar+0x8f0>
    522e:	|               jsr 184fe <KPrintF>
    5234:	|               addq.l #4,sp
	gameName = getNumberedString(1);
    5236:	|               pea 1 <_start+0x1>
    523a:	|               jsr 7e46 <getNumberedString>
    5240:	|               addq.l #4,sp
    5242:	|               move.l d0,1e7cc <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    5248:	|               pea 198a5 <PutChar+0x905>
    524e:	|               jsr 184fe <KPrintF>
    5254:	|               addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    5256:	|               move.l 1e844 <noStack>,d0
    525c:	|               pea 1 <_start+0x1>
    5260:	|               move.l d0,-(sp)
    5262:	|               clr.l -(sp)
    5264:	|               clr.l -(sp)
    5266:	|               clr.l -(sp)
    5268:	|               jsr 7d2a <startNewFunctionNum>
    526e:	|               lea 20(sp),sp

	KPrintF("Starting main loop");
    5272:	|               pea 198bd <PutChar+0x91d>
    5278:	|               jsr 184fe <KPrintF>
    527e:	|               addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5280:	|               move.l #14675968,40(sp)
	weAreDoneSoQuit = 0;
    5288:	|               clr.l 1e7d8 <weAreDoneSoQuit>
	//WaitVbl();
	FrameCounter = 0;
    528e:	|               clr.w 1e874 <FrameCounter>

	while ( !weAreDoneSoQuit ) {	
    5294:	|     ,-------- bra.w 5344 <main_sludge+0x3f6>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    5298:	|  ,--|-------> jsr 7ba2 <sludgeDisplay>
		CsiCheckInput();
    529e:	|  |  |         jsr d954 <CsiCheckInput>
		walkAllPeople();
    52a4:	|  |  |         jsr c90e <walkAllPeople>
		handleInput();
    52aa:	|  |  |         jsr 662c <handleInput>
		//custom->color[0] = 0x000;			
		//WaitVbl();
		while( FrameCounter < gameSettings.refreshRate)
    52b0:	|  |  |         nop
    52b2:	|  |  |     ,-> move.w 1e874 <FrameCounter>,d0
    52b8:	|  |  |     |   move.w d0,d0
    52ba:	|  |  |     |   andi.l #65535,d0
    52c0:	|  |  |     |   move.l 1e95c <gameSettings+0xa>,d1
    52c6:	|  |  |     |   cmp.l d0,d1
    52c8:	|  |  |     '-- bhi.s 52b2 <main_sludge+0x364>
		{		
		}
		if( FrameCounter > gameSettings.refreshRate)
    52ca:	|  |  |         move.w 1e874 <FrameCounter>,d0
    52d0:	|  |  |         move.w d0,d0
    52d2:	|  |  |         andi.l #65535,d0
    52d8:	|  |  |         move.l 1e95c <gameSettings+0xa>,d1
    52de:	|  |  |         cmp.l d0,d1
    52e0:	|  |  |     ,-- bcc.s 52f0 <main_sludge+0x3a2>
		{
			KPrintF("Framerate too slow\n");
    52e2:	|  |  |     |   pea 198d0 <PutChar+0x930>
    52e8:	|  |  |     |   jsr 184fe <KPrintF>
    52ee:	|  |  |     |   addq.l #4,sp
		}
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    52f0:	|  |  |     '-> movea.l #14675972,a0
    52f6:	|  |  |         move.l (a0),d0
    52f8:	|  |  |         move.l d0,12(sp)
		vpos&=0x1ff00;
    52fc:	|  |  |         move.l 12(sp),d0
    5300:	|  |  |         andi.l #130816,d0
    5306:	|  |  |         move.l d0,12(sp)
			test[0] = AvailMem(MEMF_CHIP);
			KPrintF("Chip Mem available: %ld\n", test[0]);
			test[0] = AvailMem(MEMF_LARGEST);
			KPrintF("Largest Mem Block available: %ld\n", test[0]);
		} */
		while(vpos<(300<<8) || vpos>(301<<8)) {
    530a:	|  |  |     ,-- bra.s 5326 <main_sludge+0x3d8>
			vpos=*(volatile ULONG*)0xDFF004;
    530c:	|  |  |  ,--|-> movea.l #14675972,a0
    5312:	|  |  |  |  |   move.l (a0),d0
    5314:	|  |  |  |  |   move.l d0,12(sp)
			vpos&=0x1ff00;			
    5318:	|  |  |  |  |   move.l 12(sp),d0
    531c:	|  |  |  |  |   andi.l #130816,d0
    5322:	|  |  |  |  |   move.l d0,12(sp)
		while(vpos<(300<<8) || vpos>(301<<8)) {
    5326:	|  |  |  |  '-> move.l 12(sp),d0
    532a:	|  |  |  |      cmpi.l #76799,d0
    5330:	|  |  |  +----- bls.s 530c <main_sludge+0x3be>
    5332:	|  |  |  |      move.l 12(sp),d0
    5336:	|  |  |  |      cmpi.l #77056,d0
    533c:	|  |  |  '----- bhi.s 530c <main_sludge+0x3be>

		}

		FrameCounter = 0;
    533e:	|  |  |         clr.w 1e874 <FrameCounter>
	while ( !weAreDoneSoQuit ) {	
    5344:	|  |  '-------> move.l 1e7d8 <weAreDoneSoQuit>,d0
    534a:	|  '----------- beq.w 5298 <main_sludge+0x34a>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    534e:	|               move.l 56(sp),36(sp)
    5354:	|               move.l 1e876 <SysBase>,d0
    535a:	|               movea.l d0,a6
    535c:	|               movea.l 36(sp),a1
    5360:	|               jsr -690(a6)
}
    5364:	'-------------> movem.l (sp)+,d2-d3/a6
    5368:	                lea 48(sp),sp
    536c:	                rts

0000536e <setGameFilePath>:

void setGameFilePath (char * f) {
    536e:	          lea -1104(sp),sp
    5372:	          move.l a6,-(sp)
    5374:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    5376:	          move.l #1112,d0
    537c:	          add.l sp,d0
    537e:	          addi.l #-1102,d0
    5384:	          move.l d0,1100(sp)
    5388:	          move.l #998,1096(sp)
    5390:	          move.l 1e87e <DOSBase>,d0
    5396:	          movea.l d0,a6
    5398:	          move.l 1100(sp),d1
    539c:	          move.l 1096(sp),d2
    53a0:	          jsr -564(a6)
    53a4:	          move.w d0,1094(sp)
    53a8:	          move.w 1094(sp),d0
    53ac:	      ,-- bne.s 53bc <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    53ae:	      |   pea 198e4 <PutChar+0x944>
    53b4:	      |   jsr 184fe <KPrintF>
    53ba:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    53bc:	      '-> moveq #-1,d0
    53be:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    53c2:	          clr.l 1104(sp)
    53c6:	   ,----- bra.s 53e4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    53c8:	,--|----> move.l 1104(sp),d0
    53cc:	|  |      movea.l 1116(sp),a0
    53d0:	|  |      adda.l d0,a0
    53d2:	|  |      move.b (a0),d0
    53d4:	|  |      cmpi.b #47,d0
    53d8:	|  |  ,-- bne.s 53e0 <setGameFilePath+0x72>
    53da:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    53e0:	|  |  '-> addq.l #1,1104(sp)
    53e4:	|  '----> move.l 1104(sp),d0
    53e8:	|         movea.l 1116(sp),a0
    53ec:	|         adda.l d0,a0
    53ee:	|         move.b (a0),d0
    53f0:	'-------- bne.s 53c8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    53f2:	          moveq #-1,d0
    53f4:	          cmp.l 1108(sp),d0
    53f8:	   ,----- beq.s 5472 <setGameFilePath+0x104>
		f[got] = 0;	
    53fa:	   |      move.l 1108(sp),d0
    53fe:	   |      movea.l 1116(sp),a0
    5402:	   |      adda.l d0,a0
    5404:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    5406:	   |      move.l 1116(sp),1090(sp)
    540c:	   |      moveq #-2,d0
    540e:	   |      move.l d0,1086(sp)
    5412:	   |      move.l 1e87e <DOSBase>,d0
    5418:	   |      movea.l d0,a6
    541a:	   |      move.l 1090(sp),d1
    541e:	   |      move.l 1086(sp),d2
    5422:	   |      jsr -84(a6)
    5426:	   |      move.l d0,1082(sp)
    542a:	   |      move.l 1082(sp),d0
    542e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    5432:	   |      move.l 1078(sp),1074(sp)
    5438:	   |      move.l 1e87e <DOSBase>,d0
    543e:	   |      movea.l d0,a6
    5440:	   |      move.l 1074(sp),d1
    5444:	   |      jsr -126(a6)
    5448:	   |      move.l d0,1070(sp)
    544c:	   |      move.l 1070(sp),d0
    5450:	   |  ,-- bne.s 5464 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    5452:	   |  |   move.l 1116(sp),-(sp)
    5456:	   |  |   pea 1990a <PutChar+0x96a>
    545c:	   |  |   jsr 184fe <KPrintF>
    5462:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    5464:	   |  '-> move.l 1108(sp),d0
    5468:	   |      movea.l 1116(sp),a0
    546c:	   |      adda.l d0,a0
    546e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    5472:	   '----> move.l #400,1066(sp)
    547a:	          clr.l 1062(sp)
    547e:	          move.l 1e876 <SysBase>,d0
    5484:	          movea.l d0,a6
    5486:	          move.l 1066(sp),d0
    548a:	          move.l 1062(sp),d1
    548e:	          jsr -684(a6)
    5492:	          move.l d0,1058(sp)
    5496:	          move.l 1058(sp),d0
    549a:	          move.l d0,1e7d0 <gamePath>
	if (gamePath==0) {
    54a0:	          move.l 1e7d0 <gamePath>,d0
    54a6:	      ,-- bne.s 54ba <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    54a8:	      |   pea 1993d <PutChar+0x99d>
    54ae:	      |   jsr 184fe <KPrintF>
    54b4:	      |   addq.l #4,sp
    54b6:	   ,--|-- bra.w 55a2 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    54ba:	   |  '-> move.l 1e7d0 <gamePath>,1054(sp)
    54c2:	   |      moveq #-2,d0
    54c4:	   |      move.l d0,1050(sp)
    54c8:	   |      move.l 1e87e <DOSBase>,d0
    54ce:	   |      movea.l d0,a6
    54d0:	   |      move.l 1054(sp),d1
    54d4:	   |      move.l 1050(sp),d2
    54d8:	   |      jsr -84(a6)
    54dc:	   |      move.l d0,1046(sp)
    54e0:	   |      move.l 1046(sp),d0
    54e4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    54e8:	   |      move.l 1042(sp),1038(sp)
    54ee:	   |      move.l 1e87e <DOSBase>,d0
    54f4:	   |      movea.l d0,a6
    54f6:	   |      move.l 1038(sp),d1
    54fa:	   |      jsr -126(a6)
    54fe:	   |      move.l d0,1034(sp)
    5502:	   |      move.l 1034(sp),d0
    5506:	   |  ,-- bne.s 5516 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5508:	   |  |   pea 19978 <PutChar+0x9d8>
    550e:	   |  |   jsr 184fe <KPrintF>
    5514:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    5516:	   |  '-> move.l #1112,d0
    551c:	   |      add.l sp,d0
    551e:	   |      addi.l #-1102,d0
    5524:	   |      move.l d0,1030(sp)
    5528:	   |      moveq #-2,d0
    552a:	   |      move.l d0,1026(sp)
    552e:	   |      move.l 1e87e <DOSBase>,d0
    5534:	   |      movea.l d0,a6
    5536:	   |      move.l 1030(sp),d1
    553a:	   |      move.l 1026(sp),d2
    553e:	   |      jsr -84(a6)
    5542:	   |      move.l d0,1022(sp)
    5546:	   |      move.l 1022(sp),d0
    554a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    554e:	   |      move.l 1042(sp),1018(sp)
    5554:	   |      move.l 1e87e <DOSBase>,d0
    555a:	   |      movea.l d0,a6
    555c:	   |      move.l 1018(sp),d1
    5560:	   |      jsr -126(a6)
    5564:	   |      move.l d0,1014(sp)
    5568:	   |      move.l 1014(sp),d0
    556c:	   |  ,-- bne.s 5582 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    556e:	   |  |   moveq #10,d0
    5570:	   |  |   add.l sp,d0
    5572:	   |  |   move.l d0,-(sp)
    5574:	   |  |   pea 199a4 <PutChar+0xa04>
    557a:	   |  |   jsr 184fe <KPrintF>
    5580:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    5582:	   |  '-> move.l 1e7d0 <gamePath>,d0
    5588:	   +----- beq.s 55a2 <setGameFilePath+0x234>
    558a:	   |      move.l 1e7d0 <gamePath>,1010(sp)
    5592:	   |      move.l 1e876 <SysBase>,d0
    5598:	   |      movea.l d0,a6
    559a:	   |      movea.l 1010(sp),a1
    559e:	   |      jsr -690(a6)
}
    55a2:	   '----> move.l (sp)+,d2
    55a4:	          movea.l (sp)+,a6
    55a6:	          lea 1104(sp),sp
    55aa:	          rts

000055ac <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    55ac:	,-------> subq.l #8,sp
    55ae:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    55b0:	|         move.l 16(sp),d0
    55b4:	|         move.l d0,-(sp)
    55b6:	|         pea 19aac <PutChar+0xb0c>
    55bc:	|         jsr 184fe <KPrintF>
    55c2:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    55c4:	|         move.l 16(sp),-(sp)
    55c8:	|         jsr 7936 <pauseFunction>
    55ce:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    55d0:	|     ,-- bra.s 55e2 <abortFunction+0x36>
    55d2:	|  ,--|-> moveq #24,d0
    55d4:	|  |  |   add.l 16(sp),d0
    55d8:	|  |  |   move.l d0,-(sp)
    55da:	|  |  |   jsr 163a2 <trimStack>
    55e0:	|  |  |   addq.l #4,sp
    55e2:	|  |  '-> movea.l 16(sp),a0
    55e6:	|  |      move.l 24(a0),d0
    55ea:	|  '----- bne.s 55d2 <abortFunction+0x26>
	//FreeVec( fun -> compiledLines);
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    55ec:	|         clr.l 8(sp)
    55f0:	|     ,-- bra.s 5610 <abortFunction+0x64>
    55f2:	|  ,--|-> movea.l 16(sp),a0
    55f6:	|  |  |   move.l 20(a0),d1
    55fa:	|  |  |   move.l 8(sp),d0
    55fe:	|  |  |   lsl.l #3,d0
    5600:	|  |  |   add.l d1,d0
    5602:	|  |  |   move.l d0,-(sp)
    5604:	|  |  |   jsr 15c6c <unlinkVar>
    560a:	|  |  |   addq.l #4,sp
    560c:	|  |  |   addq.l #1,8(sp)
    5610:	|  |  '-> movea.l 16(sp),a0
    5614:	|  |      move.l 8(a0),d0
    5618:	|  |      cmp.l 8(sp),d0
    561c:	|  '----- bgt.s 55f2 <abortFunction+0x46>
	if( fun -> numLocals > 0) {
    561e:	|         movea.l 16(sp),a0
    5622:	|         move.l 8(a0),d0
    5626:	|     ,-- ble.s 5642 <abortFunction+0x96>
		FreeVec(fun -> localVars);
    5628:	|     |   movea.l 16(sp),a0
    562c:	|     |   move.l 20(a0),4(sp)
    5632:	|     |   move.l 1e876 <SysBase>,d0
    5638:	|     |   movea.l d0,a6
    563a:	|     |   movea.l 4(sp),a1
    563e:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    5642:	|     '-> moveq #28,d0
    5644:	|         add.l 16(sp),d0
    5648:	|         move.l d0,-(sp)
    564a:	|         jsr 15c6c <unlinkVar>
    5650:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);	
    5652:	|         movea.l 16(sp),a0
    5656:	|         move.l 40(a0),d0
    565a:	|     ,-- beq.s 566c <abortFunction+0xc0>
    565c:	|     |   movea.l 16(sp),a0
    5660:	|     |   move.l 40(a0),d0
    5664:	|     |   move.l d0,-(sp)
    5666:	'-----|-- jsr 55ac <abortFunction>(pc)
    566a:	      |   addq.l #4,sp
	fun->unloaded = 1;
    566c:	      '-> movea.l 16(sp),a0
    5670:	          moveq #1,d0
    5672:	          move.l d0,58(a0)

	KPrintF("abortFunction finished\n");
    5676:	          pea 19ac6 <PutChar+0xb26>
    567c:	          jsr 184fe <KPrintF>
    5682:	          addq.l #4,sp
}
    5684:	          nop
    5686:	          movea.l (sp)+,a6
    5688:	          addq.l #8,sp
    568a:	          rts

0000568c <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    568c:	          subq.l #8,sp
	int n = 0;
    568e:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5692:	          movea.l 20(sp),a0
    5696:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5698:	          move.l 1e80c <allRunningFunctions>,(sp)
	while (fun) {
    569e:	   ,----- bra.s 56cc <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    56a0:	,--|----> movea.l (sp),a0
    56a2:	|  |      move.l (a0),d0
    56a4:	|  |      cmp.l 12(sp),d0
    56a8:	|  |  ,-- bne.s 56c6 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    56aa:	|  |  |   movea.l (sp),a0
    56ac:	|  |  |   move.w #1,54(a0)
			n++;
    56b2:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    56b6:	|  |  |   move.l (sp),d0
    56b8:	|  |  |   cmp.l 16(sp),d0
    56bc:	|  |  +-- bne.s 56c6 <cancelAFunction+0x3a>
    56be:	|  |  |   movea.l 20(sp),a0
    56c2:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    56c6:	|  |  '-> movea.l (sp),a0
    56c8:	|  |      move.l 44(a0),(sp)
	while (fun) {
    56cc:	|  '----> tst.l (sp)
    56ce:	'-------- bne.s 56a0 <cancelAFunction+0x14>
	}
	return n;
    56d0:	          move.l 4(sp),d0
}
    56d4:	          addq.l #8,sp
    56d6:	          rts

000056d8 <completeTimers>:


void completeTimers () {
    56d8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    56da:	          move.l 1e80c <allRunningFunctions>,(sp)

	while (thisFunction) {
    56e0:	   ,----- bra.s 56f6 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    56e2:	,--|----> movea.l (sp),a0
    56e4:	|  |      move.b 56(a0),d0
    56e8:	|  |  ,-- bne.s 56f0 <completeTimers+0x18>
    56ea:	|  |  |   movea.l (sp),a0
    56ec:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    56f0:	|  |  '-> movea.l (sp),a0
    56f2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    56f6:	|  '----> tst.l (sp)
    56f8:	'-------- bne.s 56e2 <completeTimers+0xa>
	}
}
    56fa:	          nop
    56fc:	          nop
    56fe:	          addq.l #4,sp
    5700:	          rts

00005702 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    5702:	                                                             lea -80(sp),sp
	BOOL keepLooping = TRUE;
    5706:	                                                             move.w #1,78(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    570c:	                                                             movea.l 84(sp),a0
    5710:	                                                             move.w 54(a0),d0
    5714:	,----------------------------------------------------------- beq.w 65ce <continueFunction+0xecc>
		abortFunction (fun);
    5718:	|                                                            move.l 84(sp),-(sp)
    571c:	|                                                            jsr 55ac <abortFunction>
    5722:	|                                                            addq.l #4,sp
		return TRUE;
    5724:	|                                                            moveq #1,d0
    5726:	|  ,-------------------------------------------------------- bra.w 65d8 <continueFunction+0xed6>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    572a:	|  |  ,----------------------------------------------------> move.w #1,76(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5730:	|  |  |                                                      movea.l 84(sp),a0
    5734:	|  |  |                                                      move.l 4(a0),d1
    5738:	|  |  |                                                      movea.l 84(sp),a0
    573c:	|  |  |                                                      move.l 36(a0),d0
    5740:	|  |  |                                                      lsl.l #3,d0
    5742:	|  |  |                                                      movea.l d1,a0
    5744:	|  |  |                                                      adda.l d0,a0
    5746:	|  |  |                                                      move.l 4(a0),72(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    574c:	|  |  |                                                      movea.l 84(sp),a0
    5750:	|  |  |                                                      move.l 4(a0),d1
    5754:	|  |  |                                                      movea.l 84(sp),a0
    5758:	|  |  |                                                      move.l 36(a0),d0
    575c:	|  |  |                                                      lsl.l #3,d0
    575e:	|  |  |                                                      movea.l d1,a0
    5760:	|  |  |                                                      adda.l d0,a0
    5762:	|  |  |                                                      move.l (a0),68(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5766:	|  |  |                                                      moveq #41,d0
    5768:	|  |  |                                                      cmp.l 68(sp),d0
    576c:	|  |  |  ,-------------------------------------------------- bcs.w 6582 <continueFunction+0xe80>
    5770:	|  |  |  |                                                   move.l 68(sp),d0
    5774:	|  |  |  |                                                   add.l d0,d0
    5776:	|  |  |  |                                                   movea.l d0,a0
    5778:	|  |  |  |                                                   adda.l #22404,a0
    577e:	|  |  |  |                                                   move.w (a0),d0
    5780:	|  |  |  |                                                   jmp (5784 <continueFunction+0x82>,pc,d0.w)
    5784:	|  |  |  |                                                   .short 0x0dfe
    5786:	|  |  |  |                                                   ori.w #2714,(a4)
    578a:	|  |  |  |                                                   ([,688)eori.w #2460,([2504,a2],688)
    5794:	|  |  |  |                                                   .short 0x0af6
    5796:	|  |  |  |                                                   .short 0x0af6
    5798:	|  |  |  |                                                   .short 0x0af6
    579a:	|  |  |  |                                                   .short 0x0af6
    579c:	|  |  |  |                                                   .short 0x02de
    579e:	|  |  |  |                                                   btst d1,6296 <continueFunction+0xb94>(pc)
    57a2:	|  |  |  |                                                   .short 0x0af6
    57a4:	|  |  |  |                                                   .short 0x0af6
    57a6:	|  |  |  |                                                   andi.l #62260118,(a0)
    57ac:	|  |  |  |                                                   .short 0x00f0
    57ae:	|  |  |  |                                                   subi.b #112,(a0)+
    57b2:	|  |  |  |                                                   bset d1,(a6)
    57b4:	|  |  |  |                                                   eori.b #86,ccr
    57b8:	|  |  |  |                                                   bset d4,(-10,a4,d0.l:2)
    57bc:	|  |  |  |                                                   .short 0x0af6
    57be:	|  |  |  |                                                   eori.l #66456310,2806(a4)
    57c6:	|  |  |  |                                                   movep.w d3,2174(a6)
    57ca:	|  |  |  |                                                   .short 0x0808
    57cc:	|  |  |  |                                                   bset #84,43a <encodeFilename+0x13c>
    57d2:	|  |  |  |                                                   .short 0x043a
    57d4:	|  |  |  |                                                   .short 0x043a
    57d6:	|  |  |  |                                                   eori.b #111,(a0)+
			case SLU_RETURN:
			if (fun -> calledBy) {
    57da:	|  |  |  |                                                   ori.w #8232,(a4)
    57de:	|  |  |  |                                                   ori.b #122,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    57e4:	|  |  |  |                                                   ori.w #12136,(a4)
    57e8:	|  |  |  |                                                   ori.b #48,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    57ee:	|  |  |  |                                                   ori.w #12328,(a4)
    57f2:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    57f8:	|  |  |  |                                                   add.l 48(sp),d1
    57fc:	|  |  |  |                                                   moveq #28,d0
    57fe:	|  |  |  |                                                   add.l 84(sp),d0
    5802:	|  |  |  |                                                   move.l d1,-(sp)
    5804:	|  |  |  |                                                   move.l d0,-(sp)
    5806:	|  |  |  |                                                   jsr 15ed8 <copyVariable>
    580c:	|  |  |  |                                                   addq.l #8,sp
				int tmptimeleft = fun -> timeLeft;
    580e:	|  |  |  |                                                   movea.l 84(sp),a0
    5812:	|  |  |  |                                                   move.l 12(a0),44(sp)
				finishFunction (fun);
    5818:	|  |  |  |                                                   move.l 84(sp),-(sp)
    581c:	|  |  |  |                                                   jsr 65de <finishFunction>
    5822:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5824:	|  |  |  |                                                   move.l 48(sp),84(sp)
				fun -> timeLeft += tmptimeleft;
    582a:	|  |  |  |                                                   movea.l 84(sp),a0
    582e:	|  |  |  |                                                   move.l 12(a0),d0
    5832:	|  |  |  |                                                   add.l 44(sp),d0
    5836:	|  |  |  |                                                   movea.l 84(sp),a0
    583a:	|  |  |  |                                                   move.l d0,12(a0)
				KPrintF("Starting restartfuncion on SLU_RETURN\n");
    583e:	|  |  |  |                                                   pea 19ade <PutChar+0xb3e>
    5844:	|  |  |  |                                                   jsr 184fe <KPrintF>
    584a:	|  |  |  |                                                   addq.l #4,sp
				restartFunction (fun);
    584c:	|  |  |  |                                                   move.l 84(sp),-(sp)
    5850:	|  |  |  |                                                   jsr 79a0 <restartFunction>
    5856:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5858:	|  |  |  |  ,----------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>
				finishFunction (fun);
    585c:	|  |  |  |  |                                                move.l 84(sp),-(sp)
    5860:	|  |  |  |  |                                                jsr 65de <finishFunction>
    5866:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5868:	|  |  |  |  |                                                clr.w 76(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    586c:	|  |  |  |  |                                                clr.w 78(sp)
			break;
    5870:	|  |  |  |  +----------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5874:	|  |  |  |  |                                                movea.l 84(sp),a0
    5878:	|  |  |  |  |                                                move.l 28(a0),d0
    587c:	|  |  |  |  |                                                moveq #2,d1
    587e:	|  |  |  |  |                                                cmp.l d0,d1
    5880:	|  |  |  |  |                                            ,-- beq.s 588c <continueFunction+0x18a>
    5882:	|  |  |  |  |                                            |   moveq #4,d1
    5884:	|  |  |  |  |                                            |   cmp.l d0,d1
    5886:	|  |  |  |  |                                         ,--|-- beq.s 58da <continueFunction+0x1d8>
    5888:	|  |  |  |  |                                ,--------|--|-- bra.w 59c2 <continueFunction+0x2c0>
				case SVT_FUNC:
				pauseFunction (fun);		
    588c:	|  |  |  |  |                                |        |  '-> move.l 84(sp),-(sp)
    5890:	|  |  |  |  |                                |        |      jsr 7936 <pauseFunction>
    5896:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5898:	|  |  |  |  |                                |        |      moveq #24,d0
    589a:	|  |  |  |  |                                |        |      add.l 84(sp),d0
    589e:	|  |  |  |  |                                |        |      movea.l 84(sp),a0
    58a2:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    58a6:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    58aa:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    58ac:	|  |  |  |  |                                |        |      move.l 92(sp),-(sp)
    58b0:	|  |  |  |  |                                |        |      move.l 84(sp),-(sp)
    58b4:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    58b6:	|  |  |  |  |                                |        |      jsr 7d2a <startNewFunctionNum>
    58bc:	|  |  |  |  |                                |        |      lea 20(sp),sp
    58c0:	|  |  |  |  |                                |        |      tst.l d0
    58c2:	|  |  |  |  |                                |        |  ,-- bne.s 58ca <continueFunction+0x1c8>
    58c4:	|  |  |  |  |                                |        |  |   clr.w d0
    58c6:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 65d8 <continueFunction+0xed6>
				fun = allRunningFunctions;
    58ca:	|  |  |  |  |                                |        |  '-> move.l 1e80c <allRunningFunctions>,84(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    58d2:	|  |  |  |  |                                |        |      clr.w 76(sp)
				break;
    58d6:	|  |  |  |  |                                |  ,-----|----- bra.w 59d6 <continueFunction+0x2d4>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    58da:	|  |  |  |  |                                |  |     '----> move.l 72(sp),d1
    58de:	|  |  |  |  |                                |  |            movea.l 84(sp),a0
    58e2:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    58e6:	|  |  |  |  |                                |  |            move.l 84(sp),-(sp)
    58ea:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    58ec:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    58ee:	|  |  |  |  |                                |  |            jsr 146ea <callBuiltIn>
    58f4:	|  |  |  |  |                                |  |            lea 12(sp),sp
    58f8:	|  |  |  |  |                                |  |            move.l d0,56(sp)

					switch (br) {
    58fc:	|  |  |  |  |                                |  |            moveq #5,d0
    58fe:	|  |  |  |  |                                |  |            cmp.l 56(sp),d0
    5902:	|  |  |  |  |                                |  |  ,-------- bcs.w 59be <continueFunction+0x2bc>
    5906:	|  |  |  |  |                                |  |  |         move.l 56(sp),d0
    590a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    590c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    590e:	|  |  |  |  |                                |  |  |         adda.l #22810,a0
    5914:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5916:	|  |  |  |  |                                |  |  |         jmp (591a <continueFunction+0x218>,pc,d0.w)
    591a:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    5920:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5924:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    592a:	|  |  |  |  |                                |  |  |         subx.b d5,d5
    592c:	|  |  |  |  |                                |  |  |         jsr 184fe <KPrintF>
    5932:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    5934:	|  |  |  |  |                                |  |  |         clr.w d0
    5936:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 65d8 <continueFunction+0xed6>

						case BR_PAUSE:
						pauseFunction (fun);
    593a:	|  |  |  |  |                                |  |  |         move.l 84(sp),-(sp)
    593e:	|  |  |  |  |                                |  |  |         jsr 7936 <pauseFunction>
    5944:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5946:	|  |  |  |  |                                |  |  |         clr.w 78(sp)
						break;
    594a:	|  |  |  |  |                                |  |  |  ,----- bra.s 59c0 <continueFunction+0x2be>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    594c:	|  |  |  |  |                                |  |  |  |      clr.w 78(sp)
						advanceNow = FALSE;
    5950:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						break;
    5954:	|  |  |  |  |                                |  |  |  +----- bra.s 59c0 <continueFunction+0x2be>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5956:	|  |  |  |  |                                |  |  |  |      movea.l 84(sp),a0
    595a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),52(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    5960:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    5962:	|  |  |  |  |                                |  |  |  |      add.l 84(sp),d0
    5966:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    596a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    596e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5970:	|  |  |  |  |                                |  |  |  |      jsr 16310 <setVariable>
    5976:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    597a:	|  |  |  |  |                                |  |  |  |      move.l 84(sp),-(sp)
    597e:	|  |  |  |  |                                |  |  |  |      jsr 7936 <pauseFunction>
    5984:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5986:	|  |  |  |  |                                |  |  |  |      move.l 1e844 <noStack>,d1
    598c:	|  |  |  |  |                                |  |  |  |      move.l 52(sp),d0
    5990:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5992:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5994:	|  |  |  |  |                                |  |  |  |      move.l 92(sp),-(sp)
    5998:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    599a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    599c:	|  |  |  |  |                                |  |  |  |      jsr 7d2a <startNewFunctionNum>
    59a2:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    59a6:	|  |  |  |  |                                |  |  |  |      tst.l d0
    59a8:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 59b0 <continueFunction+0x2ae>
    59aa:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    59ac:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 65d8 <continueFunction+0xed6>
							fun = allRunningFunctions;
    59b0:	|  |  |  |  |                                |  |  |  |  '-> move.l 1e80c <allRunningFunctions>,84(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    59b8:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						}
						break;
    59bc:	|  |  |  |  |                                |  |  |  +----- bra.s 59c0 <continueFunction+0x2be>

						default:
						break;
    59be:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    59c0:	|  |  |  |  |                                |  +-----'----X bra.s 59d6 <continueFunction+0x2d4>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    59c2:	|  |  |  |  |                                '--|----------> pea 19b50 <PutChar+0xbb0>
    59c8:	|  |  |  |  |                                   |            jsr 184fe <KPrintF>
    59ce:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    59d0:	|  |  |  |  |                                   |            clr.w d0
    59d2:	|  +--|--|--|-----------------------------------|----------- bra.w 65d8 <continueFunction+0xed6>
			}
			break;
    59d6:	|  |  |  |  +-----------------------------------'----------X bra.w 65b6 <continueFunction+0xeb4>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    59da:	|  |  |  |  |                                                moveq #28,d0
    59dc:	|  |  |  |  |                                                add.l 84(sp),d0
    59e0:	|  |  |  |  |                                                clr.l -(sp)
    59e2:	|  |  |  |  |                                                clr.l -(sp)
    59e4:	|  |  |  |  |                                                move.l d0,-(sp)
    59e6:	|  |  |  |  |                                                jsr 16310 <setVariable>
    59ec:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    59f0:	|  |  |  |  +----------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    59f4:	|  |  |  |  |                                                move.l 72(sp),d1
    59f8:	|  |  |  |  |                                                moveq #28,d0
    59fa:	|  |  |  |  |                                                add.l 84(sp),d0
    59fe:	|  |  |  |  |                                                move.l d1,-(sp)
    5a00:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5a04:	|  |  |  |  |                                                move.l d0,-(sp)
    5a06:	|  |  |  |  |                                                jsr 16310 <setVariable>
    5a0c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a10:	|  |  |  |  +----------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5a14:	|  |  |  |  |                                                move.l 72(sp),d1
    5a18:	|  |  |  |  |                                                moveq #28,d0
    5a1a:	|  |  |  |  |                                                add.l 84(sp),d0
    5a1e:	|  |  |  |  |                                                move.l d1,-(sp)
    5a20:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5a24:	|  |  |  |  |                                                move.l d0,-(sp)
    5a26:	|  |  |  |  |                                                jsr 16310 <setVariable>
    5a2c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a30:	|  |  |  |  +----------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    5a34:	|  |  |  |  |                                                moveq #28,d0
    5a36:	|  |  |  |  |                                                add.l 84(sp),d0
    5a3a:	|  |  |  |  |                                                movea.l 84(sp),a0
    5a3e:	|  |  |  |  |                                                movea.l 20(a0),a0
    5a42:	|  |  |  |  |                                                move.l 72(sp),d1
    5a46:	|  |  |  |  |                                                lsl.l #3,d1
    5a48:	|  |  |  |  |                                                add.l a0,d1
    5a4a:	|  |  |  |  |                                                move.l d0,-(sp)
    5a4c:	|  |  |  |  |                                                move.l d1,-(sp)
    5a4e:	|  |  |  |  |                                                jsr 15ed8 <copyVariable>
    5a54:	|  |  |  |  |                                                addq.l #8,sp
    5a56:	|  |  |  |  |                                                tst.w d0
    5a58:	|  |  |  |  |  ,-------------------------------------------- bne.w 6594 <continueFunction+0xe92>
    5a5c:	|  |  |  |  |  |                                             clr.w d0
    5a5e:	|  +--|--|--|--|-------------------------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5a62:	|  |  |  |  |  |                                             moveq #28,d0
    5a64:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a68:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a6a:	|  |  |  |  |  |                                             jsr 15f5e <getBoolean>
    5a70:	|  |  |  |  |  |                                             addq.l #4,sp
    5a72:	|  |  |  |  |  |                                             tst.w d0
    5a74:	|  |  |  |  |  |                                      ,----- beq.s 5a90 <continueFunction+0x38e>
    5a76:	|  |  |  |  |  |                                      |      movea.l 84(sp),a0
    5a7a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5a7e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5a80:	|  |  |  |  |  |                                      |      jsr 15f5e <getBoolean>
    5a86:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5a88:	|  |  |  |  |  |                                      |      tst.w d0
    5a8a:	|  |  |  |  |  |                                      +----- beq.s 5a90 <continueFunction+0x38e>
    5a8c:	|  |  |  |  |  |                                      |      moveq #1,d0
    5a8e:	|  |  |  |  |  |                                      |  ,-- bra.s 5a92 <continueFunction+0x390>
    5a90:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a92:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a94:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5a98:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a9a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a9e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5aa0:	|  |  |  |  |  |                                             jsr 16310 <setVariable>
    5aa6:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5aaa:	|  |  |  |  |  |                                             moveq #24,d0
    5aac:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ab0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ab2:	|  |  |  |  |  |                                             jsr 163a2 <trimStack>
    5ab8:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5aba:	|  |  |  |  +--|-------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5abe:	|  |  |  |  |  |                                             moveq #28,d0
    5ac0:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ac4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ac6:	|  |  |  |  |  |                                             jsr 15f5e <getBoolean>
    5acc:	|  |  |  |  |  |                                             addq.l #4,sp
    5ace:	|  |  |  |  |  |                                             tst.w d0
    5ad0:	|  |  |  |  |  |                                         ,-- bne.s 5ae8 <continueFunction+0x3e6>
    5ad2:	|  |  |  |  |  |                                         |   movea.l 84(sp),a0
    5ad6:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5ada:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5adc:	|  |  |  |  |  |                                         |   jsr 15f5e <getBoolean>
    5ae2:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5ae4:	|  |  |  |  |  |                                         |   tst.w d0
    5ae6:	|  |  |  |  |  |                                      ,--|-- beq.s 5aec <continueFunction+0x3ea>
    5ae8:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5aea:	|  |  |  |  |  |                                      |  ,-- bra.s 5aee <continueFunction+0x3ec>
    5aec:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5aee:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5af0:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5af4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5af6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5afa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5afc:	|  |  |  |  |  |                                             jsr 16310 <setVariable>
    5b02:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5b06:	|  |  |  |  |  |                                             moveq #24,d0
    5b08:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b0c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b0e:	|  |  |  |  |  |                                             jsr 163a2 <trimStack>
    5b14:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5b16:	|  |  |  |  +--|-------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5b1a:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b1e:	|  |  |  |  |  |                                             moveq #28,d0
    5b20:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b24:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b26:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5b2a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b2c:	|  |  |  |  |  |                                             jsr 16310 <setVariable>
    5b32:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b36:	|  |  |  |  +--|-------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5b3a:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b3e:	|  |  |  |  |  |                                             moveq #28,d0
    5b40:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b44:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b46:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5b4a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b4c:	|  |  |  |  |  |                                             jsr 16310 <setVariable>
    5b52:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b56:	|  |  |  |  +--|-------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5b5a:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b5e:	|  |  |  |  |  |                                             moveq #28,d0
    5b60:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b64:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b66:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5b6a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b6c:	|  |  |  |  |  |                                             jsr 16310 <setVariable>
    5b72:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b76:	|  |  |  |  +--|-------------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5b7a:	|  |  |  |  |  |                                             move.l 1e7c8 <dialogValue>,d0
    5b80:	|  |  |  |  |  |                                             moveq #1,d1
    5b82:	|  |  |  |  |  |                                             cmp.l d0,d1
    5b84:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6598 <continueFunction+0xe96>
				KPrintF(ERROR_HACKER);
    5b88:	|  |  |  |  |  |  |                                          pea 19b65 <PutChar+0xbc5>
    5b8e:	|  |  |  |  |  |  |                                          jsr 184fe <KPrintF>
    5b94:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5b96:	|  |  |  |  |  |  |                                          clr.w d0
    5b98:	|  +--|--|--|--|--|----------------------------------------- bra.w 65d8 <continueFunction+0xed6>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5b9c:	|  |  |  |  |  |  |                                          move.l 72(sp),d1
    5ba0:	|  |  |  |  |  |  |                                          moveq #28,d0
    5ba2:	|  |  |  |  |  |  |                                          add.l 84(sp),d0
    5ba6:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5ba8:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5baa:	|  |  |  |  |  |  |                                          jsr 15aa2 <loadStringToVar>
    5bb0:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5bb2:	|  |  |  |  |  |  |                                          tst.w d0
    5bb4:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 659c <continueFunction+0xe9a>
					return FALSE;
    5bb8:	|  |  |  |  |  |  |  |                                       clr.w d0
    5bba:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5bbe:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5bc2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5bc6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5bc8:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5bca:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5bcc:	|  |  |  |  |  |  |  |                                ,----- beq.s 5c2a <continueFunction+0x528>
    5bce:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5bd0:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5bd2:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5dbe <continueFunction+0x6bc>
    5bd6:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5bd8:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5be4 <continueFunction+0x4e2>
    5bda:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5bdc:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5bde:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5c2a <continueFunction+0x528>
    5be0:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5dbe <continueFunction+0x6bc>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5be4:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5be6:	|  |  |  |  |  |  |  |              |                 |      cmp.l 68(sp),d0
    5bea:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5c16 <continueFunction+0x514>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5bec:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5bee:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5bf2:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5bf4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5bf6:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5bf8:	|  |  |  |  |  |  |  |              |                 |  |   jsr 16310 <setVariable>
    5bfe:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5c02:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5c04:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5c08:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5c0a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 163a2 <trimStack>
    5c10:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5c12:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5dd4 <continueFunction+0x6d2>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5c16:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 19ba6 <PutChar+0xc06>
    5c1c:	|  |  |  |  |  |  |  |              |  |              |      jsr 184fe <KPrintF>
    5c22:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5c24:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5c26:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 65d8 <continueFunction+0xed6>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5c2a:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 84(sp),a0
    5c2e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c32:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5c36:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5c38:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c4e <continueFunction+0x54c>
					KPrintF((ERROR_INDEX_EMPTY));
    5c3a:	|  |  |  |  |  |  |  |              |  |                 |   pea 19be2 <PutChar+0xc42>
    5c40:	|  |  |  |  |  |  |  |              |  |                 |   jsr 184fe <KPrintF>
    5c46:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5c48:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5c4a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 65d8 <continueFunction+0xed6>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5c4e:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5c50:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5c54:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5c56:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5c5a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5c5e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5c60:	|  |  |  |  |  |  |  |              |  |                     jsr 15a1e <getValueType>
    5c66:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5c6a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5c6c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c74 <continueFunction+0x572>
    5c6e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5c70:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 65d8 <continueFunction+0xed6>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c74:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 84(sp),a0
    5c78:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c7c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5c7e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5c80:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5c82:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5ca4 <continueFunction+0x5a2>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5c84:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5c88:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5c8a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 84(sp),a0
    5c8e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5c92:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5c96:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5c98:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c9a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 156a8 <fastArrayGetByIndex>
    5ca0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5ca2:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5cc4 <continueFunction+0x5c2>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5ca4:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5ca8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5caa:	|  |  |  |  |  |  |  |              |  |              |      movea.l 84(sp),a0
    5cae:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5cb2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5cb6:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5cb8:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5cba:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5cbc:	|  |  |  |  |  |  |  |              |  |              |      jsr 16332 <stackGetByIndex>
    5cc2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5cc4:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,64(sp)

					trimStack (&fun -> stack);
    5cc8:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5cca:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5cce:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5cd0:	|  |  |  |  |  |  |  |              |  |                     jsr 163a2 <trimStack>
    5cd6:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5cd8:	|  |  |  |  |  |  |  |              |  |                     tst.l 64(sp)
    5cdc:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5cf8 <continueFunction+0x5f6>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5cde:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5ce0:	|  |  |  |  |  |  |  |              |  |                 |   add.l 84(sp),d0
    5ce4:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ce6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ce8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5cea:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16310 <setVariable>
    5cf0:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5cf4:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5dd2 <continueFunction+0x6d0>
						switch (com) {
    5cf8:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5cfa:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 68(sp),d0
    5cfe:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5d0c <continueFunction+0x60a>
    5d00:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5d02:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 68(sp),d1
    5d06:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5d56 <continueFunction+0x654>
    5d08:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5d9e <continueFunction+0x69c>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5d0c:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 64(sp),-(sp)
    5d10:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5d14:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5d18:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5d1a:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 15a1e <getValueType>
    5d20:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5d24:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5d26:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5d2e <continueFunction+0x62c>
    5d28:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5d2a:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5db8 <continueFunction+0x6b6>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d2e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5d30:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5d32:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 84(sp),d0
    5d36:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5d38:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5d3c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5d3e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 16310 <setVariable>
    5d44:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5d48:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5d4a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5d4c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 64(sp),a0
    5d50:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5d54:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5dbc <continueFunction+0x6ba>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5d56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 64(sp),-(sp)
    5d5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5d62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5d64:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15a1e <getValueType>
    5d6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5d6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5d70:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5d76 <continueFunction+0x674>
    5d72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5d74:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5db8 <continueFunction+0x6b6>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5d78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5d7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 84(sp),d0
    5d7e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5d80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5d86:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 16310 <setVariable>
    5d8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5d90:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5d92:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5d94:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 64(sp),a0
    5d98:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5d9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5dbc <continueFunction+0x6ba>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5d9e:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5da0:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 84(sp),d0
    5da4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5da6:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 68(sp),-(sp)
    5daa:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15ed8 <copyVariable>
    5db0:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5db2:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5db4:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5dd2 <continueFunction+0x6d0>
    5db6:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5db8:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 65d8 <continueFunction+0xed6>
				break;
    5dbc:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5dd2 <continueFunction+0x6d0>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5dbe:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 19c00 <PutChar+0xc60>
    5dc4:	|  |  |  |  |  |  |  |                 |  |                  jsr 184fe <KPrintF>
    5dca:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5dcc:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5dce:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 65d8 <continueFunction+0xed6>
				break;
    5dd2:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5dd4:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 65b6 <continueFunction+0xeb4>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5dd8:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5ddc:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5de0:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5de2:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5de4:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5de6:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5df4 <continueFunction+0x6f2>
    5de8:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5dea:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5dec:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5ea0 <continueFunction+0x79e>
    5df0:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5efe <continueFunction+0x7fc>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5df4:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5df8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5dfc:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5e00:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5e02:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e18 <continueFunction+0x716>
					KPrintF((ERROR_INDEX_EMPTY));
    5e04:	|  |  |  |  |  |  |  |                             |  |  |   pea 19be2 <PutChar+0xc42>
    5e0a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 184fe <KPrintF>
    5e10:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5e12:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e14:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65d8 <continueFunction+0xed6>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5e18:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5e1a:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e1e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e20:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5e24:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5e28:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5e2a:	|  |  |  |  |  |  |  |                             |  |      jsr 15a1e <getValueType>
    5e30:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5e34:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e36:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e3e <continueFunction+0x73c>
    5e38:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e3a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65d8 <continueFunction+0xed6>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5e3e:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5e42:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e46:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5e4a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5e4c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5e50:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5e52:	|  |  |  |  |  |  |  |                             |  |      movea.l 84(sp),a0
    5e56:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e5a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5e5e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5e60:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5e62:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5e64:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e66:	|  |  |  |  |  |  |  |                             |  |      jsr 7bc8 <stackSetByIndex>
    5e6c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5e70:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e72:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e7a <continueFunction+0x778>
						return FALSE;
    5e74:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e76:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65d8 <continueFunction+0xed6>
					}
					trimStack (&fun -> stack);
    5e7a:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5e7c:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e80:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e82:	|  |  |  |  |  |  |  |                             |  |      jsr 163a2 <trimStack>
    5e88:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5e8a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5e8c:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e90:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e92:	|  |  |  |  |  |  |  |                             |  |      jsr 163a2 <trimStack>
    5e98:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5e9a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5e9c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 65b6 <continueFunction+0xeb4>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5ea0:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5ea2:	|  |  |  |  |  |  |  |                             |         add.l 84(sp),d0
    5ea6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ea8:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5eac:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5eb0:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5eb2:	|  |  |  |  |  |  |  |                             |         jsr 15a1e <getValueType>
    5eb8:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5ebc:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5ebe:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5ec6 <continueFunction+0x7c4>
    5ec0:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5ec2:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 65d8 <continueFunction+0xed6>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5ec6:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5eca:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5ecc:	|  |  |  |  |  |  |  |                             |         movea.l 84(sp),a0
    5ed0:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5ed4:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5ed8:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5eda:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5edc:	|  |  |  |  |  |  |  |                             |         jsr 156a8 <fastArrayGetByIndex>
    5ee2:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5ee4:	|  |  |  |  |  |  |  |                             |         move.l d0,60(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5ee8:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5ef8 <continueFunction+0x7f6>
    5eea:	|  |  |  |  |  |  |  |                             |     |   pea 19c24 <PutChar+0xc84>
    5ef0:	|  |  |  |  |  |  |  |                             |     |   jsr 184fe <KPrintF>
    5ef6:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5ef8:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5efa:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 65d8 <continueFunction+0xed6>
				KPrintF((ERROR_INDEX_NONSTACK));
    5efe:	|  |  |  |  |  |  |  |                             '-------> pea 19c00 <PutChar+0xc60>
    5f04:	|  |  |  |  |  |  |  |                                       jsr 184fe <KPrintF>
    5f0a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5f0c:	|  |  |  |  |  |  |  |                                       clr.w d0
    5f0e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 65d8 <continueFunction+0xed6>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f12:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f16:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f1a:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f1e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f20:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f22:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f24:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f28:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5f2c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f2e:	|  |  |  |  |  |  |  |                                       jsr 15a1e <getValueType>
    5f34:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f38:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f3a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f42 <continueFunction+0x840>
    5f3c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f3e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65d8 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f42:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5f46:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f48:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5f4c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f4e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f52:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f54:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    5f5a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5f5e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5f62:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5f64:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5f66:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f6a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5f6e:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f72:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f74:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f76:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f78:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f7c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f7e:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    5f84:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f88:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5f8c:	|  |  |  |  |  |  |  |                                       move.l 1e822 <globalVars>,d1
    5f92:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f96:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f98:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f9a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f9c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fa0:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5fa4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5fa6:	|  |  |  |  |  |  |  |                                       jsr 15a1e <getValueType>
    5fac:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5fb0:	|  |  |  |  |  |  |  |                                       tst.w d0
    5fb2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5fba <continueFunction+0x8b8>
    5fb4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5fb6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65d8 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    5fba:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5fbe:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5fc0:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5fc4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fc6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fca:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fcc:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    5fd2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5fd6:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5fda:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fdc:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5fde:	|  |  |  |  |  |  |  |                                       movea.l 1e822 <globalVars>,a0
    5fe4:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5fe8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5fea:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5fec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ff2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ff4:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    5ffa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5ffe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    6002:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    6006:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    600a:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    600e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6010:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    6012:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6014:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6018:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    601c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    601e:	|  |  |  |  |  |  |  |                                       jsr 15a1e <getValueType>
    6024:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    6028:	|  |  |  |  |  |  |  |                                       tst.w d0
    602a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 6032 <continueFunction+0x930>
    602c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    602e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65d8 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    6032:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    6036:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6038:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    603c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    603e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6042:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6044:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    604a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    604e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    6052:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    6054:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    6056:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    605a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    605e:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6062:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6064:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    6066:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6068:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    606c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    606e:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    6074:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    6078:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    607c:	|  |  |  |  |  |  |  |                                       move.l 1e822 <globalVars>,d1
    6082:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6086:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6088:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    608a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    608c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6090:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    6094:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    6096:	|  |  |  |  |  |  |  |                                       jsr 15a1e <getValueType>
    609c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    60a0:	|  |  |  |  |  |  |  |                                       tst.w d0
    60a2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 60aa <continueFunction+0x9a8>
    60a4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    60a6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65d8 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    60aa:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    60ae:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    60b0:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    60b4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    60b6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60ba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60bc:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    60c2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    60c6:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    60ca:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    60cc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    60ce:	|  |  |  |  |  |  |  |                                       movea.l 1e822 <globalVars>,a0
    60d4:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    60d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    60da:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    60dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    60de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60e4:	|  |  |  |  |  |  |  |                                       jsr 16310 <setVariable>
    60ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    60ee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    60f2:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    60f6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    60fa:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    60fe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6100:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    6102:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6104:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6108:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    610a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    610c:	|  |  |  |  |  |  |  |                                       jsr 15ed8 <copyVariable>
    6112:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    6114:	|  |  |  |  |  |  |  |                                       tst.w d0
    6116:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 65a0 <continueFunction+0xe9e>
    611a:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    611c:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    6120:	|  |  |  |  |  |  |  |  |                                    move.l 1e822 <globalVars>,d1
    6126:	|  |  |  |  |  |  |  |  |                                    move.l 72(sp),d0
    612a:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    612c:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    612e:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    6130:	|  |  |  |  |  |  |  |  |                                    add.l 84(sp),d0
    6134:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    6136:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    6138:	|  |  |  |  |  |  |  |  |                                    jsr 15ed8 <copyVariable>
    613e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    6140:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    6142:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 65a4 <continueFunction+0xea2>
    6146:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    6148:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    614c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    614e:	|  |  |  |  |  |  |  |  |  |                                 add.l 84(sp),d0
    6152:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1e822 <globalVars>,a0
    6158:	|  |  |  |  |  |  |  |  |  |                                 move.l 72(sp),d1
    615c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    615e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    6160:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    6162:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    6164:	|  |  |  |  |  |  |  |  |  |                                 jsr 15ed8 <copyVariable>
    616a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    616c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    616e:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 65a8 <continueFunction+0xea6>
    6172:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    6174:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    6178:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    617a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d1
    617e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    6180:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d0
    6184:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    6186:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    6188:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1525a <addVarToStack>
    618e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    6190:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    6192:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 65ac <continueFunction+0xeaa>
    6196:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    6198:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    619c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    619e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d1
    61a2:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    61a4:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d0
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    61aa:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 152e0 <addVarToStackQuick>
    61b2:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    61b4:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    61b6:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 65b0 <continueFunction+0xeae>
    61ba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    61bc:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 65d8 <continueFunction+0xed6>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    61c0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    61c2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    61c6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15f5e <getBoolean>
    61ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    61d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    61d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    61d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    61e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    61e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    61e6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    61e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 16310 <setVariable>
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    61f2:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    61f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    61f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    61fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    61fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15f5e <getBoolean>
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6208:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 65b4 <continueFunction+0xeb2>
				advanceNow = FALSE;
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
				fun -> runThisLine = param;
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			}
			break;
    621a:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 65b4 <continueFunction+0xeb2>

			case SLU_BRANCH:
			advanceNow = FALSE;
    621e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
			fun -> runThisLine = param;
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			break;
    622c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 65b6 <continueFunction+0xeb4>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    6232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    6242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15a1e <getValueType>
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    624c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    624e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 6256 <continueFunction+0xb54>
    6250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    6252:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 65d8 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, -i);
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    6260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    626c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 16310 <setVariable>
    6272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6276:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 65b6 <continueFunction+0xeb4>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    627a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    627e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 656c <continueFunction+0xe6a>
				int firstValue, secondValue;

				switch (com) {
    6286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 68(sp),d0
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6308 <continueFunction+0xc06>
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 68(sp),d1
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 6352 <continueFunction+0xc50>
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    629a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 68(sp),d0
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 62ac <continueFunction+0xbaa>
    62a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 68(sp),d1
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 62da <continueFunction+0xbd8>
    62a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 6352 <continueFunction+0xc50>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    62ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 84(sp),a0
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    62bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15354 <addVariablesInSecond>
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    62c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    62c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 163a2 <trimStack>
    62d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    62d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 6580 <continueFunction+0xe7e>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    62da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 84(sp),a0
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15412 <compareVariablesInSecond>
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    62f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    62fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 163a2 <trimStack>
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    6304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 6580 <continueFunction+0xe7e>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    6312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15412 <compareVariablesInSecond>
    6320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    6322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 163a2 <trimStack>
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    6332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    633a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    633e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    6340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    6346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    634a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    634e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 6580 <continueFunction+0xe7e>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    6352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 84(sp),a0
    6356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    635a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    635c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    6364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a1e <getValueType>
    636c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 637a <continueFunction+0xc78>
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6376:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 65d8 <continueFunction+0xed6>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    637a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    637c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    6380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    638a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    638c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a1e <getValueType>
    6392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 63a0 <continueFunction+0xc9e>
    639a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    639c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 65d8 <continueFunction+0xed6>
					trimStack (&fun -> stack);
    63a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    63a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    63a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    63a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 163a2 <trimStack>
    63ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    63b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    63b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 68(sp),d0
    63b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    63b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    63ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 657e <continueFunction+0xe7c>
    63be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    63c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25550,a0
    63c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (63ce <continueFunction+0xccc>,pc,d0.w)
    63ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    63d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    63d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    63de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    63f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    63fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    640a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18e8a <__mulsi3>
    6410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    641a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    641c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    6428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    642c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6580 <continueFunction+0xe7e>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    6430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    643a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    643c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    644e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6580 <continueFunction+0xe7e>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    6456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    645a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    645e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f36 <__modsi3>
    6468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    646a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    646c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    646e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    647a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6580 <continueFunction+0xe7e>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    648c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f08 <__divsi3>
    649a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    649c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    649e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    64b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6580 <continueFunction+0xe7e>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    64c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    64e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6580 <continueFunction+0xe7e>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    64e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    64f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    650e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6580 <continueFunction+0xe7e>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    6514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    651c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    651e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    6520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    652c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    652e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    653a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    653e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6580 <continueFunction+0xe7e>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    6540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    654a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    654c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    654e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    655a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    655e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16310 <setVariable>
    6566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    656a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6580 <continueFunction+0xe7e>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    656c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 19c45 <PutChar+0xca5>
    6572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 184fe <KPrintF>
    6578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    657a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    657c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 65d8 <continueFunction+0xed6>
						break;
    657e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    6580:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 65b6 <continueFunction+0xeb4>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    6582:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 19c5d <PutChar+0xcbd>
    6588:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 184fe <KPrintF>
    658e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    6590:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    6592:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 65d8 <continueFunction+0xed6>
			break;
    6594:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6596:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    6598:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    659a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    659c:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    659e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65a0:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    65a2:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65a4:	|  |  |     |              '--|--|--|--|-------------------> nop
    65a6:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65a8:	|  |  |     |                 '--|--|--|-------------------> nop
    65aa:	|  |  |     +--------------------|--|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65ac:	|  |  |     |                    '--|--|-------------------> nop
    65ae:	|  |  |     +-----------------------|--|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65b0:	|  |  |     |                       '--|-------------------> nop
    65b2:	|  |  |     +--------------------------|-------------------- bra.s 65b6 <continueFunction+0xeb4>
			break;
    65b4:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    65b6:	|  |  |     '----------------------------------------------> tst.w 76(sp)
    65ba:	+--|--|----------------------------------------------------- beq.s 65ce <continueFunction+0xecc>
    65bc:	|  |  |                                                      movea.l 84(sp),a0
    65c0:	|  |  |                                                      move.l 36(a0),d0
    65c4:	|  |  |                                                      addq.l #1,d0
    65c6:	|  |  |                                                      movea.l 84(sp),a0
    65ca:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    65ce:	'--|--|----------------------------------------------------> tst.w 78(sp)
    65d2:	   |  '----------------------------------------------------- bne.w 572a <continueFunction+0x28>

	}
	return TRUE;
    65d6:	   |                                                         moveq #1,d0
}
    65d8:	   '-------------------------------------------------------> lea 80(sp),sp
    65dc:	                                                             rts

000065de <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	//KPrintF("finishFunction started\n");

	pauseFunction (fun);
    65de:	move.l 4(sp),-(sp)
    65e2:	jsr 7936 <pauseFunction>
    65e8:	addq.l #4,sp

	unloadFunction (fun);
    65ea:	move.l 4(sp),-(sp)
    65ee:	jsr 7d76 <unloadFunction>
    65f4:	addq.l #4,sp
	//KPrintF("finishFunction finished\n");
}
    65f6:	nop
    65f8:	rts

000065fa <freezeSubs>:

void freezeSubs () {
    65fa:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    65fc:	          move.l 1e80c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6602:	   ,----- bra.s 6620 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6604:	,--|----> movea.l (sp),a0
    6606:	|  |      move.w 52(a0),d0
    660a:	|  |  ,-- bne.s 661a <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    660c:	|  |  |   movea.l (sp),a0
    660e:	|  |  |   move.b 56(a0),d0
    6612:	|  |  |   addq.b #1,d0
    6614:	|  |  |   movea.l (sp),a0
    6616:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    661a:	|  |  '-> movea.l (sp),a0
    661c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6620:	|  '----> tst.l (sp)
    6622:	'-------- bne.s 6604 <freezeSubs+0xa>
	}
}
    6624:	          nop
    6626:	          nop
    6628:	          addq.l #4,sp
    662a:	          rts

0000662c <handleInput>:

BOOL handleInput () {
    662c:	             lea -20(sp),sp
    6630:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6632:	             move.l 1e98a <overRegion>,d0
    6638:	         ,-- bne.s 6640 <handleInput+0x14>
    663a:	         |   jsr 16c5a <getOverRegion>

	if (input.justMoved) {
    6640:	         '-> move.w 1e82a <input+0x4>,d0
    6646:	         ,-- beq.s 6684 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6648:	         |   movea.l 1e1da <currentEvents>,a0
    664e:	         |   move.l 16(a0),d0
    6652:	         +-- beq.s 6684 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6654:	         |   move.l 1e844 <noStack>,d1
    665a:	         |   movea.l 1e1da <currentEvents>,a0
    6660:	         |   move.l 16(a0),d0
    6664:	         |   pea 1 <_start+0x1>
    6668:	         |   move.l d1,-(sp)
    666a:	         |   clr.l -(sp)
    666c:	         |   clr.l -(sp)
    666e:	         |   move.l d0,-(sp)
    6670:	         |   jsr 7d2a <startNewFunctionNum>
    6676:	         |   lea 20(sp),sp
    667a:	         |   tst.l d0
    667c:	         +-- bne.s 6684 <handleInput+0x58>
    667e:	         |   clr.w d0
    6680:	,--------|-- bra.w 68aa <handleInput+0x27e>
		}
	}
	input.justMoved = FALSE;
    6684:	|        '-> clr.w 1e82a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    668a:	|            move.l 1e83c <lastRegion>,d1
    6690:	|            move.l 1e98a <overRegion>,d0
    6696:	|            cmp.l d1,d0
    6698:	|  ,-------- beq.w 6770 <handleInput+0x144>
    669c:	|  |         movea.l 1e1da <currentEvents>,a0
    66a2:	|  |         move.l 20(a0),d0
    66a6:	|  +-------- beq.w 6770 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    66aa:	|  |         moveq #12,d0
    66ac:	|  |         move.l d0,20(sp)
    66b0:	|  |         clr.l 16(sp)
    66b4:	|  |         move.l 1e876 <SysBase>,d0
    66ba:	|  |         movea.l d0,a6
    66bc:	|  |         move.l 20(sp),d0
    66c0:	|  |         move.l 16(sp),d1
    66c4:	|  |         jsr -684(a6)
    66c8:	|  |         move.l d0,12(sp)
    66cc:	|  |         move.l 12(sp),d0
    66d0:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    66d4:	|  |         move.l 4(sp),d0
    66d8:	|  |     ,-- bne.s 66ee <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    66da:	|  |     |   pea 19c89 <PutChar+0xce9>
    66e0:	|  |     |   jsr 184fe <KPrintF>
    66e6:	|  |     |   addq.l #4,sp
			return FALSE;
    66e8:	|  |     |   clr.w d0
    66ea:	+--|-----|-- bra.w 68aa <handleInput+0x27e>
		}
		
		initVarNew (tempStack -> thisVar);
    66ee:	|  |     '-> movea.l 4(sp),a0
    66f2:	|  |         clr.l (a0)
		if (overRegion) {
    66f4:	|  |         move.l 1e98a <overRegion>,d0
    66fa:	|  |  ,----- beq.s 6722 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    66fc:	|  |  |      movea.l 1e98a <overRegion>,a0
    6702:	|  |  |      movea.l 28(a0),a0
    6706:	|  |  |      move.l 4(a0),d1
    670a:	|  |  |      move.l 4(sp),d0
    670e:	|  |  |      move.l d1,-(sp)
    6710:	|  |  |      pea 7 <_start+0x7>
    6714:	|  |  |      move.l d0,-(sp)
    6716:	|  |  |      jsr 16310 <setVariable>
    671c:	|  |  |      lea 12(sp),sp
    6720:	|  |  |  ,-- bra.s 6738 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6722:	|  |  '--|-> move.l 4(sp),d0
    6726:	|  |     |   clr.l -(sp)
    6728:	|  |     |   pea 1 <_start+0x1>
    672c:	|  |     |   move.l d0,-(sp)
    672e:	|  |     |   jsr 16310 <setVariable>
    6734:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    6738:	|  |     '-> movea.l 4(sp),a0
    673c:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;		
    6740:	|  |         movea.l 1e1da <currentEvents>,a0
    6746:	|  |         move.l 20(a0),d0
    674a:	|  |         pea 1 <_start+0x1>
    674e:	|  |         lea 8(sp),a0
    6752:	|  |         move.l a0,-(sp)
    6754:	|  |         clr.l -(sp)
    6756:	|  |         pea 1 <_start+0x1>
    675a:	|  |         move.l d0,-(sp)
    675c:	|  |         jsr 7d2a <startNewFunctionNum>
    6762:	|  |         lea 20(sp),sp
    6766:	|  |         tst.l d0
    6768:	|  +-------- bne.s 6770 <handleInput+0x144>
    676a:	|  |         clr.w d0
    676c:	+--|-------- bra.w 68aa <handleInput+0x27e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6770:	|  '-------> move.w 1e82c <input+0x6>,d0
    6776:	|        ,-- beq.s 67b4 <handleInput+0x188>
    6778:	|        |   movea.l 1e1da <currentEvents>,a0
    677e:	|        |   move.l 4(a0),d0
    6782:	|        +-- beq.s 67b4 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6784:	|        |   move.l 1e844 <noStack>,d1
    678a:	|        |   movea.l 1e1da <currentEvents>,a0
    6790:	|        |   move.l 4(a0),d0
    6794:	|        |   pea 1 <_start+0x1>
    6798:	|        |   move.l d1,-(sp)
    679a:	|        |   clr.l -(sp)
    679c:	|        |   clr.l -(sp)
    679e:	|        |   move.l d0,-(sp)
    67a0:	|        |   jsr 7d2a <startNewFunctionNum>
    67a6:	|        |   lea 20(sp),sp
    67aa:	|        |   tst.l d0
    67ac:	|        +-- bne.s 67b4 <handleInput+0x188>
    67ae:	|        |   clr.w d0
    67b0:	+--------|-- bra.w 68aa <handleInput+0x27e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    67b4:	|        '-> move.w 1e82e <input+0x8>,d0
    67ba:	|        ,-- beq.s 67f8 <handleInput+0x1cc>
    67bc:	|        |   movea.l 1e1da <currentEvents>,a0
    67c2:	|        |   move.l 12(a0),d0
    67c6:	|        +-- beq.s 67f8 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67c8:	|        |   move.l 1e844 <noStack>,d1
    67ce:	|        |   movea.l 1e1da <currentEvents>,a0
    67d4:	|        |   move.l 12(a0),d0
    67d8:	|        |   pea 1 <_start+0x1>
    67dc:	|        |   move.l d1,-(sp)
    67de:	|        |   clr.l -(sp)
    67e0:	|        |   clr.l -(sp)
    67e2:	|        |   move.l d0,-(sp)
    67e4:	|        |   jsr 7d2a <startNewFunctionNum>
    67ea:	|        |   lea 20(sp),sp
    67ee:	|        |   tst.l d0
    67f0:	|        +-- bne.s 67f8 <handleInput+0x1cc>
    67f2:	|        |   clr.w d0
    67f4:	+--------|-- bra.w 68aa <handleInput+0x27e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction) {
    67f8:	|        '-> move.w 1e826 <input>,d0
    67fe:	|        ,-- beq.s 6856 <handleInput+0x22a>
    6800:	|        |   movea.l 1e1da <currentEvents>,a0
    6806:	|        |   move.l (a0),d0
    6808:	|        +-- beq.s 6856 <handleInput+0x22a>
		int test[1];
		test[0] = currentEvents -> leftMouseFunction;
    680a:	|        |   movea.l 1e1da <currentEvents>,a0
    6810:	|        |   move.l (a0),d0
    6812:	|        |   move.l d0,8(sp)
		KPrintF("handleinput: Onleftmousefunction: %ld will be run\n", test[0]);
    6816:	|        |   move.l 8(sp),d0
    681a:	|        |   move.l d0,-(sp)
    681c:	|        |   pea 19cbf <PutChar+0xd1f>
    6822:	|        |   jsr 184fe <KPrintF>
    6828:	|        |   addq.l #8,sp
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    682a:	|        |   move.l 1e844 <noStack>,d1
    6830:	|        |   movea.l 1e1da <currentEvents>,a0
    6836:	|        |   move.l (a0),d0
    6838:	|        |   pea 1 <_start+0x1>
    683c:	|        |   move.l d1,-(sp)
    683e:	|        |   clr.l -(sp)
    6840:	|        |   clr.l -(sp)
    6842:	|        |   move.l d0,-(sp)
    6844:	|        |   jsr 7d2a <startNewFunctionNum>
    684a:	|        |   lea 20(sp),sp
    684e:	|        |   tst.l d0
    6850:	|        +-- bne.s 6856 <handleInput+0x22a>
    6852:	|        |   clr.w d0
    6854:	+--------|-- bra.s 68aa <handleInput+0x27e>
	}		
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6856:	|        '-> move.w 1e828 <input+0x2>,d0
    685c:	|        ,-- beq.s 6898 <handleInput+0x26c>
    685e:	|        |   movea.l 1e1da <currentEvents>,a0
    6864:	|        |   move.l 8(a0),d0
    6868:	|        +-- beq.s 6898 <handleInput+0x26c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    686a:	|        |   move.l 1e844 <noStack>,d1
    6870:	|        |   movea.l 1e1da <currentEvents>,a0
    6876:	|        |   move.l 8(a0),d0
    687a:	|        |   pea 1 <_start+0x1>
    687e:	|        |   move.l d1,-(sp)
    6880:	|        |   clr.l -(sp)
    6882:	|        |   clr.l -(sp)
    6884:	|        |   move.l d0,-(sp)
    6886:	|        |   jsr 7d2a <startNewFunctionNum>
    688c:	|        |   lea 20(sp),sp
    6890:	|        |   tst.l d0
    6892:	|        +-- bne.s 6898 <handleInput+0x26c>
    6894:	|        |   clr.w d0
    6896:	+--------|-- bra.s 68aa <handleInput+0x27e>
	}

	lastRegion = overRegion;
    6898:	|        '-> move.l 1e98a <overRegion>,d0
    689e:	|            move.l d0,1e83c <lastRegion>
	return runSludge ();
    68a4:	|            jsr 79e0 <runSludge>
}
    68aa:	'----------> movea.l (sp)+,a6
    68ac:	             lea 20(sp),sp
    68b0:	             rts

000068b2 <initSludge>:

BOOL initSludge (char * filename) {
    68b2:	             lea -292(sp),sp
    68b6:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    68ba:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    68be:	             jsr b72e <makeNullAnim>
    68c4:	             move.l d0,1e76c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    68ca:	             pea 1e81e <gameVersion>
    68d0:	             pea 19cf2 <PutChar+0xd52>
    68d6:	             pea 45 <_start+0x45>
    68da:	             pea 47 <_start+0x47>
    68de:	             move.l 332(sp),-(sp)
    68e2:	             jsr 75c6 <openAndVerify>
    68e8:	             lea 20(sp),sp
    68ec:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    68f0:	         ,-- bne.s 68f8 <initSludge+0x46>
    68f2:	         |   clr.w d0
    68f4:	,--------|-- bra.w 7020 <initSludge+0x76e>
	if (FGetC (fp)) {
    68f8:	|        '-> move.l 288(sp),284(sp)
    68fe:	|            move.l 1e87e <DOSBase>,d0
    6904:	|            movea.l d0,a6
    6906:	|            move.l 284(sp),d1
    690a:	|            jsr -306(a6)
    690e:	|            move.l d0,280(sp)
    6912:	|            move.l 280(sp),d0
    6916:	|  ,-------- beq.w 6ac0 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    691a:	|  |         move.l 288(sp),-(sp)
    691e:	|  |         jsr 6bc <get2bytes>
    6924:	|  |         addq.l #4,sp
    6926:	|  |         move.l d0,1e848 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    692c:	|  |         move.l 1e848 <numBIFNames>,d0
    6932:	|  |         move.l d0,276(sp)
    6936:	|  |         clr.l 272(sp)
    693a:	|  |         move.l 1e876 <SysBase>,d0
    6940:	|  |         movea.l d0,a6
    6942:	|  |         move.l 276(sp),d0
    6946:	|  |         move.l 272(sp),d1
    694a:	|  |         jsr -684(a6)
    694e:	|  |         move.l d0,268(sp)
    6952:	|  |         move.l 268(sp),d0
    6956:	|  |         move.l d0,1e7f8 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    695c:	|  |         move.l 1e7f8 <allBIFNames>,d0
    6962:	|  |     ,-- bne.s 696a <initSludge+0xb8>
    6964:	|  |     |   clr.w d0
    6966:	+--|-----|-- bra.w 7020 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    696a:	|  |     '-> clr.l 304(sp)
    696e:	|  |     ,-- bra.s 6994 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6970:	|  |  ,--|-> move.l 1e7f8 <allBIFNames>,d1
    6976:	|  |  |  |   move.l 304(sp),d0
    697a:	|  |  |  |   add.l d0,d0
    697c:	|  |  |  |   add.l d0,d0
    697e:	|  |  |  |   movea.l d1,a2
    6980:	|  |  |  |   adda.l d0,a2
    6982:	|  |  |  |   move.l 288(sp),-(sp)
    6986:	|  |  |  |   jsr b02 <readString>
    698c:	|  |  |  |   addq.l #4,sp
    698e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6990:	|  |  |  |   addq.l #1,304(sp)
    6994:	|  |  |  '-> move.l 1e848 <numBIFNames>,d0
    699a:	|  |  |      cmp.l 304(sp),d0
    699e:	|  |  '----- bgt.s 6970 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    69a0:	|  |         move.l 288(sp),-(sp)
    69a4:	|  |         jsr 6bc <get2bytes>
    69aa:	|  |         addq.l #4,sp
    69ac:	|  |         move.l d0,1e854 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    69b2:	|  |         move.l 1e854 <numUserFunc>,d0
    69b8:	|  |         move.l d0,264(sp)
    69bc:	|  |         clr.l 260(sp)
    69c0:	|  |         move.l 1e876 <SysBase>,d0
    69c6:	|  |         movea.l d0,a6
    69c8:	|  |         move.l 264(sp),d0
    69cc:	|  |         move.l 260(sp),d1
    69d0:	|  |         jsr -684(a6)
    69d4:	|  |         move.l d0,256(sp)
    69d8:	|  |         move.l 256(sp),d0
    69dc:	|  |         move.l d0,1e810 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    69e2:	|  |         move.l 1e810 <allUserFunc>,d0
    69e8:	|  |     ,-- bne.s 69f0 <initSludge+0x13e>
    69ea:	|  |     |   clr.w d0
    69ec:	+--|-----|-- bra.w 7020 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    69f0:	|  |     '-> clr.l 300(sp)
    69f4:	|  |     ,-- bra.s 6a1a <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    69f6:	|  |  ,--|-> move.l 1e810 <allUserFunc>,d1
    69fc:	|  |  |  |   move.l 300(sp),d0
    6a00:	|  |  |  |   add.l d0,d0
    6a02:	|  |  |  |   add.l d0,d0
    6a04:	|  |  |  |   movea.l d1,a2
    6a06:	|  |  |  |   adda.l d0,a2
    6a08:	|  |  |  |   move.l 288(sp),-(sp)
    6a0c:	|  |  |  |   jsr b02 <readString>
    6a12:	|  |  |  |   addq.l #4,sp
    6a14:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6a16:	|  |  |  |   addq.l #1,300(sp)
    6a1a:	|  |  |  '-> move.l 1e854 <numUserFunc>,d0
    6a20:	|  |  |      cmp.l 300(sp),d0
    6a24:	|  |  '----- bgt.s 69f6 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6a26:	|  |         move.l 1e81e <gameVersion>,d0
    6a2c:	|  |         cmpi.l #258,d0
    6a32:	|  +-------- ble.w 6ac0 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6a36:	|  |         move.l 288(sp),-(sp)
    6a3a:	|  |         jsr 6bc <get2bytes>
    6a40:	|  |         addq.l #4,sp
    6a42:	|  |         move.l d0,1e850 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6a48:	|  |         move.l 1e850 <numResourceNames>,d0
    6a4e:	|  |         add.l d0,d0
    6a50:	|  |         add.l d0,d0
    6a52:	|  |         move.l d0,252(sp)
    6a56:	|  |         clr.l 248(sp)
    6a5a:	|  |         move.l 1e876 <SysBase>,d0
    6a60:	|  |         movea.l d0,a6
    6a62:	|  |         move.l 252(sp),d0
    6a66:	|  |         move.l 248(sp),d1
    6a6a:	|  |         jsr -684(a6)
    6a6e:	|  |         move.l d0,244(sp)
    6a72:	|  |         move.l 244(sp),d0
    6a76:	|  |         move.l d0,1e808 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6a7c:	|  |         move.l 1e808 <allResourceNames>,d0
    6a82:	|  |     ,-- bne.s 6a8a <initSludge+0x1d8>
    6a84:	|  |     |   clr.w d0
    6a86:	+--|-----|-- bra.w 7020 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a8a:	|  |     '-> clr.l 296(sp)
    6a8e:	|  |     ,-- bra.s 6ab4 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6a90:	|  |  ,--|-> move.l 1e808 <allResourceNames>,d1
    6a96:	|  |  |  |   move.l 296(sp),d0
    6a9a:	|  |  |  |   add.l d0,d0
    6a9c:	|  |  |  |   add.l d0,d0
    6a9e:	|  |  |  |   movea.l d1,a2
    6aa0:	|  |  |  |   adda.l d0,a2
    6aa2:	|  |  |  |   move.l 288(sp),-(sp)
    6aa6:	|  |  |  |   jsr b02 <readString>
    6aac:	|  |  |  |   addq.l #4,sp
    6aae:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6ab0:	|  |  |  |   addq.l #1,296(sp)
    6ab4:	|  |  |  '-> move.l 1e850 <numResourceNames>,d0
    6aba:	|  |  |      cmp.l 296(sp),d0
    6abe:	|  |  '----- bgt.s 6a90 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6ac0:	|  '-------> move.l #129,1e830 <input+0xa>
	input.mouseY = 100;
    6aca:	|            moveq #100,d0
    6acc:	|            move.l d0,1e834 <input+0xe>
	winWidth = get2bytes (fp);
    6ad2:	|            move.l 288(sp),-(sp)
    6ad6:	|            jsr 6bc <get2bytes>
    6adc:	|            addq.l #4,sp
    6ade:	|            move.l d0,1e7bc <winWidth>
	winHeight = get2bytes (fp);
    6ae4:	|            move.l 288(sp),-(sp)
    6ae8:	|            jsr 6bc <get2bytes>
    6aee:	|            addq.l #4,sp
    6af0:	|            move.l d0,1e7c0 <winHeight>
	specialSettings = FGetC (fp);
    6af6:	|            move.l 288(sp),240(sp)
    6afc:	|            move.l 1e87e <DOSBase>,d0
    6b02:	|            movea.l d0,a6
    6b04:	|            move.l 240(sp),d1
    6b08:	|            jsr -306(a6)
    6b0c:	|            move.l d0,236(sp)
    6b10:	|            move.l 236(sp),d0
    6b14:	|            move.l d0,1e858 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6b1a:	|            move.l 288(sp),232(sp)
    6b20:	|            move.l 1e87e <DOSBase>,d0
    6b26:	|            movea.l d0,a6
    6b28:	|            move.l 232(sp),d1
    6b2c:	|            jsr -306(a6)
    6b30:	|            move.l d0,228(sp)
    6b34:	|            move.l 228(sp),d0
    6b38:	|            move.l d0,-(sp)
    6b3a:	|            pea 3e8 <encodeFilename+0xea>
    6b3e:	|            jsr 18f08 <__divsi3>
    6b44:	|            addq.l #8,sp
    6b46:	|            move.l d0,1e1ec <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6b4c:	|            move.l 288(sp),-(sp)
    6b50:	|            jsr b02 <readString>
    6b56:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6b58:	|            move.l 288(sp),224(sp)
    6b5e:	|            move.l #124950,220(sp)
    6b66:	|            moveq #8,d1
    6b68:	|            move.l d1,216(sp)
    6b6c:	|            moveq #1,d0
    6b6e:	|            move.l d0,212(sp)
    6b72:	|            move.l 1e87e <DOSBase>,d0
    6b78:	|            movea.l d0,a6
    6b7a:	|            move.l 224(sp),d1
    6b7e:	|            move.l 220(sp),d2
    6b82:	|            move.l 216(sp),d3
    6b86:	|            move.l 212(sp),d4
    6b8a:	|            jsr -324(a6)
    6b8e:	|            move.l d0,208(sp)
    6b92:	|            move.l 208(sp),d0
    6b96:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6b9a:	|            moveq #1,d1
    6b9c:	|            cmp.l 204(sp),d1
    6ba0:	|        ,-- beq.s 6bb0 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6ba2:	|        |   pea 19d2b <PutChar+0xd8b>
    6ba8:	|        |   jsr 184fe <KPrintF>
    6bae:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6bb0:	|        '-> move.l 1e81e <gameVersion>,d0
    6bb6:	|            cmpi.l #258,d0
    6bbc:	|        ,-- ble.s 6bcc <initSludge+0x31a>
    6bbe:	|        |   move.l 288(sp),-(sp)
    6bc2:	|        |   jsr b02 <readString>
    6bc8:	|        |   addq.l #4,sp
    6bca:	|     ,--|-- bra.s 6be0 <initSludge+0x32e>
    6bcc:	|     |  '-> pea 19d49 <PutChar+0xda9>
    6bd2:	|     |      pea 19d49 <PutChar+0xda9>
    6bd8:	|     |      jsr 14f4a <joinStrings>
    6bde:	|     |      addq.l #8,sp
    6be0:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6be4:	|            move.l 1e81e <gameVersion>,d0
    6bea:	|            cmpi.l #258,d0
    6bf0:	|     ,----- ble.s 6c12 <initSludge+0x360>
    6bf2:	|     |      move.l 288(sp),196(sp)
    6bf8:	|     |      move.l 1e87e <DOSBase>,d0
    6bfe:	|     |      movea.l d0,a6
    6c00:	|     |      move.l 196(sp),d1
    6c04:	|     |      jsr -306(a6)
    6c08:	|     |      move.l d0,192(sp)
    6c0c:	|     |      move.l 192(sp),d0
    6c10:	|     |  ,-- bra.s 6c14 <initSludge+0x362>
    6c12:	|     '--|-> moveq #0,d0
    6c14:	|        '-> move.l d0,1e956 <gameSettings+0x4>
	makeLanguageTable (fp);
    6c1a:	|            move.l 288(sp),-(sp)
    6c1e:	|            jsr 148ea <makeLanguageTable>
    6c24:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6c26:	|            move.l 1e81e <gameVersion>,d0
    6c2c:	|            cmpi.l #261,d0
    6c32:	|        ,-- ble.s 6c80 <initSludge+0x3ce>
	{
		FGetC(fp);
    6c34:	|        |   move.l 288(sp),188(sp)
    6c3a:	|        |   move.l 1e87e <DOSBase>,d0
    6c40:	|        |   movea.l d0,a6
    6c42:	|        |   move.l 188(sp),d1
    6c46:	|        |   jsr -306(a6)
    6c4a:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6c4e:	|        |   move.l 288(sp),180(sp)
    6c54:	|        |   move.l 1e87e <DOSBase>,d0
    6c5a:	|        |   movea.l d0,a6
    6c5c:	|        |   move.l 180(sp),d1
    6c60:	|        |   jsr -306(a6)
    6c64:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6c68:	|        |   move.l 288(sp),-(sp)
    6c6c:	|        |   jsr 7d8 <getFloat>
    6c72:	|        |   addq.l #4,sp
		getFloat (fp);
    6c74:	|        |   move.l 288(sp),-(sp)
    6c78:	|        |   jsr 7d8 <getFloat>
    6c7e:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6c80:	|        '-> move.l 288(sp),-(sp)
    6c84:	|            jsr b02 <readString>
    6c8a:	|            addq.l #4,sp
    6c8c:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6c90:	|            pea 19d4a <PutChar+0xdaa>
    6c96:	|            move.l 176(sp),-(sp)
    6c9a:	|            jsr 14eca <strcmp>
    6ca0:	|            addq.l #8,sp
    6ca2:	|            tst.l d0
    6ca4:	|        ,-- beq.s 6cac <initSludge+0x3fa>
		return FALSE;
    6ca6:	|        |   clr.w d0
    6ca8:	+--------|-- bra.w 7020 <initSludge+0x76e>
	}
	FreeVec( checker);
    6cac:	|        '-> move.l 172(sp),168(sp)
    6cb2:	|            move.l 1e876 <SysBase>,d0
    6cb8:	|            movea.l d0,a6
    6cba:	|            movea.l 168(sp),a1
    6cbe:	|            jsr -690(a6)
	checker = NULL;
    6cc2:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6cc6:	|            move.l 288(sp),164(sp)
    6ccc:	|            move.l 1e87e <DOSBase>,d0
    6cd2:	|            movea.l d0,a6
    6cd4:	|            move.l 164(sp),d1
    6cd8:	|            jsr -306(a6)
    6cdc:	|            move.l d0,160(sp)
    6ce0:	|            move.l 160(sp),d0
    6ce4:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6ce8:	|            moveq #0,d0
    6cea:	|            move.b 159(sp),d0
    6cee:	|            moveq #1,d1
    6cf0:	|            and.l d1,d0
    6cf2:	|        ,-- beq.s 6d4a <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6cf4:	|        |   move.l 1e87e <DOSBase>,d0
    6cfa:	|        |   movea.l d0,a6
    6cfc:	|        |   jsr -60(a6)
    6d00:	|        |   move.l d0,38(sp)
    6d04:	|        |   move.l 38(sp),d0
    6d08:	|        |   move.l d0,34(sp)
    6d0c:	|        |   move.l #105810,30(sp)
    6d14:	|        |   moveq #54,d0
    6d16:	|        |   move.l d0,26(sp)
    6d1a:	|        |   move.l 1e87e <DOSBase>,d0
    6d20:	|        |   movea.l d0,a6
    6d22:	|        |   move.l 34(sp),d1
    6d26:	|        |   move.l 30(sp),d2
    6d2a:	|        |   move.l 26(sp),d3
    6d2e:	|        |   jsr -48(a6)
    6d32:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6d36:	|        |   pea 19d89 <PutChar+0xde9>
    6d3c:	|        |   jsr 184fe <KPrintF>
    6d42:	|        |   addq.l #4,sp
		return FALSE;
    6d44:	|        |   clr.w d0
    6d46:	+--------|-- bra.w 7020 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6d4a:	|        '-> move.l 288(sp),-(sp)
    6d4e:	|            jsr 6bc <get2bytes>
    6d54:	|            addq.l #4,sp
    6d56:	|            move.l d0,1e84c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6d5c:	|            move.l 1e84c <numGlobals>,d0
    6d62:	|            lsl.l #3,d0
    6d64:	|            move.l d0,154(sp)
    6d68:	|            clr.l 150(sp)
    6d6c:	|            move.l 1e876 <SysBase>,d0
    6d72:	|            movea.l d0,a6
    6d74:	|            move.l 154(sp),d0
    6d78:	|            move.l 150(sp),d1
    6d7c:	|            jsr -684(a6)
    6d80:	|            move.l d0,146(sp)
    6d84:	|            move.l 146(sp),d0
    6d88:	|            move.l d0,1e822 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6d8e:	|            move.l 1e822 <globalVars>,d0
    6d94:	|        ,-- bne.s 6db2 <initSludge+0x500>
    6d96:	|        |   move.l 1e84c <numGlobals>,d0
    6d9c:	|        +-- ble.s 6db2 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6d9e:	|        |   pea 19dc1 <PutChar+0xe21>
    6da4:	|        |   jsr 184fe <KPrintF>
    6daa:	|        |   addq.l #4,sp
		return FALSE;
    6dac:	|        |   clr.w d0
    6dae:	+--------|-- bra.w 7020 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6db2:	|        '-> clr.l 308(sp)
    6db6:	|        ,-- bra.s 6dce <initSludge+0x51c>
    6db8:	|     ,--|-> move.l 1e822 <globalVars>,d1
    6dbe:	|     |  |   move.l 308(sp),d0
    6dc2:	|     |  |   lsl.l #3,d0
    6dc4:	|     |  |   movea.l d1,a0
    6dc6:	|     |  |   adda.l d0,a0
    6dc8:	|     |  |   clr.l (a0)
    6dca:	|     |  |   addq.l #1,308(sp)
    6dce:	|     |  '-> move.l 1e84c <numGlobals>,d0
    6dd4:	|     |      cmp.l 308(sp),d0
    6dd8:	|     '----- bgt.s 6db8 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6dda:	|            move.l 1e956 <gameSettings+0x4>,d0
    6de0:	|            clr.l -(sp)
    6de2:	|            move.l d0,-(sp)
    6de4:	|            move.l 296(sp),-(sp)
    6de8:	|            jsr 818c <setFileIndices>
    6dee:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6df2:	|            pea 1 <_start+0x1>
    6df6:	|            jsr 7e46 <getNumberedString>
    6dfc:	|            addq.l #4,sp
    6dfe:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6e02:	|            move.l 142(sp),-(sp)
    6e06:	|            jsr 2fe <encodeFilename>
    6e0c:	|            addq.l #4,sp
    6e0e:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6e12:	|            move.l 142(sp),134(sp)
    6e18:	|            move.l 1e876 <SysBase>,d0
    6e1e:	|            movea.l d0,a6
    6e20:	|            movea.l 134(sp),a1
    6e24:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6e28:	|            move.l 138(sp),130(sp)
    6e2e:	|            move.l 1e87e <DOSBase>,d0
    6e34:	|            movea.l d0,a6
    6e36:	|            move.l 130(sp),d1
    6e3a:	|            jsr -120(a6)
    6e3e:	|            move.l d0,126(sp)
    6e42:	|            move.l 126(sp),d0
    6e46:	|            move.l d0,292(sp)
	if(lock == 0) {
    6e4a:	|        ,-- bne.s 6e78 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6e4c:	|        |   move.l 138(sp),122(sp)
    6e52:	|        |   moveq #-2,d1
    6e54:	|        |   move.l d1,118(sp)
    6e58:	|        |   move.l 1e87e <DOSBase>,d0
    6e5e:	|        |   movea.l d0,a6
    6e60:	|        |   move.l 122(sp),d1
    6e64:	|        |   move.l 118(sp),d2
    6e68:	|        |   jsr -84(a6)
    6e6c:	|        |   move.l d0,114(sp)
    6e70:	|        |   move.l 114(sp),d0
    6e74:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6e78:	|        '-> move.l 292(sp),110(sp)
    6e7e:	|            move.l 1e87e <DOSBase>,d0
    6e84:	|            movea.l d0,a6
    6e86:	|            move.l 110(sp),d1
    6e8a:	|            jsr -126(a6)
    6e8e:	|            move.l d0,106(sp)
    6e92:	|            move.l 106(sp),d0
    6e96:	|        ,-- bne.s 6ef2 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6e98:	|        |   move.l 138(sp),-(sp)
    6e9c:	|        |   pea 19df4 <PutChar+0xe54>
    6ea2:	|        |   jsr 184fe <KPrintF>
    6ea8:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6eaa:	|        |   move.l 1e87e <DOSBase>,d0
    6eb0:	|        |   movea.l d0,a6
    6eb2:	|        |   jsr -60(a6)
    6eb6:	|        |   move.l d0,58(sp)
    6eba:	|        |   move.l 58(sp),d0
    6ebe:	|        |   move.l d0,54(sp)
    6ec2:	|        |   move.l #106017,50(sp)
    6eca:	|        |   moveq #40,d0
    6ecc:	|        |   move.l d0,46(sp)
    6ed0:	|        |   move.l 1e87e <DOSBase>,d0
    6ed6:	|        |   movea.l d0,a6
    6ed8:	|        |   move.l 54(sp),d1
    6edc:	|        |   move.l 50(sp),d2
    6ee0:	|        |   move.l 46(sp),d3
    6ee4:	|        |   jsr -48(a6)
    6ee8:	|        |   move.l d0,42(sp)
		return FALSE;
    6eec:	|        |   clr.w d0
    6eee:	+--------|-- bra.w 7020 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6ef2:	|        '-> move.l 138(sp),102(sp)
    6ef8:	|            move.l 1e876 <SysBase>,d0
    6efe:	|            movea.l d0,a6
    6f00:	|            movea.l 102(sp),a1
    6f04:	|            jsr -690(a6)

	readIniFile (filename);
    6f08:	|            move.l 316(sp),-(sp)
    6f0c:	|            jsr 14a1e <readIniFile>
    6f12:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6f14:	|            jsr 147f0 <getLanguageForFileB>
    6f1a:	|            move.l d0,1e1de <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6f20:	|            move.l 1e1de <languageNum>,d0
    6f26:	|        ,-- bpl.s 6f36 <initSludge+0x684>
    6f28:	|        |   pea 19e4a <PutChar+0xeaa>
    6f2e:	|        |   jsr 184fe <KPrintF>
    6f34:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6f36:	|        '-> move.l 1e1de <languageNum>,d0
    6f3c:	|            move.l d0,d1
    6f3e:	|            move.l 1e956 <gameSettings+0x4>,d0
    6f44:	|            move.l d1,-(sp)
    6f46:	|            move.l d0,-(sp)
    6f48:	|            clr.l -(sp)
    6f4a:	|            jsr 818c <setFileIndices>
    6f50:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6f54:	|            movea.l 200(sp),a0
    6f58:	|            move.b (a0),d0
    6f5a:	|     ,----- beq.w 7004 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6f5e:	|     |      move.l 200(sp),-(sp)
    6f62:	|     |      jsr 2fe <encodeFilename>
    6f68:	|     |      addq.l #4,sp
    6f6a:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6f6e:	|     |      move.l 98(sp),94(sp)
    6f74:	|     |      move.l 1e87e <DOSBase>,d0
    6f7a:	|     |      movea.l d0,a6
    6f7c:	|     |      move.l 94(sp),d1
    6f80:	|     |      jsr -120(a6)
    6f84:	|     |      move.l d0,90(sp)
    6f88:	|     |      move.l 90(sp),d0
    6f8c:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6f90:	|     |  ,-- bne.s 6fbe <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6f92:	|     |  |   move.l 98(sp),86(sp)
    6f98:	|     |  |   moveq #-2,d1
    6f9a:	|     |  |   move.l d1,82(sp)
    6f9e:	|     |  |   move.l 1e87e <DOSBase>,d0
    6fa4:	|     |  |   movea.l d0,a6
    6fa6:	|     |  |   move.l 86(sp),d1
    6faa:	|     |  |   move.l 82(sp),d2
    6fae:	|     |  |   jsr -84(a6)
    6fb2:	|     |  |   move.l d0,78(sp)
    6fb6:	|     |  |   move.l 78(sp),d0
    6fba:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6fbe:	|     |  '-> move.l 292(sp),74(sp)
    6fc4:	|     |      move.l 1e87e <DOSBase>,d0
    6fca:	|     |      movea.l d0,a6
    6fcc:	|     |      move.l 74(sp),d1
    6fd0:	|     |      jsr -126(a6)
    6fd4:	|     |      move.l d0,70(sp)
    6fd8:	|     |      move.l 70(sp),d0
    6fdc:	|     |  ,-- bne.s 6fee <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6fde:	|     |  |   move.l 1e87e <DOSBase>,d0
    6fe4:	|     |  |   movea.l d0,a6
    6fe6:	|     |  |   jsr -60(a6)
    6fea:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6fee:	|     |  '-> move.l 98(sp),62(sp)
    6ff4:	|     |      move.l 1e876 <SysBase>,d0
    6ffa:	|     |      movea.l d0,a6
    6ffc:	|     |      movea.l 62(sp),a1
    7000:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    7004:	|     '----> movea.l 1e7c0 <winHeight>,a0
    700a:	|            lea -15(a0),a0
    700e:	|            move.l a0,d0
    7010:	|            move.l d0,-(sp)
    7012:	|            pea a <_start+0xa>
    7016:	|            jsr 8cb2 <positionStatus>
    701c:	|            addq.l #8,sp

	return TRUE;
    701e:	|            moveq #1,d0
}
    7020:	'----------> movem.l (sp)+,d2-d4/a2/a6
    7024:	             lea 292(sp),sp
    7028:	             rts

0000702a <killSpeechTimers>:

void killSpeechTimers () {
    702a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    702c:	          move.l 1e80c <allRunningFunctions>,(sp)

	while (thisFunction) {
    7032:	   ,----- bra.s 705e <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    7034:	,--|----> movea.l (sp),a0
    7036:	|  |      move.b 56(a0),d0
    703a:	|  |  ,-- bne.s 7058 <killSpeechTimers+0x2e>
    703c:	|  |  |   movea.l (sp),a0
    703e:	|  |  |   move.w 50(a0),d0
    7042:	|  |  +-- beq.s 7058 <killSpeechTimers+0x2e>
    7044:	|  |  |   movea.l (sp),a0
    7046:	|  |  |   move.l 12(a0),d0
    704a:	|  |  +-- beq.s 7058 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    704c:	|  |  |   movea.l (sp),a0
    704e:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    7052:	|  |  |   movea.l (sp),a0
    7054:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    7058:	|  |  '-> movea.l (sp),a0
    705a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    705e:	|  '----> tst.l (sp)
    7060:	'-------- bne.s 7034 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    7062:	          jsr 4496 <killAllSpeech>
}
    7068:	          nop
    706a:	          addq.l #4,sp
    706c:	          rts

0000706e <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    706e:	                         lea -104(sp),sp
    7072:	                         move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	struct loadedFunction * newFunc = NULL;
    7074:	                         clr.l 100(sp)
	int a;

#ifndef DISABLEFUNCTIONCACHE
	struct cachedFunction * current = allCachedFunctions;
    7078:	                         move.l 1e7fc <allCachedFunctions>,92(sp)
	while( current) {
    7080:	               ,-------- bra.s 70c8 <loadFunctionCode+0x5a>
		if (current->theFunction->originalNumber == originalNumber)
    7082:	            ,--|-------> movea.l 92(sp),a0
    7086:	            |  |         movea.l 4(a0),a0
    708a:	            |  |         move.l (a0),d0
    708c:	            |  |         cmp.l 112(sp),d0
    7090:	            |  |  ,----- bne.s 70be <loadFunctionCode+0x50>
		{
			if( current->theFunction->unloaded == 1)
    7092:	            |  |  |      movea.l 92(sp),a0
    7096:	            |  |  |      movea.l 4(a0),a0
    709a:	            |  |  |      move.l 58(a0),d0
    709e:	            |  |  |      moveq #1,d1
    70a0:	            |  |  |      cmp.l d0,d1
    70a2:	            |  |  +----- bne.s 70be <loadFunctionCode+0x50>
			{ 
				newFunc = current->theFunction;	
    70a4:	            |  |  |      movea.l 92(sp),a0
    70a8:	            |  |  |      move.l 4(a0),100(sp)
				KPrintF("loadFunctionCode: Found in Cache\n");
    70ae:	            |  |  |      pea 19e75 <PutChar+0xed5>
    70b4:	            |  |  |      jsr 184fe <KPrintF>
    70ba:	            |  |  |      addq.l #4,sp
				break;
    70bc:	            |  |  |  ,-- bra.s 70ce <loadFunctionCode+0x60>
			}									
		}
		current = current->next;
    70be:	            |  |  '--|-> movea.l 92(sp),a0
    70c2:	            |  |     |   move.l 8(a0),92(sp)
	while( current) {
    70c8:	            |  '-----|-> tst.l 92(sp)
    70cc:	            '--------|-- bne.s 7082 <loadFunctionCode+0x14>
	}			

	if( !newFunc)
    70ce:	                     '-> tst.l 100(sp)
    70d2:	               ,-------- bne.w 732a <loadFunctionCode+0x2bc>
	{		
		KPrintF("loadFunctionCode: Function not in cache. Loading new function\n");
    70d6:	               |         pea 19e97 <PutChar+0xef7>
    70dc:	               |         jsr 184fe <KPrintF>
    70e2:	               |         addq.l #4,sp
		numCachedFunctions++;
    70e4:	               |         move.l 1e804 <numCachedFunctions>,d0
    70ea:	               |         addq.l #1,d0
    70ec:	               |         move.l d0,1e804 <numCachedFunctions>
#endif		
		newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    70f2:	               |         moveq #62,d0
    70f4:	               |         move.l d0,84(sp)
    70f8:	               |         clr.l 80(sp)
    70fc:	               |         move.l 1e876 <SysBase>,d0
    7102:	               |         movea.l d0,a6
    7104:	               |         move.l 84(sp),d0
    7108:	               |         move.l 80(sp),d1
    710c:	               |         jsr -684(a6)
    7110:	               |         move.l d0,76(sp)
    7114:	               |         move.l 76(sp),d0
    7118:	               |         move.l d0,100(sp)
	
		if(!newFunc) {
    711c:	               |     ,-- bne.s 7132 <loadFunctionCode+0xc4>
			KPrintF("loadFunctionCode: Cannot allocate memory");
    711e:	               |     |   pea 19ed6 <PutChar+0xf36>
    7124:	               |     |   jsr 184fe <KPrintF>
    712a:	               |     |   addq.l #4,sp
			return 0;
    712c:	               |     |   moveq #0,d0
    712e:	,--------------|-----|-- bra.w 751e <loadFunctionCode+0x4b0>
		}

		newFunc -> originalNumber = originalNumber;
    7132:	|              |     '-> move.l 112(sp),d0
    7136:	|              |         movea.l 100(sp),a0
    713a:	|              |         move.l d0,(a0)

		if (! openSubSlice (originalNumber)) return FALSE;
    713c:	|              |         move.l 112(sp),d0
    7140:	|              |         move.l d0,-(sp)
    7142:	|              |         jsr 80cc <openSubSlice>
    7148:	|              |         addq.l #4,sp
    714a:	|              |         tst.w d0
    714c:	|              |     ,-- bne.s 7154 <loadFunctionCode+0xe6>
    714e:	|              |     |   moveq #0,d0
    7150:	+--------------|-----|-- bra.w 751e <loadFunctionCode+0x4b0>
		

		newFunc-> unfreezable	= FGetC (bigDataFile);
    7154:	|              |     '-> move.l 1e85c <bigDataFile>,72(sp)
    715c:	|              |         move.l 1e87e <DOSBase>,d0
    7162:	|              |         movea.l d0,a6
    7164:	|              |         move.l 72(sp),d1
    7168:	|              |         jsr -306(a6)
    716c:	|              |         move.l d0,68(sp)
    7170:	|              |         move.l 68(sp),d0
    7174:	|              |         move.l d0,d0
    7176:	|              |         movea.l 100(sp),a0
    717a:	|              |         move.w d0,52(a0)
		numLines				= get2bytes (bigDataFile);
    717e:	|              |         move.l 1e85c <bigDataFile>,d0
    7184:	|              |         move.l d0,-(sp)
    7186:	|              |         jsr 6bc <get2bytes>
    718c:	|              |         addq.l #4,sp
    718e:	|              |         move.l d0,64(sp)
		newFunc -> numArgs		= get2bytes (bigDataFile);
    7192:	|              |         move.l 1e85c <bigDataFile>,d0
    7198:	|              |         move.l d0,-(sp)
    719a:	|              |         jsr 6bc <get2bytes>
    71a0:	|              |         addq.l #4,sp
    71a2:	|              |         movea.l 100(sp),a0
    71a6:	|              |         move.l d0,16(a0)
		newFunc -> numLocals	= get2bytes (bigDataFile);	
    71aa:	|              |         move.l 1e85c <bigDataFile>,d0
    71b0:	|              |         move.l d0,-(sp)
    71b2:	|              |         jsr 6bc <get2bytes>
    71b8:	|              |         addq.l #4,sp
    71ba:	|              |         movea.l 100(sp),a0
    71be:	|              |         move.l d0,8(a0)

		newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    71c2:	|              |         move.l 64(sp),d0
    71c6:	|              |         lsl.l #3,d0
    71c8:	|              |         move.l d0,60(sp)
    71cc:	|              |         clr.l 56(sp)
    71d0:	|              |         move.l 1e876 <SysBase>,d0
    71d6:	|              |         movea.l d0,a6
    71d8:	|              |         move.l 60(sp),d0
    71dc:	|              |         move.l 56(sp),d1
    71e0:	|              |         jsr -684(a6)
    71e4:	|              |         move.l d0,52(sp)
    71e8:	|              |         move.l 52(sp),d0
    71ec:	|              |         movea.l 100(sp),a0
    71f0:	|              |         move.l d0,4(a0)
		if (! newFunc -> compiledLines) {
    71f4:	|              |         movea.l 100(sp),a0
    71f8:	|              |         move.l 4(a0),d0
    71fc:	|              |     ,-- bne.s 7212 <loadFunctionCode+0x1a4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    71fe:	|              |     |   pea 19eff <PutChar+0xf5f>
    7204:	|              |     |   jsr 184fe <KPrintF>
    720a:	|              |     |   addq.l #4,sp
			return FALSE;
    720c:	|              |     |   moveq #0,d0
    720e:	+--------------|-----|-- bra.w 751e <loadFunctionCode+0x4b0>
		}
		
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    7212:	|              |     '-> clr.l 104(sp)
    7216:	|              |     ,-- bra.s 7278 <loadFunctionCode+0x20a>
			newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    7218:	|              |  ,--|-> move.l 1e85c <bigDataFile>,32(sp)
    7220:	|              |  |  |   move.l 1e87e <DOSBase>,d0
    7226:	|              |  |  |   movea.l d0,a6
    7228:	|              |  |  |   move.l 32(sp),d1
    722c:	|              |  |  |   jsr -306(a6)
    7230:	|              |  |  |   move.l d0,28(sp)
    7234:	|              |  |  |   move.l 28(sp),d1
    7238:	|              |  |  |   movea.l 100(sp),a0
    723c:	|              |  |  |   movea.l 4(a0),a0
    7240:	|              |  |  |   move.l 104(sp),d0
    7244:	|              |  |  |   lsl.l #3,d0
    7246:	|              |  |  |   adda.l d0,a0
    7248:	|              |  |  |   move.l d1,d0
    724a:	|              |  |  |   move.l d0,(a0)
			newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    724c:	|              |  |  |   move.l 1e85c <bigDataFile>,d0
    7252:	|              |  |  |   move.l d0,-(sp)
    7254:	|              |  |  |   jsr 6bc <get2bytes>
    725a:	|              |  |  |   addq.l #4,sp
    725c:	|              |  |  |   move.l d0,d1
    725e:	|              |  |  |   movea.l 100(sp),a0
    7262:	|              |  |  |   movea.l 4(a0),a0
    7266:	|              |  |  |   move.l 104(sp),d0
    726a:	|              |  |  |   lsl.l #3,d0
    726c:	|              |  |  |   adda.l d0,a0
    726e:	|              |  |  |   move.l d1,d0
    7270:	|              |  |  |   move.l d0,4(a0)
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    7274:	|              |  |  |   addq.l #1,104(sp)
    7278:	|              |  |  '-> move.l 104(sp),d1
    727c:	|              |  |      cmp.l 64(sp),d1
    7280:	|              |  '----- bcs.s 7218 <loadFunctionCode+0x1aa>
		}
		finishAccess ();
    7282:	|              |         jsr 7e3c <finishAccess>

#ifndef DISABLEFUNCTIONCACHE		
		struct cachedFunction  *next = allCachedFunctions;
    7288:	|              |         move.l 1e7fc <allCachedFunctions>,48(sp)
		allCachedFunctions = AllocVec(sizeof(struct cachedFunction),MEMF_ANY);
    7290:	|              |         moveq #16,d0
    7292:	|              |         move.l d0,44(sp)
    7296:	|              |         clr.l 40(sp)
    729a:	|              |         move.l 1e876 <SysBase>,d0
    72a0:	|              |         movea.l d0,a6
    72a2:	|              |         move.l 44(sp),d0
    72a6:	|              |         move.l 40(sp),d1
    72aa:	|              |         jsr -684(a6)
    72ae:	|              |         move.l d0,36(sp)
    72b2:	|              |         move.l 36(sp),d0
    72b6:	|              |         move.l d0,1e7fc <allCachedFunctions>
		allCachedFunctions -> prev = NULL;
    72bc:	|              |         movea.l 1e7fc <allCachedFunctions>,a0
    72c2:	|              |         clr.l 12(a0)
		if (! allCachedFunctions) {
    72c6:	|              |         move.l 1e7fc <allCachedFunctions>,d0
    72cc:	|              |     ,-- bne.s 72e2 <loadFunctionCode+0x274>
			KPrintF("loadFunctionCode: cannot allocate memory for cached function");
    72ce:	|              |     |   pea 19f28 <PutChar+0xf88>
    72d4:	|              |     |   jsr 184fe <KPrintF>
    72da:	|              |     |   addq.l #4,sp
			return NULL;
    72dc:	|              |     |   moveq #0,d0
    72de:	+--------------|-----|-- bra.w 751e <loadFunctionCode+0x4b0>
		}
		if( !next) {
    72e2:	|              |     '-> tst.l 48(sp)
    72e6:	|              |     ,-- bne.s 72f4 <loadFunctionCode+0x286>
			lastCachedFunction = allCachedFunctions;
    72e8:	|              |     |   move.l 1e7fc <allCachedFunctions>,d0
    72ee:	|              |     |   move.l d0,1e800 <lastCachedFunction>
		} 	

		if(next) next->prev = allCachedFunctions;
    72f4:	|              |     '-> tst.l 48(sp)
    72f8:	|              |     ,-- beq.s 7308 <loadFunctionCode+0x29a>
    72fa:	|              |     |   move.l 1e7fc <allCachedFunctions>,d0
    7300:	|              |     |   movea.l 48(sp),a0
    7304:	|              |     |   move.l d0,12(a0)
		
		allCachedFunctions->next = next;
    7308:	|              |     '-> movea.l 1e7fc <allCachedFunctions>,a0
    730e:	|              |         move.l 48(sp),8(a0)
		allCachedFunctions->theFunction = newFunc;
    7314:	|              |         movea.l 1e7fc <allCachedFunctions>,a0
    731a:	|              |         move.l 100(sp),4(a0)
		allCachedFunctions->funcNum = originalNumber;
    7320:	|              |         movea.l 1e7fc <allCachedFunctions>,a0
    7326:	|              |         move.l 112(sp),(a0)

	}	

	newFunc -> unloaded = 0;	
    732a:	|              '-------> movea.l 100(sp),a0
    732e:	|                        clr.l 58(a0)
#endif
	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    7332:	|                        movea.l 100(sp),a0
    7336:	|                        move.l 8(a0),d0
    733a:	|              ,-------- ble.w 73c0 <loadFunctionCode+0x352>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    733e:	|              |         movea.l 100(sp),a0
    7342:	|              |         move.l 8(a0),d0
    7346:	|              |         lsl.l #3,d0
    7348:	|              |         move.l d0,24(sp)
    734c:	|              |         clr.l 20(sp)
    7350:	|              |         move.l 1e876 <SysBase>,d0
    7356:	|              |         movea.l d0,a6
    7358:	|              |         move.l 24(sp),d0
    735c:	|              |         move.l 20(sp),d1
    7360:	|              |         jsr -684(a6)
    7364:	|              |         move.l d0,16(sp)
    7368:	|              |         move.l 16(sp),d0
    736c:	|              |         movea.l 100(sp),a0
    7370:	|              |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    7374:	|              |         movea.l 100(sp),a0
    7378:	|              |         move.l 20(a0),d0
    737c:	|              |     ,-- bne.s 7392 <loadFunctionCode+0x324>
			KPrintF("loadFunctionCode: cannot allocate memory");
    737e:	|              |     |   pea 19eff <PutChar+0xf5f>
    7384:	|              |     |   jsr 184fe <KPrintF>
    738a:	|              |     |   addq.l #4,sp
			return FALSE;
    738c:	|              |     |   moveq #0,d0
    738e:	+--------------|-----|-- bra.w 751e <loadFunctionCode+0x4b0>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    7392:	|              |     '-> clr.l 96(sp)
    7396:	|              |     ,-- bra.s 73b0 <loadFunctionCode+0x342>
			initVarNew (newFunc -> localVars[a]);
    7398:	|              |  ,--|-> movea.l 100(sp),a0
    739c:	|              |  |  |   move.l 20(a0),d1
    73a0:	|              |  |  |   move.l 96(sp),d0
    73a4:	|              |  |  |   lsl.l #3,d0
    73a6:	|              |  |  |   movea.l d1,a0
    73a8:	|              |  |  |   adda.l d0,a0
    73aa:	|              |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    73ac:	|              |  |  |   addq.l #1,96(sp)
    73b0:	|              |  |  '-> movea.l 100(sp),a0
    73b4:	|              |  |      move.l 8(a0),d0
    73b8:	|              |  |      cmp.l 96(sp),d0
    73bc:	|              |  '----- bgt.s 7398 <loadFunctionCode+0x32a>
    73be:	|              |     ,-- bra.s 73c8 <loadFunctionCode+0x35a>
		}
	} else
	{
		newFunc->numLocals = NULL;
    73c0:	|              '-----|-> movea.l 100(sp),a0
    73c4:	|                    |   clr.l 8(a0)
	}	

#ifndef DISABLEFUNCTIONCACHE
	if( numCachedFunctions >= CACHEFUNCTIONMAX) 
    73c8:	|                    '-> move.l 1e804 <numCachedFunctions>,d0
    73ce:	|                        moveq #9,d1
    73d0:	|                        cmp.l d0,d1
    73d2:	|  ,-------------------- bge.w 751a <loadFunctionCode+0x4ac>
	{
		struct cachedFunction *huntanddestroy = lastCachedFunction;
    73d6:	|  |                     move.l 1e800 <lastCachedFunction>,88(sp)
		while (huntanddestroy) 
    73de:	|  |     ,-------------- bra.w 749c <loadFunctionCode+0x42e>
		{
			if (huntanddestroy->theFunction->unloaded == 1) 
    73e2:	|  |  ,--|-------------> movea.l 88(sp),a0
    73e6:	|  |  |  |               movea.l 4(a0),a0
    73ea:	|  |  |  |               move.l 58(a0),d0
    73ee:	|  |  |  |               moveq #1,d1
    73f0:	|  |  |  |               cmp.l d0,d1
    73f2:	|  |  |  |  ,----------- bne.w 7492 <loadFunctionCode+0x424>
			{
				if( huntanddestroy->prev)
    73f6:	|  |  |  |  |            movea.l 88(sp),a0
    73fa:	|  |  |  |  |            move.l 12(a0),d0
    73fe:	|  |  |  |  |        ,-- beq.s 7416 <loadFunctionCode+0x3a8>
					huntanddestroy->prev->next = huntanddestroy->next;							
    7400:	|  |  |  |  |        |   movea.l 88(sp),a0
    7404:	|  |  |  |  |        |   movea.l 12(a0),a0
    7408:	|  |  |  |  |        |   movea.l 88(sp),a1
    740c:	|  |  |  |  |        |   move.l 8(a1),d0
    7410:	|  |  |  |  |        |   move.l d0,8(a0)
    7414:	|  |  |  |  |     ,--|-- bra.s 7436 <loadFunctionCode+0x3c8>
				else
				{
					allCachedFunctions = huntanddestroy->next;
    7416:	|  |  |  |  |     |  '-> movea.l 88(sp),a0
    741a:	|  |  |  |  |     |      move.l 8(a0),d0
    741e:	|  |  |  |  |     |      move.l d0,1e7fc <allCachedFunctions>
					if( allCachedFunctions)
    7424:	|  |  |  |  |     |      move.l 1e7fc <allCachedFunctions>,d0
    742a:	|  |  |  |  |     +----- beq.s 7436 <loadFunctionCode+0x3c8>
						allCachedFunctions->prev = NULL;
    742c:	|  |  |  |  |     |      movea.l 1e7fc <allCachedFunctions>,a0
    7432:	|  |  |  |  |     |      clr.l 12(a0)
				}

				if (huntanddestroy == lastCachedFunction) {
    7436:	|  |  |  |  |     '----> move.l 1e800 <lastCachedFunction>,d0
    743c:	|  |  |  |  |            cmp.l 88(sp),d0
    7440:	|  |  |  |  |     ,----- bne.s 7472 <loadFunctionCode+0x404>
					if( huntanddestroy->prev)
    7442:	|  |  |  |  |     |      movea.l 88(sp),a0
    7446:	|  |  |  |  |     |      move.l 12(a0),d0
    744a:	|  |  |  |  |     |  ,-- beq.s 745c <loadFunctionCode+0x3ee>
						lastCachedFunction = huntanddestroy->prev;
    744c:	|  |  |  |  |     |  |   movea.l 88(sp),a0
    7450:	|  |  |  |  |     |  |   move.l 12(a0),d0
    7454:	|  |  |  |  |     |  |   move.l d0,1e800 <lastCachedFunction>
				{
					if( huntanddestroy->next)
						huntanddestroy->next->prev = huntanddestroy->prev;																
				}				

				break;
    745a:	|  |  |  |  |  ,--|--|-- bra.s 74a6 <loadFunctionCode+0x438>
						lastCachedFunction = NULL;
    745c:	|  |  |  |  |  |  |  '-> clr.l 1e800 <lastCachedFunction>
						KPrintF("loadFunctionCode: Last cached function is NULL\n");
    7462:	|  |  |  |  |  |  |      pea 19f65 <PutChar+0xfc5>
    7468:	|  |  |  |  |  |  |      jsr 184fe <KPrintF>
    746e:	|  |  |  |  |  |  |      addq.l #4,sp
				break;
    7470:	|  |  |  |  |  +--|----- bra.s 74a6 <loadFunctionCode+0x438>
					if( huntanddestroy->next)
    7472:	|  |  |  |  |  |  '----> movea.l 88(sp),a0
    7476:	|  |  |  |  |  |         move.l 8(a0),d0
    747a:	|  |  |  |  |  +-------- beq.s 74a6 <loadFunctionCode+0x438>
						huntanddestroy->next->prev = huntanddestroy->prev;																
    747c:	|  |  |  |  |  |         movea.l 88(sp),a0
    7480:	|  |  |  |  |  |         movea.l 8(a0),a0
    7484:	|  |  |  |  |  |         movea.l 88(sp),a1
    7488:	|  |  |  |  |  |         move.l 12(a1),d0
    748c:	|  |  |  |  |  |         move.l d0,12(a0)
				break;
    7490:	|  |  |  |  |  +-------- bra.s 74a6 <loadFunctionCode+0x438>
			}
			
			huntanddestroy = huntanddestroy->prev;
    7492:	|  |  |  |  '--|-------> movea.l 88(sp),a0
    7496:	|  |  |  |     |         move.l 12(a0),88(sp)
		while (huntanddestroy) 
    749c:	|  |  |  '-----|-------> tst.l 88(sp)
    74a0:	|  |  '--------|-------- bne.w 73e2 <loadFunctionCode+0x374>
    74a4:	|  |           |     ,-- bra.s 74a8 <loadFunctionCode+0x43a>
				break;
    74a6:	|  |           '-----|-> nop
		}		

		if( huntanddestroy)
    74a8:	|  |                 '-> tst.l 88(sp)
    74ac:	|  |                 ,-- beq.s 750c <loadFunctionCode+0x49e>
		{
			numCachedFunctions--;
    74ae:	|  |                 |   move.l 1e804 <numCachedFunctions>,d0
    74b4:	|  |                 |   subq.l #1,d0
    74b6:	|  |                 |   move.l d0,1e804 <numCachedFunctions>
			FreeVec(huntanddestroy->theFunction->compiledLines);
    74bc:	|  |                 |   movea.l 88(sp),a0
    74c0:	|  |                 |   movea.l 4(a0),a0
    74c4:	|  |                 |   move.l 4(a0),12(sp)
    74ca:	|  |                 |   move.l 1e876 <SysBase>,d0
    74d0:	|  |                 |   movea.l d0,a6
    74d2:	|  |                 |   movea.l 12(sp),a1
    74d6:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy->theFunction);
    74da:	|  |                 |   movea.l 88(sp),a0
    74de:	|  |                 |   move.l 4(a0),8(sp)
    74e4:	|  |                 |   move.l 1e876 <SysBase>,d0
    74ea:	|  |                 |   movea.l d0,a6
    74ec:	|  |                 |   movea.l 8(sp),a1
    74f0:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy);
    74f4:	|  |                 |   move.l 88(sp),4(sp)
    74fa:	|  |                 |   move.l 1e876 <SysBase>,d0
    7500:	|  |                 |   movea.l d0,a6
    7502:	|  |                 |   movea.l 4(sp),a1
    7506:	|  |                 |   jsr -690(a6)
    750a:	|  +-----------------|-- bra.s 751a <loadFunctionCode+0x4ac>
		} else 
		{
			KPrintF("loadFunctionCode: Function is still in use\n");
    750c:	|  |                 '-> pea 19f95 <PutChar+0xff5>
    7512:	|  |                     jsr 184fe <KPrintF>
    7518:	|  |                     addq.l #4,sp
		}
	}	
#endif					
	
	return newFunc;
    751a:	|  '-------------------> move.l 100(sp),d0

}
    751e:	'----------------------> movea.l (sp)+,a6
    7520:	                         lea 104(sp),sp
    7524:	                         rts

00007526 <loadHandlers>:

void loadHandlers (BPTR fp) {
    7526:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    7528:	movea.l 1e1da <currentEvents>,a2
    752e:	move.l 8(sp),-(sp)
    7532:	jsr 6bc <get2bytes>
    7538:	addq.l #4,sp
    753a:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    753c:	movea.l 1e1da <currentEvents>,a2
    7542:	move.l 8(sp),-(sp)
    7546:	jsr 6bc <get2bytes>
    754c:	addq.l #4,sp
    754e:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    7552:	movea.l 1e1da <currentEvents>,a2
    7558:	move.l 8(sp),-(sp)
    755c:	jsr 6bc <get2bytes>
    7562:	addq.l #4,sp
    7564:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7568:	movea.l 1e1da <currentEvents>,a2
    756e:	move.l 8(sp),-(sp)
    7572:	jsr 6bc <get2bytes>
    7578:	addq.l #4,sp
    757a:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    757e:	movea.l 1e1da <currentEvents>,a2
    7584:	move.l 8(sp),-(sp)
    7588:	jsr 6bc <get2bytes>
    758e:	addq.l #4,sp
    7590:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    7594:	movea.l 1e1da <currentEvents>,a2
    759a:	move.l 8(sp),-(sp)
    759e:	jsr 6bc <get2bytes>
    75a4:	addq.l #4,sp
    75a6:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    75aa:	movea.l 1e1da <currentEvents>,a2
    75b0:	move.l 8(sp),-(sp)
    75b4:	jsr 6bc <get2bytes>
    75ba:	addq.l #4,sp
    75bc:	move.l d0,24(a2)
}
    75c0:	nop
    75c2:	movea.l (sp)+,a2
    75c4:	rts

000075c6 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    75c6:	       lea -312(sp),sp
    75ca:	       movem.l d2-d3/a6,-(sp)
    75ce:	       move.l 332(sp),d1
    75d2:	       move.l 336(sp),d0
    75d6:	       move.b d1,d1
    75d8:	       move.b d1,16(sp)
    75dc:	       move.b d0,d0
    75de:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    75e2:	       move.l 328(sp),318(sp)
    75e8:	       move.l #1005,314(sp)
    75f0:	       move.l 1e87e <DOSBase>,d0
    75f6:	       movea.l d0,a6
    75f8:	       move.l 318(sp),d1
    75fc:	       move.l 314(sp),d2
    7600:	       jsr -30(a6)
    7604:	       move.l d0,310(sp)
    7608:	       move.l 310(sp),d0
    760c:	       move.l d0,306(sp)

	if (! fp) {
    7610:	   ,-- bne.s 766c <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    7612:	   |   move.l 1e87e <DOSBase>,d0
    7618:	   |   movea.l d0,a6
    761a:	   |   jsr -60(a6)
    761e:	   |   move.l d0,154(sp)
    7622:	   |   move.l 154(sp),d0
    7626:	   |   move.l d0,150(sp)
    762a:	   |   move.l #106433,146(sp)
    7632:	   |   moveq #31,d0
    7634:	   |   move.l d0,142(sp)
    7638:	   |   move.l 1e87e <DOSBase>,d0
    763e:	   |   movea.l d0,a6
    7640:	   |   move.l 150(sp),d1
    7644:	   |   move.l 146(sp),d2
    7648:	   |   move.l 142(sp),d3
    764c:	   |   jsr -48(a6)
    7650:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    7654:	   |   move.l 328(sp),-(sp)
    7658:	   |   pea 19fe1 <PutChar+0x1041>
    765e:	   |   jsr 184fe <KPrintF>
    7664:	   |   addq.l #8,sp
		return NULL;
    7666:	   |   moveq #0,d0
    7668:	,--|-- bra.w 792c <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    766c:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    7670:	|      move.l 306(sp),302(sp)
    7676:	|      move.l 1e87e <DOSBase>,d0
    767c:	|      movea.l d0,a6
    767e:	|      move.l 302(sp),d1
    7682:	|      jsr -306(a6)
    7686:	|      move.l d0,298(sp)
    768a:	|      move.l 298(sp),d0
    768e:	|      moveq #83,d1
    7690:	|      cmp.l d0,d1
    7692:	|  ,-- beq.s 769a <openAndVerify+0xd4>
    7694:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    769a:	|  '-> move.l 306(sp),294(sp)
    76a0:	|      move.l 1e87e <DOSBase>,d0
    76a6:	|      movea.l d0,a6
    76a8:	|      move.l 294(sp),d1
    76ac:	|      jsr -306(a6)
    76b0:	|      move.l d0,290(sp)
    76b4:	|      move.l 290(sp),d0
    76b8:	|      moveq #76,d1
    76ba:	|      cmp.l d0,d1
    76bc:	|  ,-- beq.s 76c4 <openAndVerify+0xfe>
    76be:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    76c4:	|  '-> move.l 306(sp),286(sp)
    76ca:	|      move.l 1e87e <DOSBase>,d0
    76d0:	|      movea.l d0,a6
    76d2:	|      move.l 286(sp),d1
    76d6:	|      jsr -306(a6)
    76da:	|      move.l d0,282(sp)
    76de:	|      move.l 282(sp),d0
    76e2:	|      moveq #85,d1
    76e4:	|      cmp.l d0,d1
    76e6:	|  ,-- beq.s 76ee <openAndVerify+0x128>
    76e8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    76ee:	|  '-> move.l 306(sp),278(sp)
    76f4:	|      move.l 1e87e <DOSBase>,d0
    76fa:	|      movea.l d0,a6
    76fc:	|      move.l 278(sp),d1
    7700:	|      jsr -306(a6)
    7704:	|      move.l d0,274(sp)
    7708:	|      move.l 274(sp),d0
    770c:	|      moveq #68,d1
    770e:	|      cmp.l d0,d1
    7710:	|  ,-- beq.s 7718 <openAndVerify+0x152>
    7712:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    7718:	|  '-> move.l 306(sp),270(sp)
    771e:	|      move.l 1e87e <DOSBase>,d0
    7724:	|      movea.l d0,a6
    7726:	|      move.l 270(sp),d1
    772a:	|      jsr -306(a6)
    772e:	|      move.l d0,266(sp)
    7732:	|      move.l 266(sp),d1
    7736:	|      move.b 16(sp),d0
    773a:	|      ext.w d0
    773c:	|      movea.w d0,a0
    773e:	|      cmpa.l d1,a0
    7740:	|  ,-- beq.s 7748 <openAndVerify+0x182>
    7742:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    7748:	|  '-> move.l 306(sp),262(sp)
    774e:	|      move.l 1e87e <DOSBase>,d0
    7754:	|      movea.l d0,a6
    7756:	|      move.l 262(sp),d1
    775a:	|      jsr -306(a6)
    775e:	|      move.l d0,258(sp)
    7762:	|      move.l 258(sp),d1
    7766:	|      move.b 14(sp),d0
    776a:	|      ext.w d0
    776c:	|      movea.w d0,a0
    776e:	|      cmpa.l d1,a0
    7770:	|  ,-- beq.s 7778 <openAndVerify+0x1b2>
    7772:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7778:	|  '-> tst.w 322(sp)
    777c:	|  ,-- beq.s 77d4 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    777e:	|  |   move.l 1e87e <DOSBase>,d0
    7784:	|  |   movea.l d0,a6
    7786:	|  |   jsr -60(a6)
    778a:	|  |   move.l d0,174(sp)
    778e:	|  |   move.l 174(sp),d0
    7792:	|  |   move.l d0,170(sp)
    7796:	|  |   move.l #106496,166(sp)
    779e:	|  |   moveq #31,d0
    77a0:	|  |   move.l d0,162(sp)
    77a4:	|  |   move.l 1e87e <DOSBase>,d0
    77aa:	|  |   movea.l d0,a6
    77ac:	|  |   move.l 170(sp),d1
    77b0:	|  |   move.l 166(sp),d2
    77b4:	|  |   move.l 162(sp),d3
    77b8:	|  |   jsr -48(a6)
    77bc:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    77c0:	|  |   pea 1a000 <PutChar+0x1060>
    77c6:	|  |   jsr 184fe <KPrintF>
    77cc:	|  |   addq.l #4,sp
		return NULL;
    77ce:	|  |   moveq #0,d0
    77d0:	+--|-- bra.w 792c <openAndVerify+0x366>
	}
	FGetC (fp);
    77d4:	|  '-> move.l 306(sp),254(sp)
    77da:	|      move.l 1e87e <DOSBase>,d0
    77e0:	|      movea.l d0,a6
    77e2:	|      move.l 254(sp),d1
    77e6:	|      jsr -306(a6)
    77ea:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    77ee:	|      nop
    77f0:	|  ,-> move.l 306(sp),246(sp)
    77f6:	|  |   move.l 1e87e <DOSBase>,d0
    77fc:	|  |   movea.l d0,a6
    77fe:	|  |   move.l 246(sp),d1
    7802:	|  |   jsr -306(a6)
    7806:	|  |   move.l d0,242(sp)
    780a:	|  |   move.l 242(sp),d0
    780e:	|  '-- bne.s 77f0 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    7810:	|      move.l 306(sp),238(sp)
    7816:	|      move.l 1e87e <DOSBase>,d0
    781c:	|      movea.l d0,a6
    781e:	|      move.l 238(sp),d1
    7822:	|      jsr -306(a6)
    7826:	|      move.l d0,234(sp)
    782a:	|      move.l 234(sp),d0
    782e:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    7832:	|      move.l 306(sp),226(sp)
    7838:	|      move.l 1e87e <DOSBase>,d0
    783e:	|      movea.l d0,a6
    7840:	|      move.l 226(sp),d1
    7844:	|      jsr -306(a6)
    7848:	|      move.l d0,222(sp)
    784c:	|      move.l 222(sp),d0
    7850:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    7854:	|      move.l 230(sp),d0
    7858:	|      lsl.l #8,d0
    785a:	|      add.l 218(sp),d0
    785e:	|      movea.l 344(sp),a0
    7862:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    7864:	|      movea.l 344(sp),a0
    7868:	|      move.l (a0),d0
    786a:	|      cmpi.l #514,d0
    7870:	|  ,-- ble.s 78c6 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    7872:	|  |   move.l 1e87e <DOSBase>,d0
    7878:	|  |   movea.l d0,a6
    787a:	|  |   jsr -60(a6)
    787e:	|  |   move.l d0,194(sp)
    7882:	|  |   move.l 194(sp),d0
    7886:	|  |   move.l d0,190(sp)
    788a:	|  |   move.l #106523,186(sp)
    7892:	|  |   moveq #100,d1
    7894:	|  |   move.l d1,182(sp)
    7898:	|  |   move.l 1e87e <DOSBase>,d0
    789e:	|  |   movea.l d0,a6
    78a0:	|  |   move.l 190(sp),d1
    78a4:	|  |   move.l 186(sp),d2
    78a8:	|  |   move.l 182(sp),d3
    78ac:	|  |   jsr -48(a6)
    78b0:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    78b4:	|  |   pea 1a01b <PutChar+0x107b>
    78ba:	|  |   jsr 184fe <KPrintF>
    78c0:	|  |   addq.l #4,sp
		return NULL;
    78c2:	|  |   moveq #0,d0
    78c4:	+--|-- bra.s 792c <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    78c6:	|  '-> movea.l 344(sp),a0
    78ca:	|      move.l (a0),d0
    78cc:	|      cmpi.l #257,d0
    78d2:	|  ,-- bgt.s 7928 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    78d4:	|  |   move.l 1e87e <DOSBase>,d0
    78da:	|  |   movea.l d0,a6
    78dc:	|  |   jsr -60(a6)
    78e0:	|  |   move.l d0,214(sp)
    78e4:	|  |   move.l 214(sp),d0
    78e8:	|  |   move.l d0,210(sp)
    78ec:	|  |   move.l #106592,206(sp)
    78f4:	|  |   moveq #100,d0
    78f6:	|  |   move.l d0,202(sp)
    78fa:	|  |   move.l 1e87e <DOSBase>,d0
    7900:	|  |   movea.l d0,a6
    7902:	|  |   move.l 210(sp),d1
    7906:	|  |   move.l 206(sp),d2
    790a:	|  |   move.l 202(sp),d3
    790e:	|  |   jsr -48(a6)
    7912:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    7916:	|  |   pea 1a060 <PutChar+0x10c0>
    791c:	|  |   jsr 184fe <KPrintF>
    7922:	|  |   addq.l #4,sp
		return NULL;
    7924:	|  |   moveq #0,d0
    7926:	+--|-- bra.s 792c <openAndVerify+0x366>
	}
	return fp;
    7928:	|  '-> move.l 306(sp),d0
}
    792c:	'----> movem.l (sp)+,d2-d3/a6
    7930:	       lea 312(sp),sp
    7934:	       rts

00007936 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    7936:	          subq.l #8,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7938:	          move.l #124940,4(sp)
	while (* huntAndDestroy) {
    7940:	   ,----- bra.s 7990 <pauseFunction+0x5a>
		if (fun == * huntAndDestroy) {
    7942:	,--|----> movea.l 4(sp),a0
    7946:	|  |      move.l (a0),d0
    7948:	|  |      cmp.l 12(sp),d0
    794c:	|  |  ,-- bne.s 7982 <pauseFunction+0x4c>
			int test[1];
			test[0] = fun -> originalNumber;
    794e:	|  |  |   movea.l 12(sp),a0
    7952:	|  |  |   move.l (a0),d0
    7954:	|  |  |   move.l d0,(sp)
			KPrintF("Function %ld removed from running functions\n", test[0]);
    7956:	|  |  |   move.l (sp),d0
    7958:	|  |  |   move.l d0,-(sp)
    795a:	|  |  |   pea 1a0a7 <PutChar+0x1107>
    7960:	|  |  |   jsr 184fe <KPrintF>
    7966:	|  |  |   addq.l #8,sp
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7968:	|  |  |   movea.l 4(sp),a0
    796c:	|  |  |   movea.l (a0),a0
    796e:	|  |  |   move.l 44(a0),d0
    7972:	|  |  |   movea.l 4(sp),a0
    7976:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7978:	|  |  |   movea.l 12(sp),a0
    797c:	|  |  |   clr.l 44(a0)
    7980:	|  +--|-- bra.s 7990 <pauseFunction+0x5a>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7982:	|  |  '-> movea.l 4(sp),a0
    7986:	|  |      move.l (a0),d0
    7988:	|  |      moveq #44,d1
    798a:	|  |      add.l d0,d1
    798c:	|  |      move.l d1,4(sp)
	while (* huntAndDestroy) {
    7990:	|  '----> movea.l 4(sp),a0
    7994:	|         move.l (a0),d0
    7996:	'-------- bne.s 7942 <pauseFunction+0xc>
		}
	}
}
    7998:	          nop
    799a:	          nop
    799c:	          addq.l #8,sp
    799e:	          rts

000079a0 <restartFunction>:
struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
}

void restartFunction (struct loadedFunction * fun) {
    79a0:	subq.l #4,sp

	int test[1];
	test[0] = fun -> originalNumber;
    79a2:	movea.l 8(sp),a0
    79a6:	move.l (a0),d0
    79a8:	move.l d0,(sp)

	KPrintF("Function %ld restarted\n", test[0]);
    79aa:	move.l (sp),d0
    79ac:	move.l d0,-(sp)
    79ae:	pea 1a0d4 <PutChar+0x1134>
    79b4:	jsr 184fe <KPrintF>
    79ba:	addq.l #8,sp

	fun -> next = allRunningFunctions;
    79bc:	move.l 1e80c <allRunningFunctions>,d0
    79c2:	movea.l 8(sp),a0
    79c6:	move.l d0,44(a0)
	fun -> unloaded = 0;
    79ca:	movea.l 8(sp),a0
    79ce:	clr.l 58(a0)
	allRunningFunctions = fun;
    79d2:	move.l 8(sp),1e80c <allRunningFunctions>
}
    79da:	nop
    79dc:	addq.l #4,sp
    79de:	rts

000079e0 <runSludge>:

BOOL runSludge () {
    79e0:	                      lea -12(sp),sp
    79e4:	                      move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    79e6:	                      move.l 1e80c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    79ee:	      ,-------------- bra.s 7a6a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    79f0:	   ,--|-------------> movea.l 12(sp),a0
    79f4:	   |  |               move.l 44(a0),8(sp)

		if (! thisFunction -> freezerLevel) {
    79fa:	   |  |               movea.l 12(sp),a0
    79fe:	   |  |               move.b 56(a0),d0
    7a02:	   |  |  ,----------- bne.s 7a64 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7a04:	   |  |  |            movea.l 12(sp),a0
    7a08:	   |  |  |            move.l 12(a0),d0
    7a0c:	   |  |  |     ,----- beq.s 7a36 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7a0e:	   |  |  |     |      movea.l 12(sp),a0
    7a12:	   |  |  |     |      move.l 12(a0),d0
    7a16:	   |  |  |     |  ,-- bpl.s 7a22 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7a18:	   |  |  |     |  |   movea.l 12(sp),a0
    7a1c:	   |  |  |     |  |   clr.l 12(a0)
    7a20:	   |  |  +-----|--|-- bra.s 7a64 <runSludge+0x84>
				} 
				else {
					thisFunction -> timeLeft--;
    7a22:	   |  |  |     |  '-> movea.l 12(sp),a0
    7a26:	   |  |  |     |      move.l 12(a0),d0
    7a2a:	   |  |  |     |      subq.l #1,d0
    7a2c:	   |  |  |     |      movea.l 12(sp),a0
    7a30:	   |  |  |     |      move.l d0,12(a0)
					break;
    7a34:	   |  |  |  ,--|----- bra.s 7a70 <runSludge+0x90>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7a36:	   |  |  |  |  '----> movea.l 12(sp),a0
    7a3a:	   |  |  |  |         move.w 50(a0),d0
    7a3e:	   |  |  |  |     ,-- beq.s 7a4e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7a40:	   |  |  |  |     |   movea.l 12(sp),a0
    7a44:	   |  |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7a48:	   |  |  |  |     |   jsr 4496 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7a4e:	   |  |  |  |     '-> move.l 12(sp),-(sp)
    7a52:	   |  |  |  |         jsr 5702 <continueFunction>
    7a58:	   |  |  |  |         addq.l #4,sp
    7a5a:	   |  |  |  |         tst.w d0
    7a5c:	   |  |  +--|-------- bne.s 7a64 <runSludge+0x84>
					return FALSE;
    7a5e:	   |  |  |  |         clr.w d0
    7a60:	,--|--|--|--|-------- bra.w 7af0 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7a64:	|  |  |  '--|-------> move.l 8(sp),12(sp)
	while (thisFunction) {
    7a6a:	|  |  '-----|-------> tst.l 12(sp)
    7a6e:	|  '--------|-------- bne.s 79f0 <runSludge+0x10>
	}

	if (loadNow) {
    7a70:	|           '-------> move.l 1e840 <loadNow>,d0
    7a76:	|           ,-------- beq.s 7aee <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7a78:	|           |         movea.l 1e840 <loadNow>,a0
    7a7e:	|           |         move.b (a0),d0
    7a80:	|           |         cmpi.b #58,d0
    7a84:	|           |  ,----- bne.s 7ab8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7a86:	|           |  |      move.l 1e840 <loadNow>,d0
    7a8c:	|           |  |      addq.l #1,d0
    7a8e:	|           |  |      move.l d0,-(sp)
    7a90:	|           |  |      jsr d184 <saveGame>
    7a96:	|           |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7a98:	|           |  |      movea.l 1e940 <saverFunc>,a0
    7a9e:	|           |  |      lea 28(a0),a0
    7aa2:	|           |  |      pea 1 <_start+0x1>
    7aa6:	|           |  |      pea 1 <_start+0x1>
    7aaa:	|           |  |      move.l a0,-(sp)
    7aac:	|           |  |      jsr 16310 <setVariable>
    7ab2:	|           |  |      lea 12(sp),sp
    7ab6:	|           |  |  ,-- bra.s 7ad0 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    7ab8:	|           |  '--|-> move.l 1e840 <loadNow>,d0
    7abe:	|           |     |   move.l d0,-(sp)
    7ac0:	|           |     |   jsr cccc <loadGame>
    7ac6:	|           |     |   addq.l #4,sp
    7ac8:	|           |     |   tst.w d0
    7aca:	|           |     +-- bne.s 7ad0 <runSludge+0xf0>
    7acc:	|           |     |   clr.w d0
    7ace:	+-----------|-----|-- bra.s 7af0 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7ad0:	|           |     '-> move.l 1e840 <loadNow>,4(sp)
    7ad8:	|           |         move.l 1e876 <SysBase>,d0
    7ade:	|           |         movea.l d0,a6
    7ae0:	|           |         movea.l 4(sp),a1
    7ae4:	|           |         jsr -690(a6)
		loadNow = NULL;
    7ae8:	|           |         clr.l 1e840 <loadNow>
	}

	return TRUE;
    7aee:	|           '-------> moveq #1,d0
}
    7af0:	'-------------------> movea.l (sp)+,a6
    7af2:	                      lea 12(sp),sp
    7af6:	                      rts

00007af8 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7af8:	movea.l 1e1da <currentEvents>,a0
    7afe:	move.l (a0),d0
    7b00:	move.l 4(sp),-(sp)
    7b04:	move.l d0,-(sp)
    7b06:	jsr 8d0 <put2bytes>
    7b0c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7b0e:	movea.l 1e1da <currentEvents>,a0
    7b14:	move.l 4(a0),d0
    7b18:	move.l 4(sp),-(sp)
    7b1c:	move.l d0,-(sp)
    7b1e:	jsr 8d0 <put2bytes>
    7b24:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7b26:	movea.l 1e1da <currentEvents>,a0
    7b2c:	move.l 8(a0),d0
    7b30:	move.l 4(sp),-(sp)
    7b34:	move.l d0,-(sp)
    7b36:	jsr 8d0 <put2bytes>
    7b3c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7b3e:	movea.l 1e1da <currentEvents>,a0
    7b44:	move.l 12(a0),d0
    7b48:	move.l 4(sp),-(sp)
    7b4c:	move.l d0,-(sp)
    7b4e:	jsr 8d0 <put2bytes>
    7b54:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7b56:	movea.l 1e1da <currentEvents>,a0
    7b5c:	move.l 16(a0),d0
    7b60:	move.l 4(sp),-(sp)
    7b64:	move.l d0,-(sp)
    7b66:	jsr 8d0 <put2bytes>
    7b6c:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    7b6e:	movea.l 1e1da <currentEvents>,a0
    7b74:	move.l 20(a0),d0
    7b78:	move.l 4(sp),-(sp)
    7b7c:	move.l d0,-(sp)
    7b7e:	jsr 8d0 <put2bytes>
    7b84:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7b86:	movea.l 1e1da <currentEvents>,a0
    7b8c:	move.l 24(a0),d0
    7b90:	move.l 4(sp),-(sp)
    7b94:	move.l d0,-(sp)
    7b96:	jsr 8d0 <put2bytes>
    7b9c:	addq.l #8,sp
}
    7b9e:	nop
    7ba0:	rts

00007ba2 <sludgeDisplay>:

void sludgeDisplay () {					
    7ba2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7ba4:	move.l #14675968,(sp)
	CstSwapBuffer();
    7baa:	jsr 3af2 <CstSwapBuffer>
	displayCursor();
    7bb0:	jsr c58 <displayCursor>
	CstRestoreScreen();
    7bb6:	jsr 2e78 <CstRestoreScreen>
	drawPeople();
    7bbc:	jsr aa06 <drawPeople>
}
    7bc2:	nop
    7bc4:	addq.l #4,sp
    7bc6:	rts

00007bc8 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7bc8:	      ,-- bra.s 7be8 <stackSetByIndex+0x20>
		vS = vS->next;
    7bca:	,-----|-> movea.l 4(sp),a0
    7bce:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7bd4:	|     +-- bne.s 7be8 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7bd6:	|     |   pea 1a0ec <PutChar+0x114c>
    7bdc:	|     |   jsr 184fe <KPrintF>
    7be2:	|     |   addq.l #4,sp
			return FALSE;
    7be4:	|     |   clr.w d0
    7be6:	|  ,--|-- bra.s 7c0a <stackSetByIndex+0x42>
	while (theIndex--) {
    7be8:	|  |  '-> move.l 8(sp),d0
    7bec:	|  |      move.l d0,d1
    7bee:	|  |      subq.l #1,d1
    7bf0:	|  |      move.l d1,8(sp)
    7bf4:	|  |      tst.l d0
    7bf6:	'--|----- bne.s 7bca <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7bf8:	   |      move.l 4(sp),d0
    7bfc:	   |      move.l d0,-(sp)
    7bfe:	   |      move.l 16(sp),-(sp)
    7c02:	   |      jsr 15ed8 <copyVariable>
    7c08:	   |      addq.l #8,sp
}
    7c0a:	   '----> rts

00007c0c <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7c0c:	             subq.l #8,sp
    7c0e:	             move.l 28(sp),d0
    7c12:	             move.w d0,d0
    7c14:	             move.w d0,2(sp)
	
	KPrintF("startNewFunctionLoaded: Starting function\n");
    7c18:	             pea 1a105 <PutChar+0x1165>
    7c1e:	             jsr 184fe <KPrintF>
    7c24:	             addq.l #4,sp
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7c26:	             movea.l 12(sp),a0
    7c2a:	             move.l 16(a0),d1
    7c2e:	             move.l 16(sp),d0
    7c32:	             cmp.l d1,d0
    7c34:	         ,-- beq.s 7c4a <startNewFunctionLoaded+0x3e>
		KPrintF("Wrong number of parameters!");
    7c36:	         |   pea 1a130 <PutChar+0x1190>
    7c3c:	         |   jsr 184fe <KPrintF>
    7c42:	         |   addq.l #4,sp
		return NULL; 
    7c44:	         |   moveq #0,d0
    7c46:	,--------|-- bra.w 7d26 <startNewFunctionLoaded+0x11a>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7c4a:	|        '-> movea.l 12(sp),a0
    7c4e:	|            move.l 16(a0),d1
    7c52:	|            movea.l 12(sp),a0
    7c56:	|            move.l 8(a0),d0
    7c5a:	|            cmp.l d1,d0
    7c5c:	|  ,-------- bge.s 7cc6 <startNewFunctionLoaded+0xba>
		KPrintF ("More arguments than local variable space!");
    7c5e:	|  |         pea 1a14c <PutChar+0x11ac>
    7c64:	|  |         jsr 184fe <KPrintF>
    7c6a:	|  |         addq.l #4,sp
		return NULL; 
    7c6c:	|  |         moveq #0,d0
    7c6e:	+--|-------- bra.w 7d26 <startNewFunctionLoaded+0x11a>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7c72:	|  |  ,----> movea.l 24(sp),a0
    7c76:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7c7a:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7c7e:	|  |  |      movea.l 24(sp),a0
    7c82:	|  |  |      move.l (a0),d0
    7c84:	|  |  |  ,-- bne.s 7c9a <startNewFunctionLoaded+0x8e>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7c86:	|  |  |  |   pea 1a176 <PutChar+0x11d6>
    7c8c:	|  |  |  |   jsr 184fe <KPrintF>
    7c92:	|  |  |  |   addq.l #4,sp
			return NULL;
    7c94:	|  |  |  |   moveq #0,d0
    7c96:	+--|--|--|-- bra.w 7d26 <startNewFunctionLoaded+0x11a>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7c9a:	|  |  |  '-> movea.l 12(sp),a0
    7c9e:	|  |  |      move.l 20(a0),d1
    7ca2:	|  |  |      move.l 16(sp),d0
    7ca6:	|  |  |      lsl.l #3,d0
    7ca8:	|  |  |      add.l d0,d1
    7caa:	|  |  |      move.l 4(sp),d0
    7cae:	|  |  |      move.l d1,-(sp)
    7cb0:	|  |  |      move.l d0,-(sp)
    7cb2:	|  |  |      jsr 15ed8 <copyVariable>
    7cb8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7cba:	|  |  |      move.l 24(sp),-(sp)
    7cbe:	|  |  |      jsr 163a2 <trimStack>
    7cc4:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7cc6:	|  '--|----> tst.l 16(sp)
    7cca:	|     '----- bne.s 7c72 <startNewFunctionLoaded+0x66>
	}

	newFunc -> cancelMe = FALSE;
    7ccc:	|            movea.l 12(sp),a0
    7cd0:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7cd4:	|            movea.l 12(sp),a0
    7cd8:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7cdc:	|            movea.l 12(sp),a0
    7ce0:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7ce6:	|            movea.l 12(sp),a0
    7cea:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7cf0:	|            movea.l 12(sp),a0
    7cf4:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7cf8:	|            movea.l 12(sp),a0
    7cfc:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7d00:	|            movea.l 12(sp),a0
    7d04:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7d08:	|            movea.l 12(sp),a0
    7d0c:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7d10:	|            movea.l 12(sp),a0
    7d14:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7d18:	|            move.l 12(sp),-(sp)
    7d1c:	|            jsr 79a0 <restartFunction>
    7d22:	|            addq.l #4,sp
	return 1;
    7d24:	|            moveq #1,d0
}
    7d26:	'----------> addq.l #8,sp
    7d28:	             rts

00007d2a <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7d2a:	lea -12(sp),sp
    7d2e:	move.l 32(sp),d0
    7d32:	move.w d0,d0
    7d34:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7d38:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    7d40:	move.l 16(sp),-(sp)
    7d44:	jsr 706e <loadFunctionCode>
    7d4a:	addq.l #4,sp
    7d4c:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7d50:	movea.w 2(sp),a0
    7d54:	move.l a0,-(sp)
    7d56:	move.l 32(sp),-(sp)
    7d5a:	move.l 32(sp),-(sp)
    7d5e:	move.l 32(sp),-(sp)
    7d62:	move.l 20(sp),-(sp)
    7d66:	jsr 7c0c <startNewFunctionLoaded>
    7d6c:	lea 20(sp),sp
}
    7d70:	lea 12(sp),sp
    7d74:	rts

00007d76 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7d76:	          subq.l #8,sp
    7d78:	          move.l a6,-(sp)

	int a;

	if (fun -> stack) 
    7d7a:	          movea.l 16(sp),a0
    7d7e:	          move.l 24(a0),d0
    7d82:	      ,-- beq.s 7d94 <unloadFunction+0x1e>
	{
		KPrintF("unloadfunction: error non empty stack");
    7d84:	      |   pea 1a1c1 <PutChar+0x1221>
    7d8a:	      |   jsr 184fe <KPrintF>
    7d90:	      |   addq.l #4,sp
		return;
    7d92:	,-----|-- bra.s 7e04 <unloadFunction+0x8e>
	}
	
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7d94:	|     '-> clr.l 8(sp)
    7d98:	|     ,-- bra.s 7db8 <unloadFunction+0x42>
    7d9a:	|  ,--|-> movea.l 16(sp),a0
    7d9e:	|  |  |   move.l 20(a0),d1
    7da2:	|  |  |   move.l 8(sp),d0
    7da6:	|  |  |   lsl.l #3,d0
    7da8:	|  |  |   add.l d1,d0
    7daa:	|  |  |   move.l d0,-(sp)
    7dac:	|  |  |   jsr 15c6c <unlinkVar>
    7db2:	|  |  |   addq.l #4,sp
    7db4:	|  |  |   addq.l #1,8(sp)
    7db8:	|  |  '-> movea.l 16(sp),a0
    7dbc:	|  |      move.l 8(a0),d0
    7dc0:	|  |      cmp.l 8(sp),d0
    7dc4:	|  '----- bgt.s 7d9a <unloadFunction+0x24>
	if( fun->numLocals > 0) {
    7dc6:	|         movea.l 16(sp),a0
    7dca:	|         move.l 8(a0),d0
    7dce:	|     ,-- ble.s 7dea <unloadFunction+0x74>
		FreeVec(fun -> localVars);
    7dd0:	|     |   movea.l 16(sp),a0
    7dd4:	|     |   move.l 20(a0),4(sp)
    7dda:	|     |   move.l 1e876 <SysBase>,d0
    7de0:	|     |   movea.l d0,a6
    7de2:	|     |   movea.l 4(sp),a1
    7de6:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7dea:	|     '-> moveq #28,d0
    7dec:	|         add.l 16(sp),d0
    7df0:	|         move.l d0,-(sp)
    7df2:	|         jsr 15c6c <unlinkVar>
    7df8:	|         addq.l #4,sp
	fun->unloaded = 1;
    7dfa:	|         movea.l 16(sp),a0
    7dfe:	|         moveq #1,d0
    7e00:	|         move.l d0,58(a0)



}
    7e04:	'-------> movea.l (sp)+,a6
    7e06:	          addq.l #8,sp
    7e08:	          rts

00007e0a <unfreezeSubs>:

void unfreezeSubs () {
    7e0a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7e0c:	          move.l 1e80c <allRunningFunctions>,(sp)

	while (thisFunction) {
    7e12:	   ,----- bra.s 7e30 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7e14:	,--|----> movea.l (sp),a0
    7e16:	|  |      move.b 56(a0),d0
    7e1a:	|  |  ,-- beq.s 7e2a <unfreezeSubs+0x20>
    7e1c:	|  |  |   movea.l (sp),a0
    7e1e:	|  |  |   move.b 56(a0),d0
    7e22:	|  |  |   subq.b #1,d0
    7e24:	|  |  |   movea.l (sp),a0
    7e26:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7e2a:	|  |  '-> movea.l (sp),a0
    7e2c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7e30:	|  '----> tst.l (sp)
    7e32:	'-------- bne.s 7e14 <unfreezeSubs+0xa>
	}
}
    7e34:	          nop
    7e36:	          nop
    7e38:	          addq.l #4,sp
    7e3a:	          rts

00007e3c <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7e3c:	clr.w 1e1e6 <sliceBusy>
}
    7e42:	nop
    7e44:	rts

00007e46 <getNumberedString>:

char * getNumberedString (int value) {
    7e46:	       lea -56(sp),sp
    7e4a:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7e4e:	       move.w 1e1e6 <sliceBusy>,d0
    7e54:	   ,-- beq.s 7e9e <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7e56:	   |   move.l 1e87e <DOSBase>,d0
    7e5c:	   |   movea.l d0,a6
    7e5e:	   |   jsr -60(a6)
    7e62:	   |   move.l d0,28(sp)
    7e66:	   |   move.l 28(sp),d0
    7e6a:	   |   move.l d0,24(sp)
    7e6e:	   |   move.l #106983,20(sp)
    7e76:	   |   moveq #76,d0
    7e78:	   |   move.l d0,16(sp)
    7e7c:	   |   move.l 1e87e <DOSBase>,d0
    7e82:	   |   movea.l d0,a6
    7e84:	   |   move.l 24(sp),d1
    7e88:	   |   move.l 20(sp),d2
    7e8c:	   |   move.l 16(sp),d3
    7e90:	   |   jsr -48(a6)
    7e94:	   |   move.l d0,12(sp)
		return NULL;
    7e98:	   |   moveq #0,d0
    7e9a:	,--|-- bra.w 7f3a <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7e9e:	|  '-> move.l 1e85c <bigDataFile>,64(sp)
    7ea6:	|      move.l 72(sp),d0
    7eaa:	|      add.l d0,d0
    7eac:	|      add.l d0,d0
    7eae:	|      move.l d0,d1
    7eb0:	|      move.l 1e868 <startOfTextIndex>,d0
    7eb6:	|      add.l d1,d0
    7eb8:	|      move.l d0,60(sp)
    7ebc:	|      moveq #-1,d0
    7ebe:	|      move.l d0,56(sp)
    7ec2:	|      move.l 1e87e <DOSBase>,d0
    7ec8:	|      movea.l d0,a6
    7eca:	|      move.l 64(sp),d1
    7ece:	|      move.l 60(sp),d2
    7ed2:	|      move.l 56(sp),d3
    7ed6:	|      jsr -66(a6)
    7eda:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7ede:	|      move.l 1e85c <bigDataFile>,d0
    7ee4:	|      move.l d0,-(sp)
    7ee6:	|      jsr 718 <get4bytes>
    7eec:	|      addq.l #4,sp
    7eee:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7ef2:	|      move.l 1e85c <bigDataFile>,48(sp)
    7efa:	|      move.l 72(sp),44(sp)
    7f00:	|      moveq #-1,d0
    7f02:	|      move.l d0,40(sp)
    7f06:	|      move.l 1e87e <DOSBase>,d0
    7f0c:	|      movea.l d0,a6
    7f0e:	|      move.l 48(sp),d1
    7f12:	|      move.l 44(sp),d2
    7f16:	|      move.l 40(sp),d3
    7f1a:	|      jsr -66(a6)
    7f1e:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7f22:	|      move.l 1e85c <bigDataFile>,d0
    7f28:	|      move.l d0,-(sp)
    7f2a:	|      jsr b02 <readString>
    7f30:	|      addq.l #4,sp
    7f32:	|      move.l d0,32(sp)
	
	return s;
    7f36:	|      move.l 32(sp),d0
}
    7f3a:	'----> movem.l (sp)+,d2-d3/a6
    7f3e:	       lea 56(sp),sp
    7f42:	       rts

00007f44 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7f44:	       lea -32(sp),sp
    7f48:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7f4c:	       move.w 1e1e6 <sliceBusy>,d0
    7f52:	   ,-- beq.s 7f6e <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7f54:	   |   pea 1a234 <PutChar+0x1294>
    7f5a:	   |   pea 1a252 <PutChar+0x12b2>
    7f60:	   |   jsr 184fe <KPrintF>
    7f66:	   |   addq.l #8,sp
		return 0;
    7f68:	   |   moveq #0,d0
    7f6a:	,--|-- bra.w 8002 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7f6e:	|  '-> move.l 1e85c <bigDataFile>,40(sp)
    7f76:	|      move.l 48(sp),d0
    7f7a:	|      add.l d0,d0
    7f7c:	|      add.l d0,d0
    7f7e:	|      move.l d0,d1
    7f80:	|      move.l 1e864 <startOfDataIndex>,d0
    7f86:	|      add.l d1,d0
    7f88:	|      move.l d0,36(sp)
    7f8c:	|      moveq #-1,d0
    7f8e:	|      move.l d0,32(sp)
    7f92:	|      move.l 1e87e <DOSBase>,d0
    7f98:	|      movea.l d0,a6
    7f9a:	|      move.l 40(sp),d1
    7f9e:	|      move.l 36(sp),d2
    7fa2:	|      move.l 32(sp),d3
    7fa6:	|      jsr -66(a6)
    7faa:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7fae:	|      move.l 1e85c <bigDataFile>,24(sp)
    7fb6:	|      move.l 1e85c <bigDataFile>,d0
    7fbc:	|      move.l d0,-(sp)
    7fbe:	|      jsr 718 <get4bytes>
    7fc4:	|      addq.l #4,sp
    7fc6:	|      move.l d0,20(sp)
    7fca:	|      clr.l 16(sp)
    7fce:	|      move.l 1e87e <DOSBase>,d0
    7fd4:	|      movea.l d0,a6
    7fd6:	|      move.l 24(sp),d1
    7fda:	|      move.l 20(sp),d2
    7fde:	|      move.l 16(sp),d3
    7fe2:	|      jsr -66(a6)
    7fe6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7fea:	|      move.w #1,1e1e6 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7ff2:	|      move.l 1e85c <bigDataFile>,d0
    7ff8:	|      move.l d0,-(sp)
    7ffa:	|      jsr 718 <get4bytes>
    8000:	|      addq.l #4,sp
}
    8002:	'----> movem.l (sp)+,d2-d3/a6
    8006:	       lea 32(sp),sp
    800a:	       rts

0000800c <openObjectSlice>:

BOOL openObjectSlice (int num) {
    800c:	       lea -32(sp),sp
    8010:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    8014:	       move.w 1e1e6 <sliceBusy>,d0
    801a:	   ,-- beq.s 8036 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    801c:	   |   pea 1a234 <PutChar+0x1294>
    8022:	   |   pea 1a252 <PutChar+0x12b2>
    8028:	   |   jsr 184fe <KPrintF>
    802e:	   |   addq.l #8,sp
        return FALSE;
    8030:	   |   clr.w d0
    8032:	,--|-- bra.w 80c2 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    8036:	|  '-> move.l 1e85c <bigDataFile>,40(sp)
    803e:	|      move.l 48(sp),d0
    8042:	|      add.l d0,d0
    8044:	|      add.l d0,d0
    8046:	|      move.l d0,d1
    8048:	|      move.l 1e870 <startOfObjectIndex>,d0
    804e:	|      add.l d1,d0
    8050:	|      move.l d0,36(sp)
    8054:	|      moveq #-1,d0
    8056:	|      move.l d0,32(sp)
    805a:	|      move.l 1e87e <DOSBase>,d0
    8060:	|      movea.l d0,a6
    8062:	|      move.l 40(sp),d1
    8066:	|      move.l 36(sp),d2
    806a:	|      move.l 32(sp),d3
    806e:	|      jsr -66(a6)
    8072:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    8076:	|      move.l 1e85c <bigDataFile>,24(sp)
    807e:	|      move.l 1e85c <bigDataFile>,d0
    8084:	|      move.l d0,-(sp)
    8086:	|      jsr 718 <get4bytes>
    808c:	|      addq.l #4,sp
    808e:	|      move.l d0,20(sp)
    8092:	|      moveq #-1,d0
    8094:	|      move.l d0,16(sp)
    8098:	|      move.l 1e87e <DOSBase>,d0
    809e:	|      movea.l d0,a6
    80a0:	|      move.l 24(sp),d1
    80a4:	|      move.l 20(sp),d2
    80a8:	|      move.l 16(sp),d3
    80ac:	|      jsr -66(a6)
    80b0:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    80b4:	|      move.w #1,1e1e6 <sliceBusy>
    80bc:	|      move.w 1e1e6 <sliceBusy>,d0
}
    80c2:	'----> movem.l (sp)+,d2-d3/a6
    80c6:	       lea 32(sp),sp
    80ca:	       rts

000080cc <openSubSlice>:

BOOL openSubSlice (int num) {
    80cc:	       lea -32(sp),sp
    80d0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    80d4:	       move.w 1e1e6 <sliceBusy>,d0
    80da:	   ,-- beq.s 80f6 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    80dc:	   |   pea 1a234 <PutChar+0x1294>
    80e2:	   |   pea 1a252 <PutChar+0x12b2>
    80e8:	   |   jsr 184fe <KPrintF>
    80ee:	   |   addq.l #8,sp
		return FALSE;
    80f0:	   |   clr.w d0
    80f2:	,--|-- bra.w 8182 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    80f6:	|  '-> move.l 1e85c <bigDataFile>,40(sp)
    80fe:	|      move.l 48(sp),d0
    8102:	|      add.l d0,d0
    8104:	|      add.l d0,d0
    8106:	|      move.l d0,d1
    8108:	|      move.l 1e86c <startOfSubIndex>,d0
    810e:	|      add.l d1,d0
    8110:	|      move.l d0,36(sp)
    8114:	|      moveq #-1,d0
    8116:	|      move.l d0,32(sp)
    811a:	|      move.l 1e87e <DOSBase>,d0
    8120:	|      movea.l d0,a6
    8122:	|      move.l 40(sp),d1
    8126:	|      move.l 36(sp),d2
    812a:	|      move.l 32(sp),d3
    812e:	|      jsr -66(a6)
    8132:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    8136:	|      move.l 1e85c <bigDataFile>,24(sp)
    813e:	|      move.l 1e85c <bigDataFile>,d0
    8144:	|      move.l d0,-(sp)
    8146:	|      jsr 718 <get4bytes>
    814c:	|      addq.l #4,sp
    814e:	|      move.l d0,20(sp)
    8152:	|      moveq #-1,d0
    8154:	|      move.l d0,16(sp)
    8158:	|      move.l 1e87e <DOSBase>,d0
    815e:	|      movea.l d0,a6
    8160:	|      move.l 24(sp),d1
    8164:	|      move.l 20(sp),d2
    8168:	|      move.l 16(sp),d3
    816c:	|      jsr -66(a6)
    8170:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    8174:	|      move.w #1,1e1e6 <sliceBusy>
    817c:	|      move.w 1e1e6 <sliceBusy>,d0
}
    8182:	'----> movem.l (sp)+,d2-d3/a6
    8186:	       lea 32(sp),sp
    818a:	       rts

0000818c <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    818c:	       lea -180(sp),sp
    8190:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    8194:	       tst.l 196(sp)
    8198:	,----- beq.s 81d8 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    819a:	|      move.l 196(sp),1e85c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    81a2:	|      move.l 196(sp),168(sp)
    81a8:	|      clr.l 164(sp)
    81ac:	|      clr.l 160(sp)
    81b0:	|      move.l 1e87e <DOSBase>,d0
    81b6:	|      movea.l d0,a6
    81b8:	|      move.l 168(sp),d1
    81bc:	|      move.l 164(sp),d2
    81c0:	|      move.l 160(sp),d3
    81c4:	|      jsr -66(a6)
    81c8:	|      move.l d0,156(sp)
    81cc:	|      move.l 156(sp),d0
    81d0:	|      move.l d0,1e860 <startIndex>
    81d6:	|  ,-- bra.s 8212 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    81d8:	'--|-> move.l 1e85c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    81e0:	   |   move.l 196(sp),184(sp)
    81e6:	   |   move.l 1e860 <startIndex>,d0
    81ec:	   |   move.l d0,180(sp)
    81f0:	   |   moveq #-1,d0
    81f2:	   |   move.l d0,176(sp)
    81f6:	   |   move.l 1e87e <DOSBase>,d0
    81fc:	   |   movea.l d0,a6
    81fe:	   |   move.l 184(sp),d1
    8202:	   |   move.l 180(sp),d2
    8206:	   |   move.l 176(sp),d3
    820a:	   |   jsr -66(a6)
    820e:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    8212:	   '-> clr.w 1e1e6 <sliceBusy>

	if (skipBefore > numLanguages) {
    8218:	       move.l 204(sp),d0
    821c:	       cmp.l 200(sp),d0
    8220:	   ,-- bls.s 8234 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    8222:	   |   pea 1a26c <PutChar+0x12cc>
    8228:	   |   jsr 184fe <KPrintF>
    822e:	   |   addq.l #4,sp
		skipBefore = 0;
    8230:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    8234:	   '-> move.l 200(sp),d0
    8238:	       sub.l 204(sp),d0
    823c:	       move.l d0,188(sp)
	while (skipBefore) {
    8240:	   ,-- bra.s 827e <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    8242:	,--|-> move.l 196(sp),24(sp)
    8248:	|  |   move.l 196(sp),-(sp)
    824c:	|  |   jsr 718 <get4bytes>
    8252:	|  |   addq.l #4,sp
    8254:	|  |   move.l d0,20(sp)
    8258:	|  |   moveq #-1,d0
    825a:	|  |   move.l d0,16(sp)
    825e:	|  |   move.l 1e87e <DOSBase>,d0
    8264:	|  |   movea.l d0,a6
    8266:	|  |   move.l 24(sp),d1
    826a:	|  |   move.l 20(sp),d2
    826e:	|  |   move.l 16(sp),d3
    8272:	|  |   jsr -66(a6)
    8276:	|  |   move.l d0,12(sp)
		skipBefore --;
    827a:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    827e:	|  '-> tst.l 204(sp)
    8282:	'----- bne.s 8242 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8284:	       move.l 196(sp),152(sp)
    828a:	       clr.l 148(sp)
    828e:	       clr.l 144(sp)
    8292:	       move.l 1e87e <DOSBase>,d0
    8298:	       movea.l d0,a6
    829a:	       move.l 152(sp),d1
    829e:	       move.l 148(sp),d2
    82a2:	       move.l 144(sp),d3
    82a6:	       jsr -66(a6)
    82aa:	       move.l d0,140(sp)
    82ae:	       move.l 140(sp),d0
    82b2:	       addq.l #4,d0
    82b4:	       move.l d0,1e868 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    82ba:	       move.l 196(sp),136(sp)
    82c0:	       move.l 196(sp),-(sp)
    82c4:	       jsr 718 <get4bytes>
    82ca:	       addq.l #4,sp
    82cc:	       move.l d0,132(sp)
    82d0:	       moveq #-1,d0
    82d2:	       move.l d0,128(sp)
    82d6:	       move.l 1e87e <DOSBase>,d0
    82dc:	       movea.l d0,a6
    82de:	       move.l 136(sp),d1
    82e2:	       move.l 132(sp),d2
    82e6:	       move.l 128(sp),d3
    82ea:	       jsr -66(a6)
    82ee:	       move.l d0,124(sp)

	while (skipAfter) {
    82f2:	   ,-- bra.s 8330 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    82f4:	,--|-> move.l 196(sp),40(sp)
    82fa:	|  |   move.l 196(sp),-(sp)
    82fe:	|  |   jsr 718 <get4bytes>
    8304:	|  |   addq.l #4,sp
    8306:	|  |   move.l d0,36(sp)
    830a:	|  |   moveq #-1,d0
    830c:	|  |   move.l d0,32(sp)
    8310:	|  |   move.l 1e87e <DOSBase>,d0
    8316:	|  |   movea.l d0,a6
    8318:	|  |   move.l 40(sp),d1
    831c:	|  |   move.l 36(sp),d2
    8320:	|  |   move.l 32(sp),d3
    8324:	|  |   jsr -66(a6)
    8328:	|  |   move.l d0,28(sp)
		skipAfter --;
    832c:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    8330:	|  '-> tst.l 188(sp)
    8334:	'----- bne.s 82f4 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8336:	       move.l 196(sp),120(sp)
    833c:	       clr.l 116(sp)
    8340:	       clr.l 112(sp)
    8344:	       move.l 1e87e <DOSBase>,d0
    834a:	       movea.l d0,a6
    834c:	       move.l 120(sp),d1
    8350:	       move.l 116(sp),d2
    8354:	       move.l 112(sp),d3
    8358:	       jsr -66(a6)
    835c:	       move.l d0,108(sp)
    8360:	       move.l 108(sp),d0
    8364:	       addq.l #4,d0
    8366:	       move.l d0,1e86c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    836c:	       move.l 196(sp),104(sp)
    8372:	       move.l 196(sp),-(sp)
    8376:	       jsr 718 <get4bytes>
    837c:	       addq.l #4,sp
    837e:	       move.l d0,100(sp)
    8382:	       clr.l 96(sp)
    8386:	       move.l 1e87e <DOSBase>,d0
    838c:	       movea.l d0,a6
    838e:	       move.l 104(sp),d1
    8392:	       move.l 100(sp),d2
    8396:	       move.l 96(sp),d3
    839a:	       jsr -66(a6)
    839e:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    83a2:	       move.l 196(sp),88(sp)
    83a8:	       clr.l 84(sp)
    83ac:	       clr.l 80(sp)
    83b0:	       move.l 1e87e <DOSBase>,d0
    83b6:	       movea.l d0,a6
    83b8:	       move.l 88(sp),d1
    83bc:	       move.l 84(sp),d2
    83c0:	       move.l 80(sp),d3
    83c4:	       jsr -66(a6)
    83c8:	       move.l d0,76(sp)
    83cc:	       move.l 76(sp),d0
    83d0:	       addq.l #4,d0
    83d2:	       move.l d0,1e870 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    83d8:	       move.l 196(sp),72(sp)
    83de:	       move.l 196(sp),-(sp)
    83e2:	       jsr 718 <get4bytes>
    83e8:	       addq.l #4,sp
    83ea:	       move.l d0,68(sp)
    83ee:	       clr.l 64(sp)
    83f2:	       move.l 1e87e <DOSBase>,d0
    83f8:	       movea.l d0,a6
    83fa:	       move.l 72(sp),d1
    83fe:	       move.l 68(sp),d2
    8402:	       move.l 64(sp),d3
    8406:	       jsr -66(a6)
    840a:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    840e:	       move.l 196(sp),56(sp)
    8414:	       clr.l 52(sp)
    8418:	       clr.l 48(sp)
    841c:	       move.l 1e87e <DOSBase>,d0
    8422:	       movea.l d0,a6
    8424:	       move.l 56(sp),d1
    8428:	       move.l 52(sp),d2
    842c:	       move.l 48(sp),d3
    8430:	       jsr -66(a6)
    8434:	       move.l d0,44(sp)
    8438:	       move.l 44(sp),d0
    843c:	       move.l d0,1e864 <startOfDataIndex>
    8442:	       nop
    8444:	       movem.l (sp)+,d2-d3/a6
    8448:	       lea 180(sp),sp
    844c:	       rts

0000844e <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    844e:	    lea -20(sp),sp
    8452:	    move.l a6,-(sp)
    8454:	    move.l d7,-(sp)
	APTR vbr = 0;
    8456:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    845a:	    move.w #20090,10(sp)
    8460:	    move.w #2049,12(sp)
    8466:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    846c:	    movea.l 1e876 <SysBase>,a0
    8472:	    move.w 296(a0),d0
    8476:	    move.w d0,d0
    8478:	    andi.l #65535,d0
    847e:	    moveq #1,d1
    8480:	    and.l d1,d0
    8482:	,-- beq.s 84b0 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    8484:	|   lea 28(sp),a0
    8488:	|   lea -18(a0),a0
    848c:	|   move.l a0,20(sp)
    8490:	|   move.l 1e876 <SysBase>,d0
    8496:	|   movea.l d0,a6
    8498:	|   move.l 20(sp),d7
    849c:	|   exg d7,a5
    849e:	|   jsr -30(a6)
    84a2:	|   exg d7,a5
    84a4:	|   move.l d0,16(sp)
    84a8:	|   move.l 16(sp),d0
    84ac:	|   move.l d0,24(sp)

	return vbr;
    84b0:	'-> move.l 24(sp),d0
}
    84b4:	    move.l (sp)+,d7
    84b6:	    movea.l (sp)+,a6
    84b8:	    lea 20(sp),sp
    84bc:	    rts

000084be <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    84be:	movea.l 1e89c <VBR>,a0
    84c4:	lea 108(a0),a0
    84c8:	move.l 4(sp),(a0)
}
    84cc:	nop
    84ce:	rts

000084d0 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    84d0:	movea.l 1e89c <VBR>,a0
    84d6:	move.l 108(a0),d0
}
    84da:	rts

000084dc <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    84dc:	       subq.l #8,sp
    84de:	       move.l a6,-(sp)
	Forbid();
    84e0:	       move.l 1e876 <SysBase>,d0
    84e6:	       movea.l d0,a6
    84e8:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    84ec:	       movea.l 1e87a <custom>,a0
    84f2:	       move.w 16(a0),d0
    84f6:	       move.w d0,1e89a <SystemADKCON>
	SystemInts=custom->intenar;
    84fc:	       movea.l 1e87a <custom>,a0
    8502:	       move.w 28(a0),d0
    8506:	       move.w d0,1e896 <SystemInts>
	SystemDMA=custom->dmaconr;
    850c:	       movea.l 1e87a <custom>,a0
    8512:	       move.w 2(a0),d0
    8516:	       move.w d0,1e898 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    851c:	       movea.l 1e882 <GfxBase>,a0
    8522:	       move.l 34(a0),d0
    8526:	       move.l d0,1e8a4 <ActiView>

	LoadView(0);
    852c:	       clr.l 4(sp)
    8530:	       move.l 1e882 <GfxBase>,d0
    8536:	       movea.l d0,a6
    8538:	       movea.l 4(sp),a1
    853c:	       jsr -222(a6)
	WaitTOF();
    8540:	       move.l 1e882 <GfxBase>,d0
    8546:	       movea.l d0,a6
    8548:	       jsr -270(a6)
	WaitTOF();
    854c:	       move.l 1e882 <GfxBase>,d0
    8552:	       movea.l d0,a6
    8554:	       jsr -270(a6)

	WaitVbl();
    8558:	       jsr 18432 <WaitVbl>
	WaitVbl();
    855e:	       jsr 18432 <WaitVbl>

	OwnBlitter();
    8564:	       move.l 1e882 <GfxBase>,d0
    856a:	       movea.l d0,a6
    856c:	       jsr -456(a6)
	WaitBlit();	
    8570:	       move.l 1e882 <GfxBase>,d0
    8576:	       movea.l d0,a6
    8578:	       jsr -228(a6)
	//Disable();
	
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    857c:	       movea.l 1e87a <custom>,a0
    8582:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    8588:	       clr.l 8(sp)
    858c:	   ,-- bra.s 85aa <TakeSystem+0xce>
		custom->color[a]=0;
    858e:	,--|-> movea.l 1e87a <custom>,a0
    8594:	|  |   move.l 8(sp),d0
    8598:	|  |   addi.l #192,d0
    859e:	|  |   add.l d0,d0
    85a0:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    85a6:	|  |   addq.l #1,8(sp)
    85aa:	|  '-> moveq #31,d0
    85ac:	|      cmp.l 8(sp),d0
    85b0:	'----- bge.s 858e <TakeSystem+0xb2>

	WaitVbl();
    85b2:	       jsr 18432 <WaitVbl>
	WaitVbl();
    85b8:	       jsr 18432 <WaitVbl>

	VBR=GetVBR();
    85be:	       jsr 844e <GetVBR>
    85c4:	       move.l d0,1e89c <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register
    85ca:	       jsr 84d0 <GetInterruptHandler>
    85d0:	       move.l d0,1e8a0 <SystemIrq>
}
    85d6:	       nop
    85d8:	       movea.l (sp)+,a6
    85da:	       addq.l #8,sp
    85dc:	       rts

000085de <FreeSystem>:

void FreeSystem() { 
    85de:	subq.l #4,sp
    85e0:	move.l a6,-(sp)
	WaitVbl();
    85e2:	jsr 18432 <WaitVbl>
	WaitBlit();
    85e8:	move.l 1e882 <GfxBase>,d0
    85ee:	movea.l d0,a6
    85f0:	jsr -228(a6)
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	custom->dmacon=0x7fff;//Clear all DMA channels
    85f4:	movea.l 1e87a <custom>,a0
    85fa:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    8600:	move.l 1e8a0 <SystemIrq>,d0
    8606:	move.l d0,-(sp)
    8608:	jsr 84be <SetInterruptHandler>
    860e:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    8610:	movea.l 1e882 <GfxBase>,a0
    8616:	move.l 38(a0),d0
    861a:	movea.l 1e87a <custom>,a0
    8620:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    8624:	movea.l 1e882 <GfxBase>,a0
    862a:	move.l 50(a0),d0
    862e:	movea.l 1e87a <custom>,a0
    8634:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8638:	movea.l 1e87a <custom>,a0
    863e:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8644:	move.w 1e898 <SystemDMA>,d0
    864a:	movea.l 1e87a <custom>,a0
    8650:	ori.w #-32768,d0
    8654:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8658:	move.w 1e89a <SystemADKCON>,d0
    865e:	movea.l 1e87a <custom>,a0
    8664:	ori.w #-32768,d0
    8668:	move.w d0,158(a0)

	WaitBlit();	
    866c:	move.l 1e882 <GfxBase>,d0
    8672:	movea.l d0,a6
    8674:	jsr -228(a6)
	DisownBlitter();
    8678:	move.l 1e882 <GfxBase>,d0
    867e:	movea.l d0,a6
    8680:	jsr -462(a6)
	//Enable();

	LoadView(ActiView);
    8684:	move.l 1e8a4 <ActiView>,4(sp)
    868c:	move.l 1e882 <GfxBase>,d0
    8692:	movea.l d0,a6
    8694:	movea.l 4(sp),a1
    8698:	jsr -222(a6)
	WaitTOF();
    869c:	move.l 1e882 <GfxBase>,d0
    86a2:	movea.l d0,a6
    86a4:	jsr -270(a6)
	WaitTOF();
    86a8:	move.l 1e882 <GfxBase>,d0
    86ae:	movea.l d0,a6
    86b0:	jsr -270(a6)

	Permit();
    86b4:	move.l 1e876 <SysBase>,d0
    86ba:	movea.l d0,a6
    86bc:	jsr -138(a6)
}
    86c0:	nop
    86c2:	movea.l (sp)+,a6
    86c4:	addq.l #4,sp
    86c6:	rts

000086c8 <interruptHandler>:
    0xFFFF,  /* WAIT opcode with vertical=255 (max) */
    0xFFFE   /* horizontal=254 → impossible combination → halt */
};

void interruptHandler() {
	FrameCounter++;	
    86c8:	move.w 1e874 <FrameCounter>,d0
    86ce:	addq.w #1,d0
    86d0:	move.w d0,1e874 <FrameCounter>
	__asm  volatile ("move.l #0,%d0");
    86d6:	moveq #0,d0
	
}
    86d8:	nop
    86da:	rts

000086dc <main>:

struct Interrupt *vbInt;

int main(int argc, char *argv[]) {
    86dc:	       lea -176(sp),sp
    86e0:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    86e4:	       clr.l 184(sp)
    86e8:	   ,-- bra.s 86ee <main+0x12>
    86ea:	,--|-> addq.l #1,184(sp)
    86ee:	|  '-> cmpi.l #999,184(sp)
    86f6:	'----- ble.s 86ea <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    86f8:	       movea.w #4,a0
    86fc:	       move.l (a0),d0
    86fe:	       move.l d0,1e876 <SysBase>
	custom = (struct Custom*)0xdff000;	
    8704:	       move.l #14675968,1e87a <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    870e:	       move.l #107189,180(sp)
    8716:	       clr.l 176(sp)
    871a:	       move.l 1e876 <SysBase>,d0
    8720:	       movea.l d0,a6
    8722:	       movea.l 180(sp),a1
    8726:	       move.l 176(sp),d0
    872a:	       jsr -552(a6)
    872e:	       move.l d0,172(sp)
    8732:	       move.l 172(sp),d0
    8736:	       move.l d0,1e882 <GfxBase>
	if (!GfxBase)
    873c:	       move.l 1e882 <GfxBase>,d0
    8742:	   ,-- bne.s 8758 <main+0x7c>
		Exit(0);
    8744:	   |   clr.l 168(sp)
    8748:	   |   move.l 1e87e <DOSBase>,d0
    874e:	   |   movea.l d0,a6
    8750:	   |   move.l 168(sp),d1
    8754:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8758:	   '-> move.l #107206,164(sp)
    8760:	       clr.l 160(sp)
    8764:	       move.l 1e876 <SysBase>,d0
    876a:	       movea.l d0,a6
    876c:	       movea.l 164(sp),a1
    8770:	       move.l 160(sp),d0
    8774:	       jsr -552(a6)
    8778:	       move.l d0,156(sp)
    877c:	       move.l 156(sp),d0
    8780:	       move.l d0,1e87e <DOSBase>
	if (!DOSBase)
    8786:	       move.l 1e87e <DOSBase>,d0
    878c:	   ,-- bne.s 87a2 <main+0xc6>
		Exit(0);
    878e:	   |   clr.l 152(sp)
    8792:	   |   move.l 1e87e <DOSBase>,d0
    8798:	   |   movea.l d0,a6
    879a:	   |   move.l 152(sp),d1
    879e:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    87a2:	   '-> move.l #107218,148(sp)
    87aa:	       clr.l 144(sp)
    87ae:	       move.l 1e876 <SysBase>,d0
    87b4:	       movea.l d0,a6
    87b6:	       movea.l 148(sp),a1
    87ba:	       move.l 144(sp),d0
    87be:	       jsr -552(a6)
    87c2:	       move.l d0,140(sp)
    87c6:	       move.l 140(sp),d0
    87ca:	       move.l d0,1e886 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    87d0:	       move.l 1e886 <MathIeeeSingBasBase>,d0
    87d6:	   ,-- bne.s 87ec <main+0x110>
		Exit(0);	
    87d8:	   |   clr.l 136(sp)
    87dc:	   |   move.l 1e87e <DOSBase>,d0
    87e2:	   |   movea.l d0,a6
    87e4:	   |   move.l 136(sp),d1
    87e8:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    87ec:	   '-> move.l #107242,132(sp)
    87f4:	       clr.l 128(sp)
    87f8:	       move.l 1e876 <SysBase>,d0
    87fe:	       movea.l d0,a6
    8800:	       movea.l 132(sp),a1
    8804:	       move.l 128(sp),d0
    8808:	       jsr -552(a6)
    880c:	       move.l d0,124(sp)
    8810:	       move.l 124(sp),d0
    8814:	       move.l d0,1e88a <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    881a:	       move.l 1e88a <MathIeeeSingTransBase>,d0
    8820:	   ,-- bne.s 8836 <main+0x15a>
		Exit(0);
    8822:	   |   clr.l 120(sp)
    8826:	   |   move.l 1e87e <DOSBase>,d0
    882c:	   |   movea.l d0,a6
    882e:	   |   move.l 120(sp),d1
    8832:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8836:	   '-> move.l #107268,116(sp)
    883e:	       clr.l 112(sp)
    8842:	       move.l 1e876 <SysBase>,d0
    8848:	       movea.l d0,a6
    884a:	       movea.l 116(sp),a1
    884e:	       move.l 112(sp),d0
    8852:	       jsr -552(a6)
    8856:	       move.l d0,108(sp)
    885a:	       move.l 108(sp),d0
    885e:	       move.l d0,1e892 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8864:	       move.l 1e892 <MathIeeeDoubTransBase>,d0
    886a:	   ,-- bne.s 8880 <main+0x1a4>
		Exit(0);
    886c:	   |   clr.l 104(sp)
    8870:	   |   move.l 1e87e <DOSBase>,d0
    8876:	   |   movea.l d0,a6
    8878:	   |   move.l 104(sp),d1
    887c:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8880:	   '-> move.l #107294,100(sp)
    8888:	       clr.l 96(sp)
    888c:	       move.l 1e876 <SysBase>,d0
    8892:	       movea.l d0,a6
    8894:	       movea.l 100(sp),a1
    8898:	       move.l 96(sp),d0
    889c:	       jsr -552(a6)
    88a0:	       move.l d0,92(sp)
    88a4:	       move.l 92(sp),d0
    88a8:	       move.l d0,1e88e <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    88ae:	       move.l 1e88e <MathIeeeDoubBasBase>,d0
    88b4:	   ,-- bne.s 88ca <main+0x1ee>
		Exit(0);		
    88b6:	   |   clr.l 88(sp)
    88ba:	   |   move.l 1e87e <DOSBase>,d0
    88c0:	   |   movea.l d0,a6
    88c2:	   |   move.l 88(sp),d1
    88c6:	   |   jsr -144(a6)

	KPrintF(" debugger from Amiga Test 035!\n");
    88ca:	   '-> pea 1a336 <PutChar+0x1396>
    88d0:	       jsr 184fe <KPrintF>
    88d6:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    88d8:	       move.l 1e87e <DOSBase>,d0
    88de:	       movea.l d0,a6
    88e0:	       jsr -60(a6)
    88e4:	       move.l d0,84(sp)
    88e8:	       move.l 84(sp),d0
    88ec:	       move.l d0,80(sp)
    88f0:	       move.l #107350,76(sp)
    88f8:	       moveq #25,d0
    88fa:	       move.l d0,72(sp)
    88fe:	       move.l 1e87e <DOSBase>,d0
    8904:	       movea.l d0,a6
    8906:	       move.l 80(sp),d1
    890a:	       move.l 76(sp),d2
    890e:	       move.l 72(sp),d3
    8912:	       jsr -48(a6)
    8916:	       move.l d0,68(sp)
	Delay(50);
    891a:	       moveq #50,d1
    891c:	       move.l d1,64(sp)
    8920:	       move.l 1e87e <DOSBase>,d0
    8926:	       movea.l d0,a6
    8928:	       move.l 64(sp),d1
    892c:	       jsr -198(a6)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/


	KPrintF("Taking System\n");
    8930:	       pea 1a36f <PutChar+0x13cf>
    8936:	       jsr 184fe <KPrintF>
    893c:	       addq.l #4,sp
	TakeSystem();
    893e:	       jsr 84dc <TakeSystem>
	KPrintF("System Taken\n");
    8944:	       pea 1a37e <PutChar+0x13de>
    894a:	       jsr 184fe <KPrintF>
    8950:	       addq.l #4,sp

	WaitVbl();
    8952:	       jsr 18432 <WaitVbl>

	USHORT* copper1 = (USHORT*)AllocMem(1024, MEMF_CHIP);
    8958:	       move.l #1024,60(sp)
    8960:	       moveq #2,d0
    8962:	       move.l d0,56(sp)
    8966:	       move.l 1e876 <SysBase>,d0
    896c:	       movea.l d0,a6
    896e:	       move.l 60(sp),d0
    8972:	       move.l 56(sp),d1
    8976:	       jsr -198(a6)
    897a:	       move.l d0,52(sp)
    897e:	       move.l 52(sp),d0
    8982:	       move.l d0,48(sp)
	USHORT* copPtr = copper1;	
    8986:	       move.l 48(sp),44(sp)

	*copPtr++ = 0xffdf;
    898c:	       move.l 44(sp),d0
    8990:	       move.l d0,d1
    8992:	       addq.l #2,d1
    8994:	       move.l d1,44(sp)
    8998:	       movea.l d0,a0
    899a:	       move.w #-33,(a0)
	*copPtr++ = 0xfffe;
    899e:	       move.l 44(sp),d0
    89a2:	       move.l d0,d1
    89a4:	       addq.l #2,d1
    89a6:	       move.l d1,44(sp)
    89aa:	       movea.l d0,a0
    89ac:	       move.w #-2,(a0)
	*copPtr++ = 0x2d01,
    89b0:	       move.l 44(sp),d0
    89b4:	       move.l d0,d1
    89b6:	       addq.l #2,d1
    89b8:	       move.l d1,44(sp)
    89bc:	       movea.l d0,a0
    89be:	       move.w #11521,(a0)
	*copPtr++ = 0xff00; 
    89c2:	       move.l 44(sp),d0
    89c6:	       move.l d0,d1
    89c8:	       addq.l #2,d1
    89ca:	       move.l d1,44(sp)
    89ce:	       movea.l d0,a0
    89d0:	       move.w #-256,(a0)
	*copPtr++ = 0x9c; 
    89d4:	       move.l 44(sp),d0
    89d8:	       move.l d0,d1
    89da:	       addq.l #2,d1
    89dc:	       move.l d1,44(sp)
    89e0:	       movea.l d0,a0
    89e2:	       move.w #156,(a0)
	*copPtr++ = 0x8010; 
    89e6:	       move.l 44(sp),d0
    89ea:	       move.l d0,d1
    89ec:	       addq.l #2,d1
    89ee:	       move.l d1,44(sp)
    89f2:	       movea.l d0,a0
    89f4:	       move.w #-32752,(a0)
	*copPtr++ = 0xffff;
    89f8:	       move.l 44(sp),d0
    89fc:	       move.l d0,d1
    89fe:	       addq.l #2,d1
    8a00:	       move.l d1,44(sp)
    8a04:	       movea.l d0,a0
    8a06:	       move.w #-1,(a0)
	*copPtr++ = 0xfffe; // end copper list
    8a0a:	       move.l 44(sp),d0
    8a0e:	       move.l d0,d1
    8a10:	       addq.l #2,d1
    8a12:	       move.l d1,44(sp)
    8a16:	       movea.l d0,a0
    8a18:	       move.w #-2,(a0)

	custom->cop1lc = (ULONG)copper1;
    8a1c:	       movea.l 1e87a <custom>,a0
    8a22:	       move.l 48(sp),d0
    8a26:	       move.l d0,128(a0)

	custom->dmacon = 0x87ff;	
    8a2a:	       movea.l 1e87a <custom>,a0
    8a30:	       move.w #-30721,150(a0)

    ULONG counter = 0;
    8a36:	       clr.l 12(sp)
    ULONG endcount;
                                                       /* Allocate memory for  */
    if (vbInt = AllocMem(sizeof(struct Interrupt),     /* interrupt node. */
    8a3a:	       moveq #22,d0
    8a3c:	       move.l d0,40(sp)
    8a40:	       move.l #65537,36(sp)
    8a48:	       move.l 1e876 <SysBase>,d0
    8a4e:	       movea.l d0,a6
    8a50:	       move.l 40(sp),d0
    8a54:	       move.l 36(sp),d1
    8a58:	       jsr -198(a6)
    8a5c:	       move.l d0,32(sp)
    8a60:	       move.l 32(sp),d0
    8a64:	       move.l d0,1e8a8 <vbInt>
    8a6a:	       move.l 1e8a8 <vbInt>,d0
    8a70:	   ,-- beq.s 8abc <main+0x3e0>
                         MEMF_PUBLIC|MEMF_CLEAR))
    {
        vbInt->is_Node.ln_Type = NT_INTERRUPT;         /* Initialize the node. */
    8a72:	   |   movea.l 1e8a8 <vbInt>,a0
    8a78:	   |   move.b #2,8(a0)
        vbInt->is_Node.ln_Pri = -60;
    8a7e:	   |   movea.l 1e8a8 <vbInt>,a0
    8a84:	   |   move.b #-60,9(a0)
        vbInt->is_Node.ln_Name = "VertB-Asludge";
    8a8a:	   |   movea.l 1e8a8 <vbInt>,a0
    8a90:	   |   move.l #107404,10(a0)
        vbInt->is_Data = (APTR)&counter;
    8a98:	   |   movea.l 1e8a8 <vbInt>,a0
    8a9e:	   |   moveq #67,d1
    8aa0:	   |   not.b d1
    8aa2:	   |   add.l sp,d1
    8aa4:	   |   addi.l #-176,d1
    8aaa:	   |   move.l d1,14(a0)
        vbInt->is_Code = interruptHandler;
    8aae:	   |   movea.l 1e8a8 <vbInt>,a0
    8ab4:	   |   move.l #34504,18(a0)
	}
	
	AddIntServer( INTB_COPER, vbInt);
    8abc:	   '-> moveq #4,d0
    8abe:	       move.l d0,28(sp)
    8ac2:	       move.l 1e8a8 <vbInt>,24(sp)
    8aca:	       move.l 1e876 <SysBase>,d0
    8ad0:	       movea.l d0,a6
    8ad2:	       move.l 28(sp),d0
    8ad6:	       movea.l 24(sp),a1
    8ada:	       jsr -168(a6)


	KPrintF("Starting main_sludge\n");
    8ade:	       pea 1a39a <PutChar+0x13fa>
    8ae4:	       jsr 184fe <KPrintF>
    8aea:	       addq.l #4,sp
	
	main_sludge(argc, argv);	
    8aec:	       move.l 196(sp),-(sp)
    8af0:	       move.l 196(sp),-(sp)
    8af4:	       jsr 4f4e <main_sludge>
    8afa:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8afc:	       jsr 85de <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    8b02:	       move.l 1e87e <DOSBase>,20(sp)
    8b0a:	       move.l 1e876 <SysBase>,d0
    8b10:	       movea.l d0,a6
    8b12:	       movea.l 20(sp),a1
    8b16:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8b1a:	       move.l 1e882 <GfxBase>,16(sp)
    8b22:	       move.l 1e876 <SysBase>,d0
    8b28:	       movea.l d0,a6
    8b2a:	       movea.l 16(sp),a1
    8b2e:	       jsr -414(a6)
    8b32:	       moveq #0,d0
}
    8b34:	       movem.l (sp)+,d2-d3/a6
    8b38:	       lea 176(sp),sp
    8b3c:	       rts

00008b3e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8b3e:	    lea -16(sp),sp
    8b42:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8b44:	    moveq #8,d0
    8b46:	    move.l d0,16(sp)
    8b4a:	    clr.l 12(sp)
    8b4e:	    move.l 1e876 <SysBase>,d0
    8b54:	    movea.l d0,a6
    8b56:	    move.l 16(sp),d0
    8b5a:	    move.l 12(sp),d1
    8b5e:	    jsr -684(a6)
    8b62:	    move.l d0,8(sp)
    8b66:	    move.l 8(sp),d0
    8b6a:	    move.l d0,4(sp)
	if (!newStat) {
    8b6e:	,-- bne.s 8b9e <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8b70:	|   movea.l 1e1e8 <nowStatus>,a0
    8b76:	|   move.l (a0),d0
    8b78:	|   movea.l 4(sp),a0
    8b7c:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8b80:	|   pea 19d49 <PutChar+0xda9>
    8b86:	|   jsr b8 <copyString>
    8b8c:	|   addq.l #4,sp
    8b8e:	|   movea.l 4(sp),a0
    8b92:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8b94:	|   movea.l 1e1e8 <nowStatus>,a0
    8b9a:	|   move.l 4(sp),(a0)
	}
}
    8b9e:	'-> nop
    8ba0:	    movea.l (sp)+,a6
    8ba2:	    lea 16(sp),sp
    8ba6:	    rts

00008ba8 <clearStatusBar>:

void clearStatusBar () {
    8ba8:	       lea -16(sp),sp
    8bac:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8bae:	       movea.l 1e1e8 <nowStatus>,a0
    8bb4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8bb8:	       movea.l 1e1e8 <nowStatus>,a0
    8bbe:	       moveq #-1,d0
    8bc0:	       move.l d0,6(a0)
	while (stat) {
    8bc4:	   ,-- bra.s 8c04 <clearStatusBar+0x5c>
		kill = stat;
    8bc6:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8bcc:	|  |   movea.l 16(sp),a0
    8bd0:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8bd6:	|  |   movea.l 12(sp),a0
    8bda:	|  |   move.l (a0),8(sp)
    8bde:	|  |   move.l 1e876 <SysBase>,d0
    8be4:	|  |   movea.l d0,a6
    8be6:	|  |   movea.l 8(sp),a1
    8bea:	|  |   jsr -690(a6)
		FreeVec(kill);
    8bee:	|  |   move.l 12(sp),4(sp)
    8bf4:	|  |   move.l 1e876 <SysBase>,d0
    8bfa:	|  |   movea.l d0,a6
    8bfc:	|  |   movea.l 4(sp),a1
    8c00:	|  |   jsr -690(a6)
	while (stat) {
    8c04:	|  '-> tst.l 16(sp)
    8c08:	'----- bne.s 8bc6 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8c0a:	       movea.l 1e1e8 <nowStatus>,a0
    8c10:	       clr.l (a0)
}
    8c12:	       nop
    8c14:	       movea.l (sp)+,a6
    8c16:	       lea 16(sp),sp
    8c1a:	       rts

00008c1c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8c1c:	clr.l 1e8ac <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8c22:	move.w #-1,1e8b0 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8c2a:	moveq #-1,d0
    8c2c:	move.l d0,1e8b2 <mainStatus+0x6>
	mainStatus.statusX = 10;
    8c32:	moveq #10,d0
    8c34:	move.l d0,1e8b6 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8c3a:	movea.l 1e7c0 <winHeight>,a0
    8c40:	lea -15(a0),a0
    8c44:	move.l a0,d0
    8c46:	move.l d0,1e8ba <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8c4c:	nop
    8c4e:	rts

00008c50 <killLastStatus>:

void killLastStatus () {
    8c50:	    lea -12(sp),sp
    8c54:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8c56:	    movea.l 1e1e8 <nowStatus>,a0
    8c5c:	    move.l (a0),d0
    8c5e:	,-- beq.s 8ca8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8c60:	|   movea.l 1e1e8 <nowStatus>,a0
    8c66:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8c6a:	|   movea.l 1e1e8 <nowStatus>,a0
    8c70:	|   movea.l 12(sp),a1
    8c74:	|   move.l 4(a1),d0
    8c78:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8c7a:	|   movea.l 12(sp),a0
    8c7e:	|   move.l (a0),8(sp)
    8c82:	|   move.l 1e876 <SysBase>,d0
    8c88:	|   movea.l d0,a6
    8c8a:	|   movea.l 8(sp),a1
    8c8e:	|   jsr -690(a6)
		FreeVec(kill);
    8c92:	|   move.l 12(sp),4(sp)
    8c98:	|   move.l 1e876 <SysBase>,d0
    8c9e:	|   movea.l d0,a6
    8ca0:	|   movea.l 4(sp),a1
    8ca4:	|   jsr -690(a6)
	}
}
    8ca8:	'-> nop
    8caa:	    movea.l (sp)+,a6
    8cac:	    lea 12(sp),sp
    8cb0:	    rts

00008cb2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8cb2:	movea.l 1e1e8 <nowStatus>,a0
    8cb8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8cbe:	movea.l 1e1e8 <nowStatus>,a0
    8cc4:	move.l 8(sp),14(a0)
}
    8cca:	nop
    8ccc:	rts

00008cce <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8cce:	       lea -100(sp),sp
    8cd2:	       move.l a6,-(sp)
    8cd4:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8cd6:	       movea.l 1e1e8 <nowStatus>,a0
    8cdc:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8ce0:	       movea.l 1e1e8 <nowStatus>,a0
    8ce6:	       move.w 4(a0),d0
    8cea:	       move.w d0,d0
    8cec:	       andi.l #65535,d0
    8cf2:	       move.l 112(sp),-(sp)
    8cf6:	       move.l d0,-(sp)
    8cf8:	       jsr 8d0 <put2bytes>
    8cfe:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8d00:	       movea.l 1e1e8 <nowStatus>,a0
    8d06:	       move.l 6(a0),d0
    8d0a:	       move.l d0,d0
    8d0c:	       movea.w d0,a0
    8d0e:	       move.l 112(sp),-(sp)
    8d12:	       move.l a0,-(sp)
    8d14:	       jsr a9c <putSigned>
    8d1a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8d1c:	       movea.l 1e1e8 <nowStatus>,a0
    8d22:	       move.l 10(a0),d0
    8d26:	       move.l 112(sp),-(sp)
    8d2a:	       move.l d0,-(sp)
    8d2c:	       jsr 8d0 <put2bytes>
    8d32:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8d34:	       movea.l 1e1e8 <nowStatus>,a0
    8d3a:	       move.l 14(a0),d0
    8d3e:	       move.l 112(sp),-(sp)
    8d42:	       move.l d0,-(sp)
    8d44:	       jsr 8d0 <put2bytes>
    8d4a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8d4c:	       move.l 112(sp),100(sp)
    8d52:	       movea.l 1e1e8 <nowStatus>,a0
    8d58:	       move.l 18(a0),96(sp)
    8d5e:	       move.l 1e87e <DOSBase>,d0
    8d64:	       movea.l d0,a6
    8d66:	       move.l 100(sp),d1
    8d6a:	       move.l 96(sp),d2
    8d6e:	       jsr -312(a6)
    8d72:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8d76:	       move.l 112(sp),88(sp)
    8d7c:	       movea.l 1e1e8 <nowStatus>,a0
    8d82:	       move.l 22(a0),84(sp)
    8d88:	       move.l 1e87e <DOSBase>,d0
    8d8e:	       movea.l d0,a6
    8d90:	       move.l 88(sp),d1
    8d94:	       move.l 84(sp),d2
    8d98:	       jsr -312(a6)
    8d9c:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8da0:	       move.l 112(sp),76(sp)
    8da6:	       movea.l 1e1e8 <nowStatus>,a0
    8dac:	       move.l 26(a0),72(sp)
    8db2:	       move.l 1e87e <DOSBase>,d0
    8db8:	       movea.l d0,a6
    8dba:	       move.l 76(sp),d1
    8dbe:	       move.l 72(sp),d2
    8dc2:	       jsr -312(a6)
    8dc6:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8dca:	       move.l 112(sp),64(sp)
    8dd0:	       movea.l 1e1e8 <nowStatus>,a0
    8dd6:	       move.l 30(a0),60(sp)
    8ddc:	       move.l 1e87e <DOSBase>,d0
    8de2:	       movea.l d0,a6
    8de4:	       move.l 64(sp),d1
    8de8:	       move.l 60(sp),d2
    8dec:	       jsr -312(a6)
    8df0:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8df4:	       move.l 112(sp),52(sp)
    8dfa:	       movea.l 1e1e8 <nowStatus>,a0
    8e00:	       move.l 34(a0),48(sp)
    8e06:	       move.l 1e87e <DOSBase>,d0
    8e0c:	       movea.l d0,a6
    8e0e:	       move.l 52(sp),d1
    8e12:	       move.l 48(sp),d2
    8e16:	       jsr -312(a6)
    8e1a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8e1e:	       move.l 112(sp),40(sp)
    8e24:	       movea.l 1e1e8 <nowStatus>,a0
    8e2a:	       move.l 38(a0),36(sp)
    8e30:	       move.l 1e87e <DOSBase>,d0
    8e36:	       movea.l d0,a6
    8e38:	       move.l 40(sp),d1
    8e3c:	       move.l 36(sp),d2
    8e40:	       jsr -312(a6)
    8e44:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8e48:	   ,-- bra.s 8e8c <saveStatusBars+0x1be>
		FPutC (fp,1);
    8e4a:	,--|-> move.l 112(sp),16(sp)
    8e50:	|  |   moveq #1,d0
    8e52:	|  |   move.l d0,12(sp)
    8e56:	|  |   move.l 1e87e <DOSBase>,d0
    8e5c:	|  |   movea.l d0,a6
    8e5e:	|  |   move.l 16(sp),d1
    8e62:	|  |   move.l 12(sp),d2
    8e66:	|  |   jsr -312(a6)
    8e6a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8e6e:	|  |   movea.l 104(sp),a0
    8e72:	|  |   move.l (a0),d0
    8e74:	|  |   move.l 112(sp),-(sp)
    8e78:	|  |   move.l d0,-(sp)
    8e7a:	|  |   jsr bd8 <writeString>
    8e80:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8e82:	|  |   movea.l 104(sp),a0
    8e86:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8e8c:	|  '-> tst.l 104(sp)
    8e90:	'----- bne.s 8e4a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8e92:	       move.l 112(sp),28(sp)
    8e98:	       clr.l 24(sp)
    8e9c:	       move.l 1e87e <DOSBase>,d0
    8ea2:	       movea.l d0,a6
    8ea4:	       move.l 28(sp),d1
    8ea8:	       move.l 24(sp),d2
    8eac:	       jsr -312(a6)
    8eb0:	       move.l d0,20(sp)
}
    8eb4:	       nop
    8eb6:	       move.l (sp)+,d2
    8eb8:	       movea.l (sp)+,a6
    8eba:	       lea 100(sp),sp
    8ebe:	       rts

00008ec0 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8ec0:	movea.l 1e1e8 <nowStatus>,a0
    8ec6:	move.l 4(sp),6(a0)
}
    8ecc:	nop
    8ece:	rts

00008ed0 <setStatusBar>:

void setStatusBar (char * txt) {
    8ed0:	    subq.l #4,sp
    8ed2:	    move.l a6,-(sp)
    8ed4:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8ed6:	    movea.l 1e1e8 <nowStatus>,a0
    8edc:	    move.l (a0),d0
    8ede:	,-- beq.s 8f12 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8ee0:	|   movea.l 1e1e8 <nowStatus>,a0
    8ee6:	|   movea.l (a0),a0
    8ee8:	|   move.l (a0),8(sp)
    8eec:	|   move.l 1e876 <SysBase>,d0
    8ef2:	|   movea.l d0,a6
    8ef4:	|   movea.l 8(sp),a1
    8ef8:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8efc:	|   movea.l 1e1e8 <nowStatus>,a0
    8f02:	|   movea.l (a0),a2
    8f04:	|   move.l 16(sp),-(sp)
    8f08:	|   jsr b8 <copyString>
    8f0e:	|   addq.l #4,sp
    8f10:	|   move.l d0,(a2)
	}
}
    8f12:	'-> nop
    8f14:	    movea.l (sp)+,a2
    8f16:	    movea.l (sp)+,a6
    8f18:	    addq.l #4,sp
    8f1a:	    rts

00008f1c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8f1c:	       movea.l 1e1e8 <nowStatus>,a0
    8f22:	       move.l (a0),d0
    8f24:	,----- beq.s 8f32 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8f26:	|      movea.l 1e1e8 <nowStatus>,a0
    8f2c:	|      movea.l (a0),a0
    8f2e:	|      move.l (a0),d0
    8f30:	|  ,-- bra.s 8f38 <statusBarText+0x1c>
	} else {
		return "";
    8f32:	'--|-> move.l #105801,d0
	}
    8f38:	   '-> rts

00008f3a <addZBufferLayer>:

#define EMULATOR

struct zBufferData *zBuffer;

void addZBufferLayer (int x, int y, int width, int height, int yz) {
    8f3a:	lea -32(sp),sp
    8f3e:	movem.l d2-d3/a6,-(sp)

	struct zBufferData *createthis = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8f42:	moveq #28,d0
    8f44:	move.l d0,40(sp)
    8f48:	clr.l 36(sp)
    8f4c:	move.l 1e876 <SysBase>,d0
    8f52:	movea.l d0,a6
    8f54:	move.l 40(sp),d0
    8f58:	move.l 36(sp),d1
    8f5c:	jsr -684(a6)
    8f60:	move.l d0,32(sp)
    8f64:	move.l 32(sp),d0
    8f68:	move.l d0,28(sp)
	createthis->width = sceneWidth;
    8f6c:	move.l 1e912 <sceneWidth>,d0
    8f72:	movea.l 28(sp),a0
    8f76:	move.l d0,(a0)
	createthis->height = sceneHeight;
    8f78:	move.l 1e916 <sceneHeight>,d0
    8f7e:	movea.l 28(sp),a0
    8f82:	move.l d0,4(a0)
	createthis->topx = 0;
    8f86:	movea.l 28(sp),a0
    8f8a:	clr.l 8(a0)
	createthis->topy = 0;
    8f8e:	movea.l 28(sp),a0
    8f92:	clr.l 12(a0)
	createthis->yz = yz;
    8f96:	movea.l 28(sp),a0
    8f9a:	move.l 64(sp),16(a0)
	createthis->nextPanel = zBuffer;
    8fa0:	move.l 1e8d6 <zBuffer>,d0
    8fa6:	movea.l 28(sp),a0
    8faa:	move.l d0,24(a0)

	zBuffer = createthis;
    8fae:	move.l 28(sp),1e8d6 <zBuffer>

	UWORD size = sceneWidth * sceneHeight / 8;	
    8fb6:	move.l 1e912 <sceneWidth>,d0
    8fbc:	move.l 1e916 <sceneHeight>,d1
    8fc2:	move.l d1,-(sp)
    8fc4:	move.l d0,-(sp)
    8fc6:	jsr 18e8a <__mulsi3>
    8fcc:	addq.l #8,sp
    8fce:	lsr.l #3,d0
    8fd0:	move.w d0,26(sp)
	createthis->bitplane = AllocVec( size, MEMF_CHIP);
    8fd4:	moveq #0,d0
    8fd6:	move.w 26(sp),d0
    8fda:	move.l d0,22(sp)
    8fde:	moveq #2,d0
    8fe0:	move.l d0,18(sp)
    8fe4:	move.l 1e876 <SysBase>,d0
    8fea:	movea.l d0,a6
    8fec:	move.l 22(sp),d0
    8ff0:	move.l 18(sp),d1
    8ff4:	jsr -684(a6)
    8ff8:	move.l d0,14(sp)
    8ffc:	move.l 14(sp),d0
    9000:	movea.l 28(sp),a0
    9004:	move.l d0,20(a0)
	CstCreateZBufferLayer (createthis->bitplane, x, y, width, height);
    9008:	move.l 60(sp),d0
    900c:	moveq #0,d3
    900e:	move.w d0,d3
    9010:	move.l 56(sp),d0
    9014:	moveq #0,d2
    9016:	move.w d0,d2
    9018:	move.l 52(sp),d0
    901c:	moveq #0,d1
    901e:	move.w d0,d1
    9020:	move.l 48(sp),d0
    9024:	move.w d0,d0
    9026:	andi.l #65535,d0
    902c:	movea.l 28(sp),a0
    9030:	movea.l 20(a0),a0
    9034:	move.l d3,-(sp)
    9036:	move.l d2,-(sp)
    9038:	move.l d1,-(sp)
    903a:	move.l d0,-(sp)
    903c:	move.l a0,-(sp)
    903e:	jsr 12ec <CstCreateZBufferLayer>
    9044:	lea 20(sp),sp

}
    9048:	nop
    904a:	movem.l (sp)+,d2-d3/a6
    904e:	lea 32(sp),sp
    9052:	rts

00009054 <killZBuffer>:

void killZBuffer () {
    9054:	       lea -16(sp),sp
    9058:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    905a:	       move.l 1e8d6 <zBuffer>,16(sp)

	while(zbuffercursor) {
    9062:	   ,-- bra.s 90a4 <killZBuffer+0x50>
		struct zBufferData *deleteme = zbuffercursor;
    9064:	,--|-> move.l 16(sp),12(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    906a:	|  |   movea.l 16(sp),a0
    906e:	|  |   move.l 24(a0),16(sp)
		FreeVec(deleteme->bitplane);
    9074:	|  |   movea.l 12(sp),a0
    9078:	|  |   move.l 20(a0),8(sp)
    907e:	|  |   move.l 1e876 <SysBase>,d0
    9084:	|  |   movea.l d0,a6
    9086:	|  |   movea.l 8(sp),a1
    908a:	|  |   jsr -690(a6)
		FreeVec(deleteme);
    908e:	|  |   move.l 12(sp),4(sp)
    9094:	|  |   move.l 1e876 <SysBase>,d0
    909a:	|  |   movea.l d0,a6
    909c:	|  |   movea.l 4(sp),a1
    90a0:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    90a4:	|  '-> tst.l 16(sp)
    90a8:	'----- bne.s 9064 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    90aa:	       clr.l 1e8d6 <zBuffer>
}
    90b0:	       nop
    90b2:	       movea.l (sp)+,a6
    90b4:	       lea 16(sp),sp
    90b8:	       rts

000090ba <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    90ba:	                lea -304(sp),sp
    90be:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    90c2:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    90c6:	                jsr 9054 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    90cc:	                move.l 328(sp),d0
    90d0:	                move.l d0,-(sp)
    90d2:	                jsr 7f44 <openFileFromNum>
    90d8:	                addq.l #4,sp
    90da:	                tst.l d0
    90dc:	            ,-- bne.s 90e4 <setZBuffer+0x2a>
    90de:	            |   clr.w d0
    90e0:	,-----------|-- bra.w 93a2 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    90e4:	|           '-> move.l 1e85c <bigDataFile>,310(sp)
    90ec:	|               move.l 1e87e <DOSBase>,d0
    90f2:	|               movea.l d0,a6
    90f4:	|               move.l 310(sp),d1
    90f8:	|               jsr -306(a6)
    90fc:	|               move.l d0,306(sp)
    9100:	|               move.l 306(sp),d0
    9104:	|               moveq #97,d1
    9106:	|               cmp.l d0,d1
    9108:	|        ,----- bne.s 917c <setZBuffer+0xc2>
    910a:	|        |      move.l 1e85c <bigDataFile>,302(sp)
    9112:	|        |      move.l 1e87e <DOSBase>,d0
    9118:	|        |      movea.l d0,a6
    911a:	|        |      move.l 302(sp),d1
    911e:	|        |      jsr -306(a6)
    9122:	|        |      move.l d0,298(sp)
    9126:	|        |      move.l 298(sp),d0
    912a:	|        |      moveq #115,d1
    912c:	|        |      cmp.l d0,d1
    912e:	|        +----- bne.s 917c <setZBuffer+0xc2>
    9130:	|        |      move.l 1e85c <bigDataFile>,294(sp)
    9138:	|        |      move.l 1e87e <DOSBase>,d0
    913e:	|        |      movea.l d0,a6
    9140:	|        |      move.l 294(sp),d1
    9144:	|        |      jsr -306(a6)
    9148:	|        |      move.l d0,290(sp)
    914c:	|        |      move.l 290(sp),d0
    9150:	|        |      moveq #122,d1
    9152:	|        |      cmp.l d0,d1
    9154:	|        +----- bne.s 917c <setZBuffer+0xc2>
    9156:	|        |      move.l 1e85c <bigDataFile>,286(sp)
    915e:	|        |      move.l 1e87e <DOSBase>,d0
    9164:	|        |      movea.l d0,a6
    9166:	|        |      move.l 286(sp),d1
    916a:	|        |      jsr -306(a6)
    916e:	|        |      move.l d0,282(sp)
    9172:	|        |      move.l 282(sp),d0
    9176:	|        |      moveq #98,d1
    9178:	|        |      cmp.l d0,d1
    917a:	|        |  ,-- beq.s 9190 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    917c:	|        '--|-> pea 1a3d7 <PutChar+0x1437>
    9182:	|           |   jsr 184fe <KPrintF>
    9188:	|           |   addq.l #4,sp
		 return FALSE;
    918a:	|           |   clr.w d0
    918c:	+-----------|-- bra.w 93a2 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    9190:	|           '-> move.l 1e85c <bigDataFile>,278(sp)
    9198:	|               move.l 1e87e <DOSBase>,d0
    919e:	|               movea.l d0,a6
    91a0:	|               move.l 278(sp),d1
    91a4:	|               jsr -306(a6)
    91a8:	|               move.l d0,274(sp)
    91ac:	|               move.l 274(sp),d0
    91b0:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    91b4:	|               moveq #28,d0
    91b6:	|               move.l d0,270(sp)
    91ba:	|               clr.l 266(sp)
    91be:	|               move.l 1e876 <SysBase>,d0
    91c4:	|               movea.l d0,a6
    91c6:	|               move.l 270(sp),d0
    91ca:	|               move.l 266(sp),d1
    91ce:	|               jsr -684(a6)
    91d2:	|               move.l d0,262(sp)
    91d6:	|               move.l 262(sp),d0
    91da:	|               move.l d0,1e8d6 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    91e0:	|               move.l 1e8d6 <zBuffer>,318(sp)

	while(numelements--)
    91e8:	|     ,-------- bra.w 9388 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    91ec:	|  ,--|-------> move.l 1e85c <bigDataFile>,d0
    91f2:	|  |  |         move.l d0,-(sp)
    91f4:	|  |  |         jsr 6bc <get2bytes>
    91fa:	|  |  |         addq.l #4,sp
    91fc:	|  |  |         movea.l 318(sp),a0
    9200:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    9202:	|  |  |         move.l 1e85c <bigDataFile>,d0
    9208:	|  |  |         move.l d0,-(sp)
    920a:	|  |  |         jsr 6bc <get2bytes>
    9210:	|  |  |         addq.l #4,sp
    9212:	|  |  |         movea.l 318(sp),a0
    9216:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    921a:	|  |  |         move.l 1e85c <bigDataFile>,d0
    9220:	|  |  |         move.l d0,-(sp)
    9222:	|  |  |         jsr 6bc <get2bytes>
    9228:	|  |  |         addq.l #4,sp
    922a:	|  |  |         movea.l 318(sp),a0
    922e:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    9232:	|  |  |         move.l 1e85c <bigDataFile>,d0
    9238:	|  |  |         move.l d0,-(sp)
    923a:	|  |  |         jsr 6bc <get2bytes>
    9240:	|  |  |         addq.l #4,sp
    9242:	|  |  |         movea.l 318(sp),a0
    9246:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    924a:	|  |  |         move.l 1e85c <bigDataFile>,d0
    9250:	|  |  |         move.l d0,-(sp)
    9252:	|  |  |         jsr 6bc <get2bytes>
    9258:	|  |  |         addq.l #4,sp
    925a:	|  |  |         movea.l 318(sp),a0
    925e:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    9262:	|  |  |         movea.l 318(sp),a0
    9266:	|  |  |         move.l (a0),d0
    9268:	|  |  |         movea.l 318(sp),a0
    926c:	|  |  |         move.l 4(a0),d1
    9270:	|  |  |         move.l d1,-(sp)
    9272:	|  |  |         move.l d0,-(sp)
    9274:	|  |  |         jsr 18e8a <__mulsi3>
    927a:	|  |  |         addq.l #8,sp
    927c:	|  |  |         tst.l d0
    927e:	|  |  |     ,-- bge.s 9282 <setZBuffer+0x1c8>
    9280:	|  |  |     |   addq.l #7,d0
    9282:	|  |  |     '-> asr.l #3,d0
    9284:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    9288:	|  |  |         moveq #0,d0
    928a:	|  |  |         move.w 260(sp),d0
    928e:	|  |  |         move.l d0,256(sp)
    9292:	|  |  |         moveq #2,d1
    9294:	|  |  |         move.l d1,252(sp)
    9298:	|  |  |         move.l 1e876 <SysBase>,d0
    929e:	|  |  |         movea.l d0,a6
    92a0:	|  |  |         move.l 256(sp),d0
    92a4:	|  |  |         move.l 252(sp),d1
    92a8:	|  |  |         jsr -684(a6)
    92ac:	|  |  |         move.l d0,248(sp)
    92b0:	|  |  |         move.l 248(sp),d0
    92b4:	|  |  |         movea.l 318(sp),a0
    92b8:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    92bc:	|  |  |         move.l 1e85c <bigDataFile>,244(sp)
    92c4:	|  |  |         movea.l 318(sp),a0
    92c8:	|  |  |         move.l 20(a0),240(sp)
    92ce:	|  |  |         moveq #1,d0
    92d0:	|  |  |         move.l d0,236(sp)
    92d4:	|  |  |         moveq #0,d0
    92d6:	|  |  |         move.w 260(sp),d0
    92da:	|  |  |         move.l d0,232(sp)
    92de:	|  |  |         move.l 1e87e <DOSBase>,d0
    92e4:	|  |  |         movea.l d0,a6
    92e6:	|  |  |         move.l 244(sp),d1
    92ea:	|  |  |         move.l 240(sp),d2
    92ee:	|  |  |         move.l 236(sp),d3
    92f2:	|  |  |         move.l 232(sp),d4
    92f6:	|  |  |         jsr -324(a6)
    92fa:	|  |  |         move.l d0,228(sp)
    92fe:	|  |  |         move.l 228(sp),d0
    9302:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    9306:	|  |  |         tst.w 322(sp)
    930a:	|  |  |  ,----- beq.s 9346 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    930c:	|  |  |  |      moveq #28,d1
    930e:	|  |  |  |      move.l d1,222(sp)
    9312:	|  |  |  |      clr.l 218(sp)
    9316:	|  |  |  |      move.l 1e876 <SysBase>,d0
    931c:	|  |  |  |      movea.l d0,a6
    931e:	|  |  |  |      move.l 222(sp),d0
    9322:	|  |  |  |      move.l 218(sp),d1
    9326:	|  |  |  |      jsr -684(a6)
    932a:	|  |  |  |      move.l d0,214(sp)
    932e:	|  |  |  |      move.l 214(sp),d0
    9332:	|  |  |  |      movea.l 318(sp),a0
    9336:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    933a:	|  |  |  |      movea.l 318(sp),a0
    933e:	|  |  |  |      move.l 24(a0),318(sp)
    9344:	|  |  |  |  ,-- bra.s 934e <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    9346:	|  |  |  '--|-> movea.l 318(sp),a0
    934a:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    934e:	|  |  |     '-> movea.l 318(sp),a0
    9352:	|  |  |         move.l 4(a0),d0
    9356:	|  |  |         move.l d0,d0
    9358:	|  |  |         movea.w d0,a1
    935a:	|  |  |         movea.l 318(sp),a0
    935e:	|  |  |         move.l (a0),d0
    9360:	|  |  |         move.l d0,d0
    9362:	|  |  |         movea.w d0,a0
    9364:	|  |  |         movea.l 318(sp),a2
    9368:	|  |  |         move.l 20(a2),d0
    936c:	|  |  |         clr.l -(sp)
    936e:	|  |  |         pea 1 <_start+0x1>
    9372:	|  |  |         move.l a1,-(sp)
    9374:	|  |  |         move.l a0,-(sp)
    9376:	|  |  |         pea 1a3eb <PutChar+0x144b>
    937c:	|  |  |         move.l d0,-(sp)
    937e:	|  |  |         jsr 185e6 <debug_register_bitmap>
    9384:	|  |  |         lea 24(sp),sp
	while(numelements--)
    9388:	|  |  '-------> move.w 322(sp),d0
    938c:	|  |            move.w d0,d1
    938e:	|  |            subq.w #1,d1
    9390:	|  |            move.w d1,322(sp)
    9394:	|  |            tst.w d0
    9396:	|  '----------- bne.w 91ec <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    939a:	|               jsr 7e3c <finishAccess>
	
	return TRUE;
    93a0:	|               moveq #1,d0
}
    93a2:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    93a6:	                lea 304(sp),sp
    93aa:	                rts

000093ac <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    93ac:	          lea -32(sp),sp
    93b0:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    93b2:	          move.l 40(sp),d0
    93b6:	          addq.l #8,d0
    93b8:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    93bc:	          clr.l 32(sp)
    93c0:	   ,----- bra.s 9406 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    93c2:	,--|----> movea.l 24(sp),a0
    93c6:	|  |      movea.l 8(a0),a0
    93ca:	|  |      move.l 32(sp),d1
    93ce:	|  |      move.l d1,d0
    93d0:	|  |      lsl.l #3,d0
    93d2:	|  |      sub.l d1,d0
    93d4:	|  |      add.l d0,d0
    93d6:	|  |      add.l d0,d0
    93d8:	|  |      adda.l d0,a0
    93da:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    93de:	|  |      movea.l 8(sp),a0
    93e2:	|  |      move.l 24(a0),d0
    93e6:	|  |  ,-- beq.s 9402 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    93e8:	|  |  |   movea.l 8(sp),a0
    93ec:	|  |  |   move.l 24(a0),4(sp)
    93f2:	|  |  |   move.l 1e876 <SysBase>,d0
    93f8:	|  |  |   movea.l d0,a6
    93fa:	|  |  |   movea.l 4(sp),a1
    93fe:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    9402:	|  |  '-> addq.l #1,32(sp)
    9406:	|  '----> movea.l 24(sp),a0
    940a:	|         move.l (a0),d0
    940c:	|         cmp.l 32(sp),d0
    9410:	'-------- bgt.s 93c2 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    9412:	          movea.l 24(sp),a0
    9416:	          move.l 8(a0),20(sp)
    941c:	          move.l 1e876 <SysBase>,d0
    9422:	          movea.l d0,a6
    9424:	          movea.l 20(sp),a1
    9428:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    942c:	          move.l 1e98e <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    9434:	      ,-- bra.s 9440 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    9436:	   ,--|-> movea.l 28(sp),a0
    943a:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    9440:	   |  '-> movea.l 28(sp),a0
    9444:	   |      movea.l 22(a0),a0
    9448:	   |      move.l (a0),d1
    944a:	   |      movea.l 40(sp),a0
    944e:	   |      move.l (a0),d0
    9450:	   |      cmp.l d1,d0
    9452:	   |  ,-- beq.s 945a <forgetSpriteBank+0xae>
    9454:	   |  |   tst.l 28(sp)
    9458:	   '--|-- bne.s 9436 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    945a:	      '-> tst.l 28(sp)
    945e:	   ,----- beq.s 9488 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    9460:	   |      movea.l 40(sp),a0
    9464:	   |      move.l 22(a0),d0
    9468:	   |      movea.l 28(sp),a0
    946c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    9470:	   |      move.l 40(sp),12(sp)
    9476:	   |      move.l 1e876 <SysBase>,d0
    947c:	   |      movea.l d0,a6
    947e:	   |      movea.l 12(sp),a1
    9482:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    9486:	   |  ,-- bra.s 94ae <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    9488:	   '--|-> movea.l 1e98e <allLoadedBanks>,a0
    948e:	      |   move.l 22(a0),d0
    9492:	      |   move.l d0,1e98e <allLoadedBanks>
		FreeVec( forgetme);
    9498:	      |   move.l 40(sp),16(sp)
    949e:	      |   move.l 1e876 <SysBase>,d0
    94a4:	      |   movea.l d0,a6
    94a6:	      |   movea.l 16(sp),a1
    94aa:	      |   jsr -690(a6)
}
    94ae:	      '-> nop
    94b0:	          movea.l (sp)+,a6
    94b2:	          lea 32(sp),sp
    94b6:	          rts

000094b8 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    94b8:	                      lea -84(sp),sp
    94bc:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    94c0:	                      pea 1a3f7 <PutChar+0x1457>
    94c6:	                      jsr 184fe <KPrintF>
    94cc:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    94ce:	                      clr.l 94(sp)
    94d2:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    94d6:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    94da:	                      move.l 108(sp),-(sp)
    94de:	                      jsr 7f44 <openFileFromNum>
    94e4:	                      addq.l #4,sp
    94e6:	                      tst.l d0
    94e8:	                  ,-- bne.s 94fe <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    94ea:	                  |   pea 1a411 <PutChar+0x1471>
    94f0:	                  |   jsr 184fe <KPrintF>
    94f6:	                  |   addq.l #4,sp
		return FALSE;
    94f8:	                  |   clr.w d0
    94fa:	,-----------------|-- bra.w 98f2 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    94fe:	|                 '-> move.l 1e85c <bigDataFile>,d0
    9504:	|                     move.l d0,-(sp)
    9506:	|                     jsr 6bc <get2bytes>
    950c:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    950e:	|                     move.l 1e85c <bigDataFile>,82(sp)
    9516:	|                     move.l 1e87e <DOSBase>,d0
    951c:	|                     movea.l d0,a6
    951e:	|                     move.l 82(sp),d1
    9522:	|                     jsr -306(a6)
    9526:	|                     move.l d0,78(sp)
    952a:	|                     move.l 78(sp),d0
    952e:	|                     movea.l 112(sp),a0
    9532:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    9536:	|                     move.l 1e85c <bigDataFile>,d0
    953c:	|                     move.l d0,-(sp)
    953e:	|                     jsr 6bc <get2bytes>
    9544:	|                     addq.l #4,sp
    9546:	|                     move.l d0,74(sp)

	if (total <= 0) {
    954a:	|                 ,-- bgt.s 9560 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    954c:	|                 |   pea 1a43f <PutChar+0x149f>
    9552:	|                 |   jsr 184fe <KPrintF>
    9558:	|                 |   addq.l #4,sp
		return FALSE;
    955a:	|                 |   clr.w d0
    955c:	+-----------------|-- bra.w 98f2 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    9560:	|                 '-> movea.l 112(sp),a0
    9564:	|                     move.l 4(a0),d0
    9568:	|                     moveq #3,d1
    956a:	|                     cmp.l d0,d1
    956c:	|                 ,-- bne.s 957a <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    956e:	|                 |   movea.l 112(sp),a0
    9572:	|                 |   move.w #1,12(a0)
    9578:	|              ,--|-- bra.s 959c <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    957a:	|              |  '-> movea.l 112(sp),a0
    957e:	|              |      move.l 4(a0),d0
    9582:	|              |      moveq #3,d1
    9584:	|              |      cmp.l d0,d1
    9586:	|              +----- bge.s 959c <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    9588:	|              |      pea 1a47f <PutChar+0x14df>
    958e:	|              |      jsr 184fe <KPrintF>
    9594:	|              |      addq.l #4,sp
		return FALSE;
    9596:	|              |      clr.w d0
    9598:	+--------------|----- bra.w 98f2 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    959c:	|              '----> movea.l 112(sp),a0
    95a0:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    95a4:	|                     move.l 74(sp),d1
    95a8:	|                     move.l d1,d0
    95aa:	|                     lsl.l #3,d0
    95ac:	|                     sub.l d1,d0
    95ae:	|                     add.l d0,d0
    95b0:	|                     add.l d0,d0
    95b2:	|                     move.l d0,70(sp)
    95b6:	|                     clr.l 66(sp)
    95ba:	|                     move.l 1e876 <SysBase>,d0
    95c0:	|                     movea.l d0,a6
    95c2:	|                     move.l 70(sp),d0
    95c6:	|                     move.l 66(sp),d1
    95ca:	|                     jsr -684(a6)
    95ce:	|                     move.l d0,62(sp)
    95d2:	|                     move.l 62(sp),d0
    95d6:	|                     movea.l 112(sp),a0
    95da:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    95de:	|                     movea.l 112(sp),a0
    95e2:	|                     move.l 8(a0),d0
    95e6:	|                 ,-- bne.s 95ee <loadSpriteBank+0x136>
    95e8:	|                 |   clr.w d0
    95ea:	+-----------------|-- bra.w 98f2 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    95ee:	|                 '-> moveq #1,d0
    95f0:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    95f4:	|                     clr.l 100(sp)
    95f8:	|     ,-------------- bra.w 98d0 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    95fc:	|  ,--|-------------> move.l 1e85c <bigDataFile>,d0
    9602:	|  |  |               move.l d0,-(sp)
    9604:	|  |  |               jsr 6bc <get2bytes>
    960a:	|  |  |               addq.l #4,sp
    960c:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    9610:	|  |  |               movea.l 112(sp),a0
    9614:	|  |  |               movea.l 8(a0),a0
    9618:	|  |  |               move.l 100(sp),d1
    961c:	|  |  |               move.l d1,d0
    961e:	|  |  |               lsl.l #3,d0
    9620:	|  |  |               sub.l d1,d0
    9622:	|  |  |               add.l d0,d0
    9624:	|  |  |               add.l d0,d0
    9626:	|  |  |               adda.l d0,a0
    9628:	|  |  |               moveq #0,d0
    962a:	|  |  |               move.w 60(sp),d0
    962e:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    9630:	|  |  |               movea.l 1e85c <bigDataFile>,a1
    9636:	|  |  |               movea.l 112(sp),a0
    963a:	|  |  |               movea.l 8(a0),a0
    963e:	|  |  |               move.l 100(sp),d1
    9642:	|  |  |               move.l d1,d0
    9644:	|  |  |               lsl.l #3,d0
    9646:	|  |  |               sub.l d1,d0
    9648:	|  |  |               add.l d0,d0
    964a:	|  |  |               add.l d0,d0
    964c:	|  |  |               lea (0,a0,d0.l),a2
    9650:	|  |  |               move.l a1,-(sp)
    9652:	|  |  |               jsr 6bc <get2bytes>
    9658:	|  |  |               addq.l #4,sp
    965a:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    965e:	|  |  |               movea.l 1e85c <bigDataFile>,a1
    9664:	|  |  |               movea.l 112(sp),a0
    9668:	|  |  |               movea.l 8(a0),a0
    966c:	|  |  |               move.l 100(sp),d1
    9670:	|  |  |               move.l d1,d0
    9672:	|  |  |               lsl.l #3,d0
    9674:	|  |  |               sub.l d1,d0
    9676:	|  |  |               add.l d0,d0
    9678:	|  |  |               add.l d0,d0
    967a:	|  |  |               lea (0,a0,d0.l),a2
    967e:	|  |  |               move.l a1,-(sp)
    9680:	|  |  |               jsr 6bc <get2bytes>
    9686:	|  |  |               addq.l #4,sp
    9688:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    968c:	|  |  |               movea.l 1e85c <bigDataFile>,a1
    9692:	|  |  |               movea.l 112(sp),a0
    9696:	|  |  |               movea.l 8(a0),a0
    969a:	|  |  |               move.l 100(sp),d1
    969e:	|  |  |               move.l d1,d0
    96a0:	|  |  |               lsl.l #3,d0
    96a2:	|  |  |               sub.l d1,d0
    96a4:	|  |  |               add.l d0,d0
    96a6:	|  |  |               add.l d0,d0
    96a8:	|  |  |               lea (0,a0,d0.l),a2
    96ac:	|  |  |               move.l a1,-(sp)
    96ae:	|  |  |               jsr 6bc <get2bytes>
    96b4:	|  |  |               addq.l #4,sp
    96b6:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    96ba:	|  |  |               movea.l 112(sp),a0
    96be:	|  |  |               move.l 4(a0),d0
    96c2:	|  |  |               moveq #3,d1
    96c4:	|  |  |               cmp.l d0,d1
    96c6:	|  |  |     ,-------- beq.w 9762 <loadSpriteBank+0x2aa>
    96ca:	|  |  |     |         moveq #3,d1
    96cc:	|  |  |     |         cmp.l d0,d1
    96ce:	|  |  |  ,--|-------- blt.w 9808 <loadSpriteBank+0x350>
    96d2:	|  |  |  |  |         moveq #1,d1
    96d4:	|  |  |  |  |         cmp.l d0,d1
    96d6:	|  |  |  |  |     ,-- beq.s 96e2 <loadSpriteBank+0x22a>
    96d8:	|  |  |  |  |     |   moveq #2,d1
    96da:	|  |  |  |  |     |   cmp.l d0,d1
    96dc:	|  |  |  |  |  ,--|-- beq.s 970e <loadSpriteBank+0x256>
    96de:	|  |  |  +--|--|--|-- bra.w 9808 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    96e2:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    96e6:	|  |  |  |  |  |      movea.l 8(a0),a0
    96ea:	|  |  |  |  |  |      move.l 100(sp),d1
    96ee:	|  |  |  |  |  |      move.l d1,d0
    96f0:	|  |  |  |  |  |      lsl.l #3,d0
    96f2:	|  |  |  |  |  |      sub.l d1,d0
    96f4:	|  |  |  |  |  |      add.l d0,d0
    96f6:	|  |  |  |  |  |      add.l d0,d0
    96f8:	|  |  |  |  |  |      adda.l d0,a0
    96fa:	|  |  |  |  |  |      move.l 4(a0),d0
    96fe:	|  |  |  |  |  |      addq.l #2,d0
    9700:	|  |  |  |  |  |      move.l d0,d0
    9702:	|  |  |  |  |  |      add.w d0,d0
    9704:	|  |  |  |  |  |      add.w d0,d0
    9706:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    970a:	|  |  |  +--|--|----- bra.w 9808 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    970e:	|  |  |  |  |  '----> movea.l 112(sp),a0
    9712:	|  |  |  |  |         movea.l 8(a0),a0
    9716:	|  |  |  |  |         move.l 100(sp),d1
    971a:	|  |  |  |  |         move.l d1,d0
    971c:	|  |  |  |  |         lsl.l #3,d0
    971e:	|  |  |  |  |         sub.l d1,d0
    9720:	|  |  |  |  |         add.l d0,d0
    9722:	|  |  |  |  |         add.l d0,d0
    9724:	|  |  |  |  |         adda.l d0,a0
    9726:	|  |  |  |  |         move.l (a0),d0
    9728:	|  |  |  |  |     ,-- bpl.s 972c <loadSpriteBank+0x274>
    972a:	|  |  |  |  |     |   addq.l #7,d0
    972c:	|  |  |  |  |     '-> asr.l #3,d0
    972e:	|  |  |  |  |         move.l d0,d2
    9730:	|  |  |  |  |         movea.l 112(sp),a0
    9734:	|  |  |  |  |         movea.l 8(a0),a0
    9738:	|  |  |  |  |         move.l 100(sp),d1
    973c:	|  |  |  |  |         move.l d1,d0
    973e:	|  |  |  |  |         lsl.l #3,d0
    9740:	|  |  |  |  |         sub.l d1,d0
    9742:	|  |  |  |  |         add.l d0,d0
    9744:	|  |  |  |  |         add.l d0,d0
    9746:	|  |  |  |  |         adda.l d0,a0
    9748:	|  |  |  |  |         move.l 4(a0),d0
    974c:	|  |  |  |  |         move.l d0,d0
    974e:	|  |  |  |  |         move.w d2,d1
    9750:	|  |  |  |  |         muls.w d0,d1
    9752:	|  |  |  |  |         move.w d1,d0
    9754:	|  |  |  |  |         add.w d0,d0
    9756:	|  |  |  |  |         add.w d1,d0
    9758:	|  |  |  |  |         add.w d0,d0
    975a:	|  |  |  |  |         move.w d0,98(sp)
				break;
    975e:	|  |  |  +--|-------- bra.w 9808 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    9762:	|  |  |  |  '-------> movea.l 112(sp),a0
    9766:	|  |  |  |            movea.l 8(a0),a0
    976a:	|  |  |  |            move.l 100(sp),d1
    976e:	|  |  |  |            move.l d1,d0
    9770:	|  |  |  |            lsl.l #3,d0
    9772:	|  |  |  |            sub.l d1,d0
    9774:	|  |  |  |            add.l d0,d0
    9776:	|  |  |  |            add.l d0,d0
    9778:	|  |  |  |            adda.l d0,a0
    977a:	|  |  |  |            move.l (a0),d0
    977c:	|  |  |  |            andi.l #-2147483633,d0
    9782:	|  |  |  |        ,-- bpl.s 978c <loadSpriteBank+0x2d4>
    9784:	|  |  |  |        |   subq.l #1,d0
    9786:	|  |  |  |        |   moveq #-16,d1
    9788:	|  |  |  |        |   or.l d1,d0
    978a:	|  |  |  |        |   addq.l #1,d0
    978c:	|  |  |  |        '-> tst.l d0
    978e:	|  |  |  |     ,----- ble.s 9794 <loadSpriteBank+0x2dc>
    9790:	|  |  |  |     |      moveq #2,d0
    9792:	|  |  |  |     |  ,-- bra.s 9796 <loadSpriteBank+0x2de>
    9794:	|  |  |  |     '--|-> clr.w d0
    9796:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    979a:	|  |  |  |            movea.l 112(sp),a0
    979e:	|  |  |  |            movea.l 8(a0),a0
    97a2:	|  |  |  |            move.l 100(sp),d1
    97a6:	|  |  |  |            move.l d1,d0
    97a8:	|  |  |  |            lsl.l #3,d0
    97aa:	|  |  |  |            sub.l d1,d0
    97ac:	|  |  |  |            add.l d0,d0
    97ae:	|  |  |  |            add.l d0,d0
    97b0:	|  |  |  |            adda.l d0,a0
    97b2:	|  |  |  |            move.l (a0),d0
    97b4:	|  |  |  |            movea.l d0,a0
    97b6:	|  |  |  |            cmpa.w #0,a0
    97ba:	|  |  |  |        ,-- bge.s 97c0 <loadSpriteBank+0x308>
    97bc:	|  |  |  |        |   lea 15(a0),a0
    97c0:	|  |  |  |        '-> move.l a0,d0
    97c2:	|  |  |  |            asr.l #4,d0
    97c4:	|  |  |  |            add.l d0,d0
    97c6:	|  |  |  |            move.l d0,d1
    97c8:	|  |  |  |            moveq #0,d0
    97ca:	|  |  |  |            move.w 58(sp),d0
    97ce:	|  |  |  |            add.l d1,d0
    97d0:	|  |  |  |            move.l d0,d2
    97d2:	|  |  |  |            movea.l 112(sp),a0
    97d6:	|  |  |  |            movea.l 8(a0),a0
    97da:	|  |  |  |            move.l 100(sp),d1
    97de:	|  |  |  |            move.l d1,d0
    97e0:	|  |  |  |            lsl.l #3,d0
    97e2:	|  |  |  |            sub.l d1,d0
    97e4:	|  |  |  |            add.l d0,d0
    97e6:	|  |  |  |            add.l d0,d0
    97e8:	|  |  |  |            adda.l d0,a0
    97ea:	|  |  |  |            move.l 4(a0),d0
    97ee:	|  |  |  |            move.l d0,d0
    97f0:	|  |  |  |            move.w d2,d1
    97f2:	|  |  |  |            muls.w d0,d1
    97f4:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    97f8:	|  |  |  |            cmpi.w #100,98(sp)
    97fe:	|  |  |  |        ,-- bls.s 9806 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    9800:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    9806:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    9808:	|  |  |  '----------> moveq #0,d0
    980a:	|  |  |               move.w 98(sp),d0
    980e:	|  |  |               add.l d0,d0
    9810:	|  |  |               move.l d0,52(sp)
    9814:	|  |  |               moveq #2,d0
    9816:	|  |  |               move.l d0,48(sp)
    981a:	|  |  |               move.l 1e876 <SysBase>,d0
    9820:	|  |  |               movea.l d0,a6
    9822:	|  |  |               move.l 52(sp),d0
    9826:	|  |  |               move.l 48(sp),d1
    982a:	|  |  |               jsr -684(a6)
    982e:	|  |  |               move.l d0,44(sp)
    9832:	|  |  |               movea.l 44(sp),a1
    9836:	|  |  |               movea.l 112(sp),a0
    983a:	|  |  |               movea.l 8(a0),a0
    983e:	|  |  |               move.l 100(sp),d1
    9842:	|  |  |               move.l d1,d0
    9844:	|  |  |               lsl.l #3,d0
    9846:	|  |  |               sub.l d1,d0
    9848:	|  |  |               add.l d0,d0
    984a:	|  |  |               add.l d0,d0
    984c:	|  |  |               adda.l d0,a0
    984e:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9852:	|  |  |               move.l 1e85c <bigDataFile>,40(sp)
    985a:	|  |  |               movea.l 112(sp),a0
    985e:	|  |  |               movea.l 8(a0),a0
    9862:	|  |  |               move.l 100(sp),d1
    9866:	|  |  |               move.l d1,d0
    9868:	|  |  |               lsl.l #3,d0
    986a:	|  |  |               sub.l d1,d0
    986c:	|  |  |               add.l d0,d0
    986e:	|  |  |               add.l d0,d0
    9870:	|  |  |               adda.l d0,a0
    9872:	|  |  |               move.l 24(a0),36(sp)
    9878:	|  |  |               moveq #2,d1
    987a:	|  |  |               move.l d1,32(sp)
    987e:	|  |  |               move.w 98(sp),d0
    9882:	|  |  |               lsr.w #1,d0
    9884:	|  |  |               move.w d0,d0
    9886:	|  |  |               andi.l #65535,d0
    988c:	|  |  |               move.l d0,28(sp)
    9890:	|  |  |               move.l 1e87e <DOSBase>,d0
    9896:	|  |  |               movea.l d0,a6
    9898:	|  |  |               move.l 40(sp),d1
    989c:	|  |  |               move.l 36(sp),d2
    98a0:	|  |  |               move.l 32(sp),d3
    98a4:	|  |  |               move.l 28(sp),d4
    98a8:	|  |  |               jsr -324(a6)
    98ac:	|  |  |               move.l d0,24(sp)
    98b0:	|  |  |               move.l 24(sp),d0
    98b4:	|  |  |               move.w d0,22(sp)
		if (!count) {
    98b8:	|  |  |           ,-- bne.s 98cc <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    98ba:	|  |  |           |   pea 1a4b4 <PutChar+0x1514>
    98c0:	|  |  |           |   jsr 184fe <KPrintF>
    98c6:	|  |  |           |   addq.l #4,sp
			return FALSE;
    98c8:	|  |  |           |   clr.w d0
    98ca:	+--|--|-----------|-- bra.s 98f2 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    98cc:	|  |  |           '-> addq.l #1,100(sp)
    98d0:	|  |  '-------------> move.l 100(sp),d0
    98d4:	|  |                  cmp.l 74(sp),d0
    98d8:	|  '----------------- blt.w 95fc <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    98dc:	|                     jsr 7e3c <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    98e2:	|                     pea 1a4e7 <PutChar+0x1547>
    98e8:	|                     jsr 184fe <KPrintF>
    98ee:	|                     addq.l #4,sp
	return TRUE;
    98f0:	|                     moveq #1,d0
}
    98f2:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    98f6:	                      lea 84(sp),sp
    98fa:	                      rts

000098fc <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    98fc:	                   lea -16(sp),sp
    9900:	                   move.l d2,-(sp)
    9902:	                   move.l 32(sp),d0
    9906:	                   move.w d0,d0
    9908:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    990c:	                   movea.l 28(sp),a0
    9910:	                   move.l (a0),d2
    9912:	                   movea.l 24(sp),a0
    9916:	                   move.l 8(a0),d0
    991a:	                   move.l d0,-(sp)
    991c:	                   jsr 18930 <__floatsisf>
    9922:	                   addq.l #4,sp
    9924:	                   move.l d0,-(sp)
    9926:	                   move.l d2,-(sp)
    9928:	                   jsr 18c24 <__subsf3>
    992e:	                   addq.l #8,sp
    9930:	                   move.l d0,-(sp)
    9932:	                   jsr 188c8 <__fixsfsi>
    9938:	                   addq.l #4,sp
    993a:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    993e:	                   movea.l 28(sp),a0
    9942:	                   move.l 4(a0),d2
    9946:	                   movea.l 24(sp),a0
    994a:	                   move.l 12(a0),d0
    994e:	                   move.l d0,-(sp)
    9950:	                   jsr 18930 <__floatsisf>
    9956:	                   addq.l #4,sp
    9958:	                   move.l d0,-(sp)
    995a:	                   move.l d2,-(sp)
    995c:	                   jsr 18c24 <__subsf3>
    9962:	                   addq.l #8,sp
    9964:	                   move.l d0,-(sp)
    9966:	                   jsr 188c8 <__fixsfsi>
    996c:	                   addq.l #4,sp
    996e:	                   move.w d0,8(sp)

	if( x < 0)
    9972:	                   tst.w 18(sp)
    9976:	               ,-- bge.s 99aa <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    9978:	               |   movea.l 28(sp),a0
    997c:	               |   move.l (a0),d2
    997e:	               |   movea.l 24(sp),a0
    9982:	               |   move.l 8(a0),d0
    9986:	               |   move.l d0,-(sp)
    9988:	               |   jsr 18930 <__floatsisf>
    998e:	               |   addq.l #4,sp
    9990:	               |   move.l d0,-(sp)
    9992:	               |   move.l d2,-(sp)
    9994:	               |   jsr 18c24 <__subsf3>
    999a:	               |   addq.l #8,sp
    999c:	               |   move.l d0,-(sp)
    999e:	               |   jsr 188c8 <__fixsfsi>
    99a4:	               |   addq.l #4,sp
    99a6:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    99aa:	               '-> movea.w 8(sp),a1
    99ae:	                   movea.w 18(sp),a0
    99b2:	                   pea 1 <_start+0x1>
    99b6:	                   move.l a1,-(sp)
    99b8:	                   move.l a0,-(sp)
    99ba:	                   move.l 40(sp),-(sp)
    99be:	                   move.l 40(sp),-(sp)
    99c2:	                   jsr 30cc <CstScaleSprite>
    99c8:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    99cc:	                   movea.l 28(sp),a0
    99d0:	                   move.l 118(a0),d0
    99d4:	                   moveq #8,d1
    99d6:	                   and.l d1,d0
    99d8:	   ,-------------- beq.w 9aa4 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    99dc:	   |               movea.l 24(sp),a0
    99e0:	   |               move.l 8(a0),d0
    99e4:	   |  ,----------- bpl.s 9a20 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    99e6:	   |  |            move.w 18(sp),d0
    99ea:	   |  |            tst.w 6(sp)
    99ee:	   |  |     ,----- beq.s 9a08 <scaleSprite+0x10c>
    99f0:	   |  |     |      movea.l 24(sp),a0
    99f4:	   |  |     |      move.l (a0),d1
    99f6:	   |  |     |      move.l d1,d2
    99f8:	   |  |     |      movea.l 24(sp),a0
    99fc:	   |  |     |      move.l 8(a0),d1
    9a00:	   |  |     |      move.l d1,d1
    9a02:	   |  |     |      movea.w d2,a0
    9a04:	   |  |     |      suba.w d1,a0
    9a06:	   |  |     |  ,-- bra.s 9a16 <scaleSprite+0x11a>
    9a08:	   |  |     '--|-> movea.l 24(sp),a0
    9a0c:	   |  |        |   move.l 8(a0),d1
    9a10:	   |  |        |   move.l d1,d1
    9a12:	   |  |        |   movea.w d1,a0
    9a14:	   |  |        |   addq.w #1,a0
    9a16:	   |  |        '-> move.w d0,d1
    9a18:	   |  |            sub.w a0,d1
    9a1a:	   |  |            move.w d1,16(sp)
    9a1e:	   |  |  ,-------- bra.s 9a58 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9a20:	   |  '--|-------> move.w 18(sp),d1
    9a24:	   |     |         tst.w 6(sp)
    9a28:	   |     |  ,----- beq.s 9a46 <scaleSprite+0x14a>
    9a2a:	   |     |  |      movea.l 24(sp),a0
    9a2e:	   |     |  |      move.l (a0),d0
    9a30:	   |     |  |      move.l d0,d2
    9a32:	   |     |  |      movea.l 24(sp),a0
    9a36:	   |     |  |      move.l 8(a0),d0
    9a3a:	   |     |  |      move.l d0,d0
    9a3c:	   |     |  |      movea.w d2,a0
    9a3e:	   |     |  |      suba.w d0,a0
    9a40:	   |     |  |      move.w a0,d0
    9a42:	   |     |  |      subq.w #1,d0
    9a44:	   |     |  |  ,-- bra.s 9a50 <scaleSprite+0x154>
    9a46:	   |     |  '--|-> movea.l 24(sp),a0
    9a4a:	   |     |     |   move.l 8(a0),d0
    9a4e:	   |     |     |   move.l d0,d0
    9a50:	   |     |     '-> movea.w d1,a0
    9a52:	   |     |         suba.w d0,a0
    9a54:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9a58:	   |     '-------> movea.l 28(sp),a0
    9a5c:	   |               move.l 24(a0),d0
    9a60:	   |               move.l d0,d1
    9a62:	   |               movea.l 24(sp),a0
    9a66:	   |               move.l 12(a0),d0
    9a6a:	   |               move.l d0,d0
    9a6c:	   |               sub.w d0,d1
    9a6e:	   |               move.w 8(sp),d0
    9a72:	   |               movea.w d1,a0
    9a74:	   |               adda.w d0,a0
    9a76:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9a7a:	   |               movea.l 24(sp),a0
    9a7e:	   |               move.l (a0),d0
    9a80:	   |               move.l d0,d0
    9a82:	   |               move.w 16(sp),d1
    9a86:	   |               add.w d0,d1
    9a88:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9a8c:	   |               movea.l 24(sp),a0
    9a90:	   |               move.l 4(a0),d0
    9a94:	   |               move.l d0,d0
    9a96:	   |               movea.w 14(sp),a0
    9a9a:	   |               adda.w d0,a0
    9a9c:	   |               move.w a0,10(sp)
    9aa0:	,--|-------------- bra.w 9b8c <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9aa4:	|  '-------------> move.w 18(sp),d1
    9aa8:	|                  move.l 1e930 <cameraX>,d0
    9aae:	|                  move.l d0,d0
    9ab0:	|                  sub.w d0,d1
    9ab2:	|                  move.w d1,18(sp)
		y -= cameraY;
    9ab6:	|                  move.w 8(sp),d1
    9aba:	|                  move.l 1e934 <cameraY>,d0
    9ac0:	|                  move.l d0,d0
    9ac2:	|                  sub.w d0,d1
    9ac4:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9ac8:	|                  movea.l 24(sp),a0
    9acc:	|                  move.l 8(a0),d0
    9ad0:	|     ,----------- bpl.s 9b0c <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9ad2:	|     |            move.w 18(sp),d0
    9ad6:	|     |            tst.w 6(sp)
    9ada:	|     |     ,----- beq.s 9af4 <scaleSprite+0x1f8>
    9adc:	|     |     |      movea.l 24(sp),a0
    9ae0:	|     |     |      move.l (a0),d1
    9ae2:	|     |     |      move.l d1,d2
    9ae4:	|     |     |      movea.l 24(sp),a0
    9ae8:	|     |     |      move.l 8(a0),d1
    9aec:	|     |     |      move.l d1,d1
    9aee:	|     |     |      movea.w d2,a0
    9af0:	|     |     |      suba.w d1,a0
    9af2:	|     |     |  ,-- bra.s 9b02 <scaleSprite+0x206>
    9af4:	|     |     '--|-> movea.l 24(sp),a0
    9af8:	|     |        |   move.l 8(a0),d1
    9afc:	|     |        |   move.l d1,d1
    9afe:	|     |        |   movea.w d1,a0
    9b00:	|     |        |   addq.w #1,a0
    9b02:	|     |        '-> move.w d0,d1
    9b04:	|     |            sub.w a0,d1
    9b06:	|     |            move.w d1,16(sp)
    9b0a:	|     |  ,-------- bra.s 9b44 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9b0c:	|     '--|-------> move.w 18(sp),d1
    9b10:	|        |         tst.w 6(sp)
    9b14:	|        |  ,----- beq.s 9b32 <scaleSprite+0x236>
    9b16:	|        |  |      movea.l 24(sp),a0
    9b1a:	|        |  |      move.l (a0),d0
    9b1c:	|        |  |      move.l d0,d2
    9b1e:	|        |  |      movea.l 24(sp),a0
    9b22:	|        |  |      move.l 8(a0),d0
    9b26:	|        |  |      move.l d0,d0
    9b28:	|        |  |      movea.w d2,a0
    9b2a:	|        |  |      suba.w d0,a0
    9b2c:	|        |  |      move.w a0,d0
    9b2e:	|        |  |      subq.w #1,d0
    9b30:	|        |  |  ,-- bra.s 9b3c <scaleSprite+0x240>
    9b32:	|        |  '--|-> movea.l 24(sp),a0
    9b36:	|        |     |   move.l 8(a0),d0
    9b3a:	|        |     |   move.l d0,d0
    9b3c:	|        |     '-> movea.w d1,a0
    9b3e:	|        |         suba.w d0,a0
    9b40:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9b44:	|        '-------> movea.l 28(sp),a0
    9b48:	|                  move.l 24(a0),d0
    9b4c:	|                  move.l d0,d1
    9b4e:	|                  movea.l 24(sp),a0
    9b52:	|                  move.l 12(a0),d0
    9b56:	|                  move.l d0,d0
    9b58:	|                  sub.w d0,d1
    9b5a:	|                  move.w 8(sp),d0
    9b5e:	|                  movea.w d1,a0
    9b60:	|                  adda.w d0,a0
    9b62:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9b66:	|                  movea.l 24(sp),a0
    9b6a:	|                  move.l (a0),d0
    9b6c:	|                  move.l d0,d0
    9b6e:	|                  move.w 16(sp),d1
    9b72:	|                  add.w d0,d1
    9b74:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9b78:	|                  movea.l 24(sp),a0
    9b7c:	|                  move.l 4(a0),d0
    9b80:	|                  move.l d0,d0
    9b82:	|                  movea.w 14(sp),a0
    9b86:	|                  adda.w d0,a0
    9b88:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9b8c:	'----------------> move.l 1e830 <input+0xa>,d1
    9b92:	                   moveq #0,d0
    9b94:	                   move.w 16(sp),d0
    9b98:	                   cmp.l d1,d0
    9b9a:	            ,----- bgt.s 9bd0 <scaleSprite+0x2d4>
    9b9c:	            |      move.l 1e830 <input+0xa>,d1
    9ba2:	            |      moveq #0,d0
    9ba4:	            |      move.w 12(sp),d0
    9ba8:	            |      cmp.l d1,d0
    9baa:	            +----- blt.s 9bd0 <scaleSprite+0x2d4>
    9bac:	            |      move.l 1e834 <input+0xe>,d1
    9bb2:	            |      moveq #0,d0
    9bb4:	            |      move.w 14(sp),d0
    9bb8:	            |      cmp.l d1,d0
    9bba:	            +----- bgt.s 9bd0 <scaleSprite+0x2d4>
    9bbc:	            |      move.l 1e834 <input+0xe>,d1
    9bc2:	            |      moveq #0,d0
    9bc4:	            |      move.w 10(sp),d0
    9bc8:	            |      cmp.l d1,d0
    9bca:	            +----- blt.s 9bd0 <scaleSprite+0x2d4>
		return TRUE;
    9bcc:	            |      moveq #1,d0
    9bce:	            |  ,-- bra.s 9bd2 <scaleSprite+0x2d6>
	}
	return FALSE;
    9bd0:	            '--|-> clr.w d0
    9bd2:	               '-> move.l (sp)+,d2
    9bd4:	                   lea 16(sp),sp
    9bd8:	                   rts

00009bda <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9bda:	    move.l 4(sp),d0
    9bde:	,-- bpl.s 9be2 <TF_abs+0x8>
    9be0:	|   neg.l d0
}
    9be2:	'-> rts

00009be4 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9be4:	             lea -28(sp),sp
    9be8:	             move.l a6,-(sp)
    9bea:	             move.l d2,-(sp)
	
	struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9bec:	             move.l #132,28(sp)
    9bf4:	             clr.l 24(sp)
    9bf8:	             move.l 1e876 <SysBase>,d0
    9bfe:	             movea.l d0,a6
    9c00:	             move.l 28(sp),d0
    9c04:	             move.l 24(sp),d1
    9c08:	             jsr -684(a6)
    9c0c:	             move.l d0,20(sp)
    9c10:	             move.l 20(sp),d0
    9c14:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9c18:	         ,-- bne.s 9c20 <addPerson+0x3c>
    9c1a:	         |   clr.w d0
    9c1c:	,--------|-- bra.w 9e50 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9c20:	|        '-> move.l 48(sp),-(sp)
    9c24:	|            jsr e048 <loadObjectType>
    9c2a:	|            addq.l #4,sp
    9c2c:	|            movea.l 16(sp),a0
    9c30:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9c34:	|            movea.l 16(sp),a0
    9c38:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9c40:	|            movea.l 16(sp),a0
    9c44:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9c48:	|            movea.l 16(sp),a0
    9c4c:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9c50:	|            move.l 44(sp),-(sp)
    9c54:	|            jsr 18930 <__floatsisf>
    9c5a:	|            addq.l #4,sp
    9c5c:	|            move.l d0,d2
    9c5e:	|            move.l 40(sp),-(sp)
    9c62:	|            jsr 18930 <__floatsisf>
    9c68:	|            addq.l #4,sp
    9c6a:	|            move.l d2,-(sp)
    9c6c:	|            move.l d0,-(sp)
    9c6e:	|            move.l 24(sp),-(sp)
    9c72:	|            jsr b794 <moveAndScale>
    9c78:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9c7c:	|            movea.l 16(sp),a0
    9c80:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9c84:	|            movea.l 16(sp),a0
    9c88:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9c8e:	|            movea.l 16(sp),a0
    9c92:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9c98:	|            movea.l 16(sp),a0
    9c9c:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9ca0:	|            movea.l 16(sp),a0
    9ca4:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9ca8:	|            movea.l 16(sp),a0
    9cac:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9cb2:	|            movea.l 16(sp),a0
    9cb6:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9cba:	|            movea.l 16(sp),a0
    9cbe:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9cc6:	|            movea.l 16(sp),a0
    9cca:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9cd2:	|            movea.l 16(sp),a0
    9cd6:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9cda:	|            movea.l 16(sp),a0
    9cde:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9ce2:	|            movea.l 16(sp),a0
    9ce6:	|            movea.l 114(a0),a0
    9cea:	|            move.l 24(a0),d0
    9cee:	|            movea.l 16(sp),a0
    9cf2:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9cf6:	|            movea.l 16(sp),a0
    9cfa:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9cfe:	|            movea.l 16(sp),a0
    9d02:	|            movea.l 114(a0),a0
    9d06:	|            move.l 32(a0),d0
    9d0a:	|            movea.l 16(sp),a0
    9d0e:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9d12:	|            movea.l 16(sp),a0
    9d16:	|            clr.b 126(a0)
    newPerson->g = 0;
    9d1a:	|            movea.l 16(sp),a0
    9d1e:	|            clr.b 127(a0)
    newPerson->b = 0;
    9d22:	|            movea.l 16(sp),a0
    9d26:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9d2a:	|            movea.l 16(sp),a0
    9d2e:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9d32:	|            movea.l 16(sp),a0
    9d36:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9d3a:	|            movea.l 16(sp),a0
    9d3e:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9d44:	|            clr.l -(sp)
    9d46:	|            move.l 20(sp),-(sp)
    9d4a:	|            jsr 46c4 <setFrames>
    9d50:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9d52:	|            movea.l 52(sp),a0
    9d56:	|            movea.l (a0),a0
    9d58:	|            movea.l (a0),a0
    9d5a:	|            movea.l 4(a0),a0
    9d5e:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9d62:	|     ,----- bpl.s 9d6c <addPerson+0x188>
    9d64:	|     |      move.l 12(sp),d0
    9d68:	|     |      neg.l d0
    9d6a:	|     |  ,-- bra.s 9d6e <addPerson+0x18a>
    9d6c:	|     '--|-> moveq #1,d0
    9d6e:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9d72:	|            movea.l 52(sp),a0
    9d76:	|            movea.l (a0),a0
    9d78:	|            movea.l (a0),a0
    9d7a:	|            movea.l (a0),a0
    9d7c:	|            move.l 8(a0),d0
    9d80:	|            cmp.l 8(sp),d0
    9d84:	|     ,----- bgt.s 9db6 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9d86:	|     |      tst.l 12(sp)
    9d8a:	|     |  ,-- bge.s 9d98 <addPerson+0x1b4>
            newPerson->height = 5;
    9d8c:	|     |  |   movea.l 16(sp),a0
    9d90:	|     |  |   moveq #5,d0
    9d92:	|     |  |   move.l d0,20(a0)
    9d96:	|  ,--|--|-- bra.s 9de2 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9d98:	|  |  |  '-> movea.l 52(sp),a0
    9d9c:	|  |  |      movea.l (a0),a0
    9d9e:	|  |  |      movea.l (a0),a0
    9da0:	|  |  |      movea.l (a0),a0
    9da2:	|  |  |      movea.l 16(a0),a0
    9da6:	|  |  |      move.l 12(a0),d0
    9daa:	|  |  |      addq.l #5,d0
    9dac:	|  |  |      movea.l 16(sp),a0
    9db0:	|  |  |      move.l d0,20(a0)
    9db4:	|  +--|----- bra.s 9de2 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9db6:	|  |  '----> movea.l 52(sp),a0
    9dba:	|  |         movea.l (a0),a0
    9dbc:	|  |         movea.l (a0),a0
    9dbe:	|  |         movea.l (a0),a0
    9dc0:	|  |         movea.l 16(a0),a0
    9dc4:	|  |         move.l 8(sp),d1
    9dc8:	|  |         move.l d1,d0
    9dca:	|  |         lsl.l #3,d0
    9dcc:	|  |         sub.l d1,d0
    9dce:	|  |         add.l d0,d0
    9dd0:	|  |         add.l d0,d0
    9dd2:	|  |         adda.l d0,a0
    9dd4:	|  |         move.l 12(a0),d0
    9dd8:	|  |         addq.l #5,d0
    9dda:	|  |         movea.l 16(sp),a0
    9dde:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9de2:	|  '-------> move.l #125146,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9dea:	|        ,-- bra.s 9dfa <addPerson+0x216>
        changethat = &((*changethat)->next);
    9dec:	|     ,--|-> movea.l 32(sp),a0
    9df0:	|     |  |   move.l (a0),d0
    9df2:	|     |  |   moveq #36,d1
    9df4:	|     |  |   add.l d0,d1
    9df6:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9dfa:	|     |  '-> movea.l 32(sp),a0
    9dfe:	|     |      move.l (a0),d0
    9e00:	|     |  ,-- beq.s 9e28 <addPerson+0x244>
    9e02:	|     |  |   movea.l 32(sp),a0
    9e06:	|     |  |   movea.l (a0),a0
    9e08:	|     |  |   move.l 4(a0),d2
    9e0c:	|     |  |   move.l 44(sp),-(sp)
    9e10:	|     |  |   jsr 18930 <__floatsisf>
    9e16:	|     |  |   addq.l #4,sp
    9e18:	|     |  |   move.l d0,-(sp)
    9e1a:	|     |  |   move.l d2,-(sp)
    9e1c:	|     |  |   jsr 18b56 <__ltsf2>
    9e22:	|     |  |   addq.l #8,sp
    9e24:	|     |  |   tst.l d0
    9e26:	|     '--|-- blt.s 9dec <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9e28:	|        '-> movea.l 32(sp),a0
    9e2c:	|            move.l (a0),d0
    9e2e:	|            movea.l 16(sp),a0
    9e32:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9e36:	|            movea.l 32(sp),a0
    9e3a:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9e3e:	|            movea.l 16(sp),a0
    9e42:	|            move.l 114(a0),d0
    9e46:	|            sne d0
    9e48:	|            neg.b d0
    9e4a:	|            move.b d0,d0
    9e4c:	|            andi.w #255,d0
}
    9e50:	'----------> move.l (sp)+,d2
    9e52:	             movea.l (sp)+,a6
    9e54:	             lea 28(sp),sp
    9e58:	             rts

00009e5a <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9e5a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9e5c:	       move.l 8(sp),-(sp)
    9e60:	       jsr afea <findPerson>
    9e66:	       addq.l #4,sp
    9e68:	       move.l d0,(sp)
    if (moveMe) {
    9e6a:	,----- beq.s 9e9e <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9e6c:	|      movea.l (sp),a0
    9e6e:	|      move.l 68(a0),d0
    9e72:	|  ,-- beq.s 9e84 <animatePerson+0x2a>
    9e74:	|  |   movea.l (sp),a0
    9e76:	|  |   move.l 68(a0),d0
    9e7a:	|  |   move.l d0,-(sp)
    9e7c:	|  |   jsr 55ac <abortFunction>
    9e82:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9e84:	|  '-> movea.l (sp),a0
    9e86:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9e8a:	|      movea.l (sp),a0
    9e8c:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9e90:	|      movea.l (sp),a0
    9e92:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9e96:	|      movea.l (sp),a0
    9e98:	|      move.l 12(sp),72(a0)
    }
}
    9e9e:	'----> nop
    9ea0:	       addq.l #4,sp
    9ea2:	       rts

00009ea4 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9ea4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9ea6:	       move.l 8(sp),-(sp)
    9eaa:	       jsr afea <findPerson>
    9eb0:	       addq.l #4,sp
    9eb2:	       move.l d0,(sp)
    if (moveMe) {
    9eb4:	,----- beq.s 9ef6 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9eb6:	|      movea.l (sp),a0
    9eb8:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9ebc:	|      movea.l (sp),a0
    9ebe:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9ec4:	|      move.l (sp),-(sp)
    9ec6:	|      jsr b922 <rethinkAngle>
    9ecc:	|      addq.l #4,sp
        if (moveMe->walking) {
    9ece:	|      movea.l (sp),a0
    9ed0:	|      move.w 64(a0),d0
    9ed4:	|  ,-- beq.s 9ee8 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9ed6:	|  |   pea 1 <_start+0x1>
    9eda:	|  |   move.l 4(sp),-(sp)
    9ede:	|  |   jsr 46c4 <setFrames>
    9ee4:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9ee6:	+--|-- bra.s 9ef6 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9ee8:	|  '-> clr.l -(sp)
    9eea:	|      move.l 4(sp),-(sp)
    9eee:	|      jsr 46c4 <setFrames>
    9ef4:	|      addq.l #8,sp
}
    9ef6:	'----> nop
    9ef8:	       addq.l #4,sp
    9efa:	       rts

00009efc <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9efc:	             lea -36(sp),sp
    9f00:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9f02:	             movea.l 44(sp),a0
    9f06:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9f0c:	             moveq #12,d0
    9f0e:	             move.l d0,28(sp)
    9f12:	             clr.l 24(sp)
    9f16:	             move.l 1e876 <SysBase>,d0
    9f1c:	             movea.l d0,a6
    9f1e:	             move.l 28(sp),d0
    9f22:	             move.l 24(sp),d1
    9f26:	             jsr -684(a6)
    9f2a:	             move.l d0,20(sp)
    9f2e:	             move.l 20(sp),d0
    9f32:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9f36:	         ,-- bne.s 9f4c <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9f38:	         |   pea 1a501 <PutChar+0x1561>
    9f3e:	         |   jsr 184fe <KPrintF>
    9f44:	         |   addq.l #4,sp
		return NULL;
    9f46:	         |   moveq #0,d0
    9f48:	,--------|-- bra.w a09e <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9f4c:	|        '-> movea.l 44(sp),a0
    9f50:	|            move.l (a0),d0
    9f52:	|            movea.l 16(sp),a0
    9f56:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9f58:	|            movea.l 16(sp),a0
    9f5c:	|            movea.l (a0),a0
    9f5e:	|            move.l 4(a0),d0
    9f62:	|            addq.l #1,d0
    9f64:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9f68:	|            movea.l 16(sp),a0
    9f6c:	|            move.l 32(sp),8(a0)

	if (num) {
    9f72:	|  ,-------- beq.w a092 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9f76:	|  |         move.l 32(sp),d1
    9f7a:	|  |         move.l d1,d0
    9f7c:	|  |         add.l d0,d0
    9f7e:	|  |         add.l d1,d0
    9f80:	|  |         add.l d0,d0
    9f82:	|  |         add.l d0,d0
    9f84:	|  |         move.l d0,12(sp)
    9f88:	|  |         clr.l 8(sp)
    9f8c:	|  |         move.l 1e876 <SysBase>,d0
    9f92:	|  |         movea.l d0,a6
    9f94:	|  |         move.l 12(sp),d0
    9f98:	|  |         move.l 8(sp),d1
    9f9c:	|  |         jsr -684(a6)
    9fa0:	|  |         move.l d0,4(sp)
    9fa4:	|  |         move.l 4(sp),d0
    9fa8:	|  |         movea.l 16(sp),a0
    9fac:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9fb0:	|  |         movea.l 16(sp),a0
    9fb4:	|  |         move.l 4(a0),d0
    9fb8:	|  |     ,-- bne.s 9fce <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9fba:	|  |     |   pea 1a501 <PutChar+0x1561>
    9fc0:	|  |     |   jsr 184fe <KPrintF>
    9fc6:	|  |     |   addq.l #4,sp
			return NULL;
    9fc8:	|  |     |   moveq #0,d0
    9fca:	+--|-----|-- bra.w a09e <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9fce:	|  |     '-> clr.l 36(sp)
    9fd2:	|  |     ,-- bra.w a084 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9fd6:	|  |  ,--|-> movea.l 44(sp),a0
    9fda:	|  |  |  |   movea.l 4(a0),a0
    9fde:	|  |  |  |   move.l 36(sp),d1
    9fe2:	|  |  |  |   move.l d1,d0
    9fe4:	|  |  |  |   add.l d0,d0
    9fe6:	|  |  |  |   add.l d1,d0
    9fe8:	|  |  |  |   add.l d0,d0
    9fea:	|  |  |  |   add.l d0,d0
    9fec:	|  |  |  |   lea (0,a0,d0.l),a1
    9ff0:	|  |  |  |   movea.l 16(sp),a0
    9ff4:	|  |  |  |   movea.l 4(a0),a0
    9ff8:	|  |  |  |   move.l 36(sp),d1
    9ffc:	|  |  |  |   move.l d1,d0
    9ffe:	|  |  |  |   add.l d0,d0
    a000:	|  |  |  |   add.l d1,d0
    a002:	|  |  |  |   add.l d0,d0
    a004:	|  |  |  |   add.l d0,d0
    a006:	|  |  |  |   adda.l d0,a0
    a008:	|  |  |  |   move.l (a1),d0
    a00a:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    a00c:	|  |  |  |   movea.l 44(sp),a0
    a010:	|  |  |  |   movea.l 4(a0),a0
    a014:	|  |  |  |   move.l 36(sp),d1
    a018:	|  |  |  |   move.l d1,d0
    a01a:	|  |  |  |   add.l d0,d0
    a01c:	|  |  |  |   add.l d1,d0
    a01e:	|  |  |  |   add.l d0,d0
    a020:	|  |  |  |   add.l d0,d0
    a022:	|  |  |  |   lea (0,a0,d0.l),a1
    a026:	|  |  |  |   movea.l 16(sp),a0
    a02a:	|  |  |  |   movea.l 4(a0),a0
    a02e:	|  |  |  |   move.l 36(sp),d1
    a032:	|  |  |  |   move.l d1,d0
    a034:	|  |  |  |   add.l d0,d0
    a036:	|  |  |  |   add.l d1,d0
    a038:	|  |  |  |   add.l d0,d0
    a03a:	|  |  |  |   add.l d0,d0
    a03c:	|  |  |  |   adda.l d0,a0
    a03e:	|  |  |  |   move.l 4(a1),d0
    a042:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    a046:	|  |  |  |   movea.l 44(sp),a0
    a04a:	|  |  |  |   movea.l 4(a0),a0
    a04e:	|  |  |  |   move.l 36(sp),d1
    a052:	|  |  |  |   move.l d1,d0
    a054:	|  |  |  |   add.l d0,d0
    a056:	|  |  |  |   add.l d1,d0
    a058:	|  |  |  |   add.l d0,d0
    a05a:	|  |  |  |   add.l d0,d0
    a05c:	|  |  |  |   lea (0,a0,d0.l),a1
    a060:	|  |  |  |   movea.l 16(sp),a0
    a064:	|  |  |  |   movea.l 4(a0),a0
    a068:	|  |  |  |   move.l 36(sp),d1
    a06c:	|  |  |  |   move.l d1,d0
    a06e:	|  |  |  |   add.l d0,d0
    a070:	|  |  |  |   add.l d1,d0
    a072:	|  |  |  |   add.l d0,d0
    a074:	|  |  |  |   add.l d0,d0
    a076:	|  |  |  |   adda.l d0,a0
    a078:	|  |  |  |   move.l 8(a1),d0
    a07c:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    a080:	|  |  |  |   addq.l #1,36(sp)
    a084:	|  |  |  '-> move.l 36(sp),d0
    a088:	|  |  |      cmp.l 32(sp),d0
    a08c:	|  |  '----- blt.w 9fd6 <copyAnim+0xda>
    a090:	|  |     ,-- bra.s a09a <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    a092:	|  '-----|-> movea.l 16(sp),a0
    a096:	|        |   clr.l 4(a0)
	}

	return newAnim;
    a09a:	|        '-> move.l 16(sp),d0
}
    a09e:	'----------> movea.l (sp)+,a6
    a0a0:	             lea 36(sp),sp
    a0a4:	             rts

0000a0a6 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    a0a6:	                lea -44(sp),sp
    a0aa:	                move.l a6,-(sp)
    a0ac:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    a0ae:	                moveq #12,d0
    a0b0:	                move.l d0,40(sp)
    a0b4:	                clr.l 36(sp)
    a0b8:	                move.l 1e876 <SysBase>,d0
    a0be:	                movea.l d0,a6
    a0c0:	                move.l 40(sp),d0
    a0c4:	                move.l 36(sp),d1
    a0c8:	                jsr -684(a6)
    a0cc:	                move.l d0,32(sp)
    a0d0:	                move.l 32(sp),d0
    a0d4:	                move.l d0,28(sp)
	if( !newP) {
    a0d8:	            ,-- bne.s a0ee <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a0da:	            |   pea 1a522 <PutChar+0x1582>
    a0e0:	            |   jsr 184fe <KPrintF>
    a0e6:	            |   addq.l #4,sp
		return NULL;
    a0e8:	            |   moveq #0,d0
    a0ea:	,-----------|-- bra.w a2be <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    a0ee:	|           '-> movea.l 28(sp),a0
    a0f2:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    a0f8:	|               move.l 56(sp),d1
    a0fc:	|               move.l d1,d0
    a0fe:	|               add.l d0,d0
    a100:	|               add.l d1,d0
    a102:	|               add.l d0,d0
    a104:	|               add.l d0,d0
    a106:	|               move.l d0,24(sp)
    a10a:	|               clr.l 20(sp)
    a10e:	|               move.l 1e876 <SysBase>,d0
    a114:	|               movea.l d0,a6
    a116:	|               move.l 24(sp),d0
    a11a:	|               move.l 20(sp),d1
    a11e:	|               jsr -684(a6)
    a122:	|               move.l d0,16(sp)
    a126:	|               move.l 16(sp),d0
    a12a:	|               movea.l 28(sp),a0
    a12e:	|               move.l d0,4(a0)
	if( !newP->frames) {
    a132:	|               movea.l 28(sp),a0
    a136:	|               move.l 4(a0),d0
    a13a:	|           ,-- bne.s a150 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a13c:	|           |   pea 1a522 <PutChar+0x1582>
    a142:	|           |   jsr 184fe <KPrintF>
    a148:	|           |   addq.l #4,sp
		return NULL;
    a14a:	|           |   moveq #0,d0
    a14c:	+-----------|-- bra.w a2be <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    a150:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    a156:	|               movea.l 60(sp),a0
    a15a:	|               move.l (a0),44(sp)
	while (a) {
    a15e:	|     ,-------- bra.w a2b2 <createPersonaAnim+0x20c>
		a --;
    a162:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    a166:	|  |  |         movea.l 28(sp),a0
    a16a:	|  |  |         movea.l 4(a0),a0
    a16e:	|  |  |         move.l 48(sp),d1
    a172:	|  |  |         move.l d1,d0
    a174:	|  |  |         add.l d0,d0
    a176:	|  |  |         add.l d1,d0
    a178:	|  |  |         add.l d0,d0
    a17a:	|  |  |         add.l d0,d0
    a17c:	|  |  |         adda.l d0,a0
    a17e:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    a182:	|  |  |         movea.l 44(sp),a0
    a186:	|  |  |         move.l (a0),d0
    a188:	|  |  |         moveq #5,d1
    a18a:	|  |  |         cmp.l d0,d1
    a18c:	|  |  |     ,-- bne.s a1b8 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    a18e:	|  |  |     |   movea.l 28(sp),a0
    a192:	|  |  |     |   movea.l 4(a0),a0
    a196:	|  |  |     |   move.l 48(sp),d1
    a19a:	|  |  |     |   move.l d1,d0
    a19c:	|  |  |     |   add.l d0,d0
    a19e:	|  |  |     |   add.l d1,d0
    a1a0:	|  |  |     |   add.l d0,d0
    a1a2:	|  |  |     |   add.l d0,d0
    a1a4:	|  |  |     |   lea (0,a0,d0.l),a1
    a1a8:	|  |  |     |   movea.l 44(sp),a0
    a1ac:	|  |  |     |   move.l 4(a0),d0
    a1b0:	|  |  |     |   move.l d0,8(a1)
    a1b4:	|  |  |  ,--|-- bra.w a260 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    a1b8:	|  |  |  |  '-> movea.l 44(sp),a0
    a1bc:	|  |  |  |      move.l (a0),d0
    a1be:	|  |  |  |      moveq #2,d1
    a1c0:	|  |  |  |      cmp.l d0,d1
    a1c2:	|  |  |  |  ,-- bne.s a1ee <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    a1c4:	|  |  |  |  |   movea.l 44(sp),a0
    a1c8:	|  |  |  |  |   move.l 4(a0),d2
    a1cc:	|  |  |  |  |   movea.l 28(sp),a0
    a1d0:	|  |  |  |  |   movea.l 4(a0),a0
    a1d4:	|  |  |  |  |   move.l 48(sp),d1
    a1d8:	|  |  |  |  |   move.l d1,d0
    a1da:	|  |  |  |  |   add.l d0,d0
    a1dc:	|  |  |  |  |   add.l d1,d0
    a1de:	|  |  |  |  |   add.l d0,d0
    a1e0:	|  |  |  |  |   add.l d0,d0
    a1e2:	|  |  |  |  |   adda.l d0,a0
    a1e4:	|  |  |  |  |   move.l d2,d0
    a1e6:	|  |  |  |  |   neg.l d0
    a1e8:	|  |  |  |  |   move.l d0,8(a0)
    a1ec:	|  |  |  +--|-- bra.s a260 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    a1ee:	|  |  |  |  '-> movea.l 44(sp),a0
    a1f2:	|  |  |  |      move.l (a0),d0
    a1f4:	|  |  |  |      moveq #6,d1
    a1f6:	|  |  |  |      cmp.l d0,d1
    a1f8:	|  |  |  |  ,-- bne.s a240 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    a1fa:	|  |  |  |  |   movea.l 44(sp),a0
    a1fe:	|  |  |  |  |   movea.l 4(a0),a0
    a202:	|  |  |  |  |   move.l (a0),d0
    a204:	|  |  |  |  |   move.l d0,-(sp)
    a206:	|  |  |  |  |   pea 1 <_start+0x1>
    a20a:	|  |  |  |  |   lea 20(sp),a0
    a20e:	|  |  |  |  |   move.l a0,-(sp)
    a210:	|  |  |  |  |   jsr 15a1e <getValueType>
    a216:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    a21a:	|  |  |  |  |   movea.l 44(sp),a0
    a21e:	|  |  |  |  |   movea.l 4(a0),a0
    a222:	|  |  |  |  |   movea.l (a0),a0
    a224:	|  |  |  |  |   move.l 8(a0),d0
    a228:	|  |  |  |  |   move.l d0,-(sp)
    a22a:	|  |  |  |  |   pea 1 <_start+0x1>
    a22e:	|  |  |  |  |   lea 16(sp),a0
    a232:	|  |  |  |  |   move.l a0,-(sp)
    a234:	|  |  |  |  |   jsr 15a1e <getValueType>
    a23a:	|  |  |  |  |   lea 12(sp),sp
    a23e:	|  |  |  +--|-- bra.s a260 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    a240:	|  |  |  |  '-> move.l 44(sp),d0
    a244:	|  |  |  |      move.l d0,-(sp)
    a246:	|  |  |  |      pea 1 <_start+0x1>
    a24a:	|  |  |  |      lea 20(sp),a0
    a24e:	|  |  |  |      move.l a0,-(sp)
    a250:	|  |  |  |      jsr 15a1e <getValueType>
    a256:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    a25a:	|  |  |  |      moveq #1,d0
    a25c:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    a260:	|  |  |  '----> move.l 60(sp),-(sp)
    a264:	|  |  |         jsr 163a2 <trimStack>
    a26a:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    a26c:	|  |  |         movea.l 28(sp),a0
    a270:	|  |  |         movea.l 4(a0),a0
    a274:	|  |  |         move.l 48(sp),d1
    a278:	|  |  |         move.l d1,d0
    a27a:	|  |  |         add.l d0,d0
    a27c:	|  |  |         add.l d1,d0
    a27e:	|  |  |         add.l d0,d0
    a280:	|  |  |         add.l d0,d0
    a282:	|  |  |         adda.l d0,a0
    a284:	|  |  |         move.l 12(sp),d0
    a288:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    a28a:	|  |  |         movea.l 28(sp),a0
    a28e:	|  |  |         movea.l 4(a0),a0
    a292:	|  |  |         move.l 48(sp),d1
    a296:	|  |  |         move.l d1,d0
    a298:	|  |  |         add.l d0,d0
    a29a:	|  |  |         add.l d1,d0
    a29c:	|  |  |         add.l d0,d0
    a29e:	|  |  |         add.l d0,d0
    a2a0:	|  |  |         adda.l d0,a0
    a2a2:	|  |  |         move.l 8(sp),d0
    a2a6:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    a2aa:	|  |  |         movea.l 60(sp),a0
    a2ae:	|  |  |         move.l (a0),44(sp)
	while (a) {
    a2b2:	|  |  '-------> tst.l 48(sp)
    a2b6:	|  '----------- bne.w a162 <createPersonaAnim+0xbc>
	}

	return newP;
    a2ba:	|               move.l 28(sp),d0
}
    a2be:	'-------------> move.l (sp)+,d2
    a2c0:	                movea.l (sp)+,a6
    a2c2:	                lea 44(sp),sp
    a2c6:	                rts

0000a2c8 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    a2c8:	       lea -12(sp),sp
    a2cc:	       move.l a6,-(sp)

	if(orig->theSprites)
    a2ce:	       movea.l 20(sp),a0
    a2d2:	       move.l (a0),d0
    a2d4:	   ,-- beq.s a2fe <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    a2d6:	   |   movea.l 20(sp),a0
    a2da:	   |   movea.l (a0),a0
    a2dc:	   |   move.l 4(a0),d0
    a2e0:	   |   subq.l #1,d0
    a2e2:	   |   move.l d0,4(a0)
    a2e6:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    a2ec:	   +-- bne.s a2fe <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    a2ee:	   |   movea.l 20(sp),a0
    a2f2:	   |   move.l (a0),d0
    a2f4:	   |   move.l d0,-(sp)
    a2f6:	   |   jsr 93ac <forgetSpriteBank>
    a2fc:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    a2fe:	   '-> tst.l 20(sp)
    a302:	,----- beq.s a342 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    a304:	|      movea.l 20(sp),a0
    a308:	|      move.l 8(a0),d0
    a30c:	|  ,-- beq.s a328 <deleteAnim+0x60>
			FreeVec( orig->frames);
    a30e:	|  |   movea.l 20(sp),a0
    a312:	|  |   move.l 4(a0),8(sp)
    a318:	|  |   move.l 1e876 <SysBase>,d0
    a31e:	|  |   movea.l d0,a6
    a320:	|  |   movea.l 8(sp),a1
    a324:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    a328:	|  '-> move.l 20(sp),4(sp)
    a32e:	|      move.l 1e876 <SysBase>,d0
    a334:	|      movea.l d0,a6
    a336:	|      movea.l 4(sp),a1
    a33a:	|      jsr -690(a6)
		orig = NULL;
    a33e:	|      clr.l 20(sp)
	}	
	
}
    a342:	'----> nop
    a344:	       movea.l (sp)+,a6
    a346:	       lea 12(sp),sp
    a34a:	       rts

0000a34c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    a34c:	          lea -124(sp),sp
    a350:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    a354:	          movea.l 152(sp),a0
    a358:	          move.l 56(a0),d1
    a35c:	          movea.l 152(sp),a0
    a360:	          move.l 60(a0),d0
    a364:	          cmp.l d1,d0
    a366:	      ,-- bne.s a396 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    a368:	      |   movea.l 152(sp),a0
    a36c:	      |   moveq #-1,d0
    a36e:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    a372:	      |   movea.l 152(sp),a0
    a376:	      |   move.l 40(a0),d0
    a37a:	      |   movea.l 152(sp),a0
    a37e:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    a382:	      |   movea.l 152(sp),a0
    a386:	      |   move.l 44(a0),d0
    a38a:	      |   movea.l 152(sp),a0
    a38e:	      |   move.l d0,52(a0)
    a392:	   ,--|-- bra.w a8fc <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    a396:	   |  '-> movea.l 1e992 <currentFloor>,a0
    a39c:	   |      move.l 16(a0),d1
    a3a0:	   |      movea.l 152(sp),a0
    a3a4:	   |      move.l 56(a0),d0
    a3a8:	   |      add.l d0,d0
    a3aa:	   |      add.l d0,d0
    a3ac:	   |      movea.l d1,a0
    a3ae:	   |      adda.l d0,a0
    a3b0:	   |      move.l (a0),d1
    a3b2:	   |      movea.l 152(sp),a0
    a3b6:	   |      move.l 60(a0),d0
    a3ba:	   |      add.l d0,d0
    a3bc:	   |      add.l d0,d0
    a3be:	   |      movea.l d1,a0
    a3c0:	   |      adda.l d0,a0
    a3c2:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    a3c6:	   |      moveq #-1,d0
    a3c8:	   |      cmp.l 144(sp),d0
    a3cc:	   |  ,-- bne.s a3d4 <doBorderStuff+0x88>
    a3ce:	   |  |   clr.w d0
    a3d0:	,--|--|-- bra.w a9fc <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    a3d4:	|  |  '-> movea.l 1e992 <currentFloor>,a0
    a3da:	|  |      move.l 12(a0),d1
    a3de:	|  |      move.l 144(sp),d0
    a3e2:	|  |      lsl.l #3,d0
    a3e4:	|  |      add.l d0,d1
    a3e6:	|  |      movea.l 1e992 <currentFloor>,a0
    a3ec:	|  |      movea.l 12(a0),a1
    a3f0:	|  |      movea.l 152(sp),a0
    a3f4:	|  |      move.l 56(a0),d0
    a3f8:	|  |      lsl.l #3,d0
    a3fa:	|  |      add.l a1,d0
    a3fc:	|  |      lea 40(sp),a0
    a400:	|  |      move.l a0,-(sp)
    a402:	|  |      lea 48(sp),a0
    a406:	|  |      move.l a0,-(sp)
    a408:	|  |      move.l d1,-(sp)
    a40a:	|  |      move.l d0,-(sp)
    a40c:	|  |      jsr 17764 <getMatchingCorners>
    a412:	|  |      lea 16(sp),sp
    a416:	|  |      tst.w d0
    a418:	|  |  ,-- bne.s a42e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    a41a:	|  |  |   pea 1a54c <PutChar+0x15ac>
    a420:	|  |  |   jsr 184fe <KPrintF>
    a426:	|  |  |   addq.l #4,sp
            return FALSE;
    a428:	|  |  |   clr.w d0
    a42a:	+--|--|-- bra.w a9fc <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    a42e:	|  |  '-> movea.l 152(sp),a0
    a432:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    a438:	|  |      movea.l 152(sp),a0
    a43c:	|  |      move.l (a0),d0
    a43e:	|  |      move.l d0,-(sp)
    a440:	|  |      jsr 188c8 <__fixsfsi>
    a446:	|  |      addq.l #4,sp
    a448:	|  |      move.l d0,140(sp)
    a44c:	|  |      movea.l 152(sp),a0
    a450:	|  |      move.l 4(a0),d0
    a454:	|  |      move.l d0,-(sp)
    a456:	|  |      jsr 188c8 <__fixsfsi>
    a45c:	|  |      addq.l #4,sp
    a45e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    a462:	|  |      movea.l 152(sp),a0
    a466:	|  |      move.l 40(a0),132(sp)
    a46c:	|  |      movea.l 152(sp),a0
    a470:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    a476:	|  |      movea.l 1e992 <currentFloor>,a0
    a47c:	|  |      move.l 4(a0),d1
    a480:	|  |      move.l 44(sp),d0
    a484:	|  |      lsl.l #3,d0
    a486:	|  |      movea.l d1,a0
    a488:	|  |      adda.l d0,a0
    a48a:	|  |      move.l (a0),124(sp)
    a48e:	|  |      movea.l 1e992 <currentFloor>,a0
    a494:	|  |      move.l 4(a0),d1
    a498:	|  |      move.l 44(sp),d0
    a49c:	|  |      lsl.l #3,d0
    a49e:	|  |      movea.l d1,a0
    a4a0:	|  |      adda.l d0,a0
    a4a2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    a4a8:	|  |      movea.l 1e992 <currentFloor>,a0
    a4ae:	|  |      move.l 4(a0),d1
    a4b2:	|  |      move.l 40(sp),d0
    a4b6:	|  |      lsl.l #3,d0
    a4b8:	|  |      movea.l d1,a0
    a4ba:	|  |      adda.l d0,a0
    a4bc:	|  |      move.l (a0),116(sp)
    a4c0:	|  |      movea.l 1e992 <currentFloor>,a0
    a4c6:	|  |      move.l 4(a0),d1
    a4ca:	|  |      move.l 40(sp),d0
    a4ce:	|  |      lsl.l #3,d0
    a4d0:	|  |      movea.l d1,a0
    a4d2:	|  |      adda.l d0,a0
    a4d4:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a4da:	|  |      move.l 140(sp),d0
    a4de:	|  |      sub.l 132(sp),d0
    a4e2:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a4e6:	|  |      move.l 136(sp),d0
    a4ea:	|  |      sub.l 128(sp),d0
    a4ee:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a4f2:	|  |      move.l 116(sp),d0
    a4f6:	|  |      sub.l 124(sp),d0
    a4fa:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a4fe:	|  |      move.l 112(sp),d0
    a502:	|  |      sub.l 120(sp),d0
    a506:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a50a:	|  |      move.l 124(sp),d0
    a50e:	|  |      sub.l 140(sp),d0
    a512:	|  |      move.l 104(sp),-(sp)
    a516:	|  |      move.l d0,-(sp)
    a518:	|  |      jsr 18e8a <__mulsi3>
    a51e:	|  |      addq.l #8,sp
    a520:	|  |      move.l d0,d2
    a522:	|  |      move.l 120(sp),d0
    a526:	|  |      sub.l 136(sp),d0
    a52a:	|  |      move.l 108(sp),-(sp)
    a52e:	|  |      move.l d0,-(sp)
    a530:	|  |      jsr 18e8a <__mulsi3>
    a536:	|  |      addq.l #8,sp
    a538:	|  |      move.l d2,d1
    a53a:	|  |      sub.l d0,d1
    a53c:	|  |      move.l d1,-(sp)
    a53e:	|  |      jsr 188f0 <__floatsidf>
    a544:	|  |      addq.l #4,sp
    a546:	|  |      move.l d0,32(sp)
    a54a:	|  |      move.l d1,36(sp)
    a54e:	|  |      move.l 32(sp),88(sp)
    a554:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a55a:	|  |      move.l 96(sp),-(sp)
    a55e:	|  |      move.l 112(sp),-(sp)
    a562:	|  |      jsr 18e8a <__mulsi3>
    a568:	|  |      addq.l #8,sp
    a56a:	|  |      move.l d0,d2
    a56c:	|  |      move.l 100(sp),-(sp)
    a570:	|  |      move.l 108(sp),-(sp)
    a574:	|  |      jsr 18e8a <__mulsi3>
    a57a:	|  |      addq.l #8,sp
    a57c:	|  |      move.l d2,d1
    a57e:	|  |      sub.l d0,d1
    a580:	|  |      move.l d1,-(sp)
    a582:	|  |      jsr 188f0 <__floatsidf>
    a588:	|  |      addq.l #4,sp
    a58a:	|  |      move.l d1,-(sp)
    a58c:	|  |      move.l d0,-(sp)
    a58e:	|  |      move.l 100(sp),-(sp)
    a592:	|  |      move.l 100(sp),-(sp)
    a596:	|  |      jsr 18784 <__divdf3>
    a59c:	|  |      lea 16(sp),sp
    a5a0:	|  |      move.l d0,24(sp)
    a5a4:	|  |      move.l d1,28(sp)
    a5a8:	|  |      move.l 24(sp),88(sp)
    a5ae:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a5b4:	|  |      clr.l -(sp)
    a5b6:	|  |      clr.l -(sp)
    a5b8:	|  |      move.l 100(sp),-(sp)
    a5bc:	|  |      move.l 100(sp),-(sp)
    a5c0:	|  |      jsr 18a4e <__gtdf2>
    a5c6:	|  |      lea 16(sp),sp
    a5ca:	|  |      tst.l d0
    a5cc:	|  |  ,-- ble.w a6a4 <doBorderStuff+0x358>
    a5d0:	|  |  |   clr.l -(sp)
    a5d2:	|  |  |   move.l #1072693248,-(sp)
    a5d8:	|  |  |   move.l 100(sp),-(sp)
    a5dc:	|  |  |   move.l 100(sp),-(sp)
    a5e0:	|  |  |   jsr 18b08 <__ltdf2>
    a5e6:	|  |  |   lea 16(sp),sp
    a5ea:	|  |  |   tst.l d0
    a5ec:	|  |  +-- bge.w a6a4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a5f0:	|  |  |   move.l 124(sp),-(sp)
    a5f4:	|  |  |   jsr 188f0 <__floatsidf>
    a5fa:	|  |  |   addq.l #4,sp
    a5fc:	|  |  |   move.l d0,d2
    a5fe:	|  |  |   move.l d1,d3
    a600:	|  |  |   move.l 100(sp),-(sp)
    a604:	|  |  |   jsr 188f0 <__floatsidf>
    a60a:	|  |  |   addq.l #4,sp
    a60c:	|  |  |   move.l 92(sp),-(sp)
    a610:	|  |  |   move.l 92(sp),-(sp)
    a614:	|  |  |   move.l d1,-(sp)
    a616:	|  |  |   move.l d0,-(sp)
    a618:	|  |  |   jsr 18980 <__muldf3>
    a61e:	|  |  |   lea 16(sp),sp
    a622:	|  |  |   move.l d1,-(sp)
    a624:	|  |  |   move.l d0,-(sp)
    a626:	|  |  |   move.l d3,-(sp)
    a628:	|  |  |   move.l d2,-(sp)
    a62a:	|  |  |   jsr 18722 <__adddf3>
    a630:	|  |  |   lea 16(sp),sp
    a634:	|  |  |   move.l d1,-(sp)
    a636:	|  |  |   move.l d0,-(sp)
    a638:	|  |  |   jsr 18892 <__fixdfsi>
    a63e:	|  |  |   addq.l #8,sp
    a640:	|  |  |   movea.l 152(sp),a0
    a644:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a648:	|  |  |   move.l 120(sp),-(sp)
    a64c:	|  |  |   jsr 188f0 <__floatsidf>
    a652:	|  |  |   addq.l #4,sp
    a654:	|  |  |   move.l d0,d2
    a656:	|  |  |   move.l d1,d3
    a658:	|  |  |   move.l 96(sp),-(sp)
    a65c:	|  |  |   jsr 188f0 <__floatsidf>
    a662:	|  |  |   addq.l #4,sp
    a664:	|  |  |   move.l 92(sp),-(sp)
    a668:	|  |  |   move.l 92(sp),-(sp)
    a66c:	|  |  |   move.l d1,-(sp)
    a66e:	|  |  |   move.l d0,-(sp)
    a670:	|  |  |   jsr 18980 <__muldf3>
    a676:	|  |  |   lea 16(sp),sp
    a67a:	|  |  |   move.l d1,-(sp)
    a67c:	|  |  |   move.l d0,-(sp)
    a67e:	|  |  |   move.l d3,-(sp)
    a680:	|  |  |   move.l d2,-(sp)
    a682:	|  |  |   jsr 18722 <__adddf3>
    a688:	|  |  |   lea 16(sp),sp
    a68c:	|  |  |   move.l d1,-(sp)
    a68e:	|  |  |   move.l d0,-(sp)
    a690:	|  |  |   jsr 18892 <__fixdfsi>
    a696:	|  |  |   addq.l #8,sp
    a698:	|  |  |   movea.l 152(sp),a0
    a69c:	|  |  |   move.l d0,52(a0)
    a6a0:	|  +--|-- bra.w a8fc <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a6a4:	|  |  '-> move.l 140(sp),d0
    a6a8:	|  |      sub.l 124(sp),d0
    a6ac:	|  |      move.l d0,84(sp)
    a6b0:	|  |      move.l 140(sp),d0
    a6b4:	|  |      sub.l 116(sp),d0
    a6b8:	|  |      move.l d0,80(sp)
    a6bc:	|  |      move.l 132(sp),d0
    a6c0:	|  |      sub.l 124(sp),d0
    a6c4:	|  |      move.l d0,76(sp)
    a6c8:	|  |      move.l 132(sp),d0
    a6cc:	|  |      sub.l 116(sp),d0
    a6d0:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a6d4:	|  |      move.l 136(sp),d0
    a6d8:	|  |      sub.l 120(sp),d0
    a6dc:	|  |      move.l d0,68(sp)
    a6e0:	|  |      move.l 136(sp),d0
    a6e4:	|  |      sub.l 112(sp),d0
    a6e8:	|  |      move.l d0,64(sp)
    a6ec:	|  |      move.l 128(sp),d0
    a6f0:	|  |      sub.l 120(sp),d0
    a6f4:	|  |      move.l d0,60(sp)
    a6f8:	|  |      move.l 128(sp),d0
    a6fc:	|  |      sub.l 112(sp),d0
    a700:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a704:	|  |      move.l 84(sp),-(sp)
    a708:	|  |      move.l 88(sp),-(sp)
    a70c:	|  |      jsr 18e8a <__mulsi3>
    a712:	|  |      addq.l #8,sp
    a714:	|  |      move.l d0,84(sp)
    a718:	|  |      move.l 80(sp),-(sp)
    a71c:	|  |      move.l 84(sp),-(sp)
    a720:	|  |      jsr 18e8a <__mulsi3>
    a726:	|  |      addq.l #8,sp
    a728:	|  |      move.l d0,80(sp)
    a72c:	|  |      move.l 76(sp),-(sp)
    a730:	|  |      move.l 80(sp),-(sp)
    a734:	|  |      jsr 18e8a <__mulsi3>
    a73a:	|  |      addq.l #8,sp
    a73c:	|  |      move.l d0,76(sp)
    a740:	|  |      move.l 72(sp),-(sp)
    a744:	|  |      move.l 76(sp),-(sp)
    a748:	|  |      jsr 18e8a <__mulsi3>
    a74e:	|  |      addq.l #8,sp
    a750:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a754:	|  |      move.l 68(sp),-(sp)
    a758:	|  |      move.l 72(sp),-(sp)
    a75c:	|  |      jsr 18e8a <__mulsi3>
    a762:	|  |      addq.l #8,sp
    a764:	|  |      move.l d0,68(sp)
    a768:	|  |      move.l 64(sp),-(sp)
    a76c:	|  |      move.l 68(sp),-(sp)
    a770:	|  |      jsr 18e8a <__mulsi3>
    a776:	|  |      addq.l #8,sp
    a778:	|  |      move.l d0,64(sp)
    a77c:	|  |      move.l 60(sp),-(sp)
    a780:	|  |      move.l 64(sp),-(sp)
    a784:	|  |      jsr 18e8a <__mulsi3>
    a78a:	|  |      addq.l #8,sp
    a78c:	|  |      move.l d0,60(sp)
    a790:	|  |      move.l 56(sp),-(sp)
    a794:	|  |      move.l 60(sp),-(sp)
    a798:	|  |      jsr 18e8a <__mulsi3>
    a79e:	|  |      addq.l #8,sp
    a7a0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a7a4:	|  |      move.l 84(sp),-(sp)
    a7a8:	|  |      jsr 188f0 <__floatsidf>
    a7ae:	|  |      addq.l #4,sp
    a7b0:	|  |      move.l d0,d2
    a7b2:	|  |      move.l d1,d3
    a7b4:	|  |      move.l 68(sp),-(sp)
    a7b8:	|  |      jsr 188f0 <__floatsidf>
    a7be:	|  |      addq.l #4,sp
    a7c0:	|  |      move.l d1,-(sp)
    a7c2:	|  |      move.l d0,-(sp)
    a7c4:	|  |      move.l d3,-(sp)
    a7c6:	|  |      move.l d2,-(sp)
    a7c8:	|  |      jsr 18722 <__adddf3>
    a7ce:	|  |      lea 16(sp),sp
    a7d2:	|  |      move.l d1,-(sp)
    a7d4:	|  |      move.l d0,-(sp)
    a7d6:	|  |      jsr 18e40 <sqrt>
    a7dc:	|  |      addq.l #8,sp
    a7de:	|  |      move.l d0,d2
    a7e0:	|  |      move.l d1,d3
    a7e2:	|  |      move.l 76(sp),-(sp)
    a7e6:	|  |      jsr 188f0 <__floatsidf>
    a7ec:	|  |      addq.l #4,sp
    a7ee:	|  |      move.l d0,d4
    a7f0:	|  |      move.l d1,d5
    a7f2:	|  |      move.l 60(sp),-(sp)
    a7f6:	|  |      jsr 188f0 <__floatsidf>
    a7fc:	|  |      addq.l #4,sp
    a7fe:	|  |      move.l d1,-(sp)
    a800:	|  |      move.l d0,-(sp)
    a802:	|  |      move.l d5,-(sp)
    a804:	|  |      move.l d4,-(sp)
    a806:	|  |      jsr 18722 <__adddf3>
    a80c:	|  |      lea 16(sp),sp
    a810:	|  |      move.l d1,-(sp)
    a812:	|  |      move.l d0,-(sp)
    a814:	|  |      jsr 18e40 <sqrt>
    a81a:	|  |      addq.l #8,sp
    a81c:	|  |      move.l d1,-(sp)
    a81e:	|  |      move.l d0,-(sp)
    a820:	|  |      move.l d3,-(sp)
    a822:	|  |      move.l d2,-(sp)
    a824:	|  |      jsr 18722 <__adddf3>
    a82a:	|  |      lea 16(sp),sp
    a82e:	|  |      move.l d0,d2
    a830:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a832:	|  |      move.l 80(sp),-(sp)
    a836:	|  |      jsr 188f0 <__floatsidf>
    a83c:	|  |      addq.l #4,sp
    a83e:	|  |      move.l d0,d4
    a840:	|  |      move.l d1,d5
    a842:	|  |      move.l 64(sp),-(sp)
    a846:	|  |      jsr 188f0 <__floatsidf>
    a84c:	|  |      addq.l #4,sp
    a84e:	|  |      move.l d1,-(sp)
    a850:	|  |      move.l d0,-(sp)
    a852:	|  |      move.l d5,-(sp)
    a854:	|  |      move.l d4,-(sp)
    a856:	|  |      jsr 18722 <__adddf3>
    a85c:	|  |      lea 16(sp),sp
    a860:	|  |      move.l d1,-(sp)
    a862:	|  |      move.l d0,-(sp)
    a864:	|  |      jsr 18e40 <sqrt>
    a86a:	|  |      addq.l #8,sp
    a86c:	|  |      move.l d0,d4
    a86e:	|  |      move.l d1,d5
    a870:	|  |      move.l 72(sp),-(sp)
    a874:	|  |      jsr 188f0 <__floatsidf>
    a87a:	|  |      addq.l #4,sp
    a87c:	|  |      move.l d0,d6
    a87e:	|  |      move.l d1,d7
    a880:	|  |      move.l 56(sp),-(sp)
    a884:	|  |      jsr 188f0 <__floatsidf>
    a88a:	|  |      addq.l #4,sp
    a88c:	|  |      move.l d1,-(sp)
    a88e:	|  |      move.l d0,-(sp)
    a890:	|  |      move.l d7,-(sp)
    a892:	|  |      move.l d6,-(sp)
    a894:	|  |      jsr 18722 <__adddf3>
    a89a:	|  |      lea 16(sp),sp
    a89e:	|  |      move.l d1,-(sp)
    a8a0:	|  |      move.l d0,-(sp)
    a8a2:	|  |      jsr 18e40 <sqrt>
    a8a8:	|  |      addq.l #8,sp
    a8aa:	|  |      move.l d1,-(sp)
    a8ac:	|  |      move.l d0,-(sp)
    a8ae:	|  |      move.l d5,-(sp)
    a8b0:	|  |      move.l d4,-(sp)
    a8b2:	|  |      jsr 18722 <__adddf3>
    a8b8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a8bc:	|  |      move.l d1,-(sp)
    a8be:	|  |      move.l d0,-(sp)
    a8c0:	|  |      move.l d3,-(sp)
    a8c2:	|  |      move.l d2,-(sp)
    a8c4:	|  |      jsr 18b08 <__ltdf2>
    a8ca:	|  |      lea 16(sp),sp
    a8ce:	|  |      tst.l d0
    a8d0:	|  |  ,-- bge.s a8e8 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a8d2:	|  |  |   movea.l 152(sp),a0
    a8d6:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a8dc:	|  |  |   movea.l 152(sp),a0
    a8e0:	|  |  |   move.l 120(sp),52(a0)
    a8e6:	|  +--|-- bra.s a8fc <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a8e8:	|  |  '-> movea.l 152(sp),a0
    a8ec:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a8f2:	|  |      movea.l 152(sp),a0
    a8f6:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a8fc:	|  '----> movea.l 152(sp),a0
    a900:	|         move.l 52(a0),d0
    a904:	|         move.l d0,-(sp)
    a906:	|         jsr 18930 <__floatsisf>
    a90c:	|         addq.l #4,sp
    a90e:	|         move.l d0,d1
    a910:	|         movea.l 152(sp),a0
    a914:	|         move.l 4(a0),d0
    a918:	|         move.l d0,-(sp)
    a91a:	|         move.l d1,-(sp)
    a91c:	|         jsr 18c24 <__subsf3>
    a922:	|         addq.l #8,sp
    a924:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a928:	|         movea.l 152(sp),a0
    a92c:	|         move.l (a0),d2
    a92e:	|         movea.l 152(sp),a0
    a932:	|         move.l 48(a0),d0
    a936:	|         move.l d0,-(sp)
    a938:	|         jsr 18930 <__floatsisf>
    a93e:	|         addq.l #4,sp
    a940:	|         move.l d0,-(sp)
    a942:	|         move.l d2,-(sp)
    a944:	|         jsr 18c24 <__subsf3>
    a94a:	|         addq.l #8,sp
    a94c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a950:	|         clr.l -(sp)
    a952:	|         move.l 52(sp),-(sp)
    a956:	|         jsr 18b8c <__nesf2>
    a95c:	|         addq.l #8,sp
    a95e:	|         tst.l d0
    a960:	|     ,-- bne.s a974 <doBorderStuff+0x628>
    a962:	|     |   clr.l -(sp)
    a964:	|     |   move.l 56(sp),-(sp)
    a968:	|     |   jsr 18b8c <__nesf2>
    a96e:	|     |   addq.l #8,sp
    a970:	|     |   tst.l d0
    a972:	|  ,--|-- beq.s a9ea <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a974:	|  |  '-> move.l 52(sp),d0
    a978:	|  |      move.l d0,-(sp)
    a97a:	|  |      move.l d0,-(sp)
    a97c:	|  |      jsr 186ec <__addsf3>
    a982:	|  |      addq.l #8,sp
    a984:	|  |      move.l d0,-(sp)
    a986:	|  |      move.l 52(sp),-(sp)
    a98a:	|  |      jsr 18c90 <atan2f>
    a990:	|  |      addq.l #8,sp
    a992:	|  |      move.l d0,-(sp)
    a994:	|  |      jsr 18852 <__extendsfdf2>
    a99a:	|  |      addq.l #4,sp
    a99c:	|  |      move.l #-1540411785,-(sp)
    a9a2:	|  |      move.l #1078765033,-(sp)
    a9a8:	|  |      move.l d1,-(sp)
    a9aa:	|  |      move.l d0,-(sp)
    a9ac:	|  |      jsr 18980 <__muldf3>
    a9b2:	|  |      lea 16(sp),sp
    a9b6:	|  |      clr.l -(sp)
    a9b8:	|  |      move.l #1080459264,-(sp)
    a9be:	|  |      move.l d1,-(sp)
    a9c0:	|  |      move.l d0,-(sp)
    a9c2:	|  |      jsr 18722 <__adddf3>
    a9c8:	|  |      lea 16(sp),sp
    a9cc:	|  |      move.l d1,-(sp)
    a9ce:	|  |      move.l d0,-(sp)
    a9d0:	|  |      jsr 18892 <__fixdfsi>
    a9d6:	|  |      addq.l #8,sp
    a9d8:	|  |      movea.l 152(sp),a0
    a9dc:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a9e0:	|  |      movea.l 152(sp),a0
    a9e4:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a9ea:	|  '----> pea 1 <_start+0x1>
    a9ee:	|         move.l 156(sp),-(sp)
    a9f2:	|         jsr 46c4 <setFrames>
    a9f8:	|         addq.l #8,sp
    return TRUE;
    a9fa:	|         moveq #1,d0
}
    a9fc:	'-------> movem.l (sp)+,d2-d7
    aa00:	          lea 124(sp),sp
    aa04:	          rts

0000aa06 <drawPeople>:

void drawPeople () {
    aa06:	                   lea -24(sp),sp
    aa0a:	                   move.l d2,-(sp)

	shufflePeople ();
    aa0c:	                   jsr c504 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    aa12:	                   move.l 1e8da <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    aa1a:	                   clr.l 20(sp)
	overRegion = NULL;
    aa1e:	                   clr.l 1e98a <overRegion>

	while (thisPerson) {
    aa24:	   ,-------------- bra.w afd6 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    aa28:	,--|-------------> movea.l 24(sp),a0
    aa2c:	|  |               move.w 104(a0),d0
    aa30:	|  |  ,----------- beq.w ad8a <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    aa34:	|  |  |            movea.l 24(sp),a0
    aa38:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    aa3e:	|  |  |            movea.l 24(sp),a0
    aa42:	|  |  |            move.l 76(a0),d0
    aa46:	|  |  |            cmp.l 20(sp),d0
    aa4a:	|  |  |  ,-------- beq.w ac18 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    aa4e:	|  |  |  |         movea.l 24(sp),a0
    aa52:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    aa56:	|  |  |  |         movea.l 24(sp),a0
    aa5a:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    aa60:	|  |  |  |         movea.l 24(sp),a0
    aa64:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    aa68:	|  |  |  |         movea.l 20(sp),a0
    aa6c:	|  |  |  |         movea.l 4(a0),a0
    aa70:	|  |  |  |         move.l 4(a0),d0
    aa74:	|  |  |  |         movea.l 24(sp),a0
    aa78:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    aa7c:	|  |  |  |         movea.l 20(sp),a0
    aa80:	|  |  |  |         movea.l 4(a0),a1
    aa84:	|  |  |  |         movea.l 24(sp),a0
    aa88:	|  |  |  |         move.l 84(a0),d0
    aa8c:	|  |  |  |         move.l d0,d1
    aa8e:	|  |  |  |         move.l d1,d0
    aa90:	|  |  |  |         add.l d0,d0
    aa92:	|  |  |  |         add.l d1,d0
    aa94:	|  |  |  |         add.l d0,d0
    aa96:	|  |  |  |         add.l d0,d0
    aa98:	|  |  |  |         lea (0,a1,d0.l),a0
    aa9c:	|  |  |  |         move.l 8(a0),d0
    aaa0:	|  |  |  |     ,-- ble.w ab42 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    aaa4:	|  |  |  |     |   movea.l 20(sp),a0
    aaa8:	|  |  |  |     |   movea.l 4(a0),a1
    aaac:	|  |  |  |     |   movea.l 24(sp),a0
    aab0:	|  |  |  |     |   move.l 84(a0),d0
    aab4:	|  |  |  |     |   move.l d0,d1
    aab6:	|  |  |  |     |   move.l d1,d0
    aab8:	|  |  |  |     |   add.l d0,d0
    aaba:	|  |  |  |     |   add.l d1,d0
    aabc:	|  |  |  |     |   add.l d0,d0
    aabe:	|  |  |  |     |   add.l d0,d0
    aac0:	|  |  |  |     |   lea (0,a1,d0.l),a0
    aac4:	|  |  |  |     |   move.l 8(a0),d0
    aac8:	|  |  |  |     |   clr.l -(sp)
    aaca:	|  |  |  |     |   move.l d0,-(sp)
    aacc:	|  |  |  |     |   jsr dc18 <startSound>
    aad2:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    aad4:	|  |  |  |     |   movea.l 24(sp),a0
    aad8:	|  |  |  |     |   move.l 84(a0),d0
    aadc:	|  |  |  |     |   addq.l #1,d0
    aade:	|  |  |  |     |   movea.l 24(sp),a0
    aae2:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aae6:	|  |  |  |     |   movea.l 24(sp),a0
    aaea:	|  |  |  |     |   move.l 84(a0),d0
    aaee:	|  |  |  |     |   movea.l 24(sp),a0
    aaf2:	|  |  |  |     |   movea.l 72(a0),a0
    aaf6:	|  |  |  |     |   move.l 8(a0),d1
    aafa:	|  |  |  |     |   move.l d1,-(sp)
    aafc:	|  |  |  |     |   move.l d0,-(sp)
    aafe:	|  |  |  |     |   jsr 18f36 <__modsi3>
    ab04:	|  |  |  |     |   addq.l #8,sp
    ab06:	|  |  |  |     |   movea.l 24(sp),a0
    ab0a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ab0e:	|  |  |  |     |   movea.l 24(sp),a0
    ab12:	|  |  |  |     |   movea.l 72(a0),a0
    ab16:	|  |  |  |     |   movea.l 4(a0),a1
    ab1a:	|  |  |  |     |   movea.l 24(sp),a0
    ab1e:	|  |  |  |     |   move.l 84(a0),d0
    ab22:	|  |  |  |     |   move.l d0,d1
    ab24:	|  |  |  |     |   move.l d1,d0
    ab26:	|  |  |  |     |   add.l d0,d0
    ab28:	|  |  |  |     |   add.l d1,d0
    ab2a:	|  |  |  |     |   add.l d0,d0
    ab2c:	|  |  |  |     |   add.l d0,d0
    ab2e:	|  |  |  |     |   lea (0,a1,d0.l),a0
    ab32:	|  |  |  |     |   move.l 4(a0),d0
    ab36:	|  |  |  |     |   movea.l 24(sp),a0
    ab3a:	|  |  |  |     |   move.l d0,88(a0)
    ab3e:	|  |  |  |  ,--|-- bra.w ac80 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    ab42:	|  |  |  |  |  '-> movea.l 20(sp),a0
    ab46:	|  |  |  |  |      movea.l 4(a0),a1
    ab4a:	|  |  |  |  |      movea.l 24(sp),a0
    ab4e:	|  |  |  |  |      move.l 84(a0),d0
    ab52:	|  |  |  |  |      move.l d0,d1
    ab54:	|  |  |  |  |      move.l d1,d0
    ab56:	|  |  |  |  |      add.l d0,d0
    ab58:	|  |  |  |  |      add.l d1,d0
    ab5a:	|  |  |  |  |      add.l d0,d0
    ab5c:	|  |  |  |  |      add.l d0,d0
    ab5e:	|  |  |  |  |      lea (0,a1,d0.l),a0
    ab62:	|  |  |  |  |      move.l 8(a0),d0
    ab66:	|  |  |  |  +----- beq.w ac80 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    ab6a:	|  |  |  |  |      movea.l 1e844 <noStack>,a1
    ab70:	|  |  |  |  |      movea.l 20(sp),a0
    ab74:	|  |  |  |  |      move.l 4(a0),d2
    ab78:	|  |  |  |  |      movea.l 24(sp),a0
    ab7c:	|  |  |  |  |      move.l 84(a0),d0
    ab80:	|  |  |  |  |      move.l d0,d1
    ab82:	|  |  |  |  |      move.l d1,d0
    ab84:	|  |  |  |  |      add.l d0,d0
    ab86:	|  |  |  |  |      add.l d1,d0
    ab88:	|  |  |  |  |      add.l d0,d0
    ab8a:	|  |  |  |  |      add.l d0,d0
    ab8c:	|  |  |  |  |      movea.l d2,a0
    ab8e:	|  |  |  |  |      adda.l d0,a0
    ab90:	|  |  |  |  |      move.l 8(a0),d0
    ab94:	|  |  |  |  |      neg.l d0
    ab96:	|  |  |  |  |      pea 1 <_start+0x1>
    ab9a:	|  |  |  |  |      move.l a1,-(sp)
    ab9c:	|  |  |  |  |      clr.l -(sp)
    ab9e:	|  |  |  |  |      clr.l -(sp)
    aba0:	|  |  |  |  |      move.l d0,-(sp)
    aba2:	|  |  |  |  |      jsr 7d2a <startNewFunctionNum>
    aba8:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    abac:	|  |  |  |  |      movea.l 24(sp),a0
    abb0:	|  |  |  |  |      move.l 84(a0),d0
    abb4:	|  |  |  |  |      addq.l #1,d0
    abb6:	|  |  |  |  |      movea.l 24(sp),a0
    abba:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    abbe:	|  |  |  |  |      movea.l 24(sp),a0
    abc2:	|  |  |  |  |      move.l 84(a0),d0
    abc6:	|  |  |  |  |      movea.l 24(sp),a0
    abca:	|  |  |  |  |      movea.l 72(a0),a0
    abce:	|  |  |  |  |      move.l 8(a0),d1
    abd2:	|  |  |  |  |      move.l d1,-(sp)
    abd4:	|  |  |  |  |      move.l d0,-(sp)
    abd6:	|  |  |  |  |      jsr 18f36 <__modsi3>
    abdc:	|  |  |  |  |      addq.l #8,sp
    abde:	|  |  |  |  |      movea.l 24(sp),a0
    abe2:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    abe6:	|  |  |  |  |      movea.l 24(sp),a0
    abea:	|  |  |  |  |      movea.l 72(a0),a0
    abee:	|  |  |  |  |      movea.l 4(a0),a1
    abf2:	|  |  |  |  |      movea.l 24(sp),a0
    abf6:	|  |  |  |  |      move.l 84(a0),d0
    abfa:	|  |  |  |  |      move.l d0,d1
    abfc:	|  |  |  |  |      move.l d1,d0
    abfe:	|  |  |  |  |      add.l d0,d0
    ac00:	|  |  |  |  |      add.l d1,d0
    ac02:	|  |  |  |  |      add.l d0,d0
    ac04:	|  |  |  |  |      add.l d0,d0
    ac06:	|  |  |  |  |      lea (0,a1,d0.l),a0
    ac0a:	|  |  |  |  |      move.l 4(a0),d0
    ac0e:	|  |  |  |  |      movea.l 24(sp),a0
    ac12:	|  |  |  |  |      move.l d0,88(a0)
    ac16:	|  |  |  |  +----- bra.s ac80 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    ac18:	|  |  |  '--|----> movea.l 24(sp),a0
    ac1c:	|  |  |     |      move.l (a0),d0
    ac1e:	|  |  |     |      movea.l 24(sp),a0
    ac22:	|  |  |     |      move.l 8(a0),d1
    ac26:	|  |  |     |      move.l d1,-(sp)
    ac28:	|  |  |     |      move.l d0,-(sp)
    ac2a:	|  |  |     |      jsr 1881c <__eqsf2>
    ac30:	|  |  |     |      addq.l #8,sp
    ac32:	|  |  |     |      tst.l d0
    ac34:	|  |  |     |  ,-- bne.s ac78 <drawPeople+0x272>
    ac36:	|  |  |     |  |   movea.l 24(sp),a0
    ac3a:	|  |  |     |  |   move.l 4(a0),d0
    ac3e:	|  |  |     |  |   movea.l 24(sp),a0
    ac42:	|  |  |     |  |   move.l 12(a0),d1
    ac46:	|  |  |     |  |   move.l d1,-(sp)
    ac48:	|  |  |     |  |   move.l d0,-(sp)
    ac4a:	|  |  |     |  |   jsr 1881c <__eqsf2>
    ac50:	|  |  |     |  |   addq.l #8,sp
    ac52:	|  |  |     |  |   tst.l d0
    ac54:	|  |  |     |  +-- bne.s ac78 <drawPeople+0x272>
    ac56:	|  |  |     |  |   movea.l 20(sp),a0
    ac5a:	|  |  |     |  |   move.l 8(a0),d0
    ac5e:	|  |  |     |  |   moveq #1,d1
    ac60:	|  |  |     |  |   cmp.l d0,d1
    ac62:	|  |  |     |  +-- bne.s ac78 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    ac64:	|  |  |     |  |   movea.l 24(sp),a0
    ac68:	|  |  |     |  |   move.l 16(a0),d0
    ac6c:	|  |  |     |  |   addq.l #1,d0
    ac6e:	|  |  |     |  |   movea.l 24(sp),a0
    ac72:	|  |  |     |  |   move.l d0,16(a0)
    ac76:	|  |  |     +--|-- bra.s ac80 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    ac78:	|  |  |     |  '-> movea.l 24(sp),a0
    ac7c:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    ac80:	|  |  |     '----> movea.l 24(sp),a0
    ac84:	|  |  |            move.l (a0),d0
    ac86:	|  |  |            movea.l 24(sp),a0
    ac8a:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    ac8e:	|  |  |            movea.l 24(sp),a0
    ac92:	|  |  |            move.l 4(a0),d0
    ac96:	|  |  |            movea.l 24(sp),a0
    ac9a:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    ac9e:	|  |  |            movea.l 20(sp),a0
    aca2:	|  |  |            movea.l 4(a0),a1
    aca6:	|  |  |            movea.l 24(sp),a0
    acaa:	|  |  |            move.l 84(a0),d0
    acae:	|  |  |            move.l d0,d1
    acb0:	|  |  |            move.l d1,d0
    acb2:	|  |  |            add.l d0,d0
    acb4:	|  |  |            add.l d1,d0
    acb6:	|  |  |            add.l d0,d0
    acb8:	|  |  |            add.l d0,d0
    acba:	|  |  |            lea (0,a1,d0.l),a0
    acbe:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    acc2:	|  |  |            move.l 8(sp),d0
    acc6:	|  |  |            add.l d0,d0
    acc8:	|  |  |            subx.l d0,d0
    acca:	|  |  |            neg.l d0
    accc:	|  |  |            move.b d0,d0
    acce:	|  |  |            move.b d0,d0
    acd0:	|  |  |            andi.l #255,d0
    acd6:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    acda:	|  |  |            move.l 8(sp),-(sp)
    acde:	|  |  |            jsr 9bda <TF_abs>
    ace4:	|  |  |            addq.l #4,sp
    ace6:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    acea:	|  |  |            movea.l 20(sp),a0
    acee:	|  |  |            movea.l (a0),a0
    acf0:	|  |  |            move.l 8(a0),d0
    acf4:	|  |  |            cmp.l 12(sp),d0
    acf8:	|  |  |        ,-- bgt.s ad08 <drawPeople+0x302>
				fNum = 0;
    acfa:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    acfe:	|  |  |        |   moveq #2,d0
    ad00:	|  |  |        |   sub.l 16(sp),d0
    ad04:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    ad08:	|  |  |        '-> moveq #2,d1
    ad0a:	|  |  |            cmp.l 16(sp),d1
    ad0e:	|  |  +----------- beq.s ad8a <drawPeople+0x384>
				BOOL r = FALSE;
    ad10:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    ad14:	|  |  |            move.l 16(sp),d0
    ad18:	|  |  |            movea.w d0,a0
    ad1a:	|  |  |            movea.l 20(sp),a1
    ad1e:	|  |  |            movea.l (a1),a1
    ad20:	|  |  |            movea.l 16(a1),a1
    ad24:	|  |  |            move.l 12(sp),d1
    ad28:	|  |  |            move.l d1,d0
    ad2a:	|  |  |            lsl.l #3,d0
    ad2c:	|  |  |            sub.l d1,d0
    ad2e:	|  |  |            add.l d0,d0
    ad30:	|  |  |            add.l d0,d0
    ad32:	|  |  |            add.l a1,d0
    ad34:	|  |  |            move.l a0,-(sp)
    ad36:	|  |  |            move.l 28(sp),-(sp)
    ad3a:	|  |  |            move.l d0,-(sp)
    ad3c:	|  |  |            jsr 98fc <scaleSprite>
    ad42:	|  |  |            lea 12(sp),sp
    ad46:	|  |  |            move.w d0,6(sp)
				if (r) {
    ad4a:	|  |  +----------- beq.s ad8a <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    ad4c:	|  |  |            movea.l 24(sp),a0
    ad50:	|  |  |            movea.l 114(a0),a0
    ad54:	|  |  |            movea.l (a0),a0
    ad56:	|  |  |            move.b (a0),d0
    ad58:	|  |  +----------- beq.s ad8a <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    ad5a:	|  |  |            move.l 1e8fa <personRegion+0x1c>,d1
    ad60:	|  |  |            movea.l 24(sp),a0
    ad64:	|  |  |            move.l 114(a0),d0
    ad68:	|  |  |            cmp.l d1,d0
    ad6a:	|  |  |        ,-- beq.s ad72 <drawPeople+0x36c>
    ad6c:	|  |  |        |   clr.l 1e83c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    ad72:	|  |  |        '-> movea.l 24(sp),a0
    ad76:	|  |  |            move.l 114(a0),d0
    ad7a:	|  |  |            move.l d0,1e8fa <personRegion+0x1c>
						overRegion = & personRegion;
    ad80:	|  |  |            move.l #125150,1e98a <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    ad8a:	|  |  '----------> movea.l 24(sp),a0
    ad8e:	|  |               move.l 88(a0),d0
    ad92:	|  |               subq.l #1,d0
    ad94:	|  |               movea.l 24(sp),a0
    ad98:	|  |               move.l d0,88(a0)
    ad9c:	|  |               movea.l 24(sp),a0
    ada0:	|  |               move.l 88(a0),d0
    ada4:	|  |        ,----- bne.w afcc <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    ada8:	|  |        |      movea.l 24(sp),a0
    adac:	|  |        |      move.l 84(a0),d0
    adb0:	|  |        |      addq.l #1,d0
    adb2:	|  |        |      movea.l 24(sp),a0
    adb6:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    adba:	|  |        |      movea.l 24(sp),a0
    adbe:	|  |        |      move.l 84(a0),d0
    adc2:	|  |        |      movea.l 24(sp),a0
    adc6:	|  |        |      movea.l 72(a0),a0
    adca:	|  |        |      move.l 8(a0),d1
    adce:	|  |        |      move.l d1,-(sp)
    add0:	|  |        |      move.l d0,-(sp)
    add2:	|  |        |      jsr 18f36 <__modsi3>
    add8:	|  |        |      addq.l #8,sp
    adda:	|  |        |      movea.l 24(sp),a0
    adde:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ade2:	|  |        |      movea.l 24(sp),a0
    ade6:	|  |        |      movea.l 72(a0),a0
    adea:	|  |        |      movea.l 4(a0),a1
    adee:	|  |        |      movea.l 24(sp),a0
    adf2:	|  |        |      move.l 84(a0),d0
    adf6:	|  |        |      move.l d0,d1
    adf8:	|  |        |      move.l d1,d0
    adfa:	|  |        |      add.l d0,d0
    adfc:	|  |        |      add.l d1,d0
    adfe:	|  |        |      add.l d0,d0
    ae00:	|  |        |      add.l d0,d0
    ae02:	|  |        |      lea (0,a1,d0.l),a0
    ae06:	|  |        |      move.l 4(a0),d0
    ae0a:	|  |        |      movea.l 24(sp),a0
    ae0e:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    ae12:	|  |        |      movea.l 24(sp),a0
    ae16:	|  |        |      move.w 104(a0),d0
    ae1a:	|  |        +----- beq.w afcc <drawPeople+0x5c6>
    ae1e:	|  |        |      tst.l 20(sp)
    ae22:	|  |        +----- beq.w afcc <drawPeople+0x5c6>
    ae26:	|  |        |      movea.l 20(sp),a0
    ae2a:	|  |        |      move.l 4(a0),d0
    ae2e:	|  |        +----- beq.w afcc <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    ae32:	|  |        |      movea.l 20(sp),a0
    ae36:	|  |        |      movea.l 4(a0),a1
    ae3a:	|  |        |      movea.l 24(sp),a0
    ae3e:	|  |        |      move.l 84(a0),d0
    ae42:	|  |        |      move.l d0,d1
    ae44:	|  |        |      move.l d1,d0
    ae46:	|  |        |      add.l d0,d0
    ae48:	|  |        |      add.l d1,d0
    ae4a:	|  |        |      add.l d0,d0
    ae4c:	|  |        |      add.l d0,d0
    ae4e:	|  |        |      lea (0,a1,d0.l),a0
    ae52:	|  |        |      move.l 8(a0),d0
    ae56:	|  |        |  ,-- ble.w aef8 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    ae5a:	|  |        |  |   movea.l 20(sp),a0
    ae5e:	|  |        |  |   movea.l 4(a0),a1
    ae62:	|  |        |  |   movea.l 24(sp),a0
    ae66:	|  |        |  |   move.l 84(a0),d0
    ae6a:	|  |        |  |   move.l d0,d1
    ae6c:	|  |        |  |   move.l d1,d0
    ae6e:	|  |        |  |   add.l d0,d0
    ae70:	|  |        |  |   add.l d1,d0
    ae72:	|  |        |  |   add.l d0,d0
    ae74:	|  |        |  |   add.l d0,d0
    ae76:	|  |        |  |   lea (0,a1,d0.l),a0
    ae7a:	|  |        |  |   move.l 8(a0),d0
    ae7e:	|  |        |  |   clr.l -(sp)
    ae80:	|  |        |  |   move.l d0,-(sp)
    ae82:	|  |        |  |   jsr dc18 <startSound>
    ae88:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    ae8a:	|  |        |  |   movea.l 24(sp),a0
    ae8e:	|  |        |  |   move.l 84(a0),d0
    ae92:	|  |        |  |   addq.l #1,d0
    ae94:	|  |        |  |   movea.l 24(sp),a0
    ae98:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ae9c:	|  |        |  |   movea.l 24(sp),a0
    aea0:	|  |        |  |   move.l 84(a0),d0
    aea4:	|  |        |  |   movea.l 24(sp),a0
    aea8:	|  |        |  |   movea.l 72(a0),a0
    aeac:	|  |        |  |   move.l 8(a0),d1
    aeb0:	|  |        |  |   move.l d1,-(sp)
    aeb2:	|  |        |  |   move.l d0,-(sp)
    aeb4:	|  |        |  |   jsr 18f36 <__modsi3>
    aeba:	|  |        |  |   addq.l #8,sp
    aebc:	|  |        |  |   movea.l 24(sp),a0
    aec0:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aec4:	|  |        |  |   movea.l 24(sp),a0
    aec8:	|  |        |  |   movea.l 72(a0),a0
    aecc:	|  |        |  |   movea.l 4(a0),a1
    aed0:	|  |        |  |   movea.l 24(sp),a0
    aed4:	|  |        |  |   move.l 84(a0),d0
    aed8:	|  |        |  |   move.l d0,d1
    aeda:	|  |        |  |   move.l d1,d0
    aedc:	|  |        |  |   add.l d0,d0
    aede:	|  |        |  |   add.l d1,d0
    aee0:	|  |        |  |   add.l d0,d0
    aee2:	|  |        |  |   add.l d0,d0
    aee4:	|  |        |  |   lea (0,a1,d0.l),a0
    aee8:	|  |        |  |   move.l 4(a0),d0
    aeec:	|  |        |  |   movea.l 24(sp),a0
    aef0:	|  |        |  |   move.l d0,88(a0)
    aef4:	|  |        +--|-- bra.w afcc <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    aef8:	|  |        |  '-> movea.l 20(sp),a0
    aefc:	|  |        |      movea.l 4(a0),a1
    af00:	|  |        |      movea.l 24(sp),a0
    af04:	|  |        |      move.l 84(a0),d0
    af08:	|  |        |      move.l d0,d1
    af0a:	|  |        |      move.l d1,d0
    af0c:	|  |        |      add.l d0,d0
    af0e:	|  |        |      add.l d1,d0
    af10:	|  |        |      add.l d0,d0
    af12:	|  |        |      add.l d0,d0
    af14:	|  |        |      lea (0,a1,d0.l),a0
    af18:	|  |        |      move.l 8(a0),d0
    af1c:	|  |        +----- beq.w afcc <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    af20:	|  |        |      movea.l 1e844 <noStack>,a1
    af26:	|  |        |      movea.l 20(sp),a0
    af2a:	|  |        |      move.l 4(a0),d2
    af2e:	|  |        |      movea.l 24(sp),a0
    af32:	|  |        |      move.l 84(a0),d0
    af36:	|  |        |      move.l d0,d1
    af38:	|  |        |      move.l d1,d0
    af3a:	|  |        |      add.l d0,d0
    af3c:	|  |        |      add.l d1,d0
    af3e:	|  |        |      add.l d0,d0
    af40:	|  |        |      add.l d0,d0
    af42:	|  |        |      movea.l d2,a0
    af44:	|  |        |      adda.l d0,a0
    af46:	|  |        |      move.l 8(a0),d0
    af4a:	|  |        |      neg.l d0
    af4c:	|  |        |      pea 1 <_start+0x1>
    af50:	|  |        |      move.l a1,-(sp)
    af52:	|  |        |      clr.l -(sp)
    af54:	|  |        |      clr.l -(sp)
    af56:	|  |        |      move.l d0,-(sp)
    af58:	|  |        |      jsr 7d2a <startNewFunctionNum>
    af5e:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    af62:	|  |        |      movea.l 24(sp),a0
    af66:	|  |        |      move.l 84(a0),d0
    af6a:	|  |        |      addq.l #1,d0
    af6c:	|  |        |      movea.l 24(sp),a0
    af70:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    af74:	|  |        |      movea.l 24(sp),a0
    af78:	|  |        |      move.l 84(a0),d0
    af7c:	|  |        |      movea.l 24(sp),a0
    af80:	|  |        |      movea.l 72(a0),a0
    af84:	|  |        |      move.l 8(a0),d1
    af88:	|  |        |      move.l d1,-(sp)
    af8a:	|  |        |      move.l d0,-(sp)
    af8c:	|  |        |      jsr 18f36 <__modsi3>
    af92:	|  |        |      addq.l #8,sp
    af94:	|  |        |      movea.l 24(sp),a0
    af98:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    af9c:	|  |        |      movea.l 24(sp),a0
    afa0:	|  |        |      movea.l 72(a0),a0
    afa4:	|  |        |      movea.l 4(a0),a1
    afa8:	|  |        |      movea.l 24(sp),a0
    afac:	|  |        |      move.l 84(a0),d0
    afb0:	|  |        |      move.l d0,d1
    afb2:	|  |        |      move.l d1,d0
    afb4:	|  |        |      add.l d0,d0
    afb6:	|  |        |      add.l d1,d0
    afb8:	|  |        |      add.l d0,d0
    afba:	|  |        |      add.l d0,d0
    afbc:	|  |        |      lea (0,a1,d0.l),a0
    afc0:	|  |        |      move.l 4(a0),d0
    afc4:	|  |        |      movea.l 24(sp),a0
    afc8:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    afcc:	|  |        '----> movea.l 24(sp),a0
    afd0:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    afd6:	|  '-------------> tst.l 24(sp)
    afda:	'----------------- bne.w aa28 <drawPeople+0x22>
	}
}
    afde:	                   nop
    afe0:	                   nop
    afe2:	                   move.l (sp)+,d2
    afe4:	                   lea 24(sp),sp
    afe8:	                   rts

0000afea <findPerson>:


struct onScreenPerson * findPerson (int v) {
    afea:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    afec:	          pea 1a564 <PutChar+0x15c4>
    aff2:	          jsr 184fe <KPrintF>
    aff8:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    affa:	          move.l 1e8da <allPeople>,(sp)
	while (thisPerson) {
    b000:	      ,-- bra.s b018 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    b002:	,-----|-> movea.l (sp),a0
    b004:	|     |   movea.l 114(a0),a0
    b008:	|     |   move.l 4(a0),d0
    b00c:	|     |   cmp.l 8(sp),d0
    b010:	|  ,--|-- beq.s b01e <findPerson+0x34>
		thisPerson = thisPerson -> next;
    b012:	|  |  |   movea.l (sp),a0
    b014:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    b018:	|  |  '-> tst.l (sp)
    b01a:	'--|----- bne.s b002 <findPerson+0x18>
    b01c:	   |  ,-- bra.s b020 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    b01e:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    b020:	      '-> pea 1a578 <PutChar+0x15d8>
    b026:	          jsr 184fe <KPrintF>
    b02c:	          addq.l #4,sp
	return thisPerson;
    b02e:	          move.l (sp),d0
}
    b030:	          addq.l #4,sp
    b032:	          rts

0000b034 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    b034:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    b036:	       move.l 12(sp),-(sp)
    b03a:	       jsr afea <findPerson>
    b040:	       addq.l #4,sp
    b042:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    b044:	   ,-- bne.s b04a <floatCharacter+0x16>
    b046:	   |   clr.w d0
    b048:	,--|-- bra.s b054 <floatCharacter+0x20>
	moveMe -> floaty = f;
    b04a:	|  '-> movea.l (sp),a0
    b04c:	|      move.l 8(sp),24(a0)
	return TRUE;
    b052:	|      moveq #1,d0
}
    b054:	'----> addq.l #4,sp
    b056:	       rts

0000b058 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b058:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    b05a:	          tst.l 8(sp)
    b05e:	      ,-- bne.s b06c <forceWalkingPerson+0x14>
    b060:	      |   tst.l 12(sp)
    b064:	      +-- bne.s b06c <forceWalkingPerson+0x14>
    b066:	      |   clr.w d0
    b068:	,-----|-- bra.w b0fe <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b06c:	|     '-> move.l 16(sp),-(sp)
    b070:	|         jsr afea <findPerson>
    b076:	|         addq.l #4,sp
    b078:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    b07a:	|     ,-- bne.s b080 <forceWalkingPerson+0x28>
    b07c:	|     |   clr.w d0
    b07e:	+-----|-- bra.s b0fe <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b080:	|     '-> movea.l (sp),a0
    b082:	|         move.l 68(a0),d0
    b086:	|     ,-- beq.s b098 <forceWalkingPerson+0x40>
    b088:	|     |   movea.l (sp),a0
    b08a:	|     |   move.l 68(a0),d0
    b08e:	|     |   move.l d0,-(sp)
    b090:	|     |   jsr 55ac <abortFunction>
    b096:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    b098:	|     '-> movea.l (sp),a0
    b09a:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    b0a0:	|         movea.l (sp),a0
    b0a2:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    b0a6:	|         movea.l (sp),a0
    b0a8:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    b0ae:	|         movea.l (sp),a0
    b0b0:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    b0b6:	|         movea.l (sp),a0
    b0b8:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    b0be:	|         movea.l (sp),a0
    b0c0:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    b0c4:	|         movea.l (sp),a0
    b0c6:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    b0ca:	|         move.l (sp),-(sp)
    b0cc:	|         jsr a34c <doBorderStuff>
    b0d2:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    b0d4:	|         pea 1 <_start+0x1>
    b0d8:	|         move.l 4(sp),-(sp)
    b0dc:	|         jsr c992 <walkMe>
    b0e2:	|         addq.l #8,sp
    b0e4:	|         tst.w d0
    b0e6:	|     ,-- bne.s b0f0 <forceWalkingPerson+0x98>
    b0e8:	|     |   movea.l (sp),a0
    b0ea:	|     |   move.w 66(a0),d0
    b0ee:	|  ,--|-- beq.s b0fc <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    b0f0:	|  |  '-> movea.l (sp),a0
    b0f2:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    b0f8:	|  |      moveq #1,d0
    b0fa:	+--|----- bra.s b0fe <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    b0fc:	|  '----> clr.w d0
    }
}
    b0fe:	'-------> addq.l #4,sp
    b100:	          rts

0000b102 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    b102:	                lea -56(sp),sp
    b106:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    b108:	                pea 1a58d <PutChar+0x15ed>
    b10e:	                jsr 184fe <KPrintF>
    b114:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    b116:	                move.l #320,56(sp)
    b11e:	                move.l #200,52(sp)
    b126:	                moveq #-1,d0
    b128:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    b12c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b134:	                clr.l 44(sp)
    b138:	   ,----------- bra.w b310 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    b13c:	,--|----------> movea.l 1e992 <currentFloor>,a0
    b142:	|  |            move.l 12(a0),d1
    b146:	|  |            move.l 44(sp),d0
    b14a:	|  |            lsl.l #3,d0
    b14c:	|  |            movea.l d1,a0
    b14e:	|  |            adda.l d0,a0
    b150:	|  |            move.l (a0),d0
    b152:	|  |            move.l d0,d1
    b154:	|  |            subq.l #1,d1
    b156:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b15a:	|  |            clr.l 40(sp)
    b15e:	|  |     ,----- bra.w b2ee <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    b162:	|  |  ,--|----> movea.l 1e992 <currentFloor>,a0
    b168:	|  |  |  |      move.l 4(a0),d1
    b16c:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b172:	|  |  |  |      movea.l 12(a0),a0
    b176:	|  |  |  |      move.l 44(sp),d0
    b17a:	|  |  |  |      lsl.l #3,d0
    b17c:	|  |  |  |      adda.l d0,a0
    b17e:	|  |  |  |      movea.l 4(a0),a0
    b182:	|  |  |  |      move.l 40(sp),d0
    b186:	|  |  |  |      add.l d0,d0
    b188:	|  |  |  |      add.l d0,d0
    b18a:	|  |  |  |      adda.l d0,a0
    b18c:	|  |  |  |      move.l (a0),d0
    b18e:	|  |  |  |      lsl.l #3,d0
    b190:	|  |  |  |      movea.l d1,a0
    b192:	|  |  |  |      adda.l d0,a0
    b194:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    b198:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b19e:	|  |  |  |      move.l 4(a0),d1
    b1a2:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b1a8:	|  |  |  |      movea.l 12(a0),a0
    b1ac:	|  |  |  |      move.l 44(sp),d0
    b1b0:	|  |  |  |      lsl.l #3,d0
    b1b2:	|  |  |  |      adda.l d0,a0
    b1b4:	|  |  |  |      movea.l 4(a0),a0
    b1b8:	|  |  |  |      move.l 40(sp),d0
    b1bc:	|  |  |  |      add.l d0,d0
    b1be:	|  |  |  |      add.l d0,d0
    b1c0:	|  |  |  |      adda.l d0,a0
    b1c2:	|  |  |  |      move.l (a0),d0
    b1c4:	|  |  |  |      lsl.l #3,d0
    b1c6:	|  |  |  |      movea.l d1,a0
    b1c8:	|  |  |  |      adda.l d0,a0
    b1ca:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    b1d0:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b1d6:	|  |  |  |      move.l 4(a0),d1
    b1da:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b1e0:	|  |  |  |      movea.l 12(a0),a0
    b1e4:	|  |  |  |      move.l 44(sp),d0
    b1e8:	|  |  |  |      lsl.l #3,d0
    b1ea:	|  |  |  |      adda.l d0,a0
    b1ec:	|  |  |  |      movea.l 4(a0),a0
    b1f0:	|  |  |  |      move.l 36(sp),d0
    b1f4:	|  |  |  |      add.l d0,d0
    b1f6:	|  |  |  |      add.l d0,d0
    b1f8:	|  |  |  |      adda.l d0,a0
    b1fa:	|  |  |  |      move.l (a0),d0
    b1fc:	|  |  |  |      lsl.l #3,d0
    b1fe:	|  |  |  |      movea.l d1,a0
    b200:	|  |  |  |      adda.l d0,a0
    b202:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    b206:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b20c:	|  |  |  |      move.l 4(a0),d1
    b210:	|  |  |  |      movea.l 1e992 <currentFloor>,a0
    b216:	|  |  |  |      movea.l 12(a0),a0
    b21a:	|  |  |  |      move.l 44(sp),d0
    b21e:	|  |  |  |      lsl.l #3,d0
    b220:	|  |  |  |      adda.l d0,a0
    b222:	|  |  |  |      movea.l 4(a0),a0
    b226:	|  |  |  |      move.l 36(sp),d0
    b22a:	|  |  |  |      add.l d0,d0
    b22c:	|  |  |  |      add.l d0,d0
    b22e:	|  |  |  |      adda.l d0,a0
    b230:	|  |  |  |      move.l (a0),d0
    b232:	|  |  |  |      lsl.l #3,d0
    b234:	|  |  |  |      movea.l d1,a0
    b236:	|  |  |  |      adda.l d0,a0
    b238:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    b23e:	|  |  |  |      movea.l 68(sp),a0
    b242:	|  |  |  |      move.l (a0),d1
    b244:	|  |  |  |      movea.l 64(sp),a0
    b248:	|  |  |  |      move.l (a0),d0
    b24a:	|  |  |  |      move.l d1,-(sp)
    b24c:	|  |  |  |      move.l d0,-(sp)
    b24e:	|  |  |  |      move.l 24(sp),-(sp)
    b252:	|  |  |  |      move.l 32(sp),-(sp)
    b256:	|  |  |  |      move.l 40(sp),-(sp)
    b25a:	|  |  |  |      move.l 48(sp),-(sp)
    b25e:	|  |  |  |      lea 28(sp),a0
    b262:	|  |  |  |      move.l a0,-(sp)
    b264:	|  |  |  |      lea 36(sp),a0
    b268:	|  |  |  |      move.l a0,-(sp)
    b26a:	|  |  |  |      jsr 172fc <closestPointOnLine>
    b270:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    b274:	|  |  |  |      movea.l 64(sp),a0
    b278:	|  |  |  |      move.l (a0),d0
    b27a:	|  |  |  |      move.l 8(sp),d1
    b27e:	|  |  |  |      move.l d0,d2
    b280:	|  |  |  |      sub.l d1,d2
    b282:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    b286:	|  |  |  |      movea.l 68(sp),a0
    b28a:	|  |  |  |      move.l (a0),d0
    b28c:	|  |  |  |      move.l 4(sp),d1
    b290:	|  |  |  |      move.l d0,d2
    b292:	|  |  |  |      sub.l d1,d2
    b294:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    b298:	|  |  |  |      move.l 28(sp),-(sp)
    b29c:	|  |  |  |      move.l 32(sp),-(sp)
    b2a0:	|  |  |  |      jsr 18e8a <__mulsi3>
    b2a6:	|  |  |  |      addq.l #8,sp
    b2a8:	|  |  |  |      move.l d0,d2
    b2aa:	|  |  |  |      move.l 24(sp),-(sp)
    b2ae:	|  |  |  |      move.l 28(sp),-(sp)
    b2b2:	|  |  |  |      jsr 18e8a <__mulsi3>
    b2b8:	|  |  |  |      addq.l #8,sp
    b2ba:	|  |  |  |      move.l d2,d1
    b2bc:	|  |  |  |      add.l d0,d1
    b2be:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    b2c2:	|  |  |  |      move.l 12(sp),d2
    b2c6:	|  |  |  |      cmp.l 32(sp),d2
    b2ca:	|  |  |  |  ,-- bge.s b2e4 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    b2cc:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    b2d2:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    b2d8:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    b2de:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    b2e4:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b2ea:	|  |  |  |      addq.l #1,40(sp)
    b2ee:	|  |  |  '----> movea.l 1e992 <currentFloor>,a0
    b2f4:	|  |  |         move.l 12(a0),d1
    b2f8:	|  |  |         move.l 44(sp),d0
    b2fc:	|  |  |         lsl.l #3,d0
    b2fe:	|  |  |         movea.l d1,a0
    b300:	|  |  |         adda.l d0,a0
    b302:	|  |  |         move.l (a0),d0
    b304:	|  |  |         cmp.l 40(sp),d0
    b308:	|  |  '-------- bgt.w b162 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b30c:	|  |            addq.l #1,44(sp)
    b310:	|  '----------> movea.l 1e992 <currentFloor>,a0
    b316:	|               move.l 8(a0),d0
    b31a:	|               cmp.l 44(sp),d0
    b31e:	'-------------- bgt.w b13c <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    b322:	                moveq #-1,d0
    b324:	                cmp.l 48(sp),d0
    b328:	            ,-- bne.s b32e <handleClosestPoint+0x22c>
    b32a:	            |   clr.w d0
    b32c:	         ,--|-- bra.s b348 <handleClosestPoint+0x246>
	*setX = gotX;
    b32e:	         |  '-> movea.l 64(sp),a0
    b332:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    b336:	         |      movea.l 68(sp),a0
    b33a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    b33e:	         |      movea.l 72(sp),a0
    b342:	         |      move.l 48(sp),(a0)

	return TRUE;
    b346:	         |      moveq #1,d0
}
    b348:	         '----> move.l (sp)+,d2
    b34a:	                lea 56(sp),sp
    b34e:	                rts

0000b350 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    b350:	clr.l 1e8ee <personRegion+0x10>
	personRegion.sY = 0;
    b356:	clr.l 1e8f2 <personRegion+0x14>
	personRegion.di = -1;
    b35c:	moveq #-1,d0
    b35e:	move.l d0,1e8f6 <personRegion+0x18>
	allScreenRegions = NULL;
    b364:	clr.l 1e986 <allScreenRegions>

	return TRUE;
    b36a:	moveq #1,d0
}
    b36c:	rts

0000b36e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    b36e:	          subq.l #4,sp
    b370:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    b372:	          tst.l 12(sp)
    b376:	      ,-- bne.s b37e <jumpPerson+0x10>
    b378:	      |   tst.l 16(sp)
    b37c:	,-----|-- beq.s b3f2 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b37e:	|     '-> move.l 20(sp),-(sp)
    b382:	|         jsr afea <findPerson>
    b388:	|         addq.l #4,sp
    b38a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    b38e:	|  ,----- beq.s b3f6 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b390:	|  |      movea.l 4(sp),a0
    b394:	|  |      move.l 68(a0),d0
    b398:	|  |  ,-- beq.s b3ac <jumpPerson+0x3e>
    b39a:	|  |  |   movea.l 4(sp),a0
    b39e:	|  |  |   move.l 68(a0),d0
    b3a2:	|  |  |   move.l d0,-(sp)
    b3a4:	|  |  |   jsr 55ac <abortFunction>
    b3aa:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    b3ac:	|  |  '-> movea.l 4(sp),a0
    b3b0:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    b3b4:	|  |      movea.l 4(sp),a0
    b3b8:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    b3bc:	|  |      movea.l 4(sp),a0
    b3c0:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    b3c4:	|  |      move.l 16(sp),-(sp)
    b3c8:	|  |      jsr 18930 <__floatsisf>
    b3ce:	|  |      addq.l #4,sp
    b3d0:	|  |      move.l d0,d2
    b3d2:	|  |      move.l 12(sp),-(sp)
    b3d6:	|  |      jsr 18930 <__floatsisf>
    b3dc:	|  |      addq.l #4,sp
    b3de:	|  |      move.l d2,-(sp)
    b3e0:	|  |      move.l d0,-(sp)
    b3e2:	|  |      move.l 12(sp),-(sp)
    b3e6:	|  |      jsr b794 <moveAndScale>
    b3ec:	|  |      lea 12(sp),sp
    b3f0:	|  |  ,-- bra.s b3f8 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    b3f2:	'--|--|-> nop
    b3f4:	   |  +-- bra.s b3f8 <jumpPerson+0x8a>
    if (!moveMe) return;
    b3f6:	   '--|-> nop
}
    b3f8:	      '-> move.l (sp)+,d2
    b3fa:	          addq.l #4,sp
    b3fc:	          rts

0000b3fe <killAllPeople>:


void killAllPeople () {
    b3fe:	          subq.l #8,sp
    b400:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    b402:	   ,----- bra.s b46e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    b404:	,--|----> movea.l 1e8da <allPeople>,a0
    b40a:	|  |      move.l 68(a0),d0
    b40e:	|  |  ,-- beq.s b424 <killAllPeople+0x26>
    b410:	|  |  |   movea.l 1e8da <allPeople>,a0
    b416:	|  |  |   move.l 68(a0),d0
    b41a:	|  |  |   move.l d0,-(sp)
    b41c:	|  |  |   jsr 55ac <abortFunction>
    b422:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    b424:	|  |  '-> movea.l 1e8da <allPeople>,a0
    b42a:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    b42e:	|  |      move.l 1e8da <allPeople>,8(sp)
		allPeople = allPeople -> next;
    b436:	|  |      movea.l 1e8da <allPeople>,a0
    b43c:	|  |      move.l 36(a0),d0
    b440:	|  |      move.l d0,1e8da <allPeople>
		removeObjectType (killPeople -> thisType);
    b446:	|  |      movea.l 8(sp),a0
    b44a:	|  |      move.l 114(a0),d0
    b44e:	|  |      move.l d0,-(sp)
    b450:	|  |      jsr e300 <removeObjectType>
    b456:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    b458:	|  |      move.l 8(sp),4(sp)
    b45e:	|  |      move.l 1e876 <SysBase>,d0
    b464:	|  |      movea.l d0,a6
    b466:	|  |      movea.l 4(sp),a1
    b46a:	|  |      jsr -690(a6)
	while (allPeople) {
    b46e:	|  '----> move.l 1e8da <allPeople>,d0
    b474:	'-------- bne.s b404 <killAllPeople+0x6>
	}
}
    b476:	          nop
    b478:	          nop
    b47a:	          movea.l (sp)+,a6
    b47c:	          addq.l #8,sp
    b47e:	          rts

0000b480 <killMostPeople>:

void killMostPeople() {
    b480:	          lea -12(sp),sp
    b484:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    b486:	          move.l #125146,12(sp)

    while (*lookyHere) {
    b48e:	   ,----- bra.w b514 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    b492:	,--|----> movea.l 12(sp),a0
    b496:	|  |      movea.l (a0),a0
    b498:	|  |      move.l 118(a0),d0
    b49c:	|  |      moveq #32,d1
    b49e:	|  |      and.l d1,d0
    b4a0:	|  |  ,-- beq.s b4b2 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    b4a2:	|  |  |   movea.l 12(sp),a0
    b4a6:	|  |  |   move.l (a0),d0
    b4a8:	|  |  |   moveq #36,d1
    b4aa:	|  |  |   add.l d0,d1
    b4ac:	|  |  |   move.l d1,12(sp)
    b4b0:	|  +--|-- bra.s b514 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b4b2:	|  |  '-> movea.l 12(sp),a0
    b4b6:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b4ba:	|  |      movea.l 8(sp),a0
    b4be:	|  |      move.l 36(a0),d0
    b4c2:	|  |      movea.l 12(sp),a0
    b4c6:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b4c8:	|  |      movea.l 8(sp),a0
    b4cc:	|  |      move.l 68(a0),d0
    b4d0:	|  |  ,-- beq.s b4e4 <killMostPeople+0x64>
    b4d2:	|  |  |   movea.l 8(sp),a0
    b4d6:	|  |  |   move.l 68(a0),d0
    b4da:	|  |  |   move.l d0,-(sp)
    b4dc:	|  |  |   jsr 55ac <abortFunction>
    b4e2:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b4e4:	|  |  '-> movea.l 8(sp),a0
    b4e8:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b4ec:	|  |      movea.l 8(sp),a0
    b4f0:	|  |      move.l 114(a0),d0
    b4f4:	|  |      move.l d0,-(sp)
    b4f6:	|  |      jsr e300 <removeObjectType>
    b4fc:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b4fe:	|  |      move.l 8(sp),4(sp)
    b504:	|  |      move.l 1e876 <SysBase>,d0
    b50a:	|  |      movea.l d0,a6
    b50c:	|  |      movea.l 4(sp),a1
    b510:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b514:	|  '----> movea.l 12(sp),a0
    b518:	|         move.l (a0),d0
    b51a:	'-------- bne.w b492 <killMostPeople+0x12>
        }
    }
}
    b51e:	          nop
    b520:	          nop
    b522:	          movea.l (sp)+,a6
    b524:	          lea 12(sp),sp
    b528:	          rts

0000b52a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b52a:	clr.l -(sp)
    b52c:	move.l sp,d0
    b52e:	addq.l #8,d0
    b530:	move.l d0,-(sp)
    b532:	jsr 46c4 <setFrames>
    b538:	addq.l #8,sp
}
    b53a:	nop
    b53c:	rts

0000b53e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b53e:	          lea -12(sp),sp
    b542:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b544:	          pea 1a611 <PutChar+0x1671>
    b54a:	          jsr 184fe <KPrintF>
    b550:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b552:	          tst.l 20(sp)
    b556:	      ,-- bne.s b564 <makeWalkingPerson+0x26>
    b558:	      |   tst.l 24(sp)
    b55c:	      +-- bne.s b564 <makeWalkingPerson+0x26>
    b55e:	      |   clr.w d0
    b560:	,-----|-- bra.w b726 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b564:	|     '-> movea.l 1e992 <currentFloor>,a0
    b56a:	|         move.l 8(a0),d0
    b56e:	|     ,-- bne.s b576 <makeWalkingPerson+0x38>
    b570:	|     |   clr.w d0
    b572:	+-----|-- bra.w b726 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b576:	|     '-> move.l 28(sp),d0
    b57a:	|         move.l d0,-(sp)
    b57c:	|         jsr afea <findPerson>
    b582:	|         addq.l #4,sp
    b584:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b588:	|     ,-- bne.s b5a4 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b58a:	|     |   move.l 28(sp),d0
    b58e:	|     |   move.l d0,-(sp)
    b590:	|     |   pea 1a62c <PutChar+0x168c>
    b596:	|     |   jsr 184fe <KPrintF>
    b59c:	|     |   addq.l #8,sp
		return FALSE;
    b59e:	|     |   clr.w d0
    b5a0:	+-----|-- bra.w b726 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b5a4:	|     '-> movea.l 12(sp),a0
    b5a8:	|         move.l 68(a0),d0
    b5ac:	|     ,-- beq.s b5c0 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b5ae:	|     |   movea.l 12(sp),a0
    b5b2:	|     |   move.l 68(a0),d0
    b5b6:	|     |   move.l d0,-(sp)
    b5b8:	|     |   jsr 55ac <abortFunction>
    b5be:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b5c0:	|     '-> movea.l 12(sp),a0
    b5c4:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b5c8:	|         movea.l 12(sp),a0
    b5cc:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b5d2:	|         movea.l 12(sp),a0
    b5d6:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b5dc:	|         movea.l 12(sp),a0
    b5e0:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b5e6:	|         movea.l 12(sp),a0
    b5ea:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b5f0:	|         move.l 24(sp),-(sp)
    b5f4:	|         move.l 24(sp),-(sp)
    b5f8:	|         jsr 17844 <inFloor>
    b5fe:	|         addq.l #8,sp
    b600:	|         movea.l 12(sp),a0
    b604:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b608:	|         movea.l 12(sp),a0
    b60c:	|         move.l 60(a0),d0
    b610:	|         moveq #-1,d1
    b612:	|         cmp.l d0,d1
    b614:	|     ,-- bne.s b644 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b616:	|     |   movea.w #60,a0
    b61a:	|     |   adda.l 12(sp),a0
    b61e:	|     |   moveq #44,d1
    b620:	|     |   add.l 12(sp),d1
    b624:	|     |   moveq #40,d0
    b626:	|     |   add.l 12(sp),d0
    b62a:	|     |   move.l a0,-(sp)
    b62c:	|     |   move.l d1,-(sp)
    b62e:	|     |   move.l d0,-(sp)
    b630:	|     |   jsr b102 <handleClosestPoint>
    b636:	|     |   lea 12(sp),sp
    b63a:	|     |   tst.w d0
    b63c:	|     +-- bne.s b644 <makeWalkingPerson+0x106>
    b63e:	|     |   clr.w d0
    b640:	+-----|-- bra.w b726 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b644:	|     '-> movea.l 12(sp),a0
    b648:	|         move.l 4(a0),d0
    b64c:	|         move.l d0,-(sp)
    b64e:	|         jsr 188c8 <__fixsfsi>
    b654:	|         addq.l #4,sp
    b656:	|         move.l d0,d2
    b658:	|         movea.l 12(sp),a0
    b65c:	|         move.l (a0),d0
    b65e:	|         move.l d0,-(sp)
    b660:	|         jsr 188c8 <__fixsfsi>
    b666:	|         addq.l #4,sp
    b668:	|         move.l d2,-(sp)
    b66a:	|         move.l d0,-(sp)
    b66c:	|         jsr 17844 <inFloor>
    b672:	|         addq.l #8,sp
    b674:	|         movea.l 12(sp),a0
    b678:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b67c:	|         movea.l 12(sp),a0
    b680:	|         move.l 56(a0),d0
    b684:	|         moveq #-1,d1
    b686:	|         cmp.l d0,d1
    b688:	|     ,-- bne.s b6da <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b68a:	|     |   movea.l 12(sp),a0
    b68e:	|     |   move.l (a0),d0
    b690:	|     |   move.l d0,-(sp)
    b692:	|     |   jsr 188c8 <__fixsfsi>
    b698:	|     |   addq.l #4,sp
    b69a:	|     |   move.l d0,8(sp)
    b69e:	|     |   movea.l 12(sp),a0
    b6a2:	|     |   move.l 4(a0),d0
    b6a6:	|     |   move.l d0,-(sp)
    b6a8:	|     |   jsr 188c8 <__fixsfsi>
    b6ae:	|     |   addq.l #4,sp
    b6b0:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b6b4:	|     |   moveq #56,d0
    b6b6:	|     |   add.l 12(sp),d0
    b6ba:	|     |   move.l d0,-(sp)
    b6bc:	|     |   lea 8(sp),a0
    b6c0:	|     |   move.l a0,-(sp)
    b6c2:	|     |   moveq #16,d0
    b6c4:	|     |   add.l sp,d0
    b6c6:	|     |   move.l d0,-(sp)
    b6c8:	|     |   jsr b102 <handleClosestPoint>
    b6ce:	|     |   lea 12(sp),sp
    b6d2:	|     |   tst.w d0
    b6d4:	|     +-- bne.s b6da <makeWalkingPerson+0x19c>
    b6d6:	|     |   clr.w d0
    b6d8:	+-----|-- bra.s b726 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b6da:	|     '-> move.l 12(sp),-(sp)
    b6de:	|         jsr a34c <doBorderStuff>
    b6e4:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b6e6:	|         clr.l -(sp)
    b6e8:	|         move.l 16(sp),-(sp)
    b6ec:	|         jsr c992 <walkMe>
    b6f2:	|         addq.l #8,sp
    b6f4:	|         tst.w d0
    b6f6:	|     ,-- bne.s b702 <makeWalkingPerson+0x1c4>
    b6f8:	|     |   movea.l 12(sp),a0
    b6fc:	|     |   move.w 66(a0),d0
    b700:	|  ,--|-- beq.s b724 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b702:	|  |  '-> lea 28(sp),a0
    b706:	|  |      move.l a0,-(sp)
    b708:	|  |      pea 1a655 <PutChar+0x16b5>
    b70e:	|  |      jsr 184fe <KPrintF>
    b714:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b716:	|  |      movea.l 12(sp),a0
    b71a:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b720:	|  |      moveq #1,d0
    b722:	+--|----- bra.s b726 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b724:	|  '----> clr.w d0
	}
}
    b726:	'-------> move.l (sp)+,d2
    b728:	          lea 12(sp),sp
    b72c:	          rts

0000b72e <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b72e:	       lea -16(sp),sp
    b732:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b734:	       moveq #12,d0
    b736:	       move.l d0,16(sp)
    b73a:	       clr.l 12(sp)
    b73e:	       move.l 1e876 <SysBase>,d0
    b744:	       movea.l d0,a6
    b746:	       move.l 16(sp),d0
    b74a:	       move.l 12(sp),d1
    b74e:	       jsr -684(a6)
    b752:	       move.l d0,8(sp)
    b756:	       move.l 8(sp),d0
    b75a:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b75e:	   ,-- bne.s b772 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b760:	   |   pea 1a688 <PutChar+0x16e8>
    b766:	   |   jsr 184fe <KPrintF>
    b76c:	   |   addq.l #4,sp
        return NULL;    
    b76e:	   |   moveq #0,d0
    b770:	,--|-- bra.s b78c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b772:	|  '-> movea.l 4(sp),a0
    b776:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b778:	|      movea.l 4(sp),a0
    b77c:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b780:	|      movea.l 4(sp),a0
    b784:	|      clr.l 4(a0)
	return newAnim;
    b788:	|      move.l 4(sp),d0
}
    b78c:	'----> movea.l (sp)+,a6
    b78e:	       lea 16(sp),sp
    b792:	       rts

0000b794 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b794:	    move.l d2,-(sp)
	me->x = x;
    b796:	    movea.l 8(sp),a0
    b79a:	    move.l 12(sp),(a0)
	me->y = y;
    b79e:	    movea.l 8(sp),a0
    b7a2:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b7a8:	    movea.l 8(sp),a0
    b7ac:	    clr.l 8(a0)
	me->oldy = 0;
    b7b0:	    movea.l 8(sp),a0
    b7b4:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b7b8:	    movea.l 8(sp),a0
    b7bc:	    move.l 118(a0),d0
    b7c0:	    moveq #2,d1
    b7c2:	    and.l d1,d0
    b7c4:	,-- bne.s b81c <moveAndScale+0x88>
    b7c6:	|   move.w 1e1f2 <scaleDivide>,d0
    b7cc:	+-- beq.s b81c <moveAndScale+0x88>
    b7ce:	|   movea.l 8(sp),a0
    b7d2:	|   move.l 4(a0),d2
    b7d6:	|   move.w 1e1f0 <scaleHorizon>,d0
    b7dc:	|   movea.w d0,a0
    b7de:	|   move.l a0,-(sp)
    b7e0:	|   jsr 18930 <__floatsisf>
    b7e6:	|   addq.l #4,sp
    b7e8:	|   move.l d0,-(sp)
    b7ea:	|   move.l d2,-(sp)
    b7ec:	|   jsr 18c24 <__subsf3>
    b7f2:	|   addq.l #8,sp
    b7f4:	|   move.l d0,d2
    b7f6:	|   move.w 1e1f2 <scaleDivide>,d0
    b7fc:	|   movea.w d0,a0
    b7fe:	|   move.l a0,-(sp)
    b800:	|   jsr 18930 <__floatsisf>
    b806:	|   addq.l #4,sp
    b808:	|   move.l d0,-(sp)
    b80a:	|   move.l d2,-(sp)
    b80c:	|   jsr 187e6 <__divsf3>
    b812:	|   addq.l #8,sp
    b814:	|   movea.l 8(sp),a0
    b818:	|   move.l d0,32(a0)
}
    b81c:	'-> nop
    b81e:	    move.l (sp)+,d2
    b820:	    rts

0000b822 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b822:	          lea -16(sp),sp
    b826:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b828:	          move.l 24(sp),-(sp)
    b82c:	          jsr afea <findPerson>
    b832:	          addq.l #4,sp
    b834:	          move.l d0,8(sp)

    if (p) {
    b838:	,-------- beq.w b918 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b83c:	|         move.l 1e98a <overRegion>,d0
    b842:	|         cmpi.l #125150,d0
    b848:	|     ,-- bne.s b866 <removeOneCharacter+0x44>
    b84a:	|     |   movea.l 1e98a <overRegion>,a0
    b850:	|     |   move.l 28(a0),d1
    b854:	|     |   movea.l 8(sp),a0
    b858:	|     |   move.l 114(a0),d0
    b85c:	|     |   cmp.l d1,d0
    b85e:	|     +-- bne.s b866 <removeOneCharacter+0x44>
            overRegion = NULL;
    b860:	|     |   clr.l 1e98a <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b866:	|     '-> movea.l 8(sp),a0
    b86a:	|         move.l 68(a0),d0
    b86e:	|     ,-- beq.s b882 <removeOneCharacter+0x60>
    b870:	|     |   movea.l 8(sp),a0
    b874:	|     |   move.l 68(a0),d0
    b878:	|     |   move.l d0,-(sp)
    b87a:	|     |   jsr 55ac <abortFunction>
    b880:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b882:	|     '-> movea.l 8(sp),a0
    b886:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b88a:	|         clr.l 12(sp)
    b88e:	|     ,-- bra.s b8b6 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b890:	|  ,--|-> movea.l 8(sp),a0
    b894:	|  |  |   movea.l 80(a0),a0
    b898:	|  |  |   move.l (a0),d1
    b89a:	|  |  |   move.l 12(sp),d0
    b89e:	|  |  |   add.l d0,d0
    b8a0:	|  |  |   add.l d0,d0
    b8a2:	|  |  |   movea.l d1,a0
    b8a4:	|  |  |   adda.l d0,a0
    b8a6:	|  |  |   move.l (a0),d0
    b8a8:	|  |  |   move.l d0,-(sp)
    b8aa:	|  |  |   jsr a2c8 <deleteAnim>
    b8b0:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b8b2:	|  |  |   addq.l #1,12(sp)
    b8b6:	|  |  '-> moveq #2,d0
    b8b8:	|  |      cmp.l 12(sp),d0
    b8bc:	|  '----- bge.s b890 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b8be:	|         move.l #125146,16(sp)
    b8c6:	|     ,-- bra.s b8d6 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b8c8:	|  ,--|-> movea.l 16(sp),a0
    b8cc:	|  |  |   move.l (a0),d0
    b8ce:	|  |  |   moveq #36,d1
    b8d0:	|  |  |   add.l d0,d1
    b8d2:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b8d6:	|  |  '-> movea.l 16(sp),a0
    b8da:	|  |      move.l (a0),d0
    b8dc:	|  |      cmp.l 8(sp),d0
    b8e0:	|  '----- bne.s b8c8 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b8e2:	|         movea.l 8(sp),a0
    b8e6:	|         move.l 36(a0),d0
    b8ea:	|         movea.l 16(sp),a0
    b8ee:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b8f0:	|         movea.l 8(sp),a0
    b8f4:	|         move.l 114(a0),d0
    b8f8:	|         move.l d0,-(sp)
    b8fa:	|         jsr e300 <removeObjectType>
    b900:	|         addq.l #4,sp
        FreeVec(p);
    b902:	|         move.l 8(sp),4(sp)
    b908:	|         move.l 1e876 <SysBase>,d0
    b90e:	|         movea.l d0,a6
    b910:	|         movea.l 4(sp),a1
    b914:	|         jsr -690(a6)
		
    }
}
    b918:	'-------> nop
    b91a:	          movea.l (sp)+,a6
    b91c:	          lea 16(sp),sp
    b920:	          rts

0000b922 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b922:	       subq.l #8,sp
    b924:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b926:	       movea.l 16(sp),a0
    b92a:	       movea.l 80(a0),a0
    b92e:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b934:	       movea.l 16(sp),a0
    b938:	       move.l 92(a0),d2
    b93c:	       move.l 4(sp),-(sp)
    b940:	       pea b4 <_start+0xb4>
    b944:	       jsr 18f08 <__divsi3>
    b94a:	       addq.l #8,sp
    b94c:	       add.l d2,d0
    b94e:	       move.l d0,d1
    b950:	       addi.l #180,d1
    b956:	       movea.l 16(sp),a0
    b95a:	       move.l 100(a0),d0
    b95e:	       move.l d1,d2
    b960:	       add.l d0,d2
    b962:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b966:	   ,-- bra.s b970 <rethinkAngle+0x4e>
    b968:	,--|-> addi.l #-360,8(sp)
    b970:	|  '-> cmpi.l #359,8(sp)
    b978:	'----- bgt.s b968 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b97a:	       move.l 4(sp),-(sp)
    b97e:	       move.l 12(sp),-(sp)
    b982:	       jsr 18e8a <__mulsi3>
    b988:	       addq.l #8,sp
    b98a:	       pea 168 <decodeFilename+0x50>
    b98e:	       move.l d0,-(sp)
    b990:	       jsr 18f08 <__divsi3>
    b996:	       addq.l #8,sp
    b998:	       movea.l 16(sp),a0
    b99c:	       move.l d0,106(a0)
}
    b9a0:	       nop
    b9a2:	       move.l (sp)+,d2
    b9a4:	       addq.l #8,sp
    b9a6:	       rts

0000b9a8 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b9a8:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b9aa:	          movea.l 8(sp),a0
    b9ae:	          move.l 8(a0),d0
    b9b2:	          move.l 12(sp),-(sp)
    b9b6:	          move.l d0,-(sp)
    b9b8:	          jsr 8d0 <put2bytes>
    b9be:	          addq.l #8,sp
	if (p -> numFrames) {
    b9c0:	          movea.l 8(sp),a0
    b9c4:	          move.l 8(a0),d0
    b9c8:	,-------- beq.w ba6c <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b9cc:	|         movea.l 8(sp),a0
    b9d0:	|         movea.l (a0),a0
    b9d2:	|         move.l (a0),d0
    b9d4:	|         move.l 12(sp),-(sp)
    b9d8:	|         move.l d0,-(sp)
    b9da:	|         jsr 958 <put4bytes>
    b9e0:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b9e2:	|         clr.l (sp)
    b9e4:	|     ,-- bra.s ba5e <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b9e6:	|  ,--|-> movea.l 8(sp),a0
    b9ea:	|  |  |   movea.l 4(a0),a0
    b9ee:	|  |  |   move.l (sp),d1
    b9f0:	|  |  |   move.l d1,d0
    b9f2:	|  |  |   add.l d0,d0
    b9f4:	|  |  |   add.l d1,d0
    b9f6:	|  |  |   add.l d0,d0
    b9f8:	|  |  |   add.l d0,d0
    b9fa:	|  |  |   adda.l d0,a0
    b9fc:	|  |  |   move.l (a0),d0
    b9fe:	|  |  |   move.l 12(sp),-(sp)
    ba02:	|  |  |   move.l d0,-(sp)
    ba04:	|  |  |   jsr 958 <put4bytes>
    ba0a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ba0c:	|  |  |   movea.l 8(sp),a0
    ba10:	|  |  |   movea.l 4(a0),a0
    ba14:	|  |  |   move.l (sp),d1
    ba16:	|  |  |   move.l d1,d0
    ba18:	|  |  |   add.l d0,d0
    ba1a:	|  |  |   add.l d1,d0
    ba1c:	|  |  |   add.l d0,d0
    ba1e:	|  |  |   add.l d0,d0
    ba20:	|  |  |   adda.l d0,a0
    ba22:	|  |  |   move.l 4(a0),d0
    ba26:	|  |  |   move.l 12(sp),-(sp)
    ba2a:	|  |  |   move.l d0,-(sp)
    ba2c:	|  |  |   jsr 958 <put4bytes>
    ba32:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ba34:	|  |  |   movea.l 8(sp),a0
    ba38:	|  |  |   movea.l 4(a0),a0
    ba3c:	|  |  |   move.l (sp),d1
    ba3e:	|  |  |   move.l d1,d0
    ba40:	|  |  |   add.l d0,d0
    ba42:	|  |  |   add.l d1,d0
    ba44:	|  |  |   add.l d0,d0
    ba46:	|  |  |   add.l d0,d0
    ba48:	|  |  |   adda.l d0,a0
    ba4a:	|  |  |   move.l 8(a0),d0
    ba4e:	|  |  |   move.l 12(sp),-(sp)
    ba52:	|  |  |   move.l d0,-(sp)
    ba54:	|  |  |   jsr 958 <put4bytes>
    ba5a:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ba5c:	|  |  |   addq.l #1,(sp)
    ba5e:	|  |  '-> movea.l 8(sp),a0
    ba62:	|  |      move.l 8(a0),d0
    ba66:	|  |      cmp.l (sp),d0
    ba68:	|  '----- bgt.w b9e6 <saveAnim+0x3e>
		}
	}
	return TRUE;
    ba6c:	'-------> moveq #1,d0
}
    ba6e:	          addq.l #4,sp
    ba70:	          rts

0000ba72 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ba72:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ba74:	             movea.l 8(sp),a0
    ba78:	             move.l 4(a0),d0
    ba7c:	             move.l 12(sp),-(sp)
    ba80:	             move.l d0,-(sp)
    ba82:	             jsr 8d0 <put2bytes>
    ba88:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ba8a:	             clr.l (sp)
    ba8c:	   ,-------- bra.s bab8 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ba8e:	,--|-------> movea.l 8(sp),a0
    ba92:	|  |         move.l (a0),d1
    ba94:	|  |         move.l (sp),d0
    ba96:	|  |         add.l d0,d0
    ba98:	|  |         add.l d0,d0
    ba9a:	|  |         movea.l d1,a0
    ba9c:	|  |         adda.l d0,a0
    ba9e:	|  |         move.l (a0),d0
    baa0:	|  |         move.l 12(sp),-(sp)
    baa4:	|  |         move.l d0,-(sp)
    baa6:	|  |         jsr b9a8 <saveAnim>
    baac:	|  |         addq.l #8,sp
    baae:	|  |         tst.w d0
    bab0:	|  |     ,-- bne.s bab6 <saveCostume+0x44>
    bab2:	|  |     |   clr.w d0
    bab4:	|  |  ,--|-- bra.s bacc <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    bab6:	|  |  |  '-> addq.l #1,(sp)
    bab8:	|  '--|----> movea.l 8(sp),a0
    babc:	|     |      move.l 4(a0),d1
    bac0:	|     |      move.l d1,d0
    bac2:	|     |      add.l d0,d0
    bac4:	|     |      add.l d1,d0
    bac6:	|     |      cmp.l (sp),d0
    bac8:	'-----|----- bgt.s ba8e <saveCostume+0x1c>
	}

	return TRUE;
    baca:	      |      moveq #1,d0
}
    bacc:	      '----> addq.l #4,sp
    bace:	             rts

0000bad0 <savePeople>:

BOOL savePeople (BPTR fp) {
    bad0:	             lea -144(sp),sp
    bad4:	             move.l a6,-(sp)
    bad6:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    bad8:	             move.l 1e8da <allPeople>,148(sp)
	int countPeople = 0, a;
    bae0:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    bae4:	             move.w 1e1f0 <scaleHorizon>,d0
    baea:	             movea.w d0,a0
    baec:	             move.l 156(sp),-(sp)
    baf0:	             move.l a0,-(sp)
    baf2:	             jsr a9c <putSigned>
    baf8:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    bafa:	             move.w 1e1f2 <scaleDivide>,d0
    bb00:	             movea.w d0,a0
    bb02:	             move.l 156(sp),-(sp)
    bb06:	             move.l a0,-(sp)
    bb08:	             jsr a9c <putSigned>
    bb0e:	             addq.l #8,sp

	while (me) {
    bb10:	         ,-- bra.s bb20 <savePeople+0x50>
		countPeople ++;
    bb12:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    bb16:	      |  |   movea.l 148(sp),a0
    bb1a:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    bb20:	      |  '-> tst.l 148(sp)
    bb24:	      '----- bne.s bb12 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    bb26:	             move.l 156(sp),-(sp)
    bb2a:	             move.l 148(sp),-(sp)
    bb2e:	             jsr 8d0 <put2bytes>
    bb34:	             addq.l #8,sp

	me = allPeople;
    bb36:	             move.l 1e8da <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    bb3e:	             clr.l 140(sp)
    bb42:	   ,-------- bra.w bf9a <savePeople+0x4ca>

		putFloat (me -> x, fp);
    bb46:	,--|-------> movea.l 148(sp),a0
    bb4a:	|  |         move.l (a0),d0
    bb4c:	|  |         move.l 156(sp),-(sp)
    bb50:	|  |         move.l d0,-(sp)
    bb52:	|  |         jsr a46 <putFloat>
    bb58:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    bb5a:	|  |         movea.l 148(sp),a0
    bb5e:	|  |         move.l 4(a0),d0
    bb62:	|  |         move.l 156(sp),-(sp)
    bb66:	|  |         move.l d0,-(sp)
    bb68:	|  |         jsr a46 <putFloat>
    bb6e:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    bb70:	|  |         movea.l 148(sp),a0
    bb74:	|  |         move.l 80(a0),d0
    bb78:	|  |         move.l 156(sp),-(sp)
    bb7c:	|  |         move.l d0,-(sp)
    bb7e:	|  |         jsr ba72 <saveCostume>
    bb84:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    bb86:	|  |         movea.l 148(sp),a0
    bb8a:	|  |         move.l 72(a0),d0
    bb8e:	|  |         move.l 156(sp),-(sp)
    bb92:	|  |         move.l d0,-(sp)
    bb94:	|  |         jsr b9a8 <saveAnim>
    bb9a:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    bb9c:	|  |         move.l 156(sp),136(sp)
    bba2:	|  |         movea.l 148(sp),a0
    bba6:	|  |         move.l 72(a0),d1
    bbaa:	|  |         movea.l 148(sp),a0
    bbae:	|  |         move.l 76(a0),d0
    bbb2:	|  |         cmp.l d1,d0
    bbb4:	|  |         seq d0
    bbb6:	|  |         neg.b d0
    bbb8:	|  |         move.b d0,d0
    bbba:	|  |         andi.l #255,d0
    bbc0:	|  |         move.l d0,132(sp)
    bbc4:	|  |         move.l 1e87e <DOSBase>,d0
    bbca:	|  |         movea.l d0,a6
    bbcc:	|  |         move.l 136(sp),d1
    bbd0:	|  |         move.l 132(sp),d2
    bbd4:	|  |         jsr -312(a6)
    bbd8:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    bbdc:	|  |         movea.l 148(sp),a0
    bbe0:	|  |         move.l 32(a0),d0
    bbe4:	|  |         move.l 156(sp),-(sp)
    bbe8:	|  |         move.l d0,-(sp)
    bbea:	|  |         jsr a46 <putFloat>
    bbf0:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    bbf2:	|  |         movea.l 148(sp),a0
    bbf6:	|  |         move.l 118(a0),d0
    bbfa:	|  |         move.l 156(sp),-(sp)
    bbfe:	|  |         move.l d0,-(sp)
    bc00:	|  |         jsr 8d0 <put2bytes>
    bc06:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    bc08:	|  |         movea.l 148(sp),a0
    bc0c:	|  |         move.l 20(a0),d0
    bc10:	|  |         move.l 156(sp),-(sp)
    bc14:	|  |         move.l d0,-(sp)
    bc16:	|  |         jsr 8d0 <put2bytes>
    bc1c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    bc1e:	|  |         movea.l 148(sp),a0
    bc22:	|  |         move.l 40(a0),d0
    bc26:	|  |         move.l 156(sp),-(sp)
    bc2a:	|  |         move.l d0,-(sp)
    bc2c:	|  |         jsr 8d0 <put2bytes>
    bc32:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    bc34:	|  |         movea.l 148(sp),a0
    bc38:	|  |         move.l 44(a0),d0
    bc3c:	|  |         move.l 156(sp),-(sp)
    bc40:	|  |         move.l d0,-(sp)
    bc42:	|  |         jsr 8d0 <put2bytes>
    bc48:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    bc4a:	|  |         movea.l 148(sp),a0
    bc4e:	|  |         move.l 48(a0),d0
    bc52:	|  |         move.l 156(sp),-(sp)
    bc56:	|  |         move.l d0,-(sp)
    bc58:	|  |         jsr 8d0 <put2bytes>
    bc5e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    bc60:	|  |         movea.l 148(sp),a0
    bc64:	|  |         move.l 52(a0),d0
    bc68:	|  |         move.l 156(sp),-(sp)
    bc6c:	|  |         move.l d0,-(sp)
    bc6e:	|  |         jsr 8d0 <put2bytes>
    bc74:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    bc76:	|  |         movea.l 148(sp),a0
    bc7a:	|  |         move.l 84(a0),d0
    bc7e:	|  |         move.l 156(sp),-(sp)
    bc82:	|  |         move.l d0,-(sp)
    bc84:	|  |         jsr 8d0 <put2bytes>
    bc8a:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    bc8c:	|  |         movea.l 148(sp),a0
    bc90:	|  |         move.l 88(a0),d0
    bc94:	|  |         move.l 156(sp),-(sp)
    bc98:	|  |         move.l d0,-(sp)
    bc9a:	|  |         jsr 8d0 <put2bytes>
    bca0:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    bca2:	|  |         movea.l 148(sp),a0
    bca6:	|  |         move.l 28(a0),d0
    bcaa:	|  |         move.l 156(sp),-(sp)
    bcae:	|  |         move.l d0,-(sp)
    bcb0:	|  |         jsr 8d0 <put2bytes>
    bcb6:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    bcb8:	|  |         movea.l 148(sp),a0
    bcbc:	|  |         move.l 122(a0),d0
    bcc0:	|  |         move.l 156(sp),-(sp)
    bcc4:	|  |         move.l d0,-(sp)
    bcc6:	|  |         jsr 8d0 <put2bytes>
    bccc:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    bcce:	|  |         movea.l 148(sp),a0
    bcd2:	|  |         move.l 24(a0),d0
    bcd6:	|  |         move.l d0,d0
    bcd8:	|  |         movea.w d0,a0
    bcda:	|  |         move.l 156(sp),-(sp)
    bcde:	|  |         move.l a0,-(sp)
    bce0:	|  |         jsr a9c <putSigned>
    bce6:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    bce8:	|  |         move.l 156(sp),124(sp)
    bcee:	|  |         movea.l 148(sp),a0
    bcf2:	|  |         move.w 104(a0),d0
    bcf6:	|  |         movea.w d0,a0
    bcf8:	|  |         move.l a0,120(sp)
    bcfc:	|  |         move.l 1e87e <DOSBase>,d0
    bd02:	|  |         movea.l d0,a6
    bd04:	|  |         move.l 124(sp),d1
    bd08:	|  |         move.l 120(sp),d2
    bd0c:	|  |         jsr -312(a6)
    bd10:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    bd14:	|  |         move.l 156(sp),112(sp)
    bd1a:	|  |         movea.l 148(sp),a0
    bd1e:	|  |         move.w 64(a0),d0
    bd22:	|  |         movea.w d0,a0
    bd24:	|  |         move.l a0,108(sp)
    bd28:	|  |         move.l 1e87e <DOSBase>,d0
    bd2e:	|  |         movea.l d0,a6
    bd30:	|  |         move.l 112(sp),d1
    bd34:	|  |         move.l 108(sp),d2
    bd38:	|  |         jsr -312(a6)
    bd3c:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    bd40:	|  |         move.l 156(sp),100(sp)
    bd46:	|  |         movea.l 148(sp),a0
    bd4a:	|  |         move.w 66(a0),d0
    bd4e:	|  |         movea.w d0,a0
    bd50:	|  |         move.l a0,96(sp)
    bd54:	|  |         move.l 1e87e <DOSBase>,d0
    bd5a:	|  |         movea.l d0,a6
    bd5c:	|  |         move.l 100(sp),d1
    bd60:	|  |         move.l 96(sp),d2
    bd64:	|  |         jsr -312(a6)
    bd68:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    bd6c:	|  |         movea.l 148(sp),a0
    bd70:	|  |         move.l 68(a0),d0
    bd74:	|  |  ,----- beq.s bdb2 <savePeople+0x2e2>
			FPutC (fp, 1);
    bd76:	|  |  |      move.l 156(sp),76(sp)
    bd7c:	|  |  |      moveq #1,d0
    bd7e:	|  |  |      move.l d0,72(sp)
    bd82:	|  |  |      move.l 1e87e <DOSBase>,d0
    bd88:	|  |  |      movea.l d0,a6
    bd8a:	|  |  |      move.l 76(sp),d1
    bd8e:	|  |  |      move.l 72(sp),d2
    bd92:	|  |  |      jsr -312(a6)
    bd96:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    bd9a:	|  |  |      movea.l 148(sp),a0
    bd9e:	|  |  |      move.l 68(a0),d0
    bda2:	|  |  |      move.l 156(sp),-(sp)
    bda6:	|  |  |      move.l d0,-(sp)
    bda8:	|  |  |      jsr cfcc <saveFunction>
    bdae:	|  |  |      addq.l #8,sp
    bdb0:	|  |  |  ,-- bra.s bdd6 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    bdb2:	|  |  '--|-> move.l 156(sp),88(sp)
    bdb8:	|  |     |   moveq #1,d0
    bdba:	|  |     |   move.l d0,84(sp)
    bdbe:	|  |     |   move.l 1e87e <DOSBase>,d0
    bdc4:	|  |     |   movea.l d0,a6
    bdc6:	|  |     |   move.l 88(sp),d1
    bdca:	|  |     |   move.l 84(sp),d2
    bdce:	|  |     |   jsr -312(a6)
    bdd2:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    bdd6:	|  |     '-> movea.l 148(sp),a0
    bdda:	|  |         move.l 106(a0),d0
    bdde:	|  |         move.l 156(sp),-(sp)
    bde2:	|  |         move.l d0,-(sp)
    bde4:	|  |         jsr 8d0 <put2bytes>
    bdea:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    bdec:	|  |         movea.l 148(sp),a0
    bdf0:	|  |         move.l 92(a0),d0
    bdf4:	|  |         move.l 156(sp),-(sp)
    bdf8:	|  |         move.l d0,-(sp)
    bdfa:	|  |         jsr 8d0 <put2bytes>
    be00:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    be02:	|  |         movea.l 148(sp),a0
    be06:	|  |         move.l 100(a0),d0
    be0a:	|  |         move.l 156(sp),-(sp)
    be0e:	|  |         move.l d0,-(sp)
    be10:	|  |         jsr 8d0 <put2bytes>
    be16:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    be18:	|  |         movea.l 148(sp),a0
    be1c:	|  |         move.l 96(a0),d0
    be20:	|  |         move.l 156(sp),-(sp)
    be24:	|  |         move.l d0,-(sp)
    be26:	|  |         jsr 8d0 <put2bytes>
    be2c:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    be2e:	|  |         movea.l 148(sp),a0
    be32:	|  |         move.l 110(a0),d0
    be36:	|  |         move.l d0,d0
    be38:	|  |         movea.w d0,a0
    be3a:	|  |         move.l 156(sp),-(sp)
    be3e:	|  |         move.l a0,-(sp)
    be40:	|  |         jsr a9c <putSigned>
    be46:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    be48:	|  |         movea.l 148(sp),a0
    be4c:	|  |         move.l 56(a0),d0
    be50:	|  |         move.l d0,d0
    be52:	|  |         movea.w d0,a0
    be54:	|  |         move.l 156(sp),-(sp)
    be58:	|  |         move.l a0,-(sp)
    be5a:	|  |         jsr a9c <putSigned>
    be60:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    be62:	|  |         movea.l 148(sp),a0
    be66:	|  |         move.l 60(a0),d0
    be6a:	|  |         move.l d0,d0
    be6c:	|  |         movea.w d0,a0
    be6e:	|  |         move.l 156(sp),-(sp)
    be72:	|  |         move.l a0,-(sp)
    be74:	|  |         jsr a9c <putSigned>
    be7a:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    be7c:	|  |         move.l 156(sp),64(sp)
    be82:	|  |         movea.l 148(sp),a0
    be86:	|  |         move.b 126(a0),d0
    be8a:	|  |         move.b d0,d0
    be8c:	|  |         andi.l #255,d0
    be92:	|  |         move.l d0,60(sp)
    be96:	|  |         move.l 1e87e <DOSBase>,d0
    be9c:	|  |         movea.l d0,a6
    be9e:	|  |         move.l 64(sp),d1
    bea2:	|  |         move.l 60(sp),d2
    bea6:	|  |         jsr -312(a6)
    beaa:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    beae:	|  |         move.l 156(sp),52(sp)
    beb4:	|  |         movea.l 148(sp),a0
    beb8:	|  |         move.b 127(a0),d0
    bebc:	|  |         move.b d0,d0
    bebe:	|  |         andi.l #255,d0
    bec4:	|  |         move.l d0,48(sp)
    bec8:	|  |         move.l 1e87e <DOSBase>,d0
    bece:	|  |         movea.l d0,a6
    bed0:	|  |         move.l 52(sp),d1
    bed4:	|  |         move.l 48(sp),d2
    bed8:	|  |         jsr -312(a6)
    bedc:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    bee0:	|  |         move.l 156(sp),40(sp)
    bee6:	|  |         movea.l 148(sp),a0
    beea:	|  |         move.b 128(a0),d0
    beee:	|  |         move.b d0,d0
    bef0:	|  |         andi.l #255,d0
    bef6:	|  |         move.l d0,36(sp)
    befa:	|  |         move.l 1e87e <DOSBase>,d0
    bf00:	|  |         movea.l d0,a6
    bf02:	|  |         move.l 40(sp),d1
    bf06:	|  |         move.l 36(sp),d2
    bf0a:	|  |         jsr -312(a6)
    bf0e:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    bf12:	|  |         move.l 156(sp),28(sp)
    bf18:	|  |         movea.l 148(sp),a0
    bf1c:	|  |         move.b 129(a0),d0
    bf20:	|  |         move.b d0,d0
    bf22:	|  |         andi.l #255,d0
    bf28:	|  |         move.l d0,24(sp)
    bf2c:	|  |         move.l 1e87e <DOSBase>,d0
    bf32:	|  |         movea.l d0,a6
    bf34:	|  |         move.l 28(sp),d1
    bf38:	|  |         move.l 24(sp),d2
    bf3c:	|  |         jsr -312(a6)
    bf40:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    bf44:	|  |         move.l 156(sp),16(sp)
    bf4a:	|  |         movea.l 148(sp),a0
    bf4e:	|  |         move.b 130(a0),d0
    bf52:	|  |         move.b d0,d0
    bf54:	|  |         andi.l #255,d0
    bf5a:	|  |         move.l d0,12(sp)
    bf5e:	|  |         move.l 1e87e <DOSBase>,d0
    bf64:	|  |         movea.l d0,a6
    bf66:	|  |         move.l 16(sp),d1
    bf6a:	|  |         move.l 12(sp),d2
    bf6e:	|  |         jsr -312(a6)
    bf72:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    bf76:	|  |         movea.l 148(sp),a0
    bf7a:	|  |         move.l 114(a0),d0
    bf7e:	|  |         move.l 156(sp),-(sp)
    bf82:	|  |         move.l d0,-(sp)
    bf84:	|  |         jsr e3a0 <saveObjectRef>
    bf8a:	|  |         addq.l #8,sp

		me = me -> next;
    bf8c:	|  |         movea.l 148(sp),a0
    bf90:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    bf96:	|  |         addq.l #1,140(sp)
    bf9a:	|  '-------> movea.l 140(sp),a0
    bf9e:	|            cmpa.l 144(sp),a0
    bfa2:	'----------- blt.w bb46 <savePeople+0x76>
	}
	return TRUE;
    bfa6:	             moveq #1,d0
}
    bfa8:	             move.l (sp)+,d2
    bfaa:	             movea.l (sp)+,a6
    bfac:	             lea 144(sp),sp
    bfb0:	             rts

0000bfb2 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    bfb2:	movea.l 4(sp),a0
    bfb6:	move.l 8(sp),(a0)
}
    bfba:	nop
    bfbc:	rts

0000bfbe <setDrawMode>:


void setDrawMode (int h, int ob) {
    bfbe:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    bfc0:	       move.l 12(sp),-(sp)
    bfc4:	       jsr afea <findPerson>
    bfca:	       addq.l #4,sp
    bfcc:	       move.l d0,(sp)
	if (! moveMe) return;
    bfce:	,----- beq.s bfe2 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    bfd0:	|      move.l 8(sp),-(sp)
    bfd4:	|      move.l 4(sp),-(sp)
    bfd8:	|      jsr bfe8 <setMyDrawMode>
    bfde:	|      addq.l #8,sp
    bfe0:	|  ,-- bra.s bfe4 <setDrawMode+0x26>
	if (! moveMe) return;
    bfe2:	'--|-> nop
}
    bfe4:	   '-> addq.l #4,sp
    bfe6:	       rts

0000bfe8 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    bfe8:	       moveq #19,d0
    bfea:	       cmp.l 8(sp),d0
    bfee:	,----- bcs.w c4c6 <setMyDrawMode+0x4de>
    bff2:	|      move.l 8(sp),d0
    bff6:	|      add.l d0,d0
    bff8:	|      movea.l d0,a0
    bffa:	|      adda.l #49158,a0
    c000:	|      move.w (a0),d0
    c002:	|      jmp (c006 <setMyDrawMode+0x1e>,pc,d0.w)
    c006:	|      .short 0x04c0
    c008:	|      ori.l #6684712,-(a4)
    c00e:	|      btst d0,-(a0)
    c010:	|      bchg d0,(a6)+
    c012:	|      bclr d0,(a4)+
    c014:	|      bset d0,(a2)+
    c016:	|      andi.b #84,(a6)
    c01a:	|      andi.l #55575312,(a2)
    c020:	|      .short 0x02d0
    c022:	|      bclr d1,(a0)
    c024:	|      .short 0x044a
    c026:	|      .short 0x040c
    c028:	|      movep.l d1,1158(a6)
    c02c:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c02e:	|      movea.l 4(sp),a0
    c032:	|      clr.b 128(a0)
    c036:	|      movea.l 4(sp),a0
    c03a:	|      move.b 128(a0),d0
    c03e:	|      movea.l 4(sp),a0
    c042:	|      move.b d0,127(a0)
    c046:	|      movea.l 4(sp),a0
    c04a:	|      move.b 127(a0),d0
    c04e:	|      movea.l 4(sp),a0
    c052:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    c056:	|      movea.l 4(sp),a0
    c05a:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    c05e:	|      movea.l 4(sp),a0
    c062:	|      move.b #64,130(a0)
			break;
    c068:	|  ,-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c06c:	|  |   movea.l 4(sp),a0
    c070:	|  |   clr.b 128(a0)
    c074:	|  |   movea.l 4(sp),a0
    c078:	|  |   move.b 128(a0),d0
    c07c:	|  |   movea.l 4(sp),a0
    c080:	|  |   move.b d0,127(a0)
    c084:	|  |   movea.l 4(sp),a0
    c088:	|  |   move.b 127(a0),d0
    c08c:	|  |   movea.l 4(sp),a0
    c090:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c094:	|  |   movea.l 4(sp),a0
    c098:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    c09c:	|  |   movea.l 4(sp),a0
    c0a0:	|  |   move.b #-128,130(a0)
			break;
    c0a6:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0aa:	|  |   movea.l 4(sp),a0
    c0ae:	|  |   clr.b 128(a0)
    c0b2:	|  |   movea.l 4(sp),a0
    c0b6:	|  |   move.b 128(a0),d0
    c0ba:	|  |   movea.l 4(sp),a0
    c0be:	|  |   move.b d0,127(a0)
    c0c2:	|  |   movea.l 4(sp),a0
    c0c6:	|  |   move.b 127(a0),d0
    c0ca:	|  |   movea.l 4(sp),a0
    c0ce:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c0d2:	|  |   movea.l 4(sp),a0
    c0d6:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    c0da:	|  |   movea.l 4(sp),a0
    c0de:	|  |   move.b #-64,130(a0)
			break;
    c0e4:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0e8:	|  |   movea.l 4(sp),a0
    c0ec:	|  |   clr.b 128(a0)
    c0f0:	|  |   movea.l 4(sp),a0
    c0f4:	|  |   move.b 128(a0),d0
    c0f8:	|  |   movea.l 4(sp),a0
    c0fc:	|  |   move.b d0,127(a0)
    c100:	|  |   movea.l 4(sp),a0
    c104:	|  |   move.b 127(a0),d0
    c108:	|  |   movea.l 4(sp),a0
    c10c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c110:	|  |   movea.l 4(sp),a0
    c114:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    c118:	|  |   movea.l 4(sp),a0
    c11c:	|  |   move.b #-2,130(a0)
			break;
    c122:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c126:	|  |   movea.l 4(sp),a0
    c12a:	|  |   clr.b 128(a0)
    c12e:	|  |   movea.l 4(sp),a0
    c132:	|  |   move.b 128(a0),d0
    c136:	|  |   movea.l 4(sp),a0
    c13a:	|  |   move.b d0,127(a0)
    c13e:	|  |   movea.l 4(sp),a0
    c142:	|  |   move.b 127(a0),d0
    c146:	|  |   movea.l 4(sp),a0
    c14a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c14e:	|  |   movea.l 4(sp),a0
    c152:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c158:	|  |   movea.l 4(sp),a0
    c15c:	|  |   clr.b 130(a0)
			break;
    c160:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c164:	|  |   movea.l 4(sp),a0
    c168:	|  |   clr.b 128(a0)
    c16c:	|  |   movea.l 4(sp),a0
    c170:	|  |   move.b 128(a0),d0
    c174:	|  |   movea.l 4(sp),a0
    c178:	|  |   move.b d0,127(a0)
    c17c:	|  |   movea.l 4(sp),a0
    c180:	|  |   move.b 127(a0),d0
    c184:	|  |   movea.l 4(sp),a0
    c188:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c18c:	|  |   movea.l 4(sp),a0
    c190:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c196:	|  |   movea.l 4(sp),a0
    c19a:	|  |   clr.b 130(a0)
			break;
    c19e:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c1a2:	|  |   movea.l 4(sp),a0
    c1a6:	|  |   clr.b 128(a0)
    c1aa:	|  |   movea.l 4(sp),a0
    c1ae:	|  |   move.b 128(a0),d0
    c1b2:	|  |   movea.l 4(sp),a0
    c1b6:	|  |   move.b d0,127(a0)
    c1ba:	|  |   movea.l 4(sp),a0
    c1be:	|  |   move.b 127(a0),d0
    c1c2:	|  |   movea.l 4(sp),a0
    c1c6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c1ca:	|  |   movea.l 4(sp),a0
    c1ce:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c1d4:	|  |   movea.l 4(sp),a0
    c1d8:	|  |   clr.b 130(a0)
			break;
    c1dc:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c1e0:	|  |   movea.l 4(sp),a0
    c1e4:	|  |   clr.b 128(a0)
    c1e8:	|  |   movea.l 4(sp),a0
    c1ec:	|  |   move.b 128(a0),d0
    c1f0:	|  |   movea.l 4(sp),a0
    c1f4:	|  |   move.b d0,127(a0)
    c1f8:	|  |   movea.l 4(sp),a0
    c1fc:	|  |   move.b 127(a0),d0
    c200:	|  |   movea.l 4(sp),a0
    c204:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c208:	|  |   movea.l 4(sp),a0
    c20c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c210:	|  |   movea.l 4(sp),a0
    c214:	|  |   clr.b 130(a0)
			break;
    c218:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c21c:	|  |   movea.l 4(sp),a0
    c220:	|  |   clr.b 128(a0)
    c224:	|  |   movea.l 4(sp),a0
    c228:	|  |   move.b 128(a0),d0
    c22c:	|  |   movea.l 4(sp),a0
    c230:	|  |   move.b d0,127(a0)
    c234:	|  |   movea.l 4(sp),a0
    c238:	|  |   move.b 127(a0),d0
    c23c:	|  |   movea.l 4(sp),a0
    c240:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c244:	|  |   movea.l 4(sp),a0
    c248:	|  |   st 129(a0)
			moveMe->transparency = 64;
    c24c:	|  |   movea.l 4(sp),a0
    c250:	|  |   move.b #64,130(a0)
			break;
    c256:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c25a:	|  |   movea.l 4(sp),a0
    c25e:	|  |   clr.b 128(a0)
    c262:	|  |   movea.l 4(sp),a0
    c266:	|  |   move.b 128(a0),d0
    c26a:	|  |   movea.l 4(sp),a0
    c26e:	|  |   move.b d0,127(a0)
    c272:	|  |   movea.l 4(sp),a0
    c276:	|  |   move.b 127(a0),d0
    c27a:	|  |   movea.l 4(sp),a0
    c27e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c282:	|  |   movea.l 4(sp),a0
    c286:	|  |   st 129(a0)
			moveMe->transparency = 128;
    c28a:	|  |   movea.l 4(sp),a0
    c28e:	|  |   move.b #-128,130(a0)
			break;
    c294:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c298:	|  |   movea.l 4(sp),a0
    c29c:	|  |   clr.b 128(a0)
    c2a0:	|  |   movea.l 4(sp),a0
    c2a4:	|  |   move.b 128(a0),d0
    c2a8:	|  |   movea.l 4(sp),a0
    c2ac:	|  |   move.b d0,127(a0)
    c2b0:	|  |   movea.l 4(sp),a0
    c2b4:	|  |   move.b 127(a0),d0
    c2b8:	|  |   movea.l 4(sp),a0
    c2bc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c2c0:	|  |   movea.l 4(sp),a0
    c2c4:	|  |   st 129(a0)
			moveMe->transparency = 192;
    c2c8:	|  |   movea.l 4(sp),a0
    c2cc:	|  |   move.b #-64,130(a0)
			break;
    c2d2:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c2d6:	|  |   movea.l 4(sp),a0
    c2da:	|  |   move.b #-128,128(a0)
    c2e0:	|  |   movea.l 4(sp),a0
    c2e4:	|  |   move.b 128(a0),d0
    c2e8:	|  |   movea.l 4(sp),a0
    c2ec:	|  |   move.b d0,127(a0)
    c2f0:	|  |   movea.l 4(sp),a0
    c2f4:	|  |   move.b 127(a0),d0
    c2f8:	|  |   movea.l 4(sp),a0
    c2fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c300:	|  |   movea.l 4(sp),a0
    c304:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c30a:	|  |   movea.l 4(sp),a0
    c30e:	|  |   clr.b 130(a0)
			break;
    c312:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c316:	|  |   movea.l 4(sp),a0
    c31a:	|  |   move.b #-128,128(a0)
    c320:	|  |   movea.l 4(sp),a0
    c324:	|  |   move.b 128(a0),d0
    c328:	|  |   movea.l 4(sp),a0
    c32c:	|  |   move.b d0,127(a0)
    c330:	|  |   movea.l 4(sp),a0
    c334:	|  |   move.b 127(a0),d0
    c338:	|  |   movea.l 4(sp),a0
    c33c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c340:	|  |   movea.l 4(sp),a0
    c344:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c34a:	|  |   movea.l 4(sp),a0
    c34e:	|  |   clr.b 130(a0)
			break;
    c352:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c356:	|  |   movea.l 4(sp),a0
    c35a:	|  |   move.b #-128,128(a0)
    c360:	|  |   movea.l 4(sp),a0
    c364:	|  |   move.b 128(a0),d0
    c368:	|  |   movea.l 4(sp),a0
    c36c:	|  |   move.b d0,127(a0)
    c370:	|  |   movea.l 4(sp),a0
    c374:	|  |   move.b 127(a0),d0
    c378:	|  |   movea.l 4(sp),a0
    c37c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c380:	|  |   movea.l 4(sp),a0
    c384:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c38a:	|  |   movea.l 4(sp),a0
    c38e:	|  |   clr.b 130(a0)
			break;
    c392:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c396:	|  |   movea.l 4(sp),a0
    c39a:	|  |   move.b #-128,128(a0)
    c3a0:	|  |   movea.l 4(sp),a0
    c3a4:	|  |   move.b 128(a0),d0
    c3a8:	|  |   movea.l 4(sp),a0
    c3ac:	|  |   move.b d0,127(a0)
    c3b0:	|  |   movea.l 4(sp),a0
    c3b4:	|  |   move.b 127(a0),d0
    c3b8:	|  |   movea.l 4(sp),a0
    c3bc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c3c0:	|  |   movea.l 4(sp),a0
    c3c4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c3c8:	|  |   movea.l 4(sp),a0
    c3cc:	|  |   clr.b 130(a0)
			break;
    c3d0:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c3d4:	|  |   movea.l 4(sp),a0
    c3d8:	|  |   st 128(a0)
    c3dc:	|  |   movea.l 4(sp),a0
    c3e0:	|  |   move.b 128(a0),d0
    c3e4:	|  |   movea.l 4(sp),a0
    c3e8:	|  |   move.b d0,127(a0)
    c3ec:	|  |   movea.l 4(sp),a0
    c3f0:	|  |   move.b 127(a0),d0
    c3f4:	|  |   movea.l 4(sp),a0
    c3f8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c3fc:	|  |   movea.l 4(sp),a0
    c400:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c406:	|  |   movea.l 4(sp),a0
    c40a:	|  |   clr.b 130(a0)
			break;
    c40e:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c412:	|  |   movea.l 4(sp),a0
    c416:	|  |   st 128(a0)
    c41a:	|  |   movea.l 4(sp),a0
    c41e:	|  |   move.b 128(a0),d0
    c422:	|  |   movea.l 4(sp),a0
    c426:	|  |   move.b d0,127(a0)
    c42a:	|  |   movea.l 4(sp),a0
    c42e:	|  |   move.b 127(a0),d0
    c432:	|  |   movea.l 4(sp),a0
    c436:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c43a:	|  |   movea.l 4(sp),a0
    c43e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c444:	|  |   movea.l 4(sp),a0
    c448:	|  |   clr.b 130(a0)
			break;
    c44c:	|  +-- bra.w c500 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c450:	|  |   movea.l 4(sp),a0
    c454:	|  |   st 128(a0)
    c458:	|  |   movea.l 4(sp),a0
    c45c:	|  |   move.b 128(a0),d0
    c460:	|  |   movea.l 4(sp),a0
    c464:	|  |   move.b d0,127(a0)
    c468:	|  |   movea.l 4(sp),a0
    c46c:	|  |   move.b 127(a0),d0
    c470:	|  |   movea.l 4(sp),a0
    c474:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c478:	|  |   movea.l 4(sp),a0
    c47c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c482:	|  |   movea.l 4(sp),a0
    c486:	|  |   clr.b 130(a0)
			break;
    c48a:	|  +-- bra.s c500 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c48c:	|  |   movea.l 4(sp),a0
    c490:	|  |   st 128(a0)
    c494:	|  |   movea.l 4(sp),a0
    c498:	|  |   move.b 128(a0),d0
    c49c:	|  |   movea.l 4(sp),a0
    c4a0:	|  |   move.b d0,127(a0)
    c4a4:	|  |   movea.l 4(sp),a0
    c4a8:	|  |   move.b 127(a0),d0
    c4ac:	|  |   movea.l 4(sp),a0
    c4b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c4b4:	|  |   movea.l 4(sp),a0
    c4b8:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c4bc:	|  |   movea.l 4(sp),a0
    c4c0:	|  |   clr.b 130(a0)
			break;
    c4c4:	|  +-- bra.s c500 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c4c6:	'--|-> movea.l 4(sp),a0
    c4ca:	   |   clr.b 128(a0)
    c4ce:	   |   movea.l 4(sp),a0
    c4d2:	   |   move.b 128(a0),d0
    c4d6:	   |   movea.l 4(sp),a0
    c4da:	   |   move.b d0,127(a0)
    c4de:	   |   movea.l 4(sp),a0
    c4e2:	   |   move.b 127(a0),d0
    c4e6:	   |   movea.l 4(sp),a0
    c4ea:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c4ee:	   |   movea.l 4(sp),a0
    c4f2:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c4f6:	   |   movea.l 4(sp),a0
    c4fa:	   |   clr.b 130(a0)
			break;
    c4fe:	   |   nop
	}
}
    c500:	   '-> nop
    c502:	       rts

0000c504 <shufflePeople>:

void shufflePeople () {
    c504:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c508:	             move.l #125146,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c510:	             move.l 1e8da <allPeople>,d0
    c516:	,----------- beq.w c5ec <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c51a:	|     ,----- bra.w c5dc <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c51e:	|  ,--|----> movea.l 16(sp),a0
    c522:	|  |  |      movea.l (a0),a0
    c524:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c52a:	|  |  |      movea.l 16(sp),a0
    c52e:	|  |  |      movea.l (a0),a0
    c530:	|  |  |      move.l 118(a0),d0
    c534:	|  |  |      moveq #1,d1
    c536:	|  |  |      and.l d1,d0
    c538:	|  |  |  ,-- beq.s c550 <shufflePeople+0x4c>
    c53a:	|  |  |  |   move.l #1148846080,-(sp)
    c540:	|  |  |  |   move.l 16(sp),-(sp)
    c544:	|  |  |  |   jsr 186ec <__addsf3>
    c54a:	|  |  |  |   addq.l #8,sp
    c54c:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c550:	|  |  |  '-> movea.l 16(sp),a0
    c554:	|  |  |      movea.l (a0),a0
    c556:	|  |  |      movea.l 36(a0),a0
    c55a:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c560:	|  |  |      movea.l 16(sp),a0
    c564:	|  |  |      movea.l (a0),a0
    c566:	|  |  |      movea.l 36(a0),a0
    c56a:	|  |  |      move.l 118(a0),d0
    c56e:	|  |  |      moveq #1,d1
    c570:	|  |  |      and.l d1,d0
    c572:	|  |  |  ,-- beq.s c58a <shufflePeople+0x86>
    c574:	|  |  |  |   move.l #1148846080,-(sp)
    c57a:	|  |  |  |   move.l 12(sp),-(sp)
    c57e:	|  |  |  |   jsr 186ec <__addsf3>
    c584:	|  |  |  |   addq.l #8,sp
    c586:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c58a:	|  |  |  '-> move.l 8(sp),-(sp)
    c58e:	|  |  |      move.l 16(sp),-(sp)
    c592:	|  |  |      jsr 18a9c <__gtsf2>
    c598:	|  |  |      addq.l #8,sp
    c59a:	|  |  |      tst.l d0
    c59c:	|  |  |  ,-- ble.s c5ce <shufflePeople+0xca>
			A = (*thisReference);
    c59e:	|  |  |  |   movea.l 16(sp),a0
    c5a2:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c5a6:	|  |  |  |   movea.l 16(sp),a0
    c5aa:	|  |  |  |   movea.l (a0),a0
    c5ac:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c5b0:	|  |  |  |   movea.l (sp),a0
    c5b2:	|  |  |  |   move.l 36(a0),d0
    c5b6:	|  |  |  |   movea.l 4(sp),a0
    c5ba:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c5be:	|  |  |  |   movea.l (sp),a0
    c5c0:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c5c6:	|  |  |  |   movea.l 16(sp),a0
    c5ca:	|  |  |  |   move.l (sp),(a0)
    c5cc:	|  |  +--|-- bra.s c5dc <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c5ce:	|  |  |  '-> movea.l 16(sp),a0
    c5d2:	|  |  |      move.l (a0),d0
    c5d4:	|  |  |      moveq #36,d1
    c5d6:	|  |  |      add.l d0,d1
    c5d8:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c5dc:	|  |  '----> movea.l 16(sp),a0
    c5e0:	|  |         movea.l (a0),a0
    c5e2:	|  |         move.l 36(a0),d0
    c5e6:	|  '-------- bne.w c51e <shufflePeople+0x1a>
    c5ea:	|        ,-- bra.s c5ee <shufflePeople+0xea>
	if (!allPeople) return;
    c5ec:	'--------|-> nop
		}
	}
}
    c5ee:	         '-> lea 20(sp),sp
    c5f2:	             rts

0000c5f4 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c5f4:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c5f6:	       tst.l 8(sp)
    c5fa:	   ,-- bgt.s c600 <setCharacterWalkSpeed+0xc>
    c5fc:	   |   clr.w d0
    c5fe:	,--|-- bra.s c61e <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c600:	|  '-> move.l 12(sp),-(sp)
    c604:	|      jsr afea <findPerson>
    c60a:	|      addq.l #4,sp
    c60c:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c60e:	|  ,-- bne.s c614 <setCharacterWalkSpeed+0x20>
    c610:	|  |   clr.w d0
    c612:	+--|-- bra.s c61e <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c614:	|  '-> movea.l (sp),a0
    c616:	|      move.l 8(sp),28(a0)
	return TRUE;
    c61c:	|      moveq #1,d0
}
    c61e:	'----> addq.l #4,sp
    c620:	       rts

0000c622 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c622:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c624:	       move.l 8(sp),-(sp)
    c628:	       jsr afea <findPerson>
    c62e:	       addq.l #4,sp
    c630:	       move.l d0,(sp)
    if (thisPerson) {
    c632:	,----- beq.s c652 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c634:	|      movea.l (sp),a0
    c636:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c63c:	|      moveq #2,d0
    c63e:	|      and.l 12(sp),d0
    c642:	|  ,-- beq.s c64e <setPersonExtra+0x2c>
    c644:	|  |   movea.l (sp),a0
    c646:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c64e:	|  '-> moveq #1,d0
    c650:	|  ,-- bra.s c654 <setPersonExtra+0x32>
    }
    return FALSE;
    c652:	'--|-> clr.w d0
}
    c654:	   '-> addq.l #4,sp
    c656:	       rts

0000c658 <setScale>:


void setScale (short int h, short int d) {
    c658:	subq.l #4,sp
    c65a:	move.l 8(sp),d1
    c65e:	move.l 12(sp),d0
    c662:	move.w d1,d1
    c664:	move.w d1,2(sp)
    c668:	move.w d0,d0
    c66a:	move.w d0,(sp)
	scaleHorizon = h;
    c66c:	move.w 2(sp),1e1f0 <scaleHorizon>
	scaleDivide = d;
    c674:	move.w (sp),1e1f2 <scaleDivide>
}
    c67a:	nop
    c67c:	addq.l #4,sp
    c67e:	rts

0000c680 <setShown>:

void setShown (BOOL h, int ob) {
    c680:	    subq.l #8,sp
    c682:	    move.l 12(sp),d0
    c686:	    move.w d0,d0
    c688:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c68c:	    move.l 16(sp),-(sp)
    c690:	    jsr afea <findPerson>
    c696:	    addq.l #4,sp
    c698:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c69c:	,-- beq.s c6a8 <setShown+0x28>
    c69e:	|   movea.l 4(sp),a0
    c6a2:	|   move.w 2(sp),104(a0)
}
    c6a8:	'-> nop
    c6aa:	    addq.l #8,sp
    c6ac:	    rts

0000c6ae <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c6ae:	       subq.l #8,sp
    c6b0:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c6b2:	       movea.l 16(sp),a0
    c6b6:	       move.l 92(a0),d0
    c6ba:	       move.l d0,d1
    c6bc:	       addi.l #360,d1
    c6c2:	       movea.l 16(sp),a0
    c6c6:	       move.l 96(a0),d0
    c6ca:	       move.l d1,d2
    c6cc:	       sub.l d0,d2
    c6ce:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c6d2:	       movea.l 16(sp),a0
    c6d6:	       move.l 122(a0),d0
    c6da:	   ,-- beq.s c6e6 <spinStep+0x38>
    c6dc:	   |   movea.l 16(sp),a0
    c6e0:	   |   move.l 122(a0),d0
    c6e4:	,--|-- bra.s c700 <spinStep+0x52>
    c6e6:	|  '-> movea.l 16(sp),a0
    c6ea:	|      movea.l 80(a0),a0
    c6ee:	|      move.l 4(a0),d0
    c6f2:	|      move.l d0,-(sp)
    c6f4:	|      pea 168 <decodeFilename+0x50>
    c6f8:	|      jsr 18f08 <__divsi3>
    c6fe:	|      addq.l #8,sp
    c700:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c704:	   ,-- bra.s c70e <spinStep+0x60>
		diff -= 360;
    c706:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c70e:	|  '-> cmpi.l #180,8(sp)
    c716:	'----- bgt.s c706 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c718:	       move.l 8(sp),d0
    c71c:	       cmp.l 4(sp),d0
    c720:	   ,-- blt.s c73e <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c722:	   |   movea.l 16(sp),a0
    c726:	   |   move.l 92(a0),d0
    c72a:	   |   sub.l 4(sp),d0
    c72e:	   |   move.l d0,-(sp)
    c730:	   |   move.l 20(sp),-(sp)
    c734:	   |   jsr c81e <turnMeAngle>
    c73a:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c73c:	,--|-- bra.s c784 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c73e:	|  '-> move.l 4(sp),d0
    c742:	|      neg.l d0
    c744:	|      cmp.l 8(sp),d0
    c748:	|  ,-- blt.s c766 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c74a:	|  |   movea.l 16(sp),a0
    c74e:	|  |   move.l 92(a0),d0
    c752:	|  |   add.l 4(sp),d0
    c756:	|  |   move.l d0,-(sp)
    c758:	|  |   move.l 20(sp),-(sp)
    c75c:	|  |   jsr c81e <turnMeAngle>
    c762:	|  |   addq.l #8,sp
}
    c764:	+--|-- bra.s c784 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c766:	|  '-> movea.l 16(sp),a0
    c76a:	|      move.l 96(a0),d0
    c76e:	|      move.l d0,-(sp)
    c770:	|      move.l 20(sp),-(sp)
    c774:	|      jsr c81e <turnMeAngle>
    c77a:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c77c:	|      movea.l 16(sp),a0
    c780:	|      clr.w 66(a0)
}
    c784:	'----> nop
    c786:	       move.l (sp)+,d2
    c788:	       addq.l #8,sp
    c78a:	       rts

0000c78c <stopPerson>:


BOOL stopPerson (int o) {
    c78c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c78e:	       move.l 8(sp),-(sp)
    c792:	       jsr afea <findPerson>
    c798:	       addq.l #4,sp
    c79a:	       move.l d0,(sp)
    if (moveMe)
    c79c:	,----- beq.s c7da <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c79e:	|      movea.l (sp),a0
    c7a0:	|      move.l 68(a0),d0
    c7a4:	+----- beq.s c7da <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c7a6:	|      movea.l (sp),a0
    c7a8:	|      move.l 68(a0),d0
    c7ac:	|      move.l d0,-(sp)
    c7ae:	|      jsr 55ac <abortFunction>
    c7b4:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c7b6:	|      movea.l (sp),a0
    c7b8:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c7bc:	|      movea.l (sp),a0
    c7be:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c7c2:	|      movea.l (sp),a0
    c7c4:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c7c8:	|      clr.l -(sp)
    c7ca:	|      move.l 4(sp),-(sp)
    c7ce:	|      jsr 46c4 <setFrames>
    c7d4:	|      addq.l #8,sp
            return TRUE;
    c7d6:	|      moveq #1,d0
    c7d8:	|  ,-- bra.s c7dc <stopPerson+0x50>
        }
    return FALSE;
    c7da:	'--|-> clr.w d0
}
    c7dc:	   '-> addq.l #4,sp
    c7de:	       rts

0000c7e0 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c7e0:	       subq.l #8,sp
	int total = 0;
    c7e2:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c7e6:	       clr.l (sp)
    c7e8:	   ,-- bra.s c80a <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c7ea:	,--|-> movea.l 12(sp),a0
    c7ee:	|  |   movea.l 4(a0),a0
    c7f2:	|  |   move.l (sp),d1
    c7f4:	|  |   move.l d1,d0
    c7f6:	|  |   add.l d0,d0
    c7f8:	|  |   add.l d1,d0
    c7fa:	|  |   add.l d0,d0
    c7fc:	|  |   add.l d0,d0
    c7fe:	|  |   adda.l d0,a0
    c800:	|  |   move.l 4(a0),d0
    c804:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c808:	|  |   addq.l #1,(sp)
    c80a:	|  '-> movea.l 12(sp),a0
    c80e:	|      move.l 8(a0),d0
    c812:	|      cmp.l (sp),d0
    c814:	'----- bgt.s c7ea <timeForAnim+0xa>
	}
	return total;
    c816:	       move.l 4(sp),d0
}
    c81a:	       addq.l #8,sp
    c81c:	       rts

0000c81e <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c81e:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c820:	       movea.l 8(sp),a0
    c824:	       movea.l 80(a0),a0
    c828:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c82c:	       movea.l 8(sp),a0
    c830:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c836:	       move.l (sp),-(sp)
    c838:	       pea b4 <_start+0xb4>
    c83c:	       jsr 18f08 <__divsi3>
    c842:	       addq.l #8,sp
    c844:	       move.l d0,d1
    c846:	       addi.l #180,d1
    c84c:	       movea.l 8(sp),a0
    c850:	       move.l 100(a0),d0
    c854:	       add.l d1,d0
    c856:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c85a:	   ,-- bra.s c864 <turnMeAngle+0x46>
    c85c:	,--|-> addi.l #-360,12(sp)
    c864:	|  '-> cmpi.l #359,12(sp)
    c86c:	'----- bgt.s c85c <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c86e:	       move.l (sp),-(sp)
    c870:	       move.l 16(sp),-(sp)
    c874:	       jsr 18e8a <__mulsi3>
    c87a:	       addq.l #8,sp
    c87c:	       pea 168 <decodeFilename+0x50>
    c880:	       move.l d0,-(sp)
    c882:	       jsr 18f08 <__divsi3>
    c888:	       addq.l #8,sp
    c88a:	       movea.l 8(sp),a0
    c88e:	       move.l d0,106(a0)
}
    c892:	       nop
    c894:	       addq.l #4,sp
    c896:	       rts

0000c898 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c898:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c89a:	          move.l 8(sp),-(sp)
    c89e:	          jsr afea <findPerson>
    c8a4:	          addq.l #4,sp
    c8a6:	          move.l d0,(sp)
    if (thisPerson) {
    c8a8:	,-------- beq.s c908 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c8aa:	|         movea.l (sp),a0
    c8ac:	|         move.l 68(a0),d0
    c8b0:	|     ,-- beq.s c8c2 <turnPersonToFace+0x2a>
    c8b2:	|     |   movea.l (sp),a0
    c8b4:	|     |   move.l 68(a0),d0
    c8b8:	|     |   move.l d0,-(sp)
    c8ba:	|     |   jsr 55ac <abortFunction>
    c8c0:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c8c2:	|     '-> movea.l (sp),a0
    c8c4:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c8c8:	|         movea.l (sp),a0
    c8ca:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c8ce:	|         movea.l (sp),a0
    c8d0:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c8d4:	|         move.l 12(sp),-(sp)
    c8d8:	|         move.l 4(sp),-(sp)
    c8dc:	|         jsr c81e <turnMeAngle>
    c8e2:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c8e4:	|         movea.l 1e7b8 <speech>,a0
    c8ea:	|         move.l (a0),d0
    c8ec:	|         cmp.l (sp),d0
    c8ee:	|  ,----- bne.s c8f4 <turnPersonToFace+0x5c>
    c8f0:	|  |      moveq #2,d0
    c8f2:	|  |  ,-- bra.s c8f6 <turnPersonToFace+0x5e>
    c8f4:	|  '--|-> moveq #0,d0
    c8f6:	|     '-> move.l d0,-(sp)
    c8f8:	|         move.l 4(sp),-(sp)
    c8fc:	|         jsr 46c4 <setFrames>
    c902:	|         addq.l #8,sp
        return TRUE;
    c904:	|         moveq #1,d0
    c906:	|     ,-- bra.s c90a <turnPersonToFace+0x72>
    }
    return FALSE;
    c908:	'-----|-> clr.w d0
}
    c90a:	      '-> addq.l #4,sp
    c90c:	          rts

0000c90e <walkAllPeople>:

void walkAllPeople() {
    c90e:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c910:	             move.l 1e8da <allPeople>,(sp)

	while (thisPerson) {
    c916:	   ,-------- bra.s c986 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c918:	,--|-------> movea.l (sp),a0
    c91a:	|  |         move.w 64(a0),d0
    c91e:	|  |     ,-- beq.s c932 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c920:	|  |     |   pea 1 <_start+0x1>
    c924:	|  |     |   move.l 4(sp),-(sp)
    c928:	|  |     |   jsr c992 <walkMe>
    c92e:	|  |     |   addq.l #8,sp
    c930:	|  |  ,--|-- bra.s c952 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c932:	|  |  |  '-> movea.l (sp),a0
    c934:	|  |  |      move.w 66(a0),d0
    c938:	|  |  +----- beq.s c952 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c93a:	|  |  |      move.l (sp),-(sp)
    c93c:	|  |  |      jsr c6ae <spinStep>
    c942:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c944:	|  |  |      clr.l -(sp)
    c946:	|  |  |      move.l 4(sp),-(sp)
    c94a:	|  |  |      jsr 46c4 <setFrames>
    c950:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c952:	|  |  '----> movea.l (sp),a0
    c954:	|  |         move.w 64(a0),d0
    c958:	|  |     ,-- bne.s c980 <walkAllPeople+0x72>
    c95a:	|  |     |   movea.l (sp),a0
    c95c:	|  |     |   move.w 66(a0),d0
    c960:	|  |     +-- bne.s c980 <walkAllPeople+0x72>
    c962:	|  |     |   movea.l (sp),a0
    c964:	|  |     |   move.l 68(a0),d0
    c968:	|  |     +-- beq.s c980 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c96a:	|  |     |   movea.l (sp),a0
    c96c:	|  |     |   move.l 68(a0),d0
    c970:	|  |     |   move.l d0,-(sp)
    c972:	|  |     |   jsr 79a0 <restartFunction>
    c978:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c97a:	|  |     |   movea.l (sp),a0
    c97c:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c980:	|  |     '-> movea.l (sp),a0
    c982:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c986:	|  '-------> tst.l (sp)
    c988:	'----------- bne.s c918 <walkAllPeople+0xa>
	}
}
    c98a:	             nop
    c98c:	             nop
    c98e:	             addq.l #4,sp
    c990:	             rts

0000c992 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c992:	                lea -20(sp),sp
    c996:	                move.l d3,-(sp)
    c998:	                move.l d2,-(sp)
    c99a:	                move.l 36(sp),d0
    c99e:	                move.w d0,d0
    c9a0:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c9a4:	                cmpi.w #-1,10(sp)
    c9aa:	,-------------- bne.s c9b2 <walkMe+0x20>
    c9ac:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c9b2:	>-------------> movea.l 32(sp),a0
    c9b6:	|               move.l 48(a0),d0
    c9ba:	|               move.l d0,-(sp)
    c9bc:	|               jsr 18930 <__floatsisf>
    c9c2:	|               addq.l #4,sp
    c9c4:	|               move.l d0,d1
    c9c6:	|               movea.l 32(sp),a0
    c9ca:	|               move.l (a0),d0
    c9cc:	|               move.l d0,-(sp)
    c9ce:	|               move.l d1,-(sp)
    c9d0:	|               jsr 18c24 <__subsf3>
    c9d6:	|               addq.l #8,sp
    c9d8:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c9dc:	|               movea.l 32(sp),a0
    c9e0:	|               move.l 52(a0),d0
    c9e4:	|               move.l d0,-(sp)
    c9e6:	|               jsr 18930 <__floatsisf>
    c9ec:	|               addq.l #4,sp
    c9ee:	|               move.l d0,d1
    c9f0:	|               movea.l 32(sp),a0
    c9f4:	|               move.l 4(a0),d0
    c9f8:	|               move.l d0,-(sp)
    c9fa:	|               move.l d1,-(sp)
    c9fc:	|               jsr 18c24 <__subsf3>
    ca02:	|               addq.l #8,sp
    ca04:	|               move.l d0,-(sp)
    ca06:	|               move.l d0,-(sp)
    ca08:	|               jsr 186ec <__addsf3>
    ca0e:	|               addq.l #8,sp
    ca10:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    ca14:	|               movea.l 32(sp),a0
    ca18:	|               move.l 32(a0),d2
    ca1c:	|               movea.l 32(sp),a0
    ca20:	|               move.l 28(a0),d0
    ca24:	|               move.l d0,-(sp)
    ca26:	|               jsr 18930 <__floatsisf>
    ca2c:	|               addq.l #4,sp
    ca2e:	|               move.l d0,-(sp)
    ca30:	|               move.l d2,-(sp)
    ca32:	|               jsr 189e2 <__mulsf3>
    ca38:	|               addq.l #8,sp
    ca3a:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    ca3e:	|               move.l 24(sp),-(sp)
    ca42:	|               jsr 18852 <__extendsfdf2>
    ca48:	|               addq.l #4,sp
    ca4a:	|               move.l #-1717986918,-(sp)
    ca50:	|               move.l #1070176665,-(sp)
    ca56:	|               move.l d1,-(sp)
    ca58:	|               move.l d0,-(sp)
    ca5a:	|               jsr 18b08 <__ltdf2>
    ca60:	|               lea 16(sp),sp
    ca64:	|               tst.l d0
    ca66:	|           ,-- bge.s ca70 <walkMe+0xde>
    ca68:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    ca70:	|           '-> move.l 20(sp),-(sp)
    ca74:	|               jsr 188c8 <__fixsfsi>
    ca7a:	|               addq.l #4,sp
    ca7c:	|               move.l d0,-(sp)
    ca7e:	|               jsr 9bda <TF_abs>
    ca84:	|               addq.l #4,sp
    ca86:	|               move.l d0,d2
    ca88:	|               move.l 16(sp),-(sp)
    ca8c:	|               jsr 188c8 <__fixsfsi>
    ca92:	|               addq.l #4,sp
    ca94:	|               move.l d0,-(sp)
    ca96:	|               jsr 9bda <TF_abs>
    ca9c:	|               addq.l #4,sp
    ca9e:	|               cmp.l d2,d0
    caa0:	|        ,----- bgt.s cac4 <walkMe+0x132>
    caa2:	|        |      move.l 20(sp),-(sp)
    caa6:	|        |      jsr 188c8 <__fixsfsi>
    caac:	|        |      addq.l #4,sp
    caae:	|        |      move.l d0,-(sp)
    cab0:	|        |      jsr 9bda <TF_abs>
    cab6:	|        |      addq.l #4,sp
    cab8:	|        |      move.l d0,-(sp)
    caba:	|        |      jsr 18930 <__floatsisf>
    cac0:	|        |      addq.l #4,sp
    cac2:	|        |  ,-- bra.s cae4 <walkMe+0x152>
    cac4:	|        '--|-> move.l 16(sp),-(sp)
    cac8:	|           |   jsr 188c8 <__fixsfsi>
    cace:	|           |   addq.l #4,sp
    cad0:	|           |   move.l d0,-(sp)
    cad2:	|           |   jsr 9bda <TF_abs>
    cad8:	|           |   addq.l #4,sp
    cada:	|           |   move.l d0,-(sp)
    cadc:	|           |   jsr 18930 <__floatsisf>
    cae2:	|           |   addq.l #4,sp
    cae4:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    cae8:	|               move.l 12(sp),-(sp)
    caec:	|               jsr 188c8 <__fixsfsi>
    caf2:	|               addq.l #4,sp
    caf4:	|               move.l d0,-(sp)
    caf6:	|               jsr 9bda <TF_abs>
    cafc:	|               addq.l #4,sp
    cafe:	|               move.l d0,-(sp)
    cb00:	|               jsr 18930 <__floatsisf>
    cb06:	|               addq.l #4,sp
    cb08:	|               move.l d0,-(sp)
    cb0a:	|               move.l 28(sp),-(sp)
    cb0e:	|               jsr 18b56 <__ltsf2>
    cb14:	|               addq.l #8,sp
    cb16:	|               tst.l d0
    cb18:	|        ,----- bge.w cbca <walkMe+0x238>
			if (thisPerson->spinning) {
    cb1c:	|        |      movea.l 32(sp),a0
    cb20:	|        |      move.w 66(a0),d0
    cb24:	|        |  ,-- beq.s cb42 <walkMe+0x1b0>
				spinStep(thisPerson);
    cb26:	|        |  |   move.l 32(sp),-(sp)
    cb2a:	|        |  |   jsr c6ae <spinStep>
    cb30:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    cb32:	|        |  |   pea 1 <_start+0x1>
    cb36:	|        |  |   move.l 36(sp),-(sp)
    cb3a:	|        |  |   jsr 46c4 <setFrames>
    cb40:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    cb42:	|        |  '-> move.l 24(sp),-(sp)
    cb46:	|        |      move.l 16(sp),-(sp)
    cb4a:	|        |      jsr 187e6 <__divsf3>
    cb50:	|        |      addq.l #8,sp
    cb52:	|        |      move.l d0,24(sp)
			if (move)
    cb56:	|        |      tst.w 10(sp)
    cb5a:	|        |  ,-- beq.s cbc4 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    cb5c:	|        |  |   movea.l 32(sp),a0
    cb60:	|        |  |   move.l 4(a0),d2
    cb64:	|        |  |   move.l 24(sp),d0
    cb68:	|        |  |   move.l d0,-(sp)
    cb6a:	|        |  |   move.l d0,-(sp)
    cb6c:	|        |  |   jsr 186ec <__addsf3>
    cb72:	|        |  |   addq.l #8,sp
    cb74:	|        |  |   move.l d0,-(sp)
    cb76:	|        |  |   move.l 20(sp),-(sp)
    cb7a:	|        |  |   jsr 187e6 <__divsf3>
    cb80:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cb82:	|        |  |   move.l d0,-(sp)
    cb84:	|        |  |   move.l d2,-(sp)
    cb86:	|        |  |   jsr 186ec <__addsf3>
    cb8c:	|        |  |   addq.l #8,sp
    cb8e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    cb90:	|        |  |   movea.l 32(sp),a0
    cb94:	|        |  |   move.l (a0),d3
    cb96:	|        |  |   move.l 24(sp),-(sp)
    cb9a:	|        |  |   move.l 24(sp),-(sp)
    cb9e:	|        |  |   jsr 187e6 <__divsf3>
    cba4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cba6:	|        |  |   move.l d0,-(sp)
    cba8:	|        |  |   move.l d3,-(sp)
    cbaa:	|        |  |   jsr 186ec <__addsf3>
    cbb0:	|        |  |   addq.l #8,sp
    cbb2:	|        |  |   move.l d2,-(sp)
    cbb4:	|        |  |   move.l d0,-(sp)
    cbb6:	|        |  |   move.l 40(sp),-(sp)
    cbba:	|        |  |   jsr b794 <moveAndScale>
    cbc0:	|        |  |   lea 12(sp),sp
			return TRUE;
    cbc4:	|        |  '-> moveq #1,d0
    cbc6:	|  ,-----|----- bra.w cc78 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    cbca:	|  |     '----> movea.l 32(sp),a0
    cbce:	|  |            move.l 56(a0),d0
    cbd2:	|  |            moveq #-1,d1
    cbd4:	|  |            cmp.l d0,d1
    cbd6:	|  |        ,-- bne.s cc0e <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    cbd8:	|  |        |   movea.l 32(sp),a0
    cbdc:	|  |        |   move.l 110(a0),d0
    cbe0:	|  |        |   moveq #-1,d1
    cbe2:	|  |        |   cmp.l d0,d1
    cbe4:	|  |  ,-----|-- beq.s cc22 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    cbe6:	|  |  |     |   movea.l 32(sp),a0
    cbea:	|  |  |     |   move.l 110(a0),d0
    cbee:	|  |  |     |   movea.l 32(sp),a0
    cbf2:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    cbf6:	|  |  |     |   movea.l 32(sp),a0
    cbfa:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    cc00:	|  |  |     |   move.l 32(sp),-(sp)
    cc04:	|  |  |     |   jsr c6ae <spinStep>
    cc0a:	|  |  |     |   addq.l #4,sp
			}
			break;
    cc0c:	|  |  +-----|-- bra.s cc22 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    cc0e:	|  |  |     '-> move.l 32(sp),-(sp)
    cc12:	|  |  |         jsr a34c <doBorderStuff>
    cc18:	|  |  |         addq.l #4,sp
    cc1a:	|  |  |         tst.w d0
    cc1c:	|  |  |  ,----- beq.s cc26 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    cc1e:	'--|--|--|----- bra.w c9b2 <walkMe+0x20>
			break;
    cc22:	   |  '--|----> nop
    cc24:	   |     |  ,-- bra.s cc28 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    cc26:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    cc28:	   |        '-> movea.l 32(sp),a0
    cc2c:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    cc30:	   |            clr.l -(sp)
    cc32:	   |            move.l 36(sp),-(sp)
    cc36:	   |            jsr 46c4 <setFrames>
    cc3c:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    cc3e:	   |            movea.l 32(sp),a0
    cc42:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    cc46:	   |            move.l d0,-(sp)
    cc48:	   |            jsr 18930 <__floatsisf>
    cc4e:	   |            addq.l #4,sp
    cc50:	   |            move.l d0,d2
				 thisPerson->walkToX,
    cc52:	   |            movea.l 32(sp),a0
    cc56:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    cc5a:	   |            move.l d0,-(sp)
    cc5c:	   |            jsr 18930 <__floatsisf>
    cc62:	   |            addq.l #4,sp
    cc64:	   |            move.l d2,-(sp)
    cc66:	   |            move.l d0,-(sp)
    cc68:	   |            move.l 40(sp),-(sp)
    cc6c:	   |            jsr b794 <moveAndScale>
    cc72:	   |            lea 12(sp),sp
	return FALSE;
    cc76:	   |            clr.w d0
}
    cc78:	   '----------> move.l (sp)+,d2
    cc7a:	                move.l (sp)+,d3
    cc7c:	                lea 20(sp),sp
    cc80:	                rts

0000cc82 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    cc82:	       subq.l #8,sp
    cc84:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    cc86:	   ,-- bra.s ccb6 <clearStackLib+0x34>
		k = stackLib;
    cc88:	,--|-> move.l 1e906 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    cc90:	|  |   movea.l 1e906 <stackLib>,a0
    cc96:	|  |   move.l 4(a0),d0
    cc9a:	|  |   move.l d0,1e906 <stackLib>
		FreeVec(k);
    cca0:	|  |   move.l 8(sp),4(sp)
    cca6:	|  |   move.l 1e876 <SysBase>,d0
    ccac:	|  |   movea.l d0,a6
    ccae:	|  |   movea.l 4(sp),a1
    ccb2:	|  |   jsr -690(a6)
	while (stackLib) {
    ccb6:	|  '-> move.l 1e906 <stackLib>,d0
    ccbc:	'----- bne.s cc88 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    ccbe:	       clr.l 1e902 <stackLibTotal>
}
    ccc4:	       nop
    ccc6:	       movea.l (sp)+,a6
    ccc8:	       addq.l #8,sp
    ccca:	       rts

0000cccc <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    cccc:	          lea -128(sp),sp
    ccd0:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    ccd4:	      ,-- bra.s cce6 <loadGame+0x1a>
    ccd6:	   ,--|-> move.l 1e80c <allRunningFunctions>,d0
    ccdc:	   |  |   move.l d0,-(sp)
    ccde:	   |  |   jsr 65de <finishFunction>
    cce4:	   |  |   addq.l #4,sp
    cce6:	   |  '-> move.l 1e80c <allRunningFunctions>,d0
    ccec:	   '----- bne.s ccd6 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    ccee:	          pea 1e90a <ssgVersion>
    ccf4:	          pea 1a6ac <PutChar+0x170c>
    ccfa:	          pea 41 <_start+0x41>
    ccfe:	          pea 53 <_start+0x53>
    cd02:	          move.l 160(sp),-(sp)
    cd06:	          jsr 75c6 <openAndVerify>
    cd0c:	          lea 20(sp),sp
    cd10:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    cd14:	      ,-- bne.s cd1c <loadGame+0x50>
    cd16:	      |   clr.w d0
    cd18:	,-----|-- bra.w cfc2 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    cd1c:	|     '-> move.l 112(sp),108(sp)
    cd22:	|         lea 140(sp),a0
    cd26:	|         lea -126(a0),a0
    cd2a:	|         move.l a0,120(sp)
    cd2e:	|         moveq #8,d0
    cd30:	|         move.l d0,116(sp)
    cd34:	|         move.l 1e87e <DOSBase>,d0
    cd3a:	|         movea.l d0,a6
    cd3c:	|         move.l 108(sp),d1
    cd40:	|         move.l 120(sp),d2
    cd44:	|         move.l 116(sp),d3
    cd48:	|         jsr -42(a6)
    cd4c:	|         move.l d0,132(sp)
    cd50:	|         move.l 132(sp),d0
    cd54:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    cd58:	|         moveq #8,d0
    cd5a:	|         cmp.l 128(sp),d0
    cd5e:	|     ,-- beq.s cd6e <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    cd60:	|     |   pea 1a6cd <PutChar+0x172d>
    cd66:	|     |   jsr 184fe <KPrintF>
    cd6c:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cd6e:	|     '-> move.l 14(sp),d1
    cd72:	|         move.l 1e816 <fileTime>,d0
    cd78:	|         cmp.l d1,d0
    cd7a:	|     ,-- bne.s cd8a <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    cd7c:	|     |   move.l 18(sp),d1
    cd80:	|     |   move.l 1e81a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cd86:	|     |   cmp.l d1,d0
    cd88:	|  ,--|-- beq.s cdaa <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    cd8a:	|  |  '-> move.l 144(sp),-(sp)
    cd8e:	|  |      pea 1a6e9 <PutChar+0x1749>
    cd94:	|  |      pea 1a7b0 <PutChar+0x1810>
    cd9a:	|  |      jsr 184fe <KPrintF>
    cda0:	|  |      lea 12(sp),sp
		return FALSE; 
    cda4:	|  |      clr.w d0
    cda6:	+--|----- bra.w cfc2 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    cdaa:	|  '----> move.l 112(sp),124(sp)
    cdb0:	|         move.l 1e87e <DOSBase>,d0
    cdb6:	|         movea.l d0,a6
    cdb8:	|         move.l 124(sp),d1
    cdbc:	|         jsr -306(a6)
    cdc0:	|         move.l d0,136(sp)
    cdc4:	|         move.l 136(sp),d0
    cdc8:	|         move.l d0,d0
    cdca:	|         move.w d0,1e0ba <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    cdd0:	|         move.l 112(sp),100(sp)
    cdd6:	|         move.l 1e87e <DOSBase>,d0
    cddc:	|         movea.l d0,a6
    cdde:	|         move.l 100(sp),d1
    cde2:	|         jsr -306(a6)
    cde6:	|         move.l d0,96(sp)
    cdea:	|         move.l 96(sp),d0
    cdee:	|         move.l d0,d0
    cdf0:	|         move.w d0,1e814 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    cdf6:	|         move.l 112(sp),92(sp)
    cdfc:	|         move.l 1e87e <DOSBase>,d0
    ce02:	|         movea.l d0,a6
    ce04:	|         move.l 92(sp),d1
    ce08:	|         jsr -306(a6)
    ce0c:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    ce10:	|         move.l 112(sp),84(sp)
    ce16:	|         move.l 1e87e <DOSBase>,d0
    ce1c:	|         movea.l d0,a6
    ce1e:	|         move.l 84(sp),d1
    ce22:	|         jsr -306(a6)
    ce26:	|         move.l d0,80(sp)
    ce2a:	|         move.l 80(sp),d0
    ce2e:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    ce32:	|     ,-- beq.s ce66 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    ce34:	|     |   move.l 112(sp),-(sp)
    ce38:	|     |   jsr 6bc <get2bytes>
    ce3e:	|     |   addq.l #4,sp
    ce40:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    ce44:	|     |   move.l 112(sp),-(sp)
    ce48:	|     |   jsr 6bc <get2bytes>
    ce4e:	|     |   addq.l #4,sp
    ce50:	|     |   move.l d0,1e96e <fontHeight>
		charOrder = readString(fp);		
    ce56:	|     |   move.l 112(sp),-(sp)
    ce5a:	|     |   jsr b02 <readString>
    ce60:	|     |   addq.l #4,sp
    ce62:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    ce66:	|     '-> move.l 104(sp),70(sp)
    ce6c:	|         move.l 1e876 <SysBase>,d0
    ce72:	|         movea.l d0,a6
    ce74:	|         movea.l 70(sp),a1
    ce78:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    ce7c:	|         move.l 112(sp),-(sp)
    ce80:	|         jsr 854 <getSigned>
    ce86:	|         addq.l #4,sp
    ce88:	|         move.w d0,1e76a <fontSpace>

	killAllPeople ();
    ce8e:	|         jsr b3fe <killAllPeople>
	killAllRegions ();
    ce94:	|         jsr 16d0e <killAllRegions>

	int camerX = get2bytes (fp);
    ce9a:	|         move.l 112(sp),-(sp)
    ce9e:	|         jsr 6bc <get2bytes>
    cea4:	|         addq.l #4,sp
    cea6:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    ceaa:	|         move.l 112(sp),-(sp)
    ceae:	|         jsr 6bc <get2bytes>
    ceb4:	|         addq.l #4,sp
    ceb6:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    ceba:	|         move.l 112(sp),-(sp)
    cebe:	|         jsr 7d8 <getFloat>
    cec4:	|         addq.l #4,sp
    cec6:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    ceca:	|         move.l 112(sp),54(sp)
    ced0:	|         move.l 1e87e <DOSBase>,d0
    ced6:	|         movea.l d0,a6
    ced8:	|         move.l 54(sp),d1
    cedc:	|         jsr -306(a6)
    cee0:	|         move.l d0,50(sp)
    cee4:	|         move.l 50(sp),d0
    cee8:	|         move.l d0,d0
    ceea:	|         move.b d0,1e1d8 <brightnessLevel>

	loadHandlers (fp);
    cef0:	|         move.l 112(sp),-(sp)
    cef4:	|         jsr 7526 <loadHandlers>
    cefa:	|         addq.l #4,sp
	loadRegions (fp);
    cefc:	|         move.l 112(sp),-(sp)
    cf00:	|         jsr 16d6a <loadRegions>
    cf06:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    cf08:	|         moveq #12,d0
    cf0a:	|         move.l d0,46(sp)
    cf0e:	|         clr.l 42(sp)
    cf12:	|         move.l 1e876 <SysBase>,d0
    cf18:	|         movea.l d0,a6
    cf1a:	|         move.l 46(sp),d0
    cf1e:	|         move.l 42(sp),d1
    cf22:	|         jsr -684(a6)
    cf26:	|         move.l d0,38(sp)
    cf2a:	|         move.l 38(sp),d0
    cf2e:	|         move.l d0,1e76c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    cf34:	|         move.l 1e76c <mouseCursorAnim>,d0
    cf3a:	|     ,-- bne.s cf4e <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    cf3c:	|     |   pea 1a7ba <PutChar+0x181a>
    cf42:	|     |   jsr 184fe <KPrintF>
    cf48:	|     |   addq.l #4,sp
		return FALSE;
    cf4a:	|     |   clr.w d0
    cf4c:	+-----|-- bra.s cfc2 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    cf4e:	|     '-> jsr ddf2 <nosnapshot>
	if (FGetC (fp)) {
    cf54:	|         move.l 112(sp),34(sp)
    cf5a:	|         move.l 1e87e <DOSBase>,d0
    cf60:	|         movea.l d0,a6
    cf62:	|         move.l 34(sp),d1
    cf66:	|         jsr -306(a6)
    cf6a:	|         move.l d0,30(sp)
    cf6e:	|         move.l 30(sp),d0
    cf72:	|     ,-- beq.s cf88 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    cf74:	|     |   move.l 112(sp),-(sp)
    cf78:	|     |   jsr de72 <restoreSnapshot>
    cf7e:	|     |   addq.l #4,sp
    cf80:	|     |   tst.w d0
    cf82:	|     +-- bne.s cf88 <loadGame+0x2bc>
    cf84:	|     |   clr.w d0
    cf86:	+-----|-- bra.s cfc2 <loadGame+0x2f6>
	}

	Close (fp);
    cf88:	|     '-> move.l 112(sp),26(sp)
    cf8e:	|         move.l 1e87e <DOSBase>,d0
    cf94:	|         movea.l d0,a6
    cf96:	|         move.l 26(sp),d1
    cf9a:	|         jsr -36(a6)
    cf9e:	|         move.l d0,22(sp)
	clearStackLib ();
    cfa2:	|         jsr cc82 <clearStackLib>

	cameraX = camerX;
    cfa8:	|         move.l 66(sp),1e930 <cameraX>
	cameraY = camerY;
    cfb0:	|         move.l 62(sp),1e934 <cameraY>
	cameraZoom = camerZ;
    cfb8:	|         move.l 58(sp),1e1fc <cameraZoom>

	return TRUE;
    cfc0:	|         moveq #1,d0
}
    cfc2:	'-------> movem.l (sp)+,d2-d3/a6
    cfc6:	          lea 128(sp),sp
    cfca:	          rts

0000cfcc <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    cfcc:	   ,-> lea -64(sp),sp
    cfd0:	   |   move.l a6,-(sp)
    cfd2:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    cfd4:	   |   movea.l 76(sp),a0
    cfd8:	   |   move.l (a0),d0
    cfda:	   |   move.l 80(sp),-(sp)
    cfde:	   |   move.l d0,-(sp)
    cfe0:	   |   jsr 8d0 <put2bytes>
    cfe6:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    cfe8:	   |   movea.l 76(sp),a0
    cfec:	   |   move.l 40(a0),d0
    cff0:	,--|-- beq.s d02c <saveFunction+0x60>
		FPutC (fp, 1);
    cff2:	|  |   move.l 80(sp),52(sp)
    cff8:	|  |   moveq #1,d0
    cffa:	|  |   move.l d0,48(sp)
    cffe:	|  |   move.l 1e87e <DOSBase>,d0
    d004:	|  |   movea.l d0,a6
    d006:	|  |   move.l 52(sp),d1
    d00a:	|  |   move.l 48(sp),d2
    d00e:	|  |   jsr -312(a6)
    d012:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    d016:	|  |   movea.l 76(sp),a0
    d01a:	|  |   move.l 40(a0),d0
    d01e:	|  |   move.l 80(sp),-(sp)
    d022:	|  |   move.l d0,-(sp)
    d024:	|  '-- jsr cfcc <saveFunction>(pc)
    d028:	|      addq.l #8,sp
    d02a:	|  ,-- bra.s d04e <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    d02c:	'--|-> move.l 80(sp),64(sp)
    d032:	   |   clr.l 60(sp)
    d036:	   |   move.l 1e87e <DOSBase>,d0
    d03c:	   |   movea.l d0,a6
    d03e:	   |   move.l 64(sp),d1
    d042:	   |   move.l 60(sp),d2
    d046:	   |   jsr -312(a6)
    d04a:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    d04e:	   '-> movea.l 76(sp),a0
    d052:	       move.l 12(a0),d0
    d056:	       move.l 80(sp),-(sp)
    d05a:	       move.l d0,-(sp)
    d05c:	       jsr 958 <put4bytes>
    d062:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    d064:	       movea.l 76(sp),a0
    d068:	       move.l 36(a0),d0
    d06c:	       move.l 80(sp),-(sp)
    d070:	       move.l d0,-(sp)
    d072:	       jsr 8d0 <put2bytes>
    d078:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    d07a:	       move.l 80(sp),40(sp)
    d080:	       movea.l 76(sp),a0
    d084:	       move.w 54(a0),d0
    d088:	       movea.w d0,a0
    d08a:	       move.l a0,36(sp)
    d08e:	       move.l 1e87e <DOSBase>,d0
    d094:	       movea.l d0,a6
    d096:	       move.l 40(sp),d1
    d09a:	       move.l 36(sp),d2
    d09e:	       jsr -312(a6)
    d0a2:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    d0a6:	       move.l 80(sp),28(sp)
    d0ac:	       movea.l 76(sp),a0
    d0b0:	       move.w 48(a0),d0
    d0b4:	       movea.w d0,a0
    d0b6:	       move.l a0,24(sp)
    d0ba:	       move.l 1e87e <DOSBase>,d0
    d0c0:	       movea.l d0,a6
    d0c2:	       move.l 28(sp),d1
    d0c6:	       move.l 24(sp),d2
    d0ca:	       jsr -312(a6)
    d0ce:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    d0d2:	       move.l 80(sp),16(sp)
    d0d8:	       movea.l 76(sp),a0
    d0dc:	       move.w 50(a0),d0
    d0e0:	       movea.w d0,a0
    d0e2:	       move.l a0,12(sp)
    d0e6:	       move.l 1e87e <DOSBase>,d0
    d0ec:	       movea.l d0,a6
    d0ee:	       move.l 16(sp),d1
    d0f2:	       move.l 12(sp),d2
    d0f6:	       jsr -312(a6)
    d0fa:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    d0fe:	       moveq #28,d0
    d100:	       add.l 76(sp),d0
    d104:	       move.l 80(sp),-(sp)
    d108:	       move.l d0,-(sp)
    d10a:	       jsr d824 <saveVariable>
    d110:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    d112:	       movea.l 76(sp),a0
    d116:	       move.b 56(a0),d0
    d11a:	   ,-- beq.s d12a <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    d11c:	   |   pea 1a7db <PutChar+0x183b>
    d122:	   |   jsr 184fe <KPrintF>
    d128:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    d12a:	   '-> movea.l 76(sp),a0
    d12e:	       move.l 24(a0),d0
    d132:	       move.l 80(sp),-(sp)
    d136:	       move.l d0,-(sp)
    d138:	       jsr d698 <saveStack>
    d13e:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d140:	       clr.l 68(sp)
    d144:	   ,-- bra.s d168 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    d146:	,--|-> movea.l 76(sp),a0
    d14a:	|  |   move.l 20(a0),d1
    d14e:	|  |   move.l 68(sp),d0
    d152:	|  |   lsl.l #3,d0
    d154:	|  |   add.l d1,d0
    d156:	|  |   move.l 80(sp),-(sp)
    d15a:	|  |   move.l d0,-(sp)
    d15c:	|  |   jsr d824 <saveVariable>
    d162:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d164:	|  |   addq.l #1,68(sp)
    d168:	|  '-> movea.l 76(sp),a0
    d16c:	|      move.l 8(a0),d0
    d170:	|      cmp.l 68(sp),d0
    d174:	'----- bgt.s d146 <saveFunction+0x17a>
	}
}
    d176:	       nop
    d178:	       nop
    d17a:	       move.l (sp)+,d2
    d17c:	       movea.l (sp)+,a6
    d17e:	       lea 64(sp),sp
    d182:	       rts

0000d184 <saveGame>:

BOOL saveGame (char * fname) {
    d184:	          lea -248(sp),sp
    d188:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    d18c:	          move.l 264(sp),244(sp)
    d192:	          move.l #1006,240(sp)
    d19a:	          move.l 1e87e <DOSBase>,d0
    d1a0:	          movea.l d0,a6
    d1a2:	          move.l 244(sp),d1
    d1a6:	          move.l 240(sp),d2
    d1aa:	          jsr -30(a6)
    d1ae:	          move.l d0,236(sp)
    d1b2:	          move.l 236(sp),d0
    d1b6:	          move.l d0,232(sp)
	if (fp == NULL) {
    d1ba:	      ,-- bne.s d1d0 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    d1bc:	      |   pea 1a7fd <PutChar+0x185d>
    d1c2:	      |   jsr 184fe <KPrintF>
    d1c8:	      |   addq.l #4,sp
		return FALSE;
    d1ca:	      |   clr.w d0
    d1cc:	,-----|-- bra.w d68e <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    d1d0:	|     '-> move.l 232(sp),228(sp)
    d1d6:	|         move.l #108570,224(sp)
    d1de:	|         moveq #6,d0
    d1e0:	|         move.l d0,220(sp)
    d1e4:	|         move.l 1e87e <DOSBase>,d0
    d1ea:	|         movea.l d0,a6
    d1ec:	|         move.l 228(sp),d1
    d1f0:	|         move.l 224(sp),d2
    d1f4:	|         move.l 220(sp),d3
    d1f8:	|         jsr -48(a6)
    d1fc:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    d200:	|         move.l 232(sp),212(sp)
    d206:	|         clr.l 208(sp)
    d20a:	|         move.l 1e87e <DOSBase>,d0
    d210:	|         movea.l d0,a6
    d212:	|         move.l 212(sp),d1
    d216:	|         move.l 208(sp),d2
    d21a:	|         jsr -312(a6)
    d21e:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    d222:	|         move.l 232(sp),200(sp)
    d228:	|         clr.l 196(sp)
    d22c:	|         move.l 1e87e <DOSBase>,d0
    d232:	|         movea.l d0,a6
    d234:	|         move.l 200(sp),d1
    d238:	|         move.l 196(sp),d2
    d23c:	|         jsr -312(a6)
    d240:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    d244:	|         move.l 232(sp),188(sp)
    d24a:	|         moveq #2,d0
    d24c:	|         move.l d0,184(sp)
    d250:	|         move.l 1e87e <DOSBase>,d0
    d256:	|         movea.l d0,a6
    d258:	|         move.l 188(sp),d1
    d25c:	|         move.l 184(sp),d2
    d260:	|         jsr -312(a6)
    d264:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    d268:	|         move.l 232(sp),176(sp)
    d26e:	|         moveq #2,d0
    d270:	|         move.l d0,172(sp)
    d274:	|         move.l 1e87e <DOSBase>,d0
    d27a:	|         movea.l d0,a6
    d27c:	|         move.l 176(sp),d1
    d280:	|         move.l 172(sp),d2
    d284:	|         jsr -312(a6)
    d288:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    d28c:	|         move.l 232(sp),164(sp)
    d292:	|         move.l #124950,160(sp)
    d29a:	|         moveq #8,d0
    d29c:	|         move.l d0,156(sp)
    d2a0:	|         move.l 1e87e <DOSBase>,d0
    d2a6:	|         movea.l d0,a6
    d2a8:	|         move.l 164(sp),d1
    d2ac:	|         move.l 160(sp),d2
    d2b0:	|         move.l 156(sp),d3
    d2b4:	|         jsr -48(a6)
    d2b8:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    d2bc:	|         move.l 232(sp),148(sp)
    d2c2:	|         move.w 1e0ba <allowAnyFilename>,d0
    d2c8:	|         movea.w d0,a0
    d2ca:	|         move.l a0,144(sp)
    d2ce:	|         move.l 1e87e <DOSBase>,d0
    d2d4:	|         movea.l d0,a6
    d2d6:	|         move.l 148(sp),d1
    d2da:	|         move.l 144(sp),d2
    d2de:	|         jsr -312(a6)
    d2e2:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    d2e6:	|         move.l 232(sp),136(sp)
    d2ec:	|         move.w 1e814 <captureAllKeys>,d0
    d2f2:	|         movea.w d0,a0
    d2f4:	|         move.l a0,132(sp)
    d2f8:	|         move.l 1e87e <DOSBase>,d0
    d2fe:	|         movea.l d0,a6
    d300:	|         move.l 136(sp),d1
    d304:	|         move.l 132(sp),d2
    d308:	|         jsr -312(a6)
    d30c:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    d310:	|         move.l 232(sp),124(sp)
    d316:	|         moveq #1,d0
    d318:	|         move.l d0,120(sp)
    d31c:	|         move.l 1e87e <DOSBase>,d0
    d322:	|         movea.l d0,a6
    d324:	|         move.l 124(sp),d1
    d328:	|         move.l 120(sp),d2
    d32c:	|         jsr -312(a6)
    d330:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    d334:	|         move.l 232(sp),112(sp)
    d33a:	|         move.l 1e97e <fontTableSize>,d0
    d340:	|         sgt d0
    d342:	|         neg.b d0
    d344:	|         move.b d0,d0
    d346:	|         andi.l #255,d0
    d34c:	|         move.l d0,108(sp)
    d350:	|         move.l 1e87e <DOSBase>,d0
    d356:	|         movea.l d0,a6
    d358:	|         move.l 112(sp),d1
    d35c:	|         move.l 108(sp),d2
    d360:	|         jsr -312(a6)
    d364:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    d368:	|         move.l 1e97e <fontTableSize>,d0
    d36e:	|     ,-- ble.s d3ac <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    d370:	|     |   move.l 1e972 <loadedFontNum>,d0
    d376:	|     |   move.l 232(sp),-(sp)
    d37a:	|     |   move.l d0,-(sp)
    d37c:	|     |   jsr 8d0 <put2bytes>
    d382:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    d384:	|     |   move.l 1e96e <fontHeight>,d0
    d38a:	|     |   move.l 232(sp),-(sp)
    d38e:	|     |   move.l d0,-(sp)
    d390:	|     |   jsr 8d0 <put2bytes>
    d396:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    d398:	|     |   move.l 1e976 <fontOrderString>,d0
    d39e:	|     |   move.l 232(sp),-(sp)
    d3a2:	|     |   move.l d0,-(sp)
    d3a4:	|     |   jsr bd8 <writeString>
    d3aa:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    d3ac:	|     '-> move.w 1e76a <fontSpace>,d0
    d3b2:	|         movea.w d0,a0
    d3b4:	|         move.l 232(sp),-(sp)
    d3b8:	|         move.l a0,-(sp)
    d3ba:	|         jsr a9c <putSigned>
    d3c0:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    d3c2:	|         move.l 1e930 <cameraX>,d0
    d3c8:	|         move.l 232(sp),-(sp)
    d3cc:	|         move.l d0,-(sp)
    d3ce:	|         jsr 8d0 <put2bytes>
    d3d4:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    d3d6:	|         move.l 1e934 <cameraY>,d0
    d3dc:	|         move.l 232(sp),-(sp)
    d3e0:	|         move.l d0,-(sp)
    d3e2:	|         jsr 8d0 <put2bytes>
    d3e8:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    d3ea:	|         move.l 1e1fc <cameraZoom>,d0
    d3f0:	|         move.l 232(sp),-(sp)
    d3f4:	|         move.l d0,-(sp)
    d3f6:	|         jsr a46 <putFloat>
    d3fc:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    d3fe:	|         move.l 232(sp),100(sp)
    d404:	|         move.b 1e1d8 <brightnessLevel>,d0
    d40a:	|         move.b d0,d0
    d40c:	|         andi.l #255,d0
    d412:	|         move.l d0,96(sp)
    d416:	|         move.l 1e87e <DOSBase>,d0
    d41c:	|         movea.l d0,a6
    d41e:	|         move.l 100(sp),d1
    d422:	|         move.l 96(sp),d2
    d426:	|         jsr -312(a6)
    d42a:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    d42e:	|         move.l 232(sp),-(sp)
    d432:	|         jsr 7af8 <saveHandlers>
    d438:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    d43a:	|         move.l 232(sp),-(sp)
    d43e:	|         jsr 16f24 <saveRegions>
    d444:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    d446:	|         move.l 1e76c <mouseCursorAnim>,d0
    d44c:	|         move.l 232(sp),-(sp)
    d450:	|         move.l d0,-(sp)
    d452:	|         jsr b9a8 <saveAnim>
    d458:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    d45a:	|         move.l 1e770 <mouseCursorFrameNum>,d0
    d460:	|         move.l 232(sp),-(sp)
    d464:	|         move.l d0,-(sp)
    d466:	|         jsr 8d0 <put2bytes>
    d46c:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    d46e:	|         move.l 1e80c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    d476:	|         clr.l 248(sp)
	while (thisFunction) {
    d47a:	|     ,-- bra.s d48a <saveGame+0x306>
		countFunctions ++;
    d47c:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    d480:	|  |  |   movea.l 252(sp),a0
    d484:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d48a:	|  |  '-> tst.l 252(sp)
    d48e:	|  '----- bne.s d47c <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    d490:	|         move.l 232(sp),-(sp)
    d494:	|         move.l 252(sp),-(sp)
    d498:	|         jsr 8d0 <put2bytes>
    d49e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    d4a0:	|         move.l 1e80c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    d4a8:	|     ,-- bra.s d4c4 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    d4aa:	|  ,--|-> move.l 232(sp),-(sp)
    d4ae:	|  |  |   move.l 256(sp),-(sp)
    d4b2:	|  |  |   jsr cfcc <saveFunction>
    d4b8:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d4ba:	|  |  |   movea.l 252(sp),a0
    d4be:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d4c4:	|  |  '-> tst.l 252(sp)
    d4c8:	|  '----- bne.s d4aa <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d4ca:	|         clr.l 256(sp)
    d4ce:	|     ,-- bra.s d4f0 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d4d0:	|  ,--|-> move.l 1e822 <globalVars>,d1
    d4d6:	|  |  |   move.l 256(sp),d0
    d4da:	|  |  |   lsl.l #3,d0
    d4dc:	|  |  |   add.l d1,d0
    d4de:	|  |  |   move.l 232(sp),-(sp)
    d4e2:	|  |  |   move.l d0,-(sp)
    d4e4:	|  |  |   jsr d824 <saveVariable>
    d4ea:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d4ec:	|  |  |   addq.l #1,256(sp)
    d4f0:	|  |  '-> move.l 1e84c <numGlobals>,d0
    d4f6:	|  |      cmp.l 256(sp),d0
    d4fa:	|  '----- bgt.s d4d0 <saveGame+0x34c>
	}

	savePeople (fp);
    d4fc:	|         move.l 232(sp),-(sp)
    d500:	|         jsr bad0 <savePeople>
    d506:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d508:	|         movea.l 1e992 <currentFloor>,a0
    d50e:	|         move.l 8(a0),d0
    d512:	|  ,----- beq.s d550 <saveGame+0x3cc>
		FPutC (fp, 1);
    d514:	|  |      move.l 232(sp),76(sp)
    d51a:	|  |      moveq #1,d0
    d51c:	|  |      move.l d0,72(sp)
    d520:	|  |      move.l 1e87e <DOSBase>,d0
    d526:	|  |      movea.l d0,a6
    d528:	|  |      move.l 76(sp),d1
    d52c:	|  |      move.l 72(sp),d2
    d530:	|  |      jsr -312(a6)
    d534:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d538:	|  |      movea.l 1e992 <currentFloor>,a0
    d53e:	|  |      move.l (a0),d0
    d540:	|  |      move.l 232(sp),-(sp)
    d544:	|  |      move.l d0,-(sp)
    d546:	|  |      jsr 8d0 <put2bytes>
    d54c:	|  |      addq.l #8,sp
    d54e:	|  |  ,-- bra.s d572 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d550:	|  '--|-> move.l 232(sp),88(sp)
    d556:	|     |   clr.l 84(sp)
    d55a:	|     |   move.l 1e87e <DOSBase>,d0
    d560:	|     |   movea.l d0,a6
    d562:	|     |   move.l 88(sp),d1
    d566:	|     |   move.l 84(sp),d2
    d56a:	|     |   jsr -312(a6)
    d56e:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d572:	|     '-> move.l 232(sp),64(sp)
    d578:	|         move.l 1e944 <speechMode>,60(sp)
    d580:	|         move.l 1e87e <DOSBase>,d0
    d586:	|         movea.l d0,a6
    d588:	|         move.l 64(sp),d1
    d58c:	|         move.l 60(sp),d2
    d590:	|         jsr -312(a6)
    d594:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d598:	|         move.b 1e740 <fadeMode>,d0
    d59e:	|         move.b d0,d0
    d5a0:	|         andi.l #255,d0
    d5a6:	|         move.l d0,52(sp)
    d5aa:	|         move.l 232(sp),48(sp)
    d5b0:	|         move.l 1e87e <DOSBase>,d0
    d5b6:	|         movea.l d0,a6
    d5b8:	|         move.l 52(sp),d1
    d5bc:	|         move.l 48(sp),d2
    d5c0:	|         jsr -312(a6)
    d5c4:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d5c8:	|         move.l 1e7b8 <speech>,d0
    d5ce:	|         move.l 232(sp),-(sp)
    d5d2:	|         move.l d0,-(sp)
    d5d4:	|         jsr 4578 <saveSpeech>
    d5da:	|         addq.l #8,sp
	saveStatusBars (fp);
    d5dc:	|         move.l 232(sp),-(sp)
    d5e0:	|         jsr 8cce <saveStatusBars>
    d5e6:	|         addq.l #4,sp
	saveSounds (fp);
    d5e8:	|         move.l 232(sp),-(sp)
    d5ec:	|         jsr db96 <saveSounds>
    d5f2:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d5f4:	|         move.w 1e92e <saveEncoding>,d0
    d5fa:	|         move.w d0,d0
    d5fc:	|         andi.l #65535,d0
    d602:	|         move.l 232(sp),-(sp)
    d606:	|         move.l d0,-(sp)
    d608:	|         jsr 8d0 <put2bytes>
    d60e:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d610:	|         move.l 1e920 <parallaxStuff>,d0
    d616:	|         move.l 232(sp),-(sp)
    d61a:	|         move.l d0,-(sp)
    d61c:	|         jsr de98 <saveParallaxRecursive>
    d622:	|         addq.l #8,sp
	FPutC (fp, 0);
    d624:	|         move.l 232(sp),40(sp)
    d62a:	|         clr.l 36(sp)
    d62e:	|         move.l 1e87e <DOSBase>,d0
    d634:	|         movea.l d0,a6
    d636:	|         move.l 40(sp),d1
    d63a:	|         move.l 36(sp),d2
    d63e:	|         jsr -312(a6)
    d642:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d646:	|         move.l 232(sp),28(sp)
    d64c:	|         move.l 1e1de <languageNum>,24(sp)
    d654:	|         move.l 1e87e <DOSBase>,d0
    d65a:	|         movea.l d0,a6
    d65c:	|         move.l 28(sp),d1
    d660:	|         move.l 24(sp),d2
    d664:	|         jsr -312(a6)
    d668:	|         move.l d0,20(sp)

	Close(fp);
    d66c:	|         move.l 232(sp),16(sp)
    d672:	|         move.l 1e87e <DOSBase>,d0
    d678:	|         movea.l d0,a6
    d67a:	|         move.l 16(sp),d1
    d67e:	|         jsr -36(a6)
    d682:	|         move.l d0,12(sp)
	clearStackLib ();
    d686:	|         jsr cc82 <clearStackLib>
	return TRUE;
    d68c:	|         moveq #1,d0
}
    d68e:	'-------> movem.l (sp)+,d2-d3/a6
    d692:	          lea 248(sp),sp
    d696:	          rts

0000d698 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d698:	       lea -12(sp),sp
	int elements = 0;
    d69c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d6a0:	       move.l 16(sp),(sp)
	while (search) {
    d6a4:	   ,-- bra.s d6b0 <saveStack+0x18>
		elements ++;
    d6a6:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d6aa:	|  |   movea.l (sp),a0
    d6ac:	|  |   move.l 8(a0),(sp)
	while (search) {
    d6b0:	|  '-> tst.l (sp)
    d6b2:	'----- bne.s d6a6 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d6b4:	       move.l 20(sp),-(sp)
    d6b8:	       move.l 12(sp),-(sp)
    d6bc:	       jsr 8d0 <put2bytes>
    d6c2:	       addq.l #8,sp
	search = vs;
    d6c4:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d6c8:	       clr.l 4(sp)
    d6cc:	   ,-- bra.s d6e8 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d6ce:	,--|-> move.l (sp),d0
    d6d0:	|  |   move.l 20(sp),-(sp)
    d6d4:	|  |   move.l d0,-(sp)
    d6d6:	|  |   jsr d824 <saveVariable>
    d6dc:	|  |   addq.l #8,sp
		search = search -> next;
    d6de:	|  |   movea.l (sp),a0
    d6e0:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d6e4:	|  |   addq.l #1,4(sp)
    d6e8:	|  '-> move.l 4(sp),d0
    d6ec:	|      cmp.l 8(sp),d0
    d6f0:	'----- blt.s d6ce <saveStack+0x36>
	}
}
    d6f2:	       nop
    d6f4:	       nop
    d6f6:	       lea 12(sp),sp
    d6fa:	       rts

0000d6fc <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d6fc:	             lea -44(sp),sp
    d700:	             move.l a6,-(sp)
    d702:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d704:	             move.l 1e906 <stackLib>,48(sp)
	int a = 0;
    d70c:	             clr.l 44(sp)
	while (s) {
    d710:	      ,----- bra.s d76e <saveStackRef+0x72>
		if (s -> stack == vs) {
    d712:	   ,--|----> movea.l 48(sp),a0
    d716:	   |  |      move.l (a0),d0
    d718:	   |  |      cmp.l 56(sp),d0
    d71c:	   |  |  ,-- bne.s d760 <saveStackRef+0x64>
			FPutC (fp, 1);
    d71e:	   |  |  |   move.l 60(sp),16(sp)
    d724:	   |  |  |   moveq #1,d0
    d726:	   |  |  |   move.l d0,12(sp)
    d72a:	   |  |  |   move.l 1e87e <DOSBase>,d0
    d730:	   |  |  |   movea.l d0,a6
    d732:	   |  |  |   move.l 16(sp),d1
    d736:	   |  |  |   move.l 12(sp),d2
    d73a:	   |  |  |   jsr -312(a6)
    d73e:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d742:	   |  |  |   move.l 1e902 <stackLibTotal>,d0
    d748:	   |  |  |   sub.l 44(sp),d0
    d74c:	   |  |  |   move.l 60(sp),-(sp)
    d750:	   |  |  |   move.l d0,-(sp)
    d752:	   |  |  |   jsr 8d0 <put2bytes>
    d758:	   |  |  |   addq.l #8,sp
			return TRUE;
    d75a:	   |  |  |   moveq #1,d0
    d75c:	,--|--|--|-- bra.w d81a <saveStackRef+0x11e>
		}
		s = s -> next;
    d760:	|  |  |  '-> movea.l 48(sp),a0
    d764:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d76a:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d76e:	|  |  '----> tst.l 48(sp)
    d772:	|  '-------- bne.s d712 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d774:	|            move.l 60(sp),40(sp)
    d77a:	|            clr.l 36(sp)
    d77e:	|            move.l 1e87e <DOSBase>,d0
    d784:	|            movea.l d0,a6
    d786:	|            move.l 40(sp),d1
    d78a:	|            move.l 36(sp),d2
    d78e:	|            jsr -312(a6)
    d792:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d796:	|            movea.l 56(sp),a0
    d79a:	|            move.l (a0),d0
    d79c:	|            move.l 60(sp),-(sp)
    d7a0:	|            move.l d0,-(sp)
    d7a2:	|            jsr d698 <saveStack>
    d7a8:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d7aa:	|            moveq #8,d0
    d7ac:	|            move.l d0,28(sp)
    d7b0:	|            clr.l 24(sp)
    d7b4:	|            move.l 1e876 <SysBase>,d0
    d7ba:	|            movea.l d0,a6
    d7bc:	|            move.l 28(sp),d0
    d7c0:	|            move.l 24(sp),d1
    d7c4:	|            jsr -684(a6)
    d7c8:	|            move.l d0,20(sp)
    d7cc:	|            move.l 20(sp),d0
    d7d0:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d7d4:	|            move.l 1e902 <stackLibTotal>,d0
    d7da:	|            addq.l #1,d0
    d7dc:	|            move.l d0,1e902 <stackLibTotal>
	if (! s) {
    d7e2:	|            tst.l 48(sp)
    d7e6:	|        ,-- bne.s d7fa <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d7e8:	|        |   pea 1a849 <PutChar+0x18a9>
    d7ee:	|        |   jsr 184fe <KPrintF>
    d7f4:	|        |   addq.l #4,sp
		return FALSE;
    d7f6:	|        |   clr.w d0
    d7f8:	+--------|-- bra.s d81a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d7fa:	|        '-> move.l 1e906 <stackLib>,d0
    d800:	|            movea.l 48(sp),a0
    d804:	|            move.l d0,4(a0)
	s -> stack = vs;
    d808:	|            movea.l 48(sp),a0
    d80c:	|            move.l 56(sp),(a0)
	stackLib = s;
    d810:	|            move.l 48(sp),1e906 <stackLib>
	return TRUE;
    d818:	|            moveq #1,d0
}
    d81a:	'----------> move.l (sp)+,d2
    d81c:	             movea.l (sp)+,a6
    d81e:	             lea 44(sp),sp
    d822:	             rts

0000d824 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d824:	          lea -12(sp),sp
    d828:	          move.l a6,-(sp)
    d82a:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d82c:	          move.l 28(sp),16(sp)
    d832:	          movea.l 24(sp),a0
    d836:	          move.l (a0),d0
    d838:	          move.l d0,12(sp)
    d83c:	          move.l 1e87e <DOSBase>,d0
    d842:	          movea.l d0,a6
    d844:	          move.l 16(sp),d1
    d848:	          move.l 12(sp),d2
    d84c:	          jsr -312(a6)
    d850:	          move.l d0,8(sp)
	switch (from -> varType) {
    d854:	          movea.l 24(sp),a0
    d858:	          move.l (a0),d0
    d85a:	          moveq #9,d1
    d85c:	          cmp.l d0,d1
    d85e:	      ,-- bcs.w d90e <saveVariable+0xea>
    d862:	      |   add.l d0,d0
    d864:	      |   movea.l d0,a0
    d866:	      |   adda.l #55410,a0
    d86c:	      |   move.w (a0),d0
    d86e:	      |   jmp (d872 <saveVariable+0x4e>,pc,d0.w)
    d872:	      |   ori.l #1310740,(a0)+
    d878:	      |   ori.b #20,(20,a0,d0.w)
    d87e:	      |   .short 0x004c
    d880:	      |   ori.b #126,(a4)
    d884:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d888:	      |   ori.b #40,(a0)+
    d88c:	      |   ori.b #47,d4
    d890:	      |   ori.b #0,(a4)+
    d894:	      |   jsr 958 <put4bytes>
    d89a:	      |   addq.l #8,sp
		return TRUE;
    d89c:	      |   moveq #1,d0
    d89e:	,-----|-- bra.w d94a <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d8a2:	|     |   movea.l 24(sp),a0
    d8a6:	|     |   move.l 4(a0),d0
    d8aa:	|     |   move.l 28(sp),-(sp)
    d8ae:	|     |   move.l d0,-(sp)
    d8b0:	|     |   jsr bd8 <writeString>
    d8b6:	|     |   addq.l #8,sp
		return TRUE;
    d8b8:	|     |   moveq #1,d0
    d8ba:	+-----|-- bra.w d94a <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d8be:	|     |   movea.l 24(sp),a0
    d8c2:	|     |   move.l 4(a0),d0
    d8c6:	|     |   move.l 28(sp),-(sp)
    d8ca:	|     |   move.l d0,-(sp)
    d8cc:	|     |   jsr d6fc <saveStackRef>
    d8d2:	|     |   addq.l #8,sp
    d8d4:	+-----|-- bra.s d94a <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d8d6:	|     |   movea.l 24(sp),a0
    d8da:	|     |   move.l 4(a0),d0
    d8de:	|     |   move.l 28(sp),-(sp)
    d8e2:	|     |   move.l d0,-(sp)
    d8e4:	|     |   jsr ba72 <saveCostume>
    d8ea:	|     |   addq.l #8,sp
		return FALSE;
    d8ec:	|     |   clr.w d0
    d8ee:	+-----|-- bra.s d94a <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d8f0:	|     |   movea.l 24(sp),a0
    d8f4:	|     |   move.l 4(a0),d0
    d8f8:	|     |   move.l 28(sp),-(sp)
    d8fc:	|     |   move.l d0,-(sp)
    d8fe:	|     |   jsr b9a8 <saveAnim>
    d904:	|     |   addq.l #8,sp
		return FALSE;
    d906:	|     |   clr.w d0
    d908:	+-----|-- bra.s d94a <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d90a:	|     |   clr.w d0
    d90c:	+-----|-- bra.s d94a <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d90e:	|     '-> movea.l 24(sp),a0
    d912:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d914:	|         moveq #10,d1
    d916:	|         cmp.l d0,d1
    d918:	|  ,----- bcs.s d932 <saveVariable+0x10e>
						typeName[from->varType] :
    d91a:	|  |      movea.l 24(sp),a0
    d91e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d920:	|  |      add.l d0,d0
    d922:	|  |      movea.l d0,a1
    d924:	|  |      adda.l d0,a1
    d926:	|  |      lea 1e742 <typeName>,a0
    d92c:	|  |      move.l (0,a1,a0.l),d0
    d930:	|  |  ,-- bra.s d938 <saveVariable+0x114>
    d932:	|  '--|-> move.l #108654,d0
    d938:	|     '-> move.l d0,-(sp)
    d93a:	|         pea 1a875 <PutChar+0x18d5>
    d940:	|         jsr 184fe <KPrintF>
    d946:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d948:	|         moveq #1,d0
    d94a:	'-------> move.l (sp)+,d2
    d94c:	          movea.l (sp)+,a6
    d94e:	          lea 12(sp),sp
    d952:	          rts

0000d954 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d954:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d958:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d960:	          movea.l 4(sp),a0
    d964:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d96a:	          movea.l 4(sp),a0
    d96e:	          move.w 10(a0),d0
    d972:	          lsr.w #8,d0
    d974:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d978:	          movea.l 4(sp),a0
    d97c:	          move.w 10(a0),d0
    d980:	          move.b d0,(sp)

    if(counterx_new)
    d982:	,-------- beq.w da28 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d986:	|         clr.w d1
    d988:	|         move.b (sp),d1
    d98a:	|         move.w 1e90e <counterx_old>,d0
    d990:	|         sub.w d0,d1
    d992:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d996:	|         cmpi.w #128,10(sp)
    d99c:	|     ,-- blt.s d9b4 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d99e:	|     |   move.w #1,1e82a <input+0x4>
            counterx_diff -= 256;    
    d9a6:	|     |   move.w 10(sp),d0
    d9aa:	|     |   addi.w #-256,d0
    d9ae:	|     |   move.w d0,10(sp)
    d9b2:	|  ,--|-- bra.s d9e0 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d9b4:	|  |  '-> cmpi.w #-129,10(sp)
    d9ba:	|  |  ,-- bgt.s d9d2 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d9bc:	|  |  |   move.w 10(sp),d0
    d9c0:	|  |  |   addi.w #256,d0
    d9c4:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d9c8:	|  |  |   move.w #1,1e82a <input+0x4>
    d9d0:	|  +--|-- bra.s d9e0 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d9d2:	|  |  '-> tst.w 10(sp)
    d9d6:	|  +----- beq.s d9e0 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d9d8:	|  |      move.w #1,1e82a <input+0x4>
        }

        input.mouseX += counterx_diff;
    d9e0:	|  '----> move.l 1e830 <input+0xa>,d0
    d9e6:	|         movea.w 10(sp),a0
    d9ea:	|         add.l a0,d0
    d9ec:	|         move.l d0,1e830 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d9f2:	|         move.l 1e830 <input+0xa>,d1
    d9f8:	|         move.l 1e7bc <winWidth>,d0
    d9fe:	|         cmp.l d1,d0
    da00:	|     ,-- bge.s da10 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    da02:	|     |   move.l 1e7bc <winWidth>,d0
    da08:	|     |   move.l d0,1e830 <input+0xa>
    da0e:	|  ,--|-- bra.s da1e <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    da10:	|  |  '-> move.l 1e830 <input+0xa>,d0
    da16:	|  +----- bpl.s da1e <CsiCheckInput+0xca>
            input.mouseX = 0;
    da18:	|  |      clr.l 1e830 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    da1e:	|  '----> clr.w d0
    da20:	|         move.b (sp),d0
    da22:	|         move.w d0,1e90e <counterx_old>
    }    

    if(countery_new)
    da28:	'-------> tst.b 1(sp)
    da2c:	,-------- beq.w dad6 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    da30:	|         clr.w d1
    da32:	|         move.b 1(sp),d1
    da36:	|         move.w 1e910 <countery_old>,d0
    da3c:	|         sub.w d0,d1
    da3e:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    da42:	|         cmpi.w #128,8(sp)
    da48:	|     ,-- blt.s da60 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    da4a:	|     |   move.w #1,1e82a <input+0x4>
            countery_diff -= 256;    
    da52:	|     |   move.w 8(sp),d0
    da56:	|     |   addi.w #-256,d0
    da5a:	|     |   move.w d0,8(sp)
    da5e:	|  ,--|-- bra.s da8c <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    da60:	|  |  '-> cmpi.w #-129,8(sp)
    da66:	|  |  ,-- bgt.s da7e <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    da68:	|  |  |   move.w #1,1e82a <input+0x4>
            countery_diff += 256;
    da70:	|  |  |   move.w 8(sp),d0
    da74:	|  |  |   addi.w #256,d0
    da78:	|  |  |   move.w d0,8(sp)
    da7c:	|  +--|-- bra.s da8c <CsiCheckInput+0x138>
        } else if (countery_diff) {
    da7e:	|  |  '-> tst.w 8(sp)
    da82:	|  +----- beq.s da8c <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    da84:	|  |      move.w #1,1e82a <input+0x4>
        }

        input.mouseY += countery_diff;
    da8c:	|  '----> move.l 1e834 <input+0xe>,d0
    da92:	|         movea.w 8(sp),a0
    da96:	|         add.l a0,d0
    da98:	|         move.l d0,1e834 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    da9e:	|         move.l 1e834 <input+0xe>,d1
    daa4:	|         move.l 1e7c0 <winHeight>,d0
    daaa:	|         cmp.l d1,d0
    daac:	|     ,-- bge.s dabc <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    daae:	|     |   move.l 1e7c0 <winHeight>,d0
    dab4:	|     |   move.l d0,1e834 <input+0xe>
    daba:	|  ,--|-- bra.s daca <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    dabc:	|  |  '-> move.l 1e834 <input+0xe>,d0
    dac2:	|  +----- bpl.s daca <CsiCheckInput+0x176>
            input.mouseY = 0;
    dac4:	|  |      clr.l 1e834 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    daca:	|  '----> clr.w d0
    dacc:	|         move.b 1(sp),d0
    dad0:	|         move.w d0,1e910 <countery_old>
    } 

    input.leftRelease = FALSE;
    dad6:	'-------> clr.w 1e82c <input+0x6>
    input.rightRelease = FALSE;
    dadc:	          clr.w 1e82e <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    dae2:	          move.w 1e826 <input>,d0
    dae8:	      ,-- beq.s db0e <CsiCheckInput+0x1ba>
    daea:	      |   movea.l #12574721,a0
    daf0:	      |   move.b (a0),d0
    daf2:	      |   move.b d0,d0
    daf4:	      |   andi.l #255,d0
    dafa:	      |   moveq #64,d1
    dafc:	      |   and.l d1,d0
    dafe:	      +-- beq.s db0e <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    db00:	      |   clr.w 1e826 <input>
        input.leftRelease = TRUE;
    db06:	      |   move.w #1,1e82c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    db0e:	      '-> move.w 1e828 <input+0x2>,d0
    db14:	      ,-- beq.s db3c <CsiCheckInput+0x1e8>
    db16:	      |   movea.l #14675990,a0
    db1c:	      |   move.w (a0),d0
    db1e:	      |   move.w d0,d0
    db20:	      |   andi.l #65535,d0
    db26:	      |   andi.l #1024,d0
    db2c:	      +-- beq.s db3c <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    db2e:	      |   clr.w 1e828 <input+0x2>
        input.rightRelease = TRUE;
    db34:	      |   move.w #1,1e82e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    db3c:	      '-> movea.l #12574721,a0
    db42:	          move.b (a0),d0
    db44:	          move.b d0,d0
    db46:	          andi.l #255,d0
    db4c:	          moveq #64,d1
    db4e:	          and.l d1,d0
    db50:	      ,-- bne.s db5a <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    db52:	      |   move.w #1,1e826 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    db5a:	      '-> movea.l #14675990,a0
    db60:	          move.w (a0),d0
    db62:	          move.w d0,d0
    db64:	          andi.l #65535,d0
    db6a:	          andi.l #1024,d0
    db70:	      ,-- bne.s db7a <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    db72:	      |   move.w #1,1e828 <input+0x2>
    }

    db7a:	      '-> nop
    db7c:	          lea 12(sp),sp
    db80:	          rts

0000db82 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    db82:	moveq #0,d0
}
    db84:	rts

0000db86 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    db86:	nop
    db88:	rts

0000db8a <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    db8a:	nop
    db8c:	rts

0000db8e <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    db8e:	moveq #1,d0
}
    db90:	rts

0000db92 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    db92:	nop
    db94:	rts

0000db96 <saveSounds>:

void saveSounds (BPTR fp) {
    db96:	lea -12(sp),sp
    db9a:	move.l a6,-(sp)
    db9c:	move.l d2,-(sp)
	FPutC (fp,0);
    db9e:	move.l 24(sp),16(sp)
    dba4:	clr.l 12(sp)
    dba8:	move.l 1e87e <DOSBase>,d0
    dbae:	movea.l d0,a6
    dbb0:	move.l 16(sp),d1
    dbb4:	move.l 12(sp),d2
    dbb8:	jsr -312(a6)
    dbbc:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    dbc0:	move.l 1e1f8 <defSoundVol>,d0
    dbc6:	move.l 24(sp),-(sp)
    dbca:	move.l d0,-(sp)
    dbcc:	jsr 8d0 <put2bytes>
    dbd2:	addq.l #8,sp
	put2bytes (defVol, fp);
    dbd4:	move.l 1e1f4 <defVol>,d0
    dbda:	move.l 24(sp),-(sp)
    dbde:	move.l d0,-(sp)
    dbe0:	jsr 8d0 <put2bytes>
    dbe6:	addq.l #8,sp
}
    dbe8:	nop
    dbea:	move.l (sp)+,d2
    dbec:	movea.l (sp)+,a6
    dbee:	lea 12(sp),sp
    dbf2:	rts

0000dbf4 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    dbf4:	move.l 4(sp),1e1f4 <defVol>
}
    dbfc:	nop
    dbfe:	rts

0000dc00 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    dc00:	move.l 4(sp),1e1f8 <defSoundVol>
}
    dc08:	nop
    dc0a:	rts

0000dc0c <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    dc0c:	nop
    dc0e:	rts

0000dc10 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    dc10:	nop
    dc12:	rts

0000dc14 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    dc14:	nop
    dc16:	rts

0000dc18 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    dc18:	subq.l #4,sp
    dc1a:	move.l 12(sp),d0
    dc1e:	move.w d0,d0
    dc20:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    dc24:	moveq #1,d0
}
    dc26:	addq.l #4,sp
    dc28:	rts

0000dc2a <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    dc2a:	nop
    dc2c:	rts

0000dc2e <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    dc2e:	move.l 16(sp),-(sp)
    dc32:	move.l 16(sp),-(sp)
    dc36:	move.l 16(sp),-(sp)
    dc3a:	move.l 16(sp),-(sp)
    dc3e:	jsr e0e <CstBlankScreen>
    dc44:	lea 16(sp),sp
}
    dc48:	nop
    dc4a:	rts

0000dc4c <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    dc4c:	pea 1a898 <PutChar+0x18f8>
    dc52:	jsr 184fe <KPrintF>
    dc58:	addq.l #4,sp
}
    dc5a:	nop
    dc5c:	rts

0000dc5e <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    dc5e:	movea.l 8(sp),a1
    dc62:	movea.l 12(sp),a0
    dc66:	move.l 8(sp),d1
    dc6a:	move.l 4(sp),d0
    dc6e:	move.l a1,-(sp)
    dc70:	move.l a0,-(sp)
    dc72:	move.l d1,-(sp)
    dc74:	move.l d0,-(sp)
    dc76:	jsr 4c72 <drawLine>
    dc7c:	lea 16(sp),sp
}
    dc80:	nop
    dc82:	rts

0000dc84 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    dc84:	movea.l 12(sp),a1
    dc88:	movea.l 4(sp),a0
    dc8c:	move.l 8(sp),d1
    dc90:	move.l 4(sp),d0
    dc94:	move.l a1,-(sp)
    dc96:	move.l a0,-(sp)
    dc98:	move.l d1,-(sp)
    dc9a:	move.l d0,-(sp)
    dc9c:	jsr 4c72 <drawLine>
    dca2:	lea 16(sp),sp
}
    dca6:	nop
    dca8:	rts

0000dcaa <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    dcaa:	pea 1a8d1 <PutChar+0x1931>
    dcb0:	jsr 184fe <KPrintF>
    dcb6:	addq.l #4,sp
}
    dcb8:	nop
    dcba:	rts

0000dcbc <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    dcbc:	jsr 1b96 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    dcc2:	pea 1e91a <backdropTextureName>
    dcc8:	pea 1 <_start+0x1>
    dccc:	jsr 4df4 <deleteTextures>
    dcd2:	addq.l #8,sp
	backdropTextureName = 0;
    dcd4:	clr.l 1e91a <backdropTextureName>
	backdropExists = FALSE;
    dcda:	clr.w 1e91e <backdropExists>
}
    dce0:	nop
    dce2:	rts

0000dce4 <killParallax>:

void killParallax () {
    dce4:	          lea -12(sp),sp
    dce8:	          move.l a6,-(sp)
	while (parallaxStuff) {
    dcea:	   ,----- bra.s dd56 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    dcec:	,--|----> move.l 1e920 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    dcf4:	|  |      movea.l 12(sp),a0
    dcf8:	|  |      move.l 42(a0),d0
    dcfc:	|  |      move.l d0,1e920 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    dd02:	|  |      move.l 12(sp),d0
    dd06:	|  |      addq.l #4,d0
    dd08:	|  |      move.l d0,-(sp)
    dd0a:	|  |      pea 1 <_start+0x1>
    dd0e:	|  |      jsr 4df4 <deleteTextures>
    dd14:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    dd16:	|  |      movea.l 12(sp),a0
    dd1a:	|  |      move.l (a0),d0
    dd1c:	|  |  ,-- beq.s dd36 <killParallax+0x52>
    dd1e:	|  |  |   movea.l 12(sp),a0
    dd22:	|  |  |   move.l (a0),8(sp)
    dd26:	|  |  |   move.l 1e876 <SysBase>,d0
    dd2c:	|  |  |   movea.l d0,a6
    dd2e:	|  |  |   movea.l 8(sp),a1
    dd32:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    dd36:	|  |  '-> tst.l 12(sp)
    dd3a:	|  |  ,-- beq.s dd52 <killParallax+0x6e>
    dd3c:	|  |  |   move.l 12(sp),4(sp)
    dd42:	|  |  |   move.l 1e876 <SysBase>,d0
    dd48:	|  |  |   movea.l d0,a6
    dd4a:	|  |  |   movea.l 4(sp),a1
    dd4e:	|  |  |   jsr -690(a6)
		k = NULL;
    dd52:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    dd56:	|  '----> move.l 1e920 <parallaxStuff>,d0
    dd5c:	'-------- bne.s dcec <killParallax+0x8>
	}
}
    dd5e:	          nop
    dd60:	          nop
    dd62:	          movea.l (sp)+,a6
    dd64:	          lea 12(sp),sp
    dd68:	          rts

0000dd6a <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    dd6a:	       move.l 4(sp),-(sp)
    dd6e:	       jsr 7f44 <openFileFromNum>
    dd74:	       addq.l #4,sp
    dd76:	       tst.l d0
    dd78:	   ,-- bne.s dd8a <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    dd7a:	   |   pea 1a8f2 <PutChar+0x1952>
    dd80:	   |   jsr 184fe <KPrintF>
    dd86:	   |   addq.l #4,sp
		return;
    dd88:	,--|-- bra.s ddaa <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    dd8a:	|  '-> move.l 1e85c <bigDataFile>,d0
    dd90:	|      move.l 12(sp),-(sp)
    dd94:	|      move.l 12(sp),-(sp)
    dd98:	|      move.l d0,-(sp)
    dd9a:	|      jsr 1efc <CstLoadBackdrop>
    dda0:	|      lea 12(sp),sp
	finishAccess ();
    dda4:	|      jsr 7e3c <finishAccess>
	
}
    ddaa:	'----> rts

0000ddac <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    ddac:	subq.l #8,sp
    ddae:	movea.l 12(sp),a0
    ddb2:	move.l 16(sp),d1
    ddb6:	move.l 20(sp),d0
    ddba:	movea.w a0,a0
    ddbc:	move.w a0,6(sp)
    ddc0:	move.w d1,d1
    ddc2:	move.w d1,4(sp)
    ddc6:	move.w d0,d0
    ddc8:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    ddcc:	pea 1a941 <PutChar+0x19a1>
    ddd2:	jsr 184fe <KPrintF>
    ddd8:	addq.l #4,sp

}
    ddda:	nop
    dddc:	addq.l #8,sp
    ddde:	rts

0000dde0 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    dde0:	pea 1a964 <PutChar+0x19c4>
    dde6:	jsr 184fe <KPrintF>
    ddec:	addq.l #4,sp
}
    ddee:	nop
    ddf0:	rts

0000ddf2 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    ddf2:	pea 1e924 <snapshotTextureName>
    ddf8:	pea 1 <_start+0x1>
    ddfc:	jsr 4df4 <deleteTextures>
    de02:	addq.l #8,sp
	snapshotTextureName = 0;
    de04:	clr.l 1e924 <snapshotTextureName>
}
    de0a:	nop
    de0c:	rts

0000de0e <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    de0e:	clr.l 1e930 <cameraX>
	cameraY = 0;
    de14:	clr.l 1e934 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    de1a:	move.l 1e916 <sceneHeight>,d0
    de20:	move.l d0,d1
    de22:	move.l 1e912 <sceneWidth>,d0
    de28:	move.l d1,-(sp)
    de2a:	move.l d0,-(sp)
    de2c:	jsr 3c26 <CstReserveBackdrop>
    de32:	addq.l #8,sp
}
    de34:	rts

0000de36 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    de36:	jsr dcbc <killBackDrop>
	killParallax ();
    de3c:	jsr dce4 <killParallax>
	killZBuffer ();
    de42:	jsr 9054 <killZBuffer>
	sceneWidth = x;
    de48:	move.l 4(sp),d0
    de4c:	move.l d0,1e912 <sceneWidth>
	sceneHeight = y;
    de52:	move.l 8(sp),d0
    de56:	move.l d0,1e916 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    de5c:	pea 1a99d <PutChar+0x19fd>
    de62:	jsr 184fe <KPrintF>
    de68:	addq.l #4,sp
	return reserveBackdrop();
    de6a:	jsr de0e <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    de70:	rts

0000de72 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    de72:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    de74:	move.l 12(sp),-(sp)
    de78:	jsr 6bc <get2bytes>
    de7e:	addq.l #4,sp
    de80:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    de84:	move.l 12(sp),-(sp)
    de88:	jsr 6bc <get2bytes>
    de8e:	addq.l #4,sp
    de90:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    de92:	moveq #1,d0
}
    de94:	addq.l #8,sp
    de96:	rts

0000de98 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    de98:	   ,-> lea -12(sp),sp
    de9c:	   |   move.l a6,-(sp)
    de9e:	   |   move.l d2,-(sp)
	if (me) {
    dea0:	   |   tst.l 24(sp)
    dea4:	,--|-- beq.w df3a <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    dea8:	|  |   movea.l 24(sp),a0
    deac:	|  |   move.l 42(a0),d0
    deb0:	|  |   move.l 28(sp),-(sp)
    deb4:	|  |   move.l d0,-(sp)
    deb6:	|  '-- jsr de98 <saveParallaxRecursive>(pc)
    deba:	|      addq.l #8,sp
		FPutC (fp, 1);
    debc:	|      move.l 28(sp),16(sp)
    dec2:	|      moveq #1,d0
    dec4:	|      move.l d0,12(sp)
    dec8:	|      move.l 1e87e <DOSBase>,d0
    dece:	|      movea.l d0,a6
    ded0:	|      move.l 16(sp),d1
    ded4:	|      move.l 12(sp),d2
    ded8:	|      jsr -312(a6)
    dedc:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    dee0:	|      movea.l 24(sp),a0
    dee4:	|      move.w 28(a0),d0
    dee8:	|      move.w d0,d0
    deea:	|      andi.l #65535,d0
    def0:	|      move.l 28(sp),-(sp)
    def4:	|      move.l d0,-(sp)
    def6:	|      jsr 8d0 <put2bytes>
    defc:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    defe:	|      movea.l 24(sp),a0
    df02:	|      move.w 30(a0),d0
    df06:	|      move.w d0,d0
    df08:	|      andi.l #65535,d0
    df0e:	|      move.l 28(sp),-(sp)
    df12:	|      move.l d0,-(sp)
    df14:	|      jsr 8d0 <put2bytes>
    df1a:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    df1c:	|      movea.l 24(sp),a0
    df20:	|      move.w 32(a0),d0
    df24:	|      move.w d0,d0
    df26:	|      andi.l #65535,d0
    df2c:	|      move.l 28(sp),-(sp)
    df30:	|      move.l d0,-(sp)
    df32:	|      jsr 8d0 <put2bytes>
    df38:	|      addq.l #8,sp
	}
}
    df3a:	'----> nop
    df3c:	       move.l (sp)+,d2
    df3e:	       movea.l (sp)+,a6
    df40:	       lea 12(sp),sp
    df44:	       rts

0000df46 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    df46:	pea 1a9c4 <PutChar+0x1a24>
    df4c:	jsr 184fe <KPrintF>
    df52:	addq.l #4,sp
	return TRUE;
    df54:	moveq #1,d0
    df56:	rts

0000df58 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    df58:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    df5a:	             move.l 1e928 <allObjectTypes>,(sp)

	while (huntType) {
    df60:	      ,----- bra.s df78 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    df62:	   ,--|----> movea.l (sp),a0
    df64:	   |  |      move.l 4(a0),d0
    df68:	   |  |      cmp.l 8(sp),d0
    df6c:	   |  |  ,-- bne.s df72 <findObjectType+0x1a>
    df6e:	   |  |  |   move.l (sp),d0
    df70:	,--|--|--|-- bra.s df88 <findObjectType+0x30>
		huntType = huntType -> next;
    df72:	|  |  |  '-> movea.l (sp),a0
    df74:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    df78:	|  |  '----> tst.l (sp)
    df7a:	|  '-------- bne.s df62 <findObjectType+0xa>
	}

	return loadObjectType (i);
    df7c:	|            move.l 8(sp),-(sp)
    df80:	|            jsr e048 <loadObjectType>
    df86:	|            addq.l #4,sp
}
    df88:	'----------> addq.l #4,sp
    df8a:	             rts

0000df8c <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    df8c:	             lea -12(sp),sp
	int i, num = 0;
    df90:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    df94:	             move.l 20(sp),-(sp)
    df98:	             jsr df58 <findObjectType>
    df9e:	             addq.l #4,sp
    dfa0:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    dfa2:	             clr.l 8(sp)
    dfa6:	   ,-------- bra.s dfdc <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    dfa8:	,--|-------> movea.l (sp),a0
    dfaa:	|  |         move.l 38(a0),d1
    dfae:	|  |         move.l 8(sp),d0
    dfb2:	|  |         lsl.l #3,d0
    dfb4:	|  |         movea.l d1,a0
    dfb6:	|  |         adda.l d0,a0
    dfb8:	|  |         move.l (a0),d0
    dfba:	|  |         cmp.l 16(sp),d0
    dfbe:	|  |  ,----- bne.s dfd8 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    dfc0:	|  |  |      movea.l (sp),a0
    dfc2:	|  |  |      move.l 38(a0),d1
    dfc6:	|  |  |      move.l 8(sp),d0
    dfca:	|  |  |      lsl.l #3,d0
    dfcc:	|  |  |      movea.l d1,a0
    dfce:	|  |  |      adda.l d0,a0
    dfd0:	|  |  |      move.l 4(a0),4(sp)
			break;
    dfd6:	|  |  |  ,-- bra.s dfe8 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    dfd8:	|  |  '--|-> addq.l #1,8(sp)
    dfdc:	|  '-----|-> movea.l (sp),a0
    dfde:	|        |   move.l 16(a0),d0
    dfe2:	|        |   cmp.l 8(sp),d0
    dfe6:	'--------|-- bgt.s dfa8 <getCombinationFunction+0x1c>
		}
	}

	return num;
    dfe8:	         '-> move.l 4(sp),d0
}
    dfec:	             lea 12(sp),sp
    dff0:	             rts

0000dff2 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    dff2:	moveq #1,d0
}
    dff4:	rts

0000dff6 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    dff6:	subq.l #8,sp
    dff8:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    dffa:	move.l 16(sp),-(sp)
    dffe:	jsr 6bc <get2bytes>
    e004:	addq.l #4,sp
    e006:	move.l d0,-(sp)
    e008:	jsr e048 <loadObjectType>
    e00e:	addq.l #4,sp
    e010:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    e014:	movea.l 8(sp),a0
    e018:	move.l (a0),4(sp)
    e01c:	move.l 1e876 <SysBase>,d0
    e022:	movea.l d0,a6
    e024:	movea.l 4(sp),a1
    e028:	jsr -690(a6)
	r -> screenName = readString (fp);
    e02c:	move.l 16(sp),-(sp)
    e030:	jsr b02 <readString>
    e036:	addq.l #4,sp
    e038:	movea.l 8(sp),a0
    e03c:	move.l d0,(a0)
	return r;
    e03e:	move.l 8(sp),d0
}
    e042:	movea.l (sp)+,a6
    e044:	addq.l #8,sp
    e046:	rts

0000e048 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    e048:	          lea -84(sp),sp
    e04c:	          move.l a6,-(sp)
    e04e:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    e050:	          moveq #42,d0
    e052:	          move.l d0,84(sp)
    e056:	          clr.l 80(sp)
    e05a:	          move.l 1e876 <SysBase>,d0
    e060:	          movea.l d0,a6
    e062:	          move.l 84(sp),d0
    e066:	          move.l 80(sp),d1
    e06a:	          jsr -684(a6)
    e06e:	          move.l d0,76(sp)
    e072:	          move.l 76(sp),d0
    e076:	          move.l d0,72(sp)

    if (newType) {
    e07a:	,-------- beq.w e2f4 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    e07e:	|         move.l 96(sp),-(sp)
    e082:	|         jsr 800c <openObjectSlice>
    e088:	|         addq.l #4,sp
    e08a:	|         tst.w d0
    e08c:	+-------- beq.w e2f4 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    e090:	|         move.l 1e85c <bigDataFile>,d0
    e096:	|         move.l d0,-(sp)
    e098:	|         jsr 6bc <get2bytes>
    e09e:	|         addq.l #4,sp
    e0a0:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    e0a4:	|         move.l 1e85c <bigDataFile>,64(sp)
    e0ac:	|         move.l 1e87e <DOSBase>,d0
    e0b2:	|         movea.l d0,a6
    e0b4:	|         move.l 64(sp),d1
    e0b8:	|         jsr -306(a6)
    e0bc:	|         move.l d0,60(sp)
    e0c0:	|         move.l 60(sp),d0
    e0c4:	|         move.l d0,d0
    e0c6:	|         movea.l 72(sp),a0
    e0ca:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    e0ce:	|         move.l 1e85c <bigDataFile>,56(sp)
    e0d6:	|         move.l 1e87e <DOSBase>,d0
    e0dc:	|         movea.l d0,a6
    e0de:	|         move.l 56(sp),d1
    e0e2:	|         jsr -306(a6)
    e0e6:	|         move.l d0,52(sp)
    e0ea:	|         move.l 52(sp),d0
    e0ee:	|         move.l d0,d0
    e0f0:	|         movea.l 72(sp),a0
    e0f4:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    e0f8:	|         move.l 1e85c <bigDataFile>,48(sp)
    e100:	|         move.l 1e87e <DOSBase>,d0
    e106:	|         movea.l d0,a6
    e108:	|         move.l 48(sp),d1
    e10c:	|         jsr -306(a6)
    e110:	|         move.l d0,44(sp)
    e114:	|         move.l 44(sp),d0
    e118:	|         move.l d0,d0
    e11a:	|         movea.l 72(sp),a0
    e11e:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    e122:	|         move.l 1e85c <bigDataFile>,40(sp)
    e12a:	|         move.l 1e87e <DOSBase>,d0
    e130:	|         movea.l d0,a6
    e132:	|         move.l 40(sp),d1
    e136:	|         jsr -306(a6)
    e13a:	|         move.l d0,36(sp)
    e13e:	|         move.l 36(sp),d0
    e142:	|         movea.l 72(sp),a0
    e146:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    e14a:	|         move.l 1e85c <bigDataFile>,32(sp)
    e152:	|         move.l 1e87e <DOSBase>,d0
    e158:	|         movea.l d0,a6
    e15a:	|         move.l 32(sp),d1
    e15e:	|         jsr -306(a6)
    e162:	|         move.l d0,28(sp)
    e166:	|         move.l 28(sp),d0
    e16a:	|         movea.l 72(sp),a0
    e16e:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    e172:	|         move.l 1e85c <bigDataFile>,d0
    e178:	|         move.l d0,-(sp)
    e17a:	|         jsr 718 <get4bytes>
    e180:	|         addq.l #4,sp
    e182:	|         movea.l 72(sp),a0
    e186:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    e18a:	|         move.l 1e85c <bigDataFile>,d0
    e190:	|         move.l d0,-(sp)
    e192:	|         jsr 6bc <get2bytes>
    e198:	|         addq.l #4,sp
    e19a:	|         movea.l 72(sp),a0
    e19e:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    e1a2:	|         move.l 1e85c <bigDataFile>,24(sp)
    e1aa:	|         move.l 1e87e <DOSBase>,d0
    e1b0:	|         movea.l d0,a6
    e1b2:	|         move.l 24(sp),d1
    e1b6:	|         jsr -306(a6)
    e1ba:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    e1be:	|         move.l 1e85c <bigDataFile>,d0
    e1c4:	|         move.l d0,-(sp)
    e1c6:	|         jsr 7d8 <getFloat>
    e1cc:	|         addq.l #4,sp
            getFloat(bigDataFile);
    e1ce:	|         move.l 1e85c <bigDataFile>,d0
    e1d4:	|         move.l d0,-(sp)
    e1d6:	|         jsr 7d8 <getFloat>
    e1dc:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    e1de:	|         move.l 1e85c <bigDataFile>,d0
    e1e4:	|         move.l d0,-(sp)
    e1e6:	|         jsr 6bc <get2bytes>
    e1ec:	|         addq.l #4,sp
    e1ee:	|         move.l d0,d0
    e1f0:	|         movea.l 72(sp),a0
    e1f4:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    e1f8:	|         move.l 1e85c <bigDataFile>,d0
    e1fe:	|         move.l d0,-(sp)
    e200:	|         jsr 6bc <get2bytes>
    e206:	|         addq.l #4,sp
    e208:	|         movea.l 72(sp),a0
    e20c:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    e210:	|         movea.l 72(sp),a0
    e214:	|         move.l 16(a0),d0
    e218:	|  ,----- beq.s e24a <loadObjectType+0x202>
    e21a:	|  |      movea.l 72(sp),a0
    e21e:	|  |      move.l 16(a0),d0
    e222:	|  |      lsl.l #3,d0
    e224:	|  |      move.l d0,16(sp)
    e228:	|  |      clr.l 12(sp)
    e22c:	|  |      move.l 1e876 <SysBase>,d0
    e232:	|  |      movea.l d0,a6
    e234:	|  |      move.l 16(sp),d0
    e238:	|  |      move.l 12(sp),d1
    e23c:	|  |      jsr -684(a6)
    e240:	|  |      move.l d0,8(sp)
    e244:	|  |      move.l 8(sp),d0
    e248:	|  |  ,-- bra.s e24c <loadObjectType+0x204>
    e24a:	|  '--|-> moveq #0,d0
    e24c:	|     '-> movea.l 72(sp),a0
    e250:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    e254:	|         clr.l 88(sp)
    e258:	|     ,-- bra.s e2a8 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    e25a:	|  ,--|-> move.l 1e85c <bigDataFile>,d1
    e260:	|  |  |   movea.l 72(sp),a0
    e264:	|  |  |   movea.l 38(a0),a0
    e268:	|  |  |   move.l 88(sp),d0
    e26c:	|  |  |   lsl.l #3,d0
    e26e:	|  |  |   lea (0,a0,d0.l),a2
    e272:	|  |  |   move.l d1,-(sp)
    e274:	|  |  |   jsr 6bc <get2bytes>
    e27a:	|  |  |   addq.l #4,sp
    e27c:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    e27e:	|  |  |   move.l 1e85c <bigDataFile>,d1
    e284:	|  |  |   movea.l 72(sp),a0
    e288:	|  |  |   movea.l 38(a0),a0
    e28c:	|  |  |   move.l 88(sp),d0
    e290:	|  |  |   lsl.l #3,d0
    e292:	|  |  |   lea (0,a0,d0.l),a2
    e296:	|  |  |   move.l d1,-(sp)
    e298:	|  |  |   jsr 6bc <get2bytes>
    e29e:	|  |  |   addq.l #4,sp
    e2a0:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    e2a4:	|  |  |   addq.l #1,88(sp)
    e2a8:	|  |  '-> movea.l 72(sp),a0
    e2ac:	|  |      move.l 16(a0),d0
    e2b0:	|  |      cmp.l 88(sp),d0
    e2b4:	|  '----- bgt.s e25a <loadObjectType+0x212>
            }
            finishAccess();
    e2b6:	|         jsr 7e3c <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    e2bc:	|         move.l 68(sp),-(sp)
    e2c0:	|         jsr 7e46 <getNumberedString>
    e2c6:	|         addq.l #4,sp
    e2c8:	|         movea.l 72(sp),a0
    e2cc:	|         move.l d0,(a0)
            newType->objectNum = i;
    e2ce:	|         movea.l 72(sp),a0
    e2d2:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    e2d8:	|         move.l 1e928 <allObjectTypes>,d0
    e2de:	|         movea.l 72(sp),a0
    e2e2:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    e2e6:	|         move.l 72(sp),1e928 <allObjectTypes>
            return newType;
    e2ee:	|         move.l 72(sp),d0
    e2f2:	|     ,-- bra.s e2f6 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    e2f4:	'-----|-> moveq #0,d0
}
    e2f6:	      '-> movea.l (sp)+,a2
    e2f8:	          movea.l (sp)+,a6
    e2fa:	          lea 84(sp),sp
    e2fe:	          rts

0000e300 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    e300:	             lea -16(sp),sp
    e304:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    e306:	             move.l #125224,16(sp)

	while (* huntRegion) {
    e30e:	   ,-------- bra.s e382 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    e310:	,--|-------> movea.l 16(sp),a0
    e314:	|  |         move.l (a0),d0
    e316:	|  |         cmp.l 24(sp),d0
    e31a:	|  |  ,----- bne.s e374 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    e31c:	|  |  |      movea.l 24(sp),a0
    e320:	|  |  |      move.l 8(a0),d0
    e324:	|  |  |      movea.l 16(sp),a0
    e328:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    e32a:	|  |  |      movea.l 24(sp),a0
    e32e:	|  |  |      move.l 38(a0),12(sp)
    e334:	|  |  |      move.l 1e876 <SysBase>,d0
    e33a:	|  |  |      movea.l d0,a6
    e33c:	|  |  |      movea.l 12(sp),a1
    e340:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    e344:	|  |  |      movea.l 24(sp),a0
    e348:	|  |  |      move.l (a0),8(sp)
    e34c:	|  |  |      move.l 1e876 <SysBase>,d0
    e352:	|  |  |      movea.l d0,a6
    e354:	|  |  |      movea.l 8(sp),a1
    e358:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    e35c:	|  |  |      move.l 24(sp),4(sp)
    e362:	|  |  |      move.l 1e876 <SysBase>,d0
    e368:	|  |  |      movea.l d0,a6
    e36a:	|  |  |      movea.l 4(sp),a1
    e36e:	|  |  |      jsr -690(a6)
			return;
    e372:	|  |  |  ,-- bra.s e398 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    e374:	|  |  '--|-> movea.l 16(sp),a0
    e378:	|  |     |   move.l (a0),d0
    e37a:	|  |     |   move.l d0,d1
    e37c:	|  |     |   addq.l #8,d1
    e37e:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    e382:	|  '-----|-> movea.l 16(sp),a0
    e386:	|        |   move.l (a0),d0
    e388:	'--------|-- bne.s e310 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    e38a:	         |   pea 1a9eb <PutChar+0x1a4b>
    e390:	         |   jsr 184fe <KPrintF>
    e396:	         |   addq.l #4,sp
}
    e398:	         '-> movea.l (sp)+,a6
    e39a:	             lea 16(sp),sp
    e39e:	             rts

0000e3a0 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    e3a0:	movea.l 4(sp),a0
    e3a4:	move.l 4(a0),d0
    e3a8:	move.l 8(sp),-(sp)
    e3ac:	move.l d0,-(sp)
    e3ae:	jsr 8d0 <put2bytes>
    e3b4:	addq.l #8,sp
	writeString (r -> screenName, fp);
    e3b6:	movea.l 4(sp),a0
    e3ba:	move.l (a0),d0
    e3bc:	move.l 8(sp),-(sp)
    e3c0:	move.l d0,-(sp)
    e3c2:	jsr bd8 <writeString>
    e3c8:	addq.l #8,sp
    e3ca:	nop
    e3cc:	rts

0000e3ce <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    e3ce:	                         lea -112(sp),sp
    e3d2:	                         move.l a6,-(sp)
    e3d4:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    e3d6:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    e3da:	                         move.w 1e92e <saveEncoding>,d0
    e3e0:	                  ,----- beq.s e3ea <fileToStack+0x1c>
    e3e2:	                  |      move.l #109073,d0
    e3e8:	                  |  ,-- bra.s e3f0 <fileToStack+0x22>
    e3ea:	                  '--|-> move.l #109099,d0
    e3f0:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    e3f4:	                         move.l 124(sp),112(sp)
    e3fa:	                         move.l #1005,108(sp)
    e402:	                         move.l 1e87e <DOSBase>,d0
    e408:	                         movea.l d0,a6
    e40a:	                         move.l 112(sp),d1
    e40e:	                         move.l 108(sp),d2
    e412:	                         jsr -30(a6)
    e416:	                         move.l d0,104(sp)
    e41a:	                         move.l 104(sp),d0
    e41e:	                         move.l d0,100(sp)
    if (!fp) {
    e422:	                     ,-- bne.s e43c <fileToStack+0x6e>
        KPrintF("No such file", filename);
    e424:	                     |   move.l 124(sp),-(sp)
    e428:	                     |   pea 1aa42 <PutChar+0x1aa2>
    e42e:	                     |   jsr 184fe <KPrintF>
    e434:	                     |   addq.l #8,sp
        return FALSE;
    e436:	                     |   clr.w d0
    e438:	,--------------------|-- bra.w e732 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    e43c:	|                    '-> move.w 1e92e <saveEncoding>,d0
    e442:	|                        move.l d0,d0
    e444:	|                        move.b d0,1e92c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    e44a:	|                        move.w 1e92e <saveEncoding>,d0
    e450:	|                        lsr.w #8,d0
    e452:	|                        move.l d0,d0
    e454:	|                        move.b d0,1e92d <encode2>

    while (*checker) {
    e45a:	|                 ,----- bra.s e4be <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    e45c:	|              ,--|----> move.l 100(sp),30(sp)
    e462:	|              |  |      move.l 1e87e <DOSBase>,d0
    e468:	|              |  |      movea.l d0,a6
    e46a:	|              |  |      move.l 30(sp),d1
    e46e:	|              |  |      jsr -306(a6)
    e472:	|              |  |      move.l d0,26(sp)
    e476:	|              |  |      move.l 26(sp),d1
    e47a:	|              |  |      movea.l 116(sp),a0
    e47e:	|              |  |      move.b (a0),d0
    e480:	|              |  |      ext.w d0
    e482:	|              |  |      movea.w d0,a0
    e484:	|              |  |      cmpa.l d1,a0
    e486:	|              |  |  ,-- beq.s e4ba <fileToStack+0xec>
            Close(fp);
    e488:	|              |  |  |   move.l 100(sp),22(sp)
    e48e:	|              |  |  |   move.l 1e87e <DOSBase>,d0
    e494:	|              |  |  |   movea.l d0,a6
    e496:	|              |  |  |   move.l 22(sp),d1
    e49a:	|              |  |  |   jsr -36(a6)
    e49e:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    e4a2:	|              |  |  |   move.l 124(sp),-(sp)
    e4a6:	|              |  |  |   pea 1aa4f <PutChar+0x1aaf>
    e4ac:	|              |  |  |   jsr 184fe <KPrintF>
    e4b2:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e4b4:	|              |  |  |   clr.w d0
    e4b6:	+--------------|--|--|-- bra.w e732 <fileToStack+0x364>
        }
        checker++;
    e4ba:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e4be:	|              |  '----> movea.l 116(sp),a0
    e4c2:	|              |         move.b (a0),d0
    e4c4:	|              '-------- bne.s e45c <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e4c6:	|                        move.w 1e92e <saveEncoding>,d0
    e4cc:	|  ,-------------------- beq.s e540 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e4ce:	|  |                     move.l 100(sp),-(sp)
    e4d2:	|  |                     jsr e73c <readStringEncoded>
    e4d8:	|  |                     addq.l #4,sp
    e4da:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e4de:	|  |                     pea 1aa90 <PutChar+0x1af0>
    e4e4:	|  |                     move.l 100(sp),-(sp)
    e4e8:	|  |                     jsr 14eca <strcmp>
    e4ee:	|  |                     addq.l #8,sp
    e4f0:	|  |                     tst.l d0
    e4f2:	|  |                 ,-- beq.s e526 <fileToStack+0x158>
            Close(fp);
    e4f4:	|  |                 |   move.l 100(sp),88(sp)
    e4fa:	|  |                 |   move.l 1e87e <DOSBase>,d0
    e500:	|  |                 |   movea.l d0,a6
    e502:	|  |                 |   move.l 88(sp),d1
    e506:	|  |                 |   jsr -36(a6)
    e50a:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e50e:	|  |                 |   move.l 124(sp),-(sp)
    e512:	|  |                 |   pea 1aa9f <PutChar+0x1aff>
    e518:	|  |                 |   jsr 184fe <KPrintF>
    e51e:	|  |                 |   addq.l #8,sp
            return FALSE;
    e520:	|  |                 |   clr.w d0
    e522:	+--|-----------------|-- bra.w e732 <fileToStack+0x364>
        }
        FreeVec(checker);
    e526:	|  |                 '-> move.l 96(sp),92(sp)
    e52c:	|  |                     move.l 1e876 <SysBase>,d0
    e532:	|  |                     movea.l d0,a6
    e534:	|  |                     movea.l 92(sp),a1
    e538:	|  |                     jsr -690(a6)
        checker = NULL;
    e53c:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e540:	|  >-------------------> move.w 1e92e <saveEncoding>,d0
    e546:	|  |     ,-------------- beq.w e67a <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e54a:	|  |     |               move.l 100(sp),76(sp)
    e550:	|  |     |               move.l 1e87e <DOSBase>,d0
    e556:	|  |     |               movea.l d0,a6
    e558:	|  |     |               move.l 76(sp),d1
    e55c:	|  |     |               jsr -306(a6)
    e560:	|  |     |               move.l d0,72(sp)
    e564:	|  |     |               move.l 72(sp),d0
    e568:	|  |     |               move.b 1e92c <encode1>,d1
    e56e:	|  |     |               ext.w d1
    e570:	|  |     |               ext.l d1
    e572:	|  |     |               move.l d0,d2
    e574:	|  |     |               eor.l d1,d2
    e576:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e57a:	|  |     |               moveq #-1,d0
    e57c:	|  |     |               cmp.l 68(sp),d0
    e580:	|  |  ,--|-------------- beq.w e710 <fileToStack+0x342>

            char i = (char) tmp;
    e584:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e58a:	|  |  |  |               move.b 67(sp),d0
    e58e:	|  |  |  |               ext.w d0
    e590:	|  |  |  |               movea.w d0,a0
    e592:	|  |  |  |               moveq #2,d2
    e594:	|  |  |  |               cmp.l a0,d2
    e596:	|  |  |  |     ,-------- beq.s e612 <fileToStack+0x244>
    e598:	|  |  |  |     |         moveq #2,d0
    e59a:	|  |  |  |     |         cmp.l a0,d0
    e59c:	|  |  |  |  ,--|-------- blt.w e648 <fileToStack+0x27a>
    e5a0:	|  |  |  |  |  |         cmpa.w #0,a0
    e5a4:	|  |  |  |  |  |     ,-- beq.s e5b0 <fileToStack+0x1e2>
    e5a6:	|  |  |  |  |  |     |   moveq #1,d2
    e5a8:	|  |  |  |  |  |     |   cmp.l a0,d2
    e5aa:	|  |  |  |  |  |  ,--|-- beq.s e5ec <fileToStack+0x21e>
    e5ac:	|  |  |  |  +--|--|--|-- bra.w e648 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e5b0:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e5b4:	|  |  |  |  |  |  |      jsr e73c <readStringEncoded>
    e5ba:	|  |  |  |  |  |  |      addq.l #4,sp
    e5bc:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e5c0:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e5c4:	|  |  |  |  |  |  |      lea 14(sp),a0
    e5c8:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e5ca:	|  |  |  |  |  |  |      jsr 15c40 <makeTextVar>
    e5d0:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e5d2:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e5d8:	|  |  |  |  |  |  |      move.l 1e876 <SysBase>,d0
    e5de:	|  |  |  |  |  |  |      movea.l d0,a6
    e5e0:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e5e4:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e5e8:	|  |  |  |  |  |  |  ,-- bra.w e6a0 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e5ec:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e5f0:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e5f6:	|  |  |  |  |  |     |   addq.l #4,sp
    e5f8:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e5fa:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e5fe:	|  |  |  |  |  |     |   lea 18(sp),a0
    e602:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e604:	|  |  |  |  |  |     |   jsr 16310 <setVariable>
    e60a:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e60e:	|  |  |  |  |  |     +-- bra.w e6a0 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e612:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e618:	|  |  |  |  |        |   move.l 1e87e <DOSBase>,d0
    e61e:	|  |  |  |  |        |   movea.l d0,a6
    e620:	|  |  |  |  |        |   move.l 62(sp),d1
    e624:	|  |  |  |  |        |   jsr -306(a6)
    e628:	|  |  |  |  |        |   move.l d0,58(sp)
    e62c:	|  |  |  |  |        |   move.l 58(sp),d0
    e630:	|  |  |  |  |        |   move.l d0,-(sp)
    e632:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e636:	|  |  |  |  |        |   lea 18(sp),a0
    e63a:	|  |  |  |  |        |   move.l a0,-(sp)
    e63c:	|  |  |  |  |        |   jsr 16310 <setVariable>
    e642:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e646:	|  |  |  |  |        +-- bra.s e6a0 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e648:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e64c:	|  |  |  |           |   pea 1ab21 <PutChar+0x1b81>
    e652:	|  |  |  |           |   jsr 184fe <KPrintF>
    e658:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e65a:	|  |  |  |           |   move.l 100(sp),46(sp)
    e660:	|  |  |  |           |   move.l 1e87e <DOSBase>,d0
    e666:	|  |  |  |           |   movea.l d0,a6
    e668:	|  |  |  |           |   move.l 46(sp),d1
    e66c:	|  |  |  |           |   jsr -36(a6)
    e670:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e674:	|  |  |  |           |   clr.w d0
    e676:	+--|--|--|-----------|-- bra.w e732 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e67a:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e67e:	|  |  |              |   jsr e802 <readTextPlain>
    e684:	|  |  |              |   addq.l #4,sp
    e686:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e68a:	|  |  |        ,-----|-- beq.w e714 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e68e:	|  |  |        |     |   move.l 80(sp),-(sp)
    e692:	|  |  |        |     |   lea 14(sp),a0
    e696:	|  |  |        |     |   move.l a0,-(sp)
    e698:	|  |  |        |     |   jsr 15c40 <makeTextVar>
    e69e:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e6a0:	|  |  |        |     '-> movea.l 128(sp),a0
    e6a4:	|  |  |        |         move.l (a0),d0
    e6a6:	|  |  |        |  ,----- bne.s e6d6 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e6a8:	|  |  |        |  |      move.l 128(sp),d0
    e6ac:	|  |  |        |  |      move.l d0,-(sp)
    e6ae:	|  |  |        |  |      lea 14(sp),a0
    e6b2:	|  |  |        |  |      move.l a0,-(sp)
    e6b4:	|  |  |        |  |      jsr 152e0 <addVarToStackQuick>
    e6ba:	|  |  |        |  |      addq.l #8,sp
    e6bc:	|  |  |        |  |      tst.w d0
    e6be:	|  |  |        |  |  ,-- bne.s e6c4 <fileToStack+0x2f6>
    e6c0:	|  |  |        |  |  |   clr.w d0
    e6c2:	+--|--|--------|--|--|-- bra.s e732 <fileToStack+0x364>
            sH->last = sH->first;
    e6c4:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e6c8:	|  |  |        |  |      move.l (a0),d0
    e6ca:	|  |  |        |  |      movea.l 128(sp),a0
    e6ce:	|  |  |        |  |      move.l d0,4(a0)
    e6d2:	|  +--|--------|--|----- bra.w e540 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e6d6:	|  |  |        |  '----> movea.l 128(sp),a0
    e6da:	|  |  |        |         move.l 4(a0),d0
    e6de:	|  |  |        |         addq.l #8,d0
    e6e0:	|  |  |        |         move.l d0,-(sp)
    e6e2:	|  |  |        |         lea 14(sp),a0
    e6e6:	|  |  |        |         move.l a0,-(sp)
    e6e8:	|  |  |        |         jsr 152e0 <addVarToStackQuick>
    e6ee:	|  |  |        |         addq.l #8,sp
    e6f0:	|  |  |        |         tst.w d0
    e6f2:	|  |  |        |     ,-- bne.s e6f8 <fileToStack+0x32a>
    e6f4:	|  |  |        |     |   clr.w d0
    e6f6:	+--|--|--------|-----|-- bra.s e732 <fileToStack+0x364>
            sH->last = sH->last->next;
    e6f8:	|  |  |        |     '-> movea.l 128(sp),a0
    e6fc:	|  |  |        |         movea.l 4(a0),a0
    e700:	|  |  |        |         move.l 8(a0),d0
    e704:	|  |  |        |         movea.l 128(sp),a0
    e708:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e70c:	|  '--|--------|-------- bra.w e540 <fileToStack+0x172>
            if (tmp == -1) break;
    e710:	|     '--------|-------> nop
    e712:	|              |     ,-- bra.s e716 <fileToStack+0x348>
            if (!line) break;
    e714:	|              '-----|-> nop
        }
    }
    Close(fp);
    e716:	|                    '-> move.l 100(sp),38(sp)
    e71c:	|                        move.l 1e87e <DOSBase>,d0
    e722:	|                        movea.l d0,a6
    e724:	|                        move.l 38(sp),d1
    e728:	|                        jsr -36(a6)
    e72c:	|                        move.l d0,34(sp)
    return TRUE;
    e730:	|                        moveq #1,d0
}
    e732:	'----------------------> move.l (sp)+,d2
    e734:	                         movea.l (sp)+,a6
    e736:	                         lea 112(sp),sp
    e73a:	                         rts

0000e73c <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e73c:	          lea -32(sp),sp
    e740:	          move.l a6,-(sp)
    e742:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e744:	          move.l 44(sp),-(sp)
    e748:	          jsr 6bc <get2bytes>
    e74e:	          addq.l #4,sp
    e750:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e754:	          move.l 32(sp),d0
    e758:	          addq.l #1,d0
    e75a:	          move.l d0,28(sp)
    e75e:	          clr.l 24(sp)
    e762:	          move.l 1e876 <SysBase>,d0
    e768:	          movea.l d0,a6
    e76a:	          move.l 28(sp),d0
    e76e:	          move.l 24(sp),d1
    e772:	          jsr -684(a6)
    e776:	          move.l d0,20(sp)
    e77a:	          move.l 20(sp),d0
    e77e:	          move.l d0,16(sp)
    if (!s) return NULL;
    e782:	      ,-- bne.s e788 <readStringEncoded+0x4c>
    e784:	      |   moveq #0,d0
    e786:	,-----|-- bra.s e7f8 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e788:	|     '-> clr.l 36(sp)
    e78c:	|     ,-- bra.s e7de <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e78e:	|  ,--|-> move.l 44(sp),12(sp)
    e794:	|  |  |   move.l 1e87e <DOSBase>,d0
    e79a:	|  |  |   movea.l d0,a6
    e79c:	|  |  |   move.l 12(sp),d1
    e7a0:	|  |  |   jsr -306(a6)
    e7a4:	|  |  |   move.l d0,8(sp)
    e7a8:	|  |  |   move.l 8(sp),d0
    e7ac:	|  |  |   move.l d0,d1
    e7ae:	|  |  |   move.b 1e92c <encode1>,d2
    e7b4:	|  |  |   move.l 36(sp),d0
    e7b8:	|  |  |   movea.l 16(sp),a0
    e7bc:	|  |  |   adda.l d0,a0
    e7be:	|  |  |   move.b d1,d0
    e7c0:	|  |  |   eor.b d2,d0
    e7c2:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e7c4:	|  |  |   move.b 1e92c <encode1>,d0
    e7ca:	|  |  |   move.b d0,d1
    e7cc:	|  |  |   move.b 1e92d <encode2>,d0
    e7d2:	|  |  |   add.b d1,d0
    e7d4:	|  |  |   move.b d0,1e92c <encode1>
    for (a = 0; a < len; a++) {
    e7da:	|  |  |   addq.l #1,36(sp)
    e7de:	|  |  '-> move.l 36(sp),d0
    e7e2:	|  |      cmp.l 32(sp),d0
    e7e6:	|  '----- blt.s e78e <readStringEncoded+0x52>
    }
    s[len] = 0;
    e7e8:	|         move.l 32(sp),d0
    e7ec:	|         movea.l 16(sp),a0
    e7f0:	|         adda.l d0,a0
    e7f2:	|         clr.b (a0)
    return s;
    e7f4:	|         move.l 16(sp),d0
}
    e7f8:	'-------> move.l (sp)+,d2
    e7fa:	          movea.l (sp)+,a6
    e7fc:	          lea 32(sp),sp
    e800:	          rts

0000e802 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e802:	             lea -104(sp),sp
    e806:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e80a:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e80e:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e814:	             move.l 124(sp),106(sp)
    e81a:	             clr.l 102(sp)
    e81e:	             clr.l 98(sp)
    e822:	             move.l 1e87e <DOSBase>,d0
    e828:	             movea.l d0,a6
    e82a:	             move.l 106(sp),d1
    e82e:	             move.l 102(sp),d2
    e832:	             move.l 98(sp),d3
    e836:	             jsr -66(a6)
    e83a:	             move.l d0,94(sp)
    e83e:	             move.l 94(sp),d0
    e842:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e846:	   ,-------- bra.s e88a <readTextPlain+0x88>
        tmp = FGetC(fp);
    e848:	,--|-------> move.l 124(sp),22(sp)
    e84e:	|  |         move.l 1e87e <DOSBase>,d0
    e854:	|  |         movea.l d0,a6
    e856:	|  |         move.l 22(sp),d1
    e85a:	|  |         jsr -306(a6)
    e85e:	|  |         move.l d0,18(sp)
    e862:	|  |         move.l 18(sp),d0
    e866:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e86a:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e870:	|  |         cmpi.b #10,17(sp)
    e876:	|  |  ,----- beq.s e880 <readTextPlain+0x7e>
    e878:	|  |  |      moveq #-1,d0
    e87a:	|  |  |      cmp.l 110(sp),d0
    e87e:	|  |  |  ,-- bne.s e886 <readTextPlain+0x84>
            keepGoing = FALSE;
    e880:	|  |  '--|-> clr.w 114(sp)
    e884:	|  +-----|-- bra.s e88a <readTextPlain+0x88>
        } else {
            stringSize++;
    e886:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e88a:	|  '-------> tst.w 114(sp)
    e88e:	'----------- bne.s e848 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e890:	             tst.l 116(sp)
    e894:	         ,-- bne.s e8a4 <readTextPlain+0xa2>
    e896:	         |   moveq #-1,d0
    e898:	         |   cmp.l 110(sp),d0
    e89c:	         +-- bne.s e8a4 <readTextPlain+0xa2>
        return NULL;
    e89e:	         |   moveq #0,d0
    e8a0:	      ,--|-- bra.w e98a <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e8a4:	      |  '-> move.l 124(sp),86(sp)
    e8aa:	      |      move.l 90(sp),82(sp)
    e8b0:	      |      moveq #-1,d0
    e8b2:	      |      move.l d0,78(sp)
    e8b6:	      |      move.l 1e87e <DOSBase>,d0
    e8bc:	      |      movea.l d0,a6
    e8be:	      |      move.l 86(sp),d1
    e8c2:	      |      move.l 82(sp),d2
    e8c6:	      |      move.l 78(sp),d3
    e8ca:	      |      jsr -66(a6)
    e8ce:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e8d2:	      |      move.l 116(sp),d0
    e8d6:	      |      addq.l #1,d0
    e8d8:	      |      move.l d0,70(sp)
    e8dc:	      |      clr.l 66(sp)
    e8e0:	      |      move.l 1e876 <SysBase>,d0
    e8e6:	      |      movea.l d0,a6
    e8e8:	      |      move.l 70(sp),d0
    e8ec:	      |      move.l 66(sp),d1
    e8f0:	      |      jsr -684(a6)
    e8f4:	      |      move.l d0,62(sp)
    e8f8:	      |      move.l 62(sp),d0
    e8fc:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e900:	      |  ,-- bne.s e908 <readTextPlain+0x106>
    e902:	      |  |   moveq #0,d0
    e904:	      +--|-- bra.w e98a <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e908:	      |  '-> move.l 124(sp),54(sp)
    e90e:	      |      move.l 58(sp),50(sp)
    e914:	      |      moveq #1,d0
    e916:	      |      move.l d0,46(sp)
    e91a:	      |      move.l 116(sp),42(sp)
    e920:	      |      move.l 1e87e <DOSBase>,d0
    e926:	      |      movea.l d0,a6
    e928:	      |      move.l 54(sp),d1
    e92c:	      |      move.l 50(sp),d2
    e930:	      |      move.l 46(sp),d3
    e934:	      |      move.l 42(sp),d4
    e938:	      |      jsr -324(a6)
    e93c:	      |      move.l d0,38(sp)
    e940:	      |      move.l 38(sp),d0
    e944:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e948:	      |      move.l 34(sp),d0
    e94c:	      |      cmp.l 116(sp),d0
    e950:	      |  ,-- beq.s e960 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e952:	      |  |   pea 1ab56 <PutChar+0x1bb6>
    e958:	      |  |   jsr 184fe <KPrintF>
    e95e:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e960:	      |  '-> move.l 124(sp),30(sp)
    e966:	      |      move.l 1e87e <DOSBase>,d0
    e96c:	      |      movea.l d0,a6
    e96e:	      |      move.l 30(sp),d1
    e972:	      |      jsr -306(a6)
    e976:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e97a:	      |      move.l 116(sp),d0
    e97e:	      |      movea.l 58(sp),a0
    e982:	      |      adda.l d0,a0
    e984:	      |      clr.b (a0)
    }

    return reply;
    e986:	      |      move.l 58(sp),d0
}
    e98a:	      '----> movem.l (sp)+,d2-d4/a6
    e98e:	             lea 104(sp),sp
    e992:	             rts

0000e994 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e994:	                      lea -144(sp),sp
    e998:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e99c:	                      move.l 160(sp),148(sp)
    e9a2:	                      move.l #1006,144(sp)
    e9aa:	                      move.l 1e87e <DOSBase>,d0
    e9b0:	                      movea.l d0,a6
    e9b2:	                      move.l 148(sp),d1
    e9b6:	                      move.l 144(sp),d2
    e9ba:	                      jsr -30(a6)
    e9be:	                      move.l d0,140(sp)
    e9c2:	                      move.l 140(sp),d0
    e9c6:	                      move.l d0,136(sp)

    if (!fp) {
    e9ca:	                  ,-- bne.s e9e4 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e9cc:	                  |   move.l 160(sp),-(sp)
    e9d0:	                  |   pea 1ab77 <PutChar+0x1bd7>
    e9d6:	                  |   jsr 184fe <KPrintF>
    e9dc:	                  |   addq.l #8,sp
        return FALSE;
    e9de:	                  |   clr.w d0
    e9e0:	,-----------------|-- bra.w eca0 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e9e4:	|                 '-> movea.l 164(sp),a0
    e9e8:	|                     movea.l 4(a0),a0
    e9ec:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e9f0:	|                     move.w 1e92e <saveEncoding>,d0
    e9f6:	|                     move.l d0,d0
    e9f8:	|                     move.b d0,1e92c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e9fe:	|                     move.w 1e92e <saveEncoding>,d0
    ea04:	|                     lsr.w #8,d0
    ea06:	|                     move.l d0,d0
    ea08:	|                     move.b d0,1e92d <encode2>

    if (saveEncoding) {
    ea0e:	|                     move.w 1e92e <saveEncoding>,d0
    ea14:	|                 ,-- beq.s ea66 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    ea16:	|                 |   move.l 136(sp),116(sp)
    ea1c:	|                 |   move.l #109073,112(sp)
    ea24:	|                 |   moveq #99,d0
    ea26:	|                 |   not.b d0
    ea28:	|                 |   add.l sp,d0
    ea2a:	|                 |   addi.l #-144,d0
    ea30:	|                 |   move.l d0,108(sp)
    ea34:	|                 |   move.l 1e87e <DOSBase>,d0
    ea3a:	|                 |   movea.l d0,a6
    ea3c:	|                 |   move.l 116(sp),d1
    ea40:	|                 |   move.l 112(sp),d2
    ea44:	|                 |   move.l 108(sp),d3
    ea48:	|                 |   jsr -354(a6)
    ea4c:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    ea50:	|                 |   move.l 136(sp),-(sp)
    ea54:	|                 |   pea 1aa90 <PutChar+0x1af0>
    ea5a:	|                 |   jsr ecaa <writeStringEncoded>
    ea60:	|                 |   addq.l #8,sp
    ea62:	|  ,--------------|-- bra.w ec78 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    ea66:	|  |              '-> move.l 136(sp),132(sp)
    ea6c:	|  |                  move.l #109099,128(sp)
    ea74:	|  |                  moveq #99,d1
    ea76:	|  |                  not.b d1
    ea78:	|  |                  add.l sp,d1
    ea7a:	|  |                  addi.l #-144,d1
    ea80:	|  |                  move.l d1,124(sp)
    ea84:	|  |                  move.l 1e87e <DOSBase>,d0
    ea8a:	|  |                  movea.l d0,a6
    ea8c:	|  |                  move.l 132(sp),d1
    ea90:	|  |                  move.l 128(sp),d2
    ea94:	|  |                  move.l 124(sp),d3
    ea98:	|  |                  jsr -354(a6)
    ea9c:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    eaa0:	|  +----------------- bra.w ec78 <stackToFile+0x2e4>
        if (saveEncoding) {
    eaa4:	|  |  ,-------------> move.w 1e92e <saveEncoding>,d0
    eaaa:	|  |  |     ,-------- beq.w ebfc <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    eaae:	|  |  |     |         movea.l 152(sp),a0
    eab2:	|  |  |     |         move.l (a0),d0
    eab4:	|  |  |     |         moveq #1,d1
    eab6:	|  |  |     |         cmp.l d0,d1
    eab8:	|  |  |     |     ,-- beq.s eb08 <stackToFile+0x174>
    eaba:	|  |  |     |     |   moveq #3,d1
    eabc:	|  |  |     |     |   cmp.l d0,d1
    eabe:	|  |  |     |  ,--|-- bne.w ebca <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    eac2:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    eac8:	|  |  |     |  |  |   move.b 1e92c <encode1>,d0
    eace:	|  |  |     |  |  |   ext.w d0
    ead0:	|  |  |     |  |  |   movea.w d0,a0
    ead2:	|  |  |     |  |  |   move.l a0,72(sp)
    ead6:	|  |  |     |  |  |   move.l 1e87e <DOSBase>,d0
    eadc:	|  |  |     |  |  |   movea.l d0,a6
    eade:	|  |  |     |  |  |   move.l 76(sp),d1
    eae2:	|  |  |     |  |  |   move.l 72(sp),d2
    eae6:	|  |  |     |  |  |   jsr -312(a6)
    eaea:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    eaee:	|  |  |     |  |  |   movea.l 152(sp),a0
    eaf2:	|  |  |     |  |  |   move.l 4(a0),d0
    eaf6:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    eafa:	|  |  |     |  |  |   move.l d0,-(sp)
    eafc:	|  |  |     |  |  |   jsr ecaa <writeStringEncoded>
    eb02:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    eb04:	|  |  |  ,--|--|--|-- bra.w ec6e <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    eb08:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    eb0c:	|  |  |  |  |  |      move.l 4(a0),d0
    eb10:	|  |  |  |  |  |  ,-- bmi.s eb80 <stackToFile+0x1ec>
    eb12:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eb16:	|  |  |  |  |  |  |   move.l 4(a0),d0
    eb1a:	|  |  |  |  |  |  |   cmpi.l #255,d0
    eb20:	|  |  |  |  |  |  +-- bgt.s eb80 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    eb22:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    eb28:	|  |  |  |  |  |  |   move.b 1e92c <encode1>,d0
    eb2e:	|  |  |  |  |  |  |   eori.b #2,d0
    eb32:	|  |  |  |  |  |  |   ext.w d0
    eb34:	|  |  |  |  |  |  |   movea.w d0,a0
    eb36:	|  |  |  |  |  |  |   move.l a0,60(sp)
    eb3a:	|  |  |  |  |  |  |   move.l 1e87e <DOSBase>,d0
    eb40:	|  |  |  |  |  |  |   movea.l d0,a6
    eb42:	|  |  |  |  |  |  |   move.l 64(sp),d1
    eb46:	|  |  |  |  |  |  |   move.l 60(sp),d2
    eb4a:	|  |  |  |  |  |  |   jsr -312(a6)
    eb4e:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    eb52:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    eb58:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eb5c:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    eb62:	|  |  |  |  |  |  |   move.l 1e87e <DOSBase>,d0
    eb68:	|  |  |  |  |  |  |   movea.l d0,a6
    eb6a:	|  |  |  |  |  |  |   move.l 52(sp),d1
    eb6e:	|  |  |  |  |  |  |   move.l 48(sp),d2
    eb72:	|  |  |  |  |  |  |   jsr -312(a6)
    eb76:	|  |  |  |  |  |  |   move.l d0,44(sp)
    eb7a:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    eb7c:	|  |  |  +--|--|--|-- bra.w ec6e <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    eb80:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    eb86:	|  |  |  |  |  |      move.b 1e92c <encode1>,d0
    eb8c:	|  |  |  |  |  |      eori.b #1,d0
    eb90:	|  |  |  |  |  |      ext.w d0
    eb92:	|  |  |  |  |  |      movea.w d0,a0
    eb94:	|  |  |  |  |  |      move.l a0,36(sp)
    eb98:	|  |  |  |  |  |      move.l 1e87e <DOSBase>,d0
    eb9e:	|  |  |  |  |  |      movea.l d0,a6
    eba0:	|  |  |  |  |  |      move.l 40(sp),d1
    eba4:	|  |  |  |  |  |      move.l 36(sp),d2
    eba8:	|  |  |  |  |  |      jsr -312(a6)
    ebac:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    ebb0:	|  |  |  |  |  |      movea.l 152(sp),a0
    ebb4:	|  |  |  |  |  |      move.l 4(a0),d0
    ebb8:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    ebbc:	|  |  |  |  |  |      move.l d0,-(sp)
    ebbe:	|  |  |  |  |  |      jsr 958 <put4bytes>
    ebc4:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    ebc6:	|  |  |  +--|--|----- bra.w ec6e <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    ebca:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    ebce:	|  |  |  |  |         pea 1ab89 <PutChar+0x1be9>
    ebd4:	|  |  |  |  |         jsr 184fe <KPrintF>
    ebda:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    ebdc:	|  |  |  |  |         move.l 136(sp),28(sp)
    ebe2:	|  |  |  |  |         move.l 1e87e <DOSBase>,d0
    ebe8:	|  |  |  |  |         movea.l d0,a6
    ebea:	|  |  |  |  |         move.l 28(sp),d1
    ebee:	|  |  |  |  |         jsr -36(a6)
    ebf2:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    ebf6:	|  |  |  |  |         clr.w d0
    ebf8:	+--|--|--|--|-------- bra.w eca0 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    ebfc:	|  |  |  |  '-------> move.l 152(sp),d0
    ec00:	|  |  |  |            move.l d0,-(sp)
    ec02:	|  |  |  |            jsr 15ff4 <getTextFromAnyVar>
    ec08:	|  |  |  |            addq.l #4,sp
    ec0a:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    ec0e:	|  |  |  |     ,----- beq.s ec82 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    ec10:	|  |  |  |     |      movea.l 100(sp),a0
    ec14:	|  |  |  |     |      move.b (a0),d0
    ec16:	|  |  |  |     |      ext.w d0
    ec18:	|  |  |  |     |      movea.w d0,a0
    ec1a:	|  |  |  |     |      move.l a0,12(sp)
    ec1e:	|  |  |  |     |      move.l 136(sp),96(sp)
    ec24:	|  |  |  |     |      move.l #109541,92(sp)
    ec2c:	|  |  |  |     |      moveq #99,d0
    ec2e:	|  |  |  |     |      not.b d0
    ec30:	|  |  |  |     |      add.l sp,d0
    ec32:	|  |  |  |     |      addi.l #-144,d0
    ec38:	|  |  |  |     |      move.l d0,88(sp)
    ec3c:	|  |  |  |     |      move.l 1e87e <DOSBase>,d0
    ec42:	|  |  |  |     |      movea.l d0,a6
    ec44:	|  |  |  |     |      move.l 96(sp),d1
    ec48:	|  |  |  |     |      move.l 92(sp),d2
    ec4c:	|  |  |  |     |      move.l 88(sp),d3
    ec50:	|  |  |  |     |      jsr -354(a6)
    ec54:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    ec58:	|  |  |  |     |      move.l 100(sp),80(sp)
    ec5e:	|  |  |  |     |      move.l 1e876 <SysBase>,d0
    ec64:	|  |  |  |     |      movea.l d0,a6
    ec66:	|  |  |  |     |      movea.l 80(sp),a1
    ec6a:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    ec6e:	|  |  |  '-----|----> movea.l 152(sp),a0
    ec72:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    ec78:	|  '--|--------|----> tst.l 152(sp)
    ec7c:	|     '--------|----- bne.w eaa4 <stackToFile+0x110>
    ec80:	|              |  ,-- bra.s ec84 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    ec82:	|              '--|-> nop
    }
    Close(fp);
    ec84:	|                 '-> move.l 136(sp),20(sp)
    ec8a:	|                     move.l 1e87e <DOSBase>,d0
    ec90:	|                     movea.l d0,a6
    ec92:	|                     move.l 20(sp),d1
    ec96:	|                     jsr -36(a6)
    ec9a:	|                     move.l d0,16(sp)
    return TRUE;
    ec9e:	|                     moveq #1,d0
}
    eca0:	'-------------------> movem.l (sp)+,d2-d3/a6
    eca4:	                      lea 144(sp),sp
    eca8:	                      rts

0000ecaa <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    ecaa:	       lea -20(sp),sp
    ecae:	       move.l a6,-(sp)
    ecb0:	       move.l d2,-(sp)
	int a, len = strlen (s);
    ecb2:	       move.l 32(sp),-(sp)
    ecb6:	       jsr 14f0a <strlen>
    ecbc:	       addq.l #4,sp
    ecbe:	       move.l d0,20(sp)

	put2bytes (len, fp);
    ecc2:	       move.l 36(sp),-(sp)
    ecc6:	       move.l 24(sp),-(sp)
    ecca:	       jsr 8d0 <put2bytes>
    ecd0:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    ecd2:	       clr.l 24(sp)
    ecd6:	   ,-- bra.s ed2c <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    ecd8:	,--|-> move.l 36(sp),16(sp)
    ecde:	|  |   move.l 24(sp),d0
    ece2:	|  |   movea.l 32(sp),a0
    ece6:	|  |   adda.l d0,a0
    ece8:	|  |   move.b (a0),d1
    ecea:	|  |   move.b 1e92c <encode1>,d0
    ecf0:	|  |   eor.b d1,d0
    ecf2:	|  |   ext.w d0
    ecf4:	|  |   movea.w d0,a0
    ecf6:	|  |   move.l a0,12(sp)
    ecfa:	|  |   move.l 1e87e <DOSBase>,d0
    ed00:	|  |   movea.l d0,a6
    ed02:	|  |   move.l 16(sp),d1
    ed06:	|  |   move.l 12(sp),d2
    ed0a:	|  |   jsr -312(a6)
    ed0e:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    ed12:	|  |   move.b 1e92c <encode1>,d0
    ed18:	|  |   move.b d0,d1
    ed1a:	|  |   move.b 1e92d <encode2>,d0
    ed20:	|  |   add.b d1,d0
    ed22:	|  |   move.b d0,1e92c <encode1>
	for (a = 0; a < len; a ++) {
    ed28:	|  |   addq.l #1,24(sp)
    ed2c:	|  '-> move.l 24(sp),d0
    ed30:	|      cmp.l 20(sp),d0
    ed34:	'----- blt.s ecd8 <writeStringEncoded+0x2e>
	}
}
    ed36:	       nop
    ed38:	       nop
    ed3a:	       move.l (sp)+,d2
    ed3c:	       movea.l (sp)+,a6
    ed3e:	       lea 20(sp),sp
    ed42:	       rts

0000ed44 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ed44:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ed46:	                   tst.l 8(sp)
    ed4a:	               ,-- bne.s ed50 <failSecurityCheck+0xc>
    ed4c:	               |   moveq #1,d0
    ed4e:	,--------------|-- bra.s edce <failSecurityCheck+0x8a>

	int a = 0;
    ed50:	|              '-> clr.l (sp)

	while (fn[a]) {
    ed52:	|     ,----------- bra.s edc0 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ed54:	|  ,--|----------> move.l (sp),d0
    ed56:	|  |  |            movea.l 8(sp),a0
    ed5a:	|  |  |            adda.l d0,a0
    ed5c:	|  |  |            move.b (a0),d0
    ed5e:	|  |  |            ext.w d0
    ed60:	|  |  |            movea.w d0,a0
    ed62:	|  |  |            moveq #124,d0
    ed64:	|  |  |            cmp.l a0,d0
    ed66:	|  |  |     ,----- beq.s eda8 <failSecurityCheck+0x64>
    ed68:	|  |  |     |      moveq #124,d1
    ed6a:	|  |  |     |      cmp.l a0,d1
    ed6c:	|  |  |  ,--|----- blt.s edbe <failSecurityCheck+0x7a>
    ed6e:	|  |  |  |  |      moveq #92,d0
    ed70:	|  |  |  |  |      cmp.l a0,d0
    ed72:	|  |  |  |  +----- beq.s eda8 <failSecurityCheck+0x64>
    ed74:	|  |  |  |  |      moveq #92,d1
    ed76:	|  |  |  |  |      cmp.l a0,d1
    ed78:	|  |  |  +--|----- blt.s edbe <failSecurityCheck+0x7a>
    ed7a:	|  |  |  |  |      moveq #60,d0
    ed7c:	|  |  |  |  |      cmp.l a0,d0
    ed7e:	|  |  |  |  |  ,-- blt.s ed9e <failSecurityCheck+0x5a>
    ed80:	|  |  |  |  |  |   moveq #34,d1
    ed82:	|  |  |  |  |  |   cmp.l a0,d1
    ed84:	|  |  |  +--|--|-- bgt.s edbe <failSecurityCheck+0x7a>
    ed86:	|  |  |  |  |  |   moveq #-34,d1
    ed88:	|  |  |  |  |  |   add.l a0,d1
    ed8a:	|  |  |  |  |  |   move.l #83894529,d0
    ed90:	|  |  |  |  |  |   lsr.l d1,d0
    ed92:	|  |  |  |  |  |   moveq #1,d1
    ed94:	|  |  |  |  |  |   and.l d1,d0
    ed96:	|  |  |  |  |  |   sne d0
    ed98:	|  |  |  |  |  |   neg.b d0
    ed9a:	|  |  |  |  +--|-- bne.s eda8 <failSecurityCheck+0x64>
    ed9c:	|  |  |  +--|--|-- bra.s edbe <failSecurityCheck+0x7a>
    ed9e:	|  |  |  |  |  '-> lea -62(a0),a0
    eda2:	|  |  |  |  |      moveq #1,d0
    eda4:	|  |  |  |  |      cmp.l a0,d0
    eda6:	|  |  |  +--|----- bcs.s edbe <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    eda8:	|  |  |  |  '----> move.l 8(sp),-(sp)
    edac:	|  |  |  |         pea 1abe9 <PutChar+0x1c49>
    edb2:	|  |  |  |         jsr 184fe <KPrintF>
    edb8:	|  |  |  |         addq.l #8,sp
				return TRUE;
    edba:	|  |  |  |         moveq #1,d0
    edbc:	+--|--|--|-------- bra.s edce <failSecurityCheck+0x8a>
		}
		a++;
    edbe:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    edc0:	|  |  '----------> move.l (sp),d0
    edc2:	|  |               movea.l 8(sp),a0
    edc6:	|  |               adda.l d0,a0
    edc8:	|  |               move.b (a0),d0
    edca:	|  '-------------- bne.s ed54 <failSecurityCheck+0x10>
	}
	return FALSE;
    edcc:	|                  clr.w d0
}
    edce:	'----------------> addq.l #4,sp
    edd0:	                   rts

0000edd2 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    edd2:	             lea -24(sp),sp
    edd6:	             move.l a6,-(sp)
    edd8:	             move.l 40(sp),d0
    eddc:	             move.w d0,d0
    edde:	             move.w d0,6(sp)
	int fileNum = -1;
    ede2:	             moveq #-1,d0
    ede4:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ede8:	             jsr 702a <killSpeechTimers>

	switch (numParams) {
    edee:	             moveq #2,d0
    edf0:	             cmp.l 32(sp),d0
    edf4:	      ,----- beq.s ee38 <sayCore+0x66>
    edf6:	      |      moveq #3,d0
    edf8:	      |      cmp.l 32(sp),d0
    edfc:	,-----|----- bne.w ef1a <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ee00:	|     |      movea.l 36(sp),a0
    ee04:	|     |      move.l 24(a0),d0
    ee08:	|     |      move.l d0,-(sp)
    ee0a:	|     |      pea 5 <_start+0x5>
    ee0e:	|     |      lea 20(sp),a0
    ee12:	|     |      move.l a0,-(sp)
    ee14:	|     |      jsr 15a1e <getValueType>
    ee1a:	|     |      lea 12(sp),sp
    ee1e:	|     |      tst.w d0
    ee20:	|     |  ,-- bne.s ee28 <sayCore+0x56>
    ee22:	|     |  |   moveq #1,d0
    ee24:	|  ,--|--|-- bra.w ef2a <sayCore+0x158>
			trimStack (&fun -> stack);
    ee28:	|  |  |  '-> moveq #24,d0
    ee2a:	|  |  |      add.l 36(sp),d0
    ee2e:	|  |  |      move.l d0,-(sp)
    ee30:	|  |  |      jsr 163a2 <trimStack>
    ee36:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ee38:	|  |  '----> movea.l 36(sp),a0
    ee3c:	|  |         move.l 24(a0),d0
    ee40:	|  |         move.l d0,-(sp)
    ee42:	|  |         jsr 15ff4 <getTextFromAnyVar>
    ee48:	|  |         addq.l #4,sp
    ee4a:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ee4e:	|  |     ,-- bne.s ee56 <sayCore+0x84>
    ee50:	|  |     |   moveq #1,d0
    ee52:	|  +-----|-- bra.w ef2a <sayCore+0x158>
			trimStack (&fun -> stack);
    ee56:	|  |     '-> moveq #24,d0
    ee58:	|  |         add.l 36(sp),d0
    ee5c:	|  |         move.l d0,-(sp)
    ee5e:	|  |         jsr 163a2 <trimStack>
    ee64:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee66:	|  |         movea.l 36(sp),a0
    ee6a:	|  |         move.l 24(a0),d0
    ee6e:	|  |         move.l d0,-(sp)
    ee70:	|  |         pea 7 <_start+0x7>
    ee74:	|  |         lea 16(sp),a0
    ee78:	|  |         move.l a0,-(sp)
    ee7a:	|  |         jsr 15a1e <getValueType>
    ee80:	|  |         lea 12(sp),sp
    ee84:	|  |         tst.w d0
    ee86:	|  |     ,-- bne.s ee8e <sayCore+0xbc>
    ee88:	|  |     |   moveq #1,d0
    ee8a:	|  +-----|-- bra.w ef2a <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee8e:	|  |     '-> movea.l 36(sp),a0
    ee92:	|  |         move.l 24(a0),d0
    ee96:	|  |         move.l d0,-(sp)
    ee98:	|  |         pea 7 <_start+0x7>
    ee9c:	|  |         lea 16(sp),a0
    eea0:	|  |         move.l a0,-(sp)
    eea2:	|  |         jsr 15a1e <getValueType>
    eea8:	|  |         lea 12(sp),sp
    eeac:	|  |         tst.w d0
    eeae:	|  |     ,-- bne.s eeb4 <sayCore+0xe2>
    eeb0:	|  |     |   moveq #1,d0
    eeb2:	|  +-----|-- bra.s ef2a <sayCore+0x158>
			trimStack (&fun -> stack);
    eeb4:	|  |     '-> moveq #24,d0
    eeb6:	|  |         add.l 36(sp),d0
    eeba:	|  |         move.l d0,-(sp)
    eebc:	|  |         jsr 163a2 <trimStack>
    eec2:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    eec4:	|  |         movea.w 6(sp),a0
    eec8:	|  |         move.l 12(sp),d1
    eecc:	|  |         move.l 8(sp),d0
    eed0:	|  |         move.l a0,-(sp)
    eed2:	|  |         move.l d1,-(sp)
    eed4:	|  |         move.l d0,-(sp)
    eed6:	|  |         move.l 36(sp),-(sp)
    eeda:	|  |         jsr 470e <wrapSpeech>
    eee0:	|  |         lea 16(sp),sp
    eee4:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    eee8:	|  |         movea.l 36(sp),a0
    eeec:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    eef2:	|  |         movea.l 36(sp),a0
    eef6:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    eefc:	|  |         move.l 24(sp),16(sp)
    ef02:	|  |         move.l 1e876 <SysBase>,d0
    ef08:	|  |         movea.l d0,a6
    ef0a:	|  |         movea.l 16(sp),a1
    ef0e:	|  |         jsr -690(a6)
			newText = NULL;
    ef12:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    ef16:	|  |         moveq #0,d0
    ef18:	|  +-------- bra.s ef2a <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    ef1a:	'--|-------> pea 1ac6f <PutChar+0x1ccf>
    ef20:	   |         jsr 184fe <KPrintF>
    ef26:	   |         addq.l #4,sp
	return BR_ERROR;
    ef28:	   |         moveq #1,d0
}
    ef2a:	   '-------> movea.l (sp)+,a6
    ef2c:	             lea 24(sp),sp
    ef30:	             rts

0000ef32 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    ef32:	pea 1 <_start+0x1>
    ef36:	move.l 12(sp),-(sp)
    ef3a:	move.l 12(sp),-(sp)
    ef3e:	jsr edd2 <sayCore>
    ef44:	lea 12(sp),sp
}
    ef48:	rts

0000ef4a <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    ef4a:	clr.l -(sp)
    ef4c:	move.l 12(sp),-(sp)
    ef50:	move.l 12(sp),-(sp)
    ef54:	jsr edd2 <sayCore>
    ef5a:	lea 12(sp),sp
}
    ef5e:	rts

0000ef60 <builtIn_freeze>:

builtIn(freeze)
{
	KPrintF("running freeze\n");
    ef60:	pea 1ac9d <PutChar+0x1cfd>
    ef66:	jsr 184fe <KPrintF>
    ef6c:	addq.l #4,sp
	UNUSEDALL
	freeze ();
    ef6e:	jsr 163ea <freeze>
	freezeSubs (); 
    ef74:	jsr 65fa <freezeSubs>
	fun -> freezerLevel = 0;
    ef7a:	movea.l 8(sp),a0
    ef7e:	clr.b 56(a0)
	return BR_CONTINUE;
    ef82:	moveq #2,d0
}
    ef84:	rts

0000ef86 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	KPrintF("running unfreeze\n");
    ef86:	pea 1acad <PutChar+0x1d0d>
    ef8c:	jsr 184fe <KPrintF>
    ef92:	addq.l #4,sp
	UNUSEDALL
	unfreeze ();
    ef94:	jsr 165ee <unfreeze>
	unfreezeSubs (); 
    ef9a:	jsr 7e0a <unfreezeSubs>
	return BR_CONTINUE;
    efa0:	moveq #2,d0
}
    efa2:	rts

0000efa4 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	//KPrintF("running howfrozen\n");
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    efa4:	jsr 165ca <howFrozen>
    efaa:	move.l d0,d1
    efac:	moveq #28,d0
    efae:	add.l 8(sp),d0
    efb2:	move.l d1,-(sp)
    efb4:	pea 1 <_start+0x1>
    efb8:	move.l d0,-(sp)
    efba:	jsr 16310 <setVariable>
    efc0:	lea 12(sp),sp
	return BR_CONTINUE; 
    efc4:	moveq #2,d0
}
    efc6:	rts

0000efc8 <builtIn_setCursor>:

builtIn(setCursor)
{
    efc8:	subq.l #4,sp
	KPrintF("running setCursor\n");
    efca:	pea 1acbf <PutChar+0x1d1f>
    efd0:	jsr 184fe <KPrintF>
    efd6:	addq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    efd8:	movea.l 12(sp),a0
    efdc:	move.l 24(a0),d0
    efe0:	move.l d0,-(sp)
    efe2:	jsr 15ef6 <getAnimationFromVar>
    efe8:	addq.l #4,sp
    efea:	move.l d0,(sp)
	pickAnimCursor (aa);
    efec:	move.l (sp),-(sp)
    efee:	jsr d6c <pickAnimCursor>
    eff4:	addq.l #4,sp
	trimStack (&fun -> stack);
    eff6:	moveq #24,d0
    eff8:	add.l 12(sp),d0
    effc:	move.l d0,-(sp)
    effe:	jsr 163a2 <trimStack>
    f004:	addq.l #4,sp
	return BR_CONTINUE;
    f006:	moveq #2,d0
}
    f008:	addq.l #4,sp
    f00a:	rts

0000f00c <builtIn_getMouseX>:

builtIn(getMouseX)
{
	KPrintF("running getMouseX\n");
    f00c:	pea 1acd2 <PutChar+0x1d32>
    f012:	jsr 184fe <KPrintF>
    f018:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    f01a:	move.l 1e830 <input+0xa>,d1
    f020:	move.l 1e930 <cameraX>,d0
    f026:	add.l d0,d1
    f028:	moveq #28,d0
    f02a:	add.l 8(sp),d0
    f02e:	move.l d1,-(sp)
    f030:	pea 1 <_start+0x1>
    f034:	move.l d0,-(sp)
    f036:	jsr 16310 <setVariable>
    f03c:	lea 12(sp),sp
	return BR_CONTINUE;
    f040:	moveq #2,d0
}
    f042:	rts

0000f044 <builtIn_getMouseY>:

builtIn(getMouseY)
{
	KPrintF("running getMouseY\n");
    f044:	pea 1ace5 <PutChar+0x1d45>
    f04a:	jsr 184fe <KPrintF>
    f050:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    f052:	move.l 1e834 <input+0xe>,d1
    f058:	move.l 1e934 <cameraY>,d0
    f05e:	add.l d0,d1
    f060:	moveq #28,d0
    f062:	add.l 8(sp),d0
    f066:	move.l d1,-(sp)
    f068:	pea 1 <_start+0x1>
    f06c:	move.l d0,-(sp)
    f06e:	jsr 16310 <setVariable>
    f074:	lea 12(sp),sp
	return BR_CONTINUE;
    f078:	moveq #2,d0
}
    f07a:	rts

0000f07c <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	KPrintF("running getMouseScreenX\n");
    f07c:	pea 1acf8 <PutChar+0x1d58>
    f082:	jsr 184fe <KPrintF>
    f088:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    f08a:	move.l 1e830 <input+0xa>,d0
    f090:	move.l d0,-(sp)
    f092:	jsr 18930 <__floatsisf>
    f098:	addq.l #4,sp
    f09a:	move.l d0,d1
    f09c:	move.l 1e1fc <cameraZoom>,d0
    f0a2:	move.l d0,-(sp)
    f0a4:	move.l d1,-(sp)
    f0a6:	jsr 189e2 <__mulsf3>
    f0ac:	addq.l #8,sp
    f0ae:	move.l d0,-(sp)
    f0b0:	jsr 188c8 <__fixsfsi>
    f0b6:	addq.l #4,sp
    f0b8:	move.l d0,d1
    f0ba:	moveq #28,d0
    f0bc:	add.l 8(sp),d0
    f0c0:	move.l d1,-(sp)
    f0c2:	pea 1 <_start+0x1>
    f0c6:	move.l d0,-(sp)
    f0c8:	jsr 16310 <setVariable>
    f0ce:	lea 12(sp),sp
	return BR_CONTINUE;
    f0d2:	moveq #2,d0
}
    f0d4:	rts

0000f0d6 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	KPrintF("running getMouseScreenY\n");
    f0d6:	pea 1ad11 <PutChar+0x1d71>
    f0dc:	jsr 184fe <KPrintF>
    f0e2:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    f0e4:	move.l 1e834 <input+0xe>,d0
    f0ea:	move.l d0,-(sp)
    f0ec:	jsr 18930 <__floatsisf>
    f0f2:	addq.l #4,sp
    f0f4:	move.l d0,d1
    f0f6:	move.l 1e1fc <cameraZoom>,d0
    f0fc:	move.l d0,-(sp)
    f0fe:	move.l d1,-(sp)
    f100:	jsr 189e2 <__mulsf3>
    f106:	addq.l #8,sp
    f108:	move.l d0,-(sp)
    f10a:	jsr 188c8 <__fixsfsi>
    f110:	addq.l #4,sp
    f112:	move.l d0,d1
    f114:	moveq #28,d0
    f116:	add.l 8(sp),d0
    f11a:	move.l d1,-(sp)
    f11c:	pea 1 <_start+0x1>
    f120:	move.l d0,-(sp)
    f122:	jsr 16310 <setVariable>
    f128:	lea 12(sp),sp
	return BR_CONTINUE;
    f12c:	moveq #2,d0
}
    f12e:	rts

0000f130 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	KPrintF("running getStatusText\n");
    f130:	pea 1ad2a <PutChar+0x1d8a>
    f136:	jsr 184fe <KPrintF>
    f13c:	addq.l #4,sp
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    f13e:	jsr 8f1c <statusBarText>
    f144:	move.l d0,d1
    f146:	moveq #28,d0
    f148:	add.l 8(sp),d0
    f14c:	move.l d1,-(sp)
    f14e:	move.l d0,-(sp)
    f150:	jsr 15c40 <makeTextVar>
    f156:	addq.l #8,sp
	return BR_CONTINUE;
    f158:	moveq #2,d0
}
    f15a:	rts

0000f15c <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    f15c:	       lea -20(sp),sp
    f160:	       move.l a6,-(sp)
	KPrintF("running getMatchingFiles\n");
    f162:	       pea 1ad41 <PutChar+0x1da1>
    f168:	       jsr 184fe <KPrintF>
    f16e:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f170:	       movea.l 32(sp),a0
    f174:	       move.l 24(a0),d0
    f178:	       move.l d0,-(sp)
    f17a:	       jsr 15ff4 <getTextFromAnyVar>
    f180:	       addq.l #4,sp
    f182:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    f186:	   ,-- bne.s f18e <builtIn_getMatchingFiles+0x32>
    f188:	   |   moveq #1,d0
    f18a:	,--|-- bra.w f250 <builtIn_getMatchingFiles+0xf4>
	trimStack (&fun -> stack);
    f18e:	|  '-> moveq #24,d0
    f190:	|      add.l 32(sp),d0
    f194:	|      move.l d0,-(sp)
    f196:	|      jsr 163a2 <trimStack>
    f19c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    f19e:	|      moveq #28,d0
    f1a0:	|      add.l 32(sp),d0
    f1a4:	|      move.l d0,-(sp)
    f1a6:	|      jsr 15c6c <unlinkVar>
    f1ac:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    f1ae:	|      movea.l 32(sp),a0
    f1b2:	|      moveq #6,d0
    f1b4:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    f1b8:	|      moveq #12,d0
    f1ba:	|      move.l d0,16(sp)
    f1be:	|      clr.l 12(sp)
    f1c2:	|      move.l 1e876 <SysBase>,d0
    f1c8:	|      movea.l d0,a6
    f1ca:	|      move.l 16(sp),d0
    f1ce:	|      move.l 12(sp),d1
    f1d2:	|      jsr -684(a6)
    f1d6:	|      move.l d0,8(sp)
    f1da:	|      move.l 8(sp),d0
    f1de:	|      movea.l 32(sp),a0
    f1e2:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    f1e6:	|      moveq #32,d0
    f1e8:	|      add.l 32(sp),d0
    f1ec:	|  ,-- bne.s f1f2 <builtIn_getMatchingFiles+0x96>
    f1ee:	|  |   moveq #1,d0
    f1f0:	+--|-- bra.s f250 <builtIn_getMatchingFiles+0xf4>
	fun -> reg.varData.theStack -> first = NULL;
    f1f2:	|  '-> movea.l 32(sp),a0
    f1f6:	|      movea.l 32(a0),a0
    f1fa:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    f1fc:	|      movea.l 32(sp),a0
    f200:	|      movea.l 32(a0),a0
    f204:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    f208:	|      movea.l 32(sp),a0
    f20c:	|      movea.l 32(a0),a0
    f210:	|      moveq #1,d0
    f212:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    f216:	|      movea.l 32(sp),a0
    f21a:	|      move.l 32(a0),d0
    f21e:	|      move.l 20(sp),-(sp)
    f222:	|      move.l d0,-(sp)
    f224:	|      jsr 157da <getSavedGamesStack>
    f22a:	|      addq.l #8,sp
    f22c:	|      tst.w d0
    f22e:	|  ,-- bne.s f234 <builtIn_getMatchingFiles+0xd8>
    f230:	|  |   moveq #1,d0
    f232:	+--|-- bra.s f250 <builtIn_getMatchingFiles+0xf4>
	FreeVec(newText);
    f234:	|  '-> move.l 20(sp),4(sp)
    f23a:	|      move.l 1e876 <SysBase>,d0
    f240:	|      movea.l d0,a6
    f242:	|      movea.l 4(sp),a1
    f246:	|      jsr -690(a6)
	newText = NULL;
    f24a:	|      clr.l 20(sp)
	return BR_CONTINUE;
    f24e:	|      moveq #2,d0
}
    f250:	'----> movea.l (sp)+,a6
    f252:	       lea 20(sp),sp
    f256:	       rts

0000f258 <builtIn_saveGame>:

builtIn(saveGame)
{
    f258:	       lea -12(sp),sp
    f25c:	       move.l a6,-(sp)
	KPrintF("running saveGame\n");
    f25e:	       pea 1ad5b <PutChar+0x1dbb>
    f264:	       jsr 184fe <KPrintF>
    f26a:	       addq.l #4,sp

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f26c:	       movea.l 24(sp),a0
    f270:	       move.l 24(a0),d0
    f274:	       move.l d0,-(sp)
    f276:	       jsr 15ff4 <getTextFromAnyVar>
    f27c:	       addq.l #4,sp
    f27e:	       move.l d0,1e840 <loadNow>
    trimStack(&fun->stack);
    f284:	       moveq #24,d0
    f286:	       add.l 24(sp),d0
    f28a:	       move.l d0,-(sp)
    f28c:	       jsr 163a2 <trimStack>
    f292:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    f294:	       move.l 1e840 <loadNow>,d0
    f29a:	       move.l d0,-(sp)
    f29c:	       jsr 2fe <encodeFilename>
    f2a2:	       addq.l #4,sp
    f2a4:	       move.l d0,12(sp)
    FreeVec(loadNow);
    f2a8:	       move.l 1e840 <loadNow>,8(sp)
    f2b0:	       move.l 1e876 <SysBase>,d0
    f2b6:	       movea.l d0,a6
    f2b8:	       movea.l 8(sp),a1
    f2bc:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    f2c0:	       move.l 12(sp),-(sp)
    f2c4:	       jsr ed44 <failSecurityCheck>
    f2ca:	       addq.l #4,sp
    f2cc:	       tst.w d0
    f2ce:	   ,-- beq.s f2d4 <builtIn_saveGame+0x7c>
    f2d0:	   |   moveq #1,d0
    f2d2:	,--|-- bra.s f324 <builtIn_saveGame+0xcc>

    loadNow = joinStrings(":", aaaaa);
    f2d4:	|  '-> move.l 12(sp),-(sp)
    f2d8:	|      pea 1ad6d <PutChar+0x1dcd>
    f2de:	|      jsr 14f4a <joinStrings>
    f2e4:	|      addq.l #8,sp
    f2e6:	|      move.l d0,1e840 <loadNow>
    FreeVec(aaaaa);
    f2ec:	|      move.l 12(sp),4(sp)
    f2f2:	|      move.l 1e876 <SysBase>,d0
    f2f8:	|      movea.l d0,a6
    f2fa:	|      movea.l 4(sp),a1
    f2fe:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    f302:	|      moveq #28,d0
    f304:	|      add.l 24(sp),d0
    f308:	|      clr.l -(sp)
    f30a:	|      pea 1 <_start+0x1>
    f30e:	|      move.l d0,-(sp)
    f310:	|      jsr 16310 <setVariable>
    f316:	|      lea 12(sp),sp
    saverFunc = fun;
    f31a:	|      move.l 24(sp),1e940 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    f322:	|      moveq #0,d0
}
    f324:	'----> movea.l (sp)+,a6
    f326:	       lea 12(sp),sp
    f32a:	       rts

0000f32c <builtIn_fileExists>:

builtIn(fileExists)
{
    f32c:	       lea -36(sp),sp
    f330:	       move.l a6,-(sp)
    f332:	       move.l d2,-(sp)
	KPrintF("running fileExists\n");
    f334:	       pea 1ad6f <PutChar+0x1dcf>
    f33a:	       jsr 184fe <KPrintF>
    f340:	       addq.l #4,sp
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f342:	       movea.l 52(sp),a0
    f346:	       move.l 24(a0),d0
    f34a:	       move.l d0,-(sp)
    f34c:	       jsr 15ff4 <getTextFromAnyVar>
    f352:	       addq.l #4,sp
    f354:	       move.l d0,1e840 <loadNow>
    trimStack(&fun->stack);
    f35a:	       moveq #24,d0
    f35c:	       add.l 52(sp),d0
    f360:	       move.l d0,-(sp)
    f362:	       jsr 163a2 <trimStack>
    f368:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    f36a:	       move.l 1e840 <loadNow>,d0
    f370:	       move.l d0,-(sp)
    f372:	       jsr 2fe <encodeFilename>
    f378:	       addq.l #4,sp
    f37a:	       move.l d0,40(sp)
    FreeVec(loadNow);
    f37e:	       move.l 1e840 <loadNow>,36(sp)
    f386:	       move.l 1e876 <SysBase>,d0
    f38c:	       movea.l d0,a6
    f38e:	       movea.l 36(sp),a1
    f392:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    f396:	       move.l 40(sp),-(sp)
    f39a:	       jsr ed44 <failSecurityCheck>
    f3a0:	       addq.l #4,sp
    f3a2:	       tst.w d0
    f3a4:	   ,-- beq.s f3ac <builtIn_fileExists+0x80>
    f3a6:	   |   moveq #1,d0
    f3a8:	,--|-- bra.w f44c <builtIn_fileExists+0x120>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    f3ac:	|  '-> move.l 40(sp),32(sp)
    f3b2:	|      move.l #1005,28(sp)
    f3ba:	|      move.l 1e87e <DOSBase>,d0
    f3c0:	|      movea.l d0,a6
    f3c2:	|      move.l 32(sp),d1
    f3c6:	|      move.l 28(sp),d2
    f3ca:	|      jsr -30(a6)
    f3ce:	|      move.l d0,24(sp)
    f3d2:	|      move.l 24(sp),d0
    f3d6:	|      move.l d0,20(sp)
    if (!fp) {        
    f3da:	|  ,-- bne.s f3ea <builtIn_fileExists+0xbe>
        KPrintF("Can't get current directory.\n");      
    f3dc:	|  |   pea 1ad83 <PutChar+0x1de3>
    f3e2:	|  |   jsr 184fe <KPrintF>
    f3e8:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    f3ea:	|  '-> tst.l 20(sp)
    f3ee:	|      sne d0
    f3f0:	|      neg.b d0
    f3f2:	|      moveq #0,d1
    f3f4:	|      move.b d0,d1
    f3f6:	|      moveq #28,d0
    f3f8:	|      add.l 52(sp),d0
    f3fc:	|      move.l d1,-(sp)
    f3fe:	|      pea 1 <_start+0x1>
    f402:	|      move.l d0,-(sp)
    f404:	|      jsr 16310 <setVariable>
    f40a:	|      lea 12(sp),sp
    if (fp) Close(fp);
    f40e:	|      tst.l 20(sp)
    f412:	|  ,-- beq.s f42e <builtIn_fileExists+0x102>
    f414:	|  |   move.l 20(sp),16(sp)
    f41a:	|  |   move.l 1e87e <DOSBase>,d0
    f420:	|  |   movea.l d0,a6
    f422:	|  |   move.l 16(sp),d1
    f426:	|  |   jsr -36(a6)
    f42a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    f42e:	|  '-> move.l 40(sp),8(sp)
    f434:	|      move.l 1e876 <SysBase>,d0
    f43a:	|      movea.l d0,a6
    f43c:	|      movea.l 8(sp),a1
    f440:	|      jsr -690(a6)
    loadNow = NULL;
    f444:	|      clr.l 1e840 <loadNow>
    return BR_CONTINUE;
    f44a:	|      moveq #2,d0
}
    f44c:	'----> move.l (sp)+,d2
    f44e:	       movea.l (sp)+,a6
    f450:	       lea 36(sp),sp
    f454:	       rts

0000f456 <builtIn_loadGame>:

builtIn(loadGame)
{
    f456:	       lea -36(sp),sp
    f45a:	       move.l a6,-(sp)
    f45c:	       move.l d2,-(sp)
	KPrintF("running loadGame\n");
    f45e:	       pea 1ada1 <PutChar+0x1e01>
    f464:	       jsr 184fe <KPrintF>
    f46a:	       addq.l #4,sp
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    f46c:	       movea.l 52(sp),a0
    f470:	       move.l 24(a0),d0
    f474:	       move.l d0,-(sp)
    f476:	       jsr 15ff4 <getTextFromAnyVar>
    f47c:	       addq.l #4,sp
    f47e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    f482:	       moveq #24,d0
    f484:	       add.l 52(sp),d0
    f488:	       move.l d0,-(sp)
    f48a:	       jsr 163a2 <trimStack>
    f490:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    f492:	       move.l 40(sp),-(sp)
    f496:	       jsr 2fe <encodeFilename>
    f49c:	       addq.l #4,sp
    f49e:	       move.l d0,1e840 <loadNow>
    FreeVec(aaaaa);
    f4a4:	       move.l 40(sp),36(sp)
    f4aa:	       move.l 1e876 <SysBase>,d0
    f4b0:	       movea.l d0,a6
    f4b2:	       movea.l 36(sp),a1
    f4b6:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    f4ba:	       move.l 1e840 <loadNow>,d0
    f4c0:	       move.l d0,-(sp)
    f4c2:	       jsr ed44 <failSecurityCheck>
    f4c8:	       addq.l #4,sp
    f4ca:	       tst.w d0
    f4cc:	   ,-- beq.s f4d2 <builtIn_loadGame+0x7c>
    f4ce:	   |   moveq #1,d0
    f4d0:	,--|-- bra.s f542 <builtIn_loadGame+0xec>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    f4d2:	|  '-> move.l 1e840 <loadNow>,32(sp)
    f4da:	|      move.l #1005,28(sp)
    f4e2:	|      move.l 1e87e <DOSBase>,d0
    f4e8:	|      movea.l d0,a6
    f4ea:	|      move.l 32(sp),d1
    f4ee:	|      move.l 28(sp),d2
    f4f2:	|      jsr -30(a6)
    f4f6:	|      move.l d0,24(sp)
    f4fa:	|      move.l 24(sp),d0
    f4fe:	|      move.l d0,20(sp)
    if (fp) {
    f502:	|  ,-- beq.s f522 <builtIn_loadGame+0xcc>
        Close(fp);
    f504:	|  |   move.l 20(sp),12(sp)
    f50a:	|  |   move.l 1e87e <DOSBase>,d0
    f510:	|  |   movea.l d0,a6
    f512:	|  |   move.l 12(sp),d1
    f516:	|  |   jsr -36(a6)
    f51a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    f51e:	|  |   moveq #0,d0
    f520:	+--|-- bra.s f542 <builtIn_loadGame+0xec>
    }
    FreeVec(loadNow);
    f522:	|  '-> move.l 1e840 <loadNow>,16(sp)
    f52a:	|      move.l 1e876 <SysBase>,d0
    f530:	|      movea.l d0,a6
    f532:	|      movea.l 16(sp),a1
    f536:	|      jsr -690(a6)
    loadNow = NULL;
    f53a:	|      clr.l 1e840 <loadNow>
    return BR_CONTINUE;
    f540:	|      moveq #2,d0
}
    f542:	'----> move.l (sp)+,d2
    f544:	       movea.l (sp)+,a6
    f546:	       lea 36(sp),sp
    f54a:	       rts

0000f54c <builtIn_blankScreen>:
#pragma mark -
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	KPrintF("running blankScreen\n");
    f54c:	pea 1adb3 <PutChar+0x1e13>
    f552:	jsr 184fe <KPrintF>
    f558:	addq.l #4,sp
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    f55a:	move.l 1e916 <sceneHeight>,d0
    f560:	move.l d0,d1
    f562:	move.l 1e912 <sceneWidth>,d0
    f568:	move.l d1,-(sp)
    f56a:	move.l d0,-(sp)
    f56c:	clr.l -(sp)
    f56e:	clr.l -(sp)
    f570:	jsr dc2e <blankScreen>
    f576:	lea 16(sp),sp
	return BR_CONTINUE;
    f57a:	moveq #2,d0
}
    f57c:	rts

0000f57e <builtIn_blankArea>:

builtIn(blankArea)
{
    f57e:	       lea -16(sp),sp
	KPrintF("running blankArea\n");
    f582:	       pea 1adc8 <PutChar+0x1e28>
    f588:	       jsr 184fe <KPrintF>
    f58e:	       addq.l #4,sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f590:	       movea.l 24(sp),a0
    f594:	       move.l 24(a0),d0
    f598:	       move.l d0,-(sp)
    f59a:	       pea 1 <_start+0x1>
    f59e:	       lea 8(sp),a0
    f5a2:	       move.l a0,-(sp)
    f5a4:	       jsr 15a1e <getValueType>
    f5aa:	       lea 12(sp),sp
    f5ae:	       tst.w d0
    f5b0:	   ,-- bne.s f5b8 <builtIn_blankArea+0x3a>
    f5b2:	   |   moveq #1,d0
    f5b4:	,--|-- bra.w f68e <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f5b8:	|  '-> moveq #24,d0
    f5ba:	|      add.l 24(sp),d0
    f5be:	|      move.l d0,-(sp)
    f5c0:	|      jsr 163a2 <trimStack>
    f5c6:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f5c8:	|      movea.l 24(sp),a0
    f5cc:	|      move.l 24(a0),d0
    f5d0:	|      move.l d0,-(sp)
    f5d2:	|      pea 1 <_start+0x1>
    f5d6:	|      lea 12(sp),a0
    f5da:	|      move.l a0,-(sp)
    f5dc:	|      jsr 15a1e <getValueType>
    f5e2:	|      lea 12(sp),sp
    f5e6:	|      tst.w d0
    f5e8:	|  ,-- bne.s f5f0 <builtIn_blankArea+0x72>
    f5ea:	|  |   moveq #1,d0
    f5ec:	+--|-- bra.w f68e <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f5f0:	|  '-> moveq #24,d0
    f5f2:	|      add.l 24(sp),d0
    f5f6:	|      move.l d0,-(sp)
    f5f8:	|      jsr 163a2 <trimStack>
    f5fe:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f600:	|      movea.l 24(sp),a0
    f604:	|      move.l 24(a0),d0
    f608:	|      move.l d0,-(sp)
    f60a:	|      pea 1 <_start+0x1>
    f60e:	|      moveq #16,d0
    f610:	|      add.l sp,d0
    f612:	|      move.l d0,-(sp)
    f614:	|      jsr 15a1e <getValueType>
    f61a:	|      lea 12(sp),sp
    f61e:	|      tst.w d0
    f620:	|  ,-- bne.s f626 <builtIn_blankArea+0xa8>
    f622:	|  |   moveq #1,d0
    f624:	+--|-- bra.s f68e <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f626:	|  '-> moveq #24,d0
    f628:	|      add.l 24(sp),d0
    f62c:	|      move.l d0,-(sp)
    f62e:	|      jsr 163a2 <trimStack>
    f634:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f636:	|      movea.l 24(sp),a0
    f63a:	|      move.l 24(a0),d0
    f63e:	|      move.l d0,-(sp)
    f640:	|      pea 1 <_start+0x1>
    f644:	|      moveq #20,d0
    f646:	|      add.l sp,d0
    f648:	|      move.l d0,-(sp)
    f64a:	|      jsr 15a1e <getValueType>
    f650:	|      lea 12(sp),sp
    f654:	|      tst.w d0
    f656:	|  ,-- bne.s f65c <builtIn_blankArea+0xde>
    f658:	|  |   moveq #1,d0
    f65a:	+--|-- bra.s f68e <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f65c:	|  '-> moveq #24,d0
    f65e:	|      add.l 24(sp),d0
    f662:	|      move.l d0,-(sp)
    f664:	|      jsr 163a2 <trimStack>
    f66a:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f66c:	|      movea.l (sp),a1
    f66e:	|      movea.l 4(sp),a0
    f672:	|      move.l 8(sp),d1
    f676:	|      move.l 12(sp),d0
    f67a:	|      move.l a1,-(sp)
    f67c:	|      move.l a0,-(sp)
    f67e:	|      move.l d1,-(sp)
    f680:	|      move.l d0,-(sp)
    f682:	|      jsr dc2e <blankScreen>
    f688:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f68c:	|      moveq #2,d0
}
    f68e:	'----> lea 16(sp),sp
    f692:	       rts

0000f694 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	KPrintF("running darkBackground\n");
    f694:	pea 1addb <PutChar+0x1e3b>
    f69a:	jsr 184fe <KPrintF>
    f6a0:	addq.l #4,sp
	UNUSEDALL
	darkScreen ();
    f6a2:	jsr dc4c <darkScreen>
	return BR_CONTINUE;
    f6a8:	moveq #2,d0
}
    f6aa:	rts

0000f6ac <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f6ac:	       lea -12(sp),sp
	KPrintF("running addOverlay\n");
    f6b0:	       pea 1adf3 <PutChar+0x1e53>
    f6b6:	       jsr 184fe <KPrintF>
    f6bc:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6be:	       movea.l 20(sp),a0
    f6c2:	       move.l 24(a0),d0
    f6c6:	       move.l d0,-(sp)
    f6c8:	       pea 1 <_start+0x1>
    f6cc:	       lea 8(sp),a0
    f6d0:	       move.l a0,-(sp)
    f6d2:	       jsr 15a1e <getValueType>
    f6d8:	       lea 12(sp),sp
    f6dc:	       tst.w d0
    f6de:	   ,-- bne.s f6e6 <builtIn_addOverlay+0x3a>
    f6e0:	   |   moveq #1,d0
    f6e2:	,--|-- bra.w f77e <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f6e6:	|  '-> moveq #24,d0
    f6e8:	|      add.l 20(sp),d0
    f6ec:	|      move.l d0,-(sp)
    f6ee:	|      jsr 163a2 <trimStack>
    f6f4:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6f6:	|      movea.l 20(sp),a0
    f6fa:	|      move.l 24(a0),d0
    f6fe:	|      move.l d0,-(sp)
    f700:	|      pea 1 <_start+0x1>
    f704:	|      moveq #12,d0
    f706:	|      add.l sp,d0
    f708:	|      move.l d0,-(sp)
    f70a:	|      jsr 15a1e <getValueType>
    f710:	|      lea 12(sp),sp
    f714:	|      tst.w d0
    f716:	|  ,-- bne.s f71c <builtIn_addOverlay+0x70>
    f718:	|  |   moveq #1,d0
    f71a:	+--|-- bra.s f77e <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f71c:	|  '-> moveq #24,d0
    f71e:	|      add.l 20(sp),d0
    f722:	|      move.l d0,-(sp)
    f724:	|      jsr 163a2 <trimStack>
    f72a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f72c:	|      movea.l 20(sp),a0
    f730:	|      move.l 24(a0),d0
    f734:	|      move.l d0,-(sp)
    f736:	|      pea 5 <_start+0x5>
    f73a:	|      moveq #16,d0
    f73c:	|      add.l sp,d0
    f73e:	|      move.l d0,-(sp)
    f740:	|      jsr 15a1e <getValueType>
    f746:	|      lea 12(sp),sp
    f74a:	|      tst.w d0
    f74c:	|  ,-- bne.s f752 <builtIn_addOverlay+0xa6>
    f74e:	|  |   moveq #1,d0
    f750:	+--|-- bra.s f77e <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f752:	|  '-> moveq #24,d0
    f754:	|      add.l 20(sp),d0
    f758:	|      move.l d0,-(sp)
    f75a:	|      jsr 163a2 <trimStack>
    f760:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f762:	|      movea.l (sp),a0
    f764:	|      move.l 4(sp),d1
    f768:	|      move.l 8(sp),d0
    f76c:	|      move.l a0,-(sp)
    f76e:	|      move.l d1,-(sp)
    f770:	|      move.l d0,-(sp)
    f772:	|      jsr dd6a <loadBackDrop>
    f778:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f77c:	|      moveq #2,d0
}
    f77e:	'----> lea 12(sp),sp
    f782:	       rts

0000f784 <builtIn_addZBufferLayer>:

//addZBufferLayer( xPos, yPos, width, height )
builtIn(addZBufferLayer)
{
    f784:	       lea -20(sp),sp
    f788:	       move.l d2,-(sp)
	KPrintF("running addZBufferLayer\n");
    f78a:	       pea 1ae07 <PutChar+0x1e67>
    f790:	       jsr 184fe <KPrintF>
    f796:	       addq.l #4,sp
	UNUSEDALL
	int xpos, ypos, width, height, yz;
	if (! getValueType(&yz, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f798:	       movea.l 32(sp),a0
    f79c:	       move.l 24(a0),d0
    f7a0:	       move.l d0,-(sp)
    f7a2:	       pea 1 <_start+0x1>
    f7a6:	       lea 12(sp),a0
    f7aa:	       move.l a0,-(sp)
    f7ac:	       jsr 15a1e <getValueType>
    f7b2:	       lea 12(sp),sp
    f7b6:	       tst.w d0
    f7b8:	   ,-- bne.s f7c0 <builtIn_addZBufferLayer+0x3c>
    f7ba:	   |   moveq #1,d0
    f7bc:	,--|-- bra.w f8d6 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f7c0:	|  '-> moveq #24,d0
    f7c2:	|      add.l 32(sp),d0
    f7c6:	|      move.l d0,-(sp)
    f7c8:	|      jsr 163a2 <trimStack>
    f7ce:	|      addq.l #4,sp
	if (! getValueType(&height, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7d0:	|      movea.l 32(sp),a0
    f7d4:	|      move.l 24(a0),d0
    f7d8:	|      move.l d0,-(sp)
    f7da:	|      pea 1 <_start+0x1>
    f7de:	|      lea 16(sp),a0
    f7e2:	|      move.l a0,-(sp)
    f7e4:	|      jsr 15a1e <getValueType>
    f7ea:	|      lea 12(sp),sp
    f7ee:	|      tst.w d0
    f7f0:	|  ,-- bne.s f7f8 <builtIn_addZBufferLayer+0x74>
    f7f2:	|  |   moveq #1,d0
    f7f4:	+--|-- bra.w f8d6 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f7f8:	|  '-> moveq #24,d0
    f7fa:	|      add.l 32(sp),d0
    f7fe:	|      move.l d0,-(sp)
    f800:	|      jsr 163a2 <trimStack>
    f806:	|      addq.l #4,sp
	if (! getValueType(&width, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f808:	|      movea.l 32(sp),a0
    f80c:	|      move.l 24(a0),d0
    f810:	|      move.l d0,-(sp)
    f812:	|      pea 1 <_start+0x1>
    f816:	|      lea 20(sp),a0
    f81a:	|      move.l a0,-(sp)
    f81c:	|      jsr 15a1e <getValueType>
    f822:	|      lea 12(sp),sp
    f826:	|      tst.w d0
    f828:	|  ,-- bne.s f830 <builtIn_addZBufferLayer+0xac>
    f82a:	|  |   moveq #1,d0
    f82c:	+--|-- bra.w f8d6 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f830:	|  '-> moveq #24,d0
    f832:	|      add.l 32(sp),d0
    f836:	|      move.l d0,-(sp)
    f838:	|      jsr 163a2 <trimStack>
    f83e:	|      addq.l #4,sp
	if (! getValueType(&ypos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f840:	|      movea.l 32(sp),a0
    f844:	|      move.l 24(a0),d0
    f848:	|      move.l d0,-(sp)
    f84a:	|      pea 1 <_start+0x1>
    f84e:	|      moveq #24,d0
    f850:	|      add.l sp,d0
    f852:	|      move.l d0,-(sp)
    f854:	|      jsr 15a1e <getValueType>
    f85a:	|      lea 12(sp),sp
    f85e:	|      tst.w d0
    f860:	|  ,-- bne.s f866 <builtIn_addZBufferLayer+0xe2>
    f862:	|  |   moveq #1,d0
    f864:	+--|-- bra.s f8d6 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f866:	|  '-> moveq #24,d0
    f868:	|      add.l 32(sp),d0
    f86c:	|      move.l d0,-(sp)
    f86e:	|      jsr 163a2 <trimStack>
    f874:	|      addq.l #4,sp
	if (! getValueType(&xpos, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f876:	|      movea.l 32(sp),a0
    f87a:	|      move.l 24(a0),d0
    f87e:	|      move.l d0,-(sp)
    f880:	|      pea 1 <_start+0x1>
    f884:	|      moveq #28,d0
    f886:	|      add.l sp,d0
    f888:	|      move.l d0,-(sp)
    f88a:	|      jsr 15a1e <getValueType>
    f890:	|      lea 12(sp),sp
    f894:	|      tst.w d0
    f896:	|  ,-- bne.s f89c <builtIn_addZBufferLayer+0x118>
    f898:	|  |   moveq #1,d0
    f89a:	+--|-- bra.s f8d6 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f89c:	|  '-> moveq #24,d0
    f89e:	|      add.l 32(sp),d0
    f8a2:	|      move.l d0,-(sp)
    f8a4:	|      jsr 163a2 <trimStack>
    f8aa:	|      addq.l #4,sp
	addZBufferLayer( xpos, ypos, width, height, yz);
    f8ac:	|      move.l 4(sp),d2
    f8b0:	|      movea.l 8(sp),a1
    f8b4:	|      movea.l 12(sp),a0
    f8b8:	|      move.l 16(sp),d1
    f8bc:	|      move.l 20(sp),d0
    f8c0:	|      move.l d2,-(sp)
    f8c2:	|      move.l a1,-(sp)
    f8c4:	|      move.l a0,-(sp)
    f8c6:	|      move.l d1,-(sp)
    f8c8:	|      move.l d0,-(sp)
    f8ca:	|      jsr 8f3a <addZBufferLayer>
    f8d0:	|      lea 20(sp),sp
	return BR_CONTINUE;
    f8d4:	|      moveq #2,d0
}
    f8d6:	'----> move.l (sp)+,d2
    f8d8:	       lea 20(sp),sp
    f8dc:	       rts

0000f8de <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f8de:	       lea -12(sp),sp
	KPrintF("running mixOverlay\n");
    f8e2:	       pea 1ae20 <PutChar+0x1e80>
    f8e8:	       jsr 184fe <KPrintF>
    f8ee:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8f0:	       movea.l 20(sp),a0
    f8f4:	       move.l 24(a0),d0
    f8f8:	       move.l d0,-(sp)
    f8fa:	       pea 1 <_start+0x1>
    f8fe:	       lea 8(sp),a0
    f902:	       move.l a0,-(sp)
    f904:	       jsr 15a1e <getValueType>
    f90a:	       lea 12(sp),sp
    f90e:	       tst.w d0
    f910:	   ,-- bne.s f918 <builtIn_mixOverlay+0x3a>
    f912:	   |   moveq #1,d0
    f914:	,--|-- bra.w f9b0 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f918:	|  '-> moveq #24,d0
    f91a:	|      add.l 20(sp),d0
    f91e:	|      move.l d0,-(sp)
    f920:	|      jsr 163a2 <trimStack>
    f926:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f928:	|      movea.l 20(sp),a0
    f92c:	|      move.l 24(a0),d0
    f930:	|      move.l d0,-(sp)
    f932:	|      pea 1 <_start+0x1>
    f936:	|      moveq #12,d0
    f938:	|      add.l sp,d0
    f93a:	|      move.l d0,-(sp)
    f93c:	|      jsr 15a1e <getValueType>
    f942:	|      lea 12(sp),sp
    f946:	|      tst.w d0
    f948:	|  ,-- bne.s f94e <builtIn_mixOverlay+0x70>
    f94a:	|  |   moveq #1,d0
    f94c:	+--|-- bra.s f9b0 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f94e:	|  '-> moveq #24,d0
    f950:	|      add.l 20(sp),d0
    f954:	|      move.l d0,-(sp)
    f956:	|      jsr 163a2 <trimStack>
    f95c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f95e:	|      movea.l 20(sp),a0
    f962:	|      move.l 24(a0),d0
    f966:	|      move.l d0,-(sp)
    f968:	|      pea 5 <_start+0x5>
    f96c:	|      moveq #16,d0
    f96e:	|      add.l sp,d0
    f970:	|      move.l d0,-(sp)
    f972:	|      jsr 15a1e <getValueType>
    f978:	|      lea 12(sp),sp
    f97c:	|      tst.w d0
    f97e:	|  ,-- bne.s f984 <builtIn_mixOverlay+0xa6>
    f980:	|  |   moveq #1,d0
    f982:	+--|-- bra.s f9b0 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f984:	|  '-> moveq #24,d0
    f986:	|      add.l 20(sp),d0
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 163a2 <trimStack>
    f992:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f994:	|      movea.l (sp),a0
    f996:	|      move.l 4(sp),d1
    f99a:	|      move.l 8(sp),d0
    f99e:	|      move.l a0,-(sp)
    f9a0:	|      move.l d1,-(sp)
    f9a2:	|      move.l d0,-(sp)
    f9a4:	|      jsr dde0 <mixBackDrop>
    f9aa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f9ae:	|      moveq #2,d0
}
    f9b0:	'----> lea 12(sp),sp
    f9b4:	       rts

0000f9b6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f9b6:	       lea -12(sp),sp
	KPrintF("running pasteImage\n");
    f9ba:	       pea 1ae34 <PutChar+0x1e94>
    f9c0:	       jsr 184fe <KPrintF>
    f9c6:	       addq.l #4,sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9c8:	       movea.l 20(sp),a0
    f9cc:	       move.l 24(a0),d0
    f9d0:	       move.l d0,-(sp)
    f9d2:	       pea 1 <_start+0x1>
    f9d6:	       lea 8(sp),a0
    f9da:	       move.l a0,-(sp)
    f9dc:	       jsr 15a1e <getValueType>
    f9e2:	       lea 12(sp),sp
    f9e6:	       tst.w d0
    f9e8:	   ,-- bne.s f9f0 <builtIn_pasteImage+0x3a>
    f9ea:	   |   moveq #1,d0
    f9ec:	,--|-- bra.w fa80 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    f9f0:	|  '-> moveq #24,d0
    f9f2:	|      add.l 20(sp),d0
    f9f6:	|      move.l d0,-(sp)
    f9f8:	|      jsr 163a2 <trimStack>
    f9fe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa00:	|      movea.l 20(sp),a0
    fa04:	|      move.l 24(a0),d0
    fa08:	|      move.l d0,-(sp)
    fa0a:	|      pea 1 <_start+0x1>
    fa0e:	|      moveq #12,d0
    fa10:	|      add.l sp,d0
    fa12:	|      move.l d0,-(sp)
    fa14:	|      jsr 15a1e <getValueType>
    fa1a:	|      lea 12(sp),sp
    fa1e:	|      tst.w d0
    fa20:	|  ,-- bne.s fa26 <builtIn_pasteImage+0x70>
    fa22:	|  |   moveq #1,d0
    fa24:	+--|-- bra.s fa80 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    fa26:	|  '-> moveq #24,d0
    fa28:	|      add.l 20(sp),d0
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      jsr 163a2 <trimStack>
    fa34:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    fa36:	|      movea.l 20(sp),a0
    fa3a:	|      move.l 24(a0),d0
    fa3e:	|      move.l d0,-(sp)
    fa40:	|      jsr 15ef6 <getAnimationFromVar>
    fa46:	|      addq.l #4,sp
    fa48:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    fa4c:	|      moveq #24,d0
    fa4e:	|      add.l 20(sp),d0
    fa52:	|      move.l d0,-(sp)
    fa54:	|      jsr 163a2 <trimStack>
    fa5a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    fa5c:	|      tst.l 8(sp)
    fa60:	|  ,-- bne.s fa66 <builtIn_pasteImage+0xb0>
    fa62:	|  |   moveq #2,d0
    fa64:	+--|-- bra.s fa80 <builtIn_pasteImage+0xca>

	pasteCursor (x, y, pp);
    fa66:	|  '-> move.l (sp),d1
    fa68:	|      move.l 4(sp),d0
    fa6c:	|      move.l 8(sp),-(sp)
    fa70:	|      move.l d1,-(sp)
    fa72:	|      move.l d0,-(sp)
    fa74:	|      jsr d94 <pasteCursor>
    fa7a:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    fa7e:	|      moveq #2,d0
}
    fa80:	'----> lea 12(sp),sp
    fa84:	       rts

0000fa86 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    fa86:	       subq.l #8,sp
	KPrintF("running setSceneDimensions\n");
    fa88:	       pea 1ae48 <PutChar+0x1ea8>
    fa8e:	       jsr 184fe <KPrintF>
    fa94:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa96:	       movea.l 16(sp),a0
    fa9a:	       move.l 24(a0),d0
    fa9e:	       move.l d0,-(sp)
    faa0:	       pea 1 <_start+0x1>
    faa4:	       move.l sp,d0
    faa6:	       addq.l #8,d0
    faa8:	       move.l d0,-(sp)
    faaa:	       jsr 15a1e <getValueType>
    fab0:	       lea 12(sp),sp
    fab4:	       tst.w d0
    fab6:	   ,-- bne.s fabe <builtIn_setSceneDimensions+0x38>
    fab8:	   |   moveq #1,d0
    faba:	,--|-- bra.w fb46 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    fabe:	|  '-> moveq #24,d0
    fac0:	|      add.l 16(sp),d0
    fac4:	|      move.l d0,-(sp)
    fac6:	|      jsr 163a2 <trimStack>
    facc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    face:	|      movea.l 16(sp),a0
    fad2:	|      move.l 24(a0),d0
    fad6:	|      move.l d0,-(sp)
    fad8:	|      pea 1 <_start+0x1>
    fadc:	|      moveq #12,d0
    fade:	|      add.l sp,d0
    fae0:	|      move.l d0,-(sp)
    fae2:	|      jsr 15a1e <getValueType>
    fae8:	|      lea 12(sp),sp
    faec:	|      tst.w d0
    faee:	|  ,-- bne.s faf4 <builtIn_setSceneDimensions+0x6e>
    faf0:	|  |   moveq #1,d0
    faf2:	+--|-- bra.s fb46 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    faf4:	|  '-> moveq #24,d0
    faf6:	|      add.l 16(sp),d0
    fafa:	|      move.l d0,-(sp)
    fafc:	|      jsr 163a2 <trimStack>
    fb02:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    fb04:	|      move.l (sp),d1
    fb06:	|      move.l 4(sp),d0
    fb0a:	|      move.l d1,-(sp)
    fb0c:	|      move.l d0,-(sp)
    fb0e:	|      jsr de36 <resizeBackdrop>
    fb14:	|      addq.l #8,sp
    fb16:	|      tst.w d0
    fb18:	|  ,-- beq.s fb36 <builtIn_setSceneDimensions+0xb0>
		blankScreen (0, 0, x, y);
    fb1a:	|  |   move.l (sp),d1
    fb1c:	|  |   move.l 4(sp),d0
    fb20:	|  |   move.l d1,-(sp)
    fb22:	|  |   move.l d0,-(sp)
    fb24:	|  |   clr.l -(sp)
    fb26:	|  |   clr.l -(sp)
    fb28:	|  |   jsr dc2e <blankScreen>
    fb2e:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    fb32:	|  |   moveq #2,d0
    fb34:	+--|-- bra.s fb46 <builtIn_setSceneDimensions+0xc0>
	}
	KPrintF("Out of memory creating new backdrop.");
    fb36:	|  '-> pea 1ae64 <PutChar+0x1ec4>
    fb3c:	|      jsr 184fe <KPrintF>
    fb42:	|      addq.l #4,sp
	return BR_ERROR;
    fb44:	|      moveq #1,d0
}
    fb46:	'----> addq.l #8,sp
    fb48:	       rts

0000fb4a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    fb4a:	          move.l d3,-(sp)
    fb4c:	          move.l d2,-(sp)
	KPrintF("running aimCamera\n");
    fb4e:	          pea 1ae89 <PutChar+0x1ee9>
    fb54:	          jsr 184fe <KPrintF>
    fb5a:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb5c:	          movea.l 16(sp),a0
    fb60:	          move.l 24(a0),d0
    fb64:	          move.l d0,-(sp)
    fb66:	          pea 1 <_start+0x1>
    fb6a:	          pea 1e934 <cameraY>
    fb70:	          jsr 15a1e <getValueType>
    fb76:	          lea 12(sp),sp
    fb7a:	          tst.w d0
    fb7c:	      ,-- bne.s fb84 <builtIn_aimCamera+0x3a>
    fb7e:	      |   moveq #1,d0
    fb80:	,-----|-- bra.w fe06 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fb84:	|     '-> moveq #24,d0
    fb86:	|         add.l 16(sp),d0
    fb8a:	|         move.l d0,-(sp)
    fb8c:	|         jsr 163a2 <trimStack>
    fb92:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb94:	|         movea.l 16(sp),a0
    fb98:	|         move.l 24(a0),d0
    fb9c:	|         move.l d0,-(sp)
    fb9e:	|         pea 1 <_start+0x1>
    fba2:	|         pea 1e930 <cameraX>
    fba8:	|         jsr 15a1e <getValueType>
    fbae:	|         lea 12(sp),sp
    fbb2:	|         tst.w d0
    fbb4:	|     ,-- bne.s fbbc <builtIn_aimCamera+0x72>
    fbb6:	|     |   moveq #1,d0
    fbb8:	+-----|-- bra.w fe06 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fbbc:	|     '-> moveq #24,d0
    fbbe:	|         add.l 16(sp),d0
    fbc2:	|         move.l d0,-(sp)
    fbc4:	|         jsr 163a2 <trimStack>
    fbca:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    fbcc:	|         move.l 1e930 <cameraX>,d0
    fbd2:	|         move.l d0,-(sp)
    fbd4:	|         jsr 18930 <__floatsisf>
    fbda:	|         addq.l #4,sp
    fbdc:	|         move.l d0,d2
    fbde:	|         move.l 1e7bc <winWidth>,d0
    fbe4:	|         lsr.l #1,d0
    fbe6:	|         move.l d0,-(sp)
    fbe8:	|         jsr 18958 <__floatunsisf>
    fbee:	|         addq.l #4,sp
    fbf0:	|         move.l d0,d1
    fbf2:	|         move.l 1e1fc <cameraZoom>,d0
    fbf8:	|         move.l d0,-(sp)
    fbfa:	|         move.l d1,-(sp)
    fbfc:	|         jsr 187e6 <__divsf3>
    fc02:	|         addq.l #8,sp
    fc04:	|         move.l d0,-(sp)
    fc06:	|         move.l d2,-(sp)
    fc08:	|         jsr 18c24 <__subsf3>
    fc0e:	|         addq.l #8,sp
    fc10:	|         move.l d0,-(sp)
    fc12:	|         jsr 188c8 <__fixsfsi>
    fc18:	|         addq.l #4,sp
    fc1a:	|         move.l d0,1e930 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    fc20:	|         move.l 1e934 <cameraY>,d0
    fc26:	|         move.l d0,-(sp)
    fc28:	|         jsr 18930 <__floatsisf>
    fc2e:	|         addq.l #4,sp
    fc30:	|         move.l d0,d2
    fc32:	|         move.l 1e7c0 <winHeight>,d0
    fc38:	|         lsr.l #1,d0
    fc3a:	|         move.l d0,-(sp)
    fc3c:	|         jsr 18958 <__floatunsisf>
    fc42:	|         addq.l #4,sp
    fc44:	|         move.l d0,d1
    fc46:	|         move.l 1e1fc <cameraZoom>,d0
    fc4c:	|         move.l d0,-(sp)
    fc4e:	|         move.l d1,-(sp)
    fc50:	|         jsr 187e6 <__divsf3>
    fc56:	|         addq.l #8,sp
    fc58:	|         move.l d0,-(sp)
    fc5a:	|         move.l d2,-(sp)
    fc5c:	|         jsr 18c24 <__subsf3>
    fc62:	|         addq.l #8,sp
    fc64:	|         move.l d0,-(sp)
    fc66:	|         jsr 188c8 <__fixsfsi>
    fc6c:	|         addq.l #4,sp
    fc6e:	|         move.l d0,1e934 <cameraY>

	if (cameraX < 0) cameraX = 0;
    fc74:	|         move.l 1e930 <cameraX>,d0
    fc7a:	|     ,-- bpl.s fc86 <builtIn_aimCamera+0x13c>
    fc7c:	|     |   clr.l 1e930 <cameraX>
    fc82:	|  ,--|-- bra.w fd3c <builtIn_aimCamera+0x1f2>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    fc86:	|  |  '-> move.l 1e930 <cameraX>,d0
    fc8c:	|  |      move.l d0,-(sp)
    fc8e:	|  |      jsr 18930 <__floatsisf>
    fc94:	|  |      addq.l #4,sp
    fc96:	|  |      move.l d0,d2
    fc98:	|  |      move.l 1e912 <sceneWidth>,d0
    fc9e:	|  |      move.l d0,-(sp)
    fca0:	|  |      jsr 18958 <__floatunsisf>
    fca6:	|  |      addq.l #4,sp
    fca8:	|  |      move.l d0,d3
    fcaa:	|  |      move.l 1e7bc <winWidth>,d0
    fcb0:	|  |      move.l d0,-(sp)
    fcb2:	|  |      jsr 18958 <__floatunsisf>
    fcb8:	|  |      addq.l #4,sp
    fcba:	|  |      move.l d0,d1
    fcbc:	|  |      move.l 1e1fc <cameraZoom>,d0
    fcc2:	|  |      move.l d0,-(sp)
    fcc4:	|  |      move.l d1,-(sp)
    fcc6:	|  |      jsr 187e6 <__divsf3>
    fccc:	|  |      addq.l #8,sp
    fcce:	|  |      move.l d0,-(sp)
    fcd0:	|  |      move.l d3,-(sp)
    fcd2:	|  |      jsr 18c24 <__subsf3>
    fcd8:	|  |      addq.l #8,sp
    fcda:	|  |      move.l d0,-(sp)
    fcdc:	|  |      move.l d2,-(sp)
    fcde:	|  |      jsr 18a9c <__gtsf2>
    fce4:	|  |      addq.l #8,sp
    fce6:	|  |      tst.l d0
    fce8:	|  +----- ble.s fd3c <builtIn_aimCamera+0x1f2>
    fcea:	|  |      move.l 1e912 <sceneWidth>,d0
    fcf0:	|  |      move.l d0,-(sp)
    fcf2:	|  |      jsr 18958 <__floatunsisf>
    fcf8:	|  |      addq.l #4,sp
    fcfa:	|  |      move.l d0,d2
    fcfc:	|  |      move.l 1e7bc <winWidth>,d0
    fd02:	|  |      move.l d0,-(sp)
    fd04:	|  |      jsr 18958 <__floatunsisf>
    fd0a:	|  |      addq.l #4,sp
    fd0c:	|  |      move.l d0,d1
    fd0e:	|  |      move.l 1e1fc <cameraZoom>,d0
    fd14:	|  |      move.l d0,-(sp)
    fd16:	|  |      move.l d1,-(sp)
    fd18:	|  |      jsr 187e6 <__divsf3>
    fd1e:	|  |      addq.l #8,sp
    fd20:	|  |      move.l d0,-(sp)
    fd22:	|  |      move.l d2,-(sp)
    fd24:	|  |      jsr 18c24 <__subsf3>
    fd2a:	|  |      addq.l #8,sp
    fd2c:	|  |      move.l d0,-(sp)
    fd2e:	|  |      jsr 188c8 <__fixsfsi>
    fd34:	|  |      addq.l #4,sp
    fd36:	|  |      move.l d0,1e930 <cameraX>
	if (cameraY < 0) cameraY = 0;
    fd3c:	|  '----> move.l 1e934 <cameraY>,d0
    fd42:	|     ,-- bpl.s fd4e <builtIn_aimCamera+0x204>
    fd44:	|     |   clr.l 1e934 <cameraY>
    fd4a:	|  ,--|-- bra.w fe04 <builtIn_aimCamera+0x2ba>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    fd4e:	|  |  '-> move.l 1e934 <cameraY>,d0
    fd54:	|  |      move.l d0,-(sp)
    fd56:	|  |      jsr 18930 <__floatsisf>
    fd5c:	|  |      addq.l #4,sp
    fd5e:	|  |      move.l d0,d2
    fd60:	|  |      move.l 1e916 <sceneHeight>,d0
    fd66:	|  |      move.l d0,-(sp)
    fd68:	|  |      jsr 18958 <__floatunsisf>
    fd6e:	|  |      addq.l #4,sp
    fd70:	|  |      move.l d0,d3
    fd72:	|  |      move.l 1e7c0 <winHeight>,d0
    fd78:	|  |      move.l d0,-(sp)
    fd7a:	|  |      jsr 18958 <__floatunsisf>
    fd80:	|  |      addq.l #4,sp
    fd82:	|  |      move.l d0,d1
    fd84:	|  |      move.l 1e1fc <cameraZoom>,d0
    fd8a:	|  |      move.l d0,-(sp)
    fd8c:	|  |      move.l d1,-(sp)
    fd8e:	|  |      jsr 187e6 <__divsf3>
    fd94:	|  |      addq.l #8,sp
    fd96:	|  |      move.l d0,-(sp)
    fd98:	|  |      move.l d3,-(sp)
    fd9a:	|  |      jsr 18c24 <__subsf3>
    fda0:	|  |      addq.l #8,sp
    fda2:	|  |      move.l d0,-(sp)
    fda4:	|  |      move.l d2,-(sp)
    fda6:	|  |      jsr 18a9c <__gtsf2>
    fdac:	|  |      addq.l #8,sp
    fdae:	|  |      tst.l d0
    fdb0:	|  +----- ble.s fe04 <builtIn_aimCamera+0x2ba>
    fdb2:	|  |      move.l 1e916 <sceneHeight>,d0
    fdb8:	|  |      move.l d0,-(sp)
    fdba:	|  |      jsr 18958 <__floatunsisf>
    fdc0:	|  |      addq.l #4,sp
    fdc2:	|  |      move.l d0,d2
    fdc4:	|  |      move.l 1e7c0 <winHeight>,d0
    fdca:	|  |      move.l d0,-(sp)
    fdcc:	|  |      jsr 18958 <__floatunsisf>
    fdd2:	|  |      addq.l #4,sp
    fdd4:	|  |      move.l d0,d1
    fdd6:	|  |      move.l 1e1fc <cameraZoom>,d0
    fddc:	|  |      move.l d0,-(sp)
    fdde:	|  |      move.l d1,-(sp)
    fde0:	|  |      jsr 187e6 <__divsf3>
    fde6:	|  |      addq.l #8,sp
    fde8:	|  |      move.l d0,-(sp)
    fdea:	|  |      move.l d2,-(sp)
    fdec:	|  |      jsr 18c24 <__subsf3>
    fdf2:	|  |      addq.l #8,sp
    fdf4:	|  |      move.l d0,-(sp)
    fdf6:	|  |      jsr 188c8 <__fixsfsi>
    fdfc:	|  |      addq.l #4,sp
    fdfe:	|  |      move.l d0,1e934 <cameraY>
	return BR_CONTINUE;
    fe04:	|  '----> moveq #2,d0
}
    fe06:	'-------> move.l (sp)+,d2
    fe08:	          move.l (sp)+,d3
    fe0a:	          rts

0000fe0c <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    fe0c:	       subq.l #4,sp
    fe0e:	       move.l d2,-(sp)
	KPrintF("running zoomCamera\n");
    fe10:	       pea 1ae9c <PutChar+0x1efc>
    fe16:	       jsr 184fe <KPrintF>
    fe1c:	       addq.l #4,sp
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe1e:	       movea.l 16(sp),a0
    fe22:	       move.l 24(a0),d0
    fe26:	       move.l d0,-(sp)
    fe28:	       pea 1 <_start+0x1>
    fe2c:	       moveq #12,d0
    fe2e:	       add.l sp,d0
    fe30:	       move.l d0,-(sp)
    fe32:	       jsr 15a1e <getValueType>
    fe38:	       lea 12(sp),sp
    fe3c:	       tst.w d0
    fe3e:	   ,-- bne.s fe46 <builtIn_zoomCamera+0x3a>
    fe40:	   |   moveq #1,d0
    fe42:	,--|-- bra.w 10040 <builtIn_zoomCamera+0x234>
	trimStack (&fun -> stack);
    fe46:	|  '-> moveq #24,d0
    fe48:	|      add.l 16(sp),d0
    fe4c:	|      move.l d0,-(sp)
    fe4e:	|      jsr 163a2 <trimStack>
    fe54:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    fe56:	|      move.l 1e830 <input+0xa>,d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      jsr 18930 <__floatsisf>
    fe64:	|      addq.l #4,sp
    fe66:	|      move.l d0,d1
    fe68:	|      move.l 1e1fc <cameraZoom>,d0
    fe6e:	|      move.l d0,-(sp)
    fe70:	|      move.l d1,-(sp)
    fe72:	|      jsr 189e2 <__mulsf3>
    fe78:	|      addq.l #8,sp
    fe7a:	|      move.l d0,-(sp)
    fe7c:	|      jsr 188c8 <__fixsfsi>
    fe82:	|      addq.l #4,sp
    fe84:	|      move.l d0,1e830 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    fe8a:	|      move.l 1e834 <input+0xe>,d0
    fe90:	|      move.l d0,-(sp)
    fe92:	|      jsr 18930 <__floatsisf>
    fe98:	|      addq.l #4,sp
    fe9a:	|      move.l d0,d1
    fe9c:	|      move.l 1e1fc <cameraZoom>,d0
    fea2:	|      move.l d0,-(sp)
    fea4:	|      move.l d1,-(sp)
    fea6:	|      jsr 189e2 <__mulsf3>
    feac:	|      addq.l #8,sp
    feae:	|      move.l d0,-(sp)
    feb0:	|      jsr 188c8 <__fixsfsi>
    feb6:	|      addq.l #4,sp
    feb8:	|      move.l d0,1e834 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    febe:	|      move.l 4(sp),d0
    fec2:	|      move.l d0,-(sp)
    fec4:	|      jsr 18930 <__floatsisf>
    feca:	|      addq.l #4,sp
    fecc:	|      move.l #1008981770,-(sp)
    fed2:	|      move.l d0,-(sp)
    fed4:	|      jsr 189e2 <__mulsf3>
    feda:	|      addq.l #8,sp
    fedc:	|      move.l d0,1e1fc <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    fee2:	|      move.l 1e7bc <winWidth>,d0
    fee8:	|      move.l d0,-(sp)
    feea:	|      jsr 18958 <__floatunsisf>
    fef0:	|      addq.l #4,sp
    fef2:	|      move.l d0,d1
    fef4:	|      move.l 1e1fc <cameraZoom>,d0
    fefa:	|      move.l d0,-(sp)
    fefc:	|      move.l d1,-(sp)
    fefe:	|      jsr 187e6 <__divsf3>
    ff04:	|      addq.l #8,sp
    ff06:	|      move.l d0,d2
    ff08:	|      move.l 1e912 <sceneWidth>,d0
    ff0e:	|      move.l d0,-(sp)
    ff10:	|      jsr 18958 <__floatunsisf>
    ff16:	|      addq.l #4,sp
    ff18:	|      move.l d0,-(sp)
    ff1a:	|      move.l d2,-(sp)
    ff1c:	|      jsr 18a9c <__gtsf2>
    ff22:	|      addq.l #8,sp
    ff24:	|      tst.l d0
    ff26:	|  ,-- ble.s ff5c <builtIn_zoomCamera+0x150>
    ff28:	|  |   move.l 1e7bc <winWidth>,d0
    ff2e:	|  |   move.l d0,-(sp)
    ff30:	|  |   jsr 18958 <__floatunsisf>
    ff36:	|  |   addq.l #4,sp
    ff38:	|  |   move.l d0,d2
    ff3a:	|  |   move.l 1e912 <sceneWidth>,d0
    ff40:	|  |   move.l d0,-(sp)
    ff42:	|  |   jsr 18958 <__floatunsisf>
    ff48:	|  |   addq.l #4,sp
    ff4a:	|  |   move.l d0,-(sp)
    ff4c:	|  |   move.l d2,-(sp)
    ff4e:	|  |   jsr 187e6 <__divsf3>
    ff54:	|  |   addq.l #8,sp
    ff56:	|  |   move.l d0,1e1fc <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ff5c:	|  '-> move.l 1e7c0 <winHeight>,d0
    ff62:	|      move.l d0,-(sp)
    ff64:	|      jsr 18958 <__floatunsisf>
    ff6a:	|      addq.l #4,sp
    ff6c:	|      move.l d0,d1
    ff6e:	|      move.l 1e1fc <cameraZoom>,d0
    ff74:	|      move.l d0,-(sp)
    ff76:	|      move.l d1,-(sp)
    ff78:	|      jsr 187e6 <__divsf3>
    ff7e:	|      addq.l #8,sp
    ff80:	|      move.l d0,d2
    ff82:	|      move.l 1e916 <sceneHeight>,d0
    ff88:	|      move.l d0,-(sp)
    ff8a:	|      jsr 18958 <__floatunsisf>
    ff90:	|      addq.l #4,sp
    ff92:	|      move.l d0,-(sp)
    ff94:	|      move.l d2,-(sp)
    ff96:	|      jsr 18a9c <__gtsf2>
    ff9c:	|      addq.l #8,sp
    ff9e:	|      tst.l d0
    ffa0:	|  ,-- ble.s ffd6 <builtIn_zoomCamera+0x1ca>
    ffa2:	|  |   move.l 1e7c0 <winHeight>,d0
    ffa8:	|  |   move.l d0,-(sp)
    ffaa:	|  |   jsr 18958 <__floatunsisf>
    ffb0:	|  |   addq.l #4,sp
    ffb2:	|  |   move.l d0,d2
    ffb4:	|  |   move.l 1e916 <sceneHeight>,d0
    ffba:	|  |   move.l d0,-(sp)
    ffbc:	|  |   jsr 18958 <__floatunsisf>
    ffc2:	|  |   addq.l #4,sp
    ffc4:	|  |   move.l d0,-(sp)
    ffc6:	|  |   move.l d2,-(sp)
    ffc8:	|  |   jsr 187e6 <__divsf3>
    ffce:	|  |   addq.l #8,sp
    ffd0:	|  |   move.l d0,1e1fc <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    ffd6:	|  '-> move.l 1e830 <input+0xa>,d0
    ffdc:	|      move.l d0,-(sp)
    ffde:	|      jsr 18930 <__floatsisf>
    ffe4:	|      addq.l #4,sp
    ffe6:	|      move.l d0,d1
    ffe8:	|      move.l 1e1fc <cameraZoom>,d0
    ffee:	|      move.l d0,-(sp)
    fff0:	|      move.l d1,-(sp)
    fff2:	|      jsr 187e6 <__divsf3>
    fff8:	|      addq.l #8,sp
    fffa:	|      move.l d0,-(sp)
    fffc:	|      jsr 188c8 <__fixsfsi>
   10002:	|      addq.l #4,sp
   10004:	|      move.l d0,1e830 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
   1000a:	|      move.l 1e834 <input+0xe>,d0
   10010:	|      move.l d0,-(sp)
   10012:	|      jsr 18930 <__floatsisf>
   10018:	|      addq.l #4,sp
   1001a:	|      move.l d0,d1
   1001c:	|      move.l 1e1fc <cameraZoom>,d0
   10022:	|      move.l d0,-(sp)
   10024:	|      move.l d1,-(sp)
   10026:	|      jsr 187e6 <__divsf3>
   1002c:	|      addq.l #8,sp
   1002e:	|      move.l d0,-(sp)
   10030:	|      jsr 188c8 <__fixsfsi>
   10036:	|      addq.l #4,sp
   10038:	|      move.l d0,1e834 <input+0xe>

	return BR_CONTINUE;
   1003e:	|      moveq #2,d0
}
   10040:	'----> move.l (sp)+,d2
   10042:	       addq.l #4,sp
   10044:	       rts

00010046 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
   10046:	             subq.l #4,sp
	KPrintF("running pickOne\n");
   10048:	             pea 1aeb0 <PutChar+0x1f10>
   1004e:	             jsr 184fe <KPrintF>
   10054:	             addq.l #4,sp
	UNUSEDALL
	if (! numParams) {
   10056:	             tst.l 8(sp)
   1005a:	         ,-- bne.s 1006e <builtIn_pickOne+0x28>
		KPrintF ("Built-in function should have at least 1 parameter");
   1005c:	         |   pea 1aec1 <PutChar+0x1f21>
   10062:	         |   jsr 184fe <KPrintF>
   10068:	         |   addq.l #4,sp
		return BR_ERROR;
   1006a:	         |   moveq #1,d0
   1006c:	,--------|-- bra.s 100ce <builtIn_pickOne+0x88>
	}
	int i = rand() % numParams;
   1006e:	|        '-> jsr 170be <rand>
   10074:	|            move.l d0,d1
   10076:	|            move.l 8(sp),d0
   1007a:	|            move.l d0,-(sp)
   1007c:	|            move.l d1,-(sp)
   1007e:	|            jsr 18f64 <__umodsi3>
   10084:	|            addq.l #8,sp
   10086:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
   10088:	|     ,----- bra.s 100bc <builtIn_pickOne+0x76>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
   1008a:	|  ,--|----> move.l (sp),d0
   1008c:	|  |  |      cmp.l 8(sp),d0
   10090:	|  |  |  ,-- bne.s 100ac <builtIn_pickOne+0x66>
   10092:	|  |  |  |   moveq #28,d0
   10094:	|  |  |  |   add.l 12(sp),d0
   10098:	|  |  |  |   movea.l 12(sp),a0
   1009c:	|  |  |  |   move.l 24(a0),d1
   100a0:	|  |  |  |   move.l d0,-(sp)
   100a2:	|  |  |  |   move.l d1,-(sp)
   100a4:	|  |  |  |   jsr 15ed8 <copyVariable>
   100aa:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
   100ac:	|  |  |  '-> moveq #24,d0
   100ae:	|  |  |      add.l 12(sp),d0
   100b2:	|  |  |      move.l d0,-(sp)
   100b4:	|  |  |      jsr 163a2 <trimStack>
   100ba:	|  |  |      addq.l #4,sp
	while (numParams --) {
   100bc:	|  |  '----> move.l 8(sp),d0
   100c0:	|  |         move.l d0,d1
   100c2:	|  |         subq.l #1,d1
   100c4:	|  |         move.l d1,8(sp)
   100c8:	|  |         tst.l d0
   100ca:	|  '-------- bne.s 1008a <builtIn_pickOne+0x44>
	}
	return BR_CONTINUE;
   100cc:	|            moveq #2,d0
}
   100ce:	'----------> addq.l #4,sp
   100d0:	             rts

000100d2 <builtIn_substring>:

builtIn(substring)
{
   100d2:	       lea -40(sp),sp
   100d6:	       move.l a6,-(sp)
   100d8:	       move.l d2,-(sp)
	KPrintF("running substring\n");
   100da:	       pea 1aef4 <PutChar+0x1f54>
   100e0:	       jsr 184fe <KPrintF>
   100e6:	       addq.l #4,sp
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100e8:	       movea.l 56(sp),a0
   100ec:	       move.l 24(a0),d0
   100f0:	       move.l d0,-(sp)
   100f2:	       pea 1 <_start+0x1>
   100f6:	       lea 16(sp),a0
   100fa:	       move.l a0,-(sp)
   100fc:	       jsr 15a1e <getValueType>
   10102:	       lea 12(sp),sp
   10106:	       tst.w d0
   10108:	   ,-- bne.s 10110 <builtIn_substring+0x3e>
   1010a:	   |   moveq #1,d0
   1010c:	,--|-- bra.w 10288 <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   10110:	|  '-> moveq #24,d0
   10112:	|      add.l 56(sp),d0
   10116:	|      move.l d0,-(sp)
   10118:	|      jsr 163a2 <trimStack>
   1011e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10120:	|      movea.l 56(sp),a0
   10124:	|      move.l 24(a0),d0
   10128:	|      move.l d0,-(sp)
   1012a:	|      pea 1 <_start+0x1>
   1012e:	|      lea 20(sp),a0
   10132:	|      move.l a0,-(sp)
   10134:	|      jsr 15a1e <getValueType>
   1013a:	|      lea 12(sp),sp
   1013e:	|      tst.w d0
   10140:	|  ,-- bne.s 10148 <builtIn_substring+0x76>
   10142:	|  |   moveq #1,d0
   10144:	+--|-- bra.w 10288 <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   10148:	|  '-> moveq #24,d0
   1014a:	|      add.l 56(sp),d0
   1014e:	|      move.l d0,-(sp)
   10150:	|      jsr 163a2 <trimStack>
   10156:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
   10158:	|      movea.l 56(sp),a0
   1015c:	|      move.l 24(a0),d0
   10160:	|      move.l d0,-(sp)
   10162:	|      jsr 15ff4 <getTextFromAnyVar>
   10168:	|      addq.l #4,sp
   1016a:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
   1016e:	|      moveq #24,d0
   10170:	|      add.l 56(sp),d0
   10174:	|      move.l d0,-(sp)
   10176:	|      jsr 163a2 <trimStack>
   1017c:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
   1017e:	|      move.l 44(sp),-(sp)
   10182:	|      jsr 14f0a <strlen>
   10188:	|      addq.l #4,sp
   1018a:	|      move.l d0,d1
   1018c:	|      move.l 12(sp),d0
   10190:	|      movea.l d0,a0
   10192:	|      move.l 8(sp),d0
   10196:	|      add.l a0,d0
   10198:	|      cmp.l d1,d0
   1019a:	|  ,-- bls.s 101d0 <builtIn_substring+0xfe>
        length = strlen(wholeString) - start;
   1019c:	|  |   move.l 44(sp),-(sp)
   101a0:	|  |   jsr 14f0a <strlen>
   101a6:	|  |   addq.l #4,sp
   101a8:	|  |   move.l d0,d1
   101aa:	|  |   move.l 12(sp),d0
   101ae:	|  |   sub.l d0,d1
   101b0:	|  |   move.l d1,d0
   101b2:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
   101b6:	|  |   move.l 44(sp),-(sp)
   101ba:	|  |   jsr 14f0a <strlen>
   101c0:	|  |   addq.l #4,sp
   101c2:	|  |   move.l d0,d1
   101c4:	|  |   move.l 12(sp),d0
   101c8:	|  |   cmp.l d1,d0
   101ca:	|  +-- bls.s 101d0 <builtIn_substring+0xfe>
            start = 0;
   101cc:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
   101d0:	|  '-> move.l 8(sp),d0
   101d4:	|  ,-- bpl.s 101da <builtIn_substring+0x108>
        length = 0;
   101d6:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
   101da:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
   101e0:	|      move.l 12(sp),d1
   101e4:	|      move.l 8(sp),d0
   101e8:	|      move.l d1,d2
   101ea:	|      add.l d0,d2
   101ec:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
   101f0:	|      move.l 36(sp),d0
   101f4:	|      sub.l 40(sp),d0
   101f8:	|      addq.l #1,d0
   101fa:	|      move.l d0,32(sp)
   101fe:	|      clr.l 28(sp)
   10202:	|      move.l 1e876 <SysBase>,d0
   10208:	|      movea.l d0,a6
   1020a:	|      move.l 32(sp),d0
   1020e:	|      move.l 28(sp),d1
   10212:	|      jsr -684(a6)
   10216:	|      move.l d0,24(sp)
   1021a:	|      move.l 24(sp),d0
   1021e:	|      move.l d0,20(sp)
    if (!newString) {
   10222:	|  ,-- bne.s 10228 <builtIn_substring+0x156>
        return BR_ERROR;
   10224:	|  |   moveq #1,d0
   10226:	+--|-- bra.s 10288 <builtIn_substring+0x1b6>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
   10228:	|  '-> move.l 36(sp),d0
   1022c:	|      sub.l 40(sp),d0
   10230:	|      move.l d0,d1
   10232:	|      move.l 40(sp),d0
   10236:	|      add.l 44(sp),d0
   1023a:	|      move.l d1,-(sp)
   1023c:	|      move.l d0,-(sp)
   1023e:	|      move.l 28(sp),-(sp)
   10242:	|      jsr 184b2 <memcpy>
   10248:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
   1024c:	|      move.l 36(sp),d0
   10250:	|      sub.l 40(sp),d0
   10254:	|      movea.l 20(sp),a0
   10258:	|      adda.l d0,a0
   1025a:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
   1025c:	|      moveq #28,d0
   1025e:	|      add.l 56(sp),d0
   10262:	|      move.l 20(sp),-(sp)
   10266:	|      move.l d0,-(sp)
   10268:	|      jsr 15c40 <makeTextVar>
   1026e:	|      addq.l #8,sp
    FreeVec(newString);
   10270:	|      move.l 20(sp),16(sp)
   10276:	|      move.l 1e876 <SysBase>,d0
   1027c:	|      movea.l d0,a6
   1027e:	|      movea.l 16(sp),a1
   10282:	|      jsr -690(a6)
    return BR_CONTINUE;
   10286:	|      moveq #2,d0
}
   10288:	'----> move.l (sp)+,d2
   1028a:	       movea.l (sp)+,a6
   1028c:	       lea 40(sp),sp
   10290:	       rts

00010292 <builtIn_stringLength>:

builtIn(stringLength)
{
   10292:	subq.l #8,sp
   10294:	move.l a6,-(sp)
	KPrintF("running stringLength\n");
   10296:	pea 1af07 <PutChar+0x1f67>
   1029c:	jsr 184fe <KPrintF>
   102a2:	addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   102a4:	movea.l 20(sp),a0
   102a8:	move.l 24(a0),d0
   102ac:	move.l d0,-(sp)
   102ae:	jsr 15ff4 <getTextFromAnyVar>
   102b4:	addq.l #4,sp
   102b6:	move.l d0,8(sp)
	trimStack (&fun -> stack);
   102ba:	moveq #24,d0
   102bc:	add.l 20(sp),d0
   102c0:	move.l d0,-(sp)
   102c2:	jsr 163a2 <trimStack>
   102c8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
   102ca:	move.l 8(sp),-(sp)
   102ce:	jsr 14f0a <strlen>
   102d4:	addq.l #4,sp
   102d6:	move.l d0,d1
   102d8:	moveq #28,d0
   102da:	add.l 20(sp),d0
   102de:	move.l d1,-(sp)
   102e0:	pea 1 <_start+0x1>
   102e4:	move.l d0,-(sp)
   102e6:	jsr 16310 <setVariable>
   102ec:	lea 12(sp),sp
	FreeVec(newText);
   102f0:	move.l 8(sp),4(sp)
   102f6:	move.l 1e876 <SysBase>,d0
   102fc:	movea.l d0,a6
   102fe:	movea.l 4(sp),a1
   10302:	jsr -690(a6)
	return BR_CONTINUE;
   10306:	moveq #2,d0
}
   10308:	movea.l (sp)+,a6
   1030a:	addq.l #8,sp
   1030c:	rts

0001030e <builtIn_newStack>:

builtIn(newStack)
{
   1030e:	             lea -12(sp),sp
   10312:	             move.l a6,-(sp)
	KPrintF("running newStack\n");
   10314:	             pea 1af1d <PutChar+0x1f7d>
   1031a:	             jsr 184fe <KPrintF>
   10320:	             addq.l #4,sp
    UNUSEDALL
    unlinkVar(&fun->reg);
   10322:	             moveq #28,d0
   10324:	             add.l 24(sp),d0
   10328:	             move.l d0,-(sp)
   1032a:	             jsr 15c6c <unlinkVar>
   10330:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
   10332:	             movea.l 24(sp),a0
   10336:	             moveq #6,d0
   10338:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1033c:	             moveq #12,d1
   1033e:	             move.l d1,12(sp)
   10342:	             clr.l 8(sp)
   10346:	             move.l 1e876 <SysBase>,d0
   1034c:	             movea.l d0,a6
   1034e:	             move.l 12(sp),d0
   10352:	             move.l 8(sp),d1
   10356:	             jsr -684(a6)
   1035a:	             move.l d0,4(sp)
   1035e:	             move.l 4(sp),d0
   10362:	             movea.l 24(sp),a0
   10366:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
   1036a:	             movea.l 24(sp),a0
   1036e:	             move.l 32(a0),d0
   10372:	         ,-- bne.s 1037a <builtIn_newStack+0x6c>
   10374:	         |   moveq #1,d0
   10376:	,--------|-- bra.w 1040c <builtIn_newStack+0xfe>
    fun->reg.varData.theStack->first = NULL;
   1037a:	|        '-> movea.l 24(sp),a0
   1037e:	|            movea.l 32(a0),a0
   10382:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
   10384:	|            movea.l 24(sp),a0
   10388:	|            movea.l 32(a0),a0
   1038c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
   10390:	|            movea.l 24(sp),a0
   10394:	|            movea.l 32(a0),a0
   10398:	|            moveq #1,d0
   1039a:	|            move.l d0,8(a0)
    
    while (numParams--) {
   1039e:	|     ,----- bra.s 103fa <builtIn_newStack+0xec>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
   103a0:	|  ,--|----> movea.l 24(sp),a0
   103a4:	|  |  |      move.l 32(a0),d0
   103a8:	|  |  |      move.l d0,d1
   103aa:	|  |  |      movea.l 24(sp),a0
   103ae:	|  |  |      move.l 24(a0),d0
   103b2:	|  |  |      move.l d1,-(sp)
   103b4:	|  |  |      move.l d0,-(sp)
   103b6:	|  |  |      jsr 1525a <addVarToStack>
   103bc:	|  |  |      addq.l #8,sp
   103be:	|  |  |      tst.w d0
   103c0:	|  |  |  ,-- bne.s 103c6 <builtIn_newStack+0xb8>
   103c2:	|  |  |  |   moveq #1,d0
   103c4:	+--|--|--|-- bra.s 1040c <builtIn_newStack+0xfe>
        if (fun->reg.varData.theStack->last == NULL) {
   103c6:	|  |  |  '-> movea.l 24(sp),a0
   103ca:	|  |  |      movea.l 32(a0),a0
   103ce:	|  |  |      move.l 4(a0),d0
   103d2:	|  |  |  ,-- bne.s 103ea <builtIn_newStack+0xdc>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
   103d4:	|  |  |  |   movea.l 24(sp),a0
   103d8:	|  |  |  |   movea.l 32(a0),a1
   103dc:	|  |  |  |   movea.l 24(sp),a0
   103e0:	|  |  |  |   movea.l 32(a0),a0
   103e4:	|  |  |  |   move.l (a1),d0
   103e6:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
   103ea:	|  |  |  '-> moveq #24,d0
   103ec:	|  |  |      add.l 24(sp),d0
   103f0:	|  |  |      move.l d0,-(sp)
   103f2:	|  |  |      jsr 163a2 <trimStack>
   103f8:	|  |  |      addq.l #4,sp
    while (numParams--) {
   103fa:	|  |  '----> move.l 20(sp),d0
   103fe:	|  |         move.l d0,d1
   10400:	|  |         subq.l #1,d1
   10402:	|  |         move.l d1,20(sp)
   10406:	|  |         tst.l d0
   10408:	|  '-------- bne.s 103a0 <builtIn_newStack+0x92>
    }
    return BR_CONTINUE;
   1040a:	|            moveq #2,d0
}
   1040c:	'----------> movea.l (sp)+,a6
   1040e:	             lea 12(sp),sp
   10412:	             rts

00010414 <builtIn_stackSize>:
// wait is exactly the same function, but limited to 2 parameters
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	KPrintF("running stackSize\n");
   10414:	          pea 1af2f <PutChar+0x1f8f>
   1041a:	          jsr 184fe <KPrintF>
   10420:	          addq.l #4,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   10422:	          movea.l 8(sp),a0
   10426:	          movea.l 24(a0),a0
   1042a:	          move.l (a0),d0
   1042c:	          moveq #6,d1
   1042e:	          cmp.l d0,d1
   10430:	      ,-- beq.s 1044c <builtIn_stackSize+0x38>
   10432:	      |   moveq #10,d1
   10434:	      |   cmp.l d0,d1
   10436:	   ,--|-- beq.s 10490 <builtIn_stackSize+0x7c>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
   10438:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
   1043a:	   |  |   pea 1af42 <PutChar+0x1fa2>
   10440:	   |  |   jsr 184fe <KPrintF>
   10446:	   |  |   addq.l #4,sp
	return BR_ERROR;
   10448:	   |  |   moveq #1,d0
   1044a:	,--|--|-- bra.s 104ca <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
   1044c:	|  |  '-> movea.l 8(sp),a0
   10450:	|  |      movea.l 24(a0),a0
   10454:	|  |      move.l 4(a0),d0
   10458:	|  |      move.l d0,-(sp)
   1045a:	|  |      jsr 1637e <stackSize>
   10460:	|  |      addq.l #4,sp
   10462:	|  |      move.l d0,d1
   10464:	|  |      moveq #28,d0
   10466:	|  |      add.l 8(sp),d0
   1046a:	|  |      move.l d1,-(sp)
   1046c:	|  |      pea 1 <_start+0x1>
   10470:	|  |      move.l d0,-(sp)
   10472:	|  |      jsr 16310 <setVariable>
   10478:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
   1047c:	|  |      moveq #24,d0
   1047e:	|  |      add.l 8(sp),d0
   10482:	|  |      move.l d0,-(sp)
   10484:	|  |      jsr 163a2 <trimStack>
   1048a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
   1048c:	|  |      moveq #2,d0
   1048e:	+--|----- bra.s 104ca <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
   10490:	|  '----> movea.l 8(sp),a0
   10494:	|         movea.l 24(a0),a0
   10498:	|         movea.l 4(a0),a0
   1049c:	|         move.l 4(a0),d1
   104a0:	|         moveq #28,d0
   104a2:	|         add.l 8(sp),d0
   104a6:	|         move.l d1,-(sp)
   104a8:	|         pea 1 <_start+0x1>
   104ac:	|         move.l d0,-(sp)
   104ae:	|         jsr 16310 <setVariable>
   104b4:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
   104b8:	|         moveq #24,d0
   104ba:	|         add.l 8(sp),d0
   104be:	|         move.l d0,-(sp)
   104c0:	|         jsr 163a2 <trimStack>
   104c6:	|         addq.l #4,sp
			return BR_CONTINUE;
   104c8:	|         moveq #2,d0
}
   104ca:	'-------> rts

000104cc <builtIn_copyStack>:

builtIn(copyStack)
{
	KPrintF("running copyStack\n");
   104cc:	       pea 1af6b <PutChar+0x1fcb>
   104d2:	       jsr 184fe <KPrintF>
   104d8:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   104da:	       movea.l 8(sp),a0
   104de:	       movea.l 24(a0),a0
   104e2:	       move.l (a0),d0
   104e4:	       moveq #6,d1
   104e6:	       cmp.l d0,d1
   104e8:	   ,-- beq.s 104fc <builtIn_copyStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   104ea:	   |   pea 1af7e <PutChar+0x1fde>
   104f0:	   |   jsr 184fe <KPrintF>
   104f6:	   |   addq.l #4,sp
		return BR_ERROR;
   104f8:	   |   moveq #1,d0
   104fa:	,--|-- bra.s 10530 <builtIn_copyStack+0x64>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
   104fc:	|  '-> moveq #28,d0
   104fe:	|      add.l 8(sp),d0
   10502:	|      movea.l 8(sp),a0
   10506:	|      move.l 24(a0),d1
   1050a:	|      move.l d0,-(sp)
   1050c:	|      move.l d1,-(sp)
   1050e:	|      jsr 15524 <copyStack>
   10514:	|      addq.l #8,sp
   10516:	|      tst.w d0
   10518:	|  ,-- bne.s 1051e <builtIn_copyStack+0x52>
   1051a:	|  |   moveq #1,d0
   1051c:	+--|-- bra.s 10530 <builtIn_copyStack+0x64>
	trimStack (&fun -> stack);
   1051e:	|  '-> moveq #24,d0
   10520:	|      add.l 8(sp),d0
   10524:	|      move.l d0,-(sp)
   10526:	|      jsr 163a2 <trimStack>
   1052c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1052e:	|      moveq #2,d0
}
   10530:	'----> rts

00010532 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	KPrintF("running pushToStack\n");
   10532:	       pea 1af97 <PutChar+0x1ff7>
   10538:	       jsr 184fe <KPrintF>
   1053e:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10540:	       movea.l 8(sp),a0
   10544:	       movea.l 24(a0),a0
   10548:	       movea.l 8(a0),a0
   1054c:	       move.l (a0),d0
   1054e:	       moveq #6,d1
   10550:	       cmp.l d0,d1
   10552:	   ,-- beq.s 10568 <builtIn_pushToStack+0x36>
		KPrintF("Parameter isn't a stack");
   10554:	   |   pea 1afac <PutChar+0x200c>
   1055a:	   |   jsr 184fe <KPrintF>
   10560:	   |   addq.l #4,sp
		return BR_ERROR;
   10562:	   |   moveq #1,d0
   10564:	,--|-- bra.w 105f6 <builtIn_pushToStack+0xc4>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   10568:	|  '-> movea.l 8(sp),a0
   1056c:	|      movea.l 24(a0),a0
   10570:	|      movea.l 8(a0),a0
   10574:	|      move.l 4(a0),d0
   10578:	|      move.l d0,d1
   1057a:	|      movea.l 8(sp),a0
   1057e:	|      move.l 24(a0),d0
   10582:	|      move.l d1,-(sp)
   10584:	|      move.l d0,-(sp)
   10586:	|      jsr 1525a <addVarToStack>
   1058c:	|      addq.l #8,sp
   1058e:	|      tst.w d0
   10590:	|  ,-- bne.s 10596 <builtIn_pushToStack+0x64>
		return BR_ERROR;
   10592:	|  |   moveq #1,d0
   10594:	+--|-- bra.s 105f6 <builtIn_pushToStack+0xc4>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
   10596:	|  '-> movea.l 8(sp),a0
   1059a:	|      movea.l 24(a0),a0
   1059e:	|      movea.l 8(a0),a0
   105a2:	|      movea.l 4(a0),a0
   105a6:	|      movea.l (a0),a0
   105a8:	|      move.l 8(a0),d0
   105ac:	|  ,-- bne.s 105d4 <builtIn_pushToStack+0xa2>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   105ae:	|  |   movea.l 8(sp),a0
   105b2:	|  |   movea.l 24(a0),a0
   105b6:	|  |   movea.l 8(a0),a0
   105ba:	|  |   movea.l 4(a0),a1
   105be:	|  |   movea.l 8(sp),a0
   105c2:	|  |   movea.l 24(a0),a0
   105c6:	|  |   movea.l 8(a0),a0
   105ca:	|  |   movea.l 4(a0),a0
   105ce:	|  |   move.l (a1),d0
   105d0:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
   105d4:	|  '-> moveq #24,d0
   105d6:	|      add.l 8(sp),d0
   105da:	|      move.l d0,-(sp)
   105dc:	|      jsr 163a2 <trimStack>
   105e2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   105e4:	|      moveq #24,d0
   105e6:	|      add.l 8(sp),d0
   105ea:	|      move.l d0,-(sp)
   105ec:	|      jsr 163a2 <trimStack>
   105f2:	|      addq.l #4,sp
	return BR_CONTINUE;
   105f4:	|      moveq #2,d0
}
   105f6:	'----> rts

000105f8 <builtIn_enqueue>:

builtIn(enqueue)
{
	KPrintF("running enqueue\n");
   105f8:	             pea 1afc4 <PutChar+0x2024>
   105fe:	             jsr 184fe <KPrintF>
   10604:	             addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10606:	             movea.l 8(sp),a0
   1060a:	             movea.l 24(a0),a0
   1060e:	             movea.l 8(a0),a0
   10612:	             move.l (a0),d0
   10614:	             moveq #6,d1
   10616:	             cmp.l d0,d1
   10618:	         ,-- beq.s 1062e <builtIn_enqueue+0x36>
		KPrintF ("Parameter isn't a stack");
   1061a:	         |   pea 1afac <PutChar+0x200c>
   10620:	         |   jsr 184fe <KPrintF>
   10626:	         |   addq.l #4,sp
		return BR_ERROR;
   10628:	         |   moveq #1,d0
   1062a:	,--------|-- bra.w 1071c <builtIn_enqueue+0x124>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
   1062e:	|        '-> movea.l 8(sp),a0
   10632:	|            movea.l 24(a0),a0
   10636:	|            movea.l 8(a0),a0
   1063a:	|            movea.l 4(a0),a0
   1063e:	|            move.l (a0),d0
   10640:	|     ,----- bne.s 1069a <builtIn_enqueue+0xa2>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   10642:	|     |      movea.l 8(sp),a0
   10646:	|     |      movea.l 24(a0),a0
   1064a:	|     |      movea.l 8(a0),a0
   1064e:	|     |      move.l 4(a0),d0
   10652:	|     |      move.l d0,d1
   10654:	|     |      movea.l 8(sp),a0
   10658:	|     |      move.l 24(a0),d0
   1065c:	|     |      move.l d1,-(sp)
   1065e:	|     |      move.l d0,-(sp)
   10660:	|     |      jsr 1525a <addVarToStack>
   10666:	|     |      addq.l #8,sp
   10668:	|     |      tst.w d0
   1066a:	|     |  ,-- bne.s 10672 <builtIn_enqueue+0x7a>
			return BR_ERROR;
   1066c:	|     |  |   moveq #1,d0
   1066e:	+-----|--|-- bra.w 1071c <builtIn_enqueue+0x124>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   10672:	|     |  '-> movea.l 8(sp),a0
   10676:	|     |      movea.l 24(a0),a0
   1067a:	|     |      movea.l 8(a0),a0
   1067e:	|     |      movea.l 4(a0),a1
   10682:	|     |      movea.l 8(sp),a0
   10686:	|     |      movea.l 24(a0),a0
   1068a:	|     |      movea.l 8(a0),a0
   1068e:	|     |      movea.l 4(a0),a0
   10692:	|     |      move.l (a1),d0
   10694:	|     |      move.l d0,4(a0)
   10698:	|  ,--|----- bra.s 106fa <builtIn_enqueue+0x102>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
   1069a:	|  |  '----> movea.l 8(sp),a0
   1069e:	|  |         movea.l 24(a0),a0
   106a2:	|  |         movea.l 8(a0),a0
   106a6:	|  |         movea.l 4(a0),a0
   106aa:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
   106ae:	|  |         move.l d0,d1
   106b0:	|  |         addq.l #8,d1
   106b2:	|  |         movea.l 8(sp),a0
   106b6:	|  |         move.l 24(a0),d0
   106ba:	|  |         move.l d1,-(sp)
   106bc:	|  |         move.l d0,-(sp)
   106be:	|  |         jsr 1525a <addVarToStack>
   106c4:	|  |         addq.l #8,sp
   106c6:	|  |         tst.w d0
   106c8:	|  |     ,-- bne.s 106ce <builtIn_enqueue+0xd6>
			return BR_ERROR;
   106ca:	|  |     |   moveq #1,d0
   106cc:	+--|-----|-- bra.s 1071c <builtIn_enqueue+0x124>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
   106ce:	|  |     '-> movea.l 8(sp),a0
   106d2:	|  |         movea.l 24(a0),a0
   106d6:	|  |         movea.l 8(a0),a0
   106da:	|  |         movea.l 4(a0),a0
   106de:	|  |         movea.l 4(a0),a1
   106e2:	|  |         movea.l 8(sp),a0
   106e6:	|  |         movea.l 24(a0),a0
   106ea:	|  |         movea.l 8(a0),a0
   106ee:	|  |         movea.l 4(a0),a0
   106f2:	|  |         move.l 8(a1),d0
   106f6:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
   106fa:	|  '-------> moveq #24,d0
   106fc:	|            add.l 8(sp),d0
   10700:	|            move.l d0,-(sp)
   10702:	|            jsr 163a2 <trimStack>
   10708:	|            addq.l #4,sp
	trimStack (&fun -> stack);
   1070a:	|            moveq #24,d0
   1070c:	|            add.l 8(sp),d0
   10710:	|            move.l d0,-(sp)
   10712:	|            jsr 163a2 <trimStack>
   10718:	|            addq.l #4,sp
	return BR_CONTINUE;
   1071a:	|            moveq #2,d0
}
   1071c:	'----------> rts

0001071e <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
   1071e:	       move.l a2,-(sp)
	KPrintF("running deleteFromStack\n");
   10720:	       pea 1afd5 <PutChar+0x2035>
   10726:	       jsr 184fe <KPrintF>
   1072c:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   1072e:	       movea.l 12(sp),a0
   10732:	       movea.l 24(a0),a0
   10736:	       movea.l 8(a0),a0
   1073a:	       move.l (a0),d0
   1073c:	       moveq #6,d1
   1073e:	       cmp.l d0,d1
   10740:	   ,-- beq.s 10756 <builtIn_deleteFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   10742:	   |   pea 1af7e <PutChar+0x1fde>
   10748:	   |   jsr 184fe <KPrintF>
   1074e:	   |   addq.l #4,sp
		return BR_ERROR;
   10750:	   |   moveq #1,d0
   10752:	,--|-- bra.w 107ec <builtIn_deleteFromStack+0xce>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
   10756:	|  '-> movea.l 12(sp),a0
   1075a:	|      movea.l 24(a0),a0
   1075e:	|      movea.l 8(a0),a0
   10762:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10766:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10768:	|      movea.l 12(sp),a0
   1076c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10770:	|      clr.l -(sp)
   10772:	|      move.l d1,-(sp)
   10774:	|      move.l d0,-(sp)
   10776:	|      jsr 155fa <deleteVarFromStack>
   1077c:	|      lea 12(sp),sp
   10780:	|      move.l d0,d1
   10782:	|      moveq #28,d0
   10784:	|      add.l 12(sp),d0
   10788:	|      move.l d1,-(sp)
   1078a:	|      pea 1 <_start+0x1>
   1078e:	|      move.l d0,-(sp)
   10790:	|      jsr 16310 <setVariable>
   10796:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   1079a:	|      movea.l 12(sp),a0
   1079e:	|      movea.l 24(a0),a0
   107a2:	|      movea.l 8(a0),a0
   107a6:	|      movea.l 4(a0),a0
   107aa:	|      move.l (a0),d0
   107ac:	|      movea.l 12(sp),a0
   107b0:	|      movea.l 24(a0),a0
   107b4:	|      movea.l 8(a0),a0
   107b8:	|      movea.l 4(a0),a2
   107bc:	|      move.l d0,-(sp)
   107be:	|      jsr 1635a <stackFindLast>
   107c4:	|      addq.l #4,sp
   107c6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   107ca:	|      moveq #24,d0
   107cc:	|      add.l 12(sp),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      jsr 163a2 <trimStack>
   107d8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   107da:	|      moveq #24,d0
   107dc:	|      add.l 12(sp),d0
   107e0:	|      move.l d0,-(sp)
   107e2:	|      jsr 163a2 <trimStack>
   107e8:	|      addq.l #4,sp
	return BR_CONTINUE;
   107ea:	|      moveq #2,d0
}
   107ec:	'----> movea.l (sp)+,a2
   107ee:	       rts

000107f0 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   107f0:	       move.l a2,-(sp)
	KPrintF("running deleteAllFromStack\n");
   107f2:	       pea 1afee <PutChar+0x204e>
   107f8:	       jsr 184fe <KPrintF>
   107fe:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10800:	       movea.l 12(sp),a0
   10804:	       movea.l 24(a0),a0
   10808:	       movea.l 8(a0),a0
   1080c:	       move.l (a0),d0
   1080e:	       moveq #6,d1
   10810:	       cmp.l d0,d1
   10812:	   ,-- beq.s 10828 <builtIn_deleteAllFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   10814:	   |   pea 1af7e <PutChar+0x1fde>
   1081a:	   |   jsr 184fe <KPrintF>
   10820:	   |   addq.l #4,sp
		return BR_ERROR;
   10822:	   |   moveq #1,d0
   10824:	,--|-- bra.w 108c0 <builtIn_deleteAllFromStack+0xd0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   10828:	|  '-> movea.l 12(sp),a0
   1082c:	|      movea.l 24(a0),a0
   10830:	|      movea.l 8(a0),a0
   10834:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10838:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   1083a:	|      movea.l 12(sp),a0
   1083e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10842:	|      pea 1 <_start+0x1>
   10846:	|      move.l d1,-(sp)
   10848:	|      move.l d0,-(sp)
   1084a:	|      jsr 155fa <deleteVarFromStack>
   10850:	|      lea 12(sp),sp
   10854:	|      move.l d0,d1
   10856:	|      moveq #28,d0
   10858:	|      add.l 12(sp),d0
   1085c:	|      move.l d1,-(sp)
   1085e:	|      pea 1 <_start+0x1>
   10862:	|      move.l d0,-(sp)
   10864:	|      jsr 16310 <setVariable>
   1086a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   1086e:	|      movea.l 12(sp),a0
   10872:	|      movea.l 24(a0),a0
   10876:	|      movea.l 8(a0),a0
   1087a:	|      movea.l 4(a0),a0
   1087e:	|      move.l (a0),d0
   10880:	|      movea.l 12(sp),a0
   10884:	|      movea.l 24(a0),a0
   10888:	|      movea.l 8(a0),a0
   1088c:	|      movea.l 4(a0),a2
   10890:	|      move.l d0,-(sp)
   10892:	|      jsr 1635a <stackFindLast>
   10898:	|      addq.l #4,sp
   1089a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   1089e:	|      moveq #24,d0
   108a0:	|      add.l 12(sp),d0
   108a4:	|      move.l d0,-(sp)
   108a6:	|      jsr 163a2 <trimStack>
   108ac:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   108ae:	|      moveq #24,d0
   108b0:	|      add.l 12(sp),d0
   108b4:	|      move.l d0,-(sp)
   108b6:	|      jsr 163a2 <trimStack>
   108bc:	|      addq.l #4,sp
	return BR_CONTINUE;
   108be:	|      moveq #2,d0
} 
   108c0:	'----> movea.l (sp)+,a2
   108c2:	       rts

000108c4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	KPrintF("running popFromStack\n");
   108c4:	       pea 1b00a <PutChar+0x206a>
   108ca:	       jsr 184fe <KPrintF>
   108d0:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   108d2:	       movea.l 8(sp),a0
   108d6:	       movea.l 24(a0),a0
   108da:	       move.l (a0),d0
   108dc:	       moveq #6,d1
   108de:	       cmp.l d0,d1
   108e0:	   ,-- beq.s 108f4 <builtIn_popFromStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   108e2:	   |   pea 1af7e <PutChar+0x1fde>
   108e8:	   |   jsr 184fe <KPrintF>
   108ee:	   |   addq.l #4,sp
		return BR_ERROR;
   108f0:	   |   moveq #1,d0
   108f2:	,--|-- bra.s 1095e <builtIn_popFromStack+0x9a>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   108f4:	|  '-> movea.l 8(sp),a0
   108f8:	|      movea.l 24(a0),a0
   108fc:	|      movea.l 4(a0),a0
   10900:	|      move.l (a0),d0
   10902:	|  ,-- bne.s 10916 <builtIn_popFromStack+0x52>
		KPrintF ("The stack's empty.");
   10904:	|  |   pea 1b020 <PutChar+0x2080>
   1090a:	|  |   jsr 184fe <KPrintF>
   10910:	|  |   addq.l #4,sp
		return BR_ERROR;
   10912:	|  |   moveq #1,d0
   10914:	+--|-- bra.s 1095e <builtIn_popFromStack+0x9a>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10916:	|  '-> moveq #28,d0
   10918:	|      add.l 8(sp),d0
   1091c:	|      movea.l 8(sp),a0
   10920:	|      movea.l 24(a0),a0
   10924:	|      movea.l 4(a0),a0
   10928:	|      move.l (a0),d1
   1092a:	|      move.l d0,-(sp)
   1092c:	|      move.l d1,-(sp)
   1092e:	|      jsr 15ed8 <copyVariable>
   10934:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   10936:	|      movea.l 8(sp),a0
   1093a:	|      movea.l 24(a0),a0
   1093e:	|      move.l 4(a0),d0
   10942:	|      move.l d0,-(sp)
   10944:	|      jsr 163a2 <trimStack>
   1094a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   1094c:	|      moveq #24,d0
   1094e:	|      add.l 8(sp),d0
   10952:	|      move.l d0,-(sp)
   10954:	|      jsr 163a2 <trimStack>
   1095a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1095c:	|      moveq #2,d0
}
   1095e:	'----> rts

00010960 <builtIn_peekStart>:

builtIn(peekStart)
{
	KPrintF("running peekStart\n");
   10960:	       pea 1b033 <PutChar+0x2093>
   10966:	       jsr 184fe <KPrintF>
   1096c:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1096e:	       movea.l 8(sp),a0
   10972:	       movea.l 24(a0),a0
   10976:	       move.l (a0),d0
   10978:	       moveq #6,d1
   1097a:	       cmp.l d0,d1
   1097c:	   ,-- beq.s 10990 <builtIn_peekStart+0x30>
		KPrintF ("Parameter isn't a stack.");
   1097e:	   |   pea 1af7e <PutChar+0x1fde>
   10984:	   |   jsr 184fe <KPrintF>
   1098a:	   |   addq.l #4,sp
		return BR_ERROR;
   1098c:	   |   moveq #1,d0
   1098e:	,--|-- bra.s 109e4 <builtIn_peekStart+0x84>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10990:	|  '-> movea.l 8(sp),a0
   10994:	|      movea.l 24(a0),a0
   10998:	|      movea.l 4(a0),a0
   1099c:	|      move.l (a0),d0
   1099e:	|  ,-- bne.s 109b2 <builtIn_peekStart+0x52>
		KPrintF ("The stack's empty.");
   109a0:	|  |   pea 1b020 <PutChar+0x2080>
   109a6:	|  |   jsr 184fe <KPrintF>
   109ac:	|  |   addq.l #4,sp
		return BR_ERROR;
   109ae:	|  |   moveq #1,d0
   109b0:	+--|-- bra.s 109e4 <builtIn_peekStart+0x84>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   109b2:	|  '-> moveq #28,d0
   109b4:	|      add.l 8(sp),d0
   109b8:	|      movea.l 8(sp),a0
   109bc:	|      movea.l 24(a0),a0
   109c0:	|      movea.l 4(a0),a0
   109c4:	|      move.l (a0),d1
   109c6:	|      move.l d0,-(sp)
   109c8:	|      move.l d1,-(sp)
   109ca:	|      jsr 15ed8 <copyVariable>
   109d0:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   109d2:	|      moveq #24,d0
   109d4:	|      add.l 8(sp),d0
   109d8:	|      move.l d0,-(sp)
   109da:	|      jsr 163a2 <trimStack>
   109e0:	|      addq.l #4,sp
	return BR_CONTINUE;
   109e2:	|      moveq #2,d0
}
   109e4:	'----> rts

000109e6 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	KPrintF("running peekEnd\n");
   109e6:	       pea 1b046 <PutChar+0x20a6>
   109ec:	       jsr 184fe <KPrintF>
   109f2:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   109f4:	       movea.l 8(sp),a0
   109f8:	       movea.l 24(a0),a0
   109fc:	       move.l (a0),d0
   109fe:	       moveq #6,d1
   10a00:	       cmp.l d0,d1
   10a02:	   ,-- beq.s 10a16 <builtIn_peekEnd+0x30>
		KPrintF ("Parameter isn't a stack.");
   10a04:	   |   pea 1af7e <PutChar+0x1fde>
   10a0a:	   |   jsr 184fe <KPrintF>
   10a10:	   |   addq.l #4,sp
		return BR_ERROR;
   10a12:	   |   moveq #1,d0
   10a14:	,--|-- bra.s 10a6c <builtIn_peekEnd+0x86>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10a16:	|  '-> movea.l 8(sp),a0
   10a1a:	|      movea.l 24(a0),a0
   10a1e:	|      movea.l 4(a0),a0
   10a22:	|      move.l (a0),d0
   10a24:	|  ,-- bne.s 10a38 <builtIn_peekEnd+0x52>
		KPrintF ("The stack's empty.");
   10a26:	|  |   pea 1b020 <PutChar+0x2080>
   10a2c:	|  |   jsr 184fe <KPrintF>
   10a32:	|  |   addq.l #4,sp
		return BR_ERROR;
   10a34:	|  |   moveq #1,d0
   10a36:	+--|-- bra.s 10a6c <builtIn_peekEnd+0x86>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   10a38:	|  '-> moveq #28,d0
   10a3a:	|      add.l 8(sp),d0
   10a3e:	|      movea.l 8(sp),a0
   10a42:	|      movea.l 24(a0),a0
   10a46:	|      movea.l 4(a0),a0
   10a4a:	|      move.l 4(a0),d1
   10a4e:	|      move.l d0,-(sp)
   10a50:	|      move.l d1,-(sp)
   10a52:	|      jsr 15ed8 <copyVariable>
   10a58:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10a5a:	|      moveq #24,d0
   10a5c:	|      add.l 8(sp),d0
   10a60:	|      move.l d0,-(sp)
   10a62:	|      jsr 163a2 <trimStack>
   10a68:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a6a:	|      moveq #2,d0
}
   10a6c:	'----> rts

00010a6e <builtIn_random>:

builtIn(random)
{
   10a6e:	       subq.l #4,sp
	KPrintF("running random\n");
   10a70:	       pea 1b057 <PutChar+0x20b7>
   10a76:	       jsr 184fe <KPrintF>
   10a7c:	       addq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10a7e:	       movea.l 12(sp),a0
   10a82:	       move.l 24(a0),d0
   10a86:	       move.l d0,-(sp)
   10a88:	       pea 1 <_start+0x1>
   10a8c:	       move.l sp,d0
   10a8e:	       addq.l #8,d0
   10a90:	       move.l d0,-(sp)
   10a92:	       jsr 15a1e <getValueType>
   10a98:	       lea 12(sp),sp
   10a9c:	       tst.w d0
   10a9e:	   ,-- bne.s 10aa4 <builtIn_random+0x36>
		return BR_ERROR;
   10aa0:	   |   moveq #1,d0
   10aa2:	,--|-- bra.s 10aee <builtIn_random+0x80>

	trimStack (&fun -> stack);
   10aa4:	|  '-> moveq #24,d0
   10aa6:	|      add.l 12(sp),d0
   10aaa:	|      move.l d0,-(sp)
   10aac:	|      jsr 163a2 <trimStack>
   10ab2:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   10ab4:	|      move.l (sp),d0
   10ab6:	|  ,-- bgt.s 10abc <builtIn_random+0x4e>
   10ab8:	|  |   moveq #1,d0
   10aba:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   10abc:	|  '-> jsr 170be <rand>
   10ac2:	|      move.l d0,d1
   10ac4:	|      move.l (sp),d0
   10ac6:	|      move.l d0,-(sp)
   10ac8:	|      move.l d1,-(sp)
   10aca:	|      jsr 18f64 <__umodsi3>
   10ad0:	|      addq.l #8,sp
   10ad2:	|      move.l d0,d1
   10ad4:	|      moveq #28,d0
   10ad6:	|      add.l 12(sp),d0
   10ada:	|      move.l d1,-(sp)
   10adc:	|      pea 1 <_start+0x1>
   10ae0:	|      move.l d0,-(sp)
   10ae2:	|      jsr 16310 <setVariable>
   10ae8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10aec:	|      moveq #2,d0
}
   10aee:	'----> addq.l #4,sp
   10af0:	       rts

00010af2 <builtIn_setStatusColour>:

builtIn (setStatusColour)
{
	KPrintF("running setStatusColour\n");
   10af2:	pea 1b067 <PutChar+0x20c7>
   10af8:	jsr 184fe <KPrintF>
   10afe:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10b00:	nop
   10b02:	rts

00010b04 <builtIn_setLitStatusColour>:

builtIn (setLitStatusColour)
{
	KPrintF("running setLitStatusColour\n");
   10b04:	pea 1b080 <PutChar+0x20e0>
   10b0a:	jsr 184fe <KPrintF>
   10b10:	addq.l #4,sp

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   10b12:	moveq #2,d0
}
   10b14:	rts

00010b16 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   10b16:	       subq.l #4,sp
	KPrintF("running setPasteColour\n");
   10b18:	       pea 1b09c <PutChar+0x20fc>
   10b1e:	       jsr 184fe <KPrintF>
   10b24:	       addq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   10b26:	       movea.l 12(sp),a0
   10b2a:	       move.l 24(a0),d0
   10b2e:	       move.l d0,-(sp)
   10b30:	       pea 1 <_start+0x1>
   10b34:	       move.l sp,d0
   10b36:	       addq.l #8,d0
   10b38:	       move.l d0,-(sp)
   10b3a:	       jsr 15a1e <getValueType>
   10b40:	       lea 12(sp),sp
   10b44:	       tst.w d0
   10b46:	   ,-- bne.s 10b5a <builtIn_setPasteColour+0x44>
		KPrintF ("setPasteColour: Parameter not a number");
   10b48:	   |   pea 1b0b4 <PutChar+0x2114>
   10b4e:	   |   jsr 184fe <KPrintF>
   10b54:	   |   addq.l #4,sp
		return BR_ERROR;
   10b56:	   |   moveq #1,d0
   10b58:	,--|-- bra.s 10b9a <builtIn_setPasteColour+0x84>
	}
	trimStack (&fun -> stack);
   10b5a:	|  '-> moveq #24,d0
   10b5c:	|      add.l 12(sp),d0
   10b60:	|      move.l d0,-(sp)
   10b62:	|      jsr 163a2 <trimStack>
   10b68:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10b6a:	|      move.l (sp),d0
   10b6c:	|      move.l d0,d0
   10b6e:	|      move.w d0,1e780 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10b74:	|      move.w 1e780 <textPaletteIndex>,d0
   10b7a:	|      cmpi.w #31,d0
   10b7e:	|  ,-- bls.s 10b98 <builtIn_setPasteColour+0x82>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10b80:	|  |   pea 1b0db <PutChar+0x213b>
   10b86:	|  |   jsr 184fe <KPrintF>
   10b8c:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10b8e:	|  |   clr.w 1e780 <textPaletteIndex>
		return BR_ERROR;
   10b94:	|  |   moveq #1,d0
   10b96:	+--|-- bra.s 10b9a <builtIn_setPasteColour+0x84>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10b98:	|  '-> moveq #2,d0
}
   10b9a:	'----> addq.l #4,sp
   10b9c:	       rts

00010b9e <builtIn_setBlankColour>:

builtIn (setBlankColour)
{
	KPrintF("running setBlankColour\n");
   10b9e:	pea 1b105 <PutChar+0x2165>
   10ba4:	jsr 184fe <KPrintF>
   10baa:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10bac:	moveq #2,d0
}
   10bae:	rts

00010bb0 <builtIn_setBurnColour>:

builtIn (setBurnColour)
{
	KPrintF("running setBurnColour\n");
   10bb0:	pea 1b11d <PutChar+0x217d>
   10bb6:	jsr 184fe <KPrintF>
   10bbc:	addq.l #4,sp

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10bbe:	moveq #2,d0
}
   10bc0:	rts

00010bc2 <builtIn_setFont>:


builtIn(setFont)
{
   10bc2:	       lea -16(sp),sp
   10bc6:	       move.l a6,-(sp)
	KPrintF("running setFont\n");
   10bc8:	       pea 1b134 <PutChar+0x2194>
   10bce:	       jsr 184fe <KPrintF>
   10bd4:	       addq.l #4,sp
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10bd6:	       movea.l 28(sp),a0
   10bda:	       move.l 24(a0),d0
   10bde:	       move.l d0,-(sp)
   10be0:	       pea 1 <_start+0x1>
   10be4:	       lea 12(sp),a0
   10be8:	       move.l a0,-(sp)
   10bea:	       jsr 15a1e <getValueType>
   10bf0:	       lea 12(sp),sp
   10bf4:	       tst.w d0
   10bf6:	   ,-- bne.s 10bfe <builtIn_setFont+0x3c>
   10bf8:	   |   moveq #1,d0
   10bfa:	,--|-- bra.w 10cac <builtIn_setFont+0xea>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   10bfe:	|  '-> moveq #24,d0
   10c00:	|      add.l 28(sp),d0
   10c04:	|      move.l d0,-(sp)
   10c06:	|      jsr 163a2 <trimStack>
   10c0c:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10c0e:	|      movea.l 28(sp),a0
   10c12:	|      move.l 24(a0),d0
   10c16:	|      move.l d0,-(sp)
   10c18:	|      jsr 15ff4 <getTextFromAnyVar>
   10c1e:	|      addq.l #4,sp
   10c20:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10c24:	|  ,-- bne.s 10c2c <builtIn_setFont+0x6a>
   10c26:	|  |   moveq #1,d0
   10c28:	+--|-- bra.w 10cac <builtIn_setFont+0xea>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10c2c:	|  '-> moveq #24,d0
   10c2e:	|      add.l 28(sp),d0
   10c32:	|      move.l d0,-(sp)
   10c34:	|      jsr 163a2 <trimStack>
   10c3a:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10c3c:	|      movea.l 28(sp),a0
   10c40:	|      move.l 24(a0),d0
   10c44:	|      move.l d0,-(sp)
   10c46:	|      pea 5 <_start+0x5>
   10c4a:	|      lea 16(sp),a0
   10c4e:	|      move.l a0,-(sp)
   10c50:	|      jsr 15a1e <getValueType>
   10c56:	|      lea 12(sp),sp
   10c5a:	|      tst.w d0
   10c5c:	|  ,-- bne.s 10c62 <builtIn_setFont+0xa0>
   10c5e:	|  |   moveq #1,d0
   10c60:	+--|-- bra.s 10cac <builtIn_setFont+0xea>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   10c62:	|  '-> moveq #24,d0
   10c64:	|      add.l 28(sp),d0
   10c68:	|      move.l d0,-(sp)
   10c6a:	|      jsr 163a2 <trimStack>
   10c70:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   10c72:	|      move.l 4(sp),d1
   10c76:	|      move.l 8(sp),d0
   10c7a:	|      move.l d1,-(sp)
   10c7c:	|      move.l 20(sp),-(sp)
   10c80:	|      move.l d0,-(sp)
   10c82:	|      jsr 16856 <loadFont>
   10c88:	|      lea 12(sp),sp
   10c8c:	|      tst.w d0
   10c8e:	|  ,-- bne.s 10c94 <builtIn_setFont+0xd2>
   10c90:	|  |   moveq #1,d0
   10c92:	+--|-- bra.s 10cac <builtIn_setFont+0xea>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10c94:	|  '-> move.l 16(sp),12(sp)
   10c9a:	|      move.l 1e876 <SysBase>,d0
   10ca0:	|      movea.l d0,a6
   10ca2:	|      movea.l 12(sp),a1
   10ca6:	|      jsr -690(a6)

    return BR_CONTINUE;
   10caa:	|      moveq #2,d0
}
   10cac:	'----> movea.l (sp)+,a6
   10cae:	       lea 16(sp),sp
   10cb2:	       rts

00010cb4 <builtIn_inFont>:

builtIn(inFont)
{
   10cb4:	       subq.l #4,sp
	KPrintF("running inFont\n");
   10cb6:	       pea 1b145 <PutChar+0x21a5>
   10cbc:	       jsr 184fe <KPrintF>
   10cc2:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10cc4:	       movea.l 12(sp),a0
   10cc8:	       move.l 24(a0),d0
   10ccc:	       move.l d0,-(sp)
   10cce:	       jsr 15ff4 <getTextFromAnyVar>
   10cd4:	       addq.l #4,sp
   10cd6:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10cd8:	   ,-- bne.s 10cde <builtIn_inFont+0x2a>
   10cda:	   |   moveq #1,d0
   10cdc:	,--|-- bra.s 10d14 <builtIn_inFont+0x60>
	trimStack (&fun -> stack);
   10cde:	|  '-> moveq #24,d0
   10ce0:	|      add.l 12(sp),d0
   10ce4:	|      move.l d0,-(sp)
   10ce6:	|      jsr 163a2 <trimStack>
   10cec:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10cee:	|      move.l (sp),-(sp)
   10cf0:	|      jsr 16844 <isInFont>
   10cf6:	|      addq.l #4,sp
   10cf8:	|      movea.w d0,a0
   10cfa:	|      moveq #28,d0
   10cfc:	|      add.l 12(sp),d0
   10d00:	|      move.l a0,-(sp)
   10d02:	|      pea 1 <_start+0x1>
   10d06:	|      move.l d0,-(sp)
   10d08:	|      jsr 16310 <setVariable>
   10d0e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10d12:	|      moveq #2,d0
}
   10d14:	'----> addq.l #4,sp
   10d16:	       rts

00010d18 <builtIn_pasteString>:

builtIn(pasteString)
{
   10d18:	       lea -16(sp),sp
   10d1c:	       move.l a6,-(sp)
   10d1e:	       move.l d2,-(sp)
	KPrintF("running pasteString\n");
   10d20:	       pea 1b155 <PutChar+0x21b5>
   10d26:	       jsr 184fe <KPrintF>
   10d2c:	       addq.l #4,sp
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d2e:	       movea.l 32(sp),a0
   10d32:	       move.l 24(a0),d0
   10d36:	       move.l d0,-(sp)
   10d38:	       jsr 15ff4 <getTextFromAnyVar>
   10d3e:	       addq.l #4,sp
   10d40:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10d44:	       moveq #24,d0
   10d46:	       add.l 32(sp),d0
   10d4a:	       move.l d0,-(sp)
   10d4c:	       jsr 163a2 <trimStack>
   10d52:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10d54:	       movea.l 32(sp),a0
   10d58:	       move.l 24(a0),d0
   10d5c:	       move.l d0,-(sp)
   10d5e:	       pea 1 <_start+0x1>
   10d62:	       lea 20(sp),a0
   10d66:	       move.l a0,-(sp)
   10d68:	       jsr 15a1e <getValueType>
   10d6e:	       lea 12(sp),sp
   10d72:	       tst.w d0
   10d74:	   ,-- bne.s 10d7c <builtIn_pasteString+0x64>
   10d76:	   |   moveq #1,d0
   10d78:	,--|-- bra.w 10e1e <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10d7c:	|  '-> moveq #24,d0
   10d7e:	|      add.l 32(sp),d0
   10d82:	|      move.l d0,-(sp)
   10d84:	|      jsr 163a2 <trimStack>
   10d8a:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10d8c:	|      movea.l 32(sp),a0
   10d90:	|      move.l 24(a0),d0
   10d94:	|      move.l d0,-(sp)
   10d96:	|      pea 1 <_start+0x1>
   10d9a:	|      lea 16(sp),a0
   10d9e:	|      move.l a0,-(sp)
   10da0:	|      jsr 15a1e <getValueType>
   10da6:	|      lea 12(sp),sp
   10daa:	|      tst.w d0
   10dac:	|  ,-- bne.s 10db2 <builtIn_pasteString+0x9a>
   10dae:	|  |   moveq #1,d0
   10db0:	+--|-- bra.s 10e1e <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10db2:	|  '-> moveq #24,d0
   10db4:	|      add.l 32(sp),d0
   10db8:	|      move.l d0,-(sp)
   10dba:	|      jsr 163a2 <trimStack>
   10dc0:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10dc2:	|      move.l 8(sp),d0
   10dc6:	|      cmpi.l #65535,d0
   10dcc:	|  ,-- bne.s 10dec <builtIn_pasteString+0xd4>
		x = (winWidth - stringWidth(newText)) >> 1;
   10dce:	|  |   move.l 1e7bc <winWidth>,d2
   10dd4:	|  |   move.l 20(sp),-(sp)
   10dd8:	|  |   jsr 16b08 <stringWidth>
   10dde:	|  |   addq.l #4,sp
   10de0:	|  |   move.l d2,d1
   10de2:	|  |   sub.l d0,d1
   10de4:	|  |   move.l d1,d0
   10de6:	|  |   lsr.l #1,d0
   10de8:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10dec:	|  '-> move.l 12(sp),d1
   10df0:	|      move.l 8(sp),d0
   10df4:	|      move.l d1,-(sp)
   10df6:	|      move.l d0,-(sp)
   10df8:	|      move.l 28(sp),-(sp)
   10dfc:	|      jsr 16a2a <pasteStringToBackdrop>
   10e02:	|      lea 12(sp),sp
    FreeVec(newText); 
   10e06:	|      move.l 20(sp),16(sp)
   10e0c:	|      move.l 1e876 <SysBase>,d0
   10e12:	|      movea.l d0,a6
   10e14:	|      movea.l 16(sp),a1
   10e18:	|      jsr -690(a6)
    return BR_CONTINUE;
   10e1c:	|      moveq #2,d0
}
   10e1e:	'----> move.l (sp)+,d2
   10e20:	       movea.l (sp)+,a6
   10e22:	       lea 16(sp),sp
   10e26:	       rts

00010e28 <builtIn_anim>:

builtIn(anim)
{
   10e28:	       lea -12(sp),sp
	KPrintF("running anim\n");
   10e2c:	       pea 1b16a <PutChar+0x21ca>
   10e32:	       jsr 184fe <KPrintF>
   10e38:	       addq.l #4,sp
	UNUSEDALL
	if (numParams < 2) {
   10e3a:	       moveq #1,d0
   10e3c:	       cmp.l 16(sp),d0
   10e40:	   ,-- blt.s 10e56 <builtIn_anim+0x2e>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10e42:	   |   pea 1b178 <PutChar+0x21d8>
   10e48:	   |   jsr 184fe <KPrintF>
   10e4e:	   |   addq.l #4,sp
		return BR_ERROR;
   10e50:	   |   moveq #1,d0
   10e52:	,--|-- bra.w 10ee4 <builtIn_anim+0xbc>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10e56:	|  '-> moveq #24,d1
   10e58:	|      add.l 20(sp),d1
   10e5c:	|      move.l 16(sp),d0
   10e60:	|      subq.l #1,d0
   10e62:	|      move.l d1,-(sp)
   10e64:	|      move.l d0,-(sp)
   10e66:	|      jsr a0a6 <createPersonaAnim>
   10e6c:	|      addq.l #8,sp
   10e6e:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e72:	|      movea.l 20(sp),a0
   10e76:	|      move.l 24(a0),d0
   10e7a:	|      move.l d0,-(sp)
   10e7c:	|      pea 5 <_start+0x5>
   10e80:	|      lea 8(sp),a0
   10e84:	|      move.l a0,-(sp)
   10e86:	|      jsr 15a1e <getValueType>
   10e8c:	|      lea 12(sp),sp
   10e90:	|      tst.w d0
   10e92:	|  ,-- bne.s 10e98 <builtIn_anim+0x70>
   10e94:	|  |   moveq #1,d0
   10e96:	+--|-- bra.s 10ee4 <builtIn_anim+0xbc>
	trimStack (&fun -> stack);
   10e98:	|  '-> moveq #24,d0
   10e9a:	|      add.l 20(sp),d0
   10e9e:	|      move.l d0,-(sp)
   10ea0:	|      jsr 163a2 <trimStack>
   10ea6:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10ea8:	|      move.l (sp),d0
   10eaa:	|      move.l d0,-(sp)
   10eac:	|      jsr 17220 <loadBankForAnim>
   10eb2:	|      addq.l #4,sp
   10eb4:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10eb8:	|  ,-- bne.s 10ebe <builtIn_anim+0x96>
   10eba:	|  |   moveq #1,d0
   10ebc:	+--|-- bra.s 10ee4 <builtIn_anim+0xbc>
	setBankFile (ba, sprBanky);
   10ebe:	|  '-> move.l 4(sp),-(sp)
   10ec2:	|      move.l 12(sp),-(sp)
   10ec6:	|      jsr bfb2 <setBankFile>
   10ecc:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10ece:	|      moveq #28,d0
   10ed0:	|      add.l 20(sp),d0
   10ed4:	|      move.l 8(sp),-(sp)
   10ed8:	|      move.l d0,-(sp)
   10eda:	|      jsr 162cc <newAnimationVariable>
   10ee0:	|      addq.l #8,sp
	return BR_CONTINUE;
   10ee2:	|      moveq #2,d0
}
   10ee4:	'----> lea 12(sp),sp
   10ee8:	       rts

00010eea <builtIn_costume>:

builtIn(costume)
{
   10eea:	          lea -32(sp),sp
   10eee:	          move.l a6,-(sp)
   10ef0:	          move.l a2,-(sp)
	KPrintF("running costume\n");
   10ef2:	          pea 1b1b2 <PutChar+0x2212>
   10ef8:	          jsr 184fe <KPrintF>
   10efe:	          addq.l #4,sp
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10f00:	          moveq #8,d0
   10f02:	          move.l d0,32(sp)
   10f06:	          clr.l 28(sp)
   10f0a:	          move.l 1e876 <SysBase>,d0
   10f10:	          movea.l d0,a6
   10f12:	          move.l 32(sp),d0
   10f16:	          move.l 28(sp),d1
   10f1a:	          jsr -684(a6)
   10f1e:	          move.l d0,24(sp)
   10f22:	          move.l 24(sp),d0
   10f26:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10f2a:	      ,-- bne.s 10f32 <builtIn_costume+0x48>
   10f2c:	      |   moveq #1,d0
   10f2e:	,-----|-- bra.w 1101a <builtIn_costume+0x130>
    newPersona->numDirections = numParams / 3;
   10f32:	|     '-> move.l 44(sp),d0
   10f36:	|         pea 3 <_start+0x3>
   10f3a:	|         move.l d0,-(sp)
   10f3c:	|         jsr 18f08 <__divsi3>
   10f42:	|         addq.l #8,sp
   10f44:	|         movea.l 20(sp),a0
   10f48:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10f4c:	|         tst.l 44(sp)
   10f50:	|     ,-- beq.s 10f66 <builtIn_costume+0x7c>
   10f52:	|     |   movea.l 20(sp),a0
   10f56:	|     |   move.l 4(a0),d1
   10f5a:	|     |   move.l d1,d0
   10f5c:	|     |   add.l d0,d0
   10f5e:	|     |   add.l d1,d0
   10f60:	|     |   cmp.l 44(sp),d0
   10f64:	|  ,--|-- beq.s 10f7a <builtIn_costume+0x90>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10f66:	|  |  '-> pea 1b1c3 <PutChar+0x2223>
   10f6c:	|  |      jsr 184fe <KPrintF>
   10f72:	|  |      addq.l #4,sp
        return BR_ERROR;
   10f74:	|  |      moveq #1,d0
   10f76:	+--|----- bra.w 1101a <builtIn_costume+0x130>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10f7a:	|  '----> move.l 44(sp),d0
   10f7e:	|         add.l d0,d0
   10f80:	|         add.l d0,d0
   10f82:	|         move.l d0,16(sp)
   10f86:	|         clr.l 12(sp)
   10f8a:	|         move.l 1e876 <SysBase>,d0
   10f90:	|         movea.l d0,a6
   10f92:	|         move.l 16(sp),d0
   10f96:	|         move.l 12(sp),d1
   10f9a:	|         jsr -684(a6)
   10f9e:	|         move.l d0,8(sp)
   10fa2:	|         move.l 8(sp),d0
   10fa6:	|         movea.l 20(sp),a0
   10faa:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10fac:	|         movea.l 20(sp),a0
   10fb0:	|         move.l (a0),d0
   10fb2:	|     ,-- bne.s 10fb8 <builtIn_costume+0xce>
   10fb4:	|     |   moveq #1,d0
   10fb6:	+-----|-- bra.s 1101a <builtIn_costume+0x130>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10fb8:	|     '-> move.l 44(sp),d0
   10fbc:	|         subq.l #1,d0
   10fbe:	|         move.l d0,36(sp)
   10fc2:	|     ,-- bra.s 10ffe <builtIn_costume+0x114>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10fc4:	|  ,--|-> movea.l 48(sp),a0
   10fc8:	|  |  |   move.l 24(a0),d0
   10fcc:	|  |  |   movea.l 20(sp),a0
   10fd0:	|  |  |   movea.l (a0),a0
   10fd2:	|  |  |   move.l 36(sp),d1
   10fd6:	|  |  |   add.l d1,d1
   10fd8:	|  |  |   add.l d1,d1
   10fda:	|  |  |   lea (0,a0,d1.l),a2
   10fde:	|  |  |   move.l d0,-(sp)
   10fe0:	|  |  |   jsr 15ef6 <getAnimationFromVar>
   10fe6:	|  |  |   addq.l #4,sp
   10fe8:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10fea:	|  |  |   moveq #24,d0
   10fec:	|  |  |   add.l 48(sp),d0
   10ff0:	|  |  |   move.l d0,-(sp)
   10ff2:	|  |  |   jsr 163a2 <trimStack>
   10ff8:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10ffa:	|  |  |   subq.l #1,36(sp)
   10ffe:	|  |  '-> tst.l 36(sp)
   11002:	|  '----- bge.s 10fc4 <builtIn_costume+0xda>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   11004:	|         moveq #28,d0
   11006:	|         add.l 48(sp),d0
   1100a:	|         move.l 20(sp),-(sp)
   1100e:	|         move.l d0,-(sp)
   11010:	|         jsr 162ee <newCostumeVariable>
   11016:	|         addq.l #8,sp
    return BR_CONTINUE;
   11018:	|         moveq #2,d0
}
   1101a:	'-------> movea.l (sp)+,a2
   1101c:	          movea.l (sp)+,a6
   1101e:	          lea 32(sp),sp
   11022:	          rts

00011024 <builtIn_launch>:

builtIn(launch)
{
   11024:	          lea -20(sp),sp
   11028:	          move.l a6,-(sp)
	KPrintF("running launch\n");
   1102a:	          pea 1b20e <PutChar+0x226e>
   11030:	          jsr 184fe <KPrintF>
   11036:	          addq.l #4,sp
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11038:	          movea.l 32(sp),a0
   1103c:	          move.l 24(a0),d0
   11040:	          move.l d0,-(sp)
   11042:	          jsr 15ff4 <getTextFromAnyVar>
   11048:	          addq.l #4,sp
   1104a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1104e:	      ,-- bne.s 11056 <builtIn_launch+0x32>
   11050:	      |   moveq #1,d0
   11052:	,-----|-- bra.w 11184 <builtIn_launch+0x160>

    char * newText = encodeFilename(newTextA);
   11056:	|     '-> move.l 20(sp),-(sp)
   1105a:	|         jsr 2fe <encodeFilename>
   11060:	|         addq.l #4,sp
   11062:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   11066:	|         moveq #24,d0
   11068:	|         add.l 32(sp),d0
   1106c:	|         move.l d0,-(sp)
   1106e:	|         jsr 163a2 <trimStack>
   11074:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   11076:	|         movea.l 20(sp),a0
   1107a:	|         move.b (a0),d0
   1107c:	|         cmpi.b #104,d0
   11080:	|  ,----- bne.s 110ea <builtIn_launch+0xc6>
        newTextA[1] == 't' &&
   11082:	|  |      movea.l 20(sp),a0
   11086:	|  |      addq.l #1,a0
   11088:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   1108a:	|  |      cmpi.b #116,d0
   1108e:	|  +----- bne.s 110ea <builtIn_launch+0xc6>
        newTextA[2] == 't' &&
   11090:	|  |      movea.l 20(sp),a0
   11094:	|  |      addq.l #2,a0
   11096:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   11098:	|  |      cmpi.b #116,d0
   1109c:	|  +----- bne.s 110ea <builtIn_launch+0xc6>
        newTextA[3] == 'p' &&
   1109e:	|  |      movea.l 20(sp),a0
   110a2:	|  |      addq.l #3,a0
   110a4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   110a6:	|  |      cmpi.b #112,d0
   110aa:	|  +----- bne.s 110ea <builtIn_launch+0xc6>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   110ac:	|  |      movea.l 20(sp),a0
   110b0:	|  |      addq.l #4,a0
   110b2:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   110b4:	|  |      cmpi.b #58,d0
   110b8:	|  |  ,-- beq.s 110d6 <builtIn_launch+0xb2>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   110ba:	|  |  |   movea.l 20(sp),a0
   110be:	|  |  |   addq.l #4,a0
   110c0:	|  |  |   move.b (a0),d0
   110c2:	|  |  |   cmpi.b #115,d0
   110c6:	|  +--|-- bne.s 110ea <builtIn_launch+0xc6>
   110c8:	|  |  |   movea.l 20(sp),a0
   110cc:	|  |  |   addq.l #5,a0
   110ce:	|  |  |   move.b (a0),d0
   110d0:	|  |  |   cmpi.b #58,d0
   110d4:	|  +--|-- bne.s 110ea <builtIn_launch+0xc6>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   110d6:	|  |  '-> move.l 20(sp),-(sp)
   110da:	|  |      jsr b8 <copyString>
   110e0:	|  |      addq.l #4,sp
   110e2:	|  |      move.l d0,1e938 <launchMe>
   110e8:	|  |  ,-- bra.s 1113c <builtIn_launch+0x118>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   110ea:	|  '--|-> move.l 1e7d0 <gamePath>,d0
   110f0:	|     |   pea 1b21e <PutChar+0x227e>
   110f6:	|     |   move.l d0,-(sp)
   110f8:	|     |   jsr 14f4a <joinStrings>
   110fe:	|     |   addq.l #8,sp
   11100:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   11104:	|     |   move.l 16(sp),-(sp)
   11108:	|     |   move.l 16(sp),-(sp)
   1110c:	|     |   jsr 14f4a <joinStrings>
   11112:	|     |   addq.l #8,sp
   11114:	|     |   move.l d0,1e938 <launchMe>
        FreeVec(newText);
   1111a:	|     |   move.l 16(sp),8(sp)
   11120:	|     |   move.l 1e876 <SysBase>,d0
   11126:	|     |   movea.l d0,a6
   11128:	|     |   movea.l 8(sp),a1
   1112c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   11130:	|     |   move.l 1e938 <launchMe>,d0
   11136:	|     +-- bne.s 1113c <builtIn_launch+0x118>
   11138:	|     |   moveq #1,d0
   1113a:	+-----|-- bra.s 11184 <builtIn_launch+0x160>
    }
    FreeVec(newTextA);
   1113c:	|     '-> move.l 20(sp),4(sp)
   11142:	|         move.l 1e876 <SysBase>,d0
   11148:	|         movea.l d0,a6
   1114a:	|         movea.l 4(sp),a1
   1114e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   11152:	|         clr.l -(sp)
   11154:	|         jsr 4ee8 <setGraphicsWindow>
   1115a:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1115c:	|         moveq #28,d0
   1115e:	|         add.l 32(sp),d0
   11162:	|         pea 1 <_start+0x1>
   11166:	|         pea 1 <_start+0x1>
   1116a:	|         move.l d0,-(sp)
   1116c:	|         jsr 16310 <setVariable>
   11172:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   11176:	|         moveq #28,d0
   11178:	|         add.l 32(sp),d0
   1117c:	|         move.l d0,1e93c <launchResult>

    return BR_KEEP_AND_PAUSE;
   11182:	|         moveq #0,d0
}
   11184:	'-------> movea.l (sp)+,a6
   11186:	          lea 20(sp),sp
   1118a:	          rts

0001118c <builtIn_pause>:

builtIn(pause)
{
   1118c:	       subq.l #4,sp
	//KPrintF("running pause\n");
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1118e:	       movea.l 12(sp),a0
   11192:	       move.l 24(a0),d0
   11196:	       move.l d0,-(sp)
   11198:	       pea 1 <_start+0x1>
   1119c:	       move.l sp,d0
   1119e:	       addq.l #8,d0
   111a0:	       move.l d0,-(sp)
   111a2:	       jsr 15a1e <getValueType>
   111a8:	       lea 12(sp),sp
   111ac:	       tst.w d0
   111ae:	   ,-- bne.s 111b4 <builtIn_pause+0x28>
   111b0:	   |   moveq #1,d0
   111b2:	,--|-- bra.s 111e2 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   111b4:	|  '-> moveq #24,d0
   111b6:	|      add.l 12(sp),d0
   111ba:	|      move.l d0,-(sp)
   111bc:	|      jsr 163a2 <trimStack>
   111c2:	|      addq.l #4,sp
	if (theTime > 0) {
   111c4:	|      move.l (sp),d0
   111c6:	|  ,-- ble.s 111e0 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   111c8:	|  |   move.l (sp),d0
   111ca:	|  |   subq.l #1,d0
   111cc:	|  |   movea.l 12(sp),a0
   111d0:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   111d4:	|  |   movea.l 12(sp),a0
   111d8:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   111dc:	|  |   moveq #0,d0
   111de:	+--|-- bra.s 111e2 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   111e0:	|  '-> moveq #2,d0
}
   111e2:	'----> addq.l #4,sp
   111e4:	       rts

000111e6 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	KPrintF("running completeTimers\n");
   111e6:	pea 1b220 <PutChar+0x2280>
   111ec:	jsr 184fe <KPrintF>
   111f2:	addq.l #4,sp
	UNUSEDALL
	completeTimers();
   111f4:	jsr 56d8 <completeTimers>
	return BR_CONTINUE;
   111fa:	moveq #2,d0
}
   111fc:	rts

000111fe <builtIn_callEvent>:

builtIn(callEvent)
{
   111fe:	       lea -12(sp),sp
	KPrintF("running callEvent\n");
   11202:	       pea 1b238 <PutChar+0x2298>
   11208:	       jsr 184fe <KPrintF>
   1120e:	       addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11210:	       movea.l 20(sp),a0
   11214:	       move.l 24(a0),d0
   11218:	       move.l d0,-(sp)
   1121a:	       pea 7 <_start+0x7>
   1121e:	       lea 8(sp),a0
   11222:	       move.l a0,-(sp)
   11224:	       jsr 15a1e <getValueType>
   1122a:	       lea 12(sp),sp
   1122e:	       tst.w d0
   11230:	   ,-- bne.s 11238 <builtIn_callEvent+0x3a>
   11232:	   |   moveq #1,d0
   11234:	,--|-- bra.w 112ce <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   11238:	|  '-> moveq #24,d0
   1123a:	|      add.l 20(sp),d0
   1123e:	|      move.l d0,-(sp)
   11240:	|      jsr 163a2 <trimStack>
   11246:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11248:	|      movea.l 20(sp),a0
   1124c:	|      move.l 24(a0),d0
   11250:	|      move.l d0,-(sp)
   11252:	|      pea 7 <_start+0x7>
   11256:	|      moveq #12,d0
   11258:	|      add.l sp,d0
   1125a:	|      move.l d0,-(sp)
   1125c:	|      jsr 15a1e <getValueType>
   11262:	|      lea 12(sp),sp
   11266:	|      tst.w d0
   11268:	|  ,-- bne.s 1126e <builtIn_callEvent+0x70>
   1126a:	|  |   moveq #1,d0
   1126c:	+--|-- bra.s 112ce <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   1126e:	|  '-> moveq #24,d0
   11270:	|      add.l 20(sp),d0
   11274:	|      move.l d0,-(sp)
   11276:	|      jsr 163a2 <trimStack>
   1127c:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1127e:	|      move.l (sp),d1
   11280:	|      move.l 4(sp),d0
   11284:	|      move.l d1,-(sp)
   11286:	|      move.l d0,-(sp)
   11288:	|      jsr df8c <getCombinationFunction>
   1128e:	|      addq.l #8,sp
   11290:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   11294:	|  ,-- beq.s 112b4 <builtIn_callEvent+0xb6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11296:	|  |   moveq #28,d0
   11298:	|  |   add.l 20(sp),d0
   1129c:	|  |   move.l 8(sp),-(sp)
   112a0:	|  |   pea 2 <_start+0x2>
   112a4:	|  |   move.l d0,-(sp)
   112a6:	|  |   jsr 16310 <setVariable>
   112ac:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   112b0:	|  |   moveq #4,d0
   112b2:	+--|-- bra.s 112ce <builtIn_callEvent+0xd0>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   112b4:	|  '-> moveq #28,d0
   112b6:	|      add.l 20(sp),d0
   112ba:	|      clr.l -(sp)
   112bc:	|      pea 1 <_start+0x1>
   112c0:	|      move.l d0,-(sp)
   112c2:	|      jsr 16310 <setVariable>
   112c8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112cc:	|      moveq #2,d0
}
   112ce:	'----> lea 12(sp),sp
   112d2:	       rts

000112d4 <builtIn_quitGame>:

BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	KPrintF("running quitGame\n");
   112d4:	pea 1b24b <PutChar+0x22ab>
   112da:	jsr 184fe <KPrintF>
   112e0:	addq.l #4,sp
	UNUSEDALL
	reallyWantToQuit = TRUE;
   112e2:	move.w #1,1e948 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   112ea:	moveq #2,d0
}
   112ec:	rts

000112ee <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{	
	UNUSEDALL
	trimStack (&fun -> stack);
   112ee:	moveq #24,d0
   112f0:	add.l 8(sp),d0
   112f4:	move.l d0,-(sp)
   112f6:	jsr 163a2 <trimStack>
   112fc:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   112fe:	pea 1b25d <PutChar+0x22bd>
   11304:	jsr 184fe <KPrintF>
   1130a:	addq.l #4,sp
	return BR_CONTINUE;
   1130c:	moveq #2,d0
}
   1130e:	rts

00011310 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   11310:	pea 1b25d <PutChar+0x22bd>
   11316:	jsr 184fe <KPrintF>
   1131c:	addq.l #4,sp
	return BR_CONTINUE;
   1131e:	moveq #2,d0
}
   11320:	rts

00011322 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   11322:	pea 1b25d <PutChar+0x22bd>
   11328:	jsr 184fe <KPrintF>
   1132e:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   11330:	moveq #2,d0
}
   11332:	rts

00011334 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   11334:	pea 1b25d <PutChar+0x22bd>
   1133a:	jsr 184fe <KPrintF>
   11340:	addq.l #4,sp
	return BR_CONTINUE;
   11342:	moveq #2,d0
}
   11344:	rts

00011346 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   11346:	pea 1b25d <PutChar+0x22bd>
   1134c:	jsr 184fe <KPrintF>
   11352:	addq.l #4,sp
	return BR_CONTINUE;
   11354:	moveq #2,d0
}
   11356:	rts

00011358 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   11358:	pea 1b25d <PutChar+0x22bd>
   1135e:	jsr 184fe <KPrintF>
   11364:	addq.l #4,sp
	return BR_CONTINUE;
   11366:	moveq #2,d0
}
   11368:	rts

0001136a <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1136a:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1136e:	       movea.l 20(sp),a0
   11372:	       move.l 24(a0),d0
   11376:	       move.l d0,-(sp)
   11378:	       pea 1 <_start+0x1>
   1137c:	       moveq #16,d0
   1137e:	       add.l sp,d0
   11380:	       move.l d0,-(sp)
   11382:	       jsr 15a1e <getValueType>
   11388:	       lea 12(sp),sp
   1138c:	       tst.w d0
   1138e:	   ,-- bne.s 11396 <builtIn_startMusic+0x2c>
   11390:	   |   moveq #1,d0
   11392:	,--|-- bra.w 11436 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   11396:	|  '-> moveq #24,d0
   11398:	|      add.l 20(sp),d0
   1139c:	|      move.l d0,-(sp)
   1139e:	|      jsr 163a2 <trimStack>
   113a4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113a6:	|      movea.l 20(sp),a0
   113aa:	|      move.l 24(a0),d0
   113ae:	|      move.l d0,-(sp)
   113b0:	|      pea 1 <_start+0x1>
   113b4:	|      moveq #12,d0
   113b6:	|      add.l sp,d0
   113b8:	|      move.l d0,-(sp)
   113ba:	|      jsr 15a1e <getValueType>
   113c0:	|      lea 12(sp),sp
   113c4:	|      tst.w d0
   113c6:	|  ,-- bne.s 113cc <builtIn_startMusic+0x62>
   113c8:	|  |   moveq #1,d0
   113ca:	+--|-- bra.s 11436 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   113cc:	|  '-> moveq #24,d0
   113ce:	|      add.l 20(sp),d0
   113d2:	|      move.l d0,-(sp)
   113d4:	|      jsr 163a2 <trimStack>
   113da:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   113dc:	|      movea.l 20(sp),a0
   113e0:	|      move.l 24(a0),d0
   113e4:	|      move.l d0,-(sp)
   113e6:	|      pea 5 <_start+0x5>
   113ea:	|      lea 8(sp),a0
   113ee:	|      move.l a0,-(sp)
   113f0:	|      jsr 15a1e <getValueType>
   113f6:	|      lea 12(sp),sp
   113fa:	|      tst.w d0
   113fc:	|  ,-- bne.s 11402 <builtIn_startMusic+0x98>
   113fe:	|  |   moveq #1,d0
   11400:	+--|-- bra.s 11436 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   11402:	|  '-> moveq #24,d0
   11404:	|      add.l 20(sp),d0
   11408:	|      move.l d0,-(sp)
   1140a:	|      jsr 163a2 <trimStack>
   11410:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   11412:	|      movea.l 8(sp),a0
   11416:	|      move.l 4(sp),d1
   1141a:	|      move.l (sp),d0
   1141c:	|      move.l a0,-(sp)
   1141e:	|      move.l d1,-(sp)
   11420:	|      move.l d0,-(sp)
   11422:	|      jsr db8e <playMOD>
   11428:	|      lea 12(sp),sp
   1142c:	|      tst.w d0
   1142e:	|  ,-- bne.s 11434 <builtIn_startMusic+0xca>
   11430:	|  |   moveq #2,d0
   11432:	+--|-- bra.s 11436 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   11434:	|  '-> moveq #2,d0
}
   11436:	'----> lea 12(sp),sp
   1143a:	       rts

0001143c <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1143c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1143e:	       movea.l 12(sp),a0
   11442:	       move.l 24(a0),d0
   11446:	       move.l d0,-(sp)
   11448:	       pea 1 <_start+0x1>
   1144c:	       move.l sp,d0
   1144e:	       addq.l #8,d0
   11450:	       move.l d0,-(sp)
   11452:	       jsr 15a1e <getValueType>
   11458:	       lea 12(sp),sp
   1145c:	       tst.w d0
   1145e:	   ,-- bne.s 11464 <builtIn_stopMusic+0x28>
   11460:	   |   moveq #1,d0
   11462:	,--|-- bra.s 11482 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   11464:	|  '-> moveq #24,d0
   11466:	|      add.l 12(sp),d0
   1146a:	|      move.l d0,-(sp)
   1146c:	|      jsr 163a2 <trimStack>
   11472:	|      addq.l #4,sp
	stopMOD (v);
   11474:	|      move.l (sp),d0
   11476:	|      move.l d0,-(sp)
   11478:	|      jsr dc2a <stopMOD>
   1147e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11480:	|      moveq #2,d0
}
   11482:	'----> addq.l #4,sp
   11484:	       rts

00011486 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   11486:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11488:	       movea.l 16(sp),a0
   1148c:	       move.l 24(a0),d0
   11490:	       move.l d0,-(sp)
   11492:	       pea 1 <_start+0x1>
   11496:	       move.l sp,d0
   11498:	       addq.l #8,d0
   1149a:	       move.l d0,-(sp)
   1149c:	       jsr 15a1e <getValueType>
   114a2:	       lea 12(sp),sp
   114a6:	       tst.w d0
   114a8:	   ,-- bne.s 114ae <builtIn_setMusicVolume+0x28>
   114aa:	   |   moveq #1,d0
   114ac:	,--|-- bra.s 11508 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   114ae:	|  '-> moveq #24,d0
   114b0:	|      add.l 16(sp),d0
   114b4:	|      move.l d0,-(sp)
   114b6:	|      jsr 163a2 <trimStack>
   114bc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114be:	|      movea.l 16(sp),a0
   114c2:	|      move.l 24(a0),d0
   114c6:	|      move.l d0,-(sp)
   114c8:	|      pea 1 <_start+0x1>
   114cc:	|      moveq #12,d0
   114ce:	|      add.l sp,d0
   114d0:	|      move.l d0,-(sp)
   114d2:	|      jsr 15a1e <getValueType>
   114d8:	|      lea 12(sp),sp
   114dc:	|      tst.w d0
   114de:	|  ,-- bne.s 114e4 <builtIn_setMusicVolume+0x5e>
   114e0:	|  |   moveq #1,d0
   114e2:	+--|-- bra.s 11508 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   114e4:	|  '-> moveq #24,d0
   114e6:	|      add.l 16(sp),d0
   114ea:	|      move.l d0,-(sp)
   114ec:	|      jsr 163a2 <trimStack>
   114f2:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   114f4:	|      move.l (sp),d1
   114f6:	|      move.l 4(sp),d0
   114fa:	|      move.l d1,-(sp)
   114fc:	|      move.l d0,-(sp)
   114fe:	|      jsr dc10 <setMusicVolume>
   11504:	|      addq.l #8,sp
	return BR_CONTINUE;
   11506:	|      moveq #2,d0
}
   11508:	'----> addq.l #8,sp
   1150a:	       rts

0001150c <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1150c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1150e:	       movea.l 12(sp),a0
   11512:	       move.l 24(a0),d0
   11516:	       move.l d0,-(sp)
   11518:	       pea 1 <_start+0x1>
   1151c:	       move.l sp,d0
   1151e:	       addq.l #8,d0
   11520:	       move.l d0,-(sp)
   11522:	       jsr 15a1e <getValueType>
   11528:	       lea 12(sp),sp
   1152c:	       tst.w d0
   1152e:	   ,-- bne.s 11534 <builtIn_setDefaultMusicVolume+0x28>
   11530:	   |   moveq #1,d0
   11532:	,--|-- bra.s 11552 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   11534:	|  '-> moveq #24,d0
   11536:	|      add.l 12(sp),d0
   1153a:	|      move.l d0,-(sp)
   1153c:	|      jsr 163a2 <trimStack>
   11542:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   11544:	|      move.l (sp),d0
   11546:	|      move.l d0,-(sp)
   11548:	|      jsr dbf4 <setDefaultMusicVolume>
   1154e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11550:	|      moveq #2,d0
}
   11552:	'----> addq.l #4,sp
   11554:	       rts

00011556 <builtIn_playSound>:

builtIn(playSound)
{
   11556:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11558:	       movea.l 12(sp),a0
   1155c:	       move.l 24(a0),d0
   11560:	       move.l d0,-(sp)
   11562:	       pea 5 <_start+0x5>
   11566:	       move.l sp,d0
   11568:	       addq.l #8,d0
   1156a:	       move.l d0,-(sp)
   1156c:	       jsr 15a1e <getValueType>
   11572:	       lea 12(sp),sp
   11576:	       tst.w d0
   11578:	   ,-- bne.s 1157e <builtIn_playSound+0x28>
   1157a:	   |   moveq #1,d0
   1157c:	,--|-- bra.s 115a6 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1157e:	|  '-> moveq #24,d0
   11580:	|      add.l 12(sp),d0
   11584:	|      move.l d0,-(sp)
   11586:	|      jsr 163a2 <trimStack>
   1158c:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1158e:	|      move.l (sp),d0
   11590:	|      clr.l -(sp)
   11592:	|      move.l d0,-(sp)
   11594:	|      jsr dc18 <startSound>
   1159a:	|      addq.l #8,sp
   1159c:	|      tst.w d0
   1159e:	|  ,-- bne.s 115a4 <builtIn_playSound+0x4e>
   115a0:	|  |   moveq #2,d0
   115a2:	+--|-- bra.s 115a6 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   115a4:	|  '-> moveq #2,d0
}
   115a6:	'----> addq.l #4,sp
   115a8:	       rts

000115aa <builtIn_loopSound>:

builtIn(loopSound)
{
   115aa:	             lea -28(sp),sp
   115ae:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   115b0:	             tst.l 36(sp)
   115b4:	         ,-- bgt.s 115ca <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   115b6:	         |   pea 1b280 <PutChar+0x22e0>
   115bc:	         |   jsr 184fe <KPrintF>
   115c2:	         |   addq.l #4,sp
		return BR_ERROR;
   115c4:	         |   moveq #1,d0
   115c6:	,--------|-- bra.w 11786 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   115ca:	|        '-> moveq #1,d0
   115cc:	|            cmp.l 36(sp),d0
   115d0:	|     ,----- blt.s 1162c <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   115d2:	|     |      movea.l 40(sp),a0
   115d6:	|     |      move.l 24(a0),d0
   115da:	|     |      move.l d0,-(sp)
   115dc:	|     |      pea 5 <_start+0x5>
   115e0:	|     |      lea 16(sp),a0
   115e4:	|     |      move.l a0,-(sp)
   115e6:	|     |      jsr 15a1e <getValueType>
   115ec:	|     |      lea 12(sp),sp
   115f0:	|     |      tst.w d0
   115f2:	|     |  ,-- bne.s 115fa <builtIn_loopSound+0x50>
   115f4:	|     |  |   moveq #1,d0
   115f6:	+-----|--|-- bra.w 11786 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   115fa:	|     |  '-> moveq #24,d0
   115fc:	|     |      add.l 40(sp),d0
   11600:	|     |      move.l d0,-(sp)
   11602:	|     |      jsr 163a2 <trimStack>
   11608:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   1160a:	|     |      move.l 8(sp),d0
   1160e:	|     |      pea 1 <_start+0x1>
   11612:	|     |      move.l d0,-(sp)
   11614:	|     |      jsr dc18 <startSound>
   1161a:	|     |      addq.l #8,sp
   1161c:	|     |      tst.w d0
   1161e:	|     |  ,-- bne.s 11626 <builtIn_loopSound+0x7c>
   11620:	|     |  |   moveq #2,d0
   11622:	+-----|--|-- bra.w 11786 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   11626:	|     |  '-> moveq #2,d0
   11628:	+-----|----- bra.w 11786 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1162c:	|     '----> moveq #2,d1
   1162e:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   11632:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   11636:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1163a:	|            movea.l 40(sp),a0
   1163e:	|            movea.l 24(a0),a0
   11642:	|            move.l (a0),d0
   11644:	|            moveq #5,d1
   11646:	|            cmp.l d0,d1
   11648:	|  ,-------- beq.w 11720 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1164c:	|  |         movea.l 40(sp),a0
   11650:	|  |         move.l 24(a0),d0
   11654:	|  |         move.l d0,-(sp)
   11656:	|  |         pea 1 <_start+0x1>
   1165a:	|  |         lea 12(sp),a0
   1165e:	|  |         move.l a0,-(sp)
   11660:	|  |         jsr 15a1e <getValueType>
   11666:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1166a:	|  |         moveq #24,d0
   1166c:	|  |         add.l 40(sp),d0
   11670:	|  |         move.l d0,-(sp)
   11672:	|  |         jsr 163a2 <trimStack>
   11678:	|  |         addq.l #4,sp
			numParams--;
   1167a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1167e:	|  +-------- bra.w 11720 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   11682:	|  |  ,----> movea.l 40(sp),a0
   11686:	|  |  |      move.l 24(a0),d0
   1168a:	|  |  |      move.l d0,-(sp)
   1168c:	|  |  |      pea 5 <_start+0x5>
   11690:	|  |  |      lea 16(sp),a0
   11694:	|  |  |      move.l a0,-(sp)
   11696:	|  |  |      jsr 15a1e <getValueType>
   1169c:	|  |  |      lea 12(sp),sp
   116a0:	|  |  |      tst.w d0
   116a2:	|  |  |  ,-- bne.s 116b8 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   116a4:	|  |  |  |   pea 1b2be <PutChar+0x231e>
   116aa:	|  |  |  |   jsr 184fe <KPrintF>
   116b0:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   116b2:	|  |  |  |   moveq #1,d0
   116b4:	+--|--|--|-- bra.w 11786 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   116b8:	|  |  |  '-> moveq #20,d0
   116ba:	|  |  |      move.l d0,20(sp)
   116be:	|  |  |      clr.l 16(sp)
   116c2:	|  |  |      move.l 1e876 <SysBase>,d0
   116c8:	|  |  |      movea.l d0,a6
   116ca:	|  |  |      move.l 20(sp),d0
   116ce:	|  |  |      move.l 16(sp),d1
   116d2:	|  |  |      jsr -684(a6)
   116d6:	|  |  |      move.l d0,12(sp)
   116da:	|  |  |      move.l 12(sp),d0
   116de:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   116e2:	|  |  |  ,-- bne.s 116ea <builtIn_loopSound+0x140>
   116e4:	|  |  |  |   moveq #1,d0
   116e6:	+--|--|--|-- bra.w 11786 <builtIn_loopSound+0x1dc>

			s->next = old;
   116ea:	|  |  |  '-> movea.l 28(sp),a0
   116ee:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   116f4:	|  |  |      movea.l 28(sp),a0
   116f8:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   116fc:	|  |  |      move.l 8(sp),d0
   11700:	|  |  |      movea.l 28(sp),a0
   11704:	|  |  |      move.l d0,(a0)
			old = s;
   11706:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1170c:	|  |  |      moveq #24,d0
   1170e:	|  |  |      add.l 40(sp),d0
   11712:	|  |  |      move.l d0,-(sp)
   11714:	|  |  |      jsr 163a2 <trimStack>
   1171a:	|  |  |      addq.l #4,sp
			numParams--;
   1171c:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   11720:	|  '--|----> tst.l 36(sp)
   11724:	|     '----- bne.w 11682 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   11728:	|        ,-- bra.s 11734 <builtIn_loopSound+0x18a>
   1172a:	|     ,--|-> movea.l 28(sp),a0
   1172e:	|     |  |   move.l 4(a0),28(sp)
   11734:	|     |  '-> movea.l 28(sp),a0
   11738:	|     |      move.l 4(a0),d0
   1173c:	|     '----- bne.s 1172a <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   1173e:	|            move.l 4(sp),d0
   11742:	|            moveq #1,d1
   11744:	|            cmp.l d0,d1
   11746:	|     ,----- bge.s 1175e <builtIn_loopSound+0x1b4>
			s->next = old;
   11748:	|     |      movea.l 28(sp),a0
   1174c:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   11752:	|     |      movea.l 24(sp),a0
   11756:	|     |      move.l 28(sp),8(a0)
   1175c:	|     |  ,-- bra.s 1176e <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   1175e:	|     '--|-> move.l 4(sp),d0
   11762:	|        +-- beq.s 1176e <builtIn_loopSound+0x1c4>
			s->next = s;
   11764:	|        |   movea.l 28(sp),a0
   11768:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   1176e:	|        '-> movea.l 24(sp),a0
   11772:	|            moveq #-1,d0
   11774:	|            move.l d0,16(a0)
		playSoundList(old);
   11778:	|            move.l 24(sp),-(sp)
   1177c:	|            jsr db92 <playSoundList>
   11782:	|            addq.l #4,sp
		return BR_CONTINUE;
   11784:	|            moveq #2,d0
	}
}
   11786:	'----------> movea.l (sp)+,a6
   11788:	             lea 28(sp),sp
   1178c:	             rts

0001178e <builtIn_stopSound>:

builtIn(stopSound)
{
   1178e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11790:	       movea.l 12(sp),a0
   11794:	       move.l 24(a0),d0
   11798:	       move.l d0,-(sp)
   1179a:	       pea 5 <_start+0x5>
   1179e:	       move.l sp,d0
   117a0:	       addq.l #8,d0
   117a2:	       move.l d0,-(sp)
   117a4:	       jsr 15a1e <getValueType>
   117aa:	       lea 12(sp),sp
   117ae:	       tst.w d0
   117b0:	   ,-- bne.s 117b6 <builtIn_stopSound+0x28>
   117b2:	   |   moveq #1,d0
   117b4:	,--|-- bra.s 117d4 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   117b6:	|  '-> moveq #24,d0
   117b8:	|      add.l 12(sp),d0
   117bc:	|      move.l d0,-(sp)
   117be:	|      jsr 163a2 <trimStack>
   117c4:	|      addq.l #4,sp
	huntKillSound (v);
   117c6:	|      move.l (sp),d0
   117c8:	|      move.l d0,-(sp)
   117ca:	|      jsr db8a <huntKillSound>
   117d0:	|      addq.l #4,sp
	return BR_CONTINUE;
   117d2:	|      moveq #2,d0
}
   117d4:	'----> addq.l #4,sp
   117d6:	       rts

000117d8 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   117d8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117da:	       movea.l 12(sp),a0
   117de:	       move.l 24(a0),d0
   117e2:	       move.l d0,-(sp)
   117e4:	       pea 1 <_start+0x1>
   117e8:	       move.l sp,d0
   117ea:	       addq.l #8,d0
   117ec:	       move.l d0,-(sp)
   117ee:	       jsr 15a1e <getValueType>
   117f4:	       lea 12(sp),sp
   117f8:	       tst.w d0
   117fa:	   ,-- bne.s 11800 <builtIn_setDefaultSoundVolume+0x28>
   117fc:	   |   moveq #1,d0
   117fe:	,--|-- bra.s 1181e <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   11800:	|  '-> moveq #24,d0
   11802:	|      add.l 12(sp),d0
   11806:	|      move.l d0,-(sp)
   11808:	|      jsr 163a2 <trimStack>
   1180e:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   11810:	|      move.l (sp),d0
   11812:	|      move.l d0,-(sp)
   11814:	|      jsr dc00 <setDefaultSoundVolume>
   1181a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1181c:	|      moveq #2,d0
}
   1181e:	'----> addq.l #4,sp
   11820:	       rts

00011822 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   11822:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11824:	       movea.l 16(sp),a0
   11828:	       move.l 24(a0),d0
   1182c:	       move.l d0,-(sp)
   1182e:	       pea 1 <_start+0x1>
   11832:	       move.l sp,d0
   11834:	       addq.l #8,d0
   11836:	       move.l d0,-(sp)
   11838:	       jsr 15a1e <getValueType>
   1183e:	       lea 12(sp),sp
   11842:	       tst.w d0
   11844:	   ,-- bne.s 1184a <builtIn_setSoundVolume+0x28>
   11846:	   |   moveq #1,d0
   11848:	,--|-- bra.s 118a4 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1184a:	|  '-> moveq #24,d0
   1184c:	|      add.l 16(sp),d0
   11850:	|      move.l d0,-(sp)
   11852:	|      jsr 163a2 <trimStack>
   11858:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1185a:	|      movea.l 16(sp),a0
   1185e:	|      move.l 24(a0),d0
   11862:	|      move.l d0,-(sp)
   11864:	|      pea 5 <_start+0x5>
   11868:	|      moveq #12,d0
   1186a:	|      add.l sp,d0
   1186c:	|      move.l d0,-(sp)
   1186e:	|      jsr 15a1e <getValueType>
   11874:	|      lea 12(sp),sp
   11878:	|      tst.w d0
   1187a:	|  ,-- bne.s 11880 <builtIn_setSoundVolume+0x5e>
   1187c:	|  |   moveq #1,d0
   1187e:	+--|-- bra.s 118a4 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   11880:	|  '-> moveq #24,d0
   11882:	|      add.l 16(sp),d0
   11886:	|      move.l d0,-(sp)
   11888:	|      jsr 163a2 <trimStack>
   1188e:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   11890:	|      move.l (sp),d1
   11892:	|      move.l 4(sp),d0
   11896:	|      move.l d1,-(sp)
   11898:	|      move.l d0,-(sp)
   1189a:	|      jsr dc14 <setSoundVolume>
   118a0:	|      addq.l #8,sp
	return BR_CONTINUE;
   118a2:	|      moveq #2,d0
}
   118a4:	'----> addq.l #8,sp
   118a6:	       rts

000118a8 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   118a8:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118ac:	       movea.l 20(sp),a0
   118b0:	       move.l 24(a0),d0
   118b4:	       move.l d0,-(sp)
   118b6:	       pea 1 <_start+0x1>
   118ba:	       moveq #12,d0
   118bc:	       add.l sp,d0
   118be:	       move.l d0,-(sp)
   118c0:	       jsr 15a1e <getValueType>
   118c6:	       lea 12(sp),sp
   118ca:	       tst.w d0
   118cc:	   ,-- bne.s 118d4 <builtIn_setSoundLoopPoints+0x2c>
   118ce:	   |   moveq #1,d0
   118d0:	,--|-- bra.w 1196c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   118d4:	|  '-> moveq #24,d0
   118d6:	|      add.l 20(sp),d0
   118da:	|      move.l d0,-(sp)
   118dc:	|      jsr 163a2 <trimStack>
   118e2:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118e4:	|      movea.l 20(sp),a0
   118e8:	|      move.l 24(a0),d0
   118ec:	|      move.l d0,-(sp)
   118ee:	|      pea 1 <_start+0x1>
   118f2:	|      lea 8(sp),a0
   118f6:	|      move.l a0,-(sp)
   118f8:	|      jsr 15a1e <getValueType>
   118fe:	|      lea 12(sp),sp
   11902:	|      tst.w d0
   11904:	|  ,-- bne.s 1190a <builtIn_setSoundLoopPoints+0x62>
   11906:	|  |   moveq #1,d0
   11908:	+--|-- bra.s 1196c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1190a:	|  '-> moveq #24,d0
   1190c:	|      add.l 20(sp),d0
   11910:	|      move.l d0,-(sp)
   11912:	|      jsr 163a2 <trimStack>
   11918:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1191a:	|      movea.l 20(sp),a0
   1191e:	|      move.l 24(a0),d0
   11922:	|      move.l d0,-(sp)
   11924:	|      pea 5 <_start+0x5>
   11928:	|      moveq #16,d0
   1192a:	|      add.l sp,d0
   1192c:	|      move.l d0,-(sp)
   1192e:	|      jsr 15a1e <getValueType>
   11934:	|      lea 12(sp),sp
   11938:	|      tst.w d0
   1193a:	|  ,-- bne.s 11940 <builtIn_setSoundLoopPoints+0x98>
   1193c:	|  |   moveq #1,d0
   1193e:	+--|-- bra.s 1196c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11940:	|  '-> moveq #24,d0
   11942:	|      add.l 20(sp),d0
   11946:	|      move.l d0,-(sp)
   11948:	|      jsr 163a2 <trimStack>
   1194e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   11950:	|      movea.l 4(sp),a0
   11954:	|      move.l (sp),d1
   11956:	|      move.l 8(sp),d0
   1195a:	|      move.l a0,-(sp)
   1195c:	|      move.l d1,-(sp)
   1195e:	|      move.l d0,-(sp)
   11960:	|      jsr dc0c <setSoundLoop>
   11966:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1196a:	|      moveq #2,d0
}
   1196c:	'----> lea 12(sp),sp
   11970:	       rts

00011972 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   11972:	          subq.l #4,sp
	KPrintF("running setFloor\n");
   11974:	          pea 1b2f5 <PutChar+0x2355>
   1197a:	          jsr 184fe <KPrintF>
   11980:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11982:	          movea.l 12(sp),a0
   11986:	          movea.l 24(a0),a0
   1198a:	          move.l (a0),d0
   1198c:	          moveq #5,d1
   1198e:	          cmp.l d0,d1
   11990:	,-------- bne.s 119d4 <builtIn_setFloor+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11992:	|         movea.l 12(sp),a0
   11996:	|         move.l 24(a0),d0
   1199a:	|         move.l d0,-(sp)
   1199c:	|         pea 5 <_start+0x5>
   119a0:	|         move.l sp,d0
   119a2:	|         addq.l #8,d0
   119a4:	|         move.l d0,-(sp)
   119a6:	|         jsr 15a1e <getValueType>
   119ac:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   119b0:	|         moveq #24,d0
   119b2:	|         add.l 12(sp),d0
   119b6:	|         move.l d0,-(sp)
   119b8:	|         jsr 163a2 <trimStack>
   119be:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   119c0:	|         move.l (sp),d0
   119c2:	|         move.l d0,-(sp)
   119c4:	|         jsr 17ca8 <setFloor>
   119ca:	|         addq.l #4,sp
   119cc:	|         tst.w d0
   119ce:	|  ,----- bne.s 119ea <builtIn_setFloor+0x78>
   119d0:	|  |      moveq #1,d0
   119d2:	|  |  ,-- bra.s 119ec <builtIn_setFloor+0x7a>
	} else {
		trimStack (&fun -> stack);
   119d4:	'--|--|-> moveq #24,d0
   119d6:	   |  |   add.l 12(sp),d0
   119da:	   |  |   move.l d0,-(sp)
   119dc:	   |  |   jsr 163a2 <trimStack>
   119e2:	   |  |   addq.l #4,sp
		setFloorNull ();
   119e4:	   |  |   jsr 18422 <setFloorNull>
	}
	return BR_CONTINUE;
   119ea:	   '--|-> moveq #2,d0
}
   119ec:	      '-> addq.l #4,sp
   119ee:	          rts

000119f0 <builtIn_showFloor>:

builtIn(showFloor)
{
	KPrintF("running showFloor\n");
   119f0:	pea 1b307 <PutChar+0x2367>
   119f6:	jsr 184fe <KPrintF>
   119fc:	addq.l #4,sp
	UNUSEDALL
	drawFloor ();
   119fe:	jsr 17524 <drawFloor>
	return BR_CONTINUE;
   11a04:	moveq #2,d0
}
   11a06:	rts

00011a08 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   11a08:	          subq.l #4,sp
	KPrintF("running setZBuffer\n");
   11a0a:	          pea 1b31a <PutChar+0x237a>
   11a10:	          jsr 184fe <KPrintF>
   11a16:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11a18:	          movea.l 12(sp),a0
   11a1c:	          movea.l 24(a0),a0
   11a20:	          move.l (a0),d0
   11a22:	          moveq #5,d1
   11a24:	          cmp.l d0,d1
   11a26:	,-------- bne.s 11a6a <builtIn_setZBuffer+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11a28:	|         movea.l 12(sp),a0
   11a2c:	|         move.l 24(a0),d0
   11a30:	|         move.l d0,-(sp)
   11a32:	|         pea 5 <_start+0x5>
   11a36:	|         move.l sp,d0
   11a38:	|         addq.l #8,d0
   11a3a:	|         move.l d0,-(sp)
   11a3c:	|         jsr 15a1e <getValueType>
   11a42:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11a46:	|         moveq #24,d0
   11a48:	|         add.l 12(sp),d0
   11a4c:	|         move.l d0,-(sp)
   11a4e:	|         jsr 163a2 <trimStack>
   11a54:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   11a56:	|         move.l (sp),d0
   11a58:	|         move.l d0,-(sp)
   11a5a:	|         jsr 90ba <setZBuffer>
   11a60:	|         addq.l #4,sp
   11a62:	|         tst.w d0
   11a64:	|  ,----- bne.s 11a80 <builtIn_setZBuffer+0x78>
   11a66:	|  |      moveq #1,d0
   11a68:	|  |  ,-- bra.s 11a82 <builtIn_setZBuffer+0x7a>
	} else {
		trimStack (&fun -> stack);
   11a6a:	'--|--|-> moveq #24,d0
   11a6c:	   |  |   add.l 12(sp),d0
   11a70:	   |  |   move.l d0,-(sp)
   11a72:	   |  |   jsr 163a2 <trimStack>
   11a78:	   |  |   addq.l #4,sp
		killZBuffer ();
   11a7a:	   |  |   jsr 9054 <killZBuffer>
	}
	return BR_CONTINUE;
   11a80:	   '--|-> moveq #2,d0
}
   11a82:	      '-> addq.l #4,sp
   11a84:	          rts

00011a86 <builtIn_setLightMap>:

builtIn(setLightMap)
{
	KPrintF("running setLightMap\n");
   11a86:	pea 1b32e <PutChar+0x238e>
   11a8c:	jsr 184fe <KPrintF>
   11a92:	addq.l #4,sp

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   11a94:	pea 1b343 <PutChar+0x23a3>
   11a9a:	jsr 184fe <KPrintF>
   11aa0:	addq.l #4,sp
	return BR_CONTINUE;
   11aa2:	moveq #2,d0
}
   11aa4:	rts

00011aa6 <builtIn_setSpeechMode>:
#pragma mark -
#pragma mark Objects

builtIn(setSpeechMode)
{
	KPrintF("running setSpeechMode\n");
   11aa6:	          pea 1b35c <PutChar+0x23bc>
   11aac:	          jsr 184fe <KPrintF>
   11ab2:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ab4:	          movea.l 8(sp),a0
   11ab8:	          move.l 24(a0),d0
   11abc:	          move.l d0,-(sp)
   11abe:	          pea 1 <_start+0x1>
   11ac2:	          pea 1e944 <speechMode>
   11ac8:	          jsr 15a1e <getValueType>
   11ace:	          lea 12(sp),sp
   11ad2:	          tst.w d0
   11ad4:	      ,-- bne.s 11ada <builtIn_setSpeechMode+0x34>
   11ad6:	      |   moveq #1,d0
   11ad8:	,-----|-- bra.s 11b12 <builtIn_setSpeechMode+0x6c>
	trimStack (&fun -> stack);
   11ada:	|     '-> moveq #24,d0
   11adc:	|         add.l 8(sp),d0
   11ae0:	|         move.l d0,-(sp)
   11ae2:	|         jsr 163a2 <trimStack>
   11ae8:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   11aea:	|         move.l 1e944 <speechMode>,d0
   11af0:	|     ,-- bmi.s 11afe <builtIn_setSpeechMode+0x58>
   11af2:	|     |   move.l 1e944 <speechMode>,d0
   11af8:	|     |   moveq #2,d1
   11afa:	|     |   cmp.l d0,d1
   11afc:	|  ,--|-- bge.s 11b10 <builtIn_setSpeechMode+0x6a>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   11afe:	|  |  '-> pea 1b373 <PutChar+0x23d3>
   11b04:	|  |      jsr 184fe <KPrintF>
   11b0a:	|  |      addq.l #4,sp
		return BR_ERROR;
   11b0c:	|  |      moveq #1,d0
   11b0e:	+--|----- bra.s 11b12 <builtIn_setSpeechMode+0x6c>
	}
	return BR_CONTINUE;
   11b10:	|  '----> moveq #2,d0
}
   11b12:	'-------> rts

00011b14 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   11b14:	       subq.l #4,sp
	KPrintF("running somethingSpeaking\n");
   11b16:	       pea 1b3b1 <PutChar+0x2411>
   11b1c:	       jsr 184fe <KPrintF>
   11b22:	       addq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   11b24:	       jsr 447a <isThereAnySpeechGoingOn>
   11b2a:	       move.l d0,(sp)
	if (i == -1) {
   11b2c:	       moveq #-1,d0
   11b2e:	       cmp.l (sp),d0
   11b30:	,----- bne.s 11b4c <builtIn_somethingSpeaking+0x38>
		setVariable (&fun -> reg, SVT_INT, 0);
   11b32:	|      moveq #28,d0
   11b34:	|      add.l 12(sp),d0
   11b38:	|      clr.l -(sp)
   11b3a:	|      pea 1 <_start+0x1>
   11b3e:	|      move.l d0,-(sp)
   11b40:	|      jsr 16310 <setVariable>
   11b46:	|      lea 12(sp),sp
   11b4a:	|  ,-- bra.s 11b64 <builtIn_somethingSpeaking+0x50>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11b4c:	'--|-> moveq #28,d0
   11b4e:	   |   add.l 12(sp),d0
   11b52:	   |   move.l (sp),-(sp)
   11b54:	   |   pea 7 <_start+0x7>
   11b58:	   |   move.l d0,-(sp)
   11b5a:	   |   jsr 16310 <setVariable>
   11b60:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b64:	   '-> moveq #2,d0
}
   11b66:	       addq.l #4,sp
   11b68:	       rts

00011b6a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	KPrintF("running skipSpeech\n");
   11b6a:	pea 1b3cc <PutChar+0x242c>
   11b70:	jsr 184fe <KPrintF>
   11b76:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   11b78:	jsr 702a <killSpeechTimers>
	return BR_CONTINUE;
   11b7e:	moveq #2,d0
}
   11b80:	rts

00011b82 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	KPrintF("running getOverObject\n");
   11b82:	       pea 1b3e0 <PutChar+0x2440>
   11b88:	       jsr 184fe <KPrintF>
   11b8e:	       addq.l #4,sp
	UNUSEDALL
	if (overRegion)
   11b90:	       move.l 1e98a <overRegion>,d0
   11b96:	,----- beq.s 11bc0 <builtIn_getOverObject+0x3e>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11b98:	|      movea.l 1e98a <overRegion>,a0
   11b9e:	|      movea.l 28(a0),a0
   11ba2:	|      move.l 4(a0),d1
   11ba6:	|      moveq #28,d0
   11ba8:	|      add.l 8(sp),d0
   11bac:	|      move.l d1,-(sp)
   11bae:	|      pea 7 <_start+0x7>
   11bb2:	|      move.l d0,-(sp)
   11bb4:	|      jsr 16310 <setVariable>
   11bba:	|      lea 12(sp),sp
   11bbe:	|  ,-- bra.s 11bd8 <builtIn_getOverObject+0x56>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   11bc0:	'--|-> moveq #28,d0
   11bc2:	   |   add.l 8(sp),d0
   11bc6:	   |   clr.l -(sp)
   11bc8:	   |   pea 1 <_start+0x1>
   11bcc:	   |   move.l d0,-(sp)
   11bce:	   |   jsr 16310 <setVariable>
   11bd4:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   11bd8:	   '-> moveq #2,d0
}
   11bda:	       rts

00011bdc <builtIn_rename>:

builtIn(rename)
{
   11bdc:	       lea -16(sp),sp
   11be0:	       move.l a6,-(sp)
	KPrintF("running rename\n");
   11be2:	       pea 1b3f7 <PutChar+0x2457>
   11be8:	       jsr 184fe <KPrintF>
   11bee:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11bf0:	       movea.l 28(sp),a0
   11bf4:	       move.l 24(a0),d0
   11bf8:	       move.l d0,-(sp)
   11bfa:	       jsr 15ff4 <getTextFromAnyVar>
   11c00:	       addq.l #4,sp
   11c02:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11c06:	   ,-- bne.s 11c0c <builtIn_rename+0x30>
   11c08:	   |   moveq #1,d0
   11c0a:	,--|-- bra.s 11c86 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11c0c:	|  '-> moveq #24,d0
   11c0e:	|      add.l 28(sp),d0
   11c12:	|      move.l d0,-(sp)
   11c14:	|      jsr 163a2 <trimStack>
   11c1a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   11c1c:	|      movea.l 28(sp),a0
   11c20:	|      move.l 24(a0),d0
   11c24:	|      move.l d0,-(sp)
   11c26:	|      pea 7 <_start+0x7>
   11c2a:	|      lea 12(sp),a0
   11c2e:	|      move.l a0,-(sp)
   11c30:	|      jsr 15a1e <getValueType>
   11c36:	|      lea 12(sp),sp
   11c3a:	|      tst.w d0
   11c3c:	|  ,-- bne.s 11c42 <builtIn_rename+0x66>
   11c3e:	|  |   moveq #1,d0
   11c40:	+--|-- bra.s 11c86 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11c42:	|  '-> moveq #24,d0
   11c44:	|      add.l 28(sp),d0
   11c48:	|      move.l d0,-(sp)
   11c4a:	|      jsr 163a2 <trimStack>
   11c50:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11c52:	|      move.l 4(sp),d0
   11c56:	|      move.l d0,-(sp)
   11c58:	|      jsr df58 <findObjectType>
   11c5e:	|      addq.l #4,sp
   11c60:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11c64:	|      movea.l 12(sp),a0
   11c68:	|      move.l (a0),8(sp)
   11c6c:	|      move.l 1e876 <SysBase>,d0
   11c72:	|      movea.l d0,a6
   11c74:	|      movea.l 8(sp),a1
   11c78:	|      jsr -690(a6)
	o->screenName = newText;
   11c7c:	|      movea.l 12(sp),a0
   11c80:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11c84:	|      moveq #2,d0
}
   11c86:	'----> movea.l (sp)+,a6
   11c88:	       lea 16(sp),sp
   11c8c:	       rts

00011c8e <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11c8e:	          lea -12(sp),sp
	KPrintF("running getObjectX\n");
   11c92:	          pea 1b407 <PutChar+0x2467>
   11c98:	          jsr 184fe <KPrintF>
   11c9e:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca0:	          movea.l 20(sp),a0
   11ca4:	          move.l 24(a0),d0
   11ca8:	          move.l d0,-(sp)
   11caa:	          pea 7 <_start+0x7>
   11cae:	          lea 8(sp),a0
   11cb2:	          move.l a0,-(sp)
   11cb4:	          jsr 15a1e <getValueType>
   11cba:	          lea 12(sp),sp
   11cbe:	          tst.w d0
   11cc0:	      ,-- bne.s 11cc8 <builtIn_getObjectX+0x3a>
   11cc2:	      |   moveq #1,d0
   11cc4:	,-----|-- bra.w 11d64 <builtIn_getObjectX+0xd6>
	trimStack (&fun -> stack);
   11cc8:	|     '-> moveq #24,d0
   11cca:	|         add.l 20(sp),d0
   11cce:	|         move.l d0,-(sp)
   11cd0:	|         jsr 163a2 <trimStack>
   11cd6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11cd8:	|         move.l (sp),d0
   11cda:	|         move.l d0,-(sp)
   11cdc:	|         jsr afea <findPerson>
   11ce2:	|         addq.l #4,sp
   11ce4:	|         move.l d0,8(sp)
	if (pers) {
   11ce8:	|     ,-- beq.s 11d16 <builtIn_getObjectX+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   11cea:	|     |   movea.l 8(sp),a0
   11cee:	|     |   move.l (a0),d0
   11cf0:	|     |   move.l d0,-(sp)
   11cf2:	|     |   jsr 188c8 <__fixsfsi>
   11cf8:	|     |   addq.l #4,sp
   11cfa:	|     |   move.l d0,d1
   11cfc:	|     |   moveq #28,d0
   11cfe:	|     |   add.l 20(sp),d0
   11d02:	|     |   move.l d1,-(sp)
   11d04:	|     |   pea 1 <_start+0x1>
   11d08:	|     |   move.l d0,-(sp)
   11d0a:	|     |   jsr 16310 <setVariable>
   11d10:	|     |   lea 12(sp),sp
   11d14:	|  ,--|-- bra.s 11d62 <builtIn_getObjectX+0xd4>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11d16:	|  |  '-> move.l (sp),d0
   11d18:	|  |      move.l d0,-(sp)
   11d1a:	|  |      jsr 16ce0 <getRegionForObject>
   11d20:	|  |      addq.l #4,sp
   11d22:	|  |      move.l d0,4(sp)
		if (la) {
   11d26:	|  |  ,-- beq.s 11d4a <builtIn_getObjectX+0xbc>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11d28:	|  |  |   movea.l 4(sp),a0
   11d2c:	|  |  |   move.l 16(a0),d1
   11d30:	|  |  |   moveq #28,d0
   11d32:	|  |  |   add.l 20(sp),d0
   11d36:	|  |  |   move.l d1,-(sp)
   11d38:	|  |  |   pea 1 <_start+0x1>
   11d3c:	|  |  |   move.l d0,-(sp)
   11d3e:	|  |  |   jsr 16310 <setVariable>
   11d44:	|  |  |   lea 12(sp),sp
   11d48:	|  +--|-- bra.s 11d62 <builtIn_getObjectX+0xd4>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11d4a:	|  |  '-> moveq #28,d0
   11d4c:	|  |      add.l 20(sp),d0
   11d50:	|  |      clr.l -(sp)
   11d52:	|  |      pea 1 <_start+0x1>
   11d56:	|  |      move.l d0,-(sp)
   11d58:	|  |      jsr 16310 <setVariable>
   11d5e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11d62:	|  '----> moveq #2,d0
}
   11d64:	'-------> lea 12(sp),sp
   11d68:	          rts

00011d6a <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11d6a:	          lea -12(sp),sp
	KPrintF("running getObjectY\n");
   11d6e:	          pea 1b41b <PutChar+0x247b>
   11d74:	          jsr 184fe <KPrintF>
   11d7a:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d7c:	          movea.l 20(sp),a0
   11d80:	          move.l 24(a0),d0
   11d84:	          move.l d0,-(sp)
   11d86:	          pea 7 <_start+0x7>
   11d8a:	          lea 8(sp),a0
   11d8e:	          move.l a0,-(sp)
   11d90:	          jsr 15a1e <getValueType>
   11d96:	          lea 12(sp),sp
   11d9a:	          tst.w d0
   11d9c:	      ,-- bne.s 11da4 <builtIn_getObjectY+0x3a>
   11d9e:	      |   moveq #1,d0
   11da0:	,-----|-- bra.w 11e42 <builtIn_getObjectY+0xd8>
	trimStack (&fun -> stack);
   11da4:	|     '-> moveq #24,d0
   11da6:	|         add.l 20(sp),d0
   11daa:	|         move.l d0,-(sp)
   11dac:	|         jsr 163a2 <trimStack>
   11db2:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11db4:	|         move.l (sp),d0
   11db6:	|         move.l d0,-(sp)
   11db8:	|         jsr afea <findPerson>
   11dbe:	|         addq.l #4,sp
   11dc0:	|         move.l d0,8(sp)
	if (pers) {
   11dc4:	|     ,-- beq.s 11df4 <builtIn_getObjectY+0x8a>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11dc6:	|     |   movea.l 8(sp),a0
   11dca:	|     |   move.l 4(a0),d0
   11dce:	|     |   move.l d0,-(sp)
   11dd0:	|     |   jsr 188c8 <__fixsfsi>
   11dd6:	|     |   addq.l #4,sp
   11dd8:	|     |   move.l d0,d1
   11dda:	|     |   moveq #28,d0
   11ddc:	|     |   add.l 20(sp),d0
   11de0:	|     |   move.l d1,-(sp)
   11de2:	|     |   pea 1 <_start+0x1>
   11de6:	|     |   move.l d0,-(sp)
   11de8:	|     |   jsr 16310 <setVariable>
   11dee:	|     |   lea 12(sp),sp
   11df2:	|  ,--|-- bra.s 11e40 <builtIn_getObjectY+0xd6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11df4:	|  |  '-> move.l (sp),d0
   11df6:	|  |      move.l d0,-(sp)
   11df8:	|  |      jsr 16ce0 <getRegionForObject>
   11dfe:	|  |      addq.l #4,sp
   11e00:	|  |      move.l d0,4(sp)
		if (la) {
   11e04:	|  |  ,-- beq.s 11e28 <builtIn_getObjectY+0xbe>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11e06:	|  |  |   movea.l 4(sp),a0
   11e0a:	|  |  |   move.l 20(a0),d1
   11e0e:	|  |  |   moveq #28,d0
   11e10:	|  |  |   add.l 20(sp),d0
   11e14:	|  |  |   move.l d1,-(sp)
   11e16:	|  |  |   pea 1 <_start+0x1>
   11e1a:	|  |  |   move.l d0,-(sp)
   11e1c:	|  |  |   jsr 16310 <setVariable>
   11e22:	|  |  |   lea 12(sp),sp
   11e26:	|  +--|-- bra.s 11e40 <builtIn_getObjectY+0xd6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11e28:	|  |  '-> moveq #28,d0
   11e2a:	|  |      add.l 20(sp),d0
   11e2e:	|  |      clr.l -(sp)
   11e30:	|  |      pea 1 <_start+0x1>
   11e34:	|  |      move.l d0,-(sp)
   11e36:	|  |      jsr 16310 <setVariable>
   11e3c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11e40:	|  '----> moveq #2,d0
}
   11e42:	'-------> lea 12(sp),sp
   11e46:	          rts

00011e48 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11e48:	       lea -32(sp),sp
   11e4c:	       movem.l d2-d5,-(sp)
	KPrintF("running addScreenRegion\n");
   11e50:	       pea 1b42f <PutChar+0x248f>
   11e56:	       jsr 184fe <KPrintF>
   11e5c:	       addq.l #4,sp
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e5e:	       movea.l 56(sp),a0
   11e62:	       move.l 24(a0),d0
   11e66:	       move.l d0,-(sp)
   11e68:	       pea 1 <_start+0x1>
   11e6c:	       lea 28(sp),a0
   11e70:	       move.l a0,-(sp)
   11e72:	       jsr 15a1e <getValueType>
   11e78:	       lea 12(sp),sp
   11e7c:	       tst.w d0
   11e7e:	   ,-- bne.s 11e86 <builtIn_addScreenRegion+0x3e>
   11e80:	   |   moveq #1,d0
   11e82:	,--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e86:	|  '-> moveq #24,d0
   11e88:	|      add.l 56(sp),d0
   11e8c:	|      move.l d0,-(sp)
   11e8e:	|      jsr 163a2 <trimStack>
   11e94:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e96:	|      movea.l 56(sp),a0
   11e9a:	|      move.l 24(a0),d0
   11e9e:	|      move.l d0,-(sp)
   11ea0:	|      pea 1 <_start+0x1>
   11ea4:	|      moveq #48,d0
   11ea6:	|      add.l sp,d0
   11ea8:	|      move.l d0,-(sp)
   11eaa:	|      jsr 15a1e <getValueType>
   11eb0:	|      lea 12(sp),sp
   11eb4:	|      tst.w d0
   11eb6:	|  ,-- bne.s 11ebe <builtIn_addScreenRegion+0x76>
   11eb8:	|  |   moveq #1,d0
   11eba:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11ebe:	|  '-> moveq #24,d0
   11ec0:	|      add.l 56(sp),d0
   11ec4:	|      move.l d0,-(sp)
   11ec6:	|      jsr 163a2 <trimStack>
   11ecc:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ece:	|      movea.l 56(sp),a0
   11ed2:	|      move.l 24(a0),d0
   11ed6:	|      move.l d0,-(sp)
   11ed8:	|      pea 1 <_start+0x1>
   11edc:	|      moveq #52,d0
   11ede:	|      add.l sp,d0
   11ee0:	|      move.l d0,-(sp)
   11ee2:	|      jsr 15a1e <getValueType>
   11ee8:	|      lea 12(sp),sp
   11eec:	|      tst.w d0
   11eee:	|  ,-- bne.s 11ef6 <builtIn_addScreenRegion+0xae>
   11ef0:	|  |   moveq #1,d0
   11ef2:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11ef6:	|  '-> moveq #24,d0
   11ef8:	|      add.l 56(sp),d0
   11efc:	|      move.l d0,-(sp)
   11efe:	|      jsr 163a2 <trimStack>
   11f04:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f06:	|      movea.l 56(sp),a0
   11f0a:	|      move.l 24(a0),d0
   11f0e:	|      move.l d0,-(sp)
   11f10:	|      pea 1 <_start+0x1>
   11f14:	|      lea 32(sp),a0
   11f18:	|      move.l a0,-(sp)
   11f1a:	|      jsr 15a1e <getValueType>
   11f20:	|      lea 12(sp),sp
   11f24:	|      tst.w d0
   11f26:	|  ,-- bne.s 11f2e <builtIn_addScreenRegion+0xe6>
   11f28:	|  |   moveq #1,d0
   11f2a:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f2e:	|  '-> moveq #24,d0
   11f30:	|      add.l 56(sp),d0
   11f34:	|      move.l d0,-(sp)
   11f36:	|      jsr 163a2 <trimStack>
   11f3c:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f3e:	|      movea.l 56(sp),a0
   11f42:	|      move.l 24(a0),d0
   11f46:	|      move.l d0,-(sp)
   11f48:	|      pea 1 <_start+0x1>
   11f4c:	|      lea 36(sp),a0
   11f50:	|      move.l a0,-(sp)
   11f52:	|      jsr 15a1e <getValueType>
   11f58:	|      lea 12(sp),sp
   11f5c:	|      tst.w d0
   11f5e:	|  ,-- bne.s 11f66 <builtIn_addScreenRegion+0x11e>
   11f60:	|  |   moveq #1,d0
   11f62:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f66:	|  '-> moveq #24,d0
   11f68:	|      add.l 56(sp),d0
   11f6c:	|      move.l d0,-(sp)
   11f6e:	|      jsr 163a2 <trimStack>
   11f74:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f76:	|      movea.l 56(sp),a0
   11f7a:	|      move.l 24(a0),d0
   11f7e:	|      move.l d0,-(sp)
   11f80:	|      pea 1 <_start+0x1>
   11f84:	|      lea 40(sp),a0
   11f88:	|      move.l a0,-(sp)
   11f8a:	|      jsr 15a1e <getValueType>
   11f90:	|      lea 12(sp),sp
   11f94:	|      tst.w d0
   11f96:	|  ,-- bne.s 11f9e <builtIn_addScreenRegion+0x156>
   11f98:	|  |   moveq #1,d0
   11f9a:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f9e:	|  '-> moveq #24,d0
   11fa0:	|      add.l 56(sp),d0
   11fa4:	|      move.l d0,-(sp)
   11fa6:	|      jsr 163a2 <trimStack>
   11fac:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fae:	|      movea.l 56(sp),a0
   11fb2:	|      move.l 24(a0),d0
   11fb6:	|      move.l d0,-(sp)
   11fb8:	|      pea 1 <_start+0x1>
   11fbc:	|      lea 44(sp),a0
   11fc0:	|      move.l a0,-(sp)
   11fc2:	|      jsr 15a1e <getValueType>
   11fc8:	|      lea 12(sp),sp
   11fcc:	|      tst.w d0
   11fce:	|  ,-- bne.s 11fd6 <builtIn_addScreenRegion+0x18e>
   11fd0:	|  |   moveq #1,d0
   11fd2:	+--|-- bra.w 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11fd6:	|  '-> moveq #24,d0
   11fd8:	|      add.l 56(sp),d0
   11fdc:	|      move.l d0,-(sp)
   11fde:	|      jsr 163a2 <trimStack>
   11fe4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11fe6:	|      movea.l 56(sp),a0
   11fea:	|      move.l 24(a0),d0
   11fee:	|      move.l d0,-(sp)
   11ff0:	|      pea 7 <_start+0x7>
   11ff4:	|      lea 24(sp),a0
   11ff8:	|      move.l a0,-(sp)
   11ffa:	|      jsr 15a1e <getValueType>
   12000:	|      lea 12(sp),sp
   12004:	|      tst.w d0
   12006:	|  ,-- bne.s 1200c <builtIn_addScreenRegion+0x1c4>
   12008:	|  |   moveq #1,d0
   1200a:	+--|-- bra.s 12060 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   1200c:	|  '-> moveq #24,d0
   1200e:	|      add.l 56(sp),d0
   12012:	|      move.l d0,-(sp)
   12014:	|      jsr 163a2 <trimStack>
   1201a:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1201c:	|      move.l 16(sp),d5
   12020:	|      move.l 20(sp),d4
   12024:	|      move.l 40(sp),d3
   12028:	|      move.l 44(sp),d2
   1202c:	|      movea.l 24(sp),a1
   12030:	|      movea.l 28(sp),a0
   12034:	|      move.l 32(sp),d1
   12038:	|      move.l 36(sp),d0
   1203c:	|      move.l d5,-(sp)
   1203e:	|      move.l d4,-(sp)
   12040:	|      move.l d3,-(sp)
   12042:	|      move.l d2,-(sp)
   12044:	|      move.l a1,-(sp)
   12046:	|      move.l a0,-(sp)
   12048:	|      move.l d1,-(sp)
   1204a:	|      move.l d0,-(sp)
   1204c:	|      jsr 16b9a <addScreenRegion>
   12052:	|      lea 32(sp),sp
   12056:	|      tst.w d0
   12058:	|  ,-- beq.s 1205e <builtIn_addScreenRegion+0x216>
   1205a:	|  |   moveq #2,d0
   1205c:	+--|-- bra.s 12060 <builtIn_addScreenRegion+0x218>
	return BR_ERROR;
   1205e:	|  '-> moveq #1,d0

}
   12060:	'----> movem.l (sp)+,d2-d5
   12064:	       lea 32(sp),sp
   12068:	       rts

0001206a <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1206a:	       subq.l #4,sp
	KPrintF("running removeScreenRegion\n");
   1206c:	       pea 1b448 <PutChar+0x24a8>
   12072:	       jsr 184fe <KPrintF>
   12078:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1207a:	       movea.l 12(sp),a0
   1207e:	       move.l 24(a0),d0
   12082:	       move.l d0,-(sp)
   12084:	       pea 7 <_start+0x7>
   12088:	       move.l sp,d0
   1208a:	       addq.l #8,d0
   1208c:	       move.l d0,-(sp)
   1208e:	       jsr 15a1e <getValueType>
   12094:	       lea 12(sp),sp
   12098:	       tst.w d0
   1209a:	   ,-- bne.s 120a0 <builtIn_removeScreenRegion+0x36>
   1209c:	   |   moveq #1,d0
   1209e:	,--|-- bra.s 120be <builtIn_removeScreenRegion+0x54>
	trimStack (&fun -> stack);
   120a0:	|  '-> moveq #24,d0
   120a2:	|      add.l 12(sp),d0
   120a6:	|      move.l d0,-(sp)
   120a8:	|      jsr 163a2 <trimStack>
   120ae:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   120b0:	|      move.l (sp),d0
   120b2:	|      move.l d0,-(sp)
   120b4:	|      jsr 16e88 <removeScreenRegion>
   120ba:	|      addq.l #4,sp
	return BR_CONTINUE;
   120bc:	|      moveq #2,d0
}
   120be:	'----> addq.l #4,sp
   120c0:	       rts

000120c2 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	KPrintF("running showBoxes\n");
   120c2:	pea 1b464 <PutChar+0x24c4>
   120c8:	jsr 184fe <KPrintF>
   120ce:	addq.l #4,sp
	UNUSEDALL
	showBoxes ();
   120d0:	jsr 1700c <showBoxes>
	return BR_CONTINUE;
   120d6:	moveq #2,d0
}
   120d8:	rts

000120da <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	KPrintF("running removeAllScreenRegions\n");
   120da:	pea 1b477 <PutChar+0x24d7>
   120e0:	jsr 184fe <KPrintF>
   120e6:	addq.l #4,sp
	UNUSEDALL
	killAllRegions ();
   120e8:	jsr 16d0e <killAllRegions>
	return BR_CONTINUE;
   120ee:	moveq #2,d0
}
   120f0:	rts

000120f2 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   120f2:	       lea -16(sp),sp
	KPrintF("running addCharacter\n");
   120f6:	       pea 1b497 <PutChar+0x24f7>
   120fc:	       jsr 184fe <KPrintF>
   12102:	       addq.l #4,sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   12104:	       movea.l 24(sp),a0
   12108:	       move.l 24(a0),d0
   1210c:	       move.l d0,-(sp)
   1210e:	       jsr 156ca <getCostumeFromVar>
   12114:	       addq.l #4,sp
   12116:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1211a:	   ,-- bne.s 12122 <builtIn_addCharacter+0x30>
   1211c:	   |   moveq #1,d0
   1211e:	,--|-- bra.w 121fe <builtIn_addCharacter+0x10c>

	trimStack (&fun -> stack);
   12122:	|  '-> moveq #24,d0
   12124:	|      add.l 24(sp),d0
   12128:	|      move.l d0,-(sp)
   1212a:	|      jsr 163a2 <trimStack>
   12130:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12132:	|      movea.l 24(sp),a0
   12136:	|      move.l 24(a0),d0
   1213a:	|      move.l d0,-(sp)
   1213c:	|      pea 1 <_start+0x1>
   12140:	|      lea 12(sp),a0
   12144:	|      move.l a0,-(sp)
   12146:	|      jsr 15a1e <getValueType>
   1214c:	|      lea 12(sp),sp
   12150:	|      tst.w d0
   12152:	|  ,-- bne.s 1215a <builtIn_addCharacter+0x68>
   12154:	|  |   moveq #1,d0
   12156:	+--|-- bra.w 121fe <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   1215a:	|  '-> moveq #24,d0
   1215c:	|      add.l 24(sp),d0
   12160:	|      move.l d0,-(sp)
   12162:	|      jsr 163a2 <trimStack>
   12168:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1216a:	|      movea.l 24(sp),a0
   1216e:	|      move.l 24(a0),d0
   12172:	|      move.l d0,-(sp)
   12174:	|      pea 1 <_start+0x1>
   12178:	|      moveq #16,d0
   1217a:	|      add.l sp,d0
   1217c:	|      move.l d0,-(sp)
   1217e:	|      jsr 15a1e <getValueType>
   12184:	|      lea 12(sp),sp
   12188:	|      tst.w d0
   1218a:	|  ,-- bne.s 12190 <builtIn_addCharacter+0x9e>
   1218c:	|  |   moveq #1,d0
   1218e:	+--|-- bra.s 121fe <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   12190:	|  '-> moveq #24,d0
   12192:	|      add.l 24(sp),d0
   12196:	|      move.l d0,-(sp)
   12198:	|      jsr 163a2 <trimStack>
   1219e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121a0:	|      movea.l 24(sp),a0
   121a4:	|      move.l 24(a0),d0
   121a8:	|      move.l d0,-(sp)
   121aa:	|      pea 7 <_start+0x7>
   121ae:	|      lea 8(sp),a0
   121b2:	|      move.l a0,-(sp)
   121b4:	|      jsr 15a1e <getValueType>
   121ba:	|      lea 12(sp),sp
   121be:	|      tst.w d0
   121c0:	|  ,-- bne.s 121c6 <builtIn_addCharacter+0xd4>
   121c2:	|  |   moveq #1,d0
   121c4:	+--|-- bra.s 121fe <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   121c6:	|  '-> moveq #24,d0
   121c8:	|      add.l 24(sp),d0
   121cc:	|      move.l d0,-(sp)
   121ce:	|      jsr 163a2 <trimStack>
   121d4:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   121d6:	|      movea.l (sp),a0
   121d8:	|      move.l 4(sp),d1
   121dc:	|      move.l 8(sp),d0
   121e0:	|      move.l 12(sp),-(sp)
   121e4:	|      move.l a0,-(sp)
   121e6:	|      move.l d1,-(sp)
   121e8:	|      move.l d0,-(sp)
   121ea:	|      jsr 9be4 <addPerson>
   121f0:	|      lea 16(sp),sp
   121f4:	|      tst.w d0
   121f6:	|  ,-- beq.s 121fc <builtIn_addCharacter+0x10a>
   121f8:	|  |   moveq #2,d0
   121fa:	+--|-- bra.s 121fe <builtIn_addCharacter+0x10c>
	return BR_ERROR;
   121fc:	|  '-> moveq #1,d0
}
   121fe:	'----> lea 16(sp),sp
   12202:	       rts

00012204 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   12204:	       subq.l #4,sp
	KPrintF("running hideCharacter\n");
   12206:	       pea 1b4ad <PutChar+0x250d>
   1220c:	       jsr 184fe <KPrintF>
   12212:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12214:	       movea.l 12(sp),a0
   12218:	       move.l 24(a0),d0
   1221c:	       move.l d0,-(sp)
   1221e:	       pea 7 <_start+0x7>
   12222:	       move.l sp,d0
   12224:	       addq.l #8,d0
   12226:	       move.l d0,-(sp)
   12228:	       jsr 15a1e <getValueType>
   1222e:	       lea 12(sp),sp
   12232:	       tst.w d0
   12234:	   ,-- bne.s 1223a <builtIn_hideCharacter+0x36>
   12236:	   |   moveq #1,d0
   12238:	,--|-- bra.s 1225a <builtIn_hideCharacter+0x56>
	trimStack (&fun -> stack);
   1223a:	|  '-> moveq #24,d0
   1223c:	|      add.l 12(sp),d0
   12240:	|      move.l d0,-(sp)
   12242:	|      jsr 163a2 <trimStack>
   12248:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1224a:	|      move.l (sp),d0
   1224c:	|      move.l d0,-(sp)
   1224e:	|      clr.l -(sp)
   12250:	|      jsr c680 <setShown>
   12256:	|      addq.l #8,sp
	return BR_CONTINUE;
   12258:	|      moveq #2,d0
}
   1225a:	'----> addq.l #4,sp
   1225c:	       rts

0001225e <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1225e:	       subq.l #4,sp
	KPrintF("running showCharacter\n");
   12260:	       pea 1b4c4 <PutChar+0x2524>
   12266:	       jsr 184fe <KPrintF>
   1226c:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1226e:	       movea.l 12(sp),a0
   12272:	       move.l 24(a0),d0
   12276:	       move.l d0,-(sp)
   12278:	       pea 7 <_start+0x7>
   1227c:	       move.l sp,d0
   1227e:	       addq.l #8,d0
   12280:	       move.l d0,-(sp)
   12282:	       jsr 15a1e <getValueType>
   12288:	       lea 12(sp),sp
   1228c:	       tst.w d0
   1228e:	   ,-- bne.s 12294 <builtIn_showCharacter+0x36>
   12290:	   |   moveq #1,d0
   12292:	,--|-- bra.s 122b6 <builtIn_showCharacter+0x58>
	trimStack (&fun -> stack);
   12294:	|  '-> moveq #24,d0
   12296:	|      add.l 12(sp),d0
   1229a:	|      move.l d0,-(sp)
   1229c:	|      jsr 163a2 <trimStack>
   122a2:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   122a4:	|      move.l (sp),d0
   122a6:	|      move.l d0,-(sp)
   122a8:	|      pea 1 <_start+0x1>
   122ac:	|      jsr c680 <setShown>
   122b2:	|      addq.l #8,sp
	return BR_CONTINUE;
   122b4:	|      moveq #2,d0
}
   122b6:	'----> addq.l #4,sp
   122b8:	       rts

000122ba <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	KPrintF("running removeAllCharacters\n");
   122ba:	pea 1b4db <PutChar+0x253b>
   122c0:	jsr 184fe <KPrintF>
   122c6:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   122c8:	jsr 702a <killSpeechTimers>
	killMostPeople ();
   122ce:	jsr b480 <killMostPeople>
	return BR_CONTINUE;
   122d4:	moveq #2,d0
}
   122d6:	rts

000122d8 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   122d8:	       subq.l #8,sp
	KPrintF("running setCharacterDrawMode\n");
   122da:	       pea 1b4f8 <PutChar+0x2558>
   122e0:	       jsr 184fe <KPrintF>
   122e6:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122e8:	       movea.l 16(sp),a0
   122ec:	       move.l 24(a0),d0
   122f0:	       move.l d0,-(sp)
   122f2:	       pea 1 <_start+0x1>
   122f6:	       move.l sp,d0
   122f8:	       addq.l #8,d0
   122fa:	       move.l d0,-(sp)
   122fc:	       jsr 15a1e <getValueType>
   12302:	       lea 12(sp),sp
   12306:	       tst.w d0
   12308:	   ,-- bne.s 1230e <builtIn_setCharacterDrawMode+0x36>
   1230a:	   |   moveq #1,d0
   1230c:	,--|-- bra.s 12368 <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   1230e:	|  '-> moveq #24,d0
   12310:	|      add.l 16(sp),d0
   12314:	|      move.l d0,-(sp)
   12316:	|      jsr 163a2 <trimStack>
   1231c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1231e:	|      movea.l 16(sp),a0
   12322:	|      move.l 24(a0),d0
   12326:	|      move.l d0,-(sp)
   12328:	|      pea 7 <_start+0x7>
   1232c:	|      moveq #12,d0
   1232e:	|      add.l sp,d0
   12330:	|      move.l d0,-(sp)
   12332:	|      jsr 15a1e <getValueType>
   12338:	|      lea 12(sp),sp
   1233c:	|      tst.w d0
   1233e:	|  ,-- bne.s 12344 <builtIn_setCharacterDrawMode+0x6c>
   12340:	|  |   moveq #1,d0
   12342:	+--|-- bra.s 12368 <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   12344:	|  '-> moveq #24,d0
   12346:	|      add.l 16(sp),d0
   1234a:	|      move.l d0,-(sp)
   1234c:	|      jsr 163a2 <trimStack>
   12352:	|      addq.l #4,sp
	setDrawMode (di, obj);
   12354:	|      move.l 4(sp),d1
   12358:	|      move.l (sp),d0
   1235a:	|      move.l d1,-(sp)
   1235c:	|      move.l d0,-(sp)
   1235e:	|      jsr bfbe <setDrawMode>
   12364:	|      addq.l #8,sp
	return BR_CONTINUE;
   12366:	|      moveq #2,d0
}
   12368:	'----> addq.l #8,sp
   1236a:	       rts

0001236c <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	KPrintF("running setCharacterTransparency\n");
   1236c:	pea 1b516 <PutChar+0x2576>
   12372:	jsr 184fe <KPrintF>
   12378:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1237a:	pea 1b538 <PutChar+0x2598>
   12380:	jsr 184fe <KPrintF>
   12386:	addq.l #4,sp
	return BR_CONTINUE;
   12388:	moveq #2,d0
}
   1238a:	rts

0001238c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	KPrintF("running setCharacterColourise\n");
   1238c:	pea 1b56b <PutChar+0x25cb>
   12392:	jsr 184fe <KPrintF>
   12398:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1239a:	pea 1b58a <PutChar+0x25ea>
   123a0:	jsr 184fe <KPrintF>
   123a6:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   123a8:	moveq #2,d0
}
   123aa:	rts

000123ac <builtIn_setScale>:

builtIn(setScale)
{
   123ac:	       subq.l #8,sp
	KPrintF("running setScale\n");
   123ae:	       pea 1b5c4 <PutChar+0x2624>
   123b4:	       jsr 184fe <KPrintF>
   123ba:	       addq.l #4,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123bc:	       movea.l 16(sp),a0
   123c0:	       move.l 24(a0),d0
   123c4:	       move.l d0,-(sp)
   123c6:	       pea 1 <_start+0x1>
   123ca:	       move.l sp,d0
   123cc:	       addq.l #8,d0
   123ce:	       move.l d0,-(sp)
   123d0:	       jsr 15a1e <getValueType>
   123d6:	       lea 12(sp),sp
   123da:	       tst.w d0
   123dc:	   ,-- bne.s 123e2 <builtIn_setScale+0x36>
   123de:	   |   moveq #1,d0
   123e0:	,--|-- bra.s 12444 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   123e2:	|  '-> moveq #24,d0
   123e4:	|      add.l 16(sp),d0
   123e8:	|      move.l d0,-(sp)
   123ea:	|      jsr 163a2 <trimStack>
   123f0:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123f2:	|      movea.l 16(sp),a0
   123f6:	|      move.l 24(a0),d0
   123fa:	|      move.l d0,-(sp)
   123fc:	|      pea 1 <_start+0x1>
   12400:	|      moveq #12,d0
   12402:	|      add.l sp,d0
   12404:	|      move.l d0,-(sp)
   12406:	|      jsr 15a1e <getValueType>
   1240c:	|      lea 12(sp),sp
   12410:	|      tst.w d0
   12412:	|  ,-- bne.s 12418 <builtIn_setScale+0x6c>
   12414:	|  |   moveq #1,d0
   12416:	+--|-- bra.s 12444 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   12418:	|  '-> moveq #24,d0
   1241a:	|      add.l 16(sp),d0
   1241e:	|      move.l d0,-(sp)
   12420:	|      jsr 163a2 <trimStack>
   12426:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   12428:	|      move.l (sp),d0
   1242a:	|      move.l d0,d0
   1242c:	|      movea.w d0,a1
   1242e:	|      move.l 4(sp),d0
   12432:	|      move.l d0,d0
   12434:	|      movea.w d0,a0
   12436:	|      move.l a1,-(sp)
   12438:	|      move.l a0,-(sp)
   1243a:	|      jsr c658 <setScale>
   12440:	|      addq.l #8,sp
	return BR_CONTINUE;
   12442:	|      moveq #2,d0
}
   12444:	'----> addq.l #8,sp
   12446:	       rts

00012448 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   12448:	       subq.l #4,sp
	KPrintF("running stopCharacter\n");
   1244a:	       pea 1b5d6 <PutChar+0x2636>
   12450:	       jsr 184fe <KPrintF>
   12456:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12458:	       movea.l 12(sp),a0
   1245c:	       move.l 24(a0),d0
   12460:	       move.l d0,-(sp)
   12462:	       pea 7 <_start+0x7>
   12466:	       move.l sp,d0
   12468:	       addq.l #8,d0
   1246a:	       move.l d0,-(sp)
   1246c:	       jsr 15a1e <getValueType>
   12472:	       lea 12(sp),sp
   12476:	       tst.w d0
   12478:	   ,-- bne.s 1247e <builtIn_stopCharacter+0x36>
   1247a:	   |   moveq #1,d0
   1247c:	,--|-- bra.s 124b6 <builtIn_stopCharacter+0x6e>
	trimStack (&fun -> stack);
   1247e:	|  '-> moveq #24,d0
   12480:	|      add.l 12(sp),d0
   12484:	|      move.l d0,-(sp)
   12486:	|      jsr 163a2 <trimStack>
   1248c:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1248e:	|      move.l (sp),d0
   12490:	|      move.l d0,-(sp)
   12492:	|      jsr c78c <stopPerson>
   12498:	|      addq.l #4,sp
   1249a:	|      movea.w d0,a0
   1249c:	|      moveq #28,d0
   1249e:	|      add.l 12(sp),d0
   124a2:	|      move.l a0,-(sp)
   124a4:	|      pea 1 <_start+0x1>
   124a8:	|      move.l d0,-(sp)
   124aa:	|      jsr 16310 <setVariable>
   124b0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124b4:	|      moveq #2,d0
}
   124b6:	'----> addq.l #4,sp
   124b8:	       rts

000124ba <builtIn_pasteCharacter>:

builtIn(pasteCharacter)
{
	KPrintF("running pasteCharacter\n");
   124ba:	pea 1b5ed <PutChar+0x264d>
   124c0:	jsr 184fe <KPrintF>
   124c6:	addq.l #4,sp
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   124c8:	pea 1b605 <PutChar+0x2665>
   124ce:	jsr 184fe <KPrintF>
   124d4:	addq.l #4,sp
	return BR_CONTINUE;
   124d6:	moveq #2,d0
}
   124d8:	rts

000124da <builtIn_animate>:

builtIn(animate)
{
   124da:	       subq.l #8,sp
	KPrintF("running animate\n");
   124dc:	       pea 1b623 <PutChar+0x2683>
   124e2:	       jsr 184fe <KPrintF>
   124e8:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   124ea:	       movea.l 16(sp),a0
   124ee:	       move.l 24(a0),d0
   124f2:	       move.l d0,-(sp)
   124f4:	       jsr 15ef6 <getAnimationFromVar>
   124fa:	       addq.l #4,sp
   124fc:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   12500:	   ,-- bne.s 12506 <builtIn_animate+0x2c>
   12502:	   |   moveq #1,d0
   12504:	,--|-- bra.s 12584 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   12506:	|  '-> moveq #24,d0
   12508:	|      add.l 16(sp),d0
   1250c:	|      move.l d0,-(sp)
   1250e:	|      jsr 163a2 <trimStack>
   12514:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12516:	|      movea.l 16(sp),a0
   1251a:	|      move.l 24(a0),d0
   1251e:	|      move.l d0,-(sp)
   12520:	|      pea 7 <_start+0x7>
   12524:	|      move.l sp,d0
   12526:	|      addq.l #8,d0
   12528:	|      move.l d0,-(sp)
   1252a:	|      jsr 15a1e <getValueType>
   12530:	|      lea 12(sp),sp
   12534:	|      tst.w d0
   12536:	|  ,-- bne.s 1253c <builtIn_animate+0x62>
   12538:	|  |   moveq #1,d0
   1253a:	+--|-- bra.s 12584 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   1253c:	|  '-> moveq #24,d0
   1253e:	|      add.l 16(sp),d0
   12542:	|      move.l d0,-(sp)
   12544:	|      jsr 163a2 <trimStack>
   1254a:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1254c:	|      move.l (sp),d0
   1254e:	|      move.l 4(sp),-(sp)
   12552:	|      move.l d0,-(sp)
   12554:	|      jsr 9e5a <animatePerson>
   1255a:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1255c:	|      move.l 4(sp),-(sp)
   12560:	|      jsr c7e0 <timeForAnim>
   12566:	|      addq.l #4,sp
   12568:	|      move.l d0,d1
   1256a:	|      moveq #28,d0
   1256c:	|      add.l 16(sp),d0
   12570:	|      move.l d1,-(sp)
   12572:	|      pea 1 <_start+0x1>
   12576:	|      move.l d0,-(sp)
   12578:	|      jsr 16310 <setVariable>
   1257e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12582:	|      moveq #2,d0
}
   12584:	'----> addq.l #8,sp
   12586:	       rts

00012588 <builtIn_setCostume>:

builtIn(setCostume)
{
   12588:	       subq.l #8,sp
	KPrintF("running setCostume\n");
   1258a:	       pea 1b634 <PutChar+0x2694>
   12590:	       jsr 184fe <KPrintF>
   12596:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   12598:	       movea.l 16(sp),a0
   1259c:	       move.l 24(a0),d0
   125a0:	       move.l d0,-(sp)
   125a2:	       jsr 156ca <getCostumeFromVar>
   125a8:	       addq.l #4,sp
   125aa:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   125ae:	   ,-- bne.s 125b4 <builtIn_setCostume+0x2c>
   125b0:	   |   moveq #1,d0
   125b2:	,--|-- bra.s 1260c <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   125b4:	|  '-> moveq #24,d0
   125b6:	|      add.l 16(sp),d0
   125ba:	|      move.l d0,-(sp)
   125bc:	|      jsr 163a2 <trimStack>
   125c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125c4:	|      movea.l 16(sp),a0
   125c8:	|      move.l 24(a0),d0
   125cc:	|      move.l d0,-(sp)
   125ce:	|      pea 7 <_start+0x7>
   125d2:	|      move.l sp,d0
   125d4:	|      addq.l #8,d0
   125d6:	|      move.l d0,-(sp)
   125d8:	|      jsr 15a1e <getValueType>
   125de:	|      lea 12(sp),sp
   125e2:	|      tst.w d0
   125e4:	|  ,-- bne.s 125ea <builtIn_setCostume+0x62>
   125e6:	|  |   moveq #1,d0
   125e8:	+--|-- bra.s 1260c <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   125ea:	|  '-> moveq #24,d0
   125ec:	|      add.l 16(sp),d0
   125f0:	|      move.l d0,-(sp)
   125f2:	|      jsr 163a2 <trimStack>
   125f8:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   125fa:	|      move.l (sp),d0
   125fc:	|      move.l 4(sp),-(sp)
   12600:	|      move.l d0,-(sp)
   12602:	|      jsr 9ea4 <animatePersonUsingPersona>
   12608:	|      addq.l #8,sp
	return BR_CONTINUE;
   1260a:	|      moveq #2,d0
}
   1260c:	'----> addq.l #8,sp
   1260e:	       rts

00012610 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   12610:	       subq.l #8,sp
	KPrintF("running floatCharacter\n");
   12612:	       pea 1b648 <PutChar+0x26a8>
   12618:	       jsr 184fe <KPrintF>
   1261e:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12620:	       movea.l 16(sp),a0
   12624:	       move.l 24(a0),d0
   12628:	       move.l d0,-(sp)
   1262a:	       pea 1 <_start+0x1>
   1262e:	       move.l sp,d0
   12630:	       addq.l #8,d0
   12632:	       move.l d0,-(sp)
   12634:	       jsr 15a1e <getValueType>
   1263a:	       lea 12(sp),sp
   1263e:	       tst.w d0
   12640:	   ,-- bne.s 12646 <builtIn_floatCharacter+0x36>
   12642:	   |   moveq #1,d0
   12644:	,--|-- bra.s 126ba <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   12646:	|  '-> moveq #24,d0
   12648:	|      add.l 16(sp),d0
   1264c:	|      move.l d0,-(sp)
   1264e:	|      jsr 163a2 <trimStack>
   12654:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12656:	|      movea.l 16(sp),a0
   1265a:	|      move.l 24(a0),d0
   1265e:	|      move.l d0,-(sp)
   12660:	|      pea 7 <_start+0x7>
   12664:	|      moveq #12,d0
   12666:	|      add.l sp,d0
   12668:	|      move.l d0,-(sp)
   1266a:	|      jsr 15a1e <getValueType>
   12670:	|      lea 12(sp),sp
   12674:	|      tst.w d0
   12676:	|  ,-- bne.s 1267c <builtIn_floatCharacter+0x6c>
   12678:	|  |   moveq #1,d0
   1267a:	+--|-- bra.s 126ba <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   1267c:	|  '-> moveq #24,d0
   1267e:	|      add.l 16(sp),d0
   12682:	|      move.l d0,-(sp)
   12684:	|      jsr 163a2 <trimStack>
   1268a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1268c:	|      move.l 4(sp),d1
   12690:	|      move.l (sp),d0
   12692:	|      move.l d1,-(sp)
   12694:	|      move.l d0,-(sp)
   12696:	|      jsr b034 <floatCharacter>
   1269c:	|      addq.l #8,sp
   1269e:	|      movea.w d0,a0
   126a0:	|      moveq #28,d0
   126a2:	|      add.l 16(sp),d0
   126a6:	|      move.l a0,-(sp)
   126a8:	|      pea 1 <_start+0x1>
   126ac:	|      move.l d0,-(sp)
   126ae:	|      jsr 16310 <setVariable>
   126b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   126b8:	|      moveq #2,d0
}
   126ba:	'----> addq.l #8,sp
   126bc:	       rts

000126be <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   126be:	       subq.l #8,sp
	KPrintF("running setCharacterWalkSpeed\n");
   126c0:	       pea 1b660 <PutChar+0x26c0>
   126c6:	       jsr 184fe <KPrintF>
   126cc:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   126ce:	       movea.l 16(sp),a0
   126d2:	       move.l 24(a0),d0
   126d6:	       move.l d0,-(sp)
   126d8:	       pea 1 <_start+0x1>
   126dc:	       move.l sp,d0
   126de:	       addq.l #8,d0
   126e0:	       move.l d0,-(sp)
   126e2:	       jsr 15a1e <getValueType>
   126e8:	       lea 12(sp),sp
   126ec:	       tst.w d0
   126ee:	   ,-- bne.s 126f4 <builtIn_setCharacterWalkSpeed+0x36>
   126f0:	   |   moveq #1,d0
   126f2:	,--|-- bra.s 12768 <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   126f4:	|  '-> moveq #24,d0
   126f6:	|      add.l 16(sp),d0
   126fa:	|      move.l d0,-(sp)
   126fc:	|      jsr 163a2 <trimStack>
   12702:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12704:	|      movea.l 16(sp),a0
   12708:	|      move.l 24(a0),d0
   1270c:	|      move.l d0,-(sp)
   1270e:	|      pea 7 <_start+0x7>
   12712:	|      moveq #12,d0
   12714:	|      add.l sp,d0
   12716:	|      move.l d0,-(sp)
   12718:	|      jsr 15a1e <getValueType>
   1271e:	|      lea 12(sp),sp
   12722:	|      tst.w d0
   12724:	|  ,-- bne.s 1272a <builtIn_setCharacterWalkSpeed+0x6c>
   12726:	|  |   moveq #1,d0
   12728:	+--|-- bra.s 12768 <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   1272a:	|  '-> moveq #24,d0
   1272c:	|      add.l 16(sp),d0
   12730:	|      move.l d0,-(sp)
   12732:	|      jsr 163a2 <trimStack>
   12738:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1273a:	|      move.l 4(sp),d1
   1273e:	|      move.l (sp),d0
   12740:	|      move.l d1,-(sp)
   12742:	|      move.l d0,-(sp)
   12744:	|      jsr c5f4 <setCharacterWalkSpeed>
   1274a:	|      addq.l #8,sp
   1274c:	|      movea.w d0,a0
   1274e:	|      moveq #28,d0
   12750:	|      add.l 16(sp),d0
   12754:	|      move.l a0,-(sp)
   12756:	|      pea 1 <_start+0x1>
   1275a:	|      move.l d0,-(sp)
   1275c:	|      jsr 16310 <setVariable>
   12762:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12766:	|      moveq #2,d0
}
   12768:	'----> addq.l #8,sp
   1276a:	       rts

0001276c <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1276c:	       subq.l #8,sp
	KPrintF("running turnCharacter\n");
   1276e:	       pea 1b67f <PutChar+0x26df>
   12774:	       jsr 184fe <KPrintF>
   1277a:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1277c:	       movea.l 16(sp),a0
   12780:	       move.l 24(a0),d0
   12784:	       move.l d0,-(sp)
   12786:	       pea 1 <_start+0x1>
   1278a:	       move.l sp,d0
   1278c:	       addq.l #8,d0
   1278e:	       move.l d0,-(sp)
   12790:	       jsr 15a1e <getValueType>
   12796:	       lea 12(sp),sp
   1279a:	       tst.w d0
   1279c:	   ,-- bne.s 127a2 <builtIn_turnCharacter+0x36>
   1279e:	   |   moveq #1,d0
   127a0:	,--|-- bra.s 12816 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   127a2:	|  '-> moveq #24,d0
   127a4:	|      add.l 16(sp),d0
   127a8:	|      move.l d0,-(sp)
   127aa:	|      jsr 163a2 <trimStack>
   127b0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127b2:	|      movea.l 16(sp),a0
   127b6:	|      move.l 24(a0),d0
   127ba:	|      move.l d0,-(sp)
   127bc:	|      pea 7 <_start+0x7>
   127c0:	|      moveq #12,d0
   127c2:	|      add.l sp,d0
   127c4:	|      move.l d0,-(sp)
   127c6:	|      jsr 15a1e <getValueType>
   127cc:	|      lea 12(sp),sp
   127d0:	|      tst.w d0
   127d2:	|  ,-- bne.s 127d8 <builtIn_turnCharacter+0x6c>
   127d4:	|  |   moveq #1,d0
   127d6:	+--|-- bra.s 12816 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   127d8:	|  '-> moveq #24,d0
   127da:	|      add.l 16(sp),d0
   127de:	|      move.l d0,-(sp)
   127e0:	|      jsr 163a2 <trimStack>
   127e6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   127e8:	|      move.l (sp),d1
   127ea:	|      move.l 4(sp),d0
   127ee:	|      move.l d1,-(sp)
   127f0:	|      move.l d0,-(sp)
   127f2:	|      jsr c898 <turnPersonToFace>
   127f8:	|      addq.l #8,sp
   127fa:	|      movea.w d0,a0
   127fc:	|      moveq #28,d0
   127fe:	|      add.l 16(sp),d0
   12802:	|      move.l a0,-(sp)
   12804:	|      pea 1 <_start+0x1>
   12808:	|      move.l d0,-(sp)
   1280a:	|      jsr 16310 <setVariable>
   12810:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12814:	|      moveq #2,d0
}
   12816:	'----> addq.l #8,sp
   12818:	       rts

0001281a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1281a:	       subq.l #8,sp
	KPrintF("running setCharacterExtra\n");
   1281c:	       pea 1b696 <PutChar+0x26f6>
   12822:	       jsr 184fe <KPrintF>
   12828:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1282a:	       movea.l 16(sp),a0
   1282e:	       move.l 24(a0),d0
   12832:	       move.l d0,-(sp)
   12834:	       pea 1 <_start+0x1>
   12838:	       move.l sp,d0
   1283a:	       addq.l #8,d0
   1283c:	       move.l d0,-(sp)
   1283e:	       jsr 15a1e <getValueType>
   12844:	       lea 12(sp),sp
   12848:	       tst.w d0
   1284a:	   ,-- bne.s 12850 <builtIn_setCharacterExtra+0x36>
   1284c:	   |   moveq #1,d0
   1284e:	,--|-- bra.s 128c4 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   12850:	|  '-> moveq #24,d0
   12852:	|      add.l 16(sp),d0
   12856:	|      move.l d0,-(sp)
   12858:	|      jsr 163a2 <trimStack>
   1285e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12860:	|      movea.l 16(sp),a0
   12864:	|      move.l 24(a0),d0
   12868:	|      move.l d0,-(sp)
   1286a:	|      pea 7 <_start+0x7>
   1286e:	|      moveq #12,d0
   12870:	|      add.l sp,d0
   12872:	|      move.l d0,-(sp)
   12874:	|      jsr 15a1e <getValueType>
   1287a:	|      lea 12(sp),sp
   1287e:	|      tst.w d0
   12880:	|  ,-- bne.s 12886 <builtIn_setCharacterExtra+0x6c>
   12882:	|  |   moveq #1,d0
   12884:	+--|-- bra.s 128c4 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   12886:	|  '-> moveq #24,d0
   12888:	|      add.l 16(sp),d0
   1288c:	|      move.l d0,-(sp)
   1288e:	|      jsr 163a2 <trimStack>
   12894:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   12896:	|      move.l (sp),d1
   12898:	|      move.l 4(sp),d0
   1289c:	|      move.l d1,-(sp)
   1289e:	|      move.l d0,-(sp)
   128a0:	|      jsr c622 <setPersonExtra>
   128a6:	|      addq.l #8,sp
   128a8:	|      movea.w d0,a0
   128aa:	|      moveq #28,d0
   128ac:	|      add.l 16(sp),d0
   128b0:	|      move.l a0,-(sp)
   128b2:	|      pea 1 <_start+0x1>
   128b6:	|      move.l d0,-(sp)
   128b8:	|      jsr 16310 <setVariable>
   128be:	|      lea 12(sp),sp
	return BR_CONTINUE;
   128c2:	|      moveq #2,d0
}
   128c4:	'----> addq.l #8,sp
   128c6:	       rts

000128c8 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   128c8:	       subq.l #4,sp
	KPrintF("running removeCharacter\n");
   128ca:	       pea 1b6b1 <PutChar+0x2711>
   128d0:	       jsr 184fe <KPrintF>
   128d6:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128d8:	       movea.l 12(sp),a0
   128dc:	       move.l 24(a0),d0
   128e0:	       move.l d0,-(sp)
   128e2:	       pea 7 <_start+0x7>
   128e6:	       move.l sp,d0
   128e8:	       addq.l #8,d0
   128ea:	       move.l d0,-(sp)
   128ec:	       jsr 15a1e <getValueType>
   128f2:	       lea 12(sp),sp
   128f6:	       tst.w d0
   128f8:	   ,-- bne.s 128fe <builtIn_removeCharacter+0x36>
   128fa:	   |   moveq #1,d0
   128fc:	,--|-- bra.s 1291c <builtIn_removeCharacter+0x54>
	trimStack (&fun -> stack);
   128fe:	|  '-> moveq #24,d0
   12900:	|      add.l 12(sp),d0
   12904:	|      move.l d0,-(sp)
   12906:	|      jsr 163a2 <trimStack>
   1290c:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1290e:	|      move.l (sp),d0
   12910:	|      move.l d0,-(sp)
   12912:	|      jsr b822 <removeOneCharacter>
   12918:	|      addq.l #4,sp
	return BR_CONTINUE;
   1291a:	|      moveq #2,d0
}
   1291c:	'----> addq.l #4,sp
   1291e:	       rts

00012920 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   12920:	                lea -28(sp),sp
   12924:	                move.l d2,-(sp)
   12926:	                move.l 44(sp),d1
   1292a:	                move.l 48(sp),d0
   1292e:	                move.w d1,d1
   12930:	                move.w d1,6(sp)
   12934:	                move.w d0,d0
   12936:	                move.w d0,4(sp)
	switch (numParams) {
   1293a:	                moveq #2,d0
   1293c:	                cmp.l 36(sp),d0
   12940:	      ,-------- beq.w 12a82 <moveChr+0x162>
   12944:	      |         moveq #3,d0
   12946:	      |         cmp.l 36(sp),d0
   1294a:	,-----|-------- bne.w 12bb6 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1294e:	|     |         movea.l 40(sp),a0
   12952:	|     |         move.l 24(a0),d0
   12956:	|     |         move.l d0,-(sp)
   12958:	|     |         pea 1 <_start+0x1>
   1295c:	|     |         lea 20(sp),a0
   12960:	|     |         move.l a0,-(sp)
   12962:	|     |         jsr 15a1e <getValueType>
   12968:	|     |         lea 12(sp),sp
   1296c:	|     |         tst.w d0
   1296e:	|     |     ,-- bne.s 12976 <moveChr+0x56>
   12970:	|     |     |   moveq #1,d0
   12972:	|  ,--|-----|-- bra.w 12bc6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12976:	|  |  |     '-> moveq #24,d0
   12978:	|  |  |         add.l 40(sp),d0
   1297c:	|  |  |         move.l d0,-(sp)
   1297e:	|  |  |         jsr 163a2 <trimStack>
   12984:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12986:	|  |  |         movea.l 40(sp),a0
   1298a:	|  |  |         move.l 24(a0),d0
   1298e:	|  |  |         move.l d0,-(sp)
   12990:	|  |  |         pea 1 <_start+0x1>
   12994:	|  |  |         lea 24(sp),a0
   12998:	|  |  |         move.l a0,-(sp)
   1299a:	|  |  |         jsr 15a1e <getValueType>
   129a0:	|  |  |         lea 12(sp),sp
   129a4:	|  |  |         tst.w d0
   129a6:	|  |  |     ,-- bne.s 129ae <moveChr+0x8e>
   129a8:	|  |  |     |   moveq #1,d0
   129aa:	|  +--|-----|-- bra.w 12bc6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   129ae:	|  |  |     '-> moveq #24,d0
   129b0:	|  |  |         add.l 40(sp),d0
   129b4:	|  |  |         move.l d0,-(sp)
   129b6:	|  |  |         jsr 163a2 <trimStack>
   129bc:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129be:	|  |  |         movea.l 40(sp),a0
   129c2:	|  |  |         move.l 24(a0),d0
   129c6:	|  |  |         move.l d0,-(sp)
   129c8:	|  |  |         pea 7 <_start+0x7>
   129cc:	|  |  |         lea 16(sp),a0
   129d0:	|  |  |         move.l a0,-(sp)
   129d2:	|  |  |         jsr 15a1e <getValueType>
   129d8:	|  |  |         lea 12(sp),sp
   129dc:	|  |  |         tst.w d0
   129de:	|  |  |     ,-- bne.s 129e6 <moveChr+0xc6>
   129e0:	|  |  |     |   moveq #1,d0
   129e2:	|  +--|-----|-- bra.w 12bc6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   129e6:	|  |  |     '-> moveq #24,d0
   129e8:	|  |  |         add.l 40(sp),d0
   129ec:	|  |  |         move.l d0,-(sp)
   129ee:	|  |  |         jsr 163a2 <trimStack>
   129f4:	|  |  |         addq.l #4,sp

			if (force) {
   129f6:	|  |  |         tst.w 6(sp)
   129fa:	|  |  |     ,-- beq.s 12a2a <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   129fc:	|  |  |     |   movea.l 8(sp),a0
   12a00:	|  |  |     |   move.l 12(sp),d1
   12a04:	|  |  |     |   move.l 16(sp),d0
   12a08:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28da>
   12a0c:	|  |  |     |   move.l 44(sp),-(sp)
   12a10:	|  |  |     |   move.l a0,-(sp)
   12a12:	|  |  |     |   move.l d1,-(sp)
   12a14:	|  |  |     |   move.l d0,-(sp)
   12a16:	|  |  |     |   jsr b058 <forceWalkingPerson>
   12a1c:	|  |  |     |   lea 20(sp),sp
   12a20:	|  |  |     |   tst.w d0
   12a22:	|  |  |  ,--|-- beq.s 12a7c <moveChr+0x15c>
   12a24:	|  |  |  |  |   moveq #3,d0
   12a26:	|  +--|--|--|-- bra.w 12bc6 <moveChr+0x2a6>
			} else if (immediate) {
   12a2a:	|  |  |  |  '-> tst.w 4(sp)
   12a2e:	|  |  |  |  ,-- beq.s 12a4e <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   12a30:	|  |  |  |  |   movea.l 8(sp),a0
   12a34:	|  |  |  |  |   move.l 12(sp),d1
   12a38:	|  |  |  |  |   move.l 16(sp),d0
   12a3c:	|  |  |  |  |   move.l a0,-(sp)
   12a3e:	|  |  |  |  |   move.l d1,-(sp)
   12a40:	|  |  |  |  |   move.l d0,-(sp)
   12a42:	|  |  |  |  |   jsr b36e <jumpPerson>
   12a48:	|  |  |  |  |   lea 12(sp),sp
   12a4c:	|  |  |  +--|-- bra.s 12a7c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   12a4e:	|  |  |  |  '-> movea.l 8(sp),a0
   12a52:	|  |  |  |      move.l 12(sp),d1
   12a56:	|  |  |  |      move.l 16(sp),d0
   12a5a:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28da>
   12a5e:	|  |  |  |      move.l 44(sp),-(sp)
   12a62:	|  |  |  |      move.l a0,-(sp)
   12a64:	|  |  |  |      move.l d1,-(sp)
   12a66:	|  |  |  |      move.l d0,-(sp)
   12a68:	|  |  |  |      jsr b53e <makeWalkingPerson>
   12a6e:	|  |  |  |      lea 20(sp),sp
   12a72:	|  |  |  |      tst.w d0
   12a74:	|  |  |  +----- beq.s 12a7c <moveChr+0x15c>
   12a76:	|  |  |  |      moveq #3,d0
   12a78:	|  +--|--|----- bra.w 12bc6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12a7c:	|  |  |  '----> moveq #2,d0
   12a7e:	|  +--|-------- bra.w 12bc6 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a82:	|  |  '-------> movea.l 40(sp),a0
   12a86:	|  |            move.l 24(a0),d0
   12a8a:	|  |            move.l d0,-(sp)
   12a8c:	|  |            pea 7 <_start+0x7>
   12a90:	|  |            moveq #32,d0
   12a92:	|  |            add.l sp,d0
   12a94:	|  |            move.l d0,-(sp)
   12a96:	|  |            jsr 15a1e <getValueType>
   12a9c:	|  |            lea 12(sp),sp
   12aa0:	|  |            tst.w d0
   12aa2:	|  |        ,-- bne.s 12aaa <moveChr+0x18a>
   12aa4:	|  |        |   moveq #1,d0
   12aa6:	|  +--------|-- bra.w 12bc6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12aaa:	|  |        '-> moveq #24,d0
   12aac:	|  |            add.l 40(sp),d0
   12ab0:	|  |            move.l d0,-(sp)
   12ab2:	|  |            jsr 163a2 <trimStack>
   12ab8:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12aba:	|  |            movea.l 40(sp),a0
   12abe:	|  |            move.l 24(a0),d0
   12ac2:	|  |            move.l d0,-(sp)
   12ac4:	|  |            pea 7 <_start+0x7>
   12ac8:	|  |            lea 28(sp),a0
   12acc:	|  |            move.l a0,-(sp)
   12ace:	|  |            jsr 15a1e <getValueType>
   12ad4:	|  |            lea 12(sp),sp
   12ad8:	|  |            tst.w d0
   12ada:	|  |        ,-- bne.s 12ae2 <moveChr+0x1c2>
   12adc:	|  |        |   moveq #1,d0
   12ade:	|  +--------|-- bra.w 12bc6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12ae2:	|  |        '-> moveq #24,d0
   12ae4:	|  |            add.l 40(sp),d0
   12ae8:	|  |            move.l d0,-(sp)
   12aea:	|  |            jsr 163a2 <trimStack>
   12af0:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   12af2:	|  |            move.l 24(sp),d0
   12af6:	|  |            move.l d0,-(sp)
   12af8:	|  |            jsr 16ce0 <getRegionForObject>
   12afe:	|  |            addq.l #4,sp
   12b00:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   12b04:	|  |        ,-- bne.s 12b0c <moveChr+0x1ec>
   12b06:	|  |        |   moveq #2,d0
   12b08:	|  +--------|-- bra.w 12bc6 <moveChr+0x2a6>

			if (force)
   12b0c:	|  |        '-> tst.w 6(sp)
   12b10:	|  |        ,-- beq.s 12b4c <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12b12:	|  |        |   movea.l 28(sp),a0
   12b16:	|  |        |   move.l 24(a0),d2
   12b1a:	|  |        |   movea.l 20(sp),a1
   12b1e:	|  |        |   movea.l 28(sp),a0
   12b22:	|  |        |   move.l 20(a0),d1
   12b26:	|  |        |   movea.l 28(sp),a0
   12b2a:	|  |        |   move.l 16(a0),d0
   12b2e:	|  |        |   move.l d2,-(sp)
   12b30:	|  |        |   move.l 44(sp),-(sp)
   12b34:	|  |        |   move.l a1,-(sp)
   12b36:	|  |        |   move.l d1,-(sp)
   12b38:	|  |        |   move.l d0,-(sp)
   12b3a:	|  |        |   jsr b058 <forceWalkingPerson>
   12b40:	|  |        |   lea 20(sp),sp
   12b44:	|  |        |   tst.w d0
   12b46:	|  |     ,--|-- beq.s 12bb2 <moveChr+0x292>
   12b48:	|  |     |  |   moveq #3,d0
   12b4a:	|  +-----|--|-- bra.s 12bc6 <moveChr+0x2a6>
			}
			else if (immediate)
   12b4c:	|  |     |  '-> tst.w 4(sp)
   12b50:	|  |     |  ,-- beq.s 12b78 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   12b52:	|  |     |  |   movea.l 20(sp),a1
   12b56:	|  |     |  |   movea.l 28(sp),a0
   12b5a:	|  |     |  |   move.l 20(a0),d1
   12b5e:	|  |     |  |   movea.l 28(sp),a0
   12b62:	|  |     |  |   move.l 16(a0),d0
   12b66:	|  |     |  |   move.l a1,-(sp)
   12b68:	|  |     |  |   move.l d1,-(sp)
   12b6a:	|  |     |  |   move.l d0,-(sp)
   12b6c:	|  |     |  |   jsr b36e <jumpPerson>
   12b72:	|  |     |  |   lea 12(sp),sp
   12b76:	|  |     +--|-- bra.s 12bb2 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12b78:	|  |     |  '-> movea.l 28(sp),a0
   12b7c:	|  |     |      move.l 24(a0),d2
   12b80:	|  |     |      movea.l 20(sp),a1
   12b84:	|  |     |      movea.l 28(sp),a0
   12b88:	|  |     |      move.l 20(a0),d1
   12b8c:	|  |     |      movea.l 28(sp),a0
   12b90:	|  |     |      move.l 16(a0),d0
   12b94:	|  |     |      move.l d2,-(sp)
   12b96:	|  |     |      move.l 44(sp),-(sp)
   12b9a:	|  |     |      move.l a1,-(sp)
   12b9c:	|  |     |      move.l d1,-(sp)
   12b9e:	|  |     |      move.l d0,-(sp)
   12ba0:	|  |     |      jsr b53e <makeWalkingPerson>
   12ba6:	|  |     |      lea 20(sp),sp
   12baa:	|  |     |      tst.w d0
   12bac:	|  |     +----- beq.s 12bb2 <moveChr+0x292>
   12bae:	|  |     |      moveq #3,d0
   12bb0:	|  +-----|----- bra.s 12bc6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12bb2:	|  |     '----> moveq #2,d0
   12bb4:	|  +----------- bra.s 12bc6 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12bb6:	'--|----------> pea 1b6ca <PutChar+0x272a>
   12bbc:	   |            jsr 184fe <KPrintF>
   12bc2:	   |            addq.l #4,sp
			return BR_ERROR;
   12bc4:	   |            moveq #1,d0
	}
}
   12bc6:	   '----------> move.l (sp)+,d2
   12bc8:	                lea 28(sp),sp
   12bcc:	                rts

00012bce <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	KPrintF("running moveCharacter\n");
   12bce:	pea 1b700 <talk.c.490538ff+0x2c>
   12bd4:	jsr 184fe <KPrintF>
   12bda:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   12bdc:	clr.l -(sp)
   12bde:	clr.l -(sp)
   12be0:	move.l 16(sp),-(sp)
   12be4:	move.l 16(sp),-(sp)
   12be8:	jsr 12920 <moveChr>
   12bee:	lea 16(sp),sp
}
   12bf2:	rts

00012bf4 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	KPrintF("running forceCharacter\n");
   12bf4:	pea 1b717 <talk.c.490538ff+0x43>
   12bfa:	jsr 184fe <KPrintF>
   12c00:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12c02:	clr.l -(sp)
   12c04:	pea 1 <_start+0x1>
   12c08:	move.l 16(sp),-(sp)
   12c0c:	move.l 16(sp),-(sp)
   12c10:	jsr 12920 <moveChr>
   12c16:	lea 16(sp),sp
}
   12c1a:	rts

00012c1c <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	KPrintF("running jumpCharacter\n");
   12c1c:	pea 1b72f <talk.c.490538ff+0x5b>
   12c22:	jsr 184fe <KPrintF>
   12c28:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   12c2a:	pea 1 <_start+0x1>
   12c2e:	clr.l -(sp)
   12c30:	move.l 16(sp),-(sp)
   12c34:	move.l 16(sp),-(sp)
   12c38:	jsr 12920 <moveChr>
   12c3e:	lea 16(sp),sp
}
   12c42:	rts

00012c44 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	KPrintF("running clearStatus\n");
   12c44:	pea 1b746 <talk.c.490538ff+0x72>
   12c4a:	jsr 184fe <KPrintF>
   12c50:	addq.l #4,sp
	UNUSEDALL
	clearStatusBar ();
   12c52:	jsr 8ba8 <clearStatusBar>
	return BR_CONTINUE;
   12c58:	moveq #2,d0
}
   12c5a:	rts

00012c5c <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	KPrintF("running removeLastStatus\n");
   12c5c:	pea 1b75b <talk.c.490538ff+0x87>
   12c62:	jsr 184fe <KPrintF>
   12c68:	addq.l #4,sp
	UNUSEDALL
	killLastStatus ();
   12c6a:	jsr 8c50 <killLastStatus>
	return BR_CONTINUE;
   12c70:	moveq #2,d0
}
   12c72:	rts

00012c74 <builtIn_addStatus>:

builtIn(addStatus)
{
	KPrintF("running addStatus\n");
   12c74:	pea 1b775 <talk.c.490538ff+0xa1>
   12c7a:	jsr 184fe <KPrintF>
   12c80:	addq.l #4,sp
	UNUSEDALL
	addStatusBar ();
   12c82:	jsr 8b3e <addStatusBar>
	return BR_CONTINUE;
   12c88:	moveq #2,d0
}
   12c8a:	rts

00012c8c <builtIn_statusText>:

builtIn(statusText)
{
   12c8c:	       subq.l #8,sp
   12c8e:	       move.l a6,-(sp)
	KPrintF("running statusText\n");
   12c90:	       pea 1b788 <talk.c.490538ff+0xb4>
   12c96:	       jsr 184fe <KPrintF>
   12c9c:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   12c9e:	       movea.l 20(sp),a0
   12ca2:	       move.l 24(a0),d0
   12ca6:	       move.l d0,-(sp)
   12ca8:	       jsr 15ff4 <getTextFromAnyVar>
   12cae:	       addq.l #4,sp
   12cb0:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   12cb4:	   ,-- bne.s 12cba <builtIn_statusText+0x2e>
   12cb6:	   |   moveq #1,d0
   12cb8:	,--|-- bra.s 12cee <builtIn_statusText+0x62>
	trimStack(&fun->stack);
   12cba:	|  '-> moveq #24,d0
   12cbc:	|      add.l 20(sp),d0
   12cc0:	|      move.l d0,-(sp)
   12cc2:	|      jsr 163a2 <trimStack>
   12cc8:	|      addq.l #4,sp
	setStatusBar(newText);
   12cca:	|      move.l 8(sp),-(sp)
   12cce:	|      jsr 8ed0 <setStatusBar>
   12cd4:	|      addq.l #4,sp
	FreeVec(newText);
   12cd6:	|      move.l 8(sp),4(sp)
   12cdc:	|      move.l 1e876 <SysBase>,d0
   12ce2:	|      movea.l d0,a6
   12ce4:	|      movea.l 4(sp),a1
   12ce8:	|      jsr -690(a6)
	return BR_CONTINUE;
   12cec:	|      moveq #2,d0
}
   12cee:	'----> movea.l (sp)+,a6
   12cf0:	       addq.l #8,sp
   12cf2:	       rts

00012cf4 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   12cf4:	       subq.l #4,sp
	KPrintF("running lightStatus\n");
   12cf6:	       pea 1b79c <talk.c.490538ff+0xc8>
   12cfc:	       jsr 184fe <KPrintF>
   12d02:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d04:	       movea.l 12(sp),a0
   12d08:	       move.l 24(a0),d0
   12d0c:	       move.l d0,-(sp)
   12d0e:	       pea 1 <_start+0x1>
   12d12:	       move.l sp,d0
   12d14:	       addq.l #8,d0
   12d16:	       move.l d0,-(sp)
   12d18:	       jsr 15a1e <getValueType>
   12d1e:	       lea 12(sp),sp
   12d22:	       tst.w d0
   12d24:	   ,-- bne.s 12d2a <builtIn_lightStatus+0x36>
   12d26:	   |   moveq #1,d0
   12d28:	,--|-- bra.s 12d48 <builtIn_lightStatus+0x54>
	trimStack (&fun -> stack);
   12d2a:	|  '-> moveq #24,d0
   12d2c:	|      add.l 12(sp),d0
   12d30:	|      move.l d0,-(sp)
   12d32:	|      jsr 163a2 <trimStack>
   12d38:	|      addq.l #4,sp
	setLitStatus (val);
   12d3a:	|      move.l (sp),d0
   12d3c:	|      move.l d0,-(sp)
   12d3e:	|      jsr 8ec0 <setLitStatus>
   12d44:	|      addq.l #4,sp
	return BR_CONTINUE;
   12d46:	|      moveq #2,d0
}
   12d48:	'----> addq.l #4,sp
   12d4a:	       rts

00012d4c <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12d4c:	       subq.l #8,sp
	KPrintF("running positionStatus\n");
   12d4e:	       pea 1b7b1 <talk.c.490538ff+0xdd>
   12d54:	       jsr 184fe <KPrintF>
   12d5a:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d5c:	       movea.l 16(sp),a0
   12d60:	       move.l 24(a0),d0
   12d64:	       move.l d0,-(sp)
   12d66:	       pea 1 <_start+0x1>
   12d6a:	       move.l sp,d0
   12d6c:	       addq.l #8,d0
   12d6e:	       move.l d0,-(sp)
   12d70:	       jsr 15a1e <getValueType>
   12d76:	       lea 12(sp),sp
   12d7a:	       tst.w d0
   12d7c:	   ,-- bne.s 12d82 <builtIn_positionStatus+0x36>
   12d7e:	   |   moveq #1,d0
   12d80:	,--|-- bra.s 12ddc <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12d82:	|  '-> moveq #24,d0
   12d84:	|      add.l 16(sp),d0
   12d88:	|      move.l d0,-(sp)
   12d8a:	|      jsr 163a2 <trimStack>
   12d90:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d92:	|      movea.l 16(sp),a0
   12d96:	|      move.l 24(a0),d0
   12d9a:	|      move.l d0,-(sp)
   12d9c:	|      pea 1 <_start+0x1>
   12da0:	|      moveq #12,d0
   12da2:	|      add.l sp,d0
   12da4:	|      move.l d0,-(sp)
   12da6:	|      jsr 15a1e <getValueType>
   12dac:	|      lea 12(sp),sp
   12db0:	|      tst.w d0
   12db2:	|  ,-- bne.s 12db8 <builtIn_positionStatus+0x6c>
   12db4:	|  |   moveq #1,d0
   12db6:	+--|-- bra.s 12ddc <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12db8:	|  '-> moveq #24,d0
   12dba:	|      add.l 16(sp),d0
   12dbe:	|      move.l d0,-(sp)
   12dc0:	|      jsr 163a2 <trimStack>
   12dc6:	|      addq.l #4,sp
	positionStatus (x, y);
   12dc8:	|      move.l (sp),d1
   12dca:	|      move.l 4(sp),d0
   12dce:	|      move.l d1,-(sp)
   12dd0:	|      move.l d0,-(sp)
   12dd2:	|      jsr 8cb2 <positionStatus>
   12dd8:	|      addq.l #8,sp
	return BR_CONTINUE;
   12dda:	|      moveq #2,d0
}
   12ddc:	'----> addq.l #8,sp
   12dde:	       rts

00012de0 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   12de0:	       subq.l #4,sp
	KPrintF("running alignStatus\n");
   12de2:	       pea 1b7c9 <talk.c.490538ff+0xf5>
   12de8:	       jsr 184fe <KPrintF>
   12dee:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12df0:	       movea.l 12(sp),a0
   12df4:	       move.l 24(a0),d0
   12df8:	       move.l d0,-(sp)
   12dfa:	       pea 1 <_start+0x1>
   12dfe:	       move.l sp,d0
   12e00:	       addq.l #8,d0
   12e02:	       move.l d0,-(sp)
   12e04:	       jsr 15a1e <getValueType>
   12e0a:	       lea 12(sp),sp
   12e0e:	       tst.w d0
   12e10:	   ,-- bne.s 12e16 <builtIn_alignStatus+0x36>
   12e12:	   |   moveq #1,d0
   12e14:	,--|-- bra.s 12e36 <builtIn_alignStatus+0x56>
	trimStack (&fun -> stack);
   12e16:	|  '-> moveq #24,d0
   12e18:	|      add.l 12(sp),d0
   12e1c:	|      move.l d0,-(sp)
   12e1e:	|      jsr 163a2 <trimStack>
   12e24:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12e26:	|      move.l (sp),d0
   12e28:	|      movea.l 1e1e8 <nowStatus>,a0
   12e2e:	|      move.l d0,d0
   12e30:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12e34:	|      moveq #2,d0
}
   12e36:	'----> addq.l #4,sp
   12e38:	       rts

00012e3a <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12e3a:	             tst.l 4(sp)
   12e3e:	         ,-- beq.s 12e4a <getFuncNumForCallback+0x10>
   12e40:	         |   moveq #1,d0
   12e42:	         |   cmp.l 4(sp),d0
   12e46:	      ,--|-- beq.s 12e52 <getFuncNumForCallback+0x18>
   12e48:	   ,--|--|-- bra.s 12e88 <getFuncNumForCallback+0x4e>
		case 0:
			*functionNum = 0;
   12e4a:	   |  |  '-> movea.l 12(sp),a0
   12e4e:	   |  |      clr.l (a0)
			break;
   12e50:	,--|--|----- bra.s 12e9a <getFuncNumForCallback+0x60>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12e52:	|  |  '----> movea.l 8(sp),a0
   12e56:	|  |         move.l 24(a0),d0
   12e5a:	|  |         move.l d0,-(sp)
   12e5c:	|  |         pea 2 <_start+0x2>
   12e60:	|  |         move.l 20(sp),-(sp)
   12e64:	|  |         jsr 15a1e <getValueType>
   12e6a:	|  |         lea 12(sp),sp
   12e6e:	|  |         tst.w d0
   12e70:	|  |     ,-- bne.s 12e76 <getFuncNumForCallback+0x3c>
   12e72:	|  |     |   clr.w d0
   12e74:	|  |  ,--|-- bra.s 12e9c <getFuncNumForCallback+0x62>
			trimStack (&fun -> stack);
   12e76:	|  |  |  '-> moveq #24,d0
   12e78:	|  |  |      add.l 8(sp),d0
   12e7c:	|  |  |      move.l d0,-(sp)
   12e7e:	|  |  |      jsr 163a2 <trimStack>
   12e84:	|  |  |      addq.l #4,sp
			break;
   12e86:	+--|--|----- bra.s 12e9a <getFuncNumForCallback+0x60>

		default:
			KPrintF ("Too many parameters.");
   12e88:	|  '--|----> pea 1b7de <talk.c.490538ff+0x10a>
   12e8e:	|     |      jsr 184fe <KPrintF>
   12e94:	|     |      addq.l #4,sp
			return FALSE;
   12e96:	|     |      clr.w d0
   12e98:	|     +----- bra.s 12e9c <getFuncNumForCallback+0x62>
	}
	return TRUE;
   12e9a:	'-----|----> moveq #1,d0
}
   12e9c:	      '----> rts

00012e9e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   12e9e:	       subq.l #4,sp
	KPrintF("running onLeftMouse\n");
   12ea0:	       pea 1b7f3 <talk.c.490538ff+0x11f>
   12ea6:	       jsr 184fe <KPrintF>
   12eac:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12eae:	       move.l sp,d0
   12eb0:	       move.l d0,-(sp)
   12eb2:	       move.l 16(sp),-(sp)
   12eb6:	       move.l 16(sp),-(sp)
   12eba:	       jsr 12e3a <getFuncNumForCallback>
   12ec0:	       lea 12(sp),sp
   12ec4:	       tst.w d0
   12ec6:	,----- beq.s 12ed6 <builtIn_onLeftMouse+0x38>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12ec8:	|      movea.l 1e1da <currentEvents>,a0
   12ece:	|      move.l (sp),d0
   12ed0:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12ed2:	|      moveq #2,d0
   12ed4:	|  ,-- bra.s 12ed8 <builtIn_onLeftMouse+0x3a>
	}
	return BR_ERROR;
   12ed6:	'--|-> moveq #1,d0
}
   12ed8:	   '-> addq.l #4,sp
   12eda:	       rts

00012edc <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12edc:	       subq.l #4,sp
	KPrintF("running onLeftMouseUp\n");
   12ede:	       pea 1b808 <talk.c.490538ff+0x134>
   12ee4:	       jsr 184fe <KPrintF>
   12eea:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12eec:	       move.l sp,d0
   12eee:	       move.l d0,-(sp)
   12ef0:	       move.l 16(sp),-(sp)
   12ef4:	       move.l 16(sp),-(sp)
   12ef8:	       jsr 12e3a <getFuncNumForCallback>
   12efe:	       lea 12(sp),sp
   12f02:	       tst.w d0
   12f04:	,----- beq.s 12f16 <builtIn_onLeftMouseUp+0x3a>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12f06:	|      movea.l 1e1da <currentEvents>,a0
   12f0c:	|      move.l (sp),d0
   12f0e:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12f12:	|      moveq #2,d0
   12f14:	|  ,-- bra.s 12f18 <builtIn_onLeftMouseUp+0x3c>
	}
	return BR_ERROR;
   12f16:	'--|-> moveq #1,d0
}
   12f18:	   '-> addq.l #4,sp
   12f1a:	       rts

00012f1c <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   12f1c:	       subq.l #4,sp
	KPrintF("running onRightMouse\n");
   12f1e:	       pea 1b81f <talk.c.490538ff+0x14b>
   12f24:	       jsr 184fe <KPrintF>
   12f2a:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f2c:	       move.l sp,d0
   12f2e:	       move.l d0,-(sp)
   12f30:	       move.l 16(sp),-(sp)
   12f34:	       move.l 16(sp),-(sp)
   12f38:	       jsr 12e3a <getFuncNumForCallback>
   12f3e:	       lea 12(sp),sp
   12f42:	       tst.w d0
   12f44:	,----- beq.s 12f56 <builtIn_onRightMouse+0x3a>
	{
		currentEvents -> rightMouseFunction = functionNum;
   12f46:	|      movea.l 1e1da <currentEvents>,a0
   12f4c:	|      move.l (sp),d0
   12f4e:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12f52:	|      moveq #2,d0
   12f54:	|  ,-- bra.s 12f58 <builtIn_onRightMouse+0x3c>
	}
	return BR_ERROR;
   12f56:	'--|-> moveq #1,d0
}
   12f58:	   '-> addq.l #4,sp
   12f5a:	       rts

00012f5c <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12f5c:	       subq.l #4,sp
	KPrintF("running onRightMouseUp\n");
   12f5e:	       pea 1b835 <talk.c.490538ff+0x161>
   12f64:	       jsr 184fe <KPrintF>
   12f6a:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f6c:	       move.l sp,d0
   12f6e:	       move.l d0,-(sp)
   12f70:	       move.l 16(sp),-(sp)
   12f74:	       move.l 16(sp),-(sp)
   12f78:	       jsr 12e3a <getFuncNumForCallback>
   12f7e:	       lea 12(sp),sp
   12f82:	       tst.w d0
   12f84:	,----- beq.s 12f96 <builtIn_onRightMouseUp+0x3a>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12f86:	|      movea.l 1e1da <currentEvents>,a0
   12f8c:	|      move.l (sp),d0
   12f8e:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12f92:	|      moveq #2,d0
   12f94:	|  ,-- bra.s 12f98 <builtIn_onRightMouseUp+0x3c>
	}
	return BR_ERROR;
   12f96:	'--|-> moveq #1,d0
}
   12f98:	   '-> addq.l #4,sp
   12f9a:	       rts

00012f9c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12f9c:	       subq.l #4,sp
	KPrintF("running onFocusChange\n");
   12f9e:	       pea 1b84d <talk.c.490538ff+0x179>
   12fa4:	       jsr 184fe <KPrintF>
   12faa:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12fac:	       move.l sp,d0
   12fae:	       move.l d0,-(sp)
   12fb0:	       move.l 16(sp),-(sp)
   12fb4:	       move.l 16(sp),-(sp)
   12fb8:	       jsr 12e3a <getFuncNumForCallback>
   12fbe:	       lea 12(sp),sp
   12fc2:	       tst.w d0
   12fc4:	,----- beq.s 12fd6 <builtIn_onFocusChange+0x3a>
	{
		currentEvents -> focusFunction = functionNum;
   12fc6:	|      movea.l 1e1da <currentEvents>,a0
   12fcc:	|      move.l (sp),d0
   12fce:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   12fd2:	|      moveq #2,d0
   12fd4:	|  ,-- bra.s 12fd8 <builtIn_onFocusChange+0x3c>
	}
	return BR_ERROR;
   12fd6:	'--|-> moveq #1,d0
}
   12fd8:	   '-> addq.l #4,sp
   12fda:	       rts

00012fdc <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12fdc:	       subq.l #4,sp
	KPrintF("running onMoveMouse\n");
   12fde:	       pea 1b864 <talk.c.490538ff+0x190>
   12fe4:	       jsr 184fe <KPrintF>
   12fea:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12fec:	       move.l sp,d0
   12fee:	       move.l d0,-(sp)
   12ff0:	       move.l 16(sp),-(sp)
   12ff4:	       move.l 16(sp),-(sp)
   12ff8:	       jsr 12e3a <getFuncNumForCallback>
   12ffe:	       lea 12(sp),sp
   13002:	       tst.w d0
   13004:	,----- beq.s 13016 <builtIn_onMoveMouse+0x3a>
	{
		currentEvents -> moveMouseFunction = functionNum;
   13006:	|      movea.l 1e1da <currentEvents>,a0
   1300c:	|      move.l (sp),d0
   1300e:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   13012:	|      moveq #2,d0
   13014:	|  ,-- bra.s 13018 <builtIn_onMoveMouse+0x3c>
	}
	return BR_ERROR;
   13016:	'--|-> moveq #1,d0
}
   13018:	   '-> addq.l #4,sp
   1301a:	       rts

0001301c <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1301c:	       subq.l #4,sp
	KPrintF("running onKeyboard\n");
   1301e:	       pea 1b879 <talk.c.490538ff+0x1a5>
   13024:	       jsr 184fe <KPrintF>
   1302a:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1302c:	       move.l sp,d0
   1302e:	       move.l d0,-(sp)
   13030:	       move.l 16(sp),-(sp)
   13034:	       move.l 16(sp),-(sp)
   13038:	       jsr 12e3a <getFuncNumForCallback>
   1303e:	       lea 12(sp),sp
   13042:	       tst.w d0
   13044:	,----- beq.s 13056 <builtIn_onKeyboard+0x3a>
	{
		currentEvents -> spaceFunction = functionNum;
   13046:	|      movea.l 1e1da <currentEvents>,a0
   1304c:	|      move.l (sp),d0
   1304e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   13052:	|      moveq #2,d0
   13054:	|  ,-- bra.s 13058 <builtIn_onKeyboard+0x3c>
	}
	return BR_ERROR;
   13056:	'--|-> moveq #1,d0
}
   13058:	   '-> addq.l #4,sp
   1305a:	       rts

0001305c <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1305c:	          subq.l #4,sp
	KPrintF("running spawnSub\n");
   1305e:	          pea 1b88d <talk.c.490538ff+0x1b9>
   13064:	          jsr 184fe <KPrintF>
   1306a:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1306c:	          move.l sp,d0
   1306e:	          move.l d0,-(sp)
   13070:	          move.l 16(sp),-(sp)
   13074:	          move.l 16(sp),-(sp)
   13078:	          jsr 12e3a <getFuncNumForCallback>
   1307e:	          lea 12(sp),sp
   13082:	          tst.w d0
   13084:	,-------- beq.s 130b0 <builtIn_spawnSub+0x54>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   13086:	|         move.l 1e844 <noStack>,d1
   1308c:	|         move.l (sp),d0
   1308e:	|         pea 1 <_start+0x1>
   13092:	|         move.l d1,-(sp)
   13094:	|         clr.l -(sp)
   13096:	|         clr.l -(sp)
   13098:	|         move.l d0,-(sp)
   1309a:	|         jsr 7d2a <startNewFunctionNum>
   130a0:	|         lea 20(sp),sp
   130a4:	|         tst.l d0
   130a6:	|     ,-- bne.s 130ac <builtIn_spawnSub+0x50>
   130a8:	|     |   moveq #1,d0
   130aa:	|  ,--|-- bra.s 130b2 <builtIn_spawnSub+0x56>
		return BR_CONTINUE;
   130ac:	|  |  '-> moveq #2,d0
   130ae:	|  +----- bra.s 130b2 <builtIn_spawnSub+0x56>
	}
	return BR_ERROR;
   130b0:	'--|----> moveq #1,d0
}
   130b2:	   '----> addq.l #4,sp
   130b4:	          rts

000130b6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   130b6:	          subq.l #8,sp
	KPrintF("running cancelSub\n");
   130b8:	          pea 1b89f <talk.c.490538ff+0x1cb>
   130be:	          jsr 184fe <KPrintF>
   130c4:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   130c6:	          move.l sp,d0
   130c8:	          addq.l #4,d0
   130ca:	          move.l d0,-(sp)
   130cc:	          move.l 20(sp),-(sp)
   130d0:	          move.l 20(sp),-(sp)
   130d4:	          jsr 12e3a <getFuncNumForCallback>
   130da:	          lea 12(sp),sp
   130de:	          tst.w d0
   130e0:	,-------- beq.s 13116 <builtIn_cancelSub+0x60>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   130e2:	|         move.l 4(sp),d1
   130e6:	|         move.l sp,d0
   130e8:	|         addq.l #2,d0
   130ea:	|         move.l d0,-(sp)
   130ec:	|         move.l 20(sp),-(sp)
   130f0:	|         move.l d1,-(sp)
   130f2:	|         jsr 568c <cancelAFunction>
   130f8:	|         lea 12(sp),sp
		if (killedMyself) {
   130fc:	|         move.w 2(sp),d0
   13100:	|  ,----- beq.s 13112 <builtIn_cancelSub+0x5c>
			abortFunction (fun);
   13102:	|  |      move.l 16(sp),-(sp)
   13106:	|  |      jsr 55ac <abortFunction>
   1310c:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1310e:	|  |      moveq #5,d0
   13110:	|  |  ,-- bra.s 13118 <builtIn_cancelSub+0x62>
		}
		return BR_CONTINUE;
   13112:	|  '--|-> moveq #2,d0
   13114:	|     +-- bra.s 13118 <builtIn_cancelSub+0x62>
	}
	return BR_ERROR;
   13116:	'-----|-> moveq #1,d0
}
   13118:	      '-> addq.l #8,sp
   1311a:	          rts

0001311c <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1311c:	       subq.l #8,sp
   1311e:	       move.l a6,-(sp)
	KPrintF("running stringWidth\n");
   13120:	       pea 1b8b2 <talk.c.490538ff+0x1de>
   13126:	       jsr 184fe <KPrintF>
   1312c:	       addq.l #4,sp
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   1312e:	       movea.l 20(sp),a0
   13132:	       move.l 24(a0),d0
   13136:	       move.l d0,-(sp)
   13138:	       jsr 15ff4 <getTextFromAnyVar>
   1313e:	       addq.l #4,sp
   13140:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   13144:	   ,-- bne.s 1314a <builtIn_stringWidth+0x2e>
   13146:	   |   moveq #1,d0
   13148:	,--|-- bra.s 13198 <builtIn_stringWidth+0x7c>
	trimStack(&fun->stack);
   1314a:	|  '-> moveq #24,d0
   1314c:	|      add.l 20(sp),d0
   13150:	|      move.l d0,-(sp)
   13152:	|      jsr 163a2 <trimStack>
   13158:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1315a:	|      move.l 8(sp),-(sp)
   1315e:	|      jsr 16b08 <stringWidth>
   13164:	|      addq.l #4,sp
   13166:	|      move.l d0,d1
   13168:	|      moveq #28,d0
   1316a:	|      add.l 20(sp),d0
   1316e:	|      move.l d1,-(sp)
   13170:	|      pea 1 <_start+0x1>
   13174:	|      move.l d0,-(sp)
   13176:	|      jsr 16310 <setVariable>
   1317c:	|      lea 12(sp),sp
	FreeVec(theText);
   13180:	|      move.l 8(sp),4(sp)
   13186:	|      move.l 1e876 <SysBase>,d0
   1318c:	|      movea.l d0,a6
   1318e:	|      movea.l 4(sp),a1
   13192:	|      jsr -690(a6)
	return BR_CONTINUE;
   13196:	|      moveq #2,d0
}
   13198:	'----> movea.l (sp)+,a6
   1319a:	       addq.l #8,sp
   1319c:	       rts

0001319e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1319e:	       subq.l #4,sp
	KPrintF("running hardScroll\n");
   131a0:	       pea 1b8c7 <talk.c.490538ff+0x1f3>
   131a6:	       jsr 184fe <KPrintF>
   131ac:	       addq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131ae:	       movea.l 12(sp),a0
   131b2:	       move.l 24(a0),d0
   131b6:	       move.l d0,-(sp)
   131b8:	       pea 1 <_start+0x1>
   131bc:	       move.l sp,d0
   131be:	       addq.l #8,d0
   131c0:	       move.l d0,-(sp)
   131c2:	       jsr 15a1e <getValueType>
   131c8:	       lea 12(sp),sp
   131cc:	       tst.w d0
   131ce:	   ,-- bne.s 131d4 <builtIn_hardScroll+0x36>
   131d0:	   |   moveq #1,d0
   131d2:	,--|-- bra.s 131f2 <builtIn_hardScroll+0x54>
	trimStack (&fun -> stack);
   131d4:	|  '-> moveq #24,d0
   131d6:	|      add.l 12(sp),d0
   131da:	|      move.l d0,-(sp)
   131dc:	|      jsr 163a2 <trimStack>
   131e2:	|      addq.l #4,sp
	hardScroll (v);
   131e4:	|      move.l (sp),d0
   131e6:	|      move.l d0,-(sp)
   131e8:	|      jsr dcaa <hardScroll>
   131ee:	|      addq.l #4,sp
	return BR_CONTINUE;
   131f0:	|      moveq #2,d0
}
   131f2:	'----> addq.l #4,sp
   131f4:	       rts

000131f6 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   131f6:	       subq.l #4,sp
	KPrintF("running isScreenRegion\n");
   131f8:	       pea 1b8db <talk.c.490538ff+0x207>
   131fe:	       jsr 184fe <KPrintF>
   13204:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13206:	       movea.l 12(sp),a0
   1320a:	       move.l 24(a0),d0
   1320e:	       move.l d0,-(sp)
   13210:	       pea 7 <_start+0x7>
   13214:	       move.l sp,d0
   13216:	       addq.l #8,d0
   13218:	       move.l d0,-(sp)
   1321a:	       jsr 15a1e <getValueType>
   13220:	       lea 12(sp),sp
   13224:	       tst.w d0
   13226:	   ,-- bne.s 1322c <builtIn_isScreenRegion+0x36>
   13228:	   |   moveq #1,d0
   1322a:	,--|-- bra.s 1326c <builtIn_isScreenRegion+0x76>
	trimStack (&fun -> stack);
   1322c:	|  '-> moveq #24,d0
   1322e:	|      add.l 12(sp),d0
   13232:	|      move.l d0,-(sp)
   13234:	|      jsr 163a2 <trimStack>
   1323a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   1323c:	|      move.l (sp),d0
   1323e:	|      move.l d0,-(sp)
   13240:	|      jsr 16ce0 <getRegionForObject>
   13246:	|      addq.l #4,sp
   13248:	|      tst.l d0
   1324a:	|      sne d0
   1324c:	|      neg.b d0
   1324e:	|      moveq #0,d1
   13250:	|      move.b d0,d1
   13252:	|      moveq #28,d0
   13254:	|      add.l 12(sp),d0
   13258:	|      move.l d1,-(sp)
   1325a:	|      pea 1 <_start+0x1>
   1325e:	|      move.l d0,-(sp)
   13260:	|      jsr 16310 <setVariable>
   13266:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1326a:	|      moveq #2,d0
}
   1326c:	'----> addq.l #4,sp
   1326e:	       rts

00013270 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   13270:	       subq.l #4,sp
	KPrintF("running setSpeechSpeed\n");
   13272:	       pea 1b8f3 <talk.c.490538ff+0x21f>
   13278:	       jsr 184fe <KPrintF>
   1327e:	       addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13280:	       movea.l 12(sp),a0
   13284:	       move.l 24(a0),d0
   13288:	       move.l d0,-(sp)
   1328a:	       pea 1 <_start+0x1>
   1328e:	       move.l sp,d0
   13290:	       addq.l #8,d0
   13292:	       move.l d0,-(sp)
   13294:	       jsr 15a1e <getValueType>
   1329a:	       lea 12(sp),sp
   1329e:	       tst.w d0
   132a0:	   ,-- bne.s 132a6 <builtIn_setSpeechSpeed+0x36>
   132a2:	   |   moveq #1,d0
   132a4:	,--|-- bra.s 132f4 <builtIn_setSpeechSpeed+0x84>
	trimStack (&fun -> stack);
   132a6:	|  '-> moveq #24,d0
   132a8:	|      add.l 12(sp),d0
   132ac:	|      move.l d0,-(sp)
   132ae:	|      jsr 163a2 <trimStack>
   132b4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   132b6:	|      move.l (sp),d0
   132b8:	|      move.l d0,-(sp)
   132ba:	|      jsr 18930 <__floatsisf>
   132c0:	|      addq.l #4,sp
   132c2:	|      move.l #1008981770,-(sp)
   132c8:	|      move.l d0,-(sp)
   132ca:	|      jsr 189e2 <__mulsf3>
   132d0:	|      addq.l #8,sp
   132d2:	|      move.l d0,1e1d4 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   132d8:	|      moveq #28,d0
   132da:	|      add.l 12(sp),d0
   132de:	|      pea 1 <_start+0x1>
   132e2:	|      pea 1 <_start+0x1>
   132e6:	|      move.l d0,-(sp)
   132e8:	|      jsr 16310 <setVariable>
   132ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132f2:	|      moveq #2,d0
}
   132f4:	'----> addq.l #4,sp
   132f6:	       rts

000132f8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   132f8:	       subq.l #4,sp
	KPrintF("running setFontSpacing\n");
   132fa:	       pea 1b90b <talk.c.490538ff+0x237>
   13300:	       jsr 184fe <KPrintF>
   13306:	       addq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13308:	       movea.l 12(sp),a0
   1330c:	       move.l 24(a0),d0
   13310:	       move.l d0,-(sp)
   13312:	       pea 1 <_start+0x1>
   13316:	       move.l sp,d0
   13318:	       addq.l #8,d0
   1331a:	       move.l d0,-(sp)
   1331c:	       jsr 15a1e <getValueType>
   13322:	       lea 12(sp),sp
   13326:	       tst.w d0
   13328:	   ,-- bne.s 1332e <builtIn_setFontSpacing+0x36>
   1332a:	   |   moveq #1,d0
   1332c:	,--|-- bra.s 13364 <builtIn_setFontSpacing+0x6c>
	fontSpace = fontSpaceI;
   1332e:	|  '-> move.l (sp),d0
   13330:	|      move.l d0,d0
   13332:	|      move.w d0,1e76a <fontSpace>
	trimStack (&fun -> stack);
   13338:	|      moveq #24,d0
   1333a:	|      add.l 12(sp),d0
   1333e:	|      move.l d0,-(sp)
   13340:	|      jsr 163a2 <trimStack>
   13346:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13348:	|      moveq #28,d0
   1334a:	|      add.l 12(sp),d0
   1334e:	|      pea 1 <_start+0x1>
   13352:	|      pea 1 <_start+0x1>
   13356:	|      move.l d0,-(sp)
   13358:	|      jsr 16310 <setVariable>
   1335e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13362:	|      moveq #2,d0
}
   13364:	'----> addq.l #4,sp
   13366:	       rts

00013368 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   13368:	          subq.l #4,sp
	KPrintF("running transitionLevel\n");
   1336a:	          pea 1b923 <talk.c.490538ff+0x24f>
   13370:	          jsr 184fe <KPrintF>
   13376:	          addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13378:	          movea.l 12(sp),a0
   1337c:	          move.l 24(a0),d0
   13380:	          move.l d0,-(sp)
   13382:	          pea 1 <_start+0x1>
   13386:	          move.l sp,d0
   13388:	          addq.l #8,d0
   1338a:	          move.l d0,-(sp)
   1338c:	          jsr 15a1e <getValueType>
   13392:	          lea 12(sp),sp
   13396:	          tst.w d0
   13398:	      ,-- bne.s 1339e <builtIn_transitionLevel+0x36>
   1339a:	      |   moveq #1,d0
   1339c:	,-----|-- bra.s 133f2 <builtIn_transitionLevel+0x8a>
	trimStack (&fun -> stack);
   1339e:	|     '-> moveq #24,d0
   133a0:	|         add.l 12(sp),d0
   133a4:	|         move.l d0,-(sp)
   133a6:	|         jsr 163a2 <trimStack>
   133ac:	|         addq.l #4,sp

	if (number < 0)
   133ae:	|         move.l (sp),d0
   133b0:	|     ,-- bpl.s 133ba <builtIn_transitionLevel+0x52>
		brightnessLevel = 0;
   133b2:	|     |   clr.b 1e1d8 <brightnessLevel>
   133b8:	|  ,--|-- bra.s 133d6 <builtIn_transitionLevel+0x6e>
	else if (number > 255)
   133ba:	|  |  '-> move.l (sp),d0
   133bc:	|  |      cmpi.l #255,d0
   133c2:	|  |  ,-- ble.s 133cc <builtIn_transitionLevel+0x64>
		brightnessLevel = 255;
   133c4:	|  |  |   st 1e1d8 <brightnessLevel>
   133ca:	|  +--|-- bra.s 133d6 <builtIn_transitionLevel+0x6e>
	else
		brightnessLevel = number;
   133cc:	|  |  '-> move.l (sp),d0
   133ce:	|  |      move.l d0,d0
   133d0:	|  |      move.b d0,1e1d8 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   133d6:	|  '----> moveq #28,d0
   133d8:	|         add.l 12(sp),d0
   133dc:	|         pea 1 <_start+0x1>
   133e0:	|         pea 1 <_start+0x1>
   133e4:	|         move.l d0,-(sp)
   133e6:	|         jsr 16310 <setVariable>
   133ec:	|         lea 12(sp),sp
	return BR_CONTINUE;
   133f0:	|         moveq #2,d0
}
   133f2:	'-------> addq.l #4,sp
   133f4:	          rts

000133f6 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	KPrintF("running captureAllKeys\n");
   133f6:	pea 1b93c <talk.c.490538ff+0x268>
   133fc:	jsr 184fe <KPrintF>
   13402:	addq.l #4,sp
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   13404:	movea.l 8(sp),a0
   13408:	move.l 24(a0),d0
   1340c:	move.l d0,-(sp)
   1340e:	jsr 15f5e <getBoolean>
   13414:	addq.l #4,sp
   13416:	move.w d0,1e814 <captureAllKeys>
	trimStack (&fun -> stack);
   1341c:	moveq #24,d0
   1341e:	add.l 8(sp),d0
   13422:	move.l d0,-(sp)
   13424:	jsr 163a2 <trimStack>
   1342a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1342c:	move.w 1e814 <captureAllKeys>,d0
   13432:	movea.w d0,a0
   13434:	moveq #28,d0
   13436:	add.l 8(sp),d0
   1343a:	move.l a0,-(sp)
   1343c:	pea 1 <_start+0x1>
   13440:	move.l d0,-(sp)
   13442:	jsr 16310 <setVariable>
   13448:	lea 12(sp),sp
	return BR_CONTINUE;
   1344c:	moveq #2,d0
}
   1344e:	rts

00013450 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   13450:	       lea -12(sp),sp
	KPrintF("running spinCharacter\n");
   13454:	       pea 1b954 <talk.c.490538ff+0x280>
   1345a:	       jsr 184fe <KPrintF>
   13460:	       addq.l #4,sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13462:	       movea.l 20(sp),a0
   13466:	       move.l 24(a0),d0
   1346a:	       move.l d0,-(sp)
   1346c:	       pea 1 <_start+0x1>
   13470:	       moveq #12,d0
   13472:	       add.l sp,d0
   13474:	       move.l d0,-(sp)
   13476:	       jsr 15a1e <getValueType>
   1347c:	       lea 12(sp),sp
   13480:	       tst.w d0
   13482:	   ,-- bne.s 1348a <builtIn_spinCharacter+0x3a>
   13484:	   |   moveq #1,d0
   13486:	,--|-- bra.w 1353a <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   1348a:	|  '-> moveq #24,d0
   1348c:	|      add.l 20(sp),d0
   13490:	|      move.l d0,-(sp)
   13492:	|      jsr 163a2 <trimStack>
   13498:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1349a:	|      movea.l 20(sp),a0
   1349e:	|      move.l 24(a0),d0
   134a2:	|      move.l d0,-(sp)
   134a4:	|      pea 7 <_start+0x7>
   134a8:	|      lea 8(sp),a0
   134ac:	|      move.l a0,-(sp)
   134ae:	|      jsr 15a1e <getValueType>
   134b4:	|      lea 12(sp),sp
   134b8:	|      tst.w d0
   134ba:	|  ,-- bne.s 134c0 <builtIn_spinCharacter+0x70>
   134bc:	|  |   moveq #1,d0
   134be:	+--|-- bra.s 1353a <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   134c0:	|  '-> moveq #24,d0
   134c2:	|      add.l 20(sp),d0
   134c6:	|      move.l d0,-(sp)
   134c8:	|      jsr 163a2 <trimStack>
   134ce:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   134d0:	|      move.l (sp),d0
   134d2:	|      move.l d0,-(sp)
   134d4:	|      jsr afea <findPerson>
   134da:	|      addq.l #4,sp
   134dc:	|      move.l d0,8(sp)
	if (thisPerson) {
   134e0:	|  ,-- beq.s 13520 <builtIn_spinCharacter+0xd0>
		thisPerson -> wantAngle = number;
   134e2:	|  |   move.l 4(sp),d0
   134e6:	|  |   movea.l 8(sp),a0
   134ea:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   134ee:	|  |   movea.l 8(sp),a0
   134f2:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   134f8:	|  |   movea.l 8(sp),a0
   134fc:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13502:	|  |   moveq #28,d0
   13504:	|  |   add.l 20(sp),d0
   13508:	|  |   pea 1 <_start+0x1>
   1350c:	|  |   pea 1 <_start+0x1>
   13510:	|  |   move.l d0,-(sp)
   13512:	|  |   jsr 16310 <setVariable>
   13518:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1351c:	|  |   moveq #3,d0
   1351e:	+--|-- bra.s 1353a <builtIn_spinCharacter+0xea>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13520:	|  '-> moveq #28,d0
   13522:	|      add.l 20(sp),d0
   13526:	|      clr.l -(sp)
   13528:	|      pea 1 <_start+0x1>
   1352c:	|      move.l d0,-(sp)
   1352e:	|      jsr 16310 <setVariable>
   13534:	|      lea 12(sp),sp
		return BR_CONTINUE;
   13538:	|      moveq #2,d0
	}
}
   1353a:	'----> lea 12(sp),sp
   1353e:	       rts

00013540 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   13540:	          subq.l #8,sp
	KPrintF("running getCharacterDirection\n");
   13542:	          pea 1b96b <talk.c.490538ff+0x297>
   13548:	          jsr 184fe <KPrintF>
   1354e:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13550:	          movea.l 16(sp),a0
   13554:	          move.l 24(a0),d0
   13558:	          move.l d0,-(sp)
   1355a:	          pea 7 <_start+0x7>
   1355e:	          move.l sp,d0
   13560:	          addq.l #8,d0
   13562:	          move.l d0,-(sp)
   13564:	          jsr 15a1e <getValueType>
   1356a:	          lea 12(sp),sp
   1356e:	          tst.w d0
   13570:	      ,-- bne.s 13576 <builtIn_getCharacterDirection+0x36>
   13572:	      |   moveq #1,d0
   13574:	,-----|-- bra.s 135d4 <builtIn_getCharacterDirection+0x94>
	trimStack (&fun -> stack);
   13576:	|     '-> moveq #24,d0
   13578:	|         add.l 16(sp),d0
   1357c:	|         move.l d0,-(sp)
   1357e:	|         jsr 163a2 <trimStack>
   13584:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13586:	|         move.l (sp),d0
   13588:	|         move.l d0,-(sp)
   1358a:	|         jsr afea <findPerson>
   13590:	|         addq.l #4,sp
   13592:	|         move.l d0,4(sp)
	if (thisPerson) {
   13596:	|  ,----- beq.s 135ba <builtIn_getCharacterDirection+0x7a>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   13598:	|  |      movea.l 4(sp),a0
   1359c:	|  |      move.l 106(a0),d1
   135a0:	|  |      moveq #28,d0
   135a2:	|  |      add.l 16(sp),d0
   135a6:	|  |      move.l d1,-(sp)
   135a8:	|  |      pea 1 <_start+0x1>
   135ac:	|  |      move.l d0,-(sp)
   135ae:	|  |      jsr 16310 <setVariable>
   135b4:	|  |      lea 12(sp),sp
   135b8:	|  |  ,-- bra.s 135d2 <builtIn_getCharacterDirection+0x92>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   135ba:	|  '--|-> moveq #28,d0
   135bc:	|     |   add.l 16(sp),d0
   135c0:	|     |   clr.l -(sp)
   135c2:	|     |   pea 1 <_start+0x1>
   135c6:	|     |   move.l d0,-(sp)
   135c8:	|     |   jsr 16310 <setVariable>
   135ce:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   135d2:	|     '-> moveq #2,d0
}
   135d4:	'-------> addq.l #8,sp
   135d6:	          rts

000135d8 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   135d8:	       subq.l #8,sp
	KPrintF("running isCharacter\n");
   135da:	       pea 1b98a <talk.c.490538ff+0x2b6>
   135e0:	       jsr 184fe <KPrintF>
   135e6:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   135e8:	       movea.l 16(sp),a0
   135ec:	       move.l 24(a0),d0
   135f0:	       move.l d0,-(sp)
   135f2:	       pea 7 <_start+0x7>
   135f6:	       move.l sp,d0
   135f8:	       addq.l #8,d0
   135fa:	       move.l d0,-(sp)
   135fc:	       jsr 15a1e <getValueType>
   13602:	       lea 12(sp),sp
   13606:	       tst.w d0
   13608:	   ,-- bne.s 1360e <builtIn_isCharacter+0x36>
   1360a:	   |   moveq #1,d0
   1360c:	,--|-- bra.s 13650 <builtIn_isCharacter+0x78>
	trimStack (&fun -> stack);
   1360e:	|  '-> moveq #24,d0
   13610:	|      add.l 16(sp),d0
   13614:	|      move.l d0,-(sp)
   13616:	|      jsr 163a2 <trimStack>
   1361c:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1361e:	|      move.l (sp),d0
   13620:	|      move.l d0,-(sp)
   13622:	|      jsr afea <findPerson>
   13628:	|      addq.l #4,sp
   1362a:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   1362e:	|      sne d0
   13630:	|      neg.b d0
   13632:	|      moveq #0,d1
   13634:	|      move.b d0,d1
   13636:	|      moveq #28,d0
   13638:	|      add.l 16(sp),d0
   1363c:	|      move.l d1,-(sp)
   1363e:	|      pea 1 <_start+0x1>
   13642:	|      move.l d0,-(sp)
   13644:	|      jsr 16310 <setVariable>
   1364a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1364e:	|      moveq #2,d0
}
   13650:	'----> addq.l #8,sp
   13652:	       rts

00013654 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   13654:	          subq.l #8,sp
	KPrintF("running normalCharacter\n");
   13656:	          pea 1b99f <talk.c.490538ff+0x2cb>
   1365c:	          jsr 184fe <KPrintF>
   13662:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13664:	          movea.l 16(sp),a0
   13668:	          move.l 24(a0),d0
   1366c:	          move.l d0,-(sp)
   1366e:	          pea 7 <_start+0x7>
   13672:	          move.l sp,d0
   13674:	          addq.l #8,d0
   13676:	          move.l d0,-(sp)
   13678:	          jsr 15a1e <getValueType>
   1367e:	          lea 12(sp),sp
   13682:	          tst.w d0
   13684:	      ,-- bne.s 1368a <builtIn_normalCharacter+0x36>
   13686:	      |   moveq #1,d0
   13688:	,-----|-- bra.s 13706 <builtIn_normalCharacter+0xb2>
	trimStack (&fun -> stack);
   1368a:	|     '-> moveq #24,d0
   1368c:	|         add.l 16(sp),d0
   13690:	|         move.l d0,-(sp)
   13692:	|         jsr 163a2 <trimStack>
   13698:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1369a:	|         move.l (sp),d0
   1369c:	|         move.l d0,-(sp)
   1369e:	|         jsr afea <findPerson>
   136a4:	|         addq.l #4,sp
   136a6:	|         move.l d0,4(sp)
	if (thisPerson)
   136aa:	|  ,----- beq.s 136ec <builtIn_normalCharacter+0x98>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   136ac:	|  |      movea.l 4(sp),a0
   136b0:	|  |      movea.l 80(a0),a0
   136b4:	|  |      move.l (a0),d1
   136b6:	|  |      movea.l 4(sp),a0
   136ba:	|  |      move.l 106(a0),d0
   136be:	|  |      add.l d0,d0
   136c0:	|  |      add.l d0,d0
   136c2:	|  |      movea.l d1,a0
   136c4:	|  |      adda.l d0,a0
   136c6:	|  |      move.l (a0),d0
   136c8:	|  |      movea.l 4(sp),a0
   136cc:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   136d0:	|  |      moveq #28,d0
   136d2:	|  |      add.l 16(sp),d0
   136d6:	|  |      pea 1 <_start+0x1>
   136da:	|  |      pea 1 <_start+0x1>
   136de:	|  |      move.l d0,-(sp)
   136e0:	|  |      jsr 16310 <setVariable>
   136e6:	|  |      lea 12(sp),sp
   136ea:	|  |  ,-- bra.s 13704 <builtIn_normalCharacter+0xb0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   136ec:	|  '--|-> moveq #28,d0
   136ee:	|     |   add.l 16(sp),d0
   136f2:	|     |   clr.l -(sp)
   136f4:	|     |   pea 1 <_start+0x1>
   136f8:	|     |   move.l d0,-(sp)
   136fa:	|     |   jsr 16310 <setVariable>
   13700:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13704:	|     '-> moveq #2,d0
}
   13706:	'-------> addq.l #8,sp
   13708:	          rts

0001370a <builtIn_isMoving>:

builtIn(isMoving)
{
   1370a:	          subq.l #8,sp
	KPrintF("running isMoving\n");
   1370c:	          pea 1b9b8 <talk.c.490538ff+0x2e4>
   13712:	          jsr 184fe <KPrintF>
   13718:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1371a:	          movea.l 16(sp),a0
   1371e:	          move.l 24(a0),d0
   13722:	          move.l d0,-(sp)
   13724:	          pea 7 <_start+0x7>
   13728:	          move.l sp,d0
   1372a:	          addq.l #8,d0
   1372c:	          move.l d0,-(sp)
   1372e:	          jsr 15a1e <getValueType>
   13734:	          lea 12(sp),sp
   13738:	          tst.w d0
   1373a:	      ,-- bne.s 13740 <builtIn_isMoving+0x36>
   1373c:	      |   moveq #1,d0
   1373e:	,-----|-- bra.s 137a0 <builtIn_isMoving+0x96>
	trimStack (&fun -> stack);
   13740:	|     '-> moveq #24,d0
   13742:	|         add.l 16(sp),d0
   13746:	|         move.l d0,-(sp)
   13748:	|         jsr 163a2 <trimStack>
   1374e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13750:	|         move.l (sp),d0
   13752:	|         move.l d0,-(sp)
   13754:	|         jsr afea <findPerson>
   1375a:	|         addq.l #4,sp
   1375c:	|         move.l d0,4(sp)
	if (thisPerson)
   13760:	|  ,----- beq.s 13786 <builtIn_isMoving+0x7c>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   13762:	|  |      movea.l 4(sp),a0
   13766:	|  |      move.w 64(a0),d0
   1376a:	|  |      movea.w d0,a0
   1376c:	|  |      moveq #28,d0
   1376e:	|  |      add.l 16(sp),d0
   13772:	|  |      move.l a0,-(sp)
   13774:	|  |      pea 1 <_start+0x1>
   13778:	|  |      move.l d0,-(sp)
   1377a:	|  |      jsr 16310 <setVariable>
   13780:	|  |      lea 12(sp),sp
   13784:	|  |  ,-- bra.s 1379e <builtIn_isMoving+0x94>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13786:	|  '--|-> moveq #28,d0
   13788:	|     |   add.l 16(sp),d0
   1378c:	|     |   clr.l -(sp)
   1378e:	|     |   pea 1 <_start+0x1>
   13792:	|     |   move.l d0,-(sp)
   13794:	|     |   jsr 16310 <setVariable>
   1379a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1379e:	|     '-> moveq #2,d0
}
   137a0:	'-------> addq.l #8,sp
   137a2:	          rts

000137a4 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   137a4:	          lea -12(sp),sp
	KPrintF("running fetchEvent\n");
   137a8:	          pea 1b9ca <talk.c.490538ff+0x2f6>
   137ae:	          jsr 184fe <KPrintF>
   137b4:	          addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   137b6:	          movea.l 20(sp),a0
   137ba:	          move.l 24(a0),d0
   137be:	          move.l d0,-(sp)
   137c0:	          pea 7 <_start+0x7>
   137c4:	          lea 8(sp),a0
   137c8:	          move.l a0,-(sp)
   137ca:	          jsr 15a1e <getValueType>
   137d0:	          lea 12(sp),sp
   137d4:	          tst.w d0
   137d6:	      ,-- bne.s 137de <builtIn_fetchEvent+0x3a>
   137d8:	      |   moveq #1,d0
   137da:	,-----|-- bra.w 13872 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   137de:	|     '-> moveq #24,d0
   137e0:	|         add.l 20(sp),d0
   137e4:	|         move.l d0,-(sp)
   137e6:	|         jsr 163a2 <trimStack>
   137ec:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   137ee:	|         movea.l 20(sp),a0
   137f2:	|         move.l 24(a0),d0
   137f6:	|         move.l d0,-(sp)
   137f8:	|         pea 7 <_start+0x7>
   137fc:	|         moveq #12,d0
   137fe:	|         add.l sp,d0
   13800:	|         move.l d0,-(sp)
   13802:	|         jsr 15a1e <getValueType>
   13808:	|         lea 12(sp),sp
   1380c:	|         tst.w d0
   1380e:	|     ,-- bne.s 13814 <builtIn_fetchEvent+0x70>
   13810:	|     |   moveq #1,d0
   13812:	+-----|-- bra.s 13872 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   13814:	|     '-> moveq #24,d0
   13816:	|         add.l 20(sp),d0
   1381a:	|         move.l d0,-(sp)
   1381c:	|         jsr 163a2 <trimStack>
   13822:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   13824:	|         move.l (sp),d1
   13826:	|         move.l 4(sp),d0
   1382a:	|         move.l d1,-(sp)
   1382c:	|         move.l d0,-(sp)
   1382e:	|         jsr df8c <getCombinationFunction>
   13834:	|         addq.l #8,sp
   13836:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1383a:	|  ,----- beq.s 13858 <builtIn_fetchEvent+0xb4>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1383c:	|  |      moveq #28,d0
   1383e:	|  |      add.l 20(sp),d0
   13842:	|  |      move.l 8(sp),-(sp)
   13846:	|  |      pea 2 <_start+0x2>
   1384a:	|  |      move.l d0,-(sp)
   1384c:	|  |      jsr 16310 <setVariable>
   13852:	|  |      lea 12(sp),sp
   13856:	|  |  ,-- bra.s 13870 <builtIn_fetchEvent+0xcc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13858:	|  '--|-> moveq #28,d0
   1385a:	|     |   add.l 20(sp),d0
   1385e:	|     |   clr.l -(sp)
   13860:	|     |   pea 1 <_start+0x1>
   13864:	|     |   move.l d0,-(sp)
   13866:	|     |   jsr 16310 <setVariable>
   1386c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13870:	|     '-> moveq #2,d0
}
   13872:	'-------> lea 12(sp),sp
   13876:	          rts

00013878 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   13878:	       lea -24(sp),sp
   1387c:	       move.l a6,-(sp)
	KPrintF("running deleteFile\n");
   1387e:	       pea 1b9de <talk.c.490538ff+0x30a>
   13884:	       jsr 184fe <KPrintF>
   1388a:	       addq.l #4,sp
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1388c:	       movea.l 36(sp),a0
   13890:	       move.l 24(a0),d0
   13894:	       move.l d0,-(sp)
   13896:	       jsr 15ff4 <getTextFromAnyVar>
   1389c:	       addq.l #4,sp
   1389e:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   138a2:	       moveq #24,d0
   138a4:	       add.l 36(sp),d0
   138a8:	       move.l d0,-(sp)
   138aa:	       jsr 163a2 <trimStack>
   138b0:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   138b2:	       move.l 24(sp),-(sp)
   138b6:	       jsr 2fe <encodeFilename>
   138bc:	       addq.l #4,sp
   138be:	       move.l d0,20(sp)
    FreeVec(namNormal);
   138c2:	       move.l 24(sp),16(sp)
   138c8:	       move.l 1e876 <SysBase>,d0
   138ce:	       movea.l d0,a6
   138d0:	       movea.l 16(sp),a1
   138d4:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   138d8:	       move.l 20(sp),-(sp)
   138dc:	       jsr ed44 <failSecurityCheck>
   138e2:	       addq.l #4,sp
   138e4:	       tst.w d0
   138e6:	   ,-- beq.s 138ec <builtIn_deleteFile+0x74>
   138e8:	   |   moveq #1,d0
   138ea:	,--|-- bra.s 1393a <builtIn_deleteFile+0xc2>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   138ec:	|  '-> move.l 20(sp),12(sp)
   138f2:	|      move.l 1e87e <DOSBase>,d0
   138f8:	|      movea.l d0,a6
   138fa:	|      move.l 12(sp),d1
   138fe:	|      jsr -72(a6)
   13902:	|      move.l d0,8(sp)
   13906:	|      move.l 8(sp),d1
   1390a:	|      moveq #28,d0
   1390c:	|      add.l 36(sp),d0
   13910:	|      move.l d1,-(sp)
   13912:	|      pea 1 <_start+0x1>
   13916:	|      move.l d0,-(sp)
   13918:	|      jsr 16310 <setVariable>
   1391e:	|      lea 12(sp),sp
    FreeVec(nam);
   13922:	|      move.l 20(sp),4(sp)
   13928:	|      move.l 1e876 <SysBase>,d0
   1392e:	|      movea.l d0,a6
   13930:	|      movea.l 4(sp),a1
   13934:	|      jsr -690(a6)

    return BR_CONTINUE;
   13938:	|      moveq #2,d0
}
   1393a:	'----> movea.l (sp)+,a6
   1393c:	       lea 24(sp),sp
   13940:	       rts

00013942 <builtIn_renameFile>:

builtIn(renameFile)
{
   13942:	       lea -40(sp),sp
   13946:	       move.l a6,-(sp)
   13948:	       move.l d2,-(sp)
	KPrintF("running renameFile\n");
   1394a:	       pea 1b9f2 <talk.c.490538ff+0x31e>
   13950:	       jsr 184fe <KPrintF>
   13956:	       addq.l #4,sp
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   13958:	       movea.l 56(sp),a0
   1395c:	       move.l 24(a0),d0
   13960:	       move.l d0,-(sp)
   13962:	       jsr 15ff4 <getTextFromAnyVar>
   13968:	       addq.l #4,sp
   1396a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1396e:	       move.l 44(sp),-(sp)
   13972:	       jsr 2fe <encodeFilename>
   13978:	       addq.l #4,sp
   1397a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1397e:	       moveq #24,d0
   13980:	       add.l 56(sp),d0
   13984:	       move.l d0,-(sp)
   13986:	       jsr 163a2 <trimStack>
   1398c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1398e:	       move.l 40(sp),-(sp)
   13992:	       jsr ed44 <failSecurityCheck>
   13998:	       addq.l #4,sp
   1399a:	       tst.w d0
   1399c:	   ,-- beq.s 139a4 <builtIn_renameFile+0x62>
   1399e:	   |   moveq #1,d0
   139a0:	,--|-- bra.w 13a8a <builtIn_renameFile+0x148>
	FreeVec(temp);
   139a4:	|  '-> move.l 44(sp),36(sp)
   139aa:	|      move.l 1e876 <SysBase>,d0
   139b0:	|      movea.l d0,a6
   139b2:	|      movea.l 36(sp),a1
   139b6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   139ba:	|      movea.l 56(sp),a0
   139be:	|      move.l 24(a0),d0
   139c2:	|      move.l d0,-(sp)
   139c4:	|      jsr 15ff4 <getTextFromAnyVar>
   139ca:	|      addq.l #4,sp
   139cc:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   139d0:	|      move.l 44(sp),-(sp)
   139d4:	|      jsr 2fe <encodeFilename>
   139da:	|      addq.l #4,sp
   139dc:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   139e0:	|      moveq #24,d0
   139e2:	|      add.l 56(sp),d0
   139e6:	|      move.l d0,-(sp)
   139e8:	|      jsr 163a2 <trimStack>
   139ee:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   139f0:	|      move.l 32(sp),-(sp)
   139f4:	|      jsr ed44 <failSecurityCheck>
   139fa:	|      addq.l #4,sp
   139fc:	|      tst.w d0
   139fe:	|  ,-- beq.s 13a06 <builtIn_renameFile+0xc4>
   13a00:	|  |   moveq #1,d0
   13a02:	+--|-- bra.w 13a8a <builtIn_renameFile+0x148>
	FreeVec(temp);
   13a06:	|  '-> move.l 44(sp),28(sp)
   13a0c:	|      move.l 1e876 <SysBase>,d0
   13a12:	|      movea.l d0,a6
   13a14:	|      movea.l 28(sp),a1
   13a18:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   13a1c:	|      move.l 32(sp),24(sp)
   13a22:	|      move.l 40(sp),20(sp)
   13a28:	|      move.l 1e87e <DOSBase>,d0
   13a2e:	|      movea.l d0,a6
   13a30:	|      move.l 24(sp),d1
   13a34:	|      move.l 20(sp),d2
   13a38:	|      jsr -78(a6)
   13a3c:	|      move.l d0,16(sp)
   13a40:	|      move.l 16(sp),d1
   13a44:	|      moveq #28,d0
   13a46:	|      add.l 56(sp),d0
   13a4a:	|      move.l d1,-(sp)
   13a4c:	|      pea 1 <_start+0x1>
   13a50:	|      move.l d0,-(sp)
   13a52:	|      jsr 16310 <setVariable>
   13a58:	|      lea 12(sp),sp
	FreeVec(nam);
   13a5c:	|      move.l 32(sp),12(sp)
   13a62:	|      move.l 1e876 <SysBase>,d0
   13a68:	|      movea.l d0,a6
   13a6a:	|      movea.l 12(sp),a1
   13a6e:	|      jsr -690(a6)
	FreeVec(newnam);
   13a72:	|      move.l 40(sp),8(sp)
   13a78:	|      move.l 1e876 <SysBase>,d0
   13a7e:	|      movea.l d0,a6
   13a80:	|      movea.l 8(sp),a1
   13a84:	|      jsr -690(a6)

	return BR_CONTINUE;
   13a88:	|      moveq #2,d0
}
   13a8a:	'----> move.l (sp)+,d2
   13a8c:	       movea.l (sp)+,a6
   13a8e:	       lea 40(sp),sp
   13a92:	       rts

00013a94 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   13a94:	       subq.l #4,sp
	KPrintF("running cacheSound\n");
   13a96:	       pea 1ba06 <talk.c.490538ff+0x332>
   13a9c:	       jsr 184fe <KPrintF>
   13aa2:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13aa4:	       movea.l 12(sp),a0
   13aa8:	       move.l 24(a0),d0
   13aac:	       move.l d0,-(sp)
   13aae:	       pea 5 <_start+0x5>
   13ab2:	       move.l sp,d0
   13ab4:	       addq.l #8,d0
   13ab6:	       move.l d0,-(sp)
   13ab8:	       jsr 15a1e <getValueType>
   13abe:	       lea 12(sp),sp
   13ac2:	       tst.w d0
   13ac4:	   ,-- bne.s 13aca <builtIn_cacheSound+0x36>
   13ac6:	   |   moveq #1,d0
   13ac8:	,--|-- bra.s 13af2 <builtIn_cacheSound+0x5e>
	trimStack (&fun -> stack);
   13aca:	|  '-> moveq #24,d0
   13acc:	|      add.l 12(sp),d0
   13ad0:	|      move.l d0,-(sp)
   13ad2:	|      jsr 163a2 <trimStack>
   13ad8:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   13ada:	|      move.l (sp),d0
   13adc:	|      move.l d0,-(sp)
   13ade:	|      jsr db82 <cacheSound>
   13ae4:	|      addq.l #4,sp
   13ae6:	|      moveq #-1,d1
   13ae8:	|      cmp.l d0,d1
   13aea:	|  ,-- bne.s 13af0 <builtIn_cacheSound+0x5c>
   13aec:	|  |   moveq #1,d0
   13aee:	+--|-- bra.s 13af2 <builtIn_cacheSound+0x5e>
	return BR_CONTINUE;
   13af0:	|  '-> moveq #2,d0
}
   13af2:	'----> addq.l #4,sp
   13af4:	       rts

00013af6 <builtIn_burnString>:

builtIn(burnString)
{
	KPrintF("running burnString\n");
   13af6:	pea 1ba1a <talk.c.490538ff+0x346>
   13afc:	jsr 184fe <KPrintF>
   13b02:	addq.l #4,sp
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   13b04:	pea 1ba2e <talk.c.490538ff+0x35a>
   13b0a:	jsr 184fe <KPrintF>
   13b10:	addq.l #4,sp
	return BR_CONTINUE;
   13b12:	moveq #2,d0
}
   13b14:	rts

00013b16 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   13b16:	          lea -12(sp),sp
	KPrintF("running setCharacterSpinSpeed\n");
   13b1a:	          pea 1ba58 <talk.c.490538ff+0x384>
   13b20:	          jsr 184fe <KPrintF>
   13b26:	          addq.l #4,sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13b28:	          movea.l 20(sp),a0
   13b2c:	          move.l 24(a0),d0
   13b30:	          move.l d0,-(sp)
   13b32:	          pea 1 <_start+0x1>
   13b36:	          moveq #12,d0
   13b38:	          add.l sp,d0
   13b3a:	          move.l d0,-(sp)
   13b3c:	          jsr 15a1e <getValueType>
   13b42:	          lea 12(sp),sp
   13b46:	          tst.w d0
   13b48:	      ,-- bne.s 13b50 <builtIn_setCharacterSpinSpeed+0x3a>
   13b4a:	      |   moveq #1,d0
   13b4c:	,-----|-- bra.w 13bea <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13b50:	|     '-> moveq #24,d0
   13b52:	|         add.l 20(sp),d0
   13b56:	|         move.l d0,-(sp)
   13b58:	|         jsr 163a2 <trimStack>
   13b5e:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13b60:	|         movea.l 20(sp),a0
   13b64:	|         move.l 24(a0),d0
   13b68:	|         move.l d0,-(sp)
   13b6a:	|         pea 7 <_start+0x7>
   13b6e:	|         lea 8(sp),a0
   13b72:	|         move.l a0,-(sp)
   13b74:	|         jsr 15a1e <getValueType>
   13b7a:	|         lea 12(sp),sp
   13b7e:	|         tst.w d0
   13b80:	|     ,-- bne.s 13b86 <builtIn_setCharacterSpinSpeed+0x70>
   13b82:	|     |   moveq #1,d0
   13b84:	+-----|-- bra.s 13bea <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13b86:	|     '-> moveq #24,d0
   13b88:	|         add.l 20(sp),d0
   13b8c:	|         move.l d0,-(sp)
   13b8e:	|         jsr 163a2 <trimStack>
   13b94:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13b96:	|         move.l (sp),d0
   13b98:	|         move.l d0,-(sp)
   13b9a:	|         jsr afea <findPerson>
   13ba0:	|         addq.l #4,sp
   13ba2:	|         move.l d0,8(sp)

	if (thisPerson) {
   13ba6:	|  ,----- beq.s 13bd0 <builtIn_setCharacterSpinSpeed+0xba>
		thisPerson -> spinSpeed = speed;
   13ba8:	|  |      move.l 4(sp),d0
   13bac:	|  |      movea.l 8(sp),a0
   13bb0:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13bb4:	|  |      moveq #28,d0
   13bb6:	|  |      add.l 20(sp),d0
   13bba:	|  |      pea 1 <_start+0x1>
   13bbe:	|  |      pea 1 <_start+0x1>
   13bc2:	|  |      move.l d0,-(sp)
   13bc4:	|  |      jsr 16310 <setVariable>
   13bca:	|  |      lea 12(sp),sp
   13bce:	|  |  ,-- bra.s 13be8 <builtIn_setCharacterSpinSpeed+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13bd0:	|  '--|-> moveq #28,d0
   13bd2:	|     |   add.l 20(sp),d0
   13bd6:	|     |   clr.l -(sp)
   13bd8:	|     |   pea 1 <_start+0x1>
   13bdc:	|     |   move.l d0,-(sp)
   13bde:	|     |   jsr 16310 <setVariable>
   13be4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13be8:	|     '-> moveq #2,d0
}
   13bea:	'-------> lea 12(sp),sp
   13bee:	          rts

00013bf0 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   13bf0:	          lea -12(sp),sp
	KPrintF("running setCharacterAngleOffset\n");
   13bf4:	          pea 1ba77 <talk.c.490538ff+0x3a3>
   13bfa:	          jsr 184fe <KPrintF>
   13c00:	          addq.l #4,sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13c02:	          movea.l 20(sp),a0
   13c06:	          move.l 24(a0),d0
   13c0a:	          move.l d0,-(sp)
   13c0c:	          pea 1 <_start+0x1>
   13c10:	          moveq #12,d0
   13c12:	          add.l sp,d0
   13c14:	          move.l d0,-(sp)
   13c16:	          jsr 15a1e <getValueType>
   13c1c:	          lea 12(sp),sp
   13c20:	          tst.w d0
   13c22:	      ,-- bne.s 13c2a <builtIn_setCharacterAngleOffset+0x3a>
   13c24:	      |   moveq #1,d0
   13c26:	,-----|-- bra.w 13cc4 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13c2a:	|     '-> moveq #24,d0
   13c2c:	|         add.l 20(sp),d0
   13c30:	|         move.l d0,-(sp)
   13c32:	|         jsr 163a2 <trimStack>
   13c38:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13c3a:	|         movea.l 20(sp),a0
   13c3e:	|         move.l 24(a0),d0
   13c42:	|         move.l d0,-(sp)
   13c44:	|         pea 7 <_start+0x7>
   13c48:	|         lea 8(sp),a0
   13c4c:	|         move.l a0,-(sp)
   13c4e:	|         jsr 15a1e <getValueType>
   13c54:	|         lea 12(sp),sp
   13c58:	|         tst.w d0
   13c5a:	|     ,-- bne.s 13c60 <builtIn_setCharacterAngleOffset+0x70>
   13c5c:	|     |   moveq #1,d0
   13c5e:	+-----|-- bra.s 13cc4 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13c60:	|     '-> moveq #24,d0
   13c62:	|         add.l 20(sp),d0
   13c66:	|         move.l d0,-(sp)
   13c68:	|         jsr 163a2 <trimStack>
   13c6e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13c70:	|         move.l (sp),d0
   13c72:	|         move.l d0,-(sp)
   13c74:	|         jsr afea <findPerson>
   13c7a:	|         addq.l #4,sp
   13c7c:	|         move.l d0,8(sp)

	if (thisPerson) {
   13c80:	|  ,----- beq.s 13caa <builtIn_setCharacterAngleOffset+0xba>
		thisPerson -> angleOffset = angle;
   13c82:	|  |      move.l 4(sp),d0
   13c86:	|  |      movea.l 8(sp),a0
   13c8a:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13c8e:	|  |      moveq #28,d0
   13c90:	|  |      add.l 20(sp),d0
   13c94:	|  |      pea 1 <_start+0x1>
   13c98:	|  |      pea 1 <_start+0x1>
   13c9c:	|  |      move.l d0,-(sp)
   13c9e:	|  |      jsr 16310 <setVariable>
   13ca4:	|  |      lea 12(sp),sp
   13ca8:	|  |  ,-- bra.s 13cc2 <builtIn_setCharacterAngleOffset+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13caa:	|  '--|-> moveq #28,d0
   13cac:	|     |   add.l 20(sp),d0
   13cb0:	|     |   clr.l -(sp)
   13cb2:	|     |   pea 1 <_start+0x1>
   13cb6:	|     |   move.l d0,-(sp)
   13cb8:	|     |   jsr 16310 <setVariable>
   13cbe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13cc2:	|     '-> moveq #2,d0
}
   13cc4:	'-------> lea 12(sp),sp
   13cc8:	          rts

00013cca <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13cca:	       subq.l #4,sp
	KPrintF("running transitionMode\n");
   13ccc:	       pea 1ba98 <talk.c.490538ff+0x3c4>
   13cd2:	       jsr 184fe <KPrintF>
   13cd8:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13cda:	       movea.l 12(sp),a0
   13cde:	       move.l 24(a0),d0
   13ce2:	       move.l d0,-(sp)
   13ce4:	       pea 1 <_start+0x1>
   13ce8:	       move.l sp,d0
   13cea:	       addq.l #8,d0
   13cec:	       move.l d0,-(sp)
   13cee:	       jsr 15a1e <getValueType>
   13cf4:	       lea 12(sp),sp
   13cf8:	       tst.w d0
   13cfa:	   ,-- bne.s 13d00 <builtIn_transitionMode+0x36>
   13cfc:	   |   moveq #1,d0
   13cfe:	,--|-- bra.s 13d36 <builtIn_transitionMode+0x6c>
	fadeMode = n;
   13d00:	|  '-> move.l (sp),d0
   13d02:	|      move.l d0,d0
   13d04:	|      move.b d0,1e740 <fadeMode>
	trimStack (&fun -> stack);
   13d0a:	|      moveq #24,d0
   13d0c:	|      add.l 12(sp),d0
   13d10:	|      move.l d0,-(sp)
   13d12:	|      jsr 163a2 <trimStack>
   13d18:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13d1a:	|      moveq #28,d0
   13d1c:	|      add.l 12(sp),d0
   13d20:	|      pea 1 <_start+0x1>
   13d24:	|      pea 1 <_start+0x1>
   13d28:	|      move.l d0,-(sp)
   13d2a:	|      jsr 16310 <setVariable>
   13d30:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13d34:	|      moveq #2,d0
}
   13d36:	'----> addq.l #4,sp
   13d38:	       rts

00013d3a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13d3a:	moveq #24,d0
   13d3c:	add.l 8(sp),d0
   13d40:	move.l d0,-(sp)
   13d42:	jsr 163a2 <trimStack>
   13d48:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13d4a:	moveq #28,d0
   13d4c:	add.l 8(sp),d0
   13d50:	pea 1 <_start+0x1>
   13d54:	pea 1 <_start+0x1>
   13d58:	move.l d0,-(sp)
   13d5a:	jsr 16310 <setVariable>
   13d60:	lea 12(sp),sp
	return BR_CONTINUE;
   13d64:	moveq #2,d0
}
   13d66:	rts

00013d68 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13d68:	pea 1bab0 <talk.c.490538ff+0x3dc>
   13d6e:	jsr 184fe <KPrintF>
   13d74:	addq.l #4,sp
	return BR_CONTINUE;
   13d76:	moveq #2,d0
}
   13d78:	rts

00013d7a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13d7a:	       lea -16(sp),sp
   13d7e:	       move.l a6,-(sp)
	KPrintF("running saveCustomData\n");
   13d80:	       pea 1badd <talk.c.490538ff+0x409>
   13d86:	       jsr 184fe <KPrintF>
   13d8c:	       addq.l #4,sp
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   13d8e:	       movea.l 28(sp),a0
   13d92:	       move.l 24(a0),d0
   13d96:	       move.l d0,-(sp)
   13d98:	       jsr 15ff4 <getTextFromAnyVar>
   13d9e:	       addq.l #4,sp
   13da0:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13da4:	   ,-- bne.s 13dac <builtIn_saveCustomData+0x32>
   13da6:	   |   moveq #1,d0
   13da8:	,--|-- bra.w 13e5e <builtIn_saveCustomData+0xe4>

	char * fileName = encodeFilename(fileNameB);
   13dac:	|  '-> move.l 16(sp),-(sp)
   13db0:	|      jsr 2fe <encodeFilename>
   13db6:	|      addq.l #4,sp
   13db8:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13dbc:	|      move.l 16(sp),8(sp)
   13dc2:	|      move.l 1e876 <SysBase>,d0
   13dc8:	|      movea.l d0,a6
   13dca:	|      movea.l 8(sp),a1
   13dce:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   13dd2:	|      move.l 12(sp),-(sp)
   13dd6:	|      jsr ed44 <failSecurityCheck>
   13ddc:	|      addq.l #4,sp
   13dde:	|      tst.w d0
   13de0:	|  ,-- beq.s 13de6 <builtIn_saveCustomData+0x6c>
   13de2:	|  |   moveq #1,d0
   13de4:	+--|-- bra.s 13e5e <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13de6:	|  '-> moveq #24,d0
   13de8:	|      add.l 28(sp),d0
   13dec:	|      move.l d0,-(sp)
   13dee:	|      jsr 163a2 <trimStack>
   13df4:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   13df6:	|      movea.l 28(sp),a0
   13dfa:	|      movea.l 24(a0),a0
   13dfe:	|      move.l (a0),d0
   13e00:	|      moveq #6,d1
   13e02:	|      cmp.l d0,d1
   13e04:	|  ,-- beq.s 13e18 <builtIn_saveCustomData+0x9e>
		KPrintF("First parameter isn't a stack");
   13e06:	|  |   pea 1baf5 <talk.c.490538ff+0x421>
   13e0c:	|  |   jsr 184fe <KPrintF>
   13e12:	|  |   addq.l #4,sp
		return BR_ERROR;
   13e14:	|  |   moveq #1,d0
   13e16:	+--|-- bra.s 13e5e <builtIn_saveCustomData+0xe4>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   13e18:	|  '-> movea.l 28(sp),a0
   13e1c:	|      move.l 24(a0),d0
   13e20:	|      move.l d0,-(sp)
   13e22:	|      move.l 16(sp),-(sp)
   13e26:	|      jsr e994 <stackToFile>
   13e2c:	|      addq.l #8,sp
   13e2e:	|      tst.w d0
   13e30:	|  ,-- bne.s 13e36 <builtIn_saveCustomData+0xbc>
   13e32:	|  |   moveq #1,d0
   13e34:	+--|-- bra.s 13e5e <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13e36:	|  '-> moveq #24,d0
   13e38:	|      add.l 28(sp),d0
   13e3c:	|      move.l d0,-(sp)
   13e3e:	|      jsr 163a2 <trimStack>
   13e44:	|      addq.l #4,sp
	FreeVec(fileName);
   13e46:	|      move.l 12(sp),4(sp)
   13e4c:	|      move.l 1e876 <SysBase>,d0
   13e52:	|      movea.l d0,a6
   13e54:	|      movea.l 4(sp),a1
   13e58:	|      jsr -690(a6)
	return BR_CONTINUE;
   13e5c:	|      moveq #2,d0
}
   13e5e:	'----> movea.l (sp)+,a6
   13e60:	       lea 16(sp),sp
   13e64:	       rts

00013e66 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13e66:	       lea -28(sp),sp
   13e6a:	       move.l a6,-(sp)
	KPrintF("running loadCustomData\n");
   13e6c:	       pea 1bb13 <talk.c.490538ff+0x43f>
   13e72:	       jsr 184fe <KPrintF>
   13e78:	       addq.l #4,sp
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13e7a:	       movea.l 40(sp),a0
   13e7e:	       move.l 24(a0),d0
   13e82:	       move.l d0,-(sp)
   13e84:	       jsr 15ff4 <getTextFromAnyVar>
   13e8a:	       addq.l #4,sp
   13e8c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   13e90:	   ,-- bne.s 13e98 <builtIn_loadCustomData+0x32>
   13e92:	   |   moveq #1,d0
   13e94:	,--|-- bra.w 13f94 <builtIn_loadCustomData+0x12e>

	char * newText = encodeFilename(newTextA);
   13e98:	|  '-> move.l 28(sp),-(sp)
   13e9c:	|      jsr 2fe <encodeFilename>
   13ea2:	|      addq.l #4,sp
   13ea4:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13ea8:	|      move.l 28(sp),20(sp)
   13eae:	|      move.l 1e876 <SysBase>,d0
   13eb4:	|      movea.l d0,a6
   13eb6:	|      movea.l 20(sp),a1
   13eba:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13ebe:	|      move.l 24(sp),-(sp)
   13ec2:	|      jsr ed44 <failSecurityCheck>
   13ec8:	|      addq.l #4,sp
   13eca:	|      tst.w d0
   13ecc:	|  ,-- beq.s 13ed4 <builtIn_loadCustomData+0x6e>
   13ece:	|  |   moveq #1,d0
   13ed0:	+--|-- bra.w 13f94 <builtIn_loadCustomData+0x12e>
	trimStack(&fun->stack);
   13ed4:	|  '-> moveq #24,d0
   13ed6:	|      add.l 40(sp),d0
   13eda:	|      move.l d0,-(sp)
   13edc:	|      jsr 163a2 <trimStack>
   13ee2:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13ee4:	|      moveq #28,d0
   13ee6:	|      add.l 40(sp),d0
   13eea:	|      move.l d0,-(sp)
   13eec:	|      jsr 15c6c <unlinkVar>
   13ef2:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13ef4:	|      movea.l 40(sp),a0
   13ef8:	|      moveq #6,d0
   13efa:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13efe:	|      moveq #12,d0
   13f00:	|      move.l d0,16(sp)
   13f04:	|      clr.l 12(sp)
   13f08:	|      move.l 1e876 <SysBase>,d0
   13f0e:	|      movea.l d0,a6
   13f10:	|      move.l 16(sp),d0
   13f14:	|      move.l 12(sp),d1
   13f18:	|      jsr -684(a6)
   13f1c:	|      move.l d0,8(sp)
   13f20:	|      move.l 8(sp),d0
   13f24:	|      movea.l 40(sp),a0
   13f28:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13f2c:	|      movea.l 40(sp),a0
   13f30:	|      move.l 32(a0),d0
   13f34:	|  ,-- bne.s 13f3a <builtIn_loadCustomData+0xd4>
   13f36:	|  |   moveq #1,d0
   13f38:	+--|-- bra.s 13f94 <builtIn_loadCustomData+0x12e>
	fun->reg.varData.theStack->first = NULL;
   13f3a:	|  '-> movea.l 40(sp),a0
   13f3e:	|      movea.l 32(a0),a0
   13f42:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13f44:	|      movea.l 40(sp),a0
   13f48:	|      movea.l 32(a0),a0
   13f4c:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   13f50:	|      movea.l 40(sp),a0
   13f54:	|      movea.l 32(a0),a0
   13f58:	|      moveq #1,d0
   13f5a:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   13f5e:	|      movea.l 40(sp),a0
   13f62:	|      move.l 32(a0),d0
   13f66:	|      move.l d0,-(sp)
   13f68:	|      move.l 28(sp),-(sp)
   13f6c:	|      jsr e3ce <fileToStack>
   13f72:	|      addq.l #8,sp
   13f74:	|      tst.w d0
   13f76:	|  ,-- bne.s 13f7c <builtIn_loadCustomData+0x116>
   13f78:	|  |   moveq #1,d0
   13f7a:	+--|-- bra.s 13f94 <builtIn_loadCustomData+0x12e>
	FreeVec(newText);
   13f7c:	|  '-> move.l 24(sp),4(sp)
   13f82:	|      move.l 1e876 <SysBase>,d0
   13f88:	|      movea.l d0,a6
   13f8a:	|      movea.l 4(sp),a1
   13f8e:	|      jsr -690(a6)
	return BR_CONTINUE;
   13f92:	|      moveq #2,d0
}
   13f94:	'----> movea.l (sp)+,a6
   13f96:	       lea 28(sp),sp
   13f9a:	       rts

00013f9c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   13f9c:	       subq.l #4,sp
	KPrintF("running setCustomEncoding\n");
   13f9e:	       pea 1bb2b <talk.c.490538ff+0x457>
   13fa4:	       jsr 184fe <KPrintF>
   13faa:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13fac:	       movea.l 12(sp),a0
   13fb0:	       move.l 24(a0),d0
   13fb4:	       move.l d0,-(sp)
   13fb6:	       pea 1 <_start+0x1>
   13fba:	       move.l sp,d0
   13fbc:	       addq.l #8,d0
   13fbe:	       move.l d0,-(sp)
   13fc0:	       jsr 15a1e <getValueType>
   13fc6:	       lea 12(sp),sp
   13fca:	       tst.w d0
   13fcc:	   ,-- bne.s 13fd2 <builtIn_setCustomEncoding+0x36>
   13fce:	   |   moveq #1,d0
   13fd0:	,--|-- bra.s 14008 <builtIn_setCustomEncoding+0x6c>
	saveEncoding = n;
   13fd2:	|  '-> move.l (sp),d0
   13fd4:	|      move.l d0,d0
   13fd6:	|      move.w d0,1e92e <saveEncoding>
	trimStack (&fun -> stack);
   13fdc:	|      moveq #24,d0
   13fde:	|      add.l 12(sp),d0
   13fe2:	|      move.l d0,-(sp)
   13fe4:	|      jsr 163a2 <trimStack>
   13fea:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13fec:	|      moveq #28,d0
   13fee:	|      add.l 12(sp),d0
   13ff2:	|      pea 1 <_start+0x1>
   13ff6:	|      pea 1 <_start+0x1>
   13ffa:	|      move.l d0,-(sp)
   13ffc:	|      jsr 16310 <setVariable>
   14002:	|      lea 12(sp),sp
	return BR_CONTINUE;
   14006:	|      moveq #2,d0
}
   14008:	'----> addq.l #4,sp
   1400a:	       rts

0001400c <builtIn_freeSound>:

builtIn(freeSound)
{
   1400c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1400e:	       movea.l 12(sp),a0
   14012:	       move.l 24(a0),d0
   14016:	       move.l d0,-(sp)
   14018:	       pea 5 <_start+0x5>
   1401c:	       move.l sp,d0
   1401e:	       addq.l #8,d0
   14020:	       move.l d0,-(sp)
   14022:	       jsr 15a1e <getValueType>
   14028:	       lea 12(sp),sp
   1402c:	       tst.w d0
   1402e:	   ,-- bne.s 14034 <builtIn_freeSound+0x28>
   14030:	   |   moveq #1,d0
   14032:	,--|-- bra.s 14052 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   14034:	|  '-> moveq #24,d0
   14036:	|      add.l 12(sp),d0
   1403a:	|      move.l d0,-(sp)
   1403c:	|      jsr 163a2 <trimStack>
   14042:	|      addq.l #4,sp
	huntKillFreeSound (v);
   14044:	|      move.l (sp),d0
   14046:	|      move.l d0,-(sp)
   14048:	|      jsr db86 <huntKillFreeSound>
   1404e:	|      addq.l #4,sp
	return BR_CONTINUE;
   14050:	|      moveq #2,d0
}
   14052:	'----> addq.l #4,sp
   14054:	       rts

00014056 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   14056:	       lea -12(sp),sp
   1405a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1405c:	       movea.l 24(sp),a0
   14060:	       move.l 24(a0),d0
   14064:	       move.l d0,-(sp)
   14066:	       pea 1 <_start+0x1>
   1406a:	       moveq #16,d0
   1406c:	       add.l sp,d0
   1406e:	       move.l d0,-(sp)
   14070:	       jsr 15a1e <getValueType>
   14076:	       lea 12(sp),sp
   1407a:	       tst.w d0
   1407c:	   ,-- bne.s 14084 <builtIn_parallaxAdd+0x2e>
   1407e:	   |   moveq #1,d0
   14080:	,--|-- bra.w 14158 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   14084:	|  '-> moveq #24,d0
   14086:	|      add.l 24(sp),d0
   1408a:	|      move.l d0,-(sp)
   1408c:	|      jsr 163a2 <trimStack>
   14092:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14094:	|      movea.l 24(sp),a0
   14098:	|      move.l 24(a0),d0
   1409c:	|      move.l d0,-(sp)
   1409e:	|      pea 1 <_start+0x1>
   140a2:	|      moveq #20,d0
   140a4:	|      add.l sp,d0
   140a6:	|      move.l d0,-(sp)
   140a8:	|      jsr 15a1e <getValueType>
   140ae:	|      lea 12(sp),sp
   140b2:	|      tst.w d0
   140b4:	|  ,-- bne.s 140bc <builtIn_parallaxAdd+0x66>
   140b6:	|  |   moveq #1,d0
   140b8:	+--|-- bra.w 14158 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   140bc:	|  '-> moveq #24,d0
   140be:	|      add.l 24(sp),d0
   140c2:	|      move.l d0,-(sp)
   140c4:	|      jsr 163a2 <trimStack>
   140ca:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   140cc:	|      movea.l 24(sp),a0
   140d0:	|      move.l 24(a0),d0
   140d4:	|      move.l d0,-(sp)
   140d6:	|      pea 5 <_start+0x5>
   140da:	|      lea 12(sp),a0
   140de:	|      move.l a0,-(sp)
   140e0:	|      jsr 15a1e <getValueType>
   140e6:	|      lea 12(sp),sp
   140ea:	|      tst.w d0
   140ec:	|  ,-- bne.s 140f2 <builtIn_parallaxAdd+0x9c>
   140ee:	|  |   moveq #1,d0
   140f0:	+--|-- bra.s 14158 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   140f2:	|  '-> moveq #24,d0
   140f4:	|      add.l 24(sp),d0
   140f8:	|      move.l d0,-(sp)
   140fa:	|      jsr 163a2 <trimStack>
   14100:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   14102:	|      move.l 8(sp),d0
   14106:	|      move.l d0,d0
   14108:	|      moveq #0,d2
   1410a:	|      move.w d0,d2
   1410c:	|      move.l 12(sp),d0
   14110:	|      move.l d0,d0
   14112:	|      moveq #0,d1
   14114:	|      move.w d0,d1
   14116:	|      move.l 4(sp),d0
   1411a:	|      move.l d0,d0
   1411c:	|      move.w d0,d0
   1411e:	|      andi.l #65535,d0
   14124:	|      move.l d2,-(sp)
   14126:	|      move.l d1,-(sp)
   14128:	|      move.l d0,-(sp)
   1412a:	|      jsr ddac <loadParallax>
   14130:	|      lea 12(sp),sp
   14134:	|      tst.w d0
   14136:	|  ,-- bne.s 1413c <builtIn_parallaxAdd+0xe6>
   14138:	|  |   moveq #1,d0
   1413a:	+--|-- bra.s 14158 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1413c:	|  '-> moveq #28,d0
   1413e:	|      add.l 24(sp),d0
   14142:	|      pea 1 <_start+0x1>
   14146:	|      pea 1 <_start+0x1>
   1414a:	|      move.l d0,-(sp)
   1414c:	|      jsr 16310 <setVariable>
   14152:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   14156:	|      moveq #2,d0
}
   14158:	'----> move.l (sp)+,d2
   1415a:	       lea 12(sp),sp
   1415e:	       rts

00014160 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   14160:	jsr dce4 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   14166:	moveq #28,d0
   14168:	add.l 8(sp),d0
   1416c:	pea 1 <_start+0x1>
   14170:	pea 1 <_start+0x1>
   14174:	move.l d0,-(sp)
   14176:	jsr 16310 <setVariable>
   1417c:	lea 12(sp),sp
	return BR_CONTINUE;
   14180:	moveq #2,d0
}
   14182:	rts

00014184 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   14184:	pea 1bb46 <talk.c.490538ff+0x472>
   1418a:	jsr 184fe <KPrintF>
   14190:	addq.l #4,sp

	return BR_CONTINUE;
   14192:	moveq #2,d0
}
   14194:	rts

00014196 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   14196:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   14198:	             movea.l 16(sp),a0
   1419c:	             movea.l 24(a0),a0
   141a0:	             move.l (a0),d0
   141a2:	             moveq #1,d1
   141a4:	             cmp.l d0,d1
   141a6:	      ,----- beq.s 141ee <builtIn_makeFastArray+0x58>
   141a8:	      |      moveq #6,d1
   141aa:	      |      cmp.l d0,d1
   141ac:	,-----|----- bne.s 1422c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   141ae:	|     |      movea.l 16(sp),a0
   141b2:	|     |      movea.l 24(a0),a0
   141b6:	|     |      move.l 4(a0),d1
   141ba:	|     |      moveq #28,d0
   141bc:	|     |      add.l 16(sp),d0
   141c0:	|     |      move.l d1,-(sp)
   141c2:	|     |      move.l d0,-(sp)
   141c4:	|     |      jsr 15ad0 <makeFastArrayFromStack>
   141ca:	|     |      addq.l #8,sp
   141cc:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   141d0:	|     |      moveq #24,d0
   141d2:	|     |      add.l 16(sp),d0
   141d6:	|     |      move.l d0,-(sp)
   141d8:	|     |      jsr 163a2 <trimStack>
   141de:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   141e0:	|     |      tst.w 6(sp)
   141e4:	|     |  ,-- beq.s 141ea <builtIn_makeFastArray+0x54>
   141e6:	|     |  |   moveq #2,d0
   141e8:	|  ,--|--|-- bra.s 1423e <builtIn_makeFastArray+0xa8>
   141ea:	|  |  |  '-> moveq #1,d0
   141ec:	|  +--|----- bra.s 1423e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   141ee:	|  |  '----> movea.l 16(sp),a0
   141f2:	|  |         movea.l 24(a0),a0
   141f6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   141fc:	|  |         moveq #24,d0
   141fe:	|  |         add.l 16(sp),d0
   14202:	|  |         move.l d0,-(sp)
   14204:	|  |         jsr 163a2 <trimStack>
   1420a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1420c:	|  |         moveq #28,d0
   1420e:	|  |         add.l 16(sp),d0
   14212:	|  |         move.l 2(sp),-(sp)
   14216:	|  |         move.l d0,-(sp)
   14218:	|  |         jsr 15b3a <makeFastArraySize>
   1421e:	|  |         addq.l #8,sp
   14220:	|  |         tst.w d0
   14222:	|  |     ,-- beq.s 14228 <builtIn_makeFastArray+0x92>
   14224:	|  |     |   moveq #2,d0
   14226:	|  +-----|-- bra.s 1423e <builtIn_makeFastArray+0xa8>
   14228:	|  |     '-> moveq #1,d0
   1422a:	|  +-------- bra.s 1423e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1422c:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1422e:	   |         pea 1bb6f <talk.c.490538ff+0x49b>
   14234:	   |         jsr 184fe <KPrintF>
   1423a:	   |         addq.l #4,sp
	return BR_ERROR;
   1423c:	   |         moveq #1,d0
}
   1423e:	   '-------> addq.l #8,sp
   14240:	             rts

00014242 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   14242:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   14244:	          movea.l 16(sp),a0
   14248:	          move.l 24(a0),d0
   1424c:	          move.l d0,-(sp)
   1424e:	          pea 7 <_start+0x7>
   14252:	          move.l sp,d0
   14254:	          addq.l #8,d0
   14256:	          move.l d0,-(sp)
   14258:	          jsr 15a1e <getValueType>
   1425e:	          lea 12(sp),sp
   14262:	          tst.w d0
   14264:	      ,-- bne.s 1426a <builtIn_getCharacterScale+0x28>
   14266:	      |   moveq #1,d0
   14268:	,-----|-- bra.s 142e4 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1426a:	|     '-> moveq #24,d0
   1426c:	|         add.l 16(sp),d0
   14270:	|         move.l d0,-(sp)
   14272:	|         jsr 163a2 <trimStack>
   14278:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1427a:	|         move.l (sp),d0
   1427c:	|         move.l d0,-(sp)
   1427e:	|         jsr afea <findPerson>
   14284:	|         addq.l #4,sp
   14286:	|         move.l d0,4(sp)
	if (pers) {
   1428a:	|  ,----- beq.s 142ca <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1428c:	|  |      movea.l 4(sp),a0
   14290:	|  |      move.l 32(a0),d0
   14294:	|  |      move.l #1120403456,-(sp)
   1429a:	|  |      move.l d0,-(sp)
   1429c:	|  |      jsr 189e2 <__mulsf3>
   142a2:	|  |      addq.l #8,sp
   142a4:	|  |      move.l d0,-(sp)
   142a6:	|  |      jsr 188c8 <__fixsfsi>
   142ac:	|  |      addq.l #4,sp
   142ae:	|  |      move.l d0,d1
   142b0:	|  |      moveq #28,d0
   142b2:	|  |      add.l 16(sp),d0
   142b6:	|  |      move.l d1,-(sp)
   142b8:	|  |      pea 1 <_start+0x1>
   142bc:	|  |      move.l d0,-(sp)
   142be:	|  |      jsr 16310 <setVariable>
   142c4:	|  |      lea 12(sp),sp
   142c8:	|  |  ,-- bra.s 142e2 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   142ca:	|  '--|-> moveq #28,d0
   142cc:	|     |   add.l 16(sp),d0
   142d0:	|     |   clr.l -(sp)
   142d2:	|     |   pea 1 <_start+0x1>
   142d6:	|     |   move.l d0,-(sp)
   142d8:	|     |   jsr 16310 <setVariable>
   142de:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   142e2:	|     '-> moveq #2,d0
}
   142e4:	'-------> addq.l #8,sp
   142e6:	          rts

000142e8 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   142e8:	move.l 1e952 <gameSettings>,d0
   142ee:	move.l d0,d1
   142f0:	moveq #28,d0
   142f2:	add.l 8(sp),d0
   142f6:	move.l d1,-(sp)
   142f8:	pea 1 <_start+0x1>
   142fc:	move.l d0,-(sp)
   142fe:	jsr 16310 <setVariable>
   14304:	lea 12(sp),sp
	return BR_CONTINUE;
   14308:	moveq #2,d0
}
   1430a:	rts

0001430c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1430c:	moveq #24,d0
   1430e:	add.l 8(sp),d0
   14312:	move.l d0,-(sp)
   14314:	jsr 163a2 <trimStack>
   1431a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1431c:	moveq #24,d0
   1431e:	add.l 8(sp),d0
   14322:	move.l d0,-(sp)
   14324:	jsr 163a2 <trimStack>
   1432a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1432c:	moveq #28,d0
   1432e:	add.l 8(sp),d0
   14332:	clr.l -(sp)
   14334:	pea 1 <_start+0x1>
   14338:	move.l d0,-(sp)
   1433a:	jsr 16310 <setVariable>
   14340:	lea 12(sp),sp

	return BR_CONTINUE;
   14344:	moveq #2,d0

}
   14346:	rts

00014348 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   14348:	move.l 1e1e2 <lastFramesPerSecond>,d1
   1434e:	moveq #28,d0
   14350:	add.l 8(sp),d0
   14354:	move.l d1,-(sp)
   14356:	pea 1 <_start+0x1>
   1435a:	move.l d0,-(sp)
   1435c:	jsr 16310 <setVariable>
   14362:	lea 12(sp),sp
	return BR_CONTINUE;
   14366:	moveq #2,d0
}
   14368:	rts

0001436a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1436a:	moveq #2,d0
}
   1436c:	rts

0001436e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1436e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14372:	          movea.l 60(sp),a0
   14376:	          move.l 24(a0),d0
   1437a:	          move.l d0,-(sp)
   1437c:	          pea 1 <_start+0x1>
   14380:	          pea 1e77c <thumbHeight>
   14386:	          jsr 15a1e <getValueType>
   1438c:	          lea 12(sp),sp
   14390:	          tst.w d0
   14392:	      ,-- bne.s 1439a <builtIn_setThumbnailSize+0x2c>
   14394:	      |   moveq #1,d0
   14396:	,-----|-- bra.w 14456 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1439a:	|     '-> moveq #24,d0
   1439c:	|         add.l 60(sp),d0
   143a0:	|         move.l d0,-(sp)
   143a2:	|         jsr 163a2 <trimStack>
   143a8:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   143aa:	|         movea.l 60(sp),a0
   143ae:	|         move.l 24(a0),d0
   143b2:	|         move.l d0,-(sp)
   143b4:	|         pea 1 <_start+0x1>
   143b8:	|         pea 1e778 <thumbWidth>
   143be:	|         jsr 15a1e <getValueType>
   143c4:	|         lea 12(sp),sp
   143c8:	|         tst.w d0
   143ca:	|     ,-- bne.s 143d2 <builtIn_setThumbnailSize+0x64>
   143cc:	|     |   moveq #1,d0
   143ce:	+-----|-- bra.w 14456 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   143d2:	|     '-> moveq #24,d0
   143d4:	|         add.l 60(sp),d0
   143d8:	|         move.l d0,-(sp)
   143da:	|         jsr 163a2 <trimStack>
   143e0:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   143e2:	|         move.l 1e778 <thumbWidth>,d0
   143e8:	|     ,-- bmi.s 14416 <builtIn_setThumbnailSize+0xa8>
   143ea:	|     |   move.l 1e77c <thumbHeight>,d0
   143f0:	|     +-- bmi.s 14416 <builtIn_setThumbnailSize+0xa8>
   143f2:	|     |   move.l 1e778 <thumbWidth>,d0
   143f8:	|     |   move.l d0,d1
   143fa:	|     |   move.l 1e7bc <winWidth>,d0
   14400:	|     |   cmp.l d1,d0
   14402:	|     +-- bcs.s 14416 <builtIn_setThumbnailSize+0xa8>
   14404:	|     |   move.l 1e77c <thumbHeight>,d0
   1440a:	|     |   move.l d0,d1
   1440c:	|     |   move.l 1e7c0 <winHeight>,d0
   14412:	|     |   cmp.l d1,d0
   14414:	|  ,--|-- bcc.s 14454 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   14416:	|  |  '-> move.l 1e77c <thumbHeight>,d1
   1441c:	|  |      move.l 1e778 <thumbWidth>,d0
   14422:	|  |      move.l d1,-(sp)
   14424:	|  |      move.l d0,-(sp)
   14426:	|  |      pea 1bb96 <talk.c.490538ff+0x4c2>
   1442c:	|  |      lea 14(sp),a0
   14430:	|  |      move.l a0,-(sp)
   14432:	|  |      jsr 15228 <sprintf>
   14438:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1443c:	|  |      lea 2(sp),a0
   14440:	|  |      move.l a0,-(sp)
   14442:	|  |      pea 1bb9e <talk.c.490538ff+0x4ca>
   14448:	|  |      jsr 184fe <KPrintF>
   1444e:	|  |      addq.l #8,sp
		return BR_ERROR;
   14450:	|  |      moveq #1,d0
   14452:	+--|----- bra.s 14456 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   14454:	|  '----> moveq #2,d0
}
   14456:	'-------> lea 52(sp),sp
   1445a:	          rts

0001445c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1445c:	       lea -12(sp),sp
   14460:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14462:	       movea.l 24(sp),a0
   14466:	       move.l 24(a0),d0
   1446a:	       move.l d0,-(sp)
   1446c:	       pea 1 <_start+0x1>
   14470:	       lea 12(sp),a0
   14474:	       move.l a0,-(sp)
   14476:	       jsr 15a1e <getValueType>
   1447c:	       lea 12(sp),sp
   14480:	       tst.w d0
   14482:	   ,-- bne.s 1448a <builtIn_hasFlag+0x2e>
   14484:	   |   moveq #1,d0
   14486:	,--|-- bra.w 1451a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1448a:	|  '-> moveq #24,d0
   1448c:	|      add.l 24(sp),d0
   14490:	|      move.l d0,-(sp)
   14492:	|      jsr 163a2 <trimStack>
   14498:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1449a:	|      movea.l 24(sp),a0
   1449e:	|      move.l 24(a0),d0
   144a2:	|      move.l d0,-(sp)
   144a4:	|      pea 7 <_start+0x7>
   144a8:	|      moveq #16,d0
   144aa:	|      add.l sp,d0
   144ac:	|      move.l d0,-(sp)
   144ae:	|      jsr 15a1e <getValueType>
   144b4:	|      lea 12(sp),sp
   144b8:	|      tst.w d0
   144ba:	|  ,-- bne.s 144c0 <builtIn_hasFlag+0x64>
   144bc:	|  |   moveq #1,d0
   144be:	+--|-- bra.s 1451a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   144c0:	|  '-> moveq #24,d0
   144c2:	|      add.l 24(sp),d0
   144c6:	|      move.l d0,-(sp)
   144c8:	|      jsr 163a2 <trimStack>
   144ce:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   144d0:	|      move.l 8(sp),d0
   144d4:	|      move.l d0,-(sp)
   144d6:	|      jsr df58 <findObjectType>
   144dc:	|      addq.l #4,sp
   144de:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   144e2:	|  ,-- bne.s 144e8 <builtIn_hasFlag+0x8c>
   144e4:	|  |   moveq #1,d0
   144e6:	+--|-- bra.s 1451a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   144e8:	|  '-> movea.l 12(sp),a0
   144ec:	|      move.w 36(a0),d0
   144f0:	|      moveq #0,d2
   144f2:	|      move.w d0,d2
   144f4:	|      move.l 4(sp),d1
   144f8:	|      moveq #1,d0
   144fa:	|      lsl.l d1,d0
   144fc:	|      move.l d2,d1
   144fe:	|      and.l d0,d1
   14500:	|      moveq #28,d0
   14502:	|      add.l 24(sp),d0
   14506:	|      move.l d1,-(sp)
   14508:	|      pea 1 <_start+0x1>
   1450c:	|      move.l d0,-(sp)
   1450e:	|      jsr 16310 <setVariable>
   14514:	|      lea 12(sp),sp
	return BR_CONTINUE;
   14518:	|      moveq #2,d0
}
   1451a:	'----> move.l (sp)+,d2
   1451c:	       lea 12(sp),sp
   14520:	       rts

00014522 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   14522:	       jsr df46 <snapshot>
   14528:	       tst.w d0
   1452a:	,----- beq.s 14530 <builtIn_snapshotGrab+0xe>
   1452c:	|      moveq #2,d0
   1452e:	|  ,-- bra.s 14532 <builtIn_snapshotGrab+0x10>
   14530:	'--|-> moveq #1,d0
}
   14532:	   '-> rts

00014534 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   14534:	jsr ddf2 <nosnapshot>
	return BR_CONTINUE;
   1453a:	moveq #2,d0
}
   1453c:	rts

0001453e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1453e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   14540:	move.w 1e0ba <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   14548:	movea.l 12(sp),a0
   1454c:	move.l 24(a0),d0
   14550:	move.l d0,-(sp)
   14552:	jsr 15f5e <getBoolean>
   14558:	addq.l #4,sp
   1455a:	move.w d0,1e0ba <allowAnyFilename>
	trimStack (&fun -> stack);
   14560:	moveq #24,d0
   14562:	add.l 12(sp),d0
   14566:	move.l d0,-(sp)
   14568:	jsr 163a2 <trimStack>
   1456e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   14570:	movea.w 2(sp),a0
   14574:	moveq #28,d0
   14576:	add.l 12(sp),d0
   1457a:	move.l a0,-(sp)
   1457c:	pea 1 <_start+0x1>
   14580:	move.l d0,-(sp)
   14582:	jsr 16310 <setVariable>
   14588:	lea 12(sp),sp
	return BR_CONTINUE;
   1458c:	moveq #2,d0
}
   1458e:	addq.l #4,sp
   14590:	rts

00014592 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   14592:	moveq #24,d0
   14594:	add.l 8(sp),d0
   14598:	move.l d0,-(sp)
   1459a:	jsr 163a2 <trimStack>
   145a0:	addq.l #4,sp
	trimStack (&fun -> stack);
   145a2:	moveq #24,d0
   145a4:	add.l 8(sp),d0
   145a8:	move.l d0,-(sp)
   145aa:	jsr 163a2 <trimStack>
   145b0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   145b2:	moveq #28,d0
   145b4:	add.l 8(sp),d0
   145b8:	clr.l -(sp)
   145ba:	pea 1 <_start+0x1>
   145be:	move.l d0,-(sp)
   145c0:	jsr 16310 <setVariable>
   145c6:	lea 12(sp),sp

	return BR_CONTINUE;
   145ca:	moveq #2,d0
}
   145cc:	rts

000145ce <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   145ce:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   145d0:	movea.l 12(sp),a0
   145d4:	move.l 24(a0),d0
   145d8:	move.l d0,-(sp)
   145da:	jsr 15ff4 <getTextFromAnyVar>
   145e0:	addq.l #4,sp
   145e2:	move.l d0,(sp)
	trimStack (&fun -> stack);
   145e4:	moveq #24,d0
   145e6:	add.l 12(sp),d0
   145ea:	move.l d0,-(sp)
   145ec:	jsr 163a2 <trimStack>
   145f2:	addq.l #4,sp
	KPrintF (mess);
   145f4:	move.l (sp),-(sp)
   145f6:	jsr 184fe <KPrintF>
   145fc:	addq.l #4,sp
	return BR_ERROR;
   145fe:	moveq #1,d0
}
   14600:	addq.l #4,sp
   14602:	rts

00014604 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14604:	moveq #24,d0
   14606:	add.l 8(sp),d0
   1460a:	move.l d0,-(sp)
   1460c:	jsr 163a2 <trimStack>
   14612:	addq.l #4,sp
	trimStack (&fun -> stack);
   14614:	moveq #24,d0
   14616:	add.l 8(sp),d0
   1461a:	move.l d0,-(sp)
   1461c:	jsr 163a2 <trimStack>
   14622:	addq.l #4,sp
	trimStack (&fun -> stack);
   14624:	moveq #24,d0
   14626:	add.l 8(sp),d0
   1462a:	move.l d0,-(sp)
   1462c:	jsr 163a2 <trimStack>
   14632:	addq.l #4,sp
	trimStack (&fun -> stack);
   14634:	moveq #24,d0
   14636:	add.l 8(sp),d0
   1463a:	move.l d0,-(sp)
   1463c:	jsr 163a2 <trimStack>
   14642:	addq.l #4,sp

	return BR_CONTINUE;
   14644:	moveq #2,d0
}
   14646:	rts

00014648 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14648:	moveq #24,d0
   1464a:	add.l 8(sp),d0
   1464e:	move.l d0,-(sp)
   14650:	jsr 163a2 <trimStack>
   14656:	addq.l #4,sp
	trimStack (&fun -> stack);
   14658:	moveq #24,d0
   1465a:	add.l 8(sp),d0
   1465e:	move.l d0,-(sp)
   14660:	jsr 163a2 <trimStack>
   14666:	addq.l #4,sp
	trimStack (&fun -> stack);
   14668:	moveq #24,d0
   1466a:	add.l 8(sp),d0
   1466e:	move.l d0,-(sp)
   14670:	jsr 163a2 <trimStack>
   14676:	addq.l #4,sp

	return BR_CONTINUE;
   14678:	moveq #2,d0

}
   1467a:	rts

0001467c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1467c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1467e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   14684:	sne d0
   14686:	neg.b d0
   14688:	moveq #0,d1
   1468a:	move.b d0,d1
   1468c:	moveq #28,d0
   1468e:	add.l 12(sp),d0
   14692:	move.l d1,-(sp)
   14694:	pea 1 <_start+0x1>
   14698:	move.l d0,-(sp)
   1469a:	jsr 16310 <setVariable>
   146a0:	lea 12(sp),sp
	return BR_CONTINUE;
   146a4:	moveq #2,d0
}
   146a6:	addq.l #4,sp
   146a8:	rts

000146aa <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   146aa:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   146ac:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   146b2:	pea 1bbb5 <talk.c.490538ff+0x4e1>
   146b8:	jsr 184fe <KPrintF>
   146be:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   146c0:	tst.w 2(sp)
   146c4:	sne d0
   146c6:	neg.b d0
   146c8:	moveq #0,d1
   146ca:	move.b d0,d1
   146cc:	moveq #28,d0
   146ce:	add.l 12(sp),d0
   146d2:	move.l d1,-(sp)
   146d4:	pea 1 <_start+0x1>
   146d8:	move.l d0,-(sp)
   146da:	jsr 16310 <setVariable>
   146e0:	lea 12(sp),sp
	return BR_CONTINUE;
   146e4:	moveq #2,d0
}
   146e6:	addq.l #4,sp
   146e8:	rts

000146ea <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   146ea:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   146ee:	             move.l 104(sp),d0
   146f2:	             cmpi.l #167,d0
   146f8:	,----------- bhi.w 147da <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   146fc:	|            move.l 104(sp),d0
   14700:	|            add.l d0,d0
   14702:	|            movea.l d0,a1
   14704:	|            adda.l d0,a1
   14706:	|            lea 1e200 <paramNum>,a0
   1470c:	|            move.l (0,a1,a0.l),d0
   14710:	|            moveq #-1,d1
   14712:	|            cmp.l d0,d1
   14714:	|  ,-------- beq.w 147a2 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   14718:	|  |         move.l 104(sp),d0
   1471c:	|  |         add.l d0,d0
   1471e:	|  |         movea.l d0,a1
   14720:	|  |         adda.l d0,a1
   14722:	|  |         lea 1e200 <paramNum>,a0
   14728:	|  |         move.l (0,a1,a0.l),d0
   1472c:	|  |         cmp.l 108(sp),d0
   14730:	|  +-------- beq.s 147a2 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   14732:	|  |         move.l 104(sp),d0
   14736:	|  |         add.l d0,d0
   14738:	|  |         movea.l d0,a1
   1473a:	|  |         adda.l d0,a1
   1473c:	|  |         lea 1e200 <paramNum>,a0
   14742:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   14746:	|  |         moveq #1,d1
   14748:	|  |         cmp.l d0,d1
   1474a:	|  |  ,----- bne.s 14754 <callBuiltIn+0x6a>
   1474c:	|  |  |      move.l #105801,d0
   14752:	|  |  |  ,-- bra.s 1475a <callBuiltIn+0x70>
   14754:	|  |  '--|-> move.l #113643,d0
   1475a:	|  |     '-> move.l 104(sp),d1
   1475e:	|  |         add.l d1,d1
   14760:	|  |         movea.l d1,a1
   14762:	|  |         adda.l d1,a1
   14764:	|  |         lea 1e200 <paramNum>,a0
   1476a:	|  |         move.l (0,a1,a0.l),d1
   1476e:	|  |         move.l d0,-(sp)
   14770:	|  |         move.l d1,-(sp)
   14772:	|  |         pea 1bbed <talk.c.490538ff+0x519>
   14778:	|  |         lea 12(sp),a0
   1477c:	|  |         move.l a0,-(sp)
   1477e:	|  |         jsr 15228 <sprintf>
   14784:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   14788:	|  |         movea.l sp,a0
   1478a:	|  |         move.l a0,-(sp)
   1478c:	|  |         jsr b8 <copyString>
   14792:	|  |         addq.l #4,sp
   14794:	|  |         move.l d0,-(sp)
   14796:	|  |         jsr 184fe <KPrintF>
   1479c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1479e:	|  |         moveq #1,d0
   147a0:	|  |     ,-- bra.s 147ea <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   147a2:	|  '-----|-> move.l 104(sp),d0
   147a6:	|        |   add.l d0,d0
   147a8:	|        |   movea.l d0,a1
   147aa:	|        |   adda.l d0,a1
   147ac:	|        |   lea 1e4a0 <builtInFunctionArray>,a0
   147b2:	|        |   move.l (0,a1,a0.l),d0
   147b6:	+--------|-- beq.s 147da <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);			return builtInFunctionArray[whichFunc].func (numParams, fun);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   147b8:	|        |   move.l 104(sp),d0
   147bc:	|        |   add.l d0,d0
   147be:	|        |   movea.l d0,a1
   147c0:	|        |   adda.l d0,a1
   147c2:	|        |   lea 1e4a0 <builtInFunctionArray>,a0
   147c8:	|        |   movea.l (0,a1,a0.l),a0
   147cc:	|        |   move.l 112(sp),-(sp)
   147d0:	|        |   move.l 112(sp),-(sp)
   147d4:	|        |   jsr (a0)
   147d6:	|        |   addq.l #8,sp
   147d8:	|        +-- bra.s 147ea <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / mented built-in function.");
   147da:	'--------|-> pea 1bc18 <talk.c.490538ff+0x544>
   147e0:	         |   jsr 184fe <KPrintF>
   147e6:	         |   addq.l #4,sp
	return BR_ERROR;
   147e8:	         |   moveq #1,d0
}
   147ea:	         '-> lea 100(sp),sp
   147ee:	             rts

000147f0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   147f0:	          subq.l #8,sp
	int indexNum = -1;
   147f2:	          moveq #-1,d0
   147f4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   147f8:	          clr.l (sp)
   147fa:	   ,----- bra.s 14820 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   147fc:	,--|----> move.l 1e94a <languageTable>,d1
   14802:	|  |      move.l (sp),d0
   14804:	|  |      add.l d0,d0
   14806:	|  |      add.l d0,d0
   14808:	|  |      movea.l d1,a0
   1480a:	|  |      adda.l d0,a0
   1480c:	|  |      move.l (a0),d0
   1480e:	|  |      move.l d0,d1
   14810:	|  |      move.l 1e952 <gameSettings>,d0
   14816:	|  |      cmp.l d1,d0
   14818:	|  |  ,-- bne.s 1481e <getLanguageForFileB+0x2e>
   1481a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1481e:	|  |  '-> addq.l #1,(sp)
   14820:	|  '----> move.l 1e956 <gameSettings+0x4>,d0
   14826:	|         cmp.l (sp),d0
   14828:	'-------- bcc.s 147fc <getLanguageForFileB+0xc>
	}

	return indexNum;
   1482a:	          move.l 4(sp),d0
}
   1482e:	          addq.l #8,sp
   14830:	          rts

00014832 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   14832:	          lea -20(sp),sp
   14836:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   14838:	          move.l 28(sp),-(sp)
   1483c:	          jsr 14f0a <strlen>
   14842:	          addq.l #4,sp
   14844:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   14848:	          moveq #4,d0
   1484a:	          cmp.l 12(sp),d0
   1484e:	      ,-- bge.s 14872 <getPrefsFilename+0x40>
   14850:	      |   move.l 12(sp),d0
   14854:	      |   subq.l #4,d0
   14856:	      |   movea.l 28(sp),a0
   1485a:	      |   adda.l d0,a0
   1485c:	      |   move.b (a0),d0
   1485e:	      |   cmpi.b #46,d0
   14862:	      +-- bne.s 14872 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   14864:	      |   move.l 12(sp),d0
   14868:	      |   subq.l #4,d0
   1486a:	      |   movea.l 28(sp),a0
   1486e:	      |   adda.l d0,a0
   14870:	      |   clr.b (a0)
	}

	char * f = filename;
   14872:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   14878:	          clr.l 20(sp)
   1487c:	   ,----- bra.s 148a4 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1487e:	,--|----> move.l 20(sp),d0
   14882:	|  |      movea.l 28(sp),a0
   14886:	|  |      adda.l d0,a0
   14888:	|  |      move.b (a0),d0
   1488a:	|  |      cmpi.b #47,d0
   1488e:	|  |  ,-- bne.s 148a0 <getPrefsFilename+0x6e>
   14890:	|  |  |   move.l 20(sp),d0
   14894:	|  |  |   addq.l #1,d0
   14896:	|  |  |   move.l 28(sp),d1
   1489a:	|  |  |   add.l d0,d1
   1489c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   148a0:	|  |  '-> addq.l #1,20(sp)
   148a4:	|  '----> move.l 20(sp),d0
   148a8:	|         cmp.l 12(sp),d0
   148ac:	'-------- blt.s 1487e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   148ae:	          pea 1bc3c <talk.c.490538ff+0x568>
   148b4:	          move.l 20(sp),-(sp)
   148b8:	          jsr 14f4a <joinStrings>
   148be:	          addq.l #8,sp
   148c0:	          move.l d0,8(sp)

	FreeVec(filename);
   148c4:	          move.l 28(sp),4(sp)
   148ca:	          move.l 1e876 <SysBase>,d0
   148d0:	          movea.l d0,a6
   148d2:	          movea.l 4(sp),a1
   148d6:	          jsr -690(a6)
	filename = NULL;
   148da:	          clr.l 28(sp)
	return joined;
   148de:	          move.l 8(sp),d0
}
   148e2:	          movea.l (sp)+,a6
   148e4:	          lea 20(sp),sp
   148e8:	          rts

000148ea <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   148ea:	             lea -28(sp),sp
   148ee:	             move.l a6,-(sp)
   148f0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   148f2:	             move.l 1e956 <gameSettings+0x4>,d0
   148f8:	             move.l d0,d1
   148fa:	             addq.l #1,d1
   148fc:	             move.l d1,28(sp)
   14900:	             clr.l 24(sp)
   14904:	             move.l 1e876 <SysBase>,d0
   1490a:	             movea.l d0,a6
   1490c:	             move.l 28(sp),d0
   14910:	             move.l 24(sp),d1
   14914:	             jsr -684(a6)
   14918:	             move.l d0,20(sp)
   1491c:	             move.l 20(sp),d0
   14920:	             move.l d0,1e94a <languageTable>
    if( languageTable == 0) {
   14926:	             move.l 1e94a <languageTable>,d0
   1492c:	         ,-- bne.s 1493c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1492e:	         |   pea 1bc41 <talk.c.490538ff+0x56d>
   14934:	         |   jsr 184fe <KPrintF>
   1493a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1493c:	         '-> move.l 1e956 <gameSettings+0x4>,d0
   14942:	             move.l d0,d1
   14944:	             addq.l #1,d1
   14946:	             move.l d1,16(sp)
   1494a:	             clr.l 12(sp)
   1494e:	             move.l 1e876 <SysBase>,d0
   14954:	             movea.l d0,a6
   14956:	             move.l 16(sp),d0
   1495a:	             move.l 12(sp),d1
   1495e:	             jsr -684(a6)
   14962:	             move.l d0,8(sp)
   14966:	             move.l 8(sp),d0
   1496a:	             move.l d0,1e94e <languageName>
	if( languageName == 0) {
   14970:	             move.l 1e94e <languageName>,d0
   14976:	         ,-- bne.s 14986 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   14978:	         |   pea 1bc77 <talk.c.490538ff+0x5a3>
   1497e:	         |   jsr 184fe <KPrintF>
   14984:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14986:	         '-> clr.l 32(sp)
   1498a:	   ,-------- bra.s 14a02 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1498c:	,--|-------> tst.l 32(sp)
   14990:	|  |  ,----- beq.s 149a0 <makeLanguageTable+0xb6>
   14992:	|  |  |      move.l 40(sp),-(sp)
   14996:	|  |  |      jsr 6bc <get2bytes>
   1499c:	|  |  |      addq.l #4,sp
   1499e:	|  |  |  ,-- bra.s 149a2 <makeLanguageTable+0xb8>
   149a0:	|  |  '--|-> moveq #0,d0
   149a2:	|  |     '-> movea.l 1e94a <languageTable>,a0
   149a8:	|  |         move.l 32(sp),d1
   149ac:	|  |         add.l d1,d1
   149ae:	|  |         add.l d1,d1
   149b0:	|  |         adda.l d1,a0
   149b2:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   149b4:	|  |         move.l 1e94e <languageName>,d1
   149ba:	|  |         move.l 32(sp),d0
   149be:	|  |         add.l d0,d0
   149c0:	|  |         add.l d0,d0
   149c2:	|  |         movea.l d1,a0
   149c4:	|  |         adda.l d0,a0
   149c6:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   149c8:	|  |         move.l 1e81e <gameVersion>,d0
   149ce:	|  |         cmpi.l #511,d0
   149d4:	|  |     ,-- ble.s 149fe <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   149d6:	|  |     |   move.l 1e956 <gameSettings+0x4>,d0
   149dc:	|  |     +-- beq.s 149fe <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   149de:	|  |     |   move.l 1e94e <languageName>,d1
   149e4:	|  |     |   move.l 32(sp),d0
   149e8:	|  |     |   add.l d0,d0
   149ea:	|  |     |   add.l d0,d0
   149ec:	|  |     |   movea.l d1,a2
   149ee:	|  |     |   adda.l d0,a2
   149f0:	|  |     |   move.l 40(sp),-(sp)
   149f4:	|  |     |   jsr b02 <readString>
   149fa:	|  |     |   addq.l #4,sp
   149fc:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   149fe:	|  |     '-> addq.l #1,32(sp)
   14a02:	|  '-------> move.l 1e956 <gameSettings+0x4>,d0
   14a08:	|            cmp.l 32(sp),d0
   14a0c:	'----------- bcc.w 1498c <makeLanguageTable+0xa2>
		}
	}
}
   14a10:	             nop
   14a12:	             nop
   14a14:	             movea.l (sp)+,a2
   14a16:	             movea.l (sp)+,a6
   14a18:	             lea 28(sp),sp
   14a1c:	             rts

00014a1e <readIniFile>:

void readIniFile (char * filename) {
   14a1e:	                      lea -564(sp),sp
   14a22:	                      move.l a6,-(sp)
   14a24:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   14a26:	                      move.l 576(sp),-(sp)
   14a2a:	                      jsr b8 <copyString>
   14a30:	                      addq.l #4,sp
   14a32:	                      move.l d0,-(sp)
   14a34:	                      jsr 14832 <getPrefsFilename>
   14a3a:	                      addq.l #4,sp
   14a3c:	                      move.l d0,562(sp)

	langName = joinStrings ("/", langName);
   14a40:	                      move.l 562(sp),-(sp)
   14a44:	                      pea 1b21e <PutChar+0x227e>
   14a4a:	                      jsr 14f4a <joinStrings>
   14a50:	                      addq.l #8,sp
   14a52:	                      move.l d0,562(sp)
	BPTR fp = Open(langName,MODE_OLDFILE);	
   14a56:	                      move.l 562(sp),558(sp)
   14a5c:	                      move.l #1005,554(sp)
   14a64:	                      move.l 1e87e <DOSBase>,d0
   14a6a:	                      movea.l d0,a6
   14a6c:	                      move.l 558(sp),d1
   14a70:	                      move.l 554(sp),d2
   14a74:	                      jsr -30(a6)
   14a78:	                      move.l d0,550(sp)
   14a7c:	                      move.l 550(sp),d0
   14a80:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   14a84:	                      clr.l 1e952 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   14a8a:	                      move.w #1,1e95a <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   14a92:	                      clr.l 1e95c <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   14a98:	                      moveq #1,d0
   14a9a:	                      move.l d0,1e960 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   14aa0:	                      clr.w 1e964 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   14aa6:	                      clr.w 1e966 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   14aac:	                      clr.w 1e968 <gameSettings+0x16>

	FreeVec(langName);
   14ab2:	                      move.l 562(sp),542(sp)
   14ab8:	                      move.l 1e876 <SysBase>,d0
   14abe:	                      movea.l d0,a6
   14ac0:	                      movea.l 542(sp),a1
   14ac4:	                      jsr -690(a6)
	langName = NULL;
   14ac8:	                      clr.l 562(sp)

	if (fp) {
   14acc:	                      tst.l 546(sp)
   14ad0:	,-------------------- beq.w 14dae <readIniFile+0x390>
		char lineSoFar[257] = "";
   14ad4:	|                     move.l sp,d0
   14ad6:	|                     addi.l #265,d0
   14adc:	|                     move.l #257,d1
   14ae2:	|                     move.l d1,-(sp)
   14ae4:	|                     clr.l -(sp)
   14ae6:	|                     move.l d0,-(sp)
   14ae8:	|                     jsr 18482 <memset>
   14aee:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   14af2:	|                     move.l sp,d0
   14af4:	|                     addq.l #8,d0
   14af6:	|                     move.l #257,d1
   14afc:	|                     move.l d1,-(sp)
   14afe:	|                     clr.l -(sp)
   14b00:	|                     move.l d0,-(sp)
   14b02:	|                     jsr 18482 <memset>
   14b08:	|                     lea 12(sp),sp
		unsigned char here = 0;
   14b0c:	|                     clr.b 571(sp)
		char readChar = ' ';
   14b10:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   14b16:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   14b1c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   14b20:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   14b24:	|  ,----------------> move.l 546(sp),534(sp)
   14b2a:	|  |                  move.l 1e87e <DOSBase>,d0
   14b30:	|  |                  movea.l d0,a6
   14b32:	|  |                  move.l 534(sp),d1
   14b36:	|  |                  jsr -306(a6)
   14b3a:	|  |                  move.l d0,530(sp)
   14b3e:	|  |                  move.l 530(sp),d0
   14b42:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   14b46:	|  |                  moveq #-1,d1
   14b48:	|  |                  cmp.l 538(sp),d1
   14b4c:	|  |           ,----- bne.s 14b5a <readIniFile+0x13c>
				readChar = '\n';
   14b4e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   14b54:	|  |           |      clr.w 568(sp)
   14b58:	|  |           |  ,-- bra.s 14b60 <readIniFile+0x142>
			} else {
				readChar = (char) tmp;
   14b5a:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   14b60:	|  |              '-> move.b 570(sp),d0
   14b64:	|  |                  ext.w d0
   14b66:	|  |                  movea.w d0,a0
   14b68:	|  |                  moveq #61,d0
   14b6a:	|  |                  cmp.l a0,d0
   14b6c:	|  |     ,----------- beq.w 14d16 <readIniFile+0x2f8>
   14b70:	|  |     |            moveq #61,d1
   14b72:	|  |     |            cmp.l a0,d1
   14b74:	|  |  ,--|----------- blt.w 14d22 <readIniFile+0x304>
   14b78:	|  |  |  |            moveq #10,d0
   14b7a:	|  |  |  |            cmp.l a0,d0
   14b7c:	|  |  |  |        ,-- beq.s 14b86 <readIniFile+0x168>
   14b7e:	|  |  |  |        |   moveq #13,d1
   14b80:	|  |  |  |        |   cmp.l a0,d1
   14b82:	|  |  +--|--------|-- bne.w 14d22 <readIniFile+0x304>
				case '\n':
				case '\r':
				if (doingSecond) {
   14b86:	|  |  |  |        '-> tst.w 566(sp)
   14b8a:	|  |  |  |     ,----- beq.w 14d04 <readIniFile+0x2e6>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   14b8e:	|  |  |  |     |      pea 1bcab <talk.c.490538ff+0x5d7>
   14b94:	|  |  |  |     |      move.l sp,d0
   14b96:	|  |  |  |     |      addi.l #269,d0
   14b9c:	|  |  |  |     |      move.l d0,-(sp)
   14b9e:	|  |  |  |     |      jsr 14eca <strcmp>
   14ba4:	|  |  |  |     |      addq.l #8,sp
   14ba6:	|  |  |  |     |      tst.l d0
   14ba8:	|  |  |  |     |  ,-- bne.s 14bc2 <readIniFile+0x1a4>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   14baa:	|  |  |  |     |  |   move.l sp,d0
   14bac:	|  |  |  |     |  |   addq.l #8,d0
   14bae:	|  |  |  |     |  |   move.l d0,-(sp)
   14bb0:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14bb6:	|  |  |  |     |  |   addq.l #4,sp
   14bb8:	|  |  |  |     |  |   move.l d0,1e952 <gameSettings>
   14bbe:	|  |  |  |     +--|-- bra.w 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   14bc2:	|  |  |  |     |  '-> pea 1bcb4 <talk.c.490538ff+0x5e0>
   14bc8:	|  |  |  |     |      move.l sp,d0
   14bca:	|  |  |  |     |      addi.l #269,d0
   14bd0:	|  |  |  |     |      move.l d0,-(sp)
   14bd2:	|  |  |  |     |      jsr 14eca <strcmp>
   14bd8:	|  |  |  |     |      addq.l #8,sp
   14bda:	|  |  |  |     |      tst.l d0
   14bdc:	|  |  |  |     |  ,-- bne.s 14c02 <readIniFile+0x1e4>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   14bde:	|  |  |  |     |  |   move.l sp,d0
   14be0:	|  |  |  |     |  |   addq.l #8,d0
   14be2:	|  |  |  |     |  |   move.l d0,-(sp)
   14be4:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14bea:	|  |  |  |     |  |   addq.l #4,sp
   14bec:	|  |  |  |     |  |   tst.l d0
   14bee:	|  |  |  |     |  |   seq d0
   14bf0:	|  |  |  |     |  |   neg.b d0
   14bf2:	|  |  |  |     |  |   move.b d0,d0
   14bf4:	|  |  |  |     |  |   andi.w #255,d0
   14bf8:	|  |  |  |     |  |   move.w d0,1e95a <gameSettings+0x8>
   14bfe:	|  |  |  |     +--|-- bra.w 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   14c02:	|  |  |  |     |  '-> pea 1bcbb <talk.c.490538ff+0x5e7>
   14c08:	|  |  |  |     |      move.l sp,d0
   14c0a:	|  |  |  |     |      addi.l #269,d0
   14c10:	|  |  |  |     |      move.l d0,-(sp)
   14c12:	|  |  |  |     |      jsr 14eca <strcmp>
   14c18:	|  |  |  |     |      addq.l #8,sp
   14c1a:	|  |  |  |     |      tst.l d0
   14c1c:	|  |  |  |     |  ,-- bne.s 14c36 <readIniFile+0x218>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   14c1e:	|  |  |  |     |  |   move.l sp,d0
   14c20:	|  |  |  |     |  |   addq.l #8,d0
   14c22:	|  |  |  |     |  |   move.l d0,-(sp)
   14c24:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14c2a:	|  |  |  |     |  |   addq.l #4,sp
   14c2c:	|  |  |  |     |  |   move.l d0,1e95c <gameSettings+0xa>
   14c32:	|  |  |  |     +--|-- bra.w 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   14c36:	|  |  |  |     |  '-> pea 1bcc3 <talk.c.490538ff+0x5ef>
   14c3c:	|  |  |  |     |      move.l sp,d0
   14c3e:	|  |  |  |     |      addi.l #269,d0
   14c44:	|  |  |  |     |      move.l d0,-(sp)
   14c46:	|  |  |  |     |      jsr 14eca <strcmp>
   14c4c:	|  |  |  |     |      addq.l #8,sp
   14c4e:	|  |  |  |     |      tst.l d0
   14c50:	|  |  |  |     |  ,-- bne.s 14c6a <readIniFile+0x24c>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   14c52:	|  |  |  |     |  |   move.l sp,d0
   14c54:	|  |  |  |     |  |   addq.l #8,d0
   14c56:	|  |  |  |     |  |   move.l d0,-(sp)
   14c58:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14c5e:	|  |  |  |     |  |   addq.l #4,sp
   14c60:	|  |  |  |     |  |   move.l d0,1e960 <gameSettings+0xe>
   14c66:	|  |  |  |     +--|-- bra.w 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   14c6a:	|  |  |  |     |  '-> pea 1bccd <talk.c.490538ff+0x5f9>
   14c70:	|  |  |  |     |      move.l sp,d0
   14c72:	|  |  |  |     |      addi.l #269,d0
   14c78:	|  |  |  |     |      move.l d0,-(sp)
   14c7a:	|  |  |  |     |      jsr 14eca <strcmp>
   14c80:	|  |  |  |     |      addq.l #8,sp
   14c82:	|  |  |  |     |      tst.l d0
   14c84:	|  |  |  |     |  ,-- bne.s 14c9e <readIniFile+0x280>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   14c86:	|  |  |  |     |  |   move.l sp,d0
   14c88:	|  |  |  |     |  |   addq.l #8,d0
   14c8a:	|  |  |  |     |  |   move.l d0,-(sp)
   14c8c:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14c92:	|  |  |  |     |  |   addq.l #4,sp
   14c94:	|  |  |  |     |  |   move.l d0,d0
   14c96:	|  |  |  |     |  |   move.w d0,1e964 <gameSettings+0x12>
   14c9c:	|  |  |  |     +--|-- bra.s 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   14c9e:	|  |  |  |     |  '-> pea 1bcd9 <talk.c.490538ff+0x605>
   14ca4:	|  |  |  |     |      move.l sp,d0
   14ca6:	|  |  |  |     |      addi.l #269,d0
   14cac:	|  |  |  |     |      move.l d0,-(sp)
   14cae:	|  |  |  |     |      jsr 14eca <strcmp>
   14cb4:	|  |  |  |     |      addq.l #8,sp
   14cb6:	|  |  |  |     |      tst.l d0
   14cb8:	|  |  |  |     |  ,-- bne.s 14cd2 <readIniFile+0x2b4>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   14cba:	|  |  |  |     |  |   move.l sp,d0
   14cbc:	|  |  |  |     |  |   addq.l #8,d0
   14cbe:	|  |  |  |     |  |   move.l d0,-(sp)
   14cc0:	|  |  |  |     |  |   jsr 14dba <stringToInt>
   14cc6:	|  |  |  |     |  |   addq.l #4,sp
   14cc8:	|  |  |  |     |  |   move.l d0,d0
   14cca:	|  |  |  |     |  |   move.w d0,1e966 <gameSettings+0x14>
   14cd0:	|  |  |  |     +--|-- bra.s 14d04 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   14cd2:	|  |  |  |     |  '-> pea 1bce7 <talk.c.490538ff+0x613>
   14cd8:	|  |  |  |     |      move.l sp,d0
   14cda:	|  |  |  |     |      addi.l #269,d0
   14ce0:	|  |  |  |     |      move.l d0,-(sp)
   14ce2:	|  |  |  |     |      jsr 14eca <strcmp>
   14ce8:	|  |  |  |     |      addq.l #8,sp
   14cea:	|  |  |  |     |      tst.l d0
   14cec:	|  |  |  |     +----- bne.s 14d04 <readIniFile+0x2e6>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   14cee:	|  |  |  |     |      move.l sp,d0
   14cf0:	|  |  |  |     |      addq.l #8,d0
   14cf2:	|  |  |  |     |      move.l d0,-(sp)
   14cf4:	|  |  |  |     |      jsr 14dba <stringToInt>
   14cfa:	|  |  |  |     |      addq.l #4,sp
   14cfc:	|  |  |  |     |      move.l d0,d0
   14cfe:	|  |  |  |     |      move.w d0,1e968 <gameSettings+0x16>
					}
				}
				here = 0;
   14d04:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14d08:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14d0c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   14d10:	|  |  |  |            clr.b 8(sp)
				break;
   14d14:	|  |  |  |  ,-------- bra.s 14d8c <readIniFile+0x36e>

				case '=':
				doingSecond = TRUE;
   14d16:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14d1c:	|  |  |     |         clr.b 571(sp)
				break;
   14d20:	|  |  |     +-------- bra.s 14d8c <readIniFile+0x36e>

				default:
				if (doingSecond) {
   14d22:	|  |  '-----|-------> tst.w 566(sp)
   14d26:	|  |        |  ,----- beq.s 14d5a <readIniFile+0x33c>
					secondSoFar[here ++] = readChar;
   14d28:	|  |        |  |      move.b 571(sp),d0
   14d2c:	|  |        |  |      move.b d0,d1
   14d2e:	|  |        |  |      addq.b #1,d1
   14d30:	|  |        |  |      move.b d1,571(sp)
   14d34:	|  |        |  |      move.b d0,d0
   14d36:	|  |        |  |      andi.l #255,d0
   14d3c:	|  |        |  |      lea 572(sp),a0
   14d40:	|  |        |  |      adda.l d0,a0
   14d42:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   14d48:	|  |        |  |      moveq #0,d0
   14d4a:	|  |        |  |      move.b 571(sp),d0
   14d4e:	|  |        |  |      lea 572(sp),a0
   14d52:	|  |        |  |      adda.l d0,a0
   14d54:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14d58:	|  |        |  |  ,-- bra.s 14d8a <readIniFile+0x36c>
					lineSoFar[here ++] = readChar;
   14d5a:	|  |        |  '--|-> move.b 571(sp),d0
   14d5e:	|  |        |     |   move.b d0,d1
   14d60:	|  |        |     |   addq.b #1,d1
   14d62:	|  |        |     |   move.b d1,571(sp)
   14d66:	|  |        |     |   move.b d0,d0
   14d68:	|  |        |     |   andi.l #255,d0
   14d6e:	|  |        |     |   lea 572(sp),a0
   14d72:	|  |        |     |   adda.l d0,a0
   14d74:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   14d7a:	|  |        |     |   moveq #0,d0
   14d7c:	|  |        |     |   move.b 571(sp),d0
   14d80:	|  |        |     |   lea 572(sp),a0
   14d84:	|  |        |     |   adda.l d0,a0
   14d86:	|  |        |     |   clr.b -307(a0)
				break;
   14d8a:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14d8c:	|  |        '-------> tst.w 568(sp)
   14d90:	|  '----------------- bne.w 14b24 <readIniFile+0x106>

		Close(fp);
   14d94:	|                     move.l 546(sp),526(sp)
   14d9a:	|                     move.l 1e87e <DOSBase>,d0
   14da0:	|                     movea.l d0,a6
   14da2:	|                     move.l 526(sp),d1
   14da6:	|                     jsr -36(a6)
   14daa:	|                     move.l d0,522(sp)
	}
}
   14dae:	'-------------------> nop
   14db0:	                      move.l (sp)+,d2
   14db2:	                      movea.l (sp)+,a6
   14db4:	                      lea 564(sp),sp
   14db8:	                      rts

00014dba <stringToInt>:

unsigned int stringToInt (char * s) {
   14dba:	             subq.l #8,sp
	int i = 0;
   14dbc:	             clr.l 4(sp)
	BOOL negative = FALSE;
   14dc0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   14dc4:	,----------> movea.l 12(sp),a0
   14dc8:	|            move.b (a0),d0
   14dca:	|            cmpi.b #47,d0
   14dce:	|        ,-- ble.s 14e06 <stringToInt+0x4c>
   14dd0:	|        |   movea.l 12(sp),a0
   14dd4:	|        |   move.b (a0),d0
   14dd6:	|        |   cmpi.b #57,d0
   14dda:	|        +-- bgt.s 14e06 <stringToInt+0x4c>
			i *= 10;
   14ddc:	|        |   move.l 4(sp),d1
   14de0:	|        |   move.l d1,d0
   14de2:	|        |   add.l d0,d0
   14de4:	|        |   add.l d0,d0
   14de6:	|        |   add.l d1,d0
   14de8:	|        |   add.l d0,d0
   14dea:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14dee:	|        |   movea.l 12(sp),a0
   14df2:	|        |   move.b (a0),d0
   14df4:	|        |   ext.w d0
   14df6:	|        |   movea.w d0,a0
   14df8:	|        |   moveq #-48,d0
   14dfa:	|        |   add.l a0,d0
   14dfc:	|        |   add.l d0,4(sp)
			s ++;
   14e00:	|        |   addq.l #1,12(sp)
   14e04:	|  ,-----|-- bra.s 14e3e <stringToInt+0x84>
		} else if (*s == '-') {
   14e06:	|  |     '-> movea.l 12(sp),a0
   14e0a:	|  |         move.b (a0),d0
   14e0c:	|  |         cmpi.b #45,d0
   14e10:	|  |     ,-- bne.s 14e2a <stringToInt+0x70>
			negative = ! negative;
   14e12:	|  |     |   tst.w 2(sp)
   14e16:	|  |     |   seq d0
   14e18:	|  |     |   neg.b d0
   14e1a:	|  |     |   move.b d0,d0
   14e1c:	|  |     |   andi.w #255,d0
   14e20:	|  |     |   move.w d0,2(sp)
			s++;
   14e24:	|  |     |   addq.l #1,12(sp)
   14e28:	+--|-----|-- bra.s 14dc4 <stringToInt+0xa>
		} else {
			if (negative)
   14e2a:	|  |     '-> tst.w 2(sp)
   14e2e:	|  |     ,-- beq.s 14e38 <stringToInt+0x7e>
				return -i;
   14e30:	|  |     |   move.l 4(sp),d0
   14e34:	|  |     |   neg.l d0
   14e36:	|  |  ,--|-- bra.s 14e40 <stringToInt+0x86>
			return i;
   14e38:	|  |  |  '-> move.l 4(sp),d0
   14e3c:	|  |  +----- bra.s 14e40 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   14e3e:	'--'--|----X bra.s 14dc4 <stringToInt+0xa>
		}
	}
   14e40:	      '----> addq.l #8,sp
   14e42:	             rts

00014e44 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   14e44:	    lea -28(sp),sp
   14e48:	    move.l a6,-(sp)
   14e4a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   14e4c:	    pea 1bcf1 <talk.c.490538ff+0x61d>
   14e52:	    jsr 184fe <KPrintF>
   14e58:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14e5a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   14e5e:	    move.l 40(sp),30(sp)
   14e64:	    move.l #1005,26(sp)
   14e6c:	    move.l 1e87e <DOSBase>,d0
   14e72:	    movea.l d0,a6
   14e74:	    move.l 30(sp),d1
   14e78:	    move.l 26(sp),d2
   14e7c:	    jsr -30(a6)
   14e80:	    move.l d0,22(sp)
   14e84:	    move.l 22(sp),d0
   14e88:	    move.l d0,18(sp)
	if (tester) {
   14e8c:	,-- beq.s 14ebc <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14e8e:	|   pea 1bd0b <talk.c.490538ff+0x637>
   14e94:	|   jsr 184fe <KPrintF>
   14e9a:	|   addq.l #4,sp
		retval = 1;
   14e9c:	|   move.b #1,35(sp)
		Close(tester);
   14ea2:	|   move.l 18(sp),14(sp)
   14ea8:	|   move.l 1e87e <DOSBase>,d0
   14eae:	|   movea.l d0,a6
   14eb0:	|   move.l 14(sp),d1
   14eb4:	|   jsr -36(a6)
   14eb8:	|   move.l d0,10(sp)
	}
	return retval;
   14ebc:	'-> move.b 35(sp),d0
   14ec0:	    move.l (sp)+,d2
   14ec2:	    movea.l (sp)+,a6
   14ec4:	    lea 28(sp),sp
   14ec8:	    rts

00014eca <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14eca:	   ,-- bra.s 14ed4 <strcmp+0xa>
    {
        s1++;
   14ecc:	,--|-> addq.l #1,4(sp)
        s2++;
   14ed0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14ed4:	|  '-> movea.l 4(sp),a0
   14ed8:	|      move.b (a0),d0
   14eda:	|  ,-- beq.s 14eec <strcmp+0x22>
   14edc:	|  |   movea.l 4(sp),a0
   14ee0:	|  |   move.b (a0),d1
   14ee2:	|  |   movea.l 8(sp),a0
   14ee6:	|  |   move.b (a0),d0
   14ee8:	|  |   cmp.b d1,d0
   14eea:	'--|-- beq.s 14ecc <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14eec:	   '-> movea.l 4(sp),a0
   14ef0:	       move.b (a0),d0
   14ef2:	       moveq #0,d1
   14ef4:	       move.b d0,d1
   14ef6:	       movea.l 8(sp),a0
   14efa:	       move.b (a0),d0
   14efc:	       move.b d0,d0
   14efe:	       andi.l #255,d0
   14f04:	       sub.l d0,d1
   14f06:	       move.l d1,d0
}
   14f08:	       rts

00014f0a <strlen>:

long unsigned int strlen (const char *s) 
{  
   14f0a:	       subq.l #4,sp
	long unsigned int i = 0;
   14f0c:	       clr.l (sp)
	while(s[i]) i++; 
   14f0e:	   ,-- bra.s 14f12 <strlen+0x8>
   14f10:	,--|-> addq.l #1,(sp)
   14f12:	|  '-> movea.l 8(sp),a0
   14f16:	|      adda.l (sp),a0
   14f18:	|      move.b (a0),d0
   14f1a:	'----- bne.s 14f10 <strlen+0x6>
	return(i);
   14f1c:	       move.l (sp),d0
}
   14f1e:	       addq.l #4,sp
   14f20:	       rts

00014f22 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   14f22:	    nop
   14f24:	,-> move.l 8(sp),d0
   14f28:	|   move.l d0,d1
   14f2a:	|   addq.l #1,d1
   14f2c:	|   move.l d1,8(sp)
   14f30:	|   movea.l 4(sp),a0
   14f34:	|   lea 1(a0),a1
   14f38:	|   move.l a1,4(sp)
   14f3c:	|   movea.l d0,a1
   14f3e:	|   move.b (a1),d0
   14f40:	|   move.b d0,(a0)
   14f42:	|   move.b (a0),d0
   14f44:	'-- bne.s 14f24 <strcpy+0x2>
}
   14f46:	    nop
   14f48:	    rts

00014f4a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   14f4a:	    lea -20(sp),sp
   14f4e:	    move.l a6,-(sp)
   14f50:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14f52:	    move.l 32(sp),-(sp)
   14f56:	    jsr 14f0a <strlen>
   14f5c:	    addq.l #4,sp
   14f5e:	    move.l d0,d2
   14f60:	    move.l 36(sp),-(sp)
   14f64:	    jsr 14f0a <strlen>
   14f6a:	    addq.l #4,sp
   14f6c:	    add.l d2,d0
   14f6e:	    move.l d0,d1
   14f70:	    addq.l #1,d1
   14f72:	    move.l d1,20(sp)
   14f76:	    clr.l 16(sp)
   14f7a:	    move.l 1e876 <SysBase>,d0
   14f80:	    movea.l d0,a6
   14f82:	    move.l 20(sp),d0
   14f86:	    move.l 16(sp),d1
   14f8a:	    jsr -684(a6)
   14f8e:	    move.l d0,12(sp)
   14f92:	    move.l 12(sp),d0
   14f96:	    move.l d0,8(sp)
	char * t = newString;
   14f9a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   14fa0:	    nop
   14fa2:	,-> move.l 32(sp),d0
   14fa6:	|   move.l d0,d1
   14fa8:	|   addq.l #1,d1
   14faa:	|   move.l d1,32(sp)
   14fae:	|   movea.l 24(sp),a0
   14fb2:	|   lea 1(a0),a1
   14fb6:	|   move.l a1,24(sp)
   14fba:	|   movea.l d0,a1
   14fbc:	|   move.b (a1),d0
   14fbe:	|   move.b d0,(a0)
   14fc0:	|   move.b (a0),d0
   14fc2:	'-- bne.s 14fa2 <joinStrings+0x58>
	t--;
   14fc4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14fc8:	    nop
   14fca:	,-> move.l 36(sp),d0
   14fce:	|   move.l d0,d1
   14fd0:	|   addq.l #1,d1
   14fd2:	|   move.l d1,36(sp)
   14fd6:	|   movea.l 24(sp),a0
   14fda:	|   lea 1(a0),a1
   14fde:	|   move.l a1,24(sp)
   14fe2:	|   movea.l d0,a1
   14fe4:	|   move.b (a1),d0
   14fe6:	|   move.b d0,(a0)
   14fe8:	|   move.b (a0),d0
   14fea:	'-- bne.s 14fca <joinStrings+0x80>

	return newString;
   14fec:	    move.l 8(sp),d0
}
   14ff0:	    move.l (sp)+,d2
   14ff2:	    movea.l (sp)+,a6
   14ff4:	    lea 20(sp),sp
   14ff8:	    rts

00014ffa <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   14ffa:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   14ffe:	       moveq #10,d0
   15000:	       cmp.l 28(sp),d0
   15004:	   ,-- bne.s 15022 <itoa+0x28>
   15006:	   |   tst.l 20(sp)
   1500a:	   +-- bge.s 15022 <itoa+0x28>
        *str++ = '-';
   1500c:	   |   move.l 24(sp),d0
   15010:	   |   move.l d0,d1
   15012:	   |   addq.l #1,d1
   15014:	   |   move.l d1,24(sp)
   15018:	   |   movea.l d0,a0
   1501a:	   |   move.b #45,(a0)
        value *= -1;
   1501e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   15022:	   '-> move.l 24(sp),12(sp)
   15028:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   1502e:	   ,-> move.l 20(sp),d0
   15032:	   |   move.l 28(sp),-(sp)
   15036:	   |   move.l d0,-(sp)
   15038:	   |   jsr 18f36 <__modsi3>
   1503e:	   |   addq.l #8,sp
   15040:	   |   movea.l d0,a1
   15042:	   |   move.l 12(sp),d0
   15046:	   |   move.l d0,d1
   15048:	   |   addq.l #1,d1
   1504a:	   |   move.l d1,12(sp)
   1504e:	   |   lea 1bd23 <talk.c.490538ff+0x64f>,a0
   15054:	   |   move.b (0,a1,a0.l),d1
   15058:	   |   movea.l d0,a0
   1505a:	   |   move.b d1,(a0)
        value /= base;
   1505c:	   |   move.l 28(sp),-(sp)
   15060:	   |   move.l 24(sp),-(sp)
   15064:	   |   jsr 18f08 <__divsi3>
   1506a:	   |   addq.l #8,sp
   1506c:	   |   move.l d0,20(sp)
    } while (value);
   15070:	   '-- bne.s 1502e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   15072:	       move.l 12(sp),d0
   15076:	       move.l d0,d1
   15078:	       subq.l #1,d1
   1507a:	       move.l d1,12(sp)
   1507e:	       movea.l d0,a0
   15080:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   15082:	       move.l 4(sp),8(sp)
   15088:	   ,-- bra.s 150ae <itoa+0xb4>
        char temp = *low;
   1508a:	,--|-> movea.l 8(sp),a0
   1508e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   15092:	|  |   movea.l 12(sp),a0
   15096:	|  |   move.b (a0),d0
   15098:	|  |   movea.l 8(sp),a0
   1509c:	|  |   move.b d0,(a0)
        *ptr = temp;
   1509e:	|  |   movea.l 12(sp),a0
   150a2:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   150a6:	|  |   addq.l #1,8(sp)
   150aa:	|  |   subq.l #1,12(sp)
   150ae:	|  '-> move.l 8(sp),d0
   150b2:	|      cmp.l 12(sp),d0
   150b6:	'----- bcs.s 1508a <itoa+0x90>
    }
    return rc;
   150b8:	       move.l 4(sp),d0
}
   150bc:	       lea 16(sp),sp
   150c0:	       rts

000150c2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   150c2:	                            lea -40(sp),sp
   150c6:	                            move.l d2,-(sp)
    char* s = str;
   150c8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   150ce:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   150d4:	   ,----------------------- bra.w 15208 <vsprintf2+0x146>
        if (*p == '%') {
   150d8:	,--|----------------------> movea.l 36(sp),a0
   150dc:	|  |                        move.b (a0),d0
   150de:	|  |                        cmpi.b #37,d0
   150e2:	|  |  ,-------------------- bne.w 151ee <vsprintf2+0x12c>
            switch (*++p) {
   150e6:	|  |  |                     addq.l #1,36(sp)
   150ea:	|  |  |                     movea.l 36(sp),a0
   150ee:	|  |  |                     move.b (a0),d0
   150f0:	|  |  |                     ext.w d0
   150f2:	|  |  |                     movea.w d0,a0
   150f4:	|  |  |                     moveq #115,d0
   150f6:	|  |  |                     cmp.l a0,d0
   150f8:	|  |  |           ,-------- beq.s 15170 <vsprintf2+0xae>
   150fa:	|  |  |           |         moveq #115,d1
   150fc:	|  |  |           |         cmp.l a0,d1
   150fe:	|  |  |  ,--------|-------- blt.w 151d6 <vsprintf2+0x114>
   15102:	|  |  |  |        |         moveq #99,d2
   15104:	|  |  |  |        |         cmp.l a0,d2
   15106:	|  |  |  |  ,-----|-------- beq.w 151ae <vsprintf2+0xec>
   1510a:	|  |  |  |  |     |         moveq #100,d0
   1510c:	|  |  |  |  |     |         cmp.l a0,d0
   1510e:	|  |  |  +--|-----|-------- bne.w 151d6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   15112:	|  |  |  |  |     |         addq.l #4,56(sp)
   15116:	|  |  |  |  |     |         movea.l 56(sp),a0
   1511a:	|  |  |  |  |     |         move.l (a0),d0
   1511c:	|  |  |  |  |     |         move.l d0,d1
   1511e:	|  |  |  |  |     |         subq.l #1,d1
   15120:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   15124:	|  |  |  |  |     |         pea a <_start+0xa>
   15128:	|  |  |  |  |     |         lea 8(sp),a0
   1512c:	|  |  |  |  |     |         move.l a0,-(sp)
   1512e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   15132:	|  |  |  |  |     |         jsr 14ffa <itoa>
   15138:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1513c:	|  |  |  |  |     |         lea 44(sp),a0
   15140:	|  |  |  |  |     |         lea -40(a0),a0
   15144:	|  |  |  |  |     |         move.l a0,28(sp)
   15148:	|  |  |  |  |     |     ,-- bra.s 15164 <vsprintf2+0xa2>
                        *s++ = *b;
   1514a:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   1514e:	|  |  |  |  |     |  |  |   move.l d0,d1
   15150:	|  |  |  |  |     |  |  |   addq.l #1,d1
   15152:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   15156:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1515a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1515c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1515e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   15160:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   15164:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   15168:	|  |  |  |  |     |  |      move.b (a0),d0
   1516a:	|  |  |  |  |     |  '----- bne.s 1514a <vsprintf2+0x88>
                    }
                    break;
   1516c:	|  |  |  |  |  ,--|-------- bra.w 15204 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   15170:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   15174:	|  |  |  |  |  |            movea.l 56(sp),a0
   15178:	|  |  |  |  |  |            move.l (a0),d0
   1517a:	|  |  |  |  |  |            move.l d0,d1
   1517c:	|  |  |  |  |  |            subq.l #1,d1
   1517e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   15182:	|  |  |  |  |  |        ,-- bra.s 151a4 <vsprintf2+0xe2>
                        *s++ = *sval++;
   15184:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   15188:	|  |  |  |  |  |     |  |   move.l d1,d2
   1518a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1518c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   15190:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   15194:	|  |  |  |  |  |     |  |   move.l d0,d2
   15196:	|  |  |  |  |  |     |  |   addq.l #1,d2
   15198:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1519c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1519e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   151a0:	|  |  |  |  |  |     |  |   movea.l d0,a0
   151a2:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   151a4:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   151a8:	|  |  |  |  |  |     |      move.b (a0),d0
   151aa:	|  |  |  |  |  |     '----- bne.s 15184 <vsprintf2+0xc2>
                    }
                    break;
   151ac:	|  |  |  |  |  +----------- bra.s 15204 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   151ae:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   151b2:	|  |  |  |     |            movea.l 56(sp),a0
   151b6:	|  |  |  |     |            move.l (a0),d0
   151b8:	|  |  |  |     |            move.l d0,d1
   151ba:	|  |  |  |     |            subq.l #1,d1
   151bc:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   151c0:	|  |  |  |     |            move.l 40(sp),d0
   151c4:	|  |  |  |     |            move.l d0,d2
   151c6:	|  |  |  |     |            addq.l #1,d2
   151c8:	|  |  |  |     |            move.l d2,40(sp)
   151cc:	|  |  |  |     |            move.l 24(sp),d1
   151d0:	|  |  |  |     |            movea.l d0,a0
   151d2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   151d4:	|  |  |  |     +----------- bra.s 15204 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   151d6:	|  |  |  '-----|----------> move.l 40(sp),d0
   151da:	|  |  |        |            move.l d0,d1
   151dc:	|  |  |        |            addq.l #1,d1
   151de:	|  |  |        |            move.l d1,40(sp)
   151e2:	|  |  |        |            movea.l 36(sp),a0
   151e6:	|  |  |        |            move.b (a0),d1
   151e8:	|  |  |        |            movea.l d0,a0
   151ea:	|  |  |        |            move.b d1,(a0)
                    break;
   151ec:	|  |  |        +----------- bra.s 15204 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   151ee:	|  |  '--------|----------> move.l 40(sp),d0
   151f2:	|  |           |            move.l d0,d1
   151f4:	|  |           |            addq.l #1,d1
   151f6:	|  |           |            move.l d1,40(sp)
   151fa:	|  |           |            movea.l 36(sp),a0
   151fe:	|  |           |            move.b (a0),d1
   15200:	|  |           |            movea.l d0,a0
   15202:	|  |           |            move.b d1,(a0)
        }
        p++;
   15204:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   15208:	|  '----------------------> movea.l 36(sp),a0
   1520c:	|                           move.b (a0),d0
   1520e:	'-------------------------- bne.w 150d8 <vsprintf2+0x16>
    }
    *s = '\0';
   15212:	                            movea.l 40(sp),a0
   15216:	                            clr.b (a0)
    return s - str;
   15218:	                            move.l 40(sp),d0
   1521c:	                            sub.l 48(sp),d0
}
   15220:	                            move.l (sp)+,d2
   15222:	                            lea 40(sp),sp
   15226:	                            rts

00015228 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   15228:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1522a:	moveq #16,d0
   1522c:	add.l sp,d0
   1522e:	move.l d0,d1
   15230:	addq.l #4,d1
   15232:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   15236:	move.l 16(sp),d0
   1523a:	move.l 4(sp),-(sp)
   1523e:	move.l d0,-(sp)
   15240:	move.l 20(sp),-(sp)
   15244:	jsr 150c2 <vsprintf2>
   1524a:	lea 12(sp),sp
   1524e:	move.l d0,(sp)
    va_end(args);
   15250:	clr.l 4(sp)

    return done;
   15254:	move.l (sp),d0
}
   15256:	addq.l #8,sp
   15258:	rts

0001525a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1525a:	       lea -20(sp),sp
   1525e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   15260:	       moveq #12,d0
   15262:	       move.l d0,20(sp)
   15266:	       clr.l 16(sp)
   1526a:	       move.l 1e876 <SysBase>,d0
   15270:	       movea.l d0,a6
   15272:	       move.l 20(sp),d0
   15276:	       move.l 16(sp),d1
   1527a:	       jsr -684(a6)
   1527e:	       move.l d0,12(sp)
   15282:	       move.l 12(sp),d0
   15286:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1528a:	   ,-- bne.s 15290 <addVarToStack+0x36>
   1528c:	   |   clr.w d0
   1528e:	,--|-- bra.s 152d8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   15290:	|  '-> move.l 8(sp),d0
   15294:	|      move.l d0,-(sp)
   15296:	|      move.l 32(sp),-(sp)
   1529a:	|      jsr 15dbc <copyMain>
   152a0:	|      addq.l #8,sp
   152a2:	|      tst.w d0
   152a4:	|  ,-- bne.s 152c0 <addVarToStack+0x66>
        FreeVec(newStack);
   152a6:	|  |   move.l 8(sp),4(sp)
   152ac:	|  |   move.l 1e876 <SysBase>,d0
   152b2:	|  |   movea.l d0,a6
   152b4:	|  |   movea.l 4(sp),a1
   152b8:	|  |   jsr -690(a6)
        return FALSE;
   152bc:	|  |   clr.w d0
   152be:	+--|-- bra.s 152d8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   152c0:	|  '-> movea.l 32(sp),a0
   152c4:	|      move.l (a0),d0
   152c6:	|      movea.l 8(sp),a0
   152ca:	|      move.l d0,8(a0)
    *thisStack = newStack;
   152ce:	|      movea.l 32(sp),a0
   152d2:	|      move.l 8(sp),(a0)
    return TRUE;
   152d6:	|      moveq #1,d0
}
   152d8:	'----> movea.l (sp)+,a6
   152da:	       lea 20(sp),sp
   152de:	       rts

000152e0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   152e0:	       lea -16(sp),sp
   152e4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   152e6:	       moveq #12,d0
   152e8:	       move.l d0,16(sp)
   152ec:	       clr.l 12(sp)
   152f0:	       move.l 1e876 <SysBase>,d0
   152f6:	       movea.l d0,a6
   152f8:	       move.l 16(sp),d0
   152fc:	       move.l 12(sp),d1
   15300:	       jsr -684(a6)
   15304:	       move.l d0,8(sp)
   15308:	       move.l 8(sp),d0
   1530c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   15310:	   ,-- bne.s 15316 <addVarToStackQuick+0x36>
   15312:	   |   clr.w d0
   15314:	,--|-- bra.s 1534c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   15316:	|  '-> move.l 4(sp),d0
   1531a:	|      pea 8 <_start+0x8>
   1531e:	|      move.l 28(sp),-(sp)
   15322:	|      move.l d0,-(sp)
   15324:	|      jsr 184b2 <memcpy>
   1532a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1532e:	|      movea.l 24(sp),a0
   15332:	|      clr.l (a0)

    newStack->next = *thisStack;
   15334:	|      movea.l 28(sp),a0
   15338:	|      move.l (a0),d0
   1533a:	|      movea.l 4(sp),a0
   1533e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   15342:	|      movea.l 28(sp),a0
   15346:	|      move.l 4(sp),(a0)
    return TRUE;
   1534a:	|      moveq #1,d0
}
   1534c:	'----> movea.l (sp)+,a6
   1534e:	       lea 16(sp),sp
   15352:	       rts

00015354 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   15354:	       lea -16(sp),sp
   15358:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1535a:	       movea.l 24(sp),a0
   1535e:	       move.l (a0),d0
   15360:	       moveq #1,d1
   15362:	       cmp.l d0,d1
   15364:	   ,-- bne.s 1538e <addVariablesInSecond+0x3a>
   15366:	   |   movea.l 28(sp),a0
   1536a:	   |   move.l (a0),d0
   1536c:	   |   moveq #1,d1
   1536e:	   |   cmp.l d0,d1
   15370:	   +-- bne.s 1538e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   15372:	   |   movea.l 28(sp),a0
   15376:	   |   move.l 4(a0),d1
   1537a:	   |   movea.l 24(sp),a0
   1537e:	   |   move.l 4(a0),d0
   15382:	   |   add.l d1,d0
   15384:	   |   movea.l 28(sp),a0
   15388:	   |   move.l d0,4(a0)
   1538c:	,--|-- bra.s 15408 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1538e:	|  '-> move.l 24(sp),-(sp)
   15392:	|      jsr 15ff4 <getTextFromAnyVar>
   15398:	|      addq.l #4,sp
   1539a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1539e:	|      move.l 28(sp),-(sp)
   153a2:	|      jsr 15ff4 <getTextFromAnyVar>
   153a8:	|      addq.l #4,sp
   153aa:	|      move.l d0,12(sp)

		unlinkVar(var2);
   153ae:	|      move.l 28(sp),-(sp)
   153b2:	|      jsr 15c6c <unlinkVar>
   153b8:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   153ba:	|      move.l 12(sp),-(sp)
   153be:	|      move.l 20(sp),-(sp)
   153c2:	|      jsr 14f4a <joinStrings>
   153c8:	|      addq.l #8,sp
   153ca:	|      movea.l 28(sp),a0
   153ce:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   153d2:	|      movea.l 28(sp),a0
   153d6:	|      moveq #3,d0
   153d8:	|      move.l d0,(a0)
		FreeVec(string1);
   153da:	|      move.l 16(sp),8(sp)
   153e0:	|      move.l 1e876 <SysBase>,d0
   153e6:	|      movea.l d0,a6
   153e8:	|      movea.l 8(sp),a1
   153ec:	|      jsr -690(a6)
		FreeVec(string2);
   153f0:	|      move.l 12(sp),4(sp)
   153f6:	|      move.l 1e876 <SysBase>,d0
   153fc:	|      movea.l d0,a6
   153fe:	|      movea.l 4(sp),a1
   15402:	|      jsr -690(a6)
	}
}
   15406:	|      nop
   15408:	'----> nop
   1540a:	       movea.l (sp)+,a6
   1540c:	       lea 16(sp),sp
   15410:	       rts

00015412 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   15412:	movea.l 8(sp),a0
   15416:	move.l 4(a0),-(sp)
   1541a:	move.l (a0),-(sp)
   1541c:	movea.l 12(sp),a0
   15420:	move.l 4(a0),-(sp)
   15424:	move.l (a0),-(sp)
   15426:	jsr 15448 <compareVars>
   1542c:	lea 16(sp),sp
   15430:	move.l d0,-(sp)
   15432:	pea 1 <_start+0x1>
   15436:	move.l 16(sp),-(sp)
   1543a:	jsr 16310 <setVariable>
   15440:	lea 12(sp),sp
}
   15444:	nop
   15446:	rts

00015448 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   15448:	       subq.l #4,sp
	int re = 0;
   1544a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1544c:	       move.l 8(sp),d1
   15450:	       move.l 16(sp),d0
   15454:	       cmp.l d1,d0
   15456:	,----- bne.w 1551e <compareVars+0xd6>
		switch (var1.varType) {
   1545a:	|      move.l 8(sp),d0
   1545e:	|      moveq #9,d1
   15460:	|      cmp.l d0,d1
   15462:	|  ,-- bcs.w 15506 <compareVars+0xbe>
   15466:	|  |   add.l d0,d0
   15468:	|  |   movea.l d0,a0
   1546a:	|  |   adda.l #87158,a0
   15470:	|  |   move.w (a0),d0
   15472:	|  |   jmp (15476 <compareVars+0x2e>,pc,d0.w)
   15476:	|  |   ori.b #-112,(a4)
   1547a:	|  |   ori.l #5243024,(a0)
   15480:	|  |   ori.l #7733392,(a0)
   15486:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1548c:	|  |   move.l d0,(sp)
			break;
   1548e:	+--|-- bra.w 1551e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   15492:	|  |   move.l 12(sp),d1
   15496:	|  |   move.l 20(sp),d0
   1549a:	|  |   cmp.l d1,d0
   1549c:	|  |   seq d0
   1549e:	|  |   neg.b d0
   154a0:	|  |   move.b d0,d0
   154a2:	|  |   andi.l #255,d0
   154a8:	|  |   move.l d0,(sp)
			break;
   154aa:	+--|-- bra.s 1551e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   154ac:	|  |   move.l 12(sp),d1
   154b0:	|  |   move.l 20(sp),d0
   154b4:	|  |   cmp.l d1,d0
   154b6:	|  |   seq d0
   154b8:	|  |   neg.b d0
   154ba:	|  |   move.b d0,d0
   154bc:	|  |   andi.l #255,d0
   154c2:	|  |   move.l d0,(sp)
			break;
   154c4:	+--|-- bra.s 1551e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   154c6:	|  |   move.l 20(sp),d1
   154ca:	|  |   move.l 12(sp),d0
   154ce:	|  |   move.l d1,-(sp)
   154d0:	|  |   move.l d0,-(sp)
   154d2:	|  |   jsr 14eca <strcmp>
   154d8:	|  |   addq.l #8,sp
   154da:	|  |   tst.l d0
   154dc:	|  |   seq d0
   154de:	|  |   neg.b d0
   154e0:	|  |   move.b d0,d0
   154e2:	|  |   andi.l #255,d0
   154e8:	|  |   move.l d0,(sp)
			break;
   154ea:	+--|-- bra.s 1551e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   154ec:	|  |   move.l 12(sp),d1
   154f0:	|  |   move.l 20(sp),d0
   154f4:	|  |   cmp.l d1,d0
   154f6:	|  |   seq d0
   154f8:	|  |   neg.b d0
   154fa:	|  |   move.b d0,d0
   154fc:	|  |   andi.l #255,d0
   15502:	|  |   move.l d0,(sp)
			break;
   15504:	+--|-- bra.s 1551e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   15506:	|  '-> move.l 12(sp),d1
   1550a:	|      move.l 20(sp),d0
   1550e:	|      cmp.l d1,d0
   15510:	|      seq d0
   15512:	|      neg.b d0
   15514:	|      move.b d0,d0
   15516:	|      andi.l #255,d0
   1551c:	|      move.l d0,(sp)
		}
	}
	return re;
   1551e:	'----> move.l (sp),d0
}
   15520:	       addq.l #4,sp
   15522:	       rts

00015524 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   15524:	             lea -16(sp),sp
   15528:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1552a:	             movea.l 28(sp),a0
   1552e:	             moveq #6,d0
   15530:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   15532:	             moveq #12,d0
   15534:	             move.l d0,12(sp)
   15538:	             clr.l 8(sp)
   1553c:	             move.l 1e876 <SysBase>,d0
   15542:	             movea.l d0,a6
   15544:	             move.l 12(sp),d0
   15548:	             move.l 8(sp),d1
   1554c:	             jsr -684(a6)
   15550:	             move.l d0,4(sp)
   15554:	             move.l 4(sp),d0
   15558:	             movea.l 28(sp),a0
   1555c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   15560:	             movea.l 28(sp),a0
   15564:	             move.l 4(a0),d0
   15568:	         ,-- bne.s 15570 <copyStack+0x4c>
   1556a:	         |   clr.w d0
   1556c:	,--------|-- bra.w 155f2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   15570:	|        '-> movea.l 28(sp),a0
   15574:	|            movea.l 4(a0),a0
   15578:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1557a:	|            movea.l 28(sp),a0
   1557e:	|            movea.l 4(a0),a0
   15582:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   15586:	|            movea.l 28(sp),a0
   1558a:	|            movea.l 4(a0),a0
   1558e:	|            moveq #1,d0
   15590:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   15594:	|            movea.l 24(sp),a0
   15598:	|            movea.l 4(a0),a0
   1559c:	|            move.l (a0),16(sp)

	while (a) {
   155a0:	|     ,----- bra.s 155ea <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   155a2:	|  ,--|----> movea.l 28(sp),a0
   155a6:	|  |  |      move.l 4(a0),d0
   155aa:	|  |  |      move.l d0,d1
   155ac:	|  |  |      move.l 16(sp),d0
   155b0:	|  |  |      move.l d1,-(sp)
   155b2:	|  |  |      move.l d0,-(sp)
   155b4:	|  |  |      jsr 1525a <addVarToStack>
   155ba:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   155bc:	|  |  |      movea.l 28(sp),a0
   155c0:	|  |  |      movea.l 4(a0),a0
   155c4:	|  |  |      move.l 4(a0),d0
   155c8:	|  |  |  ,-- bne.s 155e0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   155ca:	|  |  |  |   movea.l 28(sp),a0
   155ce:	|  |  |  |   movea.l 4(a0),a1
   155d2:	|  |  |  |   movea.l 28(sp),a0
   155d6:	|  |  |  |   movea.l 4(a0),a0
   155da:	|  |  |  |   move.l (a1),d0
   155dc:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   155e0:	|  |  |  '-> movea.l 16(sp),a0
   155e4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   155ea:	|  |  '----> tst.l 16(sp)
   155ee:	|  '-------- bne.s 155a2 <copyStack+0x7e>
	}

	return TRUE;
   155f0:	|            moveq #1,d0
}
   155f2:	'----------> movea.l (sp)+,a6
   155f4:	             lea 16(sp),sp
   155f8:	             rts

000155fa <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   155fa:	                lea -20(sp),sp
   155fe:	                move.l a6,-(sp)
   15600:	                move.l 36(sp),d0
   15604:	                move.w d0,d0
   15606:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1560a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   15610:	                clr.l 16(sp)

    while (*huntVar) {
   15614:	   ,----------- bra.s 15692 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   15616:	,--|----------> movea.l 20(sp),a0
   1561a:	|  |            movea.l (a0),a0
   1561c:	|  |            movea.l 28(sp),a1
   15620:	|  |            move.l 4(a1),-(sp)
   15624:	|  |            move.l (a1),-(sp)
   15626:	|  |            move.l 4(a0),-(sp)
   1562a:	|  |            move.l (a0),-(sp)
   1562c:	|  |            jsr 15448 <compareVars>
   15632:	|  |            lea 16(sp),sp
   15636:	|  |            tst.l d0
   15638:	|  |  ,-------- beq.s 15684 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1563a:	|  |  |         movea.l 20(sp),a0
   1563e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   15642:	|  |  |         movea.l 12(sp),a0
   15646:	|  |  |         move.l 8(a0),d0
   1564a:	|  |  |         movea.l 20(sp),a0
   1564e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   15650:	|  |  |         move.l 12(sp),d0
   15654:	|  |  |         move.l d0,-(sp)
   15656:	|  |  |         jsr 15c6c <unlinkVar>
   1565c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1565e:	|  |  |         move.l 12(sp),8(sp)
   15664:	|  |  |         move.l 1e876 <SysBase>,d0
   1566a:	|  |  |         movea.l d0,a6
   1566c:	|  |  |         movea.l 8(sp),a1
   15670:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   15674:	|  |  |         tst.w 6(sp)
   15678:	|  |  |     ,-- bne.s 1567e <deleteVarFromStack+0x84>
   1567a:	|  |  |     |   moveq #1,d0
   1567c:	|  |  |  ,--|-- bra.s 156a0 <deleteVarFromStack+0xa6>
            reply++;
   1567e:	|  |  |  |  '-> addq.l #1,16(sp)
   15682:	|  +--|--|----- bra.s 15692 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   15684:	|  |  '--|----> movea.l 20(sp),a0
   15688:	|  |     |      move.l (a0),d0
   1568a:	|  |     |      move.l d0,d1
   1568c:	|  |     |      addq.l #8,d1
   1568e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   15692:	|  '-----|----> movea.l 20(sp),a0
   15696:	|        |      move.l (a0),d0
   15698:	'--------|----- bne.w 15616 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1569c:	         |      move.l 16(sp),d0
}
   156a0:	         '----> movea.l (sp)+,a6
   156a2:	                lea 20(sp),sp
   156a6:	                rts

000156a8 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   156a8:	       movea.l 4(sp),a0
   156ac:	       move.l 4(a0),d0
   156b0:	       cmp.l 8(sp),d0
   156b4:	   ,-- bhi.s 156ba <fastArrayGetByIndex+0x12>
   156b6:	   |   moveq #0,d0
   156b8:	,--|-- bra.s 156c8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   156ba:	|  '-> movea.l 4(sp),a0
   156be:	|      move.l (a0),d1
   156c0:	|      move.l 8(sp),d0
   156c4:	|      lsl.l #3,d0
   156c6:	|      add.l d1,d0
}
   156c8:	'----> rts

000156ca <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   156ca:	                lea -32(sp),sp
   156ce:	                move.l a6,-(sp)
   156d0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   156d2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   156d6:	                movea.l 44(sp),a0
   156da:	                move.l (a0),d0
   156dc:	                moveq #8,d1
   156de:	                cmp.l d0,d1
   156e0:	            ,-- beq.s 156ee <getCostumeFromVar+0x24>
   156e2:	            |   moveq #9,d1
   156e4:	            |   cmp.l d0,d1
   156e6:	   ,--------|-- beq.w 1579c <getCostumeFromVar+0xd2>
   156ea:	,--|--------|-- bra.w 157a6 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   156ee:	|  |        '-> moveq #8,d0
   156f0:	|  |            move.l d0,28(sp)
   156f4:	|  |            clr.l 24(sp)
   156f8:	|  |            move.l 1e876 <SysBase>,d0
   156fe:	|  |            movea.l d0,a6
   15700:	|  |            move.l 28(sp),d0
   15704:	|  |            move.l 24(sp),d1
   15708:	|  |            jsr -684(a6)
   1570c:	|  |            move.l d0,20(sp)
   15710:	|  |            move.l 20(sp),d0
   15714:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   15718:	|  |        ,-- bne.s 15720 <getCostumeFromVar+0x56>
   1571a:	|  |        |   moveq #0,d0
   1571c:	|  |  ,-----|-- bra.w 157d0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   15720:	|  |  |     '-> movea.l 36(sp),a0
   15724:	|  |  |         moveq #1,d1
   15726:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1572a:	|  |  |         moveq #12,d0
   1572c:	|  |  |         move.l d0,16(sp)
   15730:	|  |  |         clr.l 12(sp)
   15734:	|  |  |         move.l 1e876 <SysBase>,d0
   1573a:	|  |  |         movea.l d0,a6
   1573c:	|  |  |         move.l 16(sp),d0
   15740:	|  |  |         move.l 12(sp),d1
   15744:	|  |  |         jsr -684(a6)
   15748:	|  |  |         move.l d0,8(sp)
   1574c:	|  |  |         move.l 8(sp),d0
   15750:	|  |  |         movea.l 36(sp),a0
   15754:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   15756:	|  |  |         movea.l 36(sp),a0
   1575a:	|  |  |         move.l (a0),d0
   1575c:	|  |  |     ,-- bne.s 15762 <getCostumeFromVar+0x98>
   1575e:	|  |  |     |   moveq #0,d0
   15760:	|  |  +-----|-- bra.s 157d0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   15762:	|  |  |     '-> clr.l 32(sp)
   15766:	|  |  |     ,-- bra.s 15792 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   15768:	|  |  |  ,--|-> movea.l 44(sp),a0
   1576c:	|  |  |  |  |   move.l 4(a0),d0
   15770:	|  |  |  |  |   movea.l 36(sp),a0
   15774:	|  |  |  |  |   movea.l (a0),a0
   15776:	|  |  |  |  |   move.l 32(sp),d1
   1577a:	|  |  |  |  |   add.l d1,d1
   1577c:	|  |  |  |  |   add.l d1,d1
   1577e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   15782:	|  |  |  |  |   move.l d0,-(sp)
   15784:	|  |  |  |  |   jsr 9efc <copyAnim>
   1578a:	|  |  |  |  |   addq.l #4,sp
   1578c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1578e:	|  |  |  |  |   addq.l #1,32(sp)
   15792:	|  |  |  |  '-> moveq #2,d1
   15794:	|  |  |  |      cmp.l 32(sp),d1
   15798:	|  |  |  '----- bge.s 15768 <getCostumeFromVar+0x9e>
            }
            break;
   1579a:	|  |  |     ,-- bra.s 157cc <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1579c:	|  '--|-----|-> movea.l 44(sp),a0
   157a0:	|     |     |   move.l 4(a0),d0
   157a4:	|     +-----|-- bra.s 157d0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   157a6:	'-----|-----|-> movea.l 44(sp),a0
   157aa:	      |     |   move.l (a0),d0
   157ac:	      |     |   add.l d0,d0
   157ae:	      |     |   movea.l d0,a1
   157b0:	      |     |   adda.l d0,a1
   157b2:	      |     |   lea 1e742 <typeName>,a0
   157b8:	      |     |   move.l (0,a1,a0.l),d0
   157bc:	      |     |   move.l d0,-(sp)
   157be:	      |     |   pea 1bd95 <talk.c.490538ff+0x6c1>
   157c4:	      |     |   jsr 184fe <KPrintF>
   157ca:	      |     |   addq.l #8,sp
    }

    return p;
   157cc:	      |     '-> move.l 36(sp),d0
}
   157d0:	      '-------> movea.l (sp)+,a2
   157d2:	                movea.l (sp)+,a6
   157d4:	                lea 32(sp),sp
   157d8:	                rts

000157da <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   157da:	                lea -96(sp),sp
   157de:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   157e2:	                move.l 116(sp),-(sp)
   157e6:	                pea 1bdcd <talk.c.490538ff+0x6f9>
   157ec:	                jsr 14f4a <joinStrings>
   157f2:	                addq.l #8,sp
   157f4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   157f8:	            ,-- bne.s 15800 <getSavedGamesStack+0x26>
   157fa:	            |   clr.w d0
   157fc:	,-----------|-- bra.w 15a14 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   15800:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   15804:	|               move.l #114127,98(sp)
   1580c:	|               moveq #-2,d0
   1580e:	|               move.l d0,94(sp)
   15812:	|               move.l 1e87e <DOSBase>,d0
   15818:	|               movea.l d0,a6
   1581a:	|               move.l 98(sp),d1
   1581e:	|               move.l 94(sp),d2
   15822:	|               jsr -84(a6)
   15826:	|               move.l d0,90(sp)
   1582a:	|               move.l 90(sp),d0
   1582e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   15832:	|           ,-- bne.s 1583a <getSavedGamesStack+0x60>
   15834:	|           |   clr.w d0
   15836:	+-----------|-- bra.w 15a14 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1583a:	|           '-> move.l #260,82(sp)
   15842:	|               move.l #65536,78(sp)
   1584a:	|               move.l 1e876 <SysBase>,d0
   15850:	|               movea.l d0,a6
   15852:	|               move.l 82(sp),d0
   15856:	|               move.l 78(sp),d1
   1585a:	|               jsr -684(a6)
   1585e:	|               move.l d0,74(sp)
   15862:	|               move.l 74(sp),d0
   15866:	|               move.l d0,70(sp)
	if (!fib) {
   1586a:	|           ,-- bne.s 15888 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1586c:	|           |   move.l 86(sp),22(sp)
   15872:	|           |   move.l 1e87e <DOSBase>,d0
   15878:	|           |   movea.l d0,a6
   1587a:	|           |   move.l 22(sp),d1
   1587e:	|           |   jsr -90(a6)
		return FALSE;
   15882:	|           |   clr.w d0
   15884:	+-----------|-- bra.w 15a14 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   15888:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1588c:	|               move.l 86(sp),66(sp)
   15892:	|               move.l 70(sp),62(sp)
   15898:	|               move.l 1e87e <DOSBase>,d0
   1589e:	|               movea.l d0,a6
   158a0:	|               move.l 66(sp),d1
   158a4:	|               move.l 62(sp),d2
   158a8:	|               jsr -102(a6)
   158ac:	|               move.l d0,58(sp)
   158b0:	|               move.l 58(sp),d0
   158b4:	|  ,----------- beq.w 159c8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   158b8:	|  |        ,-- bra.w 15994 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   158bc:	|  |  ,-----|-> move.l 70(sp),d2
   158c0:	|  |  |     |   addq.l #8,d2
   158c2:	|  |  |     |   move.l 70(sp),d0
   158c6:	|  |  |     |   addq.l #8,d0
   158c8:	|  |  |     |   move.l d0,-(sp)
   158ca:	|  |  |     |   jsr 14f0a <strlen>
   158d0:	|  |  |     |   addq.l #4,sp
   158d2:	|  |  |     |   move.l d0,d3
   158d4:	|  |  |     |   move.l 116(sp),-(sp)
   158d8:	|  |  |     |   jsr 14f0a <strlen>
   158de:	|  |  |     |   addq.l #4,sp
   158e0:	|  |  |     |   move.l d3,d1
   158e2:	|  |  |     |   sub.l d0,d1
   158e4:	|  |  |     |   move.l d2,d0
   158e6:	|  |  |     |   add.l d1,d0
   158e8:	|  |  |     |   move.l 116(sp),-(sp)
   158ec:	|  |  |     |   move.l d0,-(sp)
   158ee:	|  |  |     |   jsr 14eca <strcmp>
   158f4:	|  |  |     |   addq.l #8,sp
   158f6:	|  |  |     |   tst.l d0
   158f8:	|  |  |     +-- bne.w 15994 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   158fc:	|  |  |     |   move.l 70(sp),d0
   15900:	|  |  |     |   addq.l #8,d0
   15902:	|  |  |     |   move.l d0,-(sp)
   15904:	|  |  |     |   jsr 14f0a <strlen>
   1590a:	|  |  |     |   addq.l #4,sp
   1590c:	|  |  |     |   move.l d0,d2
   1590e:	|  |  |     |   move.l 116(sp),-(sp)
   15912:	|  |  |     |   jsr 14f0a <strlen>
   15918:	|  |  |     |   addq.l #4,sp
   1591a:	|  |  |     |   move.l d0,d1
   1591c:	|  |  |     |   move.l d2,d0
   1591e:	|  |  |     |   sub.l d1,d0
   15920:	|  |  |     |   movea.l 70(sp),a0
   15924:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   15928:	|  |  |     |   move.l 70(sp),d0
   1592c:	|  |  |     |   addq.l #8,d0
   1592e:	|  |  |     |   move.l d0,-(sp)
   15930:	|  |  |     |   jsr 118 <decodeFilename>
   15936:	|  |  |     |   addq.l #4,sp
   15938:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1593c:	|  |  |     |   move.l 42(sp),-(sp)
   15940:	|  |  |     |   lea 18(sp),a0
   15944:	|  |  |     |   move.l a0,-(sp)
   15946:	|  |  |     |   jsr 15c40 <makeTextVar>
   1594c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1594e:	|  |  |     |   move.l 42(sp),38(sp)
   15954:	|  |  |     |   move.l 1e876 <SysBase>,d0
   1595a:	|  |  |     |   movea.l d0,a6
   1595c:	|  |  |     |   movea.l 38(sp),a1
   15960:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   15964:	|  |  |     |   move.l 112(sp),d0
   15968:	|  |  |     |   move.l d0,-(sp)
   1596a:	|  |  |     |   lea 18(sp),a0
   1596e:	|  |  |     |   move.l a0,-(sp)
   15970:	|  |  |     |   jsr 1525a <addVarToStack>
   15976:	|  |  |     |   addq.l #8,sp
   15978:	|  |  |     |   tst.w d0
   1597a:	|  |  |  ,--|-- beq.s 159cc <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1597c:	|  |  |  |  |   movea.l 112(sp),a0
   15980:	|  |  |  |  |   move.l 4(a0),d0
   15984:	|  |  |  |  +-- bne.s 15994 <getSavedGamesStack+0x1ba>
   15986:	|  |  |  |  |   movea.l 112(sp),a0
   1598a:	|  |  |  |  |   move.l (a0),d0
   1598c:	|  |  |  |  |   movea.l 112(sp),a0
   15990:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   15994:	|  |  |  |  '-> move.l 86(sp),54(sp)
   1599a:	|  |  |  |      move.l 70(sp),50(sp)
   159a0:	|  |  |  |      move.l 1e87e <DOSBase>,d0
   159a6:	|  |  |  |      movea.l d0,a6
   159a8:	|  |  |  |      move.l 54(sp),d1
   159ac:	|  |  |  |      move.l 50(sp),d2
   159b0:	|  |  |  |      jsr -108(a6)
   159b4:	|  |  |  |      move.l d0,46(sp)
   159b8:	|  |  |  |      move.l 46(sp),d0
   159bc:	|  |  '--|----- bne.w 158bc <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   159c0:	|  |     |      move.w #1,106(sp)
   159c6:	|  |     |  ,-- bra.s 159ce <getSavedGamesStack+0x1f4>
	}

cleanup:
   159c8:	|  '-----|--|-> nop
   159ca:	|        |  +-- bra.s 159ce <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   159cc:	|        '--|-> nop
	FreeVec(fib);
   159ce:	|           '-> move.l 70(sp),34(sp)
   159d4:	|               move.l 1e876 <SysBase>,d0
   159da:	|               movea.l d0,a6
   159dc:	|               movea.l 34(sp),a1
   159e0:	|               jsr -690(a6)
	UnLock(dirLock);
   159e4:	|               move.l 86(sp),30(sp)
   159ea:	|               move.l 1e87e <DOSBase>,d0
   159f0:	|               movea.l d0,a6
   159f2:	|               move.l 30(sp),d1
   159f6:	|               jsr -90(a6)
	FreeVec(pattern);
   159fa:	|               move.l 102(sp),26(sp)
   15a00:	|               move.l 1e876 <SysBase>,d0
   15a06:	|               movea.l d0,a6
   15a08:	|               movea.l 26(sp),a1
   15a0c:	|               jsr -690(a6)
	return result;
   15a10:	|               move.w 106(sp),d0
}
   15a14:	'-------------> movem.l (sp)+,d2-d3/a6
   15a18:	                lea 96(sp),sp
   15a1c:	                rts

00015a1e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   15a1e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   15a20:	       movea.l 20(sp),a0
   15a24:	       move.l (a0),d0
   15a26:	       cmp.l 16(sp),d0
   15a2a:	,----- beq.s 15a8e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   15a2c:	|      move.l 16(sp),d0
   15a30:	|      add.l d0,d0
   15a32:	|      movea.l d0,a1
   15a34:	|      adda.l d0,a1
   15a36:	|      lea 1e742 <typeName>,a0
   15a3c:	|      move.l (0,a1,a0.l),d0
   15a40:	|      move.l d0,-(sp)
   15a42:	|      pea 1bdd1 <talk.c.490538ff+0x6fd>
   15a48:	|      jsr 14f4a <joinStrings>
   15a4e:	|      addq.l #8,sp
   15a50:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   15a54:	|      movea.l 20(sp),a0
   15a58:	|      move.l (a0),d0
   15a5a:	|      add.l d0,d0
   15a5c:	|      movea.l d0,a1
   15a5e:	|      adda.l d0,a1
   15a60:	|      lea 1e742 <typeName>,a0
   15a66:	|      move.l (0,a1,a0.l),d0
   15a6a:	|      move.l d0,-(sp)
   15a6c:	|      pea 1be13 <talk.c.490538ff+0x73f>
   15a72:	|      jsr 14f4a <joinStrings>
   15a78:	|      addq.l #8,sp
   15a7a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   15a7c:	|      move.l (sp),-(sp)
   15a7e:	|      move.l 8(sp),-(sp)
   15a82:	|      jsr 184fe <KPrintF>
   15a88:	|      addq.l #8,sp

		return FALSE;
   15a8a:	|      clr.w d0
   15a8c:	|  ,-- bra.s 15a9e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   15a8e:	'--|-> movea.l 20(sp),a0
   15a92:	   |   move.l 4(a0),d0
   15a96:	   |   movea.l 12(sp),a0
   15a9a:	   |   move.l d0,(a0)
	return TRUE;
   15a9c:	   |   moveq #1,d0
}
   15a9e:	   '-> addq.l #8,sp
   15aa0:	       rts

00015aa2 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   15aa2:	move.l 8(sp),-(sp)
   15aa6:	jsr 7e46 <getNumberedString>
   15aac:	addq.l #4,sp
   15aae:	move.l d0,-(sp)
   15ab0:	move.l 8(sp),-(sp)
   15ab4:	jsr 15c40 <makeTextVar>
   15aba:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   15abc:	movea.l 4(sp),a0
   15ac0:	move.l 4(a0),d0
   15ac4:	sne d0
   15ac6:	neg.b d0
   15ac8:	move.b d0,d0
   15aca:	andi.w #255,d0
}
   15ace:	rts

00015ad0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   15ad0:	          subq.l #8,sp
    int size = stackSize(stacky);
   15ad2:	          move.l 16(sp),-(sp)
   15ad6:	          jsr 1637e <stackSize>
   15adc:	          addq.l #4,sp
   15ade:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   15ae2:	          move.l 4(sp),-(sp)
   15ae6:	          move.l 16(sp),-(sp)
   15aea:	          jsr 15b3a <makeFastArraySize>
   15af0:	          addq.l #8,sp
   15af2:	          tst.w d0
   15af4:	      ,-- bne.s 15afa <makeFastArrayFromStack+0x2a>
   15af6:	      |   clr.w d0
   15af8:	,-----|-- bra.s 15b36 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   15afa:	|     '-> movea.l 16(sp),a0
   15afe:	|         move.l (a0),(sp)
    size = 0;
   15b00:	|         clr.l 4(sp)
    while (allV) {
   15b04:	|     ,-- bra.s 15b30 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   15b06:	|  ,--|-> movea.l 12(sp),a0
   15b0a:	|  |  |   movea.l 4(a0),a0
   15b0e:	|  |  |   move.l (a0),d1
   15b10:	|  |  |   move.l 4(sp),d0
   15b14:	|  |  |   lsl.l #3,d0
   15b16:	|  |  |   add.l d0,d1
   15b18:	|  |  |   move.l (sp),d0
   15b1a:	|  |  |   move.l d1,-(sp)
   15b1c:	|  |  |   move.l d0,-(sp)
   15b1e:	|  |  |   jsr 15dbc <copyMain>
   15b24:	|  |  |   addq.l #8,sp
        size++;
   15b26:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   15b2a:	|  |  |   movea.l (sp),a0
   15b2c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   15b30:	|  |  '-> tst.l (sp)
   15b32:	|  '----- bne.s 15b06 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   15b34:	|         moveq #1,d0
}
   15b36:	'-------> addq.l #8,sp
   15b38:	          rts

00015b3a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   15b3a:	          lea -28(sp),sp
   15b3e:	          move.l a6,-(sp)
    if (size < 0) {
   15b40:	          tst.l 40(sp)
   15b44:	      ,-- bge.s 15b5a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   15b46:	      |   pea 1be58 <talk.c.490538ff+0x784>
   15b4c:	      |   jsr 184fe <KPrintF>
   15b52:	      |   addq.l #4,sp
		return FALSE;
   15b54:	      |   clr.w d0
   15b56:	,-----|-- bra.w 15c38 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   15b5a:	|     '-> move.l 36(sp),-(sp)
   15b5e:	|         jsr 15c6c <unlinkVar>
   15b64:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   15b66:	|         movea.l 36(sp),a0
   15b6a:	|         moveq #10,d0
   15b6c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   15b6e:	|         moveq #12,d0
   15b70:	|         move.l d0,24(sp)
   15b74:	|         clr.l 20(sp)
   15b78:	|         move.l 1e876 <SysBase>,d0
   15b7e:	|         movea.l d0,a6
   15b80:	|         move.l 24(sp),d0
   15b84:	|         move.l 20(sp),d1
   15b88:	|         jsr -684(a6)
   15b8c:	|         move.l d0,16(sp)
   15b90:	|         move.l 16(sp),d0
   15b94:	|         movea.l 36(sp),a0
   15b98:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   15b9c:	|         movea.l 36(sp),a0
   15ba0:	|         move.l 4(a0),d0
   15ba4:	|     ,-- bne.s 15bac <makeFastArraySize+0x72>
   15ba6:	|     |   clr.w d0
   15ba8:	+-----|-- bra.w 15c38 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   15bac:	|     '-> move.l 40(sp),d0
   15bb0:	|         lsl.l #3,d0
   15bb2:	|         move.l d0,12(sp)
   15bb6:	|         clr.l 8(sp)
   15bba:	|         move.l 1e876 <SysBase>,d0
   15bc0:	|         movea.l d0,a6
   15bc2:	|         move.l 12(sp),d0
   15bc6:	|         move.l 8(sp),d1
   15bca:	|         jsr -684(a6)
   15bce:	|         move.l d0,4(sp)
   15bd2:	|         move.l 4(sp),d0
   15bd6:	|         movea.l 36(sp),a0
   15bda:	|         movea.l 4(a0),a0
   15bde:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   15be0:	|         movea.l 36(sp),a0
   15be4:	|         movea.l 4(a0),a0
   15be8:	|         move.l (a0),d0
   15bea:	|     ,-- bne.s 15bf0 <makeFastArraySize+0xb6>
   15bec:	|     |   clr.w d0
   15bee:	+-----|-- bra.s 15c38 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   15bf0:	|     '-> clr.l 28(sp)
   15bf4:	|     ,-- bra.s 15c10 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   15bf6:	|  ,--|-> movea.l 36(sp),a0
   15bfa:	|  |  |   movea.l 4(a0),a0
   15bfe:	|  |  |   move.l (a0),d1
   15c00:	|  |  |   move.l 28(sp),d0
   15c04:	|  |  |   lsl.l #3,d0
   15c06:	|  |  |   movea.l d1,a0
   15c08:	|  |  |   adda.l d0,a0
   15c0a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   15c0c:	|  |  |   addq.l #1,28(sp)
   15c10:	|  |  '-> move.l 28(sp),d0
   15c14:	|  |      cmp.l 40(sp),d0
   15c18:	|  '----- blt.s 15bf6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   15c1a:	|         movea.l 36(sp),a0
   15c1e:	|         movea.l 4(a0),a0
   15c22:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   15c28:	|         movea.l 36(sp),a0
   15c2c:	|         movea.l 4(a0),a0
   15c30:	|         moveq #1,d0
   15c32:	|         move.l d0,8(a0)
    return TRUE;
   15c36:	|         moveq #1,d0
}
   15c38:	'-------> movea.l (sp)+,a6
   15c3a:	          lea 28(sp),sp
   15c3e:	          rts

00015c40 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   15c40:	move.l 4(sp),-(sp)
   15c44:	jsr 15c6c <unlinkVar>
   15c4a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   15c4c:	movea.l 4(sp),a0
   15c50:	moveq #3,d0
   15c52:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   15c54:	move.l 8(sp),-(sp)
   15c58:	jsr b8 <copyString>
   15c5e:	addq.l #4,sp
   15c60:	movea.l 4(sp),a0
   15c64:	move.l d0,4(a0)
}
   15c68:	nop
   15c6a:	rts

00015c6c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   15c6c:	                      lea -16(sp),sp
   15c70:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   15c72:	                      movea.l 24(sp),a0
   15c76:	                      move.l (a0),d0
   15c78:	                      moveq #10,d1
   15c7a:	                      cmp.l d0,d1
   15c7c:	            ,-------- beq.w 15d34 <unlinkVar+0xc8>
   15c80:	            |         moveq #10,d1
   15c82:	            |         cmp.l d0,d1
   15c84:	,-----------|-------- bcs.w 15da8 <unlinkVar+0x13c>
   15c88:	|           |         moveq #8,d1
   15c8a:	|           |         cmp.l d0,d1
   15c8c:	|  ,--------|-------- beq.w 15d94 <unlinkVar+0x128>
   15c90:	|  |        |         moveq #8,d1
   15c92:	|  |        |         cmp.l d0,d1
   15c94:	+--|--------|-------- bcs.w 15da8 <unlinkVar+0x13c>
   15c98:	|  |        |         moveq #3,d1
   15c9a:	|  |        |         cmp.l d0,d1
   15c9c:	|  |        |     ,-- beq.s 15ca8 <unlinkVar+0x3c>
   15c9e:	|  |        |     |   moveq #6,d1
   15ca0:	|  |        |     |   cmp.l d0,d1
   15ca2:	|  |        |  ,--|-- beq.s 15cce <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   15ca4:	+--|--------|--|--|-- bra.w 15da8 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   15ca8:	|  |        |  |  '-> movea.l 24(sp),a0
   15cac:	|  |        |  |      move.l 4(a0),4(sp)
   15cb2:	|  |        |  |      move.l 1e876 <SysBase>,d0
   15cb8:	|  |        |  |      movea.l d0,a6
   15cba:	|  |        |  |      movea.l 4(sp),a1
   15cbe:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   15cc2:	|  |        |  |      movea.l 24(sp),a0
   15cc6:	|  |        |  |      clr.l 4(a0)
		break;
   15cca:	|  |  ,-----|--|----- bra.w 15db2 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   15cce:	|  |  |     |  '----> movea.l 24(sp),a0
   15cd2:	|  |  |     |         movea.l 4(a0),a0
   15cd6:	|  |  |     |         move.l 8(a0),d0
   15cda:	|  |  |     |         subq.l #1,d0
   15cdc:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15ce0:	|  |  |     |         movea.l 24(sp),a0
   15ce4:	|  |  |     |         movea.l 4(a0),a0
   15ce8:	|  |  |     |         move.l 8(a0),d0
   15cec:	|  |  |  ,--|-------- bgt.w 15dac <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   15cf0:	|  |  |  |  |     ,-- bra.s 15d04 <unlinkVar+0x98>
   15cf2:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15cf6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15cfa:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15cfc:	|  |  |  |  |  |  |   jsr 163a2 <trimStack>
   15d02:	|  |  |  |  |  |  |   addq.l #4,sp
   15d04:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15d08:	|  |  |  |  |  |      movea.l 4(a0),a0
   15d0c:	|  |  |  |  |  |      move.l (a0),d0
   15d0e:	|  |  |  |  |  '----- bne.s 15cf2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   15d10:	|  |  |  |  |         movea.l 24(sp),a0
   15d14:	|  |  |  |  |         move.l 4(a0),8(sp)
   15d1a:	|  |  |  |  |         move.l 1e876 <SysBase>,d0
   15d20:	|  |  |  |  |         movea.l d0,a6
   15d22:	|  |  |  |  |         movea.l 8(sp),a1
   15d26:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   15d2a:	|  |  |  |  |         movea.l 24(sp),a0
   15d2e:	|  |  |  |  |         clr.l 4(a0)
		break;
   15d32:	|  |  |  +--|-------- bra.s 15dac <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   15d34:	|  |  |  |  '-------> movea.l 24(sp),a0
   15d38:	|  |  |  |            movea.l 4(a0),a0
   15d3c:	|  |  |  |            move.l 8(a0),d0
   15d40:	|  |  |  |            subq.l #1,d0
   15d42:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15d46:	|  |  |  |            movea.l 24(sp),a0
   15d4a:	|  |  |  |            movea.l 4(a0),a0
   15d4e:	|  |  |  |            move.l 8(a0),d0
   15d52:	|  |  |  |        ,-- bgt.s 15db0 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   15d54:	|  |  |  |        |   movea.l 24(sp),a0
   15d58:	|  |  |  |        |   movea.l 4(a0),a0
   15d5c:	|  |  |  |        |   move.l (a0),16(sp)
   15d60:	|  |  |  |        |   move.l 1e876 <SysBase>,d0
   15d66:	|  |  |  |        |   movea.l d0,a6
   15d68:	|  |  |  |        |   movea.l 16(sp),a1
   15d6c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   15d70:	|  |  |  |        |   movea.l 24(sp),a0
   15d74:	|  |  |  |        |   move.l 4(a0),12(sp)
   15d7a:	|  |  |  |        |   move.l 1e876 <SysBase>,d0
   15d80:	|  |  |  |        |   movea.l d0,a6
   15d82:	|  |  |  |        |   movea.l 12(sp),a1
   15d86:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15d8a:	|  |  |  |        |   movea.l 24(sp),a0
   15d8e:	|  |  |  |        |   clr.l 4(a0)
		break;
   15d92:	|  |  |  |        +-- bra.s 15db0 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   15d94:	|  '--|--|--------|-> movea.l 24(sp),a0
   15d98:	|     |  |        |   move.l 4(a0),d0
   15d9c:	|     |  |        |   move.l d0,-(sp)
   15d9e:	|     |  |        |   jsr a2c8 <deleteAnim>
   15da4:	|     |  |        |   addq.l #4,sp
		break;
   15da6:	|     +--|--------|-- bra.s 15db2 <unlinkVar+0x146>
		break;
   15da8:	'-----|--|--------|-> nop
   15daa:	      +--|--------|-- bra.s 15db2 <unlinkVar+0x146>
		break;
   15dac:	      |  '--------|-> nop
   15dae:	      +-----------|-- bra.s 15db2 <unlinkVar+0x146>
		break;
   15db0:	      |           '-> nop
	}
}
   15db2:	      '-------------> nop
   15db4:	                      movea.l (sp)+,a6
   15db6:	                      lea 16(sp),sp
   15dba:	                      rts

00015dbc <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15dbc:	       movea.l 4(sp),a0
   15dc0:	       move.l (a0),d0
   15dc2:	       movea.l 8(sp),a0
   15dc6:	       move.l d0,(a0)
	switch (to->varType) {
   15dc8:	       movea.l 8(sp),a0
   15dcc:	       move.l (a0),d0
   15dce:	       moveq #10,d1
   15dd0:	       cmp.l d0,d1
   15dd2:	,----- bcs.w 15ec4 <copyMain+0x108>
   15dd6:	|      add.l d0,d0
   15dd8:	|      movea.l d0,a0
   15dda:	|      adda.l #89574,a0
   15de0:	|      move.w (a0),d0
   15de2:	|      jmp (15de6 <copyMain+0x2a>,pc,d0.w)
   15de6:	|      .short 0x00da
   15de8:	|      ori.b #22,(a6)
   15dec:	|      ori.w #22,(a4)
   15df0:	|      ori.b #-126,(a6)
   15df4:	|      ori.b #-68,(a6)
   15df8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   15e00:	|      move.l 4(a0),d0
   15e04:	|      movea.l 8(sp),a0
   15e08:	|      move.l d0,4(a0)
		return TRUE;
   15e0c:	|      moveq #1,d0
   15e0e:	|  ,-- bra.w 15ed6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   15e12:	|  |   movea.l 4(sp),a0
   15e16:	|  |   move.l 4(a0),d0
   15e1a:	|  |   movea.l 8(sp),a0
   15e1e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   15e22:	|  |   movea.l 8(sp),a0
   15e26:	|  |   movea.l 4(a0),a0
   15e2a:	|  |   move.l 8(a0),d0
   15e2e:	|  |   addq.l #1,d0
   15e30:	|  |   move.l d0,8(a0)
		return TRUE;
   15e34:	|  |   moveq #1,d0
   15e36:	|  +-- bra.w 15ed6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   15e3a:	|  |   movea.l 4(sp),a0
   15e3e:	|  |   move.l 4(a0),d0
   15e42:	|  |   move.l d0,-(sp)
   15e44:	|  |   jsr b8 <copyString>
   15e4a:	|  |   addq.l #4,sp
   15e4c:	|  |   movea.l 8(sp),a0
   15e50:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15e54:	|  |   movea.l 8(sp),a0
   15e58:	|  |   move.l 4(a0),d0
   15e5c:	|  |   sne d0
   15e5e:	|  |   neg.b d0
   15e60:	|  |   move.b d0,d0
   15e62:	|  |   andi.w #255,d0
   15e66:	|  +-- bra.s 15ed6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15e68:	|  |   movea.l 4(sp),a0
   15e6c:	|  |   move.l 4(a0),d0
   15e70:	|  |   movea.l 8(sp),a0
   15e74:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15e78:	|  |   movea.l 8(sp),a0
   15e7c:	|  |   movea.l 4(a0),a0
   15e80:	|  |   move.l 8(a0),d0
   15e84:	|  |   addq.l #1,d0
   15e86:	|  |   move.l d0,8(a0)
		return TRUE;
   15e8a:	|  |   moveq #1,d0
   15e8c:	|  +-- bra.s 15ed6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15e8e:	|  |   movea.l 4(sp),a0
   15e92:	|  |   move.l 4(a0),d0
   15e96:	|  |   movea.l 8(sp),a0
   15e9a:	|  |   move.l d0,4(a0)
		return TRUE;
   15e9e:	|  |   moveq #1,d0
   15ea0:	|  +-- bra.s 15ed6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   15ea2:	|  |   movea.l 4(sp),a0
   15ea6:	|  |   move.l 4(a0),d0
   15eaa:	|  |   move.l d0,-(sp)
   15eac:	|  |   jsr 9efc <copyAnim>
   15eb2:	|  |   addq.l #4,sp
   15eb4:	|  |   movea.l 8(sp),a0
   15eb8:	|  |   move.l d0,4(a0)
		return TRUE;
   15ebc:	|  |   moveq #1,d0
   15ebe:	|  +-- bra.s 15ed6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15ec0:	|  |   moveq #1,d0
   15ec2:	|  +-- bra.s 15ed6 <copyMain+0x11a>

		default:
		break;
   15ec4:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15ec6:	   |   pea 1bea9 <talk.c.490538ff+0x7d5>
   15ecc:	   |   jsr 184fe <KPrintF>
   15ed2:	   |   addq.l #4,sp
	return FALSE;
   15ed4:	   |   clr.w d0
}
   15ed6:	   '-> rts

00015ed8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15ed8:	move.l 8(sp),-(sp)
   15edc:	jsr 15c6c <unlinkVar>
   15ee2:	addq.l #4,sp
	return copyMain(from, to);
   15ee4:	move.l 8(sp),-(sp)
   15ee8:	move.l 8(sp),-(sp)
   15eec:	jsr 15dbc <copyMain>
   15ef2:	addq.l #8,sp
}
   15ef4:	rts

00015ef6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15ef6:	       movea.l 4(sp),a0
   15efa:	       move.l (a0),d0
   15efc:	       moveq #8,d1
   15efe:	       cmp.l d0,d1
   15f00:	   ,-- bne.s 15f16 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   15f02:	   |   movea.l 4(sp),a0
   15f06:	   |   move.l 4(a0),d0
   15f0a:	   |   move.l d0,-(sp)
   15f0c:	   |   jsr 9efc <copyAnim>
   15f12:	   |   addq.l #4,sp
   15f14:	,--|-- bra.s 15f5c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15f16:	|  '-> movea.l 4(sp),a0
   15f1a:	|      move.l (a0),d0
   15f1c:	|      moveq #1,d1
   15f1e:	|      cmp.l d0,d1
   15f20:	|  ,-- bne.s 15f34 <getAnimationFromVar+0x3e>
   15f22:	|  |   movea.l 4(sp),a0
   15f26:	|  |   move.l 4(a0),d0
   15f2a:	|  +-- bne.s 15f34 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   15f2c:	|  |   jsr b72e <makeNullAnim>
   15f32:	+--|-- bra.s 15f5c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15f34:	|  '-> movea.l 4(sp),a0
   15f38:	|      move.l (a0),d0
   15f3a:	|      add.l d0,d0
   15f3c:	|      movea.l d0,a1
   15f3e:	|      adda.l d0,a1
   15f40:	|      lea 1e742 <typeName>,a0
   15f46:	|      move.l (0,a1,a0.l),d0
   15f4a:	|      move.l d0,-(sp)
   15f4c:	|      pea 1bd95 <talk.c.490538ff+0x6c1>
   15f52:	|      jsr 184fe <KPrintF>
   15f58:	|      addq.l #8,sp
	return NULL;
   15f5a:	|      moveq #0,d0
}
   15f5c:	'----> rts

00015f5e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   15f5e:	       movea.l 4(sp),a0
   15f62:	       move.l (a0),d0
   15f64:	       moveq #10,d1
   15f66:	       cmp.l d0,d1
   15f68:	,----- bcs.w 15fee <getBoolean+0x90>
   15f6c:	|      add.l d0,d0
   15f6e:	|      movea.l d0,a0
   15f70:	|      adda.l #89980,a0
   15f76:	|      move.w (a0),d0
   15f78:	|      jmp (15f7c <getBoolean+0x1e>,pc,d0.w)
   15f7c:	|      ori.b #26,(a6)
   15f80:	|      ori.w #68,(114,a2,d0.w)
   15f86:	|      ori.w #46,(114,a2,d0.w)
   15f8c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   15f92:	|      clr.w d0
   15f94:	|  ,-- bra.s 15ff2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15f96:	|  |   movea.l 4(sp),a0
   15f9a:	|  |   move.l 4(a0),d0
   15f9e:	|  |   sne d0
   15fa0:	|  |   neg.b d0
   15fa2:	|  |   move.b d0,d0
   15fa4:	|  |   andi.w #255,d0
   15fa8:	|  +-- bra.s 15ff2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   15faa:	|  |   movea.l 4(sp),a0
   15fae:	|  |   movea.l 4(a0),a0
   15fb2:	|  |   move.l (a0),d0
   15fb4:	|  |   sne d0
   15fb6:	|  |   neg.b d0
   15fb8:	|  |   move.b d0,d0
   15fba:	|  |   andi.w #255,d0
   15fbe:	|  +-- bra.s 15ff2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   15fc0:	|  |   movea.l 4(sp),a0
   15fc4:	|  |   movea.l 4(a0),a0
   15fc8:	|  |   move.b (a0),d0
   15fca:	|  |   sne d0
   15fcc:	|  |   neg.b d0
   15fce:	|  |   move.b d0,d0
   15fd0:	|  |   andi.w #255,d0
   15fd4:	|  +-- bra.s 15ff2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15fd6:	|  |   movea.l 4(sp),a0
   15fda:	|  |   movea.l 4(a0),a0
   15fde:	|  |   move.l 4(a0),d0
   15fe2:	|  |   sne d0
   15fe4:	|  |   neg.b d0
   15fe6:	|  |   move.b d0,d0
   15fe8:	|  |   andi.w #255,d0
   15fec:	|  +-- bra.s 15ff2 <getBoolean+0x94>

		default:
		break;
   15fee:	'--|-> nop
	}
	return TRUE;
   15ff0:	   |   moveq #1,d0
}
   15ff2:	   '-> rts

00015ff4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   15ff4:	      ,----------> lea -76(sp),sp
   15ff8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   15ffa:	      |            movea.l 84(sp),a0
   15ffe:	      |            move.l (a0),d0
   16000:	      |            moveq #10,d1
   16002:	      |            cmp.l d0,d1
   16004:	,-----|----------- bcs.w 162a2 <getTextFromAnyVar+0x2ae>
   16008:	|     |            add.l d0,d0
   1600a:	|     |            movea.l d0,a0
   1600c:	|     |            adda.l #90136,a0
   16012:	|     |            move.w (a0),d0
   16014:	|     |            jmp (16018 <getTextFromAnyVar+0x24>,pc,d0.w)
   16018:	|     |            .short 0x028a
   1601a:	|     |            bset d0,(a0)+
   1601c:	|     |            .short 0x028a
   1601e:	|     |            ori.b #-118,(a6)
   16022:	|     |            andi.b #8,ccr
   16026:	|     |            andi.w #650,-(a0)
   1602a:	|     |            .short 0x028a
   1602c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   16032:	|     |            move.l 4(a0),d0
   16036:	|     |            move.l d0,-(sp)
   16038:	|     |            jsr b8 <copyString>
   1603e:	|     |            addq.l #4,sp
   16040:	|  ,--|----------- bra.w 162c4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   16044:	|  |  |            pea 1bebc <talk.c.490538ff+0x7e8>
   1604a:	|  |  |            jsr b8 <copyString>
   16050:	|  |  |            addq.l #4,sp
   16052:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   16056:	|  |  |            clr.l 72(sp)
   1605a:	|  |  |     ,----- bra.w 16104 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1605e:	|  |  |  ,--|----> pea 1bec2 <talk.c.490538ff+0x7ee>
   16064:	|  |  |  |  |      move.l 80(sp),-(sp)
   16068:	|  |  |  |  |      jsr 14f4a <joinStrings>
   1606e:	|  |  |  |  |      addq.l #8,sp
   16070:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   16074:	|  |  |  |  |  ,-- bne.s 1607c <getTextFromAnyVar+0x88>
   16076:	|  |  |  |  |  |   moveq #0,d0
   16078:	|  +--|--|--|--|-- bra.w 162c4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1607c:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   16082:	|  |  |  |  |      move.l 1e876 <SysBase>,d0
   16088:	|  |  |  |  |      movea.l d0,a6
   1608a:	|  |  |  |  |      movea.l 56(sp),a1
   1608e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   16092:	|  |  |  |  |      movea.l 84(sp),a0
   16096:	|  |  |  |  |      movea.l 4(a0),a0
   1609a:	|  |  |  |  |      move.l (a0),d1
   1609c:	|  |  |  |  |      move.l 72(sp),d0
   160a0:	|  |  |  |  |      lsl.l #3,d0
   160a2:	|  |  |  |  |      add.l d1,d0
   160a4:	|  |  |  |  |      move.l d0,-(sp)
   160a6:	|  |  +--|--|----- jsr 15ff4 <getTextFromAnyVar>(pc)
   160aa:	|  |  |  |  |      addq.l #4,sp
   160ac:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   160b0:	|  |  |  |  |      move.l 52(sp),-(sp)
   160b4:	|  |  |  |  |      move.l 64(sp),-(sp)
   160b8:	|  |  |  |  |      jsr 14f4a <joinStrings>
   160be:	|  |  |  |  |      addq.l #8,sp
   160c0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   160c4:	|  |  |  |  |  ,-- bne.s 160cc <getTextFromAnyVar+0xd8>
   160c6:	|  |  |  |  |  |   moveq #0,d0
   160c8:	|  +--|--|--|--|-- bra.w 162c4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   160cc:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   160d2:	|  |  |  |  |      move.l 1e876 <SysBase>,d0
   160d8:	|  |  |  |  |      movea.l d0,a6
   160da:	|  |  |  |  |      movea.l 48(sp),a1
   160de:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   160e2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   160e6:	|  |  |  |  |      move.l 60(sp),44(sp)
   160ec:	|  |  |  |  |      move.l 1e876 <SysBase>,d0
   160f2:	|  |  |  |  |      movea.l d0,a6
   160f4:	|  |  |  |  |      movea.l 44(sp),a1
   160f8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   160fc:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   16100:	|  |  |  |  |      addq.l #1,72(sp)
   16104:	|  |  |  |  '----> movea.l 84(sp),a0
   16108:	|  |  |  |         movea.l 4(a0),a0
   1610c:	|  |  |  |         move.l 4(a0),d0
   16110:	|  |  |  |         cmp.l 72(sp),d0
   16114:	|  |  |  '-------- bgt.w 1605e <getTextFromAnyVar+0x6a>
			}
			return builder;
   16118:	|  |  |            move.l 76(sp),d0
   1611c:	|  +--|----------- bra.w 162c4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   16120:	|  |  |            pea 1bec4 <talk.c.490538ff+0x7f0>
   16126:	|  |  |            jsr b8 <copyString>
   1612c:	|  |  |            addq.l #4,sp
   1612e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   16132:	|  |  |            movea.l 84(sp),a0
   16136:	|  |  |            movea.l 4(a0),a0
   1613a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1613e:	|  |  |     ,----- bra.w 161e0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   16142:	|  |  |  ,--|----> pea 1bec2 <talk.c.490538ff+0x7ee>
   16148:	|  |  |  |  |      move.l 72(sp),-(sp)
   1614c:	|  |  |  |  |      jsr 14f4a <joinStrings>
   16152:	|  |  |  |  |      addq.l #8,sp
   16154:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   16158:	|  |  |  |  |  ,-- bne.s 16160 <getTextFromAnyVar+0x16c>
   1615a:	|  |  |  |  |  |   moveq #0,d0
   1615c:	|  +--|--|--|--|-- bra.w 162c4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   16160:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   16166:	|  |  |  |  |      move.l 1e876 <SysBase>,d0
   1616c:	|  |  |  |  |      movea.l d0,a6
   1616e:	|  |  |  |  |      movea.l 32(sp),a1
   16172:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   16176:	|  |  |  |  |      move.l 64(sp),d0
   1617a:	|  |  |  |  |      move.l d0,-(sp)
   1617c:	|  |  '--|--|----- jsr 15ff4 <getTextFromAnyVar>(pc)
   16180:	|  |     |  |      addq.l #4,sp
   16182:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   16186:	|  |     |  |      move.l 28(sp),-(sp)
   1618a:	|  |     |  |      move.l 40(sp),-(sp)
   1618e:	|  |     |  |      jsr 14f4a <joinStrings>
   16194:	|  |     |  |      addq.l #8,sp
   16196:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1619a:	|  |     |  |  ,-- bne.s 161a2 <getTextFromAnyVar+0x1ae>
   1619c:	|  |     |  |  |   moveq #0,d0
   1619e:	|  +-----|--|--|-- bra.w 162c4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   161a2:	|  |     |  |  '-> move.l 28(sp),24(sp)
   161a8:	|  |     |  |      move.l 1e876 <SysBase>,d0
   161ae:	|  |     |  |      movea.l d0,a6
   161b0:	|  |     |  |      movea.l 24(sp),a1
   161b4:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   161b8:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   161bc:	|  |     |  |      move.l 36(sp),20(sp)
   161c2:	|  |     |  |      move.l 1e876 <SysBase>,d0
   161c8:	|  |     |  |      movea.l d0,a6
   161ca:	|  |     |  |      movea.l 20(sp),a1
   161ce:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   161d2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   161d6:	|  |     |  |      movea.l 64(sp),a0
   161da:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   161e0:	|  |     |  '----> tst.l 64(sp)
   161e4:	|  |     '-------- bne.w 16142 <getTextFromAnyVar+0x14e>
			}
			return builder;
   161e8:	|  |               move.l 68(sp),d0
   161ec:	|  +-------------- bra.w 162c4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   161f0:	|  |               moveq #10,d0
   161f2:	|  |               move.l d0,16(sp)
   161f6:	|  |               clr.l 12(sp)
   161fa:	|  |               move.l 1e876 <SysBase>,d0
   16200:	|  |               movea.l d0,a6
   16202:	|  |               move.l 16(sp),d0
   16206:	|  |               move.l 12(sp),d1
   1620a:	|  |               jsr -684(a6)
   1620e:	|  |               move.l d0,8(sp)
   16212:	|  |               move.l 8(sp),d0
   16216:	|  |               move.l d0,4(sp)
			if (! buff) {
   1621a:	|  |           ,-- bne.s 16230 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1621c:	|  |           |   pea 1becb <talk.c.490538ff+0x7f7>
   16222:	|  |           |   jsr 184fe <KPrintF>
   16228:	|  |           |   addq.l #4,sp
				return NULL;
   1622a:	|  |           |   moveq #0,d0
   1622c:	|  +-----------|-- bra.w 162c4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   16230:	|  |           '-> movea.l 84(sp),a0
   16234:	|  |               move.l 4(a0),d0
   16238:	|  |               move.l d0,-(sp)
   1623a:	|  |               pea 1bef5 <talk.c.490538ff+0x821>
   16240:	|  |               move.l 12(sp),-(sp)
   16244:	|  |               jsr 15228 <sprintf>
   1624a:	|  |               lea 12(sp),sp
			return buff;
   1624e:	|  |               move.l 4(sp),d0
   16252:	|  +-------------- bra.s 162c4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   16254:	|  |               movea.l 84(sp),a0
   16258:	|  |               move.l 4(a0),d0
   1625c:	|  |               move.l d0,-(sp)
   1625e:	|  |               jsr 4f08 <resourceNameFromNum>
   16264:	|  |               addq.l #4,sp
   16266:	|  |               move.l d0,-(sp)
   16268:	|  |               pea 19d49 <PutChar+0xda9>
   1626e:	|  |               jsr 14f4a <joinStrings>
   16274:	|  |               addq.l #8,sp
   16276:	|  +-------------- bra.s 162c4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   16278:	|  |               movea.l 84(sp),a0
   1627c:	|  |               move.l 4(a0),d0
   16280:	|  |               move.l d0,-(sp)
   16282:	|  |               jsr df58 <findObjectType>
   16288:	|  |               addq.l #4,sp
   1628a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1628e:	+--|-------------- beq.s 162a2 <getTextFromAnyVar+0x2ae>
   16290:	|  |               movea.l 40(sp),a0
   16294:	|  |               move.l (a0),d0
   16296:	|  |               move.l d0,-(sp)
   16298:	|  |               jsr b8 <copyString>
   1629e:	|  |               addq.l #4,sp
   162a0:	|  +-------------- bra.s 162c4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   162a2:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   162a4:	   |               movea.l 84(sp),a0
   162a8:	   |               move.l (a0),d0
   162aa:	   |               add.l d0,d0
   162ac:	   |               movea.l d0,a1
   162ae:	   |               adda.l d0,a1
   162b0:	   |               lea 1e742 <typeName>,a0
   162b6:	   |               move.l (0,a1,a0.l),d0
   162ba:	   |               move.l d0,-(sp)
   162bc:	   |               jsr b8 <copyString>
   162c2:	   |               addq.l #4,sp
}
   162c4:	   '-------------> movea.l (sp)+,a6
   162c6:	                   lea 76(sp),sp
   162ca:	                   rts

000162cc <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   162cc:	move.l 4(sp),-(sp)
   162d0:	jsr 15c6c <unlinkVar>
   162d6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   162d8:	movea.l 4(sp),a0
   162dc:	moveq #8,d0
   162de:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   162e0:	movea.l 4(sp),a0
   162e4:	move.l 8(sp),4(a0)
}
   162ea:	nop
   162ec:	rts

000162ee <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   162ee:	move.l 4(sp),-(sp)
   162f2:	jsr 15c6c <unlinkVar>
   162f8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   162fa:	movea.l 4(sp),a0
   162fe:	moveq #9,d0
   16300:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   16302:	movea.l 4(sp),a0
   16306:	move.l 8(sp),4(a0)
}
   1630c:	nop
   1630e:	rts

00016310 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   16310:	move.l 4(sp),-(sp)
   16314:	jsr 15c6c <unlinkVar>
   1631a:	addq.l #4,sp
   1631c:	movea.l 4(sp),a0
   16320:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   16324:	movea.l 4(sp),a0
   16328:	move.l 12(sp),4(a0)
   1632e:	nop
   16330:	rts

00016332 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   16332:	      ,-- bra.s 16344 <stackGetByIndex+0x12>
        vS = vS->next;
   16334:	,-----|-> movea.l 4(sp),a0
   16338:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1633e:	|     +-- bne.s 16344 <stackGetByIndex+0x12>
            return NULL;
   16340:	|     |   moveq #0,d0
   16342:	|  ,--|-- bra.s 16358 <stackGetByIndex+0x26>
    while (theIndex--) {
   16344:	|  |  '-> move.l 8(sp),d0
   16348:	|  |      move.l d0,d1
   1634a:	|  |      subq.l #1,d1
   1634c:	|  |      move.l d1,8(sp)
   16350:	|  |      tst.l d0
   16352:	'--|----- bne.s 16334 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   16354:	   |      move.l 4(sp),d0
}
   16358:	   '----> rts

0001635a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1635a:	          tst.l 4(sp)
   1635e:	      ,-- bne.s 1636e <stackFindLast+0x14>
		return NULL;
   16360:	      |   moveq #0,d0
   16362:	,-----|-- bra.s 1637c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   16364:	|  ,--|-> movea.l 4(sp),a0
   16368:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1636e:	|  |  '-> movea.l 4(sp),a0
   16372:	|  |      move.l 8(a0),d0
   16376:	|  '----- bne.s 16364 <stackFindLast+0xa>

	return hunt;
   16378:	|         move.l 4(sp),d0
}
   1637c:	'-------> rts

0001637e <stackSize>:

int stackSize (const struct stackHandler * me) {
   1637e:	       subq.l #8,sp
	int r = 0;
   16380:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   16384:	       movea.l 12(sp),a0
   16388:	       move.l (a0),(sp)
	while (a) {
   1638a:	   ,-- bra.s 16396 <stackSize+0x18>
		r ++;
   1638c:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   16390:	|  |   movea.l (sp),a0
   16392:	|  |   move.l 8(a0),(sp)
	while (a) {
   16396:	|  '-> tst.l (sp)
   16398:	'----- bne.s 1638c <stackSize+0xe>
	}
	return r;
   1639a:	       move.l 4(sp),d0
}
   1639e:	       addq.l #8,sp
   163a0:	       rts

000163a2 <trimStack>:

void trimStack (struct variableStack ** stack) {
   163a2:	subq.l #8,sp
   163a4:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   163a6:	movea.l 16(sp),a0
   163aa:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   163ae:	movea.l 16(sp),a0
   163b2:	movea.l (a0),a0
   163b4:	move.l 8(a0),d0
   163b8:	movea.l 16(sp),a0
   163bc:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   163be:	move.l 8(sp),d0
   163c2:	move.l d0,-(sp)
   163c4:	jsr 15c6c <unlinkVar>
   163ca:	addq.l #4,sp
	FreeVec(killMe);
   163cc:	move.l 8(sp),4(sp)
   163d2:	move.l 1e876 <SysBase>,d0
   163d8:	movea.l d0,a6
   163da:	movea.l 4(sp),a1
   163de:	jsr -690(a6)
   163e2:	nop
   163e4:	movea.l (sp)+,a6
   163e6:	addq.l #8,sp
   163e8:	rts

000163ea <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   163ea:	       lea -52(sp),sp
   163ee:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   163f0:	       pea 1bef8 <talk.c.490538ff+0x824>
   163f6:	       jsr 184fe <KPrintF>
   163fc:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   163fe:	       moveq #68,d0
   16400:	       move.l d0,52(sp)
   16404:	       clr.l 48(sp)
   16408:	       move.l 1e876 <SysBase>,d0
   1640e:	       movea.l d0,a6
   16410:	       move.l 52(sp),d0
   16414:	       move.l 48(sp),d1
   16418:	       jsr -684(a6)
   1641c:	       move.l d0,44(sp)
   16420:	       move.l 44(sp),d0
   16424:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   16428:	   ,-- bne.s 16430 <freeze+0x46>
   1642a:	   |   clr.w d0
   1642c:	,--|-- bra.w 165c2 <freeze+0x1d8>

	CstFreeze();
   16430:	|  '-> jsr 1c5e <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   16436:	|      move.l 1e912 <sceneWidth>,d0
   1643c:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   16440:	|      move.l 1e916 <sceneHeight>,d0
   16446:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1644a:	|      move.l 1e912 <sceneWidth>,d0
   16450:	|      movea.l 40(sp),a0
   16454:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   16458:	|      move.l 1e916 <sceneHeight>,d0
   1645e:	|      movea.l 40(sp),a0
   16462:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   16466:	|      move.l 1e930 <cameraX>,d0
   1646c:	|      movea.l 40(sp),a0
   16470:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   16474:	|      move.l 1e934 <cameraY>,d0
   1647a:	|      movea.l 40(sp),a0
   1647e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   16482:	|      move.l 1e1fc <cameraZoom>,d0
   16488:	|      movea.l 40(sp),a0
   1648c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   16490:	|      move.w #1,1e91e <backdropExists>

	newFreezer -> allPeople = allPeople;
   16498:	|      move.l 1e8da <allPeople>,d0
   1649e:	|      movea.l 40(sp),a0
   164a2:	|      move.l d0,(a0)
	allPeople = NULL;
   164a4:	|      clr.l 1e8da <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   164aa:	|      moveq #42,d0
   164ac:	|      move.l d0,28(sp)
   164b0:	|      clr.l 24(sp)
   164b4:	|      move.l 1e876 <SysBase>,d0
   164ba:	|      movea.l d0,a6
   164bc:	|      move.l 28(sp),d0
   164c0:	|      move.l 24(sp),d1
   164c4:	|      jsr -684(a6)
   164c8:	|      move.l d0,20(sp)
   164cc:	|      move.l 20(sp),d0
   164d0:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   164d4:	|  ,-- bne.s 164dc <freeze+0xf2>
   164d6:	|  |   clr.w d0
   164d8:	+--|-- bra.w 165c2 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   164dc:	|  '-> move.l 1e986 <allScreenRegions>,d0
   164e2:	|      movea.l 40(sp),a0
   164e6:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   164ea:	|      clr.l 1e986 <allScreenRegions>
	overRegion = NULL;
   164f0:	|      clr.l 1e98a <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   164f6:	|      move.l 1e76c <mouseCursorAnim>,d0
   164fc:	|      movea.l 40(sp),a0
   16500:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   16504:	|      move.l 1e770 <mouseCursorFrameNum>,d0
   1650a:	|      movea.l 40(sp),a0
   1650e:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   16512:	|      jsr b72e <makeNullAnim>
   16518:	|      move.l d0,1e76c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1651e:	|      clr.l 1e770 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   16524:	|      move.l 1e8d6 <zBuffer>,d0
   1652a:	|      movea.l 40(sp),a0
   1652e:	|      move.l d0,60(a0)
	zBuffer = NULL;
   16532:	|      clr.l 1e8d6 <zBuffer>

	newFreezer -> speech = speech;
   16538:	|      move.l 1e7b8 <speech>,d0
   1653e:	|      movea.l 40(sp),a0
   16542:	|      move.l d0,20(a0)
	initSpeech ();
   16546:	|      jsr 43fe <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1654c:	|      move.l 1e1da <currentEvents>,d0
   16552:	|      movea.l 40(sp),a0
   16556:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1655a:	|      moveq #28,d0
   1655c:	|      move.l d0,12(sp)
   16560:	|      clr.l 8(sp)
   16564:	|      move.l 1e876 <SysBase>,d0
   1656a:	|      movea.l d0,a6
   1656c:	|      move.l 12(sp),d0
   16570:	|      move.l 8(sp),d1
   16574:	|      jsr -684(a6)
   16578:	|      move.l d0,4(sp)
   1657c:	|      move.l 4(sp),d0
   16580:	|      move.l d0,1e1da <currentEvents>
	if (!currentEvents) return FALSE;
   16586:	|      move.l 1e1da <currentEvents>,d0
   1658c:	|  ,-- bne.s 16592 <freeze+0x1a8>
   1658e:	|  |   clr.w d0
   16590:	+--|-- bra.s 165c2 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   16592:	|  '-> move.l 1e1da <currentEvents>,d0
   16598:	|      pea 1c <_start+0x1c>
   1659c:	|      clr.l -(sp)
   1659e:	|      move.l d0,-(sp)
   165a0:	|      jsr 18482 <memset>
   165a6:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   165aa:	|      move.l 1e96a <frozenStuff>,d0
   165b0:	|      movea.l 40(sp),a0
   165b4:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   165b8:	|      move.l 40(sp),1e96a <frozenStuff>

	return TRUE;
   165c0:	|      moveq #1,d0
}
   165c2:	'----> movea.l (sp)+,a6
   165c4:	       lea 52(sp),sp
   165c8:	       rts

000165ca <howFrozen>:

int howFrozen () {
   165ca:	       subq.l #8,sp
	int a = 0;
   165cc:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   165d0:	       move.l 1e96a <frozenStuff>,(sp)
	while (f) {
   165d6:	   ,-- bra.s 165e2 <howFrozen+0x18>
		a ++;
   165d8:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   165dc:	|  |   movea.l (sp),a0
   165de:	|  |   move.l 64(a0),(sp)
	while (f) {
   165e2:	|  '-> tst.l (sp)
   165e4:	'----- bne.s 165d8 <howFrozen+0xe>
	}
	return a;
   165e6:	       move.l 4(sp),d0
}
   165ea:	       addq.l #8,sp
   165ec:	       rts

000165ee <unfreeze>:

void unfreeze () {
   165ee:	       lea -16(sp),sp
   165f2:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   165f4:	       move.l 1e96a <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   165fc:	       move.l 1e96a <frozenStuff>,d0
   16602:	,----- beq.w 1683a <unfreeze+0x24c>

	CstUnfreeze();
   16606:	|      jsr 3fa8 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1660c:	|      movea.l 1e96a <frozenStuff>,a0
   16612:	|      move.l 48(a0),d0
   16616:	|      move.l d0,1e912 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1661c:	|      movea.l 1e96a <frozenStuff>,a0
   16622:	|      move.l 52(a0),d0
   16626:	|      move.l d0,1e916 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1662c:	|      movea.l 1e96a <frozenStuff>,a0
   16632:	|      move.l 40(a0),d0
   16636:	|      move.l d0,1e930 <cameraX>
	cameraY = frozenStuff -> cameraY;
   1663c:	|      movea.l 1e96a <frozenStuff>,a0
   16642:	|      move.l 44(a0),d0
   16646:	|      move.l d0,1e934 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1664c:	|      move.l 1e830 <input+0xa>,d0
   16652:	|      move.l d0,-(sp)
   16654:	|      jsr 18930 <__floatsisf>
   1665a:	|      addq.l #4,sp
   1665c:	|      move.l d0,d1
   1665e:	|      move.l 1e1fc <cameraZoom>,d0
   16664:	|      move.l d0,-(sp)
   16666:	|      move.l d1,-(sp)
   16668:	|      jsr 189e2 <__mulsf3>
   1666e:	|      addq.l #8,sp
   16670:	|      move.l d0,-(sp)
   16672:	|      jsr 188c8 <__fixsfsi>
   16678:	|      addq.l #4,sp
   1667a:	|      move.l d0,1e830 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   16680:	|      move.l 1e834 <input+0xe>,d0
   16686:	|      move.l d0,-(sp)
   16688:	|      jsr 18930 <__floatsisf>
   1668e:	|      addq.l #4,sp
   16690:	|      move.l d0,d1
   16692:	|      move.l 1e1fc <cameraZoom>,d0
   16698:	|      move.l d0,-(sp)
   1669a:	|      move.l d1,-(sp)
   1669c:	|      jsr 189e2 <__mulsf3>
   166a2:	|      addq.l #8,sp
   166a4:	|      move.l d0,-(sp)
   166a6:	|      jsr 188c8 <__fixsfsi>
   166ac:	|      addq.l #4,sp
   166ae:	|      move.l d0,1e834 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   166b4:	|      movea.l 1e96a <frozenStuff>,a0
   166ba:	|      move.l 56(a0),d0
   166be:	|      move.l d0,1e1fc <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   166c4:	|      move.l 1e830 <input+0xa>,d0
   166ca:	|      move.l d0,-(sp)
   166cc:	|      jsr 18930 <__floatsisf>
   166d2:	|      addq.l #4,sp
   166d4:	|      move.l d0,d1
   166d6:	|      move.l 1e1fc <cameraZoom>,d0
   166dc:	|      move.l d0,-(sp)
   166de:	|      move.l d1,-(sp)
   166e0:	|      jsr 187e6 <__divsf3>
   166e6:	|      addq.l #8,sp
   166e8:	|      move.l d0,-(sp)
   166ea:	|      jsr 188c8 <__fixsfsi>
   166f0:	|      addq.l #4,sp
   166f2:	|      move.l d0,1e830 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   166f8:	|      move.l 1e834 <input+0xe>,d0
   166fe:	|      move.l d0,-(sp)
   16700:	|      jsr 18930 <__floatsisf>
   16706:	|      addq.l #4,sp
   16708:	|      move.l d0,d1
   1670a:	|      move.l 1e1fc <cameraZoom>,d0
   16710:	|      move.l d0,-(sp)
   16712:	|      move.l d1,-(sp)
   16714:	|      jsr 187e6 <__divsf3>
   1671a:	|      addq.l #8,sp
   1671c:	|      move.l d0,-(sp)
   1671e:	|      jsr 188c8 <__fixsfsi>
   16724:	|      addq.l #4,sp
   16726:	|      move.l d0,1e834 <input+0xe>

	killAllPeople ();
   1672c:	|      jsr b3fe <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   16732:	|      movea.l 1e96a <frozenStuff>,a0
   16738:	|      move.l (a0),d0
   1673a:	|      move.l d0,1e8da <allPeople>

	killAllRegions ();
   16740:	|      jsr 16d0e <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   16746:	|      movea.l 1e96a <frozenStuff>,a0
   1674c:	|      move.l 4(a0),d0
   16750:	|      move.l d0,1e986 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   16756:	|      move.l 1e76c <mouseCursorAnim>,d0
   1675c:	|      move.l d0,-(sp)
   1675e:	|      jsr a2c8 <deleteAnim>
   16764:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   16766:	|      movea.l 1e96a <frozenStuff>,a0
   1676c:	|      move.l 32(a0),d0
   16770:	|      move.l d0,1e76c <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   16776:	|      movea.l 1e96a <frozenStuff>,a0
   1677c:	|      move.l 36(a0),d0
   16780:	|      move.l d0,1e770 <mouseCursorFrameNum>

	killZBuffer ();
   16786:	|      jsr 9054 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1678c:	|      movea.l 1e96a <frozenStuff>,a0
   16792:	|      move.l 60(a0),d0
   16796:	|      move.l d0,1e8d6 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1679c:	|      move.l 1e1da <currentEvents>,d0
   167a2:	|  ,-- beq.s 167bc <unfreeze+0x1ce>
   167a4:	|  |   move.l 1e1da <currentEvents>,12(sp)
   167ac:	|  |   move.l 1e876 <SysBase>,d0
   167b2:	|  |   movea.l d0,a6
   167b4:	|  |   movea.l 12(sp),a1
   167b8:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   167bc:	|  '-> movea.l 1e96a <frozenStuff>,a0
   167c2:	|      move.l 28(a0),d0
   167c6:	|      move.l d0,1e1da <currentEvents>

	killAllSpeech ();
   167cc:	|      jsr 4496 <killAllSpeech>
	if (speech) FreeVec(speech);
   167d2:	|      move.l 1e7b8 <speech>,d0
   167d8:	|  ,-- beq.s 167f2 <unfreeze+0x204>
   167da:	|  |   move.l 1e7b8 <speech>,8(sp)
   167e2:	|  |   move.l 1e876 <SysBase>,d0
   167e8:	|  |   movea.l d0,a6
   167ea:	|  |   movea.l 8(sp),a1
   167ee:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   167f2:	|  '-> movea.l 1e96a <frozenStuff>,a0
   167f8:	|      move.l 20(a0),d0
   167fc:	|      move.l d0,1e7b8 <speech>

	frozenStuff = frozenStuff -> next;
   16802:	|      movea.l 1e96a <frozenStuff>,a0
   16808:	|      move.l 64(a0),d0
   1680c:	|      move.l d0,1e96a <frozenStuff>

	overRegion = NULL;
   16812:	|      clr.l 1e98a <overRegion>
	if (killMe) FreeVec(killMe);
   16818:	|      tst.l 16(sp)
   1681c:	|  ,-- beq.s 16834 <unfreeze+0x246>
   1681e:	|  |   move.l 16(sp),4(sp)
   16824:	|  |   move.l 1e876 <SysBase>,d0
   1682a:	|  |   movea.l d0,a6
   1682c:	|  |   movea.l 4(sp),a1
   16830:	|  |   jsr -690(a6)
	killMe = NULL;
   16834:	|  '-> clr.l 16(sp)
   16838:	|  ,-- bra.s 1683c <unfreeze+0x24e>
	if (! frozenStuff) return;
   1683a:	'--|-> nop
}
   1683c:	   '-> movea.l (sp)+,a6
   1683e:	       lea 16(sp),sp
   16842:	       rts

00016844 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   16844:	pea 1bf0a <talk.c.490538ff+0x836>
   1684a:	jsr 184fe <KPrintF>
   16850:	addq.l #4,sp
	return FALSE;
   16852:	clr.w d0
}
   16854:	rts

00016856 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   16856:	          lea -32(sp),sp
   1685a:	          move.l a6,-(sp)
   1685c:	          move.l d2,-(sp)
	unsigned int a = 0;
   1685e:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   16862:	          move.l 1e976 <fontOrderString>,d0
   16868:	      ,-- beq.s 16882 <loadFont+0x2c>
   1686a:	      |   move.l 1e976 <fontOrderString>,24(sp)
   16872:	      |   move.l 1e876 <SysBase>,d0
   16878:	      |   movea.l d0,a6
   1687a:	      |   movea.l 24(sp),a1
   1687e:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   16882:	      '-> move.l 48(sp),-(sp)
   16886:	          jsr b8 <copyString>
   1688c:	          addq.l #4,sp
   1688e:	          move.l d0,1e976 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   16894:	          move.l 1e982 <theFont>,d0
   1689a:	      ,-- beq.s 168ac <loadFont+0x56>
   1689c:	      |   move.l 1e982 <theFont>,d0
   168a2:	      |   move.l d0,-(sp)
   168a4:	      |   jsr 93ac <forgetSpriteBank>
   168aa:	      |   addq.l #4,sp
	theFont = NULL;
   168ac:	      '-> clr.l 1e982 <theFont>

	loadedFontNum = filenum;
   168b2:	          move.l 44(sp),1e972 <loadedFontNum>

	fontTableSize = 0;
   168ba:	          clr.l 1e97e <fontTableSize>
	char *tmp = charOrder;
   168c0:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   168c6:	   ,----- bra.s 16902 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   168c8:	,--|----> movea.l 32(sp),a0
   168cc:	|  |      move.b (a0),d0
   168ce:	|  |      ext.w d0
   168d0:	|  |      movea.w d0,a0
   168d2:	|  |      move.l 1e97e <fontTableSize>,d0
   168d8:	|  |      move.l d0,d0
   168da:	|  |      move.b d0,d0
   168dc:	|  |      andi.l #255,d0
   168e2:	|  |      cmp.l a0,d0
   168e4:	|  |  ,-- bge.s 168f6 <loadFont+0xa0>
   168e6:	|  |  |   movea.l 32(sp),a0
   168ea:	|  |  |   move.b (a0),d0
   168ec:	|  |  |   ext.w d0
   168ee:	|  |  |   movea.w d0,a0
   168f0:	|  |  |   move.l a0,1e97e <fontTableSize>
		*tmp++;
   168f6:	|  |  '-> move.l 32(sp),d0
   168fa:	|  |      move.l d0,d1
   168fc:	|  |      addq.l #1,d1
   168fe:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   16902:	|  '----> movea.l 32(sp),a0
   16906:	|         move.b (a0),d0
   16908:	'-------- bne.s 168c8 <loadFont+0x72>
	}
	fontTableSize++;
   1690a:	          move.l 1e97e <fontTableSize>,d0
   16910:	          addq.l #1,d0
   16912:	          move.l d0,1e97e <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   16918:	          move.l 1e97a <fontTable>,d0
   1691e:	      ,-- beq.s 16938 <loadFont+0xe2>
   16920:	      |   move.l 1e97a <fontTable>,20(sp)
   16928:	      |   move.l 1e876 <SysBase>,d0
   1692e:	      |   movea.l d0,a6
   16930:	      |   movea.l 20(sp),a1
   16934:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   16938:	      '-> move.l 1e97e <fontTableSize>,d0
   1693e:	          add.l d0,d0
   16940:	          add.l d0,d0
   16942:	          move.l d0,16(sp)
   16946:	          clr.l 12(sp)
   1694a:	          move.l 1e876 <SysBase>,d0
   16950:	          movea.l d0,a6
   16952:	          move.l 16(sp),d0
   16956:	          move.l 12(sp),d1
   1695a:	          jsr -684(a6)
   1695e:	          move.l d0,8(sp)
   16962:	          move.l 8(sp),d0
   16966:	          move.l d0,1e97a <fontTable>
	if (!fontTable) return FALSE;
   1696c:	          move.l 1e97a <fontTable>,d0
   16972:	      ,-- bne.s 1697a <loadFont+0x124>
   16974:	      |   clr.w d0
   16976:	,-----|-- bra.w 16a20 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1697a:	|     '-> clr.l 36(sp)
   1697e:	|     ,-- bra.s 16998 <loadFont+0x142>
		fontTable[a] = 0;
   16980:	|  ,--|-> move.l 1e97a <fontTable>,d1
   16986:	|  |  |   move.l 36(sp),d0
   1698a:	|  |  |   add.l d0,d0
   1698c:	|  |  |   add.l d0,d0
   1698e:	|  |  |   movea.l d1,a0
   16990:	|  |  |   adda.l d0,a0
   16992:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   16994:	|  |  |   addq.l #1,36(sp)
   16998:	|  |  '-> move.l 1e97e <fontTableSize>,d0
   1699e:	|  |      cmp.l 36(sp),d0
   169a2:	|  '----- bhi.s 16980 <loadFont+0x12a>
	}
	a = 0;
   169a4:	|         clr.l 36(sp)
	int i = 0;
   169a8:	|         clr.l 28(sp)
	tmp = charOrder;
   169ac:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   169b2:	|     ,-- bra.s 169e2 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   169b4:	|  ,--|-> move.l 1e97a <fontTable>,d1
   169ba:	|  |  |   move.l 32(sp),d0
   169be:	|  |  |   move.l d0,d2
   169c0:	|  |  |   addq.l #1,d2
   169c2:	|  |  |   move.l d2,32(sp)
   169c6:	|  |  |   movea.l d0,a0
   169c8:	|  |  |   move.b (a0),d0
   169ca:	|  |  |   ext.w d0
   169cc:	|  |  |   movea.w d0,a0
   169ce:	|  |  |   move.l a0,d0
   169d0:	|  |  |   add.l a0,d0
   169d2:	|  |  |   add.l d0,d0
   169d4:	|  |  |   movea.l d1,a0
   169d6:	|  |  |   adda.l d0,a0
   169d8:	|  |  |   move.l 28(sp),d0
   169dc:	|  |  |   move.l d0,(a0)
		i++;
   169de:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   169e2:	|  |  '-> movea.l 32(sp),a0
   169e6:	|  |      move.b (a0),d0
   169e8:	|  '----- bne.s 169b4 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   169ea:	|         move.l 44(sp),-(sp)
   169ee:	|         jsr 17220 <loadBankForAnim>
   169f4:	|         addq.l #4,sp
   169f6:	|         move.l d0,1e982 <theFont>
	if (!theFont) {
   169fc:	|         move.l 1e982 <theFont>,d0
   16a02:	|     ,-- bne.s 16a16 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   16a04:	|     |   pea 1bf31 <talk.c.490538ff+0x85d>
   16a0a:	|     |   jsr 184fe <KPrintF>
   16a10:	|     |   addq.l #4,sp
		return FALSE;
   16a12:	|     |   clr.w d0
   16a14:	+-----|-- bra.s 16a20 <loadFont+0x1ca>
	}
	fontHeight = h;
   16a16:	|     '-> move.l 52(sp),1e96e <fontHeight>
	return TRUE;
   16a1e:	|         moveq #1,d0
}
   16a20:	'-------> move.l (sp)+,d2
   16a22:	          movea.l (sp)+,a6
   16a24:	          lea 32(sp),sp
   16a28:	          rts

00016a2a <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   16a2a:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   16a2e:	                clr.l 4(sp)

    if (!fontTableSize) return;
   16a32:	                move.l 1e97e <fontTableSize>,d0
   16a38:	,-------------- beq.w 16b00 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   16a3c:	|               move.w 1e76a <fontSpace>,d0
   16a42:	|               asr.w #1,d0
   16a44:	|               ext.l d0
   16a46:	|               add.l d0,20(sp)
	char *tmp = theText;
   16a4a:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   16a50:	|     ,-------- bra.w 16af4 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   16a54:	|  ,--|-------> movea.l 1e982 <theFont>,a0
   16a5a:	|  |  |         movea.l 16(a0),a0
   16a5e:	|  |  |         movea.l 8(sp),a1
   16a62:	|  |  |         move.b (a1),d0
   16a64:	|  |  |         move.b d0,d0
   16a66:	|  |  |         andi.l #255,d0
   16a6c:	|  |  |         move.l 1e97e <fontTableSize>,d1
   16a72:	|  |  |         cmp.l d0,d1
   16a74:	|  |  |  ,----- bls.s 16aa0 <pasteStringToBackdrop+0x76>
   16a76:	|  |  |  |      move.l 1e97a <fontTable>,d1
   16a7c:	|  |  |  |      movea.l 8(sp),a1
   16a80:	|  |  |  |      move.b (a1),d0
   16a82:	|  |  |  |      move.b d0,d0
   16a84:	|  |  |  |      andi.l #255,d0
   16a8a:	|  |  |  |      add.l d0,d0
   16a8c:	|  |  |  |      add.l d0,d0
   16a8e:	|  |  |  |      movea.l d1,a1
   16a90:	|  |  |  |      adda.l d0,a1
   16a92:	|  |  |  |      move.l (a1),d1
   16a94:	|  |  |  |      move.l d1,d0
   16a96:	|  |  |  |      lsl.l #3,d0
   16a98:	|  |  |  |      sub.l d1,d0
   16a9a:	|  |  |  |      add.l d0,d0
   16a9c:	|  |  |  |      add.l d0,d0
   16a9e:	|  |  |  |  ,-- bra.s 16aa2 <pasteStringToBackdrop+0x78>
   16aa0:	|  |  |  '--|-> moveq #0,d0
   16aa2:	|  |  |     '-> adda.l d0,a0
   16aa4:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   16aa6:	|  |  |         move.l 24(sp),d1
   16aaa:	|  |  |         movea.l (sp),a0
   16aac:	|  |  |         move.l 12(a0),d0
   16ab0:	|  |  |         move.l d0,d0
   16ab2:	|  |  |         sub.w d0,d1
   16ab4:	|  |  |         move.w d1,d0
   16ab6:	|  |  |         movea.w d0,a1
   16ab8:	|  |  |         move.l 20(sp),d1
   16abc:	|  |  |         movea.l (sp),a0
   16abe:	|  |  |         move.l 8(a0),d0
   16ac2:	|  |  |         move.l d0,d0
   16ac4:	|  |  |         sub.w d0,d1
   16ac6:	|  |  |         move.w d1,d0
   16ac8:	|  |  |         movea.w d0,a0
   16aca:	|  |  |         move.l a1,-(sp)
   16acc:	|  |  |         move.l a0,-(sp)
   16ace:	|  |  |         move.l 8(sp),-(sp)
   16ad2:	|  |  |         jsr 247c <CstPasteChar>
   16ad8:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   16adc:	|  |  |         movea.l (sp),a0
   16ade:	|  |  |         move.l (a0),d1
   16ae0:	|  |  |         move.w 1e76a <fontSpace>,d0
   16ae6:	|  |  |         movea.w d0,a0
   16ae8:	|  |  |         move.l d1,d0
   16aea:	|  |  |         add.l a0,d0
   16aec:	|  |  |         add.l d0,20(sp)
		tmp++;
   16af0:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   16af4:	|  |  '-------> movea.l 8(sp),a0
   16af8:	|  |            move.b (a0),d0
   16afa:	|  '----------- bne.w 16a54 <pasteStringToBackdrop+0x2a>
   16afe:	|           ,-- bra.s 16b02 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   16b00:	'-----------|-> nop
    }
}
   16b02:	            '-> lea 12(sp),sp
   16b06:	                rts

00016b08 <stringWidth>:


int stringWidth (char * theText) {
   16b08:	                lea -16(sp),sp
	int a = 0;
   16b0c:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   16b10:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   16b14:	                move.l 1e97e <fontTableSize>,d0
   16b1a:	            ,-- bne.s 16b20 <stringWidth+0x18>
   16b1c:	            |   moveq #0,d0
   16b1e:	,-----------|-- bra.s 16b94 <stringWidth+0x8c>

	char *tmp = theText;
   16b20:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   16b26:	|     ,-------- bra.s 16b88 <stringWidth+0x80>
        c = *tmp++;
   16b28:	|  ,--|-------> move.l 8(sp),d0
   16b2c:	|  |  |         move.l d0,d1
   16b2e:	|  |  |         addq.l #1,d1
   16b30:	|  |  |         move.l d1,8(sp)
   16b34:	|  |  |         movea.l d0,a0
   16b36:	|  |  |         move.b (a0),d0
   16b38:	|  |  |         ext.w d0
   16b3a:	|  |  |         movea.w d0,a0
   16b3c:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   16b3e:	|  |  |         movea.l 1e982 <theFont>,a0
   16b44:	|  |  |         movea.l 16(a0),a1
   16b48:	|  |  |         move.l 1e97e <fontTableSize>,d0
   16b4e:	|  |  |         cmp.l (sp),d0
   16b50:	|  |  |  ,----- bls.s 16b70 <stringWidth+0x68>
   16b52:	|  |  |  |      move.l 1e97a <fontTable>,d1
   16b58:	|  |  |  |      move.l (sp),d0
   16b5a:	|  |  |  |      add.l d0,d0
   16b5c:	|  |  |  |      add.l d0,d0
   16b5e:	|  |  |  |      movea.l d1,a0
   16b60:	|  |  |  |      adda.l d0,a0
   16b62:	|  |  |  |      move.l (a0),d1
   16b64:	|  |  |  |      move.l d1,d0
   16b66:	|  |  |  |      lsl.l #3,d0
   16b68:	|  |  |  |      sub.l d1,d0
   16b6a:	|  |  |  |      add.l d0,d0
   16b6c:	|  |  |  |      add.l d0,d0
   16b6e:	|  |  |  |  ,-- bra.s 16b72 <stringWidth+0x6a>
   16b70:	|  |  |  '--|-> moveq #0,d0
   16b72:	|  |  |     '-> lea (0,a1,d0.l),a0
   16b76:	|  |  |         move.l (a0),d1
   16b78:	|  |  |         move.w 1e76a <fontSpace>,d0
   16b7e:	|  |  |         movea.w d0,a0
   16b80:	|  |  |         move.l d1,d0
   16b82:	|  |  |         add.l a0,d0
   16b84:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   16b88:	|  |  '-------> movea.l 8(sp),a0
   16b8c:	|  |            move.b (a0),d0
   16b8e:	|  '----------- bne.s 16b28 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   16b90:	|               move.l 12(sp),d0
}
   16b94:	'-------------> lea 16(sp),sp
   16b98:	                rts

00016b9a <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   16b9a:	       lea -16(sp),sp
   16b9e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   16ba0:	       moveq #36,d0
   16ba2:	       move.l d0,16(sp)
   16ba6:	       clr.l 12(sp)
   16baa:	       move.l 1e876 <SysBase>,d0
   16bb0:	       movea.l d0,a6
   16bb2:	       move.l 16(sp),d0
   16bb6:	       move.l 12(sp),d1
   16bba:	       jsr -684(a6)
   16bbe:	       move.l d0,8(sp)
   16bc2:	       move.l 8(sp),d0
   16bc6:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   16bca:	   ,-- bne.s 16bd2 <addScreenRegion+0x38>
   16bcc:	   |   clr.w d0
   16bce:	,--|-- bra.w 16c52 <addScreenRegion+0xb8>
    newRegion->di = di;
   16bd2:	|  '-> movea.l 4(sp),a0
   16bd6:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   16bdc:	|      movea.l 4(sp),a0
   16be0:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   16be4:	|      movea.l 4(sp),a0
   16be8:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   16bee:	|      movea.l 4(sp),a0
   16bf2:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   16bf8:	|      movea.l 4(sp),a0
   16bfc:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   16c02:	|      movea.l 4(sp),a0
   16c06:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   16c0c:	|      movea.l 4(sp),a0
   16c10:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   16c16:	|      move.l 52(sp),-(sp)
   16c1a:	|      jsr e048 <loadObjectType>
   16c20:	|      addq.l #4,sp
   16c22:	|      movea.l 4(sp),a0
   16c26:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   16c2a:	|      move.l 1e986 <allScreenRegions>,d0
   16c30:	|      movea.l 4(sp),a0
   16c34:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   16c38:	|      move.l 4(sp),1e986 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   16c40:	|      movea.l 4(sp),a0
   16c44:	|      move.l 28(a0),d0
   16c48:	|      sne d0
   16c4a:	|      neg.b d0
   16c4c:	|      move.b d0,d0
   16c4e:	|      andi.w #255,d0
}
   16c52:	'----> movea.l (sp)+,a6
   16c54:	       lea 16(sp),sp
   16c58:	       rts

00016c5a <getOverRegion>:

void getOverRegion () {
   16c5a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16c5c:	             move.l 1e986 <allScreenRegions>,(sp)
	while (thisRegion) {
   16c62:	   ,-------- bra.s 16cd0 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16c64:	,--|-------> move.l 1e830 <input+0xa>,d0
   16c6a:	|  |         movea.l (sp),a0
   16c6c:	|  |         movea.l (a0),a0
   16c6e:	|  |         move.l 1e930 <cameraX>,d1
   16c74:	|  |         suba.l d1,a0
   16c76:	|  |         cmpa.l d0,a0
   16c78:	|  |  ,----- bgt.s 16cca <getOverRegion+0x70>
   16c7a:	|  |  |      move.l 1e834 <input+0xe>,d0
   16c80:	|  |  |      movea.l (sp),a0
   16c82:	|  |  |      movea.l 4(a0),a0
   16c86:	|  |  |      move.l 1e934 <cameraY>,d1
   16c8c:	|  |  |      suba.l d1,a0
   16c8e:	|  |  |      cmpa.l d0,a0
   16c90:	|  |  +----- bgt.s 16cca <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16c92:	|  |  |      move.l 1e830 <input+0xa>,d0
   16c98:	|  |  |      movea.l (sp),a0
   16c9a:	|  |  |      movea.l 8(a0),a0
   16c9e:	|  |  |      move.l 1e930 <cameraX>,d1
   16ca4:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16ca6:	|  |  |      cmpa.l d0,a0
   16ca8:	|  |  +----- blt.s 16cca <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16caa:	|  |  |      move.l 1e834 <input+0xe>,d0
   16cb0:	|  |  |      movea.l (sp),a0
   16cb2:	|  |  |      movea.l 12(a0),a0
   16cb6:	|  |  |      move.l 1e934 <cameraY>,d1
   16cbc:	|  |  |      suba.l d1,a0
   16cbe:	|  |  |      cmpa.l d0,a0
   16cc0:	|  |  +----- blt.s 16cca <getOverRegion+0x70>
			overRegion = thisRegion;
   16cc2:	|  |  |      move.l (sp),1e98a <overRegion>
			return;
   16cc8:	|  |  |  ,-- bra.s 16cdc <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16cca:	|  |  '--|-> movea.l (sp),a0
   16ccc:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   16cd0:	|  '-----|-> tst.l (sp)
   16cd2:	'--------|-- bne.s 16c64 <getOverRegion+0xa>
	}
	overRegion = NULL;
   16cd4:	         |   clr.l 1e98a <overRegion>
	return;
   16cda:	         |   nop
}
   16cdc:	         '-> addq.l #4,sp
   16cde:	             rts

00016ce0 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   16ce0:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16ce2:	             move.l 1e986 <allScreenRegions>,(sp)

	while (thisRegion) {
   16ce8:	   ,-------- bra.s 16d04 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16cea:	,--|-------> movea.l (sp),a0
   16cec:	|  |         movea.l 28(a0),a0
   16cf0:	|  |         move.l 4(a0),d0
   16cf4:	|  |         cmp.l 8(sp),d0
   16cf8:	|  |     ,-- bne.s 16cfe <getRegionForObject+0x1e>
			return thisRegion;
   16cfa:	|  |     |   move.l (sp),d0
   16cfc:	|  |  ,--|-- bra.s 16d0a <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   16cfe:	|  |  |  '-> movea.l (sp),a0
   16d00:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   16d04:	|  '--|----> tst.l (sp)
   16d06:	'-----|----- bne.s 16cea <getRegionForObject+0xa>
	}

	return NULL;
   16d08:	      |      moveq #0,d0
}
   16d0a:	      '----> addq.l #4,sp
   16d0c:	             rts

00016d0e <killAllRegions>:

void killAllRegions () {
   16d0e:	       subq.l #8,sp
   16d10:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   16d12:	   ,-- bra.s 16d54 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   16d14:	,--|-> move.l 1e986 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16d1c:	|  |   movea.l 1e986 <allScreenRegions>,a0
   16d22:	|  |   move.l 32(a0),d0
   16d26:	|  |   move.l d0,1e986 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   16d2c:	|  |   movea.l 8(sp),a0
   16d30:	|  |   move.l 28(a0),d0
   16d34:	|  |   move.l d0,-(sp)
   16d36:	|  |   jsr e300 <removeObjectType>
   16d3c:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   16d3e:	|  |   move.l 8(sp),4(sp)
   16d44:	|  |   move.l 1e876 <SysBase>,d0
   16d4a:	|  |   movea.l d0,a6
   16d4c:	|  |   movea.l 4(sp),a1
   16d50:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   16d54:	|  '-> move.l 1e986 <allScreenRegions>,d0
   16d5a:	'----- bne.s 16d14 <killAllRegions+0x6>
	}
	overRegion = NULL;
   16d5c:	       clr.l 1e98a <overRegion>
}
   16d62:	       nop
   16d64:	       movea.l (sp)+,a6
   16d66:	       addq.l #8,sp
   16d68:	       rts

00016d6a <loadRegions>:

void loadRegions (BPTR fp) {
   16d6a:	       lea -24(sp),sp
   16d6e:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   16d70:	       move.l 32(sp),-(sp)
   16d74:	       jsr 6bc <get2bytes>
   16d7a:	       addq.l #4,sp
   16d7c:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   16d80:	       move.l #125318,20(sp)

	while (numRegions --) {
   16d88:	   ,-- bra.w 16e66 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16d8c:	,--|-> moveq #36,d0
   16d8e:	|  |   move.l d0,16(sp)
   16d92:	|  |   clr.l 12(sp)
   16d96:	|  |   move.l 1e876 <SysBase>,d0
   16d9c:	|  |   movea.l d0,a6
   16d9e:	|  |   move.l 16(sp),d0
   16da2:	|  |   move.l 12(sp),d1
   16da6:	|  |   jsr -684(a6)
   16daa:	|  |   move.l d0,8(sp)
   16dae:	|  |   move.l 8(sp),d0
   16db2:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16db6:	|  |   movea.l 20(sp),a0
   16dba:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16dbe:	|  |   moveq #32,d1
   16dc0:	|  |   add.l 4(sp),d1
   16dc4:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16dc8:	|  |   move.l 32(sp),-(sp)
   16dcc:	|  |   jsr 6bc <get2bytes>
   16dd2:	|  |   addq.l #4,sp
   16dd4:	|  |   movea.l 4(sp),a0
   16dd8:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16dda:	|  |   move.l 32(sp),-(sp)
   16dde:	|  |   jsr 6bc <get2bytes>
   16de4:	|  |   addq.l #4,sp
   16de6:	|  |   movea.l 4(sp),a0
   16dea:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16dee:	|  |   move.l 32(sp),-(sp)
   16df2:	|  |   jsr 6bc <get2bytes>
   16df8:	|  |   addq.l #4,sp
   16dfa:	|  |   movea.l 4(sp),a0
   16dfe:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   16e02:	|  |   move.l 32(sp),-(sp)
   16e06:	|  |   jsr 6bc <get2bytes>
   16e0c:	|  |   addq.l #4,sp
   16e0e:	|  |   movea.l 4(sp),a0
   16e12:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16e16:	|  |   move.l 32(sp),-(sp)
   16e1a:	|  |   jsr 6bc <get2bytes>
   16e20:	|  |   addq.l #4,sp
   16e22:	|  |   movea.l 4(sp),a0
   16e26:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   16e2a:	|  |   move.l 32(sp),-(sp)
   16e2e:	|  |   jsr 6bc <get2bytes>
   16e34:	|  |   addq.l #4,sp
   16e36:	|  |   movea.l 4(sp),a0
   16e3a:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   16e3e:	|  |   move.l 32(sp),-(sp)
   16e42:	|  |   jsr 6bc <get2bytes>
   16e48:	|  |   addq.l #4,sp
   16e4a:	|  |   movea.l 4(sp),a0
   16e4e:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   16e52:	|  |   move.l 32(sp),-(sp)
   16e56:	|  |   jsr dff6 <loadObjectRef>
   16e5c:	|  |   addq.l #4,sp
   16e5e:	|  |   movea.l 4(sp),a0
   16e62:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16e66:	|  '-> move.l 24(sp),d0
   16e6a:	|      move.l d0,d1
   16e6c:	|      subq.l #1,d1
   16e6e:	|      move.l d1,24(sp)
   16e72:	|      tst.l d0
   16e74:	'----- bne.w 16d8c <loadRegions+0x22>
	}
	* pointy = NULL;
   16e78:	       movea.l 20(sp),a0
   16e7c:	       clr.l (a0)
}
   16e7e:	       nop
   16e80:	       movea.l (sp)+,a6
   16e82:	       lea 24(sp),sp
   16e86:	       rts

00016e88 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16e88:	             lea -12(sp),sp
   16e8c:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16e8e:	             move.l #125318,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16e96:	   ,-------- bra.s 16f10 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16e98:	,--|-------> movea.l 12(sp),a0
   16e9c:	|  |         movea.l (a0),a0
   16e9e:	|  |         movea.l 28(a0),a0
   16ea2:	|  |         move.l 4(a0),d0
   16ea6:	|  |         cmp.l 20(sp),d0
   16eaa:	|  |  ,----- bne.s 16f02 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16eac:	|  |  |      movea.l 12(sp),a0
   16eb0:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   16eb4:	|  |  |      movea.l 8(sp),a0
   16eb8:	|  |  |      move.l 32(a0),d0
   16ebc:	|  |  |      movea.l 12(sp),a0
   16ec0:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16ec2:	|  |  |      movea.l 8(sp),a0
   16ec6:	|  |  |      move.l 28(a0),d0
   16eca:	|  |  |      move.l d0,-(sp)
   16ecc:	|  |  |      jsr e300 <removeObjectType>
   16ed2:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16ed4:	|  |  |      move.l 1e98a <overRegion>,d0
   16eda:	|  |  |      cmp.l 8(sp),d0
   16ede:	|  |  |  ,-- bne.s 16ee6 <removeScreenRegion+0x5e>
   16ee0:	|  |  |  |   clr.l 1e98a <overRegion>
            FreeVec(killMe);
   16ee6:	|  |  |  '-> move.l 8(sp),4(sp)
   16eec:	|  |  |      move.l 1e876 <SysBase>,d0
   16ef2:	|  |  |      movea.l d0,a6
   16ef4:	|  |  |      movea.l 4(sp),a1
   16ef8:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16efc:	|  |  |      clr.l 8(sp)
   16f00:	|  +--|----- bra.s 16f10 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   16f02:	|  |  '----> movea.l 12(sp),a0
   16f06:	|  |         move.l (a0),d0
   16f08:	|  |         moveq #32,d1
   16f0a:	|  |         add.l d0,d1
   16f0c:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   16f10:	|  '-------> movea.l 12(sp),a0
   16f14:	|            move.l (a0),d0
   16f16:	'----------- bne.s 16e98 <removeScreenRegion+0x10>
        }
    }
}
   16f18:	             nop
   16f1a:	             nop
   16f1c:	             movea.l (sp)+,a6
   16f1e:	             lea 12(sp),sp
   16f22:	             rts

00016f24 <saveRegions>:

void saveRegions (BPTR fp) {
   16f24:	       subq.l #8,sp
	int numRegions = 0;
   16f26:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   16f2a:	       move.l 1e986 <allScreenRegions>,(sp)
	while (thisRegion) {
   16f30:	   ,-- bra.s 16f3c <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   16f32:	,--|-> movea.l (sp),a0
   16f34:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   16f38:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   16f3c:	|  '-> tst.l (sp)
   16f3e:	'----- bne.s 16f32 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   16f40:	       move.l 12(sp),-(sp)
   16f44:	       move.l 8(sp),-(sp)
   16f48:	       jsr 8d0 <put2bytes>
   16f4e:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16f50:	       move.l 1e986 <allScreenRegions>,(sp)
	while (thisRegion) {
   16f56:	,----- bra.w 16ffe <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16f5a:	|  ,-> movea.l (sp),a0
   16f5c:	|  |   move.l (a0),d0
   16f5e:	|  |   move.l 12(sp),-(sp)
   16f62:	|  |   move.l d0,-(sp)
   16f64:	|  |   jsr 8d0 <put2bytes>
   16f6a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   16f6c:	|  |   movea.l (sp),a0
   16f6e:	|  |   move.l 4(a0),d0
   16f72:	|  |   move.l 12(sp),-(sp)
   16f76:	|  |   move.l d0,-(sp)
   16f78:	|  |   jsr 8d0 <put2bytes>
   16f7e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   16f80:	|  |   movea.l (sp),a0
   16f82:	|  |   move.l 8(a0),d0
   16f86:	|  |   move.l 12(sp),-(sp)
   16f8a:	|  |   move.l d0,-(sp)
   16f8c:	|  |   jsr 8d0 <put2bytes>
   16f92:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   16f94:	|  |   movea.l (sp),a0
   16f96:	|  |   move.l 12(a0),d0
   16f9a:	|  |   move.l 12(sp),-(sp)
   16f9e:	|  |   move.l d0,-(sp)
   16fa0:	|  |   jsr 8d0 <put2bytes>
   16fa6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16fa8:	|  |   movea.l (sp),a0
   16faa:	|  |   move.l 16(a0),d0
   16fae:	|  |   move.l 12(sp),-(sp)
   16fb2:	|  |   move.l d0,-(sp)
   16fb4:	|  |   jsr 8d0 <put2bytes>
   16fba:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   16fbc:	|  |   movea.l (sp),a0
   16fbe:	|  |   move.l 20(a0),d0
   16fc2:	|  |   move.l 12(sp),-(sp)
   16fc6:	|  |   move.l d0,-(sp)
   16fc8:	|  |   jsr 8d0 <put2bytes>
   16fce:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   16fd0:	|  |   movea.l (sp),a0
   16fd2:	|  |   move.l 24(a0),d0
   16fd6:	|  |   move.l 12(sp),-(sp)
   16fda:	|  |   move.l d0,-(sp)
   16fdc:	|  |   jsr 8d0 <put2bytes>
   16fe2:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16fe4:	|  |   movea.l (sp),a0
   16fe6:	|  |   move.l 28(a0),d0
   16fea:	|  |   move.l 12(sp),-(sp)
   16fee:	|  |   move.l d0,-(sp)
   16ff0:	|  |   jsr e3a0 <saveObjectRef>
   16ff6:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16ff8:	|  |   movea.l (sp),a0
   16ffa:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   16ffe:	'--|-> tst.l (sp)
   17000:	   '-- bne.w 16f5a <saveRegions+0x36>
	}
}
   17004:	       nop
   17006:	       nop
   17008:	       addq.l #8,sp
   1700a:	       rts

0001700c <showBoxes>:

void showBoxes () {
   1700c:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   1700e:	       move.l 1e986 <allScreenRegions>,(sp)

	while (huntRegion) {
   17014:	,----- bra.w 170b0 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   17018:	|  ,-> movea.l (sp),a0
   1701a:	|  |   move.l 12(a0),d0
   1701e:	|  |   movea.l d0,a1
   17020:	|  |   movea.l (sp),a0
   17022:	|  |   move.l 4(a0),d0
   17026:	|  |   move.l d0,d1
   17028:	|  |   movea.l (sp),a0
   1702a:	|  |   move.l (a0),d0
   1702c:	|  |   move.l a1,-(sp)
   1702e:	|  |   move.l d1,-(sp)
   17030:	|  |   move.l d0,-(sp)
   17032:	|  |   jsr dc84 <drawVerticalLine>
   17038:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   1703c:	|  |   movea.l (sp),a0
   1703e:	|  |   move.l 12(a0),d0
   17042:	|  |   movea.l d0,a1
   17044:	|  |   movea.l (sp),a0
   17046:	|  |   move.l 4(a0),d0
   1704a:	|  |   move.l d0,d1
   1704c:	|  |   movea.l (sp),a0
   1704e:	|  |   move.l 8(a0),d0
   17052:	|  |   move.l a1,-(sp)
   17054:	|  |   move.l d1,-(sp)
   17056:	|  |   move.l d0,-(sp)
   17058:	|  |   jsr dc84 <drawVerticalLine>
   1705e:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   17062:	|  |   movea.l (sp),a0
   17064:	|  |   move.l 8(a0),d0
   17068:	|  |   movea.l d0,a1
   1706a:	|  |   movea.l (sp),a0
   1706c:	|  |   move.l 4(a0),d0
   17070:	|  |   move.l d0,d1
   17072:	|  |   movea.l (sp),a0
   17074:	|  |   move.l (a0),d0
   17076:	|  |   move.l a1,-(sp)
   17078:	|  |   move.l d1,-(sp)
   1707a:	|  |   move.l d0,-(sp)
   1707c:	|  |   jsr dc5e <drawHorizontalLine>
   17082:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   17086:	|  |   movea.l (sp),a0
   17088:	|  |   move.l 8(a0),d0
   1708c:	|  |   movea.l d0,a1
   1708e:	|  |   movea.l (sp),a0
   17090:	|  |   move.l 12(a0),d0
   17094:	|  |   move.l d0,d1
   17096:	|  |   movea.l (sp),a0
   17098:	|  |   move.l (a0),d0
   1709a:	|  |   move.l a1,-(sp)
   1709c:	|  |   move.l d1,-(sp)
   1709e:	|  |   move.l d0,-(sp)
   170a0:	|  |   jsr dc5e <drawHorizontalLine>
   170a6:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   170aa:	|  |   movea.l (sp),a0
   170ac:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   170b0:	'--|-> tst.l (sp)
   170b2:	   '-- bne.w 17018 <showBoxes+0xc>
	}
   170b6:	       nop
   170b8:	       nop
   170ba:	       addq.l #4,sp
   170bc:	       rts

000170be <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   170be:	       lea -88(sp),sp
   170c2:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   170c4:	       move.l 1e876 <SysBase>,d0
   170ca:	       movea.l d0,a6
   170cc:	       jsr -666(a6)
   170d0:	       move.l d0,88(sp)
   170d4:	       move.l 88(sp),d0
   170d8:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   170dc:	       move.l 84(sp),80(sp)
   170e2:	       moveq #40,d0
   170e4:	       move.l d0,76(sp)
   170e8:	       move.l 1e876 <SysBase>,d0
   170ee:	       movea.l d0,a6
   170f0:	       movea.l 80(sp),a0
   170f4:	       move.l 76(sp),d0
   170f8:	       jsr -654(a6)
   170fc:	       move.l d0,72(sp)
   17100:	       move.l 72(sp),d0
   17104:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   17108:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   1710e:	       move.l #114507,60(sp)
   17116:	       clr.l 56(sp)
   1711a:	       move.l 64(sp),52(sp)
   17120:	       clr.l 48(sp)
   17124:	       move.l 1e876 <SysBase>,d0
   1712a:	       movea.l d0,a6
   1712c:	       movea.l 60(sp),a0
   17130:	       move.l 56(sp),d0
   17134:	       movea.l 52(sp),a1
   17138:	       move.l 48(sp),d1
   1713c:	       jsr -444(a6)
   17140:	       move.b d0,47(sp)
   17144:	       move.b 47(sp),d0
   17148:	   ,-- beq.s 1715e <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   1714a:	   |   pea 1bf58 <talk.c.490538ff+0x884>
   17150:	   |   jsr 184fe <KPrintF>
   17156:	   |   addq.l #4,sp
        return 0;
   17158:	   |   moveq #0,d0
   1715a:	,--|-- bra.w 17218 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   1715e:	|  '-> movea.l 64(sp),a0
   17162:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   17168:	|      lea 92(sp),a0
   1716c:	|      lea -86(a0),a0
   17170:	|      move.l a0,38(sp)
   17174:	|      movea.l 42(sp),a6
   17178:	|      movea.l 38(sp),a0
   1717c:	|      jsr -60(a6)
   17180:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   17184:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   1718a:	|      move.l #1103515245,-(sp)
   17190:	|      move.l 34(sp),-(sp)
   17194:	|      jsr 18e8a <__mulsi3>
   1719a:	|      addq.l #8,sp
   1719c:	|      addi.l #12345,d0
   171a2:	|      move.l d0,d1
   171a4:	|      bclr #31,d1
   171a8:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   171ac:	|      move.l 30(sp),d0
   171b0:	|      pea 64 <_start+0x64>
   171b4:	|      move.l d0,-(sp)
   171b6:	|      jsr 18f64 <__umodsi3>
   171bc:	|      addq.l #8,sp
   171be:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   171c2:	|      move.l 26(sp),-(sp)
   171c6:	|      pea 1bf75 <talk.c.490538ff+0x8a1>
   171cc:	|      jsr 184fe <KPrintF>
   171d2:	|      addq.l #8,sp

    CloseDevice(ioreq);
   171d4:	|      move.l 64(sp),22(sp)
   171da:	|      move.l 1e876 <SysBase>,d0
   171e0:	|      movea.l d0,a6
   171e2:	|      movea.l 22(sp),a1
   171e6:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   171ea:	|      move.l 64(sp),18(sp)
   171f0:	|      move.l 1e876 <SysBase>,d0
   171f6:	|      movea.l d0,a6
   171f8:	|      movea.l 18(sp),a0
   171fc:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   17200:	|      move.l 84(sp),14(sp)
   17206:	|      move.l 1e876 <SysBase>,d0
   1720c:	|      movea.l d0,a6
   1720e:	|      movea.l 14(sp),a0
   17212:	|      jsr -672(a6)
    return 0;
   17216:	|      moveq #0,d0
   17218:	'----> movea.l (sp)+,a6
   1721a:	       lea 88(sp),sp
   1721e:	       rts

00017220 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   17220:	             lea -20(sp),sp
   17224:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   17226:	             move.l 1e98e <allLoadedBanks>,20(sp)
	while (returnMe) {
   1722e:	      ,----- bra.s 17260 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   17230:	   ,--|----> movea.l 20(sp),a0
   17234:	   |  |      move.l (a0),d0
   17236:	   |  |      cmp.l 28(sp),d0
   1723a:	   |  |  ,-- bne.s 17256 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   1723c:	   |  |  |   movea.l 20(sp),a0
   17240:	   |  |  |   move.l 4(a0),d0
   17244:	   |  |  |   addq.l #1,d0
   17246:	   |  |  |   movea.l 20(sp),a0
   1724a:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1724e:	   |  |  |   move.l 20(sp),d0
   17252:	,--|--|--|-- bra.w 172f4 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   17256:	|  |  |  '-> movea.l 20(sp),a0
   1725a:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   17260:	|  |  '----> tst.l 20(sp)
   17264:	|  '-------- bne.s 17230 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   17266:	|            moveq #26,d0
   17268:	|            move.l d0,16(sp)
   1726c:	|            clr.l 12(sp)
   17270:	|            move.l 1e876 <SysBase>,d0
   17276:	|            movea.l d0,a6
   17278:	|            move.l 16(sp),d0
   1727c:	|            move.l 12(sp),d1
   17280:	|            jsr -684(a6)
   17284:	|            move.l d0,8(sp)
   17288:	|            move.l 8(sp),d0
   1728c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   17290:	|     ,----- beq.s 172f2 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   17292:	|     |      movea.l 20(sp),a0
   17296:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   1729a:	|     |      move.l 20(sp),d0
   1729e:	|     |      addq.l #8,d0
   172a0:	|     |      move.l d0,-(sp)
   172a2:	|     |      move.l 32(sp),-(sp)
   172a6:	|     |      jsr 94b8 <loadSpriteBank>
   172ac:	|     |      addq.l #8,sp
   172ae:	|     |      tst.w d0
   172b0:	|     |  ,-- beq.s 172d8 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   172b2:	|     |  |   movea.l 20(sp),a0
   172b6:	|     |  |   moveq #1,d0
   172b8:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   172bc:	|     |  |   move.l 1e98e <allLoadedBanks>,d0
   172c2:	|     |  |   movea.l 20(sp),a0
   172c6:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   172ca:	|     |  |   move.l 20(sp),1e98e <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   172d2:	|     |  |   move.l 20(sp),d0
   172d6:	+-----|--|-- bra.s 172f4 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   172d8:	|     |  '-> move.l 20(sp),4(sp)
   172de:	|     |      move.l 1e876 <SysBase>,d0
   172e4:	|     |      movea.l d0,a6
   172e6:	|     |      movea.l 4(sp),a1
   172ea:	|     |      jsr -690(a6)
			return NULL;
   172ee:	|     |      moveq #0,d0
   172f0:	+-----|----- bra.s 172f4 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   172f2:	|     '----> moveq #0,d0
}
   172f4:	'----------> movea.l (sp)+,a6
   172f6:	             lea 20(sp),sp
   172fa:	             rts

000172fc <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   172fc:	       lea -60(sp),sp
   17300:	       move.l d3,-(sp)
   17302:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   17304:	       move.l 88(sp),d0
   17308:	       sub.l 80(sp),d0
   1730c:	       move.l d0,-(sp)
   1730e:	       jsr 188f0 <__floatsidf>
   17314:	       addq.l #4,sp
   17316:	       move.l d0,32(sp)
   1731a:	       move.l d1,36(sp)
   1731e:	       move.l 32(sp),60(sp)
   17324:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   1732a:	       move.l 92(sp),d0
   1732e:	       sub.l 84(sp),d0
   17332:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   17336:	       move.l 96(sp),d0
   1733a:	       sub.l 80(sp),d0
   1733e:	       move.l d0,-(sp)
   17340:	       jsr 188f0 <__floatsidf>
   17346:	       addq.l #4,sp
   17348:	       move.l 64(sp),-(sp)
   1734c:	       move.l 64(sp),-(sp)
   17350:	       move.l d1,-(sp)
   17352:	       move.l d0,-(sp)
   17354:	       jsr 18980 <__muldf3>
   1735a:	       lea 16(sp),sp
   1735e:	       move.l d0,d2
   17360:	       move.l d1,d3
   17362:	       move.l 100(sp),d0
   17366:	       sub.l 84(sp),d0
   1736a:	       move.l 56(sp),-(sp)
   1736e:	       move.l d0,-(sp)
   17370:	       jsr 18e8a <__mulsi3>
   17376:	       addq.l #8,sp
   17378:	       move.l d0,-(sp)
   1737a:	       jsr 188f0 <__floatsidf>
   17380:	       addq.l #4,sp
   17382:	       move.l d1,-(sp)
   17384:	       move.l d0,-(sp)
   17386:	       move.l d3,-(sp)
   17388:	       move.l d2,-(sp)
   1738a:	       jsr 18722 <__adddf3>
   17390:	       lea 16(sp),sp
   17394:	       move.l d0,24(sp)
   17398:	       move.l d1,28(sp)
   1739c:	       move.l 24(sp),48(sp)
   173a2:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   173a8:	       move.l 64(sp),-(sp)
   173ac:	       move.l 64(sp),-(sp)
   173b0:	       move.l 72(sp),-(sp)
   173b4:	       move.l 72(sp),-(sp)
   173b8:	       jsr 18980 <__muldf3>
   173be:	       lea 16(sp),sp
   173c2:	       move.l d0,d2
   173c4:	       move.l d1,d3
   173c6:	       move.l 56(sp),-(sp)
   173ca:	       move.l 60(sp),-(sp)
   173ce:	       jsr 18e8a <__mulsi3>
   173d4:	       addq.l #8,sp
   173d6:	       move.l d0,-(sp)
   173d8:	       jsr 188f0 <__floatsidf>
   173de:	       addq.l #4,sp
   173e0:	       move.l d1,-(sp)
   173e2:	       move.l d0,-(sp)
   173e4:	       move.l d3,-(sp)
   173e6:	       move.l d2,-(sp)
   173e8:	       jsr 18722 <__adddf3>
   173ee:	       lea 16(sp),sp
   173f2:	       move.l d1,-(sp)
   173f4:	       move.l d0,-(sp)
   173f6:	       move.l 60(sp),-(sp)
   173fa:	       move.l 60(sp),-(sp)
   173fe:	       jsr 18784 <__divdf3>
   17404:	       lea 16(sp),sp
   17408:	       move.l d0,16(sp)
   1740c:	       move.l d1,20(sp)
   17410:	       move.l 16(sp),48(sp)
   17416:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1741c:	       clr.l -(sp)
   1741e:	       clr.l -(sp)
   17420:	       move.l 60(sp),-(sp)
   17424:	       move.l 60(sp),-(sp)
   17428:	       jsr 18b08 <__ltdf2>
   1742e:	       lea 16(sp),sp
   17432:	       tst.l d0
   17434:	   ,-- bge.s 1744a <closestPointOnLine+0x14e>
		*closestX = x1;
   17436:	   |   movea.l 72(sp),a0
   1743a:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   1743e:	   |   movea.l 76(sp),a0
   17442:	   |   move.l 84(sp),(a0)
   17446:	,--|-- bra.w 17518 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   1744a:	|  '-> clr.l -(sp)
   1744c:	|      move.l #1072693248,-(sp)
   17452:	|      move.l 60(sp),-(sp)
   17456:	|      move.l 60(sp),-(sp)
   1745a:	|      jsr 18a4e <__gtdf2>
   17460:	|      lea 16(sp),sp
   17464:	|      tst.l d0
   17466:	|  ,-- ble.s 1747c <closestPointOnLine+0x180>
		*closestX = x2;
   17468:	|  |   movea.l 72(sp),a0
   1746c:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   17470:	|  |   movea.l 76(sp),a0
   17474:	|  |   move.l 92(sp),(a0)
   17478:	+--|-- bra.w 17518 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   1747c:	|  '-> move.l 64(sp),-(sp)
   17480:	|      move.l 64(sp),-(sp)
   17484:	|      move.l 60(sp),-(sp)
   17488:	|      move.l 60(sp),-(sp)
   1748c:	|      jsr 18980 <__muldf3>
   17492:	|      lea 16(sp),sp
   17496:	|      move.l d0,8(sp)
   1749a:	|      move.l d1,12(sp)
   1749e:	|      move.l 8(sp),40(sp)
   174a4:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   174aa:	|      move.l 44(sp),-(sp)
   174ae:	|      move.l 44(sp),-(sp)
   174b2:	|      jsr 18892 <__fixdfsi>
   174b8:	|      addq.l #8,sp
   174ba:	|      movea.l 72(sp),a0
   174be:	|      move.l d0,(a0)
		*closestX += x1;
   174c0:	|      movea.l 72(sp),a0
   174c4:	|      move.l (a0),d0
   174c6:	|      add.l 80(sp),d0
   174ca:	|      movea.l 72(sp),a0
   174ce:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   174d0:	|      move.l 56(sp),-(sp)
   174d4:	|      jsr 188f0 <__floatsidf>
   174da:	|      addq.l #4,sp
   174dc:	|      move.l 52(sp),-(sp)
   174e0:	|      move.l 52(sp),-(sp)
   174e4:	|      move.l d1,-(sp)
   174e6:	|      move.l d0,-(sp)
   174e8:	|      jsr 18980 <__muldf3>
   174ee:	|      lea 16(sp),sp
   174f2:	|      move.l d1,-(sp)
   174f4:	|      move.l d0,-(sp)
   174f6:	|      jsr 18892 <__fixdfsi>
   174fc:	|      addq.l #8,sp
   174fe:	|      movea.l 76(sp),a0
   17502:	|      move.l d0,(a0)
		*closestY += y1;
   17504:	|      movea.l 76(sp),a0
   17508:	|      move.l (a0),d0
   1750a:	|      add.l 84(sp),d0
   1750e:	|      movea.l 76(sp),a0
   17512:	|      move.l d0,(a0)
		return TRUE;
   17514:	|      moveq #1,d0
   17516:	|  ,-- bra.s 1751a <closestPointOnLine+0x21e>
	}
	return FALSE;
   17518:	'--|-> clr.w d0
}
   1751a:	   '-> move.l (sp)+,d2
   1751c:	       move.l (sp)+,d3
   1751e:	       lea 60(sp),sp
   17522:	       rts

00017524 <drawFloor>:

void drawFloor() {
   17524:	                lea -12(sp),sp
   17528:	                move.l d3,-(sp)
   1752a:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1752c:	                clr.l 16(sp)
   17530:	   ,----------- bra.w 17744 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   17534:	,--|----------> movea.l 1e992 <currentFloor>,a0
   1753a:	|  |            move.l 12(a0),d1
   1753e:	|  |            move.l 16(sp),d0
   17542:	|  |            lsl.l #3,d0
   17544:	|  |            movea.l d1,a0
   17546:	|  |            adda.l d0,a0
   17548:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1754c:	|  |            moveq #1,d0
   1754e:	|  |            cmp.l 8(sp),d0
   17552:	|  |  ,-------- bge.w 17740 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   17556:	|  |  |         moveq #1,d0
   17558:	|  |  |         move.l d0,12(sp)
   1755c:	|  |  |     ,-- bra.w 17656 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   17560:	|  |  |  ,--|-> movea.l 1e992 <currentFloor>,a0
   17566:	|  |  |  |  |   move.l 4(a0),d1
   1756a:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   17570:	|  |  |  |  |   movea.l 12(a0),a0
   17574:	|  |  |  |  |   move.l 16(sp),d0
   17578:	|  |  |  |  |   lsl.l #3,d0
   1757a:	|  |  |  |  |   adda.l d0,a0
   1757c:	|  |  |  |  |   movea.l 4(a0),a0
   17580:	|  |  |  |  |   move.l 12(sp),d0
   17584:	|  |  |  |  |   add.l d0,d0
   17586:	|  |  |  |  |   add.l d0,d0
   17588:	|  |  |  |  |   adda.l d0,a0
   1758a:	|  |  |  |  |   move.l (a0),d0
   1758c:	|  |  |  |  |   lsl.l #3,d0
   1758e:	|  |  |  |  |   movea.l d1,a0
   17590:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17592:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   17596:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   1759c:	|  |  |  |  |   move.l 4(a0),d1
   175a0:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   175a6:	|  |  |  |  |   movea.l 12(a0),a0
   175aa:	|  |  |  |  |   move.l 16(sp),d0
   175ae:	|  |  |  |  |   lsl.l #3,d0
   175b0:	|  |  |  |  |   adda.l d0,a0
   175b2:	|  |  |  |  |   movea.l 4(a0),a0
   175b6:	|  |  |  |  |   move.l 12(sp),d0
   175ba:	|  |  |  |  |   add.l d0,d0
   175bc:	|  |  |  |  |   add.l d0,d0
   175be:	|  |  |  |  |   adda.l d0,a0
   175c0:	|  |  |  |  |   move.l (a0),d0
   175c2:	|  |  |  |  |   lsl.l #3,d0
   175c4:	|  |  |  |  |   movea.l d1,a0
   175c6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   175c8:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   175ca:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   175d0:	|  |  |  |  |   move.l 4(a0),d1
   175d4:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   175da:	|  |  |  |  |   movea.l 12(a0),a0
   175de:	|  |  |  |  |   move.l 16(sp),d0
   175e2:	|  |  |  |  |   lsl.l #3,d0
   175e4:	|  |  |  |  |   adda.l d0,a0
   175e6:	|  |  |  |  |   movea.l 4(a0),a0
   175ea:	|  |  |  |  |   move.l 12(sp),d0
   175ee:	|  |  |  |  |   addi.l #1073741823,d0
   175f4:	|  |  |  |  |   add.l d0,d0
   175f6:	|  |  |  |  |   add.l d0,d0
   175f8:	|  |  |  |  |   adda.l d0,a0
   175fa:	|  |  |  |  |   move.l (a0),d0
   175fc:	|  |  |  |  |   lsl.l #3,d0
   175fe:	|  |  |  |  |   movea.l d1,a0
   17600:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17602:	|  |  |  |  |   move.l 4(a0),d1
   17606:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   1760c:	|  |  |  |  |   move.l 4(a0),d3
   17610:	|  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   17616:	|  |  |  |  |   movea.l 12(a0),a0
   1761a:	|  |  |  |  |   move.l 16(sp),d0
   1761e:	|  |  |  |  |   lsl.l #3,d0
   17620:	|  |  |  |  |   adda.l d0,a0
   17622:	|  |  |  |  |   movea.l 4(a0),a0
   17626:	|  |  |  |  |   move.l 12(sp),d0
   1762a:	|  |  |  |  |   addi.l #1073741823,d0
   17630:	|  |  |  |  |   add.l d0,d0
   17632:	|  |  |  |  |   add.l d0,d0
   17634:	|  |  |  |  |   adda.l d0,a0
   17636:	|  |  |  |  |   move.l (a0),d0
   17638:	|  |  |  |  |   lsl.l #3,d0
   1763a:	|  |  |  |  |   movea.l d3,a0
   1763c:	|  |  |  |  |   adda.l d0,a0
   1763e:	|  |  |  |  |   move.l (a0),d0
   17640:	|  |  |  |  |   move.l d2,-(sp)
   17642:	|  |  |  |  |   move.l a1,-(sp)
   17644:	|  |  |  |  |   move.l d1,-(sp)
   17646:	|  |  |  |  |   move.l d0,-(sp)
   17648:	|  |  |  |  |   jsr 4c72 <drawLine>
   1764e:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   17652:	|  |  |  |  |   addq.l #1,12(sp)
   17656:	|  |  |  |  '-> move.l 12(sp),d0
   1765a:	|  |  |  |      cmp.l 8(sp),d0
   1765e:	|  |  |  '----- blt.w 17560 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   17662:	|  |  |         movea.l 1e992 <currentFloor>,a0
   17668:	|  |  |         move.l 4(a0),d1
   1766c:	|  |  |         movea.l 1e992 <currentFloor>,a0
   17672:	|  |  |         movea.l 12(a0),a0
   17676:	|  |  |         move.l 16(sp),d0
   1767a:	|  |  |         lsl.l #3,d0
   1767c:	|  |  |         adda.l d0,a0
   1767e:	|  |  |         movea.l 4(a0),a0
   17682:	|  |  |         move.l 8(sp),d0
   17686:	|  |  |         addi.l #1073741823,d0
   1768c:	|  |  |         add.l d0,d0
   1768e:	|  |  |         add.l d0,d0
   17690:	|  |  |         adda.l d0,a0
   17692:	|  |  |         move.l (a0),d0
   17694:	|  |  |         lsl.l #3,d0
   17696:	|  |  |         movea.l d1,a0
   17698:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1769a:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1769e:	|  |  |         movea.l 1e992 <currentFloor>,a0
   176a4:	|  |  |         move.l 4(a0),d1
   176a8:	|  |  |         movea.l 1e992 <currentFloor>,a0
   176ae:	|  |  |         movea.l 12(a0),a0
   176b2:	|  |  |         move.l 16(sp),d0
   176b6:	|  |  |         lsl.l #3,d0
   176b8:	|  |  |         adda.l d0,a0
   176ba:	|  |  |         movea.l 4(a0),a0
   176be:	|  |  |         move.l 8(sp),d0
   176c2:	|  |  |         addi.l #1073741823,d0
   176c8:	|  |  |         add.l d0,d0
   176ca:	|  |  |         add.l d0,d0
   176cc:	|  |  |         adda.l d0,a0
   176ce:	|  |  |         move.l (a0),d0
   176d0:	|  |  |         lsl.l #3,d0
   176d2:	|  |  |         movea.l d1,a0
   176d4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   176d6:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   176d8:	|  |  |         movea.l 1e992 <currentFloor>,a0
   176de:	|  |  |         move.l 4(a0),d1
   176e2:	|  |  |         movea.l 1e992 <currentFloor>,a0
   176e8:	|  |  |         movea.l 12(a0),a0
   176ec:	|  |  |         move.l 16(sp),d0
   176f0:	|  |  |         lsl.l #3,d0
   176f2:	|  |  |         adda.l d0,a0
   176f4:	|  |  |         movea.l 4(a0),a0
   176f8:	|  |  |         move.l (a0),d0
   176fa:	|  |  |         lsl.l #3,d0
   176fc:	|  |  |         movea.l d1,a0
   176fe:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   17700:	|  |  |         move.l 4(a0),d1
   17704:	|  |  |         movea.l 1e992 <currentFloor>,a0
   1770a:	|  |  |         move.l 4(a0),d3
   1770e:	|  |  |         movea.l 1e992 <currentFloor>,a0
   17714:	|  |  |         movea.l 12(a0),a0
   17718:	|  |  |         move.l 16(sp),d0
   1771c:	|  |  |         lsl.l #3,d0
   1771e:	|  |  |         adda.l d0,a0
   17720:	|  |  |         movea.l 4(a0),a0
   17724:	|  |  |         move.l (a0),d0
   17726:	|  |  |         lsl.l #3,d0
   17728:	|  |  |         movea.l d3,a0
   1772a:	|  |  |         adda.l d0,a0
   1772c:	|  |  |         move.l (a0),d0
   1772e:	|  |  |         move.l d2,-(sp)
   17730:	|  |  |         move.l a1,-(sp)
   17732:	|  |  |         move.l d1,-(sp)
   17734:	|  |  |         move.l d0,-(sp)
   17736:	|  |  |         jsr 4c72 <drawLine>
   1773c:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   17740:	|  |  '-------> addq.l #1,16(sp)
   17744:	|  '----------> movea.l 1e992 <currentFloor>,a0
   1774a:	|               move.l 8(a0),d0
   1774e:	|               cmp.l 16(sp),d0
   17752:	'-------------- bgt.w 17534 <drawFloor+0x10>
        }
    }
}
   17756:	                nop
   17758:	                nop
   1775a:	                move.l (sp)+,d2
   1775c:	                move.l (sp)+,d3
   1775e:	                lea 12(sp),sp
   17762:	                rts

00017764 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   17764:	                      lea -12(sp),sp
    int sharedVertices = 0;
   17768:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1776c:	                      clr.l 4(sp)
   17770:	   ,----------------- bra.w 17802 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   17774:	,--|----------------> clr.l (sp)
   17776:	|  |     ,----------- bra.s 177f2 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   17778:	|  |  ,--|----------> movea.l 16(sp),a0
   1777c:	|  |  |  |            move.l 4(a0),d1
   17780:	|  |  |  |            move.l 4(sp),d0
   17784:	|  |  |  |            add.l d0,d0
   17786:	|  |  |  |            add.l d0,d0
   17788:	|  |  |  |            movea.l d1,a0
   1778a:	|  |  |  |            adda.l d0,a0
   1778c:	|  |  |  |            move.l (a0),d1
   1778e:	|  |  |  |            movea.l 20(sp),a0
   17792:	|  |  |  |            movea.l 4(a0),a0
   17796:	|  |  |  |            move.l (sp),d0
   17798:	|  |  |  |            add.l d0,d0
   1779a:	|  |  |  |            add.l d0,d0
   1779c:	|  |  |  |            adda.l d0,a0
   1779e:	|  |  |  |            move.l (a0),d0
   177a0:	|  |  |  |            cmp.l d1,d0
   177a2:	|  |  |  |  ,-------- bne.s 177f0 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   177a4:	|  |  |  |  |         move.l 8(sp),d0
   177a8:	|  |  |  |  |         move.l d0,d1
   177aa:	|  |  |  |  |         addq.l #1,d1
   177ac:	|  |  |  |  |         move.l d1,8(sp)
   177b0:	|  |  |  |  |         tst.l d0
   177b2:	|  |  |  |  |     ,-- beq.s 177d4 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   177b4:	|  |  |  |  |     |   movea.l 16(sp),a0
   177b8:	|  |  |  |  |     |   move.l 4(a0),d1
   177bc:	|  |  |  |  |     |   move.l 4(sp),d0
   177c0:	|  |  |  |  |     |   add.l d0,d0
   177c2:	|  |  |  |  |     |   add.l d0,d0
   177c4:	|  |  |  |  |     |   movea.l d1,a0
   177c6:	|  |  |  |  |     |   adda.l d0,a0
   177c8:	|  |  |  |  |     |   move.l (a0),d0
   177ca:	|  |  |  |  |     |   movea.l 28(sp),a0
   177ce:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   177d0:	|  |  |  |  |     |   moveq #1,d0
   177d2:	|  |  |  |  |  ,--|-- bra.s 17812 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   177d4:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   177d8:	|  |  |  |  |  |      move.l 4(a0),d1
   177dc:	|  |  |  |  |  |      move.l 4(sp),d0
   177e0:	|  |  |  |  |  |      add.l d0,d0
   177e2:	|  |  |  |  |  |      add.l d0,d0
   177e4:	|  |  |  |  |  |      movea.l d1,a0
   177e6:	|  |  |  |  |  |      adda.l d0,a0
   177e8:	|  |  |  |  |  |      move.l (a0),d0
   177ea:	|  |  |  |  |  |      movea.l 24(sp),a0
   177ee:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   177f0:	|  |  |  |  '--|----> addq.l #1,(sp)
   177f2:	|  |  |  '-----|----> movea.l 20(sp),a0
   177f6:	|  |  |        |      move.l (a0),d0
   177f8:	|  |  |        |      cmp.l (sp),d0
   177fa:	|  |  '--------|----- bgt.w 17778 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   177fe:	|  |           |      addq.l #1,4(sp)
   17802:	|  '-----------|----> movea.l 16(sp),a0
   17806:	|              |      move.l (a0),d0
   17808:	|              |      cmp.l 4(sp),d0
   1780c:	'--------------|----- bgt.w 17774 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   17810:	               |      clr.w d0
}
   17812:	               '----> lea 12(sp),sp
   17816:	                      rts

00017818 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   17818:	movea.l 1e992 <currentFloor>,a0
   1781e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   17822:	movea.l 1e992 <currentFloor>,a0
   17828:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1782c:	movea.l 1e992 <currentFloor>,a0
   17832:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   17836:	movea.l 1e992 <currentFloor>,a0
   1783c:	clr.l 16(a0)
}
   17840:	nop
   17842:	rts

00017844 <inFloor>:

int inFloor (int x, int y) {
   17844:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   17846:	          pea 1bf88 <talk.c.490538ff+0x8b4>
   1784c:	          jsr 184fe <KPrintF>
   17852:	          addq.l #4,sp
	int i, r = -1;
   17854:	          moveq #-1,d0
   17856:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   17858:	          clr.l 4(sp)
   1785c:	   ,----- bra.s 17890 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1785e:	,--|----> movea.l 1e992 <currentFloor>,a0
   17864:	|  |      move.l 12(a0),d1
   17868:	|  |      move.l 4(sp),d0
   1786c:	|  |      lsl.l #3,d0
   1786e:	|  |      add.l d1,d0
   17870:	|  |      move.l 16(sp),-(sp)
   17874:	|  |      move.l 16(sp),-(sp)
   17878:	|  |      move.l d0,-(sp)
   1787a:	|  |      jsr 17a6a <pointInFloorPolygon>
   17880:	|  |      lea 12(sp),sp
   17884:	|  |      tst.w d0
   17886:	|  |  ,-- beq.s 1788c <inFloor+0x48>
			r = i;
   17888:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1788c:	|  |  '-> addq.l #1,4(sp)
   17890:	|  '----> movea.l 1e992 <currentFloor>,a0
   17896:	|         move.l 8(a0),d0
   1789a:	|         cmp.l 4(sp),d0
   1789e:	'-------- bgt.s 1785e <inFloor+0x1a>

	KPrintF("infloor finished\n");
   178a0:	          pea 1bf99 <talk.c.490538ff+0x8c5>
   178a6:	          jsr 184fe <KPrintF>
   178ac:	          addq.l #4,sp
	return r;
   178ae:	          move.l (sp),d0
}
   178b0:	          addq.l #8,sp
   178b2:	          rts

000178b4 <initFloor>:

BOOL initFloor () {
   178b4:	       lea -12(sp),sp
   178b8:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   178ba:	       moveq #20,d0
   178bc:	       move.l d0,12(sp)
   178c0:	       clr.l 8(sp)
   178c4:	       move.l 1e876 <SysBase>,d0
   178ca:	       movea.l d0,a6
   178cc:	       move.l 12(sp),d0
   178d0:	       move.l 8(sp),d1
   178d4:	       jsr -684(a6)
   178d8:	       move.l d0,4(sp)
   178dc:	       move.l 4(sp),d0
   178e0:	       move.l d0,1e992 <currentFloor>

    if(currentFloor == 0) {
   178e6:	       move.l 1e992 <currentFloor>,d0
   178ec:	,----- bne.s 17900 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   178ee:	|      pea 1bfab <talk.c.490538ff+0x8d7>
   178f4:	|      jsr 184fe <KPrintF>
   178fa:	|      addq.l #4,sp
        return FALSE;
   178fc:	|      clr.w d0
   178fe:	|  ,-- bra.s 17908 <initFloor+0x54>
    }

	noFloor ();
   17900:	'--|-> jsr 17818 <noFloor>
	return TRUE;
   17906:	   |   moveq #1,d0
}
   17908:	   '-> movea.l (sp)+,a6
   1790a:	       lea 12(sp),sp
   1790e:	       rts

00017910 <killFloor>:

void killFloor () {
   17910:	       lea -24(sp),sp
   17914:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   17916:	       clr.l 24(sp)
   1791a:	   ,-- bra.s 17974 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1791c:	,--|-> movea.l 1e992 <currentFloor>,a0
   17922:	|  |   move.l 12(a0),d1
   17926:	|  |   move.l 24(sp),d0
   1792a:	|  |   lsl.l #3,d0
   1792c:	|  |   movea.l d1,a0
   1792e:	|  |   adda.l d0,a0
   17930:	|  |   move.l 4(a0),8(sp)
   17936:	|  |   move.l 1e876 <SysBase>,d0
   1793c:	|  |   movea.l d0,a6
   1793e:	|  |   movea.l 8(sp),a1
   17942:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   17946:	|  |   movea.l 1e992 <currentFloor>,a0
   1794c:	|  |   move.l 16(a0),d1
   17950:	|  |   move.l 24(sp),d0
   17954:	|  |   add.l d0,d0
   17956:	|  |   add.l d0,d0
   17958:	|  |   movea.l d1,a0
   1795a:	|  |   adda.l d0,a0
   1795c:	|  |   move.l (a0),4(sp)
   17960:	|  |   move.l 1e876 <SysBase>,d0
   17966:	|  |   movea.l d0,a6
   17968:	|  |   movea.l 4(sp),a1
   1796c:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   17970:	|  |   addq.l #1,24(sp)
   17974:	|  '-> movea.l 1e992 <currentFloor>,a0
   1797a:	|      move.l 8(a0),d0
   1797e:	|      cmp.l 24(sp),d0
   17982:	'----- bgt.s 1791c <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   17984:	       movea.l 1e992 <currentFloor>,a0
   1798a:	       move.l 12(a0),20(sp)
   17990:	       move.l 1e876 <SysBase>,d0
   17996:	       movea.l d0,a6
   17998:	       movea.l 20(sp),a1
   1799c:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   179a0:	       movea.l 1e992 <currentFloor>,a0
   179a6:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   179aa:	       movea.l 1e992 <currentFloor>,a0
   179b0:	       move.l 4(a0),16(sp)
   179b6:	       move.l 1e876 <SysBase>,d0
   179bc:	       movea.l d0,a6
   179be:	       movea.l 16(sp),a1
   179c2:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   179c6:	       movea.l 1e992 <currentFloor>,a0
   179cc:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   179d0:	       movea.l 1e992 <currentFloor>,a0
   179d6:	       move.l 16(a0),12(sp)
   179dc:	       move.l 1e876 <SysBase>,d0
   179e2:	       movea.l d0,a6
   179e4:	       movea.l 12(sp),a1
   179e8:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   179ec:	       movea.l 1e992 <currentFloor>,a0
   179f2:	       clr.l 16(a0)
}
   179f6:	       nop
   179f8:	       movea.l (sp)+,a6
   179fa:	       lea 24(sp),sp
   179fe:	       rts

00017a00 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   17a00:	                   lea -12(sp),sp
	int sharedVertices = 0;
   17a04:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   17a08:	                   clr.l 4(sp)
   17a0c:	   ,-------------- bra.s 17a58 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   17a0e:	,--|-------------> clr.l (sp)
   17a10:	|  |     ,-------- bra.s 17a4c <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   17a12:	|  |  ,--|-------> move.l 20(sp),d1
   17a16:	|  |  |  |         move.l 4(sp),d0
   17a1a:	|  |  |  |         add.l d0,d0
   17a1c:	|  |  |  |         add.l d0,d0
   17a1e:	|  |  |  |         movea.l d1,a0
   17a20:	|  |  |  |         adda.l d0,a0
   17a22:	|  |  |  |         move.l (a0),d1
   17a24:	|  |  |  |         movea.l 28(sp),a0
   17a28:	|  |  |  |         move.l (sp),d0
   17a2a:	|  |  |  |         add.l d0,d0
   17a2c:	|  |  |  |         add.l d0,d0
   17a2e:	|  |  |  |         adda.l d0,a0
   17a30:	|  |  |  |         move.l (a0),d0
   17a32:	|  |  |  |         cmp.l d1,d0
   17a34:	|  |  |  |     ,-- bne.s 17a4a <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   17a36:	|  |  |  |     |   move.l 8(sp),d0
   17a3a:	|  |  |  |     |   move.l d0,d1
   17a3c:	|  |  |  |     |   addq.l #1,d1
   17a3e:	|  |  |  |     |   move.l d1,8(sp)
   17a42:	|  |  |  |     |   tst.l d0
   17a44:	|  |  |  |     +-- beq.s 17a4a <polysShareSide+0x4a>
   17a46:	|  |  |  |     |   moveq #1,d0
   17a48:	|  |  |  |  ,--|-- bra.s 17a64 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   17a4a:	|  |  |  |  |  '-> addq.l #1,(sp)
   17a4c:	|  |  |  '--|----> move.l 24(sp),d0
   17a50:	|  |  |     |      cmp.l (sp),d0
   17a52:	|  |  '-----|----- bgt.s 17a12 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   17a54:	|  |        |      addq.l #1,4(sp)
   17a58:	|  '--------|----> move.l 16(sp),d0
   17a5c:	|           |      cmp.l 4(sp),d0
   17a60:	'-----------|----- bgt.s 17a0e <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   17a62:	            |      clr.w d0
}
   17a64:	            '----> lea 12(sp),sp
   17a68:	                   rts

00017a6a <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   17a6a:	             lea -28(sp),sp
   17a6e:	             move.l d3,-(sp)
   17a70:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   17a72:	             clr.l 32(sp)
   17a76:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17a7a:	             movea.l 40(sp),a0
   17a7e:	             move.l (a0),d0
   17a80:	             move.l d0,d1
   17a82:	             subq.l #1,d1
   17a84:	             move.l d1,28(sp)
   17a88:	   ,-------- bra.w 17c82 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   17a8c:	,--|-------> movea.l 1e992 <currentFloor>,a0
   17a92:	|  |         move.l 4(a0),d1
   17a96:	|  |         movea.l 40(sp),a0
   17a9a:	|  |         movea.l 4(a0),a0
   17a9e:	|  |         move.l 32(sp),d0
   17aa2:	|  |         add.l d0,d0
   17aa4:	|  |         add.l d0,d0
   17aa6:	|  |         adda.l d0,a0
   17aa8:	|  |         move.l (a0),d0
   17aaa:	|  |         lsl.l #3,d0
   17aac:	|  |         movea.l d1,a0
   17aae:	|  |         adda.l d0,a0
   17ab0:	|  |         move.l (a0),d0
   17ab2:	|  |         move.l d0,-(sp)
   17ab4:	|  |         jsr 18930 <__floatsisf>
   17aba:	|  |         addq.l #4,sp
   17abc:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   17ac0:	|  |         movea.l 1e992 <currentFloor>,a0
   17ac6:	|  |         move.l 4(a0),d1
   17aca:	|  |         movea.l 40(sp),a0
   17ace:	|  |         movea.l 4(a0),a0
   17ad2:	|  |         move.l 32(sp),d0
   17ad6:	|  |         add.l d0,d0
   17ad8:	|  |         add.l d0,d0
   17ada:	|  |         adda.l d0,a0
   17adc:	|  |         move.l (a0),d0
   17ade:	|  |         lsl.l #3,d0
   17ae0:	|  |         movea.l d1,a0
   17ae2:	|  |         adda.l d0,a0
   17ae4:	|  |         move.l 4(a0),d0
   17ae8:	|  |         move.l d0,-(sp)
   17aea:	|  |         jsr 18930 <__floatsisf>
   17af0:	|  |         addq.l #4,sp
   17af2:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   17af6:	|  |         movea.l 1e992 <currentFloor>,a0
   17afc:	|  |         move.l 4(a0),d1
   17b00:	|  |         movea.l 40(sp),a0
   17b04:	|  |         movea.l 4(a0),a0
   17b08:	|  |         move.l 28(sp),d0
   17b0c:	|  |         add.l d0,d0
   17b0e:	|  |         add.l d0,d0
   17b10:	|  |         adda.l d0,a0
   17b12:	|  |         move.l (a0),d0
   17b14:	|  |         lsl.l #3,d0
   17b16:	|  |         movea.l d1,a0
   17b18:	|  |         adda.l d0,a0
   17b1a:	|  |         move.l (a0),d0
   17b1c:	|  |         move.l d0,-(sp)
   17b1e:	|  |         jsr 18930 <__floatsisf>
   17b24:	|  |         addq.l #4,sp
   17b26:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   17b2a:	|  |         movea.l 1e992 <currentFloor>,a0
   17b30:	|  |         move.l 4(a0),d1
   17b34:	|  |         movea.l 40(sp),a0
   17b38:	|  |         movea.l 4(a0),a0
   17b3c:	|  |         move.l 28(sp),d0
   17b40:	|  |         add.l d0,d0
   17b42:	|  |         add.l d0,d0
   17b44:	|  |         adda.l d0,a0
   17b46:	|  |         move.l (a0),d0
   17b48:	|  |         lsl.l #3,d0
   17b4a:	|  |         movea.l d1,a0
   17b4c:	|  |         adda.l d0,a0
   17b4e:	|  |         move.l 4(a0),d0
   17b52:	|  |         move.l d0,-(sp)
   17b54:	|  |         jsr 18930 <__floatsisf>
   17b5a:	|  |         addq.l #4,sp
   17b5c:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17b60:	|  |         move.l 48(sp),-(sp)
   17b64:	|  |         jsr 18930 <__floatsisf>
   17b6a:	|  |         addq.l #4,sp
   17b6c:	|  |         move.l d0,-(sp)
   17b6e:	|  |         move.l 20(sp),-(sp)
   17b72:	|  |         jsr 18ad2 <__lesf2>
   17b78:	|  |         addq.l #8,sp
   17b7a:	|  |         tst.l d0
   17b7c:	|  |     ,-- bgt.s 17b9c <pointInFloorPolygon+0x132>
   17b7e:	|  |     |   move.l 48(sp),-(sp)
   17b82:	|  |     |   jsr 18930 <__floatsisf>
   17b88:	|  |     |   addq.l #4,sp
   17b8a:	|  |     |   move.l d0,-(sp)
   17b8c:	|  |     |   move.l 12(sp),-(sp)
   17b90:	|  |     |   jsr 18a9c <__gtsf2>
   17b96:	|  |     |   addq.l #8,sp
   17b98:	|  |     |   tst.l d0
   17b9a:	|  |  ,--|-- bgt.s 17bdc <pointInFloorPolygon+0x172>
   17b9c:	|  |  |  '-> move.l 48(sp),-(sp)
   17ba0:	|  |  |      jsr 18930 <__floatsisf>
   17ba6:	|  |  |      addq.l #4,sp
   17ba8:	|  |  |      move.l d0,-(sp)
   17baa:	|  |  |      move.l 12(sp),-(sp)
   17bae:	|  |  |      jsr 18ad2 <__lesf2>
   17bb4:	|  |  |      addq.l #8,sp
   17bb6:	|  |  |      tst.l d0
   17bb8:	|  |  |  ,-- bgt.w 17c72 <pointInFloorPolygon+0x208>
   17bbc:	|  |  |  |   move.l 48(sp),-(sp)
   17bc0:	|  |  |  |   jsr 18930 <__floatsisf>
   17bc6:	|  |  |  |   addq.l #4,sp
   17bc8:	|  |  |  |   move.l d0,-(sp)
   17bca:	|  |  |  |   move.l 20(sp),-(sp)
   17bce:	|  |  |  |   jsr 18a9c <__gtsf2>
   17bd4:	|  |  |  |   addq.l #8,sp
   17bd6:	|  |  |  |   tst.l d0
   17bd8:	|  |  |  +-- ble.w 17c72 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   17bdc:	|  |  '--|-> move.l 44(sp),-(sp)
   17be0:	|  |     |   jsr 18930 <__floatsisf>
   17be6:	|  |     |   addq.l #4,sp
   17be8:	|  |     |   move.l d0,d3
   17bea:	|  |     |   move.l 20(sp),-(sp)
   17bee:	|  |     |   move.l 16(sp),-(sp)
   17bf2:	|  |     |   jsr 18c24 <__subsf3>
   17bf8:	|  |     |   addq.l #8,sp
   17bfa:	|  |     |   move.l d0,d2
   17bfc:	|  |     |   move.l 48(sp),-(sp)
   17c00:	|  |     |   jsr 18930 <__floatsisf>
   17c06:	|  |     |   addq.l #4,sp
   17c08:	|  |     |   move.l 16(sp),-(sp)
   17c0c:	|  |     |   move.l d0,-(sp)
   17c0e:	|  |     |   jsr 18c24 <__subsf3>
   17c14:	|  |     |   addq.l #8,sp
   17c16:	|  |     |   move.l d0,-(sp)
   17c18:	|  |     |   move.l d2,-(sp)
   17c1a:	|  |     |   jsr 189e2 <__mulsf3>
   17c20:	|  |     |   addq.l #8,sp
   17c22:	|  |     |   move.l d0,d2
   17c24:	|  |     |   move.l 16(sp),-(sp)
   17c28:	|  |     |   move.l 12(sp),-(sp)
   17c2c:	|  |     |   jsr 18c24 <__subsf3>
   17c32:	|  |     |   addq.l #8,sp
   17c34:	|  |     |   move.l d0,-(sp)
   17c36:	|  |     |   move.l d2,-(sp)
   17c38:	|  |     |   jsr 187e6 <__divsf3>
   17c3e:	|  |     |   addq.l #8,sp
   17c40:	|  |     |   move.l 20(sp),-(sp)
   17c44:	|  |     |   move.l d0,-(sp)
   17c46:	|  |     |   jsr 186ec <__addsf3>
   17c4c:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17c4e:	|  |     |   move.l d0,-(sp)
   17c50:	|  |     |   move.l d3,-(sp)
   17c52:	|  |     |   jsr 18b56 <__ltsf2>
   17c58:	|  |     |   addq.l #8,sp
   17c5a:	|  |     |   tst.l d0
   17c5c:	|  |     +-- bge.s 17c72 <pointInFloorPolygon+0x208>

			c = !c;
   17c5e:	|  |     |   tst.l 24(sp)
   17c62:	|  |     |   seq d0
   17c64:	|  |     |   neg.b d0
   17c66:	|  |     |   move.b d0,d0
   17c68:	|  |     |   andi.l #255,d0
   17c6e:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17c72:	|  |     '-> move.l 32(sp),d0
   17c76:	|  |         move.l d0,d1
   17c78:	|  |         addq.l #1,d1
   17c7a:	|  |         move.l d1,32(sp)
   17c7e:	|  |         move.l d0,28(sp)
   17c82:	|  '-------> movea.l 40(sp),a0
   17c86:	|            move.l (a0),d0
   17c88:	|            cmp.l 32(sp),d0
   17c8c:	'----------- bgt.w 17a8c <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   17c90:	             tst.l 24(sp)
   17c94:	             sne d0
   17c96:	             neg.b d0
   17c98:	             move.b d0,d0
   17c9a:	             andi.w #255,d0
}
   17c9e:	             move.l (sp)+,d2
   17ca0:	             move.l (sp)+,d3
   17ca2:	             lea 28(sp),sp
   17ca6:	             rts

00017ca8 <setFloor>:

BOOL setFloor (int fileNum) {
   17ca8:	                               lea -132(sp),sp
   17cac:	                               move.l a6,-(sp)
   17cae:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   17cb0:	                               jsr 17910 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   17cb6:	                               move.l 144(sp),-(sp)
   17cba:	                               jsr 7f44 <openFileFromNum>
   17cc0:	                               addq.l #4,sp
   17cc2:	                               tst.l d0
   17cc4:	                           ,-- bne.s 17ccc <setFloor+0x24>
   17cc6:	                           |   clr.w d0
   17cc8:	,--------------------------|-- bra.w 18418 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17ccc:	|                          '-> movea.l 1e992 <currentFloor>,a0
   17cd2:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17cd6:	|                              move.l 1e85c <bigDataFile>,118(sp)
   17cde:	|                              move.l 1e87e <DOSBase>,d0
   17ce4:	|                              movea.l d0,a6
   17ce6:	|                              move.l 118(sp),d1
   17cea:	|                              jsr -306(a6)
   17cee:	|                              move.l d0,114(sp)
   17cf2:	|                              move.l 114(sp),d0
   17cf6:	|                              movea.l 1e992 <currentFloor>,a0
   17cfc:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   17d00:	|                              movea.l 1e992 <currentFloor>,a0
   17d06:	|                              move.l 8(a0),d0
   17d0a:	|                              lsl.l #3,d0
   17d0c:	|                              move.l d0,110(sp)
   17d10:	|                              clr.l 106(sp)
   17d14:	|                              move.l 1e876 <SysBase>,d0
   17d1a:	|                              movea.l d0,a6
   17d1c:	|                              move.l 110(sp),d0
   17d20:	|                              move.l 106(sp),d1
   17d24:	|                              jsr -684(a6)
   17d28:	|                              move.l d0,102(sp)
   17d2c:	|                              move.l 102(sp),d0
   17d30:	|                              movea.l 1e992 <currentFloor>,a0
   17d36:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   17d3a:	|                              movea.l 1e992 <currentFloor>,a0
   17d40:	|                              move.l 12(a0),d0
   17d44:	|                          ,-- bne.s 17d5a <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   17d46:	|                          |   pea 1bfcf <talk.c.490538ff+0x8fb>
   17d4c:	|                          |   jsr 184fe <KPrintF>
   17d52:	|                          |   addq.l #4,sp
		return FALSE;
   17d54:	|                          |   clr.w d0
   17d56:	+--------------------------|-- bra.w 18418 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17d5a:	|                          '-> clr.l 136(sp)
   17d5e:	|                    ,-------- bra.w 17e76 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   17d62:	|                 ,--|-------> move.l 1e85c <bigDataFile>,26(sp)
   17d6a:	|                 |  |         move.l 1e87e <DOSBase>,d0
   17d70:	|                 |  |         movea.l d0,a6
   17d72:	|                 |  |         move.l 26(sp),d1
   17d76:	|                 |  |         jsr -306(a6)
   17d7a:	|                 |  |         move.l d0,22(sp)
   17d7e:	|                 |  |         move.l 22(sp),d1
   17d82:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   17d88:	|                 |  |         movea.l 12(a0),a0
   17d8c:	|                 |  |         move.l 136(sp),d0
   17d90:	|                 |  |         lsl.l #3,d0
   17d92:	|                 |  |         adda.l d0,a0
   17d94:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17d96:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   17d9c:	|                 |  |         move.l 12(a0),d1
   17da0:	|                 |  |         move.l 136(sp),d0
   17da4:	|                 |  |         lsl.l #3,d0
   17da6:	|                 |  |         movea.l d1,a0
   17da8:	|                 |  |         adda.l d0,a0
   17daa:	|                 |  |         move.l (a0),d0
   17dac:	|                 |  |         add.l d0,d0
   17dae:	|                 |  |         add.l d0,d0
   17db0:	|                 |  |         move.l d0,18(sp)
   17db4:	|                 |  |         clr.l 14(sp)
   17db8:	|                 |  |         move.l 1e876 <SysBase>,d0
   17dbe:	|                 |  |         movea.l d0,a6
   17dc0:	|                 |  |         move.l 18(sp),d0
   17dc4:	|                 |  |         move.l 14(sp),d1
   17dc8:	|                 |  |         jsr -684(a6)
   17dcc:	|                 |  |         move.l d0,10(sp)
   17dd0:	|                 |  |         move.l 10(sp),d1
   17dd4:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   17dda:	|                 |  |         movea.l 12(a0),a0
   17dde:	|                 |  |         move.l 136(sp),d0
   17de2:	|                 |  |         lsl.l #3,d0
   17de4:	|                 |  |         adda.l d0,a0
   17de6:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17dea:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   17df0:	|                 |  |         move.l 12(a0),d1
   17df4:	|                 |  |         move.l 136(sp),d0
   17df8:	|                 |  |         lsl.l #3,d0
   17dfa:	|                 |  |         movea.l d1,a0
   17dfc:	|                 |  |         adda.l d0,a0
   17dfe:	|                 |  |         move.l 4(a0),d0
   17e02:	|                 |  |     ,-- bne.s 17e18 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   17e04:	|                 |  |     |   pea 1bfcf <talk.c.490538ff+0x8fb>
   17e0a:	|                 |  |     |   jsr 184fe <KPrintF>
   17e10:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17e12:	|                 |  |     |   clr.w d0
   17e14:	+-----------------|--|-----|-- bra.w 18418 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17e18:	|                 |  |     '-> clr.l 132(sp)
   17e1c:	|                 |  |     ,-- bra.s 17e56 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   17e1e:	|                 |  |  ,--|-> move.l 1e85c <bigDataFile>,d1
   17e24:	|                 |  |  |  |   movea.l 1e992 <currentFloor>,a0
   17e2a:	|                 |  |  |  |   movea.l 12(a0),a0
   17e2e:	|                 |  |  |  |   move.l 136(sp),d0
   17e32:	|                 |  |  |  |   lsl.l #3,d0
   17e34:	|                 |  |  |  |   adda.l d0,a0
   17e36:	|                 |  |  |  |   movea.l 4(a0),a0
   17e3a:	|                 |  |  |  |   move.l 132(sp),d0
   17e3e:	|                 |  |  |  |   add.l d0,d0
   17e40:	|                 |  |  |  |   add.l d0,d0
   17e42:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   17e46:	|                 |  |  |  |   move.l d1,-(sp)
   17e48:	|                 |  |  |  |   jsr 6bc <get2bytes>
   17e4e:	|                 |  |  |  |   addq.l #4,sp
   17e50:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17e52:	|                 |  |  |  |   addq.l #1,132(sp)
   17e56:	|                 |  |  |  '-> movea.l 1e992 <currentFloor>,a0
   17e5c:	|                 |  |  |      move.l 12(a0),d1
   17e60:	|                 |  |  |      move.l 136(sp),d0
   17e64:	|                 |  |  |      lsl.l #3,d0
   17e66:	|                 |  |  |      movea.l d1,a0
   17e68:	|                 |  |  |      adda.l d0,a0
   17e6a:	|                 |  |  |      move.l (a0),d0
   17e6c:	|                 |  |  |      cmp.l 132(sp),d0
   17e70:	|                 |  |  '----- bgt.s 17e1e <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17e72:	|                 |  |         addq.l #1,136(sp)
   17e76:	|                 |  '-------> movea.l 1e992 <currentFloor>,a0
   17e7c:	|                 |            move.l 8(a0),d0
   17e80:	|                 |            cmp.l 136(sp),d0
   17e84:	|                 '----------- bgt.w 17d62 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17e88:	|                              move.l 1e85c <bigDataFile>,d0
   17e8e:	|                              move.l d0,-(sp)
   17e90:	|                              jsr 6bc <get2bytes>
   17e96:	|                              addq.l #4,sp
   17e98:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17e9c:	|                              move.l 136(sp),d0
   17ea0:	|                              lsl.l #3,d0
   17ea2:	|                              move.l d0,98(sp)
   17ea6:	|                              clr.l 94(sp)
   17eaa:	|                              move.l 1e876 <SysBase>,d0
   17eb0:	|                              movea.l d0,a6
   17eb2:	|                              move.l 98(sp),d0
   17eb6:	|                              move.l 94(sp),d1
   17eba:	|                              jsr -684(a6)
   17ebe:	|                              move.l d0,90(sp)
   17ec2:	|                              move.l 90(sp),d0
   17ec6:	|                              movea.l 1e992 <currentFloor>,a0
   17ecc:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17ed0:	|                              movea.l 1e992 <currentFloor>,a0
   17ed6:	|                              move.l 4(a0),d0
   17eda:	|                          ,-- bne.s 17ef0 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17edc:	|                          |   pea 1bfcf <talk.c.490538ff+0x8fb>
   17ee2:	|                          |   jsr 184fe <KPrintF>
   17ee8:	|                          |   addq.l #4,sp
		return FALSE;
   17eea:	|                          |   clr.w d0
   17eec:	+--------------------------|-- bra.w 18418 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   17ef0:	|                          '-> clr.l 132(sp)
   17ef4:	|                          ,-- bra.s 17f48 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17ef6:	|                       ,--|-> move.l 1e85c <bigDataFile>,d1
   17efc:	|                       |  |   movea.l 1e992 <currentFloor>,a0
   17f02:	|                       |  |   movea.l 4(a0),a0
   17f06:	|                       |  |   move.l 132(sp),d0
   17f0a:	|                       |  |   lsl.l #3,d0
   17f0c:	|                       |  |   lea (0,a0,d0.l),a2
   17f10:	|                       |  |   move.l d1,-(sp)
   17f12:	|                       |  |   jsr 6bc <get2bytes>
   17f18:	|                       |  |   addq.l #4,sp
   17f1a:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17f1c:	|                       |  |   move.l 1e85c <bigDataFile>,d1
   17f22:	|                       |  |   movea.l 1e992 <currentFloor>,a0
   17f28:	|                       |  |   movea.l 4(a0),a0
   17f2c:	|                       |  |   move.l 132(sp),d0
   17f30:	|                       |  |   lsl.l #3,d0
   17f32:	|                       |  |   lea (0,a0,d0.l),a2
   17f36:	|                       |  |   move.l d1,-(sp)
   17f38:	|                       |  |   jsr 6bc <get2bytes>
   17f3e:	|                       |  |   addq.l #4,sp
   17f40:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17f44:	|                       |  |   addq.l #1,132(sp)
   17f48:	|                       |  '-> move.l 132(sp),d0
   17f4c:	|                       |      cmp.l 136(sp),d0
   17f50:	|                       '----- blt.s 17ef6 <setFloor+0x24e>
	}

	finishAccess ();
   17f52:	|                              jsr 7e3c <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17f58:	|                              movea.l 1e992 <currentFloor>,a0
   17f5e:	|                              move.l 8(a0),d0
   17f62:	|                              add.l d0,d0
   17f64:	|                              add.l d0,d0
   17f66:	|                              move.l d0,86(sp)
   17f6a:	|                              clr.l 82(sp)
   17f6e:	|                              move.l 1e876 <SysBase>,d0
   17f74:	|                              movea.l d0,a6
   17f76:	|                              move.l 86(sp),d0
   17f7a:	|                              move.l 82(sp),d1
   17f7e:	|                              jsr -684(a6)
   17f82:	|                              move.l d0,78(sp)
   17f86:	|                              move.l 78(sp),d0
   17f8a:	|                              movea.l 1e992 <currentFloor>,a0
   17f90:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17f94:	|                              movea.l 1e992 <currentFloor>,a0
   17f9a:	|                              move.l 8(a0),d0
   17f9e:	|                              add.l d0,d0
   17fa0:	|                              add.l d0,d0
   17fa2:	|                              move.l d0,74(sp)
   17fa6:	|                              clr.l 70(sp)
   17faa:	|                              move.l 1e876 <SysBase>,d0
   17fb0:	|                              movea.l d0,a6
   17fb2:	|                              move.l 74(sp),d0
   17fb6:	|                              move.l 70(sp),d1
   17fba:	|                              jsr -684(a6)
   17fbe:	|                              move.l d0,66(sp)
   17fc2:	|                              move.l 66(sp),d0
   17fc6:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17fca:	|                              movea.l 1e992 <currentFloor>,a0
   17fd0:	|                              move.l 16(a0),d0
   17fd4:	|                          ,-- bne.s 17fea <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17fd6:	|                          |   pea 1bfcf <talk.c.490538ff+0x8fb>
   17fdc:	|                          |   jsr 184fe <KPrintF>
   17fe2:	|                          |   addq.l #4,sp
		return FALSE;
   17fe4:	|                          |   clr.w d0
   17fe6:	+--------------------------|-- bra.w 18418 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17fea:	|                          '-> clr.l 136(sp)
   17fee:	|                    ,-------- bra.w 18112 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17ff2:	|                 ,--|-------> movea.l 1e992 <currentFloor>,a0
   17ff8:	|                 |  |         move.l 8(a0),d0
   17ffc:	|                 |  |         add.l d0,d0
   17ffe:	|                 |  |         add.l d0,d0
   18000:	|                 |  |         move.l d0,50(sp)
   18004:	|                 |  |         clr.l 46(sp)
   18008:	|                 |  |         move.l 1e876 <SysBase>,d0
   1800e:	|                 |  |         movea.l d0,a6
   18010:	|                 |  |         move.l 50(sp),d0
   18014:	|                 |  |         move.l 46(sp),d1
   18018:	|                 |  |         jsr -684(a6)
   1801c:	|                 |  |         move.l d0,42(sp)
   18020:	|                 |  |         move.l 42(sp),d0
   18024:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   1802a:	|                 |  |         movea.l 16(a0),a0
   1802e:	|                 |  |         move.l 136(sp),d1
   18032:	|                 |  |         add.l d1,d1
   18034:	|                 |  |         add.l d1,d1
   18036:	|                 |  |         adda.l d1,a0
   18038:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1803a:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   18040:	|                 |  |         move.l 8(a0),d0
   18044:	|                 |  |         add.l d0,d0
   18046:	|                 |  |         add.l d0,d0
   18048:	|                 |  |         move.l d0,38(sp)
   1804c:	|                 |  |         clr.l 34(sp)
   18050:	|                 |  |         move.l 1e876 <SysBase>,d0
   18056:	|                 |  |         movea.l d0,a6
   18058:	|                 |  |         move.l 38(sp),d0
   1805c:	|                 |  |         move.l 34(sp),d1
   18060:	|                 |  |         jsr -684(a6)
   18064:	|                 |  |         move.l d0,30(sp)
   18068:	|                 |  |         move.l 30(sp),d1
   1806c:	|                 |  |         move.l 136(sp),d0
   18070:	|                 |  |         add.l d0,d0
   18072:	|                 |  |         add.l d0,d0
   18074:	|                 |  |         movea.l 62(sp),a0
   18078:	|                 |  |         adda.l d0,a0
   1807a:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   1807c:	|                 |  |         movea.l 1e992 <currentFloor>,a0
   18082:	|                 |  |         move.l 16(a0),d1
   18086:	|                 |  |         move.l 136(sp),d0
   1808a:	|                 |  |         add.l d0,d0
   1808c:	|                 |  |         add.l d0,d0
   1808e:	|                 |  |         movea.l d1,a0
   18090:	|                 |  |         adda.l d0,a0
   18092:	|                 |  |         move.l (a0),d0
   18094:	|                 |  |     ,-- bne.s 180aa <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   18096:	|                 |  |     |   pea 1bfcf <talk.c.490538ff+0x8fb>
   1809c:	|                 |  |     |   jsr 184fe <KPrintF>
   180a2:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   180a4:	|                 |  |     |   clr.w d0
   180a6:	+-----------------|--|-----|-- bra.w 18418 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   180aa:	|                 |  |     '-> clr.l 132(sp)
   180ae:	|                 |  |     ,-- bra.s 180fe <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   180b0:	|                 |  |  ,--|-> movea.l 1e992 <currentFloor>,a0
   180b6:	|                 |  |  |  |   move.l 16(a0),d1
   180ba:	|                 |  |  |  |   move.l 136(sp),d0
   180be:	|                 |  |  |  |   add.l d0,d0
   180c0:	|                 |  |  |  |   add.l d0,d0
   180c2:	|                 |  |  |  |   movea.l d1,a0
   180c4:	|                 |  |  |  |   adda.l d0,a0
   180c6:	|                 |  |  |  |   move.l (a0),d1
   180c8:	|                 |  |  |  |   move.l 132(sp),d0
   180cc:	|                 |  |  |  |   add.l d0,d0
   180ce:	|                 |  |  |  |   add.l d0,d0
   180d0:	|                 |  |  |  |   movea.l d1,a0
   180d2:	|                 |  |  |  |   adda.l d0,a0
   180d4:	|                 |  |  |  |   moveq #-1,d1
   180d6:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   180d8:	|                 |  |  |  |   move.l 136(sp),d0
   180dc:	|                 |  |  |  |   add.l d0,d0
   180de:	|                 |  |  |  |   add.l d0,d0
   180e0:	|                 |  |  |  |   movea.l 62(sp),a0
   180e4:	|                 |  |  |  |   adda.l d0,a0
   180e6:	|                 |  |  |  |   move.l (a0),d1
   180e8:	|                 |  |  |  |   move.l 132(sp),d0
   180ec:	|                 |  |  |  |   add.l d0,d0
   180ee:	|                 |  |  |  |   add.l d0,d0
   180f0:	|                 |  |  |  |   movea.l d1,a0
   180f2:	|                 |  |  |  |   adda.l d0,a0
   180f4:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   180fa:	|                 |  |  |  |   addq.l #1,132(sp)
   180fe:	|                 |  |  |  '-> movea.l 1e992 <currentFloor>,a0
   18104:	|                 |  |  |      move.l 8(a0),d0
   18108:	|                 |  |  |      cmp.l 132(sp),d0
   1810c:	|                 |  |  '----- bgt.s 180b0 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1810e:	|                 |  |         addq.l #1,136(sp)
   18112:	|                 |  '-------> movea.l 1e992 <currentFloor>,a0
   18118:	|                 |            move.l 8(a0),d0
   1811c:	|                 |            cmp.l 136(sp),d0
   18120:	|                 '----------- bgt.w 17ff2 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18124:	|                              clr.l 136(sp)
   18128:	|              ,-------------- bra.w 1822e <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1812c:	|           ,--|-------------> clr.l 132(sp)
   18130:	|           |  |     ,-------- bra.w 18218 <setFloor+0x570>
			if (i != j) {
   18134:	|           |  |  ,--|-------> move.l 136(sp),d0
   18138:	|           |  |  |  |         cmp.l 132(sp),d0
   1813c:	|           |  |  |  |     ,-- beq.w 181ce <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   18140:	|           |  |  |  |     |   movea.l 1e992 <currentFloor>,a0
   18146:	|           |  |  |  |     |   move.l 12(a0),d1
   1814a:	|           |  |  |  |     |   move.l 132(sp),d0
   1814e:	|           |  |  |  |     |   lsl.l #3,d0
   18150:	|           |  |  |  |     |   movea.l d1,a1
   18152:	|           |  |  |  |     |   adda.l d0,a1
   18154:	|           |  |  |  |     |   movea.l 1e992 <currentFloor>,a0
   1815a:	|           |  |  |  |     |   move.l 12(a0),d1
   1815e:	|           |  |  |  |     |   move.l 136(sp),d0
   18162:	|           |  |  |  |     |   lsl.l #3,d0
   18164:	|           |  |  |  |     |   movea.l d1,a0
   18166:	|           |  |  |  |     |   adda.l d0,a0
   18168:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   1816c:	|           |  |  |  |     |   move.l (a1),-(sp)
   1816e:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   18172:	|           |  |  |  |     |   move.l (a0),-(sp)
   18174:	|           |  |  |  |     |   jsr 17a00 <polysShareSide>
   1817a:	|           |  |  |  |     |   lea 16(sp),sp
   1817e:	|           |  |  |  |     |   tst.w d0
   18180:	|           |  |  |  |  ,--|-- beq.w 18214 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   18184:	|           |  |  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   1818a:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1818e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   18192:	|           |  |  |  |  |  |   add.l d0,d0
   18194:	|           |  |  |  |  |  |   add.l d0,d0
   18196:	|           |  |  |  |  |  |   movea.l d1,a0
   18198:	|           |  |  |  |  |  |   adda.l d0,a0
   1819a:	|           |  |  |  |  |  |   move.l (a0),d1
   1819c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   181a0:	|           |  |  |  |  |  |   add.l d0,d0
   181a2:	|           |  |  |  |  |  |   add.l d0,d0
   181a4:	|           |  |  |  |  |  |   movea.l d1,a0
   181a6:	|           |  |  |  |  |  |   adda.l d0,a0
   181a8:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   181ac:	|           |  |  |  |  |  |   move.l 136(sp),d0
   181b0:	|           |  |  |  |  |  |   add.l d0,d0
   181b2:	|           |  |  |  |  |  |   add.l d0,d0
   181b4:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   181b8:	|           |  |  |  |  |  |   adda.l d0,a0
   181ba:	|           |  |  |  |  |  |   move.l (a0),d1
   181bc:	|           |  |  |  |  |  |   move.l 132(sp),d0
   181c0:	|           |  |  |  |  |  |   add.l d0,d0
   181c2:	|           |  |  |  |  |  |   add.l d0,d0
   181c4:	|           |  |  |  |  |  |   movea.l d1,a0
   181c6:	|           |  |  |  |  |  |   adda.l d0,a0
   181c8:	|           |  |  |  |  |  |   moveq #1,d1
   181ca:	|           |  |  |  |  |  |   move.l d1,(a0)
   181cc:	|           |  |  |  |  +--|-- bra.s 18214 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   181ce:	|           |  |  |  |  |  '-> movea.l 1e992 <currentFloor>,a0
   181d4:	|           |  |  |  |  |      move.l 16(a0),d1
   181d8:	|           |  |  |  |  |      move.l 136(sp),d0
   181dc:	|           |  |  |  |  |      add.l d0,d0
   181de:	|           |  |  |  |  |      add.l d0,d0
   181e0:	|           |  |  |  |  |      movea.l d1,a0
   181e2:	|           |  |  |  |  |      adda.l d0,a0
   181e4:	|           |  |  |  |  |      move.l (a0),d1
   181e6:	|           |  |  |  |  |      move.l 132(sp),d0
   181ea:	|           |  |  |  |  |      add.l d0,d0
   181ec:	|           |  |  |  |  |      add.l d0,d0
   181ee:	|           |  |  |  |  |      movea.l d1,a0
   181f0:	|           |  |  |  |  |      adda.l d0,a0
   181f2:	|           |  |  |  |  |      moveq #-2,d0
   181f4:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   181f6:	|           |  |  |  |  |      move.l 136(sp),d0
   181fa:	|           |  |  |  |  |      add.l d0,d0
   181fc:	|           |  |  |  |  |      add.l d0,d0
   181fe:	|           |  |  |  |  |      movea.l 62(sp),a0
   18202:	|           |  |  |  |  |      adda.l d0,a0
   18204:	|           |  |  |  |  |      move.l (a0),d1
   18206:	|           |  |  |  |  |      move.l 132(sp),d0
   1820a:	|           |  |  |  |  |      add.l d0,d0
   1820c:	|           |  |  |  |  |      add.l d0,d0
   1820e:	|           |  |  |  |  |      movea.l d1,a0
   18210:	|           |  |  |  |  |      adda.l d0,a0
   18212:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18214:	|           |  |  |  |  '----> addq.l #1,132(sp)
   18218:	|           |  |  |  '-------> movea.l 1e992 <currentFloor>,a0
   1821e:	|           |  |  |            move.l 8(a0),d0
   18222:	|           |  |  |            cmp.l 132(sp),d0
   18226:	|           |  |  '----------- bgt.w 18134 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1822a:	|           |  |               addq.l #1,136(sp)
   1822e:	|           |  '-------------> movea.l 1e992 <currentFloor>,a0
   18234:	|           |                  move.l 8(a0),d0
   18238:	|           |                  cmp.l 136(sp),d0
   1823c:	|           '----------------- bgt.w 1812c <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   18240:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   18244:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   18248:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1824c:	|  |                           clr.l 136(sp)
   18250:	|  |     ,-------------------- bra.w 183a6 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18254:	|  |  ,--|-------------------> clr.l 132(sp)
   18258:	|  |  |  |     ,-------------- bra.w 18390 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1825c:	|  |  |  |  ,--|-------------> movea.l 1e992 <currentFloor>,a0
   18262:	|  |  |  |  |  |               move.l 16(a0),d1
   18266:	|  |  |  |  |  |               move.l 136(sp),d0
   1826a:	|  |  |  |  |  |               add.l d0,d0
   1826c:	|  |  |  |  |  |               add.l d0,d0
   1826e:	|  |  |  |  |  |               movea.l d1,a0
   18270:	|  |  |  |  |  |               adda.l d0,a0
   18272:	|  |  |  |  |  |               move.l (a0),d1
   18274:	|  |  |  |  |  |               move.l 132(sp),d0
   18278:	|  |  |  |  |  |               add.l d0,d0
   1827a:	|  |  |  |  |  |               add.l d0,d0
   1827c:	|  |  |  |  |  |               movea.l d1,a0
   1827e:	|  |  |  |  |  |               adda.l d0,a0
   18280:	|  |  |  |  |  |               move.l (a0),d0
   18282:	|  |  |  |  |  |               moveq #-1,d1
   18284:	|  |  |  |  |  |               cmp.l d0,d1
   18286:	|  |  |  |  |  |  ,----------- bne.w 1838c <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1828a:	|  |  |  |  |  |  |            clr.l 122(sp)
   1828e:	|  |  |  |  |  |  |     ,----- bra.w 1837a <setFloor+0x6d2>
						if (d != i && d != j) {
   18292:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   18296:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   1829a:	|  |  |  |  |  |  |  |  |  ,-- beq.w 18376 <setFloor+0x6ce>
   1829e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   182a2:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   182a6:	|  |  |  |  |  |  |  |  |  +-- beq.w 18376 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   182aa:	|  |  |  |  |  |  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   182b0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   182b4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   182b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182bc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182be:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182c0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   182c2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   182c6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182c8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182ca:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182cc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182ce:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   182d0:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   182d4:	|  |  |  |  |  |  |  |  |  +-- bne.w 18376 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   182d8:	|  |  |  |  |  |  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   182de:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   182e2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   182e6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182e8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182ea:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182ec:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182ee:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   182f0:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   182f4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182f8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182fa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182fc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   182fe:	|  |  |  |  |  |  |  |  |  +-- bmi.s 18376 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   18300:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   18304:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18306:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18308:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1830c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1830e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18310:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18314:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18316:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18318:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1831a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1831c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1831e:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   18322:	|  |  |  |  |  |  |  |  |  +-- bgt.s 18376 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   18324:	|  |  |  |  |  |  |  |  |  |   movea.l 1e992 <currentFloor>,a0
   1832a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1832e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18332:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18334:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18336:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18338:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1833a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1833c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18340:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18342:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18344:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18346:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18348:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   1834c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18350:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18352:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18354:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   18358:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1835a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1835c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18360:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18362:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18364:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18366:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18368:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   1836c:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   1836e:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   18370:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   18376:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   1837a:	|  |  |  |  |  |  |  |  '----> movea.l 1e992 <currentFloor>,a0
   18380:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   18384:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   18388:	|  |  |  |  |  |  |  '-------- bgt.w 18292 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1838c:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   18390:	|  |  |  |  |  '-------------> movea.l 1e992 <currentFloor>,a0
   18396:	|  |  |  |  |                  move.l 8(a0),d0
   1839a:	|  |  |  |  |                  cmp.l 132(sp),d0
   1839e:	|  |  |  |  '----------------- bgt.w 1825c <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183a2:	|  |  |  |                     addq.l #1,136(sp)
   183a6:	|  |  |  '-------------------> movea.l 1e992 <currentFloor>,a0
   183ac:	|  |  |                        move.l 8(a0),d0
   183b0:	|  |  |                        cmp.l 136(sp),d0
   183b4:	|  |  '----------------------- bgt.w 18254 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   183b8:	|  |                           tst.w 130(sp)
   183bc:	|  '-------------------------- bne.w 18244 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183c0:	|                              clr.l 136(sp)
   183c4:	|                          ,-- bra.s 183ec <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   183c6:	|                       ,--|-> move.l 136(sp),d0
   183ca:	|                       |  |   add.l d0,d0
   183cc:	|                       |  |   add.l d0,d0
   183ce:	|                       |  |   movea.l 62(sp),a0
   183d2:	|                       |  |   adda.l d0,a0
   183d4:	|                       |  |   move.l (a0),54(sp)
   183d8:	|                       |  |   move.l 1e876 <SysBase>,d0
   183de:	|                       |  |   movea.l d0,a6
   183e0:	|                       |  |   movea.l 54(sp),a1
   183e4:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183e8:	|                       |  |   addq.l #1,136(sp)
   183ec:	|                       |  '-> movea.l 1e992 <currentFloor>,a0
   183f2:	|                       |      move.l 8(a0),d0
   183f6:	|                       |      cmp.l 136(sp),d0
   183fa:	|                       '----- bgt.s 183c6 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   183fc:	|                              move.l 62(sp),58(sp)
   18402:	|                              move.l 1e876 <SysBase>,d0
   18408:	|                              movea.l d0,a6
   1840a:	|                              movea.l 58(sp),a1
   1840e:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   18412:	|                              clr.l 62(sp)

	return TRUE;
   18416:	|                              moveq #1,d0
}
   18418:	'----------------------------> movea.l (sp)+,a2
   1841a:	                               movea.l (sp)+,a6
   1841c:	                               lea 132(sp),sp
   18420:	                               rts

00018422 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   18422:	jsr 17910 <killFloor>
	noFloor ();
   18428:	jsr 17818 <noFloor>
   1842e:	nop
   18430:	rts

00018432 <WaitVbl>:
void WaitVbl() {
   18432:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   18434:	   ,-> movea.l #14675972,a0
   1843a:	   |   move.l (a0),d0
   1843c:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1843e:	   |   move.l (sp),d0
   18440:	   |   andi.l #130816,d0
   18446:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   18448:	   |   move.l (sp),d0
   1844a:	   |   cmpi.l #76800,d0
   18450:	   '-- beq.s 18434 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   18452:	,----> movea.l #14675972,a0
   18458:	|      move.l (a0),d0
   1845a:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1845e:	|      move.l 4(sp),d0
   18462:	|      andi.l #130816,d0
   18468:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1846c:	|      move.l 4(sp),d0
   18470:	|      cmpi.l #76800,d0
   18476:	|  ,-- beq.s 1847a <WaitVbl+0x48>
	while (1) {
   18478:	'--|-- bra.s 18452 <WaitVbl+0x20>
			break;
   1847a:	   '-> nop
}
   1847c:	       nop
   1847e:	       addq.l #8,sp
   18480:	       rts

00018482 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   18482:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   18484:	       move.l 8(sp),(sp)
	while(len-- > 0)
   18488:	   ,-- bra.s 1849a <memset+0x18>
		*ptr++ = val;
   1848a:	,--|-> move.l (sp),d0
   1848c:	|  |   move.l d0,d1
   1848e:	|  |   addq.l #1,d1
   18490:	|  |   move.l d1,(sp)
   18492:	|  |   move.l 12(sp),d1
   18496:	|  |   movea.l d0,a0
   18498:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1849a:	|  '-> move.l 16(sp),d0
   1849e:	|      move.l d0,d1
   184a0:	|      subq.l #1,d1
   184a2:	|      move.l d1,16(sp)
   184a6:	|      tst.l d0
   184a8:	'----- bne.s 1848a <memset+0x8>
	return dest;
   184aa:	       move.l 8(sp),d0
}
   184ae:	       addq.l #4,sp
   184b0:	       rts

000184b2 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   184b2:	       subq.l #8,sp
   184b4:	       move.l d2,-(sp)
	char *d = (char *)dest;
   184b6:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   184bc:	       move.l 20(sp),4(sp)
	while(len--)
   184c2:	   ,-- bra.s 184e4 <memcpy+0x32>
		*d++ = *s++;
   184c4:	,--|-> move.l 4(sp),d1
   184c8:	|  |   move.l d1,d0
   184ca:	|  |   addq.l #1,d0
   184cc:	|  |   move.l d0,4(sp)
   184d0:	|  |   move.l 8(sp),d0
   184d4:	|  |   move.l d0,d2
   184d6:	|  |   addq.l #1,d2
   184d8:	|  |   move.l d2,8(sp)
   184dc:	|  |   movea.l d1,a0
   184de:	|  |   move.b (a0),d1
   184e0:	|  |   movea.l d0,a0
   184e2:	|  |   move.b d1,(a0)
	while(len--)
   184e4:	|  '-> move.l 24(sp),d0
   184e8:	|      move.l d0,d1
   184ea:	|      subq.l #1,d1
   184ec:	|      move.l d1,24(sp)
   184f0:	|      tst.l d0
   184f2:	'----- bne.s 184c4 <memcpy+0x12>
	return dest;
   184f4:	       move.l 16(sp),d0
}
   184f8:	       move.l (sp)+,d2
   184fa:	       addq.l #8,sp
   184fc:	       rts

000184fe <KPrintF>:
void KPrintF(const char* fmt, ...) {
   184fe:	       lea -128(sp),sp
   18502:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   18506:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec283b>,d0
   1850c:	       cmpi.w #20153,d0
   18510:	   ,-- beq.s 18534 <KPrintF+0x36>
   18512:	   |   cmpi.w #-24562,d0
   18516:	   +-- beq.s 18534 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   18518:	   |   movea.l 1e876 <SysBase>,a6
   1851e:	   |   movea.l 144(sp),a0
   18522:	   |   lea 148(sp),a1
   18526:	   |   lea 18f92 <KPutCharX>,a2
   1852c:	   |   suba.l a3,a3
   1852e:	   |   jsr -522(a6)
}
   18532:	,--|-- bra.s 1855e <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   18534:	|  '-> movea.l 1e876 <SysBase>,a6
   1853a:	|      movea.l 144(sp),a0
   1853e:	|      lea 148(sp),a1
   18542:	|      lea 18fa0 <PutChar>,a2
   18548:	|      lea 12(sp),a3
   1854c:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   18550:	|      move.l a3,-(sp)
   18552:	|      pea 56 <_start+0x56>
   18556:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec283b>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1855c:	|      addq.l #8,sp
}
   1855e:	'----> movem.l (sp)+,a2-a3/a6
   18562:	       lea 128(sp),sp
   18566:	       rts

00018568 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   18568:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1856a:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   18570:	       movea.l (sp),a0
   18572:	       move.w (a0),d0
   18574:	       cmpi.w #20153,d0
   18578:	   ,-- beq.s 18584 <debug_cmd+0x1c>
   1857a:	   |   movea.l (sp),a0
   1857c:	   |   move.w (a0),d0
   1857e:	   |   cmpi.w #-24562,d0
   18582:	,--|-- bne.s 185a2 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   18584:	|  '-> move.l 20(sp),-(sp)
   18588:	|      move.l 20(sp),-(sp)
   1858c:	|      move.l 20(sp),-(sp)
   18590:	|      move.l 20(sp),-(sp)
   18594:	|      pea 58 <_start+0x58>
   18598:	|      movea.l 20(sp),a0
   1859c:	|      jsr (a0)
   1859e:	|      lea 20(sp),sp
	}
}
   185a2:	'----> nop
   185a4:	       addq.l #4,sp
   185a6:	       rts

000185a8 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   185a8:	       move.l d2,-(sp)
	while(*source && --num > 0)
   185aa:	   ,-- bra.s 185cc <my_strncpy+0x24>
		*destination++ = *source++;
   185ac:	,--|-> move.l 12(sp),d1
   185b0:	|  |   move.l d1,d0
   185b2:	|  |   addq.l #1,d0
   185b4:	|  |   move.l d0,12(sp)
   185b8:	|  |   move.l 8(sp),d0
   185bc:	|  |   move.l d0,d2
   185be:	|  |   addq.l #1,d2
   185c0:	|  |   move.l d2,8(sp)
   185c4:	|  |   movea.l d1,a0
   185c6:	|  |   move.b (a0),d1
   185c8:	|  |   movea.l d0,a0
   185ca:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   185cc:	|  '-> movea.l 12(sp),a0
   185d0:	|      move.b (a0),d0
   185d2:	|  ,-- beq.s 185da <my_strncpy+0x32>
   185d4:	|  |   subq.l #1,16(sp)
   185d8:	'--|-- bne.s 185ac <my_strncpy+0x4>
	*destination = '\0';
   185da:	   '-> movea.l 8(sp),a0
   185de:	       clr.b (a0)
}
   185e0:	       nop
   185e2:	       move.l (sp)+,d2
   185e4:	       rts

000185e6 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   185e6:	    lea -60(sp),sp
   185ea:	    movea.l 72(sp),a1
   185ee:	    movea.l 76(sp),a0
   185f2:	    move.l 80(sp),d1
   185f6:	    move.l 84(sp),d0
   185fa:	    movea.w a1,a1
   185fc:	    move.w a1,8(sp)
   18600:	    movea.w a0,a0
   18602:	    move.w a0,6(sp)
   18606:	    move.w d1,d1
   18608:	    move.w d1,4(sp)
   1860c:	    move.w d0,d0
   1860e:	    move.w d0,2(sp)
	struct debug_resource resource = {
   18612:	    lea 10(sp),a0
   18616:	    clr.l (a0)
   18618:	    addq.l #4,a0
   1861a:	    clr.l (a0)
   1861c:	    addq.l #4,a0
   1861e:	    clr.l (a0)
   18620:	    addq.l #4,a0
   18622:	    clr.l (a0)
   18624:	    addq.l #4,a0
   18626:	    clr.l (a0)
   18628:	    addq.l #4,a0
   1862a:	    clr.l (a0)
   1862c:	    addq.l #4,a0
   1862e:	    clr.l (a0)
   18630:	    addq.l #4,a0
   18632:	    clr.l (a0)
   18634:	    addq.l #4,a0
   18636:	    clr.l (a0)
   18638:	    addq.l #4,a0
   1863a:	    clr.l (a0)
   1863c:	    addq.l #4,a0
   1863e:	    clr.l (a0)
   18640:	    addq.l #4,a0
   18642:	    clr.l (a0)
   18644:	    addq.l #4,a0
   18646:	    clr.w (a0)
   18648:	    addq.l #2,a0
		.address = (unsigned int)addr,
   1864a:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1864e:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   18652:	    move.w 8(sp),d0
   18656:	,-- bpl.s 1865a <debug_register_bitmap+0x74>
   18658:	|   addq.w #7,d0
   1865a:	'-> asr.w #3,d0
   1865c:	    movea.w d0,a0
   1865e:	    movea.w 6(sp),a1
   18662:	    move.l a1,-(sp)
   18664:	    move.l a0,-(sp)
   18666:	    jsr 18e8a <__mulsi3>
   1866c:	    addq.l #8,sp
   1866e:	    movea.w 4(sp),a0
   18672:	    move.l a0,-(sp)
   18674:	    move.l d0,-(sp)
   18676:	    jsr 18e8a <__mulsi3>
   1867c:	    addq.l #8,sp
	struct debug_resource resource = {
   1867e:	    move.l d0,14(sp)
   18682:	    move.w 2(sp),52(sp)
   18688:	    move.w 8(sp),54(sp)
   1868e:	    move.w 6(sp),56(sp)
   18694:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   1869a:	    moveq #0,d0
   1869c:	    move.w 2(sp),d0
   186a0:	    moveq #2,d1
   186a2:	    and.l d1,d0
   186a4:	,-- beq.s 186b0 <debug_register_bitmap+0xca>
		resource.size *= 2;
   186a6:	|   move.l 14(sp),d0
   186aa:	|   add.l d0,d0
   186ac:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   186b0:	'-> pea 20 <_start+0x20>
   186b4:	    move.l 72(sp),-(sp)
   186b8:	    lea 18(sp),a0
   186bc:	    move.l a0,d0
   186be:	    addq.l #8,d0
   186c0:	    move.l d0,-(sp)
   186c2:	    jsr 185a8 <my_strncpy>
   186c8:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   186cc:	    lea 10(sp),a0
   186d0:	    clr.l -(sp)
   186d2:	    clr.l -(sp)
   186d4:	    move.l a0,-(sp)
   186d6:	    pea 4 <_start+0x4>
   186da:	    jsr 18568 <debug_cmd>
   186e0:	    lea 16(sp),sp
}
   186e4:	    nop
   186e6:	    lea 60(sp),sp
   186ea:	    rts

000186ec <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   186ec:	lea -12(sp),sp
   186f0:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   186f2:	move.l 20(sp),12(sp)
   186f8:	move.l 24(sp),8(sp)
   186fe:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18704:	movea.l d0,a6
   18706:	move.l 12(sp),d0
   1870a:	move.l 8(sp),d1
   1870e:	jsr -66(a6)
   18712:	move.l d0,4(sp)
   18716:	move.l 4(sp),d0
}
   1871a:	movea.l (sp)+,a6
   1871c:	lea 12(sp),sp
   18720:	rts

00018722 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   18722:	lea -32(sp),sp
   18726:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1872a:	move.l 48(sp),36(sp)
   18730:	move.l 52(sp),40(sp)
   18736:	move.l 56(sp),28(sp)
   1873c:	move.l 60(sp),32(sp)
   18742:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   18748:	movea.l d0,a6
   1874a:	move.l 36(sp),d0
   1874e:	move.l 40(sp),d1
   18752:	move.l 28(sp),d2
   18756:	move.l 32(sp),d3
   1875a:	jsr -66(a6)
   1875e:	move.l d0,12(sp)
   18762:	move.l d1,16(sp)
   18766:	move.l 12(sp),20(sp)
   1876c:	move.l 16(sp),24(sp)
   18772:	move.l 20(sp),d0
   18776:	move.l 24(sp),d1
}
   1877a:	movem.l (sp)+,d2-d3/a6
   1877e:	lea 32(sp),sp
   18782:	rts

00018784 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   18784:	lea -32(sp),sp
   18788:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1878c:	move.l 48(sp),36(sp)
   18792:	move.l 52(sp),40(sp)
   18798:	move.l 56(sp),28(sp)
   1879e:	move.l 60(sp),32(sp)
   187a4:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   187aa:	movea.l d0,a6
   187ac:	move.l 36(sp),d0
   187b0:	move.l 40(sp),d1
   187b4:	move.l 28(sp),d2
   187b8:	move.l 32(sp),d3
   187bc:	jsr -84(a6)
   187c0:	move.l d0,12(sp)
   187c4:	move.l d1,16(sp)
   187c8:	move.l 12(sp),20(sp)
   187ce:	move.l 16(sp),24(sp)
   187d4:	move.l 20(sp),d0
   187d8:	move.l 24(sp),d1
}
   187dc:	movem.l (sp)+,d2-d3/a6
   187e0:	lea 32(sp),sp
   187e4:	rts

000187e6 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   187e6:	lea -12(sp),sp
   187ea:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   187ec:	move.l 20(sp),12(sp)
   187f2:	move.l 24(sp),8(sp)
   187f8:	move.l 1e886 <MathIeeeSingBasBase>,d0
   187fe:	movea.l d0,a6
   18800:	move.l 12(sp),d0
   18804:	move.l 8(sp),d1
   18808:	jsr -84(a6)
   1880c:	move.l d0,4(sp)
   18810:	move.l 4(sp),d0
}
   18814:	movea.l (sp)+,a6
   18816:	lea 12(sp),sp
   1881a:	rts

0001881c <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1881c:	lea -12(sp),sp
   18820:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18822:	move.l 20(sp),12(sp)
   18828:	move.l 24(sp),8(sp)
   1882e:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18834:	movea.l d0,a6
   18836:	move.l 12(sp),d0
   1883a:	move.l 8(sp),d1
   1883e:	jsr -42(a6)
   18842:	move.l d0,4(sp)
   18846:	move.l 4(sp),d0
}
   1884a:	movea.l (sp)+,a6
   1884c:	lea 12(sp),sp
   18850:	rts

00018852 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   18852:	lea -20(sp),sp
   18856:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   18858:	move.l 28(sp),20(sp)
   1885e:	move.l 1e892 <MathIeeeDoubTransBase>,d0
   18864:	movea.l d0,a6
   18866:	move.l 20(sp),d0
   1886a:	jsr -108(a6)
   1886e:	move.l d0,4(sp)
   18872:	move.l d1,8(sp)
   18876:	move.l 4(sp),12(sp)
   1887c:	move.l 8(sp),16(sp)
   18882:	move.l 12(sp),d0
   18886:	move.l 16(sp),d1
}
   1888a:	movea.l (sp)+,a6
   1888c:	lea 20(sp),sp
   18890:	rts

00018892 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   18892:	lea -12(sp),sp
   18896:	move.l a6,-(sp)
	return IEEEDPFix(value);
   18898:	move.l 20(sp),8(sp)
   1889e:	move.l 24(sp),12(sp)
   188a4:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   188aa:	movea.l d0,a6
   188ac:	move.l 8(sp),d0
   188b0:	move.l 12(sp),d1
   188b4:	jsr -30(a6)
   188b8:	move.l d0,4(sp)
   188bc:	move.l 4(sp),d0
}
   188c0:	movea.l (sp)+,a6
   188c2:	lea 12(sp),sp
   188c6:	rts

000188c8 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   188c8:	subq.l #8,sp
   188ca:	move.l a6,-(sp)
	return IEEESPFix(value);
   188cc:	move.l 16(sp),8(sp)
   188d2:	move.l 1e886 <MathIeeeSingBasBase>,d0
   188d8:	movea.l d0,a6
   188da:	move.l 8(sp),d0
   188de:	jsr -30(a6)
   188e2:	move.l d0,4(sp)
   188e6:	move.l 4(sp),d0
}
   188ea:	movea.l (sp)+,a6
   188ec:	addq.l #8,sp
   188ee:	rts

000188f0 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   188f0:	lea -20(sp),sp
   188f4:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   188f6:	move.l 28(sp),20(sp)
   188fc:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   18902:	movea.l d0,a6
   18904:	move.l 20(sp),d0
   18908:	jsr -36(a6)
   1890c:	move.l d0,4(sp)
   18910:	move.l d1,8(sp)
   18914:	move.l 4(sp),12(sp)
   1891a:	move.l 8(sp),16(sp)
   18920:	move.l 12(sp),d0
   18924:	move.l 16(sp),d1
}
   18928:	movea.l (sp)+,a6
   1892a:	lea 20(sp),sp
   1892e:	rts

00018930 <__floatsisf>:

FLOAT __floatsisf(int i) {
   18930:	subq.l #8,sp
   18932:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   18934:	move.l 16(sp),8(sp)
   1893a:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18940:	movea.l d0,a6
   18942:	move.l 8(sp),d0
   18946:	jsr -36(a6)
   1894a:	move.l d0,4(sp)
   1894e:	move.l 4(sp),d0
}
   18952:	movea.l (sp)+,a6
   18954:	addq.l #8,sp
   18956:	rts

00018958 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   18958:	subq.l #8,sp
   1895a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1895c:	move.l 16(sp),8(sp)
   18962:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18968:	movea.l d0,a6
   1896a:	move.l 8(sp),d0
   1896e:	jsr -36(a6)
   18972:	move.l d0,4(sp)
   18976:	move.l 4(sp),d0
}
   1897a:	movea.l (sp)+,a6
   1897c:	addq.l #8,sp
   1897e:	rts

00018980 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   18980:	lea -32(sp),sp
   18984:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   18988:	move.l 48(sp),36(sp)
   1898e:	move.l 52(sp),40(sp)
   18994:	move.l 56(sp),28(sp)
   1899a:	move.l 60(sp),32(sp)
   189a0:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   189a6:	movea.l d0,a6
   189a8:	move.l 36(sp),d0
   189ac:	move.l 40(sp),d1
   189b0:	move.l 28(sp),d2
   189b4:	move.l 32(sp),d3
   189b8:	jsr -78(a6)
   189bc:	move.l d0,12(sp)
   189c0:	move.l d1,16(sp)
   189c4:	move.l 12(sp),20(sp)
   189ca:	move.l 16(sp),24(sp)
   189d0:	move.l 20(sp),d0
   189d4:	move.l 24(sp),d1
}
   189d8:	movem.l (sp)+,d2-d3/a6
   189dc:	lea 32(sp),sp
   189e0:	rts

000189e2 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   189e2:	lea -12(sp),sp
   189e6:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   189e8:	move.l 20(sp),12(sp)
   189ee:	move.l 24(sp),8(sp)
   189f4:	move.l 1e886 <MathIeeeSingBasBase>,d0
   189fa:	movea.l d0,a6
   189fc:	move.l 12(sp),d0
   18a00:	move.l 8(sp),d1
   18a04:	jsr -78(a6)
   18a08:	move.l d0,4(sp)
   18a0c:	move.l 4(sp),d0
}
   18a10:	movea.l (sp)+,a6
   18a12:	lea 12(sp),sp
   18a16:	rts

00018a18 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   18a18:	lea -12(sp),sp
   18a1c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18a1e:	move.l 20(sp),12(sp)
   18a24:	move.l 24(sp),8(sp)
   18a2a:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18a30:	movea.l d0,a6
   18a32:	move.l 12(sp),d0
   18a36:	move.l 8(sp),d1
   18a3a:	jsr -42(a6)
   18a3e:	move.l d0,4(sp)
   18a42:	move.l 4(sp),d0
}
   18a46:	movea.l (sp)+,a6
   18a48:	lea 12(sp),sp
   18a4c:	rts

00018a4e <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   18a4e:	lea -20(sp),sp
   18a52:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18a56:	move.l 36(sp),24(sp)
   18a5c:	move.l 40(sp),28(sp)
   18a62:	move.l 44(sp),16(sp)
   18a68:	move.l 48(sp),20(sp)
   18a6e:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   18a74:	movea.l d0,a6
   18a76:	move.l 24(sp),d0
   18a7a:	move.l 28(sp),d1
   18a7e:	move.l 16(sp),d2
   18a82:	move.l 20(sp),d3
   18a86:	jsr -42(a6)
   18a8a:	move.l d0,12(sp)
   18a8e:	move.l 12(sp),d0
}
   18a92:	movem.l (sp)+,d2-d3/a6
   18a96:	lea 20(sp),sp
   18a9a:	rts

00018a9c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   18a9c:	lea -12(sp),sp
   18aa0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18aa2:	move.l 20(sp),12(sp)
   18aa8:	move.l 24(sp),8(sp)
   18aae:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18ab4:	movea.l d0,a6
   18ab6:	move.l 12(sp),d0
   18aba:	move.l 8(sp),d1
   18abe:	jsr -42(a6)
   18ac2:	move.l d0,4(sp)
   18ac6:	move.l 4(sp),d0
}
   18aca:	movea.l (sp)+,a6
   18acc:	lea 12(sp),sp
   18ad0:	rts

00018ad2 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   18ad2:	lea -12(sp),sp
   18ad6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18ad8:	move.l 20(sp),12(sp)
   18ade:	move.l 24(sp),8(sp)
   18ae4:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18aea:	movea.l d0,a6
   18aec:	move.l 12(sp),d0
   18af0:	move.l 8(sp),d1
   18af4:	jsr -42(a6)
   18af8:	move.l d0,4(sp)
   18afc:	move.l 4(sp),d0
}
   18b00:	movea.l (sp)+,a6
   18b02:	lea 12(sp),sp
   18b06:	rts

00018b08 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   18b08:	lea -20(sp),sp
   18b0c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18b10:	move.l 36(sp),24(sp)
   18b16:	move.l 40(sp),28(sp)
   18b1c:	move.l 44(sp),16(sp)
   18b22:	move.l 48(sp),20(sp)
   18b28:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   18b2e:	movea.l d0,a6
   18b30:	move.l 24(sp),d0
   18b34:	move.l 28(sp),d1
   18b38:	move.l 16(sp),d2
   18b3c:	move.l 20(sp),d3
   18b40:	jsr -42(a6)
   18b44:	move.l d0,12(sp)
   18b48:	move.l 12(sp),d0
}
   18b4c:	movem.l (sp)+,d2-d3/a6
   18b50:	lea 20(sp),sp
   18b54:	rts

00018b56 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   18b56:	lea -12(sp),sp
   18b5a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b5c:	move.l 20(sp),12(sp)
   18b62:	move.l 24(sp),8(sp)
   18b68:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18b6e:	movea.l d0,a6
   18b70:	move.l 12(sp),d0
   18b74:	move.l 8(sp),d1
   18b78:	jsr -42(a6)
   18b7c:	move.l d0,4(sp)
   18b80:	move.l 4(sp),d0
}
   18b84:	movea.l (sp)+,a6
   18b86:	lea 12(sp),sp
   18b8a:	rts

00018b8c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   18b8c:	lea -12(sp),sp
   18b90:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b92:	move.l 20(sp),12(sp)
   18b98:	move.l 24(sp),8(sp)
   18b9e:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18ba4:	movea.l d0,a6
   18ba6:	move.l 12(sp),d0
   18baa:	move.l 8(sp),d1
   18bae:	jsr -42(a6)
   18bb2:	move.l d0,4(sp)
   18bb6:	move.l 4(sp),d0
}
   18bba:	movea.l (sp)+,a6
   18bbc:	lea 12(sp),sp
   18bc0:	rts

00018bc2 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   18bc2:	lea -32(sp),sp
   18bc6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   18bca:	move.l 48(sp),36(sp)
   18bd0:	move.l 52(sp),40(sp)
   18bd6:	move.l 56(sp),28(sp)
   18bdc:	move.l 60(sp),32(sp)
   18be2:	move.l 1e88e <MathIeeeDoubBasBase>,d0
   18be8:	movea.l d0,a6
   18bea:	move.l 36(sp),d0
   18bee:	move.l 40(sp),d1
   18bf2:	move.l 28(sp),d2
   18bf6:	move.l 32(sp),d3
   18bfa:	jsr -72(a6)
   18bfe:	move.l d0,12(sp)
   18c02:	move.l d1,16(sp)
   18c06:	move.l 12(sp),20(sp)
   18c0c:	move.l 16(sp),24(sp)
   18c12:	move.l 20(sp),d0
   18c16:	move.l 24(sp),d1
}
   18c1a:	movem.l (sp)+,d2-d3/a6
   18c1e:	lea 32(sp),sp
   18c22:	rts

00018c24 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   18c24:	lea -12(sp),sp
   18c28:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   18c2a:	move.l 20(sp),12(sp)
   18c30:	move.l 24(sp),8(sp)
   18c36:	move.l 1e886 <MathIeeeSingBasBase>,d0
   18c3c:	movea.l d0,a6
   18c3e:	move.l 12(sp),d0
   18c42:	move.l 8(sp),d1
   18c46:	jsr -72(a6)
   18c4a:	move.l d0,4(sp)
   18c4e:	move.l 4(sp),d0
}
   18c52:	movea.l (sp)+,a6
   18c54:	lea 12(sp),sp
   18c58:	rts

00018c5a <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   18c5a:	lea -12(sp),sp
   18c5e:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   18c60:	move.l 20(sp),8(sp)
   18c66:	move.l 24(sp),12(sp)
   18c6c:	move.l 1e892 <MathIeeeDoubTransBase>,d0
   18c72:	movea.l d0,a6
   18c74:	move.l 8(sp),d0
   18c78:	move.l 12(sp),d1
   18c7c:	jsr -102(a6)
   18c80:	move.l d0,4(sp)
   18c84:	move.l 4(sp),d0
}
   18c88:	movea.l (sp)+,a6
   18c8a:	lea 12(sp),sp
   18c8e:	rts

00018c90 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   18c90:	       lea -24(sp),sp
   18c94:	       move.l a6,-(sp)
    if (x > 0) {
   18c96:	       clr.l -(sp)
   18c98:	       move.l 40(sp),-(sp)
   18c9c:	       jsr 18a9c <__gtsf2>
   18ca2:	       addq.l #8,sp
   18ca4:	       tst.l d0
   18ca6:	   ,-- ble.s 18cd8 <atan2f+0x48>
        return IEEESPAtan(y / x);
   18ca8:	   |   move.l 36(sp),-(sp)
   18cac:	   |   move.l 36(sp),-(sp)
   18cb0:	   |   jsr 187e6 <__divsf3>
   18cb6:	   |   addq.l #8,sp
   18cb8:	   |   move.l d0,8(sp)
   18cbc:	   |   move.l 1e88a <MathIeeeSingTransBase>,d0
   18cc2:	   |   movea.l d0,a6
   18cc4:	   |   move.l 8(sp),d0
   18cc8:	   |   jsr -30(a6)
   18ccc:	   |   move.l d0,4(sp)
   18cd0:	   |   move.l 4(sp),d0
   18cd4:	,--|-- bra.w 18e38 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18cd8:	|  '-> clr.l -(sp)
   18cda:	|      move.l 40(sp),-(sp)
   18cde:	|      jsr 18b56 <__ltsf2>
   18ce4:	|      addq.l #8,sp
   18ce6:	|      tst.l d0
   18ce8:	|  ,-- bge.s 18d5c <atan2f+0xcc>
   18cea:	|  |   clr.l -(sp)
   18cec:	|  |   move.l 36(sp),-(sp)
   18cf0:	|  |   jsr 18a18 <__gesf2>
   18cf6:	|  |   addq.l #8,sp
   18cf8:	|  |   tst.l d0
   18cfa:	|  +-- blt.s 18d5c <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18cfc:	|  |   move.l 36(sp),-(sp)
   18d00:	|  |   move.l 36(sp),-(sp)
   18d04:	|  |   jsr 187e6 <__divsf3>
   18d0a:	|  |   addq.l #8,sp
   18d0c:	|  |   move.l d0,24(sp)
   18d10:	|  |   move.l 1e88a <MathIeeeSingTransBase>,d0
   18d16:	|  |   movea.l d0,a6
   18d18:	|  |   move.l 24(sp),d0
   18d1c:	|  |   jsr -30(a6)
   18d20:	|  |   move.l d0,20(sp)
   18d24:	|  |   move.l 20(sp),d0
   18d28:	|  |   move.l d0,-(sp)
   18d2a:	|  |   jsr 18852 <__extendsfdf2>
   18d30:	|  |   addq.l #4,sp
   18d32:	|  |   move.l #1413754136,-(sp)
   18d38:	|  |   move.l #1074340347,-(sp)
   18d3e:	|  |   move.l d1,-(sp)
   18d40:	|  |   move.l d0,-(sp)
   18d42:	|  |   jsr 18722 <__adddf3>
   18d48:	|  |   lea 16(sp),sp
   18d4c:	|  |   move.l d1,-(sp)
   18d4e:	|  |   move.l d0,-(sp)
   18d50:	|  |   jsr 18c5a <__truncdfsf2>
   18d56:	|  |   addq.l #8,sp
   18d58:	+--|-- bra.w 18e38 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18d5c:	|  '-> clr.l -(sp)
   18d5e:	|      move.l 40(sp),-(sp)
   18d62:	|      jsr 18b56 <__ltsf2>
   18d68:	|      addq.l #8,sp
   18d6a:	|      tst.l d0
   18d6c:	|  ,-- bge.s 18dde <atan2f+0x14e>
   18d6e:	|  |   clr.l -(sp)
   18d70:	|  |   move.l 36(sp),-(sp)
   18d74:	|  |   jsr 18b56 <__ltsf2>
   18d7a:	|  |   addq.l #8,sp
   18d7c:	|  |   tst.l d0
   18d7e:	|  +-- bge.s 18dde <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   18d80:	|  |   move.l 36(sp),-(sp)
   18d84:	|  |   move.l 36(sp),-(sp)
   18d88:	|  |   jsr 187e6 <__divsf3>
   18d8e:	|  |   addq.l #8,sp
   18d90:	|  |   move.l d0,16(sp)
   18d94:	|  |   move.l 1e88a <MathIeeeSingTransBase>,d0
   18d9a:	|  |   movea.l d0,a6
   18d9c:	|  |   move.l 16(sp),d0
   18da0:	|  |   jsr -30(a6)
   18da4:	|  |   move.l d0,12(sp)
   18da8:	|  |   move.l 12(sp),d0
   18dac:	|  |   move.l d0,-(sp)
   18dae:	|  |   jsr 18852 <__extendsfdf2>
   18db4:	|  |   addq.l #4,sp
   18db6:	|  |   move.l #1413754136,-(sp)
   18dbc:	|  |   move.l #1074340347,-(sp)
   18dc2:	|  |   move.l d1,-(sp)
   18dc4:	|  |   move.l d0,-(sp)
   18dc6:	|  |   jsr 18bc2 <__subdf3>
   18dcc:	|  |   lea 16(sp),sp
   18dd0:	|  |   move.l d1,-(sp)
   18dd2:	|  |   move.l d0,-(sp)
   18dd4:	|  |   jsr 18c5a <__truncdfsf2>
   18dda:	|  |   addq.l #8,sp
   18ddc:	+--|-- bra.s 18e38 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18dde:	|  '-> clr.l -(sp)
   18de0:	|      move.l 40(sp),-(sp)
   18de4:	|      jsr 1881c <__eqsf2>
   18dea:	|      addq.l #8,sp
   18dec:	|      tst.l d0
   18dee:	|  ,-- bne.s 18e0a <atan2f+0x17a>
   18df0:	|  |   clr.l -(sp)
   18df2:	|  |   move.l 36(sp),-(sp)
   18df6:	|  |   jsr 18a9c <__gtsf2>
   18dfc:	|  |   addq.l #8,sp
   18dfe:	|  |   tst.l d0
   18e00:	|  +-- ble.s 18e0a <atan2f+0x17a>
        return PI / 2;
   18e02:	|  |   move.l #1070141403,d0
   18e08:	+--|-- bra.s 18e38 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18e0a:	|  '-> clr.l -(sp)
   18e0c:	|      move.l 40(sp),-(sp)
   18e10:	|      jsr 1881c <__eqsf2>
   18e16:	|      addq.l #8,sp
   18e18:	|      tst.l d0
   18e1a:	|  ,-- bne.s 18e36 <atan2f+0x1a6>
   18e1c:	|  |   clr.l -(sp)
   18e1e:	|  |   move.l 36(sp),-(sp)
   18e22:	|  |   jsr 18b56 <__ltsf2>
   18e28:	|  |   addq.l #8,sp
   18e2a:	|  |   tst.l d0
   18e2c:	|  +-- bge.s 18e36 <atan2f+0x1a6>
        return -PI / 2;
   18e2e:	|  |   move.l #-1077342245,d0
   18e34:	+--|-- bra.s 18e38 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   18e36:	|  '-> moveq #0,d0
    }
}
   18e38:	'----> movea.l (sp)+,a6
   18e3a:	       lea 24(sp),sp
   18e3e:	       rts

00018e40 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   18e40:	lea -24(sp),sp
   18e44:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   18e46:	move.l 32(sp),20(sp)
   18e4c:	move.l 36(sp),24(sp)
   18e52:	move.l 1e892 <MathIeeeDoubTransBase>,d0
   18e58:	movea.l d0,a6
   18e5a:	move.l 20(sp),d0
   18e5e:	move.l 24(sp),d1
   18e62:	jsr -96(a6)
   18e66:	move.l d0,4(sp)
   18e6a:	move.l d1,8(sp)
   18e6e:	move.l 4(sp),12(sp)
   18e74:	move.l 8(sp),16(sp)
   18e7a:	move.l 12(sp),d0
   18e7e:	move.l 16(sp),d1
}
   18e82:	movea.l (sp)+,a6
   18e84:	lea 24(sp),sp
   18e88:	rts

00018e8a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18e8a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18e8e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18e92:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18e96:	mulu.w 8(sp),d1
	addw	d1, d0
   18e9a:	add.w d1,d0
	swap	d0
   18e9c:	swap d0
	clrw	d0
   18e9e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18ea0:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   18ea4:	mulu.w 10(sp),d1
	addl	d1, d0
   18ea8:	add.l d1,d0
	rts
   18eaa:	rts

00018eac <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18eac:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18eae:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   18eb2:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18eb6:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18ebc:	   ,-- bcc.s 18ed4 <__udivsi3+0x28>
	movel	d0, d2
   18ebe:	   |   move.l d0,d2
	clrw	d2
   18ec0:	   |   clr.w d2
	swap	d2
   18ec2:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18ec4:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18ec6:	   |   move.w d2,d0
	swap	d0
   18ec8:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18eca:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18ece:	   |   divu.w d1,d2
	movew	d2, d0
   18ed0:	   |   move.w d2,d0
	jra	6f
   18ed2:	,--|-- bra.s 18f04 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18ed4:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18ed6:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18ed8:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18eda:	|  |   cmpi.l #65536,d1
	jcc	4b
   18ee0:	|  '-- bcc.s 18ed6 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18ee2:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18ee4:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18eea:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18eec:	|      mulu.w d0,d1
	swap	d2
   18eee:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   18ef0:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   18ef2:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18ef4:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18ef6:	|  ,-- bne.s 18f02 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18ef8:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18efa:	|  +-- bcs.s 18f02 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18efc:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   18f00:	+--|-- bls.s 18f04 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   18f02:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18f04:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18f06:	       rts

00018f08 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18f08:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18f0a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18f0c:	    move.l 12(sp),d1
	jpl	1f
   18f10:	,-- bpl.s 18f16 <__divsi3+0xe>
	negl	d1
   18f12:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18f14:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18f16:	'-> move.l 8(sp),d0
	jpl	2f
   18f1a:	,-- bpl.s 18f20 <__divsi3+0x18>
	negl	d0
   18f1c:	|   neg.l d0
	negb	d2
   18f1e:	|   neg.b d2

2:	movel	d1, sp@-
   18f20:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f22:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18f24:	    jsr 18eac <__udivsi3>
	addql	#8, sp
   18f2a:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   18f2c:	    tst.b d2
	jpl	3f
   18f2e:	,-- bpl.s 18f32 <__divsi3+0x2a>
	negl	d0
   18f30:	|   neg.l d0

3:	movel	sp@+, d2
   18f32:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18f34:	    rts

00018f36 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18f36:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18f3a:	move.l 4(sp),d0
	movel	d1, sp@-
   18f3e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f40:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   18f42:	jsr 18f08 <__divsi3>
	addql	#8, sp
   18f48:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18f4a:	move.l 8(sp),d1
	movel	d1, sp@-
   18f4e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f50:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18f52:	jsr 18e8a <__mulsi3>
	addql	#8, sp
   18f58:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18f5a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18f5e:	sub.l d0,d1
	movel	d1, d0
   18f60:	move.l d1,d0
	rts
   18f62:	rts

00018f64 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18f64:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18f68:	move.l 4(sp),d0
	movel	d1, sp@-
   18f6c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f6e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   18f70:	jsr 18eac <__udivsi3>
	addql	#8, sp
   18f76:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18f78:	move.l 8(sp),d1
	movel	d1, sp@-
   18f7c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f7e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18f80:	jsr 18e8a <__mulsi3>
	addql	#8, sp
   18f86:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18f88:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18f8c:	sub.l d0,d1
	movel	d1, d0
   18f8e:	move.l d1,d0
	rts
   18f90:	rts

00018f92 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   18f92:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   18f94:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18f98:	jsr -516(a6)
    move.l (sp)+, a6
   18f9c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   18f9e:	rts

00018fa0 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   18fa0:	move.b d0,(a3)+
	rts
   18fa2:	rts
