
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115225,d0
       8:	       subi.l #115225,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c219 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115225,d0
      40:	       subi.l #115225,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c219 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 75c4 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115225,d0
      7e:	       subi.l #115225,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c219 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13cd4 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c9be <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13cec <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c21a <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13cd4 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c9be <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c21a <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13cd4 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c9be <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d16 <PutChar+0x4>
     35c:	|  |              |   jsr 17248 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c9c6 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c9c6 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c9c6 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c9c6 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c9c6 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c9c6 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c9c6 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17d40 <PutChar+0x2e>
     834:	|   jsr 17248 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c9c6 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17d5c <PutChar+0x4a>
     8a6:	|   jsr 17248 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c9c6 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c9c6 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c9c6 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c9c6 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c9c6 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c9c6 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c9c6 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c9c6 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c9be <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c9c6 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13cd4 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c9c6 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c8c4 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c97e <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c97a <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c8c4 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c8c4 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 991a <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c8c4 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c8c8 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c8cc <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d2e <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17d84 <PutChar+0x72>
     e1a:	          jsr 17248 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c8e0 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17d9d <PutChar+0x8b>
     e30:	      |   jsr 17248 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c8da <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c9ca <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c8e0 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17dcb <PutChar+0xb9>
     ef0:	|         jsr 17248 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c9ca <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17deb <PutChar+0xd9>
     f3c:	|         jsr 17248 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c8ec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c912 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c902 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c916 <winHeight>,d0
     f6e:	|         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c902 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c902 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c902 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c902 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17e0b <PutChar+0xf9>
     fbe:	|         jsr 17248 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c9be <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17e20 <PutChar+0x10e>
    1010:	   |   jsr 17248 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c9c6 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c90e <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115228,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115292,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115340,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115380,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c906 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17e5b <PutChar+0x149>
    11c6:	                jsr 17248 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c8fe <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c902 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c8fe <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c8f2 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c9ca <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c912 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c912 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c912 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17bfc <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c8e0 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c912 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17bfc <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c8f2 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c912 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c916 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17bfc <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c912 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c916 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17bfc <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c9ca <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c90a <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c906 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c90e <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c90e <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c8ec <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c8ec <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c8ec <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) 
{
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,74(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17bfc <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,70(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,66(sp)
    1536:	                      move.l 1c9be <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 70(sp),d0
    1542:	                      move.l 66(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,62(sp)
    154e:	                      move.l 62(sp),d0
    1552:	                      move.l d0,58(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l (a0),d0
    155c:	                  /-- bpl.s 1560 <CstDrawZBuffer+0x78>
    155e:	                  |   addq.l #7,d0
    1560:	                  \-> asr.l #3,d0
    1562:	                      move.l d0,d1
    1564:	                      addq.l #2,d1
    1566:	                      movea.l 100(sp),a0
    156a:	                      move.l 4(a0),d0
    156e:	                      move.l d0,-(sp)
    1570:	                      move.l d1,-(sp)
    1572:	                      jsr 17bfc <__mulsi3>
    1578:	                      addq.l #8,sp
    157a:	                      move.l d0,54(sp)
    157e:	                      moveq #2,d1
    1580:	                      move.l d1,50(sp)
    1584:	                      move.l 1c9be <SysBase>,d0
    158a:	                      movea.l d0,a6
    158c:	                      move.l 54(sp),d0
    1590:	                      move.l 50(sp),d1
    1594:	                      jsr -684(a6)
    1598:	                      move.l d0,46(sp)
    159c:	                      move.l 46(sp),d0
    15a0:	                      move.l d0,42(sp)
  WORD zbufferset = 0;
    15a4:	                      clr.w 94(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    15a8:	                      movea.l 100(sp),a0
    15ac:	                      move.l 4(a0),d0
    15b0:	                      move.l d0,d0
    15b2:	                      movea.w d0,a1
    15b4:	                      movea.l 100(sp),a0
    15b8:	                      move.l (a0),d0
    15ba:	                      move.l d0,d0
    15bc:	                      movea.w d0,a0
    15be:	                      clr.l -(sp)
    15c0:	                      pea 1 <_start+0x1>
    15c4:	                      move.l a1,-(sp)
    15c6:	                      move.l a0,-(sp)
    15c8:	                      pea 17e77 <PutChar+0x165>
    15ce:	                      move.l 78(sp),-(sp)
    15d2:	                      jsr 17330 <debug_register_bitmap>
    15d8:	                      lea 24(sp),sp
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    15dc:	                      movea.l 100(sp),a0
    15e0:	                      move.l 4(a0),d0
    15e4:	                      move.l d0,d0
    15e6:	                      movea.w d0,a1
    15e8:	                      movea.l 100(sp),a0
    15ec:	                      move.l (a0),d0
    15ee:	                      move.l d0,d0
    15f0:	                      addi.w #16,d0
    15f4:	                      movea.w d0,a0
    15f6:	                      clr.l -(sp)
    15f8:	                      pea 1 <_start+0x1>
    15fc:	                      move.l a1,-(sp)
    15fe:	                      move.l a0,-(sp)
    1600:	                      pea 17e82 <PutChar+0x170>
    1606:	                      move.l 62(sp),-(sp)
    160a:	                      jsr 17330 <debug_register_bitmap>
    1610:	                      lea 24(sp),sp
  #endif    

  while(zbuffer) 
    1614:	   /----------------- bra.w 1b4c <CstDrawZBuffer+0x664>
  {              
    UWORD spritex1oncanvas = x;
    1618:	/--|----------------> move.w 10(sp),36(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    161e:	|  |                  movea.l 100(sp),a0
    1622:	|  |                  move.l (a0),d0
    1624:	|  |                  move.l d0,d0
    1626:	|  |                  movea.w 36(sp),a0
    162a:	|  |                  adda.w d0,a0
    162c:	|  |                  move.w a0,34(sp)
    UWORD spritey1oncanvas = y;
    1630:	|  |                  move.w 8(sp),32(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1636:	|  |                  movea.l 100(sp),a0
    163a:	|  |                  move.l 4(a0),d0
    163e:	|  |                  move.l d0,d0
    1640:	|  |                  move.w 32(sp),d1
    1644:	|  |                  add.w d0,d1
    1646:	|  |                  move.w d1,30(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    164a:	|  |                  movea.l 104(sp),a0
    164e:	|  |                  move.l 8(a0),d0
    1652:	|  |                  move.w d0,28(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1656:	|  |                  movea.l 104(sp),a0
    165a:	|  |                  move.l (a0),d0
    165c:	|  |                  move.l d0,d0
    165e:	|  |                  movea.w 28(sp),a0
    1662:	|  |                  adda.w d0,a0
    1664:	|  |                  move.w a0,26(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    1668:	|  |                  movea.l 104(sp),a0
    166c:	|  |                  move.l 12(a0),d0
    1670:	|  |                  move.w d0,24(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1674:	|  |                  movea.l 104(sp),a0
    1678:	|  |                  move.l 4(a0),d0
    167c:	|  |                  move.l d0,d0
    167e:	|  |                  move.w 24(sp),d1
    1682:	|  |                  add.w d0,d1
    1684:	|  |                  move.w d1,22(sp)
  
    BOOL zbufferfromright = FALSE;
    1688:	|  |                  clr.w 92(sp)
    BOOL zbufferfromleft = FALSE;
    168c:	|  |                  clr.w 90(sp)
    BOOL zbufferfrombottom = FALSE;
    1690:	|  |                  clr.w 88(sp)
    BOOL zbufferfromtop = FALSE;
    1694:	|  |                  clr.w 86(sp)
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1698:	|  |                  moveq #0,d0
    169a:	|  |                  move.w 30(sp),d0
    169e:	|  |                  movea.l 104(sp),a0
    16a2:	|  |                  move.l 16(a0),d1
    16a6:	|  |                  cmp.l d0,d1
    16a8:	|  +----------------- ble.w 1b4c <CstDrawZBuffer+0x664>
    {    
      zbufferset = 1;
    16ac:	|  |                  move.w #1,94(sp)

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    16b2:	|  |                  move.w 28(sp),d0
    16b6:	|  |                  cmp.w 36(sp),d0
    16ba:	|  |              /-- bcs.s 16ce <CstDrawZBuffer+0x1e6>
    16bc:	|  |              |   move.w 28(sp),d1
    16c0:	|  |              |   cmp.w 34(sp),d1
    16c4:	|  |              +-- bcc.s 16ce <CstDrawZBuffer+0x1e6>
        zbufferfromright = TRUE;
    16c6:	|  |              |   move.w #1,92(sp)
    16cc:	|  |           /--|-- bra.s 16e8 <CstDrawZBuffer+0x200>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    16ce:	|  |           |  \-> move.w 28(sp),d0
    16d2:	|  |           |      cmp.w 36(sp),d0
    16d6:	|  |           +----- bcc.s 16e8 <CstDrawZBuffer+0x200>
    16d8:	|  |           |      move.w 26(sp),d1
    16dc:	|  |           |      cmp.w 36(sp),d1
    16e0:	|  |           +----- bls.s 16e8 <CstDrawZBuffer+0x200>
        zbufferfromleft = TRUE;       
    16e2:	|  |           |      move.w #1,90(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    16e8:	|  |           \----> tst.w 90(sp)
    16ec:	|  |              /-- bne.s 16f4 <CstDrawZBuffer+0x20c>
    16ee:	|  |              |   tst.w 92(sp)
    16f2:	|  |           /--|-- beq.s 172a <CstDrawZBuffer+0x242>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    16f4:	|  |           |  \-> move.w 24(sp),d0
    16f8:	|  |           |      cmp.w 32(sp),d0
    16fc:	|  |           |  /-- bcs.s 1710 <CstDrawZBuffer+0x228>
    16fe:	|  |           |  |   move.w 24(sp),d1
    1702:	|  |           |  |   cmp.w 30(sp),d1
    1706:	|  |           |  +-- bcc.s 1710 <CstDrawZBuffer+0x228>
          zbufferfrombottom = TRUE;
    1708:	|  |           |  |   move.w #1,88(sp)
    170e:	|  |           +--|-- bra.s 172a <CstDrawZBuffer+0x242>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    1710:	|  |           |  \-> move.w 24(sp),d0
    1714:	|  |           |      cmp.w 32(sp),d0
    1718:	|  |           +----- bcc.s 172a <CstDrawZBuffer+0x242>
    171a:	|  |           |      move.w 22(sp),d1
    171e:	|  |           |      cmp.w 32(sp),d1
    1722:	|  |           +----- bls.s 172a <CstDrawZBuffer+0x242>
          zbufferfromtop = TRUE;       
    1724:	|  |           |      move.w #1,86(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    172a:	|  |           \----> tst.w 92(sp)
    172e:	|  |              /-- bne.s 1738 <CstDrawZBuffer+0x250>
    1730:	|  |              |   tst.w 90(sp)
    1734:	|  +--------------|-- beq.w 1b4c <CstDrawZBuffer+0x664>
    1738:	|  |              \-> tst.w 88(sp)
    173c:	|  |              /-- bne.s 1746 <CstDrawZBuffer+0x25e>
    173e:	|  |              |   tst.w 86(sp)
    1742:	|  +--------------|-- beq.w 1b4c <CstDrawZBuffer+0x664>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1746:	|  |              \-> tst.w 92(sp)
    174a:	|  |     /----------- beq.w 1894 <CstDrawZBuffer+0x3ac>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    174e:	|  |     |            movea.w 36(sp),a0
    1752:	|  |     |            suba.w 28(sp),a0
    1756:	|  |     |            move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    175a:	|  |     |            move.w 20(sp),d0
    175e:	|  |     |            lsr.w #4,d0
    1760:	|  |     |            add.w d0,d0
    1762:	|  |     |            move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8)*-1;       
    1766:	|  |     |            move.w 18(sp),d0
    176a:	|  |     |            lsl.w #3,d0
    176c:	|  |     |            move.w d0,d1
    176e:	|  |     |            sub.w 20(sp),d1
    1772:	|  |     |            move.w d1,16(sp)
          bytewidth = (sprite->width/16)*2;
    1776:	|  |     |            movea.l 100(sp),a0
    177a:	|  |     |            move.l (a0),d0
    177c:	|  |     |            movea.l d0,a0
    177e:	|  |     |            cmpa.w #0,a0
    1782:	|  |     |        /-- bge.s 1788 <CstDrawZBuffer+0x2a0>
    1784:	|  |     |        |   lea 15(a0),a0
    1788:	|  |     |        \-> move.l a0,d0
    178a:	|  |     |            asr.l #4,d0
    178c:	|  |     |            move.l d0,d0
    178e:	|  |     |            add.w d0,d0
    1790:	|  |     |            move.w d0,80(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    1794:	|  |     |            move.w 34(sp),d0
    1798:	|  |     |            cmp.w 26(sp),d0
    179c:	|  |     |  /-------- bcc.w 1880 <CstDrawZBuffer+0x398>
          {               
            WaitBlit();  
    17a0:	|  |     |  |         move.l 1c9ca <GfxBase>,d0
    17a6:	|  |     |  |         movea.l d0,a6
    17a8:	|  |     |  |         jsr -228(a6)
          
            custom->bltafwm = 0xffff;
    17ac:	|  |     |  |         movea.l 74(sp),a0
    17b0:	|  |     |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;          
    17b6:	|  |     |  |         movea.l 74(sp),a0
    17ba:	|  |     |  |         move.w #-1,70(a0)
            custom->bltdpt = tmpbuffer;        
    17c0:	|  |     |  |         movea.l 74(sp),a0
    17c4:	|  |     |  |         move.l 42(sp),84(a0)
            custom->bltcon1 = 0;               
    17ca:	|  |     |  |         movea.l 74(sp),a0
    17ce:	|  |     |  |         move.w #0,66(a0)

            if (xdiffrest) {
    17d4:	|  |     |  |         tst.w 16(sp)
    17d8:	|  |     |  |  /----- beq.s 183a <CstDrawZBuffer+0x352>
              bytewidth += 2; 
    17da:	|  |     |  |  |      addq.w #2,80(sp)
              xdiffbyte += -2;                 
    17de:	|  |     |  |  |      subq.w #2,18(sp)
      
              bltapt = zbuffer->bitplane + xdiffbyte;          
    17e2:	|  |     |  |  |      movea.l 104(sp),a0
    17e6:	|  |     |  |  |      move.l 20(a0),d1
    17ea:	|  |     |  |  |      moveq #0,d0
    17ec:	|  |     |  |  |      move.w 18(sp),d0
    17f0:	|  |     |  |  |      add.l d1,d0
    17f2:	|  |     |  |  |      move.l d0,82(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    17f6:	|  |     |  |  |      moveq #0,d0
    17f8:	|  |     |  |  |      move.w 16(sp),d0
    17fc:	|  |     |  |  |      moveq #16,d1
    17fe:	|  |     |  |  |      sub.l d0,d1
    1800:	|  |     |  |  |      move.l d1,d0
    1802:	|  |     |  |  |      moveq #12,d1
    1804:	|  |     |  |  |      lsl.w d1,d0
    1806:	|  |     |  |  |      addi.w #2544,d0
    180a:	|  |     |  |  |      movea.l 74(sp),a0
    180e:	|  |     |  |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1812:	|  |     |  |  |      movea.l 104(sp),a0
    1816:	|  |     |  |  |      move.l (a0),d0
    1818:	|  |     |  |  |  /-- bpl.s 181c <CstDrawZBuffer+0x334>
    181a:	|  |     |  |  |  |   addq.l #7,d0
    181c:	|  |     |  |  |  \-> asr.l #3,d0
    181e:	|  |     |  |  |      move.l d0,d0
    1820:	|  |     |  |  |      sub.w 80(sp),d0
    1824:	|  |     |  |  |      movea.l 74(sp),a0
    1828:	|  |     |  |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    182c:	|  |     |  |  |      movea.l 74(sp),a0
    1830:	|  |     |  |  |      move.w #0,102(a0)
    1836:	|  |  /--|--|--|----- bra.w 19e2 <CstDrawZBuffer+0x4fa>
            }
            else
            {             
              bltapt = zbuffer->bitplane + xdiffbyte;          
    183a:	|  |  |  |  |  \----> movea.l 104(sp),a0
    183e:	|  |  |  |  |         move.l 20(a0),d1
    1842:	|  |  |  |  |         moveq #0,d0
    1844:	|  |  |  |  |         move.w 18(sp),d0
    1848:	|  |  |  |  |         add.l d1,d0
    184a:	|  |  |  |  |         move.l d0,82(sp)
              custom->bltcon0 = 4096 + 0x9f0;              
    184e:	|  |  |  |  |         movea.l 74(sp),a0
    1852:	|  |  |  |  |         move.w #6640,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1858:	|  |  |  |  |         movea.l 104(sp),a0
    185c:	|  |  |  |  |         move.l (a0),d0
    185e:	|  |  |  |  |     /-- bpl.s 1862 <CstDrawZBuffer+0x37a>
    1860:	|  |  |  |  |     |   addq.l #7,d0
    1862:	|  |  |  |  |     \-> asr.l #3,d0
    1864:	|  |  |  |  |         move.l d0,d0
    1866:	|  |  |  |  |         sub.w 80(sp),d0
    186a:	|  |  |  |  |         movea.l 74(sp),a0
    186e:	|  |  |  |  |         move.w d0,100(a0)
              custom->bltdmod = 2;                                                            
    1872:	|  |  |  |  |         movea.l 74(sp),a0
    1876:	|  |  |  |  |         move.w #2,102(a0)
    187c:	|  |  +--|--|-------- bra.w 19e2 <CstDrawZBuffer+0x4fa>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1880:	|  |  |  |  \-------> pea 17e8c <PutChar+0x17a>
    1886:	|  |  |  |            jsr 17248 <KPrintF>
    188c:	|  |  |  |            addq.l #4,sp
              return FALSE;
    188e:	|  |  |  |            moveq #0,d0
    1890:	|  |  |  |  /-------- bra.w 1c48 <CstDrawZBuffer+0x760>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1894:	|  |  |  \--|-------> movea.w 36(sp),a0
    1898:	|  |  |     |         suba.w 28(sp),a0
    189c:	|  |  |     |         move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18a0:	|  |  |     |         move.w 20(sp),d0
    18a4:	|  |  |     |         lsr.w #4,d0
    18a6:	|  |  |     |         add.w d0,d0
    18a8:	|  |  |     |         move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);    
    18ac:	|  |  |     |         move.w 18(sp),d0
    18b0:	|  |  |     |         lsl.w #3,d0
    18b2:	|  |  |     |         move.w 20(sp),d1
    18b6:	|  |  |     |         sub.w d0,d1
    18b8:	|  |  |     |         move.w d1,16(sp)

                         
          bytewidth = (sprite->width/16)*2;
    18bc:	|  |  |     |         movea.l 100(sp),a0
    18c0:	|  |  |     |         move.l (a0),d0
    18c2:	|  |  |     |         movea.l d0,a0
    18c4:	|  |  |     |         cmpa.w #0,a0
    18c8:	|  |  |     |     /-- bge.s 18ce <CstDrawZBuffer+0x3e6>
    18ca:	|  |  |     |     |   lea 15(a0),a0
    18ce:	|  |  |     |     \-> move.l a0,d0
    18d0:	|  |  |     |         asr.l #4,d0
    18d2:	|  |  |     |         move.l d0,d0
    18d4:	|  |  |     |         add.w d0,d0
    18d6:	|  |  |     |         move.w d0,80(sp)
          if(sprite->height == 60) {
    18da:	|  |  |     |         movea.l 100(sp),a0
    18de:	|  |  |     |         move.l 4(a0),d0
    18e2:	|  |  |     |         moveq #60,d1
    18e4:	|  |  |     |         cmp.l d0,d1
    18e6:	|  |  |     |     /-- bne.s 18f2 <CstDrawZBuffer+0x40a>
            sprite->height = 60;
    18e8:	|  |  |     |     |   movea.l 100(sp),a0
    18ec:	|  |  |     |     |   moveq #60,d0
    18ee:	|  |  |     |     |   move.l d0,4(a0)
          }
          
          custom->bltafwm = 0xffff;
    18f2:	|  |  |     |     \-> movea.l 74(sp),a0
    18f6:	|  |  |     |         move.w #-1,68(a0)
          custom->bltalwm = 0xffff;                      
    18fc:	|  |  |     |         movea.l 74(sp),a0
    1900:	|  |  |     |         move.w #-1,70(a0)
          custom->bltcon1 = 0;          
    1906:	|  |  |     |         movea.l 74(sp),a0
    190a:	|  |  |     |         move.w #0,66(a0)

          if (xdiffrest) {
    1910:	|  |  |     |         tst.w 16(sp)
    1914:	|  |  |     |  /----- beq.s 1986 <CstDrawZBuffer+0x49e>
            bytewidth += 2; 
    1916:	|  |  |     |  |      addq.w #2,80(sp)
            //xdiffbyte += -2;            
            bltapt = zbuffer->bitplane + xdiffbyte;  
    191a:	|  |  |     |  |      movea.l 104(sp),a0
    191e:	|  |  |     |  |      move.l 20(a0),d1
    1922:	|  |  |     |  |      moveq #0,d0
    1924:	|  |  |     |  |      move.w 18(sp),d0
    1928:	|  |  |     |  |      add.l d1,d0
    192a:	|  |  |     |  |      move.l d0,82(sp)
            WaitBlit();   
    192e:	|  |  |     |  |      move.l 1c9ca <GfxBase>,d0
    1934:	|  |  |     |  |      movea.l d0,a6
    1936:	|  |  |     |  |      jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    193a:	|  |  |     |  |      movea.l 74(sp),a0
    193e:	|  |  |     |  |      move.l 42(sp),84(a0)
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1944:	|  |  |     |  |      moveq #0,d0
    1946:	|  |  |     |  |      move.w 16(sp),d0
    194a:	|  |  |     |  |      moveq #16,d1
    194c:	|  |  |     |  |      sub.l d0,d1
    194e:	|  |  |     |  |      move.l d1,d0
    1950:	|  |  |     |  |      moveq #12,d1
    1952:	|  |  |     |  |      lsl.w d1,d0
    1954:	|  |  |     |  |      addi.w #2544,d0
    1958:	|  |  |     |  |      movea.l 74(sp),a0
    195c:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1960:	|  |  |     |  |      movea.l 104(sp),a0
    1964:	|  |  |     |  |      move.l (a0),d0
    1966:	|  |  |     |  |  /-- bpl.s 196a <CstDrawZBuffer+0x482>
    1968:	|  |  |     |  |  |   addq.l #7,d0
    196a:	|  |  |     |  |  \-> asr.l #3,d0
    196c:	|  |  |     |  |      move.l d0,d0
    196e:	|  |  |     |  |      sub.w 80(sp),d0
    1972:	|  |  |     |  |      movea.l 74(sp),a0
    1976:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = 0;                                                            
    197a:	|  |  |     |  |      movea.l 74(sp),a0
    197e:	|  |  |     |  |      move.w #0,102(a0)
    1984:	|  |  +-----|--|----- bra.s 19e2 <CstDrawZBuffer+0x4fa>
          }
          else
          {       
            //xdiffbyte += -2;      
            bltapt = zbuffer->bitplane + xdiffbyte;  
    1986:	|  |  |     |  \----> movea.l 104(sp),a0
    198a:	|  |  |     |         move.l 20(a0),d1
    198e:	|  |  |     |         moveq #0,d0
    1990:	|  |  |     |         move.w 18(sp),d0
    1994:	|  |  |     |         add.l d1,d0
    1996:	|  |  |     |         move.l d0,82(sp)
            WaitBlit();         
    199a:	|  |  |     |         move.l 1c9ca <GfxBase>,d0
    19a0:	|  |  |     |         movea.l d0,a6
    19a2:	|  |  |     |         jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    19a6:	|  |  |     |         move.l 42(sp),d0
    19aa:	|  |  |     |         addq.l #2,d0
    19ac:	|  |  |     |         movea.l 74(sp),a0
    19b0:	|  |  |     |         move.l d0,84(a0)
            custom->bltcon0 = 4096 + 0x9f0;              
    19b4:	|  |  |     |         movea.l 74(sp),a0
    19b8:	|  |  |     |         move.w #6640,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19be:	|  |  |     |         movea.l 104(sp),a0
    19c2:	|  |  |     |         move.l (a0),d0
    19c4:	|  |  |     |     /-- bpl.s 19c8 <CstDrawZBuffer+0x4e0>
    19c6:	|  |  |     |     |   addq.l #7,d0
    19c8:	|  |  |     |     \-> asr.l #3,d0
    19ca:	|  |  |     |         move.l d0,d0
    19cc:	|  |  |     |         sub.w 80(sp),d0
    19d0:	|  |  |     |         movea.l 74(sp),a0
    19d4:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = 2;                                                            
    19d8:	|  |  |     |         movea.l 74(sp),a0
    19dc:	|  |  |     |         move.w #2,102(a0)
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    19e2:	|  |  \-----|-------> movea.w 32(sp),a0
    19e6:	|  |        |         suba.w 24(sp),a0
    19ea:	|  |        |         move.w a0,14(sp)

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    19ee:	|  |        |         move.w 30(sp),d0
    19f2:	|  |        |         cmp.w 22(sp),d0
    19f6:	|  |        |  /----- bcc.s 1a06 <CstDrawZBuffer+0x51e>
          height = sprite->height;
    19f8:	|  |        |  |      movea.l 100(sp),a0
    19fc:	|  |        |  |      move.l 4(a0),d0
    1a00:	|  |        |  |      move.w d0,78(sp)
    1a04:	|  |        |  |  /-- bra.s 1a12 <CstDrawZBuffer+0x52a>
        else
          height = zbuffery2oncanvas - spritey1oncanvas;
    1a06:	|  |        |  \--|-> move.w 22(sp),d1
    1a0a:	|  |        |     |   sub.w 32(sp),d1
    1a0e:	|  |        |     |   move.w d1,78(sp)

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1a12:	|  |        |     \-> moveq #0,d0
    1a14:	|  |        |         move.w 14(sp),d0
    1a18:	|  |        |         movea.l 104(sp),a0
    1a1c:	|  |        |         move.l (a0),d1
    1a1e:	|  |        |         move.l d1,-(sp)
    1a20:	|  |        |         move.l d0,-(sp)
    1a22:	|  |        |         jsr 17bfc <__mulsi3>
    1a28:	|  |        |         addq.l #8,sp
    1a2a:	|  |        |         tst.l d0
    1a2c:	|  |        |     /-- bge.s 1a30 <CstDrawZBuffer+0x548>
    1a2e:	|  |        |     |   addq.l #7,d0
    1a30:	|  |        |     \-> asr.l #3,d0
    1a32:	|  |        |         add.l 82(sp),d0
    1a36:	|  |        |         movea.l 74(sp),a0
    1a3a:	|  |        |         move.l d0,80(a0)
        UWORD bltsize =  height*64+bytewidth/2;          
    1a3e:	|  |        |         move.w 78(sp),d0
    1a42:	|  |        |         move.w d0,d1
    1a44:	|  |        |         lsl.w #6,d1
    1a46:	|  |        |         move.w 80(sp),d0
    1a4a:	|  |        |         lsr.w #1,d0
    1a4c:	|  |        |         movea.w d1,a0
    1a4e:	|  |        |         adda.w d0,a0
    1a50:	|  |        |         move.w a0,12(sp)
        custom->bltsize = height*64+bytewidth/2;
    1a54:	|  |        |         move.w 78(sp),d0
    1a58:	|  |        |         move.w d0,d1
    1a5a:	|  |        |         lsl.w #6,d1
    1a5c:	|  |        |         move.w 80(sp),d0
    1a60:	|  |        |         lsr.w #1,d0
    1a62:	|  |        |         add.w d1,d0
    1a64:	|  |        |         movea.l 74(sp),a0
    1a68:	|  |        |         move.w d0,88(a0)
       
        WaitBlit();
    1a6c:	|  |        |         move.l 1c9ca <GfxBase>,d0
    1a72:	|  |        |         movea.l d0,a6
    1a74:	|  |        |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    1a78:	|  |        |         movea.l 74(sp),a0
    1a7c:	|  |        |         move.w #-1,68(a0)
        custom->bltalwm = 0xffff;
    1a82:	|  |        |         movea.l 74(sp),a0
    1a86:	|  |        |         move.w #-1,70(a0)
        custom->bltamod = 2;
    1a8c:	|  |        |         movea.l 74(sp),a0
    1a90:	|  |        |         move.w #2,100(a0)
        custom->bltbmod = 0;
    1a96:	|  |        |         movea.l 74(sp),a0
    1a9a:	|  |        |         move.w #0,98(a0)
        custom->bltdmod = 0;
    1aa0:	|  |        |         movea.l 74(sp),a0
    1aa4:	|  |        |         move.w #0,102(a0)
        custom->bltcon0 = 0xd0c; //Copy A to D
    1aaa:	|  |        |         movea.l 74(sp),a0
    1aae:	|  |        |         move.w #3340,64(a0)
        custom->bltcon1 = 0;        
    1ab4:	|  |        |         movea.l 74(sp),a0
    1ab8:	|  |        |         move.w #0,66(a0)

        custom->bltapt = (APTR) tmpbuffer + 2;
    1abe:	|  |        |         move.l 42(sp),d0
    1ac2:	|  |        |         addq.l #2,d0
    1ac4:	|  |        |         movea.l 74(sp),a0
    1ac8:	|  |        |         move.l d0,80(a0)
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1acc:	|  |        |         movea.l 100(sp),a0
    1ad0:	|  |        |         move.l 24(a0),d2
    1ad4:	|  |        |         movea.l 100(sp),a0
    1ad8:	|  |        |         move.l (a0),d0
    1ada:	|  |        |     /-- bpl.s 1ade <CstDrawZBuffer+0x5f6>
    1adc:	|  |        |     |   addq.l #7,d0
    1ade:	|  |        |     \-> asr.l #3,d0
    1ae0:	|  |        |         movea.l 100(sp),a0
    1ae4:	|  |        |         move.l 4(a0),d1
    1ae8:	|  |        |         move.l d1,-(sp)
    1aea:	|  |        |         move.l d0,-(sp)
    1aec:	|  |        |         jsr 17bfc <__mulsi3>
    1af2:	|  |        |         addq.l #8,sp
    1af4:	|  |        |         move.l d0,d1
    1af6:	|  |        |         move.l d1,d0
    1af8:	|  |        |         add.l d0,d0
    1afa:	|  |        |         add.l d0,d0
    1afc:	|  |        |         add.l d1,d0
    1afe:	|  |        |         add.l d2,d0
    1b00:	|  |        |         movea.l 74(sp),a0
    1b04:	|  |        |         move.l d0,76(a0)
        custom->bltdpt = (APTR) returnvalue;
    1b08:	|  |        |         movea.l 74(sp),a0
    1b0c:	|  |        |         move.l 58(sp),84(a0)
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1b12:	|  |        |         movea.l 100(sp),a0
    1b16:	|  |        |         move.l 4(a0),d0
    1b1a:	|  |        |         move.l d0,d0
    1b1c:	|  |        |         move.w d0,d1
    1b1e:	|  |        |         lsl.w #6,d1
    1b20:	|  |        |         movea.l 100(sp),a0
    1b24:	|  |        |         move.l (a0),d0
    1b26:	|  |        |         movea.l d0,a0
    1b28:	|  |        |         cmpa.w #0,a0
    1b2c:	|  |        |     /-- bge.s 1b32 <CstDrawZBuffer+0x64a>
    1b2e:	|  |        |     |   lea 15(a0),a0
    1b32:	|  |        |     \-> move.l a0,d0
    1b34:	|  |        |         asr.l #4,d0
    1b36:	|  |        |         move.l d0,d0
    1b38:	|  |        |         add.w d1,d0
    1b3a:	|  |        |         movea.l 74(sp),a0
    1b3e:	|  |        |         move.w d0,88(a0)

        zbuffer = zbuffer->nextPanel;
    1b42:	|  |        |         movea.l 104(sp),a0
    1b46:	|  |        |         move.l 24(a0),104(sp)
  while(zbuffer) 
    1b4c:	|  \--------|-------> tst.l 104(sp)
    1b50:	\-----------|-------- bne.w 1618 <CstDrawZBuffer+0x130>
      }
    }
  }
  FreeVec( tmpbuffer);
    1b54:	            |         move.l 42(sp),38(sp)
    1b5a:	            |         move.l 1c9be <SysBase>,d0
    1b60:	            |         movea.l d0,a6
    1b62:	            |         movea.l 38(sp),a1
    1b66:	            |         jsr -690(a6)
  if(zbufferset == 0)
    1b6a:	            |         tst.w 94(sp)
    1b6e:	            |  /----- bne.w 1c44 <CstDrawZBuffer+0x75c>
  {
    WaitBlit();
    1b72:	            |  |      move.l 1c9ca <GfxBase>,d0
    1b78:	            |  |      movea.l d0,a6
    1b7a:	            |  |      jsr -228(a6)

    custom->bltafwm = 0xffff;
    1b7e:	            |  |      movea.l 74(sp),a0
    1b82:	            |  |      move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
    1b88:	            |  |      movea.l 74(sp),a0
    1b8c:	            |  |      move.w #-1,70(a0)
    custom->bltamod = 0;
    1b92:	            |  |      movea.l 74(sp),a0
    1b96:	            |  |      move.w #0,100(a0)
    custom->bltbmod = 0;
    1b9c:	            |  |      movea.l 74(sp),a0
    1ba0:	            |  |      move.w #0,98(a0)
    custom->bltcmod = 0;
    1ba6:	            |  |      movea.l 74(sp),a0
    1baa:	            |  |      move.w #0,96(a0)
    custom->bltdmod = 0;
    1bb0:	            |  |      movea.l 74(sp),a0
    1bb4:	            |  |      move.w #0,102(a0)
    custom->bltcon0 = 0x9f0; //Copy A to D
    1bba:	            |  |      movea.l 74(sp),a0
    1bbe:	            |  |      move.w #2544,64(a0)
    custom->bltcon1 = 0;        
    1bc4:	            |  |      movea.l 74(sp),a0
    1bc8:	            |  |      move.w #0,66(a0)

    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bce:	            |  |      movea.l 100(sp),a0
    1bd2:	            |  |      move.l 24(a0),d2
    1bd6:	            |  |      movea.l 100(sp),a0
    1bda:	            |  |      move.l (a0),d0
    1bdc:	            |  |  /-- bpl.s 1be0 <CstDrawZBuffer+0x6f8>
    1bde:	            |  |  |   addq.l #7,d0
    1be0:	            |  |  \-> asr.l #3,d0
    1be2:	            |  |      movea.l 100(sp),a0
    1be6:	            |  |      move.l 4(a0),d1
    1bea:	            |  |      move.l d1,-(sp)
    1bec:	            |  |      move.l d0,-(sp)
    1bee:	            |  |      jsr 17bfc <__mulsi3>
    1bf4:	            |  |      addq.l #8,sp
    1bf6:	            |  |      move.l d0,d1
    1bf8:	            |  |      move.l d1,d0
    1bfa:	            |  |      add.l d0,d0
    1bfc:	            |  |      add.l d0,d0
    1bfe:	            |  |      add.l d1,d0
    1c00:	            |  |      add.l d2,d0
    1c02:	            |  |      movea.l 74(sp),a0
    1c06:	            |  |      move.l d0,80(a0)
    custom->bltdpt = (APTR) returnvalue;
    1c0a:	            |  |      movea.l 74(sp),a0
    1c0e:	            |  |      move.l 58(sp),84(a0)
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1c14:	            |  |      movea.l 100(sp),a0
    1c18:	            |  |      move.l 4(a0),d0
    1c1c:	            |  |      move.l d0,d0
    1c1e:	            |  |      move.w d0,d1
    1c20:	            |  |      lsl.w #6,d1
    1c22:	            |  |      movea.l 100(sp),a0
    1c26:	            |  |      move.l (a0),d0
    1c28:	            |  |      movea.l d0,a0
    1c2a:	            |  |      cmpa.w #0,a0
    1c2e:	            |  |  /-- bge.s 1c34 <CstDrawZBuffer+0x74c>
    1c30:	            |  |  |   lea 15(a0),a0
    1c34:	            |  |  \-> move.l a0,d0
    1c36:	            |  |      asr.l #4,d0
    1c38:	            |  |      move.l d0,d0
    1c3a:	            |  |      add.w d1,d0
    1c3c:	            |  |      movea.l 74(sp),a0
    1c40:	            |  |      move.w d0,88(a0)

  }

  return returnvalue;
    1c44:	            |  \----> move.l 58(sp),d0

}
    1c48:	            \-------> move.l (sp)+,d2
    1c4a:	                      movea.l (sp)+,a6
    1c4c:	                      lea 88(sp),sp
    1c50:	                      rts

00001c52 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c52:	    lea -20(sp),sp
    1c56:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c58:	    move.l 1c8f2 <CstDrawBuffer>,d0
    1c5e:	/-- beq.s 1c78 <CstFreeBuffer+0x26>
    1c60:	|   move.l 1c8f2 <CstDrawBuffer>,20(sp)
    1c68:	|   move.l 1c9be <SysBase>,d0
    1c6e:	|   movea.l d0,a6
    1c70:	|   movea.l 20(sp),a1
    1c74:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c78:	\-> move.l 1c8ee <CstViewBuffer>,d0
    1c7e:	/-- beq.s 1c98 <CstFreeBuffer+0x46>
    1c80:	|   move.l 1c8ee <CstViewBuffer>,16(sp)
    1c88:	|   move.l 1c9be <SysBase>,d0
    1c8e:	|   movea.l d0,a6
    1c90:	|   movea.l 16(sp),a1
    1c94:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c98:	\-> move.l 1c8e8 <CstCopperList>,d0
    1c9e:	/-- beq.s 1cb8 <CstFreeBuffer+0x66>
    1ca0:	|   move.l 1c8e8 <CstCopperList>,12(sp)
    1ca8:	|   move.l 1c9be <SysBase>,d0
    1cae:	|   movea.l d0,a6
    1cb0:	|   movea.l 12(sp),a1
    1cb4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1cb8:	\-> move.l 1c8e0 <CstBackDrop>,d0
    1cbe:	/-- beq.s 1cd8 <CstFreeBuffer+0x86>
    1cc0:	|   move.l 1c8e0 <CstBackDrop>,8(sp)
    1cc8:	|   move.l 1c9be <SysBase>,d0
    1cce:	|   movea.l d0,a6
    1cd0:	|   movea.l 8(sp),a1
    1cd4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1cd8:	\-> move.l 1c8e4 <CstBackDropBackup>,d0
    1cde:	/-- beq.s 1cf8 <CstFreeBuffer+0xa6>
    1ce0:	|   move.l 1c8e4 <CstBackDropBackup>,4(sp)
    1ce8:	|   move.l 1c9be <SysBase>,d0
    1cee:	|   movea.l d0,a6
    1cf0:	|   movea.l 4(sp),a1
    1cf4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1cf8:	\-> clr.l 1c8f2 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cfe:	    clr.l 1c8ee <CstViewBuffer>
  CstCopperList = NULL;
    1d04:	    clr.l 1c8e8 <CstCopperList>
  CstBackDrop = NULL;
    1d0a:	    clr.l 1c8e0 <CstBackDrop>

}
    1d10:	    nop
    1d12:	    movea.l (sp)+,a6
    1d14:	    lea 20(sp),sp
    1d18:	    rts

00001d1a <CstFreeze>:



void CstFreeze( ) {
    1d1a:	       lea -36(sp),sp
    1d1e:	       move.l a6,-(sp)
    1d20:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d22:	       pea 17edb <PutChar+0x1c9>
    1d28:	       jsr 17248 <KPrintF>
    1d2e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1d30:	       move.l 1c912 <winWidth>,d0
    1d36:	       lsr.l #3,d0
    1d38:	       move.l d0,d1
    1d3a:	       move.l 1c916 <winHeight>,d0
    1d40:	       move.l d0,d0
    1d42:	       muls.w d0,d1
    1d44:	       move.w d1,d0
    1d46:	       add.w d0,d0
    1d48:	       add.w d0,d0
    1d4a:	       move.w d0,d2
    1d4c:	       add.w d1,d2
    1d4e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d52:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d5a:	       moveq #0,d0
    1d5c:	       move.w 26(sp),d0
    1d60:	       move.l d0,18(sp)
    1d64:	       clr.l 14(sp)
    1d68:	       move.l 1c9be <SysBase>,d0
    1d6e:	       movea.l d0,a6
    1d70:	       move.l 18(sp),d0
    1d74:	       move.l 14(sp),d1
    1d78:	       jsr -684(a6)
    1d7c:	       move.l d0,10(sp)
    1d80:	       move.l 10(sp),d0
    1d84:	       move.l d0,1c8e4 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d8a:	       move.l 1c8e4 <CstBackDropBackup>,d0
    1d90:	   /-- bne.s 1da0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d92:	   |   pea 17f02 <PutChar+0x1f0>
    1d98:	   |   jsr 17248 <KPrintF>
    1d9e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1da0:	   \-> move.l 1c916 <winHeight>,d0
    1da6:	       move.l d0,d0
    1da8:	       movea.w d0,a1
    1daa:	       move.l 1c912 <winWidth>,d0
    1db0:	       move.l d0,d0
    1db2:	       movea.w d0,a0
    1db4:	       move.l 1c8e4 <CstBackDropBackup>,d0
    1dba:	       clr.l -(sp)
    1dbc:	       pea 5 <_start+0x5>
    1dc0:	       move.l a1,-(sp)
    1dc2:	       move.l a0,-(sp)
    1dc4:	       pea 17f3a <PutChar+0x228>
    1dca:	       move.l d0,-(sp)
    1dcc:	       jsr 17330 <debug_register_bitmap>
    1dd2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1dd6:	       move.l 1c8e0 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1dde:	       move.l 1c8e4 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1de6:	       clr.l 32(sp)
    1dea:	   /-- bra.s 1e10 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1dec:	/--|-> move.l 40(sp),d1
    1df0:	|  |   move.l d1,d0
    1df2:	|  |   addq.l #4,d0
    1df4:	|  |   move.l d0,40(sp)
    1df8:	|  |   move.l 36(sp),d0
    1dfc:	|  |   move.l d0,d2
    1dfe:	|  |   addq.l #4,d2
    1e00:	|  |   move.l d2,36(sp)
    1e04:	|  |   movea.l d1,a0
    1e06:	|  |   move.l (a0),d1
    1e08:	|  |   movea.l d0,a0
    1e0a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0c:	|  |   addq.l #1,32(sp)
    1e10:	|  \-> move.w 26(sp),d0
    1e14:	|      lsr.w #2,d0
    1e16:	|      move.w d0,d0
    1e18:	|      andi.l #65535,d0
    1e1e:	|      cmp.l 32(sp),d0
    1e22:	\----- bgt.s 1dec <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e24:	       move.l 1c8ee <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1e2c:	       move.l 1c8e0 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1e34:	       clr.l 28(sp)
    1e38:	   /-- bra.s 1e5e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1e3a:	/--|-> move.l 40(sp),d1
    1e3e:	|  |   move.l d1,d0
    1e40:	|  |   addq.l #4,d0
    1e42:	|  |   move.l d0,40(sp)
    1e46:	|  |   move.l 36(sp),d0
    1e4a:	|  |   move.l d0,d2
    1e4c:	|  |   addq.l #4,d2
    1e4e:	|  |   move.l d2,36(sp)
    1e52:	|  |   movea.l d1,a0
    1e54:	|  |   move.l (a0),d1
    1e56:	|  |   movea.l d0,a0
    1e58:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e5a:	|  |   addq.l #1,28(sp)
    1e5e:	|  \-> move.w 26(sp),d0
    1e62:	|      lsr.w #2,d0
    1e64:	|      move.w d0,d0
    1e66:	|      andi.l #65535,d0
    1e6c:	|      cmp.l 28(sp),d0
    1e70:	\----- bgt.s 1e3a <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e72:	       move.w #2,1c8ec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e7a:	       move.l 1c912 <winWidth>,d0
    1e80:	       lsr.l #4,d0
    1e82:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    1e88:	       move.l a0,d1
    1e8a:	       addq.l #2,d1
    1e8c:	       move.l d1,1c902 <CstBackDropBufferApplyCursor>
    1e92:	       move.l d0,d0
    1e94:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1e96:	       move.l 1c916 <winHeight>,d0
    1e9c:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    1ea2:	       move.l a0,d1
    1ea4:	       addq.l #2,d1
    1ea6:	       move.l d1,1c902 <CstBackDropBufferApplyCursor>
    1eac:	       move.l d0,d0
    1eae:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1eb0:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    1eb6:	       move.l a0,d0
    1eb8:	       addq.l #2,d0
    1eba:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    1ec0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ec2:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    1ec8:	       move.l a0,d0
    1eca:	       addq.l #2,d0
    1ecc:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    1ed2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ed4:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    1eda:	       move.l a0,d0
    1edc:	       addq.l #2,d0
    1ede:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    1ee4:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1ee6:	       pea 17f49 <PutChar+0x237>
    1eec:	       jsr 17248 <KPrintF>
    1ef2:	       addq.l #4,sp

}  
    1ef4:	       nop
    1ef6:	       move.l (sp)+,d2
    1ef8:	       movea.l (sp)+,a6
    1efa:	       lea 36(sp),sp
    1efe:	       rts

00001f00 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f00:	             lea -144(sp),sp
    1f04:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f08:	             pea 17f5d <PutChar+0x24b>
    1f0e:	             jsr 17248 <KPrintF>
    1f14:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f16:	             move.l 164(sp),-(sp)
    1f1a:	             jsr 6bc <get2bytes>
    1f20:	             addq.l #4,sp
    1f22:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1f26:	             move.l 164(sp),-(sp)
    1f2a:	             jsr 6bc <get2bytes>
    1f30:	             addq.l #4,sp
    1f32:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1f36:	             move.w 134(sp),d0
    1f3a:	             lsr.w #3,d0
    1f3c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f40:	             move.w 130(sp),d0
    1f44:	             lsr.w #1,d0
    1f46:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f4a:	             move.l 1c912 <winWidth>,d0
    1f50:	             lsr.l #3,d0
    1f52:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f56:	             move.w 130(sp),d0
    1f5a:	             muls.w 132(sp),d0
    1f5e:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f62:	             move.w 124(sp),d1
    1f66:	             move.w d1,d0
    1f68:	             add.w d0,d0
    1f6a:	             add.w d0,d0
    1f6c:	             move.w d0,d2
    1f6e:	             add.w d1,d2
    1f70:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f74:	             move.w 1c8da <CstPaletteLoaded>,d0
    1f7a:	/----------- bne.w 2014 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f7e:	|            move.w #384,120(sp)

    if(CstPalette) {
    1f84:	|            move.l 1c90a <CstPalette>,d0
    1f8a:	|        /-- beq.s 1fa4 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f8c:	|        |   move.l 1c90a <CstPalette>,116(sp)
    1f94:	|        |   move.l 1c9be <SysBase>,d0
    1f9a:	|        |   movea.l d0,a6
    1f9c:	|        |   movea.l 116(sp),a1
    1fa0:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fa4:	|        \-> moveq #64,d0
    1fa6:	|            move.l d0,112(sp)
    1faa:	|            clr.l 108(sp)
    1fae:	|            move.l 1c9be <SysBase>,d0
    1fb4:	|            movea.l d0,a6
    1fb6:	|            move.l 112(sp),d0
    1fba:	|            move.l 108(sp),d1
    1fbe:	|            jsr -684(a6)
    1fc2:	|            move.l d0,104(sp)
    1fc6:	|            move.l 104(sp),d0
    1fca:	|            move.l d0,1c90a <CstPalette>
    CstPaletteLoaded = 1;
    1fd0:	|            move.w #1,1c8da <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1fd8:	|            move.l 1c90a <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fe0:	|            clr.l 152(sp)
    1fe4:	|        /-- bra.s 200a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fe6:	|     /--|-> move.l 164(sp),-(sp)
    1fea:	|     |  |   jsr 6bc <get2bytes>
    1ff0:	|     |  |   addq.l #4,sp
    1ff2:	|     |  |   move.l d0,d1
    1ff4:	|     |  |   move.l 156(sp),d0
    1ff8:	|     |  |   move.l d0,d2
    1ffa:	|     |  |   addq.l #2,d2
    1ffc:	|     |  |   move.l d2,156(sp)
    2000:	|     |  |   move.l d1,d1
    2002:	|     |  |   movea.l d0,a0
    2004:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2006:	|     |  |   addq.l #1,152(sp)
    200a:	|     |  \-> moveq #31,d0
    200c:	|     |      cmp.l 152(sp),d0
    2010:	|     \----- bge.s 1fe6 <CstLoadBackdrop+0xe6>
    2012:	|  /-------- bra.s 2032 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2014:	\--|-------> clr.l 148(sp)
    2018:	   |     /-- bra.s 202a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    201a:	   |  /--|-> move.l 164(sp),-(sp)
    201e:	   |  |  |   jsr 6bc <get2bytes>
    2024:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2026:	   |  |  |   addq.l #1,148(sp)
    202a:	   |  |  \-> moveq #31,d2
    202c:	   |  |      cmp.l 148(sp),d2
    2030:	   |  \----- bge.s 201a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2032:	   \-------> moveq #0,d0
    2034:	             move.w 122(sp),d0
    2038:	             move.l d0,100(sp)
    203c:	             moveq #2,d0
    203e:	             move.l d0,96(sp)
    2042:	             move.l 1c9be <SysBase>,d0
    2048:	             movea.l d0,a6
    204a:	             move.l 100(sp),d0
    204e:	             move.l 96(sp),d1
    2052:	             jsr -684(a6)
    2056:	             move.l d0,92(sp)
    205a:	             move.l 92(sp),d0
    205e:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2062:	         /-- bne.s 2072 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2064:	         |   pea 17f8c <PutChar+0x27a>
    206a:	         |   jsr 17248 <KPrintF>
    2070:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2072:	         \-> moveq #0,d0
    2074:	             move.w 124(sp),d0
    2078:	             move.l d0,84(sp)
    207c:	             moveq #2,d2
    207e:	             move.l d2,80(sp)
    2082:	             move.l 1c9be <SysBase>,d0
    2088:	             movea.l d0,a6
    208a:	             move.l 84(sp),d0
    208e:	             move.l 80(sp),d1
    2092:	             jsr -684(a6)
    2096:	             move.l d0,76(sp)
    209a:	             move.l 76(sp),d0
    209e:	             move.l d0,72(sp)
  if( !tmpmask)
    20a2:	         /-- bne.s 20b2 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20a4:	         |   pea 17fc2 <PutChar+0x2b0>
    20aa:	         |   jsr 17248 <KPrintF>
    20b0:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20b2:	         \-> move.w 132(sp),d0
    20b6:	             movea.w d0,a1
    20b8:	             move.w 134(sp),d0
    20bc:	             movea.w d0,a0
    20be:	             clr.l -(sp)
    20c0:	             pea 5 <_start+0x5>
    20c4:	             move.l a1,-(sp)
    20c6:	             move.l a0,-(sp)
    20c8:	             pea 17ff6 <PutChar+0x2e4>
    20ce:	             move.l 108(sp),-(sp)
    20d2:	             jsr 17330 <debug_register_bitmap>
    20d8:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20dc:	             move.w 132(sp),d0
    20e0:	             movea.w d0,a1
    20e2:	             move.w 134(sp),d0
    20e6:	             movea.w d0,a0
    20e8:	             clr.l -(sp)
    20ea:	             pea 1 <_start+0x1>
    20ee:	             move.l a1,-(sp)
    20f0:	             move.l a0,-(sp)
    20f2:	             pea 18004 <PutChar+0x2f2>
    20f8:	             move.l 108(sp),-(sp)
    20fc:	             jsr 17330 <debug_register_bitmap>
    2102:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2106:	             move.l 164(sp),68(sp)
    210c:	             move.l 88(sp),64(sp)
    2112:	             moveq #2,d0
    2114:	             move.l d0,60(sp)
    2118:	             move.w 122(sp),d0
    211c:	             lsr.w #1,d0
    211e:	             move.w d0,d0
    2120:	             andi.l #65535,d0
    2126:	             move.l d0,56(sp)
    212a:	             move.l 1c9c6 <DOSBase>,d0
    2130:	             movea.l d0,a6
    2132:	             move.l 68(sp),d1
    2136:	             move.l 64(sp),d2
    213a:	             move.l 60(sp),d3
    213e:	             move.l 56(sp),d4
    2142:	             jsr -324(a6)
    2146:	             move.l d0,52(sp)
    214a:	             move.l 52(sp),d0
    214e:	             move.w d0,50(sp)
  if(!count) {
    2152:	         /-- bne.s 2166 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2154:	         |   pea 18010 <PutChar+0x2fe>
    215a:	         |   jsr 17248 <KPrintF>
    2160:	         |   addq.l #4,sp
    return;
    2162:	   /-----|-- bra.w 23b2 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2166:	   |     \-> move.l 164(sp),46(sp)
    216c:	   |         move.l 72(sp),42(sp)
    2172:	   |         moveq #2,d2
    2174:	   |         move.l d2,38(sp)
    2178:	   |         move.w 124(sp),d0
    217c:	   |         lsr.w #1,d0
    217e:	   |         move.w d0,d0
    2180:	   |         andi.l #65535,d0
    2186:	   |         move.l d0,34(sp)
    218a:	   |         move.l 1c9c6 <DOSBase>,d0
    2190:	   |         movea.l d0,a6
    2192:	   |         move.l 46(sp),d1
    2196:	   |         move.l 42(sp),d2
    219a:	   |         move.l 38(sp),d3
    219e:	   |         move.l 34(sp),d4
    21a2:	   |         jsr -324(a6)
    21a6:	   |         move.l d0,30(sp)
    21aa:	   |         move.l 30(sp),d0
    21ae:	   |         move.w d0,50(sp)
   

  if(!count) {
    21b2:	   |     /-- bne.s 21c6 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21b4:	   |     |   pea 18010 <PutChar+0x2fe>
    21ba:	   |     |   jsr 17248 <KPrintF>
    21c0:	   |     |   addq.l #4,sp
    return;
    21c2:	   +-----|-- bra.w 23b2 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21c6:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21ce:	   |         move.l 1c8e0 <CstBackDrop>,d0
    21d4:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21d8:	   |         move.l 172(sp),d0
    21dc:	   |         move.w d0,d1
    21de:	   |         muls.w 126(sp),d1
    21e2:	   |         move.l 168(sp),d0
    21e6:	   |     /-- bpl.s 21ea <CstLoadBackdrop+0x2ea>
    21e8:	   |     |   addq.l #7,d0
    21ea:	   |     \-> asr.l #3,d0
    21ec:	   |         move.l d0,d0
    21ee:	   |         movea.w d1,a0
    21f0:	   |         adda.w d0,a0
    21f2:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    21f6:	   |         moveq #0,d0
    21f8:	   |         move.w 24(sp),d0
    21fc:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2200:	   |         pea 1802b <PutChar+0x319>
    2206:	   |         jsr 17248 <KPrintF>
    220c:	   |         addq.l #4,sp


  WaitBlit();
    220e:	   |         move.l 1c9ca <GfxBase>,d0
    2214:	   |         movea.l d0,a6
    2216:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    221a:	   |         movea.l 26(sp),a0
    221e:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2224:	   |         movea.l 26(sp),a0
    2228:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    222e:	   |         movea.l 26(sp),a0
    2232:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2238:	   |         movea.l 26(sp),a0
    223c:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2242:	   |         move.w 126(sp),d0
    2246:	   |         sub.w 130(sp),d0
    224a:	   |         movea.l 26(sp),a0
    224e:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2252:	   |         move.w 126(sp),d0
    2256:	   |         sub.w 130(sp),d0
    225a:	   |         movea.l 26(sp),a0
    225e:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2262:	   |         movea.l 26(sp),a0
    2266:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    226c:	   |         movea.l 26(sp),a0
    2270:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2276:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    227c:	   |         clr.l 136(sp)
    2280:	   |     /-- bra.s 22e2 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2282:	   |  /--|-> movea.l 26(sp),a0
    2286:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    228c:	   |  |  |   move.l 140(sp),d0
    2290:	   |  |  |   movea.l 26(sp),a0
    2294:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2298:	   |  |  |   move.l 144(sp),d0
    229c:	   |  |  |   movea.l 26(sp),a0
    22a0:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22a4:	   |  |  |   move.l 144(sp),d0
    22a8:	   |  |  |   movea.l 26(sp),a0
    22ac:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22b0:	   |  |  |   move.w 132(sp),d0
    22b4:	   |  |  |   lsl.w #6,d0
    22b6:	   |  |  |   add.w 128(sp),d0
    22ba:	   |  |  |   movea.l 26(sp),a0
    22be:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22c2:	   |  |  |   moveq #0,d0
    22c4:	   |  |  |   move.w 124(sp),d0
    22c8:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    22cc:	   |  |  |   move.w 1c8de <CstBackdropSizePlane>,d0
    22d2:	   |  |  |   move.w d0,d0
    22d4:	   |  |  |   andi.l #65535,d0
    22da:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22de:	   |  |  |   addq.l #1,136(sp)
    22e2:	   |  |  \-> moveq #4,d0
    22e4:	   |  |      cmp.l 136(sp),d0
    22e8:	   |  \----- bge.s 2282 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22ea:	   |         move.l 1c9ca <GfxBase>,d0
    22f0:	   |         movea.l d0,a6
    22f2:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22f6:	   |         pea 1804a <PutChar+0x338>
    22fc:	   |         jsr 17248 <KPrintF>
    2302:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2304:	   |         move.l 88(sp),20(sp)
    230a:	   |         move.l 1c9be <SysBase>,d0
    2310:	   |         movea.l d0,a6
    2312:	   |         movea.l 20(sp),a1
    2316:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    231a:	   |         move.l 72(sp),16(sp)
    2320:	   |         move.l 1c9be <SysBase>,d0
    2326:	   |         movea.l d0,a6
    2328:	   |         movea.l 16(sp),a1
    232c:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2330:	   |         move.w #2,1c8ec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2338:	   |         move.l 1c912 <winWidth>,d0
    233e:	   |         lsr.l #4,d0
    2340:	   |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2346:	   |         move.l a0,d1
    2348:	   |         addq.l #2,d1
    234a:	   |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    2350:	   |         move.l d0,d0
    2352:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2354:	   |         move.l 1c916 <winHeight>,d0
    235a:	   |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2360:	   |         move.l a0,d1
    2362:	   |         addq.l #2,d1
    2364:	   |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    236a:	   |         move.l d0,d0
    236c:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    236e:	   |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2374:	   |         move.l a0,d0
    2376:	   |         addq.l #2,d0
    2378:	   |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    237e:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2380:	   |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2386:	   |         move.l a0,d0
    2388:	   |         addq.l #2,d0
    238a:	   |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2390:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2392:	   |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2398:	   |         move.l a0,d0
    239a:	   |         addq.l #2,d0
    239c:	   |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    23a2:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    23a4:	   |         pea 1806a <PutChar+0x358>
    23aa:	   |         jsr 17248 <KPrintF>
    23b0:	   |         addq.l #4,sp

}
    23b2:	   \-------> movem.l (sp)+,d2-d4/a6
    23b6:	             lea 144(sp),sp
    23ba:	             rts

000023bc <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    23bc:	                lea -72(sp),sp
    23c0:	                move.l a6,-(sp)
    23c2:	                move.l d2,-(sp)
    23c4:	                move.l 88(sp),d1
    23c8:	                move.l 92(sp),d0
    23cc:	                move.w d1,d1
    23ce:	                move.w d1,10(sp)
    23d2:	                move.w d0,d0
    23d4:	                move.w d0,8(sp)
  UWORD *destination = 0;
    23d8:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    23dc:	                move.w #2,1c8ec <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    23e4:	                move.l 1c8e0 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    23ec:	                clr.l 56(sp)

  blitwidth = single->width/16;
    23f0:	                movea.l 84(sp),a0
    23f4:	                move.l (a0),d0
    23f6:	                movea.l d0,a0
    23f8:	                cmpa.w #0,a0
    23fc:	            /-- bge.s 2402 <CstPasteChar+0x46>
    23fe:	            |   lea 15(a0),a0
    2402:	            \-> move.l a0,d0
    2404:	                asr.l #4,d0
    2406:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    240a:	            /-- bne.s 2412 <CstPasteChar+0x56>
    240c:	            |   moveq #1,d0
    240e:	            |   move.l d0,40(sp)

  if( y < 0) {
    2412:	            \-> tst.w 8(sp)
    2416:	         /----- bge.s 245e <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2418:	         |      movea.w 8(sp),a1
    241c:	         |      movea.l 84(sp),a0
    2420:	         |      move.l 4(a0),d0
    2424:	         |      add.l a1,d0
    2426:	         |  /-- bpl.s 243a <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2428:	         |  |   pea 18084 <PutChar+0x372>
    242e:	         |  |   jsr 17248 <KPrintF>
    2434:	         |  |   addq.l #4,sp
      return;
    2436:	/--------|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    243a:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    243e:	|        |      move.w 8(sp),d0
    2442:	|        |      ext.l d0
    2444:	|        |      neg.l d0
    2446:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    244a:	|        |      movea.l 84(sp),a0
    244e:	|        |      move.l 4(a0),d0
    2452:	|        |      movea.w 8(sp),a0
    2456:	|        |      add.l a0,d0
    2458:	|        |      move.l d0,44(sp)
    245c:	|     /--|----- bra.s 24d0 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    245e:	|     |  \----> movea.w 8(sp),a1
    2462:	|     |         movea.l 84(sp),a0
    2466:	|     |         move.l 4(a0),d0
    246a:	|     |         move.l a1,d1
    246c:	|     |         add.l d0,d1
    246e:	|     |         move.l 1c916 <winHeight>,d0
    2474:	|     |         cmp.l d1,d0
    2476:	|     |  /----- bge.s 24b8 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    2478:	|     |  |      movea.w 8(sp),a0
    247c:	|     |  |      move.l 1c916 <winHeight>,d0
    2482:	|     |  |      cmp.l a0,d0
    2484:	|     |  |  /-- bge.s 2498 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2486:	|     |  |  |   pea 18084 <PutChar+0x372>
    248c:	|     |  |  |   jsr 17248 <KPrintF>
    2492:	|     |  |  |   addq.l #4,sp
      return;
    2494:	+-----|--|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    ystartdst = y;
    2498:	|     |  |  \-> movea.w 8(sp),a0
    249c:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    24a0:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    24a4:	|     |  |      move.l 1c916 <winHeight>,d0
    24aa:	|     |  |      movea.w 8(sp),a0
    24ae:	|     |  |      move.l d0,d1
    24b0:	|     |  |      sub.l a0,d1
    24b2:	|     |  |      move.l d1,44(sp)
    24b6:	|     +--|----- bra.s 24d0 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    24b8:	|     |  \----> movea.w 8(sp),a0
    24bc:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    24c0:	|     |         clr.l 48(sp)
    blitheight = single->height;
    24c4:	|     |         movea.l 84(sp),a0
    24c8:	|     |         move.l 4(a0),d0
    24cc:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    24d0:	|     \-------> tst.w 10(sp)
    24d4:	|        /----- bge.w 2646 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    24d8:	|        |      movea.w 10(sp),a1
    24dc:	|        |      movea.l 84(sp),a0
    24e0:	|        |      move.l (a0),d0
    24e2:	|        |      add.l a1,d0
    24e4:	|        |  /-- bpl.s 24f8 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24e6:	|        |  |   pea 18084 <PutChar+0x372>
    24ec:	|        |  |   jsr 17248 <KPrintF>
    24f2:	|        |  |   addq.l #4,sp
      return;
    24f4:	+--------|--|-- bra.w 2afa <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    24f8:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    24fe:	|        |      move.w 10(sp),d0
    2502:	|        |  /-- bpl.s 2508 <CstPasteChar+0x14c>
    2504:	|        |  |   addi.w #15,d0
    2508:	|        |  \-> asr.w #4,d0
    250a:	|        |      neg.w d0
    250c:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2510:	|        |      move.w 10(sp),d0
    2514:	|        |      ext.l d0
    2516:	|        |      neg.l d0
    2518:	|        |      andi.l #-2147483633,d0
    251e:	|        |  /-- bpl.s 2528 <CstPasteChar+0x16c>
    2520:	|        |  |   subq.l #1,d0
    2522:	|        |  |   moveq #-16,d1
    2524:	|        |  |   or.l d1,d0
    2526:	|        |  |   addq.l #1,d0
    2528:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    252c:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2530:	|        |      movea.l 84(sp),a0
    2534:	|        |      move.l 24(a0),d0
    2538:	|        |      move.l d0,d1
    253a:	|        |      moveq #0,d0
    253c:	|        |      move.w 76(sp),d0
    2540:	|        |      add.l d0,d0
    2542:	|        |      move.l d1,d2
    2544:	|        |      add.l d0,d2
    2546:	|        |      movea.l 84(sp),a0
    254a:	|        |      move.l (a0),d0
    254c:	|        |      move.l 48(sp),-(sp)
    2550:	|        |      move.l d0,-(sp)
    2552:	|        |      jsr 17bfc <__mulsi3>
    2558:	|        |      addq.l #8,sp
    255a:	|        |      lsr.l #3,d0
    255c:	|        |      move.l d2,d1
    255e:	|        |      add.l d0,d1
    2560:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2564:	|        |      move.l 1c912 <winWidth>,d0
    256a:	|        |      move.l 52(sp),-(sp)
    256e:	|        |      move.l d0,-(sp)
    2570:	|        |      jsr 17bfc <__mulsi3>
    2576:	|        |      addq.l #8,sp
    2578:	|        |      lsr.l #3,d0
    257a:	|        |      move.l 28(sp),d1
    257e:	|        |      add.l d1,d0
    2580:	|        |      move.l d0,d2
    2582:	|        |      subq.l #2,d2
    2584:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2588:	|        |      move.l 1c912 <winWidth>,d0
    258e:	|        |      move.l 52(sp),-(sp)
    2592:	|        |      move.l d0,-(sp)
    2594:	|        |      jsr 17bfc <__mulsi3>
    259a:	|        |      addq.l #8,sp
    259c:	|        |      lsr.l #3,d0
    259e:	|        |      move.l 28(sp),d1
    25a2:	|        |      add.l d1,d0
    25a4:	|        |      move.l d0,d1
    25a6:	|        |      subq.l #2,d1
    25a8:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    25ac:	|        |      moveq #0,d0
    25ae:	|        |      move.w 74(sp),d0
    25b2:	|        |      moveq #16,d1
    25b4:	|        |      sub.l d0,d1
    25b6:	|        |      move.l d1,d0
    25b8:	|        |      moveq #12,d2
    25ba:	|        |      lsl.l d2,d0
    25bc:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    25c0:	|        |      movea.l 84(sp),a0
    25c4:	|        |      move.l (a0),d0
    25c6:	|        |      movea.l d0,a0
    25c8:	|        |      cmpa.w #0,a0
    25cc:	|        |  /-- bge.s 25d2 <CstPasteChar+0x216>
    25ce:	|        |  |   lea 15(a0),a0
    25d2:	|        |  \-> move.l a0,d0
    25d4:	|        |      asr.l #4,d0
    25d6:	|        |      move.l d0,d0
    25d8:	|        |      add.w 76(sp),d0
    25dc:	|        |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    25e2:	|        |      move.l a0,d1
    25e4:	|        |      addq.l #2,d1
    25e6:	|        |      move.l d1,1c902 <CstBackDropBufferApplyCursor>
    25ec:	|        |      add.w 78(sp),d0
    25f0:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    25f2:	|        |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    25f8:	|        |      move.l a0,d0
    25fa:	|        |      addq.l #2,d0
    25fc:	|        |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2602:	|        |      move.l 44(sp),d0
    2606:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2608:	|        |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    260e:	|        |      move.l a0,d0
    2610:	|        |      addq.l #2,d0
    2612:	|        |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2618:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    261a:	|        |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2620:	|        |      move.l a0,d0
    2622:	|        |      addq.l #2,d0
    2624:	|        |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    262a:	|        |      move.l 52(sp),d0
    262e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2630:	|        |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2636:	|        |      move.l a0,d0
    2638:	|        |      addq.l #2,d0
    263a:	|        |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2640:	|        |      clr.w (a0)
    2642:	|     /--|----- bra.w 295a <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2646:	|     |  \----> movea.w 10(sp),a1
    264a:	|     |         movea.l 84(sp),a0
    264e:	|     |         move.l (a0),d0
    2650:	|     |         move.l a1,d1
    2652:	|     |         add.l d0,d1
    2654:	|     |         move.l 1c912 <winWidth>,d0
    265a:	|     |         cmp.l d1,d0
    265c:	|     |  /----- bge.w 27f8 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2660:	|     |  |      movea.w 10(sp),a1
    2664:	|     |  |      movea.l 84(sp),a0
    2668:	|     |  |      move.l (a0),d0
    266a:	|     |  |      move.l a1,d1
    266c:	|     |  |      sub.l d0,d1
    266e:	|     |  |      move.l 1c912 <winWidth>,d0
    2674:	|     |  |      cmp.l d1,d0
    2676:	|     |  |  /-- bge.s 268a <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2678:	|     |  |  |   pea 18084 <PutChar+0x372>
    267e:	|     |  |  |   jsr 17248 <KPrintF>
    2684:	|     |  |  |   addq.l #4,sp
      return;
    2686:	+-----|--|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    268a:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    268e:	|     |  |      movea.w 10(sp),a1
    2692:	|     |  |      movea.l 84(sp),a0
    2696:	|     |  |      move.l (a0),d0
    2698:	|     |  |      add.l a1,d0
    269a:	|     |  |      move.l d0,d1
    269c:	|     |  |      move.l 1c912 <winWidth>,d0
    26a2:	|     |  |      sub.l d0,d1
    26a4:	|     |  |      move.l d1,d0
    26a6:	|     |  |      lsr.l #4,d0
    26a8:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    26ac:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    26b0:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    26b6:	|     |  |      movea.l 84(sp),a0
    26ba:	|     |  |      move.l 24(a0),d0
    26be:	|     |  |      move.l d0,d2
    26c0:	|     |  |      movea.l 84(sp),a0
    26c4:	|     |  |      move.l (a0),d0
    26c6:	|     |  |      move.l 48(sp),-(sp)
    26ca:	|     |  |      move.l d0,-(sp)
    26cc:	|     |  |      jsr 17bfc <__mulsi3>
    26d2:	|     |  |      addq.l #8,sp
    26d4:	|     |  |      lsr.l #3,d0
    26d6:	|     |  |      move.l d2,d1
    26d8:	|     |  |      add.l d0,d1
    26da:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26de:	|     |  |      move.l 1c912 <winWidth>,d0
    26e4:	|     |  |      move.l 52(sp),-(sp)
    26e8:	|     |  |      move.l d0,-(sp)
    26ea:	|     |  |      jsr 17bfc <__mulsi3>
    26f0:	|     |  |      addq.l #8,sp
    26f2:	|     |  |      lsr.l #3,d0
    26f4:	|     |  |      move.l 28(sp),d1
    26f8:	|     |  |      add.l d0,d1
    26fa:	|     |  |      move.w 10(sp),d0
    26fe:	|     |  |  /-- bpl.s 2704 <CstPasteChar+0x348>
    2700:	|     |  |  |   addi.w #15,d0
    2704:	|     |  |  \-> asr.w #4,d0
    2706:	|     |  |      movea.w d0,a0
    2708:	|     |  |      move.l a0,d0
    270a:	|     |  |      add.l a0,d0
    270c:	|     |  |      move.l d1,d2
    270e:	|     |  |      add.l d0,d2
    2710:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2714:	|     |  |      move.l 1c912 <winWidth>,d0
    271a:	|     |  |      move.l 52(sp),-(sp)
    271e:	|     |  |      move.l d0,-(sp)
    2720:	|     |  |      jsr 17bfc <__mulsi3>
    2726:	|     |  |      addq.l #8,sp
    2728:	|     |  |      lsr.l #3,d0
    272a:	|     |  |      move.l 28(sp),d1
    272e:	|     |  |      add.l d0,d1
    2730:	|     |  |      move.w 10(sp),d0
    2734:	|     |  |  /-- bpl.s 273a <CstPasteChar+0x37e>
    2736:	|     |  |  |   addi.w #15,d0
    273a:	|     |  |  \-> asr.w #4,d0
    273c:	|     |  |      movea.w d0,a0
    273e:	|     |  |      move.l a0,d0
    2740:	|     |  |      add.l a0,d0
    2742:	|     |  |      move.l d1,d2
    2744:	|     |  |      add.l d0,d2
    2746:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    274a:	|     |  |      movea.l 84(sp),a0
    274e:	|     |  |      move.l (a0),d0
    2750:	|     |  |      andi.l #-2147483633,d0
    2756:	|     |  |  /-- bpl.s 2760 <CstPasteChar+0x3a4>
    2758:	|     |  |  |   subq.l #1,d0
    275a:	|     |  |  |   moveq #-16,d1
    275c:	|     |  |  |   or.l d1,d0
    275e:	|     |  |  |   addq.l #1,d0
    2760:	|     |  |  \-> moveq #12,d2
    2762:	|     |  |      lsl.l d2,d0
    2764:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2768:	|     |  |      movea.l 84(sp),a0
    276c:	|     |  |      move.l (a0),d0
    276e:	|     |  |      movea.l d0,a0
    2770:	|     |  |      cmpa.w #0,a0
    2774:	|     |  |  /-- bge.s 277a <CstPasteChar+0x3be>
    2776:	|     |  |  |   lea 15(a0),a0
    277a:	|     |  |  \-> move.l a0,d0
    277c:	|     |  |      asr.l #4,d0
    277e:	|     |  |      move.l d0,d0
    2780:	|     |  |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2786:	|     |  |      move.l a0,d1
    2788:	|     |  |      addq.l #2,d1
    278a:	|     |  |      move.l d1,1c902 <CstBackDropBufferApplyCursor>
    2790:	|     |  |      add.w 76(sp),d0
    2794:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2796:	|     |  |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    279c:	|     |  |      move.l a0,d0
    279e:	|     |  |      addq.l #2,d0
    27a0:	|     |  |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    27a6:	|     |  |      move.l 44(sp),d0
    27aa:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27ac:	|     |  |      move.w 10(sp),d0
    27b0:	|     |  |  /-- bpl.s 27b6 <CstPasteChar+0x3fa>
    27b2:	|     |  |  |   addi.w #15,d0
    27b6:	|     |  |  \-> asr.w #4,d0
    27b8:	|     |  |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    27be:	|     |  |      move.l a0,d1
    27c0:	|     |  |      addq.l #2,d1
    27c2:	|     |  |      move.l d1,1c902 <CstBackDropBufferApplyCursor>
    27c8:	|     |  |      add.w d0,d0
    27ca:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27cc:	|     |  |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    27d2:	|     |  |      move.l a0,d0
    27d4:	|     |  |      addq.l #2,d0
    27d6:	|     |  |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    27dc:	|     |  |      move.l 52(sp),d0
    27e0:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    27e2:	|     |  |      movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    27e8:	|     |  |      move.l a0,d0
    27ea:	|     |  |      addq.l #2,d0
    27ec:	|     |  |      move.l d0,1c902 <CstBackDropBufferApplyCursor>
    27f2:	|     |  |      clr.w (a0)
    27f4:	|     +--|----- bra.w 295a <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    27f8:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    27fe:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2802:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2806:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    280a:	|     |         movea.l 84(sp),a0
    280e:	|     |         move.l 24(a0),d0
    2812:	|     |         move.l d0,d2
    2814:	|     |         movea.l 84(sp),a0
    2818:	|     |         move.l (a0),d0
    281a:	|     |         movea.l d0,a0
    281c:	|     |         cmpa.w #0,a0
    2820:	|     |     /-- bge.s 2826 <CstPasteChar+0x46a>
    2822:	|     |     |   lea 15(a0),a0
    2826:	|     |     \-> move.l a0,d0
    2828:	|     |         asr.l #4,d0
    282a:	|     |         move.l 48(sp),-(sp)
    282e:	|     |         move.l d0,-(sp)
    2830:	|     |         jsr 17bfc <__mulsi3>
    2836:	|     |         addq.l #8,sp
    2838:	|     |         add.l d0,d0
    283a:	|     |         move.l d2,d1
    283c:	|     |         add.l d0,d1
    283e:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2842:	|     |         move.l 1c912 <winWidth>,d0
    2848:	|     |         move.l 52(sp),-(sp)
    284c:	|     |         move.l d0,-(sp)
    284e:	|     |         jsr 17bfc <__mulsi3>
    2854:	|     |         addq.l #8,sp
    2856:	|     |         lsr.l #3,d0
    2858:	|     |         move.l 28(sp),d1
    285c:	|     |         add.l d0,d1
    285e:	|     |         move.w 10(sp),d0
    2862:	|     |     /-- bpl.s 2868 <CstPasteChar+0x4ac>
    2864:	|     |     |   addi.w #15,d0
    2868:	|     |     \-> asr.w #4,d0
    286a:	|     |         movea.w d0,a0
    286c:	|     |         move.l a0,d0
    286e:	|     |         add.l a0,d0
    2870:	|     |         move.l d1,d2
    2872:	|     |         add.l d0,d2
    2874:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2878:	|     |         move.l 1c912 <winWidth>,d0
    287e:	|     |         move.l 52(sp),-(sp)
    2882:	|     |         move.l d0,-(sp)
    2884:	|     |         jsr 17bfc <__mulsi3>
    288a:	|     |         addq.l #8,sp
    288c:	|     |         lsr.l #3,d0
    288e:	|     |         move.l 28(sp),d1
    2892:	|     |         add.l d0,d1
    2894:	|     |         move.w 10(sp),d0
    2898:	|     |     /-- bpl.s 289e <CstPasteChar+0x4e2>
    289a:	|     |     |   addi.w #15,d0
    289e:	|     |     \-> asr.w #4,d0
    28a0:	|     |         movea.w d0,a0
    28a2:	|     |         move.l a0,d0
    28a4:	|     |         add.l a0,d0
    28a6:	|     |         move.l d1,d2
    28a8:	|     |         add.l d0,d2
    28aa:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    28ae:	|     |         move.w 10(sp),d0
    28b2:	|     |         andi.w #-32753,d0
    28b6:	|     |     /-- bpl.s 28c0 <CstPasteChar+0x504>
    28b8:	|     |     |   subq.w #1,d0
    28ba:	|     |     |   ori.w #-16,d0
    28be:	|     |     |   addq.w #1,d0
    28c0:	|     |     \-> ext.l d0
    28c2:	|     |         moveq #12,d1
    28c4:	|     |         lsl.l d1,d0
    28c6:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28ca:	|     |         movea.l 84(sp),a0
    28ce:	|     |         move.l (a0),d0
    28d0:	|     |         movea.l d0,a0
    28d2:	|     |         cmpa.w #0,a0
    28d6:	|     |     /-- bge.s 28dc <CstPasteChar+0x520>
    28d8:	|     |     |   lea 15(a0),a0
    28dc:	|     |     \-> move.l a0,d0
    28de:	|     |         asr.l #4,d0
    28e0:	|     |         move.l d0,d0
    28e2:	|     |         add.w 76(sp),d0
    28e6:	|     |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    28ec:	|     |         move.l a0,d1
    28ee:	|     |         addq.l #2,d1
    28f0:	|     |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    28f6:	|     |         add.w 78(sp),d0
    28fa:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    28fc:	|     |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         addq.l #2,d0
    2906:	|     |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    290c:	|     |         move.l 44(sp),d0
    2910:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2912:	|     |         move.w 10(sp),d0
    2916:	|     |     /-- bpl.s 291c <CstPasteChar+0x560>
    2918:	|     |     |   addi.w #15,d0
    291c:	|     |     \-> asr.w #4,d0
    291e:	|     |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2924:	|     |         move.l a0,d1
    2926:	|     |         addq.l #2,d1
    2928:	|     |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    292e:	|     |         add.w d0,d0
    2930:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2932:	|     |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    2938:	|     |         move.l a0,d0
    293a:	|     |         addq.l #2,d0
    293c:	|     |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2942:	|     |         move.l 52(sp),d0
    2946:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2948:	|     |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    294e:	|     |         move.l a0,d0
    2950:	|     |         addq.l #2,d0
    2952:	|     |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    2958:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    295a:	|     \-------> moveq #0,d0
    295c:	|               move.w 74(sp),d0
    2960:	|               moveq #0,d1
    2962:	|               not.w d1
    2964:	|               asr.l d0,d1
    2966:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    296a:	|               moveq #0,d1
    296c:	|               move.w 76(sp),d1
    2970:	|               moveq #0,d0
    2972:	|               move.w 78(sp),d0
    2976:	|               sub.l d0,d1
    2978:	|               move.l d1,d0
    297a:	|               add.w d0,d0
    297c:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2980:	|               move.l 1c912 <winWidth>,d0
    2986:	|               lsr.l #3,d0
    2988:	|               move.l d0,d2
    298a:	|               move.w 76(sp),d1
    298e:	|               sub.w 78(sp),d1
    2992:	|               move.l 40(sp),d0
    2996:	|               sub.w d0,d1
    2998:	|               move.w d1,d0
    299a:	|               add.w d1,d0
    299c:	|               add.w d2,d0
    299e:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29a2:	|               move.l 1c912 <winWidth>,d0
    29a8:	|               lsr.l #3,d0
    29aa:	|               move.l d0,d2
    29ac:	|               move.w 76(sp),d1
    29b0:	|               sub.w 78(sp),d1
    29b4:	|               move.l 40(sp),d0
    29b8:	|               sub.w d0,d1
    29ba:	|               move.w d1,d0
    29bc:	|               add.w d1,d0
    29be:	|               add.w d2,d0
    29c0:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    29c4:	|               move.l #14675968,16(sp)
  WaitBlit();
    29cc:	|               move.l 1c9ca <GfxBase>,d0
    29d2:	|               movea.l d0,a6
    29d4:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    29d8:	|               movea.l 16(sp),a0
    29dc:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    29e2:	|               movea.l 16(sp),a0
    29e6:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    29ec:	|               move.w 24(sp),d0
    29f0:	|               movea.l 16(sp),a0
    29f4:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    29f8:	|               move.w 22(sp),d0
    29fc:	|               movea.l 16(sp),a0
    2a00:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a04:	|               move.w 20(sp),d0
    2a08:	|               movea.l 16(sp),a0
    2a0c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a10:	|               move.l 1c912 <winWidth>,d0
    2a16:	|               lsr.l #3,d0
    2a18:	|               move.l d0,d1
    2a1a:	|               move.l 1c916 <winHeight>,d0
    2a20:	|               move.l d0,d0
    2a22:	|               move.w d1,d2
    2a24:	|               muls.w d0,d2
    2a26:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a2a:	|               move.w 1c8d8 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a32:	|               move.w 38(sp),d0
    2a36:	|               andi.w #1,d0
    2a3a:	|               move.w d0,12(sp)
  if(tmp2) {
    2a3e:	|        /----- beq.s 2a48 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2a40:	|        |      move.w #3066,36(sp)
    2a46:	|        |  /-- bra.s 2a4e <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2a48:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a4e:	|           \-> clr.l 32(sp)
    2a52:	|     /-------- bra.w 2af0 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2a56:	|  /--|-------> move.l 56(sp),d0
    2a5a:	|  |  |         add.w 36(sp),d0
    2a5e:	|  |  |         movea.l 16(sp),a0
    2a62:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2a66:	|  |  |         move.l 68(sp),d0
    2a6a:	|  |  |         movea.l 16(sp),a0
    2a6e:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2a72:	|  |  |         move.l 64(sp),d0
    2a76:	|  |  |         movea.l 16(sp),a0
    2a7a:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2a7e:	|  |  |         move.l 60(sp),d0
    2a82:	|  |  |         movea.l 16(sp),a0
    2a86:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2a8a:	|  |  |         move.l 44(sp),d0
    2a8e:	|  |  |         lsl.w #6,d0
    2a90:	|  |  |         move.l 40(sp),d1
    2a94:	|  |  |         add.w d1,d0
    2a96:	|  |  |         sub.w 76(sp),d0
    2a9a:	|  |  |         add.w 78(sp),d0
    2a9e:	|  |  |         movea.l 16(sp),a0
    2aa2:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2aa6:	|  |  |         moveq #0,d0
    2aa8:	|  |  |         move.w 14(sp),d0
    2aac:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2ab0:	|  |  |         moveq #0,d0
    2ab2:	|  |  |         move.w 14(sp),d0
    2ab6:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2aba:	|  |  |         move.w 38(sp),d0
    2abe:	|  |  |         lsr.w #1,d0
    2ac0:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2ac4:	|  |  |         move.w 38(sp),d1
    2ac8:	|  |  |         andi.w #1,d1
    2acc:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2ad0:	|  |  |  /----- beq.s 2ada <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2ad2:	|  |  |  |      move.w #3066,36(sp)
    2ad8:	|  |  |  |  /-- bra.s 2ae0 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2ada:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2ae0:	|  |  |     \-> move.l 1c9ca <GfxBase>,d0
    2ae6:	|  |  |         movea.l d0,a6
    2ae8:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2aec:	|  |  |         addq.l #1,32(sp)
    2af0:	|  |  \-------> moveq #4,d2
    2af2:	|  |            cmp.l 32(sp),d2
    2af6:	|  \----------- bge.w 2a56 <CstPasteChar+0x69a>
 
  }   
}
    2afa:	\-------------> move.l (sp)+,d2
    2afc:	                movea.l (sp)+,a6
    2afe:	                lea 72(sp),sp
    2b02:	                rts

00002b04 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b04:	                   lea -24(sp),sp
    2b08:	                   move.l a6,-(sp)
    2b0a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b0c:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b14:	                   move.l 1c8fa <CstCleanupQueueDrawBuffer>,d0
    2b1a:	/----------------- beq.w 2d22 <CstRestoreScreen+0x21e>
    2b1e:	|                  move.l 1c8f2 <CstDrawBuffer>,d0
    2b24:	+----------------- beq.w 2d22 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2b28:	|                  move.l 1c9ca <GfxBase>,d0
    2b2e:	|                  movea.l d0,a6
    2b30:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b34:	|                  movea.l 16(sp),a0
    2b38:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b3e:	|                  movea.l 16(sp),a0
    2b42:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b48:	|                  movea.l 16(sp),a0
    2b4c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2b52:	|     /----------- bra.w 2d16 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2b56:	|  /--|----------> movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2b5c:	|  |  |            move.l 4(a0),d0
    2b60:	|  |  |  /-------- beq.w 2ce4 <CstRestoreScreen+0x1e0>
    2b64:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2b6a:	|  |  |  |         movea.l 4(a0),a0
    2b6e:	|  |  |  |         move.l 16(a0),d0
    2b72:	|  |  |  |         moveq #2,d1
    2b74:	|  |  |  |         cmp.l d0,d1
    2b76:	|  |  |  +-------- blt.w 2ce4 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b7a:	|  |  |  |         move.l 1c912 <winWidth>,d0
    2b80:	|  |  |  |         lsr.l #3,d0
    2b82:	|  |  |  |         move.l d0,d1
    2b84:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2b8a:	|  |  |  |         move.w 8(a0),d0
    2b8e:	|  |  |  |         add.w d0,d0
    2b90:	|  |  |  |         sub.w d0,d1
    2b92:	|  |  |  |         movea.l 16(sp),a0
    2b96:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b9a:	|  |  |  |         move.l 1c912 <winWidth>,d0
    2ba0:	|  |  |  |         lsr.l #3,d0
    2ba2:	|  |  |  |         move.l d0,d1
    2ba4:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2baa:	|  |  |  |         move.w 8(a0),d0
    2bae:	|  |  |  |         add.w d0,d0
    2bb0:	|  |  |  |         sub.w d0,d1
    2bb2:	|  |  |  |         movea.l 16(sp),a0
    2bb6:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2bba:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2bc0:	|  |  |  |         move.w 14(a0),d0
    2bc4:	|  |  |  |         move.w d0,d0
    2bc6:	|  |  |  |         andi.l #65535,d0
    2bcc:	|  |  |  |         move.l 1c912 <winWidth>,d1
    2bd2:	|  |  |  |         move.l d1,-(sp)
    2bd4:	|  |  |  |         move.l d0,-(sp)
    2bd6:	|  |  |  |         jsr 17bfc <__mulsi3>
    2bdc:	|  |  |  |         addq.l #8,sp
    2bde:	|  |  |  |         move.l d0,d1
    2be0:	|  |  |  |         lsr.l #3,d1
    2be2:	|  |  |  |         move.l 1c8e0 <CstBackDrop>,d0
    2be8:	|  |  |  |         add.l d0,d1
    2bea:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2bf0:	|  |  |  |         move.w 12(a0),d0
    2bf4:	|  |  |  |         move.w d0,d0
    2bf6:	|  |  |  |         andi.l #65535,d0
    2bfc:	|  |  |  |         move.l d1,d2
    2bfe:	|  |  |  |         add.l d0,d2
    2c00:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c04:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2c0a:	|  |  |  |         move.w 14(a0),d0
    2c0e:	|  |  |  |         move.w d0,d0
    2c10:	|  |  |  |         andi.l #65535,d0
    2c16:	|  |  |  |         move.l 1c912 <winWidth>,d1
    2c1c:	|  |  |  |         move.l d1,-(sp)
    2c1e:	|  |  |  |         move.l d0,-(sp)
    2c20:	|  |  |  |         jsr 17bfc <__mulsi3>
    2c26:	|  |  |  |         addq.l #8,sp
    2c28:	|  |  |  |         move.l d0,d1
    2c2a:	|  |  |  |         lsr.l #3,d1
    2c2c:	|  |  |  |         move.l 1c8f2 <CstDrawBuffer>,d0
    2c32:	|  |  |  |         add.l d0,d1
    2c34:	|  |  |  |         movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2c3a:	|  |  |  |         move.w 12(a0),d0
    2c3e:	|  |  |  |         move.w d0,d0
    2c40:	|  |  |  |         andi.l #65535,d0
    2c46:	|  |  |  |         move.l d1,d2
    2c48:	|  |  |  |         add.l d0,d2
    2c4a:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c4e:	|  |  |  |         clr.l 20(sp)
    2c52:	|  |  |  |     /-- bra.w 2cda <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2c56:	|  |  |  |  /--|-> move.l 28(sp),d0
    2c5a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c5e:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2c62:	|  |  |  |  |  |   move.l 24(sp),d0
    2c66:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c6a:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2c6e:	|  |  |  |  |  |   movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2c74:	|  |  |  |  |  |   move.w 10(a0),d0
    2c78:	|  |  |  |  |  |   lsl.w #6,d0
    2c7a:	|  |  |  |  |  |   movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2c80:	|  |  |  |  |  |   move.w 8(a0),d1
    2c84:	|  |  |  |  |  |   add.w d1,d0
    2c86:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c8a:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2c8e:	|  |  |  |  |  |   move.l 1c912 <winWidth>,d0
    2c94:	|  |  |  |  |  |   lsr.l #3,d0
    2c96:	|  |  |  |  |  |   move.l 1c916 <winHeight>,d1
    2c9c:	|  |  |  |  |  |   move.l d1,-(sp)
    2c9e:	|  |  |  |  |  |   move.l d0,-(sp)
    2ca0:	|  |  |  |  |  |   jsr 17bfc <__mulsi3>
    2ca6:	|  |  |  |  |  |   addq.l #8,sp
    2ca8:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2cac:	|  |  |  |  |  |   move.l 1c912 <winWidth>,d0
    2cb2:	|  |  |  |  |  |   lsr.l #3,d0
    2cb4:	|  |  |  |  |  |   move.l 1c916 <winHeight>,d1
    2cba:	|  |  |  |  |  |   move.l d1,-(sp)
    2cbc:	|  |  |  |  |  |   move.l d0,-(sp)
    2cbe:	|  |  |  |  |  |   jsr 17bfc <__mulsi3>
    2cc4:	|  |  |  |  |  |   addq.l #8,sp
    2cc6:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2cca:	|  |  |  |  |  |   move.l 1c9ca <GfxBase>,d0
    2cd0:	|  |  |  |  |  |   movea.l d0,a6
    2cd2:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cd6:	|  |  |  |  |  |   addq.l #1,20(sp)
    2cda:	|  |  |  |  |  \-> moveq #4,d0
    2cdc:	|  |  |  |  |      cmp.l 20(sp),d0
    2ce0:	|  |  |  |  \----- bge.w 2c56 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2ce4:	|  |  |  \-------> move.l 1c8fa <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2cec:	|  |  |            movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2cf2:	|  |  |            move.l 16(a0),d0
    2cf6:	|  |  |            move.l d0,1c8fa <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2cfc:	|  |  |            move.l 12(sp),8(sp)
    2d02:	|  |  |            move.l 1c9be <SysBase>,d0
    2d08:	|  |  |            movea.l d0,a6
    2d0a:	|  |  |            movea.l 8(sp),a1
    2d0e:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d12:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d16:	|  |  \----------> move.l 1c8fa <CstCleanupQueueDrawBuffer>,d0
    2d1c:	|  \-------------- bne.w 2b56 <CstRestoreScreen+0x52>
    2d20:	|              /-- bra.s 2d24 <CstRestoreScreen+0x220>
    return;
    2d22:	\--------------|-> nop
  }
  
}
    2d24:	               \-> move.l (sp)+,d2
    2d26:	                   movea.l (sp)+,a6
    2d28:	                   lea 24(sp),sp
    2d2c:	                   rts

00002d2e <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d2e:	                lea -132(sp),sp
    2d32:	                move.l a6,-(sp)
    2d34:	                move.l d2,-(sp)
    2d36:	                movea.l 152(sp),a0
    2d3a:	                move.l 156(sp),d1
    2d3e:	                move.l 160(sp),d0
    2d42:	                movea.w a0,a0
    2d44:	                move.w a0,12(sp)
    2d48:	                move.w d1,d1
    2d4a:	                move.w d1,10(sp)
    2d4e:	                move.w d0,d0
    2d50:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2d54:	                move.w 10(sp),d0
    2d58:	                moveq #0,d1
    2d5a:	                move.w d0,d1
    2d5c:	                move.w 12(sp),d0
    2d60:	                move.w d0,d0
    2d62:	                andi.l #65535,d0
    2d68:	                movea.l 1ca1e <zBuffer>,a0
    2d6e:	                move.l d1,-(sp)
    2d70:	                move.l d0,-(sp)
    2d72:	                move.l a0,-(sp)
    2d74:	                move.l 156(sp),-(sp)
    2d78:	                jsr 14e8 <CstDrawZBuffer>
    2d7e:	                lea 16(sp),sp
    2d82:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2d86:	                clr.l 136(sp)
  switch(destinationtype)
    2d8a:	                moveq #0,d0
    2d8c:	                move.w 8(sp),d0
    2d90:	                moveq #1,d1
    2d92:	                cmp.l d0,d1
    2d94:	            /-- beq.s 2d9e <CstScaleSprite+0x70>
    2d96:	            |   moveq #2,d2
    2d98:	            |   cmp.l d0,d2
    2d9a:	         /--|-- beq.s 2da8 <CstScaleSprite+0x7a>
    2d9c:	      /--|--|-- bra.s 2dba <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2d9e:	      |  |  \-> move.l 1c8f2 <CstDrawBuffer>,136(sp)
      break;
    2da6:	      +--|----- bra.s 2dba <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2da8:	      |  \----> move.w #2,1c8ec <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2db0:	      |         move.l 1c8e0 <CstBackDrop>,136(sp)
      break;
    2db8:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2dba:	      \-------> tst.w 10(sp)
    2dbe:	         /----- bge.s 2e06 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2dc0:	         |      movea.w 10(sp),a1
    2dc4:	         |      movea.l 144(sp),a0
    2dc8:	         |      move.l 4(a0),d0
    2dcc:	         |      add.l a1,d0
    2dce:	         |  /-- bpl.s 2de2 <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2dd0:	         |  |   pea 18084 <PutChar+0x372>
    2dd6:	         |  |   jsr 17248 <KPrintF>
    2ddc:	         |  |   addq.l #4,sp
      return;
    2dde:	/--------|--|-- bra.w 382e <CstScaleSprite+0xb00>
    }
    ystartdst = 0;
    2de2:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2de6:	|        |      move.w 10(sp),d0
    2dea:	|        |      ext.l d0
    2dec:	|        |      neg.l d0
    2dee:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2df2:	|        |      movea.l 144(sp),a0
    2df6:	|        |      move.l 4(a0),d0
    2dfa:	|        |      movea.w 10(sp),a0
    2dfe:	|        |      add.l a0,d0
    2e00:	|        |      move.l d0,92(sp)
    2e04:	|     /--|----- bra.s 2e78 <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2e06:	|     |  \----> movea.w 10(sp),a1
    2e0a:	|     |         movea.l 144(sp),a0
    2e0e:	|     |         move.l 4(a0),d0
    2e12:	|     |         move.l a1,d1
    2e14:	|     |         add.l d0,d1
    2e16:	|     |         move.l 1c916 <winHeight>,d0
    2e1c:	|     |         cmp.l d1,d0
    2e1e:	|     |  /----- bge.s 2e60 <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2e20:	|     |  |      movea.w 10(sp),a0
    2e24:	|     |  |      move.l 1c916 <winHeight>,d0
    2e2a:	|     |  |      cmp.l a0,d0
    2e2c:	|     |  |  /-- bge.s 2e40 <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e2e:	|     |  |  |   pea 18084 <PutChar+0x372>
    2e34:	|     |  |  |   jsr 17248 <KPrintF>
    2e3a:	|     |  |  |   addq.l #4,sp
      return;
    2e3c:	+-----|--|--|-- bra.w 382e <CstScaleSprite+0xb00>
    }
    ystartdst = y;
    2e40:	|     |  |  \-> movea.w 10(sp),a0
    2e44:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2e48:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2e4c:	|     |  |      move.l 1c916 <winHeight>,d0
    2e52:	|     |  |      movea.w 10(sp),a0
    2e56:	|     |  |      move.l d0,d1
    2e58:	|     |  |      sub.l a0,d1
    2e5a:	|     |  |      move.l d1,92(sp)
    2e5e:	|     +--|----- bra.s 2e78 <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2e60:	|     |  \----> movea.w 10(sp),a0
    2e64:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2e68:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2e6c:	|     |         movea.l 144(sp),a0
    2e70:	|     |         move.l 4(a0),d0
    2e74:	|     |         move.l d0,92(sp)
  }


  if( x < 0) 
    2e78:	|     \-------> tst.w 12(sp)
    2e7c:	|     /-------- bge.w 30fc <CstScaleSprite+0x3ce>
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2e80:	|     |         movea.w 12(sp),a1
    2e84:	|     |         movea.l 144(sp),a0
    2e88:	|     |         move.l (a0),d0
    2e8a:	|     |         add.l a1,d0
    2e8c:	|     |     /-- bpl.s 2ea0 <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e8e:	|     |     |   pea 18084 <PutChar+0x372>
    2e94:	|     |     |   jsr 17248 <KPrintF>
    2e9a:	|     |     |   addq.l #4,sp
      return;
    2e9c:	+-----|-----|-- bra.w 382e <CstScaleSprite+0xb00>
    }
    
    extrawords = 1;
    2ea0:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2ea6:	|     |         move.w 12(sp),d0
    2eaa:	|     |     /-- bpl.s 2eb0 <CstScaleSprite+0x182>
    2eac:	|     |     |   addi.w #15,d0
    2eb0:	|     |     \-> asr.w #4,d0
    2eb2:	|     |         neg.w d0
    2eb4:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2eb8:	|     |         move.w 12(sp),d0
    2ebc:	|     |         ext.l d0
    2ebe:	|     |         neg.l d0
    2ec0:	|     |         andi.l #-2147483633,d0
    2ec6:	|     |     /-- bpl.s 2ed0 <CstScaleSprite+0x1a2>
    2ec8:	|     |     |   subq.l #1,d0
    2eca:	|     |     |   moveq #-16,d1
    2ecc:	|     |     |   or.l d1,d0
    2ece:	|     |     |   addq.l #1,d0
    2ed0:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2ed4:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2ed8:	|     |         moveq #0,d0
    2eda:	|     |         move.w 132(sp),d0
    2ede:	|     |         add.l d0,d0
    2ee0:	|     |         move.l d0,d1
    2ee2:	|     |         move.l 84(sp),d0
    2ee6:	|     |         move.l d1,d2
    2ee8:	|     |         add.l d0,d2
    2eea:	|     |         movea.l 144(sp),a0
    2eee:	|     |         move.l (a0),d0
    2ef0:	|     |         move.l 96(sp),-(sp)
    2ef4:	|     |         move.l d0,-(sp)
    2ef6:	|     |         jsr 17bfc <__mulsi3>
    2efc:	|     |         addq.l #8,sp
    2efe:	|     |         lsr.l #3,d0
    2f00:	|     |         move.l d2,d1
    2f02:	|     |         add.l d0,d1
    2f04:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f08:	|     |         movea.l 144(sp),a0
    2f0c:	|     |         move.l 24(a0),d0
    2f10:	|     |         move.l d0,d1
    2f12:	|     |         moveq #0,d0
    2f14:	|     |         move.w 132(sp),d0
    2f18:	|     |         add.l d0,d0
    2f1a:	|     |         move.l d1,d2
    2f1c:	|     |         add.l d0,d2
    2f1e:	|     |         movea.l 144(sp),a0
    2f22:	|     |         move.l (a0),d0
    2f24:	|     |         move.l 96(sp),-(sp)
    2f28:	|     |         move.l d0,-(sp)
    2f2a:	|     |         jsr 17bfc <__mulsi3>
    2f30:	|     |         addq.l #8,sp
    2f32:	|     |         lsr.l #3,d0
    2f34:	|     |         move.l d2,d1
    2f36:	|     |         add.l d0,d1
    2f38:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f3c:	|     |         move.l 1c912 <winWidth>,d0
    2f42:	|     |         move.l 100(sp),-(sp)
    2f46:	|     |         move.l d0,-(sp)
    2f48:	|     |         jsr 17bfc <__mulsi3>
    2f4e:	|     |         addq.l #8,sp
    2f50:	|     |         lsr.l #3,d0
    2f52:	|     |         move.l 136(sp),d1
    2f56:	|     |         add.l d1,d0
    2f58:	|     |         move.l d0,d2
    2f5a:	|     |         subq.l #2,d2
    2f5c:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f60:	|     |         move.l 1c912 <winWidth>,d0
    2f66:	|     |         move.l 100(sp),-(sp)
    2f6a:	|     |         move.l d0,-(sp)
    2f6c:	|     |         jsr 17bfc <__mulsi3>
    2f72:	|     |         addq.l #8,sp
    2f74:	|     |         lsr.l #3,d0
    2f76:	|     |         move.l 136(sp),d1
    2f7a:	|     |         add.l d1,d0
    2f7c:	|     |         move.l d0,d1
    2f7e:	|     |         subq.l #2,d1
    2f80:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f84:	|     |         moveq #0,d0
    2f86:	|     |         move.w 130(sp),d0
    2f8a:	|     |         moveq #16,d1
    2f8c:	|     |         sub.l d0,d1
    2f8e:	|     |         move.l d1,d0
    2f90:	|     |         moveq #12,d2
    2f92:	|     |         lsl.l d2,d0
    2f94:	|     |         addi.l #4042,d0
    2f9a:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2f9e:	|     |         moveq #0,d0
    2fa0:	|     |         move.w 130(sp),d0
    2fa4:	|     |         moveq #16,d1
    2fa6:	|     |         sub.l d0,d1
    2fa8:	|     |         move.l d1,d0
    2faa:	|     |         moveq #12,d1
    2fac:	|     |         lsl.l d1,d0
    2fae:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    2fb2:	|     |         cmpi.w #1,8(sp)
    2fb8:	|     |  /----- bne.w 3076 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2fbc:	|     |  |      move.l 1c8fa <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2fc4:	|     |  |      moveq #20,d2
    2fc6:	|     |  |      move.l d2,44(sp)
    2fca:	|     |  |      clr.l 40(sp)
    2fce:	|     |  |      move.l 1c9be <SysBase>,d0
    2fd4:	|     |  |      movea.l d0,a6
    2fd6:	|     |  |      move.l 44(sp),d0
    2fda:	|     |  |      move.l 40(sp),d1
    2fde:	|     |  |      jsr -684(a6)
    2fe2:	|     |  |      move.l d0,36(sp)
    2fe6:	|     |  |      move.l 36(sp),d0
    2fea:	|     |  |      move.l d0,1c8fa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2ff0:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    2ff6:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2ffc:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3002:	|     |  |      move.w 12(sp),d0
    3006:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3008:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    300e:	|     |  |      move.w 10(sp),d0
    3012:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3016:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    301c:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3022:	|     |  |      movea.l 144(sp),a0
    3026:	|     |  |      move.l (a0),d0
    3028:	|     |  |      movea.l d0,a0
    302a:	|     |  |      cmpa.w #0,a0
    302e:	|     |  |  /-- bge.s 3034 <CstScaleSprite+0x306>
    3030:	|     |  |  |   lea 15(a0),a0
    3034:	|     |  |  \-> move.l a0,d0
    3036:	|     |  |      asr.l #4,d0
    3038:	|     |  |      move.l d0,d0
    303a:	|     |  |      add.w 132(sp),d0
    303e:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3044:	|     |  |      add.w 134(sp),d0
    3048:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    304c:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3052:	|     |  |      move.l 92(sp),d0
    3056:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    305a:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3060:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3064:	|     |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    306a:	|     |  |      move.l 100(sp),d0
    306e:	|     |  |      move.w d0,14(a0)
    3072:	|  /--|--|----- bra.w 3640 <CstScaleSprite+0x912>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3076:	|  |  |  \----> movea.l 144(sp),a0
    307a:	|  |  |         move.l (a0),d0
    307c:	|  |  |         movea.l d0,a0
    307e:	|  |  |         cmpa.w #0,a0
    3082:	|  |  |     /-- bge.s 3088 <CstScaleSprite+0x35a>
    3084:	|  |  |     |   lea 15(a0),a0
    3088:	|  |  |     \-> move.l a0,d0
    308a:	|  |  |         asr.l #4,d0
    308c:	|  |  |         move.l d0,d0
    308e:	|  |  |         add.w 132(sp),d0
    3092:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3098:	|  |  |         move.l a0,d1
    309a:	|  |  |         addq.l #2,d1
    309c:	|  |  |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    30a2:	|  |  |         add.w 134(sp),d0
    30a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30a8:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    30ae:	|  |  |         move.l a0,d0
    30b0:	|  |  |         addq.l #2,d0
    30b2:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    30b8:	|  |  |         move.l 92(sp),d0
    30bc:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30be:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    30c4:	|  |  |         move.l a0,d0
    30c6:	|  |  |         addq.l #2,d0
    30c8:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    30ce:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30d0:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    30d6:	|  |  |         move.l a0,d0
    30d8:	|  |  |         addq.l #2,d0
    30da:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    30e0:	|  |  |         move.l 100(sp),d0
    30e4:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30e6:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    30ec:	|  |  |         move.l a0,d0
    30ee:	|  |  |         addq.l #2,d0
    30f0:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    30f6:	|  |  |         clr.w (a0)
    30f8:	|  +--|-------- bra.w 3640 <CstScaleSprite+0x912>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    30fc:	|  |  \-------> movea.w 12(sp),a1
    3100:	|  |            movea.l 144(sp),a0
    3104:	|  |            move.l (a0),d0
    3106:	|  |            move.l a1,d1
    3108:	|  |            add.l d0,d1
    310a:	|  |            move.l 1c912 <winWidth>,d0
    3110:	|  |            cmp.l d1,d0
    3112:	|  |  /-------- bge.w 33d8 <CstScaleSprite+0x6aa>

    if(x - single->width > (int) winWidth)
    3116:	|  |  |         movea.w 12(sp),a1
    311a:	|  |  |         movea.l 144(sp),a0
    311e:	|  |  |         move.l (a0),d0
    3120:	|  |  |         move.l a1,d1
    3122:	|  |  |         sub.l d0,d1
    3124:	|  |  |         move.l 1c912 <winWidth>,d0
    312a:	|  |  |         cmp.l d1,d0
    312c:	|  |  |     /-- bge.s 3140 <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    312e:	|  |  |     |   pea 18084 <PutChar+0x372>
    3134:	|  |  |     |   jsr 17248 <KPrintF>
    313a:	|  |  |     |   addq.l #4,sp
      return;
    313c:	+--|--|-----|-- bra.w 382e <CstScaleSprite+0xb00>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3140:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    3144:	|  |  |         movea.w 12(sp),a1
    3148:	|  |  |         movea.l 144(sp),a0
    314c:	|  |  |         move.l (a0),d0
    314e:	|  |  |         add.l a1,d0
    3150:	|  |  |         move.l d0,d1
    3152:	|  |  |         move.l 1c912 <winWidth>,d0
    3158:	|  |  |         sub.l d0,d1
    315a:	|  |  |         move.l d1,d0
    315c:	|  |  |         lsr.l #4,d0
    315e:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;    
    3162:	|  |  |         clr.w 130(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    3166:	|  |  |         movea.l 144(sp),a0
    316a:	|  |  |         move.l (a0),d0
    316c:	|  |  |         move.l 96(sp),-(sp)
    3170:	|  |  |         move.l d0,-(sp)
    3172:	|  |  |         jsr 17bfc <__mulsi3>
    3178:	|  |  |         addq.l #8,sp
    317a:	|  |  |         lsr.l #3,d0
    317c:	|  |  |         move.l 84(sp),d1
    3180:	|  |  |         move.l d0,d2
    3182:	|  |  |         add.l d1,d2
    3184:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3188:	|  |  |         movea.l 144(sp),a0
    318c:	|  |  |         move.l 24(a0),d0
    3190:	|  |  |         move.l d0,d2
    3192:	|  |  |         movea.l 144(sp),a0
    3196:	|  |  |         move.l (a0),d0
    3198:	|  |  |         move.l 96(sp),-(sp)
    319c:	|  |  |         move.l d0,-(sp)
    319e:	|  |  |         jsr 17bfc <__mulsi3>
    31a4:	|  |  |         addq.l #8,sp
    31a6:	|  |  |         lsr.l #3,d0
    31a8:	|  |  |         move.l d2,d1
    31aa:	|  |  |         add.l d0,d1
    31ac:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31b0:	|  |  |         move.l 1c912 <winWidth>,d0
    31b6:	|  |  |         move.l 100(sp),-(sp)
    31ba:	|  |  |         move.l d0,-(sp)
    31bc:	|  |  |         jsr 17bfc <__mulsi3>
    31c2:	|  |  |         addq.l #8,sp
    31c4:	|  |  |         lsr.l #3,d0
    31c6:	|  |  |         move.l 136(sp),d1
    31ca:	|  |  |         add.l d0,d1
    31cc:	|  |  |         move.w 12(sp),d0
    31d0:	|  |  |     /-- bpl.s 31d6 <CstScaleSprite+0x4a8>
    31d2:	|  |  |     |   addi.w #15,d0
    31d6:	|  |  |     \-> asr.w #4,d0
    31d8:	|  |  |         movea.w d0,a0
    31da:	|  |  |         move.l a0,d0
    31dc:	|  |  |         add.l a0,d0
    31de:	|  |  |         move.l d1,d2
    31e0:	|  |  |         add.l d0,d2
    31e2:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31e6:	|  |  |         move.l 1c912 <winWidth>,d0
    31ec:	|  |  |         move.l 100(sp),-(sp)
    31f0:	|  |  |         move.l d0,-(sp)
    31f2:	|  |  |         jsr 17bfc <__mulsi3>
    31f8:	|  |  |         addq.l #8,sp
    31fa:	|  |  |         lsr.l #3,d0
    31fc:	|  |  |         move.l 136(sp),d1
    3200:	|  |  |         add.l d0,d1
    3202:	|  |  |         move.w 12(sp),d0
    3206:	|  |  |     /-- bpl.s 320c <CstScaleSprite+0x4de>
    3208:	|  |  |     |   addi.w #15,d0
    320c:	|  |  |     \-> asr.w #4,d0
    320e:	|  |  |         movea.w d0,a0
    3210:	|  |  |         move.l a0,d0
    3212:	|  |  |         add.l a0,d0
    3214:	|  |  |         move.l d1,d2
    3216:	|  |  |         add.l d0,d2
    3218:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    321c:	|  |  |         move.w 12(sp),d0
    3220:	|  |  |         andi.w #-32753,d0
    3224:	|  |  |     /-- bpl.s 322e <CstScaleSprite+0x500>
    3226:	|  |  |     |   subq.w #1,d0
    3228:	|  |  |     |   ori.w #-16,d0
    322c:	|  |  |     |   addq.w #1,d0
    322e:	|  |  |     \-> ext.l d0
    3230:	|  |  |         moveq #12,d1
    3232:	|  |  |         lsl.l d1,d0
    3234:	|  |  |         addi.l #4042,d0
    323a:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    323e:	|  |  |         move.w 12(sp),d0
    3242:	|  |  |         andi.w #-32753,d0
    3246:	|  |  |     /-- bpl.s 3250 <CstScaleSprite+0x522>
    3248:	|  |  |     |   subq.w #1,d0
    324a:	|  |  |     |   ori.w #-16,d0
    324e:	|  |  |     |   addq.w #1,d0
    3250:	|  |  |     \-> ext.l d0
    3252:	|  |  |         moveq #12,d2
    3254:	|  |  |         lsl.l d2,d0
    3256:	|  |  |         move.l d0,104(sp)
    bltalwm = 0xffff << (x%16); 
    325a:	|  |  |         move.w 12(sp),d0
    325e:	|  |  |         andi.w #-32753,d0
    3262:	|  |  |     /-- bpl.s 326c <CstScaleSprite+0x53e>
    3264:	|  |  |     |   subq.w #1,d0
    3266:	|  |  |     |   ori.w #-16,d0
    326a:	|  |  |     |   addq.w #1,d0
    326c:	|  |  |     \-> move.w d0,d1
    326e:	|  |  |         ext.l d1
    3270:	|  |  |         moveq #0,d0
    3272:	|  |  |         not.w d0
    3274:	|  |  |         lsl.l d1,d0
    3276:	|  |  |         move.w d0,128(sp)
    if( destinationtype == SCREEN)
    327a:	|  |  |         cmpi.w #1,8(sp)
    3280:	|  |  |  /----- bne.w 3348 <CstScaleSprite+0x61a>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3284:	|  |  |  |      move.l 1c8fa <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    328c:	|  |  |  |      moveq #20,d0
    328e:	|  |  |  |      move.l d0,60(sp)
    3292:	|  |  |  |      clr.l 56(sp)
    3296:	|  |  |  |      move.l 1c9be <SysBase>,d0
    329c:	|  |  |  |      movea.l d0,a6
    329e:	|  |  |  |      move.l 60(sp),d0
    32a2:	|  |  |  |      move.l 56(sp),d1
    32a6:	|  |  |  |      jsr -684(a6)
    32aa:	|  |  |  |      move.l d0,52(sp)
    32ae:	|  |  |  |      move.l 52(sp),d0
    32b2:	|  |  |  |      move.l d0,1c8fa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    32b8:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    32be:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    32c4:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    32ca:	|  |  |  |      move.w 12(sp),d0
    32ce:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    32d0:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    32d6:	|  |  |  |      move.w 10(sp),d0
    32da:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    32de:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    32e4:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    32ea:	|  |  |  |      movea.l 144(sp),a0
    32ee:	|  |  |  |      move.l (a0),d0
    32f0:	|  |  |  |      movea.l d0,a0
    32f2:	|  |  |  |      cmpa.w #0,a0
    32f6:	|  |  |  |  /-- bge.s 32fc <CstScaleSprite+0x5ce>
    32f8:	|  |  |  |  |   lea 15(a0),a0
    32fc:	|  |  |  |  \-> move.l a0,d0
    32fe:	|  |  |  |      asr.l #4,d0
    3300:	|  |  |  |      move.l d0,d0
    3302:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3308:	|  |  |  |      add.w 132(sp),d0
    330c:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3310:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3316:	|  |  |  |      move.l 92(sp),d0
    331a:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    331e:	|  |  |  |      move.w 12(sp),d0
    3322:	|  |  |  |  /-- bpl.s 3328 <CstScaleSprite+0x5fa>
    3324:	|  |  |  |  |   addi.w #15,d0
    3328:	|  |  |  |  \-> asr.w #4,d0
    332a:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3330:	|  |  |  |      add.w d0,d0
    3332:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3336:	|  |  |  |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    333c:	|  |  |  |      move.l 100(sp),d0
    3340:	|  |  |  |      move.w d0,14(a0)
    3344:	|  +--|--|----- bra.w 3640 <CstScaleSprite+0x912>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3348:	|  |  |  \----> movea.l 144(sp),a0
    334c:	|  |  |         move.l (a0),d0
    334e:	|  |  |         movea.l d0,a0
    3350:	|  |  |         cmpa.w #0,a0
    3354:	|  |  |     /-- bge.s 335a <CstScaleSprite+0x62c>
    3356:	|  |  |     |   lea 15(a0),a0
    335a:	|  |  |     \-> move.l a0,d0
    335c:	|  |  |         asr.l #4,d0
    335e:	|  |  |         move.l d0,d0
    3360:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3366:	|  |  |         move.l a0,d1
    3368:	|  |  |         addq.l #2,d1
    336a:	|  |  |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    3370:	|  |  |         add.w 132(sp),d0
    3374:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3376:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    337c:	|  |  |         move.l a0,d0
    337e:	|  |  |         addq.l #2,d0
    3380:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    3386:	|  |  |         move.l 92(sp),d0
    338a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    338c:	|  |  |         move.w 12(sp),d0
    3390:	|  |  |     /-- bpl.s 3396 <CstScaleSprite+0x668>
    3392:	|  |  |     |   addi.w #15,d0
    3396:	|  |  |     \-> asr.w #4,d0
    3398:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    339e:	|  |  |         move.l a0,d1
    33a0:	|  |  |         addq.l #2,d1
    33a2:	|  |  |         move.l d1,1c902 <CstBackDropBufferApplyCursor>
    33a8:	|  |  |         add.w d0,d0
    33aa:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    33ac:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    33b2:	|  |  |         move.l a0,d0
    33b4:	|  |  |         addq.l #2,d0
    33b6:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    33bc:	|  |  |         move.l 100(sp),d0
    33c0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    33c2:	|  |  |         movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    33c8:	|  |  |         move.l a0,d0
    33ca:	|  |  |         addq.l #2,d0
    33cc:	|  |  |         move.l d0,1c902 <CstBackDropBufferApplyCursor>
    33d2:	|  |  |         clr.w (a0)
    33d4:	|  +--|-------- bra.w 3640 <CstScaleSprite+0x912>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    33d8:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    33de:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    33e2:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    33e6:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    33ea:	|  |            movea.l 144(sp),a0
    33ee:	|  |            move.l (a0),d0
    33f0:	|  |            move.l 96(sp),-(sp)
    33f4:	|  |            move.l d0,-(sp)
    33f6:	|  |            jsr 17bfc <__mulsi3>
    33fc:	|  |            addq.l #8,sp
    33fe:	|  |            lsr.l #3,d0
    3400:	|  |            move.l 84(sp),d1
    3404:	|  |            move.l d0,d2
    3406:	|  |            add.l d1,d2
    3408:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    340c:	|  |            movea.l 144(sp),a0
    3410:	|  |            move.l 24(a0),d0
    3414:	|  |            move.l d0,d2
    3416:	|  |            movea.l 144(sp),a0
    341a:	|  |            move.l (a0),d0
    341c:	|  |            move.l 96(sp),-(sp)
    3420:	|  |            move.l d0,-(sp)
    3422:	|  |            jsr 17bfc <__mulsi3>
    3428:	|  |            addq.l #8,sp
    342a:	|  |            lsr.l #3,d0
    342c:	|  |            move.l d2,d1
    342e:	|  |            add.l d0,d1
    3430:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3434:	|  |            move.l 1c912 <winWidth>,d0
    343a:	|  |            move.l 100(sp),-(sp)
    343e:	|  |            move.l d0,-(sp)
    3440:	|  |            jsr 17bfc <__mulsi3>
    3446:	|  |            addq.l #8,sp
    3448:	|  |            lsr.l #3,d0
    344a:	|  |            move.l 136(sp),d1
    344e:	|  |            add.l d0,d1
    3450:	|  |            move.w 12(sp),d0
    3454:	|  |        /-- bpl.s 345a <CstScaleSprite+0x72c>
    3456:	|  |        |   addi.w #15,d0
    345a:	|  |        \-> asr.w #4,d0
    345c:	|  |            movea.w d0,a0
    345e:	|  |            move.l a0,d0
    3460:	|  |            add.l a0,d0
    3462:	|  |            move.l d1,d2
    3464:	|  |            add.l d0,d2
    3466:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    346a:	|  |            move.l 1c912 <winWidth>,d0
    3470:	|  |            move.l 100(sp),-(sp)
    3474:	|  |            move.l d0,-(sp)
    3476:	|  |            jsr 17bfc <__mulsi3>
    347c:	|  |            addq.l #8,sp
    347e:	|  |            lsr.l #3,d0
    3480:	|  |            move.l 136(sp),d1
    3484:	|  |            add.l d0,d1
    3486:	|  |            move.w 12(sp),d0
    348a:	|  |        /-- bpl.s 3490 <CstScaleSprite+0x762>
    348c:	|  |        |   addi.w #15,d0
    3490:	|  |        \-> asr.w #4,d0
    3492:	|  |            movea.w d0,a0
    3494:	|  |            move.l a0,d0
    3496:	|  |            add.l a0,d0
    3498:	|  |            move.l d1,d2
    349a:	|  |            add.l d0,d2
    349c:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    34a0:	|  |            move.w 12(sp),d0
    34a4:	|  |            andi.w #-32753,d0
    34a8:	|  |        /-- bpl.s 34b2 <CstScaleSprite+0x784>
    34aa:	|  |        |   subq.w #1,d0
    34ac:	|  |        |   ori.w #-16,d0
    34b0:	|  |        |   addq.w #1,d0
    34b2:	|  |        \-> ext.l d0
    34b4:	|  |            moveq #12,d1
    34b6:	|  |            lsl.l d1,d0
    34b8:	|  |            addi.l #4042,d0
    34be:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    34c2:	|  |            move.w 12(sp),d0
    34c6:	|  |            andi.w #-32753,d0
    34ca:	|  |        /-- bpl.s 34d4 <CstScaleSprite+0x7a6>
    34cc:	|  |        |   subq.w #1,d0
    34ce:	|  |        |   ori.w #-16,d0
    34d2:	|  |        |   addq.w #1,d0
    34d4:	|  |        \-> ext.l d0
    34d6:	|  |            moveq #12,d2
    34d8:	|  |            lsl.l d2,d0
    34da:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    34de:	|  |            cmpi.w #1,8(sp)
    34e4:	|  |     /----- bne.w 35b0 <CstScaleSprite+0x882>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    34e8:	|  |     |      move.l 1c8fa <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    34f0:	|  |     |      moveq #20,d0
    34f2:	|  |     |      move.l d0,76(sp)
    34f6:	|  |     |      clr.l 72(sp)
    34fa:	|  |     |      move.l 1c9be <SysBase>,d0
    3500:	|  |     |      movea.l d0,a6
    3502:	|  |     |      move.l 76(sp),d0
    3506:	|  |     |      move.l 72(sp),d1
    350a:	|  |     |      jsr -684(a6)
    350e:	|  |     |      move.l d0,68(sp)
    3512:	|  |     |      move.l 68(sp),d0
    3516:	|  |     |      move.l d0,1c8fa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    351c:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3522:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3528:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    352e:	|  |     |      move.w 12(sp),d0
    3532:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3534:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    353a:	|  |     |      move.w 10(sp),d0
    353e:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3542:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3548:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    354e:	|  |     |      movea.l 144(sp),a0
    3552:	|  |     |      move.l (a0),d0
    3554:	|  |     |      movea.l d0,a0
    3556:	|  |     |      cmpa.w #0,a0
    355a:	|  |     |  /-- bge.s 3560 <CstScaleSprite+0x832>
    355c:	|  |     |  |   lea 15(a0),a0
    3560:	|  |     |  \-> move.l a0,d0
    3562:	|  |     |      asr.l #4,d0
    3564:	|  |     |      move.l d0,d0
    3566:	|  |     |      add.w 132(sp),d0
    356a:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3570:	|  |     |      add.w 134(sp),d0
    3574:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3578:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    357e:	|  |     |      move.l 92(sp),d0
    3582:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3586:	|  |     |      move.w 12(sp),d0
    358a:	|  |     |  /-- bpl.s 3590 <CstScaleSprite+0x862>
    358c:	|  |     |  |   addi.w #15,d0
    3590:	|  |     |  \-> asr.w #4,d0
    3592:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    3598:	|  |     |      add.w d0,d0
    359a:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    359e:	|  |     |      movea.l 1c8fa <CstCleanupQueueDrawBuffer>,a0
    35a4:	|  |     |      move.l 100(sp),d0
    35a8:	|  |     |      move.w d0,14(a0)
    35ac:	|  +-----|----- bra.w 3640 <CstScaleSprite+0x912>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    35b0:	|  |     \----> movea.l 144(sp),a0
    35b4:	|  |            move.l (a0),d0
    35b6:	|  |            movea.l d0,a0
    35b8:	|  |            cmpa.w #0,a0
    35bc:	|  |        /-- bge.s 35c2 <CstScaleSprite+0x894>
    35be:	|  |        |   lea 15(a0),a0
    35c2:	|  |        \-> move.l a0,d0
    35c4:	|  |            asr.l #4,d0
    35c6:	|  |            move.l d0,d0
    35c8:	|  |            add.w 132(sp),d0
    35cc:	|  |            movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    35d2:	|  |            move.l a0,d1
    35d4:	|  |            addq.l #2,d1
    35d6:	|  |            move.l d1,1c902 <CstBackDropBufferApplyCursor>
    35dc:	|  |            add.w 134(sp),d0
    35e0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    35e2:	|  |            movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    35e8:	|  |            move.l a0,d0
    35ea:	|  |            addq.l #2,d0
    35ec:	|  |            move.l d0,1c902 <CstBackDropBufferApplyCursor>
    35f2:	|  |            move.l 92(sp),d0
    35f6:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    35f8:	|  |            move.w 12(sp),d0
    35fc:	|  |        /-- bpl.s 3602 <CstScaleSprite+0x8d4>
    35fe:	|  |        |   addi.w #15,d0
    3602:	|  |        \-> asr.w #4,d0
    3604:	|  |            movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    360a:	|  |            move.l a0,d1
    360c:	|  |            addq.l #2,d1
    360e:	|  |            move.l d1,1c902 <CstBackDropBufferApplyCursor>
    3614:	|  |            add.w d0,d0
    3616:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3618:	|  |            movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    361e:	|  |            move.l a0,d0
    3620:	|  |            addq.l #2,d0
    3622:	|  |            move.l d0,1c902 <CstBackDropBufferApplyCursor>
    3628:	|  |            move.l 100(sp),d0
    362c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    362e:	|  |            movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3634:	|  |            move.l a0,d0
    3636:	|  |            addq.l #2,d0
    3638:	|  |            move.l d0,1c902 <CstBackDropBufferApplyCursor>
    363e:	|  |            clr.w (a0)
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3640:	|  \----------> moveq #0,d0
    3642:	|               move.w 130(sp),d0
    3646:	|               moveq #0,d1
    3648:	|               not.w d1
    364a:	|               asr.l d0,d1
    364c:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3650:	|               moveq #0,d1
    3652:	|               move.w 132(sp),d1
    3656:	|               moveq #0,d0
    3658:	|               move.w 134(sp),d0
    365c:	|               sub.l d0,d1
    365e:	|               move.l d1,d0
    3660:	|               add.w d0,d0
    3662:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    3666:	|               moveq #0,d1
    3668:	|               move.w 132(sp),d1
    366c:	|               moveq #0,d0
    366e:	|               move.w 134(sp),d0
    3672:	|               sub.l d0,d1
    3674:	|               move.l d1,d0
    3676:	|               add.w d0,d0
    3678:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    367c:	|               move.l 1c912 <winWidth>,d0
    3682:	|               lsr.l #3,d0
    3684:	|               move.l d0,d1
    3686:	|               movea.l 144(sp),a0
    368a:	|               move.l (a0),d0
    368c:	|           /-- bpl.s 3690 <CstScaleSprite+0x962>
    368e:	|           |   addq.l #7,d0
    3690:	|           \-> asr.l #3,d0
    3692:	|               move.l d0,d0
    3694:	|               sub.w d0,d1
    3696:	|               move.w 132(sp),d0
    369a:	|               sub.w 134(sp),d0
    369e:	|               add.w d0,d0
    36a0:	|               add.w d1,d0
    36a2:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36a6:	|               move.l 1c912 <winWidth>,d0
    36ac:	|               lsr.l #3,d0
    36ae:	|               move.l d0,d1
    36b0:	|               movea.l 144(sp),a0
    36b4:	|               move.l (a0),d0
    36b6:	|           /-- bpl.s 36ba <CstScaleSprite+0x98c>
    36b8:	|           |   addq.l #7,d0
    36ba:	|           \-> asr.l #3,d0
    36bc:	|               move.l d0,d0
    36be:	|               sub.w d0,d1
    36c0:	|               move.w 132(sp),d0
    36c4:	|               sub.w 134(sp),d0
    36c8:	|               add.w d0,d0
    36ca:	|               add.w d1,d0
    36cc:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    36d0:	|               move.l #14675968,22(sp)
  WaitBlit();
    36d8:	|               move.l 1c9ca <GfxBase>,d0
    36de:	|               movea.l d0,a6
    36e0:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    36e4:	|               movea.l 22(sp),a0
    36e8:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    36ee:	|               movea.l 22(sp),a0
    36f2:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    36f8:	|               move.w 32(sp),d0
    36fc:	|               movea.l 22(sp),a0
    3700:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3704:	|               move.w 30(sp),d0
    3708:	|               movea.l 22(sp),a0
    370c:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    3710:	|               move.w 28(sp),d0
    3714:	|               movea.l 22(sp),a0
    3718:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    371c:	|               move.w 26(sp),d0
    3720:	|               movea.l 22(sp),a0
    3724:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    3728:	|               move.l 108(sp),d0
    372c:	|               movea.l 22(sp),a0
    3730:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3734:	|               move.l 104(sp),d0
    3738:	|               movea.l 22(sp),a0
    373c:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3740:	|               movea.l 144(sp),a0
    3744:	|               move.l (a0),d0
    3746:	|               asr.l #3,d0
    3748:	|               move.l d0,d1
    374a:	|               movea.l 144(sp),a0
    374e:	|               move.l 4(a0),d0
    3752:	|               move.l d0,d0
    3754:	|               move.w d1,d2
    3756:	|               muls.w d0,d2
    3758:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    375c:	|               move.l 1c912 <winWidth>,d0
    3762:	|               lsr.l #3,d0
    3764:	|               move.l d0,d1
    3766:	|               move.l 1c916 <winHeight>,d0
    376c:	|               move.l d0,d0
    376e:	|               move.w d1,d2
    3770:	|               muls.w d0,d2
    3772:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3776:	|               clr.l 88(sp)
    377a:	|        /----- bra.w 380e <CstScaleSprite+0xae0>
  {
    custom->bltapt = (APTR) bltapt;
    377e:	|     /--|----> move.l 124(sp),d0
    3782:	|     |  |      movea.l 22(sp),a0
    3786:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    378a:	|     |  |      move.l 120(sp),d0
    378e:	|     |  |      movea.l 22(sp),a0
    3792:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3796:	|     |  |      move.l 116(sp),d0
    379a:	|     |  |      movea.l 22(sp),a0
    379e:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    37a2:	|     |  |      move.l 112(sp),d0
    37a6:	|     |  |      movea.l 22(sp),a0
    37aa:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37ae:	|     |  |      move.l 92(sp),d0
    37b2:	|     |  |      move.w d0,d1
    37b4:	|     |  |      lsl.w #6,d1
    37b6:	|     |  |      movea.l 144(sp),a0
    37ba:	|     |  |      move.l (a0),d0
    37bc:	|     |  |      movea.l d0,a0
    37be:	|     |  |      cmpa.w #0,a0
    37c2:	|     |  |  /-- bge.s 37c8 <CstScaleSprite+0xa9a>
    37c4:	|     |  |  |   lea 15(a0),a0
    37c8:	|     |  |  \-> move.l a0,d0
    37ca:	|     |  |      asr.l #4,d0
    37cc:	|     |  |      move.l d0,d0
    37ce:	|     |  |      add.w d1,d0
    37d0:	|     |  |      sub.w 132(sp),d0
    37d4:	|     |  |      add.w 134(sp),d0
    37d8:	|     |  |      movea.l 22(sp),a0
    37dc:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    37e0:	|     |  |      moveq #0,d0
    37e2:	|     |  |      move.w 20(sp),d0
    37e6:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    37ea:	|     |  |      moveq #0,d0
    37ec:	|     |  |      move.w 18(sp),d0
    37f0:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    37f4:	|     |  |      moveq #0,d0
    37f6:	|     |  |      move.w 18(sp),d0
    37fa:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    37fe:	|     |  |      move.l 1c9ca <GfxBase>,d0
    3804:	|     |  |      movea.l d0,a6
    3806:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    380a:	|     |  |      addq.l #1,88(sp)
    380e:	|     |  \----> moveq #4,d0
    3810:	|     |         cmp.l 88(sp),d0
    3814:	|     \-------- bge.w 377e <CstScaleSprite+0xa50>
  }   

  FreeVec(mask);
    3818:	|               move.l 84(sp),14(sp)
    381e:	|               move.l 1c9be <SysBase>,d0
    3824:	|               movea.l d0,a6
    3826:	|               movea.l 14(sp),a1
    382a:	|               jsr -690(a6)
}
    382e:	\-------------> move.l (sp)+,d2
    3830:	                movea.l (sp)+,a6
    3832:	                lea 132(sp),sp
    3836:	                rts

00003838 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3838:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    383a:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3840:	move.l 8(sp),d0
    3844:	movea.l (sp),a0
    3846:	move.l d0,128(a0)
}
    384a:	nop
    384c:	addq.l #4,sp
    384e:	rts

00003850 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3850:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3854:	move.l 1c8ee <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    385c:	move.l 1c8f2 <CstDrawBuffer>,d0
    3862:	move.l d0,1c8ee <CstViewBuffer>
  CstDrawBuffer = tmp;
    3868:	move.l 16(sp),1c8f2 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3870:	move.l 1c8f6 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3878:	move.l 1c8fa <CstCleanupQueueDrawBuffer>,d0
    387e:	move.l d0,1c8f6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3884:	move.l 12(sp),1c8fa <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    388c:	move.l 1c8e8 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3894:	move.l 1c8ee <CstViewBuffer>,d0
    389a:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    389e:	move.l 4(sp),d0
    38a2:	clr.w d0
    38a4:	swap d0
    38a6:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    38aa:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    38ae:	movea.w #118,a0
    38b2:	adda.l 8(sp),a0
    38b6:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    38b8:	movea.w #114,a0
    38bc:	adda.l 8(sp),a0
    38c0:	move.w 2(sp),(a0)

  ptr +=  40*256;
    38c4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38cc:	move.l 4(sp),d0
    38d0:	clr.w d0
    38d2:	swap d0
    38d4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38d8:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    38dc:	movea.w #126,a0
    38e0:	adda.l 8(sp),a0
    38e4:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    38e6:	movea.w #122,a0
    38ea:	adda.l 8(sp),a0
    38ee:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    38f2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38fa:	move.l 4(sp),d0
    38fe:	clr.w d0
    3900:	swap d0
    3902:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3906:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    390a:	movea.l 8(sp),a0
    390e:	lea 134(a0),a0
    3912:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3914:	movea.l 8(sp),a0
    3918:	lea 130(a0),a0
    391c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3920:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3928:	move.l 4(sp),d0
    392c:	clr.w d0
    392e:	swap d0
    3930:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3934:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3938:	movea.l 8(sp),a0
    393c:	lea 142(a0),a0
    3940:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3942:	movea.l 8(sp),a0
    3946:	lea 138(a0),a0
    394a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    394e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3956:	move.l 4(sp),d0
    395a:	clr.w d0
    395c:	swap d0
    395e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3962:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3966:	movea.l 8(sp),a0
    396a:	lea 150(a0),a0
    396e:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3970:	movea.l 8(sp),a0
    3974:	lea 146(a0),a0
    3978:	move.w 2(sp),(a0)

}
    397c:	nop
    397e:	lea 20(sp),sp
    3982:	rts

00003984 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3984:	          lea -56(sp),sp
    3988:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    398a:	          pea 180b7 <PutChar+0x3a5>
    3990:	          jsr 17248 <KPrintF>
    3996:	          addq.l #4,sp

  width = width / 8;
    3998:	          move.l 64(sp),d0
    399c:	      /-- bpl.s 39a0 <CstReserveBackdrop+0x1c>
    399e:	      |   addq.l #7,d0
    39a0:	      \-> asr.l #3,d0
    39a2:	          move.l d0,64(sp)

  if( width < 40) 
    39a6:	          moveq #39,d0
    39a8:	          cmp.l 64(sp),d0
    39ac:	      /-- blt.s 39c2 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    39ae:	      |   pea 180d1 <PutChar+0x3bf>
    39b4:	      |   jsr 17248 <KPrintF>
    39ba:	      |   addq.l #4,sp
    return FALSE;
    39bc:	      |   clr.w d0
    39be:	/-----|-- bra.w 3d04 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    39c2:	|     \-> pea 1810f <PutChar+0x3fd>
    39c8:	|         jsr 17248 <KPrintF>
    39ce:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    39d0:	|         move.l 64(sp),-(sp)
    39d4:	|         jsr fce <CstCreateCopperlist>
    39da:	|         addq.l #4,sp
    39dc:	|         move.l d0,1c8e8 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    39e2:	|         pea 1812f <PutChar+0x41d>
    39e8:	|         jsr 17248 <KPrintF>
    39ee:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    39f0:	|         move.l 64(sp),d1
    39f4:	|         move.l 68(sp),d0
    39f8:	|         muls.w d1,d0
    39fa:	|         move.w d0,1c8de <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3a00:	|         move.w 1c8de <CstBackdropSizePlane>,d1
    3a06:	|         move.w d1,d0
    3a08:	|         add.w d0,d0
    3a0a:	|         add.w d0,d0
    3a0c:	|         add.w d1,d0
    3a0e:	|         move.w d0,1c8dc <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3a14:	|         move.w 1c8dc <CstBackdropSize>,d0
    3a1a:	|         move.w d0,d0
    3a1c:	|         andi.l #65535,d0
    3a22:	|         move.l d0,48(sp)
    3a26:	|         moveq #2,d1
    3a28:	|         move.l d1,44(sp)
    3a2c:	|         move.l 1c9be <SysBase>,d0
    3a32:	|         movea.l d0,a6
    3a34:	|         move.l 48(sp),d0
    3a38:	|         move.l 44(sp),d1
    3a3c:	|         jsr -684(a6)
    3a40:	|         move.l d0,40(sp)
    3a44:	|         move.l 40(sp),d0
    3a48:	|         move.l d0,1c8e0 <CstBackDrop>
  if( !CstBackDrop)
    3a4e:	|         move.l 1c8e0 <CstBackDrop>,d0
    3a54:	|     /-- bne.s 3a6a <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3a56:	|     |   pea 18156 <PutChar+0x444>
    3a5c:	|     |   jsr 17248 <KPrintF>
    3a62:	|     |   addq.l #4,sp
    return FALSE;  
    3a64:	|     |   clr.w d0
    3a66:	+-----|-- bra.w 3d04 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3a6a:	|     \-> pea 1818e <PutChar+0x47c>
    3a70:	|         jsr 17248 <KPrintF>
    3a76:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3a78:	|         move.l 1c8e0 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a80:	|         clr.l 52(sp)
    3a84:	|     /-- bra.s 3a9a <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3a86:	|  /--|-> move.l 56(sp),d0
    3a8a:	|  |  |   move.l d0,d1
    3a8c:	|  |  |   addq.l #4,d1
    3a8e:	|  |  |   move.l d1,56(sp)
    3a92:	|  |  |   movea.l d0,a0
    3a94:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a96:	|  |  |   addq.l #1,52(sp)
    3a9a:	|  |  \-> move.w 1c8dc <CstBackdropSize>,d0
    3aa0:	|  |      lsr.w #2,d0
    3aa2:	|  |      move.w d0,d0
    3aa4:	|  |      andi.l #65535,d0
    3aaa:	|  |      cmp.l 52(sp),d0
    3aae:	|  \----- bgt.s 3a86 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ab0:	|         move.w 1c8dc <CstBackdropSize>,d0
    3ab6:	|         move.w d0,d0
    3ab8:	|         andi.l #65535,d0
    3abe:	|         move.l 64(sp),d1
    3ac2:	|         add.l d1,d1
    3ac4:	|         add.l d1,d0
    3ac6:	|         move.l d0,36(sp)
    3aca:	|         moveq #2,d0
    3acc:	|         move.l d0,32(sp)
    3ad0:	|         move.l 1c9be <SysBase>,d0
    3ad6:	|         movea.l d0,a6
    3ad8:	|         move.l 36(sp),d0
    3adc:	|         move.l 32(sp),d1
    3ae0:	|         jsr -684(a6)
    3ae4:	|         move.l d0,28(sp)
    3ae8:	|         move.l 28(sp),d0
    3aec:	|         move.l d0,1c8f2 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3af2:	|         move.l 1c8f2 <CstDrawBuffer>,d0
    3af8:	|     /-- bne.s 3b0e <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3afa:	|     |   pea 181b4 <PutChar+0x4a2>
    3b00:	|     |   jsr 17248 <KPrintF>
    3b06:	|     |   addq.l #4,sp
    return FALSE;  
    3b08:	|     |   clr.w d0
    3b0a:	+-----|-- bra.w 3d04 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3b0e:	|     \-> pea 181ee <PutChar+0x4dc>
    3b14:	|         jsr 17248 <KPrintF>
    3b1a:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3b1c:	|         move.l #10000,24(sp)
    3b24:	|         clr.l 20(sp)
    3b28:	|         move.l 1c9be <SysBase>,d0
    3b2e:	|         movea.l d0,a6
    3b30:	|         move.l 24(sp),d0
    3b34:	|         move.l 20(sp),d1
    3b38:	|         jsr -684(a6)
    3b3c:	|         move.l d0,16(sp)
    3b40:	|         move.l 16(sp),d0
    3b44:	|         move.l d0,1c8fe <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3b4a:	|         move.l 1c8fe <CstBackDropBufferApplyStart>,d0
    3b50:	|     /-- bne.s 3b66 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3b52:	|     |   pea 18216 <PutChar+0x504>
    3b58:	|     |   jsr 17248 <KPrintF>
    3b5e:	|     |   addq.l #4,sp
    return FALSE;  
    3b60:	|     |   clr.w d0
    3b62:	+-----|-- bra.w 3d04 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3b66:	|     \-> move.l 1c8fe <CstBackDropBufferApplyStart>,d0
    3b6c:	|         move.l d0,1c902 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3b72:	|         movea.l 1c8fe <CstBackDropBufferApplyStart>,a0
    3b78:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3b7a:	|         movea.l 1c8fe <CstBackDropBufferApplyStart>,a0
    3b80:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b82:	|         move.w 1c8dc <CstBackdropSize>,d0
    3b88:	|         move.w d0,d0
    3b8a:	|         andi.l #65535,d0
    3b90:	|         move.l 64(sp),d1
    3b94:	|         add.l d1,d1
    3b96:	|         add.l d1,d0
    3b98:	|         move.l d0,12(sp)
    3b9c:	|         moveq #2,d1
    3b9e:	|         move.l d1,8(sp)
    3ba2:	|         move.l 1c9be <SysBase>,d0
    3ba8:	|         movea.l d0,a6
    3baa:	|         move.l 12(sp),d0
    3bae:	|         move.l 8(sp),d1
    3bb2:	|         jsr -684(a6)
    3bb6:	|         move.l d0,4(sp)
    3bba:	|         move.l 4(sp),d0
    3bbe:	|         move.l d0,1c8ee <CstViewBuffer>
  if( !CstViewBuffer)
    3bc4:	|         move.l 1c8ee <CstViewBuffer>,d0
    3bca:	|     /-- bne.s 3be0 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3bcc:	|     |   pea 18261 <PutChar+0x54f>
    3bd2:	|     |   jsr 17248 <KPrintF>
    3bd8:	|     |   addq.l #4,sp
    return FALSE;  
    3bda:	|     |   clr.w d0
    3bdc:	+-----|-- bra.w 3d04 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3be0:	|     \-> pea 1829b <PutChar+0x589>
    3be6:	|         jsr 17248 <KPrintF>
    3bec:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3bee:	|         move.l 1c8f2 <CstDrawBuffer>,d1
    3bf4:	|         move.l 64(sp),d0
    3bf8:	|     /-- bpl.s 3bfc <CstReserveBackdrop+0x278>
    3bfa:	|     |   addq.l #3,d0
    3bfc:	|     \-> asr.l #2,d0
    3bfe:	|         add.l d0,d0
    3c00:	|         add.l d0,d0
    3c02:	|         add.l d1,d0
    3c04:	|         move.l d0,1c8f2 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c0a:	|         move.l 1c8ee <CstViewBuffer>,d1
    3c10:	|         move.l 64(sp),d0
    3c14:	|     /-- bpl.s 3c18 <CstReserveBackdrop+0x294>
    3c16:	|     |   addq.l #3,d0
    3c18:	|     \-> asr.l #2,d0
    3c1a:	|         add.l d0,d0
    3c1c:	|         add.l d0,d0
    3c1e:	|         add.l d1,d0
    3c20:	|         move.l d0,1c8ee <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3c26:	|         move.l 1c8e0 <CstBackDrop>,d0
    3c2c:	|         clr.l -(sp)
    3c2e:	|         pea 5 <_start+0x5>
    3c32:	|         pea 100 <copyString+0x48>
    3c36:	|         pea 140 <decodeFilename+0x28>
    3c3a:	|         pea 182c3 <PutChar+0x5b1>
    3c40:	|         move.l d0,-(sp)
    3c42:	|         jsr 17330 <debug_register_bitmap>
    3c48:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3c4c:	|         move.l 68(sp),d0
    3c50:	|         movea.w d0,a1
    3c52:	|         move.l 64(sp),d0
    3c56:	|         lsl.w #3,d0
    3c58:	|         movea.w d0,a0
    3c5a:	|         move.l 1c8f2 <CstDrawBuffer>,d0
    3c60:	|         clr.l -(sp)
    3c62:	|         pea 5 <_start+0x5>
    3c66:	|         move.l a1,-(sp)
    3c68:	|         move.l a0,-(sp)
    3c6a:	|         pea 182d3 <PutChar+0x5c1>
    3c70:	|         move.l d0,-(sp)
    3c72:	|         jsr 17330 <debug_register_bitmap>
    3c78:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3c7c:	|         move.l 68(sp),d0
    3c80:	|         movea.w d0,a1
    3c82:	|         move.l 64(sp),d0
    3c86:	|         lsl.w #3,d0
    3c88:	|         movea.w d0,a0
    3c8a:	|         move.l 1c8ee <CstViewBuffer>,d0
    3c90:	|         clr.l -(sp)
    3c92:	|         pea 5 <_start+0x5>
    3c96:	|         move.l a1,-(sp)
    3c98:	|         move.l a0,-(sp)
    3c9a:	|         pea 182e2 <PutChar+0x5d0>
    3ca0:	|         move.l d0,-(sp)
    3ca2:	|         jsr 17330 <debug_register_bitmap>
    3ca8:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3cac:	|         move.l 1c8e8 <CstCopperList>,d0
    3cb2:	|     /-- beq.s 3cc4 <CstReserveBackdrop+0x340>
    3cb4:	|     |   move.l 1c8f2 <CstDrawBuffer>,d0
    3cba:	|     +-- beq.s 3cc4 <CstReserveBackdrop+0x340>
    3cbc:	|     |   move.l 1c8ee <CstViewBuffer>,d0
    3cc2:	|  /--|-- bne.s 3cd6 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3cc4:	|  |  \-> pea 182f1 <PutChar+0x5df>
    3cca:	|  |      jsr 17248 <KPrintF>
    3cd0:	|  |      addq.l #4,sp
    return FALSE;
    3cd2:	|  |      clr.w d0
    3cd4:	+--|----- bra.s 3d04 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3cd6:	|  \----> pea 1831e <PutChar+0x60c>
    3cdc:	|         jsr 17248 <KPrintF>
    3ce2:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3ce4:	|         move.l 1c8e8 <CstCopperList>,d0
    3cea:	|         move.l d0,-(sp)
    3cec:	|         jsr 3838 <CstSetCl>
    3cf2:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3cf4:	|         pea 18345 <PutChar+0x633>
    3cfa:	|         jsr 17248 <KPrintF>
    3d00:	|         addq.l #4,sp
  return TRUE;
    3d02:	|         moveq #1,d0

}
    3d04:	\-------> movea.l (sp)+,a6
    3d06:	          lea 56(sp),sp
    3d0a:	          rts

00003d0c <CstUnfreeze>:

void CstUnfreeze() {
    3d0c:	       lea -24(sp),sp
    3d10:	       move.l a6,-(sp)
    3d12:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3d14:	       pea 18368 <PutChar+0x656>
    3d1a:	       jsr 17248 <KPrintF>
    3d20:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3d22:	       move.l 1c912 <winWidth>,d0
    3d28:	       lsr.l #3,d0
    3d2a:	       move.l d0,d1
    3d2c:	       move.l 1c916 <winHeight>,d0
    3d32:	       move.l d0,d0
    3d34:	       muls.w d0,d1
    3d36:	       move.w d1,d0
    3d38:	       add.w d0,d0
    3d3a:	       add.w d0,d0
    3d3c:	       move.w d0,d2
    3d3e:	       add.w d1,d2
    3d40:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d44:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3d4c:	       move.l 1c916 <winHeight>,d0
    3d52:	       move.l d0,d0
    3d54:	       movea.w d0,a1
    3d56:	       move.l 1c912 <winWidth>,d0
    3d5c:	       move.l d0,d0
    3d5e:	       movea.w d0,a0
    3d60:	       move.l 1c8e4 <CstBackDropBackup>,d0
    3d66:	       clr.l -(sp)
    3d68:	       pea 5 <_start+0x5>
    3d6c:	       move.l a1,-(sp)
    3d6e:	       move.l a0,-(sp)
    3d70:	       pea 17f3a <PutChar+0x228>
    3d76:	       move.l d0,-(sp)
    3d78:	       jsr 17330 <debug_register_bitmap>
    3d7e:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3d82:	       move.l 1c8e4 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3d8a:	       move.l 1c8e0 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3d92:	       clr.l 20(sp)
    3d96:	   /-- bra.s 3dbc <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3d98:	/--|-> move.l 28(sp),d1
    3d9c:	|  |   move.l d1,d0
    3d9e:	|  |   addq.l #4,d0
    3da0:	|  |   move.l d0,28(sp)
    3da4:	|  |   move.l 24(sp),d0
    3da8:	|  |   move.l d0,d2
    3daa:	|  |   addq.l #4,d2
    3dac:	|  |   move.l d2,24(sp)
    3db0:	|  |   movea.l d1,a0
    3db2:	|  |   move.l (a0),d1
    3db4:	|  |   movea.l d0,a0
    3db6:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3db8:	|  |   addq.l #1,20(sp)
    3dbc:	|  \-> move.w 18(sp),d0
    3dc0:	|      lsr.w #2,d0
    3dc2:	|      move.w d0,d0
    3dc4:	|      andi.l #65535,d0
    3dca:	|      cmp.l 20(sp),d0
    3dce:	\----- bgt.s 3d98 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3dd0:	       move.w #2,1c8ec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3dd8:	       move.l 1c912 <winWidth>,d0
    3dde:	       lsr.l #4,d0
    3de0:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3de6:	       move.l a0,d1
    3de8:	       addq.l #2,d1
    3dea:	       move.l d1,1c902 <CstBackDropBufferApplyCursor>
    3df0:	       move.l d0,d0
    3df2:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3df4:	       move.l 1c916 <winHeight>,d0
    3dfa:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3e00:	       move.l a0,d1
    3e02:	       addq.l #2,d1
    3e04:	       move.l d1,1c902 <CstBackDropBufferApplyCursor>
    3e0a:	       move.l d0,d0
    3e0c:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e0e:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3e14:	       move.l a0,d0
    3e16:	       addq.l #2,d0
    3e18:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    3e1e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e20:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3e26:	       move.l a0,d0
    3e28:	       addq.l #2,d0
    3e2a:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    3e30:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e32:	       movea.l 1c902 <CstBackDropBufferApplyCursor>,a0
    3e38:	       move.l a0,d0
    3e3a:	       addq.l #2,d0
    3e3c:	       move.l d0,1c902 <CstBackDropBufferApplyCursor>
    3e42:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3e44:	       move.l 1c8e4 <CstBackDropBackup>,d0
    3e4a:	   /-- bne.s 3e64 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3e4c:	   |   move.l 1c8e4 <CstBackDropBackup>,10(sp)
    3e54:	   |   move.l 1c9be <SysBase>,d0
    3e5a:	   |   movea.l d0,a6
    3e5c:	   |   movea.l 10(sp),a1
    3e60:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3e64:	   \-> pea 17f49 <PutChar+0x237>
    3e6a:	       jsr 17248 <KPrintF>
    3e70:	       addq.l #4,sp

}
    3e72:	       nop
    3e74:	       move.l (sp)+,d2
    3e76:	       movea.l (sp)+,a6
    3e78:	       lea 24(sp),sp
    3e7c:	       rts

00003e7e <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3e7e:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3e82:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3e86:	       tst.l 24(sp)
    3e8a:	   /-- bge.s 3e90 <drawLine+0x12>
    3e8c:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3e90:	   \-> tst.l 28(sp)
    3e94:	   /-- bge.s 3e9a <drawLine+0x1c>
    3e96:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3e9a:	   \-> tst.l 32(sp)
    3e9e:	   /-- bge.s 3ea4 <drawLine+0x26>
    3ea0:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3ea4:	   \-> tst.l 36(sp)
    3ea8:	   /-- bge.s 3eae <drawLine+0x30>
    3eaa:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3eae:	   \-> move.l 1ca5a <sceneWidth>,d0
    3eb4:	       cmp.l 24(sp),d0
    3eb8:	   /-- bge.s 3ec8 <drawLine+0x4a>
    3eba:	   |   move.l 1ca5a <sceneWidth>,d0
    3ec0:	   |   move.l d0,d1
    3ec2:	   |   subq.l #1,d1
    3ec4:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3ec8:	   \-> move.l 1ca5a <sceneWidth>,d0
    3ece:	       cmp.l 32(sp),d0
    3ed2:	   /-- bge.s 3ee2 <drawLine+0x64>
    3ed4:	   |   move.l 1ca5a <sceneWidth>,d0
    3eda:	   |   move.l d0,d1
    3edc:	   |   subq.l #1,d1
    3ede:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3ee2:	   \-> move.l 1ca5e <sceneHeight>,d0
    3ee8:	       cmp.l 28(sp),d0
    3eec:	   /-- bge.s 3efc <drawLine+0x7e>
    3eee:	   |   move.l 1ca5e <sceneHeight>,d0
    3ef4:	   |   move.l d0,d1
    3ef6:	   |   subq.l #1,d1
    3ef8:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3efc:	   \-> move.l 1ca5e <sceneHeight>,d0
    3f02:	       cmp.l 36(sp),d0
    3f06:	   /-- bge.s 3f16 <drawLine+0x98>
    3f08:	   |   move.l 1ca5e <sceneHeight>,d0
    3f0e:	   |   move.l d0,d1
    3f10:	   |   subq.l #1,d1
    3f12:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3f16:	   \-> move.l 24(sp),d0
    3f1a:	       cmp.l 32(sp),d0
    3f1e:	/----- ble.s 3f3a <drawLine+0xbc>
		x = x2; 
    3f20:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3f26:	|      tst.w 10(sp)
    3f2a:	|      seq d0
    3f2c:	|      neg.b d0
    3f2e:	|      move.b d0,d0
    3f30:	|      andi.w #255,d0
    3f34:	|      move.w d0,10(sp)
    3f38:	|  /-- bra.s 3f40 <drawLine+0xc2>
	} else x = x1;
    3f3a:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3f40:	   \-> move.l 28(sp),d1
    3f44:	       cmp.l 36(sp),d1
    3f48:	/----- ble.s 3f64 <drawLine+0xe6>
		y = y2; 
    3f4a:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3f50:	|      tst.w 10(sp)
    3f54:	|      seq d0
    3f56:	|      neg.b d0
    3f58:	|      move.b d0,d0
    3f5a:	|      andi.w #255,d0
    3f5e:	|      move.w d0,10(sp)
    3f62:	|  /-- bra.s 3f6a <drawLine+0xec>
	} else y = y1;	
    3f64:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3f6a:	   \-> move.l 32(sp),d0
    3f6e:	       sub.l 24(sp),d0
    3f72:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3f76:	       move.l 6(sp),d0
    3f7a:	   /-- bpl.s 3f7e <drawLine+0x100>
    3f7c:	   |   neg.l d0
    3f7e:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3f82:	       move.l 36(sp),d1
    3f86:	       sub.l 28(sp),d1
    3f8a:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3f8e:	       move.l 2(sp),d0
    3f92:	   /-- bpl.s 3f96 <drawLine+0x118>
    3f94:	   |   neg.l d0
    3f96:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3f9a:	       tst.l 6(sp)
    3f9e:	   /-- bne.s 3fc2 <drawLine+0x144>
		diffX = 1;
    3fa0:	   |   moveq #1,d0
    3fa2:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3fa6:	   |   move.l 1ca5a <sceneWidth>,d0
    3fac:	   |   subq.l #1,d0
    3fae:	   |   cmp.l 16(sp),d0
    3fb2:	   +-- bne.s 3fc2 <drawLine+0x144>
    3fb4:	   |   move.l 1ca5a <sceneWidth>,d0
    3fba:	   |   move.l d0,d1
    3fbc:	   |   subq.l #2,d1
    3fbe:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3fc2:	   \-> tst.l 2(sp)
    3fc6:	   /-- bne.s 3fea <drawLine+0x16c>
		diffY = 1;
    3fc8:	   |   moveq #1,d0
    3fca:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3fce:	   |   move.l 1ca5e <sceneHeight>,d0
    3fd4:	   |   subq.l #1,d0
    3fd6:	   |   cmp.l 12(sp),d0
    3fda:	   +-- bne.s 3fea <drawLine+0x16c>
    3fdc:	   |   move.l 1ca5e <sceneHeight>,d0
    3fe2:	   |   move.l d0,d1
    3fe4:	   |   subq.l #2,d1
    3fe6:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3fea:	   \-> pea 18393 <PutChar+0x681>
    3ff0:	       jsr 17248 <KPrintF>
    3ff6:	       addq.l #4,sp
	
}
    3ff8:	       nop
    3ffa:	       lea 20(sp),sp
    3ffe:	       rts

00004000 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4000:	                      lea -24(sp),sp
    4004:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4006:	                      move.l 1c91a <firstTexture>,d0
    400c:	/-------------------- beq.w 40ea <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4010:	|                     clr.l 24(sp)
    4014:	|     /-------------- bra.w 40de <deleteTextures+0xde>
			BOOL found = FALSE;
    4018:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    401c:	|  |  |               move.l 1c91a <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4024:	|  |  |               movea.l 20(sp),a0
    4028:	|  |  |               move.l (a0),d1
    402a:	|  |  |               move.l 24(sp),d0
    402e:	|  |  |               add.l d0,d0
    4030:	|  |  |               add.l d0,d0
    4032:	|  |  |               movea.l 36(sp),a0
    4036:	|  |  |               adda.l d0,a0
    4038:	|  |  |               move.l (a0),d0
    403a:	|  |  |               cmp.l d1,d0
    403c:	|  |  |  /----------- bne.w 40d0 <deleteTextures+0xd0>
				found = TRUE;
    4040:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4046:	|  |  |  |            movea.l 20(sp),a0
    404a:	|  |  |  |            move.l 12(a0),d0
    404e:	|  |  |  |            move.l d0,1c91a <firstTexture>
				FreeVec(list);
    4054:	|  |  |  |            move.l 20(sp),6(sp)
    405a:	|  |  |  |            move.l 1c9be <SysBase>,d0
    4060:	|  |  |  |            movea.l d0,a6
    4062:	|  |  |  |            movea.l 6(sp),a1
    4066:	|  |  |  |            jsr -690(a6)
				continue;
    406a:	|  |  |  |  /-------- bra.s 40da <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    406c:	|  |  |  |  |  /----> movea.l 20(sp),a0
    4070:	|  |  |  |  |  |      movea.l 12(a0),a0
    4074:	|  |  |  |  |  |      move.l (a0),d1
    4076:	|  |  |  |  |  |      move.l 24(sp),d0
    407a:	|  |  |  |  |  |      add.l d0,d0
    407c:	|  |  |  |  |  |      add.l d0,d0
    407e:	|  |  |  |  |  |      movea.l 36(sp),a0
    4082:	|  |  |  |  |  |      adda.l d0,a0
    4084:	|  |  |  |  |  |      move.l (a0),d0
    4086:	|  |  |  |  |  |      cmp.l d1,d0
    4088:	|  |  |  |  |  |  /-- bne.s 40c6 <deleteTextures+0xc6>
					found = TRUE;
    408a:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4090:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4094:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    409a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    409e:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    40a2:	|  |  |  |  |  |  |   move.l 12(a0),d0
    40a6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    40aa:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    40ae:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    40b4:	|  |  |  |  |  |  |   move.l 1c9be <SysBase>,d0
    40ba:	|  |  |  |  |  |  |   movea.l d0,a6
    40bc:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    40c0:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    40c4:	|  |  |  |  +--|--|-- bra.s 40da <deleteTextures+0xda>
				}
				list = list->next;
    40c6:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    40ca:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    40d0:	|  |  |  \--|--|----> movea.l 20(sp),a0
    40d4:	|  |  |     |  |      move.l 12(a0),d0
    40d8:	|  |  |     |  \----- bne.s 406c <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    40da:	|  |  |     \-------> addq.l #1,24(sp)
    40de:	|  |  \-------------> move.l 24(sp),d0
    40e2:	|  |                  cmp.l 32(sp),d0
    40e6:	|  \----------------- bcs.w 4018 <deleteTextures+0x18>
			}
		}
	}
}
    40ea:	\-------------------> nop
    40ec:	                      movea.l (sp)+,a6
    40ee:	                      lea 24(sp),sp
    40f2:	                      rts

000040f4 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    40f4:	subq.l #4,sp
    40f6:	move.l 8(sp),d0
    40fa:	move.w d0,d0
    40fc:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4100:	pea 183b6 <PutChar+0x6a4>
    4106:	jsr 17248 <KPrintF>
    410c:	addq.l #4,sp
}
    410e:	nop
    4110:	addq.l #4,sp
    4112:	rts

00004114 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4114:	       moveq #-1,d0
    4116:	       cmp.l 4(sp),d0
    411a:	   /-- bne.s 4120 <resourceNameFromNum+0xc>
    411c:	   |   moveq #0,d0
    411e:	/--|-- bra.s 4158 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4120:	|  \-> move.l 1c99a <numResourceNames>,d0
    4126:	|  /-- bne.s 4130 <resourceNameFromNum+0x1c>
    4128:	|  |   move.l #99302,d0
    412e:	+--|-- bra.s 4158 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4130:	|  \-> move.l 1c99a <numResourceNames>,d0
    4136:	|      cmp.l 4(sp),d0
    413a:	|  /-- ble.s 4152 <resourceNameFromNum+0x3e>
    413c:	|  |   move.l 1c952 <allResourceNames>,d1
    4142:	|  |   move.l 4(sp),d0
    4146:	|  |   add.l d0,d0
    4148:	|  |   add.l d0,d0
    414a:	|  |   movea.l d1,a0
    414c:	|  |   adda.l d0,a0
    414e:	|  |   move.l (a0),d0
    4150:	+--|-- bra.s 4158 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4152:	|  \-> move.l #99311,d0
    4158:	\----> rts

0000415a <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    415a:	          lea -44(sp),sp
    415e:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4162:	          move.l #320,1c912 <winWidth>
    winHeight = 256;
    416c:	          move.l #256,1c916 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4176:	          tst.l 60(sp)
    417a:	      /-- bne.s 4192 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    417c:	      |   pea 18400 <PutChar+0x6ee>
    4182:	      |   jsr b8 <copyString>
    4188:	      |   addq.l #4,sp
    418a:	      |   move.l d0,1c92a <bundleFolder>
    4190:	   /--|-- bra.s 41a8 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4192:	   |  \-> movea.l 64(sp),a0
    4196:	   |      move.l (a0),d0
    4198:	   |      move.l d0,-(sp)
    419a:	   |      jsr b8 <copyString>
    41a0:	   |      addq.l #4,sp
    41a2:	   |      move.l d0,1c92a <bundleFolder>
	}
    
	int lastSlash = -1;
    41a8:	   \----> moveq #-1,d0
    41aa:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    41ae:	          clr.l 44(sp)
    41b2:	   /----- bra.s 41d4 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    41b4:	/--|----> move.l 1c92a <bundleFolder>,d1
    41ba:	|  |      move.l 44(sp),d0
    41be:	|  |      movea.l d1,a0
    41c0:	|  |      adda.l d0,a0
    41c2:	|  |      move.b (a0),d0
    41c4:	|  |      cmpi.b #47,d0
    41c8:	|  |  /-- bne.s 41d0 <main_sludge+0x76>
    41ca:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    41d0:	|  |  \-> addq.l #1,44(sp)
    41d4:	|  \----> move.l 1c92a <bundleFolder>,d1
    41da:	|         move.l 44(sp),d0
    41de:	|         movea.l d1,a0
    41e0:	|         adda.l d0,a0
    41e2:	|         move.b (a0),d0
    41e4:	\-------- bne.s 41b4 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    41e6:	          move.l 1c92a <bundleFolder>,d0
    41ec:	          move.l 48(sp),d1
    41f0:	          addq.l #1,d1
    41f2:	          movea.l d0,a0
    41f4:	          adda.l d1,a0
    41f6:	          clr.b (a0)

	if (argc > 1) {
    41f8:	          moveq #1,d0
    41fa:	          cmp.l 60(sp),d0
    41fe:	      /-- bge.s 421a <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4200:	      |   move.l 60(sp),d0
    4204:	      |   addi.l #1073741823,d0
    420a:	      |   add.l d0,d0
    420c:	      |   add.l d0,d0
    420e:	      |   movea.l 64(sp),a0
    4212:	      |   adda.l d0,a0
    4214:	      |   move.l (a0),52(sp)
    4218:	   /--|-- bra.s 4274 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    421a:	   |  \-> move.l 1c92a <bundleFolder>,d0
    4220:	   |      pea 18406 <PutChar+0x6f4>
    4226:	   |      move.l d0,-(sp)
    4228:	   |      jsr 13d14 <joinStrings>
    422e:	   |      addq.l #8,sp
    4230:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4234:	   |      move.l 52(sp),-(sp)
    4238:	   |      jsr 13c0e <fileExists>
    423e:	   |      addq.l #4,sp
    4240:	   |      tst.b d0
    4242:	   +----- bne.s 4274 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4244:	   |      move.l 52(sp),40(sp)
    424a:	   |      move.l 1c9be <SysBase>,d0
    4250:	   |      movea.l d0,a6
    4252:	   |      movea.l 40(sp),a1
    4256:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    425a:	   |      move.l 1c92a <bundleFolder>,d0
    4260:	   |      pea 18413 <PutChar+0x701>
    4266:	   |      move.l d0,-(sp)
    4268:	   |      jsr 13d14 <joinStrings>
    426e:	   |      addq.l #8,sp
    4270:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4274:	   \----> pea 1841c <PutChar+0x70a>
    427a:	          jsr 17248 <KPrintF>
    4280:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4282:	          move.l 52(sp),-(sp)
    4286:	          jsr 13c0e <fileExists>
    428c:	          addq.l #4,sp
    428e:	          tst.b d0
    4290:	      /-- bne.s 42e8 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4292:	      |   move.l 1c9c6 <DOSBase>,d0
    4298:	      |   movea.l d0,a6
    429a:	      |   jsr -60(a6)
    429e:	      |   move.l d0,28(sp)
    42a2:	      |   move.l 28(sp),d0
    42a6:	      |   move.l d0,24(sp)
    42aa:	      |   move.l #99356,20(sp)
    42b2:	      |   moveq #21,d0
    42b4:	      |   move.l d0,16(sp)
    42b8:	      |   move.l 1c9c6 <DOSBase>,d0
    42be:	      |   movea.l d0,a6
    42c0:	      |   move.l 24(sp),d1
    42c4:	      |   move.l 20(sp),d2
    42c8:	      |   move.l 16(sp),d3
    42cc:	      |   jsr -48(a6)
    42d0:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    42d4:	      |   pea 1841c <PutChar+0x70a>
    42da:	      |   jsr 17248 <KPrintF>
    42e0:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    42e2:	      |   moveq #0,d0
    42e4:	/-----|-- bra.w 44e6 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    42e8:	|     \-> pea 18432 <PutChar+0x720>
    42ee:	|         jsr 17248 <KPrintF>
    42f4:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    42f6:	|         move.l 52(sp),-(sp)
    42fa:	|         jsr 44f0 <setGameFilePath>
    4300:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4302:	|         move.l 52(sp),-(sp)
    4306:	|         jsr 5a9e <initSludge>
    430c:	|         addq.l #4,sp
    430e:	|         tst.w d0
    4310:	|     /-- bne.s 4318 <main_sludge+0x1be>
    4312:	|     |   moveq #0,d0
    4314:	+-----|-- bra.w 44e6 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4318:	|     \-> move.l 1c912 <winWidth>,d0
    431e:	|         cmpi.l #320,d0
    4324:	|     /-- bne.s 4334 <main_sludge+0x1da>
    4326:	|     |   move.l 1c916 <winHeight>,d0
    432c:	|     |   cmpi.l #256,d0
    4332:	|  /--|-- beq.s 4356 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4334:	|  |  \-> pea 18443 <PutChar+0x731>
    433a:	|  |      jsr 17248 <KPrintF>
    4340:	|  |      addq.l #4,sp
		winWidth = 320;
    4342:	|  |      move.l #320,1c912 <winWidth>
		winHeight = 256;
    434c:	|  |      move.l #256,1c916 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4356:	|  \----> pea 184c0 <PutChar+0x7ae>
    435c:	|         jsr 17248 <KPrintF>
    4362:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4364:	|         move.l 1c916 <winHeight>,d0
    436a:	|         move.l d0,d1
    436c:	|         move.l 1c912 <winWidth>,d0
    4372:	|         move.l d1,-(sp)
    4374:	|         move.l d0,-(sp)
    4376:	|         jsr d410 <resizeBackdrop>
    437c:	|         addq.l #8,sp
    437e:	|         tst.w d0
    4380:	|     /-- bne.s 4396 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4382:	|     |   pea 184d3 <PutChar+0x7c1>
    4388:	|     |   jsr 17248 <KPrintF>
    438e:	|     |   addq.l #4,sp
		return FALSE;
    4390:	|     |   moveq #0,d0
    4392:	+-----|-- bra.w 44e6 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4396:	|     \-> pea 184f9 <PutChar+0x7e7>
    439c:	|         jsr 17248 <KPrintF>
    43a2:	|         addq.l #4,sp
	if (! initPeople ())
    43a4:	|         jsr a978 <initPeople>
    43aa:	|         tst.w d0
    43ac:	|     /-- bne.s 43c2 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    43ae:	|     |   pea 18506 <PutChar+0x7f4>
    43b4:	|     |   jsr 17248 <KPrintF>
    43ba:	|     |   addq.l #4,sp
		return FALSE;
    43bc:	|     |   moveq #0,d0
    43be:	+-----|-- bra.w 44e6 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    43c2:	|     \-> pea 18527 <PutChar+0x815>
    43c8:	|         jsr 17248 <KPrintF>
    43ce:	|         addq.l #4,sp
	if (! initFloor ())
    43d0:	|         jsr 165fe <initFloor>
    43d6:	|         tst.w d0
    43d8:	|     /-- bne.s 43ee <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    43da:	|     |   pea 18533 <PutChar+0x821>
    43e0:	|     |   jsr 17248 <KPrintF>
    43e6:	|     |   addq.l #4,sp
		
		return FALSE;
    43e8:	|     |   moveq #0,d0
    43ea:	+-----|-- bra.w 44e6 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    43ee:	|     \-> pea 18553 <PutChar+0x841>
    43f4:	|         jsr 17248 <KPrintF>
    43fa:	|         addq.l #4,sp
	if (! initObjectTypes ())
    43fc:	|         jsr d5cc <initObjectTypes>
    4402:	|         tst.w d0
    4404:	|     /-- bne.s 441a <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4406:	|     |   pea 18564 <PutChar+0x852>
    440c:	|     |   jsr 17248 <KPrintF>
    4412:	|     |   addq.l #4,sp
		return FALSE;
    4414:	|     |   moveq #0,d0
    4416:	+-----|-- bra.w 44e6 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    441a:	|     \-> pea 1858a <PutChar+0x878>
    4420:	|         jsr 17248 <KPrintF>
    4426:	|         addq.l #4,sp
	initSpeech ();
    4428:	|         jsr 7ec0 <initSpeech>
	KPrintF("Init status bar\n");
    442e:	|         pea 18597 <PutChar+0x885>
    4434:	|         jsr 17248 <KPrintF>
    443a:	|         addq.l #4,sp
	initStatusBar ();
    443c:	|         jsr 7984 <initStatusBar>

	KPrintF("Get numbered string\n");
    4442:	|         pea 185a8 <PutChar+0x896>
    4448:	|         jsr 17248 <KPrintF>
    444e:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4450:	|         pea 1 <_start+0x1>
    4454:	|         jsr 6c94 <getNumberedString>
    445a:	|         addq.l #4,sp
    445c:	|         move.l d0,1c922 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4462:	|         pea 185bd <PutChar+0x8ab>
    4468:	|         jsr 17248 <KPrintF>
    446e:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4470:	|         move.l 1c98e <noStack>,d0
    4476:	|         pea 1 <_start+0x1>
    447a:	|         move.l d0,-(sp)
    447c:	|         clr.l -(sp)
    447e:	|         clr.l -(sp)
    4480:	|         clr.l -(sp)
    4482:	|         jsr 6aea <startNewFunctionNum>
    4488:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    448c:	|         pea 185d5 <PutChar+0x8c3>
    4492:	|         jsr 17248 <KPrintF>
    4498:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    449a:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    44a2:	|         clr.l 1c92e <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    44a8:	|     /-- bra.s 44c8 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    44aa:	|  /--|-> jsr 6a7a <sludgeDisplay>
		CsiCheckInput();
    44b0:	|  |  |   jsr cf44 <CsiCheckInput>
		walkAllPeople();
    44b6:	|  |  |   jsr befe <walkAllPeople>
		handleInput();
    44bc:	|  |  |   jsr 5838 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    44c2:	|  |  |   jsr 1717c <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    44c8:	|  |  \-> move.l 1c92e <weAreDoneSoQuit>,d0
    44ce:	|  \----- beq.s 44aa <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    44d0:	|         move.l 52(sp),32(sp)
    44d6:	|         move.l 1c9be <SysBase>,d0
    44dc:	|         movea.l d0,a6
    44de:	|         movea.l 32(sp),a1
    44e2:	|         jsr -690(a6)
}
    44e6:	\-------> movem.l (sp)+,d2-d3/a6
    44ea:	          lea 44(sp),sp
    44ee:	          rts

000044f0 <setGameFilePath>:

void setGameFilePath (char * f) {
    44f0:	          lea -1104(sp),sp
    44f4:	          move.l a6,-(sp)
    44f6:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    44f8:	          move.l #1112,d0
    44fe:	          add.l sp,d0
    4500:	          addi.l #-1102,d0
    4506:	          move.l d0,1100(sp)
    450a:	          move.l #998,1096(sp)
    4512:	          move.l 1c9c6 <DOSBase>,d0
    4518:	          movea.l d0,a6
    451a:	          move.l 1100(sp),d1
    451e:	          move.l 1096(sp),d2
    4522:	          jsr -564(a6)
    4526:	          move.w d0,1094(sp)
    452a:	          move.w 1094(sp),d0
    452e:	      /-- bne.s 453e <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4530:	      |   pea 185e8 <PutChar+0x8d6>
    4536:	      |   jsr 17248 <KPrintF>
    453c:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    453e:	      \-> moveq #-1,d0
    4540:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4544:	          clr.l 1104(sp)
    4548:	   /----- bra.s 4566 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    454a:	/--|----> move.l 1104(sp),d0
    454e:	|  |      movea.l 1116(sp),a0
    4552:	|  |      adda.l d0,a0
    4554:	|  |      move.b (a0),d0
    4556:	|  |      cmpi.b #47,d0
    455a:	|  |  /-- bne.s 4562 <setGameFilePath+0x72>
    455c:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4562:	|  |  \-> addq.l #1,1104(sp)
    4566:	|  \----> move.l 1104(sp),d0
    456a:	|         movea.l 1116(sp),a0
    456e:	|         adda.l d0,a0
    4570:	|         move.b (a0),d0
    4572:	\-------- bne.s 454a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4574:	          moveq #-1,d0
    4576:	          cmp.l 1108(sp),d0
    457a:	   /----- beq.s 45f4 <setGameFilePath+0x104>
		f[got] = 0;	
    457c:	   |      move.l 1108(sp),d0
    4580:	   |      movea.l 1116(sp),a0
    4584:	   |      adda.l d0,a0
    4586:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4588:	   |      move.l 1116(sp),1090(sp)
    458e:	   |      moveq #-2,d0
    4590:	   |      move.l d0,1086(sp)
    4594:	   |      move.l 1c9c6 <DOSBase>,d0
    459a:	   |      movea.l d0,a6
    459c:	   |      move.l 1090(sp),d1
    45a0:	   |      move.l 1086(sp),d2
    45a4:	   |      jsr -84(a6)
    45a8:	   |      move.l d0,1082(sp)
    45ac:	   |      move.l 1082(sp),d0
    45b0:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    45b4:	   |      move.l 1078(sp),1074(sp)
    45ba:	   |      move.l 1c9c6 <DOSBase>,d0
    45c0:	   |      movea.l d0,a6
    45c2:	   |      move.l 1074(sp),d1
    45c6:	   |      jsr -126(a6)
    45ca:	   |      move.l d0,1070(sp)
    45ce:	   |      move.l 1070(sp),d0
    45d2:	   |  /-- bne.s 45e6 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    45d4:	   |  |   move.l 1116(sp),-(sp)
    45d8:	   |  |   pea 1860e <PutChar+0x8fc>
    45de:	   |  |   jsr 17248 <KPrintF>
    45e4:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    45e6:	   |  \-> move.l 1108(sp),d0
    45ea:	   |      movea.l 1116(sp),a0
    45ee:	   |      adda.l d0,a0
    45f0:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    45f4:	   \----> move.l #400,1066(sp)
    45fc:	          clr.l 1062(sp)
    4600:	          move.l 1c9be <SysBase>,d0
    4606:	          movea.l d0,a6
    4608:	          move.l 1066(sp),d0
    460c:	          move.l 1062(sp),d1
    4610:	          jsr -684(a6)
    4614:	          move.l d0,1058(sp)
    4618:	          move.l 1058(sp),d0
    461c:	          move.l d0,1c926 <gamePath>
	if (gamePath==0) {
    4622:	          move.l 1c926 <gamePath>,d0
    4628:	      /-- bne.s 463c <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    462a:	      |   pea 18641 <PutChar+0x92f>
    4630:	      |   jsr 17248 <KPrintF>
    4636:	      |   addq.l #4,sp
    4638:	   /--|-- bra.w 4724 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    463c:	   |  \-> move.l 1c926 <gamePath>,1054(sp)
    4644:	   |      moveq #-2,d0
    4646:	   |      move.l d0,1050(sp)
    464a:	   |      move.l 1c9c6 <DOSBase>,d0
    4650:	   |      movea.l d0,a6
    4652:	   |      move.l 1054(sp),d1
    4656:	   |      move.l 1050(sp),d2
    465a:	   |      jsr -84(a6)
    465e:	   |      move.l d0,1046(sp)
    4662:	   |      move.l 1046(sp),d0
    4666:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    466a:	   |      move.l 1042(sp),1038(sp)
    4670:	   |      move.l 1c9c6 <DOSBase>,d0
    4676:	   |      movea.l d0,a6
    4678:	   |      move.l 1038(sp),d1
    467c:	   |      jsr -126(a6)
    4680:	   |      move.l d0,1034(sp)
    4684:	   |      move.l 1034(sp),d0
    4688:	   |  /-- bne.s 4698 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    468a:	   |  |   pea 1867c <PutChar+0x96a>
    4690:	   |  |   jsr 17248 <KPrintF>
    4696:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4698:	   |  \-> move.l #1112,d0
    469e:	   |      add.l sp,d0
    46a0:	   |      addi.l #-1102,d0
    46a6:	   |      move.l d0,1030(sp)
    46aa:	   |      moveq #-2,d0
    46ac:	   |      move.l d0,1026(sp)
    46b0:	   |      move.l 1c9c6 <DOSBase>,d0
    46b6:	   |      movea.l d0,a6
    46b8:	   |      move.l 1030(sp),d1
    46bc:	   |      move.l 1026(sp),d2
    46c0:	   |      jsr -84(a6)
    46c4:	   |      move.l d0,1022(sp)
    46c8:	   |      move.l 1022(sp),d0
    46cc:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    46d0:	   |      move.l 1042(sp),1018(sp)
    46d6:	   |      move.l 1c9c6 <DOSBase>,d0
    46dc:	   |      movea.l d0,a6
    46de:	   |      move.l 1018(sp),d1
    46e2:	   |      jsr -126(a6)
    46e6:	   |      move.l d0,1014(sp)
    46ea:	   |      move.l 1014(sp),d0
    46ee:	   |  /-- bne.s 4704 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    46f0:	   |  |   moveq #10,d0
    46f2:	   |  |   add.l sp,d0
    46f4:	   |  |   move.l d0,-(sp)
    46f6:	   |  |   pea 186a8 <PutChar+0x996>
    46fc:	   |  |   jsr 17248 <KPrintF>
    4702:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4704:	   |  \-> move.l 1c926 <gamePath>,d0
    470a:	   +----- beq.s 4724 <setGameFilePath+0x234>
    470c:	   |      move.l 1c926 <gamePath>,1010(sp)
    4714:	   |      move.l 1c9be <SysBase>,d0
    471a:	   |      movea.l d0,a6
    471c:	   |      movea.l 1010(sp),a1
    4720:	   |      jsr -690(a6)
}
    4724:	   \----> move.l (sp)+,d2
    4726:	          movea.l (sp)+,a6
    4728:	          lea 1104(sp),sp
    472c:	          rts

0000472e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    472e:	/-------> lea -16(sp),sp
    4732:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4734:	|         move.l 24(sp),-(sp)
    4738:	|         jsr 685c <pauseFunction>
    473e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4740:	|     /-- bra.s 4752 <abortFunction+0x24>
    4742:	|  /--|-> moveq #24,d0
    4744:	|  |  |   add.l 24(sp),d0
    4748:	|  |  |   move.l d0,-(sp)
    474a:	|  |  |   jsr 1516c <trimStack>
    4750:	|  |  |   addq.l #4,sp
    4752:	|  |  \-> movea.l 24(sp),a0
    4756:	|  |      move.l 24(a0),d0
    475a:	|  \----- bne.s 4742 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    475c:	|         movea.l 24(sp),a0
    4760:	|         move.l 4(a0),12(sp)
    4766:	|         move.l 1c9be <SysBase>,d0
    476c:	|         movea.l d0,a6
    476e:	|         movea.l 12(sp),a1
    4772:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4776:	|         clr.l 16(sp)
    477a:	|     /-- bra.s 479a <abortFunction+0x6c>
    477c:	|  /--|-> movea.l 24(sp),a0
    4780:	|  |  |   move.l 20(a0),d1
    4784:	|  |  |   move.l 16(sp),d0
    4788:	|  |  |   lsl.l #3,d0
    478a:	|  |  |   add.l d1,d0
    478c:	|  |  |   move.l d0,-(sp)
    478e:	|  |  |   jsr 14a36 <unlinkVar>
    4794:	|  |  |   addq.l #4,sp
    4796:	|  |  |   addq.l #1,16(sp)
    479a:	|  |  \-> movea.l 24(sp),a0
    479e:	|  |      move.l 8(a0),d0
    47a2:	|  |      cmp.l 16(sp),d0
    47a6:	|  \----- bgt.s 477c <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    47a8:	|         movea.l 24(sp),a0
    47ac:	|         move.l 20(a0),8(sp)
    47b2:	|         move.l 1c9be <SysBase>,d0
    47b8:	|         movea.l d0,a6
    47ba:	|         movea.l 8(sp),a1
    47be:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    47c2:	|         moveq #28,d0
    47c4:	|         add.l 24(sp),d0
    47c8:	|         move.l d0,-(sp)
    47ca:	|         jsr 14a36 <unlinkVar>
    47d0:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    47d2:	|         movea.l 24(sp),a0
    47d6:	|         move.l 40(a0),d0
    47da:	|     /-- beq.s 47ec <abortFunction+0xbe>
    47dc:	|     |   movea.l 24(sp),a0
    47e0:	|     |   move.l 40(a0),d0
    47e4:	|     |   move.l d0,-(sp)
    47e6:	\-----|-- jsr 472e <abortFunction>(pc)
    47ea:	      |   addq.l #4,sp
	FreeVec(fun);
    47ec:	      \-> move.l 24(sp),4(sp)
    47f2:	          move.l 1c9be <SysBase>,d0
    47f8:	          movea.l d0,a6
    47fa:	          movea.l 4(sp),a1
    47fe:	          jsr -690(a6)
	fun = NULL;
    4802:	          clr.l 24(sp)
}
    4806:	          nop
    4808:	          movea.l (sp)+,a6
    480a:	          lea 16(sp),sp
    480e:	          rts

00004810 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    4810:	          subq.l #8,sp
	int n = 0;
    4812:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4816:	          movea.l 20(sp),a0
    481a:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    481c:	          move.l 1c956 <allRunningFunctions>,(sp)
	while (fun) {
    4822:	   /----- bra.s 4850 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4824:	/--|----> movea.l (sp),a0
    4826:	|  |      move.l (a0),d0
    4828:	|  |      cmp.l 12(sp),d0
    482c:	|  |  /-- bne.s 484a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    482e:	|  |  |   movea.l (sp),a0
    4830:	|  |  |   move.w #1,54(a0)
			n++;
    4836:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    483a:	|  |  |   move.l (sp),d0
    483c:	|  |  |   cmp.l 16(sp),d0
    4840:	|  |  +-- bne.s 484a <cancelAFunction+0x3a>
    4842:	|  |  |   movea.l 20(sp),a0
    4846:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    484a:	|  |  \-> movea.l (sp),a0
    484c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4850:	|  \----> tst.l (sp)
    4852:	\-------- bne.s 4824 <cancelAFunction+0x14>
	}
	return n;
    4854:	          move.l 4(sp),d0
}
    4858:	          addq.l #8,sp
    485a:	          rts

0000485c <completeTimers>:


void completeTimers () {
    485c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    485e:	          move.l 1c956 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4864:	   /----- bra.s 487a <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4866:	/--|----> movea.l (sp),a0
    4868:	|  |      move.b 56(a0),d0
    486c:	|  |  /-- bne.s 4874 <completeTimers+0x18>
    486e:	|  |  |   movea.l (sp),a0
    4870:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4874:	|  |  \-> movea.l (sp),a0
    4876:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    487a:	|  \----> tst.l (sp)
    487c:	\-------- bne.s 4866 <completeTimers+0xa>
	}
}
    487e:	          nop
    4880:	          nop
    4882:	          addq.l #4,sp
    4884:	          rts

00004886 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4886:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    488a:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4890:	                                                             movea.l 80(sp),a0
    4894:	                                                             move.w 54(a0),d0
    4898:	/----------------------------------------------------------- beq.w 5726 <continueFunction+0xea0>
		abortFunction (fun);
    489c:	|                                                            move.l 80(sp),-(sp)
    48a0:	|                                                            jsr 472e <abortFunction>
    48a6:	|                                                            addq.l #4,sp
		return TRUE;
    48a8:	|                                                            moveq #1,d0
    48aa:	|  /-------------------------------------------------------- bra.w 5730 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    48ae:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    48b4:	|  |  |                                                      movea.l 80(sp),a0
    48b8:	|  |  |                                                      move.l 4(a0),d1
    48bc:	|  |  |                                                      movea.l 80(sp),a0
    48c0:	|  |  |                                                      move.l 36(a0),d0
    48c4:	|  |  |                                                      lsl.l #3,d0
    48c6:	|  |  |                                                      movea.l d1,a0
    48c8:	|  |  |                                                      adda.l d0,a0
    48ca:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    48d0:	|  |  |                                                      movea.l 80(sp),a0
    48d4:	|  |  |                                                      move.l 4(a0),d1
    48d8:	|  |  |                                                      movea.l 80(sp),a0
    48dc:	|  |  |                                                      move.l 36(a0),d0
    48e0:	|  |  |                                                      lsl.l #3,d0
    48e2:	|  |  |                                                      movea.l d1,a0
    48e4:	|  |  |                                                      adda.l d0,a0
    48e6:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    48ea:	|  |  |                                                      moveq #41,d0
    48ec:	|  |  |                                                      cmp.l 64(sp),d0
    48f0:	|  |  |  /-------------------------------------------------- bcs.w 56da <continueFunction+0xe54>
    48f4:	|  |  |  |                                                   move.l 64(sp),d0
    48f8:	|  |  |  |                                                   add.l d0,d0
    48fa:	|  |  |  |                                                   movea.l d0,a0
    48fc:	|  |  |  |                                                   adda.l #18696,a0
    4902:	|  |  |  |                                                   move.w (a0),d0
    4904:	|  |  |  |                                                   jmp (4908 <continueFunction+0x82>,pc,d0.w)
    4908:	|  |  |  |                                                   bset d6,(a2)
    490a:	|  |  |  |                                                   ori.w #2670,(a4)
    490e:	|  |  |  |                                                   eori.w #2416,d6
    4912:	|  |  |  |                                                   bchg d4,d2
    4914:	|  |  |  |                                                   bclr d4,(a4)+
    4916:	|  |  |  |                                                   andi.l #181013194,d4
    491c:	|  |  |  |                                                   .short 0x0aca
    491e:	|  |  |  |                                                   .short 0x0aca
    4920:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4928:	|  |  |  |                                                   .short 0x0aca
    492a:	|  |  |  |                                                   andi.w #906,-(a4)
    492e:	|  |  |  |                                                   bchg d1,196(a2)
    4932:	|  |  |  |                                                   bset d1,580(a4)
    4936:	|  |  |  |                                                   bclr d1,2576(a2)
    493a:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4940:	|  |  |  |                                                   .short 0x0aca
    4942:	|  |  |  |                                                   eori.l #63572682,d0
    4948:	|  |  |  |                                                   .short 0x0aca
    494a:	|  |  |  |                                                   bchg d3,-(a2)
    494c:	|  |  |  |                                                   bchg #-36,(a2)
    4950:	|  |  |  |                                                   .short 0x08cc
    4952:	|  |  |  |                                                   addi.b #14,1038(a0)
    4958:	|  |  |  |                                                   .short 0x040e
    495a:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    495e:	|  |  |  |                                                   ori.w #8232,(a0)
    4962:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4968:	|  |  |  |                                                   ori.w #12136,(a0)
    496c:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4972:	|  |  |  |                                                   ori.w #12328,(a0)
    4976:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    497c:	|  |  |  |                                                   add.l 44(sp),d1
    4980:	|  |  |  |                                                   moveq #28,d0
    4982:	|  |  |  |                                                   add.l 80(sp),d0
    4986:	|  |  |  |                                                   move.l d1,-(sp)
    4988:	|  |  |  |                                                   move.l d0,-(sp)
    498a:	|  |  |  |                                                   jsr 14ca2 <copyVariable>
    4990:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4992:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4996:	|  |  |  |                                                   jsr 5736 <finishFunction>
    499c:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    499e:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    49a4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    49a8:	|  |  |  |                                                   jsr 689e <restartFunction>
    49ae:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    49b0:	|  |  |  |  /----------------------------------------------- bra.w 570e <continueFunction+0xe88>
				finishFunction (fun);
    49b4:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    49b8:	|  |  |  |  |                                                jsr 5736 <finishFunction>
    49be:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    49c0:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    49c4:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    49c8:	|  |  |  |  +----------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    49cc:	|  |  |  |  |                                                movea.l 80(sp),a0
    49d0:	|  |  |  |  |                                                move.l 28(a0),d0
    49d4:	|  |  |  |  |                                                moveq #2,d1
    49d6:	|  |  |  |  |                                                cmp.l d0,d1
    49d8:	|  |  |  |  |                                            /-- beq.s 49e4 <continueFunction+0x15e>
    49da:	|  |  |  |  |                                            |   moveq #4,d1
    49dc:	|  |  |  |  |                                            |   cmp.l d0,d1
    49de:	|  |  |  |  |                                         /--|-- beq.s 4a32 <continueFunction+0x1ac>
    49e0:	|  |  |  |  |                                /--------|--|-- bra.w 4b1a <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    49e4:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    49e8:	|  |  |  |  |                                |        |      jsr 685c <pauseFunction>
    49ee:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    49f0:	|  |  |  |  |                                |        |      moveq #24,d0
    49f2:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    49f6:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    49fa:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    49fe:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4a02:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4a04:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4a08:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4a0c:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4a0e:	|  |  |  |  |                                |        |      jsr 6aea <startNewFunctionNum>
    4a14:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4a18:	|  |  |  |  |                                |        |      tst.l d0
    4a1a:	|  |  |  |  |                                |        |  /-- bne.s 4a22 <continueFunction+0x19c>
    4a1c:	|  |  |  |  |                                |        |  |   clr.w d0
    4a1e:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5730 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4a22:	|  |  |  |  |                                |        |  \-> move.l 1c956 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a2a:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4a2e:	|  |  |  |  |                                |  /-----|----- bra.w 4b2e <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4a32:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4a36:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4a3a:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4a3e:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4a42:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4a44:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4a46:	|  |  |  |  |                                |  |            jsr 134ca <callBuiltIn>
    4a4c:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4a50:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4a54:	|  |  |  |  |                                |  |            moveq #5,d0
    4a56:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4a5a:	|  |  |  |  |                                |  |  /-------- bcs.w 4b16 <continueFunction+0x290>
    4a5e:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4a62:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4a64:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4a66:	|  |  |  |  |                                |  |  |         adda.l #19058,a0
    4a6c:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4a6e:	|  |  |  |  |                                |  |  |         jmp (4a72 <continueFunction+0x1ec>,pc,d0.w)
    4a72:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4a78:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4a7c:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4a82:	|  |  |  |  |                                |  |  |         or.l d3,(-71,a0,d4.l:8)
    4a86:	|  |  |  |  |                                |  |  |         ori.b #72,d1
    4a8a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4a8c:	|  |  |  |  |                                |  |  |         clr.w d0
    4a8e:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5730 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4a92:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4a96:	|  |  |  |  |                                |  |  |         jsr 685c <pauseFunction>
    4a9c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4a9e:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4aa2:	|  |  |  |  |                                |  |  |  /----- bra.s 4b18 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4aa4:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4aa8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4aac:	|  |  |  |  |                                |  |  |  +----- bra.s 4b18 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4aae:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4ab2:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4ab8:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4aba:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4abe:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4ac2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4ac6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4ac8:	|  |  |  |  |                                |  |  |  |      jsr 150da <setVariable>
    4ace:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4ad2:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4ad6:	|  |  |  |  |                                |  |  |  |      jsr 685c <pauseFunction>
    4adc:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4ade:	|  |  |  |  |                                |  |  |  |      move.l 1c98e <noStack>,d1
    4ae4:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4ae8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4aea:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4aec:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4af0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4af2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4af4:	|  |  |  |  |                                |  |  |  |      jsr 6aea <startNewFunctionNum>
    4afa:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4afe:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4b00:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4b08 <continueFunction+0x282>
    4b02:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4b04:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5730 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4b08:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c956 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b10:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4b14:	|  |  |  |  |                                |  |  |  +----- bra.s 4b18 <continueFunction+0x292>

						default:
						break;
    4b16:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4b18:	|  |  |  |  |                                |  +-----\----X bra.s 4b2e <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4b1a:	|  |  |  |  |                                \--|----------> pea 187fb <PutChar+0xae9>
    4b20:	|  |  |  |  |                                   |            jsr 17248 <KPrintF>
    4b26:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4b28:	|  |  |  |  |                                   |            clr.w d0
    4b2a:	|  +--|--|--|-----------------------------------|----------- bra.w 5730 <continueFunction+0xeaa>
			}
			break;
    4b2e:	|  |  |  |  +-----------------------------------\----------X bra.w 570e <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4b32:	|  |  |  |  |                                                moveq #28,d0
    4b34:	|  |  |  |  |                                                add.l 80(sp),d0
    4b38:	|  |  |  |  |                                                clr.l -(sp)
    4b3a:	|  |  |  |  |                                                clr.l -(sp)
    4b3c:	|  |  |  |  |                                                move.l d0,-(sp)
    4b3e:	|  |  |  |  |                                                jsr 150da <setVariable>
    4b44:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b48:	|  |  |  |  +----------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4b4c:	|  |  |  |  |                                                move.l 68(sp),d1
    4b50:	|  |  |  |  |                                                moveq #28,d0
    4b52:	|  |  |  |  |                                                add.l 80(sp),d0
    4b56:	|  |  |  |  |                                                move.l d1,-(sp)
    4b58:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4b5c:	|  |  |  |  |                                                move.l d0,-(sp)
    4b5e:	|  |  |  |  |                                                jsr 150da <setVariable>
    4b64:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b68:	|  |  |  |  +----------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4b6c:	|  |  |  |  |                                                move.l 68(sp),d1
    4b70:	|  |  |  |  |                                                moveq #28,d0
    4b72:	|  |  |  |  |                                                add.l 80(sp),d0
    4b76:	|  |  |  |  |                                                move.l d1,-(sp)
    4b78:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4b7c:	|  |  |  |  |                                                move.l d0,-(sp)
    4b7e:	|  |  |  |  |                                                jsr 150da <setVariable>
    4b84:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b88:	|  |  |  |  +----------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4b8c:	|  |  |  |  |                                                moveq #28,d0
    4b8e:	|  |  |  |  |                                                add.l 80(sp),d0
    4b92:	|  |  |  |  |                                                movea.l 80(sp),a0
    4b96:	|  |  |  |  |                                                movea.l 20(a0),a0
    4b9a:	|  |  |  |  |                                                move.l 68(sp),d1
    4b9e:	|  |  |  |  |                                                lsl.l #3,d1
    4ba0:	|  |  |  |  |                                                add.l a0,d1
    4ba2:	|  |  |  |  |                                                move.l d0,-(sp)
    4ba4:	|  |  |  |  |                                                move.l d1,-(sp)
    4ba6:	|  |  |  |  |                                                jsr 14ca2 <copyVariable>
    4bac:	|  |  |  |  |                                                addq.l #8,sp
    4bae:	|  |  |  |  |                                                tst.w d0
    4bb0:	|  |  |  |  |  /-------------------------------------------- bne.w 56ec <continueFunction+0xe66>
    4bb4:	|  |  |  |  |  |                                             clr.w d0
    4bb6:	|  +--|--|--|--|-------------------------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4bba:	|  |  |  |  |  |                                             moveq #28,d0
    4bbc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4bc0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bc2:	|  |  |  |  |  |                                             jsr 14d28 <getBoolean>
    4bc8:	|  |  |  |  |  |                                             addq.l #4,sp
    4bca:	|  |  |  |  |  |                                             tst.w d0
    4bcc:	|  |  |  |  |  |                                      /----- beq.s 4be8 <continueFunction+0x362>
    4bce:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4bd2:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4bd6:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4bd8:	|  |  |  |  |  |                                      |      jsr 14d28 <getBoolean>
    4bde:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4be0:	|  |  |  |  |  |                                      |      tst.w d0
    4be2:	|  |  |  |  |  |                                      +----- beq.s 4be8 <continueFunction+0x362>
    4be4:	|  |  |  |  |  |                                      |      moveq #1,d0
    4be6:	|  |  |  |  |  |                                      |  /-- bra.s 4bea <continueFunction+0x364>
    4be8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4bea:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4bec:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4bf0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bf2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4bf6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4bf8:	|  |  |  |  |  |                                             jsr 150da <setVariable>
    4bfe:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c02:	|  |  |  |  |  |                                             moveq #24,d0
    4c04:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c08:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c0a:	|  |  |  |  |  |                                             jsr 1516c <trimStack>
    4c10:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c12:	|  |  |  |  +--|-------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4c16:	|  |  |  |  |  |                                             moveq #28,d0
    4c18:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c1c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c1e:	|  |  |  |  |  |                                             jsr 14d28 <getBoolean>
    4c24:	|  |  |  |  |  |                                             addq.l #4,sp
    4c26:	|  |  |  |  |  |                                             tst.w d0
    4c28:	|  |  |  |  |  |                                         /-- bne.s 4c40 <continueFunction+0x3ba>
    4c2a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4c2e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4c32:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4c34:	|  |  |  |  |  |                                         |   jsr 14d28 <getBoolean>
    4c3a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4c3c:	|  |  |  |  |  |                                         |   tst.w d0
    4c3e:	|  |  |  |  |  |                                      /--|-- beq.s 4c44 <continueFunction+0x3be>
    4c40:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4c42:	|  |  |  |  |  |                                      |  /-- bra.s 4c46 <continueFunction+0x3c0>
    4c44:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c46:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c48:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c4c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c4e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c52:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c54:	|  |  |  |  |  |                                             jsr 150da <setVariable>
    4c5a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c5e:	|  |  |  |  |  |                                             moveq #24,d0
    4c60:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c64:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c66:	|  |  |  |  |  |                                             jsr 1516c <trimStack>
    4c6c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c6e:	|  |  |  |  +--|-------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4c72:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4c76:	|  |  |  |  |  |                                             moveq #28,d0
    4c78:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c7c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c7e:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4c82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c84:	|  |  |  |  |  |                                             jsr 150da <setVariable>
    4c8a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4c8e:	|  |  |  |  +--|-------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4c92:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4c96:	|  |  |  |  |  |                                             moveq #28,d0
    4c98:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c9c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c9e:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4ca2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ca4:	|  |  |  |  |  |                                             jsr 150da <setVariable>
    4caa:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cae:	|  |  |  |  +--|-------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4cb2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4cb6:	|  |  |  |  |  |                                             moveq #28,d0
    4cb8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cbc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cbe:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4cc2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cc4:	|  |  |  |  |  |                                             jsr 150da <setVariable>
    4cca:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cce:	|  |  |  |  +--|-------------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4cd2:	|  |  |  |  |  |                                             move.l 1c91e <dialogValue>,d0
    4cd8:	|  |  |  |  |  |                                             moveq #1,d1
    4cda:	|  |  |  |  |  |                                             cmp.l d0,d1
    4cdc:	|  |  |  |  |  |  /----------------------------------------- beq.w 56f0 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4ce0:	|  |  |  |  |  |  |                                          pea 18810 <PutChar+0xafe>
    4ce6:	|  |  |  |  |  |  |                                          jsr 17248 <KPrintF>
    4cec:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4cee:	|  |  |  |  |  |  |                                          clr.w d0
    4cf0:	|  +--|--|--|--|--|----------------------------------------- bra.w 5730 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4cf4:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4cf8:	|  |  |  |  |  |  |                                          moveq #28,d0
    4cfa:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4cfe:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4d00:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4d02:	|  |  |  |  |  |  |                                          jsr 1486c <loadStringToVar>
    4d08:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4d0a:	|  |  |  |  |  |  |                                          tst.w d0
    4d0c:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 56f4 <continueFunction+0xe6e>
					return FALSE;
    4d10:	|  |  |  |  |  |  |  |                                       clr.w d0
    4d12:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4d16:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d1a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4d1e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4d20:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4d22:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4d24:	|  |  |  |  |  |  |  |                                /----- beq.s 4d82 <continueFunction+0x4fc>
    4d26:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4d28:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4d2a:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4f16 <continueFunction+0x690>
    4d2e:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4d30:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4d3c <continueFunction+0x4b6>
    4d32:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4d34:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4d36:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4d82 <continueFunction+0x4fc>
    4d38:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4f16 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4d3c:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4d3e:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4d42:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4d6e <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4d44:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4d46:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d4a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d4c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d4e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d50:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150da <setVariable>
    4d56:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4d5a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4d5c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d60:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d62:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1516c <trimStack>
    4d68:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4d6a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4f2c <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4d6e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 18851 <PutChar+0xb3f>
    4d74:	|  |  |  |  |  |  |  |              |  |              |      jsr 17248 <KPrintF>
    4d7a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4d7c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4d7e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5730 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4d82:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4d86:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4d8a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4d8e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4d90:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4da6 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4d92:	|  |  |  |  |  |  |  |              |  |                 |   pea 1888d <PutChar+0xb7b>
    4d98:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17248 <KPrintF>
    4d9e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4da0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4da2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5730 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4da6:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4da8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4dac:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4dae:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4db2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4db6:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4db8:	|  |  |  |  |  |  |  |              |  |                     jsr 147e8 <getValueType>
    4dbe:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4dc2:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4dc4:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4dcc <continueFunction+0x546>
    4dc6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4dc8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5730 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4dcc:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4dd0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4dd4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4dd6:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4dd8:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4dda:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4dfc <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4ddc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4de0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4de2:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4de6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4dea:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4dee:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4df0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4df2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14472 <fastArrayGetByIndex>
    4df8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4dfa:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4e1c <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4dfc:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4e00:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4e02:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4e06:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4e0a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4e0e:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4e10:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4e12:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4e14:	|  |  |  |  |  |  |  |              |  |              |      jsr 150fc <stackGetByIndex>
    4e1a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e1c:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4e20:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4e22:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e26:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e28:	|  |  |  |  |  |  |  |              |  |                     jsr 1516c <trimStack>
    4e2e:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4e30:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4e34:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e50 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4e36:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4e38:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4e3c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e3e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e40:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e42:	|  |  |  |  |  |  |  |              |  |                 |   jsr 150da <setVariable>
    4e48:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4e4c:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4f2a <continueFunction+0x6a4>
    4e50:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4e52:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4e56:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4e64 <continueFunction+0x5de>
    4e58:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4e5a:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4e5e:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4eae <continueFunction+0x628>
    4e60:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4ef6 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4e64:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4e68:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4e6c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4e70:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4e72:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 147e8 <getValueType>
    4e78:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4e7c:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4e7e:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4e86 <continueFunction+0x600>
    4e80:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4e82:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4f10 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4e86:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4e88:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4e8a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4e8e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4e90:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4e94:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4e96:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 150da <setVariable>
    4e9c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4ea0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4ea2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4ea4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4ea8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4eac:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4f14 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4eae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4eb2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4eb6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4eba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4ebc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 147e8 <getValueType>
    4ec2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4ec6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4ec8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4ece <continueFunction+0x648>
    4eca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4ecc:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4f10 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4ece:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4ed0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4ed2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4ed6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4ed8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4edc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4ede:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 150da <setVariable>
    4ee4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4ee8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4eea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4eec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4ef0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4ef4:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4f14 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4ef6:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4ef8:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4efc:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4efe:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4f02:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14ca2 <copyVariable>
    4f08:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4f0a:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4f0c:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4f2a <continueFunction+0x6a4>
    4f0e:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f10:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 5730 <continueFunction+0xeaa>
				break;
    4f14:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4f2a <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4f16:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 188ab <PutChar+0xb99>
    4f1c:	|  |  |  |  |  |  |  |                 |  |                  jsr 17248 <KPrintF>
    4f22:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4f24:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4f26:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5730 <continueFunction+0xeaa>
				break;
    4f2a:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4f2c:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 570e <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4f30:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f34:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4f38:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4f3a:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4f3c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4f3e:	|  |  |  |  |  |  |  |                                   /-- beq.s 4f4c <continueFunction+0x6c6>
    4f40:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4f42:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4f44:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4ff8 <continueFunction+0x772>
    4f48:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 5056 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4f4c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4f50:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f54:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4f58:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4f5a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4f70 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4f5c:	|  |  |  |  |  |  |  |                             |  |  |   pea 1888d <PutChar+0xb7b>
    4f62:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17248 <KPrintF>
    4f68:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4f6a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f6c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5730 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f70:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4f72:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4f76:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4f78:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4f7c:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4f80:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4f82:	|  |  |  |  |  |  |  |                             |  |      jsr 147e8 <getValueType>
    4f88:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4f8c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4f8e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4f96 <continueFunction+0x710>
    4f90:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f92:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5730 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4f96:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4f9a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f9e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4fa2:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4fa4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4fa8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4faa:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4fae:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4fb2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4fb6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4fb8:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4fba:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4fbc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fbe:	|  |  |  |  |  |  |  |                             |  |      jsr 6aa6 <stackSetByIndex>
    4fc4:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4fc8:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4fca:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fd2 <continueFunction+0x74c>
						return FALSE;
    4fcc:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4fce:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5730 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4fd2:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4fd4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fd8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fda:	|  |  |  |  |  |  |  |                             |  |      jsr 1516c <trimStack>
    4fe0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4fe2:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4fe4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fe8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fea:	|  |  |  |  |  |  |  |                             |  |      jsr 1516c <trimStack>
    4ff0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4ff2:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4ff4:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 570e <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4ff8:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4ffa:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4ffe:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5000:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5004:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5008:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    500a:	|  |  |  |  |  |  |  |                             |         jsr 147e8 <getValueType>
    5010:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5014:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5016:	|  |  |  |  |  |  |  |                             |     /-- bne.s 501e <continueFunction+0x798>
    5018:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    501a:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5730 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    501e:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    5022:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5024:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5028:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    502c:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5030:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5032:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5034:	|  |  |  |  |  |  |  |                             |         jsr 14472 <fastArrayGetByIndex>
    503a:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    503c:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5040:	|  |  |  |  |  |  |  |                             |     /-- bne.s 5050 <continueFunction+0x7ca>
    5042:	|  |  |  |  |  |  |  |                             |     |   pea 188cf <PutChar+0xbbd>
    5048:	|  |  |  |  |  |  |  |                             |     |   jsr 17248 <KPrintF>
    504e:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5050:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    5052:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5730 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5056:	|  |  |  |  |  |  |  |                             \-------> pea 188ab <PutChar+0xb99>
    505c:	|  |  |  |  |  |  |  |                                       jsr 17248 <KPrintF>
    5062:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5064:	|  |  |  |  |  |  |  |                                       clr.w d0
    5066:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5730 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    506a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    506e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5072:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5076:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5078:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    507a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    507c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5080:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5084:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5086:	|  |  |  |  |  |  |  |                                       jsr 147e8 <getValueType>
    508c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5090:	|  |  |  |  |  |  |  |                                       tst.w d0
    5092:	|  |  |  |  |  |  |  |                                   /-- bne.s 509a <continueFunction+0x814>
    5094:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5096:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5730 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    509a:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    509e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    50a0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    50a4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50a6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50aa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50ac:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    50b2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    50b6:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    50ba:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    50bc:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    50be:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50c2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    50c6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50ca:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50cc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    50ce:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50d0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50d4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50d6:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    50dc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    50e0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    50e4:	|  |  |  |  |  |  |  |                                       move.l 1c96c <globalVars>,d1
    50ea:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50ee:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50f0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50f4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50f8:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    50fc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    50fe:	|  |  |  |  |  |  |  |                                       jsr 147e8 <getValueType>
    5104:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5108:	|  |  |  |  |  |  |  |                                       tst.w d0
    510a:	|  |  |  |  |  |  |  |                                   /-- bne.s 5112 <continueFunction+0x88c>
    510c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    510e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5730 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5112:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5116:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5118:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    511c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    511e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5122:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5124:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    512a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    512e:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5132:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5134:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5136:	|  |  |  |  |  |  |  |                                       movea.l 1c96c <globalVars>,a0
    513c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5140:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5142:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5144:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5146:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    514a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    514c:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    5152:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5156:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    515a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    515e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5162:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5166:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5168:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    516a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    516c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5170:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5174:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5176:	|  |  |  |  |  |  |  |                                       jsr 147e8 <getValueType>
    517c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5180:	|  |  |  |  |  |  |  |                                       tst.w d0
    5182:	|  |  |  |  |  |  |  |                                   /-- bne.s 518a <continueFunction+0x904>
    5184:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5186:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5730 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    518a:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    518e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5190:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5194:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5196:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    519a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    519c:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    51a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    51a6:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    51aa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51ac:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    51ae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51b2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    51b6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51ba:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51bc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51be:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51c0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51c4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51c6:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    51cc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51d0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    51d4:	|  |  |  |  |  |  |  |                                       move.l 1c96c <globalVars>,d1
    51da:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51de:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51e0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    51e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51e8:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    51ec:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51ee:	|  |  |  |  |  |  |  |                                       jsr 147e8 <getValueType>
    51f4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51f8:	|  |  |  |  |  |  |  |                                       tst.w d0
    51fa:	|  |  |  |  |  |  |  |                                   /-- bne.s 5202 <continueFunction+0x97c>
    51fc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51fe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5730 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5202:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5206:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5208:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    520c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    520e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5212:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5214:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    521a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    521e:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5222:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5224:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5226:	|  |  |  |  |  |  |  |                                       movea.l 1c96c <globalVars>,a0
    522c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5230:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5232:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5234:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5236:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    523a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    523c:	|  |  |  |  |  |  |  |                                       jsr 150da <setVariable>
    5242:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5246:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    524a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    524e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5252:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5256:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5258:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    525a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    525c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5260:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5262:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5264:	|  |  |  |  |  |  |  |                                       jsr 14ca2 <copyVariable>
    526a:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    526c:	|  |  |  |  |  |  |  |                                       tst.w d0
    526e:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 56f8 <continueFunction+0xe72>
    5272:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5274:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5278:	|  |  |  |  |  |  |  |  |                                    move.l 1c96c <globalVars>,d1
    527e:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5282:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5284:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5286:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5288:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    528c:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    528e:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5290:	|  |  |  |  |  |  |  |  |                                    jsr 14ca2 <copyVariable>
    5296:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5298:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    529a:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 56fc <continueFunction+0xe76>
    529e:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    52a0:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    52a4:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    52a6:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    52aa:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c96c <globalVars>,a0
    52b0:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    52b4:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    52b6:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    52b8:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    52ba:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    52bc:	|  |  |  |  |  |  |  |  |  |                                 jsr 14ca2 <copyVariable>
    52c2:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    52c4:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    52c6:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 5700 <continueFunction+0xe7a>
    52ca:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    52cc:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    52d0:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    52d2:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    52d6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    52d8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    52dc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    52de:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    52e0:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14024 <addVarToStack>
    52e6:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    52e8:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    52ea:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5704 <continueFunction+0xe7e>
    52ee:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    52f0:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    52f4:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    52f6:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    52fc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5300:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5302:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5304:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 140aa <addVarToStackQuick>
    530a:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    530c:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    530e:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5708 <continueFunction+0xe82>
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5314:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5730 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    531a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    531e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5320:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d28 <getBoolean>
    5326:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    532a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    532c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    532e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    533a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150da <setVariable>
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    534a:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    534e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5350:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5354:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5356:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d28 <getBoolean>
    535c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 570c <continueFunction+0xe86>
				advanceNow = FALSE;
    5364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5372:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 570c <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    537a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    537e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5384:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 570e <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    538a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    539a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 147e8 <getValueType>
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    53a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 53ae <continueFunction+0xb28>
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    53aa:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5730 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    53b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    53b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 150da <setVariable>
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    53ce:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 570e <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    53da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 56c4 <continueFunction+0xe3e>
    53de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    53e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    53e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 5460 <continueFunction+0xbda>
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 54aa <continueFunction+0xc24>
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5404 <continueFunction+0xb7e>
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    53fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5432 <continueFunction+0xbac>
    5400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 54aa <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1411e <addVariablesInSecond>
    541c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1516c <trimStack>
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    542e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 56d8 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 141dc <compareVariablesInSecond>
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1516c <trimStack>
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 56d8 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    546a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 141dc <compareVariablesInSecond>
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    547a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1516c <trimStack>
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    548e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 56d8 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    54bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147e8 <getValueType>
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 54d2 <continueFunction+0xc4c>
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    54ce:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5730 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    54d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147e8 <getValueType>
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 54f8 <continueFunction+0xc72>
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    54f4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5730 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    54f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1516c <trimStack>
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    550e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 56d6 <continueFunction+0xe50>
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21798,a0
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5526 <continueFunction+0xca0>,pc,d0.w)
    5526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    552a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    554e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    555a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17bfc <__mulsi3>
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56d8 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    558c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    559a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    55a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56d8 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    55ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17ca8 <__modsi3>
    55c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    55d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56d8 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    55e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c7a <__divsi3>
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56d8 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    561a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    561c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    562c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    563c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56d8 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    564c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    564e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    5666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    566a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56d8 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    566c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    567a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    567e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    5692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56d8 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    569c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    56a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <setVariable>
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56d8 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    56c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 188f0 <PutChar+0xbde>
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17248 <KPrintF>
    56d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    56d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    56d4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5730 <continueFunction+0xeaa>
						break;
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    56d8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 570e <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    56da:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 18908 <PutChar+0xbf6>
    56e0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17248 <KPrintF>
    56e6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    56e8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    56ea:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5730 <continueFunction+0xeaa>
			break;
    56ec:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    56ee:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    56f0:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    56f2:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    56f4:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    56f6:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    56f8:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    56fa:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    56fc:	|  |  |     |              \--|--|--|--|-------------------> nop
    56fe:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    5700:	|  |  |     |                 \--|--|--|-------------------> nop
    5702:	|  |  |     +--------------------|--|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    5704:	|  |  |     |                    \--|--|-------------------> nop
    5706:	|  |  |     +-----------------------|--|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    5708:	|  |  |     |                       \--|-------------------> nop
    570a:	|  |  |     +--------------------------|-------------------- bra.s 570e <continueFunction+0xe88>
			break;
    570c:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    570e:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5712:	+--|--|----------------------------------------------------- beq.s 5726 <continueFunction+0xea0>
    5714:	|  |  |                                                      movea.l 80(sp),a0
    5718:	|  |  |                                                      move.l 36(a0),d0
    571c:	|  |  |                                                      addq.l #1,d0
    571e:	|  |  |                                                      movea.l 80(sp),a0
    5722:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5726:	\--|--|----------------------------------------------------> tst.w 74(sp)
    572a:	   |  \----------------------------------------------------- bne.w 48ae <continueFunction+0x28>

	}
	return TRUE;
    572e:	   |                                                         moveq #1,d0
}
    5730:	   \-------------------------------------------------------> lea 76(sp),sp
    5734:	                                                             rts

00005736 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5736:	          lea -16(sp),sp
    573a:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    573c:	          move.l 24(sp),-(sp)
    5740:	          jsr 685c <pauseFunction>
    5746:	          addq.l #4,sp
	if (fun -> stack) 
    5748:	          movea.l 24(sp),a0
    574c:	          move.l 24(a0),d0
    5750:	      /-- beq.s 5764 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5752:	      |   pea 18934 <PutChar+0xc22>
    5758:	      |   jsr 17248 <KPrintF>
    575e:	      |   addq.l #4,sp
		return;
    5760:	/-----|-- bra.w 57fe <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5764:	|     \-> movea.l 24(sp),a0
    5768:	|         move.l 4(a0),12(sp)
    576e:	|         move.l 1c9be <SysBase>,d0
    5774:	|         movea.l d0,a6
    5776:	|         movea.l 12(sp),a1
    577a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    577e:	|         clr.l 16(sp)
    5782:	|     /-- bra.s 57a2 <finishFunction+0x6c>
    5784:	|  /--|-> movea.l 24(sp),a0
    5788:	|  |  |   move.l 20(a0),d1
    578c:	|  |  |   move.l 16(sp),d0
    5790:	|  |  |   lsl.l #3,d0
    5792:	|  |  |   add.l d1,d0
    5794:	|  |  |   move.l d0,-(sp)
    5796:	|  |  |   jsr 14a36 <unlinkVar>
    579c:	|  |  |   addq.l #4,sp
    579e:	|  |  |   addq.l #1,16(sp)
    57a2:	|  |  \-> movea.l 24(sp),a0
    57a6:	|  |      move.l 8(a0),d0
    57aa:	|  |      cmp.l 16(sp),d0
    57ae:	|  \----- bgt.s 5784 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    57b0:	|         movea.l 24(sp),a0
    57b4:	|         move.l 8(a0),d0
    57b8:	|     /-- ble.s 57d4 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    57ba:	|     |   movea.l 24(sp),a0
    57be:	|     |   move.l 20(a0),8(sp)
    57c4:	|     |   move.l 1c9be <SysBase>,d0
    57ca:	|     |   movea.l d0,a6
    57cc:	|     |   movea.l 8(sp),a1
    57d0:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    57d4:	|     \-> moveq #28,d0
    57d6:	|         add.l 24(sp),d0
    57da:	|         move.l d0,-(sp)
    57dc:	|         jsr 14a36 <unlinkVar>
    57e2:	|         addq.l #4,sp
	FreeVec(fun);
    57e4:	|         move.l 24(sp),4(sp)
    57ea:	|         move.l 1c9be <SysBase>,d0
    57f0:	|         movea.l d0,a6
    57f2:	|         movea.l 4(sp),a1
    57f6:	|         jsr -690(a6)
	fun = NULL;
    57fa:	|         clr.l 24(sp)
}
    57fe:	\-------> movea.l (sp)+,a6
    5800:	          lea 16(sp),sp
    5804:	          rts

00005806 <freezeSubs>:

void freezeSubs () {
    5806:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5808:	          move.l 1c956 <allRunningFunctions>,(sp)

	while (thisFunction) {
    580e:	   /----- bra.s 582c <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    5810:	/--|----> movea.l (sp),a0
    5812:	|  |      move.w 52(a0),d0
    5816:	|  |  /-- bne.s 5826 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5818:	|  |  |   movea.l (sp),a0
    581a:	|  |  |   move.b 56(a0),d0
    581e:	|  |  |   addq.b #1,d0
    5820:	|  |  |   movea.l (sp),a0
    5822:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5826:	|  |  \-> movea.l (sp),a0
    5828:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    582c:	|  \----> tst.l (sp)
    582e:	\-------- bne.s 5810 <freezeSubs+0xa>
	}
}
    5830:	          nop
    5832:	          nop
    5834:	          addq.l #4,sp
    5836:	          rts

00005838 <handleInput>:

BOOL handleInput () {
    5838:	             lea -16(sp),sp
    583c:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    583e:	             move.l 1cad2 <overRegion>,d0
    5844:	         /-- bne.s 584c <handleInput+0x14>
    5846:	         |   jsr 159a4 <getOverRegion>

	if (input.justMoved) {
    584c:	         \-> move.w 1c974 <input+0x4>,d0
    5852:	         /-- beq.s 5890 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5854:	         |   movea.l 1c336 <currentEvents>,a0
    585a:	         |   move.l 16(a0),d0
    585e:	         +-- beq.s 5890 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5860:	         |   move.l 1c98e <noStack>,d1
    5866:	         |   movea.l 1c336 <currentEvents>,a0
    586c:	         |   move.l 16(a0),d0
    5870:	         |   pea 1 <_start+0x1>
    5874:	         |   move.l d1,-(sp)
    5876:	         |   clr.l -(sp)
    5878:	         |   clr.l -(sp)
    587a:	         |   move.l d0,-(sp)
    587c:	         |   jsr 6aea <startNewFunctionNum>
    5882:	         |   lea 20(sp),sp
    5886:	         |   tst.l d0
    5888:	         +-- bne.s 5890 <handleInput+0x58>
    588a:	         |   clr.w d0
    588c:	/--------|-- bra.w 5a96 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5890:	|        \-> clr.w 1c974 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5896:	|            move.l 1c986 <lastRegion>,d1
    589c:	|            move.l 1cad2 <overRegion>,d0
    58a2:	|            cmp.l d1,d0
    58a4:	|  /-------- beq.w 597c <handleInput+0x144>
    58a8:	|  |         movea.l 1c336 <currentEvents>,a0
    58ae:	|  |         move.l 20(a0),d0
    58b2:	|  +-------- beq.w 597c <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    58b6:	|  |         moveq #12,d0
    58b8:	|  |         move.l d0,16(sp)
    58bc:	|  |         clr.l 12(sp)
    58c0:	|  |         move.l 1c9be <SysBase>,d0
    58c6:	|  |         movea.l d0,a6
    58c8:	|  |         move.l 16(sp),d0
    58cc:	|  |         move.l 12(sp),d1
    58d0:	|  |         jsr -684(a6)
    58d4:	|  |         move.l d0,8(sp)
    58d8:	|  |         move.l 8(sp),d0
    58dc:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    58e0:	|  |         move.l 4(sp),d0
    58e4:	|  |     /-- bne.s 58fa <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    58e6:	|  |     |   pea 1895a <PutChar+0xc48>
    58ec:	|  |     |   jsr 17248 <KPrintF>
    58f2:	|  |     |   addq.l #4,sp
			return FALSE;
    58f4:	|  |     |   clr.w d0
    58f6:	+--|-----|-- bra.w 5a96 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    58fa:	|  |     \-> movea.l 4(sp),a0
    58fe:	|  |         clr.l (a0)
		if (overRegion) {
    5900:	|  |         move.l 1cad2 <overRegion>,d0
    5906:	|  |  /----- beq.s 592e <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5908:	|  |  |      movea.l 1cad2 <overRegion>,a0
    590e:	|  |  |      movea.l 28(a0),a0
    5912:	|  |  |      move.l 4(a0),d1
    5916:	|  |  |      move.l 4(sp),d0
    591a:	|  |  |      move.l d1,-(sp)
    591c:	|  |  |      pea 7 <_start+0x7>
    5920:	|  |  |      move.l d0,-(sp)
    5922:	|  |  |      jsr 150da <setVariable>
    5928:	|  |  |      lea 12(sp),sp
    592c:	|  |  |  /-- bra.s 5944 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    592e:	|  |  \--|-> move.l 4(sp),d0
    5932:	|  |     |   clr.l -(sp)
    5934:	|  |     |   pea 1 <_start+0x1>
    5938:	|  |     |   move.l d0,-(sp)
    593a:	|  |     |   jsr 150da <setVariable>
    5940:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5944:	|  |     \-> movea.l 4(sp),a0
    5948:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    594c:	|  |         movea.l 1c336 <currentEvents>,a0
    5952:	|  |         move.l 20(a0),d0
    5956:	|  |         pea 1 <_start+0x1>
    595a:	|  |         lea 8(sp),a0
    595e:	|  |         move.l a0,-(sp)
    5960:	|  |         clr.l -(sp)
    5962:	|  |         pea 1 <_start+0x1>
    5966:	|  |         move.l d0,-(sp)
    5968:	|  |         jsr 6aea <startNewFunctionNum>
    596e:	|  |         lea 20(sp),sp
    5972:	|  |         tst.l d0
    5974:	|  +-------- bne.s 597c <handleInput+0x144>
    5976:	|  |         clr.w d0
    5978:	+--|-------- bra.w 5a96 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    597c:	|  \-------> move.w 1c976 <input+0x6>,d0
    5982:	|        /-- beq.s 59c0 <handleInput+0x188>
    5984:	|        |   movea.l 1c336 <currentEvents>,a0
    598a:	|        |   move.l 4(a0),d0
    598e:	|        +-- beq.s 59c0 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5990:	|        |   move.l 1c98e <noStack>,d1
    5996:	|        |   movea.l 1c336 <currentEvents>,a0
    599c:	|        |   move.l 4(a0),d0
    59a0:	|        |   pea 1 <_start+0x1>
    59a4:	|        |   move.l d1,-(sp)
    59a6:	|        |   clr.l -(sp)
    59a8:	|        |   clr.l -(sp)
    59aa:	|        |   move.l d0,-(sp)
    59ac:	|        |   jsr 6aea <startNewFunctionNum>
    59b2:	|        |   lea 20(sp),sp
    59b6:	|        |   tst.l d0
    59b8:	|        +-- bne.s 59c0 <handleInput+0x188>
    59ba:	|        |   clr.w d0
    59bc:	+--------|-- bra.w 5a96 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    59c0:	|        \-> move.w 1c978 <input+0x8>,d0
    59c6:	|        /-- beq.s 5a04 <handleInput+0x1cc>
    59c8:	|        |   movea.l 1c336 <currentEvents>,a0
    59ce:	|        |   move.l 12(a0),d0
    59d2:	|        +-- beq.s 5a04 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    59d4:	|        |   move.l 1c98e <noStack>,d1
    59da:	|        |   movea.l 1c336 <currentEvents>,a0
    59e0:	|        |   move.l 12(a0),d0
    59e4:	|        |   pea 1 <_start+0x1>
    59e8:	|        |   move.l d1,-(sp)
    59ea:	|        |   clr.l -(sp)
    59ec:	|        |   clr.l -(sp)
    59ee:	|        |   move.l d0,-(sp)
    59f0:	|        |   jsr 6aea <startNewFunctionNum>
    59f6:	|        |   lea 20(sp),sp
    59fa:	|        |   tst.l d0
    59fc:	|        +-- bne.s 5a04 <handleInput+0x1cc>
    59fe:	|        |   clr.w d0
    5a00:	+--------|-- bra.w 5a96 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5a04:	|        \-> move.w 1c970 <input>,d0
    5a0a:	|        /-- beq.s 5a42 <handleInput+0x20a>
    5a0c:	|        |   movea.l 1c336 <currentEvents>,a0
    5a12:	|        |   move.l (a0),d0
    5a14:	|        +-- beq.s 5a42 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a16:	|        |   move.l 1c98e <noStack>,d1
    5a1c:	|        |   movea.l 1c336 <currentEvents>,a0
    5a22:	|        |   move.l (a0),d0
    5a24:	|        |   pea 1 <_start+0x1>
    5a28:	|        |   move.l d1,-(sp)
    5a2a:	|        |   clr.l -(sp)
    5a2c:	|        |   clr.l -(sp)
    5a2e:	|        |   move.l d0,-(sp)
    5a30:	|        |   jsr 6aea <startNewFunctionNum>
    5a36:	|        |   lea 20(sp),sp
    5a3a:	|        |   tst.l d0
    5a3c:	|        +-- bne.s 5a42 <handleInput+0x20a>
    5a3e:	|        |   clr.w d0
    5a40:	+--------|-- bra.s 5a96 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5a42:	|        \-> move.w 1c972 <input+0x2>,d0
    5a48:	|        /-- beq.s 5a84 <handleInput+0x24c>
    5a4a:	|        |   movea.l 1c336 <currentEvents>,a0
    5a50:	|        |   move.l 8(a0),d0
    5a54:	|        +-- beq.s 5a84 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a56:	|        |   move.l 1c98e <noStack>,d1
    5a5c:	|        |   movea.l 1c336 <currentEvents>,a0
    5a62:	|        |   move.l 8(a0),d0
    5a66:	|        |   pea 1 <_start+0x1>
    5a6a:	|        |   move.l d1,-(sp)
    5a6c:	|        |   clr.l -(sp)
    5a6e:	|        |   clr.l -(sp)
    5a70:	|        |   move.l d0,-(sp)
    5a72:	|        |   jsr 6aea <startNewFunctionNum>
    5a78:	|        |   lea 20(sp),sp
    5a7c:	|        |   tst.l d0
    5a7e:	|        +-- bne.s 5a84 <handleInput+0x24c>
    5a80:	|        |   clr.w d0
    5a82:	+--------|-- bra.s 5a96 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5a84:	|        \-> move.l 1cad2 <overRegion>,d0
    5a8a:	|            move.l d0,1c986 <lastRegion>
	return runSludge ();
    5a90:	|            jsr 68b8 <runSludge>
}
    5a96:	\----------> movea.l (sp)+,a6
    5a98:	             lea 16(sp),sp
    5a9c:	             rts

00005a9e <initSludge>:

BOOL initSludge (char * filename) {
    5a9e:	             lea -292(sp),sp
    5aa2:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5aa6:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5aaa:	             jsr ad1e <makeNullAnim>
    5ab0:	             move.l d0,1c8c4 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5ab6:	             pea 1c968 <gameVersion>
    5abc:	             pea 18990 <PutChar+0xc7e>
    5ac2:	             pea 45 <_start+0x45>
    5ac6:	             pea 47 <_start+0x47>
    5aca:	             move.l 332(sp),-(sp)
    5ace:	             jsr 64ec <openAndVerify>
    5ad4:	             lea 20(sp),sp
    5ad8:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5adc:	         /-- bne.s 5ae4 <initSludge+0x46>
    5ade:	         |   clr.w d0
    5ae0:	/--------|-- bra.w 620c <initSludge+0x76e>
	if (FGetC (fp)) {
    5ae4:	|        \-> move.l 288(sp),284(sp)
    5aea:	|            move.l 1c9c6 <DOSBase>,d0
    5af0:	|            movea.l d0,a6
    5af2:	|            move.l 284(sp),d1
    5af6:	|            jsr -306(a6)
    5afa:	|            move.l d0,280(sp)
    5afe:	|            move.l 280(sp),d0
    5b02:	|  /-------- beq.w 5cac <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5b06:	|  |         move.l 288(sp),-(sp)
    5b0a:	|  |         jsr 6bc <get2bytes>
    5b10:	|  |         addq.l #4,sp
    5b12:	|  |         move.l d0,1c992 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5b18:	|  |         move.l 1c992 <numBIFNames>,d0
    5b1e:	|  |         move.l d0,276(sp)
    5b22:	|  |         clr.l 272(sp)
    5b26:	|  |         move.l 1c9be <SysBase>,d0
    5b2c:	|  |         movea.l d0,a6
    5b2e:	|  |         move.l 276(sp),d0
    5b32:	|  |         move.l 272(sp),d1
    5b36:	|  |         jsr -684(a6)
    5b3a:	|  |         move.l d0,268(sp)
    5b3e:	|  |         move.l 268(sp),d0
    5b42:	|  |         move.l d0,1c94e <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5b48:	|  |         move.l 1c94e <allBIFNames>,d0
    5b4e:	|  |     /-- bne.s 5b56 <initSludge+0xb8>
    5b50:	|  |     |   clr.w d0
    5b52:	+--|-----|-- bra.w 620c <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b56:	|  |     \-> clr.l 304(sp)
    5b5a:	|  |     /-- bra.s 5b80 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5b5c:	|  |  /--|-> move.l 1c94e <allBIFNames>,d1
    5b62:	|  |  |  |   move.l 304(sp),d0
    5b66:	|  |  |  |   add.l d0,d0
    5b68:	|  |  |  |   add.l d0,d0
    5b6a:	|  |  |  |   movea.l d1,a2
    5b6c:	|  |  |  |   adda.l d0,a2
    5b6e:	|  |  |  |   move.l 288(sp),-(sp)
    5b72:	|  |  |  |   jsr b02 <readString>
    5b78:	|  |  |  |   addq.l #4,sp
    5b7a:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b7c:	|  |  |  |   addq.l #1,304(sp)
    5b80:	|  |  |  \-> move.l 1c992 <numBIFNames>,d0
    5b86:	|  |  |      cmp.l 304(sp),d0
    5b8a:	|  |  \----- bgt.s 5b5c <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5b8c:	|  |         move.l 288(sp),-(sp)
    5b90:	|  |         jsr 6bc <get2bytes>
    5b96:	|  |         addq.l #4,sp
    5b98:	|  |         move.l d0,1c99e <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5b9e:	|  |         move.l 1c99e <numUserFunc>,d0
    5ba4:	|  |         move.l d0,264(sp)
    5ba8:	|  |         clr.l 260(sp)
    5bac:	|  |         move.l 1c9be <SysBase>,d0
    5bb2:	|  |         movea.l d0,a6
    5bb4:	|  |         move.l 264(sp),d0
    5bb8:	|  |         move.l 260(sp),d1
    5bbc:	|  |         jsr -684(a6)
    5bc0:	|  |         move.l d0,256(sp)
    5bc4:	|  |         move.l 256(sp),d0
    5bc8:	|  |         move.l d0,1c95a <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5bce:	|  |         move.l 1c95a <allUserFunc>,d0
    5bd4:	|  |     /-- bne.s 5bdc <initSludge+0x13e>
    5bd6:	|  |     |   clr.w d0
    5bd8:	+--|-----|-- bra.w 620c <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5bdc:	|  |     \-> clr.l 300(sp)
    5be0:	|  |     /-- bra.s 5c06 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5be2:	|  |  /--|-> move.l 1c95a <allUserFunc>,d1
    5be8:	|  |  |  |   move.l 300(sp),d0
    5bec:	|  |  |  |   add.l d0,d0
    5bee:	|  |  |  |   add.l d0,d0
    5bf0:	|  |  |  |   movea.l d1,a2
    5bf2:	|  |  |  |   adda.l d0,a2
    5bf4:	|  |  |  |   move.l 288(sp),-(sp)
    5bf8:	|  |  |  |   jsr b02 <readString>
    5bfe:	|  |  |  |   addq.l #4,sp
    5c00:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c02:	|  |  |  |   addq.l #1,300(sp)
    5c06:	|  |  |  \-> move.l 1c99e <numUserFunc>,d0
    5c0c:	|  |  |      cmp.l 300(sp),d0
    5c10:	|  |  \----- bgt.s 5be2 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5c12:	|  |         move.l 1c968 <gameVersion>,d0
    5c18:	|  |         cmpi.l #258,d0
    5c1e:	|  +-------- ble.w 5cac <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5c22:	|  |         move.l 288(sp),-(sp)
    5c26:	|  |         jsr 6bc <get2bytes>
    5c2c:	|  |         addq.l #4,sp
    5c2e:	|  |         move.l d0,1c99a <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5c34:	|  |         move.l 1c99a <numResourceNames>,d0
    5c3a:	|  |         add.l d0,d0
    5c3c:	|  |         add.l d0,d0
    5c3e:	|  |         move.l d0,252(sp)
    5c42:	|  |         clr.l 248(sp)
    5c46:	|  |         move.l 1c9be <SysBase>,d0
    5c4c:	|  |         movea.l d0,a6
    5c4e:	|  |         move.l 252(sp),d0
    5c52:	|  |         move.l 248(sp),d1
    5c56:	|  |         jsr -684(a6)
    5c5a:	|  |         move.l d0,244(sp)
    5c5e:	|  |         move.l 244(sp),d0
    5c62:	|  |         move.l d0,1c952 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5c68:	|  |         move.l 1c952 <allResourceNames>,d0
    5c6e:	|  |     /-- bne.s 5c76 <initSludge+0x1d8>
    5c70:	|  |     |   clr.w d0
    5c72:	+--|-----|-- bra.w 620c <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5c76:	|  |     \-> clr.l 296(sp)
    5c7a:	|  |     /-- bra.s 5ca0 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5c7c:	|  |  /--|-> move.l 1c952 <allResourceNames>,d1
    5c82:	|  |  |  |   move.l 296(sp),d0
    5c86:	|  |  |  |   add.l d0,d0
    5c88:	|  |  |  |   add.l d0,d0
    5c8a:	|  |  |  |   movea.l d1,a2
    5c8c:	|  |  |  |   adda.l d0,a2
    5c8e:	|  |  |  |   move.l 288(sp),-(sp)
    5c92:	|  |  |  |   jsr b02 <readString>
    5c98:	|  |  |  |   addq.l #4,sp
    5c9a:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5c9c:	|  |  |  |   addq.l #1,296(sp)
    5ca0:	|  |  |  \-> move.l 1c99a <numResourceNames>,d0
    5ca6:	|  |  |      cmp.l 296(sp),d0
    5caa:	|  |  \----- bgt.s 5c7c <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5cac:	|  \-------> move.l #129,1c97a <input+0xa>
	input.mouseY = 100;
    5cb6:	|            moveq #100,d0
    5cb8:	|            move.l d0,1c97e <input+0xe>
	winWidth = get2bytes (fp);
    5cbe:	|            move.l 288(sp),-(sp)
    5cc2:	|            jsr 6bc <get2bytes>
    5cc8:	|            addq.l #4,sp
    5cca:	|            move.l d0,1c912 <winWidth>
	winHeight = get2bytes (fp);
    5cd0:	|            move.l 288(sp),-(sp)
    5cd4:	|            jsr 6bc <get2bytes>
    5cda:	|            addq.l #4,sp
    5cdc:	|            move.l d0,1c916 <winHeight>
	specialSettings = FGetC (fp);
    5ce2:	|            move.l 288(sp),240(sp)
    5ce8:	|            move.l 1c9c6 <DOSBase>,d0
    5cee:	|            movea.l d0,a6
    5cf0:	|            move.l 240(sp),d1
    5cf4:	|            jsr -306(a6)
    5cf8:	|            move.l d0,236(sp)
    5cfc:	|            move.l 236(sp),d0
    5d00:	|            move.l d0,1c9a2 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5d06:	|            move.l 288(sp),232(sp)
    5d0c:	|            move.l 1c9c6 <DOSBase>,d0
    5d12:	|            movea.l d0,a6
    5d14:	|            move.l 232(sp),d1
    5d18:	|            jsr -306(a6)
    5d1c:	|            move.l d0,228(sp)
    5d20:	|            move.l 228(sp),d0
    5d24:	|            move.l d0,-(sp)
    5d26:	|            pea 3e8 <encodeFilename+0xea>
    5d2a:	|            jsr 17c7a <__divsi3>
    5d30:	|            addq.l #8,sp
    5d32:	|            move.l d0,1c34c <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5d38:	|            move.l 288(sp),-(sp)
    5d3c:	|            jsr b02 <readString>
    5d42:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5d44:	|            move.l 288(sp),224(sp)
    5d4a:	|            move.l #117088,220(sp)
    5d52:	|            moveq #8,d1
    5d54:	|            move.l d1,216(sp)
    5d58:	|            moveq #1,d0
    5d5a:	|            move.l d0,212(sp)
    5d5e:	|            move.l 1c9c6 <DOSBase>,d0
    5d64:	|            movea.l d0,a6
    5d66:	|            move.l 224(sp),d1
    5d6a:	|            move.l 220(sp),d2
    5d6e:	|            move.l 216(sp),d3
    5d72:	|            move.l 212(sp),d4
    5d76:	|            jsr -324(a6)
    5d7a:	|            move.l d0,208(sp)
    5d7e:	|            move.l 208(sp),d0
    5d82:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5d86:	|            moveq #1,d1
    5d88:	|            cmp.l 204(sp),d1
    5d8c:	|        /-- beq.s 5d9c <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5d8e:	|        |   pea 189c9 <PutChar+0xcb7>
    5d94:	|        |   jsr 17248 <KPrintF>
    5d9a:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5d9c:	|        \-> move.l 1c968 <gameVersion>,d0
    5da2:	|            cmpi.l #258,d0
    5da8:	|        /-- ble.s 5db8 <initSludge+0x31a>
    5daa:	|        |   move.l 288(sp),-(sp)
    5dae:	|        |   jsr b02 <readString>
    5db4:	|        |   addq.l #4,sp
    5db6:	|     /--|-- bra.s 5dcc <initSludge+0x32e>
    5db8:	|     |  \-> pea 189e7 <PutChar+0xcd5>
    5dbe:	|     |      pea 189e7 <PutChar+0xcd5>
    5dc4:	|     |      jsr 13d14 <joinStrings>
    5dca:	|     |      addq.l #8,sp
    5dcc:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5dd0:	|            move.l 1c968 <gameVersion>,d0
    5dd6:	|            cmpi.l #258,d0
    5ddc:	|     /----- ble.s 5dfe <initSludge+0x360>
    5dde:	|     |      move.l 288(sp),196(sp)
    5de4:	|     |      move.l 1c9c6 <DOSBase>,d0
    5dea:	|     |      movea.l d0,a6
    5dec:	|     |      move.l 196(sp),d1
    5df0:	|     |      jsr -306(a6)
    5df4:	|     |      move.l d0,192(sp)
    5df8:	|     |      move.l 192(sp),d0
    5dfc:	|     |  /-- bra.s 5e00 <initSludge+0x362>
    5dfe:	|     \--|-> moveq #0,d0
    5e00:	|        \-> move.l d0,1ca9e <gameSettings+0x4>
	makeLanguageTable (fp);
    5e06:	|            move.l 288(sp),-(sp)
    5e0a:	|            jsr 136ca <makeLanguageTable>
    5e10:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5e12:	|            move.l 1c968 <gameVersion>,d0
    5e18:	|            cmpi.l #261,d0
    5e1e:	|        /-- ble.s 5e6c <initSludge+0x3ce>
	{
		FGetC(fp);
    5e20:	|        |   move.l 288(sp),188(sp)
    5e26:	|        |   move.l 1c9c6 <DOSBase>,d0
    5e2c:	|        |   movea.l d0,a6
    5e2e:	|        |   move.l 188(sp),d1
    5e32:	|        |   jsr -306(a6)
    5e36:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5e3a:	|        |   move.l 288(sp),180(sp)
    5e40:	|        |   move.l 1c9c6 <DOSBase>,d0
    5e46:	|        |   movea.l d0,a6
    5e48:	|        |   move.l 180(sp),d1
    5e4c:	|        |   jsr -306(a6)
    5e50:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5e54:	|        |   move.l 288(sp),-(sp)
    5e58:	|        |   jsr 7d8 <getFloat>
    5e5e:	|        |   addq.l #4,sp
		getFloat (fp);
    5e60:	|        |   move.l 288(sp),-(sp)
    5e64:	|        |   jsr 7d8 <getFloat>
    5e6a:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5e6c:	|        \-> move.l 288(sp),-(sp)
    5e70:	|            jsr b02 <readString>
    5e76:	|            addq.l #4,sp
    5e78:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5e7c:	|            pea 189e8 <PutChar+0xcd6>
    5e82:	|            move.l 176(sp),-(sp)
    5e86:	|            jsr 13c94 <strcmp>
    5e8c:	|            addq.l #8,sp
    5e8e:	|            tst.l d0
    5e90:	|        /-- beq.s 5e98 <initSludge+0x3fa>
		return FALSE;
    5e92:	|        |   clr.w d0
    5e94:	+--------|-- bra.w 620c <initSludge+0x76e>
	}
	FreeVec( checker);
    5e98:	|        \-> move.l 172(sp),168(sp)
    5e9e:	|            move.l 1c9be <SysBase>,d0
    5ea4:	|            movea.l d0,a6
    5ea6:	|            movea.l 168(sp),a1
    5eaa:	|            jsr -690(a6)
	checker = NULL;
    5eae:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5eb2:	|            move.l 288(sp),164(sp)
    5eb8:	|            move.l 1c9c6 <DOSBase>,d0
    5ebe:	|            movea.l d0,a6
    5ec0:	|            move.l 164(sp),d1
    5ec4:	|            jsr -306(a6)
    5ec8:	|            move.l d0,160(sp)
    5ecc:	|            move.l 160(sp),d0
    5ed0:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5ed4:	|            moveq #0,d0
    5ed6:	|            move.b 159(sp),d0
    5eda:	|            moveq #1,d1
    5edc:	|            and.l d1,d0
    5ede:	|        /-- beq.s 5f36 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5ee0:	|        |   move.l 1c9c6 <DOSBase>,d0
    5ee6:	|        |   movea.l d0,a6
    5ee8:	|        |   jsr -60(a6)
    5eec:	|        |   move.l d0,38(sp)
    5ef0:	|        |   move.l 38(sp),d0
    5ef4:	|        |   move.l d0,34(sp)
    5ef8:	|        |   move.l #100848,30(sp)
    5f00:	|        |   moveq #54,d0
    5f02:	|        |   move.l d0,26(sp)
    5f06:	|        |   move.l 1c9c6 <DOSBase>,d0
    5f0c:	|        |   movea.l d0,a6
    5f0e:	|        |   move.l 34(sp),d1
    5f12:	|        |   move.l 30(sp),d2
    5f16:	|        |   move.l 26(sp),d3
    5f1a:	|        |   jsr -48(a6)
    5f1e:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5f22:	|        |   pea 18a27 <PutChar+0xd15>
    5f28:	|        |   jsr 17248 <KPrintF>
    5f2e:	|        |   addq.l #4,sp
		return FALSE;
    5f30:	|        |   clr.w d0
    5f32:	+--------|-- bra.w 620c <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5f36:	|        \-> move.l 288(sp),-(sp)
    5f3a:	|            jsr 6bc <get2bytes>
    5f40:	|            addq.l #4,sp
    5f42:	|            move.l d0,1c996 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5f48:	|            move.l 1c996 <numGlobals>,d0
    5f4e:	|            lsl.l #3,d0
    5f50:	|            move.l d0,154(sp)
    5f54:	|            clr.l 150(sp)
    5f58:	|            move.l 1c9be <SysBase>,d0
    5f5e:	|            movea.l d0,a6
    5f60:	|            move.l 154(sp),d0
    5f64:	|            move.l 150(sp),d1
    5f68:	|            jsr -684(a6)
    5f6c:	|            move.l d0,146(sp)
    5f70:	|            move.l 146(sp),d0
    5f74:	|            move.l d0,1c96c <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5f7a:	|            move.l 1c96c <globalVars>,d0
    5f80:	|        /-- bne.s 5f9e <initSludge+0x500>
    5f82:	|        |   move.l 1c996 <numGlobals>,d0
    5f88:	|        +-- ble.s 5f9e <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5f8a:	|        |   pea 18a5f <PutChar+0xd4d>
    5f90:	|        |   jsr 17248 <KPrintF>
    5f96:	|        |   addq.l #4,sp
		return FALSE;
    5f98:	|        |   clr.w d0
    5f9a:	+--------|-- bra.w 620c <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5f9e:	|        \-> clr.l 308(sp)
    5fa2:	|        /-- bra.s 5fba <initSludge+0x51c>
    5fa4:	|     /--|-> move.l 1c96c <globalVars>,d1
    5faa:	|     |  |   move.l 308(sp),d0
    5fae:	|     |  |   lsl.l #3,d0
    5fb0:	|     |  |   movea.l d1,a0
    5fb2:	|     |  |   adda.l d0,a0
    5fb4:	|     |  |   clr.l (a0)
    5fb6:	|     |  |   addq.l #1,308(sp)
    5fba:	|     |  \-> move.l 1c996 <numGlobals>,d0
    5fc0:	|     |      cmp.l 308(sp),d0
    5fc4:	|     \----- bgt.s 5fa4 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5fc6:	|            move.l 1ca9e <gameSettings+0x4>,d0
    5fcc:	|            clr.l -(sp)
    5fce:	|            move.l d0,-(sp)
    5fd0:	|            move.l 296(sp),-(sp)
    5fd4:	|            jsr 6fda <setFileIndices>
    5fda:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5fde:	|            pea 1 <_start+0x1>
    5fe2:	|            jsr 6c94 <getNumberedString>
    5fe8:	|            addq.l #4,sp
    5fea:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5fee:	|            move.l 142(sp),-(sp)
    5ff2:	|            jsr 2fe <encodeFilename>
    5ff8:	|            addq.l #4,sp
    5ffa:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5ffe:	|            move.l 142(sp),134(sp)
    6004:	|            move.l 1c9be <SysBase>,d0
    600a:	|            movea.l d0,a6
    600c:	|            movea.l 134(sp),a1
    6010:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6014:	|            move.l 138(sp),130(sp)
    601a:	|            move.l 1c9c6 <DOSBase>,d0
    6020:	|            movea.l d0,a6
    6022:	|            move.l 130(sp),d1
    6026:	|            jsr -120(a6)
    602a:	|            move.l d0,126(sp)
    602e:	|            move.l 126(sp),d0
    6032:	|            move.l d0,292(sp)
	if(lock == 0) {
    6036:	|        /-- bne.s 6064 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6038:	|        |   move.l 138(sp),122(sp)
    603e:	|        |   moveq #-2,d1
    6040:	|        |   move.l d1,118(sp)
    6044:	|        |   move.l 1c9c6 <DOSBase>,d0
    604a:	|        |   movea.l d0,a6
    604c:	|        |   move.l 122(sp),d1
    6050:	|        |   move.l 118(sp),d2
    6054:	|        |   jsr -84(a6)
    6058:	|        |   move.l d0,114(sp)
    605c:	|        |   move.l 114(sp),d0
    6060:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6064:	|        \-> move.l 292(sp),110(sp)
    606a:	|            move.l 1c9c6 <DOSBase>,d0
    6070:	|            movea.l d0,a6
    6072:	|            move.l 110(sp),d1
    6076:	|            jsr -126(a6)
    607a:	|            move.l d0,106(sp)
    607e:	|            move.l 106(sp),d0
    6082:	|        /-- bne.s 60de <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6084:	|        |   move.l 138(sp),-(sp)
    6088:	|        |   pea 18a92 <PutChar+0xd80>
    608e:	|        |   jsr 17248 <KPrintF>
    6094:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6096:	|        |   move.l 1c9c6 <DOSBase>,d0
    609c:	|        |   movea.l d0,a6
    609e:	|        |   jsr -60(a6)
    60a2:	|        |   move.l d0,58(sp)
    60a6:	|        |   move.l 58(sp),d0
    60aa:	|        |   move.l d0,54(sp)
    60ae:	|        |   move.l #101055,50(sp)
    60b6:	|        |   moveq #40,d0
    60b8:	|        |   move.l d0,46(sp)
    60bc:	|        |   move.l 1c9c6 <DOSBase>,d0
    60c2:	|        |   movea.l d0,a6
    60c4:	|        |   move.l 54(sp),d1
    60c8:	|        |   move.l 50(sp),d2
    60cc:	|        |   move.l 46(sp),d3
    60d0:	|        |   jsr -48(a6)
    60d4:	|        |   move.l d0,42(sp)
		return FALSE;
    60d8:	|        |   clr.w d0
    60da:	+--------|-- bra.w 620c <initSludge+0x76e>
	}

	FreeVec(gameName);
    60de:	|        \-> move.l 138(sp),102(sp)
    60e4:	|            move.l 1c9be <SysBase>,d0
    60ea:	|            movea.l d0,a6
    60ec:	|            movea.l 102(sp),a1
    60f0:	|            jsr -690(a6)

	readIniFile (filename);
    60f4:	|            move.l 316(sp),-(sp)
    60f8:	|            jsr 137fe <readIniFile>
    60fe:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6100:	|            jsr 135d0 <getLanguageForFileB>
    6106:	|            move.l d0,1c33a <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    610c:	|            move.l 1c33a <languageNum>,d0
    6112:	|        /-- bpl.s 6122 <initSludge+0x684>
    6114:	|        |   pea 18ae8 <PutChar+0xdd6>
    611a:	|        |   jsr 17248 <KPrintF>
    6120:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6122:	|        \-> move.l 1c33a <languageNum>,d0
    6128:	|            move.l d0,d1
    612a:	|            move.l 1ca9e <gameSettings+0x4>,d0
    6130:	|            move.l d1,-(sp)
    6132:	|            move.l d0,-(sp)
    6134:	|            clr.l -(sp)
    6136:	|            jsr 6fda <setFileIndices>
    613c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6140:	|            movea.l 200(sp),a0
    6144:	|            move.b (a0),d0
    6146:	|     /----- beq.w 61f0 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    614a:	|     |      move.l 200(sp),-(sp)
    614e:	|     |      jsr 2fe <encodeFilename>
    6154:	|     |      addq.l #4,sp
    6156:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    615a:	|     |      move.l 98(sp),94(sp)
    6160:	|     |      move.l 1c9c6 <DOSBase>,d0
    6166:	|     |      movea.l d0,a6
    6168:	|     |      move.l 94(sp),d1
    616c:	|     |      jsr -120(a6)
    6170:	|     |      move.l d0,90(sp)
    6174:	|     |      move.l 90(sp),d0
    6178:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    617c:	|     |  /-- bne.s 61aa <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    617e:	|     |  |   move.l 98(sp),86(sp)
    6184:	|     |  |   moveq #-2,d1
    6186:	|     |  |   move.l d1,82(sp)
    618a:	|     |  |   move.l 1c9c6 <DOSBase>,d0
    6190:	|     |  |   movea.l d0,a6
    6192:	|     |  |   move.l 86(sp),d1
    6196:	|     |  |   move.l 82(sp),d2
    619a:	|     |  |   jsr -84(a6)
    619e:	|     |  |   move.l d0,78(sp)
    61a2:	|     |  |   move.l 78(sp),d0
    61a6:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    61aa:	|     |  \-> move.l 292(sp),74(sp)
    61b0:	|     |      move.l 1c9c6 <DOSBase>,d0
    61b6:	|     |      movea.l d0,a6
    61b8:	|     |      move.l 74(sp),d1
    61bc:	|     |      jsr -126(a6)
    61c0:	|     |      move.l d0,70(sp)
    61c4:	|     |      move.l 70(sp),d0
    61c8:	|     |  /-- bne.s 61da <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    61ca:	|     |  |   move.l 1c9c6 <DOSBase>,d0
    61d0:	|     |  |   movea.l d0,a6
    61d2:	|     |  |   jsr -60(a6)
    61d6:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    61da:	|     |  \-> move.l 98(sp),62(sp)
    61e0:	|     |      move.l 1c9be <SysBase>,d0
    61e6:	|     |      movea.l d0,a6
    61e8:	|     |      movea.l 62(sp),a1
    61ec:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    61f0:	|     \----> movea.l 1c916 <winHeight>,a0
    61f6:	|            lea -15(a0),a0
    61fa:	|            move.l a0,d0
    61fc:	|            move.l d0,-(sp)
    61fe:	|            pea a <_start+0xa>
    6202:	|            jsr 7a1a <positionStatus>
    6208:	|            addq.l #8,sp

	return TRUE;
    620a:	|            moveq #1,d0
}
    620c:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6210:	             lea 292(sp),sp
    6214:	             rts

00006216 <killSpeechTimers>:

void killSpeechTimers () {
    6216:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6218:	          move.l 1c956 <allRunningFunctions>,(sp)

	while (thisFunction) {
    621e:	   /----- bra.s 624a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6220:	/--|----> movea.l (sp),a0
    6222:	|  |      move.b 56(a0),d0
    6226:	|  |  /-- bne.s 6244 <killSpeechTimers+0x2e>
    6228:	|  |  |   movea.l (sp),a0
    622a:	|  |  |   move.w 50(a0),d0
    622e:	|  |  +-- beq.s 6244 <killSpeechTimers+0x2e>
    6230:	|  |  |   movea.l (sp),a0
    6232:	|  |  |   move.l 12(a0),d0
    6236:	|  |  +-- beq.s 6244 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6238:	|  |  |   movea.l (sp),a0
    623a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    623e:	|  |  |   movea.l (sp),a0
    6240:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6244:	|  |  \-> movea.l (sp),a0
    6246:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    624a:	|  \----> tst.l (sp)
    624c:	\-------- bne.s 6220 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    624e:	          jsr 7f58 <killAllSpeech>
}
    6254:	          nop
    6256:	          addq.l #4,sp
    6258:	          rts

0000625a <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    625a:	             lea -52(sp),sp
    625e:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6260:	             movea.l 60(sp),a0
    6264:	             move.l (a0),d0
    6266:	             move.l d0,-(sp)
    6268:	             jsr 6f1a <openSubSlice>
    626e:	             addq.l #4,sp
    6270:	             tst.w d0
    6272:	         /-- bne.s 627a <loadFunctionCode+0x20>
    6274:	         |   clr.w d0
    6276:	/--------|-- bra.w 6444 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    627a:	|        \-> move.l 1c9a6 <bigDataFile>,44(sp)
    6282:	|            move.l 1c9c6 <DOSBase>,d0
    6288:	|            movea.l d0,a6
    628a:	|            move.l 44(sp),d1
    628e:	|            jsr -306(a6)
    6292:	|            move.l d0,40(sp)
    6296:	|            move.l 40(sp),d0
    629a:	|            move.l d0,d0
    629c:	|            movea.l 60(sp),a0
    62a0:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    62a4:	|            move.l 1c9a6 <bigDataFile>,d0
    62aa:	|            move.l d0,-(sp)
    62ac:	|            jsr 6bc <get2bytes>
    62b2:	|            addq.l #4,sp
    62b4:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    62b8:	|            move.l 1c9a6 <bigDataFile>,d0
    62be:	|            move.l d0,-(sp)
    62c0:	|            jsr 6bc <get2bytes>
    62c6:	|            addq.l #4,sp
    62c8:	|            movea.l 60(sp),a0
    62cc:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    62d0:	|            move.l 1c9a6 <bigDataFile>,d0
    62d6:	|            move.l d0,-(sp)
    62d8:	|            jsr 6bc <get2bytes>
    62de:	|            addq.l #4,sp
    62e0:	|            movea.l 60(sp),a0
    62e4:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    62e8:	|            move.l 36(sp),d0
    62ec:	|            lsl.l #3,d0
    62ee:	|            move.l d0,32(sp)
    62f2:	|            clr.l 28(sp)
    62f6:	|            move.l 1c9be <SysBase>,d0
    62fc:	|            movea.l d0,a6
    62fe:	|            move.l 32(sp),d0
    6302:	|            move.l 28(sp),d1
    6306:	|            jsr -684(a6)
    630a:	|            move.l d0,24(sp)
    630e:	|            move.l 24(sp),d0
    6312:	|            movea.l 60(sp),a0
    6316:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    631a:	|            movea.l 60(sp),a0
    631e:	|            move.l 4(a0),d0
    6322:	|        /-- bne.s 6338 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6324:	|        |   pea 18b13 <PutChar+0xe01>
    632a:	|        |   jsr 17248 <KPrintF>
    6330:	|        |   addq.l #4,sp
		return FALSE;
    6332:	|        |   clr.w d0
    6334:	+--------|-- bra.w 6444 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6338:	|        \-> clr.l 52(sp)
    633c:	|        /-- bra.s 639e <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    633e:	|     /--|-> move.l 1c9a6 <bigDataFile>,8(sp)
    6346:	|     |  |   move.l 1c9c6 <DOSBase>,d0
    634c:	|     |  |   movea.l d0,a6
    634e:	|     |  |   move.l 8(sp),d1
    6352:	|     |  |   jsr -306(a6)
    6356:	|     |  |   move.l d0,4(sp)
    635a:	|     |  |   move.l 4(sp),d1
    635e:	|     |  |   movea.l 60(sp),a0
    6362:	|     |  |   movea.l 4(a0),a0
    6366:	|     |  |   move.l 52(sp),d0
    636a:	|     |  |   lsl.l #3,d0
    636c:	|     |  |   adda.l d0,a0
    636e:	|     |  |   move.l d1,d0
    6370:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6372:	|     |  |   move.l 1c9a6 <bigDataFile>,d0
    6378:	|     |  |   move.l d0,-(sp)
    637a:	|     |  |   jsr 6bc <get2bytes>
    6380:	|     |  |   addq.l #4,sp
    6382:	|     |  |   move.l d0,d1
    6384:	|     |  |   movea.l 60(sp),a0
    6388:	|     |  |   movea.l 4(a0),a0
    638c:	|     |  |   move.l 52(sp),d0
    6390:	|     |  |   lsl.l #3,d0
    6392:	|     |  |   adda.l d0,a0
    6394:	|     |  |   move.l d1,d0
    6396:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    639a:	|     |  |   addq.l #1,52(sp)
    639e:	|     |  \-> move.l 52(sp),d0
    63a2:	|     |      cmp.l 36(sp),d0
    63a6:	|     \----- bcs.s 633e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    63a8:	|            jsr 6c8a <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    63ae:	|            movea.l 60(sp),a0
    63b2:	|            move.l 8(a0),d0
    63b6:	|  /-------- ble.w 643a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    63ba:	|  |         movea.l 60(sp),a0
    63be:	|  |         move.l 8(a0),d0
    63c2:	|  |         lsl.l #3,d0
    63c4:	|  |         move.l d0,20(sp)
    63c8:	|  |         clr.l 16(sp)
    63cc:	|  |         move.l 1c9be <SysBase>,d0
    63d2:	|  |         movea.l d0,a6
    63d4:	|  |         move.l 20(sp),d0
    63d8:	|  |         move.l 16(sp),d1
    63dc:	|  |         jsr -684(a6)
    63e0:	|  |         move.l d0,12(sp)
    63e4:	|  |         move.l 12(sp),d0
    63e8:	|  |         movea.l 60(sp),a0
    63ec:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    63f0:	|  |         movea.l 60(sp),a0
    63f4:	|  |         move.l 20(a0),d0
    63f8:	|  |     /-- bne.s 640c <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    63fa:	|  |     |   pea 18b13 <PutChar+0xe01>
    6400:	|  |     |   jsr 17248 <KPrintF>
    6406:	|  |     |   addq.l #4,sp
			return FALSE;
    6408:	|  |     |   clr.w d0
    640a:	+--|-----|-- bra.s 6444 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    640c:	|  |     \-> clr.l 48(sp)
    6410:	|  |     /-- bra.s 642a <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6412:	|  |  /--|-> movea.l 60(sp),a0
    6416:	|  |  |  |   move.l 20(a0),d1
    641a:	|  |  |  |   move.l 48(sp),d0
    641e:	|  |  |  |   lsl.l #3,d0
    6420:	|  |  |  |   movea.l d1,a0
    6422:	|  |  |  |   adda.l d0,a0
    6424:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6426:	|  |  |  |   addq.l #1,48(sp)
    642a:	|  |  |  \-> movea.l 60(sp),a0
    642e:	|  |  |      move.l 8(a0),d0
    6432:	|  |  |      cmp.l 48(sp),d0
    6436:	|  |  \----- bgt.s 6412 <loadFunctionCode+0x1b8>
    6438:	|  |     /-- bra.s 6442 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    643a:	|  \-----|-> movea.l 60(sp),a0
    643e:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6442:	|        \-> moveq #1,d0
}
    6444:	\----------> movea.l (sp)+,a6
    6446:	             lea 52(sp),sp
    644a:	             rts

0000644c <loadHandlers>:

void loadHandlers (BPTR fp) {
    644c:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    644e:	movea.l 1c336 <currentEvents>,a2
    6454:	move.l 8(sp),-(sp)
    6458:	jsr 6bc <get2bytes>
    645e:	addq.l #4,sp
    6460:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6462:	movea.l 1c336 <currentEvents>,a2
    6468:	move.l 8(sp),-(sp)
    646c:	jsr 6bc <get2bytes>
    6472:	addq.l #4,sp
    6474:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6478:	movea.l 1c336 <currentEvents>,a2
    647e:	move.l 8(sp),-(sp)
    6482:	jsr 6bc <get2bytes>
    6488:	addq.l #4,sp
    648a:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    648e:	movea.l 1c336 <currentEvents>,a2
    6494:	move.l 8(sp),-(sp)
    6498:	jsr 6bc <get2bytes>
    649e:	addq.l #4,sp
    64a0:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    64a4:	movea.l 1c336 <currentEvents>,a2
    64aa:	move.l 8(sp),-(sp)
    64ae:	jsr 6bc <get2bytes>
    64b4:	addq.l #4,sp
    64b6:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    64ba:	movea.l 1c336 <currentEvents>,a2
    64c0:	move.l 8(sp),-(sp)
    64c4:	jsr 6bc <get2bytes>
    64ca:	addq.l #4,sp
    64cc:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    64d0:	movea.l 1c336 <currentEvents>,a2
    64d6:	move.l 8(sp),-(sp)
    64da:	jsr 6bc <get2bytes>
    64e0:	addq.l #4,sp
    64e2:	move.l d0,24(a2)
}
    64e6:	nop
    64e8:	movea.l (sp)+,a2
    64ea:	rts

000064ec <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    64ec:	       lea -312(sp),sp
    64f0:	       movem.l d2-d3/a6,-(sp)
    64f4:	       move.l 332(sp),d1
    64f8:	       move.l 336(sp),d0
    64fc:	       move.b d1,d1
    64fe:	       move.b d1,16(sp)
    6502:	       move.b d0,d0
    6504:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6508:	       move.l 328(sp),318(sp)
    650e:	       move.l #1005,314(sp)
    6516:	       move.l 1c9c6 <DOSBase>,d0
    651c:	       movea.l d0,a6
    651e:	       move.l 318(sp),d1
    6522:	       move.l 314(sp),d2
    6526:	       jsr -30(a6)
    652a:	       move.l d0,310(sp)
    652e:	       move.l 310(sp),d0
    6532:	       move.l d0,306(sp)

	if (! fp) {
    6536:	   /-- bne.s 6592 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6538:	   |   move.l 1c9c6 <DOSBase>,d0
    653e:	   |   movea.l d0,a6
    6540:	   |   jsr -60(a6)
    6544:	   |   move.l d0,154(sp)
    6548:	   |   move.l 154(sp),d0
    654c:	   |   move.l d0,150(sp)
    6550:	   |   move.l #101180,146(sp)
    6558:	   |   moveq #31,d0
    655a:	   |   move.l d0,142(sp)
    655e:	   |   move.l 1c9c6 <DOSBase>,d0
    6564:	   |   movea.l d0,a6
    6566:	   |   move.l 150(sp),d1
    656a:	   |   move.l 146(sp),d2
    656e:	   |   move.l 142(sp),d3
    6572:	   |   jsr -48(a6)
    6576:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    657a:	   |   move.l 328(sp),-(sp)
    657e:	   |   pea 18b5c <PutChar+0xe4a>
    6584:	   |   jsr 17248 <KPrintF>
    658a:	   |   addq.l #8,sp
		return NULL;
    658c:	   |   moveq #0,d0
    658e:	/--|-- bra.w 6852 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6592:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6596:	|      move.l 306(sp),302(sp)
    659c:	|      move.l 1c9c6 <DOSBase>,d0
    65a2:	|      movea.l d0,a6
    65a4:	|      move.l 302(sp),d1
    65a8:	|      jsr -306(a6)
    65ac:	|      move.l d0,298(sp)
    65b0:	|      move.l 298(sp),d0
    65b4:	|      moveq #83,d1
    65b6:	|      cmp.l d0,d1
    65b8:	|  /-- beq.s 65c0 <openAndVerify+0xd4>
    65ba:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    65c0:	|  \-> move.l 306(sp),294(sp)
    65c6:	|      move.l 1c9c6 <DOSBase>,d0
    65cc:	|      movea.l d0,a6
    65ce:	|      move.l 294(sp),d1
    65d2:	|      jsr -306(a6)
    65d6:	|      move.l d0,290(sp)
    65da:	|      move.l 290(sp),d0
    65de:	|      moveq #76,d1
    65e0:	|      cmp.l d0,d1
    65e2:	|  /-- beq.s 65ea <openAndVerify+0xfe>
    65e4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    65ea:	|  \-> move.l 306(sp),286(sp)
    65f0:	|      move.l 1c9c6 <DOSBase>,d0
    65f6:	|      movea.l d0,a6
    65f8:	|      move.l 286(sp),d1
    65fc:	|      jsr -306(a6)
    6600:	|      move.l d0,282(sp)
    6604:	|      move.l 282(sp),d0
    6608:	|      moveq #85,d1
    660a:	|      cmp.l d0,d1
    660c:	|  /-- beq.s 6614 <openAndVerify+0x128>
    660e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6614:	|  \-> move.l 306(sp),278(sp)
    661a:	|      move.l 1c9c6 <DOSBase>,d0
    6620:	|      movea.l d0,a6
    6622:	|      move.l 278(sp),d1
    6626:	|      jsr -306(a6)
    662a:	|      move.l d0,274(sp)
    662e:	|      move.l 274(sp),d0
    6632:	|      moveq #68,d1
    6634:	|      cmp.l d0,d1
    6636:	|  /-- beq.s 663e <openAndVerify+0x152>
    6638:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    663e:	|  \-> move.l 306(sp),270(sp)
    6644:	|      move.l 1c9c6 <DOSBase>,d0
    664a:	|      movea.l d0,a6
    664c:	|      move.l 270(sp),d1
    6650:	|      jsr -306(a6)
    6654:	|      move.l d0,266(sp)
    6658:	|      move.l 266(sp),d1
    665c:	|      move.b 16(sp),d0
    6660:	|      ext.w d0
    6662:	|      movea.w d0,a0
    6664:	|      cmpa.l d1,a0
    6666:	|  /-- beq.s 666e <openAndVerify+0x182>
    6668:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    666e:	|  \-> move.l 306(sp),262(sp)
    6674:	|      move.l 1c9c6 <DOSBase>,d0
    667a:	|      movea.l d0,a6
    667c:	|      move.l 262(sp),d1
    6680:	|      jsr -306(a6)
    6684:	|      move.l d0,258(sp)
    6688:	|      move.l 258(sp),d1
    668c:	|      move.b 14(sp),d0
    6690:	|      ext.w d0
    6692:	|      movea.w d0,a0
    6694:	|      cmpa.l d1,a0
    6696:	|  /-- beq.s 669e <openAndVerify+0x1b2>
    6698:	|  |   move.w #1,322(sp)
	if (headerBad) {
    669e:	|  \-> tst.w 322(sp)
    66a2:	|  /-- beq.s 66fa <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    66a4:	|  |   move.l 1c9c6 <DOSBase>,d0
    66aa:	|  |   movea.l d0,a6
    66ac:	|  |   jsr -60(a6)
    66b0:	|  |   move.l d0,174(sp)
    66b4:	|  |   move.l 174(sp),d0
    66b8:	|  |   move.l d0,170(sp)
    66bc:	|  |   move.l #101243,166(sp)
    66c4:	|  |   moveq #31,d0
    66c6:	|  |   move.l d0,162(sp)
    66ca:	|  |   move.l 1c9c6 <DOSBase>,d0
    66d0:	|  |   movea.l d0,a6
    66d2:	|  |   move.l 170(sp),d1
    66d6:	|  |   move.l 166(sp),d2
    66da:	|  |   move.l 162(sp),d3
    66de:	|  |   jsr -48(a6)
    66e2:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    66e6:	|  |   pea 18b7b <PutChar+0xe69>
    66ec:	|  |   jsr 17248 <KPrintF>
    66f2:	|  |   addq.l #4,sp
		return NULL;
    66f4:	|  |   moveq #0,d0
    66f6:	+--|-- bra.w 6852 <openAndVerify+0x366>
	}
	FGetC (fp);
    66fa:	|  \-> move.l 306(sp),254(sp)
    6700:	|      move.l 1c9c6 <DOSBase>,d0
    6706:	|      movea.l d0,a6
    6708:	|      move.l 254(sp),d1
    670c:	|      jsr -306(a6)
    6710:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6714:	|      nop
    6716:	|  /-> move.l 306(sp),246(sp)
    671c:	|  |   move.l 1c9c6 <DOSBase>,d0
    6722:	|  |   movea.l d0,a6
    6724:	|  |   move.l 246(sp),d1
    6728:	|  |   jsr -306(a6)
    672c:	|  |   move.l d0,242(sp)
    6730:	|  |   move.l 242(sp),d0
    6734:	|  \-- bne.s 6716 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6736:	|      move.l 306(sp),238(sp)
    673c:	|      move.l 1c9c6 <DOSBase>,d0
    6742:	|      movea.l d0,a6
    6744:	|      move.l 238(sp),d1
    6748:	|      jsr -306(a6)
    674c:	|      move.l d0,234(sp)
    6750:	|      move.l 234(sp),d0
    6754:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6758:	|      move.l 306(sp),226(sp)
    675e:	|      move.l 1c9c6 <DOSBase>,d0
    6764:	|      movea.l d0,a6
    6766:	|      move.l 226(sp),d1
    676a:	|      jsr -306(a6)
    676e:	|      move.l d0,222(sp)
    6772:	|      move.l 222(sp),d0
    6776:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    677a:	|      move.l 230(sp),d0
    677e:	|      lsl.l #8,d0
    6780:	|      add.l 218(sp),d0
    6784:	|      movea.l 344(sp),a0
    6788:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    678a:	|      movea.l 344(sp),a0
    678e:	|      move.l (a0),d0
    6790:	|      cmpi.l #514,d0
    6796:	|  /-- ble.s 67ec <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6798:	|  |   move.l 1c9c6 <DOSBase>,d0
    679e:	|  |   movea.l d0,a6
    67a0:	|  |   jsr -60(a6)
    67a4:	|  |   move.l d0,194(sp)
    67a8:	|  |   move.l 194(sp),d0
    67ac:	|  |   move.l d0,190(sp)
    67b0:	|  |   move.l #101270,186(sp)
    67b8:	|  |   moveq #100,d1
    67ba:	|  |   move.l d1,182(sp)
    67be:	|  |   move.l 1c9c6 <DOSBase>,d0
    67c4:	|  |   movea.l d0,a6
    67c6:	|  |   move.l 190(sp),d1
    67ca:	|  |   move.l 186(sp),d2
    67ce:	|  |   move.l 182(sp),d3
    67d2:	|  |   jsr -48(a6)
    67d6:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    67da:	|  |   pea 18b96 <PutChar+0xe84>
    67e0:	|  |   jsr 17248 <KPrintF>
    67e6:	|  |   addq.l #4,sp
		return NULL;
    67e8:	|  |   moveq #0,d0
    67ea:	+--|-- bra.s 6852 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    67ec:	|  \-> movea.l 344(sp),a0
    67f0:	|      move.l (a0),d0
    67f2:	|      cmpi.l #257,d0
    67f8:	|  /-- bgt.s 684e <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    67fa:	|  |   move.l 1c9c6 <DOSBase>,d0
    6800:	|  |   movea.l d0,a6
    6802:	|  |   jsr -60(a6)
    6806:	|  |   move.l d0,214(sp)
    680a:	|  |   move.l 214(sp),d0
    680e:	|  |   move.l d0,210(sp)
    6812:	|  |   move.l #101339,206(sp)
    681a:	|  |   moveq #100,d0
    681c:	|  |   move.l d0,202(sp)
    6820:	|  |   move.l 1c9c6 <DOSBase>,d0
    6826:	|  |   movea.l d0,a6
    6828:	|  |   move.l 210(sp),d1
    682c:	|  |   move.l 206(sp),d2
    6830:	|  |   move.l 202(sp),d3
    6834:	|  |   jsr -48(a6)
    6838:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    683c:	|  |   pea 18bdb <PutChar+0xec9>
    6842:	|  |   jsr 17248 <KPrintF>
    6848:	|  |   addq.l #4,sp
		return NULL;
    684a:	|  |   moveq #0,d0
    684c:	+--|-- bra.s 6852 <openAndVerify+0x366>
	}
	return fp;
    684e:	|  \-> move.l 306(sp),d0
}
    6852:	\----> movem.l (sp)+,d2-d3/a6
    6856:	       lea 312(sp),sp
    685a:	       rts

0000685c <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    685c:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    685e:	          move.l #117078,(sp)
	while (* huntAndDestroy) {
    6864:	   /----- bra.s 6890 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6866:	/--|----> movea.l (sp),a0
    6868:	|  |      move.l (a0),d0
    686a:	|  |      cmp.l 8(sp),d0
    686e:	|  |  /-- bne.s 6886 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6870:	|  |  |   movea.l (sp),a0
    6872:	|  |  |   movea.l (a0),a0
    6874:	|  |  |   move.l 44(a0),d0
    6878:	|  |  |   movea.l (sp),a0
    687a:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    687c:	|  |  |   movea.l 8(sp),a0
    6880:	|  |  |   clr.l 44(a0)
    6884:	|  +--|-- bra.s 6890 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6886:	|  |  \-> movea.l (sp),a0
    6888:	|  |      move.l (a0),d0
    688a:	|  |      moveq #44,d1
    688c:	|  |      add.l d0,d1
    688e:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6890:	|  \----> movea.l (sp),a0
    6892:	|         move.l (a0),d0
    6894:	\-------- bne.s 6866 <pauseFunction+0xa>
		}
	}
}
    6896:	          nop
    6898:	          nop
    689a:	          addq.l #4,sp
    689c:	          rts

0000689e <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    689e:	move.l 1c956 <allRunningFunctions>,d0
    68a4:	movea.l 4(sp),a0
    68a8:	move.l d0,44(a0)
	allRunningFunctions = fun;
    68ac:	move.l 4(sp),1c956 <allRunningFunctions>
}
    68b4:	nop
    68b6:	rts

000068b8 <runSludge>:

BOOL runSludge () {
    68b8:	                   lea -12(sp),sp
    68bc:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    68be:	                   move.l 1c956 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    68c6:	      /----------- bra.s 6942 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    68c8:	   /--|----------> movea.l 12(sp),a0
    68cc:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    68d2:	   |  |            movea.l 12(sp),a0
    68d6:	   |  |            move.b 56(a0),d0
    68da:	   |  |  /-------- bne.s 693c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    68dc:	   |  |  |         movea.l 12(sp),a0
    68e0:	   |  |  |         move.l 12(a0),d0
    68e4:	   |  |  |  /----- beq.s 690e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    68e6:	   |  |  |  |      movea.l 12(sp),a0
    68ea:	   |  |  |  |      move.l 12(a0),d0
    68ee:	   |  |  |  |  /-- bpl.s 68fa <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    68f0:	   |  |  |  |  |   movea.l 12(sp),a0
    68f4:	   |  |  |  |  |   clr.l 12(a0)
    68f8:	   |  |  +--|--|-- bra.s 693c <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    68fa:	   |  |  |  |  \-> movea.l 12(sp),a0
    68fe:	   |  |  |  |      move.l 12(a0),d0
    6902:	   |  |  |  |      subq.l #1,d0
    6904:	   |  |  |  |      movea.l 12(sp),a0
    6908:	   |  |  |  |      move.l d0,12(a0)
    690c:	   |  |  +--|----- bra.s 693c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    690e:	   |  |  |  \----> movea.l 12(sp),a0
    6912:	   |  |  |         move.w 50(a0),d0
    6916:	   |  |  |     /-- beq.s 6926 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6918:	   |  |  |     |   movea.l 12(sp),a0
    691c:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    6920:	   |  |  |     |   jsr 7f58 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6926:	   |  |  |     \-> move.l 12(sp),-(sp)
    692a:	   |  |  |         jsr 4886 <continueFunction>
    6930:	   |  |  |         addq.l #4,sp
    6932:	   |  |  |         tst.w d0
    6934:	   |  |  +-------- bne.s 693c <runSludge+0x84>
					return FALSE;
    6936:	   |  |  |         clr.w d0
    6938:	/--|--|--|-------- bra.w 69c8 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    693c:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6942:	|  |  \----------> tst.l 12(sp)
    6946:	|  \-------------- bne.s 68c8 <runSludge+0x10>
	}

	if (loadNow) {
    6948:	|                  move.l 1c98a <loadNow>,d0
    694e:	|        /-------- beq.s 69c6 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6950:	|        |         movea.l 1c98a <loadNow>,a0
    6956:	|        |         move.b (a0),d0
    6958:	|        |         cmpi.b #58,d0
    695c:	|        |  /----- bne.s 6990 <runSludge+0xd8>
			saveGame (loadNow + 1);
    695e:	|        |  |      move.l 1c98a <loadNow>,d0
    6964:	|        |  |      addq.l #1,d0
    6966:	|        |  |      move.l d0,-(sp)
    6968:	|        |  |      jsr c774 <saveGame>
    696e:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6970:	|        |  |      movea.l 1ca88 <saverFunc>,a0
    6976:	|        |  |      lea 28(a0),a0
    697a:	|        |  |      pea 1 <_start+0x1>
    697e:	|        |  |      pea 1 <_start+0x1>
    6982:	|        |  |      move.l a0,-(sp)
    6984:	|        |  |      jsr 150da <setVariable>
    698a:	|        |  |      lea 12(sp),sp
    698e:	|        |  |  /-- bra.s 69a8 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6990:	|        |  \--|-> move.l 1c98a <loadNow>,d0
    6996:	|        |     |   move.l d0,-(sp)
    6998:	|        |     |   jsr c2bc <loadGame>
    699e:	|        |     |   addq.l #4,sp
    69a0:	|        |     |   tst.w d0
    69a2:	|        |     +-- bne.s 69a8 <runSludge+0xf0>
    69a4:	|        |     |   clr.w d0
    69a6:	+--------|-----|-- bra.s 69c8 <runSludge+0x110>
		}
		FreeVec(loadNow);
    69a8:	|        |     \-> move.l 1c98a <loadNow>,8(sp)
    69b0:	|        |         move.l 1c9be <SysBase>,d0
    69b6:	|        |         movea.l d0,a6
    69b8:	|        |         movea.l 8(sp),a1
    69bc:	|        |         jsr -690(a6)
		loadNow = NULL;
    69c0:	|        |         clr.l 1c98a <loadNow>
	}

	return TRUE;
    69c6:	|        \-------> moveq #1,d0
}
    69c8:	\----------------> movea.l (sp)+,a6
    69ca:	                   lea 12(sp),sp
    69ce:	                   rts

000069d0 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    69d0:	movea.l 1c336 <currentEvents>,a0
    69d6:	move.l (a0),d0
    69d8:	move.l 4(sp),-(sp)
    69dc:	move.l d0,-(sp)
    69de:	jsr 8d0 <put2bytes>
    69e4:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    69e6:	movea.l 1c336 <currentEvents>,a0
    69ec:	move.l 4(a0),d0
    69f0:	move.l 4(sp),-(sp)
    69f4:	move.l d0,-(sp)
    69f6:	jsr 8d0 <put2bytes>
    69fc:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    69fe:	movea.l 1c336 <currentEvents>,a0
    6a04:	move.l 8(a0),d0
    6a08:	move.l 4(sp),-(sp)
    6a0c:	move.l d0,-(sp)
    6a0e:	jsr 8d0 <put2bytes>
    6a14:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6a16:	movea.l 1c336 <currentEvents>,a0
    6a1c:	move.l 12(a0),d0
    6a20:	move.l 4(sp),-(sp)
    6a24:	move.l d0,-(sp)
    6a26:	jsr 8d0 <put2bytes>
    6a2c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6a2e:	movea.l 1c336 <currentEvents>,a0
    6a34:	move.l 16(a0),d0
    6a38:	move.l 4(sp),-(sp)
    6a3c:	move.l d0,-(sp)
    6a3e:	jsr 8d0 <put2bytes>
    6a44:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6a46:	movea.l 1c336 <currentEvents>,a0
    6a4c:	move.l 20(a0),d0
    6a50:	move.l 4(sp),-(sp)
    6a54:	move.l d0,-(sp)
    6a56:	jsr 8d0 <put2bytes>
    6a5c:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6a5e:	movea.l 1c336 <currentEvents>,a0
    6a64:	move.l 24(a0),d0
    6a68:	move.l 4(sp),-(sp)
    6a6c:	move.l d0,-(sp)
    6a6e:	jsr 8d0 <put2bytes>
    6a74:	addq.l #8,sp
}
    6a76:	nop
    6a78:	rts

00006a7a <sludgeDisplay>:

void sludgeDisplay () {					
    6a7a:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6a7c:	move.l #14675968,(sp)
	displayCursor();
    6a82:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6a88:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6a8e:	jsr 2b04 <CstRestoreScreen>
	drawPeople();
    6a94:	jsr a058 <drawPeople>
	CstSwapBuffer();
    6a9a:	jsr 3850 <CstSwapBuffer>
}
    6aa0:	nop
    6aa2:	addq.l #4,sp
    6aa4:	rts

00006aa6 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6aa6:	      /-- bra.s 6ac6 <stackSetByIndex+0x20>
		vS = vS->next;
    6aa8:	/-----|-> movea.l 4(sp),a0
    6aac:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6ab2:	|     +-- bne.s 6ac6 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6ab4:	|     |   pea 18c22 <PutChar+0xf10>
    6aba:	|     |   jsr 17248 <KPrintF>
    6ac0:	|     |   addq.l #4,sp
			return FALSE;
    6ac2:	|     |   clr.w d0
    6ac4:	|  /--|-- bra.s 6ae8 <stackSetByIndex+0x42>
	while (theIndex--) {
    6ac6:	|  |  \-> move.l 8(sp),d0
    6aca:	|  |      move.l d0,d1
    6acc:	|  |      subq.l #1,d1
    6ace:	|  |      move.l d1,8(sp)
    6ad2:	|  |      tst.l d0
    6ad4:	\--|----- bne.s 6aa8 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6ad6:	   |      move.l 4(sp),d0
    6ada:	   |      move.l d0,-(sp)
    6adc:	   |      move.l 16(sp),-(sp)
    6ae0:	   |      jsr 14ca2 <copyVariable>
    6ae6:	   |      addq.l #8,sp
}
    6ae8:	   \----> rts

00006aea <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6aea:	             lea -24(sp),sp
    6aee:	             move.l a6,-(sp)
    6af0:	             move.l 48(sp),d0
    6af4:	             move.w d0,d0
    6af6:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6afa:	             moveq #58,d0
    6afc:	             move.l d0,24(sp)
    6b00:	             clr.l 20(sp)
    6b04:	             move.l 1c9be <SysBase>,d0
    6b0a:	             movea.l d0,a6
    6b0c:	             move.l 24(sp),d0
    6b10:	             move.l 20(sp),d1
    6b14:	             jsr -684(a6)
    6b18:	             move.l d0,16(sp)
    6b1c:	             move.l 16(sp),d0
    6b20:	             move.l d0,12(sp)
	if(!newFunc) {
    6b24:	         /-- bne.s 6b3a <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6b26:	         |   pea 18c3b <PutChar+0xf29>
    6b2c:	         |   jsr 17248 <KPrintF>
    6b32:	         |   addq.l #4,sp
		return 0;
    6b34:	         |   moveq #0,d0
    6b36:	/--------|-- bra.w 6c50 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6b3a:	|        \-> move.l 32(sp),d0
    6b3e:	|            movea.l 12(sp),a0
    6b42:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6b44:	|            move.l 12(sp),-(sp)
    6b48:	|            jsr 625a <loadFunctionCode>
    6b4e:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6b50:	|            movea.l 12(sp),a0
    6b54:	|            move.l 16(a0),d1
    6b58:	|            move.l 36(sp),d0
    6b5c:	|            cmp.l d1,d0
    6b5e:	|        /-- beq.s 6b74 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6b60:	|        |   pea 18c64 <PutChar+0xf52>
    6b66:	|        |   jsr 17248 <KPrintF>
    6b6c:	|        |   addq.l #4,sp
		return NULL; 
    6b6e:	|        |   moveq #0,d0
    6b70:	+--------|-- bra.w 6c50 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6b74:	|        \-> movea.l 12(sp),a0
    6b78:	|            move.l 16(a0),d1
    6b7c:	|            movea.l 12(sp),a0
    6b80:	|            move.l 8(a0),d0
    6b84:	|            cmp.l d1,d0
    6b86:	|  /-------- bge.s 6bf0 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6b88:	|  |         pea 18c80 <PutChar+0xf6e>
    6b8e:	|  |         jsr 17248 <KPrintF>
    6b94:	|  |         addq.l #4,sp
		return NULL; 
    6b96:	|  |         moveq #0,d0
    6b98:	+--|-------- bra.w 6c50 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6b9c:	|  |  /----> movea.l 44(sp),a0
    6ba0:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6ba4:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6ba8:	|  |  |      movea.l 44(sp),a0
    6bac:	|  |  |      move.l (a0),d0
    6bae:	|  |  |  /-- bne.s 6bc4 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6bb0:	|  |  |  |   pea 18caa <PutChar+0xf98>
    6bb6:	|  |  |  |   jsr 17248 <KPrintF>
    6bbc:	|  |  |  |   addq.l #4,sp
			return NULL;
    6bbe:	|  |  |  |   moveq #0,d0
    6bc0:	+--|--|--|-- bra.w 6c50 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6bc4:	|  |  |  \-> movea.l 12(sp),a0
    6bc8:	|  |  |      move.l 20(a0),d1
    6bcc:	|  |  |      move.l 36(sp),d0
    6bd0:	|  |  |      lsl.l #3,d0
    6bd2:	|  |  |      add.l d0,d1
    6bd4:	|  |  |      move.l 8(sp),d0
    6bd8:	|  |  |      move.l d1,-(sp)
    6bda:	|  |  |      move.l d0,-(sp)
    6bdc:	|  |  |      jsr 14ca2 <copyVariable>
    6be2:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6be4:	|  |  |      move.l 44(sp),-(sp)
    6be8:	|  |  |      jsr 1516c <trimStack>
    6bee:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6bf0:	|  \--|----> tst.l 36(sp)
    6bf4:	|     \----- bne.s 6b9c <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6bf6:	|            movea.l 12(sp),a0
    6bfa:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6bfe:	|            movea.l 12(sp),a0
    6c02:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6c06:	|            movea.l 12(sp),a0
    6c0a:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6c10:	|            movea.l 12(sp),a0
    6c14:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6c1a:	|            movea.l 12(sp),a0
    6c1e:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6c22:	|            movea.l 12(sp),a0
    6c26:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6c2a:	|            movea.l 12(sp),a0
    6c2e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6c32:	|            movea.l 12(sp),a0
    6c36:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6c3a:	|            movea.l 12(sp),a0
    6c3e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6c42:	|            move.l 12(sp),-(sp)
    6c46:	|            jsr 689e <restartFunction>
    6c4c:	|            addq.l #4,sp
	return 1;
    6c4e:	|            moveq #1,d0
}
    6c50:	\----------> movea.l (sp)+,a6
    6c52:	             lea 24(sp),sp
    6c56:	             rts

00006c58 <unfreezeSubs>:

void unfreezeSubs () {
    6c58:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6c5a:	          move.l 1c956 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6c60:	   /----- bra.s 6c7e <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6c62:	/--|----> movea.l (sp),a0
    6c64:	|  |      move.b 56(a0),d0
    6c68:	|  |  /-- beq.s 6c78 <unfreezeSubs+0x20>
    6c6a:	|  |  |   movea.l (sp),a0
    6c6c:	|  |  |   move.b 56(a0),d0
    6c70:	|  |  |   subq.b #1,d0
    6c72:	|  |  |   movea.l (sp),a0
    6c74:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6c78:	|  |  \-> movea.l (sp),a0
    6c7a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6c7e:	|  \----> tst.l (sp)
    6c80:	\-------- bne.s 6c62 <unfreezeSubs+0xa>
	}
}
    6c82:	          nop
    6c84:	          nop
    6c86:	          addq.l #4,sp
    6c88:	          rts

00006c8a <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6c8a:	clr.w 1c342 <sliceBusy>
}
    6c90:	nop
    6c92:	rts

00006c94 <getNumberedString>:

char * getNumberedString (int value) {
    6c94:	       lea -56(sp),sp
    6c98:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6c9c:	       move.w 1c342 <sliceBusy>,d0
    6ca2:	   /-- beq.s 6cec <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6ca4:	   |   move.l 1c9c6 <DOSBase>,d0
    6caa:	   |   movea.l d0,a6
    6cac:	   |   jsr -60(a6)
    6cb0:	   |   move.l d0,28(sp)
    6cb4:	   |   move.l 28(sp),d0
    6cb8:	   |   move.l d0,24(sp)
    6cbc:	   |   move.l #101621,20(sp)
    6cc4:	   |   moveq #76,d0
    6cc6:	   |   move.l d0,16(sp)
    6cca:	   |   move.l 1c9c6 <DOSBase>,d0
    6cd0:	   |   movea.l d0,a6
    6cd2:	   |   move.l 24(sp),d1
    6cd6:	   |   move.l 20(sp),d2
    6cda:	   |   move.l 16(sp),d3
    6cde:	   |   jsr -48(a6)
    6ce2:	   |   move.l d0,12(sp)
		return NULL;
    6ce6:	   |   moveq #0,d0
    6ce8:	/--|-- bra.w 6d88 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6cec:	|  \-> move.l 1c9a6 <bigDataFile>,64(sp)
    6cf4:	|      move.l 72(sp),d0
    6cf8:	|      add.l d0,d0
    6cfa:	|      add.l d0,d0
    6cfc:	|      move.l d0,d1
    6cfe:	|      move.l 1c9b2 <startOfTextIndex>,d0
    6d04:	|      add.l d1,d0
    6d06:	|      move.l d0,60(sp)
    6d0a:	|      moveq #-1,d0
    6d0c:	|      move.l d0,56(sp)
    6d10:	|      move.l 1c9c6 <DOSBase>,d0
    6d16:	|      movea.l d0,a6
    6d18:	|      move.l 64(sp),d1
    6d1c:	|      move.l 60(sp),d2
    6d20:	|      move.l 56(sp),d3
    6d24:	|      jsr -66(a6)
    6d28:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6d2c:	|      move.l 1c9a6 <bigDataFile>,d0
    6d32:	|      move.l d0,-(sp)
    6d34:	|      jsr 718 <get4bytes>
    6d3a:	|      addq.l #4,sp
    6d3c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6d40:	|      move.l 1c9a6 <bigDataFile>,48(sp)
    6d48:	|      move.l 72(sp),44(sp)
    6d4e:	|      moveq #-1,d0
    6d50:	|      move.l d0,40(sp)
    6d54:	|      move.l 1c9c6 <DOSBase>,d0
    6d5a:	|      movea.l d0,a6
    6d5c:	|      move.l 48(sp),d1
    6d60:	|      move.l 44(sp),d2
    6d64:	|      move.l 40(sp),d3
    6d68:	|      jsr -66(a6)
    6d6c:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6d70:	|      move.l 1c9a6 <bigDataFile>,d0
    6d76:	|      move.l d0,-(sp)
    6d78:	|      jsr b02 <readString>
    6d7e:	|      addq.l #4,sp
    6d80:	|      move.l d0,32(sp)
	
	return s;
    6d84:	|      move.l 32(sp),d0
}
    6d88:	\----> movem.l (sp)+,d2-d3/a6
    6d8c:	       lea 56(sp),sp
    6d90:	       rts

00006d92 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6d92:	       lea -32(sp),sp
    6d96:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6d9a:	       move.w 1c342 <sliceBusy>,d0
    6da0:	   /-- beq.s 6dbc <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6da2:	   |   pea 18d42 <PutChar+0x1030>
    6da8:	   |   pea 18d60 <PutChar+0x104e>
    6dae:	   |   jsr 17248 <KPrintF>
    6db4:	   |   addq.l #8,sp
		return 0;
    6db6:	   |   moveq #0,d0
    6db8:	/--|-- bra.w 6e50 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6dbc:	|  \-> move.l 1c9a6 <bigDataFile>,40(sp)
    6dc4:	|      move.l 48(sp),d0
    6dc8:	|      add.l d0,d0
    6dca:	|      add.l d0,d0
    6dcc:	|      move.l d0,d1
    6dce:	|      move.l 1c9ae <startOfDataIndex>,d0
    6dd4:	|      add.l d1,d0
    6dd6:	|      move.l d0,36(sp)
    6dda:	|      moveq #-1,d0
    6ddc:	|      move.l d0,32(sp)
    6de0:	|      move.l 1c9c6 <DOSBase>,d0
    6de6:	|      movea.l d0,a6
    6de8:	|      move.l 40(sp),d1
    6dec:	|      move.l 36(sp),d2
    6df0:	|      move.l 32(sp),d3
    6df4:	|      jsr -66(a6)
    6df8:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6dfc:	|      move.l 1c9a6 <bigDataFile>,24(sp)
    6e04:	|      move.l 1c9a6 <bigDataFile>,d0
    6e0a:	|      move.l d0,-(sp)
    6e0c:	|      jsr 718 <get4bytes>
    6e12:	|      addq.l #4,sp
    6e14:	|      move.l d0,20(sp)
    6e18:	|      clr.l 16(sp)
    6e1c:	|      move.l 1c9c6 <DOSBase>,d0
    6e22:	|      movea.l d0,a6
    6e24:	|      move.l 24(sp),d1
    6e28:	|      move.l 20(sp),d2
    6e2c:	|      move.l 16(sp),d3
    6e30:	|      jsr -66(a6)
    6e34:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6e38:	|      move.w #1,1c342 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6e40:	|      move.l 1c9a6 <bigDataFile>,d0
    6e46:	|      move.l d0,-(sp)
    6e48:	|      jsr 718 <get4bytes>
    6e4e:	|      addq.l #4,sp
}
    6e50:	\----> movem.l (sp)+,d2-d3/a6
    6e54:	       lea 32(sp),sp
    6e58:	       rts

00006e5a <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6e5a:	       lea -32(sp),sp
    6e5e:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6e62:	       move.w 1c342 <sliceBusy>,d0
    6e68:	   /-- beq.s 6e84 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6e6a:	   |   pea 18d42 <PutChar+0x1030>
    6e70:	   |   pea 18d60 <PutChar+0x104e>
    6e76:	   |   jsr 17248 <KPrintF>
    6e7c:	   |   addq.l #8,sp
        return FALSE;
    6e7e:	   |   clr.w d0
    6e80:	/--|-- bra.w 6f10 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6e84:	|  \-> move.l 1c9a6 <bigDataFile>,40(sp)
    6e8c:	|      move.l 48(sp),d0
    6e90:	|      add.l d0,d0
    6e92:	|      add.l d0,d0
    6e94:	|      move.l d0,d1
    6e96:	|      move.l 1c9ba <startOfObjectIndex>,d0
    6e9c:	|      add.l d1,d0
    6e9e:	|      move.l d0,36(sp)
    6ea2:	|      moveq #-1,d0
    6ea4:	|      move.l d0,32(sp)
    6ea8:	|      move.l 1c9c6 <DOSBase>,d0
    6eae:	|      movea.l d0,a6
    6eb0:	|      move.l 40(sp),d1
    6eb4:	|      move.l 36(sp),d2
    6eb8:	|      move.l 32(sp),d3
    6ebc:	|      jsr -66(a6)
    6ec0:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6ec4:	|      move.l 1c9a6 <bigDataFile>,24(sp)
    6ecc:	|      move.l 1c9a6 <bigDataFile>,d0
    6ed2:	|      move.l d0,-(sp)
    6ed4:	|      jsr 718 <get4bytes>
    6eda:	|      addq.l #4,sp
    6edc:	|      move.l d0,20(sp)
    6ee0:	|      moveq #-1,d0
    6ee2:	|      move.l d0,16(sp)
    6ee6:	|      move.l 1c9c6 <DOSBase>,d0
    6eec:	|      movea.l d0,a6
    6eee:	|      move.l 24(sp),d1
    6ef2:	|      move.l 20(sp),d2
    6ef6:	|      move.l 16(sp),d3
    6efa:	|      jsr -66(a6)
    6efe:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6f02:	|      move.w #1,1c342 <sliceBusy>
    6f0a:	|      move.w 1c342 <sliceBusy>,d0
}
    6f10:	\----> movem.l (sp)+,d2-d3/a6
    6f14:	       lea 32(sp),sp
    6f18:	       rts

00006f1a <openSubSlice>:

BOOL openSubSlice (int num) {
    6f1a:	       lea -32(sp),sp
    6f1e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6f22:	       move.w 1c342 <sliceBusy>,d0
    6f28:	   /-- beq.s 6f44 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6f2a:	   |   pea 18d42 <PutChar+0x1030>
    6f30:	   |   pea 18d60 <PutChar+0x104e>
    6f36:	   |   jsr 17248 <KPrintF>
    6f3c:	   |   addq.l #8,sp
		return FALSE;
    6f3e:	   |   clr.w d0
    6f40:	/--|-- bra.w 6fd0 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6f44:	|  \-> move.l 1c9a6 <bigDataFile>,40(sp)
    6f4c:	|      move.l 48(sp),d0
    6f50:	|      add.l d0,d0
    6f52:	|      add.l d0,d0
    6f54:	|      move.l d0,d1
    6f56:	|      move.l 1c9b6 <startOfSubIndex>,d0
    6f5c:	|      add.l d1,d0
    6f5e:	|      move.l d0,36(sp)
    6f62:	|      moveq #-1,d0
    6f64:	|      move.l d0,32(sp)
    6f68:	|      move.l 1c9c6 <DOSBase>,d0
    6f6e:	|      movea.l d0,a6
    6f70:	|      move.l 40(sp),d1
    6f74:	|      move.l 36(sp),d2
    6f78:	|      move.l 32(sp),d3
    6f7c:	|      jsr -66(a6)
    6f80:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6f84:	|      move.l 1c9a6 <bigDataFile>,24(sp)
    6f8c:	|      move.l 1c9a6 <bigDataFile>,d0
    6f92:	|      move.l d0,-(sp)
    6f94:	|      jsr 718 <get4bytes>
    6f9a:	|      addq.l #4,sp
    6f9c:	|      move.l d0,20(sp)
    6fa0:	|      moveq #-1,d0
    6fa2:	|      move.l d0,16(sp)
    6fa6:	|      move.l 1c9c6 <DOSBase>,d0
    6fac:	|      movea.l d0,a6
    6fae:	|      move.l 24(sp),d1
    6fb2:	|      move.l 20(sp),d2
    6fb6:	|      move.l 16(sp),d3
    6fba:	|      jsr -66(a6)
    6fbe:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6fc2:	|      move.w #1,1c342 <sliceBusy>
    6fca:	|      move.w 1c342 <sliceBusy>,d0
}
    6fd0:	\----> movem.l (sp)+,d2-d3/a6
    6fd4:	       lea 32(sp),sp
    6fd8:	       rts

00006fda <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6fda:	       lea -180(sp),sp
    6fde:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6fe2:	       tst.l 196(sp)
    6fe6:	/----- beq.s 7026 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6fe8:	|      move.l 196(sp),1c9a6 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6ff0:	|      move.l 196(sp),168(sp)
    6ff6:	|      clr.l 164(sp)
    6ffa:	|      clr.l 160(sp)
    6ffe:	|      move.l 1c9c6 <DOSBase>,d0
    7004:	|      movea.l d0,a6
    7006:	|      move.l 168(sp),d1
    700a:	|      move.l 164(sp),d2
    700e:	|      move.l 160(sp),d3
    7012:	|      jsr -66(a6)
    7016:	|      move.l d0,156(sp)
    701a:	|      move.l 156(sp),d0
    701e:	|      move.l d0,1c9aa <startIndex>
    7024:	|  /-- bra.s 7060 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7026:	\--|-> move.l 1c9a6 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    702e:	   |   move.l 196(sp),184(sp)
    7034:	   |   move.l 1c9aa <startIndex>,d0
    703a:	   |   move.l d0,180(sp)
    703e:	   |   moveq #-1,d0
    7040:	   |   move.l d0,176(sp)
    7044:	   |   move.l 1c9c6 <DOSBase>,d0
    704a:	   |   movea.l d0,a6
    704c:	   |   move.l 184(sp),d1
    7050:	   |   move.l 180(sp),d2
    7054:	   |   move.l 176(sp),d3
    7058:	   |   jsr -66(a6)
    705c:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7060:	   \-> clr.w 1c342 <sliceBusy>

	if (skipBefore > numLanguages) {
    7066:	       move.l 204(sp),d0
    706a:	       cmp.l 200(sp),d0
    706e:	   /-- bls.s 7082 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7070:	   |   pea 18d7a <PutChar+0x1068>
    7076:	   |   jsr 17248 <KPrintF>
    707c:	   |   addq.l #4,sp
		skipBefore = 0;
    707e:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7082:	   \-> move.l 200(sp),d0
    7086:	       sub.l 204(sp),d0
    708a:	       move.l d0,188(sp)
	while (skipBefore) {
    708e:	   /-- bra.s 70cc <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7090:	/--|-> move.l 196(sp),24(sp)
    7096:	|  |   move.l 196(sp),-(sp)
    709a:	|  |   jsr 718 <get4bytes>
    70a0:	|  |   addq.l #4,sp
    70a2:	|  |   move.l d0,20(sp)
    70a6:	|  |   moveq #-1,d0
    70a8:	|  |   move.l d0,16(sp)
    70ac:	|  |   move.l 1c9c6 <DOSBase>,d0
    70b2:	|  |   movea.l d0,a6
    70b4:	|  |   move.l 24(sp),d1
    70b8:	|  |   move.l 20(sp),d2
    70bc:	|  |   move.l 16(sp),d3
    70c0:	|  |   jsr -66(a6)
    70c4:	|  |   move.l d0,12(sp)
		skipBefore --;
    70c8:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    70cc:	|  \-> tst.l 204(sp)
    70d0:	\----- bne.s 7090 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    70d2:	       move.l 196(sp),152(sp)
    70d8:	       clr.l 148(sp)
    70dc:	       clr.l 144(sp)
    70e0:	       move.l 1c9c6 <DOSBase>,d0
    70e6:	       movea.l d0,a6
    70e8:	       move.l 152(sp),d1
    70ec:	       move.l 148(sp),d2
    70f0:	       move.l 144(sp),d3
    70f4:	       jsr -66(a6)
    70f8:	       move.l d0,140(sp)
    70fc:	       move.l 140(sp),d0
    7100:	       addq.l #4,d0
    7102:	       move.l d0,1c9b2 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7108:	       move.l 196(sp),136(sp)
    710e:	       move.l 196(sp),-(sp)
    7112:	       jsr 718 <get4bytes>
    7118:	       addq.l #4,sp
    711a:	       move.l d0,132(sp)
    711e:	       moveq #-1,d0
    7120:	       move.l d0,128(sp)
    7124:	       move.l 1c9c6 <DOSBase>,d0
    712a:	       movea.l d0,a6
    712c:	       move.l 136(sp),d1
    7130:	       move.l 132(sp),d2
    7134:	       move.l 128(sp),d3
    7138:	       jsr -66(a6)
    713c:	       move.l d0,124(sp)

	while (skipAfter) {
    7140:	   /-- bra.s 717e <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7142:	/--|-> move.l 196(sp),40(sp)
    7148:	|  |   move.l 196(sp),-(sp)
    714c:	|  |   jsr 718 <get4bytes>
    7152:	|  |   addq.l #4,sp
    7154:	|  |   move.l d0,36(sp)
    7158:	|  |   moveq #-1,d0
    715a:	|  |   move.l d0,32(sp)
    715e:	|  |   move.l 1c9c6 <DOSBase>,d0
    7164:	|  |   movea.l d0,a6
    7166:	|  |   move.l 40(sp),d1
    716a:	|  |   move.l 36(sp),d2
    716e:	|  |   move.l 32(sp),d3
    7172:	|  |   jsr -66(a6)
    7176:	|  |   move.l d0,28(sp)
		skipAfter --;
    717a:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    717e:	|  \-> tst.l 188(sp)
    7182:	\----- bne.s 7142 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7184:	       move.l 196(sp),120(sp)
    718a:	       clr.l 116(sp)
    718e:	       clr.l 112(sp)
    7192:	       move.l 1c9c6 <DOSBase>,d0
    7198:	       movea.l d0,a6
    719a:	       move.l 120(sp),d1
    719e:	       move.l 116(sp),d2
    71a2:	       move.l 112(sp),d3
    71a6:	       jsr -66(a6)
    71aa:	       move.l d0,108(sp)
    71ae:	       move.l 108(sp),d0
    71b2:	       addq.l #4,d0
    71b4:	       move.l d0,1c9b6 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    71ba:	       move.l 196(sp),104(sp)
    71c0:	       move.l 196(sp),-(sp)
    71c4:	       jsr 718 <get4bytes>
    71ca:	       addq.l #4,sp
    71cc:	       move.l d0,100(sp)
    71d0:	       clr.l 96(sp)
    71d4:	       move.l 1c9c6 <DOSBase>,d0
    71da:	       movea.l d0,a6
    71dc:	       move.l 104(sp),d1
    71e0:	       move.l 100(sp),d2
    71e4:	       move.l 96(sp),d3
    71e8:	       jsr -66(a6)
    71ec:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71f0:	       move.l 196(sp),88(sp)
    71f6:	       clr.l 84(sp)
    71fa:	       clr.l 80(sp)
    71fe:	       move.l 1c9c6 <DOSBase>,d0
    7204:	       movea.l d0,a6
    7206:	       move.l 88(sp),d1
    720a:	       move.l 84(sp),d2
    720e:	       move.l 80(sp),d3
    7212:	       jsr -66(a6)
    7216:	       move.l d0,76(sp)
    721a:	       move.l 76(sp),d0
    721e:	       addq.l #4,d0
    7220:	       move.l d0,1c9ba <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7226:	       move.l 196(sp),72(sp)
    722c:	       move.l 196(sp),-(sp)
    7230:	       jsr 718 <get4bytes>
    7236:	       addq.l #4,sp
    7238:	       move.l d0,68(sp)
    723c:	       clr.l 64(sp)
    7240:	       move.l 1c9c6 <DOSBase>,d0
    7246:	       movea.l d0,a6
    7248:	       move.l 72(sp),d1
    724c:	       move.l 68(sp),d2
    7250:	       move.l 64(sp),d3
    7254:	       jsr -66(a6)
    7258:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    725c:	       move.l 196(sp),56(sp)
    7262:	       clr.l 52(sp)
    7266:	       clr.l 48(sp)
    726a:	       move.l 1c9c6 <DOSBase>,d0
    7270:	       movea.l d0,a6
    7272:	       move.l 56(sp),d1
    7276:	       move.l 52(sp),d2
    727a:	       move.l 48(sp),d3
    727e:	       jsr -66(a6)
    7282:	       move.l d0,44(sp)
    7286:	       move.l 44(sp),d0
    728a:	       move.l d0,1c9ae <startOfDataIndex>
    7290:	       nop
    7292:	       movem.l (sp)+,d2-d3/a6
    7296:	       lea 180(sp),sp
    729a:	       rts

0000729c <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    729c:	    lea -20(sp),sp
    72a0:	    move.l a6,-(sp)
    72a2:	    move.l d7,-(sp)
	APTR vbr = 0;
    72a4:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    72a8:	    move.w #20090,10(sp)
    72ae:	    move.w #2049,12(sp)
    72b4:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    72ba:	    movea.l 1c9be <SysBase>,a0
    72c0:	    move.w 296(a0),d0
    72c4:	    move.w d0,d0
    72c6:	    andi.l #65535,d0
    72cc:	    moveq #1,d1
    72ce:	    and.l d1,d0
    72d0:	/-- beq.s 72fe <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    72d2:	|   lea 28(sp),a0
    72d6:	|   lea -18(a0),a0
    72da:	|   move.l a0,20(sp)
    72de:	|   move.l 1c9be <SysBase>,d0
    72e4:	|   movea.l d0,a6
    72e6:	|   move.l 20(sp),d7
    72ea:	|   exg d7,a5
    72ec:	|   jsr -30(a6)
    72f0:	|   exg d7,a5
    72f2:	|   move.l d0,16(sp)
    72f6:	|   move.l 16(sp),d0
    72fa:	|   move.l d0,24(sp)

	return vbr;
    72fe:	\-> move.l 24(sp),d0
}
    7302:	    move.l (sp)+,d7
    7304:	    movea.l (sp)+,a6
    7306:	    lea 20(sp),sp
    730a:	    rts

0000730c <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    730c:	movea.l 1c9e4 <VBR>,a0
    7312:	lea 108(a0),a0
    7316:	move.l 4(sp),(a0)
}
    731a:	nop
    731c:	rts

0000731e <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    731e:	movea.l 1c9e4 <VBR>,a0
    7324:	move.l 108(a0),d0
}
    7328:	rts

0000732a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    732a:	       subq.l #8,sp
    732c:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    732e:	       pea 18dc3 <PutChar+0x10b1>
    7334:	       jsr 17248 <KPrintF>
    733a:	       addq.l #4,sp
	Forbid();
    733c:	       move.l 1c9be <SysBase>,d0
    7342:	       movea.l d0,a6
    7344:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7348:	       pea 18ddb <PutChar+0x10c9>
    734e:	       jsr 17248 <KPrintF>
    7354:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7356:	       movea.l 1c9c2 <custom>,a0
    735c:	       move.w 16(a0),d0
    7360:	       move.w d0,1c9e2 <SystemADKCON>
	SystemInts=custom->intenar;
    7366:	       movea.l 1c9c2 <custom>,a0
    736c:	       move.w 28(a0),d0
    7370:	       move.w d0,1c9de <SystemInts>
	SystemDMA=custom->dmaconr;
    7376:	       movea.l 1c9c2 <custom>,a0
    737c:	       move.w 2(a0),d0
    7380:	       move.w d0,1c9e0 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7386:	       movea.l 1c9ca <GfxBase>,a0
    738c:	       move.l 34(a0),d0
    7390:	       move.l d0,1c9ec <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7396:	       pea 18df9 <PutChar+0x10e7>
    739c:	       jsr 17248 <KPrintF>
    73a2:	       addq.l #4,sp
	LoadView(0);
    73a4:	       clr.l 4(sp)
    73a8:	       move.l 1c9ca <GfxBase>,d0
    73ae:	       movea.l d0,a6
    73b0:	       movea.l 4(sp),a1
    73b4:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    73b8:	       pea 18e0f <PutChar+0x10fd>
    73be:	       jsr 17248 <KPrintF>
    73c4:	       addq.l #4,sp
	WaitTOF();
    73c6:	       move.l 1c9ca <GfxBase>,d0
    73cc:	       movea.l d0,a6
    73ce:	       jsr -270(a6)
	WaitTOF();
    73d2:	       move.l 1c9ca <GfxBase>,d0
    73d8:	       movea.l d0,a6
    73da:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    73de:	       pea 18e24 <PutChar+0x1112>
    73e4:	       jsr 17248 <KPrintF>
    73ea:	       addq.l #4,sp
	WaitVbl();
    73ec:	       jsr 1717c <WaitVbl>
	WaitVbl();
    73f2:	       jsr 1717c <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    73f8:	       pea 18e39 <PutChar+0x1127>
    73fe:	       jsr 17248 <KPrintF>
    7404:	       addq.l #4,sp
	OwnBlitter();
    7406:	       move.l 1c9ca <GfxBase>,d0
    740c:	       movea.l d0,a6
    740e:	       jsr -456(a6)
	WaitBlit();	
    7412:	       move.l 1c9ca <GfxBase>,d0
    7418:	       movea.l d0,a6
    741a:	       jsr -228(a6)
	Disable();
    741e:	       move.l 1c9be <SysBase>,d0
    7424:	       movea.l d0,a6
    7426:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    742a:	       pea 18e5a <PutChar+0x1148>
    7430:	       jsr 17248 <KPrintF>
    7436:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7438:	       movea.l 1c9c2 <custom>,a0
    743e:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7444:	       pea 18e71 <PutChar+0x115f>
    744a:	       jsr 17248 <KPrintF>
    7450:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7452:	       clr.l 8(sp)
    7456:	   /-- bra.s 7474 <TakeSystem+0x14a>
		custom->color[a]=0;
    7458:	/--|-> movea.l 1c9c2 <custom>,a0
    745e:	|  |   move.l 8(sp),d0
    7462:	|  |   addi.l #192,d0
    7468:	|  |   add.l d0,d0
    746a:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7470:	|  |   addq.l #1,8(sp)
    7474:	|  \-> moveq #31,d0
    7476:	|      cmp.l 8(sp),d0
    747a:	\----- bge.s 7458 <TakeSystem+0x12e>

	WaitVbl();
    747c:	       jsr 1717c <WaitVbl>
	WaitVbl();
    7482:	       jsr 1717c <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7488:	       pea 18e96 <PutChar+0x1184>
    748e:	       jsr 17248 <KPrintF>
    7494:	       addq.l #4,sp
	VBR=GetVBR();
    7496:	       jsr 729c <GetVBR>
    749c:	       move.l d0,1c9e4 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    74a2:	       jsr 731e <GetInterruptHandler>
    74a8:	       move.l d0,1c9e8 <SystemIrq>
}
    74ae:	       nop
    74b0:	       movea.l (sp)+,a6
    74b2:	       addq.l #8,sp
    74b4:	       rts

000074b6 <FreeSystem>:

void FreeSystem() { 
    74b6:	subq.l #4,sp
    74b8:	move.l a6,-(sp)
	WaitVbl();
    74ba:	jsr 1717c <WaitVbl>
	WaitBlit();
    74c0:	move.l 1c9ca <GfxBase>,d0
    74c6:	movea.l d0,a6
    74c8:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    74cc:	movea.l 1c9c2 <custom>,a0
    74d2:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    74d8:	movea.l 1c9c2 <custom>,a0
    74de:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    74e4:	movea.l 1c9c2 <custom>,a0
    74ea:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    74f0:	move.l 1c9e8 <SystemIrq>,d0
    74f6:	move.l d0,-(sp)
    74f8:	jsr 730c <SetInterruptHandler>
    74fe:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7500:	movea.l 1c9ca <GfxBase>,a0
    7506:	move.l 38(a0),d0
    750a:	movea.l 1c9c2 <custom>,a0
    7510:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7514:	movea.l 1c9ca <GfxBase>,a0
    751a:	move.l 50(a0),d0
    751e:	movea.l 1c9c2 <custom>,a0
    7524:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7528:	movea.l 1c9c2 <custom>,a0
    752e:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7534:	move.w 1c9e0 <SystemDMA>,d0
    753a:	movea.l 1c9c2 <custom>,a0
    7540:	ori.w #-32768,d0
    7544:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7548:	move.w 1c9e2 <SystemADKCON>,d0
    754e:	movea.l 1c9c2 <custom>,a0
    7554:	ori.w #-32768,d0
    7558:	move.w d0,158(a0)

	WaitBlit();	
    755c:	move.l 1c9ca <GfxBase>,d0
    7562:	movea.l d0,a6
    7564:	jsr -228(a6)
	DisownBlitter();
    7568:	move.l 1c9ca <GfxBase>,d0
    756e:	movea.l d0,a6
    7570:	jsr -462(a6)
	Enable();
    7574:	move.l 1c9be <SysBase>,d0
    757a:	movea.l d0,a6
    757c:	jsr -126(a6)

	LoadView(ActiView);
    7580:	move.l 1c9ec <ActiView>,4(sp)
    7588:	move.l 1c9ca <GfxBase>,d0
    758e:	movea.l d0,a6
    7590:	movea.l 4(sp),a1
    7594:	jsr -222(a6)
	WaitTOF();
    7598:	move.l 1c9ca <GfxBase>,d0
    759e:	movea.l d0,a6
    75a0:	jsr -270(a6)
	WaitTOF();
    75a4:	move.l 1c9ca <GfxBase>,d0
    75aa:	movea.l d0,a6
    75ac:	jsr -270(a6)

	Permit();
    75b0:	move.l 1c9be <SysBase>,d0
    75b6:	movea.l d0,a6
    75b8:	jsr -138(a6)
}
    75bc:	nop
    75be:	movea.l (sp)+,a6
    75c0:	addq.l #4,sp
    75c2:	rts

000075c4 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    75c4:	    lea -132(sp),sp
    75c8:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    75cc:	    move.l #512,140(sp)
  	*bp = 0;
    75d4:	    movea.l 140(sp),a0
    75d8:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    75da:	    movea.w #4,a0
    75de:	    move.l (a0),d0
    75e0:	    move.l d0,1c9be <SysBase>
	custom = (struct Custom*)0xdff000;	
    75e6:	    move.l #14675968,1c9c2 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    75f0:	    move.l #102074,136(sp)
    75f8:	    clr.l 132(sp)
    75fc:	    move.l 1c9be <SysBase>,d0
    7602:	    movea.l d0,a6
    7604:	    movea.l 136(sp),a1
    7608:	    move.l 132(sp),d0
    760c:	    jsr -552(a6)
    7610:	    move.l d0,128(sp)
    7614:	    move.l 128(sp),d0
    7618:	    move.l d0,1c9ca <GfxBase>
	if (!GfxBase)
    761e:	    move.l 1c9ca <GfxBase>,d0
    7624:	/-- bne.s 763a <main+0x76>
		Exit(0);
    7626:	|   clr.l 124(sp)
    762a:	|   move.l 1c9c6 <DOSBase>,d0
    7630:	|   movea.l d0,a6
    7632:	|   move.l 124(sp),d1
    7636:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    763a:	\-> move.l #102091,120(sp)
    7642:	    clr.l 116(sp)
    7646:	    move.l 1c9be <SysBase>,d0
    764c:	    movea.l d0,a6
    764e:	    movea.l 120(sp),a1
    7652:	    move.l 116(sp),d0
    7656:	    jsr -552(a6)
    765a:	    move.l d0,112(sp)
    765e:	    move.l 112(sp),d0
    7662:	    move.l d0,1c9c6 <DOSBase>
	if (!DOSBase)
    7668:	    move.l 1c9c6 <DOSBase>,d0
    766e:	/-- bne.s 7684 <main+0xc0>
		Exit(0);
    7670:	|   clr.l 108(sp)
    7674:	|   move.l 1c9c6 <DOSBase>,d0
    767a:	|   movea.l d0,a6
    767c:	|   move.l 108(sp),d1
    7680:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7684:	\-> move.l #102103,104(sp)
    768c:	    clr.l 100(sp)
    7690:	    move.l 1c9be <SysBase>,d0
    7696:	    movea.l d0,a6
    7698:	    movea.l 104(sp),a1
    769c:	    move.l 100(sp),d0
    76a0:	    jsr -552(a6)
    76a4:	    move.l d0,96(sp)
    76a8:	    move.l 96(sp),d0
    76ac:	    move.l d0,1c9ce <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    76b2:	    move.l 1c9ce <MathIeeeSingBasBase>,d0
    76b8:	/-- bne.s 76ce <main+0x10a>
		Exit(0);	
    76ba:	|   clr.l 92(sp)
    76be:	|   move.l 1c9c6 <DOSBase>,d0
    76c4:	|   movea.l d0,a6
    76c6:	|   move.l 92(sp),d1
    76ca:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    76ce:	\-> move.l #102127,88(sp)
    76d6:	    clr.l 84(sp)
    76da:	    move.l 1c9be <SysBase>,d0
    76e0:	    movea.l d0,a6
    76e2:	    movea.l 88(sp),a1
    76e6:	    move.l 84(sp),d0
    76ea:	    jsr -552(a6)
    76ee:	    move.l d0,80(sp)
    76f2:	    move.l 80(sp),d0
    76f6:	    move.l d0,1c9d2 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    76fc:	    move.l 1c9d2 <MathIeeeSingTransBase>,d0
    7702:	/-- bne.s 7718 <main+0x154>
		Exit(0);
    7704:	|   clr.l 76(sp)
    7708:	|   move.l 1c9c6 <DOSBase>,d0
    770e:	|   movea.l d0,a6
    7710:	|   move.l 76(sp),d1
    7714:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7718:	\-> move.l #102153,72(sp)
    7720:	    clr.l 68(sp)
    7724:	    move.l 1c9be <SysBase>,d0
    772a:	    movea.l d0,a6
    772c:	    movea.l 72(sp),a1
    7730:	    move.l 68(sp),d0
    7734:	    jsr -552(a6)
    7738:	    move.l d0,64(sp)
    773c:	    move.l 64(sp),d0
    7740:	    move.l d0,1c9da <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7746:	    move.l 1c9da <MathIeeeDoubTransBase>,d0
    774c:	/-- bne.s 7762 <main+0x19e>
		Exit(0);
    774e:	|   clr.l 60(sp)
    7752:	|   move.l 1c9c6 <DOSBase>,d0
    7758:	|   movea.l d0,a6
    775a:	|   move.l 60(sp),d1
    775e:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7762:	\-> move.l #102179,56(sp)
    776a:	    clr.l 52(sp)
    776e:	    move.l 1c9be <SysBase>,d0
    7774:	    movea.l d0,a6
    7776:	    movea.l 56(sp),a1
    777a:	    move.l 52(sp),d0
    777e:	    jsr -552(a6)
    7782:	    move.l d0,48(sp)
    7786:	    move.l 48(sp),d0
    778a:	    move.l d0,1c9d6 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7790:	    move.l 1c9d6 <MathIeeeDoubBasBase>,d0
    7796:	/-- bne.s 77ac <main+0x1e8>
		Exit(0);
    7798:	|   clr.l 44(sp)
    779c:	|   move.l 1c9c6 <DOSBase>,d0
    77a2:	|   movea.l d0,a6
    77a4:	|   move.l 44(sp),d1
    77a8:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 030!\n");
    77ac:	\-> pea 18f3b <PutChar+0x1229>
    77b2:	    jsr 17248 <KPrintF>
    77b8:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 030!\n", 25);
    77ba:	    move.l 1c9c6 <DOSBase>,d0
    77c0:	    movea.l d0,a6
    77c2:	    jsr -60(a6)
    77c6:	    move.l d0,40(sp)
    77ca:	    move.l 40(sp),d0
    77ce:	    move.l d0,36(sp)
    77d2:	    move.l #102235,32(sp)
    77da:	    moveq #25,d0
    77dc:	    move.l d0,28(sp)
    77e0:	    move.l 1c9c6 <DOSBase>,d0
    77e6:	    movea.l d0,a6
    77e8:	    move.l 36(sp),d1
    77ec:	    move.l 32(sp),d2
    77f0:	    move.l 28(sp),d3
    77f4:	    jsr -48(a6)
    77f8:	    move.l d0,24(sp)
	Delay(50);
    77fc:	    moveq #50,d0
    77fe:	    move.l d0,20(sp)
    7802:	    move.l 1c9c6 <DOSBase>,d0
    7808:	    movea.l d0,a6
    780a:	    move.l 20(sp),d1
    780e:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7812:	    pea 18f74 <PutChar+0x1262>
    7818:	    jsr 17248 <KPrintF>
    781e:	    addq.l #4,sp
	TakeSystem();
    7820:	    jsr 732a <TakeSystem>
	KPrintF("System Taken\n");
    7826:	    pea 18f83 <PutChar+0x1271>
    782c:	    jsr 17248 <KPrintF>
    7832:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7834:	    movea.l 1c9c2 <custom>,a0
    783a:	    move.w #-30721,150(a0)
	WaitVbl();
    7840:	    jsr 1717c <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7846:	    pea 18f91 <PutChar+0x127f>
    784c:	    jsr 17248 <KPrintF>
    7852:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7854:	    move.l 152(sp),-(sp)
    7858:	    move.l 152(sp),-(sp)
    785c:	    jsr 415a <main_sludge>
    7862:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7864:	    jsr 74b6 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    786a:	    move.l 1c9c6 <DOSBase>,16(sp)
    7872:	    move.l 1c9be <SysBase>,d0
    7878:	    movea.l d0,a6
    787a:	    movea.l 16(sp),a1
    787e:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7882:	    move.l 1c9ca <GfxBase>,12(sp)
    788a:	    move.l 1c9be <SysBase>,d0
    7890:	    movea.l d0,a6
    7892:	    movea.l 12(sp),a1
    7896:	    jsr -414(a6)
    789a:	    moveq #0,d0
}
    789c:	    movem.l (sp)+,d2-d3/a6
    78a0:	    lea 132(sp),sp
    78a4:	    rts

000078a6 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    78a6:	    lea -16(sp),sp
    78aa:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    78ac:	    moveq #8,d0
    78ae:	    move.l d0,16(sp)
    78b2:	    clr.l 12(sp)
    78b6:	    move.l 1c9be <SysBase>,d0
    78bc:	    movea.l d0,a6
    78be:	    move.l 16(sp),d0
    78c2:	    move.l 12(sp),d1
    78c6:	    jsr -684(a6)
    78ca:	    move.l d0,8(sp)
    78ce:	    move.l 8(sp),d0
    78d2:	    move.l d0,4(sp)
	if (!newStat) {
    78d6:	/-- bne.s 7906 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    78d8:	|   movea.l 1c344 <nowStatus>,a0
    78de:	|   move.l (a0),d0
    78e0:	|   movea.l 4(sp),a0
    78e4:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    78e8:	|   pea 189e7 <PutChar+0xcd5>
    78ee:	|   jsr b8 <copyString>
    78f4:	|   addq.l #4,sp
    78f6:	|   movea.l 4(sp),a0
    78fa:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    78fc:	|   movea.l 1c344 <nowStatus>,a0
    7902:	|   move.l 4(sp),(a0)
	}
}
    7906:	\-> nop
    7908:	    movea.l (sp)+,a6
    790a:	    lea 16(sp),sp
    790e:	    rts

00007910 <clearStatusBar>:

void clearStatusBar () {
    7910:	       lea -16(sp),sp
    7914:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7916:	       movea.l 1c344 <nowStatus>,a0
    791c:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    7920:	       movea.l 1c344 <nowStatus>,a0
    7926:	       moveq #-1,d0
    7928:	       move.l d0,6(a0)
	while (stat) {
    792c:	   /-- bra.s 796c <clearStatusBar+0x5c>
		kill = stat;
    792e:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7934:	|  |   movea.l 16(sp),a0
    7938:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    793e:	|  |   movea.l 12(sp),a0
    7942:	|  |   move.l (a0),8(sp)
    7946:	|  |   move.l 1c9be <SysBase>,d0
    794c:	|  |   movea.l d0,a6
    794e:	|  |   movea.l 8(sp),a1
    7952:	|  |   jsr -690(a6)
		FreeVec(kill);
    7956:	|  |   move.l 12(sp),4(sp)
    795c:	|  |   move.l 1c9be <SysBase>,d0
    7962:	|  |   movea.l d0,a6
    7964:	|  |   movea.l 4(sp),a1
    7968:	|  |   jsr -690(a6)
	while (stat) {
    796c:	|  \-> tst.l 16(sp)
    7970:	\----- bne.s 792e <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7972:	       movea.l 1c344 <nowStatus>,a0
    7978:	       clr.l (a0)
}
    797a:	       nop
    797c:	       movea.l (sp)+,a6
    797e:	       lea 16(sp),sp
    7982:	       rts

00007984 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7984:	clr.l 1c9f0 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    798a:	move.w #-1,1c9f4 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7992:	moveq #-1,d0
    7994:	move.l d0,1c9f6 <mainStatus+0x6>
	mainStatus.statusX = 10;
    799a:	moveq #10,d0
    799c:	move.l d0,1c9fa <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    79a2:	movea.l 1c916 <winHeight>,a0
    79a8:	lea -15(a0),a0
    79ac:	move.l a0,d0
    79ae:	move.l d0,1c9fe <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    79b4:	nop
    79b6:	rts

000079b8 <killLastStatus>:

void killLastStatus () {
    79b8:	    lea -12(sp),sp
    79bc:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    79be:	    movea.l 1c344 <nowStatus>,a0
    79c4:	    move.l (a0),d0
    79c6:	/-- beq.s 7a10 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    79c8:	|   movea.l 1c344 <nowStatus>,a0
    79ce:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    79d2:	|   movea.l 1c344 <nowStatus>,a0
    79d8:	|   movea.l 12(sp),a1
    79dc:	|   move.l 4(a1),d0
    79e0:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    79e2:	|   movea.l 12(sp),a0
    79e6:	|   move.l (a0),8(sp)
    79ea:	|   move.l 1c9be <SysBase>,d0
    79f0:	|   movea.l d0,a6
    79f2:	|   movea.l 8(sp),a1
    79f6:	|   jsr -690(a6)
		FreeVec(kill);
    79fa:	|   move.l 12(sp),4(sp)
    7a00:	|   move.l 1c9be <SysBase>,d0
    7a06:	|   movea.l d0,a6
    7a08:	|   movea.l 4(sp),a1
    7a0c:	|   jsr -690(a6)
	}
}
    7a10:	\-> nop
    7a12:	    movea.l (sp)+,a6
    7a14:	    lea 12(sp),sp
    7a18:	    rts

00007a1a <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7a1a:	movea.l 1c344 <nowStatus>,a0
    7a20:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7a26:	movea.l 1c344 <nowStatus>,a0
    7a2c:	move.l 8(sp),14(a0)
}
    7a32:	nop
    7a34:	rts

00007a36 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7a36:	       lea -100(sp),sp
    7a3a:	       move.l a6,-(sp)
    7a3c:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7a3e:	       movea.l 1c344 <nowStatus>,a0
    7a44:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7a48:	       movea.l 1c344 <nowStatus>,a0
    7a4e:	       move.w 4(a0),d0
    7a52:	       move.w d0,d0
    7a54:	       andi.l #65535,d0
    7a5a:	       move.l 112(sp),-(sp)
    7a5e:	       move.l d0,-(sp)
    7a60:	       jsr 8d0 <put2bytes>
    7a66:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7a68:	       movea.l 1c344 <nowStatus>,a0
    7a6e:	       move.l 6(a0),d0
    7a72:	       move.l d0,d0
    7a74:	       movea.w d0,a0
    7a76:	       move.l 112(sp),-(sp)
    7a7a:	       move.l a0,-(sp)
    7a7c:	       jsr a9c <putSigned>
    7a82:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7a84:	       movea.l 1c344 <nowStatus>,a0
    7a8a:	       move.l 10(a0),d0
    7a8e:	       move.l 112(sp),-(sp)
    7a92:	       move.l d0,-(sp)
    7a94:	       jsr 8d0 <put2bytes>
    7a9a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7a9c:	       movea.l 1c344 <nowStatus>,a0
    7aa2:	       move.l 14(a0),d0
    7aa6:	       move.l 112(sp),-(sp)
    7aaa:	       move.l d0,-(sp)
    7aac:	       jsr 8d0 <put2bytes>
    7ab2:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7ab4:	       move.l 112(sp),100(sp)
    7aba:	       movea.l 1c344 <nowStatus>,a0
    7ac0:	       move.l 18(a0),96(sp)
    7ac6:	       move.l 1c9c6 <DOSBase>,d0
    7acc:	       movea.l d0,a6
    7ace:	       move.l 100(sp),d1
    7ad2:	       move.l 96(sp),d2
    7ad6:	       jsr -312(a6)
    7ada:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7ade:	       move.l 112(sp),88(sp)
    7ae4:	       movea.l 1c344 <nowStatus>,a0
    7aea:	       move.l 22(a0),84(sp)
    7af0:	       move.l 1c9c6 <DOSBase>,d0
    7af6:	       movea.l d0,a6
    7af8:	       move.l 88(sp),d1
    7afc:	       move.l 84(sp),d2
    7b00:	       jsr -312(a6)
    7b04:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7b08:	       move.l 112(sp),76(sp)
    7b0e:	       movea.l 1c344 <nowStatus>,a0
    7b14:	       move.l 26(a0),72(sp)
    7b1a:	       move.l 1c9c6 <DOSBase>,d0
    7b20:	       movea.l d0,a6
    7b22:	       move.l 76(sp),d1
    7b26:	       move.l 72(sp),d2
    7b2a:	       jsr -312(a6)
    7b2e:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7b32:	       move.l 112(sp),64(sp)
    7b38:	       movea.l 1c344 <nowStatus>,a0
    7b3e:	       move.l 30(a0),60(sp)
    7b44:	       move.l 1c9c6 <DOSBase>,d0
    7b4a:	       movea.l d0,a6
    7b4c:	       move.l 64(sp),d1
    7b50:	       move.l 60(sp),d2
    7b54:	       jsr -312(a6)
    7b58:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7b5c:	       move.l 112(sp),52(sp)
    7b62:	       movea.l 1c344 <nowStatus>,a0
    7b68:	       move.l 34(a0),48(sp)
    7b6e:	       move.l 1c9c6 <DOSBase>,d0
    7b74:	       movea.l d0,a6
    7b76:	       move.l 52(sp),d1
    7b7a:	       move.l 48(sp),d2
    7b7e:	       jsr -312(a6)
    7b82:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7b86:	       move.l 112(sp),40(sp)
    7b8c:	       movea.l 1c344 <nowStatus>,a0
    7b92:	       move.l 38(a0),36(sp)
    7b98:	       move.l 1c9c6 <DOSBase>,d0
    7b9e:	       movea.l d0,a6
    7ba0:	       move.l 40(sp),d1
    7ba4:	       move.l 36(sp),d2
    7ba8:	       jsr -312(a6)
    7bac:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7bb0:	   /-- bra.s 7bf4 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7bb2:	/--|-> move.l 112(sp),16(sp)
    7bb8:	|  |   moveq #1,d0
    7bba:	|  |   move.l d0,12(sp)
    7bbe:	|  |   move.l 1c9c6 <DOSBase>,d0
    7bc4:	|  |   movea.l d0,a6
    7bc6:	|  |   move.l 16(sp),d1
    7bca:	|  |   move.l 12(sp),d2
    7bce:	|  |   jsr -312(a6)
    7bd2:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7bd6:	|  |   movea.l 104(sp),a0
    7bda:	|  |   move.l (a0),d0
    7bdc:	|  |   move.l 112(sp),-(sp)
    7be0:	|  |   move.l d0,-(sp)
    7be2:	|  |   jsr bd8 <writeString>
    7be8:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7bea:	|  |   movea.l 104(sp),a0
    7bee:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7bf4:	|  \-> tst.l 104(sp)
    7bf8:	\----- bne.s 7bb2 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7bfa:	       move.l 112(sp),28(sp)
    7c00:	       clr.l 24(sp)
    7c04:	       move.l 1c9c6 <DOSBase>,d0
    7c0a:	       movea.l d0,a6
    7c0c:	       move.l 28(sp),d1
    7c10:	       move.l 24(sp),d2
    7c14:	       jsr -312(a6)
    7c18:	       move.l d0,20(sp)
}
    7c1c:	       nop
    7c1e:	       move.l (sp)+,d2
    7c20:	       movea.l (sp)+,a6
    7c22:	       lea 100(sp),sp
    7c26:	       rts

00007c28 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7c28:	movea.l 1c344 <nowStatus>,a0
    7c2e:	move.l 4(sp),6(a0)
}
    7c34:	nop
    7c36:	rts

00007c38 <setStatusBar>:

void setStatusBar (char * txt) {
    7c38:	    subq.l #4,sp
    7c3a:	    move.l a6,-(sp)
    7c3c:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7c3e:	    movea.l 1c344 <nowStatus>,a0
    7c44:	    move.l (a0),d0
    7c46:	/-- beq.s 7c7a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7c48:	|   movea.l 1c344 <nowStatus>,a0
    7c4e:	|   movea.l (a0),a0
    7c50:	|   move.l (a0),8(sp)
    7c54:	|   move.l 1c9be <SysBase>,d0
    7c5a:	|   movea.l d0,a6
    7c5c:	|   movea.l 8(sp),a1
    7c60:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7c64:	|   movea.l 1c344 <nowStatus>,a0
    7c6a:	|   movea.l (a0),a2
    7c6c:	|   move.l 16(sp),-(sp)
    7c70:	|   jsr b8 <copyString>
    7c76:	|   addq.l #4,sp
    7c78:	|   move.l d0,(a2)
	}
}
    7c7a:	\-> nop
    7c7c:	    movea.l (sp)+,a2
    7c7e:	    movea.l (sp)+,a6
    7c80:	    addq.l #4,sp
    7c82:	    rts

00007c84 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7c84:	       movea.l 1c344 <nowStatus>,a0
    7c8a:	       move.l (a0),d0
    7c8c:	/----- beq.s 7c9a <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7c8e:	|      movea.l 1c344 <nowStatus>,a0
    7c94:	|      movea.l (a0),a0
    7c96:	|      move.l (a0),d0
    7c98:	|  /-- bra.s 7ca0 <statusBarText+0x1c>
	} else {
		return "";
    7c9a:	\--|-> move.l #100839,d0
	}
    7ca0:	   \-> rts

00007ca2 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7ca2:	       lea -28(sp),sp
    7ca6:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7caa:	       move.l 52(sp),-(sp)
    7cae:	       jsr 158ca <stringWidth>
    7cb4:	       addq.l #4,sp
    7cb6:	       asr.l #1,d0
    7cb8:	       move.l d0,-(sp)
    7cba:	       jsr 1767a <__floatsisf>
    7cc0:	       addq.l #4,sp
    7cc2:	       move.l d0,d1
    7cc4:	       move.l 1c35c <cameraZoom>,d0
    7cca:	       move.l d0,-(sp)
    7ccc:	       move.l d1,-(sp)
    7cce:	       jsr 17530 <__divsf3>
    7cd4:	       addq.l #8,sp
    7cd6:	       move.l d0,-(sp)
    7cd8:	       jsr 17612 <__fixsfsi>
    7cde:	       addq.l #4,sp
    7ce0:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7ce4:	       move.l 56(sp),d0
    7ce8:	       sub.l 44(sp),d0
    7cec:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7cf0:	       move.l 56(sp),d0
    7cf4:	       add.l 44(sp),d0
    7cf8:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7cfc:	       moveq #12,d0
    7cfe:	       move.l d0,32(sp)
    7d02:	       clr.l 28(sp)
    7d06:	       move.l 1c9be <SysBase>,d0
    7d0c:	       movea.l d0,a6
    7d0e:	       move.l 32(sp),d0
    7d12:	       move.l 28(sp),d1
    7d16:	       jsr -684(a6)
    7d1a:	       move.l d0,24(sp)
    7d1e:	       move.l 24(sp),d0
    7d22:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7d26:	       movea.l 1ca1a <speech>,a0
    7d2c:	       move.l 4(a0),d0
    7d30:	       movea.l 20(sp),a0
    7d34:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7d38:	       move.l 52(sp),-(sp)
    7d3c:	       jsr b8 <copyString>
    7d42:	       addq.l #4,sp
    7d44:	       movea.l 20(sp),a0
    7d48:	       move.l d0,(a0)
	newLine -> x = xx1;
    7d4a:	       movea.l 20(sp),a0
    7d4e:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7d54:	       movea.l 1ca1a <speech>,a0
    7d5a:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7d60:	       moveq #4,d0
    7d62:	       cmp.l 40(sp),d0
    7d66:	   /-- blt.s 7d88 <addSpeechLine+0xe6>
    7d68:	   |   movea.l 60(sp),a0
    7d6c:	   |   move.l (a0),d1
    7d6e:	   |   moveq #5,d0
    7d70:	   |   sub.l 40(sp),d0
    7d74:	   |   cmp.l d1,d0
    7d76:	   +-- ble.s 7d88 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7d78:	   |   moveq #5,d0
    7d7a:	   |   sub.l 40(sp),d0
    7d7e:	   |   movea.l 60(sp),a0
    7d82:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7d84:	/--|-- bra.w 7eb4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7d88:	|  \-> move.l 36(sp),-(sp)
    7d8c:	|      jsr 1767a <__floatsisf>
    7d92:	|      addq.l #4,sp
    7d94:	|      move.l d0,d2
    7d96:	|      move.l 1c912 <winWidth>,d0
    7d9c:	|      move.l d0,-(sp)
    7d9e:	|      jsr 176a2 <__floatunsisf>
    7da4:	|      addq.l #4,sp
    7da6:	|      move.l d0,d1
    7da8:	|      move.l 1c35c <cameraZoom>,d0
    7dae:	|      move.l d0,-(sp)
    7db0:	|      move.l d1,-(sp)
    7db2:	|      jsr 17530 <__divsf3>
    7db8:	|      addq.l #8,sp
    7dba:	|      move.l #1084227584,-(sp)
    7dc0:	|      move.l d0,-(sp)
    7dc2:	|      jsr 1796e <__subsf3>
    7dc8:	|      addq.l #8,sp
    7dca:	|      move.l d0,-(sp)
    7dcc:	|      move.l d2,-(sp)
    7dce:	|      jsr 17762 <__gesf2>
    7dd4:	|      addq.l #8,sp
    7dd6:	|      tst.l d0
    7dd8:	|  /-- bge.s 7dde <addSpeechLine+0x13c>
}
    7dda:	+--|-- bra.w 7eb4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7dde:	|  \-> movea.l 60(sp),a0
    7de2:	|      move.l (a0),d0
    7de4:	|      move.l d0,-(sp)
    7de6:	|      jsr 1767a <__floatsisf>
    7dec:	|      addq.l #4,sp
    7dee:	|      move.l d0,-(sp)
    7df0:	|      jsr 1759c <__extendsfdf2>
    7df6:	|      addq.l #4,sp
    7df8:	|      move.l d0,d4
    7dfa:	|      move.l d1,d5
    7dfc:	|      move.l 1c912 <winWidth>,d0
    7e02:	|      move.l d0,-(sp)
    7e04:	|      jsr 176a2 <__floatunsisf>
    7e0a:	|      addq.l #4,sp
    7e0c:	|      move.l d0,d1
    7e0e:	|      move.l 1c35c <cameraZoom>,d0
    7e14:	|      move.l d0,-(sp)
    7e16:	|      move.l d1,-(sp)
    7e18:	|      jsr 17530 <__divsf3>
    7e1e:	|      addq.l #8,sp
    7e20:	|      move.l d0,-(sp)
    7e22:	|      jsr 1759c <__extendsfdf2>
    7e28:	|      addq.l #4,sp
    7e2a:	|      clr.l -(sp)
    7e2c:	|      move.l #1075052544,-(sp)
    7e32:	|      move.l d1,-(sp)
    7e34:	|      move.l d0,-(sp)
    7e36:	|      jsr 1790c <__subdf3>
    7e3c:	|      lea 16(sp),sp
    7e40:	|      move.l d0,d2
    7e42:	|      move.l d1,d3
    7e44:	|      move.l 36(sp),-(sp)
    7e48:	|      jsr 1763a <__floatsidf>
    7e4e:	|      addq.l #4,sp
    7e50:	|      move.l d1,-(sp)
    7e52:	|      move.l d0,-(sp)
    7e54:	|      move.l d3,-(sp)
    7e56:	|      move.l d2,-(sp)
    7e58:	|      jsr 1790c <__subdf3>
    7e5e:	|      lea 16(sp),sp
    7e62:	|      move.l d1,-(sp)
    7e64:	|      move.l d0,-(sp)
    7e66:	|      move.l d5,-(sp)
    7e68:	|      move.l d4,-(sp)
    7e6a:	|      jsr 17798 <__gtdf2>
    7e70:	|      lea 16(sp),sp
    7e74:	|      tst.l d0
    7e76:	|  /-- bgt.s 7e7a <addSpeechLine+0x1d8>
}
    7e78:	+--|-- bra.s 7eb4 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7e7a:	|  \-> move.l 1c912 <winWidth>,d0
    7e80:	|      move.l d0,-(sp)
    7e82:	|      jsr 176a2 <__floatunsisf>
    7e88:	|      addq.l #4,sp
    7e8a:	|      move.l d0,d1
    7e8c:	|      move.l 1c35c <cameraZoom>,d0
    7e92:	|      move.l d0,-(sp)
    7e94:	|      move.l d1,-(sp)
    7e96:	|      jsr 17530 <__divsf3>
    7e9c:	|      addq.l #8,sp
    7e9e:	|      move.l d0,-(sp)
    7ea0:	|      jsr 17612 <__fixsfsi>
    7ea6:	|      addq.l #4,sp
    7ea8:	|      subq.l #5,d0
    7eaa:	|      sub.l 36(sp),d0
    7eae:	|      movea.l 60(sp),a0
    7eb2:	|      move.l d0,(a0)
}
    7eb4:	\----> nop
    7eb6:	       movem.l (sp)+,d2-d5/a6
    7eba:	       lea 28(sp),sp
    7ebe:	       rts

00007ec0 <initSpeech>:


void initSpeech () {
    7ec0:	       lea -12(sp),sp
    7ec4:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7ec6:	       moveq #20,d0
    7ec8:	       move.l d0,12(sp)
    7ecc:	       clr.l 8(sp)
    7ed0:	       move.l 1c9be <SysBase>,d0
    7ed6:	       movea.l d0,a6
    7ed8:	       move.l 12(sp),d0
    7edc:	       move.l 8(sp),d1
    7ee0:	       jsr -684(a6)
    7ee4:	       move.l d0,4(sp)
    7ee8:	       move.l 4(sp),d0
    7eec:	       move.l d0,1ca1a <speech>
	if (speech) {
    7ef2:	       move.l 1ca1a <speech>,d0
    7ef8:	/----- beq.s 7f24 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7efa:	|      movea.l 1ca1a <speech>,a0
    7f00:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7f02:	|      movea.l 1ca1a <speech>,a0
    7f08:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7f0c:	|      movea.l 1ca1a <speech>,a0
    7f12:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7f16:	|      movea.l 1ca1a <speech>,a0
    7f1c:	|      moveq #-1,d0
    7f1e:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7f22:	|  /-- bra.s 7f32 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7f24:	\--|-> pea 18fce <PutChar+0x12bc>
    7f2a:	   |   jsr 17248 <KPrintF>
    7f30:	   |   addq.l #4,sp
}
    7f32:	   \-> nop
    7f34:	       movea.l (sp)+,a6
    7f36:	       lea 12(sp),sp
    7f3a:	       rts

00007f3c <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7f3c:	       movea.l 1ca1a <speech>,a0
    7f42:	       move.l 4(a0),d0
    7f46:	/----- beq.s 7f54 <isThereAnySpeechGoingOn+0x18>
    7f48:	|      movea.l 1ca1a <speech>,a0
    7f4e:	|      move.l 16(a0),d0
    7f52:	|  /-- bra.s 7f56 <isThereAnySpeechGoingOn+0x1a>
    7f54:	\--|-> moveq #-1,d0
}
    7f56:	   \-> rts

00007f58 <killAllSpeech>:

void killAllSpeech () {
    7f58:	       lea -12(sp),sp
    7f5c:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7f5e:	       movea.l 1ca1a <speech>,a0
    7f64:	       move.l 12(a0),d0
    7f68:	       moveq #-1,d1
    7f6a:	       cmp.l d0,d1
    7f6c:	   /-- beq.s 7f7a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7f6e:	   |   movea.l 1ca1a <speech>,a0
    7f74:	   |   moveq #-1,d0
    7f76:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7f7a:	   \-> movea.l 1ca1a <speech>,a0
    7f80:	       move.l (a0),d0
    7f82:	/----- beq.w 800e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7f86:	|      movea.l 1ca1a <speech>,a0
    7f8c:	|      move.l (a0),d1
    7f8e:	|      lea -132(sp),sp
    7f92:	|      move.l sp,d0
    7f94:	|      movea.w #132,a0
    7f98:	|      move.l a0,-(sp)
    7f9a:	|      move.l d1,-(sp)
    7f9c:	|      move.l d0,-(sp)
    7f9e:	|      jsr 171fc <memcpy>
    7fa4:	|      lea 12(sp),sp
    7fa8:	|      jsr ab52 <makeSilent>
    7fae:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7fb2:	|      movea.l 1ca1a <speech>,a0
    7fb8:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7fba:	+----- bra.s 800e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7fbc:	|  /-> movea.l 1ca1a <speech>,a0
    7fc2:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7fc8:	|  |   movea.l 1ca1a <speech>,a0
    7fce:	|  |   movea.l 4(a0),a1
    7fd2:	|  |   movea.l 1ca1a <speech>,a0
    7fd8:	|  |   move.l 4(a1),d0
    7fdc:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7fe0:	|  |   movea.l 12(sp),a0
    7fe4:	|  |   move.l (a0),8(sp)
    7fe8:	|  |   move.l 1c9be <SysBase>,d0
    7fee:	|  |   movea.l d0,a6
    7ff0:	|  |   movea.l 8(sp),a1
    7ff4:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7ff8:	|  |   move.l 12(sp),4(sp)
    7ffe:	|  |   move.l 1c9be <SysBase>,d0
    8004:	|  |   movea.l d0,a6
    8006:	|  |   movea.l 4(sp),a1
    800a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    800e:	\--|-> movea.l 1ca1a <speech>,a0
    8014:	   |   move.l 4(a0),d0
    8018:	   \-- bne.s 7fbc <killAllSpeech+0x64>
	}
}
    801a:	       nop
    801c:	       nop
    801e:	       movea.l (sp)+,a6
    8020:	       lea 12(sp),sp
    8024:	       rts

00008026 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8026:	pea 2 <_start+0x2>
    802a:	move.l 8(sp),-(sp)
    802e:	jsr 8186 <setFrames>
    8034:	addq.l #8,sp
}
    8036:	nop
    8038:	rts

0000803a <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    803a:	       lea -52(sp),sp
    803e:	       move.l a6,-(sp)
    8040:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    8042:	       movea.l 64(sp),a0
    8046:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    804c:	       move.l 1c348 <speechSpeed>,d0
    8052:	       move.l 68(sp),-(sp)
    8056:	       move.l d0,-(sp)
    8058:	       jsr a46 <putFloat>
    805e:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    8060:	       movea.l 64(sp),a0
    8064:	       move.l 8(a0),d0
    8068:	       move.l 68(sp),-(sp)
    806c:	       move.l d0,-(sp)
    806e:	       jsr 8d0 <put2bytes>
    8074:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    8076:	       movea.l 64(sp),a0
    807a:	       move.l 16(a0),d0
    807e:	       move.l 68(sp),-(sp)
    8082:	       move.l d0,-(sp)
    8084:	       jsr 8d0 <put2bytes>
    808a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    808c:	       movea.l 64(sp),a0
    8090:	       move.l (a0),d0
    8092:	   /-- beq.s 80d6 <saveSpeech+0x9c>
			FPutC (fp, 1);
    8094:	   |   move.l 68(sp),40(sp)
    809a:	   |   moveq #1,d0
    809c:	   |   move.l d0,36(sp)
    80a0:	   |   move.l 1c9c6 <DOSBase>,d0
    80a6:	   |   movea.l d0,a6
    80a8:	   |   move.l 40(sp),d1
    80ac:	   |   move.l 36(sp),d2
    80b0:	   |   jsr -312(a6)
    80b4:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    80b8:	   |   movea.l 64(sp),a0
    80bc:	   |   movea.l (a0),a0
    80be:	   |   movea.l 114(a0),a0
    80c2:	   |   move.l 4(a0),d0
    80c6:	   |   move.l 68(sp),-(sp)
    80ca:	   |   move.l d0,-(sp)
    80cc:	   |   jsr 8d0 <put2bytes>
    80d2:	   |   addq.l #8,sp
    80d4:	/--|-- bra.s 8152 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    80d6:	|  \-> move.l 68(sp),52(sp)
    80dc:	|      clr.l 48(sp)
    80e0:	|      move.l 1c9c6 <DOSBase>,d0
    80e6:	|      movea.l d0,a6
    80e8:	|      move.l 52(sp),d1
    80ec:	|      move.l 48(sp),d2
    80f0:	|      jsr -312(a6)
    80f4:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    80f8:	+----- bra.s 8152 <saveSpeech+0x118>
			FPutC (fp, 1);
    80fa:	|  /-> move.l 68(sp),16(sp)
    8100:	|  |   moveq #1,d0
    8102:	|  |   move.l d0,12(sp)
    8106:	|  |   move.l 1c9c6 <DOSBase>,d0
    810c:	|  |   movea.l d0,a6
    810e:	|  |   move.l 16(sp),d1
    8112:	|  |   move.l 12(sp),d2
    8116:	|  |   jsr -312(a6)
    811a:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    811e:	|  |   movea.l 56(sp),a0
    8122:	|  |   move.l (a0),d0
    8124:	|  |   move.l 68(sp),-(sp)
    8128:	|  |   move.l d0,-(sp)
    812a:	|  |   jsr bd8 <writeString>
    8130:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8132:	|  |   movea.l 56(sp),a0
    8136:	|  |   move.l 8(a0),d0
    813a:	|  |   move.l 68(sp),-(sp)
    813e:	|  |   move.l d0,-(sp)
    8140:	|  |   jsr 8d0 <put2bytes>
    8146:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8148:	|  |   movea.l 56(sp),a0
    814c:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    8152:	\--|-> tst.l 56(sp)
    8156:	   \-- bne.s 80fa <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8158:	       move.l 68(sp),28(sp)
    815e:	       clr.l 24(sp)
    8162:	       move.l 1c9c6 <DOSBase>,d0
    8168:	       movea.l d0,a6
    816a:	       move.l 28(sp),d1
    816e:	       move.l 24(sp),d2
    8172:	       jsr -312(a6)
    8176:	       move.l d0,20(sp)
}
    817a:	       nop
    817c:	       move.l (sp)+,d2
    817e:	       movea.l (sp)+,a6
    8180:	       lea 52(sp),sp
    8184:	       rts

00008186 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    8186:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    8188:	movea.l 8(sp),a0
    818c:	movea.l 80(a0),a0
    8190:	move.l (a0),d2
    8192:	movea.l 8(sp),a0
    8196:	movea.l 80(a0),a0
    819a:	move.l 4(a0),d0
    819e:	move.l 12(sp),-(sp)
    81a2:	move.l d0,-(sp)
    81a4:	jsr 17bfc <__mulsi3>
    81aa:	addq.l #8,sp
    81ac:	move.l d0,d1
    81ae:	movea.l 8(sp),a0
    81b2:	move.l 106(a0),d0
    81b6:	add.l d1,d0
    81b8:	add.l d0,d0
    81ba:	add.l d0,d0
    81bc:	movea.l d2,a0
    81be:	adda.l d0,a0
    81c0:	move.l (a0),d0
    81c2:	movea.l 8(sp),a0
    81c6:	move.l d0,72(a0)
}
    81ca:	nop
    81cc:	move.l (sp)+,d2
    81ce:	rts

000081d0 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    81d0:	       lea -20(sp),sp
    81d4:	       move.l d2,-(sp)
    81d6:	       move.l 40(sp),d0
    81da:	       move.w d0,d0
    81dc:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    81e0:	       movea.l 1ca1a <speech>,a0
    81e6:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    81ec:	       move.l 32(sp),-(sp)
    81f0:	       jsr a63c <findPerson>
    81f6:	       addq.l #4,sp
    81f8:	       move.l d0,16(sp)
    if (thisPerson) {
    81fc:	   /-- beq.s 8222 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    81fe:	   |   movea.w 6(sp),a0
    8202:	   |   move.l a0,-(sp)
    8204:	   |   move.l 40(sp),-(sp)
    8208:	   |   move.l 24(sp),-(sp)
    820c:	   |   move.l 40(sp),-(sp)
    8210:	   |   jsr 82e8 <wrapSpeechPerson>
    8216:	   |   lea 16(sp),sp
    821a:	   |   move.l d0,20(sp)
    821e:	/--|-- bra.w 82dc <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8222:	|  \-> move.l 32(sp),-(sp)
    8226:	|      jsr 15a2a <getRegionForObject>
    822c:	|      addq.l #4,sp
    822e:	|      move.l d0,12(sp)
        if (thisRegion) {
    8232:	|  /-- beq.s 829e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8234:	|  |   movea.l 12(sp),a0
    8238:	|  |   movea.l 28(a0),a0
    823c:	|  |   move.l 28(a0),d0
    8240:	|  |   movea.l 12(sp),a0
    8244:	|  |   movea.l 4(a0),a1
    8248:	|  |   movea.l 12(sp),a0
    824c:	|  |   movea.l 28(a0),a0
    8250:	|  |   move.l 20(a0),d1
    8254:	|  |   movea.l a1,a0
    8256:	|  |   suba.l d1,a0
    8258:	|  |   move.l 1ca7c <cameraY>,d1
    825e:	|  |   movea.l a0,a1
    8260:	|  |   suba.l d1,a1
    8262:	|  |   movea.l 12(sp),a0
    8266:	|  |   move.l (a0),d2
    8268:	|  |   movea.l 12(sp),a0
    826c:	|  |   move.l 8(a0),d1
    8270:	|  |   add.l d2,d1
    8272:	|  |   move.l d1,d2
    8274:	|  |   asr.l #1,d2
    8276:	|  |   move.l 1ca78 <cameraX>,d1
    827c:	|  |   movea.l d2,a0
    827e:	|  |   suba.l d1,a0
    8280:	|  |   move.l 36(sp),-(sp)
    8284:	|  |   move.l d0,-(sp)
    8286:	|  |   move.l a1,-(sp)
    8288:	|  |   move.l a0,-(sp)
    828a:	|  |   move.l 44(sp),-(sp)
    828e:	|  |   jsr 8406 <wrapSpeechXY>
    8294:	|  |   lea 20(sp),sp
    8298:	|  |   move.l d0,20(sp)
    829c:	+--|-- bra.s 82dc <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    829e:	|  \-> move.l 32(sp),-(sp)
    82a2:	|      jsr d532 <findObjectType>
    82a8:	|      addq.l #4,sp
    82aa:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    82ae:	|      movea.l 8(sp),a0
    82b2:	|      move.l 28(a0),d1
    82b6:	|      move.l 1c912 <winWidth>,d0
    82bc:	|      lsr.l #1,d0
    82be:	|      move.l 36(sp),-(sp)
    82c2:	|      move.l d1,-(sp)
    82c4:	|      pea a <_start+0xa>
    82c8:	|      move.l d0,-(sp)
    82ca:	|      move.l 44(sp),-(sp)
    82ce:	|      jsr 8406 <wrapSpeechXY>
    82d4:	|      lea 20(sp),sp
    82d8:	|      move.l d0,20(sp)
        }
    }
    return i;
    82dc:	\----> move.l 20(sp),d0
}
    82e0:	       move.l (sp)+,d2
    82e2:	       lea 20(sp),sp
    82e6:	       rts

000082e8 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    82e8:	    subq.l #8,sp
    82ea:	    movem.l d2-d4,-(sp)
    82ee:	    move.l 36(sp),d0
    82f2:	    move.w d0,d0
    82f4:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    82f8:	    movea.l 28(sp),a0
    82fc:	    movea.l 114(a0),a0
    8300:	    move.l 28(a0),d2
    8304:	    movea.l 28(sp),a0
    8308:	    move.l 4(a0),d3
    830c:	    move.l 1ca7c <cameraY>,d0
    8312:	    move.l d0,-(sp)
    8314:	    jsr 1767a <__floatsisf>
    831a:	    addq.l #4,sp
    831c:	    move.l d0,-(sp)
    831e:	    move.l d3,-(sp)
    8320:	    jsr 1796e <__subsf3>
    8326:	    addq.l #8,sp
    8328:	    move.l d0,d3
    832a:	    movea.l 28(sp),a0
    832e:	    move.l 32(a0),d4
    8332:	    movea.l 28(sp),a0
    8336:	    move.l 20(a0),d1
    833a:	    movea.l 28(sp),a0
    833e:	    move.l 24(a0),d0
    8342:	    sub.l d0,d1
    8344:	    move.l d1,-(sp)
    8346:	    jsr 1767a <__floatsisf>
    834c:	    addq.l #4,sp
    834e:	    move.l d0,-(sp)
    8350:	    move.l d4,-(sp)
    8352:	    jsr 1772c <__mulsf3>
    8358:	    addq.l #8,sp
    835a:	    move.l d0,-(sp)
    835c:	    move.l d3,-(sp)
    835e:	    jsr 1796e <__subsf3>
    8364:	    addq.l #8,sp
    8366:	    move.l d0,d3
    8368:	    movea.l 28(sp),a0
    836c:	    movea.l 114(a0),a0
    8370:	    move.l 20(a0),d0
    8374:	    move.l d0,-(sp)
    8376:	    jsr 1767a <__floatsisf>
    837c:	    addq.l #4,sp
    837e:	    move.l d0,-(sp)
    8380:	    move.l d3,-(sp)
    8382:	    jsr 1796e <__subsf3>
    8388:	    addq.l #8,sp
    838a:	    move.l d0,-(sp)
    838c:	    jsr 17612 <__fixsfsi>
    8392:	    addq.l #4,sp
    8394:	    move.l d0,d4
    8396:	    movea.l 28(sp),a0
    839a:	    move.l (a0),d3
    839c:	    move.l 1ca78 <cameraX>,d0
    83a2:	    move.l d0,-(sp)
    83a4:	    jsr 1767a <__floatsisf>
    83aa:	    addq.l #4,sp
    83ac:	    move.l d0,-(sp)
    83ae:	    move.l d3,-(sp)
    83b0:	    jsr 1796e <__subsf3>
    83b6:	    addq.l #8,sp
    83b8:	    move.l d0,-(sp)
    83ba:	    jsr 17612 <__fixsfsi>
    83c0:	    addq.l #4,sp
    83c2:	    move.l 32(sp),-(sp)
    83c6:	    move.l d2,-(sp)
    83c8:	    move.l d4,-(sp)
    83ca:	    move.l d0,-(sp)
    83cc:	    move.l 40(sp),-(sp)
    83d0:	    jsr 8406 <wrapSpeechXY>
    83d6:	    lea 20(sp),sp
    83da:	    move.l d0,16(sp)
	if (animPerson) {
    83de:	    tst.w 14(sp)
    83e2:	/-- beq.s 83fa <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    83e4:	|   move.l 28(sp),-(sp)
    83e8:	|   jsr 8026 <makeTalker>
    83ee:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    83f0:	|   movea.l 1ca1a <speech>,a0
    83f6:	|   move.l 28(sp),(a0)
	}
	return i;
    83fa:	\-> move.l 16(sp),d0
}
    83fe:	    movem.l (sp)+,d2-d4
    8402:	    addq.l #8,sp
    8404:	    rts

00008406 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8406:	                   lea -16(sp),sp
    840a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    840e:	                   clr.l 16(sp)
    killAllSpeech();
    8412:	                   jsr 7f58 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8418:	                   move.l 36(sp),-(sp)
    841c:	                   jsr 13cd4 <strlen>
    8422:	                   addq.l #4,sp
    8424:	                   movea.l d0,a0
    8426:	                   lea 20(a0),a0
    842a:	                   move.l a0,-(sp)
    842c:	                   jsr 176a2 <__floatunsisf>
    8432:	                   addq.l #4,sp
    8434:	                   move.l d0,d1
    8436:	                   move.l 1c348 <speechSpeed>,d0
    843c:	                   move.l d0,-(sp)
    843e:	                   move.l d1,-(sp)
    8440:	                   jsr 1772c <__mulsf3>
    8446:	                   addq.l #8,sp
    8448:	                   move.l d0,-(sp)
    844a:	                   jsr 17612 <__fixsfsi>
    8450:	                   addq.l #4,sp
    8452:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8456:	               /-- bgt.s 845e <wrapSpeechXY+0x58>
    8458:	               |   moveq #1,d0
    845a:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    845e:	               \-> moveq #-1,d1
    8460:	                   cmp.l 52(sp),d1
    8464:	               /-- beq.s 84a4 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8466:	               |   move.l 1ca8c <speechMode>,d0
    846c:	               +-- ble.s 84a4 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    846e:	               |   clr.l -(sp)
    8470:	               |   move.l 56(sp),-(sp)
    8474:	               |   jsr d1fc <startSound>
    847a:	               |   addq.l #8,sp
    847c:	               |   tst.w d0
    847e:	               +-- beq.s 84a4 <wrapSpeechXY+0x9e>
                speechTime = -10;
    8480:	               |   moveq #-10,d0
    8482:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    8486:	               |   movea.l 1ca1a <speech>,a0
    848c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8492:	               |   move.l 1ca8c <speechMode>,d0
    8498:	               |   moveq #2,d1
    849a:	               |   cmp.l d0,d1
    849c:	               +-- bne.s 84a4 <wrapSpeechXY+0x9e>
    849e:	               |   moveq #-10,d0
    84a0:	/--------------|-- bra.w 872a <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    84a4:	|              \-> movea.l 1ca1a <speech>,a0
    84aa:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    84b0:	|     /----------- bra.w 8564 <wrapSpeechXY+0x15e>
        a = wrap;
    84b4:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    84ba:	|  |  |        /-- bra.s 84ca <wrapSpeechXY+0xc4>
            a--;
    84bc:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    84c0:	|  |  |  |     +-- bne.s 84ca <wrapSpeechXY+0xc4>
                a = wrap;
    84c2:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    84c8:	|  |  |  |  /--|-- bra.s 84dc <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    84ca:	|  |  |  |  |  \-> move.l 28(sp),d0
    84ce:	|  |  |  |  |      movea.l 36(sp),a0
    84d2:	|  |  |  |  |      adda.l d0,a0
    84d4:	|  |  |  |  |      move.b (a0),d0
    84d6:	|  |  |  |  |      cmpi.b #32,d0
    84da:	|  |  |  \--|----- bne.s 84bc <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    84dc:	|  |  |     \----> move.l 28(sp),d0
    84e0:	|  |  |            movea.l 36(sp),a0
    84e4:	|  |  |            adda.l d0,a0
    84e6:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    84e8:	|  |  |            lea 16(sp),a0
    84ec:	|  |  |            move.l a0,-(sp)
    84ee:	|  |  |            move.l 44(sp),-(sp)
    84f2:	|  |  |            move.l 44(sp),-(sp)
    84f6:	|  |  |            jsr 7ca2 <addSpeechLine>
    84fc:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    8500:	|  |  |            move.l 28(sp),d0
    8504:	|  |  |            movea.l 36(sp),a0
    8508:	|  |  |            adda.l d0,a0
    850a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    850e:	|  |  |            move.l 28(sp),d0
    8512:	|  |  |            addq.l #1,d0
    8514:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8518:	|  |  |            move.l 44(sp),-(sp)
    851c:	|  |  |            jsr 1767a <__floatsisf>
    8522:	|  |  |            addq.l #4,sp
    8524:	|  |  |            move.l d0,d2
    8526:	|  |  |            move.l 1cab6 <fontHeight>,d0
    852c:	|  |  |            move.l d0,-(sp)
    852e:	|  |  |            jsr 1767a <__floatsisf>
    8534:	|  |  |            addq.l #4,sp
    8536:	|  |  |            move.l d0,d1
    8538:	|  |  |            move.l 1c35c <cameraZoom>,d0
    853e:	|  |  |            move.l d0,-(sp)
    8540:	|  |  |            move.l d1,-(sp)
    8542:	|  |  |            jsr 17530 <__divsf3>
    8548:	|  |  |            addq.l #8,sp
    854a:	|  |  |            move.l d0,-(sp)
    854c:	|  |  |            move.l d2,-(sp)
    854e:	|  |  |            jsr 1796e <__subsf3>
    8554:	|  |  |            addq.l #8,sp
    8556:	|  |  |            move.l d0,-(sp)
    8558:	|  |  |            jsr 17612 <__fixsfsi>
    855e:	|  |  |            addq.l #4,sp
    8560:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8564:	|  |  \----------> move.l 36(sp),-(sp)
    8568:	|  |               jsr 13cd4 <strlen>
    856e:	|  |               addq.l #4,sp
    8570:	|  |               move.l d0,d1
    8572:	|  |               move.l 48(sp),d0
    8576:	|  |               cmp.l d1,d0
    8578:	|  \-------------- bcs.w 84b4 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    857c:	|                  lea 16(sp),a0
    8580:	|                  move.l a0,-(sp)
    8582:	|                  move.l 44(sp),-(sp)
    8586:	|                  move.l 44(sp),-(sp)
    858a:	|                  jsr 7ca2 <addSpeechLine>
    8590:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8594:	|                  move.l 44(sp),-(sp)
    8598:	|                  jsr 1767a <__floatsisf>
    859e:	|                  addq.l #4,sp
    85a0:	|                  move.l d0,d2
    85a2:	|                  move.l 1cab6 <fontHeight>,d0
    85a8:	|                  move.l d0,-(sp)
    85aa:	|                  jsr 1767a <__floatsisf>
    85b0:	|                  addq.l #4,sp
    85b2:	|                  move.l d0,d1
    85b4:	|                  move.l 1c35c <cameraZoom>,d0
    85ba:	|                  move.l d0,-(sp)
    85bc:	|                  move.l d1,-(sp)
    85be:	|                  jsr 17530 <__divsf3>
    85c4:	|                  addq.l #8,sp
    85c6:	|                  move.l d0,-(sp)
    85c8:	|                  move.l d2,-(sp)
    85ca:	|                  jsr 1796e <__subsf3>
    85d0:	|                  addq.l #8,sp
    85d2:	|                  move.l d0,-(sp)
    85d4:	|                  jsr 17612 <__fixsfsi>
    85da:	|                  addq.l #4,sp
    85dc:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    85e0:	|              /-- bpl.s 85fe <wrapSpeechXY+0x1f8>
    85e2:	|              |   movea.l 1ca1a <speech>,a0
    85e8:	|              |   move.l 8(a0),d0
    85ec:	|              |   movea.l 1ca1a <speech>,a0
    85f2:	|              |   sub.l 44(sp),d0
    85f6:	|              |   move.l d0,8(a0)
    85fa:	|           /--|-- bra.w 86ec <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    85fe:	|           |  \-> movea.l 1ca1a <speech>,a0
    8604:	|           |      move.l 8(a0),d0
    8608:	|           |      move.l d0,-(sp)
    860a:	|           |      jsr 1767a <__floatsisf>
    8610:	|           |      addq.l #4,sp
    8612:	|           |      move.l d0,d2
    8614:	|           |      move.l 1ca7c <cameraY>,d0
    861a:	|           |      move.l d0,-(sp)
    861c:	|           |      jsr 1767a <__floatsisf>
    8622:	|           |      addq.l #4,sp
    8624:	|           |      move.l d0,d3
    8626:	|           |      move.l 1c916 <winHeight>,d4
    862c:	|           |      move.l 1cab6 <fontHeight>,d0
    8632:	|           |      pea 3 <_start+0x3>
    8636:	|           |      move.l d0,-(sp)
    8638:	|           |      jsr 17c7a <__divsi3>
    863e:	|           |      addq.l #8,sp
    8640:	|           |      move.l d4,d1
    8642:	|           |      sub.l d0,d1
    8644:	|           |      move.l d1,-(sp)
    8646:	|           |      jsr 176a2 <__floatunsisf>
    864c:	|           |      addq.l #4,sp
    864e:	|           |      move.l d0,d1
    8650:	|           |      move.l 1c35c <cameraZoom>,d0
    8656:	|           |      move.l d0,-(sp)
    8658:	|           |      move.l d1,-(sp)
    865a:	|           |      jsr 17530 <__divsf3>
    8660:	|           |      addq.l #8,sp
    8662:	|           |      move.l d0,-(sp)
    8664:	|           |      move.l d3,-(sp)
    8666:	|           |      jsr 17436 <__addsf3>
    866c:	|           |      addq.l #8,sp
    866e:	|           |      move.l d0,-(sp)
    8670:	|           |      move.l d2,-(sp)
    8672:	|           |      jsr 177e6 <__gtsf2>
    8678:	|           |      addq.l #8,sp
    867a:	|           |      tst.l d0
    867c:	|           +----- ble.s 86ec <wrapSpeechXY+0x2e6>
    867e:	|           |      move.l 1ca7c <cameraY>,d0
    8684:	|           |      move.l d0,-(sp)
    8686:	|           |      jsr 1767a <__floatsisf>
    868c:	|           |      addq.l #4,sp
    868e:	|           |      move.l d0,d2
    8690:	|           |      move.l 1c916 <winHeight>,d3
    8696:	|           |      move.l 1cab6 <fontHeight>,d0
    869c:	|           |      pea 3 <_start+0x3>
    86a0:	|           |      move.l d0,-(sp)
    86a2:	|           |      jsr 17c7a <__divsi3>
    86a8:	|           |      addq.l #8,sp
    86aa:	|           |      move.l d3,d1
    86ac:	|           |      sub.l d0,d1
    86ae:	|           |      move.l d1,-(sp)
    86b0:	|           |      jsr 176a2 <__floatunsisf>
    86b6:	|           |      addq.l #4,sp
    86b8:	|           |      move.l d0,d1
    86ba:	|           |      move.l 1c35c <cameraZoom>,d0
    86c0:	|           |      move.l d0,-(sp)
    86c2:	|           |      move.l d1,-(sp)
    86c4:	|           |      jsr 17530 <__divsf3>
    86ca:	|           |      addq.l #8,sp
    86cc:	|           |      move.l d0,-(sp)
    86ce:	|           |      move.l d2,-(sp)
    86d0:	|           |      jsr 17436 <__addsf3>
    86d6:	|           |      addq.l #8,sp
    86d8:	|           |      movea.l 1ca1a <speech>,a2
    86de:	|           |      move.l d0,-(sp)
    86e0:	|           |      jsr 17612 <__fixsfsi>
    86e6:	|           |      addq.l #4,sp
    86e8:	|           |      move.l d0,8(a2)

    if (offset) {
    86ec:	|           \----> move.l 16(sp),d0
    86f0:	|        /-------- beq.s 8726 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    86f2:	|        |         movea.l 1ca1a <speech>,a0
    86f8:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    86fe:	|        |     /-- bra.s 8720 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    8700:	|        |  /--|-> movea.l 20(sp),a0
    8704:	|        |  |  |   move.l 8(a0),d1
    8708:	|        |  |  |   move.l 16(sp),d0
    870c:	|        |  |  |   add.l d1,d0
    870e:	|        |  |  |   movea.l 20(sp),a0
    8712:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8716:	|        |  |  |   movea.l 20(sp),a0
    871a:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    8720:	|        |  |  \-> tst.l 20(sp)
    8724:	|        |  \----- bne.s 8700 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8726:	|        \-------> move.l 24(sp),d0
}
    872a:	\----------------> movem.l (sp)+,d2-d4/a2
    872e:	                   lea 16(sp),sp
    8732:	                   rts

00008734 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8734:	       lea -12(sp),sp
    8738:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    873a:	       move.l 1ca1e <zBuffer>,12(sp)

	while(zbuffercursor) {
    8742:	   /-- bra.s 876a <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8744:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    874a:	|  |   movea.l 12(sp),a0
    874e:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8754:	|  |   move.l 8(sp),4(sp)
    875a:	|  |   move.l 1c9be <SysBase>,d0
    8760:	|  |   movea.l d0,a6
    8762:	|  |   movea.l 4(sp),a1
    8766:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    876a:	|  \-> tst.l 12(sp)
    876e:	\----- bne.s 8744 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8770:	       clr.l 1ca1e <zBuffer>
}
    8776:	       nop
    8778:	       movea.l (sp)+,a6
    877a:	       lea 12(sp),sp
    877e:	       rts

00008780 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8780:	                lea -304(sp),sp
    8784:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8788:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    878c:	                jsr 8734 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8792:	                move.l 328(sp),d0
    8796:	                move.l d0,-(sp)
    8798:	                jsr 6d92 <openFileFromNum>
    879e:	                addq.l #4,sp
    87a0:	                tst.l d0
    87a2:	            /-- bne.s 87aa <setZBuffer+0x2a>
    87a4:	            |   clr.w d0
    87a6:	/-----------|-- bra.w 8a68 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    87aa:	|           \-> move.l 1c9a6 <bigDataFile>,310(sp)
    87b2:	|               move.l 1c9c6 <DOSBase>,d0
    87b8:	|               movea.l d0,a6
    87ba:	|               move.l 310(sp),d1
    87be:	|               jsr -306(a6)
    87c2:	|               move.l d0,306(sp)
    87c6:	|               move.l 306(sp),d0
    87ca:	|               moveq #97,d1
    87cc:	|               cmp.l d0,d1
    87ce:	|        /----- bne.s 8842 <setZBuffer+0xc2>
    87d0:	|        |      move.l 1c9a6 <bigDataFile>,302(sp)
    87d8:	|        |      move.l 1c9c6 <DOSBase>,d0
    87de:	|        |      movea.l d0,a6
    87e0:	|        |      move.l 302(sp),d1
    87e4:	|        |      jsr -306(a6)
    87e8:	|        |      move.l d0,298(sp)
    87ec:	|        |      move.l 298(sp),d0
    87f0:	|        |      moveq #115,d1
    87f2:	|        |      cmp.l d0,d1
    87f4:	|        +----- bne.s 8842 <setZBuffer+0xc2>
    87f6:	|        |      move.l 1c9a6 <bigDataFile>,294(sp)
    87fe:	|        |      move.l 1c9c6 <DOSBase>,d0
    8804:	|        |      movea.l d0,a6
    8806:	|        |      move.l 294(sp),d1
    880a:	|        |      jsr -306(a6)
    880e:	|        |      move.l d0,290(sp)
    8812:	|        |      move.l 290(sp),d0
    8816:	|        |      moveq #122,d1
    8818:	|        |      cmp.l d0,d1
    881a:	|        +----- bne.s 8842 <setZBuffer+0xc2>
    881c:	|        |      move.l 1c9a6 <bigDataFile>,286(sp)
    8824:	|        |      move.l 1c9c6 <DOSBase>,d0
    882a:	|        |      movea.l d0,a6
    882c:	|        |      move.l 286(sp),d1
    8830:	|        |      jsr -306(a6)
    8834:	|        |      move.l d0,282(sp)
    8838:	|        |      move.l 282(sp),d0
    883c:	|        |      moveq #98,d1
    883e:	|        |      cmp.l d0,d1
    8840:	|        |  /-- beq.s 8856 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8842:	|        \--|-> pea 1900b <PutChar+0x12f9>
    8848:	|           |   jsr 17248 <KPrintF>
    884e:	|           |   addq.l #4,sp
		 return FALSE;
    8850:	|           |   clr.w d0
    8852:	+-----------|-- bra.w 8a68 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8856:	|           \-> move.l 1c9a6 <bigDataFile>,278(sp)
    885e:	|               move.l 1c9c6 <DOSBase>,d0
    8864:	|               movea.l d0,a6
    8866:	|               move.l 278(sp),d1
    886a:	|               jsr -306(a6)
    886e:	|               move.l d0,274(sp)
    8872:	|               move.l 274(sp),d0
    8876:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    887a:	|               moveq #28,d0
    887c:	|               move.l d0,270(sp)
    8880:	|               clr.l 266(sp)
    8884:	|               move.l 1c9be <SysBase>,d0
    888a:	|               movea.l d0,a6
    888c:	|               move.l 270(sp),d0
    8890:	|               move.l 266(sp),d1
    8894:	|               jsr -684(a6)
    8898:	|               move.l d0,262(sp)
    889c:	|               move.l 262(sp),d0
    88a0:	|               move.l d0,1ca1e <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    88a6:	|               move.l 1ca1e <zBuffer>,318(sp)

	while(numelements--)
    88ae:	|     /-------- bra.w 8a4e <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    88b2:	|  /--|-------> move.l 1c9a6 <bigDataFile>,d0
    88b8:	|  |  |         move.l d0,-(sp)
    88ba:	|  |  |         jsr 6bc <get2bytes>
    88c0:	|  |  |         addq.l #4,sp
    88c2:	|  |  |         movea.l 318(sp),a0
    88c6:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    88c8:	|  |  |         move.l 1c9a6 <bigDataFile>,d0
    88ce:	|  |  |         move.l d0,-(sp)
    88d0:	|  |  |         jsr 6bc <get2bytes>
    88d6:	|  |  |         addq.l #4,sp
    88d8:	|  |  |         movea.l 318(sp),a0
    88dc:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    88e0:	|  |  |         move.l 1c9a6 <bigDataFile>,d0
    88e6:	|  |  |         move.l d0,-(sp)
    88e8:	|  |  |         jsr 6bc <get2bytes>
    88ee:	|  |  |         addq.l #4,sp
    88f0:	|  |  |         movea.l 318(sp),a0
    88f4:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    88f8:	|  |  |         move.l 1c9a6 <bigDataFile>,d0
    88fe:	|  |  |         move.l d0,-(sp)
    8900:	|  |  |         jsr 6bc <get2bytes>
    8906:	|  |  |         addq.l #4,sp
    8908:	|  |  |         movea.l 318(sp),a0
    890c:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8910:	|  |  |         move.l 1c9a6 <bigDataFile>,d0
    8916:	|  |  |         move.l d0,-(sp)
    8918:	|  |  |         jsr 6bc <get2bytes>
    891e:	|  |  |         addq.l #4,sp
    8920:	|  |  |         movea.l 318(sp),a0
    8924:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8928:	|  |  |         movea.l 318(sp),a0
    892c:	|  |  |         move.l (a0),d0
    892e:	|  |  |         movea.l 318(sp),a0
    8932:	|  |  |         move.l 4(a0),d1
    8936:	|  |  |         move.l d1,-(sp)
    8938:	|  |  |         move.l d0,-(sp)
    893a:	|  |  |         jsr 17bfc <__mulsi3>
    8940:	|  |  |         addq.l #8,sp
    8942:	|  |  |         tst.l d0
    8944:	|  |  |     /-- bge.s 8948 <setZBuffer+0x1c8>
    8946:	|  |  |     |   addq.l #7,d0
    8948:	|  |  |     \-> asr.l #3,d0
    894a:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    894e:	|  |  |         moveq #0,d0
    8950:	|  |  |         move.w 260(sp),d0
    8954:	|  |  |         move.l d0,256(sp)
    8958:	|  |  |         moveq #2,d1
    895a:	|  |  |         move.l d1,252(sp)
    895e:	|  |  |         move.l 1c9be <SysBase>,d0
    8964:	|  |  |         movea.l d0,a6
    8966:	|  |  |         move.l 256(sp),d0
    896a:	|  |  |         move.l 252(sp),d1
    896e:	|  |  |         jsr -684(a6)
    8972:	|  |  |         move.l d0,248(sp)
    8976:	|  |  |         move.l 248(sp),d0
    897a:	|  |  |         movea.l 318(sp),a0
    897e:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8982:	|  |  |         move.l 1c9a6 <bigDataFile>,244(sp)
    898a:	|  |  |         movea.l 318(sp),a0
    898e:	|  |  |         move.l 20(a0),240(sp)
    8994:	|  |  |         moveq #1,d0
    8996:	|  |  |         move.l d0,236(sp)
    899a:	|  |  |         moveq #0,d0
    899c:	|  |  |         move.w 260(sp),d0
    89a0:	|  |  |         move.l d0,232(sp)
    89a4:	|  |  |         move.l 1c9c6 <DOSBase>,d0
    89aa:	|  |  |         movea.l d0,a6
    89ac:	|  |  |         move.l 244(sp),d1
    89b0:	|  |  |         move.l 240(sp),d2
    89b4:	|  |  |         move.l 236(sp),d3
    89b8:	|  |  |         move.l 232(sp),d4
    89bc:	|  |  |         jsr -324(a6)
    89c0:	|  |  |         move.l d0,228(sp)
    89c4:	|  |  |         move.l 228(sp),d0
    89c8:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    89cc:	|  |  |         tst.w 322(sp)
    89d0:	|  |  |  /----- beq.s 8a0c <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    89d2:	|  |  |  |      moveq #28,d1
    89d4:	|  |  |  |      move.l d1,222(sp)
    89d8:	|  |  |  |      clr.l 218(sp)
    89dc:	|  |  |  |      move.l 1c9be <SysBase>,d0
    89e2:	|  |  |  |      movea.l d0,a6
    89e4:	|  |  |  |      move.l 222(sp),d0
    89e8:	|  |  |  |      move.l 218(sp),d1
    89ec:	|  |  |  |      jsr -684(a6)
    89f0:	|  |  |  |      move.l d0,214(sp)
    89f4:	|  |  |  |      move.l 214(sp),d0
    89f8:	|  |  |  |      movea.l 318(sp),a0
    89fc:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a00:	|  |  |  |      movea.l 318(sp),a0
    8a04:	|  |  |  |      move.l 24(a0),318(sp)
    8a0a:	|  |  |  |  /-- bra.s 8a14 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8a0c:	|  |  |  \--|-> movea.l 318(sp),a0
    8a10:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8a14:	|  |  |     \-> movea.l 318(sp),a0
    8a18:	|  |  |         move.l 4(a0),d0
    8a1c:	|  |  |         move.l d0,d0
    8a1e:	|  |  |         movea.w d0,a1
    8a20:	|  |  |         movea.l 318(sp),a0
    8a24:	|  |  |         move.l (a0),d0
    8a26:	|  |  |         move.l d0,d0
    8a28:	|  |  |         movea.w d0,a0
    8a2a:	|  |  |         movea.l 318(sp),a2
    8a2e:	|  |  |         move.l 20(a2),d0
    8a32:	|  |  |         clr.l -(sp)
    8a34:	|  |  |         pea 1 <_start+0x1>
    8a38:	|  |  |         move.l a1,-(sp)
    8a3a:	|  |  |         move.l a0,-(sp)
    8a3c:	|  |  |         pea 1901f <PutChar+0x130d>
    8a42:	|  |  |         move.l d0,-(sp)
    8a44:	|  |  |         jsr 17330 <debug_register_bitmap>
    8a4a:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8a4e:	|  |  \-------> move.w 322(sp),d0
    8a52:	|  |            move.w d0,d1
    8a54:	|  |            subq.w #1,d1
    8a56:	|  |            move.w d1,322(sp)
    8a5a:	|  |            tst.w d0
    8a5c:	|  \----------- bne.w 88b2 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8a60:	|               jsr 6c8a <finishAccess>
	
	return TRUE;
    8a66:	|               moveq #1,d0
}
    8a68:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8a6c:	                lea 304(sp),sp
    8a70:	                rts

00008a72 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8a72:	          lea -32(sp),sp
    8a76:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8a78:	          move.l 40(sp),d0
    8a7c:	          addq.l #8,d0
    8a7e:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8a82:	          clr.l 32(sp)
    8a86:	   /----- bra.s 8acc <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8a88:	/--|----> movea.l 24(sp),a0
    8a8c:	|  |      movea.l 8(a0),a0
    8a90:	|  |      move.l 32(sp),d1
    8a94:	|  |      move.l d1,d0
    8a96:	|  |      lsl.l #3,d0
    8a98:	|  |      sub.l d1,d0
    8a9a:	|  |      add.l d0,d0
    8a9c:	|  |      add.l d0,d0
    8a9e:	|  |      adda.l d0,a0
    8aa0:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8aa4:	|  |      movea.l 8(sp),a0
    8aa8:	|  |      move.l 24(a0),d0
    8aac:	|  |  /-- beq.s 8ac8 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8aae:	|  |  |   movea.l 8(sp),a0
    8ab2:	|  |  |   move.l 24(a0),4(sp)
    8ab8:	|  |  |   move.l 1c9be <SysBase>,d0
    8abe:	|  |  |   movea.l d0,a6
    8ac0:	|  |  |   movea.l 4(sp),a1
    8ac4:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ac8:	|  |  \-> addq.l #1,32(sp)
    8acc:	|  \----> movea.l 24(sp),a0
    8ad0:	|         move.l (a0),d0
    8ad2:	|         cmp.l 32(sp),d0
    8ad6:	\-------- bgt.s 8a88 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8ad8:	          movea.l 24(sp),a0
    8adc:	          move.l 8(a0),20(sp)
    8ae2:	          move.l 1c9be <SysBase>,d0
    8ae8:	          movea.l d0,a6
    8aea:	          movea.l 20(sp),a1
    8aee:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8af2:	          move.l 1cad6 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8afa:	      /-- bra.s 8b06 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8afc:	   /--|-> movea.l 28(sp),a0
    8b00:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b06:	   |  \-> movea.l 28(sp),a0
    8b0a:	   |      movea.l 22(a0),a0
    8b0e:	   |      move.l (a0),d1
    8b10:	   |      movea.l 40(sp),a0
    8b14:	   |      move.l (a0),d0
    8b16:	   |      cmp.l d1,d0
    8b18:	   |  /-- beq.s 8b20 <forgetSpriteBank+0xae>
    8b1a:	   |  |   tst.l 28(sp)
    8b1e:	   \--|-- bne.s 8afc <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8b20:	      \-> tst.l 28(sp)
    8b24:	   /----- beq.s 8b4e <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b26:	   |      movea.l 40(sp),a0
    8b2a:	   |      move.l 22(a0),d0
    8b2e:	   |      movea.l 28(sp),a0
    8b32:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8b36:	   |      move.l 40(sp),12(sp)
    8b3c:	   |      move.l 1c9be <SysBase>,d0
    8b42:	   |      movea.l d0,a6
    8b44:	   |      movea.l 12(sp),a1
    8b48:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8b4c:	   |  /-- bra.s 8b74 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8b4e:	   \--|-> movea.l 1cad6 <allLoadedBanks>,a0
    8b54:	      |   move.l 22(a0),d0
    8b58:	      |   move.l d0,1cad6 <allLoadedBanks>
		FreeVec( forgetme);
    8b5e:	      |   move.l 40(sp),16(sp)
    8b64:	      |   move.l 1c9be <SysBase>,d0
    8b6a:	      |   movea.l d0,a6
    8b6c:	      |   movea.l 16(sp),a1
    8b70:	      |   jsr -690(a6)
}
    8b74:	      \-> nop
    8b76:	          movea.l (sp)+,a6
    8b78:	          lea 32(sp),sp
    8b7c:	          rts

00008b7e <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8b7e:	                      lea -84(sp),sp
    8b82:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8b86:	                      pea 1902b <PutChar+0x1319>
    8b8c:	                      jsr 17248 <KPrintF>
    8b92:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8b94:	                      clr.l 94(sp)
    8b98:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8b9c:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8ba0:	                      move.l 108(sp),-(sp)
    8ba4:	                      jsr 6d92 <openFileFromNum>
    8baa:	                      addq.l #4,sp
    8bac:	                      tst.l d0
    8bae:	                  /-- bne.s 8bc4 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8bb0:	                  |   pea 19045 <PutChar+0x1333>
    8bb6:	                  |   jsr 17248 <KPrintF>
    8bbc:	                  |   addq.l #4,sp
		return FALSE;
    8bbe:	                  |   clr.w d0
    8bc0:	/-----------------|-- bra.w 8fb8 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8bc4:	|                 \-> move.l 1c9a6 <bigDataFile>,d0
    8bca:	|                     move.l d0,-(sp)
    8bcc:	|                     jsr 6bc <get2bytes>
    8bd2:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8bd4:	|                     move.l 1c9a6 <bigDataFile>,82(sp)
    8bdc:	|                     move.l 1c9c6 <DOSBase>,d0
    8be2:	|                     movea.l d0,a6
    8be4:	|                     move.l 82(sp),d1
    8be8:	|                     jsr -306(a6)
    8bec:	|                     move.l d0,78(sp)
    8bf0:	|                     move.l 78(sp),d0
    8bf4:	|                     movea.l 112(sp),a0
    8bf8:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8bfc:	|                     move.l 1c9a6 <bigDataFile>,d0
    8c02:	|                     move.l d0,-(sp)
    8c04:	|                     jsr 6bc <get2bytes>
    8c0a:	|                     addq.l #4,sp
    8c0c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c10:	|                 /-- bgt.s 8c26 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c12:	|                 |   pea 19073 <PutChar+0x1361>
    8c18:	|                 |   jsr 17248 <KPrintF>
    8c1e:	|                 |   addq.l #4,sp
		return FALSE;
    8c20:	|                 |   clr.w d0
    8c22:	+-----------------|-- bra.w 8fb8 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8c26:	|                 \-> movea.l 112(sp),a0
    8c2a:	|                     move.l 4(a0),d0
    8c2e:	|                     moveq #3,d1
    8c30:	|                     cmp.l d0,d1
    8c32:	|                 /-- bne.s 8c40 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8c34:	|                 |   movea.l 112(sp),a0
    8c38:	|                 |   move.w #1,12(a0)
    8c3e:	|              /--|-- bra.s 8c62 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8c40:	|              |  \-> movea.l 112(sp),a0
    8c44:	|              |      move.l 4(a0),d0
    8c48:	|              |      moveq #3,d1
    8c4a:	|              |      cmp.l d0,d1
    8c4c:	|              +----- bge.s 8c62 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8c4e:	|              |      pea 190b3 <PutChar+0x13a1>
    8c54:	|              |      jsr 17248 <KPrintF>
    8c5a:	|              |      addq.l #4,sp
		return FALSE;
    8c5c:	|              |      clr.w d0
    8c5e:	+--------------|----- bra.w 8fb8 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8c62:	|              \----> movea.l 112(sp),a0
    8c66:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8c6a:	|                     move.l 74(sp),d1
    8c6e:	|                     move.l d1,d0
    8c70:	|                     lsl.l #3,d0
    8c72:	|                     sub.l d1,d0
    8c74:	|                     add.l d0,d0
    8c76:	|                     add.l d0,d0
    8c78:	|                     move.l d0,70(sp)
    8c7c:	|                     clr.l 66(sp)
    8c80:	|                     move.l 1c9be <SysBase>,d0
    8c86:	|                     movea.l d0,a6
    8c88:	|                     move.l 70(sp),d0
    8c8c:	|                     move.l 66(sp),d1
    8c90:	|                     jsr -684(a6)
    8c94:	|                     move.l d0,62(sp)
    8c98:	|                     move.l 62(sp),d0
    8c9c:	|                     movea.l 112(sp),a0
    8ca0:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8ca4:	|                     movea.l 112(sp),a0
    8ca8:	|                     move.l 8(a0),d0
    8cac:	|                 /-- bne.s 8cb4 <loadSpriteBank+0x136>
    8cae:	|                 |   clr.w d0
    8cb0:	+-----------------|-- bra.w 8fb8 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8cb4:	|                 \-> moveq #1,d0
    8cb6:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8cba:	|                     clr.l 100(sp)
    8cbe:	|     /-------------- bra.w 8f96 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8cc2:	|  /--|-------------> move.l 1c9a6 <bigDataFile>,d0
    8cc8:	|  |  |               move.l d0,-(sp)
    8cca:	|  |  |               jsr 6bc <get2bytes>
    8cd0:	|  |  |               addq.l #4,sp
    8cd2:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8cd6:	|  |  |               movea.l 112(sp),a0
    8cda:	|  |  |               movea.l 8(a0),a0
    8cde:	|  |  |               move.l 100(sp),d1
    8ce2:	|  |  |               move.l d1,d0
    8ce4:	|  |  |               lsl.l #3,d0
    8ce6:	|  |  |               sub.l d1,d0
    8ce8:	|  |  |               add.l d0,d0
    8cea:	|  |  |               add.l d0,d0
    8cec:	|  |  |               adda.l d0,a0
    8cee:	|  |  |               moveq #0,d0
    8cf0:	|  |  |               move.w 60(sp),d0
    8cf4:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8cf6:	|  |  |               movea.l 1c9a6 <bigDataFile>,a1
    8cfc:	|  |  |               movea.l 112(sp),a0
    8d00:	|  |  |               movea.l 8(a0),a0
    8d04:	|  |  |               move.l 100(sp),d1
    8d08:	|  |  |               move.l d1,d0
    8d0a:	|  |  |               lsl.l #3,d0
    8d0c:	|  |  |               sub.l d1,d0
    8d0e:	|  |  |               add.l d0,d0
    8d10:	|  |  |               add.l d0,d0
    8d12:	|  |  |               lea (0,a0,d0.l),a2
    8d16:	|  |  |               move.l a1,-(sp)
    8d18:	|  |  |               jsr 6bc <get2bytes>
    8d1e:	|  |  |               addq.l #4,sp
    8d20:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d24:	|  |  |               movea.l 1c9a6 <bigDataFile>,a1
    8d2a:	|  |  |               movea.l 112(sp),a0
    8d2e:	|  |  |               movea.l 8(a0),a0
    8d32:	|  |  |               move.l 100(sp),d1
    8d36:	|  |  |               move.l d1,d0
    8d38:	|  |  |               lsl.l #3,d0
    8d3a:	|  |  |               sub.l d1,d0
    8d3c:	|  |  |               add.l d0,d0
    8d3e:	|  |  |               add.l d0,d0
    8d40:	|  |  |               lea (0,a0,d0.l),a2
    8d44:	|  |  |               move.l a1,-(sp)
    8d46:	|  |  |               jsr 6bc <get2bytes>
    8d4c:	|  |  |               addq.l #4,sp
    8d4e:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8d52:	|  |  |               movea.l 1c9a6 <bigDataFile>,a1
    8d58:	|  |  |               movea.l 112(sp),a0
    8d5c:	|  |  |               movea.l 8(a0),a0
    8d60:	|  |  |               move.l 100(sp),d1
    8d64:	|  |  |               move.l d1,d0
    8d66:	|  |  |               lsl.l #3,d0
    8d68:	|  |  |               sub.l d1,d0
    8d6a:	|  |  |               add.l d0,d0
    8d6c:	|  |  |               add.l d0,d0
    8d6e:	|  |  |               lea (0,a0,d0.l),a2
    8d72:	|  |  |               move.l a1,-(sp)
    8d74:	|  |  |               jsr 6bc <get2bytes>
    8d7a:	|  |  |               addq.l #4,sp
    8d7c:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8d80:	|  |  |               movea.l 112(sp),a0
    8d84:	|  |  |               move.l 4(a0),d0
    8d88:	|  |  |               moveq #3,d1
    8d8a:	|  |  |               cmp.l d0,d1
    8d8c:	|  |  |     /-------- beq.w 8e28 <loadSpriteBank+0x2aa>
    8d90:	|  |  |     |         moveq #3,d1
    8d92:	|  |  |     |         cmp.l d0,d1
    8d94:	|  |  |  /--|-------- blt.w 8ece <loadSpriteBank+0x350>
    8d98:	|  |  |  |  |         moveq #1,d1
    8d9a:	|  |  |  |  |         cmp.l d0,d1
    8d9c:	|  |  |  |  |     /-- beq.s 8da8 <loadSpriteBank+0x22a>
    8d9e:	|  |  |  |  |     |   moveq #2,d1
    8da0:	|  |  |  |  |     |   cmp.l d0,d1
    8da2:	|  |  |  |  |  /--|-- beq.s 8dd4 <loadSpriteBank+0x256>
    8da4:	|  |  |  +--|--|--|-- bra.w 8ece <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8da8:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8dac:	|  |  |  |  |  |      movea.l 8(a0),a0
    8db0:	|  |  |  |  |  |      move.l 100(sp),d1
    8db4:	|  |  |  |  |  |      move.l d1,d0
    8db6:	|  |  |  |  |  |      lsl.l #3,d0
    8db8:	|  |  |  |  |  |      sub.l d1,d0
    8dba:	|  |  |  |  |  |      add.l d0,d0
    8dbc:	|  |  |  |  |  |      add.l d0,d0
    8dbe:	|  |  |  |  |  |      adda.l d0,a0
    8dc0:	|  |  |  |  |  |      move.l 4(a0),d0
    8dc4:	|  |  |  |  |  |      addq.l #2,d0
    8dc6:	|  |  |  |  |  |      move.l d0,d0
    8dc8:	|  |  |  |  |  |      add.w d0,d0
    8dca:	|  |  |  |  |  |      add.w d0,d0
    8dcc:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8dd0:	|  |  |  +--|--|----- bra.w 8ece <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8dd4:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8dd8:	|  |  |  |  |         movea.l 8(a0),a0
    8ddc:	|  |  |  |  |         move.l 100(sp),d1
    8de0:	|  |  |  |  |         move.l d1,d0
    8de2:	|  |  |  |  |         lsl.l #3,d0
    8de4:	|  |  |  |  |         sub.l d1,d0
    8de6:	|  |  |  |  |         add.l d0,d0
    8de8:	|  |  |  |  |         add.l d0,d0
    8dea:	|  |  |  |  |         adda.l d0,a0
    8dec:	|  |  |  |  |         move.l (a0),d0
    8dee:	|  |  |  |  |     /-- bpl.s 8df2 <loadSpriteBank+0x274>
    8df0:	|  |  |  |  |     |   addq.l #7,d0
    8df2:	|  |  |  |  |     \-> asr.l #3,d0
    8df4:	|  |  |  |  |         move.l d0,d2
    8df6:	|  |  |  |  |         movea.l 112(sp),a0
    8dfa:	|  |  |  |  |         movea.l 8(a0),a0
    8dfe:	|  |  |  |  |         move.l 100(sp),d1
    8e02:	|  |  |  |  |         move.l d1,d0
    8e04:	|  |  |  |  |         lsl.l #3,d0
    8e06:	|  |  |  |  |         sub.l d1,d0
    8e08:	|  |  |  |  |         add.l d0,d0
    8e0a:	|  |  |  |  |         add.l d0,d0
    8e0c:	|  |  |  |  |         adda.l d0,a0
    8e0e:	|  |  |  |  |         move.l 4(a0),d0
    8e12:	|  |  |  |  |         move.l d0,d0
    8e14:	|  |  |  |  |         move.w d2,d1
    8e16:	|  |  |  |  |         muls.w d0,d1
    8e18:	|  |  |  |  |         move.w d1,d0
    8e1a:	|  |  |  |  |         add.w d0,d0
    8e1c:	|  |  |  |  |         add.w d1,d0
    8e1e:	|  |  |  |  |         add.w d0,d0
    8e20:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e24:	|  |  |  +--|-------- bra.w 8ece <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e28:	|  |  |  |  \-------> movea.l 112(sp),a0
    8e2c:	|  |  |  |            movea.l 8(a0),a0
    8e30:	|  |  |  |            move.l 100(sp),d1
    8e34:	|  |  |  |            move.l d1,d0
    8e36:	|  |  |  |            lsl.l #3,d0
    8e38:	|  |  |  |            sub.l d1,d0
    8e3a:	|  |  |  |            add.l d0,d0
    8e3c:	|  |  |  |            add.l d0,d0
    8e3e:	|  |  |  |            adda.l d0,a0
    8e40:	|  |  |  |            move.l (a0),d0
    8e42:	|  |  |  |            andi.l #-2147483633,d0
    8e48:	|  |  |  |        /-- bpl.s 8e52 <loadSpriteBank+0x2d4>
    8e4a:	|  |  |  |        |   subq.l #1,d0
    8e4c:	|  |  |  |        |   moveq #-16,d1
    8e4e:	|  |  |  |        |   or.l d1,d0
    8e50:	|  |  |  |        |   addq.l #1,d0
    8e52:	|  |  |  |        \-> tst.l d0
    8e54:	|  |  |  |     /----- ble.s 8e5a <loadSpriteBank+0x2dc>
    8e56:	|  |  |  |     |      moveq #2,d0
    8e58:	|  |  |  |     |  /-- bra.s 8e5c <loadSpriteBank+0x2de>
    8e5a:	|  |  |  |     \--|-> clr.w d0
    8e5c:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8e60:	|  |  |  |            movea.l 112(sp),a0
    8e64:	|  |  |  |            movea.l 8(a0),a0
    8e68:	|  |  |  |            move.l 100(sp),d1
    8e6c:	|  |  |  |            move.l d1,d0
    8e6e:	|  |  |  |            lsl.l #3,d0
    8e70:	|  |  |  |            sub.l d1,d0
    8e72:	|  |  |  |            add.l d0,d0
    8e74:	|  |  |  |            add.l d0,d0
    8e76:	|  |  |  |            adda.l d0,a0
    8e78:	|  |  |  |            move.l (a0),d0
    8e7a:	|  |  |  |            movea.l d0,a0
    8e7c:	|  |  |  |            cmpa.w #0,a0
    8e80:	|  |  |  |        /-- bge.s 8e86 <loadSpriteBank+0x308>
    8e82:	|  |  |  |        |   lea 15(a0),a0
    8e86:	|  |  |  |        \-> move.l a0,d0
    8e88:	|  |  |  |            asr.l #4,d0
    8e8a:	|  |  |  |            add.l d0,d0
    8e8c:	|  |  |  |            move.l d0,d1
    8e8e:	|  |  |  |            moveq #0,d0
    8e90:	|  |  |  |            move.w 58(sp),d0
    8e94:	|  |  |  |            add.l d1,d0
    8e96:	|  |  |  |            move.l d0,d2
    8e98:	|  |  |  |            movea.l 112(sp),a0
    8e9c:	|  |  |  |            movea.l 8(a0),a0
    8ea0:	|  |  |  |            move.l 100(sp),d1
    8ea4:	|  |  |  |            move.l d1,d0
    8ea6:	|  |  |  |            lsl.l #3,d0
    8ea8:	|  |  |  |            sub.l d1,d0
    8eaa:	|  |  |  |            add.l d0,d0
    8eac:	|  |  |  |            add.l d0,d0
    8eae:	|  |  |  |            adda.l d0,a0
    8eb0:	|  |  |  |            move.l 4(a0),d0
    8eb4:	|  |  |  |            move.l d0,d0
    8eb6:	|  |  |  |            move.w d2,d1
    8eb8:	|  |  |  |            muls.w d0,d1
    8eba:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8ebe:	|  |  |  |            cmpi.w #100,98(sp)
    8ec4:	|  |  |  |        /-- bls.s 8ecc <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8ec6:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8ecc:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8ece:	|  |  |  \----------> moveq #0,d0
    8ed0:	|  |  |               move.w 98(sp),d0
    8ed4:	|  |  |               add.l d0,d0
    8ed6:	|  |  |               move.l d0,52(sp)
    8eda:	|  |  |               moveq #2,d0
    8edc:	|  |  |               move.l d0,48(sp)
    8ee0:	|  |  |               move.l 1c9be <SysBase>,d0
    8ee6:	|  |  |               movea.l d0,a6
    8ee8:	|  |  |               move.l 52(sp),d0
    8eec:	|  |  |               move.l 48(sp),d1
    8ef0:	|  |  |               jsr -684(a6)
    8ef4:	|  |  |               move.l d0,44(sp)
    8ef8:	|  |  |               movea.l 44(sp),a1
    8efc:	|  |  |               movea.l 112(sp),a0
    8f00:	|  |  |               movea.l 8(a0),a0
    8f04:	|  |  |               move.l 100(sp),d1
    8f08:	|  |  |               move.l d1,d0
    8f0a:	|  |  |               lsl.l #3,d0
    8f0c:	|  |  |               sub.l d1,d0
    8f0e:	|  |  |               add.l d0,d0
    8f10:	|  |  |               add.l d0,d0
    8f12:	|  |  |               adda.l d0,a0
    8f14:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f18:	|  |  |               move.l 1c9a6 <bigDataFile>,40(sp)
    8f20:	|  |  |               movea.l 112(sp),a0
    8f24:	|  |  |               movea.l 8(a0),a0
    8f28:	|  |  |               move.l 100(sp),d1
    8f2c:	|  |  |               move.l d1,d0
    8f2e:	|  |  |               lsl.l #3,d0
    8f30:	|  |  |               sub.l d1,d0
    8f32:	|  |  |               add.l d0,d0
    8f34:	|  |  |               add.l d0,d0
    8f36:	|  |  |               adda.l d0,a0
    8f38:	|  |  |               move.l 24(a0),36(sp)
    8f3e:	|  |  |               moveq #2,d1
    8f40:	|  |  |               move.l d1,32(sp)
    8f44:	|  |  |               move.w 98(sp),d0
    8f48:	|  |  |               lsr.w #1,d0
    8f4a:	|  |  |               move.w d0,d0
    8f4c:	|  |  |               andi.l #65535,d0
    8f52:	|  |  |               move.l d0,28(sp)
    8f56:	|  |  |               move.l 1c9c6 <DOSBase>,d0
    8f5c:	|  |  |               movea.l d0,a6
    8f5e:	|  |  |               move.l 40(sp),d1
    8f62:	|  |  |               move.l 36(sp),d2
    8f66:	|  |  |               move.l 32(sp),d3
    8f6a:	|  |  |               move.l 28(sp),d4
    8f6e:	|  |  |               jsr -324(a6)
    8f72:	|  |  |               move.l d0,24(sp)
    8f76:	|  |  |               move.l 24(sp),d0
    8f7a:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8f7e:	|  |  |           /-- bne.s 8f92 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8f80:	|  |  |           |   pea 190e8 <PutChar+0x13d6>
    8f86:	|  |  |           |   jsr 17248 <KPrintF>
    8f8c:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8f8e:	|  |  |           |   clr.w d0
    8f90:	+--|--|-----------|-- bra.s 8fb8 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8f92:	|  |  |           \-> addq.l #1,100(sp)
    8f96:	|  |  \-------------> move.l 100(sp),d0
    8f9a:	|  |                  cmp.l 74(sp),d0
    8f9e:	|  \----------------- blt.w 8cc2 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8fa2:	|                     jsr 6c8a <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8fa8:	|                     pea 1911b <PutChar+0x1409>
    8fae:	|                     jsr 17248 <KPrintF>
    8fb4:	|                     addq.l #4,sp
	return TRUE;
    8fb6:	|                     moveq #1,d0
}
    8fb8:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8fbc:	                      lea 84(sp),sp
    8fc0:	                      rts

00008fc2 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8fc2:	                   lea -16(sp),sp
    8fc6:	                   move.l 28(sp),d0
    8fca:	                   move.w d0,d0
    8fcc:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8fd0:	                   movea.l 24(sp),a0
    8fd4:	                   move.l (a0),d0
    8fd6:	                   move.l d0,-(sp)
    8fd8:	                   jsr 179da <__fixunssfsi>
    8fde:	                   addq.l #4,sp
    8fe0:	                   move.l d0,d0
    8fe2:	                   movea.l 20(sp),a0
    8fe6:	                   move.l 8(a0),d1
    8fea:	                   move.l d1,d1
    8fec:	                   movea.w d0,a0
    8fee:	                   suba.w d1,a0
    8ff0:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8ff4:	                   movea.l 24(sp),a0
    8ff8:	                   move.l 4(a0),d0
    8ffc:	                   move.l d0,-(sp)
    8ffe:	                   jsr 179da <__fixunssfsi>
    9004:	                   addq.l #4,sp
    9006:	                   move.l d0,d0
    9008:	                   movea.l 20(sp),a0
    900c:	                   move.l 12(a0),d1
    9010:	                   move.l d1,d1
    9012:	                   movea.w d0,a0
    9014:	                   suba.w d1,a0
    9016:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    901a:	                   move.w 4(sp),d0
    901e:	                   movea.w d0,a1
    9020:	                   move.w 6(sp),d0
    9024:	                   movea.w d0,a0
    9026:	                   pea 1 <_start+0x1>
    902a:	                   move.l a1,-(sp)
    902c:	                   move.l a0,-(sp)
    902e:	                   move.l 36(sp),-(sp)
    9032:	                   move.l 36(sp),-(sp)
    9036:	                   jsr 2d2e <CstScaleSprite>
    903c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9040:	                   movea.l 24(sp),a0
    9044:	                   move.l 118(a0),d0
    9048:	                   moveq #8,d1
    904a:	                   and.l d1,d0
    904c:	   /-------------- beq.w 910e <scaleSprite+0x14c>
		if (single->xhot < 0)
    9050:	   |               movea.l 20(sp),a0
    9054:	   |               move.l 8(a0),d0
    9058:	   |  /----------- bpl.s 9090 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    905a:	   |  |            tst.w 2(sp)
    905e:	   |  |     /----- beq.s 9076 <scaleSprite+0xb4>
    9060:	   |  |     |      movea.l 20(sp),a0
    9064:	   |  |     |      move.l (a0),d0
    9066:	   |  |     |      move.l d0,d1
    9068:	   |  |     |      movea.l 20(sp),a0
    906c:	   |  |     |      move.l 8(a0),d0
    9070:	   |  |     |      move.l d0,d0
    9072:	   |  |     |      sub.w d0,d1
    9074:	   |  |     |  /-- bra.s 9084 <scaleSprite+0xc2>
    9076:	   |  |     \--|-> movea.l 20(sp),a0
    907a:	   |  |        |   move.l 8(a0),d0
    907e:	   |  |        |   move.l d0,d0
    9080:	   |  |        |   move.w d0,d1
    9082:	   |  |        |   addq.w #1,d1
    9084:	   |  |        \-> movea.w 6(sp),a0
    9088:	   |  |            suba.w d1,a0
    908a:	   |  |            move.w a0,14(sp)
    908e:	   |  |  /-------- bra.s 90c4 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9090:	   |  \--|-------> tst.w 2(sp)
    9094:	   |     |  /----- beq.s 90b0 <scaleSprite+0xee>
    9096:	   |     |  |      movea.l 20(sp),a0
    909a:	   |     |  |      move.l (a0),d0
    909c:	   |     |  |      move.l d0,d1
    909e:	   |     |  |      movea.l 20(sp),a0
    90a2:	   |     |  |      move.l 8(a0),d0
    90a6:	   |     |  |      move.l d0,d0
    90a8:	   |     |  |      sub.w d0,d1
    90aa:	   |     |  |      move.w d1,d0
    90ac:	   |     |  |      subq.w #1,d0
    90ae:	   |     |  |  /-- bra.s 90ba <scaleSprite+0xf8>
    90b0:	   |     |  \--|-> movea.l 20(sp),a0
    90b4:	   |     |     |   move.l 8(a0),d0
    90b8:	   |     |     |   move.l d0,d0
    90ba:	   |     |     \-> move.w 6(sp),d1
    90be:	   |     |         sub.w d0,d1
    90c0:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90c4:	   |     \-------> movea.l 24(sp),a0
    90c8:	   |               move.l 24(a0),d0
    90cc:	   |               move.l d0,d1
    90ce:	   |               movea.l 20(sp),a0
    90d2:	   |               move.l 12(a0),d0
    90d6:	   |               move.l d0,d0
    90d8:	   |               sub.w d0,d1
    90da:	   |               movea.w 4(sp),a0
    90de:	   |               adda.w d1,a0
    90e0:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    90e4:	   |               movea.l 20(sp),a0
    90e8:	   |               move.l (a0),d0
    90ea:	   |               move.l d0,d0
    90ec:	   |               move.w 14(sp),d1
    90f0:	   |               add.w d0,d1
    90f2:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    90f6:	   |               movea.l 20(sp),a0
    90fa:	   |               move.l 4(a0),d0
    90fe:	   |               move.l d0,d0
    9100:	   |               movea.w 12(sp),a0
    9104:	   |               adda.w d0,a0
    9106:	   |               move.w a0,8(sp)
    910a:	/--|-------------- bra.w 91e0 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    910e:	|  \-------------> move.l 1ca78 <cameraX>,d0
    9114:	|                  move.l d0,d0
    9116:	|                  sub.w d0,6(sp)
		y -= cameraY;
    911a:	|                  move.l 1ca7c <cameraY>,d0
    9120:	|                  move.l d0,d0
    9122:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9126:	|                  movea.l 20(sp),a0
    912a:	|                  move.l 8(a0),d0
    912e:	|     /----------- bpl.s 9166 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9130:	|     |            tst.w 2(sp)
    9134:	|     |     /----- beq.s 914c <scaleSprite+0x18a>
    9136:	|     |     |      movea.l 20(sp),a0
    913a:	|     |     |      move.l (a0),d0
    913c:	|     |     |      move.l d0,d1
    913e:	|     |     |      movea.l 20(sp),a0
    9142:	|     |     |      move.l 8(a0),d0
    9146:	|     |     |      move.l d0,d0
    9148:	|     |     |      sub.w d0,d1
    914a:	|     |     |  /-- bra.s 915a <scaleSprite+0x198>
    914c:	|     |     \--|-> movea.l 20(sp),a0
    9150:	|     |        |   move.l 8(a0),d0
    9154:	|     |        |   move.l d0,d0
    9156:	|     |        |   move.w d0,d1
    9158:	|     |        |   addq.w #1,d1
    915a:	|     |        \-> move.w 6(sp),d0
    915e:	|     |            sub.w d1,d0
    9160:	|     |            move.w d0,14(sp)
    9164:	|     |  /-------- bra.s 919a <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9166:	|     \--|-------> tst.w 2(sp)
    916a:	|        |  /----- beq.s 9186 <scaleSprite+0x1c4>
    916c:	|        |  |      movea.l 20(sp),a0
    9170:	|        |  |      move.l (a0),d0
    9172:	|        |  |      move.l d0,d1
    9174:	|        |  |      movea.l 20(sp),a0
    9178:	|        |  |      move.l 8(a0),d0
    917c:	|        |  |      move.l d0,d0
    917e:	|        |  |      sub.w d0,d1
    9180:	|        |  |      move.w d1,d0
    9182:	|        |  |      subq.w #1,d0
    9184:	|        |  |  /-- bra.s 9190 <scaleSprite+0x1ce>
    9186:	|        |  \--|-> movea.l 20(sp),a0
    918a:	|        |     |   move.l 8(a0),d0
    918e:	|        |     |   move.l d0,d0
    9190:	|        |     \-> move.w 6(sp),d1
    9194:	|        |         sub.w d0,d1
    9196:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    919a:	|        \-------> movea.l 24(sp),a0
    919e:	|                  move.l 24(a0),d0
    91a2:	|                  move.l d0,d1
    91a4:	|                  movea.l 20(sp),a0
    91a8:	|                  move.l 12(a0),d0
    91ac:	|                  move.l d0,d0
    91ae:	|                  sub.w d0,d1
    91b0:	|                  movea.w 4(sp),a0
    91b4:	|                  adda.w d1,a0
    91b6:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    91ba:	|                  movea.l 20(sp),a0
    91be:	|                  move.l (a0),d0
    91c0:	|                  move.l d0,d0
    91c2:	|                  move.w 14(sp),d1
    91c6:	|                  add.w d0,d1
    91c8:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    91cc:	|                  movea.l 20(sp),a0
    91d0:	|                  move.l 4(a0),d0
    91d4:	|                  move.l d0,d0
    91d6:	|                  movea.w 12(sp),a0
    91da:	|                  adda.w d0,a0
    91dc:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    91e0:	\----------------> move.l 1c97a <input+0xa>,d1
    91e6:	                   moveq #0,d0
    91e8:	                   move.w 14(sp),d0
    91ec:	                   cmp.l d1,d0
    91ee:	            /----- bgt.s 9224 <scaleSprite+0x262>
    91f0:	            |      move.l 1c97a <input+0xa>,d1
    91f6:	            |      moveq #0,d0
    91f8:	            |      move.w 10(sp),d0
    91fc:	            |      cmp.l d1,d0
    91fe:	            +----- blt.s 9224 <scaleSprite+0x262>
    9200:	            |      move.l 1c97e <input+0xe>,d1
    9206:	            |      moveq #0,d0
    9208:	            |      move.w 12(sp),d0
    920c:	            |      cmp.l d1,d0
    920e:	            +----- bgt.s 9224 <scaleSprite+0x262>
    9210:	            |      move.l 1c97e <input+0xe>,d1
    9216:	            |      moveq #0,d0
    9218:	            |      move.w 8(sp),d0
    921c:	            |      cmp.l d1,d0
    921e:	            +----- blt.s 9224 <scaleSprite+0x262>
		return TRUE;
    9220:	            |      moveq #1,d0
    9222:	            |  /-- bra.s 9226 <scaleSprite+0x264>
	}
	return FALSE;
    9224:	            \--|-> clr.w d0
    9226:	               \-> lea 16(sp),sp
    922a:	                   rts

0000922c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    922c:	    move.l 4(sp),d0
    9230:	/-- bpl.s 9234 <TF_abs+0x8>
    9232:	|   neg.l d0
}
    9234:	\-> rts

00009236 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9236:	             lea -28(sp),sp
    923a:	             move.l a6,-(sp)
    923c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    923e:	             move.l #132,28(sp)
    9246:	             clr.l 24(sp)
    924a:	             move.l 1c9be <SysBase>,d0
    9250:	             movea.l d0,a6
    9252:	             move.l 28(sp),d0
    9256:	             move.l 24(sp),d1
    925a:	             jsr -684(a6)
    925e:	             move.l d0,20(sp)
    9262:	             move.l 20(sp),d0
    9266:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    926a:	         /-- bne.s 9272 <addPerson+0x3c>
    926c:	         |   clr.w d0
    926e:	/--------|-- bra.w 94a2 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9272:	|        \-> move.l 48(sp),-(sp)
    9276:	|            jsr d622 <loadObjectType>
    927c:	|            addq.l #4,sp
    927e:	|            movea.l 16(sp),a0
    9282:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9286:	|            movea.l 16(sp),a0
    928a:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9292:	|            movea.l 16(sp),a0
    9296:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    929a:	|            movea.l 16(sp),a0
    929e:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    92a2:	|            move.l 44(sp),-(sp)
    92a6:	|            jsr 1767a <__floatsisf>
    92ac:	|            addq.l #4,sp
    92ae:	|            move.l d0,d2
    92b0:	|            move.l 40(sp),-(sp)
    92b4:	|            jsr 1767a <__floatsisf>
    92ba:	|            addq.l #4,sp
    92bc:	|            move.l d2,-(sp)
    92be:	|            move.l d0,-(sp)
    92c0:	|            move.l 24(sp),-(sp)
    92c4:	|            jsr ad84 <moveAndScale>
    92ca:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    92ce:	|            movea.l 16(sp),a0
    92d2:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    92d6:	|            movea.l 16(sp),a0
    92da:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    92e0:	|            movea.l 16(sp),a0
    92e4:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    92ea:	|            movea.l 16(sp),a0
    92ee:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    92f2:	|            movea.l 16(sp),a0
    92f6:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    92fa:	|            movea.l 16(sp),a0
    92fe:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9304:	|            movea.l 16(sp),a0
    9308:	|            clr.l 106(a0)
    newPerson->angle = 180;
    930c:	|            movea.l 16(sp),a0
    9310:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9318:	|            movea.l 16(sp),a0
    931c:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9324:	|            movea.l 16(sp),a0
    9328:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    932c:	|            movea.l 16(sp),a0
    9330:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9334:	|            movea.l 16(sp),a0
    9338:	|            movea.l 114(a0),a0
    933c:	|            move.l 24(a0),d0
    9340:	|            movea.l 16(sp),a0
    9344:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9348:	|            movea.l 16(sp),a0
    934c:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9350:	|            movea.l 16(sp),a0
    9354:	|            movea.l 114(a0),a0
    9358:	|            move.l 32(a0),d0
    935c:	|            movea.l 16(sp),a0
    9360:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9364:	|            movea.l 16(sp),a0
    9368:	|            clr.b 126(a0)
    newPerson->g = 0;
    936c:	|            movea.l 16(sp),a0
    9370:	|            clr.b 127(a0)
    newPerson->b = 0;
    9374:	|            movea.l 16(sp),a0
    9378:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    937c:	|            movea.l 16(sp),a0
    9380:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9384:	|            movea.l 16(sp),a0
    9388:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    938c:	|            movea.l 16(sp),a0
    9390:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9396:	|            clr.l -(sp)
    9398:	|            move.l 20(sp),-(sp)
    939c:	|            jsr 8186 <setFrames>
    93a2:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    93a4:	|            movea.l 52(sp),a0
    93a8:	|            movea.l (a0),a0
    93aa:	|            movea.l (a0),a0
    93ac:	|            movea.l 4(a0),a0
    93b0:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    93b4:	|     /----- bpl.s 93be <addPerson+0x188>
    93b6:	|     |      move.l 12(sp),d0
    93ba:	|     |      neg.l d0
    93bc:	|     |  /-- bra.s 93c0 <addPerson+0x18a>
    93be:	|     \--|-> moveq #1,d0
    93c0:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    93c4:	|            movea.l 52(sp),a0
    93c8:	|            movea.l (a0),a0
    93ca:	|            movea.l (a0),a0
    93cc:	|            movea.l (a0),a0
    93ce:	|            move.l 8(a0),d0
    93d2:	|            cmp.l 8(sp),d0
    93d6:	|     /----- bgt.s 9408 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    93d8:	|     |      tst.l 12(sp)
    93dc:	|     |  /-- bge.s 93ea <addPerson+0x1b4>
            newPerson->height = 5;
    93de:	|     |  |   movea.l 16(sp),a0
    93e2:	|     |  |   moveq #5,d0
    93e4:	|     |  |   move.l d0,20(a0)
    93e8:	|  /--|--|-- bra.s 9434 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    93ea:	|  |  |  \-> movea.l 52(sp),a0
    93ee:	|  |  |      movea.l (a0),a0
    93f0:	|  |  |      movea.l (a0),a0
    93f2:	|  |  |      movea.l (a0),a0
    93f4:	|  |  |      movea.l 16(a0),a0
    93f8:	|  |  |      move.l 12(a0),d0
    93fc:	|  |  |      addq.l #5,d0
    93fe:	|  |  |      movea.l 16(sp),a0
    9402:	|  |  |      move.l d0,20(a0)
    9406:	|  +--|----- bra.s 9434 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9408:	|  |  \----> movea.l 52(sp),a0
    940c:	|  |         movea.l (a0),a0
    940e:	|  |         movea.l (a0),a0
    9410:	|  |         movea.l (a0),a0
    9412:	|  |         movea.l 16(a0),a0
    9416:	|  |         move.l 8(sp),d1
    941a:	|  |         move.l d1,d0
    941c:	|  |         lsl.l #3,d0
    941e:	|  |         sub.l d1,d0
    9420:	|  |         add.l d0,d0
    9422:	|  |         add.l d0,d0
    9424:	|  |         adda.l d0,a0
    9426:	|  |         move.l 12(a0),d0
    942a:	|  |         addq.l #5,d0
    942c:	|  |         movea.l 16(sp),a0
    9430:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9434:	|  \-------> move.l #117282,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    943c:	|        /-- bra.s 944c <addPerson+0x216>
        changethat = &((*changethat)->next);
    943e:	|     /--|-> movea.l 32(sp),a0
    9442:	|     |  |   move.l (a0),d0
    9444:	|     |  |   moveq #36,d1
    9446:	|     |  |   add.l d0,d1
    9448:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    944c:	|     |  \-> movea.l 32(sp),a0
    9450:	|     |      move.l (a0),d0
    9452:	|     |  /-- beq.s 947a <addPerson+0x244>
    9454:	|     |  |   movea.l 32(sp),a0
    9458:	|     |  |   movea.l (a0),a0
    945a:	|     |  |   move.l 4(a0),d2
    945e:	|     |  |   move.l 44(sp),-(sp)
    9462:	|     |  |   jsr 1767a <__floatsisf>
    9468:	|     |  |   addq.l #4,sp
    946a:	|     |  |   move.l d0,-(sp)
    946c:	|     |  |   move.l d2,-(sp)
    946e:	|     |  |   jsr 178a0 <__ltsf2>
    9474:	|     |  |   addq.l #8,sp
    9476:	|     |  |   tst.l d0
    9478:	|     \--|-- blt.s 943e <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    947a:	|        \-> movea.l 32(sp),a0
    947e:	|            move.l (a0),d0
    9480:	|            movea.l 16(sp),a0
    9484:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9488:	|            movea.l 32(sp),a0
    948c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9490:	|            movea.l 16(sp),a0
    9494:	|            move.l 114(a0),d0
    9498:	|            sne d0
    949a:	|            neg.b d0
    949c:	|            move.b d0,d0
    949e:	|            andi.w #255,d0
}
    94a2:	\----------> move.l (sp)+,d2
    94a4:	             movea.l (sp)+,a6
    94a6:	             lea 28(sp),sp
    94aa:	             rts

000094ac <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    94ac:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94ae:	       move.l 8(sp),-(sp)
    94b2:	       jsr a63c <findPerson>
    94b8:	       addq.l #4,sp
    94ba:	       move.l d0,(sp)
    if (moveMe) {
    94bc:	/----- beq.s 94f0 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    94be:	|      movea.l (sp),a0
    94c0:	|      move.l 68(a0),d0
    94c4:	|  /-- beq.s 94d6 <animatePerson+0x2a>
    94c6:	|  |   movea.l (sp),a0
    94c8:	|  |   move.l 68(a0),d0
    94cc:	|  |   move.l d0,-(sp)
    94ce:	|  |   jsr 472e <abortFunction>
    94d4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    94d6:	|  \-> movea.l (sp),a0
    94d8:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    94dc:	|      movea.l (sp),a0
    94de:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    94e2:	|      movea.l (sp),a0
    94e4:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    94e8:	|      movea.l (sp),a0
    94ea:	|      move.l 12(sp),72(a0)
    }
}
    94f0:	\----> nop
    94f2:	       addq.l #4,sp
    94f4:	       rts

000094f6 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    94f6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94f8:	       move.l 8(sp),-(sp)
    94fc:	       jsr a63c <findPerson>
    9502:	       addq.l #4,sp
    9504:	       move.l d0,(sp)
    if (moveMe) {
    9506:	/----- beq.s 9548 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9508:	|      movea.l (sp),a0
    950a:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    950e:	|      movea.l (sp),a0
    9510:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9516:	|      move.l (sp),-(sp)
    9518:	|      jsr af12 <rethinkAngle>
    951e:	|      addq.l #4,sp
        if (moveMe->walking) {
    9520:	|      movea.l (sp),a0
    9522:	|      move.w 64(a0),d0
    9526:	|  /-- beq.s 953a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9528:	|  |   pea 1 <_start+0x1>
    952c:	|  |   move.l 4(sp),-(sp)
    9530:	|  |   jsr 8186 <setFrames>
    9536:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9538:	+--|-- bra.s 9548 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    953a:	|  \-> clr.l -(sp)
    953c:	|      move.l 4(sp),-(sp)
    9540:	|      jsr 8186 <setFrames>
    9546:	|      addq.l #8,sp
}
    9548:	\----> nop
    954a:	       addq.l #4,sp
    954c:	       rts

0000954e <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    954e:	             lea -36(sp),sp
    9552:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9554:	             movea.l 44(sp),a0
    9558:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    955e:	             moveq #12,d0
    9560:	             move.l d0,28(sp)
    9564:	             clr.l 24(sp)
    9568:	             move.l 1c9be <SysBase>,d0
    956e:	             movea.l d0,a6
    9570:	             move.l 28(sp),d0
    9574:	             move.l 24(sp),d1
    9578:	             jsr -684(a6)
    957c:	             move.l d0,20(sp)
    9580:	             move.l 20(sp),d0
    9584:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9588:	         /-- bne.s 959e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    958a:	         |   pea 19135 <PutChar+0x1423>
    9590:	         |   jsr 17248 <KPrintF>
    9596:	         |   addq.l #4,sp
		return NULL;
    9598:	         |   moveq #0,d0
    959a:	/--------|-- bra.w 96f0 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    959e:	|        \-> movea.l 44(sp),a0
    95a2:	|            move.l (a0),d0
    95a4:	|            movea.l 16(sp),a0
    95a8:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    95aa:	|            movea.l 16(sp),a0
    95ae:	|            movea.l (a0),a0
    95b0:	|            move.l 4(a0),d0
    95b4:	|            addq.l #1,d0
    95b6:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95ba:	|            movea.l 16(sp),a0
    95be:	|            move.l 32(sp),8(a0)

	if (num) {
    95c4:	|  /-------- beq.w 96e4 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    95c8:	|  |         move.l 32(sp),d1
    95cc:	|  |         move.l d1,d0
    95ce:	|  |         add.l d0,d0
    95d0:	|  |         add.l d1,d0
    95d2:	|  |         add.l d0,d0
    95d4:	|  |         add.l d0,d0
    95d6:	|  |         move.l d0,12(sp)
    95da:	|  |         clr.l 8(sp)
    95de:	|  |         move.l 1c9be <SysBase>,d0
    95e4:	|  |         movea.l d0,a6
    95e6:	|  |         move.l 12(sp),d0
    95ea:	|  |         move.l 8(sp),d1
    95ee:	|  |         jsr -684(a6)
    95f2:	|  |         move.l d0,4(sp)
    95f6:	|  |         move.l 4(sp),d0
    95fa:	|  |         movea.l 16(sp),a0
    95fe:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9602:	|  |         movea.l 16(sp),a0
    9606:	|  |         move.l 4(a0),d0
    960a:	|  |     /-- bne.s 9620 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    960c:	|  |     |   pea 19135 <PutChar+0x1423>
    9612:	|  |     |   jsr 17248 <KPrintF>
    9618:	|  |     |   addq.l #4,sp
			return NULL;
    961a:	|  |     |   moveq #0,d0
    961c:	+--|-----|-- bra.w 96f0 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9620:	|  |     \-> clr.l 36(sp)
    9624:	|  |     /-- bra.w 96d6 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9628:	|  |  /--|-> movea.l 44(sp),a0
    962c:	|  |  |  |   movea.l 4(a0),a0
    9630:	|  |  |  |   move.l 36(sp),d1
    9634:	|  |  |  |   move.l d1,d0
    9636:	|  |  |  |   add.l d0,d0
    9638:	|  |  |  |   add.l d1,d0
    963a:	|  |  |  |   add.l d0,d0
    963c:	|  |  |  |   add.l d0,d0
    963e:	|  |  |  |   lea (0,a0,d0.l),a1
    9642:	|  |  |  |   movea.l 16(sp),a0
    9646:	|  |  |  |   movea.l 4(a0),a0
    964a:	|  |  |  |   move.l 36(sp),d1
    964e:	|  |  |  |   move.l d1,d0
    9650:	|  |  |  |   add.l d0,d0
    9652:	|  |  |  |   add.l d1,d0
    9654:	|  |  |  |   add.l d0,d0
    9656:	|  |  |  |   add.l d0,d0
    9658:	|  |  |  |   adda.l d0,a0
    965a:	|  |  |  |   move.l (a1),d0
    965c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    965e:	|  |  |  |   movea.l 44(sp),a0
    9662:	|  |  |  |   movea.l 4(a0),a0
    9666:	|  |  |  |   move.l 36(sp),d1
    966a:	|  |  |  |   move.l d1,d0
    966c:	|  |  |  |   add.l d0,d0
    966e:	|  |  |  |   add.l d1,d0
    9670:	|  |  |  |   add.l d0,d0
    9672:	|  |  |  |   add.l d0,d0
    9674:	|  |  |  |   lea (0,a0,d0.l),a1
    9678:	|  |  |  |   movea.l 16(sp),a0
    967c:	|  |  |  |   movea.l 4(a0),a0
    9680:	|  |  |  |   move.l 36(sp),d1
    9684:	|  |  |  |   move.l d1,d0
    9686:	|  |  |  |   add.l d0,d0
    9688:	|  |  |  |   add.l d1,d0
    968a:	|  |  |  |   add.l d0,d0
    968c:	|  |  |  |   add.l d0,d0
    968e:	|  |  |  |   adda.l d0,a0
    9690:	|  |  |  |   move.l 4(a1),d0
    9694:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9698:	|  |  |  |   movea.l 44(sp),a0
    969c:	|  |  |  |   movea.l 4(a0),a0
    96a0:	|  |  |  |   move.l 36(sp),d1
    96a4:	|  |  |  |   move.l d1,d0
    96a6:	|  |  |  |   add.l d0,d0
    96a8:	|  |  |  |   add.l d1,d0
    96aa:	|  |  |  |   add.l d0,d0
    96ac:	|  |  |  |   add.l d0,d0
    96ae:	|  |  |  |   lea (0,a0,d0.l),a1
    96b2:	|  |  |  |   movea.l 16(sp),a0
    96b6:	|  |  |  |   movea.l 4(a0),a0
    96ba:	|  |  |  |   move.l 36(sp),d1
    96be:	|  |  |  |   move.l d1,d0
    96c0:	|  |  |  |   add.l d0,d0
    96c2:	|  |  |  |   add.l d1,d0
    96c4:	|  |  |  |   add.l d0,d0
    96c6:	|  |  |  |   add.l d0,d0
    96c8:	|  |  |  |   adda.l d0,a0
    96ca:	|  |  |  |   move.l 8(a1),d0
    96ce:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    96d2:	|  |  |  |   addq.l #1,36(sp)
    96d6:	|  |  |  \-> move.l 36(sp),d0
    96da:	|  |  |      cmp.l 32(sp),d0
    96de:	|  |  \----- blt.w 9628 <copyAnim+0xda>
    96e2:	|  |     /-- bra.s 96ec <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    96e4:	|  \-----|-> movea.l 16(sp),a0
    96e8:	|        |   clr.l 4(a0)
	}

	return newAnim;
    96ec:	|        \-> move.l 16(sp),d0
}
    96f0:	\----------> movea.l (sp)+,a6
    96f2:	             lea 36(sp),sp
    96f6:	             rts

000096f8 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    96f8:	                lea -44(sp),sp
    96fc:	                move.l a6,-(sp)
    96fe:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9700:	                moveq #12,d0
    9702:	                move.l d0,40(sp)
    9706:	                clr.l 36(sp)
    970a:	                move.l 1c9be <SysBase>,d0
    9710:	                movea.l d0,a6
    9712:	                move.l 40(sp),d0
    9716:	                move.l 36(sp),d1
    971a:	                jsr -684(a6)
    971e:	                move.l d0,32(sp)
    9722:	                move.l 32(sp),d0
    9726:	                move.l d0,28(sp)
	if( !newP) {
    972a:	            /-- bne.s 9740 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    972c:	            |   pea 19156 <PutChar+0x1444>
    9732:	            |   jsr 17248 <KPrintF>
    9738:	            |   addq.l #4,sp
		return NULL;
    973a:	            |   moveq #0,d0
    973c:	/-----------|-- bra.w 9910 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9740:	|           \-> movea.l 28(sp),a0
    9744:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    974a:	|               move.l 56(sp),d1
    974e:	|               move.l d1,d0
    9750:	|               add.l d0,d0
    9752:	|               add.l d1,d0
    9754:	|               add.l d0,d0
    9756:	|               add.l d0,d0
    9758:	|               move.l d0,24(sp)
    975c:	|               clr.l 20(sp)
    9760:	|               move.l 1c9be <SysBase>,d0
    9766:	|               movea.l d0,a6
    9768:	|               move.l 24(sp),d0
    976c:	|               move.l 20(sp),d1
    9770:	|               jsr -684(a6)
    9774:	|               move.l d0,16(sp)
    9778:	|               move.l 16(sp),d0
    977c:	|               movea.l 28(sp),a0
    9780:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9784:	|               movea.l 28(sp),a0
    9788:	|               move.l 4(a0),d0
    978c:	|           /-- bne.s 97a2 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    978e:	|           |   pea 19156 <PutChar+0x1444>
    9794:	|           |   jsr 17248 <KPrintF>
    979a:	|           |   addq.l #4,sp
		return NULL;
    979c:	|           |   moveq #0,d0
    979e:	+-----------|-- bra.w 9910 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    97a2:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    97a8:	|               movea.l 60(sp),a0
    97ac:	|               move.l (a0),44(sp)
	while (a) {
    97b0:	|     /-------- bra.w 9904 <createPersonaAnim+0x20c>
		a --;
    97b4:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97b8:	|  |  |         movea.l 28(sp),a0
    97bc:	|  |  |         movea.l 4(a0),a0
    97c0:	|  |  |         move.l 48(sp),d1
    97c4:	|  |  |         move.l d1,d0
    97c6:	|  |  |         add.l d0,d0
    97c8:	|  |  |         add.l d1,d0
    97ca:	|  |  |         add.l d0,d0
    97cc:	|  |  |         add.l d0,d0
    97ce:	|  |  |         adda.l d0,a0
    97d0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    97d4:	|  |  |         movea.l 44(sp),a0
    97d8:	|  |  |         move.l (a0),d0
    97da:	|  |  |         moveq #5,d1
    97dc:	|  |  |         cmp.l d0,d1
    97de:	|  |  |     /-- bne.s 980a <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    97e0:	|  |  |     |   movea.l 28(sp),a0
    97e4:	|  |  |     |   movea.l 4(a0),a0
    97e8:	|  |  |     |   move.l 48(sp),d1
    97ec:	|  |  |     |   move.l d1,d0
    97ee:	|  |  |     |   add.l d0,d0
    97f0:	|  |  |     |   add.l d1,d0
    97f2:	|  |  |     |   add.l d0,d0
    97f4:	|  |  |     |   add.l d0,d0
    97f6:	|  |  |     |   lea (0,a0,d0.l),a1
    97fa:	|  |  |     |   movea.l 44(sp),a0
    97fe:	|  |  |     |   move.l 4(a0),d0
    9802:	|  |  |     |   move.l d0,8(a1)
    9806:	|  |  |  /--|-- bra.w 98b2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    980a:	|  |  |  |  \-> movea.l 44(sp),a0
    980e:	|  |  |  |      move.l (a0),d0
    9810:	|  |  |  |      moveq #2,d1
    9812:	|  |  |  |      cmp.l d0,d1
    9814:	|  |  |  |  /-- bne.s 9840 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9816:	|  |  |  |  |   movea.l 44(sp),a0
    981a:	|  |  |  |  |   move.l 4(a0),d2
    981e:	|  |  |  |  |   movea.l 28(sp),a0
    9822:	|  |  |  |  |   movea.l 4(a0),a0
    9826:	|  |  |  |  |   move.l 48(sp),d1
    982a:	|  |  |  |  |   move.l d1,d0
    982c:	|  |  |  |  |   add.l d0,d0
    982e:	|  |  |  |  |   add.l d1,d0
    9830:	|  |  |  |  |   add.l d0,d0
    9832:	|  |  |  |  |   add.l d0,d0
    9834:	|  |  |  |  |   adda.l d0,a0
    9836:	|  |  |  |  |   move.l d2,d0
    9838:	|  |  |  |  |   neg.l d0
    983a:	|  |  |  |  |   move.l d0,8(a0)
    983e:	|  |  |  +--|-- bra.s 98b2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9840:	|  |  |  |  \-> movea.l 44(sp),a0
    9844:	|  |  |  |      move.l (a0),d0
    9846:	|  |  |  |      moveq #6,d1
    9848:	|  |  |  |      cmp.l d0,d1
    984a:	|  |  |  |  /-- bne.s 9892 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    984c:	|  |  |  |  |   movea.l 44(sp),a0
    9850:	|  |  |  |  |   movea.l 4(a0),a0
    9854:	|  |  |  |  |   move.l (a0),d0
    9856:	|  |  |  |  |   move.l d0,-(sp)
    9858:	|  |  |  |  |   pea 1 <_start+0x1>
    985c:	|  |  |  |  |   lea 20(sp),a0
    9860:	|  |  |  |  |   move.l a0,-(sp)
    9862:	|  |  |  |  |   jsr 147e8 <getValueType>
    9868:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    986c:	|  |  |  |  |   movea.l 44(sp),a0
    9870:	|  |  |  |  |   movea.l 4(a0),a0
    9874:	|  |  |  |  |   movea.l (a0),a0
    9876:	|  |  |  |  |   move.l 8(a0),d0
    987a:	|  |  |  |  |   move.l d0,-(sp)
    987c:	|  |  |  |  |   pea 1 <_start+0x1>
    9880:	|  |  |  |  |   lea 16(sp),a0
    9884:	|  |  |  |  |   move.l a0,-(sp)
    9886:	|  |  |  |  |   jsr 147e8 <getValueType>
    988c:	|  |  |  |  |   lea 12(sp),sp
    9890:	|  |  |  +--|-- bra.s 98b2 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9892:	|  |  |  |  \-> move.l 44(sp),d0
    9896:	|  |  |  |      move.l d0,-(sp)
    9898:	|  |  |  |      pea 1 <_start+0x1>
    989c:	|  |  |  |      lea 20(sp),a0
    98a0:	|  |  |  |      move.l a0,-(sp)
    98a2:	|  |  |  |      jsr 147e8 <getValueType>
    98a8:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    98ac:	|  |  |  |      moveq #1,d0
    98ae:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    98b2:	|  |  |  \----> move.l 60(sp),-(sp)
    98b6:	|  |  |         jsr 1516c <trimStack>
    98bc:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    98be:	|  |  |         movea.l 28(sp),a0
    98c2:	|  |  |         movea.l 4(a0),a0
    98c6:	|  |  |         move.l 48(sp),d1
    98ca:	|  |  |         move.l d1,d0
    98cc:	|  |  |         add.l d0,d0
    98ce:	|  |  |         add.l d1,d0
    98d0:	|  |  |         add.l d0,d0
    98d2:	|  |  |         add.l d0,d0
    98d4:	|  |  |         adda.l d0,a0
    98d6:	|  |  |         move.l 12(sp),d0
    98da:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    98dc:	|  |  |         movea.l 28(sp),a0
    98e0:	|  |  |         movea.l 4(a0),a0
    98e4:	|  |  |         move.l 48(sp),d1
    98e8:	|  |  |         move.l d1,d0
    98ea:	|  |  |         add.l d0,d0
    98ec:	|  |  |         add.l d1,d0
    98ee:	|  |  |         add.l d0,d0
    98f0:	|  |  |         add.l d0,d0
    98f2:	|  |  |         adda.l d0,a0
    98f4:	|  |  |         move.l 8(sp),d0
    98f8:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    98fc:	|  |  |         movea.l 60(sp),a0
    9900:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9904:	|  |  \-------> tst.l 48(sp)
    9908:	|  \----------- bne.w 97b4 <createPersonaAnim+0xbc>
	}

	return newP;
    990c:	|               move.l 28(sp),d0
}
    9910:	\-------------> move.l (sp)+,d2
    9912:	                movea.l (sp)+,a6
    9914:	                lea 44(sp),sp
    9918:	                rts

0000991a <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    991a:	       lea -12(sp),sp
    991e:	       move.l a6,-(sp)

	if(orig->theSprites)
    9920:	       movea.l 20(sp),a0
    9924:	       move.l (a0),d0
    9926:	   /-- beq.s 9950 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9928:	   |   movea.l 20(sp),a0
    992c:	   |   movea.l (a0),a0
    992e:	   |   move.l 4(a0),d0
    9932:	   |   subq.l #1,d0
    9934:	   |   move.l d0,4(a0)
    9938:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    993e:	   +-- bne.s 9950 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9940:	   |   movea.l 20(sp),a0
    9944:	   |   move.l (a0),d0
    9946:	   |   move.l d0,-(sp)
    9948:	   |   jsr 8a72 <forgetSpriteBank>
    994e:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9950:	   \-> tst.l 20(sp)
    9954:	/----- beq.s 9994 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9956:	|      movea.l 20(sp),a0
    995a:	|      move.l 8(a0),d0
    995e:	|  /-- beq.s 997a <deleteAnim+0x60>
			FreeVec( orig->frames);
    9960:	|  |   movea.l 20(sp),a0
    9964:	|  |   move.l 4(a0),8(sp)
    996a:	|  |   move.l 1c9be <SysBase>,d0
    9970:	|  |   movea.l d0,a6
    9972:	|  |   movea.l 8(sp),a1
    9976:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    997a:	|  \-> move.l 20(sp),4(sp)
    9980:	|      move.l 1c9be <SysBase>,d0
    9986:	|      movea.l d0,a6
    9988:	|      movea.l 4(sp),a1
    998c:	|      jsr -690(a6)
		orig = NULL;
    9990:	|      clr.l 20(sp)
	}	
	
}
    9994:	\----> nop
    9996:	       movea.l (sp)+,a6
    9998:	       lea 12(sp),sp
    999c:	       rts

0000999e <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    999e:	          lea -124(sp),sp
    99a2:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    99a6:	          movea.l 152(sp),a0
    99aa:	          move.l 56(a0),d1
    99ae:	          movea.l 152(sp),a0
    99b2:	          move.l 60(a0),d0
    99b6:	          cmp.l d1,d0
    99b8:	      /-- bne.s 99e8 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99ba:	      |   movea.l 152(sp),a0
    99be:	      |   moveq #-1,d0
    99c0:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    99c4:	      |   movea.l 152(sp),a0
    99c8:	      |   move.l 40(a0),d0
    99cc:	      |   movea.l 152(sp),a0
    99d0:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    99d4:	      |   movea.l 152(sp),a0
    99d8:	      |   move.l 44(a0),d0
    99dc:	      |   movea.l 152(sp),a0
    99e0:	      |   move.l d0,52(a0)
    99e4:	   /--|-- bra.w 9f4e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    99e8:	   |  \-> movea.l 1cada <currentFloor>,a0
    99ee:	   |      move.l 16(a0),d1
    99f2:	   |      movea.l 152(sp),a0
    99f6:	   |      move.l 56(a0),d0
    99fa:	   |      add.l d0,d0
    99fc:	   |      add.l d0,d0
    99fe:	   |      movea.l d1,a0
    9a00:	   |      adda.l d0,a0
    9a02:	   |      move.l (a0),d1
    9a04:	   |      movea.l 152(sp),a0
    9a08:	   |      move.l 60(a0),d0
    9a0c:	   |      add.l d0,d0
    9a0e:	   |      add.l d0,d0
    9a10:	   |      movea.l d1,a0
    9a12:	   |      adda.l d0,a0
    9a14:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a18:	   |      moveq #-1,d0
    9a1a:	   |      cmp.l 144(sp),d0
    9a1e:	   |  /-- bne.s 9a26 <doBorderStuff+0x88>
    9a20:	   |  |   clr.w d0
    9a22:	/--|--|-- bra.w a04e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a26:	|  |  \-> movea.l 1cada <currentFloor>,a0
    9a2c:	|  |      move.l 12(a0),d1
    9a30:	|  |      move.l 144(sp),d0
    9a34:	|  |      lsl.l #3,d0
    9a36:	|  |      add.l d0,d1
    9a38:	|  |      movea.l 1cada <currentFloor>,a0
    9a3e:	|  |      movea.l 12(a0),a1
    9a42:	|  |      movea.l 152(sp),a0
    9a46:	|  |      move.l 56(a0),d0
    9a4a:	|  |      lsl.l #3,d0
    9a4c:	|  |      add.l a1,d0
    9a4e:	|  |      lea 40(sp),a0
    9a52:	|  |      move.l a0,-(sp)
    9a54:	|  |      lea 48(sp),a0
    9a58:	|  |      move.l a0,-(sp)
    9a5a:	|  |      move.l d1,-(sp)
    9a5c:	|  |      move.l d0,-(sp)
    9a5e:	|  |      jsr 164ca <getMatchingCorners>
    9a64:	|  |      lea 16(sp),sp
    9a68:	|  |      tst.w d0
    9a6a:	|  |  /-- bne.s 9a80 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9a6c:	|  |  |   pea 19180 <PutChar+0x146e>
    9a72:	|  |  |   jsr 17248 <KPrintF>
    9a78:	|  |  |   addq.l #4,sp
            return FALSE;
    9a7a:	|  |  |   clr.w d0
    9a7c:	+--|--|-- bra.w a04e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9a80:	|  |  \-> movea.l 152(sp),a0
    9a84:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9a8a:	|  |      movea.l 152(sp),a0
    9a8e:	|  |      move.l (a0),d0
    9a90:	|  |      move.l d0,-(sp)
    9a92:	|  |      jsr 17612 <__fixsfsi>
    9a98:	|  |      addq.l #4,sp
    9a9a:	|  |      move.l d0,140(sp)
    9a9e:	|  |      movea.l 152(sp),a0
    9aa2:	|  |      move.l 4(a0),d0
    9aa6:	|  |      move.l d0,-(sp)
    9aa8:	|  |      jsr 17612 <__fixsfsi>
    9aae:	|  |      addq.l #4,sp
    9ab0:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9ab4:	|  |      movea.l 152(sp),a0
    9ab8:	|  |      move.l 40(a0),132(sp)
    9abe:	|  |      movea.l 152(sp),a0
    9ac2:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ac8:	|  |      movea.l 1cada <currentFloor>,a0
    9ace:	|  |      move.l 4(a0),d1
    9ad2:	|  |      move.l 44(sp),d0
    9ad6:	|  |      lsl.l #3,d0
    9ad8:	|  |      movea.l d1,a0
    9ada:	|  |      adda.l d0,a0
    9adc:	|  |      move.l (a0),124(sp)
    9ae0:	|  |      movea.l 1cada <currentFloor>,a0
    9ae6:	|  |      move.l 4(a0),d1
    9aea:	|  |      move.l 44(sp),d0
    9aee:	|  |      lsl.l #3,d0
    9af0:	|  |      movea.l d1,a0
    9af2:	|  |      adda.l d0,a0
    9af4:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9afa:	|  |      movea.l 1cada <currentFloor>,a0
    9b00:	|  |      move.l 4(a0),d1
    9b04:	|  |      move.l 40(sp),d0
    9b08:	|  |      lsl.l #3,d0
    9b0a:	|  |      movea.l d1,a0
    9b0c:	|  |      adda.l d0,a0
    9b0e:	|  |      move.l (a0),116(sp)
    9b12:	|  |      movea.l 1cada <currentFloor>,a0
    9b18:	|  |      move.l 4(a0),d1
    9b1c:	|  |      move.l 40(sp),d0
    9b20:	|  |      lsl.l #3,d0
    9b22:	|  |      movea.l d1,a0
    9b24:	|  |      adda.l d0,a0
    9b26:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b2c:	|  |      move.l 140(sp),d0
    9b30:	|  |      sub.l 132(sp),d0
    9b34:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b38:	|  |      move.l 136(sp),d0
    9b3c:	|  |      sub.l 128(sp),d0
    9b40:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b44:	|  |      move.l 116(sp),d0
    9b48:	|  |      sub.l 124(sp),d0
    9b4c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b50:	|  |      move.l 112(sp),d0
    9b54:	|  |      sub.l 120(sp),d0
    9b58:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9b5c:	|  |      move.l 124(sp),d0
    9b60:	|  |      sub.l 140(sp),d0
    9b64:	|  |      move.l 104(sp),-(sp)
    9b68:	|  |      move.l d0,-(sp)
    9b6a:	|  |      jsr 17bfc <__mulsi3>
    9b70:	|  |      addq.l #8,sp
    9b72:	|  |      move.l d0,d2
    9b74:	|  |      move.l 120(sp),d0
    9b78:	|  |      sub.l 136(sp),d0
    9b7c:	|  |      move.l 108(sp),-(sp)
    9b80:	|  |      move.l d0,-(sp)
    9b82:	|  |      jsr 17bfc <__mulsi3>
    9b88:	|  |      addq.l #8,sp
    9b8a:	|  |      move.l d2,d1
    9b8c:	|  |      sub.l d0,d1
    9b8e:	|  |      move.l d1,-(sp)
    9b90:	|  |      jsr 1763a <__floatsidf>
    9b96:	|  |      addq.l #4,sp
    9b98:	|  |      move.l d0,32(sp)
    9b9c:	|  |      move.l d1,36(sp)
    9ba0:	|  |      move.l 32(sp),88(sp)
    9ba6:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9bac:	|  |      move.l 96(sp),-(sp)
    9bb0:	|  |      move.l 112(sp),-(sp)
    9bb4:	|  |      jsr 17bfc <__mulsi3>
    9bba:	|  |      addq.l #8,sp
    9bbc:	|  |      move.l d0,d2
    9bbe:	|  |      move.l 100(sp),-(sp)
    9bc2:	|  |      move.l 108(sp),-(sp)
    9bc6:	|  |      jsr 17bfc <__mulsi3>
    9bcc:	|  |      addq.l #8,sp
    9bce:	|  |      move.l d2,d1
    9bd0:	|  |      sub.l d0,d1
    9bd2:	|  |      move.l d1,-(sp)
    9bd4:	|  |      jsr 1763a <__floatsidf>
    9bda:	|  |      addq.l #4,sp
    9bdc:	|  |      move.l d1,-(sp)
    9bde:	|  |      move.l d0,-(sp)
    9be0:	|  |      move.l 100(sp),-(sp)
    9be4:	|  |      move.l 100(sp),-(sp)
    9be8:	|  |      jsr 174ce <__divdf3>
    9bee:	|  |      lea 16(sp),sp
    9bf2:	|  |      move.l d0,24(sp)
    9bf6:	|  |      move.l d1,28(sp)
    9bfa:	|  |      move.l 24(sp),88(sp)
    9c00:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9c06:	|  |      clr.l -(sp)
    9c08:	|  |      clr.l -(sp)
    9c0a:	|  |      move.l 100(sp),-(sp)
    9c0e:	|  |      move.l 100(sp),-(sp)
    9c12:	|  |      jsr 17798 <__gtdf2>
    9c18:	|  |      lea 16(sp),sp
    9c1c:	|  |      tst.l d0
    9c1e:	|  |  /-- ble.w 9cf6 <doBorderStuff+0x358>
    9c22:	|  |  |   clr.l -(sp)
    9c24:	|  |  |   move.l #1072693248,-(sp)
    9c2a:	|  |  |   move.l 100(sp),-(sp)
    9c2e:	|  |  |   move.l 100(sp),-(sp)
    9c32:	|  |  |   jsr 17852 <__ltdf2>
    9c38:	|  |  |   lea 16(sp),sp
    9c3c:	|  |  |   tst.l d0
    9c3e:	|  |  +-- bge.w 9cf6 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c42:	|  |  |   move.l 124(sp),-(sp)
    9c46:	|  |  |   jsr 1763a <__floatsidf>
    9c4c:	|  |  |   addq.l #4,sp
    9c4e:	|  |  |   move.l d0,d2
    9c50:	|  |  |   move.l d1,d3
    9c52:	|  |  |   move.l 100(sp),-(sp)
    9c56:	|  |  |   jsr 1763a <__floatsidf>
    9c5c:	|  |  |   addq.l #4,sp
    9c5e:	|  |  |   move.l 92(sp),-(sp)
    9c62:	|  |  |   move.l 92(sp),-(sp)
    9c66:	|  |  |   move.l d1,-(sp)
    9c68:	|  |  |   move.l d0,-(sp)
    9c6a:	|  |  |   jsr 176ca <__muldf3>
    9c70:	|  |  |   lea 16(sp),sp
    9c74:	|  |  |   move.l d1,-(sp)
    9c76:	|  |  |   move.l d0,-(sp)
    9c78:	|  |  |   move.l d3,-(sp)
    9c7a:	|  |  |   move.l d2,-(sp)
    9c7c:	|  |  |   jsr 1746c <__adddf3>
    9c82:	|  |  |   lea 16(sp),sp
    9c86:	|  |  |   move.l d1,-(sp)
    9c88:	|  |  |   move.l d0,-(sp)
    9c8a:	|  |  |   jsr 175dc <__fixdfsi>
    9c90:	|  |  |   addq.l #8,sp
    9c92:	|  |  |   movea.l 152(sp),a0
    9c96:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9c9a:	|  |  |   move.l 120(sp),-(sp)
    9c9e:	|  |  |   jsr 1763a <__floatsidf>
    9ca4:	|  |  |   addq.l #4,sp
    9ca6:	|  |  |   move.l d0,d2
    9ca8:	|  |  |   move.l d1,d3
    9caa:	|  |  |   move.l 96(sp),-(sp)
    9cae:	|  |  |   jsr 1763a <__floatsidf>
    9cb4:	|  |  |   addq.l #4,sp
    9cb6:	|  |  |   move.l 92(sp),-(sp)
    9cba:	|  |  |   move.l 92(sp),-(sp)
    9cbe:	|  |  |   move.l d1,-(sp)
    9cc0:	|  |  |   move.l d0,-(sp)
    9cc2:	|  |  |   jsr 176ca <__muldf3>
    9cc8:	|  |  |   lea 16(sp),sp
    9ccc:	|  |  |   move.l d1,-(sp)
    9cce:	|  |  |   move.l d0,-(sp)
    9cd0:	|  |  |   move.l d3,-(sp)
    9cd2:	|  |  |   move.l d2,-(sp)
    9cd4:	|  |  |   jsr 1746c <__adddf3>
    9cda:	|  |  |   lea 16(sp),sp
    9cde:	|  |  |   move.l d1,-(sp)
    9ce0:	|  |  |   move.l d0,-(sp)
    9ce2:	|  |  |   jsr 175dc <__fixdfsi>
    9ce8:	|  |  |   addq.l #8,sp
    9cea:	|  |  |   movea.l 152(sp),a0
    9cee:	|  |  |   move.l d0,52(a0)
    9cf2:	|  +--|-- bra.w 9f4e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9cf6:	|  |  \-> move.l 140(sp),d0
    9cfa:	|  |      sub.l 124(sp),d0
    9cfe:	|  |      move.l d0,84(sp)
    9d02:	|  |      move.l 140(sp),d0
    9d06:	|  |      sub.l 116(sp),d0
    9d0a:	|  |      move.l d0,80(sp)
    9d0e:	|  |      move.l 132(sp),d0
    9d12:	|  |      sub.l 124(sp),d0
    9d16:	|  |      move.l d0,76(sp)
    9d1a:	|  |      move.l 132(sp),d0
    9d1e:	|  |      sub.l 116(sp),d0
    9d22:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d26:	|  |      move.l 136(sp),d0
    9d2a:	|  |      sub.l 120(sp),d0
    9d2e:	|  |      move.l d0,68(sp)
    9d32:	|  |      move.l 136(sp),d0
    9d36:	|  |      sub.l 112(sp),d0
    9d3a:	|  |      move.l d0,64(sp)
    9d3e:	|  |      move.l 128(sp),d0
    9d42:	|  |      sub.l 120(sp),d0
    9d46:	|  |      move.l d0,60(sp)
    9d4a:	|  |      move.l 128(sp),d0
    9d4e:	|  |      sub.l 112(sp),d0
    9d52:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d56:	|  |      move.l 84(sp),-(sp)
    9d5a:	|  |      move.l 88(sp),-(sp)
    9d5e:	|  |      jsr 17bfc <__mulsi3>
    9d64:	|  |      addq.l #8,sp
    9d66:	|  |      move.l d0,84(sp)
    9d6a:	|  |      move.l 80(sp),-(sp)
    9d6e:	|  |      move.l 84(sp),-(sp)
    9d72:	|  |      jsr 17bfc <__mulsi3>
    9d78:	|  |      addq.l #8,sp
    9d7a:	|  |      move.l d0,80(sp)
    9d7e:	|  |      move.l 76(sp),-(sp)
    9d82:	|  |      move.l 80(sp),-(sp)
    9d86:	|  |      jsr 17bfc <__mulsi3>
    9d8c:	|  |      addq.l #8,sp
    9d8e:	|  |      move.l d0,76(sp)
    9d92:	|  |      move.l 72(sp),-(sp)
    9d96:	|  |      move.l 76(sp),-(sp)
    9d9a:	|  |      jsr 17bfc <__mulsi3>
    9da0:	|  |      addq.l #8,sp
    9da2:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9da6:	|  |      move.l 68(sp),-(sp)
    9daa:	|  |      move.l 72(sp),-(sp)
    9dae:	|  |      jsr 17bfc <__mulsi3>
    9db4:	|  |      addq.l #8,sp
    9db6:	|  |      move.l d0,68(sp)
    9dba:	|  |      move.l 64(sp),-(sp)
    9dbe:	|  |      move.l 68(sp),-(sp)
    9dc2:	|  |      jsr 17bfc <__mulsi3>
    9dc8:	|  |      addq.l #8,sp
    9dca:	|  |      move.l d0,64(sp)
    9dce:	|  |      move.l 60(sp),-(sp)
    9dd2:	|  |      move.l 64(sp),-(sp)
    9dd6:	|  |      jsr 17bfc <__mulsi3>
    9ddc:	|  |      addq.l #8,sp
    9dde:	|  |      move.l d0,60(sp)
    9de2:	|  |      move.l 56(sp),-(sp)
    9de6:	|  |      move.l 60(sp),-(sp)
    9dea:	|  |      jsr 17bfc <__mulsi3>
    9df0:	|  |      addq.l #8,sp
    9df2:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9df6:	|  |      move.l 84(sp),-(sp)
    9dfa:	|  |      jsr 1763a <__floatsidf>
    9e00:	|  |      addq.l #4,sp
    9e02:	|  |      move.l d0,d2
    9e04:	|  |      move.l d1,d3
    9e06:	|  |      move.l 68(sp),-(sp)
    9e0a:	|  |      jsr 1763a <__floatsidf>
    9e10:	|  |      addq.l #4,sp
    9e12:	|  |      move.l d1,-(sp)
    9e14:	|  |      move.l d0,-(sp)
    9e16:	|  |      move.l d3,-(sp)
    9e18:	|  |      move.l d2,-(sp)
    9e1a:	|  |      jsr 1746c <__adddf3>
    9e20:	|  |      lea 16(sp),sp
    9e24:	|  |      move.l d1,-(sp)
    9e26:	|  |      move.l d0,-(sp)
    9e28:	|  |      jsr 17bb2 <sqrt>
    9e2e:	|  |      addq.l #8,sp
    9e30:	|  |      move.l d0,d2
    9e32:	|  |      move.l d1,d3
    9e34:	|  |      move.l 76(sp),-(sp)
    9e38:	|  |      jsr 1763a <__floatsidf>
    9e3e:	|  |      addq.l #4,sp
    9e40:	|  |      move.l d0,d4
    9e42:	|  |      move.l d1,d5
    9e44:	|  |      move.l 60(sp),-(sp)
    9e48:	|  |      jsr 1763a <__floatsidf>
    9e4e:	|  |      addq.l #4,sp
    9e50:	|  |      move.l d1,-(sp)
    9e52:	|  |      move.l d0,-(sp)
    9e54:	|  |      move.l d5,-(sp)
    9e56:	|  |      move.l d4,-(sp)
    9e58:	|  |      jsr 1746c <__adddf3>
    9e5e:	|  |      lea 16(sp),sp
    9e62:	|  |      move.l d1,-(sp)
    9e64:	|  |      move.l d0,-(sp)
    9e66:	|  |      jsr 17bb2 <sqrt>
    9e6c:	|  |      addq.l #8,sp
    9e6e:	|  |      move.l d1,-(sp)
    9e70:	|  |      move.l d0,-(sp)
    9e72:	|  |      move.l d3,-(sp)
    9e74:	|  |      move.l d2,-(sp)
    9e76:	|  |      jsr 1746c <__adddf3>
    9e7c:	|  |      lea 16(sp),sp
    9e80:	|  |      move.l d0,d2
    9e82:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9e84:	|  |      move.l 80(sp),-(sp)
    9e88:	|  |      jsr 1763a <__floatsidf>
    9e8e:	|  |      addq.l #4,sp
    9e90:	|  |      move.l d0,d4
    9e92:	|  |      move.l d1,d5
    9e94:	|  |      move.l 64(sp),-(sp)
    9e98:	|  |      jsr 1763a <__floatsidf>
    9e9e:	|  |      addq.l #4,sp
    9ea0:	|  |      move.l d1,-(sp)
    9ea2:	|  |      move.l d0,-(sp)
    9ea4:	|  |      move.l d5,-(sp)
    9ea6:	|  |      move.l d4,-(sp)
    9ea8:	|  |      jsr 1746c <__adddf3>
    9eae:	|  |      lea 16(sp),sp
    9eb2:	|  |      move.l d1,-(sp)
    9eb4:	|  |      move.l d0,-(sp)
    9eb6:	|  |      jsr 17bb2 <sqrt>
    9ebc:	|  |      addq.l #8,sp
    9ebe:	|  |      move.l d0,d4
    9ec0:	|  |      move.l d1,d5
    9ec2:	|  |      move.l 72(sp),-(sp)
    9ec6:	|  |      jsr 1763a <__floatsidf>
    9ecc:	|  |      addq.l #4,sp
    9ece:	|  |      move.l d0,d6
    9ed0:	|  |      move.l d1,d7
    9ed2:	|  |      move.l 56(sp),-(sp)
    9ed6:	|  |      jsr 1763a <__floatsidf>
    9edc:	|  |      addq.l #4,sp
    9ede:	|  |      move.l d1,-(sp)
    9ee0:	|  |      move.l d0,-(sp)
    9ee2:	|  |      move.l d7,-(sp)
    9ee4:	|  |      move.l d6,-(sp)
    9ee6:	|  |      jsr 1746c <__adddf3>
    9eec:	|  |      lea 16(sp),sp
    9ef0:	|  |      move.l d1,-(sp)
    9ef2:	|  |      move.l d0,-(sp)
    9ef4:	|  |      jsr 17bb2 <sqrt>
    9efa:	|  |      addq.l #8,sp
    9efc:	|  |      move.l d1,-(sp)
    9efe:	|  |      move.l d0,-(sp)
    9f00:	|  |      move.l d5,-(sp)
    9f02:	|  |      move.l d4,-(sp)
    9f04:	|  |      jsr 1746c <__adddf3>
    9f0a:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f0e:	|  |      move.l d1,-(sp)
    9f10:	|  |      move.l d0,-(sp)
    9f12:	|  |      move.l d3,-(sp)
    9f14:	|  |      move.l d2,-(sp)
    9f16:	|  |      jsr 17852 <__ltdf2>
    9f1c:	|  |      lea 16(sp),sp
    9f20:	|  |      tst.l d0
    9f22:	|  |  /-- bge.s 9f3a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f24:	|  |  |   movea.l 152(sp),a0
    9f28:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f2e:	|  |  |   movea.l 152(sp),a0
    9f32:	|  |  |   move.l 120(sp),52(a0)
    9f38:	|  +--|-- bra.s 9f4e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f3a:	|  |  \-> movea.l 152(sp),a0
    9f3e:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f44:	|  |      movea.l 152(sp),a0
    9f48:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f4e:	|  \----> movea.l 152(sp),a0
    9f52:	|         move.l 52(a0),d0
    9f56:	|         move.l d0,-(sp)
    9f58:	|         jsr 1767a <__floatsisf>
    9f5e:	|         addq.l #4,sp
    9f60:	|         move.l d0,d1
    9f62:	|         movea.l 152(sp),a0
    9f66:	|         move.l 4(a0),d0
    9f6a:	|         move.l d0,-(sp)
    9f6c:	|         move.l d1,-(sp)
    9f6e:	|         jsr 1796e <__subsf3>
    9f74:	|         addq.l #8,sp
    9f76:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9f7a:	|         movea.l 152(sp),a0
    9f7e:	|         move.l (a0),d2
    9f80:	|         movea.l 152(sp),a0
    9f84:	|         move.l 48(a0),d0
    9f88:	|         move.l d0,-(sp)
    9f8a:	|         jsr 1767a <__floatsisf>
    9f90:	|         addq.l #4,sp
    9f92:	|         move.l d0,-(sp)
    9f94:	|         move.l d2,-(sp)
    9f96:	|         jsr 1796e <__subsf3>
    9f9c:	|         addq.l #8,sp
    9f9e:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9fa2:	|         clr.l -(sp)
    9fa4:	|         move.l 52(sp),-(sp)
    9fa8:	|         jsr 178d6 <__nesf2>
    9fae:	|         addq.l #8,sp
    9fb0:	|         tst.l d0
    9fb2:	|     /-- bne.s 9fc6 <doBorderStuff+0x628>
    9fb4:	|     |   clr.l -(sp)
    9fb6:	|     |   move.l 56(sp),-(sp)
    9fba:	|     |   jsr 178d6 <__nesf2>
    9fc0:	|     |   addq.l #8,sp
    9fc2:	|     |   tst.l d0
    9fc4:	|  /--|-- beq.s a03c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9fc6:	|  |  \-> move.l 52(sp),d0
    9fca:	|  |      move.l d0,-(sp)
    9fcc:	|  |      move.l d0,-(sp)
    9fce:	|  |      jsr 17436 <__addsf3>
    9fd4:	|  |      addq.l #8,sp
    9fd6:	|  |      move.l d0,-(sp)
    9fd8:	|  |      move.l 52(sp),-(sp)
    9fdc:	|  |      jsr 17a02 <atan2f>
    9fe2:	|  |      addq.l #8,sp
    9fe4:	|  |      move.l d0,-(sp)
    9fe6:	|  |      jsr 1759c <__extendsfdf2>
    9fec:	|  |      addq.l #4,sp
    9fee:	|  |      move.l #-1540411785,-(sp)
    9ff4:	|  |      move.l #1078765033,-(sp)
    9ffa:	|  |      move.l d1,-(sp)
    9ffc:	|  |      move.l d0,-(sp)
    9ffe:	|  |      jsr 176ca <__muldf3>
    a004:	|  |      lea 16(sp),sp
    a008:	|  |      clr.l -(sp)
    a00a:	|  |      move.l #1080459264,-(sp)
    a010:	|  |      move.l d1,-(sp)
    a012:	|  |      move.l d0,-(sp)
    a014:	|  |      jsr 1746c <__adddf3>
    a01a:	|  |      lea 16(sp),sp
    a01e:	|  |      move.l d1,-(sp)
    a020:	|  |      move.l d0,-(sp)
    a022:	|  |      jsr 175dc <__fixdfsi>
    a028:	|  |      addq.l #8,sp
    a02a:	|  |      movea.l 152(sp),a0
    a02e:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a032:	|  |      movea.l 152(sp),a0
    a036:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a03c:	|  \----> pea 1 <_start+0x1>
    a040:	|         move.l 156(sp),-(sp)
    a044:	|         jsr 8186 <setFrames>
    a04a:	|         addq.l #8,sp
    return TRUE;
    a04c:	|         moveq #1,d0
}
    a04e:	\-------> movem.l (sp)+,d2-d7
    a052:	          lea 124(sp),sp
    a056:	          rts

0000a058 <drawPeople>:

void drawPeople () {
    a058:	                   lea -24(sp),sp
    a05c:	                   move.l d2,-(sp)

	shufflePeople ();
    a05e:	                   jsr baf4 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a064:	                   move.l 1ca22 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a06c:	                   clr.l 20(sp)
	overRegion = NULL;
    a070:	                   clr.l 1cad2 <overRegion>

	while (thisPerson) {
    a076:	   /-------------- bra.w a628 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a07a:	/--|-------------> movea.l 24(sp),a0
    a07e:	|  |               move.w 104(a0),d0
    a082:	|  |  /----------- beq.w a3dc <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a086:	|  |  |            movea.l 24(sp),a0
    a08a:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a090:	|  |  |            movea.l 24(sp),a0
    a094:	|  |  |            move.l 76(a0),d0
    a098:	|  |  |            cmp.l 20(sp),d0
    a09c:	|  |  |  /-------- beq.w a26a <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a0a0:	|  |  |  |         movea.l 24(sp),a0
    a0a4:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a0a8:	|  |  |  |         movea.l 24(sp),a0
    a0ac:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a0b2:	|  |  |  |         movea.l 24(sp),a0
    a0b6:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0ba:	|  |  |  |         movea.l 20(sp),a0
    a0be:	|  |  |  |         movea.l 4(a0),a0
    a0c2:	|  |  |  |         move.l 4(a0),d0
    a0c6:	|  |  |  |         movea.l 24(sp),a0
    a0ca:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a0ce:	|  |  |  |         movea.l 20(sp),a0
    a0d2:	|  |  |  |         movea.l 4(a0),a1
    a0d6:	|  |  |  |         movea.l 24(sp),a0
    a0da:	|  |  |  |         move.l 84(a0),d0
    a0de:	|  |  |  |         move.l d0,d1
    a0e0:	|  |  |  |         move.l d1,d0
    a0e2:	|  |  |  |         add.l d0,d0
    a0e4:	|  |  |  |         add.l d1,d0
    a0e6:	|  |  |  |         add.l d0,d0
    a0e8:	|  |  |  |         add.l d0,d0
    a0ea:	|  |  |  |         lea (0,a1,d0.l),a0
    a0ee:	|  |  |  |         move.l 8(a0),d0
    a0f2:	|  |  |  |     /-- ble.w a194 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a0f6:	|  |  |  |     |   movea.l 20(sp),a0
    a0fa:	|  |  |  |     |   movea.l 4(a0),a1
    a0fe:	|  |  |  |     |   movea.l 24(sp),a0
    a102:	|  |  |  |     |   move.l 84(a0),d0
    a106:	|  |  |  |     |   move.l d0,d1
    a108:	|  |  |  |     |   move.l d1,d0
    a10a:	|  |  |  |     |   add.l d0,d0
    a10c:	|  |  |  |     |   add.l d1,d0
    a10e:	|  |  |  |     |   add.l d0,d0
    a110:	|  |  |  |     |   add.l d0,d0
    a112:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a116:	|  |  |  |     |   move.l 8(a0),d0
    a11a:	|  |  |  |     |   clr.l -(sp)
    a11c:	|  |  |  |     |   move.l d0,-(sp)
    a11e:	|  |  |  |     |   jsr d1fc <startSound>
    a124:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a126:	|  |  |  |     |   movea.l 24(sp),a0
    a12a:	|  |  |  |     |   move.l 84(a0),d0
    a12e:	|  |  |  |     |   addq.l #1,d0
    a130:	|  |  |  |     |   movea.l 24(sp),a0
    a134:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a138:	|  |  |  |     |   movea.l 24(sp),a0
    a13c:	|  |  |  |     |   move.l 84(a0),d0
    a140:	|  |  |  |     |   movea.l 24(sp),a0
    a144:	|  |  |  |     |   movea.l 72(a0),a0
    a148:	|  |  |  |     |   move.l 8(a0),d1
    a14c:	|  |  |  |     |   move.l d1,-(sp)
    a14e:	|  |  |  |     |   move.l d0,-(sp)
    a150:	|  |  |  |     |   jsr 17ca8 <__modsi3>
    a156:	|  |  |  |     |   addq.l #8,sp
    a158:	|  |  |  |     |   movea.l 24(sp),a0
    a15c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a160:	|  |  |  |     |   movea.l 24(sp),a0
    a164:	|  |  |  |     |   movea.l 72(a0),a0
    a168:	|  |  |  |     |   movea.l 4(a0),a1
    a16c:	|  |  |  |     |   movea.l 24(sp),a0
    a170:	|  |  |  |     |   move.l 84(a0),d0
    a174:	|  |  |  |     |   move.l d0,d1
    a176:	|  |  |  |     |   move.l d1,d0
    a178:	|  |  |  |     |   add.l d0,d0
    a17a:	|  |  |  |     |   add.l d1,d0
    a17c:	|  |  |  |     |   add.l d0,d0
    a17e:	|  |  |  |     |   add.l d0,d0
    a180:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a184:	|  |  |  |     |   move.l 4(a0),d0
    a188:	|  |  |  |     |   movea.l 24(sp),a0
    a18c:	|  |  |  |     |   move.l d0,88(a0)
    a190:	|  |  |  |  /--|-- bra.w a2d2 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a194:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a198:	|  |  |  |  |      movea.l 4(a0),a1
    a19c:	|  |  |  |  |      movea.l 24(sp),a0
    a1a0:	|  |  |  |  |      move.l 84(a0),d0
    a1a4:	|  |  |  |  |      move.l d0,d1
    a1a6:	|  |  |  |  |      move.l d1,d0
    a1a8:	|  |  |  |  |      add.l d0,d0
    a1aa:	|  |  |  |  |      add.l d1,d0
    a1ac:	|  |  |  |  |      add.l d0,d0
    a1ae:	|  |  |  |  |      add.l d0,d0
    a1b0:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1b4:	|  |  |  |  |      move.l 8(a0),d0
    a1b8:	|  |  |  |  +----- beq.w a2d2 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a1bc:	|  |  |  |  |      movea.l 1c98e <noStack>,a1
    a1c2:	|  |  |  |  |      movea.l 20(sp),a0
    a1c6:	|  |  |  |  |      move.l 4(a0),d2
    a1ca:	|  |  |  |  |      movea.l 24(sp),a0
    a1ce:	|  |  |  |  |      move.l 84(a0),d0
    a1d2:	|  |  |  |  |      move.l d0,d1
    a1d4:	|  |  |  |  |      move.l d1,d0
    a1d6:	|  |  |  |  |      add.l d0,d0
    a1d8:	|  |  |  |  |      add.l d1,d0
    a1da:	|  |  |  |  |      add.l d0,d0
    a1dc:	|  |  |  |  |      add.l d0,d0
    a1de:	|  |  |  |  |      movea.l d2,a0
    a1e0:	|  |  |  |  |      adda.l d0,a0
    a1e2:	|  |  |  |  |      move.l 8(a0),d0
    a1e6:	|  |  |  |  |      neg.l d0
    a1e8:	|  |  |  |  |      pea 1 <_start+0x1>
    a1ec:	|  |  |  |  |      move.l a1,-(sp)
    a1ee:	|  |  |  |  |      clr.l -(sp)
    a1f0:	|  |  |  |  |      clr.l -(sp)
    a1f2:	|  |  |  |  |      move.l d0,-(sp)
    a1f4:	|  |  |  |  |      jsr 6aea <startNewFunctionNum>
    a1fa:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a1fe:	|  |  |  |  |      movea.l 24(sp),a0
    a202:	|  |  |  |  |      move.l 84(a0),d0
    a206:	|  |  |  |  |      addq.l #1,d0
    a208:	|  |  |  |  |      movea.l 24(sp),a0
    a20c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a210:	|  |  |  |  |      movea.l 24(sp),a0
    a214:	|  |  |  |  |      move.l 84(a0),d0
    a218:	|  |  |  |  |      movea.l 24(sp),a0
    a21c:	|  |  |  |  |      movea.l 72(a0),a0
    a220:	|  |  |  |  |      move.l 8(a0),d1
    a224:	|  |  |  |  |      move.l d1,-(sp)
    a226:	|  |  |  |  |      move.l d0,-(sp)
    a228:	|  |  |  |  |      jsr 17ca8 <__modsi3>
    a22e:	|  |  |  |  |      addq.l #8,sp
    a230:	|  |  |  |  |      movea.l 24(sp),a0
    a234:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a238:	|  |  |  |  |      movea.l 24(sp),a0
    a23c:	|  |  |  |  |      movea.l 72(a0),a0
    a240:	|  |  |  |  |      movea.l 4(a0),a1
    a244:	|  |  |  |  |      movea.l 24(sp),a0
    a248:	|  |  |  |  |      move.l 84(a0),d0
    a24c:	|  |  |  |  |      move.l d0,d1
    a24e:	|  |  |  |  |      move.l d1,d0
    a250:	|  |  |  |  |      add.l d0,d0
    a252:	|  |  |  |  |      add.l d1,d0
    a254:	|  |  |  |  |      add.l d0,d0
    a256:	|  |  |  |  |      add.l d0,d0
    a258:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a25c:	|  |  |  |  |      move.l 4(a0),d0
    a260:	|  |  |  |  |      movea.l 24(sp),a0
    a264:	|  |  |  |  |      move.l d0,88(a0)
    a268:	|  |  |  |  +----- bra.s a2d2 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a26a:	|  |  |  \--|----> movea.l 24(sp),a0
    a26e:	|  |  |     |      move.l (a0),d0
    a270:	|  |  |     |      movea.l 24(sp),a0
    a274:	|  |  |     |      move.l 8(a0),d1
    a278:	|  |  |     |      move.l d1,-(sp)
    a27a:	|  |  |     |      move.l d0,-(sp)
    a27c:	|  |  |     |      jsr 17566 <__eqsf2>
    a282:	|  |  |     |      addq.l #8,sp
    a284:	|  |  |     |      tst.l d0
    a286:	|  |  |     |  /-- bne.s a2ca <drawPeople+0x272>
    a288:	|  |  |     |  |   movea.l 24(sp),a0
    a28c:	|  |  |     |  |   move.l 4(a0),d0
    a290:	|  |  |     |  |   movea.l 24(sp),a0
    a294:	|  |  |     |  |   move.l 12(a0),d1
    a298:	|  |  |     |  |   move.l d1,-(sp)
    a29a:	|  |  |     |  |   move.l d0,-(sp)
    a29c:	|  |  |     |  |   jsr 17566 <__eqsf2>
    a2a2:	|  |  |     |  |   addq.l #8,sp
    a2a4:	|  |  |     |  |   tst.l d0
    a2a6:	|  |  |     |  +-- bne.s a2ca <drawPeople+0x272>
    a2a8:	|  |  |     |  |   movea.l 20(sp),a0
    a2ac:	|  |  |     |  |   move.l 8(a0),d0
    a2b0:	|  |  |     |  |   moveq #1,d1
    a2b2:	|  |  |     |  |   cmp.l d0,d1
    a2b4:	|  |  |     |  +-- bne.s a2ca <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2b6:	|  |  |     |  |   movea.l 24(sp),a0
    a2ba:	|  |  |     |  |   move.l 16(a0),d0
    a2be:	|  |  |     |  |   addq.l #1,d0
    a2c0:	|  |  |     |  |   movea.l 24(sp),a0
    a2c4:	|  |  |     |  |   move.l d0,16(a0)
    a2c8:	|  |  |     +--|-- bra.s a2d2 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a2ca:	|  |  |     |  \-> movea.l 24(sp),a0
    a2ce:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a2d2:	|  |  |     \----> movea.l 24(sp),a0
    a2d6:	|  |  |            move.l (a0),d0
    a2d8:	|  |  |            movea.l 24(sp),a0
    a2dc:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a2e0:	|  |  |            movea.l 24(sp),a0
    a2e4:	|  |  |            move.l 4(a0),d0
    a2e8:	|  |  |            movea.l 24(sp),a0
    a2ec:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a2f0:	|  |  |            movea.l 20(sp),a0
    a2f4:	|  |  |            movea.l 4(a0),a1
    a2f8:	|  |  |            movea.l 24(sp),a0
    a2fc:	|  |  |            move.l 84(a0),d0
    a300:	|  |  |            move.l d0,d1
    a302:	|  |  |            move.l d1,d0
    a304:	|  |  |            add.l d0,d0
    a306:	|  |  |            add.l d1,d0
    a308:	|  |  |            add.l d0,d0
    a30a:	|  |  |            add.l d0,d0
    a30c:	|  |  |            lea (0,a1,d0.l),a0
    a310:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a314:	|  |  |            move.l 8(sp),d0
    a318:	|  |  |            add.l d0,d0
    a31a:	|  |  |            subx.l d0,d0
    a31c:	|  |  |            neg.l d0
    a31e:	|  |  |            move.b d0,d0
    a320:	|  |  |            move.b d0,d0
    a322:	|  |  |            andi.l #255,d0
    a328:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a32c:	|  |  |            move.l 8(sp),-(sp)
    a330:	|  |  |            jsr 922c <TF_abs>
    a336:	|  |  |            addq.l #4,sp
    a338:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a33c:	|  |  |            movea.l 20(sp),a0
    a340:	|  |  |            movea.l (a0),a0
    a342:	|  |  |            move.l 8(a0),d0
    a346:	|  |  |            cmp.l 12(sp),d0
    a34a:	|  |  |        /-- bgt.s a35a <drawPeople+0x302>
				fNum = 0;
    a34c:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a350:	|  |  |        |   moveq #2,d0
    a352:	|  |  |        |   sub.l 16(sp),d0
    a356:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a35a:	|  |  |        \-> moveq #2,d1
    a35c:	|  |  |            cmp.l 16(sp),d1
    a360:	|  |  +----------- beq.s a3dc <drawPeople+0x384>
				BOOL r = FALSE;
    a362:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a366:	|  |  |            move.l 16(sp),d0
    a36a:	|  |  |            movea.w d0,a0
    a36c:	|  |  |            movea.l 20(sp),a1
    a370:	|  |  |            movea.l (a1),a1
    a372:	|  |  |            movea.l 16(a1),a1
    a376:	|  |  |            move.l 12(sp),d1
    a37a:	|  |  |            move.l d1,d0
    a37c:	|  |  |            lsl.l #3,d0
    a37e:	|  |  |            sub.l d1,d0
    a380:	|  |  |            add.l d0,d0
    a382:	|  |  |            add.l d0,d0
    a384:	|  |  |            add.l a1,d0
    a386:	|  |  |            move.l a0,-(sp)
    a388:	|  |  |            move.l 28(sp),-(sp)
    a38c:	|  |  |            move.l d0,-(sp)
    a38e:	|  |  |            jsr 8fc2 <scaleSprite>
    a394:	|  |  |            lea 12(sp),sp
    a398:	|  |  |            move.w d0,6(sp)
				if (r) {
    a39c:	|  |  +----------- beq.s a3dc <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a39e:	|  |  |            movea.l 24(sp),a0
    a3a2:	|  |  |            movea.l 114(a0),a0
    a3a6:	|  |  |            movea.l (a0),a0
    a3a8:	|  |  |            move.b (a0),d0
    a3aa:	|  |  +----------- beq.s a3dc <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a3ac:	|  |  |            move.l 1ca42 <personRegion+0x1c>,d1
    a3b2:	|  |  |            movea.l 24(sp),a0
    a3b6:	|  |  |            move.l 114(a0),d0
    a3ba:	|  |  |            cmp.l d1,d0
    a3bc:	|  |  |        /-- beq.s a3c4 <drawPeople+0x36c>
    a3be:	|  |  |        |   clr.l 1c986 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a3c4:	|  |  |        \-> movea.l 24(sp),a0
    a3c8:	|  |  |            move.l 114(a0),d0
    a3cc:	|  |  |            move.l d0,1ca42 <personRegion+0x1c>
						overRegion = & personRegion;
    a3d2:	|  |  |            move.l #117286,1cad2 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a3dc:	|  |  \----------> movea.l 24(sp),a0
    a3e0:	|  |               move.l 88(a0),d0
    a3e4:	|  |               subq.l #1,d0
    a3e6:	|  |               movea.l 24(sp),a0
    a3ea:	|  |               move.l d0,88(a0)
    a3ee:	|  |               movea.l 24(sp),a0
    a3f2:	|  |               move.l 88(a0),d0
    a3f6:	|  |        /----- bne.w a61e <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a3fa:	|  |        |      movea.l 24(sp),a0
    a3fe:	|  |        |      move.l 84(a0),d0
    a402:	|  |        |      addq.l #1,d0
    a404:	|  |        |      movea.l 24(sp),a0
    a408:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a40c:	|  |        |      movea.l 24(sp),a0
    a410:	|  |        |      move.l 84(a0),d0
    a414:	|  |        |      movea.l 24(sp),a0
    a418:	|  |        |      movea.l 72(a0),a0
    a41c:	|  |        |      move.l 8(a0),d1
    a420:	|  |        |      move.l d1,-(sp)
    a422:	|  |        |      move.l d0,-(sp)
    a424:	|  |        |      jsr 17ca8 <__modsi3>
    a42a:	|  |        |      addq.l #8,sp
    a42c:	|  |        |      movea.l 24(sp),a0
    a430:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a434:	|  |        |      movea.l 24(sp),a0
    a438:	|  |        |      movea.l 72(a0),a0
    a43c:	|  |        |      movea.l 4(a0),a1
    a440:	|  |        |      movea.l 24(sp),a0
    a444:	|  |        |      move.l 84(a0),d0
    a448:	|  |        |      move.l d0,d1
    a44a:	|  |        |      move.l d1,d0
    a44c:	|  |        |      add.l d0,d0
    a44e:	|  |        |      add.l d1,d0
    a450:	|  |        |      add.l d0,d0
    a452:	|  |        |      add.l d0,d0
    a454:	|  |        |      lea (0,a1,d0.l),a0
    a458:	|  |        |      move.l 4(a0),d0
    a45c:	|  |        |      movea.l 24(sp),a0
    a460:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a464:	|  |        |      movea.l 24(sp),a0
    a468:	|  |        |      move.w 104(a0),d0
    a46c:	|  |        +----- beq.w a61e <drawPeople+0x5c6>
    a470:	|  |        |      tst.l 20(sp)
    a474:	|  |        +----- beq.w a61e <drawPeople+0x5c6>
    a478:	|  |        |      movea.l 20(sp),a0
    a47c:	|  |        |      move.l 4(a0),d0
    a480:	|  |        +----- beq.w a61e <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a484:	|  |        |      movea.l 20(sp),a0
    a488:	|  |        |      movea.l 4(a0),a1
    a48c:	|  |        |      movea.l 24(sp),a0
    a490:	|  |        |      move.l 84(a0),d0
    a494:	|  |        |      move.l d0,d1
    a496:	|  |        |      move.l d1,d0
    a498:	|  |        |      add.l d0,d0
    a49a:	|  |        |      add.l d1,d0
    a49c:	|  |        |      add.l d0,d0
    a49e:	|  |        |      add.l d0,d0
    a4a0:	|  |        |      lea (0,a1,d0.l),a0
    a4a4:	|  |        |      move.l 8(a0),d0
    a4a8:	|  |        |  /-- ble.w a54a <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a4ac:	|  |        |  |   movea.l 20(sp),a0
    a4b0:	|  |        |  |   movea.l 4(a0),a1
    a4b4:	|  |        |  |   movea.l 24(sp),a0
    a4b8:	|  |        |  |   move.l 84(a0),d0
    a4bc:	|  |        |  |   move.l d0,d1
    a4be:	|  |        |  |   move.l d1,d0
    a4c0:	|  |        |  |   add.l d0,d0
    a4c2:	|  |        |  |   add.l d1,d0
    a4c4:	|  |        |  |   add.l d0,d0
    a4c6:	|  |        |  |   add.l d0,d0
    a4c8:	|  |        |  |   lea (0,a1,d0.l),a0
    a4cc:	|  |        |  |   move.l 8(a0),d0
    a4d0:	|  |        |  |   clr.l -(sp)
    a4d2:	|  |        |  |   move.l d0,-(sp)
    a4d4:	|  |        |  |   jsr d1fc <startSound>
    a4da:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a4dc:	|  |        |  |   movea.l 24(sp),a0
    a4e0:	|  |        |  |   move.l 84(a0),d0
    a4e4:	|  |        |  |   addq.l #1,d0
    a4e6:	|  |        |  |   movea.l 24(sp),a0
    a4ea:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4ee:	|  |        |  |   movea.l 24(sp),a0
    a4f2:	|  |        |  |   move.l 84(a0),d0
    a4f6:	|  |        |  |   movea.l 24(sp),a0
    a4fa:	|  |        |  |   movea.l 72(a0),a0
    a4fe:	|  |        |  |   move.l 8(a0),d1
    a502:	|  |        |  |   move.l d1,-(sp)
    a504:	|  |        |  |   move.l d0,-(sp)
    a506:	|  |        |  |   jsr 17ca8 <__modsi3>
    a50c:	|  |        |  |   addq.l #8,sp
    a50e:	|  |        |  |   movea.l 24(sp),a0
    a512:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a516:	|  |        |  |   movea.l 24(sp),a0
    a51a:	|  |        |  |   movea.l 72(a0),a0
    a51e:	|  |        |  |   movea.l 4(a0),a1
    a522:	|  |        |  |   movea.l 24(sp),a0
    a526:	|  |        |  |   move.l 84(a0),d0
    a52a:	|  |        |  |   move.l d0,d1
    a52c:	|  |        |  |   move.l d1,d0
    a52e:	|  |        |  |   add.l d0,d0
    a530:	|  |        |  |   add.l d1,d0
    a532:	|  |        |  |   add.l d0,d0
    a534:	|  |        |  |   add.l d0,d0
    a536:	|  |        |  |   lea (0,a1,d0.l),a0
    a53a:	|  |        |  |   move.l 4(a0),d0
    a53e:	|  |        |  |   movea.l 24(sp),a0
    a542:	|  |        |  |   move.l d0,88(a0)
    a546:	|  |        +--|-- bra.w a61e <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a54a:	|  |        |  \-> movea.l 20(sp),a0
    a54e:	|  |        |      movea.l 4(a0),a1
    a552:	|  |        |      movea.l 24(sp),a0
    a556:	|  |        |      move.l 84(a0),d0
    a55a:	|  |        |      move.l d0,d1
    a55c:	|  |        |      move.l d1,d0
    a55e:	|  |        |      add.l d0,d0
    a560:	|  |        |      add.l d1,d0
    a562:	|  |        |      add.l d0,d0
    a564:	|  |        |      add.l d0,d0
    a566:	|  |        |      lea (0,a1,d0.l),a0
    a56a:	|  |        |      move.l 8(a0),d0
    a56e:	|  |        +----- beq.w a61e <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a572:	|  |        |      movea.l 1c98e <noStack>,a1
    a578:	|  |        |      movea.l 20(sp),a0
    a57c:	|  |        |      move.l 4(a0),d2
    a580:	|  |        |      movea.l 24(sp),a0
    a584:	|  |        |      move.l 84(a0),d0
    a588:	|  |        |      move.l d0,d1
    a58a:	|  |        |      move.l d1,d0
    a58c:	|  |        |      add.l d0,d0
    a58e:	|  |        |      add.l d1,d0
    a590:	|  |        |      add.l d0,d0
    a592:	|  |        |      add.l d0,d0
    a594:	|  |        |      movea.l d2,a0
    a596:	|  |        |      adda.l d0,a0
    a598:	|  |        |      move.l 8(a0),d0
    a59c:	|  |        |      neg.l d0
    a59e:	|  |        |      pea 1 <_start+0x1>
    a5a2:	|  |        |      move.l a1,-(sp)
    a5a4:	|  |        |      clr.l -(sp)
    a5a6:	|  |        |      clr.l -(sp)
    a5a8:	|  |        |      move.l d0,-(sp)
    a5aa:	|  |        |      jsr 6aea <startNewFunctionNum>
    a5b0:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a5b4:	|  |        |      movea.l 24(sp),a0
    a5b8:	|  |        |      move.l 84(a0),d0
    a5bc:	|  |        |      addq.l #1,d0
    a5be:	|  |        |      movea.l 24(sp),a0
    a5c2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5c6:	|  |        |      movea.l 24(sp),a0
    a5ca:	|  |        |      move.l 84(a0),d0
    a5ce:	|  |        |      movea.l 24(sp),a0
    a5d2:	|  |        |      movea.l 72(a0),a0
    a5d6:	|  |        |      move.l 8(a0),d1
    a5da:	|  |        |      move.l d1,-(sp)
    a5dc:	|  |        |      move.l d0,-(sp)
    a5de:	|  |        |      jsr 17ca8 <__modsi3>
    a5e4:	|  |        |      addq.l #8,sp
    a5e6:	|  |        |      movea.l 24(sp),a0
    a5ea:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5ee:	|  |        |      movea.l 24(sp),a0
    a5f2:	|  |        |      movea.l 72(a0),a0
    a5f6:	|  |        |      movea.l 4(a0),a1
    a5fa:	|  |        |      movea.l 24(sp),a0
    a5fe:	|  |        |      move.l 84(a0),d0
    a602:	|  |        |      move.l d0,d1
    a604:	|  |        |      move.l d1,d0
    a606:	|  |        |      add.l d0,d0
    a608:	|  |        |      add.l d1,d0
    a60a:	|  |        |      add.l d0,d0
    a60c:	|  |        |      add.l d0,d0
    a60e:	|  |        |      lea (0,a1,d0.l),a0
    a612:	|  |        |      move.l 4(a0),d0
    a616:	|  |        |      movea.l 24(sp),a0
    a61a:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a61e:	|  |        \----> movea.l 24(sp),a0
    a622:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a628:	|  \-------------> tst.l 24(sp)
    a62c:	\----------------- bne.w a07a <drawPeople+0x22>
	}
}
    a630:	                   nop
    a632:	                   nop
    a634:	                   move.l (sp)+,d2
    a636:	                   lea 24(sp),sp
    a63a:	                   rts

0000a63c <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a63c:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a63e:	          move.l 1ca22 <allPeople>,(sp)
	while (thisPerson) {
    a644:	      /-- bra.s a65c <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a646:	/-----|-> movea.l (sp),a0
    a648:	|     |   movea.l 114(a0),a0
    a64c:	|     |   move.l 4(a0),d0
    a650:	|     |   cmp.l 8(sp),d0
    a654:	|  /--|-- beq.s a662 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a656:	|  |  |   movea.l (sp),a0
    a658:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a65c:	|  |  \-> tst.l (sp)
    a65e:	\--|----- bne.s a646 <findPerson+0xa>
    a660:	   |  /-- bra.s a664 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a662:	   \--|-> nop
	}
	return thisPerson;
    a664:	      \-> move.l (sp),d0
}
    a666:	          addq.l #4,sp
    a668:	          rts

0000a66a <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a66a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a66c:	       move.l 12(sp),-(sp)
    a670:	       jsr a63c <findPerson>
    a676:	       addq.l #4,sp
    a678:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a67a:	   /-- bne.s a680 <floatCharacter+0x16>
    a67c:	   |   clr.w d0
    a67e:	/--|-- bra.s a68a <floatCharacter+0x20>
	moveMe -> floaty = f;
    a680:	|  \-> movea.l (sp),a0
    a682:	|      move.l 8(sp),24(a0)
	return TRUE;
    a688:	|      moveq #1,d0
}
    a68a:	\----> addq.l #4,sp
    a68c:	       rts

0000a68e <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a68e:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a690:	          tst.l 8(sp)
    a694:	      /-- bne.s a6a2 <forceWalkingPerson+0x14>
    a696:	      |   tst.l 12(sp)
    a69a:	      +-- bne.s a6a2 <forceWalkingPerson+0x14>
    a69c:	      |   clr.w d0
    a69e:	/-----|-- bra.w a734 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6a2:	|     \-> move.l 16(sp),-(sp)
    a6a6:	|         jsr a63c <findPerson>
    a6ac:	|         addq.l #4,sp
    a6ae:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a6b0:	|     /-- bne.s a6b6 <forceWalkingPerson+0x28>
    a6b2:	|     |   clr.w d0
    a6b4:	+-----|-- bra.s a734 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6b6:	|     \-> movea.l (sp),a0
    a6b8:	|         move.l 68(a0),d0
    a6bc:	|     /-- beq.s a6ce <forceWalkingPerson+0x40>
    a6be:	|     |   movea.l (sp),a0
    a6c0:	|     |   move.l 68(a0),d0
    a6c4:	|     |   move.l d0,-(sp)
    a6c6:	|     |   jsr 472e <abortFunction>
    a6cc:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a6ce:	|     \-> movea.l (sp),a0
    a6d0:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a6d6:	|         movea.l (sp),a0
    a6d8:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a6dc:	|         movea.l (sp),a0
    a6de:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a6e4:	|         movea.l (sp),a0
    a6e6:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a6ec:	|         movea.l (sp),a0
    a6ee:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a6f4:	|         movea.l (sp),a0
    a6f6:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a6fa:	|         movea.l (sp),a0
    a6fc:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a700:	|         move.l (sp),-(sp)
    a702:	|         jsr 999e <doBorderStuff>
    a708:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a70a:	|         pea 1 <_start+0x1>
    a70e:	|         move.l 4(sp),-(sp)
    a712:	|         jsr bf82 <walkMe>
    a718:	|         addq.l #8,sp
    a71a:	|         tst.w d0
    a71c:	|     /-- bne.s a726 <forceWalkingPerson+0x98>
    a71e:	|     |   movea.l (sp),a0
    a720:	|     |   move.w 66(a0),d0
    a724:	|  /--|-- beq.s a732 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a726:	|  |  \-> movea.l (sp),a0
    a728:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a72e:	|  |      moveq #1,d0
    a730:	+--|----- bra.s a734 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a732:	|  \----> clr.w d0
    }
}
    a734:	\-------> addq.l #4,sp
    a736:	          rts

0000a738 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a738:	                lea -56(sp),sp
    a73c:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a73e:	                move.l #320,56(sp)
    a746:	                move.l #200,52(sp)
    a74e:	                moveq #-1,d0
    a750:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a754:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a75c:	                clr.l 44(sp)
    a760:	   /----------- bra.w a938 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a764:	/--|----------> movea.l 1cada <currentFloor>,a0
    a76a:	|  |            move.l 12(a0),d1
    a76e:	|  |            move.l 44(sp),d0
    a772:	|  |            lsl.l #3,d0
    a774:	|  |            movea.l d1,a0
    a776:	|  |            adda.l d0,a0
    a778:	|  |            move.l (a0),d0
    a77a:	|  |            move.l d0,d1
    a77c:	|  |            subq.l #1,d1
    a77e:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a782:	|  |            clr.l 40(sp)
    a786:	|  |     /----- bra.w a916 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a78a:	|  |  /--|----> movea.l 1cada <currentFloor>,a0
    a790:	|  |  |  |      move.l 4(a0),d1
    a794:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a79a:	|  |  |  |      movea.l 12(a0),a0
    a79e:	|  |  |  |      move.l 44(sp),d0
    a7a2:	|  |  |  |      lsl.l #3,d0
    a7a4:	|  |  |  |      adda.l d0,a0
    a7a6:	|  |  |  |      movea.l 4(a0),a0
    a7aa:	|  |  |  |      move.l 40(sp),d0
    a7ae:	|  |  |  |      add.l d0,d0
    a7b0:	|  |  |  |      add.l d0,d0
    a7b2:	|  |  |  |      adda.l d0,a0
    a7b4:	|  |  |  |      move.l (a0),d0
    a7b6:	|  |  |  |      lsl.l #3,d0
    a7b8:	|  |  |  |      movea.l d1,a0
    a7ba:	|  |  |  |      adda.l d0,a0
    a7bc:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a7c0:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a7c6:	|  |  |  |      move.l 4(a0),d1
    a7ca:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a7d0:	|  |  |  |      movea.l 12(a0),a0
    a7d4:	|  |  |  |      move.l 44(sp),d0
    a7d8:	|  |  |  |      lsl.l #3,d0
    a7da:	|  |  |  |      adda.l d0,a0
    a7dc:	|  |  |  |      movea.l 4(a0),a0
    a7e0:	|  |  |  |      move.l 40(sp),d0
    a7e4:	|  |  |  |      add.l d0,d0
    a7e6:	|  |  |  |      add.l d0,d0
    a7e8:	|  |  |  |      adda.l d0,a0
    a7ea:	|  |  |  |      move.l (a0),d0
    a7ec:	|  |  |  |      lsl.l #3,d0
    a7ee:	|  |  |  |      movea.l d1,a0
    a7f0:	|  |  |  |      adda.l d0,a0
    a7f2:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a7f8:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a7fe:	|  |  |  |      move.l 4(a0),d1
    a802:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a808:	|  |  |  |      movea.l 12(a0),a0
    a80c:	|  |  |  |      move.l 44(sp),d0
    a810:	|  |  |  |      lsl.l #3,d0
    a812:	|  |  |  |      adda.l d0,a0
    a814:	|  |  |  |      movea.l 4(a0),a0
    a818:	|  |  |  |      move.l 36(sp),d0
    a81c:	|  |  |  |      add.l d0,d0
    a81e:	|  |  |  |      add.l d0,d0
    a820:	|  |  |  |      adda.l d0,a0
    a822:	|  |  |  |      move.l (a0),d0
    a824:	|  |  |  |      lsl.l #3,d0
    a826:	|  |  |  |      movea.l d1,a0
    a828:	|  |  |  |      adda.l d0,a0
    a82a:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a82e:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a834:	|  |  |  |      move.l 4(a0),d1
    a838:	|  |  |  |      movea.l 1cada <currentFloor>,a0
    a83e:	|  |  |  |      movea.l 12(a0),a0
    a842:	|  |  |  |      move.l 44(sp),d0
    a846:	|  |  |  |      lsl.l #3,d0
    a848:	|  |  |  |      adda.l d0,a0
    a84a:	|  |  |  |      movea.l 4(a0),a0
    a84e:	|  |  |  |      move.l 36(sp),d0
    a852:	|  |  |  |      add.l d0,d0
    a854:	|  |  |  |      add.l d0,d0
    a856:	|  |  |  |      adda.l d0,a0
    a858:	|  |  |  |      move.l (a0),d0
    a85a:	|  |  |  |      lsl.l #3,d0
    a85c:	|  |  |  |      movea.l d1,a0
    a85e:	|  |  |  |      adda.l d0,a0
    a860:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a866:	|  |  |  |      movea.l 68(sp),a0
    a86a:	|  |  |  |      move.l (a0),d1
    a86c:	|  |  |  |      movea.l 64(sp),a0
    a870:	|  |  |  |      move.l (a0),d0
    a872:	|  |  |  |      move.l d1,-(sp)
    a874:	|  |  |  |      move.l d0,-(sp)
    a876:	|  |  |  |      move.l 24(sp),-(sp)
    a87a:	|  |  |  |      move.l 32(sp),-(sp)
    a87e:	|  |  |  |      move.l 40(sp),-(sp)
    a882:	|  |  |  |      move.l 48(sp),-(sp)
    a886:	|  |  |  |      lea 28(sp),a0
    a88a:	|  |  |  |      move.l a0,-(sp)
    a88c:	|  |  |  |      lea 36(sp),a0
    a890:	|  |  |  |      move.l a0,-(sp)
    a892:	|  |  |  |      jsr 16062 <closestPointOnLine>
    a898:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a89c:	|  |  |  |      movea.l 64(sp),a0
    a8a0:	|  |  |  |      move.l (a0),d0
    a8a2:	|  |  |  |      move.l 8(sp),d1
    a8a6:	|  |  |  |      move.l d0,d2
    a8a8:	|  |  |  |      sub.l d1,d2
    a8aa:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a8ae:	|  |  |  |      movea.l 68(sp),a0
    a8b2:	|  |  |  |      move.l (a0),d0
    a8b4:	|  |  |  |      move.l 4(sp),d1
    a8b8:	|  |  |  |      move.l d0,d2
    a8ba:	|  |  |  |      sub.l d1,d2
    a8bc:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a8c0:	|  |  |  |      move.l 28(sp),-(sp)
    a8c4:	|  |  |  |      move.l 32(sp),-(sp)
    a8c8:	|  |  |  |      jsr 17bfc <__mulsi3>
    a8ce:	|  |  |  |      addq.l #8,sp
    a8d0:	|  |  |  |      move.l d0,d2
    a8d2:	|  |  |  |      move.l 24(sp),-(sp)
    a8d6:	|  |  |  |      move.l 28(sp),-(sp)
    a8da:	|  |  |  |      jsr 17bfc <__mulsi3>
    a8e0:	|  |  |  |      addq.l #8,sp
    a8e2:	|  |  |  |      move.l d2,d1
    a8e4:	|  |  |  |      add.l d0,d1
    a8e6:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a8ea:	|  |  |  |      move.l 12(sp),d2
    a8ee:	|  |  |  |      cmp.l 32(sp),d2
    a8f2:	|  |  |  |  /-- bge.s a90c <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a8f4:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a8fa:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a900:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a906:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a90c:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a912:	|  |  |  |      addq.l #1,40(sp)
    a916:	|  |  |  \----> movea.l 1cada <currentFloor>,a0
    a91c:	|  |  |         move.l 12(a0),d1
    a920:	|  |  |         move.l 44(sp),d0
    a924:	|  |  |         lsl.l #3,d0
    a926:	|  |  |         movea.l d1,a0
    a928:	|  |  |         adda.l d0,a0
    a92a:	|  |  |         move.l (a0),d0
    a92c:	|  |  |         cmp.l 40(sp),d0
    a930:	|  |  \-------- bgt.w a78a <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a934:	|  |            addq.l #1,44(sp)
    a938:	|  \----------> movea.l 1cada <currentFloor>,a0
    a93e:	|               move.l 8(a0),d0
    a942:	|               cmp.l 44(sp),d0
    a946:	\-------------- bgt.w a764 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a94a:	                moveq #-1,d0
    a94c:	                cmp.l 48(sp),d0
    a950:	            /-- bne.s a956 <handleClosestPoint+0x21e>
    a952:	            |   clr.w d0
    a954:	         /--|-- bra.s a970 <handleClosestPoint+0x238>
	*setX = gotX;
    a956:	         |  \-> movea.l 64(sp),a0
    a95a:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a95e:	         |      movea.l 68(sp),a0
    a962:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a966:	         |      movea.l 72(sp),a0
    a96a:	         |      move.l 48(sp),(a0)

	return TRUE;
    a96e:	         |      moveq #1,d0
}
    a970:	         \----> move.l (sp)+,d2
    a972:	                lea 56(sp),sp
    a976:	                rts

0000a978 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a978:	clr.l 1ca36 <personRegion+0x10>
	personRegion.sY = 0;
    a97e:	clr.l 1ca3a <personRegion+0x14>
	personRegion.di = -1;
    a984:	moveq #-1,d0
    a986:	move.l d0,1ca3e <personRegion+0x18>
	allScreenRegions = NULL;
    a98c:	clr.l 1cace <allScreenRegions>

	return TRUE;
    a992:	moveq #1,d0
}
    a994:	rts

0000a996 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a996:	          subq.l #4,sp
    a998:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a99a:	          tst.l 12(sp)
    a99e:	      /-- bne.s a9a6 <jumpPerson+0x10>
    a9a0:	      |   tst.l 16(sp)
    a9a4:	/-----|-- beq.s aa1a <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9a6:	|     \-> move.l 20(sp),-(sp)
    a9aa:	|         jsr a63c <findPerson>
    a9b0:	|         addq.l #4,sp
    a9b2:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9b6:	|  /----- beq.s aa1e <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9b8:	|  |      movea.l 4(sp),a0
    a9bc:	|  |      move.l 68(a0),d0
    a9c0:	|  |  /-- beq.s a9d4 <jumpPerson+0x3e>
    a9c2:	|  |  |   movea.l 4(sp),a0
    a9c6:	|  |  |   move.l 68(a0),d0
    a9ca:	|  |  |   move.l d0,-(sp)
    a9cc:	|  |  |   jsr 472e <abortFunction>
    a9d2:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a9d4:	|  |  \-> movea.l 4(sp),a0
    a9d8:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a9dc:	|  |      movea.l 4(sp),a0
    a9e0:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a9e4:	|  |      movea.l 4(sp),a0
    a9e8:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a9ec:	|  |      move.l 16(sp),-(sp)
    a9f0:	|  |      jsr 1767a <__floatsisf>
    a9f6:	|  |      addq.l #4,sp
    a9f8:	|  |      move.l d0,d2
    a9fa:	|  |      move.l 12(sp),-(sp)
    a9fe:	|  |      jsr 1767a <__floatsisf>
    aa04:	|  |      addq.l #4,sp
    aa06:	|  |      move.l d2,-(sp)
    aa08:	|  |      move.l d0,-(sp)
    aa0a:	|  |      move.l 12(sp),-(sp)
    aa0e:	|  |      jsr ad84 <moveAndScale>
    aa14:	|  |      lea 12(sp),sp
    aa18:	|  |  /-- bra.s aa20 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa1a:	\--|--|-> nop
    aa1c:	   |  +-- bra.s aa20 <jumpPerson+0x8a>
    if (!moveMe) return;
    aa1e:	   \--|-> nop
}
    aa20:	      \-> move.l (sp)+,d2
    aa22:	          addq.l #4,sp
    aa24:	          rts

0000aa26 <killAllPeople>:


void killAllPeople () {
    aa26:	          subq.l #8,sp
    aa28:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa2a:	   /----- bra.s aa96 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa2c:	/--|----> movea.l 1ca22 <allPeople>,a0
    aa32:	|  |      move.l 68(a0),d0
    aa36:	|  |  /-- beq.s aa4c <killAllPeople+0x26>
    aa38:	|  |  |   movea.l 1ca22 <allPeople>,a0
    aa3e:	|  |  |   move.l 68(a0),d0
    aa42:	|  |  |   move.l d0,-(sp)
    aa44:	|  |  |   jsr 472e <abortFunction>
    aa4a:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa4c:	|  |  \-> movea.l 1ca22 <allPeople>,a0
    aa52:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa56:	|  |      move.l 1ca22 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aa5e:	|  |      movea.l 1ca22 <allPeople>,a0
    aa64:	|  |      move.l 36(a0),d0
    aa68:	|  |      move.l d0,1ca22 <allPeople>
		removeObjectType (killPeople -> thisType);
    aa6e:	|  |      movea.l 8(sp),a0
    aa72:	|  |      move.l 114(a0),d0
    aa76:	|  |      move.l d0,-(sp)
    aa78:	|  |      jsr d8da <removeObjectType>
    aa7e:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aa80:	|  |      move.l 8(sp),4(sp)
    aa86:	|  |      move.l 1c9be <SysBase>,d0
    aa8c:	|  |      movea.l d0,a6
    aa8e:	|  |      movea.l 4(sp),a1
    aa92:	|  |      jsr -690(a6)
	while (allPeople) {
    aa96:	|  \----> move.l 1ca22 <allPeople>,d0
    aa9c:	\-------- bne.s aa2c <killAllPeople+0x6>
	}
}
    aa9e:	          nop
    aaa0:	          nop
    aaa2:	          movea.l (sp)+,a6
    aaa4:	          addq.l #8,sp
    aaa6:	          rts

0000aaa8 <killMostPeople>:

void killMostPeople() {
    aaa8:	          lea -12(sp),sp
    aaac:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aaae:	          move.l #117282,12(sp)

    while (*lookyHere) {
    aab6:	   /----- bra.w ab3c <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aaba:	/--|----> movea.l 12(sp),a0
    aabe:	|  |      movea.l (a0),a0
    aac0:	|  |      move.l 118(a0),d0
    aac4:	|  |      moveq #32,d1
    aac6:	|  |      and.l d1,d0
    aac8:	|  |  /-- beq.s aada <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aaca:	|  |  |   movea.l 12(sp),a0
    aace:	|  |  |   move.l (a0),d0
    aad0:	|  |  |   moveq #36,d1
    aad2:	|  |  |   add.l d0,d1
    aad4:	|  |  |   move.l d1,12(sp)
    aad8:	|  +--|-- bra.s ab3c <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aada:	|  |  \-> movea.l 12(sp),a0
    aade:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aae2:	|  |      movea.l 8(sp),a0
    aae6:	|  |      move.l 36(a0),d0
    aaea:	|  |      movea.l 12(sp),a0
    aaee:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aaf0:	|  |      movea.l 8(sp),a0
    aaf4:	|  |      move.l 68(a0),d0
    aaf8:	|  |  /-- beq.s ab0c <killMostPeople+0x64>
    aafa:	|  |  |   movea.l 8(sp),a0
    aafe:	|  |  |   move.l 68(a0),d0
    ab02:	|  |  |   move.l d0,-(sp)
    ab04:	|  |  |   jsr 472e <abortFunction>
    ab0a:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ab0c:	|  |  \-> movea.l 8(sp),a0
    ab10:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ab14:	|  |      movea.l 8(sp),a0
    ab18:	|  |      move.l 114(a0),d0
    ab1c:	|  |      move.l d0,-(sp)
    ab1e:	|  |      jsr d8da <removeObjectType>
    ab24:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab26:	|  |      move.l 8(sp),4(sp)
    ab2c:	|  |      move.l 1c9be <SysBase>,d0
    ab32:	|  |      movea.l d0,a6
    ab34:	|  |      movea.l 4(sp),a1
    ab38:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab3c:	|  \----> movea.l 12(sp),a0
    ab40:	|         move.l (a0),d0
    ab42:	\-------- bne.w aaba <killMostPeople+0x12>
        }
    }
}
    ab46:	          nop
    ab48:	          nop
    ab4a:	          movea.l (sp)+,a6
    ab4c:	          lea 12(sp),sp
    ab50:	          rts

0000ab52 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab52:	clr.l -(sp)
    ab54:	move.l sp,d0
    ab56:	addq.l #8,d0
    ab58:	move.l d0,-(sp)
    ab5a:	jsr 8186 <setFrames>
    ab60:	addq.l #8,sp
}
    ab62:	nop
    ab64:	rts

0000ab66 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab66:	          lea -12(sp),sp
    ab6a:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ab6c:	          tst.l 20(sp)
    ab70:	      /-- bne.s ab7e <makeWalkingPerson+0x18>
    ab72:	      |   tst.l 24(sp)
    ab76:	      +-- bne.s ab7e <makeWalkingPerson+0x18>
    ab78:	      |   clr.w d0
    ab7a:	/-----|-- bra.w ad16 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ab7e:	|     \-> movea.l 1cada <currentFloor>,a0
    ab84:	|         move.l 8(a0),d0
    ab88:	|     /-- bne.s ab90 <makeWalkingPerson+0x2a>
    ab8a:	|     |   clr.w d0
    ab8c:	+-----|-- bra.w ad16 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab90:	|     \-> move.l 28(sp),-(sp)
    ab94:	|         jsr a63c <findPerson>
    ab9a:	|         addq.l #4,sp
    ab9c:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    aba0:	|     /-- bne.s aba8 <makeWalkingPerson+0x42>
    aba2:	|     |   clr.w d0
    aba4:	+-----|-- bra.w ad16 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    aba8:	|     \-> movea.l 12(sp),a0
    abac:	|         move.l 68(a0),d0
    abb0:	|     /-- beq.s abc4 <makeWalkingPerson+0x5e>
    abb2:	|     |   movea.l 12(sp),a0
    abb6:	|     |   move.l 68(a0),d0
    abba:	|     |   move.l d0,-(sp)
    abbc:	|     |   jsr 472e <abortFunction>
    abc2:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    abc4:	|     \-> movea.l 12(sp),a0
    abc8:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    abcc:	|         movea.l 12(sp),a0
    abd0:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    abd6:	|         movea.l 12(sp),a0
    abda:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    abe0:	|         movea.l 12(sp),a0
    abe4:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    abea:	|         movea.l 12(sp),a0
    abee:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    abf4:	|         move.l 24(sp),-(sp)
    abf8:	|         move.l 24(sp),-(sp)
    abfc:	|         jsr 165aa <inFloor>
    ac02:	|         addq.l #8,sp
    ac04:	|         movea.l 12(sp),a0
    ac08:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ac0c:	|         movea.l 12(sp),a0
    ac10:	|         move.l 60(a0),d0
    ac14:	|         moveq #-1,d1
    ac16:	|         cmp.l d0,d1
    ac18:	|     /-- bne.s ac48 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac1a:	|     |   movea.w #60,a0
    ac1e:	|     |   adda.l 12(sp),a0
    ac22:	|     |   moveq #44,d1
    ac24:	|     |   add.l 12(sp),d1
    ac28:	|     |   moveq #40,d0
    ac2a:	|     |   add.l 12(sp),d0
    ac2e:	|     |   move.l a0,-(sp)
    ac30:	|     |   move.l d1,-(sp)
    ac32:	|     |   move.l d0,-(sp)
    ac34:	|     |   jsr a738 <handleClosestPoint>
    ac3a:	|     |   lea 12(sp),sp
    ac3e:	|     |   tst.w d0
    ac40:	|     +-- bne.s ac48 <makeWalkingPerson+0xe2>
    ac42:	|     |   clr.w d0
    ac44:	+-----|-- bra.w ad16 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac48:	|     \-> movea.l 12(sp),a0
    ac4c:	|         move.l 4(a0),d0
    ac50:	|         move.l d0,-(sp)
    ac52:	|         jsr 17612 <__fixsfsi>
    ac58:	|         addq.l #4,sp
    ac5a:	|         move.l d0,d2
    ac5c:	|         movea.l 12(sp),a0
    ac60:	|         move.l (a0),d0
    ac62:	|         move.l d0,-(sp)
    ac64:	|         jsr 17612 <__fixsfsi>
    ac6a:	|         addq.l #4,sp
    ac6c:	|         move.l d2,-(sp)
    ac6e:	|         move.l d0,-(sp)
    ac70:	|         jsr 165aa <inFloor>
    ac76:	|         addq.l #8,sp
    ac78:	|         movea.l 12(sp),a0
    ac7c:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ac80:	|         movea.l 12(sp),a0
    ac84:	|         move.l 56(a0),d0
    ac88:	|         moveq #-1,d1
    ac8a:	|         cmp.l d0,d1
    ac8c:	|     /-- bne.s acde <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac8e:	|     |   movea.l 12(sp),a0
    ac92:	|     |   move.l (a0),d0
    ac94:	|     |   move.l d0,-(sp)
    ac96:	|     |   jsr 17612 <__fixsfsi>
    ac9c:	|     |   addq.l #4,sp
    ac9e:	|     |   move.l d0,8(sp)
    aca2:	|     |   movea.l 12(sp),a0
    aca6:	|     |   move.l 4(a0),d0
    acaa:	|     |   move.l d0,-(sp)
    acac:	|     |   jsr 17612 <__fixsfsi>
    acb2:	|     |   addq.l #4,sp
    acb4:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    acb8:	|     |   moveq #56,d0
    acba:	|     |   add.l 12(sp),d0
    acbe:	|     |   move.l d0,-(sp)
    acc0:	|     |   lea 8(sp),a0
    acc4:	|     |   move.l a0,-(sp)
    acc6:	|     |   moveq #16,d0
    acc8:	|     |   add.l sp,d0
    acca:	|     |   move.l d0,-(sp)
    accc:	|     |   jsr a738 <handleClosestPoint>
    acd2:	|     |   lea 12(sp),sp
    acd6:	|     |   tst.w d0
    acd8:	|     +-- bne.s acde <makeWalkingPerson+0x178>
    acda:	|     |   clr.w d0
    acdc:	+-----|-- bra.s ad16 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    acde:	|     \-> move.l 12(sp),-(sp)
    ace2:	|         jsr 999e <doBorderStuff>
    ace8:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    acea:	|         clr.l -(sp)
    acec:	|         move.l 16(sp),-(sp)
    acf0:	|         jsr bf82 <walkMe>
    acf6:	|         addq.l #8,sp
    acf8:	|         tst.w d0
    acfa:	|     /-- bne.s ad06 <makeWalkingPerson+0x1a0>
    acfc:	|     |   movea.l 12(sp),a0
    ad00:	|     |   move.w 66(a0),d0
    ad04:	|  /--|-- beq.s ad14 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ad06:	|  |  \-> movea.l 12(sp),a0
    ad0a:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ad10:	|  |      moveq #1,d0
    ad12:	+--|----- bra.s ad16 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ad14:	|  \----> clr.w d0
	}
}
    ad16:	\-------> move.l (sp)+,d2
    ad18:	          lea 12(sp),sp
    ad1c:	          rts

0000ad1e <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad1e:	       lea -16(sp),sp
    ad22:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad24:	       moveq #12,d0
    ad26:	       move.l d0,16(sp)
    ad2a:	       clr.l 12(sp)
    ad2e:	       move.l 1c9be <SysBase>,d0
    ad34:	       movea.l d0,a6
    ad36:	       move.l 16(sp),d0
    ad3a:	       move.l 12(sp),d1
    ad3e:	       jsr -684(a6)
    ad42:	       move.l d0,8(sp)
    ad46:	       move.l 8(sp),d0
    ad4a:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad4e:	   /-- bne.s ad62 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad50:	   |   pea 19200 <PutChar+0x14ee>
    ad56:	   |   jsr 17248 <KPrintF>
    ad5c:	   |   addq.l #4,sp
        return NULL;    
    ad5e:	   |   moveq #0,d0
    ad60:	/--|-- bra.s ad7c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ad62:	|  \-> movea.l 4(sp),a0
    ad66:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ad68:	|      movea.l 4(sp),a0
    ad6c:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad70:	|      movea.l 4(sp),a0
    ad74:	|      clr.l 4(a0)
	return newAnim;
    ad78:	|      move.l 4(sp),d0
}
    ad7c:	\----> movea.l (sp)+,a6
    ad7e:	       lea 16(sp),sp
    ad82:	       rts

0000ad84 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad84:	    move.l d2,-(sp)
	me->x = x;
    ad86:	    movea.l 8(sp),a0
    ad8a:	    move.l 12(sp),(a0)
	me->y = y;
    ad8e:	    movea.l 8(sp),a0
    ad92:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ad98:	    movea.l 8(sp),a0
    ad9c:	    clr.l 8(a0)
	me->oldy = 0;
    ada0:	    movea.l 8(sp),a0
    ada4:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ada8:	    movea.l 8(sp),a0
    adac:	    move.l 118(a0),d0
    adb0:	    moveq #2,d1
    adb2:	    and.l d1,d0
    adb4:	/-- bne.s ae0c <moveAndScale+0x88>
    adb6:	|   move.w 1c352 <scaleDivide>,d0
    adbc:	+-- beq.s ae0c <moveAndScale+0x88>
    adbe:	|   movea.l 8(sp),a0
    adc2:	|   move.l 4(a0),d2
    adc6:	|   move.w 1c350 <scaleHorizon>,d0
    adcc:	|   movea.w d0,a0
    adce:	|   move.l a0,-(sp)
    add0:	|   jsr 1767a <__floatsisf>
    add6:	|   addq.l #4,sp
    add8:	|   move.l d0,-(sp)
    adda:	|   move.l d2,-(sp)
    addc:	|   jsr 1796e <__subsf3>
    ade2:	|   addq.l #8,sp
    ade4:	|   move.l d0,d2
    ade6:	|   move.w 1c352 <scaleDivide>,d0
    adec:	|   movea.w d0,a0
    adee:	|   move.l a0,-(sp)
    adf0:	|   jsr 1767a <__floatsisf>
    adf6:	|   addq.l #4,sp
    adf8:	|   move.l d0,-(sp)
    adfa:	|   move.l d2,-(sp)
    adfc:	|   jsr 17530 <__divsf3>
    ae02:	|   addq.l #8,sp
    ae04:	|   movea.l 8(sp),a0
    ae08:	|   move.l d0,32(a0)
}
    ae0c:	\-> nop
    ae0e:	    move.l (sp)+,d2
    ae10:	    rts

0000ae12 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ae12:	          lea -16(sp),sp
    ae16:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae18:	          move.l 24(sp),-(sp)
    ae1c:	          jsr a63c <findPerson>
    ae22:	          addq.l #4,sp
    ae24:	          move.l d0,8(sp)

    if (p) {
    ae28:	/-------- beq.w af08 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae2c:	|         move.l 1cad2 <overRegion>,d0
    ae32:	|         cmpi.l #117286,d0
    ae38:	|     /-- bne.s ae56 <removeOneCharacter+0x44>
    ae3a:	|     |   movea.l 1cad2 <overRegion>,a0
    ae40:	|     |   move.l 28(a0),d1
    ae44:	|     |   movea.l 8(sp),a0
    ae48:	|     |   move.l 114(a0),d0
    ae4c:	|     |   cmp.l d1,d0
    ae4e:	|     +-- bne.s ae56 <removeOneCharacter+0x44>
            overRegion = NULL;
    ae50:	|     |   clr.l 1cad2 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae56:	|     \-> movea.l 8(sp),a0
    ae5a:	|         move.l 68(a0),d0
    ae5e:	|     /-- beq.s ae72 <removeOneCharacter+0x60>
    ae60:	|     |   movea.l 8(sp),a0
    ae64:	|     |   move.l 68(a0),d0
    ae68:	|     |   move.l d0,-(sp)
    ae6a:	|     |   jsr 472e <abortFunction>
    ae70:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae72:	|     \-> movea.l 8(sp),a0
    ae76:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae7a:	|         clr.l 12(sp)
    ae7e:	|     /-- bra.s aea6 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae80:	|  /--|-> movea.l 8(sp),a0
    ae84:	|  |  |   movea.l 80(a0),a0
    ae88:	|  |  |   move.l (a0),d1
    ae8a:	|  |  |   move.l 12(sp),d0
    ae8e:	|  |  |   add.l d0,d0
    ae90:	|  |  |   add.l d0,d0
    ae92:	|  |  |   movea.l d1,a0
    ae94:	|  |  |   adda.l d0,a0
    ae96:	|  |  |   move.l (a0),d0
    ae98:	|  |  |   move.l d0,-(sp)
    ae9a:	|  |  |   jsr 991a <deleteAnim>
    aea0:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    aea2:	|  |  |   addq.l #1,12(sp)
    aea6:	|  |  \-> moveq #2,d0
    aea8:	|  |      cmp.l 12(sp),d0
    aeac:	|  \----- bge.s ae80 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    aeae:	|         move.l #117282,16(sp)
    aeb6:	|     /-- bra.s aec6 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    aeb8:	|  /--|-> movea.l 16(sp),a0
    aebc:	|  |  |   move.l (a0),d0
    aebe:	|  |  |   moveq #36,d1
    aec0:	|  |  |   add.l d0,d1
    aec2:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    aec6:	|  |  \-> movea.l 16(sp),a0
    aeca:	|  |      move.l (a0),d0
    aecc:	|  |      cmp.l 8(sp),d0
    aed0:	|  \----- bne.s aeb8 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aed2:	|         movea.l 8(sp),a0
    aed6:	|         move.l 36(a0),d0
    aeda:	|         movea.l 16(sp),a0
    aede:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    aee0:	|         movea.l 8(sp),a0
    aee4:	|         move.l 114(a0),d0
    aee8:	|         move.l d0,-(sp)
    aeea:	|         jsr d8da <removeObjectType>
    aef0:	|         addq.l #4,sp
        FreeVec(p);
    aef2:	|         move.l 8(sp),4(sp)
    aef8:	|         move.l 1c9be <SysBase>,d0
    aefe:	|         movea.l d0,a6
    af00:	|         movea.l 4(sp),a1
    af04:	|         jsr -690(a6)
    }
}
    af08:	\-------> nop
    af0a:	          movea.l (sp)+,a6
    af0c:	          lea 16(sp),sp
    af10:	          rts

0000af12 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    af12:	       subq.l #8,sp
    af14:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af16:	       movea.l 16(sp),a0
    af1a:	       movea.l 80(a0),a0
    af1e:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af24:	       movea.l 16(sp),a0
    af28:	       move.l 92(a0),d2
    af2c:	       move.l 4(sp),-(sp)
    af30:	       pea b4 <_start+0xb4>
    af34:	       jsr 17c7a <__divsi3>
    af3a:	       addq.l #8,sp
    af3c:	       add.l d2,d0
    af3e:	       move.l d0,d1
    af40:	       addi.l #180,d1
    af46:	       movea.l 16(sp),a0
    af4a:	       move.l 100(a0),d0
    af4e:	       move.l d1,d2
    af50:	       add.l d0,d2
    af52:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af56:	   /-- bra.s af60 <rethinkAngle+0x4e>
    af58:	/--|-> addi.l #-360,8(sp)
    af60:	|  \-> cmpi.l #359,8(sp)
    af68:	\----- bgt.s af58 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    af6a:	       move.l 4(sp),-(sp)
    af6e:	       move.l 12(sp),-(sp)
    af72:	       jsr 17bfc <__mulsi3>
    af78:	       addq.l #8,sp
    af7a:	       pea 168 <decodeFilename+0x50>
    af7e:	       move.l d0,-(sp)
    af80:	       jsr 17c7a <__divsi3>
    af86:	       addq.l #8,sp
    af88:	       movea.l 16(sp),a0
    af8c:	       move.l d0,106(a0)
}
    af90:	       nop
    af92:	       move.l (sp)+,d2
    af94:	       addq.l #8,sp
    af96:	       rts

0000af98 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    af98:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    af9a:	          movea.l 8(sp),a0
    af9e:	          move.l 8(a0),d0
    afa2:	          move.l 12(sp),-(sp)
    afa6:	          move.l d0,-(sp)
    afa8:	          jsr 8d0 <put2bytes>
    afae:	          addq.l #8,sp
	if (p -> numFrames) {
    afb0:	          movea.l 8(sp),a0
    afb4:	          move.l 8(a0),d0
    afb8:	/-------- beq.w b05c <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    afbc:	|         movea.l 8(sp),a0
    afc0:	|         movea.l (a0),a0
    afc2:	|         move.l (a0),d0
    afc4:	|         move.l 12(sp),-(sp)
    afc8:	|         move.l d0,-(sp)
    afca:	|         jsr 958 <put4bytes>
    afd0:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    afd2:	|         clr.l (sp)
    afd4:	|     /-- bra.s b04e <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    afd6:	|  /--|-> movea.l 8(sp),a0
    afda:	|  |  |   movea.l 4(a0),a0
    afde:	|  |  |   move.l (sp),d1
    afe0:	|  |  |   move.l d1,d0
    afe2:	|  |  |   add.l d0,d0
    afe4:	|  |  |   add.l d1,d0
    afe6:	|  |  |   add.l d0,d0
    afe8:	|  |  |   add.l d0,d0
    afea:	|  |  |   adda.l d0,a0
    afec:	|  |  |   move.l (a0),d0
    afee:	|  |  |   move.l 12(sp),-(sp)
    aff2:	|  |  |   move.l d0,-(sp)
    aff4:	|  |  |   jsr 958 <put4bytes>
    affa:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    affc:	|  |  |   movea.l 8(sp),a0
    b000:	|  |  |   movea.l 4(a0),a0
    b004:	|  |  |   move.l (sp),d1
    b006:	|  |  |   move.l d1,d0
    b008:	|  |  |   add.l d0,d0
    b00a:	|  |  |   add.l d1,d0
    b00c:	|  |  |   add.l d0,d0
    b00e:	|  |  |   add.l d0,d0
    b010:	|  |  |   adda.l d0,a0
    b012:	|  |  |   move.l 4(a0),d0
    b016:	|  |  |   move.l 12(sp),-(sp)
    b01a:	|  |  |   move.l d0,-(sp)
    b01c:	|  |  |   jsr 958 <put4bytes>
    b022:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b024:	|  |  |   movea.l 8(sp),a0
    b028:	|  |  |   movea.l 4(a0),a0
    b02c:	|  |  |   move.l (sp),d1
    b02e:	|  |  |   move.l d1,d0
    b030:	|  |  |   add.l d0,d0
    b032:	|  |  |   add.l d1,d0
    b034:	|  |  |   add.l d0,d0
    b036:	|  |  |   add.l d0,d0
    b038:	|  |  |   adda.l d0,a0
    b03a:	|  |  |   move.l 8(a0),d0
    b03e:	|  |  |   move.l 12(sp),-(sp)
    b042:	|  |  |   move.l d0,-(sp)
    b044:	|  |  |   jsr 958 <put4bytes>
    b04a:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b04c:	|  |  |   addq.l #1,(sp)
    b04e:	|  |  \-> movea.l 8(sp),a0
    b052:	|  |      move.l 8(a0),d0
    b056:	|  |      cmp.l (sp),d0
    b058:	|  \----- bgt.w afd6 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b05c:	\-------> moveq #1,d0
}
    b05e:	          addq.l #4,sp
    b060:	          rts

0000b062 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b062:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b064:	             movea.l 8(sp),a0
    b068:	             move.l 4(a0),d0
    b06c:	             move.l 12(sp),-(sp)
    b070:	             move.l d0,-(sp)
    b072:	             jsr 8d0 <put2bytes>
    b078:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b07a:	             clr.l (sp)
    b07c:	   /-------- bra.s b0a8 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b07e:	/--|-------> movea.l 8(sp),a0
    b082:	|  |         move.l (a0),d1
    b084:	|  |         move.l (sp),d0
    b086:	|  |         add.l d0,d0
    b088:	|  |         add.l d0,d0
    b08a:	|  |         movea.l d1,a0
    b08c:	|  |         adda.l d0,a0
    b08e:	|  |         move.l (a0),d0
    b090:	|  |         move.l 12(sp),-(sp)
    b094:	|  |         move.l d0,-(sp)
    b096:	|  |         jsr af98 <saveAnim>
    b09c:	|  |         addq.l #8,sp
    b09e:	|  |         tst.w d0
    b0a0:	|  |     /-- bne.s b0a6 <saveCostume+0x44>
    b0a2:	|  |     |   clr.w d0
    b0a4:	|  |  /--|-- bra.s b0bc <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0a6:	|  |  |  \-> addq.l #1,(sp)
    b0a8:	|  \--|----> movea.l 8(sp),a0
    b0ac:	|     |      move.l 4(a0),d1
    b0b0:	|     |      move.l d1,d0
    b0b2:	|     |      add.l d0,d0
    b0b4:	|     |      add.l d1,d0
    b0b6:	|     |      cmp.l (sp),d0
    b0b8:	\-----|----- bgt.s b07e <saveCostume+0x1c>
	}

	return TRUE;
    b0ba:	      |      moveq #1,d0
}
    b0bc:	      \----> addq.l #4,sp
    b0be:	             rts

0000b0c0 <savePeople>:

BOOL savePeople (BPTR fp) {
    b0c0:	             lea -144(sp),sp
    b0c4:	             move.l a6,-(sp)
    b0c6:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b0c8:	             move.l 1ca22 <allPeople>,148(sp)
	int countPeople = 0, a;
    b0d0:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b0d4:	             move.w 1c350 <scaleHorizon>,d0
    b0da:	             movea.w d0,a0
    b0dc:	             move.l 156(sp),-(sp)
    b0e0:	             move.l a0,-(sp)
    b0e2:	             jsr a9c <putSigned>
    b0e8:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b0ea:	             move.w 1c352 <scaleDivide>,d0
    b0f0:	             movea.w d0,a0
    b0f2:	             move.l 156(sp),-(sp)
    b0f6:	             move.l a0,-(sp)
    b0f8:	             jsr a9c <putSigned>
    b0fe:	             addq.l #8,sp

	while (me) {
    b100:	         /-- bra.s b110 <savePeople+0x50>
		countPeople ++;
    b102:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b106:	      |  |   movea.l 148(sp),a0
    b10a:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b110:	      |  \-> tst.l 148(sp)
    b114:	      \----- bne.s b102 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b116:	             move.l 156(sp),-(sp)
    b11a:	             move.l 148(sp),-(sp)
    b11e:	             jsr 8d0 <put2bytes>
    b124:	             addq.l #8,sp

	me = allPeople;
    b126:	             move.l 1ca22 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b12e:	             clr.l 140(sp)
    b132:	   /-------- bra.w b58a <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b136:	/--|-------> movea.l 148(sp),a0
    b13a:	|  |         move.l (a0),d0
    b13c:	|  |         move.l 156(sp),-(sp)
    b140:	|  |         move.l d0,-(sp)
    b142:	|  |         jsr a46 <putFloat>
    b148:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b14a:	|  |         movea.l 148(sp),a0
    b14e:	|  |         move.l 4(a0),d0
    b152:	|  |         move.l 156(sp),-(sp)
    b156:	|  |         move.l d0,-(sp)
    b158:	|  |         jsr a46 <putFloat>
    b15e:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b160:	|  |         movea.l 148(sp),a0
    b164:	|  |         move.l 80(a0),d0
    b168:	|  |         move.l 156(sp),-(sp)
    b16c:	|  |         move.l d0,-(sp)
    b16e:	|  |         jsr b062 <saveCostume>
    b174:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b176:	|  |         movea.l 148(sp),a0
    b17a:	|  |         move.l 72(a0),d0
    b17e:	|  |         move.l 156(sp),-(sp)
    b182:	|  |         move.l d0,-(sp)
    b184:	|  |         jsr af98 <saveAnim>
    b18a:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b18c:	|  |         move.l 156(sp),136(sp)
    b192:	|  |         movea.l 148(sp),a0
    b196:	|  |         move.l 72(a0),d1
    b19a:	|  |         movea.l 148(sp),a0
    b19e:	|  |         move.l 76(a0),d0
    b1a2:	|  |         cmp.l d1,d0
    b1a4:	|  |         seq d0
    b1a6:	|  |         neg.b d0
    b1a8:	|  |         move.b d0,d0
    b1aa:	|  |         andi.l #255,d0
    b1b0:	|  |         move.l d0,132(sp)
    b1b4:	|  |         move.l 1c9c6 <DOSBase>,d0
    b1ba:	|  |         movea.l d0,a6
    b1bc:	|  |         move.l 136(sp),d1
    b1c0:	|  |         move.l 132(sp),d2
    b1c4:	|  |         jsr -312(a6)
    b1c8:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b1cc:	|  |         movea.l 148(sp),a0
    b1d0:	|  |         move.l 32(a0),d0
    b1d4:	|  |         move.l 156(sp),-(sp)
    b1d8:	|  |         move.l d0,-(sp)
    b1da:	|  |         jsr a46 <putFloat>
    b1e0:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b1e2:	|  |         movea.l 148(sp),a0
    b1e6:	|  |         move.l 118(a0),d0
    b1ea:	|  |         move.l 156(sp),-(sp)
    b1ee:	|  |         move.l d0,-(sp)
    b1f0:	|  |         jsr 8d0 <put2bytes>
    b1f6:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b1f8:	|  |         movea.l 148(sp),a0
    b1fc:	|  |         move.l 20(a0),d0
    b200:	|  |         move.l 156(sp),-(sp)
    b204:	|  |         move.l d0,-(sp)
    b206:	|  |         jsr 8d0 <put2bytes>
    b20c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b20e:	|  |         movea.l 148(sp),a0
    b212:	|  |         move.l 40(a0),d0
    b216:	|  |         move.l 156(sp),-(sp)
    b21a:	|  |         move.l d0,-(sp)
    b21c:	|  |         jsr 8d0 <put2bytes>
    b222:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b224:	|  |         movea.l 148(sp),a0
    b228:	|  |         move.l 44(a0),d0
    b22c:	|  |         move.l 156(sp),-(sp)
    b230:	|  |         move.l d0,-(sp)
    b232:	|  |         jsr 8d0 <put2bytes>
    b238:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b23a:	|  |         movea.l 148(sp),a0
    b23e:	|  |         move.l 48(a0),d0
    b242:	|  |         move.l 156(sp),-(sp)
    b246:	|  |         move.l d0,-(sp)
    b248:	|  |         jsr 8d0 <put2bytes>
    b24e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b250:	|  |         movea.l 148(sp),a0
    b254:	|  |         move.l 52(a0),d0
    b258:	|  |         move.l 156(sp),-(sp)
    b25c:	|  |         move.l d0,-(sp)
    b25e:	|  |         jsr 8d0 <put2bytes>
    b264:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b266:	|  |         movea.l 148(sp),a0
    b26a:	|  |         move.l 84(a0),d0
    b26e:	|  |         move.l 156(sp),-(sp)
    b272:	|  |         move.l d0,-(sp)
    b274:	|  |         jsr 8d0 <put2bytes>
    b27a:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b27c:	|  |         movea.l 148(sp),a0
    b280:	|  |         move.l 88(a0),d0
    b284:	|  |         move.l 156(sp),-(sp)
    b288:	|  |         move.l d0,-(sp)
    b28a:	|  |         jsr 8d0 <put2bytes>
    b290:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b292:	|  |         movea.l 148(sp),a0
    b296:	|  |         move.l 28(a0),d0
    b29a:	|  |         move.l 156(sp),-(sp)
    b29e:	|  |         move.l d0,-(sp)
    b2a0:	|  |         jsr 8d0 <put2bytes>
    b2a6:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b2a8:	|  |         movea.l 148(sp),a0
    b2ac:	|  |         move.l 122(a0),d0
    b2b0:	|  |         move.l 156(sp),-(sp)
    b2b4:	|  |         move.l d0,-(sp)
    b2b6:	|  |         jsr 8d0 <put2bytes>
    b2bc:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b2be:	|  |         movea.l 148(sp),a0
    b2c2:	|  |         move.l 24(a0),d0
    b2c6:	|  |         move.l d0,d0
    b2c8:	|  |         movea.w d0,a0
    b2ca:	|  |         move.l 156(sp),-(sp)
    b2ce:	|  |         move.l a0,-(sp)
    b2d0:	|  |         jsr a9c <putSigned>
    b2d6:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b2d8:	|  |         move.l 156(sp),124(sp)
    b2de:	|  |         movea.l 148(sp),a0
    b2e2:	|  |         move.w 104(a0),d0
    b2e6:	|  |         movea.w d0,a0
    b2e8:	|  |         move.l a0,120(sp)
    b2ec:	|  |         move.l 1c9c6 <DOSBase>,d0
    b2f2:	|  |         movea.l d0,a6
    b2f4:	|  |         move.l 124(sp),d1
    b2f8:	|  |         move.l 120(sp),d2
    b2fc:	|  |         jsr -312(a6)
    b300:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b304:	|  |         move.l 156(sp),112(sp)
    b30a:	|  |         movea.l 148(sp),a0
    b30e:	|  |         move.w 64(a0),d0
    b312:	|  |         movea.w d0,a0
    b314:	|  |         move.l a0,108(sp)
    b318:	|  |         move.l 1c9c6 <DOSBase>,d0
    b31e:	|  |         movea.l d0,a6
    b320:	|  |         move.l 112(sp),d1
    b324:	|  |         move.l 108(sp),d2
    b328:	|  |         jsr -312(a6)
    b32c:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b330:	|  |         move.l 156(sp),100(sp)
    b336:	|  |         movea.l 148(sp),a0
    b33a:	|  |         move.w 66(a0),d0
    b33e:	|  |         movea.w d0,a0
    b340:	|  |         move.l a0,96(sp)
    b344:	|  |         move.l 1c9c6 <DOSBase>,d0
    b34a:	|  |         movea.l d0,a6
    b34c:	|  |         move.l 100(sp),d1
    b350:	|  |         move.l 96(sp),d2
    b354:	|  |         jsr -312(a6)
    b358:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b35c:	|  |         movea.l 148(sp),a0
    b360:	|  |         move.l 68(a0),d0
    b364:	|  |  /----- beq.s b3a2 <savePeople+0x2e2>
			FPutC (fp, 1);
    b366:	|  |  |      move.l 156(sp),76(sp)
    b36c:	|  |  |      moveq #1,d0
    b36e:	|  |  |      move.l d0,72(sp)
    b372:	|  |  |      move.l 1c9c6 <DOSBase>,d0
    b378:	|  |  |      movea.l d0,a6
    b37a:	|  |  |      move.l 76(sp),d1
    b37e:	|  |  |      move.l 72(sp),d2
    b382:	|  |  |      jsr -312(a6)
    b386:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b38a:	|  |  |      movea.l 148(sp),a0
    b38e:	|  |  |      move.l 68(a0),d0
    b392:	|  |  |      move.l 156(sp),-(sp)
    b396:	|  |  |      move.l d0,-(sp)
    b398:	|  |  |      jsr c5bc <saveFunction>
    b39e:	|  |  |      addq.l #8,sp
    b3a0:	|  |  |  /-- bra.s b3c6 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b3a2:	|  |  \--|-> move.l 156(sp),88(sp)
    b3a8:	|  |     |   moveq #1,d0
    b3aa:	|  |     |   move.l d0,84(sp)
    b3ae:	|  |     |   move.l 1c9c6 <DOSBase>,d0
    b3b4:	|  |     |   movea.l d0,a6
    b3b6:	|  |     |   move.l 88(sp),d1
    b3ba:	|  |     |   move.l 84(sp),d2
    b3be:	|  |     |   jsr -312(a6)
    b3c2:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b3c6:	|  |     \-> movea.l 148(sp),a0
    b3ca:	|  |         move.l 106(a0),d0
    b3ce:	|  |         move.l 156(sp),-(sp)
    b3d2:	|  |         move.l d0,-(sp)
    b3d4:	|  |         jsr 8d0 <put2bytes>
    b3da:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b3dc:	|  |         movea.l 148(sp),a0
    b3e0:	|  |         move.l 92(a0),d0
    b3e4:	|  |         move.l 156(sp),-(sp)
    b3e8:	|  |         move.l d0,-(sp)
    b3ea:	|  |         jsr 8d0 <put2bytes>
    b3f0:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b3f2:	|  |         movea.l 148(sp),a0
    b3f6:	|  |         move.l 100(a0),d0
    b3fa:	|  |         move.l 156(sp),-(sp)
    b3fe:	|  |         move.l d0,-(sp)
    b400:	|  |         jsr 8d0 <put2bytes>
    b406:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b408:	|  |         movea.l 148(sp),a0
    b40c:	|  |         move.l 96(a0),d0
    b410:	|  |         move.l 156(sp),-(sp)
    b414:	|  |         move.l d0,-(sp)
    b416:	|  |         jsr 8d0 <put2bytes>
    b41c:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b41e:	|  |         movea.l 148(sp),a0
    b422:	|  |         move.l 110(a0),d0
    b426:	|  |         move.l d0,d0
    b428:	|  |         movea.w d0,a0
    b42a:	|  |         move.l 156(sp),-(sp)
    b42e:	|  |         move.l a0,-(sp)
    b430:	|  |         jsr a9c <putSigned>
    b436:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b438:	|  |         movea.l 148(sp),a0
    b43c:	|  |         move.l 56(a0),d0
    b440:	|  |         move.l d0,d0
    b442:	|  |         movea.w d0,a0
    b444:	|  |         move.l 156(sp),-(sp)
    b448:	|  |         move.l a0,-(sp)
    b44a:	|  |         jsr a9c <putSigned>
    b450:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b452:	|  |         movea.l 148(sp),a0
    b456:	|  |         move.l 60(a0),d0
    b45a:	|  |         move.l d0,d0
    b45c:	|  |         movea.w d0,a0
    b45e:	|  |         move.l 156(sp),-(sp)
    b462:	|  |         move.l a0,-(sp)
    b464:	|  |         jsr a9c <putSigned>
    b46a:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b46c:	|  |         move.l 156(sp),64(sp)
    b472:	|  |         movea.l 148(sp),a0
    b476:	|  |         move.b 126(a0),d0
    b47a:	|  |         move.b d0,d0
    b47c:	|  |         andi.l #255,d0
    b482:	|  |         move.l d0,60(sp)
    b486:	|  |         move.l 1c9c6 <DOSBase>,d0
    b48c:	|  |         movea.l d0,a6
    b48e:	|  |         move.l 64(sp),d1
    b492:	|  |         move.l 60(sp),d2
    b496:	|  |         jsr -312(a6)
    b49a:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b49e:	|  |         move.l 156(sp),52(sp)
    b4a4:	|  |         movea.l 148(sp),a0
    b4a8:	|  |         move.b 127(a0),d0
    b4ac:	|  |         move.b d0,d0
    b4ae:	|  |         andi.l #255,d0
    b4b4:	|  |         move.l d0,48(sp)
    b4b8:	|  |         move.l 1c9c6 <DOSBase>,d0
    b4be:	|  |         movea.l d0,a6
    b4c0:	|  |         move.l 52(sp),d1
    b4c4:	|  |         move.l 48(sp),d2
    b4c8:	|  |         jsr -312(a6)
    b4cc:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b4d0:	|  |         move.l 156(sp),40(sp)
    b4d6:	|  |         movea.l 148(sp),a0
    b4da:	|  |         move.b 128(a0),d0
    b4de:	|  |         move.b d0,d0
    b4e0:	|  |         andi.l #255,d0
    b4e6:	|  |         move.l d0,36(sp)
    b4ea:	|  |         move.l 1c9c6 <DOSBase>,d0
    b4f0:	|  |         movea.l d0,a6
    b4f2:	|  |         move.l 40(sp),d1
    b4f6:	|  |         move.l 36(sp),d2
    b4fa:	|  |         jsr -312(a6)
    b4fe:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b502:	|  |         move.l 156(sp),28(sp)
    b508:	|  |         movea.l 148(sp),a0
    b50c:	|  |         move.b 129(a0),d0
    b510:	|  |         move.b d0,d0
    b512:	|  |         andi.l #255,d0
    b518:	|  |         move.l d0,24(sp)
    b51c:	|  |         move.l 1c9c6 <DOSBase>,d0
    b522:	|  |         movea.l d0,a6
    b524:	|  |         move.l 28(sp),d1
    b528:	|  |         move.l 24(sp),d2
    b52c:	|  |         jsr -312(a6)
    b530:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b534:	|  |         move.l 156(sp),16(sp)
    b53a:	|  |         movea.l 148(sp),a0
    b53e:	|  |         move.b 130(a0),d0
    b542:	|  |         move.b d0,d0
    b544:	|  |         andi.l #255,d0
    b54a:	|  |         move.l d0,12(sp)
    b54e:	|  |         move.l 1c9c6 <DOSBase>,d0
    b554:	|  |         movea.l d0,a6
    b556:	|  |         move.l 16(sp),d1
    b55a:	|  |         move.l 12(sp),d2
    b55e:	|  |         jsr -312(a6)
    b562:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b566:	|  |         movea.l 148(sp),a0
    b56a:	|  |         move.l 114(a0),d0
    b56e:	|  |         move.l 156(sp),-(sp)
    b572:	|  |         move.l d0,-(sp)
    b574:	|  |         jsr d97a <saveObjectRef>
    b57a:	|  |         addq.l #8,sp

		me = me -> next;
    b57c:	|  |         movea.l 148(sp),a0
    b580:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b586:	|  |         addq.l #1,140(sp)
    b58a:	|  \-------> movea.l 140(sp),a0
    b58e:	|            cmpa.l 144(sp),a0
    b592:	\----------- blt.w b136 <savePeople+0x76>
	}
	return TRUE;
    b596:	             moveq #1,d0
}
    b598:	             move.l (sp)+,d2
    b59a:	             movea.l (sp)+,a6
    b59c:	             lea 144(sp),sp
    b5a0:	             rts

0000b5a2 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b5a2:	movea.l 4(sp),a0
    b5a6:	move.l 8(sp),(a0)
}
    b5aa:	nop
    b5ac:	rts

0000b5ae <setDrawMode>:


void setDrawMode (int h, int ob) {
    b5ae:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b5b0:	       move.l 12(sp),-(sp)
    b5b4:	       jsr a63c <findPerson>
    b5ba:	       addq.l #4,sp
    b5bc:	       move.l d0,(sp)
	if (! moveMe) return;
    b5be:	/----- beq.s b5d2 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b5c0:	|      move.l 8(sp),-(sp)
    b5c4:	|      move.l 4(sp),-(sp)
    b5c8:	|      jsr b5d8 <setMyDrawMode>
    b5ce:	|      addq.l #8,sp
    b5d0:	|  /-- bra.s b5d4 <setDrawMode+0x26>
	if (! moveMe) return;
    b5d2:	\--|-> nop
}
    b5d4:	   \-> addq.l #4,sp
    b5d6:	       rts

0000b5d8 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b5d8:	       moveq #19,d0
    b5da:	       cmp.l 8(sp),d0
    b5de:	/----- bcs.w bab6 <setMyDrawMode+0x4de>
    b5e2:	|      move.l 8(sp),d0
    b5e6:	|      add.l d0,d0
    b5e8:	|      movea.l d0,a0
    b5ea:	|      adda.l #46582,a0
    b5f0:	|      move.w (a0),d0
    b5f2:	|      jmp (b5f6 <setMyDrawMode+0x1e>,pc,d0.w)
    b5f6:	|      .short 0x04c0
    b5f8:	|      ori.l #6684712,-(a4)
    b5fe:	|      btst d0,-(a0)
    b600:	|      bchg d0,(a6)+
    b602:	|      bclr d0,(a4)+
    b604:	|      bset d0,(a2)+
    b606:	|      andi.b #84,(a6)
    b60a:	|      andi.l #55575312,(a2)
    b610:	|      .short 0x02d0
    b612:	|      bclr d1,(a0)
    b614:	|      .short 0x044a
    b616:	|      .short 0x040c
    b618:	|      movep.l d1,1158(a6)
    b61c:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b61e:	|      movea.l 4(sp),a0
    b622:	|      clr.b 128(a0)
    b626:	|      movea.l 4(sp),a0
    b62a:	|      move.b 128(a0),d0
    b62e:	|      movea.l 4(sp),a0
    b632:	|      move.b d0,127(a0)
    b636:	|      movea.l 4(sp),a0
    b63a:	|      move.b 127(a0),d0
    b63e:	|      movea.l 4(sp),a0
    b642:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b646:	|      movea.l 4(sp),a0
    b64a:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b64e:	|      movea.l 4(sp),a0
    b652:	|      move.b #64,130(a0)
			break;
    b658:	|  /-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b65c:	|  |   movea.l 4(sp),a0
    b660:	|  |   clr.b 128(a0)
    b664:	|  |   movea.l 4(sp),a0
    b668:	|  |   move.b 128(a0),d0
    b66c:	|  |   movea.l 4(sp),a0
    b670:	|  |   move.b d0,127(a0)
    b674:	|  |   movea.l 4(sp),a0
    b678:	|  |   move.b 127(a0),d0
    b67c:	|  |   movea.l 4(sp),a0
    b680:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b684:	|  |   movea.l 4(sp),a0
    b688:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b68c:	|  |   movea.l 4(sp),a0
    b690:	|  |   move.b #-128,130(a0)
			break;
    b696:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b69a:	|  |   movea.l 4(sp),a0
    b69e:	|  |   clr.b 128(a0)
    b6a2:	|  |   movea.l 4(sp),a0
    b6a6:	|  |   move.b 128(a0),d0
    b6aa:	|  |   movea.l 4(sp),a0
    b6ae:	|  |   move.b d0,127(a0)
    b6b2:	|  |   movea.l 4(sp),a0
    b6b6:	|  |   move.b 127(a0),d0
    b6ba:	|  |   movea.l 4(sp),a0
    b6be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6c2:	|  |   movea.l 4(sp),a0
    b6c6:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b6ca:	|  |   movea.l 4(sp),a0
    b6ce:	|  |   move.b #-64,130(a0)
			break;
    b6d4:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6d8:	|  |   movea.l 4(sp),a0
    b6dc:	|  |   clr.b 128(a0)
    b6e0:	|  |   movea.l 4(sp),a0
    b6e4:	|  |   move.b 128(a0),d0
    b6e8:	|  |   movea.l 4(sp),a0
    b6ec:	|  |   move.b d0,127(a0)
    b6f0:	|  |   movea.l 4(sp),a0
    b6f4:	|  |   move.b 127(a0),d0
    b6f8:	|  |   movea.l 4(sp),a0
    b6fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b700:	|  |   movea.l 4(sp),a0
    b704:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b708:	|  |   movea.l 4(sp),a0
    b70c:	|  |   move.b #-2,130(a0)
			break;
    b712:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b716:	|  |   movea.l 4(sp),a0
    b71a:	|  |   clr.b 128(a0)
    b71e:	|  |   movea.l 4(sp),a0
    b722:	|  |   move.b 128(a0),d0
    b726:	|  |   movea.l 4(sp),a0
    b72a:	|  |   move.b d0,127(a0)
    b72e:	|  |   movea.l 4(sp),a0
    b732:	|  |   move.b 127(a0),d0
    b736:	|  |   movea.l 4(sp),a0
    b73a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b73e:	|  |   movea.l 4(sp),a0
    b742:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   clr.b 130(a0)
			break;
    b750:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b754:	|  |   movea.l 4(sp),a0
    b758:	|  |   clr.b 128(a0)
    b75c:	|  |   movea.l 4(sp),a0
    b760:	|  |   move.b 128(a0),d0
    b764:	|  |   movea.l 4(sp),a0
    b768:	|  |   move.b d0,127(a0)
    b76c:	|  |   movea.l 4(sp),a0
    b770:	|  |   move.b 127(a0),d0
    b774:	|  |   movea.l 4(sp),a0
    b778:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b77c:	|  |   movea.l 4(sp),a0
    b780:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b786:	|  |   movea.l 4(sp),a0
    b78a:	|  |   clr.b 130(a0)
			break;
    b78e:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   clr.b 128(a0)
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   move.b 128(a0),d0
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   move.b d0,127(a0)
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b 127(a0),d0
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7c4:	|  |   movea.l 4(sp),a0
    b7c8:	|  |   clr.b 130(a0)
			break;
    b7cc:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   clr.b 128(a0)
    b7d8:	|  |   movea.l 4(sp),a0
    b7dc:	|  |   move.b 128(a0),d0
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   move.b d0,127(a0)
    b7e8:	|  |   movea.l 4(sp),a0
    b7ec:	|  |   move.b 127(a0),d0
    b7f0:	|  |   movea.l 4(sp),a0
    b7f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7f8:	|  |   movea.l 4(sp),a0
    b7fc:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b800:	|  |   movea.l 4(sp),a0
    b804:	|  |   clr.b 130(a0)
			break;
    b808:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b80c:	|  |   movea.l 4(sp),a0
    b810:	|  |   clr.b 128(a0)
    b814:	|  |   movea.l 4(sp),a0
    b818:	|  |   move.b 128(a0),d0
    b81c:	|  |   movea.l 4(sp),a0
    b820:	|  |   move.b d0,127(a0)
    b824:	|  |   movea.l 4(sp),a0
    b828:	|  |   move.b 127(a0),d0
    b82c:	|  |   movea.l 4(sp),a0
    b830:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b834:	|  |   movea.l 4(sp),a0
    b838:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b83c:	|  |   movea.l 4(sp),a0
    b840:	|  |   move.b #64,130(a0)
			break;
    b846:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b84a:	|  |   movea.l 4(sp),a0
    b84e:	|  |   clr.b 128(a0)
    b852:	|  |   movea.l 4(sp),a0
    b856:	|  |   move.b 128(a0),d0
    b85a:	|  |   movea.l 4(sp),a0
    b85e:	|  |   move.b d0,127(a0)
    b862:	|  |   movea.l 4(sp),a0
    b866:	|  |   move.b 127(a0),d0
    b86a:	|  |   movea.l 4(sp),a0
    b86e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b872:	|  |   movea.l 4(sp),a0
    b876:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b87a:	|  |   movea.l 4(sp),a0
    b87e:	|  |   move.b #-128,130(a0)
			break;
    b884:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b888:	|  |   movea.l 4(sp),a0
    b88c:	|  |   clr.b 128(a0)
    b890:	|  |   movea.l 4(sp),a0
    b894:	|  |   move.b 128(a0),d0
    b898:	|  |   movea.l 4(sp),a0
    b89c:	|  |   move.b d0,127(a0)
    b8a0:	|  |   movea.l 4(sp),a0
    b8a4:	|  |   move.b 127(a0),d0
    b8a8:	|  |   movea.l 4(sp),a0
    b8ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8b0:	|  |   movea.l 4(sp),a0
    b8b4:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b8b8:	|  |   movea.l 4(sp),a0
    b8bc:	|  |   move.b #-64,130(a0)
			break;
    b8c2:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8c6:	|  |   movea.l 4(sp),a0
    b8ca:	|  |   move.b #-128,128(a0)
    b8d0:	|  |   movea.l 4(sp),a0
    b8d4:	|  |   move.b 128(a0),d0
    b8d8:	|  |   movea.l 4(sp),a0
    b8dc:	|  |   move.b d0,127(a0)
    b8e0:	|  |   movea.l 4(sp),a0
    b8e4:	|  |   move.b 127(a0),d0
    b8e8:	|  |   movea.l 4(sp),a0
    b8ec:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b8fa:	|  |   movea.l 4(sp),a0
    b8fe:	|  |   clr.b 130(a0)
			break;
    b902:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   move.b #-128,128(a0)
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   move.b 128(a0),d0
    b918:	|  |   movea.l 4(sp),a0
    b91c:	|  |   move.b d0,127(a0)
    b920:	|  |   movea.l 4(sp),a0
    b924:	|  |   move.b 127(a0),d0
    b928:	|  |   movea.l 4(sp),a0
    b92c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b930:	|  |   movea.l 4(sp),a0
    b934:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   clr.b 130(a0)
			break;
    b942:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b946:	|  |   movea.l 4(sp),a0
    b94a:	|  |   move.b #-128,128(a0)
    b950:	|  |   movea.l 4(sp),a0
    b954:	|  |   move.b 128(a0),d0
    b958:	|  |   movea.l 4(sp),a0
    b95c:	|  |   move.b d0,127(a0)
    b960:	|  |   movea.l 4(sp),a0
    b964:	|  |   move.b 127(a0),d0
    b968:	|  |   movea.l 4(sp),a0
    b96c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b970:	|  |   movea.l 4(sp),a0
    b974:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   clr.b 130(a0)
			break;
    b982:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b986:	|  |   movea.l 4(sp),a0
    b98a:	|  |   move.b #-128,128(a0)
    b990:	|  |   movea.l 4(sp),a0
    b994:	|  |   move.b 128(a0),d0
    b998:	|  |   movea.l 4(sp),a0
    b99c:	|  |   move.b d0,127(a0)
    b9a0:	|  |   movea.l 4(sp),a0
    b9a4:	|  |   move.b 127(a0),d0
    b9a8:	|  |   movea.l 4(sp),a0
    b9ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9b0:	|  |   movea.l 4(sp),a0
    b9b4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   clr.b 130(a0)
			break;
    b9c0:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9c4:	|  |   movea.l 4(sp),a0
    b9c8:	|  |   st 128(a0)
    b9cc:	|  |   movea.l 4(sp),a0
    b9d0:	|  |   move.b 128(a0),d0
    b9d4:	|  |   movea.l 4(sp),a0
    b9d8:	|  |   move.b d0,127(a0)
    b9dc:	|  |   movea.l 4(sp),a0
    b9e0:	|  |   move.b 127(a0),d0
    b9e4:	|  |   movea.l 4(sp),a0
    b9e8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b9f6:	|  |   movea.l 4(sp),a0
    b9fa:	|  |   clr.b 130(a0)
			break;
    b9fe:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba02:	|  |   movea.l 4(sp),a0
    ba06:	|  |   st 128(a0)
    ba0a:	|  |   movea.l 4(sp),a0
    ba0e:	|  |   move.b 128(a0),d0
    ba12:	|  |   movea.l 4(sp),a0
    ba16:	|  |   move.b d0,127(a0)
    ba1a:	|  |   movea.l 4(sp),a0
    ba1e:	|  |   move.b 127(a0),d0
    ba22:	|  |   movea.l 4(sp),a0
    ba26:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba2a:	|  |   movea.l 4(sp),a0
    ba2e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   clr.b 130(a0)
			break;
    ba3c:	|  +-- bra.w baf0 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba40:	|  |   movea.l 4(sp),a0
    ba44:	|  |   st 128(a0)
    ba48:	|  |   movea.l 4(sp),a0
    ba4c:	|  |   move.b 128(a0),d0
    ba50:	|  |   movea.l 4(sp),a0
    ba54:	|  |   move.b d0,127(a0)
    ba58:	|  |   movea.l 4(sp),a0
    ba5c:	|  |   move.b 127(a0),d0
    ba60:	|  |   movea.l 4(sp),a0
    ba64:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba68:	|  |   movea.l 4(sp),a0
    ba6c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   clr.b 130(a0)
			break;
    ba7a:	|  +-- bra.s baf0 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba7c:	|  |   movea.l 4(sp),a0
    ba80:	|  |   st 128(a0)
    ba84:	|  |   movea.l 4(sp),a0
    ba88:	|  |   move.b 128(a0),d0
    ba8c:	|  |   movea.l 4(sp),a0
    ba90:	|  |   move.b d0,127(a0)
    ba94:	|  |   movea.l 4(sp),a0
    ba98:	|  |   move.b 127(a0),d0
    ba9c:	|  |   movea.l 4(sp),a0
    baa0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    baa4:	|  |   movea.l 4(sp),a0
    baa8:	|  |   st 129(a0)
			moveMe->transparency = 0;
    baac:	|  |   movea.l 4(sp),a0
    bab0:	|  |   clr.b 130(a0)
			break;
    bab4:	|  +-- bra.s baf0 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bab6:	\--|-> movea.l 4(sp),a0
    baba:	   |   clr.b 128(a0)
    babe:	   |   movea.l 4(sp),a0
    bac2:	   |   move.b 128(a0),d0
    bac6:	   |   movea.l 4(sp),a0
    baca:	   |   move.b d0,127(a0)
    bace:	   |   movea.l 4(sp),a0
    bad2:	   |   move.b 127(a0),d0
    bad6:	   |   movea.l 4(sp),a0
    bada:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bade:	   |   movea.l 4(sp),a0
    bae2:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bae6:	   |   movea.l 4(sp),a0
    baea:	   |   clr.b 130(a0)
			break;
    baee:	   |   nop
	}
}
    baf0:	   \-> nop
    baf2:	       rts

0000baf4 <shufflePeople>:

void shufflePeople () {
    baf4:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    baf8:	             move.l #117282,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bb00:	             move.l 1ca22 <allPeople>,d0
    bb06:	/----------- beq.w bbdc <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bb0a:	|     /----- bra.w bbcc <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bb0e:	|  /--|----> movea.l 16(sp),a0
    bb12:	|  |  |      movea.l (a0),a0
    bb14:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb1a:	|  |  |      movea.l 16(sp),a0
    bb1e:	|  |  |      movea.l (a0),a0
    bb20:	|  |  |      move.l 118(a0),d0
    bb24:	|  |  |      moveq #1,d1
    bb26:	|  |  |      and.l d1,d0
    bb28:	|  |  |  /-- beq.s bb40 <shufflePeople+0x4c>
    bb2a:	|  |  |  |   move.l #1148846080,-(sp)
    bb30:	|  |  |  |   move.l 16(sp),-(sp)
    bb34:	|  |  |  |   jsr 17436 <__addsf3>
    bb3a:	|  |  |  |   addq.l #8,sp
    bb3c:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb40:	|  |  |  \-> movea.l 16(sp),a0
    bb44:	|  |  |      movea.l (a0),a0
    bb46:	|  |  |      movea.l 36(a0),a0
    bb4a:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb50:	|  |  |      movea.l 16(sp),a0
    bb54:	|  |  |      movea.l (a0),a0
    bb56:	|  |  |      movea.l 36(a0),a0
    bb5a:	|  |  |      move.l 118(a0),d0
    bb5e:	|  |  |      moveq #1,d1
    bb60:	|  |  |      and.l d1,d0
    bb62:	|  |  |  /-- beq.s bb7a <shufflePeople+0x86>
    bb64:	|  |  |  |   move.l #1148846080,-(sp)
    bb6a:	|  |  |  |   move.l 12(sp),-(sp)
    bb6e:	|  |  |  |   jsr 17436 <__addsf3>
    bb74:	|  |  |  |   addq.l #8,sp
    bb76:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb7a:	|  |  |  \-> move.l 8(sp),-(sp)
    bb7e:	|  |  |      move.l 16(sp),-(sp)
    bb82:	|  |  |      jsr 177e6 <__gtsf2>
    bb88:	|  |  |      addq.l #8,sp
    bb8a:	|  |  |      tst.l d0
    bb8c:	|  |  |  /-- ble.s bbbe <shufflePeople+0xca>
			A = (*thisReference);
    bb8e:	|  |  |  |   movea.l 16(sp),a0
    bb92:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bb96:	|  |  |  |   movea.l 16(sp),a0
    bb9a:	|  |  |  |   movea.l (a0),a0
    bb9c:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bba0:	|  |  |  |   movea.l (sp),a0
    bba2:	|  |  |  |   move.l 36(a0),d0
    bba6:	|  |  |  |   movea.l 4(sp),a0
    bbaa:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bbae:	|  |  |  |   movea.l (sp),a0
    bbb0:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bbb6:	|  |  |  |   movea.l 16(sp),a0
    bbba:	|  |  |  |   move.l (sp),(a0)
    bbbc:	|  |  +--|-- bra.s bbcc <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bbbe:	|  |  |  \-> movea.l 16(sp),a0
    bbc2:	|  |  |      move.l (a0),d0
    bbc4:	|  |  |      moveq #36,d1
    bbc6:	|  |  |      add.l d0,d1
    bbc8:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bbcc:	|  |  \----> movea.l 16(sp),a0
    bbd0:	|  |         movea.l (a0),a0
    bbd2:	|  |         move.l 36(a0),d0
    bbd6:	|  \-------- bne.w bb0e <shufflePeople+0x1a>
    bbda:	|        /-- bra.s bbde <shufflePeople+0xea>
	if (!allPeople) return;
    bbdc:	\--------|-> nop
		}
	}
}
    bbde:	         \-> lea 20(sp),sp
    bbe2:	             rts

0000bbe4 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bbe4:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bbe6:	       tst.l 8(sp)
    bbea:	   /-- bgt.s bbf0 <setCharacterWalkSpeed+0xc>
    bbec:	   |   clr.w d0
    bbee:	/--|-- bra.s bc0e <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bbf0:	|  \-> move.l 12(sp),-(sp)
    bbf4:	|      jsr a63c <findPerson>
    bbfa:	|      addq.l #4,sp
    bbfc:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bbfe:	|  /-- bne.s bc04 <setCharacterWalkSpeed+0x20>
    bc00:	|  |   clr.w d0
    bc02:	+--|-- bra.s bc0e <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bc04:	|  \-> movea.l (sp),a0
    bc06:	|      move.l 8(sp),28(a0)
	return TRUE;
    bc0c:	|      moveq #1,d0
}
    bc0e:	\----> addq.l #4,sp
    bc10:	       rts

0000bc12 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bc12:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc14:	       move.l 8(sp),-(sp)
    bc18:	       jsr a63c <findPerson>
    bc1e:	       addq.l #4,sp
    bc20:	       move.l d0,(sp)
    if (thisPerson) {
    bc22:	/----- beq.s bc42 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc24:	|      movea.l (sp),a0
    bc26:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc2c:	|      moveq #2,d0
    bc2e:	|      and.l 12(sp),d0
    bc32:	|  /-- beq.s bc3e <setPersonExtra+0x2c>
    bc34:	|  |   movea.l (sp),a0
    bc36:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc3e:	|  \-> moveq #1,d0
    bc40:	|  /-- bra.s bc44 <setPersonExtra+0x32>
    }
    return FALSE;
    bc42:	\--|-> clr.w d0
}
    bc44:	   \-> addq.l #4,sp
    bc46:	       rts

0000bc48 <setScale>:


void setScale (short int h, short int d) {
    bc48:	subq.l #4,sp
    bc4a:	move.l 8(sp),d1
    bc4e:	move.l 12(sp),d0
    bc52:	move.w d1,d1
    bc54:	move.w d1,2(sp)
    bc58:	move.w d0,d0
    bc5a:	move.w d0,(sp)
	scaleHorizon = h;
    bc5c:	move.w 2(sp),1c350 <scaleHorizon>
	scaleDivide = d;
    bc64:	move.w (sp),1c352 <scaleDivide>
}
    bc6a:	nop
    bc6c:	addq.l #4,sp
    bc6e:	rts

0000bc70 <setShown>:

void setShown (BOOL h, int ob) {
    bc70:	    subq.l #8,sp
    bc72:	    move.l 12(sp),d0
    bc76:	    move.w d0,d0
    bc78:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc7c:	    move.l 16(sp),-(sp)
    bc80:	    jsr a63c <findPerson>
    bc86:	    addq.l #4,sp
    bc88:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc8c:	/-- beq.s bc98 <setShown+0x28>
    bc8e:	|   movea.l 4(sp),a0
    bc92:	|   move.w 2(sp),104(a0)
}
    bc98:	\-> nop
    bc9a:	    addq.l #8,sp
    bc9c:	    rts

0000bc9e <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bc9e:	       subq.l #8,sp
    bca0:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bca2:	       movea.l 16(sp),a0
    bca6:	       move.l 92(a0),d0
    bcaa:	       move.l d0,d1
    bcac:	       addi.l #360,d1
    bcb2:	       movea.l 16(sp),a0
    bcb6:	       move.l 96(a0),d0
    bcba:	       move.l d1,d2
    bcbc:	       sub.l d0,d2
    bcbe:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bcc2:	       movea.l 16(sp),a0
    bcc6:	       move.l 122(a0),d0
    bcca:	   /-- beq.s bcd6 <spinStep+0x38>
    bccc:	   |   movea.l 16(sp),a0
    bcd0:	   |   move.l 122(a0),d0
    bcd4:	/--|-- bra.s bcf0 <spinStep+0x52>
    bcd6:	|  \-> movea.l 16(sp),a0
    bcda:	|      movea.l 80(a0),a0
    bcde:	|      move.l 4(a0),d0
    bce2:	|      move.l d0,-(sp)
    bce4:	|      pea 168 <decodeFilename+0x50>
    bce8:	|      jsr 17c7a <__divsi3>
    bcee:	|      addq.l #8,sp
    bcf0:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bcf4:	   /-- bra.s bcfe <spinStep+0x60>
		diff -= 360;
    bcf6:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bcfe:	|  \-> cmpi.l #180,8(sp)
    bd06:	\----- bgt.s bcf6 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bd08:	       move.l 8(sp),d0
    bd0c:	       cmp.l 4(sp),d0
    bd10:	   /-- blt.s bd2e <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bd12:	   |   movea.l 16(sp),a0
    bd16:	   |   move.l 92(a0),d0
    bd1a:	   |   sub.l 4(sp),d0
    bd1e:	   |   move.l d0,-(sp)
    bd20:	   |   move.l 20(sp),-(sp)
    bd24:	   |   jsr be0e <turnMeAngle>
    bd2a:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd2c:	/--|-- bra.s bd74 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd2e:	|  \-> move.l 4(sp),d0
    bd32:	|      neg.l d0
    bd34:	|      cmp.l 8(sp),d0
    bd38:	|  /-- blt.s bd56 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd3a:	|  |   movea.l 16(sp),a0
    bd3e:	|  |   move.l 92(a0),d0
    bd42:	|  |   add.l 4(sp),d0
    bd46:	|  |   move.l d0,-(sp)
    bd48:	|  |   move.l 20(sp),-(sp)
    bd4c:	|  |   jsr be0e <turnMeAngle>
    bd52:	|  |   addq.l #8,sp
}
    bd54:	+--|-- bra.s bd74 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd56:	|  \-> movea.l 16(sp),a0
    bd5a:	|      move.l 96(a0),d0
    bd5e:	|      move.l d0,-(sp)
    bd60:	|      move.l 20(sp),-(sp)
    bd64:	|      jsr be0e <turnMeAngle>
    bd6a:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bd6c:	|      movea.l 16(sp),a0
    bd70:	|      clr.w 66(a0)
}
    bd74:	\----> nop
    bd76:	       move.l (sp)+,d2
    bd78:	       addq.l #8,sp
    bd7a:	       rts

0000bd7c <stopPerson>:


BOOL stopPerson (int o) {
    bd7c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd7e:	       move.l 8(sp),-(sp)
    bd82:	       jsr a63c <findPerson>
    bd88:	       addq.l #4,sp
    bd8a:	       move.l d0,(sp)
    if (moveMe)
    bd8c:	/----- beq.s bdca <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd8e:	|      movea.l (sp),a0
    bd90:	|      move.l 68(a0),d0
    bd94:	+----- beq.s bdca <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bd96:	|      movea.l (sp),a0
    bd98:	|      move.l 68(a0),d0
    bd9c:	|      move.l d0,-(sp)
    bd9e:	|      jsr 472e <abortFunction>
    bda4:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bda6:	|      movea.l (sp),a0
    bda8:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bdac:	|      movea.l (sp),a0
    bdae:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bdb2:	|      movea.l (sp),a0
    bdb4:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bdb8:	|      clr.l -(sp)
    bdba:	|      move.l 4(sp),-(sp)
    bdbe:	|      jsr 8186 <setFrames>
    bdc4:	|      addq.l #8,sp
            return TRUE;
    bdc6:	|      moveq #1,d0
    bdc8:	|  /-- bra.s bdcc <stopPerson+0x50>
        }
    return FALSE;
    bdca:	\--|-> clr.w d0
}
    bdcc:	   \-> addq.l #4,sp
    bdce:	       rts

0000bdd0 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bdd0:	       subq.l #8,sp
	int total = 0;
    bdd2:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bdd6:	       clr.l (sp)
    bdd8:	   /-- bra.s bdfa <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bdda:	/--|-> movea.l 12(sp),a0
    bdde:	|  |   movea.l 4(a0),a0
    bde2:	|  |   move.l (sp),d1
    bde4:	|  |   move.l d1,d0
    bde6:	|  |   add.l d0,d0
    bde8:	|  |   add.l d1,d0
    bdea:	|  |   add.l d0,d0
    bdec:	|  |   add.l d0,d0
    bdee:	|  |   adda.l d0,a0
    bdf0:	|  |   move.l 4(a0),d0
    bdf4:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bdf8:	|  |   addq.l #1,(sp)
    bdfa:	|  \-> movea.l 12(sp),a0
    bdfe:	|      move.l 8(a0),d0
    be02:	|      cmp.l (sp),d0
    be04:	\----- bgt.s bdda <timeForAnim+0xa>
	}
	return total;
    be06:	       move.l 4(sp),d0
}
    be0a:	       addq.l #8,sp
    be0c:	       rts

0000be0e <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    be0e:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    be10:	       movea.l 8(sp),a0
    be14:	       movea.l 80(a0),a0
    be18:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be1c:	       movea.l 8(sp),a0
    be20:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be26:	       move.l (sp),-(sp)
    be28:	       pea b4 <_start+0xb4>
    be2c:	       jsr 17c7a <__divsi3>
    be32:	       addq.l #8,sp
    be34:	       move.l d0,d1
    be36:	       addi.l #180,d1
    be3c:	       movea.l 8(sp),a0
    be40:	       move.l 100(a0),d0
    be44:	       add.l d1,d0
    be46:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be4a:	   /-- bra.s be54 <turnMeAngle+0x46>
    be4c:	/--|-> addi.l #-360,12(sp)
    be54:	|  \-> cmpi.l #359,12(sp)
    be5c:	\----- bgt.s be4c <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    be5e:	       move.l (sp),-(sp)
    be60:	       move.l 16(sp),-(sp)
    be64:	       jsr 17bfc <__mulsi3>
    be6a:	       addq.l #8,sp
    be6c:	       pea 168 <decodeFilename+0x50>
    be70:	       move.l d0,-(sp)
    be72:	       jsr 17c7a <__divsi3>
    be78:	       addq.l #8,sp
    be7a:	       movea.l 8(sp),a0
    be7e:	       move.l d0,106(a0)
}
    be82:	       nop
    be84:	       addq.l #4,sp
    be86:	       rts

0000be88 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be88:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be8a:	          move.l 8(sp),-(sp)
    be8e:	          jsr a63c <findPerson>
    be94:	          addq.l #4,sp
    be96:	          move.l d0,(sp)
    if (thisPerson) {
    be98:	/-------- beq.s bef8 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    be9a:	|         movea.l (sp),a0
    be9c:	|         move.l 68(a0),d0
    bea0:	|     /-- beq.s beb2 <turnPersonToFace+0x2a>
    bea2:	|     |   movea.l (sp),a0
    bea4:	|     |   move.l 68(a0),d0
    bea8:	|     |   move.l d0,-(sp)
    beaa:	|     |   jsr 472e <abortFunction>
    beb0:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    beb2:	|     \-> movea.l (sp),a0
    beb4:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    beb8:	|         movea.l (sp),a0
    beba:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bebe:	|         movea.l (sp),a0
    bec0:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bec4:	|         move.l 12(sp),-(sp)
    bec8:	|         move.l 4(sp),-(sp)
    becc:	|         jsr be0e <turnMeAngle>
    bed2:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bed4:	|         movea.l 1ca1a <speech>,a0
    beda:	|         move.l (a0),d0
    bedc:	|         cmp.l (sp),d0
    bede:	|  /----- bne.s bee4 <turnPersonToFace+0x5c>
    bee0:	|  |      moveq #2,d0
    bee2:	|  |  /-- bra.s bee6 <turnPersonToFace+0x5e>
    bee4:	|  \--|-> moveq #0,d0
    bee6:	|     \-> move.l d0,-(sp)
    bee8:	|         move.l 4(sp),-(sp)
    beec:	|         jsr 8186 <setFrames>
    bef2:	|         addq.l #8,sp
        return TRUE;
    bef4:	|         moveq #1,d0
    bef6:	|     /-- bra.s befa <turnPersonToFace+0x72>
    }
    return FALSE;
    bef8:	\-----|-> clr.w d0
}
    befa:	      \-> addq.l #4,sp
    befc:	          rts

0000befe <walkAllPeople>:

void walkAllPeople() {
    befe:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bf00:	             move.l 1ca22 <allPeople>,(sp)

	while (thisPerson) {
    bf06:	   /-------- bra.s bf76 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bf08:	/--|-------> movea.l (sp),a0
    bf0a:	|  |         move.w 64(a0),d0
    bf0e:	|  |     /-- beq.s bf22 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bf10:	|  |     |   pea 1 <_start+0x1>
    bf14:	|  |     |   move.l 4(sp),-(sp)
    bf18:	|  |     |   jsr bf82 <walkMe>
    bf1e:	|  |     |   addq.l #8,sp
    bf20:	|  |  /--|-- bra.s bf42 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bf22:	|  |  |  \-> movea.l (sp),a0
    bf24:	|  |  |      move.w 66(a0),d0
    bf28:	|  |  +----- beq.s bf42 <walkAllPeople+0x44>
			spinStep(thisPerson);
    bf2a:	|  |  |      move.l (sp),-(sp)
    bf2c:	|  |  |      jsr bc9e <spinStep>
    bf32:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bf34:	|  |  |      clr.l -(sp)
    bf36:	|  |  |      move.l 4(sp),-(sp)
    bf3a:	|  |  |      jsr 8186 <setFrames>
    bf40:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bf42:	|  |  \----> movea.l (sp),a0
    bf44:	|  |         move.w 64(a0),d0
    bf48:	|  |     /-- bne.s bf70 <walkAllPeople+0x72>
    bf4a:	|  |     |   movea.l (sp),a0
    bf4c:	|  |     |   move.w 66(a0),d0
    bf50:	|  |     +-- bne.s bf70 <walkAllPeople+0x72>
    bf52:	|  |     |   movea.l (sp),a0
    bf54:	|  |     |   move.l 68(a0),d0
    bf58:	|  |     +-- beq.s bf70 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bf5a:	|  |     |   movea.l (sp),a0
    bf5c:	|  |     |   move.l 68(a0),d0
    bf60:	|  |     |   move.l d0,-(sp)
    bf62:	|  |     |   jsr 689e <restartFunction>
    bf68:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bf6a:	|  |     |   movea.l (sp),a0
    bf6c:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bf70:	|  |     \-> movea.l (sp),a0
    bf72:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bf76:	|  \-------> tst.l (sp)
    bf78:	\----------- bne.s bf08 <walkAllPeople+0xa>
	}
}
    bf7a:	             nop
    bf7c:	             nop
    bf7e:	             addq.l #4,sp
    bf80:	             rts

0000bf82 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf82:	                lea -20(sp),sp
    bf86:	                move.l d3,-(sp)
    bf88:	                move.l d2,-(sp)
    bf8a:	                move.l 36(sp),d0
    bf8e:	                move.w d0,d0
    bf90:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf94:	                cmpi.w #-1,10(sp)
    bf9a:	/-------------- bne.s bfa2 <walkMe+0x20>
    bf9c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bfa2:	>-------------> movea.l 32(sp),a0
    bfa6:	|               move.l 48(a0),d0
    bfaa:	|               move.l d0,-(sp)
    bfac:	|               jsr 1767a <__floatsisf>
    bfb2:	|               addq.l #4,sp
    bfb4:	|               move.l d0,d1
    bfb6:	|               movea.l 32(sp),a0
    bfba:	|               move.l (a0),d0
    bfbc:	|               move.l d0,-(sp)
    bfbe:	|               move.l d1,-(sp)
    bfc0:	|               jsr 1796e <__subsf3>
    bfc6:	|               addq.l #8,sp
    bfc8:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bfcc:	|               movea.l 32(sp),a0
    bfd0:	|               move.l 52(a0),d0
    bfd4:	|               move.l d0,-(sp)
    bfd6:	|               jsr 1767a <__floatsisf>
    bfdc:	|               addq.l #4,sp
    bfde:	|               move.l d0,d1
    bfe0:	|               movea.l 32(sp),a0
    bfe4:	|               move.l 4(a0),d0
    bfe8:	|               move.l d0,-(sp)
    bfea:	|               move.l d1,-(sp)
    bfec:	|               jsr 1796e <__subsf3>
    bff2:	|               addq.l #8,sp
    bff4:	|               move.l d0,-(sp)
    bff6:	|               move.l d0,-(sp)
    bff8:	|               jsr 17436 <__addsf3>
    bffe:	|               addq.l #8,sp
    c000:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c004:	|               movea.l 32(sp),a0
    c008:	|               move.l 32(a0),d2
    c00c:	|               movea.l 32(sp),a0
    c010:	|               move.l 28(a0),d0
    c014:	|               move.l d0,-(sp)
    c016:	|               jsr 1767a <__floatsisf>
    c01c:	|               addq.l #4,sp
    c01e:	|               move.l d0,-(sp)
    c020:	|               move.l d2,-(sp)
    c022:	|               jsr 1772c <__mulsf3>
    c028:	|               addq.l #8,sp
    c02a:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c02e:	|               move.l 24(sp),-(sp)
    c032:	|               jsr 1759c <__extendsfdf2>
    c038:	|               addq.l #4,sp
    c03a:	|               move.l #-1717986918,-(sp)
    c040:	|               move.l #1070176665,-(sp)
    c046:	|               move.l d1,-(sp)
    c048:	|               move.l d0,-(sp)
    c04a:	|               jsr 17852 <__ltdf2>
    c050:	|               lea 16(sp),sp
    c054:	|               tst.l d0
    c056:	|           /-- bge.s c060 <walkMe+0xde>
    c058:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c060:	|           \-> move.l 20(sp),-(sp)
    c064:	|               jsr 17612 <__fixsfsi>
    c06a:	|               addq.l #4,sp
    c06c:	|               move.l d0,-(sp)
    c06e:	|               jsr 922c <TF_abs>
    c074:	|               addq.l #4,sp
    c076:	|               move.l d0,d2
    c078:	|               move.l 16(sp),-(sp)
    c07c:	|               jsr 17612 <__fixsfsi>
    c082:	|               addq.l #4,sp
    c084:	|               move.l d0,-(sp)
    c086:	|               jsr 922c <TF_abs>
    c08c:	|               addq.l #4,sp
    c08e:	|               cmp.l d2,d0
    c090:	|        /----- bgt.s c0b4 <walkMe+0x132>
    c092:	|        |      move.l 20(sp),-(sp)
    c096:	|        |      jsr 17612 <__fixsfsi>
    c09c:	|        |      addq.l #4,sp
    c09e:	|        |      move.l d0,-(sp)
    c0a0:	|        |      jsr 922c <TF_abs>
    c0a6:	|        |      addq.l #4,sp
    c0a8:	|        |      move.l d0,-(sp)
    c0aa:	|        |      jsr 1767a <__floatsisf>
    c0b0:	|        |      addq.l #4,sp
    c0b2:	|        |  /-- bra.s c0d4 <walkMe+0x152>
    c0b4:	|        \--|-> move.l 16(sp),-(sp)
    c0b8:	|           |   jsr 17612 <__fixsfsi>
    c0be:	|           |   addq.l #4,sp
    c0c0:	|           |   move.l d0,-(sp)
    c0c2:	|           |   jsr 922c <TF_abs>
    c0c8:	|           |   addq.l #4,sp
    c0ca:	|           |   move.l d0,-(sp)
    c0cc:	|           |   jsr 1767a <__floatsisf>
    c0d2:	|           |   addq.l #4,sp
    c0d4:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c0d8:	|               move.l 12(sp),-(sp)
    c0dc:	|               jsr 17612 <__fixsfsi>
    c0e2:	|               addq.l #4,sp
    c0e4:	|               move.l d0,-(sp)
    c0e6:	|               jsr 922c <TF_abs>
    c0ec:	|               addq.l #4,sp
    c0ee:	|               move.l d0,-(sp)
    c0f0:	|               jsr 1767a <__floatsisf>
    c0f6:	|               addq.l #4,sp
    c0f8:	|               move.l d0,-(sp)
    c0fa:	|               move.l 28(sp),-(sp)
    c0fe:	|               jsr 178a0 <__ltsf2>
    c104:	|               addq.l #8,sp
    c106:	|               tst.l d0
    c108:	|        /----- bge.w c1ba <walkMe+0x238>
			if (thisPerson->spinning) {
    c10c:	|        |      movea.l 32(sp),a0
    c110:	|        |      move.w 66(a0),d0
    c114:	|        |  /-- beq.s c132 <walkMe+0x1b0>
				spinStep(thisPerson);
    c116:	|        |  |   move.l 32(sp),-(sp)
    c11a:	|        |  |   jsr bc9e <spinStep>
    c120:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c122:	|        |  |   pea 1 <_start+0x1>
    c126:	|        |  |   move.l 36(sp),-(sp)
    c12a:	|        |  |   jsr 8186 <setFrames>
    c130:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c132:	|        |  \-> move.l 24(sp),-(sp)
    c136:	|        |      move.l 16(sp),-(sp)
    c13a:	|        |      jsr 17530 <__divsf3>
    c140:	|        |      addq.l #8,sp
    c142:	|        |      move.l d0,24(sp)
			if (move)
    c146:	|        |      tst.w 10(sp)
    c14a:	|        |  /-- beq.s c1b4 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c14c:	|        |  |   movea.l 32(sp),a0
    c150:	|        |  |   move.l 4(a0),d2
    c154:	|        |  |   move.l 24(sp),d0
    c158:	|        |  |   move.l d0,-(sp)
    c15a:	|        |  |   move.l d0,-(sp)
    c15c:	|        |  |   jsr 17436 <__addsf3>
    c162:	|        |  |   addq.l #8,sp
    c164:	|        |  |   move.l d0,-(sp)
    c166:	|        |  |   move.l 20(sp),-(sp)
    c16a:	|        |  |   jsr 17530 <__divsf3>
    c170:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c172:	|        |  |   move.l d0,-(sp)
    c174:	|        |  |   move.l d2,-(sp)
    c176:	|        |  |   jsr 17436 <__addsf3>
    c17c:	|        |  |   addq.l #8,sp
    c17e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c180:	|        |  |   movea.l 32(sp),a0
    c184:	|        |  |   move.l (a0),d3
    c186:	|        |  |   move.l 24(sp),-(sp)
    c18a:	|        |  |   move.l 24(sp),-(sp)
    c18e:	|        |  |   jsr 17530 <__divsf3>
    c194:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c196:	|        |  |   move.l d0,-(sp)
    c198:	|        |  |   move.l d3,-(sp)
    c19a:	|        |  |   jsr 17436 <__addsf3>
    c1a0:	|        |  |   addq.l #8,sp
    c1a2:	|        |  |   move.l d2,-(sp)
    c1a4:	|        |  |   move.l d0,-(sp)
    c1a6:	|        |  |   move.l 40(sp),-(sp)
    c1aa:	|        |  |   jsr ad84 <moveAndScale>
    c1b0:	|        |  |   lea 12(sp),sp
			return TRUE;
    c1b4:	|        |  \-> moveq #1,d0
    c1b6:	|  /-----|----- bra.w c268 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c1ba:	|  |     \----> movea.l 32(sp),a0
    c1be:	|  |            move.l 56(a0),d0
    c1c2:	|  |            moveq #-1,d1
    c1c4:	|  |            cmp.l d0,d1
    c1c6:	|  |        /-- bne.s c1fe <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c1c8:	|  |        |   movea.l 32(sp),a0
    c1cc:	|  |        |   move.l 110(a0),d0
    c1d0:	|  |        |   moveq #-1,d1
    c1d2:	|  |        |   cmp.l d0,d1
    c1d4:	|  |  /-----|-- beq.s c212 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c1d6:	|  |  |     |   movea.l 32(sp),a0
    c1da:	|  |  |     |   move.l 110(a0),d0
    c1de:	|  |  |     |   movea.l 32(sp),a0
    c1e2:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c1e6:	|  |  |     |   movea.l 32(sp),a0
    c1ea:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c1f0:	|  |  |     |   move.l 32(sp),-(sp)
    c1f4:	|  |  |     |   jsr bc9e <spinStep>
    c1fa:	|  |  |     |   addq.l #4,sp
			}
			break;
    c1fc:	|  |  +-----|-- bra.s c212 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c1fe:	|  |  |     \-> move.l 32(sp),-(sp)
    c202:	|  |  |         jsr 999e <doBorderStuff>
    c208:	|  |  |         addq.l #4,sp
    c20a:	|  |  |         tst.w d0
    c20c:	|  |  |  /----- beq.s c216 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c20e:	\--|--|--|----- bra.w bfa2 <walkMe+0x20>
			break;
    c212:	   |  \--|----> nop
    c214:	   |     |  /-- bra.s c218 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c216:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c218:	   |        \-> movea.l 32(sp),a0
    c21c:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c220:	   |            clr.l -(sp)
    c222:	   |            move.l 36(sp),-(sp)
    c226:	   |            jsr 8186 <setFrames>
    c22c:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c22e:	   |            movea.l 32(sp),a0
    c232:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c236:	   |            move.l d0,-(sp)
    c238:	   |            jsr 1767a <__floatsisf>
    c23e:	   |            addq.l #4,sp
    c240:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c242:	   |            movea.l 32(sp),a0
    c246:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c24a:	   |            move.l d0,-(sp)
    c24c:	   |            jsr 1767a <__floatsisf>
    c252:	   |            addq.l #4,sp
    c254:	   |            move.l d2,-(sp)
    c256:	   |            move.l d0,-(sp)
    c258:	   |            move.l 40(sp),-(sp)
    c25c:	   |            jsr ad84 <moveAndScale>
    c262:	   |            lea 12(sp),sp
	return FALSE;
    c266:	   |            clr.w d0
}
    c268:	   \----------> move.l (sp)+,d2
    c26a:	                move.l (sp)+,d3
    c26c:	                lea 20(sp),sp
    c270:	                rts

0000c272 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c272:	       subq.l #8,sp
    c274:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c276:	   /-- bra.s c2a6 <clearStackLib+0x34>
		k = stackLib;
    c278:	/--|-> move.l 1ca4e <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c280:	|  |   movea.l 1ca4e <stackLib>,a0
    c286:	|  |   move.l 4(a0),d0
    c28a:	|  |   move.l d0,1ca4e <stackLib>
		FreeVec(k);
    c290:	|  |   move.l 8(sp),4(sp)
    c296:	|  |   move.l 1c9be <SysBase>,d0
    c29c:	|  |   movea.l d0,a6
    c29e:	|  |   movea.l 4(sp),a1
    c2a2:	|  |   jsr -690(a6)
	while (stackLib) {
    c2a6:	|  \-> move.l 1ca4e <stackLib>,d0
    c2ac:	\----- bne.s c278 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c2ae:	       clr.l 1ca4a <stackLibTotal>
}
    c2b4:	       nop
    c2b6:	       movea.l (sp)+,a6
    c2b8:	       addq.l #8,sp
    c2ba:	       rts

0000c2bc <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c2bc:	          lea -128(sp),sp
    c2c0:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c2c4:	      /-- bra.s c2d6 <loadGame+0x1a>
    c2c6:	   /--|-> move.l 1c956 <allRunningFunctions>,d0
    c2cc:	   |  |   move.l d0,-(sp)
    c2ce:	   |  |   jsr 5736 <finishFunction>
    c2d4:	   |  |   addq.l #4,sp
    c2d6:	   |  \-> move.l 1c956 <allRunningFunctions>,d0
    c2dc:	   \----- bne.s c2c6 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c2de:	          pea 1ca52 <ssgVersion>
    c2e4:	          pea 19249 <PutChar+0x1537>
    c2ea:	          pea 41 <_start+0x41>
    c2ee:	          pea 53 <_start+0x53>
    c2f2:	          move.l 160(sp),-(sp)
    c2f6:	          jsr 64ec <openAndVerify>
    c2fc:	          lea 20(sp),sp
    c300:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c304:	      /-- bne.s c30c <loadGame+0x50>
    c306:	      |   clr.w d0
    c308:	/-----|-- bra.w c5b2 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c30c:	|     \-> move.l 112(sp),108(sp)
    c312:	|         lea 140(sp),a0
    c316:	|         lea -126(a0),a0
    c31a:	|         move.l a0,120(sp)
    c31e:	|         moveq #8,d0
    c320:	|         move.l d0,116(sp)
    c324:	|         move.l 1c9c6 <DOSBase>,d0
    c32a:	|         movea.l d0,a6
    c32c:	|         move.l 108(sp),d1
    c330:	|         move.l 120(sp),d2
    c334:	|         move.l 116(sp),d3
    c338:	|         jsr -42(a6)
    c33c:	|         move.l d0,132(sp)
    c340:	|         move.l 132(sp),d0
    c344:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c348:	|         moveq #8,d0
    c34a:	|         cmp.l 128(sp),d0
    c34e:	|     /-- beq.s c35e <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c350:	|     |   pea 1926a <PutChar+0x1558>
    c356:	|     |   jsr 17248 <KPrintF>
    c35c:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c35e:	|     \-> move.l 14(sp),d1
    c362:	|         move.l 1c960 <fileTime>,d0
    c368:	|         cmp.l d1,d0
    c36a:	|     /-- bne.s c37a <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c36c:	|     |   move.l 18(sp),d1
    c370:	|     |   move.l 1c964 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c376:	|     |   cmp.l d1,d0
    c378:	|  /--|-- beq.s c39a <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c37a:	|  |  \-> move.l 144(sp),-(sp)
    c37e:	|  |      pea 19286 <PutChar+0x1574>
    c384:	|  |      pea 1934d <PutChar+0x163b>
    c38a:	|  |      jsr 17248 <KPrintF>
    c390:	|  |      lea 12(sp),sp
		return FALSE; 
    c394:	|  |      clr.w d0
    c396:	+--|----- bra.w c5b2 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c39a:	|  \----> move.l 112(sp),124(sp)
    c3a0:	|         move.l 1c9c6 <DOSBase>,d0
    c3a6:	|         movea.l d0,a6
    c3a8:	|         move.l 124(sp),d1
    c3ac:	|         jsr -306(a6)
    c3b0:	|         move.l d0,136(sp)
    c3b4:	|         move.l 136(sp),d0
    c3b8:	|         move.l d0,d0
    c3ba:	|         move.w d0,1c21a <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c3c0:	|         move.l 112(sp),100(sp)
    c3c6:	|         move.l 1c9c6 <DOSBase>,d0
    c3cc:	|         movea.l d0,a6
    c3ce:	|         move.l 100(sp),d1
    c3d2:	|         jsr -306(a6)
    c3d6:	|         move.l d0,96(sp)
    c3da:	|         move.l 96(sp),d0
    c3de:	|         move.l d0,d0
    c3e0:	|         move.w d0,1c95e <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c3e6:	|         move.l 112(sp),92(sp)
    c3ec:	|         move.l 1c9c6 <DOSBase>,d0
    c3f2:	|         movea.l d0,a6
    c3f4:	|         move.l 92(sp),d1
    c3f8:	|         jsr -306(a6)
    c3fc:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c400:	|         move.l 112(sp),84(sp)
    c406:	|         move.l 1c9c6 <DOSBase>,d0
    c40c:	|         movea.l d0,a6
    c40e:	|         move.l 84(sp),d1
    c412:	|         jsr -306(a6)
    c416:	|         move.l d0,80(sp)
    c41a:	|         move.l 80(sp),d0
    c41e:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c422:	|     /-- beq.s c456 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c424:	|     |   move.l 112(sp),-(sp)
    c428:	|     |   jsr 6bc <get2bytes>
    c42e:	|     |   addq.l #4,sp
    c430:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c434:	|     |   move.l 112(sp),-(sp)
    c438:	|     |   jsr 6bc <get2bytes>
    c43e:	|     |   addq.l #4,sp
    c440:	|     |   move.l d0,1cab6 <fontHeight>
		charOrder = readString(fp);		
    c446:	|     |   move.l 112(sp),-(sp)
    c44a:	|     |   jsr b02 <readString>
    c450:	|     |   addq.l #4,sp
    c452:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c456:	|     \-> move.l 104(sp),70(sp)
    c45c:	|         move.l 1c9be <SysBase>,d0
    c462:	|         movea.l d0,a6
    c464:	|         movea.l 70(sp),a1
    c468:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c46c:	|         move.l 112(sp),-(sp)
    c470:	|         jsr 854 <getSigned>
    c476:	|         addq.l #4,sp
    c478:	|         move.w d0,1c8c2 <fontSpace>

	killAllPeople ();
    c47e:	|         jsr aa26 <killAllPeople>
	killAllRegions ();
    c484:	|         jsr 15a58 <killAllRegions>

	int camerX = get2bytes (fp);
    c48a:	|         move.l 112(sp),-(sp)
    c48e:	|         jsr 6bc <get2bytes>
    c494:	|         addq.l #4,sp
    c496:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c49a:	|         move.l 112(sp),-(sp)
    c49e:	|         jsr 6bc <get2bytes>
    c4a4:	|         addq.l #4,sp
    c4a6:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c4aa:	|         move.l 112(sp),-(sp)
    c4ae:	|         jsr 7d8 <getFloat>
    c4b4:	|         addq.l #4,sp
    c4b6:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c4ba:	|         move.l 112(sp),54(sp)
    c4c0:	|         move.l 1c9c6 <DOSBase>,d0
    c4c6:	|         movea.l d0,a6
    c4c8:	|         move.l 54(sp),d1
    c4cc:	|         jsr -306(a6)
    c4d0:	|         move.l d0,50(sp)
    c4d4:	|         move.l 50(sp),d0
    c4d8:	|         move.l d0,d0
    c4da:	|         move.b d0,1c334 <brightnessLevel>

	loadHandlers (fp);
    c4e0:	|         move.l 112(sp),-(sp)
    c4e4:	|         jsr 644c <loadHandlers>
    c4ea:	|         addq.l #4,sp
	loadRegions (fp);
    c4ec:	|         move.l 112(sp),-(sp)
    c4f0:	|         jsr 15ab4 <loadRegions>
    c4f6:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c4f8:	|         moveq #12,d0
    c4fa:	|         move.l d0,46(sp)
    c4fe:	|         clr.l 42(sp)
    c502:	|         move.l 1c9be <SysBase>,d0
    c508:	|         movea.l d0,a6
    c50a:	|         move.l 46(sp),d0
    c50e:	|         move.l 42(sp),d1
    c512:	|         jsr -684(a6)
    c516:	|         move.l d0,38(sp)
    c51a:	|         move.l 38(sp),d0
    c51e:	|         move.l d0,1c8c4 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c524:	|         move.l 1c8c4 <mouseCursorAnim>,d0
    c52a:	|     /-- bne.s c53e <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c52c:	|     |   pea 19357 <PutChar+0x1645>
    c532:	|     |   jsr 17248 <KPrintF>
    c538:	|     |   addq.l #4,sp
		return FALSE;
    c53a:	|     |   clr.w d0
    c53c:	+-----|-- bra.s c5b2 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c53e:	|     \-> jsr d3cc <nosnapshot>
	if (FGetC (fp)) {
    c544:	|         move.l 112(sp),34(sp)
    c54a:	|         move.l 1c9c6 <DOSBase>,d0
    c550:	|         movea.l d0,a6
    c552:	|         move.l 34(sp),d1
    c556:	|         jsr -306(a6)
    c55a:	|         move.l d0,30(sp)
    c55e:	|         move.l 30(sp),d0
    c562:	|     /-- beq.s c578 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c564:	|     |   move.l 112(sp),-(sp)
    c568:	|     |   jsr d44c <restoreSnapshot>
    c56e:	|     |   addq.l #4,sp
    c570:	|     |   tst.w d0
    c572:	|     +-- bne.s c578 <loadGame+0x2bc>
    c574:	|     |   clr.w d0
    c576:	+-----|-- bra.s c5b2 <loadGame+0x2f6>
	}

	Close (fp);
    c578:	|     \-> move.l 112(sp),26(sp)
    c57e:	|         move.l 1c9c6 <DOSBase>,d0
    c584:	|         movea.l d0,a6
    c586:	|         move.l 26(sp),d1
    c58a:	|         jsr -36(a6)
    c58e:	|         move.l d0,22(sp)
	clearStackLib ();
    c592:	|         jsr c272 <clearStackLib>

	cameraX = camerX;
    c598:	|         move.l 66(sp),1ca78 <cameraX>
	cameraY = camerY;
    c5a0:	|         move.l 62(sp),1ca7c <cameraY>
	cameraZoom = camerZ;
    c5a8:	|         move.l 58(sp),1c35c <cameraZoom>

	return TRUE;
    c5b0:	|         moveq #1,d0
}
    c5b2:	\-------> movem.l (sp)+,d2-d3/a6
    c5b6:	          lea 128(sp),sp
    c5ba:	          rts

0000c5bc <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c5bc:	   /-> lea -64(sp),sp
    c5c0:	   |   move.l a6,-(sp)
    c5c2:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c5c4:	   |   movea.l 76(sp),a0
    c5c8:	   |   move.l (a0),d0
    c5ca:	   |   move.l 80(sp),-(sp)
    c5ce:	   |   move.l d0,-(sp)
    c5d0:	   |   jsr 8d0 <put2bytes>
    c5d6:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c5d8:	   |   movea.l 76(sp),a0
    c5dc:	   |   move.l 40(a0),d0
    c5e0:	/--|-- beq.s c61c <saveFunction+0x60>
		FPutC (fp, 1);
    c5e2:	|  |   move.l 80(sp),52(sp)
    c5e8:	|  |   moveq #1,d0
    c5ea:	|  |   move.l d0,48(sp)
    c5ee:	|  |   move.l 1c9c6 <DOSBase>,d0
    c5f4:	|  |   movea.l d0,a6
    c5f6:	|  |   move.l 52(sp),d1
    c5fa:	|  |   move.l 48(sp),d2
    c5fe:	|  |   jsr -312(a6)
    c602:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c606:	|  |   movea.l 76(sp),a0
    c60a:	|  |   move.l 40(a0),d0
    c60e:	|  |   move.l 80(sp),-(sp)
    c612:	|  |   move.l d0,-(sp)
    c614:	|  \-- jsr c5bc <saveFunction>(pc)
    c618:	|      addq.l #8,sp
    c61a:	|  /-- bra.s c63e <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c61c:	\--|-> move.l 80(sp),64(sp)
    c622:	   |   clr.l 60(sp)
    c626:	   |   move.l 1c9c6 <DOSBase>,d0
    c62c:	   |   movea.l d0,a6
    c62e:	   |   move.l 64(sp),d1
    c632:	   |   move.l 60(sp),d2
    c636:	   |   jsr -312(a6)
    c63a:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c63e:	   \-> movea.l 76(sp),a0
    c642:	       move.l 12(a0),d0
    c646:	       move.l 80(sp),-(sp)
    c64a:	       move.l d0,-(sp)
    c64c:	       jsr 958 <put4bytes>
    c652:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c654:	       movea.l 76(sp),a0
    c658:	       move.l 36(a0),d0
    c65c:	       move.l 80(sp),-(sp)
    c660:	       move.l d0,-(sp)
    c662:	       jsr 8d0 <put2bytes>
    c668:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c66a:	       move.l 80(sp),40(sp)
    c670:	       movea.l 76(sp),a0
    c674:	       move.w 54(a0),d0
    c678:	       movea.w d0,a0
    c67a:	       move.l a0,36(sp)
    c67e:	       move.l 1c9c6 <DOSBase>,d0
    c684:	       movea.l d0,a6
    c686:	       move.l 40(sp),d1
    c68a:	       move.l 36(sp),d2
    c68e:	       jsr -312(a6)
    c692:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c696:	       move.l 80(sp),28(sp)
    c69c:	       movea.l 76(sp),a0
    c6a0:	       move.w 48(a0),d0
    c6a4:	       movea.w d0,a0
    c6a6:	       move.l a0,24(sp)
    c6aa:	       move.l 1c9c6 <DOSBase>,d0
    c6b0:	       movea.l d0,a6
    c6b2:	       move.l 28(sp),d1
    c6b6:	       move.l 24(sp),d2
    c6ba:	       jsr -312(a6)
    c6be:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c6c2:	       move.l 80(sp),16(sp)
    c6c8:	       movea.l 76(sp),a0
    c6cc:	       move.w 50(a0),d0
    c6d0:	       movea.w d0,a0
    c6d2:	       move.l a0,12(sp)
    c6d6:	       move.l 1c9c6 <DOSBase>,d0
    c6dc:	       movea.l d0,a6
    c6de:	       move.l 16(sp),d1
    c6e2:	       move.l 12(sp),d2
    c6e6:	       jsr -312(a6)
    c6ea:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c6ee:	       moveq #28,d0
    c6f0:	       add.l 76(sp),d0
    c6f4:	       move.l 80(sp),-(sp)
    c6f8:	       move.l d0,-(sp)
    c6fa:	       jsr ce14 <saveVariable>
    c700:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c702:	       movea.l 76(sp),a0
    c706:	       move.b 56(a0),d0
    c70a:	   /-- beq.s c71a <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c70c:	   |   pea 19378 <PutChar+0x1666>
    c712:	   |   jsr 17248 <KPrintF>
    c718:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c71a:	   \-> movea.l 76(sp),a0
    c71e:	       move.l 24(a0),d0
    c722:	       move.l 80(sp),-(sp)
    c726:	       move.l d0,-(sp)
    c728:	       jsr cc88 <saveStack>
    c72e:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c730:	       clr.l 68(sp)
    c734:	   /-- bra.s c758 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c736:	/--|-> movea.l 76(sp),a0
    c73a:	|  |   move.l 20(a0),d1
    c73e:	|  |   move.l 68(sp),d0
    c742:	|  |   lsl.l #3,d0
    c744:	|  |   add.l d1,d0
    c746:	|  |   move.l 80(sp),-(sp)
    c74a:	|  |   move.l d0,-(sp)
    c74c:	|  |   jsr ce14 <saveVariable>
    c752:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c754:	|  |   addq.l #1,68(sp)
    c758:	|  \-> movea.l 76(sp),a0
    c75c:	|      move.l 8(a0),d0
    c760:	|      cmp.l 68(sp),d0
    c764:	\----- bgt.s c736 <saveFunction+0x17a>
	}
}
    c766:	       nop
    c768:	       nop
    c76a:	       move.l (sp)+,d2
    c76c:	       movea.l (sp)+,a6
    c76e:	       lea 64(sp),sp
    c772:	       rts

0000c774 <saveGame>:

BOOL saveGame (char * fname) {
    c774:	          lea -248(sp),sp
    c778:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c77c:	          move.l 264(sp),244(sp)
    c782:	          move.l #1006,240(sp)
    c78a:	          move.l 1c9c6 <DOSBase>,d0
    c790:	          movea.l d0,a6
    c792:	          move.l 244(sp),d1
    c796:	          move.l 240(sp),d2
    c79a:	          jsr -30(a6)
    c79e:	          move.l d0,236(sp)
    c7a2:	          move.l 236(sp),d0
    c7a6:	          move.l d0,232(sp)
	if (fp == NULL) {
    c7aa:	      /-- bne.s c7c0 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c7ac:	      |   pea 1939a <PutChar+0x1688>
    c7b2:	      |   jsr 17248 <KPrintF>
    c7b8:	      |   addq.l #4,sp
		return FALSE;
    c7ba:	      |   clr.w d0
    c7bc:	/-----|-- bra.w cc7e <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c7c0:	|     \-> move.l 232(sp),228(sp)
    c7c6:	|         move.l #103351,224(sp)
    c7ce:	|         moveq #6,d0
    c7d0:	|         move.l d0,220(sp)
    c7d4:	|         move.l 1c9c6 <DOSBase>,d0
    c7da:	|         movea.l d0,a6
    c7dc:	|         move.l 228(sp),d1
    c7e0:	|         move.l 224(sp),d2
    c7e4:	|         move.l 220(sp),d3
    c7e8:	|         jsr -48(a6)
    c7ec:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c7f0:	|         move.l 232(sp),212(sp)
    c7f6:	|         clr.l 208(sp)
    c7fa:	|         move.l 1c9c6 <DOSBase>,d0
    c800:	|         movea.l d0,a6
    c802:	|         move.l 212(sp),d1
    c806:	|         move.l 208(sp),d2
    c80a:	|         jsr -312(a6)
    c80e:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c812:	|         move.l 232(sp),200(sp)
    c818:	|         clr.l 196(sp)
    c81c:	|         move.l 1c9c6 <DOSBase>,d0
    c822:	|         movea.l d0,a6
    c824:	|         move.l 200(sp),d1
    c828:	|         move.l 196(sp),d2
    c82c:	|         jsr -312(a6)
    c830:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c834:	|         move.l 232(sp),188(sp)
    c83a:	|         moveq #2,d0
    c83c:	|         move.l d0,184(sp)
    c840:	|         move.l 1c9c6 <DOSBase>,d0
    c846:	|         movea.l d0,a6
    c848:	|         move.l 188(sp),d1
    c84c:	|         move.l 184(sp),d2
    c850:	|         jsr -312(a6)
    c854:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c858:	|         move.l 232(sp),176(sp)
    c85e:	|         moveq #2,d0
    c860:	|         move.l d0,172(sp)
    c864:	|         move.l 1c9c6 <DOSBase>,d0
    c86a:	|         movea.l d0,a6
    c86c:	|         move.l 176(sp),d1
    c870:	|         move.l 172(sp),d2
    c874:	|         jsr -312(a6)
    c878:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c87c:	|         move.l 232(sp),164(sp)
    c882:	|         move.l #117088,160(sp)
    c88a:	|         moveq #8,d0
    c88c:	|         move.l d0,156(sp)
    c890:	|         move.l 1c9c6 <DOSBase>,d0
    c896:	|         movea.l d0,a6
    c898:	|         move.l 164(sp),d1
    c89c:	|         move.l 160(sp),d2
    c8a0:	|         move.l 156(sp),d3
    c8a4:	|         jsr -48(a6)
    c8a8:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c8ac:	|         move.l 232(sp),148(sp)
    c8b2:	|         move.w 1c21a <allowAnyFilename>,d0
    c8b8:	|         movea.w d0,a0
    c8ba:	|         move.l a0,144(sp)
    c8be:	|         move.l 1c9c6 <DOSBase>,d0
    c8c4:	|         movea.l d0,a6
    c8c6:	|         move.l 148(sp),d1
    c8ca:	|         move.l 144(sp),d2
    c8ce:	|         jsr -312(a6)
    c8d2:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c8d6:	|         move.l 232(sp),136(sp)
    c8dc:	|         move.w 1c95e <captureAllKeys>,d0
    c8e2:	|         movea.w d0,a0
    c8e4:	|         move.l a0,132(sp)
    c8e8:	|         move.l 1c9c6 <DOSBase>,d0
    c8ee:	|         movea.l d0,a6
    c8f0:	|         move.l 136(sp),d1
    c8f4:	|         move.l 132(sp),d2
    c8f8:	|         jsr -312(a6)
    c8fc:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c900:	|         move.l 232(sp),124(sp)
    c906:	|         moveq #1,d0
    c908:	|         move.l d0,120(sp)
    c90c:	|         move.l 1c9c6 <DOSBase>,d0
    c912:	|         movea.l d0,a6
    c914:	|         move.l 124(sp),d1
    c918:	|         move.l 120(sp),d2
    c91c:	|         jsr -312(a6)
    c920:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c924:	|         move.l 232(sp),112(sp)
    c92a:	|         move.l 1cac6 <fontTableSize>,d0
    c930:	|         sgt d0
    c932:	|         neg.b d0
    c934:	|         move.b d0,d0
    c936:	|         andi.l #255,d0
    c93c:	|         move.l d0,108(sp)
    c940:	|         move.l 1c9c6 <DOSBase>,d0
    c946:	|         movea.l d0,a6
    c948:	|         move.l 112(sp),d1
    c94c:	|         move.l 108(sp),d2
    c950:	|         jsr -312(a6)
    c954:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c958:	|         move.l 1cac6 <fontTableSize>,d0
    c95e:	|     /-- ble.s c99c <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c960:	|     |   move.l 1caba <loadedFontNum>,d0
    c966:	|     |   move.l 232(sp),-(sp)
    c96a:	|     |   move.l d0,-(sp)
    c96c:	|     |   jsr 8d0 <put2bytes>
    c972:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c974:	|     |   move.l 1cab6 <fontHeight>,d0
    c97a:	|     |   move.l 232(sp),-(sp)
    c97e:	|     |   move.l d0,-(sp)
    c980:	|     |   jsr 8d0 <put2bytes>
    c986:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c988:	|     |   move.l 1cabe <fontOrderString>,d0
    c98e:	|     |   move.l 232(sp),-(sp)
    c992:	|     |   move.l d0,-(sp)
    c994:	|     |   jsr bd8 <writeString>
    c99a:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c99c:	|     \-> move.w 1c8c2 <fontSpace>,d0
    c9a2:	|         movea.w d0,a0
    c9a4:	|         move.l 232(sp),-(sp)
    c9a8:	|         move.l a0,-(sp)
    c9aa:	|         jsr a9c <putSigned>
    c9b0:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c9b2:	|         move.l 1ca78 <cameraX>,d0
    c9b8:	|         move.l 232(sp),-(sp)
    c9bc:	|         move.l d0,-(sp)
    c9be:	|         jsr 8d0 <put2bytes>
    c9c4:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c9c6:	|         move.l 1ca7c <cameraY>,d0
    c9cc:	|         move.l 232(sp),-(sp)
    c9d0:	|         move.l d0,-(sp)
    c9d2:	|         jsr 8d0 <put2bytes>
    c9d8:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c9da:	|         move.l 1c35c <cameraZoom>,d0
    c9e0:	|         move.l 232(sp),-(sp)
    c9e4:	|         move.l d0,-(sp)
    c9e6:	|         jsr a46 <putFloat>
    c9ec:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c9ee:	|         move.l 232(sp),100(sp)
    c9f4:	|         move.b 1c334 <brightnessLevel>,d0
    c9fa:	|         move.b d0,d0
    c9fc:	|         andi.l #255,d0
    ca02:	|         move.l d0,96(sp)
    ca06:	|         move.l 1c9c6 <DOSBase>,d0
    ca0c:	|         movea.l d0,a6
    ca0e:	|         move.l 100(sp),d1
    ca12:	|         move.l 96(sp),d2
    ca16:	|         jsr -312(a6)
    ca1a:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    ca1e:	|         move.l 232(sp),-(sp)
    ca22:	|         jsr 69d0 <saveHandlers>
    ca28:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    ca2a:	|         move.l 232(sp),-(sp)
    ca2e:	|         jsr 15c6e <saveRegions>
    ca34:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ca36:	|         move.l 1c8c4 <mouseCursorAnim>,d0
    ca3c:	|         move.l 232(sp),-(sp)
    ca40:	|         move.l d0,-(sp)
    ca42:	|         jsr af98 <saveAnim>
    ca48:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    ca4a:	|         move.l 1c8c8 <mouseCursorFrameNum>,d0
    ca50:	|         move.l 232(sp),-(sp)
    ca54:	|         move.l d0,-(sp)
    ca56:	|         jsr 8d0 <put2bytes>
    ca5c:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ca5e:	|         move.l 1c956 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ca66:	|         clr.l 248(sp)
	while (thisFunction) {
    ca6a:	|     /-- bra.s ca7a <saveGame+0x306>
		countFunctions ++;
    ca6c:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca70:	|  |  |   movea.l 252(sp),a0
    ca74:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca7a:	|  |  \-> tst.l 252(sp)
    ca7e:	|  \----- bne.s ca6c <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca80:	|         move.l 232(sp),-(sp)
    ca84:	|         move.l 252(sp),-(sp)
    ca88:	|         jsr 8d0 <put2bytes>
    ca8e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca90:	|         move.l 1c956 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca98:	|     /-- bra.s cab4 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca9a:	|  /--|-> move.l 232(sp),-(sp)
    ca9e:	|  |  |   move.l 256(sp),-(sp)
    caa2:	|  |  |   jsr c5bc <saveFunction>
    caa8:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    caaa:	|  |  |   movea.l 252(sp),a0
    caae:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cab4:	|  |  \-> tst.l 252(sp)
    cab8:	|  \----- bne.s ca9a <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    caba:	|         clr.l 256(sp)
    cabe:	|     /-- bra.s cae0 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cac0:	|  /--|-> move.l 1c96c <globalVars>,d1
    cac6:	|  |  |   move.l 256(sp),d0
    caca:	|  |  |   lsl.l #3,d0
    cacc:	|  |  |   add.l d1,d0
    cace:	|  |  |   move.l 232(sp),-(sp)
    cad2:	|  |  |   move.l d0,-(sp)
    cad4:	|  |  |   jsr ce14 <saveVariable>
    cada:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cadc:	|  |  |   addq.l #1,256(sp)
    cae0:	|  |  \-> move.l 1c996 <numGlobals>,d0
    cae6:	|  |      cmp.l 256(sp),d0
    caea:	|  \----- bgt.s cac0 <saveGame+0x34c>
	}

	savePeople (fp);
    caec:	|         move.l 232(sp),-(sp)
    caf0:	|         jsr b0c0 <savePeople>
    caf6:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    caf8:	|         movea.l 1cada <currentFloor>,a0
    cafe:	|         move.l 8(a0),d0
    cb02:	|  /----- beq.s cb40 <saveGame+0x3cc>
		FPutC (fp, 1);
    cb04:	|  |      move.l 232(sp),76(sp)
    cb0a:	|  |      moveq #1,d0
    cb0c:	|  |      move.l d0,72(sp)
    cb10:	|  |      move.l 1c9c6 <DOSBase>,d0
    cb16:	|  |      movea.l d0,a6
    cb18:	|  |      move.l 76(sp),d1
    cb1c:	|  |      move.l 72(sp),d2
    cb20:	|  |      jsr -312(a6)
    cb24:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cb28:	|  |      movea.l 1cada <currentFloor>,a0
    cb2e:	|  |      move.l (a0),d0
    cb30:	|  |      move.l 232(sp),-(sp)
    cb34:	|  |      move.l d0,-(sp)
    cb36:	|  |      jsr 8d0 <put2bytes>
    cb3c:	|  |      addq.l #8,sp
    cb3e:	|  |  /-- bra.s cb62 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cb40:	|  \--|-> move.l 232(sp),88(sp)
    cb46:	|     |   clr.l 84(sp)
    cb4a:	|     |   move.l 1c9c6 <DOSBase>,d0
    cb50:	|     |   movea.l d0,a6
    cb52:	|     |   move.l 88(sp),d1
    cb56:	|     |   move.l 84(sp),d2
    cb5a:	|     |   jsr -312(a6)
    cb5e:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cb62:	|     \-> move.l 232(sp),64(sp)
    cb68:	|         move.l 1ca8c <speechMode>,60(sp)
    cb70:	|         move.l 1c9c6 <DOSBase>,d0
    cb76:	|         movea.l d0,a6
    cb78:	|         move.l 64(sp),d1
    cb7c:	|         move.l 60(sp),d2
    cb80:	|         jsr -312(a6)
    cb84:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb88:	|         move.b 1c898 <fadeMode>,d0
    cb8e:	|         move.b d0,d0
    cb90:	|         andi.l #255,d0
    cb96:	|         move.l d0,52(sp)
    cb9a:	|         move.l 232(sp),48(sp)
    cba0:	|         move.l 1c9c6 <DOSBase>,d0
    cba6:	|         movea.l d0,a6
    cba8:	|         move.l 52(sp),d1
    cbac:	|         move.l 48(sp),d2
    cbb0:	|         jsr -312(a6)
    cbb4:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cbb8:	|         move.l 1ca1a <speech>,d0
    cbbe:	|         move.l 232(sp),-(sp)
    cbc2:	|         move.l d0,-(sp)
    cbc4:	|         jsr 803a <saveSpeech>
    cbca:	|         addq.l #8,sp
	saveStatusBars (fp);
    cbcc:	|         move.l 232(sp),-(sp)
    cbd0:	|         jsr 7a36 <saveStatusBars>
    cbd6:	|         addq.l #4,sp
	saveSounds (fp);
    cbd8:	|         move.l 232(sp),-(sp)
    cbdc:	|         jsr d17a <saveSounds>
    cbe2:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cbe4:	|         move.w 1ca76 <saveEncoding>,d0
    cbea:	|         move.w d0,d0
    cbec:	|         andi.l #65535,d0
    cbf2:	|         move.l 232(sp),-(sp)
    cbf6:	|         move.l d0,-(sp)
    cbf8:	|         jsr 8d0 <put2bytes>
    cbfe:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cc00:	|         move.l 1ca68 <parallaxStuff>,d0
    cc06:	|         move.l 232(sp),-(sp)
    cc0a:	|         move.l d0,-(sp)
    cc0c:	|         jsr d472 <saveParallaxRecursive>
    cc12:	|         addq.l #8,sp
	FPutC (fp, 0);
    cc14:	|         move.l 232(sp),40(sp)
    cc1a:	|         clr.l 36(sp)
    cc1e:	|         move.l 1c9c6 <DOSBase>,d0
    cc24:	|         movea.l d0,a6
    cc26:	|         move.l 40(sp),d1
    cc2a:	|         move.l 36(sp),d2
    cc2e:	|         jsr -312(a6)
    cc32:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cc36:	|         move.l 232(sp),28(sp)
    cc3c:	|         move.l 1c33a <languageNum>,24(sp)
    cc44:	|         move.l 1c9c6 <DOSBase>,d0
    cc4a:	|         movea.l d0,a6
    cc4c:	|         move.l 28(sp),d1
    cc50:	|         move.l 24(sp),d2
    cc54:	|         jsr -312(a6)
    cc58:	|         move.l d0,20(sp)

	Close(fp);
    cc5c:	|         move.l 232(sp),16(sp)
    cc62:	|         move.l 1c9c6 <DOSBase>,d0
    cc68:	|         movea.l d0,a6
    cc6a:	|         move.l 16(sp),d1
    cc6e:	|         jsr -36(a6)
    cc72:	|         move.l d0,12(sp)
	clearStackLib ();
    cc76:	|         jsr c272 <clearStackLib>
	return TRUE;
    cc7c:	|         moveq #1,d0
}
    cc7e:	\-------> movem.l (sp)+,d2-d3/a6
    cc82:	          lea 248(sp),sp
    cc86:	          rts

0000cc88 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc88:	       lea -12(sp),sp
	int elements = 0;
    cc8c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc90:	       move.l 16(sp),(sp)
	while (search) {
    cc94:	   /-- bra.s cca0 <saveStack+0x18>
		elements ++;
    cc96:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cc9a:	|  |   movea.l (sp),a0
    cc9c:	|  |   move.l 8(a0),(sp)
	while (search) {
    cca0:	|  \-> tst.l (sp)
    cca2:	\----- bne.s cc96 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cca4:	       move.l 20(sp),-(sp)
    cca8:	       move.l 12(sp),-(sp)
    ccac:	       jsr 8d0 <put2bytes>
    ccb2:	       addq.l #8,sp
	search = vs;
    ccb4:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    ccb8:	       clr.l 4(sp)
    ccbc:	   /-- bra.s ccd8 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    ccbe:	/--|-> move.l (sp),d0
    ccc0:	|  |   move.l 20(sp),-(sp)
    ccc4:	|  |   move.l d0,-(sp)
    ccc6:	|  |   jsr ce14 <saveVariable>
    cccc:	|  |   addq.l #8,sp
		search = search -> next;
    ccce:	|  |   movea.l (sp),a0
    ccd0:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ccd4:	|  |   addq.l #1,4(sp)
    ccd8:	|  \-> move.l 4(sp),d0
    ccdc:	|      cmp.l 8(sp),d0
    cce0:	\----- blt.s ccbe <saveStack+0x36>
	}
}
    cce2:	       nop
    cce4:	       nop
    cce6:	       lea 12(sp),sp
    ccea:	       rts

0000ccec <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ccec:	             lea -44(sp),sp
    ccf0:	             move.l a6,-(sp)
    ccf2:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ccf4:	             move.l 1ca4e <stackLib>,48(sp)
	int a = 0;
    ccfc:	             clr.l 44(sp)
	while (s) {
    cd00:	      /----- bra.s cd5e <saveStackRef+0x72>
		if (s -> stack == vs) {
    cd02:	   /--|----> movea.l 48(sp),a0
    cd06:	   |  |      move.l (a0),d0
    cd08:	   |  |      cmp.l 56(sp),d0
    cd0c:	   |  |  /-- bne.s cd50 <saveStackRef+0x64>
			FPutC (fp, 1);
    cd0e:	   |  |  |   move.l 60(sp),16(sp)
    cd14:	   |  |  |   moveq #1,d0
    cd16:	   |  |  |   move.l d0,12(sp)
    cd1a:	   |  |  |   move.l 1c9c6 <DOSBase>,d0
    cd20:	   |  |  |   movea.l d0,a6
    cd22:	   |  |  |   move.l 16(sp),d1
    cd26:	   |  |  |   move.l 12(sp),d2
    cd2a:	   |  |  |   jsr -312(a6)
    cd2e:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cd32:	   |  |  |   move.l 1ca4a <stackLibTotal>,d0
    cd38:	   |  |  |   sub.l 44(sp),d0
    cd3c:	   |  |  |   move.l 60(sp),-(sp)
    cd40:	   |  |  |   move.l d0,-(sp)
    cd42:	   |  |  |   jsr 8d0 <put2bytes>
    cd48:	   |  |  |   addq.l #8,sp
			return TRUE;
    cd4a:	   |  |  |   moveq #1,d0
    cd4c:	/--|--|--|-- bra.w ce0a <saveStackRef+0x11e>
		}
		s = s -> next;
    cd50:	|  |  |  \-> movea.l 48(sp),a0
    cd54:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cd5a:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cd5e:	|  |  \----> tst.l 48(sp)
    cd62:	|  \-------- bne.s cd02 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cd64:	|            move.l 60(sp),40(sp)
    cd6a:	|            clr.l 36(sp)
    cd6e:	|            move.l 1c9c6 <DOSBase>,d0
    cd74:	|            movea.l d0,a6
    cd76:	|            move.l 40(sp),d1
    cd7a:	|            move.l 36(sp),d2
    cd7e:	|            jsr -312(a6)
    cd82:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd86:	|            movea.l 56(sp),a0
    cd8a:	|            move.l (a0),d0
    cd8c:	|            move.l 60(sp),-(sp)
    cd90:	|            move.l d0,-(sp)
    cd92:	|            jsr cc88 <saveStack>
    cd98:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd9a:	|            moveq #8,d0
    cd9c:	|            move.l d0,28(sp)
    cda0:	|            clr.l 24(sp)
    cda4:	|            move.l 1c9be <SysBase>,d0
    cdaa:	|            movea.l d0,a6
    cdac:	|            move.l 28(sp),d0
    cdb0:	|            move.l 24(sp),d1
    cdb4:	|            jsr -684(a6)
    cdb8:	|            move.l d0,20(sp)
    cdbc:	|            move.l 20(sp),d0
    cdc0:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cdc4:	|            move.l 1ca4a <stackLibTotal>,d0
    cdca:	|            addq.l #1,d0
    cdcc:	|            move.l d0,1ca4a <stackLibTotal>
	if (! s) {
    cdd2:	|            tst.l 48(sp)
    cdd6:	|        /-- bne.s cdea <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cdd8:	|        |   pea 193e6 <PutChar+0x16d4>
    cdde:	|        |   jsr 17248 <KPrintF>
    cde4:	|        |   addq.l #4,sp
		return FALSE;
    cde6:	|        |   clr.w d0
    cde8:	+--------|-- bra.s ce0a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cdea:	|        \-> move.l 1ca4e <stackLib>,d0
    cdf0:	|            movea.l 48(sp),a0
    cdf4:	|            move.l d0,4(a0)
	s -> stack = vs;
    cdf8:	|            movea.l 48(sp),a0
    cdfc:	|            move.l 56(sp),(a0)
	stackLib = s;
    ce00:	|            move.l 48(sp),1ca4e <stackLib>
	return TRUE;
    ce08:	|            moveq #1,d0
}
    ce0a:	\----------> move.l (sp)+,d2
    ce0c:	             movea.l (sp)+,a6
    ce0e:	             lea 44(sp),sp
    ce12:	             rts

0000ce14 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    ce14:	          lea -12(sp),sp
    ce18:	          move.l a6,-(sp)
    ce1a:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    ce1c:	          move.l 28(sp),16(sp)
    ce22:	          movea.l 24(sp),a0
    ce26:	          move.l (a0),d0
    ce28:	          move.l d0,12(sp)
    ce2c:	          move.l 1c9c6 <DOSBase>,d0
    ce32:	          movea.l d0,a6
    ce34:	          move.l 16(sp),d1
    ce38:	          move.l 12(sp),d2
    ce3c:	          jsr -312(a6)
    ce40:	          move.l d0,8(sp)
	switch (from -> varType) {
    ce44:	          movea.l 24(sp),a0
    ce48:	          move.l (a0),d0
    ce4a:	          moveq #9,d1
    ce4c:	          cmp.l d0,d1
    ce4e:	      /-- bcs.w cefe <saveVariable+0xea>
    ce52:	      |   add.l d0,d0
    ce54:	      |   movea.l d0,a0
    ce56:	      |   adda.l #52834,a0
    ce5c:	      |   move.w (a0),d0
    ce5e:	      |   jmp (ce62 <saveVariable+0x4e>,pc,d0.w)
    ce62:	      |   ori.l #1310740,(a0)+
    ce68:	      |   ori.b #20,(20,a0,d0.w)
    ce6e:	      |   .short 0x004c
    ce70:	      |   ori.b #126,(a4)
    ce74:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce78:	      |   ori.b #40,(a0)+
    ce7c:	      |   ori.b #47,d4
    ce80:	      |   ori.b #0,(a4)+
    ce84:	      |   jsr 958 <put4bytes>
    ce8a:	      |   addq.l #8,sp
		return TRUE;
    ce8c:	      |   moveq #1,d0
    ce8e:	/-----|-- bra.w cf3a <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce92:	|     |   movea.l 24(sp),a0
    ce96:	|     |   move.l 4(a0),d0
    ce9a:	|     |   move.l 28(sp),-(sp)
    ce9e:	|     |   move.l d0,-(sp)
    cea0:	|     |   jsr bd8 <writeString>
    cea6:	|     |   addq.l #8,sp
		return TRUE;
    cea8:	|     |   moveq #1,d0
    ceaa:	+-----|-- bra.w cf3a <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ceae:	|     |   movea.l 24(sp),a0
    ceb2:	|     |   move.l 4(a0),d0
    ceb6:	|     |   move.l 28(sp),-(sp)
    ceba:	|     |   move.l d0,-(sp)
    cebc:	|     |   jsr ccec <saveStackRef>
    cec2:	|     |   addq.l #8,sp
    cec4:	+-----|-- bra.s cf3a <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cec6:	|     |   movea.l 24(sp),a0
    ceca:	|     |   move.l 4(a0),d0
    cece:	|     |   move.l 28(sp),-(sp)
    ced2:	|     |   move.l d0,-(sp)
    ced4:	|     |   jsr b062 <saveCostume>
    ceda:	|     |   addq.l #8,sp
		return FALSE;
    cedc:	|     |   clr.w d0
    cede:	+-----|-- bra.s cf3a <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cee0:	|     |   movea.l 24(sp),a0
    cee4:	|     |   move.l 4(a0),d0
    cee8:	|     |   move.l 28(sp),-(sp)
    ceec:	|     |   move.l d0,-(sp)
    ceee:	|     |   jsr af98 <saveAnim>
    cef4:	|     |   addq.l #8,sp
		return FALSE;
    cef6:	|     |   clr.w d0
    cef8:	+-----|-- bra.s cf3a <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cefa:	|     |   clr.w d0
    cefc:	+-----|-- bra.s cf3a <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cefe:	|     \-> movea.l 24(sp),a0
    cf02:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf04:	|         moveq #10,d1
    cf06:	|         cmp.l d0,d1
    cf08:	|  /----- bcs.s cf22 <saveVariable+0x10e>
						typeName[from->varType] :
    cf0a:	|  |      movea.l 24(sp),a0
    cf0e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf10:	|  |      add.l d0,d0
    cf12:	|  |      movea.l d0,a1
    cf14:	|  |      adda.l d0,a1
    cf16:	|  |      lea 1c89a <typeName>,a0
    cf1c:	|  |      move.l (0,a1,a0.l),d0
    cf20:	|  |  /-- bra.s cf28 <saveVariable+0x114>
    cf22:	|  \--|-> move.l #103435,d0
    cf28:	|     \-> move.l d0,-(sp)
    cf2a:	|         pea 19412 <PutChar+0x1700>
    cf30:	|         jsr 17248 <KPrintF>
    cf36:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cf38:	|         moveq #1,d0
    cf3a:	\-------> move.l (sp)+,d2
    cf3c:	          movea.l (sp)+,a6
    cf3e:	          lea 12(sp),sp
    cf42:	          rts

0000cf44 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cf44:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cf48:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cf50:	          movea.l 4(sp),a0
    cf54:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cf5a:	          movea.l 4(sp),a0
    cf5e:	          move.w 10(a0),d0
    cf62:	          lsr.w #8,d0
    cf64:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cf68:	          movea.l 4(sp),a0
    cf6c:	          move.w 10(a0),d0
    cf70:	          move.b d0,(sp)

    if(counterx_new)
    cf72:	/-------- beq.w d018 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf76:	|         clr.w d1
    cf78:	|         move.b (sp),d1
    cf7a:	|         move.w 1ca56 <counterx_old>,d0
    cf80:	|         sub.w d0,d1
    cf82:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf86:	|         cmpi.w #128,10(sp)
    cf8c:	|     /-- blt.s cfa4 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf8e:	|     |   move.w #1,1c974 <input+0x4>
            counterx_diff -= 256;    
    cf96:	|     |   move.w 10(sp),d0
    cf9a:	|     |   addi.w #-256,d0
    cf9e:	|     |   move.w d0,10(sp)
    cfa2:	|  /--|-- bra.s cfd0 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cfa4:	|  |  \-> cmpi.w #-129,10(sp)
    cfaa:	|  |  /-- bgt.s cfc2 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cfac:	|  |  |   move.w 10(sp),d0
    cfb0:	|  |  |   addi.w #256,d0
    cfb4:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cfb8:	|  |  |   move.w #1,1c974 <input+0x4>
    cfc0:	|  +--|-- bra.s cfd0 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cfc2:	|  |  \-> tst.w 10(sp)
    cfc6:	|  +----- beq.s cfd0 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cfc8:	|  |      move.w #1,1c974 <input+0x4>
        }

        input.mouseX += counterx_diff;
    cfd0:	|  \----> move.l 1c97a <input+0xa>,d0
    cfd6:	|         movea.w 10(sp),a0
    cfda:	|         add.l a0,d0
    cfdc:	|         move.l d0,1c97a <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cfe2:	|         move.l 1c97a <input+0xa>,d1
    cfe8:	|         move.l 1c912 <winWidth>,d0
    cfee:	|         cmp.l d1,d0
    cff0:	|     /-- bge.s d000 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cff2:	|     |   move.l 1c912 <winWidth>,d0
    cff8:	|     |   move.l d0,1c97a <input+0xa>
    cffe:	|  /--|-- bra.s d00e <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d000:	|  |  \-> move.l 1c97a <input+0xa>,d0
    d006:	|  +----- bpl.s d00e <CsiCheckInput+0xca>
            input.mouseX = 0;
    d008:	|  |      clr.l 1c97a <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d00e:	|  \----> clr.w d0
    d010:	|         move.b (sp),d0
    d012:	|         move.w d0,1ca56 <counterx_old>
    }    

    if(countery_new)
    d018:	\-------> tst.b 1(sp)
    d01c:	/-------- beq.w d0c6 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d020:	|         clr.w d1
    d022:	|         move.b 1(sp),d1
    d026:	|         move.w 1ca58 <countery_old>,d0
    d02c:	|         sub.w d0,d1
    d02e:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d032:	|         cmpi.w #128,8(sp)
    d038:	|     /-- blt.s d050 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d03a:	|     |   move.w #1,1c974 <input+0x4>
            countery_diff -= 256;    
    d042:	|     |   move.w 8(sp),d0
    d046:	|     |   addi.w #-256,d0
    d04a:	|     |   move.w d0,8(sp)
    d04e:	|  /--|-- bra.s d07c <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d050:	|  |  \-> cmpi.w #-129,8(sp)
    d056:	|  |  /-- bgt.s d06e <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d058:	|  |  |   move.w #1,1c974 <input+0x4>
            countery_diff += 256;
    d060:	|  |  |   move.w 8(sp),d0
    d064:	|  |  |   addi.w #256,d0
    d068:	|  |  |   move.w d0,8(sp)
    d06c:	|  +--|-- bra.s d07c <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d06e:	|  |  \-> tst.w 8(sp)
    d072:	|  +----- beq.s d07c <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d074:	|  |      move.w #1,1c974 <input+0x4>
        }

        input.mouseY += countery_diff;
    d07c:	|  \----> move.l 1c97e <input+0xe>,d0
    d082:	|         movea.w 8(sp),a0
    d086:	|         add.l a0,d0
    d088:	|         move.l d0,1c97e <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d08e:	|         move.l 1c97e <input+0xe>,d1
    d094:	|         move.l 1c916 <winHeight>,d0
    d09a:	|         cmp.l d1,d0
    d09c:	|     /-- bge.s d0ac <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d09e:	|     |   move.l 1c916 <winHeight>,d0
    d0a4:	|     |   move.l d0,1c97e <input+0xe>
    d0aa:	|  /--|-- bra.s d0ba <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d0ac:	|  |  \-> move.l 1c97e <input+0xe>,d0
    d0b2:	|  +----- bpl.s d0ba <CsiCheckInput+0x176>
            input.mouseY = 0;
    d0b4:	|  |      clr.l 1c97e <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d0ba:	|  \----> clr.w d0
    d0bc:	|         move.b 1(sp),d0
    d0c0:	|         move.w d0,1ca58 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d0c6:	\-------> move.w 1c970 <input>,d0
    d0cc:	      /-- beq.s d0f2 <CsiCheckInput+0x1ae>
    d0ce:	      |   movea.l #12574721,a0
    d0d4:	      |   move.b (a0),d0
    d0d6:	      |   move.b d0,d0
    d0d8:	      |   andi.l #255,d0
    d0de:	      |   moveq #64,d1
    d0e0:	      |   and.l d1,d0
    d0e2:	      +-- beq.s d0f2 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d0e4:	      |   clr.w 1c970 <input>
        input.leftRelease = TRUE;
    d0ea:	      |   move.w #1,1c976 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d0f2:	      \-> move.w 1c972 <input+0x2>,d0
    d0f8:	      /-- beq.s d120 <CsiCheckInput+0x1dc>
    d0fa:	      |   movea.l #14675990,a0
    d100:	      |   move.w (a0),d0
    d102:	      |   move.w d0,d0
    d104:	      |   andi.l #65535,d0
    d10a:	      |   andi.l #1024,d0
    d110:	      +-- beq.s d120 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d112:	      |   clr.w 1c972 <input+0x2>
        input.rightRelease = TRUE;
    d118:	      |   move.w #1,1c978 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d120:	      \-> movea.l #12574721,a0
    d126:	          move.b (a0),d0
    d128:	          move.b d0,d0
    d12a:	          andi.l #255,d0
    d130:	          moveq #64,d1
    d132:	          and.l d1,d0
    d134:	      /-- bne.s d13e <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d136:	      |   move.w #1,1c970 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d13e:	      \-> movea.l #14675990,a0
    d144:	          move.w (a0),d0
    d146:	          move.w d0,d0
    d148:	          andi.l #65535,d0
    d14e:	          andi.l #1024,d0
    d154:	      /-- bne.s d15e <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d156:	      |   move.w #1,1c972 <input+0x2>
    }

    d15e:	      \-> nop
    d160:	          lea 12(sp),sp
    d164:	          rts

0000d166 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d166:	moveq #0,d0
}
    d168:	rts

0000d16a <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d16a:	nop
    d16c:	rts

0000d16e <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d16e:	nop
    d170:	rts

0000d172 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d172:	moveq #1,d0
}
    d174:	rts

0000d176 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d176:	nop
    d178:	rts

0000d17a <saveSounds>:

void saveSounds (BPTR fp) {
    d17a:	lea -12(sp),sp
    d17e:	move.l a6,-(sp)
    d180:	move.l d2,-(sp)
	FPutC (fp,0);
    d182:	move.l 24(sp),16(sp)
    d188:	clr.l 12(sp)
    d18c:	move.l 1c9c6 <DOSBase>,d0
    d192:	movea.l d0,a6
    d194:	move.l 16(sp),d1
    d198:	move.l 12(sp),d2
    d19c:	jsr -312(a6)
    d1a0:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d1a4:	move.l 1c358 <defSoundVol>,d0
    d1aa:	move.l 24(sp),-(sp)
    d1ae:	move.l d0,-(sp)
    d1b0:	jsr 8d0 <put2bytes>
    d1b6:	addq.l #8,sp
	put2bytes (defVol, fp);
    d1b8:	move.l 1c354 <defVol>,d0
    d1be:	move.l 24(sp),-(sp)
    d1c2:	move.l d0,-(sp)
    d1c4:	jsr 8d0 <put2bytes>
    d1ca:	addq.l #8,sp
}
    d1cc:	nop
    d1ce:	move.l (sp)+,d2
    d1d0:	movea.l (sp)+,a6
    d1d2:	lea 12(sp),sp
    d1d6:	rts

0000d1d8 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d1d8:	move.l 4(sp),1c354 <defVol>
}
    d1e0:	nop
    d1e2:	rts

0000d1e4 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d1e4:	move.l 4(sp),1c358 <defSoundVol>
}
    d1ec:	nop
    d1ee:	rts

0000d1f0 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d1f0:	nop
    d1f2:	rts

0000d1f4 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1f4:	nop
    d1f6:	rts

0000d1f8 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1f8:	nop
    d1fa:	rts

0000d1fc <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d1fc:	subq.l #4,sp
    d1fe:	move.l 12(sp),d0
    d202:	move.w d0,d0
    d204:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d208:	moveq #1,d0
}
    d20a:	addq.l #4,sp
    d20c:	rts

0000d20e <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d20e:	nop
    d210:	rts

0000d212 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d212:	move.l 16(sp),-(sp)
    d216:	move.l 16(sp),-(sp)
    d21a:	jsr e0e <CstBlankScreen>
    d220:	addq.l #8,sp
}
    d222:	nop
    d224:	rts

0000d226 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d226:	pea 19435 <PutChar+0x1723>
    d22c:	jsr 17248 <KPrintF>
    d232:	addq.l #4,sp
}
    d234:	nop
    d236:	rts

0000d238 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d238:	movea.l 8(sp),a1
    d23c:	movea.l 12(sp),a0
    d240:	move.l 8(sp),d1
    d244:	move.l 4(sp),d0
    d248:	move.l a1,-(sp)
    d24a:	move.l a0,-(sp)
    d24c:	move.l d1,-(sp)
    d24e:	move.l d0,-(sp)
    d250:	jsr 3e7e <drawLine>
    d256:	lea 16(sp),sp
}
    d25a:	nop
    d25c:	rts

0000d25e <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d25e:	movea.l 12(sp),a1
    d262:	movea.l 4(sp),a0
    d266:	move.l 8(sp),d1
    d26a:	move.l 4(sp),d0
    d26e:	move.l a1,-(sp)
    d270:	move.l a0,-(sp)
    d272:	move.l d1,-(sp)
    d274:	move.l d0,-(sp)
    d276:	jsr 3e7e <drawLine>
    d27c:	lea 16(sp),sp
}
    d280:	nop
    d282:	rts

0000d284 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d284:	pea 1946e <PutChar+0x175c>
    d28a:	jsr 17248 <KPrintF>
    d290:	addq.l #4,sp
}
    d292:	nop
    d294:	rts

0000d296 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d296:	jsr 1c52 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d29c:	pea 1ca62 <backdropTextureName>
    d2a2:	pea 1 <_start+0x1>
    d2a6:	jsr 4000 <deleteTextures>
    d2ac:	addq.l #8,sp
	backdropTextureName = 0;
    d2ae:	clr.l 1ca62 <backdropTextureName>
	backdropExists = FALSE;
    d2b4:	clr.w 1ca66 <backdropExists>
}
    d2ba:	nop
    d2bc:	rts

0000d2be <killParallax>:

void killParallax () {
    d2be:	          lea -12(sp),sp
    d2c2:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d2c4:	   /----- bra.s d330 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d2c6:	/--|----> move.l 1ca68 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d2ce:	|  |      movea.l 12(sp),a0
    d2d2:	|  |      move.l 42(a0),d0
    d2d6:	|  |      move.l d0,1ca68 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d2dc:	|  |      move.l 12(sp),d0
    d2e0:	|  |      addq.l #4,d0
    d2e2:	|  |      move.l d0,-(sp)
    d2e4:	|  |      pea 1 <_start+0x1>
    d2e8:	|  |      jsr 4000 <deleteTextures>
    d2ee:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d2f0:	|  |      movea.l 12(sp),a0
    d2f4:	|  |      move.l (a0),d0
    d2f6:	|  |  /-- beq.s d310 <killParallax+0x52>
    d2f8:	|  |  |   movea.l 12(sp),a0
    d2fc:	|  |  |   move.l (a0),8(sp)
    d300:	|  |  |   move.l 1c9be <SysBase>,d0
    d306:	|  |  |   movea.l d0,a6
    d308:	|  |  |   movea.l 8(sp),a1
    d30c:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d310:	|  |  \-> tst.l 12(sp)
    d314:	|  |  /-- beq.s d32c <killParallax+0x6e>
    d316:	|  |  |   move.l 12(sp),4(sp)
    d31c:	|  |  |   move.l 1c9be <SysBase>,d0
    d322:	|  |  |   movea.l d0,a6
    d324:	|  |  |   movea.l 4(sp),a1
    d328:	|  |  |   jsr -690(a6)
		k = NULL;
    d32c:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d330:	|  \----> move.l 1ca68 <parallaxStuff>,d0
    d336:	\-------- bne.s d2c6 <killParallax+0x8>
	}
}
    d338:	          nop
    d33a:	          nop
    d33c:	          movea.l (sp)+,a6
    d33e:	          lea 12(sp),sp
    d342:	          rts

0000d344 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d344:	       move.l 4(sp),-(sp)
    d348:	       jsr 6d92 <openFileFromNum>
    d34e:	       addq.l #4,sp
    d350:	       tst.l d0
    d352:	   /-- bne.s d364 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d354:	   |   pea 1948f <PutChar+0x177d>
    d35a:	   |   jsr 17248 <KPrintF>
    d360:	   |   addq.l #4,sp
		return;
    d362:	/--|-- bra.s d384 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d364:	|  \-> move.l 1c9a6 <bigDataFile>,d0
    d36a:	|      move.l 12(sp),-(sp)
    d36e:	|      move.l 12(sp),-(sp)
    d372:	|      move.l d0,-(sp)
    d374:	|      jsr 1f00 <CstLoadBackdrop>
    d37a:	|      lea 12(sp),sp
	finishAccess ();
    d37e:	|      jsr 6c8a <finishAccess>
	
}
    d384:	\----> rts

0000d386 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d386:	subq.l #8,sp
    d388:	movea.l 12(sp),a0
    d38c:	move.l 16(sp),d1
    d390:	move.l 20(sp),d0
    d394:	movea.w a0,a0
    d396:	move.w a0,6(sp)
    d39a:	move.w d1,d1
    d39c:	move.w d1,4(sp)
    d3a0:	move.w d0,d0
    d3a2:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d3a6:	pea 194de <PutChar+0x17cc>
    d3ac:	jsr 17248 <KPrintF>
    d3b2:	addq.l #4,sp

}
    d3b4:	nop
    d3b6:	addq.l #8,sp
    d3b8:	rts

0000d3ba <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d3ba:	pea 19501 <PutChar+0x17ef>
    d3c0:	jsr 17248 <KPrintF>
    d3c6:	addq.l #4,sp
}
    d3c8:	nop
    d3ca:	rts

0000d3cc <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d3cc:	pea 1ca6c <snapshotTextureName>
    d3d2:	pea 1 <_start+0x1>
    d3d6:	jsr 4000 <deleteTextures>
    d3dc:	addq.l #8,sp
	snapshotTextureName = 0;
    d3de:	clr.l 1ca6c <snapshotTextureName>
}
    d3e4:	nop
    d3e6:	rts

0000d3e8 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d3e8:	clr.l 1ca78 <cameraX>
	cameraY = 0;
    d3ee:	clr.l 1ca7c <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d3f4:	move.l 1ca5e <sceneHeight>,d0
    d3fa:	move.l d0,d1
    d3fc:	move.l 1ca5a <sceneWidth>,d0
    d402:	move.l d1,-(sp)
    d404:	move.l d0,-(sp)
    d406:	jsr 3984 <CstReserveBackdrop>
    d40c:	addq.l #8,sp
}
    d40e:	rts

0000d410 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d410:	jsr d296 <killBackDrop>
	killParallax ();
    d416:	jsr d2be <killParallax>
	killZBuffer ();
    d41c:	jsr 8734 <killZBuffer>
	sceneWidth = x;
    d422:	move.l 4(sp),d0
    d426:	move.l d0,1ca5a <sceneWidth>
	sceneHeight = y;
    d42c:	move.l 8(sp),d0
    d430:	move.l d0,1ca5e <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d436:	pea 1953a <PutChar+0x1828>
    d43c:	jsr 17248 <KPrintF>
    d442:	addq.l #4,sp
	return reserveBackdrop();
    d444:	jsr d3e8 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d44a:	rts

0000d44c <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d44c:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d44e:	move.l 12(sp),-(sp)
    d452:	jsr 6bc <get2bytes>
    d458:	addq.l #4,sp
    d45a:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d45e:	move.l 12(sp),-(sp)
    d462:	jsr 6bc <get2bytes>
    d468:	addq.l #4,sp
    d46a:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d46c:	moveq #1,d0
}
    d46e:	addq.l #8,sp
    d470:	rts

0000d472 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d472:	   /-> lea -12(sp),sp
    d476:	   |   move.l a6,-(sp)
    d478:	   |   move.l d2,-(sp)
	if (me) {
    d47a:	   |   tst.l 24(sp)
    d47e:	/--|-- beq.w d514 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d482:	|  |   movea.l 24(sp),a0
    d486:	|  |   move.l 42(a0),d0
    d48a:	|  |   move.l 28(sp),-(sp)
    d48e:	|  |   move.l d0,-(sp)
    d490:	|  \-- jsr d472 <saveParallaxRecursive>(pc)
    d494:	|      addq.l #8,sp
		FPutC (fp, 1);
    d496:	|      move.l 28(sp),16(sp)
    d49c:	|      moveq #1,d0
    d49e:	|      move.l d0,12(sp)
    d4a2:	|      move.l 1c9c6 <DOSBase>,d0
    d4a8:	|      movea.l d0,a6
    d4aa:	|      move.l 16(sp),d1
    d4ae:	|      move.l 12(sp),d2
    d4b2:	|      jsr -312(a6)
    d4b6:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d4ba:	|      movea.l 24(sp),a0
    d4be:	|      move.w 28(a0),d0
    d4c2:	|      move.w d0,d0
    d4c4:	|      andi.l #65535,d0
    d4ca:	|      move.l 28(sp),-(sp)
    d4ce:	|      move.l d0,-(sp)
    d4d0:	|      jsr 8d0 <put2bytes>
    d4d6:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d4d8:	|      movea.l 24(sp),a0
    d4dc:	|      move.w 30(a0),d0
    d4e0:	|      move.w d0,d0
    d4e2:	|      andi.l #65535,d0
    d4e8:	|      move.l 28(sp),-(sp)
    d4ec:	|      move.l d0,-(sp)
    d4ee:	|      jsr 8d0 <put2bytes>
    d4f4:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d4f6:	|      movea.l 24(sp),a0
    d4fa:	|      move.w 32(a0),d0
    d4fe:	|      move.w d0,d0
    d500:	|      andi.l #65535,d0
    d506:	|      move.l 28(sp),-(sp)
    d50a:	|      move.l d0,-(sp)
    d50c:	|      jsr 8d0 <put2bytes>
    d512:	|      addq.l #8,sp
	}
}
    d514:	\----> nop
    d516:	       move.l (sp)+,d2
    d518:	       movea.l (sp)+,a6
    d51a:	       lea 12(sp),sp
    d51e:	       rts

0000d520 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d520:	pea 19561 <PutChar+0x184f>
    d526:	jsr 17248 <KPrintF>
    d52c:	addq.l #4,sp
	return TRUE;
    d52e:	moveq #1,d0
    d530:	rts

0000d532 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d532:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d534:	             move.l 1ca70 <allObjectTypes>,(sp)

	while (huntType) {
    d53a:	      /----- bra.s d552 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d53c:	   /--|----> movea.l (sp),a0
    d53e:	   |  |      move.l 4(a0),d0
    d542:	   |  |      cmp.l 8(sp),d0
    d546:	   |  |  /-- bne.s d54c <findObjectType+0x1a>
    d548:	   |  |  |   move.l (sp),d0
    d54a:	/--|--|--|-- bra.s d562 <findObjectType+0x30>
		huntType = huntType -> next;
    d54c:	|  |  |  \-> movea.l (sp),a0
    d54e:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d552:	|  |  \----> tst.l (sp)
    d554:	|  \-------- bne.s d53c <findObjectType+0xa>
	}

	return loadObjectType (i);
    d556:	|            move.l 8(sp),-(sp)
    d55a:	|            jsr d622 <loadObjectType>
    d560:	|            addq.l #4,sp
}
    d562:	\----------> addq.l #4,sp
    d564:	             rts

0000d566 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d566:	             lea -12(sp),sp
	int i, num = 0;
    d56a:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d56e:	             move.l 20(sp),-(sp)
    d572:	             jsr d532 <findObjectType>
    d578:	             addq.l #4,sp
    d57a:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d57c:	             clr.l 8(sp)
    d580:	   /-------- bra.s d5b6 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d582:	/--|-------> movea.l (sp),a0
    d584:	|  |         move.l 38(a0),d1
    d588:	|  |         move.l 8(sp),d0
    d58c:	|  |         lsl.l #3,d0
    d58e:	|  |         movea.l d1,a0
    d590:	|  |         adda.l d0,a0
    d592:	|  |         move.l (a0),d0
    d594:	|  |         cmp.l 16(sp),d0
    d598:	|  |  /----- bne.s d5b2 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d59a:	|  |  |      movea.l (sp),a0
    d59c:	|  |  |      move.l 38(a0),d1
    d5a0:	|  |  |      move.l 8(sp),d0
    d5a4:	|  |  |      lsl.l #3,d0
    d5a6:	|  |  |      movea.l d1,a0
    d5a8:	|  |  |      adda.l d0,a0
    d5aa:	|  |  |      move.l 4(a0),4(sp)
			break;
    d5b0:	|  |  |  /-- bra.s d5c2 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d5b2:	|  |  \--|-> addq.l #1,8(sp)
    d5b6:	|  \-----|-> movea.l (sp),a0
    d5b8:	|        |   move.l 16(a0),d0
    d5bc:	|        |   cmp.l 8(sp),d0
    d5c0:	\--------|-- bgt.s d582 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d5c2:	         \-> move.l 4(sp),d0
}
    d5c6:	             lea 12(sp),sp
    d5ca:	             rts

0000d5cc <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d5cc:	moveq #1,d0
}
    d5ce:	rts

0000d5d0 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d5d0:	subq.l #8,sp
    d5d2:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d5d4:	move.l 16(sp),-(sp)
    d5d8:	jsr 6bc <get2bytes>
    d5de:	addq.l #4,sp
    d5e0:	move.l d0,-(sp)
    d5e2:	jsr d622 <loadObjectType>
    d5e8:	addq.l #4,sp
    d5ea:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d5ee:	movea.l 8(sp),a0
    d5f2:	move.l (a0),4(sp)
    d5f6:	move.l 1c9be <SysBase>,d0
    d5fc:	movea.l d0,a6
    d5fe:	movea.l 4(sp),a1
    d602:	jsr -690(a6)
	r -> screenName = readString (fp);
    d606:	move.l 16(sp),-(sp)
    d60a:	jsr b02 <readString>
    d610:	addq.l #4,sp
    d612:	movea.l 8(sp),a0
    d616:	move.l d0,(a0)
	return r;
    d618:	move.l 8(sp),d0
}
    d61c:	movea.l (sp)+,a6
    d61e:	addq.l #8,sp
    d620:	rts

0000d622 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d622:	          lea -84(sp),sp
    d626:	          move.l a6,-(sp)
    d628:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d62a:	          moveq #42,d0
    d62c:	          move.l d0,84(sp)
    d630:	          clr.l 80(sp)
    d634:	          move.l 1c9be <SysBase>,d0
    d63a:	          movea.l d0,a6
    d63c:	          move.l 84(sp),d0
    d640:	          move.l 80(sp),d1
    d644:	          jsr -684(a6)
    d648:	          move.l d0,76(sp)
    d64c:	          move.l 76(sp),d0
    d650:	          move.l d0,72(sp)

    if (newType) {
    d654:	/-------- beq.w d8ce <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d658:	|         move.l 96(sp),-(sp)
    d65c:	|         jsr 6e5a <openObjectSlice>
    d662:	|         addq.l #4,sp
    d664:	|         tst.w d0
    d666:	+-------- beq.w d8ce <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d66a:	|         move.l 1c9a6 <bigDataFile>,d0
    d670:	|         move.l d0,-(sp)
    d672:	|         jsr 6bc <get2bytes>
    d678:	|         addq.l #4,sp
    d67a:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d67e:	|         move.l 1c9a6 <bigDataFile>,64(sp)
    d686:	|         move.l 1c9c6 <DOSBase>,d0
    d68c:	|         movea.l d0,a6
    d68e:	|         move.l 64(sp),d1
    d692:	|         jsr -306(a6)
    d696:	|         move.l d0,60(sp)
    d69a:	|         move.l 60(sp),d0
    d69e:	|         move.l d0,d0
    d6a0:	|         movea.l 72(sp),a0
    d6a4:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d6a8:	|         move.l 1c9a6 <bigDataFile>,56(sp)
    d6b0:	|         move.l 1c9c6 <DOSBase>,d0
    d6b6:	|         movea.l d0,a6
    d6b8:	|         move.l 56(sp),d1
    d6bc:	|         jsr -306(a6)
    d6c0:	|         move.l d0,52(sp)
    d6c4:	|         move.l 52(sp),d0
    d6c8:	|         move.l d0,d0
    d6ca:	|         movea.l 72(sp),a0
    d6ce:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d6d2:	|         move.l 1c9a6 <bigDataFile>,48(sp)
    d6da:	|         move.l 1c9c6 <DOSBase>,d0
    d6e0:	|         movea.l d0,a6
    d6e2:	|         move.l 48(sp),d1
    d6e6:	|         jsr -306(a6)
    d6ea:	|         move.l d0,44(sp)
    d6ee:	|         move.l 44(sp),d0
    d6f2:	|         move.l d0,d0
    d6f4:	|         movea.l 72(sp),a0
    d6f8:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d6fc:	|         move.l 1c9a6 <bigDataFile>,40(sp)
    d704:	|         move.l 1c9c6 <DOSBase>,d0
    d70a:	|         movea.l d0,a6
    d70c:	|         move.l 40(sp),d1
    d710:	|         jsr -306(a6)
    d714:	|         move.l d0,36(sp)
    d718:	|         move.l 36(sp),d0
    d71c:	|         movea.l 72(sp),a0
    d720:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d724:	|         move.l 1c9a6 <bigDataFile>,32(sp)
    d72c:	|         move.l 1c9c6 <DOSBase>,d0
    d732:	|         movea.l d0,a6
    d734:	|         move.l 32(sp),d1
    d738:	|         jsr -306(a6)
    d73c:	|         move.l d0,28(sp)
    d740:	|         move.l 28(sp),d0
    d744:	|         movea.l 72(sp),a0
    d748:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d74c:	|         move.l 1c9a6 <bigDataFile>,d0
    d752:	|         move.l d0,-(sp)
    d754:	|         jsr 718 <get4bytes>
    d75a:	|         addq.l #4,sp
    d75c:	|         movea.l 72(sp),a0
    d760:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d764:	|         move.l 1c9a6 <bigDataFile>,d0
    d76a:	|         move.l d0,-(sp)
    d76c:	|         jsr 6bc <get2bytes>
    d772:	|         addq.l #4,sp
    d774:	|         movea.l 72(sp),a0
    d778:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d77c:	|         move.l 1c9a6 <bigDataFile>,24(sp)
    d784:	|         move.l 1c9c6 <DOSBase>,d0
    d78a:	|         movea.l d0,a6
    d78c:	|         move.l 24(sp),d1
    d790:	|         jsr -306(a6)
    d794:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d798:	|         move.l 1c9a6 <bigDataFile>,d0
    d79e:	|         move.l d0,-(sp)
    d7a0:	|         jsr 7d8 <getFloat>
    d7a6:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d7a8:	|         move.l 1c9a6 <bigDataFile>,d0
    d7ae:	|         move.l d0,-(sp)
    d7b0:	|         jsr 7d8 <getFloat>
    d7b6:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d7b8:	|         move.l 1c9a6 <bigDataFile>,d0
    d7be:	|         move.l d0,-(sp)
    d7c0:	|         jsr 6bc <get2bytes>
    d7c6:	|         addq.l #4,sp
    d7c8:	|         move.l d0,d0
    d7ca:	|         movea.l 72(sp),a0
    d7ce:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d7d2:	|         move.l 1c9a6 <bigDataFile>,d0
    d7d8:	|         move.l d0,-(sp)
    d7da:	|         jsr 6bc <get2bytes>
    d7e0:	|         addq.l #4,sp
    d7e2:	|         movea.l 72(sp),a0
    d7e6:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d7ea:	|         movea.l 72(sp),a0
    d7ee:	|         move.l 16(a0),d0
    d7f2:	|  /----- beq.s d824 <loadObjectType+0x202>
    d7f4:	|  |      movea.l 72(sp),a0
    d7f8:	|  |      move.l 16(a0),d0
    d7fc:	|  |      lsl.l #3,d0
    d7fe:	|  |      move.l d0,16(sp)
    d802:	|  |      clr.l 12(sp)
    d806:	|  |      move.l 1c9be <SysBase>,d0
    d80c:	|  |      movea.l d0,a6
    d80e:	|  |      move.l 16(sp),d0
    d812:	|  |      move.l 12(sp),d1
    d816:	|  |      jsr -684(a6)
    d81a:	|  |      move.l d0,8(sp)
    d81e:	|  |      move.l 8(sp),d0
    d822:	|  |  /-- bra.s d826 <loadObjectType+0x204>
    d824:	|  \--|-> moveq #0,d0
    d826:	|     \-> movea.l 72(sp),a0
    d82a:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d82e:	|         clr.l 88(sp)
    d832:	|     /-- bra.s d882 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d834:	|  /--|-> move.l 1c9a6 <bigDataFile>,d1
    d83a:	|  |  |   movea.l 72(sp),a0
    d83e:	|  |  |   movea.l 38(a0),a0
    d842:	|  |  |   move.l 88(sp),d0
    d846:	|  |  |   lsl.l #3,d0
    d848:	|  |  |   lea (0,a0,d0.l),a2
    d84c:	|  |  |   move.l d1,-(sp)
    d84e:	|  |  |   jsr 6bc <get2bytes>
    d854:	|  |  |   addq.l #4,sp
    d856:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d858:	|  |  |   move.l 1c9a6 <bigDataFile>,d1
    d85e:	|  |  |   movea.l 72(sp),a0
    d862:	|  |  |   movea.l 38(a0),a0
    d866:	|  |  |   move.l 88(sp),d0
    d86a:	|  |  |   lsl.l #3,d0
    d86c:	|  |  |   lea (0,a0,d0.l),a2
    d870:	|  |  |   move.l d1,-(sp)
    d872:	|  |  |   jsr 6bc <get2bytes>
    d878:	|  |  |   addq.l #4,sp
    d87a:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d87e:	|  |  |   addq.l #1,88(sp)
    d882:	|  |  \-> movea.l 72(sp),a0
    d886:	|  |      move.l 16(a0),d0
    d88a:	|  |      cmp.l 88(sp),d0
    d88e:	|  \----- bgt.s d834 <loadObjectType+0x212>
            }
            finishAccess();
    d890:	|         jsr 6c8a <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d896:	|         move.l 68(sp),-(sp)
    d89a:	|         jsr 6c94 <getNumberedString>
    d8a0:	|         addq.l #4,sp
    d8a2:	|         movea.l 72(sp),a0
    d8a6:	|         move.l d0,(a0)
            newType->objectNum = i;
    d8a8:	|         movea.l 72(sp),a0
    d8ac:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d8b2:	|         move.l 1ca70 <allObjectTypes>,d0
    d8b8:	|         movea.l 72(sp),a0
    d8bc:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d8c0:	|         move.l 72(sp),1ca70 <allObjectTypes>
            return newType;
    d8c8:	|         move.l 72(sp),d0
    d8cc:	|     /-- bra.s d8d0 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d8ce:	\-----|-> moveq #0,d0
}
    d8d0:	      \-> movea.l (sp)+,a2
    d8d2:	          movea.l (sp)+,a6
    d8d4:	          lea 84(sp),sp
    d8d8:	          rts

0000d8da <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d8da:	             lea -16(sp),sp
    d8de:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d8e0:	             move.l #117360,16(sp)

	while (* huntRegion) {
    d8e8:	   /-------- bra.s d95c <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d8ea:	/--|-------> movea.l 16(sp),a0
    d8ee:	|  |         move.l (a0),d0
    d8f0:	|  |         cmp.l 24(sp),d0
    d8f4:	|  |  /----- bne.s d94e <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d8f6:	|  |  |      movea.l 24(sp),a0
    d8fa:	|  |  |      move.l 8(a0),d0
    d8fe:	|  |  |      movea.l 16(sp),a0
    d902:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d904:	|  |  |      movea.l 24(sp),a0
    d908:	|  |  |      move.l 38(a0),12(sp)
    d90e:	|  |  |      move.l 1c9be <SysBase>,d0
    d914:	|  |  |      movea.l d0,a6
    d916:	|  |  |      movea.l 12(sp),a1
    d91a:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d91e:	|  |  |      movea.l 24(sp),a0
    d922:	|  |  |      move.l (a0),8(sp)
    d926:	|  |  |      move.l 1c9be <SysBase>,d0
    d92c:	|  |  |      movea.l d0,a6
    d92e:	|  |  |      movea.l 8(sp),a1
    d932:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d936:	|  |  |      move.l 24(sp),4(sp)
    d93c:	|  |  |      move.l 1c9be <SysBase>,d0
    d942:	|  |  |      movea.l d0,a6
    d944:	|  |  |      movea.l 4(sp),a1
    d948:	|  |  |      jsr -690(a6)
			return;
    d94c:	|  |  |  /-- bra.s d972 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d94e:	|  |  \--|-> movea.l 16(sp),a0
    d952:	|  |     |   move.l (a0),d0
    d954:	|  |     |   move.l d0,d1
    d956:	|  |     |   addq.l #8,d1
    d958:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d95c:	|  \-----|-> movea.l 16(sp),a0
    d960:	|        |   move.l (a0),d0
    d962:	\--------|-- bne.s d8ea <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d964:	         |   pea 19588 <PutChar+0x1876>
    d96a:	         |   jsr 17248 <KPrintF>
    d970:	         |   addq.l #4,sp
}
    d972:	         \-> movea.l (sp)+,a6
    d974:	             lea 16(sp),sp
    d978:	             rts

0000d97a <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d97a:	movea.l 4(sp),a0
    d97e:	move.l 4(a0),d0
    d982:	move.l 8(sp),-(sp)
    d986:	move.l d0,-(sp)
    d988:	jsr 8d0 <put2bytes>
    d98e:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d990:	movea.l 4(sp),a0
    d994:	move.l (a0),d0
    d996:	move.l 8(sp),-(sp)
    d99a:	move.l d0,-(sp)
    d99c:	jsr bd8 <writeString>
    d9a2:	addq.l #8,sp
    d9a4:	nop
    d9a6:	rts

0000d9a8 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d9a8:	                         lea -112(sp),sp
    d9ac:	                         move.l a6,-(sp)
    d9ae:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d9b0:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d9b4:	                         move.w 1ca76 <saveEncoding>,d0
    d9ba:	                  /----- beq.s d9c4 <fileToStack+0x1c>
    d9bc:	                  |      move.l #103854,d0
    d9c2:	                  |  /-- bra.s d9ca <fileToStack+0x22>
    d9c4:	                  \--|-> move.l #103880,d0
    d9ca:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d9ce:	                         move.l 124(sp),112(sp)
    d9d4:	                         move.l #1005,108(sp)
    d9dc:	                         move.l 1c9c6 <DOSBase>,d0
    d9e2:	                         movea.l d0,a6
    d9e4:	                         move.l 112(sp),d1
    d9e8:	                         move.l 108(sp),d2
    d9ec:	                         jsr -30(a6)
    d9f0:	                         move.l d0,104(sp)
    d9f4:	                         move.l 104(sp),d0
    d9f8:	                         move.l d0,100(sp)
    if (!fp) {
    d9fc:	                     /-- bne.s da16 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d9fe:	                     |   move.l 124(sp),-(sp)
    da02:	                     |   pea 195df <PutChar+0x18cd>
    da08:	                     |   jsr 17248 <KPrintF>
    da0e:	                     |   addq.l #8,sp
        return FALSE;
    da10:	                     |   clr.w d0
    da12:	/--------------------|-- bra.w dd0c <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    da16:	|                    \-> move.w 1ca76 <saveEncoding>,d0
    da1c:	|                        move.l d0,d0
    da1e:	|                        move.b d0,1ca74 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    da24:	|                        move.w 1ca76 <saveEncoding>,d0
    da2a:	|                        lsr.w #8,d0
    da2c:	|                        move.l d0,d0
    da2e:	|                        move.b d0,1ca75 <encode2>

    while (*checker) {
    da34:	|                 /----- bra.s da98 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    da36:	|              /--|----> move.l 100(sp),30(sp)
    da3c:	|              |  |      move.l 1c9c6 <DOSBase>,d0
    da42:	|              |  |      movea.l d0,a6
    da44:	|              |  |      move.l 30(sp),d1
    da48:	|              |  |      jsr -306(a6)
    da4c:	|              |  |      move.l d0,26(sp)
    da50:	|              |  |      move.l 26(sp),d1
    da54:	|              |  |      movea.l 116(sp),a0
    da58:	|              |  |      move.b (a0),d0
    da5a:	|              |  |      ext.w d0
    da5c:	|              |  |      movea.w d0,a0
    da5e:	|              |  |      cmpa.l d1,a0
    da60:	|              |  |  /-- beq.s da94 <fileToStack+0xec>
            Close(fp);
    da62:	|              |  |  |   move.l 100(sp),22(sp)
    da68:	|              |  |  |   move.l 1c9c6 <DOSBase>,d0
    da6e:	|              |  |  |   movea.l d0,a6
    da70:	|              |  |  |   move.l 22(sp),d1
    da74:	|              |  |  |   jsr -36(a6)
    da78:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da7c:	|              |  |  |   move.l 124(sp),-(sp)
    da80:	|              |  |  |   pea 195ec <PutChar+0x18da>
    da86:	|              |  |  |   jsr 17248 <KPrintF>
    da8c:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da8e:	|              |  |  |   clr.w d0
    da90:	+--------------|--|--|-- bra.w dd0c <fileToStack+0x364>
        }
        checker++;
    da94:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    da98:	|              |  \----> movea.l 116(sp),a0
    da9c:	|              |         move.b (a0),d0
    da9e:	|              \-------- bne.s da36 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    daa0:	|                        move.w 1ca76 <saveEncoding>,d0
    daa6:	|  /-------------------- beq.s db1a <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    daa8:	|  |                     move.l 100(sp),-(sp)
    daac:	|  |                     jsr dd16 <readStringEncoded>
    dab2:	|  |                     addq.l #4,sp
    dab4:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dab8:	|  |                     pea 1962d <PutChar+0x191b>
    dabe:	|  |                     move.l 100(sp),-(sp)
    dac2:	|  |                     jsr 13c94 <strcmp>
    dac8:	|  |                     addq.l #8,sp
    daca:	|  |                     tst.l d0
    dacc:	|  |                 /-- beq.s db00 <fileToStack+0x158>
            Close(fp);
    dace:	|  |                 |   move.l 100(sp),88(sp)
    dad4:	|  |                 |   move.l 1c9c6 <DOSBase>,d0
    dada:	|  |                 |   movea.l d0,a6
    dadc:	|  |                 |   move.l 88(sp),d1
    dae0:	|  |                 |   jsr -36(a6)
    dae4:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dae8:	|  |                 |   move.l 124(sp),-(sp)
    daec:	|  |                 |   pea 1963c <PutChar+0x192a>
    daf2:	|  |                 |   jsr 17248 <KPrintF>
    daf8:	|  |                 |   addq.l #8,sp
            return FALSE;
    dafa:	|  |                 |   clr.w d0
    dafc:	+--|-----------------|-- bra.w dd0c <fileToStack+0x364>
        }
        FreeVec(checker);
    db00:	|  |                 \-> move.l 96(sp),92(sp)
    db06:	|  |                     move.l 1c9be <SysBase>,d0
    db0c:	|  |                     movea.l d0,a6
    db0e:	|  |                     movea.l 92(sp),a1
    db12:	|  |                     jsr -690(a6)
        checker = NULL;
    db16:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    db1a:	|  >-------------------> move.w 1ca76 <saveEncoding>,d0
    db20:	|  |     /-------------- beq.w dc54 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    db24:	|  |     |               move.l 100(sp),76(sp)
    db2a:	|  |     |               move.l 1c9c6 <DOSBase>,d0
    db30:	|  |     |               movea.l d0,a6
    db32:	|  |     |               move.l 76(sp),d1
    db36:	|  |     |               jsr -306(a6)
    db3a:	|  |     |               move.l d0,72(sp)
    db3e:	|  |     |               move.l 72(sp),d0
    db42:	|  |     |               move.b 1ca74 <encode1>,d1
    db48:	|  |     |               ext.w d1
    db4a:	|  |     |               ext.l d1
    db4c:	|  |     |               move.l d0,d2
    db4e:	|  |     |               eor.l d1,d2
    db50:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    db54:	|  |     |               moveq #-1,d0
    db56:	|  |     |               cmp.l 68(sp),d0
    db5a:	|  |  /--|-------------- beq.w dcea <fileToStack+0x342>

            char i = (char) tmp;
    db5e:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db64:	|  |  |  |               move.b 67(sp),d0
    db68:	|  |  |  |               ext.w d0
    db6a:	|  |  |  |               movea.w d0,a0
    db6c:	|  |  |  |               moveq #2,d2
    db6e:	|  |  |  |               cmp.l a0,d2
    db70:	|  |  |  |     /-------- beq.s dbec <fileToStack+0x244>
    db72:	|  |  |  |     |         moveq #2,d0
    db74:	|  |  |  |     |         cmp.l a0,d0
    db76:	|  |  |  |  /--|-------- blt.w dc22 <fileToStack+0x27a>
    db7a:	|  |  |  |  |  |         cmpa.w #0,a0
    db7e:	|  |  |  |  |  |     /-- beq.s db8a <fileToStack+0x1e2>
    db80:	|  |  |  |  |  |     |   moveq #1,d2
    db82:	|  |  |  |  |  |     |   cmp.l a0,d2
    db84:	|  |  |  |  |  |  /--|-- beq.s dbc6 <fileToStack+0x21e>
    db86:	|  |  |  |  +--|--|--|-- bra.w dc22 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db8a:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    db8e:	|  |  |  |  |  |  |      jsr dd16 <readStringEncoded>
    db94:	|  |  |  |  |  |  |      addq.l #4,sp
    db96:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db9a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db9e:	|  |  |  |  |  |  |      lea 14(sp),a0
    dba2:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dba4:	|  |  |  |  |  |  |      jsr 14a0a <makeTextVar>
    dbaa:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dbac:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dbb2:	|  |  |  |  |  |  |      move.l 1c9be <SysBase>,d0
    dbb8:	|  |  |  |  |  |  |      movea.l d0,a6
    dbba:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dbbe:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dbc2:	|  |  |  |  |  |  |  /-- bra.w dc7a <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dbc6:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dbca:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dbd0:	|  |  |  |  |  |     |   addq.l #4,sp
    dbd2:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dbd4:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dbd8:	|  |  |  |  |  |     |   lea 18(sp),a0
    dbdc:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dbde:	|  |  |  |  |  |     |   jsr 150da <setVariable>
    dbe4:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dbe8:	|  |  |  |  |  |     +-- bra.w dc7a <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dbec:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dbf2:	|  |  |  |  |        |   move.l 1c9c6 <DOSBase>,d0
    dbf8:	|  |  |  |  |        |   movea.l d0,a6
    dbfa:	|  |  |  |  |        |   move.l 62(sp),d1
    dbfe:	|  |  |  |  |        |   jsr -306(a6)
    dc02:	|  |  |  |  |        |   move.l d0,58(sp)
    dc06:	|  |  |  |  |        |   move.l 58(sp),d0
    dc0a:	|  |  |  |  |        |   move.l d0,-(sp)
    dc0c:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dc10:	|  |  |  |  |        |   lea 18(sp),a0
    dc14:	|  |  |  |  |        |   move.l a0,-(sp)
    dc16:	|  |  |  |  |        |   jsr 150da <setVariable>
    dc1c:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dc20:	|  |  |  |  |        +-- bra.s dc7a <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dc22:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dc26:	|  |  |  |           |   pea 196be <PutChar+0x19ac>
    dc2c:	|  |  |  |           |   jsr 17248 <KPrintF>
    dc32:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dc34:	|  |  |  |           |   move.l 100(sp),46(sp)
    dc3a:	|  |  |  |           |   move.l 1c9c6 <DOSBase>,d0
    dc40:	|  |  |  |           |   movea.l d0,a6
    dc42:	|  |  |  |           |   move.l 46(sp),d1
    dc46:	|  |  |  |           |   jsr -36(a6)
    dc4a:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dc4e:	|  |  |  |           |   clr.w d0
    dc50:	+--|--|--|-----------|-- bra.w dd0c <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dc54:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dc58:	|  |  |              |   jsr dddc <readTextPlain>
    dc5e:	|  |  |              |   addq.l #4,sp
    dc60:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc64:	|  |  |        /-----|-- beq.w dcee <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc68:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc6c:	|  |  |        |     |   lea 14(sp),a0
    dc70:	|  |  |        |     |   move.l a0,-(sp)
    dc72:	|  |  |        |     |   jsr 14a0a <makeTextVar>
    dc78:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc7a:	|  |  |        |     \-> movea.l 128(sp),a0
    dc7e:	|  |  |        |         move.l (a0),d0
    dc80:	|  |  |        |  /----- bne.s dcb0 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc82:	|  |  |        |  |      move.l 128(sp),d0
    dc86:	|  |  |        |  |      move.l d0,-(sp)
    dc88:	|  |  |        |  |      lea 14(sp),a0
    dc8c:	|  |  |        |  |      move.l a0,-(sp)
    dc8e:	|  |  |        |  |      jsr 140aa <addVarToStackQuick>
    dc94:	|  |  |        |  |      addq.l #8,sp
    dc96:	|  |  |        |  |      tst.w d0
    dc98:	|  |  |        |  |  /-- bne.s dc9e <fileToStack+0x2f6>
    dc9a:	|  |  |        |  |  |   clr.w d0
    dc9c:	+--|--|--------|--|--|-- bra.s dd0c <fileToStack+0x364>
            sH->last = sH->first;
    dc9e:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dca2:	|  |  |        |  |      move.l (a0),d0
    dca4:	|  |  |        |  |      movea.l 128(sp),a0
    dca8:	|  |  |        |  |      move.l d0,4(a0)
    dcac:	|  +--|--------|--|----- bra.w db1a <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dcb0:	|  |  |        |  \----> movea.l 128(sp),a0
    dcb4:	|  |  |        |         move.l 4(a0),d0
    dcb8:	|  |  |        |         addq.l #8,d0
    dcba:	|  |  |        |         move.l d0,-(sp)
    dcbc:	|  |  |        |         lea 14(sp),a0
    dcc0:	|  |  |        |         move.l a0,-(sp)
    dcc2:	|  |  |        |         jsr 140aa <addVarToStackQuick>
    dcc8:	|  |  |        |         addq.l #8,sp
    dcca:	|  |  |        |         tst.w d0
    dccc:	|  |  |        |     /-- bne.s dcd2 <fileToStack+0x32a>
    dcce:	|  |  |        |     |   clr.w d0
    dcd0:	+--|--|--------|-----|-- bra.s dd0c <fileToStack+0x364>
            sH->last = sH->last->next;
    dcd2:	|  |  |        |     \-> movea.l 128(sp),a0
    dcd6:	|  |  |        |         movea.l 4(a0),a0
    dcda:	|  |  |        |         move.l 8(a0),d0
    dcde:	|  |  |        |         movea.l 128(sp),a0
    dce2:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dce6:	|  \--|--------|-------- bra.w db1a <fileToStack+0x172>
            if (tmp == -1) break;
    dcea:	|     \--------|-------> nop
    dcec:	|              |     /-- bra.s dcf0 <fileToStack+0x348>
            if (!line) break;
    dcee:	|              \-----|-> nop
        }
    }
    Close(fp);
    dcf0:	|                    \-> move.l 100(sp),38(sp)
    dcf6:	|                        move.l 1c9c6 <DOSBase>,d0
    dcfc:	|                        movea.l d0,a6
    dcfe:	|                        move.l 38(sp),d1
    dd02:	|                        jsr -36(a6)
    dd06:	|                        move.l d0,34(sp)
    return TRUE;
    dd0a:	|                        moveq #1,d0
}
    dd0c:	\----------------------> move.l (sp)+,d2
    dd0e:	                         movea.l (sp)+,a6
    dd10:	                         lea 112(sp),sp
    dd14:	                         rts

0000dd16 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dd16:	          lea -32(sp),sp
    dd1a:	          move.l a6,-(sp)
    dd1c:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dd1e:	          move.l 44(sp),-(sp)
    dd22:	          jsr 6bc <get2bytes>
    dd28:	          addq.l #4,sp
    dd2a:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dd2e:	          move.l 32(sp),d0
    dd32:	          addq.l #1,d0
    dd34:	          move.l d0,28(sp)
    dd38:	          clr.l 24(sp)
    dd3c:	          move.l 1c9be <SysBase>,d0
    dd42:	          movea.l d0,a6
    dd44:	          move.l 28(sp),d0
    dd48:	          move.l 24(sp),d1
    dd4c:	          jsr -684(a6)
    dd50:	          move.l d0,20(sp)
    dd54:	          move.l 20(sp),d0
    dd58:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd5c:	      /-- bne.s dd62 <readStringEncoded+0x4c>
    dd5e:	      |   moveq #0,d0
    dd60:	/-----|-- bra.s ddd2 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd62:	|     \-> clr.l 36(sp)
    dd66:	|     /-- bra.s ddb8 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd68:	|  /--|-> move.l 44(sp),12(sp)
    dd6e:	|  |  |   move.l 1c9c6 <DOSBase>,d0
    dd74:	|  |  |   movea.l d0,a6
    dd76:	|  |  |   move.l 12(sp),d1
    dd7a:	|  |  |   jsr -306(a6)
    dd7e:	|  |  |   move.l d0,8(sp)
    dd82:	|  |  |   move.l 8(sp),d0
    dd86:	|  |  |   move.l d0,d1
    dd88:	|  |  |   move.b 1ca74 <encode1>,d2
    dd8e:	|  |  |   move.l 36(sp),d0
    dd92:	|  |  |   movea.l 16(sp),a0
    dd96:	|  |  |   adda.l d0,a0
    dd98:	|  |  |   move.b d1,d0
    dd9a:	|  |  |   eor.b d2,d0
    dd9c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd9e:	|  |  |   move.b 1ca74 <encode1>,d0
    dda4:	|  |  |   move.b d0,d1
    dda6:	|  |  |   move.b 1ca75 <encode2>,d0
    ddac:	|  |  |   add.b d1,d0
    ddae:	|  |  |   move.b d0,1ca74 <encode1>
    for (a = 0; a < len; a++) {
    ddb4:	|  |  |   addq.l #1,36(sp)
    ddb8:	|  |  \-> move.l 36(sp),d0
    ddbc:	|  |      cmp.l 32(sp),d0
    ddc0:	|  \----- blt.s dd68 <readStringEncoded+0x52>
    }
    s[len] = 0;
    ddc2:	|         move.l 32(sp),d0
    ddc6:	|         movea.l 16(sp),a0
    ddca:	|         adda.l d0,a0
    ddcc:	|         clr.b (a0)
    return s;
    ddce:	|         move.l 16(sp),d0
}
    ddd2:	\-------> move.l (sp)+,d2
    ddd4:	          movea.l (sp)+,a6
    ddd6:	          lea 32(sp),sp
    ddda:	          rts

0000dddc <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dddc:	             lea -104(sp),sp
    dde0:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dde4:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dde8:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ddee:	             move.l 124(sp),106(sp)
    ddf4:	             clr.l 102(sp)
    ddf8:	             clr.l 98(sp)
    ddfc:	             move.l 1c9c6 <DOSBase>,d0
    de02:	             movea.l d0,a6
    de04:	             move.l 106(sp),d1
    de08:	             move.l 102(sp),d2
    de0c:	             move.l 98(sp),d3
    de10:	             jsr -66(a6)
    de14:	             move.l d0,94(sp)
    de18:	             move.l 94(sp),d0
    de1c:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    de20:	   /-------- bra.s de64 <readTextPlain+0x88>
        tmp = FGetC(fp);
    de22:	/--|-------> move.l 124(sp),22(sp)
    de28:	|  |         move.l 1c9c6 <DOSBase>,d0
    de2e:	|  |         movea.l d0,a6
    de30:	|  |         move.l 22(sp),d1
    de34:	|  |         jsr -306(a6)
    de38:	|  |         move.l d0,18(sp)
    de3c:	|  |         move.l 18(sp),d0
    de40:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    de44:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    de4a:	|  |         cmpi.b #10,17(sp)
    de50:	|  |  /----- beq.s de5a <readTextPlain+0x7e>
    de52:	|  |  |      moveq #-1,d0
    de54:	|  |  |      cmp.l 110(sp),d0
    de58:	|  |  |  /-- bne.s de60 <readTextPlain+0x84>
            keepGoing = FALSE;
    de5a:	|  |  \--|-> clr.w 114(sp)
    de5e:	|  +-----|-- bra.s de64 <readTextPlain+0x88>
        } else {
            stringSize++;
    de60:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    de64:	|  \-------> tst.w 114(sp)
    de68:	\----------- bne.s de22 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de6a:	             tst.l 116(sp)
    de6e:	         /-- bne.s de7e <readTextPlain+0xa2>
    de70:	         |   moveq #-1,d0
    de72:	         |   cmp.l 110(sp),d0
    de76:	         +-- bne.s de7e <readTextPlain+0xa2>
        return NULL;
    de78:	         |   moveq #0,d0
    de7a:	      /--|-- bra.w df64 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de7e:	      |  \-> move.l 124(sp),86(sp)
    de84:	      |      move.l 90(sp),82(sp)
    de8a:	      |      moveq #-1,d0
    de8c:	      |      move.l d0,78(sp)
    de90:	      |      move.l 1c9c6 <DOSBase>,d0
    de96:	      |      movea.l d0,a6
    de98:	      |      move.l 86(sp),d1
    de9c:	      |      move.l 82(sp),d2
    dea0:	      |      move.l 78(sp),d3
    dea4:	      |      jsr -66(a6)
    dea8:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    deac:	      |      move.l 116(sp),d0
    deb0:	      |      addq.l #1,d0
    deb2:	      |      move.l d0,70(sp)
    deb6:	      |      clr.l 66(sp)
    deba:	      |      move.l 1c9be <SysBase>,d0
    dec0:	      |      movea.l d0,a6
    dec2:	      |      move.l 70(sp),d0
    dec6:	      |      move.l 66(sp),d1
    deca:	      |      jsr -684(a6)
    dece:	      |      move.l d0,62(sp)
    ded2:	      |      move.l 62(sp),d0
    ded6:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    deda:	      |  /-- bne.s dee2 <readTextPlain+0x106>
    dedc:	      |  |   moveq #0,d0
    dede:	      +--|-- bra.w df64 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dee2:	      |  \-> move.l 124(sp),54(sp)
    dee8:	      |      move.l 58(sp),50(sp)
    deee:	      |      moveq #1,d0
    def0:	      |      move.l d0,46(sp)
    def4:	      |      move.l 116(sp),42(sp)
    defa:	      |      move.l 1c9c6 <DOSBase>,d0
    df00:	      |      movea.l d0,a6
    df02:	      |      move.l 54(sp),d1
    df06:	      |      move.l 50(sp),d2
    df0a:	      |      move.l 46(sp),d3
    df0e:	      |      move.l 42(sp),d4
    df12:	      |      jsr -324(a6)
    df16:	      |      move.l d0,38(sp)
    df1a:	      |      move.l 38(sp),d0
    df1e:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    df22:	      |      move.l 34(sp),d0
    df26:	      |      cmp.l 116(sp),d0
    df2a:	      |  /-- beq.s df3a <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    df2c:	      |  |   pea 196f3 <PutChar+0x19e1>
    df32:	      |  |   jsr 17248 <KPrintF>
    df38:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    df3a:	      |  \-> move.l 124(sp),30(sp)
    df40:	      |      move.l 1c9c6 <DOSBase>,d0
    df46:	      |      movea.l d0,a6
    df48:	      |      move.l 30(sp),d1
    df4c:	      |      jsr -306(a6)
    df50:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    df54:	      |      move.l 116(sp),d0
    df58:	      |      movea.l 58(sp),a0
    df5c:	      |      adda.l d0,a0
    df5e:	      |      clr.b (a0)
    }

    return reply;
    df60:	      |      move.l 58(sp),d0
}
    df64:	      \----> movem.l (sp)+,d2-d4/a6
    df68:	             lea 104(sp),sp
    df6c:	             rts

0000df6e <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df6e:	                      lea -144(sp),sp
    df72:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df76:	                      move.l 160(sp),148(sp)
    df7c:	                      move.l #1006,144(sp)
    df84:	                      move.l 1c9c6 <DOSBase>,d0
    df8a:	                      movea.l d0,a6
    df8c:	                      move.l 148(sp),d1
    df90:	                      move.l 144(sp),d2
    df94:	                      jsr -30(a6)
    df98:	                      move.l d0,140(sp)
    df9c:	                      move.l 140(sp),d0
    dfa0:	                      move.l d0,136(sp)

    if (!fp) {
    dfa4:	                  /-- bne.s dfbe <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    dfa6:	                  |   move.l 160(sp),-(sp)
    dfaa:	                  |   pea 19714 <PutChar+0x1a02>
    dfb0:	                  |   jsr 17248 <KPrintF>
    dfb6:	                  |   addq.l #8,sp
        return FALSE;
    dfb8:	                  |   clr.w d0
    dfba:	/-----------------|-- bra.w e27a <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dfbe:	|                 \-> movea.l 164(sp),a0
    dfc2:	|                     movea.l 4(a0),a0
    dfc6:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dfca:	|                     move.w 1ca76 <saveEncoding>,d0
    dfd0:	|                     move.l d0,d0
    dfd2:	|                     move.b d0,1ca74 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dfd8:	|                     move.w 1ca76 <saveEncoding>,d0
    dfde:	|                     lsr.w #8,d0
    dfe0:	|                     move.l d0,d0
    dfe2:	|                     move.b d0,1ca75 <encode2>

    if (saveEncoding) {
    dfe8:	|                     move.w 1ca76 <saveEncoding>,d0
    dfee:	|                 /-- beq.s e040 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dff0:	|                 |   move.l 136(sp),116(sp)
    dff6:	|                 |   move.l #103854,112(sp)
    dffe:	|                 |   moveq #99,d0
    e000:	|                 |   not.b d0
    e002:	|                 |   add.l sp,d0
    e004:	|                 |   addi.l #-144,d0
    e00a:	|                 |   move.l d0,108(sp)
    e00e:	|                 |   move.l 1c9c6 <DOSBase>,d0
    e014:	|                 |   movea.l d0,a6
    e016:	|                 |   move.l 116(sp),d1
    e01a:	|                 |   move.l 112(sp),d2
    e01e:	|                 |   move.l 108(sp),d3
    e022:	|                 |   jsr -354(a6)
    e026:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e02a:	|                 |   move.l 136(sp),-(sp)
    e02e:	|                 |   pea 1962d <PutChar+0x191b>
    e034:	|                 |   jsr e284 <writeStringEncoded>
    e03a:	|                 |   addq.l #8,sp
    e03c:	|  /--------------|-- bra.w e252 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e040:	|  |              \-> move.l 136(sp),132(sp)
    e046:	|  |                  move.l #103880,128(sp)
    e04e:	|  |                  moveq #99,d1
    e050:	|  |                  not.b d1
    e052:	|  |                  add.l sp,d1
    e054:	|  |                  addi.l #-144,d1
    e05a:	|  |                  move.l d1,124(sp)
    e05e:	|  |                  move.l 1c9c6 <DOSBase>,d0
    e064:	|  |                  movea.l d0,a6
    e066:	|  |                  move.l 132(sp),d1
    e06a:	|  |                  move.l 128(sp),d2
    e06e:	|  |                  move.l 124(sp),d3
    e072:	|  |                  jsr -354(a6)
    e076:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e07a:	|  +----------------- bra.w e252 <stackToFile+0x2e4>
        if (saveEncoding) {
    e07e:	|  |  /-------------> move.w 1ca76 <saveEncoding>,d0
    e084:	|  |  |     /-------- beq.w e1d6 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e088:	|  |  |     |         movea.l 152(sp),a0
    e08c:	|  |  |     |         move.l (a0),d0
    e08e:	|  |  |     |         moveq #1,d1
    e090:	|  |  |     |         cmp.l d0,d1
    e092:	|  |  |     |     /-- beq.s e0e2 <stackToFile+0x174>
    e094:	|  |  |     |     |   moveq #3,d1
    e096:	|  |  |     |     |   cmp.l d0,d1
    e098:	|  |  |     |  /--|-- bne.w e1a4 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e09c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e0a2:	|  |  |     |  |  |   move.b 1ca74 <encode1>,d0
    e0a8:	|  |  |     |  |  |   ext.w d0
    e0aa:	|  |  |     |  |  |   movea.w d0,a0
    e0ac:	|  |  |     |  |  |   move.l a0,72(sp)
    e0b0:	|  |  |     |  |  |   move.l 1c9c6 <DOSBase>,d0
    e0b6:	|  |  |     |  |  |   movea.l d0,a6
    e0b8:	|  |  |     |  |  |   move.l 76(sp),d1
    e0bc:	|  |  |     |  |  |   move.l 72(sp),d2
    e0c0:	|  |  |     |  |  |   jsr -312(a6)
    e0c4:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e0c8:	|  |  |     |  |  |   movea.l 152(sp),a0
    e0cc:	|  |  |     |  |  |   move.l 4(a0),d0
    e0d0:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e0d4:	|  |  |     |  |  |   move.l d0,-(sp)
    e0d6:	|  |  |     |  |  |   jsr e284 <writeStringEncoded>
    e0dc:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e0de:	|  |  |  /--|--|--|-- bra.w e248 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e0e2:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e0e6:	|  |  |  |  |  |      move.l 4(a0),d0
    e0ea:	|  |  |  |  |  |  /-- bmi.s e15a <stackToFile+0x1ec>
    e0ec:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0f0:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e0f4:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e0fa:	|  |  |  |  |  |  +-- bgt.s e15a <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e0fc:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e102:	|  |  |  |  |  |  |   move.b 1ca74 <encode1>,d0
    e108:	|  |  |  |  |  |  |   eori.b #2,d0
    e10c:	|  |  |  |  |  |  |   ext.w d0
    e10e:	|  |  |  |  |  |  |   movea.w d0,a0
    e110:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e114:	|  |  |  |  |  |  |   move.l 1c9c6 <DOSBase>,d0
    e11a:	|  |  |  |  |  |  |   movea.l d0,a6
    e11c:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e120:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e124:	|  |  |  |  |  |  |   jsr -312(a6)
    e128:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e12c:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e132:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e136:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e13c:	|  |  |  |  |  |  |   move.l 1c9c6 <DOSBase>,d0
    e142:	|  |  |  |  |  |  |   movea.l d0,a6
    e144:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e148:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e14c:	|  |  |  |  |  |  |   jsr -312(a6)
    e150:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e154:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e156:	|  |  |  +--|--|--|-- bra.w e248 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e15a:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e160:	|  |  |  |  |  |      move.b 1ca74 <encode1>,d0
    e166:	|  |  |  |  |  |      eori.b #1,d0
    e16a:	|  |  |  |  |  |      ext.w d0
    e16c:	|  |  |  |  |  |      movea.w d0,a0
    e16e:	|  |  |  |  |  |      move.l a0,36(sp)
    e172:	|  |  |  |  |  |      move.l 1c9c6 <DOSBase>,d0
    e178:	|  |  |  |  |  |      movea.l d0,a6
    e17a:	|  |  |  |  |  |      move.l 40(sp),d1
    e17e:	|  |  |  |  |  |      move.l 36(sp),d2
    e182:	|  |  |  |  |  |      jsr -312(a6)
    e186:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e18a:	|  |  |  |  |  |      movea.l 152(sp),a0
    e18e:	|  |  |  |  |  |      move.l 4(a0),d0
    e192:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e196:	|  |  |  |  |  |      move.l d0,-(sp)
    e198:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e19e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e1a0:	|  |  |  +--|--|----- bra.w e248 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e1a4:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e1a8:	|  |  |  |  |         pea 19726 <PutChar+0x1a14>
    e1ae:	|  |  |  |  |         jsr 17248 <KPrintF>
    e1b4:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e1b6:	|  |  |  |  |         move.l 136(sp),28(sp)
    e1bc:	|  |  |  |  |         move.l 1c9c6 <DOSBase>,d0
    e1c2:	|  |  |  |  |         movea.l d0,a6
    e1c4:	|  |  |  |  |         move.l 28(sp),d1
    e1c8:	|  |  |  |  |         jsr -36(a6)
    e1cc:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e1d0:	|  |  |  |  |         clr.w d0
    e1d2:	+--|--|--|--|-------- bra.w e27a <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e1d6:	|  |  |  |  \-------> move.l 152(sp),d0
    e1da:	|  |  |  |            move.l d0,-(sp)
    e1dc:	|  |  |  |            jsr 14dbe <getTextFromAnyVar>
    e1e2:	|  |  |  |            addq.l #4,sp
    e1e4:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e1e8:	|  |  |  |     /----- beq.s e25c <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e1ea:	|  |  |  |     |      movea.l 100(sp),a0
    e1ee:	|  |  |  |     |      move.b (a0),d0
    e1f0:	|  |  |  |     |      ext.w d0
    e1f2:	|  |  |  |     |      movea.w d0,a0
    e1f4:	|  |  |  |     |      move.l a0,12(sp)
    e1f8:	|  |  |  |     |      move.l 136(sp),96(sp)
    e1fe:	|  |  |  |     |      move.l #104322,92(sp)
    e206:	|  |  |  |     |      moveq #99,d0
    e208:	|  |  |  |     |      not.b d0
    e20a:	|  |  |  |     |      add.l sp,d0
    e20c:	|  |  |  |     |      addi.l #-144,d0
    e212:	|  |  |  |     |      move.l d0,88(sp)
    e216:	|  |  |  |     |      move.l 1c9c6 <DOSBase>,d0
    e21c:	|  |  |  |     |      movea.l d0,a6
    e21e:	|  |  |  |     |      move.l 96(sp),d1
    e222:	|  |  |  |     |      move.l 92(sp),d2
    e226:	|  |  |  |     |      move.l 88(sp),d3
    e22a:	|  |  |  |     |      jsr -354(a6)
    e22e:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e232:	|  |  |  |     |      move.l 100(sp),80(sp)
    e238:	|  |  |  |     |      move.l 1c9be <SysBase>,d0
    e23e:	|  |  |  |     |      movea.l d0,a6
    e240:	|  |  |  |     |      movea.l 80(sp),a1
    e244:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e248:	|  |  |  \-----|----> movea.l 152(sp),a0
    e24c:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e252:	|  \--|--------|----> tst.l 152(sp)
    e256:	|     \--------|----- bne.w e07e <stackToFile+0x110>
    e25a:	|              |  /-- bra.s e25e <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e25c:	|              \--|-> nop
    }
    Close(fp);
    e25e:	|                 \-> move.l 136(sp),20(sp)
    e264:	|                     move.l 1c9c6 <DOSBase>,d0
    e26a:	|                     movea.l d0,a6
    e26c:	|                     move.l 20(sp),d1
    e270:	|                     jsr -36(a6)
    e274:	|                     move.l d0,16(sp)
    return TRUE;
    e278:	|                     moveq #1,d0
}
    e27a:	\-------------------> movem.l (sp)+,d2-d3/a6
    e27e:	                      lea 144(sp),sp
    e282:	                      rts

0000e284 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e284:	       lea -20(sp),sp
    e288:	       move.l a6,-(sp)
    e28a:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e28c:	       move.l 32(sp),-(sp)
    e290:	       jsr 13cd4 <strlen>
    e296:	       addq.l #4,sp
    e298:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e29c:	       move.l 36(sp),-(sp)
    e2a0:	       move.l 24(sp),-(sp)
    e2a4:	       jsr 8d0 <put2bytes>
    e2aa:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e2ac:	       clr.l 24(sp)
    e2b0:	   /-- bra.s e306 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e2b2:	/--|-> move.l 36(sp),16(sp)
    e2b8:	|  |   move.l 24(sp),d0
    e2bc:	|  |   movea.l 32(sp),a0
    e2c0:	|  |   adda.l d0,a0
    e2c2:	|  |   move.b (a0),d1
    e2c4:	|  |   move.b 1ca74 <encode1>,d0
    e2ca:	|  |   eor.b d1,d0
    e2cc:	|  |   ext.w d0
    e2ce:	|  |   movea.w d0,a0
    e2d0:	|  |   move.l a0,12(sp)
    e2d4:	|  |   move.l 1c9c6 <DOSBase>,d0
    e2da:	|  |   movea.l d0,a6
    e2dc:	|  |   move.l 16(sp),d1
    e2e0:	|  |   move.l 12(sp),d2
    e2e4:	|  |   jsr -312(a6)
    e2e8:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e2ec:	|  |   move.b 1ca74 <encode1>,d0
    e2f2:	|  |   move.b d0,d1
    e2f4:	|  |   move.b 1ca75 <encode2>,d0
    e2fa:	|  |   add.b d1,d0
    e2fc:	|  |   move.b d0,1ca74 <encode1>
	for (a = 0; a < len; a ++) {
    e302:	|  |   addq.l #1,24(sp)
    e306:	|  \-> move.l 24(sp),d0
    e30a:	|      cmp.l 20(sp),d0
    e30e:	\----- blt.s e2b2 <writeStringEncoded+0x2e>
	}
}
    e310:	       nop
    e312:	       nop
    e314:	       move.l (sp)+,d2
    e316:	       movea.l (sp)+,a6
    e318:	       lea 20(sp),sp
    e31c:	       rts

0000e31e <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e31e:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e320:	                   tst.l 8(sp)
    e324:	               /-- bne.s e32a <failSecurityCheck+0xc>
    e326:	               |   moveq #1,d0
    e328:	/--------------|-- bra.s e3a8 <failSecurityCheck+0x8a>

	int a = 0;
    e32a:	|              \-> clr.l (sp)

	while (fn[a]) {
    e32c:	|     /----------- bra.s e39a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e32e:	|  /--|----------> move.l (sp),d0
    e330:	|  |  |            movea.l 8(sp),a0
    e334:	|  |  |            adda.l d0,a0
    e336:	|  |  |            move.b (a0),d0
    e338:	|  |  |            ext.w d0
    e33a:	|  |  |            movea.w d0,a0
    e33c:	|  |  |            moveq #124,d0
    e33e:	|  |  |            cmp.l a0,d0
    e340:	|  |  |     /----- beq.s e382 <failSecurityCheck+0x64>
    e342:	|  |  |     |      moveq #124,d1
    e344:	|  |  |     |      cmp.l a0,d1
    e346:	|  |  |  /--|----- blt.s e398 <failSecurityCheck+0x7a>
    e348:	|  |  |  |  |      moveq #92,d0
    e34a:	|  |  |  |  |      cmp.l a0,d0
    e34c:	|  |  |  |  +----- beq.s e382 <failSecurityCheck+0x64>
    e34e:	|  |  |  |  |      moveq #92,d1
    e350:	|  |  |  |  |      cmp.l a0,d1
    e352:	|  |  |  +--|----- blt.s e398 <failSecurityCheck+0x7a>
    e354:	|  |  |  |  |      moveq #60,d0
    e356:	|  |  |  |  |      cmp.l a0,d0
    e358:	|  |  |  |  |  /-- blt.s e378 <failSecurityCheck+0x5a>
    e35a:	|  |  |  |  |  |   moveq #34,d1
    e35c:	|  |  |  |  |  |   cmp.l a0,d1
    e35e:	|  |  |  +--|--|-- bgt.s e398 <failSecurityCheck+0x7a>
    e360:	|  |  |  |  |  |   moveq #-34,d1
    e362:	|  |  |  |  |  |   add.l a0,d1
    e364:	|  |  |  |  |  |   move.l #83894529,d0
    e36a:	|  |  |  |  |  |   lsr.l d1,d0
    e36c:	|  |  |  |  |  |   moveq #1,d1
    e36e:	|  |  |  |  |  |   and.l d1,d0
    e370:	|  |  |  |  |  |   sne d0
    e372:	|  |  |  |  |  |   neg.b d0
    e374:	|  |  |  |  +--|-- bne.s e382 <failSecurityCheck+0x64>
    e376:	|  |  |  +--|--|-- bra.s e398 <failSecurityCheck+0x7a>
    e378:	|  |  |  |  |  \-> lea -62(a0),a0
    e37c:	|  |  |  |  |      moveq #1,d0
    e37e:	|  |  |  |  |      cmp.l a0,d0
    e380:	|  |  |  +--|----- bcs.s e398 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e382:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e386:	|  |  |  |         pea 19786 <PutChar+0x1a74>
    e38c:	|  |  |  |         jsr 17248 <KPrintF>
    e392:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e394:	|  |  |  |         moveq #1,d0
    e396:	+--|--|--|-------- bra.s e3a8 <failSecurityCheck+0x8a>
		}
		a++;
    e398:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e39a:	|  |  \----------> move.l (sp),d0
    e39c:	|  |               movea.l 8(sp),a0
    e3a0:	|  |               adda.l d0,a0
    e3a2:	|  |               move.b (a0),d0
    e3a4:	|  \-------------- bne.s e32e <failSecurityCheck+0x10>
	}
	return FALSE;
    e3a6:	|                  clr.w d0
}
    e3a8:	\----------------> addq.l #4,sp
    e3aa:	                   rts

0000e3ac <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e3ac:	             lea -24(sp),sp
    e3b0:	             move.l a6,-(sp)
    e3b2:	             move.l 40(sp),d0
    e3b6:	             move.w d0,d0
    e3b8:	             move.w d0,6(sp)
	int fileNum = -1;
    e3bc:	             moveq #-1,d0
    e3be:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e3c2:	             jsr 6216 <killSpeechTimers>

	switch (numParams) {
    e3c8:	             moveq #2,d0
    e3ca:	             cmp.l 32(sp),d0
    e3ce:	      /----- beq.s e412 <sayCore+0x66>
    e3d0:	      |      moveq #3,d0
    e3d2:	      |      cmp.l 32(sp),d0
    e3d6:	/-----|----- bne.w e4f4 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e3da:	|     |      movea.l 36(sp),a0
    e3de:	|     |      move.l 24(a0),d0
    e3e2:	|     |      move.l d0,-(sp)
    e3e4:	|     |      pea 5 <_start+0x5>
    e3e8:	|     |      lea 20(sp),a0
    e3ec:	|     |      move.l a0,-(sp)
    e3ee:	|     |      jsr 147e8 <getValueType>
    e3f4:	|     |      lea 12(sp),sp
    e3f8:	|     |      tst.w d0
    e3fa:	|     |  /-- bne.s e402 <sayCore+0x56>
    e3fc:	|     |  |   moveq #1,d0
    e3fe:	|  /--|--|-- bra.w e504 <sayCore+0x158>
			trimStack (&fun -> stack);
    e402:	|  |  |  \-> moveq #24,d0
    e404:	|  |  |      add.l 36(sp),d0
    e408:	|  |  |      move.l d0,-(sp)
    e40a:	|  |  |      jsr 1516c <trimStack>
    e410:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e412:	|  |  \----> movea.l 36(sp),a0
    e416:	|  |         move.l 24(a0),d0
    e41a:	|  |         move.l d0,-(sp)
    e41c:	|  |         jsr 14dbe <getTextFromAnyVar>
    e422:	|  |         addq.l #4,sp
    e424:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e428:	|  |     /-- bne.s e430 <sayCore+0x84>
    e42a:	|  |     |   moveq #1,d0
    e42c:	|  +-----|-- bra.w e504 <sayCore+0x158>
			trimStack (&fun -> stack);
    e430:	|  |     \-> moveq #24,d0
    e432:	|  |         add.l 36(sp),d0
    e436:	|  |         move.l d0,-(sp)
    e438:	|  |         jsr 1516c <trimStack>
    e43e:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e440:	|  |         movea.l 36(sp),a0
    e444:	|  |         move.l 24(a0),d0
    e448:	|  |         move.l d0,-(sp)
    e44a:	|  |         pea 7 <_start+0x7>
    e44e:	|  |         lea 16(sp),a0
    e452:	|  |         move.l a0,-(sp)
    e454:	|  |         jsr 147e8 <getValueType>
    e45a:	|  |         lea 12(sp),sp
    e45e:	|  |         tst.w d0
    e460:	|  |     /-- bne.s e468 <sayCore+0xbc>
    e462:	|  |     |   moveq #1,d0
    e464:	|  +-----|-- bra.w e504 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e468:	|  |     \-> movea.l 36(sp),a0
    e46c:	|  |         move.l 24(a0),d0
    e470:	|  |         move.l d0,-(sp)
    e472:	|  |         pea 7 <_start+0x7>
    e476:	|  |         lea 16(sp),a0
    e47a:	|  |         move.l a0,-(sp)
    e47c:	|  |         jsr 147e8 <getValueType>
    e482:	|  |         lea 12(sp),sp
    e486:	|  |         tst.w d0
    e488:	|  |     /-- bne.s e48e <sayCore+0xe2>
    e48a:	|  |     |   moveq #1,d0
    e48c:	|  +-----|-- bra.s e504 <sayCore+0x158>
			trimStack (&fun -> stack);
    e48e:	|  |     \-> moveq #24,d0
    e490:	|  |         add.l 36(sp),d0
    e494:	|  |         move.l d0,-(sp)
    e496:	|  |         jsr 1516c <trimStack>
    e49c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e49e:	|  |         movea.w 6(sp),a0
    e4a2:	|  |         move.l 12(sp),d1
    e4a6:	|  |         move.l 8(sp),d0
    e4aa:	|  |         move.l a0,-(sp)
    e4ac:	|  |         move.l d1,-(sp)
    e4ae:	|  |         move.l d0,-(sp)
    e4b0:	|  |         move.l 36(sp),-(sp)
    e4b4:	|  |         jsr 81d0 <wrapSpeech>
    e4ba:	|  |         lea 16(sp),sp
    e4be:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e4c2:	|  |         movea.l 36(sp),a0
    e4c6:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e4cc:	|  |         movea.l 36(sp),a0
    e4d0:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e4d6:	|  |         move.l 24(sp),16(sp)
    e4dc:	|  |         move.l 1c9be <SysBase>,d0
    e4e2:	|  |         movea.l d0,a6
    e4e4:	|  |         movea.l 16(sp),a1
    e4e8:	|  |         jsr -690(a6)
			newText = NULL;
    e4ec:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e4f0:	|  |         moveq #0,d0
    e4f2:	|  +-------- bra.s e504 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e4f4:	\--|-------> pea 1980c <PutChar+0x1afa>
    e4fa:	   |         jsr 17248 <KPrintF>
    e500:	   |         addq.l #4,sp
	return BR_ERROR;
    e502:	   |         moveq #1,d0
}
    e504:	   \-------> movea.l (sp)+,a6
    e506:	             lea 24(sp),sp
    e50a:	             rts

0000e50c <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e50c:	pea 1 <_start+0x1>
    e510:	move.l 12(sp),-(sp)
    e514:	move.l 12(sp),-(sp)
    e518:	jsr e3ac <sayCore>
    e51e:	lea 12(sp),sp
}
    e522:	rts

0000e524 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e524:	clr.l -(sp)
    e526:	move.l 12(sp),-(sp)
    e52a:	move.l 12(sp),-(sp)
    e52e:	jsr e3ac <sayCore>
    e534:	lea 12(sp),sp
}
    e538:	rts

0000e53a <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e53a:	jsr 151b4 <freeze>
	freezeSubs (); 
    e540:	jsr 5806 <freezeSubs>
	fun -> freezerLevel = 0;
    e546:	movea.l 8(sp),a0
    e54a:	clr.b 56(a0)
	return BR_CONTINUE;
    e54e:	moveq #2,d0
}
    e550:	rts

0000e552 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e552:	jsr 153b0 <unfreeze>
	unfreezeSubs (); 
    e558:	jsr 6c58 <unfreezeSubs>
	return BR_CONTINUE;
    e55e:	moveq #2,d0
}
    e560:	rts

0000e562 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e562:	jsr 1538c <howFrozen>
    e568:	move.l d0,d1
    e56a:	moveq #28,d0
    e56c:	add.l 8(sp),d0
    e570:	move.l d1,-(sp)
    e572:	pea 1 <_start+0x1>
    e576:	move.l d0,-(sp)
    e578:	jsr 150da <setVariable>
    e57e:	lea 12(sp),sp
	return BR_CONTINUE; 
    e582:	moveq #2,d0
}
    e584:	rts

0000e586 <builtIn_setCursor>:

builtIn(setCursor)
{
    e586:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e588:	movea.l 12(sp),a0
    e58c:	move.l 24(a0),d0
    e590:	move.l d0,-(sp)
    e592:	jsr 14cc0 <getAnimationFromVar>
    e598:	addq.l #4,sp
    e59a:	move.l d0,(sp)
	pickAnimCursor (aa);
    e59c:	move.l (sp),-(sp)
    e59e:	jsr d6c <pickAnimCursor>
    e5a4:	addq.l #4,sp
	trimStack (&fun -> stack);
    e5a6:	moveq #24,d0
    e5a8:	add.l 12(sp),d0
    e5ac:	move.l d0,-(sp)
    e5ae:	jsr 1516c <trimStack>
    e5b4:	addq.l #4,sp
	return BR_CONTINUE;
    e5b6:	moveq #2,d0
}
    e5b8:	addq.l #4,sp
    e5ba:	rts

0000e5bc <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e5bc:	move.l 1c97a <input+0xa>,d1
    e5c2:	move.l 1ca78 <cameraX>,d0
    e5c8:	add.l d0,d1
    e5ca:	moveq #28,d0
    e5cc:	add.l 8(sp),d0
    e5d0:	move.l d1,-(sp)
    e5d2:	pea 1 <_start+0x1>
    e5d6:	move.l d0,-(sp)
    e5d8:	jsr 150da <setVariable>
    e5de:	lea 12(sp),sp
	return BR_CONTINUE;
    e5e2:	moveq #2,d0
}
    e5e4:	rts

0000e5e6 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e5e6:	move.l 1c97e <input+0xe>,d1
    e5ec:	move.l 1ca7c <cameraY>,d0
    e5f2:	add.l d0,d1
    e5f4:	moveq #28,d0
    e5f6:	add.l 8(sp),d0
    e5fa:	move.l d1,-(sp)
    e5fc:	pea 1 <_start+0x1>
    e600:	move.l d0,-(sp)
    e602:	jsr 150da <setVariable>
    e608:	lea 12(sp),sp
	return BR_CONTINUE;
    e60c:	moveq #2,d0
}
    e60e:	rts

0000e610 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e610:	move.l 1c97a <input+0xa>,d0
    e616:	move.l d0,-(sp)
    e618:	jsr 1767a <__floatsisf>
    e61e:	addq.l #4,sp
    e620:	move.l d0,d1
    e622:	move.l 1c35c <cameraZoom>,d0
    e628:	move.l d0,-(sp)
    e62a:	move.l d1,-(sp)
    e62c:	jsr 1772c <__mulsf3>
    e632:	addq.l #8,sp
    e634:	move.l d0,-(sp)
    e636:	jsr 17612 <__fixsfsi>
    e63c:	addq.l #4,sp
    e63e:	move.l d0,d1
    e640:	moveq #28,d0
    e642:	add.l 8(sp),d0
    e646:	move.l d1,-(sp)
    e648:	pea 1 <_start+0x1>
    e64c:	move.l d0,-(sp)
    e64e:	jsr 150da <setVariable>
    e654:	lea 12(sp),sp
	return BR_CONTINUE;
    e658:	moveq #2,d0
}
    e65a:	rts

0000e65c <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e65c:	move.l 1c97e <input+0xe>,d0
    e662:	move.l d0,-(sp)
    e664:	jsr 1767a <__floatsisf>
    e66a:	addq.l #4,sp
    e66c:	move.l d0,d1
    e66e:	move.l 1c35c <cameraZoom>,d0
    e674:	move.l d0,-(sp)
    e676:	move.l d1,-(sp)
    e678:	jsr 1772c <__mulsf3>
    e67e:	addq.l #8,sp
    e680:	move.l d0,-(sp)
    e682:	jsr 17612 <__fixsfsi>
    e688:	addq.l #4,sp
    e68a:	move.l d0,d1
    e68c:	moveq #28,d0
    e68e:	add.l 8(sp),d0
    e692:	move.l d1,-(sp)
    e694:	pea 1 <_start+0x1>
    e698:	move.l d0,-(sp)
    e69a:	jsr 150da <setVariable>
    e6a0:	lea 12(sp),sp
	return BR_CONTINUE;
    e6a4:	moveq #2,d0
}
    e6a6:	rts

0000e6a8 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e6a8:	jsr 7c84 <statusBarText>
    e6ae:	move.l d0,d1
    e6b0:	moveq #28,d0
    e6b2:	add.l 8(sp),d0
    e6b6:	move.l d1,-(sp)
    e6b8:	move.l d0,-(sp)
    e6ba:	jsr 14a0a <makeTextVar>
    e6c0:	addq.l #8,sp
	return BR_CONTINUE;
    e6c2:	moveq #2,d0
}
    e6c4:	rts

0000e6c6 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e6c6:	       lea -20(sp),sp
    e6ca:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e6cc:	       movea.l 32(sp),a0
    e6d0:	       move.l 24(a0),d0
    e6d4:	       move.l d0,-(sp)
    e6d6:	       jsr 14dbe <getTextFromAnyVar>
    e6dc:	       addq.l #4,sp
    e6de:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e6e2:	   /-- bne.s e6ea <builtIn_getMatchingFiles+0x24>
    e6e4:	   |   moveq #1,d0
    e6e6:	/--|-- bra.w e7ac <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e6ea:	|  \-> moveq #24,d0
    e6ec:	|      add.l 32(sp),d0
    e6f0:	|      move.l d0,-(sp)
    e6f2:	|      jsr 1516c <trimStack>
    e6f8:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e6fa:	|      moveq #28,d0
    e6fc:	|      add.l 32(sp),d0
    e700:	|      move.l d0,-(sp)
    e702:	|      jsr 14a36 <unlinkVar>
    e708:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e70a:	|      movea.l 32(sp),a0
    e70e:	|      moveq #6,d0
    e710:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e714:	|      moveq #12,d0
    e716:	|      move.l d0,16(sp)
    e71a:	|      clr.l 12(sp)
    e71e:	|      move.l 1c9be <SysBase>,d0
    e724:	|      movea.l d0,a6
    e726:	|      move.l 16(sp),d0
    e72a:	|      move.l 12(sp),d1
    e72e:	|      jsr -684(a6)
    e732:	|      move.l d0,8(sp)
    e736:	|      move.l 8(sp),d0
    e73a:	|      movea.l 32(sp),a0
    e73e:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e742:	|      moveq #32,d0
    e744:	|      add.l 32(sp),d0
    e748:	|  /-- bne.s e74e <builtIn_getMatchingFiles+0x88>
    e74a:	|  |   moveq #1,d0
    e74c:	+--|-- bra.s e7ac <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e74e:	|  \-> movea.l 32(sp),a0
    e752:	|      movea.l 32(a0),a0
    e756:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e758:	|      movea.l 32(sp),a0
    e75c:	|      movea.l 32(a0),a0
    e760:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e764:	|      movea.l 32(sp),a0
    e768:	|      movea.l 32(a0),a0
    e76c:	|      moveq #1,d0
    e76e:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e772:	|      movea.l 32(sp),a0
    e776:	|      move.l 32(a0),d0
    e77a:	|      move.l 20(sp),-(sp)
    e77e:	|      move.l d0,-(sp)
    e780:	|      jsr 145a4 <getSavedGamesStack>
    e786:	|      addq.l #8,sp
    e788:	|      tst.w d0
    e78a:	|  /-- bne.s e790 <builtIn_getMatchingFiles+0xca>
    e78c:	|  |   moveq #1,d0
    e78e:	+--|-- bra.s e7ac <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e790:	|  \-> move.l 20(sp),4(sp)
    e796:	|      move.l 1c9be <SysBase>,d0
    e79c:	|      movea.l d0,a6
    e79e:	|      movea.l 4(sp),a1
    e7a2:	|      jsr -690(a6)
	newText = NULL;
    e7a6:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e7aa:	|      moveq #2,d0
}
    e7ac:	\----> movea.l (sp)+,a6
    e7ae:	       lea 20(sp),sp
    e7b2:	       rts

0000e7b4 <builtIn_saveGame>:

builtIn(saveGame)
{
    e7b4:	       lea -12(sp),sp
    e7b8:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7ba:	       movea.l 24(sp),a0
    e7be:	       move.l 24(a0),d0
    e7c2:	       move.l d0,-(sp)
    e7c4:	       jsr 14dbe <getTextFromAnyVar>
    e7ca:	       addq.l #4,sp
    e7cc:	       move.l d0,1c98a <loadNow>
    trimStack(&fun->stack);
    e7d2:	       moveq #24,d0
    e7d4:	       add.l 24(sp),d0
    e7d8:	       move.l d0,-(sp)
    e7da:	       jsr 1516c <trimStack>
    e7e0:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e7e2:	       move.l 1c98a <loadNow>,d0
    e7e8:	       move.l d0,-(sp)
    e7ea:	       jsr 2fe <encodeFilename>
    e7f0:	       addq.l #4,sp
    e7f2:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e7f6:	       move.l 1c98a <loadNow>,8(sp)
    e7fe:	       move.l 1c9be <SysBase>,d0
    e804:	       movea.l d0,a6
    e806:	       movea.l 8(sp),a1
    e80a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e80e:	       move.l 12(sp),-(sp)
    e812:	       jsr e31e <failSecurityCheck>
    e818:	       addq.l #4,sp
    e81a:	       tst.w d0
    e81c:	   /-- beq.s e822 <builtIn_saveGame+0x6e>
    e81e:	   |   moveq #1,d0
    e820:	/--|-- bra.s e872 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e822:	|  \-> move.l 12(sp),-(sp)
    e826:	|      pea 1983a <PutChar+0x1b28>
    e82c:	|      jsr 13d14 <joinStrings>
    e832:	|      addq.l #8,sp
    e834:	|      move.l d0,1c98a <loadNow>
    FreeVec(aaaaa);
    e83a:	|      move.l 12(sp),4(sp)
    e840:	|      move.l 1c9be <SysBase>,d0
    e846:	|      movea.l d0,a6
    e848:	|      movea.l 4(sp),a1
    e84c:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e850:	|      moveq #28,d0
    e852:	|      add.l 24(sp),d0
    e856:	|      clr.l -(sp)
    e858:	|      pea 1 <_start+0x1>
    e85c:	|      move.l d0,-(sp)
    e85e:	|      jsr 150da <setVariable>
    e864:	|      lea 12(sp),sp
    saverFunc = fun;
    e868:	|      move.l 24(sp),1ca88 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e870:	|      moveq #0,d0
}
    e872:	\----> movea.l (sp)+,a6
    e874:	       lea 12(sp),sp
    e878:	       rts

0000e87a <builtIn_fileExists>:

builtIn(fileExists)
{
    e87a:	       lea -36(sp),sp
    e87e:	       move.l a6,-(sp)
    e880:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e882:	       movea.l 52(sp),a0
    e886:	       move.l 24(a0),d0
    e88a:	       move.l d0,-(sp)
    e88c:	       jsr 14dbe <getTextFromAnyVar>
    e892:	       addq.l #4,sp
    e894:	       move.l d0,1c98a <loadNow>
    trimStack(&fun->stack);
    e89a:	       moveq #24,d0
    e89c:	       add.l 52(sp),d0
    e8a0:	       move.l d0,-(sp)
    e8a2:	       jsr 1516c <trimStack>
    e8a8:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e8aa:	       move.l 1c98a <loadNow>,d0
    e8b0:	       move.l d0,-(sp)
    e8b2:	       jsr 2fe <encodeFilename>
    e8b8:	       addq.l #4,sp
    e8ba:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e8be:	       move.l 1c98a <loadNow>,36(sp)
    e8c6:	       move.l 1c9be <SysBase>,d0
    e8cc:	       movea.l d0,a6
    e8ce:	       movea.l 36(sp),a1
    e8d2:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e8d6:	       move.l 40(sp),-(sp)
    e8da:	       jsr e31e <failSecurityCheck>
    e8e0:	       addq.l #4,sp
    e8e2:	       tst.w d0
    e8e4:	   /-- beq.s e8ec <builtIn_fileExists+0x72>
    e8e6:	   |   moveq #1,d0
    e8e8:	/--|-- bra.w e98c <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e8ec:	|  \-> move.l 40(sp),32(sp)
    e8f2:	|      move.l #1005,28(sp)
    e8fa:	|      move.l 1c9c6 <DOSBase>,d0
    e900:	|      movea.l d0,a6
    e902:	|      move.l 32(sp),d1
    e906:	|      move.l 28(sp),d2
    e90a:	|      jsr -30(a6)
    e90e:	|      move.l d0,24(sp)
    e912:	|      move.l 24(sp),d0
    e916:	|      move.l d0,20(sp)
    if (!fp) {        
    e91a:	|  /-- bne.s e92a <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e91c:	|  |   pea 1983c <PutChar+0x1b2a>
    e922:	|  |   jsr 17248 <KPrintF>
    e928:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e92a:	|  \-> tst.l 20(sp)
    e92e:	|      sne d0
    e930:	|      neg.b d0
    e932:	|      moveq #0,d1
    e934:	|      move.b d0,d1
    e936:	|      moveq #28,d0
    e938:	|      add.l 52(sp),d0
    e93c:	|      move.l d1,-(sp)
    e93e:	|      pea 1 <_start+0x1>
    e942:	|      move.l d0,-(sp)
    e944:	|      jsr 150da <setVariable>
    e94a:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e94e:	|      tst.l 20(sp)
    e952:	|  /-- beq.s e96e <builtIn_fileExists+0xf4>
    e954:	|  |   move.l 20(sp),16(sp)
    e95a:	|  |   move.l 1c9c6 <DOSBase>,d0
    e960:	|  |   movea.l d0,a6
    e962:	|  |   move.l 16(sp),d1
    e966:	|  |   jsr -36(a6)
    e96a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e96e:	|  \-> move.l 40(sp),8(sp)
    e974:	|      move.l 1c9be <SysBase>,d0
    e97a:	|      movea.l d0,a6
    e97c:	|      movea.l 8(sp),a1
    e980:	|      jsr -690(a6)
    loadNow = NULL;
    e984:	|      clr.l 1c98a <loadNow>
    return BR_CONTINUE;
    e98a:	|      moveq #2,d0
}
    e98c:	\----> move.l (sp)+,d2
    e98e:	       movea.l (sp)+,a6
    e990:	       lea 36(sp),sp
    e994:	       rts

0000e996 <builtIn_loadGame>:

builtIn(loadGame)
{
    e996:	       lea -36(sp),sp
    e99a:	       move.l a6,-(sp)
    e99c:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e99e:	       movea.l 52(sp),a0
    e9a2:	       move.l 24(a0),d0
    e9a6:	       move.l d0,-(sp)
    e9a8:	       jsr 14dbe <getTextFromAnyVar>
    e9ae:	       addq.l #4,sp
    e9b0:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e9b4:	       moveq #24,d0
    e9b6:	       add.l 52(sp),d0
    e9ba:	       move.l d0,-(sp)
    e9bc:	       jsr 1516c <trimStack>
    e9c2:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e9c4:	       move.l 40(sp),-(sp)
    e9c8:	       jsr 2fe <encodeFilename>
    e9ce:	       addq.l #4,sp
    e9d0:	       move.l d0,1c98a <loadNow>
    FreeVec(aaaaa);
    e9d6:	       move.l 40(sp),36(sp)
    e9dc:	       move.l 1c9be <SysBase>,d0
    e9e2:	       movea.l d0,a6
    e9e4:	       movea.l 36(sp),a1
    e9e8:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e9ec:	       move.l 1c98a <loadNow>,d0
    e9f2:	       move.l d0,-(sp)
    e9f4:	       jsr e31e <failSecurityCheck>
    e9fa:	       addq.l #4,sp
    e9fc:	       tst.w d0
    e9fe:	   /-- beq.s ea04 <builtIn_loadGame+0x6e>
    ea00:	   |   moveq #1,d0
    ea02:	/--|-- bra.s ea74 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ea04:	|  \-> move.l 1c98a <loadNow>,32(sp)
    ea0c:	|      move.l #1005,28(sp)
    ea14:	|      move.l 1c9c6 <DOSBase>,d0
    ea1a:	|      movea.l d0,a6
    ea1c:	|      move.l 32(sp),d1
    ea20:	|      move.l 28(sp),d2
    ea24:	|      jsr -30(a6)
    ea28:	|      move.l d0,24(sp)
    ea2c:	|      move.l 24(sp),d0
    ea30:	|      move.l d0,20(sp)
    if (fp) {
    ea34:	|  /-- beq.s ea54 <builtIn_loadGame+0xbe>
        Close(fp);
    ea36:	|  |   move.l 20(sp),12(sp)
    ea3c:	|  |   move.l 1c9c6 <DOSBase>,d0
    ea42:	|  |   movea.l d0,a6
    ea44:	|  |   move.l 12(sp),d1
    ea48:	|  |   jsr -36(a6)
    ea4c:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ea50:	|  |   moveq #0,d0
    ea52:	+--|-- bra.s ea74 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ea54:	|  \-> move.l 1c98a <loadNow>,16(sp)
    ea5c:	|      move.l 1c9be <SysBase>,d0
    ea62:	|      movea.l d0,a6
    ea64:	|      movea.l 16(sp),a1
    ea68:	|      jsr -690(a6)
    loadNow = NULL;
    ea6c:	|      clr.l 1c98a <loadNow>
    return BR_CONTINUE;
    ea72:	|      moveq #2,d0
}
    ea74:	\----> move.l (sp)+,d2
    ea76:	       movea.l (sp)+,a6
    ea78:	       lea 36(sp),sp
    ea7c:	       rts

0000ea7e <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea7e:	move.l 1ca5e <sceneHeight>,d0
    ea84:	move.l d0,d1
    ea86:	move.l 1ca5a <sceneWidth>,d0
    ea8c:	move.l d1,-(sp)
    ea8e:	move.l d0,-(sp)
    ea90:	clr.l -(sp)
    ea92:	clr.l -(sp)
    ea94:	jsr d212 <blankScreen>
    ea9a:	lea 16(sp),sp
	return BR_CONTINUE;
    ea9e:	moveq #2,d0
}
    eaa0:	rts

0000eaa2 <builtIn_blankArea>:

builtIn(blankArea)
{
    eaa2:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eaa6:	       movea.l 24(sp),a0
    eaaa:	       move.l 24(a0),d0
    eaae:	       move.l d0,-(sp)
    eab0:	       pea 1 <_start+0x1>
    eab4:	       lea 8(sp),a0
    eab8:	       move.l a0,-(sp)
    eaba:	       jsr 147e8 <getValueType>
    eac0:	       lea 12(sp),sp
    eac4:	       tst.w d0
    eac6:	   /-- bne.s eace <builtIn_blankArea+0x2c>
    eac8:	   |   moveq #1,d0
    eaca:	/--|-- bra.w eba4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eace:	|  \-> moveq #24,d0
    ead0:	|      add.l 24(sp),d0
    ead4:	|      move.l d0,-(sp)
    ead6:	|      jsr 1516c <trimStack>
    eadc:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eade:	|      movea.l 24(sp),a0
    eae2:	|      move.l 24(a0),d0
    eae6:	|      move.l d0,-(sp)
    eae8:	|      pea 1 <_start+0x1>
    eaec:	|      lea 12(sp),a0
    eaf0:	|      move.l a0,-(sp)
    eaf2:	|      jsr 147e8 <getValueType>
    eaf8:	|      lea 12(sp),sp
    eafc:	|      tst.w d0
    eafe:	|  /-- bne.s eb06 <builtIn_blankArea+0x64>
    eb00:	|  |   moveq #1,d0
    eb02:	+--|-- bra.w eba4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb06:	|  \-> moveq #24,d0
    eb08:	|      add.l 24(sp),d0
    eb0c:	|      move.l d0,-(sp)
    eb0e:	|      jsr 1516c <trimStack>
    eb14:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb16:	|      movea.l 24(sp),a0
    eb1a:	|      move.l 24(a0),d0
    eb1e:	|      move.l d0,-(sp)
    eb20:	|      pea 1 <_start+0x1>
    eb24:	|      moveq #16,d0
    eb26:	|      add.l sp,d0
    eb28:	|      move.l d0,-(sp)
    eb2a:	|      jsr 147e8 <getValueType>
    eb30:	|      lea 12(sp),sp
    eb34:	|      tst.w d0
    eb36:	|  /-- bne.s eb3c <builtIn_blankArea+0x9a>
    eb38:	|  |   moveq #1,d0
    eb3a:	+--|-- bra.s eba4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb3c:	|  \-> moveq #24,d0
    eb3e:	|      add.l 24(sp),d0
    eb42:	|      move.l d0,-(sp)
    eb44:	|      jsr 1516c <trimStack>
    eb4a:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb4c:	|      movea.l 24(sp),a0
    eb50:	|      move.l 24(a0),d0
    eb54:	|      move.l d0,-(sp)
    eb56:	|      pea 1 <_start+0x1>
    eb5a:	|      moveq #20,d0
    eb5c:	|      add.l sp,d0
    eb5e:	|      move.l d0,-(sp)
    eb60:	|      jsr 147e8 <getValueType>
    eb66:	|      lea 12(sp),sp
    eb6a:	|      tst.w d0
    eb6c:	|  /-- bne.s eb72 <builtIn_blankArea+0xd0>
    eb6e:	|  |   moveq #1,d0
    eb70:	+--|-- bra.s eba4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb72:	|  \-> moveq #24,d0
    eb74:	|      add.l 24(sp),d0
    eb78:	|      move.l d0,-(sp)
    eb7a:	|      jsr 1516c <trimStack>
    eb80:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb82:	|      movea.l (sp),a1
    eb84:	|      movea.l 4(sp),a0
    eb88:	|      move.l 8(sp),d1
    eb8c:	|      move.l 12(sp),d0
    eb90:	|      move.l a1,-(sp)
    eb92:	|      move.l a0,-(sp)
    eb94:	|      move.l d1,-(sp)
    eb96:	|      move.l d0,-(sp)
    eb98:	|      jsr d212 <blankScreen>
    eb9e:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eba2:	|      moveq #2,d0
}
    eba4:	\----> lea 16(sp),sp
    eba8:	       rts

0000ebaa <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ebaa:	jsr d226 <darkScreen>
	return BR_CONTINUE;
    ebb0:	moveq #2,d0
}
    ebb2:	rts

0000ebb4 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ebb4:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebb8:	       movea.l 20(sp),a0
    ebbc:	       move.l 24(a0),d0
    ebc0:	       move.l d0,-(sp)
    ebc2:	       pea 1 <_start+0x1>
    ebc6:	       lea 8(sp),a0
    ebca:	       move.l a0,-(sp)
    ebcc:	       jsr 147e8 <getValueType>
    ebd2:	       lea 12(sp),sp
    ebd6:	       tst.w d0
    ebd8:	   /-- bne.s ebe0 <builtIn_addOverlay+0x2c>
    ebda:	   |   moveq #1,d0
    ebdc:	/--|-- bra.w ec78 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebe0:	|  \-> moveq #24,d0
    ebe2:	|      add.l 20(sp),d0
    ebe6:	|      move.l d0,-(sp)
    ebe8:	|      jsr 1516c <trimStack>
    ebee:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebf0:	|      movea.l 20(sp),a0
    ebf4:	|      move.l 24(a0),d0
    ebf8:	|      move.l d0,-(sp)
    ebfa:	|      pea 1 <_start+0x1>
    ebfe:	|      moveq #12,d0
    ec00:	|      add.l sp,d0
    ec02:	|      move.l d0,-(sp)
    ec04:	|      jsr 147e8 <getValueType>
    ec0a:	|      lea 12(sp),sp
    ec0e:	|      tst.w d0
    ec10:	|  /-- bne.s ec16 <builtIn_addOverlay+0x62>
    ec12:	|  |   moveq #1,d0
    ec14:	+--|-- bra.s ec78 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec16:	|  \-> moveq #24,d0
    ec18:	|      add.l 20(sp),d0
    ec1c:	|      move.l d0,-(sp)
    ec1e:	|      jsr 1516c <trimStack>
    ec24:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec26:	|      movea.l 20(sp),a0
    ec2a:	|      move.l 24(a0),d0
    ec2e:	|      move.l d0,-(sp)
    ec30:	|      pea 5 <_start+0x5>
    ec34:	|      moveq #16,d0
    ec36:	|      add.l sp,d0
    ec38:	|      move.l d0,-(sp)
    ec3a:	|      jsr 147e8 <getValueType>
    ec40:	|      lea 12(sp),sp
    ec44:	|      tst.w d0
    ec46:	|  /-- bne.s ec4c <builtIn_addOverlay+0x98>
    ec48:	|  |   moveq #1,d0
    ec4a:	+--|-- bra.s ec78 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec4c:	|  \-> moveq #24,d0
    ec4e:	|      add.l 20(sp),d0
    ec52:	|      move.l d0,-(sp)
    ec54:	|      jsr 1516c <trimStack>
    ec5a:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ec5c:	|      movea.l (sp),a0
    ec5e:	|      move.l 4(sp),d1
    ec62:	|      move.l 8(sp),d0
    ec66:	|      move.l a0,-(sp)
    ec68:	|      move.l d1,-(sp)
    ec6a:	|      move.l d0,-(sp)
    ec6c:	|      jsr d344 <loadBackDrop>
    ec72:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec76:	|      moveq #2,d0
}
    ec78:	\----> lea 12(sp),sp
    ec7c:	       rts

0000ec7e <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec7e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec82:	       movea.l 20(sp),a0
    ec86:	       move.l 24(a0),d0
    ec8a:	       move.l d0,-(sp)
    ec8c:	       pea 1 <_start+0x1>
    ec90:	       lea 8(sp),a0
    ec94:	       move.l a0,-(sp)
    ec96:	       jsr 147e8 <getValueType>
    ec9c:	       lea 12(sp),sp
    eca0:	       tst.w d0
    eca2:	   /-- bne.s ecaa <builtIn_mixOverlay+0x2c>
    eca4:	   |   moveq #1,d0
    eca6:	/--|-- bra.w ed42 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecaa:	|  \-> moveq #24,d0
    ecac:	|      add.l 20(sp),d0
    ecb0:	|      move.l d0,-(sp)
    ecb2:	|      jsr 1516c <trimStack>
    ecb8:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecba:	|      movea.l 20(sp),a0
    ecbe:	|      move.l 24(a0),d0
    ecc2:	|      move.l d0,-(sp)
    ecc4:	|      pea 1 <_start+0x1>
    ecc8:	|      moveq #12,d0
    ecca:	|      add.l sp,d0
    eccc:	|      move.l d0,-(sp)
    ecce:	|      jsr 147e8 <getValueType>
    ecd4:	|      lea 12(sp),sp
    ecd8:	|      tst.w d0
    ecda:	|  /-- bne.s ece0 <builtIn_mixOverlay+0x62>
    ecdc:	|  |   moveq #1,d0
    ecde:	+--|-- bra.s ed42 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ece0:	|  \-> moveq #24,d0
    ece2:	|      add.l 20(sp),d0
    ece6:	|      move.l d0,-(sp)
    ece8:	|      jsr 1516c <trimStack>
    ecee:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecf0:	|      movea.l 20(sp),a0
    ecf4:	|      move.l 24(a0),d0
    ecf8:	|      move.l d0,-(sp)
    ecfa:	|      pea 5 <_start+0x5>
    ecfe:	|      moveq #16,d0
    ed00:	|      add.l sp,d0
    ed02:	|      move.l d0,-(sp)
    ed04:	|      jsr 147e8 <getValueType>
    ed0a:	|      lea 12(sp),sp
    ed0e:	|      tst.w d0
    ed10:	|  /-- bne.s ed16 <builtIn_mixOverlay+0x98>
    ed12:	|  |   moveq #1,d0
    ed14:	+--|-- bra.s ed42 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed16:	|  \-> moveq #24,d0
    ed18:	|      add.l 20(sp),d0
    ed1c:	|      move.l d0,-(sp)
    ed1e:	|      jsr 1516c <trimStack>
    ed24:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ed26:	|      movea.l (sp),a0
    ed28:	|      move.l 4(sp),d1
    ed2c:	|      move.l 8(sp),d0
    ed30:	|      move.l a0,-(sp)
    ed32:	|      move.l d1,-(sp)
    ed34:	|      move.l d0,-(sp)
    ed36:	|      jsr d3ba <mixBackDrop>
    ed3c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed40:	|      moveq #2,d0
}
    ed42:	\----> lea 12(sp),sp
    ed46:	       rts

0000ed48 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ed48:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ed4c:	       pea 1985a <PutChar+0x1b48>
    ed52:	       jsr 17248 <KPrintF>
    ed58:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed5a:	       movea.l 20(sp),a0
    ed5e:	       move.l 24(a0),d0
    ed62:	       move.l d0,-(sp)
    ed64:	       pea 1 <_start+0x1>
    ed68:	       lea 8(sp),a0
    ed6c:	       move.l a0,-(sp)
    ed6e:	       jsr 147e8 <getValueType>
    ed74:	       lea 12(sp),sp
    ed78:	       tst.w d0
    ed7a:	   /-- bne.s ed82 <builtIn_pasteImage+0x3a>
    ed7c:	   |   moveq #1,d0
    ed7e:	/--|-- bra.w ee20 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed82:	|  \-> moveq #24,d0
    ed84:	|      add.l 20(sp),d0
    ed88:	|      move.l d0,-(sp)
    ed8a:	|      jsr 1516c <trimStack>
    ed90:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed92:	|      movea.l 20(sp),a0
    ed96:	|      move.l 24(a0),d0
    ed9a:	|      move.l d0,-(sp)
    ed9c:	|      pea 1 <_start+0x1>
    eda0:	|      moveq #12,d0
    eda2:	|      add.l sp,d0
    eda4:	|      move.l d0,-(sp)
    eda6:	|      jsr 147e8 <getValueType>
    edac:	|      lea 12(sp),sp
    edb0:	|      tst.w d0
    edb2:	|  /-- bne.s edb8 <builtIn_pasteImage+0x70>
    edb4:	|  |   moveq #1,d0
    edb6:	+--|-- bra.s ee20 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    edb8:	|  \-> moveq #24,d0
    edba:	|      add.l 20(sp),d0
    edbe:	|      move.l d0,-(sp)
    edc0:	|      jsr 1516c <trimStack>
    edc6:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    edc8:	|      movea.l 20(sp),a0
    edcc:	|      move.l 24(a0),d0
    edd0:	|      move.l d0,-(sp)
    edd2:	|      jsr 14cc0 <getAnimationFromVar>
    edd8:	|      addq.l #4,sp
    edda:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    edde:	|      moveq #24,d0
    ede0:	|      add.l 20(sp),d0
    ede4:	|      move.l d0,-(sp)
    ede6:	|      jsr 1516c <trimStack>
    edec:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    edee:	|      tst.l 8(sp)
    edf2:	|  /-- bne.s edf8 <builtIn_pasteImage+0xb0>
    edf4:	|  |   moveq #2,d0
    edf6:	+--|-- bra.s ee20 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    edf8:	|  \-> move.l (sp),d1
    edfa:	|      move.l 4(sp),d0
    edfe:	|      move.l 8(sp),-(sp)
    ee02:	|      move.l d1,-(sp)
    ee04:	|      move.l d0,-(sp)
    ee06:	|      jsr d94 <pasteCursor>
    ee0c:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ee10:	|      pea 1986f <PutChar+0x1b5d>
    ee16:	|      jsr 17248 <KPrintF>
    ee1c:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ee1e:	|      moveq #2,d0
}
    ee20:	\----> lea 12(sp),sp
    ee24:	       rts

0000ee26 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ee26:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee28:	       movea.l 16(sp),a0
    ee2c:	       move.l 24(a0),d0
    ee30:	       move.l d0,-(sp)
    ee32:	       pea 1 <_start+0x1>
    ee36:	       move.l sp,d0
    ee38:	       addq.l #8,d0
    ee3a:	       move.l d0,-(sp)
    ee3c:	       jsr 147e8 <getValueType>
    ee42:	       lea 12(sp),sp
    ee46:	       tst.w d0
    ee48:	   /-- bne.s ee50 <builtIn_setSceneDimensions+0x2a>
    ee4a:	   |   moveq #1,d0
    ee4c:	/--|-- bra.w eed8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee50:	|  \-> moveq #24,d0
    ee52:	|      add.l 16(sp),d0
    ee56:	|      move.l d0,-(sp)
    ee58:	|      jsr 1516c <trimStack>
    ee5e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee60:	|      movea.l 16(sp),a0
    ee64:	|      move.l 24(a0),d0
    ee68:	|      move.l d0,-(sp)
    ee6a:	|      pea 1 <_start+0x1>
    ee6e:	|      moveq #12,d0
    ee70:	|      add.l sp,d0
    ee72:	|      move.l d0,-(sp)
    ee74:	|      jsr 147e8 <getValueType>
    ee7a:	|      lea 12(sp),sp
    ee7e:	|      tst.w d0
    ee80:	|  /-- bne.s ee86 <builtIn_setSceneDimensions+0x60>
    ee82:	|  |   moveq #1,d0
    ee84:	+--|-- bra.s eed8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee86:	|  \-> moveq #24,d0
    ee88:	|      add.l 16(sp),d0
    ee8c:	|      move.l d0,-(sp)
    ee8e:	|      jsr 1516c <trimStack>
    ee94:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ee96:	|      move.l (sp),d1
    ee98:	|      move.l 4(sp),d0
    ee9c:	|      move.l d1,-(sp)
    ee9e:	|      move.l d0,-(sp)
    eea0:	|      jsr d410 <resizeBackdrop>
    eea6:	|      addq.l #8,sp
    eea8:	|      tst.w d0
    eeaa:	|  /-- beq.s eec8 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    eeac:	|  |   move.l (sp),d1
    eeae:	|  |   move.l 4(sp),d0
    eeb2:	|  |   move.l d1,-(sp)
    eeb4:	|  |   move.l d0,-(sp)
    eeb6:	|  |   clr.l -(sp)
    eeb8:	|  |   clr.l -(sp)
    eeba:	|  |   jsr d212 <blankScreen>
    eec0:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    eec4:	|  |   moveq #2,d0
    eec6:	+--|-- bra.s eed8 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    eec8:	|  \-> pea 19885 <PutChar+0x1b73>
    eece:	|      jsr 17248 <KPrintF>
    eed4:	|      addq.l #4,sp
	return BR_ERROR;
    eed6:	|      moveq #1,d0
}
    eed8:	\----> addq.l #8,sp
    eeda:	       rts

0000eedc <builtIn_aimCamera>:

builtIn(aimCamera)
{
    eedc:	          move.l d3,-(sp)
    eede:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eee0:	          movea.l 16(sp),a0
    eee4:	          move.l 24(a0),d0
    eee8:	          move.l d0,-(sp)
    eeea:	          pea 1 <_start+0x1>
    eeee:	          pea 1ca7c <cameraY>
    eef4:	          jsr 147e8 <getValueType>
    eefa:	          lea 12(sp),sp
    eefe:	          tst.w d0
    ef00:	      /-- bne.s ef08 <builtIn_aimCamera+0x2c>
    ef02:	      |   moveq #1,d0
    ef04:	/-----|-- bra.w f18a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef08:	|     \-> moveq #24,d0
    ef0a:	|         add.l 16(sp),d0
    ef0e:	|         move.l d0,-(sp)
    ef10:	|         jsr 1516c <trimStack>
    ef16:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef18:	|         movea.l 16(sp),a0
    ef1c:	|         move.l 24(a0),d0
    ef20:	|         move.l d0,-(sp)
    ef22:	|         pea 1 <_start+0x1>
    ef26:	|         pea 1ca78 <cameraX>
    ef2c:	|         jsr 147e8 <getValueType>
    ef32:	|         lea 12(sp),sp
    ef36:	|         tst.w d0
    ef38:	|     /-- bne.s ef40 <builtIn_aimCamera+0x64>
    ef3a:	|     |   moveq #1,d0
    ef3c:	+-----|-- bra.w f18a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef40:	|     \-> moveq #24,d0
    ef42:	|         add.l 16(sp),d0
    ef46:	|         move.l d0,-(sp)
    ef48:	|         jsr 1516c <trimStack>
    ef4e:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ef50:	|         move.l 1ca78 <cameraX>,d0
    ef56:	|         move.l d0,-(sp)
    ef58:	|         jsr 1767a <__floatsisf>
    ef5e:	|         addq.l #4,sp
    ef60:	|         move.l d0,d2
    ef62:	|         move.l 1c912 <winWidth>,d0
    ef68:	|         lsr.l #1,d0
    ef6a:	|         move.l d0,-(sp)
    ef6c:	|         jsr 176a2 <__floatunsisf>
    ef72:	|         addq.l #4,sp
    ef74:	|         move.l d0,d1
    ef76:	|         move.l 1c35c <cameraZoom>,d0
    ef7c:	|         move.l d0,-(sp)
    ef7e:	|         move.l d1,-(sp)
    ef80:	|         jsr 17530 <__divsf3>
    ef86:	|         addq.l #8,sp
    ef88:	|         move.l d0,-(sp)
    ef8a:	|         move.l d2,-(sp)
    ef8c:	|         jsr 1796e <__subsf3>
    ef92:	|         addq.l #8,sp
    ef94:	|         move.l d0,-(sp)
    ef96:	|         jsr 17612 <__fixsfsi>
    ef9c:	|         addq.l #4,sp
    ef9e:	|         move.l d0,1ca78 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    efa4:	|         move.l 1ca7c <cameraY>,d0
    efaa:	|         move.l d0,-(sp)
    efac:	|         jsr 1767a <__floatsisf>
    efb2:	|         addq.l #4,sp
    efb4:	|         move.l d0,d2
    efb6:	|         move.l 1c916 <winHeight>,d0
    efbc:	|         lsr.l #1,d0
    efbe:	|         move.l d0,-(sp)
    efc0:	|         jsr 176a2 <__floatunsisf>
    efc6:	|         addq.l #4,sp
    efc8:	|         move.l d0,d1
    efca:	|         move.l 1c35c <cameraZoom>,d0
    efd0:	|         move.l d0,-(sp)
    efd2:	|         move.l d1,-(sp)
    efd4:	|         jsr 17530 <__divsf3>
    efda:	|         addq.l #8,sp
    efdc:	|         move.l d0,-(sp)
    efde:	|         move.l d2,-(sp)
    efe0:	|         jsr 1796e <__subsf3>
    efe6:	|         addq.l #8,sp
    efe8:	|         move.l d0,-(sp)
    efea:	|         jsr 17612 <__fixsfsi>
    eff0:	|         addq.l #4,sp
    eff2:	|         move.l d0,1ca7c <cameraY>

	if (cameraX < 0) cameraX = 0;
    eff8:	|         move.l 1ca78 <cameraX>,d0
    effe:	|     /-- bpl.s f00a <builtIn_aimCamera+0x12e>
    f000:	|     |   clr.l 1ca78 <cameraX>
    f006:	|  /--|-- bra.w f0c0 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f00a:	|  |  \-> move.l 1ca78 <cameraX>,d0
    f010:	|  |      move.l d0,-(sp)
    f012:	|  |      jsr 1767a <__floatsisf>
    f018:	|  |      addq.l #4,sp
    f01a:	|  |      move.l d0,d2
    f01c:	|  |      move.l 1ca5a <sceneWidth>,d0
    f022:	|  |      move.l d0,-(sp)
    f024:	|  |      jsr 176a2 <__floatunsisf>
    f02a:	|  |      addq.l #4,sp
    f02c:	|  |      move.l d0,d3
    f02e:	|  |      move.l 1c912 <winWidth>,d0
    f034:	|  |      move.l d0,-(sp)
    f036:	|  |      jsr 176a2 <__floatunsisf>
    f03c:	|  |      addq.l #4,sp
    f03e:	|  |      move.l d0,d1
    f040:	|  |      move.l 1c35c <cameraZoom>,d0
    f046:	|  |      move.l d0,-(sp)
    f048:	|  |      move.l d1,-(sp)
    f04a:	|  |      jsr 17530 <__divsf3>
    f050:	|  |      addq.l #8,sp
    f052:	|  |      move.l d0,-(sp)
    f054:	|  |      move.l d3,-(sp)
    f056:	|  |      jsr 1796e <__subsf3>
    f05c:	|  |      addq.l #8,sp
    f05e:	|  |      move.l d0,-(sp)
    f060:	|  |      move.l d2,-(sp)
    f062:	|  |      jsr 177e6 <__gtsf2>
    f068:	|  |      addq.l #8,sp
    f06a:	|  |      tst.l d0
    f06c:	|  +----- ble.s f0c0 <builtIn_aimCamera+0x1e4>
    f06e:	|  |      move.l 1ca5a <sceneWidth>,d0
    f074:	|  |      move.l d0,-(sp)
    f076:	|  |      jsr 176a2 <__floatunsisf>
    f07c:	|  |      addq.l #4,sp
    f07e:	|  |      move.l d0,d2
    f080:	|  |      move.l 1c912 <winWidth>,d0
    f086:	|  |      move.l d0,-(sp)
    f088:	|  |      jsr 176a2 <__floatunsisf>
    f08e:	|  |      addq.l #4,sp
    f090:	|  |      move.l d0,d1
    f092:	|  |      move.l 1c35c <cameraZoom>,d0
    f098:	|  |      move.l d0,-(sp)
    f09a:	|  |      move.l d1,-(sp)
    f09c:	|  |      jsr 17530 <__divsf3>
    f0a2:	|  |      addq.l #8,sp
    f0a4:	|  |      move.l d0,-(sp)
    f0a6:	|  |      move.l d2,-(sp)
    f0a8:	|  |      jsr 1796e <__subsf3>
    f0ae:	|  |      addq.l #8,sp
    f0b0:	|  |      move.l d0,-(sp)
    f0b2:	|  |      jsr 17612 <__fixsfsi>
    f0b8:	|  |      addq.l #4,sp
    f0ba:	|  |      move.l d0,1ca78 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f0c0:	|  \----> move.l 1ca7c <cameraY>,d0
    f0c6:	|     /-- bpl.s f0d2 <builtIn_aimCamera+0x1f6>
    f0c8:	|     |   clr.l 1ca7c <cameraY>
    f0ce:	|  /--|-- bra.w f188 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f0d2:	|  |  \-> move.l 1ca7c <cameraY>,d0
    f0d8:	|  |      move.l d0,-(sp)
    f0da:	|  |      jsr 1767a <__floatsisf>
    f0e0:	|  |      addq.l #4,sp
    f0e2:	|  |      move.l d0,d2
    f0e4:	|  |      move.l 1ca5e <sceneHeight>,d0
    f0ea:	|  |      move.l d0,-(sp)
    f0ec:	|  |      jsr 176a2 <__floatunsisf>
    f0f2:	|  |      addq.l #4,sp
    f0f4:	|  |      move.l d0,d3
    f0f6:	|  |      move.l 1c916 <winHeight>,d0
    f0fc:	|  |      move.l d0,-(sp)
    f0fe:	|  |      jsr 176a2 <__floatunsisf>
    f104:	|  |      addq.l #4,sp
    f106:	|  |      move.l d0,d1
    f108:	|  |      move.l 1c35c <cameraZoom>,d0
    f10e:	|  |      move.l d0,-(sp)
    f110:	|  |      move.l d1,-(sp)
    f112:	|  |      jsr 17530 <__divsf3>
    f118:	|  |      addq.l #8,sp
    f11a:	|  |      move.l d0,-(sp)
    f11c:	|  |      move.l d3,-(sp)
    f11e:	|  |      jsr 1796e <__subsf3>
    f124:	|  |      addq.l #8,sp
    f126:	|  |      move.l d0,-(sp)
    f128:	|  |      move.l d2,-(sp)
    f12a:	|  |      jsr 177e6 <__gtsf2>
    f130:	|  |      addq.l #8,sp
    f132:	|  |      tst.l d0
    f134:	|  +----- ble.s f188 <builtIn_aimCamera+0x2ac>
    f136:	|  |      move.l 1ca5e <sceneHeight>,d0
    f13c:	|  |      move.l d0,-(sp)
    f13e:	|  |      jsr 176a2 <__floatunsisf>
    f144:	|  |      addq.l #4,sp
    f146:	|  |      move.l d0,d2
    f148:	|  |      move.l 1c916 <winHeight>,d0
    f14e:	|  |      move.l d0,-(sp)
    f150:	|  |      jsr 176a2 <__floatunsisf>
    f156:	|  |      addq.l #4,sp
    f158:	|  |      move.l d0,d1
    f15a:	|  |      move.l 1c35c <cameraZoom>,d0
    f160:	|  |      move.l d0,-(sp)
    f162:	|  |      move.l d1,-(sp)
    f164:	|  |      jsr 17530 <__divsf3>
    f16a:	|  |      addq.l #8,sp
    f16c:	|  |      move.l d0,-(sp)
    f16e:	|  |      move.l d2,-(sp)
    f170:	|  |      jsr 1796e <__subsf3>
    f176:	|  |      addq.l #8,sp
    f178:	|  |      move.l d0,-(sp)
    f17a:	|  |      jsr 17612 <__fixsfsi>
    f180:	|  |      addq.l #4,sp
    f182:	|  |      move.l d0,1ca7c <cameraY>
	return BR_CONTINUE;
    f188:	|  \----> moveq #2,d0
}
    f18a:	\-------> move.l (sp)+,d2
    f18c:	          move.l (sp)+,d3
    f18e:	          rts

0000f190 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f190:	       subq.l #4,sp
    f192:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f194:	       movea.l 16(sp),a0
    f198:	       move.l 24(a0),d0
    f19c:	       move.l d0,-(sp)
    f19e:	       pea 1 <_start+0x1>
    f1a2:	       moveq #12,d0
    f1a4:	       add.l sp,d0
    f1a6:	       move.l d0,-(sp)
    f1a8:	       jsr 147e8 <getValueType>
    f1ae:	       lea 12(sp),sp
    f1b2:	       tst.w d0
    f1b4:	   /-- bne.s f1bc <builtIn_zoomCamera+0x2c>
    f1b6:	   |   moveq #1,d0
    f1b8:	/--|-- bra.w f3b6 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f1bc:	|  \-> moveq #24,d0
    f1be:	|      add.l 16(sp),d0
    f1c2:	|      move.l d0,-(sp)
    f1c4:	|      jsr 1516c <trimStack>
    f1ca:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f1cc:	|      move.l 1c97a <input+0xa>,d0
    f1d2:	|      move.l d0,-(sp)
    f1d4:	|      jsr 1767a <__floatsisf>
    f1da:	|      addq.l #4,sp
    f1dc:	|      move.l d0,d1
    f1de:	|      move.l 1c35c <cameraZoom>,d0
    f1e4:	|      move.l d0,-(sp)
    f1e6:	|      move.l d1,-(sp)
    f1e8:	|      jsr 1772c <__mulsf3>
    f1ee:	|      addq.l #8,sp
    f1f0:	|      move.l d0,-(sp)
    f1f2:	|      jsr 17612 <__fixsfsi>
    f1f8:	|      addq.l #4,sp
    f1fa:	|      move.l d0,1c97a <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f200:	|      move.l 1c97e <input+0xe>,d0
    f206:	|      move.l d0,-(sp)
    f208:	|      jsr 1767a <__floatsisf>
    f20e:	|      addq.l #4,sp
    f210:	|      move.l d0,d1
    f212:	|      move.l 1c35c <cameraZoom>,d0
    f218:	|      move.l d0,-(sp)
    f21a:	|      move.l d1,-(sp)
    f21c:	|      jsr 1772c <__mulsf3>
    f222:	|      addq.l #8,sp
    f224:	|      move.l d0,-(sp)
    f226:	|      jsr 17612 <__fixsfsi>
    f22c:	|      addq.l #4,sp
    f22e:	|      move.l d0,1c97e <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f234:	|      move.l 4(sp),d0
    f238:	|      move.l d0,-(sp)
    f23a:	|      jsr 1767a <__floatsisf>
    f240:	|      addq.l #4,sp
    f242:	|      move.l #1008981770,-(sp)
    f248:	|      move.l d0,-(sp)
    f24a:	|      jsr 1772c <__mulsf3>
    f250:	|      addq.l #8,sp
    f252:	|      move.l d0,1c35c <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f258:	|      move.l 1c912 <winWidth>,d0
    f25e:	|      move.l d0,-(sp)
    f260:	|      jsr 176a2 <__floatunsisf>
    f266:	|      addq.l #4,sp
    f268:	|      move.l d0,d1
    f26a:	|      move.l 1c35c <cameraZoom>,d0
    f270:	|      move.l d0,-(sp)
    f272:	|      move.l d1,-(sp)
    f274:	|      jsr 17530 <__divsf3>
    f27a:	|      addq.l #8,sp
    f27c:	|      move.l d0,d2
    f27e:	|      move.l 1ca5a <sceneWidth>,d0
    f284:	|      move.l d0,-(sp)
    f286:	|      jsr 176a2 <__floatunsisf>
    f28c:	|      addq.l #4,sp
    f28e:	|      move.l d0,-(sp)
    f290:	|      move.l d2,-(sp)
    f292:	|      jsr 177e6 <__gtsf2>
    f298:	|      addq.l #8,sp
    f29a:	|      tst.l d0
    f29c:	|  /-- ble.s f2d2 <builtIn_zoomCamera+0x142>
    f29e:	|  |   move.l 1c912 <winWidth>,d0
    f2a4:	|  |   move.l d0,-(sp)
    f2a6:	|  |   jsr 176a2 <__floatunsisf>
    f2ac:	|  |   addq.l #4,sp
    f2ae:	|  |   move.l d0,d2
    f2b0:	|  |   move.l 1ca5a <sceneWidth>,d0
    f2b6:	|  |   move.l d0,-(sp)
    f2b8:	|  |   jsr 176a2 <__floatunsisf>
    f2be:	|  |   addq.l #4,sp
    f2c0:	|  |   move.l d0,-(sp)
    f2c2:	|  |   move.l d2,-(sp)
    f2c4:	|  |   jsr 17530 <__divsf3>
    f2ca:	|  |   addq.l #8,sp
    f2cc:	|  |   move.l d0,1c35c <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f2d2:	|  \-> move.l 1c916 <winHeight>,d0
    f2d8:	|      move.l d0,-(sp)
    f2da:	|      jsr 176a2 <__floatunsisf>
    f2e0:	|      addq.l #4,sp
    f2e2:	|      move.l d0,d1
    f2e4:	|      move.l 1c35c <cameraZoom>,d0
    f2ea:	|      move.l d0,-(sp)
    f2ec:	|      move.l d1,-(sp)
    f2ee:	|      jsr 17530 <__divsf3>
    f2f4:	|      addq.l #8,sp
    f2f6:	|      move.l d0,d2
    f2f8:	|      move.l 1ca5e <sceneHeight>,d0
    f2fe:	|      move.l d0,-(sp)
    f300:	|      jsr 176a2 <__floatunsisf>
    f306:	|      addq.l #4,sp
    f308:	|      move.l d0,-(sp)
    f30a:	|      move.l d2,-(sp)
    f30c:	|      jsr 177e6 <__gtsf2>
    f312:	|      addq.l #8,sp
    f314:	|      tst.l d0
    f316:	|  /-- ble.s f34c <builtIn_zoomCamera+0x1bc>
    f318:	|  |   move.l 1c916 <winHeight>,d0
    f31e:	|  |   move.l d0,-(sp)
    f320:	|  |   jsr 176a2 <__floatunsisf>
    f326:	|  |   addq.l #4,sp
    f328:	|  |   move.l d0,d2
    f32a:	|  |   move.l 1ca5e <sceneHeight>,d0
    f330:	|  |   move.l d0,-(sp)
    f332:	|  |   jsr 176a2 <__floatunsisf>
    f338:	|  |   addq.l #4,sp
    f33a:	|  |   move.l d0,-(sp)
    f33c:	|  |   move.l d2,-(sp)
    f33e:	|  |   jsr 17530 <__divsf3>
    f344:	|  |   addq.l #8,sp
    f346:	|  |   move.l d0,1c35c <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f34c:	|  \-> move.l 1c97a <input+0xa>,d0
    f352:	|      move.l d0,-(sp)
    f354:	|      jsr 1767a <__floatsisf>
    f35a:	|      addq.l #4,sp
    f35c:	|      move.l d0,d1
    f35e:	|      move.l 1c35c <cameraZoom>,d0
    f364:	|      move.l d0,-(sp)
    f366:	|      move.l d1,-(sp)
    f368:	|      jsr 17530 <__divsf3>
    f36e:	|      addq.l #8,sp
    f370:	|      move.l d0,-(sp)
    f372:	|      jsr 17612 <__fixsfsi>
    f378:	|      addq.l #4,sp
    f37a:	|      move.l d0,1c97a <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f380:	|      move.l 1c97e <input+0xe>,d0
    f386:	|      move.l d0,-(sp)
    f388:	|      jsr 1767a <__floatsisf>
    f38e:	|      addq.l #4,sp
    f390:	|      move.l d0,d1
    f392:	|      move.l 1c35c <cameraZoom>,d0
    f398:	|      move.l d0,-(sp)
    f39a:	|      move.l d1,-(sp)
    f39c:	|      jsr 17530 <__divsf3>
    f3a2:	|      addq.l #8,sp
    f3a4:	|      move.l d0,-(sp)
    f3a6:	|      jsr 17612 <__fixsfsi>
    f3ac:	|      addq.l #4,sp
    f3ae:	|      move.l d0,1c97e <input+0xe>

	return BR_CONTINUE;
    f3b4:	|      moveq #2,d0
}
    f3b6:	\----> move.l (sp)+,d2
    f3b8:	       addq.l #4,sp
    f3ba:	       rts

0000f3bc <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f3bc:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f3be:	             tst.l 8(sp)
    f3c2:	         /-- bne.s f3d6 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f3c4:	         |   pea 198aa <PutChar+0x1b98>
    f3ca:	         |   jsr 17248 <KPrintF>
    f3d0:	         |   addq.l #4,sp
		return BR_ERROR;
    f3d2:	         |   moveq #1,d0
    f3d4:	/--------|-- bra.s f436 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f3d6:	|        \-> jsr 15e08 <rand>
    f3dc:	|            move.l d0,d1
    f3de:	|            move.l 8(sp),d0
    f3e2:	|            move.l d0,-(sp)
    f3e4:	|            move.l d1,-(sp)
    f3e6:	|            jsr 17cd6 <__umodsi3>
    f3ec:	|            addq.l #8,sp
    f3ee:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f3f0:	|     /----- bra.s f424 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f3f2:	|  /--|----> move.l (sp),d0
    f3f4:	|  |  |      cmp.l 8(sp),d0
    f3f8:	|  |  |  /-- bne.s f414 <builtIn_pickOne+0x58>
    f3fa:	|  |  |  |   moveq #28,d0
    f3fc:	|  |  |  |   add.l 12(sp),d0
    f400:	|  |  |  |   movea.l 12(sp),a0
    f404:	|  |  |  |   move.l 24(a0),d1
    f408:	|  |  |  |   move.l d0,-(sp)
    f40a:	|  |  |  |   move.l d1,-(sp)
    f40c:	|  |  |  |   jsr 14ca2 <copyVariable>
    f412:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f414:	|  |  |  \-> moveq #24,d0
    f416:	|  |  |      add.l 12(sp),d0
    f41a:	|  |  |      move.l d0,-(sp)
    f41c:	|  |  |      jsr 1516c <trimStack>
    f422:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f424:	|  |  \----> move.l 8(sp),d0
    f428:	|  |         move.l d0,d1
    f42a:	|  |         subq.l #1,d1
    f42c:	|  |         move.l d1,8(sp)
    f430:	|  |         tst.l d0
    f432:	|  \-------- bne.s f3f2 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f434:	|            moveq #2,d0
}
    f436:	\----------> addq.l #4,sp
    f438:	             rts

0000f43a <builtIn_substring>:

builtIn(substring)
{
    f43a:	       lea -40(sp),sp
    f43e:	       move.l a6,-(sp)
    f440:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f442:	       movea.l 56(sp),a0
    f446:	       move.l 24(a0),d0
    f44a:	       move.l d0,-(sp)
    f44c:	       pea 1 <_start+0x1>
    f450:	       lea 16(sp),a0
    f454:	       move.l a0,-(sp)
    f456:	       jsr 147e8 <getValueType>
    f45c:	       lea 12(sp),sp
    f460:	       tst.w d0
    f462:	   /-- bne.s f46a <builtIn_substring+0x30>
    f464:	   |   moveq #1,d0
    f466:	/--|-- bra.w f5e2 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f46a:	|  \-> moveq #24,d0
    f46c:	|      add.l 56(sp),d0
    f470:	|      move.l d0,-(sp)
    f472:	|      jsr 1516c <trimStack>
    f478:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f47a:	|      movea.l 56(sp),a0
    f47e:	|      move.l 24(a0),d0
    f482:	|      move.l d0,-(sp)
    f484:	|      pea 1 <_start+0x1>
    f488:	|      lea 20(sp),a0
    f48c:	|      move.l a0,-(sp)
    f48e:	|      jsr 147e8 <getValueType>
    f494:	|      lea 12(sp),sp
    f498:	|      tst.w d0
    f49a:	|  /-- bne.s f4a2 <builtIn_substring+0x68>
    f49c:	|  |   moveq #1,d0
    f49e:	+--|-- bra.w f5e2 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f4a2:	|  \-> moveq #24,d0
    f4a4:	|      add.l 56(sp),d0
    f4a8:	|      move.l d0,-(sp)
    f4aa:	|      jsr 1516c <trimStack>
    f4b0:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f4b2:	|      movea.l 56(sp),a0
    f4b6:	|      move.l 24(a0),d0
    f4ba:	|      move.l d0,-(sp)
    f4bc:	|      jsr 14dbe <getTextFromAnyVar>
    f4c2:	|      addq.l #4,sp
    f4c4:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f4c8:	|      moveq #24,d0
    f4ca:	|      add.l 56(sp),d0
    f4ce:	|      move.l d0,-(sp)
    f4d0:	|      jsr 1516c <trimStack>
    f4d6:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f4d8:	|      move.l 44(sp),-(sp)
    f4dc:	|      jsr 13cd4 <strlen>
    f4e2:	|      addq.l #4,sp
    f4e4:	|      move.l d0,d1
    f4e6:	|      move.l 12(sp),d0
    f4ea:	|      movea.l d0,a0
    f4ec:	|      move.l 8(sp),d0
    f4f0:	|      add.l a0,d0
    f4f2:	|      cmp.l d1,d0
    f4f4:	|  /-- bls.s f52a <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f4f6:	|  |   move.l 44(sp),-(sp)
    f4fa:	|  |   jsr 13cd4 <strlen>
    f500:	|  |   addq.l #4,sp
    f502:	|  |   move.l d0,d1
    f504:	|  |   move.l 12(sp),d0
    f508:	|  |   sub.l d0,d1
    f50a:	|  |   move.l d1,d0
    f50c:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f510:	|  |   move.l 44(sp),-(sp)
    f514:	|  |   jsr 13cd4 <strlen>
    f51a:	|  |   addq.l #4,sp
    f51c:	|  |   move.l d0,d1
    f51e:	|  |   move.l 12(sp),d0
    f522:	|  |   cmp.l d1,d0
    f524:	|  +-- bls.s f52a <builtIn_substring+0xf0>
            start = 0;
    f526:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f52a:	|  \-> move.l 8(sp),d0
    f52e:	|  /-- bpl.s f534 <builtIn_substring+0xfa>
        length = 0;
    f530:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f534:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f53a:	|      move.l 12(sp),d1
    f53e:	|      move.l 8(sp),d0
    f542:	|      move.l d1,d2
    f544:	|      add.l d0,d2
    f546:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f54a:	|      move.l 36(sp),d0
    f54e:	|      sub.l 40(sp),d0
    f552:	|      addq.l #1,d0
    f554:	|      move.l d0,32(sp)
    f558:	|      clr.l 28(sp)
    f55c:	|      move.l 1c9be <SysBase>,d0
    f562:	|      movea.l d0,a6
    f564:	|      move.l 32(sp),d0
    f568:	|      move.l 28(sp),d1
    f56c:	|      jsr -684(a6)
    f570:	|      move.l d0,24(sp)
    f574:	|      move.l 24(sp),d0
    f578:	|      move.l d0,20(sp)
    if (!newString) {
    f57c:	|  /-- bne.s f582 <builtIn_substring+0x148>
        return BR_ERROR;
    f57e:	|  |   moveq #1,d0
    f580:	+--|-- bra.s f5e2 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f582:	|  \-> move.l 36(sp),d0
    f586:	|      sub.l 40(sp),d0
    f58a:	|      move.l d0,d1
    f58c:	|      move.l 40(sp),d0
    f590:	|      add.l 44(sp),d0
    f594:	|      move.l d1,-(sp)
    f596:	|      move.l d0,-(sp)
    f598:	|      move.l 28(sp),-(sp)
    f59c:	|      jsr 171fc <memcpy>
    f5a2:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f5a6:	|      move.l 36(sp),d0
    f5aa:	|      sub.l 40(sp),d0
    f5ae:	|      movea.l 20(sp),a0
    f5b2:	|      adda.l d0,a0
    f5b4:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f5b6:	|      moveq #28,d0
    f5b8:	|      add.l 56(sp),d0
    f5bc:	|      move.l 20(sp),-(sp)
    f5c0:	|      move.l d0,-(sp)
    f5c2:	|      jsr 14a0a <makeTextVar>
    f5c8:	|      addq.l #8,sp
    FreeVec(newString);
    f5ca:	|      move.l 20(sp),16(sp)
    f5d0:	|      move.l 1c9be <SysBase>,d0
    f5d6:	|      movea.l d0,a6
    f5d8:	|      movea.l 16(sp),a1
    f5dc:	|      jsr -690(a6)
    return BR_CONTINUE;
    f5e0:	|      moveq #2,d0
}
    f5e2:	\----> move.l (sp)+,d2
    f5e4:	       movea.l (sp)+,a6
    f5e6:	       lea 40(sp),sp
    f5ea:	       rts

0000f5ec <builtIn_stringLength>:

builtIn(stringLength)
{
    f5ec:	subq.l #8,sp
    f5ee:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f5f0:	movea.l 20(sp),a0
    f5f4:	move.l 24(a0),d0
    f5f8:	move.l d0,-(sp)
    f5fa:	jsr 14dbe <getTextFromAnyVar>
    f600:	addq.l #4,sp
    f602:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f606:	moveq #24,d0
    f608:	add.l 20(sp),d0
    f60c:	move.l d0,-(sp)
    f60e:	jsr 1516c <trimStack>
    f614:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f616:	move.l 8(sp),-(sp)
    f61a:	jsr 13cd4 <strlen>
    f620:	addq.l #4,sp
    f622:	move.l d0,d1
    f624:	moveq #28,d0
    f626:	add.l 20(sp),d0
    f62a:	move.l d1,-(sp)
    f62c:	pea 1 <_start+0x1>
    f630:	move.l d0,-(sp)
    f632:	jsr 150da <setVariable>
    f638:	lea 12(sp),sp
	FreeVec(newText);
    f63c:	move.l 8(sp),4(sp)
    f642:	move.l 1c9be <SysBase>,d0
    f648:	movea.l d0,a6
    f64a:	movea.l 4(sp),a1
    f64e:	jsr -690(a6)
	return BR_CONTINUE;
    f652:	moveq #2,d0
}
    f654:	movea.l (sp)+,a6
    f656:	addq.l #8,sp
    f658:	rts

0000f65a <builtIn_newStack>:

builtIn(newStack)
{
    f65a:	             lea -12(sp),sp
    f65e:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f660:	             moveq #28,d0
    f662:	             add.l 24(sp),d0
    f666:	             move.l d0,-(sp)
    f668:	             jsr 14a36 <unlinkVar>
    f66e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f670:	             movea.l 24(sp),a0
    f674:	             moveq #6,d0
    f676:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f67a:	             moveq #12,d1
    f67c:	             move.l d1,12(sp)
    f680:	             clr.l 8(sp)
    f684:	             move.l 1c9be <SysBase>,d0
    f68a:	             movea.l d0,a6
    f68c:	             move.l 12(sp),d0
    f690:	             move.l 8(sp),d1
    f694:	             jsr -684(a6)
    f698:	             move.l d0,4(sp)
    f69c:	             move.l 4(sp),d0
    f6a0:	             movea.l 24(sp),a0
    f6a4:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f6a8:	             movea.l 24(sp),a0
    f6ac:	             move.l 32(a0),d0
    f6b0:	         /-- bne.s f6b8 <builtIn_newStack+0x5e>
    f6b2:	         |   moveq #1,d0
    f6b4:	/--------|-- bra.w f74a <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f6b8:	|        \-> movea.l 24(sp),a0
    f6bc:	|            movea.l 32(a0),a0
    f6c0:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f6c2:	|            movea.l 24(sp),a0
    f6c6:	|            movea.l 32(a0),a0
    f6ca:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f6ce:	|            movea.l 24(sp),a0
    f6d2:	|            movea.l 32(a0),a0
    f6d6:	|            moveq #1,d0
    f6d8:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f6dc:	|     /----- bra.s f738 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f6de:	|  /--|----> movea.l 24(sp),a0
    f6e2:	|  |  |      move.l 32(a0),d0
    f6e6:	|  |  |      move.l d0,d1
    f6e8:	|  |  |      movea.l 24(sp),a0
    f6ec:	|  |  |      move.l 24(a0),d0
    f6f0:	|  |  |      move.l d1,-(sp)
    f6f2:	|  |  |      move.l d0,-(sp)
    f6f4:	|  |  |      jsr 14024 <addVarToStack>
    f6fa:	|  |  |      addq.l #8,sp
    f6fc:	|  |  |      tst.w d0
    f6fe:	|  |  |  /-- bne.s f704 <builtIn_newStack+0xaa>
    f700:	|  |  |  |   moveq #1,d0
    f702:	+--|--|--|-- bra.s f74a <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f704:	|  |  |  \-> movea.l 24(sp),a0
    f708:	|  |  |      movea.l 32(a0),a0
    f70c:	|  |  |      move.l 4(a0),d0
    f710:	|  |  |  /-- bne.s f728 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f712:	|  |  |  |   movea.l 24(sp),a0
    f716:	|  |  |  |   movea.l 32(a0),a1
    f71a:	|  |  |  |   movea.l 24(sp),a0
    f71e:	|  |  |  |   movea.l 32(a0),a0
    f722:	|  |  |  |   move.l (a1),d0
    f724:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f728:	|  |  |  \-> moveq #24,d0
    f72a:	|  |  |      add.l 24(sp),d0
    f72e:	|  |  |      move.l d0,-(sp)
    f730:	|  |  |      jsr 1516c <trimStack>
    f736:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f738:	|  |  \----> move.l 20(sp),d0
    f73c:	|  |         move.l d0,d1
    f73e:	|  |         subq.l #1,d1
    f740:	|  |         move.l d1,20(sp)
    f744:	|  |         tst.l d0
    f746:	|  \-------- bne.s f6de <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f748:	|            moveq #2,d0
}
    f74a:	\----------> movea.l (sp)+,a6
    f74c:	             lea 12(sp),sp
    f750:	             rts

0000f752 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f752:	          movea.l 8(sp),a0
    f756:	          movea.l 24(a0),a0
    f75a:	          move.l (a0),d0
    f75c:	          moveq #6,d1
    f75e:	          cmp.l d0,d1
    f760:	      /-- beq.s f77c <builtIn_stackSize+0x2a>
    f762:	      |   moveq #10,d1
    f764:	      |   cmp.l d0,d1
    f766:	   /--|-- beq.s f7c0 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f768:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f76a:	   |  |   pea 198dd <PutChar+0x1bcb>
    f770:	   |  |   jsr 17248 <KPrintF>
    f776:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f778:	   |  |   moveq #1,d0
    f77a:	/--|--|-- bra.s f7fa <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f77c:	|  |  \-> movea.l 8(sp),a0
    f780:	|  |      movea.l 24(a0),a0
    f784:	|  |      move.l 4(a0),d0
    f788:	|  |      move.l d0,-(sp)
    f78a:	|  |      jsr 15148 <stackSize>
    f790:	|  |      addq.l #4,sp
    f792:	|  |      move.l d0,d1
    f794:	|  |      moveq #28,d0
    f796:	|  |      add.l 8(sp),d0
    f79a:	|  |      move.l d1,-(sp)
    f79c:	|  |      pea 1 <_start+0x1>
    f7a0:	|  |      move.l d0,-(sp)
    f7a2:	|  |      jsr 150da <setVariable>
    f7a8:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f7ac:	|  |      moveq #24,d0
    f7ae:	|  |      add.l 8(sp),d0
    f7b2:	|  |      move.l d0,-(sp)
    f7b4:	|  |      jsr 1516c <trimStack>
    f7ba:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f7bc:	|  |      moveq #2,d0
    f7be:	+--|----- bra.s f7fa <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f7c0:	|  \----> movea.l 8(sp),a0
    f7c4:	|         movea.l 24(a0),a0
    f7c8:	|         movea.l 4(a0),a0
    f7cc:	|         move.l 4(a0),d1
    f7d0:	|         moveq #28,d0
    f7d2:	|         add.l 8(sp),d0
    f7d6:	|         move.l d1,-(sp)
    f7d8:	|         pea 1 <_start+0x1>
    f7dc:	|         move.l d0,-(sp)
    f7de:	|         jsr 150da <setVariable>
    f7e4:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f7e8:	|         moveq #24,d0
    f7ea:	|         add.l 8(sp),d0
    f7ee:	|         move.l d0,-(sp)
    f7f0:	|         jsr 1516c <trimStack>
    f7f6:	|         addq.l #4,sp
			return BR_CONTINUE;
    f7f8:	|         moveq #2,d0
}
    f7fa:	\-------> rts

0000f7fc <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f7fc:	       movea.l 8(sp),a0
    f800:	       movea.l 24(a0),a0
    f804:	       move.l (a0),d0
    f806:	       moveq #6,d1
    f808:	       cmp.l d0,d1
    f80a:	   /-- beq.s f81e <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f80c:	   |   pea 19906 <PutChar+0x1bf4>
    f812:	   |   jsr 17248 <KPrintF>
    f818:	   |   addq.l #4,sp
		return BR_ERROR;
    f81a:	   |   moveq #1,d0
    f81c:	/--|-- bra.s f852 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f81e:	|  \-> moveq #28,d0
    f820:	|      add.l 8(sp),d0
    f824:	|      movea.l 8(sp),a0
    f828:	|      move.l 24(a0),d1
    f82c:	|      move.l d0,-(sp)
    f82e:	|      move.l d1,-(sp)
    f830:	|      jsr 142ee <copyStack>
    f836:	|      addq.l #8,sp
    f838:	|      tst.w d0
    f83a:	|  /-- bne.s f840 <builtIn_copyStack+0x44>
    f83c:	|  |   moveq #1,d0
    f83e:	+--|-- bra.s f852 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f840:	|  \-> moveq #24,d0
    f842:	|      add.l 8(sp),d0
    f846:	|      move.l d0,-(sp)
    f848:	|      jsr 1516c <trimStack>
    f84e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f850:	|      moveq #2,d0
}
    f852:	\----> rts

0000f854 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f854:	       movea.l 8(sp),a0
    f858:	       movea.l 24(a0),a0
    f85c:	       movea.l 8(a0),a0
    f860:	       move.l (a0),d0
    f862:	       moveq #6,d1
    f864:	       cmp.l d0,d1
    f866:	   /-- beq.s f87c <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f868:	   |   pea 1991f <PutChar+0x1c0d>
    f86e:	   |   jsr 17248 <KPrintF>
    f874:	   |   addq.l #4,sp
		return BR_ERROR;
    f876:	   |   moveq #1,d0
    f878:	/--|-- bra.w f90a <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f87c:	|  \-> movea.l 8(sp),a0
    f880:	|      movea.l 24(a0),a0
    f884:	|      movea.l 8(a0),a0
    f888:	|      move.l 4(a0),d0
    f88c:	|      move.l d0,d1
    f88e:	|      movea.l 8(sp),a0
    f892:	|      move.l 24(a0),d0
    f896:	|      move.l d1,-(sp)
    f898:	|      move.l d0,-(sp)
    f89a:	|      jsr 14024 <addVarToStack>
    f8a0:	|      addq.l #8,sp
    f8a2:	|      tst.w d0
    f8a4:	|  /-- bne.s f8aa <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f8a6:	|  |   moveq #1,d0
    f8a8:	+--|-- bra.s f90a <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f8aa:	|  \-> movea.l 8(sp),a0
    f8ae:	|      movea.l 24(a0),a0
    f8b2:	|      movea.l 8(a0),a0
    f8b6:	|      movea.l 4(a0),a0
    f8ba:	|      movea.l (a0),a0
    f8bc:	|      move.l 8(a0),d0
    f8c0:	|  /-- bne.s f8e8 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f8c2:	|  |   movea.l 8(sp),a0
    f8c6:	|  |   movea.l 24(a0),a0
    f8ca:	|  |   movea.l 8(a0),a0
    f8ce:	|  |   movea.l 4(a0),a1
    f8d2:	|  |   movea.l 8(sp),a0
    f8d6:	|  |   movea.l 24(a0),a0
    f8da:	|  |   movea.l 8(a0),a0
    f8de:	|  |   movea.l 4(a0),a0
    f8e2:	|  |   move.l (a1),d0
    f8e4:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f8e8:	|  \-> moveq #24,d0
    f8ea:	|      add.l 8(sp),d0
    f8ee:	|      move.l d0,-(sp)
    f8f0:	|      jsr 1516c <trimStack>
    f8f6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8f8:	|      moveq #24,d0
    f8fa:	|      add.l 8(sp),d0
    f8fe:	|      move.l d0,-(sp)
    f900:	|      jsr 1516c <trimStack>
    f906:	|      addq.l #4,sp
	return BR_CONTINUE;
    f908:	|      moveq #2,d0
}
    f90a:	\----> rts

0000f90c <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f90c:	             movea.l 8(sp),a0
    f910:	             movea.l 24(a0),a0
    f914:	             movea.l 8(a0),a0
    f918:	             move.l (a0),d0
    f91a:	             moveq #6,d1
    f91c:	             cmp.l d0,d1
    f91e:	         /-- beq.s f934 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f920:	         |   pea 1991f <PutChar+0x1c0d>
    f926:	         |   jsr 17248 <KPrintF>
    f92c:	         |   addq.l #4,sp
		return BR_ERROR;
    f92e:	         |   moveq #1,d0
    f930:	/--------|-- bra.w fa22 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f934:	|        \-> movea.l 8(sp),a0
    f938:	|            movea.l 24(a0),a0
    f93c:	|            movea.l 8(a0),a0
    f940:	|            movea.l 4(a0),a0
    f944:	|            move.l (a0),d0
    f946:	|     /----- bne.s f9a0 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f948:	|     |      movea.l 8(sp),a0
    f94c:	|     |      movea.l 24(a0),a0
    f950:	|     |      movea.l 8(a0),a0
    f954:	|     |      move.l 4(a0),d0
    f958:	|     |      move.l d0,d1
    f95a:	|     |      movea.l 8(sp),a0
    f95e:	|     |      move.l 24(a0),d0
    f962:	|     |      move.l d1,-(sp)
    f964:	|     |      move.l d0,-(sp)
    f966:	|     |      jsr 14024 <addVarToStack>
    f96c:	|     |      addq.l #8,sp
    f96e:	|     |      tst.w d0
    f970:	|     |  /-- bne.s f978 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f972:	|     |  |   moveq #1,d0
    f974:	+-----|--|-- bra.w fa22 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f978:	|     |  \-> movea.l 8(sp),a0
    f97c:	|     |      movea.l 24(a0),a0
    f980:	|     |      movea.l 8(a0),a0
    f984:	|     |      movea.l 4(a0),a1
    f988:	|     |      movea.l 8(sp),a0
    f98c:	|     |      movea.l 24(a0),a0
    f990:	|     |      movea.l 8(a0),a0
    f994:	|     |      movea.l 4(a0),a0
    f998:	|     |      move.l (a1),d0
    f99a:	|     |      move.l d0,4(a0)
    f99e:	|  /--|----- bra.s fa00 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f9a0:	|  |  \----> movea.l 8(sp),a0
    f9a4:	|  |         movea.l 24(a0),a0
    f9a8:	|  |         movea.l 8(a0),a0
    f9ac:	|  |         movea.l 4(a0),a0
    f9b0:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f9b4:	|  |         move.l d0,d1
    f9b6:	|  |         addq.l #8,d1
    f9b8:	|  |         movea.l 8(sp),a0
    f9bc:	|  |         move.l 24(a0),d0
    f9c0:	|  |         move.l d1,-(sp)
    f9c2:	|  |         move.l d0,-(sp)
    f9c4:	|  |         jsr 14024 <addVarToStack>
    f9ca:	|  |         addq.l #8,sp
    f9cc:	|  |         tst.w d0
    f9ce:	|  |     /-- bne.s f9d4 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f9d0:	|  |     |   moveq #1,d0
    f9d2:	+--|-----|-- bra.s fa22 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f9d4:	|  |     \-> movea.l 8(sp),a0
    f9d8:	|  |         movea.l 24(a0),a0
    f9dc:	|  |         movea.l 8(a0),a0
    f9e0:	|  |         movea.l 4(a0),a0
    f9e4:	|  |         movea.l 4(a0),a1
    f9e8:	|  |         movea.l 8(sp),a0
    f9ec:	|  |         movea.l 24(a0),a0
    f9f0:	|  |         movea.l 8(a0),a0
    f9f4:	|  |         movea.l 4(a0),a0
    f9f8:	|  |         move.l 8(a1),d0
    f9fc:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fa00:	|  \-------> moveq #24,d0
    fa02:	|            add.l 8(sp),d0
    fa06:	|            move.l d0,-(sp)
    fa08:	|            jsr 1516c <trimStack>
    fa0e:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fa10:	|            moveq #24,d0
    fa12:	|            add.l 8(sp),d0
    fa16:	|            move.l d0,-(sp)
    fa18:	|            jsr 1516c <trimStack>
    fa1e:	|            addq.l #4,sp
	return BR_CONTINUE;
    fa20:	|            moveq #2,d0
}
    fa22:	\----------> rts

0000fa24 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fa24:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa26:	       movea.l 12(sp),a0
    fa2a:	       movea.l 24(a0),a0
    fa2e:	       movea.l 8(a0),a0
    fa32:	       move.l (a0),d0
    fa34:	       moveq #6,d1
    fa36:	       cmp.l d0,d1
    fa38:	   /-- beq.s fa4e <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa3a:	   |   pea 19906 <PutChar+0x1bf4>
    fa40:	   |   jsr 17248 <KPrintF>
    fa46:	   |   addq.l #4,sp
		return BR_ERROR;
    fa48:	   |   moveq #1,d0
    fa4a:	/--|-- bra.w fae4 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fa4e:	|  \-> movea.l 12(sp),a0
    fa52:	|      movea.l 24(a0),a0
    fa56:	|      movea.l 8(a0),a0
    fa5a:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa5e:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa60:	|      movea.l 12(sp),a0
    fa64:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa68:	|      clr.l -(sp)
    fa6a:	|      move.l d1,-(sp)
    fa6c:	|      move.l d0,-(sp)
    fa6e:	|      jsr 143c4 <deleteVarFromStack>
    fa74:	|      lea 12(sp),sp
    fa78:	|      move.l d0,d1
    fa7a:	|      moveq #28,d0
    fa7c:	|      add.l 12(sp),d0
    fa80:	|      move.l d1,-(sp)
    fa82:	|      pea 1 <_start+0x1>
    fa86:	|      move.l d0,-(sp)
    fa88:	|      jsr 150da <setVariable>
    fa8e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa92:	|      movea.l 12(sp),a0
    fa96:	|      movea.l 24(a0),a0
    fa9a:	|      movea.l 8(a0),a0
    fa9e:	|      movea.l 4(a0),a0
    faa2:	|      move.l (a0),d0
    faa4:	|      movea.l 12(sp),a0
    faa8:	|      movea.l 24(a0),a0
    faac:	|      movea.l 8(a0),a0
    fab0:	|      movea.l 4(a0),a2
    fab4:	|      move.l d0,-(sp)
    fab6:	|      jsr 15124 <stackFindLast>
    fabc:	|      addq.l #4,sp
    fabe:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fac2:	|      moveq #24,d0
    fac4:	|      add.l 12(sp),d0
    fac8:	|      move.l d0,-(sp)
    faca:	|      jsr 1516c <trimStack>
    fad0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fad2:	|      moveq #24,d0
    fad4:	|      add.l 12(sp),d0
    fad8:	|      move.l d0,-(sp)
    fada:	|      jsr 1516c <trimStack>
    fae0:	|      addq.l #4,sp
	return BR_CONTINUE;
    fae2:	|      moveq #2,d0
}
    fae4:	\----> movea.l (sp)+,a2
    fae6:	       rts

0000fae8 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fae8:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    faea:	       movea.l 12(sp),a0
    faee:	       movea.l 24(a0),a0
    faf2:	       movea.l 8(a0),a0
    faf6:	       move.l (a0),d0
    faf8:	       moveq #6,d1
    fafa:	       cmp.l d0,d1
    fafc:	   /-- beq.s fb12 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fafe:	   |   pea 19906 <PutChar+0x1bf4>
    fb04:	   |   jsr 17248 <KPrintF>
    fb0a:	   |   addq.l #4,sp
		return BR_ERROR;
    fb0c:	   |   moveq #1,d0
    fb0e:	/--|-- bra.w fbaa <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fb12:	|  \-> movea.l 12(sp),a0
    fb16:	|      movea.l 24(a0),a0
    fb1a:	|      movea.l 8(a0),a0
    fb1e:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb22:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb24:	|      movea.l 12(sp),a0
    fb28:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb2c:	|      pea 1 <_start+0x1>
    fb30:	|      move.l d1,-(sp)
    fb32:	|      move.l d0,-(sp)
    fb34:	|      jsr 143c4 <deleteVarFromStack>
    fb3a:	|      lea 12(sp),sp
    fb3e:	|      move.l d0,d1
    fb40:	|      moveq #28,d0
    fb42:	|      add.l 12(sp),d0
    fb46:	|      move.l d1,-(sp)
    fb48:	|      pea 1 <_start+0x1>
    fb4c:	|      move.l d0,-(sp)
    fb4e:	|      jsr 150da <setVariable>
    fb54:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb58:	|      movea.l 12(sp),a0
    fb5c:	|      movea.l 24(a0),a0
    fb60:	|      movea.l 8(a0),a0
    fb64:	|      movea.l 4(a0),a0
    fb68:	|      move.l (a0),d0
    fb6a:	|      movea.l 12(sp),a0
    fb6e:	|      movea.l 24(a0),a0
    fb72:	|      movea.l 8(a0),a0
    fb76:	|      movea.l 4(a0),a2
    fb7a:	|      move.l d0,-(sp)
    fb7c:	|      jsr 15124 <stackFindLast>
    fb82:	|      addq.l #4,sp
    fb84:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb88:	|      moveq #24,d0
    fb8a:	|      add.l 12(sp),d0
    fb8e:	|      move.l d0,-(sp)
    fb90:	|      jsr 1516c <trimStack>
    fb96:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb98:	|      moveq #24,d0
    fb9a:	|      add.l 12(sp),d0
    fb9e:	|      move.l d0,-(sp)
    fba0:	|      jsr 1516c <trimStack>
    fba6:	|      addq.l #4,sp
	return BR_CONTINUE;
    fba8:	|      moveq #2,d0
}
    fbaa:	\----> movea.l (sp)+,a2
    fbac:	       rts

0000fbae <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fbae:	       movea.l 8(sp),a0
    fbb2:	       movea.l 24(a0),a0
    fbb6:	       move.l (a0),d0
    fbb8:	       moveq #6,d1
    fbba:	       cmp.l d0,d1
    fbbc:	   /-- beq.s fbd0 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbbe:	   |   pea 19906 <PutChar+0x1bf4>
    fbc4:	   |   jsr 17248 <KPrintF>
    fbca:	   |   addq.l #4,sp
		return BR_ERROR;
    fbcc:	   |   moveq #1,d0
    fbce:	/--|-- bra.s fc3a <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbd0:	|  \-> movea.l 8(sp),a0
    fbd4:	|      movea.l 24(a0),a0
    fbd8:	|      movea.l 4(a0),a0
    fbdc:	|      move.l (a0),d0
    fbde:	|  /-- bne.s fbf2 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fbe0:	|  |   pea 19937 <PutChar+0x1c25>
    fbe6:	|  |   jsr 17248 <KPrintF>
    fbec:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbee:	|  |   moveq #1,d0
    fbf0:	+--|-- bra.s fc3a <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbf2:	|  \-> moveq #28,d0
    fbf4:	|      add.l 8(sp),d0
    fbf8:	|      movea.l 8(sp),a0
    fbfc:	|      movea.l 24(a0),a0
    fc00:	|      movea.l 4(a0),a0
    fc04:	|      move.l (a0),d1
    fc06:	|      move.l d0,-(sp)
    fc08:	|      move.l d1,-(sp)
    fc0a:	|      jsr 14ca2 <copyVariable>
    fc10:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fc12:	|      movea.l 8(sp),a0
    fc16:	|      movea.l 24(a0),a0
    fc1a:	|      move.l 4(a0),d0
    fc1e:	|      move.l d0,-(sp)
    fc20:	|      jsr 1516c <trimStack>
    fc26:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc28:	|      moveq #24,d0
    fc2a:	|      add.l 8(sp),d0
    fc2e:	|      move.l d0,-(sp)
    fc30:	|      jsr 1516c <trimStack>
    fc36:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc38:	|      moveq #2,d0
}
    fc3a:	\----> rts

0000fc3c <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc3c:	       movea.l 8(sp),a0
    fc40:	       movea.l 24(a0),a0
    fc44:	       move.l (a0),d0
    fc46:	       moveq #6,d1
    fc48:	       cmp.l d0,d1
    fc4a:	   /-- beq.s fc5e <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc4c:	   |   pea 19906 <PutChar+0x1bf4>
    fc52:	   |   jsr 17248 <KPrintF>
    fc58:	   |   addq.l #4,sp
		return BR_ERROR;
    fc5a:	   |   moveq #1,d0
    fc5c:	/--|-- bra.s fcb2 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc5e:	|  \-> movea.l 8(sp),a0
    fc62:	|      movea.l 24(a0),a0
    fc66:	|      movea.l 4(a0),a0
    fc6a:	|      move.l (a0),d0
    fc6c:	|  /-- bne.s fc80 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fc6e:	|  |   pea 19937 <PutChar+0x1c25>
    fc74:	|  |   jsr 17248 <KPrintF>
    fc7a:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc7c:	|  |   moveq #1,d0
    fc7e:	+--|-- bra.s fcb2 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc80:	|  \-> moveq #28,d0
    fc82:	|      add.l 8(sp),d0
    fc86:	|      movea.l 8(sp),a0
    fc8a:	|      movea.l 24(a0),a0
    fc8e:	|      movea.l 4(a0),a0
    fc92:	|      move.l (a0),d1
    fc94:	|      move.l d0,-(sp)
    fc96:	|      move.l d1,-(sp)
    fc98:	|      jsr 14ca2 <copyVariable>
    fc9e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fca0:	|      moveq #24,d0
    fca2:	|      add.l 8(sp),d0
    fca6:	|      move.l d0,-(sp)
    fca8:	|      jsr 1516c <trimStack>
    fcae:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcb0:	|      moveq #2,d0
}
    fcb2:	\----> rts

0000fcb4 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fcb4:	       movea.l 8(sp),a0
    fcb8:	       movea.l 24(a0),a0
    fcbc:	       move.l (a0),d0
    fcbe:	       moveq #6,d1
    fcc0:	       cmp.l d0,d1
    fcc2:	   /-- beq.s fcd6 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcc4:	   |   pea 19906 <PutChar+0x1bf4>
    fcca:	   |   jsr 17248 <KPrintF>
    fcd0:	   |   addq.l #4,sp
		return BR_ERROR;
    fcd2:	   |   moveq #1,d0
    fcd4:	/--|-- bra.s fd2c <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcd6:	|  \-> movea.l 8(sp),a0
    fcda:	|      movea.l 24(a0),a0
    fcde:	|      movea.l 4(a0),a0
    fce2:	|      move.l (a0),d0
    fce4:	|  /-- bne.s fcf8 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fce6:	|  |   pea 19937 <PutChar+0x1c25>
    fcec:	|  |   jsr 17248 <KPrintF>
    fcf2:	|  |   addq.l #4,sp
		return BR_ERROR;
    fcf4:	|  |   moveq #1,d0
    fcf6:	+--|-- bra.s fd2c <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fcf8:	|  \-> moveq #28,d0
    fcfa:	|      add.l 8(sp),d0
    fcfe:	|      movea.l 8(sp),a0
    fd02:	|      movea.l 24(a0),a0
    fd06:	|      movea.l 4(a0),a0
    fd0a:	|      move.l 4(a0),d1
    fd0e:	|      move.l d0,-(sp)
    fd10:	|      move.l d1,-(sp)
    fd12:	|      jsr 14ca2 <copyVariable>
    fd18:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd1a:	|      moveq #24,d0
    fd1c:	|      add.l 8(sp),d0
    fd20:	|      move.l d0,-(sp)
    fd22:	|      jsr 1516c <trimStack>
    fd28:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd2a:	|      moveq #2,d0
}
    fd2c:	\----> rts

0000fd2e <builtIn_random>:

builtIn(random)
{
    fd2e:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fd30:	       movea.l 12(sp),a0
    fd34:	       move.l 24(a0),d0
    fd38:	       move.l d0,-(sp)
    fd3a:	       pea 1 <_start+0x1>
    fd3e:	       move.l sp,d0
    fd40:	       addq.l #8,d0
    fd42:	       move.l d0,-(sp)
    fd44:	       jsr 147e8 <getValueType>
    fd4a:	       lea 12(sp),sp
    fd4e:	       tst.w d0
    fd50:	   /-- bne.s fd56 <builtIn_random+0x28>
		return BR_ERROR;
    fd52:	   |   moveq #1,d0
    fd54:	/--|-- bra.s fda0 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fd56:	|  \-> moveq #24,d0
    fd58:	|      add.l 12(sp),d0
    fd5c:	|      move.l d0,-(sp)
    fd5e:	|      jsr 1516c <trimStack>
    fd64:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fd66:	|      move.l (sp),d0
    fd68:	|  /-- bgt.s fd6e <builtIn_random+0x40>
    fd6a:	|  |   moveq #1,d0
    fd6c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fd6e:	|  \-> jsr 15e08 <rand>
    fd74:	|      move.l d0,d1
    fd76:	|      move.l (sp),d0
    fd78:	|      move.l d0,-(sp)
    fd7a:	|      move.l d1,-(sp)
    fd7c:	|      jsr 17cd6 <__umodsi3>
    fd82:	|      addq.l #8,sp
    fd84:	|      move.l d0,d1
    fd86:	|      moveq #28,d0
    fd88:	|      add.l 12(sp),d0
    fd8c:	|      move.l d1,-(sp)
    fd8e:	|      pea 1 <_start+0x1>
    fd92:	|      move.l d0,-(sp)
    fd94:	|      jsr 150da <setVariable>
    fd9a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd9e:	|      moveq #2,d0
}
    fda0:	\----> addq.l #4,sp
    fda2:	       rts

0000fda4 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fda4:	nop
    fda6:	rts

0000fda8 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fda8:	moveq #2,d0
}
    fdaa:	rts

0000fdac <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fdac:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fdae:	       movea.l 12(sp),a0
    fdb2:	       move.l 24(a0),d0
    fdb6:	       move.l d0,-(sp)
    fdb8:	       pea 1 <_start+0x1>
    fdbc:	       move.l sp,d0
    fdbe:	       addq.l #8,d0
    fdc0:	       move.l d0,-(sp)
    fdc2:	       jsr 147e8 <getValueType>
    fdc8:	       lea 12(sp),sp
    fdcc:	       tst.w d0
    fdce:	   /-- bne.s fde2 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fdd0:	   |   pea 1994a <PutChar+0x1c38>
    fdd6:	   |   jsr 17248 <KPrintF>
    fddc:	   |   addq.l #4,sp
		return BR_ERROR;
    fdde:	   |   moveq #1,d0
    fde0:	/--|-- bra.s fe22 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fde2:	|  \-> moveq #24,d0
    fde4:	|      add.l 12(sp),d0
    fde8:	|      move.l d0,-(sp)
    fdea:	|      jsr 1516c <trimStack>
    fdf0:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fdf2:	|      move.l (sp),d0
    fdf4:	|      move.l d0,d0
    fdf6:	|      move.w d0,1c8d8 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fdfc:	|      move.w 1c8d8 <textPaletteIndex>,d0
    fe02:	|      cmpi.w #31,d0
    fe06:	|  /-- bls.s fe20 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fe08:	|  |   pea 19971 <PutChar+0x1c5f>
    fe0e:	|  |   jsr 17248 <KPrintF>
    fe14:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fe16:	|  |   clr.w 1c8d8 <textPaletteIndex>
		return BR_ERROR;
    fe1c:	|  |   moveq #1,d0
    fe1e:	+--|-- bra.s fe22 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fe20:	|  \-> moveq #2,d0
}
    fe22:	\----> addq.l #4,sp
    fe24:	       rts

0000fe26 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe26:	moveq #2,d0
}
    fe28:	rts

0000fe2a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe2a:	moveq #2,d0
}
    fe2c:	rts

0000fe2e <builtIn_setFont>:


builtIn(setFont)
{
    fe2e:	       lea -16(sp),sp
    fe32:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe34:	       movea.l 28(sp),a0
    fe38:	       move.l 24(a0),d0
    fe3c:	       move.l d0,-(sp)
    fe3e:	       pea 1 <_start+0x1>
    fe42:	       lea 12(sp),a0
    fe46:	       move.l a0,-(sp)
    fe48:	       jsr 147e8 <getValueType>
    fe4e:	       lea 12(sp),sp
    fe52:	       tst.w d0
    fe54:	   /-- bne.s fe5c <builtIn_setFont+0x2e>
    fe56:	   |   moveq #1,d0
    fe58:	/--|-- bra.w ff0a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fe5c:	|  \-> moveq #24,d0
    fe5e:	|      add.l 28(sp),d0
    fe62:	|      move.l d0,-(sp)
    fe64:	|      jsr 1516c <trimStack>
    fe6a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe6c:	|      movea.l 28(sp),a0
    fe70:	|      move.l 24(a0),d0
    fe74:	|      move.l d0,-(sp)
    fe76:	|      jsr 14dbe <getTextFromAnyVar>
    fe7c:	|      addq.l #4,sp
    fe7e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe82:	|  /-- bne.s fe8a <builtIn_setFont+0x5c>
    fe84:	|  |   moveq #1,d0
    fe86:	+--|-- bra.w ff0a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe8a:	|  \-> moveq #24,d0
    fe8c:	|      add.l 28(sp),d0
    fe90:	|      move.l d0,-(sp)
    fe92:	|      jsr 1516c <trimStack>
    fe98:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe9a:	|      movea.l 28(sp),a0
    fe9e:	|      move.l 24(a0),d0
    fea2:	|      move.l d0,-(sp)
    fea4:	|      pea 5 <_start+0x5>
    fea8:	|      lea 16(sp),a0
    feac:	|      move.l a0,-(sp)
    feae:	|      jsr 147e8 <getValueType>
    feb4:	|      lea 12(sp),sp
    feb8:	|      tst.w d0
    feba:	|  /-- bne.s fec0 <builtIn_setFont+0x92>
    febc:	|  |   moveq #1,d0
    febe:	+--|-- bra.s ff0a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fec0:	|  \-> moveq #24,d0
    fec2:	|      add.l 28(sp),d0
    fec6:	|      move.l d0,-(sp)
    fec8:	|      jsr 1516c <trimStack>
    fece:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fed0:	|      move.l 4(sp),d1
    fed4:	|      move.l 8(sp),d0
    fed8:	|      move.l d1,-(sp)
    feda:	|      move.l 20(sp),-(sp)
    fede:	|      move.l d0,-(sp)
    fee0:	|      jsr 15618 <loadFont>
    fee6:	|      lea 12(sp),sp
    feea:	|      tst.w d0
    feec:	|  /-- bne.s fef2 <builtIn_setFont+0xc4>
    feee:	|  |   moveq #1,d0
    fef0:	+--|-- bra.s ff0a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fef2:	|  \-> move.l 16(sp),12(sp)
    fef8:	|      move.l 1c9be <SysBase>,d0
    fefe:	|      movea.l d0,a6
    ff00:	|      movea.l 12(sp),a1
    ff04:	|      jsr -690(a6)

    return BR_CONTINUE;
    ff08:	|      moveq #2,d0
}
    ff0a:	\----> movea.l (sp)+,a6
    ff0c:	       lea 16(sp),sp
    ff10:	       rts

0000ff12 <builtIn_inFont>:

builtIn(inFont)
{
    ff12:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ff14:	       movea.l 12(sp),a0
    ff18:	       move.l 24(a0),d0
    ff1c:	       move.l d0,-(sp)
    ff1e:	       jsr 14dbe <getTextFromAnyVar>
    ff24:	       addq.l #4,sp
    ff26:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ff28:	   /-- bne.s ff2e <builtIn_inFont+0x1c>
    ff2a:	   |   moveq #1,d0
    ff2c:	/--|-- bra.s ff64 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ff2e:	|  \-> moveq #24,d0
    ff30:	|      add.l 12(sp),d0
    ff34:	|      move.l d0,-(sp)
    ff36:	|      jsr 1516c <trimStack>
    ff3c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ff3e:	|      move.l (sp),-(sp)
    ff40:	|      jsr 15606 <isInFont>
    ff46:	|      addq.l #4,sp
    ff48:	|      movea.w d0,a0
    ff4a:	|      moveq #28,d0
    ff4c:	|      add.l 12(sp),d0
    ff50:	|      move.l a0,-(sp)
    ff52:	|      pea 1 <_start+0x1>
    ff56:	|      move.l d0,-(sp)
    ff58:	|      jsr 150da <setVariable>
    ff5e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff62:	|      moveq #2,d0
}
    ff64:	\----> addq.l #4,sp
    ff66:	       rts

0000ff68 <builtIn_pasteString>:

builtIn(pasteString)
{
    ff68:	       lea -16(sp),sp
    ff6c:	       move.l a6,-(sp)
    ff6e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff70:	       movea.l 32(sp),a0
    ff74:	       move.l 24(a0),d0
    ff78:	       move.l d0,-(sp)
    ff7a:	       jsr 14dbe <getTextFromAnyVar>
    ff80:	       addq.l #4,sp
    ff82:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff86:	       moveq #24,d0
    ff88:	       add.l 32(sp),d0
    ff8c:	       move.l d0,-(sp)
    ff8e:	       jsr 1516c <trimStack>
    ff94:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff96:	       movea.l 32(sp),a0
    ff9a:	       move.l 24(a0),d0
    ff9e:	       move.l d0,-(sp)
    ffa0:	       pea 1 <_start+0x1>
    ffa4:	       lea 20(sp),a0
    ffa8:	       move.l a0,-(sp)
    ffaa:	       jsr 147e8 <getValueType>
    ffb0:	       lea 12(sp),sp
    ffb4:	       tst.w d0
    ffb6:	   /-- bne.s ffbe <builtIn_pasteString+0x56>
    ffb8:	   |   moveq #1,d0
    ffba:	/--|-- bra.w 10060 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ffbe:	|  \-> moveq #24,d0
    ffc0:	|      add.l 32(sp),d0
    ffc4:	|      move.l d0,-(sp)
    ffc6:	|      jsr 1516c <trimStack>
    ffcc:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ffce:	|      movea.l 32(sp),a0
    ffd2:	|      move.l 24(a0),d0
    ffd6:	|      move.l d0,-(sp)
    ffd8:	|      pea 1 <_start+0x1>
    ffdc:	|      lea 16(sp),a0
    ffe0:	|      move.l a0,-(sp)
    ffe2:	|      jsr 147e8 <getValueType>
    ffe8:	|      lea 12(sp),sp
    ffec:	|      tst.w d0
    ffee:	|  /-- bne.s fff4 <builtIn_pasteString+0x8c>
    fff0:	|  |   moveq #1,d0
    fff2:	+--|-- bra.s 10060 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fff4:	|  \-> moveq #24,d0
    fff6:	|      add.l 32(sp),d0
    fffa:	|      move.l d0,-(sp)
    fffc:	|      jsr 1516c <trimStack>
   10002:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
   10004:	|      move.l 8(sp),d0
   10008:	|      cmpi.l #65535,d0
   1000e:	|  /-- bne.s 1002e <builtIn_pasteString+0xc6>
   10010:	|  |   move.l 1c912 <winWidth>,d2
   10016:	|  |   move.l 20(sp),-(sp)
   1001a:	|  |   jsr 158ca <stringWidth>
   10020:	|  |   addq.l #4,sp
   10022:	|  |   move.l d2,d1
   10024:	|  |   sub.l d0,d1
   10026:	|  |   move.l d1,d0
   10028:	|  |   lsr.l #1,d0
   1002a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1002e:	|  \-> move.l 12(sp),d1
   10032:	|      move.l 8(sp),d0
   10036:	|      move.l d1,-(sp)
   10038:	|      move.l d0,-(sp)
   1003a:	|      move.l 28(sp),-(sp)
   1003e:	|      jsr 157ec <pasteStringToBackdrop>
   10044:	|      lea 12(sp),sp
    FreeVec(newText); 
   10048:	|      move.l 20(sp),16(sp)
   1004e:	|      move.l 1c9be <SysBase>,d0
   10054:	|      movea.l d0,a6
   10056:	|      movea.l 16(sp),a1
   1005a:	|      jsr -690(a6)
    return BR_CONTINUE;
   1005e:	|      moveq #2,d0
}
   10060:	\----> move.l (sp)+,d2
   10062:	       movea.l (sp)+,a6
   10064:	       lea 16(sp),sp
   10068:	       rts

0001006a <builtIn_anim>:

builtIn(anim)
{
   1006a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1006e:	       moveq #1,d0
   10070:	       cmp.l 16(sp),d0
   10074:	   /-- blt.s 1008a <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10076:	   |   pea 1999b <line.c.05397aaf+0xf>
   1007c:	   |   jsr 17248 <KPrintF>
   10082:	   |   addq.l #4,sp
		return BR_ERROR;
   10084:	   |   moveq #1,d0
   10086:	/--|-- bra.w 10118 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   1008a:	|  \-> moveq #24,d1
   1008c:	|      add.l 20(sp),d1
   10090:	|      move.l 16(sp),d0
   10094:	|      subq.l #1,d0
   10096:	|      move.l d1,-(sp)
   10098:	|      move.l d0,-(sp)
   1009a:	|      jsr 96f8 <createPersonaAnim>
   100a0:	|      addq.l #8,sp
   100a2:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   100a6:	|      movea.l 20(sp),a0
   100aa:	|      move.l 24(a0),d0
   100ae:	|      move.l d0,-(sp)
   100b0:	|      pea 5 <_start+0x5>
   100b4:	|      lea 8(sp),a0
   100b8:	|      move.l a0,-(sp)
   100ba:	|      jsr 147e8 <getValueType>
   100c0:	|      lea 12(sp),sp
   100c4:	|      tst.w d0
   100c6:	|  /-- bne.s 100cc <builtIn_anim+0x62>
   100c8:	|  |   moveq #1,d0
   100ca:	+--|-- bra.s 10118 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   100cc:	|  \-> moveq #24,d0
   100ce:	|      add.l 20(sp),d0
   100d2:	|      move.l d0,-(sp)
   100d4:	|      jsr 1516c <trimStack>
   100da:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   100dc:	|      move.l (sp),d0
   100de:	|      move.l d0,-(sp)
   100e0:	|      jsr 15f6a <loadBankForAnim>
   100e6:	|      addq.l #4,sp
   100e8:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   100ec:	|  /-- bne.s 100f2 <builtIn_anim+0x88>
   100ee:	|  |   moveq #1,d0
   100f0:	+--|-- bra.s 10118 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   100f2:	|  \-> move.l 4(sp),-(sp)
   100f6:	|      move.l 12(sp),-(sp)
   100fa:	|      jsr b5a2 <setBankFile>
   10100:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10102:	|      moveq #28,d0
   10104:	|      add.l 20(sp),d0
   10108:	|      move.l 8(sp),-(sp)
   1010c:	|      move.l d0,-(sp)
   1010e:	|      jsr 15096 <newAnimationVariable>
   10114:	|      addq.l #8,sp
	return BR_CONTINUE;
   10116:	|      moveq #2,d0
}
   10118:	\----> lea 12(sp),sp
   1011c:	       rts

0001011e <builtIn_costume>:

builtIn(costume)
{
   1011e:	          lea -32(sp),sp
   10122:	          move.l a6,-(sp)
   10124:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10126:	          moveq #8,d0
   10128:	          move.l d0,32(sp)
   1012c:	          clr.l 28(sp)
   10130:	          move.l 1c9be <SysBase>,d0
   10136:	          movea.l d0,a6
   10138:	          move.l 32(sp),d0
   1013c:	          move.l 28(sp),d1
   10140:	          jsr -684(a6)
   10144:	          move.l d0,24(sp)
   10148:	          move.l 24(sp),d0
   1014c:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10150:	      /-- bne.s 10158 <builtIn_costume+0x3a>
   10152:	      |   moveq #1,d0
   10154:	/-----|-- bra.w 10240 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10158:	|     \-> move.l 44(sp),d0
   1015c:	|         pea 3 <_start+0x3>
   10160:	|         move.l d0,-(sp)
   10162:	|         jsr 17c7a <__divsi3>
   10168:	|         addq.l #8,sp
   1016a:	|         movea.l 20(sp),a0
   1016e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10172:	|         tst.l 44(sp)
   10176:	|     /-- beq.s 1018c <builtIn_costume+0x6e>
   10178:	|     |   movea.l 20(sp),a0
   1017c:	|     |   move.l 4(a0),d1
   10180:	|     |   move.l d1,d0
   10182:	|     |   add.l d0,d0
   10184:	|     |   add.l d1,d0
   10186:	|     |   cmp.l 44(sp),d0
   1018a:	|  /--|-- beq.s 101a0 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1018c:	|  |  \-> pea 199d5 <line.c.05397aaf+0x49>
   10192:	|  |      jsr 17248 <KPrintF>
   10198:	|  |      addq.l #4,sp
        return BR_ERROR;
   1019a:	|  |      moveq #1,d0
   1019c:	+--|----- bra.w 10240 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   101a0:	|  \----> move.l 44(sp),d0
   101a4:	|         add.l d0,d0
   101a6:	|         add.l d0,d0
   101a8:	|         move.l d0,16(sp)
   101ac:	|         clr.l 12(sp)
   101b0:	|         move.l 1c9be <SysBase>,d0
   101b6:	|         movea.l d0,a6
   101b8:	|         move.l 16(sp),d0
   101bc:	|         move.l 12(sp),d1
   101c0:	|         jsr -684(a6)
   101c4:	|         move.l d0,8(sp)
   101c8:	|         move.l 8(sp),d0
   101cc:	|         movea.l 20(sp),a0
   101d0:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   101d2:	|         movea.l 20(sp),a0
   101d6:	|         move.l (a0),d0
   101d8:	|     /-- bne.s 101de <builtIn_costume+0xc0>
   101da:	|     |   moveq #1,d0
   101dc:	+-----|-- bra.s 10240 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   101de:	|     \-> move.l 44(sp),d0
   101e2:	|         subq.l #1,d0
   101e4:	|         move.l d0,36(sp)
   101e8:	|     /-- bra.s 10224 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   101ea:	|  /--|-> movea.l 48(sp),a0
   101ee:	|  |  |   move.l 24(a0),d0
   101f2:	|  |  |   movea.l 20(sp),a0
   101f6:	|  |  |   movea.l (a0),a0
   101f8:	|  |  |   move.l 36(sp),d1
   101fc:	|  |  |   add.l d1,d1
   101fe:	|  |  |   add.l d1,d1
   10200:	|  |  |   lea (0,a0,d1.l),a2
   10204:	|  |  |   move.l d0,-(sp)
   10206:	|  |  |   jsr 14cc0 <getAnimationFromVar>
   1020c:	|  |  |   addq.l #4,sp
   1020e:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10210:	|  |  |   moveq #24,d0
   10212:	|  |  |   add.l 48(sp),d0
   10216:	|  |  |   move.l d0,-(sp)
   10218:	|  |  |   jsr 1516c <trimStack>
   1021e:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10220:	|  |  |   subq.l #1,36(sp)
   10224:	|  |  \-> tst.l 36(sp)
   10228:	|  \----- bge.s 101ea <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1022a:	|         moveq #28,d0
   1022c:	|         add.l 48(sp),d0
   10230:	|         move.l 20(sp),-(sp)
   10234:	|         move.l d0,-(sp)
   10236:	|         jsr 150b8 <newCostumeVariable>
   1023c:	|         addq.l #8,sp
    return BR_CONTINUE;
   1023e:	|         moveq #2,d0
}
   10240:	\-------> movea.l (sp)+,a2
   10242:	          movea.l (sp)+,a6
   10244:	          lea 32(sp),sp
   10248:	          rts

0001024a <builtIn_launch>:

builtIn(launch)
{
   1024a:	          lea -20(sp),sp
   1024e:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10250:	          movea.l 32(sp),a0
   10254:	          move.l 24(a0),d0
   10258:	          move.l d0,-(sp)
   1025a:	          jsr 14dbe <getTextFromAnyVar>
   10260:	          addq.l #4,sp
   10262:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10266:	      /-- bne.s 1026e <builtIn_launch+0x24>
   10268:	      |   moveq #1,d0
   1026a:	/-----|-- bra.w 1039c <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1026e:	|     \-> move.l 20(sp),-(sp)
   10272:	|         jsr 2fe <encodeFilename>
   10278:	|         addq.l #4,sp
   1027a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1027e:	|         moveq #24,d0
   10280:	|         add.l 32(sp),d0
   10284:	|         move.l d0,-(sp)
   10286:	|         jsr 1516c <trimStack>
   1028c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1028e:	|         movea.l 20(sp),a0
   10292:	|         move.b (a0),d0
   10294:	|         cmpi.b #104,d0
   10298:	|  /----- bne.s 10302 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1029a:	|  |      movea.l 20(sp),a0
   1029e:	|  |      addq.l #1,a0
   102a0:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   102a2:	|  |      cmpi.b #116,d0
   102a6:	|  +----- bne.s 10302 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   102a8:	|  |      movea.l 20(sp),a0
   102ac:	|  |      addq.l #2,a0
   102ae:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   102b0:	|  |      cmpi.b #116,d0
   102b4:	|  +----- bne.s 10302 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   102b6:	|  |      movea.l 20(sp),a0
   102ba:	|  |      addq.l #3,a0
   102bc:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   102be:	|  |      cmpi.b #112,d0
   102c2:	|  +----- bne.s 10302 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102c4:	|  |      movea.l 20(sp),a0
   102c8:	|  |      addq.l #4,a0
   102ca:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   102cc:	|  |      cmpi.b #58,d0
   102d0:	|  |  /-- beq.s 102ee <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102d2:	|  |  |   movea.l 20(sp),a0
   102d6:	|  |  |   addq.l #4,a0
   102d8:	|  |  |   move.b (a0),d0
   102da:	|  |  |   cmpi.b #115,d0
   102de:	|  +--|-- bne.s 10302 <builtIn_launch+0xb8>
   102e0:	|  |  |   movea.l 20(sp),a0
   102e4:	|  |  |   addq.l #5,a0
   102e6:	|  |  |   move.b (a0),d0
   102e8:	|  |  |   cmpi.b #58,d0
   102ec:	|  +--|-- bne.s 10302 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   102ee:	|  |  \-> move.l 20(sp),-(sp)
   102f2:	|  |      jsr b8 <copyString>
   102f8:	|  |      addq.l #4,sp
   102fa:	|  |      move.l d0,1ca80 <launchMe>
   10300:	|  |  /-- bra.s 10354 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10302:	|  \--|-> move.l 1c926 <gamePath>,d0
   10308:	|     |   pea 19a20 <line.c.05397aaf+0x94>
   1030e:	|     |   move.l d0,-(sp)
   10310:	|     |   jsr 13d14 <joinStrings>
   10316:	|     |   addq.l #8,sp
   10318:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1031c:	|     |   move.l 16(sp),-(sp)
   10320:	|     |   move.l 16(sp),-(sp)
   10324:	|     |   jsr 13d14 <joinStrings>
   1032a:	|     |   addq.l #8,sp
   1032c:	|     |   move.l d0,1ca80 <launchMe>
        FreeVec(newText);
   10332:	|     |   move.l 16(sp),8(sp)
   10338:	|     |   move.l 1c9be <SysBase>,d0
   1033e:	|     |   movea.l d0,a6
   10340:	|     |   movea.l 8(sp),a1
   10344:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10348:	|     |   move.l 1ca80 <launchMe>,d0
   1034e:	|     +-- bne.s 10354 <builtIn_launch+0x10a>
   10350:	|     |   moveq #1,d0
   10352:	+-----|-- bra.s 1039c <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10354:	|     \-> move.l 20(sp),4(sp)
   1035a:	|         move.l 1c9be <SysBase>,d0
   10360:	|         movea.l d0,a6
   10362:	|         movea.l 4(sp),a1
   10366:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   1036a:	|         clr.l -(sp)
   1036c:	|         jsr 40f4 <setGraphicsWindow>
   10372:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10374:	|         moveq #28,d0
   10376:	|         add.l 32(sp),d0
   1037a:	|         pea 1 <_start+0x1>
   1037e:	|         pea 1 <_start+0x1>
   10382:	|         move.l d0,-(sp)
   10384:	|         jsr 150da <setVariable>
   1038a:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1038e:	|         moveq #28,d0
   10390:	|         add.l 32(sp),d0
   10394:	|         move.l d0,1ca84 <launchResult>

    return BR_KEEP_AND_PAUSE;
   1039a:	|         moveq #0,d0
}
   1039c:	\-------> movea.l (sp)+,a6
   1039e:	          lea 20(sp),sp
   103a2:	          rts

000103a4 <builtIn_pause>:

builtIn(pause)
{
   103a4:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103a6:	       movea.l 12(sp),a0
   103aa:	       move.l 24(a0),d0
   103ae:	       move.l d0,-(sp)
   103b0:	       pea 1 <_start+0x1>
   103b4:	       move.l sp,d0
   103b6:	       addq.l #8,d0
   103b8:	       move.l d0,-(sp)
   103ba:	       jsr 147e8 <getValueType>
   103c0:	       lea 12(sp),sp
   103c4:	       tst.w d0
   103c6:	   /-- bne.s 103cc <builtIn_pause+0x28>
   103c8:	   |   moveq #1,d0
   103ca:	/--|-- bra.s 103fa <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   103cc:	|  \-> moveq #24,d0
   103ce:	|      add.l 12(sp),d0
   103d2:	|      move.l d0,-(sp)
   103d4:	|      jsr 1516c <trimStack>
   103da:	|      addq.l #4,sp
	if (theTime > 0) {
   103dc:	|      move.l (sp),d0
   103de:	|  /-- ble.s 103f8 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   103e0:	|  |   move.l (sp),d0
   103e2:	|  |   subq.l #1,d0
   103e4:	|  |   movea.l 12(sp),a0
   103e8:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   103ec:	|  |   movea.l 12(sp),a0
   103f0:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   103f4:	|  |   moveq #0,d0
   103f6:	+--|-- bra.s 103fa <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   103f8:	|  \-> moveq #2,d0
}
   103fa:	\----> addq.l #4,sp
   103fc:	       rts

000103fe <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   103fe:	jsr 485c <completeTimers>
	return BR_CONTINUE;
   10404:	moveq #2,d0
}
   10406:	rts

00010408 <builtIn_callEvent>:

builtIn(callEvent)
{
   10408:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1040c:	       movea.l 20(sp),a0
   10410:	       move.l 24(a0),d0
   10414:	       move.l d0,-(sp)
   10416:	       pea 7 <_start+0x7>
   1041a:	       lea 8(sp),a0
   1041e:	       move.l a0,-(sp)
   10420:	       jsr 147e8 <getValueType>
   10426:	       lea 12(sp),sp
   1042a:	       tst.w d0
   1042c:	   /-- bne.s 10434 <builtIn_callEvent+0x2c>
   1042e:	   |   moveq #1,d0
   10430:	/--|-- bra.w 104ca <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10434:	|  \-> moveq #24,d0
   10436:	|      add.l 20(sp),d0
   1043a:	|      move.l d0,-(sp)
   1043c:	|      jsr 1516c <trimStack>
   10442:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10444:	|      movea.l 20(sp),a0
   10448:	|      move.l 24(a0),d0
   1044c:	|      move.l d0,-(sp)
   1044e:	|      pea 7 <_start+0x7>
   10452:	|      moveq #12,d0
   10454:	|      add.l sp,d0
   10456:	|      move.l d0,-(sp)
   10458:	|      jsr 147e8 <getValueType>
   1045e:	|      lea 12(sp),sp
   10462:	|      tst.w d0
   10464:	|  /-- bne.s 1046a <builtIn_callEvent+0x62>
   10466:	|  |   moveq #1,d0
   10468:	+--|-- bra.s 104ca <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1046a:	|  \-> moveq #24,d0
   1046c:	|      add.l 20(sp),d0
   10470:	|      move.l d0,-(sp)
   10472:	|      jsr 1516c <trimStack>
   10478:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1047a:	|      move.l (sp),d1
   1047c:	|      move.l 4(sp),d0
   10480:	|      move.l d1,-(sp)
   10482:	|      move.l d0,-(sp)
   10484:	|      jsr d566 <getCombinationFunction>
   1048a:	|      addq.l #8,sp
   1048c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10490:	|  /-- beq.s 104b0 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10492:	|  |   moveq #28,d0
   10494:	|  |   add.l 20(sp),d0
   10498:	|  |   move.l 8(sp),-(sp)
   1049c:	|  |   pea 2 <_start+0x2>
   104a0:	|  |   move.l d0,-(sp)
   104a2:	|  |   jsr 150da <setVariable>
   104a8:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   104ac:	|  |   moveq #4,d0
   104ae:	+--|-- bra.s 104ca <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   104b0:	|  \-> moveq #28,d0
   104b2:	|      add.l 20(sp),d0
   104b6:	|      clr.l -(sp)
   104b8:	|      pea 1 <_start+0x1>
   104bc:	|      move.l d0,-(sp)
   104be:	|      jsr 150da <setVariable>
   104c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104c8:	|      moveq #2,d0
}
   104ca:	\----> lea 12(sp),sp
   104ce:	       rts

000104d0 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   104d0:	move.w #1,1ca90 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   104d8:	moveq #2,d0
}
   104da:	rts

000104dc <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   104dc:	moveq #24,d0
   104de:	add.l 8(sp),d0
   104e2:	move.l d0,-(sp)
   104e4:	jsr 1516c <trimStack>
   104ea:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   104ec:	pea 19a22 <line.c.05397aaf+0x96>
   104f2:	jsr 17248 <KPrintF>
   104f8:	addq.l #4,sp
	return BR_CONTINUE;
   104fa:	moveq #2,d0
}
   104fc:	rts

000104fe <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   104fe:	pea 19a22 <line.c.05397aaf+0x96>
   10504:	jsr 17248 <KPrintF>
   1050a:	addq.l #4,sp
	return BR_CONTINUE;
   1050c:	moveq #2,d0
}
   1050e:	rts

00010510 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10510:	pea 19a22 <line.c.05397aaf+0x96>
   10516:	jsr 17248 <KPrintF>
   1051c:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1051e:	moveq #2,d0
}
   10520:	rts

00010522 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10522:	pea 19a22 <line.c.05397aaf+0x96>
   10528:	jsr 17248 <KPrintF>
   1052e:	addq.l #4,sp
	return BR_CONTINUE;
   10530:	moveq #2,d0
}
   10532:	rts

00010534 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10534:	pea 19a22 <line.c.05397aaf+0x96>
   1053a:	jsr 17248 <KPrintF>
   10540:	addq.l #4,sp
	return BR_CONTINUE;
   10542:	moveq #2,d0
}
   10544:	rts

00010546 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10546:	pea 19a22 <line.c.05397aaf+0x96>
   1054c:	jsr 17248 <KPrintF>
   10552:	addq.l #4,sp
	return BR_CONTINUE;
   10554:	moveq #2,d0
}
   10556:	rts

00010558 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10558:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1055c:	       movea.l 20(sp),a0
   10560:	       move.l 24(a0),d0
   10564:	       move.l d0,-(sp)
   10566:	       pea 1 <_start+0x1>
   1056a:	       moveq #16,d0
   1056c:	       add.l sp,d0
   1056e:	       move.l d0,-(sp)
   10570:	       jsr 147e8 <getValueType>
   10576:	       lea 12(sp),sp
   1057a:	       tst.w d0
   1057c:	   /-- bne.s 10584 <builtIn_startMusic+0x2c>
   1057e:	   |   moveq #1,d0
   10580:	/--|-- bra.w 10624 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10584:	|  \-> moveq #24,d0
   10586:	|      add.l 20(sp),d0
   1058a:	|      move.l d0,-(sp)
   1058c:	|      jsr 1516c <trimStack>
   10592:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10594:	|      movea.l 20(sp),a0
   10598:	|      move.l 24(a0),d0
   1059c:	|      move.l d0,-(sp)
   1059e:	|      pea 1 <_start+0x1>
   105a2:	|      moveq #12,d0
   105a4:	|      add.l sp,d0
   105a6:	|      move.l d0,-(sp)
   105a8:	|      jsr 147e8 <getValueType>
   105ae:	|      lea 12(sp),sp
   105b2:	|      tst.w d0
   105b4:	|  /-- bne.s 105ba <builtIn_startMusic+0x62>
   105b6:	|  |   moveq #1,d0
   105b8:	+--|-- bra.s 10624 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105ba:	|  \-> moveq #24,d0
   105bc:	|      add.l 20(sp),d0
   105c0:	|      move.l d0,-(sp)
   105c2:	|      jsr 1516c <trimStack>
   105c8:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   105ca:	|      movea.l 20(sp),a0
   105ce:	|      move.l 24(a0),d0
   105d2:	|      move.l d0,-(sp)
   105d4:	|      pea 5 <_start+0x5>
   105d8:	|      lea 8(sp),a0
   105dc:	|      move.l a0,-(sp)
   105de:	|      jsr 147e8 <getValueType>
   105e4:	|      lea 12(sp),sp
   105e8:	|      tst.w d0
   105ea:	|  /-- bne.s 105f0 <builtIn_startMusic+0x98>
   105ec:	|  |   moveq #1,d0
   105ee:	+--|-- bra.s 10624 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105f0:	|  \-> moveq #24,d0
   105f2:	|      add.l 20(sp),d0
   105f6:	|      move.l d0,-(sp)
   105f8:	|      jsr 1516c <trimStack>
   105fe:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10600:	|      movea.l 8(sp),a0
   10604:	|      move.l 4(sp),d1
   10608:	|      move.l (sp),d0
   1060a:	|      move.l a0,-(sp)
   1060c:	|      move.l d1,-(sp)
   1060e:	|      move.l d0,-(sp)
   10610:	|      jsr d172 <playMOD>
   10616:	|      lea 12(sp),sp
   1061a:	|      tst.w d0
   1061c:	|  /-- bne.s 10622 <builtIn_startMusic+0xca>
   1061e:	|  |   moveq #2,d0
   10620:	+--|-- bra.s 10624 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10622:	|  \-> moveq #2,d0
}
   10624:	\----> lea 12(sp),sp
   10628:	       rts

0001062a <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1062a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1062c:	       movea.l 12(sp),a0
   10630:	       move.l 24(a0),d0
   10634:	       move.l d0,-(sp)
   10636:	       pea 1 <_start+0x1>
   1063a:	       move.l sp,d0
   1063c:	       addq.l #8,d0
   1063e:	       move.l d0,-(sp)
   10640:	       jsr 147e8 <getValueType>
   10646:	       lea 12(sp),sp
   1064a:	       tst.w d0
   1064c:	   /-- bne.s 10652 <builtIn_stopMusic+0x28>
   1064e:	   |   moveq #1,d0
   10650:	/--|-- bra.s 10670 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10652:	|  \-> moveq #24,d0
   10654:	|      add.l 12(sp),d0
   10658:	|      move.l d0,-(sp)
   1065a:	|      jsr 1516c <trimStack>
   10660:	|      addq.l #4,sp
	stopMOD (v);
   10662:	|      move.l (sp),d0
   10664:	|      move.l d0,-(sp)
   10666:	|      jsr d20e <stopMOD>
   1066c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1066e:	|      moveq #2,d0
}
   10670:	\----> addq.l #4,sp
   10672:	       rts

00010674 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10674:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10676:	       movea.l 16(sp),a0
   1067a:	       move.l 24(a0),d0
   1067e:	       move.l d0,-(sp)
   10680:	       pea 1 <_start+0x1>
   10684:	       move.l sp,d0
   10686:	       addq.l #8,d0
   10688:	       move.l d0,-(sp)
   1068a:	       jsr 147e8 <getValueType>
   10690:	       lea 12(sp),sp
   10694:	       tst.w d0
   10696:	   /-- bne.s 1069c <builtIn_setMusicVolume+0x28>
   10698:	   |   moveq #1,d0
   1069a:	/--|-- bra.s 106f6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1069c:	|  \-> moveq #24,d0
   1069e:	|      add.l 16(sp),d0
   106a2:	|      move.l d0,-(sp)
   106a4:	|      jsr 1516c <trimStack>
   106aa:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106ac:	|      movea.l 16(sp),a0
   106b0:	|      move.l 24(a0),d0
   106b4:	|      move.l d0,-(sp)
   106b6:	|      pea 1 <_start+0x1>
   106ba:	|      moveq #12,d0
   106bc:	|      add.l sp,d0
   106be:	|      move.l d0,-(sp)
   106c0:	|      jsr 147e8 <getValueType>
   106c6:	|      lea 12(sp),sp
   106ca:	|      tst.w d0
   106cc:	|  /-- bne.s 106d2 <builtIn_setMusicVolume+0x5e>
   106ce:	|  |   moveq #1,d0
   106d0:	+--|-- bra.s 106f6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106d2:	|  \-> moveq #24,d0
   106d4:	|      add.l 16(sp),d0
   106d8:	|      move.l d0,-(sp)
   106da:	|      jsr 1516c <trimStack>
   106e0:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   106e2:	|      move.l (sp),d1
   106e4:	|      move.l 4(sp),d0
   106e8:	|      move.l d1,-(sp)
   106ea:	|      move.l d0,-(sp)
   106ec:	|      jsr d1f4 <setMusicVolume>
   106f2:	|      addq.l #8,sp
	return BR_CONTINUE;
   106f4:	|      moveq #2,d0
}
   106f6:	\----> addq.l #8,sp
   106f8:	       rts

000106fa <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   106fa:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106fc:	       movea.l 12(sp),a0
   10700:	       move.l 24(a0),d0
   10704:	       move.l d0,-(sp)
   10706:	       pea 1 <_start+0x1>
   1070a:	       move.l sp,d0
   1070c:	       addq.l #8,d0
   1070e:	       move.l d0,-(sp)
   10710:	       jsr 147e8 <getValueType>
   10716:	       lea 12(sp),sp
   1071a:	       tst.w d0
   1071c:	   /-- bne.s 10722 <builtIn_setDefaultMusicVolume+0x28>
   1071e:	   |   moveq #1,d0
   10720:	/--|-- bra.s 10740 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10722:	|  \-> moveq #24,d0
   10724:	|      add.l 12(sp),d0
   10728:	|      move.l d0,-(sp)
   1072a:	|      jsr 1516c <trimStack>
   10730:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10732:	|      move.l (sp),d0
   10734:	|      move.l d0,-(sp)
   10736:	|      jsr d1d8 <setDefaultMusicVolume>
   1073c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1073e:	|      moveq #2,d0
}
   10740:	\----> addq.l #4,sp
   10742:	       rts

00010744 <builtIn_playSound>:

builtIn(playSound)
{
   10744:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10746:	       movea.l 12(sp),a0
   1074a:	       move.l 24(a0),d0
   1074e:	       move.l d0,-(sp)
   10750:	       pea 5 <_start+0x5>
   10754:	       move.l sp,d0
   10756:	       addq.l #8,d0
   10758:	       move.l d0,-(sp)
   1075a:	       jsr 147e8 <getValueType>
   10760:	       lea 12(sp),sp
   10764:	       tst.w d0
   10766:	   /-- bne.s 1076c <builtIn_playSound+0x28>
   10768:	   |   moveq #1,d0
   1076a:	/--|-- bra.s 10794 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1076c:	|  \-> moveq #24,d0
   1076e:	|      add.l 12(sp),d0
   10772:	|      move.l d0,-(sp)
   10774:	|      jsr 1516c <trimStack>
   1077a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1077c:	|      move.l (sp),d0
   1077e:	|      clr.l -(sp)
   10780:	|      move.l d0,-(sp)
   10782:	|      jsr d1fc <startSound>
   10788:	|      addq.l #8,sp
   1078a:	|      tst.w d0
   1078c:	|  /-- bne.s 10792 <builtIn_playSound+0x4e>
   1078e:	|  |   moveq #2,d0
   10790:	+--|-- bra.s 10794 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10792:	|  \-> moveq #2,d0
}
   10794:	\----> addq.l #4,sp
   10796:	       rts

00010798 <builtIn_loopSound>:

builtIn(loopSound)
{
   10798:	             lea -28(sp),sp
   1079c:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1079e:	             tst.l 36(sp)
   107a2:	         /-- bgt.s 107b8 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   107a4:	         |   pea 19a45 <line.c.05397aaf+0xb9>
   107aa:	         |   jsr 17248 <KPrintF>
   107b0:	         |   addq.l #4,sp
		return BR_ERROR;
   107b2:	         |   moveq #1,d0
   107b4:	/--------|-- bra.w 10974 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   107b8:	|        \-> moveq #1,d0
   107ba:	|            cmp.l 36(sp),d0
   107be:	|     /----- blt.s 1081a <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   107c0:	|     |      movea.l 40(sp),a0
   107c4:	|     |      move.l 24(a0),d0
   107c8:	|     |      move.l d0,-(sp)
   107ca:	|     |      pea 5 <_start+0x5>
   107ce:	|     |      lea 16(sp),a0
   107d2:	|     |      move.l a0,-(sp)
   107d4:	|     |      jsr 147e8 <getValueType>
   107da:	|     |      lea 12(sp),sp
   107de:	|     |      tst.w d0
   107e0:	|     |  /-- bne.s 107e8 <builtIn_loopSound+0x50>
   107e2:	|     |  |   moveq #1,d0
   107e4:	+-----|--|-- bra.w 10974 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   107e8:	|     |  \-> moveq #24,d0
   107ea:	|     |      add.l 40(sp),d0
   107ee:	|     |      move.l d0,-(sp)
   107f0:	|     |      jsr 1516c <trimStack>
   107f6:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   107f8:	|     |      move.l 8(sp),d0
   107fc:	|     |      pea 1 <_start+0x1>
   10800:	|     |      move.l d0,-(sp)
   10802:	|     |      jsr d1fc <startSound>
   10808:	|     |      addq.l #8,sp
   1080a:	|     |      tst.w d0
   1080c:	|     |  /-- bne.s 10814 <builtIn_loopSound+0x7c>
   1080e:	|     |  |   moveq #2,d0
   10810:	+-----|--|-- bra.w 10974 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10814:	|     |  \-> moveq #2,d0
   10816:	+-----|----- bra.w 10974 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1081a:	|     \----> moveq #2,d1
   1081c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10820:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10824:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10828:	|            movea.l 40(sp),a0
   1082c:	|            movea.l 24(a0),a0
   10830:	|            move.l (a0),d0
   10832:	|            moveq #5,d1
   10834:	|            cmp.l d0,d1
   10836:	|  /-------- beq.w 1090e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1083a:	|  |         movea.l 40(sp),a0
   1083e:	|  |         move.l 24(a0),d0
   10842:	|  |         move.l d0,-(sp)
   10844:	|  |         pea 1 <_start+0x1>
   10848:	|  |         lea 12(sp),a0
   1084c:	|  |         move.l a0,-(sp)
   1084e:	|  |         jsr 147e8 <getValueType>
   10854:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10858:	|  |         moveq #24,d0
   1085a:	|  |         add.l 40(sp),d0
   1085e:	|  |         move.l d0,-(sp)
   10860:	|  |         jsr 1516c <trimStack>
   10866:	|  |         addq.l #4,sp
			numParams--;
   10868:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1086c:	|  +-------- bra.w 1090e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10870:	|  |  /----> movea.l 40(sp),a0
   10874:	|  |  |      move.l 24(a0),d0
   10878:	|  |  |      move.l d0,-(sp)
   1087a:	|  |  |      pea 5 <_start+0x5>
   1087e:	|  |  |      lea 16(sp),a0
   10882:	|  |  |      move.l a0,-(sp)
   10884:	|  |  |      jsr 147e8 <getValueType>
   1088a:	|  |  |      lea 12(sp),sp
   1088e:	|  |  |      tst.w d0
   10890:	|  |  |  /-- bne.s 108a6 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10892:	|  |  |  |   pea 19a83 <line.c.05397aaf+0xf7>
   10898:	|  |  |  |   jsr 17248 <KPrintF>
   1089e:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   108a0:	|  |  |  |   moveq #1,d0
   108a2:	+--|--|--|-- bra.w 10974 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   108a6:	|  |  |  \-> moveq #20,d0
   108a8:	|  |  |      move.l d0,20(sp)
   108ac:	|  |  |      clr.l 16(sp)
   108b0:	|  |  |      move.l 1c9be <SysBase>,d0
   108b6:	|  |  |      movea.l d0,a6
   108b8:	|  |  |      move.l 20(sp),d0
   108bc:	|  |  |      move.l 16(sp),d1
   108c0:	|  |  |      jsr -684(a6)
   108c4:	|  |  |      move.l d0,12(sp)
   108c8:	|  |  |      move.l 12(sp),d0
   108cc:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   108d0:	|  |  |  /-- bne.s 108d8 <builtIn_loopSound+0x140>
   108d2:	|  |  |  |   moveq #1,d0
   108d4:	+--|--|--|-- bra.w 10974 <builtIn_loopSound+0x1dc>

			s->next = old;
   108d8:	|  |  |  \-> movea.l 28(sp),a0
   108dc:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   108e2:	|  |  |      movea.l 28(sp),a0
   108e6:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   108ea:	|  |  |      move.l 8(sp),d0
   108ee:	|  |  |      movea.l 28(sp),a0
   108f2:	|  |  |      move.l d0,(a0)
			old = s;
   108f4:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   108fa:	|  |  |      moveq #24,d0
   108fc:	|  |  |      add.l 40(sp),d0
   10900:	|  |  |      move.l d0,-(sp)
   10902:	|  |  |      jsr 1516c <trimStack>
   10908:	|  |  |      addq.l #4,sp
			numParams--;
   1090a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   1090e:	|  \--|----> tst.l 36(sp)
   10912:	|     \----- bne.w 10870 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10916:	|        /-- bra.s 10922 <builtIn_loopSound+0x18a>
   10918:	|     /--|-> movea.l 28(sp),a0
   1091c:	|     |  |   move.l 4(a0),28(sp)
   10922:	|     |  \-> movea.l 28(sp),a0
   10926:	|     |      move.l 4(a0),d0
   1092a:	|     \----- bne.s 10918 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   1092c:	|            move.l 4(sp),d0
   10930:	|            moveq #1,d1
   10932:	|            cmp.l d0,d1
   10934:	|     /----- bge.s 1094c <builtIn_loopSound+0x1b4>
			s->next = old;
   10936:	|     |      movea.l 28(sp),a0
   1093a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10940:	|     |      movea.l 24(sp),a0
   10944:	|     |      move.l 28(sp),8(a0)
   1094a:	|     |  /-- bra.s 1095c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   1094c:	|     \--|-> move.l 4(sp),d0
   10950:	|        +-- beq.s 1095c <builtIn_loopSound+0x1c4>
			s->next = s;
   10952:	|        |   movea.l 28(sp),a0
   10956:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   1095c:	|        \-> movea.l 24(sp),a0
   10960:	|            moveq #-1,d0
   10962:	|            move.l d0,16(a0)
		playSoundList(old);
   10966:	|            move.l 24(sp),-(sp)
   1096a:	|            jsr d176 <playSoundList>
   10970:	|            addq.l #4,sp
		return BR_CONTINUE;
   10972:	|            moveq #2,d0
	}
}
   10974:	\----------> movea.l (sp)+,a6
   10976:	             lea 28(sp),sp
   1097a:	             rts

0001097c <builtIn_stopSound>:

builtIn(stopSound)
{
   1097c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1097e:	       movea.l 12(sp),a0
   10982:	       move.l 24(a0),d0
   10986:	       move.l d0,-(sp)
   10988:	       pea 5 <_start+0x5>
   1098c:	       move.l sp,d0
   1098e:	       addq.l #8,d0
   10990:	       move.l d0,-(sp)
   10992:	       jsr 147e8 <getValueType>
   10998:	       lea 12(sp),sp
   1099c:	       tst.w d0
   1099e:	   /-- bne.s 109a4 <builtIn_stopSound+0x28>
   109a0:	   |   moveq #1,d0
   109a2:	/--|-- bra.s 109c2 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   109a4:	|  \-> moveq #24,d0
   109a6:	|      add.l 12(sp),d0
   109aa:	|      move.l d0,-(sp)
   109ac:	|      jsr 1516c <trimStack>
   109b2:	|      addq.l #4,sp
	huntKillSound (v);
   109b4:	|      move.l (sp),d0
   109b6:	|      move.l d0,-(sp)
   109b8:	|      jsr d16e <huntKillSound>
   109be:	|      addq.l #4,sp
	return BR_CONTINUE;
   109c0:	|      moveq #2,d0
}
   109c2:	\----> addq.l #4,sp
   109c4:	       rts

000109c6 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   109c6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109c8:	       movea.l 12(sp),a0
   109cc:	       move.l 24(a0),d0
   109d0:	       move.l d0,-(sp)
   109d2:	       pea 1 <_start+0x1>
   109d6:	       move.l sp,d0
   109d8:	       addq.l #8,d0
   109da:	       move.l d0,-(sp)
   109dc:	       jsr 147e8 <getValueType>
   109e2:	       lea 12(sp),sp
   109e6:	       tst.w d0
   109e8:	   /-- bne.s 109ee <builtIn_setDefaultSoundVolume+0x28>
   109ea:	   |   moveq #1,d0
   109ec:	/--|-- bra.s 10a0c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   109ee:	|  \-> moveq #24,d0
   109f0:	|      add.l 12(sp),d0
   109f4:	|      move.l d0,-(sp)
   109f6:	|      jsr 1516c <trimStack>
   109fc:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   109fe:	|      move.l (sp),d0
   10a00:	|      move.l d0,-(sp)
   10a02:	|      jsr d1e4 <setDefaultSoundVolume>
   10a08:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a0a:	|      moveq #2,d0
}
   10a0c:	\----> addq.l #4,sp
   10a0e:	       rts

00010a10 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10a10:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a12:	       movea.l 16(sp),a0
   10a16:	       move.l 24(a0),d0
   10a1a:	       move.l d0,-(sp)
   10a1c:	       pea 1 <_start+0x1>
   10a20:	       move.l sp,d0
   10a22:	       addq.l #8,d0
   10a24:	       move.l d0,-(sp)
   10a26:	       jsr 147e8 <getValueType>
   10a2c:	       lea 12(sp),sp
   10a30:	       tst.w d0
   10a32:	   /-- bne.s 10a38 <builtIn_setSoundVolume+0x28>
   10a34:	   |   moveq #1,d0
   10a36:	/--|-- bra.s 10a92 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a38:	|  \-> moveq #24,d0
   10a3a:	|      add.l 16(sp),d0
   10a3e:	|      move.l d0,-(sp)
   10a40:	|      jsr 1516c <trimStack>
   10a46:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a48:	|      movea.l 16(sp),a0
   10a4c:	|      move.l 24(a0),d0
   10a50:	|      move.l d0,-(sp)
   10a52:	|      pea 5 <_start+0x5>
   10a56:	|      moveq #12,d0
   10a58:	|      add.l sp,d0
   10a5a:	|      move.l d0,-(sp)
   10a5c:	|      jsr 147e8 <getValueType>
   10a62:	|      lea 12(sp),sp
   10a66:	|      tst.w d0
   10a68:	|  /-- bne.s 10a6e <builtIn_setSoundVolume+0x5e>
   10a6a:	|  |   moveq #1,d0
   10a6c:	+--|-- bra.s 10a92 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a6e:	|  \-> moveq #24,d0
   10a70:	|      add.l 16(sp),d0
   10a74:	|      move.l d0,-(sp)
   10a76:	|      jsr 1516c <trimStack>
   10a7c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a7e:	|      move.l (sp),d1
   10a80:	|      move.l 4(sp),d0
   10a84:	|      move.l d1,-(sp)
   10a86:	|      move.l d0,-(sp)
   10a88:	|      jsr d1f8 <setSoundVolume>
   10a8e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a90:	|      moveq #2,d0
}
   10a92:	\----> addq.l #8,sp
   10a94:	       rts

00010a96 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10a96:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a9a:	       movea.l 20(sp),a0
   10a9e:	       move.l 24(a0),d0
   10aa2:	       move.l d0,-(sp)
   10aa4:	       pea 1 <_start+0x1>
   10aa8:	       moveq #12,d0
   10aaa:	       add.l sp,d0
   10aac:	       move.l d0,-(sp)
   10aae:	       jsr 147e8 <getValueType>
   10ab4:	       lea 12(sp),sp
   10ab8:	       tst.w d0
   10aba:	   /-- bne.s 10ac2 <builtIn_setSoundLoopPoints+0x2c>
   10abc:	   |   moveq #1,d0
   10abe:	/--|-- bra.w 10b5a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ac2:	|  \-> moveq #24,d0
   10ac4:	|      add.l 20(sp),d0
   10ac8:	|      move.l d0,-(sp)
   10aca:	|      jsr 1516c <trimStack>
   10ad0:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ad2:	|      movea.l 20(sp),a0
   10ad6:	|      move.l 24(a0),d0
   10ada:	|      move.l d0,-(sp)
   10adc:	|      pea 1 <_start+0x1>
   10ae0:	|      lea 8(sp),a0
   10ae4:	|      move.l a0,-(sp)
   10ae6:	|      jsr 147e8 <getValueType>
   10aec:	|      lea 12(sp),sp
   10af0:	|      tst.w d0
   10af2:	|  /-- bne.s 10af8 <builtIn_setSoundLoopPoints+0x62>
   10af4:	|  |   moveq #1,d0
   10af6:	+--|-- bra.s 10b5a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10af8:	|  \-> moveq #24,d0
   10afa:	|      add.l 20(sp),d0
   10afe:	|      move.l d0,-(sp)
   10b00:	|      jsr 1516c <trimStack>
   10b06:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b08:	|      movea.l 20(sp),a0
   10b0c:	|      move.l 24(a0),d0
   10b10:	|      move.l d0,-(sp)
   10b12:	|      pea 5 <_start+0x5>
   10b16:	|      moveq #16,d0
   10b18:	|      add.l sp,d0
   10b1a:	|      move.l d0,-(sp)
   10b1c:	|      jsr 147e8 <getValueType>
   10b22:	|      lea 12(sp),sp
   10b26:	|      tst.w d0
   10b28:	|  /-- bne.s 10b2e <builtIn_setSoundLoopPoints+0x98>
   10b2a:	|  |   moveq #1,d0
   10b2c:	+--|-- bra.s 10b5a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b2e:	|  \-> moveq #24,d0
   10b30:	|      add.l 20(sp),d0
   10b34:	|      move.l d0,-(sp)
   10b36:	|      jsr 1516c <trimStack>
   10b3c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10b3e:	|      movea.l 4(sp),a0
   10b42:	|      move.l (sp),d1
   10b44:	|      move.l 8(sp),d0
   10b48:	|      move.l a0,-(sp)
   10b4a:	|      move.l d1,-(sp)
   10b4c:	|      move.l d0,-(sp)
   10b4e:	|      jsr d1f0 <setSoundLoop>
   10b54:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b58:	|      moveq #2,d0
}
   10b5a:	\----> lea 12(sp),sp
   10b5e:	       rts

00010b60 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10b60:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b62:	          movea.l 12(sp),a0
   10b66:	          movea.l 24(a0),a0
   10b6a:	          move.l (a0),d0
   10b6c:	          moveq #5,d1
   10b6e:	          cmp.l d0,d1
   10b70:	/-------- bne.s 10bb4 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b72:	|         movea.l 12(sp),a0
   10b76:	|         move.l 24(a0),d0
   10b7a:	|         move.l d0,-(sp)
   10b7c:	|         pea 5 <_start+0x5>
   10b80:	|         move.l sp,d0
   10b82:	|         addq.l #8,d0
   10b84:	|         move.l d0,-(sp)
   10b86:	|         jsr 147e8 <getValueType>
   10b8c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b90:	|         moveq #24,d0
   10b92:	|         add.l 12(sp),d0
   10b96:	|         move.l d0,-(sp)
   10b98:	|         jsr 1516c <trimStack>
   10b9e:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10ba0:	|         move.l (sp),d0
   10ba2:	|         move.l d0,-(sp)
   10ba4:	|         jsr 169f2 <setFloor>
   10baa:	|         addq.l #4,sp
   10bac:	|         tst.w d0
   10bae:	|  /----- bne.s 10bca <builtIn_setFloor+0x6a>
   10bb0:	|  |      moveq #1,d0
   10bb2:	|  |  /-- bra.s 10bcc <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10bb4:	\--|--|-> moveq #24,d0
   10bb6:	   |  |   add.l 12(sp),d0
   10bba:	   |  |   move.l d0,-(sp)
   10bbc:	   |  |   jsr 1516c <trimStack>
   10bc2:	   |  |   addq.l #4,sp
		setFloorNull ();
   10bc4:	   |  |   jsr 1716c <setFloorNull>
	}
	return BR_CONTINUE;
   10bca:	   \--|-> moveq #2,d0
}
   10bcc:	      \-> addq.l #4,sp
   10bce:	          rts

00010bd0 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10bd0:	jsr 1628a <drawFloor>
	return BR_CONTINUE;
   10bd6:	moveq #2,d0
}
   10bd8:	rts

00010bda <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10bda:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10bdc:	          movea.l 12(sp),a0
   10be0:	          movea.l 24(a0),a0
   10be4:	          move.l (a0),d0
   10be6:	          moveq #5,d1
   10be8:	          cmp.l d0,d1
   10bea:	/-------- bne.s 10c2e <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10bec:	|         movea.l 12(sp),a0
   10bf0:	|         move.l 24(a0),d0
   10bf4:	|         move.l d0,-(sp)
   10bf6:	|         pea 5 <_start+0x5>
   10bfa:	|         move.l sp,d0
   10bfc:	|         addq.l #8,d0
   10bfe:	|         move.l d0,-(sp)
   10c00:	|         jsr 147e8 <getValueType>
   10c06:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10c0a:	|         moveq #24,d0
   10c0c:	|         add.l 12(sp),d0
   10c10:	|         move.l d0,-(sp)
   10c12:	|         jsr 1516c <trimStack>
   10c18:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10c1a:	|         move.l (sp),d0
   10c1c:	|         move.l d0,-(sp)
   10c1e:	|         jsr 8780 <setZBuffer>
   10c24:	|         addq.l #4,sp
   10c26:	|         tst.w d0
   10c28:	|  /----- bne.s 10c44 <builtIn_setZBuffer+0x6a>
   10c2a:	|  |      moveq #1,d0
   10c2c:	|  |  /-- bra.s 10c46 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c2e:	\--|--|-> moveq #24,d0
   10c30:	   |  |   add.l 12(sp),d0
   10c34:	   |  |   move.l d0,-(sp)
   10c36:	   |  |   jsr 1516c <trimStack>
   10c3c:	   |  |   addq.l #4,sp
		killZBuffer ();
   10c3e:	   |  |   jsr 8734 <killZBuffer>
	}
	return BR_CONTINUE;
   10c44:	   \--|-> moveq #2,d0
}
   10c46:	      \-> addq.l #4,sp
   10c48:	          rts

00010c4a <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10c4a:	pea 19aba <line.c.05397aaf+0x12e>
   10c50:	jsr 17248 <KPrintF>
   10c56:	addq.l #4,sp
	return BR_CONTINUE;
   10c58:	moveq #2,d0
}
   10c5a:	rts

00010c5c <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c5c:	          movea.l 8(sp),a0
   10c60:	          move.l 24(a0),d0
   10c64:	          move.l d0,-(sp)
   10c66:	          pea 1 <_start+0x1>
   10c6a:	          pea 1ca8c <speechMode>
   10c70:	          jsr 147e8 <getValueType>
   10c76:	          lea 12(sp),sp
   10c7a:	          tst.w d0
   10c7c:	      /-- bne.s 10c82 <builtIn_setSpeechMode+0x26>
   10c7e:	      |   moveq #1,d0
   10c80:	/-----|-- bra.s 10cba <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c82:	|     \-> moveq #24,d0
   10c84:	|         add.l 8(sp),d0
   10c88:	|         move.l d0,-(sp)
   10c8a:	|         jsr 1516c <trimStack>
   10c90:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c92:	|         move.l 1ca8c <speechMode>,d0
   10c98:	|     /-- bmi.s 10ca6 <builtIn_setSpeechMode+0x4a>
   10c9a:	|     |   move.l 1ca8c <speechMode>,d0
   10ca0:	|     |   moveq #2,d1
   10ca2:	|     |   cmp.l d0,d1
   10ca4:	|  /--|-- bge.s 10cb8 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10ca6:	|  |  \-> pea 19ad3 <line.c.05397aaf+0x147>
   10cac:	|  |      jsr 17248 <KPrintF>
   10cb2:	|  |      addq.l #4,sp
		return BR_ERROR;
   10cb4:	|  |      moveq #1,d0
   10cb6:	+--|----- bra.s 10cba <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10cb8:	|  \----> moveq #2,d0
}
   10cba:	\-------> rts

00010cbc <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10cbc:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10cbe:	       jsr 7f3c <isThereAnySpeechGoingOn>
   10cc4:	       move.l d0,(sp)
	if (i == -1) {
   10cc6:	       moveq #-1,d0
   10cc8:	       cmp.l (sp),d0
   10cca:	/----- bne.s 10ce6 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10ccc:	|      moveq #28,d0
   10cce:	|      add.l 12(sp),d0
   10cd2:	|      clr.l -(sp)
   10cd4:	|      pea 1 <_start+0x1>
   10cd8:	|      move.l d0,-(sp)
   10cda:	|      jsr 150da <setVariable>
   10ce0:	|      lea 12(sp),sp
   10ce4:	|  /-- bra.s 10cfe <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10ce6:	\--|-> moveq #28,d0
   10ce8:	   |   add.l 12(sp),d0
   10cec:	   |   move.l (sp),-(sp)
   10cee:	   |   pea 7 <_start+0x7>
   10cf2:	   |   move.l d0,-(sp)
   10cf4:	   |   jsr 150da <setVariable>
   10cfa:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10cfe:	   \-> moveq #2,d0
}
   10d00:	       addq.l #4,sp
   10d02:	       rts

00010d04 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10d04:	jsr 6216 <killSpeechTimers>
	return BR_CONTINUE;
   10d0a:	moveq #2,d0
}
   10d0c:	rts

00010d0e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10d0e:	       move.l 1cad2 <overRegion>,d0
   10d14:	/----- beq.s 10d3e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10d16:	|      movea.l 1cad2 <overRegion>,a0
   10d1c:	|      movea.l 28(a0),a0
   10d20:	|      move.l 4(a0),d1
   10d24:	|      moveq #28,d0
   10d26:	|      add.l 8(sp),d0
   10d2a:	|      move.l d1,-(sp)
   10d2c:	|      pea 7 <_start+0x7>
   10d30:	|      move.l d0,-(sp)
   10d32:	|      jsr 150da <setVariable>
   10d38:	|      lea 12(sp),sp
   10d3c:	|  /-- bra.s 10d56 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10d3e:	\--|-> moveq #28,d0
   10d40:	   |   add.l 8(sp),d0
   10d44:	   |   clr.l -(sp)
   10d46:	   |   pea 1 <_start+0x1>
   10d4a:	   |   move.l d0,-(sp)
   10d4c:	   |   jsr 150da <setVariable>
   10d52:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10d56:	   \-> moveq #2,d0
}
   10d58:	       rts

00010d5a <builtIn_rename>:

builtIn(rename)
{
   10d5a:	       lea -16(sp),sp
   10d5e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d60:	       movea.l 28(sp),a0
   10d64:	       move.l 24(a0),d0
   10d68:	       move.l d0,-(sp)
   10d6a:	       jsr 14dbe <getTextFromAnyVar>
   10d70:	       addq.l #4,sp
   10d72:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d76:	   /-- bne.s 10d7c <builtIn_rename+0x22>
   10d78:	   |   moveq #1,d0
   10d7a:	/--|-- bra.s 10df6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d7c:	|  \-> moveq #24,d0
   10d7e:	|      add.l 28(sp),d0
   10d82:	|      move.l d0,-(sp)
   10d84:	|      jsr 1516c <trimStack>
   10d8a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d8c:	|      movea.l 28(sp),a0
   10d90:	|      move.l 24(a0),d0
   10d94:	|      move.l d0,-(sp)
   10d96:	|      pea 7 <_start+0x7>
   10d9a:	|      lea 12(sp),a0
   10d9e:	|      move.l a0,-(sp)
   10da0:	|      jsr 147e8 <getValueType>
   10da6:	|      lea 12(sp),sp
   10daa:	|      tst.w d0
   10dac:	|  /-- bne.s 10db2 <builtIn_rename+0x58>
   10dae:	|  |   moveq #1,d0
   10db0:	+--|-- bra.s 10df6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10db2:	|  \-> moveq #24,d0
   10db4:	|      add.l 28(sp),d0
   10db8:	|      move.l d0,-(sp)
   10dba:	|      jsr 1516c <trimStack>
   10dc0:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10dc2:	|      move.l 4(sp),d0
   10dc6:	|      move.l d0,-(sp)
   10dc8:	|      jsr d532 <findObjectType>
   10dce:	|      addq.l #4,sp
   10dd0:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10dd4:	|      movea.l 12(sp),a0
   10dd8:	|      move.l (a0),8(sp)
   10ddc:	|      move.l 1c9be <SysBase>,d0
   10de2:	|      movea.l d0,a6
   10de4:	|      movea.l 8(sp),a1
   10de8:	|      jsr -690(a6)
	o->screenName = newText;
   10dec:	|      movea.l 12(sp),a0
   10df0:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10df4:	|      moveq #2,d0
}
   10df6:	\----> movea.l (sp)+,a6
   10df8:	       lea 16(sp),sp
   10dfc:	       rts

00010dfe <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10dfe:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e02:	          movea.l 20(sp),a0
   10e06:	          move.l 24(a0),d0
   10e0a:	          move.l d0,-(sp)
   10e0c:	          pea 7 <_start+0x7>
   10e10:	          lea 8(sp),a0
   10e14:	          move.l a0,-(sp)
   10e16:	          jsr 147e8 <getValueType>
   10e1c:	          lea 12(sp),sp
   10e20:	          tst.w d0
   10e22:	      /-- bne.s 10e2a <builtIn_getObjectX+0x2c>
   10e24:	      |   moveq #1,d0
   10e26:	/-----|-- bra.w 10ec6 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10e2a:	|     \-> moveq #24,d0
   10e2c:	|         add.l 20(sp),d0
   10e30:	|         move.l d0,-(sp)
   10e32:	|         jsr 1516c <trimStack>
   10e38:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e3a:	|         move.l (sp),d0
   10e3c:	|         move.l d0,-(sp)
   10e3e:	|         jsr a63c <findPerson>
   10e44:	|         addq.l #4,sp
   10e46:	|         move.l d0,8(sp)
	if (pers) {
   10e4a:	|     /-- beq.s 10e78 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10e4c:	|     |   movea.l 8(sp),a0
   10e50:	|     |   move.l (a0),d0
   10e52:	|     |   move.l d0,-(sp)
   10e54:	|     |   jsr 17612 <__fixsfsi>
   10e5a:	|     |   addq.l #4,sp
   10e5c:	|     |   move.l d0,d1
   10e5e:	|     |   moveq #28,d0
   10e60:	|     |   add.l 20(sp),d0
   10e64:	|     |   move.l d1,-(sp)
   10e66:	|     |   pea 1 <_start+0x1>
   10e6a:	|     |   move.l d0,-(sp)
   10e6c:	|     |   jsr 150da <setVariable>
   10e72:	|     |   lea 12(sp),sp
   10e76:	|  /--|-- bra.s 10ec4 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e78:	|  |  \-> move.l (sp),d0
   10e7a:	|  |      move.l d0,-(sp)
   10e7c:	|  |      jsr 15a2a <getRegionForObject>
   10e82:	|  |      addq.l #4,sp
   10e84:	|  |      move.l d0,4(sp)
		if (la) {
   10e88:	|  |  /-- beq.s 10eac <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e8a:	|  |  |   movea.l 4(sp),a0
   10e8e:	|  |  |   move.l 16(a0),d1
   10e92:	|  |  |   moveq #28,d0
   10e94:	|  |  |   add.l 20(sp),d0
   10e98:	|  |  |   move.l d1,-(sp)
   10e9a:	|  |  |   pea 1 <_start+0x1>
   10e9e:	|  |  |   move.l d0,-(sp)
   10ea0:	|  |  |   jsr 150da <setVariable>
   10ea6:	|  |  |   lea 12(sp),sp
   10eaa:	|  +--|-- bra.s 10ec4 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10eac:	|  |  \-> moveq #28,d0
   10eae:	|  |      add.l 20(sp),d0
   10eb2:	|  |      clr.l -(sp)
   10eb4:	|  |      pea 1 <_start+0x1>
   10eb8:	|  |      move.l d0,-(sp)
   10eba:	|  |      jsr 150da <setVariable>
   10ec0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10ec4:	|  \----> moveq #2,d0
}
   10ec6:	\-------> lea 12(sp),sp
   10eca:	          rts

00010ecc <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10ecc:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ed0:	          movea.l 20(sp),a0
   10ed4:	          move.l 24(a0),d0
   10ed8:	          move.l d0,-(sp)
   10eda:	          pea 7 <_start+0x7>
   10ede:	          lea 8(sp),a0
   10ee2:	          move.l a0,-(sp)
   10ee4:	          jsr 147e8 <getValueType>
   10eea:	          lea 12(sp),sp
   10eee:	          tst.w d0
   10ef0:	      /-- bne.s 10ef8 <builtIn_getObjectY+0x2c>
   10ef2:	      |   moveq #1,d0
   10ef4:	/-----|-- bra.w 10f96 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10ef8:	|     \-> moveq #24,d0
   10efa:	|         add.l 20(sp),d0
   10efe:	|         move.l d0,-(sp)
   10f00:	|         jsr 1516c <trimStack>
   10f06:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f08:	|         move.l (sp),d0
   10f0a:	|         move.l d0,-(sp)
   10f0c:	|         jsr a63c <findPerson>
   10f12:	|         addq.l #4,sp
   10f14:	|         move.l d0,8(sp)
	if (pers) {
   10f18:	|     /-- beq.s 10f48 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10f1a:	|     |   movea.l 8(sp),a0
   10f1e:	|     |   move.l 4(a0),d0
   10f22:	|     |   move.l d0,-(sp)
   10f24:	|     |   jsr 17612 <__fixsfsi>
   10f2a:	|     |   addq.l #4,sp
   10f2c:	|     |   move.l d0,d1
   10f2e:	|     |   moveq #28,d0
   10f30:	|     |   add.l 20(sp),d0
   10f34:	|     |   move.l d1,-(sp)
   10f36:	|     |   pea 1 <_start+0x1>
   10f3a:	|     |   move.l d0,-(sp)
   10f3c:	|     |   jsr 150da <setVariable>
   10f42:	|     |   lea 12(sp),sp
   10f46:	|  /--|-- bra.s 10f94 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f48:	|  |  \-> move.l (sp),d0
   10f4a:	|  |      move.l d0,-(sp)
   10f4c:	|  |      jsr 15a2a <getRegionForObject>
   10f52:	|  |      addq.l #4,sp
   10f54:	|  |      move.l d0,4(sp)
		if (la) {
   10f58:	|  |  /-- beq.s 10f7c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10f5a:	|  |  |   movea.l 4(sp),a0
   10f5e:	|  |  |   move.l 20(a0),d1
   10f62:	|  |  |   moveq #28,d0
   10f64:	|  |  |   add.l 20(sp),d0
   10f68:	|  |  |   move.l d1,-(sp)
   10f6a:	|  |  |   pea 1 <_start+0x1>
   10f6e:	|  |  |   move.l d0,-(sp)
   10f70:	|  |  |   jsr 150da <setVariable>
   10f76:	|  |  |   lea 12(sp),sp
   10f7a:	|  +--|-- bra.s 10f94 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f7c:	|  |  \-> moveq #28,d0
   10f7e:	|  |      add.l 20(sp),d0
   10f82:	|  |      clr.l -(sp)
   10f84:	|  |      pea 1 <_start+0x1>
   10f88:	|  |      move.l d0,-(sp)
   10f8a:	|  |      jsr 150da <setVariable>
   10f90:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f94:	|  \----> moveq #2,d0
}
   10f96:	\-------> lea 12(sp),sp
   10f9a:	          rts

00010f9c <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f9c:	       lea -32(sp),sp
   10fa0:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fa4:	       movea.l 56(sp),a0
   10fa8:	       move.l 24(a0),d0
   10fac:	       move.l d0,-(sp)
   10fae:	       pea 1 <_start+0x1>
   10fb2:	       lea 28(sp),a0
   10fb6:	       move.l a0,-(sp)
   10fb8:	       jsr 147e8 <getValueType>
   10fbe:	       lea 12(sp),sp
   10fc2:	       tst.w d0
   10fc4:	   /-- bne.s 10fcc <builtIn_addScreenRegion+0x30>
   10fc6:	   |   moveq #1,d0
   10fc8:	/--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fcc:	|  \-> moveq #24,d0
   10fce:	|      add.l 56(sp),d0
   10fd2:	|      move.l d0,-(sp)
   10fd4:	|      jsr 1516c <trimStack>
   10fda:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fdc:	|      movea.l 56(sp),a0
   10fe0:	|      move.l 24(a0),d0
   10fe4:	|      move.l d0,-(sp)
   10fe6:	|      pea 1 <_start+0x1>
   10fea:	|      moveq #48,d0
   10fec:	|      add.l sp,d0
   10fee:	|      move.l d0,-(sp)
   10ff0:	|      jsr 147e8 <getValueType>
   10ff6:	|      lea 12(sp),sp
   10ffa:	|      tst.w d0
   10ffc:	|  /-- bne.s 11004 <builtIn_addScreenRegion+0x68>
   10ffe:	|  |   moveq #1,d0
   11000:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11004:	|  \-> moveq #24,d0
   11006:	|      add.l 56(sp),d0
   1100a:	|      move.l d0,-(sp)
   1100c:	|      jsr 1516c <trimStack>
   11012:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11014:	|      movea.l 56(sp),a0
   11018:	|      move.l 24(a0),d0
   1101c:	|      move.l d0,-(sp)
   1101e:	|      pea 1 <_start+0x1>
   11022:	|      moveq #52,d0
   11024:	|      add.l sp,d0
   11026:	|      move.l d0,-(sp)
   11028:	|      jsr 147e8 <getValueType>
   1102e:	|      lea 12(sp),sp
   11032:	|      tst.w d0
   11034:	|  /-- bne.s 1103c <builtIn_addScreenRegion+0xa0>
   11036:	|  |   moveq #1,d0
   11038:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1103c:	|  \-> moveq #24,d0
   1103e:	|      add.l 56(sp),d0
   11042:	|      move.l d0,-(sp)
   11044:	|      jsr 1516c <trimStack>
   1104a:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1104c:	|      movea.l 56(sp),a0
   11050:	|      move.l 24(a0),d0
   11054:	|      move.l d0,-(sp)
   11056:	|      pea 1 <_start+0x1>
   1105a:	|      lea 32(sp),a0
   1105e:	|      move.l a0,-(sp)
   11060:	|      jsr 147e8 <getValueType>
   11066:	|      lea 12(sp),sp
   1106a:	|      tst.w d0
   1106c:	|  /-- bne.s 11074 <builtIn_addScreenRegion+0xd8>
   1106e:	|  |   moveq #1,d0
   11070:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11074:	|  \-> moveq #24,d0
   11076:	|      add.l 56(sp),d0
   1107a:	|      move.l d0,-(sp)
   1107c:	|      jsr 1516c <trimStack>
   11082:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11084:	|      movea.l 56(sp),a0
   11088:	|      move.l 24(a0),d0
   1108c:	|      move.l d0,-(sp)
   1108e:	|      pea 1 <_start+0x1>
   11092:	|      lea 36(sp),a0
   11096:	|      move.l a0,-(sp)
   11098:	|      jsr 147e8 <getValueType>
   1109e:	|      lea 12(sp),sp
   110a2:	|      tst.w d0
   110a4:	|  /-- bne.s 110ac <builtIn_addScreenRegion+0x110>
   110a6:	|  |   moveq #1,d0
   110a8:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110ac:	|  \-> moveq #24,d0
   110ae:	|      add.l 56(sp),d0
   110b2:	|      move.l d0,-(sp)
   110b4:	|      jsr 1516c <trimStack>
   110ba:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110bc:	|      movea.l 56(sp),a0
   110c0:	|      move.l 24(a0),d0
   110c4:	|      move.l d0,-(sp)
   110c6:	|      pea 1 <_start+0x1>
   110ca:	|      lea 40(sp),a0
   110ce:	|      move.l a0,-(sp)
   110d0:	|      jsr 147e8 <getValueType>
   110d6:	|      lea 12(sp),sp
   110da:	|      tst.w d0
   110dc:	|  /-- bne.s 110e4 <builtIn_addScreenRegion+0x148>
   110de:	|  |   moveq #1,d0
   110e0:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110e4:	|  \-> moveq #24,d0
   110e6:	|      add.l 56(sp),d0
   110ea:	|      move.l d0,-(sp)
   110ec:	|      jsr 1516c <trimStack>
   110f2:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110f4:	|      movea.l 56(sp),a0
   110f8:	|      move.l 24(a0),d0
   110fc:	|      move.l d0,-(sp)
   110fe:	|      pea 1 <_start+0x1>
   11102:	|      lea 44(sp),a0
   11106:	|      move.l a0,-(sp)
   11108:	|      jsr 147e8 <getValueType>
   1110e:	|      lea 12(sp),sp
   11112:	|      tst.w d0
   11114:	|  /-- bne.s 1111c <builtIn_addScreenRegion+0x180>
   11116:	|  |   moveq #1,d0
   11118:	+--|-- bra.w 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1111c:	|  \-> moveq #24,d0
   1111e:	|      add.l 56(sp),d0
   11122:	|      move.l d0,-(sp)
   11124:	|      jsr 1516c <trimStack>
   1112a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1112c:	|      movea.l 56(sp),a0
   11130:	|      move.l 24(a0),d0
   11134:	|      move.l d0,-(sp)
   11136:	|      pea 7 <_start+0x7>
   1113a:	|      lea 24(sp),a0
   1113e:	|      move.l a0,-(sp)
   11140:	|      jsr 147e8 <getValueType>
   11146:	|      lea 12(sp),sp
   1114a:	|      tst.w d0
   1114c:	|  /-- bne.s 11152 <builtIn_addScreenRegion+0x1b6>
   1114e:	|  |   moveq #1,d0
   11150:	+--|-- bra.s 111a6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11152:	|  \-> moveq #24,d0
   11154:	|      add.l 56(sp),d0
   11158:	|      move.l d0,-(sp)
   1115a:	|      jsr 1516c <trimStack>
   11160:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11162:	|      move.l 16(sp),d5
   11166:	|      move.l 20(sp),d4
   1116a:	|      move.l 40(sp),d3
   1116e:	|      move.l 44(sp),d2
   11172:	|      movea.l 24(sp),a1
   11176:	|      movea.l 28(sp),a0
   1117a:	|      move.l 32(sp),d1
   1117e:	|      move.l 36(sp),d0
   11182:	|      move.l d5,-(sp)
   11184:	|      move.l d4,-(sp)
   11186:	|      move.l d3,-(sp)
   11188:	|      move.l d2,-(sp)
   1118a:	|      move.l a1,-(sp)
   1118c:	|      move.l a0,-(sp)
   1118e:	|      move.l d1,-(sp)
   11190:	|      move.l d0,-(sp)
   11192:	|      jsr 158e4 <addScreenRegion>
   11198:	|      lea 32(sp),sp
   1119c:	|      tst.w d0
   1119e:	|  /-- beq.s 111a4 <builtIn_addScreenRegion+0x208>
   111a0:	|  |   moveq #2,d0
   111a2:	+--|-- bra.s 111a6 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   111a4:	|  \-> moveq #1,d0

}
   111a6:	\----> movem.l (sp)+,d2-d5
   111aa:	       lea 32(sp),sp
   111ae:	       rts

000111b0 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   111b0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111b2:	       movea.l 12(sp),a0
   111b6:	       move.l 24(a0),d0
   111ba:	       move.l d0,-(sp)
   111bc:	       pea 7 <_start+0x7>
   111c0:	       move.l sp,d0
   111c2:	       addq.l #8,d0
   111c4:	       move.l d0,-(sp)
   111c6:	       jsr 147e8 <getValueType>
   111cc:	       lea 12(sp),sp
   111d0:	       tst.w d0
   111d2:	   /-- bne.s 111d8 <builtIn_removeScreenRegion+0x28>
   111d4:	   |   moveq #1,d0
   111d6:	/--|-- bra.s 111f6 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   111d8:	|  \-> moveq #24,d0
   111da:	|      add.l 12(sp),d0
   111de:	|      move.l d0,-(sp)
   111e0:	|      jsr 1516c <trimStack>
   111e6:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   111e8:	|      move.l (sp),d0
   111ea:	|      move.l d0,-(sp)
   111ec:	|      jsr 15bd2 <removeScreenRegion>
   111f2:	|      addq.l #4,sp
	return BR_CONTINUE;
   111f4:	|      moveq #2,d0
}
   111f6:	\----> addq.l #4,sp
   111f8:	       rts

000111fa <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   111fa:	jsr 15d56 <showBoxes>
	return BR_CONTINUE;
   11200:	moveq #2,d0
}
   11202:	rts

00011204 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11204:	jsr 15a58 <killAllRegions>
	return BR_CONTINUE;
   1120a:	moveq #2,d0
}
   1120c:	rts

0001120e <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1120e:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11212:	       movea.l 24(sp),a0
   11216:	       move.l 24(a0),d0
   1121a:	       move.l d0,-(sp)
   1121c:	       jsr 14494 <getCostumeFromVar>
   11222:	       addq.l #4,sp
   11224:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11228:	   /-- bne.s 11230 <builtIn_addCharacter+0x22>
   1122a:	   |   moveq #1,d0
   1122c:	/--|-- bra.w 1130c <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11230:	|  \-> moveq #24,d0
   11232:	|      add.l 24(sp),d0
   11236:	|      move.l d0,-(sp)
   11238:	|      jsr 1516c <trimStack>
   1123e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11240:	|      movea.l 24(sp),a0
   11244:	|      move.l 24(a0),d0
   11248:	|      move.l d0,-(sp)
   1124a:	|      pea 1 <_start+0x1>
   1124e:	|      lea 12(sp),a0
   11252:	|      move.l a0,-(sp)
   11254:	|      jsr 147e8 <getValueType>
   1125a:	|      lea 12(sp),sp
   1125e:	|      tst.w d0
   11260:	|  /-- bne.s 11268 <builtIn_addCharacter+0x5a>
   11262:	|  |   moveq #1,d0
   11264:	+--|-- bra.w 1130c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11268:	|  \-> moveq #24,d0
   1126a:	|      add.l 24(sp),d0
   1126e:	|      move.l d0,-(sp)
   11270:	|      jsr 1516c <trimStack>
   11276:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11278:	|      movea.l 24(sp),a0
   1127c:	|      move.l 24(a0),d0
   11280:	|      move.l d0,-(sp)
   11282:	|      pea 1 <_start+0x1>
   11286:	|      moveq #16,d0
   11288:	|      add.l sp,d0
   1128a:	|      move.l d0,-(sp)
   1128c:	|      jsr 147e8 <getValueType>
   11292:	|      lea 12(sp),sp
   11296:	|      tst.w d0
   11298:	|  /-- bne.s 1129e <builtIn_addCharacter+0x90>
   1129a:	|  |   moveq #1,d0
   1129c:	+--|-- bra.s 1130c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1129e:	|  \-> moveq #24,d0
   112a0:	|      add.l 24(sp),d0
   112a4:	|      move.l d0,-(sp)
   112a6:	|      jsr 1516c <trimStack>
   112ac:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112ae:	|      movea.l 24(sp),a0
   112b2:	|      move.l 24(a0),d0
   112b6:	|      move.l d0,-(sp)
   112b8:	|      pea 7 <_start+0x7>
   112bc:	|      lea 8(sp),a0
   112c0:	|      move.l a0,-(sp)
   112c2:	|      jsr 147e8 <getValueType>
   112c8:	|      lea 12(sp),sp
   112cc:	|      tst.w d0
   112ce:	|  /-- bne.s 112d4 <builtIn_addCharacter+0xc6>
   112d0:	|  |   moveq #1,d0
   112d2:	+--|-- bra.s 1130c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112d4:	|  \-> moveq #24,d0
   112d6:	|      add.l 24(sp),d0
   112da:	|      move.l d0,-(sp)
   112dc:	|      jsr 1516c <trimStack>
   112e2:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   112e4:	|      movea.l (sp),a0
   112e6:	|      move.l 4(sp),d1
   112ea:	|      move.l 8(sp),d0
   112ee:	|      move.l 12(sp),-(sp)
   112f2:	|      move.l a0,-(sp)
   112f4:	|      move.l d1,-(sp)
   112f6:	|      move.l d0,-(sp)
   112f8:	|      jsr 9236 <addPerson>
   112fe:	|      lea 16(sp),sp
   11302:	|      tst.w d0
   11304:	|  /-- beq.s 1130a <builtIn_addCharacter+0xfc>
   11306:	|  |   moveq #2,d0
   11308:	+--|-- bra.s 1130c <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1130a:	|  \-> moveq #1,d0
}
   1130c:	\----> lea 16(sp),sp
   11310:	       rts

00011312 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11312:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11314:	       movea.l 12(sp),a0
   11318:	       move.l 24(a0),d0
   1131c:	       move.l d0,-(sp)
   1131e:	       pea 7 <_start+0x7>
   11322:	       move.l sp,d0
   11324:	       addq.l #8,d0
   11326:	       move.l d0,-(sp)
   11328:	       jsr 147e8 <getValueType>
   1132e:	       lea 12(sp),sp
   11332:	       tst.w d0
   11334:	   /-- bne.s 1133a <builtIn_hideCharacter+0x28>
   11336:	   |   moveq #1,d0
   11338:	/--|-- bra.s 1135a <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1133a:	|  \-> moveq #24,d0
   1133c:	|      add.l 12(sp),d0
   11340:	|      move.l d0,-(sp)
   11342:	|      jsr 1516c <trimStack>
   11348:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1134a:	|      move.l (sp),d0
   1134c:	|      move.l d0,-(sp)
   1134e:	|      clr.l -(sp)
   11350:	|      jsr bc70 <setShown>
   11356:	|      addq.l #8,sp
	return BR_CONTINUE;
   11358:	|      moveq #2,d0
}
   1135a:	\----> addq.l #4,sp
   1135c:	       rts

0001135e <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1135e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11360:	       movea.l 12(sp),a0
   11364:	       move.l 24(a0),d0
   11368:	       move.l d0,-(sp)
   1136a:	       pea 7 <_start+0x7>
   1136e:	       move.l sp,d0
   11370:	       addq.l #8,d0
   11372:	       move.l d0,-(sp)
   11374:	       jsr 147e8 <getValueType>
   1137a:	       lea 12(sp),sp
   1137e:	       tst.w d0
   11380:	   /-- bne.s 11386 <builtIn_showCharacter+0x28>
   11382:	   |   moveq #1,d0
   11384:	/--|-- bra.s 113a8 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11386:	|  \-> moveq #24,d0
   11388:	|      add.l 12(sp),d0
   1138c:	|      move.l d0,-(sp)
   1138e:	|      jsr 1516c <trimStack>
   11394:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11396:	|      move.l (sp),d0
   11398:	|      move.l d0,-(sp)
   1139a:	|      pea 1 <_start+0x1>
   1139e:	|      jsr bc70 <setShown>
   113a4:	|      addq.l #8,sp
	return BR_CONTINUE;
   113a6:	|      moveq #2,d0
}
   113a8:	\----> addq.l #4,sp
   113aa:	       rts

000113ac <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   113ac:	jsr 6216 <killSpeechTimers>
	killMostPeople ();
   113b2:	jsr aaa8 <killMostPeople>
	return BR_CONTINUE;
   113b8:	moveq #2,d0
}
   113ba:	rts

000113bc <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   113bc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113be:	       movea.l 16(sp),a0
   113c2:	       move.l 24(a0),d0
   113c6:	       move.l d0,-(sp)
   113c8:	       pea 1 <_start+0x1>
   113cc:	       move.l sp,d0
   113ce:	       addq.l #8,d0
   113d0:	       move.l d0,-(sp)
   113d2:	       jsr 147e8 <getValueType>
   113d8:	       lea 12(sp),sp
   113dc:	       tst.w d0
   113de:	   /-- bne.s 113e4 <builtIn_setCharacterDrawMode+0x28>
   113e0:	   |   moveq #1,d0
   113e2:	/--|-- bra.s 1143e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113e4:	|  \-> moveq #24,d0
   113e6:	|      add.l 16(sp),d0
   113ea:	|      move.l d0,-(sp)
   113ec:	|      jsr 1516c <trimStack>
   113f2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113f4:	|      movea.l 16(sp),a0
   113f8:	|      move.l 24(a0),d0
   113fc:	|      move.l d0,-(sp)
   113fe:	|      pea 7 <_start+0x7>
   11402:	|      moveq #12,d0
   11404:	|      add.l sp,d0
   11406:	|      move.l d0,-(sp)
   11408:	|      jsr 147e8 <getValueType>
   1140e:	|      lea 12(sp),sp
   11412:	|      tst.w d0
   11414:	|  /-- bne.s 1141a <builtIn_setCharacterDrawMode+0x5e>
   11416:	|  |   moveq #1,d0
   11418:	+--|-- bra.s 1143e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1141a:	|  \-> moveq #24,d0
   1141c:	|      add.l 16(sp),d0
   11420:	|      move.l d0,-(sp)
   11422:	|      jsr 1516c <trimStack>
   11428:	|      addq.l #4,sp
	setDrawMode (di, obj);
   1142a:	|      move.l 4(sp),d1
   1142e:	|      move.l (sp),d0
   11430:	|      move.l d1,-(sp)
   11432:	|      move.l d0,-(sp)
   11434:	|      jsr b5ae <setDrawMode>
   1143a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1143c:	|      moveq #2,d0
}
   1143e:	\----> addq.l #8,sp
   11440:	       rts

00011442 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11442:	pea 19b11 <line.c.05397aaf+0x185>
   11448:	jsr 17248 <KPrintF>
   1144e:	addq.l #4,sp
	return BR_CONTINUE;
   11450:	moveq #2,d0
}
   11452:	rts

00011454 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11454:	pea 19b44 <line.c.05397aaf+0x1b8>
   1145a:	jsr 17248 <KPrintF>
   11460:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11462:	moveq #2,d0
}
   11464:	rts

00011466 <builtIn_setScale>:

builtIn(setScale)
{
   11466:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11468:	       movea.l 16(sp),a0
   1146c:	       move.l 24(a0),d0
   11470:	       move.l d0,-(sp)
   11472:	       pea 1 <_start+0x1>
   11476:	       move.l sp,d0
   11478:	       addq.l #8,d0
   1147a:	       move.l d0,-(sp)
   1147c:	       jsr 147e8 <getValueType>
   11482:	       lea 12(sp),sp
   11486:	       tst.w d0
   11488:	   /-- bne.s 1148e <builtIn_setScale+0x28>
   1148a:	   |   moveq #1,d0
   1148c:	/--|-- bra.s 114f0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1148e:	|  \-> moveq #24,d0
   11490:	|      add.l 16(sp),d0
   11494:	|      move.l d0,-(sp)
   11496:	|      jsr 1516c <trimStack>
   1149c:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1149e:	|      movea.l 16(sp),a0
   114a2:	|      move.l 24(a0),d0
   114a6:	|      move.l d0,-(sp)
   114a8:	|      pea 1 <_start+0x1>
   114ac:	|      moveq #12,d0
   114ae:	|      add.l sp,d0
   114b0:	|      move.l d0,-(sp)
   114b2:	|      jsr 147e8 <getValueType>
   114b8:	|      lea 12(sp),sp
   114bc:	|      tst.w d0
   114be:	|  /-- bne.s 114c4 <builtIn_setScale+0x5e>
   114c0:	|  |   moveq #1,d0
   114c2:	+--|-- bra.s 114f0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   114c4:	|  \-> moveq #24,d0
   114c6:	|      add.l 16(sp),d0
   114ca:	|      move.l d0,-(sp)
   114cc:	|      jsr 1516c <trimStack>
   114d2:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   114d4:	|      move.l (sp),d0
   114d6:	|      move.l d0,d0
   114d8:	|      movea.w d0,a1
   114da:	|      move.l 4(sp),d0
   114de:	|      move.l d0,d0
   114e0:	|      movea.w d0,a0
   114e2:	|      move.l a1,-(sp)
   114e4:	|      move.l a0,-(sp)
   114e6:	|      jsr bc48 <setScale>
   114ec:	|      addq.l #8,sp
	return BR_CONTINUE;
   114ee:	|      moveq #2,d0
}
   114f0:	\----> addq.l #8,sp
   114f2:	       rts

000114f4 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   114f4:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114f6:	       movea.l 12(sp),a0
   114fa:	       move.l 24(a0),d0
   114fe:	       move.l d0,-(sp)
   11500:	       pea 7 <_start+0x7>
   11504:	       move.l sp,d0
   11506:	       addq.l #8,d0
   11508:	       move.l d0,-(sp)
   1150a:	       jsr 147e8 <getValueType>
   11510:	       lea 12(sp),sp
   11514:	       tst.w d0
   11516:	   /-- bne.s 1151c <builtIn_stopCharacter+0x28>
   11518:	   |   moveq #1,d0
   1151a:	/--|-- bra.s 11554 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1151c:	|  \-> moveq #24,d0
   1151e:	|      add.l 12(sp),d0
   11522:	|      move.l d0,-(sp)
   11524:	|      jsr 1516c <trimStack>
   1152a:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1152c:	|      move.l (sp),d0
   1152e:	|      move.l d0,-(sp)
   11530:	|      jsr bd7c <stopPerson>
   11536:	|      addq.l #4,sp
   11538:	|      movea.w d0,a0
   1153a:	|      moveq #28,d0
   1153c:	|      add.l 12(sp),d0
   11540:	|      move.l a0,-(sp)
   11542:	|      pea 1 <_start+0x1>
   11546:	|      move.l d0,-(sp)
   11548:	|      jsr 150da <setVariable>
   1154e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11552:	|      moveq #2,d0
}
   11554:	\----> addq.l #4,sp
   11556:	       rts

00011558 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11558:	pea 19b7e <line.c.05397aaf+0x1f2>
   1155e:	jsr 17248 <KPrintF>
   11564:	addq.l #4,sp
	return BR_CONTINUE;
   11566:	moveq #2,d0
}
   11568:	rts

0001156a <builtIn_animate>:

builtIn(animate)
{
   1156a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1156c:	       movea.l 16(sp),a0
   11570:	       move.l 24(a0),d0
   11574:	       move.l d0,-(sp)
   11576:	       jsr 14cc0 <getAnimationFromVar>
   1157c:	       addq.l #4,sp
   1157e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11582:	   /-- bne.s 11588 <builtIn_animate+0x1e>
   11584:	   |   moveq #1,d0
   11586:	/--|-- bra.s 11606 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11588:	|  \-> moveq #24,d0
   1158a:	|      add.l 16(sp),d0
   1158e:	|      move.l d0,-(sp)
   11590:	|      jsr 1516c <trimStack>
   11596:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11598:	|      movea.l 16(sp),a0
   1159c:	|      move.l 24(a0),d0
   115a0:	|      move.l d0,-(sp)
   115a2:	|      pea 7 <_start+0x7>
   115a6:	|      move.l sp,d0
   115a8:	|      addq.l #8,d0
   115aa:	|      move.l d0,-(sp)
   115ac:	|      jsr 147e8 <getValueType>
   115b2:	|      lea 12(sp),sp
   115b6:	|      tst.w d0
   115b8:	|  /-- bne.s 115be <builtIn_animate+0x54>
   115ba:	|  |   moveq #1,d0
   115bc:	+--|-- bra.s 11606 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   115be:	|  \-> moveq #24,d0
   115c0:	|      add.l 16(sp),d0
   115c4:	|      move.l d0,-(sp)
   115c6:	|      jsr 1516c <trimStack>
   115cc:	|      addq.l #4,sp
	animatePerson (obj, pp);
   115ce:	|      move.l (sp),d0
   115d0:	|      move.l 4(sp),-(sp)
   115d4:	|      move.l d0,-(sp)
   115d6:	|      jsr 94ac <animatePerson>
   115dc:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   115de:	|      move.l 4(sp),-(sp)
   115e2:	|      jsr bdd0 <timeForAnim>
   115e8:	|      addq.l #4,sp
   115ea:	|      move.l d0,d1
   115ec:	|      moveq #28,d0
   115ee:	|      add.l 16(sp),d0
   115f2:	|      move.l d1,-(sp)
   115f4:	|      pea 1 <_start+0x1>
   115f8:	|      move.l d0,-(sp)
   115fa:	|      jsr 150da <setVariable>
   11600:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11604:	|      moveq #2,d0
}
   11606:	\----> addq.l #8,sp
   11608:	       rts

0001160a <builtIn_setCostume>:

builtIn(setCostume)
{
   1160a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1160c:	       movea.l 16(sp),a0
   11610:	       move.l 24(a0),d0
   11614:	       move.l d0,-(sp)
   11616:	       jsr 14494 <getCostumeFromVar>
   1161c:	       addq.l #4,sp
   1161e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11622:	   /-- bne.s 11628 <builtIn_setCostume+0x1e>
   11624:	   |   moveq #1,d0
   11626:	/--|-- bra.s 11680 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11628:	|  \-> moveq #24,d0
   1162a:	|      add.l 16(sp),d0
   1162e:	|      move.l d0,-(sp)
   11630:	|      jsr 1516c <trimStack>
   11636:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11638:	|      movea.l 16(sp),a0
   1163c:	|      move.l 24(a0),d0
   11640:	|      move.l d0,-(sp)
   11642:	|      pea 7 <_start+0x7>
   11646:	|      move.l sp,d0
   11648:	|      addq.l #8,d0
   1164a:	|      move.l d0,-(sp)
   1164c:	|      jsr 147e8 <getValueType>
   11652:	|      lea 12(sp),sp
   11656:	|      tst.w d0
   11658:	|  /-- bne.s 1165e <builtIn_setCostume+0x54>
   1165a:	|  |   moveq #1,d0
   1165c:	+--|-- bra.s 11680 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1165e:	|  \-> moveq #24,d0
   11660:	|      add.l 16(sp),d0
   11664:	|      move.l d0,-(sp)
   11666:	|      jsr 1516c <trimStack>
   1166c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1166e:	|      move.l (sp),d0
   11670:	|      move.l 4(sp),-(sp)
   11674:	|      move.l d0,-(sp)
   11676:	|      jsr 94f6 <animatePersonUsingPersona>
   1167c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1167e:	|      moveq #2,d0
}
   11680:	\----> addq.l #8,sp
   11682:	       rts

00011684 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11684:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11686:	       movea.l 16(sp),a0
   1168a:	       move.l 24(a0),d0
   1168e:	       move.l d0,-(sp)
   11690:	       pea 1 <_start+0x1>
   11694:	       move.l sp,d0
   11696:	       addq.l #8,d0
   11698:	       move.l d0,-(sp)
   1169a:	       jsr 147e8 <getValueType>
   116a0:	       lea 12(sp),sp
   116a4:	       tst.w d0
   116a6:	   /-- bne.s 116ac <builtIn_floatCharacter+0x28>
   116a8:	   |   moveq #1,d0
   116aa:	/--|-- bra.s 11720 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116ac:	|  \-> moveq #24,d0
   116ae:	|      add.l 16(sp),d0
   116b2:	|      move.l d0,-(sp)
   116b4:	|      jsr 1516c <trimStack>
   116ba:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116bc:	|      movea.l 16(sp),a0
   116c0:	|      move.l 24(a0),d0
   116c4:	|      move.l d0,-(sp)
   116c6:	|      pea 7 <_start+0x7>
   116ca:	|      moveq #12,d0
   116cc:	|      add.l sp,d0
   116ce:	|      move.l d0,-(sp)
   116d0:	|      jsr 147e8 <getValueType>
   116d6:	|      lea 12(sp),sp
   116da:	|      tst.w d0
   116dc:	|  /-- bne.s 116e2 <builtIn_floatCharacter+0x5e>
   116de:	|  |   moveq #1,d0
   116e0:	+--|-- bra.s 11720 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116e2:	|  \-> moveq #24,d0
   116e4:	|      add.l 16(sp),d0
   116e8:	|      move.l d0,-(sp)
   116ea:	|      jsr 1516c <trimStack>
   116f0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   116f2:	|      move.l 4(sp),d1
   116f6:	|      move.l (sp),d0
   116f8:	|      move.l d1,-(sp)
   116fa:	|      move.l d0,-(sp)
   116fc:	|      jsr a66a <floatCharacter>
   11702:	|      addq.l #8,sp
   11704:	|      movea.w d0,a0
   11706:	|      moveq #28,d0
   11708:	|      add.l 16(sp),d0
   1170c:	|      move.l a0,-(sp)
   1170e:	|      pea 1 <_start+0x1>
   11712:	|      move.l d0,-(sp)
   11714:	|      jsr 150da <setVariable>
   1171a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1171e:	|      moveq #2,d0
}
   11720:	\----> addq.l #8,sp
   11722:	       rts

00011724 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11724:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11726:	       movea.l 16(sp),a0
   1172a:	       move.l 24(a0),d0
   1172e:	       move.l d0,-(sp)
   11730:	       pea 1 <_start+0x1>
   11734:	       move.l sp,d0
   11736:	       addq.l #8,d0
   11738:	       move.l d0,-(sp)
   1173a:	       jsr 147e8 <getValueType>
   11740:	       lea 12(sp),sp
   11744:	       tst.w d0
   11746:	   /-- bne.s 1174c <builtIn_setCharacterWalkSpeed+0x28>
   11748:	   |   moveq #1,d0
   1174a:	/--|-- bra.s 117c0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1174c:	|  \-> moveq #24,d0
   1174e:	|      add.l 16(sp),d0
   11752:	|      move.l d0,-(sp)
   11754:	|      jsr 1516c <trimStack>
   1175a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1175c:	|      movea.l 16(sp),a0
   11760:	|      move.l 24(a0),d0
   11764:	|      move.l d0,-(sp)
   11766:	|      pea 7 <_start+0x7>
   1176a:	|      moveq #12,d0
   1176c:	|      add.l sp,d0
   1176e:	|      move.l d0,-(sp)
   11770:	|      jsr 147e8 <getValueType>
   11776:	|      lea 12(sp),sp
   1177a:	|      tst.w d0
   1177c:	|  /-- bne.s 11782 <builtIn_setCharacterWalkSpeed+0x5e>
   1177e:	|  |   moveq #1,d0
   11780:	+--|-- bra.s 117c0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11782:	|  \-> moveq #24,d0
   11784:	|      add.l 16(sp),d0
   11788:	|      move.l d0,-(sp)
   1178a:	|      jsr 1516c <trimStack>
   11790:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11792:	|      move.l 4(sp),d1
   11796:	|      move.l (sp),d0
   11798:	|      move.l d1,-(sp)
   1179a:	|      move.l d0,-(sp)
   1179c:	|      jsr bbe4 <setCharacterWalkSpeed>
   117a2:	|      addq.l #8,sp
   117a4:	|      movea.w d0,a0
   117a6:	|      moveq #28,d0
   117a8:	|      add.l 16(sp),d0
   117ac:	|      move.l a0,-(sp)
   117ae:	|      pea 1 <_start+0x1>
   117b2:	|      move.l d0,-(sp)
   117b4:	|      jsr 150da <setVariable>
   117ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117be:	|      moveq #2,d0
}
   117c0:	\----> addq.l #8,sp
   117c2:	       rts

000117c4 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   117c4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117c6:	       movea.l 16(sp),a0
   117ca:	       move.l 24(a0),d0
   117ce:	       move.l d0,-(sp)
   117d0:	       pea 1 <_start+0x1>
   117d4:	       move.l sp,d0
   117d6:	       addq.l #8,d0
   117d8:	       move.l d0,-(sp)
   117da:	       jsr 147e8 <getValueType>
   117e0:	       lea 12(sp),sp
   117e4:	       tst.w d0
   117e6:	   /-- bne.s 117ec <builtIn_turnCharacter+0x28>
   117e8:	   |   moveq #1,d0
   117ea:	/--|-- bra.s 11860 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117ec:	|  \-> moveq #24,d0
   117ee:	|      add.l 16(sp),d0
   117f2:	|      move.l d0,-(sp)
   117f4:	|      jsr 1516c <trimStack>
   117fa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117fc:	|      movea.l 16(sp),a0
   11800:	|      move.l 24(a0),d0
   11804:	|      move.l d0,-(sp)
   11806:	|      pea 7 <_start+0x7>
   1180a:	|      moveq #12,d0
   1180c:	|      add.l sp,d0
   1180e:	|      move.l d0,-(sp)
   11810:	|      jsr 147e8 <getValueType>
   11816:	|      lea 12(sp),sp
   1181a:	|      tst.w d0
   1181c:	|  /-- bne.s 11822 <builtIn_turnCharacter+0x5e>
   1181e:	|  |   moveq #1,d0
   11820:	+--|-- bra.s 11860 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11822:	|  \-> moveq #24,d0
   11824:	|      add.l 16(sp),d0
   11828:	|      move.l d0,-(sp)
   1182a:	|      jsr 1516c <trimStack>
   11830:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11832:	|      move.l (sp),d1
   11834:	|      move.l 4(sp),d0
   11838:	|      move.l d1,-(sp)
   1183a:	|      move.l d0,-(sp)
   1183c:	|      jsr be88 <turnPersonToFace>
   11842:	|      addq.l #8,sp
   11844:	|      movea.w d0,a0
   11846:	|      moveq #28,d0
   11848:	|      add.l 16(sp),d0
   1184c:	|      move.l a0,-(sp)
   1184e:	|      pea 1 <_start+0x1>
   11852:	|      move.l d0,-(sp)
   11854:	|      jsr 150da <setVariable>
   1185a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1185e:	|      moveq #2,d0
}
   11860:	\----> addq.l #8,sp
   11862:	       rts

00011864 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11864:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11866:	       movea.l 16(sp),a0
   1186a:	       move.l 24(a0),d0
   1186e:	       move.l d0,-(sp)
   11870:	       pea 1 <_start+0x1>
   11874:	       move.l sp,d0
   11876:	       addq.l #8,d0
   11878:	       move.l d0,-(sp)
   1187a:	       jsr 147e8 <getValueType>
   11880:	       lea 12(sp),sp
   11884:	       tst.w d0
   11886:	   /-- bne.s 1188c <builtIn_setCharacterExtra+0x28>
   11888:	   |   moveq #1,d0
   1188a:	/--|-- bra.s 11900 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1188c:	|  \-> moveq #24,d0
   1188e:	|      add.l 16(sp),d0
   11892:	|      move.l d0,-(sp)
   11894:	|      jsr 1516c <trimStack>
   1189a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1189c:	|      movea.l 16(sp),a0
   118a0:	|      move.l 24(a0),d0
   118a4:	|      move.l d0,-(sp)
   118a6:	|      pea 7 <_start+0x7>
   118aa:	|      moveq #12,d0
   118ac:	|      add.l sp,d0
   118ae:	|      move.l d0,-(sp)
   118b0:	|      jsr 147e8 <getValueType>
   118b6:	|      lea 12(sp),sp
   118ba:	|      tst.w d0
   118bc:	|  /-- bne.s 118c2 <builtIn_setCharacterExtra+0x5e>
   118be:	|  |   moveq #1,d0
   118c0:	+--|-- bra.s 11900 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   118c2:	|  \-> moveq #24,d0
   118c4:	|      add.l 16(sp),d0
   118c8:	|      move.l d0,-(sp)
   118ca:	|      jsr 1516c <trimStack>
   118d0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   118d2:	|      move.l (sp),d1
   118d4:	|      move.l 4(sp),d0
   118d8:	|      move.l d1,-(sp)
   118da:	|      move.l d0,-(sp)
   118dc:	|      jsr bc12 <setPersonExtra>
   118e2:	|      addq.l #8,sp
   118e4:	|      movea.w d0,a0
   118e6:	|      moveq #28,d0
   118e8:	|      add.l 16(sp),d0
   118ec:	|      move.l a0,-(sp)
   118ee:	|      pea 1 <_start+0x1>
   118f2:	|      move.l d0,-(sp)
   118f4:	|      jsr 150da <setVariable>
   118fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118fe:	|      moveq #2,d0
}
   11900:	\----> addq.l #8,sp
   11902:	       rts

00011904 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11904:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11906:	       movea.l 12(sp),a0
   1190a:	       move.l 24(a0),d0
   1190e:	       move.l d0,-(sp)
   11910:	       pea 7 <_start+0x7>
   11914:	       move.l sp,d0
   11916:	       addq.l #8,d0
   11918:	       move.l d0,-(sp)
   1191a:	       jsr 147e8 <getValueType>
   11920:	       lea 12(sp),sp
   11924:	       tst.w d0
   11926:	   /-- bne.s 1192c <builtIn_removeCharacter+0x28>
   11928:	   |   moveq #1,d0
   1192a:	/--|-- bra.s 1194a <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   1192c:	|  \-> moveq #24,d0
   1192e:	|      add.l 12(sp),d0
   11932:	|      move.l d0,-(sp)
   11934:	|      jsr 1516c <trimStack>
   1193a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1193c:	|      move.l (sp),d0
   1193e:	|      move.l d0,-(sp)
   11940:	|      jsr ae12 <removeOneCharacter>
   11946:	|      addq.l #4,sp
	return BR_CONTINUE;
   11948:	|      moveq #2,d0
}
   1194a:	\----> addq.l #4,sp
   1194c:	       rts

0001194e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1194e:	                lea -28(sp),sp
   11952:	                move.l d2,-(sp)
   11954:	                move.l 44(sp),d1
   11958:	                move.l 48(sp),d0
   1195c:	                move.w d1,d1
   1195e:	                move.w d1,6(sp)
   11962:	                move.w d0,d0
   11964:	                move.w d0,4(sp)
	switch (numParams) {
   11968:	                moveq #2,d0
   1196a:	                cmp.l 36(sp),d0
   1196e:	      /-------- beq.w 11ab0 <moveChr+0x162>
   11972:	      |         moveq #3,d0
   11974:	      |         cmp.l 36(sp),d0
   11978:	/-----|-------- bne.w 11be4 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1197c:	|     |         movea.l 40(sp),a0
   11980:	|     |         move.l 24(a0),d0
   11984:	|     |         move.l d0,-(sp)
   11986:	|     |         pea 1 <_start+0x1>
   1198a:	|     |         lea 20(sp),a0
   1198e:	|     |         move.l a0,-(sp)
   11990:	|     |         jsr 147e8 <getValueType>
   11996:	|     |         lea 12(sp),sp
   1199a:	|     |         tst.w d0
   1199c:	|     |     /-- bne.s 119a4 <moveChr+0x56>
   1199e:	|     |     |   moveq #1,d0
   119a0:	|  /--|-----|-- bra.w 11bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119a4:	|  |  |     \-> moveq #24,d0
   119a6:	|  |  |         add.l 40(sp),d0
   119aa:	|  |  |         move.l d0,-(sp)
   119ac:	|  |  |         jsr 1516c <trimStack>
   119b2:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119b4:	|  |  |         movea.l 40(sp),a0
   119b8:	|  |  |         move.l 24(a0),d0
   119bc:	|  |  |         move.l d0,-(sp)
   119be:	|  |  |         pea 1 <_start+0x1>
   119c2:	|  |  |         lea 24(sp),a0
   119c6:	|  |  |         move.l a0,-(sp)
   119c8:	|  |  |         jsr 147e8 <getValueType>
   119ce:	|  |  |         lea 12(sp),sp
   119d2:	|  |  |         tst.w d0
   119d4:	|  |  |     /-- bne.s 119dc <moveChr+0x8e>
   119d6:	|  |  |     |   moveq #1,d0
   119d8:	|  +--|-----|-- bra.w 11bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119dc:	|  |  |     \-> moveq #24,d0
   119de:	|  |  |         add.l 40(sp),d0
   119e2:	|  |  |         move.l d0,-(sp)
   119e4:	|  |  |         jsr 1516c <trimStack>
   119ea:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119ec:	|  |  |         movea.l 40(sp),a0
   119f0:	|  |  |         move.l 24(a0),d0
   119f4:	|  |  |         move.l d0,-(sp)
   119f6:	|  |  |         pea 7 <_start+0x7>
   119fa:	|  |  |         lea 16(sp),a0
   119fe:	|  |  |         move.l a0,-(sp)
   11a00:	|  |  |         jsr 147e8 <getValueType>
   11a06:	|  |  |         lea 12(sp),sp
   11a0a:	|  |  |         tst.w d0
   11a0c:	|  |  |     /-- bne.s 11a14 <moveChr+0xc6>
   11a0e:	|  |  |     |   moveq #1,d0
   11a10:	|  +--|-----|-- bra.w 11bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a14:	|  |  |     \-> moveq #24,d0
   11a16:	|  |  |         add.l 40(sp),d0
   11a1a:	|  |  |         move.l d0,-(sp)
   11a1c:	|  |  |         jsr 1516c <trimStack>
   11a22:	|  |  |         addq.l #4,sp

			if (force) {
   11a24:	|  |  |         tst.w 6(sp)
   11a28:	|  |  |     /-- beq.s 11a58 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a2a:	|  |  |     |   movea.l 8(sp),a0
   11a2e:	|  |  |     |   move.l 12(sp),d1
   11a32:	|  |  |     |   move.l 16(sp),d0
   11a36:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a3a:	|  |  |     |   move.l 44(sp),-(sp)
   11a3e:	|  |  |     |   move.l a0,-(sp)
   11a40:	|  |  |     |   move.l d1,-(sp)
   11a42:	|  |  |     |   move.l d0,-(sp)
   11a44:	|  |  |     |   jsr a68e <forceWalkingPerson>
   11a4a:	|  |  |     |   lea 20(sp),sp
   11a4e:	|  |  |     |   tst.w d0
   11a50:	|  |  |  /--|-- beq.s 11aaa <moveChr+0x15c>
   11a52:	|  |  |  |  |   moveq #3,d0
   11a54:	|  +--|--|--|-- bra.w 11bf4 <moveChr+0x2a6>
			} else if (immediate) {
   11a58:	|  |  |  |  \-> tst.w 4(sp)
   11a5c:	|  |  |  |  /-- beq.s 11a7c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11a5e:	|  |  |  |  |   movea.l 8(sp),a0
   11a62:	|  |  |  |  |   move.l 12(sp),d1
   11a66:	|  |  |  |  |   move.l 16(sp),d0
   11a6a:	|  |  |  |  |   move.l a0,-(sp)
   11a6c:	|  |  |  |  |   move.l d1,-(sp)
   11a6e:	|  |  |  |  |   move.l d0,-(sp)
   11a70:	|  |  |  |  |   jsr a996 <jumpPerson>
   11a76:	|  |  |  |  |   lea 12(sp),sp
   11a7a:	|  |  |  +--|-- bra.s 11aaa <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a7c:	|  |  |  |  \-> movea.l 8(sp),a0
   11a80:	|  |  |  |      move.l 12(sp),d1
   11a84:	|  |  |  |      move.l 16(sp),d0
   11a88:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a8c:	|  |  |  |      move.l 44(sp),-(sp)
   11a90:	|  |  |  |      move.l a0,-(sp)
   11a92:	|  |  |  |      move.l d1,-(sp)
   11a94:	|  |  |  |      move.l d0,-(sp)
   11a96:	|  |  |  |      jsr ab66 <makeWalkingPerson>
   11a9c:	|  |  |  |      lea 20(sp),sp
   11aa0:	|  |  |  |      tst.w d0
   11aa2:	|  |  |  +----- beq.s 11aaa <moveChr+0x15c>
   11aa4:	|  |  |  |      moveq #3,d0
   11aa6:	|  +--|--|----- bra.w 11bf4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11aaa:	|  |  |  \----> moveq #2,d0
   11aac:	|  +--|-------- bra.w 11bf4 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ab0:	|  |  \-------> movea.l 40(sp),a0
   11ab4:	|  |            move.l 24(a0),d0
   11ab8:	|  |            move.l d0,-(sp)
   11aba:	|  |            pea 7 <_start+0x7>
   11abe:	|  |            moveq #32,d0
   11ac0:	|  |            add.l sp,d0
   11ac2:	|  |            move.l d0,-(sp)
   11ac4:	|  |            jsr 147e8 <getValueType>
   11aca:	|  |            lea 12(sp),sp
   11ace:	|  |            tst.w d0
   11ad0:	|  |        /-- bne.s 11ad8 <moveChr+0x18a>
   11ad2:	|  |        |   moveq #1,d0
   11ad4:	|  +--------|-- bra.w 11bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ad8:	|  |        \-> moveq #24,d0
   11ada:	|  |            add.l 40(sp),d0
   11ade:	|  |            move.l d0,-(sp)
   11ae0:	|  |            jsr 1516c <trimStack>
   11ae6:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ae8:	|  |            movea.l 40(sp),a0
   11aec:	|  |            move.l 24(a0),d0
   11af0:	|  |            move.l d0,-(sp)
   11af2:	|  |            pea 7 <_start+0x7>
   11af6:	|  |            lea 28(sp),a0
   11afa:	|  |            move.l a0,-(sp)
   11afc:	|  |            jsr 147e8 <getValueType>
   11b02:	|  |            lea 12(sp),sp
   11b06:	|  |            tst.w d0
   11b08:	|  |        /-- bne.s 11b10 <moveChr+0x1c2>
   11b0a:	|  |        |   moveq #1,d0
   11b0c:	|  +--------|-- bra.w 11bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b10:	|  |        \-> moveq #24,d0
   11b12:	|  |            add.l 40(sp),d0
   11b16:	|  |            move.l d0,-(sp)
   11b18:	|  |            jsr 1516c <trimStack>
   11b1e:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11b20:	|  |            move.l 24(sp),d0
   11b24:	|  |            move.l d0,-(sp)
   11b26:	|  |            jsr 15a2a <getRegionForObject>
   11b2c:	|  |            addq.l #4,sp
   11b2e:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11b32:	|  |        /-- bne.s 11b3a <moveChr+0x1ec>
   11b34:	|  |        |   moveq #2,d0
   11b36:	|  +--------|-- bra.w 11bf4 <moveChr+0x2a6>

			if (force)
   11b3a:	|  |        \-> tst.w 6(sp)
   11b3e:	|  |        /-- beq.s 11b7a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b40:	|  |        |   movea.l 28(sp),a0
   11b44:	|  |        |   move.l 24(a0),d2
   11b48:	|  |        |   movea.l 20(sp),a1
   11b4c:	|  |        |   movea.l 28(sp),a0
   11b50:	|  |        |   move.l 20(a0),d1
   11b54:	|  |        |   movea.l 28(sp),a0
   11b58:	|  |        |   move.l 16(a0),d0
   11b5c:	|  |        |   move.l d2,-(sp)
   11b5e:	|  |        |   move.l 44(sp),-(sp)
   11b62:	|  |        |   move.l a1,-(sp)
   11b64:	|  |        |   move.l d1,-(sp)
   11b66:	|  |        |   move.l d0,-(sp)
   11b68:	|  |        |   jsr a68e <forceWalkingPerson>
   11b6e:	|  |        |   lea 20(sp),sp
   11b72:	|  |        |   tst.w d0
   11b74:	|  |     /--|-- beq.s 11be0 <moveChr+0x292>
   11b76:	|  |     |  |   moveq #3,d0
   11b78:	|  +-----|--|-- bra.s 11bf4 <moveChr+0x2a6>
			}
			else if (immediate)
   11b7a:	|  |     |  \-> tst.w 4(sp)
   11b7e:	|  |     |  /-- beq.s 11ba6 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b80:	|  |     |  |   movea.l 20(sp),a1
   11b84:	|  |     |  |   movea.l 28(sp),a0
   11b88:	|  |     |  |   move.l 20(a0),d1
   11b8c:	|  |     |  |   movea.l 28(sp),a0
   11b90:	|  |     |  |   move.l 16(a0),d0
   11b94:	|  |     |  |   move.l a1,-(sp)
   11b96:	|  |     |  |   move.l d1,-(sp)
   11b98:	|  |     |  |   move.l d0,-(sp)
   11b9a:	|  |     |  |   jsr a996 <jumpPerson>
   11ba0:	|  |     |  |   lea 12(sp),sp
   11ba4:	|  |     +--|-- bra.s 11be0 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ba6:	|  |     |  \-> movea.l 28(sp),a0
   11baa:	|  |     |      move.l 24(a0),d2
   11bae:	|  |     |      movea.l 20(sp),a1
   11bb2:	|  |     |      movea.l 28(sp),a0
   11bb6:	|  |     |      move.l 20(a0),d1
   11bba:	|  |     |      movea.l 28(sp),a0
   11bbe:	|  |     |      move.l 16(a0),d0
   11bc2:	|  |     |      move.l d2,-(sp)
   11bc4:	|  |     |      move.l 44(sp),-(sp)
   11bc8:	|  |     |      move.l a1,-(sp)
   11bca:	|  |     |      move.l d1,-(sp)
   11bcc:	|  |     |      move.l d0,-(sp)
   11bce:	|  |     |      jsr ab66 <makeWalkingPerson>
   11bd4:	|  |     |      lea 20(sp),sp
   11bd8:	|  |     |      tst.w d0
   11bda:	|  |     +----- beq.s 11be0 <moveChr+0x292>
   11bdc:	|  |     |      moveq #3,d0
   11bde:	|  +-----|----- bra.s 11bf4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11be0:	|  |     \----> moveq #2,d0
   11be2:	|  +----------- bra.s 11bf4 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11be4:	\--|----------> pea 19b9c <line.c.05397aaf+0x210>
   11bea:	   |            jsr 17248 <KPrintF>
   11bf0:	   |            addq.l #4,sp
			return BR_ERROR;
   11bf2:	   |            moveq #1,d0
	}
}
   11bf4:	   \----------> move.l (sp)+,d2
   11bf6:	                lea 28(sp),sp
   11bfa:	                rts

00011bfc <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11bfc:	clr.l -(sp)
   11bfe:	clr.l -(sp)
   11c00:	move.l 16(sp),-(sp)
   11c04:	move.l 16(sp),-(sp)
   11c08:	jsr 1194e <moveChr>
   11c0e:	lea 16(sp),sp
}
   11c12:	rts

00011c14 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11c14:	clr.l -(sp)
   11c16:	pea 1 <_start+0x1>
   11c1a:	move.l 16(sp),-(sp)
   11c1e:	move.l 16(sp),-(sp)
   11c22:	jsr 1194e <moveChr>
   11c28:	lea 16(sp),sp
}
   11c2c:	rts

00011c2e <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11c2e:	pea 1 <_start+0x1>
   11c32:	clr.l -(sp)
   11c34:	move.l 16(sp),-(sp)
   11c38:	move.l 16(sp),-(sp)
   11c3c:	jsr 1194e <moveChr>
   11c42:	lea 16(sp),sp
}
   11c46:	rts

00011c48 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11c48:	jsr 7910 <clearStatusBar>
	return BR_CONTINUE;
   11c4e:	moveq #2,d0
}
   11c50:	rts

00011c52 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11c52:	jsr 79b8 <killLastStatus>
	return BR_CONTINUE;
   11c58:	moveq #2,d0
}
   11c5a:	rts

00011c5c <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11c5c:	jsr 78a6 <addStatusBar>
	return BR_CONTINUE;
   11c62:	moveq #2,d0
}
   11c64:	rts

00011c66 <builtIn_statusText>:

builtIn(statusText)
{
   11c66:	       subq.l #8,sp
   11c68:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c6a:	       movea.l 20(sp),a0
   11c6e:	       move.l 24(a0),d0
   11c72:	       move.l d0,-(sp)
   11c74:	       jsr 14dbe <getTextFromAnyVar>
   11c7a:	       addq.l #4,sp
   11c7c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c80:	   /-- bne.s 11c86 <builtIn_statusText+0x20>
   11c82:	   |   moveq #1,d0
   11c84:	/--|-- bra.s 11cba <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c86:	|  \-> moveq #24,d0
   11c88:	|      add.l 20(sp),d0
   11c8c:	|      move.l d0,-(sp)
   11c8e:	|      jsr 1516c <trimStack>
   11c94:	|      addq.l #4,sp
	setStatusBar(newText);
   11c96:	|      move.l 8(sp),-(sp)
   11c9a:	|      jsr 7c38 <setStatusBar>
   11ca0:	|      addq.l #4,sp
	FreeVec(newText);
   11ca2:	|      move.l 8(sp),4(sp)
   11ca8:	|      move.l 1c9be <SysBase>,d0
   11cae:	|      movea.l d0,a6
   11cb0:	|      movea.l 4(sp),a1
   11cb4:	|      jsr -690(a6)
	return BR_CONTINUE;
   11cb8:	|      moveq #2,d0
}
   11cba:	\----> movea.l (sp)+,a6
   11cbc:	       addq.l #8,sp
   11cbe:	       rts

00011cc0 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11cc0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cc2:	       movea.l 12(sp),a0
   11cc6:	       move.l 24(a0),d0
   11cca:	       move.l d0,-(sp)
   11ccc:	       pea 1 <_start+0x1>
   11cd0:	       move.l sp,d0
   11cd2:	       addq.l #8,d0
   11cd4:	       move.l d0,-(sp)
   11cd6:	       jsr 147e8 <getValueType>
   11cdc:	       lea 12(sp),sp
   11ce0:	       tst.w d0
   11ce2:	   /-- bne.s 11ce8 <builtIn_lightStatus+0x28>
   11ce4:	   |   moveq #1,d0
   11ce6:	/--|-- bra.s 11d06 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11ce8:	|  \-> moveq #24,d0
   11cea:	|      add.l 12(sp),d0
   11cee:	|      move.l d0,-(sp)
   11cf0:	|      jsr 1516c <trimStack>
   11cf6:	|      addq.l #4,sp
	setLitStatus (val);
   11cf8:	|      move.l (sp),d0
   11cfa:	|      move.l d0,-(sp)
   11cfc:	|      jsr 7c28 <setLitStatus>
   11d02:	|      addq.l #4,sp
	return BR_CONTINUE;
   11d04:	|      moveq #2,d0
}
   11d06:	\----> addq.l #4,sp
   11d08:	       rts

00011d0a <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11d0a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d0c:	       movea.l 16(sp),a0
   11d10:	       move.l 24(a0),d0
   11d14:	       move.l d0,-(sp)
   11d16:	       pea 1 <_start+0x1>
   11d1a:	       move.l sp,d0
   11d1c:	       addq.l #8,d0
   11d1e:	       move.l d0,-(sp)
   11d20:	       jsr 147e8 <getValueType>
   11d26:	       lea 12(sp),sp
   11d2a:	       tst.w d0
   11d2c:	   /-- bne.s 11d32 <builtIn_positionStatus+0x28>
   11d2e:	   |   moveq #1,d0
   11d30:	/--|-- bra.s 11d8c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d32:	|  \-> moveq #24,d0
   11d34:	|      add.l 16(sp),d0
   11d38:	|      move.l d0,-(sp)
   11d3a:	|      jsr 1516c <trimStack>
   11d40:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d42:	|      movea.l 16(sp),a0
   11d46:	|      move.l 24(a0),d0
   11d4a:	|      move.l d0,-(sp)
   11d4c:	|      pea 1 <_start+0x1>
   11d50:	|      moveq #12,d0
   11d52:	|      add.l sp,d0
   11d54:	|      move.l d0,-(sp)
   11d56:	|      jsr 147e8 <getValueType>
   11d5c:	|      lea 12(sp),sp
   11d60:	|      tst.w d0
   11d62:	|  /-- bne.s 11d68 <builtIn_positionStatus+0x5e>
   11d64:	|  |   moveq #1,d0
   11d66:	+--|-- bra.s 11d8c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d68:	|  \-> moveq #24,d0
   11d6a:	|      add.l 16(sp),d0
   11d6e:	|      move.l d0,-(sp)
   11d70:	|      jsr 1516c <trimStack>
   11d76:	|      addq.l #4,sp
	positionStatus (x, y);
   11d78:	|      move.l (sp),d1
   11d7a:	|      move.l 4(sp),d0
   11d7e:	|      move.l d1,-(sp)
   11d80:	|      move.l d0,-(sp)
   11d82:	|      jsr 7a1a <positionStatus>
   11d88:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d8a:	|      moveq #2,d0
}
   11d8c:	\----> addq.l #8,sp
   11d8e:	       rts

00011d90 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d90:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d92:	       movea.l 12(sp),a0
   11d96:	       move.l 24(a0),d0
   11d9a:	       move.l d0,-(sp)
   11d9c:	       pea 1 <_start+0x1>
   11da0:	       move.l sp,d0
   11da2:	       addq.l #8,d0
   11da4:	       move.l d0,-(sp)
   11da6:	       jsr 147e8 <getValueType>
   11dac:	       lea 12(sp),sp
   11db0:	       tst.w d0
   11db2:	   /-- bne.s 11db8 <builtIn_alignStatus+0x28>
   11db4:	   |   moveq #1,d0
   11db6:	/--|-- bra.s 11dd8 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11db8:	|  \-> moveq #24,d0
   11dba:	|      add.l 12(sp),d0
   11dbe:	|      move.l d0,-(sp)
   11dc0:	|      jsr 1516c <trimStack>
   11dc6:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11dc8:	|      move.l (sp),d0
   11dca:	|      movea.l 1c344 <nowStatus>,a0
   11dd0:	|      move.l d0,d0
   11dd2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11dd6:	|      moveq #2,d0
}
   11dd8:	\----> addq.l #4,sp
   11dda:	       rts

00011ddc <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11ddc:	             tst.l 4(sp)
   11de0:	      /----- beq.s 11dec <getFuncNumForCallback+0x10>
   11de2:	      |      moveq #1,d0
   11de4:	      |      cmp.l 4(sp),d0
   11de8:	      |  /-- beq.s 11df2 <getFuncNumForCallback+0x16>
   11dea:	   /--|--|-- bra.s 11e28 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11dec:	   |  \--|-> clr.l 12(sp)
			break;
   11df0:	/--|-----|-- bra.s 11e3a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11df2:	|  |     \-> movea.l 8(sp),a0
   11df6:	|  |         move.l 24(a0),d0
   11dfa:	|  |         move.l d0,-(sp)
   11dfc:	|  |         pea 2 <_start+0x2>
   11e00:	|  |         move.l 20(sp),-(sp)
   11e04:	|  |         jsr 147e8 <getValueType>
   11e0a:	|  |         lea 12(sp),sp
   11e0e:	|  |         tst.w d0
   11e10:	|  |     /-- bne.s 11e16 <getFuncNumForCallback+0x3a>
   11e12:	|  |     |   clr.w d0
   11e14:	|  |  /--|-- bra.s 11e3c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11e16:	|  |  |  \-> moveq #24,d0
   11e18:	|  |  |      add.l 8(sp),d0
   11e1c:	|  |  |      move.l d0,-(sp)
   11e1e:	|  |  |      jsr 1516c <trimStack>
   11e24:	|  |  |      addq.l #4,sp
			break;
   11e26:	+--|--|----- bra.s 11e3a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11e28:	|  \--|----> pea 19bd2 <line.c.05397aaf+0x246>
   11e2e:	|     |      jsr 17248 <KPrintF>
   11e34:	|     |      addq.l #4,sp
			return FALSE;
   11e36:	|     |      clr.w d0
   11e38:	|     +----- bra.s 11e3c <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11e3a:	\-----|----> moveq #1,d0
}
   11e3c:	      \----> rts

00011e3e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11e3e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e40:	       move.l sp,d0
   11e42:	       move.l d0,-(sp)
   11e44:	       move.l 16(sp),-(sp)
   11e48:	       move.l 16(sp),-(sp)
   11e4c:	       jsr 11ddc <getFuncNumForCallback>
   11e52:	       lea 12(sp),sp
   11e56:	       tst.w d0
   11e58:	/----- beq.s 11e68 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11e5a:	|      movea.l 1c336 <currentEvents>,a0
   11e60:	|      move.l (sp),d0
   11e62:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11e64:	|      moveq #2,d0
   11e66:	|  /-- bra.s 11e6a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11e68:	\--|-> moveq #1,d0
}
   11e6a:	   \-> addq.l #4,sp
   11e6c:	       rts

00011e6e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11e6e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e70:	       move.l sp,d0
   11e72:	       move.l d0,-(sp)
   11e74:	       move.l 16(sp),-(sp)
   11e78:	       move.l 16(sp),-(sp)
   11e7c:	       jsr 11ddc <getFuncNumForCallback>
   11e82:	       lea 12(sp),sp
   11e86:	       tst.w d0
   11e88:	/----- beq.s 11e9a <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e8a:	|      movea.l 1c336 <currentEvents>,a0
   11e90:	|      move.l (sp),d0
   11e92:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11e96:	|      moveq #2,d0
   11e98:	|  /-- bra.s 11e9c <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e9a:	\--|-> moveq #1,d0
}
   11e9c:	   \-> addq.l #4,sp
   11e9e:	       rts

00011ea0 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11ea0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ea2:	       move.l sp,d0
   11ea4:	       move.l d0,-(sp)
   11ea6:	       move.l 16(sp),-(sp)
   11eaa:	       move.l 16(sp),-(sp)
   11eae:	       jsr 11ddc <getFuncNumForCallback>
   11eb4:	       lea 12(sp),sp
   11eb8:	       tst.w d0
   11eba:	/----- beq.s 11ecc <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ebc:	|      movea.l 1c336 <currentEvents>,a0
   11ec2:	|      move.l (sp),d0
   11ec4:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11ec8:	|      moveq #2,d0
   11eca:	|  /-- bra.s 11ece <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11ecc:	\--|-> moveq #1,d0
}
   11ece:	   \-> addq.l #4,sp
   11ed0:	       rts

00011ed2 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11ed2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ed4:	       move.l sp,d0
   11ed6:	       move.l d0,-(sp)
   11ed8:	       move.l 16(sp),-(sp)
   11edc:	       move.l 16(sp),-(sp)
   11ee0:	       jsr 11ddc <getFuncNumForCallback>
   11ee6:	       lea 12(sp),sp
   11eea:	       tst.w d0
   11eec:	/----- beq.s 11efe <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11eee:	|      movea.l 1c336 <currentEvents>,a0
   11ef4:	|      move.l (sp),d0
   11ef6:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11efa:	|      moveq #2,d0
   11efc:	|  /-- bra.s 11f00 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11efe:	\--|-> moveq #1,d0
}
   11f00:	   \-> addq.l #4,sp
   11f02:	       rts

00011f04 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11f04:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f06:	       move.l sp,d0
   11f08:	       move.l d0,-(sp)
   11f0a:	       move.l 16(sp),-(sp)
   11f0e:	       move.l 16(sp),-(sp)
   11f12:	       jsr 11ddc <getFuncNumForCallback>
   11f18:	       lea 12(sp),sp
   11f1c:	       tst.w d0
   11f1e:	/----- beq.s 11f30 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11f20:	|      movea.l 1c336 <currentEvents>,a0
   11f26:	|      move.l (sp),d0
   11f28:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11f2c:	|      moveq #2,d0
   11f2e:	|  /-- bra.s 11f32 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11f30:	\--|-> moveq #1,d0
}
   11f32:	   \-> addq.l #4,sp
   11f34:	       rts

00011f36 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11f36:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f38:	       move.l sp,d0
   11f3a:	       move.l d0,-(sp)
   11f3c:	       move.l 16(sp),-(sp)
   11f40:	       move.l 16(sp),-(sp)
   11f44:	       jsr 11ddc <getFuncNumForCallback>
   11f4a:	       lea 12(sp),sp
   11f4e:	       tst.w d0
   11f50:	/----- beq.s 11f62 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11f52:	|      movea.l 1c336 <currentEvents>,a0
   11f58:	|      move.l (sp),d0
   11f5a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11f5e:	|      moveq #2,d0
   11f60:	|  /-- bra.s 11f64 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f62:	\--|-> moveq #1,d0
}
   11f64:	   \-> addq.l #4,sp
   11f66:	       rts

00011f68 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f68:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f6a:	       move.l sp,d0
   11f6c:	       move.l d0,-(sp)
   11f6e:	       move.l 16(sp),-(sp)
   11f72:	       move.l 16(sp),-(sp)
   11f76:	       jsr 11ddc <getFuncNumForCallback>
   11f7c:	       lea 12(sp),sp
   11f80:	       tst.w d0
   11f82:	/----- beq.s 11f94 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f84:	|      movea.l 1c336 <currentEvents>,a0
   11f8a:	|      move.l (sp),d0
   11f8c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11f90:	|      moveq #2,d0
   11f92:	|  /-- bra.s 11f96 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11f94:	\--|-> moveq #1,d0
}
   11f96:	   \-> addq.l #4,sp
   11f98:	       rts

00011f9a <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11f9a:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f9c:	          move.l sp,d0
   11f9e:	          move.l d0,-(sp)
   11fa0:	          move.l 16(sp),-(sp)
   11fa4:	          move.l 16(sp),-(sp)
   11fa8:	          jsr 11ddc <getFuncNumForCallback>
   11fae:	          lea 12(sp),sp
   11fb2:	          tst.w d0
   11fb4:	/-------- beq.s 11fe0 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11fb6:	|         move.l 1c98e <noStack>,d1
   11fbc:	|         move.l (sp),d0
   11fbe:	|         pea 1 <_start+0x1>
   11fc2:	|         move.l d1,-(sp)
   11fc4:	|         clr.l -(sp)
   11fc6:	|         clr.l -(sp)
   11fc8:	|         move.l d0,-(sp)
   11fca:	|         jsr 6aea <startNewFunctionNum>
   11fd0:	|         lea 20(sp),sp
   11fd4:	|         tst.l d0
   11fd6:	|     /-- bne.s 11fdc <builtIn_spawnSub+0x42>
   11fd8:	|     |   moveq #1,d0
   11fda:	|  /--|-- bra.s 11fe2 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11fdc:	|  |  \-> moveq #2,d0
   11fde:	|  +----- bra.s 11fe2 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11fe0:	\--|----> moveq #1,d0
}
   11fe2:	   \----> addq.l #4,sp
   11fe4:	          rts

00011fe6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11fe6:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fe8:	          move.l sp,d0
   11fea:	          addq.l #4,d0
   11fec:	          move.l d0,-(sp)
   11fee:	          move.l 20(sp),-(sp)
   11ff2:	          move.l 20(sp),-(sp)
   11ff6:	          jsr 11ddc <getFuncNumForCallback>
   11ffc:	          lea 12(sp),sp
   12000:	          tst.w d0
   12002:	/-------- beq.s 12038 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12004:	|         move.l 4(sp),d1
   12008:	|         move.l sp,d0
   1200a:	|         addq.l #2,d0
   1200c:	|         move.l d0,-(sp)
   1200e:	|         move.l 20(sp),-(sp)
   12012:	|         move.l d1,-(sp)
   12014:	|         jsr 4810 <cancelAFunction>
   1201a:	|         lea 12(sp),sp
		if (killedMyself) {
   1201e:	|         move.w 2(sp),d0
   12022:	|  /----- beq.s 12034 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12024:	|  |      move.l 16(sp),-(sp)
   12028:	|  |      jsr 472e <abortFunction>
   1202e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12030:	|  |      moveq #5,d0
   12032:	|  |  /-- bra.s 1203a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12034:	|  \--|-> moveq #2,d0
   12036:	|     +-- bra.s 1203a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12038:	\-----|-> moveq #1,d0
}
   1203a:	      \-> addq.l #8,sp
   1203c:	          rts

0001203e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1203e:	       subq.l #8,sp
   12040:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12042:	       movea.l 20(sp),a0
   12046:	       move.l 24(a0),d0
   1204a:	       move.l d0,-(sp)
   1204c:	       jsr 14dbe <getTextFromAnyVar>
   12052:	       addq.l #4,sp
   12054:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12058:	   /-- bne.s 1205e <builtIn_stringWidth+0x20>
   1205a:	   |   moveq #1,d0
   1205c:	/--|-- bra.s 120ac <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1205e:	|  \-> moveq #24,d0
   12060:	|      add.l 20(sp),d0
   12064:	|      move.l d0,-(sp)
   12066:	|      jsr 1516c <trimStack>
   1206c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1206e:	|      move.l 8(sp),-(sp)
   12072:	|      jsr 158ca <stringWidth>
   12078:	|      addq.l #4,sp
   1207a:	|      move.l d0,d1
   1207c:	|      moveq #28,d0
   1207e:	|      add.l 20(sp),d0
   12082:	|      move.l d1,-(sp)
   12084:	|      pea 1 <_start+0x1>
   12088:	|      move.l d0,-(sp)
   1208a:	|      jsr 150da <setVariable>
   12090:	|      lea 12(sp),sp
	FreeVec(theText);
   12094:	|      move.l 8(sp),4(sp)
   1209a:	|      move.l 1c9be <SysBase>,d0
   120a0:	|      movea.l d0,a6
   120a2:	|      movea.l 4(sp),a1
   120a6:	|      jsr -690(a6)
	return BR_CONTINUE;
   120aa:	|      moveq #2,d0
}
   120ac:	\----> movea.l (sp)+,a6
   120ae:	       addq.l #8,sp
   120b0:	       rts

000120b2 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   120b2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120b4:	       movea.l 12(sp),a0
   120b8:	       move.l 24(a0),d0
   120bc:	       move.l d0,-(sp)
   120be:	       pea 1 <_start+0x1>
   120c2:	       move.l sp,d0
   120c4:	       addq.l #8,d0
   120c6:	       move.l d0,-(sp)
   120c8:	       jsr 147e8 <getValueType>
   120ce:	       lea 12(sp),sp
   120d2:	       tst.w d0
   120d4:	   /-- bne.s 120da <builtIn_hardScroll+0x28>
   120d6:	   |   moveq #1,d0
   120d8:	/--|-- bra.s 120f8 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   120da:	|  \-> moveq #24,d0
   120dc:	|      add.l 12(sp),d0
   120e0:	|      move.l d0,-(sp)
   120e2:	|      jsr 1516c <trimStack>
   120e8:	|      addq.l #4,sp
	hardScroll (v);
   120ea:	|      move.l (sp),d0
   120ec:	|      move.l d0,-(sp)
   120ee:	|      jsr d284 <hardScroll>
   120f4:	|      addq.l #4,sp
	return BR_CONTINUE;
   120f6:	|      moveq #2,d0
}
   120f8:	\----> addq.l #4,sp
   120fa:	       rts

000120fc <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   120fc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120fe:	       movea.l 12(sp),a0
   12102:	       move.l 24(a0),d0
   12106:	       move.l d0,-(sp)
   12108:	       pea 7 <_start+0x7>
   1210c:	       move.l sp,d0
   1210e:	       addq.l #8,d0
   12110:	       move.l d0,-(sp)
   12112:	       jsr 147e8 <getValueType>
   12118:	       lea 12(sp),sp
   1211c:	       tst.w d0
   1211e:	   /-- bne.s 12124 <builtIn_isScreenRegion+0x28>
   12120:	   |   moveq #1,d0
   12122:	/--|-- bra.s 12164 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12124:	|  \-> moveq #24,d0
   12126:	|      add.l 12(sp),d0
   1212a:	|      move.l d0,-(sp)
   1212c:	|      jsr 1516c <trimStack>
   12132:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12134:	|      move.l (sp),d0
   12136:	|      move.l d0,-(sp)
   12138:	|      jsr 15a2a <getRegionForObject>
   1213e:	|      addq.l #4,sp
   12140:	|      tst.l d0
   12142:	|      sne d0
   12144:	|      neg.b d0
   12146:	|      moveq #0,d1
   12148:	|      move.b d0,d1
   1214a:	|      moveq #28,d0
   1214c:	|      add.l 12(sp),d0
   12150:	|      move.l d1,-(sp)
   12152:	|      pea 1 <_start+0x1>
   12156:	|      move.l d0,-(sp)
   12158:	|      jsr 150da <setVariable>
   1215e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12162:	|      moveq #2,d0
}
   12164:	\----> addq.l #4,sp
   12166:	       rts

00012168 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12168:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1216a:	       movea.l 12(sp),a0
   1216e:	       move.l 24(a0),d0
   12172:	       move.l d0,-(sp)
   12174:	       pea 1 <_start+0x1>
   12178:	       move.l sp,d0
   1217a:	       addq.l #8,d0
   1217c:	       move.l d0,-(sp)
   1217e:	       jsr 147e8 <getValueType>
   12184:	       lea 12(sp),sp
   12188:	       tst.w d0
   1218a:	   /-- bne.s 12190 <builtIn_setSpeechSpeed+0x28>
   1218c:	   |   moveq #1,d0
   1218e:	/--|-- bra.s 121de <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12190:	|  \-> moveq #24,d0
   12192:	|      add.l 12(sp),d0
   12196:	|      move.l d0,-(sp)
   12198:	|      jsr 1516c <trimStack>
   1219e:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   121a0:	|      move.l (sp),d0
   121a2:	|      move.l d0,-(sp)
   121a4:	|      jsr 1767a <__floatsisf>
   121aa:	|      addq.l #4,sp
   121ac:	|      move.l #1008981770,-(sp)
   121b2:	|      move.l d0,-(sp)
   121b4:	|      jsr 1772c <__mulsf3>
   121ba:	|      addq.l #8,sp
   121bc:	|      move.l d0,1c348 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   121c2:	|      moveq #28,d0
   121c4:	|      add.l 12(sp),d0
   121c8:	|      pea 1 <_start+0x1>
   121cc:	|      pea 1 <_start+0x1>
   121d0:	|      move.l d0,-(sp)
   121d2:	|      jsr 150da <setVariable>
   121d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121dc:	|      moveq #2,d0
}
   121de:	\----> addq.l #4,sp
   121e0:	       rts

000121e2 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   121e2:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121e4:	       movea.l 12(sp),a0
   121e8:	       move.l 24(a0),d0
   121ec:	       move.l d0,-(sp)
   121ee:	       pea 1 <_start+0x1>
   121f2:	       move.l sp,d0
   121f4:	       addq.l #8,d0
   121f6:	       move.l d0,-(sp)
   121f8:	       jsr 147e8 <getValueType>
   121fe:	       lea 12(sp),sp
   12202:	       tst.w d0
   12204:	   /-- bne.s 1220a <builtIn_setFontSpacing+0x28>
   12206:	   |   moveq #1,d0
   12208:	/--|-- bra.s 12240 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1220a:	|  \-> move.l (sp),d0
   1220c:	|      move.l d0,d0
   1220e:	|      move.w d0,1c8c2 <fontSpace>
	trimStack (&fun -> stack);
   12214:	|      moveq #24,d0
   12216:	|      add.l 12(sp),d0
   1221a:	|      move.l d0,-(sp)
   1221c:	|      jsr 1516c <trimStack>
   12222:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12224:	|      moveq #28,d0
   12226:	|      add.l 12(sp),d0
   1222a:	|      pea 1 <_start+0x1>
   1222e:	|      pea 1 <_start+0x1>
   12232:	|      move.l d0,-(sp)
   12234:	|      jsr 150da <setVariable>
   1223a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1223e:	|      moveq #2,d0
}
   12240:	\----> addq.l #4,sp
   12242:	       rts

00012244 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12244:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12246:	          movea.l 12(sp),a0
   1224a:	          move.l 24(a0),d0
   1224e:	          move.l d0,-(sp)
   12250:	          pea 1 <_start+0x1>
   12254:	          move.l sp,d0
   12256:	          addq.l #8,d0
   12258:	          move.l d0,-(sp)
   1225a:	          jsr 147e8 <getValueType>
   12260:	          lea 12(sp),sp
   12264:	          tst.w d0
   12266:	      /-- bne.s 1226c <builtIn_transitionLevel+0x28>
   12268:	      |   moveq #1,d0
   1226a:	/-----|-- bra.s 122c0 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1226c:	|     \-> moveq #24,d0
   1226e:	|         add.l 12(sp),d0
   12272:	|         move.l d0,-(sp)
   12274:	|         jsr 1516c <trimStack>
   1227a:	|         addq.l #4,sp

	if (number < 0)
   1227c:	|         move.l (sp),d0
   1227e:	|     /-- bpl.s 12288 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12280:	|     |   clr.b 1c334 <brightnessLevel>
   12286:	|  /--|-- bra.s 122a4 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12288:	|  |  \-> move.l (sp),d0
   1228a:	|  |      cmpi.l #255,d0
   12290:	|  |  /-- ble.s 1229a <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12292:	|  |  |   st 1c334 <brightnessLevel>
   12298:	|  +--|-- bra.s 122a4 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1229a:	|  |  \-> move.l (sp),d0
   1229c:	|  |      move.l d0,d0
   1229e:	|  |      move.b d0,1c334 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   122a4:	|  \----> moveq #28,d0
   122a6:	|         add.l 12(sp),d0
   122aa:	|         pea 1 <_start+0x1>
   122ae:	|         pea 1 <_start+0x1>
   122b2:	|         move.l d0,-(sp)
   122b4:	|         jsr 150da <setVariable>
   122ba:	|         lea 12(sp),sp
	return BR_CONTINUE;
   122be:	|         moveq #2,d0
}
   122c0:	\-------> addq.l #4,sp
   122c2:	          rts

000122c4 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   122c4:	movea.l 8(sp),a0
   122c8:	move.l 24(a0),d0
   122cc:	move.l d0,-(sp)
   122ce:	jsr 14d28 <getBoolean>
   122d4:	addq.l #4,sp
   122d6:	move.w d0,1c95e <captureAllKeys>
	trimStack (&fun -> stack);
   122dc:	moveq #24,d0
   122de:	add.l 8(sp),d0
   122e2:	move.l d0,-(sp)
   122e4:	jsr 1516c <trimStack>
   122ea:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   122ec:	move.w 1c95e <captureAllKeys>,d0
   122f2:	movea.w d0,a0
   122f4:	moveq #28,d0
   122f6:	add.l 8(sp),d0
   122fa:	move.l a0,-(sp)
   122fc:	pea 1 <_start+0x1>
   12300:	move.l d0,-(sp)
   12302:	jsr 150da <setVariable>
   12308:	lea 12(sp),sp
	return BR_CONTINUE;
   1230c:	moveq #2,d0
}
   1230e:	rts

00012310 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12310:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12314:	       movea.l 20(sp),a0
   12318:	       move.l 24(a0),d0
   1231c:	       move.l d0,-(sp)
   1231e:	       pea 1 <_start+0x1>
   12322:	       moveq #12,d0
   12324:	       add.l sp,d0
   12326:	       move.l d0,-(sp)
   12328:	       jsr 147e8 <getValueType>
   1232e:	       lea 12(sp),sp
   12332:	       tst.w d0
   12334:	   /-- bne.s 1233c <builtIn_spinCharacter+0x2c>
   12336:	   |   moveq #1,d0
   12338:	/--|-- bra.w 123ec <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1233c:	|  \-> moveq #24,d0
   1233e:	|      add.l 20(sp),d0
   12342:	|      move.l d0,-(sp)
   12344:	|      jsr 1516c <trimStack>
   1234a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1234c:	|      movea.l 20(sp),a0
   12350:	|      move.l 24(a0),d0
   12354:	|      move.l d0,-(sp)
   12356:	|      pea 7 <_start+0x7>
   1235a:	|      lea 8(sp),a0
   1235e:	|      move.l a0,-(sp)
   12360:	|      jsr 147e8 <getValueType>
   12366:	|      lea 12(sp),sp
   1236a:	|      tst.w d0
   1236c:	|  /-- bne.s 12372 <builtIn_spinCharacter+0x62>
   1236e:	|  |   moveq #1,d0
   12370:	+--|-- bra.s 123ec <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12372:	|  \-> moveq #24,d0
   12374:	|      add.l 20(sp),d0
   12378:	|      move.l d0,-(sp)
   1237a:	|      jsr 1516c <trimStack>
   12380:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12382:	|      move.l (sp),d0
   12384:	|      move.l d0,-(sp)
   12386:	|      jsr a63c <findPerson>
   1238c:	|      addq.l #4,sp
   1238e:	|      move.l d0,8(sp)
	if (thisPerson) {
   12392:	|  /-- beq.s 123d2 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12394:	|  |   move.l 4(sp),d0
   12398:	|  |   movea.l 8(sp),a0
   1239c:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   123a0:	|  |   movea.l 8(sp),a0
   123a4:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   123aa:	|  |   movea.l 8(sp),a0
   123ae:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   123b4:	|  |   moveq #28,d0
   123b6:	|  |   add.l 20(sp),d0
   123ba:	|  |   pea 1 <_start+0x1>
   123be:	|  |   pea 1 <_start+0x1>
   123c2:	|  |   move.l d0,-(sp)
   123c4:	|  |   jsr 150da <setVariable>
   123ca:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   123ce:	|  |   moveq #3,d0
   123d0:	+--|-- bra.s 123ec <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123d2:	|  \-> moveq #28,d0
   123d4:	|      add.l 20(sp),d0
   123d8:	|      clr.l -(sp)
   123da:	|      pea 1 <_start+0x1>
   123de:	|      move.l d0,-(sp)
   123e0:	|      jsr 150da <setVariable>
   123e6:	|      lea 12(sp),sp
		return BR_CONTINUE;
   123ea:	|      moveq #2,d0
	}
}
   123ec:	\----> lea 12(sp),sp
   123f0:	       rts

000123f2 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   123f2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123f4:	          movea.l 16(sp),a0
   123f8:	          move.l 24(a0),d0
   123fc:	          move.l d0,-(sp)
   123fe:	          pea 7 <_start+0x7>
   12402:	          move.l sp,d0
   12404:	          addq.l #8,d0
   12406:	          move.l d0,-(sp)
   12408:	          jsr 147e8 <getValueType>
   1240e:	          lea 12(sp),sp
   12412:	          tst.w d0
   12414:	      /-- bne.s 1241a <builtIn_getCharacterDirection+0x28>
   12416:	      |   moveq #1,d0
   12418:	/-----|-- bra.s 12478 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1241a:	|     \-> moveq #24,d0
   1241c:	|         add.l 16(sp),d0
   12420:	|         move.l d0,-(sp)
   12422:	|         jsr 1516c <trimStack>
   12428:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1242a:	|         move.l (sp),d0
   1242c:	|         move.l d0,-(sp)
   1242e:	|         jsr a63c <findPerson>
   12434:	|         addq.l #4,sp
   12436:	|         move.l d0,4(sp)
	if (thisPerson) {
   1243a:	|  /----- beq.s 1245e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1243c:	|  |      movea.l 4(sp),a0
   12440:	|  |      move.l 106(a0),d1
   12444:	|  |      moveq #28,d0
   12446:	|  |      add.l 16(sp),d0
   1244a:	|  |      move.l d1,-(sp)
   1244c:	|  |      pea 1 <_start+0x1>
   12450:	|  |      move.l d0,-(sp)
   12452:	|  |      jsr 150da <setVariable>
   12458:	|  |      lea 12(sp),sp
   1245c:	|  |  /-- bra.s 12476 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1245e:	|  \--|-> moveq #28,d0
   12460:	|     |   add.l 16(sp),d0
   12464:	|     |   clr.l -(sp)
   12466:	|     |   pea 1 <_start+0x1>
   1246a:	|     |   move.l d0,-(sp)
   1246c:	|     |   jsr 150da <setVariable>
   12472:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12476:	|     \-> moveq #2,d0
}
   12478:	\-------> addq.l #8,sp
   1247a:	          rts

0001247c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1247c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1247e:	       movea.l 16(sp),a0
   12482:	       move.l 24(a0),d0
   12486:	       move.l d0,-(sp)
   12488:	       pea 7 <_start+0x7>
   1248c:	       move.l sp,d0
   1248e:	       addq.l #8,d0
   12490:	       move.l d0,-(sp)
   12492:	       jsr 147e8 <getValueType>
   12498:	       lea 12(sp),sp
   1249c:	       tst.w d0
   1249e:	   /-- bne.s 124a4 <builtIn_isCharacter+0x28>
   124a0:	   |   moveq #1,d0
   124a2:	/--|-- bra.s 124e6 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   124a4:	|  \-> moveq #24,d0
   124a6:	|      add.l 16(sp),d0
   124aa:	|      move.l d0,-(sp)
   124ac:	|      jsr 1516c <trimStack>
   124b2:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124b4:	|      move.l (sp),d0
   124b6:	|      move.l d0,-(sp)
   124b8:	|      jsr a63c <findPerson>
   124be:	|      addq.l #4,sp
   124c0:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   124c4:	|      sne d0
   124c6:	|      neg.b d0
   124c8:	|      moveq #0,d1
   124ca:	|      move.b d0,d1
   124cc:	|      moveq #28,d0
   124ce:	|      add.l 16(sp),d0
   124d2:	|      move.l d1,-(sp)
   124d4:	|      pea 1 <_start+0x1>
   124d8:	|      move.l d0,-(sp)
   124da:	|      jsr 150da <setVariable>
   124e0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124e4:	|      moveq #2,d0
}
   124e6:	\----> addq.l #8,sp
   124e8:	       rts

000124ea <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   124ea:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124ec:	          movea.l 16(sp),a0
   124f0:	          move.l 24(a0),d0
   124f4:	          move.l d0,-(sp)
   124f6:	          pea 7 <_start+0x7>
   124fa:	          move.l sp,d0
   124fc:	          addq.l #8,d0
   124fe:	          move.l d0,-(sp)
   12500:	          jsr 147e8 <getValueType>
   12506:	          lea 12(sp),sp
   1250a:	          tst.w d0
   1250c:	      /-- bne.s 12512 <builtIn_normalCharacter+0x28>
   1250e:	      |   moveq #1,d0
   12510:	/-----|-- bra.s 1258e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12512:	|     \-> moveq #24,d0
   12514:	|         add.l 16(sp),d0
   12518:	|         move.l d0,-(sp)
   1251a:	|         jsr 1516c <trimStack>
   12520:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12522:	|         move.l (sp),d0
   12524:	|         move.l d0,-(sp)
   12526:	|         jsr a63c <findPerson>
   1252c:	|         addq.l #4,sp
   1252e:	|         move.l d0,4(sp)
	if (thisPerson)
   12532:	|  /----- beq.s 12574 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12534:	|  |      movea.l 4(sp),a0
   12538:	|  |      movea.l 80(a0),a0
   1253c:	|  |      move.l (a0),d1
   1253e:	|  |      movea.l 4(sp),a0
   12542:	|  |      move.l 106(a0),d0
   12546:	|  |      add.l d0,d0
   12548:	|  |      add.l d0,d0
   1254a:	|  |      movea.l d1,a0
   1254c:	|  |      adda.l d0,a0
   1254e:	|  |      move.l (a0),d0
   12550:	|  |      movea.l 4(sp),a0
   12554:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12558:	|  |      moveq #28,d0
   1255a:	|  |      add.l 16(sp),d0
   1255e:	|  |      pea 1 <_start+0x1>
   12562:	|  |      pea 1 <_start+0x1>
   12566:	|  |      move.l d0,-(sp)
   12568:	|  |      jsr 150da <setVariable>
   1256e:	|  |      lea 12(sp),sp
   12572:	|  |  /-- bra.s 1258c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12574:	|  \--|-> moveq #28,d0
   12576:	|     |   add.l 16(sp),d0
   1257a:	|     |   clr.l -(sp)
   1257c:	|     |   pea 1 <_start+0x1>
   12580:	|     |   move.l d0,-(sp)
   12582:	|     |   jsr 150da <setVariable>
   12588:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1258c:	|     \-> moveq #2,d0
}
   1258e:	\-------> addq.l #8,sp
   12590:	          rts

00012592 <builtIn_isMoving>:

builtIn(isMoving)
{
   12592:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12594:	          movea.l 16(sp),a0
   12598:	          move.l 24(a0),d0
   1259c:	          move.l d0,-(sp)
   1259e:	          pea 7 <_start+0x7>
   125a2:	          move.l sp,d0
   125a4:	          addq.l #8,d0
   125a6:	          move.l d0,-(sp)
   125a8:	          jsr 147e8 <getValueType>
   125ae:	          lea 12(sp),sp
   125b2:	          tst.w d0
   125b4:	      /-- bne.s 125ba <builtIn_isMoving+0x28>
   125b6:	      |   moveq #1,d0
   125b8:	/-----|-- bra.s 1261a <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   125ba:	|     \-> moveq #24,d0
   125bc:	|         add.l 16(sp),d0
   125c0:	|         move.l d0,-(sp)
   125c2:	|         jsr 1516c <trimStack>
   125c8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125ca:	|         move.l (sp),d0
   125cc:	|         move.l d0,-(sp)
   125ce:	|         jsr a63c <findPerson>
   125d4:	|         addq.l #4,sp
   125d6:	|         move.l d0,4(sp)
	if (thisPerson)
   125da:	|  /----- beq.s 12600 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   125dc:	|  |      movea.l 4(sp),a0
   125e0:	|  |      move.w 64(a0),d0
   125e4:	|  |      movea.w d0,a0
   125e6:	|  |      moveq #28,d0
   125e8:	|  |      add.l 16(sp),d0
   125ec:	|  |      move.l a0,-(sp)
   125ee:	|  |      pea 1 <_start+0x1>
   125f2:	|  |      move.l d0,-(sp)
   125f4:	|  |      jsr 150da <setVariable>
   125fa:	|  |      lea 12(sp),sp
   125fe:	|  |  /-- bra.s 12618 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12600:	|  \--|-> moveq #28,d0
   12602:	|     |   add.l 16(sp),d0
   12606:	|     |   clr.l -(sp)
   12608:	|     |   pea 1 <_start+0x1>
   1260c:	|     |   move.l d0,-(sp)
   1260e:	|     |   jsr 150da <setVariable>
   12614:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12618:	|     \-> moveq #2,d0
}
   1261a:	\-------> addq.l #8,sp
   1261c:	          rts

0001261e <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1261e:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12622:	          movea.l 20(sp),a0
   12626:	          move.l 24(a0),d0
   1262a:	          move.l d0,-(sp)
   1262c:	          pea 7 <_start+0x7>
   12630:	          lea 8(sp),a0
   12634:	          move.l a0,-(sp)
   12636:	          jsr 147e8 <getValueType>
   1263c:	          lea 12(sp),sp
   12640:	          tst.w d0
   12642:	      /-- bne.s 1264a <builtIn_fetchEvent+0x2c>
   12644:	      |   moveq #1,d0
   12646:	/-----|-- bra.w 126de <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1264a:	|     \-> moveq #24,d0
   1264c:	|         add.l 20(sp),d0
   12650:	|         move.l d0,-(sp)
   12652:	|         jsr 1516c <trimStack>
   12658:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1265a:	|         movea.l 20(sp),a0
   1265e:	|         move.l 24(a0),d0
   12662:	|         move.l d0,-(sp)
   12664:	|         pea 7 <_start+0x7>
   12668:	|         moveq #12,d0
   1266a:	|         add.l sp,d0
   1266c:	|         move.l d0,-(sp)
   1266e:	|         jsr 147e8 <getValueType>
   12674:	|         lea 12(sp),sp
   12678:	|         tst.w d0
   1267a:	|     /-- bne.s 12680 <builtIn_fetchEvent+0x62>
   1267c:	|     |   moveq #1,d0
   1267e:	+-----|-- bra.s 126de <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12680:	|     \-> moveq #24,d0
   12682:	|         add.l 20(sp),d0
   12686:	|         move.l d0,-(sp)
   12688:	|         jsr 1516c <trimStack>
   1268e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12690:	|         move.l (sp),d1
   12692:	|         move.l 4(sp),d0
   12696:	|         move.l d1,-(sp)
   12698:	|         move.l d0,-(sp)
   1269a:	|         jsr d566 <getCombinationFunction>
   126a0:	|         addq.l #8,sp
   126a2:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   126a6:	|  /----- beq.s 126c4 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   126a8:	|  |      moveq #28,d0
   126aa:	|  |      add.l 20(sp),d0
   126ae:	|  |      move.l 8(sp),-(sp)
   126b2:	|  |      pea 2 <_start+0x2>
   126b6:	|  |      move.l d0,-(sp)
   126b8:	|  |      jsr 150da <setVariable>
   126be:	|  |      lea 12(sp),sp
   126c2:	|  |  /-- bra.s 126dc <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126c4:	|  \--|-> moveq #28,d0
   126c6:	|     |   add.l 20(sp),d0
   126ca:	|     |   clr.l -(sp)
   126cc:	|     |   pea 1 <_start+0x1>
   126d0:	|     |   move.l d0,-(sp)
   126d2:	|     |   jsr 150da <setVariable>
   126d8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126dc:	|     \-> moveq #2,d0
}
   126de:	\-------> lea 12(sp),sp
   126e2:	          rts

000126e4 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   126e4:	       lea -24(sp),sp
   126e8:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   126ea:	       movea.l 36(sp),a0
   126ee:	       move.l 24(a0),d0
   126f2:	       move.l d0,-(sp)
   126f4:	       jsr 14dbe <getTextFromAnyVar>
   126fa:	       addq.l #4,sp
   126fc:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12700:	       moveq #24,d0
   12702:	       add.l 36(sp),d0
   12706:	       move.l d0,-(sp)
   12708:	       jsr 1516c <trimStack>
   1270e:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12710:	       move.l 24(sp),-(sp)
   12714:	       jsr 2fe <encodeFilename>
   1271a:	       addq.l #4,sp
   1271c:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12720:	       move.l 24(sp),16(sp)
   12726:	       move.l 1c9be <SysBase>,d0
   1272c:	       movea.l d0,a6
   1272e:	       movea.l 16(sp),a1
   12732:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12736:	       move.l 20(sp),-(sp)
   1273a:	       jsr e31e <failSecurityCheck>
   12740:	       addq.l #4,sp
   12742:	       tst.w d0
   12744:	   /-- beq.s 1274a <builtIn_deleteFile+0x66>
   12746:	   |   moveq #1,d0
   12748:	/--|-- bra.s 12798 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1274a:	|  \-> move.l 20(sp),12(sp)
   12750:	|      move.l 1c9c6 <DOSBase>,d0
   12756:	|      movea.l d0,a6
   12758:	|      move.l 12(sp),d1
   1275c:	|      jsr -72(a6)
   12760:	|      move.l d0,8(sp)
   12764:	|      move.l 8(sp),d1
   12768:	|      moveq #28,d0
   1276a:	|      add.l 36(sp),d0
   1276e:	|      move.l d1,-(sp)
   12770:	|      pea 1 <_start+0x1>
   12774:	|      move.l d0,-(sp)
   12776:	|      jsr 150da <setVariable>
   1277c:	|      lea 12(sp),sp
    FreeVec(nam);
   12780:	|      move.l 20(sp),4(sp)
   12786:	|      move.l 1c9be <SysBase>,d0
   1278c:	|      movea.l d0,a6
   1278e:	|      movea.l 4(sp),a1
   12792:	|      jsr -690(a6)

    return BR_CONTINUE;
   12796:	|      moveq #2,d0
}
   12798:	\----> movea.l (sp)+,a6
   1279a:	       lea 24(sp),sp
   1279e:	       rts

000127a0 <builtIn_renameFile>:

builtIn(renameFile)
{
   127a0:	       lea -40(sp),sp
   127a4:	       move.l a6,-(sp)
   127a6:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127a8:	       movea.l 56(sp),a0
   127ac:	       move.l 24(a0),d0
   127b0:	       move.l d0,-(sp)
   127b2:	       jsr 14dbe <getTextFromAnyVar>
   127b8:	       addq.l #4,sp
   127ba:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   127be:	       move.l 44(sp),-(sp)
   127c2:	       jsr 2fe <encodeFilename>
   127c8:	       addq.l #4,sp
   127ca:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   127ce:	       moveq #24,d0
   127d0:	       add.l 56(sp),d0
   127d4:	       move.l d0,-(sp)
   127d6:	       jsr 1516c <trimStack>
   127dc:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   127de:	       move.l 40(sp),-(sp)
   127e2:	       jsr e31e <failSecurityCheck>
   127e8:	       addq.l #4,sp
   127ea:	       tst.w d0
   127ec:	   /-- beq.s 127f4 <builtIn_renameFile+0x54>
   127ee:	   |   moveq #1,d0
   127f0:	/--|-- bra.w 128da <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127f4:	|  \-> move.l 44(sp),36(sp)
   127fa:	|      move.l 1c9be <SysBase>,d0
   12800:	|      movea.l d0,a6
   12802:	|      movea.l 36(sp),a1
   12806:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1280a:	|      movea.l 56(sp),a0
   1280e:	|      move.l 24(a0),d0
   12812:	|      move.l d0,-(sp)
   12814:	|      jsr 14dbe <getTextFromAnyVar>
   1281a:	|      addq.l #4,sp
   1281c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12820:	|      move.l 44(sp),-(sp)
   12824:	|      jsr 2fe <encodeFilename>
   1282a:	|      addq.l #4,sp
   1282c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12830:	|      moveq #24,d0
   12832:	|      add.l 56(sp),d0
   12836:	|      move.l d0,-(sp)
   12838:	|      jsr 1516c <trimStack>
   1283e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12840:	|      move.l 32(sp),-(sp)
   12844:	|      jsr e31e <failSecurityCheck>
   1284a:	|      addq.l #4,sp
   1284c:	|      tst.w d0
   1284e:	|  /-- beq.s 12856 <builtIn_renameFile+0xb6>
   12850:	|  |   moveq #1,d0
   12852:	+--|-- bra.w 128da <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12856:	|  \-> move.l 44(sp),28(sp)
   1285c:	|      move.l 1c9be <SysBase>,d0
   12862:	|      movea.l d0,a6
   12864:	|      movea.l 28(sp),a1
   12868:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1286c:	|      move.l 32(sp),24(sp)
   12872:	|      move.l 40(sp),20(sp)
   12878:	|      move.l 1c9c6 <DOSBase>,d0
   1287e:	|      movea.l d0,a6
   12880:	|      move.l 24(sp),d1
   12884:	|      move.l 20(sp),d2
   12888:	|      jsr -78(a6)
   1288c:	|      move.l d0,16(sp)
   12890:	|      move.l 16(sp),d1
   12894:	|      moveq #28,d0
   12896:	|      add.l 56(sp),d0
   1289a:	|      move.l d1,-(sp)
   1289c:	|      pea 1 <_start+0x1>
   128a0:	|      move.l d0,-(sp)
   128a2:	|      jsr 150da <setVariable>
   128a8:	|      lea 12(sp),sp
	FreeVec(nam);
   128ac:	|      move.l 32(sp),12(sp)
   128b2:	|      move.l 1c9be <SysBase>,d0
   128b8:	|      movea.l d0,a6
   128ba:	|      movea.l 12(sp),a1
   128be:	|      jsr -690(a6)
	FreeVec(newnam);
   128c2:	|      move.l 40(sp),8(sp)
   128c8:	|      move.l 1c9be <SysBase>,d0
   128ce:	|      movea.l d0,a6
   128d0:	|      movea.l 8(sp),a1
   128d4:	|      jsr -690(a6)

	return BR_CONTINUE;
   128d8:	|      moveq #2,d0
}
   128da:	\----> move.l (sp)+,d2
   128dc:	       movea.l (sp)+,a6
   128de:	       lea 40(sp),sp
   128e2:	       rts

000128e4 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   128e4:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   128e6:	       movea.l 12(sp),a0
   128ea:	       move.l 24(a0),d0
   128ee:	       move.l d0,-(sp)
   128f0:	       pea 5 <_start+0x5>
   128f4:	       move.l sp,d0
   128f6:	       addq.l #8,d0
   128f8:	       move.l d0,-(sp)
   128fa:	       jsr 147e8 <getValueType>
   12900:	       lea 12(sp),sp
   12904:	       tst.w d0
   12906:	   /-- bne.s 1290c <builtIn_cacheSound+0x28>
   12908:	   |   moveq #1,d0
   1290a:	/--|-- bra.s 12934 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   1290c:	|  \-> moveq #24,d0
   1290e:	|      add.l 12(sp),d0
   12912:	|      move.l d0,-(sp)
   12914:	|      jsr 1516c <trimStack>
   1291a:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   1291c:	|      move.l (sp),d0
   1291e:	|      move.l d0,-(sp)
   12920:	|      jsr d166 <cacheSound>
   12926:	|      addq.l #4,sp
   12928:	|      moveq #-1,d1
   1292a:	|      cmp.l d0,d1
   1292c:	|  /-- bne.s 12932 <builtIn_cacheSound+0x4e>
   1292e:	|  |   moveq #1,d0
   12930:	+--|-- bra.s 12934 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12932:	|  \-> moveq #2,d0
}
   12934:	\----> addq.l #4,sp
   12936:	       rts

00012938 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12938:	pea 19be7 <line.c.05397aaf+0x25b>
   1293e:	jsr 17248 <KPrintF>
   12944:	addq.l #4,sp
	return BR_CONTINUE;
   12946:	moveq #2,d0
}
   12948:	rts

0001294a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   1294a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1294e:	          movea.l 20(sp),a0
   12952:	          move.l 24(a0),d0
   12956:	          move.l d0,-(sp)
   12958:	          pea 1 <_start+0x1>
   1295c:	          moveq #12,d0
   1295e:	          add.l sp,d0
   12960:	          move.l d0,-(sp)
   12962:	          jsr 147e8 <getValueType>
   12968:	          lea 12(sp),sp
   1296c:	          tst.w d0
   1296e:	      /-- bne.s 12976 <builtIn_setCharacterSpinSpeed+0x2c>
   12970:	      |   moveq #1,d0
   12972:	/-----|-- bra.w 12a10 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12976:	|     \-> moveq #24,d0
   12978:	|         add.l 20(sp),d0
   1297c:	|         move.l d0,-(sp)
   1297e:	|         jsr 1516c <trimStack>
   12984:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12986:	|         movea.l 20(sp),a0
   1298a:	|         move.l 24(a0),d0
   1298e:	|         move.l d0,-(sp)
   12990:	|         pea 7 <_start+0x7>
   12994:	|         lea 8(sp),a0
   12998:	|         move.l a0,-(sp)
   1299a:	|         jsr 147e8 <getValueType>
   129a0:	|         lea 12(sp),sp
   129a4:	|         tst.w d0
   129a6:	|     /-- bne.s 129ac <builtIn_setCharacterSpinSpeed+0x62>
   129a8:	|     |   moveq #1,d0
   129aa:	+-----|-- bra.s 12a10 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   129ac:	|     \-> moveq #24,d0
   129ae:	|         add.l 20(sp),d0
   129b2:	|         move.l d0,-(sp)
   129b4:	|         jsr 1516c <trimStack>
   129ba:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129bc:	|         move.l (sp),d0
   129be:	|         move.l d0,-(sp)
   129c0:	|         jsr a63c <findPerson>
   129c6:	|         addq.l #4,sp
   129c8:	|         move.l d0,8(sp)

	if (thisPerson) {
   129cc:	|  /----- beq.s 129f6 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   129ce:	|  |      move.l 4(sp),d0
   129d2:	|  |      movea.l 8(sp),a0
   129d6:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   129da:	|  |      moveq #28,d0
   129dc:	|  |      add.l 20(sp),d0
   129e0:	|  |      pea 1 <_start+0x1>
   129e4:	|  |      pea 1 <_start+0x1>
   129e8:	|  |      move.l d0,-(sp)
   129ea:	|  |      jsr 150da <setVariable>
   129f0:	|  |      lea 12(sp),sp
   129f4:	|  |  /-- bra.s 12a0e <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   129f6:	|  \--|-> moveq #28,d0
   129f8:	|     |   add.l 20(sp),d0
   129fc:	|     |   clr.l -(sp)
   129fe:	|     |   pea 1 <_start+0x1>
   12a02:	|     |   move.l d0,-(sp)
   12a04:	|     |   jsr 150da <setVariable>
   12a0a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a0e:	|     \-> moveq #2,d0
}
   12a10:	\-------> lea 12(sp),sp
   12a14:	          rts

00012a16 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12a16:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a1a:	          movea.l 20(sp),a0
   12a1e:	          move.l 24(a0),d0
   12a22:	          move.l d0,-(sp)
   12a24:	          pea 1 <_start+0x1>
   12a28:	          moveq #12,d0
   12a2a:	          add.l sp,d0
   12a2c:	          move.l d0,-(sp)
   12a2e:	          jsr 147e8 <getValueType>
   12a34:	          lea 12(sp),sp
   12a38:	          tst.w d0
   12a3a:	      /-- bne.s 12a42 <builtIn_setCharacterAngleOffset+0x2c>
   12a3c:	      |   moveq #1,d0
   12a3e:	/-----|-- bra.w 12adc <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a42:	|     \-> moveq #24,d0
   12a44:	|         add.l 20(sp),d0
   12a48:	|         move.l d0,-(sp)
   12a4a:	|         jsr 1516c <trimStack>
   12a50:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a52:	|         movea.l 20(sp),a0
   12a56:	|         move.l 24(a0),d0
   12a5a:	|         move.l d0,-(sp)
   12a5c:	|         pea 7 <_start+0x7>
   12a60:	|         lea 8(sp),a0
   12a64:	|         move.l a0,-(sp)
   12a66:	|         jsr 147e8 <getValueType>
   12a6c:	|         lea 12(sp),sp
   12a70:	|         tst.w d0
   12a72:	|     /-- bne.s 12a78 <builtIn_setCharacterAngleOffset+0x62>
   12a74:	|     |   moveq #1,d0
   12a76:	+-----|-- bra.s 12adc <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a78:	|     \-> moveq #24,d0
   12a7a:	|         add.l 20(sp),d0
   12a7e:	|         move.l d0,-(sp)
   12a80:	|         jsr 1516c <trimStack>
   12a86:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a88:	|         move.l (sp),d0
   12a8a:	|         move.l d0,-(sp)
   12a8c:	|         jsr a63c <findPerson>
   12a92:	|         addq.l #4,sp
   12a94:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a98:	|  /----- beq.s 12ac2 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12a9a:	|  |      move.l 4(sp),d0
   12a9e:	|  |      movea.l 8(sp),a0
   12aa2:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12aa6:	|  |      moveq #28,d0
   12aa8:	|  |      add.l 20(sp),d0
   12aac:	|  |      pea 1 <_start+0x1>
   12ab0:	|  |      pea 1 <_start+0x1>
   12ab4:	|  |      move.l d0,-(sp)
   12ab6:	|  |      jsr 150da <setVariable>
   12abc:	|  |      lea 12(sp),sp
   12ac0:	|  |  /-- bra.s 12ada <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ac2:	|  \--|-> moveq #28,d0
   12ac4:	|     |   add.l 20(sp),d0
   12ac8:	|     |   clr.l -(sp)
   12aca:	|     |   pea 1 <_start+0x1>
   12ace:	|     |   move.l d0,-(sp)
   12ad0:	|     |   jsr 150da <setVariable>
   12ad6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ada:	|     \-> moveq #2,d0
}
   12adc:	\-------> lea 12(sp),sp
   12ae0:	          rts

00012ae2 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12ae2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ae4:	       movea.l 12(sp),a0
   12ae8:	       move.l 24(a0),d0
   12aec:	       move.l d0,-(sp)
   12aee:	       pea 1 <_start+0x1>
   12af2:	       move.l sp,d0
   12af4:	       addq.l #8,d0
   12af6:	       move.l d0,-(sp)
   12af8:	       jsr 147e8 <getValueType>
   12afe:	       lea 12(sp),sp
   12b02:	       tst.w d0
   12b04:	   /-- bne.s 12b0a <builtIn_transitionMode+0x28>
   12b06:	   |   moveq #1,d0
   12b08:	/--|-- bra.s 12b40 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12b0a:	|  \-> move.l (sp),d0
   12b0c:	|      move.l d0,d0
   12b0e:	|      move.b d0,1c898 <fadeMode>
	trimStack (&fun -> stack);
   12b14:	|      moveq #24,d0
   12b16:	|      add.l 12(sp),d0
   12b1a:	|      move.l d0,-(sp)
   12b1c:	|      jsr 1516c <trimStack>
   12b22:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12b24:	|      moveq #28,d0
   12b26:	|      add.l 12(sp),d0
   12b2a:	|      pea 1 <_start+0x1>
   12b2e:	|      pea 1 <_start+0x1>
   12b32:	|      move.l d0,-(sp)
   12b34:	|      jsr 150da <setVariable>
   12b3a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b3e:	|      moveq #2,d0
}
   12b40:	\----> addq.l #4,sp
   12b42:	       rts

00012b44 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12b44:	moveq #24,d0
   12b46:	add.l 8(sp),d0
   12b4a:	move.l d0,-(sp)
   12b4c:	jsr 1516c <trimStack>
   12b52:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12b54:	moveq #28,d0
   12b56:	add.l 8(sp),d0
   12b5a:	pea 1 <_start+0x1>
   12b5e:	pea 1 <_start+0x1>
   12b62:	move.l d0,-(sp)
   12b64:	jsr 150da <setVariable>
   12b6a:	lea 12(sp),sp
	return BR_CONTINUE;
   12b6e:	moveq #2,d0
}
   12b70:	rts

00012b72 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b72:	pea 19c11 <graphics.c.1c13408a+0x29>
   12b78:	jsr 17248 <KPrintF>
   12b7e:	addq.l #4,sp
	return BR_CONTINUE;
   12b80:	moveq #2,d0
}
   12b82:	rts

00012b84 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b84:	       lea -16(sp),sp
   12b88:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b8a:	       movea.l 28(sp),a0
   12b8e:	       move.l 24(a0),d0
   12b92:	       move.l d0,-(sp)
   12b94:	       jsr 14dbe <getTextFromAnyVar>
   12b9a:	       addq.l #4,sp
   12b9c:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12ba0:	   /-- bne.s 12ba8 <builtIn_saveCustomData+0x24>
   12ba2:	   |   moveq #1,d0
   12ba4:	/--|-- bra.w 12c5a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12ba8:	|  \-> move.l 16(sp),-(sp)
   12bac:	|      jsr 2fe <encodeFilename>
   12bb2:	|      addq.l #4,sp
   12bb4:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12bb8:	|      move.l 16(sp),8(sp)
   12bbe:	|      move.l 1c9be <SysBase>,d0
   12bc4:	|      movea.l d0,a6
   12bc6:	|      movea.l 8(sp),a1
   12bca:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12bce:	|      move.l 12(sp),-(sp)
   12bd2:	|      jsr e31e <failSecurityCheck>
   12bd8:	|      addq.l #4,sp
   12bda:	|      tst.w d0
   12bdc:	|  /-- beq.s 12be2 <builtIn_saveCustomData+0x5e>
   12bde:	|  |   moveq #1,d0
   12be0:	+--|-- bra.s 12c5a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12be2:	|  \-> moveq #24,d0
   12be4:	|      add.l 28(sp),d0
   12be8:	|      move.l d0,-(sp)
   12bea:	|      jsr 1516c <trimStack>
   12bf0:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12bf2:	|      movea.l 28(sp),a0
   12bf6:	|      movea.l 24(a0),a0
   12bfa:	|      move.l (a0),d0
   12bfc:	|      moveq #6,d1
   12bfe:	|      cmp.l d0,d1
   12c00:	|  /-- beq.s 12c14 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12c02:	|  |   pea 19c3e <graphics.c.1c13408a+0x56>
   12c08:	|  |   jsr 17248 <KPrintF>
   12c0e:	|  |   addq.l #4,sp
		return BR_ERROR;
   12c10:	|  |   moveq #1,d0
   12c12:	+--|-- bra.s 12c5a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12c14:	|  \-> movea.l 28(sp),a0
   12c18:	|      move.l 24(a0),d0
   12c1c:	|      move.l d0,-(sp)
   12c1e:	|      move.l 16(sp),-(sp)
   12c22:	|      jsr df6e <stackToFile>
   12c28:	|      addq.l #8,sp
   12c2a:	|      tst.w d0
   12c2c:	|  /-- bne.s 12c32 <builtIn_saveCustomData+0xae>
   12c2e:	|  |   moveq #1,d0
   12c30:	+--|-- bra.s 12c5a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c32:	|  \-> moveq #24,d0
   12c34:	|      add.l 28(sp),d0
   12c38:	|      move.l d0,-(sp)
   12c3a:	|      jsr 1516c <trimStack>
   12c40:	|      addq.l #4,sp
	FreeVec(fileName);
   12c42:	|      move.l 12(sp),4(sp)
   12c48:	|      move.l 1c9be <SysBase>,d0
   12c4e:	|      movea.l d0,a6
   12c50:	|      movea.l 4(sp),a1
   12c54:	|      jsr -690(a6)
	return BR_CONTINUE;
   12c58:	|      moveq #2,d0
}
   12c5a:	\----> movea.l (sp)+,a6
   12c5c:	       lea 16(sp),sp
   12c60:	       rts

00012c62 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c62:	       lea -28(sp),sp
   12c66:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c68:	       movea.l 40(sp),a0
   12c6c:	       move.l 24(a0),d0
   12c70:	       move.l d0,-(sp)
   12c72:	       jsr 14dbe <getTextFromAnyVar>
   12c78:	       addq.l #4,sp
   12c7a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c7e:	   /-- bne.s 12c86 <builtIn_loadCustomData+0x24>
   12c80:	   |   moveq #1,d0
   12c82:	/--|-- bra.w 12d82 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c86:	|  \-> move.l 28(sp),-(sp)
   12c8a:	|      jsr 2fe <encodeFilename>
   12c90:	|      addq.l #4,sp
   12c92:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12c96:	|      move.l 28(sp),20(sp)
   12c9c:	|      move.l 1c9be <SysBase>,d0
   12ca2:	|      movea.l d0,a6
   12ca4:	|      movea.l 20(sp),a1
   12ca8:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12cac:	|      move.l 24(sp),-(sp)
   12cb0:	|      jsr e31e <failSecurityCheck>
   12cb6:	|      addq.l #4,sp
   12cb8:	|      tst.w d0
   12cba:	|  /-- beq.s 12cc2 <builtIn_loadCustomData+0x60>
   12cbc:	|  |   moveq #1,d0
   12cbe:	+--|-- bra.w 12d82 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12cc2:	|  \-> moveq #24,d0
   12cc4:	|      add.l 40(sp),d0
   12cc8:	|      move.l d0,-(sp)
   12cca:	|      jsr 1516c <trimStack>
   12cd0:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12cd2:	|      moveq #28,d0
   12cd4:	|      add.l 40(sp),d0
   12cd8:	|      move.l d0,-(sp)
   12cda:	|      jsr 14a36 <unlinkVar>
   12ce0:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12ce2:	|      movea.l 40(sp),a0
   12ce6:	|      moveq #6,d0
   12ce8:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12cec:	|      moveq #12,d0
   12cee:	|      move.l d0,16(sp)
   12cf2:	|      clr.l 12(sp)
   12cf6:	|      move.l 1c9be <SysBase>,d0
   12cfc:	|      movea.l d0,a6
   12cfe:	|      move.l 16(sp),d0
   12d02:	|      move.l 12(sp),d1
   12d06:	|      jsr -684(a6)
   12d0a:	|      move.l d0,8(sp)
   12d0e:	|      move.l 8(sp),d0
   12d12:	|      movea.l 40(sp),a0
   12d16:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12d1a:	|      movea.l 40(sp),a0
   12d1e:	|      move.l 32(a0),d0
   12d22:	|  /-- bne.s 12d28 <builtIn_loadCustomData+0xc6>
   12d24:	|  |   moveq #1,d0
   12d26:	+--|-- bra.s 12d82 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12d28:	|  \-> movea.l 40(sp),a0
   12d2c:	|      movea.l 32(a0),a0
   12d30:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12d32:	|      movea.l 40(sp),a0
   12d36:	|      movea.l 32(a0),a0
   12d3a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12d3e:	|      movea.l 40(sp),a0
   12d42:	|      movea.l 32(a0),a0
   12d46:	|      moveq #1,d0
   12d48:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12d4c:	|      movea.l 40(sp),a0
   12d50:	|      move.l 32(a0),d0
   12d54:	|      move.l d0,-(sp)
   12d56:	|      move.l 28(sp),-(sp)
   12d5a:	|      jsr d9a8 <fileToStack>
   12d60:	|      addq.l #8,sp
   12d62:	|      tst.w d0
   12d64:	|  /-- bne.s 12d6a <builtIn_loadCustomData+0x108>
   12d66:	|  |   moveq #1,d0
   12d68:	+--|-- bra.s 12d82 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d6a:	|  \-> move.l 24(sp),4(sp)
   12d70:	|      move.l 1c9be <SysBase>,d0
   12d76:	|      movea.l d0,a6
   12d78:	|      movea.l 4(sp),a1
   12d7c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d80:	|      moveq #2,d0
}
   12d82:	\----> movea.l (sp)+,a6
   12d84:	       lea 28(sp),sp
   12d88:	       rts

00012d8a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d8a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d8c:	       movea.l 12(sp),a0
   12d90:	       move.l 24(a0),d0
   12d94:	       move.l d0,-(sp)
   12d96:	       pea 1 <_start+0x1>
   12d9a:	       move.l sp,d0
   12d9c:	       addq.l #8,d0
   12d9e:	       move.l d0,-(sp)
   12da0:	       jsr 147e8 <getValueType>
   12da6:	       lea 12(sp),sp
   12daa:	       tst.w d0
   12dac:	   /-- bne.s 12db2 <builtIn_setCustomEncoding+0x28>
   12dae:	   |   moveq #1,d0
   12db0:	/--|-- bra.s 12de8 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12db2:	|  \-> move.l (sp),d0
   12db4:	|      move.l d0,d0
   12db6:	|      move.w d0,1ca76 <saveEncoding>
	trimStack (&fun -> stack);
   12dbc:	|      moveq #24,d0
   12dbe:	|      add.l 12(sp),d0
   12dc2:	|      move.l d0,-(sp)
   12dc4:	|      jsr 1516c <trimStack>
   12dca:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12dcc:	|      moveq #28,d0
   12dce:	|      add.l 12(sp),d0
   12dd2:	|      pea 1 <_start+0x1>
   12dd6:	|      pea 1 <_start+0x1>
   12dda:	|      move.l d0,-(sp)
   12ddc:	|      jsr 150da <setVariable>
   12de2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12de6:	|      moveq #2,d0
}
   12de8:	\----> addq.l #4,sp
   12dea:	       rts

00012dec <builtIn_freeSound>:

builtIn(freeSound)
{
   12dec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dee:	       movea.l 12(sp),a0
   12df2:	       move.l 24(a0),d0
   12df6:	       move.l d0,-(sp)
   12df8:	       pea 5 <_start+0x5>
   12dfc:	       move.l sp,d0
   12dfe:	       addq.l #8,d0
   12e00:	       move.l d0,-(sp)
   12e02:	       jsr 147e8 <getValueType>
   12e08:	       lea 12(sp),sp
   12e0c:	       tst.w d0
   12e0e:	   /-- bne.s 12e14 <builtIn_freeSound+0x28>
   12e10:	   |   moveq #1,d0
   12e12:	/--|-- bra.s 12e32 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12e14:	|  \-> moveq #24,d0
   12e16:	|      add.l 12(sp),d0
   12e1a:	|      move.l d0,-(sp)
   12e1c:	|      jsr 1516c <trimStack>
   12e22:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12e24:	|      move.l (sp),d0
   12e26:	|      move.l d0,-(sp)
   12e28:	|      jsr d16a <huntKillFreeSound>
   12e2e:	|      addq.l #4,sp
	return BR_CONTINUE;
   12e30:	|      moveq #2,d0
}
   12e32:	\----> addq.l #4,sp
   12e34:	       rts

00012e36 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12e36:	       lea -12(sp),sp
   12e3a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e3c:	       movea.l 24(sp),a0
   12e40:	       move.l 24(a0),d0
   12e44:	       move.l d0,-(sp)
   12e46:	       pea 1 <_start+0x1>
   12e4a:	       moveq #16,d0
   12e4c:	       add.l sp,d0
   12e4e:	       move.l d0,-(sp)
   12e50:	       jsr 147e8 <getValueType>
   12e56:	       lea 12(sp),sp
   12e5a:	       tst.w d0
   12e5c:	   /-- bne.s 12e64 <builtIn_parallaxAdd+0x2e>
   12e5e:	   |   moveq #1,d0
   12e60:	/--|-- bra.w 12f38 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e64:	|  \-> moveq #24,d0
   12e66:	|      add.l 24(sp),d0
   12e6a:	|      move.l d0,-(sp)
   12e6c:	|      jsr 1516c <trimStack>
   12e72:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e74:	|      movea.l 24(sp),a0
   12e78:	|      move.l 24(a0),d0
   12e7c:	|      move.l d0,-(sp)
   12e7e:	|      pea 1 <_start+0x1>
   12e82:	|      moveq #20,d0
   12e84:	|      add.l sp,d0
   12e86:	|      move.l d0,-(sp)
   12e88:	|      jsr 147e8 <getValueType>
   12e8e:	|      lea 12(sp),sp
   12e92:	|      tst.w d0
   12e94:	|  /-- bne.s 12e9c <builtIn_parallaxAdd+0x66>
   12e96:	|  |   moveq #1,d0
   12e98:	+--|-- bra.w 12f38 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e9c:	|  \-> moveq #24,d0
   12e9e:	|      add.l 24(sp),d0
   12ea2:	|      move.l d0,-(sp)
   12ea4:	|      jsr 1516c <trimStack>
   12eaa:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12eac:	|      movea.l 24(sp),a0
   12eb0:	|      move.l 24(a0),d0
   12eb4:	|      move.l d0,-(sp)
   12eb6:	|      pea 5 <_start+0x5>
   12eba:	|      lea 12(sp),a0
   12ebe:	|      move.l a0,-(sp)
   12ec0:	|      jsr 147e8 <getValueType>
   12ec6:	|      lea 12(sp),sp
   12eca:	|      tst.w d0
   12ecc:	|  /-- bne.s 12ed2 <builtIn_parallaxAdd+0x9c>
   12ece:	|  |   moveq #1,d0
   12ed0:	+--|-- bra.s 12f38 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ed2:	|  \-> moveq #24,d0
   12ed4:	|      add.l 24(sp),d0
   12ed8:	|      move.l d0,-(sp)
   12eda:	|      jsr 1516c <trimStack>
   12ee0:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12ee2:	|      move.l 8(sp),d0
   12ee6:	|      move.l d0,d0
   12ee8:	|      moveq #0,d2
   12eea:	|      move.w d0,d2
   12eec:	|      move.l 12(sp),d0
   12ef0:	|      move.l d0,d0
   12ef2:	|      moveq #0,d1
   12ef4:	|      move.w d0,d1
   12ef6:	|      move.l 4(sp),d0
   12efa:	|      move.l d0,d0
   12efc:	|      move.w d0,d0
   12efe:	|      andi.l #65535,d0
   12f04:	|      move.l d2,-(sp)
   12f06:	|      move.l d1,-(sp)
   12f08:	|      move.l d0,-(sp)
   12f0a:	|      jsr d386 <loadParallax>
   12f10:	|      lea 12(sp),sp
   12f14:	|      tst.w d0
   12f16:	|  /-- bne.s 12f1c <builtIn_parallaxAdd+0xe6>
   12f18:	|  |   moveq #1,d0
   12f1a:	+--|-- bra.s 12f38 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12f1c:	|  \-> moveq #28,d0
   12f1e:	|      add.l 24(sp),d0
   12f22:	|      pea 1 <_start+0x1>
   12f26:	|      pea 1 <_start+0x1>
   12f2a:	|      move.l d0,-(sp)
   12f2c:	|      jsr 150da <setVariable>
   12f32:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12f36:	|      moveq #2,d0
}
   12f38:	\----> move.l (sp)+,d2
   12f3a:	       lea 12(sp),sp
   12f3e:	       rts

00012f40 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12f40:	jsr d2be <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12f46:	moveq #28,d0
   12f48:	add.l 8(sp),d0
   12f4c:	pea 1 <_start+0x1>
   12f50:	pea 1 <_start+0x1>
   12f54:	move.l d0,-(sp)
   12f56:	jsr 150da <setVariable>
   12f5c:	lea 12(sp),sp
	return BR_CONTINUE;
   12f60:	moveq #2,d0
}
   12f62:	rts

00012f64 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f64:	pea 19c5c <graphics.c.1c13408a+0x74>
   12f6a:	jsr 17248 <KPrintF>
   12f70:	addq.l #4,sp

	return BR_CONTINUE;
   12f72:	moveq #2,d0
}
   12f74:	rts

00012f76 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f76:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f78:	             movea.l 16(sp),a0
   12f7c:	             movea.l 24(a0),a0
   12f80:	             move.l (a0),d0
   12f82:	             moveq #1,d1
   12f84:	             cmp.l d0,d1
   12f86:	      /----- beq.s 12fce <builtIn_makeFastArray+0x58>
   12f88:	      |      moveq #6,d1
   12f8a:	      |      cmp.l d0,d1
   12f8c:	/-----|----- bne.s 1300c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f8e:	|     |      movea.l 16(sp),a0
   12f92:	|     |      movea.l 24(a0),a0
   12f96:	|     |      move.l 4(a0),d1
   12f9a:	|     |      moveq #28,d0
   12f9c:	|     |      add.l 16(sp),d0
   12fa0:	|     |      move.l d1,-(sp)
   12fa2:	|     |      move.l d0,-(sp)
   12fa4:	|     |      jsr 1489a <makeFastArrayFromStack>
   12faa:	|     |      addq.l #8,sp
   12fac:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12fb0:	|     |      moveq #24,d0
   12fb2:	|     |      add.l 16(sp),d0
   12fb6:	|     |      move.l d0,-(sp)
   12fb8:	|     |      jsr 1516c <trimStack>
   12fbe:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12fc0:	|     |      tst.w 6(sp)
   12fc4:	|     |  /-- beq.s 12fca <builtIn_makeFastArray+0x54>
   12fc6:	|     |  |   moveq #2,d0
   12fc8:	|  /--|--|-- bra.s 1301e <builtIn_makeFastArray+0xa8>
   12fca:	|  |  |  \-> moveq #1,d0
   12fcc:	|  +--|----- bra.s 1301e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12fce:	|  |  \----> movea.l 16(sp),a0
   12fd2:	|  |         movea.l 24(a0),a0
   12fd6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12fdc:	|  |         moveq #24,d0
   12fde:	|  |         add.l 16(sp),d0
   12fe2:	|  |         move.l d0,-(sp)
   12fe4:	|  |         jsr 1516c <trimStack>
   12fea:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12fec:	|  |         moveq #28,d0
   12fee:	|  |         add.l 16(sp),d0
   12ff2:	|  |         move.l 2(sp),-(sp)
   12ff6:	|  |         move.l d0,-(sp)
   12ff8:	|  |         jsr 14904 <makeFastArraySize>
   12ffe:	|  |         addq.l #8,sp
   13000:	|  |         tst.w d0
   13002:	|  |     /-- beq.s 13008 <builtIn_makeFastArray+0x92>
   13004:	|  |     |   moveq #2,d0
   13006:	|  +-----|-- bra.s 1301e <builtIn_makeFastArray+0xa8>
   13008:	|  |     \-> moveq #1,d0
   1300a:	|  +-------- bra.s 1301e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1300c:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1300e:	   |         pea 19c85 <graphics.c.1c13408a+0x9d>
   13014:	   |         jsr 17248 <KPrintF>
   1301a:	   |         addq.l #4,sp
	return BR_ERROR;
   1301c:	   |         moveq #1,d0
}
   1301e:	   \-------> addq.l #8,sp
   13020:	             rts

00013022 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13022:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13024:	          movea.l 16(sp),a0
   13028:	          move.l 24(a0),d0
   1302c:	          move.l d0,-(sp)
   1302e:	          pea 7 <_start+0x7>
   13032:	          move.l sp,d0
   13034:	          addq.l #8,d0
   13036:	          move.l d0,-(sp)
   13038:	          jsr 147e8 <getValueType>
   1303e:	          lea 12(sp),sp
   13042:	          tst.w d0
   13044:	      /-- bne.s 1304a <builtIn_getCharacterScale+0x28>
   13046:	      |   moveq #1,d0
   13048:	/-----|-- bra.s 130c4 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1304a:	|     \-> moveq #24,d0
   1304c:	|         add.l 16(sp),d0
   13050:	|         move.l d0,-(sp)
   13052:	|         jsr 1516c <trimStack>
   13058:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1305a:	|         move.l (sp),d0
   1305c:	|         move.l d0,-(sp)
   1305e:	|         jsr a63c <findPerson>
   13064:	|         addq.l #4,sp
   13066:	|         move.l d0,4(sp)
	if (pers) {
   1306a:	|  /----- beq.s 130aa <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1306c:	|  |      movea.l 4(sp),a0
   13070:	|  |      move.l 32(a0),d0
   13074:	|  |      move.l #1120403456,-(sp)
   1307a:	|  |      move.l d0,-(sp)
   1307c:	|  |      jsr 1772c <__mulsf3>
   13082:	|  |      addq.l #8,sp
   13084:	|  |      move.l d0,-(sp)
   13086:	|  |      jsr 17612 <__fixsfsi>
   1308c:	|  |      addq.l #4,sp
   1308e:	|  |      move.l d0,d1
   13090:	|  |      moveq #28,d0
   13092:	|  |      add.l 16(sp),d0
   13096:	|  |      move.l d1,-(sp)
   13098:	|  |      pea 1 <_start+0x1>
   1309c:	|  |      move.l d0,-(sp)
   1309e:	|  |      jsr 150da <setVariable>
   130a4:	|  |      lea 12(sp),sp
   130a8:	|  |  /-- bra.s 130c2 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   130aa:	|  \--|-> moveq #28,d0
   130ac:	|     |   add.l 16(sp),d0
   130b0:	|     |   clr.l -(sp)
   130b2:	|     |   pea 1 <_start+0x1>
   130b6:	|     |   move.l d0,-(sp)
   130b8:	|     |   jsr 150da <setVariable>
   130be:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   130c2:	|     \-> moveq #2,d0
}
   130c4:	\-------> addq.l #8,sp
   130c6:	          rts

000130c8 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   130c8:	move.l 1ca9a <gameSettings>,d0
   130ce:	move.l d0,d1
   130d0:	moveq #28,d0
   130d2:	add.l 8(sp),d0
   130d6:	move.l d1,-(sp)
   130d8:	pea 1 <_start+0x1>
   130dc:	move.l d0,-(sp)
   130de:	jsr 150da <setVariable>
   130e4:	lea 12(sp),sp
	return BR_CONTINUE;
   130e8:	moveq #2,d0
}
   130ea:	rts

000130ec <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130ec:	moveq #24,d0
   130ee:	add.l 8(sp),d0
   130f2:	move.l d0,-(sp)
   130f4:	jsr 1516c <trimStack>
   130fa:	addq.l #4,sp
	trimStack (&fun -> stack);
   130fc:	moveq #24,d0
   130fe:	add.l 8(sp),d0
   13102:	move.l d0,-(sp)
   13104:	jsr 1516c <trimStack>
   1310a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1310c:	moveq #28,d0
   1310e:	add.l 8(sp),d0
   13112:	clr.l -(sp)
   13114:	pea 1 <_start+0x1>
   13118:	move.l d0,-(sp)
   1311a:	jsr 150da <setVariable>
   13120:	lea 12(sp),sp

	return BR_CONTINUE;
   13124:	moveq #2,d0

}
   13126:	rts

00013128 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13128:	move.l 1c33e <lastFramesPerSecond>,d1
   1312e:	moveq #28,d0
   13130:	add.l 8(sp),d0
   13134:	move.l d1,-(sp)
   13136:	pea 1 <_start+0x1>
   1313a:	move.l d0,-(sp)
   1313c:	jsr 150da <setVariable>
   13142:	lea 12(sp),sp
	return BR_CONTINUE;
   13146:	moveq #2,d0
}
   13148:	rts

0001314a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1314a:	moveq #2,d0
}
   1314c:	rts

0001314e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1314e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13152:	          movea.l 60(sp),a0
   13156:	          move.l 24(a0),d0
   1315a:	          move.l d0,-(sp)
   1315c:	          pea 1 <_start+0x1>
   13160:	          pea 1c8d4 <thumbHeight>
   13166:	          jsr 147e8 <getValueType>
   1316c:	          lea 12(sp),sp
   13170:	          tst.w d0
   13172:	      /-- bne.s 1317a <builtIn_setThumbnailSize+0x2c>
   13174:	      |   moveq #1,d0
   13176:	/-----|-- bra.w 13236 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1317a:	|     \-> moveq #24,d0
   1317c:	|         add.l 60(sp),d0
   13180:	|         move.l d0,-(sp)
   13182:	|         jsr 1516c <trimStack>
   13188:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1318a:	|         movea.l 60(sp),a0
   1318e:	|         move.l 24(a0),d0
   13192:	|         move.l d0,-(sp)
   13194:	|         pea 1 <_start+0x1>
   13198:	|         pea 1c8d0 <thumbWidth>
   1319e:	|         jsr 147e8 <getValueType>
   131a4:	|         lea 12(sp),sp
   131a8:	|         tst.w d0
   131aa:	|     /-- bne.s 131b2 <builtIn_setThumbnailSize+0x64>
   131ac:	|     |   moveq #1,d0
   131ae:	+-----|-- bra.w 13236 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   131b2:	|     \-> moveq #24,d0
   131b4:	|         add.l 60(sp),d0
   131b8:	|         move.l d0,-(sp)
   131ba:	|         jsr 1516c <trimStack>
   131c0:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   131c2:	|         move.l 1c8d0 <thumbWidth>,d0
   131c8:	|     /-- bmi.s 131f6 <builtIn_setThumbnailSize+0xa8>
   131ca:	|     |   move.l 1c8d4 <thumbHeight>,d0
   131d0:	|     +-- bmi.s 131f6 <builtIn_setThumbnailSize+0xa8>
   131d2:	|     |   move.l 1c8d0 <thumbWidth>,d0
   131d8:	|     |   move.l d0,d1
   131da:	|     |   move.l 1c912 <winWidth>,d0
   131e0:	|     |   cmp.l d1,d0
   131e2:	|     +-- bcs.s 131f6 <builtIn_setThumbnailSize+0xa8>
   131e4:	|     |   move.l 1c8d4 <thumbHeight>,d0
   131ea:	|     |   move.l d0,d1
   131ec:	|     |   move.l 1c916 <winHeight>,d0
   131f2:	|     |   cmp.l d1,d0
   131f4:	|  /--|-- bcc.s 13234 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   131f6:	|  |  \-> move.l 1c8d4 <thumbHeight>,d1
   131fc:	|  |      move.l 1c8d0 <thumbWidth>,d0
   13202:	|  |      move.l d1,-(sp)
   13204:	|  |      move.l d0,-(sp)
   13206:	|  |      pea 19cac <graphics.c.1c13408a+0xc4>
   1320c:	|  |      lea 14(sp),a0
   13210:	|  |      move.l a0,-(sp)
   13212:	|  |      jsr 13ff2 <sprintf>
   13218:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1321c:	|  |      lea 2(sp),a0
   13220:	|  |      move.l a0,-(sp)
   13222:	|  |      pea 19cb4 <graphics.c.1c13408a+0xcc>
   13228:	|  |      jsr 17248 <KPrintF>
   1322e:	|  |      addq.l #8,sp
		return BR_ERROR;
   13230:	|  |      moveq #1,d0
   13232:	+--|----- bra.s 13236 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13234:	|  \----> moveq #2,d0
}
   13236:	\-------> lea 52(sp),sp
   1323a:	          rts

0001323c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1323c:	       lea -12(sp),sp
   13240:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13242:	       movea.l 24(sp),a0
   13246:	       move.l 24(a0),d0
   1324a:	       move.l d0,-(sp)
   1324c:	       pea 1 <_start+0x1>
   13250:	       lea 12(sp),a0
   13254:	       move.l a0,-(sp)
   13256:	       jsr 147e8 <getValueType>
   1325c:	       lea 12(sp),sp
   13260:	       tst.w d0
   13262:	   /-- bne.s 1326a <builtIn_hasFlag+0x2e>
   13264:	   |   moveq #1,d0
   13266:	/--|-- bra.w 132fa <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1326a:	|  \-> moveq #24,d0
   1326c:	|      add.l 24(sp),d0
   13270:	|      move.l d0,-(sp)
   13272:	|      jsr 1516c <trimStack>
   13278:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1327a:	|      movea.l 24(sp),a0
   1327e:	|      move.l 24(a0),d0
   13282:	|      move.l d0,-(sp)
   13284:	|      pea 7 <_start+0x7>
   13288:	|      moveq #16,d0
   1328a:	|      add.l sp,d0
   1328c:	|      move.l d0,-(sp)
   1328e:	|      jsr 147e8 <getValueType>
   13294:	|      lea 12(sp),sp
   13298:	|      tst.w d0
   1329a:	|  /-- bne.s 132a0 <builtIn_hasFlag+0x64>
   1329c:	|  |   moveq #1,d0
   1329e:	+--|-- bra.s 132fa <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   132a0:	|  \-> moveq #24,d0
   132a2:	|      add.l 24(sp),d0
   132a6:	|      move.l d0,-(sp)
   132a8:	|      jsr 1516c <trimStack>
   132ae:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   132b0:	|      move.l 8(sp),d0
   132b4:	|      move.l d0,-(sp)
   132b6:	|      jsr d532 <findObjectType>
   132bc:	|      addq.l #4,sp
   132be:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   132c2:	|  /-- bne.s 132c8 <builtIn_hasFlag+0x8c>
   132c4:	|  |   moveq #1,d0
   132c6:	+--|-- bra.s 132fa <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   132c8:	|  \-> movea.l 12(sp),a0
   132cc:	|      move.w 36(a0),d0
   132d0:	|      moveq #0,d2
   132d2:	|      move.w d0,d2
   132d4:	|      move.l 4(sp),d1
   132d8:	|      moveq #1,d0
   132da:	|      lsl.l d1,d0
   132dc:	|      move.l d2,d1
   132de:	|      and.l d0,d1
   132e0:	|      moveq #28,d0
   132e2:	|      add.l 24(sp),d0
   132e6:	|      move.l d1,-(sp)
   132e8:	|      pea 1 <_start+0x1>
   132ec:	|      move.l d0,-(sp)
   132ee:	|      jsr 150da <setVariable>
   132f4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132f8:	|      moveq #2,d0
}
   132fa:	\----> move.l (sp)+,d2
   132fc:	       lea 12(sp),sp
   13300:	       rts

00013302 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13302:	       jsr d520 <snapshot>
   13308:	       tst.w d0
   1330a:	/----- beq.s 13310 <builtIn_snapshotGrab+0xe>
   1330c:	|      moveq #2,d0
   1330e:	|  /-- bra.s 13312 <builtIn_snapshotGrab+0x10>
   13310:	\--|-> moveq #1,d0
}
   13312:	   \-> rts

00013314 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13314:	jsr d3cc <nosnapshot>
	return BR_CONTINUE;
   1331a:	moveq #2,d0
}
   1331c:	rts

0001331e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1331e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13320:	move.w 1c21a <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13328:	movea.l 12(sp),a0
   1332c:	move.l 24(a0),d0
   13330:	move.l d0,-(sp)
   13332:	jsr 14d28 <getBoolean>
   13338:	addq.l #4,sp
   1333a:	move.w d0,1c21a <allowAnyFilename>
	trimStack (&fun -> stack);
   13340:	moveq #24,d0
   13342:	add.l 12(sp),d0
   13346:	move.l d0,-(sp)
   13348:	jsr 1516c <trimStack>
   1334e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13350:	movea.w 2(sp),a0
   13354:	moveq #28,d0
   13356:	add.l 12(sp),d0
   1335a:	move.l a0,-(sp)
   1335c:	pea 1 <_start+0x1>
   13360:	move.l d0,-(sp)
   13362:	jsr 150da <setVariable>
   13368:	lea 12(sp),sp
	return BR_CONTINUE;
   1336c:	moveq #2,d0
}
   1336e:	addq.l #4,sp
   13370:	rts

00013372 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13372:	moveq #24,d0
   13374:	add.l 8(sp),d0
   13378:	move.l d0,-(sp)
   1337a:	jsr 1516c <trimStack>
   13380:	addq.l #4,sp
	trimStack (&fun -> stack);
   13382:	moveq #24,d0
   13384:	add.l 8(sp),d0
   13388:	move.l d0,-(sp)
   1338a:	jsr 1516c <trimStack>
   13390:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13392:	moveq #28,d0
   13394:	add.l 8(sp),d0
   13398:	clr.l -(sp)
   1339a:	pea 1 <_start+0x1>
   1339e:	move.l d0,-(sp)
   133a0:	jsr 150da <setVariable>
   133a6:	lea 12(sp),sp

	return BR_CONTINUE;
   133aa:	moveq #2,d0
}
   133ac:	rts

000133ae <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   133ae:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   133b0:	movea.l 12(sp),a0
   133b4:	move.l 24(a0),d0
   133b8:	move.l d0,-(sp)
   133ba:	jsr 14dbe <getTextFromAnyVar>
   133c0:	addq.l #4,sp
   133c2:	move.l d0,(sp)
	trimStack (&fun -> stack);
   133c4:	moveq #24,d0
   133c6:	add.l 12(sp),d0
   133ca:	move.l d0,-(sp)
   133cc:	jsr 1516c <trimStack>
   133d2:	addq.l #4,sp
	KPrintF (mess);
   133d4:	move.l (sp),-(sp)
   133d6:	jsr 17248 <KPrintF>
   133dc:	addq.l #4,sp
	return BR_ERROR;
   133de:	moveq #1,d0
}
   133e0:	addq.l #4,sp
   133e2:	rts

000133e4 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133e4:	moveq #24,d0
   133e6:	add.l 8(sp),d0
   133ea:	move.l d0,-(sp)
   133ec:	jsr 1516c <trimStack>
   133f2:	addq.l #4,sp
	trimStack (&fun -> stack);
   133f4:	moveq #24,d0
   133f6:	add.l 8(sp),d0
   133fa:	move.l d0,-(sp)
   133fc:	jsr 1516c <trimStack>
   13402:	addq.l #4,sp
	trimStack (&fun -> stack);
   13404:	moveq #24,d0
   13406:	add.l 8(sp),d0
   1340a:	move.l d0,-(sp)
   1340c:	jsr 1516c <trimStack>
   13412:	addq.l #4,sp
	trimStack (&fun -> stack);
   13414:	moveq #24,d0
   13416:	add.l 8(sp),d0
   1341a:	move.l d0,-(sp)
   1341c:	jsr 1516c <trimStack>
   13422:	addq.l #4,sp

	return BR_CONTINUE;
   13424:	moveq #2,d0
}
   13426:	rts

00013428 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13428:	moveq #24,d0
   1342a:	add.l 8(sp),d0
   1342e:	move.l d0,-(sp)
   13430:	jsr 1516c <trimStack>
   13436:	addq.l #4,sp
	trimStack (&fun -> stack);
   13438:	moveq #24,d0
   1343a:	add.l 8(sp),d0
   1343e:	move.l d0,-(sp)
   13440:	jsr 1516c <trimStack>
   13446:	addq.l #4,sp
	trimStack (&fun -> stack);
   13448:	moveq #24,d0
   1344a:	add.l 8(sp),d0
   1344e:	move.l d0,-(sp)
   13450:	jsr 1516c <trimStack>
   13456:	addq.l #4,sp

	return BR_CONTINUE;
   13458:	moveq #2,d0

}
   1345a:	rts

0001345c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1345c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1345e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13464:	sne d0
   13466:	neg.b d0
   13468:	moveq #0,d1
   1346a:	move.b d0,d1
   1346c:	moveq #28,d0
   1346e:	add.l 12(sp),d0
   13472:	move.l d1,-(sp)
   13474:	pea 1 <_start+0x1>
   13478:	move.l d0,-(sp)
   1347a:	jsr 150da <setVariable>
   13480:	lea 12(sp),sp
	return BR_CONTINUE;
   13484:	moveq #2,d0
}
   13486:	addq.l #4,sp
   13488:	rts

0001348a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1348a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1348c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13492:	pea 19ccb <graphics.c.1c13408a+0xe3>
   13498:	jsr 17248 <KPrintF>
   1349e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   134a0:	tst.w 2(sp)
   134a4:	sne d0
   134a6:	neg.b d0
   134a8:	moveq #0,d1
   134aa:	move.b d0,d1
   134ac:	moveq #28,d0
   134ae:	add.l 12(sp),d0
   134b2:	move.l d1,-(sp)
   134b4:	pea 1 <_start+0x1>
   134b8:	move.l d0,-(sp)
   134ba:	jsr 150da <setVariable>
   134c0:	lea 12(sp),sp
	return BR_CONTINUE;
   134c4:	moveq #2,d0
}
   134c6:	addq.l #4,sp
   134c8:	rts

000134ca <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   134ca:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   134ce:	             move.l 104(sp),d0
   134d2:	             cmpi.l #166,d0
   134d8:	/----------- bhi.w 135ba <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   134dc:	|            move.l 104(sp),d0
   134e0:	|            add.l d0,d0
   134e2:	|            movea.l d0,a1
   134e4:	|            adda.l d0,a1
   134e6:	|            lea 1c360 <paramNum>,a0
   134ec:	|            move.l (0,a1,a0.l),d0
   134f0:	|            moveq #-1,d1
   134f2:	|            cmp.l d0,d1
   134f4:	|  /-------- beq.w 13582 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   134f8:	|  |         move.l 104(sp),d0
   134fc:	|  |         add.l d0,d0
   134fe:	|  |         movea.l d0,a1
   13500:	|  |         adda.l d0,a1
   13502:	|  |         lea 1c360 <paramNum>,a0
   13508:	|  |         move.l (0,a1,a0.l),d0
   1350c:	|  |         cmp.l 108(sp),d0
   13510:	|  +-------- beq.s 13582 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13512:	|  |         move.l 104(sp),d0
   13516:	|  |         add.l d0,d0
   13518:	|  |         movea.l d0,a1
   1351a:	|  |         adda.l d0,a1
   1351c:	|  |         lea 1c360 <paramNum>,a0
   13522:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13526:	|  |         moveq #1,d1
   13528:	|  |         cmp.l d0,d1
   1352a:	|  |  /----- bne.s 13534 <callBuiltIn+0x6a>
   1352c:	|  |  |      move.l #100839,d0
   13532:	|  |  |  /-- bra.s 1353a <callBuiltIn+0x70>
   13534:	|  |  \--|-> move.l #105729,d0
   1353a:	|  |     \-> move.l 104(sp),d1
   1353e:	|  |         add.l d1,d1
   13540:	|  |         movea.l d1,a1
   13542:	|  |         adda.l d1,a1
   13544:	|  |         lea 1c360 <paramNum>,a0
   1354a:	|  |         move.l (0,a1,a0.l),d1
   1354e:	|  |         move.l d0,-(sp)
   13550:	|  |         move.l d1,-(sp)
   13552:	|  |         pea 19d03 <graphics.c.1c13408a+0x11b>
   13558:	|  |         lea 12(sp),a0
   1355c:	|  |         move.l a0,-(sp)
   1355e:	|  |         jsr 13ff2 <sprintf>
   13564:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13568:	|  |         movea.l sp,a0
   1356a:	|  |         move.l a0,-(sp)
   1356c:	|  |         jsr b8 <copyString>
   13572:	|  |         addq.l #4,sp
   13574:	|  |         move.l d0,-(sp)
   13576:	|  |         jsr 17248 <KPrintF>
   1357c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1357e:	|  |         moveq #1,d0
   13580:	|  |     /-- bra.s 135ca <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13582:	|  \-----|-> move.l 104(sp),d0
   13586:	|        |   add.l d0,d0
   13588:	|        |   movea.l d0,a1
   1358a:	|        |   adda.l d0,a1
   1358c:	|        |   lea 1c5fc <builtInFunctionArray>,a0
   13592:	|        |   move.l (0,a1,a0.l),d0
   13596:	+--------|-- beq.s 135ba <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13598:	|        |   move.l 104(sp),d0
   1359c:	|        |   add.l d0,d0
   1359e:	|        |   movea.l d0,a1
   135a0:	|        |   adda.l d0,a1
   135a2:	|        |   lea 1c5fc <builtInFunctionArray>,a0
   135a8:	|        |   movea.l (0,a1,a0.l),a0
   135ac:	|        |   move.l 112(sp),-(sp)
   135b0:	|        |   move.l 112(sp),-(sp)
   135b4:	|        |   jsr (a0)
   135b6:	|        |   addq.l #8,sp
   135b8:	|        +-- bra.s 135ca <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   135ba:	\--------|-> pea 19d2e <graphics.c.1c13408a+0x146>
   135c0:	         |   jsr 17248 <KPrintF>
   135c6:	         |   addq.l #4,sp
	return BR_ERROR;
   135c8:	         |   moveq #1,d0
}
   135ca:	         \-> lea 100(sp),sp
   135ce:	             rts

000135d0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   135d0:	          subq.l #8,sp
	int indexNum = -1;
   135d2:	          moveq #-1,d0
   135d4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135d8:	          clr.l (sp)
   135da:	   /----- bra.s 13600 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   135dc:	/--|----> move.l 1ca92 <languageTable>,d1
   135e2:	|  |      move.l (sp),d0
   135e4:	|  |      add.l d0,d0
   135e6:	|  |      add.l d0,d0
   135e8:	|  |      movea.l d1,a0
   135ea:	|  |      adda.l d0,a0
   135ec:	|  |      move.l (a0),d0
   135ee:	|  |      move.l d0,d1
   135f0:	|  |      move.l 1ca9a <gameSettings>,d0
   135f6:	|  |      cmp.l d1,d0
   135f8:	|  |  /-- bne.s 135fe <getLanguageForFileB+0x2e>
   135fa:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135fe:	|  |  \-> addq.l #1,(sp)
   13600:	|  \----> move.l 1ca9e <gameSettings+0x4>,d0
   13606:	|         cmp.l (sp),d0
   13608:	\-------- bcc.s 135dc <getLanguageForFileB+0xc>
	}

	return indexNum;
   1360a:	          move.l 4(sp),d0
}
   1360e:	          addq.l #8,sp
   13610:	          rts

00013612 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13612:	          lea -20(sp),sp
   13616:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13618:	          move.l 28(sp),-(sp)
   1361c:	          jsr 13cd4 <strlen>
   13622:	          addq.l #4,sp
   13624:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13628:	          moveq #4,d0
   1362a:	          cmp.l 12(sp),d0
   1362e:	      /-- bge.s 13652 <getPrefsFilename+0x40>
   13630:	      |   move.l 12(sp),d0
   13634:	      |   subq.l #4,d0
   13636:	      |   movea.l 28(sp),a0
   1363a:	      |   adda.l d0,a0
   1363c:	      |   move.b (a0),d0
   1363e:	      |   cmpi.b #46,d0
   13642:	      +-- bne.s 13652 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13644:	      |   move.l 12(sp),d0
   13648:	      |   subq.l #4,d0
   1364a:	      |   movea.l 28(sp),a0
   1364e:	      |   adda.l d0,a0
   13650:	      |   clr.b (a0)
	}

	char * f = filename;
   13652:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13658:	          clr.l 20(sp)
   1365c:	   /----- bra.s 13684 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1365e:	/--|----> move.l 20(sp),d0
   13662:	|  |      movea.l 28(sp),a0
   13666:	|  |      adda.l d0,a0
   13668:	|  |      move.b (a0),d0
   1366a:	|  |      cmpi.b #47,d0
   1366e:	|  |  /-- bne.s 13680 <getPrefsFilename+0x6e>
   13670:	|  |  |   move.l 20(sp),d0
   13674:	|  |  |   addq.l #1,d0
   13676:	|  |  |   move.l 28(sp),d1
   1367a:	|  |  |   add.l d0,d1
   1367c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13680:	|  |  \-> addq.l #1,20(sp)
   13684:	|  \----> move.l 20(sp),d0
   13688:	|         cmp.l 12(sp),d0
   1368c:	\-------- blt.s 1365e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1368e:	          pea 19d59 <graphics.c.1c13408a+0x171>
   13694:	          move.l 20(sp),-(sp)
   13698:	          jsr 13d14 <joinStrings>
   1369e:	          addq.l #8,sp
   136a0:	          move.l d0,8(sp)

	FreeVec(filename);
   136a4:	          move.l 28(sp),4(sp)
   136aa:	          move.l 1c9be <SysBase>,d0
   136b0:	          movea.l d0,a6
   136b2:	          movea.l 4(sp),a1
   136b6:	          jsr -690(a6)
	filename = NULL;
   136ba:	          clr.l 28(sp)
	return joined;
   136be:	          move.l 8(sp),d0
}
   136c2:	          movea.l (sp)+,a6
   136c4:	          lea 20(sp),sp
   136c8:	          rts

000136ca <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   136ca:	             lea -28(sp),sp
   136ce:	             move.l a6,-(sp)
   136d0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136d2:	             move.l 1ca9e <gameSettings+0x4>,d0
   136d8:	             move.l d0,d1
   136da:	             addq.l #1,d1
   136dc:	             move.l d1,28(sp)
   136e0:	             clr.l 24(sp)
   136e4:	             move.l 1c9be <SysBase>,d0
   136ea:	             movea.l d0,a6
   136ec:	             move.l 28(sp),d0
   136f0:	             move.l 24(sp),d1
   136f4:	             jsr -684(a6)
   136f8:	             move.l d0,20(sp)
   136fc:	             move.l 20(sp),d0
   13700:	             move.l d0,1ca92 <languageTable>
    if( languageTable == 0) {
   13706:	             move.l 1ca92 <languageTable>,d0
   1370c:	         /-- bne.s 1371c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1370e:	         |   pea 19d5e <graphics.c.1c13408a+0x176>
   13714:	         |   jsr 17248 <KPrintF>
   1371a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1371c:	         \-> move.l 1ca9e <gameSettings+0x4>,d0
   13722:	             move.l d0,d1
   13724:	             addq.l #1,d1
   13726:	             move.l d1,16(sp)
   1372a:	             clr.l 12(sp)
   1372e:	             move.l 1c9be <SysBase>,d0
   13734:	             movea.l d0,a6
   13736:	             move.l 16(sp),d0
   1373a:	             move.l 12(sp),d1
   1373e:	             jsr -684(a6)
   13742:	             move.l d0,8(sp)
   13746:	             move.l 8(sp),d0
   1374a:	             move.l d0,1ca96 <languageName>
	if( languageName == 0) {
   13750:	             move.l 1ca96 <languageName>,d0
   13756:	         /-- bne.s 13766 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13758:	         |   pea 19d94 <graphics.c.1c13408a+0x1ac>
   1375e:	         |   jsr 17248 <KPrintF>
   13764:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13766:	         \-> clr.l 32(sp)
   1376a:	   /-------- bra.s 137e2 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1376c:	/--|-------> tst.l 32(sp)
   13770:	|  |  /----- beq.s 13780 <makeLanguageTable+0xb6>
   13772:	|  |  |      move.l 40(sp),-(sp)
   13776:	|  |  |      jsr 6bc <get2bytes>
   1377c:	|  |  |      addq.l #4,sp
   1377e:	|  |  |  /-- bra.s 13782 <makeLanguageTable+0xb8>
   13780:	|  |  \--|-> moveq #0,d0
   13782:	|  |     \-> movea.l 1ca92 <languageTable>,a0
   13788:	|  |         move.l 32(sp),d1
   1378c:	|  |         add.l d1,d1
   1378e:	|  |         add.l d1,d1
   13790:	|  |         adda.l d1,a0
   13792:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13794:	|  |         move.l 1ca96 <languageName>,d1
   1379a:	|  |         move.l 32(sp),d0
   1379e:	|  |         add.l d0,d0
   137a0:	|  |         add.l d0,d0
   137a2:	|  |         movea.l d1,a0
   137a4:	|  |         adda.l d0,a0
   137a6:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   137a8:	|  |         move.l 1c968 <gameVersion>,d0
   137ae:	|  |         cmpi.l #511,d0
   137b4:	|  |     /-- ble.s 137de <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   137b6:	|  |     |   move.l 1ca9e <gameSettings+0x4>,d0
   137bc:	|  |     +-- beq.s 137de <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   137be:	|  |     |   move.l 1ca96 <languageName>,d1
   137c4:	|  |     |   move.l 32(sp),d0
   137c8:	|  |     |   add.l d0,d0
   137ca:	|  |     |   add.l d0,d0
   137cc:	|  |     |   movea.l d1,a2
   137ce:	|  |     |   adda.l d0,a2
   137d0:	|  |     |   move.l 40(sp),-(sp)
   137d4:	|  |     |   jsr b02 <readString>
   137da:	|  |     |   addq.l #4,sp
   137dc:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   137de:	|  |     \-> addq.l #1,32(sp)
   137e2:	|  \-------> move.l 1ca9e <gameSettings+0x4>,d0
   137e8:	|            cmp.l 32(sp),d0
   137ec:	\----------- bcc.w 1376c <makeLanguageTable+0xa2>
		}
	}
}
   137f0:	             nop
   137f2:	             nop
   137f4:	             movea.l (sp)+,a2
   137f6:	             movea.l (sp)+,a6
   137f8:	             lea 28(sp),sp
   137fc:	             rts

000137fe <readIniFile>:

void readIniFile (char * filename) {
   137fe:	                      lea -564(sp),sp
   13802:	                      move.l a6,-(sp)
   13804:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13806:	                      move.l 576(sp),-(sp)
   1380a:	                      jsr b8 <copyString>
   13810:	                      addq.l #4,sp
   13812:	                      move.l d0,-(sp)
   13814:	                      jsr 13612 <getPrefsFilename>
   1381a:	                      addq.l #4,sp
   1381c:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13820:	                      move.l 562(sp),558(sp)
   13826:	                      move.l #1005,554(sp)
   1382e:	                      move.l 1c9c6 <DOSBase>,d0
   13834:	                      movea.l d0,a6
   13836:	                      move.l 558(sp),d1
   1383a:	                      move.l 554(sp),d2
   1383e:	                      jsr -30(a6)
   13842:	                      move.l d0,550(sp)
   13846:	                      move.l 550(sp),d0
   1384a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1384e:	                      clr.l 1ca9a <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13854:	                      move.w #1,1caa2 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1385c:	                      clr.l 1caa4 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13862:	                      moveq #1,d0
   13864:	                      move.l d0,1caa8 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1386a:	                      clr.w 1caac <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13870:	                      clr.w 1caae <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13876:	                      clr.w 1cab0 <gameSettings+0x16>

	FreeVec(langName);
   1387c:	                      move.l 562(sp),542(sp)
   13882:	                      move.l 1c9be <SysBase>,d0
   13888:	                      movea.l d0,a6
   1388a:	                      movea.l 542(sp),a1
   1388e:	                      jsr -690(a6)
	langName = NULL;
   13892:	                      clr.l 562(sp)

	if (fp) {
   13896:	                      tst.l 546(sp)
   1389a:	/-------------------- beq.w 13b78 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1389e:	|                     move.l sp,d0
   138a0:	|                     addi.l #265,d0
   138a6:	|                     move.l #257,d1
   138ac:	|                     move.l d1,-(sp)
   138ae:	|                     clr.l -(sp)
   138b0:	|                     move.l d0,-(sp)
   138b2:	|                     jsr 171cc <memset>
   138b8:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   138bc:	|                     move.l sp,d0
   138be:	|                     addq.l #8,d0
   138c0:	|                     move.l #257,d1
   138c6:	|                     move.l d1,-(sp)
   138c8:	|                     clr.l -(sp)
   138ca:	|                     move.l d0,-(sp)
   138cc:	|                     jsr 171cc <memset>
   138d2:	|                     lea 12(sp),sp
		unsigned char here = 0;
   138d6:	|                     clr.b 571(sp)
		char readChar = ' ';
   138da:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   138e0:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   138e6:	|                     clr.w 566(sp)
		LONG tmp = 0;
   138ea:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   138ee:	|  /----------------> move.l 546(sp),534(sp)
   138f4:	|  |                  move.l 1c9c6 <DOSBase>,d0
   138fa:	|  |                  movea.l d0,a6
   138fc:	|  |                  move.l 534(sp),d1
   13900:	|  |                  jsr -306(a6)
   13904:	|  |                  move.l d0,530(sp)
   13908:	|  |                  move.l 530(sp),d0
   1390c:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13910:	|  |                  moveq #-1,d1
   13912:	|  |                  cmp.l 538(sp),d1
   13916:	|  |           /----- bne.s 13924 <readIniFile+0x126>
				readChar = '\n';
   13918:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   1391e:	|  |           |      clr.w 568(sp)
   13922:	|  |           |  /-- bra.s 1392a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13924:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1392a:	|  |              \-> move.b 570(sp),d0
   1392e:	|  |                  ext.w d0
   13930:	|  |                  movea.w d0,a0
   13932:	|  |                  moveq #61,d0
   13934:	|  |                  cmp.l a0,d0
   13936:	|  |     /----------- beq.w 13ae0 <readIniFile+0x2e2>
   1393a:	|  |     |            moveq #61,d1
   1393c:	|  |     |            cmp.l a0,d1
   1393e:	|  |  /--|----------- blt.w 13aec <readIniFile+0x2ee>
   13942:	|  |  |  |            moveq #10,d0
   13944:	|  |  |  |            cmp.l a0,d0
   13946:	|  |  |  |        /-- beq.s 13950 <readIniFile+0x152>
   13948:	|  |  |  |        |   moveq #13,d1
   1394a:	|  |  |  |        |   cmp.l a0,d1
   1394c:	|  |  +--|--------|-- bne.w 13aec <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13950:	|  |  |  |        \-> tst.w 566(sp)
   13954:	|  |  |  |     /----- beq.w 13ace <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13958:	|  |  |  |     |      pea 19dc8 <graphics.c.1c13408a+0x1e0>
   1395e:	|  |  |  |     |      move.l sp,d0
   13960:	|  |  |  |     |      addi.l #269,d0
   13966:	|  |  |  |     |      move.l d0,-(sp)
   13968:	|  |  |  |     |      jsr 13c94 <strcmp>
   1396e:	|  |  |  |     |      addq.l #8,sp
   13970:	|  |  |  |     |      tst.l d0
   13972:	|  |  |  |     |  /-- bne.s 1398c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13974:	|  |  |  |     |  |   move.l sp,d0
   13976:	|  |  |  |     |  |   addq.l #8,d0
   13978:	|  |  |  |     |  |   move.l d0,-(sp)
   1397a:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   13980:	|  |  |  |     |  |   addq.l #4,sp
   13982:	|  |  |  |     |  |   move.l d0,1ca9a <gameSettings>
   13988:	|  |  |  |     +--|-- bra.w 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1398c:	|  |  |  |     |  \-> pea 19dd1 <graphics.c.1c13408a+0x1e9>
   13992:	|  |  |  |     |      move.l sp,d0
   13994:	|  |  |  |     |      addi.l #269,d0
   1399a:	|  |  |  |     |      move.l d0,-(sp)
   1399c:	|  |  |  |     |      jsr 13c94 <strcmp>
   139a2:	|  |  |  |     |      addq.l #8,sp
   139a4:	|  |  |  |     |      tst.l d0
   139a6:	|  |  |  |     |  /-- bne.s 139cc <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   139a8:	|  |  |  |     |  |   move.l sp,d0
   139aa:	|  |  |  |     |  |   addq.l #8,d0
   139ac:	|  |  |  |     |  |   move.l d0,-(sp)
   139ae:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   139b4:	|  |  |  |     |  |   addq.l #4,sp
   139b6:	|  |  |  |     |  |   tst.l d0
   139b8:	|  |  |  |     |  |   seq d0
   139ba:	|  |  |  |     |  |   neg.b d0
   139bc:	|  |  |  |     |  |   move.b d0,d0
   139be:	|  |  |  |     |  |   andi.w #255,d0
   139c2:	|  |  |  |     |  |   move.w d0,1caa2 <gameSettings+0x8>
   139c8:	|  |  |  |     +--|-- bra.w 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   139cc:	|  |  |  |     |  \-> pea 19dd8 <graphics.c.1c13408a+0x1f0>
   139d2:	|  |  |  |     |      move.l sp,d0
   139d4:	|  |  |  |     |      addi.l #269,d0
   139da:	|  |  |  |     |      move.l d0,-(sp)
   139dc:	|  |  |  |     |      jsr 13c94 <strcmp>
   139e2:	|  |  |  |     |      addq.l #8,sp
   139e4:	|  |  |  |     |      tst.l d0
   139e6:	|  |  |  |     |  /-- bne.s 13a00 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   139e8:	|  |  |  |     |  |   move.l sp,d0
   139ea:	|  |  |  |     |  |   addq.l #8,d0
   139ec:	|  |  |  |     |  |   move.l d0,-(sp)
   139ee:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   139f4:	|  |  |  |     |  |   addq.l #4,sp
   139f6:	|  |  |  |     |  |   move.l d0,1caa4 <gameSettings+0xa>
   139fc:	|  |  |  |     +--|-- bra.w 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13a00:	|  |  |  |     |  \-> pea 19de0 <graphics.c.1c13408a+0x1f8>
   13a06:	|  |  |  |     |      move.l sp,d0
   13a08:	|  |  |  |     |      addi.l #269,d0
   13a0e:	|  |  |  |     |      move.l d0,-(sp)
   13a10:	|  |  |  |     |      jsr 13c94 <strcmp>
   13a16:	|  |  |  |     |      addq.l #8,sp
   13a18:	|  |  |  |     |      tst.l d0
   13a1a:	|  |  |  |     |  /-- bne.s 13a34 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13a1c:	|  |  |  |     |  |   move.l sp,d0
   13a1e:	|  |  |  |     |  |   addq.l #8,d0
   13a20:	|  |  |  |     |  |   move.l d0,-(sp)
   13a22:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   13a28:	|  |  |  |     |  |   addq.l #4,sp
   13a2a:	|  |  |  |     |  |   move.l d0,1caa8 <gameSettings+0xe>
   13a30:	|  |  |  |     +--|-- bra.w 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13a34:	|  |  |  |     |  \-> pea 19dea <graphics.c.1c13408a+0x202>
   13a3a:	|  |  |  |     |      move.l sp,d0
   13a3c:	|  |  |  |     |      addi.l #269,d0
   13a42:	|  |  |  |     |      move.l d0,-(sp)
   13a44:	|  |  |  |     |      jsr 13c94 <strcmp>
   13a4a:	|  |  |  |     |      addq.l #8,sp
   13a4c:	|  |  |  |     |      tst.l d0
   13a4e:	|  |  |  |     |  /-- bne.s 13a68 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13a50:	|  |  |  |     |  |   move.l sp,d0
   13a52:	|  |  |  |     |  |   addq.l #8,d0
   13a54:	|  |  |  |     |  |   move.l d0,-(sp)
   13a56:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   13a5c:	|  |  |  |     |  |   addq.l #4,sp
   13a5e:	|  |  |  |     |  |   move.l d0,d0
   13a60:	|  |  |  |     |  |   move.w d0,1caac <gameSettings+0x12>
   13a66:	|  |  |  |     +--|-- bra.s 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a68:	|  |  |  |     |  \-> pea 19df6 <graphics.c.1c13408a+0x20e>
   13a6e:	|  |  |  |     |      move.l sp,d0
   13a70:	|  |  |  |     |      addi.l #269,d0
   13a76:	|  |  |  |     |      move.l d0,-(sp)
   13a78:	|  |  |  |     |      jsr 13c94 <strcmp>
   13a7e:	|  |  |  |     |      addq.l #8,sp
   13a80:	|  |  |  |     |      tst.l d0
   13a82:	|  |  |  |     |  /-- bne.s 13a9c <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a84:	|  |  |  |     |  |   move.l sp,d0
   13a86:	|  |  |  |     |  |   addq.l #8,d0
   13a88:	|  |  |  |     |  |   move.l d0,-(sp)
   13a8a:	|  |  |  |     |  |   jsr 13b84 <stringToInt>
   13a90:	|  |  |  |     |  |   addq.l #4,sp
   13a92:	|  |  |  |     |  |   move.l d0,d0
   13a94:	|  |  |  |     |  |   move.w d0,1caae <gameSettings+0x14>
   13a9a:	|  |  |  |     +--|-- bra.s 13ace <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a9c:	|  |  |  |     |  \-> pea 19e04 <graphics.c.1c13408a+0x21c>
   13aa2:	|  |  |  |     |      move.l sp,d0
   13aa4:	|  |  |  |     |      addi.l #269,d0
   13aaa:	|  |  |  |     |      move.l d0,-(sp)
   13aac:	|  |  |  |     |      jsr 13c94 <strcmp>
   13ab2:	|  |  |  |     |      addq.l #8,sp
   13ab4:	|  |  |  |     |      tst.l d0
   13ab6:	|  |  |  |     +----- bne.s 13ace <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13ab8:	|  |  |  |     |      move.l sp,d0
   13aba:	|  |  |  |     |      addq.l #8,d0
   13abc:	|  |  |  |     |      move.l d0,-(sp)
   13abe:	|  |  |  |     |      jsr 13b84 <stringToInt>
   13ac4:	|  |  |  |     |      addq.l #4,sp
   13ac6:	|  |  |  |     |      move.l d0,d0
   13ac8:	|  |  |  |     |      move.w d0,1cab0 <gameSettings+0x16>
					}
				}
				here = 0;
   13ace:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13ad2:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ad6:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13ada:	|  |  |  |            clr.b 8(sp)
				break;
   13ade:	|  |  |  |  /-------- bra.s 13b56 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13ae0:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13ae6:	|  |  |     |         clr.b 571(sp)
				break;
   13aea:	|  |  |     +-------- bra.s 13b56 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13aec:	|  |  \-----|-------> tst.w 566(sp)
   13af0:	|  |        |  /----- beq.s 13b24 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13af2:	|  |        |  |      move.b 571(sp),d0
   13af6:	|  |        |  |      move.b d0,d1
   13af8:	|  |        |  |      addq.b #1,d1
   13afa:	|  |        |  |      move.b d1,571(sp)
   13afe:	|  |        |  |      move.b d0,d0
   13b00:	|  |        |  |      andi.l #255,d0
   13b06:	|  |        |  |      lea 572(sp),a0
   13b0a:	|  |        |  |      adda.l d0,a0
   13b0c:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13b12:	|  |        |  |      moveq #0,d0
   13b14:	|  |        |  |      move.b 571(sp),d0
   13b18:	|  |        |  |      lea 572(sp),a0
   13b1c:	|  |        |  |      adda.l d0,a0
   13b1e:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13b22:	|  |        |  |  /-- bra.s 13b54 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13b24:	|  |        |  \--|-> move.b 571(sp),d0
   13b28:	|  |        |     |   move.b d0,d1
   13b2a:	|  |        |     |   addq.b #1,d1
   13b2c:	|  |        |     |   move.b d1,571(sp)
   13b30:	|  |        |     |   move.b d0,d0
   13b32:	|  |        |     |   andi.l #255,d0
   13b38:	|  |        |     |   lea 572(sp),a0
   13b3c:	|  |        |     |   adda.l d0,a0
   13b3e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13b44:	|  |        |     |   moveq #0,d0
   13b46:	|  |        |     |   move.b 571(sp),d0
   13b4a:	|  |        |     |   lea 572(sp),a0
   13b4e:	|  |        |     |   adda.l d0,a0
   13b50:	|  |        |     |   clr.b -307(a0)
				break;
   13b54:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13b56:	|  |        \-------> tst.w 568(sp)
   13b5a:	|  \----------------- bne.w 138ee <readIniFile+0xf0>

		Close(fp);
   13b5e:	|                     move.l 546(sp),526(sp)
   13b64:	|                     move.l 1c9c6 <DOSBase>,d0
   13b6a:	|                     movea.l d0,a6
   13b6c:	|                     move.l 526(sp),d1
   13b70:	|                     jsr -36(a6)
   13b74:	|                     move.l d0,522(sp)
	}
}
   13b78:	\-------------------> nop
   13b7a:	                      move.l (sp)+,d2
   13b7c:	                      movea.l (sp)+,a6
   13b7e:	                      lea 564(sp),sp
   13b82:	                      rts

00013b84 <stringToInt>:

unsigned int stringToInt (char * s) {
   13b84:	             subq.l #8,sp
	int i = 0;
   13b86:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b8a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b8e:	/----------> movea.l 12(sp),a0
   13b92:	|            move.b (a0),d0
   13b94:	|            cmpi.b #47,d0
   13b98:	|        /-- ble.s 13bd0 <stringToInt+0x4c>
   13b9a:	|        |   movea.l 12(sp),a0
   13b9e:	|        |   move.b (a0),d0
   13ba0:	|        |   cmpi.b #57,d0
   13ba4:	|        +-- bgt.s 13bd0 <stringToInt+0x4c>
			i *= 10;
   13ba6:	|        |   move.l 4(sp),d1
   13baa:	|        |   move.l d1,d0
   13bac:	|        |   add.l d0,d0
   13bae:	|        |   add.l d0,d0
   13bb0:	|        |   add.l d1,d0
   13bb2:	|        |   add.l d0,d0
   13bb4:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13bb8:	|        |   movea.l 12(sp),a0
   13bbc:	|        |   move.b (a0),d0
   13bbe:	|        |   ext.w d0
   13bc0:	|        |   movea.w d0,a0
   13bc2:	|        |   moveq #-48,d0
   13bc4:	|        |   add.l a0,d0
   13bc6:	|        |   add.l d0,4(sp)
			s ++;
   13bca:	|        |   addq.l #1,12(sp)
   13bce:	|  /-----|-- bra.s 13c08 <stringToInt+0x84>
		} else if (*s == '-') {
   13bd0:	|  |     \-> movea.l 12(sp),a0
   13bd4:	|  |         move.b (a0),d0
   13bd6:	|  |         cmpi.b #45,d0
   13bda:	|  |     /-- bne.s 13bf4 <stringToInt+0x70>
			negative = ! negative;
   13bdc:	|  |     |   tst.w 2(sp)
   13be0:	|  |     |   seq d0
   13be2:	|  |     |   neg.b d0
   13be4:	|  |     |   move.b d0,d0
   13be6:	|  |     |   andi.w #255,d0
   13bea:	|  |     |   move.w d0,2(sp)
			s++;
   13bee:	|  |     |   addq.l #1,12(sp)
   13bf2:	+--|-----|-- bra.s 13b8e <stringToInt+0xa>
		} else {
			if (negative)
   13bf4:	|  |     \-> tst.w 2(sp)
   13bf8:	|  |     /-- beq.s 13c02 <stringToInt+0x7e>
				return -i;
   13bfa:	|  |     |   move.l 4(sp),d0
   13bfe:	|  |     |   neg.l d0
   13c00:	|  |  /--|-- bra.s 13c0a <stringToInt+0x86>
			return i;
   13c02:	|  |  |  \-> move.l 4(sp),d0
   13c06:	|  |  +----- bra.s 13c0a <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13c08:	\--\--|----X bra.s 13b8e <stringToInt+0xa>
		}
	}
   13c0a:	      \----> addq.l #8,sp
   13c0c:	             rts

00013c0e <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13c0e:	    lea -28(sp),sp
   13c12:	    move.l a6,-(sp)
   13c14:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13c16:	    pea 19e0e <graphics.c.1c13408a+0x226>
   13c1c:	    jsr 17248 <KPrintF>
   13c22:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13c24:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13c28:	    move.l 40(sp),30(sp)
   13c2e:	    move.l #1005,26(sp)
   13c36:	    move.l 1c9c6 <DOSBase>,d0
   13c3c:	    movea.l d0,a6
   13c3e:	    move.l 30(sp),d1
   13c42:	    move.l 26(sp),d2
   13c46:	    jsr -30(a6)
   13c4a:	    move.l d0,22(sp)
   13c4e:	    move.l 22(sp),d0
   13c52:	    move.l d0,18(sp)
	if (tester) {
   13c56:	/-- beq.s 13c86 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13c58:	|   pea 19e28 <graphics.c.1c13408a+0x240>
   13c5e:	|   jsr 17248 <KPrintF>
   13c64:	|   addq.l #4,sp
		retval = 1;
   13c66:	|   move.b #1,35(sp)
		Close(tester);
   13c6c:	|   move.l 18(sp),14(sp)
   13c72:	|   move.l 1c9c6 <DOSBase>,d0
   13c78:	|   movea.l d0,a6
   13c7a:	|   move.l 14(sp),d1
   13c7e:	|   jsr -36(a6)
   13c82:	|   move.l d0,10(sp)
	}
	return retval;
   13c86:	\-> move.b 35(sp),d0
   13c8a:	    move.l (sp)+,d2
   13c8c:	    movea.l (sp)+,a6
   13c8e:	    lea 28(sp),sp
   13c92:	    rts

00013c94 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13c94:	   /-- bra.s 13c9e <strcmp+0xa>
    {
        s1++;
   13c96:	/--|-> addq.l #1,4(sp)
        s2++;
   13c9a:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c9e:	|  \-> movea.l 4(sp),a0
   13ca2:	|      move.b (a0),d0
   13ca4:	|  /-- beq.s 13cb6 <strcmp+0x22>
   13ca6:	|  |   movea.l 4(sp),a0
   13caa:	|  |   move.b (a0),d1
   13cac:	|  |   movea.l 8(sp),a0
   13cb0:	|  |   move.b (a0),d0
   13cb2:	|  |   cmp.b d1,d0
   13cb4:	\--|-- beq.s 13c96 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13cb6:	   \-> movea.l 4(sp),a0
   13cba:	       move.b (a0),d0
   13cbc:	       moveq #0,d1
   13cbe:	       move.b d0,d1
   13cc0:	       movea.l 8(sp),a0
   13cc4:	       move.b (a0),d0
   13cc6:	       move.b d0,d0
   13cc8:	       andi.l #255,d0
   13cce:	       sub.l d0,d1
   13cd0:	       move.l d1,d0
}
   13cd2:	       rts

00013cd4 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13cd4:	       subq.l #4,sp
	long unsigned int i = 0;
   13cd6:	       clr.l (sp)
	while(s[i]) i++; 
   13cd8:	   /-- bra.s 13cdc <strlen+0x8>
   13cda:	/--|-> addq.l #1,(sp)
   13cdc:	|  \-> movea.l 8(sp),a0
   13ce0:	|      adda.l (sp),a0
   13ce2:	|      move.b (a0),d0
   13ce4:	\----- bne.s 13cda <strlen+0x6>
	return(i);
   13ce6:	       move.l (sp),d0
}
   13ce8:	       addq.l #4,sp
   13cea:	       rts

00013cec <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13cec:	    nop
   13cee:	/-> move.l 8(sp),d0
   13cf2:	|   move.l d0,d1
   13cf4:	|   addq.l #1,d1
   13cf6:	|   move.l d1,8(sp)
   13cfa:	|   movea.l 4(sp),a0
   13cfe:	|   lea 1(a0),a1
   13d02:	|   move.l a1,4(sp)
   13d06:	|   movea.l d0,a1
   13d08:	|   move.b (a1),d0
   13d0a:	|   move.b d0,(a0)
   13d0c:	|   move.b (a0),d0
   13d0e:	\-- bne.s 13cee <strcpy+0x2>
}
   13d10:	    nop
   13d12:	    rts

00013d14 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13d14:	    lea -20(sp),sp
   13d18:	    move.l a6,-(sp)
   13d1a:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13d1c:	    move.l 32(sp),-(sp)
   13d20:	    jsr 13cd4 <strlen>
   13d26:	    addq.l #4,sp
   13d28:	    move.l d0,d2
   13d2a:	    move.l 36(sp),-(sp)
   13d2e:	    jsr 13cd4 <strlen>
   13d34:	    addq.l #4,sp
   13d36:	    add.l d2,d0
   13d38:	    move.l d0,d1
   13d3a:	    addq.l #1,d1
   13d3c:	    move.l d1,20(sp)
   13d40:	    clr.l 16(sp)
   13d44:	    move.l 1c9be <SysBase>,d0
   13d4a:	    movea.l d0,a6
   13d4c:	    move.l 20(sp),d0
   13d50:	    move.l 16(sp),d1
   13d54:	    jsr -684(a6)
   13d58:	    move.l d0,12(sp)
   13d5c:	    move.l 12(sp),d0
   13d60:	    move.l d0,8(sp)
	char * t = newString;
   13d64:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d6a:	    nop
   13d6c:	/-> move.l 32(sp),d0
   13d70:	|   move.l d0,d1
   13d72:	|   addq.l #1,d1
   13d74:	|   move.l d1,32(sp)
   13d78:	|   movea.l 24(sp),a0
   13d7c:	|   lea 1(a0),a1
   13d80:	|   move.l a1,24(sp)
   13d84:	|   movea.l d0,a1
   13d86:	|   move.b (a1),d0
   13d88:	|   move.b d0,(a0)
   13d8a:	|   move.b (a0),d0
   13d8c:	\-- bne.s 13d6c <joinStrings+0x58>
	t--;
   13d8e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13d92:	    nop
   13d94:	/-> move.l 36(sp),d0
   13d98:	|   move.l d0,d1
   13d9a:	|   addq.l #1,d1
   13d9c:	|   move.l d1,36(sp)
   13da0:	|   movea.l 24(sp),a0
   13da4:	|   lea 1(a0),a1
   13da8:	|   move.l a1,24(sp)
   13dac:	|   movea.l d0,a1
   13dae:	|   move.b (a1),d0
   13db0:	|   move.b d0,(a0)
   13db2:	|   move.b (a0),d0
   13db4:	\-- bne.s 13d94 <joinStrings+0x80>

	return newString;
   13db6:	    move.l 8(sp),d0
}
   13dba:	    move.l (sp)+,d2
   13dbc:	    movea.l (sp)+,a6
   13dbe:	    lea 20(sp),sp
   13dc2:	    rts

00013dc4 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13dc4:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13dc8:	       moveq #10,d0
   13dca:	       cmp.l 28(sp),d0
   13dce:	   /-- bne.s 13dec <itoa+0x28>
   13dd0:	   |   tst.l 20(sp)
   13dd4:	   +-- bge.s 13dec <itoa+0x28>
        *str++ = '-';
   13dd6:	   |   move.l 24(sp),d0
   13dda:	   |   move.l d0,d1
   13ddc:	   |   addq.l #1,d1
   13dde:	   |   move.l d1,24(sp)
   13de2:	   |   movea.l d0,a0
   13de4:	   |   move.b #45,(a0)
        value *= -1;
   13de8:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13dec:	   \-> move.l 24(sp),12(sp)
   13df2:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13df8:	   /-> move.l 20(sp),d0
   13dfc:	   |   move.l 28(sp),-(sp)
   13e00:	   |   move.l d0,-(sp)
   13e02:	   |   jsr 17ca8 <__modsi3>
   13e08:	   |   addq.l #8,sp
   13e0a:	   |   movea.l d0,a1
   13e0c:	   |   move.l 12(sp),d0
   13e10:	   |   move.l d0,d1
   13e12:	   |   addq.l #1,d1
   13e14:	   |   move.l d1,12(sp)
   13e18:	   |   lea 19e40 <graphics.c.1c13408a+0x258>,a0
   13e1e:	   |   move.b (0,a1,a0.l),d1
   13e22:	   |   movea.l d0,a0
   13e24:	   |   move.b d1,(a0)
        value /= base;
   13e26:	   |   move.l 28(sp),-(sp)
   13e2a:	   |   move.l 24(sp),-(sp)
   13e2e:	   |   jsr 17c7a <__divsi3>
   13e34:	   |   addq.l #8,sp
   13e36:	   |   move.l d0,20(sp)
    } while (value);
   13e3a:	   \-- bne.s 13df8 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13e3c:	       move.l 12(sp),d0
   13e40:	       move.l d0,d1
   13e42:	       subq.l #1,d1
   13e44:	       move.l d1,12(sp)
   13e48:	       movea.l d0,a0
   13e4a:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13e4c:	       move.l 4(sp),8(sp)
   13e52:	   /-- bra.s 13e78 <itoa+0xb4>
        char temp = *low;
   13e54:	/--|-> movea.l 8(sp),a0
   13e58:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13e5c:	|  |   movea.l 12(sp),a0
   13e60:	|  |   move.b (a0),d0
   13e62:	|  |   movea.l 8(sp),a0
   13e66:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e68:	|  |   movea.l 12(sp),a0
   13e6c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e70:	|  |   addq.l #1,8(sp)
   13e74:	|  |   subq.l #1,12(sp)
   13e78:	|  \-> move.l 8(sp),d0
   13e7c:	|      cmp.l 12(sp),d0
   13e80:	\----- bcs.s 13e54 <itoa+0x90>
    }
    return rc;
   13e82:	       move.l 4(sp),d0
}
   13e86:	       lea 16(sp),sp
   13e8a:	       rts

00013e8c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e8c:	                            lea -40(sp),sp
   13e90:	                            move.l d2,-(sp)
    char* s = str;
   13e92:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13e98:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e9e:	   /----------------------- bra.w 13fd2 <vsprintf2+0x146>
        if (*p == '%') {
   13ea2:	/--|----------------------> movea.l 36(sp),a0
   13ea6:	|  |                        move.b (a0),d0
   13ea8:	|  |                        cmpi.b #37,d0
   13eac:	|  |  /-------------------- bne.w 13fb8 <vsprintf2+0x12c>
            switch (*++p) {
   13eb0:	|  |  |                     addq.l #1,36(sp)
   13eb4:	|  |  |                     movea.l 36(sp),a0
   13eb8:	|  |  |                     move.b (a0),d0
   13eba:	|  |  |                     ext.w d0
   13ebc:	|  |  |                     movea.w d0,a0
   13ebe:	|  |  |                     moveq #115,d0
   13ec0:	|  |  |                     cmp.l a0,d0
   13ec2:	|  |  |           /-------- beq.s 13f3a <vsprintf2+0xae>
   13ec4:	|  |  |           |         moveq #115,d1
   13ec6:	|  |  |           |         cmp.l a0,d1
   13ec8:	|  |  |  /--------|-------- blt.w 13fa0 <vsprintf2+0x114>
   13ecc:	|  |  |  |        |         moveq #99,d2
   13ece:	|  |  |  |        |         cmp.l a0,d2
   13ed0:	|  |  |  |  /-----|-------- beq.w 13f78 <vsprintf2+0xec>
   13ed4:	|  |  |  |  |     |         moveq #100,d0
   13ed6:	|  |  |  |  |     |         cmp.l a0,d0
   13ed8:	|  |  |  +--|-----|-------- bne.w 13fa0 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13edc:	|  |  |  |  |     |         addq.l #4,56(sp)
   13ee0:	|  |  |  |  |     |         movea.l 56(sp),a0
   13ee4:	|  |  |  |  |     |         move.l (a0),d0
   13ee6:	|  |  |  |  |     |         move.l d0,d1
   13ee8:	|  |  |  |  |     |         subq.l #1,d1
   13eea:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13eee:	|  |  |  |  |     |         pea a <_start+0xa>
   13ef2:	|  |  |  |  |     |         lea 8(sp),a0
   13ef6:	|  |  |  |  |     |         move.l a0,-(sp)
   13ef8:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13efc:	|  |  |  |  |     |         jsr 13dc4 <itoa>
   13f02:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13f06:	|  |  |  |  |     |         lea 44(sp),a0
   13f0a:	|  |  |  |  |     |         lea -40(a0),a0
   13f0e:	|  |  |  |  |     |         move.l a0,28(sp)
   13f12:	|  |  |  |  |     |     /-- bra.s 13f2e <vsprintf2+0xa2>
                        *s++ = *b;
   13f14:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13f18:	|  |  |  |  |     |  |  |   move.l d0,d1
   13f1a:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13f1c:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13f20:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13f24:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13f26:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13f28:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13f2a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13f2e:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13f32:	|  |  |  |  |     |  |      move.b (a0),d0
   13f34:	|  |  |  |  |     |  \----- bne.s 13f14 <vsprintf2+0x88>
                    }
                    break;
   13f36:	|  |  |  |  |  /--|-------- bra.w 13fce <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13f3a:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13f3e:	|  |  |  |  |  |            movea.l 56(sp),a0
   13f42:	|  |  |  |  |  |            move.l (a0),d0
   13f44:	|  |  |  |  |  |            move.l d0,d1
   13f46:	|  |  |  |  |  |            subq.l #1,d1
   13f48:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13f4c:	|  |  |  |  |  |        /-- bra.s 13f6e <vsprintf2+0xe2>
                        *s++ = *sval++;
   13f4e:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13f52:	|  |  |  |  |  |     |  |   move.l d1,d2
   13f54:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f56:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13f5a:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13f5e:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f60:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f62:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f66:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f68:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f6a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f6c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f6e:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13f72:	|  |  |  |  |  |     |      move.b (a0),d0
   13f74:	|  |  |  |  |  |     \----- bne.s 13f4e <vsprintf2+0xc2>
                    }
                    break;
   13f76:	|  |  |  |  |  +----------- bra.s 13fce <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f78:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13f7c:	|  |  |  |     |            movea.l 56(sp),a0
   13f80:	|  |  |  |     |            move.l (a0),d0
   13f82:	|  |  |  |     |            move.l d0,d1
   13f84:	|  |  |  |     |            subq.l #1,d1
   13f86:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f8a:	|  |  |  |     |            move.l 40(sp),d0
   13f8e:	|  |  |  |     |            move.l d0,d2
   13f90:	|  |  |  |     |            addq.l #1,d2
   13f92:	|  |  |  |     |            move.l d2,40(sp)
   13f96:	|  |  |  |     |            move.l 24(sp),d1
   13f9a:	|  |  |  |     |            movea.l d0,a0
   13f9c:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f9e:	|  |  |  |     +----------- bra.s 13fce <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13fa0:	|  |  |  \-----|----------> move.l 40(sp),d0
   13fa4:	|  |  |        |            move.l d0,d1
   13fa6:	|  |  |        |            addq.l #1,d1
   13fa8:	|  |  |        |            move.l d1,40(sp)
   13fac:	|  |  |        |            movea.l 36(sp),a0
   13fb0:	|  |  |        |            move.b (a0),d1
   13fb2:	|  |  |        |            movea.l d0,a0
   13fb4:	|  |  |        |            move.b d1,(a0)
                    break;
   13fb6:	|  |  |        +----------- bra.s 13fce <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13fb8:	|  |  \--------|----------> move.l 40(sp),d0
   13fbc:	|  |           |            move.l d0,d1
   13fbe:	|  |           |            addq.l #1,d1
   13fc0:	|  |           |            move.l d1,40(sp)
   13fc4:	|  |           |            movea.l 36(sp),a0
   13fc8:	|  |           |            move.b (a0),d1
   13fca:	|  |           |            movea.l d0,a0
   13fcc:	|  |           |            move.b d1,(a0)
        }
        p++;
   13fce:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13fd2:	|  \----------------------> movea.l 36(sp),a0
   13fd6:	|                           move.b (a0),d0
   13fd8:	\-------------------------- bne.w 13ea2 <vsprintf2+0x16>
    }
    *s = '\0';
   13fdc:	                            movea.l 40(sp),a0
   13fe0:	                            clr.b (a0)
    return s - str;
   13fe2:	                            move.l 40(sp),d0
   13fe6:	                            sub.l 48(sp),d0
}
   13fea:	                            move.l (sp)+,d2
   13fec:	                            lea 40(sp),sp
   13ff0:	                            rts

00013ff2 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13ff2:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13ff4:	moveq #16,d0
   13ff6:	add.l sp,d0
   13ff8:	move.l d0,d1
   13ffa:	addq.l #4,d1
   13ffc:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   14000:	move.l 16(sp),d0
   14004:	move.l 4(sp),-(sp)
   14008:	move.l d0,-(sp)
   1400a:	move.l 20(sp),-(sp)
   1400e:	jsr 13e8c <vsprintf2>
   14014:	lea 12(sp),sp
   14018:	move.l d0,(sp)
    va_end(args);
   1401a:	clr.l 4(sp)

    return done;
   1401e:	move.l (sp),d0
}
   14020:	addq.l #8,sp
   14022:	rts

00014024 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14024:	       lea -20(sp),sp
   14028:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1402a:	       moveq #12,d0
   1402c:	       move.l d0,20(sp)
   14030:	       clr.l 16(sp)
   14034:	       move.l 1c9be <SysBase>,d0
   1403a:	       movea.l d0,a6
   1403c:	       move.l 20(sp),d0
   14040:	       move.l 16(sp),d1
   14044:	       jsr -684(a6)
   14048:	       move.l d0,12(sp)
   1404c:	       move.l 12(sp),d0
   14050:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14054:	   /-- bne.s 1405a <addVarToStack+0x36>
   14056:	   |   clr.w d0
   14058:	/--|-- bra.s 140a2 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1405a:	|  \-> move.l 8(sp),d0
   1405e:	|      move.l d0,-(sp)
   14060:	|      move.l 32(sp),-(sp)
   14064:	|      jsr 14b86 <copyMain>
   1406a:	|      addq.l #8,sp
   1406c:	|      tst.w d0
   1406e:	|  /-- bne.s 1408a <addVarToStack+0x66>
        FreeVec(newStack);
   14070:	|  |   move.l 8(sp),4(sp)
   14076:	|  |   move.l 1c9be <SysBase>,d0
   1407c:	|  |   movea.l d0,a6
   1407e:	|  |   movea.l 4(sp),a1
   14082:	|  |   jsr -690(a6)
        return FALSE;
   14086:	|  |   clr.w d0
   14088:	+--|-- bra.s 140a2 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1408a:	|  \-> movea.l 32(sp),a0
   1408e:	|      move.l (a0),d0
   14090:	|      movea.l 8(sp),a0
   14094:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14098:	|      movea.l 32(sp),a0
   1409c:	|      move.l 8(sp),(a0)
    return TRUE;
   140a0:	|      moveq #1,d0
}
   140a2:	\----> movea.l (sp)+,a6
   140a4:	       lea 20(sp),sp
   140a8:	       rts

000140aa <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   140aa:	       lea -16(sp),sp
   140ae:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   140b0:	       moveq #12,d0
   140b2:	       move.l d0,16(sp)
   140b6:	       clr.l 12(sp)
   140ba:	       move.l 1c9be <SysBase>,d0
   140c0:	       movea.l d0,a6
   140c2:	       move.l 16(sp),d0
   140c6:	       move.l 12(sp),d1
   140ca:	       jsr -684(a6)
   140ce:	       move.l d0,8(sp)
   140d2:	       move.l 8(sp),d0
   140d6:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   140da:	   /-- bne.s 140e0 <addVarToStackQuick+0x36>
   140dc:	   |   clr.w d0
   140de:	/--|-- bra.s 14116 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   140e0:	|  \-> move.l 4(sp),d0
   140e4:	|      pea 8 <_start+0x8>
   140e8:	|      move.l 28(sp),-(sp)
   140ec:	|      move.l d0,-(sp)
   140ee:	|      jsr 171fc <memcpy>
   140f4:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   140f8:	|      movea.l 24(sp),a0
   140fc:	|      clr.l (a0)

    newStack->next = *thisStack;
   140fe:	|      movea.l 28(sp),a0
   14102:	|      move.l (a0),d0
   14104:	|      movea.l 4(sp),a0
   14108:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1410c:	|      movea.l 28(sp),a0
   14110:	|      move.l 4(sp),(a0)
    return TRUE;
   14114:	|      moveq #1,d0
}
   14116:	\----> movea.l (sp)+,a6
   14118:	       lea 16(sp),sp
   1411c:	       rts

0001411e <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1411e:	       lea -16(sp),sp
   14122:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14124:	       movea.l 24(sp),a0
   14128:	       move.l (a0),d0
   1412a:	       moveq #1,d1
   1412c:	       cmp.l d0,d1
   1412e:	   /-- bne.s 14158 <addVariablesInSecond+0x3a>
   14130:	   |   movea.l 28(sp),a0
   14134:	   |   move.l (a0),d0
   14136:	   |   moveq #1,d1
   14138:	   |   cmp.l d0,d1
   1413a:	   +-- bne.s 14158 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1413c:	   |   movea.l 28(sp),a0
   14140:	   |   move.l 4(a0),d1
   14144:	   |   movea.l 24(sp),a0
   14148:	   |   move.l 4(a0),d0
   1414c:	   |   add.l d1,d0
   1414e:	   |   movea.l 28(sp),a0
   14152:	   |   move.l d0,4(a0)
   14156:	/--|-- bra.s 141d2 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14158:	|  \-> move.l 24(sp),-(sp)
   1415c:	|      jsr 14dbe <getTextFromAnyVar>
   14162:	|      addq.l #4,sp
   14164:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14168:	|      move.l 28(sp),-(sp)
   1416c:	|      jsr 14dbe <getTextFromAnyVar>
   14172:	|      addq.l #4,sp
   14174:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14178:	|      move.l 28(sp),-(sp)
   1417c:	|      jsr 14a36 <unlinkVar>
   14182:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14184:	|      move.l 12(sp),-(sp)
   14188:	|      move.l 20(sp),-(sp)
   1418c:	|      jsr 13d14 <joinStrings>
   14192:	|      addq.l #8,sp
   14194:	|      movea.l 28(sp),a0
   14198:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1419c:	|      movea.l 28(sp),a0
   141a0:	|      moveq #3,d0
   141a2:	|      move.l d0,(a0)
		FreeVec(string1);
   141a4:	|      move.l 16(sp),8(sp)
   141aa:	|      move.l 1c9be <SysBase>,d0
   141b0:	|      movea.l d0,a6
   141b2:	|      movea.l 8(sp),a1
   141b6:	|      jsr -690(a6)
		FreeVec(string2);
   141ba:	|      move.l 12(sp),4(sp)
   141c0:	|      move.l 1c9be <SysBase>,d0
   141c6:	|      movea.l d0,a6
   141c8:	|      movea.l 4(sp),a1
   141cc:	|      jsr -690(a6)
	}
}
   141d0:	|      nop
   141d2:	\----> nop
   141d4:	       movea.l (sp)+,a6
   141d6:	       lea 16(sp),sp
   141da:	       rts

000141dc <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   141dc:	movea.l 8(sp),a0
   141e0:	move.l 4(a0),-(sp)
   141e4:	move.l (a0),-(sp)
   141e6:	movea.l 12(sp),a0
   141ea:	move.l 4(a0),-(sp)
   141ee:	move.l (a0),-(sp)
   141f0:	jsr 14212 <compareVars>
   141f6:	lea 16(sp),sp
   141fa:	move.l d0,-(sp)
   141fc:	pea 1 <_start+0x1>
   14200:	move.l 16(sp),-(sp)
   14204:	jsr 150da <setVariable>
   1420a:	lea 12(sp),sp
}
   1420e:	nop
   14210:	rts

00014212 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14212:	       subq.l #4,sp
	int re = 0;
   14214:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14216:	       move.l 8(sp),d1
   1421a:	       move.l 16(sp),d0
   1421e:	       cmp.l d1,d0
   14220:	/----- bne.w 142e8 <compareVars+0xd6>
		switch (var1.varType) {
   14224:	|      move.l 8(sp),d0
   14228:	|      moveq #9,d1
   1422a:	|      cmp.l d0,d1
   1422c:	|  /-- bcs.w 142d0 <compareVars+0xbe>
   14230:	|  |   add.l d0,d0
   14232:	|  |   movea.l d0,a0
   14234:	|  |   adda.l #82496,a0
   1423a:	|  |   move.w (a0),d0
   1423c:	|  |   jmp (14240 <compareVars+0x2e>,pc,d0.w)
   14240:	|  |   ori.b #-112,(a4)
   14244:	|  |   ori.l #5243024,(a0)
   1424a:	|  |   ori.l #7733392,(a0)
   14250:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14256:	|  |   move.l d0,(sp)
			break;
   14258:	+--|-- bra.w 142e8 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1425c:	|  |   move.l 12(sp),d1
   14260:	|  |   move.l 20(sp),d0
   14264:	|  |   cmp.l d1,d0
   14266:	|  |   seq d0
   14268:	|  |   neg.b d0
   1426a:	|  |   move.b d0,d0
   1426c:	|  |   andi.l #255,d0
   14272:	|  |   move.l d0,(sp)
			break;
   14274:	+--|-- bra.s 142e8 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14276:	|  |   move.l 12(sp),d1
   1427a:	|  |   move.l 20(sp),d0
   1427e:	|  |   cmp.l d1,d0
   14280:	|  |   seq d0
   14282:	|  |   neg.b d0
   14284:	|  |   move.b d0,d0
   14286:	|  |   andi.l #255,d0
   1428c:	|  |   move.l d0,(sp)
			break;
   1428e:	+--|-- bra.s 142e8 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14290:	|  |   move.l 20(sp),d1
   14294:	|  |   move.l 12(sp),d0
   14298:	|  |   move.l d1,-(sp)
   1429a:	|  |   move.l d0,-(sp)
   1429c:	|  |   jsr 13c94 <strcmp>
   142a2:	|  |   addq.l #8,sp
   142a4:	|  |   tst.l d0
   142a6:	|  |   seq d0
   142a8:	|  |   neg.b d0
   142aa:	|  |   move.b d0,d0
   142ac:	|  |   andi.l #255,d0
   142b2:	|  |   move.l d0,(sp)
			break;
   142b4:	+--|-- bra.s 142e8 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   142b6:	|  |   move.l 12(sp),d1
   142ba:	|  |   move.l 20(sp),d0
   142be:	|  |   cmp.l d1,d0
   142c0:	|  |   seq d0
   142c2:	|  |   neg.b d0
   142c4:	|  |   move.b d0,d0
   142c6:	|  |   andi.l #255,d0
   142cc:	|  |   move.l d0,(sp)
			break;
   142ce:	+--|-- bra.s 142e8 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   142d0:	|  \-> move.l 12(sp),d1
   142d4:	|      move.l 20(sp),d0
   142d8:	|      cmp.l d1,d0
   142da:	|      seq d0
   142dc:	|      neg.b d0
   142de:	|      move.b d0,d0
   142e0:	|      andi.l #255,d0
   142e6:	|      move.l d0,(sp)
		}
	}
	return re;
   142e8:	\----> move.l (sp),d0
}
   142ea:	       addq.l #4,sp
   142ec:	       rts

000142ee <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   142ee:	             lea -16(sp),sp
   142f2:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   142f4:	             movea.l 28(sp),a0
   142f8:	             moveq #6,d0
   142fa:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   142fc:	             moveq #12,d0
   142fe:	             move.l d0,12(sp)
   14302:	             clr.l 8(sp)
   14306:	             move.l 1c9be <SysBase>,d0
   1430c:	             movea.l d0,a6
   1430e:	             move.l 12(sp),d0
   14312:	             move.l 8(sp),d1
   14316:	             jsr -684(a6)
   1431a:	             move.l d0,4(sp)
   1431e:	             move.l 4(sp),d0
   14322:	             movea.l 28(sp),a0
   14326:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1432a:	             movea.l 28(sp),a0
   1432e:	             move.l 4(a0),d0
   14332:	         /-- bne.s 1433a <copyStack+0x4c>
   14334:	         |   clr.w d0
   14336:	/--------|-- bra.w 143bc <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1433a:	|        \-> movea.l 28(sp),a0
   1433e:	|            movea.l 4(a0),a0
   14342:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14344:	|            movea.l 28(sp),a0
   14348:	|            movea.l 4(a0),a0
   1434c:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14350:	|            movea.l 28(sp),a0
   14354:	|            movea.l 4(a0),a0
   14358:	|            moveq #1,d0
   1435a:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1435e:	|            movea.l 24(sp),a0
   14362:	|            movea.l 4(a0),a0
   14366:	|            move.l (a0),16(sp)

	while (a) {
   1436a:	|     /----- bra.s 143b4 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1436c:	|  /--|----> movea.l 28(sp),a0
   14370:	|  |  |      move.l 4(a0),d0
   14374:	|  |  |      move.l d0,d1
   14376:	|  |  |      move.l 16(sp),d0
   1437a:	|  |  |      move.l d1,-(sp)
   1437c:	|  |  |      move.l d0,-(sp)
   1437e:	|  |  |      jsr 14024 <addVarToStack>
   14384:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14386:	|  |  |      movea.l 28(sp),a0
   1438a:	|  |  |      movea.l 4(a0),a0
   1438e:	|  |  |      move.l 4(a0),d0
   14392:	|  |  |  /-- bne.s 143aa <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14394:	|  |  |  |   movea.l 28(sp),a0
   14398:	|  |  |  |   movea.l 4(a0),a1
   1439c:	|  |  |  |   movea.l 28(sp),a0
   143a0:	|  |  |  |   movea.l 4(a0),a0
   143a4:	|  |  |  |   move.l (a1),d0
   143a6:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   143aa:	|  |  |  \-> movea.l 16(sp),a0
   143ae:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   143b4:	|  |  \----> tst.l 16(sp)
   143b8:	|  \-------- bne.s 1436c <copyStack+0x7e>
	}

	return TRUE;
   143ba:	|            moveq #1,d0
}
   143bc:	\----------> movea.l (sp)+,a6
   143be:	             lea 16(sp),sp
   143c2:	             rts

000143c4 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   143c4:	                lea -20(sp),sp
   143c8:	                move.l a6,-(sp)
   143ca:	                move.l 36(sp),d0
   143ce:	                move.w d0,d0
   143d0:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   143d4:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   143da:	                clr.l 16(sp)

    while (*huntVar) {
   143de:	   /----------- bra.s 1445c <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   143e0:	/--|----------> movea.l 20(sp),a0
   143e4:	|  |            movea.l (a0),a0
   143e6:	|  |            movea.l 28(sp),a1
   143ea:	|  |            move.l 4(a1),-(sp)
   143ee:	|  |            move.l (a1),-(sp)
   143f0:	|  |            move.l 4(a0),-(sp)
   143f4:	|  |            move.l (a0),-(sp)
   143f6:	|  |            jsr 14212 <compareVars>
   143fc:	|  |            lea 16(sp),sp
   14400:	|  |            tst.l d0
   14402:	|  |  /-------- beq.s 1444e <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14404:	|  |  |         movea.l 20(sp),a0
   14408:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1440c:	|  |  |         movea.l 12(sp),a0
   14410:	|  |  |         move.l 8(a0),d0
   14414:	|  |  |         movea.l 20(sp),a0
   14418:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1441a:	|  |  |         move.l 12(sp),d0
   1441e:	|  |  |         move.l d0,-(sp)
   14420:	|  |  |         jsr 14a36 <unlinkVar>
   14426:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14428:	|  |  |         move.l 12(sp),8(sp)
   1442e:	|  |  |         move.l 1c9be <SysBase>,d0
   14434:	|  |  |         movea.l d0,a6
   14436:	|  |  |         movea.l 8(sp),a1
   1443a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1443e:	|  |  |         tst.w 6(sp)
   14442:	|  |  |     /-- bne.s 14448 <deleteVarFromStack+0x84>
   14444:	|  |  |     |   moveq #1,d0
   14446:	|  |  |  /--|-- bra.s 1446a <deleteVarFromStack+0xa6>
            reply++;
   14448:	|  |  |  |  \-> addq.l #1,16(sp)
   1444c:	|  +--|--|----- bra.s 1445c <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1444e:	|  |  \--|----> movea.l 20(sp),a0
   14452:	|  |     |      move.l (a0),d0
   14454:	|  |     |      move.l d0,d1
   14456:	|  |     |      addq.l #8,d1
   14458:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1445c:	|  \-----|----> movea.l 20(sp),a0
   14460:	|        |      move.l (a0),d0
   14462:	\--------|----- bne.w 143e0 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14466:	         |      move.l 16(sp),d0
}
   1446a:	         \----> movea.l (sp)+,a6
   1446c:	                lea 20(sp),sp
   14470:	                rts

00014472 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14472:	       movea.l 4(sp),a0
   14476:	       move.l 4(a0),d0
   1447a:	       cmp.l 8(sp),d0
   1447e:	   /-- bhi.s 14484 <fastArrayGetByIndex+0x12>
   14480:	   |   moveq #0,d0
   14482:	/--|-- bra.s 14492 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14484:	|  \-> movea.l 4(sp),a0
   14488:	|      move.l (a0),d1
   1448a:	|      move.l 8(sp),d0
   1448e:	|      lsl.l #3,d0
   14490:	|      add.l d1,d0
}
   14492:	\----> rts

00014494 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14494:	                lea -32(sp),sp
   14498:	                move.l a6,-(sp)
   1449a:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1449c:	                clr.l 36(sp)

    switch (thisVar->varType) {
   144a0:	                movea.l 44(sp),a0
   144a4:	                move.l (a0),d0
   144a6:	                moveq #8,d1
   144a8:	                cmp.l d0,d1
   144aa:	            /-- beq.s 144b8 <getCostumeFromVar+0x24>
   144ac:	            |   moveq #9,d1
   144ae:	            |   cmp.l d0,d1
   144b0:	   /--------|-- beq.w 14566 <getCostumeFromVar+0xd2>
   144b4:	/--|--------|-- bra.w 14570 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   144b8:	|  |        \-> moveq #8,d0
   144ba:	|  |            move.l d0,28(sp)
   144be:	|  |            clr.l 24(sp)
   144c2:	|  |            move.l 1c9be <SysBase>,d0
   144c8:	|  |            movea.l d0,a6
   144ca:	|  |            move.l 28(sp),d0
   144ce:	|  |            move.l 24(sp),d1
   144d2:	|  |            jsr -684(a6)
   144d6:	|  |            move.l d0,20(sp)
   144da:	|  |            move.l 20(sp),d0
   144de:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   144e2:	|  |        /-- bne.s 144ea <getCostumeFromVar+0x56>
   144e4:	|  |        |   moveq #0,d0
   144e6:	|  |  /-----|-- bra.w 1459a <getCostumeFromVar+0x106>
            p->numDirections = 1;
   144ea:	|  |  |     \-> movea.l 36(sp),a0
   144ee:	|  |  |         moveq #1,d1
   144f0:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   144f4:	|  |  |         moveq #12,d0
   144f6:	|  |  |         move.l d0,16(sp)
   144fa:	|  |  |         clr.l 12(sp)
   144fe:	|  |  |         move.l 1c9be <SysBase>,d0
   14504:	|  |  |         movea.l d0,a6
   14506:	|  |  |         move.l 16(sp),d0
   1450a:	|  |  |         move.l 12(sp),d1
   1450e:	|  |  |         jsr -684(a6)
   14512:	|  |  |         move.l d0,8(sp)
   14516:	|  |  |         move.l 8(sp),d0
   1451a:	|  |  |         movea.l 36(sp),a0
   1451e:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14520:	|  |  |         movea.l 36(sp),a0
   14524:	|  |  |         move.l (a0),d0
   14526:	|  |  |     /-- bne.s 1452c <getCostumeFromVar+0x98>
   14528:	|  |  |     |   moveq #0,d0
   1452a:	|  |  +-----|-- bra.s 1459a <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1452c:	|  |  |     \-> clr.l 32(sp)
   14530:	|  |  |     /-- bra.s 1455c <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14532:	|  |  |  /--|-> movea.l 44(sp),a0
   14536:	|  |  |  |  |   move.l 4(a0),d0
   1453a:	|  |  |  |  |   movea.l 36(sp),a0
   1453e:	|  |  |  |  |   movea.l (a0),a0
   14540:	|  |  |  |  |   move.l 32(sp),d1
   14544:	|  |  |  |  |   add.l d1,d1
   14546:	|  |  |  |  |   add.l d1,d1
   14548:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1454c:	|  |  |  |  |   move.l d0,-(sp)
   1454e:	|  |  |  |  |   jsr 954e <copyAnim>
   14554:	|  |  |  |  |   addq.l #4,sp
   14556:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14558:	|  |  |  |  |   addq.l #1,32(sp)
   1455c:	|  |  |  |  \-> moveq #2,d1
   1455e:	|  |  |  |      cmp.l 32(sp),d1
   14562:	|  |  |  \----- bge.s 14532 <getCostumeFromVar+0x9e>
            }
            break;
   14564:	|  |  |     /-- bra.s 14596 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14566:	|  \--|-----|-> movea.l 44(sp),a0
   1456a:	|     |     |   move.l 4(a0),d0
   1456e:	|     +-----|-- bra.s 1459a <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14570:	\-----|-----|-> movea.l 44(sp),a0
   14574:	      |     |   move.l (a0),d0
   14576:	      |     |   add.l d0,d0
   14578:	      |     |   movea.l d0,a1
   1457a:	      |     |   adda.l d0,a1
   1457c:	      |     |   lea 1c89a <typeName>,a0
   14582:	      |     |   move.l (0,a1,a0.l),d0
   14586:	      |     |   move.l d0,-(sp)
   14588:	      |     |   pea 19eb2 <graphics.c.1c13408a+0x2ca>
   1458e:	      |     |   jsr 17248 <KPrintF>
   14594:	      |     |   addq.l #8,sp
    }

    return p;
   14596:	      |     \-> move.l 36(sp),d0
}
   1459a:	      \-------> movea.l (sp)+,a2
   1459c:	                movea.l (sp)+,a6
   1459e:	                lea 32(sp),sp
   145a2:	                rts

000145a4 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   145a4:	                lea -96(sp),sp
   145a8:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   145ac:	                move.l 116(sp),-(sp)
   145b0:	                pea 19eea <graphics.c.1c13408a+0x302>
   145b6:	                jsr 13d14 <joinStrings>
   145bc:	                addq.l #8,sp
   145be:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   145c2:	            /-- bne.s 145ca <getSavedGamesStack+0x26>
   145c4:	            |   clr.w d0
   145c6:	/-----------|-- bra.w 147de <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   145ca:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   145ce:	|               move.l #106220,98(sp)
   145d6:	|               moveq #-2,d0
   145d8:	|               move.l d0,94(sp)
   145dc:	|               move.l 1c9c6 <DOSBase>,d0
   145e2:	|               movea.l d0,a6
   145e4:	|               move.l 98(sp),d1
   145e8:	|               move.l 94(sp),d2
   145ec:	|               jsr -84(a6)
   145f0:	|               move.l d0,90(sp)
   145f4:	|               move.l 90(sp),d0
   145f8:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   145fc:	|           /-- bne.s 14604 <getSavedGamesStack+0x60>
   145fe:	|           |   clr.w d0
   14600:	+-----------|-- bra.w 147de <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14604:	|           \-> move.l #260,82(sp)
   1460c:	|               move.l #65536,78(sp)
   14614:	|               move.l 1c9be <SysBase>,d0
   1461a:	|               movea.l d0,a6
   1461c:	|               move.l 82(sp),d0
   14620:	|               move.l 78(sp),d1
   14624:	|               jsr -684(a6)
   14628:	|               move.l d0,74(sp)
   1462c:	|               move.l 74(sp),d0
   14630:	|               move.l d0,70(sp)
	if (!fib) {
   14634:	|           /-- bne.s 14652 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14636:	|           |   move.l 86(sp),22(sp)
   1463c:	|           |   move.l 1c9c6 <DOSBase>,d0
   14642:	|           |   movea.l d0,a6
   14644:	|           |   move.l 22(sp),d1
   14648:	|           |   jsr -90(a6)
		return FALSE;
   1464c:	|           |   clr.w d0
   1464e:	+-----------|-- bra.w 147de <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14652:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14656:	|               move.l 86(sp),66(sp)
   1465c:	|               move.l 70(sp),62(sp)
   14662:	|               move.l 1c9c6 <DOSBase>,d0
   14668:	|               movea.l d0,a6
   1466a:	|               move.l 66(sp),d1
   1466e:	|               move.l 62(sp),d2
   14672:	|               jsr -102(a6)
   14676:	|               move.l d0,58(sp)
   1467a:	|               move.l 58(sp),d0
   1467e:	|  /----------- beq.w 14792 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14682:	|  |        /-- bra.w 1475e <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14686:	|  |  /-----|-> move.l 70(sp),d2
   1468a:	|  |  |     |   addq.l #8,d2
   1468c:	|  |  |     |   move.l 70(sp),d0
   14690:	|  |  |     |   addq.l #8,d0
   14692:	|  |  |     |   move.l d0,-(sp)
   14694:	|  |  |     |   jsr 13cd4 <strlen>
   1469a:	|  |  |     |   addq.l #4,sp
   1469c:	|  |  |     |   move.l d0,d3
   1469e:	|  |  |     |   move.l 116(sp),-(sp)
   146a2:	|  |  |     |   jsr 13cd4 <strlen>
   146a8:	|  |  |     |   addq.l #4,sp
   146aa:	|  |  |     |   move.l d3,d1
   146ac:	|  |  |     |   sub.l d0,d1
   146ae:	|  |  |     |   move.l d2,d0
   146b0:	|  |  |     |   add.l d1,d0
   146b2:	|  |  |     |   move.l 116(sp),-(sp)
   146b6:	|  |  |     |   move.l d0,-(sp)
   146b8:	|  |  |     |   jsr 13c94 <strcmp>
   146be:	|  |  |     |   addq.l #8,sp
   146c0:	|  |  |     |   tst.l d0
   146c2:	|  |  |     +-- bne.w 1475e <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   146c6:	|  |  |     |   move.l 70(sp),d0
   146ca:	|  |  |     |   addq.l #8,d0
   146cc:	|  |  |     |   move.l d0,-(sp)
   146ce:	|  |  |     |   jsr 13cd4 <strlen>
   146d4:	|  |  |     |   addq.l #4,sp
   146d6:	|  |  |     |   move.l d0,d2
   146d8:	|  |  |     |   move.l 116(sp),-(sp)
   146dc:	|  |  |     |   jsr 13cd4 <strlen>
   146e2:	|  |  |     |   addq.l #4,sp
   146e4:	|  |  |     |   move.l d0,d1
   146e6:	|  |  |     |   move.l d2,d0
   146e8:	|  |  |     |   sub.l d1,d0
   146ea:	|  |  |     |   movea.l 70(sp),a0
   146ee:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   146f2:	|  |  |     |   move.l 70(sp),d0
   146f6:	|  |  |     |   addq.l #8,d0
   146f8:	|  |  |     |   move.l d0,-(sp)
   146fa:	|  |  |     |   jsr 118 <decodeFilename>
   14700:	|  |  |     |   addq.l #4,sp
   14702:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14706:	|  |  |     |   move.l 42(sp),-(sp)
   1470a:	|  |  |     |   lea 18(sp),a0
   1470e:	|  |  |     |   move.l a0,-(sp)
   14710:	|  |  |     |   jsr 14a0a <makeTextVar>
   14716:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14718:	|  |  |     |   move.l 42(sp),38(sp)
   1471e:	|  |  |     |   move.l 1c9be <SysBase>,d0
   14724:	|  |  |     |   movea.l d0,a6
   14726:	|  |  |     |   movea.l 38(sp),a1
   1472a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1472e:	|  |  |     |   move.l 112(sp),d0
   14732:	|  |  |     |   move.l d0,-(sp)
   14734:	|  |  |     |   lea 18(sp),a0
   14738:	|  |  |     |   move.l a0,-(sp)
   1473a:	|  |  |     |   jsr 14024 <addVarToStack>
   14740:	|  |  |     |   addq.l #8,sp
   14742:	|  |  |     |   tst.w d0
   14744:	|  |  |  /--|-- beq.s 14796 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14746:	|  |  |  |  |   movea.l 112(sp),a0
   1474a:	|  |  |  |  |   move.l 4(a0),d0
   1474e:	|  |  |  |  +-- bne.s 1475e <getSavedGamesStack+0x1ba>
   14750:	|  |  |  |  |   movea.l 112(sp),a0
   14754:	|  |  |  |  |   move.l (a0),d0
   14756:	|  |  |  |  |   movea.l 112(sp),a0
   1475a:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1475e:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14764:	|  |  |  |      move.l 70(sp),50(sp)
   1476a:	|  |  |  |      move.l 1c9c6 <DOSBase>,d0
   14770:	|  |  |  |      movea.l d0,a6
   14772:	|  |  |  |      move.l 54(sp),d1
   14776:	|  |  |  |      move.l 50(sp),d2
   1477a:	|  |  |  |      jsr -108(a6)
   1477e:	|  |  |  |      move.l d0,46(sp)
   14782:	|  |  |  |      move.l 46(sp),d0
   14786:	|  |  \--|----- bne.w 14686 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1478a:	|  |     |      move.w #1,106(sp)
   14790:	|  |     |  /-- bra.s 14798 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14792:	|  \-----|--|-> nop
   14794:	|        |  +-- bra.s 14798 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14796:	|        \--|-> nop
	FreeVec(fib);
   14798:	|           \-> move.l 70(sp),34(sp)
   1479e:	|               move.l 1c9be <SysBase>,d0
   147a4:	|               movea.l d0,a6
   147a6:	|               movea.l 34(sp),a1
   147aa:	|               jsr -690(a6)
	UnLock(dirLock);
   147ae:	|               move.l 86(sp),30(sp)
   147b4:	|               move.l 1c9c6 <DOSBase>,d0
   147ba:	|               movea.l d0,a6
   147bc:	|               move.l 30(sp),d1
   147c0:	|               jsr -90(a6)
	FreeVec(pattern);
   147c4:	|               move.l 102(sp),26(sp)
   147ca:	|               move.l 1c9be <SysBase>,d0
   147d0:	|               movea.l d0,a6
   147d2:	|               movea.l 26(sp),a1
   147d6:	|               jsr -690(a6)
	return result;
   147da:	|               move.w 106(sp),d0
}
   147de:	\-------------> movem.l (sp)+,d2-d3/a6
   147e2:	                lea 96(sp),sp
   147e6:	                rts

000147e8 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   147e8:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   147ea:	       movea.l 20(sp),a0
   147ee:	       move.l (a0),d0
   147f0:	       cmp.l 16(sp),d0
   147f4:	/----- beq.s 14858 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   147f6:	|      move.l 16(sp),d0
   147fa:	|      add.l d0,d0
   147fc:	|      movea.l d0,a1
   147fe:	|      adda.l d0,a1
   14800:	|      lea 1c89a <typeName>,a0
   14806:	|      move.l (0,a1,a0.l),d0
   1480a:	|      move.l d0,-(sp)
   1480c:	|      pea 19eee <graphics.c.1c13408a+0x306>
   14812:	|      jsr 13d14 <joinStrings>
   14818:	|      addq.l #8,sp
   1481a:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1481e:	|      movea.l 20(sp),a0
   14822:	|      move.l (a0),d0
   14824:	|      add.l d0,d0
   14826:	|      movea.l d0,a1
   14828:	|      adda.l d0,a1
   1482a:	|      lea 1c89a <typeName>,a0
   14830:	|      move.l (0,a1,a0.l),d0
   14834:	|      move.l d0,-(sp)
   14836:	|      pea 19f30 <graphics.c.1c13408a+0x348>
   1483c:	|      jsr 13d14 <joinStrings>
   14842:	|      addq.l #8,sp
   14844:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14846:	|      move.l (sp),-(sp)
   14848:	|      move.l 8(sp),-(sp)
   1484c:	|      jsr 17248 <KPrintF>
   14852:	|      addq.l #8,sp

		return FALSE;
   14854:	|      clr.w d0
   14856:	|  /-- bra.s 14868 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14858:	\--|-> movea.l 20(sp),a0
   1485c:	   |   move.l 4(a0),d0
   14860:	   |   movea.l 12(sp),a0
   14864:	   |   move.l d0,(a0)
	return TRUE;
   14866:	   |   moveq #1,d0
}
   14868:	   \-> addq.l #8,sp
   1486a:	       rts

0001486c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1486c:	move.l 8(sp),-(sp)
   14870:	jsr 6c94 <getNumberedString>
   14876:	addq.l #4,sp
   14878:	move.l d0,-(sp)
   1487a:	move.l 8(sp),-(sp)
   1487e:	jsr 14a0a <makeTextVar>
   14884:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14886:	movea.l 4(sp),a0
   1488a:	move.l 4(a0),d0
   1488e:	sne d0
   14890:	neg.b d0
   14892:	move.b d0,d0
   14894:	andi.w #255,d0
}
   14898:	rts

0001489a <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1489a:	          subq.l #8,sp
    int size = stackSize(stacky);
   1489c:	          move.l 16(sp),-(sp)
   148a0:	          jsr 15148 <stackSize>
   148a6:	          addq.l #4,sp
   148a8:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   148ac:	          move.l 4(sp),-(sp)
   148b0:	          move.l 16(sp),-(sp)
   148b4:	          jsr 14904 <makeFastArraySize>
   148ba:	          addq.l #8,sp
   148bc:	          tst.w d0
   148be:	      /-- bne.s 148c4 <makeFastArrayFromStack+0x2a>
   148c0:	      |   clr.w d0
   148c2:	/-----|-- bra.s 14900 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   148c4:	|     \-> movea.l 16(sp),a0
   148c8:	|         move.l (a0),(sp)
    size = 0;
   148ca:	|         clr.l 4(sp)
    while (allV) {
   148ce:	|     /-- bra.s 148fa <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   148d0:	|  /--|-> movea.l 12(sp),a0
   148d4:	|  |  |   movea.l 4(a0),a0
   148d8:	|  |  |   move.l (a0),d1
   148da:	|  |  |   move.l 4(sp),d0
   148de:	|  |  |   lsl.l #3,d0
   148e0:	|  |  |   add.l d0,d1
   148e2:	|  |  |   move.l (sp),d0
   148e4:	|  |  |   move.l d1,-(sp)
   148e6:	|  |  |   move.l d0,-(sp)
   148e8:	|  |  |   jsr 14b86 <copyMain>
   148ee:	|  |  |   addq.l #8,sp
        size++;
   148f0:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   148f4:	|  |  |   movea.l (sp),a0
   148f6:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   148fa:	|  |  \-> tst.l (sp)
   148fc:	|  \----- bne.s 148d0 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   148fe:	|         moveq #1,d0
}
   14900:	\-------> addq.l #8,sp
   14902:	          rts

00014904 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14904:	          lea -28(sp),sp
   14908:	          move.l a6,-(sp)
    if (size < 0) {
   1490a:	          tst.l 40(sp)
   1490e:	      /-- bge.s 14924 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14910:	      |   pea 19f75 <graphics.c.1c13408a+0x38d>
   14916:	      |   jsr 17248 <KPrintF>
   1491c:	      |   addq.l #4,sp
		return FALSE;
   1491e:	      |   clr.w d0
   14920:	/-----|-- bra.w 14a02 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14924:	|     \-> move.l 36(sp),-(sp)
   14928:	|         jsr 14a36 <unlinkVar>
   1492e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14930:	|         movea.l 36(sp),a0
   14934:	|         moveq #10,d0
   14936:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14938:	|         moveq #12,d0
   1493a:	|         move.l d0,24(sp)
   1493e:	|         clr.l 20(sp)
   14942:	|         move.l 1c9be <SysBase>,d0
   14948:	|         movea.l d0,a6
   1494a:	|         move.l 24(sp),d0
   1494e:	|         move.l 20(sp),d1
   14952:	|         jsr -684(a6)
   14956:	|         move.l d0,16(sp)
   1495a:	|         move.l 16(sp),d0
   1495e:	|         movea.l 36(sp),a0
   14962:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14966:	|         movea.l 36(sp),a0
   1496a:	|         move.l 4(a0),d0
   1496e:	|     /-- bne.s 14976 <makeFastArraySize+0x72>
   14970:	|     |   clr.w d0
   14972:	+-----|-- bra.w 14a02 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14976:	|     \-> move.l 40(sp),d0
   1497a:	|         lsl.l #3,d0
   1497c:	|         move.l d0,12(sp)
   14980:	|         clr.l 8(sp)
   14984:	|         move.l 1c9be <SysBase>,d0
   1498a:	|         movea.l d0,a6
   1498c:	|         move.l 12(sp),d0
   14990:	|         move.l 8(sp),d1
   14994:	|         jsr -684(a6)
   14998:	|         move.l d0,4(sp)
   1499c:	|         move.l 4(sp),d0
   149a0:	|         movea.l 36(sp),a0
   149a4:	|         movea.l 4(a0),a0
   149a8:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   149aa:	|         movea.l 36(sp),a0
   149ae:	|         movea.l 4(a0),a0
   149b2:	|         move.l (a0),d0
   149b4:	|     /-- bne.s 149ba <makeFastArraySize+0xb6>
   149b6:	|     |   clr.w d0
   149b8:	+-----|-- bra.s 14a02 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   149ba:	|     \-> clr.l 28(sp)
   149be:	|     /-- bra.s 149da <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   149c0:	|  /--|-> movea.l 36(sp),a0
   149c4:	|  |  |   movea.l 4(a0),a0
   149c8:	|  |  |   move.l (a0),d1
   149ca:	|  |  |   move.l 28(sp),d0
   149ce:	|  |  |   lsl.l #3,d0
   149d0:	|  |  |   movea.l d1,a0
   149d2:	|  |  |   adda.l d0,a0
   149d4:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   149d6:	|  |  |   addq.l #1,28(sp)
   149da:	|  |  \-> move.l 28(sp),d0
   149de:	|  |      cmp.l 40(sp),d0
   149e2:	|  \----- blt.s 149c0 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   149e4:	|         movea.l 36(sp),a0
   149e8:	|         movea.l 4(a0),a0
   149ec:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   149f2:	|         movea.l 36(sp),a0
   149f6:	|         movea.l 4(a0),a0
   149fa:	|         moveq #1,d0
   149fc:	|         move.l d0,8(a0)
    return TRUE;
   14a00:	|         moveq #1,d0
}
   14a02:	\-------> movea.l (sp)+,a6
   14a04:	          lea 28(sp),sp
   14a08:	          rts

00014a0a <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14a0a:	move.l 4(sp),-(sp)
   14a0e:	jsr 14a36 <unlinkVar>
   14a14:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14a16:	movea.l 4(sp),a0
   14a1a:	moveq #3,d0
   14a1c:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14a1e:	move.l 8(sp),-(sp)
   14a22:	jsr b8 <copyString>
   14a28:	addq.l #4,sp
   14a2a:	movea.l 4(sp),a0
   14a2e:	move.l d0,4(a0)
}
   14a32:	nop
   14a34:	rts

00014a36 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14a36:	                      lea -16(sp),sp
   14a3a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14a3c:	                      movea.l 24(sp),a0
   14a40:	                      move.l (a0),d0
   14a42:	                      moveq #10,d1
   14a44:	                      cmp.l d0,d1
   14a46:	            /-------- beq.w 14afe <unlinkVar+0xc8>
   14a4a:	            |         moveq #10,d1
   14a4c:	            |         cmp.l d0,d1
   14a4e:	/-----------|-------- bcs.w 14b72 <unlinkVar+0x13c>
   14a52:	|           |         moveq #8,d1
   14a54:	|           |         cmp.l d0,d1
   14a56:	|  /--------|-------- beq.w 14b5e <unlinkVar+0x128>
   14a5a:	|  |        |         moveq #8,d1
   14a5c:	|  |        |         cmp.l d0,d1
   14a5e:	+--|--------|-------- bcs.w 14b72 <unlinkVar+0x13c>
   14a62:	|  |        |         moveq #3,d1
   14a64:	|  |        |         cmp.l d0,d1
   14a66:	|  |        |     /-- beq.s 14a72 <unlinkVar+0x3c>
   14a68:	|  |        |     |   moveq #6,d1
   14a6a:	|  |        |     |   cmp.l d0,d1
   14a6c:	|  |        |  /--|-- beq.s 14a98 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a6e:	+--|--------|--|--|-- bra.w 14b72 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a72:	|  |        |  |  \-> movea.l 24(sp),a0
   14a76:	|  |        |  |      move.l 4(a0),4(sp)
   14a7c:	|  |        |  |      move.l 1c9be <SysBase>,d0
   14a82:	|  |        |  |      movea.l d0,a6
   14a84:	|  |        |  |      movea.l 4(sp),a1
   14a88:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a8c:	|  |        |  |      movea.l 24(sp),a0
   14a90:	|  |        |  |      clr.l 4(a0)
		break;
   14a94:	|  |  /-----|--|----- bra.w 14b7c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14a98:	|  |  |     |  \----> movea.l 24(sp),a0
   14a9c:	|  |  |     |         movea.l 4(a0),a0
   14aa0:	|  |  |     |         move.l 8(a0),d0
   14aa4:	|  |  |     |         subq.l #1,d0
   14aa6:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14aaa:	|  |  |     |         movea.l 24(sp),a0
   14aae:	|  |  |     |         movea.l 4(a0),a0
   14ab2:	|  |  |     |         move.l 8(a0),d0
   14ab6:	|  |  |  /--|-------- bgt.w 14b76 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14aba:	|  |  |  |  |     /-- bra.s 14ace <unlinkVar+0x98>
   14abc:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14ac0:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14ac4:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14ac6:	|  |  |  |  |  |  |   jsr 1516c <trimStack>
   14acc:	|  |  |  |  |  |  |   addq.l #4,sp
   14ace:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14ad2:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ad6:	|  |  |  |  |  |      move.l (a0),d0
   14ad8:	|  |  |  |  |  \----- bne.s 14abc <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14ada:	|  |  |  |  |         movea.l 24(sp),a0
   14ade:	|  |  |  |  |         move.l 4(a0),8(sp)
   14ae4:	|  |  |  |  |         move.l 1c9be <SysBase>,d0
   14aea:	|  |  |  |  |         movea.l d0,a6
   14aec:	|  |  |  |  |         movea.l 8(sp),a1
   14af0:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14af4:	|  |  |  |  |         movea.l 24(sp),a0
   14af8:	|  |  |  |  |         clr.l 4(a0)
		break;
   14afc:	|  |  |  +--|-------- bra.s 14b76 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14afe:	|  |  |  |  \-------> movea.l 24(sp),a0
   14b02:	|  |  |  |            movea.l 4(a0),a0
   14b06:	|  |  |  |            move.l 8(a0),d0
   14b0a:	|  |  |  |            subq.l #1,d0
   14b0c:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b10:	|  |  |  |            movea.l 24(sp),a0
   14b14:	|  |  |  |            movea.l 4(a0),a0
   14b18:	|  |  |  |            move.l 8(a0),d0
   14b1c:	|  |  |  |        /-- bgt.s 14b7a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14b1e:	|  |  |  |        |   movea.l 24(sp),a0
   14b22:	|  |  |  |        |   movea.l 4(a0),a0
   14b26:	|  |  |  |        |   move.l (a0),16(sp)
   14b2a:	|  |  |  |        |   move.l 1c9be <SysBase>,d0
   14b30:	|  |  |  |        |   movea.l d0,a6
   14b32:	|  |  |  |        |   movea.l 16(sp),a1
   14b36:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14b3a:	|  |  |  |        |   movea.l 24(sp),a0
   14b3e:	|  |  |  |        |   move.l 4(a0),12(sp)
   14b44:	|  |  |  |        |   move.l 1c9be <SysBase>,d0
   14b4a:	|  |  |  |        |   movea.l d0,a6
   14b4c:	|  |  |  |        |   movea.l 12(sp),a1
   14b50:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14b54:	|  |  |  |        |   movea.l 24(sp),a0
   14b58:	|  |  |  |        |   clr.l 4(a0)
		break;
   14b5c:	|  |  |  |        +-- bra.s 14b7a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14b5e:	|  \--|--|--------|-> movea.l 24(sp),a0
   14b62:	|     |  |        |   move.l 4(a0),d0
   14b66:	|     |  |        |   move.l d0,-(sp)
   14b68:	|     |  |        |   jsr 991a <deleteAnim>
   14b6e:	|     |  |        |   addq.l #4,sp
		break;
   14b70:	|     +--|--------|-- bra.s 14b7c <unlinkVar+0x146>
		break;
   14b72:	\-----|--|--------|-> nop
   14b74:	      +--|--------|-- bra.s 14b7c <unlinkVar+0x146>
		break;
   14b76:	      |  \--------|-> nop
   14b78:	      +-----------|-- bra.s 14b7c <unlinkVar+0x146>
		break;
   14b7a:	      |           \-> nop
	}
}
   14b7c:	      \-------------> nop
   14b7e:	                      movea.l (sp)+,a6
   14b80:	                      lea 16(sp),sp
   14b84:	                      rts

00014b86 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b86:	       movea.l 4(sp),a0
   14b8a:	       move.l (a0),d0
   14b8c:	       movea.l 8(sp),a0
   14b90:	       move.l d0,(a0)
	switch (to->varType) {
   14b92:	       movea.l 8(sp),a0
   14b96:	       move.l (a0),d0
   14b98:	       moveq #10,d1
   14b9a:	       cmp.l d0,d1
   14b9c:	/----- bcs.w 14c8e <copyMain+0x108>
   14ba0:	|      add.l d0,d0
   14ba2:	|      movea.l d0,a0
   14ba4:	|      adda.l #84912,a0
   14baa:	|      move.w (a0),d0
   14bac:	|      jmp (14bb0 <copyMain+0x2a>,pc,d0.w)
   14bb0:	|      .short 0x00da
   14bb2:	|      ori.b #22,(a6)
   14bb6:	|      ori.w #22,(a4)
   14bba:	|      ori.b #-126,(a6)
   14bbe:	|      ori.b #-68,(a6)
   14bc2:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14bca:	|      move.l 4(a0),d0
   14bce:	|      movea.l 8(sp),a0
   14bd2:	|      move.l d0,4(a0)
		return TRUE;
   14bd6:	|      moveq #1,d0
   14bd8:	|  /-- bra.w 14ca0 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14bdc:	|  |   movea.l 4(sp),a0
   14be0:	|  |   move.l 4(a0),d0
   14be4:	|  |   movea.l 8(sp),a0
   14be8:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14bec:	|  |   movea.l 8(sp),a0
   14bf0:	|  |   movea.l 4(a0),a0
   14bf4:	|  |   move.l 8(a0),d0
   14bf8:	|  |   addq.l #1,d0
   14bfa:	|  |   move.l d0,8(a0)
		return TRUE;
   14bfe:	|  |   moveq #1,d0
   14c00:	|  +-- bra.w 14ca0 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14c04:	|  |   movea.l 4(sp),a0
   14c08:	|  |   move.l 4(a0),d0
   14c0c:	|  |   move.l d0,-(sp)
   14c0e:	|  |   jsr b8 <copyString>
   14c14:	|  |   addq.l #4,sp
   14c16:	|  |   movea.l 8(sp),a0
   14c1a:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14c1e:	|  |   movea.l 8(sp),a0
   14c22:	|  |   move.l 4(a0),d0
   14c26:	|  |   sne d0
   14c28:	|  |   neg.b d0
   14c2a:	|  |   move.b d0,d0
   14c2c:	|  |   andi.w #255,d0
   14c30:	|  +-- bra.s 14ca0 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14c32:	|  |   movea.l 4(sp),a0
   14c36:	|  |   move.l 4(a0),d0
   14c3a:	|  |   movea.l 8(sp),a0
   14c3e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14c42:	|  |   movea.l 8(sp),a0
   14c46:	|  |   movea.l 4(a0),a0
   14c4a:	|  |   move.l 8(a0),d0
   14c4e:	|  |   addq.l #1,d0
   14c50:	|  |   move.l d0,8(a0)
		return TRUE;
   14c54:	|  |   moveq #1,d0
   14c56:	|  +-- bra.s 14ca0 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14c58:	|  |   movea.l 4(sp),a0
   14c5c:	|  |   move.l 4(a0),d0
   14c60:	|  |   movea.l 8(sp),a0
   14c64:	|  |   move.l d0,4(a0)
		return TRUE;
   14c68:	|  |   moveq #1,d0
   14c6a:	|  +-- bra.s 14ca0 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c6c:	|  |   movea.l 4(sp),a0
   14c70:	|  |   move.l 4(a0),d0
   14c74:	|  |   move.l d0,-(sp)
   14c76:	|  |   jsr 954e <copyAnim>
   14c7c:	|  |   addq.l #4,sp
   14c7e:	|  |   movea.l 8(sp),a0
   14c82:	|  |   move.l d0,4(a0)
		return TRUE;
   14c86:	|  |   moveq #1,d0
   14c88:	|  +-- bra.s 14ca0 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c8a:	|  |   moveq #1,d0
   14c8c:	|  +-- bra.s 14ca0 <copyMain+0x11a>

		default:
		break;
   14c8e:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14c90:	   |   pea 19fc6 <graphics.c.1c13408a+0x3de>
   14c96:	   |   jsr 17248 <KPrintF>
   14c9c:	   |   addq.l #4,sp
	return FALSE;
   14c9e:	   |   clr.w d0
}
   14ca0:	   \-> rts

00014ca2 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14ca2:	move.l 8(sp),-(sp)
   14ca6:	jsr 14a36 <unlinkVar>
   14cac:	addq.l #4,sp
	return copyMain(from, to);
   14cae:	move.l 8(sp),-(sp)
   14cb2:	move.l 8(sp),-(sp)
   14cb6:	jsr 14b86 <copyMain>
   14cbc:	addq.l #8,sp
}
   14cbe:	rts

00014cc0 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14cc0:	       movea.l 4(sp),a0
   14cc4:	       move.l (a0),d0
   14cc6:	       moveq #8,d1
   14cc8:	       cmp.l d0,d1
   14cca:	   /-- bne.s 14ce0 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14ccc:	   |   movea.l 4(sp),a0
   14cd0:	   |   move.l 4(a0),d0
   14cd4:	   |   move.l d0,-(sp)
   14cd6:	   |   jsr 954e <copyAnim>
   14cdc:	   |   addq.l #4,sp
   14cde:	/--|-- bra.s 14d26 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14ce0:	|  \-> movea.l 4(sp),a0
   14ce4:	|      move.l (a0),d0
   14ce6:	|      moveq #1,d1
   14ce8:	|      cmp.l d0,d1
   14cea:	|  /-- bne.s 14cfe <getAnimationFromVar+0x3e>
   14cec:	|  |   movea.l 4(sp),a0
   14cf0:	|  |   move.l 4(a0),d0
   14cf4:	|  +-- bne.s 14cfe <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14cf6:	|  |   jsr ad1e <makeNullAnim>
   14cfc:	+--|-- bra.s 14d26 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14cfe:	|  \-> movea.l 4(sp),a0
   14d02:	|      move.l (a0),d0
   14d04:	|      add.l d0,d0
   14d06:	|      movea.l d0,a1
   14d08:	|      adda.l d0,a1
   14d0a:	|      lea 1c89a <typeName>,a0
   14d10:	|      move.l (0,a1,a0.l),d0
   14d14:	|      move.l d0,-(sp)
   14d16:	|      pea 19eb2 <graphics.c.1c13408a+0x2ca>
   14d1c:	|      jsr 17248 <KPrintF>
   14d22:	|      addq.l #8,sp
	return NULL;
   14d24:	|      moveq #0,d0
}
   14d26:	\----> rts

00014d28 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14d28:	       movea.l 4(sp),a0
   14d2c:	       move.l (a0),d0
   14d2e:	       moveq #10,d1
   14d30:	       cmp.l d0,d1
   14d32:	/----- bcs.w 14db8 <getBoolean+0x90>
   14d36:	|      add.l d0,d0
   14d38:	|      movea.l d0,a0
   14d3a:	|      adda.l #85318,a0
   14d40:	|      move.w (a0),d0
   14d42:	|      jmp (14d46 <getBoolean+0x1e>,pc,d0.w)
   14d46:	|      ori.b #26,(a6)
   14d4a:	|      ori.w #68,(114,a2,d0.w)
   14d50:	|      ori.w #46,(114,a2,d0.w)
   14d56:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14d5c:	|      clr.w d0
   14d5e:	|  /-- bra.s 14dbc <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d60:	|  |   movea.l 4(sp),a0
   14d64:	|  |   move.l 4(a0),d0
   14d68:	|  |   sne d0
   14d6a:	|  |   neg.b d0
   14d6c:	|  |   move.b d0,d0
   14d6e:	|  |   andi.w #255,d0
   14d72:	|  +-- bra.s 14dbc <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d74:	|  |   movea.l 4(sp),a0
   14d78:	|  |   movea.l 4(a0),a0
   14d7c:	|  |   move.l (a0),d0
   14d7e:	|  |   sne d0
   14d80:	|  |   neg.b d0
   14d82:	|  |   move.b d0,d0
   14d84:	|  |   andi.w #255,d0
   14d88:	|  +-- bra.s 14dbc <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d8a:	|  |   movea.l 4(sp),a0
   14d8e:	|  |   movea.l 4(a0),a0
   14d92:	|  |   move.b (a0),d0
   14d94:	|  |   sne d0
   14d96:	|  |   neg.b d0
   14d98:	|  |   move.b d0,d0
   14d9a:	|  |   andi.w #255,d0
   14d9e:	|  +-- bra.s 14dbc <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14da0:	|  |   movea.l 4(sp),a0
   14da4:	|  |   movea.l 4(a0),a0
   14da8:	|  |   move.l 4(a0),d0
   14dac:	|  |   sne d0
   14dae:	|  |   neg.b d0
   14db0:	|  |   move.b d0,d0
   14db2:	|  |   andi.w #255,d0
   14db6:	|  +-- bra.s 14dbc <getBoolean+0x94>

		default:
		break;
   14db8:	\--|-> nop
	}
	return TRUE;
   14dba:	   |   moveq #1,d0
}
   14dbc:	   \-> rts

00014dbe <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14dbe:	      /----------> lea -76(sp),sp
   14dc2:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14dc4:	      |            movea.l 84(sp),a0
   14dc8:	      |            move.l (a0),d0
   14dca:	      |            moveq #10,d1
   14dcc:	      |            cmp.l d0,d1
   14dce:	/-----|----------- bcs.w 1506c <getTextFromAnyVar+0x2ae>
   14dd2:	|     |            add.l d0,d0
   14dd4:	|     |            movea.l d0,a0
   14dd6:	|     |            adda.l #85474,a0
   14ddc:	|     |            move.w (a0),d0
   14dde:	|     |            jmp (14de2 <getTextFromAnyVar+0x24>,pc,d0.w)
   14de2:	|     |            .short 0x028a
   14de4:	|     |            bset d0,(a0)+
   14de6:	|     |            .short 0x028a
   14de8:	|     |            ori.b #-118,(a6)
   14dec:	|     |            andi.b #8,ccr
   14df0:	|     |            andi.w #650,-(a0)
   14df4:	|     |            .short 0x028a
   14df6:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14dfc:	|     |            move.l 4(a0),d0
   14e00:	|     |            move.l d0,-(sp)
   14e02:	|     |            jsr b8 <copyString>
   14e08:	|     |            addq.l #4,sp
   14e0a:	|  /--|----------- bra.w 1508e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14e0e:	|  |  |            pea 19fd9 <graphics.c.1c13408a+0x3f1>
   14e14:	|  |  |            jsr b8 <copyString>
   14e1a:	|  |  |            addq.l #4,sp
   14e1c:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e20:	|  |  |            clr.l 72(sp)
   14e24:	|  |  |     /----- bra.w 14ece <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14e28:	|  |  |  /--|----> pea 19fdf <graphics.c.1c13408a+0x3f7>
   14e2e:	|  |  |  |  |      move.l 80(sp),-(sp)
   14e32:	|  |  |  |  |      jsr 13d14 <joinStrings>
   14e38:	|  |  |  |  |      addq.l #8,sp
   14e3a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14e3e:	|  |  |  |  |  /-- bne.s 14e46 <getTextFromAnyVar+0x88>
   14e40:	|  |  |  |  |  |   moveq #0,d0
   14e42:	|  +--|--|--|--|-- bra.w 1508e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e46:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14e4c:	|  |  |  |  |      move.l 1c9be <SysBase>,d0
   14e52:	|  |  |  |  |      movea.l d0,a6
   14e54:	|  |  |  |  |      movea.l 56(sp),a1
   14e58:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14e5c:	|  |  |  |  |      movea.l 84(sp),a0
   14e60:	|  |  |  |  |      movea.l 4(a0),a0
   14e64:	|  |  |  |  |      move.l (a0),d1
   14e66:	|  |  |  |  |      move.l 72(sp),d0
   14e6a:	|  |  |  |  |      lsl.l #3,d0
   14e6c:	|  |  |  |  |      add.l d1,d0
   14e6e:	|  |  |  |  |      move.l d0,-(sp)
   14e70:	|  |  +--|--|----- jsr 14dbe <getTextFromAnyVar>(pc)
   14e74:	|  |  |  |  |      addq.l #4,sp
   14e76:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e7a:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e7e:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e82:	|  |  |  |  |      jsr 13d14 <joinStrings>
   14e88:	|  |  |  |  |      addq.l #8,sp
   14e8a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e8e:	|  |  |  |  |  /-- bne.s 14e96 <getTextFromAnyVar+0xd8>
   14e90:	|  |  |  |  |  |   moveq #0,d0
   14e92:	|  +--|--|--|--|-- bra.w 1508e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14e96:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14e9c:	|  |  |  |  |      move.l 1c9be <SysBase>,d0
   14ea2:	|  |  |  |  |      movea.l d0,a6
   14ea4:	|  |  |  |  |      movea.l 48(sp),a1
   14ea8:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14eac:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14eb0:	|  |  |  |  |      move.l 60(sp),44(sp)
   14eb6:	|  |  |  |  |      move.l 1c9be <SysBase>,d0
   14ebc:	|  |  |  |  |      movea.l d0,a6
   14ebe:	|  |  |  |  |      movea.l 44(sp),a1
   14ec2:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14ec6:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14eca:	|  |  |  |  |      addq.l #1,72(sp)
   14ece:	|  |  |  |  \----> movea.l 84(sp),a0
   14ed2:	|  |  |  |         movea.l 4(a0),a0
   14ed6:	|  |  |  |         move.l 4(a0),d0
   14eda:	|  |  |  |         cmp.l 72(sp),d0
   14ede:	|  |  |  \-------- bgt.w 14e28 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14ee2:	|  |  |            move.l 76(sp),d0
   14ee6:	|  +--|----------- bra.w 1508e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14eea:	|  |  |            pea 19fe1 <graphics.c.1c13408a+0x3f9>
   14ef0:	|  |  |            jsr b8 <copyString>
   14ef6:	|  |  |            addq.l #4,sp
   14ef8:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14efc:	|  |  |            movea.l 84(sp),a0
   14f00:	|  |  |            movea.l 4(a0),a0
   14f04:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14f08:	|  |  |     /----- bra.w 14faa <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14f0c:	|  |  |  /--|----> pea 19fdf <graphics.c.1c13408a+0x3f7>
   14f12:	|  |  |  |  |      move.l 72(sp),-(sp)
   14f16:	|  |  |  |  |      jsr 13d14 <joinStrings>
   14f1c:	|  |  |  |  |      addq.l #8,sp
   14f1e:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14f22:	|  |  |  |  |  /-- bne.s 14f2a <getTextFromAnyVar+0x16c>
   14f24:	|  |  |  |  |  |   moveq #0,d0
   14f26:	|  +--|--|--|--|-- bra.w 1508e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f2a:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14f30:	|  |  |  |  |      move.l 1c9be <SysBase>,d0
   14f36:	|  |  |  |  |      movea.l d0,a6
   14f38:	|  |  |  |  |      movea.l 32(sp),a1
   14f3c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14f40:	|  |  |  |  |      move.l 64(sp),d0
   14f44:	|  |  |  |  |      move.l d0,-(sp)
   14f46:	|  |  \--|--|----- jsr 14dbe <getTextFromAnyVar>(pc)
   14f4a:	|  |     |  |      addq.l #4,sp
   14f4c:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14f50:	|  |     |  |      move.l 28(sp),-(sp)
   14f54:	|  |     |  |      move.l 40(sp),-(sp)
   14f58:	|  |     |  |      jsr 13d14 <joinStrings>
   14f5e:	|  |     |  |      addq.l #8,sp
   14f60:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f64:	|  |     |  |  /-- bne.s 14f6c <getTextFromAnyVar+0x1ae>
   14f66:	|  |     |  |  |   moveq #0,d0
   14f68:	|  +-----|--|--|-- bra.w 1508e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f6c:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14f72:	|  |     |  |      move.l 1c9be <SysBase>,d0
   14f78:	|  |     |  |      movea.l d0,a6
   14f7a:	|  |     |  |      movea.l 24(sp),a1
   14f7e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f82:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f86:	|  |     |  |      move.l 36(sp),20(sp)
   14f8c:	|  |     |  |      move.l 1c9be <SysBase>,d0
   14f92:	|  |     |  |      movea.l d0,a6
   14f94:	|  |     |  |      movea.l 20(sp),a1
   14f98:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f9c:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14fa0:	|  |     |  |      movea.l 64(sp),a0
   14fa4:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14faa:	|  |     |  \----> tst.l 64(sp)
   14fae:	|  |     \-------- bne.w 14f0c <getTextFromAnyVar+0x14e>
			}
			return builder;
   14fb2:	|  |               move.l 68(sp),d0
   14fb6:	|  +-------------- bra.w 1508e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14fba:	|  |               moveq #10,d0
   14fbc:	|  |               move.l d0,16(sp)
   14fc0:	|  |               clr.l 12(sp)
   14fc4:	|  |               move.l 1c9be <SysBase>,d0
   14fca:	|  |               movea.l d0,a6
   14fcc:	|  |               move.l 16(sp),d0
   14fd0:	|  |               move.l 12(sp),d1
   14fd4:	|  |               jsr -684(a6)
   14fd8:	|  |               move.l d0,8(sp)
   14fdc:	|  |               move.l 8(sp),d0
   14fe0:	|  |               move.l d0,4(sp)
			if (! buff) {
   14fe4:	|  |           /-- bne.s 14ffa <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14fe6:	|  |           |   pea 19fe8 <newfatal.c.307beca7>
   14fec:	|  |           |   jsr 17248 <KPrintF>
   14ff2:	|  |           |   addq.l #4,sp
				return NULL;
   14ff4:	|  |           |   moveq #0,d0
   14ff6:	|  +-----------|-- bra.w 1508e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14ffa:	|  |           \-> movea.l 84(sp),a0
   14ffe:	|  |               move.l 4(a0),d0
   15002:	|  |               move.l d0,-(sp)
   15004:	|  |               pea 1a012 <newfatal.c.307beca7+0x2a>
   1500a:	|  |               move.l 12(sp),-(sp)
   1500e:	|  |               jsr 13ff2 <sprintf>
   15014:	|  |               lea 12(sp),sp
			return buff;
   15018:	|  |               move.l 4(sp),d0
   1501c:	|  +-------------- bra.s 1508e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1501e:	|  |               movea.l 84(sp),a0
   15022:	|  |               move.l 4(a0),d0
   15026:	|  |               move.l d0,-(sp)
   15028:	|  |               jsr 4114 <resourceNameFromNum>
   1502e:	|  |               addq.l #4,sp
   15030:	|  |               move.l d0,-(sp)
   15032:	|  |               pea 189e7 <PutChar+0xcd5>
   15038:	|  |               jsr 13d14 <joinStrings>
   1503e:	|  |               addq.l #8,sp
   15040:	|  +-------------- bra.s 1508e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15042:	|  |               movea.l 84(sp),a0
   15046:	|  |               move.l 4(a0),d0
   1504a:	|  |               move.l d0,-(sp)
   1504c:	|  |               jsr d532 <findObjectType>
   15052:	|  |               addq.l #4,sp
   15054:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15058:	+--|-------------- beq.s 1506c <getTextFromAnyVar+0x2ae>
   1505a:	|  |               movea.l 40(sp),a0
   1505e:	|  |               move.l (a0),d0
   15060:	|  |               move.l d0,-(sp)
   15062:	|  |               jsr b8 <copyString>
   15068:	|  |               addq.l #4,sp
   1506a:	|  +-------------- bra.s 1508e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1506c:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1506e:	   |               movea.l 84(sp),a0
   15072:	   |               move.l (a0),d0
   15074:	   |               add.l d0,d0
   15076:	   |               movea.l d0,a1
   15078:	   |               adda.l d0,a1
   1507a:	   |               lea 1c89a <typeName>,a0
   15080:	   |               move.l (0,a1,a0.l),d0
   15084:	   |               move.l d0,-(sp)
   15086:	   |               jsr b8 <copyString>
   1508c:	   |               addq.l #4,sp
}
   1508e:	   \-------------> movea.l (sp)+,a6
   15090:	                   lea 76(sp),sp
   15094:	                   rts

00015096 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15096:	move.l 4(sp),-(sp)
   1509a:	jsr 14a36 <unlinkVar>
   150a0:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   150a2:	movea.l 4(sp),a0
   150a6:	moveq #8,d0
   150a8:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   150aa:	movea.l 4(sp),a0
   150ae:	move.l 8(sp),4(a0)
}
   150b4:	nop
   150b6:	rts

000150b8 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   150b8:	move.l 4(sp),-(sp)
   150bc:	jsr 14a36 <unlinkVar>
   150c2:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   150c4:	movea.l 4(sp),a0
   150c8:	moveq #9,d0
   150ca:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   150cc:	movea.l 4(sp),a0
   150d0:	move.l 8(sp),4(a0)
}
   150d6:	nop
   150d8:	rts

000150da <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   150da:	move.l 4(sp),-(sp)
   150de:	jsr 14a36 <unlinkVar>
   150e4:	addq.l #4,sp
	thisVar->varType = vT;
   150e6:	movea.l 4(sp),a0
   150ea:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   150ee:	movea.l 4(sp),a0
   150f2:	move.l 12(sp),4(a0)
}
   150f8:	nop
   150fa:	rts

000150fc <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   150fc:	      /-- bra.s 1510e <stackGetByIndex+0x12>
        vS = vS->next;
   150fe:	/-----|-> movea.l 4(sp),a0
   15102:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15108:	|     +-- bne.s 1510e <stackGetByIndex+0x12>
            return NULL;
   1510a:	|     |   moveq #0,d0
   1510c:	|  /--|-- bra.s 15122 <stackGetByIndex+0x26>
    while (theIndex--) {
   1510e:	|  |  \-> move.l 8(sp),d0
   15112:	|  |      move.l d0,d1
   15114:	|  |      subq.l #1,d1
   15116:	|  |      move.l d1,8(sp)
   1511a:	|  |      tst.l d0
   1511c:	\--|----- bne.s 150fe <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1511e:	   |      move.l 4(sp),d0
}
   15122:	   \----> rts

00015124 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15124:	          tst.l 4(sp)
   15128:	      /-- bne.s 15138 <stackFindLast+0x14>
		return NULL;
   1512a:	      |   moveq #0,d0
   1512c:	/-----|-- bra.s 15146 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1512e:	|  /--|-> movea.l 4(sp),a0
   15132:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15138:	|  |  \-> movea.l 4(sp),a0
   1513c:	|  |      move.l 8(a0),d0
   15140:	|  \----- bne.s 1512e <stackFindLast+0xa>

	return hunt;
   15142:	|         move.l 4(sp),d0
}
   15146:	\-------> rts

00015148 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15148:	       subq.l #8,sp
	int r = 0;
   1514a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1514e:	       movea.l 12(sp),a0
   15152:	       move.l (a0),(sp)
	while (a) {
   15154:	   /-- bra.s 15160 <stackSize+0x18>
		r ++;
   15156:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   1515a:	|  |   movea.l (sp),a0
   1515c:	|  |   move.l 8(a0),(sp)
	while (a) {
   15160:	|  \-> tst.l (sp)
   15162:	\----- bne.s 15156 <stackSize+0xe>
	}
	return r;
   15164:	       move.l 4(sp),d0
}
   15168:	       addq.l #8,sp
   1516a:	       rts

0001516c <trimStack>:

void trimStack (struct variableStack ** stack) {
   1516c:	subq.l #8,sp
   1516e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15170:	movea.l 16(sp),a0
   15174:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15178:	movea.l 16(sp),a0
   1517c:	movea.l (a0),a0
   1517e:	move.l 8(a0),d0
   15182:	movea.l 16(sp),a0
   15186:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15188:	move.l 8(sp),d0
   1518c:	move.l d0,-(sp)
   1518e:	jsr 14a36 <unlinkVar>
   15194:	addq.l #4,sp
	FreeVec(killMe);
   15196:	move.l 8(sp),4(sp)
   1519c:	move.l 1c9be <SysBase>,d0
   151a2:	movea.l d0,a6
   151a4:	movea.l 4(sp),a1
   151a8:	jsr -690(a6)
   151ac:	nop
   151ae:	movea.l (sp)+,a6
   151b0:	addq.l #8,sp
   151b2:	rts

000151b4 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   151b4:	       lea -52(sp),sp
   151b8:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   151ba:	       pea 1a015 <newfatal.c.307beca7+0x2d>
   151c0:	       jsr 17248 <KPrintF>
   151c6:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   151c8:	       moveq #68,d0
   151ca:	       move.l d0,52(sp)
   151ce:	       clr.l 48(sp)
   151d2:	       move.l 1c9be <SysBase>,d0
   151d8:	       movea.l d0,a6
   151da:	       move.l 52(sp),d0
   151de:	       move.l 48(sp),d1
   151e2:	       jsr -684(a6)
   151e6:	       move.l d0,44(sp)
   151ea:	       move.l 44(sp),d0
   151ee:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   151f2:	   /-- bne.s 151fa <freeze+0x46>
   151f4:	   |   clr.w d0
   151f6:	/--|-- bra.w 15384 <freeze+0x1d0>

	CstFreeze();
   151fa:	|  \-> jsr 1d1a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15200:	|      move.l 1ca5a <sceneWidth>,d0
   15206:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1520a:	|      move.l 1ca5e <sceneHeight>,d0
   15210:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15214:	|      move.l 1ca5a <sceneWidth>,d0
   1521a:	|      movea.l 40(sp),a0
   1521e:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15222:	|      move.l 1ca5e <sceneHeight>,d0
   15228:	|      movea.l 40(sp),a0
   1522c:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15230:	|      move.l 1ca78 <cameraX>,d0
   15236:	|      movea.l 40(sp),a0
   1523a:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1523e:	|      move.l 1ca7c <cameraY>,d0
   15244:	|      movea.l 40(sp),a0
   15248:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1524c:	|      move.l 1c35c <cameraZoom>,d0
   15252:	|      movea.l 40(sp),a0
   15256:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1525a:	|      move.w #1,1ca66 <backdropExists>

	newFreezer -> allPeople = allPeople;
   15262:	|      move.l 1ca22 <allPeople>,d0
   15268:	|      movea.l 40(sp),a0
   1526c:	|      move.l d0,(a0)
	allPeople = NULL;
   1526e:	|      clr.l 1ca22 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15274:	|      moveq #42,d0
   15276:	|      move.l d0,28(sp)
   1527a:	|      clr.l 24(sp)
   1527e:	|      move.l 1c9be <SysBase>,d0
   15284:	|      movea.l d0,a6
   15286:	|      move.l 28(sp),d0
   1528a:	|      move.l 24(sp),d1
   1528e:	|      jsr -684(a6)
   15292:	|      move.l d0,20(sp)
   15296:	|      move.l 20(sp),d0
   1529a:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1529e:	|  /-- bne.s 152a6 <freeze+0xf2>
   152a0:	|  |   clr.w d0
   152a2:	+--|-- bra.w 15384 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   152a6:	|  \-> move.l 1cace <allScreenRegions>,d0
   152ac:	|      movea.l 40(sp),a0
   152b0:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   152b4:	|      clr.l 1cace <allScreenRegions>
	overRegion = NULL;
   152ba:	|      clr.l 1cad2 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   152c0:	|      move.l 1c8c4 <mouseCursorAnim>,d0
   152c6:	|      movea.l 40(sp),a0
   152ca:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   152ce:	|      move.l 1c8c8 <mouseCursorFrameNum>,d0
   152d4:	|      movea.l 40(sp),a0
   152d8:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   152dc:	|      jsr ad1e <makeNullAnim>
   152e2:	|      move.l d0,1c8c4 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   152e8:	|      clr.l 1c8c8 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   152ee:	|      move.l 1ca1e <zBuffer>,d0
   152f4:	|      movea.l 40(sp),a0
   152f8:	|      move.l d0,60(a0)
	zBuffer = NULL;
   152fc:	|      clr.l 1ca1e <zBuffer>

	newFreezer -> speech = speech;
   15302:	|      move.l 1ca1a <speech>,d0
   15308:	|      movea.l 40(sp),a0
   1530c:	|      move.l d0,20(a0)
	initSpeech ();
   15310:	|      jsr 7ec0 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15316:	|      moveq #28,d0
   15318:	|      move.l d0,12(sp)
   1531c:	|      clr.l 8(sp)
   15320:	|      move.l 1c9be <SysBase>,d0
   15326:	|      movea.l d0,a6
   15328:	|      move.l 12(sp),d0
   1532c:	|      move.l 8(sp),d1
   15330:	|      jsr -684(a6)
   15334:	|      move.l d0,4(sp)
   15338:	|      move.l 4(sp),d0
   1533c:	|      movea.l 40(sp),a0
   15340:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   15344:	|      movea.l 40(sp),a0
   15348:	|      move.l 28(a0),d0
   1534c:	|  /-- bne.s 15352 <freeze+0x19e>
   1534e:	|  |   clr.w d0
   15350:	+--|-- bra.s 15384 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   15352:	|  \-> movea.l 40(sp),a0
   15356:	|      move.l 28(a0),d0
   1535a:	|      pea 1c <_start+0x1c>
   1535e:	|      clr.l -(sp)
   15360:	|      move.l d0,-(sp)
   15362:	|      jsr 171cc <memset>
   15368:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1536c:	|      move.l 1cab2 <frozenStuff>,d0
   15372:	|      movea.l 40(sp),a0
   15376:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1537a:	|      move.l 40(sp),1cab2 <frozenStuff>

	return TRUE;
   15382:	|      moveq #1,d0
}
   15384:	\----> movea.l (sp)+,a6
   15386:	       lea 52(sp),sp
   1538a:	       rts

0001538c <howFrozen>:

int howFrozen () {
   1538c:	       subq.l #8,sp
	int a = 0;
   1538e:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15392:	       move.l 1cab2 <frozenStuff>,(sp)
	while (f) {
   15398:	   /-- bra.s 153a4 <howFrozen+0x18>
		a ++;
   1539a:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   1539e:	|  |   movea.l (sp),a0
   153a0:	|  |   move.l 64(a0),(sp)
	while (f) {
   153a4:	|  \-> tst.l (sp)
   153a6:	\----- bne.s 1539a <howFrozen+0xe>
	}
	return a;
   153a8:	       move.l 4(sp),d0
}
   153ac:	       addq.l #8,sp
   153ae:	       rts

000153b0 <unfreeze>:

void unfreeze () {
   153b0:	       lea -16(sp),sp
   153b4:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   153b6:	       move.l 1cab2 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   153be:	       move.l 1cab2 <frozenStuff>,d0
   153c4:	/----- beq.w 155fc <unfreeze+0x24c>

	CstUnfreeze();
   153c8:	|      jsr 3d0c <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   153ce:	|      movea.l 1cab2 <frozenStuff>,a0
   153d4:	|      move.l 48(a0),d0
   153d8:	|      move.l d0,1ca5a <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   153de:	|      movea.l 1cab2 <frozenStuff>,a0
   153e4:	|      move.l 52(a0),d0
   153e8:	|      move.l d0,1ca5e <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   153ee:	|      movea.l 1cab2 <frozenStuff>,a0
   153f4:	|      move.l 40(a0),d0
   153f8:	|      move.l d0,1ca78 <cameraX>
	cameraY = frozenStuff -> cameraY;
   153fe:	|      movea.l 1cab2 <frozenStuff>,a0
   15404:	|      move.l 44(a0),d0
   15408:	|      move.l d0,1ca7c <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1540e:	|      move.l 1c97a <input+0xa>,d0
   15414:	|      move.l d0,-(sp)
   15416:	|      jsr 1767a <__floatsisf>
   1541c:	|      addq.l #4,sp
   1541e:	|      move.l d0,d1
   15420:	|      move.l 1c35c <cameraZoom>,d0
   15426:	|      move.l d0,-(sp)
   15428:	|      move.l d1,-(sp)
   1542a:	|      jsr 1772c <__mulsf3>
   15430:	|      addq.l #8,sp
   15432:	|      move.l d0,-(sp)
   15434:	|      jsr 17612 <__fixsfsi>
   1543a:	|      addq.l #4,sp
   1543c:	|      move.l d0,1c97a <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15442:	|      move.l 1c97e <input+0xe>,d0
   15448:	|      move.l d0,-(sp)
   1544a:	|      jsr 1767a <__floatsisf>
   15450:	|      addq.l #4,sp
   15452:	|      move.l d0,d1
   15454:	|      move.l 1c35c <cameraZoom>,d0
   1545a:	|      move.l d0,-(sp)
   1545c:	|      move.l d1,-(sp)
   1545e:	|      jsr 1772c <__mulsf3>
   15464:	|      addq.l #8,sp
   15466:	|      move.l d0,-(sp)
   15468:	|      jsr 17612 <__fixsfsi>
   1546e:	|      addq.l #4,sp
   15470:	|      move.l d0,1c97e <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15476:	|      movea.l 1cab2 <frozenStuff>,a0
   1547c:	|      move.l 56(a0),d0
   15480:	|      move.l d0,1c35c <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15486:	|      move.l 1c97a <input+0xa>,d0
   1548c:	|      move.l d0,-(sp)
   1548e:	|      jsr 1767a <__floatsisf>
   15494:	|      addq.l #4,sp
   15496:	|      move.l d0,d1
   15498:	|      move.l 1c35c <cameraZoom>,d0
   1549e:	|      move.l d0,-(sp)
   154a0:	|      move.l d1,-(sp)
   154a2:	|      jsr 17530 <__divsf3>
   154a8:	|      addq.l #8,sp
   154aa:	|      move.l d0,-(sp)
   154ac:	|      jsr 17612 <__fixsfsi>
   154b2:	|      addq.l #4,sp
   154b4:	|      move.l d0,1c97a <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   154ba:	|      move.l 1c97e <input+0xe>,d0
   154c0:	|      move.l d0,-(sp)
   154c2:	|      jsr 1767a <__floatsisf>
   154c8:	|      addq.l #4,sp
   154ca:	|      move.l d0,d1
   154cc:	|      move.l 1c35c <cameraZoom>,d0
   154d2:	|      move.l d0,-(sp)
   154d4:	|      move.l d1,-(sp)
   154d6:	|      jsr 17530 <__divsf3>
   154dc:	|      addq.l #8,sp
   154de:	|      move.l d0,-(sp)
   154e0:	|      jsr 17612 <__fixsfsi>
   154e6:	|      addq.l #4,sp
   154e8:	|      move.l d0,1c97e <input+0xe>

	killAllPeople ();
   154ee:	|      jsr aa26 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   154f4:	|      movea.l 1cab2 <frozenStuff>,a0
   154fa:	|      move.l (a0),d0
   154fc:	|      move.l d0,1ca22 <allPeople>

	killAllRegions ();
   15502:	|      jsr 15a58 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15508:	|      movea.l 1cab2 <frozenStuff>,a0
   1550e:	|      move.l 4(a0),d0
   15512:	|      move.l d0,1cace <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15518:	|      move.l 1c8c4 <mouseCursorAnim>,d0
   1551e:	|      move.l d0,-(sp)
   15520:	|      jsr 991a <deleteAnim>
   15526:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15528:	|      movea.l 1cab2 <frozenStuff>,a0
   1552e:	|      move.l 32(a0),d0
   15532:	|      move.l d0,1c8c4 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15538:	|      movea.l 1cab2 <frozenStuff>,a0
   1553e:	|      move.l 36(a0),d0
   15542:	|      move.l d0,1c8c8 <mouseCursorFrameNum>

	killZBuffer ();
   15548:	|      jsr 8734 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1554e:	|      movea.l 1cab2 <frozenStuff>,a0
   15554:	|      move.l 60(a0),d0
   15558:	|      move.l d0,1ca1e <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1555e:	|      move.l 1c336 <currentEvents>,d0
   15564:	|  /-- beq.s 1557e <unfreeze+0x1ce>
   15566:	|  |   move.l 1c336 <currentEvents>,12(sp)
   1556e:	|  |   move.l 1c9be <SysBase>,d0
   15574:	|  |   movea.l d0,a6
   15576:	|  |   movea.l 12(sp),a1
   1557a:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1557e:	|  \-> movea.l 1cab2 <frozenStuff>,a0
   15584:	|      move.l 28(a0),d0
   15588:	|      move.l d0,1c336 <currentEvents>

	killAllSpeech ();
   1558e:	|      jsr 7f58 <killAllSpeech>
	if (speech) FreeVec(speech);
   15594:	|      move.l 1ca1a <speech>,d0
   1559a:	|  /-- beq.s 155b4 <unfreeze+0x204>
   1559c:	|  |   move.l 1ca1a <speech>,8(sp)
   155a4:	|  |   move.l 1c9be <SysBase>,d0
   155aa:	|  |   movea.l d0,a6
   155ac:	|  |   movea.l 8(sp),a1
   155b0:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   155b4:	|  \-> movea.l 1cab2 <frozenStuff>,a0
   155ba:	|      move.l 20(a0),d0
   155be:	|      move.l d0,1ca1a <speech>

	frozenStuff = frozenStuff -> next;
   155c4:	|      movea.l 1cab2 <frozenStuff>,a0
   155ca:	|      move.l 64(a0),d0
   155ce:	|      move.l d0,1cab2 <frozenStuff>

	overRegion = NULL;
   155d4:	|      clr.l 1cad2 <overRegion>
	if (killMe) FreeVec(killMe);
   155da:	|      tst.l 16(sp)
   155de:	|  /-- beq.s 155f6 <unfreeze+0x246>
   155e0:	|  |   move.l 16(sp),4(sp)
   155e6:	|  |   move.l 1c9be <SysBase>,d0
   155ec:	|  |   movea.l d0,a6
   155ee:	|  |   movea.l 4(sp),a1
   155f2:	|  |   jsr -690(a6)
	killMe = NULL;
   155f6:	|  \-> clr.l 16(sp)
   155fa:	|  /-- bra.s 155fe <unfreeze+0x24e>
	if (! frozenStuff) return;
   155fc:	\--|-> nop
}
   155fe:	   \-> movea.l (sp)+,a6
   15600:	       lea 16(sp),sp
   15604:	       rts

00015606 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15606:	pea 1a027 <newfatal.c.307beca7+0x3f>
   1560c:	jsr 17248 <KPrintF>
   15612:	addq.l #4,sp
	return FALSE;
   15614:	clr.w d0
}
   15616:	rts

00015618 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15618:	          lea -32(sp),sp
   1561c:	          move.l a6,-(sp)
   1561e:	          move.l d2,-(sp)
	unsigned int a = 0;
   15620:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15624:	          move.l 1cabe <fontOrderString>,d0
   1562a:	      /-- beq.s 15644 <loadFont+0x2c>
   1562c:	      |   move.l 1cabe <fontOrderString>,24(sp)
   15634:	      |   move.l 1c9be <SysBase>,d0
   1563a:	      |   movea.l d0,a6
   1563c:	      |   movea.l 24(sp),a1
   15640:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15644:	      \-> move.l 48(sp),-(sp)
   15648:	          jsr b8 <copyString>
   1564e:	          addq.l #4,sp
   15650:	          move.l d0,1cabe <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15656:	          move.l 1caca <theFont>,d0
   1565c:	      /-- beq.s 1566e <loadFont+0x56>
   1565e:	      |   move.l 1caca <theFont>,d0
   15664:	      |   move.l d0,-(sp)
   15666:	      |   jsr 8a72 <forgetSpriteBank>
   1566c:	      |   addq.l #4,sp
	theFont = NULL;
   1566e:	      \-> clr.l 1caca <theFont>

	loadedFontNum = filenum;
   15674:	          move.l 44(sp),1caba <loadedFontNum>

	fontTableSize = 0;
   1567c:	          clr.l 1cac6 <fontTableSize>
	char *tmp = charOrder;
   15682:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15688:	   /----- bra.s 156c4 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1568a:	/--|----> movea.l 32(sp),a0
   1568e:	|  |      move.b (a0),d0
   15690:	|  |      ext.w d0
   15692:	|  |      movea.w d0,a0
   15694:	|  |      move.l 1cac6 <fontTableSize>,d0
   1569a:	|  |      move.l d0,d0
   1569c:	|  |      move.b d0,d0
   1569e:	|  |      andi.l #255,d0
   156a4:	|  |      cmp.l a0,d0
   156a6:	|  |  /-- bge.s 156b8 <loadFont+0xa0>
   156a8:	|  |  |   movea.l 32(sp),a0
   156ac:	|  |  |   move.b (a0),d0
   156ae:	|  |  |   ext.w d0
   156b0:	|  |  |   movea.w d0,a0
   156b2:	|  |  |   move.l a0,1cac6 <fontTableSize>
		*tmp++;
   156b8:	|  |  \-> move.l 32(sp),d0
   156bc:	|  |      move.l d0,d1
   156be:	|  |      addq.l #1,d1
   156c0:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   156c4:	|  \----> movea.l 32(sp),a0
   156c8:	|         move.b (a0),d0
   156ca:	\-------- bne.s 1568a <loadFont+0x72>
	}
	fontTableSize++;
   156cc:	          move.l 1cac6 <fontTableSize>,d0
   156d2:	          addq.l #1,d0
   156d4:	          move.l d0,1cac6 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   156da:	          move.l 1cac2 <fontTable>,d0
   156e0:	      /-- beq.s 156fa <loadFont+0xe2>
   156e2:	      |   move.l 1cac2 <fontTable>,20(sp)
   156ea:	      |   move.l 1c9be <SysBase>,d0
   156f0:	      |   movea.l d0,a6
   156f2:	      |   movea.l 20(sp),a1
   156f6:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   156fa:	      \-> move.l 1cac6 <fontTableSize>,d0
   15700:	          add.l d0,d0
   15702:	          add.l d0,d0
   15704:	          move.l d0,16(sp)
   15708:	          clr.l 12(sp)
   1570c:	          move.l 1c9be <SysBase>,d0
   15712:	          movea.l d0,a6
   15714:	          move.l 16(sp),d0
   15718:	          move.l 12(sp),d1
   1571c:	          jsr -684(a6)
   15720:	          move.l d0,8(sp)
   15724:	          move.l 8(sp),d0
   15728:	          move.l d0,1cac2 <fontTable>
	if (!fontTable) return FALSE;
   1572e:	          move.l 1cac2 <fontTable>,d0
   15734:	      /-- bne.s 1573c <loadFont+0x124>
   15736:	      |   clr.w d0
   15738:	/-----|-- bra.w 157e2 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1573c:	|     \-> clr.l 36(sp)
   15740:	|     /-- bra.s 1575a <loadFont+0x142>
		fontTable[a] = 0;
   15742:	|  /--|-> move.l 1cac2 <fontTable>,d1
   15748:	|  |  |   move.l 36(sp),d0
   1574c:	|  |  |   add.l d0,d0
   1574e:	|  |  |   add.l d0,d0
   15750:	|  |  |   movea.l d1,a0
   15752:	|  |  |   adda.l d0,a0
   15754:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15756:	|  |  |   addq.l #1,36(sp)
   1575a:	|  |  \-> move.l 1cac6 <fontTableSize>,d0
   15760:	|  |      cmp.l 36(sp),d0
   15764:	|  \----- bhi.s 15742 <loadFont+0x12a>
	}
	a = 0;
   15766:	|         clr.l 36(sp)
	int i = 0;
   1576a:	|         clr.l 28(sp)
	tmp = charOrder;
   1576e:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15774:	|     /-- bra.s 157a4 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15776:	|  /--|-> move.l 1cac2 <fontTable>,d1
   1577c:	|  |  |   move.l 32(sp),d0
   15780:	|  |  |   move.l d0,d2
   15782:	|  |  |   addq.l #1,d2
   15784:	|  |  |   move.l d2,32(sp)
   15788:	|  |  |   movea.l d0,a0
   1578a:	|  |  |   move.b (a0),d0
   1578c:	|  |  |   ext.w d0
   1578e:	|  |  |   movea.w d0,a0
   15790:	|  |  |   move.l a0,d0
   15792:	|  |  |   add.l a0,d0
   15794:	|  |  |   add.l d0,d0
   15796:	|  |  |   movea.l d1,a0
   15798:	|  |  |   adda.l d0,a0
   1579a:	|  |  |   move.l 28(sp),d0
   1579e:	|  |  |   move.l d0,(a0)
		i++;
   157a0:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   157a4:	|  |  \-> movea.l 32(sp),a0
   157a8:	|  |      move.b (a0),d0
   157aa:	|  \----- bne.s 15776 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   157ac:	|         move.l 44(sp),-(sp)
   157b0:	|         jsr 15f6a <loadBankForAnim>
   157b6:	|         addq.l #4,sp
   157b8:	|         move.l d0,1caca <theFont>
	if (!theFont) {
   157be:	|         move.l 1caca <theFont>,d0
   157c4:	|     /-- bne.s 157d8 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   157c6:	|     |   pea 1a04e <newfatal.c.307beca7+0x66>
   157cc:	|     |   jsr 17248 <KPrintF>
   157d2:	|     |   addq.l #4,sp
		return FALSE;
   157d4:	|     |   clr.w d0
   157d6:	+-----|-- bra.s 157e2 <loadFont+0x1ca>
	}
	fontHeight = h;
   157d8:	|     \-> move.l 52(sp),1cab6 <fontHeight>
	return TRUE;
   157e0:	|         moveq #1,d0
}
   157e2:	\-------> move.l (sp)+,d2
   157e4:	          movea.l (sp)+,a6
   157e6:	          lea 32(sp),sp
   157ea:	          rts

000157ec <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   157ec:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   157f0:	                clr.l 4(sp)

    if (!fontTableSize) return;
   157f4:	                move.l 1cac6 <fontTableSize>,d0
   157fa:	/-------------- beq.w 158c2 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   157fe:	|               move.w 1c8c2 <fontSpace>,d0
   15804:	|               asr.w #1,d0
   15806:	|               ext.l d0
   15808:	|               add.l d0,20(sp)
	char *tmp = theText;
   1580c:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15812:	|     /-------- bra.w 158b6 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15816:	|  /--|-------> movea.l 1caca <theFont>,a0
   1581c:	|  |  |         movea.l 16(a0),a0
   15820:	|  |  |         movea.l 8(sp),a1
   15824:	|  |  |         move.b (a1),d0
   15826:	|  |  |         move.b d0,d0
   15828:	|  |  |         andi.l #255,d0
   1582e:	|  |  |         move.l 1cac6 <fontTableSize>,d1
   15834:	|  |  |         cmp.l d0,d1
   15836:	|  |  |  /----- bls.s 15862 <pasteStringToBackdrop+0x76>
   15838:	|  |  |  |      move.l 1cac2 <fontTable>,d1
   1583e:	|  |  |  |      movea.l 8(sp),a1
   15842:	|  |  |  |      move.b (a1),d0
   15844:	|  |  |  |      move.b d0,d0
   15846:	|  |  |  |      andi.l #255,d0
   1584c:	|  |  |  |      add.l d0,d0
   1584e:	|  |  |  |      add.l d0,d0
   15850:	|  |  |  |      movea.l d1,a1
   15852:	|  |  |  |      adda.l d0,a1
   15854:	|  |  |  |      move.l (a1),d1
   15856:	|  |  |  |      move.l d1,d0
   15858:	|  |  |  |      lsl.l #3,d0
   1585a:	|  |  |  |      sub.l d1,d0
   1585c:	|  |  |  |      add.l d0,d0
   1585e:	|  |  |  |      add.l d0,d0
   15860:	|  |  |  |  /-- bra.s 15864 <pasteStringToBackdrop+0x78>
   15862:	|  |  |  \--|-> moveq #0,d0
   15864:	|  |  |     \-> adda.l d0,a0
   15866:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15868:	|  |  |         move.l 24(sp),d1
   1586c:	|  |  |         movea.l (sp),a0
   1586e:	|  |  |         move.l 12(a0),d0
   15872:	|  |  |         move.l d0,d0
   15874:	|  |  |         sub.w d0,d1
   15876:	|  |  |         move.w d1,d0
   15878:	|  |  |         movea.w d0,a1
   1587a:	|  |  |         move.l 20(sp),d1
   1587e:	|  |  |         movea.l (sp),a0
   15880:	|  |  |         move.l 8(a0),d0
   15884:	|  |  |         move.l d0,d0
   15886:	|  |  |         sub.w d0,d1
   15888:	|  |  |         move.w d1,d0
   1588a:	|  |  |         movea.w d0,a0
   1588c:	|  |  |         move.l a1,-(sp)
   1588e:	|  |  |         move.l a0,-(sp)
   15890:	|  |  |         move.l 8(sp),-(sp)
   15894:	|  |  |         jsr 23bc <CstPasteChar>
   1589a:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1589e:	|  |  |         movea.l (sp),a0
   158a0:	|  |  |         move.l (a0),d1
   158a2:	|  |  |         move.w 1c8c2 <fontSpace>,d0
   158a8:	|  |  |         movea.w d0,a0
   158aa:	|  |  |         move.l d1,d0
   158ac:	|  |  |         add.l a0,d0
   158ae:	|  |  |         add.l d0,20(sp)
		tmp++;
   158b2:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   158b6:	|  |  \-------> movea.l 8(sp),a0
   158ba:	|  |            move.b (a0),d0
   158bc:	|  \----------- bne.w 15816 <pasteStringToBackdrop+0x2a>
   158c0:	|           /-- bra.s 158c4 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   158c2:	\-----------|-> nop
    }
}
   158c4:	            \-> lea 12(sp),sp
   158c8:	                rts

000158ca <stringWidth>:


int stringWidth (char * theText) {
   158ca:	       subq.l #8,sp
	int a = 0;
   158cc:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   158d0:	       clr.l (sp)

	if (! fontTableSize) return 0;
   158d2:	       move.l 1cac6 <fontTableSize>,d0
   158d8:	/----- bne.s 158de <stringWidth+0x14>
   158da:	|      moveq #0,d0
   158dc:	|  /-- bra.s 158e0 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   158de:	\--|-> move.l (sp),d0
}
   158e0:	   \-> addq.l #8,sp
   158e2:	       rts

000158e4 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   158e4:	       lea -16(sp),sp
   158e8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   158ea:	       moveq #36,d0
   158ec:	       move.l d0,16(sp)
   158f0:	       clr.l 12(sp)
   158f4:	       move.l 1c9be <SysBase>,d0
   158fa:	       movea.l d0,a6
   158fc:	       move.l 16(sp),d0
   15900:	       move.l 12(sp),d1
   15904:	       jsr -684(a6)
   15908:	       move.l d0,8(sp)
   1590c:	       move.l 8(sp),d0
   15910:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15914:	   /-- bne.s 1591c <addScreenRegion+0x38>
   15916:	   |   clr.w d0
   15918:	/--|-- bra.w 1599c <addScreenRegion+0xb8>
    newRegion->di = di;
   1591c:	|  \-> movea.l 4(sp),a0
   15920:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15926:	|      movea.l 4(sp),a0
   1592a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1592e:	|      movea.l 4(sp),a0
   15932:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15938:	|      movea.l 4(sp),a0
   1593c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15942:	|      movea.l 4(sp),a0
   15946:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1594c:	|      movea.l 4(sp),a0
   15950:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15956:	|      movea.l 4(sp),a0
   1595a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15960:	|      move.l 52(sp),-(sp)
   15964:	|      jsr d622 <loadObjectType>
   1596a:	|      addq.l #4,sp
   1596c:	|      movea.l 4(sp),a0
   15970:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15974:	|      move.l 1cace <allScreenRegions>,d0
   1597a:	|      movea.l 4(sp),a0
   1597e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15982:	|      move.l 4(sp),1cace <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1598a:	|      movea.l 4(sp),a0
   1598e:	|      move.l 28(a0),d0
   15992:	|      sne d0
   15994:	|      neg.b d0
   15996:	|      move.b d0,d0
   15998:	|      andi.w #255,d0
}
   1599c:	\----> movea.l (sp)+,a6
   1599e:	       lea 16(sp),sp
   159a2:	       rts

000159a4 <getOverRegion>:

void getOverRegion () {
   159a4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   159a6:	             move.l 1cace <allScreenRegions>,(sp)
	while (thisRegion) {
   159ac:	   /-------- bra.s 15a1a <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   159ae:	/--|-------> move.l 1c97a <input+0xa>,d0
   159b4:	|  |         movea.l (sp),a0
   159b6:	|  |         movea.l (a0),a0
   159b8:	|  |         move.l 1ca78 <cameraX>,d1
   159be:	|  |         suba.l d1,a0
   159c0:	|  |         cmpa.l d0,a0
   159c2:	|  |  /----- bgt.s 15a14 <getOverRegion+0x70>
   159c4:	|  |  |      move.l 1c97e <input+0xe>,d0
   159ca:	|  |  |      movea.l (sp),a0
   159cc:	|  |  |      movea.l 4(a0),a0
   159d0:	|  |  |      move.l 1ca7c <cameraY>,d1
   159d6:	|  |  |      suba.l d1,a0
   159d8:	|  |  |      cmpa.l d0,a0
   159da:	|  |  +----- bgt.s 15a14 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   159dc:	|  |  |      move.l 1c97a <input+0xa>,d0
   159e2:	|  |  |      movea.l (sp),a0
   159e4:	|  |  |      movea.l 8(a0),a0
   159e8:	|  |  |      move.l 1ca78 <cameraX>,d1
   159ee:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   159f0:	|  |  |      cmpa.l d0,a0
   159f2:	|  |  +----- blt.s 15a14 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   159f4:	|  |  |      move.l 1c97e <input+0xe>,d0
   159fa:	|  |  |      movea.l (sp),a0
   159fc:	|  |  |      movea.l 12(a0),a0
   15a00:	|  |  |      move.l 1ca7c <cameraY>,d1
   15a06:	|  |  |      suba.l d1,a0
   15a08:	|  |  |      cmpa.l d0,a0
   15a0a:	|  |  +----- blt.s 15a14 <getOverRegion+0x70>
			overRegion = thisRegion;
   15a0c:	|  |  |      move.l (sp),1cad2 <overRegion>
			return;
   15a12:	|  |  |  /-- bra.s 15a26 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15a14:	|  |  \--|-> movea.l (sp),a0
   15a16:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a1a:	|  \-----|-> tst.l (sp)
   15a1c:	\--------|-- bne.s 159ae <getOverRegion+0xa>
	}
	overRegion = NULL;
   15a1e:	         |   clr.l 1cad2 <overRegion>
	return;
   15a24:	         |   nop
}
   15a26:	         \-> addq.l #4,sp
   15a28:	             rts

00015a2a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15a2a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a2c:	             move.l 1cace <allScreenRegions>,(sp)

	while (thisRegion) {
   15a32:	   /-------- bra.s 15a4e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15a34:	/--|-------> movea.l (sp),a0
   15a36:	|  |         movea.l 28(a0),a0
   15a3a:	|  |         move.l 4(a0),d0
   15a3e:	|  |         cmp.l 8(sp),d0
   15a42:	|  |     /-- bne.s 15a48 <getRegionForObject+0x1e>
			return thisRegion;
   15a44:	|  |     |   move.l (sp),d0
   15a46:	|  |  /--|-- bra.s 15a54 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15a48:	|  |  |  \-> movea.l (sp),a0
   15a4a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15a4e:	|  \--|----> tst.l (sp)
   15a50:	\-----|----- bne.s 15a34 <getRegionForObject+0xa>
	}

	return NULL;
   15a52:	      |      moveq #0,d0
}
   15a54:	      \----> addq.l #4,sp
   15a56:	             rts

00015a58 <killAllRegions>:

void killAllRegions () {
   15a58:	       subq.l #8,sp
   15a5a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15a5c:	   /-- bra.s 15a9e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15a5e:	/--|-> move.l 1cace <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15a66:	|  |   movea.l 1cace <allScreenRegions>,a0
   15a6c:	|  |   move.l 32(a0),d0
   15a70:	|  |   move.l d0,1cace <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15a76:	|  |   movea.l 8(sp),a0
   15a7a:	|  |   move.l 28(a0),d0
   15a7e:	|  |   move.l d0,-(sp)
   15a80:	|  |   jsr d8da <removeObjectType>
   15a86:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15a88:	|  |   move.l 8(sp),4(sp)
   15a8e:	|  |   move.l 1c9be <SysBase>,d0
   15a94:	|  |   movea.l d0,a6
   15a96:	|  |   movea.l 4(sp),a1
   15a9a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15a9e:	|  \-> move.l 1cace <allScreenRegions>,d0
   15aa4:	\----- bne.s 15a5e <killAllRegions+0x6>
	}
	overRegion = NULL;
   15aa6:	       clr.l 1cad2 <overRegion>
}
   15aac:	       nop
   15aae:	       movea.l (sp)+,a6
   15ab0:	       addq.l #8,sp
   15ab2:	       rts

00015ab4 <loadRegions>:

void loadRegions (BPTR fp) {
   15ab4:	       lea -24(sp),sp
   15ab8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15aba:	       move.l 32(sp),-(sp)
   15abe:	       jsr 6bc <get2bytes>
   15ac4:	       addq.l #4,sp
   15ac6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15aca:	       move.l #117454,20(sp)

	while (numRegions --) {
   15ad2:	   /-- bra.w 15bb0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15ad6:	/--|-> moveq #36,d0
   15ad8:	|  |   move.l d0,16(sp)
   15adc:	|  |   clr.l 12(sp)
   15ae0:	|  |   move.l 1c9be <SysBase>,d0
   15ae6:	|  |   movea.l d0,a6
   15ae8:	|  |   move.l 16(sp),d0
   15aec:	|  |   move.l 12(sp),d1
   15af0:	|  |   jsr -684(a6)
   15af4:	|  |   move.l d0,8(sp)
   15af8:	|  |   move.l 8(sp),d0
   15afc:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15b00:	|  |   movea.l 20(sp),a0
   15b04:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15b08:	|  |   moveq #32,d1
   15b0a:	|  |   add.l 4(sp),d1
   15b0e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15b12:	|  |   move.l 32(sp),-(sp)
   15b16:	|  |   jsr 6bc <get2bytes>
   15b1c:	|  |   addq.l #4,sp
   15b1e:	|  |   movea.l 4(sp),a0
   15b22:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15b24:	|  |   move.l 32(sp),-(sp)
   15b28:	|  |   jsr 6bc <get2bytes>
   15b2e:	|  |   addq.l #4,sp
   15b30:	|  |   movea.l 4(sp),a0
   15b34:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15b38:	|  |   move.l 32(sp),-(sp)
   15b3c:	|  |   jsr 6bc <get2bytes>
   15b42:	|  |   addq.l #4,sp
   15b44:	|  |   movea.l 4(sp),a0
   15b48:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15b4c:	|  |   move.l 32(sp),-(sp)
   15b50:	|  |   jsr 6bc <get2bytes>
   15b56:	|  |   addq.l #4,sp
   15b58:	|  |   movea.l 4(sp),a0
   15b5c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15b60:	|  |   move.l 32(sp),-(sp)
   15b64:	|  |   jsr 6bc <get2bytes>
   15b6a:	|  |   addq.l #4,sp
   15b6c:	|  |   movea.l 4(sp),a0
   15b70:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15b74:	|  |   move.l 32(sp),-(sp)
   15b78:	|  |   jsr 6bc <get2bytes>
   15b7e:	|  |   addq.l #4,sp
   15b80:	|  |   movea.l 4(sp),a0
   15b84:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15b88:	|  |   move.l 32(sp),-(sp)
   15b8c:	|  |   jsr 6bc <get2bytes>
   15b92:	|  |   addq.l #4,sp
   15b94:	|  |   movea.l 4(sp),a0
   15b98:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15b9c:	|  |   move.l 32(sp),-(sp)
   15ba0:	|  |   jsr d5d0 <loadObjectRef>
   15ba6:	|  |   addq.l #4,sp
   15ba8:	|  |   movea.l 4(sp),a0
   15bac:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15bb0:	|  \-> move.l 24(sp),d0
   15bb4:	|      move.l d0,d1
   15bb6:	|      subq.l #1,d1
   15bb8:	|      move.l d1,24(sp)
   15bbc:	|      tst.l d0
   15bbe:	\----- bne.w 15ad6 <loadRegions+0x22>
	}
	* pointy = NULL;
   15bc2:	       movea.l 20(sp),a0
   15bc6:	       clr.l (a0)
}
   15bc8:	       nop
   15bca:	       movea.l (sp)+,a6
   15bcc:	       lea 24(sp),sp
   15bd0:	       rts

00015bd2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15bd2:	             lea -12(sp),sp
   15bd6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15bd8:	             move.l #117454,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15be0:	   /-------- bra.s 15c5a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15be2:	/--|-------> movea.l 12(sp),a0
   15be6:	|  |         movea.l (a0),a0
   15be8:	|  |         movea.l 28(a0),a0
   15bec:	|  |         move.l 4(a0),d0
   15bf0:	|  |         cmp.l 20(sp),d0
   15bf4:	|  |  /----- bne.s 15c4c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15bf6:	|  |  |      movea.l 12(sp),a0
   15bfa:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15bfe:	|  |  |      movea.l 8(sp),a0
   15c02:	|  |  |      move.l 32(a0),d0
   15c06:	|  |  |      movea.l 12(sp),a0
   15c0a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15c0c:	|  |  |      movea.l 8(sp),a0
   15c10:	|  |  |      move.l 28(a0),d0
   15c14:	|  |  |      move.l d0,-(sp)
   15c16:	|  |  |      jsr d8da <removeObjectType>
   15c1c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15c1e:	|  |  |      move.l 1cad2 <overRegion>,d0
   15c24:	|  |  |      cmp.l 8(sp),d0
   15c28:	|  |  |  /-- bne.s 15c30 <removeScreenRegion+0x5e>
   15c2a:	|  |  |  |   clr.l 1cad2 <overRegion>
            FreeVec(killMe);
   15c30:	|  |  |  \-> move.l 8(sp),4(sp)
   15c36:	|  |  |      move.l 1c9be <SysBase>,d0
   15c3c:	|  |  |      movea.l d0,a6
   15c3e:	|  |  |      movea.l 4(sp),a1
   15c42:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15c46:	|  |  |      clr.l 8(sp)
   15c4a:	|  +--|----- bra.s 15c5a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15c4c:	|  |  \----> movea.l 12(sp),a0
   15c50:	|  |         move.l (a0),d0
   15c52:	|  |         moveq #32,d1
   15c54:	|  |         add.l d0,d1
   15c56:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15c5a:	|  \-------> movea.l 12(sp),a0
   15c5e:	|            move.l (a0),d0
   15c60:	\----------- bne.s 15be2 <removeScreenRegion+0x10>
        }
    }
}
   15c62:	             nop
   15c64:	             nop
   15c66:	             movea.l (sp)+,a6
   15c68:	             lea 12(sp),sp
   15c6c:	             rts

00015c6e <saveRegions>:

void saveRegions (BPTR fp) {
   15c6e:	       subq.l #8,sp
	int numRegions = 0;
   15c70:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15c74:	       move.l 1cace <allScreenRegions>,(sp)
	while (thisRegion) {
   15c7a:	   /-- bra.s 15c86 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15c7c:	/--|-> movea.l (sp),a0
   15c7e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15c82:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15c86:	|  \-> tst.l (sp)
   15c88:	\----- bne.s 15c7c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15c8a:	       move.l 12(sp),-(sp)
   15c8e:	       move.l 8(sp),-(sp)
   15c92:	       jsr 8d0 <put2bytes>
   15c98:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15c9a:	       move.l 1cace <allScreenRegions>,(sp)
	while (thisRegion) {
   15ca0:	/----- bra.w 15d48 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15ca4:	|  /-> movea.l (sp),a0
   15ca6:	|  |   move.l (a0),d0
   15ca8:	|  |   move.l 12(sp),-(sp)
   15cac:	|  |   move.l d0,-(sp)
   15cae:	|  |   jsr 8d0 <put2bytes>
   15cb4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15cb6:	|  |   movea.l (sp),a0
   15cb8:	|  |   move.l 4(a0),d0
   15cbc:	|  |   move.l 12(sp),-(sp)
   15cc0:	|  |   move.l d0,-(sp)
   15cc2:	|  |   jsr 8d0 <put2bytes>
   15cc8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15cca:	|  |   movea.l (sp),a0
   15ccc:	|  |   move.l 8(a0),d0
   15cd0:	|  |   move.l 12(sp),-(sp)
   15cd4:	|  |   move.l d0,-(sp)
   15cd6:	|  |   jsr 8d0 <put2bytes>
   15cdc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15cde:	|  |   movea.l (sp),a0
   15ce0:	|  |   move.l 12(a0),d0
   15ce4:	|  |   move.l 12(sp),-(sp)
   15ce8:	|  |   move.l d0,-(sp)
   15cea:	|  |   jsr 8d0 <put2bytes>
   15cf0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15cf2:	|  |   movea.l (sp),a0
   15cf4:	|  |   move.l 16(a0),d0
   15cf8:	|  |   move.l 12(sp),-(sp)
   15cfc:	|  |   move.l d0,-(sp)
   15cfe:	|  |   jsr 8d0 <put2bytes>
   15d04:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15d06:	|  |   movea.l (sp),a0
   15d08:	|  |   move.l 20(a0),d0
   15d0c:	|  |   move.l 12(sp),-(sp)
   15d10:	|  |   move.l d0,-(sp)
   15d12:	|  |   jsr 8d0 <put2bytes>
   15d18:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15d1a:	|  |   movea.l (sp),a0
   15d1c:	|  |   move.l 24(a0),d0
   15d20:	|  |   move.l 12(sp),-(sp)
   15d24:	|  |   move.l d0,-(sp)
   15d26:	|  |   jsr 8d0 <put2bytes>
   15d2c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15d2e:	|  |   movea.l (sp),a0
   15d30:	|  |   move.l 28(a0),d0
   15d34:	|  |   move.l 12(sp),-(sp)
   15d38:	|  |   move.l d0,-(sp)
   15d3a:	|  |   jsr d97a <saveObjectRef>
   15d40:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15d42:	|  |   movea.l (sp),a0
   15d44:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15d48:	\--|-> tst.l (sp)
   15d4a:	   \-- bne.w 15ca4 <saveRegions+0x36>
	}
}
   15d4e:	       nop
   15d50:	       nop
   15d52:	       addq.l #8,sp
   15d54:	       rts

00015d56 <showBoxes>:

void showBoxes () {
   15d56:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15d58:	       move.l 1cace <allScreenRegions>,(sp)

	while (huntRegion) {
   15d5e:	/----- bra.w 15dfa <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15d62:	|  /-> movea.l (sp),a0
   15d64:	|  |   move.l 12(a0),d0
   15d68:	|  |   movea.l d0,a1
   15d6a:	|  |   movea.l (sp),a0
   15d6c:	|  |   move.l 4(a0),d0
   15d70:	|  |   move.l d0,d1
   15d72:	|  |   movea.l (sp),a0
   15d74:	|  |   move.l (a0),d0
   15d76:	|  |   move.l a1,-(sp)
   15d78:	|  |   move.l d1,-(sp)
   15d7a:	|  |   move.l d0,-(sp)
   15d7c:	|  |   jsr d25e <drawVerticalLine>
   15d82:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15d86:	|  |   movea.l (sp),a0
   15d88:	|  |   move.l 12(a0),d0
   15d8c:	|  |   movea.l d0,a1
   15d8e:	|  |   movea.l (sp),a0
   15d90:	|  |   move.l 4(a0),d0
   15d94:	|  |   move.l d0,d1
   15d96:	|  |   movea.l (sp),a0
   15d98:	|  |   move.l 8(a0),d0
   15d9c:	|  |   move.l a1,-(sp)
   15d9e:	|  |   move.l d1,-(sp)
   15da0:	|  |   move.l d0,-(sp)
   15da2:	|  |   jsr d25e <drawVerticalLine>
   15da8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15dac:	|  |   movea.l (sp),a0
   15dae:	|  |   move.l 8(a0),d0
   15db2:	|  |   movea.l d0,a1
   15db4:	|  |   movea.l (sp),a0
   15db6:	|  |   move.l 4(a0),d0
   15dba:	|  |   move.l d0,d1
   15dbc:	|  |   movea.l (sp),a0
   15dbe:	|  |   move.l (a0),d0
   15dc0:	|  |   move.l a1,-(sp)
   15dc2:	|  |   move.l d1,-(sp)
   15dc4:	|  |   move.l d0,-(sp)
   15dc6:	|  |   jsr d238 <drawHorizontalLine>
   15dcc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15dd0:	|  |   movea.l (sp),a0
   15dd2:	|  |   move.l 8(a0),d0
   15dd6:	|  |   movea.l d0,a1
   15dd8:	|  |   movea.l (sp),a0
   15dda:	|  |   move.l 12(a0),d0
   15dde:	|  |   move.l d0,d1
   15de0:	|  |   movea.l (sp),a0
   15de2:	|  |   move.l (a0),d0
   15de4:	|  |   move.l a1,-(sp)
   15de6:	|  |   move.l d1,-(sp)
   15de8:	|  |   move.l d0,-(sp)
   15dea:	|  |   jsr d238 <drawHorizontalLine>
   15df0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15df4:	|  |   movea.l (sp),a0
   15df6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15dfa:	\--|-> tst.l (sp)
   15dfc:	   \-- bne.w 15d62 <showBoxes+0xc>
	}
   15e00:	       nop
   15e02:	       nop
   15e04:	       addq.l #4,sp
   15e06:	       rts

00015e08 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15e08:	       lea -88(sp),sp
   15e0c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15e0e:	       move.l 1c9be <SysBase>,d0
   15e14:	       movea.l d0,a6
   15e16:	       jsr -666(a6)
   15e1a:	       move.l d0,88(sp)
   15e1e:	       move.l 88(sp),d0
   15e22:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15e26:	       move.l 84(sp),80(sp)
   15e2c:	       moveq #40,d0
   15e2e:	       move.l d0,76(sp)
   15e32:	       move.l 1c9be <SysBase>,d0
   15e38:	       movea.l d0,a6
   15e3a:	       movea.l 80(sp),a0
   15e3e:	       move.l 76(sp),d0
   15e42:	       jsr -654(a6)
   15e46:	       move.l d0,72(sp)
   15e4a:	       move.l 72(sp),d0
   15e4e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15e52:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15e58:	       move.l #106600,60(sp)
   15e60:	       clr.l 56(sp)
   15e64:	       move.l 64(sp),52(sp)
   15e6a:	       clr.l 48(sp)
   15e6e:	       move.l 1c9be <SysBase>,d0
   15e74:	       movea.l d0,a6
   15e76:	       movea.l 60(sp),a0
   15e7a:	       move.l 56(sp),d0
   15e7e:	       movea.l 52(sp),a1
   15e82:	       move.l 48(sp),d1
   15e86:	       jsr -444(a6)
   15e8a:	       move.b d0,47(sp)
   15e8e:	       move.b 47(sp),d0
   15e92:	   /-- beq.s 15ea8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15e94:	   |   pea 1a075 <newfatal.c.307beca7+0x8d>
   15e9a:	   |   jsr 17248 <KPrintF>
   15ea0:	   |   addq.l #4,sp
        return 0;
   15ea2:	   |   moveq #0,d0
   15ea4:	/--|-- bra.w 15f62 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15ea8:	|  \-> movea.l 64(sp),a0
   15eac:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15eb2:	|      lea 92(sp),a0
   15eb6:	|      lea -86(a0),a0
   15eba:	|      move.l a0,38(sp)
   15ebe:	|      movea.l 42(sp),a6
   15ec2:	|      movea.l 38(sp),a0
   15ec6:	|      jsr -60(a6)
   15eca:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15ece:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15ed4:	|      move.l #1103515245,-(sp)
   15eda:	|      move.l 34(sp),-(sp)
   15ede:	|      jsr 17bfc <__mulsi3>
   15ee4:	|      addq.l #8,sp
   15ee6:	|      addi.l #12345,d0
   15eec:	|      move.l d0,d1
   15eee:	|      bclr #31,d1
   15ef2:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15ef6:	|      move.l 30(sp),d0
   15efa:	|      pea 64 <_start+0x64>
   15efe:	|      move.l d0,-(sp)
   15f00:	|      jsr 17cd6 <__umodsi3>
   15f06:	|      addq.l #8,sp
   15f08:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15f0c:	|      move.l 26(sp),-(sp)
   15f10:	|      pea 1a092 <newfatal.c.307beca7+0xaa>
   15f16:	|      jsr 17248 <KPrintF>
   15f1c:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15f1e:	|      move.l 64(sp),22(sp)
   15f24:	|      move.l 1c9be <SysBase>,d0
   15f2a:	|      movea.l d0,a6
   15f2c:	|      movea.l 22(sp),a1
   15f30:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15f34:	|      move.l 64(sp),18(sp)
   15f3a:	|      move.l 1c9be <SysBase>,d0
   15f40:	|      movea.l d0,a6
   15f42:	|      movea.l 18(sp),a0
   15f46:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15f4a:	|      move.l 84(sp),14(sp)
   15f50:	|      move.l 1c9be <SysBase>,d0
   15f56:	|      movea.l d0,a6
   15f58:	|      movea.l 14(sp),a0
   15f5c:	|      jsr -672(a6)
    return 0;
   15f60:	|      moveq #0,d0
   15f62:	\----> movea.l (sp)+,a6
   15f64:	       lea 88(sp),sp
   15f68:	       rts

00015f6a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15f6a:	             lea -20(sp),sp
   15f6e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15f70:	             move.l 1cad6 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15f78:	      /----- bra.s 15faa <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15f7a:	   /--|----> movea.l 20(sp),a0
   15f7e:	   |  |      move.l (a0),d0
   15f80:	   |  |      cmp.l 28(sp),d0
   15f84:	   |  |  /-- bne.s 15fa0 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15f86:	   |  |  |   movea.l 20(sp),a0
   15f8a:	   |  |  |   move.l 4(a0),d0
   15f8e:	   |  |  |   addq.l #1,d0
   15f90:	   |  |  |   movea.l 20(sp),a0
   15f94:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15f98:	   |  |  |   move.l 20(sp),d0
   15f9c:	/--|--|--|-- bra.w 1605a <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   15fa0:	|  |  |  \-> movea.l 20(sp),a0
   15fa4:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15faa:	|  |  \----> tst.l 20(sp)
   15fae:	|  \-------- bne.s 15f7a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15fb0:	|            moveq #26,d0
   15fb2:	|            move.l d0,16(sp)
   15fb6:	|            clr.l 12(sp)
   15fba:	|            move.l 1c9be <SysBase>,d0
   15fc0:	|            movea.l d0,a6
   15fc2:	|            move.l 16(sp),d0
   15fc6:	|            move.l 12(sp),d1
   15fca:	|            jsr -684(a6)
   15fce:	|            move.l d0,8(sp)
   15fd2:	|            move.l 8(sp),d0
   15fd6:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15fda:	|     /----- beq.s 16058 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   15fdc:	|     |      movea.l 20(sp),a0
   15fe0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   15fe4:	|     |      move.l 20(sp),d0
   15fe8:	|     |      addq.l #8,d0
   15fea:	|     |      move.l d0,-(sp)
   15fec:	|     |      move.l 32(sp),-(sp)
   15ff0:	|     |      jsr 8b7e <loadSpriteBank>
   15ff6:	|     |      addq.l #8,sp
   15ff8:	|     |      tst.w d0
   15ffa:	|     |  /-- beq.s 16030 <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   15ffc:	|     |  |   movea.l 20(sp),a0
   16000:	|     |  |   moveq #1,d0
   16002:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16006:	|     |  |   move.l 1cad6 <allLoadedBanks>,d0
   1600c:	|     |  |   movea.l 20(sp),a0
   16010:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16014:	|     |  |   move.l 20(sp),1cad6 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   1601c:	|     |  |   pea 1a0a5 <newfatal.c.307beca7+0xbd>
   16022:	|     |  |   jsr 17248 <KPrintF>
   16028:	|     |  |   addq.l #4,sp
			return returnMe;
   1602a:	|     |  |   move.l 20(sp),d0
   1602e:	+-----|--|-- bra.s 1605a <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   16030:	|     |  \-> pea 1a0d2 <newfatal.c.307beca7+0xea>
   16036:	|     |      jsr 17248 <KPrintF>
   1603c:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   1603e:	|     |      move.l 20(sp),4(sp)
   16044:	|     |      move.l 1c9be <SysBase>,d0
   1604a:	|     |      movea.l d0,a6
   1604c:	|     |      movea.l 4(sp),a1
   16050:	|     |      jsr -690(a6)
			return NULL;
   16054:	|     |      moveq #0,d0
   16056:	+-----|----- bra.s 1605a <loadBankForAnim+0xf0>
		}
	} else return NULL;
   16058:	|     \----> moveq #0,d0
}
   1605a:	\----------> movea.l (sp)+,a6
   1605c:	             lea 20(sp),sp
   16060:	             rts

00016062 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16062:	       lea -60(sp),sp
   16066:	       move.l d3,-(sp)
   16068:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1606a:	       move.l 88(sp),d0
   1606e:	       sub.l 80(sp),d0
   16072:	       move.l d0,-(sp)
   16074:	       jsr 1763a <__floatsidf>
   1607a:	       addq.l #4,sp
   1607c:	       move.l d0,32(sp)
   16080:	       move.l d1,36(sp)
   16084:	       move.l 32(sp),60(sp)
   1608a:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16090:	       move.l 92(sp),d0
   16094:	       sub.l 84(sp),d0
   16098:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1609c:	       move.l 96(sp),d0
   160a0:	       sub.l 80(sp),d0
   160a4:	       move.l d0,-(sp)
   160a6:	       jsr 1763a <__floatsidf>
   160ac:	       addq.l #4,sp
   160ae:	       move.l 64(sp),-(sp)
   160b2:	       move.l 64(sp),-(sp)
   160b6:	       move.l d1,-(sp)
   160b8:	       move.l d0,-(sp)
   160ba:	       jsr 176ca <__muldf3>
   160c0:	       lea 16(sp),sp
   160c4:	       move.l d0,d2
   160c6:	       move.l d1,d3
   160c8:	       move.l 100(sp),d0
   160cc:	       sub.l 84(sp),d0
   160d0:	       move.l 56(sp),-(sp)
   160d4:	       move.l d0,-(sp)
   160d6:	       jsr 17bfc <__mulsi3>
   160dc:	       addq.l #8,sp
   160de:	       move.l d0,-(sp)
   160e0:	       jsr 1763a <__floatsidf>
   160e6:	       addq.l #4,sp
   160e8:	       move.l d1,-(sp)
   160ea:	       move.l d0,-(sp)
   160ec:	       move.l d3,-(sp)
   160ee:	       move.l d2,-(sp)
   160f0:	       jsr 1746c <__adddf3>
   160f6:	       lea 16(sp),sp
   160fa:	       move.l d0,24(sp)
   160fe:	       move.l d1,28(sp)
   16102:	       move.l 24(sp),48(sp)
   16108:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1610e:	       move.l 64(sp),-(sp)
   16112:	       move.l 64(sp),-(sp)
   16116:	       move.l 72(sp),-(sp)
   1611a:	       move.l 72(sp),-(sp)
   1611e:	       jsr 176ca <__muldf3>
   16124:	       lea 16(sp),sp
   16128:	       move.l d0,d2
   1612a:	       move.l d1,d3
   1612c:	       move.l 56(sp),-(sp)
   16130:	       move.l 60(sp),-(sp)
   16134:	       jsr 17bfc <__mulsi3>
   1613a:	       addq.l #8,sp
   1613c:	       move.l d0,-(sp)
   1613e:	       jsr 1763a <__floatsidf>
   16144:	       addq.l #4,sp
   16146:	       move.l d1,-(sp)
   16148:	       move.l d0,-(sp)
   1614a:	       move.l d3,-(sp)
   1614c:	       move.l d2,-(sp)
   1614e:	       jsr 1746c <__adddf3>
   16154:	       lea 16(sp),sp
   16158:	       move.l d1,-(sp)
   1615a:	       move.l d0,-(sp)
   1615c:	       move.l 60(sp),-(sp)
   16160:	       move.l 60(sp),-(sp)
   16164:	       jsr 174ce <__divdf3>
   1616a:	       lea 16(sp),sp
   1616e:	       move.l d0,16(sp)
   16172:	       move.l d1,20(sp)
   16176:	       move.l 16(sp),48(sp)
   1617c:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16182:	       clr.l -(sp)
   16184:	       clr.l -(sp)
   16186:	       move.l 60(sp),-(sp)
   1618a:	       move.l 60(sp),-(sp)
   1618e:	       jsr 17852 <__ltdf2>
   16194:	       lea 16(sp),sp
   16198:	       tst.l d0
   1619a:	   /-- bge.s 161b0 <closestPointOnLine+0x14e>
		*closestX = x1;
   1619c:	   |   movea.l 72(sp),a0
   161a0:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   161a4:	   |   movea.l 76(sp),a0
   161a8:	   |   move.l 84(sp),(a0)
   161ac:	/--|-- bra.w 1627e <closestPointOnLine+0x21c>
	} else if (m > 1) {
   161b0:	|  \-> clr.l -(sp)
   161b2:	|      move.l #1072693248,-(sp)
   161b8:	|      move.l 60(sp),-(sp)
   161bc:	|      move.l 60(sp),-(sp)
   161c0:	|      jsr 17798 <__gtdf2>
   161c6:	|      lea 16(sp),sp
   161ca:	|      tst.l d0
   161cc:	|  /-- ble.s 161e2 <closestPointOnLine+0x180>
		*closestX = x2;
   161ce:	|  |   movea.l 72(sp),a0
   161d2:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   161d6:	|  |   movea.l 76(sp),a0
   161da:	|  |   move.l 92(sp),(a0)
   161de:	+--|-- bra.w 1627e <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   161e2:	|  \-> move.l 64(sp),-(sp)
   161e6:	|      move.l 64(sp),-(sp)
   161ea:	|      move.l 60(sp),-(sp)
   161ee:	|      move.l 60(sp),-(sp)
   161f2:	|      jsr 176ca <__muldf3>
   161f8:	|      lea 16(sp),sp
   161fc:	|      move.l d0,8(sp)
   16200:	|      move.l d1,12(sp)
   16204:	|      move.l 8(sp),40(sp)
   1620a:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16210:	|      move.l 44(sp),-(sp)
   16214:	|      move.l 44(sp),-(sp)
   16218:	|      jsr 175dc <__fixdfsi>
   1621e:	|      addq.l #8,sp
   16220:	|      movea.l 72(sp),a0
   16224:	|      move.l d0,(a0)
		*closestX += x1;
   16226:	|      movea.l 72(sp),a0
   1622a:	|      move.l (a0),d0
   1622c:	|      add.l 80(sp),d0
   16230:	|      movea.l 72(sp),a0
   16234:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16236:	|      move.l 56(sp),-(sp)
   1623a:	|      jsr 1763a <__floatsidf>
   16240:	|      addq.l #4,sp
   16242:	|      move.l 52(sp),-(sp)
   16246:	|      move.l 52(sp),-(sp)
   1624a:	|      move.l d1,-(sp)
   1624c:	|      move.l d0,-(sp)
   1624e:	|      jsr 176ca <__muldf3>
   16254:	|      lea 16(sp),sp
   16258:	|      move.l d1,-(sp)
   1625a:	|      move.l d0,-(sp)
   1625c:	|      jsr 175dc <__fixdfsi>
   16262:	|      addq.l #8,sp
   16264:	|      movea.l 76(sp),a0
   16268:	|      move.l d0,(a0)
		*closestY += y1;
   1626a:	|      movea.l 76(sp),a0
   1626e:	|      move.l (a0),d0
   16270:	|      add.l 84(sp),d0
   16274:	|      movea.l 76(sp),a0
   16278:	|      move.l d0,(a0)
		return TRUE;
   1627a:	|      moveq #1,d0
   1627c:	|  /-- bra.s 16280 <closestPointOnLine+0x21e>
	}
	return FALSE;
   1627e:	\--|-> clr.w d0
}
   16280:	   \-> move.l (sp)+,d2
   16282:	       move.l (sp)+,d3
   16284:	       lea 60(sp),sp
   16288:	       rts

0001628a <drawFloor>:

void drawFloor() {
   1628a:	                lea -12(sp),sp
   1628e:	                move.l d3,-(sp)
   16290:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16292:	                clr.l 16(sp)
   16296:	   /----------- bra.w 164aa <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1629a:	/--|----------> movea.l 1cada <currentFloor>,a0
   162a0:	|  |            move.l 12(a0),d1
   162a4:	|  |            move.l 16(sp),d0
   162a8:	|  |            lsl.l #3,d0
   162aa:	|  |            movea.l d1,a0
   162ac:	|  |            adda.l d0,a0
   162ae:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   162b2:	|  |            moveq #1,d0
   162b4:	|  |            cmp.l 8(sp),d0
   162b8:	|  |  /-------- bge.w 164a6 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   162bc:	|  |  |         moveq #1,d0
   162be:	|  |  |         move.l d0,12(sp)
   162c2:	|  |  |     /-- bra.w 163bc <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   162c6:	|  |  |  /--|-> movea.l 1cada <currentFloor>,a0
   162cc:	|  |  |  |  |   move.l 4(a0),d1
   162d0:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   162d6:	|  |  |  |  |   movea.l 12(a0),a0
   162da:	|  |  |  |  |   move.l 16(sp),d0
   162de:	|  |  |  |  |   lsl.l #3,d0
   162e0:	|  |  |  |  |   adda.l d0,a0
   162e2:	|  |  |  |  |   movea.l 4(a0),a0
   162e6:	|  |  |  |  |   move.l 12(sp),d0
   162ea:	|  |  |  |  |   add.l d0,d0
   162ec:	|  |  |  |  |   add.l d0,d0
   162ee:	|  |  |  |  |   adda.l d0,a0
   162f0:	|  |  |  |  |   move.l (a0),d0
   162f2:	|  |  |  |  |   lsl.l #3,d0
   162f4:	|  |  |  |  |   movea.l d1,a0
   162f6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   162f8:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   162fc:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16302:	|  |  |  |  |   move.l 4(a0),d1
   16306:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   1630c:	|  |  |  |  |   movea.l 12(a0),a0
   16310:	|  |  |  |  |   move.l 16(sp),d0
   16314:	|  |  |  |  |   lsl.l #3,d0
   16316:	|  |  |  |  |   adda.l d0,a0
   16318:	|  |  |  |  |   movea.l 4(a0),a0
   1631c:	|  |  |  |  |   move.l 12(sp),d0
   16320:	|  |  |  |  |   add.l d0,d0
   16322:	|  |  |  |  |   add.l d0,d0
   16324:	|  |  |  |  |   adda.l d0,a0
   16326:	|  |  |  |  |   move.l (a0),d0
   16328:	|  |  |  |  |   lsl.l #3,d0
   1632a:	|  |  |  |  |   movea.l d1,a0
   1632c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1632e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16330:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16336:	|  |  |  |  |   move.l 4(a0),d1
   1633a:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16340:	|  |  |  |  |   movea.l 12(a0),a0
   16344:	|  |  |  |  |   move.l 16(sp),d0
   16348:	|  |  |  |  |   lsl.l #3,d0
   1634a:	|  |  |  |  |   adda.l d0,a0
   1634c:	|  |  |  |  |   movea.l 4(a0),a0
   16350:	|  |  |  |  |   move.l 12(sp),d0
   16354:	|  |  |  |  |   addi.l #1073741823,d0
   1635a:	|  |  |  |  |   add.l d0,d0
   1635c:	|  |  |  |  |   add.l d0,d0
   1635e:	|  |  |  |  |   adda.l d0,a0
   16360:	|  |  |  |  |   move.l (a0),d0
   16362:	|  |  |  |  |   lsl.l #3,d0
   16364:	|  |  |  |  |   movea.l d1,a0
   16366:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16368:	|  |  |  |  |   move.l 4(a0),d1
   1636c:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16372:	|  |  |  |  |   move.l 4(a0),d3
   16376:	|  |  |  |  |   movea.l 1cada <currentFloor>,a0
   1637c:	|  |  |  |  |   movea.l 12(a0),a0
   16380:	|  |  |  |  |   move.l 16(sp),d0
   16384:	|  |  |  |  |   lsl.l #3,d0
   16386:	|  |  |  |  |   adda.l d0,a0
   16388:	|  |  |  |  |   movea.l 4(a0),a0
   1638c:	|  |  |  |  |   move.l 12(sp),d0
   16390:	|  |  |  |  |   addi.l #1073741823,d0
   16396:	|  |  |  |  |   add.l d0,d0
   16398:	|  |  |  |  |   add.l d0,d0
   1639a:	|  |  |  |  |   adda.l d0,a0
   1639c:	|  |  |  |  |   move.l (a0),d0
   1639e:	|  |  |  |  |   lsl.l #3,d0
   163a0:	|  |  |  |  |   movea.l d3,a0
   163a2:	|  |  |  |  |   adda.l d0,a0
   163a4:	|  |  |  |  |   move.l (a0),d0
   163a6:	|  |  |  |  |   move.l d2,-(sp)
   163a8:	|  |  |  |  |   move.l a1,-(sp)
   163aa:	|  |  |  |  |   move.l d1,-(sp)
   163ac:	|  |  |  |  |   move.l d0,-(sp)
   163ae:	|  |  |  |  |   jsr 3e7e <drawLine>
   163b4:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   163b8:	|  |  |  |  |   addq.l #1,12(sp)
   163bc:	|  |  |  |  \-> move.l 12(sp),d0
   163c0:	|  |  |  |      cmp.l 8(sp),d0
   163c4:	|  |  |  \----- blt.w 162c6 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   163c8:	|  |  |         movea.l 1cada <currentFloor>,a0
   163ce:	|  |  |         move.l 4(a0),d1
   163d2:	|  |  |         movea.l 1cada <currentFloor>,a0
   163d8:	|  |  |         movea.l 12(a0),a0
   163dc:	|  |  |         move.l 16(sp),d0
   163e0:	|  |  |         lsl.l #3,d0
   163e2:	|  |  |         adda.l d0,a0
   163e4:	|  |  |         movea.l 4(a0),a0
   163e8:	|  |  |         move.l 8(sp),d0
   163ec:	|  |  |         addi.l #1073741823,d0
   163f2:	|  |  |         add.l d0,d0
   163f4:	|  |  |         add.l d0,d0
   163f6:	|  |  |         adda.l d0,a0
   163f8:	|  |  |         move.l (a0),d0
   163fa:	|  |  |         lsl.l #3,d0
   163fc:	|  |  |         movea.l d1,a0
   163fe:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16400:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16404:	|  |  |         movea.l 1cada <currentFloor>,a0
   1640a:	|  |  |         move.l 4(a0),d1
   1640e:	|  |  |         movea.l 1cada <currentFloor>,a0
   16414:	|  |  |         movea.l 12(a0),a0
   16418:	|  |  |         move.l 16(sp),d0
   1641c:	|  |  |         lsl.l #3,d0
   1641e:	|  |  |         adda.l d0,a0
   16420:	|  |  |         movea.l 4(a0),a0
   16424:	|  |  |         move.l 8(sp),d0
   16428:	|  |  |         addi.l #1073741823,d0
   1642e:	|  |  |         add.l d0,d0
   16430:	|  |  |         add.l d0,d0
   16432:	|  |  |         adda.l d0,a0
   16434:	|  |  |         move.l (a0),d0
   16436:	|  |  |         lsl.l #3,d0
   16438:	|  |  |         movea.l d1,a0
   1643a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1643c:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1643e:	|  |  |         movea.l 1cada <currentFloor>,a0
   16444:	|  |  |         move.l 4(a0),d1
   16448:	|  |  |         movea.l 1cada <currentFloor>,a0
   1644e:	|  |  |         movea.l 12(a0),a0
   16452:	|  |  |         move.l 16(sp),d0
   16456:	|  |  |         lsl.l #3,d0
   16458:	|  |  |         adda.l d0,a0
   1645a:	|  |  |         movea.l 4(a0),a0
   1645e:	|  |  |         move.l (a0),d0
   16460:	|  |  |         lsl.l #3,d0
   16462:	|  |  |         movea.l d1,a0
   16464:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16466:	|  |  |         move.l 4(a0),d1
   1646a:	|  |  |         movea.l 1cada <currentFloor>,a0
   16470:	|  |  |         move.l 4(a0),d3
   16474:	|  |  |         movea.l 1cada <currentFloor>,a0
   1647a:	|  |  |         movea.l 12(a0),a0
   1647e:	|  |  |         move.l 16(sp),d0
   16482:	|  |  |         lsl.l #3,d0
   16484:	|  |  |         adda.l d0,a0
   16486:	|  |  |         movea.l 4(a0),a0
   1648a:	|  |  |         move.l (a0),d0
   1648c:	|  |  |         lsl.l #3,d0
   1648e:	|  |  |         movea.l d3,a0
   16490:	|  |  |         adda.l d0,a0
   16492:	|  |  |         move.l (a0),d0
   16494:	|  |  |         move.l d2,-(sp)
   16496:	|  |  |         move.l a1,-(sp)
   16498:	|  |  |         move.l d1,-(sp)
   1649a:	|  |  |         move.l d0,-(sp)
   1649c:	|  |  |         jsr 3e7e <drawLine>
   164a2:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   164a6:	|  |  \-------> addq.l #1,16(sp)
   164aa:	|  \----------> movea.l 1cada <currentFloor>,a0
   164b0:	|               move.l 8(a0),d0
   164b4:	|               cmp.l 16(sp),d0
   164b8:	\-------------- bgt.w 1629a <drawFloor+0x10>
        }
    }
}
   164bc:	                nop
   164be:	                nop
   164c0:	                move.l (sp)+,d2
   164c2:	                move.l (sp)+,d3
   164c4:	                lea 12(sp),sp
   164c8:	                rts

000164ca <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   164ca:	                      lea -12(sp),sp
    int sharedVertices = 0;
   164ce:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   164d2:	                      clr.l 4(sp)
   164d6:	   /----------------- bra.w 16568 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   164da:	/--|----------------> clr.l (sp)
   164dc:	|  |     /----------- bra.s 16558 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   164de:	|  |  /--|----------> movea.l 16(sp),a0
   164e2:	|  |  |  |            move.l 4(a0),d1
   164e6:	|  |  |  |            move.l 4(sp),d0
   164ea:	|  |  |  |            add.l d0,d0
   164ec:	|  |  |  |            add.l d0,d0
   164ee:	|  |  |  |            movea.l d1,a0
   164f0:	|  |  |  |            adda.l d0,a0
   164f2:	|  |  |  |            move.l (a0),d1
   164f4:	|  |  |  |            movea.l 20(sp),a0
   164f8:	|  |  |  |            movea.l 4(a0),a0
   164fc:	|  |  |  |            move.l (sp),d0
   164fe:	|  |  |  |            add.l d0,d0
   16500:	|  |  |  |            add.l d0,d0
   16502:	|  |  |  |            adda.l d0,a0
   16504:	|  |  |  |            move.l (a0),d0
   16506:	|  |  |  |            cmp.l d1,d0
   16508:	|  |  |  |  /-------- bne.s 16556 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1650a:	|  |  |  |  |         move.l 8(sp),d0
   1650e:	|  |  |  |  |         move.l d0,d1
   16510:	|  |  |  |  |         addq.l #1,d1
   16512:	|  |  |  |  |         move.l d1,8(sp)
   16516:	|  |  |  |  |         tst.l d0
   16518:	|  |  |  |  |     /-- beq.s 1653a <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1651a:	|  |  |  |  |     |   movea.l 16(sp),a0
   1651e:	|  |  |  |  |     |   move.l 4(a0),d1
   16522:	|  |  |  |  |     |   move.l 4(sp),d0
   16526:	|  |  |  |  |     |   add.l d0,d0
   16528:	|  |  |  |  |     |   add.l d0,d0
   1652a:	|  |  |  |  |     |   movea.l d1,a0
   1652c:	|  |  |  |  |     |   adda.l d0,a0
   1652e:	|  |  |  |  |     |   move.l (a0),d0
   16530:	|  |  |  |  |     |   movea.l 28(sp),a0
   16534:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16536:	|  |  |  |  |     |   moveq #1,d0
   16538:	|  |  |  |  |  /--|-- bra.s 16578 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1653a:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1653e:	|  |  |  |  |  |      move.l 4(a0),d1
   16542:	|  |  |  |  |  |      move.l 4(sp),d0
   16546:	|  |  |  |  |  |      add.l d0,d0
   16548:	|  |  |  |  |  |      add.l d0,d0
   1654a:	|  |  |  |  |  |      movea.l d1,a0
   1654c:	|  |  |  |  |  |      adda.l d0,a0
   1654e:	|  |  |  |  |  |      move.l (a0),d0
   16550:	|  |  |  |  |  |      movea.l 24(sp),a0
   16554:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16556:	|  |  |  |  \--|----> addq.l #1,(sp)
   16558:	|  |  |  \-----|----> movea.l 20(sp),a0
   1655c:	|  |  |        |      move.l (a0),d0
   1655e:	|  |  |        |      cmp.l (sp),d0
   16560:	|  |  \--------|----- bgt.w 164de <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16564:	|  |           |      addq.l #1,4(sp)
   16568:	|  \-----------|----> movea.l 16(sp),a0
   1656c:	|              |      move.l (a0),d0
   1656e:	|              |      cmp.l 4(sp),d0
   16572:	\--------------|----- bgt.w 164da <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16576:	               |      clr.w d0
}
   16578:	               \----> lea 12(sp),sp
   1657c:	                      rts

0001657e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1657e:	movea.l 1cada <currentFloor>,a0
   16584:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16588:	movea.l 1cada <currentFloor>,a0
   1658e:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16592:	movea.l 1cada <currentFloor>,a0
   16598:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1659c:	movea.l 1cada <currentFloor>,a0
   165a2:	clr.l 16(a0)
}
   165a6:	nop
   165a8:	rts

000165aa <inFloor>:

int inFloor (int x, int y) {
   165aa:	          subq.l #8,sp
	int i, r = -1;
   165ac:	          moveq #-1,d0
   165ae:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165b0:	          clr.l 4(sp)
   165b4:	   /----- bra.s 165e8 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   165b6:	/--|----> movea.l 1cada <currentFloor>,a0
   165bc:	|  |      move.l 12(a0),d1
   165c0:	|  |      move.l 4(sp),d0
   165c4:	|  |      lsl.l #3,d0
   165c6:	|  |      add.l d1,d0
   165c8:	|  |      move.l 16(sp),-(sp)
   165cc:	|  |      move.l 16(sp),-(sp)
   165d0:	|  |      move.l d0,-(sp)
   165d2:	|  |      jsr 167b4 <pointInFloorPolygon>
   165d8:	|  |      lea 12(sp),sp
   165dc:	|  |      tst.w d0
   165de:	|  |  /-- beq.s 165e4 <inFloor+0x3a>
			r = i;
   165e0:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165e4:	|  |  \-> addq.l #1,4(sp)
   165e8:	|  \----> movea.l 1cada <currentFloor>,a0
   165ee:	|         move.l 8(a0),d0
   165f2:	|         cmp.l 4(sp),d0
   165f6:	\-------- bgt.s 165b6 <inFloor+0xc>

	return r;
   165f8:	          move.l (sp),d0
}
   165fa:	          addq.l #8,sp
   165fc:	          rts

000165fe <initFloor>:

BOOL initFloor () {
   165fe:	       lea -12(sp),sp
   16602:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16604:	       moveq #20,d0
   16606:	       move.l d0,12(sp)
   1660a:	       clr.l 8(sp)
   1660e:	       move.l 1c9be <SysBase>,d0
   16614:	       movea.l d0,a6
   16616:	       move.l 12(sp),d0
   1661a:	       move.l 8(sp),d1
   1661e:	       jsr -684(a6)
   16622:	       move.l d0,4(sp)
   16626:	       move.l 4(sp),d0
   1662a:	       move.l d0,1cada <currentFloor>

    if(currentFloor == 0) {
   16630:	       move.l 1cada <currentFloor>,d0
   16636:	/----- bne.s 1664a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16638:	|      pea 1a10b <newfatal.c.307beca7+0x123>
   1663e:	|      jsr 17248 <KPrintF>
   16644:	|      addq.l #4,sp
        return FALSE;
   16646:	|      clr.w d0
   16648:	|  /-- bra.s 16652 <initFloor+0x54>
    }

	noFloor ();
   1664a:	\--|-> jsr 1657e <noFloor>
	return TRUE;
   16650:	   |   moveq #1,d0
}
   16652:	   \-> movea.l (sp)+,a6
   16654:	       lea 12(sp),sp
   16658:	       rts

0001665a <killFloor>:

void killFloor () {
   1665a:	       lea -24(sp),sp
   1665e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16660:	       clr.l 24(sp)
   16664:	   /-- bra.s 166be <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16666:	/--|-> movea.l 1cada <currentFloor>,a0
   1666c:	|  |   move.l 12(a0),d1
   16670:	|  |   move.l 24(sp),d0
   16674:	|  |   lsl.l #3,d0
   16676:	|  |   movea.l d1,a0
   16678:	|  |   adda.l d0,a0
   1667a:	|  |   move.l 4(a0),8(sp)
   16680:	|  |   move.l 1c9be <SysBase>,d0
   16686:	|  |   movea.l d0,a6
   16688:	|  |   movea.l 8(sp),a1
   1668c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16690:	|  |   movea.l 1cada <currentFloor>,a0
   16696:	|  |   move.l 16(a0),d1
   1669a:	|  |   move.l 24(sp),d0
   1669e:	|  |   add.l d0,d0
   166a0:	|  |   add.l d0,d0
   166a2:	|  |   movea.l d1,a0
   166a4:	|  |   adda.l d0,a0
   166a6:	|  |   move.l (a0),4(sp)
   166aa:	|  |   move.l 1c9be <SysBase>,d0
   166b0:	|  |   movea.l d0,a6
   166b2:	|  |   movea.l 4(sp),a1
   166b6:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166ba:	|  |   addq.l #1,24(sp)
   166be:	|  \-> movea.l 1cada <currentFloor>,a0
   166c4:	|      move.l 8(a0),d0
   166c8:	|      cmp.l 24(sp),d0
   166cc:	\----- bgt.s 16666 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   166ce:	       movea.l 1cada <currentFloor>,a0
   166d4:	       move.l 12(a0),20(sp)
   166da:	       move.l 1c9be <SysBase>,d0
   166e0:	       movea.l d0,a6
   166e2:	       movea.l 20(sp),a1
   166e6:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   166ea:	       movea.l 1cada <currentFloor>,a0
   166f0:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   166f4:	       movea.l 1cada <currentFloor>,a0
   166fa:	       move.l 4(a0),16(sp)
   16700:	       move.l 1c9be <SysBase>,d0
   16706:	       movea.l d0,a6
   16708:	       movea.l 16(sp),a1
   1670c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16710:	       movea.l 1cada <currentFloor>,a0
   16716:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1671a:	       movea.l 1cada <currentFloor>,a0
   16720:	       move.l 16(a0),12(sp)
   16726:	       move.l 1c9be <SysBase>,d0
   1672c:	       movea.l d0,a6
   1672e:	       movea.l 12(sp),a1
   16732:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16736:	       movea.l 1cada <currentFloor>,a0
   1673c:	       clr.l 16(a0)
}
   16740:	       nop
   16742:	       movea.l (sp)+,a6
   16744:	       lea 24(sp),sp
   16748:	       rts

0001674a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1674a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1674e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16752:	                   clr.l 4(sp)
   16756:	   /-------------- bra.s 167a2 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16758:	/--|-------------> clr.l (sp)
   1675a:	|  |     /-------- bra.s 16796 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1675c:	|  |  /--|-------> move.l 20(sp),d1
   16760:	|  |  |  |         move.l 4(sp),d0
   16764:	|  |  |  |         add.l d0,d0
   16766:	|  |  |  |         add.l d0,d0
   16768:	|  |  |  |         movea.l d1,a0
   1676a:	|  |  |  |         adda.l d0,a0
   1676c:	|  |  |  |         move.l (a0),d1
   1676e:	|  |  |  |         movea.l 28(sp),a0
   16772:	|  |  |  |         move.l (sp),d0
   16774:	|  |  |  |         add.l d0,d0
   16776:	|  |  |  |         add.l d0,d0
   16778:	|  |  |  |         adda.l d0,a0
   1677a:	|  |  |  |         move.l (a0),d0
   1677c:	|  |  |  |         cmp.l d1,d0
   1677e:	|  |  |  |     /-- bne.s 16794 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16780:	|  |  |  |     |   move.l 8(sp),d0
   16784:	|  |  |  |     |   move.l d0,d1
   16786:	|  |  |  |     |   addq.l #1,d1
   16788:	|  |  |  |     |   move.l d1,8(sp)
   1678c:	|  |  |  |     |   tst.l d0
   1678e:	|  |  |  |     +-- beq.s 16794 <polysShareSide+0x4a>
   16790:	|  |  |  |     |   moveq #1,d0
   16792:	|  |  |  |  /--|-- bra.s 167ae <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16794:	|  |  |  |  |  \-> addq.l #1,(sp)
   16796:	|  |  |  \--|----> move.l 24(sp),d0
   1679a:	|  |  |     |      cmp.l (sp),d0
   1679c:	|  |  \-----|----- bgt.s 1675c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1679e:	|  |        |      addq.l #1,4(sp)
   167a2:	|  \--------|----> move.l 16(sp),d0
   167a6:	|           |      cmp.l 4(sp),d0
   167aa:	\-----------|----- bgt.s 16758 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   167ac:	            |      clr.w d0
}
   167ae:	            \----> lea 12(sp),sp
   167b2:	                   rts

000167b4 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   167b4:	             lea -28(sp),sp
   167b8:	             move.l d3,-(sp)
   167ba:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   167bc:	             clr.l 32(sp)
   167c0:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   167c4:	             movea.l 40(sp),a0
   167c8:	             move.l (a0),d0
   167ca:	             move.l d0,d1
   167cc:	             subq.l #1,d1
   167ce:	             move.l d1,28(sp)
   167d2:	   /-------- bra.w 169cc <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   167d6:	/--|-------> movea.l 1cada <currentFloor>,a0
   167dc:	|  |         move.l 4(a0),d1
   167e0:	|  |         movea.l 40(sp),a0
   167e4:	|  |         movea.l 4(a0),a0
   167e8:	|  |         move.l 32(sp),d0
   167ec:	|  |         add.l d0,d0
   167ee:	|  |         add.l d0,d0
   167f0:	|  |         adda.l d0,a0
   167f2:	|  |         move.l (a0),d0
   167f4:	|  |         lsl.l #3,d0
   167f6:	|  |         movea.l d1,a0
   167f8:	|  |         adda.l d0,a0
   167fa:	|  |         move.l (a0),d0
   167fc:	|  |         move.l d0,-(sp)
   167fe:	|  |         jsr 1767a <__floatsisf>
   16804:	|  |         addq.l #4,sp
   16806:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1680a:	|  |         movea.l 1cada <currentFloor>,a0
   16810:	|  |         move.l 4(a0),d1
   16814:	|  |         movea.l 40(sp),a0
   16818:	|  |         movea.l 4(a0),a0
   1681c:	|  |         move.l 32(sp),d0
   16820:	|  |         add.l d0,d0
   16822:	|  |         add.l d0,d0
   16824:	|  |         adda.l d0,a0
   16826:	|  |         move.l (a0),d0
   16828:	|  |         lsl.l #3,d0
   1682a:	|  |         movea.l d1,a0
   1682c:	|  |         adda.l d0,a0
   1682e:	|  |         move.l 4(a0),d0
   16832:	|  |         move.l d0,-(sp)
   16834:	|  |         jsr 1767a <__floatsisf>
   1683a:	|  |         addq.l #4,sp
   1683c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16840:	|  |         movea.l 1cada <currentFloor>,a0
   16846:	|  |         move.l 4(a0),d1
   1684a:	|  |         movea.l 40(sp),a0
   1684e:	|  |         movea.l 4(a0),a0
   16852:	|  |         move.l 28(sp),d0
   16856:	|  |         add.l d0,d0
   16858:	|  |         add.l d0,d0
   1685a:	|  |         adda.l d0,a0
   1685c:	|  |         move.l (a0),d0
   1685e:	|  |         lsl.l #3,d0
   16860:	|  |         movea.l d1,a0
   16862:	|  |         adda.l d0,a0
   16864:	|  |         move.l (a0),d0
   16866:	|  |         move.l d0,-(sp)
   16868:	|  |         jsr 1767a <__floatsisf>
   1686e:	|  |         addq.l #4,sp
   16870:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16874:	|  |         movea.l 1cada <currentFloor>,a0
   1687a:	|  |         move.l 4(a0),d1
   1687e:	|  |         movea.l 40(sp),a0
   16882:	|  |         movea.l 4(a0),a0
   16886:	|  |         move.l 28(sp),d0
   1688a:	|  |         add.l d0,d0
   1688c:	|  |         add.l d0,d0
   1688e:	|  |         adda.l d0,a0
   16890:	|  |         move.l (a0),d0
   16892:	|  |         lsl.l #3,d0
   16894:	|  |         movea.l d1,a0
   16896:	|  |         adda.l d0,a0
   16898:	|  |         move.l 4(a0),d0
   1689c:	|  |         move.l d0,-(sp)
   1689e:	|  |         jsr 1767a <__floatsisf>
   168a4:	|  |         addq.l #4,sp
   168a6:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   168aa:	|  |         move.l 48(sp),-(sp)
   168ae:	|  |         jsr 1767a <__floatsisf>
   168b4:	|  |         addq.l #4,sp
   168b6:	|  |         move.l d0,-(sp)
   168b8:	|  |         move.l 20(sp),-(sp)
   168bc:	|  |         jsr 1781c <__lesf2>
   168c2:	|  |         addq.l #8,sp
   168c4:	|  |         tst.l d0
   168c6:	|  |     /-- bgt.s 168e6 <pointInFloorPolygon+0x132>
   168c8:	|  |     |   move.l 48(sp),-(sp)
   168cc:	|  |     |   jsr 1767a <__floatsisf>
   168d2:	|  |     |   addq.l #4,sp
   168d4:	|  |     |   move.l d0,-(sp)
   168d6:	|  |     |   move.l 12(sp),-(sp)
   168da:	|  |     |   jsr 177e6 <__gtsf2>
   168e0:	|  |     |   addq.l #8,sp
   168e2:	|  |     |   tst.l d0
   168e4:	|  |  /--|-- bgt.s 16926 <pointInFloorPolygon+0x172>
   168e6:	|  |  |  \-> move.l 48(sp),-(sp)
   168ea:	|  |  |      jsr 1767a <__floatsisf>
   168f0:	|  |  |      addq.l #4,sp
   168f2:	|  |  |      move.l d0,-(sp)
   168f4:	|  |  |      move.l 12(sp),-(sp)
   168f8:	|  |  |      jsr 1781c <__lesf2>
   168fe:	|  |  |      addq.l #8,sp
   16900:	|  |  |      tst.l d0
   16902:	|  |  |  /-- bgt.w 169bc <pointInFloorPolygon+0x208>
   16906:	|  |  |  |   move.l 48(sp),-(sp)
   1690a:	|  |  |  |   jsr 1767a <__floatsisf>
   16910:	|  |  |  |   addq.l #4,sp
   16912:	|  |  |  |   move.l d0,-(sp)
   16914:	|  |  |  |   move.l 20(sp),-(sp)
   16918:	|  |  |  |   jsr 177e6 <__gtsf2>
   1691e:	|  |  |  |   addq.l #8,sp
   16920:	|  |  |  |   tst.l d0
   16922:	|  |  |  +-- ble.w 169bc <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16926:	|  |  \--|-> move.l 44(sp),-(sp)
   1692a:	|  |     |   jsr 1767a <__floatsisf>
   16930:	|  |     |   addq.l #4,sp
   16932:	|  |     |   move.l d0,d3
   16934:	|  |     |   move.l 20(sp),-(sp)
   16938:	|  |     |   move.l 16(sp),-(sp)
   1693c:	|  |     |   jsr 1796e <__subsf3>
   16942:	|  |     |   addq.l #8,sp
   16944:	|  |     |   move.l d0,d2
   16946:	|  |     |   move.l 48(sp),-(sp)
   1694a:	|  |     |   jsr 1767a <__floatsisf>
   16950:	|  |     |   addq.l #4,sp
   16952:	|  |     |   move.l 16(sp),-(sp)
   16956:	|  |     |   move.l d0,-(sp)
   16958:	|  |     |   jsr 1796e <__subsf3>
   1695e:	|  |     |   addq.l #8,sp
   16960:	|  |     |   move.l d0,-(sp)
   16962:	|  |     |   move.l d2,-(sp)
   16964:	|  |     |   jsr 1772c <__mulsf3>
   1696a:	|  |     |   addq.l #8,sp
   1696c:	|  |     |   move.l d0,d2
   1696e:	|  |     |   move.l 16(sp),-(sp)
   16972:	|  |     |   move.l 12(sp),-(sp)
   16976:	|  |     |   jsr 1796e <__subsf3>
   1697c:	|  |     |   addq.l #8,sp
   1697e:	|  |     |   move.l d0,-(sp)
   16980:	|  |     |   move.l d2,-(sp)
   16982:	|  |     |   jsr 17530 <__divsf3>
   16988:	|  |     |   addq.l #8,sp
   1698a:	|  |     |   move.l 20(sp),-(sp)
   1698e:	|  |     |   move.l d0,-(sp)
   16990:	|  |     |   jsr 17436 <__addsf3>
   16996:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16998:	|  |     |   move.l d0,-(sp)
   1699a:	|  |     |   move.l d3,-(sp)
   1699c:	|  |     |   jsr 178a0 <__ltsf2>
   169a2:	|  |     |   addq.l #8,sp
   169a4:	|  |     |   tst.l d0
   169a6:	|  |     +-- bge.s 169bc <pointInFloorPolygon+0x208>

			c = !c;
   169a8:	|  |     |   tst.l 24(sp)
   169ac:	|  |     |   seq d0
   169ae:	|  |     |   neg.b d0
   169b0:	|  |     |   move.b d0,d0
   169b2:	|  |     |   andi.l #255,d0
   169b8:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   169bc:	|  |     \-> move.l 32(sp),d0
   169c0:	|  |         move.l d0,d1
   169c2:	|  |         addq.l #1,d1
   169c4:	|  |         move.l d1,32(sp)
   169c8:	|  |         move.l d0,28(sp)
   169cc:	|  \-------> movea.l 40(sp),a0
   169d0:	|            move.l (a0),d0
   169d2:	|            cmp.l 32(sp),d0
   169d6:	\----------- bgt.w 167d6 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   169da:	             tst.l 24(sp)
   169de:	             sne d0
   169e0:	             neg.b d0
   169e2:	             move.b d0,d0
   169e4:	             andi.w #255,d0
}
   169e8:	             move.l (sp)+,d2
   169ea:	             move.l (sp)+,d3
   169ec:	             lea 28(sp),sp
   169f0:	             rts

000169f2 <setFloor>:

BOOL setFloor (int fileNum) {
   169f2:	                               lea -132(sp),sp
   169f6:	                               move.l a6,-(sp)
   169f8:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   169fa:	                               jsr 1665a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16a00:	                               move.l 144(sp),-(sp)
   16a04:	                               jsr 6d92 <openFileFromNum>
   16a0a:	                               addq.l #4,sp
   16a0c:	                               tst.l d0
   16a0e:	                           /-- bne.s 16a16 <setFloor+0x24>
   16a10:	                           |   clr.w d0
   16a12:	/--------------------------|-- bra.w 17162 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16a16:	|                          \-> movea.l 1cada <currentFloor>,a0
   16a1c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16a20:	|                              move.l 1c9a6 <bigDataFile>,118(sp)
   16a28:	|                              move.l 1c9c6 <DOSBase>,d0
   16a2e:	|                              movea.l d0,a6
   16a30:	|                              move.l 118(sp),d1
   16a34:	|                              jsr -306(a6)
   16a38:	|                              move.l d0,114(sp)
   16a3c:	|                              move.l 114(sp),d0
   16a40:	|                              movea.l 1cada <currentFloor>,a0
   16a46:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16a4a:	|                              movea.l 1cada <currentFloor>,a0
   16a50:	|                              move.l 8(a0),d0
   16a54:	|                              lsl.l #3,d0
   16a56:	|                              move.l d0,110(sp)
   16a5a:	|                              clr.l 106(sp)
   16a5e:	|                              move.l 1c9be <SysBase>,d0
   16a64:	|                              movea.l d0,a6
   16a66:	|                              move.l 110(sp),d0
   16a6a:	|                              move.l 106(sp),d1
   16a6e:	|                              jsr -684(a6)
   16a72:	|                              move.l d0,102(sp)
   16a76:	|                              move.l 102(sp),d0
   16a7a:	|                              movea.l 1cada <currentFloor>,a0
   16a80:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16a84:	|                              movea.l 1cada <currentFloor>,a0
   16a8a:	|                              move.l 12(a0),d0
   16a8e:	|                          /-- bne.s 16aa4 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16a90:	|                          |   pea 1a12f <newfatal.c.307beca7+0x147>
   16a96:	|                          |   jsr 17248 <KPrintF>
   16a9c:	|                          |   addq.l #4,sp
		return FALSE;
   16a9e:	|                          |   clr.w d0
   16aa0:	+--------------------------|-- bra.w 17162 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16aa4:	|                          \-> clr.l 136(sp)
   16aa8:	|                    /-------- bra.w 16bc0 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16aac:	|                 /--|-------> move.l 1c9a6 <bigDataFile>,26(sp)
   16ab4:	|                 |  |         move.l 1c9c6 <DOSBase>,d0
   16aba:	|                 |  |         movea.l d0,a6
   16abc:	|                 |  |         move.l 26(sp),d1
   16ac0:	|                 |  |         jsr -306(a6)
   16ac4:	|                 |  |         move.l d0,22(sp)
   16ac8:	|                 |  |         move.l 22(sp),d1
   16acc:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16ad2:	|                 |  |         movea.l 12(a0),a0
   16ad6:	|                 |  |         move.l 136(sp),d0
   16ada:	|                 |  |         lsl.l #3,d0
   16adc:	|                 |  |         adda.l d0,a0
   16ade:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16ae0:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16ae6:	|                 |  |         move.l 12(a0),d1
   16aea:	|                 |  |         move.l 136(sp),d0
   16aee:	|                 |  |         lsl.l #3,d0
   16af0:	|                 |  |         movea.l d1,a0
   16af2:	|                 |  |         adda.l d0,a0
   16af4:	|                 |  |         move.l (a0),d0
   16af6:	|                 |  |         add.l d0,d0
   16af8:	|                 |  |         add.l d0,d0
   16afa:	|                 |  |         move.l d0,18(sp)
   16afe:	|                 |  |         clr.l 14(sp)
   16b02:	|                 |  |         move.l 1c9be <SysBase>,d0
   16b08:	|                 |  |         movea.l d0,a6
   16b0a:	|                 |  |         move.l 18(sp),d0
   16b0e:	|                 |  |         move.l 14(sp),d1
   16b12:	|                 |  |         jsr -684(a6)
   16b16:	|                 |  |         move.l d0,10(sp)
   16b1a:	|                 |  |         move.l 10(sp),d1
   16b1e:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16b24:	|                 |  |         movea.l 12(a0),a0
   16b28:	|                 |  |         move.l 136(sp),d0
   16b2c:	|                 |  |         lsl.l #3,d0
   16b2e:	|                 |  |         adda.l d0,a0
   16b30:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16b34:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16b3a:	|                 |  |         move.l 12(a0),d1
   16b3e:	|                 |  |         move.l 136(sp),d0
   16b42:	|                 |  |         lsl.l #3,d0
   16b44:	|                 |  |         movea.l d1,a0
   16b46:	|                 |  |         adda.l d0,a0
   16b48:	|                 |  |         move.l 4(a0),d0
   16b4c:	|                 |  |     /-- bne.s 16b62 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16b4e:	|                 |  |     |   pea 1a12f <newfatal.c.307beca7+0x147>
   16b54:	|                 |  |     |   jsr 17248 <KPrintF>
   16b5a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16b5c:	|                 |  |     |   clr.w d0
   16b5e:	+-----------------|--|-----|-- bra.w 17162 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b62:	|                 |  |     \-> clr.l 132(sp)
   16b66:	|                 |  |     /-- bra.s 16ba0 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16b68:	|                 |  |  /--|-> move.l 1c9a6 <bigDataFile>,d1
   16b6e:	|                 |  |  |  |   movea.l 1cada <currentFloor>,a0
   16b74:	|                 |  |  |  |   movea.l 12(a0),a0
   16b78:	|                 |  |  |  |   move.l 136(sp),d0
   16b7c:	|                 |  |  |  |   lsl.l #3,d0
   16b7e:	|                 |  |  |  |   adda.l d0,a0
   16b80:	|                 |  |  |  |   movea.l 4(a0),a0
   16b84:	|                 |  |  |  |   move.l 132(sp),d0
   16b88:	|                 |  |  |  |   add.l d0,d0
   16b8a:	|                 |  |  |  |   add.l d0,d0
   16b8c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16b90:	|                 |  |  |  |   move.l d1,-(sp)
   16b92:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16b98:	|                 |  |  |  |   addq.l #4,sp
   16b9a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b9c:	|                 |  |  |  |   addq.l #1,132(sp)
   16ba0:	|                 |  |  |  \-> movea.l 1cada <currentFloor>,a0
   16ba6:	|                 |  |  |      move.l 12(a0),d1
   16baa:	|                 |  |  |      move.l 136(sp),d0
   16bae:	|                 |  |  |      lsl.l #3,d0
   16bb0:	|                 |  |  |      movea.l d1,a0
   16bb2:	|                 |  |  |      adda.l d0,a0
   16bb4:	|                 |  |  |      move.l (a0),d0
   16bb6:	|                 |  |  |      cmp.l 132(sp),d0
   16bba:	|                 |  |  \----- bgt.s 16b68 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bbc:	|                 |  |         addq.l #1,136(sp)
   16bc0:	|                 |  \-------> movea.l 1cada <currentFloor>,a0
   16bc6:	|                 |            move.l 8(a0),d0
   16bca:	|                 |            cmp.l 136(sp),d0
   16bce:	|                 \----------- bgt.w 16aac <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16bd2:	|                              move.l 1c9a6 <bigDataFile>,d0
   16bd8:	|                              move.l d0,-(sp)
   16bda:	|                              jsr 6bc <get2bytes>
   16be0:	|                              addq.l #4,sp
   16be2:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16be6:	|                              move.l 136(sp),d0
   16bea:	|                              lsl.l #3,d0
   16bec:	|                              move.l d0,98(sp)
   16bf0:	|                              clr.l 94(sp)
   16bf4:	|                              move.l 1c9be <SysBase>,d0
   16bfa:	|                              movea.l d0,a6
   16bfc:	|                              move.l 98(sp),d0
   16c00:	|                              move.l 94(sp),d1
   16c04:	|                              jsr -684(a6)
   16c08:	|                              move.l d0,90(sp)
   16c0c:	|                              move.l 90(sp),d0
   16c10:	|                              movea.l 1cada <currentFloor>,a0
   16c16:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16c1a:	|                              movea.l 1cada <currentFloor>,a0
   16c20:	|                              move.l 4(a0),d0
   16c24:	|                          /-- bne.s 16c3a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16c26:	|                          |   pea 1a12f <newfatal.c.307beca7+0x147>
   16c2c:	|                          |   jsr 17248 <KPrintF>
   16c32:	|                          |   addq.l #4,sp
		return FALSE;
   16c34:	|                          |   clr.w d0
   16c36:	+--------------------------|-- bra.w 17162 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16c3a:	|                          \-> clr.l 132(sp)
   16c3e:	|                          /-- bra.s 16c92 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16c40:	|                       /--|-> move.l 1c9a6 <bigDataFile>,d1
   16c46:	|                       |  |   movea.l 1cada <currentFloor>,a0
   16c4c:	|                       |  |   movea.l 4(a0),a0
   16c50:	|                       |  |   move.l 132(sp),d0
   16c54:	|                       |  |   lsl.l #3,d0
   16c56:	|                       |  |   lea (0,a0,d0.l),a2
   16c5a:	|                       |  |   move.l d1,-(sp)
   16c5c:	|                       |  |   jsr 6bc <get2bytes>
   16c62:	|                       |  |   addq.l #4,sp
   16c64:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16c66:	|                       |  |   move.l 1c9a6 <bigDataFile>,d1
   16c6c:	|                       |  |   movea.l 1cada <currentFloor>,a0
   16c72:	|                       |  |   movea.l 4(a0),a0
   16c76:	|                       |  |   move.l 132(sp),d0
   16c7a:	|                       |  |   lsl.l #3,d0
   16c7c:	|                       |  |   lea (0,a0,d0.l),a2
   16c80:	|                       |  |   move.l d1,-(sp)
   16c82:	|                       |  |   jsr 6bc <get2bytes>
   16c88:	|                       |  |   addq.l #4,sp
   16c8a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16c8e:	|                       |  |   addq.l #1,132(sp)
   16c92:	|                       |  \-> move.l 132(sp),d0
   16c96:	|                       |      cmp.l 136(sp),d0
   16c9a:	|                       \----- blt.s 16c40 <setFloor+0x24e>
	}

	finishAccess ();
   16c9c:	|                              jsr 6c8a <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16ca2:	|                              movea.l 1cada <currentFloor>,a0
   16ca8:	|                              move.l 8(a0),d0
   16cac:	|                              add.l d0,d0
   16cae:	|                              add.l d0,d0
   16cb0:	|                              move.l d0,86(sp)
   16cb4:	|                              clr.l 82(sp)
   16cb8:	|                              move.l 1c9be <SysBase>,d0
   16cbe:	|                              movea.l d0,a6
   16cc0:	|                              move.l 86(sp),d0
   16cc4:	|                              move.l 82(sp),d1
   16cc8:	|                              jsr -684(a6)
   16ccc:	|                              move.l d0,78(sp)
   16cd0:	|                              move.l 78(sp),d0
   16cd4:	|                              movea.l 1cada <currentFloor>,a0
   16cda:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cde:	|                              movea.l 1cada <currentFloor>,a0
   16ce4:	|                              move.l 8(a0),d0
   16ce8:	|                              add.l d0,d0
   16cea:	|                              add.l d0,d0
   16cec:	|                              move.l d0,74(sp)
   16cf0:	|                              clr.l 70(sp)
   16cf4:	|                              move.l 1c9be <SysBase>,d0
   16cfa:	|                              movea.l d0,a6
   16cfc:	|                              move.l 74(sp),d0
   16d00:	|                              move.l 70(sp),d1
   16d04:	|                              jsr -684(a6)
   16d08:	|                              move.l d0,66(sp)
   16d0c:	|                              move.l 66(sp),d0
   16d10:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16d14:	|                              movea.l 1cada <currentFloor>,a0
   16d1a:	|                              move.l 16(a0),d0
   16d1e:	|                          /-- bne.s 16d34 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16d20:	|                          |   pea 1a12f <newfatal.c.307beca7+0x147>
   16d26:	|                          |   jsr 17248 <KPrintF>
   16d2c:	|                          |   addq.l #4,sp
		return FALSE;
   16d2e:	|                          |   clr.w d0
   16d30:	+--------------------------|-- bra.w 17162 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d34:	|                          \-> clr.l 136(sp)
   16d38:	|                    /-------- bra.w 16e5c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d3c:	|                 /--|-------> movea.l 1cada <currentFloor>,a0
   16d42:	|                 |  |         move.l 8(a0),d0
   16d46:	|                 |  |         add.l d0,d0
   16d48:	|                 |  |         add.l d0,d0
   16d4a:	|                 |  |         move.l d0,50(sp)
   16d4e:	|                 |  |         clr.l 46(sp)
   16d52:	|                 |  |         move.l 1c9be <SysBase>,d0
   16d58:	|                 |  |         movea.l d0,a6
   16d5a:	|                 |  |         move.l 50(sp),d0
   16d5e:	|                 |  |         move.l 46(sp),d1
   16d62:	|                 |  |         jsr -684(a6)
   16d66:	|                 |  |         move.l d0,42(sp)
   16d6a:	|                 |  |         move.l 42(sp),d0
   16d6e:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16d74:	|                 |  |         movea.l 16(a0),a0
   16d78:	|                 |  |         move.l 136(sp),d1
   16d7c:	|                 |  |         add.l d1,d1
   16d7e:	|                 |  |         add.l d1,d1
   16d80:	|                 |  |         adda.l d1,a0
   16d82:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d84:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16d8a:	|                 |  |         move.l 8(a0),d0
   16d8e:	|                 |  |         add.l d0,d0
   16d90:	|                 |  |         add.l d0,d0
   16d92:	|                 |  |         move.l d0,38(sp)
   16d96:	|                 |  |         clr.l 34(sp)
   16d9a:	|                 |  |         move.l 1c9be <SysBase>,d0
   16da0:	|                 |  |         movea.l d0,a6
   16da2:	|                 |  |         move.l 38(sp),d0
   16da6:	|                 |  |         move.l 34(sp),d1
   16daa:	|                 |  |         jsr -684(a6)
   16dae:	|                 |  |         move.l d0,30(sp)
   16db2:	|                 |  |         move.l 30(sp),d1
   16db6:	|                 |  |         move.l 136(sp),d0
   16dba:	|                 |  |         add.l d0,d0
   16dbc:	|                 |  |         add.l d0,d0
   16dbe:	|                 |  |         movea.l 62(sp),a0
   16dc2:	|                 |  |         adda.l d0,a0
   16dc4:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16dc6:	|                 |  |         movea.l 1cada <currentFloor>,a0
   16dcc:	|                 |  |         move.l 16(a0),d1
   16dd0:	|                 |  |         move.l 136(sp),d0
   16dd4:	|                 |  |         add.l d0,d0
   16dd6:	|                 |  |         add.l d0,d0
   16dd8:	|                 |  |         movea.l d1,a0
   16dda:	|                 |  |         adda.l d0,a0
   16ddc:	|                 |  |         move.l (a0),d0
   16dde:	|                 |  |     /-- bne.s 16df4 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16de0:	|                 |  |     |   pea 1a12f <newfatal.c.307beca7+0x147>
   16de6:	|                 |  |     |   jsr 17248 <KPrintF>
   16dec:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16dee:	|                 |  |     |   clr.w d0
   16df0:	+-----------------|--|-----|-- bra.w 17162 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16df4:	|                 |  |     \-> clr.l 132(sp)
   16df8:	|                 |  |     /-- bra.s 16e48 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16dfa:	|                 |  |  /--|-> movea.l 1cada <currentFloor>,a0
   16e00:	|                 |  |  |  |   move.l 16(a0),d1
   16e04:	|                 |  |  |  |   move.l 136(sp),d0
   16e08:	|                 |  |  |  |   add.l d0,d0
   16e0a:	|                 |  |  |  |   add.l d0,d0
   16e0c:	|                 |  |  |  |   movea.l d1,a0
   16e0e:	|                 |  |  |  |   adda.l d0,a0
   16e10:	|                 |  |  |  |   move.l (a0),d1
   16e12:	|                 |  |  |  |   move.l 132(sp),d0
   16e16:	|                 |  |  |  |   add.l d0,d0
   16e18:	|                 |  |  |  |   add.l d0,d0
   16e1a:	|                 |  |  |  |   movea.l d1,a0
   16e1c:	|                 |  |  |  |   adda.l d0,a0
   16e1e:	|                 |  |  |  |   moveq #-1,d1
   16e20:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16e22:	|                 |  |  |  |   move.l 136(sp),d0
   16e26:	|                 |  |  |  |   add.l d0,d0
   16e28:	|                 |  |  |  |   add.l d0,d0
   16e2a:	|                 |  |  |  |   movea.l 62(sp),a0
   16e2e:	|                 |  |  |  |   adda.l d0,a0
   16e30:	|                 |  |  |  |   move.l (a0),d1
   16e32:	|                 |  |  |  |   move.l 132(sp),d0
   16e36:	|                 |  |  |  |   add.l d0,d0
   16e38:	|                 |  |  |  |   add.l d0,d0
   16e3a:	|                 |  |  |  |   movea.l d1,a0
   16e3c:	|                 |  |  |  |   adda.l d0,a0
   16e3e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e44:	|                 |  |  |  |   addq.l #1,132(sp)
   16e48:	|                 |  |  |  \-> movea.l 1cada <currentFloor>,a0
   16e4e:	|                 |  |  |      move.l 8(a0),d0
   16e52:	|                 |  |  |      cmp.l 132(sp),d0
   16e56:	|                 |  |  \----- bgt.s 16dfa <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e58:	|                 |  |         addq.l #1,136(sp)
   16e5c:	|                 |  \-------> movea.l 1cada <currentFloor>,a0
   16e62:	|                 |            move.l 8(a0),d0
   16e66:	|                 |            cmp.l 136(sp),d0
   16e6a:	|                 \----------- bgt.w 16d3c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e6e:	|                              clr.l 136(sp)
   16e72:	|              /-------------- bra.w 16f78 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e76:	|           /--|-------------> clr.l 132(sp)
   16e7a:	|           |  |     /-------- bra.w 16f62 <setFloor+0x570>
			if (i != j) {
   16e7e:	|           |  |  /--|-------> move.l 136(sp),d0
   16e82:	|           |  |  |  |         cmp.l 132(sp),d0
   16e86:	|           |  |  |  |     /-- beq.w 16f18 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16e8a:	|           |  |  |  |     |   movea.l 1cada <currentFloor>,a0
   16e90:	|           |  |  |  |     |   move.l 12(a0),d1
   16e94:	|           |  |  |  |     |   move.l 132(sp),d0
   16e98:	|           |  |  |  |     |   lsl.l #3,d0
   16e9a:	|           |  |  |  |     |   movea.l d1,a1
   16e9c:	|           |  |  |  |     |   adda.l d0,a1
   16e9e:	|           |  |  |  |     |   movea.l 1cada <currentFloor>,a0
   16ea4:	|           |  |  |  |     |   move.l 12(a0),d1
   16ea8:	|           |  |  |  |     |   move.l 136(sp),d0
   16eac:	|           |  |  |  |     |   lsl.l #3,d0
   16eae:	|           |  |  |  |     |   movea.l d1,a0
   16eb0:	|           |  |  |  |     |   adda.l d0,a0
   16eb2:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16eb6:	|           |  |  |  |     |   move.l (a1),-(sp)
   16eb8:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16ebc:	|           |  |  |  |     |   move.l (a0),-(sp)
   16ebe:	|           |  |  |  |     |   jsr 1674a <polysShareSide>
   16ec4:	|           |  |  |  |     |   lea 16(sp),sp
   16ec8:	|           |  |  |  |     |   tst.w d0
   16eca:	|           |  |  |  |  /--|-- beq.w 16f5e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16ece:	|           |  |  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16ed4:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16ed8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16edc:	|           |  |  |  |  |  |   add.l d0,d0
   16ede:	|           |  |  |  |  |  |   add.l d0,d0
   16ee0:	|           |  |  |  |  |  |   movea.l d1,a0
   16ee2:	|           |  |  |  |  |  |   adda.l d0,a0
   16ee4:	|           |  |  |  |  |  |   move.l (a0),d1
   16ee6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16eea:	|           |  |  |  |  |  |   add.l d0,d0
   16eec:	|           |  |  |  |  |  |   add.l d0,d0
   16eee:	|           |  |  |  |  |  |   movea.l d1,a0
   16ef0:	|           |  |  |  |  |  |   adda.l d0,a0
   16ef2:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16ef6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16efa:	|           |  |  |  |  |  |   add.l d0,d0
   16efc:	|           |  |  |  |  |  |   add.l d0,d0
   16efe:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16f02:	|           |  |  |  |  |  |   adda.l d0,a0
   16f04:	|           |  |  |  |  |  |   move.l (a0),d1
   16f06:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f0a:	|           |  |  |  |  |  |   add.l d0,d0
   16f0c:	|           |  |  |  |  |  |   add.l d0,d0
   16f0e:	|           |  |  |  |  |  |   movea.l d1,a0
   16f10:	|           |  |  |  |  |  |   adda.l d0,a0
   16f12:	|           |  |  |  |  |  |   moveq #1,d1
   16f14:	|           |  |  |  |  |  |   move.l d1,(a0)
   16f16:	|           |  |  |  |  +--|-- bra.s 16f5e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16f18:	|           |  |  |  |  |  \-> movea.l 1cada <currentFloor>,a0
   16f1e:	|           |  |  |  |  |      move.l 16(a0),d1
   16f22:	|           |  |  |  |  |      move.l 136(sp),d0
   16f26:	|           |  |  |  |  |      add.l d0,d0
   16f28:	|           |  |  |  |  |      add.l d0,d0
   16f2a:	|           |  |  |  |  |      movea.l d1,a0
   16f2c:	|           |  |  |  |  |      adda.l d0,a0
   16f2e:	|           |  |  |  |  |      move.l (a0),d1
   16f30:	|           |  |  |  |  |      move.l 132(sp),d0
   16f34:	|           |  |  |  |  |      add.l d0,d0
   16f36:	|           |  |  |  |  |      add.l d0,d0
   16f38:	|           |  |  |  |  |      movea.l d1,a0
   16f3a:	|           |  |  |  |  |      adda.l d0,a0
   16f3c:	|           |  |  |  |  |      moveq #-2,d0
   16f3e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16f40:	|           |  |  |  |  |      move.l 136(sp),d0
   16f44:	|           |  |  |  |  |      add.l d0,d0
   16f46:	|           |  |  |  |  |      add.l d0,d0
   16f48:	|           |  |  |  |  |      movea.l 62(sp),a0
   16f4c:	|           |  |  |  |  |      adda.l d0,a0
   16f4e:	|           |  |  |  |  |      move.l (a0),d1
   16f50:	|           |  |  |  |  |      move.l 132(sp),d0
   16f54:	|           |  |  |  |  |      add.l d0,d0
   16f56:	|           |  |  |  |  |      add.l d0,d0
   16f58:	|           |  |  |  |  |      movea.l d1,a0
   16f5a:	|           |  |  |  |  |      adda.l d0,a0
   16f5c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f5e:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16f62:	|           |  |  |  \-------> movea.l 1cada <currentFloor>,a0
   16f68:	|           |  |  |            move.l 8(a0),d0
   16f6c:	|           |  |  |            cmp.l 132(sp),d0
   16f70:	|           |  |  \----------- bgt.w 16e7e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f74:	|           |  |               addq.l #1,136(sp)
   16f78:	|           |  \-------------> movea.l 1cada <currentFloor>,a0
   16f7e:	|           |                  move.l 8(a0),d0
   16f82:	|           |                  cmp.l 136(sp),d0
   16f86:	|           \----------------- bgt.w 16e76 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16f8a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16f8e:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16f92:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f96:	|  |                           clr.l 136(sp)
   16f9a:	|  |     /-------------------- bra.w 170f0 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f9e:	|  |  /--|-------------------> clr.l 132(sp)
   16fa2:	|  |  |  |     /-------------- bra.w 170da <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16fa6:	|  |  |  |  /--|-------------> movea.l 1cada <currentFloor>,a0
   16fac:	|  |  |  |  |  |               move.l 16(a0),d1
   16fb0:	|  |  |  |  |  |               move.l 136(sp),d0
   16fb4:	|  |  |  |  |  |               add.l d0,d0
   16fb6:	|  |  |  |  |  |               add.l d0,d0
   16fb8:	|  |  |  |  |  |               movea.l d1,a0
   16fba:	|  |  |  |  |  |               adda.l d0,a0
   16fbc:	|  |  |  |  |  |               move.l (a0),d1
   16fbe:	|  |  |  |  |  |               move.l 132(sp),d0
   16fc2:	|  |  |  |  |  |               add.l d0,d0
   16fc4:	|  |  |  |  |  |               add.l d0,d0
   16fc6:	|  |  |  |  |  |               movea.l d1,a0
   16fc8:	|  |  |  |  |  |               adda.l d0,a0
   16fca:	|  |  |  |  |  |               move.l (a0),d0
   16fcc:	|  |  |  |  |  |               moveq #-1,d1
   16fce:	|  |  |  |  |  |               cmp.l d0,d1
   16fd0:	|  |  |  |  |  |  /----------- bne.w 170d6 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16fd4:	|  |  |  |  |  |  |            clr.l 122(sp)
   16fd8:	|  |  |  |  |  |  |     /----- bra.w 170c4 <setFloor+0x6d2>
						if (d != i && d != j) {
   16fdc:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16fe0:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16fe4:	|  |  |  |  |  |  |  |  |  /-- beq.w 170c0 <setFloor+0x6ce>
   16fe8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16fec:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16ff0:	|  |  |  |  |  |  |  |  |  +-- beq.w 170c0 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16ff4:	|  |  |  |  |  |  |  |  |  |   movea.l 1cada <currentFloor>,a0
   16ffa:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16ffe:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17002:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17004:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17006:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17008:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1700a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1700c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17010:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17012:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17014:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17016:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17018:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1701a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1701e:	|  |  |  |  |  |  |  |  |  +-- bne.w 170c0 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17022:	|  |  |  |  |  |  |  |  |  |   movea.l 1cada <currentFloor>,a0
   17028:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1702c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17030:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17032:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17034:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17036:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17038:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1703a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1703e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17040:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17042:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17044:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17046:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17048:	|  |  |  |  |  |  |  |  |  +-- bmi.s 170c0 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1704a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1704e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17050:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17052:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17056:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17058:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1705a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1705e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17060:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17062:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17064:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17066:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17068:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1706c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 170c0 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1706e:	|  |  |  |  |  |  |  |  |  |   movea.l 1cada <currentFloor>,a0
   17074:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17078:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1707c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1707e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17080:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17082:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17084:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17086:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1708a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17090:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17092:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17096:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1709a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1709c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1709e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170a2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170a4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170a6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170b0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170b2:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   170b6:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   170b8:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   170ba:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   170c0:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   170c4:	|  |  |  |  |  |  |  |  \----> movea.l 1cada <currentFloor>,a0
   170ca:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   170ce:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   170d2:	|  |  |  |  |  |  |  \-------- bgt.w 16fdc <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170d6:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   170da:	|  |  |  |  |  \-------------> movea.l 1cada <currentFloor>,a0
   170e0:	|  |  |  |  |                  move.l 8(a0),d0
   170e4:	|  |  |  |  |                  cmp.l 132(sp),d0
   170e8:	|  |  |  |  \----------------- bgt.w 16fa6 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170ec:	|  |  |  |                     addq.l #1,136(sp)
   170f0:	|  |  |  \-------------------> movea.l 1cada <currentFloor>,a0
   170f6:	|  |  |                        move.l 8(a0),d0
   170fa:	|  |  |                        cmp.l 136(sp),d0
   170fe:	|  |  \----------------------- bgt.w 16f9e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17102:	|  |                           tst.w 130(sp)
   17106:	|  \-------------------------- bne.w 16f8e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1710a:	|                              clr.l 136(sp)
   1710e:	|                          /-- bra.s 17136 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17110:	|                       /--|-> move.l 136(sp),d0
   17114:	|                       |  |   add.l d0,d0
   17116:	|                       |  |   add.l d0,d0
   17118:	|                       |  |   movea.l 62(sp),a0
   1711c:	|                       |  |   adda.l d0,a0
   1711e:	|                       |  |   move.l (a0),54(sp)
   17122:	|                       |  |   move.l 1c9be <SysBase>,d0
   17128:	|                       |  |   movea.l d0,a6
   1712a:	|                       |  |   movea.l 54(sp),a1
   1712e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17132:	|                       |  |   addq.l #1,136(sp)
   17136:	|                       |  \-> movea.l 1cada <currentFloor>,a0
   1713c:	|                       |      move.l 8(a0),d0
   17140:	|                       |      cmp.l 136(sp),d0
   17144:	|                       \----- bgt.s 17110 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17146:	|                              move.l 62(sp),58(sp)
   1714c:	|                              move.l 1c9be <SysBase>,d0
   17152:	|                              movea.l d0,a6
   17154:	|                              movea.l 58(sp),a1
   17158:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1715c:	|                              clr.l 62(sp)

	return TRUE;
   17160:	|                              moveq #1,d0
}
   17162:	\----------------------------> movea.l (sp)+,a2
   17164:	                               movea.l (sp)+,a6
   17166:	                               lea 132(sp),sp
   1716a:	                               rts

0001716c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1716c:	jsr 1665a <killFloor>
	noFloor ();
   17172:	jsr 1657e <noFloor>
   17178:	nop
   1717a:	rts

0001717c <WaitVbl>:
void WaitVbl() {
   1717c:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1717e:	   /-> movea.l #14675972,a0
   17184:	   |   move.l (a0),d0
   17186:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17188:	   |   move.l (sp),d0
   1718a:	   |   andi.l #130816,d0
   17190:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17192:	   |   move.l (sp),d0
   17194:	   |   cmpi.l #76800,d0
   1719a:	   \-- beq.s 1717e <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1719c:	/----> movea.l #14675972,a0
   171a2:	|      move.l (a0),d0
   171a4:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   171a8:	|      move.l 4(sp),d0
   171ac:	|      andi.l #130816,d0
   171b2:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   171b6:	|      move.l 4(sp),d0
   171ba:	|      cmpi.l #76800,d0
   171c0:	|  /-- beq.s 171c4 <WaitVbl+0x48>
	while (1) {
   171c2:	\--|-- bra.s 1719c <WaitVbl+0x20>
			break;
   171c4:	   \-> nop
}
   171c6:	       nop
   171c8:	       addq.l #8,sp
   171ca:	       rts

000171cc <memset>:
void* memset(void *dest, int val, unsigned long len) {
   171cc:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   171ce:	       move.l 8(sp),(sp)
	while(len-- > 0)
   171d2:	   /-- bra.s 171e4 <memset+0x18>
		*ptr++ = val;
   171d4:	/--|-> move.l (sp),d0
   171d6:	|  |   move.l d0,d1
   171d8:	|  |   addq.l #1,d1
   171da:	|  |   move.l d1,(sp)
   171dc:	|  |   move.l 12(sp),d1
   171e0:	|  |   movea.l d0,a0
   171e2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   171e4:	|  \-> move.l 16(sp),d0
   171e8:	|      move.l d0,d1
   171ea:	|      subq.l #1,d1
   171ec:	|      move.l d1,16(sp)
   171f0:	|      tst.l d0
   171f2:	\----- bne.s 171d4 <memset+0x8>
	return dest;
   171f4:	       move.l 8(sp),d0
}
   171f8:	       addq.l #4,sp
   171fa:	       rts

000171fc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   171fc:	       subq.l #8,sp
   171fe:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17200:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17206:	       move.l 20(sp),4(sp)
	while(len--)
   1720c:	   /-- bra.s 1722e <memcpy+0x32>
		*d++ = *s++;
   1720e:	/--|-> move.l 4(sp),d1
   17212:	|  |   move.l d1,d0
   17214:	|  |   addq.l #1,d0
   17216:	|  |   move.l d0,4(sp)
   1721a:	|  |   move.l 8(sp),d0
   1721e:	|  |   move.l d0,d2
   17220:	|  |   addq.l #1,d2
   17222:	|  |   move.l d2,8(sp)
   17226:	|  |   movea.l d1,a0
   17228:	|  |   move.b (a0),d1
   1722a:	|  |   movea.l d0,a0
   1722c:	|  |   move.b d1,(a0)
	while(len--)
   1722e:	|  \-> move.l 24(sp),d0
   17232:	|      move.l d0,d1
   17234:	|      subq.l #1,d1
   17236:	|      move.l d1,24(sp)
   1723a:	|      tst.l d0
   1723c:	\----- bne.s 1720e <memcpy+0x12>
	return dest;
   1723e:	       move.l 16(sp),d0
}
   17242:	       move.l (sp)+,d2
   17244:	       addq.l #8,sp
   17246:	       rts

00017248 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17248:	       lea -128(sp),sp
   1724c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17250:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>,d0
   17256:	       cmpi.w #20153,d0
   1725a:	   /-- beq.s 1727e <KPrintF+0x36>
   1725c:	   |   cmpi.w #-24562,d0
   17260:	   +-- beq.s 1727e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17262:	   |   movea.l 1c9be <SysBase>,a6
   17268:	   |   movea.l 144(sp),a0
   1726c:	   |   lea 148(sp),a1
   17270:	   |   lea 17d04 <KPutCharX>,a2
   17276:	   |   suba.l a3,a3
   17278:	   |   jsr -522(a6)
}
   1727c:	/--|-- bra.s 172a8 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1727e:	|  \-> movea.l 1c9be <SysBase>,a6
   17284:	|      movea.l 144(sp),a0
   17288:	|      lea 148(sp),a1
   1728c:	|      lea 17d12 <PutChar>,a2
   17292:	|      lea 12(sp),a3
   17296:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1729a:	|      move.l a3,-(sp)
   1729c:	|      pea 56 <_start+0x56>
   172a0:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172a6:	|      addq.l #8,sp
}
   172a8:	\----> movem.l (sp)+,a2-a3/a6
   172ac:	       lea 128(sp),sp
   172b0:	       rts

000172b2 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   172b2:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   172b4:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   172ba:	       movea.l (sp),a0
   172bc:	       move.w (a0),d0
   172be:	       cmpi.w #20153,d0
   172c2:	   /-- beq.s 172ce <debug_cmd+0x1c>
   172c4:	   |   movea.l (sp),a0
   172c6:	   |   move.w (a0),d0
   172c8:	   |   cmpi.w #-24562,d0
   172cc:	/--|-- bne.s 172ec <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   172ce:	|  \-> move.l 20(sp),-(sp)
   172d2:	|      move.l 20(sp),-(sp)
   172d6:	|      move.l 20(sp),-(sp)
   172da:	|      move.l 20(sp),-(sp)
   172de:	|      pea 58 <_start+0x58>
   172e2:	|      movea.l 20(sp),a0
   172e6:	|      jsr (a0)
   172e8:	|      lea 20(sp),sp
	}
}
   172ec:	\----> nop
   172ee:	       addq.l #4,sp
   172f0:	       rts

000172f2 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   172f2:	       move.l d2,-(sp)
	while(*source && --num > 0)
   172f4:	   /-- bra.s 17316 <my_strncpy+0x24>
		*destination++ = *source++;
   172f6:	/--|-> move.l 12(sp),d1
   172fa:	|  |   move.l d1,d0
   172fc:	|  |   addq.l #1,d0
   172fe:	|  |   move.l d0,12(sp)
   17302:	|  |   move.l 8(sp),d0
   17306:	|  |   move.l d0,d2
   17308:	|  |   addq.l #1,d2
   1730a:	|  |   move.l d2,8(sp)
   1730e:	|  |   movea.l d1,a0
   17310:	|  |   move.b (a0),d1
   17312:	|  |   movea.l d0,a0
   17314:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17316:	|  \-> movea.l 12(sp),a0
   1731a:	|      move.b (a0),d0
   1731c:	|  /-- beq.s 17324 <my_strncpy+0x32>
   1731e:	|  |   subq.l #1,16(sp)
   17322:	\--|-- bne.s 172f6 <my_strncpy+0x4>
	*destination = '\0';
   17324:	   \-> movea.l 8(sp),a0
   17328:	       clr.b (a0)
}
   1732a:	       nop
   1732c:	       move.l (sp)+,d2
   1732e:	       rts

00017330 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17330:	    lea -60(sp),sp
   17334:	    movea.l 72(sp),a1
   17338:	    movea.l 76(sp),a0
   1733c:	    move.l 80(sp),d1
   17340:	    move.l 84(sp),d0
   17344:	    movea.w a1,a1
   17346:	    move.w a1,8(sp)
   1734a:	    movea.w a0,a0
   1734c:	    move.w a0,6(sp)
   17350:	    move.w d1,d1
   17352:	    move.w d1,4(sp)
   17356:	    move.w d0,d0
   17358:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1735c:	    lea 10(sp),a0
   17360:	    clr.l (a0)
   17362:	    addq.l #4,a0
   17364:	    clr.l (a0)
   17366:	    addq.l #4,a0
   17368:	    clr.l (a0)
   1736a:	    addq.l #4,a0
   1736c:	    clr.l (a0)
   1736e:	    addq.l #4,a0
   17370:	    clr.l (a0)
   17372:	    addq.l #4,a0
   17374:	    clr.l (a0)
   17376:	    addq.l #4,a0
   17378:	    clr.l (a0)
   1737a:	    addq.l #4,a0
   1737c:	    clr.l (a0)
   1737e:	    addq.l #4,a0
   17380:	    clr.l (a0)
   17382:	    addq.l #4,a0
   17384:	    clr.l (a0)
   17386:	    addq.l #4,a0
   17388:	    clr.l (a0)
   1738a:	    addq.l #4,a0
   1738c:	    clr.l (a0)
   1738e:	    addq.l #4,a0
   17390:	    clr.w (a0)
   17392:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17394:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17398:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1739c:	    move.w 8(sp),d0
   173a0:	/-- bpl.s 173a4 <debug_register_bitmap+0x74>
   173a2:	|   addq.w #7,d0
   173a4:	\-> asr.w #3,d0
   173a6:	    movea.w d0,a0
   173a8:	    movea.w 6(sp),a1
   173ac:	    move.l a1,-(sp)
   173ae:	    move.l a0,-(sp)
   173b0:	    jsr 17bfc <__mulsi3>
   173b6:	    addq.l #8,sp
   173b8:	    movea.w 4(sp),a0
   173bc:	    move.l a0,-(sp)
   173be:	    move.l d0,-(sp)
   173c0:	    jsr 17bfc <__mulsi3>
   173c6:	    addq.l #8,sp
	struct debug_resource resource = {
   173c8:	    move.l d0,14(sp)
   173cc:	    move.w 2(sp),52(sp)
   173d2:	    move.w 8(sp),54(sp)
   173d8:	    move.w 6(sp),56(sp)
   173de:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   173e4:	    moveq #0,d0
   173e6:	    move.w 2(sp),d0
   173ea:	    moveq #2,d1
   173ec:	    and.l d1,d0
   173ee:	/-- beq.s 173fa <debug_register_bitmap+0xca>
		resource.size *= 2;
   173f0:	|   move.l 14(sp),d0
   173f4:	|   add.l d0,d0
   173f6:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   173fa:	\-> pea 20 <_start+0x20>
   173fe:	    move.l 72(sp),-(sp)
   17402:	    lea 18(sp),a0
   17406:	    move.l a0,d0
   17408:	    addq.l #8,d0
   1740a:	    move.l d0,-(sp)
   1740c:	    jsr 172f2 <my_strncpy>
   17412:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17416:	    lea 10(sp),a0
   1741a:	    clr.l -(sp)
   1741c:	    clr.l -(sp)
   1741e:	    move.l a0,-(sp)
   17420:	    pea 4 <_start+0x4>
   17424:	    jsr 172b2 <debug_cmd>
   1742a:	    lea 16(sp),sp
}
   1742e:	    nop
   17430:	    lea 60(sp),sp
   17434:	    rts

00017436 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17436:	lea -12(sp),sp
   1743a:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1743c:	move.l 20(sp),12(sp)
   17442:	move.l 24(sp),8(sp)
   17448:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   1744e:	movea.l d0,a6
   17450:	move.l 12(sp),d0
   17454:	move.l 8(sp),d1
   17458:	jsr -66(a6)
   1745c:	move.l d0,4(sp)
   17460:	move.l 4(sp),d0
}
   17464:	movea.l (sp)+,a6
   17466:	lea 12(sp),sp
   1746a:	rts

0001746c <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1746c:	lea -32(sp),sp
   17470:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17474:	move.l 48(sp),36(sp)
   1747a:	move.l 52(sp),40(sp)
   17480:	move.l 56(sp),28(sp)
   17486:	move.l 60(sp),32(sp)
   1748c:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   17492:	movea.l d0,a6
   17494:	move.l 36(sp),d0
   17498:	move.l 40(sp),d1
   1749c:	move.l 28(sp),d2
   174a0:	move.l 32(sp),d3
   174a4:	jsr -66(a6)
   174a8:	move.l d0,12(sp)
   174ac:	move.l d1,16(sp)
   174b0:	move.l 12(sp),20(sp)
   174b6:	move.l 16(sp),24(sp)
   174bc:	move.l 20(sp),d0
   174c0:	move.l 24(sp),d1
}
   174c4:	movem.l (sp)+,d2-d3/a6
   174c8:	lea 32(sp),sp
   174cc:	rts

000174ce <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   174ce:	lea -32(sp),sp
   174d2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   174d6:	move.l 48(sp),36(sp)
   174dc:	move.l 52(sp),40(sp)
   174e2:	move.l 56(sp),28(sp)
   174e8:	move.l 60(sp),32(sp)
   174ee:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   174f4:	movea.l d0,a6
   174f6:	move.l 36(sp),d0
   174fa:	move.l 40(sp),d1
   174fe:	move.l 28(sp),d2
   17502:	move.l 32(sp),d3
   17506:	jsr -84(a6)
   1750a:	move.l d0,12(sp)
   1750e:	move.l d1,16(sp)
   17512:	move.l 12(sp),20(sp)
   17518:	move.l 16(sp),24(sp)
   1751e:	move.l 20(sp),d0
   17522:	move.l 24(sp),d1
}
   17526:	movem.l (sp)+,d2-d3/a6
   1752a:	lea 32(sp),sp
   1752e:	rts

00017530 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17530:	lea -12(sp),sp
   17534:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17536:	move.l 20(sp),12(sp)
   1753c:	move.l 24(sp),8(sp)
   17542:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   17548:	movea.l d0,a6
   1754a:	move.l 12(sp),d0
   1754e:	move.l 8(sp),d1
   17552:	jsr -84(a6)
   17556:	move.l d0,4(sp)
   1755a:	move.l 4(sp),d0
}
   1755e:	movea.l (sp)+,a6
   17560:	lea 12(sp),sp
   17564:	rts

00017566 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17566:	lea -12(sp),sp
   1756a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1756c:	move.l 20(sp),12(sp)
   17572:	move.l 24(sp),8(sp)
   17578:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   1757e:	movea.l d0,a6
   17580:	move.l 12(sp),d0
   17584:	move.l 8(sp),d1
   17588:	jsr -42(a6)
   1758c:	move.l d0,4(sp)
   17590:	move.l 4(sp),d0
}
   17594:	movea.l (sp)+,a6
   17596:	lea 12(sp),sp
   1759a:	rts

0001759c <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1759c:	lea -20(sp),sp
   175a0:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   175a2:	move.l 28(sp),20(sp)
   175a8:	move.l 1c9da <MathIeeeDoubTransBase>,d0
   175ae:	movea.l d0,a6
   175b0:	move.l 20(sp),d0
   175b4:	jsr -108(a6)
   175b8:	move.l d0,4(sp)
   175bc:	move.l d1,8(sp)
   175c0:	move.l 4(sp),12(sp)
   175c6:	move.l 8(sp),16(sp)
   175cc:	move.l 12(sp),d0
   175d0:	move.l 16(sp),d1
}
   175d4:	movea.l (sp)+,a6
   175d6:	lea 20(sp),sp
   175da:	rts

000175dc <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   175dc:	lea -12(sp),sp
   175e0:	move.l a6,-(sp)
	return IEEEDPFix(value);
   175e2:	move.l 20(sp),8(sp)
   175e8:	move.l 24(sp),12(sp)
   175ee:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   175f4:	movea.l d0,a6
   175f6:	move.l 8(sp),d0
   175fa:	move.l 12(sp),d1
   175fe:	jsr -30(a6)
   17602:	move.l d0,4(sp)
   17606:	move.l 4(sp),d0
}
   1760a:	movea.l (sp)+,a6
   1760c:	lea 12(sp),sp
   17610:	rts

00017612 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17612:	subq.l #8,sp
   17614:	move.l a6,-(sp)
	return IEEESPFix(value);
   17616:	move.l 16(sp),8(sp)
   1761c:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   17622:	movea.l d0,a6
   17624:	move.l 8(sp),d0
   17628:	jsr -30(a6)
   1762c:	move.l d0,4(sp)
   17630:	move.l 4(sp),d0
}
   17634:	movea.l (sp)+,a6
   17636:	addq.l #8,sp
   17638:	rts

0001763a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1763a:	lea -20(sp),sp
   1763e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17640:	move.l 28(sp),20(sp)
   17646:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   1764c:	movea.l d0,a6
   1764e:	move.l 20(sp),d0
   17652:	jsr -36(a6)
   17656:	move.l d0,4(sp)
   1765a:	move.l d1,8(sp)
   1765e:	move.l 4(sp),12(sp)
   17664:	move.l 8(sp),16(sp)
   1766a:	move.l 12(sp),d0
   1766e:	move.l 16(sp),d1
}
   17672:	movea.l (sp)+,a6
   17674:	lea 20(sp),sp
   17678:	rts

0001767a <__floatsisf>:

FLOAT __floatsisf(int i) {
   1767a:	subq.l #8,sp
   1767c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1767e:	move.l 16(sp),8(sp)
   17684:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   1768a:	movea.l d0,a6
   1768c:	move.l 8(sp),d0
   17690:	jsr -36(a6)
   17694:	move.l d0,4(sp)
   17698:	move.l 4(sp),d0
}
   1769c:	movea.l (sp)+,a6
   1769e:	addq.l #8,sp
   176a0:	rts

000176a2 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   176a2:	subq.l #8,sp
   176a4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   176a6:	move.l 16(sp),8(sp)
   176ac:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   176b2:	movea.l d0,a6
   176b4:	move.l 8(sp),d0
   176b8:	jsr -36(a6)
   176bc:	move.l d0,4(sp)
   176c0:	move.l 4(sp),d0
}
   176c4:	movea.l (sp)+,a6
   176c6:	addq.l #8,sp
   176c8:	rts

000176ca <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   176ca:	lea -32(sp),sp
   176ce:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   176d2:	move.l 48(sp),36(sp)
   176d8:	move.l 52(sp),40(sp)
   176de:	move.l 56(sp),28(sp)
   176e4:	move.l 60(sp),32(sp)
   176ea:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   176f0:	movea.l d0,a6
   176f2:	move.l 36(sp),d0
   176f6:	move.l 40(sp),d1
   176fa:	move.l 28(sp),d2
   176fe:	move.l 32(sp),d3
   17702:	jsr -78(a6)
   17706:	move.l d0,12(sp)
   1770a:	move.l d1,16(sp)
   1770e:	move.l 12(sp),20(sp)
   17714:	move.l 16(sp),24(sp)
   1771a:	move.l 20(sp),d0
   1771e:	move.l 24(sp),d1
}
   17722:	movem.l (sp)+,d2-d3/a6
   17726:	lea 32(sp),sp
   1772a:	rts

0001772c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1772c:	lea -12(sp),sp
   17730:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17732:	move.l 20(sp),12(sp)
   17738:	move.l 24(sp),8(sp)
   1773e:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   17744:	movea.l d0,a6
   17746:	move.l 12(sp),d0
   1774a:	move.l 8(sp),d1
   1774e:	jsr -78(a6)
   17752:	move.l d0,4(sp)
   17756:	move.l 4(sp),d0
}
   1775a:	movea.l (sp)+,a6
   1775c:	lea 12(sp),sp
   17760:	rts

00017762 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17762:	lea -12(sp),sp
   17766:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17768:	move.l 20(sp),12(sp)
   1776e:	move.l 24(sp),8(sp)
   17774:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   1777a:	movea.l d0,a6
   1777c:	move.l 12(sp),d0
   17780:	move.l 8(sp),d1
   17784:	jsr -42(a6)
   17788:	move.l d0,4(sp)
   1778c:	move.l 4(sp),d0
}
   17790:	movea.l (sp)+,a6
   17792:	lea 12(sp),sp
   17796:	rts

00017798 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17798:	lea -20(sp),sp
   1779c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   177a0:	move.l 36(sp),24(sp)
   177a6:	move.l 40(sp),28(sp)
   177ac:	move.l 44(sp),16(sp)
   177b2:	move.l 48(sp),20(sp)
   177b8:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   177be:	movea.l d0,a6
   177c0:	move.l 24(sp),d0
   177c4:	move.l 28(sp),d1
   177c8:	move.l 16(sp),d2
   177cc:	move.l 20(sp),d3
   177d0:	jsr -42(a6)
   177d4:	move.l d0,12(sp)
   177d8:	move.l 12(sp),d0
}
   177dc:	movem.l (sp)+,d2-d3/a6
   177e0:	lea 20(sp),sp
   177e4:	rts

000177e6 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   177e6:	lea -12(sp),sp
   177ea:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177ec:	move.l 20(sp),12(sp)
   177f2:	move.l 24(sp),8(sp)
   177f8:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   177fe:	movea.l d0,a6
   17800:	move.l 12(sp),d0
   17804:	move.l 8(sp),d1
   17808:	jsr -42(a6)
   1780c:	move.l d0,4(sp)
   17810:	move.l 4(sp),d0
}
   17814:	movea.l (sp)+,a6
   17816:	lea 12(sp),sp
   1781a:	rts

0001781c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1781c:	lea -12(sp),sp
   17820:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17822:	move.l 20(sp),12(sp)
   17828:	move.l 24(sp),8(sp)
   1782e:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   17834:	movea.l d0,a6
   17836:	move.l 12(sp),d0
   1783a:	move.l 8(sp),d1
   1783e:	jsr -42(a6)
   17842:	move.l d0,4(sp)
   17846:	move.l 4(sp),d0
}
   1784a:	movea.l (sp)+,a6
   1784c:	lea 12(sp),sp
   17850:	rts

00017852 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17852:	lea -20(sp),sp
   17856:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1785a:	move.l 36(sp),24(sp)
   17860:	move.l 40(sp),28(sp)
   17866:	move.l 44(sp),16(sp)
   1786c:	move.l 48(sp),20(sp)
   17872:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   17878:	movea.l d0,a6
   1787a:	move.l 24(sp),d0
   1787e:	move.l 28(sp),d1
   17882:	move.l 16(sp),d2
   17886:	move.l 20(sp),d3
   1788a:	jsr -42(a6)
   1788e:	move.l d0,12(sp)
   17892:	move.l 12(sp),d0
}
   17896:	movem.l (sp)+,d2-d3/a6
   1789a:	lea 20(sp),sp
   1789e:	rts

000178a0 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   178a0:	lea -12(sp),sp
   178a4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178a6:	move.l 20(sp),12(sp)
   178ac:	move.l 24(sp),8(sp)
   178b2:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   178b8:	movea.l d0,a6
   178ba:	move.l 12(sp),d0
   178be:	move.l 8(sp),d1
   178c2:	jsr -42(a6)
   178c6:	move.l d0,4(sp)
   178ca:	move.l 4(sp),d0
}
   178ce:	movea.l (sp)+,a6
   178d0:	lea 12(sp),sp
   178d4:	rts

000178d6 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   178d6:	lea -12(sp),sp
   178da:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178dc:	move.l 20(sp),12(sp)
   178e2:	move.l 24(sp),8(sp)
   178e8:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   178ee:	movea.l d0,a6
   178f0:	move.l 12(sp),d0
   178f4:	move.l 8(sp),d1
   178f8:	jsr -42(a6)
   178fc:	move.l d0,4(sp)
   17900:	move.l 4(sp),d0
}
   17904:	movea.l (sp)+,a6
   17906:	lea 12(sp),sp
   1790a:	rts

0001790c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1790c:	lea -32(sp),sp
   17910:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17914:	move.l 48(sp),36(sp)
   1791a:	move.l 52(sp),40(sp)
   17920:	move.l 56(sp),28(sp)
   17926:	move.l 60(sp),32(sp)
   1792c:	move.l 1c9d6 <MathIeeeDoubBasBase>,d0
   17932:	movea.l d0,a6
   17934:	move.l 36(sp),d0
   17938:	move.l 40(sp),d1
   1793c:	move.l 28(sp),d2
   17940:	move.l 32(sp),d3
   17944:	jsr -72(a6)
   17948:	move.l d0,12(sp)
   1794c:	move.l d1,16(sp)
   17950:	move.l 12(sp),20(sp)
   17956:	move.l 16(sp),24(sp)
   1795c:	move.l 20(sp),d0
   17960:	move.l 24(sp),d1
}
   17964:	movem.l (sp)+,d2-d3/a6
   17968:	lea 32(sp),sp
   1796c:	rts

0001796e <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1796e:	lea -12(sp),sp
   17972:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17974:	move.l 20(sp),12(sp)
   1797a:	move.l 24(sp),8(sp)
   17980:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   17986:	movea.l d0,a6
   17988:	move.l 12(sp),d0
   1798c:	move.l 8(sp),d1
   17990:	jsr -72(a6)
   17994:	move.l d0,4(sp)
   17998:	move.l 4(sp),d0
}
   1799c:	movea.l (sp)+,a6
   1799e:	lea 12(sp),sp
   179a2:	rts

000179a4 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   179a4:	lea -12(sp),sp
   179a8:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   179aa:	move.l 20(sp),8(sp)
   179b0:	move.l 24(sp),12(sp)
   179b6:	move.l 1c9da <MathIeeeDoubTransBase>,d0
   179bc:	movea.l d0,a6
   179be:	move.l 8(sp),d0
   179c2:	move.l 12(sp),d1
   179c6:	jsr -102(a6)
   179ca:	move.l d0,4(sp)
   179ce:	move.l 4(sp),d0
}
   179d2:	movea.l (sp)+,a6
   179d4:	lea 12(sp),sp
   179d8:	rts

000179da <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   179da:	subq.l #8,sp
   179dc:	move.l a6,-(sp)
	return IEEESPFix(a);
   179de:	move.l 16(sp),8(sp)
   179e4:	move.l 1c9ce <MathIeeeSingBasBase>,d0
   179ea:	movea.l d0,a6
   179ec:	move.l 8(sp),d0
   179f0:	jsr -30(a6)
   179f4:	move.l d0,4(sp)
   179f8:	move.l 4(sp),d0
}
   179fc:	movea.l (sp)+,a6
   179fe:	addq.l #8,sp
   17a00:	rts

00017a02 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17a02:	       lea -24(sp),sp
   17a06:	       move.l a6,-(sp)
    if (x > 0) {
   17a08:	       clr.l -(sp)
   17a0a:	       move.l 40(sp),-(sp)
   17a0e:	       jsr 177e6 <__gtsf2>
   17a14:	       addq.l #8,sp
   17a16:	       tst.l d0
   17a18:	   /-- ble.s 17a4a <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a1a:	   |   move.l 36(sp),-(sp)
   17a1e:	   |   move.l 36(sp),-(sp)
   17a22:	   |   jsr 17530 <__divsf3>
   17a28:	   |   addq.l #8,sp
   17a2a:	   |   move.l d0,8(sp)
   17a2e:	   |   move.l 1c9d2 <MathIeeeSingTransBase>,d0
   17a34:	   |   movea.l d0,a6
   17a36:	   |   move.l 8(sp),d0
   17a3a:	   |   jsr -30(a6)
   17a3e:	   |   move.l d0,4(sp)
   17a42:	   |   move.l 4(sp),d0
   17a46:	/--|-- bra.w 17baa <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17a4a:	|  \-> clr.l -(sp)
   17a4c:	|      move.l 40(sp),-(sp)
   17a50:	|      jsr 178a0 <__ltsf2>
   17a56:	|      addq.l #8,sp
   17a58:	|      tst.l d0
   17a5a:	|  /-- bge.s 17ace <atan2f+0xcc>
   17a5c:	|  |   clr.l -(sp)
   17a5e:	|  |   move.l 36(sp),-(sp)
   17a62:	|  |   jsr 17762 <__gesf2>
   17a68:	|  |   addq.l #8,sp
   17a6a:	|  |   tst.l d0
   17a6c:	|  +-- blt.s 17ace <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17a6e:	|  |   move.l 36(sp),-(sp)
   17a72:	|  |   move.l 36(sp),-(sp)
   17a76:	|  |   jsr 17530 <__divsf3>
   17a7c:	|  |   addq.l #8,sp
   17a7e:	|  |   move.l d0,24(sp)
   17a82:	|  |   move.l 1c9d2 <MathIeeeSingTransBase>,d0
   17a88:	|  |   movea.l d0,a6
   17a8a:	|  |   move.l 24(sp),d0
   17a8e:	|  |   jsr -30(a6)
   17a92:	|  |   move.l d0,20(sp)
   17a96:	|  |   move.l 20(sp),d0
   17a9a:	|  |   move.l d0,-(sp)
   17a9c:	|  |   jsr 1759c <__extendsfdf2>
   17aa2:	|  |   addq.l #4,sp
   17aa4:	|  |   move.l #1413754136,-(sp)
   17aaa:	|  |   move.l #1074340347,-(sp)
   17ab0:	|  |   move.l d1,-(sp)
   17ab2:	|  |   move.l d0,-(sp)
   17ab4:	|  |   jsr 1746c <__adddf3>
   17aba:	|  |   lea 16(sp),sp
   17abe:	|  |   move.l d1,-(sp)
   17ac0:	|  |   move.l d0,-(sp)
   17ac2:	|  |   jsr 179a4 <__truncdfsf2>
   17ac8:	|  |   addq.l #8,sp
   17aca:	+--|-- bra.w 17baa <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17ace:	|  \-> clr.l -(sp)
   17ad0:	|      move.l 40(sp),-(sp)
   17ad4:	|      jsr 178a0 <__ltsf2>
   17ada:	|      addq.l #8,sp
   17adc:	|      tst.l d0
   17ade:	|  /-- bge.s 17b50 <atan2f+0x14e>
   17ae0:	|  |   clr.l -(sp)
   17ae2:	|  |   move.l 36(sp),-(sp)
   17ae6:	|  |   jsr 178a0 <__ltsf2>
   17aec:	|  |   addq.l #8,sp
   17aee:	|  |   tst.l d0
   17af0:	|  +-- bge.s 17b50 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17af2:	|  |   move.l 36(sp),-(sp)
   17af6:	|  |   move.l 36(sp),-(sp)
   17afa:	|  |   jsr 17530 <__divsf3>
   17b00:	|  |   addq.l #8,sp
   17b02:	|  |   move.l d0,16(sp)
   17b06:	|  |   move.l 1c9d2 <MathIeeeSingTransBase>,d0
   17b0c:	|  |   movea.l d0,a6
   17b0e:	|  |   move.l 16(sp),d0
   17b12:	|  |   jsr -30(a6)
   17b16:	|  |   move.l d0,12(sp)
   17b1a:	|  |   move.l 12(sp),d0
   17b1e:	|  |   move.l d0,-(sp)
   17b20:	|  |   jsr 1759c <__extendsfdf2>
   17b26:	|  |   addq.l #4,sp
   17b28:	|  |   move.l #1413754136,-(sp)
   17b2e:	|  |   move.l #1074340347,-(sp)
   17b34:	|  |   move.l d1,-(sp)
   17b36:	|  |   move.l d0,-(sp)
   17b38:	|  |   jsr 1790c <__subdf3>
   17b3e:	|  |   lea 16(sp),sp
   17b42:	|  |   move.l d1,-(sp)
   17b44:	|  |   move.l d0,-(sp)
   17b46:	|  |   jsr 179a4 <__truncdfsf2>
   17b4c:	|  |   addq.l #8,sp
   17b4e:	+--|-- bra.s 17baa <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17b50:	|  \-> clr.l -(sp)
   17b52:	|      move.l 40(sp),-(sp)
   17b56:	|      jsr 17566 <__eqsf2>
   17b5c:	|      addq.l #8,sp
   17b5e:	|      tst.l d0
   17b60:	|  /-- bne.s 17b7c <atan2f+0x17a>
   17b62:	|  |   clr.l -(sp)
   17b64:	|  |   move.l 36(sp),-(sp)
   17b68:	|  |   jsr 177e6 <__gtsf2>
   17b6e:	|  |   addq.l #8,sp
   17b70:	|  |   tst.l d0
   17b72:	|  +-- ble.s 17b7c <atan2f+0x17a>
        return PI / 2;
   17b74:	|  |   move.l #1070141403,d0
   17b7a:	+--|-- bra.s 17baa <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17b7c:	|  \-> clr.l -(sp)
   17b7e:	|      move.l 40(sp),-(sp)
   17b82:	|      jsr 17566 <__eqsf2>
   17b88:	|      addq.l #8,sp
   17b8a:	|      tst.l d0
   17b8c:	|  /-- bne.s 17ba8 <atan2f+0x1a6>
   17b8e:	|  |   clr.l -(sp)
   17b90:	|  |   move.l 36(sp),-(sp)
   17b94:	|  |   jsr 178a0 <__ltsf2>
   17b9a:	|  |   addq.l #8,sp
   17b9c:	|  |   tst.l d0
   17b9e:	|  +-- bge.s 17ba8 <atan2f+0x1a6>
        return -PI / 2;
   17ba0:	|  |   move.l #-1077342245,d0
   17ba6:	+--|-- bra.s 17baa <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17ba8:	|  \-> moveq #0,d0
    }
}
   17baa:	\----> movea.l (sp)+,a6
   17bac:	       lea 24(sp),sp
   17bb0:	       rts

00017bb2 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17bb2:	lea -24(sp),sp
   17bb6:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17bb8:	move.l 32(sp),20(sp)
   17bbe:	move.l 36(sp),24(sp)
   17bc4:	move.l 1c9da <MathIeeeDoubTransBase>,d0
   17bca:	movea.l d0,a6
   17bcc:	move.l 20(sp),d0
   17bd0:	move.l 24(sp),d1
   17bd4:	jsr -96(a6)
   17bd8:	move.l d0,4(sp)
   17bdc:	move.l d1,8(sp)
   17be0:	move.l 4(sp),12(sp)
   17be6:	move.l 8(sp),16(sp)
   17bec:	move.l 12(sp),d0
   17bf0:	move.l 16(sp),d1
}
   17bf4:	movea.l (sp)+,a6
   17bf6:	lea 24(sp),sp
   17bfa:	rts

00017bfc <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17bfc:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17c00:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c04:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17c08:	mulu.w 8(sp),d1
	addw	d1, d0
   17c0c:	add.w d1,d0
	swap	d0
   17c0e:	swap d0
	clrw	d0
   17c10:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c12:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c16:	mulu.w 10(sp),d1
	addl	d1, d0
   17c1a:	add.l d1,d0
	rts
   17c1c:	rts

00017c1e <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c1e:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c20:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c24:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c28:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c2e:	   /-- bcc.s 17c46 <__udivsi3+0x28>
	movel	d0, d2
   17c30:	   |   move.l d0,d2
	clrw	d2
   17c32:	   |   clr.w d2
	swap	d2
   17c34:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c36:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17c38:	   |   move.w d2,d0
	swap	d0
   17c3a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17c3c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17c40:	   |   divu.w d1,d2
	movew	d2, d0
   17c42:	   |   move.w d2,d0
	jra	6f
   17c44:	/--|-- bra.s 17c76 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17c46:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17c48:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17c4a:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17c4c:	|  |   cmpi.l #65536,d1
	jcc	4b
   17c52:	|  \-- bcc.s 17c48 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17c54:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17c56:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17c5c:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17c5e:	|      mulu.w d0,d1
	swap	d2
   17c60:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17c62:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17c64:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17c66:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17c68:	|  /-- bne.s 17c74 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17c6a:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17c6c:	|  +-- bcs.s 17c74 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17c6e:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17c72:	+--|-- bls.s 17c76 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17c74:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17c76:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17c78:	       rts

00017c7a <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17c7a:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17c7c:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17c7e:	    move.l 12(sp),d1
	jpl	1f
   17c82:	/-- bpl.s 17c88 <__divsi3+0xe>
	negl	d1
   17c84:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17c86:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17c88:	\-> move.l 8(sp),d0
	jpl	2f
   17c8c:	/-- bpl.s 17c92 <__divsi3+0x18>
	negl	d0
   17c8e:	|   neg.l d0
	negb	d2
   17c90:	|   neg.b d2

2:	movel	d1, sp@-
   17c92:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c94:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17c96:	    jsr 17c1e <__udivsi3>
	addql	#8, sp
   17c9c:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17c9e:	    tst.b d2
	jpl	3f
   17ca0:	/-- bpl.s 17ca4 <__divsi3+0x2a>
	negl	d0
   17ca2:	|   neg.l d0

3:	movel	sp@+, d2
   17ca4:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17ca6:	    rts

00017ca8 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17ca8:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17cac:	move.l 4(sp),d0
	movel	d1, sp@-
   17cb0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cb2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17cb4:	jsr 17c7a <__divsi3>
	addql	#8, sp
   17cba:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cbc:	move.l 8(sp),d1
	movel	d1, sp@-
   17cc0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cc2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cc4:	jsr 17bfc <__mulsi3>
	addql	#8, sp
   17cca:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17ccc:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17cd0:	sub.l d0,d1
	movel	d1, d0
   17cd2:	move.l d1,d0
	rts
   17cd4:	rts

00017cd6 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17cd6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17cda:	move.l 4(sp),d0
	movel	d1, sp@-
   17cde:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ce0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17ce2:	jsr 17c1e <__udivsi3>
	addql	#8, sp
   17ce8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cea:	move.l 8(sp),d1
	movel	d1, sp@-
   17cee:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cf0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cf2:	jsr 17bfc <__mulsi3>
	addql	#8, sp
   17cf8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17cfa:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17cfe:	sub.l d0,d1
	movel	d1, d0
   17d00:	move.l d1,d0
	rts
   17d02:	rts

00017d04 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17d04:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17d06:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17d0a:	jsr -516(a6)
    move.l (sp)+, a6
   17d0e:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17d10:	rts

00017d12 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17d12:	move.b d0,(a3)+
	rts
   17d14:	rts
