
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115521,d0
       8:	       subi.l #115521,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c341 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115521,d0
      40:	       subi.l #115521,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c341 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7f0a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115521,d0
      7e:	       subi.l #115521,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c341 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13cb0 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1caf2 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13cc8 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c342 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13cb0 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1caf2 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c342 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13cb0 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1caf2 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d4a <PutChar+0x4>
     35c:	|  |              |   jsr 172a4 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cafa <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cafa <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cafa <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cafa <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cafa <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cafa <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cafa <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17d74 <PutChar+0x2e>
     834:	|   jsr 172a4 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cafa <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17d90 <PutChar+0x4a>
     8a6:	|   jsr 172a4 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cafa <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cafa <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cafa <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cafa <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cafa <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cafa <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cafa <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cafa <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1caf2 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cafa <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13cb0 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cafa <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c9ec <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cab2 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1caae <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c9ec <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 1410 <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c9ec <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9848 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c9ec <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c9f0 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c9f4 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2bd4 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -20(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17db8 <PutChar+0x72>
     e1a:	          jsr 172a4 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1ca08 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17dd1 <PutChar+0x8b>
     e30:	      |   jsr 172a4 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w fe8 <CstBlankScreen+0x1da>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1ca02 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,12(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cafe <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 36(sp),d0
     e5a:	|         sub.l 28(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,10(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 40(sp),d0
     e6c:	|         move.l 32(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,8(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 12(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 12(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 12(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 12(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 12(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 10(sp),d0
     eb0:	|         movea.l 12(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 12(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 12(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1ca08 <CstBackDrop>,d0
     ed2:	|         move.l d0,20(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 28(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 32(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,20(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 8(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 10(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,6(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 10(sp),d0
     f10:	|         muls.w 8(sp),d0
     f14:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17dff <PutChar+0xb9>
     f1e:	|         jsr 172a4 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 16(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 20(sp),d0
     f30:	|  |  |   movea.l 12(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 12(sp),a0
     f3c:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cafe <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,20(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,16(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 16(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 17e1f <PutChar+0xd9>
     f68:	|         jsr 172a4 <KPrintF>
     f6e:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f70:	|         move.w #2,1ca14 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f78:	|         move.l 1ca46 <winWidth>,d0
     f7e:	|         lsr.l #4,d0
     f80:	|         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
     f86:	|         move.l a0,d1
     f88:	|         addq.l #2,d1
     f8a:	|         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
     f90:	|         move.l d0,d0
     f92:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f94:	|         move.l 1ca4a <winHeight>,d0
     f9a:	|         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
     fa0:	|         move.l a0,d1
     fa2:	|         addq.l #2,d1
     fa4:	|         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
     faa:	|         move.l d0,d0
     fac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fae:	|         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
     fb4:	|         move.l a0,d0
     fb6:	|         addq.l #2,d0
     fb8:	|         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
     fbe:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fc0:	|         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
     fc6:	|         move.l a0,d0
     fc8:	|         addq.l #2,d0
     fca:	|         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
     fd0:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
     fd2:	|         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
     fd8:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fda:	|         pea 17e3f <PutChar+0xf9>
     fe0:	|         jsr 172a4 <KPrintF>
     fe6:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
     fe8:	'-------> movea.l (sp)+,a6
     fea:	          lea 20(sp),sp
     fee:	          rts

00000ff0 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     ff0:	       lea -52(sp),sp
     ff4:	       move.l a6,-(sp)
     ff6:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     ff8:	       move.l #400,32(sp)
    1000:	       moveq #2,d0
    1002:	       move.l d0,28(sp)
    1006:	       move.l 1caf2 <SysBase>,d0
    100c:	       movea.l d0,a6
    100e:	       move.l 32(sp),d0
    1012:	       move.l 28(sp),d1
    1016:	       jsr -198(a6)
    101a:	       move.l d0,24(sp)
    101e:	       move.l 24(sp),d0
    1022:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1026:	   ,-- bne.s 1050 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1028:	   |   pea 28 <_start+0x28>
    102c:	   |   pea 17e54 <PutChar+0x10e>
    1032:	   |   jsr 172a4 <KPrintF>
    1038:	   |   addq.l #8,sp
    Exit(1);
    103a:	   |   moveq #1,d1
    103c:	   |   move.l d1,16(sp)
    1040:	   |   move.l 1cafa <DOSBase>,d0
    1046:	   |   movea.l d0,a6
    1048:	   |   move.l 16(sp),d1
    104c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    1050:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1056:	       move.l 56(sp),1ca36 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    105e:	       move.l #115524,52(sp)
  for(int i=0; i<16;i++)
    1066:	       clr.l 48(sp)
    106a:	   ,-- bra.s 1090 <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    106c:	,--|-> move.l 52(sp),d1
    1070:	|  |   move.l d1,d2
    1072:	|  |   addq.l #4,d2
    1074:	|  |   move.l d2,52(sp)
    1078:	|  |   move.l 56(sp),d0
    107c:	|  |   move.l d0,d2
    107e:	|  |   addq.l #4,d2
    1080:	|  |   move.l d2,56(sp)
    1084:	|  |   movea.l d1,a0
    1086:	|  |   move.l (a0),d1
    1088:	|  |   movea.l d0,a0
    108a:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    108c:	|  |   addq.l #1,48(sp)
    1090:	|  '-> moveq #15,d0
    1092:	|      cmp.l 48(sp),d0
    1096:	'----- bge.s 106c <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1098:	       move.l #115588,52(sp)

  for(int i=0; i<12;i++)
    10a0:	       clr.l 44(sp)
    10a4:	   ,-- bra.s 10ca <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    10a6:	,--|-> move.l 52(sp),d1
    10aa:	|  |   move.l d1,d2
    10ac:	|  |   addq.l #4,d2
    10ae:	|  |   move.l d2,52(sp)
    10b2:	|  |   move.l 56(sp),d0
    10b6:	|  |   move.l d0,d2
    10b8:	|  |   addq.l #4,d2
    10ba:	|  |   move.l d2,56(sp)
    10be:	|  |   movea.l d1,a0
    10c0:	|  |   move.l (a0),d1
    10c2:	|  |   movea.l d0,a0
    10c4:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10c6:	|  |   addq.l #1,44(sp)
    10ca:	|  '-> moveq #11,d0
    10cc:	|      cmp.l 44(sp),d0
    10d0:	'----- bge.s 10a6 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10d2:	       move.l #115636,52(sp)
  for(int i=0; i<10;i++)
    10da:	       clr.l 40(sp)
    10de:	   ,-- bra.s 1104 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10e0:	,--|-> move.l 52(sp),d1
    10e4:	|  |   move.l d1,d2
    10e6:	|  |   addq.l #4,d2
    10e8:	|  |   move.l d2,52(sp)
    10ec:	|  |   move.l 56(sp),d0
    10f0:	|  |   move.l d0,d2
    10f2:	|  |   addq.l #4,d2
    10f4:	|  |   move.l d2,56(sp)
    10f8:	|  |   movea.l d1,a0
    10fa:	|  |   move.l (a0),d1
    10fc:	|  |   movea.l d0,a0
    10fe:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1100:	|  |   addq.l #1,40(sp)
    1104:	|  '-> moveq #9,d0
    1106:	|      cmp.l 40(sp),d0
    110a:	'----- bge.s 10e0 <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    110c:	       move.l #115676,52(sp)
  CstClColor = (UWORD *) cl;
    1114:	       move.l 56(sp),1ca2e <CstClColor>
  for(int i=0; i<32;i++)
    111c:	       clr.l 36(sp)
    1120:	   ,-- bra.s 1146 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1122:	,--|-> move.l 52(sp),d1
    1126:	|  |   move.l d1,d2
    1128:	|  |   addq.l #4,d2
    112a:	|  |   move.l d2,52(sp)
    112e:	|  |   move.l 56(sp),d0
    1132:	|  |   move.l d0,d2
    1134:	|  |   addq.l #4,d2
    1136:	|  |   move.l d2,56(sp)
    113a:	|  |   movea.l d1,a0
    113c:	|  |   move.l (a0),d1
    113e:	|  |   movea.l d0,a0
    1140:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1142:	|  |   addq.l #1,36(sp)
    1146:	|  '-> moveq #31,d0
    1148:	|      cmp.l 36(sp),d0
    114c:	'----- bge.s 1122 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    114e:	       moveq #40,d1
    1150:	       cmp.l 64(sp),d1
    1154:	   ,-- bge.s 11b2 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1156:	   |   moveq #-40,d2
    1158:	   |   add.l 64(sp),d2
    115c:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1160:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1166:	   |   move.l 8(sp),d0
    116a:	   |   move.l d0,d1
    116c:	   |   addq.l #2,d1
    116e:	   |   move.l d1,8(sp)
    1172:	   |   movea.l d0,a0
    1174:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1178:	   |   move.l 8(sp),d0
    117c:	   |   move.l d0,d1
    117e:	   |   addq.l #2,d1
    1180:	   |   move.l d1,8(sp)
    1184:	   |   move.l 12(sp),d1
    1188:	   |   movea.l d0,a0
    118a:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    118c:	   |   move.l 8(sp),d0
    1190:	   |   move.l d0,d1
    1192:	   |   addq.l #2,d1
    1194:	   |   move.l d1,8(sp)
    1198:	   |   movea.l d0,a0
    119a:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    119e:	   |   move.l 8(sp),d0
    11a2:	   |   move.l d0,d1
    11a4:	   |   addq.l #2,d1
    11a6:	   |   move.l d1,8(sp)
    11aa:	   |   move.l 12(sp),d1
    11ae:	   |   movea.l d0,a0
    11b0:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    11b2:	   '-> move.l 56(sp),d0
    11b6:	       move.l d0,d1
    11b8:	       addq.l #4,d1
    11ba:	       move.l d1,56(sp)
    11be:	       moveq #-2,d2
    11c0:	       movea.l d0,a0
    11c2:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11c4:	       move.l 20(sp),d0
}
    11c8:	       move.l (sp)+,d2
    11ca:	       movea.l (sp)+,a6
    11cc:	       lea 52(sp),sp
    11d0:	       rts

000011d2 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11d2:	                lea -40(sp),sp
    11d6:	                move.l a6,-(sp)
    11d8:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11da:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11e2:	                pea 17e8f <PutChar+0x149>
    11e8:	                jsr 172a4 <KPrintF>
    11ee:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11f0:	                move.l 1ca26 <CstBackDropBufferApplyStart>,d0
    11f6:	                move.l d0,1ca2a <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11fc:	                move.l 1ca26 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    1204:	                movea.l 44(sp),a0
    1208:	                move.w (a0),d0
    120a:	,-------------- beq.w 1404 <CstDisplayBackDrop+0x232>
    120e:	|               move.l 1ca1a <CstDrawBuffer>,d0
    1214:	+-------------- beq.w 1404 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1218:	|               move.l 1cafe <GfxBase>,d0
    121e:	|               movea.l d0,a6
    1220:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1224:	|               movea.l 16(sp),a0
    1228:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    122e:	|               movea.l 16(sp),a0
    1232:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1238:	|               movea.l 16(sp),a0
    123c:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1242:	|     ,-------- bra.w 13aa <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1246:	|  ,--|-------> move.l 44(sp),d0
    124a:	|  |  |         move.l d0,d1
    124c:	|  |  |         addq.l #2,d1
    124e:	|  |  |         move.l d1,44(sp)
    1252:	|  |  |         movea.l d0,a0
    1254:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1258:	|  |  |         move.l 44(sp),d0
    125c:	|  |  |         move.l d0,d1
    125e:	|  |  |         addq.l #2,d1
    1260:	|  |  |         move.l d1,44(sp)
    1264:	|  |  |         movea.l d0,a0
    1266:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    126a:	|  |  |         move.l 44(sp),d0
    126e:	|  |  |         move.l d0,d1
    1270:	|  |  |         addq.l #2,d1
    1272:	|  |  |         move.l d1,44(sp)
    1276:	|  |  |         movea.l d0,a0
    1278:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    127c:	|  |  |         move.l 44(sp),d0
    1280:	|  |  |         move.l d0,d1
    1282:	|  |  |         addq.l #2,d1
    1284:	|  |  |         move.l d1,44(sp)
    1288:	|  |  |         movea.l d0,a0
    128a:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    128e:	|  |  |         move.l 1ca46 <winWidth>,d0
    1294:	|  |  |         lsr.l #3,d0
    1296:	|  |  |         move.l d0,d1
    1298:	|  |  |         move.w 14(sp),d0
    129c:	|  |  |         add.w d0,d0
    129e:	|  |  |         sub.w d0,d1
    12a0:	|  |  |         movea.l 16(sp),a0
    12a4:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    12a8:	|  |  |         move.l 1ca46 <winWidth>,d0
    12ae:	|  |  |         lsr.l #3,d0
    12b0:	|  |  |         move.l d0,d1
    12b2:	|  |  |         move.w 14(sp),d0
    12b6:	|  |  |         add.w d0,d0
    12b8:	|  |  |         sub.w d0,d1
    12ba:	|  |  |         movea.l 16(sp),a0
    12be:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12c2:	|  |  |         moveq #0,d0
    12c4:	|  |  |         move.w 8(sp),d0
    12c8:	|  |  |         move.l 1ca46 <winWidth>,d1
    12ce:	|  |  |         move.l d1,-(sp)
    12d0:	|  |  |         move.l d0,-(sp)
    12d2:	|  |  |         jsr 17c30 <__mulsi3>
    12d8:	|  |  |         addq.l #8,sp
    12da:	|  |  |         move.l d0,d1
    12dc:	|  |  |         lsr.l #3,d1
    12de:	|  |  |         move.l 1ca08 <CstBackDrop>,d0
    12e4:	|  |  |         add.l d0,d1
    12e6:	|  |  |         moveq #0,d0
    12e8:	|  |  |         move.w 10(sp),d0
    12ec:	|  |  |         move.l d1,d2
    12ee:	|  |  |         add.l d0,d2
    12f0:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12f4:	|  |  |         moveq #0,d0
    12f6:	|  |  |         move.w 8(sp),d0
    12fa:	|  |  |         move.l 1ca46 <winWidth>,d1
    1300:	|  |  |         move.l d1,-(sp)
    1302:	|  |  |         move.l d0,-(sp)
    1304:	|  |  |         jsr 17c30 <__mulsi3>
    130a:	|  |  |         addq.l #8,sp
    130c:	|  |  |         move.l d0,d1
    130e:	|  |  |         lsr.l #3,d1
    1310:	|  |  |         move.l 1ca1a <CstDrawBuffer>,d0
    1316:	|  |  |         add.l d0,d1
    1318:	|  |  |         moveq #0,d0
    131a:	|  |  |         move.w 10(sp),d0
    131e:	|  |  |         move.l d1,d2
    1320:	|  |  |         add.l d0,d2
    1322:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1326:	|  |  |         clr.l 32(sp)
    132a:	|  |  |     ,-- bra.s 13a2 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    132c:	|  |  |  ,--|-> move.l 40(sp),d0
    1330:	|  |  |  |  |   movea.l 16(sp),a0
    1334:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1338:	|  |  |  |  |   move.l 36(sp),d0
    133c:	|  |  |  |  |   movea.l 16(sp),a0
    1340:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1344:	|  |  |  |  |   move.w 12(sp),d0
    1348:	|  |  |  |  |   lsl.w #6,d0
    134a:	|  |  |  |  |   add.w 14(sp),d0
    134e:	|  |  |  |  |   movea.l 16(sp),a0
    1352:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1356:	|  |  |  |  |   move.l 1ca46 <winWidth>,d0
    135c:	|  |  |  |  |   lsr.l #3,d0
    135e:	|  |  |  |  |   move.l 1ca4a <winHeight>,d1
    1364:	|  |  |  |  |   move.l d1,-(sp)
    1366:	|  |  |  |  |   move.l d0,-(sp)
    1368:	|  |  |  |  |   jsr 17c30 <__mulsi3>
    136e:	|  |  |  |  |   addq.l #8,sp
    1370:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1374:	|  |  |  |  |   move.l 1ca46 <winWidth>,d0
    137a:	|  |  |  |  |   lsr.l #3,d0
    137c:	|  |  |  |  |   move.l 1ca4a <winHeight>,d1
    1382:	|  |  |  |  |   move.l d1,-(sp)
    1384:	|  |  |  |  |   move.l d0,-(sp)
    1386:	|  |  |  |  |   jsr 17c30 <__mulsi3>
    138c:	|  |  |  |  |   addq.l #8,sp
    138e:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1392:	|  |  |  |  |   move.l 1cafe <GfxBase>,d0
    1398:	|  |  |  |  |   movea.l d0,a6
    139a:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    139e:	|  |  |  |  |   addq.l #1,32(sp)
    13a2:	|  |  |  |  '-> moveq #4,d0
    13a4:	|  |  |  |      cmp.l 32(sp),d0
    13a8:	|  |  |  '----- bge.s 132c <CstDisplayBackDrop+0x15a>
  while(*cursor)
    13aa:	|  |  '-------> movea.l 44(sp),a0
    13ae:	|  |            move.w (a0),d0
    13b0:	|  '----------- bne.w 1246 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    13b4:	|               move.l 1ca32 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    13bc:	|               move.l 1ca2e <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13c4:	|               clr.l 20(sp)
    13c8:	|           ,-- bra.s 13fa <CstDisplayBackDrop+0x228>
    *tmp++;
    13ca:	|        ,--|-> move.l 24(sp),d0
    13ce:	|        |  |   move.l d0,d1
    13d0:	|        |  |   addq.l #2,d1
    13d2:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13d6:	|        |  |   move.l 28(sp),d1
    13da:	|        |  |   move.l d1,d2
    13dc:	|        |  |   addq.l #2,d2
    13de:	|        |  |   move.l d2,28(sp)
    13e2:	|        |  |   move.l 24(sp),d0
    13e6:	|        |  |   move.l d0,d2
    13e8:	|        |  |   addq.l #2,d2
    13ea:	|        |  |   move.l d2,24(sp)
    13ee:	|        |  |   movea.l d1,a0
    13f0:	|        |  |   move.w (a0),d1
    13f2:	|        |  |   movea.l d0,a0
    13f4:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13f6:	|        |  |   addq.l #1,20(sp)
    13fa:	|        |  '-> moveq #31,d0
    13fc:	|        |      cmp.l 20(sp),d0
    1400:	|        '----- bge.s 13ca <CstDisplayBackDrop+0x1f8>
    1402:	|           ,-- bra.s 1406 <CstDisplayBackDrop+0x234>
    return;
    1404:	'-----------|-> nop
  }
}
    1406:	            '-> move.l (sp)+,d2
    1408:	                movea.l (sp)+,a6
    140a:	                lea 40(sp),sp
    140e:	                rts

00001410 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1410:	lea -20(sp),sp
    1414:	movea.l 24(sp),a0
    1418:	move.l 28(sp),d1
    141c:	move.l 32(sp),d0
    1420:	movea.w a0,a0
    1422:	move.w a0,4(sp)
    1426:	move.w d1,d1
    1428:	move.w d1,2(sp)
    142c:	move.w d0,d0
    142e:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1430:	move.w 2(sp),d0
    1434:	movea.l 36(sp),a0
    1438:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    143a:	move.w 4(sp),d0
    143e:	lsr.w #1,d0
    1440:	movea.l 36(sp),a0
    1444:	addq.l #1,a0
    1446:	move.l d0,d0
    1448:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    144a:	move.w 2(sp),d1
    144e:	move.w (sp),d0
    1450:	movea.l 36(sp),a0
    1454:	addq.l #2,a0
    1456:	add.b d1,d0
    1458:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    145a:	move.w 4(sp),d0
    145e:	andi.w #1,d0
    1462:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1466:	move.w 2(sp),d0
    146a:	add.w (sp),d0
    146c:	move.w d0,d0
    146e:	andi.l #65535,d0
    1474:	asr.l #7,d0
    1476:	move.l d0,d0
    1478:	move.w d0,d1
    147a:	andi.w #2,d1
    147e:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1482:	moveq #0,d0
    1484:	move.w 2(sp),d0
    1488:	asr.l #6,d0
    148a:	move.l d0,d0
    148c:	move.w d0,d1
    148e:	andi.w #4,d1
    1492:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1496:	move.w 18(sp),d1
    149a:	move.w 16(sp),d0
    149e:	add.b d0,d1
    14a0:	move.w 14(sp),d0
    14a4:	movea.l 36(sp),a0
    14a8:	addq.l #3,a0
    14aa:	add.b d1,d0
    14ac:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14ae:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14b4:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14ba:	move.l 10(sp),d0
    14be:	clr.w d0
    14c0:	swap d0
    14c2:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14c6:	move.l 1ca36 <CstClCursor>,d0
    14cc:	movea.l d0,a0
    14ce:	addq.l #2,a0
    14d0:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14d4:	move.l 1ca36 <CstClCursor>,d0
    14da:	movea.l d0,a0
    14dc:	addq.l #6,a0
    14de:	move.w 8(sp),(a0)

}
    14e2:	nop
    14e4:	lea 20(sp),sp
    14e8:	rts

000014ea <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14ea:	    move.w 1ca14 <CstApplyBackDropCounter>,d0
    14f0:	,-- beq.s 1506 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14f2:	|   jsr 11d2 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14f8:	|   move.w 1ca14 <CstApplyBackDropCounter>,d0
    14fe:	|   subq.w #1,d0
    1500:	|   move.w d0,1ca14 <CstApplyBackDropCounter>
  }    
}
    1506:	'-> nop
    1508:	    rts

0000150a <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    150a:	                                                             subq.l #8,sp
    150c:	                                                             movem.l d2-d7/a2-a6,-(sp)
    1510:	                                                             movea.l 56(sp),a3
    1514:	                                                             movea.l 60(sp),a2
    1518:	                                                             move.l 64(sp),d2
    151c:	                                                             move.l 68(sp),d7
    1520:	                                                             movea.w d2,a4
    1522:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1526:	                                                             clr.l -(sp)
    1528:	                                                             pea 1 <_start+0x1>
    152c:	                                                             movea.w 6(a3),a0
    1530:	                                                             move.l a0,-(sp)
    1532:	                                                             movea.w 2(a3),a0
    1536:	                                                             move.l a0,-(sp)
    1538:	                                                             pea 17eab <PutChar+0x165>
    153e:	                                                             move.l 1ca3a <CstZBufferResult>,-(sp)
    1544:	                                                             lea 1738c <debug_register_bitmap>,a5
    154a:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    154c:	                                                             clr.l -(sp)
    154e:	                                                             pea 1 <_start+0x1>
    1552:	                                                             movea.w 6(a3),a0
    1556:	                                                             move.l a0,-(sp)
    1558:	                                                             move.w 2(a3),d0
    155c:	                                                             addi.w #16,d0
    1560:	                                                             movea.w d0,a0
    1562:	                                                             move.l a0,-(sp)
    1564:	                                                             pea 17eb6 <PutChar+0x170>
    156a:	                                                             move.l 1ca3e <CstZBufferWork>,-(sp)
    1570:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    1572:	                                                             lea 48(sp),sp
    1576:	                                                             cmpa.w #0,a2
    157a:	,----------------------------------------------------------- beq.w 1a16 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    157e:	|                                                            move.w d2,48(sp)
    1582:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1584:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1588:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    158a:	|                       ,----------------------------------> move.w a5,d3
    158c:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    158e:	|                       |                                    andi.l #65535,d3
    1594:	|                       |                                    cmp.l 16(a2),d3
    1598:	|                       |  ,-------------------------------- bge.w 1732 <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    159c:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15a0:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15a4:	|                       |  |                                 move.w d6,d0
    15a6:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15aa:	|                       |  |                                 move.w 6(a2),d4
    15ae:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15b0:	|                       |  |                                 cmp.w a4,d6
    15b2:	|                    ,--|--|-------------------------------- bge.w 18aa <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15b6:	|                    |  |  |                                 cmp.w a4,d0
    15b8:	|        ,-----------|--|--|-------------------------------- ble.w 1730 <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15bc:	|        |           |  |  |                                 move.w 50(sp),d0
    15c0:	|        |           |  |  |                                 cmp.w d0,d5
    15c2:	|        |     ,-----|--|--|-------------------------------- blt.w 19f6 <CstDrawZBuffer+0x4ec>
    15c6:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15c8:	|        |     |     |  |  |                                 cmpa.l d3,a0
    15ca:	|        +-----|-----|--|--|-------------------------------- bge.w 1730 <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15ce:	|        |     |     |  |  |                                 move.w 48(sp),d0
    15d2:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15d4:	|        |     |     |  |  |                                 move.w d0,d6
    15d6:	|        |     |     |  |  |                                 andi.w #15,d6
    15da:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15dc:	|        |     |     |  |  |                                 tst.l d2
    15de:	|        |  ,--|-----|--|--|-------------------------------- blt.w 1752 <CstDrawZBuffer+0x248>
    15e2:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    15e4:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15e6:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
          custom->bltalwm = 0xffff;                      
    15ee:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
          custom->bltcon1 = 0;          
    15f6:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    15fe:	|        |  |  |  |  |  |  |                                 lea 1cafe <GfxBase>,a0
    1604:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1606:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1608:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    160a:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    160c:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    1612:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1616:	|        |  |  |  |  |  |  |                                 clr.w d0
    1618:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    161a:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 1792 <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    161e:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    1620:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1624:	|        |  |  |  |  |  |  |           |     |               move.l 1ca3e <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    162e:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    1630:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    1632:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    1634:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1638:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    163a:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1640:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    1642:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    1644:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1ab0 <CstDrawZBuffer+0x5a6>
    1648:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    164a:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    164c:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 0;                                                            
    1652:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    165a:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    165c:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    165e:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    1660:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    1662:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 17d2 <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1666:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    166a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    166c:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    166e:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    1670:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17c30 <__mulsi3>
    1676:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1678:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17e8 <CstDrawZBuffer+0x2de>
    167e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    1680:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    1682:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        UWORD bltsize =  height*64+bytewidth/2;          
    1688:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    168a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    168c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    168e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
       
        WaitBlit();
    1694:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cafe <GfxBase>,a0
    169a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    169c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    16a0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
        custom->bltalwm = 0xffff;
    16a8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
        custom->bltamod = 2;
    16b0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
        custom->bltbmod = 0;
    16b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
        custom->bltdmod = 0;
    16c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16c8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
        custom->bltcon1 = 0;        
    16d0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16d8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1ca3e <CstZBufferWork>,d0
    16de:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    16e0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16e6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16e8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16ec:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16ee:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 1872 <CstDrawZBuffer+0x368>
    16f2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16f4:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    16f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17c30 <__mulsi3>
    16fe:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    1700:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    1702:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1704:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1706:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1708:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    170c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
        custom->bltdpt = (APTR) CstZBufferResult;
    1712:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1ca3a <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    171c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    171e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    1720:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    1722:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 1860 <CstDrawZBuffer+0x356>
    1726:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    172a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
      zbufferset = 1;
    1730:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    1732:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1736:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    173a:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 158a <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    173e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    1740:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1a16 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    1744:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1ca3a <CstZBufferResult>,d0

}
    174a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    174e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    1750:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    1752:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1754:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1756:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1758:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    175a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
          custom->bltalwm = 0xffff;                      
    1762:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
          custom->bltcon1 = 0;          
    176a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
            WaitBlit();   
    1772:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cafe <GfxBase>,a0
    1778:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    177a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    177c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    177e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1780:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1786:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    178a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    178c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    178e:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 161e <CstDrawZBuffer+0x114>
            WaitBlit();         
    1792:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1796:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1ca3e <CstZBufferWork>,d0
    179c:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    179e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon0 = 4096 + 0x9f0;              
    17a4:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17ac:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    17ae:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    17b0:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ac8 <CstDrawZBuffer+0x5be>
    17b4:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    17b6:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    17b8:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 2;                                                            
    17be:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17c6:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17ca:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    17cc:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    17ce:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1666 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17da:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17c30 <__mulsi3>
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 167e <CstDrawZBuffer+0x174>
    17e8:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17ec:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        UWORD bltsize =  height*64+bytewidth/2;          
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17f8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17fa:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
        WaitBlit();
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cafe <GfxBase>,a0
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1808:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    180c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
        custom->bltalwm = 0xffff;
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
        custom->bltamod = 2;
    181c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
        custom->bltbmod = 0;
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
        custom->bltdmod = 0;
    182c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
        custom->bltcon1 = 0;        
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1ca3e <CstZBufferWork>,d0
    184a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    184c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1852:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    185a:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16f2 <CstDrawZBuffer+0x1e8>
    185e:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 1872 <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1860:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    186e:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 1730 <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1872:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1874:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1876:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1878:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    187a:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17c30 <__mulsi3>
    1880:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    1882:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1884:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1886:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1888:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    188a:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    188e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
        custom->bltdpt = (APTR) CstZBufferResult;
    1894:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1ca3a <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    189e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    18a0:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    18a4:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1726 <CstDrawZBuffer+0x21c>
    18a8:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 1860 <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18aa:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    18ae:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18b0:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    18b6:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    18b8:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    18ba:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    18bc:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 1730 <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18c0:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    18c4:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18c6:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19d2 <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18ca:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    18ce:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 1730 <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18d2:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    18d6:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    18d8:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    18da:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18dc:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    18e0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    18e4:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18e6:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1970 <CstDrawZBuffer+0x466>
    18ea:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18ec:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18ee:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18f0:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18f2:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    18f4:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1982 <CstDrawZBuffer+0x478>
            WaitBlit();  
    18f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cafe <GfxBase>,a0
    18fe:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    1900:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1904:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
            custom->bltalwm = 0xffff;          
    190c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
            custom->bltdpt = CstZBufferWork;        
    1914:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1ca3e <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon1 = 0;               
    191e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1926:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    192a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    192c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    192e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 199a <CstDrawZBuffer+0x490>
    1930:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1932:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1934:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1936:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    193a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 19a8 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1940:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1942:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1944:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1948:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    194e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
              custom->bltdmod = 0;                                                            
    1954:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
              xdiffbyte += 2;                 
    195c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    195e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1960:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1962:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1968:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    196a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    196c:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 165a <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1970:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1972:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1974:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1976:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1978:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    197a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    197c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    197e:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 18f8 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1982:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17ec0 <PutChar+0x17a>
    1988:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 172a4 <KPrintF>
              return FALSE;
    198e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1990:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1992:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1996:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1998:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    199a:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    199c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    199e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    19a0:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    19a2:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    19a6:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 193c <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    19a8:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19b0:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
              custom->bltdmod = 0;                                                            
    19b6:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
              xdiffbyte += 2;                 
    19be:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    19c0:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    19c2:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19c4:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    19ce:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 165a <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19d2:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19d4:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19d6:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 1730 <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19da:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19de:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    19e0:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    19e2:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19e4:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19e8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19ec:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19ee:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18ea <CstDrawZBuffer+0x3e0>
    19f2:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1970 <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19f6:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    19fa:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 1730 <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    19fe:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1a02:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a04:	|  |  |     |     |     |  |                                 move.w d0,d6
    1a06:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1a0a:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a0c:	|  |  |     |     |     |  |                                 tst.l d2
    1a0e:	|  |  |     |     '-----|--|-------------------------------- bge.w 15e2 <CstDrawZBuffer+0xd8>
    1a12:	|  |  |     '-----------|--|-------------------------------- bra.w 1752 <CstDrawZBuffer+0x248>
    WaitBlit();
    1a16:	'--|--|-----------------|--|-------------------------------> movea.l 1cafe <GfxBase>,a6
    1a1c:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a20:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
    custom->bltalwm = 0xffff;
    1a28:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
    custom->bltamod = 0;
    1a30:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
    custom->bltbmod = 0;
    1a38:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
    custom->bltcmod = 0;
    1a40:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
    custom->bltdmod = 0;
    1a48:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a50:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
    custom->bltcon1 = 0;        
    1a58:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a60:	   |  |                 |  |                                 move.l (a3),d2
    1a62:	   |  |                 |  |                                 move.l 4(a3),d3
    1a66:	   |  |                 |  |                                 move.l d2,d0
    1a68:	   |  |                 |  |                       ,-------- bmi.w 1af0 <CstDrawZBuffer+0x5e6>
    1a6c:	   |  |                 |  |                       |         asr.l #3,d0
    1a6e:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a70:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a72:	   |  |                 |  |                       |         jsr 17c30 <__mulsi3>
    1a78:	   |  |                 |  |                       |         addq.l #8,sp
    1a7a:	   |  |                 |  |                       |         move.l d0,d1
    1a7c:	   |  |                 |  |                       |         add.l d0,d1
    1a7e:	   |  |                 |  |                       |         add.l d1,d1
    1a80:	   |  |                 |  |                       |         add.l d1,d0
    1a82:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a86:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a8c:	   |  |                 |  |                       |         move.l 1ca3a <CstZBufferResult>,d0
    1a92:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1a98:	   |  |                 |  |                       |         lsl.w #6,d3
    1a9a:	   |  |                 |  |                       |         tst.l d2
    1a9c:	   |  |                 |  |                    ,--|-------- blt.s 1ae0 <CstDrawZBuffer+0x5d6>
    1a9e:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1aa0:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1aa2:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
}
    1aa8:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1aac:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1aae:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ab0:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1ab2:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1ab4:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1ab6:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 0;                                                            
    1abc:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    1ac4:	      '-----------------|--|--------------------|--|--|--|-- bra.w 165a <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ac8:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1aca:	                           |                    |  |  |  |   asr.l #3,d1
    1acc:	                           |                    |  |  |  |   sub.w d2,d1
    1ace:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 2;                                                            
    1ad4:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    1adc:	                           '--------------------|--|--|--|-- bra.w 17c6 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ae0:	                                                >--|--|--|-> moveq #15,d1
    1ae2:	                                                |  |  |  |   add.l d1,d2
    1ae4:	                                                |  |  |  |   asr.l #4,d2
    1ae6:	                                                |  |  |  |   add.w d2,d3
    1ae8:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
  return CstZBufferResult;
    1aee:	                                                |  |  |  '-- bra.s 1aa8 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1af0:	                                                |  '--|----> addq.l #7,d0
    1af2:	                                                |     |      asr.l #3,d0
    1af4:	                                                |     |      move.l d3,-(sp)
    1af6:	                                                |     |      move.l d0,-(sp)
    1af8:	                                                |     |      jsr 17c30 <__mulsi3>
    1afe:	                                                |     |      addq.l #8,sp
    1b00:	                                                |     |      move.l d0,d1
    1b02:	                                                |     |      add.l d0,d1
    1b04:	                                                |     |      add.l d1,d1
    1b06:	                                                |     |      add.l d1,d0
    1b08:	                                                |     |      add.l 24(a3),d0
    1b0c:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b12:	                                                |     |      move.l 1ca3a <CstZBufferResult>,d0
    1b18:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b1e:	                                                |     |      lsl.w #6,d3
    1b20:	                                                |     |      tst.l d2
    1b22:	                                                |     '----- bge.w 1a9e <CstDrawZBuffer+0x594>
    1b26:	                                                '----------- bra.s 1ae0 <CstDrawZBuffer+0x5d6>

00001b28 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b28:	    lea -20(sp),sp
    1b2c:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b2e:	    move.l 1ca1a <CstDrawBuffer>,d0
    1b34:	,-- beq.s 1b4e <CstFreeBuffer+0x26>
    1b36:	|   move.l 1ca1a <CstDrawBuffer>,20(sp)
    1b3e:	|   move.l 1caf2 <SysBase>,d0
    1b44:	|   movea.l d0,a6
    1b46:	|   movea.l 20(sp),a1
    1b4a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b4e:	'-> move.l 1ca16 <CstViewBuffer>,d0
    1b54:	,-- beq.s 1b6e <CstFreeBuffer+0x46>
    1b56:	|   move.l 1ca16 <CstViewBuffer>,16(sp)
    1b5e:	|   move.l 1caf2 <SysBase>,d0
    1b64:	|   movea.l d0,a6
    1b66:	|   movea.l 16(sp),a1
    1b6a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b6e:	'-> move.l 1ca10 <CstCopperList>,d0
    1b74:	,-- beq.s 1b8e <CstFreeBuffer+0x66>
    1b76:	|   move.l 1ca10 <CstCopperList>,12(sp)
    1b7e:	|   move.l 1caf2 <SysBase>,d0
    1b84:	|   movea.l d0,a6
    1b86:	|   movea.l 12(sp),a1
    1b8a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b8e:	'-> move.l 1ca08 <CstBackDrop>,d0
    1b94:	,-- beq.s 1bae <CstFreeBuffer+0x86>
    1b96:	|   move.l 1ca08 <CstBackDrop>,8(sp)
    1b9e:	|   move.l 1caf2 <SysBase>,d0
    1ba4:	|   movea.l d0,a6
    1ba6:	|   movea.l 8(sp),a1
    1baa:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bae:	'-> move.l 1ca0c <CstBackDropBackup>,d0
    1bb4:	,-- beq.s 1bce <CstFreeBuffer+0xa6>
    1bb6:	|   move.l 1ca0c <CstBackDropBackup>,4(sp)
    1bbe:	|   move.l 1caf2 <SysBase>,d0
    1bc4:	|   movea.l d0,a6
    1bc6:	|   movea.l 4(sp),a1
    1bca:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bce:	'-> clr.l 1ca1a <CstDrawBuffer>
  CstViewBuffer = NULL;
    1bd4:	    clr.l 1ca16 <CstViewBuffer>
  CstCopperList = NULL;
    1bda:	    clr.l 1ca10 <CstCopperList>
  CstBackDrop = NULL;
    1be0:	    clr.l 1ca08 <CstBackDrop>

}
    1be6:	    nop
    1be8:	    movea.l (sp)+,a6
    1bea:	    lea 20(sp),sp
    1bee:	    rts

00001bf0 <CstFreeze>:



void CstFreeze( ) {
    1bf0:	       lea -36(sp),sp
    1bf4:	       move.l a6,-(sp)
    1bf6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1bf8:	       pea 17f10 <PutChar+0x1ca>
    1bfe:	       jsr 172a4 <KPrintF>
    1c04:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c06:	       move.l 1ca46 <winWidth>,d0
    1c0c:	       lsr.l #3,d0
    1c0e:	       move.l d0,d1
    1c10:	       move.l 1ca4a <winHeight>,d0
    1c16:	       move.l d0,d0
    1c18:	       muls.w d0,d1
    1c1a:	       move.w d1,d0
    1c1c:	       add.w d0,d0
    1c1e:	       add.w d0,d0
    1c20:	       move.w d0,d2
    1c22:	       add.w d1,d2
    1c24:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c28:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c30:	       moveq #0,d0
    1c32:	       move.w 26(sp),d0
    1c36:	       move.l d0,18(sp)
    1c3a:	       clr.l 14(sp)
    1c3e:	       move.l 1caf2 <SysBase>,d0
    1c44:	       movea.l d0,a6
    1c46:	       move.l 18(sp),d0
    1c4a:	       move.l 14(sp),d1
    1c4e:	       jsr -684(a6)
    1c52:	       move.l d0,10(sp)
    1c56:	       move.l 10(sp),d0
    1c5a:	       move.l d0,1ca0c <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c60:	       move.l 1ca0c <CstBackDropBackup>,d0
    1c66:	   ,-- bne.s 1c76 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c68:	   |   pea 17f37 <PutChar+0x1f1>
    1c6e:	   |   jsr 172a4 <KPrintF>
    1c74:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c76:	   '-> move.l 1ca4a <winHeight>,d0
    1c7c:	       move.l d0,d0
    1c7e:	       movea.w d0,a1
    1c80:	       move.l 1ca46 <winWidth>,d0
    1c86:	       move.l d0,d0
    1c88:	       movea.w d0,a0
    1c8a:	       move.l 1ca0c <CstBackDropBackup>,d0
    1c90:	       clr.l -(sp)
    1c92:	       pea 5 <_start+0x5>
    1c96:	       move.l a1,-(sp)
    1c98:	       move.l a0,-(sp)
    1c9a:	       pea 17f6f <PutChar+0x229>
    1ca0:	       move.l d0,-(sp)
    1ca2:	       jsr 1738c <debug_register_bitmap>
    1ca8:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cac:	       move.l 1ca08 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cb4:	       move.l 1ca0c <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cbc:	       clr.l 32(sp)
    1cc0:	   ,-- bra.s 1ce6 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1cc2:	,--|-> move.l 40(sp),d1
    1cc6:	|  |   move.l d1,d0
    1cc8:	|  |   addq.l #4,d0
    1cca:	|  |   move.l d0,40(sp)
    1cce:	|  |   move.l 36(sp),d0
    1cd2:	|  |   move.l d0,d2
    1cd4:	|  |   addq.l #4,d2
    1cd6:	|  |   move.l d2,36(sp)
    1cda:	|  |   movea.l d1,a0
    1cdc:	|  |   move.l (a0),d1
    1cde:	|  |   movea.l d0,a0
    1ce0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ce2:	|  |   addq.l #1,32(sp)
    1ce6:	|  '-> move.w 26(sp),d0
    1cea:	|      lsr.w #2,d0
    1cec:	|      move.w d0,d0
    1cee:	|      andi.l #65535,d0
    1cf4:	|      cmp.l 32(sp),d0
    1cf8:	'----- bgt.s 1cc2 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1cfa:	       move.l 1ca16 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d02:	       move.l 1ca08 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d0a:	       clr.l 28(sp)
    1d0e:	   ,-- bra.s 1d34 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d10:	,--|-> move.l 40(sp),d1
    1d14:	|  |   move.l d1,d0
    1d16:	|  |   addq.l #4,d0
    1d18:	|  |   move.l d0,40(sp)
    1d1c:	|  |   move.l 36(sp),d0
    1d20:	|  |   move.l d0,d2
    1d22:	|  |   addq.l #4,d2
    1d24:	|  |   move.l d2,36(sp)
    1d28:	|  |   movea.l d1,a0
    1d2a:	|  |   move.l (a0),d1
    1d2c:	|  |   movea.l d0,a0
    1d2e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d30:	|  |   addq.l #1,28(sp)
    1d34:	|  '-> move.w 26(sp),d0
    1d38:	|      lsr.w #2,d0
    1d3a:	|      move.w d0,d0
    1d3c:	|      andi.l #65535,d0
    1d42:	|      cmp.l 28(sp),d0
    1d46:	'----- bgt.s 1d10 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d48:	       move.w #2,1ca14 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d50:	       move.l 1ca46 <winWidth>,d0
    1d56:	       lsr.l #4,d0
    1d58:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    1d5e:	       move.l a0,d1
    1d60:	       addq.l #2,d1
    1d62:	       move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    1d68:	       move.l d0,d0
    1d6a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d6c:	       move.l 1ca4a <winHeight>,d0
    1d72:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    1d78:	       move.l a0,d1
    1d7a:	       addq.l #2,d1
    1d7c:	       move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    1d82:	       move.l d0,d0
    1d84:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d86:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    1d8c:	       move.l a0,d0
    1d8e:	       addq.l #2,d0
    1d90:	       move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    1d96:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d98:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    1d9e:	       move.l a0,d0
    1da0:	       addq.l #2,d0
    1da2:	       move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    1da8:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    1daa:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    1db0:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1db2:	       pea 17f7e <PutChar+0x238>
    1db8:	       jsr 172a4 <KPrintF>
    1dbe:	       addq.l #4,sp

}  
    1dc0:	       nop
    1dc2:	       move.l (sp)+,d2
    1dc4:	       movea.l (sp)+,a6
    1dc6:	       lea 36(sp),sp
    1dca:	       rts

00001dcc <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1dcc:	             lea -144(sp),sp
    1dd0:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1dd4:	             pea 17f92 <PutChar+0x24c>
    1dda:	             jsr 172a4 <KPrintF>
    1de0:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1de2:	             move.l 164(sp),-(sp)
    1de6:	             jsr 6bc <get2bytes>
    1dec:	             addq.l #4,sp
    1dee:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1df2:	             move.l 164(sp),-(sp)
    1df6:	             jsr 6bc <get2bytes>
    1dfc:	             addq.l #4,sp
    1dfe:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e02:	             move.w 134(sp),d0
    1e06:	             lsr.w #3,d0
    1e08:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e0c:	             move.w 130(sp),d0
    1e10:	             lsr.w #1,d0
    1e12:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e16:	             move.l 1ca46 <winWidth>,d0
    1e1c:	             lsr.l #3,d0
    1e1e:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e22:	             move.w 130(sp),d0
    1e26:	             muls.w 132(sp),d0
    1e2a:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e2e:	             move.w 124(sp),d1
    1e32:	             move.w d1,d0
    1e34:	             add.w d0,d0
    1e36:	             add.w d0,d0
    1e38:	             move.w d0,d2
    1e3a:	             add.w d1,d2
    1e3c:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e40:	             move.w 1ca02 <CstPaletteLoaded>,d0
    1e46:	,----------- bne.w 1ee0 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e4a:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e50:	|            move.l 1ca32 <CstPalette>,d0
    1e56:	|        ,-- beq.s 1e70 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e58:	|        |   move.l 1ca32 <CstPalette>,116(sp)
    1e60:	|        |   move.l 1caf2 <SysBase>,d0
    1e66:	|        |   movea.l d0,a6
    1e68:	|        |   movea.l 116(sp),a1
    1e6c:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e70:	|        '-> moveq #64,d0
    1e72:	|            move.l d0,112(sp)
    1e76:	|            clr.l 108(sp)
    1e7a:	|            move.l 1caf2 <SysBase>,d0
    1e80:	|            movea.l d0,a6
    1e82:	|            move.l 112(sp),d0
    1e86:	|            move.l 108(sp),d1
    1e8a:	|            jsr -684(a6)
    1e8e:	|            move.l d0,104(sp)
    1e92:	|            move.l 104(sp),d0
    1e96:	|            move.l d0,1ca32 <CstPalette>
    CstPaletteLoaded = 1;
    1e9c:	|            move.w #1,1ca02 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1ea4:	|            move.l 1ca32 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eac:	|            clr.l 152(sp)
    1eb0:	|        ,-- bra.s 1ed6 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1eb2:	|     ,--|-> move.l 164(sp),-(sp)
    1eb6:	|     |  |   jsr 6bc <get2bytes>
    1ebc:	|     |  |   addq.l #4,sp
    1ebe:	|     |  |   move.l d0,d1
    1ec0:	|     |  |   move.l 156(sp),d0
    1ec4:	|     |  |   move.l d0,d2
    1ec6:	|     |  |   addq.l #2,d2
    1ec8:	|     |  |   move.l d2,156(sp)
    1ecc:	|     |  |   move.l d1,d1
    1ece:	|     |  |   movea.l d0,a0
    1ed0:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ed2:	|     |  |   addq.l #1,152(sp)
    1ed6:	|     |  '-> moveq #31,d0
    1ed8:	|     |      cmp.l 152(sp),d0
    1edc:	|     '----- bge.s 1eb2 <CstLoadBackdrop+0xe6>
    1ede:	|  ,-------- bra.s 1efe <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee0:	'--|-------> clr.l 148(sp)
    1ee4:	   |     ,-- bra.s 1ef6 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1ee6:	   |  ,--|-> move.l 164(sp),-(sp)
    1eea:	   |  |  |   jsr 6bc <get2bytes>
    1ef0:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ef2:	   |  |  |   addq.l #1,148(sp)
    1ef6:	   |  |  '-> moveq #31,d2
    1ef8:	   |  |      cmp.l 148(sp),d2
    1efc:	   |  '----- bge.s 1ee6 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1efe:	   '-------> moveq #0,d0
    1f00:	             move.w 122(sp),d0
    1f04:	             move.l d0,100(sp)
    1f08:	             moveq #2,d0
    1f0a:	             move.l d0,96(sp)
    1f0e:	             move.l 1caf2 <SysBase>,d0
    1f14:	             movea.l d0,a6
    1f16:	             move.l 100(sp),d0
    1f1a:	             move.l 96(sp),d1
    1f1e:	             jsr -684(a6)
    1f22:	             move.l d0,92(sp)
    1f26:	             move.l 92(sp),d0
    1f2a:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f2e:	         ,-- bne.s 1f3e <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f30:	         |   pea 17fc1 <PutChar+0x27b>
    1f36:	         |   jsr 172a4 <KPrintF>
    1f3c:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f3e:	         '-> moveq #0,d0
    1f40:	             move.w 124(sp),d0
    1f44:	             move.l d0,84(sp)
    1f48:	             moveq #2,d2
    1f4a:	             move.l d2,80(sp)
    1f4e:	             move.l 1caf2 <SysBase>,d0
    1f54:	             movea.l d0,a6
    1f56:	             move.l 84(sp),d0
    1f5a:	             move.l 80(sp),d1
    1f5e:	             jsr -684(a6)
    1f62:	             move.l d0,76(sp)
    1f66:	             move.l 76(sp),d0
    1f6a:	             move.l d0,72(sp)
  if( !tmpmask)
    1f6e:	         ,-- bne.s 1f7e <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f70:	         |   pea 17ff7 <PutChar+0x2b1>
    1f76:	         |   jsr 172a4 <KPrintF>
    1f7c:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f7e:	         '-> move.w 132(sp),d0
    1f82:	             movea.w d0,a1
    1f84:	             move.w 134(sp),d0
    1f88:	             movea.w d0,a0
    1f8a:	             clr.l -(sp)
    1f8c:	             pea 5 <_start+0x5>
    1f90:	             move.l a1,-(sp)
    1f92:	             move.l a0,-(sp)
    1f94:	             pea 1802b <PutChar+0x2e5>
    1f9a:	             move.l 108(sp),-(sp)
    1f9e:	             jsr 1738c <debug_register_bitmap>
    1fa4:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1fa8:	             move.w 132(sp),d0
    1fac:	             movea.w d0,a1
    1fae:	             move.w 134(sp),d0
    1fb2:	             movea.w d0,a0
    1fb4:	             clr.l -(sp)
    1fb6:	             pea 1 <_start+0x1>
    1fba:	             move.l a1,-(sp)
    1fbc:	             move.l a0,-(sp)
    1fbe:	             pea 18039 <PutChar+0x2f3>
    1fc4:	             move.l 108(sp),-(sp)
    1fc8:	             jsr 1738c <debug_register_bitmap>
    1fce:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fd2:	             move.l 164(sp),68(sp)
    1fd8:	             move.l 88(sp),64(sp)
    1fde:	             moveq #2,d0
    1fe0:	             move.l d0,60(sp)
    1fe4:	             move.w 122(sp),d0
    1fe8:	             lsr.w #1,d0
    1fea:	             move.w d0,d0
    1fec:	             andi.l #65535,d0
    1ff2:	             move.l d0,56(sp)
    1ff6:	             move.l 1cafa <DOSBase>,d0
    1ffc:	             movea.l d0,a6
    1ffe:	             move.l 68(sp),d1
    2002:	             move.l 64(sp),d2
    2006:	             move.l 60(sp),d3
    200a:	             move.l 56(sp),d4
    200e:	             jsr -324(a6)
    2012:	             move.l d0,52(sp)
    2016:	             move.l 52(sp),d0
    201a:	             move.w d0,50(sp)
  if(!count) {
    201e:	         ,-- bne.s 2032 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2020:	         |   pea 18045 <PutChar+0x2ff>
    2026:	         |   jsr 172a4 <KPrintF>
    202c:	         |   addq.l #4,sp
    return;
    202e:	   ,-----|-- bra.w 2274 <CstLoadBackdrop+0x4a8>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2032:	   |     '-> move.l 164(sp),46(sp)
    2038:	   |         move.l 72(sp),42(sp)
    203e:	   |         moveq #2,d2
    2040:	   |         move.l d2,38(sp)
    2044:	   |         move.w 124(sp),d0
    2048:	   |         lsr.w #1,d0
    204a:	   |         move.w d0,d0
    204c:	   |         andi.l #65535,d0
    2052:	   |         move.l d0,34(sp)
    2056:	   |         move.l 1cafa <DOSBase>,d0
    205c:	   |         movea.l d0,a6
    205e:	   |         move.l 46(sp),d1
    2062:	   |         move.l 42(sp),d2
    2066:	   |         move.l 38(sp),d3
    206a:	   |         move.l 34(sp),d4
    206e:	   |         jsr -324(a6)
    2072:	   |         move.l d0,30(sp)
    2076:	   |         move.l 30(sp),d0
    207a:	   |         move.w d0,50(sp)
   

  if(!count) {
    207e:	   |     ,-- bne.s 2092 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2080:	   |     |   pea 18045 <PutChar+0x2ff>
    2086:	   |     |   jsr 172a4 <KPrintF>
    208c:	   |     |   addq.l #4,sp
    return;
    208e:	   +-----|-- bra.w 2274 <CstLoadBackdrop+0x4a8>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2092:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    209a:	   |         move.l 1ca08 <CstBackDrop>,d0
    20a0:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    20a4:	   |         move.l 172(sp),d0
    20a8:	   |         move.w d0,d1
    20aa:	   |         muls.w 126(sp),d1
    20ae:	   |         move.l 168(sp),d0
    20b2:	   |     ,-- bpl.s 20b6 <CstLoadBackdrop+0x2ea>
    20b4:	   |     |   addq.l #7,d0
    20b6:	   |     '-> asr.l #3,d0
    20b8:	   |         move.l d0,d0
    20ba:	   |         movea.w d1,a0
    20bc:	   |         adda.w d0,a0
    20be:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    20c2:	   |         moveq #0,d0
    20c4:	   |         move.w 24(sp),d0
    20c8:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20cc:	   |         pea 18060 <PutChar+0x31a>
    20d2:	   |         jsr 172a4 <KPrintF>
    20d8:	   |         addq.l #4,sp


  WaitBlit();
    20da:	   |         move.l 1cafe <GfxBase>,d0
    20e0:	   |         movea.l d0,a6
    20e2:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20e6:	   |         movea.l 26(sp),a0
    20ea:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    20f0:	   |         movea.l 26(sp),a0
    20f4:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    20fa:	   |         movea.l 26(sp),a0
    20fe:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2104:	   |         movea.l 26(sp),a0
    2108:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    210e:	   |         move.w 126(sp),d0
    2112:	   |         sub.w 130(sp),d0
    2116:	   |         movea.l 26(sp),a0
    211a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    211e:	   |         move.w 126(sp),d0
    2122:	   |         sub.w 130(sp),d0
    2126:	   |         movea.l 26(sp),a0
    212a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    212e:	   |         movea.l 26(sp),a0
    2132:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2138:	   |         movea.l 26(sp),a0
    213c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2142:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2148:	   |         clr.l 136(sp)
    214c:	   |     ,-- bra.s 21ae <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    214e:	   |  ,--|-> movea.l 26(sp),a0
    2152:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2158:	   |  |  |   move.l 140(sp),d0
    215c:	   |  |  |   movea.l 26(sp),a0
    2160:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2164:	   |  |  |   move.l 144(sp),d0
    2168:	   |  |  |   movea.l 26(sp),a0
    216c:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2170:	   |  |  |   move.l 144(sp),d0
    2174:	   |  |  |   movea.l 26(sp),a0
    2178:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    217c:	   |  |  |   move.w 132(sp),d0
    2180:	   |  |  |   lsl.w #6,d0
    2182:	   |  |  |   add.w 128(sp),d0
    2186:	   |  |  |   movea.l 26(sp),a0
    218a:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    218e:	   |  |  |   moveq #0,d0
    2190:	   |  |  |   move.w 124(sp),d0
    2194:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2198:	   |  |  |   move.w 1ca06 <CstBackdropSizePlane>,d0
    219e:	   |  |  |   move.w d0,d0
    21a0:	   |  |  |   andi.l #65535,d0
    21a6:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21aa:	   |  |  |   addq.l #1,136(sp)
    21ae:	   |  |  '-> moveq #4,d0
    21b0:	   |  |      cmp.l 136(sp),d0
    21b4:	   |  '----- bge.s 214e <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    21b6:	   |         move.l 1cafe <GfxBase>,d0
    21bc:	   |         movea.l d0,a6
    21be:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21c2:	   |         pea 1807f <PutChar+0x339>
    21c8:	   |         jsr 172a4 <KPrintF>
    21ce:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21d0:	   |         move.l 88(sp),20(sp)
    21d6:	   |         move.l 1caf2 <SysBase>,d0
    21dc:	   |         movea.l d0,a6
    21de:	   |         movea.l 20(sp),a1
    21e2:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21e6:	   |         move.l 72(sp),16(sp)
    21ec:	   |         move.l 1caf2 <SysBase>,d0
    21f2:	   |         movea.l d0,a6
    21f4:	   |         movea.l 16(sp),a1
    21f8:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    21fc:	   |         move.w #2,1ca14 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2204:	   |         move.l 1ca46 <winWidth>,d0
    220a:	   |         lsr.l #4,d0
    220c:	   |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2212:	   |         move.l a0,d1
    2214:	   |         addq.l #2,d1
    2216:	   |         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    221c:	   |         move.l d0,d0
    221e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2220:	   |         move.l 1ca4a <winHeight>,d0
    2226:	   |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    222c:	   |         move.l a0,d1
    222e:	   |         addq.l #2,d1
    2230:	   |         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    2236:	   |         move.l d0,d0
    2238:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    223a:	   |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2240:	   |         move.l a0,d0
    2242:	   |         addq.l #2,d0
    2244:	   |         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    224a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    224c:	   |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2252:	   |         move.l a0,d0
    2254:	   |         addq.l #2,d0
    2256:	   |         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    225c:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    225e:	   |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2264:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2266:	   |         pea 1809f <PutChar+0x359>
    226c:	   |         jsr 172a4 <KPrintF>
    2272:	   |         addq.l #4,sp

}
    2274:	   '-------> movem.l (sp)+,d2-d4/a6
    2278:	             lea 144(sp),sp
    227c:	             rts

0000227e <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    227e:	                lea -72(sp),sp
    2282:	                move.l a6,-(sp)
    2284:	                move.l d2,-(sp)
    2286:	                move.l 88(sp),d1
    228a:	                move.l 92(sp),d0
    228e:	                move.w d1,d1
    2290:	                move.w d1,10(sp)
    2294:	                move.w d0,d0
    2296:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    229a:	                move.l #14675968,28(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    22a2:	                clr.l 24(sp)
  CstApplyBackDropCounter = 2;
    22a6:	                move.w #2,1ca14 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    22ae:	                move.l 1ca08 <CstBackDrop>,24(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22b6:	                clr.l 56(sp)

  blitwidth = single->width/16;
    22ba:	                movea.l 84(sp),a0
    22be:	                move.l (a0),d0
    22c0:	                movea.l d0,a0
    22c2:	                cmpa.w #0,a0
    22c6:	            ,-- bge.s 22cc <CstPasteChar+0x4e>
    22c8:	            |   lea 15(a0),a0
    22cc:	            '-> move.l a0,d0
    22ce:	                asr.l #4,d0
    22d0:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    22d4:	            ,-- bne.s 22dc <CstPasteChar+0x5e>
    22d6:	            |   moveq #1,d0
    22d8:	            |   move.l d0,40(sp)

  if( y < 0) {
    22dc:	            '-> tst.w 8(sp)
    22e0:	         ,----- bge.s 232a <CstPasteChar+0xac>
    if(y + single->height < 0) {
    22e2:	         |      movea.w 8(sp),a1
    22e6:	         |      movea.l 84(sp),a0
    22ea:	         |      move.l 4(a0),d0
    22ee:	         |      add.l a1,d0
    22f0:	         |  ,-- bpl.s 2304 <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22f2:	         |  |   pea 180b9 <PutChar+0x373>
    22f8:	         |  |   jsr 172a4 <KPrintF>
    22fe:	         |  |   addq.l #4,sp
      return;
    2300:	,--------|--|-- bra.w 29a0 <CstPasteChar+0x722>
    }
    ystartdst = 0;
    2304:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    2308:	|        |      move.w 8(sp),d0
    230c:	|        |      ext.l d0
    230e:	|        |      move.l d0,d1
    2310:	|        |      neg.l d1
    2312:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    2316:	|        |      movea.l 84(sp),a0
    231a:	|        |      move.l 4(a0),d0
    231e:	|        |      movea.w 8(sp),a0
    2322:	|        |      add.l a0,d0
    2324:	|        |      move.l d0,44(sp)
    2328:	|     ,--|----- bra.s 239c <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    232a:	|     |  '----> movea.w 8(sp),a1
    232e:	|     |         movea.l 84(sp),a0
    2332:	|     |         move.l 4(a0),d0
    2336:	|     |         move.l a1,d1
    2338:	|     |         add.l d0,d1
    233a:	|     |         move.l 1ca4a <winHeight>,d0
    2340:	|     |         cmp.l d1,d0
    2342:	|     |  ,----- bge.s 2384 <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    2344:	|     |  |      movea.w 8(sp),a0
    2348:	|     |  |      move.l 1ca4a <winHeight>,d0
    234e:	|     |  |      cmp.l a0,d0
    2350:	|     |  |  ,-- bge.s 2364 <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2352:	|     |  |  |   pea 180b9 <PutChar+0x373>
    2358:	|     |  |  |   jsr 172a4 <KPrintF>
    235e:	|     |  |  |   addq.l #4,sp
      return;
    2360:	+-----|--|--|-- bra.w 29a0 <CstPasteChar+0x722>
    }
    ystartdst = y;
    2364:	|     |  |  '-> movea.w 8(sp),a0
    2368:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    236c:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    2370:	|     |  |      move.l 1ca4a <winHeight>,d0
    2376:	|     |  |      movea.w 8(sp),a0
    237a:	|     |  |      move.l d0,d1
    237c:	|     |  |      sub.l a0,d1
    237e:	|     |  |      move.l d1,44(sp)
    2382:	|     +--|----- bra.s 239c <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    2384:	|     |  '----> movea.w 8(sp),a0
    2388:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    238c:	|     |         clr.l 48(sp)
    blitheight = single->height;
    2390:	|     |         movea.l 84(sp),a0
    2394:	|     |         move.l 4(a0),d0
    2398:	|     |         move.l d0,44(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    239c:	|     '-------> tst.w 10(sp)
    23a0:	|        ,----- bge.w 2508 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    23a4:	|        |      movea.w 10(sp),a1
    23a8:	|        |      movea.l 84(sp),a0
    23ac:	|        |      move.l (a0),d0
    23ae:	|        |      add.l a1,d0
    23b0:	|        |  ,-- bpl.s 23c4 <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23b2:	|        |  |   pea 180b9 <PutChar+0x373>
    23b8:	|        |  |   jsr 172a4 <KPrintF>
    23be:	|        |  |   addq.l #4,sp
      return;
    23c0:	+--------|--|-- bra.w 29a0 <CstPasteChar+0x722>

    }
    
    extrawords = 1;
    23c4:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    23ca:	|        |      move.w 10(sp),d0
    23ce:	|        |  ,-- bpl.s 23d4 <CstPasteChar+0x156>
    23d0:	|        |  |   addi.w #15,d0
    23d4:	|        |  '-> asr.w #4,d0
    23d6:	|        |      neg.w d0
    23d8:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    23dc:	|        |      move.w 10(sp),d0
    23e0:	|        |      ext.l d0
    23e2:	|        |      neg.l d0
    23e4:	|        |      andi.l #-2147483633,d0
    23ea:	|        |  ,-- bpl.s 23f4 <CstPasteChar+0x176>
    23ec:	|        |  |   subq.l #1,d0
    23ee:	|        |  |   moveq #-16,d1
    23f0:	|        |  |   or.l d1,d0
    23f2:	|        |  |   addq.l #1,d0
    23f4:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23f8:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    23fc:	|        |      movea.l 84(sp),a0
    2400:	|        |      move.l 24(a0),d0
    2404:	|        |      move.l d0,d1
    2406:	|        |      moveq #0,d0
    2408:	|        |      move.w 76(sp),d0
    240c:	|        |      add.l d0,d0
    240e:	|        |      move.l d1,d2
    2410:	|        |      add.l d0,d2
    2412:	|        |      movea.l 84(sp),a0
    2416:	|        |      move.l (a0),d0
    2418:	|        |      move.l 48(sp),-(sp)
    241c:	|        |      move.l d0,-(sp)
    241e:	|        |      jsr 17c30 <__mulsi3>
    2424:	|        |      addq.l #8,sp
    2426:	|        |      lsr.l #3,d0
    2428:	|        |      move.l d2,d1
    242a:	|        |      add.l d0,d1
    242c:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2430:	|        |      move.l 1ca46 <winWidth>,d0
    2436:	|        |      move.l 52(sp),-(sp)
    243a:	|        |      move.l d0,-(sp)
    243c:	|        |      jsr 17c30 <__mulsi3>
    2442:	|        |      addq.l #8,sp
    2444:	|        |      lsr.l #3,d0
    2446:	|        |      move.l 24(sp),d1
    244a:	|        |      add.l d1,d0
    244c:	|        |      move.l d0,d2
    244e:	|        |      subq.l #2,d2
    2450:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2454:	|        |      move.l 1ca46 <winWidth>,d0
    245a:	|        |      move.l 52(sp),-(sp)
    245e:	|        |      move.l d0,-(sp)
    2460:	|        |      jsr 17c30 <__mulsi3>
    2466:	|        |      addq.l #8,sp
    2468:	|        |      lsr.l #3,d0
    246a:	|        |      move.l 24(sp),d1
    246e:	|        |      add.l d1,d0
    2470:	|        |      move.l d0,d1
    2472:	|        |      subq.l #2,d1
    2474:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2478:	|        |      moveq #0,d0
    247a:	|        |      move.w 74(sp),d0
    247e:	|        |      moveq #16,d1
    2480:	|        |      sub.l d0,d1
    2482:	|        |      move.l d1,d0
    2484:	|        |      moveq #12,d2
    2486:	|        |      lsl.l d2,d0
    2488:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    248c:	|        |      movea.l 84(sp),a0
    2490:	|        |      move.l (a0),d0
    2492:	|        |      movea.l d0,a0
    2494:	|        |      cmpa.w #0,a0
    2498:	|        |  ,-- bge.s 249e <CstPasteChar+0x220>
    249a:	|        |  |   lea 15(a0),a0
    249e:	|        |  '-> move.l a0,d0
    24a0:	|        |      asr.l #4,d0
    24a2:	|        |      move.l d0,d0
    24a4:	|        |      add.w 76(sp),d0
    24a8:	|        |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    24ae:	|        |      move.l a0,d1
    24b0:	|        |      addq.l #2,d1
    24b2:	|        |      move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    24b8:	|        |      add.w 78(sp),d0
    24bc:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    24be:	|        |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    24c4:	|        |      move.l a0,d0
    24c6:	|        |      addq.l #2,d0
    24c8:	|        |      move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    24ce:	|        |      move.l 44(sp),d0
    24d2:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24d4:	|        |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    24da:	|        |      move.l a0,d0
    24dc:	|        |      addq.l #2,d0
    24de:	|        |      move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    24e4:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24e6:	|        |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    24ec:	|        |      move.l a0,d0
    24ee:	|        |      addq.l #2,d0
    24f0:	|        |      move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    24f6:	|        |      move.l 52(sp),d0
    24fa:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    24fc:	|        |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2502:	|        |      clr.w (a0)
    2504:	|     ,--|----- bra.w 2808 <CstPasteChar+0x58a>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2508:	|     |  '----> movea.w 10(sp),a1
    250c:	|     |         movea.l 84(sp),a0
    2510:	|     |         move.l (a0),d0
    2512:	|     |         move.l a1,d1
    2514:	|     |         add.l d0,d1
    2516:	|     |         move.l 1ca46 <winWidth>,d0
    251c:	|     |         cmp.l d1,d0
    251e:	|     |  ,----- bge.w 26b0 <CstPasteChar+0x432>

    if(x - single->width > (int) winWidth)
    2522:	|     |  |      movea.w 10(sp),a1
    2526:	|     |  |      movea.l 84(sp),a0
    252a:	|     |  |      move.l (a0),d0
    252c:	|     |  |      move.l a1,d1
    252e:	|     |  |      sub.l d0,d1
    2530:	|     |  |      move.l 1ca46 <winWidth>,d0
    2536:	|     |  |      cmp.l d1,d0
    2538:	|     |  |  ,-- bge.s 254c <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    253a:	|     |  |  |   pea 180b9 <PutChar+0x373>
    2540:	|     |  |  |   jsr 172a4 <KPrintF>
    2546:	|     |  |  |   addq.l #4,sp
      return;
    2548:	+-----|--|--|-- bra.w 29a0 <CstPasteChar+0x722>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    254c:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2550:	|     |  |      movea.w 10(sp),a1
    2554:	|     |  |      movea.l 84(sp),a0
    2558:	|     |  |      move.l (a0),d0
    255a:	|     |  |      add.l a1,d0
    255c:	|     |  |      move.l d0,d1
    255e:	|     |  |      move.l 1ca46 <winWidth>,d0
    2564:	|     |  |      sub.l d0,d1
    2566:	|     |  |      move.l d1,d0
    2568:	|     |  |      lsr.l #4,d0
    256a:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    256e:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2572:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    2578:	|     |  |      movea.l 84(sp),a0
    257c:	|     |  |      move.l 24(a0),d0
    2580:	|     |  |      move.l d0,d2
    2582:	|     |  |      movea.l 84(sp),a0
    2586:	|     |  |      move.l (a0),d0
    2588:	|     |  |      move.l 48(sp),-(sp)
    258c:	|     |  |      move.l d0,-(sp)
    258e:	|     |  |      jsr 17c30 <__mulsi3>
    2594:	|     |  |      addq.l #8,sp
    2596:	|     |  |      lsr.l #3,d0
    2598:	|     |  |      move.l d2,d1
    259a:	|     |  |      add.l d0,d1
    259c:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25a0:	|     |  |      move.l 1ca46 <winWidth>,d0
    25a6:	|     |  |      move.l 52(sp),-(sp)
    25aa:	|     |  |      move.l d0,-(sp)
    25ac:	|     |  |      jsr 17c30 <__mulsi3>
    25b2:	|     |  |      addq.l #8,sp
    25b4:	|     |  |      lsr.l #3,d0
    25b6:	|     |  |      move.l 24(sp),d1
    25ba:	|     |  |      add.l d0,d1
    25bc:	|     |  |      move.w 10(sp),d0
    25c0:	|     |  |  ,-- bpl.s 25c6 <CstPasteChar+0x348>
    25c2:	|     |  |  |   addi.w #15,d0
    25c6:	|     |  |  '-> asr.w #4,d0
    25c8:	|     |  |      movea.w d0,a0
    25ca:	|     |  |      move.l a0,d0
    25cc:	|     |  |      add.l a0,d0
    25ce:	|     |  |      move.l d1,d2
    25d0:	|     |  |      add.l d0,d2
    25d2:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25d6:	|     |  |      move.l 1ca46 <winWidth>,d0
    25dc:	|     |  |      move.l 52(sp),-(sp)
    25e0:	|     |  |      move.l d0,-(sp)
    25e2:	|     |  |      jsr 17c30 <__mulsi3>
    25e8:	|     |  |      addq.l #8,sp
    25ea:	|     |  |      lsr.l #3,d0
    25ec:	|     |  |      move.l 24(sp),d1
    25f0:	|     |  |      add.l d0,d1
    25f2:	|     |  |      move.w 10(sp),d0
    25f6:	|     |  |  ,-- bpl.s 25fc <CstPasteChar+0x37e>
    25f8:	|     |  |  |   addi.w #15,d0
    25fc:	|     |  |  '-> asr.w #4,d0
    25fe:	|     |  |      movea.w d0,a0
    2600:	|     |  |      move.l a0,d0
    2602:	|     |  |      add.l a0,d0
    2604:	|     |  |      move.l d1,d2
    2606:	|     |  |      add.l d0,d2
    2608:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    260c:	|     |  |      movea.l 84(sp),a0
    2610:	|     |  |      move.l (a0),d0
    2612:	|     |  |      andi.l #-2147483633,d0
    2618:	|     |  |  ,-- bpl.s 2622 <CstPasteChar+0x3a4>
    261a:	|     |  |  |   subq.l #1,d0
    261c:	|     |  |  |   moveq #-16,d1
    261e:	|     |  |  |   or.l d1,d0
    2620:	|     |  |  |   addq.l #1,d0
    2622:	|     |  |  '-> moveq #12,d2
    2624:	|     |  |      lsl.l d2,d0
    2626:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    262a:	|     |  |      movea.l 84(sp),a0
    262e:	|     |  |      move.l (a0),d0
    2630:	|     |  |      movea.l d0,a0
    2632:	|     |  |      cmpa.w #0,a0
    2636:	|     |  |  ,-- bge.s 263c <CstPasteChar+0x3be>
    2638:	|     |  |  |   lea 15(a0),a0
    263c:	|     |  |  '-> move.l a0,d0
    263e:	|     |  |      asr.l #4,d0
    2640:	|     |  |      move.l d0,d0
    2642:	|     |  |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2648:	|     |  |      move.l a0,d1
    264a:	|     |  |      addq.l #2,d1
    264c:	|     |  |      move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    2652:	|     |  |      add.w 76(sp),d0
    2656:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2658:	|     |  |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    265e:	|     |  |      move.l a0,d0
    2660:	|     |  |      addq.l #2,d0
    2662:	|     |  |      move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    2668:	|     |  |      move.l 44(sp),d0
    266c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    266e:	|     |  |      move.w 10(sp),d0
    2672:	|     |  |  ,-- bpl.s 2678 <CstPasteChar+0x3fa>
    2674:	|     |  |  |   addi.w #15,d0
    2678:	|     |  |  '-> asr.w #4,d0
    267a:	|     |  |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2680:	|     |  |      move.l a0,d1
    2682:	|     |  |      addq.l #2,d1
    2684:	|     |  |      move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    268a:	|     |  |      add.w d0,d0
    268c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    268e:	|     |  |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2694:	|     |  |      move.l a0,d0
    2696:	|     |  |      addq.l #2,d0
    2698:	|     |  |      move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    269e:	|     |  |      move.l 52(sp),d0
    26a2:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    26a4:	|     |  |      movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    26aa:	|     |  |      clr.w (a0)
    26ac:	|     +--|----- bra.w 2808 <CstPasteChar+0x58a>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    26b0:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    26b6:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    26ba:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26be:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    26c2:	|     |         movea.l 84(sp),a0
    26c6:	|     |         move.l 24(a0),d0
    26ca:	|     |         move.l d0,d2
    26cc:	|     |         movea.l 84(sp),a0
    26d0:	|     |         move.l (a0),d0
    26d2:	|     |         movea.l d0,a0
    26d4:	|     |         cmpa.w #0,a0
    26d8:	|     |     ,-- bge.s 26de <CstPasteChar+0x460>
    26da:	|     |     |   lea 15(a0),a0
    26de:	|     |     '-> move.l a0,d0
    26e0:	|     |         asr.l #4,d0
    26e2:	|     |         move.l 48(sp),-(sp)
    26e6:	|     |         move.l d0,-(sp)
    26e8:	|     |         jsr 17c30 <__mulsi3>
    26ee:	|     |         addq.l #8,sp
    26f0:	|     |         add.l d0,d0
    26f2:	|     |         move.l d2,d1
    26f4:	|     |         add.l d0,d1
    26f6:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26fa:	|     |         move.l 1ca46 <winWidth>,d0
    2700:	|     |         move.l 52(sp),-(sp)
    2704:	|     |         move.l d0,-(sp)
    2706:	|     |         jsr 17c30 <__mulsi3>
    270c:	|     |         addq.l #8,sp
    270e:	|     |         lsr.l #3,d0
    2710:	|     |         move.l 24(sp),d1
    2714:	|     |         add.l d0,d1
    2716:	|     |         move.w 10(sp),d0
    271a:	|     |     ,-- bpl.s 2720 <CstPasteChar+0x4a2>
    271c:	|     |     |   addi.w #15,d0
    2720:	|     |     '-> asr.w #4,d0
    2722:	|     |         movea.w d0,a0
    2724:	|     |         move.l a0,d0
    2726:	|     |         add.l a0,d0
    2728:	|     |         move.l d1,d2
    272a:	|     |         add.l d0,d2
    272c:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2730:	|     |         move.l 1ca46 <winWidth>,d0
    2736:	|     |         move.l 52(sp),-(sp)
    273a:	|     |         move.l d0,-(sp)
    273c:	|     |         jsr 17c30 <__mulsi3>
    2742:	|     |         addq.l #8,sp
    2744:	|     |         lsr.l #3,d0
    2746:	|     |         move.l 24(sp),d1
    274a:	|     |         add.l d0,d1
    274c:	|     |         move.w 10(sp),d0
    2750:	|     |     ,-- bpl.s 2756 <CstPasteChar+0x4d8>
    2752:	|     |     |   addi.w #15,d0
    2756:	|     |     '-> asr.w #4,d0
    2758:	|     |         movea.w d0,a0
    275a:	|     |         move.l a0,d0
    275c:	|     |         add.l a0,d0
    275e:	|     |         move.l d1,d2
    2760:	|     |         add.l d0,d2
    2762:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2766:	|     |         move.w 10(sp),d0
    276a:	|     |         andi.w #-32753,d0
    276e:	|     |     ,-- bpl.s 2778 <CstPasteChar+0x4fa>
    2770:	|     |     |   subq.w #1,d0
    2772:	|     |     |   ori.w #-16,d0
    2776:	|     |     |   addq.w #1,d0
    2778:	|     |     '-> ext.l d0
    277a:	|     |         moveq #12,d1
    277c:	|     |         lsl.l d1,d0
    277e:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2782:	|     |         movea.l 84(sp),a0
    2786:	|     |         move.l (a0),d0
    2788:	|     |         movea.l d0,a0
    278a:	|     |         cmpa.w #0,a0
    278e:	|     |     ,-- bge.s 2794 <CstPasteChar+0x516>
    2790:	|     |     |   lea 15(a0),a0
    2794:	|     |     '-> move.l a0,d0
    2796:	|     |         asr.l #4,d0
    2798:	|     |         move.l d0,d0
    279a:	|     |         add.w 76(sp),d0
    279e:	|     |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    27a4:	|     |         move.l a0,d1
    27a6:	|     |         addq.l #2,d1
    27a8:	|     |         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    27ae:	|     |         add.w 78(sp),d0
    27b2:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27b4:	|     |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    27ba:	|     |         move.l a0,d0
    27bc:	|     |         addq.l #2,d0
    27be:	|     |         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    27c4:	|     |         move.l 44(sp),d0
    27c8:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27ca:	|     |         move.w 10(sp),d0
    27ce:	|     |     ,-- bpl.s 27d4 <CstPasteChar+0x556>
    27d0:	|     |     |   addi.w #15,d0
    27d4:	|     |     '-> asr.w #4,d0
    27d6:	|     |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    27dc:	|     |         move.l a0,d1
    27de:	|     |         addq.l #2,d1
    27e0:	|     |         move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    27e6:	|     |         add.w d0,d0
    27e8:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ea:	|     |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    27f0:	|     |         move.l a0,d0
    27f2:	|     |         addq.l #2,d0
    27f4:	|     |         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    27fa:	|     |         move.l 52(sp),d0
    27fe:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    2800:	|     |         movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2806:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2808:	|     '-------> moveq #0,d0
    280a:	|               move.w 74(sp),d0
    280e:	|               moveq #0,d1
    2810:	|               not.w d1
    2812:	|               asr.l d0,d1
    2814:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2818:	|               moveq #0,d1
    281a:	|               move.w 76(sp),d1
    281e:	|               moveq #0,d0
    2820:	|               move.w 78(sp),d0
    2824:	|               sub.l d0,d1
    2826:	|               move.l d1,d0
    2828:	|               add.w d0,d0
    282a:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    282e:	|               move.l 1ca46 <winWidth>,d0
    2834:	|               lsr.l #3,d0
    2836:	|               move.l d0,d2
    2838:	|               move.w 76(sp),d1
    283c:	|               sub.w 78(sp),d1
    2840:	|               move.l 40(sp),d0
    2844:	|               sub.w d0,d1
    2846:	|               move.w d1,d0
    2848:	|               add.w d1,d0
    284a:	|               add.w d2,d0
    284c:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2850:	|               move.l 1ca46 <winWidth>,d0
    2856:	|               lsr.l #3,d0
    2858:	|               move.l d0,d2
    285a:	|               move.w 76(sp),d1
    285e:	|               sub.w 78(sp),d1
    2862:	|               move.l 40(sp),d0
    2866:	|               sub.w d0,d1
    2868:	|               move.w d1,d0
    286a:	|               add.w d1,d0
    286c:	|               add.w d2,d0
    286e:	|               move.w d0,16(sp)

  WaitBlit();
    2872:	|               move.l 1cafe <GfxBase>,d0
    2878:	|               movea.l d0,a6
    287a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    287e:	|               movea.l 28(sp),a0
    2882:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2888:	|               movea.l 28(sp),a0
    288c:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2892:	|               move.w 20(sp),d0
    2896:	|               movea.l 28(sp),a0
    289a:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    289e:	|               move.w 18(sp),d0
    28a2:	|               movea.l 28(sp),a0
    28a6:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    28aa:	|               move.w 16(sp),d0
    28ae:	|               movea.l 28(sp),a0
    28b2:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    28b6:	|               move.l 1ca46 <winWidth>,d0
    28bc:	|               lsr.l #3,d0
    28be:	|               move.l d0,d1
    28c0:	|               move.l 1ca4a <winHeight>,d0
    28c6:	|               move.l d0,d0
    28c8:	|               move.w d1,d2
    28ca:	|               muls.w d0,d2
    28cc:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    28d0:	|               move.w 1ca00 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    28d8:	|               move.w 38(sp),d0
    28dc:	|               andi.w #1,d0
    28e0:	|               move.w d0,12(sp)
  if(tmp2) {
    28e4:	|        ,----- beq.s 28ee <CstPasteChar+0x670>
    minterm = 0xbfa;
    28e6:	|        |      move.w #3066,36(sp)
    28ec:	|        |  ,-- bra.s 28f4 <CstPasteChar+0x676>
  } else {
    minterm = 0xb0a;
    28ee:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    28f4:	|           '-> clr.l 32(sp)
    28f8:	|     ,-------- bra.w 2996 <CstPasteChar+0x718>
  {

    custom->bltcon0 = bltcon0 + minterm;
    28fc:	|  ,--|-------> move.l 56(sp),d0
    2900:	|  |  |         add.w 36(sp),d0
    2904:	|  |  |         movea.l 28(sp),a0
    2908:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    290c:	|  |  |         move.l 68(sp),d0
    2910:	|  |  |         movea.l 28(sp),a0
    2914:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2918:	|  |  |         move.l 64(sp),d0
    291c:	|  |  |         movea.l 28(sp),a0
    2920:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2924:	|  |  |         move.l 60(sp),d0
    2928:	|  |  |         movea.l 28(sp),a0
    292c:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2930:	|  |  |         move.l 44(sp),d0
    2934:	|  |  |         lsl.w #6,d0
    2936:	|  |  |         move.l 40(sp),d1
    293a:	|  |  |         add.w d1,d0
    293c:	|  |  |         sub.w 76(sp),d0
    2940:	|  |  |         add.w 78(sp),d0
    2944:	|  |  |         movea.l 28(sp),a0
    2948:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    294c:	|  |  |         moveq #0,d0
    294e:	|  |  |         move.w 14(sp),d0
    2952:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2956:	|  |  |         moveq #0,d0
    2958:	|  |  |         move.w 14(sp),d0
    295c:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2960:	|  |  |         move.w 38(sp),d0
    2964:	|  |  |         lsr.w #1,d0
    2966:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    296a:	|  |  |         move.w 38(sp),d1
    296e:	|  |  |         andi.w #1,d1
    2972:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2976:	|  |  |  ,----- beq.s 2980 <CstPasteChar+0x702>
      minterm = 0xbfa;
    2978:	|  |  |  |      move.w #3066,36(sp)
    297e:	|  |  |  |  ,-- bra.s 2986 <CstPasteChar+0x708>
    } else {
      minterm = 0xb0a;
    2980:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();     
    2986:	|  |  |     '-> move.l 1cafe <GfxBase>,d0
    298c:	|  |  |         movea.l d0,a6
    298e:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2992:	|  |  |         addq.l #1,32(sp)
    2996:	|  |  '-------> moveq #4,d2
    2998:	|  |            cmp.l 32(sp),d2
    299c:	|  '----------- bge.w 28fc <CstPasteChar+0x67e>
  }   
  //custom->color[0] = 0x000;
}
    29a0:	'-------------> move.l (sp)+,d2
    29a2:	                movea.l (sp)+,a6
    29a4:	                lea 72(sp),sp
    29a8:	                rts

000029aa <CstRestoreScreen>:


void CstRestoreScreen()
{
    29aa:	                   lea -24(sp),sp
    29ae:	                   move.l a6,-(sp)
    29b0:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    29b2:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    29ba:	                   move.l 1ca22 <CstCleanupQueueDrawBuffer>,d0
    29c0:	,----------------- beq.w 2bc8 <CstRestoreScreen+0x21e>
    29c4:	|                  move.l 1ca1a <CstDrawBuffer>,d0
    29ca:	+----------------- beq.w 2bc8 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    29ce:	|                  move.l 1cafe <GfxBase>,d0
    29d4:	|                  movea.l d0,a6
    29d6:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    29da:	|                  movea.l 16(sp),a0
    29de:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    29e4:	|                  movea.l 16(sp),a0
    29e8:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    29ee:	|                  movea.l 16(sp),a0
    29f2:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    29f8:	|     ,----------- bra.w 2bbc <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    29fc:	|  ,--|----------> movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a02:	|  |  |            move.l 4(a0),d0
    2a06:	|  |  |  ,-------- beq.w 2b8a <CstRestoreScreen+0x1e0>
    2a0a:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a10:	|  |  |  |         movea.l 4(a0),a0
    2a14:	|  |  |  |         move.l 16(a0),d0
    2a18:	|  |  |  |         moveq #2,d1
    2a1a:	|  |  |  |         cmp.l d0,d1
    2a1c:	|  |  |  +-------- blt.w 2b8a <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a20:	|  |  |  |         move.l 1ca46 <winWidth>,d0
    2a26:	|  |  |  |         lsr.l #3,d0
    2a28:	|  |  |  |         move.l d0,d1
    2a2a:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a30:	|  |  |  |         move.w 8(a0),d0
    2a34:	|  |  |  |         add.w d0,d0
    2a36:	|  |  |  |         sub.w d0,d1
    2a38:	|  |  |  |         movea.l 16(sp),a0
    2a3c:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a40:	|  |  |  |         move.l 1ca46 <winWidth>,d0
    2a46:	|  |  |  |         lsr.l #3,d0
    2a48:	|  |  |  |         move.l d0,d1
    2a4a:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a50:	|  |  |  |         move.w 8(a0),d0
    2a54:	|  |  |  |         add.w d0,d0
    2a56:	|  |  |  |         sub.w d0,d1
    2a58:	|  |  |  |         movea.l 16(sp),a0
    2a5c:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a60:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a66:	|  |  |  |         move.w 14(a0),d0
    2a6a:	|  |  |  |         move.w d0,d0
    2a6c:	|  |  |  |         andi.l #65535,d0
    2a72:	|  |  |  |         move.l 1ca46 <winWidth>,d1
    2a78:	|  |  |  |         move.l d1,-(sp)
    2a7a:	|  |  |  |         move.l d0,-(sp)
    2a7c:	|  |  |  |         jsr 17c30 <__mulsi3>
    2a82:	|  |  |  |         addq.l #8,sp
    2a84:	|  |  |  |         move.l d0,d1
    2a86:	|  |  |  |         lsr.l #3,d1
    2a88:	|  |  |  |         move.l 1ca08 <CstBackDrop>,d0
    2a8e:	|  |  |  |         add.l d0,d1
    2a90:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2a96:	|  |  |  |         move.w 12(a0),d0
    2a9a:	|  |  |  |         move.w d0,d0
    2a9c:	|  |  |  |         andi.l #65535,d0
    2aa2:	|  |  |  |         move.l d1,d2
    2aa4:	|  |  |  |         add.l d0,d2
    2aa6:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2aaa:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2ab0:	|  |  |  |         move.w 14(a0),d0
    2ab4:	|  |  |  |         move.w d0,d0
    2ab6:	|  |  |  |         andi.l #65535,d0
    2abc:	|  |  |  |         move.l 1ca46 <winWidth>,d1
    2ac2:	|  |  |  |         move.l d1,-(sp)
    2ac4:	|  |  |  |         move.l d0,-(sp)
    2ac6:	|  |  |  |         jsr 17c30 <__mulsi3>
    2acc:	|  |  |  |         addq.l #8,sp
    2ace:	|  |  |  |         move.l d0,d1
    2ad0:	|  |  |  |         lsr.l #3,d1
    2ad2:	|  |  |  |         move.l 1ca1a <CstDrawBuffer>,d0
    2ad8:	|  |  |  |         add.l d0,d1
    2ada:	|  |  |  |         movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2ae0:	|  |  |  |         move.w 12(a0),d0
    2ae4:	|  |  |  |         move.w d0,d0
    2ae6:	|  |  |  |         andi.l #65535,d0
    2aec:	|  |  |  |         move.l d1,d2
    2aee:	|  |  |  |         add.l d0,d2
    2af0:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2af4:	|  |  |  |         clr.l 20(sp)
    2af8:	|  |  |  |     ,-- bra.w 2b80 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2afc:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2b00:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b04:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b08:	|  |  |  |  |  |   move.l 24(sp),d0
    2b0c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b10:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2b14:	|  |  |  |  |  |   movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2b1a:	|  |  |  |  |  |   move.w 10(a0),d0
    2b1e:	|  |  |  |  |  |   lsl.w #6,d0
    2b20:	|  |  |  |  |  |   movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2b26:	|  |  |  |  |  |   move.w 8(a0),d1
    2b2a:	|  |  |  |  |  |   add.w d1,d0
    2b2c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b30:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b34:	|  |  |  |  |  |   move.l 1ca46 <winWidth>,d0
    2b3a:	|  |  |  |  |  |   lsr.l #3,d0
    2b3c:	|  |  |  |  |  |   move.l 1ca4a <winHeight>,d1
    2b42:	|  |  |  |  |  |   move.l d1,-(sp)
    2b44:	|  |  |  |  |  |   move.l d0,-(sp)
    2b46:	|  |  |  |  |  |   jsr 17c30 <__mulsi3>
    2b4c:	|  |  |  |  |  |   addq.l #8,sp
    2b4e:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b52:	|  |  |  |  |  |   move.l 1ca46 <winWidth>,d0
    2b58:	|  |  |  |  |  |   lsr.l #3,d0
    2b5a:	|  |  |  |  |  |   move.l 1ca4a <winHeight>,d1
    2b60:	|  |  |  |  |  |   move.l d1,-(sp)
    2b62:	|  |  |  |  |  |   move.l d0,-(sp)
    2b64:	|  |  |  |  |  |   jsr 17c30 <__mulsi3>
    2b6a:	|  |  |  |  |  |   addq.l #8,sp
    2b6c:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2b70:	|  |  |  |  |  |   move.l 1cafe <GfxBase>,d0
    2b76:	|  |  |  |  |  |   movea.l d0,a6
    2b78:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b7c:	|  |  |  |  |  |   addq.l #1,20(sp)
    2b80:	|  |  |  |  |  '-> moveq #4,d0
    2b82:	|  |  |  |  |      cmp.l 20(sp),d0
    2b86:	|  |  |  |  '----- bge.w 2afc <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2b8a:	|  |  |  '-------> move.l 1ca22 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2b92:	|  |  |            movea.l 1ca22 <CstCleanupQueueDrawBuffer>,a0
    2b98:	|  |  |            move.l 16(a0),d0
    2b9c:	|  |  |            move.l d0,1ca22 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2ba2:	|  |  |            move.l 12(sp),8(sp)
    2ba8:	|  |  |            move.l 1caf2 <SysBase>,d0
    2bae:	|  |  |            movea.l d0,a6
    2bb0:	|  |  |            movea.l 8(sp),a1
    2bb4:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2bb8:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2bbc:	|  |  '----------> move.l 1ca22 <CstCleanupQueueDrawBuffer>,d0
    2bc2:	|  '-------------- bne.w 29fc <CstRestoreScreen+0x52>
    2bc6:	|              ,-- bra.s 2bca <CstRestoreScreen+0x220>
    return;
    2bc8:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2bca:	               '-> move.l (sp)+,d2
    2bcc:	                   movea.l (sp)+,a6
    2bce:	                   lea 24(sp),sp
    2bd2:	                   rts

00002bd4 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2bd4:	                                                                               lea -44(sp),sp
    2bd8:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2bdc:	                                                                               movea.l 92(sp),a2
    2be0:	                                                                               move.l 96(sp),80(sp)
    2be6:	                                                                               move.l 100(sp),d4
    2bea:	                                                                               move.l 104(sp),56(sp)
    2bf0:	                                                                               move.l 108(sp),d2
    2bf4:	                                                                               move.w d4,d3
    2bf6:	                                                                               move.w 58(sp),d6
    2bfa:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2bfc:	                                                                               movea.w d6,a5
    2bfe:	                                                                               movea.w d4,a4
    2c00:	                                                                               move.l a5,-(sp)
    2c02:	                                                                               move.l a4,-(sp)
    2c04:	                                                                               move.l 1cb4e <zBuffer>,-(sp)
    2c0a:	                                                                               move.l a2,-(sp)
    2c0c:	                                                                               jsr 150a <CstDrawZBuffer>
    2c12:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2c14:	                                                                               lea 16(sp),sp
    2c18:	                                                                               moveq #1,d0
    2c1a:	                                                                               cmp.w d2,d0
    2c1c:	                                                ,----------------------------- beq.w 302e <CstScaleSprite+0x45a>
    2c20:	                                                |                              moveq #2,d1
    2c22:	                                                |                              cmp.w d2,d1
    2c24:	                                                |                       ,----- beq.w 2ee8 <CstScaleSprite+0x314>
    2c28:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c2a:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c2e:	                                                |  |                    |      move.l a5,d0
    2c30:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c32:	                                                |  |                    |      tst.w d6
    2c34:	                                                |  |           ,--------|----- blt.w 2f04 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c38:	                                                |  |           |  ,-----|----> movea.l 1ca4a <winHeight>,a0
    2c3e:	                                                |  |           |  |     |      cmp.l a0,d0
    2c40:	                                                |  |  ,--------|--|-----|----- ble.w 3038 <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2c44:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c46:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 30fa <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2c4a:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c4e:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c50:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2c54:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c56:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2c58:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2c5a:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2c5c:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2c5e:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f24 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2c62:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1ca46 <winWidth>,d3
    2c68:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2c6a:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3046 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2c6e:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2c70:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2c72:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 30fa <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2c76:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2c78:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2c7a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2c7c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2c7e:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17c30 <__mulsi3>,a4
    2c84:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2c86:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2c88:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2c8c:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2c8e:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c90:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c92:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2c94:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2c98:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2c9c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2ca0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2ca2:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2ca4:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ca6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2ca8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2caa:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2cac:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2cae:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2cb0:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2cb2:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2cba:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2cc4:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2cc6:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2cc8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2cd0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2cd4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2cda:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2cdc:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2cde:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2ce0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2ce2:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2ce6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2cea:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2cec:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2cee:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2cf0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2cf4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2cf8:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2cfa:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2cfc:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 340e <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2d00:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2d06:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2d08:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34b6 <CstScaleSprite+0x8e2>
    2d0c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2d0e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2d10:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2d12:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2d18:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2d1e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 8(a0),a1
    2d22:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1ca2a <CstBackDropBufferApplyCursor>
    2d28:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    2d2e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d32:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d38:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d3a:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2d3c:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2d3e:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2d40:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2d42:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3304 <CstScaleSprite+0x730>
    2d46:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2d48:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2d4a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #117502,d3
    2d50:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d52:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d54:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d58:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
  custom->bltalwm = bltalwm;
    2d60:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
  custom->bltamod = bltamod;
    2d66:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
  custom->bltbmod = bltbmod;
    2d6c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
  custom->bltcmod = bltcmod;
    2d72:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
  custom->bltdmod = bltdmod;
    2d78:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
  custom->bltcon0 = bltcon0;
    2d7e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
  custom->bltcon1 = bltcon1;  
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d90:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2d94:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d96:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2d98:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2d9a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2d9e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2da4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2da6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1ca46 <winWidth>,d4
    2dac:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2dae:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1ca4c <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2db4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2dba:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2dc0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2dc8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2dce:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dd6:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3202 <CstScaleSprite+0x62e>
    2dda:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2ddc:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2dde:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2de0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2de2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2de8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2dec:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2dee:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2df0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2df2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2df4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2df8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2dfa:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2e00:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e06:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e0c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e12:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e14:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3244 <CstScaleSprite+0x670>
    2e18:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e1a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e1c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e1e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e20:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e26:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e28:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e2a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e2c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e2e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e32:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e34:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2e3a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e40:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e46:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e4c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e4e:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 3282 <CstScaleSprite+0x6ae>
    2e52:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e54:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e56:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e58:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e5a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e60:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e62:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e64:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e66:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e68:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e6c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e6e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2e74:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e7a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e80:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e86:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e88:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32c0 <CstScaleSprite+0x6ec>
    2e8c:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e8e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e90:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e92:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e94:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e9a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2e9e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2ea0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ea2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ea4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ea8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2eaa:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2eb0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2eb6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2ebc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ec2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ec4:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 31de <CstScaleSprite+0x60a>
    2ec8:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    WaitBlit();
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1ca14 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1ca08 <CstBackDrop>,a3
    if(y + single->height < 0) {
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c38 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2f06:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 30fa <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2c62 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f26:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 30fa <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    2f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1ca46 <winWidth>,d3
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17c30 <__mulsi3>,a4
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    2f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 3110 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    2f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    2fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 3176 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    2ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 8(a0),a1
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1ca2a <CstBackDropBufferApplyCursor>
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    3026:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d46 <CstScaleSprite+0x172>
    302a:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3304 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1ca1a <CstDrawBuffer>,a3
      break;
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c2a <CstScaleSprite+0x56>
    ystartdst = y;
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c56 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17c30 <__mulsi3>,a4
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 339e <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 347c <CstScaleSprite+0x8a8>
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 8(a0),a1
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1ca2a <CstBackDropBufferApplyCursor>
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    30f2:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d46 <CstScaleSprite+0x172>
    30f6:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3304 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    30fa:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98489,92(sp)
}
    3102:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3106:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    310a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 172a4 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3110:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3114:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    3118:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    311c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    3122:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3124:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    3128:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    312a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    312c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    312e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    3132:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    3136:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    3138:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    313a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    313c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    313e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3140:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    3146:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3150:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3156:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3158:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    315c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    315e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    316a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    3170:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    3172:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 2fec <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1ca22 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    317c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1caf2 <SysBase>,a6
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3184:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    318a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1ca22 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3196:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3198:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    319e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    31a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    31a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 34ec <CstScaleSprite+0x918>
    31ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    31b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    31b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    31be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1ca46 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    31cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    31d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    31d6:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d46 <CstScaleSprite+0x172>
    31da:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3304 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31de:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    31e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    31e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    31ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    WaitBlit();
    31f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    31f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3200:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3202:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3204:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3206:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    320a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    3214:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    3218:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    321a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3220:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3224:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3226:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    322c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    3232:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    3238:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    323e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    3240:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2e18 <CstScaleSprite+0x244>
    3244:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3246:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3248:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    324a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    324c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    324e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    3250:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    3256:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3258:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    325a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    325c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    325e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3262:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3264:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    326a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    3270:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    3276:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    327c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    327e:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e52 <CstScaleSprite+0x27e>
    3282:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    3284:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    3286:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3288:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    328a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    328c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    328e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    3294:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3296:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3298:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    329a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    329c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32a0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32a2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    32a8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    32ae:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    32b4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32ba:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32bc:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2e8c <CstScaleSprite+0x2b8>
    32c0:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    32c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    32c4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    32c6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    32c8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    32ca:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    32cc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    32d2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    32d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    32d8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    32da:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    32dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32e0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    32e8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    32ee:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    32f4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32fa:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    32fc:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2ec8 <CstScaleSprite+0x2f4>
    3300:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 31de <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3304:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    3306:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3308:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    330a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #117502,d3
    3310:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    3312:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3314:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3318:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
  custom->bltalwm = bltalwm;
    3320:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
  custom->bltamod = bltamod;
    3326:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
  custom->bltbmod = bltbmod;
    332c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
  custom->bltcmod = bltcmod;
    3332:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
  custom->bltdmod = bltdmod;
    3338:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
  custom->bltcon0 = bltcon0;
    333e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
  custom->bltcon1 = bltcon1;  
    3346:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    334e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3350:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    3354:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3356:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    3358:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    335a:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    335e:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    3364:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    3366:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1ca46 <winWidth>,d4
    336c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1ca4c <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3374:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    337a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    3380:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    3388:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    338e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3394:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    3396:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2dda <CstScaleSprite+0x206>
    339a:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 3202 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    339e:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1ca22 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33a4:	|  |  |  |  |                                         |  |  |  |               movea.l 1caf2 <SysBase>,a6
    33aa:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33ac:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33ae:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33b2:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33b4:	|  |  |  |  |                                         |  |  |  |               move.l d0,1ca22 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33ba:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33be:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33c0:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    33c6:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    33cc:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    33ce:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    33d0:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3516 <CstScaleSprite+0x942>
    33d4:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    33d6:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    33d8:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    33dc:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    33e2:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33e6:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33ea:	|  |  |  |  |                                         |  |  |  |     |         move.l 1ca46 <winWidth>,d3
    33f0:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    33f6:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    33fa:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    33fc:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33fe:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    3400:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    3402:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3404:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    3406:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d46 <CstScaleSprite+0x172>
    340a:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3304 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    340e:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1ca22 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3414:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1caf2 <SysBase>,a6
    341a:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    341c:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    341e:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3422:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3424:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1ca22 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    342a:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    342e:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3430:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3436:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    343c:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    343e:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    3440:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3548 <CstScaleSprite+0x974>
    3444:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    3446:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    3448:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    344c:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3452:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3458:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    345e:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1ca46 <winWidth>,d3
    3464:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    346a:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    346c:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    346e:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    3470:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    3472:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    3474:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d46 <CstScaleSprite+0x172>
    3478:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3304 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    347c:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    347e:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    3480:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3482:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    3484:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3486:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    348c:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3490:	|  |                                                  |     |  |  |  |  |  |   lea 8(a0),a1
    3494:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1ca2a <CstBackDropBufferApplyCursor>
    349a:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    349e:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    34a2:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    34a8:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34ac:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    34ae:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    34b0:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34b2:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 30ea <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34b6:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34b8:	|                                                           |  |  |  |  |  |   add.l d1,d0
    34ba:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34bc:	|                                                           |  |  |  |  |  |   add.w d0,d2
    34be:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34c0:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34c6:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34cc:	|                                                           |  |  |  |  |  |   lea 8(a0),a1
    34d0:	|                                                           |  |  |  |  |  |   move.l a1,1ca2a <CstBackDropBufferApplyCursor>
    34d6:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    34dc:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    34e0:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34e6:	|                                                           |  |  |  |  |  |   clr.w d2
    34e8:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d3a <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    34ec:	                                                            |  '--|--|--|--|-> moveq #15,d0
    34ee:	                                                            |     |  |  |  |   add.l d1,d0
    34f0:	                                                            |     |  |  |  |   asr.l #4,d0
    34f2:	                                                            |     |  |  |  |   add.w 78(sp),d0
    34f6:	                                                            |     |  |  |  |   add.w d2,d0
    34f8:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    34fc:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3502:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3506:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    350a:	                                                            |     |  |  |  |   move.l 1ca46 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3510:	                                                            |     |  |  |  |   suba.l a4,a4
    3512:	                                                            '-----|--|--|--|-- bra.w 31ce <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3516:	                                                                  |  '--|--|-> moveq #15,d0
    3518:	                                                                  |     |  |   add.l d1,d0
    351a:	                                                                  |     |  |   asr.l #4,d0
    351c:	                                                                  |     |  |   addq.w #1,d0
    351e:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3522:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3528:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    352c:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3530:	                                                                  |     |  |   move.l 1ca46 <winWidth>,d3
    3536:	                                                                  |     |  |   move.w #-1,76(sp)
    353c:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3540:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    3542:	                                                                  |     |  |   clr.w d6
    3544:	                                                                  '-----|--|-- bra.w 33fe <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3548:	                                                                        |  '-> moveq #15,d0
    354a:	                                                                        |      add.l d1,d0
    354c:	                                                                        |      asr.l #4,d0
    354e:	                                                                        |      add.w d0,d2
    3550:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3554:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    355a:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3560:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3566:	                                                                        |      move.l 1ca46 <winWidth>,d3
    356c:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3572:	                                                                        |      clr.w d2
    3574:	                                                                        '----- bra.w 346c <CstScaleSprite+0x898>

00003578 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3578:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    357a:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3580:	move.l 8(sp),d0
    3584:	movea.l (sp),a0
    3586:	move.l d0,128(a0)
}
    358a:	nop
    358c:	addq.l #4,sp
    358e:	rts

00003590 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3590:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3594:	move.l 1ca16 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    359c:	move.l 1ca1a <CstDrawBuffer>,d0
    35a2:	move.l d0,1ca16 <CstViewBuffer>
  CstDrawBuffer = tmp;
    35a8:	move.l 16(sp),1ca1a <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35b0:	move.l 1ca1e <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35b8:	move.l 1ca22 <CstCleanupQueueDrawBuffer>,d0
    35be:	move.l d0,1ca1e <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    35c4:	move.l 12(sp),1ca22 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    35cc:	move.l 1ca10 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    35d4:	move.l 1ca16 <CstViewBuffer>,d0
    35da:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    35de:	move.l 4(sp),d0
    35e2:	clr.w d0
    35e4:	swap d0
    35e6:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    35ea:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    35ee:	movea.w #118,a0
    35f2:	adda.l 8(sp),a0
    35f6:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    35f8:	movea.w #114,a0
    35fc:	adda.l 8(sp),a0
    3600:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3604:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    360c:	move.l 4(sp),d0
    3610:	clr.w d0
    3612:	swap d0
    3614:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3618:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    361c:	movea.w #126,a0
    3620:	adda.l 8(sp),a0
    3624:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3626:	movea.w #122,a0
    362a:	adda.l 8(sp),a0
    362e:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3632:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    363a:	move.l 4(sp),d0
    363e:	clr.w d0
    3640:	swap d0
    3642:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3646:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    364a:	movea.l 8(sp),a0
    364e:	lea 134(a0),a0
    3652:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3654:	movea.l 8(sp),a0
    3658:	lea 130(a0),a0
    365c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3660:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3668:	move.l 4(sp),d0
    366c:	clr.w d0
    366e:	swap d0
    3670:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3674:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3678:	movea.l 8(sp),a0
    367c:	lea 142(a0),a0
    3680:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3682:	movea.l 8(sp),a0
    3686:	lea 138(a0),a0
    368a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    368e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3696:	move.l 4(sp),d0
    369a:	clr.w d0
    369c:	swap d0
    369e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36a2:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36a6:	movea.l 8(sp),a0
    36aa:	lea 150(a0),a0
    36ae:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36b0:	movea.l 8(sp),a0
    36b4:	lea 146(a0),a0
    36b8:	move.w 2(sp),(a0)

}
    36bc:	nop
    36be:	lea 20(sp),sp
    36c2:	rts

000036c4 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    36c4:	          lea -80(sp),sp
    36c8:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    36ca:	          pea 180ec <PutChar+0x3a6>
    36d0:	          jsr 172a4 <KPrintF>
    36d6:	          addq.l #4,sp

  width = width / 8;
    36d8:	          move.l 88(sp),d0
    36dc:	      ,-- bpl.s 36e0 <CstReserveBackdrop+0x1c>
    36de:	      |   addq.l #7,d0
    36e0:	      '-> asr.l #3,d0
    36e2:	          move.l d0,88(sp)

  if( width < 40) 
    36e6:	          moveq #39,d0
    36e8:	          cmp.l 88(sp),d0
    36ec:	      ,-- blt.s 3702 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    36ee:	      |   pea 18106 <PutChar+0x3c0>
    36f4:	      |   jsr 172a4 <KPrintF>
    36fa:	      |   addq.l #4,sp
    return FALSE;
    36fc:	      |   clr.w d0
    36fe:	,-----|-- bra.w 3aa4 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3702:	|     '-> pea 18144 <PutChar+0x3fe>
    3708:	|         jsr 172a4 <KPrintF>
    370e:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3710:	|         move.l 88(sp),-(sp)
    3714:	|         jsr ff0 <CstCreateCopperlist>
    371a:	|         addq.l #4,sp
    371c:	|         move.l d0,1ca10 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3722:	|         pea 18164 <PutChar+0x41e>
    3728:	|         jsr 172a4 <KPrintF>
    372e:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3730:	|         move.l 88(sp),d1
    3734:	|         move.l 92(sp),d0
    3738:	|         muls.w d1,d0
    373a:	|         move.w d0,1ca06 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3740:	|         move.w 1ca06 <CstBackdropSizePlane>,d1
    3746:	|         move.w d1,d0
    3748:	|         add.w d0,d0
    374a:	|         add.w d0,d0
    374c:	|         add.w d1,d0
    374e:	|         move.w d0,1ca04 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3754:	|         move.w 1ca04 <CstBackdropSize>,d0
    375a:	|         move.w d0,d0
    375c:	|         andi.l #65535,d0
    3762:	|         move.l d0,72(sp)
    3766:	|         moveq #2,d1
    3768:	|         move.l d1,68(sp)
    376c:	|         move.l 1caf2 <SysBase>,d0
    3772:	|         movea.l d0,a6
    3774:	|         move.l 72(sp),d0
    3778:	|         move.l 68(sp),d1
    377c:	|         jsr -684(a6)
    3780:	|         move.l d0,64(sp)
    3784:	|         move.l 64(sp),d0
    3788:	|         move.l d0,1ca08 <CstBackDrop>
  if( !CstBackDrop)
    378e:	|         move.l 1ca08 <CstBackDrop>,d0
    3794:	|     ,-- bne.s 37aa <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3796:	|     |   pea 1818b <PutChar+0x445>
    379c:	|     |   jsr 172a4 <KPrintF>
    37a2:	|     |   addq.l #4,sp
    return FALSE;  
    37a4:	|     |   clr.w d0
    37a6:	+-----|-- bra.w 3aa4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37aa:	|     '-> pea 181c3 <PutChar+0x47d>
    37b0:	|         jsr 172a4 <KPrintF>
    37b6:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37b8:	|         move.l 1ca08 <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37c0:	|         clr.l 76(sp)
    37c4:	|     ,-- bra.s 37da <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    37c6:	|  ,--|-> move.l 80(sp),d0
    37ca:	|  |  |   move.l d0,d1
    37cc:	|  |  |   addq.l #4,d1
    37ce:	|  |  |   move.l d1,80(sp)
    37d2:	|  |  |   movea.l d0,a0
    37d4:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    37d6:	|  |  |   addq.l #1,76(sp)
    37da:	|  |  '-> move.w 1ca04 <CstBackdropSize>,d0
    37e0:	|  |      lsr.w #2,d0
    37e2:	|  |      move.w d0,d0
    37e4:	|  |      andi.l #65535,d0
    37ea:	|  |      cmp.l 76(sp),d0
    37ee:	|  '----- bgt.s 37c6 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    37f0:	|         move.w 1ca04 <CstBackdropSize>,d0
    37f6:	|         move.w d0,d0
    37f8:	|         andi.l #65535,d0
    37fe:	|         move.l 88(sp),d1
    3802:	|         add.l d1,d1
    3804:	|         add.l d1,d0
    3806:	|         move.l d0,60(sp)
    380a:	|         moveq #2,d0
    380c:	|         move.l d0,56(sp)
    3810:	|         move.l 1caf2 <SysBase>,d0
    3816:	|         movea.l d0,a6
    3818:	|         move.l 60(sp),d0
    381c:	|         move.l 56(sp),d1
    3820:	|         jsr -684(a6)
    3824:	|         move.l d0,52(sp)
    3828:	|         move.l 52(sp),d0
    382c:	|         move.l d0,1ca1a <CstDrawBuffer>
  if( !CstDrawBuffer)
    3832:	|         move.l 1ca1a <CstDrawBuffer>,d0
    3838:	|     ,-- bne.s 384e <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    383a:	|     |   pea 181e9 <PutChar+0x4a3>
    3840:	|     |   jsr 172a4 <KPrintF>
    3846:	|     |   addq.l #4,sp
    return FALSE;  
    3848:	|     |   clr.w d0
    384a:	+-----|-- bra.w 3aa4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    384e:	|     '-> pea 18223 <PutChar+0x4dd>
    3854:	|         jsr 172a4 <KPrintF>
    385a:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    385c:	|         move.l #10000,48(sp)
    3864:	|         clr.l 44(sp)
    3868:	|         move.l 1caf2 <SysBase>,d0
    386e:	|         movea.l d0,a6
    3870:	|         move.l 48(sp),d0
    3874:	|         move.l 44(sp),d1
    3878:	|         jsr -684(a6)
    387c:	|         move.l d0,40(sp)
    3880:	|         move.l 40(sp),d0
    3884:	|         move.l d0,1ca26 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    388a:	|         move.l 1ca26 <CstBackDropBufferApplyStart>,d0
    3890:	|     ,-- bne.s 38a6 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3892:	|     |   pea 1824b <PutChar+0x505>
    3898:	|     |   jsr 172a4 <KPrintF>
    389e:	|     |   addq.l #4,sp
    return FALSE;  
    38a0:	|     |   clr.w d0
    38a2:	+-----|-- bra.w 3aa4 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38a6:	|     '-> move.l 1ca26 <CstBackDropBufferApplyStart>,d0
    38ac:	|         move.l d0,1ca2a <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38b2:	|         movea.l 1ca26 <CstBackDropBufferApplyStart>,a0
    38b8:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38ba:	|         movea.l 1ca26 <CstBackDropBufferApplyStart>,a0
    38c0:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38c2:	|         move.w 1ca04 <CstBackdropSize>,d0
    38c8:	|         move.w d0,d0
    38ca:	|         andi.l #65535,d0
    38d0:	|         move.l 88(sp),d1
    38d4:	|         add.l d1,d1
    38d6:	|         add.l d1,d0
    38d8:	|         move.l d0,36(sp)
    38dc:	|         moveq #2,d1
    38de:	|         move.l d1,32(sp)
    38e2:	|         move.l 1caf2 <SysBase>,d0
    38e8:	|         movea.l d0,a6
    38ea:	|         move.l 36(sp),d0
    38ee:	|         move.l 32(sp),d1
    38f2:	|         jsr -684(a6)
    38f6:	|         move.l d0,28(sp)
    38fa:	|         move.l 28(sp),d0
    38fe:	|         move.l d0,1ca16 <CstViewBuffer>
  if( !CstViewBuffer)
    3904:	|         move.l 1ca16 <CstViewBuffer>,d0
    390a:	|     ,-- bne.s 3920 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    390c:	|     |   pea 18296 <PutChar+0x550>
    3912:	|     |   jsr 172a4 <KPrintF>
    3918:	|     |   addq.l #4,sp
    return FALSE;  
    391a:	|     |   clr.w d0
    391c:	+-----|-- bra.w 3aa4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3920:	|     '-> pea 182d0 <PutChar+0x58a>
    3926:	|         jsr 172a4 <KPrintF>
    392c:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    392e:	|         move.l 1ca1a <CstDrawBuffer>,d1
    3934:	|         move.l 88(sp),d0
    3938:	|     ,-- bpl.s 393c <CstReserveBackdrop+0x278>
    393a:	|     |   addq.l #3,d0
    393c:	|     '-> asr.l #2,d0
    393e:	|         add.l d0,d0
    3940:	|         add.l d0,d0
    3942:	|         add.l d1,d0
    3944:	|         move.l d0,1ca1a <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    394a:	|         move.l 1ca16 <CstViewBuffer>,d1
    3950:	|         move.l 88(sp),d0
    3954:	|     ,-- bpl.s 3958 <CstReserveBackdrop+0x294>
    3956:	|     |   addq.l #3,d0
    3958:	|     '-> asr.l #2,d0
    395a:	|         add.l d0,d0
    395c:	|         add.l d0,d0
    395e:	|         add.l d1,d0
    3960:	|         move.l d0,1ca16 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3966:	|         move.l #5200,24(sp)
    396e:	|         moveq #2,d0
    3970:	|         move.l d0,20(sp)
    3974:	|         move.l 1caf2 <SysBase>,d0
    397a:	|         movea.l d0,a6
    397c:	|         move.l 24(sp),d0
    3980:	|         move.l 20(sp),d1
    3984:	|         jsr -684(a6)
    3988:	|         move.l d0,16(sp)
    398c:	|         move.l 16(sp),d0
    3990:	|         move.l d0,1ca3a <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3996:	|         move.l #5600,12(sp)
    399e:	|         moveq #2,d1
    39a0:	|         move.l d1,8(sp)
    39a4:	|         move.l 1caf2 <SysBase>,d0
    39aa:	|         movea.l d0,a6
    39ac:	|         move.l 12(sp),d0
    39b0:	|         move.l 8(sp),d1
    39b4:	|         jsr -684(a6)
    39b8:	|         move.l d0,4(sp)
    39bc:	|         move.l 4(sp),d0
    39c0:	|         move.l d0,1ca3e <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    39c6:	|         move.l 1ca08 <CstBackDrop>,d0
    39cc:	|         clr.l -(sp)
    39ce:	|         pea 5 <_start+0x5>
    39d2:	|         pea 100 <copyString+0x48>
    39d6:	|         pea 140 <decodeFilename+0x28>
    39da:	|         pea 182f8 <PutChar+0x5b2>
    39e0:	|         move.l d0,-(sp)
    39e2:	|         jsr 1738c <debug_register_bitmap>
    39e8:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    39ec:	|         move.l 92(sp),d0
    39f0:	|         movea.w d0,a1
    39f2:	|         move.l 88(sp),d0
    39f6:	|         lsl.w #3,d0
    39f8:	|         movea.w d0,a0
    39fa:	|         move.l 1ca1a <CstDrawBuffer>,d0
    3a00:	|         clr.l -(sp)
    3a02:	|         pea 5 <_start+0x5>
    3a06:	|         move.l a1,-(sp)
    3a08:	|         move.l a0,-(sp)
    3a0a:	|         pea 18308 <PutChar+0x5c2>
    3a10:	|         move.l d0,-(sp)
    3a12:	|         jsr 1738c <debug_register_bitmap>
    3a18:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3a1c:	|         move.l 92(sp),d0
    3a20:	|         movea.w d0,a1
    3a22:	|         move.l 88(sp),d0
    3a26:	|         lsl.w #3,d0
    3a28:	|         movea.w d0,a0
    3a2a:	|         move.l 1ca16 <CstViewBuffer>,d0
    3a30:	|         clr.l -(sp)
    3a32:	|         pea 5 <_start+0x5>
    3a36:	|         move.l a1,-(sp)
    3a38:	|         move.l a0,-(sp)
    3a3a:	|         pea 18317 <PutChar+0x5d1>
    3a40:	|         move.l d0,-(sp)
    3a42:	|         jsr 1738c <debug_register_bitmap>
    3a48:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3a4c:	|         move.l 1ca10 <CstCopperList>,d0
    3a52:	|     ,-- beq.s 3a64 <CstReserveBackdrop+0x3a0>
    3a54:	|     |   move.l 1ca1a <CstDrawBuffer>,d0
    3a5a:	|     +-- beq.s 3a64 <CstReserveBackdrop+0x3a0>
    3a5c:	|     |   move.l 1ca16 <CstViewBuffer>,d0
    3a62:	|  ,--|-- bne.s 3a76 <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3a64:	|  |  '-> pea 18326 <PutChar+0x5e0>
    3a6a:	|  |      jsr 172a4 <KPrintF>
    3a70:	|  |      addq.l #4,sp
    return FALSE;
    3a72:	|  |      clr.w d0
    3a74:	+--|----- bra.s 3aa4 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3a76:	|  '----> pea 18353 <PutChar+0x60d>
    3a7c:	|         jsr 172a4 <KPrintF>
    3a82:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3a84:	|         move.l 1ca10 <CstCopperList>,d0
    3a8a:	|         move.l d0,-(sp)
    3a8c:	|         jsr 3578 <CstSetCl>
    3a92:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3a94:	|         pea 1837a <PutChar+0x634>
    3a9a:	|         jsr 172a4 <KPrintF>
    3aa0:	|         addq.l #4,sp
  return TRUE;
    3aa2:	|         moveq #1,d0

}
    3aa4:	'-------> movea.l (sp)+,a6
    3aa6:	          lea 80(sp),sp
    3aaa:	          rts

00003aac <CstUnfreeze>:

void CstUnfreeze() {
    3aac:	       lea -24(sp),sp
    3ab0:	       move.l a6,-(sp)
    3ab2:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3ab4:	       pea 1839d <PutChar+0x657>
    3aba:	       jsr 172a4 <KPrintF>
    3ac0:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3ac2:	       move.l 1ca46 <winWidth>,d0
    3ac8:	       lsr.l #3,d0
    3aca:	       move.l d0,d1
    3acc:	       move.l 1ca4a <winHeight>,d0
    3ad2:	       move.l d0,d0
    3ad4:	       muls.w d0,d1
    3ad6:	       move.w d1,d0
    3ad8:	       add.w d0,d0
    3ada:	       add.w d0,d0
    3adc:	       move.w d0,d2
    3ade:	       add.w d1,d2
    3ae0:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3ae4:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3aec:	       move.l 1ca4a <winHeight>,d0
    3af2:	       move.l d0,d0
    3af4:	       movea.w d0,a1
    3af6:	       move.l 1ca46 <winWidth>,d0
    3afc:	       move.l d0,d0
    3afe:	       movea.w d0,a0
    3b00:	       move.l 1ca0c <CstBackDropBackup>,d0
    3b06:	       clr.l -(sp)
    3b08:	       pea 5 <_start+0x5>
    3b0c:	       move.l a1,-(sp)
    3b0e:	       move.l a0,-(sp)
    3b10:	       pea 17f6f <PutChar+0x229>
    3b16:	       move.l d0,-(sp)
    3b18:	       jsr 1738c <debug_register_bitmap>
    3b1e:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3b22:	       move.l 1ca0c <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3b2a:	       move.l 1ca08 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3b32:	       clr.l 20(sp)
    3b36:	   ,-- bra.s 3b5c <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3b38:	,--|-> move.l 28(sp),d1
    3b3c:	|  |   move.l d1,d0
    3b3e:	|  |   addq.l #4,d0
    3b40:	|  |   move.l d0,28(sp)
    3b44:	|  |   move.l 24(sp),d0
    3b48:	|  |   move.l d0,d2
    3b4a:	|  |   addq.l #4,d2
    3b4c:	|  |   move.l d2,24(sp)
    3b50:	|  |   movea.l d1,a0
    3b52:	|  |   move.l (a0),d1
    3b54:	|  |   movea.l d0,a0
    3b56:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3b58:	|  |   addq.l #1,20(sp)
    3b5c:	|  '-> move.w 18(sp),d0
    3b60:	|      lsr.w #2,d0
    3b62:	|      move.w d0,d0
    3b64:	|      andi.l #65535,d0
    3b6a:	|      cmp.l 20(sp),d0
    3b6e:	'----- bgt.s 3b38 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3b70:	       move.w #2,1ca14 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3b78:	       move.l 1ca46 <winWidth>,d0
    3b7e:	       lsr.l #4,d0
    3b80:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    3b86:	       move.l a0,d1
    3b88:	       addq.l #2,d1
    3b8a:	       move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    3b90:	       move.l d0,d0
    3b92:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3b94:	       move.l 1ca4a <winHeight>,d0
    3b9a:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    3ba0:	       move.l a0,d1
    3ba2:	       addq.l #2,d1
    3ba4:	       move.l d1,1ca2a <CstBackDropBufferApplyCursor>
    3baa:	       move.l d0,d0
    3bac:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bae:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    3bb4:	       move.l a0,d0
    3bb6:	       addq.l #2,d0
    3bb8:	       move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    3bbe:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bc0:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    3bc6:	       move.l a0,d0
    3bc8:	       addq.l #2,d0
    3bca:	       move.l d0,1ca2a <CstBackDropBufferApplyCursor>
    3bd0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    3bd2:	       movea.l 1ca2a <CstBackDropBufferApplyCursor>,a0
    3bd8:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3bda:	       move.l 1ca0c <CstBackDropBackup>,d0
    3be0:	   ,-- beq.s 3c08 <CstUnfreeze+0x15c>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3be2:	   |   pea 183c8 <PutChar+0x682>
    3be8:	   |   jsr 172a4 <KPrintF>
    3bee:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3bf0:	   |   move.l 1ca0c <CstBackDropBackup>,10(sp)
    3bf8:	   |   move.l 1caf2 <SysBase>,d0
    3bfe:	   |   movea.l d0,a6
    3c00:	   |   movea.l 10(sp),a1
    3c04:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3c08:	   '-> pea 183ec <PutChar+0x6a6>
    3c0e:	       jsr 172a4 <KPrintF>
    3c14:	       addq.l #4,sp

}
    3c16:	       nop
    3c18:	       move.l (sp)+,d2
    3c1a:	       movea.l (sp)+,a6
    3c1c:	       lea 24(sp),sp
    3c20:	       rts

00003c22 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3c22:	       lea -28(sp),sp
    3c26:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3c2a:	       move.l 52(sp),-(sp)
    3c2e:	       jsr 158ae <stringWidth>
    3c34:	       addq.l #4,sp
    3c36:	       asr.l #1,d0
    3c38:	       move.l d0,-(sp)
    3c3a:	       jsr 176d6 <__floatsisf>
    3c40:	       addq.l #4,sp
    3c42:	       move.l d0,d1
    3c44:	       move.l 1c484 <cameraZoom>,d0
    3c4a:	       move.l d0,-(sp)
    3c4c:	       move.l d1,-(sp)
    3c4e:	       jsr 1758c <__divsf3>
    3c54:	       addq.l #8,sp
    3c56:	       move.l d0,-(sp)
    3c58:	       jsr 1766e <__fixsfsi>
    3c5e:	       addq.l #4,sp
    3c60:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3c64:	       move.l 56(sp),d0
    3c68:	       sub.l 44(sp),d0
    3c6c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3c70:	       move.l 56(sp),d0
    3c74:	       add.l 44(sp),d0
    3c78:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3c7c:	       moveq #12,d0
    3c7e:	       move.l d0,32(sp)
    3c82:	       clr.l 28(sp)
    3c86:	       move.l 1caf2 <SysBase>,d0
    3c8c:	       movea.l d0,a6
    3c8e:	       move.l 32(sp),d0
    3c92:	       move.l 28(sp),d1
    3c96:	       jsr -684(a6)
    3c9a:	       move.l d0,24(sp)
    3c9e:	       move.l 24(sp),d0
    3ca2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3ca6:	       movea.l 1ca42 <speech>,a0
    3cac:	       move.l 4(a0),d0
    3cb0:	       movea.l 20(sp),a0
    3cb4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3cb8:	       move.l 52(sp),-(sp)
    3cbc:	       jsr b8 <copyString>
    3cc2:	       addq.l #4,sp
    3cc4:	       movea.l 20(sp),a0
    3cc8:	       move.l d0,(a0)
	newLine -> x = xx1;
    3cca:	       movea.l 20(sp),a0
    3cce:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3cd4:	       movea.l 1ca42 <speech>,a0
    3cda:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3ce0:	       moveq #4,d0
    3ce2:	       cmp.l 40(sp),d0
    3ce6:	   ,-- blt.s 3d08 <addSpeechLine+0xe6>
    3ce8:	   |   movea.l 60(sp),a0
    3cec:	   |   move.l (a0),d1
    3cee:	   |   moveq #5,d0
    3cf0:	   |   sub.l 40(sp),d0
    3cf4:	   |   cmp.l d1,d0
    3cf6:	   +-- ble.s 3d08 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3cf8:	   |   moveq #5,d0
    3cfa:	   |   sub.l 40(sp),d0
    3cfe:	   |   movea.l 60(sp),a0
    3d02:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3d04:	,--|-- bra.w 3e34 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d08:	|  '-> move.l 36(sp),-(sp)
    3d0c:	|      jsr 176d6 <__floatsisf>
    3d12:	|      addq.l #4,sp
    3d14:	|      move.l d0,d2
    3d16:	|      move.l 1ca46 <winWidth>,d0
    3d1c:	|      move.l d0,-(sp)
    3d1e:	|      jsr 176fe <__floatunsisf>
    3d24:	|      addq.l #4,sp
    3d26:	|      move.l d0,d1
    3d28:	|      move.l 1c484 <cameraZoom>,d0
    3d2e:	|      move.l d0,-(sp)
    3d30:	|      move.l d1,-(sp)
    3d32:	|      jsr 1758c <__divsf3>
    3d38:	|      addq.l #8,sp
    3d3a:	|      move.l #1084227584,-(sp)
    3d40:	|      move.l d0,-(sp)
    3d42:	|      jsr 179ca <__subsf3>
    3d48:	|      addq.l #8,sp
    3d4a:	|      move.l d0,-(sp)
    3d4c:	|      move.l d2,-(sp)
    3d4e:	|      jsr 177be <__gesf2>
    3d54:	|      addq.l #8,sp
    3d56:	|      tst.l d0
    3d58:	|  ,-- bge.s 3d5e <addSpeechLine+0x13c>
}
    3d5a:	+--|-- bra.w 3e34 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d5e:	|  '-> movea.l 60(sp),a0
    3d62:	|      move.l (a0),d0
    3d64:	|      move.l d0,-(sp)
    3d66:	|      jsr 176d6 <__floatsisf>
    3d6c:	|      addq.l #4,sp
    3d6e:	|      move.l d0,-(sp)
    3d70:	|      jsr 175f8 <__extendsfdf2>
    3d76:	|      addq.l #4,sp
    3d78:	|      move.l d0,d4
    3d7a:	|      move.l d1,d5
    3d7c:	|      move.l 1ca46 <winWidth>,d0
    3d82:	|      move.l d0,-(sp)
    3d84:	|      jsr 176fe <__floatunsisf>
    3d8a:	|      addq.l #4,sp
    3d8c:	|      move.l d0,d1
    3d8e:	|      move.l 1c484 <cameraZoom>,d0
    3d94:	|      move.l d0,-(sp)
    3d96:	|      move.l d1,-(sp)
    3d98:	|      jsr 1758c <__divsf3>
    3d9e:	|      addq.l #8,sp
    3da0:	|      move.l d0,-(sp)
    3da2:	|      jsr 175f8 <__extendsfdf2>
    3da8:	|      addq.l #4,sp
    3daa:	|      clr.l -(sp)
    3dac:	|      move.l #1075052544,-(sp)
    3db2:	|      move.l d1,-(sp)
    3db4:	|      move.l d0,-(sp)
    3db6:	|      jsr 17968 <__subdf3>
    3dbc:	|      lea 16(sp),sp
    3dc0:	|      move.l d0,d2
    3dc2:	|      move.l d1,d3
    3dc4:	|      move.l 36(sp),-(sp)
    3dc8:	|      jsr 17696 <__floatsidf>
    3dce:	|      addq.l #4,sp
    3dd0:	|      move.l d1,-(sp)
    3dd2:	|      move.l d0,-(sp)
    3dd4:	|      move.l d3,-(sp)
    3dd6:	|      move.l d2,-(sp)
    3dd8:	|      jsr 17968 <__subdf3>
    3dde:	|      lea 16(sp),sp
    3de2:	|      move.l d1,-(sp)
    3de4:	|      move.l d0,-(sp)
    3de6:	|      move.l d5,-(sp)
    3de8:	|      move.l d4,-(sp)
    3dea:	|      jsr 177f4 <__gtdf2>
    3df0:	|      lea 16(sp),sp
    3df4:	|      tst.l d0
    3df6:	|  ,-- bgt.s 3dfa <addSpeechLine+0x1d8>
}
    3df8:	+--|-- bra.s 3e34 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3dfa:	|  '-> move.l 1ca46 <winWidth>,d0
    3e00:	|      move.l d0,-(sp)
    3e02:	|      jsr 176fe <__floatunsisf>
    3e08:	|      addq.l #4,sp
    3e0a:	|      move.l d0,d1
    3e0c:	|      move.l 1c484 <cameraZoom>,d0
    3e12:	|      move.l d0,-(sp)
    3e14:	|      move.l d1,-(sp)
    3e16:	|      jsr 1758c <__divsf3>
    3e1c:	|      addq.l #8,sp
    3e1e:	|      move.l d0,-(sp)
    3e20:	|      jsr 1766e <__fixsfsi>
    3e26:	|      addq.l #4,sp
    3e28:	|      subq.l #5,d0
    3e2a:	|      sub.l 36(sp),d0
    3e2e:	|      movea.l 60(sp),a0
    3e32:	|      move.l d0,(a0)
}
    3e34:	'----> nop
    3e36:	       movem.l (sp)+,d2-d5/a6
    3e3a:	       lea 28(sp),sp
    3e3e:	       rts

00003e40 <initSpeech>:


void initSpeech () {
    3e40:	       lea -12(sp),sp
    3e44:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3e46:	       moveq #20,d0
    3e48:	       move.l d0,12(sp)
    3e4c:	       clr.l 8(sp)
    3e50:	       move.l 1caf2 <SysBase>,d0
    3e56:	       movea.l d0,a6
    3e58:	       move.l 12(sp),d0
    3e5c:	       move.l 8(sp),d1
    3e60:	       jsr -684(a6)
    3e64:	       move.l d0,4(sp)
    3e68:	       move.l 4(sp),d0
    3e6c:	       move.l d0,1ca42 <speech>
	if (speech) {
    3e72:	       move.l 1ca42 <speech>,d0
    3e78:	,----- beq.s 3ea4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3e7a:	|      movea.l 1ca42 <speech>,a0
    3e80:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3e82:	|      movea.l 1ca42 <speech>,a0
    3e88:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3e8c:	|      movea.l 1ca42 <speech>,a0
    3e92:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3e96:	|      movea.l 1ca42 <speech>,a0
    3e9c:	|      moveq #-1,d0
    3e9e:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3ea2:	|  ,-- bra.s 3eb2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3ea4:	'--|-> pea 18402 <PutChar+0x6bc>
    3eaa:	   |   jsr 172a4 <KPrintF>
    3eb0:	   |   addq.l #4,sp
}
    3eb2:	   '-> nop
    3eb4:	       movea.l (sp)+,a6
    3eb6:	       lea 12(sp),sp
    3eba:	       rts

00003ebc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3ebc:	       movea.l 1ca42 <speech>,a0
    3ec2:	       move.l 4(a0),d0
    3ec6:	,----- beq.s 3ed4 <isThereAnySpeechGoingOn+0x18>
    3ec8:	|      movea.l 1ca42 <speech>,a0
    3ece:	|      move.l 16(a0),d0
    3ed2:	|  ,-- bra.s 3ed6 <isThereAnySpeechGoingOn+0x1a>
    3ed4:	'--|-> moveq #-1,d0
}
    3ed6:	   '-> rts

00003ed8 <killAllSpeech>:

void killAllSpeech () {
    3ed8:	       lea -12(sp),sp
    3edc:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3ede:	       movea.l 1ca42 <speech>,a0
    3ee4:	       move.l 12(a0),d0
    3ee8:	       moveq #-1,d1
    3eea:	       cmp.l d0,d1
    3eec:	   ,-- beq.s 3efa <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3eee:	   |   movea.l 1ca42 <speech>,a0
    3ef4:	   |   moveq #-1,d0
    3ef6:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3efa:	   '-> movea.l 1ca42 <speech>,a0
    3f00:	       move.l (a0),d0
    3f02:	,----- beq.w 3f8e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3f06:	|      movea.l 1ca42 <speech>,a0
    3f0c:	|      move.l (a0),d1
    3f0e:	|      lea -132(sp),sp
    3f12:	|      move.l sp,d0
    3f14:	|      movea.w #132,a0
    3f18:	|      move.l a0,-(sp)
    3f1a:	|      move.l d1,-(sp)
    3f1c:	|      move.l d0,-(sp)
    3f1e:	|      jsr 17258 <memcpy>
    3f24:	|      lea 12(sp),sp
    3f28:	|      jsr aaaa <makeSilent>
    3f2e:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    3f32:	|      movea.l 1ca42 <speech>,a0
    3f38:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    3f3a:	+----- bra.s 3f8e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    3f3c:	|  ,-> movea.l 1ca42 <speech>,a0
    3f42:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    3f48:	|  |   movea.l 1ca42 <speech>,a0
    3f4e:	|  |   movea.l 4(a0),a1
    3f52:	|  |   movea.l 1ca42 <speech>,a0
    3f58:	|  |   move.l 4(a1),d0
    3f5c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    3f60:	|  |   movea.l 12(sp),a0
    3f64:	|  |   move.l (a0),8(sp)
    3f68:	|  |   move.l 1caf2 <SysBase>,d0
    3f6e:	|  |   movea.l d0,a6
    3f70:	|  |   movea.l 8(sp),a1
    3f74:	|  |   jsr -690(a6)
		FreeVec(killMe);
    3f78:	|  |   move.l 12(sp),4(sp)
    3f7e:	|  |   move.l 1caf2 <SysBase>,d0
    3f84:	|  |   movea.l d0,a6
    3f86:	|  |   movea.l 4(sp),a1
    3f8a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    3f8e:	'--|-> movea.l 1ca42 <speech>,a0
    3f94:	   |   move.l 4(a0),d0
    3f98:	   '-- bne.s 3f3c <killAllSpeech+0x64>
	}
}
    3f9a:	       nop
    3f9c:	       nop
    3f9e:	       movea.l (sp)+,a6
    3fa0:	       lea 12(sp),sp
    3fa4:	       rts

00003fa6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    3fa6:	pea 2 <_start+0x2>
    3faa:	move.l 8(sp),-(sp)
    3fae:	jsr 4106 <setFrames>
    3fb4:	addq.l #8,sp
}
    3fb6:	nop
    3fb8:	rts

00003fba <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    3fba:	       lea -52(sp),sp
    3fbe:	       move.l a6,-(sp)
    3fc0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    3fc2:	       movea.l 64(sp),a0
    3fc6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    3fcc:	       move.l 1c45c <speechSpeed>,d0
    3fd2:	       move.l 68(sp),-(sp)
    3fd6:	       move.l d0,-(sp)
    3fd8:	       jsr a46 <putFloat>
    3fde:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    3fe0:	       movea.l 64(sp),a0
    3fe4:	       move.l 8(a0),d0
    3fe8:	       move.l 68(sp),-(sp)
    3fec:	       move.l d0,-(sp)
    3fee:	       jsr 8d0 <put2bytes>
    3ff4:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    3ff6:	       movea.l 64(sp),a0
    3ffa:	       move.l 16(a0),d0
    3ffe:	       move.l 68(sp),-(sp)
    4002:	       move.l d0,-(sp)
    4004:	       jsr 8d0 <put2bytes>
    400a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    400c:	       movea.l 64(sp),a0
    4010:	       move.l (a0),d0
    4012:	   ,-- beq.s 4056 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4014:	   |   move.l 68(sp),40(sp)
    401a:	   |   moveq #1,d0
    401c:	   |   move.l d0,36(sp)
    4020:	   |   move.l 1cafa <DOSBase>,d0
    4026:	   |   movea.l d0,a6
    4028:	   |   move.l 40(sp),d1
    402c:	   |   move.l 36(sp),d2
    4030:	   |   jsr -312(a6)
    4034:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4038:	   |   movea.l 64(sp),a0
    403c:	   |   movea.l (a0),a0
    403e:	   |   movea.l 114(a0),a0
    4042:	   |   move.l 4(a0),d0
    4046:	   |   move.l 68(sp),-(sp)
    404a:	   |   move.l d0,-(sp)
    404c:	   |   jsr 8d0 <put2bytes>
    4052:	   |   addq.l #8,sp
    4054:	,--|-- bra.s 40d2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4056:	|  '-> move.l 68(sp),52(sp)
    405c:	|      clr.l 48(sp)
    4060:	|      move.l 1cafa <DOSBase>,d0
    4066:	|      movea.l d0,a6
    4068:	|      move.l 52(sp),d1
    406c:	|      move.l 48(sp),d2
    4070:	|      jsr -312(a6)
    4074:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4078:	+----- bra.s 40d2 <saveSpeech+0x118>
			FPutC (fp, 1);
    407a:	|  ,-> move.l 68(sp),16(sp)
    4080:	|  |   moveq #1,d0
    4082:	|  |   move.l d0,12(sp)
    4086:	|  |   move.l 1cafa <DOSBase>,d0
    408c:	|  |   movea.l d0,a6
    408e:	|  |   move.l 16(sp),d1
    4092:	|  |   move.l 12(sp),d2
    4096:	|  |   jsr -312(a6)
    409a:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    409e:	|  |   movea.l 56(sp),a0
    40a2:	|  |   move.l (a0),d0
    40a4:	|  |   move.l 68(sp),-(sp)
    40a8:	|  |   move.l d0,-(sp)
    40aa:	|  |   jsr bd8 <writeString>
    40b0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    40b2:	|  |   movea.l 56(sp),a0
    40b6:	|  |   move.l 8(a0),d0
    40ba:	|  |   move.l 68(sp),-(sp)
    40be:	|  |   move.l d0,-(sp)
    40c0:	|  |   jsr 8d0 <put2bytes>
    40c6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    40c8:	|  |   movea.l 56(sp),a0
    40cc:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    40d2:	'--|-> tst.l 56(sp)
    40d6:	   '-- bne.s 407a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    40d8:	       move.l 68(sp),28(sp)
    40de:	       clr.l 24(sp)
    40e2:	       move.l 1cafa <DOSBase>,d0
    40e8:	       movea.l d0,a6
    40ea:	       move.l 28(sp),d1
    40ee:	       move.l 24(sp),d2
    40f2:	       jsr -312(a6)
    40f6:	       move.l d0,20(sp)
}
    40fa:	       nop
    40fc:	       move.l (sp)+,d2
    40fe:	       movea.l (sp)+,a6
    4100:	       lea 52(sp),sp
    4104:	       rts

00004106 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4106:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4108:	movea.l 8(sp),a0
    410c:	movea.l 80(a0),a0
    4110:	move.l (a0),d2
    4112:	movea.l 8(sp),a0
    4116:	movea.l 80(a0),a0
    411a:	move.l 4(a0),d0
    411e:	move.l 12(sp),-(sp)
    4122:	move.l d0,-(sp)
    4124:	jsr 17c30 <__mulsi3>
    412a:	addq.l #8,sp
    412c:	move.l d0,d1
    412e:	movea.l 8(sp),a0
    4132:	move.l 106(a0),d0
    4136:	add.l d1,d0
    4138:	add.l d0,d0
    413a:	add.l d0,d0
    413c:	movea.l d2,a0
    413e:	adda.l d0,a0
    4140:	move.l (a0),d0
    4142:	movea.l 8(sp),a0
    4146:	move.l d0,72(a0)
}
    414a:	nop
    414c:	move.l (sp)+,d2
    414e:	rts

00004150 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4150:	       lea -20(sp),sp
    4154:	       move.l d2,-(sp)
    4156:	       move.l 40(sp),d0
    415a:	       move.w d0,d0
    415c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4160:	       movea.l 1ca42 <speech>,a0
    4166:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    416c:	       move.l 32(sp),-(sp)
    4170:	       jsr a56a <findPerson>
    4176:	       addq.l #4,sp
    4178:	       move.l d0,16(sp)
    if (thisPerson) {
    417c:	   ,-- beq.s 41a2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    417e:	   |   movea.w 6(sp),a0
    4182:	   |   move.l a0,-(sp)
    4184:	   |   move.l 40(sp),-(sp)
    4188:	   |   move.l 24(sp),-(sp)
    418c:	   |   move.l 40(sp),-(sp)
    4190:	   |   jsr 4268 <wrapSpeechPerson>
    4196:	   |   lea 16(sp),sp
    419a:	   |   move.l d0,20(sp)
    419e:	,--|-- bra.w 425c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    41a2:	|  '-> move.l 32(sp),-(sp)
    41a6:	|      jsr 15a86 <getRegionForObject>
    41ac:	|      addq.l #4,sp
    41ae:	|      move.l d0,12(sp)
        if (thisRegion) {
    41b2:	|  ,-- beq.s 421e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    41b4:	|  |   movea.l 12(sp),a0
    41b8:	|  |   movea.l 28(a0),a0
    41bc:	|  |   move.l 28(a0),d0
    41c0:	|  |   movea.l 12(sp),a0
    41c4:	|  |   movea.l 4(a0),a1
    41c8:	|  |   movea.l 12(sp),a0
    41cc:	|  |   movea.l 28(a0),a0
    41d0:	|  |   move.l 20(a0),d1
    41d4:	|  |   movea.l a1,a0
    41d6:	|  |   suba.l d1,a0
    41d8:	|  |   move.l 1cbac <cameraY>,d1
    41de:	|  |   movea.l a0,a1
    41e0:	|  |   suba.l d1,a1
    41e2:	|  |   movea.l 12(sp),a0
    41e6:	|  |   move.l (a0),d2
    41e8:	|  |   movea.l 12(sp),a0
    41ec:	|  |   move.l 8(a0),d1
    41f0:	|  |   add.l d2,d1
    41f2:	|  |   move.l d1,d2
    41f4:	|  |   asr.l #1,d2
    41f6:	|  |   move.l 1cba8 <cameraX>,d1
    41fc:	|  |   movea.l d2,a0
    41fe:	|  |   suba.l d1,a0
    4200:	|  |   move.l 36(sp),-(sp)
    4204:	|  |   move.l d0,-(sp)
    4206:	|  |   move.l a1,-(sp)
    4208:	|  |   move.l a0,-(sp)
    420a:	|  |   move.l 44(sp),-(sp)
    420e:	|  |   jsr 4386 <wrapSpeechXY>
    4214:	|  |   lea 20(sp),sp
    4218:	|  |   move.l d0,20(sp)
    421c:	+--|-- bra.s 425c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    421e:	|  '-> move.l 32(sp),-(sp)
    4222:	|      jsr d4d8 <findObjectType>
    4228:	|      addq.l #4,sp
    422a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    422e:	|      movea.l 8(sp),a0
    4232:	|      move.l 28(a0),d1
    4236:	|      move.l 1ca46 <winWidth>,d0
    423c:	|      lsr.l #1,d0
    423e:	|      move.l 36(sp),-(sp)
    4242:	|      move.l d1,-(sp)
    4244:	|      pea a <_start+0xa>
    4248:	|      move.l d0,-(sp)
    424a:	|      move.l 44(sp),-(sp)
    424e:	|      jsr 4386 <wrapSpeechXY>
    4254:	|      lea 20(sp),sp
    4258:	|      move.l d0,20(sp)
        }
    }
    return i;
    425c:	'----> move.l 20(sp),d0
}
    4260:	       move.l (sp)+,d2
    4262:	       lea 20(sp),sp
    4266:	       rts

00004268 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4268:	    subq.l #8,sp
    426a:	    movem.l d2-d4,-(sp)
    426e:	    move.l 36(sp),d0
    4272:	    move.w d0,d0
    4274:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4278:	    movea.l 28(sp),a0
    427c:	    movea.l 114(a0),a0
    4280:	    move.l 28(a0),d2
    4284:	    movea.l 28(sp),a0
    4288:	    move.l 4(a0),d3
    428c:	    move.l 1cbac <cameraY>,d0
    4292:	    move.l d0,-(sp)
    4294:	    jsr 176d6 <__floatsisf>
    429a:	    addq.l #4,sp
    429c:	    move.l d0,-(sp)
    429e:	    move.l d3,-(sp)
    42a0:	    jsr 179ca <__subsf3>
    42a6:	    addq.l #8,sp
    42a8:	    move.l d0,d3
    42aa:	    movea.l 28(sp),a0
    42ae:	    move.l 32(a0),d4
    42b2:	    movea.l 28(sp),a0
    42b6:	    move.l 20(a0),d1
    42ba:	    movea.l 28(sp),a0
    42be:	    move.l 24(a0),d0
    42c2:	    sub.l d0,d1
    42c4:	    move.l d1,-(sp)
    42c6:	    jsr 176d6 <__floatsisf>
    42cc:	    addq.l #4,sp
    42ce:	    move.l d0,-(sp)
    42d0:	    move.l d4,-(sp)
    42d2:	    jsr 17788 <__mulsf3>
    42d8:	    addq.l #8,sp
    42da:	    move.l d0,-(sp)
    42dc:	    move.l d3,-(sp)
    42de:	    jsr 179ca <__subsf3>
    42e4:	    addq.l #8,sp
    42e6:	    move.l d0,d3
    42e8:	    movea.l 28(sp),a0
    42ec:	    movea.l 114(a0),a0
    42f0:	    move.l 20(a0),d0
    42f4:	    move.l d0,-(sp)
    42f6:	    jsr 176d6 <__floatsisf>
    42fc:	    addq.l #4,sp
    42fe:	    move.l d0,-(sp)
    4300:	    move.l d3,-(sp)
    4302:	    jsr 179ca <__subsf3>
    4308:	    addq.l #8,sp
    430a:	    move.l d0,-(sp)
    430c:	    jsr 1766e <__fixsfsi>
    4312:	    addq.l #4,sp
    4314:	    move.l d0,d4
    4316:	    movea.l 28(sp),a0
    431a:	    move.l (a0),d3
    431c:	    move.l 1cba8 <cameraX>,d0
    4322:	    move.l d0,-(sp)
    4324:	    jsr 176d6 <__floatsisf>
    432a:	    addq.l #4,sp
    432c:	    move.l d0,-(sp)
    432e:	    move.l d3,-(sp)
    4330:	    jsr 179ca <__subsf3>
    4336:	    addq.l #8,sp
    4338:	    move.l d0,-(sp)
    433a:	    jsr 1766e <__fixsfsi>
    4340:	    addq.l #4,sp
    4342:	    move.l 32(sp),-(sp)
    4346:	    move.l d2,-(sp)
    4348:	    move.l d4,-(sp)
    434a:	    move.l d0,-(sp)
    434c:	    move.l 40(sp),-(sp)
    4350:	    jsr 4386 <wrapSpeechXY>
    4356:	    lea 20(sp),sp
    435a:	    move.l d0,16(sp)
	if (animPerson) {
    435e:	    tst.w 14(sp)
    4362:	,-- beq.s 437a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4364:	|   move.l 28(sp),-(sp)
    4368:	|   jsr 3fa6 <makeTalker>
    436e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4370:	|   movea.l 1ca42 <speech>,a0
    4376:	|   move.l 28(sp),(a0)
	}
	return i;
    437a:	'-> move.l 16(sp),d0
}
    437e:	    movem.l (sp)+,d2-d4
    4382:	    addq.l #8,sp
    4384:	    rts

00004386 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4386:	                   lea -16(sp),sp
    438a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    438e:	                   clr.l 16(sp)
    killAllSpeech();
    4392:	                   jsr 3ed8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4398:	                   move.l 36(sp),-(sp)
    439c:	                   jsr 13cb0 <strlen>
    43a2:	                   addq.l #4,sp
    43a4:	                   movea.l d0,a0
    43a6:	                   lea 20(a0),a0
    43aa:	                   move.l a0,-(sp)
    43ac:	                   jsr 176fe <__floatunsisf>
    43b2:	                   addq.l #4,sp
    43b4:	                   move.l d0,d1
    43b6:	                   move.l 1c45c <speechSpeed>,d0
    43bc:	                   move.l d0,-(sp)
    43be:	                   move.l d1,-(sp)
    43c0:	                   jsr 17788 <__mulsf3>
    43c6:	                   addq.l #8,sp
    43c8:	                   move.l d0,-(sp)
    43ca:	                   jsr 1766e <__fixsfsi>
    43d0:	                   addq.l #4,sp
    43d2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    43d6:	               ,-- bgt.s 43de <wrapSpeechXY+0x58>
    43d8:	               |   moveq #1,d0
    43da:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    43de:	               '-> moveq #-1,d1
    43e0:	                   cmp.l 52(sp),d1
    43e4:	               ,-- beq.s 4424 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    43e6:	               |   move.l 1cbbc <speechMode>,d0
    43ec:	               +-- ble.s 4424 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    43ee:	               |   clr.l -(sp)
    43f0:	               |   move.l 56(sp),-(sp)
    43f4:	               |   jsr d198 <startSound>
    43fa:	               |   addq.l #8,sp
    43fc:	               |   tst.w d0
    43fe:	               +-- beq.s 4424 <wrapSpeechXY+0x9e>
                speechTime = -10;
    4400:	               |   moveq #-10,d0
    4402:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4406:	               |   movea.l 1ca42 <speech>,a0
    440c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4412:	               |   move.l 1cbbc <speechMode>,d0
    4418:	               |   moveq #2,d1
    441a:	               |   cmp.l d0,d1
    441c:	               +-- bne.s 4424 <wrapSpeechXY+0x9e>
    441e:	               |   moveq #-10,d0
    4420:	,--------------|-- bra.w 46aa <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4424:	|              '-> movea.l 1ca42 <speech>,a0
    442a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4430:	|     ,----------- bra.w 44e4 <wrapSpeechXY+0x15e>
        a = wrap;
    4434:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    443a:	|  |  |        ,-- bra.s 444a <wrapSpeechXY+0xc4>
            a--;
    443c:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4440:	|  |  |  |     +-- bne.s 444a <wrapSpeechXY+0xc4>
                a = wrap;
    4442:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4448:	|  |  |  |  ,--|-- bra.s 445c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    444a:	|  |  |  |  |  '-> move.l 28(sp),d0
    444e:	|  |  |  |  |      movea.l 36(sp),a0
    4452:	|  |  |  |  |      adda.l d0,a0
    4454:	|  |  |  |  |      move.b (a0),d0
    4456:	|  |  |  |  |      cmpi.b #32,d0
    445a:	|  |  |  '--|----- bne.s 443c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    445c:	|  |  |     '----> move.l 28(sp),d0
    4460:	|  |  |            movea.l 36(sp),a0
    4464:	|  |  |            adda.l d0,a0
    4466:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4468:	|  |  |            lea 16(sp),a0
    446c:	|  |  |            move.l a0,-(sp)
    446e:	|  |  |            move.l 44(sp),-(sp)
    4472:	|  |  |            move.l 44(sp),-(sp)
    4476:	|  |  |            jsr 3c22 <addSpeechLine>
    447c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4480:	|  |  |            move.l 28(sp),d0
    4484:	|  |  |            movea.l 36(sp),a0
    4488:	|  |  |            adda.l d0,a0
    448a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    448e:	|  |  |            move.l 28(sp),d0
    4492:	|  |  |            addq.l #1,d0
    4494:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4498:	|  |  |            move.l 44(sp),-(sp)
    449c:	|  |  |            jsr 176d6 <__floatsisf>
    44a2:	|  |  |            addq.l #4,sp
    44a4:	|  |  |            move.l d0,d2
    44a6:	|  |  |            move.l 1cbe6 <fontHeight>,d0
    44ac:	|  |  |            move.l d0,-(sp)
    44ae:	|  |  |            jsr 176d6 <__floatsisf>
    44b4:	|  |  |            addq.l #4,sp
    44b6:	|  |  |            move.l d0,d1
    44b8:	|  |  |            move.l 1c484 <cameraZoom>,d0
    44be:	|  |  |            move.l d0,-(sp)
    44c0:	|  |  |            move.l d1,-(sp)
    44c2:	|  |  |            jsr 1758c <__divsf3>
    44c8:	|  |  |            addq.l #8,sp
    44ca:	|  |  |            move.l d0,-(sp)
    44cc:	|  |  |            move.l d2,-(sp)
    44ce:	|  |  |            jsr 179ca <__subsf3>
    44d4:	|  |  |            addq.l #8,sp
    44d6:	|  |  |            move.l d0,-(sp)
    44d8:	|  |  |            jsr 1766e <__fixsfsi>
    44de:	|  |  |            addq.l #4,sp
    44e0:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    44e4:	|  |  '----------> move.l 36(sp),-(sp)
    44e8:	|  |               jsr 13cb0 <strlen>
    44ee:	|  |               addq.l #4,sp
    44f0:	|  |               move.l d0,d1
    44f2:	|  |               move.l 48(sp),d0
    44f6:	|  |               cmp.l d1,d0
    44f8:	|  '-------------- bcs.w 4434 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    44fc:	|                  lea 16(sp),a0
    4500:	|                  move.l a0,-(sp)
    4502:	|                  move.l 44(sp),-(sp)
    4506:	|                  move.l 44(sp),-(sp)
    450a:	|                  jsr 3c22 <addSpeechLine>
    4510:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4514:	|                  move.l 44(sp),-(sp)
    4518:	|                  jsr 176d6 <__floatsisf>
    451e:	|                  addq.l #4,sp
    4520:	|                  move.l d0,d2
    4522:	|                  move.l 1cbe6 <fontHeight>,d0
    4528:	|                  move.l d0,-(sp)
    452a:	|                  jsr 176d6 <__floatsisf>
    4530:	|                  addq.l #4,sp
    4532:	|                  move.l d0,d1
    4534:	|                  move.l 1c484 <cameraZoom>,d0
    453a:	|                  move.l d0,-(sp)
    453c:	|                  move.l d1,-(sp)
    453e:	|                  jsr 1758c <__divsf3>
    4544:	|                  addq.l #8,sp
    4546:	|                  move.l d0,-(sp)
    4548:	|                  move.l d2,-(sp)
    454a:	|                  jsr 179ca <__subsf3>
    4550:	|                  addq.l #8,sp
    4552:	|                  move.l d0,-(sp)
    4554:	|                  jsr 1766e <__fixsfsi>
    455a:	|                  addq.l #4,sp
    455c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4560:	|              ,-- bpl.s 457e <wrapSpeechXY+0x1f8>
    4562:	|              |   movea.l 1ca42 <speech>,a0
    4568:	|              |   move.l 8(a0),d0
    456c:	|              |   movea.l 1ca42 <speech>,a0
    4572:	|              |   sub.l 44(sp),d0
    4576:	|              |   move.l d0,8(a0)
    457a:	|           ,--|-- bra.w 466c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    457e:	|           |  '-> movea.l 1ca42 <speech>,a0
    4584:	|           |      move.l 8(a0),d0
    4588:	|           |      move.l d0,-(sp)
    458a:	|           |      jsr 176d6 <__floatsisf>
    4590:	|           |      addq.l #4,sp
    4592:	|           |      move.l d0,d2
    4594:	|           |      move.l 1cbac <cameraY>,d0
    459a:	|           |      move.l d0,-(sp)
    459c:	|           |      jsr 176d6 <__floatsisf>
    45a2:	|           |      addq.l #4,sp
    45a4:	|           |      move.l d0,d3
    45a6:	|           |      move.l 1ca4a <winHeight>,d4
    45ac:	|           |      move.l 1cbe6 <fontHeight>,d0
    45b2:	|           |      pea 3 <_start+0x3>
    45b6:	|           |      move.l d0,-(sp)
    45b8:	|           |      jsr 17cae <__divsi3>
    45be:	|           |      addq.l #8,sp
    45c0:	|           |      move.l d4,d1
    45c2:	|           |      sub.l d0,d1
    45c4:	|           |      move.l d1,-(sp)
    45c6:	|           |      jsr 176fe <__floatunsisf>
    45cc:	|           |      addq.l #4,sp
    45ce:	|           |      move.l d0,d1
    45d0:	|           |      move.l 1c484 <cameraZoom>,d0
    45d6:	|           |      move.l d0,-(sp)
    45d8:	|           |      move.l d1,-(sp)
    45da:	|           |      jsr 1758c <__divsf3>
    45e0:	|           |      addq.l #8,sp
    45e2:	|           |      move.l d0,-(sp)
    45e4:	|           |      move.l d3,-(sp)
    45e6:	|           |      jsr 17492 <__addsf3>
    45ec:	|           |      addq.l #8,sp
    45ee:	|           |      move.l d0,-(sp)
    45f0:	|           |      move.l d2,-(sp)
    45f2:	|           |      jsr 17842 <__gtsf2>
    45f8:	|           |      addq.l #8,sp
    45fa:	|           |      tst.l d0
    45fc:	|           +----- ble.s 466c <wrapSpeechXY+0x2e6>
    45fe:	|           |      move.l 1cbac <cameraY>,d0
    4604:	|           |      move.l d0,-(sp)
    4606:	|           |      jsr 176d6 <__floatsisf>
    460c:	|           |      addq.l #4,sp
    460e:	|           |      move.l d0,d2
    4610:	|           |      move.l 1ca4a <winHeight>,d3
    4616:	|           |      move.l 1cbe6 <fontHeight>,d0
    461c:	|           |      pea 3 <_start+0x3>
    4620:	|           |      move.l d0,-(sp)
    4622:	|           |      jsr 17cae <__divsi3>
    4628:	|           |      addq.l #8,sp
    462a:	|           |      move.l d3,d1
    462c:	|           |      sub.l d0,d1
    462e:	|           |      move.l d1,-(sp)
    4630:	|           |      jsr 176fe <__floatunsisf>
    4636:	|           |      addq.l #4,sp
    4638:	|           |      move.l d0,d1
    463a:	|           |      move.l 1c484 <cameraZoom>,d0
    4640:	|           |      move.l d0,-(sp)
    4642:	|           |      move.l d1,-(sp)
    4644:	|           |      jsr 1758c <__divsf3>
    464a:	|           |      addq.l #8,sp
    464c:	|           |      move.l d0,-(sp)
    464e:	|           |      move.l d2,-(sp)
    4650:	|           |      jsr 17492 <__addsf3>
    4656:	|           |      addq.l #8,sp
    4658:	|           |      movea.l 1ca42 <speech>,a2
    465e:	|           |      move.l d0,-(sp)
    4660:	|           |      jsr 1766e <__fixsfsi>
    4666:	|           |      addq.l #4,sp
    4668:	|           |      move.l d0,8(a2)

    if (offset) {
    466c:	|           '----> move.l 16(sp),d0
    4670:	|        ,-------- beq.s 46a6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4672:	|        |         movea.l 1ca42 <speech>,a0
    4678:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    467e:	|        |     ,-- bra.s 46a0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4680:	|        |  ,--|-> movea.l 20(sp),a0
    4684:	|        |  |  |   move.l 8(a0),d1
    4688:	|        |  |  |   move.l 16(sp),d0
    468c:	|        |  |  |   add.l d1,d0
    468e:	|        |  |  |   movea.l 20(sp),a0
    4692:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4696:	|        |  |  |   movea.l 20(sp),a0
    469a:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    46a0:	|        |  |  '-> tst.l 20(sp)
    46a4:	|        |  '----- bne.s 4680 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    46a6:	|        '-------> move.l 24(sp),d0
}
    46aa:	'----------------> movem.l (sp)+,d2-d4/a2
    46ae:	                   lea 16(sp),sp
    46b2:	                   rts

000046b4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    46b4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    46b8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    46bc:	       tst.l 24(sp)
    46c0:	   ,-- bge.s 46c6 <drawLine+0x12>
    46c2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    46c6:	   '-> tst.l 28(sp)
    46ca:	   ,-- bge.s 46d0 <drawLine+0x1c>
    46cc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    46d0:	   '-> tst.l 32(sp)
    46d4:	   ,-- bge.s 46da <drawLine+0x26>
    46d6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    46da:	   '-> tst.l 36(sp)
    46de:	   ,-- bge.s 46e4 <drawLine+0x30>
    46e0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    46e4:	   '-> move.l 1cb8a <sceneWidth>,d0
    46ea:	       cmp.l 24(sp),d0
    46ee:	   ,-- bge.s 46fe <drawLine+0x4a>
    46f0:	   |   move.l 1cb8a <sceneWidth>,d0
    46f6:	   |   move.l d0,d1
    46f8:	   |   subq.l #1,d1
    46fa:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    46fe:	   '-> move.l 1cb8a <sceneWidth>,d0
    4704:	       cmp.l 32(sp),d0
    4708:	   ,-- bge.s 4718 <drawLine+0x64>
    470a:	   |   move.l 1cb8a <sceneWidth>,d0
    4710:	   |   move.l d0,d1
    4712:	   |   subq.l #1,d1
    4714:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4718:	   '-> move.l 1cb8e <sceneHeight>,d0
    471e:	       cmp.l 28(sp),d0
    4722:	   ,-- bge.s 4732 <drawLine+0x7e>
    4724:	   |   move.l 1cb8e <sceneHeight>,d0
    472a:	   |   move.l d0,d1
    472c:	   |   subq.l #1,d1
    472e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4732:	   '-> move.l 1cb8e <sceneHeight>,d0
    4738:	       cmp.l 36(sp),d0
    473c:	   ,-- bge.s 474c <drawLine+0x98>
    473e:	   |   move.l 1cb8e <sceneHeight>,d0
    4744:	   |   move.l d0,d1
    4746:	   |   subq.l #1,d1
    4748:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    474c:	   '-> move.l 24(sp),d0
    4750:	       cmp.l 32(sp),d0
    4754:	,----- ble.s 4770 <drawLine+0xbc>
		x = x2; 
    4756:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    475c:	|      tst.w 10(sp)
    4760:	|      seq d0
    4762:	|      neg.b d0
    4764:	|      move.b d0,d0
    4766:	|      andi.w #255,d0
    476a:	|      move.w d0,10(sp)
    476e:	|  ,-- bra.s 4776 <drawLine+0xc2>
	} else x = x1;
    4770:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4776:	   '-> move.l 28(sp),d1
    477a:	       cmp.l 36(sp),d1
    477e:	,----- ble.s 479a <drawLine+0xe6>
		y = y2; 
    4780:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4786:	|      tst.w 10(sp)
    478a:	|      seq d0
    478c:	|      neg.b d0
    478e:	|      move.b d0,d0
    4790:	|      andi.w #255,d0
    4794:	|      move.w d0,10(sp)
    4798:	|  ,-- bra.s 47a0 <drawLine+0xec>
	} else y = y1;	
    479a:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    47a0:	   '-> move.l 32(sp),d0
    47a4:	       sub.l 24(sp),d0
    47a8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    47ac:	       move.l 6(sp),d0
    47b0:	   ,-- bpl.s 47b4 <drawLine+0x100>
    47b2:	   |   neg.l d0
    47b4:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    47b8:	       move.l 36(sp),d1
    47bc:	       sub.l 28(sp),d1
    47c0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    47c4:	       move.l 2(sp),d0
    47c8:	   ,-- bpl.s 47cc <drawLine+0x118>
    47ca:	   |   neg.l d0
    47cc:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    47d0:	       tst.l 6(sp)
    47d4:	   ,-- bne.s 47f8 <drawLine+0x144>
		diffX = 1;
    47d6:	   |   moveq #1,d0
    47d8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    47dc:	   |   move.l 1cb8a <sceneWidth>,d0
    47e2:	   |   subq.l #1,d0
    47e4:	   |   cmp.l 16(sp),d0
    47e8:	   +-- bne.s 47f8 <drawLine+0x144>
    47ea:	   |   move.l 1cb8a <sceneWidth>,d0
    47f0:	   |   move.l d0,d1
    47f2:	   |   subq.l #2,d1
    47f4:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    47f8:	   '-> tst.l 2(sp)
    47fc:	   ,-- bne.s 4820 <drawLine+0x16c>
		diffY = 1;
    47fe:	   |   moveq #1,d0
    4800:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4804:	   |   move.l 1cb8e <sceneHeight>,d0
    480a:	   |   subq.l #1,d0
    480c:	   |   cmp.l 12(sp),d0
    4810:	   +-- bne.s 4820 <drawLine+0x16c>
    4812:	   |   move.l 1cb8e <sceneHeight>,d0
    4818:	   |   move.l d0,d1
    481a:	   |   subq.l #2,d1
    481c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4820:	   '-> pea 1843f <PutChar+0x6f9>
    4826:	       jsr 172a4 <KPrintF>
    482c:	       addq.l #4,sp
	
}
    482e:	       nop
    4830:	       lea 20(sp),sp
    4834:	       rts

00004836 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4836:	                      lea -24(sp),sp
    483a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    483c:	                      move.l 1ca4e <firstTexture>,d0
    4842:	,-------------------- beq.w 4920 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4846:	|                     clr.l 24(sp)
    484a:	|     ,-------------- bra.w 4914 <deleteTextures+0xde>
			BOOL found = FALSE;
    484e:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4852:	|  |  |               move.l 1ca4e <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    485a:	|  |  |               movea.l 20(sp),a0
    485e:	|  |  |               move.l (a0),d1
    4860:	|  |  |               move.l 24(sp),d0
    4864:	|  |  |               add.l d0,d0
    4866:	|  |  |               add.l d0,d0
    4868:	|  |  |               movea.l 36(sp),a0
    486c:	|  |  |               adda.l d0,a0
    486e:	|  |  |               move.l (a0),d0
    4870:	|  |  |               cmp.l d1,d0
    4872:	|  |  |  ,----------- bne.w 4906 <deleteTextures+0xd0>
				found = TRUE;
    4876:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    487c:	|  |  |  |            movea.l 20(sp),a0
    4880:	|  |  |  |            move.l 12(a0),d0
    4884:	|  |  |  |            move.l d0,1ca4e <firstTexture>
				FreeVec(list);
    488a:	|  |  |  |            move.l 20(sp),6(sp)
    4890:	|  |  |  |            move.l 1caf2 <SysBase>,d0
    4896:	|  |  |  |            movea.l d0,a6
    4898:	|  |  |  |            movea.l 6(sp),a1
    489c:	|  |  |  |            jsr -690(a6)
				continue;
    48a0:	|  |  |  |  ,-------- bra.s 4910 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    48a2:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    48a6:	|  |  |  |  |  |      movea.l 12(a0),a0
    48aa:	|  |  |  |  |  |      move.l (a0),d1
    48ac:	|  |  |  |  |  |      move.l 24(sp),d0
    48b0:	|  |  |  |  |  |      add.l d0,d0
    48b2:	|  |  |  |  |  |      add.l d0,d0
    48b4:	|  |  |  |  |  |      movea.l 36(sp),a0
    48b8:	|  |  |  |  |  |      adda.l d0,a0
    48ba:	|  |  |  |  |  |      move.l (a0),d0
    48bc:	|  |  |  |  |  |      cmp.l d1,d0
    48be:	|  |  |  |  |  |  ,-- bne.s 48fc <deleteTextures+0xc6>
					found = TRUE;
    48c0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    48c6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48ca:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    48d0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48d4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    48d8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    48dc:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48e0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    48e4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    48ea:	|  |  |  |  |  |  |   move.l 1caf2 <SysBase>,d0
    48f0:	|  |  |  |  |  |  |   movea.l d0,a6
    48f2:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    48f6:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    48fa:	|  |  |  |  +--|--|-- bra.s 4910 <deleteTextures+0xda>
				}
				list = list->next;
    48fc:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4900:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4906:	|  |  |  '--|--|----> movea.l 20(sp),a0
    490a:	|  |  |     |  |      move.l 12(a0),d0
    490e:	|  |  |     |  '----- bne.s 48a2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4910:	|  |  |     '-------> addq.l #1,24(sp)
    4914:	|  |  '-------------> move.l 24(sp),d0
    4918:	|  |                  cmp.l 32(sp),d0
    491c:	|  '----------------- bcs.w 484e <deleteTextures+0x18>
			}
		}
	}
}
    4920:	'-------------------> nop
    4922:	                      movea.l (sp)+,a6
    4924:	                      lea 24(sp),sp
    4928:	                      rts

0000492a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    492a:	subq.l #4,sp
    492c:	move.l 8(sp),d0
    4930:	move.w d0,d0
    4932:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4936:	pea 18462 <PutChar+0x71c>
    493c:	jsr 172a4 <KPrintF>
    4942:	addq.l #4,sp
}
    4944:	nop
    4946:	addq.l #4,sp
    4948:	rts

0000494a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    494a:	       moveq #-1,d0
    494c:	       cmp.l 4(sp),d0
    4950:	   ,-- bne.s 4956 <resourceNameFromNum+0xc>
    4952:	   |   moveq #0,d0
    4954:	,--|-- bra.s 498e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4956:	|  '-> move.l 1cace <numResourceNames>,d0
    495c:	|  ,-- bne.s 4966 <resourceNameFromNum+0x1c>
    495e:	|  |   move.l #99474,d0
    4964:	+--|-- bra.s 498e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4966:	|  '-> move.l 1cace <numResourceNames>,d0
    496c:	|      cmp.l 4(sp),d0
    4970:	|  ,-- ble.s 4988 <resourceNameFromNum+0x3e>
    4972:	|  |   move.l 1ca86 <allResourceNames>,d1
    4978:	|  |   move.l 4(sp),d0
    497c:	|  |   add.l d0,d0
    497e:	|  |   add.l d0,d0
    4980:	|  |   movea.l d1,a0
    4982:	|  |   adda.l d0,a0
    4984:	|  |   move.l (a0),d0
    4986:	+--|-- bra.s 498e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4988:	|  '-> move.l #99483,d0
    498e:	'----> rts

00004990 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4990:	          lea -44(sp),sp
    4994:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4998:	          move.l #320,1ca46 <winWidth>
    winHeight = 256;
    49a2:	          move.l #256,1ca4a <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    49ac:	          tst.l 60(sp)
    49b0:	      ,-- bne.s 49c8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    49b2:	      |   pea 184ac <PutChar+0x766>
    49b8:	      |   jsr b8 <copyString>
    49be:	      |   addq.l #4,sp
    49c0:	      |   move.l d0,1ca5e <bundleFolder>
    49c6:	   ,--|-- bra.s 49de <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    49c8:	   |  '-> movea.l 64(sp),a0
    49cc:	   |      move.l (a0),d0
    49ce:	   |      move.l d0,-(sp)
    49d0:	   |      jsr b8 <copyString>
    49d6:	   |      addq.l #4,sp
    49d8:	   |      move.l d0,1ca5e <bundleFolder>
	}
    
	int lastSlash = -1;
    49de:	   '----> moveq #-1,d0
    49e0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    49e4:	          clr.l 44(sp)
    49e8:	   ,----- bra.s 4a0a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    49ea:	,--|----> move.l 1ca5e <bundleFolder>,d1
    49f0:	|  |      move.l 44(sp),d0
    49f4:	|  |      movea.l d1,a0
    49f6:	|  |      adda.l d0,a0
    49f8:	|  |      move.b (a0),d0
    49fa:	|  |      cmpi.b #47,d0
    49fe:	|  |  ,-- bne.s 4a06 <main_sludge+0x76>
    4a00:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a06:	|  |  '-> addq.l #1,44(sp)
    4a0a:	|  '----> move.l 1ca5e <bundleFolder>,d1
    4a10:	|         move.l 44(sp),d0
    4a14:	|         movea.l d1,a0
    4a16:	|         adda.l d0,a0
    4a18:	|         move.b (a0),d0
    4a1a:	'-------- bne.s 49ea <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4a1c:	          move.l 1ca5e <bundleFolder>,d0
    4a22:	          move.l 48(sp),d1
    4a26:	          addq.l #1,d1
    4a28:	          movea.l d0,a0
    4a2a:	          adda.l d1,a0
    4a2c:	          clr.b (a0)

	if (argc > 1) {
    4a2e:	          moveq #1,d0
    4a30:	          cmp.l 60(sp),d0
    4a34:	      ,-- bge.s 4a50 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4a36:	      |   move.l 60(sp),d0
    4a3a:	      |   addi.l #1073741823,d0
    4a40:	      |   add.l d0,d0
    4a42:	      |   add.l d0,d0
    4a44:	      |   movea.l 64(sp),a0
    4a48:	      |   adda.l d0,a0
    4a4a:	      |   move.l (a0),52(sp)
    4a4e:	   ,--|-- bra.s 4aaa <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4a50:	   |  '-> move.l 1ca5e <bundleFolder>,d0
    4a56:	   |      pea 184b2 <PutChar+0x76c>
    4a5c:	   |      move.l d0,-(sp)
    4a5e:	   |      jsr 13cf0 <joinStrings>
    4a64:	   |      addq.l #8,sp
    4a66:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4a6a:	   |      move.l 52(sp),-(sp)
    4a6e:	   |      jsr 13bea <fileExists>
    4a74:	   |      addq.l #4,sp
    4a76:	   |      tst.b d0
    4a78:	   +----- bne.s 4aaa <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4a7a:	   |      move.l 52(sp),40(sp)
    4a80:	   |      move.l 1caf2 <SysBase>,d0
    4a86:	   |      movea.l d0,a6
    4a88:	   |      movea.l 40(sp),a1
    4a8c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4a90:	   |      move.l 1ca5e <bundleFolder>,d0
    4a96:	   |      pea 184bf <PutChar+0x779>
    4a9c:	   |      move.l d0,-(sp)
    4a9e:	   |      jsr 13cf0 <joinStrings>
    4aa4:	   |      addq.l #8,sp
    4aa6:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4aaa:	   '----> pea 184c8 <PutChar+0x782>
    4ab0:	          jsr 172a4 <KPrintF>
    4ab6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4ab8:	          move.l 52(sp),-(sp)
    4abc:	          jsr 13bea <fileExists>
    4ac2:	          addq.l #4,sp
    4ac4:	          tst.b d0
    4ac6:	      ,-- bne.s 4b1e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ac8:	      |   move.l 1cafa <DOSBase>,d0
    4ace:	      |   movea.l d0,a6
    4ad0:	      |   jsr -60(a6)
    4ad4:	      |   move.l d0,28(sp)
    4ad8:	      |   move.l 28(sp),d0
    4adc:	      |   move.l d0,24(sp)
    4ae0:	      |   move.l #99528,20(sp)
    4ae8:	      |   moveq #21,d0
    4aea:	      |   move.l d0,16(sp)
    4aee:	      |   move.l 1cafa <DOSBase>,d0
    4af4:	      |   movea.l d0,a6
    4af6:	      |   move.l 24(sp),d1
    4afa:	      |   move.l 20(sp),d2
    4afe:	      |   move.l 16(sp),d3
    4b02:	      |   jsr -48(a6)
    4b06:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4b0a:	      |   pea 184c8 <PutChar+0x782>
    4b10:	      |   jsr 172a4 <KPrintF>
    4b16:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4b18:	      |   moveq #0,d0
    4b1a:	,-----|-- bra.w 4d1c <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4b1e:	|     '-> pea 184de <PutChar+0x798>
    4b24:	|         jsr 172a4 <KPrintF>
    4b2a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4b2c:	|         move.l 52(sp),-(sp)
    4b30:	|         jsr 4d26 <setGameFilePath>
    4b36:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4b38:	|         move.l 52(sp),-(sp)
    4b3c:	|         jsr 6270 <initSludge>
    4b42:	|         addq.l #4,sp
    4b44:	|         tst.w d0
    4b46:	|     ,-- bne.s 4b4e <main_sludge+0x1be>
    4b48:	|     |   moveq #0,d0
    4b4a:	+-----|-- bra.w 4d1c <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4b4e:	|     '-> move.l 1ca46 <winWidth>,d0
    4b54:	|         cmpi.l #320,d0
    4b5a:	|     ,-- bne.s 4b6a <main_sludge+0x1da>
    4b5c:	|     |   move.l 1ca4a <winHeight>,d0
    4b62:	|     |   cmpi.l #256,d0
    4b68:	|  ,--|-- beq.s 4b8c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4b6a:	|  |  '-> pea 184ef <PutChar+0x7a9>
    4b70:	|  |      jsr 172a4 <KPrintF>
    4b76:	|  |      addq.l #4,sp
		winWidth = 320;
    4b78:	|  |      move.l #320,1ca46 <winWidth>
		winHeight = 256;
    4b82:	|  |      move.l #256,1ca4a <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4b8c:	|  '----> pea 1856c <PutChar+0x826>
    4b92:	|         jsr 172a4 <KPrintF>
    4b98:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4b9a:	|         move.l 1ca4a <winHeight>,d0
    4ba0:	|         move.l d0,d1
    4ba2:	|         move.l 1ca46 <winWidth>,d0
    4ba8:	|         move.l d1,-(sp)
    4baa:	|         move.l d0,-(sp)
    4bac:	|         jsr d3b6 <resizeBackdrop>
    4bb2:	|         addq.l #8,sp
    4bb4:	|         tst.w d0
    4bb6:	|     ,-- bne.s 4bcc <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4bb8:	|     |   pea 1857f <PutChar+0x839>
    4bbe:	|     |   jsr 172a4 <KPrintF>
    4bc4:	|     |   addq.l #4,sp
		return FALSE;
    4bc6:	|     |   moveq #0,d0
    4bc8:	+-----|-- bra.w 4d1c <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4bcc:	|     '-> pea 185a5 <PutChar+0x85f>
    4bd2:	|         jsr 172a4 <KPrintF>
    4bd8:	|         addq.l #4,sp
	if (! initPeople ())
    4bda:	|         jsr a8d0 <initPeople>
    4be0:	|         tst.w d0
    4be2:	|     ,-- bne.s 4bf8 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4be4:	|     |   pea 185b2 <PutChar+0x86c>
    4bea:	|     |   jsr 172a4 <KPrintF>
    4bf0:	|     |   addq.l #4,sp
		return FALSE;
    4bf2:	|     |   moveq #0,d0
    4bf4:	+-----|-- bra.w 4d1c <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4bf8:	|     '-> pea 185d3 <PutChar+0x88d>
    4bfe:	|         jsr 172a4 <KPrintF>
    4c04:	|         addq.l #4,sp
	if (! initFloor ())
    4c06:	|         jsr 1665a <initFloor>
    4c0c:	|         tst.w d0
    4c0e:	|     ,-- bne.s 4c24 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4c10:	|     |   pea 185df <PutChar+0x899>
    4c16:	|     |   jsr 172a4 <KPrintF>
    4c1c:	|     |   addq.l #4,sp
		
		return FALSE;
    4c1e:	|     |   moveq #0,d0
    4c20:	+-----|-- bra.w 4d1c <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4c24:	|     '-> pea 185ff <PutChar+0x8b9>
    4c2a:	|         jsr 172a4 <KPrintF>
    4c30:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4c32:	|         jsr d572 <initObjectTypes>
    4c38:	|         tst.w d0
    4c3a:	|     ,-- bne.s 4c50 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4c3c:	|     |   pea 18610 <PutChar+0x8ca>
    4c42:	|     |   jsr 172a4 <KPrintF>
    4c48:	|     |   addq.l #4,sp
		return FALSE;
    4c4a:	|     |   moveq #0,d0
    4c4c:	+-----|-- bra.w 4d1c <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4c50:	|     '-> pea 18636 <PutChar+0x8f0>
    4c56:	|         jsr 172a4 <KPrintF>
    4c5c:	|         addq.l #4,sp
	initSpeech ();
    4c5e:	|         jsr 3e40 <initSpeech>
	KPrintF("Init status bar\n");
    4c64:	|         pea 18643 <PutChar+0x8fd>
    4c6a:	|         jsr 172a4 <KPrintF>
    4c70:	|         addq.l #4,sp
	initStatusBar ();
    4c72:	|         jsr 82d0 <initStatusBar>

	KPrintF("Get numbered string\n");
    4c78:	|         pea 18654 <PutChar+0x90e>
    4c7e:	|         jsr 172a4 <KPrintF>
    4c84:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4c86:	|         pea 1 <_start+0x1>
    4c8a:	|         jsr 75da <getNumberedString>
    4c90:	|         addq.l #4,sp
    4c92:	|         move.l d0,1ca56 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4c98:	|         pea 18669 <PutChar+0x923>
    4c9e:	|         jsr 172a4 <KPrintF>
    4ca4:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4ca6:	|         move.l 1cac2 <noStack>,d0
    4cac:	|         pea 1 <_start+0x1>
    4cb0:	|         move.l d0,-(sp)
    4cb2:	|         clr.l -(sp)
    4cb4:	|         clr.l -(sp)
    4cb6:	|         clr.l -(sp)
    4cb8:	|         jsr 7432 <startNewFunctionNum>
    4cbe:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4cc2:	|         pea 18681 <PutChar+0x93b>
    4cc8:	|         jsr 172a4 <KPrintF>
    4cce:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4cd0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4cd8:	|         clr.l 1ca62 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4cde:	|     ,-- bra.s 4cfe <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4ce0:	|  ,--|-> jsr 72b2 <sludgeDisplay>
		CsiCheckInput();
    4ce6:	|  |  |   jsr ced4 <CsiCheckInput>
		walkAllPeople();
    4cec:	|  |  |   jsr be8e <walkAllPeople>
		handleInput();
    4cf2:	|  |  |   jsr 600a <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4cf8:	|  |  |   jsr 171d8 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4cfe:	|  |  '-> move.l 1ca62 <weAreDoneSoQuit>,d0
    4d04:	|  '----- beq.s 4ce0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4d06:	|         move.l 52(sp),32(sp)
    4d0c:	|         move.l 1caf2 <SysBase>,d0
    4d12:	|         movea.l d0,a6
    4d14:	|         movea.l 32(sp),a1
    4d18:	|         jsr -690(a6)
}
    4d1c:	'-------> movem.l (sp)+,d2-d3/a6
    4d20:	          lea 44(sp),sp
    4d24:	          rts

00004d26 <setGameFilePath>:

void setGameFilePath (char * f) {
    4d26:	          lea -1104(sp),sp
    4d2a:	          move.l a6,-(sp)
    4d2c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4d2e:	          move.l #1112,d0
    4d34:	          add.l sp,d0
    4d36:	          addi.l #-1102,d0
    4d3c:	          move.l d0,1100(sp)
    4d40:	          move.l #998,1096(sp)
    4d48:	          move.l 1cafa <DOSBase>,d0
    4d4e:	          movea.l d0,a6
    4d50:	          move.l 1100(sp),d1
    4d54:	          move.l 1096(sp),d2
    4d58:	          jsr -564(a6)
    4d5c:	          move.w d0,1094(sp)
    4d60:	          move.w 1094(sp),d0
    4d64:	      ,-- bne.s 4d74 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4d66:	      |   pea 18694 <PutChar+0x94e>
    4d6c:	      |   jsr 172a4 <KPrintF>
    4d72:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4d74:	      '-> moveq #-1,d0
    4d76:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4d7a:	          clr.l 1104(sp)
    4d7e:	   ,----- bra.s 4d9c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4d80:	,--|----> move.l 1104(sp),d0
    4d84:	|  |      movea.l 1116(sp),a0
    4d88:	|  |      adda.l d0,a0
    4d8a:	|  |      move.b (a0),d0
    4d8c:	|  |      cmpi.b #47,d0
    4d90:	|  |  ,-- bne.s 4d98 <setGameFilePath+0x72>
    4d92:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4d98:	|  |  '-> addq.l #1,1104(sp)
    4d9c:	|  '----> move.l 1104(sp),d0
    4da0:	|         movea.l 1116(sp),a0
    4da4:	|         adda.l d0,a0
    4da6:	|         move.b (a0),d0
    4da8:	'-------- bne.s 4d80 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4daa:	          moveq #-1,d0
    4dac:	          cmp.l 1108(sp),d0
    4db0:	   ,----- beq.s 4e2a <setGameFilePath+0x104>
		f[got] = 0;	
    4db2:	   |      move.l 1108(sp),d0
    4db6:	   |      movea.l 1116(sp),a0
    4dba:	   |      adda.l d0,a0
    4dbc:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4dbe:	   |      move.l 1116(sp),1090(sp)
    4dc4:	   |      moveq #-2,d0
    4dc6:	   |      move.l d0,1086(sp)
    4dca:	   |      move.l 1cafa <DOSBase>,d0
    4dd0:	   |      movea.l d0,a6
    4dd2:	   |      move.l 1090(sp),d1
    4dd6:	   |      move.l 1086(sp),d2
    4dda:	   |      jsr -84(a6)
    4dde:	   |      move.l d0,1082(sp)
    4de2:	   |      move.l 1082(sp),d0
    4de6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4dea:	   |      move.l 1078(sp),1074(sp)
    4df0:	   |      move.l 1cafa <DOSBase>,d0
    4df6:	   |      movea.l d0,a6
    4df8:	   |      move.l 1074(sp),d1
    4dfc:	   |      jsr -126(a6)
    4e00:	   |      move.l d0,1070(sp)
    4e04:	   |      move.l 1070(sp),d0
    4e08:	   |  ,-- bne.s 4e1c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4e0a:	   |  |   move.l 1116(sp),-(sp)
    4e0e:	   |  |   pea 186ba <PutChar+0x974>
    4e14:	   |  |   jsr 172a4 <KPrintF>
    4e1a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4e1c:	   |  '-> move.l 1108(sp),d0
    4e20:	   |      movea.l 1116(sp),a0
    4e24:	   |      adda.l d0,a0
    4e26:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4e2a:	   '----> move.l #400,1066(sp)
    4e32:	          clr.l 1062(sp)
    4e36:	          move.l 1caf2 <SysBase>,d0
    4e3c:	          movea.l d0,a6
    4e3e:	          move.l 1066(sp),d0
    4e42:	          move.l 1062(sp),d1
    4e46:	          jsr -684(a6)
    4e4a:	          move.l d0,1058(sp)
    4e4e:	          move.l 1058(sp),d0
    4e52:	          move.l d0,1ca5a <gamePath>
	if (gamePath==0) {
    4e58:	          move.l 1ca5a <gamePath>,d0
    4e5e:	      ,-- bne.s 4e72 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4e60:	      |   pea 186ed <PutChar+0x9a7>
    4e66:	      |   jsr 172a4 <KPrintF>
    4e6c:	      |   addq.l #4,sp
    4e6e:	   ,--|-- bra.w 4f5a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4e72:	   |  '-> move.l 1ca5a <gamePath>,1054(sp)
    4e7a:	   |      moveq #-2,d0
    4e7c:	   |      move.l d0,1050(sp)
    4e80:	   |      move.l 1cafa <DOSBase>,d0
    4e86:	   |      movea.l d0,a6
    4e88:	   |      move.l 1054(sp),d1
    4e8c:	   |      move.l 1050(sp),d2
    4e90:	   |      jsr -84(a6)
    4e94:	   |      move.l d0,1046(sp)
    4e98:	   |      move.l 1046(sp),d0
    4e9c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4ea0:	   |      move.l 1042(sp),1038(sp)
    4ea6:	   |      move.l 1cafa <DOSBase>,d0
    4eac:	   |      movea.l d0,a6
    4eae:	   |      move.l 1038(sp),d1
    4eb2:	   |      jsr -126(a6)
    4eb6:	   |      move.l d0,1034(sp)
    4eba:	   |      move.l 1034(sp),d0
    4ebe:	   |  ,-- bne.s 4ece <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4ec0:	   |  |   pea 18728 <PutChar+0x9e2>
    4ec6:	   |  |   jsr 172a4 <KPrintF>
    4ecc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4ece:	   |  '-> move.l #1112,d0
    4ed4:	   |      add.l sp,d0
    4ed6:	   |      addi.l #-1102,d0
    4edc:	   |      move.l d0,1030(sp)
    4ee0:	   |      moveq #-2,d0
    4ee2:	   |      move.l d0,1026(sp)
    4ee6:	   |      move.l 1cafa <DOSBase>,d0
    4eec:	   |      movea.l d0,a6
    4eee:	   |      move.l 1030(sp),d1
    4ef2:	   |      move.l 1026(sp),d2
    4ef6:	   |      jsr -84(a6)
    4efa:	   |      move.l d0,1022(sp)
    4efe:	   |      move.l 1022(sp),d0
    4f02:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4f06:	   |      move.l 1042(sp),1018(sp)
    4f0c:	   |      move.l 1cafa <DOSBase>,d0
    4f12:	   |      movea.l d0,a6
    4f14:	   |      move.l 1018(sp),d1
    4f18:	   |      jsr -126(a6)
    4f1c:	   |      move.l d0,1014(sp)
    4f20:	   |      move.l 1014(sp),d0
    4f24:	   |  ,-- bne.s 4f3a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4f26:	   |  |   moveq #10,d0
    4f28:	   |  |   add.l sp,d0
    4f2a:	   |  |   move.l d0,-(sp)
    4f2c:	   |  |   pea 18754 <PutChar+0xa0e>
    4f32:	   |  |   jsr 172a4 <KPrintF>
    4f38:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4f3a:	   |  '-> move.l 1ca5a <gamePath>,d0
    4f40:	   +----- beq.s 4f5a <setGameFilePath+0x234>
    4f42:	   |      move.l 1ca5a <gamePath>,1010(sp)
    4f4a:	   |      move.l 1caf2 <SysBase>,d0
    4f50:	   |      movea.l d0,a6
    4f52:	   |      movea.l 1010(sp),a1
    4f56:	   |      jsr -690(a6)
}
    4f5a:	   '----> move.l (sp)+,d2
    4f5c:	          movea.l (sp)+,a6
    4f5e:	          lea 1104(sp),sp
    4f62:	          rts

00004f64 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4f64:	,-------> lea -16(sp),sp
    4f68:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    4f6a:	|         move.l 24(sp),d0
    4f6e:	|         move.l d0,-(sp)
    4f70:	|         pea 1885c <PutChar+0xb16>
    4f76:	|         jsr 172a4 <KPrintF>
    4f7c:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    4f7e:	|         move.l 24(sp),-(sp)
    4f82:	|         jsr 702e <pauseFunction>
    4f88:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4f8a:	|     ,-- bra.s 4f9c <abortFunction+0x38>
    4f8c:	|  ,--|-> moveq #24,d0
    4f8e:	|  |  |   add.l 24(sp),d0
    4f92:	|  |  |   move.l d0,-(sp)
    4f94:	|  |  |   jsr 15148 <trimStack>
    4f9a:	|  |  |   addq.l #4,sp
    4f9c:	|  |  '-> movea.l 24(sp),a0
    4fa0:	|  |      move.l 24(a0),d0
    4fa4:	|  '----- bne.s 4f8c <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    4fa6:	|         movea.l 24(sp),a0
    4faa:	|         move.l 4(a0),12(sp)
    4fb0:	|         move.l 1caf2 <SysBase>,d0
    4fb6:	|         movea.l d0,a6
    4fb8:	|         movea.l 12(sp),a1
    4fbc:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4fc0:	|         clr.l 16(sp)
    4fc4:	|     ,-- bra.s 4fe4 <abortFunction+0x80>
    4fc6:	|  ,--|-> movea.l 24(sp),a0
    4fca:	|  |  |   move.l 20(a0),d1
    4fce:	|  |  |   move.l 16(sp),d0
    4fd2:	|  |  |   lsl.l #3,d0
    4fd4:	|  |  |   add.l d1,d0
    4fd6:	|  |  |   move.l d0,-(sp)
    4fd8:	|  |  |   jsr 14a12 <unlinkVar>
    4fde:	|  |  |   addq.l #4,sp
    4fe0:	|  |  |   addq.l #1,16(sp)
    4fe4:	|  |  '-> movea.l 24(sp),a0
    4fe8:	|  |      move.l 8(a0),d0
    4fec:	|  |      cmp.l 16(sp),d0
    4ff0:	|  '----- bgt.s 4fc6 <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    4ff2:	|         movea.l 24(sp),a0
    4ff6:	|         move.l 8(a0),d0
    4ffa:	|     ,-- ble.s 5016 <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    4ffc:	|     |   movea.l 24(sp),a0
    5000:	|     |   move.l 20(a0),8(sp)
    5006:	|     |   move.l 1caf2 <SysBase>,d0
    500c:	|     |   movea.l d0,a6
    500e:	|     |   movea.l 8(sp),a1
    5012:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    5016:	|     '-> moveq #28,d0
    5018:	|         add.l 24(sp),d0
    501c:	|         move.l d0,-(sp)
    501e:	|         jsr 14a12 <unlinkVar>
    5024:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    5026:	|         movea.l 24(sp),a0
    502a:	|         move.l 40(a0),d0
    502e:	|     ,-- beq.s 5040 <abortFunction+0xdc>
    5030:	|     |   movea.l 24(sp),a0
    5034:	|     |   move.l 40(a0),d0
    5038:	|     |   move.l d0,-(sp)
    503a:	'-----|-- jsr 4f64 <abortFunction>(pc)
    503e:	      |   addq.l #4,sp
	FreeVec(fun);
    5040:	      '-> move.l 24(sp),4(sp)
    5046:	          move.l 1caf2 <SysBase>,d0
    504c:	          movea.l d0,a6
    504e:	          movea.l 4(sp),a1
    5052:	          jsr -690(a6)
	fun = NULL;
    5056:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    505a:	          pea 18876 <PutChar+0xb30>
    5060:	          jsr 172a4 <KPrintF>
    5066:	          addq.l #4,sp
}
    5068:	          nop
    506a:	          movea.l (sp)+,a6
    506c:	          lea 16(sp),sp
    5070:	          rts

00005072 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5072:	          subq.l #8,sp
	int n = 0;
    5074:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5078:	          movea.l 20(sp),a0
    507c:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    507e:	          move.l 1ca8a <allRunningFunctions>,(sp)
	while (fun) {
    5084:	   ,----- bra.s 50b2 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5086:	,--|----> movea.l (sp),a0
    5088:	|  |      move.l (a0),d0
    508a:	|  |      cmp.l 12(sp),d0
    508e:	|  |  ,-- bne.s 50ac <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5090:	|  |  |   movea.l (sp),a0
    5092:	|  |  |   move.w #1,54(a0)
			n++;
    5098:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    509c:	|  |  |   move.l (sp),d0
    509e:	|  |  |   cmp.l 16(sp),d0
    50a2:	|  |  +-- bne.s 50ac <cancelAFunction+0x3a>
    50a4:	|  |  |   movea.l 20(sp),a0
    50a8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    50ac:	|  |  '-> movea.l (sp),a0
    50ae:	|  |      move.l 44(a0),(sp)
	while (fun) {
    50b2:	|  '----> tst.l (sp)
    50b4:	'-------- bne.s 5086 <cancelAFunction+0x14>
	}
	return n;
    50b6:	          move.l 4(sp),d0
}
    50ba:	          addq.l #8,sp
    50bc:	          rts

000050be <completeTimers>:


void completeTimers () {
    50be:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50c0:	          move.l 1ca8a <allRunningFunctions>,(sp)

	while (thisFunction) {
    50c6:	   ,----- bra.s 50dc <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    50c8:	,--|----> movea.l (sp),a0
    50ca:	|  |      move.b 56(a0),d0
    50ce:	|  |  ,-- bne.s 50d6 <completeTimers+0x18>
    50d0:	|  |  |   movea.l (sp),a0
    50d2:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    50d6:	|  |  '-> movea.l (sp),a0
    50d8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50dc:	|  '----> tst.l (sp)
    50de:	'-------- bne.s 50c8 <completeTimers+0xa>
	}
}
    50e0:	          nop
    50e2:	          nop
    50e4:	          addq.l #4,sp
    50e6:	          rts

000050e8 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    50e8:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    50ec:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    50f2:	                                                             movea.l 80(sp),a0
    50f6:	                                                             move.w 54(a0),d0
    50fa:	,----------------------------------------------------------- beq.w 5f88 <continueFunction+0xea0>
		abortFunction (fun);
    50fe:	|                                                            move.l 80(sp),-(sp)
    5102:	|                                                            jsr 4f64 <abortFunction>
    5108:	|                                                            addq.l #4,sp
		return TRUE;
    510a:	|                                                            moveq #1,d0
    510c:	|  ,-------------------------------------------------------- bra.w 5f92 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5110:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5116:	|  |  |                                                      movea.l 80(sp),a0
    511a:	|  |  |                                                      move.l 4(a0),d1
    511e:	|  |  |                                                      movea.l 80(sp),a0
    5122:	|  |  |                                                      move.l 36(a0),d0
    5126:	|  |  |                                                      lsl.l #3,d0
    5128:	|  |  |                                                      movea.l d1,a0
    512a:	|  |  |                                                      adda.l d0,a0
    512c:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5132:	|  |  |                                                      movea.l 80(sp),a0
    5136:	|  |  |                                                      move.l 4(a0),d1
    513a:	|  |  |                                                      movea.l 80(sp),a0
    513e:	|  |  |                                                      move.l 36(a0),d0
    5142:	|  |  |                                                      lsl.l #3,d0
    5144:	|  |  |                                                      movea.l d1,a0
    5146:	|  |  |                                                      adda.l d0,a0
    5148:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    514c:	|  |  |                                                      moveq #41,d0
    514e:	|  |  |                                                      cmp.l 64(sp),d0
    5152:	|  |  |  ,-------------------------------------------------- bcs.w 5f3c <continueFunction+0xe54>
    5156:	|  |  |  |                                                   move.l 64(sp),d0
    515a:	|  |  |  |                                                   add.l d0,d0
    515c:	|  |  |  |                                                   movea.l d0,a0
    515e:	|  |  |  |                                                   adda.l #20842,a0
    5164:	|  |  |  |                                                   move.w (a0),d0
    5166:	|  |  |  |                                                   jmp (516a <continueFunction+0x82>,pc,d0.w)
    516a:	|  |  |  |                                                   bset d6,(a2)
    516c:	|  |  |  |                                                   ori.w #2670,(a4)
    5170:	|  |  |  |                                                   eori.w #2416,d6
    5174:	|  |  |  |                                                   bchg d4,d2
    5176:	|  |  |  |                                                   bclr d4,(a4)+
    5178:	|  |  |  |                                                   andi.l #181013194,d4
    517e:	|  |  |  |                                                   .short 0x0aca
    5180:	|  |  |  |                                                   .short 0x0aca
    5182:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    518a:	|  |  |  |                                                   .short 0x0aca
    518c:	|  |  |  |                                                   andi.w #906,-(a4)
    5190:	|  |  |  |                                                   bchg d1,196(a2)
    5194:	|  |  |  |                                                   bset d1,580(a4)
    5198:	|  |  |  |                                                   bclr d1,2576(a2)
    519c:	|  |  |  |                                                   andi.b #-56,2762(a2)
    51a2:	|  |  |  |                                                   .short 0x0aca
    51a4:	|  |  |  |                                                   eori.l #63572682,d0
    51aa:	|  |  |  |                                                   .short 0x0aca
    51ac:	|  |  |  |                                                   bchg d3,-(a2)
    51ae:	|  |  |  |                                                   bchg #-36,(a2)
    51b2:	|  |  |  |                                                   .short 0x08cc
    51b4:	|  |  |  |                                                   addi.b #14,1038(a0)
    51ba:	|  |  |  |                                                   .short 0x040e
    51bc:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    51c0:	|  |  |  |                                                   ori.w #8232,(a0)
    51c4:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    51ca:	|  |  |  |                                                   ori.w #12136,(a0)
    51ce:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    51d4:	|  |  |  |                                                   ori.w #12328,(a0)
    51d8:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    51de:	|  |  |  |                                                   add.l 44(sp),d1
    51e2:	|  |  |  |                                                   moveq #28,d0
    51e4:	|  |  |  |                                                   add.l 80(sp),d0
    51e8:	|  |  |  |                                                   move.l d1,-(sp)
    51ea:	|  |  |  |                                                   move.l d0,-(sp)
    51ec:	|  |  |  |                                                   jsr 14c7e <copyVariable>
    51f2:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    51f4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    51f8:	|  |  |  |                                                   jsr 5f98 <finishFunction>
    51fe:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5200:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    5206:	|  |  |  |                                                   move.l 80(sp),-(sp)
    520a:	|  |  |  |                                                   jsr 70d6 <restartFunction>
    5210:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5212:	|  |  |  |  ,----------------------------------------------- bra.w 5f70 <continueFunction+0xe88>
				finishFunction (fun);
    5216:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    521a:	|  |  |  |  |                                                jsr 5f98 <finishFunction>
    5220:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5222:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5226:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    522a:	|  |  |  |  +----------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    522e:	|  |  |  |  |                                                movea.l 80(sp),a0
    5232:	|  |  |  |  |                                                move.l 28(a0),d0
    5236:	|  |  |  |  |                                                moveq #2,d1
    5238:	|  |  |  |  |                                                cmp.l d0,d1
    523a:	|  |  |  |  |                                            ,-- beq.s 5246 <continueFunction+0x15e>
    523c:	|  |  |  |  |                                            |   moveq #4,d1
    523e:	|  |  |  |  |                                            |   cmp.l d0,d1
    5240:	|  |  |  |  |                                         ,--|-- beq.s 5294 <continueFunction+0x1ac>
    5242:	|  |  |  |  |                                ,--------|--|-- bra.w 537c <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5246:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    524a:	|  |  |  |  |                                |        |      jsr 702e <pauseFunction>
    5250:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5252:	|  |  |  |  |                                |        |      moveq #24,d0
    5254:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5258:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    525c:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5260:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5264:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5266:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    526a:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    526e:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5270:	|  |  |  |  |                                |        |      jsr 7432 <startNewFunctionNum>
    5276:	|  |  |  |  |                                |        |      lea 20(sp),sp
    527a:	|  |  |  |  |                                |        |      tst.l d0
    527c:	|  |  |  |  |                                |        |  ,-- bne.s 5284 <continueFunction+0x19c>
    527e:	|  |  |  |  |                                |        |  |   clr.w d0
    5280:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5f92 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5284:	|  |  |  |  |                                |        |  '-> move.l 1ca8a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    528c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5290:	|  |  |  |  |                                |  ,-----|----- bra.w 5390 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5294:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    5298:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    529c:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    52a0:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    52a4:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    52a6:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    52a8:	|  |  |  |  |                                |  |            jsr 134a6 <callBuiltIn>
    52ae:	|  |  |  |  |                                |  |            lea 12(sp),sp
    52b2:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    52b6:	|  |  |  |  |                                |  |            moveq #5,d0
    52b8:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    52bc:	|  |  |  |  |                                |  |  ,-------- bcs.w 5378 <continueFunction+0x290>
    52c0:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    52c4:	|  |  |  |  |                                |  |  |         add.l d0,d0
    52c6:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    52c8:	|  |  |  |  |                                |  |  |         adda.l #21204,a0
    52ce:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    52d0:	|  |  |  |  |                                |  |  |         jmp (52d4 <continueFunction+0x1ec>,pc,d0.w)
    52d4:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    52da:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    52de:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    52e4:	|  |  |  |  |                                |  |  |         .short 0x888e
    52e6:	|  |  |  |  |                                |  |  |         jsr 172a4 <KPrintF>
    52ec:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    52ee:	|  |  |  |  |                                |  |  |         clr.w d0
    52f0:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5f92 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    52f4:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    52f8:	|  |  |  |  |                                |  |  |         jsr 702e <pauseFunction>
    52fe:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5300:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    5304:	|  |  |  |  |                                |  |  |  ,----- bra.s 537a <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    5306:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    530a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    530e:	|  |  |  |  |                                |  |  |  +----- bra.s 537a <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5310:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5314:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    531a:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    531c:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5320:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5324:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5328:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    532a:	|  |  |  |  |                                |  |  |  |      jsr 150b6 <setVariable>
    5330:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5334:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5338:	|  |  |  |  |                                |  |  |  |      jsr 702e <pauseFunction>
    533e:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5340:	|  |  |  |  |                                |  |  |  |      move.l 1cac2 <noStack>,d1
    5346:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    534a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    534c:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    534e:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5352:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5354:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5356:	|  |  |  |  |                                |  |  |  |      jsr 7432 <startNewFunctionNum>
    535c:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5360:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5362:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 536a <continueFunction+0x282>
    5364:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5366:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5f92 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    536a:	|  |  |  |  |                                |  |  |  |  '-> move.l 1ca8a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5372:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5376:	|  |  |  |  |                                |  |  |  +----- bra.s 537a <continueFunction+0x292>

						default:
						break;
    5378:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    537a:	|  |  |  |  |                                |  +-----'----X bra.s 5390 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    537c:	|  |  |  |  |                                '--|----------> pea 188d9 <PutChar+0xb93>
    5382:	|  |  |  |  |                                   |            jsr 172a4 <KPrintF>
    5388:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    538a:	|  |  |  |  |                                   |            clr.w d0
    538c:	|  +--|--|--|-----------------------------------|----------- bra.w 5f92 <continueFunction+0xeaa>
			}
			break;
    5390:	|  |  |  |  +-----------------------------------'----------X bra.w 5f70 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5394:	|  |  |  |  |                                                moveq #28,d0
    5396:	|  |  |  |  |                                                add.l 80(sp),d0
    539a:	|  |  |  |  |                                                clr.l -(sp)
    539c:	|  |  |  |  |                                                clr.l -(sp)
    539e:	|  |  |  |  |                                                move.l d0,-(sp)
    53a0:	|  |  |  |  |                                                jsr 150b6 <setVariable>
    53a6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53aa:	|  |  |  |  +----------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    53ae:	|  |  |  |  |                                                move.l 68(sp),d1
    53b2:	|  |  |  |  |                                                moveq #28,d0
    53b4:	|  |  |  |  |                                                add.l 80(sp),d0
    53b8:	|  |  |  |  |                                                move.l d1,-(sp)
    53ba:	|  |  |  |  |                                                pea 5 <_start+0x5>
    53be:	|  |  |  |  |                                                move.l d0,-(sp)
    53c0:	|  |  |  |  |                                                jsr 150b6 <setVariable>
    53c6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53ca:	|  |  |  |  +----------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    53ce:	|  |  |  |  |                                                move.l 68(sp),d1
    53d2:	|  |  |  |  |                                                moveq #28,d0
    53d4:	|  |  |  |  |                                                add.l 80(sp),d0
    53d8:	|  |  |  |  |                                                move.l d1,-(sp)
    53da:	|  |  |  |  |                                                pea 1 <_start+0x1>
    53de:	|  |  |  |  |                                                move.l d0,-(sp)
    53e0:	|  |  |  |  |                                                jsr 150b6 <setVariable>
    53e6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53ea:	|  |  |  |  +----------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    53ee:	|  |  |  |  |                                                moveq #28,d0
    53f0:	|  |  |  |  |                                                add.l 80(sp),d0
    53f4:	|  |  |  |  |                                                movea.l 80(sp),a0
    53f8:	|  |  |  |  |                                                movea.l 20(a0),a0
    53fc:	|  |  |  |  |                                                move.l 68(sp),d1
    5400:	|  |  |  |  |                                                lsl.l #3,d1
    5402:	|  |  |  |  |                                                add.l a0,d1
    5404:	|  |  |  |  |                                                move.l d0,-(sp)
    5406:	|  |  |  |  |                                                move.l d1,-(sp)
    5408:	|  |  |  |  |                                                jsr 14c7e <copyVariable>
    540e:	|  |  |  |  |                                                addq.l #8,sp
    5410:	|  |  |  |  |                                                tst.w d0
    5412:	|  |  |  |  |  ,-------------------------------------------- bne.w 5f4e <continueFunction+0xe66>
    5416:	|  |  |  |  |  |                                             clr.w d0
    5418:	|  +--|--|--|--|-------------------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    541c:	|  |  |  |  |  |                                             moveq #28,d0
    541e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5422:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5424:	|  |  |  |  |  |                                             jsr 14d04 <getBoolean>
    542a:	|  |  |  |  |  |                                             addq.l #4,sp
    542c:	|  |  |  |  |  |                                             tst.w d0
    542e:	|  |  |  |  |  |                                      ,----- beq.s 544a <continueFunction+0x362>
    5430:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5434:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5438:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    543a:	|  |  |  |  |  |                                      |      jsr 14d04 <getBoolean>
    5440:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5442:	|  |  |  |  |  |                                      |      tst.w d0
    5444:	|  |  |  |  |  |                                      +----- beq.s 544a <continueFunction+0x362>
    5446:	|  |  |  |  |  |                                      |      moveq #1,d0
    5448:	|  |  |  |  |  |                                      |  ,-- bra.s 544c <continueFunction+0x364>
    544a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    544c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    544e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5452:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5454:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5458:	|  |  |  |  |  |                                             move.l d1,-(sp)
    545a:	|  |  |  |  |  |                                             jsr 150b6 <setVariable>
    5460:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5464:	|  |  |  |  |  |                                             moveq #24,d0
    5466:	|  |  |  |  |  |                                             add.l 80(sp),d0
    546a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    546c:	|  |  |  |  |  |                                             jsr 15148 <trimStack>
    5472:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5474:	|  |  |  |  +--|-------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5478:	|  |  |  |  |  |                                             moveq #28,d0
    547a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    547e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5480:	|  |  |  |  |  |                                             jsr 14d04 <getBoolean>
    5486:	|  |  |  |  |  |                                             addq.l #4,sp
    5488:	|  |  |  |  |  |                                             tst.w d0
    548a:	|  |  |  |  |  |                                         ,-- bne.s 54a2 <continueFunction+0x3ba>
    548c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5490:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5494:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5496:	|  |  |  |  |  |                                         |   jsr 14d04 <getBoolean>
    549c:	|  |  |  |  |  |                                         |   addq.l #4,sp
    549e:	|  |  |  |  |  |                                         |   tst.w d0
    54a0:	|  |  |  |  |  |                                      ,--|-- beq.s 54a6 <continueFunction+0x3be>
    54a2:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    54a4:	|  |  |  |  |  |                                      |  ,-- bra.s 54a8 <continueFunction+0x3c0>
    54a6:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    54a8:	|  |  |  |  |  |                                         '-> moveq #28,d1
    54aa:	|  |  |  |  |  |                                             add.l 80(sp),d1
    54ae:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54b0:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    54b4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54b6:	|  |  |  |  |  |                                             jsr 150b6 <setVariable>
    54bc:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    54c0:	|  |  |  |  |  |                                             moveq #24,d0
    54c2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54c6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54c8:	|  |  |  |  |  |                                             jsr 15148 <trimStack>
    54ce:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    54d0:	|  |  |  |  +--|-------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    54d4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    54d8:	|  |  |  |  |  |                                             moveq #28,d0
    54da:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54de:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54e0:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    54e4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54e6:	|  |  |  |  |  |                                             jsr 150b6 <setVariable>
    54ec:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    54f0:	|  |  |  |  +--|-------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    54f4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    54f8:	|  |  |  |  |  |                                             moveq #28,d0
    54fa:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54fe:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5500:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5504:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5506:	|  |  |  |  |  |                                             jsr 150b6 <setVariable>
    550c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5510:	|  |  |  |  +--|-------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5514:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5518:	|  |  |  |  |  |                                             moveq #28,d0
    551a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    551e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5520:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5524:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5526:	|  |  |  |  |  |                                             jsr 150b6 <setVariable>
    552c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5530:	|  |  |  |  +--|-------------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5534:	|  |  |  |  |  |                                             move.l 1ca52 <dialogValue>,d0
    553a:	|  |  |  |  |  |                                             moveq #1,d1
    553c:	|  |  |  |  |  |                                             cmp.l d0,d1
    553e:	|  |  |  |  |  |  ,----------------------------------------- beq.w 5f52 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5542:	|  |  |  |  |  |  |                                          pea 188ee <PutChar+0xba8>
    5548:	|  |  |  |  |  |  |                                          jsr 172a4 <KPrintF>
    554e:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5550:	|  |  |  |  |  |  |                                          clr.w d0
    5552:	|  +--|--|--|--|--|----------------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5556:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    555a:	|  |  |  |  |  |  |                                          moveq #28,d0
    555c:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5560:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5562:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5564:	|  |  |  |  |  |  |                                          jsr 14848 <loadStringToVar>
    556a:	|  |  |  |  |  |  |                                          addq.l #8,sp
    556c:	|  |  |  |  |  |  |                                          tst.w d0
    556e:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5f56 <continueFunction+0xe6e>
					return FALSE;
    5572:	|  |  |  |  |  |  |  |                                       clr.w d0
    5574:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5578:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    557c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5580:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5582:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5584:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5586:	|  |  |  |  |  |  |  |                                ,----- beq.s 55e4 <continueFunction+0x4fc>
    5588:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    558a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    558c:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5778 <continueFunction+0x690>
    5590:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5592:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 559e <continueFunction+0x4b6>
    5594:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5596:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5598:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 55e4 <continueFunction+0x4fc>
    559a:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5778 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    559e:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    55a0:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    55a4:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 55d0 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    55a6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    55a8:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55ac:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55ae:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55b0:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55b2:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150b6 <setVariable>
    55b8:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    55bc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    55be:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55c2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55c4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15148 <trimStack>
    55ca:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    55cc:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 578e <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    55d0:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 1892f <PutChar+0xbe9>
    55d6:	|  |  |  |  |  |  |  |              |  |              |      jsr 172a4 <KPrintF>
    55dc:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    55de:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    55e0:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5f92 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    55e4:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    55e8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    55ec:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    55f0:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    55f2:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5608 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    55f4:	|  |  |  |  |  |  |  |              |  |                 |   pea 1896b <PutChar+0xc25>
    55fa:	|  |  |  |  |  |  |  |              |  |                 |   jsr 172a4 <KPrintF>
    5600:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5602:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5604:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5f92 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5608:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    560a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    560e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5610:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5614:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5618:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    561a:	|  |  |  |  |  |  |  |              |  |                     jsr 147c4 <getValueType>
    5620:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5624:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5626:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 562e <continueFunction+0x546>
    5628:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    562a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5f92 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    562e:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5632:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5636:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5638:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    563a:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    563c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 565e <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    563e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5642:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5644:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5648:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    564c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5650:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5652:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5654:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1444e <fastArrayGetByIndex>
    565a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    565c:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 567e <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    565e:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5662:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5664:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5668:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    566c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5670:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5672:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5674:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5676:	|  |  |  |  |  |  |  |              |  |              |      jsr 150d8 <stackGetByIndex>
    567c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    567e:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5682:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5684:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5688:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    568a:	|  |  |  |  |  |  |  |              |  |                     jsr 15148 <trimStack>
    5690:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5692:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5696:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56b2 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5698:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    569a:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    569e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56a0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56a2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    56a4:	|  |  |  |  |  |  |  |              |  |                 |   jsr 150b6 <setVariable>
    56aa:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    56ae:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 578c <continueFunction+0x6a4>
						switch (com) {
    56b2:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    56b4:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    56b8:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 56c6 <continueFunction+0x5de>
    56ba:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    56bc:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    56c0:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5710 <continueFunction+0x628>
    56c2:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5758 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    56c6:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    56ca:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    56ce:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    56d2:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    56d4:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 147c4 <getValueType>
    56da:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    56de:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    56e0:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 56e8 <continueFunction+0x600>
    56e2:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    56e4:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5772 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    56e8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    56ea:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    56ec:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    56f0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    56f2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    56f6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    56f8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 150b6 <setVariable>
    56fe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5702:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5704:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5706:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    570a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    570e:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5776 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5710:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5714:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5718:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    571c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    571e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 147c4 <getValueType>
    5724:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5728:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    572a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5730 <continueFunction+0x648>
    572c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    572e:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5772 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5730:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5732:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5734:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5738:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    573a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    573e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5740:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 150b6 <setVariable>
    5746:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    574a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    574c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    574e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5752:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5756:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5776 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5758:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    575a:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    575e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5760:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5764:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14c7e <copyVariable>
    576a:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    576c:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    576e:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 578c <continueFunction+0x6a4>
    5770:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5772:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 5f92 <continueFunction+0xeaa>
				break;
    5776:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 578c <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5778:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18989 <PutChar+0xc43>
    577e:	|  |  |  |  |  |  |  |                 |  |                  jsr 172a4 <KPrintF>
    5784:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5786:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5788:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5f92 <continueFunction+0xeaa>
				break;
    578c:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    578e:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 5f70 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5792:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5796:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    579a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    579c:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    579e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    57a0:	|  |  |  |  |  |  |  |                                   ,-- beq.s 57ae <continueFunction+0x6c6>
    57a2:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    57a4:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    57a6:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 585a <continueFunction+0x772>
    57aa:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 58b8 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    57ae:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57b2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    57b6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    57ba:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    57bc:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 57d2 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    57be:	|  |  |  |  |  |  |  |                             |  |  |   pea 1896b <PutChar+0xc25>
    57c4:	|  |  |  |  |  |  |  |                             |  |  |   jsr 172a4 <KPrintF>
    57ca:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    57cc:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    57ce:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f92 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    57d2:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    57d4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    57d8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    57da:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    57de:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    57e2:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    57e4:	|  |  |  |  |  |  |  |                             |  |      jsr 147c4 <getValueType>
    57ea:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    57ee:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    57f0:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 57f8 <continueFunction+0x710>
    57f2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    57f4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f92 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    57f8:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57fc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5800:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5804:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5806:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    580a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    580c:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5810:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5814:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5818:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    581a:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    581c:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    581e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5820:	|  |  |  |  |  |  |  |                             |  |      jsr 72de <stackSetByIndex>
    5826:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    582a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    582c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5834 <continueFunction+0x74c>
						return FALSE;
    582e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5830:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f92 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5834:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5836:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    583a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    583c:	|  |  |  |  |  |  |  |                             |  |      jsr 15148 <trimStack>
    5842:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5844:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5846:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    584a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    584c:	|  |  |  |  |  |  |  |                             |  |      jsr 15148 <trimStack>
    5852:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5854:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5856:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 5f70 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    585a:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    585c:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5860:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5862:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5866:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    586a:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    586c:	|  |  |  |  |  |  |  |                             |         jsr 147c4 <getValueType>
    5872:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5876:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5878:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5880 <continueFunction+0x798>
    587a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    587c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5f92 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5880:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5884:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5886:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    588a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    588e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5892:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5894:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5896:	|  |  |  |  |  |  |  |                             |         jsr 1444e <fastArrayGetByIndex>
    589c:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    589e:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    58a2:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 58b2 <continueFunction+0x7ca>
    58a4:	|  |  |  |  |  |  |  |                             |     |   pea 189ad <PutChar+0xc67>
    58aa:	|  |  |  |  |  |  |  |                             |     |   jsr 172a4 <KPrintF>
    58b0:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    58b2:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    58b4:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5f92 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    58b8:	|  |  |  |  |  |  |  |                             '-------> pea 18989 <PutChar+0xc43>
    58be:	|  |  |  |  |  |  |  |                                       jsr 172a4 <KPrintF>
    58c4:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    58c6:	|  |  |  |  |  |  |  |                                       clr.w d0
    58c8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    58cc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    58d0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    58d4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    58d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    58da:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    58dc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58e2:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    58e6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    58e8:	|  |  |  |  |  |  |  |                                       jsr 147c4 <getValueType>
    58ee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    58f2:	|  |  |  |  |  |  |  |                                       tst.w d0
    58f4:	|  |  |  |  |  |  |  |                                   ,-- bne.s 58fc <continueFunction+0x814>
    58f6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    58f8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f92 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    58fc:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5900:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5902:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5906:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5908:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    590c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    590e:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    5914:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5918:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    591c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    591e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5920:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5924:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5928:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    592c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    592e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5930:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5932:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5936:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5938:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    593e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5942:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5946:	|  |  |  |  |  |  |  |                                       move.l 1caa0 <globalVars>,d1
    594c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5950:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5952:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5954:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5956:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    595a:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    595e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5960:	|  |  |  |  |  |  |  |                                       jsr 147c4 <getValueType>
    5966:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    596a:	|  |  |  |  |  |  |  |                                       tst.w d0
    596c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5974 <continueFunction+0x88c>
    596e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5970:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f92 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5974:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5978:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    597a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    597e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5980:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5984:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5986:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    598c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5990:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5994:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5996:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5998:	|  |  |  |  |  |  |  |                                       movea.l 1caa0 <globalVars>,a0
    599e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59a2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59a4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    59a6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59a8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59ac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59ae:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    59b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    59b8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    59bc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    59c0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    59c4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59c8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59ca:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    59cc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59ce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59d2:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    59d6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    59d8:	|  |  |  |  |  |  |  |                                       jsr 147c4 <getValueType>
    59de:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    59e2:	|  |  |  |  |  |  |  |                                       tst.w d0
    59e4:	|  |  |  |  |  |  |  |                                   ,-- bne.s 59ec <continueFunction+0x904>
    59e6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    59e8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f92 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    59ec:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    59f0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    59f2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    59f6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59f8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59fe:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    5a04:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5a08:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5a0c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a0e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5a10:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a14:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5a18:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a1c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a1e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a20:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a22:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a26:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a28:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    5a2e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a32:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5a36:	|  |  |  |  |  |  |  |                                       move.l 1caa0 <globalVars>,d1
    5a3c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a40:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a42:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a44:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a46:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a4a:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5a4e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a50:	|  |  |  |  |  |  |  |                                       jsr 147c4 <getValueType>
    5a56:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5a5a:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a5c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a64 <continueFunction+0x97c>
    5a5e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a60:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f92 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a64:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5a68:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a6a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a6e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a70:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a74:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a76:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    5a7c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5a80:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5a84:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a86:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5a88:	|  |  |  |  |  |  |  |                                       movea.l 1caa0 <globalVars>,a0
    5a8e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a92:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a94:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a96:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a98:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a9c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a9e:	|  |  |  |  |  |  |  |                                       jsr 150b6 <setVariable>
    5aa4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5aa8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5aac:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ab0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ab4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ab8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5aba:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5abc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5abe:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ac2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ac4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ac6:	|  |  |  |  |  |  |  |                                       jsr 14c7e <copyVariable>
    5acc:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5ace:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ad0:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5f5a <continueFunction+0xe72>
    5ad4:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5ad6:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5ada:	|  |  |  |  |  |  |  |  |                                    move.l 1caa0 <globalVars>,d1
    5ae0:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5ae4:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5ae6:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5ae8:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5aea:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5aee:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5af0:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5af2:	|  |  |  |  |  |  |  |  |                                    jsr 14c7e <copyVariable>
    5af8:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5afa:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5afc:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5f5e <continueFunction+0xe76>
    5b00:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5b02:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5b06:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5b08:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5b0c:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1caa0 <globalVars>,a0
    5b12:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5b16:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5b18:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5b1a:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5b1c:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5b1e:	|  |  |  |  |  |  |  |  |  |                                 jsr 14c7e <copyVariable>
    5b24:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5b26:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5b28:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 5f62 <continueFunction+0xe7a>
    5b2c:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5b2e:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5b32:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5b34:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5b38:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5b3a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5b3e:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5b40:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5b42:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14000 <addVarToStack>
    5b48:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5b4a:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5b4c:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5f66 <continueFunction+0xe7e>
    5b50:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5b52:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5b56:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5b58:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5b5c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5b5e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5b62:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5b64:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5b66:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14086 <addVarToStackQuick>
    5b6c:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5b6e:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5b70:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5f6a <continueFunction+0xe82>
    5b74:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5b76:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5f92 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5b7a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5b7c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5b80:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5b82:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d04 <getBoolean>
    5b88:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5b8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5b8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5b90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5b92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5b94:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5b96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5b9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5b9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5ba0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5ba2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150b6 <setVariable>
    5ba8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5bac:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5bb6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d04 <getBoolean>
    5bbe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5bc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5bc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 5f6e <continueFunction+0xe86>
				advanceNow = FALSE;
    5bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5bca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5bce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5bd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5f6e <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5bdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5be0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5be6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f70 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5bec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5bf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5bfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 147c4 <getValueType>
    5c02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5c06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5c10 <continueFunction+0xb28>
    5c0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5c0c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5f92 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5c10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5c14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5c16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5c18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5c20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 150b6 <setVariable>
    5c2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5c30:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f70 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5c34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5f26 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5c46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5cc2 <continueFunction+0xbda>
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5c4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5d0c <continueFunction+0xc24>
    5c52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5c66 <continueFunction+0xb7e>
    5c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5c5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5c94 <continueFunction+0xbac>
    5c62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5d0c <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5c68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5c76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5c78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 140fa <addVariablesInSecond>
    5c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5c80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15148 <trimStack>
    5c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5f3a <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5c96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 141b8 <compareVariablesInSecond>
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5cae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5cb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15148 <trimStack>
    5cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5f3a <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 141b8 <compareVariablesInSecond>
    5cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15148 <trimStack>
    5cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5d00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5f3a <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147c4 <getValueType>
    5d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d34 <continueFunction+0xc4c>
    5d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d30:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5f92 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5d44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147c4 <getValueType>
    5d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d5a <continueFunction+0xc72>
    5d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d56:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5f92 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15148 <trimStack>
    5d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5f38 <continueFunction+0xe50>
    5d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #23944,a0
    5d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5d88 <continueFunction+0xca0>,pc,d0.w)
    5d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c30 <__mulsi3>
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f3a <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5df4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f3a <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17cdc <__modsi3>
    5e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f3a <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17cae <__divsi3>
    5e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f3a <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f3a <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f3a <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f3a <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150b6 <setVariable>
    5f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f3a <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 189ce <PutChar+0xc88>
    5f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 172a4 <KPrintF>
    5f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5f36:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5f92 <continueFunction+0xeaa>
						break;
    5f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5f3a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 5f70 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5f3c:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 189e6 <PutChar+0xca0>
    5f42:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 172a4 <KPrintF>
    5f48:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5f4a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5f4c:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5f92 <continueFunction+0xeaa>
			break;
    5f4e:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    5f50:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f52:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5f54:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f56:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5f58:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f5a:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5f5c:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f5e:	|  |  |     |              '--|--|--|--|-------------------> nop
    5f60:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f62:	|  |  |     |                 '--|--|--|-------------------> nop
    5f64:	|  |  |     +--------------------|--|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f66:	|  |  |     |                    '--|--|-------------------> nop
    5f68:	|  |  |     +-----------------------|--|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f6a:	|  |  |     |                       '--|-------------------> nop
    5f6c:	|  |  |     +--------------------------|-------------------- bra.s 5f70 <continueFunction+0xe88>
			break;
    5f6e:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    5f70:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    5f74:	+--|--|----------------------------------------------------- beq.s 5f88 <continueFunction+0xea0>
    5f76:	|  |  |                                                      movea.l 80(sp),a0
    5f7a:	|  |  |                                                      move.l 36(a0),d0
    5f7e:	|  |  |                                                      addq.l #1,d0
    5f80:	|  |  |                                                      movea.l 80(sp),a0
    5f84:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5f88:	'--|--|----------------------------------------------------> tst.w 74(sp)
    5f8c:	   |  '----------------------------------------------------- bne.w 5110 <continueFunction+0x28>

	}
	return TRUE;
    5f90:	   |                                                         moveq #1,d0
}
    5f92:	   '-------------------------------------------------------> lea 76(sp),sp
    5f96:	                                                             rts

00005f98 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    5f98:	    move.l 4(sp),d0
    5f9c:	    move.l d0,-(sp)
    5f9e:	    pea 18a12 <PutChar+0xccc>
    5fa4:	    jsr 172a4 <KPrintF>
    5faa:	    addq.l #8,sp

	pauseFunction (fun);
    5fac:	    move.l 4(sp),-(sp)
    5fb0:	    jsr 702e <pauseFunction>
    5fb6:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    5fb8:	    movea.l 1c462 <currentEvents>,a0
    5fbe:	    move.l 20(a0),d0
    5fc2:	    cmp.l 4(sp),d0
    5fc6:	,-- beq.s 5fd4 <finishFunction+0x3c>
		unloadFunction (fun);
    5fc8:	|   move.l 4(sp),-(sp)
    5fcc:	|   jsr 74de <unloadFunction>
    5fd2:	|   addq.l #4,sp
	}	
}
    5fd4:	'-> nop
    5fd6:	    rts

00005fd8 <freezeSubs>:

void freezeSubs () {
    5fd8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5fda:	          move.l 1ca8a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5fe0:	   ,----- bra.s 5ffe <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    5fe2:	,--|----> movea.l (sp),a0
    5fe4:	|  |      move.w 52(a0),d0
    5fe8:	|  |  ,-- bne.s 5ff8 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5fea:	|  |  |   movea.l (sp),a0
    5fec:	|  |  |   move.b 56(a0),d0
    5ff0:	|  |  |   addq.b #1,d0
    5ff2:	|  |  |   movea.l (sp),a0
    5ff4:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5ff8:	|  |  '-> movea.l (sp),a0
    5ffa:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5ffe:	|  '----> tst.l (sp)
    6000:	'-------- bne.s 5fe2 <freezeSubs+0xa>
	}
}
    6002:	          nop
    6004:	          nop
    6006:	          addq.l #4,sp
    6008:	          rts

0000600a <handleInput>:

BOOL handleInput () {
    600a:	             lea -16(sp),sp
    600e:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6010:	             move.l 1cc02 <overRegion>,d0
    6016:	         ,-- bne.s 601e <handleInput+0x14>
    6018:	         |   jsr 15a00 <getOverRegion>

	if (input.justMoved) {
    601e:	         '-> move.w 1caa8 <input+0x4>,d0
    6024:	         ,-- beq.s 6062 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6026:	         |   movea.l 1c462 <currentEvents>,a0
    602c:	         |   move.l 16(a0),d0
    6030:	         +-- beq.s 6062 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6032:	         |   move.l 1cac2 <noStack>,d1
    6038:	         |   movea.l 1c462 <currentEvents>,a0
    603e:	         |   move.l 16(a0),d0
    6042:	         |   pea 1 <_start+0x1>
    6046:	         |   move.l d1,-(sp)
    6048:	         |   clr.l -(sp)
    604a:	         |   clr.l -(sp)
    604c:	         |   move.l d0,-(sp)
    604e:	         |   jsr 7432 <startNewFunctionNum>
    6054:	         |   lea 20(sp),sp
    6058:	         |   tst.l d0
    605a:	         +-- bne.s 6062 <handleInput+0x58>
    605c:	         |   clr.w d0
    605e:	,--------|-- bra.w 6268 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6062:	|        '-> clr.w 1caa8 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6068:	|            move.l 1caba <lastRegion>,d1
    606e:	|            move.l 1cc02 <overRegion>,d0
    6074:	|            cmp.l d1,d0
    6076:	|  ,-------- beq.w 614e <handleInput+0x144>
    607a:	|  |         movea.l 1c462 <currentEvents>,a0
    6080:	|  |         move.l 20(a0),d0
    6084:	|  +-------- beq.w 614e <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6088:	|  |         moveq #12,d0
    608a:	|  |         move.l d0,16(sp)
    608e:	|  |         clr.l 12(sp)
    6092:	|  |         move.l 1caf2 <SysBase>,d0
    6098:	|  |         movea.l d0,a6
    609a:	|  |         move.l 16(sp),d0
    609e:	|  |         move.l 12(sp),d1
    60a2:	|  |         jsr -684(a6)
    60a6:	|  |         move.l d0,8(sp)
    60aa:	|  |         move.l 8(sp),d0
    60ae:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    60b2:	|  |         move.l 4(sp),d0
    60b6:	|  |     ,-- bne.s 60cc <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    60b8:	|  |     |   pea 18a2d <PutChar+0xce7>
    60be:	|  |     |   jsr 172a4 <KPrintF>
    60c4:	|  |     |   addq.l #4,sp
			return FALSE;
    60c6:	|  |     |   clr.w d0
    60c8:	+--|-----|-- bra.w 6268 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    60cc:	|  |     '-> movea.l 4(sp),a0
    60d0:	|  |         clr.l (a0)
		if (overRegion) {
    60d2:	|  |         move.l 1cc02 <overRegion>,d0
    60d8:	|  |  ,----- beq.s 6100 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    60da:	|  |  |      movea.l 1cc02 <overRegion>,a0
    60e0:	|  |  |      movea.l 28(a0),a0
    60e4:	|  |  |      move.l 4(a0),d1
    60e8:	|  |  |      move.l 4(sp),d0
    60ec:	|  |  |      move.l d1,-(sp)
    60ee:	|  |  |      pea 7 <_start+0x7>
    60f2:	|  |  |      move.l d0,-(sp)
    60f4:	|  |  |      jsr 150b6 <setVariable>
    60fa:	|  |  |      lea 12(sp),sp
    60fe:	|  |  |  ,-- bra.s 6116 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6100:	|  |  '--|-> move.l 4(sp),d0
    6104:	|  |     |   clr.l -(sp)
    6106:	|  |     |   pea 1 <_start+0x1>
    610a:	|  |     |   move.l d0,-(sp)
    610c:	|  |     |   jsr 150b6 <setVariable>
    6112:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    6116:	|  |     '-> movea.l 4(sp),a0
    611a:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    611e:	|  |         movea.l 1c462 <currentEvents>,a0
    6124:	|  |         move.l 20(a0),d0
    6128:	|  |         pea 1 <_start+0x1>
    612c:	|  |         lea 8(sp),a0
    6130:	|  |         move.l a0,-(sp)
    6132:	|  |         clr.l -(sp)
    6134:	|  |         pea 1 <_start+0x1>
    6138:	|  |         move.l d0,-(sp)
    613a:	|  |         jsr 7322 <startNewFunctionLoaded>
    6140:	|  |         lea 20(sp),sp
    6144:	|  |         tst.l d0
    6146:	|  +-------- bne.s 614e <handleInput+0x144>
    6148:	|  |         clr.w d0
    614a:	+--|-------- bra.w 6268 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    614e:	|  '-------> move.w 1caaa <input+0x6>,d0
    6154:	|        ,-- beq.s 6192 <handleInput+0x188>
    6156:	|        |   movea.l 1c462 <currentEvents>,a0
    615c:	|        |   move.l 4(a0),d0
    6160:	|        +-- beq.s 6192 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6162:	|        |   move.l 1cac2 <noStack>,d1
    6168:	|        |   movea.l 1c462 <currentEvents>,a0
    616e:	|        |   move.l 4(a0),d0
    6172:	|        |   pea 1 <_start+0x1>
    6176:	|        |   move.l d1,-(sp)
    6178:	|        |   clr.l -(sp)
    617a:	|        |   clr.l -(sp)
    617c:	|        |   move.l d0,-(sp)
    617e:	|        |   jsr 7432 <startNewFunctionNum>
    6184:	|        |   lea 20(sp),sp
    6188:	|        |   tst.l d0
    618a:	|        +-- bne.s 6192 <handleInput+0x188>
    618c:	|        |   clr.w d0
    618e:	+--------|-- bra.w 6268 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6192:	|        '-> move.w 1caac <input+0x8>,d0
    6198:	|        ,-- beq.s 61d6 <handleInput+0x1cc>
    619a:	|        |   movea.l 1c462 <currentEvents>,a0
    61a0:	|        |   move.l 12(a0),d0
    61a4:	|        +-- beq.s 61d6 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61a6:	|        |   move.l 1cac2 <noStack>,d1
    61ac:	|        |   movea.l 1c462 <currentEvents>,a0
    61b2:	|        |   move.l 12(a0),d0
    61b6:	|        |   pea 1 <_start+0x1>
    61ba:	|        |   move.l d1,-(sp)
    61bc:	|        |   clr.l -(sp)
    61be:	|        |   clr.l -(sp)
    61c0:	|        |   move.l d0,-(sp)
    61c2:	|        |   jsr 7432 <startNewFunctionNum>
    61c8:	|        |   lea 20(sp),sp
    61cc:	|        |   tst.l d0
    61ce:	|        +-- bne.s 61d6 <handleInput+0x1cc>
    61d0:	|        |   clr.w d0
    61d2:	+--------|-- bra.w 6268 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    61d6:	|        '-> move.w 1caa4 <input>,d0
    61dc:	|        ,-- beq.s 6214 <handleInput+0x20a>
    61de:	|        |   movea.l 1c462 <currentEvents>,a0
    61e4:	|        |   move.l (a0),d0
    61e6:	|        +-- beq.s 6214 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61e8:	|        |   move.l 1cac2 <noStack>,d1
    61ee:	|        |   movea.l 1c462 <currentEvents>,a0
    61f4:	|        |   move.l (a0),d0
    61f6:	|        |   pea 1 <_start+0x1>
    61fa:	|        |   move.l d1,-(sp)
    61fc:	|        |   clr.l -(sp)
    61fe:	|        |   clr.l -(sp)
    6200:	|        |   move.l d0,-(sp)
    6202:	|        |   jsr 7432 <startNewFunctionNum>
    6208:	|        |   lea 20(sp),sp
    620c:	|        |   tst.l d0
    620e:	|        +-- bne.s 6214 <handleInput+0x20a>
    6210:	|        |   clr.w d0
    6212:	+--------|-- bra.s 6268 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6214:	|        '-> move.w 1caa6 <input+0x2>,d0
    621a:	|        ,-- beq.s 6256 <handleInput+0x24c>
    621c:	|        |   movea.l 1c462 <currentEvents>,a0
    6222:	|        |   move.l 8(a0),d0
    6226:	|        +-- beq.s 6256 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6228:	|        |   move.l 1cac2 <noStack>,d1
    622e:	|        |   movea.l 1c462 <currentEvents>,a0
    6234:	|        |   move.l 8(a0),d0
    6238:	|        |   pea 1 <_start+0x1>
    623c:	|        |   move.l d1,-(sp)
    623e:	|        |   clr.l -(sp)
    6240:	|        |   clr.l -(sp)
    6242:	|        |   move.l d0,-(sp)
    6244:	|        |   jsr 7432 <startNewFunctionNum>
    624a:	|        |   lea 20(sp),sp
    624e:	|        |   tst.l d0
    6250:	|        +-- bne.s 6256 <handleInput+0x24c>
    6252:	|        |   clr.w d0
    6254:	+--------|-- bra.s 6268 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6256:	|        '-> move.l 1cc02 <overRegion>,d0
    625c:	|            move.l d0,1caba <lastRegion>
	return runSludge ();
    6262:	|            jsr 70f0 <runSludge>
}
    6268:	'----------> movea.l (sp)+,a6
    626a:	             lea 16(sp),sp
    626e:	             rts

00006270 <initSludge>:

BOOL initSludge (char * filename) {
    6270:	             lea -292(sp),sp
    6274:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6278:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    627c:	             jsr acae <makeNullAnim>
    6282:	             move.l d0,1c9ec <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6288:	             pea 1ca9c <gameVersion>
    628e:	             pea 18a63 <PutChar+0xd1d>
    6294:	             pea 45 <_start+0x45>
    6298:	             pea 47 <_start+0x47>
    629c:	             move.l 332(sp),-(sp)
    62a0:	             jsr 6cbe <openAndVerify>
    62a6:	             lea 20(sp),sp
    62aa:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    62ae:	         ,-- bne.s 62b6 <initSludge+0x46>
    62b0:	         |   clr.w d0
    62b2:	,--------|-- bra.w 69de <initSludge+0x76e>
	if (FGetC (fp)) {
    62b6:	|        '-> move.l 288(sp),284(sp)
    62bc:	|            move.l 1cafa <DOSBase>,d0
    62c2:	|            movea.l d0,a6
    62c4:	|            move.l 284(sp),d1
    62c8:	|            jsr -306(a6)
    62cc:	|            move.l d0,280(sp)
    62d0:	|            move.l 280(sp),d0
    62d4:	|  ,-------- beq.w 647e <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    62d8:	|  |         move.l 288(sp),-(sp)
    62dc:	|  |         jsr 6bc <get2bytes>
    62e2:	|  |         addq.l #4,sp
    62e4:	|  |         move.l d0,1cac6 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    62ea:	|  |         move.l 1cac6 <numBIFNames>,d0
    62f0:	|  |         move.l d0,276(sp)
    62f4:	|  |         clr.l 272(sp)
    62f8:	|  |         move.l 1caf2 <SysBase>,d0
    62fe:	|  |         movea.l d0,a6
    6300:	|  |         move.l 276(sp),d0
    6304:	|  |         move.l 272(sp),d1
    6308:	|  |         jsr -684(a6)
    630c:	|  |         move.l d0,268(sp)
    6310:	|  |         move.l 268(sp),d0
    6314:	|  |         move.l d0,1ca82 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    631a:	|  |         move.l 1ca82 <allBIFNames>,d0
    6320:	|  |     ,-- bne.s 6328 <initSludge+0xb8>
    6322:	|  |     |   clr.w d0
    6324:	+--|-----|-- bra.w 69de <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6328:	|  |     '-> clr.l 304(sp)
    632c:	|  |     ,-- bra.s 6352 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    632e:	|  |  ,--|-> move.l 1ca82 <allBIFNames>,d1
    6334:	|  |  |  |   move.l 304(sp),d0
    6338:	|  |  |  |   add.l d0,d0
    633a:	|  |  |  |   add.l d0,d0
    633c:	|  |  |  |   movea.l d1,a2
    633e:	|  |  |  |   adda.l d0,a2
    6340:	|  |  |  |   move.l 288(sp),-(sp)
    6344:	|  |  |  |   jsr b02 <readString>
    634a:	|  |  |  |   addq.l #4,sp
    634c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    634e:	|  |  |  |   addq.l #1,304(sp)
    6352:	|  |  |  '-> move.l 1cac6 <numBIFNames>,d0
    6358:	|  |  |      cmp.l 304(sp),d0
    635c:	|  |  '----- bgt.s 632e <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    635e:	|  |         move.l 288(sp),-(sp)
    6362:	|  |         jsr 6bc <get2bytes>
    6368:	|  |         addq.l #4,sp
    636a:	|  |         move.l d0,1cad2 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6370:	|  |         move.l 1cad2 <numUserFunc>,d0
    6376:	|  |         move.l d0,264(sp)
    637a:	|  |         clr.l 260(sp)
    637e:	|  |         move.l 1caf2 <SysBase>,d0
    6384:	|  |         movea.l d0,a6
    6386:	|  |         move.l 264(sp),d0
    638a:	|  |         move.l 260(sp),d1
    638e:	|  |         jsr -684(a6)
    6392:	|  |         move.l d0,256(sp)
    6396:	|  |         move.l 256(sp),d0
    639a:	|  |         move.l d0,1ca8e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    63a0:	|  |         move.l 1ca8e <allUserFunc>,d0
    63a6:	|  |     ,-- bne.s 63ae <initSludge+0x13e>
    63a8:	|  |     |   clr.w d0
    63aa:	+--|-----|-- bra.w 69de <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    63ae:	|  |     '-> clr.l 300(sp)
    63b2:	|  |     ,-- bra.s 63d8 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    63b4:	|  |  ,--|-> move.l 1ca8e <allUserFunc>,d1
    63ba:	|  |  |  |   move.l 300(sp),d0
    63be:	|  |  |  |   add.l d0,d0
    63c0:	|  |  |  |   add.l d0,d0
    63c2:	|  |  |  |   movea.l d1,a2
    63c4:	|  |  |  |   adda.l d0,a2
    63c6:	|  |  |  |   move.l 288(sp),-(sp)
    63ca:	|  |  |  |   jsr b02 <readString>
    63d0:	|  |  |  |   addq.l #4,sp
    63d2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    63d4:	|  |  |  |   addq.l #1,300(sp)
    63d8:	|  |  |  '-> move.l 1cad2 <numUserFunc>,d0
    63de:	|  |  |      cmp.l 300(sp),d0
    63e2:	|  |  '----- bgt.s 63b4 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    63e4:	|  |         move.l 1ca9c <gameVersion>,d0
    63ea:	|  |         cmpi.l #258,d0
    63f0:	|  +-------- ble.w 647e <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    63f4:	|  |         move.l 288(sp),-(sp)
    63f8:	|  |         jsr 6bc <get2bytes>
    63fe:	|  |         addq.l #4,sp
    6400:	|  |         move.l d0,1cace <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6406:	|  |         move.l 1cace <numResourceNames>,d0
    640c:	|  |         add.l d0,d0
    640e:	|  |         add.l d0,d0
    6410:	|  |         move.l d0,252(sp)
    6414:	|  |         clr.l 248(sp)
    6418:	|  |         move.l 1caf2 <SysBase>,d0
    641e:	|  |         movea.l d0,a6
    6420:	|  |         move.l 252(sp),d0
    6424:	|  |         move.l 248(sp),d1
    6428:	|  |         jsr -684(a6)
    642c:	|  |         move.l d0,244(sp)
    6430:	|  |         move.l 244(sp),d0
    6434:	|  |         move.l d0,1ca86 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    643a:	|  |         move.l 1ca86 <allResourceNames>,d0
    6440:	|  |     ,-- bne.s 6448 <initSludge+0x1d8>
    6442:	|  |     |   clr.w d0
    6444:	+--|-----|-- bra.w 69de <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6448:	|  |     '-> clr.l 296(sp)
    644c:	|  |     ,-- bra.s 6472 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    644e:	|  |  ,--|-> move.l 1ca86 <allResourceNames>,d1
    6454:	|  |  |  |   move.l 296(sp),d0
    6458:	|  |  |  |   add.l d0,d0
    645a:	|  |  |  |   add.l d0,d0
    645c:	|  |  |  |   movea.l d1,a2
    645e:	|  |  |  |   adda.l d0,a2
    6460:	|  |  |  |   move.l 288(sp),-(sp)
    6464:	|  |  |  |   jsr b02 <readString>
    646a:	|  |  |  |   addq.l #4,sp
    646c:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    646e:	|  |  |  |   addq.l #1,296(sp)
    6472:	|  |  |  '-> move.l 1cace <numResourceNames>,d0
    6478:	|  |  |      cmp.l 296(sp),d0
    647c:	|  |  '----- bgt.s 644e <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    647e:	|  '-------> move.l #129,1caae <input+0xa>
	input.mouseY = 100;
    6488:	|            moveq #100,d0
    648a:	|            move.l d0,1cab2 <input+0xe>
	winWidth = get2bytes (fp);
    6490:	|            move.l 288(sp),-(sp)
    6494:	|            jsr 6bc <get2bytes>
    649a:	|            addq.l #4,sp
    649c:	|            move.l d0,1ca46 <winWidth>
	winHeight = get2bytes (fp);
    64a2:	|            move.l 288(sp),-(sp)
    64a6:	|            jsr 6bc <get2bytes>
    64ac:	|            addq.l #4,sp
    64ae:	|            move.l d0,1ca4a <winHeight>
	specialSettings = FGetC (fp);
    64b4:	|            move.l 288(sp),240(sp)
    64ba:	|            move.l 1cafa <DOSBase>,d0
    64c0:	|            movea.l d0,a6
    64c2:	|            move.l 240(sp),d1
    64c6:	|            jsr -306(a6)
    64ca:	|            move.l d0,236(sp)
    64ce:	|            move.l 236(sp),d0
    64d2:	|            move.l d0,1cad6 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    64d8:	|            move.l 288(sp),232(sp)
    64de:	|            move.l 1cafa <DOSBase>,d0
    64e4:	|            movea.l d0,a6
    64e6:	|            move.l 232(sp),d1
    64ea:	|            jsr -306(a6)
    64ee:	|            move.l d0,228(sp)
    64f2:	|            move.l 228(sp),d0
    64f6:	|            move.l d0,-(sp)
    64f8:	|            pea 3e8 <encodeFilename+0xea>
    64fc:	|            jsr 17cae <__divsi3>
    6502:	|            addq.l #8,sp
    6504:	|            move.l d0,1c474 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    650a:	|            move.l 288(sp),-(sp)
    650e:	|            jsr b02 <readString>
    6514:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6516:	|            move.l 288(sp),224(sp)
    651c:	|            move.l #117396,220(sp)
    6524:	|            moveq #8,d1
    6526:	|            move.l d1,216(sp)
    652a:	|            moveq #1,d0
    652c:	|            move.l d0,212(sp)
    6530:	|            move.l 1cafa <DOSBase>,d0
    6536:	|            movea.l d0,a6
    6538:	|            move.l 224(sp),d1
    653c:	|            move.l 220(sp),d2
    6540:	|            move.l 216(sp),d3
    6544:	|            move.l 212(sp),d4
    6548:	|            jsr -324(a6)
    654c:	|            move.l d0,208(sp)
    6550:	|            move.l 208(sp),d0
    6554:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6558:	|            moveq #1,d1
    655a:	|            cmp.l 204(sp),d1
    655e:	|        ,-- beq.s 656e <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6560:	|        |   pea 18a9c <PutChar+0xd56>
    6566:	|        |   jsr 172a4 <KPrintF>
    656c:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    656e:	|        '-> move.l 1ca9c <gameVersion>,d0
    6574:	|            cmpi.l #258,d0
    657a:	|        ,-- ble.s 658a <initSludge+0x31a>
    657c:	|        |   move.l 288(sp),-(sp)
    6580:	|        |   jsr b02 <readString>
    6586:	|        |   addq.l #4,sp
    6588:	|     ,--|-- bra.s 659e <initSludge+0x32e>
    658a:	|     |  '-> pea 18aba <PutChar+0xd74>
    6590:	|     |      pea 18aba <PutChar+0xd74>
    6596:	|     |      jsr 13cf0 <joinStrings>
    659c:	|     |      addq.l #8,sp
    659e:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    65a2:	|            move.l 1ca9c <gameVersion>,d0
    65a8:	|            cmpi.l #258,d0
    65ae:	|     ,----- ble.s 65d0 <initSludge+0x360>
    65b0:	|     |      move.l 288(sp),196(sp)
    65b6:	|     |      move.l 1cafa <DOSBase>,d0
    65bc:	|     |      movea.l d0,a6
    65be:	|     |      move.l 196(sp),d1
    65c2:	|     |      jsr -306(a6)
    65c6:	|     |      move.l d0,192(sp)
    65ca:	|     |      move.l 192(sp),d0
    65ce:	|     |  ,-- bra.s 65d2 <initSludge+0x362>
    65d0:	|     '--|-> moveq #0,d0
    65d2:	|        '-> move.l d0,1cbce <gameSettings+0x4>
	makeLanguageTable (fp);
    65d8:	|            move.l 288(sp),-(sp)
    65dc:	|            jsr 136a6 <makeLanguageTable>
    65e2:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    65e4:	|            move.l 1ca9c <gameVersion>,d0
    65ea:	|            cmpi.l #261,d0
    65f0:	|        ,-- ble.s 663e <initSludge+0x3ce>
	{
		FGetC(fp);
    65f2:	|        |   move.l 288(sp),188(sp)
    65f8:	|        |   move.l 1cafa <DOSBase>,d0
    65fe:	|        |   movea.l d0,a6
    6600:	|        |   move.l 188(sp),d1
    6604:	|        |   jsr -306(a6)
    6608:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    660c:	|        |   move.l 288(sp),180(sp)
    6612:	|        |   move.l 1cafa <DOSBase>,d0
    6618:	|        |   movea.l d0,a6
    661a:	|        |   move.l 180(sp),d1
    661e:	|        |   jsr -306(a6)
    6622:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6626:	|        |   move.l 288(sp),-(sp)
    662a:	|        |   jsr 7d8 <getFloat>
    6630:	|        |   addq.l #4,sp
		getFloat (fp);
    6632:	|        |   move.l 288(sp),-(sp)
    6636:	|        |   jsr 7d8 <getFloat>
    663c:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    663e:	|        '-> move.l 288(sp),-(sp)
    6642:	|            jsr b02 <readString>
    6648:	|            addq.l #4,sp
    664a:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    664e:	|            pea 18abb <PutChar+0xd75>
    6654:	|            move.l 176(sp),-(sp)
    6658:	|            jsr 13c70 <strcmp>
    665e:	|            addq.l #8,sp
    6660:	|            tst.l d0
    6662:	|        ,-- beq.s 666a <initSludge+0x3fa>
		return FALSE;
    6664:	|        |   clr.w d0
    6666:	+--------|-- bra.w 69de <initSludge+0x76e>
	}
	FreeVec( checker);
    666a:	|        '-> move.l 172(sp),168(sp)
    6670:	|            move.l 1caf2 <SysBase>,d0
    6676:	|            movea.l d0,a6
    6678:	|            movea.l 168(sp),a1
    667c:	|            jsr -690(a6)
	checker = NULL;
    6680:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6684:	|            move.l 288(sp),164(sp)
    668a:	|            move.l 1cafa <DOSBase>,d0
    6690:	|            movea.l d0,a6
    6692:	|            move.l 164(sp),d1
    6696:	|            jsr -306(a6)
    669a:	|            move.l d0,160(sp)
    669e:	|            move.l 160(sp),d0
    66a2:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    66a6:	|            moveq #0,d0
    66a8:	|            move.b 159(sp),d0
    66ac:	|            moveq #1,d1
    66ae:	|            and.l d1,d0
    66b0:	|        ,-- beq.s 6708 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    66b2:	|        |   move.l 1cafa <DOSBase>,d0
    66b8:	|        |   movea.l d0,a6
    66ba:	|        |   jsr -60(a6)
    66be:	|        |   move.l d0,38(sp)
    66c2:	|        |   move.l 38(sp),d0
    66c6:	|        |   move.l d0,34(sp)
    66ca:	|        |   move.l #101059,30(sp)
    66d2:	|        |   moveq #54,d0
    66d4:	|        |   move.l d0,26(sp)
    66d8:	|        |   move.l 1cafa <DOSBase>,d0
    66de:	|        |   movea.l d0,a6
    66e0:	|        |   move.l 34(sp),d1
    66e4:	|        |   move.l 30(sp),d2
    66e8:	|        |   move.l 26(sp),d3
    66ec:	|        |   jsr -48(a6)
    66f0:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    66f4:	|        |   pea 18afa <PutChar+0xdb4>
    66fa:	|        |   jsr 172a4 <KPrintF>
    6700:	|        |   addq.l #4,sp
		return FALSE;
    6702:	|        |   clr.w d0
    6704:	+--------|-- bra.w 69de <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6708:	|        '-> move.l 288(sp),-(sp)
    670c:	|            jsr 6bc <get2bytes>
    6712:	|            addq.l #4,sp
    6714:	|            move.l d0,1caca <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    671a:	|            move.l 1caca <numGlobals>,d0
    6720:	|            lsl.l #3,d0
    6722:	|            move.l d0,154(sp)
    6726:	|            clr.l 150(sp)
    672a:	|            move.l 1caf2 <SysBase>,d0
    6730:	|            movea.l d0,a6
    6732:	|            move.l 154(sp),d0
    6736:	|            move.l 150(sp),d1
    673a:	|            jsr -684(a6)
    673e:	|            move.l d0,146(sp)
    6742:	|            move.l 146(sp),d0
    6746:	|            move.l d0,1caa0 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    674c:	|            move.l 1caa0 <globalVars>,d0
    6752:	|        ,-- bne.s 6770 <initSludge+0x500>
    6754:	|        |   move.l 1caca <numGlobals>,d0
    675a:	|        +-- ble.s 6770 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    675c:	|        |   pea 18b32 <PutChar+0xdec>
    6762:	|        |   jsr 172a4 <KPrintF>
    6768:	|        |   addq.l #4,sp
		return FALSE;
    676a:	|        |   clr.w d0
    676c:	+--------|-- bra.w 69de <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6770:	|        '-> clr.l 308(sp)
    6774:	|        ,-- bra.s 678c <initSludge+0x51c>
    6776:	|     ,--|-> move.l 1caa0 <globalVars>,d1
    677c:	|     |  |   move.l 308(sp),d0
    6780:	|     |  |   lsl.l #3,d0
    6782:	|     |  |   movea.l d1,a0
    6784:	|     |  |   adda.l d0,a0
    6786:	|     |  |   clr.l (a0)
    6788:	|     |  |   addq.l #1,308(sp)
    678c:	|     |  '-> move.l 1caca <numGlobals>,d0
    6792:	|     |      cmp.l 308(sp),d0
    6796:	|     '----- bgt.s 6776 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6798:	|            move.l 1cbce <gameSettings+0x4>,d0
    679e:	|            clr.l -(sp)
    67a0:	|            move.l d0,-(sp)
    67a2:	|            move.l 296(sp),-(sp)
    67a6:	|            jsr 7920 <setFileIndices>
    67ac:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    67b0:	|            pea 1 <_start+0x1>
    67b4:	|            jsr 75da <getNumberedString>
    67ba:	|            addq.l #4,sp
    67bc:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    67c0:	|            move.l 142(sp),-(sp)
    67c4:	|            jsr 2fe <encodeFilename>
    67ca:	|            addq.l #4,sp
    67cc:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    67d0:	|            move.l 142(sp),134(sp)
    67d6:	|            move.l 1caf2 <SysBase>,d0
    67dc:	|            movea.l d0,a6
    67de:	|            movea.l 134(sp),a1
    67e2:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    67e6:	|            move.l 138(sp),130(sp)
    67ec:	|            move.l 1cafa <DOSBase>,d0
    67f2:	|            movea.l d0,a6
    67f4:	|            move.l 130(sp),d1
    67f8:	|            jsr -120(a6)
    67fc:	|            move.l d0,126(sp)
    6800:	|            move.l 126(sp),d0
    6804:	|            move.l d0,292(sp)
	if(lock == 0) {
    6808:	|        ,-- bne.s 6836 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    680a:	|        |   move.l 138(sp),122(sp)
    6810:	|        |   moveq #-2,d1
    6812:	|        |   move.l d1,118(sp)
    6816:	|        |   move.l 1cafa <DOSBase>,d0
    681c:	|        |   movea.l d0,a6
    681e:	|        |   move.l 122(sp),d1
    6822:	|        |   move.l 118(sp),d2
    6826:	|        |   jsr -84(a6)
    682a:	|        |   move.l d0,114(sp)
    682e:	|        |   move.l 114(sp),d0
    6832:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6836:	|        '-> move.l 292(sp),110(sp)
    683c:	|            move.l 1cafa <DOSBase>,d0
    6842:	|            movea.l d0,a6
    6844:	|            move.l 110(sp),d1
    6848:	|            jsr -126(a6)
    684c:	|            move.l d0,106(sp)
    6850:	|            move.l 106(sp),d0
    6854:	|        ,-- bne.s 68b0 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6856:	|        |   move.l 138(sp),-(sp)
    685a:	|        |   pea 18b65 <PutChar+0xe1f>
    6860:	|        |   jsr 172a4 <KPrintF>
    6866:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6868:	|        |   move.l 1cafa <DOSBase>,d0
    686e:	|        |   movea.l d0,a6
    6870:	|        |   jsr -60(a6)
    6874:	|        |   move.l d0,58(sp)
    6878:	|        |   move.l 58(sp),d0
    687c:	|        |   move.l d0,54(sp)
    6880:	|        |   move.l #101266,50(sp)
    6888:	|        |   moveq #40,d0
    688a:	|        |   move.l d0,46(sp)
    688e:	|        |   move.l 1cafa <DOSBase>,d0
    6894:	|        |   movea.l d0,a6
    6896:	|        |   move.l 54(sp),d1
    689a:	|        |   move.l 50(sp),d2
    689e:	|        |   move.l 46(sp),d3
    68a2:	|        |   jsr -48(a6)
    68a6:	|        |   move.l d0,42(sp)
		return FALSE;
    68aa:	|        |   clr.w d0
    68ac:	+--------|-- bra.w 69de <initSludge+0x76e>
	}

	FreeVec(gameName);
    68b0:	|        '-> move.l 138(sp),102(sp)
    68b6:	|            move.l 1caf2 <SysBase>,d0
    68bc:	|            movea.l d0,a6
    68be:	|            movea.l 102(sp),a1
    68c2:	|            jsr -690(a6)

	readIniFile (filename);
    68c6:	|            move.l 316(sp),-(sp)
    68ca:	|            jsr 137da <readIniFile>
    68d0:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    68d2:	|            jsr 135ac <getLanguageForFileB>
    68d8:	|            move.l d0,1c466 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    68de:	|            move.l 1c466 <languageNum>,d0
    68e4:	|        ,-- bpl.s 68f4 <initSludge+0x684>
    68e6:	|        |   pea 18bbb <PutChar+0xe75>
    68ec:	|        |   jsr 172a4 <KPrintF>
    68f2:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    68f4:	|        '-> move.l 1c466 <languageNum>,d0
    68fa:	|            move.l d0,d1
    68fc:	|            move.l 1cbce <gameSettings+0x4>,d0
    6902:	|            move.l d1,-(sp)
    6904:	|            move.l d0,-(sp)
    6906:	|            clr.l -(sp)
    6908:	|            jsr 7920 <setFileIndices>
    690e:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6912:	|            movea.l 200(sp),a0
    6916:	|            move.b (a0),d0
    6918:	|     ,----- beq.w 69c2 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    691c:	|     |      move.l 200(sp),-(sp)
    6920:	|     |      jsr 2fe <encodeFilename>
    6926:	|     |      addq.l #4,sp
    6928:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    692c:	|     |      move.l 98(sp),94(sp)
    6932:	|     |      move.l 1cafa <DOSBase>,d0
    6938:	|     |      movea.l d0,a6
    693a:	|     |      move.l 94(sp),d1
    693e:	|     |      jsr -120(a6)
    6942:	|     |      move.l d0,90(sp)
    6946:	|     |      move.l 90(sp),d0
    694a:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    694e:	|     |  ,-- bne.s 697c <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6950:	|     |  |   move.l 98(sp),86(sp)
    6956:	|     |  |   moveq #-2,d1
    6958:	|     |  |   move.l d1,82(sp)
    695c:	|     |  |   move.l 1cafa <DOSBase>,d0
    6962:	|     |  |   movea.l d0,a6
    6964:	|     |  |   move.l 86(sp),d1
    6968:	|     |  |   move.l 82(sp),d2
    696c:	|     |  |   jsr -84(a6)
    6970:	|     |  |   move.l d0,78(sp)
    6974:	|     |  |   move.l 78(sp),d0
    6978:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    697c:	|     |  '-> move.l 292(sp),74(sp)
    6982:	|     |      move.l 1cafa <DOSBase>,d0
    6988:	|     |      movea.l d0,a6
    698a:	|     |      move.l 74(sp),d1
    698e:	|     |      jsr -126(a6)
    6992:	|     |      move.l d0,70(sp)
    6996:	|     |      move.l 70(sp),d0
    699a:	|     |  ,-- bne.s 69ac <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    699c:	|     |  |   move.l 1cafa <DOSBase>,d0
    69a2:	|     |  |   movea.l d0,a6
    69a4:	|     |  |   jsr -60(a6)
    69a8:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    69ac:	|     |  '-> move.l 98(sp),62(sp)
    69b2:	|     |      move.l 1caf2 <SysBase>,d0
    69b8:	|     |      movea.l d0,a6
    69ba:	|     |      movea.l 62(sp),a1
    69be:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    69c2:	|     '----> movea.l 1ca4a <winHeight>,a0
    69c8:	|            lea -15(a0),a0
    69cc:	|            move.l a0,d0
    69ce:	|            move.l d0,-(sp)
    69d0:	|            pea a <_start+0xa>
    69d4:	|            jsr 8366 <positionStatus>
    69da:	|            addq.l #8,sp

	return TRUE;
    69dc:	|            moveq #1,d0
}
    69de:	'----------> movem.l (sp)+,d2-d4/a2/a6
    69e2:	             lea 292(sp),sp
    69e6:	             rts

000069e8 <killSpeechTimers>:

void killSpeechTimers () {
    69e8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    69ea:	          move.l 1ca8a <allRunningFunctions>,(sp)

	while (thisFunction) {
    69f0:	   ,----- bra.s 6a1c <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    69f2:	,--|----> movea.l (sp),a0
    69f4:	|  |      move.b 56(a0),d0
    69f8:	|  |  ,-- bne.s 6a16 <killSpeechTimers+0x2e>
    69fa:	|  |  |   movea.l (sp),a0
    69fc:	|  |  |   move.w 50(a0),d0
    6a00:	|  |  +-- beq.s 6a16 <killSpeechTimers+0x2e>
    6a02:	|  |  |   movea.l (sp),a0
    6a04:	|  |  |   move.l 12(a0),d0
    6a08:	|  |  +-- beq.s 6a16 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6a0a:	|  |  |   movea.l (sp),a0
    6a0c:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6a10:	|  |  |   movea.l (sp),a0
    6a12:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6a16:	|  |  '-> movea.l (sp),a0
    6a18:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6a1c:	|  '----> tst.l (sp)
    6a1e:	'-------- bne.s 69f2 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6a20:	          jsr 3ed8 <killAllSpeech>
}
    6a26:	          nop
    6a28:	          addq.l #4,sp
    6a2a:	          rts

00006a2c <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6a2c:	             lea -52(sp),sp
    6a30:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6a32:	             movea.l 60(sp),a0
    6a36:	             move.l (a0),d0
    6a38:	             move.l d0,-(sp)
    6a3a:	             jsr 7860 <openSubSlice>
    6a40:	             addq.l #4,sp
    6a42:	             tst.w d0
    6a44:	         ,-- bne.s 6a4c <loadFunctionCode+0x20>
    6a46:	         |   clr.w d0
    6a48:	,--------|-- bra.w 6c16 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6a4c:	|        '-> move.l 1cada <bigDataFile>,44(sp)
    6a54:	|            move.l 1cafa <DOSBase>,d0
    6a5a:	|            movea.l d0,a6
    6a5c:	|            move.l 44(sp),d1
    6a60:	|            jsr -306(a6)
    6a64:	|            move.l d0,40(sp)
    6a68:	|            move.l 40(sp),d0
    6a6c:	|            move.l d0,d0
    6a6e:	|            movea.l 60(sp),a0
    6a72:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6a76:	|            move.l 1cada <bigDataFile>,d0
    6a7c:	|            move.l d0,-(sp)
    6a7e:	|            jsr 6bc <get2bytes>
    6a84:	|            addq.l #4,sp
    6a86:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6a8a:	|            move.l 1cada <bigDataFile>,d0
    6a90:	|            move.l d0,-(sp)
    6a92:	|            jsr 6bc <get2bytes>
    6a98:	|            addq.l #4,sp
    6a9a:	|            movea.l 60(sp),a0
    6a9e:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6aa2:	|            move.l 1cada <bigDataFile>,d0
    6aa8:	|            move.l d0,-(sp)
    6aaa:	|            jsr 6bc <get2bytes>
    6ab0:	|            addq.l #4,sp
    6ab2:	|            movea.l 60(sp),a0
    6ab6:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6aba:	|            move.l 36(sp),d0
    6abe:	|            lsl.l #3,d0
    6ac0:	|            move.l d0,32(sp)
    6ac4:	|            clr.l 28(sp)
    6ac8:	|            move.l 1caf2 <SysBase>,d0
    6ace:	|            movea.l d0,a6
    6ad0:	|            move.l 32(sp),d0
    6ad4:	|            move.l 28(sp),d1
    6ad8:	|            jsr -684(a6)
    6adc:	|            move.l d0,24(sp)
    6ae0:	|            move.l 24(sp),d0
    6ae4:	|            movea.l 60(sp),a0
    6ae8:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6aec:	|            movea.l 60(sp),a0
    6af0:	|            move.l 4(a0),d0
    6af4:	|        ,-- bne.s 6b0a <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6af6:	|        |   pea 18be6 <PutChar+0xea0>
    6afc:	|        |   jsr 172a4 <KPrintF>
    6b02:	|        |   addq.l #4,sp
		return FALSE;
    6b04:	|        |   clr.w d0
    6b06:	+--------|-- bra.w 6c16 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6b0a:	|        '-> clr.l 52(sp)
    6b0e:	|        ,-- bra.s 6b70 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6b10:	|     ,--|-> move.l 1cada <bigDataFile>,8(sp)
    6b18:	|     |  |   move.l 1cafa <DOSBase>,d0
    6b1e:	|     |  |   movea.l d0,a6
    6b20:	|     |  |   move.l 8(sp),d1
    6b24:	|     |  |   jsr -306(a6)
    6b28:	|     |  |   move.l d0,4(sp)
    6b2c:	|     |  |   move.l 4(sp),d1
    6b30:	|     |  |   movea.l 60(sp),a0
    6b34:	|     |  |   movea.l 4(a0),a0
    6b38:	|     |  |   move.l 52(sp),d0
    6b3c:	|     |  |   lsl.l #3,d0
    6b3e:	|     |  |   adda.l d0,a0
    6b40:	|     |  |   move.l d1,d0
    6b42:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6b44:	|     |  |   move.l 1cada <bigDataFile>,d0
    6b4a:	|     |  |   move.l d0,-(sp)
    6b4c:	|     |  |   jsr 6bc <get2bytes>
    6b52:	|     |  |   addq.l #4,sp
    6b54:	|     |  |   move.l d0,d1
    6b56:	|     |  |   movea.l 60(sp),a0
    6b5a:	|     |  |   movea.l 4(a0),a0
    6b5e:	|     |  |   move.l 52(sp),d0
    6b62:	|     |  |   lsl.l #3,d0
    6b64:	|     |  |   adda.l d0,a0
    6b66:	|     |  |   move.l d1,d0
    6b68:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6b6c:	|     |  |   addq.l #1,52(sp)
    6b70:	|     |  '-> move.l 52(sp),d0
    6b74:	|     |      cmp.l 36(sp),d0
    6b78:	|     '----- bcs.s 6b10 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6b7a:	|            jsr 75d0 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6b80:	|            movea.l 60(sp),a0
    6b84:	|            move.l 8(a0),d0
    6b88:	|  ,-------- ble.w 6c0c <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6b8c:	|  |         movea.l 60(sp),a0
    6b90:	|  |         move.l 8(a0),d0
    6b94:	|  |         lsl.l #3,d0
    6b96:	|  |         move.l d0,20(sp)
    6b9a:	|  |         clr.l 16(sp)
    6b9e:	|  |         move.l 1caf2 <SysBase>,d0
    6ba4:	|  |         movea.l d0,a6
    6ba6:	|  |         move.l 20(sp),d0
    6baa:	|  |         move.l 16(sp),d1
    6bae:	|  |         jsr -684(a6)
    6bb2:	|  |         move.l d0,12(sp)
    6bb6:	|  |         move.l 12(sp),d0
    6bba:	|  |         movea.l 60(sp),a0
    6bbe:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6bc2:	|  |         movea.l 60(sp),a0
    6bc6:	|  |         move.l 20(a0),d0
    6bca:	|  |     ,-- bne.s 6bde <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6bcc:	|  |     |   pea 18be6 <PutChar+0xea0>
    6bd2:	|  |     |   jsr 172a4 <KPrintF>
    6bd8:	|  |     |   addq.l #4,sp
			return FALSE;
    6bda:	|  |     |   clr.w d0
    6bdc:	+--|-----|-- bra.s 6c16 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6bde:	|  |     '-> clr.l 48(sp)
    6be2:	|  |     ,-- bra.s 6bfc <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6be4:	|  |  ,--|-> movea.l 60(sp),a0
    6be8:	|  |  |  |   move.l 20(a0),d1
    6bec:	|  |  |  |   move.l 48(sp),d0
    6bf0:	|  |  |  |   lsl.l #3,d0
    6bf2:	|  |  |  |   movea.l d1,a0
    6bf4:	|  |  |  |   adda.l d0,a0
    6bf6:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6bf8:	|  |  |  |   addq.l #1,48(sp)
    6bfc:	|  |  |  '-> movea.l 60(sp),a0
    6c00:	|  |  |      move.l 8(a0),d0
    6c04:	|  |  |      cmp.l 48(sp),d0
    6c08:	|  |  '----- bgt.s 6be4 <loadFunctionCode+0x1b8>
    6c0a:	|  |     ,-- bra.s 6c14 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6c0c:	|  '-----|-> movea.l 60(sp),a0
    6c10:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6c14:	|        '-> moveq #1,d0
}
    6c16:	'----------> movea.l (sp)+,a6
    6c18:	             lea 52(sp),sp
    6c1c:	             rts

00006c1e <loadHandlers>:

void loadHandlers (BPTR fp) {
    6c1e:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6c20:	movea.l 1c462 <currentEvents>,a2
    6c26:	move.l 8(sp),-(sp)
    6c2a:	jsr 6bc <get2bytes>
    6c30:	addq.l #4,sp
    6c32:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6c34:	movea.l 1c462 <currentEvents>,a2
    6c3a:	move.l 8(sp),-(sp)
    6c3e:	jsr 6bc <get2bytes>
    6c44:	addq.l #4,sp
    6c46:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6c4a:	movea.l 1c462 <currentEvents>,a2
    6c50:	move.l 8(sp),-(sp)
    6c54:	jsr 6bc <get2bytes>
    6c5a:	addq.l #4,sp
    6c5c:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6c60:	movea.l 1c462 <currentEvents>,a2
    6c66:	move.l 8(sp),-(sp)
    6c6a:	jsr 6bc <get2bytes>
    6c70:	addq.l #4,sp
    6c72:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6c76:	movea.l 1c462 <currentEvents>,a2
    6c7c:	move.l 8(sp),-(sp)
    6c80:	jsr 6bc <get2bytes>
    6c86:	addq.l #4,sp
    6c88:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    6c8c:	move.l 8(sp),-(sp)
    6c90:	jsr 718 <get4bytes>
    6c96:	addq.l #4,sp
    6c98:	movea.l 1c462 <currentEvents>,a0
    6c9e:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6ca2:	movea.l 1c462 <currentEvents>,a2
    6ca8:	move.l 8(sp),-(sp)
    6cac:	jsr 6bc <get2bytes>
    6cb2:	addq.l #4,sp
    6cb4:	move.l d0,24(a2)
}
    6cb8:	nop
    6cba:	movea.l (sp)+,a2
    6cbc:	rts

00006cbe <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6cbe:	       lea -312(sp),sp
    6cc2:	       movem.l d2-d3/a6,-(sp)
    6cc6:	       move.l 332(sp),d1
    6cca:	       move.l 336(sp),d0
    6cce:	       move.b d1,d1
    6cd0:	       move.b d1,16(sp)
    6cd4:	       move.b d0,d0
    6cd6:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6cda:	       move.l 328(sp),318(sp)
    6ce0:	       move.l #1005,314(sp)
    6ce8:	       move.l 1cafa <DOSBase>,d0
    6cee:	       movea.l d0,a6
    6cf0:	       move.l 318(sp),d1
    6cf4:	       move.l 314(sp),d2
    6cf8:	       jsr -30(a6)
    6cfc:	       move.l d0,310(sp)
    6d00:	       move.l 310(sp),d0
    6d04:	       move.l d0,306(sp)

	if (! fp) {
    6d08:	   ,-- bne.s 6d64 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6d0a:	   |   move.l 1cafa <DOSBase>,d0
    6d10:	   |   movea.l d0,a6
    6d12:	   |   jsr -60(a6)
    6d16:	   |   move.l d0,154(sp)
    6d1a:	   |   move.l 154(sp),d0
    6d1e:	   |   move.l d0,150(sp)
    6d22:	   |   move.l #101391,146(sp)
    6d2a:	   |   moveq #31,d0
    6d2c:	   |   move.l d0,142(sp)
    6d30:	   |   move.l 1cafa <DOSBase>,d0
    6d36:	   |   movea.l d0,a6
    6d38:	   |   move.l 150(sp),d1
    6d3c:	   |   move.l 146(sp),d2
    6d40:	   |   move.l 142(sp),d3
    6d44:	   |   jsr -48(a6)
    6d48:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6d4c:	   |   move.l 328(sp),-(sp)
    6d50:	   |   pea 18c2f <PutChar+0xee9>
    6d56:	   |   jsr 172a4 <KPrintF>
    6d5c:	   |   addq.l #8,sp
		return NULL;
    6d5e:	   |   moveq #0,d0
    6d60:	,--|-- bra.w 7024 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6d64:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6d68:	|      move.l 306(sp),302(sp)
    6d6e:	|      move.l 1cafa <DOSBase>,d0
    6d74:	|      movea.l d0,a6
    6d76:	|      move.l 302(sp),d1
    6d7a:	|      jsr -306(a6)
    6d7e:	|      move.l d0,298(sp)
    6d82:	|      move.l 298(sp),d0
    6d86:	|      moveq #83,d1
    6d88:	|      cmp.l d0,d1
    6d8a:	|  ,-- beq.s 6d92 <openAndVerify+0xd4>
    6d8c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6d92:	|  '-> move.l 306(sp),294(sp)
    6d98:	|      move.l 1cafa <DOSBase>,d0
    6d9e:	|      movea.l d0,a6
    6da0:	|      move.l 294(sp),d1
    6da4:	|      jsr -306(a6)
    6da8:	|      move.l d0,290(sp)
    6dac:	|      move.l 290(sp),d0
    6db0:	|      moveq #76,d1
    6db2:	|      cmp.l d0,d1
    6db4:	|  ,-- beq.s 6dbc <openAndVerify+0xfe>
    6db6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6dbc:	|  '-> move.l 306(sp),286(sp)
    6dc2:	|      move.l 1cafa <DOSBase>,d0
    6dc8:	|      movea.l d0,a6
    6dca:	|      move.l 286(sp),d1
    6dce:	|      jsr -306(a6)
    6dd2:	|      move.l d0,282(sp)
    6dd6:	|      move.l 282(sp),d0
    6dda:	|      moveq #85,d1
    6ddc:	|      cmp.l d0,d1
    6dde:	|  ,-- beq.s 6de6 <openAndVerify+0x128>
    6de0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6de6:	|  '-> move.l 306(sp),278(sp)
    6dec:	|      move.l 1cafa <DOSBase>,d0
    6df2:	|      movea.l d0,a6
    6df4:	|      move.l 278(sp),d1
    6df8:	|      jsr -306(a6)
    6dfc:	|      move.l d0,274(sp)
    6e00:	|      move.l 274(sp),d0
    6e04:	|      moveq #68,d1
    6e06:	|      cmp.l d0,d1
    6e08:	|  ,-- beq.s 6e10 <openAndVerify+0x152>
    6e0a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6e10:	|  '-> move.l 306(sp),270(sp)
    6e16:	|      move.l 1cafa <DOSBase>,d0
    6e1c:	|      movea.l d0,a6
    6e1e:	|      move.l 270(sp),d1
    6e22:	|      jsr -306(a6)
    6e26:	|      move.l d0,266(sp)
    6e2a:	|      move.l 266(sp),d1
    6e2e:	|      move.b 16(sp),d0
    6e32:	|      ext.w d0
    6e34:	|      movea.w d0,a0
    6e36:	|      cmpa.l d1,a0
    6e38:	|  ,-- beq.s 6e40 <openAndVerify+0x182>
    6e3a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6e40:	|  '-> move.l 306(sp),262(sp)
    6e46:	|      move.l 1cafa <DOSBase>,d0
    6e4c:	|      movea.l d0,a6
    6e4e:	|      move.l 262(sp),d1
    6e52:	|      jsr -306(a6)
    6e56:	|      move.l d0,258(sp)
    6e5a:	|      move.l 258(sp),d1
    6e5e:	|      move.b 14(sp),d0
    6e62:	|      ext.w d0
    6e64:	|      movea.w d0,a0
    6e66:	|      cmpa.l d1,a0
    6e68:	|  ,-- beq.s 6e70 <openAndVerify+0x1b2>
    6e6a:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6e70:	|  '-> tst.w 322(sp)
    6e74:	|  ,-- beq.s 6ecc <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6e76:	|  |   move.l 1cafa <DOSBase>,d0
    6e7c:	|  |   movea.l d0,a6
    6e7e:	|  |   jsr -60(a6)
    6e82:	|  |   move.l d0,174(sp)
    6e86:	|  |   move.l 174(sp),d0
    6e8a:	|  |   move.l d0,170(sp)
    6e8e:	|  |   move.l #101454,166(sp)
    6e96:	|  |   moveq #31,d0
    6e98:	|  |   move.l d0,162(sp)
    6e9c:	|  |   move.l 1cafa <DOSBase>,d0
    6ea2:	|  |   movea.l d0,a6
    6ea4:	|  |   move.l 170(sp),d1
    6ea8:	|  |   move.l 166(sp),d2
    6eac:	|  |   move.l 162(sp),d3
    6eb0:	|  |   jsr -48(a6)
    6eb4:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6eb8:	|  |   pea 18c4e <PutChar+0xf08>
    6ebe:	|  |   jsr 172a4 <KPrintF>
    6ec4:	|  |   addq.l #4,sp
		return NULL;
    6ec6:	|  |   moveq #0,d0
    6ec8:	+--|-- bra.w 7024 <openAndVerify+0x366>
	}
	FGetC (fp);
    6ecc:	|  '-> move.l 306(sp),254(sp)
    6ed2:	|      move.l 1cafa <DOSBase>,d0
    6ed8:	|      movea.l d0,a6
    6eda:	|      move.l 254(sp),d1
    6ede:	|      jsr -306(a6)
    6ee2:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6ee6:	|      nop
    6ee8:	|  ,-> move.l 306(sp),246(sp)
    6eee:	|  |   move.l 1cafa <DOSBase>,d0
    6ef4:	|  |   movea.l d0,a6
    6ef6:	|  |   move.l 246(sp),d1
    6efa:	|  |   jsr -306(a6)
    6efe:	|  |   move.l d0,242(sp)
    6f02:	|  |   move.l 242(sp),d0
    6f06:	|  '-- bne.s 6ee8 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6f08:	|      move.l 306(sp),238(sp)
    6f0e:	|      move.l 1cafa <DOSBase>,d0
    6f14:	|      movea.l d0,a6
    6f16:	|      move.l 238(sp),d1
    6f1a:	|      jsr -306(a6)
    6f1e:	|      move.l d0,234(sp)
    6f22:	|      move.l 234(sp),d0
    6f26:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6f2a:	|      move.l 306(sp),226(sp)
    6f30:	|      move.l 1cafa <DOSBase>,d0
    6f36:	|      movea.l d0,a6
    6f38:	|      move.l 226(sp),d1
    6f3c:	|      jsr -306(a6)
    6f40:	|      move.l d0,222(sp)
    6f44:	|      move.l 222(sp),d0
    6f48:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6f4c:	|      move.l 230(sp),d0
    6f50:	|      lsl.l #8,d0
    6f52:	|      add.l 218(sp),d0
    6f56:	|      movea.l 344(sp),a0
    6f5a:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6f5c:	|      movea.l 344(sp),a0
    6f60:	|      move.l (a0),d0
    6f62:	|      cmpi.l #514,d0
    6f68:	|  ,-- ble.s 6fbe <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6f6a:	|  |   move.l 1cafa <DOSBase>,d0
    6f70:	|  |   movea.l d0,a6
    6f72:	|  |   jsr -60(a6)
    6f76:	|  |   move.l d0,194(sp)
    6f7a:	|  |   move.l 194(sp),d0
    6f7e:	|  |   move.l d0,190(sp)
    6f82:	|  |   move.l #101481,186(sp)
    6f8a:	|  |   moveq #100,d1
    6f8c:	|  |   move.l d1,182(sp)
    6f90:	|  |   move.l 1cafa <DOSBase>,d0
    6f96:	|  |   movea.l d0,a6
    6f98:	|  |   move.l 190(sp),d1
    6f9c:	|  |   move.l 186(sp),d2
    6fa0:	|  |   move.l 182(sp),d3
    6fa4:	|  |   jsr -48(a6)
    6fa8:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6fac:	|  |   pea 18c69 <PutChar+0xf23>
    6fb2:	|  |   jsr 172a4 <KPrintF>
    6fb8:	|  |   addq.l #4,sp
		return NULL;
    6fba:	|  |   moveq #0,d0
    6fbc:	+--|-- bra.s 7024 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6fbe:	|  '-> movea.l 344(sp),a0
    6fc2:	|      move.l (a0),d0
    6fc4:	|      cmpi.l #257,d0
    6fca:	|  ,-- bgt.s 7020 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6fcc:	|  |   move.l 1cafa <DOSBase>,d0
    6fd2:	|  |   movea.l d0,a6
    6fd4:	|  |   jsr -60(a6)
    6fd8:	|  |   move.l d0,214(sp)
    6fdc:	|  |   move.l 214(sp),d0
    6fe0:	|  |   move.l d0,210(sp)
    6fe4:	|  |   move.l #101550,206(sp)
    6fec:	|  |   moveq #100,d0
    6fee:	|  |   move.l d0,202(sp)
    6ff2:	|  |   move.l 1cafa <DOSBase>,d0
    6ff8:	|  |   movea.l d0,a6
    6ffa:	|  |   move.l 210(sp),d1
    6ffe:	|  |   move.l 206(sp),d2
    7002:	|  |   move.l 202(sp),d3
    7006:	|  |   jsr -48(a6)
    700a:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    700e:	|  |   pea 18cae <PutChar+0xf68>
    7014:	|  |   jsr 172a4 <KPrintF>
    701a:	|  |   addq.l #4,sp
		return NULL;
    701c:	|  |   moveq #0,d0
    701e:	+--|-- bra.s 7024 <openAndVerify+0x366>
	}
	return fp;
    7020:	|  '-> move.l 306(sp),d0
}
    7024:	'----> movem.l (sp)+,d2-d3/a6
    7028:	       lea 312(sp),sp
    702c:	       rts

0000702e <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    702e:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7030:	          move.l #117386,(sp)
	while (* huntAndDestroy) {
    7036:	   ,----- bra.s 7062 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    7038:	,--|----> movea.l (sp),a0
    703a:	|  |      move.l (a0),d0
    703c:	|  |      cmp.l 8(sp),d0
    7040:	|  |  ,-- bne.s 7058 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7042:	|  |  |   movea.l (sp),a0
    7044:	|  |  |   movea.l (a0),a0
    7046:	|  |  |   move.l 44(a0),d0
    704a:	|  |  |   movea.l (sp),a0
    704c:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    704e:	|  |  |   movea.l 8(sp),a0
    7052:	|  |  |   clr.l 44(a0)
    7056:	|  +--|-- bra.s 7062 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7058:	|  |  '-> movea.l (sp),a0
    705a:	|  |      move.l (a0),d0
    705c:	|  |      moveq #44,d1
    705e:	|  |      add.l d0,d1
    7060:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    7062:	|  '----> movea.l (sp),a0
    7064:	|         move.l (a0),d0
    7066:	'-------- bne.s 7038 <pauseFunction+0xa>
		}
	}
}
    7068:	          nop
    706a:	          nop
    706c:	          addq.l #4,sp
    706e:	          rts

00007070 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7070:	       lea -16(sp),sp
    7074:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7076:	       moveq #58,d0
    7078:	       move.l d0,16(sp)
    707c:	       clr.l 12(sp)
    7080:	       move.l 1caf2 <SysBase>,d0
    7086:	       movea.l d0,a6
    7088:	       move.l 16(sp),d0
    708c:	       move.l 12(sp),d1
    7090:	       jsr -684(a6)
    7094:	       move.l d0,8(sp)
    7098:	       move.l 8(sp),d0
    709c:	       move.l d0,4(sp)
	if(!newFunc) {
    70a0:	   ,-- bne.s 70b4 <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    70a2:	   |   pea 18cf5 <PutChar+0xfaf>
    70a8:	   |   jsr 172a4 <KPrintF>
    70ae:	   |   addq.l #4,sp
		return 0;
    70b0:	   |   moveq #0,d0
    70b2:	,--|-- bra.s 70ce <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    70b4:	|  '-> move.l 24(sp),d0
    70b8:	|      movea.l 4(sp),a0
    70bc:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    70be:	|      move.l 4(sp),-(sp)
    70c2:	|      jsr 6a2c <loadFunctionCode>
    70c8:	|      addq.l #4,sp

	return newFunc;
    70ca:	|      move.l 4(sp),d0
}
    70ce:	'----> movea.l (sp)+,a6
    70d0:	       lea 16(sp),sp
    70d4:	       rts

000070d6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    70d6:	move.l 1ca8a <allRunningFunctions>,d0
    70dc:	movea.l 4(sp),a0
    70e0:	move.l d0,44(a0)
	allRunningFunctions = fun;
    70e4:	move.l 4(sp),1ca8a <allRunningFunctions>
}
    70ec:	nop
    70ee:	rts

000070f0 <runSludge>:

BOOL runSludge () {
    70f0:	                   lea -12(sp),sp
    70f4:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    70f6:	                   move.l 1ca8a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    70fe:	      ,----------- bra.s 717a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7100:	   ,--|----------> movea.l 12(sp),a0
    7104:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    710a:	   |  |            movea.l 12(sp),a0
    710e:	   |  |            move.b 56(a0),d0
    7112:	   |  |  ,-------- bne.s 7174 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7114:	   |  |  |         movea.l 12(sp),a0
    7118:	   |  |  |         move.l 12(a0),d0
    711c:	   |  |  |  ,----- beq.s 7146 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    711e:	   |  |  |  |      movea.l 12(sp),a0
    7122:	   |  |  |  |      move.l 12(a0),d0
    7126:	   |  |  |  |  ,-- bpl.s 7132 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7128:	   |  |  |  |  |   movea.l 12(sp),a0
    712c:	   |  |  |  |  |   clr.l 12(a0)
    7130:	   |  |  +--|--|-- bra.s 7174 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7132:	   |  |  |  |  '-> movea.l 12(sp),a0
    7136:	   |  |  |  |      move.l 12(a0),d0
    713a:	   |  |  |  |      subq.l #1,d0
				} else if (
    713c:	   |  |  |  |      movea.l 12(sp),a0
    7140:	   |  |  |  |      move.l d0,12(a0)
    7144:	   |  |  +--|----- bra.s 7174 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7146:	   |  |  |  '----> movea.l 12(sp),a0
    714a:	   |  |  |         move.w 50(a0),d0
    714e:	   |  |  |     ,-- beq.s 715e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7150:	   |  |  |     |   movea.l 12(sp),a0
    7154:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7158:	   |  |  |     |   jsr 3ed8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    715e:	   |  |  |     '-> move.l 12(sp),-(sp)
    7162:	   |  |  |         jsr 50e8 <continueFunction>
    7168:	   |  |  |         addq.l #4,sp
    716a:	   |  |  |         tst.w d0
    716c:	   |  |  +-------- bne.s 7174 <runSludge+0x84>
					return FALSE;
    716e:	   |  |  |         clr.w d0
    7170:	,--|--|--|-------- bra.w 7200 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7174:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    717a:	|  |  '----------> tst.l 12(sp)
    717e:	|  '-------------- bne.s 7100 <runSludge+0x10>
	}

	if (loadNow) {
    7180:	|                  move.l 1cabe <loadNow>,d0
    7186:	|        ,-------- beq.s 71fe <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7188:	|        |         movea.l 1cabe <loadNow>,a0
    718e:	|        |         move.b (a0),d0
    7190:	|        |         cmpi.b #58,d0
    7194:	|        |  ,----- bne.s 71c8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7196:	|        |  |      move.l 1cabe <loadNow>,d0
    719c:	|        |  |      addq.l #1,d0
    719e:	|        |  |      move.l d0,-(sp)
    71a0:	|        |  |      jsr c704 <saveGame>
    71a6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    71a8:	|        |  |      movea.l 1cbb8 <saverFunc>,a0
    71ae:	|        |  |      lea 28(a0),a0
    71b2:	|        |  |      pea 1 <_start+0x1>
    71b6:	|        |  |      pea 1 <_start+0x1>
    71ba:	|        |  |      move.l a0,-(sp)
    71bc:	|        |  |      jsr 150b6 <setVariable>
    71c2:	|        |  |      lea 12(sp),sp
    71c6:	|        |  |  ,-- bra.s 71e0 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    71c8:	|        |  '--|-> move.l 1cabe <loadNow>,d0
    71ce:	|        |     |   move.l d0,-(sp)
    71d0:	|        |     |   jsr c24c <loadGame>
    71d6:	|        |     |   addq.l #4,sp
    71d8:	|        |     |   tst.w d0
    71da:	|        |     +-- bne.s 71e0 <runSludge+0xf0>
    71dc:	|        |     |   clr.w d0
    71de:	+--------|-----|-- bra.s 7200 <runSludge+0x110>
		}
		FreeVec(loadNow);
    71e0:	|        |     '-> move.l 1cabe <loadNow>,8(sp)
    71e8:	|        |         move.l 1caf2 <SysBase>,d0
    71ee:	|        |         movea.l d0,a6
    71f0:	|        |         movea.l 8(sp),a1
    71f4:	|        |         jsr -690(a6)
		loadNow = NULL;
    71f8:	|        |         clr.l 1cabe <loadNow>
	}

	return TRUE;
    71fe:	|        '-------> moveq #1,d0
}
    7200:	'----------------> movea.l (sp)+,a6
    7202:	                   lea 12(sp),sp
    7206:	                   rts

00007208 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7208:	movea.l 1c462 <currentEvents>,a0
    720e:	move.l (a0),d0
    7210:	move.l 4(sp),-(sp)
    7214:	move.l d0,-(sp)
    7216:	jsr 8d0 <put2bytes>
    721c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    721e:	movea.l 1c462 <currentEvents>,a0
    7224:	move.l 4(a0),d0
    7228:	move.l 4(sp),-(sp)
    722c:	move.l d0,-(sp)
    722e:	jsr 8d0 <put2bytes>
    7234:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7236:	movea.l 1c462 <currentEvents>,a0
    723c:	move.l 8(a0),d0
    7240:	move.l 4(sp),-(sp)
    7244:	move.l d0,-(sp)
    7246:	jsr 8d0 <put2bytes>
    724c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    724e:	movea.l 1c462 <currentEvents>,a0
    7254:	move.l 12(a0),d0
    7258:	move.l 4(sp),-(sp)
    725c:	move.l d0,-(sp)
    725e:	jsr 8d0 <put2bytes>
    7264:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7266:	movea.l 1c462 <currentEvents>,a0
    726c:	move.l 16(a0),d0
    7270:	move.l 4(sp),-(sp)
    7274:	move.l d0,-(sp)
    7276:	jsr 8d0 <put2bytes>
    727c:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    727e:	movea.l 1c462 <currentEvents>,a0
    7284:	move.l 20(a0),d0
    7288:	move.l 4(sp),-(sp)
    728c:	move.l d0,-(sp)
    728e:	jsr 958 <put4bytes>
    7294:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7296:	movea.l 1c462 <currentEvents>,a0
    729c:	move.l 24(a0),d0
    72a0:	move.l 4(sp),-(sp)
    72a4:	move.l d0,-(sp)
    72a6:	jsr 8d0 <put2bytes>
    72ac:	addq.l #8,sp
}
    72ae:	nop
    72b0:	rts

000072b2 <sludgeDisplay>:

void sludgeDisplay () {					
    72b2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    72b4:	move.l #14675968,(sp)
	displayCursor();
    72ba:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    72c0:	jsr 14ea <CstDrawBackdrop>
	CstRestoreScreen();
    72c6:	jsr 29aa <CstRestoreScreen>
	drawPeople();
    72cc:	jsr 9f86 <drawPeople>
	CstSwapBuffer();
    72d2:	jsr 3590 <CstSwapBuffer>
}
    72d8:	nop
    72da:	addq.l #4,sp
    72dc:	rts

000072de <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    72de:	      ,-- bra.s 72fe <stackSetByIndex+0x20>
		vS = vS->next;
    72e0:	,-----|-> movea.l 4(sp),a0
    72e4:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    72ea:	|     +-- bne.s 72fe <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    72ec:	|     |   pea 18d1e <PutChar+0xfd8>
    72f2:	|     |   jsr 172a4 <KPrintF>
    72f8:	|     |   addq.l #4,sp
			return FALSE;
    72fa:	|     |   clr.w d0
    72fc:	|  ,--|-- bra.s 7320 <stackSetByIndex+0x42>
	while (theIndex--) {
    72fe:	|  |  '-> move.l 8(sp),d0
    7302:	|  |      move.l d0,d1
    7304:	|  |      subq.l #1,d1
    7306:	|  |      move.l d1,8(sp)
    730a:	|  |      tst.l d0
    730c:	'--|----- bne.s 72e0 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    730e:	   |      move.l 4(sp),d0
    7312:	   |      move.l d0,-(sp)
    7314:	   |      move.l 16(sp),-(sp)
    7318:	   |      jsr 14c7e <copyVariable>
    731e:	   |      addq.l #8,sp
}
    7320:	   '----> rts

00007322 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7322:	             subq.l #8,sp
    7324:	             move.l 28(sp),d0
    7328:	             move.w d0,d0
    732a:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    732e:	             movea.l 12(sp),a0
    7332:	             move.l 16(a0),d1
    7336:	             move.l 16(sp),d0
    733a:	             cmp.l d1,d0
    733c:	         ,-- beq.s 7352 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    733e:	         |   pea 18d37 <PutChar+0xff1>
    7344:	         |   jsr 172a4 <KPrintF>
    734a:	         |   addq.l #4,sp
		return NULL; 
    734c:	         |   moveq #0,d0
    734e:	,--------|-- bra.w 742e <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7352:	|        '-> movea.l 12(sp),a0
    7356:	|            move.l 16(a0),d1
    735a:	|            movea.l 12(sp),a0
    735e:	|            move.l 8(a0),d0
    7362:	|            cmp.l d1,d0
    7364:	|  ,-------- bge.s 73ce <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7366:	|  |         pea 18d53 <PutChar+0x100d>
    736c:	|  |         jsr 172a4 <KPrintF>
    7372:	|  |         addq.l #4,sp
		return NULL; 
    7374:	|  |         moveq #0,d0
    7376:	+--|-------- bra.w 742e <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    737a:	|  |  ,----> movea.l 24(sp),a0
    737e:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7382:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7386:	|  |  |      movea.l 24(sp),a0
    738a:	|  |  |      move.l (a0),d0
    738c:	|  |  |  ,-- bne.s 73a2 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    738e:	|  |  |  |   pea 18d7d <PutChar+0x1037>
    7394:	|  |  |  |   jsr 172a4 <KPrintF>
    739a:	|  |  |  |   addq.l #4,sp
			return NULL;
    739c:	|  |  |  |   moveq #0,d0
    739e:	+--|--|--|-- bra.w 742e <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    73a2:	|  |  |  '-> movea.l 12(sp),a0
    73a6:	|  |  |      move.l 20(a0),d1
    73aa:	|  |  |      move.l 16(sp),d0
    73ae:	|  |  |      lsl.l #3,d0
    73b0:	|  |  |      add.l d0,d1
    73b2:	|  |  |      move.l 4(sp),d0
    73b6:	|  |  |      move.l d1,-(sp)
    73b8:	|  |  |      move.l d0,-(sp)
    73ba:	|  |  |      jsr 14c7e <copyVariable>
    73c0:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    73c2:	|  |  |      move.l 24(sp),-(sp)
    73c6:	|  |  |      jsr 15148 <trimStack>
    73cc:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    73ce:	|  '--|----> tst.l 16(sp)
    73d2:	|     '----- bne.s 737a <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    73d4:	|            movea.l 12(sp),a0
    73d8:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    73dc:	|            movea.l 12(sp),a0
    73e0:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    73e4:	|            movea.l 12(sp),a0
    73e8:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    73ee:	|            movea.l 12(sp),a0
    73f2:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    73f8:	|            movea.l 12(sp),a0
    73fc:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7400:	|            movea.l 12(sp),a0
    7404:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7408:	|            movea.l 12(sp),a0
    740c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7410:	|            movea.l 12(sp),a0
    7414:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7418:	|            movea.l 12(sp),a0
    741c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7420:	|            move.l 12(sp),-(sp)
    7424:	|            jsr 70d6 <restartFunction>
    742a:	|            addq.l #4,sp
	return 1;
    742c:	|            moveq #1,d0
}
    742e:	'----------> addq.l #8,sp
    7430:	             rts

00007432 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7432:	       lea -24(sp),sp
    7436:	       move.l a6,-(sp)
    7438:	       move.l 48(sp),d0
    743c:	       move.w d0,d0
    743e:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7442:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    744a:	       moveq #58,d0
    744c:	       move.l d0,20(sp)
    7450:	       clr.l 16(sp)
    7454:	       move.l 1caf2 <SysBase>,d0
    745a:	       movea.l d0,a6
    745c:	       move.l 20(sp),d0
    7460:	       move.l 16(sp),d1
    7464:	       jsr -684(a6)
    7468:	       move.l d0,12(sp)
    746c:	       move.l 12(sp),d0
    7470:	       move.l d0,8(sp)
	if(!newFunc) {
    7474:	   ,-- bne.s 7488 <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    7476:	   |   pea 18cf5 <PutChar+0xfaf>
    747c:	   |   jsr 172a4 <KPrintF>
    7482:	   |   addq.l #4,sp
		return 0;
    7484:	   |   moveq #0,d0
    7486:	,--|-- bra.s 74d6 <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    7488:	|  '-> cmpi.l #145,32(sp)
    7490:	|  ,-- bne.s 74a0 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    7492:	|  |   pea 18dc8 <PutChar+0x1082>
    7498:	|  |   jsr 172a4 <KPrintF>
    749e:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    74a0:	|  '-> move.l 32(sp),d0
    74a4:	|      movea.l 8(sp),a0
    74a8:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    74aa:	|      move.l 8(sp),-(sp)
    74ae:	|      jsr 6a2c <loadFunctionCode>
    74b4:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    74b6:	|      movea.w 6(sp),a0
    74ba:	|      move.l a0,-(sp)
    74bc:	|      move.l 48(sp),-(sp)
    74c0:	|      move.l 48(sp),-(sp)
    74c4:	|      move.l 48(sp),-(sp)
    74c8:	|      move.l 24(sp),-(sp)
    74cc:	|      jsr 7322 <startNewFunctionLoaded>
    74d2:	|      lea 20(sp),sp
}
    74d6:	'----> movea.l (sp)+,a6
    74d8:	       lea 24(sp),sp
    74dc:	       rts

000074de <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    74de:	             lea -12(sp),sp
    74e2:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    74e4:	             movea.l 1c462 <currentEvents>,a0
    74ea:	             move.l 20(a0),d0
    74ee:	             cmp.l 20(sp),d0
    74f2:	,----------- beq.w 7594 <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    74f6:	|            movea.l 20(sp),a0
    74fa:	|            move.l 24(a0),d0
    74fe:	|        ,-- beq.s 7512 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    7500:	|        |   pea 18de6 <PutChar+0x10a0>
    7506:	|        |   jsr 172a4 <KPrintF>
    750c:	|        |   addq.l #4,sp
		return;
    750e:	|  ,-----|-- bra.w 7596 <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    7512:	|  |     '-> movea.l 20(sp),a0
    7516:	|  |         move.l 4(a0),8(sp)
    751c:	|  |         move.l 1caf2 <SysBase>,d0
    7522:	|  |         movea.l d0,a6
    7524:	|  |         movea.l 8(sp),a1
    7528:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    752c:	|  |         clr.l 12(sp)
    7530:	|  |     ,-- bra.s 7550 <unloadFunction+0x72>
    7532:	|  |  ,--|-> movea.l 20(sp),a0
    7536:	|  |  |  |   move.l 20(a0),d1
    753a:	|  |  |  |   move.l 12(sp),d0
    753e:	|  |  |  |   lsl.l #3,d0
    7540:	|  |  |  |   add.l d1,d0
    7542:	|  |  |  |   move.l d0,-(sp)
    7544:	|  |  |  |   jsr 14a12 <unlinkVar>
    754a:	|  |  |  |   addq.l #4,sp
    754c:	|  |  |  |   addq.l #1,12(sp)
    7550:	|  |  |  '-> movea.l 20(sp),a0
    7554:	|  |  |      move.l 8(a0),d0
    7558:	|  |  |      cmp.l 12(sp),d0
    755c:	|  |  '----- bgt.s 7532 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    755e:	|  |         movea.l 20(sp),a0
    7562:	|  |         move.l 8(a0),d0
    7566:	|  |     ,-- ble.s 7582 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7568:	|  |     |   movea.l 20(sp),a0
    756c:	|  |     |   move.l 20(a0),4(sp)
    7572:	|  |     |   move.l 1caf2 <SysBase>,d0
    7578:	|  |     |   movea.l d0,a6
    757a:	|  |     |   movea.l 4(sp),a1
    757e:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7582:	|  |     '-> moveq #28,d0
    7584:	|  |         add.l 20(sp),d0
    7588:	|  |         move.l d0,-(sp)
    758a:	|  |         jsr 14a12 <unlinkVar>
    7590:	|  |         addq.l #4,sp
    7592:	|  +-------- bra.s 7596 <unloadFunction+0xb8>
		return;
    7594:	'--|-------> nop
}
    7596:	   '-------> movea.l (sp)+,a6
    7598:	             lea 12(sp),sp
    759c:	             rts

0000759e <unfreezeSubs>:

void unfreezeSubs () {
    759e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    75a0:	          move.l 1ca8a <allRunningFunctions>,(sp)

	while (thisFunction) {
    75a6:	   ,----- bra.s 75c4 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    75a8:	,--|----> movea.l (sp),a0
    75aa:	|  |      move.b 56(a0),d0
    75ae:	|  |  ,-- beq.s 75be <unfreezeSubs+0x20>
    75b0:	|  |  |   movea.l (sp),a0
    75b2:	|  |  |   move.b 56(a0),d0
    75b6:	|  |  |   subq.b #1,d0
    75b8:	|  |  |   movea.l (sp),a0
    75ba:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    75be:	|  |  '-> movea.l (sp),a0
    75c0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    75c4:	|  '----> tst.l (sp)
    75c6:	'-------- bne.s 75a8 <unfreezeSubs+0xa>
	}
}
    75c8:	          nop
    75ca:	          nop
    75cc:	          addq.l #4,sp
    75ce:	          rts

000075d0 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    75d0:	clr.w 1c46e <sliceBusy>
}
    75d6:	nop
    75d8:	rts

000075da <getNumberedString>:

char * getNumberedString (int value) {
    75da:	       lea -56(sp),sp
    75de:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    75e2:	       move.w 1c46e <sliceBusy>,d0
    75e8:	   ,-- beq.s 7632 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    75ea:	   |   move.l 1cafa <DOSBase>,d0
    75f0:	   |   movea.l d0,a6
    75f2:	   |   jsr -60(a6)
    75f6:	   |   move.l d0,28(sp)
    75fa:	   |   move.l 28(sp),d0
    75fe:	   |   move.l d0,24(sp)
    7602:	   |   move.l #101900,20(sp)
    760a:	   |   moveq #76,d0
    760c:	   |   move.l d0,16(sp)
    7610:	   |   move.l 1cafa <DOSBase>,d0
    7616:	   |   movea.l d0,a6
    7618:	   |   move.l 24(sp),d1
    761c:	   |   move.l 20(sp),d2
    7620:	   |   move.l 16(sp),d3
    7624:	   |   jsr -48(a6)
    7628:	   |   move.l d0,12(sp)
		return NULL;
    762c:	   |   moveq #0,d0
    762e:	,--|-- bra.w 76ce <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7632:	|  '-> move.l 1cada <bigDataFile>,64(sp)
    763a:	|      move.l 72(sp),d0
    763e:	|      add.l d0,d0
    7640:	|      add.l d0,d0
    7642:	|      move.l d0,d1
    7644:	|      move.l 1cae6 <startOfTextIndex>,d0
    764a:	|      add.l d1,d0
    764c:	|      move.l d0,60(sp)
    7650:	|      moveq #-1,d0
    7652:	|      move.l d0,56(sp)
    7656:	|      move.l 1cafa <DOSBase>,d0
    765c:	|      movea.l d0,a6
    765e:	|      move.l 64(sp),d1
    7662:	|      move.l 60(sp),d2
    7666:	|      move.l 56(sp),d3
    766a:	|      jsr -66(a6)
    766e:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7672:	|      move.l 1cada <bigDataFile>,d0
    7678:	|      move.l d0,-(sp)
    767a:	|      jsr 718 <get4bytes>
    7680:	|      addq.l #4,sp
    7682:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7686:	|      move.l 1cada <bigDataFile>,48(sp)
    768e:	|      move.l 72(sp),44(sp)
    7694:	|      moveq #-1,d0
    7696:	|      move.l d0,40(sp)
    769a:	|      move.l 1cafa <DOSBase>,d0
    76a0:	|      movea.l d0,a6
    76a2:	|      move.l 48(sp),d1
    76a6:	|      move.l 44(sp),d2
    76aa:	|      move.l 40(sp),d3
    76ae:	|      jsr -66(a6)
    76b2:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    76b6:	|      move.l 1cada <bigDataFile>,d0
    76bc:	|      move.l d0,-(sp)
    76be:	|      jsr b02 <readString>
    76c4:	|      addq.l #4,sp
    76c6:	|      move.l d0,32(sp)
	
	return s;
    76ca:	|      move.l 32(sp),d0
}
    76ce:	'----> movem.l (sp)+,d2-d3/a6
    76d2:	       lea 56(sp),sp
    76d6:	       rts

000076d8 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    76d8:	       lea -32(sp),sp
    76dc:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    76e0:	       move.w 1c46e <sliceBusy>,d0
    76e6:	   ,-- beq.s 7702 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    76e8:	   |   pea 18e59 <PutChar+0x1113>
    76ee:	   |   pea 18e77 <PutChar+0x1131>
    76f4:	   |   jsr 172a4 <KPrintF>
    76fa:	   |   addq.l #8,sp
		return 0;
    76fc:	   |   moveq #0,d0
    76fe:	,--|-- bra.w 7796 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7702:	|  '-> move.l 1cada <bigDataFile>,40(sp)
    770a:	|      move.l 48(sp),d0
    770e:	|      add.l d0,d0
    7710:	|      add.l d0,d0
    7712:	|      move.l d0,d1
    7714:	|      move.l 1cae2 <startOfDataIndex>,d0
    771a:	|      add.l d1,d0
    771c:	|      move.l d0,36(sp)
    7720:	|      moveq #-1,d0
    7722:	|      move.l d0,32(sp)
    7726:	|      move.l 1cafa <DOSBase>,d0
    772c:	|      movea.l d0,a6
    772e:	|      move.l 40(sp),d1
    7732:	|      move.l 36(sp),d2
    7736:	|      move.l 32(sp),d3
    773a:	|      jsr -66(a6)
    773e:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7742:	|      move.l 1cada <bigDataFile>,24(sp)
    774a:	|      move.l 1cada <bigDataFile>,d0
    7750:	|      move.l d0,-(sp)
    7752:	|      jsr 718 <get4bytes>
    7758:	|      addq.l #4,sp
    775a:	|      move.l d0,20(sp)
    775e:	|      clr.l 16(sp)
    7762:	|      move.l 1cafa <DOSBase>,d0
    7768:	|      movea.l d0,a6
    776a:	|      move.l 24(sp),d1
    776e:	|      move.l 20(sp),d2
    7772:	|      move.l 16(sp),d3
    7776:	|      jsr -66(a6)
    777a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    777e:	|      move.w #1,1c46e <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7786:	|      move.l 1cada <bigDataFile>,d0
    778c:	|      move.l d0,-(sp)
    778e:	|      jsr 718 <get4bytes>
    7794:	|      addq.l #4,sp
}
    7796:	'----> movem.l (sp)+,d2-d3/a6
    779a:	       lea 32(sp),sp
    779e:	       rts

000077a0 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    77a0:	       lea -32(sp),sp
    77a4:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    77a8:	       move.w 1c46e <sliceBusy>,d0
    77ae:	   ,-- beq.s 77ca <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    77b0:	   |   pea 18e59 <PutChar+0x1113>
    77b6:	   |   pea 18e77 <PutChar+0x1131>
    77bc:	   |   jsr 172a4 <KPrintF>
    77c2:	   |   addq.l #8,sp
        return FALSE;
    77c4:	   |   clr.w d0
    77c6:	,--|-- bra.w 7856 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    77ca:	|  '-> move.l 1cada <bigDataFile>,40(sp)
    77d2:	|      move.l 48(sp),d0
    77d6:	|      add.l d0,d0
    77d8:	|      add.l d0,d0
    77da:	|      move.l d0,d1
    77dc:	|      move.l 1caee <startOfObjectIndex>,d0
    77e2:	|      add.l d1,d0
    77e4:	|      move.l d0,36(sp)
    77e8:	|      moveq #-1,d0
    77ea:	|      move.l d0,32(sp)
    77ee:	|      move.l 1cafa <DOSBase>,d0
    77f4:	|      movea.l d0,a6
    77f6:	|      move.l 40(sp),d1
    77fa:	|      move.l 36(sp),d2
    77fe:	|      move.l 32(sp),d3
    7802:	|      jsr -66(a6)
    7806:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    780a:	|      move.l 1cada <bigDataFile>,24(sp)
    7812:	|      move.l 1cada <bigDataFile>,d0
    7818:	|      move.l d0,-(sp)
    781a:	|      jsr 718 <get4bytes>
    7820:	|      addq.l #4,sp
    7822:	|      move.l d0,20(sp)
    7826:	|      moveq #-1,d0
    7828:	|      move.l d0,16(sp)
    782c:	|      move.l 1cafa <DOSBase>,d0
    7832:	|      movea.l d0,a6
    7834:	|      move.l 24(sp),d1
    7838:	|      move.l 20(sp),d2
    783c:	|      move.l 16(sp),d3
    7840:	|      jsr -66(a6)
    7844:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7848:	|      move.w #1,1c46e <sliceBusy>
    7850:	|      move.w 1c46e <sliceBusy>,d0
}
    7856:	'----> movem.l (sp)+,d2-d3/a6
    785a:	       lea 32(sp),sp
    785e:	       rts

00007860 <openSubSlice>:

BOOL openSubSlice (int num) {
    7860:	       lea -32(sp),sp
    7864:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7868:	       move.w 1c46e <sliceBusy>,d0
    786e:	   ,-- beq.s 788a <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7870:	   |   pea 18e59 <PutChar+0x1113>
    7876:	   |   pea 18e77 <PutChar+0x1131>
    787c:	   |   jsr 172a4 <KPrintF>
    7882:	   |   addq.l #8,sp
		return FALSE;
    7884:	   |   clr.w d0
    7886:	,--|-- bra.w 7916 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    788a:	|  '-> move.l 1cada <bigDataFile>,40(sp)
    7892:	|      move.l 48(sp),d0
    7896:	|      add.l d0,d0
    7898:	|      add.l d0,d0
    789a:	|      move.l d0,d1
    789c:	|      move.l 1caea <startOfSubIndex>,d0
    78a2:	|      add.l d1,d0
    78a4:	|      move.l d0,36(sp)
    78a8:	|      moveq #-1,d0
    78aa:	|      move.l d0,32(sp)
    78ae:	|      move.l 1cafa <DOSBase>,d0
    78b4:	|      movea.l d0,a6
    78b6:	|      move.l 40(sp),d1
    78ba:	|      move.l 36(sp),d2
    78be:	|      move.l 32(sp),d3
    78c2:	|      jsr -66(a6)
    78c6:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    78ca:	|      move.l 1cada <bigDataFile>,24(sp)
    78d2:	|      move.l 1cada <bigDataFile>,d0
    78d8:	|      move.l d0,-(sp)
    78da:	|      jsr 718 <get4bytes>
    78e0:	|      addq.l #4,sp
    78e2:	|      move.l d0,20(sp)
    78e6:	|      moveq #-1,d0
    78e8:	|      move.l d0,16(sp)
    78ec:	|      move.l 1cafa <DOSBase>,d0
    78f2:	|      movea.l d0,a6
    78f4:	|      move.l 24(sp),d1
    78f8:	|      move.l 20(sp),d2
    78fc:	|      move.l 16(sp),d3
    7900:	|      jsr -66(a6)
    7904:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7908:	|      move.w #1,1c46e <sliceBusy>
    7910:	|      move.w 1c46e <sliceBusy>,d0
}
    7916:	'----> movem.l (sp)+,d2-d3/a6
    791a:	       lea 32(sp),sp
    791e:	       rts

00007920 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7920:	       lea -180(sp),sp
    7924:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7928:	       tst.l 196(sp)
    792c:	,----- beq.s 796c <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    792e:	|      move.l 196(sp),1cada <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7936:	|      move.l 196(sp),168(sp)
    793c:	|      clr.l 164(sp)
    7940:	|      clr.l 160(sp)
    7944:	|      move.l 1cafa <DOSBase>,d0
    794a:	|      movea.l d0,a6
    794c:	|      move.l 168(sp),d1
    7950:	|      move.l 164(sp),d2
    7954:	|      move.l 160(sp),d3
    7958:	|      jsr -66(a6)
    795c:	|      move.l d0,156(sp)
    7960:	|      move.l 156(sp),d0
    7964:	|      move.l d0,1cade <startIndex>
    796a:	|  ,-- bra.s 79a6 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    796c:	'--|-> move.l 1cada <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7974:	   |   move.l 196(sp),184(sp)
    797a:	   |   move.l 1cade <startIndex>,d0
    7980:	   |   move.l d0,180(sp)
    7984:	   |   moveq #-1,d0
    7986:	   |   move.l d0,176(sp)
    798a:	   |   move.l 1cafa <DOSBase>,d0
    7990:	   |   movea.l d0,a6
    7992:	   |   move.l 184(sp),d1
    7996:	   |   move.l 180(sp),d2
    799a:	   |   move.l 176(sp),d3
    799e:	   |   jsr -66(a6)
    79a2:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    79a6:	   '-> clr.w 1c46e <sliceBusy>

	if (skipBefore > numLanguages) {
    79ac:	       move.l 204(sp),d0
    79b0:	       cmp.l 200(sp),d0
    79b4:	   ,-- bls.s 79c8 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    79b6:	   |   pea 18e91 <PutChar+0x114b>
    79bc:	   |   jsr 172a4 <KPrintF>
    79c2:	   |   addq.l #4,sp
		skipBefore = 0;
    79c4:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    79c8:	   '-> move.l 200(sp),d0
    79cc:	       sub.l 204(sp),d0
    79d0:	       move.l d0,188(sp)
	while (skipBefore) {
    79d4:	   ,-- bra.s 7a12 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    79d6:	,--|-> move.l 196(sp),24(sp)
    79dc:	|  |   move.l 196(sp),-(sp)
    79e0:	|  |   jsr 718 <get4bytes>
    79e6:	|  |   addq.l #4,sp
    79e8:	|  |   move.l d0,20(sp)
    79ec:	|  |   moveq #-1,d0
    79ee:	|  |   move.l d0,16(sp)
    79f2:	|  |   move.l 1cafa <DOSBase>,d0
    79f8:	|  |   movea.l d0,a6
    79fa:	|  |   move.l 24(sp),d1
    79fe:	|  |   move.l 20(sp),d2
    7a02:	|  |   move.l 16(sp),d3
    7a06:	|  |   jsr -66(a6)
    7a0a:	|  |   move.l d0,12(sp)
		skipBefore --;
    7a0e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7a12:	|  '-> tst.l 204(sp)
    7a16:	'----- bne.s 79d6 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7a18:	       move.l 196(sp),152(sp)
    7a1e:	       clr.l 148(sp)
    7a22:	       clr.l 144(sp)
    7a26:	       move.l 1cafa <DOSBase>,d0
    7a2c:	       movea.l d0,a6
    7a2e:	       move.l 152(sp),d1
    7a32:	       move.l 148(sp),d2
    7a36:	       move.l 144(sp),d3
    7a3a:	       jsr -66(a6)
    7a3e:	       move.l d0,140(sp)
    7a42:	       move.l 140(sp),d0
    7a46:	       addq.l #4,d0
    7a48:	       move.l d0,1cae6 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7a4e:	       move.l 196(sp),136(sp)
    7a54:	       move.l 196(sp),-(sp)
    7a58:	       jsr 718 <get4bytes>
    7a5e:	       addq.l #4,sp
    7a60:	       move.l d0,132(sp)
    7a64:	       moveq #-1,d0
    7a66:	       move.l d0,128(sp)
    7a6a:	       move.l 1cafa <DOSBase>,d0
    7a70:	       movea.l d0,a6
    7a72:	       move.l 136(sp),d1
    7a76:	       move.l 132(sp),d2
    7a7a:	       move.l 128(sp),d3
    7a7e:	       jsr -66(a6)
    7a82:	       move.l d0,124(sp)

	while (skipAfter) {
    7a86:	   ,-- bra.s 7ac4 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7a88:	,--|-> move.l 196(sp),40(sp)
    7a8e:	|  |   move.l 196(sp),-(sp)
    7a92:	|  |   jsr 718 <get4bytes>
    7a98:	|  |   addq.l #4,sp
    7a9a:	|  |   move.l d0,36(sp)
    7a9e:	|  |   moveq #-1,d0
    7aa0:	|  |   move.l d0,32(sp)
    7aa4:	|  |   move.l 1cafa <DOSBase>,d0
    7aaa:	|  |   movea.l d0,a6
    7aac:	|  |   move.l 40(sp),d1
    7ab0:	|  |   move.l 36(sp),d2
    7ab4:	|  |   move.l 32(sp),d3
    7ab8:	|  |   jsr -66(a6)
    7abc:	|  |   move.l d0,28(sp)
		skipAfter --;
    7ac0:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7ac4:	|  '-> tst.l 188(sp)
    7ac8:	'----- bne.s 7a88 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7aca:	       move.l 196(sp),120(sp)
    7ad0:	       clr.l 116(sp)
    7ad4:	       clr.l 112(sp)
    7ad8:	       move.l 1cafa <DOSBase>,d0
    7ade:	       movea.l d0,a6
    7ae0:	       move.l 120(sp),d1
    7ae4:	       move.l 116(sp),d2
    7ae8:	       move.l 112(sp),d3
    7aec:	       jsr -66(a6)
    7af0:	       move.l d0,108(sp)
    7af4:	       move.l 108(sp),d0
    7af8:	       addq.l #4,d0
    7afa:	       move.l d0,1caea <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7b00:	       move.l 196(sp),104(sp)
    7b06:	       move.l 196(sp),-(sp)
    7b0a:	       jsr 718 <get4bytes>
    7b10:	       addq.l #4,sp
    7b12:	       move.l d0,100(sp)
    7b16:	       clr.l 96(sp)
    7b1a:	       move.l 1cafa <DOSBase>,d0
    7b20:	       movea.l d0,a6
    7b22:	       move.l 104(sp),d1
    7b26:	       move.l 100(sp),d2
    7b2a:	       move.l 96(sp),d3
    7b2e:	       jsr -66(a6)
    7b32:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7b36:	       move.l 196(sp),88(sp)
    7b3c:	       clr.l 84(sp)
    7b40:	       clr.l 80(sp)
    7b44:	       move.l 1cafa <DOSBase>,d0
    7b4a:	       movea.l d0,a6
    7b4c:	       move.l 88(sp),d1
    7b50:	       move.l 84(sp),d2
    7b54:	       move.l 80(sp),d3
    7b58:	       jsr -66(a6)
    7b5c:	       move.l d0,76(sp)
    7b60:	       move.l 76(sp),d0
    7b64:	       addq.l #4,d0
    7b66:	       move.l d0,1caee <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7b6c:	       move.l 196(sp),72(sp)
    7b72:	       move.l 196(sp),-(sp)
    7b76:	       jsr 718 <get4bytes>
    7b7c:	       addq.l #4,sp
    7b7e:	       move.l d0,68(sp)
    7b82:	       clr.l 64(sp)
    7b86:	       move.l 1cafa <DOSBase>,d0
    7b8c:	       movea.l d0,a6
    7b8e:	       move.l 72(sp),d1
    7b92:	       move.l 68(sp),d2
    7b96:	       move.l 64(sp),d3
    7b9a:	       jsr -66(a6)
    7b9e:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7ba2:	       move.l 196(sp),56(sp)
    7ba8:	       clr.l 52(sp)
    7bac:	       clr.l 48(sp)
    7bb0:	       move.l 1cafa <DOSBase>,d0
    7bb6:	       movea.l d0,a6
    7bb8:	       move.l 56(sp),d1
    7bbc:	       move.l 52(sp),d2
    7bc0:	       move.l 48(sp),d3
    7bc4:	       jsr -66(a6)
    7bc8:	       move.l d0,44(sp)
    7bcc:	       move.l 44(sp),d0
    7bd0:	       move.l d0,1cae2 <startOfDataIndex>
    7bd6:	       nop
    7bd8:	       movem.l (sp)+,d2-d3/a6
    7bdc:	       lea 180(sp),sp
    7be0:	       rts

00007be2 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7be2:	    lea -20(sp),sp
    7be6:	    move.l a6,-(sp)
    7be8:	    move.l d7,-(sp)
	APTR vbr = 0;
    7bea:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7bee:	    move.w #20090,10(sp)
    7bf4:	    move.w #2049,12(sp)
    7bfa:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7c00:	    movea.l 1caf2 <SysBase>,a0
    7c06:	    move.w 296(a0),d0
    7c0a:	    move.w d0,d0
    7c0c:	    andi.l #65535,d0
    7c12:	    moveq #1,d1
    7c14:	    and.l d1,d0
    7c16:	,-- beq.s 7c44 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7c18:	|   lea 28(sp),a0
    7c1c:	|   lea -18(a0),a0
    7c20:	|   move.l a0,20(sp)
    7c24:	|   move.l 1caf2 <SysBase>,d0
    7c2a:	|   movea.l d0,a6
    7c2c:	|   move.l 20(sp),d7
    7c30:	|   exg d7,a5
    7c32:	|   jsr -30(a6)
    7c36:	|   exg d7,a5
    7c38:	|   move.l d0,16(sp)
    7c3c:	|   move.l 16(sp),d0
    7c40:	|   move.l d0,24(sp)

	return vbr;
    7c44:	'-> move.l 24(sp),d0
}
    7c48:	    move.l (sp)+,d7
    7c4a:	    movea.l (sp)+,a6
    7c4c:	    lea 20(sp),sp
    7c50:	    rts

00007c52 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7c52:	movea.l 1cb18 <VBR>,a0
    7c58:	lea 108(a0),a0
    7c5c:	move.l 4(sp),(a0)
}
    7c60:	nop
    7c62:	rts

00007c64 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7c64:	movea.l 1cb18 <VBR>,a0
    7c6a:	move.l 108(a0),d0
}
    7c6e:	rts

00007c70 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7c70:	       subq.l #8,sp
    7c72:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7c74:	       pea 18eda <PutChar+0x1194>
    7c7a:	       jsr 172a4 <KPrintF>
    7c80:	       addq.l #4,sp
	Forbid();
    7c82:	       move.l 1caf2 <SysBase>,d0
    7c88:	       movea.l d0,a6
    7c8a:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7c8e:	       pea 18ef2 <PutChar+0x11ac>
    7c94:	       jsr 172a4 <KPrintF>
    7c9a:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7c9c:	       movea.l 1caf6 <custom>,a0
    7ca2:	       move.w 16(a0),d0
    7ca6:	       move.w d0,1cb16 <SystemADKCON>
	SystemInts=custom->intenar;
    7cac:	       movea.l 1caf6 <custom>,a0
    7cb2:	       move.w 28(a0),d0
    7cb6:	       move.w d0,1cb12 <SystemInts>
	SystemDMA=custom->dmaconr;
    7cbc:	       movea.l 1caf6 <custom>,a0
    7cc2:	       move.w 2(a0),d0
    7cc6:	       move.w d0,1cb14 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7ccc:	       movea.l 1cafe <GfxBase>,a0
    7cd2:	       move.l 34(a0),d0
    7cd6:	       move.l d0,1cb20 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7cdc:	       pea 18f10 <PutChar+0x11ca>
    7ce2:	       jsr 172a4 <KPrintF>
    7ce8:	       addq.l #4,sp
	LoadView(0);
    7cea:	       clr.l 4(sp)
    7cee:	       move.l 1cafe <GfxBase>,d0
    7cf4:	       movea.l d0,a6
    7cf6:	       movea.l 4(sp),a1
    7cfa:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7cfe:	       pea 18f26 <PutChar+0x11e0>
    7d04:	       jsr 172a4 <KPrintF>
    7d0a:	       addq.l #4,sp
	WaitTOF();
    7d0c:	       move.l 1cafe <GfxBase>,d0
    7d12:	       movea.l d0,a6
    7d14:	       jsr -270(a6)
	WaitTOF();
    7d18:	       move.l 1cafe <GfxBase>,d0
    7d1e:	       movea.l d0,a6
    7d20:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7d24:	       pea 18f3b <PutChar+0x11f5>
    7d2a:	       jsr 172a4 <KPrintF>
    7d30:	       addq.l #4,sp
	WaitVbl();
    7d32:	       jsr 171d8 <WaitVbl>
	WaitVbl();
    7d38:	       jsr 171d8 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7d3e:	       pea 18f50 <PutChar+0x120a>
    7d44:	       jsr 172a4 <KPrintF>
    7d4a:	       addq.l #4,sp
	OwnBlitter();
    7d4c:	       move.l 1cafe <GfxBase>,d0
    7d52:	       movea.l d0,a6
    7d54:	       jsr -456(a6)
	WaitBlit();	
    7d58:	       move.l 1cafe <GfxBase>,d0
    7d5e:	       movea.l d0,a6
    7d60:	       jsr -228(a6)
	Disable();
    7d64:	       move.l 1caf2 <SysBase>,d0
    7d6a:	       movea.l d0,a6
    7d6c:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7d70:	       pea 18f71 <PutChar+0x122b>
    7d76:	       jsr 172a4 <KPrintF>
    7d7c:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7d7e:	       movea.l 1caf6 <custom>,a0
    7d84:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7d8a:	       pea 18f88 <PutChar+0x1242>
    7d90:	       jsr 172a4 <KPrintF>
    7d96:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7d98:	       clr.l 8(sp)
    7d9c:	   ,-- bra.s 7dba <TakeSystem+0x14a>
		custom->color[a]=0;
    7d9e:	,--|-> movea.l 1caf6 <custom>,a0
    7da4:	|  |   move.l 8(sp),d0
    7da8:	|  |   addi.l #192,d0
    7dae:	|  |   add.l d0,d0
    7db0:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7db6:	|  |   addq.l #1,8(sp)
    7dba:	|  '-> moveq #31,d0
    7dbc:	|      cmp.l 8(sp),d0
    7dc0:	'----- bge.s 7d9e <TakeSystem+0x12e>

	WaitVbl();
    7dc2:	       jsr 171d8 <WaitVbl>
	WaitVbl();
    7dc8:	       jsr 171d8 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7dce:	       pea 18fad <PutChar+0x1267>
    7dd4:	       jsr 172a4 <KPrintF>
    7dda:	       addq.l #4,sp
	VBR=GetVBR();
    7ddc:	       jsr 7be2 <GetVBR>
    7de2:	       move.l d0,1cb18 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7de8:	       jsr 7c64 <GetInterruptHandler>
    7dee:	       move.l d0,1cb1c <SystemIrq>
}
    7df4:	       nop
    7df6:	       movea.l (sp)+,a6
    7df8:	       addq.l #8,sp
    7dfa:	       rts

00007dfc <FreeSystem>:

void FreeSystem() { 
    7dfc:	subq.l #4,sp
    7dfe:	move.l a6,-(sp)
	WaitVbl();
    7e00:	jsr 171d8 <WaitVbl>
	WaitBlit();
    7e06:	move.l 1cafe <GfxBase>,d0
    7e0c:	movea.l d0,a6
    7e0e:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7e12:	movea.l 1caf6 <custom>,a0
    7e18:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7e1e:	movea.l 1caf6 <custom>,a0
    7e24:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7e2a:	movea.l 1caf6 <custom>,a0
    7e30:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7e36:	move.l 1cb1c <SystemIrq>,d0
    7e3c:	move.l d0,-(sp)
    7e3e:	jsr 7c52 <SetInterruptHandler>
    7e44:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7e46:	movea.l 1cafe <GfxBase>,a0
    7e4c:	move.l 38(a0),d0
    7e50:	movea.l 1caf6 <custom>,a0
    7e56:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7e5a:	movea.l 1cafe <GfxBase>,a0
    7e60:	move.l 50(a0),d0
    7e64:	movea.l 1caf6 <custom>,a0
    7e6a:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7e6e:	movea.l 1caf6 <custom>,a0
    7e74:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7e7a:	move.w 1cb14 <SystemDMA>,d0
    7e80:	movea.l 1caf6 <custom>,a0
    7e86:	ori.w #-32768,d0
    7e8a:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7e8e:	move.w 1cb16 <SystemADKCON>,d0
    7e94:	movea.l 1caf6 <custom>,a0
    7e9a:	ori.w #-32768,d0
    7e9e:	move.w d0,158(a0)

	WaitBlit();	
    7ea2:	move.l 1cafe <GfxBase>,d0
    7ea8:	movea.l d0,a6
    7eaa:	jsr -228(a6)
	DisownBlitter();
    7eae:	move.l 1cafe <GfxBase>,d0
    7eb4:	movea.l d0,a6
    7eb6:	jsr -462(a6)
	Enable();
    7eba:	move.l 1caf2 <SysBase>,d0
    7ec0:	movea.l d0,a6
    7ec2:	jsr -126(a6)

	LoadView(ActiView);
    7ec6:	move.l 1cb20 <ActiView>,4(sp)
    7ece:	move.l 1cafe <GfxBase>,d0
    7ed4:	movea.l d0,a6
    7ed6:	movea.l 4(sp),a1
    7eda:	jsr -222(a6)
	WaitTOF();
    7ede:	move.l 1cafe <GfxBase>,d0
    7ee4:	movea.l d0,a6
    7ee6:	jsr -270(a6)
	WaitTOF();
    7eea:	move.l 1cafe <GfxBase>,d0
    7ef0:	movea.l d0,a6
    7ef2:	jsr -270(a6)

	Permit();
    7ef6:	move.l 1caf2 <SysBase>,d0
    7efc:	movea.l d0,a6
    7efe:	jsr -138(a6)
}
    7f02:	nop
    7f04:	movea.l (sp)+,a6
    7f06:	addq.l #4,sp
    7f08:	rts

00007f0a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7f0a:	       lea -132(sp),sp
    7f0e:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7f12:	       clr.l 140(sp)
    7f16:	   ,-- bra.s 7f1c <main+0x12>
    7f18:	,--|-> addq.l #1,140(sp)
    7f1c:	|  '-> cmpi.l #999,140(sp)
    7f24:	'----- ble.s 7f18 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7f26:	       movea.w #4,a0
    7f2a:	       move.l (a0),d0
    7f2c:	       move.l d0,1caf2 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7f32:	       move.l #14675968,1caf6 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7f3c:	       move.l #102353,136(sp)
    7f44:	       clr.l 132(sp)
    7f48:	       move.l 1caf2 <SysBase>,d0
    7f4e:	       movea.l d0,a6
    7f50:	       movea.l 136(sp),a1
    7f54:	       move.l 132(sp),d0
    7f58:	       jsr -552(a6)
    7f5c:	       move.l d0,128(sp)
    7f60:	       move.l 128(sp),d0
    7f64:	       move.l d0,1cafe <GfxBase>
	if (!GfxBase)
    7f6a:	       move.l 1cafe <GfxBase>,d0
    7f70:	   ,-- bne.s 7f86 <main+0x7c>
		Exit(0);
    7f72:	   |   clr.l 124(sp)
    7f76:	   |   move.l 1cafa <DOSBase>,d0
    7f7c:	   |   movea.l d0,a6
    7f7e:	   |   move.l 124(sp),d1
    7f82:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7f86:	   '-> move.l #102370,120(sp)
    7f8e:	       clr.l 116(sp)
    7f92:	       move.l 1caf2 <SysBase>,d0
    7f98:	       movea.l d0,a6
    7f9a:	       movea.l 120(sp),a1
    7f9e:	       move.l 116(sp),d0
    7fa2:	       jsr -552(a6)
    7fa6:	       move.l d0,112(sp)
    7faa:	       move.l 112(sp),d0
    7fae:	       move.l d0,1cafa <DOSBase>
	if (!DOSBase)
    7fb4:	       move.l 1cafa <DOSBase>,d0
    7fba:	   ,-- bne.s 7fd0 <main+0xc6>
		Exit(0);
    7fbc:	   |   clr.l 108(sp)
    7fc0:	   |   move.l 1cafa <DOSBase>,d0
    7fc6:	   |   movea.l d0,a6
    7fc8:	   |   move.l 108(sp),d1
    7fcc:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7fd0:	   '-> move.l #102382,104(sp)
    7fd8:	       clr.l 100(sp)
    7fdc:	       move.l 1caf2 <SysBase>,d0
    7fe2:	       movea.l d0,a6
    7fe4:	       movea.l 104(sp),a1
    7fe8:	       move.l 100(sp),d0
    7fec:	       jsr -552(a6)
    7ff0:	       move.l d0,96(sp)
    7ff4:	       move.l 96(sp),d0
    7ff8:	       move.l d0,1cb02 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7ffe:	       move.l 1cb02 <MathIeeeSingBasBase>,d0
    8004:	   ,-- bne.s 801a <main+0x110>
		Exit(0);	
    8006:	   |   clr.l 92(sp)
    800a:	   |   move.l 1cafa <DOSBase>,d0
    8010:	   |   movea.l d0,a6
    8012:	   |   move.l 92(sp),d1
    8016:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    801a:	   '-> move.l #102406,88(sp)
    8022:	       clr.l 84(sp)
    8026:	       move.l 1caf2 <SysBase>,d0
    802c:	       movea.l d0,a6
    802e:	       movea.l 88(sp),a1
    8032:	       move.l 84(sp),d0
    8036:	       jsr -552(a6)
    803a:	       move.l d0,80(sp)
    803e:	       move.l 80(sp),d0
    8042:	       move.l d0,1cb06 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    8048:	       move.l 1cb06 <MathIeeeSingTransBase>,d0
    804e:	   ,-- bne.s 8064 <main+0x15a>
		Exit(0);
    8050:	   |   clr.l 76(sp)
    8054:	   |   move.l 1cafa <DOSBase>,d0
    805a:	   |   movea.l d0,a6
    805c:	   |   move.l 76(sp),d1
    8060:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8064:	   '-> move.l #102432,72(sp)
    806c:	       clr.l 68(sp)
    8070:	       move.l 1caf2 <SysBase>,d0
    8076:	       movea.l d0,a6
    8078:	       movea.l 72(sp),a1
    807c:	       move.l 68(sp),d0
    8080:	       jsr -552(a6)
    8084:	       move.l d0,64(sp)
    8088:	       move.l 64(sp),d0
    808c:	       move.l d0,1cb0e <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8092:	       move.l 1cb0e <MathIeeeDoubTransBase>,d0
    8098:	   ,-- bne.s 80ae <main+0x1a4>
		Exit(0);
    809a:	   |   clr.l 60(sp)
    809e:	   |   move.l 1cafa <DOSBase>,d0
    80a4:	   |   movea.l d0,a6
    80a6:	   |   move.l 60(sp),d1
    80aa:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    80ae:	   '-> move.l #102458,56(sp)
    80b6:	       clr.l 52(sp)
    80ba:	       move.l 1caf2 <SysBase>,d0
    80c0:	       movea.l d0,a6
    80c2:	       movea.l 56(sp),a1
    80c6:	       move.l 52(sp),d0
    80ca:	       jsr -552(a6)
    80ce:	       move.l d0,48(sp)
    80d2:	       move.l 48(sp),d0
    80d6:	       move.l d0,1cb0a <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    80dc:	       move.l 1cb0a <MathIeeeDoubBasBase>,d0
    80e2:	   ,-- bne.s 80f8 <main+0x1ee>
		Exit(0);
    80e4:	   |   clr.l 44(sp)
    80e8:	   |   move.l 1cafa <DOSBase>,d0
    80ee:	   |   movea.l d0,a6
    80f0:	   |   move.l 44(sp),d1
    80f4:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    80f8:	   '-> pea 19052 <PutChar+0x130c>
    80fe:	       jsr 172a4 <KPrintF>
    8104:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    8106:	       move.l 1cafa <DOSBase>,d0
    810c:	       movea.l d0,a6
    810e:	       jsr -60(a6)
    8112:	       move.l d0,40(sp)
    8116:	       move.l 40(sp),d0
    811a:	       move.l d0,36(sp)
    811e:	       move.l #102514,32(sp)
    8126:	       moveq #25,d0
    8128:	       move.l d0,28(sp)
    812c:	       move.l 1cafa <DOSBase>,d0
    8132:	       movea.l d0,a6
    8134:	       move.l 36(sp),d1
    8138:	       move.l 32(sp),d2
    813c:	       move.l 28(sp),d3
    8140:	       jsr -48(a6)
    8144:	       move.l d0,24(sp)
	Delay(50);
    8148:	       moveq #50,d0
    814a:	       move.l d0,20(sp)
    814e:	       move.l 1cafa <DOSBase>,d0
    8154:	       movea.l d0,a6
    8156:	       move.l 20(sp),d1
    815a:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    815e:	       pea 1908b <PutChar+0x1345>
    8164:	       jsr 172a4 <KPrintF>
    816a:	       addq.l #4,sp
	TakeSystem();
    816c:	       jsr 7c70 <TakeSystem>
	KPrintF("System Taken\n");
    8172:	       pea 1909a <PutChar+0x1354>
    8178:	       jsr 172a4 <KPrintF>
    817e:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8180:	       movea.l 1caf6 <custom>,a0
    8186:	       move.w #-30721,150(a0)
	WaitVbl();
    818c:	       jsr 171d8 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8192:	       pea 190a8 <PutChar+0x1362>
    8198:	       jsr 172a4 <KPrintF>
    819e:	       addq.l #4,sp
	main_sludge(argc, argv);	
    81a0:	       move.l 152(sp),-(sp)
    81a4:	       move.l 152(sp),-(sp)
    81a8:	       jsr 4990 <main_sludge>
    81ae:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    81b0:	       jsr 7dfc <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    81b6:	       move.l 1cafa <DOSBase>,16(sp)
    81be:	       move.l 1caf2 <SysBase>,d0
    81c4:	       movea.l d0,a6
    81c6:	       movea.l 16(sp),a1
    81ca:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    81ce:	       move.l 1cafe <GfxBase>,12(sp)
    81d6:	       move.l 1caf2 <SysBase>,d0
    81dc:	       movea.l d0,a6
    81de:	       movea.l 12(sp),a1
    81e2:	       jsr -414(a6)
    81e6:	       moveq #0,d0
}
    81e8:	       movem.l (sp)+,d2-d3/a6
    81ec:	       lea 132(sp),sp
    81f0:	       rts

000081f2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    81f2:	    lea -16(sp),sp
    81f6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    81f8:	    moveq #8,d0
    81fa:	    move.l d0,16(sp)
    81fe:	    clr.l 12(sp)
    8202:	    move.l 1caf2 <SysBase>,d0
    8208:	    movea.l d0,a6
    820a:	    move.l 16(sp),d0
    820e:	    move.l 12(sp),d1
    8212:	    jsr -684(a6)
    8216:	    move.l d0,8(sp)
    821a:	    move.l 8(sp),d0
    821e:	    move.l d0,4(sp)
	if (!newStat) {
    8222:	,-- bne.s 8252 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8224:	|   movea.l 1c470 <nowStatus>,a0
    822a:	|   move.l (a0),d0
    822c:	|   movea.l 4(sp),a0
    8230:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8234:	|   pea 18aba <PutChar+0xd74>
    823a:	|   jsr b8 <copyString>
    8240:	|   addq.l #4,sp
    8242:	|   movea.l 4(sp),a0
    8246:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8248:	|   movea.l 1c470 <nowStatus>,a0
    824e:	|   move.l 4(sp),(a0)
	}
}
    8252:	'-> nop
    8254:	    movea.l (sp)+,a6
    8256:	    lea 16(sp),sp
    825a:	    rts

0000825c <clearStatusBar>:

void clearStatusBar () {
    825c:	       lea -16(sp),sp
    8260:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8262:	       movea.l 1c470 <nowStatus>,a0
    8268:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    826c:	       movea.l 1c470 <nowStatus>,a0
    8272:	       moveq #-1,d0
    8274:	       move.l d0,6(a0)
	while (stat) {
    8278:	   ,-- bra.s 82b8 <clearStatusBar+0x5c>
		kill = stat;
    827a:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8280:	|  |   movea.l 16(sp),a0
    8284:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    828a:	|  |   movea.l 12(sp),a0
    828e:	|  |   move.l (a0),8(sp)
    8292:	|  |   move.l 1caf2 <SysBase>,d0
    8298:	|  |   movea.l d0,a6
    829a:	|  |   movea.l 8(sp),a1
    829e:	|  |   jsr -690(a6)
		FreeVec(kill);
    82a2:	|  |   move.l 12(sp),4(sp)
    82a8:	|  |   move.l 1caf2 <SysBase>,d0
    82ae:	|  |   movea.l d0,a6
    82b0:	|  |   movea.l 4(sp),a1
    82b4:	|  |   jsr -690(a6)
	while (stat) {
    82b8:	|  '-> tst.l 16(sp)
    82bc:	'----- bne.s 827a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    82be:	       movea.l 1c470 <nowStatus>,a0
    82c4:	       clr.l (a0)
}
    82c6:	       nop
    82c8:	       movea.l (sp)+,a6
    82ca:	       lea 16(sp),sp
    82ce:	       rts

000082d0 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    82d0:	clr.l 1cb24 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    82d6:	move.w #-1,1cb28 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    82de:	moveq #-1,d0
    82e0:	move.l d0,1cb2a <mainStatus+0x6>
	mainStatus.statusX = 10;
    82e6:	moveq #10,d0
    82e8:	move.l d0,1cb2e <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    82ee:	movea.l 1ca4a <winHeight>,a0
    82f4:	lea -15(a0),a0
    82f8:	move.l a0,d0
    82fa:	move.l d0,1cb32 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8300:	nop
    8302:	rts

00008304 <killLastStatus>:

void killLastStatus () {
    8304:	    lea -12(sp),sp
    8308:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    830a:	    movea.l 1c470 <nowStatus>,a0
    8310:	    move.l (a0),d0
    8312:	,-- beq.s 835c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8314:	|   movea.l 1c470 <nowStatus>,a0
    831a:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    831e:	|   movea.l 1c470 <nowStatus>,a0
    8324:	|   movea.l 12(sp),a1
    8328:	|   move.l 4(a1),d0
    832c:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    832e:	|   movea.l 12(sp),a0
    8332:	|   move.l (a0),8(sp)
    8336:	|   move.l 1caf2 <SysBase>,d0
    833c:	|   movea.l d0,a6
    833e:	|   movea.l 8(sp),a1
    8342:	|   jsr -690(a6)
		FreeVec(kill);
    8346:	|   move.l 12(sp),4(sp)
    834c:	|   move.l 1caf2 <SysBase>,d0
    8352:	|   movea.l d0,a6
    8354:	|   movea.l 4(sp),a1
    8358:	|   jsr -690(a6)
	}
}
    835c:	'-> nop
    835e:	    movea.l (sp)+,a6
    8360:	    lea 12(sp),sp
    8364:	    rts

00008366 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8366:	movea.l 1c470 <nowStatus>,a0
    836c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8372:	movea.l 1c470 <nowStatus>,a0
    8378:	move.l 8(sp),14(a0)
}
    837e:	nop
    8380:	rts

00008382 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8382:	       lea -100(sp),sp
    8386:	       move.l a6,-(sp)
    8388:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    838a:	       movea.l 1c470 <nowStatus>,a0
    8390:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8394:	       movea.l 1c470 <nowStatus>,a0
    839a:	       move.w 4(a0),d0
    839e:	       move.w d0,d0
    83a0:	       andi.l #65535,d0
    83a6:	       move.l 112(sp),-(sp)
    83aa:	       move.l d0,-(sp)
    83ac:	       jsr 8d0 <put2bytes>
    83b2:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    83b4:	       movea.l 1c470 <nowStatus>,a0
    83ba:	       move.l 6(a0),d0
    83be:	       move.l d0,d0
    83c0:	       movea.w d0,a0
    83c2:	       move.l 112(sp),-(sp)
    83c6:	       move.l a0,-(sp)
    83c8:	       jsr a9c <putSigned>
    83ce:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    83d0:	       movea.l 1c470 <nowStatus>,a0
    83d6:	       move.l 10(a0),d0
    83da:	       move.l 112(sp),-(sp)
    83de:	       move.l d0,-(sp)
    83e0:	       jsr 8d0 <put2bytes>
    83e6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    83e8:	       movea.l 1c470 <nowStatus>,a0
    83ee:	       move.l 14(a0),d0
    83f2:	       move.l 112(sp),-(sp)
    83f6:	       move.l d0,-(sp)
    83f8:	       jsr 8d0 <put2bytes>
    83fe:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8400:	       move.l 112(sp),100(sp)
    8406:	       movea.l 1c470 <nowStatus>,a0
    840c:	       move.l 18(a0),96(sp)
    8412:	       move.l 1cafa <DOSBase>,d0
    8418:	       movea.l d0,a6
    841a:	       move.l 100(sp),d1
    841e:	       move.l 96(sp),d2
    8422:	       jsr -312(a6)
    8426:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    842a:	       move.l 112(sp),88(sp)
    8430:	       movea.l 1c470 <nowStatus>,a0
    8436:	       move.l 22(a0),84(sp)
    843c:	       move.l 1cafa <DOSBase>,d0
    8442:	       movea.l d0,a6
    8444:	       move.l 88(sp),d1
    8448:	       move.l 84(sp),d2
    844c:	       jsr -312(a6)
    8450:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8454:	       move.l 112(sp),76(sp)
    845a:	       movea.l 1c470 <nowStatus>,a0
    8460:	       move.l 26(a0),72(sp)
    8466:	       move.l 1cafa <DOSBase>,d0
    846c:	       movea.l d0,a6
    846e:	       move.l 76(sp),d1
    8472:	       move.l 72(sp),d2
    8476:	       jsr -312(a6)
    847a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    847e:	       move.l 112(sp),64(sp)
    8484:	       movea.l 1c470 <nowStatus>,a0
    848a:	       move.l 30(a0),60(sp)
    8490:	       move.l 1cafa <DOSBase>,d0
    8496:	       movea.l d0,a6
    8498:	       move.l 64(sp),d1
    849c:	       move.l 60(sp),d2
    84a0:	       jsr -312(a6)
    84a4:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    84a8:	       move.l 112(sp),52(sp)
    84ae:	       movea.l 1c470 <nowStatus>,a0
    84b4:	       move.l 34(a0),48(sp)
    84ba:	       move.l 1cafa <DOSBase>,d0
    84c0:	       movea.l d0,a6
    84c2:	       move.l 52(sp),d1
    84c6:	       move.l 48(sp),d2
    84ca:	       jsr -312(a6)
    84ce:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    84d2:	       move.l 112(sp),40(sp)
    84d8:	       movea.l 1c470 <nowStatus>,a0
    84de:	       move.l 38(a0),36(sp)
    84e4:	       move.l 1cafa <DOSBase>,d0
    84ea:	       movea.l d0,a6
    84ec:	       move.l 40(sp),d1
    84f0:	       move.l 36(sp),d2
    84f4:	       jsr -312(a6)
    84f8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    84fc:	   ,-- bra.s 8540 <saveStatusBars+0x1be>
		FPutC (fp,1);
    84fe:	,--|-> move.l 112(sp),16(sp)
    8504:	|  |   moveq #1,d0
    8506:	|  |   move.l d0,12(sp)
    850a:	|  |   move.l 1cafa <DOSBase>,d0
    8510:	|  |   movea.l d0,a6
    8512:	|  |   move.l 16(sp),d1
    8516:	|  |   move.l 12(sp),d2
    851a:	|  |   jsr -312(a6)
    851e:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8522:	|  |   movea.l 104(sp),a0
    8526:	|  |   move.l (a0),d0
    8528:	|  |   move.l 112(sp),-(sp)
    852c:	|  |   move.l d0,-(sp)
    852e:	|  |   jsr bd8 <writeString>
    8534:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8536:	|  |   movea.l 104(sp),a0
    853a:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8540:	|  '-> tst.l 104(sp)
    8544:	'----- bne.s 84fe <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8546:	       move.l 112(sp),28(sp)
    854c:	       clr.l 24(sp)
    8550:	       move.l 1cafa <DOSBase>,d0
    8556:	       movea.l d0,a6
    8558:	       move.l 28(sp),d1
    855c:	       move.l 24(sp),d2
    8560:	       jsr -312(a6)
    8564:	       move.l d0,20(sp)
}
    8568:	       nop
    856a:	       move.l (sp)+,d2
    856c:	       movea.l (sp)+,a6
    856e:	       lea 100(sp),sp
    8572:	       rts

00008574 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8574:	movea.l 1c470 <nowStatus>,a0
    857a:	move.l 4(sp),6(a0)
}
    8580:	nop
    8582:	rts

00008584 <setStatusBar>:

void setStatusBar (char * txt) {
    8584:	    subq.l #4,sp
    8586:	    move.l a6,-(sp)
    8588:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    858a:	    movea.l 1c470 <nowStatus>,a0
    8590:	    move.l (a0),d0
    8592:	,-- beq.s 85c6 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8594:	|   movea.l 1c470 <nowStatus>,a0
    859a:	|   movea.l (a0),a0
    859c:	|   move.l (a0),8(sp)
    85a0:	|   move.l 1caf2 <SysBase>,d0
    85a6:	|   movea.l d0,a6
    85a8:	|   movea.l 8(sp),a1
    85ac:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    85b0:	|   movea.l 1c470 <nowStatus>,a0
    85b6:	|   movea.l (a0),a2
    85b8:	|   move.l 16(sp),-(sp)
    85bc:	|   jsr b8 <copyString>
    85c2:	|   addq.l #4,sp
    85c4:	|   move.l d0,(a2)
	}
}
    85c6:	'-> nop
    85c8:	    movea.l (sp)+,a2
    85ca:	    movea.l (sp)+,a6
    85cc:	    addq.l #4,sp
    85ce:	    rts

000085d0 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    85d0:	       movea.l 1c470 <nowStatus>,a0
    85d6:	       move.l (a0),d0
    85d8:	,----- beq.s 85e6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    85da:	|      movea.l 1c470 <nowStatus>,a0
    85e0:	|      movea.l (a0),a0
    85e2:	|      move.l (a0),d0
    85e4:	|  ,-- bra.s 85ec <statusBarText+0x1c>
	} else {
		return "";
    85e6:	'--|-> move.l #101050,d0
	}
    85ec:	   '-> rts

000085ee <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    85ee:	       lea -12(sp),sp
    85f2:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    85f4:	       move.l 1cb4e <zBuffer>,12(sp)

	while(zbuffercursor) {
    85fc:	   ,-- bra.s 8624 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    85fe:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8604:	|  |   movea.l 12(sp),a0
    8608:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    860e:	|  |   move.l 8(sp),4(sp)
    8614:	|  |   move.l 1caf2 <SysBase>,d0
    861a:	|  |   movea.l d0,a6
    861c:	|  |   movea.l 4(sp),a1
    8620:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8624:	|  '-> tst.l 12(sp)
    8628:	'----- bne.s 85fe <killZBuffer+0x10>
	}
	zBuffer = NULL;
    862a:	       clr.l 1cb4e <zBuffer>
}
    8630:	       nop
    8632:	       movea.l (sp)+,a6
    8634:	       lea 12(sp),sp
    8638:	       rts

0000863a <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    863a:	                lea -304(sp),sp
    863e:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8642:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8646:	                jsr 85ee <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    864c:	                move.l 328(sp),d0
    8650:	                move.l d0,-(sp)
    8652:	                jsr 76d8 <openFileFromNum>
    8658:	                addq.l #4,sp
    865a:	                tst.l d0
    865c:	            ,-- bne.s 8664 <setZBuffer+0x2a>
    865e:	            |   clr.w d0
    8660:	,-----------|-- bra.w 8922 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8664:	|           '-> move.l 1cada <bigDataFile>,310(sp)
    866c:	|               move.l 1cafa <DOSBase>,d0
    8672:	|               movea.l d0,a6
    8674:	|               move.l 310(sp),d1
    8678:	|               jsr -306(a6)
    867c:	|               move.l d0,306(sp)
    8680:	|               move.l 306(sp),d0
    8684:	|               moveq #97,d1
    8686:	|               cmp.l d0,d1
    8688:	|        ,----- bne.s 86fc <setZBuffer+0xc2>
    868a:	|        |      move.l 1cada <bigDataFile>,302(sp)
    8692:	|        |      move.l 1cafa <DOSBase>,d0
    8698:	|        |      movea.l d0,a6
    869a:	|        |      move.l 302(sp),d1
    869e:	|        |      jsr -306(a6)
    86a2:	|        |      move.l d0,298(sp)
    86a6:	|        |      move.l 298(sp),d0
    86aa:	|        |      moveq #115,d1
    86ac:	|        |      cmp.l d0,d1
    86ae:	|        +----- bne.s 86fc <setZBuffer+0xc2>
    86b0:	|        |      move.l 1cada <bigDataFile>,294(sp)
    86b8:	|        |      move.l 1cafa <DOSBase>,d0
    86be:	|        |      movea.l d0,a6
    86c0:	|        |      move.l 294(sp),d1
    86c4:	|        |      jsr -306(a6)
    86c8:	|        |      move.l d0,290(sp)
    86cc:	|        |      move.l 290(sp),d0
    86d0:	|        |      moveq #122,d1
    86d2:	|        |      cmp.l d0,d1
    86d4:	|        +----- bne.s 86fc <setZBuffer+0xc2>
    86d6:	|        |      move.l 1cada <bigDataFile>,286(sp)
    86de:	|        |      move.l 1cafa <DOSBase>,d0
    86e4:	|        |      movea.l d0,a6
    86e6:	|        |      move.l 286(sp),d1
    86ea:	|        |      jsr -306(a6)
    86ee:	|        |      move.l d0,282(sp)
    86f2:	|        |      move.l 282(sp),d0
    86f6:	|        |      moveq #98,d1
    86f8:	|        |      cmp.l d0,d1
    86fa:	|        |  ,-- beq.s 8710 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    86fc:	|        '--|-> pea 190e5 <PutChar+0x139f>
    8702:	|           |   jsr 172a4 <KPrintF>
    8708:	|           |   addq.l #4,sp
		 return FALSE;
    870a:	|           |   clr.w d0
    870c:	+-----------|-- bra.w 8922 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8710:	|           '-> move.l 1cada <bigDataFile>,278(sp)
    8718:	|               move.l 1cafa <DOSBase>,d0
    871e:	|               movea.l d0,a6
    8720:	|               move.l 278(sp),d1
    8724:	|               jsr -306(a6)
    8728:	|               move.l d0,274(sp)
    872c:	|               move.l 274(sp),d0
    8730:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8734:	|               moveq #28,d0
    8736:	|               move.l d0,270(sp)
    873a:	|               clr.l 266(sp)
    873e:	|               move.l 1caf2 <SysBase>,d0
    8744:	|               movea.l d0,a6
    8746:	|               move.l 270(sp),d0
    874a:	|               move.l 266(sp),d1
    874e:	|               jsr -684(a6)
    8752:	|               move.l d0,262(sp)
    8756:	|               move.l 262(sp),d0
    875a:	|               move.l d0,1cb4e <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8760:	|               move.l 1cb4e <zBuffer>,318(sp)

	while(numelements--)
    8768:	|     ,-------- bra.w 8908 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    876c:	|  ,--|-------> move.l 1cada <bigDataFile>,d0
    8772:	|  |  |         move.l d0,-(sp)
    8774:	|  |  |         jsr 6bc <get2bytes>
    877a:	|  |  |         addq.l #4,sp
    877c:	|  |  |         movea.l 318(sp),a0
    8780:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8782:	|  |  |         move.l 1cada <bigDataFile>,d0
    8788:	|  |  |         move.l d0,-(sp)
    878a:	|  |  |         jsr 6bc <get2bytes>
    8790:	|  |  |         addq.l #4,sp
    8792:	|  |  |         movea.l 318(sp),a0
    8796:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    879a:	|  |  |         move.l 1cada <bigDataFile>,d0
    87a0:	|  |  |         move.l d0,-(sp)
    87a2:	|  |  |         jsr 6bc <get2bytes>
    87a8:	|  |  |         addq.l #4,sp
    87aa:	|  |  |         movea.l 318(sp),a0
    87ae:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    87b2:	|  |  |         move.l 1cada <bigDataFile>,d0
    87b8:	|  |  |         move.l d0,-(sp)
    87ba:	|  |  |         jsr 6bc <get2bytes>
    87c0:	|  |  |         addq.l #4,sp
    87c2:	|  |  |         movea.l 318(sp),a0
    87c6:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    87ca:	|  |  |         move.l 1cada <bigDataFile>,d0
    87d0:	|  |  |         move.l d0,-(sp)
    87d2:	|  |  |         jsr 6bc <get2bytes>
    87d8:	|  |  |         addq.l #4,sp
    87da:	|  |  |         movea.l 318(sp),a0
    87de:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    87e2:	|  |  |         movea.l 318(sp),a0
    87e6:	|  |  |         move.l (a0),d0
    87e8:	|  |  |         movea.l 318(sp),a0
    87ec:	|  |  |         move.l 4(a0),d1
    87f0:	|  |  |         move.l d1,-(sp)
    87f2:	|  |  |         move.l d0,-(sp)
    87f4:	|  |  |         jsr 17c30 <__mulsi3>
    87fa:	|  |  |         addq.l #8,sp
    87fc:	|  |  |         tst.l d0
    87fe:	|  |  |     ,-- bge.s 8802 <setZBuffer+0x1c8>
    8800:	|  |  |     |   addq.l #7,d0
    8802:	|  |  |     '-> asr.l #3,d0
    8804:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8808:	|  |  |         moveq #0,d0
    880a:	|  |  |         move.w 260(sp),d0
    880e:	|  |  |         move.l d0,256(sp)
    8812:	|  |  |         moveq #2,d1
    8814:	|  |  |         move.l d1,252(sp)
    8818:	|  |  |         move.l 1caf2 <SysBase>,d0
    881e:	|  |  |         movea.l d0,a6
    8820:	|  |  |         move.l 256(sp),d0
    8824:	|  |  |         move.l 252(sp),d1
    8828:	|  |  |         jsr -684(a6)
    882c:	|  |  |         move.l d0,248(sp)
    8830:	|  |  |         move.l 248(sp),d0
    8834:	|  |  |         movea.l 318(sp),a0
    8838:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    883c:	|  |  |         move.l 1cada <bigDataFile>,244(sp)
    8844:	|  |  |         movea.l 318(sp),a0
    8848:	|  |  |         move.l 20(a0),240(sp)
    884e:	|  |  |         moveq #1,d0
    8850:	|  |  |         move.l d0,236(sp)
    8854:	|  |  |         moveq #0,d0
    8856:	|  |  |         move.w 260(sp),d0
    885a:	|  |  |         move.l d0,232(sp)
    885e:	|  |  |         move.l 1cafa <DOSBase>,d0
    8864:	|  |  |         movea.l d0,a6
    8866:	|  |  |         move.l 244(sp),d1
    886a:	|  |  |         move.l 240(sp),d2
    886e:	|  |  |         move.l 236(sp),d3
    8872:	|  |  |         move.l 232(sp),d4
    8876:	|  |  |         jsr -324(a6)
    887a:	|  |  |         move.l d0,228(sp)
    887e:	|  |  |         move.l 228(sp),d0
    8882:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8886:	|  |  |         tst.w 322(sp)
    888a:	|  |  |  ,----- beq.s 88c6 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    888c:	|  |  |  |      moveq #28,d1
    888e:	|  |  |  |      move.l d1,222(sp)
    8892:	|  |  |  |      clr.l 218(sp)
    8896:	|  |  |  |      move.l 1caf2 <SysBase>,d0
    889c:	|  |  |  |      movea.l d0,a6
    889e:	|  |  |  |      move.l 222(sp),d0
    88a2:	|  |  |  |      move.l 218(sp),d1
    88a6:	|  |  |  |      jsr -684(a6)
    88aa:	|  |  |  |      move.l d0,214(sp)
    88ae:	|  |  |  |      move.l 214(sp),d0
    88b2:	|  |  |  |      movea.l 318(sp),a0
    88b6:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    88ba:	|  |  |  |      movea.l 318(sp),a0
    88be:	|  |  |  |      move.l 24(a0),318(sp)
    88c4:	|  |  |  |  ,-- bra.s 88ce <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    88c6:	|  |  |  '--|-> movea.l 318(sp),a0
    88ca:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    88ce:	|  |  |     '-> movea.l 318(sp),a0
    88d2:	|  |  |         move.l 4(a0),d0
    88d6:	|  |  |         move.l d0,d0
    88d8:	|  |  |         movea.w d0,a1
    88da:	|  |  |         movea.l 318(sp),a0
    88de:	|  |  |         move.l (a0),d0
    88e0:	|  |  |         move.l d0,d0
    88e2:	|  |  |         movea.w d0,a0
    88e4:	|  |  |         movea.l 318(sp),a2
    88e8:	|  |  |         move.l 20(a2),d0
    88ec:	|  |  |         clr.l -(sp)
    88ee:	|  |  |         pea 1 <_start+0x1>
    88f2:	|  |  |         move.l a1,-(sp)
    88f4:	|  |  |         move.l a0,-(sp)
    88f6:	|  |  |         pea 190f9 <PutChar+0x13b3>
    88fc:	|  |  |         move.l d0,-(sp)
    88fe:	|  |  |         jsr 1738c <debug_register_bitmap>
    8904:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8908:	|  |  '-------> move.w 322(sp),d0
    890c:	|  |            move.w d0,d1
    890e:	|  |            subq.w #1,d1
    8910:	|  |            move.w d1,322(sp)
    8914:	|  |            tst.w d0
    8916:	|  '----------- bne.w 876c <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    891a:	|               jsr 75d0 <finishAccess>
	
	return TRUE;
    8920:	|               moveq #1,d0
}
    8922:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8926:	                lea 304(sp),sp
    892a:	                rts

0000892c <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    892c:	          lea -32(sp),sp
    8930:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8932:	          move.l 40(sp),d0
    8936:	          addq.l #8,d0
    8938:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    893c:	          clr.l 32(sp)
    8940:	   ,----- bra.s 8986 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8942:	,--|----> movea.l 24(sp),a0
    8946:	|  |      movea.l 8(a0),a0
    894a:	|  |      move.l 32(sp),d1
    894e:	|  |      move.l d1,d0
    8950:	|  |      lsl.l #3,d0
    8952:	|  |      sub.l d1,d0
    8954:	|  |      add.l d0,d0
    8956:	|  |      add.l d0,d0
    8958:	|  |      adda.l d0,a0
    895a:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    895e:	|  |      movea.l 8(sp),a0
    8962:	|  |      move.l 24(a0),d0
    8966:	|  |  ,-- beq.s 8982 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8968:	|  |  |   movea.l 8(sp),a0
    896c:	|  |  |   move.l 24(a0),4(sp)
    8972:	|  |  |   move.l 1caf2 <SysBase>,d0
    8978:	|  |  |   movea.l d0,a6
    897a:	|  |  |   movea.l 4(sp),a1
    897e:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8982:	|  |  '-> addq.l #1,32(sp)
    8986:	|  '----> movea.l 24(sp),a0
    898a:	|         move.l (a0),d0
    898c:	|         cmp.l 32(sp),d0
    8990:	'-------- bgt.s 8942 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8992:	          movea.l 24(sp),a0
    8996:	          move.l 8(a0),20(sp)
    899c:	          move.l 1caf2 <SysBase>,d0
    89a2:	          movea.l d0,a6
    89a4:	          movea.l 20(sp),a1
    89a8:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    89ac:	          move.l 1cc06 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89b4:	      ,-- bra.s 89c0 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    89b6:	   ,--|-> movea.l 28(sp),a0
    89ba:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89c0:	   |  '-> movea.l 28(sp),a0
    89c4:	   |      movea.l 22(a0),a0
    89c8:	   |      move.l (a0),d1
    89ca:	   |      movea.l 40(sp),a0
    89ce:	   |      move.l (a0),d0
    89d0:	   |      cmp.l d1,d0
    89d2:	   |  ,-- beq.s 89da <forgetSpriteBank+0xae>
    89d4:	   |  |   tst.l 28(sp)
    89d8:	   '--|-- bne.s 89b6 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    89da:	      '-> tst.l 28(sp)
    89de:	   ,----- beq.s 8a08 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    89e0:	   |      movea.l 40(sp),a0
    89e4:	   |      move.l 22(a0),d0
    89e8:	   |      movea.l 28(sp),a0
    89ec:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    89f0:	   |      move.l 40(sp),12(sp)
    89f6:	   |      move.l 1caf2 <SysBase>,d0
    89fc:	   |      movea.l d0,a6
    89fe:	   |      movea.l 12(sp),a1
    8a02:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8a06:	   |  ,-- bra.s 8a2e <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8a08:	   '--|-> movea.l 1cc06 <allLoadedBanks>,a0
    8a0e:	      |   move.l 22(a0),d0
    8a12:	      |   move.l d0,1cc06 <allLoadedBanks>
		FreeVec( forgetme);
    8a18:	      |   move.l 40(sp),16(sp)
    8a1e:	      |   move.l 1caf2 <SysBase>,d0
    8a24:	      |   movea.l d0,a6
    8a26:	      |   movea.l 16(sp),a1
    8a2a:	      |   jsr -690(a6)
}
    8a2e:	      '-> nop
    8a30:	          movea.l (sp)+,a6
    8a32:	          lea 32(sp),sp
    8a36:	          rts

00008a38 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8a38:	                      lea -84(sp),sp
    8a3c:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8a40:	                      pea 19105 <PutChar+0x13bf>
    8a46:	                      jsr 172a4 <KPrintF>
    8a4c:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8a4e:	                      clr.l 94(sp)
    8a52:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8a56:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8a5a:	                      move.l 108(sp),-(sp)
    8a5e:	                      jsr 76d8 <openFileFromNum>
    8a64:	                      addq.l #4,sp
    8a66:	                      tst.l d0
    8a68:	                  ,-- bne.s 8a7e <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8a6a:	                  |   pea 1911f <PutChar+0x13d9>
    8a70:	                  |   jsr 172a4 <KPrintF>
    8a76:	                  |   addq.l #4,sp
		return FALSE;
    8a78:	                  |   clr.w d0
    8a7a:	,-----------------|-- bra.w 8e72 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8a7e:	|                 '-> move.l 1cada <bigDataFile>,d0
    8a84:	|                     move.l d0,-(sp)
    8a86:	|                     jsr 6bc <get2bytes>
    8a8c:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8a8e:	|                     move.l 1cada <bigDataFile>,82(sp)
    8a96:	|                     move.l 1cafa <DOSBase>,d0
    8a9c:	|                     movea.l d0,a6
    8a9e:	|                     move.l 82(sp),d1
    8aa2:	|                     jsr -306(a6)
    8aa6:	|                     move.l d0,78(sp)
    8aaa:	|                     move.l 78(sp),d0
    8aae:	|                     movea.l 112(sp),a0
    8ab2:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8ab6:	|                     move.l 1cada <bigDataFile>,d0
    8abc:	|                     move.l d0,-(sp)
    8abe:	|                     jsr 6bc <get2bytes>
    8ac4:	|                     addq.l #4,sp
    8ac6:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8aca:	|                 ,-- bgt.s 8ae0 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8acc:	|                 |   pea 1914d <PutChar+0x1407>
    8ad2:	|                 |   jsr 172a4 <KPrintF>
    8ad8:	|                 |   addq.l #4,sp
		return FALSE;
    8ada:	|                 |   clr.w d0
    8adc:	+-----------------|-- bra.w 8e72 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8ae0:	|                 '-> movea.l 112(sp),a0
    8ae4:	|                     move.l 4(a0),d0
    8ae8:	|                     moveq #3,d1
    8aea:	|                     cmp.l d0,d1
    8aec:	|                 ,-- bne.s 8afa <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8aee:	|                 |   movea.l 112(sp),a0
    8af2:	|                 |   move.w #1,12(a0)
    8af8:	|              ,--|-- bra.s 8b1c <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8afa:	|              |  '-> movea.l 112(sp),a0
    8afe:	|              |      move.l 4(a0),d0
    8b02:	|              |      moveq #3,d1
    8b04:	|              |      cmp.l d0,d1
    8b06:	|              +----- bge.s 8b1c <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8b08:	|              |      pea 1918d <PutChar+0x1447>
    8b0e:	|              |      jsr 172a4 <KPrintF>
    8b14:	|              |      addq.l #4,sp
		return FALSE;
    8b16:	|              |      clr.w d0
    8b18:	+--------------|----- bra.w 8e72 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8b1c:	|              '----> movea.l 112(sp),a0
    8b20:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8b24:	|                     move.l 74(sp),d1
    8b28:	|                     move.l d1,d0
    8b2a:	|                     lsl.l #3,d0
    8b2c:	|                     sub.l d1,d0
    8b2e:	|                     add.l d0,d0
    8b30:	|                     add.l d0,d0
    8b32:	|                     move.l d0,70(sp)
    8b36:	|                     clr.l 66(sp)
    8b3a:	|                     move.l 1caf2 <SysBase>,d0
    8b40:	|                     movea.l d0,a6
    8b42:	|                     move.l 70(sp),d0
    8b46:	|                     move.l 66(sp),d1
    8b4a:	|                     jsr -684(a6)
    8b4e:	|                     move.l d0,62(sp)
    8b52:	|                     move.l 62(sp),d0
    8b56:	|                     movea.l 112(sp),a0
    8b5a:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8b5e:	|                     movea.l 112(sp),a0
    8b62:	|                     move.l 8(a0),d0
    8b66:	|                 ,-- bne.s 8b6e <loadSpriteBank+0x136>
    8b68:	|                 |   clr.w d0
    8b6a:	+-----------------|-- bra.w 8e72 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8b6e:	|                 '-> moveq #1,d0
    8b70:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8b74:	|                     clr.l 100(sp)
    8b78:	|     ,-------------- bra.w 8e50 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8b7c:	|  ,--|-------------> move.l 1cada <bigDataFile>,d0
    8b82:	|  |  |               move.l d0,-(sp)
    8b84:	|  |  |               jsr 6bc <get2bytes>
    8b8a:	|  |  |               addq.l #4,sp
    8b8c:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8b90:	|  |  |               movea.l 112(sp),a0
    8b94:	|  |  |               movea.l 8(a0),a0
    8b98:	|  |  |               move.l 100(sp),d1
    8b9c:	|  |  |               move.l d1,d0
    8b9e:	|  |  |               lsl.l #3,d0
    8ba0:	|  |  |               sub.l d1,d0
    8ba2:	|  |  |               add.l d0,d0
    8ba4:	|  |  |               add.l d0,d0
    8ba6:	|  |  |               adda.l d0,a0
    8ba8:	|  |  |               moveq #0,d0
    8baa:	|  |  |               move.w 60(sp),d0
    8bae:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8bb0:	|  |  |               movea.l 1cada <bigDataFile>,a1
    8bb6:	|  |  |               movea.l 112(sp),a0
    8bba:	|  |  |               movea.l 8(a0),a0
    8bbe:	|  |  |               move.l 100(sp),d1
    8bc2:	|  |  |               move.l d1,d0
    8bc4:	|  |  |               lsl.l #3,d0
    8bc6:	|  |  |               sub.l d1,d0
    8bc8:	|  |  |               add.l d0,d0
    8bca:	|  |  |               add.l d0,d0
    8bcc:	|  |  |               lea (0,a0,d0.l),a2
    8bd0:	|  |  |               move.l a1,-(sp)
    8bd2:	|  |  |               jsr 6bc <get2bytes>
    8bd8:	|  |  |               addq.l #4,sp
    8bda:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8bde:	|  |  |               movea.l 1cada <bigDataFile>,a1
    8be4:	|  |  |               movea.l 112(sp),a0
    8be8:	|  |  |               movea.l 8(a0),a0
    8bec:	|  |  |               move.l 100(sp),d1
    8bf0:	|  |  |               move.l d1,d0
    8bf2:	|  |  |               lsl.l #3,d0
    8bf4:	|  |  |               sub.l d1,d0
    8bf6:	|  |  |               add.l d0,d0
    8bf8:	|  |  |               add.l d0,d0
    8bfa:	|  |  |               lea (0,a0,d0.l),a2
    8bfe:	|  |  |               move.l a1,-(sp)
    8c00:	|  |  |               jsr 6bc <get2bytes>
    8c06:	|  |  |               addq.l #4,sp
    8c08:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8c0c:	|  |  |               movea.l 1cada <bigDataFile>,a1
    8c12:	|  |  |               movea.l 112(sp),a0
    8c16:	|  |  |               movea.l 8(a0),a0
    8c1a:	|  |  |               move.l 100(sp),d1
    8c1e:	|  |  |               move.l d1,d0
    8c20:	|  |  |               lsl.l #3,d0
    8c22:	|  |  |               sub.l d1,d0
    8c24:	|  |  |               add.l d0,d0
    8c26:	|  |  |               add.l d0,d0
    8c28:	|  |  |               lea (0,a0,d0.l),a2
    8c2c:	|  |  |               move.l a1,-(sp)
    8c2e:	|  |  |               jsr 6bc <get2bytes>
    8c34:	|  |  |               addq.l #4,sp
    8c36:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8c3a:	|  |  |               movea.l 112(sp),a0
    8c3e:	|  |  |               move.l 4(a0),d0
    8c42:	|  |  |               moveq #3,d1
    8c44:	|  |  |               cmp.l d0,d1
    8c46:	|  |  |     ,-------- beq.w 8ce2 <loadSpriteBank+0x2aa>
    8c4a:	|  |  |     |         moveq #3,d1
    8c4c:	|  |  |     |         cmp.l d0,d1
    8c4e:	|  |  |  ,--|-------- blt.w 8d88 <loadSpriteBank+0x350>
    8c52:	|  |  |  |  |         moveq #1,d1
    8c54:	|  |  |  |  |         cmp.l d0,d1
    8c56:	|  |  |  |  |     ,-- beq.s 8c62 <loadSpriteBank+0x22a>
    8c58:	|  |  |  |  |     |   moveq #2,d1
    8c5a:	|  |  |  |  |     |   cmp.l d0,d1
    8c5c:	|  |  |  |  |  ,--|-- beq.s 8c8e <loadSpriteBank+0x256>
    8c5e:	|  |  |  +--|--|--|-- bra.w 8d88 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8c62:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8c66:	|  |  |  |  |  |      movea.l 8(a0),a0
    8c6a:	|  |  |  |  |  |      move.l 100(sp),d1
    8c6e:	|  |  |  |  |  |      move.l d1,d0
    8c70:	|  |  |  |  |  |      lsl.l #3,d0
    8c72:	|  |  |  |  |  |      sub.l d1,d0
    8c74:	|  |  |  |  |  |      add.l d0,d0
    8c76:	|  |  |  |  |  |      add.l d0,d0
    8c78:	|  |  |  |  |  |      adda.l d0,a0
    8c7a:	|  |  |  |  |  |      move.l 4(a0),d0
    8c7e:	|  |  |  |  |  |      addq.l #2,d0
    8c80:	|  |  |  |  |  |      move.l d0,d0
    8c82:	|  |  |  |  |  |      add.w d0,d0
    8c84:	|  |  |  |  |  |      add.w d0,d0
    8c86:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8c8a:	|  |  |  +--|--|----- bra.w 8d88 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8c8e:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8c92:	|  |  |  |  |         movea.l 8(a0),a0
    8c96:	|  |  |  |  |         move.l 100(sp),d1
    8c9a:	|  |  |  |  |         move.l d1,d0
    8c9c:	|  |  |  |  |         lsl.l #3,d0
    8c9e:	|  |  |  |  |         sub.l d1,d0
    8ca0:	|  |  |  |  |         add.l d0,d0
    8ca2:	|  |  |  |  |         add.l d0,d0
    8ca4:	|  |  |  |  |         adda.l d0,a0
    8ca6:	|  |  |  |  |         move.l (a0),d0
    8ca8:	|  |  |  |  |     ,-- bpl.s 8cac <loadSpriteBank+0x274>
    8caa:	|  |  |  |  |     |   addq.l #7,d0
    8cac:	|  |  |  |  |     '-> asr.l #3,d0
    8cae:	|  |  |  |  |         move.l d0,d2
    8cb0:	|  |  |  |  |         movea.l 112(sp),a0
    8cb4:	|  |  |  |  |         movea.l 8(a0),a0
    8cb8:	|  |  |  |  |         move.l 100(sp),d1
    8cbc:	|  |  |  |  |         move.l d1,d0
    8cbe:	|  |  |  |  |         lsl.l #3,d0
    8cc0:	|  |  |  |  |         sub.l d1,d0
    8cc2:	|  |  |  |  |         add.l d0,d0
    8cc4:	|  |  |  |  |         add.l d0,d0
    8cc6:	|  |  |  |  |         adda.l d0,a0
    8cc8:	|  |  |  |  |         move.l 4(a0),d0
    8ccc:	|  |  |  |  |         move.l d0,d0
    8cce:	|  |  |  |  |         move.w d2,d1
    8cd0:	|  |  |  |  |         muls.w d0,d1
    8cd2:	|  |  |  |  |         move.w d1,d0
    8cd4:	|  |  |  |  |         add.w d0,d0
    8cd6:	|  |  |  |  |         add.w d1,d0
    8cd8:	|  |  |  |  |         add.w d0,d0
    8cda:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8cde:	|  |  |  +--|-------- bra.w 8d88 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8ce2:	|  |  |  |  '-------> movea.l 112(sp),a0
    8ce6:	|  |  |  |            movea.l 8(a0),a0
    8cea:	|  |  |  |            move.l 100(sp),d1
    8cee:	|  |  |  |            move.l d1,d0
    8cf0:	|  |  |  |            lsl.l #3,d0
    8cf2:	|  |  |  |            sub.l d1,d0
    8cf4:	|  |  |  |            add.l d0,d0
    8cf6:	|  |  |  |            add.l d0,d0
    8cf8:	|  |  |  |            adda.l d0,a0
    8cfa:	|  |  |  |            move.l (a0),d0
    8cfc:	|  |  |  |            andi.l #-2147483633,d0
    8d02:	|  |  |  |        ,-- bpl.s 8d0c <loadSpriteBank+0x2d4>
    8d04:	|  |  |  |        |   subq.l #1,d0
    8d06:	|  |  |  |        |   moveq #-16,d1
    8d08:	|  |  |  |        |   or.l d1,d0
    8d0a:	|  |  |  |        |   addq.l #1,d0
    8d0c:	|  |  |  |        '-> tst.l d0
    8d0e:	|  |  |  |     ,----- ble.s 8d14 <loadSpriteBank+0x2dc>
    8d10:	|  |  |  |     |      moveq #2,d0
    8d12:	|  |  |  |     |  ,-- bra.s 8d16 <loadSpriteBank+0x2de>
    8d14:	|  |  |  |     '--|-> clr.w d0
    8d16:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8d1a:	|  |  |  |            movea.l 112(sp),a0
    8d1e:	|  |  |  |            movea.l 8(a0),a0
    8d22:	|  |  |  |            move.l 100(sp),d1
    8d26:	|  |  |  |            move.l d1,d0
    8d28:	|  |  |  |            lsl.l #3,d0
    8d2a:	|  |  |  |            sub.l d1,d0
    8d2c:	|  |  |  |            add.l d0,d0
    8d2e:	|  |  |  |            add.l d0,d0
    8d30:	|  |  |  |            adda.l d0,a0
    8d32:	|  |  |  |            move.l (a0),d0
    8d34:	|  |  |  |            movea.l d0,a0
    8d36:	|  |  |  |            cmpa.w #0,a0
    8d3a:	|  |  |  |        ,-- bge.s 8d40 <loadSpriteBank+0x308>
    8d3c:	|  |  |  |        |   lea 15(a0),a0
    8d40:	|  |  |  |        '-> move.l a0,d0
    8d42:	|  |  |  |            asr.l #4,d0
    8d44:	|  |  |  |            add.l d0,d0
    8d46:	|  |  |  |            move.l d0,d1
    8d48:	|  |  |  |            moveq #0,d0
    8d4a:	|  |  |  |            move.w 58(sp),d0
    8d4e:	|  |  |  |            add.l d1,d0
    8d50:	|  |  |  |            move.l d0,d2
    8d52:	|  |  |  |            movea.l 112(sp),a0
    8d56:	|  |  |  |            movea.l 8(a0),a0
    8d5a:	|  |  |  |            move.l 100(sp),d1
    8d5e:	|  |  |  |            move.l d1,d0
    8d60:	|  |  |  |            lsl.l #3,d0
    8d62:	|  |  |  |            sub.l d1,d0
    8d64:	|  |  |  |            add.l d0,d0
    8d66:	|  |  |  |            add.l d0,d0
    8d68:	|  |  |  |            adda.l d0,a0
    8d6a:	|  |  |  |            move.l 4(a0),d0
    8d6e:	|  |  |  |            move.l d0,d0
    8d70:	|  |  |  |            move.w d2,d1
    8d72:	|  |  |  |            muls.w d0,d1
    8d74:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8d78:	|  |  |  |            cmpi.w #100,98(sp)
    8d7e:	|  |  |  |        ,-- bls.s 8d86 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8d80:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8d86:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8d88:	|  |  |  '----------> moveq #0,d0
    8d8a:	|  |  |               move.w 98(sp),d0
    8d8e:	|  |  |               add.l d0,d0
    8d90:	|  |  |               move.l d0,52(sp)
    8d94:	|  |  |               moveq #2,d0
    8d96:	|  |  |               move.l d0,48(sp)
    8d9a:	|  |  |               move.l 1caf2 <SysBase>,d0
    8da0:	|  |  |               movea.l d0,a6
    8da2:	|  |  |               move.l 52(sp),d0
    8da6:	|  |  |               move.l 48(sp),d1
    8daa:	|  |  |               jsr -684(a6)
    8dae:	|  |  |               move.l d0,44(sp)
    8db2:	|  |  |               movea.l 44(sp),a1
    8db6:	|  |  |               movea.l 112(sp),a0
    8dba:	|  |  |               movea.l 8(a0),a0
    8dbe:	|  |  |               move.l 100(sp),d1
    8dc2:	|  |  |               move.l d1,d0
    8dc4:	|  |  |               lsl.l #3,d0
    8dc6:	|  |  |               sub.l d1,d0
    8dc8:	|  |  |               add.l d0,d0
    8dca:	|  |  |               add.l d0,d0
    8dcc:	|  |  |               adda.l d0,a0
    8dce:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8dd2:	|  |  |               move.l 1cada <bigDataFile>,40(sp)
    8dda:	|  |  |               movea.l 112(sp),a0
    8dde:	|  |  |               movea.l 8(a0),a0
    8de2:	|  |  |               move.l 100(sp),d1
    8de6:	|  |  |               move.l d1,d0
    8de8:	|  |  |               lsl.l #3,d0
    8dea:	|  |  |               sub.l d1,d0
    8dec:	|  |  |               add.l d0,d0
    8dee:	|  |  |               add.l d0,d0
    8df0:	|  |  |               adda.l d0,a0
    8df2:	|  |  |               move.l 24(a0),36(sp)
    8df8:	|  |  |               moveq #2,d1
    8dfa:	|  |  |               move.l d1,32(sp)
    8dfe:	|  |  |               move.w 98(sp),d0
    8e02:	|  |  |               lsr.w #1,d0
    8e04:	|  |  |               move.w d0,d0
    8e06:	|  |  |               andi.l #65535,d0
    8e0c:	|  |  |               move.l d0,28(sp)
    8e10:	|  |  |               move.l 1cafa <DOSBase>,d0
    8e16:	|  |  |               movea.l d0,a6
    8e18:	|  |  |               move.l 40(sp),d1
    8e1c:	|  |  |               move.l 36(sp),d2
    8e20:	|  |  |               move.l 32(sp),d3
    8e24:	|  |  |               move.l 28(sp),d4
    8e28:	|  |  |               jsr -324(a6)
    8e2c:	|  |  |               move.l d0,24(sp)
    8e30:	|  |  |               move.l 24(sp),d0
    8e34:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8e38:	|  |  |           ,-- bne.s 8e4c <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8e3a:	|  |  |           |   pea 191c2 <PutChar+0x147c>
    8e40:	|  |  |           |   jsr 172a4 <KPrintF>
    8e46:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8e48:	|  |  |           |   clr.w d0
    8e4a:	+--|--|-----------|-- bra.s 8e72 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8e4c:	|  |  |           '-> addq.l #1,100(sp)
    8e50:	|  |  '-------------> move.l 100(sp),d0
    8e54:	|  |                  cmp.l 74(sp),d0
    8e58:	|  '----------------- blt.w 8b7c <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8e5c:	|                     jsr 75d0 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8e62:	|                     pea 191f5 <PutChar+0x14af>
    8e68:	|                     jsr 172a4 <KPrintF>
    8e6e:	|                     addq.l #4,sp
	return TRUE;
    8e70:	|                     moveq #1,d0
}
    8e72:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8e76:	                      lea 84(sp),sp
    8e7a:	                      rts

00008e7c <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8e7c:	                   lea -16(sp),sp
    8e80:	                   move.l d2,-(sp)
    8e82:	                   move.l 32(sp),d0
    8e86:	                   move.w d0,d0
    8e88:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8e8c:	                   movea.l 28(sp),a0
    8e90:	                   move.l (a0),d2
    8e92:	                   movea.l 24(sp),a0
    8e96:	                   move.l 8(a0),d0
    8e9a:	                   move.l d0,-(sp)
    8e9c:	                   jsr 176d6 <__floatsisf>
    8ea2:	                   addq.l #4,sp
    8ea4:	                   move.l d0,-(sp)
    8ea6:	                   move.l d2,-(sp)
    8ea8:	                   jsr 179ca <__subsf3>
    8eae:	                   addq.l #8,sp
    8eb0:	                   move.l d0,-(sp)
    8eb2:	                   jsr 1766e <__fixsfsi>
    8eb8:	                   addq.l #4,sp
    8eba:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8ebe:	                   movea.l 28(sp),a0
    8ec2:	                   move.l 4(a0),d2
    8ec6:	                   movea.l 24(sp),a0
    8eca:	                   move.l 12(a0),d0
    8ece:	                   move.l d0,-(sp)
    8ed0:	                   jsr 176d6 <__floatsisf>
    8ed6:	                   addq.l #4,sp
    8ed8:	                   move.l d0,-(sp)
    8eda:	                   move.l d2,-(sp)
    8edc:	                   jsr 179ca <__subsf3>
    8ee2:	                   addq.l #8,sp
    8ee4:	                   move.l d0,-(sp)
    8ee6:	                   jsr 1766e <__fixsfsi>
    8eec:	                   addq.l #4,sp
    8eee:	                   move.w d0,8(sp)

	if( x < 0)
    8ef2:	                   tst.w 18(sp)
    8ef6:	               ,-- bge.s 8f2a <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8ef8:	               |   movea.l 28(sp),a0
    8efc:	               |   move.l (a0),d2
    8efe:	               |   movea.l 24(sp),a0
    8f02:	               |   move.l 8(a0),d0
    8f06:	               |   move.l d0,-(sp)
    8f08:	               |   jsr 176d6 <__floatsisf>
    8f0e:	               |   addq.l #4,sp
    8f10:	               |   move.l d0,-(sp)
    8f12:	               |   move.l d2,-(sp)
    8f14:	               |   jsr 179ca <__subsf3>
    8f1a:	               |   addq.l #8,sp
    8f1c:	               |   move.l d0,-(sp)
    8f1e:	               |   jsr 1766e <__fixsfsi>
    8f24:	               |   addq.l #4,sp
    8f26:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8f2a:	               '-> movea.w 8(sp),a1
    8f2e:	                   movea.w 18(sp),a0
    8f32:	                   pea 1 <_start+0x1>
    8f36:	                   move.l a1,-(sp)
    8f38:	                   move.l a0,-(sp)
    8f3a:	                   move.l 40(sp),-(sp)
    8f3e:	                   move.l 40(sp),-(sp)
    8f42:	                   jsr 2bd4 <CstScaleSprite>
    8f48:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8f4c:	                   movea.l 28(sp),a0
    8f50:	                   move.l 118(a0),d0
    8f54:	                   moveq #8,d1
    8f56:	                   and.l d1,d0
    8f58:	   ,-------------- beq.w 9024 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8f5c:	   |               movea.l 24(sp),a0
    8f60:	   |               move.l 8(a0),d0
    8f64:	   |  ,----------- bpl.s 8fa0 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f66:	   |  |            move.w 18(sp),d0
    8f6a:	   |  |            tst.w 6(sp)
    8f6e:	   |  |     ,----- beq.s 8f88 <scaleSprite+0x10c>
    8f70:	   |  |     |      movea.l 24(sp),a0
    8f74:	   |  |     |      move.l (a0),d1
    8f76:	   |  |     |      move.l d1,d2
    8f78:	   |  |     |      movea.l 24(sp),a0
    8f7c:	   |  |     |      move.l 8(a0),d1
    8f80:	   |  |     |      move.l d1,d1
    8f82:	   |  |     |      movea.w d2,a0
    8f84:	   |  |     |      suba.w d1,a0
    8f86:	   |  |     |  ,-- bra.s 8f96 <scaleSprite+0x11a>
    8f88:	   |  |     '--|-> movea.l 24(sp),a0
    8f8c:	   |  |        |   move.l 8(a0),d1
    8f90:	   |  |        |   move.l d1,d1
    8f92:	   |  |        |   movea.w d1,a0
    8f94:	   |  |        |   addq.w #1,a0
    8f96:	   |  |        '-> move.w d0,d1
    8f98:	   |  |            sub.w a0,d1
    8f9a:	   |  |            move.w d1,16(sp)
    8f9e:	   |  |  ,-------- bra.s 8fd8 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8fa0:	   |  '--|-------> move.w 18(sp),d1
    8fa4:	   |     |         tst.w 6(sp)
    8fa8:	   |     |  ,----- beq.s 8fc6 <scaleSprite+0x14a>
    8faa:	   |     |  |      movea.l 24(sp),a0
    8fae:	   |     |  |      move.l (a0),d0
    8fb0:	   |     |  |      move.l d0,d2
    8fb2:	   |     |  |      movea.l 24(sp),a0
    8fb6:	   |     |  |      move.l 8(a0),d0
    8fba:	   |     |  |      move.l d0,d0
    8fbc:	   |     |  |      movea.w d2,a0
    8fbe:	   |     |  |      suba.w d0,a0
    8fc0:	   |     |  |      move.w a0,d0
    8fc2:	   |     |  |      subq.w #1,d0
    8fc4:	   |     |  |  ,-- bra.s 8fd0 <scaleSprite+0x154>
    8fc6:	   |     |  '--|-> movea.l 24(sp),a0
    8fca:	   |     |     |   move.l 8(a0),d0
    8fce:	   |     |     |   move.l d0,d0
    8fd0:	   |     |     '-> movea.w d1,a0
    8fd2:	   |     |         suba.w d0,a0
    8fd4:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8fd8:	   |     '-------> movea.l 28(sp),a0
    8fdc:	   |               move.l 24(a0),d0
    8fe0:	   |               move.l d0,d1
    8fe2:	   |               movea.l 24(sp),a0
    8fe6:	   |               move.l 12(a0),d0
    8fea:	   |               move.l d0,d0
    8fec:	   |               sub.w d0,d1
    8fee:	   |               move.w 8(sp),d0
    8ff2:	   |               movea.w d1,a0
    8ff4:	   |               adda.w d0,a0
    8ff6:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8ffa:	   |               movea.l 24(sp),a0
    8ffe:	   |               move.l (a0),d0
    9000:	   |               move.l d0,d0
    9002:	   |               move.w 16(sp),d1
    9006:	   |               add.w d0,d1
    9008:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    900c:	   |               movea.l 24(sp),a0
    9010:	   |               move.l 4(a0),d0
    9014:	   |               move.l d0,d0
    9016:	   |               movea.w 14(sp),a0
    901a:	   |               adda.w d0,a0
    901c:	   |               move.w a0,10(sp)
    9020:	,--|-------------- bra.w 910c <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9024:	|  '-------------> move.w 18(sp),d1
    9028:	|                  move.l 1cba8 <cameraX>,d0
    902e:	|                  move.l d0,d0
    9030:	|                  sub.w d0,d1
    9032:	|                  move.w d1,18(sp)
		y -= cameraY;
    9036:	|                  move.w 8(sp),d1
    903a:	|                  move.l 1cbac <cameraY>,d0
    9040:	|                  move.l d0,d0
    9042:	|                  sub.w d0,d1
    9044:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9048:	|                  movea.l 24(sp),a0
    904c:	|                  move.l 8(a0),d0
    9050:	|     ,----------- bpl.s 908c <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9052:	|     |            move.w 18(sp),d0
    9056:	|     |            tst.w 6(sp)
    905a:	|     |     ,----- beq.s 9074 <scaleSprite+0x1f8>
    905c:	|     |     |      movea.l 24(sp),a0
    9060:	|     |     |      move.l (a0),d1
    9062:	|     |     |      move.l d1,d2
    9064:	|     |     |      movea.l 24(sp),a0
    9068:	|     |     |      move.l 8(a0),d1
    906c:	|     |     |      move.l d1,d1
    906e:	|     |     |      movea.w d2,a0
    9070:	|     |     |      suba.w d1,a0
    9072:	|     |     |  ,-- bra.s 9082 <scaleSprite+0x206>
    9074:	|     |     '--|-> movea.l 24(sp),a0
    9078:	|     |        |   move.l 8(a0),d1
    907c:	|     |        |   move.l d1,d1
    907e:	|     |        |   movea.w d1,a0
    9080:	|     |        |   addq.w #1,a0
    9082:	|     |        '-> move.w d0,d1
    9084:	|     |            sub.w a0,d1
    9086:	|     |            move.w d1,16(sp)
    908a:	|     |  ,-------- bra.s 90c4 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    908c:	|     '--|-------> move.w 18(sp),d1
    9090:	|        |         tst.w 6(sp)
    9094:	|        |  ,----- beq.s 90b2 <scaleSprite+0x236>
    9096:	|        |  |      movea.l 24(sp),a0
    909a:	|        |  |      move.l (a0),d0
    909c:	|        |  |      move.l d0,d2
    909e:	|        |  |      movea.l 24(sp),a0
    90a2:	|        |  |      move.l 8(a0),d0
    90a6:	|        |  |      move.l d0,d0
    90a8:	|        |  |      movea.w d2,a0
    90aa:	|        |  |      suba.w d0,a0
    90ac:	|        |  |      move.w a0,d0
    90ae:	|        |  |      subq.w #1,d0
    90b0:	|        |  |  ,-- bra.s 90bc <scaleSprite+0x240>
    90b2:	|        |  '--|-> movea.l 24(sp),a0
    90b6:	|        |     |   move.l 8(a0),d0
    90ba:	|        |     |   move.l d0,d0
    90bc:	|        |     '-> movea.w d1,a0
    90be:	|        |         suba.w d0,a0
    90c0:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90c4:	|        '-------> movea.l 28(sp),a0
    90c8:	|                  move.l 24(a0),d0
    90cc:	|                  move.l d0,d1
    90ce:	|                  movea.l 24(sp),a0
    90d2:	|                  move.l 12(a0),d0
    90d6:	|                  move.l d0,d0
    90d8:	|                  sub.w d0,d1
    90da:	|                  move.w 8(sp),d0
    90de:	|                  movea.w d1,a0
    90e0:	|                  adda.w d0,a0
    90e2:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    90e6:	|                  movea.l 24(sp),a0
    90ea:	|                  move.l (a0),d0
    90ec:	|                  move.l d0,d0
    90ee:	|                  move.w 16(sp),d1
    90f2:	|                  add.w d0,d1
    90f4:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    90f8:	|                  movea.l 24(sp),a0
    90fc:	|                  move.l 4(a0),d0
    9100:	|                  move.l d0,d0
    9102:	|                  movea.w 14(sp),a0
    9106:	|                  adda.w d0,a0
    9108:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    910c:	'----------------> move.l 1caae <input+0xa>,d1
    9112:	                   moveq #0,d0
    9114:	                   move.w 16(sp),d0
    9118:	                   cmp.l d1,d0
    911a:	            ,----- bgt.s 9150 <scaleSprite+0x2d4>
    911c:	            |      move.l 1caae <input+0xa>,d1
    9122:	            |      moveq #0,d0
    9124:	            |      move.w 12(sp),d0
    9128:	            |      cmp.l d1,d0
    912a:	            +----- blt.s 9150 <scaleSprite+0x2d4>
    912c:	            |      move.l 1cab2 <input+0xe>,d1
    9132:	            |      moveq #0,d0
    9134:	            |      move.w 14(sp),d0
    9138:	            |      cmp.l d1,d0
    913a:	            +----- bgt.s 9150 <scaleSprite+0x2d4>
    913c:	            |      move.l 1cab2 <input+0xe>,d1
    9142:	            |      moveq #0,d0
    9144:	            |      move.w 10(sp),d0
    9148:	            |      cmp.l d1,d0
    914a:	            +----- blt.s 9150 <scaleSprite+0x2d4>
		return TRUE;
    914c:	            |      moveq #1,d0
    914e:	            |  ,-- bra.s 9152 <scaleSprite+0x2d6>
	}
	return FALSE;
    9150:	            '--|-> clr.w d0
    9152:	               '-> move.l (sp)+,d2
    9154:	                   lea 16(sp),sp
    9158:	                   rts

0000915a <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    915a:	    move.l 4(sp),d0
    915e:	,-- bpl.s 9162 <TF_abs+0x8>
    9160:	|   neg.l d0
}
    9162:	'-> rts

00009164 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9164:	             lea -28(sp),sp
    9168:	             move.l a6,-(sp)
    916a:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    916c:	             move.l #132,28(sp)
    9174:	             clr.l 24(sp)
    9178:	             move.l 1caf2 <SysBase>,d0
    917e:	             movea.l d0,a6
    9180:	             move.l 28(sp),d0
    9184:	             move.l 24(sp),d1
    9188:	             jsr -684(a6)
    918c:	             move.l d0,20(sp)
    9190:	             move.l 20(sp),d0
    9194:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9198:	         ,-- bne.s 91a0 <addPerson+0x3c>
    919a:	         |   clr.w d0
    919c:	,--------|-- bra.w 93d0 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    91a0:	|        '-> move.l 48(sp),-(sp)
    91a4:	|            jsr d5c8 <loadObjectType>
    91aa:	|            addq.l #4,sp
    91ac:	|            movea.l 16(sp),a0
    91b0:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    91b4:	|            movea.l 16(sp),a0
    91b8:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    91c0:	|            movea.l 16(sp),a0
    91c4:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    91c8:	|            movea.l 16(sp),a0
    91cc:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    91d0:	|            move.l 44(sp),-(sp)
    91d4:	|            jsr 176d6 <__floatsisf>
    91da:	|            addq.l #4,sp
    91dc:	|            move.l d0,d2
    91de:	|            move.l 40(sp),-(sp)
    91e2:	|            jsr 176d6 <__floatsisf>
    91e8:	|            addq.l #4,sp
    91ea:	|            move.l d2,-(sp)
    91ec:	|            move.l d0,-(sp)
    91ee:	|            move.l 24(sp),-(sp)
    91f2:	|            jsr ad14 <moveAndScale>
    91f8:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    91fc:	|            movea.l 16(sp),a0
    9200:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9204:	|            movea.l 16(sp),a0
    9208:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    920e:	|            movea.l 16(sp),a0
    9212:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9218:	|            movea.l 16(sp),a0
    921c:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9220:	|            movea.l 16(sp),a0
    9224:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9228:	|            movea.l 16(sp),a0
    922c:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9232:	|            movea.l 16(sp),a0
    9236:	|            clr.l 106(a0)
    newPerson->angle = 180;
    923a:	|            movea.l 16(sp),a0
    923e:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9246:	|            movea.l 16(sp),a0
    924a:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9252:	|            movea.l 16(sp),a0
    9256:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    925a:	|            movea.l 16(sp),a0
    925e:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9262:	|            movea.l 16(sp),a0
    9266:	|            movea.l 114(a0),a0
    926a:	|            move.l 24(a0),d0
    926e:	|            movea.l 16(sp),a0
    9272:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9276:	|            movea.l 16(sp),a0
    927a:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    927e:	|            movea.l 16(sp),a0
    9282:	|            movea.l 114(a0),a0
    9286:	|            move.l 32(a0),d0
    928a:	|            movea.l 16(sp),a0
    928e:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9292:	|            movea.l 16(sp),a0
    9296:	|            clr.b 126(a0)
    newPerson->g = 0;
    929a:	|            movea.l 16(sp),a0
    929e:	|            clr.b 127(a0)
    newPerson->b = 0;
    92a2:	|            movea.l 16(sp),a0
    92a6:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    92aa:	|            movea.l 16(sp),a0
    92ae:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    92b2:	|            movea.l 16(sp),a0
    92b6:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    92ba:	|            movea.l 16(sp),a0
    92be:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    92c4:	|            clr.l -(sp)
    92c6:	|            move.l 20(sp),-(sp)
    92ca:	|            jsr 4106 <setFrames>
    92d0:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    92d2:	|            movea.l 52(sp),a0
    92d6:	|            movea.l (a0),a0
    92d8:	|            movea.l (a0),a0
    92da:	|            movea.l 4(a0),a0
    92de:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    92e2:	|     ,----- bpl.s 92ec <addPerson+0x188>
    92e4:	|     |      move.l 12(sp),d0
    92e8:	|     |      neg.l d0
    92ea:	|     |  ,-- bra.s 92ee <addPerson+0x18a>
    92ec:	|     '--|-> moveq #1,d0
    92ee:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    92f2:	|            movea.l 52(sp),a0
    92f6:	|            movea.l (a0),a0
    92f8:	|            movea.l (a0),a0
    92fa:	|            movea.l (a0),a0
    92fc:	|            move.l 8(a0),d0
    9300:	|            cmp.l 8(sp),d0
    9304:	|     ,----- bgt.s 9336 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9306:	|     |      tst.l 12(sp)
    930a:	|     |  ,-- bge.s 9318 <addPerson+0x1b4>
            newPerson->height = 5;
    930c:	|     |  |   movea.l 16(sp),a0
    9310:	|     |  |   moveq #5,d0
    9312:	|     |  |   move.l d0,20(a0)
    9316:	|  ,--|--|-- bra.s 9362 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9318:	|  |  |  '-> movea.l 52(sp),a0
    931c:	|  |  |      movea.l (a0),a0
    931e:	|  |  |      movea.l (a0),a0
    9320:	|  |  |      movea.l (a0),a0
    9322:	|  |  |      movea.l 16(a0),a0
    9326:	|  |  |      move.l 12(a0),d0
    932a:	|  |  |      addq.l #5,d0
    932c:	|  |  |      movea.l 16(sp),a0
    9330:	|  |  |      move.l d0,20(a0)
    9334:	|  +--|----- bra.s 9362 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9336:	|  |  '----> movea.l 52(sp),a0
    933a:	|  |         movea.l (a0),a0
    933c:	|  |         movea.l (a0),a0
    933e:	|  |         movea.l (a0),a0
    9340:	|  |         movea.l 16(a0),a0
    9344:	|  |         move.l 8(sp),d1
    9348:	|  |         move.l d1,d0
    934a:	|  |         lsl.l #3,d0
    934c:	|  |         sub.l d1,d0
    934e:	|  |         add.l d0,d0
    9350:	|  |         add.l d0,d0
    9352:	|  |         adda.l d0,a0
    9354:	|  |         move.l 12(a0),d0
    9358:	|  |         addq.l #5,d0
    935a:	|  |         movea.l 16(sp),a0
    935e:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9362:	|  '-------> move.l #117586,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    936a:	|        ,-- bra.s 937a <addPerson+0x216>
        changethat = &((*changethat)->next);
    936c:	|     ,--|-> movea.l 32(sp),a0
    9370:	|     |  |   move.l (a0),d0
    9372:	|     |  |   moveq #36,d1
    9374:	|     |  |   add.l d0,d1
    9376:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    937a:	|     |  '-> movea.l 32(sp),a0
    937e:	|     |      move.l (a0),d0
    9380:	|     |  ,-- beq.s 93a8 <addPerson+0x244>
    9382:	|     |  |   movea.l 32(sp),a0
    9386:	|     |  |   movea.l (a0),a0
    9388:	|     |  |   move.l 4(a0),d2
    938c:	|     |  |   move.l 44(sp),-(sp)
    9390:	|     |  |   jsr 176d6 <__floatsisf>
    9396:	|     |  |   addq.l #4,sp
    9398:	|     |  |   move.l d0,-(sp)
    939a:	|     |  |   move.l d2,-(sp)
    939c:	|     |  |   jsr 178fc <__ltsf2>
    93a2:	|     |  |   addq.l #8,sp
    93a4:	|     |  |   tst.l d0
    93a6:	|     '--|-- blt.s 936c <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    93a8:	|        '-> movea.l 32(sp),a0
    93ac:	|            move.l (a0),d0
    93ae:	|            movea.l 16(sp),a0
    93b2:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    93b6:	|            movea.l 32(sp),a0
    93ba:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    93be:	|            movea.l 16(sp),a0
    93c2:	|            move.l 114(a0),d0
    93c6:	|            sne d0
    93c8:	|            neg.b d0
    93ca:	|            move.b d0,d0
    93cc:	|            andi.w #255,d0
}
    93d0:	'----------> move.l (sp)+,d2
    93d2:	             movea.l (sp)+,a6
    93d4:	             lea 28(sp),sp
    93d8:	             rts

000093da <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    93da:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    93dc:	       move.l 8(sp),-(sp)
    93e0:	       jsr a56a <findPerson>
    93e6:	       addq.l #4,sp
    93e8:	       move.l d0,(sp)
    if (moveMe) {
    93ea:	,----- beq.s 941e <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    93ec:	|      movea.l (sp),a0
    93ee:	|      move.l 68(a0),d0
    93f2:	|  ,-- beq.s 9404 <animatePerson+0x2a>
    93f4:	|  |   movea.l (sp),a0
    93f6:	|  |   move.l 68(a0),d0
    93fa:	|  |   move.l d0,-(sp)
    93fc:	|  |   jsr 4f64 <abortFunction>
    9402:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9404:	|  '-> movea.l (sp),a0
    9406:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    940a:	|      movea.l (sp),a0
    940c:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9410:	|      movea.l (sp),a0
    9412:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9416:	|      movea.l (sp),a0
    9418:	|      move.l 12(sp),72(a0)
    }
}
    941e:	'----> nop
    9420:	       addq.l #4,sp
    9422:	       rts

00009424 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9424:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9426:	       move.l 8(sp),-(sp)
    942a:	       jsr a56a <findPerson>
    9430:	       addq.l #4,sp
    9432:	       move.l d0,(sp)
    if (moveMe) {
    9434:	,----- beq.s 9476 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9436:	|      movea.l (sp),a0
    9438:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    943c:	|      movea.l (sp),a0
    943e:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9444:	|      move.l (sp),-(sp)
    9446:	|      jsr aea2 <rethinkAngle>
    944c:	|      addq.l #4,sp
        if (moveMe->walking) {
    944e:	|      movea.l (sp),a0
    9450:	|      move.w 64(a0),d0
    9454:	|  ,-- beq.s 9468 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9456:	|  |   pea 1 <_start+0x1>
    945a:	|  |   move.l 4(sp),-(sp)
    945e:	|  |   jsr 4106 <setFrames>
    9464:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9466:	+--|-- bra.s 9476 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9468:	|  '-> clr.l -(sp)
    946a:	|      move.l 4(sp),-(sp)
    946e:	|      jsr 4106 <setFrames>
    9474:	|      addq.l #8,sp
}
    9476:	'----> nop
    9478:	       addq.l #4,sp
    947a:	       rts

0000947c <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    947c:	             lea -36(sp),sp
    9480:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9482:	             movea.l 44(sp),a0
    9486:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    948c:	             moveq #12,d0
    948e:	             move.l d0,28(sp)
    9492:	             clr.l 24(sp)
    9496:	             move.l 1caf2 <SysBase>,d0
    949c:	             movea.l d0,a6
    949e:	             move.l 28(sp),d0
    94a2:	             move.l 24(sp),d1
    94a6:	             jsr -684(a6)
    94aa:	             move.l d0,20(sp)
    94ae:	             move.l 20(sp),d0
    94b2:	             move.l d0,16(sp)
	if (!(newAnim)) {
    94b6:	         ,-- bne.s 94cc <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    94b8:	         |   pea 1920f <PutChar+0x14c9>
    94be:	         |   jsr 172a4 <KPrintF>
    94c4:	         |   addq.l #4,sp
		return NULL;
    94c6:	         |   moveq #0,d0
    94c8:	,--------|-- bra.w 961e <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    94cc:	|        '-> movea.l 44(sp),a0
    94d0:	|            move.l (a0),d0
    94d2:	|            movea.l 16(sp),a0
    94d6:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    94d8:	|            movea.l 16(sp),a0
    94dc:	|            movea.l (a0),a0
    94de:	|            move.l 4(a0),d0
    94e2:	|            addq.l #1,d0
    94e4:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    94e8:	|            movea.l 16(sp),a0
    94ec:	|            move.l 32(sp),8(a0)

	if (num) {
    94f2:	|  ,-------- beq.w 9612 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    94f6:	|  |         move.l 32(sp),d1
    94fa:	|  |         move.l d1,d0
    94fc:	|  |         add.l d0,d0
    94fe:	|  |         add.l d1,d0
    9500:	|  |         add.l d0,d0
    9502:	|  |         add.l d0,d0
    9504:	|  |         move.l d0,12(sp)
    9508:	|  |         clr.l 8(sp)
    950c:	|  |         move.l 1caf2 <SysBase>,d0
    9512:	|  |         movea.l d0,a6
    9514:	|  |         move.l 12(sp),d0
    9518:	|  |         move.l 8(sp),d1
    951c:	|  |         jsr -684(a6)
    9520:	|  |         move.l d0,4(sp)
    9524:	|  |         move.l 4(sp),d0
    9528:	|  |         movea.l 16(sp),a0
    952c:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9530:	|  |         movea.l 16(sp),a0
    9534:	|  |         move.l 4(a0),d0
    9538:	|  |     ,-- bne.s 954e <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    953a:	|  |     |   pea 1920f <PutChar+0x14c9>
    9540:	|  |     |   jsr 172a4 <KPrintF>
    9546:	|  |     |   addq.l #4,sp
			return NULL;
    9548:	|  |     |   moveq #0,d0
    954a:	+--|-----|-- bra.w 961e <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    954e:	|  |     '-> clr.l 36(sp)
    9552:	|  |     ,-- bra.w 9604 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9556:	|  |  ,--|-> movea.l 44(sp),a0
    955a:	|  |  |  |   movea.l 4(a0),a0
    955e:	|  |  |  |   move.l 36(sp),d1
    9562:	|  |  |  |   move.l d1,d0
    9564:	|  |  |  |   add.l d0,d0
    9566:	|  |  |  |   add.l d1,d0
    9568:	|  |  |  |   add.l d0,d0
    956a:	|  |  |  |   add.l d0,d0
    956c:	|  |  |  |   lea (0,a0,d0.l),a1
    9570:	|  |  |  |   movea.l 16(sp),a0
    9574:	|  |  |  |   movea.l 4(a0),a0
    9578:	|  |  |  |   move.l 36(sp),d1
    957c:	|  |  |  |   move.l d1,d0
    957e:	|  |  |  |   add.l d0,d0
    9580:	|  |  |  |   add.l d1,d0
    9582:	|  |  |  |   add.l d0,d0
    9584:	|  |  |  |   add.l d0,d0
    9586:	|  |  |  |   adda.l d0,a0
    9588:	|  |  |  |   move.l (a1),d0
    958a:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    958c:	|  |  |  |   movea.l 44(sp),a0
    9590:	|  |  |  |   movea.l 4(a0),a0
    9594:	|  |  |  |   move.l 36(sp),d1
    9598:	|  |  |  |   move.l d1,d0
    959a:	|  |  |  |   add.l d0,d0
    959c:	|  |  |  |   add.l d1,d0
    959e:	|  |  |  |   add.l d0,d0
    95a0:	|  |  |  |   add.l d0,d0
    95a2:	|  |  |  |   lea (0,a0,d0.l),a1
    95a6:	|  |  |  |   movea.l 16(sp),a0
    95aa:	|  |  |  |   movea.l 4(a0),a0
    95ae:	|  |  |  |   move.l 36(sp),d1
    95b2:	|  |  |  |   move.l d1,d0
    95b4:	|  |  |  |   add.l d0,d0
    95b6:	|  |  |  |   add.l d1,d0
    95b8:	|  |  |  |   add.l d0,d0
    95ba:	|  |  |  |   add.l d0,d0
    95bc:	|  |  |  |   adda.l d0,a0
    95be:	|  |  |  |   move.l 4(a1),d0
    95c2:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    95c6:	|  |  |  |   movea.l 44(sp),a0
    95ca:	|  |  |  |   movea.l 4(a0),a0
    95ce:	|  |  |  |   move.l 36(sp),d1
    95d2:	|  |  |  |   move.l d1,d0
    95d4:	|  |  |  |   add.l d0,d0
    95d6:	|  |  |  |   add.l d1,d0
    95d8:	|  |  |  |   add.l d0,d0
    95da:	|  |  |  |   add.l d0,d0
    95dc:	|  |  |  |   lea (0,a0,d0.l),a1
    95e0:	|  |  |  |   movea.l 16(sp),a0
    95e4:	|  |  |  |   movea.l 4(a0),a0
    95e8:	|  |  |  |   move.l 36(sp),d1
    95ec:	|  |  |  |   move.l d1,d0
    95ee:	|  |  |  |   add.l d0,d0
    95f0:	|  |  |  |   add.l d1,d0
    95f2:	|  |  |  |   add.l d0,d0
    95f4:	|  |  |  |   add.l d0,d0
    95f6:	|  |  |  |   adda.l d0,a0
    95f8:	|  |  |  |   move.l 8(a1),d0
    95fc:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9600:	|  |  |  |   addq.l #1,36(sp)
    9604:	|  |  |  '-> move.l 36(sp),d0
    9608:	|  |  |      cmp.l 32(sp),d0
    960c:	|  |  '----- blt.w 9556 <copyAnim+0xda>
    9610:	|  |     ,-- bra.s 961a <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9612:	|  '-----|-> movea.l 16(sp),a0
    9616:	|        |   clr.l 4(a0)
	}

	return newAnim;
    961a:	|        '-> move.l 16(sp),d0
}
    961e:	'----------> movea.l (sp)+,a6
    9620:	             lea 36(sp),sp
    9624:	             rts

00009626 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9626:	                lea -44(sp),sp
    962a:	                move.l a6,-(sp)
    962c:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    962e:	                moveq #12,d0
    9630:	                move.l d0,40(sp)
    9634:	                clr.l 36(sp)
    9638:	                move.l 1caf2 <SysBase>,d0
    963e:	                movea.l d0,a6
    9640:	                move.l 40(sp),d0
    9644:	                move.l 36(sp),d1
    9648:	                jsr -684(a6)
    964c:	                move.l d0,32(sp)
    9650:	                move.l 32(sp),d0
    9654:	                move.l d0,28(sp)
	if( !newP) {
    9658:	            ,-- bne.s 966e <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    965a:	            |   pea 19230 <PutChar+0x14ea>
    9660:	            |   jsr 172a4 <KPrintF>
    9666:	            |   addq.l #4,sp
		return NULL;
    9668:	            |   moveq #0,d0
    966a:	,-----------|-- bra.w 983e <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    966e:	|           '-> movea.l 28(sp),a0
    9672:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9678:	|               move.l 56(sp),d1
    967c:	|               move.l d1,d0
    967e:	|               add.l d0,d0
    9680:	|               add.l d1,d0
    9682:	|               add.l d0,d0
    9684:	|               add.l d0,d0
    9686:	|               move.l d0,24(sp)
    968a:	|               clr.l 20(sp)
    968e:	|               move.l 1caf2 <SysBase>,d0
    9694:	|               movea.l d0,a6
    9696:	|               move.l 24(sp),d0
    969a:	|               move.l 20(sp),d1
    969e:	|               jsr -684(a6)
    96a2:	|               move.l d0,16(sp)
    96a6:	|               move.l 16(sp),d0
    96aa:	|               movea.l 28(sp),a0
    96ae:	|               move.l d0,4(a0)
	if( !newP->frames) {
    96b2:	|               movea.l 28(sp),a0
    96b6:	|               move.l 4(a0),d0
    96ba:	|           ,-- bne.s 96d0 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    96bc:	|           |   pea 19230 <PutChar+0x14ea>
    96c2:	|           |   jsr 172a4 <KPrintF>
    96c8:	|           |   addq.l #4,sp
		return NULL;
    96ca:	|           |   moveq #0,d0
    96cc:	+-----------|-- bra.w 983e <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    96d0:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    96d6:	|               movea.l 60(sp),a0
    96da:	|               move.l (a0),44(sp)
	while (a) {
    96de:	|     ,-------- bra.w 9832 <createPersonaAnim+0x20c>
		a --;
    96e2:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    96e6:	|  |  |         movea.l 28(sp),a0
    96ea:	|  |  |         movea.l 4(a0),a0
    96ee:	|  |  |         move.l 48(sp),d1
    96f2:	|  |  |         move.l d1,d0
    96f4:	|  |  |         add.l d0,d0
    96f6:	|  |  |         add.l d1,d0
    96f8:	|  |  |         add.l d0,d0
    96fa:	|  |  |         add.l d0,d0
    96fc:	|  |  |         adda.l d0,a0
    96fe:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9702:	|  |  |         movea.l 44(sp),a0
    9706:	|  |  |         move.l (a0),d0
    9708:	|  |  |         moveq #5,d1
    970a:	|  |  |         cmp.l d0,d1
    970c:	|  |  |     ,-- bne.s 9738 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    970e:	|  |  |     |   movea.l 28(sp),a0
    9712:	|  |  |     |   movea.l 4(a0),a0
    9716:	|  |  |     |   move.l 48(sp),d1
    971a:	|  |  |     |   move.l d1,d0
    971c:	|  |  |     |   add.l d0,d0
    971e:	|  |  |     |   add.l d1,d0
    9720:	|  |  |     |   add.l d0,d0
    9722:	|  |  |     |   add.l d0,d0
    9724:	|  |  |     |   lea (0,a0,d0.l),a1
    9728:	|  |  |     |   movea.l 44(sp),a0
    972c:	|  |  |     |   move.l 4(a0),d0
    9730:	|  |  |     |   move.l d0,8(a1)
    9734:	|  |  |  ,--|-- bra.w 97e0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9738:	|  |  |  |  '-> movea.l 44(sp),a0
    973c:	|  |  |  |      move.l (a0),d0
    973e:	|  |  |  |      moveq #2,d1
    9740:	|  |  |  |      cmp.l d0,d1
    9742:	|  |  |  |  ,-- bne.s 976e <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9744:	|  |  |  |  |   movea.l 44(sp),a0
    9748:	|  |  |  |  |   move.l 4(a0),d2
    974c:	|  |  |  |  |   movea.l 28(sp),a0
    9750:	|  |  |  |  |   movea.l 4(a0),a0
    9754:	|  |  |  |  |   move.l 48(sp),d1
    9758:	|  |  |  |  |   move.l d1,d0
    975a:	|  |  |  |  |   add.l d0,d0
    975c:	|  |  |  |  |   add.l d1,d0
    975e:	|  |  |  |  |   add.l d0,d0
    9760:	|  |  |  |  |   add.l d0,d0
    9762:	|  |  |  |  |   adda.l d0,a0
    9764:	|  |  |  |  |   move.l d2,d0
    9766:	|  |  |  |  |   neg.l d0
    9768:	|  |  |  |  |   move.l d0,8(a0)
    976c:	|  |  |  +--|-- bra.s 97e0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    976e:	|  |  |  |  '-> movea.l 44(sp),a0
    9772:	|  |  |  |      move.l (a0),d0
    9774:	|  |  |  |      moveq #6,d1
    9776:	|  |  |  |      cmp.l d0,d1
    9778:	|  |  |  |  ,-- bne.s 97c0 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    977a:	|  |  |  |  |   movea.l 44(sp),a0
    977e:	|  |  |  |  |   movea.l 4(a0),a0
    9782:	|  |  |  |  |   move.l (a0),d0
    9784:	|  |  |  |  |   move.l d0,-(sp)
    9786:	|  |  |  |  |   pea 1 <_start+0x1>
    978a:	|  |  |  |  |   lea 20(sp),a0
    978e:	|  |  |  |  |   move.l a0,-(sp)
    9790:	|  |  |  |  |   jsr 147c4 <getValueType>
    9796:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    979a:	|  |  |  |  |   movea.l 44(sp),a0
    979e:	|  |  |  |  |   movea.l 4(a0),a0
    97a2:	|  |  |  |  |   movea.l (a0),a0
    97a4:	|  |  |  |  |   move.l 8(a0),d0
    97a8:	|  |  |  |  |   move.l d0,-(sp)
    97aa:	|  |  |  |  |   pea 1 <_start+0x1>
    97ae:	|  |  |  |  |   lea 16(sp),a0
    97b2:	|  |  |  |  |   move.l a0,-(sp)
    97b4:	|  |  |  |  |   jsr 147c4 <getValueType>
    97ba:	|  |  |  |  |   lea 12(sp),sp
    97be:	|  |  |  +--|-- bra.s 97e0 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    97c0:	|  |  |  |  '-> move.l 44(sp),d0
    97c4:	|  |  |  |      move.l d0,-(sp)
    97c6:	|  |  |  |      pea 1 <_start+0x1>
    97ca:	|  |  |  |      lea 20(sp),a0
    97ce:	|  |  |  |      move.l a0,-(sp)
    97d0:	|  |  |  |      jsr 147c4 <getValueType>
    97d6:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    97da:	|  |  |  |      moveq #1,d0
    97dc:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    97e0:	|  |  |  '----> move.l 60(sp),-(sp)
    97e4:	|  |  |         jsr 15148 <trimStack>
    97ea:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    97ec:	|  |  |         movea.l 28(sp),a0
    97f0:	|  |  |         movea.l 4(a0),a0
    97f4:	|  |  |         move.l 48(sp),d1
    97f8:	|  |  |         move.l d1,d0
    97fa:	|  |  |         add.l d0,d0
    97fc:	|  |  |         add.l d1,d0
    97fe:	|  |  |         add.l d0,d0
    9800:	|  |  |         add.l d0,d0
    9802:	|  |  |         adda.l d0,a0
    9804:	|  |  |         move.l 12(sp),d0
    9808:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    980a:	|  |  |         movea.l 28(sp),a0
    980e:	|  |  |         movea.l 4(a0),a0
    9812:	|  |  |         move.l 48(sp),d1
    9816:	|  |  |         move.l d1,d0
    9818:	|  |  |         add.l d0,d0
    981a:	|  |  |         add.l d1,d0
    981c:	|  |  |         add.l d0,d0
    981e:	|  |  |         add.l d0,d0
    9820:	|  |  |         adda.l d0,a0
    9822:	|  |  |         move.l 8(sp),d0
    9826:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    982a:	|  |  |         movea.l 60(sp),a0
    982e:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9832:	|  |  '-------> tst.l 48(sp)
    9836:	|  '----------- bne.w 96e2 <createPersonaAnim+0xbc>
	}

	return newP;
    983a:	|               move.l 28(sp),d0
}
    983e:	'-------------> move.l (sp)+,d2
    9840:	                movea.l (sp)+,a6
    9842:	                lea 44(sp),sp
    9846:	                rts

00009848 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9848:	       lea -12(sp),sp
    984c:	       move.l a6,-(sp)

	if(orig->theSprites)
    984e:	       movea.l 20(sp),a0
    9852:	       move.l (a0),d0
    9854:	   ,-- beq.s 987e <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9856:	   |   movea.l 20(sp),a0
    985a:	   |   movea.l (a0),a0
    985c:	   |   move.l 4(a0),d0
    9860:	   |   subq.l #1,d0
    9862:	   |   move.l d0,4(a0)
    9866:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    986c:	   +-- bne.s 987e <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    986e:	   |   movea.l 20(sp),a0
    9872:	   |   move.l (a0),d0
    9874:	   |   move.l d0,-(sp)
    9876:	   |   jsr 892c <forgetSpriteBank>
    987c:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    987e:	   '-> tst.l 20(sp)
    9882:	,----- beq.s 98c2 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9884:	|      movea.l 20(sp),a0
    9888:	|      move.l 8(a0),d0
    988c:	|  ,-- beq.s 98a8 <deleteAnim+0x60>
			FreeVec( orig->frames);
    988e:	|  |   movea.l 20(sp),a0
    9892:	|  |   move.l 4(a0),8(sp)
    9898:	|  |   move.l 1caf2 <SysBase>,d0
    989e:	|  |   movea.l d0,a6
    98a0:	|  |   movea.l 8(sp),a1
    98a4:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    98a8:	|  '-> move.l 20(sp),4(sp)
    98ae:	|      move.l 1caf2 <SysBase>,d0
    98b4:	|      movea.l d0,a6
    98b6:	|      movea.l 4(sp),a1
    98ba:	|      jsr -690(a6)
		orig = NULL;
    98be:	|      clr.l 20(sp)
	}	
	
}
    98c2:	'----> nop
    98c4:	       movea.l (sp)+,a6
    98c6:	       lea 12(sp),sp
    98ca:	       rts

000098cc <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    98cc:	          lea -124(sp),sp
    98d0:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    98d4:	          movea.l 152(sp),a0
    98d8:	          move.l 56(a0),d1
    98dc:	          movea.l 152(sp),a0
    98e0:	          move.l 60(a0),d0
    98e4:	          cmp.l d1,d0
    98e6:	      ,-- bne.s 9916 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    98e8:	      |   movea.l 152(sp),a0
    98ec:	      |   moveq #-1,d0
    98ee:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    98f2:	      |   movea.l 152(sp),a0
    98f6:	      |   move.l 40(a0),d0
    98fa:	      |   movea.l 152(sp),a0
    98fe:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9902:	      |   movea.l 152(sp),a0
    9906:	      |   move.l 44(a0),d0
    990a:	      |   movea.l 152(sp),a0
    990e:	      |   move.l d0,52(a0)
    9912:	   ,--|-- bra.w 9e7c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9916:	   |  '-> movea.l 1cc0a <currentFloor>,a0
    991c:	   |      move.l 16(a0),d1
    9920:	   |      movea.l 152(sp),a0
    9924:	   |      move.l 56(a0),d0
    9928:	   |      add.l d0,d0
    992a:	   |      add.l d0,d0
    992c:	   |      movea.l d1,a0
    992e:	   |      adda.l d0,a0
    9930:	   |      move.l (a0),d1
    9932:	   |      movea.l 152(sp),a0
    9936:	   |      move.l 60(a0),d0
    993a:	   |      add.l d0,d0
    993c:	   |      add.l d0,d0
    993e:	   |      movea.l d1,a0
    9940:	   |      adda.l d0,a0
    9942:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9946:	   |      moveq #-1,d0
    9948:	   |      cmp.l 144(sp),d0
    994c:	   |  ,-- bne.s 9954 <doBorderStuff+0x88>
    994e:	   |  |   clr.w d0
    9950:	,--|--|-- bra.w 9f7c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9954:	|  |  '-> movea.l 1cc0a <currentFloor>,a0
    995a:	|  |      move.l 12(a0),d1
    995e:	|  |      move.l 144(sp),d0
    9962:	|  |      lsl.l #3,d0
    9964:	|  |      add.l d0,d1
    9966:	|  |      movea.l 1cc0a <currentFloor>,a0
    996c:	|  |      movea.l 12(a0),a1
    9970:	|  |      movea.l 152(sp),a0
    9974:	|  |      move.l 56(a0),d0
    9978:	|  |      lsl.l #3,d0
    997a:	|  |      add.l a1,d0
    997c:	|  |      lea 40(sp),a0
    9980:	|  |      move.l a0,-(sp)
    9982:	|  |      lea 48(sp),a0
    9986:	|  |      move.l a0,-(sp)
    9988:	|  |      move.l d1,-(sp)
    998a:	|  |      move.l d0,-(sp)
    998c:	|  |      jsr 1650a <getMatchingCorners>
    9992:	|  |      lea 16(sp),sp
    9996:	|  |      tst.w d0
    9998:	|  |  ,-- bne.s 99ae <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    999a:	|  |  |   pea 1925a <PutChar+0x1514>
    99a0:	|  |  |   jsr 172a4 <KPrintF>
    99a6:	|  |  |   addq.l #4,sp
            return FALSE;
    99a8:	|  |  |   clr.w d0
    99aa:	+--|--|-- bra.w 9f7c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    99ae:	|  |  '-> movea.l 152(sp),a0
    99b2:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    99b8:	|  |      movea.l 152(sp),a0
    99bc:	|  |      move.l (a0),d0
    99be:	|  |      move.l d0,-(sp)
    99c0:	|  |      jsr 1766e <__fixsfsi>
    99c6:	|  |      addq.l #4,sp
    99c8:	|  |      move.l d0,140(sp)
    99cc:	|  |      movea.l 152(sp),a0
    99d0:	|  |      move.l 4(a0),d0
    99d4:	|  |      move.l d0,-(sp)
    99d6:	|  |      jsr 1766e <__fixsfsi>
    99dc:	|  |      addq.l #4,sp
    99de:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    99e2:	|  |      movea.l 152(sp),a0
    99e6:	|  |      move.l 40(a0),132(sp)
    99ec:	|  |      movea.l 152(sp),a0
    99f0:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    99f6:	|  |      movea.l 1cc0a <currentFloor>,a0
    99fc:	|  |      move.l 4(a0),d1
    9a00:	|  |      move.l 44(sp),d0
    9a04:	|  |      lsl.l #3,d0
    9a06:	|  |      movea.l d1,a0
    9a08:	|  |      adda.l d0,a0
    9a0a:	|  |      move.l (a0),124(sp)
    9a0e:	|  |      movea.l 1cc0a <currentFloor>,a0
    9a14:	|  |      move.l 4(a0),d1
    9a18:	|  |      move.l 44(sp),d0
    9a1c:	|  |      lsl.l #3,d0
    9a1e:	|  |      movea.l d1,a0
    9a20:	|  |      adda.l d0,a0
    9a22:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9a28:	|  |      movea.l 1cc0a <currentFloor>,a0
    9a2e:	|  |      move.l 4(a0),d1
    9a32:	|  |      move.l 40(sp),d0
    9a36:	|  |      lsl.l #3,d0
    9a38:	|  |      movea.l d1,a0
    9a3a:	|  |      adda.l d0,a0
    9a3c:	|  |      move.l (a0),116(sp)
    9a40:	|  |      movea.l 1cc0a <currentFloor>,a0
    9a46:	|  |      move.l 4(a0),d1
    9a4a:	|  |      move.l 40(sp),d0
    9a4e:	|  |      lsl.l #3,d0
    9a50:	|  |      movea.l d1,a0
    9a52:	|  |      adda.l d0,a0
    9a54:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9a5a:	|  |      move.l 140(sp),d0
    9a5e:	|  |      sub.l 132(sp),d0
    9a62:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9a66:	|  |      move.l 136(sp),d0
    9a6a:	|  |      sub.l 128(sp),d0
    9a6e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9a72:	|  |      move.l 116(sp),d0
    9a76:	|  |      sub.l 124(sp),d0
    9a7a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9a7e:	|  |      move.l 112(sp),d0
    9a82:	|  |      sub.l 120(sp),d0
    9a86:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9a8a:	|  |      move.l 124(sp),d0
    9a8e:	|  |      sub.l 140(sp),d0
    9a92:	|  |      move.l 104(sp),-(sp)
    9a96:	|  |      move.l d0,-(sp)
    9a98:	|  |      jsr 17c30 <__mulsi3>
    9a9e:	|  |      addq.l #8,sp
    9aa0:	|  |      move.l d0,d2
    9aa2:	|  |      move.l 120(sp),d0
    9aa6:	|  |      sub.l 136(sp),d0
    9aaa:	|  |      move.l 108(sp),-(sp)
    9aae:	|  |      move.l d0,-(sp)
    9ab0:	|  |      jsr 17c30 <__mulsi3>
    9ab6:	|  |      addq.l #8,sp
    9ab8:	|  |      move.l d2,d1
    9aba:	|  |      sub.l d0,d1
    9abc:	|  |      move.l d1,-(sp)
    9abe:	|  |      jsr 17696 <__floatsidf>
    9ac4:	|  |      addq.l #4,sp
    9ac6:	|  |      move.l d0,32(sp)
    9aca:	|  |      move.l d1,36(sp)
    9ace:	|  |      move.l 32(sp),88(sp)
    9ad4:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9ada:	|  |      move.l 96(sp),-(sp)
    9ade:	|  |      move.l 112(sp),-(sp)
    9ae2:	|  |      jsr 17c30 <__mulsi3>
    9ae8:	|  |      addq.l #8,sp
    9aea:	|  |      move.l d0,d2
    9aec:	|  |      move.l 100(sp),-(sp)
    9af0:	|  |      move.l 108(sp),-(sp)
    9af4:	|  |      jsr 17c30 <__mulsi3>
    9afa:	|  |      addq.l #8,sp
    9afc:	|  |      move.l d2,d1
    9afe:	|  |      sub.l d0,d1
    9b00:	|  |      move.l d1,-(sp)
    9b02:	|  |      jsr 17696 <__floatsidf>
    9b08:	|  |      addq.l #4,sp
    9b0a:	|  |      move.l d1,-(sp)
    9b0c:	|  |      move.l d0,-(sp)
    9b0e:	|  |      move.l 100(sp),-(sp)
    9b12:	|  |      move.l 100(sp),-(sp)
    9b16:	|  |      jsr 1752a <__divdf3>
    9b1c:	|  |      lea 16(sp),sp
    9b20:	|  |      move.l d0,24(sp)
    9b24:	|  |      move.l d1,28(sp)
    9b28:	|  |      move.l 24(sp),88(sp)
    9b2e:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9b34:	|  |      clr.l -(sp)
    9b36:	|  |      clr.l -(sp)
    9b38:	|  |      move.l 100(sp),-(sp)
    9b3c:	|  |      move.l 100(sp),-(sp)
    9b40:	|  |      jsr 177f4 <__gtdf2>
    9b46:	|  |      lea 16(sp),sp
    9b4a:	|  |      tst.l d0
    9b4c:	|  |  ,-- ble.w 9c24 <doBorderStuff+0x358>
    9b50:	|  |  |   clr.l -(sp)
    9b52:	|  |  |   move.l #1072693248,-(sp)
    9b58:	|  |  |   move.l 100(sp),-(sp)
    9b5c:	|  |  |   move.l 100(sp),-(sp)
    9b60:	|  |  |   jsr 178ae <__ltdf2>
    9b66:	|  |  |   lea 16(sp),sp
    9b6a:	|  |  |   tst.l d0
    9b6c:	|  |  +-- bge.w 9c24 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9b70:	|  |  |   move.l 124(sp),-(sp)
    9b74:	|  |  |   jsr 17696 <__floatsidf>
    9b7a:	|  |  |   addq.l #4,sp
    9b7c:	|  |  |   move.l d0,d2
    9b7e:	|  |  |   move.l d1,d3
    9b80:	|  |  |   move.l 100(sp),-(sp)
    9b84:	|  |  |   jsr 17696 <__floatsidf>
    9b8a:	|  |  |   addq.l #4,sp
    9b8c:	|  |  |   move.l 92(sp),-(sp)
    9b90:	|  |  |   move.l 92(sp),-(sp)
    9b94:	|  |  |   move.l d1,-(sp)
    9b96:	|  |  |   move.l d0,-(sp)
    9b98:	|  |  |   jsr 17726 <__muldf3>
    9b9e:	|  |  |   lea 16(sp),sp
    9ba2:	|  |  |   move.l d1,-(sp)
    9ba4:	|  |  |   move.l d0,-(sp)
    9ba6:	|  |  |   move.l d3,-(sp)
    9ba8:	|  |  |   move.l d2,-(sp)
    9baa:	|  |  |   jsr 174c8 <__adddf3>
    9bb0:	|  |  |   lea 16(sp),sp
    9bb4:	|  |  |   move.l d1,-(sp)
    9bb6:	|  |  |   move.l d0,-(sp)
    9bb8:	|  |  |   jsr 17638 <__fixdfsi>
    9bbe:	|  |  |   addq.l #8,sp
    9bc0:	|  |  |   movea.l 152(sp),a0
    9bc4:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9bc8:	|  |  |   move.l 120(sp),-(sp)
    9bcc:	|  |  |   jsr 17696 <__floatsidf>
    9bd2:	|  |  |   addq.l #4,sp
    9bd4:	|  |  |   move.l d0,d2
    9bd6:	|  |  |   move.l d1,d3
    9bd8:	|  |  |   move.l 96(sp),-(sp)
    9bdc:	|  |  |   jsr 17696 <__floatsidf>
    9be2:	|  |  |   addq.l #4,sp
    9be4:	|  |  |   move.l 92(sp),-(sp)
    9be8:	|  |  |   move.l 92(sp),-(sp)
    9bec:	|  |  |   move.l d1,-(sp)
    9bee:	|  |  |   move.l d0,-(sp)
    9bf0:	|  |  |   jsr 17726 <__muldf3>
    9bf6:	|  |  |   lea 16(sp),sp
    9bfa:	|  |  |   move.l d1,-(sp)
    9bfc:	|  |  |   move.l d0,-(sp)
    9bfe:	|  |  |   move.l d3,-(sp)
    9c00:	|  |  |   move.l d2,-(sp)
    9c02:	|  |  |   jsr 174c8 <__adddf3>
    9c08:	|  |  |   lea 16(sp),sp
    9c0c:	|  |  |   move.l d1,-(sp)
    9c0e:	|  |  |   move.l d0,-(sp)
    9c10:	|  |  |   jsr 17638 <__fixdfsi>
    9c16:	|  |  |   addq.l #8,sp
    9c18:	|  |  |   movea.l 152(sp),a0
    9c1c:	|  |  |   move.l d0,52(a0)
    9c20:	|  +--|-- bra.w 9e7c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9c24:	|  |  '-> move.l 140(sp),d0
    9c28:	|  |      sub.l 124(sp),d0
    9c2c:	|  |      move.l d0,84(sp)
    9c30:	|  |      move.l 140(sp),d0
    9c34:	|  |      sub.l 116(sp),d0
    9c38:	|  |      move.l d0,80(sp)
    9c3c:	|  |      move.l 132(sp),d0
    9c40:	|  |      sub.l 124(sp),d0
    9c44:	|  |      move.l d0,76(sp)
    9c48:	|  |      move.l 132(sp),d0
    9c4c:	|  |      sub.l 116(sp),d0
    9c50:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9c54:	|  |      move.l 136(sp),d0
    9c58:	|  |      sub.l 120(sp),d0
    9c5c:	|  |      move.l d0,68(sp)
    9c60:	|  |      move.l 136(sp),d0
    9c64:	|  |      sub.l 112(sp),d0
    9c68:	|  |      move.l d0,64(sp)
    9c6c:	|  |      move.l 128(sp),d0
    9c70:	|  |      sub.l 120(sp),d0
    9c74:	|  |      move.l d0,60(sp)
    9c78:	|  |      move.l 128(sp),d0
    9c7c:	|  |      sub.l 112(sp),d0
    9c80:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9c84:	|  |      move.l 84(sp),-(sp)
    9c88:	|  |      move.l 88(sp),-(sp)
    9c8c:	|  |      jsr 17c30 <__mulsi3>
    9c92:	|  |      addq.l #8,sp
    9c94:	|  |      move.l d0,84(sp)
    9c98:	|  |      move.l 80(sp),-(sp)
    9c9c:	|  |      move.l 84(sp),-(sp)
    9ca0:	|  |      jsr 17c30 <__mulsi3>
    9ca6:	|  |      addq.l #8,sp
    9ca8:	|  |      move.l d0,80(sp)
    9cac:	|  |      move.l 76(sp),-(sp)
    9cb0:	|  |      move.l 80(sp),-(sp)
    9cb4:	|  |      jsr 17c30 <__mulsi3>
    9cba:	|  |      addq.l #8,sp
    9cbc:	|  |      move.l d0,76(sp)
    9cc0:	|  |      move.l 72(sp),-(sp)
    9cc4:	|  |      move.l 76(sp),-(sp)
    9cc8:	|  |      jsr 17c30 <__mulsi3>
    9cce:	|  |      addq.l #8,sp
    9cd0:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9cd4:	|  |      move.l 68(sp),-(sp)
    9cd8:	|  |      move.l 72(sp),-(sp)
    9cdc:	|  |      jsr 17c30 <__mulsi3>
    9ce2:	|  |      addq.l #8,sp
    9ce4:	|  |      move.l d0,68(sp)
    9ce8:	|  |      move.l 64(sp),-(sp)
    9cec:	|  |      move.l 68(sp),-(sp)
    9cf0:	|  |      jsr 17c30 <__mulsi3>
    9cf6:	|  |      addq.l #8,sp
    9cf8:	|  |      move.l d0,64(sp)
    9cfc:	|  |      move.l 60(sp),-(sp)
    9d00:	|  |      move.l 64(sp),-(sp)
    9d04:	|  |      jsr 17c30 <__mulsi3>
    9d0a:	|  |      addq.l #8,sp
    9d0c:	|  |      move.l d0,60(sp)
    9d10:	|  |      move.l 56(sp),-(sp)
    9d14:	|  |      move.l 60(sp),-(sp)
    9d18:	|  |      jsr 17c30 <__mulsi3>
    9d1e:	|  |      addq.l #8,sp
    9d20:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d24:	|  |      move.l 84(sp),-(sp)
    9d28:	|  |      jsr 17696 <__floatsidf>
    9d2e:	|  |      addq.l #4,sp
    9d30:	|  |      move.l d0,d2
    9d32:	|  |      move.l d1,d3
    9d34:	|  |      move.l 68(sp),-(sp)
    9d38:	|  |      jsr 17696 <__floatsidf>
    9d3e:	|  |      addq.l #4,sp
    9d40:	|  |      move.l d1,-(sp)
    9d42:	|  |      move.l d0,-(sp)
    9d44:	|  |      move.l d3,-(sp)
    9d46:	|  |      move.l d2,-(sp)
    9d48:	|  |      jsr 174c8 <__adddf3>
    9d4e:	|  |      lea 16(sp),sp
    9d52:	|  |      move.l d1,-(sp)
    9d54:	|  |      move.l d0,-(sp)
    9d56:	|  |      jsr 17be6 <sqrt>
    9d5c:	|  |      addq.l #8,sp
    9d5e:	|  |      move.l d0,d2
    9d60:	|  |      move.l d1,d3
    9d62:	|  |      move.l 76(sp),-(sp)
    9d66:	|  |      jsr 17696 <__floatsidf>
    9d6c:	|  |      addq.l #4,sp
    9d6e:	|  |      move.l d0,d4
    9d70:	|  |      move.l d1,d5
    9d72:	|  |      move.l 60(sp),-(sp)
    9d76:	|  |      jsr 17696 <__floatsidf>
    9d7c:	|  |      addq.l #4,sp
    9d7e:	|  |      move.l d1,-(sp)
    9d80:	|  |      move.l d0,-(sp)
    9d82:	|  |      move.l d5,-(sp)
    9d84:	|  |      move.l d4,-(sp)
    9d86:	|  |      jsr 174c8 <__adddf3>
    9d8c:	|  |      lea 16(sp),sp
    9d90:	|  |      move.l d1,-(sp)
    9d92:	|  |      move.l d0,-(sp)
    9d94:	|  |      jsr 17be6 <sqrt>
    9d9a:	|  |      addq.l #8,sp
    9d9c:	|  |      move.l d1,-(sp)
    9d9e:	|  |      move.l d0,-(sp)
    9da0:	|  |      move.l d3,-(sp)
    9da2:	|  |      move.l d2,-(sp)
    9da4:	|  |      jsr 174c8 <__adddf3>
    9daa:	|  |      lea 16(sp),sp
    9dae:	|  |      move.l d0,d2
    9db0:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9db2:	|  |      move.l 80(sp),-(sp)
    9db6:	|  |      jsr 17696 <__floatsidf>
    9dbc:	|  |      addq.l #4,sp
    9dbe:	|  |      move.l d0,d4
    9dc0:	|  |      move.l d1,d5
    9dc2:	|  |      move.l 64(sp),-(sp)
    9dc6:	|  |      jsr 17696 <__floatsidf>
    9dcc:	|  |      addq.l #4,sp
    9dce:	|  |      move.l d1,-(sp)
    9dd0:	|  |      move.l d0,-(sp)
    9dd2:	|  |      move.l d5,-(sp)
    9dd4:	|  |      move.l d4,-(sp)
    9dd6:	|  |      jsr 174c8 <__adddf3>
    9ddc:	|  |      lea 16(sp),sp
    9de0:	|  |      move.l d1,-(sp)
    9de2:	|  |      move.l d0,-(sp)
    9de4:	|  |      jsr 17be6 <sqrt>
    9dea:	|  |      addq.l #8,sp
    9dec:	|  |      move.l d0,d4
    9dee:	|  |      move.l d1,d5
    9df0:	|  |      move.l 72(sp),-(sp)
    9df4:	|  |      jsr 17696 <__floatsidf>
    9dfa:	|  |      addq.l #4,sp
    9dfc:	|  |      move.l d0,d6
    9dfe:	|  |      move.l d1,d7
    9e00:	|  |      move.l 56(sp),-(sp)
    9e04:	|  |      jsr 17696 <__floatsidf>
    9e0a:	|  |      addq.l #4,sp
    9e0c:	|  |      move.l d1,-(sp)
    9e0e:	|  |      move.l d0,-(sp)
    9e10:	|  |      move.l d7,-(sp)
    9e12:	|  |      move.l d6,-(sp)
    9e14:	|  |      jsr 174c8 <__adddf3>
    9e1a:	|  |      lea 16(sp),sp
    9e1e:	|  |      move.l d1,-(sp)
    9e20:	|  |      move.l d0,-(sp)
    9e22:	|  |      jsr 17be6 <sqrt>
    9e28:	|  |      addq.l #8,sp
    9e2a:	|  |      move.l d1,-(sp)
    9e2c:	|  |      move.l d0,-(sp)
    9e2e:	|  |      move.l d5,-(sp)
    9e30:	|  |      move.l d4,-(sp)
    9e32:	|  |      jsr 174c8 <__adddf3>
    9e38:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e3c:	|  |      move.l d1,-(sp)
    9e3e:	|  |      move.l d0,-(sp)
    9e40:	|  |      move.l d3,-(sp)
    9e42:	|  |      move.l d2,-(sp)
    9e44:	|  |      jsr 178ae <__ltdf2>
    9e4a:	|  |      lea 16(sp),sp
    9e4e:	|  |      tst.l d0
    9e50:	|  |  ,-- bge.s 9e68 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9e52:	|  |  |   movea.l 152(sp),a0
    9e56:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9e5c:	|  |  |   movea.l 152(sp),a0
    9e60:	|  |  |   move.l 120(sp),52(a0)
    9e66:	|  +--|-- bra.s 9e7c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9e68:	|  |  '-> movea.l 152(sp),a0
    9e6c:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9e72:	|  |      movea.l 152(sp),a0
    9e76:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9e7c:	|  '----> movea.l 152(sp),a0
    9e80:	|         move.l 52(a0),d0
    9e84:	|         move.l d0,-(sp)
    9e86:	|         jsr 176d6 <__floatsisf>
    9e8c:	|         addq.l #4,sp
    9e8e:	|         move.l d0,d1
    9e90:	|         movea.l 152(sp),a0
    9e94:	|         move.l 4(a0),d0
    9e98:	|         move.l d0,-(sp)
    9e9a:	|         move.l d1,-(sp)
    9e9c:	|         jsr 179ca <__subsf3>
    9ea2:	|         addq.l #8,sp
    9ea4:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9ea8:	|         movea.l 152(sp),a0
    9eac:	|         move.l (a0),d2
    9eae:	|         movea.l 152(sp),a0
    9eb2:	|         move.l 48(a0),d0
    9eb6:	|         move.l d0,-(sp)
    9eb8:	|         jsr 176d6 <__floatsisf>
    9ebe:	|         addq.l #4,sp
    9ec0:	|         move.l d0,-(sp)
    9ec2:	|         move.l d2,-(sp)
    9ec4:	|         jsr 179ca <__subsf3>
    9eca:	|         addq.l #8,sp
    9ecc:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9ed0:	|         clr.l -(sp)
    9ed2:	|         move.l 52(sp),-(sp)
    9ed6:	|         jsr 17932 <__nesf2>
    9edc:	|         addq.l #8,sp
    9ede:	|         tst.l d0
    9ee0:	|     ,-- bne.s 9ef4 <doBorderStuff+0x628>
    9ee2:	|     |   clr.l -(sp)
    9ee4:	|     |   move.l 56(sp),-(sp)
    9ee8:	|     |   jsr 17932 <__nesf2>
    9eee:	|     |   addq.l #8,sp
    9ef0:	|     |   tst.l d0
    9ef2:	|  ,--|-- beq.s 9f6a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9ef4:	|  |  '-> move.l 52(sp),d0
    9ef8:	|  |      move.l d0,-(sp)
    9efa:	|  |      move.l d0,-(sp)
    9efc:	|  |      jsr 17492 <__addsf3>
    9f02:	|  |      addq.l #8,sp
    9f04:	|  |      move.l d0,-(sp)
    9f06:	|  |      move.l 52(sp),-(sp)
    9f0a:	|  |      jsr 17a36 <atan2f>
    9f10:	|  |      addq.l #8,sp
    9f12:	|  |      move.l d0,-(sp)
    9f14:	|  |      jsr 175f8 <__extendsfdf2>
    9f1a:	|  |      addq.l #4,sp
    9f1c:	|  |      move.l #-1540411785,-(sp)
    9f22:	|  |      move.l #1078765033,-(sp)
    9f28:	|  |      move.l d1,-(sp)
    9f2a:	|  |      move.l d0,-(sp)
    9f2c:	|  |      jsr 17726 <__muldf3>
    9f32:	|  |      lea 16(sp),sp
    9f36:	|  |      clr.l -(sp)
    9f38:	|  |      move.l #1080459264,-(sp)
    9f3e:	|  |      move.l d1,-(sp)
    9f40:	|  |      move.l d0,-(sp)
    9f42:	|  |      jsr 174c8 <__adddf3>
    9f48:	|  |      lea 16(sp),sp
    9f4c:	|  |      move.l d1,-(sp)
    9f4e:	|  |      move.l d0,-(sp)
    9f50:	|  |      jsr 17638 <__fixdfsi>
    9f56:	|  |      addq.l #8,sp
    9f58:	|  |      movea.l 152(sp),a0
    9f5c:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9f60:	|  |      movea.l 152(sp),a0
    9f64:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9f6a:	|  '----> pea 1 <_start+0x1>
    9f6e:	|         move.l 156(sp),-(sp)
    9f72:	|         jsr 4106 <setFrames>
    9f78:	|         addq.l #8,sp
    return TRUE;
    9f7a:	|         moveq #1,d0
}
    9f7c:	'-------> movem.l (sp)+,d2-d7
    9f80:	          lea 124(sp),sp
    9f84:	          rts

00009f86 <drawPeople>:

void drawPeople () {
    9f86:	                   lea -24(sp),sp
    9f8a:	                   move.l d2,-(sp)

	shufflePeople ();
    9f8c:	                   jsr ba84 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9f92:	                   move.l 1cb52 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9f9a:	                   clr.l 20(sp)
	overRegion = NULL;
    9f9e:	                   clr.l 1cc02 <overRegion>

	while (thisPerson) {
    9fa4:	   ,-------------- bra.w a556 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9fa8:	,--|-------------> movea.l 24(sp),a0
    9fac:	|  |               move.w 104(a0),d0
    9fb0:	|  |  ,----------- beq.w a30a <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9fb4:	|  |  |            movea.l 24(sp),a0
    9fb8:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9fbe:	|  |  |            movea.l 24(sp),a0
    9fc2:	|  |  |            move.l 76(a0),d0
    9fc6:	|  |  |            cmp.l 20(sp),d0
    9fca:	|  |  |  ,-------- beq.w a198 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9fce:	|  |  |  |         movea.l 24(sp),a0
    9fd2:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9fd6:	|  |  |  |         movea.l 24(sp),a0
    9fda:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9fe0:	|  |  |  |         movea.l 24(sp),a0
    9fe4:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9fe8:	|  |  |  |         movea.l 20(sp),a0
    9fec:	|  |  |  |         movea.l 4(a0),a0
    9ff0:	|  |  |  |         move.l 4(a0),d0
    9ff4:	|  |  |  |         movea.l 24(sp),a0
    9ff8:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9ffc:	|  |  |  |         movea.l 20(sp),a0
    a000:	|  |  |  |         movea.l 4(a0),a1
    a004:	|  |  |  |         movea.l 24(sp),a0
    a008:	|  |  |  |         move.l 84(a0),d0
    a00c:	|  |  |  |         move.l d0,d1
    a00e:	|  |  |  |         move.l d1,d0
    a010:	|  |  |  |         add.l d0,d0
    a012:	|  |  |  |         add.l d1,d0
    a014:	|  |  |  |         add.l d0,d0
    a016:	|  |  |  |         add.l d0,d0
    a018:	|  |  |  |         lea (0,a1,d0.l),a0
    a01c:	|  |  |  |         move.l 8(a0),d0
    a020:	|  |  |  |     ,-- ble.w a0c2 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a024:	|  |  |  |     |   movea.l 20(sp),a0
    a028:	|  |  |  |     |   movea.l 4(a0),a1
    a02c:	|  |  |  |     |   movea.l 24(sp),a0
    a030:	|  |  |  |     |   move.l 84(a0),d0
    a034:	|  |  |  |     |   move.l d0,d1
    a036:	|  |  |  |     |   move.l d1,d0
    a038:	|  |  |  |     |   add.l d0,d0
    a03a:	|  |  |  |     |   add.l d1,d0
    a03c:	|  |  |  |     |   add.l d0,d0
    a03e:	|  |  |  |     |   add.l d0,d0
    a040:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a044:	|  |  |  |     |   move.l 8(a0),d0
    a048:	|  |  |  |     |   clr.l -(sp)
    a04a:	|  |  |  |     |   move.l d0,-(sp)
    a04c:	|  |  |  |     |   jsr d198 <startSound>
    a052:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a054:	|  |  |  |     |   movea.l 24(sp),a0
    a058:	|  |  |  |     |   move.l 84(a0),d0
    a05c:	|  |  |  |     |   addq.l #1,d0
    a05e:	|  |  |  |     |   movea.l 24(sp),a0
    a062:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a066:	|  |  |  |     |   movea.l 24(sp),a0
    a06a:	|  |  |  |     |   move.l 84(a0),d0
    a06e:	|  |  |  |     |   movea.l 24(sp),a0
    a072:	|  |  |  |     |   movea.l 72(a0),a0
    a076:	|  |  |  |     |   move.l 8(a0),d1
    a07a:	|  |  |  |     |   move.l d1,-(sp)
    a07c:	|  |  |  |     |   move.l d0,-(sp)
    a07e:	|  |  |  |     |   jsr 17cdc <__modsi3>
    a084:	|  |  |  |     |   addq.l #8,sp
    a086:	|  |  |  |     |   movea.l 24(sp),a0
    a08a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a08e:	|  |  |  |     |   movea.l 24(sp),a0
    a092:	|  |  |  |     |   movea.l 72(a0),a0
    a096:	|  |  |  |     |   movea.l 4(a0),a1
    a09a:	|  |  |  |     |   movea.l 24(sp),a0
    a09e:	|  |  |  |     |   move.l 84(a0),d0
    a0a2:	|  |  |  |     |   move.l d0,d1
    a0a4:	|  |  |  |     |   move.l d1,d0
    a0a6:	|  |  |  |     |   add.l d0,d0
    a0a8:	|  |  |  |     |   add.l d1,d0
    a0aa:	|  |  |  |     |   add.l d0,d0
    a0ac:	|  |  |  |     |   add.l d0,d0
    a0ae:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a0b2:	|  |  |  |     |   move.l 4(a0),d0
    a0b6:	|  |  |  |     |   movea.l 24(sp),a0
    a0ba:	|  |  |  |     |   move.l d0,88(a0)
    a0be:	|  |  |  |  ,--|-- bra.w a200 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a0c2:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a0c6:	|  |  |  |  |      movea.l 4(a0),a1
    a0ca:	|  |  |  |  |      movea.l 24(sp),a0
    a0ce:	|  |  |  |  |      move.l 84(a0),d0
    a0d2:	|  |  |  |  |      move.l d0,d1
    a0d4:	|  |  |  |  |      move.l d1,d0
    a0d6:	|  |  |  |  |      add.l d0,d0
    a0d8:	|  |  |  |  |      add.l d1,d0
    a0da:	|  |  |  |  |      add.l d0,d0
    a0dc:	|  |  |  |  |      add.l d0,d0
    a0de:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a0e2:	|  |  |  |  |      move.l 8(a0),d0
    a0e6:	|  |  |  |  +----- beq.w a200 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a0ea:	|  |  |  |  |      movea.l 1cac2 <noStack>,a1
    a0f0:	|  |  |  |  |      movea.l 20(sp),a0
    a0f4:	|  |  |  |  |      move.l 4(a0),d2
    a0f8:	|  |  |  |  |      movea.l 24(sp),a0
    a0fc:	|  |  |  |  |      move.l 84(a0),d0
    a100:	|  |  |  |  |      move.l d0,d1
    a102:	|  |  |  |  |      move.l d1,d0
    a104:	|  |  |  |  |      add.l d0,d0
    a106:	|  |  |  |  |      add.l d1,d0
    a108:	|  |  |  |  |      add.l d0,d0
    a10a:	|  |  |  |  |      add.l d0,d0
    a10c:	|  |  |  |  |      movea.l d2,a0
    a10e:	|  |  |  |  |      adda.l d0,a0
    a110:	|  |  |  |  |      move.l 8(a0),d0
    a114:	|  |  |  |  |      neg.l d0
    a116:	|  |  |  |  |      pea 1 <_start+0x1>
    a11a:	|  |  |  |  |      move.l a1,-(sp)
    a11c:	|  |  |  |  |      clr.l -(sp)
    a11e:	|  |  |  |  |      clr.l -(sp)
    a120:	|  |  |  |  |      move.l d0,-(sp)
    a122:	|  |  |  |  |      jsr 7432 <startNewFunctionNum>
    a128:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a12c:	|  |  |  |  |      movea.l 24(sp),a0
    a130:	|  |  |  |  |      move.l 84(a0),d0
    a134:	|  |  |  |  |      addq.l #1,d0
    a136:	|  |  |  |  |      movea.l 24(sp),a0
    a13a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a13e:	|  |  |  |  |      movea.l 24(sp),a0
    a142:	|  |  |  |  |      move.l 84(a0),d0
    a146:	|  |  |  |  |      movea.l 24(sp),a0
    a14a:	|  |  |  |  |      movea.l 72(a0),a0
    a14e:	|  |  |  |  |      move.l 8(a0),d1
    a152:	|  |  |  |  |      move.l d1,-(sp)
    a154:	|  |  |  |  |      move.l d0,-(sp)
    a156:	|  |  |  |  |      jsr 17cdc <__modsi3>
    a15c:	|  |  |  |  |      addq.l #8,sp
    a15e:	|  |  |  |  |      movea.l 24(sp),a0
    a162:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a166:	|  |  |  |  |      movea.l 24(sp),a0
    a16a:	|  |  |  |  |      movea.l 72(a0),a0
    a16e:	|  |  |  |  |      movea.l 4(a0),a1
    a172:	|  |  |  |  |      movea.l 24(sp),a0
    a176:	|  |  |  |  |      move.l 84(a0),d0
    a17a:	|  |  |  |  |      move.l d0,d1
    a17c:	|  |  |  |  |      move.l d1,d0
    a17e:	|  |  |  |  |      add.l d0,d0
    a180:	|  |  |  |  |      add.l d1,d0
    a182:	|  |  |  |  |      add.l d0,d0
    a184:	|  |  |  |  |      add.l d0,d0
    a186:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a18a:	|  |  |  |  |      move.l 4(a0),d0
    a18e:	|  |  |  |  |      movea.l 24(sp),a0
    a192:	|  |  |  |  |      move.l d0,88(a0)
    a196:	|  |  |  |  +----- bra.s a200 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a198:	|  |  |  '--|----> movea.l 24(sp),a0
    a19c:	|  |  |     |      move.l (a0),d0
    a19e:	|  |  |     |      movea.l 24(sp),a0
    a1a2:	|  |  |     |      move.l 8(a0),d1
    a1a6:	|  |  |     |      move.l d1,-(sp)
    a1a8:	|  |  |     |      move.l d0,-(sp)
    a1aa:	|  |  |     |      jsr 175c2 <__eqsf2>
    a1b0:	|  |  |     |      addq.l #8,sp
    a1b2:	|  |  |     |      tst.l d0
    a1b4:	|  |  |     |  ,-- bne.s a1f8 <drawPeople+0x272>
    a1b6:	|  |  |     |  |   movea.l 24(sp),a0
    a1ba:	|  |  |     |  |   move.l 4(a0),d0
    a1be:	|  |  |     |  |   movea.l 24(sp),a0
    a1c2:	|  |  |     |  |   move.l 12(a0),d1
    a1c6:	|  |  |     |  |   move.l d1,-(sp)
    a1c8:	|  |  |     |  |   move.l d0,-(sp)
    a1ca:	|  |  |     |  |   jsr 175c2 <__eqsf2>
    a1d0:	|  |  |     |  |   addq.l #8,sp
    a1d2:	|  |  |     |  |   tst.l d0
    a1d4:	|  |  |     |  +-- bne.s a1f8 <drawPeople+0x272>
    a1d6:	|  |  |     |  |   movea.l 20(sp),a0
    a1da:	|  |  |     |  |   move.l 8(a0),d0
    a1de:	|  |  |     |  |   moveq #1,d1
    a1e0:	|  |  |     |  |   cmp.l d0,d1
    a1e2:	|  |  |     |  +-- bne.s a1f8 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a1e4:	|  |  |     |  |   movea.l 24(sp),a0
    a1e8:	|  |  |     |  |   move.l 16(a0),d0
    a1ec:	|  |  |     |  |   addq.l #1,d0
    a1ee:	|  |  |     |  |   movea.l 24(sp),a0
    a1f2:	|  |  |     |  |   move.l d0,16(a0)
    a1f6:	|  |  |     +--|-- bra.s a200 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a1f8:	|  |  |     |  '-> movea.l 24(sp),a0
    a1fc:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a200:	|  |  |     '----> movea.l 24(sp),a0
    a204:	|  |  |            move.l (a0),d0
    a206:	|  |  |            movea.l 24(sp),a0
    a20a:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a20e:	|  |  |            movea.l 24(sp),a0
    a212:	|  |  |            move.l 4(a0),d0
    a216:	|  |  |            movea.l 24(sp),a0
    a21a:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a21e:	|  |  |            movea.l 20(sp),a0
    a222:	|  |  |            movea.l 4(a0),a1
    a226:	|  |  |            movea.l 24(sp),a0
    a22a:	|  |  |            move.l 84(a0),d0
    a22e:	|  |  |            move.l d0,d1
    a230:	|  |  |            move.l d1,d0
    a232:	|  |  |            add.l d0,d0
    a234:	|  |  |            add.l d1,d0
    a236:	|  |  |            add.l d0,d0
    a238:	|  |  |            add.l d0,d0
    a23a:	|  |  |            lea (0,a1,d0.l),a0
    a23e:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a242:	|  |  |            move.l 8(sp),d0
    a246:	|  |  |            add.l d0,d0
    a248:	|  |  |            subx.l d0,d0
    a24a:	|  |  |            neg.l d0
    a24c:	|  |  |            move.b d0,d0
    a24e:	|  |  |            move.b d0,d0
    a250:	|  |  |            andi.l #255,d0
    a256:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a25a:	|  |  |            move.l 8(sp),-(sp)
    a25e:	|  |  |            jsr 915a <TF_abs>
    a264:	|  |  |            addq.l #4,sp
    a266:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a26a:	|  |  |            movea.l 20(sp),a0
    a26e:	|  |  |            movea.l (a0),a0
    a270:	|  |  |            move.l 8(a0),d0
    a274:	|  |  |            cmp.l 12(sp),d0
    a278:	|  |  |        ,-- bgt.s a288 <drawPeople+0x302>
				fNum = 0;
    a27a:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a27e:	|  |  |        |   moveq #2,d0
    a280:	|  |  |        |   sub.l 16(sp),d0
    a284:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a288:	|  |  |        '-> moveq #2,d1
    a28a:	|  |  |            cmp.l 16(sp),d1
    a28e:	|  |  +----------- beq.s a30a <drawPeople+0x384>
				BOOL r = FALSE;
    a290:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a294:	|  |  |            move.l 16(sp),d0
    a298:	|  |  |            movea.w d0,a0
    a29a:	|  |  |            movea.l 20(sp),a1
    a29e:	|  |  |            movea.l (a1),a1
    a2a0:	|  |  |            movea.l 16(a1),a1
    a2a4:	|  |  |            move.l 12(sp),d1
    a2a8:	|  |  |            move.l d1,d0
    a2aa:	|  |  |            lsl.l #3,d0
    a2ac:	|  |  |            sub.l d1,d0
    a2ae:	|  |  |            add.l d0,d0
    a2b0:	|  |  |            add.l d0,d0
    a2b2:	|  |  |            add.l a1,d0
    a2b4:	|  |  |            move.l a0,-(sp)
    a2b6:	|  |  |            move.l 28(sp),-(sp)
    a2ba:	|  |  |            move.l d0,-(sp)
    a2bc:	|  |  |            jsr 8e7c <scaleSprite>
    a2c2:	|  |  |            lea 12(sp),sp
    a2c6:	|  |  |            move.w d0,6(sp)
				if (r) {
    a2ca:	|  |  +----------- beq.s a30a <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a2cc:	|  |  |            movea.l 24(sp),a0
    a2d0:	|  |  |            movea.l 114(a0),a0
    a2d4:	|  |  |            movea.l (a0),a0
    a2d6:	|  |  |            move.b (a0),d0
    a2d8:	|  |  +----------- beq.s a30a <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a2da:	|  |  |            move.l 1cb72 <personRegion+0x1c>,d1
    a2e0:	|  |  |            movea.l 24(sp),a0
    a2e4:	|  |  |            move.l 114(a0),d0
    a2e8:	|  |  |            cmp.l d1,d0
    a2ea:	|  |  |        ,-- beq.s a2f2 <drawPeople+0x36c>
    a2ec:	|  |  |        |   clr.l 1caba <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a2f2:	|  |  |        '-> movea.l 24(sp),a0
    a2f6:	|  |  |            move.l 114(a0),d0
    a2fa:	|  |  |            move.l d0,1cb72 <personRegion+0x1c>
						overRegion = & personRegion;
    a300:	|  |  |            move.l #117590,1cc02 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a30a:	|  |  '----------> movea.l 24(sp),a0
    a30e:	|  |               move.l 88(a0),d0
    a312:	|  |               subq.l #1,d0
    a314:	|  |               movea.l 24(sp),a0
    a318:	|  |               move.l d0,88(a0)
    a31c:	|  |               movea.l 24(sp),a0
    a320:	|  |               move.l 88(a0),d0
    a324:	|  |        ,----- bne.w a54c <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a328:	|  |        |      movea.l 24(sp),a0
    a32c:	|  |        |      move.l 84(a0),d0
    a330:	|  |        |      addq.l #1,d0
    a332:	|  |        |      movea.l 24(sp),a0
    a336:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a33a:	|  |        |      movea.l 24(sp),a0
    a33e:	|  |        |      move.l 84(a0),d0
    a342:	|  |        |      movea.l 24(sp),a0
    a346:	|  |        |      movea.l 72(a0),a0
    a34a:	|  |        |      move.l 8(a0),d1
    a34e:	|  |        |      move.l d1,-(sp)
    a350:	|  |        |      move.l d0,-(sp)
    a352:	|  |        |      jsr 17cdc <__modsi3>
    a358:	|  |        |      addq.l #8,sp
    a35a:	|  |        |      movea.l 24(sp),a0
    a35e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a362:	|  |        |      movea.l 24(sp),a0
    a366:	|  |        |      movea.l 72(a0),a0
    a36a:	|  |        |      movea.l 4(a0),a1
    a36e:	|  |        |      movea.l 24(sp),a0
    a372:	|  |        |      move.l 84(a0),d0
    a376:	|  |        |      move.l d0,d1
    a378:	|  |        |      move.l d1,d0
    a37a:	|  |        |      add.l d0,d0
    a37c:	|  |        |      add.l d1,d0
    a37e:	|  |        |      add.l d0,d0
    a380:	|  |        |      add.l d0,d0
    a382:	|  |        |      lea (0,a1,d0.l),a0
    a386:	|  |        |      move.l 4(a0),d0
    a38a:	|  |        |      movea.l 24(sp),a0
    a38e:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a392:	|  |        |      movea.l 24(sp),a0
    a396:	|  |        |      move.w 104(a0),d0
    a39a:	|  |        +----- beq.w a54c <drawPeople+0x5c6>
    a39e:	|  |        |      tst.l 20(sp)
    a3a2:	|  |        +----- beq.w a54c <drawPeople+0x5c6>
    a3a6:	|  |        |      movea.l 20(sp),a0
    a3aa:	|  |        |      move.l 4(a0),d0
    a3ae:	|  |        +----- beq.w a54c <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a3b2:	|  |        |      movea.l 20(sp),a0
    a3b6:	|  |        |      movea.l 4(a0),a1
    a3ba:	|  |        |      movea.l 24(sp),a0
    a3be:	|  |        |      move.l 84(a0),d0
    a3c2:	|  |        |      move.l d0,d1
    a3c4:	|  |        |      move.l d1,d0
    a3c6:	|  |        |      add.l d0,d0
    a3c8:	|  |        |      add.l d1,d0
    a3ca:	|  |        |      add.l d0,d0
    a3cc:	|  |        |      add.l d0,d0
    a3ce:	|  |        |      lea (0,a1,d0.l),a0
    a3d2:	|  |        |      move.l 8(a0),d0
    a3d6:	|  |        |  ,-- ble.w a478 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a3da:	|  |        |  |   movea.l 20(sp),a0
    a3de:	|  |        |  |   movea.l 4(a0),a1
    a3e2:	|  |        |  |   movea.l 24(sp),a0
    a3e6:	|  |        |  |   move.l 84(a0),d0
    a3ea:	|  |        |  |   move.l d0,d1
    a3ec:	|  |        |  |   move.l d1,d0
    a3ee:	|  |        |  |   add.l d0,d0
    a3f0:	|  |        |  |   add.l d1,d0
    a3f2:	|  |        |  |   add.l d0,d0
    a3f4:	|  |        |  |   add.l d0,d0
    a3f6:	|  |        |  |   lea (0,a1,d0.l),a0
    a3fa:	|  |        |  |   move.l 8(a0),d0
    a3fe:	|  |        |  |   clr.l -(sp)
    a400:	|  |        |  |   move.l d0,-(sp)
    a402:	|  |        |  |   jsr d198 <startSound>
    a408:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a40a:	|  |        |  |   movea.l 24(sp),a0
    a40e:	|  |        |  |   move.l 84(a0),d0
    a412:	|  |        |  |   addq.l #1,d0
    a414:	|  |        |  |   movea.l 24(sp),a0
    a418:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a41c:	|  |        |  |   movea.l 24(sp),a0
    a420:	|  |        |  |   move.l 84(a0),d0
    a424:	|  |        |  |   movea.l 24(sp),a0
    a428:	|  |        |  |   movea.l 72(a0),a0
    a42c:	|  |        |  |   move.l 8(a0),d1
    a430:	|  |        |  |   move.l d1,-(sp)
    a432:	|  |        |  |   move.l d0,-(sp)
    a434:	|  |        |  |   jsr 17cdc <__modsi3>
    a43a:	|  |        |  |   addq.l #8,sp
    a43c:	|  |        |  |   movea.l 24(sp),a0
    a440:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a444:	|  |        |  |   movea.l 24(sp),a0
    a448:	|  |        |  |   movea.l 72(a0),a0
    a44c:	|  |        |  |   movea.l 4(a0),a1
    a450:	|  |        |  |   movea.l 24(sp),a0
    a454:	|  |        |  |   move.l 84(a0),d0
    a458:	|  |        |  |   move.l d0,d1
    a45a:	|  |        |  |   move.l d1,d0
    a45c:	|  |        |  |   add.l d0,d0
    a45e:	|  |        |  |   add.l d1,d0
    a460:	|  |        |  |   add.l d0,d0
    a462:	|  |        |  |   add.l d0,d0
    a464:	|  |        |  |   lea (0,a1,d0.l),a0
    a468:	|  |        |  |   move.l 4(a0),d0
    a46c:	|  |        |  |   movea.l 24(sp),a0
    a470:	|  |        |  |   move.l d0,88(a0)
    a474:	|  |        +--|-- bra.w a54c <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a478:	|  |        |  '-> movea.l 20(sp),a0
    a47c:	|  |        |      movea.l 4(a0),a1
    a480:	|  |        |      movea.l 24(sp),a0
    a484:	|  |        |      move.l 84(a0),d0
    a488:	|  |        |      move.l d0,d1
    a48a:	|  |        |      move.l d1,d0
    a48c:	|  |        |      add.l d0,d0
    a48e:	|  |        |      add.l d1,d0
    a490:	|  |        |      add.l d0,d0
    a492:	|  |        |      add.l d0,d0
    a494:	|  |        |      lea (0,a1,d0.l),a0
    a498:	|  |        |      move.l 8(a0),d0
    a49c:	|  |        +----- beq.w a54c <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a4a0:	|  |        |      movea.l 1cac2 <noStack>,a1
    a4a6:	|  |        |      movea.l 20(sp),a0
    a4aa:	|  |        |      move.l 4(a0),d2
    a4ae:	|  |        |      movea.l 24(sp),a0
    a4b2:	|  |        |      move.l 84(a0),d0
    a4b6:	|  |        |      move.l d0,d1
    a4b8:	|  |        |      move.l d1,d0
    a4ba:	|  |        |      add.l d0,d0
    a4bc:	|  |        |      add.l d1,d0
    a4be:	|  |        |      add.l d0,d0
    a4c0:	|  |        |      add.l d0,d0
    a4c2:	|  |        |      movea.l d2,a0
    a4c4:	|  |        |      adda.l d0,a0
    a4c6:	|  |        |      move.l 8(a0),d0
    a4ca:	|  |        |      neg.l d0
    a4cc:	|  |        |      pea 1 <_start+0x1>
    a4d0:	|  |        |      move.l a1,-(sp)
    a4d2:	|  |        |      clr.l -(sp)
    a4d4:	|  |        |      clr.l -(sp)
    a4d6:	|  |        |      move.l d0,-(sp)
    a4d8:	|  |        |      jsr 7432 <startNewFunctionNum>
    a4de:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a4e2:	|  |        |      movea.l 24(sp),a0
    a4e6:	|  |        |      move.l 84(a0),d0
    a4ea:	|  |        |      addq.l #1,d0
    a4ec:	|  |        |      movea.l 24(sp),a0
    a4f0:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4f4:	|  |        |      movea.l 24(sp),a0
    a4f8:	|  |        |      move.l 84(a0),d0
    a4fc:	|  |        |      movea.l 24(sp),a0
    a500:	|  |        |      movea.l 72(a0),a0
    a504:	|  |        |      move.l 8(a0),d1
    a508:	|  |        |      move.l d1,-(sp)
    a50a:	|  |        |      move.l d0,-(sp)
    a50c:	|  |        |      jsr 17cdc <__modsi3>
    a512:	|  |        |      addq.l #8,sp
    a514:	|  |        |      movea.l 24(sp),a0
    a518:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a51c:	|  |        |      movea.l 24(sp),a0
    a520:	|  |        |      movea.l 72(a0),a0
    a524:	|  |        |      movea.l 4(a0),a1
    a528:	|  |        |      movea.l 24(sp),a0
    a52c:	|  |        |      move.l 84(a0),d0
    a530:	|  |        |      move.l d0,d1
    a532:	|  |        |      move.l d1,d0
    a534:	|  |        |      add.l d0,d0
    a536:	|  |        |      add.l d1,d0
    a538:	|  |        |      add.l d0,d0
    a53a:	|  |        |      add.l d0,d0
    a53c:	|  |        |      lea (0,a1,d0.l),a0
    a540:	|  |        |      move.l 4(a0),d0
    a544:	|  |        |      movea.l 24(sp),a0
    a548:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a54c:	|  |        '----> movea.l 24(sp),a0
    a550:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a556:	|  '-------------> tst.l 24(sp)
    a55a:	'----------------- bne.w 9fa8 <drawPeople+0x22>
	}
}
    a55e:	                   nop
    a560:	                   nop
    a562:	                   move.l (sp)+,d2
    a564:	                   lea 24(sp),sp
    a568:	                   rts

0000a56a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a56a:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a56c:	          pea 19272 <PutChar+0x152c>
    a572:	          jsr 172a4 <KPrintF>
    a578:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a57a:	          move.l 1cb52 <allPeople>,(sp)
	while (thisPerson) {
    a580:	      ,-- bra.s a598 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a582:	,-----|-> movea.l (sp),a0
    a584:	|     |   movea.l 114(a0),a0
    a588:	|     |   move.l 4(a0),d0
    a58c:	|     |   cmp.l 8(sp),d0
    a590:	|  ,--|-- beq.s a59e <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a592:	|  |  |   movea.l (sp),a0
    a594:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a598:	|  |  '-> tst.l (sp)
    a59a:	'--|----- bne.s a582 <findPerson+0x18>
    a59c:	   |  ,-- bra.s a5a0 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a59e:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a5a0:	      '-> pea 19286 <PutChar+0x1540>
    a5a6:	          jsr 172a4 <KPrintF>
    a5ac:	          addq.l #4,sp
	return thisPerson;
    a5ae:	          move.l (sp),d0
}
    a5b0:	          addq.l #4,sp
    a5b2:	          rts

0000a5b4 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a5b4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a5b6:	       move.l 12(sp),-(sp)
    a5ba:	       jsr a56a <findPerson>
    a5c0:	       addq.l #4,sp
    a5c2:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a5c4:	   ,-- bne.s a5ca <floatCharacter+0x16>
    a5c6:	   |   clr.w d0
    a5c8:	,--|-- bra.s a5d4 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a5ca:	|  '-> movea.l (sp),a0
    a5cc:	|      move.l 8(sp),24(a0)
	return TRUE;
    a5d2:	|      moveq #1,d0
}
    a5d4:	'----> addq.l #4,sp
    a5d6:	       rts

0000a5d8 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a5d8:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a5da:	          tst.l 8(sp)
    a5de:	      ,-- bne.s a5ec <forceWalkingPerson+0x14>
    a5e0:	      |   tst.l 12(sp)
    a5e4:	      +-- bne.s a5ec <forceWalkingPerson+0x14>
    a5e6:	      |   clr.w d0
    a5e8:	,-----|-- bra.w a67e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a5ec:	|     '-> move.l 16(sp),-(sp)
    a5f0:	|         jsr a56a <findPerson>
    a5f6:	|         addq.l #4,sp
    a5f8:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a5fa:	|     ,-- bne.s a600 <forceWalkingPerson+0x28>
    a5fc:	|     |   clr.w d0
    a5fe:	+-----|-- bra.s a67e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a600:	|     '-> movea.l (sp),a0
    a602:	|         move.l 68(a0),d0
    a606:	|     ,-- beq.s a618 <forceWalkingPerson+0x40>
    a608:	|     |   movea.l (sp),a0
    a60a:	|     |   move.l 68(a0),d0
    a60e:	|     |   move.l d0,-(sp)
    a610:	|     |   jsr 4f64 <abortFunction>
    a616:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a618:	|     '-> movea.l (sp),a0
    a61a:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a620:	|         movea.l (sp),a0
    a622:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a626:	|         movea.l (sp),a0
    a628:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a62e:	|         movea.l (sp),a0
    a630:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a636:	|         movea.l (sp),a0
    a638:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a63e:	|         movea.l (sp),a0
    a640:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a644:	|         movea.l (sp),a0
    a646:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a64a:	|         move.l (sp),-(sp)
    a64c:	|         jsr 98cc <doBorderStuff>
    a652:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a654:	|         pea 1 <_start+0x1>
    a658:	|         move.l 4(sp),-(sp)
    a65c:	|         jsr bf12 <walkMe>
    a662:	|         addq.l #8,sp
    a664:	|         tst.w d0
    a666:	|     ,-- bne.s a670 <forceWalkingPerson+0x98>
    a668:	|     |   movea.l (sp),a0
    a66a:	|     |   move.w 66(a0),d0
    a66e:	|  ,--|-- beq.s a67c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a670:	|  |  '-> movea.l (sp),a0
    a672:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a678:	|  |      moveq #1,d0
    a67a:	+--|----- bra.s a67e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a67c:	|  '----> clr.w d0
    }
}
    a67e:	'-------> addq.l #4,sp
    a680:	          rts

0000a682 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a682:	                lea -56(sp),sp
    a686:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a688:	                pea 1929b <PutChar+0x1555>
    a68e:	                jsr 172a4 <KPrintF>
    a694:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a696:	                move.l #320,56(sp)
    a69e:	                move.l #200,52(sp)
    a6a6:	                moveq #-1,d0
    a6a8:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a6ac:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a6b4:	                clr.l 44(sp)
    a6b8:	   ,----------- bra.w a890 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a6bc:	,--|----------> movea.l 1cc0a <currentFloor>,a0
    a6c2:	|  |            move.l 12(a0),d1
    a6c6:	|  |            move.l 44(sp),d0
    a6ca:	|  |            lsl.l #3,d0
    a6cc:	|  |            movea.l d1,a0
    a6ce:	|  |            adda.l d0,a0
    a6d0:	|  |            move.l (a0),d0
    a6d2:	|  |            move.l d0,d1
    a6d4:	|  |            subq.l #1,d1
    a6d6:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a6da:	|  |            clr.l 40(sp)
    a6de:	|  |     ,----- bra.w a86e <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a6e2:	|  |  ,--|----> movea.l 1cc0a <currentFloor>,a0
    a6e8:	|  |  |  |      move.l 4(a0),d1
    a6ec:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a6f2:	|  |  |  |      movea.l 12(a0),a0
    a6f6:	|  |  |  |      move.l 44(sp),d0
    a6fa:	|  |  |  |      lsl.l #3,d0
    a6fc:	|  |  |  |      adda.l d0,a0
    a6fe:	|  |  |  |      movea.l 4(a0),a0
    a702:	|  |  |  |      move.l 40(sp),d0
    a706:	|  |  |  |      add.l d0,d0
    a708:	|  |  |  |      add.l d0,d0
    a70a:	|  |  |  |      adda.l d0,a0
    a70c:	|  |  |  |      move.l (a0),d0
    a70e:	|  |  |  |      lsl.l #3,d0
    a710:	|  |  |  |      movea.l d1,a0
    a712:	|  |  |  |      adda.l d0,a0
    a714:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a718:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a71e:	|  |  |  |      move.l 4(a0),d1
    a722:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a728:	|  |  |  |      movea.l 12(a0),a0
    a72c:	|  |  |  |      move.l 44(sp),d0
    a730:	|  |  |  |      lsl.l #3,d0
    a732:	|  |  |  |      adda.l d0,a0
    a734:	|  |  |  |      movea.l 4(a0),a0
    a738:	|  |  |  |      move.l 40(sp),d0
    a73c:	|  |  |  |      add.l d0,d0
    a73e:	|  |  |  |      add.l d0,d0
    a740:	|  |  |  |      adda.l d0,a0
    a742:	|  |  |  |      move.l (a0),d0
    a744:	|  |  |  |      lsl.l #3,d0
    a746:	|  |  |  |      movea.l d1,a0
    a748:	|  |  |  |      adda.l d0,a0
    a74a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a750:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a756:	|  |  |  |      move.l 4(a0),d1
    a75a:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a760:	|  |  |  |      movea.l 12(a0),a0
    a764:	|  |  |  |      move.l 44(sp),d0
    a768:	|  |  |  |      lsl.l #3,d0
    a76a:	|  |  |  |      adda.l d0,a0
    a76c:	|  |  |  |      movea.l 4(a0),a0
    a770:	|  |  |  |      move.l 36(sp),d0
    a774:	|  |  |  |      add.l d0,d0
    a776:	|  |  |  |      add.l d0,d0
    a778:	|  |  |  |      adda.l d0,a0
    a77a:	|  |  |  |      move.l (a0),d0
    a77c:	|  |  |  |      lsl.l #3,d0
    a77e:	|  |  |  |      movea.l d1,a0
    a780:	|  |  |  |      adda.l d0,a0
    a782:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a786:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a78c:	|  |  |  |      move.l 4(a0),d1
    a790:	|  |  |  |      movea.l 1cc0a <currentFloor>,a0
    a796:	|  |  |  |      movea.l 12(a0),a0
    a79a:	|  |  |  |      move.l 44(sp),d0
    a79e:	|  |  |  |      lsl.l #3,d0
    a7a0:	|  |  |  |      adda.l d0,a0
    a7a2:	|  |  |  |      movea.l 4(a0),a0
    a7a6:	|  |  |  |      move.l 36(sp),d0
    a7aa:	|  |  |  |      add.l d0,d0
    a7ac:	|  |  |  |      add.l d0,d0
    a7ae:	|  |  |  |      adda.l d0,a0
    a7b0:	|  |  |  |      move.l (a0),d0
    a7b2:	|  |  |  |      lsl.l #3,d0
    a7b4:	|  |  |  |      movea.l d1,a0
    a7b6:	|  |  |  |      adda.l d0,a0
    a7b8:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a7be:	|  |  |  |      movea.l 68(sp),a0
    a7c2:	|  |  |  |      move.l (a0),d1
    a7c4:	|  |  |  |      movea.l 64(sp),a0
    a7c8:	|  |  |  |      move.l (a0),d0
    a7ca:	|  |  |  |      move.l d1,-(sp)
    a7cc:	|  |  |  |      move.l d0,-(sp)
    a7ce:	|  |  |  |      move.l 24(sp),-(sp)
    a7d2:	|  |  |  |      move.l 32(sp),-(sp)
    a7d6:	|  |  |  |      move.l 40(sp),-(sp)
    a7da:	|  |  |  |      move.l 48(sp),-(sp)
    a7de:	|  |  |  |      lea 28(sp),a0
    a7e2:	|  |  |  |      move.l a0,-(sp)
    a7e4:	|  |  |  |      lea 36(sp),a0
    a7e8:	|  |  |  |      move.l a0,-(sp)
    a7ea:	|  |  |  |      jsr 160a2 <closestPointOnLine>
    a7f0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a7f4:	|  |  |  |      movea.l 64(sp),a0
    a7f8:	|  |  |  |      move.l (a0),d0
    a7fa:	|  |  |  |      move.l 8(sp),d1
    a7fe:	|  |  |  |      move.l d0,d2
    a800:	|  |  |  |      sub.l d1,d2
    a802:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a806:	|  |  |  |      movea.l 68(sp),a0
    a80a:	|  |  |  |      move.l (a0),d0
    a80c:	|  |  |  |      move.l 4(sp),d1
    a810:	|  |  |  |      move.l d0,d2
    a812:	|  |  |  |      sub.l d1,d2
    a814:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a818:	|  |  |  |      move.l 28(sp),-(sp)
    a81c:	|  |  |  |      move.l 32(sp),-(sp)
    a820:	|  |  |  |      jsr 17c30 <__mulsi3>
    a826:	|  |  |  |      addq.l #8,sp
    a828:	|  |  |  |      move.l d0,d2
    a82a:	|  |  |  |      move.l 24(sp),-(sp)
    a82e:	|  |  |  |      move.l 28(sp),-(sp)
    a832:	|  |  |  |      jsr 17c30 <__mulsi3>
    a838:	|  |  |  |      addq.l #8,sp
    a83a:	|  |  |  |      move.l d2,d1
    a83c:	|  |  |  |      add.l d0,d1
    a83e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a842:	|  |  |  |      move.l 12(sp),d2
    a846:	|  |  |  |      cmp.l 32(sp),d2
    a84a:	|  |  |  |  ,-- bge.s a864 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    a84c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a852:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a858:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a85e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a864:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a86a:	|  |  |  |      addq.l #1,40(sp)
    a86e:	|  |  |  '----> movea.l 1cc0a <currentFloor>,a0
    a874:	|  |  |         move.l 12(a0),d1
    a878:	|  |  |         move.l 44(sp),d0
    a87c:	|  |  |         lsl.l #3,d0
    a87e:	|  |  |         movea.l d1,a0
    a880:	|  |  |         adda.l d0,a0
    a882:	|  |  |         move.l (a0),d0
    a884:	|  |  |         cmp.l 40(sp),d0
    a888:	|  |  '-------- bgt.w a6e2 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a88c:	|  |            addq.l #1,44(sp)
    a890:	|  '----------> movea.l 1cc0a <currentFloor>,a0
    a896:	|               move.l 8(a0),d0
    a89a:	|               cmp.l 44(sp),d0
    a89e:	'-------------- bgt.w a6bc <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    a8a2:	                moveq #-1,d0
    a8a4:	                cmp.l 48(sp),d0
    a8a8:	            ,-- bne.s a8ae <handleClosestPoint+0x22c>
    a8aa:	            |   clr.w d0
    a8ac:	         ,--|-- bra.s a8c8 <handleClosestPoint+0x246>
	*setX = gotX;
    a8ae:	         |  '-> movea.l 64(sp),a0
    a8b2:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a8b6:	         |      movea.l 68(sp),a0
    a8ba:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a8be:	         |      movea.l 72(sp),a0
    a8c2:	         |      move.l 48(sp),(a0)

	return TRUE;
    a8c6:	         |      moveq #1,d0
}
    a8c8:	         '----> move.l (sp)+,d2
    a8ca:	                lea 56(sp),sp
    a8ce:	                rts

0000a8d0 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a8d0:	clr.l 1cb66 <personRegion+0x10>
	personRegion.sY = 0;
    a8d6:	clr.l 1cb6a <personRegion+0x14>
	personRegion.di = -1;
    a8dc:	moveq #-1,d0
    a8de:	move.l d0,1cb6e <personRegion+0x18>
	allScreenRegions = NULL;
    a8e4:	clr.l 1cbfe <allScreenRegions>

	return TRUE;
    a8ea:	moveq #1,d0
}
    a8ec:	rts

0000a8ee <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a8ee:	          subq.l #4,sp
    a8f0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a8f2:	          tst.l 12(sp)
    a8f6:	      ,-- bne.s a8fe <jumpPerson+0x10>
    a8f8:	      |   tst.l 16(sp)
    a8fc:	,-----|-- beq.s a972 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a8fe:	|     '-> move.l 20(sp),-(sp)
    a902:	|         jsr a56a <findPerson>
    a908:	|         addq.l #4,sp
    a90a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a90e:	|  ,----- beq.s a976 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a910:	|  |      movea.l 4(sp),a0
    a914:	|  |      move.l 68(a0),d0
    a918:	|  |  ,-- beq.s a92c <jumpPerson+0x3e>
    a91a:	|  |  |   movea.l 4(sp),a0
    a91e:	|  |  |   move.l 68(a0),d0
    a922:	|  |  |   move.l d0,-(sp)
    a924:	|  |  |   jsr 4f64 <abortFunction>
    a92a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a92c:	|  |  '-> movea.l 4(sp),a0
    a930:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a934:	|  |      movea.l 4(sp),a0
    a938:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a93c:	|  |      movea.l 4(sp),a0
    a940:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a944:	|  |      move.l 16(sp),-(sp)
    a948:	|  |      jsr 176d6 <__floatsisf>
    a94e:	|  |      addq.l #4,sp
    a950:	|  |      move.l d0,d2
    a952:	|  |      move.l 12(sp),-(sp)
    a956:	|  |      jsr 176d6 <__floatsisf>
    a95c:	|  |      addq.l #4,sp
    a95e:	|  |      move.l d2,-(sp)
    a960:	|  |      move.l d0,-(sp)
    a962:	|  |      move.l 12(sp),-(sp)
    a966:	|  |      jsr ad14 <moveAndScale>
    a96c:	|  |      lea 12(sp),sp
    a970:	|  |  ,-- bra.s a978 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a972:	'--|--|-> nop
    a974:	   |  +-- bra.s a978 <jumpPerson+0x8a>
    if (!moveMe) return;
    a976:	   '--|-> nop
}
    a978:	      '-> move.l (sp)+,d2
    a97a:	          addq.l #4,sp
    a97c:	          rts

0000a97e <killAllPeople>:


void killAllPeople () {
    a97e:	          subq.l #8,sp
    a980:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a982:	   ,----- bra.s a9ee <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a984:	,--|----> movea.l 1cb52 <allPeople>,a0
    a98a:	|  |      move.l 68(a0),d0
    a98e:	|  |  ,-- beq.s a9a4 <killAllPeople+0x26>
    a990:	|  |  |   movea.l 1cb52 <allPeople>,a0
    a996:	|  |  |   move.l 68(a0),d0
    a99a:	|  |  |   move.l d0,-(sp)
    a99c:	|  |  |   jsr 4f64 <abortFunction>
    a9a2:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a9a4:	|  |  '-> movea.l 1cb52 <allPeople>,a0
    a9aa:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a9ae:	|  |      move.l 1cb52 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a9b6:	|  |      movea.l 1cb52 <allPeople>,a0
    a9bc:	|  |      move.l 36(a0),d0
    a9c0:	|  |      move.l d0,1cb52 <allPeople>
		removeObjectType (killPeople -> thisType);
    a9c6:	|  |      movea.l 8(sp),a0
    a9ca:	|  |      move.l 114(a0),d0
    a9ce:	|  |      move.l d0,-(sp)
    a9d0:	|  |      jsr d880 <removeObjectType>
    a9d6:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a9d8:	|  |      move.l 8(sp),4(sp)
    a9de:	|  |      move.l 1caf2 <SysBase>,d0
    a9e4:	|  |      movea.l d0,a6
    a9e6:	|  |      movea.l 4(sp),a1
    a9ea:	|  |      jsr -690(a6)
	while (allPeople) {
    a9ee:	|  '----> move.l 1cb52 <allPeople>,d0
    a9f4:	'-------- bne.s a984 <killAllPeople+0x6>
	}
}
    a9f6:	          nop
    a9f8:	          nop
    a9fa:	          movea.l (sp)+,a6
    a9fc:	          addq.l #8,sp
    a9fe:	          rts

0000aa00 <killMostPeople>:

void killMostPeople() {
    aa00:	          lea -12(sp),sp
    aa04:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aa06:	          move.l #117586,12(sp)

    while (*lookyHere) {
    aa0e:	   ,----- bra.w aa94 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aa12:	,--|----> movea.l 12(sp),a0
    aa16:	|  |      movea.l (a0),a0
    aa18:	|  |      move.l 118(a0),d0
    aa1c:	|  |      moveq #32,d1
    aa1e:	|  |      and.l d1,d0
    aa20:	|  |  ,-- beq.s aa32 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aa22:	|  |  |   movea.l 12(sp),a0
    aa26:	|  |  |   move.l (a0),d0
    aa28:	|  |  |   moveq #36,d1
    aa2a:	|  |  |   add.l d0,d1
    aa2c:	|  |  |   move.l d1,12(sp)
    aa30:	|  +--|-- bra.s aa94 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aa32:	|  |  '-> movea.l 12(sp),a0
    aa36:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aa3a:	|  |      movea.l 8(sp),a0
    aa3e:	|  |      move.l 36(a0),d0
    aa42:	|  |      movea.l 12(sp),a0
    aa46:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aa48:	|  |      movea.l 8(sp),a0
    aa4c:	|  |      move.l 68(a0),d0
    aa50:	|  |  ,-- beq.s aa64 <killMostPeople+0x64>
    aa52:	|  |  |   movea.l 8(sp),a0
    aa56:	|  |  |   move.l 68(a0),d0
    aa5a:	|  |  |   move.l d0,-(sp)
    aa5c:	|  |  |   jsr 4f64 <abortFunction>
    aa62:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    aa64:	|  |  '-> movea.l 8(sp),a0
    aa68:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    aa6c:	|  |      movea.l 8(sp),a0
    aa70:	|  |      move.l 114(a0),d0
    aa74:	|  |      move.l d0,-(sp)
    aa76:	|  |      jsr d880 <removeObjectType>
    aa7c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    aa7e:	|  |      move.l 8(sp),4(sp)
    aa84:	|  |      move.l 1caf2 <SysBase>,d0
    aa8a:	|  |      movea.l d0,a6
    aa8c:	|  |      movea.l 4(sp),a1
    aa90:	|  |      jsr -690(a6)
    while (*lookyHere) {
    aa94:	|  '----> movea.l 12(sp),a0
    aa98:	|         move.l (a0),d0
    aa9a:	'-------- bne.w aa12 <killMostPeople+0x12>
        }
    }
}
    aa9e:	          nop
    aaa0:	          nop
    aaa2:	          movea.l (sp)+,a6
    aaa4:	          lea 12(sp),sp
    aaa8:	          rts

0000aaaa <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    aaaa:	clr.l -(sp)
    aaac:	move.l sp,d0
    aaae:	addq.l #8,d0
    aab0:	move.l d0,-(sp)
    aab2:	jsr 4106 <setFrames>
    aab8:	addq.l #8,sp
}
    aaba:	nop
    aabc:	rts

0000aabe <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    aabe:	          lea -12(sp),sp
    aac2:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    aac4:	          pea 1931f <PutChar+0x15d9>
    aaca:	          jsr 172a4 <KPrintF>
    aad0:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    aad2:	          tst.l 20(sp)
    aad6:	      ,-- bne.s aae4 <makeWalkingPerson+0x26>
    aad8:	      |   tst.l 24(sp)
    aadc:	      +-- bne.s aae4 <makeWalkingPerson+0x26>
    aade:	      |   clr.w d0
    aae0:	,-----|-- bra.w aca6 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    aae4:	|     '-> movea.l 1cc0a <currentFloor>,a0
    aaea:	|         move.l 8(a0),d0
    aaee:	|     ,-- bne.s aaf6 <makeWalkingPerson+0x38>
    aaf0:	|     |   clr.w d0
    aaf2:	+-----|-- bra.w aca6 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    aaf6:	|     '-> move.l 28(sp),d0
    aafa:	|         move.l d0,-(sp)
    aafc:	|         jsr a56a <findPerson>
    ab02:	|         addq.l #4,sp
    ab04:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    ab08:	|     ,-- bne.s ab24 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    ab0a:	|     |   move.l 28(sp),d0
    ab0e:	|     |   move.l d0,-(sp)
    ab10:	|     |   pea 1933a <PutChar+0x15f4>
    ab16:	|     |   jsr 172a4 <KPrintF>
    ab1c:	|     |   addq.l #8,sp
		return FALSE;
    ab1e:	|     |   clr.w d0
    ab20:	+-----|-- bra.w aca6 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    ab24:	|     '-> movea.l 12(sp),a0
    ab28:	|         move.l 68(a0),d0
    ab2c:	|     ,-- beq.s ab40 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    ab2e:	|     |   movea.l 12(sp),a0
    ab32:	|     |   move.l 68(a0),d0
    ab36:	|     |   move.l d0,-(sp)
    ab38:	|     |   jsr 4f64 <abortFunction>
    ab3e:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    ab40:	|     '-> movea.l 12(sp),a0
    ab44:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    ab48:	|         movea.l 12(sp),a0
    ab4c:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ab52:	|         movea.l 12(sp),a0
    ab56:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ab5c:	|         movea.l 12(sp),a0
    ab60:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ab66:	|         movea.l 12(sp),a0
    ab6a:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ab70:	|         move.l 24(sp),-(sp)
    ab74:	|         move.l 24(sp),-(sp)
    ab78:	|         jsr 165ea <inFloor>
    ab7e:	|         addq.l #8,sp
    ab80:	|         movea.l 12(sp),a0
    ab84:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ab88:	|         movea.l 12(sp),a0
    ab8c:	|         move.l 60(a0),d0
    ab90:	|         moveq #-1,d1
    ab92:	|         cmp.l d0,d1
    ab94:	|     ,-- bne.s abc4 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ab96:	|     |   movea.w #60,a0
    ab9a:	|     |   adda.l 12(sp),a0
    ab9e:	|     |   moveq #44,d1
    aba0:	|     |   add.l 12(sp),d1
    aba4:	|     |   moveq #40,d0
    aba6:	|     |   add.l 12(sp),d0
    abaa:	|     |   move.l a0,-(sp)
    abac:	|     |   move.l d1,-(sp)
    abae:	|     |   move.l d0,-(sp)
    abb0:	|     |   jsr a682 <handleClosestPoint>
    abb6:	|     |   lea 12(sp),sp
    abba:	|     |   tst.w d0
    abbc:	|     +-- bne.s abc4 <makeWalkingPerson+0x106>
    abbe:	|     |   clr.w d0
    abc0:	+-----|-- bra.w aca6 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    abc4:	|     '-> movea.l 12(sp),a0
    abc8:	|         move.l 4(a0),d0
    abcc:	|         move.l d0,-(sp)
    abce:	|         jsr 1766e <__fixsfsi>
    abd4:	|         addq.l #4,sp
    abd6:	|         move.l d0,d2
    abd8:	|         movea.l 12(sp),a0
    abdc:	|         move.l (a0),d0
    abde:	|         move.l d0,-(sp)
    abe0:	|         jsr 1766e <__fixsfsi>
    abe6:	|         addq.l #4,sp
    abe8:	|         move.l d2,-(sp)
    abea:	|         move.l d0,-(sp)
    abec:	|         jsr 165ea <inFloor>
    abf2:	|         addq.l #8,sp
    abf4:	|         movea.l 12(sp),a0
    abf8:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    abfc:	|         movea.l 12(sp),a0
    ac00:	|         move.l 56(a0),d0
    ac04:	|         moveq #-1,d1
    ac06:	|         cmp.l d0,d1
    ac08:	|     ,-- bne.s ac5a <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac0a:	|     |   movea.l 12(sp),a0
    ac0e:	|     |   move.l (a0),d0
    ac10:	|     |   move.l d0,-(sp)
    ac12:	|     |   jsr 1766e <__fixsfsi>
    ac18:	|     |   addq.l #4,sp
    ac1a:	|     |   move.l d0,8(sp)
    ac1e:	|     |   movea.l 12(sp),a0
    ac22:	|     |   move.l 4(a0),d0
    ac26:	|     |   move.l d0,-(sp)
    ac28:	|     |   jsr 1766e <__fixsfsi>
    ac2e:	|     |   addq.l #4,sp
    ac30:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ac34:	|     |   moveq #56,d0
    ac36:	|     |   add.l 12(sp),d0
    ac3a:	|     |   move.l d0,-(sp)
    ac3c:	|     |   lea 8(sp),a0
    ac40:	|     |   move.l a0,-(sp)
    ac42:	|     |   moveq #16,d0
    ac44:	|     |   add.l sp,d0
    ac46:	|     |   move.l d0,-(sp)
    ac48:	|     |   jsr a682 <handleClosestPoint>
    ac4e:	|     |   lea 12(sp),sp
    ac52:	|     |   tst.w d0
    ac54:	|     +-- bne.s ac5a <makeWalkingPerson+0x19c>
    ac56:	|     |   clr.w d0
    ac58:	+-----|-- bra.s aca6 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    ac5a:	|     '-> move.l 12(sp),-(sp)
    ac5e:	|         jsr 98cc <doBorderStuff>
    ac64:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ac66:	|         clr.l -(sp)
    ac68:	|         move.l 16(sp),-(sp)
    ac6c:	|         jsr bf12 <walkMe>
    ac72:	|         addq.l #8,sp
    ac74:	|         tst.w d0
    ac76:	|     ,-- bne.s ac82 <makeWalkingPerson+0x1c4>
    ac78:	|     |   movea.l 12(sp),a0
    ac7c:	|     |   move.w 66(a0),d0
    ac80:	|  ,--|-- beq.s aca4 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    ac82:	|  |  '-> lea 28(sp),a0
    ac86:	|  |      move.l a0,-(sp)
    ac88:	|  |      pea 19363 <PutChar+0x161d>
    ac8e:	|  |      jsr 172a4 <KPrintF>
    ac94:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    ac96:	|  |      movea.l 12(sp),a0
    ac9a:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    aca0:	|  |      moveq #1,d0
    aca2:	+--|----- bra.s aca6 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    aca4:	|  '----> clr.w d0
	}
}
    aca6:	'-------> move.l (sp)+,d2
    aca8:	          lea 12(sp),sp
    acac:	          rts

0000acae <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    acae:	       lea -16(sp),sp
    acb2:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    acb4:	       moveq #12,d0
    acb6:	       move.l d0,16(sp)
    acba:	       clr.l 12(sp)
    acbe:	       move.l 1caf2 <SysBase>,d0
    acc4:	       movea.l d0,a6
    acc6:	       move.l 16(sp),d0
    acca:	       move.l 12(sp),d1
    acce:	       jsr -684(a6)
    acd2:	       move.l d0,8(sp)
    acd6:	       move.l 8(sp),d0
    acda:	       move.l d0,4(sp)
    if(newAnim == 0) {
    acde:	   ,-- bne.s acf2 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ace0:	   |   pea 19396 <PutChar+0x1650>
    ace6:	   |   jsr 172a4 <KPrintF>
    acec:	   |   addq.l #4,sp
        return NULL;    
    acee:	   |   moveq #0,d0
    acf0:	,--|-- bra.s ad0c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    acf2:	|  '-> movea.l 4(sp),a0
    acf6:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    acf8:	|      movea.l 4(sp),a0
    acfc:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad00:	|      movea.l 4(sp),a0
    ad04:	|      clr.l 4(a0)
	return newAnim;
    ad08:	|      move.l 4(sp),d0
}
    ad0c:	'----> movea.l (sp)+,a6
    ad0e:	       lea 16(sp),sp
    ad12:	       rts

0000ad14 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad14:	    move.l d2,-(sp)
	me->x = x;
    ad16:	    movea.l 8(sp),a0
    ad1a:	    move.l 12(sp),(a0)
	me->y = y;
    ad1e:	    movea.l 8(sp),a0
    ad22:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ad28:	    movea.l 8(sp),a0
    ad2c:	    clr.l 8(a0)
	me->oldy = 0;
    ad30:	    movea.l 8(sp),a0
    ad34:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ad38:	    movea.l 8(sp),a0
    ad3c:	    move.l 118(a0),d0
    ad40:	    moveq #2,d1
    ad42:	    and.l d1,d0
    ad44:	,-- bne.s ad9c <moveAndScale+0x88>
    ad46:	|   move.w 1c47a <scaleDivide>,d0
    ad4c:	+-- beq.s ad9c <moveAndScale+0x88>
    ad4e:	|   movea.l 8(sp),a0
    ad52:	|   move.l 4(a0),d2
    ad56:	|   move.w 1c478 <scaleHorizon>,d0
    ad5c:	|   movea.w d0,a0
    ad5e:	|   move.l a0,-(sp)
    ad60:	|   jsr 176d6 <__floatsisf>
    ad66:	|   addq.l #4,sp
    ad68:	|   move.l d0,-(sp)
    ad6a:	|   move.l d2,-(sp)
    ad6c:	|   jsr 179ca <__subsf3>
    ad72:	|   addq.l #8,sp
    ad74:	|   move.l d0,d2
    ad76:	|   move.w 1c47a <scaleDivide>,d0
    ad7c:	|   movea.w d0,a0
    ad7e:	|   move.l a0,-(sp)
    ad80:	|   jsr 176d6 <__floatsisf>
    ad86:	|   addq.l #4,sp
    ad88:	|   move.l d0,-(sp)
    ad8a:	|   move.l d2,-(sp)
    ad8c:	|   jsr 1758c <__divsf3>
    ad92:	|   addq.l #8,sp
    ad94:	|   movea.l 8(sp),a0
    ad98:	|   move.l d0,32(a0)
}
    ad9c:	'-> nop
    ad9e:	    move.l (sp)+,d2
    ada0:	    rts

0000ada2 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ada2:	          lea -16(sp),sp
    ada6:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ada8:	          move.l 24(sp),-(sp)
    adac:	          jsr a56a <findPerson>
    adb2:	          addq.l #4,sp
    adb4:	          move.l d0,8(sp)

    if (p) {
    adb8:	,-------- beq.w ae98 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    adbc:	|         move.l 1cc02 <overRegion>,d0
    adc2:	|         cmpi.l #117590,d0
    adc8:	|     ,-- bne.s ade6 <removeOneCharacter+0x44>
    adca:	|     |   movea.l 1cc02 <overRegion>,a0
    add0:	|     |   move.l 28(a0),d1
    add4:	|     |   movea.l 8(sp),a0
    add8:	|     |   move.l 114(a0),d0
    addc:	|     |   cmp.l d1,d0
    adde:	|     +-- bne.s ade6 <removeOneCharacter+0x44>
            overRegion = NULL;
    ade0:	|     |   clr.l 1cc02 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ade6:	|     '-> movea.l 8(sp),a0
    adea:	|         move.l 68(a0),d0
    adee:	|     ,-- beq.s ae02 <removeOneCharacter+0x60>
    adf0:	|     |   movea.l 8(sp),a0
    adf4:	|     |   move.l 68(a0),d0
    adf8:	|     |   move.l d0,-(sp)
    adfa:	|     |   jsr 4f64 <abortFunction>
    ae00:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae02:	|     '-> movea.l 8(sp),a0
    ae06:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae0a:	|         clr.l 12(sp)
    ae0e:	|     ,-- bra.s ae36 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae10:	|  ,--|-> movea.l 8(sp),a0
    ae14:	|  |  |   movea.l 80(a0),a0
    ae18:	|  |  |   move.l (a0),d1
    ae1a:	|  |  |   move.l 12(sp),d0
    ae1e:	|  |  |   add.l d0,d0
    ae20:	|  |  |   add.l d0,d0
    ae22:	|  |  |   movea.l d1,a0
    ae24:	|  |  |   adda.l d0,a0
    ae26:	|  |  |   move.l (a0),d0
    ae28:	|  |  |   move.l d0,-(sp)
    ae2a:	|  |  |   jsr 9848 <deleteAnim>
    ae30:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ae32:	|  |  |   addq.l #1,12(sp)
    ae36:	|  |  '-> moveq #2,d0
    ae38:	|  |      cmp.l 12(sp),d0
    ae3c:	|  '----- bge.s ae10 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ae3e:	|         move.l #117586,16(sp)
    ae46:	|     ,-- bra.s ae56 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ae48:	|  ,--|-> movea.l 16(sp),a0
    ae4c:	|  |  |   move.l (a0),d0
    ae4e:	|  |  |   moveq #36,d1
    ae50:	|  |  |   add.l d0,d1
    ae52:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ae56:	|  |  '-> movea.l 16(sp),a0
    ae5a:	|  |      move.l (a0),d0
    ae5c:	|  |      cmp.l 8(sp),d0
    ae60:	|  '----- bne.s ae48 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ae62:	|         movea.l 8(sp),a0
    ae66:	|         move.l 36(a0),d0
    ae6a:	|         movea.l 16(sp),a0
    ae6e:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    ae70:	|         movea.l 8(sp),a0
    ae74:	|         move.l 114(a0),d0
    ae78:	|         move.l d0,-(sp)
    ae7a:	|         jsr d880 <removeObjectType>
    ae80:	|         addq.l #4,sp
        FreeVec(p);
    ae82:	|         move.l 8(sp),4(sp)
    ae88:	|         move.l 1caf2 <SysBase>,d0
    ae8e:	|         movea.l d0,a6
    ae90:	|         movea.l 4(sp),a1
    ae94:	|         jsr -690(a6)
		
    }
}
    ae98:	'-------> nop
    ae9a:	          movea.l (sp)+,a6
    ae9c:	          lea 16(sp),sp
    aea0:	          rts

0000aea2 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    aea2:	       subq.l #8,sp
    aea4:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    aea6:	       movea.l 16(sp),a0
    aeaa:	       movea.l 80(a0),a0
    aeae:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    aeb4:	       movea.l 16(sp),a0
    aeb8:	       move.l 92(a0),d2
    aebc:	       move.l 4(sp),-(sp)
    aec0:	       pea b4 <_start+0xb4>
    aec4:	       jsr 17cae <__divsi3>
    aeca:	       addq.l #8,sp
    aecc:	       add.l d2,d0
    aece:	       move.l d0,d1
    aed0:	       addi.l #180,d1
    aed6:	       movea.l 16(sp),a0
    aeda:	       move.l 100(a0),d0
    aede:	       move.l d1,d2
    aee0:	       add.l d0,d2
    aee2:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    aee6:	   ,-- bra.s aef0 <rethinkAngle+0x4e>
    aee8:	,--|-> addi.l #-360,8(sp)
    aef0:	|  '-> cmpi.l #359,8(sp)
    aef8:	'----- bgt.s aee8 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    aefa:	       move.l 4(sp),-(sp)
    aefe:	       move.l 12(sp),-(sp)
    af02:	       jsr 17c30 <__mulsi3>
    af08:	       addq.l #8,sp
    af0a:	       pea 168 <decodeFilename+0x50>
    af0e:	       move.l d0,-(sp)
    af10:	       jsr 17cae <__divsi3>
    af16:	       addq.l #8,sp
    af18:	       movea.l 16(sp),a0
    af1c:	       move.l d0,106(a0)
}
    af20:	       nop
    af22:	       move.l (sp)+,d2
    af24:	       addq.l #8,sp
    af26:	       rts

0000af28 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    af28:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    af2a:	          movea.l 8(sp),a0
    af2e:	          move.l 8(a0),d0
    af32:	          move.l 12(sp),-(sp)
    af36:	          move.l d0,-(sp)
    af38:	          jsr 8d0 <put2bytes>
    af3e:	          addq.l #8,sp
	if (p -> numFrames) {
    af40:	          movea.l 8(sp),a0
    af44:	          move.l 8(a0),d0
    af48:	,-------- beq.w afec <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    af4c:	|         movea.l 8(sp),a0
    af50:	|         movea.l (a0),a0
    af52:	|         move.l (a0),d0
    af54:	|         move.l 12(sp),-(sp)
    af58:	|         move.l d0,-(sp)
    af5a:	|         jsr 958 <put4bytes>
    af60:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    af62:	|         clr.l (sp)
    af64:	|     ,-- bra.s afde <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    af66:	|  ,--|-> movea.l 8(sp),a0
    af6a:	|  |  |   movea.l 4(a0),a0
    af6e:	|  |  |   move.l (sp),d1
    af70:	|  |  |   move.l d1,d0
    af72:	|  |  |   add.l d0,d0
    af74:	|  |  |   add.l d1,d0
    af76:	|  |  |   add.l d0,d0
    af78:	|  |  |   add.l d0,d0
    af7a:	|  |  |   adda.l d0,a0
    af7c:	|  |  |   move.l (a0),d0
    af7e:	|  |  |   move.l 12(sp),-(sp)
    af82:	|  |  |   move.l d0,-(sp)
    af84:	|  |  |   jsr 958 <put4bytes>
    af8a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    af8c:	|  |  |   movea.l 8(sp),a0
    af90:	|  |  |   movea.l 4(a0),a0
    af94:	|  |  |   move.l (sp),d1
    af96:	|  |  |   move.l d1,d0
    af98:	|  |  |   add.l d0,d0
    af9a:	|  |  |   add.l d1,d0
    af9c:	|  |  |   add.l d0,d0
    af9e:	|  |  |   add.l d0,d0
    afa0:	|  |  |   adda.l d0,a0
    afa2:	|  |  |   move.l 4(a0),d0
    afa6:	|  |  |   move.l 12(sp),-(sp)
    afaa:	|  |  |   move.l d0,-(sp)
    afac:	|  |  |   jsr 958 <put4bytes>
    afb2:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    afb4:	|  |  |   movea.l 8(sp),a0
    afb8:	|  |  |   movea.l 4(a0),a0
    afbc:	|  |  |   move.l (sp),d1
    afbe:	|  |  |   move.l d1,d0
    afc0:	|  |  |   add.l d0,d0
    afc2:	|  |  |   add.l d1,d0
    afc4:	|  |  |   add.l d0,d0
    afc6:	|  |  |   add.l d0,d0
    afc8:	|  |  |   adda.l d0,a0
    afca:	|  |  |   move.l 8(a0),d0
    afce:	|  |  |   move.l 12(sp),-(sp)
    afd2:	|  |  |   move.l d0,-(sp)
    afd4:	|  |  |   jsr 958 <put4bytes>
    afda:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    afdc:	|  |  |   addq.l #1,(sp)
    afde:	|  |  '-> movea.l 8(sp),a0
    afe2:	|  |      move.l 8(a0),d0
    afe6:	|  |      cmp.l (sp),d0
    afe8:	|  '----- bgt.w af66 <saveAnim+0x3e>
		}
	}
	return TRUE;
    afec:	'-------> moveq #1,d0
}
    afee:	          addq.l #4,sp
    aff0:	          rts

0000aff2 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    aff2:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    aff4:	             movea.l 8(sp),a0
    aff8:	             move.l 4(a0),d0
    affc:	             move.l 12(sp),-(sp)
    b000:	             move.l d0,-(sp)
    b002:	             jsr 8d0 <put2bytes>
    b008:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b00a:	             clr.l (sp)
    b00c:	   ,-------- bra.s b038 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b00e:	,--|-------> movea.l 8(sp),a0
    b012:	|  |         move.l (a0),d1
    b014:	|  |         move.l (sp),d0
    b016:	|  |         add.l d0,d0
    b018:	|  |         add.l d0,d0
    b01a:	|  |         movea.l d1,a0
    b01c:	|  |         adda.l d0,a0
    b01e:	|  |         move.l (a0),d0
    b020:	|  |         move.l 12(sp),-(sp)
    b024:	|  |         move.l d0,-(sp)
    b026:	|  |         jsr af28 <saveAnim>
    b02c:	|  |         addq.l #8,sp
    b02e:	|  |         tst.w d0
    b030:	|  |     ,-- bne.s b036 <saveCostume+0x44>
    b032:	|  |     |   clr.w d0
    b034:	|  |  ,--|-- bra.s b04c <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b036:	|  |  |  '-> addq.l #1,(sp)
    b038:	|  '--|----> movea.l 8(sp),a0
    b03c:	|     |      move.l 4(a0),d1
    b040:	|     |      move.l d1,d0
    b042:	|     |      add.l d0,d0
    b044:	|     |      add.l d1,d0
    b046:	|     |      cmp.l (sp),d0
    b048:	'-----|----- bgt.s b00e <saveCostume+0x1c>
	}

	return TRUE;
    b04a:	      |      moveq #1,d0
}
    b04c:	      '----> addq.l #4,sp
    b04e:	             rts

0000b050 <savePeople>:

BOOL savePeople (BPTR fp) {
    b050:	             lea -144(sp),sp
    b054:	             move.l a6,-(sp)
    b056:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b058:	             move.l 1cb52 <allPeople>,148(sp)
	int countPeople = 0, a;
    b060:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b064:	             move.w 1c478 <scaleHorizon>,d0
    b06a:	             movea.w d0,a0
    b06c:	             move.l 156(sp),-(sp)
    b070:	             move.l a0,-(sp)
    b072:	             jsr a9c <putSigned>
    b078:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b07a:	             move.w 1c47a <scaleDivide>,d0
    b080:	             movea.w d0,a0
    b082:	             move.l 156(sp),-(sp)
    b086:	             move.l a0,-(sp)
    b088:	             jsr a9c <putSigned>
    b08e:	             addq.l #8,sp

	while (me) {
    b090:	         ,-- bra.s b0a0 <savePeople+0x50>
		countPeople ++;
    b092:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b096:	      |  |   movea.l 148(sp),a0
    b09a:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b0a0:	      |  '-> tst.l 148(sp)
    b0a4:	      '----- bne.s b092 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b0a6:	             move.l 156(sp),-(sp)
    b0aa:	             move.l 148(sp),-(sp)
    b0ae:	             jsr 8d0 <put2bytes>
    b0b4:	             addq.l #8,sp

	me = allPeople;
    b0b6:	             move.l 1cb52 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b0be:	             clr.l 140(sp)
    b0c2:	   ,-------- bra.w b51a <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b0c6:	,--|-------> movea.l 148(sp),a0
    b0ca:	|  |         move.l (a0),d0
    b0cc:	|  |         move.l 156(sp),-(sp)
    b0d0:	|  |         move.l d0,-(sp)
    b0d2:	|  |         jsr a46 <putFloat>
    b0d8:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b0da:	|  |         movea.l 148(sp),a0
    b0de:	|  |         move.l 4(a0),d0
    b0e2:	|  |         move.l 156(sp),-(sp)
    b0e6:	|  |         move.l d0,-(sp)
    b0e8:	|  |         jsr a46 <putFloat>
    b0ee:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b0f0:	|  |         movea.l 148(sp),a0
    b0f4:	|  |         move.l 80(a0),d0
    b0f8:	|  |         move.l 156(sp),-(sp)
    b0fc:	|  |         move.l d0,-(sp)
    b0fe:	|  |         jsr aff2 <saveCostume>
    b104:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b106:	|  |         movea.l 148(sp),a0
    b10a:	|  |         move.l 72(a0),d0
    b10e:	|  |         move.l 156(sp),-(sp)
    b112:	|  |         move.l d0,-(sp)
    b114:	|  |         jsr af28 <saveAnim>
    b11a:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b11c:	|  |         move.l 156(sp),136(sp)
    b122:	|  |         movea.l 148(sp),a0
    b126:	|  |         move.l 72(a0),d1
    b12a:	|  |         movea.l 148(sp),a0
    b12e:	|  |         move.l 76(a0),d0
    b132:	|  |         cmp.l d1,d0
    b134:	|  |         seq d0
    b136:	|  |         neg.b d0
    b138:	|  |         move.b d0,d0
    b13a:	|  |         andi.l #255,d0
    b140:	|  |         move.l d0,132(sp)
    b144:	|  |         move.l 1cafa <DOSBase>,d0
    b14a:	|  |         movea.l d0,a6
    b14c:	|  |         move.l 136(sp),d1
    b150:	|  |         move.l 132(sp),d2
    b154:	|  |         jsr -312(a6)
    b158:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b15c:	|  |         movea.l 148(sp),a0
    b160:	|  |         move.l 32(a0),d0
    b164:	|  |         move.l 156(sp),-(sp)
    b168:	|  |         move.l d0,-(sp)
    b16a:	|  |         jsr a46 <putFloat>
    b170:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b172:	|  |         movea.l 148(sp),a0
    b176:	|  |         move.l 118(a0),d0
    b17a:	|  |         move.l 156(sp),-(sp)
    b17e:	|  |         move.l d0,-(sp)
    b180:	|  |         jsr 8d0 <put2bytes>
    b186:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b188:	|  |         movea.l 148(sp),a0
    b18c:	|  |         move.l 20(a0),d0
    b190:	|  |         move.l 156(sp),-(sp)
    b194:	|  |         move.l d0,-(sp)
    b196:	|  |         jsr 8d0 <put2bytes>
    b19c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b19e:	|  |         movea.l 148(sp),a0
    b1a2:	|  |         move.l 40(a0),d0
    b1a6:	|  |         move.l 156(sp),-(sp)
    b1aa:	|  |         move.l d0,-(sp)
    b1ac:	|  |         jsr 8d0 <put2bytes>
    b1b2:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b1b4:	|  |         movea.l 148(sp),a0
    b1b8:	|  |         move.l 44(a0),d0
    b1bc:	|  |         move.l 156(sp),-(sp)
    b1c0:	|  |         move.l d0,-(sp)
    b1c2:	|  |         jsr 8d0 <put2bytes>
    b1c8:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b1ca:	|  |         movea.l 148(sp),a0
    b1ce:	|  |         move.l 48(a0),d0
    b1d2:	|  |         move.l 156(sp),-(sp)
    b1d6:	|  |         move.l d0,-(sp)
    b1d8:	|  |         jsr 8d0 <put2bytes>
    b1de:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b1e0:	|  |         movea.l 148(sp),a0
    b1e4:	|  |         move.l 52(a0),d0
    b1e8:	|  |         move.l 156(sp),-(sp)
    b1ec:	|  |         move.l d0,-(sp)
    b1ee:	|  |         jsr 8d0 <put2bytes>
    b1f4:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b1f6:	|  |         movea.l 148(sp),a0
    b1fa:	|  |         move.l 84(a0),d0
    b1fe:	|  |         move.l 156(sp),-(sp)
    b202:	|  |         move.l d0,-(sp)
    b204:	|  |         jsr 8d0 <put2bytes>
    b20a:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b20c:	|  |         movea.l 148(sp),a0
    b210:	|  |         move.l 88(a0),d0
    b214:	|  |         move.l 156(sp),-(sp)
    b218:	|  |         move.l d0,-(sp)
    b21a:	|  |         jsr 8d0 <put2bytes>
    b220:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b222:	|  |         movea.l 148(sp),a0
    b226:	|  |         move.l 28(a0),d0
    b22a:	|  |         move.l 156(sp),-(sp)
    b22e:	|  |         move.l d0,-(sp)
    b230:	|  |         jsr 8d0 <put2bytes>
    b236:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b238:	|  |         movea.l 148(sp),a0
    b23c:	|  |         move.l 122(a0),d0
    b240:	|  |         move.l 156(sp),-(sp)
    b244:	|  |         move.l d0,-(sp)
    b246:	|  |         jsr 8d0 <put2bytes>
    b24c:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b24e:	|  |         movea.l 148(sp),a0
    b252:	|  |         move.l 24(a0),d0
    b256:	|  |         move.l d0,d0
    b258:	|  |         movea.w d0,a0
    b25a:	|  |         move.l 156(sp),-(sp)
    b25e:	|  |         move.l a0,-(sp)
    b260:	|  |         jsr a9c <putSigned>
    b266:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b268:	|  |         move.l 156(sp),124(sp)
    b26e:	|  |         movea.l 148(sp),a0
    b272:	|  |         move.w 104(a0),d0
    b276:	|  |         movea.w d0,a0
    b278:	|  |         move.l a0,120(sp)
    b27c:	|  |         move.l 1cafa <DOSBase>,d0
    b282:	|  |         movea.l d0,a6
    b284:	|  |         move.l 124(sp),d1
    b288:	|  |         move.l 120(sp),d2
    b28c:	|  |         jsr -312(a6)
    b290:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b294:	|  |         move.l 156(sp),112(sp)
    b29a:	|  |         movea.l 148(sp),a0
    b29e:	|  |         move.w 64(a0),d0
    b2a2:	|  |         movea.w d0,a0
    b2a4:	|  |         move.l a0,108(sp)
    b2a8:	|  |         move.l 1cafa <DOSBase>,d0
    b2ae:	|  |         movea.l d0,a6
    b2b0:	|  |         move.l 112(sp),d1
    b2b4:	|  |         move.l 108(sp),d2
    b2b8:	|  |         jsr -312(a6)
    b2bc:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b2c0:	|  |         move.l 156(sp),100(sp)
    b2c6:	|  |         movea.l 148(sp),a0
    b2ca:	|  |         move.w 66(a0),d0
    b2ce:	|  |         movea.w d0,a0
    b2d0:	|  |         move.l a0,96(sp)
    b2d4:	|  |         move.l 1cafa <DOSBase>,d0
    b2da:	|  |         movea.l d0,a6
    b2dc:	|  |         move.l 100(sp),d1
    b2e0:	|  |         move.l 96(sp),d2
    b2e4:	|  |         jsr -312(a6)
    b2e8:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b2ec:	|  |         movea.l 148(sp),a0
    b2f0:	|  |         move.l 68(a0),d0
    b2f4:	|  |  ,----- beq.s b332 <savePeople+0x2e2>
			FPutC (fp, 1);
    b2f6:	|  |  |      move.l 156(sp),76(sp)
    b2fc:	|  |  |      moveq #1,d0
    b2fe:	|  |  |      move.l d0,72(sp)
    b302:	|  |  |      move.l 1cafa <DOSBase>,d0
    b308:	|  |  |      movea.l d0,a6
    b30a:	|  |  |      move.l 76(sp),d1
    b30e:	|  |  |      move.l 72(sp),d2
    b312:	|  |  |      jsr -312(a6)
    b316:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b31a:	|  |  |      movea.l 148(sp),a0
    b31e:	|  |  |      move.l 68(a0),d0
    b322:	|  |  |      move.l 156(sp),-(sp)
    b326:	|  |  |      move.l d0,-(sp)
    b328:	|  |  |      jsr c54c <saveFunction>
    b32e:	|  |  |      addq.l #8,sp
    b330:	|  |  |  ,-- bra.s b356 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b332:	|  |  '--|-> move.l 156(sp),88(sp)
    b338:	|  |     |   moveq #1,d0
    b33a:	|  |     |   move.l d0,84(sp)
    b33e:	|  |     |   move.l 1cafa <DOSBase>,d0
    b344:	|  |     |   movea.l d0,a6
    b346:	|  |     |   move.l 88(sp),d1
    b34a:	|  |     |   move.l 84(sp),d2
    b34e:	|  |     |   jsr -312(a6)
    b352:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b356:	|  |     '-> movea.l 148(sp),a0
    b35a:	|  |         move.l 106(a0),d0
    b35e:	|  |         move.l 156(sp),-(sp)
    b362:	|  |         move.l d0,-(sp)
    b364:	|  |         jsr 8d0 <put2bytes>
    b36a:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b36c:	|  |         movea.l 148(sp),a0
    b370:	|  |         move.l 92(a0),d0
    b374:	|  |         move.l 156(sp),-(sp)
    b378:	|  |         move.l d0,-(sp)
    b37a:	|  |         jsr 8d0 <put2bytes>
    b380:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b382:	|  |         movea.l 148(sp),a0
    b386:	|  |         move.l 100(a0),d0
    b38a:	|  |         move.l 156(sp),-(sp)
    b38e:	|  |         move.l d0,-(sp)
    b390:	|  |         jsr 8d0 <put2bytes>
    b396:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b398:	|  |         movea.l 148(sp),a0
    b39c:	|  |         move.l 96(a0),d0
    b3a0:	|  |         move.l 156(sp),-(sp)
    b3a4:	|  |         move.l d0,-(sp)
    b3a6:	|  |         jsr 8d0 <put2bytes>
    b3ac:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b3ae:	|  |         movea.l 148(sp),a0
    b3b2:	|  |         move.l 110(a0),d0
    b3b6:	|  |         move.l d0,d0
    b3b8:	|  |         movea.w d0,a0
    b3ba:	|  |         move.l 156(sp),-(sp)
    b3be:	|  |         move.l a0,-(sp)
    b3c0:	|  |         jsr a9c <putSigned>
    b3c6:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b3c8:	|  |         movea.l 148(sp),a0
    b3cc:	|  |         move.l 56(a0),d0
    b3d0:	|  |         move.l d0,d0
    b3d2:	|  |         movea.w d0,a0
    b3d4:	|  |         move.l 156(sp),-(sp)
    b3d8:	|  |         move.l a0,-(sp)
    b3da:	|  |         jsr a9c <putSigned>
    b3e0:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b3e2:	|  |         movea.l 148(sp),a0
    b3e6:	|  |         move.l 60(a0),d0
    b3ea:	|  |         move.l d0,d0
    b3ec:	|  |         movea.w d0,a0
    b3ee:	|  |         move.l 156(sp),-(sp)
    b3f2:	|  |         move.l a0,-(sp)
    b3f4:	|  |         jsr a9c <putSigned>
    b3fa:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b3fc:	|  |         move.l 156(sp),64(sp)
    b402:	|  |         movea.l 148(sp),a0
    b406:	|  |         move.b 126(a0),d0
    b40a:	|  |         move.b d0,d0
    b40c:	|  |         andi.l #255,d0
    b412:	|  |         move.l d0,60(sp)
    b416:	|  |         move.l 1cafa <DOSBase>,d0
    b41c:	|  |         movea.l d0,a6
    b41e:	|  |         move.l 64(sp),d1
    b422:	|  |         move.l 60(sp),d2
    b426:	|  |         jsr -312(a6)
    b42a:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b42e:	|  |         move.l 156(sp),52(sp)
    b434:	|  |         movea.l 148(sp),a0
    b438:	|  |         move.b 127(a0),d0
    b43c:	|  |         move.b d0,d0
    b43e:	|  |         andi.l #255,d0
    b444:	|  |         move.l d0,48(sp)
    b448:	|  |         move.l 1cafa <DOSBase>,d0
    b44e:	|  |         movea.l d0,a6
    b450:	|  |         move.l 52(sp),d1
    b454:	|  |         move.l 48(sp),d2
    b458:	|  |         jsr -312(a6)
    b45c:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b460:	|  |         move.l 156(sp),40(sp)
    b466:	|  |         movea.l 148(sp),a0
    b46a:	|  |         move.b 128(a0),d0
    b46e:	|  |         move.b d0,d0
    b470:	|  |         andi.l #255,d0
    b476:	|  |         move.l d0,36(sp)
    b47a:	|  |         move.l 1cafa <DOSBase>,d0
    b480:	|  |         movea.l d0,a6
    b482:	|  |         move.l 40(sp),d1
    b486:	|  |         move.l 36(sp),d2
    b48a:	|  |         jsr -312(a6)
    b48e:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b492:	|  |         move.l 156(sp),28(sp)
    b498:	|  |         movea.l 148(sp),a0
    b49c:	|  |         move.b 129(a0),d0
    b4a0:	|  |         move.b d0,d0
    b4a2:	|  |         andi.l #255,d0
    b4a8:	|  |         move.l d0,24(sp)
    b4ac:	|  |         move.l 1cafa <DOSBase>,d0
    b4b2:	|  |         movea.l d0,a6
    b4b4:	|  |         move.l 28(sp),d1
    b4b8:	|  |         move.l 24(sp),d2
    b4bc:	|  |         jsr -312(a6)
    b4c0:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b4c4:	|  |         move.l 156(sp),16(sp)
    b4ca:	|  |         movea.l 148(sp),a0
    b4ce:	|  |         move.b 130(a0),d0
    b4d2:	|  |         move.b d0,d0
    b4d4:	|  |         andi.l #255,d0
    b4da:	|  |         move.l d0,12(sp)
    b4de:	|  |         move.l 1cafa <DOSBase>,d0
    b4e4:	|  |         movea.l d0,a6
    b4e6:	|  |         move.l 16(sp),d1
    b4ea:	|  |         move.l 12(sp),d2
    b4ee:	|  |         jsr -312(a6)
    b4f2:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b4f6:	|  |         movea.l 148(sp),a0
    b4fa:	|  |         move.l 114(a0),d0
    b4fe:	|  |         move.l 156(sp),-(sp)
    b502:	|  |         move.l d0,-(sp)
    b504:	|  |         jsr d920 <saveObjectRef>
    b50a:	|  |         addq.l #8,sp

		me = me -> next;
    b50c:	|  |         movea.l 148(sp),a0
    b510:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b516:	|  |         addq.l #1,140(sp)
    b51a:	|  '-------> movea.l 140(sp),a0
    b51e:	|            cmpa.l 144(sp),a0
    b522:	'----------- blt.w b0c6 <savePeople+0x76>
	}
	return TRUE;
    b526:	             moveq #1,d0
}
    b528:	             move.l (sp)+,d2
    b52a:	             movea.l (sp)+,a6
    b52c:	             lea 144(sp),sp
    b530:	             rts

0000b532 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b532:	movea.l 4(sp),a0
    b536:	move.l 8(sp),(a0)
}
    b53a:	nop
    b53c:	rts

0000b53e <setDrawMode>:


void setDrawMode (int h, int ob) {
    b53e:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b540:	       move.l 12(sp),-(sp)
    b544:	       jsr a56a <findPerson>
    b54a:	       addq.l #4,sp
    b54c:	       move.l d0,(sp)
	if (! moveMe) return;
    b54e:	,----- beq.s b562 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b550:	|      move.l 8(sp),-(sp)
    b554:	|      move.l 4(sp),-(sp)
    b558:	|      jsr b568 <setMyDrawMode>
    b55e:	|      addq.l #8,sp
    b560:	|  ,-- bra.s b564 <setDrawMode+0x26>
	if (! moveMe) return;
    b562:	'--|-> nop
}
    b564:	   '-> addq.l #4,sp
    b566:	       rts

0000b568 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b568:	       moveq #19,d0
    b56a:	       cmp.l 8(sp),d0
    b56e:	,----- bcs.w ba46 <setMyDrawMode+0x4de>
    b572:	|      move.l 8(sp),d0
    b576:	|      add.l d0,d0
    b578:	|      movea.l d0,a0
    b57a:	|      adda.l #46470,a0
    b580:	|      move.w (a0),d0
    b582:	|      jmp (b586 <setMyDrawMode+0x1e>,pc,d0.w)
    b586:	|      .short 0x04c0
    b588:	|      ori.l #6684712,-(a4)
    b58e:	|      btst d0,-(a0)
    b590:	|      bchg d0,(a6)+
    b592:	|      bclr d0,(a4)+
    b594:	|      bset d0,(a2)+
    b596:	|      andi.b #84,(a6)
    b59a:	|      andi.l #55575312,(a2)
    b5a0:	|      .short 0x02d0
    b5a2:	|      bclr d1,(a0)
    b5a4:	|      .short 0x044a
    b5a6:	|      .short 0x040c
    b5a8:	|      movep.l d1,1158(a6)
    b5ac:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5ae:	|      movea.l 4(sp),a0
    b5b2:	|      clr.b 128(a0)
    b5b6:	|      movea.l 4(sp),a0
    b5ba:	|      move.b 128(a0),d0
    b5be:	|      movea.l 4(sp),a0
    b5c2:	|      move.b d0,127(a0)
    b5c6:	|      movea.l 4(sp),a0
    b5ca:	|      move.b 127(a0),d0
    b5ce:	|      movea.l 4(sp),a0
    b5d2:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b5d6:	|      movea.l 4(sp),a0
    b5da:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b5de:	|      movea.l 4(sp),a0
    b5e2:	|      move.b #64,130(a0)
			break;
    b5e8:	|  ,-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5ec:	|  |   movea.l 4(sp),a0
    b5f0:	|  |   clr.b 128(a0)
    b5f4:	|  |   movea.l 4(sp),a0
    b5f8:	|  |   move.b 128(a0),d0
    b5fc:	|  |   movea.l 4(sp),a0
    b600:	|  |   move.b d0,127(a0)
    b604:	|  |   movea.l 4(sp),a0
    b608:	|  |   move.b 127(a0),d0
    b60c:	|  |   movea.l 4(sp),a0
    b610:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b614:	|  |   movea.l 4(sp),a0
    b618:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b61c:	|  |   movea.l 4(sp),a0
    b620:	|  |   move.b #-128,130(a0)
			break;
    b626:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b62a:	|  |   movea.l 4(sp),a0
    b62e:	|  |   clr.b 128(a0)
    b632:	|  |   movea.l 4(sp),a0
    b636:	|  |   move.b 128(a0),d0
    b63a:	|  |   movea.l 4(sp),a0
    b63e:	|  |   move.b d0,127(a0)
    b642:	|  |   movea.l 4(sp),a0
    b646:	|  |   move.b 127(a0),d0
    b64a:	|  |   movea.l 4(sp),a0
    b64e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b652:	|  |   movea.l 4(sp),a0
    b656:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b65a:	|  |   movea.l 4(sp),a0
    b65e:	|  |   move.b #-64,130(a0)
			break;
    b664:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b668:	|  |   movea.l 4(sp),a0
    b66c:	|  |   clr.b 128(a0)
    b670:	|  |   movea.l 4(sp),a0
    b674:	|  |   move.b 128(a0),d0
    b678:	|  |   movea.l 4(sp),a0
    b67c:	|  |   move.b d0,127(a0)
    b680:	|  |   movea.l 4(sp),a0
    b684:	|  |   move.b 127(a0),d0
    b688:	|  |   movea.l 4(sp),a0
    b68c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b690:	|  |   movea.l 4(sp),a0
    b694:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b698:	|  |   movea.l 4(sp),a0
    b69c:	|  |   move.b #-2,130(a0)
			break;
    b6a2:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6a6:	|  |   movea.l 4(sp),a0
    b6aa:	|  |   clr.b 128(a0)
    b6ae:	|  |   movea.l 4(sp),a0
    b6b2:	|  |   move.b 128(a0),d0
    b6b6:	|  |   movea.l 4(sp),a0
    b6ba:	|  |   move.b d0,127(a0)
    b6be:	|  |   movea.l 4(sp),a0
    b6c2:	|  |   move.b 127(a0),d0
    b6c6:	|  |   movea.l 4(sp),a0
    b6ca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b6ce:	|  |   movea.l 4(sp),a0
    b6d2:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b6d8:	|  |   movea.l 4(sp),a0
    b6dc:	|  |   clr.b 130(a0)
			break;
    b6e0:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6e4:	|  |   movea.l 4(sp),a0
    b6e8:	|  |   clr.b 128(a0)
    b6ec:	|  |   movea.l 4(sp),a0
    b6f0:	|  |   move.b 128(a0),d0
    b6f4:	|  |   movea.l 4(sp),a0
    b6f8:	|  |   move.b d0,127(a0)
    b6fc:	|  |   movea.l 4(sp),a0
    b700:	|  |   move.b 127(a0),d0
    b704:	|  |   movea.l 4(sp),a0
    b708:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b70c:	|  |   movea.l 4(sp),a0
    b710:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b716:	|  |   movea.l 4(sp),a0
    b71a:	|  |   clr.b 130(a0)
			break;
    b71e:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b722:	|  |   movea.l 4(sp),a0
    b726:	|  |   clr.b 128(a0)
    b72a:	|  |   movea.l 4(sp),a0
    b72e:	|  |   move.b 128(a0),d0
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   move.b d0,127(a0)
    b73a:	|  |   movea.l 4(sp),a0
    b73e:	|  |   move.b 127(a0),d0
    b742:	|  |   movea.l 4(sp),a0
    b746:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b74a:	|  |   movea.l 4(sp),a0
    b74e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b754:	|  |   movea.l 4(sp),a0
    b758:	|  |   clr.b 130(a0)
			break;
    b75c:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   clr.b 128(a0)
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   move.b 128(a0),d0
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b d0,127(a0)
    b778:	|  |   movea.l 4(sp),a0
    b77c:	|  |   move.b 127(a0),d0
    b780:	|  |   movea.l 4(sp),a0
    b784:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b790:	|  |   movea.l 4(sp),a0
    b794:	|  |   clr.b 130(a0)
			break;
    b798:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   clr.b 128(a0)
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   move.b 128(a0),d0
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   move.b d0,127(a0)
    b7b4:	|  |   movea.l 4(sp),a0
    b7b8:	|  |   move.b 127(a0),d0
    b7bc:	|  |   movea.l 4(sp),a0
    b7c0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7c4:	|  |   movea.l 4(sp),a0
    b7c8:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b7cc:	|  |   movea.l 4(sp),a0
    b7d0:	|  |   move.b #64,130(a0)
			break;
    b7d6:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   clr.b 128(a0)
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   move.b 128(a0),d0
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b d0,127(a0)
    b7f2:	|  |   movea.l 4(sp),a0
    b7f6:	|  |   move.b 127(a0),d0
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b802:	|  |   movea.l 4(sp),a0
    b806:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b80a:	|  |   movea.l 4(sp),a0
    b80e:	|  |   move.b #-128,130(a0)
			break;
    b814:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b818:	|  |   movea.l 4(sp),a0
    b81c:	|  |   clr.b 128(a0)
    b820:	|  |   movea.l 4(sp),a0
    b824:	|  |   move.b 128(a0),d0
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b d0,127(a0)
    b830:	|  |   movea.l 4(sp),a0
    b834:	|  |   move.b 127(a0),d0
    b838:	|  |   movea.l 4(sp),a0
    b83c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b840:	|  |   movea.l 4(sp),a0
    b844:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b848:	|  |   movea.l 4(sp),a0
    b84c:	|  |   move.b #-64,130(a0)
			break;
    b852:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b856:	|  |   movea.l 4(sp),a0
    b85a:	|  |   move.b #-128,128(a0)
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   move.b 128(a0),d0
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b d0,127(a0)
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b 127(a0),d0
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b88a:	|  |   movea.l 4(sp),a0
    b88e:	|  |   clr.b 130(a0)
			break;
    b892:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b896:	|  |   movea.l 4(sp),a0
    b89a:	|  |   move.b #-128,128(a0)
    b8a0:	|  |   movea.l 4(sp),a0
    b8a4:	|  |   move.b 128(a0),d0
    b8a8:	|  |   movea.l 4(sp),a0
    b8ac:	|  |   move.b d0,127(a0)
    b8b0:	|  |   movea.l 4(sp),a0
    b8b4:	|  |   move.b 127(a0),d0
    b8b8:	|  |   movea.l 4(sp),a0
    b8bc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b8c0:	|  |   movea.l 4(sp),a0
    b8c4:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b8ca:	|  |   movea.l 4(sp),a0
    b8ce:	|  |   clr.b 130(a0)
			break;
    b8d2:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8d6:	|  |   movea.l 4(sp),a0
    b8da:	|  |   move.b #-128,128(a0)
    b8e0:	|  |   movea.l 4(sp),a0
    b8e4:	|  |   move.b 128(a0),d0
    b8e8:	|  |   movea.l 4(sp),a0
    b8ec:	|  |   move.b d0,127(a0)
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   move.b 127(a0),d0
    b8f8:	|  |   movea.l 4(sp),a0
    b8fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b900:	|  |   movea.l 4(sp),a0
    b904:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b90a:	|  |   movea.l 4(sp),a0
    b90e:	|  |   clr.b 130(a0)
			break;
    b912:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b916:	|  |   movea.l 4(sp),a0
    b91a:	|  |   move.b #-128,128(a0)
    b920:	|  |   movea.l 4(sp),a0
    b924:	|  |   move.b 128(a0),d0
    b928:	|  |   movea.l 4(sp),a0
    b92c:	|  |   move.b d0,127(a0)
    b930:	|  |   movea.l 4(sp),a0
    b934:	|  |   move.b 127(a0),d0
    b938:	|  |   movea.l 4(sp),a0
    b93c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b940:	|  |   movea.l 4(sp),a0
    b944:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b948:	|  |   movea.l 4(sp),a0
    b94c:	|  |   clr.b 130(a0)
			break;
    b950:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b954:	|  |   movea.l 4(sp),a0
    b958:	|  |   st 128(a0)
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b 128(a0),d0
    b964:	|  |   movea.l 4(sp),a0
    b968:	|  |   move.b d0,127(a0)
    b96c:	|  |   movea.l 4(sp),a0
    b970:	|  |   move.b 127(a0),d0
    b974:	|  |   movea.l 4(sp),a0
    b978:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b97c:	|  |   movea.l 4(sp),a0
    b980:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b986:	|  |   movea.l 4(sp),a0
    b98a:	|  |   clr.b 130(a0)
			break;
    b98e:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b992:	|  |   movea.l 4(sp),a0
    b996:	|  |   st 128(a0)
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   move.b 128(a0),d0
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   move.b d0,127(a0)
    b9aa:	|  |   movea.l 4(sp),a0
    b9ae:	|  |   move.b 127(a0),d0
    b9b2:	|  |   movea.l 4(sp),a0
    b9b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b9ba:	|  |   movea.l 4(sp),a0
    b9be:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b9c4:	|  |   movea.l 4(sp),a0
    b9c8:	|  |   clr.b 130(a0)
			break;
    b9cc:	|  +-- bra.w ba80 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9d0:	|  |   movea.l 4(sp),a0
    b9d4:	|  |   st 128(a0)
    b9d8:	|  |   movea.l 4(sp),a0
    b9dc:	|  |   move.b 128(a0),d0
    b9e0:	|  |   movea.l 4(sp),a0
    b9e4:	|  |   move.b d0,127(a0)
    b9e8:	|  |   movea.l 4(sp),a0
    b9ec:	|  |   move.b 127(a0),d0
    b9f0:	|  |   movea.l 4(sp),a0
    b9f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba02:	|  |   movea.l 4(sp),a0
    ba06:	|  |   clr.b 130(a0)
			break;
    ba0a:	|  +-- bra.s ba80 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba0c:	|  |   movea.l 4(sp),a0
    ba10:	|  |   st 128(a0)
    ba14:	|  |   movea.l 4(sp),a0
    ba18:	|  |   move.b 128(a0),d0
    ba1c:	|  |   movea.l 4(sp),a0
    ba20:	|  |   move.b d0,127(a0)
    ba24:	|  |   movea.l 4(sp),a0
    ba28:	|  |   move.b 127(a0),d0
    ba2c:	|  |   movea.l 4(sp),a0
    ba30:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba3c:	|  |   movea.l 4(sp),a0
    ba40:	|  |   clr.b 130(a0)
			break;
    ba44:	|  +-- bra.s ba80 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba46:	'--|-> movea.l 4(sp),a0
    ba4a:	   |   clr.b 128(a0)
    ba4e:	   |   movea.l 4(sp),a0
    ba52:	   |   move.b 128(a0),d0
    ba56:	   |   movea.l 4(sp),a0
    ba5a:	   |   move.b d0,127(a0)
    ba5e:	   |   movea.l 4(sp),a0
    ba62:	   |   move.b 127(a0),d0
    ba66:	   |   movea.l 4(sp),a0
    ba6a:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba6e:	   |   movea.l 4(sp),a0
    ba72:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    ba76:	   |   movea.l 4(sp),a0
    ba7a:	   |   clr.b 130(a0)
			break;
    ba7e:	   |   nop
	}
}
    ba80:	   '-> nop
    ba82:	       rts

0000ba84 <shufflePeople>:

void shufflePeople () {
    ba84:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    ba88:	             move.l #117586,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    ba90:	             move.l 1cb52 <allPeople>,d0
    ba96:	,----------- beq.w bb6c <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    ba9a:	|     ,----- bra.w bb5c <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    ba9e:	|  ,--|----> movea.l 16(sp),a0
    baa2:	|  |  |      movea.l (a0),a0
    baa4:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    baaa:	|  |  |      movea.l 16(sp),a0
    baae:	|  |  |      movea.l (a0),a0
    bab0:	|  |  |      move.l 118(a0),d0
    bab4:	|  |  |      moveq #1,d1
    bab6:	|  |  |      and.l d1,d0
    bab8:	|  |  |  ,-- beq.s bad0 <shufflePeople+0x4c>
    baba:	|  |  |  |   move.l #1148846080,-(sp)
    bac0:	|  |  |  |   move.l 16(sp),-(sp)
    bac4:	|  |  |  |   jsr 17492 <__addsf3>
    baca:	|  |  |  |   addq.l #8,sp
    bacc:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bad0:	|  |  |  '-> movea.l 16(sp),a0
    bad4:	|  |  |      movea.l (a0),a0
    bad6:	|  |  |      movea.l 36(a0),a0
    bada:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bae0:	|  |  |      movea.l 16(sp),a0
    bae4:	|  |  |      movea.l (a0),a0
    bae6:	|  |  |      movea.l 36(a0),a0
    baea:	|  |  |      move.l 118(a0),d0
    baee:	|  |  |      moveq #1,d1
    baf0:	|  |  |      and.l d1,d0
    baf2:	|  |  |  ,-- beq.s bb0a <shufflePeople+0x86>
    baf4:	|  |  |  |   move.l #1148846080,-(sp)
    bafa:	|  |  |  |   move.l 12(sp),-(sp)
    bafe:	|  |  |  |   jsr 17492 <__addsf3>
    bb04:	|  |  |  |   addq.l #8,sp
    bb06:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb0a:	|  |  |  '-> move.l 8(sp),-(sp)
    bb0e:	|  |  |      move.l 16(sp),-(sp)
    bb12:	|  |  |      jsr 17842 <__gtsf2>
    bb18:	|  |  |      addq.l #8,sp
    bb1a:	|  |  |      tst.l d0
    bb1c:	|  |  |  ,-- ble.s bb4e <shufflePeople+0xca>
			A = (*thisReference);
    bb1e:	|  |  |  |   movea.l 16(sp),a0
    bb22:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bb26:	|  |  |  |   movea.l 16(sp),a0
    bb2a:	|  |  |  |   movea.l (a0),a0
    bb2c:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bb30:	|  |  |  |   movea.l (sp),a0
    bb32:	|  |  |  |   move.l 36(a0),d0
    bb36:	|  |  |  |   movea.l 4(sp),a0
    bb3a:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bb3e:	|  |  |  |   movea.l (sp),a0
    bb40:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bb46:	|  |  |  |   movea.l 16(sp),a0
    bb4a:	|  |  |  |   move.l (sp),(a0)
    bb4c:	|  |  +--|-- bra.s bb5c <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bb4e:	|  |  |  '-> movea.l 16(sp),a0
    bb52:	|  |  |      move.l (a0),d0
    bb54:	|  |  |      moveq #36,d1
    bb56:	|  |  |      add.l d0,d1
    bb58:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bb5c:	|  |  '----> movea.l 16(sp),a0
    bb60:	|  |         movea.l (a0),a0
    bb62:	|  |         move.l 36(a0),d0
    bb66:	|  '-------- bne.w ba9e <shufflePeople+0x1a>
    bb6a:	|        ,-- bra.s bb6e <shufflePeople+0xea>
	if (!allPeople) return;
    bb6c:	'--------|-> nop
		}
	}
}
    bb6e:	         '-> lea 20(sp),sp
    bb72:	             rts

0000bb74 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bb74:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bb76:	       tst.l 8(sp)
    bb7a:	   ,-- bgt.s bb80 <setCharacterWalkSpeed+0xc>
    bb7c:	   |   clr.w d0
    bb7e:	,--|-- bra.s bb9e <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bb80:	|  '-> move.l 12(sp),-(sp)
    bb84:	|      jsr a56a <findPerson>
    bb8a:	|      addq.l #4,sp
    bb8c:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bb8e:	|  ,-- bne.s bb94 <setCharacterWalkSpeed+0x20>
    bb90:	|  |   clr.w d0
    bb92:	+--|-- bra.s bb9e <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bb94:	|  '-> movea.l (sp),a0
    bb96:	|      move.l 8(sp),28(a0)
	return TRUE;
    bb9c:	|      moveq #1,d0
}
    bb9e:	'----> addq.l #4,sp
    bba0:	       rts

0000bba2 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bba2:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bba4:	       move.l 8(sp),-(sp)
    bba8:	       jsr a56a <findPerson>
    bbae:	       addq.l #4,sp
    bbb0:	       move.l d0,(sp)
    if (thisPerson) {
    bbb2:	,----- beq.s bbd2 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bbb4:	|      movea.l (sp),a0
    bbb6:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bbbc:	|      moveq #2,d0
    bbbe:	|      and.l 12(sp),d0
    bbc2:	|  ,-- beq.s bbce <setPersonExtra+0x2c>
    bbc4:	|  |   movea.l (sp),a0
    bbc6:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bbce:	|  '-> moveq #1,d0
    bbd0:	|  ,-- bra.s bbd4 <setPersonExtra+0x32>
    }
    return FALSE;
    bbd2:	'--|-> clr.w d0
}
    bbd4:	   '-> addq.l #4,sp
    bbd6:	       rts

0000bbd8 <setScale>:


void setScale (short int h, short int d) {
    bbd8:	subq.l #4,sp
    bbda:	move.l 8(sp),d1
    bbde:	move.l 12(sp),d0
    bbe2:	move.w d1,d1
    bbe4:	move.w d1,2(sp)
    bbe8:	move.w d0,d0
    bbea:	move.w d0,(sp)
	scaleHorizon = h;
    bbec:	move.w 2(sp),1c478 <scaleHorizon>
	scaleDivide = d;
    bbf4:	move.w (sp),1c47a <scaleDivide>
}
    bbfa:	nop
    bbfc:	addq.l #4,sp
    bbfe:	rts

0000bc00 <setShown>:

void setShown (BOOL h, int ob) {
    bc00:	    subq.l #8,sp
    bc02:	    move.l 12(sp),d0
    bc06:	    move.w d0,d0
    bc08:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc0c:	    move.l 16(sp),-(sp)
    bc10:	    jsr a56a <findPerson>
    bc16:	    addq.l #4,sp
    bc18:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc1c:	,-- beq.s bc28 <setShown+0x28>
    bc1e:	|   movea.l 4(sp),a0
    bc22:	|   move.w 2(sp),104(a0)
}
    bc28:	'-> nop
    bc2a:	    addq.l #8,sp
    bc2c:	    rts

0000bc2e <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bc2e:	       subq.l #8,sp
    bc30:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bc32:	       movea.l 16(sp),a0
    bc36:	       move.l 92(a0),d0
    bc3a:	       move.l d0,d1
    bc3c:	       addi.l #360,d1
    bc42:	       movea.l 16(sp),a0
    bc46:	       move.l 96(a0),d0
    bc4a:	       move.l d1,d2
    bc4c:	       sub.l d0,d2
    bc4e:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bc52:	       movea.l 16(sp),a0
    bc56:	       move.l 122(a0),d0
    bc5a:	   ,-- beq.s bc66 <spinStep+0x38>
    bc5c:	   |   movea.l 16(sp),a0
    bc60:	   |   move.l 122(a0),d0
    bc64:	,--|-- bra.s bc80 <spinStep+0x52>
    bc66:	|  '-> movea.l 16(sp),a0
    bc6a:	|      movea.l 80(a0),a0
    bc6e:	|      move.l 4(a0),d0
    bc72:	|      move.l d0,-(sp)
    bc74:	|      pea 168 <decodeFilename+0x50>
    bc78:	|      jsr 17cae <__divsi3>
    bc7e:	|      addq.l #8,sp
    bc80:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bc84:	   ,-- bra.s bc8e <spinStep+0x60>
		diff -= 360;
    bc86:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bc8e:	|  '-> cmpi.l #180,8(sp)
    bc96:	'----- bgt.s bc86 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bc98:	       move.l 8(sp),d0
    bc9c:	       cmp.l 4(sp),d0
    bca0:	   ,-- blt.s bcbe <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bca2:	   |   movea.l 16(sp),a0
    bca6:	   |   move.l 92(a0),d0
    bcaa:	   |   sub.l 4(sp),d0
    bcae:	   |   move.l d0,-(sp)
    bcb0:	   |   move.l 20(sp),-(sp)
    bcb4:	   |   jsr bd9e <turnMeAngle>
    bcba:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bcbc:	,--|-- bra.s bd04 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bcbe:	|  '-> move.l 4(sp),d0
    bcc2:	|      neg.l d0
    bcc4:	|      cmp.l 8(sp),d0
    bcc8:	|  ,-- blt.s bce6 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bcca:	|  |   movea.l 16(sp),a0
    bcce:	|  |   move.l 92(a0),d0
    bcd2:	|  |   add.l 4(sp),d0
    bcd6:	|  |   move.l d0,-(sp)
    bcd8:	|  |   move.l 20(sp),-(sp)
    bcdc:	|  |   jsr bd9e <turnMeAngle>
    bce2:	|  |   addq.l #8,sp
}
    bce4:	+--|-- bra.s bd04 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bce6:	|  '-> movea.l 16(sp),a0
    bcea:	|      move.l 96(a0),d0
    bcee:	|      move.l d0,-(sp)
    bcf0:	|      move.l 20(sp),-(sp)
    bcf4:	|      jsr bd9e <turnMeAngle>
    bcfa:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bcfc:	|      movea.l 16(sp),a0
    bd00:	|      clr.w 66(a0)
}
    bd04:	'----> nop
    bd06:	       move.l (sp)+,d2
    bd08:	       addq.l #8,sp
    bd0a:	       rts

0000bd0c <stopPerson>:


BOOL stopPerson (int o) {
    bd0c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd0e:	       move.l 8(sp),-(sp)
    bd12:	       jsr a56a <findPerson>
    bd18:	       addq.l #4,sp
    bd1a:	       move.l d0,(sp)
    if (moveMe)
    bd1c:	,----- beq.s bd5a <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd1e:	|      movea.l (sp),a0
    bd20:	|      move.l 68(a0),d0
    bd24:	+----- beq.s bd5a <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bd26:	|      movea.l (sp),a0
    bd28:	|      move.l 68(a0),d0
    bd2c:	|      move.l d0,-(sp)
    bd2e:	|      jsr 4f64 <abortFunction>
    bd34:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bd36:	|      movea.l (sp),a0
    bd38:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bd3c:	|      movea.l (sp),a0
    bd3e:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bd42:	|      movea.l (sp),a0
    bd44:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bd48:	|      clr.l -(sp)
    bd4a:	|      move.l 4(sp),-(sp)
    bd4e:	|      jsr 4106 <setFrames>
    bd54:	|      addq.l #8,sp
            return TRUE;
    bd56:	|      moveq #1,d0
    bd58:	|  ,-- bra.s bd5c <stopPerson+0x50>
        }
    return FALSE;
    bd5a:	'--|-> clr.w d0
}
    bd5c:	   '-> addq.l #4,sp
    bd5e:	       rts

0000bd60 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bd60:	       subq.l #8,sp
	int total = 0;
    bd62:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bd66:	       clr.l (sp)
    bd68:	   ,-- bra.s bd8a <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bd6a:	,--|-> movea.l 12(sp),a0
    bd6e:	|  |   movea.l 4(a0),a0
    bd72:	|  |   move.l (sp),d1
    bd74:	|  |   move.l d1,d0
    bd76:	|  |   add.l d0,d0
    bd78:	|  |   add.l d1,d0
    bd7a:	|  |   add.l d0,d0
    bd7c:	|  |   add.l d0,d0
    bd7e:	|  |   adda.l d0,a0
    bd80:	|  |   move.l 4(a0),d0
    bd84:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bd88:	|  |   addq.l #1,(sp)
    bd8a:	|  '-> movea.l 12(sp),a0
    bd8e:	|      move.l 8(a0),d0
    bd92:	|      cmp.l (sp),d0
    bd94:	'----- bgt.s bd6a <timeForAnim+0xa>
	}
	return total;
    bd96:	       move.l 4(sp),d0
}
    bd9a:	       addq.l #8,sp
    bd9c:	       rts

0000bd9e <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bd9e:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bda0:	       movea.l 8(sp),a0
    bda4:	       movea.l 80(a0),a0
    bda8:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bdac:	       movea.l 8(sp),a0
    bdb0:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bdb6:	       move.l (sp),-(sp)
    bdb8:	       pea b4 <_start+0xb4>
    bdbc:	       jsr 17cae <__divsi3>
    bdc2:	       addq.l #8,sp
    bdc4:	       move.l d0,d1
    bdc6:	       addi.l #180,d1
    bdcc:	       movea.l 8(sp),a0
    bdd0:	       move.l 100(a0),d0
    bdd4:	       add.l d1,d0
    bdd6:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bdda:	   ,-- bra.s bde4 <turnMeAngle+0x46>
    bddc:	,--|-> addi.l #-360,12(sp)
    bde4:	|  '-> cmpi.l #359,12(sp)
    bdec:	'----- bgt.s bddc <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bdee:	       move.l (sp),-(sp)
    bdf0:	       move.l 16(sp),-(sp)
    bdf4:	       jsr 17c30 <__mulsi3>
    bdfa:	       addq.l #8,sp
    bdfc:	       pea 168 <decodeFilename+0x50>
    be00:	       move.l d0,-(sp)
    be02:	       jsr 17cae <__divsi3>
    be08:	       addq.l #8,sp
    be0a:	       movea.l 8(sp),a0
    be0e:	       move.l d0,106(a0)
}
    be12:	       nop
    be14:	       addq.l #4,sp
    be16:	       rts

0000be18 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be18:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be1a:	          move.l 8(sp),-(sp)
    be1e:	          jsr a56a <findPerson>
    be24:	          addq.l #4,sp
    be26:	          move.l d0,(sp)
    if (thisPerson) {
    be28:	,-------- beq.s be88 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    be2a:	|         movea.l (sp),a0
    be2c:	|         move.l 68(a0),d0
    be30:	|     ,-- beq.s be42 <turnPersonToFace+0x2a>
    be32:	|     |   movea.l (sp),a0
    be34:	|     |   move.l 68(a0),d0
    be38:	|     |   move.l d0,-(sp)
    be3a:	|     |   jsr 4f64 <abortFunction>
    be40:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    be42:	|     '-> movea.l (sp),a0
    be44:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    be48:	|         movea.l (sp),a0
    be4a:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    be4e:	|         movea.l (sp),a0
    be50:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    be54:	|         move.l 12(sp),-(sp)
    be58:	|         move.l 4(sp),-(sp)
    be5c:	|         jsr bd9e <turnMeAngle>
    be62:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    be64:	|         movea.l 1ca42 <speech>,a0
    be6a:	|         move.l (a0),d0
    be6c:	|         cmp.l (sp),d0
    be6e:	|  ,----- bne.s be74 <turnPersonToFace+0x5c>
    be70:	|  |      moveq #2,d0
    be72:	|  |  ,-- bra.s be76 <turnPersonToFace+0x5e>
    be74:	|  '--|-> moveq #0,d0
    be76:	|     '-> move.l d0,-(sp)
    be78:	|         move.l 4(sp),-(sp)
    be7c:	|         jsr 4106 <setFrames>
    be82:	|         addq.l #8,sp
        return TRUE;
    be84:	|         moveq #1,d0
    be86:	|     ,-- bra.s be8a <turnPersonToFace+0x72>
    }
    return FALSE;
    be88:	'-----|-> clr.w d0
}
    be8a:	      '-> addq.l #4,sp
    be8c:	          rts

0000be8e <walkAllPeople>:

void walkAllPeople() {
    be8e:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    be90:	             move.l 1cb52 <allPeople>,(sp)

	while (thisPerson) {
    be96:	   ,-------- bra.s bf06 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    be98:	,--|-------> movea.l (sp),a0
    be9a:	|  |         move.w 64(a0),d0
    be9e:	|  |     ,-- beq.s beb2 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bea0:	|  |     |   pea 1 <_start+0x1>
    bea4:	|  |     |   move.l 4(sp),-(sp)
    bea8:	|  |     |   jsr bf12 <walkMe>
    beae:	|  |     |   addq.l #8,sp
    beb0:	|  |  ,--|-- bra.s bed2 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    beb2:	|  |  |  '-> movea.l (sp),a0
    beb4:	|  |  |      move.w 66(a0),d0
    beb8:	|  |  +----- beq.s bed2 <walkAllPeople+0x44>
			spinStep(thisPerson);
    beba:	|  |  |      move.l (sp),-(sp)
    bebc:	|  |  |      jsr bc2e <spinStep>
    bec2:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bec4:	|  |  |      clr.l -(sp)
    bec6:	|  |  |      move.l 4(sp),-(sp)
    beca:	|  |  |      jsr 4106 <setFrames>
    bed0:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bed2:	|  |  '----> movea.l (sp),a0
    bed4:	|  |         move.w 64(a0),d0
    bed8:	|  |     ,-- bne.s bf00 <walkAllPeople+0x72>
    beda:	|  |     |   movea.l (sp),a0
    bedc:	|  |     |   move.w 66(a0),d0
    bee0:	|  |     +-- bne.s bf00 <walkAllPeople+0x72>
    bee2:	|  |     |   movea.l (sp),a0
    bee4:	|  |     |   move.l 68(a0),d0
    bee8:	|  |     +-- beq.s bf00 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    beea:	|  |     |   movea.l (sp),a0
    beec:	|  |     |   move.l 68(a0),d0
    bef0:	|  |     |   move.l d0,-(sp)
    bef2:	|  |     |   jsr 70d6 <restartFunction>
    bef8:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    befa:	|  |     |   movea.l (sp),a0
    befc:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bf00:	|  |     '-> movea.l (sp),a0
    bf02:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bf06:	|  '-------> tst.l (sp)
    bf08:	'----------- bne.s be98 <walkAllPeople+0xa>
	}
}
    bf0a:	             nop
    bf0c:	             nop
    bf0e:	             addq.l #4,sp
    bf10:	             rts

0000bf12 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf12:	                lea -20(sp),sp
    bf16:	                move.l d3,-(sp)
    bf18:	                move.l d2,-(sp)
    bf1a:	                move.l 36(sp),d0
    bf1e:	                move.w d0,d0
    bf20:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf24:	                cmpi.w #-1,10(sp)
    bf2a:	,-------------- bne.s bf32 <walkMe+0x20>
    bf2c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf32:	>-------------> movea.l 32(sp),a0
    bf36:	|               move.l 48(a0),d0
    bf3a:	|               move.l d0,-(sp)
    bf3c:	|               jsr 176d6 <__floatsisf>
    bf42:	|               addq.l #4,sp
    bf44:	|               move.l d0,d1
    bf46:	|               movea.l 32(sp),a0
    bf4a:	|               move.l (a0),d0
    bf4c:	|               move.l d0,-(sp)
    bf4e:	|               move.l d1,-(sp)
    bf50:	|               jsr 179ca <__subsf3>
    bf56:	|               addq.l #8,sp
    bf58:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bf5c:	|               movea.l 32(sp),a0
    bf60:	|               move.l 52(a0),d0
    bf64:	|               move.l d0,-(sp)
    bf66:	|               jsr 176d6 <__floatsisf>
    bf6c:	|               addq.l #4,sp
    bf6e:	|               move.l d0,d1
    bf70:	|               movea.l 32(sp),a0
    bf74:	|               move.l 4(a0),d0
    bf78:	|               move.l d0,-(sp)
    bf7a:	|               move.l d1,-(sp)
    bf7c:	|               jsr 179ca <__subsf3>
    bf82:	|               addq.l #8,sp
    bf84:	|               move.l d0,-(sp)
    bf86:	|               move.l d0,-(sp)
    bf88:	|               jsr 17492 <__addsf3>
    bf8e:	|               addq.l #8,sp
    bf90:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bf94:	|               movea.l 32(sp),a0
    bf98:	|               move.l 32(a0),d2
    bf9c:	|               movea.l 32(sp),a0
    bfa0:	|               move.l 28(a0),d0
    bfa4:	|               move.l d0,-(sp)
    bfa6:	|               jsr 176d6 <__floatsisf>
    bfac:	|               addq.l #4,sp
    bfae:	|               move.l d0,-(sp)
    bfb0:	|               move.l d2,-(sp)
    bfb2:	|               jsr 17788 <__mulsf3>
    bfb8:	|               addq.l #8,sp
    bfba:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bfbe:	|               move.l 24(sp),-(sp)
    bfc2:	|               jsr 175f8 <__extendsfdf2>
    bfc8:	|               addq.l #4,sp
    bfca:	|               move.l #-1717986918,-(sp)
    bfd0:	|               move.l #1070176665,-(sp)
    bfd6:	|               move.l d1,-(sp)
    bfd8:	|               move.l d0,-(sp)
    bfda:	|               jsr 178ae <__ltdf2>
    bfe0:	|               lea 16(sp),sp
    bfe4:	|               tst.l d0
    bfe6:	|           ,-- bge.s bff0 <walkMe+0xde>
    bfe8:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bff0:	|           '-> move.l 20(sp),-(sp)
    bff4:	|               jsr 1766e <__fixsfsi>
    bffa:	|               addq.l #4,sp
    bffc:	|               move.l d0,-(sp)
    bffe:	|               jsr 915a <TF_abs>
    c004:	|               addq.l #4,sp
    c006:	|               move.l d0,d2
    c008:	|               move.l 16(sp),-(sp)
    c00c:	|               jsr 1766e <__fixsfsi>
    c012:	|               addq.l #4,sp
    c014:	|               move.l d0,-(sp)
    c016:	|               jsr 915a <TF_abs>
    c01c:	|               addq.l #4,sp
    c01e:	|               cmp.l d2,d0
    c020:	|        ,----- bgt.s c044 <walkMe+0x132>
    c022:	|        |      move.l 20(sp),-(sp)
    c026:	|        |      jsr 1766e <__fixsfsi>
    c02c:	|        |      addq.l #4,sp
    c02e:	|        |      move.l d0,-(sp)
    c030:	|        |      jsr 915a <TF_abs>
    c036:	|        |      addq.l #4,sp
    c038:	|        |      move.l d0,-(sp)
    c03a:	|        |      jsr 176d6 <__floatsisf>
    c040:	|        |      addq.l #4,sp
    c042:	|        |  ,-- bra.s c064 <walkMe+0x152>
    c044:	|        '--|-> move.l 16(sp),-(sp)
    c048:	|           |   jsr 1766e <__fixsfsi>
    c04e:	|           |   addq.l #4,sp
    c050:	|           |   move.l d0,-(sp)
    c052:	|           |   jsr 915a <TF_abs>
    c058:	|           |   addq.l #4,sp
    c05a:	|           |   move.l d0,-(sp)
    c05c:	|           |   jsr 176d6 <__floatsisf>
    c062:	|           |   addq.l #4,sp
    c064:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c068:	|               move.l 12(sp),-(sp)
    c06c:	|               jsr 1766e <__fixsfsi>
    c072:	|               addq.l #4,sp
    c074:	|               move.l d0,-(sp)
    c076:	|               jsr 915a <TF_abs>
    c07c:	|               addq.l #4,sp
    c07e:	|               move.l d0,-(sp)
    c080:	|               jsr 176d6 <__floatsisf>
    c086:	|               addq.l #4,sp
    c088:	|               move.l d0,-(sp)
    c08a:	|               move.l 28(sp),-(sp)
    c08e:	|               jsr 178fc <__ltsf2>
    c094:	|               addq.l #8,sp
    c096:	|               tst.l d0
    c098:	|        ,----- bge.w c14a <walkMe+0x238>
			if (thisPerson->spinning) {
    c09c:	|        |      movea.l 32(sp),a0
    c0a0:	|        |      move.w 66(a0),d0
    c0a4:	|        |  ,-- beq.s c0c2 <walkMe+0x1b0>
				spinStep(thisPerson);
    c0a6:	|        |  |   move.l 32(sp),-(sp)
    c0aa:	|        |  |   jsr bc2e <spinStep>
    c0b0:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c0b2:	|        |  |   pea 1 <_start+0x1>
    c0b6:	|        |  |   move.l 36(sp),-(sp)
    c0ba:	|        |  |   jsr 4106 <setFrames>
    c0c0:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c0c2:	|        |  '-> move.l 24(sp),-(sp)
    c0c6:	|        |      move.l 16(sp),-(sp)
    c0ca:	|        |      jsr 1758c <__divsf3>
    c0d0:	|        |      addq.l #8,sp
    c0d2:	|        |      move.l d0,24(sp)
			if (move)
    c0d6:	|        |      tst.w 10(sp)
    c0da:	|        |  ,-- beq.s c144 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c0dc:	|        |  |   movea.l 32(sp),a0
    c0e0:	|        |  |   move.l 4(a0),d2
    c0e4:	|        |  |   move.l 24(sp),d0
    c0e8:	|        |  |   move.l d0,-(sp)
    c0ea:	|        |  |   move.l d0,-(sp)
    c0ec:	|        |  |   jsr 17492 <__addsf3>
    c0f2:	|        |  |   addq.l #8,sp
    c0f4:	|        |  |   move.l d0,-(sp)
    c0f6:	|        |  |   move.l 20(sp),-(sp)
    c0fa:	|        |  |   jsr 1758c <__divsf3>
    c100:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c102:	|        |  |   move.l d0,-(sp)
    c104:	|        |  |   move.l d2,-(sp)
    c106:	|        |  |   jsr 17492 <__addsf3>
    c10c:	|        |  |   addq.l #8,sp
    c10e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c110:	|        |  |   movea.l 32(sp),a0
    c114:	|        |  |   move.l (a0),d3
    c116:	|        |  |   move.l 24(sp),-(sp)
    c11a:	|        |  |   move.l 24(sp),-(sp)
    c11e:	|        |  |   jsr 1758c <__divsf3>
    c124:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c126:	|        |  |   move.l d0,-(sp)
    c128:	|        |  |   move.l d3,-(sp)
    c12a:	|        |  |   jsr 17492 <__addsf3>
    c130:	|        |  |   addq.l #8,sp
    c132:	|        |  |   move.l d2,-(sp)
    c134:	|        |  |   move.l d0,-(sp)
    c136:	|        |  |   move.l 40(sp),-(sp)
    c13a:	|        |  |   jsr ad14 <moveAndScale>
    c140:	|        |  |   lea 12(sp),sp
			return TRUE;
    c144:	|        |  '-> moveq #1,d0
    c146:	|  ,-----|----- bra.w c1f8 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c14a:	|  |     '----> movea.l 32(sp),a0
    c14e:	|  |            move.l 56(a0),d0
    c152:	|  |            moveq #-1,d1
    c154:	|  |            cmp.l d0,d1
    c156:	|  |        ,-- bne.s c18e <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c158:	|  |        |   movea.l 32(sp),a0
    c15c:	|  |        |   move.l 110(a0),d0
    c160:	|  |        |   moveq #-1,d1
    c162:	|  |        |   cmp.l d0,d1
    c164:	|  |  ,-----|-- beq.s c1a2 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c166:	|  |  |     |   movea.l 32(sp),a0
    c16a:	|  |  |     |   move.l 110(a0),d0
    c16e:	|  |  |     |   movea.l 32(sp),a0
    c172:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c176:	|  |  |     |   movea.l 32(sp),a0
    c17a:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c180:	|  |  |     |   move.l 32(sp),-(sp)
    c184:	|  |  |     |   jsr bc2e <spinStep>
    c18a:	|  |  |     |   addq.l #4,sp
			}
			break;
    c18c:	|  |  +-----|-- bra.s c1a2 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c18e:	|  |  |     '-> move.l 32(sp),-(sp)
    c192:	|  |  |         jsr 98cc <doBorderStuff>
    c198:	|  |  |         addq.l #4,sp
    c19a:	|  |  |         tst.w d0
    c19c:	|  |  |  ,----- beq.s c1a6 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c19e:	'--|--|--|----- bra.w bf32 <walkMe+0x20>
			break;
    c1a2:	   |  '--|----> nop
    c1a4:	   |     |  ,-- bra.s c1a8 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c1a6:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c1a8:	   |        '-> movea.l 32(sp),a0
    c1ac:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c1b0:	   |            clr.l -(sp)
    c1b2:	   |            move.l 36(sp),-(sp)
    c1b6:	   |            jsr 4106 <setFrames>
    c1bc:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c1be:	   |            movea.l 32(sp),a0
    c1c2:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c1c6:	   |            move.l d0,-(sp)
    c1c8:	   |            jsr 176d6 <__floatsisf>
    c1ce:	   |            addq.l #4,sp
    c1d0:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c1d2:	   |            movea.l 32(sp),a0
    c1d6:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c1da:	   |            move.l d0,-(sp)
    c1dc:	   |            jsr 176d6 <__floatsisf>
    c1e2:	   |            addq.l #4,sp
    c1e4:	   |            move.l d2,-(sp)
    c1e6:	   |            move.l d0,-(sp)
    c1e8:	   |            move.l 40(sp),-(sp)
    c1ec:	   |            jsr ad14 <moveAndScale>
    c1f2:	   |            lea 12(sp),sp
	return FALSE;
    c1f6:	   |            clr.w d0
}
    c1f8:	   '----------> move.l (sp)+,d2
    c1fa:	                move.l (sp)+,d3
    c1fc:	                lea 20(sp),sp
    c200:	                rts

0000c202 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c202:	       subq.l #8,sp
    c204:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c206:	   ,-- bra.s c236 <clearStackLib+0x34>
		k = stackLib;
    c208:	,--|-> move.l 1cb7e <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c210:	|  |   movea.l 1cb7e <stackLib>,a0
    c216:	|  |   move.l 4(a0),d0
    c21a:	|  |   move.l d0,1cb7e <stackLib>
		FreeVec(k);
    c220:	|  |   move.l 8(sp),4(sp)
    c226:	|  |   move.l 1caf2 <SysBase>,d0
    c22c:	|  |   movea.l d0,a6
    c22e:	|  |   movea.l 4(sp),a1
    c232:	|  |   jsr -690(a6)
	while (stackLib) {
    c236:	|  '-> move.l 1cb7e <stackLib>,d0
    c23c:	'----- bne.s c208 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c23e:	       clr.l 1cb7a <stackLibTotal>
}
    c244:	       nop
    c246:	       movea.l (sp)+,a6
    c248:	       addq.l #8,sp
    c24a:	       rts

0000c24c <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c24c:	          lea -128(sp),sp
    c250:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c254:	      ,-- bra.s c266 <loadGame+0x1a>
    c256:	   ,--|-> move.l 1ca8a <allRunningFunctions>,d0
    c25c:	   |  |   move.l d0,-(sp)
    c25e:	   |  |   jsr 5f98 <finishFunction>
    c264:	   |  |   addq.l #4,sp
    c266:	   |  '-> move.l 1ca8a <allRunningFunctions>,d0
    c26c:	   '----- bne.s c256 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c26e:	          pea 1cb82 <ssgVersion>
    c274:	          pea 193df <PutChar+0x1699>
    c27a:	          pea 41 <_start+0x41>
    c27e:	          pea 53 <_start+0x53>
    c282:	          move.l 160(sp),-(sp)
    c286:	          jsr 6cbe <openAndVerify>
    c28c:	          lea 20(sp),sp
    c290:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c294:	      ,-- bne.s c29c <loadGame+0x50>
    c296:	      |   clr.w d0
    c298:	,-----|-- bra.w c542 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c29c:	|     '-> move.l 112(sp),108(sp)
    c2a2:	|         lea 140(sp),a0
    c2a6:	|         lea -126(a0),a0
    c2aa:	|         move.l a0,120(sp)
    c2ae:	|         moveq #8,d0
    c2b0:	|         move.l d0,116(sp)
    c2b4:	|         move.l 1cafa <DOSBase>,d0
    c2ba:	|         movea.l d0,a6
    c2bc:	|         move.l 108(sp),d1
    c2c0:	|         move.l 120(sp),d2
    c2c4:	|         move.l 116(sp),d3
    c2c8:	|         jsr -42(a6)
    c2cc:	|         move.l d0,132(sp)
    c2d0:	|         move.l 132(sp),d0
    c2d4:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c2d8:	|         moveq #8,d0
    c2da:	|         cmp.l 128(sp),d0
    c2de:	|     ,-- beq.s c2ee <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c2e0:	|     |   pea 19400 <PutChar+0x16ba>
    c2e6:	|     |   jsr 172a4 <KPrintF>
    c2ec:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c2ee:	|     '-> move.l 14(sp),d1
    c2f2:	|         move.l 1ca94 <fileTime>,d0
    c2f8:	|         cmp.l d1,d0
    c2fa:	|     ,-- bne.s c30a <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c2fc:	|     |   move.l 18(sp),d1
    c300:	|     |   move.l 1ca98 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c306:	|     |   cmp.l d1,d0
    c308:	|  ,--|-- beq.s c32a <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c30a:	|  |  '-> move.l 144(sp),-(sp)
    c30e:	|  |      pea 1941c <PutChar+0x16d6>
    c314:	|  |      pea 194e3 <PutChar+0x179d>
    c31a:	|  |      jsr 172a4 <KPrintF>
    c320:	|  |      lea 12(sp),sp
		return FALSE; 
    c324:	|  |      clr.w d0
    c326:	+--|----- bra.w c542 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c32a:	|  '----> move.l 112(sp),124(sp)
    c330:	|         move.l 1cafa <DOSBase>,d0
    c336:	|         movea.l d0,a6
    c338:	|         move.l 124(sp),d1
    c33c:	|         jsr -306(a6)
    c340:	|         move.l d0,136(sp)
    c344:	|         move.l 136(sp),d0
    c348:	|         move.l d0,d0
    c34a:	|         move.w d0,1c342 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c350:	|         move.l 112(sp),100(sp)
    c356:	|         move.l 1cafa <DOSBase>,d0
    c35c:	|         movea.l d0,a6
    c35e:	|         move.l 100(sp),d1
    c362:	|         jsr -306(a6)
    c366:	|         move.l d0,96(sp)
    c36a:	|         move.l 96(sp),d0
    c36e:	|         move.l d0,d0
    c370:	|         move.w d0,1ca92 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c376:	|         move.l 112(sp),92(sp)
    c37c:	|         move.l 1cafa <DOSBase>,d0
    c382:	|         movea.l d0,a6
    c384:	|         move.l 92(sp),d1
    c388:	|         jsr -306(a6)
    c38c:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c390:	|         move.l 112(sp),84(sp)
    c396:	|         move.l 1cafa <DOSBase>,d0
    c39c:	|         movea.l d0,a6
    c39e:	|         move.l 84(sp),d1
    c3a2:	|         jsr -306(a6)
    c3a6:	|         move.l d0,80(sp)
    c3aa:	|         move.l 80(sp),d0
    c3ae:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c3b2:	|     ,-- beq.s c3e6 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c3b4:	|     |   move.l 112(sp),-(sp)
    c3b8:	|     |   jsr 6bc <get2bytes>
    c3be:	|     |   addq.l #4,sp
    c3c0:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c3c4:	|     |   move.l 112(sp),-(sp)
    c3c8:	|     |   jsr 6bc <get2bytes>
    c3ce:	|     |   addq.l #4,sp
    c3d0:	|     |   move.l d0,1cbe6 <fontHeight>
		charOrder = readString(fp);		
    c3d6:	|     |   move.l 112(sp),-(sp)
    c3da:	|     |   jsr b02 <readString>
    c3e0:	|     |   addq.l #4,sp
    c3e2:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c3e6:	|     '-> move.l 104(sp),70(sp)
    c3ec:	|         move.l 1caf2 <SysBase>,d0
    c3f2:	|         movea.l d0,a6
    c3f4:	|         movea.l 70(sp),a1
    c3f8:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c3fc:	|         move.l 112(sp),-(sp)
    c400:	|         jsr 854 <getSigned>
    c406:	|         addq.l #4,sp
    c408:	|         move.w d0,1c9ea <fontSpace>

	killAllPeople ();
    c40e:	|         jsr a97e <killAllPeople>
	killAllRegions ();
    c414:	|         jsr 15ab4 <killAllRegions>

	int camerX = get2bytes (fp);
    c41a:	|         move.l 112(sp),-(sp)
    c41e:	|         jsr 6bc <get2bytes>
    c424:	|         addq.l #4,sp
    c426:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c42a:	|         move.l 112(sp),-(sp)
    c42e:	|         jsr 6bc <get2bytes>
    c434:	|         addq.l #4,sp
    c436:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c43a:	|         move.l 112(sp),-(sp)
    c43e:	|         jsr 7d8 <getFloat>
    c444:	|         addq.l #4,sp
    c446:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c44a:	|         move.l 112(sp),54(sp)
    c450:	|         move.l 1cafa <DOSBase>,d0
    c456:	|         movea.l d0,a6
    c458:	|         move.l 54(sp),d1
    c45c:	|         jsr -306(a6)
    c460:	|         move.l d0,50(sp)
    c464:	|         move.l 50(sp),d0
    c468:	|         move.l d0,d0
    c46a:	|         move.b d0,1c460 <brightnessLevel>

	loadHandlers (fp);
    c470:	|         move.l 112(sp),-(sp)
    c474:	|         jsr 6c1e <loadHandlers>
    c47a:	|         addq.l #4,sp
	loadRegions (fp);
    c47c:	|         move.l 112(sp),-(sp)
    c480:	|         jsr 15b10 <loadRegions>
    c486:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c488:	|         moveq #12,d0
    c48a:	|         move.l d0,46(sp)
    c48e:	|         clr.l 42(sp)
    c492:	|         move.l 1caf2 <SysBase>,d0
    c498:	|         movea.l d0,a6
    c49a:	|         move.l 46(sp),d0
    c49e:	|         move.l 42(sp),d1
    c4a2:	|         jsr -684(a6)
    c4a6:	|         move.l d0,38(sp)
    c4aa:	|         move.l 38(sp),d0
    c4ae:	|         move.l d0,1c9ec <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c4b4:	|         move.l 1c9ec <mouseCursorAnim>,d0
    c4ba:	|     ,-- bne.s c4ce <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c4bc:	|     |   pea 194ed <PutChar+0x17a7>
    c4c2:	|     |   jsr 172a4 <KPrintF>
    c4c8:	|     |   addq.l #4,sp
		return FALSE;
    c4ca:	|     |   clr.w d0
    c4cc:	+-----|-- bra.s c542 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c4ce:	|     '-> jsr d372 <nosnapshot>
	if (FGetC (fp)) {
    c4d4:	|         move.l 112(sp),34(sp)
    c4da:	|         move.l 1cafa <DOSBase>,d0
    c4e0:	|         movea.l d0,a6
    c4e2:	|         move.l 34(sp),d1
    c4e6:	|         jsr -306(a6)
    c4ea:	|         move.l d0,30(sp)
    c4ee:	|         move.l 30(sp),d0
    c4f2:	|     ,-- beq.s c508 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c4f4:	|     |   move.l 112(sp),-(sp)
    c4f8:	|     |   jsr d3f2 <restoreSnapshot>
    c4fe:	|     |   addq.l #4,sp
    c500:	|     |   tst.w d0
    c502:	|     +-- bne.s c508 <loadGame+0x2bc>
    c504:	|     |   clr.w d0
    c506:	+-----|-- bra.s c542 <loadGame+0x2f6>
	}

	Close (fp);
    c508:	|     '-> move.l 112(sp),26(sp)
    c50e:	|         move.l 1cafa <DOSBase>,d0
    c514:	|         movea.l d0,a6
    c516:	|         move.l 26(sp),d1
    c51a:	|         jsr -36(a6)
    c51e:	|         move.l d0,22(sp)
	clearStackLib ();
    c522:	|         jsr c202 <clearStackLib>

	cameraX = camerX;
    c528:	|         move.l 66(sp),1cba8 <cameraX>
	cameraY = camerY;
    c530:	|         move.l 62(sp),1cbac <cameraY>
	cameraZoom = camerZ;
    c538:	|         move.l 58(sp),1c484 <cameraZoom>

	return TRUE;
    c540:	|         moveq #1,d0
}
    c542:	'-------> movem.l (sp)+,d2-d3/a6
    c546:	          lea 128(sp),sp
    c54a:	          rts

0000c54c <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c54c:	   ,-> lea -64(sp),sp
    c550:	   |   move.l a6,-(sp)
    c552:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c554:	   |   movea.l 76(sp),a0
    c558:	   |   move.l (a0),d0
    c55a:	   |   move.l 80(sp),-(sp)
    c55e:	   |   move.l d0,-(sp)
    c560:	   |   jsr 8d0 <put2bytes>
    c566:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c568:	   |   movea.l 76(sp),a0
    c56c:	   |   move.l 40(a0),d0
    c570:	,--|-- beq.s c5ac <saveFunction+0x60>
		FPutC (fp, 1);
    c572:	|  |   move.l 80(sp),52(sp)
    c578:	|  |   moveq #1,d0
    c57a:	|  |   move.l d0,48(sp)
    c57e:	|  |   move.l 1cafa <DOSBase>,d0
    c584:	|  |   movea.l d0,a6
    c586:	|  |   move.l 52(sp),d1
    c58a:	|  |   move.l 48(sp),d2
    c58e:	|  |   jsr -312(a6)
    c592:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c596:	|  |   movea.l 76(sp),a0
    c59a:	|  |   move.l 40(a0),d0
    c59e:	|  |   move.l 80(sp),-(sp)
    c5a2:	|  |   move.l d0,-(sp)
    c5a4:	|  '-- jsr c54c <saveFunction>(pc)
    c5a8:	|      addq.l #8,sp
    c5aa:	|  ,-- bra.s c5ce <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c5ac:	'--|-> move.l 80(sp),64(sp)
    c5b2:	   |   clr.l 60(sp)
    c5b6:	   |   move.l 1cafa <DOSBase>,d0
    c5bc:	   |   movea.l d0,a6
    c5be:	   |   move.l 64(sp),d1
    c5c2:	   |   move.l 60(sp),d2
    c5c6:	   |   jsr -312(a6)
    c5ca:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c5ce:	   '-> movea.l 76(sp),a0
    c5d2:	       move.l 12(a0),d0
    c5d6:	       move.l 80(sp),-(sp)
    c5da:	       move.l d0,-(sp)
    c5dc:	       jsr 958 <put4bytes>
    c5e2:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c5e4:	       movea.l 76(sp),a0
    c5e8:	       move.l 36(a0),d0
    c5ec:	       move.l 80(sp),-(sp)
    c5f0:	       move.l d0,-(sp)
    c5f2:	       jsr 8d0 <put2bytes>
    c5f8:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c5fa:	       move.l 80(sp),40(sp)
    c600:	       movea.l 76(sp),a0
    c604:	       move.w 54(a0),d0
    c608:	       movea.w d0,a0
    c60a:	       move.l a0,36(sp)
    c60e:	       move.l 1cafa <DOSBase>,d0
    c614:	       movea.l d0,a6
    c616:	       move.l 40(sp),d1
    c61a:	       move.l 36(sp),d2
    c61e:	       jsr -312(a6)
    c622:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c626:	       move.l 80(sp),28(sp)
    c62c:	       movea.l 76(sp),a0
    c630:	       move.w 48(a0),d0
    c634:	       movea.w d0,a0
    c636:	       move.l a0,24(sp)
    c63a:	       move.l 1cafa <DOSBase>,d0
    c640:	       movea.l d0,a6
    c642:	       move.l 28(sp),d1
    c646:	       move.l 24(sp),d2
    c64a:	       jsr -312(a6)
    c64e:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c652:	       move.l 80(sp),16(sp)
    c658:	       movea.l 76(sp),a0
    c65c:	       move.w 50(a0),d0
    c660:	       movea.w d0,a0
    c662:	       move.l a0,12(sp)
    c666:	       move.l 1cafa <DOSBase>,d0
    c66c:	       movea.l d0,a6
    c66e:	       move.l 16(sp),d1
    c672:	       move.l 12(sp),d2
    c676:	       jsr -312(a6)
    c67a:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c67e:	       moveq #28,d0
    c680:	       add.l 76(sp),d0
    c684:	       move.l 80(sp),-(sp)
    c688:	       move.l d0,-(sp)
    c68a:	       jsr cda4 <saveVariable>
    c690:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c692:	       movea.l 76(sp),a0
    c696:	       move.b 56(a0),d0
    c69a:	   ,-- beq.s c6aa <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c69c:	   |   pea 1950e <PutChar+0x17c8>
    c6a2:	   |   jsr 172a4 <KPrintF>
    c6a8:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c6aa:	   '-> movea.l 76(sp),a0
    c6ae:	       move.l 24(a0),d0
    c6b2:	       move.l 80(sp),-(sp)
    c6b6:	       move.l d0,-(sp)
    c6b8:	       jsr cc18 <saveStack>
    c6be:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6c0:	       clr.l 68(sp)
    c6c4:	   ,-- bra.s c6e8 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c6c6:	,--|-> movea.l 76(sp),a0
    c6ca:	|  |   move.l 20(a0),d1
    c6ce:	|  |   move.l 68(sp),d0
    c6d2:	|  |   lsl.l #3,d0
    c6d4:	|  |   add.l d1,d0
    c6d6:	|  |   move.l 80(sp),-(sp)
    c6da:	|  |   move.l d0,-(sp)
    c6dc:	|  |   jsr cda4 <saveVariable>
    c6e2:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6e4:	|  |   addq.l #1,68(sp)
    c6e8:	|  '-> movea.l 76(sp),a0
    c6ec:	|      move.l 8(a0),d0
    c6f0:	|      cmp.l 68(sp),d0
    c6f4:	'----- bgt.s c6c6 <saveFunction+0x17a>
	}
}
    c6f6:	       nop
    c6f8:	       nop
    c6fa:	       move.l (sp)+,d2
    c6fc:	       movea.l (sp)+,a6
    c6fe:	       lea 64(sp),sp
    c702:	       rts

0000c704 <saveGame>:

BOOL saveGame (char * fname) {
    c704:	          lea -248(sp),sp
    c708:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c70c:	          move.l 264(sp),244(sp)
    c712:	          move.l #1006,240(sp)
    c71a:	          move.l 1cafa <DOSBase>,d0
    c720:	          movea.l d0,a6
    c722:	          move.l 244(sp),d1
    c726:	          move.l 240(sp),d2
    c72a:	          jsr -30(a6)
    c72e:	          move.l d0,236(sp)
    c732:	          move.l 236(sp),d0
    c736:	          move.l d0,232(sp)
	if (fp == NULL) {
    c73a:	      ,-- bne.s c750 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c73c:	      |   pea 19530 <PutChar+0x17ea>
    c742:	      |   jsr 172a4 <KPrintF>
    c748:	      |   addq.l #4,sp
		return FALSE;
    c74a:	      |   clr.w d0
    c74c:	,-----|-- bra.w cc0e <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c750:	|     '-> move.l 232(sp),228(sp)
    c756:	|         move.l #103757,224(sp)
    c75e:	|         moveq #6,d0
    c760:	|         move.l d0,220(sp)
    c764:	|         move.l 1cafa <DOSBase>,d0
    c76a:	|         movea.l d0,a6
    c76c:	|         move.l 228(sp),d1
    c770:	|         move.l 224(sp),d2
    c774:	|         move.l 220(sp),d3
    c778:	|         jsr -48(a6)
    c77c:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c780:	|         move.l 232(sp),212(sp)
    c786:	|         clr.l 208(sp)
    c78a:	|         move.l 1cafa <DOSBase>,d0
    c790:	|         movea.l d0,a6
    c792:	|         move.l 212(sp),d1
    c796:	|         move.l 208(sp),d2
    c79a:	|         jsr -312(a6)
    c79e:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c7a2:	|         move.l 232(sp),200(sp)
    c7a8:	|         clr.l 196(sp)
    c7ac:	|         move.l 1cafa <DOSBase>,d0
    c7b2:	|         movea.l d0,a6
    c7b4:	|         move.l 200(sp),d1
    c7b8:	|         move.l 196(sp),d2
    c7bc:	|         jsr -312(a6)
    c7c0:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c7c4:	|         move.l 232(sp),188(sp)
    c7ca:	|         moveq #2,d0
    c7cc:	|         move.l d0,184(sp)
    c7d0:	|         move.l 1cafa <DOSBase>,d0
    c7d6:	|         movea.l d0,a6
    c7d8:	|         move.l 188(sp),d1
    c7dc:	|         move.l 184(sp),d2
    c7e0:	|         jsr -312(a6)
    c7e4:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c7e8:	|         move.l 232(sp),176(sp)
    c7ee:	|         moveq #2,d0
    c7f0:	|         move.l d0,172(sp)
    c7f4:	|         move.l 1cafa <DOSBase>,d0
    c7fa:	|         movea.l d0,a6
    c7fc:	|         move.l 176(sp),d1
    c800:	|         move.l 172(sp),d2
    c804:	|         jsr -312(a6)
    c808:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c80c:	|         move.l 232(sp),164(sp)
    c812:	|         move.l #117396,160(sp)
    c81a:	|         moveq #8,d0
    c81c:	|         move.l d0,156(sp)
    c820:	|         move.l 1cafa <DOSBase>,d0
    c826:	|         movea.l d0,a6
    c828:	|         move.l 164(sp),d1
    c82c:	|         move.l 160(sp),d2
    c830:	|         move.l 156(sp),d3
    c834:	|         jsr -48(a6)
    c838:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c83c:	|         move.l 232(sp),148(sp)
    c842:	|         move.w 1c342 <allowAnyFilename>,d0
    c848:	|         movea.w d0,a0
    c84a:	|         move.l a0,144(sp)
    c84e:	|         move.l 1cafa <DOSBase>,d0
    c854:	|         movea.l d0,a6
    c856:	|         move.l 148(sp),d1
    c85a:	|         move.l 144(sp),d2
    c85e:	|         jsr -312(a6)
    c862:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c866:	|         move.l 232(sp),136(sp)
    c86c:	|         move.w 1ca92 <captureAllKeys>,d0
    c872:	|         movea.w d0,a0
    c874:	|         move.l a0,132(sp)
    c878:	|         move.l 1cafa <DOSBase>,d0
    c87e:	|         movea.l d0,a6
    c880:	|         move.l 136(sp),d1
    c884:	|         move.l 132(sp),d2
    c888:	|         jsr -312(a6)
    c88c:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c890:	|         move.l 232(sp),124(sp)
    c896:	|         moveq #1,d0
    c898:	|         move.l d0,120(sp)
    c89c:	|         move.l 1cafa <DOSBase>,d0
    c8a2:	|         movea.l d0,a6
    c8a4:	|         move.l 124(sp),d1
    c8a8:	|         move.l 120(sp),d2
    c8ac:	|         jsr -312(a6)
    c8b0:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c8b4:	|         move.l 232(sp),112(sp)
    c8ba:	|         move.l 1cbf6 <fontTableSize>,d0
    c8c0:	|         sgt d0
    c8c2:	|         neg.b d0
    c8c4:	|         move.b d0,d0
    c8c6:	|         andi.l #255,d0
    c8cc:	|         move.l d0,108(sp)
    c8d0:	|         move.l 1cafa <DOSBase>,d0
    c8d6:	|         movea.l d0,a6
    c8d8:	|         move.l 112(sp),d1
    c8dc:	|         move.l 108(sp),d2
    c8e0:	|         jsr -312(a6)
    c8e4:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c8e8:	|         move.l 1cbf6 <fontTableSize>,d0
    c8ee:	|     ,-- ble.s c92c <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c8f0:	|     |   move.l 1cbea <loadedFontNum>,d0
    c8f6:	|     |   move.l 232(sp),-(sp)
    c8fa:	|     |   move.l d0,-(sp)
    c8fc:	|     |   jsr 8d0 <put2bytes>
    c902:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c904:	|     |   move.l 1cbe6 <fontHeight>,d0
    c90a:	|     |   move.l 232(sp),-(sp)
    c90e:	|     |   move.l d0,-(sp)
    c910:	|     |   jsr 8d0 <put2bytes>
    c916:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c918:	|     |   move.l 1cbee <fontOrderString>,d0
    c91e:	|     |   move.l 232(sp),-(sp)
    c922:	|     |   move.l d0,-(sp)
    c924:	|     |   jsr bd8 <writeString>
    c92a:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c92c:	|     '-> move.w 1c9ea <fontSpace>,d0
    c932:	|         movea.w d0,a0
    c934:	|         move.l 232(sp),-(sp)
    c938:	|         move.l a0,-(sp)
    c93a:	|         jsr a9c <putSigned>
    c940:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c942:	|         move.l 1cba8 <cameraX>,d0
    c948:	|         move.l 232(sp),-(sp)
    c94c:	|         move.l d0,-(sp)
    c94e:	|         jsr 8d0 <put2bytes>
    c954:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c956:	|         move.l 1cbac <cameraY>,d0
    c95c:	|         move.l 232(sp),-(sp)
    c960:	|         move.l d0,-(sp)
    c962:	|         jsr 8d0 <put2bytes>
    c968:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c96a:	|         move.l 1c484 <cameraZoom>,d0
    c970:	|         move.l 232(sp),-(sp)
    c974:	|         move.l d0,-(sp)
    c976:	|         jsr a46 <putFloat>
    c97c:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c97e:	|         move.l 232(sp),100(sp)
    c984:	|         move.b 1c460 <brightnessLevel>,d0
    c98a:	|         move.b d0,d0
    c98c:	|         andi.l #255,d0
    c992:	|         move.l d0,96(sp)
    c996:	|         move.l 1cafa <DOSBase>,d0
    c99c:	|         movea.l d0,a6
    c99e:	|         move.l 100(sp),d1
    c9a2:	|         move.l 96(sp),d2
    c9a6:	|         jsr -312(a6)
    c9aa:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c9ae:	|         move.l 232(sp),-(sp)
    c9b2:	|         jsr 7208 <saveHandlers>
    c9b8:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c9ba:	|         move.l 232(sp),-(sp)
    c9be:	|         jsr 15cca <saveRegions>
    c9c4:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c9c6:	|         move.l 1c9ec <mouseCursorAnim>,d0
    c9cc:	|         move.l 232(sp),-(sp)
    c9d0:	|         move.l d0,-(sp)
    c9d2:	|         jsr af28 <saveAnim>
    c9d8:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c9da:	|         move.l 1c9f0 <mouseCursorFrameNum>,d0
    c9e0:	|         move.l 232(sp),-(sp)
    c9e4:	|         move.l d0,-(sp)
    c9e6:	|         jsr 8d0 <put2bytes>
    c9ec:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c9ee:	|         move.l 1ca8a <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c9f6:	|         clr.l 248(sp)
	while (thisFunction) {
    c9fa:	|     ,-- bra.s ca0a <saveGame+0x306>
		countFunctions ++;
    c9fc:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca00:	|  |  |   movea.l 252(sp),a0
    ca04:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca0a:	|  |  '-> tst.l 252(sp)
    ca0e:	|  '----- bne.s c9fc <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca10:	|         move.l 232(sp),-(sp)
    ca14:	|         move.l 252(sp),-(sp)
    ca18:	|         jsr 8d0 <put2bytes>
    ca1e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca20:	|         move.l 1ca8a <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca28:	|     ,-- bra.s ca44 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca2a:	|  ,--|-> move.l 232(sp),-(sp)
    ca2e:	|  |  |   move.l 256(sp),-(sp)
    ca32:	|  |  |   jsr c54c <saveFunction>
    ca38:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca3a:	|  |  |   movea.l 252(sp),a0
    ca3e:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca44:	|  |  '-> tst.l 252(sp)
    ca48:	|  '----- bne.s ca2a <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ca4a:	|         clr.l 256(sp)
    ca4e:	|     ,-- bra.s ca70 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ca50:	|  ,--|-> move.l 1caa0 <globalVars>,d1
    ca56:	|  |  |   move.l 256(sp),d0
    ca5a:	|  |  |   lsl.l #3,d0
    ca5c:	|  |  |   add.l d1,d0
    ca5e:	|  |  |   move.l 232(sp),-(sp)
    ca62:	|  |  |   move.l d0,-(sp)
    ca64:	|  |  |   jsr cda4 <saveVariable>
    ca6a:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ca6c:	|  |  |   addq.l #1,256(sp)
    ca70:	|  |  '-> move.l 1caca <numGlobals>,d0
    ca76:	|  |      cmp.l 256(sp),d0
    ca7a:	|  '----- bgt.s ca50 <saveGame+0x34c>
	}

	savePeople (fp);
    ca7c:	|         move.l 232(sp),-(sp)
    ca80:	|         jsr b050 <savePeople>
    ca86:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ca88:	|         movea.l 1cc0a <currentFloor>,a0
    ca8e:	|         move.l 8(a0),d0
    ca92:	|  ,----- beq.s cad0 <saveGame+0x3cc>
		FPutC (fp, 1);
    ca94:	|  |      move.l 232(sp),76(sp)
    ca9a:	|  |      moveq #1,d0
    ca9c:	|  |      move.l d0,72(sp)
    caa0:	|  |      move.l 1cafa <DOSBase>,d0
    caa6:	|  |      movea.l d0,a6
    caa8:	|  |      move.l 76(sp),d1
    caac:	|  |      move.l 72(sp),d2
    cab0:	|  |      jsr -312(a6)
    cab4:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cab8:	|  |      movea.l 1cc0a <currentFloor>,a0
    cabe:	|  |      move.l (a0),d0
    cac0:	|  |      move.l 232(sp),-(sp)
    cac4:	|  |      move.l d0,-(sp)
    cac6:	|  |      jsr 8d0 <put2bytes>
    cacc:	|  |      addq.l #8,sp
    cace:	|  |  ,-- bra.s caf2 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cad0:	|  '--|-> move.l 232(sp),88(sp)
    cad6:	|     |   clr.l 84(sp)
    cada:	|     |   move.l 1cafa <DOSBase>,d0
    cae0:	|     |   movea.l d0,a6
    cae2:	|     |   move.l 88(sp),d1
    cae6:	|     |   move.l 84(sp),d2
    caea:	|     |   jsr -312(a6)
    caee:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    caf2:	|     '-> move.l 232(sp),64(sp)
    caf8:	|         move.l 1cbbc <speechMode>,60(sp)
    cb00:	|         move.l 1cafa <DOSBase>,d0
    cb06:	|         movea.l d0,a6
    cb08:	|         move.l 64(sp),d1
    cb0c:	|         move.l 60(sp),d2
    cb10:	|         jsr -312(a6)
    cb14:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb18:	|         move.b 1c9c0 <fadeMode>,d0
    cb1e:	|         move.b d0,d0
    cb20:	|         andi.l #255,d0
    cb26:	|         move.l d0,52(sp)
    cb2a:	|         move.l 232(sp),48(sp)
    cb30:	|         move.l 1cafa <DOSBase>,d0
    cb36:	|         movea.l d0,a6
    cb38:	|         move.l 52(sp),d1
    cb3c:	|         move.l 48(sp),d2
    cb40:	|         jsr -312(a6)
    cb44:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cb48:	|         move.l 1ca42 <speech>,d0
    cb4e:	|         move.l 232(sp),-(sp)
    cb52:	|         move.l d0,-(sp)
    cb54:	|         jsr 3fba <saveSpeech>
    cb5a:	|         addq.l #8,sp
	saveStatusBars (fp);
    cb5c:	|         move.l 232(sp),-(sp)
    cb60:	|         jsr 8382 <saveStatusBars>
    cb66:	|         addq.l #4,sp
	saveSounds (fp);
    cb68:	|         move.l 232(sp),-(sp)
    cb6c:	|         jsr d116 <saveSounds>
    cb72:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cb74:	|         move.w 1cba6 <saveEncoding>,d0
    cb7a:	|         move.w d0,d0
    cb7c:	|         andi.l #65535,d0
    cb82:	|         move.l 232(sp),-(sp)
    cb86:	|         move.l d0,-(sp)
    cb88:	|         jsr 8d0 <put2bytes>
    cb8e:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cb90:	|         move.l 1cb98 <parallaxStuff>,d0
    cb96:	|         move.l 232(sp),-(sp)
    cb9a:	|         move.l d0,-(sp)
    cb9c:	|         jsr d418 <saveParallaxRecursive>
    cba2:	|         addq.l #8,sp
	FPutC (fp, 0);
    cba4:	|         move.l 232(sp),40(sp)
    cbaa:	|         clr.l 36(sp)
    cbae:	|         move.l 1cafa <DOSBase>,d0
    cbb4:	|         movea.l d0,a6
    cbb6:	|         move.l 40(sp),d1
    cbba:	|         move.l 36(sp),d2
    cbbe:	|         jsr -312(a6)
    cbc2:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cbc6:	|         move.l 232(sp),28(sp)
    cbcc:	|         move.l 1c466 <languageNum>,24(sp)
    cbd4:	|         move.l 1cafa <DOSBase>,d0
    cbda:	|         movea.l d0,a6
    cbdc:	|         move.l 28(sp),d1
    cbe0:	|         move.l 24(sp),d2
    cbe4:	|         jsr -312(a6)
    cbe8:	|         move.l d0,20(sp)

	Close(fp);
    cbec:	|         move.l 232(sp),16(sp)
    cbf2:	|         move.l 1cafa <DOSBase>,d0
    cbf8:	|         movea.l d0,a6
    cbfa:	|         move.l 16(sp),d1
    cbfe:	|         jsr -36(a6)
    cc02:	|         move.l d0,12(sp)
	clearStackLib ();
    cc06:	|         jsr c202 <clearStackLib>
	return TRUE;
    cc0c:	|         moveq #1,d0
}
    cc0e:	'-------> movem.l (sp)+,d2-d3/a6
    cc12:	          lea 248(sp),sp
    cc16:	          rts

0000cc18 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc18:	       lea -12(sp),sp
	int elements = 0;
    cc1c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc20:	       move.l 16(sp),(sp)
	while (search) {
    cc24:	   ,-- bra.s cc30 <saveStack+0x18>
		elements ++;
    cc26:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cc2a:	|  |   movea.l (sp),a0
    cc2c:	|  |   move.l 8(a0),(sp)
	while (search) {
    cc30:	|  '-> tst.l (sp)
    cc32:	'----- bne.s cc26 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cc34:	       move.l 20(sp),-(sp)
    cc38:	       move.l 12(sp),-(sp)
    cc3c:	       jsr 8d0 <put2bytes>
    cc42:	       addq.l #8,sp
	search = vs;
    cc44:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cc48:	       clr.l 4(sp)
    cc4c:	   ,-- bra.s cc68 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cc4e:	,--|-> move.l (sp),d0
    cc50:	|  |   move.l 20(sp),-(sp)
    cc54:	|  |   move.l d0,-(sp)
    cc56:	|  |   jsr cda4 <saveVariable>
    cc5c:	|  |   addq.l #8,sp
		search = search -> next;
    cc5e:	|  |   movea.l (sp),a0
    cc60:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cc64:	|  |   addq.l #1,4(sp)
    cc68:	|  '-> move.l 4(sp),d0
    cc6c:	|      cmp.l 8(sp),d0
    cc70:	'----- blt.s cc4e <saveStack+0x36>
	}
}
    cc72:	       nop
    cc74:	       nop
    cc76:	       lea 12(sp),sp
    cc7a:	       rts

0000cc7c <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cc7c:	             lea -44(sp),sp
    cc80:	             move.l a6,-(sp)
    cc82:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cc84:	             move.l 1cb7e <stackLib>,48(sp)
	int a = 0;
    cc8c:	             clr.l 44(sp)
	while (s) {
    cc90:	      ,----- bra.s ccee <saveStackRef+0x72>
		if (s -> stack == vs) {
    cc92:	   ,--|----> movea.l 48(sp),a0
    cc96:	   |  |      move.l (a0),d0
    cc98:	   |  |      cmp.l 56(sp),d0
    cc9c:	   |  |  ,-- bne.s cce0 <saveStackRef+0x64>
			FPutC (fp, 1);
    cc9e:	   |  |  |   move.l 60(sp),16(sp)
    cca4:	   |  |  |   moveq #1,d0
    cca6:	   |  |  |   move.l d0,12(sp)
    ccaa:	   |  |  |   move.l 1cafa <DOSBase>,d0
    ccb0:	   |  |  |   movea.l d0,a6
    ccb2:	   |  |  |   move.l 16(sp),d1
    ccb6:	   |  |  |   move.l 12(sp),d2
    ccba:	   |  |  |   jsr -312(a6)
    ccbe:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ccc2:	   |  |  |   move.l 1cb7a <stackLibTotal>,d0
    ccc8:	   |  |  |   sub.l 44(sp),d0
    cccc:	   |  |  |   move.l 60(sp),-(sp)
    ccd0:	   |  |  |   move.l d0,-(sp)
    ccd2:	   |  |  |   jsr 8d0 <put2bytes>
    ccd8:	   |  |  |   addq.l #8,sp
			return TRUE;
    ccda:	   |  |  |   moveq #1,d0
    ccdc:	,--|--|--|-- bra.w cd9a <saveStackRef+0x11e>
		}
		s = s -> next;
    cce0:	|  |  |  '-> movea.l 48(sp),a0
    cce4:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ccea:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ccee:	|  |  '----> tst.l 48(sp)
    ccf2:	|  '-------- bne.s cc92 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ccf4:	|            move.l 60(sp),40(sp)
    ccfa:	|            clr.l 36(sp)
    ccfe:	|            move.l 1cafa <DOSBase>,d0
    cd04:	|            movea.l d0,a6
    cd06:	|            move.l 40(sp),d1
    cd0a:	|            move.l 36(sp),d2
    cd0e:	|            jsr -312(a6)
    cd12:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd16:	|            movea.l 56(sp),a0
    cd1a:	|            move.l (a0),d0
    cd1c:	|            move.l 60(sp),-(sp)
    cd20:	|            move.l d0,-(sp)
    cd22:	|            jsr cc18 <saveStack>
    cd28:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd2a:	|            moveq #8,d0
    cd2c:	|            move.l d0,28(sp)
    cd30:	|            clr.l 24(sp)
    cd34:	|            move.l 1caf2 <SysBase>,d0
    cd3a:	|            movea.l d0,a6
    cd3c:	|            move.l 28(sp),d0
    cd40:	|            move.l 24(sp),d1
    cd44:	|            jsr -684(a6)
    cd48:	|            move.l d0,20(sp)
    cd4c:	|            move.l 20(sp),d0
    cd50:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cd54:	|            move.l 1cb7a <stackLibTotal>,d0
    cd5a:	|            addq.l #1,d0
    cd5c:	|            move.l d0,1cb7a <stackLibTotal>
	if (! s) {
    cd62:	|            tst.l 48(sp)
    cd66:	|        ,-- bne.s cd7a <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cd68:	|        |   pea 1957c <PutChar+0x1836>
    cd6e:	|        |   jsr 172a4 <KPrintF>
    cd74:	|        |   addq.l #4,sp
		return FALSE;
    cd76:	|        |   clr.w d0
    cd78:	+--------|-- bra.s cd9a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cd7a:	|        '-> move.l 1cb7e <stackLib>,d0
    cd80:	|            movea.l 48(sp),a0
    cd84:	|            move.l d0,4(a0)
	s -> stack = vs;
    cd88:	|            movea.l 48(sp),a0
    cd8c:	|            move.l 56(sp),(a0)
	stackLib = s;
    cd90:	|            move.l 48(sp),1cb7e <stackLib>
	return TRUE;
    cd98:	|            moveq #1,d0
}
    cd9a:	'----------> move.l (sp)+,d2
    cd9c:	             movea.l (sp)+,a6
    cd9e:	             lea 44(sp),sp
    cda2:	             rts

0000cda4 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cda4:	          lea -12(sp),sp
    cda8:	          move.l a6,-(sp)
    cdaa:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cdac:	          move.l 28(sp),16(sp)
    cdb2:	          movea.l 24(sp),a0
    cdb6:	          move.l (a0),d0
    cdb8:	          move.l d0,12(sp)
    cdbc:	          move.l 1cafa <DOSBase>,d0
    cdc2:	          movea.l d0,a6
    cdc4:	          move.l 16(sp),d1
    cdc8:	          move.l 12(sp),d2
    cdcc:	          jsr -312(a6)
    cdd0:	          move.l d0,8(sp)
	switch (from -> varType) {
    cdd4:	          movea.l 24(sp),a0
    cdd8:	          move.l (a0),d0
    cdda:	          moveq #9,d1
    cddc:	          cmp.l d0,d1
    cdde:	      ,-- bcs.w ce8e <saveVariable+0xea>
    cde2:	      |   add.l d0,d0
    cde4:	      |   movea.l d0,a0
    cde6:	      |   adda.l #52722,a0
    cdec:	      |   move.w (a0),d0
    cdee:	      |   jmp (cdf2 <saveVariable+0x4e>,pc,d0.w)
    cdf2:	      |   ori.l #1310740,(a0)+
    cdf8:	      |   ori.b #20,(20,a0,d0.w)
    cdfe:	      |   .short 0x004c
    ce00:	      |   ori.b #126,(a4)
    ce04:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce08:	      |   ori.b #40,(a0)+
    ce0c:	      |   ori.b #47,d4
    ce10:	      |   ori.b #0,(a4)+
    ce14:	      |   jsr 958 <put4bytes>
    ce1a:	      |   addq.l #8,sp
		return TRUE;
    ce1c:	      |   moveq #1,d0
    ce1e:	,-----|-- bra.w ceca <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce22:	|     |   movea.l 24(sp),a0
    ce26:	|     |   move.l 4(a0),d0
    ce2a:	|     |   move.l 28(sp),-(sp)
    ce2e:	|     |   move.l d0,-(sp)
    ce30:	|     |   jsr bd8 <writeString>
    ce36:	|     |   addq.l #8,sp
		return TRUE;
    ce38:	|     |   moveq #1,d0
    ce3a:	+-----|-- bra.w ceca <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce3e:	|     |   movea.l 24(sp),a0
    ce42:	|     |   move.l 4(a0),d0
    ce46:	|     |   move.l 28(sp),-(sp)
    ce4a:	|     |   move.l d0,-(sp)
    ce4c:	|     |   jsr cc7c <saveStackRef>
    ce52:	|     |   addq.l #8,sp
    ce54:	+-----|-- bra.s ceca <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ce56:	|     |   movea.l 24(sp),a0
    ce5a:	|     |   move.l 4(a0),d0
    ce5e:	|     |   move.l 28(sp),-(sp)
    ce62:	|     |   move.l d0,-(sp)
    ce64:	|     |   jsr aff2 <saveCostume>
    ce6a:	|     |   addq.l #8,sp
		return FALSE;
    ce6c:	|     |   clr.w d0
    ce6e:	+-----|-- bra.s ceca <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ce70:	|     |   movea.l 24(sp),a0
    ce74:	|     |   move.l 4(a0),d0
    ce78:	|     |   move.l 28(sp),-(sp)
    ce7c:	|     |   move.l d0,-(sp)
    ce7e:	|     |   jsr af28 <saveAnim>
    ce84:	|     |   addq.l #8,sp
		return FALSE;
    ce86:	|     |   clr.w d0
    ce88:	+-----|-- bra.s ceca <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    ce8a:	|     |   clr.w d0
    ce8c:	+-----|-- bra.s ceca <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    ce8e:	|     '-> movea.l 24(sp),a0
    ce92:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ce94:	|         moveq #10,d1
    ce96:	|         cmp.l d0,d1
    ce98:	|  ,----- bcs.s ceb2 <saveVariable+0x10e>
						typeName[from->varType] :
    ce9a:	|  |      movea.l 24(sp),a0
    ce9e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cea0:	|  |      add.l d0,d0
    cea2:	|  |      movea.l d0,a1
    cea4:	|  |      adda.l d0,a1
    cea6:	|  |      lea 1c9c2 <typeName>,a0
    ceac:	|  |      move.l (0,a1,a0.l),d0
    ceb0:	|  |  ,-- bra.s ceb8 <saveVariable+0x114>
    ceb2:	|  '--|-> move.l #103841,d0
    ceb8:	|     '-> move.l d0,-(sp)
    ceba:	|         pea 195a8 <PutChar+0x1862>
    cec0:	|         jsr 172a4 <KPrintF>
    cec6:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cec8:	|         moveq #1,d0
    ceca:	'-------> move.l (sp)+,d2
    cecc:	          movea.l (sp)+,a6
    cece:	          lea 12(sp),sp
    ced2:	          rts

0000ced4 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    ced4:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    ced8:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cee0:	          movea.l 4(sp),a0
    cee4:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    ceea:	          movea.l 4(sp),a0
    ceee:	          move.w 10(a0),d0
    cef2:	          lsr.w #8,d0
    cef4:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cef8:	          movea.l 4(sp),a0
    cefc:	          move.w 10(a0),d0
    cf00:	          move.b d0,(sp)

    if(counterx_new)
    cf02:	,-------- beq.w cfa8 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf06:	|         clr.w d1
    cf08:	|         move.b (sp),d1
    cf0a:	|         move.w 1cb86 <counterx_old>,d0
    cf10:	|         sub.w d0,d1
    cf12:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf16:	|         cmpi.w #128,10(sp)
    cf1c:	|     ,-- blt.s cf34 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf1e:	|     |   move.w #1,1caa8 <input+0x4>
            counterx_diff -= 256;    
    cf26:	|     |   move.w 10(sp),d0
    cf2a:	|     |   addi.w #-256,d0
    cf2e:	|     |   move.w d0,10(sp)
    cf32:	|  ,--|-- bra.s cf60 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cf34:	|  |  '-> cmpi.w #-129,10(sp)
    cf3a:	|  |  ,-- bgt.s cf52 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf3c:	|  |  |   move.w 10(sp),d0
    cf40:	|  |  |   addi.w #256,d0
    cf44:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cf48:	|  |  |   move.w #1,1caa8 <input+0x4>
    cf50:	|  +--|-- bra.s cf60 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cf52:	|  |  '-> tst.w 10(sp)
    cf56:	|  +----- beq.s cf60 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cf58:	|  |      move.w #1,1caa8 <input+0x4>
        }

        input.mouseX += counterx_diff;
    cf60:	|  '----> move.l 1caae <input+0xa>,d0
    cf66:	|         movea.w 10(sp),a0
    cf6a:	|         add.l a0,d0
    cf6c:	|         move.l d0,1caae <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cf72:	|         move.l 1caae <input+0xa>,d1
    cf78:	|         move.l 1ca46 <winWidth>,d0
    cf7e:	|         cmp.l d1,d0
    cf80:	|     ,-- bge.s cf90 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cf82:	|     |   move.l 1ca46 <winWidth>,d0
    cf88:	|     |   move.l d0,1caae <input+0xa>
    cf8e:	|  ,--|-- bra.s cf9e <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cf90:	|  |  '-> move.l 1caae <input+0xa>,d0
    cf96:	|  +----- bpl.s cf9e <CsiCheckInput+0xca>
            input.mouseX = 0;
    cf98:	|  |      clr.l 1caae <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cf9e:	|  '----> clr.w d0
    cfa0:	|         move.b (sp),d0
    cfa2:	|         move.w d0,1cb86 <counterx_old>
    }    

    if(countery_new)
    cfa8:	'-------> tst.b 1(sp)
    cfac:	,-------- beq.w d056 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cfb0:	|         clr.w d1
    cfb2:	|         move.b 1(sp),d1
    cfb6:	|         move.w 1cb88 <countery_old>,d0
    cfbc:	|         sub.w d0,d1
    cfbe:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cfc2:	|         cmpi.w #128,8(sp)
    cfc8:	|     ,-- blt.s cfe0 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cfca:	|     |   move.w #1,1caa8 <input+0x4>
            countery_diff -= 256;    
    cfd2:	|     |   move.w 8(sp),d0
    cfd6:	|     |   addi.w #-256,d0
    cfda:	|     |   move.w d0,8(sp)
    cfde:	|  ,--|-- bra.s d00c <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cfe0:	|  |  '-> cmpi.w #-129,8(sp)
    cfe6:	|  |  ,-- bgt.s cffe <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cfe8:	|  |  |   move.w #1,1caa8 <input+0x4>
            countery_diff += 256;
    cff0:	|  |  |   move.w 8(sp),d0
    cff4:	|  |  |   addi.w #256,d0
    cff8:	|  |  |   move.w d0,8(sp)
    cffc:	|  +--|-- bra.s d00c <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cffe:	|  |  '-> tst.w 8(sp)
    d002:	|  +----- beq.s d00c <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d004:	|  |      move.w #1,1caa8 <input+0x4>
        }

        input.mouseY += countery_diff;
    d00c:	|  '----> move.l 1cab2 <input+0xe>,d0
    d012:	|         movea.w 8(sp),a0
    d016:	|         add.l a0,d0
    d018:	|         move.l d0,1cab2 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d01e:	|         move.l 1cab2 <input+0xe>,d1
    d024:	|         move.l 1ca4a <winHeight>,d0
    d02a:	|         cmp.l d1,d0
    d02c:	|     ,-- bge.s d03c <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d02e:	|     |   move.l 1ca4a <winHeight>,d0
    d034:	|     |   move.l d0,1cab2 <input+0xe>
    d03a:	|  ,--|-- bra.s d04a <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d03c:	|  |  '-> move.l 1cab2 <input+0xe>,d0
    d042:	|  +----- bpl.s d04a <CsiCheckInput+0x176>
            input.mouseY = 0;
    d044:	|  |      clr.l 1cab2 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d04a:	|  '----> clr.w d0
    d04c:	|         move.b 1(sp),d0
    d050:	|         move.w d0,1cb88 <countery_old>
    } 

    input.leftRelease = FALSE;
    d056:	'-------> clr.w 1caaa <input+0x6>
    input.rightRelease = FALSE;
    d05c:	          clr.w 1caac <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d062:	          move.w 1caa4 <input>,d0
    d068:	      ,-- beq.s d08e <CsiCheckInput+0x1ba>
    d06a:	      |   movea.l #12574721,a0
    d070:	      |   move.b (a0),d0
    d072:	      |   move.b d0,d0
    d074:	      |   andi.l #255,d0
    d07a:	      |   moveq #64,d1
    d07c:	      |   and.l d1,d0
    d07e:	      +-- beq.s d08e <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d080:	      |   clr.w 1caa4 <input>
        input.leftRelease = TRUE;
    d086:	      |   move.w #1,1caaa <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d08e:	      '-> move.w 1caa6 <input+0x2>,d0
    d094:	      ,-- beq.s d0bc <CsiCheckInput+0x1e8>
    d096:	      |   movea.l #14675990,a0
    d09c:	      |   move.w (a0),d0
    d09e:	      |   move.w d0,d0
    d0a0:	      |   andi.l #65535,d0
    d0a6:	      |   andi.l #1024,d0
    d0ac:	      +-- beq.s d0bc <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d0ae:	      |   clr.w 1caa6 <input+0x2>
        input.rightRelease = TRUE;
    d0b4:	      |   move.w #1,1caac <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d0bc:	      '-> movea.l #12574721,a0
    d0c2:	          move.b (a0),d0
    d0c4:	          move.b d0,d0
    d0c6:	          andi.l #255,d0
    d0cc:	          moveq #64,d1
    d0ce:	          and.l d1,d0
    d0d0:	      ,-- bne.s d0da <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d0d2:	      |   move.w #1,1caa4 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d0da:	      '-> movea.l #14675990,a0
    d0e0:	          move.w (a0),d0
    d0e2:	          move.w d0,d0
    d0e4:	          andi.l #65535,d0
    d0ea:	          andi.l #1024,d0
    d0f0:	      ,-- bne.s d0fa <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d0f2:	      |   move.w #1,1caa6 <input+0x2>
    }

    d0fa:	      '-> nop
    d0fc:	          lea 12(sp),sp
    d100:	          rts

0000d102 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d102:	moveq #0,d0
}
    d104:	rts

0000d106 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d106:	nop
    d108:	rts

0000d10a <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d10a:	nop
    d10c:	rts

0000d10e <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d10e:	moveq #1,d0
}
    d110:	rts

0000d112 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d112:	nop
    d114:	rts

0000d116 <saveSounds>:

void saveSounds (BPTR fp) {
    d116:	lea -12(sp),sp
    d11a:	move.l a6,-(sp)
    d11c:	move.l d2,-(sp)
	FPutC (fp,0);
    d11e:	move.l 24(sp),16(sp)
    d124:	clr.l 12(sp)
    d128:	move.l 1cafa <DOSBase>,d0
    d12e:	movea.l d0,a6
    d130:	move.l 16(sp),d1
    d134:	move.l 12(sp),d2
    d138:	jsr -312(a6)
    d13c:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d140:	move.l 1c480 <defSoundVol>,d0
    d146:	move.l 24(sp),-(sp)
    d14a:	move.l d0,-(sp)
    d14c:	jsr 8d0 <put2bytes>
    d152:	addq.l #8,sp
	put2bytes (defVol, fp);
    d154:	move.l 1c47c <defVol>,d0
    d15a:	move.l 24(sp),-(sp)
    d15e:	move.l d0,-(sp)
    d160:	jsr 8d0 <put2bytes>
    d166:	addq.l #8,sp
}
    d168:	nop
    d16a:	move.l (sp)+,d2
    d16c:	movea.l (sp)+,a6
    d16e:	lea 12(sp),sp
    d172:	rts

0000d174 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d174:	move.l 4(sp),1c47c <defVol>
}
    d17c:	nop
    d17e:	rts

0000d180 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d180:	move.l 4(sp),1c480 <defSoundVol>
}
    d188:	nop
    d18a:	rts

0000d18c <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d18c:	nop
    d18e:	rts

0000d190 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d190:	nop
    d192:	rts

0000d194 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d194:	nop
    d196:	rts

0000d198 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d198:	subq.l #4,sp
    d19a:	move.l 12(sp),d0
    d19e:	move.w d0,d0
    d1a0:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d1a4:	moveq #1,d0
}
    d1a6:	addq.l #4,sp
    d1a8:	rts

0000d1aa <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d1aa:	nop
    d1ac:	rts

0000d1ae <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d1ae:	move.l 16(sp),-(sp)
    d1b2:	move.l 16(sp),-(sp)
    d1b6:	move.l 16(sp),-(sp)
    d1ba:	move.l 16(sp),-(sp)
    d1be:	jsr e0e <CstBlankScreen>
    d1c4:	lea 16(sp),sp
}
    d1c8:	nop
    d1ca:	rts

0000d1cc <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d1cc:	pea 195cb <PutChar+0x1885>
    d1d2:	jsr 172a4 <KPrintF>
    d1d8:	addq.l #4,sp
}
    d1da:	nop
    d1dc:	rts

0000d1de <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d1de:	movea.l 8(sp),a1
    d1e2:	movea.l 12(sp),a0
    d1e6:	move.l 8(sp),d1
    d1ea:	move.l 4(sp),d0
    d1ee:	move.l a1,-(sp)
    d1f0:	move.l a0,-(sp)
    d1f2:	move.l d1,-(sp)
    d1f4:	move.l d0,-(sp)
    d1f6:	jsr 46b4 <drawLine>
    d1fc:	lea 16(sp),sp
}
    d200:	nop
    d202:	rts

0000d204 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d204:	movea.l 12(sp),a1
    d208:	movea.l 4(sp),a0
    d20c:	move.l 8(sp),d1
    d210:	move.l 4(sp),d0
    d214:	move.l a1,-(sp)
    d216:	move.l a0,-(sp)
    d218:	move.l d1,-(sp)
    d21a:	move.l d0,-(sp)
    d21c:	jsr 46b4 <drawLine>
    d222:	lea 16(sp),sp
}
    d226:	nop
    d228:	rts

0000d22a <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d22a:	pea 19604 <PutChar+0x18be>
    d230:	jsr 172a4 <KPrintF>
    d236:	addq.l #4,sp
}
    d238:	nop
    d23a:	rts

0000d23c <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d23c:	jsr 1b28 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d242:	pea 1cb92 <backdropTextureName>
    d248:	pea 1 <_start+0x1>
    d24c:	jsr 4836 <deleteTextures>
    d252:	addq.l #8,sp
	backdropTextureName = 0;
    d254:	clr.l 1cb92 <backdropTextureName>
	backdropExists = FALSE;
    d25a:	clr.w 1cb96 <backdropExists>
}
    d260:	nop
    d262:	rts

0000d264 <killParallax>:

void killParallax () {
    d264:	          lea -12(sp),sp
    d268:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d26a:	   ,----- bra.s d2d6 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d26c:	,--|----> move.l 1cb98 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d274:	|  |      movea.l 12(sp),a0
    d278:	|  |      move.l 42(a0),d0
    d27c:	|  |      move.l d0,1cb98 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d282:	|  |      move.l 12(sp),d0
    d286:	|  |      addq.l #4,d0
    d288:	|  |      move.l d0,-(sp)
    d28a:	|  |      pea 1 <_start+0x1>
    d28e:	|  |      jsr 4836 <deleteTextures>
    d294:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d296:	|  |      movea.l 12(sp),a0
    d29a:	|  |      move.l (a0),d0
    d29c:	|  |  ,-- beq.s d2b6 <killParallax+0x52>
    d29e:	|  |  |   movea.l 12(sp),a0
    d2a2:	|  |  |   move.l (a0),8(sp)
    d2a6:	|  |  |   move.l 1caf2 <SysBase>,d0
    d2ac:	|  |  |   movea.l d0,a6
    d2ae:	|  |  |   movea.l 8(sp),a1
    d2b2:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d2b6:	|  |  '-> tst.l 12(sp)
    d2ba:	|  |  ,-- beq.s d2d2 <killParallax+0x6e>
    d2bc:	|  |  |   move.l 12(sp),4(sp)
    d2c2:	|  |  |   move.l 1caf2 <SysBase>,d0
    d2c8:	|  |  |   movea.l d0,a6
    d2ca:	|  |  |   movea.l 4(sp),a1
    d2ce:	|  |  |   jsr -690(a6)
		k = NULL;
    d2d2:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d2d6:	|  '----> move.l 1cb98 <parallaxStuff>,d0
    d2dc:	'-------- bne.s d26c <killParallax+0x8>
	}
}
    d2de:	          nop
    d2e0:	          nop
    d2e2:	          movea.l (sp)+,a6
    d2e4:	          lea 12(sp),sp
    d2e8:	          rts

0000d2ea <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d2ea:	       move.l 4(sp),-(sp)
    d2ee:	       jsr 76d8 <openFileFromNum>
    d2f4:	       addq.l #4,sp
    d2f6:	       tst.l d0
    d2f8:	   ,-- bne.s d30a <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d2fa:	   |   pea 19625 <PutChar+0x18df>
    d300:	   |   jsr 172a4 <KPrintF>
    d306:	   |   addq.l #4,sp
		return;
    d308:	,--|-- bra.s d32a <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d30a:	|  '-> move.l 1cada <bigDataFile>,d0
    d310:	|      move.l 12(sp),-(sp)
    d314:	|      move.l 12(sp),-(sp)
    d318:	|      move.l d0,-(sp)
    d31a:	|      jsr 1dcc <CstLoadBackdrop>
    d320:	|      lea 12(sp),sp
	finishAccess ();
    d324:	|      jsr 75d0 <finishAccess>
	
}
    d32a:	'----> rts

0000d32c <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d32c:	subq.l #8,sp
    d32e:	movea.l 12(sp),a0
    d332:	move.l 16(sp),d1
    d336:	move.l 20(sp),d0
    d33a:	movea.w a0,a0
    d33c:	move.w a0,6(sp)
    d340:	move.w d1,d1
    d342:	move.w d1,4(sp)
    d346:	move.w d0,d0
    d348:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d34c:	pea 19674 <PutChar+0x192e>
    d352:	jsr 172a4 <KPrintF>
    d358:	addq.l #4,sp

}
    d35a:	nop
    d35c:	addq.l #8,sp
    d35e:	rts

0000d360 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d360:	pea 19697 <PutChar+0x1951>
    d366:	jsr 172a4 <KPrintF>
    d36c:	addq.l #4,sp
}
    d36e:	nop
    d370:	rts

0000d372 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d372:	pea 1cb9c <snapshotTextureName>
    d378:	pea 1 <_start+0x1>
    d37c:	jsr 4836 <deleteTextures>
    d382:	addq.l #8,sp
	snapshotTextureName = 0;
    d384:	clr.l 1cb9c <snapshotTextureName>
}
    d38a:	nop
    d38c:	rts

0000d38e <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d38e:	clr.l 1cba8 <cameraX>
	cameraY = 0;
    d394:	clr.l 1cbac <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d39a:	move.l 1cb8e <sceneHeight>,d0
    d3a0:	move.l d0,d1
    d3a2:	move.l 1cb8a <sceneWidth>,d0
    d3a8:	move.l d1,-(sp)
    d3aa:	move.l d0,-(sp)
    d3ac:	jsr 36c4 <CstReserveBackdrop>
    d3b2:	addq.l #8,sp
}
    d3b4:	rts

0000d3b6 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d3b6:	jsr d23c <killBackDrop>
	killParallax ();
    d3bc:	jsr d264 <killParallax>
	killZBuffer ();
    d3c2:	jsr 85ee <killZBuffer>
	sceneWidth = x;
    d3c8:	move.l 4(sp),d0
    d3cc:	move.l d0,1cb8a <sceneWidth>
	sceneHeight = y;
    d3d2:	move.l 8(sp),d0
    d3d6:	move.l d0,1cb8e <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d3dc:	pea 196d0 <PutChar+0x198a>
    d3e2:	jsr 172a4 <KPrintF>
    d3e8:	addq.l #4,sp
	return reserveBackdrop();
    d3ea:	jsr d38e <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d3f0:	rts

0000d3f2 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d3f2:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d3f4:	move.l 12(sp),-(sp)
    d3f8:	jsr 6bc <get2bytes>
    d3fe:	addq.l #4,sp
    d400:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d404:	move.l 12(sp),-(sp)
    d408:	jsr 6bc <get2bytes>
    d40e:	addq.l #4,sp
    d410:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d412:	moveq #1,d0
}
    d414:	addq.l #8,sp
    d416:	rts

0000d418 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d418:	   ,-> lea -12(sp),sp
    d41c:	   |   move.l a6,-(sp)
    d41e:	   |   move.l d2,-(sp)
	if (me) {
    d420:	   |   tst.l 24(sp)
    d424:	,--|-- beq.w d4ba <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d428:	|  |   movea.l 24(sp),a0
    d42c:	|  |   move.l 42(a0),d0
    d430:	|  |   move.l 28(sp),-(sp)
    d434:	|  |   move.l d0,-(sp)
    d436:	|  '-- jsr d418 <saveParallaxRecursive>(pc)
    d43a:	|      addq.l #8,sp
		FPutC (fp, 1);
    d43c:	|      move.l 28(sp),16(sp)
    d442:	|      moveq #1,d0
    d444:	|      move.l d0,12(sp)
    d448:	|      move.l 1cafa <DOSBase>,d0
    d44e:	|      movea.l d0,a6
    d450:	|      move.l 16(sp),d1
    d454:	|      move.l 12(sp),d2
    d458:	|      jsr -312(a6)
    d45c:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d460:	|      movea.l 24(sp),a0
    d464:	|      move.w 28(a0),d0
    d468:	|      move.w d0,d0
    d46a:	|      andi.l #65535,d0
    d470:	|      move.l 28(sp),-(sp)
    d474:	|      move.l d0,-(sp)
    d476:	|      jsr 8d0 <put2bytes>
    d47c:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d47e:	|      movea.l 24(sp),a0
    d482:	|      move.w 30(a0),d0
    d486:	|      move.w d0,d0
    d488:	|      andi.l #65535,d0
    d48e:	|      move.l 28(sp),-(sp)
    d492:	|      move.l d0,-(sp)
    d494:	|      jsr 8d0 <put2bytes>
    d49a:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d49c:	|      movea.l 24(sp),a0
    d4a0:	|      move.w 32(a0),d0
    d4a4:	|      move.w d0,d0
    d4a6:	|      andi.l #65535,d0
    d4ac:	|      move.l 28(sp),-(sp)
    d4b0:	|      move.l d0,-(sp)
    d4b2:	|      jsr 8d0 <put2bytes>
    d4b8:	|      addq.l #8,sp
	}
}
    d4ba:	'----> nop
    d4bc:	       move.l (sp)+,d2
    d4be:	       movea.l (sp)+,a6
    d4c0:	       lea 12(sp),sp
    d4c4:	       rts

0000d4c6 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d4c6:	pea 196f7 <PutChar+0x19b1>
    d4cc:	jsr 172a4 <KPrintF>
    d4d2:	addq.l #4,sp
	return TRUE;
    d4d4:	moveq #1,d0
    d4d6:	rts

0000d4d8 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d4d8:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d4da:	             move.l 1cba0 <allObjectTypes>,(sp)

	while (huntType) {
    d4e0:	      ,----- bra.s d4f8 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d4e2:	   ,--|----> movea.l (sp),a0
    d4e4:	   |  |      move.l 4(a0),d0
    d4e8:	   |  |      cmp.l 8(sp),d0
    d4ec:	   |  |  ,-- bne.s d4f2 <findObjectType+0x1a>
    d4ee:	   |  |  |   move.l (sp),d0
    d4f0:	,--|--|--|-- bra.s d508 <findObjectType+0x30>
		huntType = huntType -> next;
    d4f2:	|  |  |  '-> movea.l (sp),a0
    d4f4:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d4f8:	|  |  '----> tst.l (sp)
    d4fa:	|  '-------- bne.s d4e2 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d4fc:	|            move.l 8(sp),-(sp)
    d500:	|            jsr d5c8 <loadObjectType>
    d506:	|            addq.l #4,sp
}
    d508:	'----------> addq.l #4,sp
    d50a:	             rts

0000d50c <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d50c:	             lea -12(sp),sp
	int i, num = 0;
    d510:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d514:	             move.l 20(sp),-(sp)
    d518:	             jsr d4d8 <findObjectType>
    d51e:	             addq.l #4,sp
    d520:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d522:	             clr.l 8(sp)
    d526:	   ,-------- bra.s d55c <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d528:	,--|-------> movea.l (sp),a0
    d52a:	|  |         move.l 38(a0),d1
    d52e:	|  |         move.l 8(sp),d0
    d532:	|  |         lsl.l #3,d0
    d534:	|  |         movea.l d1,a0
    d536:	|  |         adda.l d0,a0
    d538:	|  |         move.l (a0),d0
    d53a:	|  |         cmp.l 16(sp),d0
    d53e:	|  |  ,----- bne.s d558 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d540:	|  |  |      movea.l (sp),a0
    d542:	|  |  |      move.l 38(a0),d1
    d546:	|  |  |      move.l 8(sp),d0
    d54a:	|  |  |      lsl.l #3,d0
    d54c:	|  |  |      movea.l d1,a0
    d54e:	|  |  |      adda.l d0,a0
    d550:	|  |  |      move.l 4(a0),4(sp)
			break;
    d556:	|  |  |  ,-- bra.s d568 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d558:	|  |  '--|-> addq.l #1,8(sp)
    d55c:	|  '-----|-> movea.l (sp),a0
    d55e:	|        |   move.l 16(a0),d0
    d562:	|        |   cmp.l 8(sp),d0
    d566:	'--------|-- bgt.s d528 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d568:	         '-> move.l 4(sp),d0
}
    d56c:	             lea 12(sp),sp
    d570:	             rts

0000d572 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d572:	moveq #1,d0
}
    d574:	rts

0000d576 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d576:	subq.l #8,sp
    d578:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d57a:	move.l 16(sp),-(sp)
    d57e:	jsr 6bc <get2bytes>
    d584:	addq.l #4,sp
    d586:	move.l d0,-(sp)
    d588:	jsr d5c8 <loadObjectType>
    d58e:	addq.l #4,sp
    d590:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d594:	movea.l 8(sp),a0
    d598:	move.l (a0),4(sp)
    d59c:	move.l 1caf2 <SysBase>,d0
    d5a2:	movea.l d0,a6
    d5a4:	movea.l 4(sp),a1
    d5a8:	jsr -690(a6)
	r -> screenName = readString (fp);
    d5ac:	move.l 16(sp),-(sp)
    d5b0:	jsr b02 <readString>
    d5b6:	addq.l #4,sp
    d5b8:	movea.l 8(sp),a0
    d5bc:	move.l d0,(a0)
	return r;
    d5be:	move.l 8(sp),d0
}
    d5c2:	movea.l (sp)+,a6
    d5c4:	addq.l #8,sp
    d5c6:	rts

0000d5c8 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d5c8:	          lea -84(sp),sp
    d5cc:	          move.l a6,-(sp)
    d5ce:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d5d0:	          moveq #42,d0
    d5d2:	          move.l d0,84(sp)
    d5d6:	          clr.l 80(sp)
    d5da:	          move.l 1caf2 <SysBase>,d0
    d5e0:	          movea.l d0,a6
    d5e2:	          move.l 84(sp),d0
    d5e6:	          move.l 80(sp),d1
    d5ea:	          jsr -684(a6)
    d5ee:	          move.l d0,76(sp)
    d5f2:	          move.l 76(sp),d0
    d5f6:	          move.l d0,72(sp)

    if (newType) {
    d5fa:	,-------- beq.w d874 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d5fe:	|         move.l 96(sp),-(sp)
    d602:	|         jsr 77a0 <openObjectSlice>
    d608:	|         addq.l #4,sp
    d60a:	|         tst.w d0
    d60c:	+-------- beq.w d874 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d610:	|         move.l 1cada <bigDataFile>,d0
    d616:	|         move.l d0,-(sp)
    d618:	|         jsr 6bc <get2bytes>
    d61e:	|         addq.l #4,sp
    d620:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d624:	|         move.l 1cada <bigDataFile>,64(sp)
    d62c:	|         move.l 1cafa <DOSBase>,d0
    d632:	|         movea.l d0,a6
    d634:	|         move.l 64(sp),d1
    d638:	|         jsr -306(a6)
    d63c:	|         move.l d0,60(sp)
    d640:	|         move.l 60(sp),d0
    d644:	|         move.l d0,d0
    d646:	|         movea.l 72(sp),a0
    d64a:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d64e:	|         move.l 1cada <bigDataFile>,56(sp)
    d656:	|         move.l 1cafa <DOSBase>,d0
    d65c:	|         movea.l d0,a6
    d65e:	|         move.l 56(sp),d1
    d662:	|         jsr -306(a6)
    d666:	|         move.l d0,52(sp)
    d66a:	|         move.l 52(sp),d0
    d66e:	|         move.l d0,d0
    d670:	|         movea.l 72(sp),a0
    d674:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d678:	|         move.l 1cada <bigDataFile>,48(sp)
    d680:	|         move.l 1cafa <DOSBase>,d0
    d686:	|         movea.l d0,a6
    d688:	|         move.l 48(sp),d1
    d68c:	|         jsr -306(a6)
    d690:	|         move.l d0,44(sp)
    d694:	|         move.l 44(sp),d0
    d698:	|         move.l d0,d0
    d69a:	|         movea.l 72(sp),a0
    d69e:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d6a2:	|         move.l 1cada <bigDataFile>,40(sp)
    d6aa:	|         move.l 1cafa <DOSBase>,d0
    d6b0:	|         movea.l d0,a6
    d6b2:	|         move.l 40(sp),d1
    d6b6:	|         jsr -306(a6)
    d6ba:	|         move.l d0,36(sp)
    d6be:	|         move.l 36(sp),d0
    d6c2:	|         movea.l 72(sp),a0
    d6c6:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d6ca:	|         move.l 1cada <bigDataFile>,32(sp)
    d6d2:	|         move.l 1cafa <DOSBase>,d0
    d6d8:	|         movea.l d0,a6
    d6da:	|         move.l 32(sp),d1
    d6de:	|         jsr -306(a6)
    d6e2:	|         move.l d0,28(sp)
    d6e6:	|         move.l 28(sp),d0
    d6ea:	|         movea.l 72(sp),a0
    d6ee:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d6f2:	|         move.l 1cada <bigDataFile>,d0
    d6f8:	|         move.l d0,-(sp)
    d6fa:	|         jsr 718 <get4bytes>
    d700:	|         addq.l #4,sp
    d702:	|         movea.l 72(sp),a0
    d706:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d70a:	|         move.l 1cada <bigDataFile>,d0
    d710:	|         move.l d0,-(sp)
    d712:	|         jsr 6bc <get2bytes>
    d718:	|         addq.l #4,sp
    d71a:	|         movea.l 72(sp),a0
    d71e:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d722:	|         move.l 1cada <bigDataFile>,24(sp)
    d72a:	|         move.l 1cafa <DOSBase>,d0
    d730:	|         movea.l d0,a6
    d732:	|         move.l 24(sp),d1
    d736:	|         jsr -306(a6)
    d73a:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d73e:	|         move.l 1cada <bigDataFile>,d0
    d744:	|         move.l d0,-(sp)
    d746:	|         jsr 7d8 <getFloat>
    d74c:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d74e:	|         move.l 1cada <bigDataFile>,d0
    d754:	|         move.l d0,-(sp)
    d756:	|         jsr 7d8 <getFloat>
    d75c:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d75e:	|         move.l 1cada <bigDataFile>,d0
    d764:	|         move.l d0,-(sp)
    d766:	|         jsr 6bc <get2bytes>
    d76c:	|         addq.l #4,sp
    d76e:	|         move.l d0,d0
    d770:	|         movea.l 72(sp),a0
    d774:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d778:	|         move.l 1cada <bigDataFile>,d0
    d77e:	|         move.l d0,-(sp)
    d780:	|         jsr 6bc <get2bytes>
    d786:	|         addq.l #4,sp
    d788:	|         movea.l 72(sp),a0
    d78c:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d790:	|         movea.l 72(sp),a0
    d794:	|         move.l 16(a0),d0
    d798:	|  ,----- beq.s d7ca <loadObjectType+0x202>
    d79a:	|  |      movea.l 72(sp),a0
    d79e:	|  |      move.l 16(a0),d0
    d7a2:	|  |      lsl.l #3,d0
    d7a4:	|  |      move.l d0,16(sp)
    d7a8:	|  |      clr.l 12(sp)
    d7ac:	|  |      move.l 1caf2 <SysBase>,d0
    d7b2:	|  |      movea.l d0,a6
    d7b4:	|  |      move.l 16(sp),d0
    d7b8:	|  |      move.l 12(sp),d1
    d7bc:	|  |      jsr -684(a6)
    d7c0:	|  |      move.l d0,8(sp)
    d7c4:	|  |      move.l 8(sp),d0
    d7c8:	|  |  ,-- bra.s d7cc <loadObjectType+0x204>
    d7ca:	|  '--|-> moveq #0,d0
    d7cc:	|     '-> movea.l 72(sp),a0
    d7d0:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d7d4:	|         clr.l 88(sp)
    d7d8:	|     ,-- bra.s d828 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d7da:	|  ,--|-> move.l 1cada <bigDataFile>,d1
    d7e0:	|  |  |   movea.l 72(sp),a0
    d7e4:	|  |  |   movea.l 38(a0),a0
    d7e8:	|  |  |   move.l 88(sp),d0
    d7ec:	|  |  |   lsl.l #3,d0
    d7ee:	|  |  |   lea (0,a0,d0.l),a2
    d7f2:	|  |  |   move.l d1,-(sp)
    d7f4:	|  |  |   jsr 6bc <get2bytes>
    d7fa:	|  |  |   addq.l #4,sp
    d7fc:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d7fe:	|  |  |   move.l 1cada <bigDataFile>,d1
    d804:	|  |  |   movea.l 72(sp),a0
    d808:	|  |  |   movea.l 38(a0),a0
    d80c:	|  |  |   move.l 88(sp),d0
    d810:	|  |  |   lsl.l #3,d0
    d812:	|  |  |   lea (0,a0,d0.l),a2
    d816:	|  |  |   move.l d1,-(sp)
    d818:	|  |  |   jsr 6bc <get2bytes>
    d81e:	|  |  |   addq.l #4,sp
    d820:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d824:	|  |  |   addq.l #1,88(sp)
    d828:	|  |  '-> movea.l 72(sp),a0
    d82c:	|  |      move.l 16(a0),d0
    d830:	|  |      cmp.l 88(sp),d0
    d834:	|  '----- bgt.s d7da <loadObjectType+0x212>
            }
            finishAccess();
    d836:	|         jsr 75d0 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d83c:	|         move.l 68(sp),-(sp)
    d840:	|         jsr 75da <getNumberedString>
    d846:	|         addq.l #4,sp
    d848:	|         movea.l 72(sp),a0
    d84c:	|         move.l d0,(a0)
            newType->objectNum = i;
    d84e:	|         movea.l 72(sp),a0
    d852:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d858:	|         move.l 1cba0 <allObjectTypes>,d0
    d85e:	|         movea.l 72(sp),a0
    d862:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d866:	|         move.l 72(sp),1cba0 <allObjectTypes>
            return newType;
    d86e:	|         move.l 72(sp),d0
    d872:	|     ,-- bra.s d876 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d874:	'-----|-> moveq #0,d0
}
    d876:	      '-> movea.l (sp)+,a2
    d878:	          movea.l (sp)+,a6
    d87a:	          lea 84(sp),sp
    d87e:	          rts

0000d880 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d880:	             lea -16(sp),sp
    d884:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d886:	             move.l #117664,16(sp)

	while (* huntRegion) {
    d88e:	   ,-------- bra.s d902 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d890:	,--|-------> movea.l 16(sp),a0
    d894:	|  |         move.l (a0),d0
    d896:	|  |         cmp.l 24(sp),d0
    d89a:	|  |  ,----- bne.s d8f4 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d89c:	|  |  |      movea.l 24(sp),a0
    d8a0:	|  |  |      move.l 8(a0),d0
    d8a4:	|  |  |      movea.l 16(sp),a0
    d8a8:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d8aa:	|  |  |      movea.l 24(sp),a0
    d8ae:	|  |  |      move.l 38(a0),12(sp)
    d8b4:	|  |  |      move.l 1caf2 <SysBase>,d0
    d8ba:	|  |  |      movea.l d0,a6
    d8bc:	|  |  |      movea.l 12(sp),a1
    d8c0:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d8c4:	|  |  |      movea.l 24(sp),a0
    d8c8:	|  |  |      move.l (a0),8(sp)
    d8cc:	|  |  |      move.l 1caf2 <SysBase>,d0
    d8d2:	|  |  |      movea.l d0,a6
    d8d4:	|  |  |      movea.l 8(sp),a1
    d8d8:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d8dc:	|  |  |      move.l 24(sp),4(sp)
    d8e2:	|  |  |      move.l 1caf2 <SysBase>,d0
    d8e8:	|  |  |      movea.l d0,a6
    d8ea:	|  |  |      movea.l 4(sp),a1
    d8ee:	|  |  |      jsr -690(a6)
			return;
    d8f2:	|  |  |  ,-- bra.s d918 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d8f4:	|  |  '--|-> movea.l 16(sp),a0
    d8f8:	|  |     |   move.l (a0),d0
    d8fa:	|  |     |   move.l d0,d1
    d8fc:	|  |     |   addq.l #8,d1
    d8fe:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d902:	|  '-----|-> movea.l 16(sp),a0
    d906:	|        |   move.l (a0),d0
    d908:	'--------|-- bne.s d890 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d90a:	         |   pea 1971e <PutChar+0x19d8>
    d910:	         |   jsr 172a4 <KPrintF>
    d916:	         |   addq.l #4,sp
}
    d918:	         '-> movea.l (sp)+,a6
    d91a:	             lea 16(sp),sp
    d91e:	             rts

0000d920 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d920:	movea.l 4(sp),a0
    d924:	move.l 4(a0),d0
    d928:	move.l 8(sp),-(sp)
    d92c:	move.l d0,-(sp)
    d92e:	jsr 8d0 <put2bytes>
    d934:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d936:	movea.l 4(sp),a0
    d93a:	move.l (a0),d0
    d93c:	move.l 8(sp),-(sp)
    d940:	move.l d0,-(sp)
    d942:	jsr bd8 <writeString>
    d948:	addq.l #8,sp
    d94a:	nop
    d94c:	rts

0000d94e <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d94e:	                         lea -112(sp),sp
    d952:	                         move.l a6,-(sp)
    d954:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d956:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d95a:	                         move.w 1cba6 <saveEncoding>,d0
    d960:	                  ,----- beq.s d96a <fileToStack+0x1c>
    d962:	                  |      move.l #104260,d0
    d968:	                  |  ,-- bra.s d970 <fileToStack+0x22>
    d96a:	                  '--|-> move.l #104286,d0
    d970:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d974:	                         move.l 124(sp),112(sp)
    d97a:	                         move.l #1005,108(sp)
    d982:	                         move.l 1cafa <DOSBase>,d0
    d988:	                         movea.l d0,a6
    d98a:	                         move.l 112(sp),d1
    d98e:	                         move.l 108(sp),d2
    d992:	                         jsr -30(a6)
    d996:	                         move.l d0,104(sp)
    d99a:	                         move.l 104(sp),d0
    d99e:	                         move.l d0,100(sp)
    if (!fp) {
    d9a2:	                     ,-- bne.s d9bc <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d9a4:	                     |   move.l 124(sp),-(sp)
    d9a8:	                     |   pea 19775 <PutChar+0x1a2f>
    d9ae:	                     |   jsr 172a4 <KPrintF>
    d9b4:	                     |   addq.l #8,sp
        return FALSE;
    d9b6:	                     |   clr.w d0
    d9b8:	,--------------------|-- bra.w dcb2 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d9bc:	|                    '-> move.w 1cba6 <saveEncoding>,d0
    d9c2:	|                        move.l d0,d0
    d9c4:	|                        move.b d0,1cba4 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d9ca:	|                        move.w 1cba6 <saveEncoding>,d0
    d9d0:	|                        lsr.w #8,d0
    d9d2:	|                        move.l d0,d0
    d9d4:	|                        move.b d0,1cba5 <encode2>

    while (*checker) {
    d9da:	|                 ,----- bra.s da3e <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d9dc:	|              ,--|----> move.l 100(sp),30(sp)
    d9e2:	|              |  |      move.l 1cafa <DOSBase>,d0
    d9e8:	|              |  |      movea.l d0,a6
    d9ea:	|              |  |      move.l 30(sp),d1
    d9ee:	|              |  |      jsr -306(a6)
    d9f2:	|              |  |      move.l d0,26(sp)
    d9f6:	|              |  |      move.l 26(sp),d1
    d9fa:	|              |  |      movea.l 116(sp),a0
    d9fe:	|              |  |      move.b (a0),d0
    da00:	|              |  |      ext.w d0
    da02:	|              |  |      movea.w d0,a0
    da04:	|              |  |      cmpa.l d1,a0
    da06:	|              |  |  ,-- beq.s da3a <fileToStack+0xec>
            Close(fp);
    da08:	|              |  |  |   move.l 100(sp),22(sp)
    da0e:	|              |  |  |   move.l 1cafa <DOSBase>,d0
    da14:	|              |  |  |   movea.l d0,a6
    da16:	|              |  |  |   move.l 22(sp),d1
    da1a:	|              |  |  |   jsr -36(a6)
    da1e:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da22:	|              |  |  |   move.l 124(sp),-(sp)
    da26:	|              |  |  |   pea 19782 <PutChar+0x1a3c>
    da2c:	|              |  |  |   jsr 172a4 <KPrintF>
    da32:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da34:	|              |  |  |   clr.w d0
    da36:	+--------------|--|--|-- bra.w dcb2 <fileToStack+0x364>
        }
        checker++;
    da3a:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    da3e:	|              |  '----> movea.l 116(sp),a0
    da42:	|              |         move.b (a0),d0
    da44:	|              '-------- bne.s d9dc <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da46:	|                        move.w 1cba6 <saveEncoding>,d0
    da4c:	|  ,-------------------- beq.s dac0 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da4e:	|  |                     move.l 100(sp),-(sp)
    da52:	|  |                     jsr dcbc <readStringEncoded>
    da58:	|  |                     addq.l #4,sp
    da5a:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    da5e:	|  |                     pea 197c3 <PutChar+0x1a7d>
    da64:	|  |                     move.l 100(sp),-(sp)
    da68:	|  |                     jsr 13c70 <strcmp>
    da6e:	|  |                     addq.l #8,sp
    da70:	|  |                     tst.l d0
    da72:	|  |                 ,-- beq.s daa6 <fileToStack+0x158>
            Close(fp);
    da74:	|  |                 |   move.l 100(sp),88(sp)
    da7a:	|  |                 |   move.l 1cafa <DOSBase>,d0
    da80:	|  |                 |   movea.l d0,a6
    da82:	|  |                 |   move.l 88(sp),d1
    da86:	|  |                 |   jsr -36(a6)
    da8a:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    da8e:	|  |                 |   move.l 124(sp),-(sp)
    da92:	|  |                 |   pea 197d2 <PutChar+0x1a8c>
    da98:	|  |                 |   jsr 172a4 <KPrintF>
    da9e:	|  |                 |   addq.l #8,sp
            return FALSE;
    daa0:	|  |                 |   clr.w d0
    daa2:	+--|-----------------|-- bra.w dcb2 <fileToStack+0x364>
        }
        FreeVec(checker);
    daa6:	|  |                 '-> move.l 96(sp),92(sp)
    daac:	|  |                     move.l 1caf2 <SysBase>,d0
    dab2:	|  |                     movea.l d0,a6
    dab4:	|  |                     movea.l 92(sp),a1
    dab8:	|  |                     jsr -690(a6)
        checker = NULL;
    dabc:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dac0:	|  >-------------------> move.w 1cba6 <saveEncoding>,d0
    dac6:	|  |     ,-------------- beq.w dbfa <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    daca:	|  |     |               move.l 100(sp),76(sp)
    dad0:	|  |     |               move.l 1cafa <DOSBase>,d0
    dad6:	|  |     |               movea.l d0,a6
    dad8:	|  |     |               move.l 76(sp),d1
    dadc:	|  |     |               jsr -306(a6)
    dae0:	|  |     |               move.l d0,72(sp)
    dae4:	|  |     |               move.l 72(sp),d0
    dae8:	|  |     |               move.b 1cba4 <encode1>,d1
    daee:	|  |     |               ext.w d1
    daf0:	|  |     |               ext.l d1
    daf2:	|  |     |               move.l d0,d2
    daf4:	|  |     |               eor.l d1,d2
    daf6:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dafa:	|  |     |               moveq #-1,d0
    dafc:	|  |     |               cmp.l 68(sp),d0
    db00:	|  |  ,--|-------------- beq.w dc90 <fileToStack+0x342>

            char i = (char) tmp;
    db04:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db0a:	|  |  |  |               move.b 67(sp),d0
    db0e:	|  |  |  |               ext.w d0
    db10:	|  |  |  |               movea.w d0,a0
    db12:	|  |  |  |               moveq #2,d2
    db14:	|  |  |  |               cmp.l a0,d2
    db16:	|  |  |  |     ,-------- beq.s db92 <fileToStack+0x244>
    db18:	|  |  |  |     |         moveq #2,d0
    db1a:	|  |  |  |     |         cmp.l a0,d0
    db1c:	|  |  |  |  ,--|-------- blt.w dbc8 <fileToStack+0x27a>
    db20:	|  |  |  |  |  |         cmpa.w #0,a0
    db24:	|  |  |  |  |  |     ,-- beq.s db30 <fileToStack+0x1e2>
    db26:	|  |  |  |  |  |     |   moveq #1,d2
    db28:	|  |  |  |  |  |     |   cmp.l a0,d2
    db2a:	|  |  |  |  |  |  ,--|-- beq.s db6c <fileToStack+0x21e>
    db2c:	|  |  |  |  +--|--|--|-- bra.w dbc8 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db30:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    db34:	|  |  |  |  |  |  |      jsr dcbc <readStringEncoded>
    db3a:	|  |  |  |  |  |  |      addq.l #4,sp
    db3c:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db40:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db44:	|  |  |  |  |  |  |      lea 14(sp),a0
    db48:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db4a:	|  |  |  |  |  |  |      jsr 149e6 <makeTextVar>
    db50:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db52:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db58:	|  |  |  |  |  |  |      move.l 1caf2 <SysBase>,d0
    db5e:	|  |  |  |  |  |  |      movea.l d0,a6
    db60:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    db64:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    db68:	|  |  |  |  |  |  |  ,-- bra.w dc20 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    db6c:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    db70:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    db76:	|  |  |  |  |  |     |   addq.l #4,sp
    db78:	|  |  |  |  |  |     |   move.l d0,-(sp)
    db7a:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    db7e:	|  |  |  |  |  |     |   lea 18(sp),a0
    db82:	|  |  |  |  |  |     |   move.l a0,-(sp)
    db84:	|  |  |  |  |  |     |   jsr 150b6 <setVariable>
    db8a:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    db8e:	|  |  |  |  |  |     +-- bra.w dc20 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    db92:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    db98:	|  |  |  |  |        |   move.l 1cafa <DOSBase>,d0
    db9e:	|  |  |  |  |        |   movea.l d0,a6
    dba0:	|  |  |  |  |        |   move.l 62(sp),d1
    dba4:	|  |  |  |  |        |   jsr -306(a6)
    dba8:	|  |  |  |  |        |   move.l d0,58(sp)
    dbac:	|  |  |  |  |        |   move.l 58(sp),d0
    dbb0:	|  |  |  |  |        |   move.l d0,-(sp)
    dbb2:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dbb6:	|  |  |  |  |        |   lea 18(sp),a0
    dbba:	|  |  |  |  |        |   move.l a0,-(sp)
    dbbc:	|  |  |  |  |        |   jsr 150b6 <setVariable>
    dbc2:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dbc6:	|  |  |  |  |        +-- bra.s dc20 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dbc8:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    dbcc:	|  |  |  |           |   pea 19854 <PutChar+0x1b0e>
    dbd2:	|  |  |  |           |   jsr 172a4 <KPrintF>
    dbd8:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dbda:	|  |  |  |           |   move.l 100(sp),46(sp)
    dbe0:	|  |  |  |           |   move.l 1cafa <DOSBase>,d0
    dbe6:	|  |  |  |           |   movea.l d0,a6
    dbe8:	|  |  |  |           |   move.l 46(sp),d1
    dbec:	|  |  |  |           |   jsr -36(a6)
    dbf0:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dbf4:	|  |  |  |           |   clr.w d0
    dbf6:	+--|--|--|-----------|-- bra.w dcb2 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dbfa:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    dbfe:	|  |  |              |   jsr dd82 <readTextPlain>
    dc04:	|  |  |              |   addq.l #4,sp
    dc06:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc0a:	|  |  |        ,-----|-- beq.w dc94 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc0e:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc12:	|  |  |        |     |   lea 14(sp),a0
    dc16:	|  |  |        |     |   move.l a0,-(sp)
    dc18:	|  |  |        |     |   jsr 149e6 <makeTextVar>
    dc1e:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc20:	|  |  |        |     '-> movea.l 128(sp),a0
    dc24:	|  |  |        |         move.l (a0),d0
    dc26:	|  |  |        |  ,----- bne.s dc56 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc28:	|  |  |        |  |      move.l 128(sp),d0
    dc2c:	|  |  |        |  |      move.l d0,-(sp)
    dc2e:	|  |  |        |  |      lea 14(sp),a0
    dc32:	|  |  |        |  |      move.l a0,-(sp)
    dc34:	|  |  |        |  |      jsr 14086 <addVarToStackQuick>
    dc3a:	|  |  |        |  |      addq.l #8,sp
    dc3c:	|  |  |        |  |      tst.w d0
    dc3e:	|  |  |        |  |  ,-- bne.s dc44 <fileToStack+0x2f6>
    dc40:	|  |  |        |  |  |   clr.w d0
    dc42:	+--|--|--------|--|--|-- bra.s dcb2 <fileToStack+0x364>
            sH->last = sH->first;
    dc44:	|  |  |        |  |  '-> movea.l 128(sp),a0
    dc48:	|  |  |        |  |      move.l (a0),d0
    dc4a:	|  |  |        |  |      movea.l 128(sp),a0
    dc4e:	|  |  |        |  |      move.l d0,4(a0)
    dc52:	|  +--|--------|--|----- bra.w dac0 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc56:	|  |  |        |  '----> movea.l 128(sp),a0
    dc5a:	|  |  |        |         move.l 4(a0),d0
    dc5e:	|  |  |        |         addq.l #8,d0
    dc60:	|  |  |        |         move.l d0,-(sp)
    dc62:	|  |  |        |         lea 14(sp),a0
    dc66:	|  |  |        |         move.l a0,-(sp)
    dc68:	|  |  |        |         jsr 14086 <addVarToStackQuick>
    dc6e:	|  |  |        |         addq.l #8,sp
    dc70:	|  |  |        |         tst.w d0
    dc72:	|  |  |        |     ,-- bne.s dc78 <fileToStack+0x32a>
    dc74:	|  |  |        |     |   clr.w d0
    dc76:	+--|--|--------|-----|-- bra.s dcb2 <fileToStack+0x364>
            sH->last = sH->last->next;
    dc78:	|  |  |        |     '-> movea.l 128(sp),a0
    dc7c:	|  |  |        |         movea.l 4(a0),a0
    dc80:	|  |  |        |         move.l 8(a0),d0
    dc84:	|  |  |        |         movea.l 128(sp),a0
    dc88:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dc8c:	|  '--|--------|-------- bra.w dac0 <fileToStack+0x172>
            if (tmp == -1) break;
    dc90:	|     '--------|-------> nop
    dc92:	|              |     ,-- bra.s dc96 <fileToStack+0x348>
            if (!line) break;
    dc94:	|              '-----|-> nop
        }
    }
    Close(fp);
    dc96:	|                    '-> move.l 100(sp),38(sp)
    dc9c:	|                        move.l 1cafa <DOSBase>,d0
    dca2:	|                        movea.l d0,a6
    dca4:	|                        move.l 38(sp),d1
    dca8:	|                        jsr -36(a6)
    dcac:	|                        move.l d0,34(sp)
    return TRUE;
    dcb0:	|                        moveq #1,d0
}
    dcb2:	'----------------------> move.l (sp)+,d2
    dcb4:	                         movea.l (sp)+,a6
    dcb6:	                         lea 112(sp),sp
    dcba:	                         rts

0000dcbc <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dcbc:	          lea -32(sp),sp
    dcc0:	          move.l a6,-(sp)
    dcc2:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dcc4:	          move.l 44(sp),-(sp)
    dcc8:	          jsr 6bc <get2bytes>
    dcce:	          addq.l #4,sp
    dcd0:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dcd4:	          move.l 32(sp),d0
    dcd8:	          addq.l #1,d0
    dcda:	          move.l d0,28(sp)
    dcde:	          clr.l 24(sp)
    dce2:	          move.l 1caf2 <SysBase>,d0
    dce8:	          movea.l d0,a6
    dcea:	          move.l 28(sp),d0
    dcee:	          move.l 24(sp),d1
    dcf2:	          jsr -684(a6)
    dcf6:	          move.l d0,20(sp)
    dcfa:	          move.l 20(sp),d0
    dcfe:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd02:	      ,-- bne.s dd08 <readStringEncoded+0x4c>
    dd04:	      |   moveq #0,d0
    dd06:	,-----|-- bra.s dd78 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd08:	|     '-> clr.l 36(sp)
    dd0c:	|     ,-- bra.s dd5e <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd0e:	|  ,--|-> move.l 44(sp),12(sp)
    dd14:	|  |  |   move.l 1cafa <DOSBase>,d0
    dd1a:	|  |  |   movea.l d0,a6
    dd1c:	|  |  |   move.l 12(sp),d1
    dd20:	|  |  |   jsr -306(a6)
    dd24:	|  |  |   move.l d0,8(sp)
    dd28:	|  |  |   move.l 8(sp),d0
    dd2c:	|  |  |   move.l d0,d1
    dd2e:	|  |  |   move.b 1cba4 <encode1>,d2
    dd34:	|  |  |   move.l 36(sp),d0
    dd38:	|  |  |   movea.l 16(sp),a0
    dd3c:	|  |  |   adda.l d0,a0
    dd3e:	|  |  |   move.b d1,d0
    dd40:	|  |  |   eor.b d2,d0
    dd42:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd44:	|  |  |   move.b 1cba4 <encode1>,d0
    dd4a:	|  |  |   move.b d0,d1
    dd4c:	|  |  |   move.b 1cba5 <encode2>,d0
    dd52:	|  |  |   add.b d1,d0
    dd54:	|  |  |   move.b d0,1cba4 <encode1>
    for (a = 0; a < len; a++) {
    dd5a:	|  |  |   addq.l #1,36(sp)
    dd5e:	|  |  '-> move.l 36(sp),d0
    dd62:	|  |      cmp.l 32(sp),d0
    dd66:	|  '----- blt.s dd0e <readStringEncoded+0x52>
    }
    s[len] = 0;
    dd68:	|         move.l 32(sp),d0
    dd6c:	|         movea.l 16(sp),a0
    dd70:	|         adda.l d0,a0
    dd72:	|         clr.b (a0)
    return s;
    dd74:	|         move.l 16(sp),d0
}
    dd78:	'-------> move.l (sp)+,d2
    dd7a:	          movea.l (sp)+,a6
    dd7c:	          lea 32(sp),sp
    dd80:	          rts

0000dd82 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dd82:	             lea -104(sp),sp
    dd86:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dd8a:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dd8e:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dd94:	             move.l 124(sp),106(sp)
    dd9a:	             clr.l 102(sp)
    dd9e:	             clr.l 98(sp)
    dda2:	             move.l 1cafa <DOSBase>,d0
    dda8:	             movea.l d0,a6
    ddaa:	             move.l 106(sp),d1
    ddae:	             move.l 102(sp),d2
    ddb2:	             move.l 98(sp),d3
    ddb6:	             jsr -66(a6)
    ddba:	             move.l d0,94(sp)
    ddbe:	             move.l 94(sp),d0
    ddc2:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    ddc6:	   ,-------- bra.s de0a <readTextPlain+0x88>
        tmp = FGetC(fp);
    ddc8:	,--|-------> move.l 124(sp),22(sp)
    ddce:	|  |         move.l 1cafa <DOSBase>,d0
    ddd4:	|  |         movea.l d0,a6
    ddd6:	|  |         move.l 22(sp),d1
    ddda:	|  |         jsr -306(a6)
    ddde:	|  |         move.l d0,18(sp)
    dde2:	|  |         move.l 18(sp),d0
    dde6:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    ddea:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    ddf0:	|  |         cmpi.b #10,17(sp)
    ddf6:	|  |  ,----- beq.s de00 <readTextPlain+0x7e>
    ddf8:	|  |  |      moveq #-1,d0
    ddfa:	|  |  |      cmp.l 110(sp),d0
    ddfe:	|  |  |  ,-- bne.s de06 <readTextPlain+0x84>
            keepGoing = FALSE;
    de00:	|  |  '--|-> clr.w 114(sp)
    de04:	|  +-----|-- bra.s de0a <readTextPlain+0x88>
        } else {
            stringSize++;
    de06:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    de0a:	|  '-------> tst.w 114(sp)
    de0e:	'----------- bne.s ddc8 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de10:	             tst.l 116(sp)
    de14:	         ,-- bne.s de24 <readTextPlain+0xa2>
    de16:	         |   moveq #-1,d0
    de18:	         |   cmp.l 110(sp),d0
    de1c:	         +-- bne.s de24 <readTextPlain+0xa2>
        return NULL;
    de1e:	         |   moveq #0,d0
    de20:	      ,--|-- bra.w df0a <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de24:	      |  '-> move.l 124(sp),86(sp)
    de2a:	      |      move.l 90(sp),82(sp)
    de30:	      |      moveq #-1,d0
    de32:	      |      move.l d0,78(sp)
    de36:	      |      move.l 1cafa <DOSBase>,d0
    de3c:	      |      movea.l d0,a6
    de3e:	      |      move.l 86(sp),d1
    de42:	      |      move.l 82(sp),d2
    de46:	      |      move.l 78(sp),d3
    de4a:	      |      jsr -66(a6)
    de4e:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de52:	      |      move.l 116(sp),d0
    de56:	      |      addq.l #1,d0
    de58:	      |      move.l d0,70(sp)
    de5c:	      |      clr.l 66(sp)
    de60:	      |      move.l 1caf2 <SysBase>,d0
    de66:	      |      movea.l d0,a6
    de68:	      |      move.l 70(sp),d0
    de6c:	      |      move.l 66(sp),d1
    de70:	      |      jsr -684(a6)
    de74:	      |      move.l d0,62(sp)
    de78:	      |      move.l 62(sp),d0
    de7c:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    de80:	      |  ,-- bne.s de88 <readTextPlain+0x106>
    de82:	      |  |   moveq #0,d0
    de84:	      +--|-- bra.w df0a <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    de88:	      |  '-> move.l 124(sp),54(sp)
    de8e:	      |      move.l 58(sp),50(sp)
    de94:	      |      moveq #1,d0
    de96:	      |      move.l d0,46(sp)
    de9a:	      |      move.l 116(sp),42(sp)
    dea0:	      |      move.l 1cafa <DOSBase>,d0
    dea6:	      |      movea.l d0,a6
    dea8:	      |      move.l 54(sp),d1
    deac:	      |      move.l 50(sp),d2
    deb0:	      |      move.l 46(sp),d3
    deb4:	      |      move.l 42(sp),d4
    deb8:	      |      jsr -324(a6)
    debc:	      |      move.l d0,38(sp)
    dec0:	      |      move.l 38(sp),d0
    dec4:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dec8:	      |      move.l 34(sp),d0
    decc:	      |      cmp.l 116(sp),d0
    ded0:	      |  ,-- beq.s dee0 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    ded2:	      |  |   pea 19889 <PutChar+0x1b43>
    ded8:	      |  |   jsr 172a4 <KPrintF>
    dede:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dee0:	      |  '-> move.l 124(sp),30(sp)
    dee6:	      |      move.l 1cafa <DOSBase>,d0
    deec:	      |      movea.l d0,a6
    deee:	      |      move.l 30(sp),d1
    def2:	      |      jsr -306(a6)
    def6:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    defa:	      |      move.l 116(sp),d0
    defe:	      |      movea.l 58(sp),a0
    df02:	      |      adda.l d0,a0
    df04:	      |      clr.b (a0)
    }

    return reply;
    df06:	      |      move.l 58(sp),d0
}
    df0a:	      '----> movem.l (sp)+,d2-d4/a6
    df0e:	             lea 104(sp),sp
    df12:	             rts

0000df14 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df14:	                      lea -144(sp),sp
    df18:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df1c:	                      move.l 160(sp),148(sp)
    df22:	                      move.l #1006,144(sp)
    df2a:	                      move.l 1cafa <DOSBase>,d0
    df30:	                      movea.l d0,a6
    df32:	                      move.l 148(sp),d1
    df36:	                      move.l 144(sp),d2
    df3a:	                      jsr -30(a6)
    df3e:	                      move.l d0,140(sp)
    df42:	                      move.l 140(sp),d0
    df46:	                      move.l d0,136(sp)

    if (!fp) {
    df4a:	                  ,-- bne.s df64 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df4c:	                  |   move.l 160(sp),-(sp)
    df50:	                  |   pea 198aa <PutChar+0x1b64>
    df56:	                  |   jsr 172a4 <KPrintF>
    df5c:	                  |   addq.l #8,sp
        return FALSE;
    df5e:	                  |   clr.w d0
    df60:	,-----------------|-- bra.w e220 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    df64:	|                 '-> movea.l 164(sp),a0
    df68:	|                     movea.l 4(a0),a0
    df6c:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    df70:	|                     move.w 1cba6 <saveEncoding>,d0
    df76:	|                     move.l d0,d0
    df78:	|                     move.b d0,1cba4 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    df7e:	|                     move.w 1cba6 <saveEncoding>,d0
    df84:	|                     lsr.w #8,d0
    df86:	|                     move.l d0,d0
    df88:	|                     move.b d0,1cba5 <encode2>

    if (saveEncoding) {
    df8e:	|                     move.w 1cba6 <saveEncoding>,d0
    df94:	|                 ,-- beq.s dfe6 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    df96:	|                 |   move.l 136(sp),116(sp)
    df9c:	|                 |   move.l #104260,112(sp)
    dfa4:	|                 |   moveq #99,d0
    dfa6:	|                 |   not.b d0
    dfa8:	|                 |   add.l sp,d0
    dfaa:	|                 |   addi.l #-144,d0
    dfb0:	|                 |   move.l d0,108(sp)
    dfb4:	|                 |   move.l 1cafa <DOSBase>,d0
    dfba:	|                 |   movea.l d0,a6
    dfbc:	|                 |   move.l 116(sp),d1
    dfc0:	|                 |   move.l 112(sp),d2
    dfc4:	|                 |   move.l 108(sp),d3
    dfc8:	|                 |   jsr -354(a6)
    dfcc:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dfd0:	|                 |   move.l 136(sp),-(sp)
    dfd4:	|                 |   pea 197c3 <PutChar+0x1a7d>
    dfda:	|                 |   jsr e22a <writeStringEncoded>
    dfe0:	|                 |   addq.l #8,sp
    dfe2:	|  ,--------------|-- bra.w e1f8 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dfe6:	|  |              '-> move.l 136(sp),132(sp)
    dfec:	|  |                  move.l #104286,128(sp)
    dff4:	|  |                  moveq #99,d1
    dff6:	|  |                  not.b d1
    dff8:	|  |                  add.l sp,d1
    dffa:	|  |                  addi.l #-144,d1
    e000:	|  |                  move.l d1,124(sp)
    e004:	|  |                  move.l 1cafa <DOSBase>,d0
    e00a:	|  |                  movea.l d0,a6
    e00c:	|  |                  move.l 132(sp),d1
    e010:	|  |                  move.l 128(sp),d2
    e014:	|  |                  move.l 124(sp),d3
    e018:	|  |                  jsr -354(a6)
    e01c:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e020:	|  +----------------- bra.w e1f8 <stackToFile+0x2e4>
        if (saveEncoding) {
    e024:	|  |  ,-------------> move.w 1cba6 <saveEncoding>,d0
    e02a:	|  |  |     ,-------- beq.w e17c <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e02e:	|  |  |     |         movea.l 152(sp),a0
    e032:	|  |  |     |         move.l (a0),d0
    e034:	|  |  |     |         moveq #1,d1
    e036:	|  |  |     |         cmp.l d0,d1
    e038:	|  |  |     |     ,-- beq.s e088 <stackToFile+0x174>
    e03a:	|  |  |     |     |   moveq #3,d1
    e03c:	|  |  |     |     |   cmp.l d0,d1
    e03e:	|  |  |     |  ,--|-- bne.w e14a <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e042:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e048:	|  |  |     |  |  |   move.b 1cba4 <encode1>,d0
    e04e:	|  |  |     |  |  |   ext.w d0
    e050:	|  |  |     |  |  |   movea.w d0,a0
    e052:	|  |  |     |  |  |   move.l a0,72(sp)
    e056:	|  |  |     |  |  |   move.l 1cafa <DOSBase>,d0
    e05c:	|  |  |     |  |  |   movea.l d0,a6
    e05e:	|  |  |     |  |  |   move.l 76(sp),d1
    e062:	|  |  |     |  |  |   move.l 72(sp),d2
    e066:	|  |  |     |  |  |   jsr -312(a6)
    e06a:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e06e:	|  |  |     |  |  |   movea.l 152(sp),a0
    e072:	|  |  |     |  |  |   move.l 4(a0),d0
    e076:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e07a:	|  |  |     |  |  |   move.l d0,-(sp)
    e07c:	|  |  |     |  |  |   jsr e22a <writeStringEncoded>
    e082:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e084:	|  |  |  ,--|--|--|-- bra.w e1ee <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e088:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e08c:	|  |  |  |  |  |      move.l 4(a0),d0
    e090:	|  |  |  |  |  |  ,-- bmi.s e100 <stackToFile+0x1ec>
    e092:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e096:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e09a:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e0a0:	|  |  |  |  |  |  +-- bgt.s e100 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e0a2:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e0a8:	|  |  |  |  |  |  |   move.b 1cba4 <encode1>,d0
    e0ae:	|  |  |  |  |  |  |   eori.b #2,d0
    e0b2:	|  |  |  |  |  |  |   ext.w d0
    e0b4:	|  |  |  |  |  |  |   movea.w d0,a0
    e0b6:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e0ba:	|  |  |  |  |  |  |   move.l 1cafa <DOSBase>,d0
    e0c0:	|  |  |  |  |  |  |   movea.l d0,a6
    e0c2:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e0c6:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e0ca:	|  |  |  |  |  |  |   jsr -312(a6)
    e0ce:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e0d2:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e0d8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0dc:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e0e2:	|  |  |  |  |  |  |   move.l 1cafa <DOSBase>,d0
    e0e8:	|  |  |  |  |  |  |   movea.l d0,a6
    e0ea:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e0ee:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e0f2:	|  |  |  |  |  |  |   jsr -312(a6)
    e0f6:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e0fa:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e0fc:	|  |  |  +--|--|--|-- bra.w e1ee <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e100:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e106:	|  |  |  |  |  |      move.b 1cba4 <encode1>,d0
    e10c:	|  |  |  |  |  |      eori.b #1,d0
    e110:	|  |  |  |  |  |      ext.w d0
    e112:	|  |  |  |  |  |      movea.w d0,a0
    e114:	|  |  |  |  |  |      move.l a0,36(sp)
    e118:	|  |  |  |  |  |      move.l 1cafa <DOSBase>,d0
    e11e:	|  |  |  |  |  |      movea.l d0,a6
    e120:	|  |  |  |  |  |      move.l 40(sp),d1
    e124:	|  |  |  |  |  |      move.l 36(sp),d2
    e128:	|  |  |  |  |  |      jsr -312(a6)
    e12c:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e130:	|  |  |  |  |  |      movea.l 152(sp),a0
    e134:	|  |  |  |  |  |      move.l 4(a0),d0
    e138:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e13c:	|  |  |  |  |  |      move.l d0,-(sp)
    e13e:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e144:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e146:	|  |  |  +--|--|----- bra.w e1ee <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e14a:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e14e:	|  |  |  |  |         pea 198bc <PutChar+0x1b76>
    e154:	|  |  |  |  |         jsr 172a4 <KPrintF>
    e15a:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e15c:	|  |  |  |  |         move.l 136(sp),28(sp)
    e162:	|  |  |  |  |         move.l 1cafa <DOSBase>,d0
    e168:	|  |  |  |  |         movea.l d0,a6
    e16a:	|  |  |  |  |         move.l 28(sp),d1
    e16e:	|  |  |  |  |         jsr -36(a6)
    e172:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e176:	|  |  |  |  |         clr.w d0
    e178:	+--|--|--|--|-------- bra.w e220 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e17c:	|  |  |  |  '-------> move.l 152(sp),d0
    e180:	|  |  |  |            move.l d0,-(sp)
    e182:	|  |  |  |            jsr 14d9a <getTextFromAnyVar>
    e188:	|  |  |  |            addq.l #4,sp
    e18a:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e18e:	|  |  |  |     ,----- beq.s e202 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e190:	|  |  |  |     |      movea.l 100(sp),a0
    e194:	|  |  |  |     |      move.b (a0),d0
    e196:	|  |  |  |     |      ext.w d0
    e198:	|  |  |  |     |      movea.w d0,a0
    e19a:	|  |  |  |     |      move.l a0,12(sp)
    e19e:	|  |  |  |     |      move.l 136(sp),96(sp)
    e1a4:	|  |  |  |     |      move.l #104728,92(sp)
    e1ac:	|  |  |  |     |      moveq #99,d0
    e1ae:	|  |  |  |     |      not.b d0
    e1b0:	|  |  |  |     |      add.l sp,d0
    e1b2:	|  |  |  |     |      addi.l #-144,d0
    e1b8:	|  |  |  |     |      move.l d0,88(sp)
    e1bc:	|  |  |  |     |      move.l 1cafa <DOSBase>,d0
    e1c2:	|  |  |  |     |      movea.l d0,a6
    e1c4:	|  |  |  |     |      move.l 96(sp),d1
    e1c8:	|  |  |  |     |      move.l 92(sp),d2
    e1cc:	|  |  |  |     |      move.l 88(sp),d3
    e1d0:	|  |  |  |     |      jsr -354(a6)
    e1d4:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e1d8:	|  |  |  |     |      move.l 100(sp),80(sp)
    e1de:	|  |  |  |     |      move.l 1caf2 <SysBase>,d0
    e1e4:	|  |  |  |     |      movea.l d0,a6
    e1e6:	|  |  |  |     |      movea.l 80(sp),a1
    e1ea:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e1ee:	|  |  |  '-----|----> movea.l 152(sp),a0
    e1f2:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e1f8:	|  '--|--------|----> tst.l 152(sp)
    e1fc:	|     '--------|----- bne.w e024 <stackToFile+0x110>
    e200:	|              |  ,-- bra.s e204 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e202:	|              '--|-> nop
    }
    Close(fp);
    e204:	|                 '-> move.l 136(sp),20(sp)
    e20a:	|                     move.l 1cafa <DOSBase>,d0
    e210:	|                     movea.l d0,a6
    e212:	|                     move.l 20(sp),d1
    e216:	|                     jsr -36(a6)
    e21a:	|                     move.l d0,16(sp)
    return TRUE;
    e21e:	|                     moveq #1,d0
}
    e220:	'-------------------> movem.l (sp)+,d2-d3/a6
    e224:	                      lea 144(sp),sp
    e228:	                      rts

0000e22a <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e22a:	       lea -20(sp),sp
    e22e:	       move.l a6,-(sp)
    e230:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e232:	       move.l 32(sp),-(sp)
    e236:	       jsr 13cb0 <strlen>
    e23c:	       addq.l #4,sp
    e23e:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e242:	       move.l 36(sp),-(sp)
    e246:	       move.l 24(sp),-(sp)
    e24a:	       jsr 8d0 <put2bytes>
    e250:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e252:	       clr.l 24(sp)
    e256:	   ,-- bra.s e2ac <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e258:	,--|-> move.l 36(sp),16(sp)
    e25e:	|  |   move.l 24(sp),d0
    e262:	|  |   movea.l 32(sp),a0
    e266:	|  |   adda.l d0,a0
    e268:	|  |   move.b (a0),d1
    e26a:	|  |   move.b 1cba4 <encode1>,d0
    e270:	|  |   eor.b d1,d0
    e272:	|  |   ext.w d0
    e274:	|  |   movea.w d0,a0
    e276:	|  |   move.l a0,12(sp)
    e27a:	|  |   move.l 1cafa <DOSBase>,d0
    e280:	|  |   movea.l d0,a6
    e282:	|  |   move.l 16(sp),d1
    e286:	|  |   move.l 12(sp),d2
    e28a:	|  |   jsr -312(a6)
    e28e:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e292:	|  |   move.b 1cba4 <encode1>,d0
    e298:	|  |   move.b d0,d1
    e29a:	|  |   move.b 1cba5 <encode2>,d0
    e2a0:	|  |   add.b d1,d0
    e2a2:	|  |   move.b d0,1cba4 <encode1>
	for (a = 0; a < len; a ++) {
    e2a8:	|  |   addq.l #1,24(sp)
    e2ac:	|  '-> move.l 24(sp),d0
    e2b0:	|      cmp.l 20(sp),d0
    e2b4:	'----- blt.s e258 <writeStringEncoded+0x2e>
	}
}
    e2b6:	       nop
    e2b8:	       nop
    e2ba:	       move.l (sp)+,d2
    e2bc:	       movea.l (sp)+,a6
    e2be:	       lea 20(sp),sp
    e2c2:	       rts

0000e2c4 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e2c4:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e2c6:	                   tst.l 8(sp)
    e2ca:	               ,-- bne.s e2d0 <failSecurityCheck+0xc>
    e2cc:	               |   moveq #1,d0
    e2ce:	,--------------|-- bra.s e34e <failSecurityCheck+0x8a>

	int a = 0;
    e2d0:	|              '-> clr.l (sp)

	while (fn[a]) {
    e2d2:	|     ,----------- bra.s e340 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e2d4:	|  ,--|----------> move.l (sp),d0
    e2d6:	|  |  |            movea.l 8(sp),a0
    e2da:	|  |  |            adda.l d0,a0
    e2dc:	|  |  |            move.b (a0),d0
    e2de:	|  |  |            ext.w d0
    e2e0:	|  |  |            movea.w d0,a0
    e2e2:	|  |  |            moveq #124,d0
    e2e4:	|  |  |            cmp.l a0,d0
    e2e6:	|  |  |     ,----- beq.s e328 <failSecurityCheck+0x64>
    e2e8:	|  |  |     |      moveq #124,d1
    e2ea:	|  |  |     |      cmp.l a0,d1
    e2ec:	|  |  |  ,--|----- blt.s e33e <failSecurityCheck+0x7a>
    e2ee:	|  |  |  |  |      moveq #92,d0
    e2f0:	|  |  |  |  |      cmp.l a0,d0
    e2f2:	|  |  |  |  +----- beq.s e328 <failSecurityCheck+0x64>
    e2f4:	|  |  |  |  |      moveq #92,d1
    e2f6:	|  |  |  |  |      cmp.l a0,d1
    e2f8:	|  |  |  +--|----- blt.s e33e <failSecurityCheck+0x7a>
    e2fa:	|  |  |  |  |      moveq #60,d0
    e2fc:	|  |  |  |  |      cmp.l a0,d0
    e2fe:	|  |  |  |  |  ,-- blt.s e31e <failSecurityCheck+0x5a>
    e300:	|  |  |  |  |  |   moveq #34,d1
    e302:	|  |  |  |  |  |   cmp.l a0,d1
    e304:	|  |  |  +--|--|-- bgt.s e33e <failSecurityCheck+0x7a>
    e306:	|  |  |  |  |  |   moveq #-34,d1
    e308:	|  |  |  |  |  |   add.l a0,d1
    e30a:	|  |  |  |  |  |   move.l #83894529,d0
    e310:	|  |  |  |  |  |   lsr.l d1,d0
    e312:	|  |  |  |  |  |   moveq #1,d1
    e314:	|  |  |  |  |  |   and.l d1,d0
    e316:	|  |  |  |  |  |   sne d0
    e318:	|  |  |  |  |  |   neg.b d0
    e31a:	|  |  |  |  +--|-- bne.s e328 <failSecurityCheck+0x64>
    e31c:	|  |  |  +--|--|-- bra.s e33e <failSecurityCheck+0x7a>
    e31e:	|  |  |  |  |  '-> lea -62(a0),a0
    e322:	|  |  |  |  |      moveq #1,d0
    e324:	|  |  |  |  |      cmp.l a0,d0
    e326:	|  |  |  +--|----- bcs.s e33e <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e328:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e32c:	|  |  |  |         pea 1991c <PutChar+0x1bd6>
    e332:	|  |  |  |         jsr 172a4 <KPrintF>
    e338:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e33a:	|  |  |  |         moveq #1,d0
    e33c:	+--|--|--|-------- bra.s e34e <failSecurityCheck+0x8a>
		}
		a++;
    e33e:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e340:	|  |  '----------> move.l (sp),d0
    e342:	|  |               movea.l 8(sp),a0
    e346:	|  |               adda.l d0,a0
    e348:	|  |               move.b (a0),d0
    e34a:	|  '-------------- bne.s e2d4 <failSecurityCheck+0x10>
	}
	return FALSE;
    e34c:	|                  clr.w d0
}
    e34e:	'----------------> addq.l #4,sp
    e350:	                   rts

0000e352 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e352:	             lea -24(sp),sp
    e356:	             move.l a6,-(sp)
    e358:	             move.l 40(sp),d0
    e35c:	             move.w d0,d0
    e35e:	             move.w d0,6(sp)
	int fileNum = -1;
    e362:	             moveq #-1,d0
    e364:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e368:	             jsr 69e8 <killSpeechTimers>

	switch (numParams) {
    e36e:	             moveq #2,d0
    e370:	             cmp.l 32(sp),d0
    e374:	      ,----- beq.s e3b8 <sayCore+0x66>
    e376:	      |      moveq #3,d0
    e378:	      |      cmp.l 32(sp),d0
    e37c:	,-----|----- bne.w e49a <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e380:	|     |      movea.l 36(sp),a0
    e384:	|     |      move.l 24(a0),d0
    e388:	|     |      move.l d0,-(sp)
    e38a:	|     |      pea 5 <_start+0x5>
    e38e:	|     |      lea 20(sp),a0
    e392:	|     |      move.l a0,-(sp)
    e394:	|     |      jsr 147c4 <getValueType>
    e39a:	|     |      lea 12(sp),sp
    e39e:	|     |      tst.w d0
    e3a0:	|     |  ,-- bne.s e3a8 <sayCore+0x56>
    e3a2:	|     |  |   moveq #1,d0
    e3a4:	|  ,--|--|-- bra.w e4aa <sayCore+0x158>
			trimStack (&fun -> stack);
    e3a8:	|  |  |  '-> moveq #24,d0
    e3aa:	|  |  |      add.l 36(sp),d0
    e3ae:	|  |  |      move.l d0,-(sp)
    e3b0:	|  |  |      jsr 15148 <trimStack>
    e3b6:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e3b8:	|  |  '----> movea.l 36(sp),a0
    e3bc:	|  |         move.l 24(a0),d0
    e3c0:	|  |         move.l d0,-(sp)
    e3c2:	|  |         jsr 14d9a <getTextFromAnyVar>
    e3c8:	|  |         addq.l #4,sp
    e3ca:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e3ce:	|  |     ,-- bne.s e3d6 <sayCore+0x84>
    e3d0:	|  |     |   moveq #1,d0
    e3d2:	|  +-----|-- bra.w e4aa <sayCore+0x158>
			trimStack (&fun -> stack);
    e3d6:	|  |     '-> moveq #24,d0
    e3d8:	|  |         add.l 36(sp),d0
    e3dc:	|  |         move.l d0,-(sp)
    e3de:	|  |         jsr 15148 <trimStack>
    e3e4:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3e6:	|  |         movea.l 36(sp),a0
    e3ea:	|  |         move.l 24(a0),d0
    e3ee:	|  |         move.l d0,-(sp)
    e3f0:	|  |         pea 7 <_start+0x7>
    e3f4:	|  |         lea 16(sp),a0
    e3f8:	|  |         move.l a0,-(sp)
    e3fa:	|  |         jsr 147c4 <getValueType>
    e400:	|  |         lea 12(sp),sp
    e404:	|  |         tst.w d0
    e406:	|  |     ,-- bne.s e40e <sayCore+0xbc>
    e408:	|  |     |   moveq #1,d0
    e40a:	|  +-----|-- bra.w e4aa <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e40e:	|  |     '-> movea.l 36(sp),a0
    e412:	|  |         move.l 24(a0),d0
    e416:	|  |         move.l d0,-(sp)
    e418:	|  |         pea 7 <_start+0x7>
    e41c:	|  |         lea 16(sp),a0
    e420:	|  |         move.l a0,-(sp)
    e422:	|  |         jsr 147c4 <getValueType>
    e428:	|  |         lea 12(sp),sp
    e42c:	|  |         tst.w d0
    e42e:	|  |     ,-- bne.s e434 <sayCore+0xe2>
    e430:	|  |     |   moveq #1,d0
    e432:	|  +-----|-- bra.s e4aa <sayCore+0x158>
			trimStack (&fun -> stack);
    e434:	|  |     '-> moveq #24,d0
    e436:	|  |         add.l 36(sp),d0
    e43a:	|  |         move.l d0,-(sp)
    e43c:	|  |         jsr 15148 <trimStack>
    e442:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e444:	|  |         movea.w 6(sp),a0
    e448:	|  |         move.l 12(sp),d1
    e44c:	|  |         move.l 8(sp),d0
    e450:	|  |         move.l a0,-(sp)
    e452:	|  |         move.l d1,-(sp)
    e454:	|  |         move.l d0,-(sp)
    e456:	|  |         move.l 36(sp),-(sp)
    e45a:	|  |         jsr 4150 <wrapSpeech>
    e460:	|  |         lea 16(sp),sp
    e464:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e468:	|  |         movea.l 36(sp),a0
    e46c:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e472:	|  |         movea.l 36(sp),a0
    e476:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e47c:	|  |         move.l 24(sp),16(sp)
    e482:	|  |         move.l 1caf2 <SysBase>,d0
    e488:	|  |         movea.l d0,a6
    e48a:	|  |         movea.l 16(sp),a1
    e48e:	|  |         jsr -690(a6)
			newText = NULL;
    e492:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e496:	|  |         moveq #0,d0
    e498:	|  +-------- bra.s e4aa <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e49a:	'--|-------> pea 199a2 <PutChar+0x1c5c>
    e4a0:	   |         jsr 172a4 <KPrintF>
    e4a6:	   |         addq.l #4,sp
	return BR_ERROR;
    e4a8:	   |         moveq #1,d0
}
    e4aa:	   '-------> movea.l (sp)+,a6
    e4ac:	             lea 24(sp),sp
    e4b0:	             rts

0000e4b2 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e4b2:	pea 1 <_start+0x1>
    e4b6:	move.l 12(sp),-(sp)
    e4ba:	move.l 12(sp),-(sp)
    e4be:	jsr e352 <sayCore>
    e4c4:	lea 12(sp),sp
}
    e4c8:	rts

0000e4ca <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e4ca:	clr.l -(sp)
    e4cc:	move.l 12(sp),-(sp)
    e4d0:	move.l 12(sp),-(sp)
    e4d4:	jsr e352 <sayCore>
    e4da:	lea 12(sp),sp
}
    e4de:	rts

0000e4e0 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e4e0:	jsr 15190 <freeze>
	freezeSubs (); 
    e4e6:	jsr 5fd8 <freezeSubs>
	fun -> freezerLevel = 0;
    e4ec:	movea.l 8(sp),a0
    e4f0:	clr.b 56(a0)
	return BR_CONTINUE;
    e4f4:	moveq #2,d0
}
    e4f6:	rts

0000e4f8 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e4f8:	jsr 15394 <unfreeze>
	unfreezeSubs (); 
    e4fe:	jsr 759e <unfreezeSubs>
	return BR_CONTINUE;
    e504:	moveq #2,d0
}
    e506:	rts

0000e508 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e508:	jsr 15370 <howFrozen>
    e50e:	move.l d0,d1
    e510:	moveq #28,d0
    e512:	add.l 8(sp),d0
    e516:	move.l d1,-(sp)
    e518:	pea 1 <_start+0x1>
    e51c:	move.l d0,-(sp)
    e51e:	jsr 150b6 <setVariable>
    e524:	lea 12(sp),sp
	return BR_CONTINUE; 
    e528:	moveq #2,d0
}
    e52a:	rts

0000e52c <builtIn_setCursor>:

builtIn(setCursor)
{
    e52c:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e52e:	movea.l 12(sp),a0
    e532:	move.l 24(a0),d0
    e536:	move.l d0,-(sp)
    e538:	jsr 14c9c <getAnimationFromVar>
    e53e:	addq.l #4,sp
    e540:	move.l d0,(sp)
	pickAnimCursor (aa);
    e542:	move.l (sp),-(sp)
    e544:	jsr d6c <pickAnimCursor>
    e54a:	addq.l #4,sp
	trimStack (&fun -> stack);
    e54c:	moveq #24,d0
    e54e:	add.l 12(sp),d0
    e552:	move.l d0,-(sp)
    e554:	jsr 15148 <trimStack>
    e55a:	addq.l #4,sp
	return BR_CONTINUE;
    e55c:	moveq #2,d0
}
    e55e:	addq.l #4,sp
    e560:	rts

0000e562 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e562:	move.l 1caae <input+0xa>,d1
    e568:	move.l 1cba8 <cameraX>,d0
    e56e:	add.l d0,d1
    e570:	moveq #28,d0
    e572:	add.l 8(sp),d0
    e576:	move.l d1,-(sp)
    e578:	pea 1 <_start+0x1>
    e57c:	move.l d0,-(sp)
    e57e:	jsr 150b6 <setVariable>
    e584:	lea 12(sp),sp
	return BR_CONTINUE;
    e588:	moveq #2,d0
}
    e58a:	rts

0000e58c <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e58c:	move.l 1cab2 <input+0xe>,d1
    e592:	move.l 1cbac <cameraY>,d0
    e598:	add.l d0,d1
    e59a:	moveq #28,d0
    e59c:	add.l 8(sp),d0
    e5a0:	move.l d1,-(sp)
    e5a2:	pea 1 <_start+0x1>
    e5a6:	move.l d0,-(sp)
    e5a8:	jsr 150b6 <setVariable>
    e5ae:	lea 12(sp),sp
	return BR_CONTINUE;
    e5b2:	moveq #2,d0
}
    e5b4:	rts

0000e5b6 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e5b6:	move.l 1caae <input+0xa>,d0
    e5bc:	move.l d0,-(sp)
    e5be:	jsr 176d6 <__floatsisf>
    e5c4:	addq.l #4,sp
    e5c6:	move.l d0,d1
    e5c8:	move.l 1c484 <cameraZoom>,d0
    e5ce:	move.l d0,-(sp)
    e5d0:	move.l d1,-(sp)
    e5d2:	jsr 17788 <__mulsf3>
    e5d8:	addq.l #8,sp
    e5da:	move.l d0,-(sp)
    e5dc:	jsr 1766e <__fixsfsi>
    e5e2:	addq.l #4,sp
    e5e4:	move.l d0,d1
    e5e6:	moveq #28,d0
    e5e8:	add.l 8(sp),d0
    e5ec:	move.l d1,-(sp)
    e5ee:	pea 1 <_start+0x1>
    e5f2:	move.l d0,-(sp)
    e5f4:	jsr 150b6 <setVariable>
    e5fa:	lea 12(sp),sp
	return BR_CONTINUE;
    e5fe:	moveq #2,d0
}
    e600:	rts

0000e602 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e602:	move.l 1cab2 <input+0xe>,d0
    e608:	move.l d0,-(sp)
    e60a:	jsr 176d6 <__floatsisf>
    e610:	addq.l #4,sp
    e612:	move.l d0,d1
    e614:	move.l 1c484 <cameraZoom>,d0
    e61a:	move.l d0,-(sp)
    e61c:	move.l d1,-(sp)
    e61e:	jsr 17788 <__mulsf3>
    e624:	addq.l #8,sp
    e626:	move.l d0,-(sp)
    e628:	jsr 1766e <__fixsfsi>
    e62e:	addq.l #4,sp
    e630:	move.l d0,d1
    e632:	moveq #28,d0
    e634:	add.l 8(sp),d0
    e638:	move.l d1,-(sp)
    e63a:	pea 1 <_start+0x1>
    e63e:	move.l d0,-(sp)
    e640:	jsr 150b6 <setVariable>
    e646:	lea 12(sp),sp
	return BR_CONTINUE;
    e64a:	moveq #2,d0
}
    e64c:	rts

0000e64e <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e64e:	jsr 85d0 <statusBarText>
    e654:	move.l d0,d1
    e656:	moveq #28,d0
    e658:	add.l 8(sp),d0
    e65c:	move.l d1,-(sp)
    e65e:	move.l d0,-(sp)
    e660:	jsr 149e6 <makeTextVar>
    e666:	addq.l #8,sp
	return BR_CONTINUE;
    e668:	moveq #2,d0
}
    e66a:	rts

0000e66c <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e66c:	       lea -20(sp),sp
    e670:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e672:	       movea.l 32(sp),a0
    e676:	       move.l 24(a0),d0
    e67a:	       move.l d0,-(sp)
    e67c:	       jsr 14d9a <getTextFromAnyVar>
    e682:	       addq.l #4,sp
    e684:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e688:	   ,-- bne.s e690 <builtIn_getMatchingFiles+0x24>
    e68a:	   |   moveq #1,d0
    e68c:	,--|-- bra.w e752 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e690:	|  '-> moveq #24,d0
    e692:	|      add.l 32(sp),d0
    e696:	|      move.l d0,-(sp)
    e698:	|      jsr 15148 <trimStack>
    e69e:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e6a0:	|      moveq #28,d0
    e6a2:	|      add.l 32(sp),d0
    e6a6:	|      move.l d0,-(sp)
    e6a8:	|      jsr 14a12 <unlinkVar>
    e6ae:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e6b0:	|      movea.l 32(sp),a0
    e6b4:	|      moveq #6,d0
    e6b6:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e6ba:	|      moveq #12,d0
    e6bc:	|      move.l d0,16(sp)
    e6c0:	|      clr.l 12(sp)
    e6c4:	|      move.l 1caf2 <SysBase>,d0
    e6ca:	|      movea.l d0,a6
    e6cc:	|      move.l 16(sp),d0
    e6d0:	|      move.l 12(sp),d1
    e6d4:	|      jsr -684(a6)
    e6d8:	|      move.l d0,8(sp)
    e6dc:	|      move.l 8(sp),d0
    e6e0:	|      movea.l 32(sp),a0
    e6e4:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e6e8:	|      moveq #32,d0
    e6ea:	|      add.l 32(sp),d0
    e6ee:	|  ,-- bne.s e6f4 <builtIn_getMatchingFiles+0x88>
    e6f0:	|  |   moveq #1,d0
    e6f2:	+--|-- bra.s e752 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e6f4:	|  '-> movea.l 32(sp),a0
    e6f8:	|      movea.l 32(a0),a0
    e6fc:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e6fe:	|      movea.l 32(sp),a0
    e702:	|      movea.l 32(a0),a0
    e706:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e70a:	|      movea.l 32(sp),a0
    e70e:	|      movea.l 32(a0),a0
    e712:	|      moveq #1,d0
    e714:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e718:	|      movea.l 32(sp),a0
    e71c:	|      move.l 32(a0),d0
    e720:	|      move.l 20(sp),-(sp)
    e724:	|      move.l d0,-(sp)
    e726:	|      jsr 14580 <getSavedGamesStack>
    e72c:	|      addq.l #8,sp
    e72e:	|      tst.w d0
    e730:	|  ,-- bne.s e736 <builtIn_getMatchingFiles+0xca>
    e732:	|  |   moveq #1,d0
    e734:	+--|-- bra.s e752 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e736:	|  '-> move.l 20(sp),4(sp)
    e73c:	|      move.l 1caf2 <SysBase>,d0
    e742:	|      movea.l d0,a6
    e744:	|      movea.l 4(sp),a1
    e748:	|      jsr -690(a6)
	newText = NULL;
    e74c:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e750:	|      moveq #2,d0
}
    e752:	'----> movea.l (sp)+,a6
    e754:	       lea 20(sp),sp
    e758:	       rts

0000e75a <builtIn_saveGame>:

builtIn(saveGame)
{
    e75a:	       lea -12(sp),sp
    e75e:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e760:	       movea.l 24(sp),a0
    e764:	       move.l 24(a0),d0
    e768:	       move.l d0,-(sp)
    e76a:	       jsr 14d9a <getTextFromAnyVar>
    e770:	       addq.l #4,sp
    e772:	       move.l d0,1cabe <loadNow>
    trimStack(&fun->stack);
    e778:	       moveq #24,d0
    e77a:	       add.l 24(sp),d0
    e77e:	       move.l d0,-(sp)
    e780:	       jsr 15148 <trimStack>
    e786:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e788:	       move.l 1cabe <loadNow>,d0
    e78e:	       move.l d0,-(sp)
    e790:	       jsr 2fe <encodeFilename>
    e796:	       addq.l #4,sp
    e798:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e79c:	       move.l 1cabe <loadNow>,8(sp)
    e7a4:	       move.l 1caf2 <SysBase>,d0
    e7aa:	       movea.l d0,a6
    e7ac:	       movea.l 8(sp),a1
    e7b0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e7b4:	       move.l 12(sp),-(sp)
    e7b8:	       jsr e2c4 <failSecurityCheck>
    e7be:	       addq.l #4,sp
    e7c0:	       tst.w d0
    e7c2:	   ,-- beq.s e7c8 <builtIn_saveGame+0x6e>
    e7c4:	   |   moveq #1,d0
    e7c6:	,--|-- bra.s e818 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e7c8:	|  '-> move.l 12(sp),-(sp)
    e7cc:	|      pea 199d0 <PutChar+0x1c8a>
    e7d2:	|      jsr 13cf0 <joinStrings>
    e7d8:	|      addq.l #8,sp
    e7da:	|      move.l d0,1cabe <loadNow>
    FreeVec(aaaaa);
    e7e0:	|      move.l 12(sp),4(sp)
    e7e6:	|      move.l 1caf2 <SysBase>,d0
    e7ec:	|      movea.l d0,a6
    e7ee:	|      movea.l 4(sp),a1
    e7f2:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e7f6:	|      moveq #28,d0
    e7f8:	|      add.l 24(sp),d0
    e7fc:	|      clr.l -(sp)
    e7fe:	|      pea 1 <_start+0x1>
    e802:	|      move.l d0,-(sp)
    e804:	|      jsr 150b6 <setVariable>
    e80a:	|      lea 12(sp),sp
    saverFunc = fun;
    e80e:	|      move.l 24(sp),1cbb8 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e816:	|      moveq #0,d0
}
    e818:	'----> movea.l (sp)+,a6
    e81a:	       lea 12(sp),sp
    e81e:	       rts

0000e820 <builtIn_fileExists>:

builtIn(fileExists)
{
    e820:	       lea -36(sp),sp
    e824:	       move.l a6,-(sp)
    e826:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e828:	       movea.l 52(sp),a0
    e82c:	       move.l 24(a0),d0
    e830:	       move.l d0,-(sp)
    e832:	       jsr 14d9a <getTextFromAnyVar>
    e838:	       addq.l #4,sp
    e83a:	       move.l d0,1cabe <loadNow>
    trimStack(&fun->stack);
    e840:	       moveq #24,d0
    e842:	       add.l 52(sp),d0
    e846:	       move.l d0,-(sp)
    e848:	       jsr 15148 <trimStack>
    e84e:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e850:	       move.l 1cabe <loadNow>,d0
    e856:	       move.l d0,-(sp)
    e858:	       jsr 2fe <encodeFilename>
    e85e:	       addq.l #4,sp
    e860:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e864:	       move.l 1cabe <loadNow>,36(sp)
    e86c:	       move.l 1caf2 <SysBase>,d0
    e872:	       movea.l d0,a6
    e874:	       movea.l 36(sp),a1
    e878:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e87c:	       move.l 40(sp),-(sp)
    e880:	       jsr e2c4 <failSecurityCheck>
    e886:	       addq.l #4,sp
    e888:	       tst.w d0
    e88a:	   ,-- beq.s e892 <builtIn_fileExists+0x72>
    e88c:	   |   moveq #1,d0
    e88e:	,--|-- bra.w e932 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e892:	|  '-> move.l 40(sp),32(sp)
    e898:	|      move.l #1005,28(sp)
    e8a0:	|      move.l 1cafa <DOSBase>,d0
    e8a6:	|      movea.l d0,a6
    e8a8:	|      move.l 32(sp),d1
    e8ac:	|      move.l 28(sp),d2
    e8b0:	|      jsr -30(a6)
    e8b4:	|      move.l d0,24(sp)
    e8b8:	|      move.l 24(sp),d0
    e8bc:	|      move.l d0,20(sp)
    if (!fp) {        
    e8c0:	|  ,-- bne.s e8d0 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e8c2:	|  |   pea 199d2 <PutChar+0x1c8c>
    e8c8:	|  |   jsr 172a4 <KPrintF>
    e8ce:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e8d0:	|  '-> tst.l 20(sp)
    e8d4:	|      sne d0
    e8d6:	|      neg.b d0
    e8d8:	|      moveq #0,d1
    e8da:	|      move.b d0,d1
    e8dc:	|      moveq #28,d0
    e8de:	|      add.l 52(sp),d0
    e8e2:	|      move.l d1,-(sp)
    e8e4:	|      pea 1 <_start+0x1>
    e8e8:	|      move.l d0,-(sp)
    e8ea:	|      jsr 150b6 <setVariable>
    e8f0:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e8f4:	|      tst.l 20(sp)
    e8f8:	|  ,-- beq.s e914 <builtIn_fileExists+0xf4>
    e8fa:	|  |   move.l 20(sp),16(sp)
    e900:	|  |   move.l 1cafa <DOSBase>,d0
    e906:	|  |   movea.l d0,a6
    e908:	|  |   move.l 16(sp),d1
    e90c:	|  |   jsr -36(a6)
    e910:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e914:	|  '-> move.l 40(sp),8(sp)
    e91a:	|      move.l 1caf2 <SysBase>,d0
    e920:	|      movea.l d0,a6
    e922:	|      movea.l 8(sp),a1
    e926:	|      jsr -690(a6)
    loadNow = NULL;
    e92a:	|      clr.l 1cabe <loadNow>
    return BR_CONTINUE;
    e930:	|      moveq #2,d0
}
    e932:	'----> move.l (sp)+,d2
    e934:	       movea.l (sp)+,a6
    e936:	       lea 36(sp),sp
    e93a:	       rts

0000e93c <builtIn_loadGame>:

builtIn(loadGame)
{
    e93c:	       lea -36(sp),sp
    e940:	       move.l a6,-(sp)
    e942:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e944:	       movea.l 52(sp),a0
    e948:	       move.l 24(a0),d0
    e94c:	       move.l d0,-(sp)
    e94e:	       jsr 14d9a <getTextFromAnyVar>
    e954:	       addq.l #4,sp
    e956:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e95a:	       moveq #24,d0
    e95c:	       add.l 52(sp),d0
    e960:	       move.l d0,-(sp)
    e962:	       jsr 15148 <trimStack>
    e968:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e96a:	       move.l 40(sp),-(sp)
    e96e:	       jsr 2fe <encodeFilename>
    e974:	       addq.l #4,sp
    e976:	       move.l d0,1cabe <loadNow>
    FreeVec(aaaaa);
    e97c:	       move.l 40(sp),36(sp)
    e982:	       move.l 1caf2 <SysBase>,d0
    e988:	       movea.l d0,a6
    e98a:	       movea.l 36(sp),a1
    e98e:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e992:	       move.l 1cabe <loadNow>,d0
    e998:	       move.l d0,-(sp)
    e99a:	       jsr e2c4 <failSecurityCheck>
    e9a0:	       addq.l #4,sp
    e9a2:	       tst.w d0
    e9a4:	   ,-- beq.s e9aa <builtIn_loadGame+0x6e>
    e9a6:	   |   moveq #1,d0
    e9a8:	,--|-- bra.s ea1a <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e9aa:	|  '-> move.l 1cabe <loadNow>,32(sp)
    e9b2:	|      move.l #1005,28(sp)
    e9ba:	|      move.l 1cafa <DOSBase>,d0
    e9c0:	|      movea.l d0,a6
    e9c2:	|      move.l 32(sp),d1
    e9c6:	|      move.l 28(sp),d2
    e9ca:	|      jsr -30(a6)
    e9ce:	|      move.l d0,24(sp)
    e9d2:	|      move.l 24(sp),d0
    e9d6:	|      move.l d0,20(sp)
    if (fp) {
    e9da:	|  ,-- beq.s e9fa <builtIn_loadGame+0xbe>
        Close(fp);
    e9dc:	|  |   move.l 20(sp),12(sp)
    e9e2:	|  |   move.l 1cafa <DOSBase>,d0
    e9e8:	|  |   movea.l d0,a6
    e9ea:	|  |   move.l 12(sp),d1
    e9ee:	|  |   jsr -36(a6)
    e9f2:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e9f6:	|  |   moveq #0,d0
    e9f8:	+--|-- bra.s ea1a <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e9fa:	|  '-> move.l 1cabe <loadNow>,16(sp)
    ea02:	|      move.l 1caf2 <SysBase>,d0
    ea08:	|      movea.l d0,a6
    ea0a:	|      movea.l 16(sp),a1
    ea0e:	|      jsr -690(a6)
    loadNow = NULL;
    ea12:	|      clr.l 1cabe <loadNow>
    return BR_CONTINUE;
    ea18:	|      moveq #2,d0
}
    ea1a:	'----> move.l (sp)+,d2
    ea1c:	       movea.l (sp)+,a6
    ea1e:	       lea 36(sp),sp
    ea22:	       rts

0000ea24 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea24:	move.l 1cb8e <sceneHeight>,d0
    ea2a:	move.l d0,d1
    ea2c:	move.l 1cb8a <sceneWidth>,d0
    ea32:	move.l d1,-(sp)
    ea34:	move.l d0,-(sp)
    ea36:	clr.l -(sp)
    ea38:	clr.l -(sp)
    ea3a:	jsr d1ae <blankScreen>
    ea40:	lea 16(sp),sp
	return BR_CONTINUE;
    ea44:	moveq #2,d0
}
    ea46:	rts

0000ea48 <builtIn_blankArea>:

builtIn(blankArea)
{
    ea48:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea4c:	       movea.l 24(sp),a0
    ea50:	       move.l 24(a0),d0
    ea54:	       move.l d0,-(sp)
    ea56:	       pea 1 <_start+0x1>
    ea5a:	       lea 8(sp),a0
    ea5e:	       move.l a0,-(sp)
    ea60:	       jsr 147c4 <getValueType>
    ea66:	       lea 12(sp),sp
    ea6a:	       tst.w d0
    ea6c:	   ,-- bne.s ea74 <builtIn_blankArea+0x2c>
    ea6e:	   |   moveq #1,d0
    ea70:	,--|-- bra.w eb4a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea74:	|  '-> moveq #24,d0
    ea76:	|      add.l 24(sp),d0
    ea7a:	|      move.l d0,-(sp)
    ea7c:	|      jsr 15148 <trimStack>
    ea82:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea84:	|      movea.l 24(sp),a0
    ea88:	|      move.l 24(a0),d0
    ea8c:	|      move.l d0,-(sp)
    ea8e:	|      pea 1 <_start+0x1>
    ea92:	|      lea 12(sp),a0
    ea96:	|      move.l a0,-(sp)
    ea98:	|      jsr 147c4 <getValueType>
    ea9e:	|      lea 12(sp),sp
    eaa2:	|      tst.w d0
    eaa4:	|  ,-- bne.s eaac <builtIn_blankArea+0x64>
    eaa6:	|  |   moveq #1,d0
    eaa8:	+--|-- bra.w eb4a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaac:	|  '-> moveq #24,d0
    eaae:	|      add.l 24(sp),d0
    eab2:	|      move.l d0,-(sp)
    eab4:	|      jsr 15148 <trimStack>
    eaba:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eabc:	|      movea.l 24(sp),a0
    eac0:	|      move.l 24(a0),d0
    eac4:	|      move.l d0,-(sp)
    eac6:	|      pea 1 <_start+0x1>
    eaca:	|      moveq #16,d0
    eacc:	|      add.l sp,d0
    eace:	|      move.l d0,-(sp)
    ead0:	|      jsr 147c4 <getValueType>
    ead6:	|      lea 12(sp),sp
    eada:	|      tst.w d0
    eadc:	|  ,-- bne.s eae2 <builtIn_blankArea+0x9a>
    eade:	|  |   moveq #1,d0
    eae0:	+--|-- bra.s eb4a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eae2:	|  '-> moveq #24,d0
    eae4:	|      add.l 24(sp),d0
    eae8:	|      move.l d0,-(sp)
    eaea:	|      jsr 15148 <trimStack>
    eaf0:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eaf2:	|      movea.l 24(sp),a0
    eaf6:	|      move.l 24(a0),d0
    eafa:	|      move.l d0,-(sp)
    eafc:	|      pea 1 <_start+0x1>
    eb00:	|      moveq #20,d0
    eb02:	|      add.l sp,d0
    eb04:	|      move.l d0,-(sp)
    eb06:	|      jsr 147c4 <getValueType>
    eb0c:	|      lea 12(sp),sp
    eb10:	|      tst.w d0
    eb12:	|  ,-- bne.s eb18 <builtIn_blankArea+0xd0>
    eb14:	|  |   moveq #1,d0
    eb16:	+--|-- bra.s eb4a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb18:	|  '-> moveq #24,d0
    eb1a:	|      add.l 24(sp),d0
    eb1e:	|      move.l d0,-(sp)
    eb20:	|      jsr 15148 <trimStack>
    eb26:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb28:	|      movea.l (sp),a1
    eb2a:	|      movea.l 4(sp),a0
    eb2e:	|      move.l 8(sp),d1
    eb32:	|      move.l 12(sp),d0
    eb36:	|      move.l a1,-(sp)
    eb38:	|      move.l a0,-(sp)
    eb3a:	|      move.l d1,-(sp)
    eb3c:	|      move.l d0,-(sp)
    eb3e:	|      jsr d1ae <blankScreen>
    eb44:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb48:	|      moveq #2,d0
}
    eb4a:	'----> lea 16(sp),sp
    eb4e:	       rts

0000eb50 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb50:	jsr d1cc <darkScreen>
	return BR_CONTINUE;
    eb56:	moveq #2,d0
}
    eb58:	rts

0000eb5a <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eb5a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb5e:	       movea.l 20(sp),a0
    eb62:	       move.l 24(a0),d0
    eb66:	       move.l d0,-(sp)
    eb68:	       pea 1 <_start+0x1>
    eb6c:	       lea 8(sp),a0
    eb70:	       move.l a0,-(sp)
    eb72:	       jsr 147c4 <getValueType>
    eb78:	       lea 12(sp),sp
    eb7c:	       tst.w d0
    eb7e:	   ,-- bne.s eb86 <builtIn_addOverlay+0x2c>
    eb80:	   |   moveq #1,d0
    eb82:	,--|-- bra.w ec1e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb86:	|  '-> moveq #24,d0
    eb88:	|      add.l 20(sp),d0
    eb8c:	|      move.l d0,-(sp)
    eb8e:	|      jsr 15148 <trimStack>
    eb94:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb96:	|      movea.l 20(sp),a0
    eb9a:	|      move.l 24(a0),d0
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      pea 1 <_start+0x1>
    eba4:	|      moveq #12,d0
    eba6:	|      add.l sp,d0
    eba8:	|      move.l d0,-(sp)
    ebaa:	|      jsr 147c4 <getValueType>
    ebb0:	|      lea 12(sp),sp
    ebb4:	|      tst.w d0
    ebb6:	|  ,-- bne.s ebbc <builtIn_addOverlay+0x62>
    ebb8:	|  |   moveq #1,d0
    ebba:	+--|-- bra.s ec1e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebbc:	|  '-> moveq #24,d0
    ebbe:	|      add.l 20(sp),d0
    ebc2:	|      move.l d0,-(sp)
    ebc4:	|      jsr 15148 <trimStack>
    ebca:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ebcc:	|      movea.l 20(sp),a0
    ebd0:	|      move.l 24(a0),d0
    ebd4:	|      move.l d0,-(sp)
    ebd6:	|      pea 5 <_start+0x5>
    ebda:	|      moveq #16,d0
    ebdc:	|      add.l sp,d0
    ebde:	|      move.l d0,-(sp)
    ebe0:	|      jsr 147c4 <getValueType>
    ebe6:	|      lea 12(sp),sp
    ebea:	|      tst.w d0
    ebec:	|  ,-- bne.s ebf2 <builtIn_addOverlay+0x98>
    ebee:	|  |   moveq #1,d0
    ebf0:	+--|-- bra.s ec1e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebf2:	|  '-> moveq #24,d0
    ebf4:	|      add.l 20(sp),d0
    ebf8:	|      move.l d0,-(sp)
    ebfa:	|      jsr 15148 <trimStack>
    ec00:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ec02:	|      movea.l (sp),a0
    ec04:	|      move.l 4(sp),d1
    ec08:	|      move.l 8(sp),d0
    ec0c:	|      move.l a0,-(sp)
    ec0e:	|      move.l d1,-(sp)
    ec10:	|      move.l d0,-(sp)
    ec12:	|      jsr d2ea <loadBackDrop>
    ec18:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec1c:	|      moveq #2,d0
}
    ec1e:	'----> lea 12(sp),sp
    ec22:	       rts

0000ec24 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec24:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec28:	       movea.l 20(sp),a0
    ec2c:	       move.l 24(a0),d0
    ec30:	       move.l d0,-(sp)
    ec32:	       pea 1 <_start+0x1>
    ec36:	       lea 8(sp),a0
    ec3a:	       move.l a0,-(sp)
    ec3c:	       jsr 147c4 <getValueType>
    ec42:	       lea 12(sp),sp
    ec46:	       tst.w d0
    ec48:	   ,-- bne.s ec50 <builtIn_mixOverlay+0x2c>
    ec4a:	   |   moveq #1,d0
    ec4c:	,--|-- bra.w ece8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec50:	|  '-> moveq #24,d0
    ec52:	|      add.l 20(sp),d0
    ec56:	|      move.l d0,-(sp)
    ec58:	|      jsr 15148 <trimStack>
    ec5e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec60:	|      movea.l 20(sp),a0
    ec64:	|      move.l 24(a0),d0
    ec68:	|      move.l d0,-(sp)
    ec6a:	|      pea 1 <_start+0x1>
    ec6e:	|      moveq #12,d0
    ec70:	|      add.l sp,d0
    ec72:	|      move.l d0,-(sp)
    ec74:	|      jsr 147c4 <getValueType>
    ec7a:	|      lea 12(sp),sp
    ec7e:	|      tst.w d0
    ec80:	|  ,-- bne.s ec86 <builtIn_mixOverlay+0x62>
    ec82:	|  |   moveq #1,d0
    ec84:	+--|-- bra.s ece8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec86:	|  '-> moveq #24,d0
    ec88:	|      add.l 20(sp),d0
    ec8c:	|      move.l d0,-(sp)
    ec8e:	|      jsr 15148 <trimStack>
    ec94:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec96:	|      movea.l 20(sp),a0
    ec9a:	|      move.l 24(a0),d0
    ec9e:	|      move.l d0,-(sp)
    eca0:	|      pea 5 <_start+0x5>
    eca4:	|      moveq #16,d0
    eca6:	|      add.l sp,d0
    eca8:	|      move.l d0,-(sp)
    ecaa:	|      jsr 147c4 <getValueType>
    ecb0:	|      lea 12(sp),sp
    ecb4:	|      tst.w d0
    ecb6:	|  ,-- bne.s ecbc <builtIn_mixOverlay+0x98>
    ecb8:	|  |   moveq #1,d0
    ecba:	+--|-- bra.s ece8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecbc:	|  '-> moveq #24,d0
    ecbe:	|      add.l 20(sp),d0
    ecc2:	|      move.l d0,-(sp)
    ecc4:	|      jsr 15148 <trimStack>
    ecca:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eccc:	|      movea.l (sp),a0
    ecce:	|      move.l 4(sp),d1
    ecd2:	|      move.l 8(sp),d0
    ecd6:	|      move.l a0,-(sp)
    ecd8:	|      move.l d1,-(sp)
    ecda:	|      move.l d0,-(sp)
    ecdc:	|      jsr d360 <mixBackDrop>
    ece2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ece6:	|      moveq #2,d0
}
    ece8:	'----> lea 12(sp),sp
    ecec:	       rts

0000ecee <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ecee:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecf2:	       movea.l 20(sp),a0
    ecf6:	       move.l 24(a0),d0
    ecfa:	       move.l d0,-(sp)
    ecfc:	       pea 1 <_start+0x1>
    ed00:	       lea 8(sp),a0
    ed04:	       move.l a0,-(sp)
    ed06:	       jsr 147c4 <getValueType>
    ed0c:	       lea 12(sp),sp
    ed10:	       tst.w d0
    ed12:	   ,-- bne.s ed1a <builtIn_pasteImage+0x2c>
    ed14:	   |   moveq #1,d0
    ed16:	,--|-- bra.w edaa <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ed1a:	|  '-> moveq #24,d0
    ed1c:	|      add.l 20(sp),d0
    ed20:	|      move.l d0,-(sp)
    ed22:	|      jsr 15148 <trimStack>
    ed28:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed2a:	|      movea.l 20(sp),a0
    ed2e:	|      move.l 24(a0),d0
    ed32:	|      move.l d0,-(sp)
    ed34:	|      pea 1 <_start+0x1>
    ed38:	|      moveq #12,d0
    ed3a:	|      add.l sp,d0
    ed3c:	|      move.l d0,-(sp)
    ed3e:	|      jsr 147c4 <getValueType>
    ed44:	|      lea 12(sp),sp
    ed48:	|      tst.w d0
    ed4a:	|  ,-- bne.s ed50 <builtIn_pasteImage+0x62>
    ed4c:	|  |   moveq #1,d0
    ed4e:	+--|-- bra.s edaa <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ed50:	|  '-> moveq #24,d0
    ed52:	|      add.l 20(sp),d0
    ed56:	|      move.l d0,-(sp)
    ed58:	|      jsr 15148 <trimStack>
    ed5e:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ed60:	|      movea.l 20(sp),a0
    ed64:	|      move.l 24(a0),d0
    ed68:	|      move.l d0,-(sp)
    ed6a:	|      jsr 14c9c <getAnimationFromVar>
    ed70:	|      addq.l #4,sp
    ed72:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ed76:	|      moveq #24,d0
    ed78:	|      add.l 20(sp),d0
    ed7c:	|      move.l d0,-(sp)
    ed7e:	|      jsr 15148 <trimStack>
    ed84:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ed86:	|      tst.l 8(sp)
    ed8a:	|  ,-- bne.s ed90 <builtIn_pasteImage+0xa2>
    ed8c:	|  |   moveq #2,d0
    ed8e:	+--|-- bra.s edaa <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ed90:	|  '-> move.l (sp),d1
    ed92:	|      move.l 4(sp),d0
    ed96:	|      move.l 8(sp),-(sp)
    ed9a:	|      move.l d1,-(sp)
    ed9c:	|      move.l d0,-(sp)
    ed9e:	|      jsr d94 <pasteCursor>
    eda4:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    eda8:	|      moveq #2,d0
}
    edaa:	'----> lea 12(sp),sp
    edae:	       rts

0000edb0 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    edb0:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edb2:	       movea.l 16(sp),a0
    edb6:	       move.l 24(a0),d0
    edba:	       move.l d0,-(sp)
    edbc:	       pea 1 <_start+0x1>
    edc0:	       move.l sp,d0
    edc2:	       addq.l #8,d0
    edc4:	       move.l d0,-(sp)
    edc6:	       jsr 147c4 <getValueType>
    edcc:	       lea 12(sp),sp
    edd0:	       tst.w d0
    edd2:	   ,-- bne.s edda <builtIn_setSceneDimensions+0x2a>
    edd4:	   |   moveq #1,d0
    edd6:	,--|-- bra.w ee62 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edda:	|  '-> moveq #24,d0
    eddc:	|      add.l 16(sp),d0
    ede0:	|      move.l d0,-(sp)
    ede2:	|      jsr 15148 <trimStack>
    ede8:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edea:	|      movea.l 16(sp),a0
    edee:	|      move.l 24(a0),d0
    edf2:	|      move.l d0,-(sp)
    edf4:	|      pea 1 <_start+0x1>
    edf8:	|      moveq #12,d0
    edfa:	|      add.l sp,d0
    edfc:	|      move.l d0,-(sp)
    edfe:	|      jsr 147c4 <getValueType>
    ee04:	|      lea 12(sp),sp
    ee08:	|      tst.w d0
    ee0a:	|  ,-- bne.s ee10 <builtIn_setSceneDimensions+0x60>
    ee0c:	|  |   moveq #1,d0
    ee0e:	+--|-- bra.s ee62 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee10:	|  '-> moveq #24,d0
    ee12:	|      add.l 16(sp),d0
    ee16:	|      move.l d0,-(sp)
    ee18:	|      jsr 15148 <trimStack>
    ee1e:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ee20:	|      move.l (sp),d1
    ee22:	|      move.l 4(sp),d0
    ee26:	|      move.l d1,-(sp)
    ee28:	|      move.l d0,-(sp)
    ee2a:	|      jsr d3b6 <resizeBackdrop>
    ee30:	|      addq.l #8,sp
    ee32:	|      tst.w d0
    ee34:	|  ,-- beq.s ee52 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee36:	|  |   move.l (sp),d1
    ee38:	|  |   move.l 4(sp),d0
    ee3c:	|  |   move.l d1,-(sp)
    ee3e:	|  |   move.l d0,-(sp)
    ee40:	|  |   clr.l -(sp)
    ee42:	|  |   clr.l -(sp)
    ee44:	|  |   jsr d1ae <blankScreen>
    ee4a:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ee4e:	|  |   moveq #2,d0
    ee50:	+--|-- bra.s ee62 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ee52:	|  '-> pea 199f0 <PutChar+0x1caa>
    ee58:	|      jsr 172a4 <KPrintF>
    ee5e:	|      addq.l #4,sp
	return BR_ERROR;
    ee60:	|      moveq #1,d0
}
    ee62:	'----> addq.l #8,sp
    ee64:	       rts

0000ee66 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ee66:	          move.l d3,-(sp)
    ee68:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee6a:	          movea.l 16(sp),a0
    ee6e:	          move.l 24(a0),d0
    ee72:	          move.l d0,-(sp)
    ee74:	          pea 1 <_start+0x1>
    ee78:	          pea 1cbac <cameraY>
    ee7e:	          jsr 147c4 <getValueType>
    ee84:	          lea 12(sp),sp
    ee88:	          tst.w d0
    ee8a:	      ,-- bne.s ee92 <builtIn_aimCamera+0x2c>
    ee8c:	      |   moveq #1,d0
    ee8e:	,-----|-- bra.w f114 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ee92:	|     '-> moveq #24,d0
    ee94:	|         add.l 16(sp),d0
    ee98:	|         move.l d0,-(sp)
    ee9a:	|         jsr 15148 <trimStack>
    eea0:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eea2:	|         movea.l 16(sp),a0
    eea6:	|         move.l 24(a0),d0
    eeaa:	|         move.l d0,-(sp)
    eeac:	|         pea 1 <_start+0x1>
    eeb0:	|         pea 1cba8 <cameraX>
    eeb6:	|         jsr 147c4 <getValueType>
    eebc:	|         lea 12(sp),sp
    eec0:	|         tst.w d0
    eec2:	|     ,-- bne.s eeca <builtIn_aimCamera+0x64>
    eec4:	|     |   moveq #1,d0
    eec6:	+-----|-- bra.w f114 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eeca:	|     '-> moveq #24,d0
    eecc:	|         add.l 16(sp),d0
    eed0:	|         move.l d0,-(sp)
    eed2:	|         jsr 15148 <trimStack>
    eed8:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    eeda:	|         move.l 1cba8 <cameraX>,d0
    eee0:	|         move.l d0,-(sp)
    eee2:	|         jsr 176d6 <__floatsisf>
    eee8:	|         addq.l #4,sp
    eeea:	|         move.l d0,d2
    eeec:	|         move.l 1ca46 <winWidth>,d0
    eef2:	|         lsr.l #1,d0
    eef4:	|         move.l d0,-(sp)
    eef6:	|         jsr 176fe <__floatunsisf>
    eefc:	|         addq.l #4,sp
    eefe:	|         move.l d0,d1
    ef00:	|         move.l 1c484 <cameraZoom>,d0
    ef06:	|         move.l d0,-(sp)
    ef08:	|         move.l d1,-(sp)
    ef0a:	|         jsr 1758c <__divsf3>
    ef10:	|         addq.l #8,sp
    ef12:	|         move.l d0,-(sp)
    ef14:	|         move.l d2,-(sp)
    ef16:	|         jsr 179ca <__subsf3>
    ef1c:	|         addq.l #8,sp
    ef1e:	|         move.l d0,-(sp)
    ef20:	|         jsr 1766e <__fixsfsi>
    ef26:	|         addq.l #4,sp
    ef28:	|         move.l d0,1cba8 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef2e:	|         move.l 1cbac <cameraY>,d0
    ef34:	|         move.l d0,-(sp)
    ef36:	|         jsr 176d6 <__floatsisf>
    ef3c:	|         addq.l #4,sp
    ef3e:	|         move.l d0,d2
    ef40:	|         move.l 1ca4a <winHeight>,d0
    ef46:	|         lsr.l #1,d0
    ef48:	|         move.l d0,-(sp)
    ef4a:	|         jsr 176fe <__floatunsisf>
    ef50:	|         addq.l #4,sp
    ef52:	|         move.l d0,d1
    ef54:	|         move.l 1c484 <cameraZoom>,d0
    ef5a:	|         move.l d0,-(sp)
    ef5c:	|         move.l d1,-(sp)
    ef5e:	|         jsr 1758c <__divsf3>
    ef64:	|         addq.l #8,sp
    ef66:	|         move.l d0,-(sp)
    ef68:	|         move.l d2,-(sp)
    ef6a:	|         jsr 179ca <__subsf3>
    ef70:	|         addq.l #8,sp
    ef72:	|         move.l d0,-(sp)
    ef74:	|         jsr 1766e <__fixsfsi>
    ef7a:	|         addq.l #4,sp
    ef7c:	|         move.l d0,1cbac <cameraY>

	if (cameraX < 0) cameraX = 0;
    ef82:	|         move.l 1cba8 <cameraX>,d0
    ef88:	|     ,-- bpl.s ef94 <builtIn_aimCamera+0x12e>
    ef8a:	|     |   clr.l 1cba8 <cameraX>
    ef90:	|  ,--|-- bra.w f04a <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ef94:	|  |  '-> move.l 1cba8 <cameraX>,d0
    ef9a:	|  |      move.l d0,-(sp)
    ef9c:	|  |      jsr 176d6 <__floatsisf>
    efa2:	|  |      addq.l #4,sp
    efa4:	|  |      move.l d0,d2
    efa6:	|  |      move.l 1cb8a <sceneWidth>,d0
    efac:	|  |      move.l d0,-(sp)
    efae:	|  |      jsr 176fe <__floatunsisf>
    efb4:	|  |      addq.l #4,sp
    efb6:	|  |      move.l d0,d3
    efb8:	|  |      move.l 1ca46 <winWidth>,d0
    efbe:	|  |      move.l d0,-(sp)
    efc0:	|  |      jsr 176fe <__floatunsisf>
    efc6:	|  |      addq.l #4,sp
    efc8:	|  |      move.l d0,d1
    efca:	|  |      move.l 1c484 <cameraZoom>,d0
    efd0:	|  |      move.l d0,-(sp)
    efd2:	|  |      move.l d1,-(sp)
    efd4:	|  |      jsr 1758c <__divsf3>
    efda:	|  |      addq.l #8,sp
    efdc:	|  |      move.l d0,-(sp)
    efde:	|  |      move.l d3,-(sp)
    efe0:	|  |      jsr 179ca <__subsf3>
    efe6:	|  |      addq.l #8,sp
    efe8:	|  |      move.l d0,-(sp)
    efea:	|  |      move.l d2,-(sp)
    efec:	|  |      jsr 17842 <__gtsf2>
    eff2:	|  |      addq.l #8,sp
    eff4:	|  |      tst.l d0
    eff6:	|  +----- ble.s f04a <builtIn_aimCamera+0x1e4>
    eff8:	|  |      move.l 1cb8a <sceneWidth>,d0
    effe:	|  |      move.l d0,-(sp)
    f000:	|  |      jsr 176fe <__floatunsisf>
    f006:	|  |      addq.l #4,sp
    f008:	|  |      move.l d0,d2
    f00a:	|  |      move.l 1ca46 <winWidth>,d0
    f010:	|  |      move.l d0,-(sp)
    f012:	|  |      jsr 176fe <__floatunsisf>
    f018:	|  |      addq.l #4,sp
    f01a:	|  |      move.l d0,d1
    f01c:	|  |      move.l 1c484 <cameraZoom>,d0
    f022:	|  |      move.l d0,-(sp)
    f024:	|  |      move.l d1,-(sp)
    f026:	|  |      jsr 1758c <__divsf3>
    f02c:	|  |      addq.l #8,sp
    f02e:	|  |      move.l d0,-(sp)
    f030:	|  |      move.l d2,-(sp)
    f032:	|  |      jsr 179ca <__subsf3>
    f038:	|  |      addq.l #8,sp
    f03a:	|  |      move.l d0,-(sp)
    f03c:	|  |      jsr 1766e <__fixsfsi>
    f042:	|  |      addq.l #4,sp
    f044:	|  |      move.l d0,1cba8 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f04a:	|  '----> move.l 1cbac <cameraY>,d0
    f050:	|     ,-- bpl.s f05c <builtIn_aimCamera+0x1f6>
    f052:	|     |   clr.l 1cbac <cameraY>
    f058:	|  ,--|-- bra.w f112 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f05c:	|  |  '-> move.l 1cbac <cameraY>,d0
    f062:	|  |      move.l d0,-(sp)
    f064:	|  |      jsr 176d6 <__floatsisf>
    f06a:	|  |      addq.l #4,sp
    f06c:	|  |      move.l d0,d2
    f06e:	|  |      move.l 1cb8e <sceneHeight>,d0
    f074:	|  |      move.l d0,-(sp)
    f076:	|  |      jsr 176fe <__floatunsisf>
    f07c:	|  |      addq.l #4,sp
    f07e:	|  |      move.l d0,d3
    f080:	|  |      move.l 1ca4a <winHeight>,d0
    f086:	|  |      move.l d0,-(sp)
    f088:	|  |      jsr 176fe <__floatunsisf>
    f08e:	|  |      addq.l #4,sp
    f090:	|  |      move.l d0,d1
    f092:	|  |      move.l 1c484 <cameraZoom>,d0
    f098:	|  |      move.l d0,-(sp)
    f09a:	|  |      move.l d1,-(sp)
    f09c:	|  |      jsr 1758c <__divsf3>
    f0a2:	|  |      addq.l #8,sp
    f0a4:	|  |      move.l d0,-(sp)
    f0a6:	|  |      move.l d3,-(sp)
    f0a8:	|  |      jsr 179ca <__subsf3>
    f0ae:	|  |      addq.l #8,sp
    f0b0:	|  |      move.l d0,-(sp)
    f0b2:	|  |      move.l d2,-(sp)
    f0b4:	|  |      jsr 17842 <__gtsf2>
    f0ba:	|  |      addq.l #8,sp
    f0bc:	|  |      tst.l d0
    f0be:	|  +----- ble.s f112 <builtIn_aimCamera+0x2ac>
    f0c0:	|  |      move.l 1cb8e <sceneHeight>,d0
    f0c6:	|  |      move.l d0,-(sp)
    f0c8:	|  |      jsr 176fe <__floatunsisf>
    f0ce:	|  |      addq.l #4,sp
    f0d0:	|  |      move.l d0,d2
    f0d2:	|  |      move.l 1ca4a <winHeight>,d0
    f0d8:	|  |      move.l d0,-(sp)
    f0da:	|  |      jsr 176fe <__floatunsisf>
    f0e0:	|  |      addq.l #4,sp
    f0e2:	|  |      move.l d0,d1
    f0e4:	|  |      move.l 1c484 <cameraZoom>,d0
    f0ea:	|  |      move.l d0,-(sp)
    f0ec:	|  |      move.l d1,-(sp)
    f0ee:	|  |      jsr 1758c <__divsf3>
    f0f4:	|  |      addq.l #8,sp
    f0f6:	|  |      move.l d0,-(sp)
    f0f8:	|  |      move.l d2,-(sp)
    f0fa:	|  |      jsr 179ca <__subsf3>
    f100:	|  |      addq.l #8,sp
    f102:	|  |      move.l d0,-(sp)
    f104:	|  |      jsr 1766e <__fixsfsi>
    f10a:	|  |      addq.l #4,sp
    f10c:	|  |      move.l d0,1cbac <cameraY>
	return BR_CONTINUE;
    f112:	|  '----> moveq #2,d0
}
    f114:	'-------> move.l (sp)+,d2
    f116:	          move.l (sp)+,d3
    f118:	          rts

0000f11a <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f11a:	       subq.l #4,sp
    f11c:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f11e:	       movea.l 16(sp),a0
    f122:	       move.l 24(a0),d0
    f126:	       move.l d0,-(sp)
    f128:	       pea 1 <_start+0x1>
    f12c:	       moveq #12,d0
    f12e:	       add.l sp,d0
    f130:	       move.l d0,-(sp)
    f132:	       jsr 147c4 <getValueType>
    f138:	       lea 12(sp),sp
    f13c:	       tst.w d0
    f13e:	   ,-- bne.s f146 <builtIn_zoomCamera+0x2c>
    f140:	   |   moveq #1,d0
    f142:	,--|-- bra.w f340 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f146:	|  '-> moveq #24,d0
    f148:	|      add.l 16(sp),d0
    f14c:	|      move.l d0,-(sp)
    f14e:	|      jsr 15148 <trimStack>
    f154:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f156:	|      move.l 1caae <input+0xa>,d0
    f15c:	|      move.l d0,-(sp)
    f15e:	|      jsr 176d6 <__floatsisf>
    f164:	|      addq.l #4,sp
    f166:	|      move.l d0,d1
    f168:	|      move.l 1c484 <cameraZoom>,d0
    f16e:	|      move.l d0,-(sp)
    f170:	|      move.l d1,-(sp)
    f172:	|      jsr 17788 <__mulsf3>
    f178:	|      addq.l #8,sp
    f17a:	|      move.l d0,-(sp)
    f17c:	|      jsr 1766e <__fixsfsi>
    f182:	|      addq.l #4,sp
    f184:	|      move.l d0,1caae <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f18a:	|      move.l 1cab2 <input+0xe>,d0
    f190:	|      move.l d0,-(sp)
    f192:	|      jsr 176d6 <__floatsisf>
    f198:	|      addq.l #4,sp
    f19a:	|      move.l d0,d1
    f19c:	|      move.l 1c484 <cameraZoom>,d0
    f1a2:	|      move.l d0,-(sp)
    f1a4:	|      move.l d1,-(sp)
    f1a6:	|      jsr 17788 <__mulsf3>
    f1ac:	|      addq.l #8,sp
    f1ae:	|      move.l d0,-(sp)
    f1b0:	|      jsr 1766e <__fixsfsi>
    f1b6:	|      addq.l #4,sp
    f1b8:	|      move.l d0,1cab2 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f1be:	|      move.l 4(sp),d0
    f1c2:	|      move.l d0,-(sp)
    f1c4:	|      jsr 176d6 <__floatsisf>
    f1ca:	|      addq.l #4,sp
    f1cc:	|      move.l #1008981770,-(sp)
    f1d2:	|      move.l d0,-(sp)
    f1d4:	|      jsr 17788 <__mulsf3>
    f1da:	|      addq.l #8,sp
    f1dc:	|      move.l d0,1c484 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f1e2:	|      move.l 1ca46 <winWidth>,d0
    f1e8:	|      move.l d0,-(sp)
    f1ea:	|      jsr 176fe <__floatunsisf>
    f1f0:	|      addq.l #4,sp
    f1f2:	|      move.l d0,d1
    f1f4:	|      move.l 1c484 <cameraZoom>,d0
    f1fa:	|      move.l d0,-(sp)
    f1fc:	|      move.l d1,-(sp)
    f1fe:	|      jsr 1758c <__divsf3>
    f204:	|      addq.l #8,sp
    f206:	|      move.l d0,d2
    f208:	|      move.l 1cb8a <sceneWidth>,d0
    f20e:	|      move.l d0,-(sp)
    f210:	|      jsr 176fe <__floatunsisf>
    f216:	|      addq.l #4,sp
    f218:	|      move.l d0,-(sp)
    f21a:	|      move.l d2,-(sp)
    f21c:	|      jsr 17842 <__gtsf2>
    f222:	|      addq.l #8,sp
    f224:	|      tst.l d0
    f226:	|  ,-- ble.s f25c <builtIn_zoomCamera+0x142>
    f228:	|  |   move.l 1ca46 <winWidth>,d0
    f22e:	|  |   move.l d0,-(sp)
    f230:	|  |   jsr 176fe <__floatunsisf>
    f236:	|  |   addq.l #4,sp
    f238:	|  |   move.l d0,d2
    f23a:	|  |   move.l 1cb8a <sceneWidth>,d0
    f240:	|  |   move.l d0,-(sp)
    f242:	|  |   jsr 176fe <__floatunsisf>
    f248:	|  |   addq.l #4,sp
    f24a:	|  |   move.l d0,-(sp)
    f24c:	|  |   move.l d2,-(sp)
    f24e:	|  |   jsr 1758c <__divsf3>
    f254:	|  |   addq.l #8,sp
    f256:	|  |   move.l d0,1c484 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f25c:	|  '-> move.l 1ca4a <winHeight>,d0
    f262:	|      move.l d0,-(sp)
    f264:	|      jsr 176fe <__floatunsisf>
    f26a:	|      addq.l #4,sp
    f26c:	|      move.l d0,d1
    f26e:	|      move.l 1c484 <cameraZoom>,d0
    f274:	|      move.l d0,-(sp)
    f276:	|      move.l d1,-(sp)
    f278:	|      jsr 1758c <__divsf3>
    f27e:	|      addq.l #8,sp
    f280:	|      move.l d0,d2
    f282:	|      move.l 1cb8e <sceneHeight>,d0
    f288:	|      move.l d0,-(sp)
    f28a:	|      jsr 176fe <__floatunsisf>
    f290:	|      addq.l #4,sp
    f292:	|      move.l d0,-(sp)
    f294:	|      move.l d2,-(sp)
    f296:	|      jsr 17842 <__gtsf2>
    f29c:	|      addq.l #8,sp
    f29e:	|      tst.l d0
    f2a0:	|  ,-- ble.s f2d6 <builtIn_zoomCamera+0x1bc>
    f2a2:	|  |   move.l 1ca4a <winHeight>,d0
    f2a8:	|  |   move.l d0,-(sp)
    f2aa:	|  |   jsr 176fe <__floatunsisf>
    f2b0:	|  |   addq.l #4,sp
    f2b2:	|  |   move.l d0,d2
    f2b4:	|  |   move.l 1cb8e <sceneHeight>,d0
    f2ba:	|  |   move.l d0,-(sp)
    f2bc:	|  |   jsr 176fe <__floatunsisf>
    f2c2:	|  |   addq.l #4,sp
    f2c4:	|  |   move.l d0,-(sp)
    f2c6:	|  |   move.l d2,-(sp)
    f2c8:	|  |   jsr 1758c <__divsf3>
    f2ce:	|  |   addq.l #8,sp
    f2d0:	|  |   move.l d0,1c484 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f2d6:	|  '-> move.l 1caae <input+0xa>,d0
    f2dc:	|      move.l d0,-(sp)
    f2de:	|      jsr 176d6 <__floatsisf>
    f2e4:	|      addq.l #4,sp
    f2e6:	|      move.l d0,d1
    f2e8:	|      move.l 1c484 <cameraZoom>,d0
    f2ee:	|      move.l d0,-(sp)
    f2f0:	|      move.l d1,-(sp)
    f2f2:	|      jsr 1758c <__divsf3>
    f2f8:	|      addq.l #8,sp
    f2fa:	|      move.l d0,-(sp)
    f2fc:	|      jsr 1766e <__fixsfsi>
    f302:	|      addq.l #4,sp
    f304:	|      move.l d0,1caae <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f30a:	|      move.l 1cab2 <input+0xe>,d0
    f310:	|      move.l d0,-(sp)
    f312:	|      jsr 176d6 <__floatsisf>
    f318:	|      addq.l #4,sp
    f31a:	|      move.l d0,d1
    f31c:	|      move.l 1c484 <cameraZoom>,d0
    f322:	|      move.l d0,-(sp)
    f324:	|      move.l d1,-(sp)
    f326:	|      jsr 1758c <__divsf3>
    f32c:	|      addq.l #8,sp
    f32e:	|      move.l d0,-(sp)
    f330:	|      jsr 1766e <__fixsfsi>
    f336:	|      addq.l #4,sp
    f338:	|      move.l d0,1cab2 <input+0xe>

	return BR_CONTINUE;
    f33e:	|      moveq #2,d0
}
    f340:	'----> move.l (sp)+,d2
    f342:	       addq.l #4,sp
    f344:	       rts

0000f346 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f346:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f348:	             tst.l 8(sp)
    f34c:	         ,-- bne.s f360 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f34e:	         |   pea 19a15 <talk.c.490538ff+0x6>
    f354:	         |   jsr 172a4 <KPrintF>
    f35a:	         |   addq.l #4,sp
		return BR_ERROR;
    f35c:	         |   moveq #1,d0
    f35e:	,--------|-- bra.s f3c0 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f360:	|        '-> jsr 15e64 <rand>
    f366:	|            move.l d0,d1
    f368:	|            move.l 8(sp),d0
    f36c:	|            move.l d0,-(sp)
    f36e:	|            move.l d1,-(sp)
    f370:	|            jsr 17d0a <__umodsi3>
    f376:	|            addq.l #8,sp
    f378:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f37a:	|     ,----- bra.s f3ae <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f37c:	|  ,--|----> move.l (sp),d0
    f37e:	|  |  |      cmp.l 8(sp),d0
    f382:	|  |  |  ,-- bne.s f39e <builtIn_pickOne+0x58>
    f384:	|  |  |  |   moveq #28,d0
    f386:	|  |  |  |   add.l 12(sp),d0
    f38a:	|  |  |  |   movea.l 12(sp),a0
    f38e:	|  |  |  |   move.l 24(a0),d1
    f392:	|  |  |  |   move.l d0,-(sp)
    f394:	|  |  |  |   move.l d1,-(sp)
    f396:	|  |  |  |   jsr 14c7e <copyVariable>
    f39c:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f39e:	|  |  |  '-> moveq #24,d0
    f3a0:	|  |  |      add.l 12(sp),d0
    f3a4:	|  |  |      move.l d0,-(sp)
    f3a6:	|  |  |      jsr 15148 <trimStack>
    f3ac:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f3ae:	|  |  '----> move.l 8(sp),d0
    f3b2:	|  |         move.l d0,d1
    f3b4:	|  |         subq.l #1,d1
    f3b6:	|  |         move.l d1,8(sp)
    f3ba:	|  |         tst.l d0
    f3bc:	|  '-------- bne.s f37c <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f3be:	|            moveq #2,d0
}
    f3c0:	'----------> addq.l #4,sp
    f3c2:	             rts

0000f3c4 <builtIn_substring>:

builtIn(substring)
{
    f3c4:	       lea -40(sp),sp
    f3c8:	       move.l a6,-(sp)
    f3ca:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3cc:	       movea.l 56(sp),a0
    f3d0:	       move.l 24(a0),d0
    f3d4:	       move.l d0,-(sp)
    f3d6:	       pea 1 <_start+0x1>
    f3da:	       lea 16(sp),a0
    f3de:	       move.l a0,-(sp)
    f3e0:	       jsr 147c4 <getValueType>
    f3e6:	       lea 12(sp),sp
    f3ea:	       tst.w d0
    f3ec:	   ,-- bne.s f3f4 <builtIn_substring+0x30>
    f3ee:	   |   moveq #1,d0
    f3f0:	,--|-- bra.w f56c <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f3f4:	|  '-> moveq #24,d0
    f3f6:	|      add.l 56(sp),d0
    f3fa:	|      move.l d0,-(sp)
    f3fc:	|      jsr 15148 <trimStack>
    f402:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f404:	|      movea.l 56(sp),a0
    f408:	|      move.l 24(a0),d0
    f40c:	|      move.l d0,-(sp)
    f40e:	|      pea 1 <_start+0x1>
    f412:	|      lea 20(sp),a0
    f416:	|      move.l a0,-(sp)
    f418:	|      jsr 147c4 <getValueType>
    f41e:	|      lea 12(sp),sp
    f422:	|      tst.w d0
    f424:	|  ,-- bne.s f42c <builtIn_substring+0x68>
    f426:	|  |   moveq #1,d0
    f428:	+--|-- bra.w f56c <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f42c:	|  '-> moveq #24,d0
    f42e:	|      add.l 56(sp),d0
    f432:	|      move.l d0,-(sp)
    f434:	|      jsr 15148 <trimStack>
    f43a:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f43c:	|      movea.l 56(sp),a0
    f440:	|      move.l 24(a0),d0
    f444:	|      move.l d0,-(sp)
    f446:	|      jsr 14d9a <getTextFromAnyVar>
    f44c:	|      addq.l #4,sp
    f44e:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f452:	|      moveq #24,d0
    f454:	|      add.l 56(sp),d0
    f458:	|      move.l d0,-(sp)
    f45a:	|      jsr 15148 <trimStack>
    f460:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f462:	|      move.l 44(sp),-(sp)
    f466:	|      jsr 13cb0 <strlen>
    f46c:	|      addq.l #4,sp
    f46e:	|      move.l d0,d1
    f470:	|      move.l 12(sp),d0
    f474:	|      movea.l d0,a0
    f476:	|      move.l 8(sp),d0
    f47a:	|      add.l a0,d0
    f47c:	|      cmp.l d1,d0
    f47e:	|  ,-- bls.s f4b4 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f480:	|  |   move.l 44(sp),-(sp)
    f484:	|  |   jsr 13cb0 <strlen>
    f48a:	|  |   addq.l #4,sp
    f48c:	|  |   move.l d0,d1
    f48e:	|  |   move.l 12(sp),d0
    f492:	|  |   sub.l d0,d1
    f494:	|  |   move.l d1,d0
    f496:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f49a:	|  |   move.l 44(sp),-(sp)
    f49e:	|  |   jsr 13cb0 <strlen>
    f4a4:	|  |   addq.l #4,sp
    f4a6:	|  |   move.l d0,d1
    f4a8:	|  |   move.l 12(sp),d0
    f4ac:	|  |   cmp.l d1,d0
    f4ae:	|  +-- bls.s f4b4 <builtIn_substring+0xf0>
            start = 0;
    f4b0:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f4b4:	|  '-> move.l 8(sp),d0
    f4b8:	|  ,-- bpl.s f4be <builtIn_substring+0xfa>
        length = 0;
    f4ba:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f4be:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f4c4:	|      move.l 12(sp),d1
    f4c8:	|      move.l 8(sp),d0
    f4cc:	|      move.l d1,d2
    f4ce:	|      add.l d0,d2
    f4d0:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f4d4:	|      move.l 36(sp),d0
    f4d8:	|      sub.l 40(sp),d0
    f4dc:	|      addq.l #1,d0
    f4de:	|      move.l d0,32(sp)
    f4e2:	|      clr.l 28(sp)
    f4e6:	|      move.l 1caf2 <SysBase>,d0
    f4ec:	|      movea.l d0,a6
    f4ee:	|      move.l 32(sp),d0
    f4f2:	|      move.l 28(sp),d1
    f4f6:	|      jsr -684(a6)
    f4fa:	|      move.l d0,24(sp)
    f4fe:	|      move.l 24(sp),d0
    f502:	|      move.l d0,20(sp)
    if (!newString) {
    f506:	|  ,-- bne.s f50c <builtIn_substring+0x148>
        return BR_ERROR;
    f508:	|  |   moveq #1,d0
    f50a:	+--|-- bra.s f56c <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f50c:	|  '-> move.l 36(sp),d0
    f510:	|      sub.l 40(sp),d0
    f514:	|      move.l d0,d1
    f516:	|      move.l 40(sp),d0
    f51a:	|      add.l 44(sp),d0
    f51e:	|      move.l d1,-(sp)
    f520:	|      move.l d0,-(sp)
    f522:	|      move.l 28(sp),-(sp)
    f526:	|      jsr 17258 <memcpy>
    f52c:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f530:	|      move.l 36(sp),d0
    f534:	|      sub.l 40(sp),d0
    f538:	|      movea.l 20(sp),a0
    f53c:	|      adda.l d0,a0
    f53e:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f540:	|      moveq #28,d0
    f542:	|      add.l 56(sp),d0
    f546:	|      move.l 20(sp),-(sp)
    f54a:	|      move.l d0,-(sp)
    f54c:	|      jsr 149e6 <makeTextVar>
    f552:	|      addq.l #8,sp
    FreeVec(newString);
    f554:	|      move.l 20(sp),16(sp)
    f55a:	|      move.l 1caf2 <SysBase>,d0
    f560:	|      movea.l d0,a6
    f562:	|      movea.l 16(sp),a1
    f566:	|      jsr -690(a6)
    return BR_CONTINUE;
    f56a:	|      moveq #2,d0
}
    f56c:	'----> move.l (sp)+,d2
    f56e:	       movea.l (sp)+,a6
    f570:	       lea 40(sp),sp
    f574:	       rts

0000f576 <builtIn_stringLength>:

builtIn(stringLength)
{
    f576:	subq.l #8,sp
    f578:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f57a:	movea.l 20(sp),a0
    f57e:	move.l 24(a0),d0
    f582:	move.l d0,-(sp)
    f584:	jsr 14d9a <getTextFromAnyVar>
    f58a:	addq.l #4,sp
    f58c:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f590:	moveq #24,d0
    f592:	add.l 20(sp),d0
    f596:	move.l d0,-(sp)
    f598:	jsr 15148 <trimStack>
    f59e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f5a0:	move.l 8(sp),-(sp)
    f5a4:	jsr 13cb0 <strlen>
    f5aa:	addq.l #4,sp
    f5ac:	move.l d0,d1
    f5ae:	moveq #28,d0
    f5b0:	add.l 20(sp),d0
    f5b4:	move.l d1,-(sp)
    f5b6:	pea 1 <_start+0x1>
    f5ba:	move.l d0,-(sp)
    f5bc:	jsr 150b6 <setVariable>
    f5c2:	lea 12(sp),sp
	FreeVec(newText);
    f5c6:	move.l 8(sp),4(sp)
    f5cc:	move.l 1caf2 <SysBase>,d0
    f5d2:	movea.l d0,a6
    f5d4:	movea.l 4(sp),a1
    f5d8:	jsr -690(a6)
	return BR_CONTINUE;
    f5dc:	moveq #2,d0
}
    f5de:	movea.l (sp)+,a6
    f5e0:	addq.l #8,sp
    f5e2:	rts

0000f5e4 <builtIn_newStack>:

builtIn(newStack)
{
    f5e4:	             lea -12(sp),sp
    f5e8:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f5ea:	             moveq #28,d0
    f5ec:	             add.l 24(sp),d0
    f5f0:	             move.l d0,-(sp)
    f5f2:	             jsr 14a12 <unlinkVar>
    f5f8:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f5fa:	             movea.l 24(sp),a0
    f5fe:	             moveq #6,d0
    f600:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f604:	             moveq #12,d1
    f606:	             move.l d1,12(sp)
    f60a:	             clr.l 8(sp)
    f60e:	             move.l 1caf2 <SysBase>,d0
    f614:	             movea.l d0,a6
    f616:	             move.l 12(sp),d0
    f61a:	             move.l 8(sp),d1
    f61e:	             jsr -684(a6)
    f622:	             move.l d0,4(sp)
    f626:	             move.l 4(sp),d0
    f62a:	             movea.l 24(sp),a0
    f62e:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f632:	             movea.l 24(sp),a0
    f636:	             move.l 32(a0),d0
    f63a:	         ,-- bne.s f642 <builtIn_newStack+0x5e>
    f63c:	         |   moveq #1,d0
    f63e:	,--------|-- bra.w f6d4 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f642:	|        '-> movea.l 24(sp),a0
    f646:	|            movea.l 32(a0),a0
    f64a:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f64c:	|            movea.l 24(sp),a0
    f650:	|            movea.l 32(a0),a0
    f654:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f658:	|            movea.l 24(sp),a0
    f65c:	|            movea.l 32(a0),a0
    f660:	|            moveq #1,d0
    f662:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f666:	|     ,----- bra.s f6c2 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f668:	|  ,--|----> movea.l 24(sp),a0
    f66c:	|  |  |      move.l 32(a0),d0
    f670:	|  |  |      move.l d0,d1
    f672:	|  |  |      movea.l 24(sp),a0
    f676:	|  |  |      move.l 24(a0),d0
    f67a:	|  |  |      move.l d1,-(sp)
    f67c:	|  |  |      move.l d0,-(sp)
    f67e:	|  |  |      jsr 14000 <addVarToStack>
    f684:	|  |  |      addq.l #8,sp
    f686:	|  |  |      tst.w d0
    f688:	|  |  |  ,-- bne.s f68e <builtIn_newStack+0xaa>
    f68a:	|  |  |  |   moveq #1,d0
    f68c:	+--|--|--|-- bra.s f6d4 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f68e:	|  |  |  '-> movea.l 24(sp),a0
    f692:	|  |  |      movea.l 32(a0),a0
    f696:	|  |  |      move.l 4(a0),d0
    f69a:	|  |  |  ,-- bne.s f6b2 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f69c:	|  |  |  |   movea.l 24(sp),a0
    f6a0:	|  |  |  |   movea.l 32(a0),a1
    f6a4:	|  |  |  |   movea.l 24(sp),a0
    f6a8:	|  |  |  |   movea.l 32(a0),a0
    f6ac:	|  |  |  |   move.l (a1),d0
    f6ae:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f6b2:	|  |  |  '-> moveq #24,d0
    f6b4:	|  |  |      add.l 24(sp),d0
    f6b8:	|  |  |      move.l d0,-(sp)
    f6ba:	|  |  |      jsr 15148 <trimStack>
    f6c0:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f6c2:	|  |  '----> move.l 20(sp),d0
    f6c6:	|  |         move.l d0,d1
    f6c8:	|  |         subq.l #1,d1
    f6ca:	|  |         move.l d1,20(sp)
    f6ce:	|  |         tst.l d0
    f6d0:	|  '-------- bne.s f668 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f6d2:	|            moveq #2,d0
}
    f6d4:	'----------> movea.l (sp)+,a6
    f6d6:	             lea 12(sp),sp
    f6da:	             rts

0000f6dc <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f6dc:	          movea.l 8(sp),a0
    f6e0:	          movea.l 24(a0),a0
    f6e4:	          move.l (a0),d0
    f6e6:	          moveq #6,d1
    f6e8:	          cmp.l d0,d1
    f6ea:	      ,-- beq.s f706 <builtIn_stackSize+0x2a>
    f6ec:	      |   moveq #10,d1
    f6ee:	      |   cmp.l d0,d1
    f6f0:	   ,--|-- beq.s f74a <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f6f2:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f6f4:	   |  |   pea 19a48 <talk.c.490538ff+0x39>
    f6fa:	   |  |   jsr 172a4 <KPrintF>
    f700:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f702:	   |  |   moveq #1,d0
    f704:	,--|--|-- bra.s f784 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f706:	|  |  '-> movea.l 8(sp),a0
    f70a:	|  |      movea.l 24(a0),a0
    f70e:	|  |      move.l 4(a0),d0
    f712:	|  |      move.l d0,-(sp)
    f714:	|  |      jsr 15124 <stackSize>
    f71a:	|  |      addq.l #4,sp
    f71c:	|  |      move.l d0,d1
    f71e:	|  |      moveq #28,d0
    f720:	|  |      add.l 8(sp),d0
    f724:	|  |      move.l d1,-(sp)
    f726:	|  |      pea 1 <_start+0x1>
    f72a:	|  |      move.l d0,-(sp)
    f72c:	|  |      jsr 150b6 <setVariable>
    f732:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f736:	|  |      moveq #24,d0
    f738:	|  |      add.l 8(sp),d0
    f73c:	|  |      move.l d0,-(sp)
    f73e:	|  |      jsr 15148 <trimStack>
    f744:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f746:	|  |      moveq #2,d0
    f748:	+--|----- bra.s f784 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f74a:	|  '----> movea.l 8(sp),a0
    f74e:	|         movea.l 24(a0),a0
    f752:	|         movea.l 4(a0),a0
    f756:	|         move.l 4(a0),d1
    f75a:	|         moveq #28,d0
    f75c:	|         add.l 8(sp),d0
    f760:	|         move.l d1,-(sp)
    f762:	|         pea 1 <_start+0x1>
    f766:	|         move.l d0,-(sp)
    f768:	|         jsr 150b6 <setVariable>
    f76e:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f772:	|         moveq #24,d0
    f774:	|         add.l 8(sp),d0
    f778:	|         move.l d0,-(sp)
    f77a:	|         jsr 15148 <trimStack>
    f780:	|         addq.l #4,sp
			return BR_CONTINUE;
    f782:	|         moveq #2,d0
}
    f784:	'-------> rts

0000f786 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f786:	       movea.l 8(sp),a0
    f78a:	       movea.l 24(a0),a0
    f78e:	       move.l (a0),d0
    f790:	       moveq #6,d1
    f792:	       cmp.l d0,d1
    f794:	   ,-- beq.s f7a8 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f796:	   |   pea 19a71 <talk.c.490538ff+0x62>
    f79c:	   |   jsr 172a4 <KPrintF>
    f7a2:	   |   addq.l #4,sp
		return BR_ERROR;
    f7a4:	   |   moveq #1,d0
    f7a6:	,--|-- bra.s f7dc <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f7a8:	|  '-> moveq #28,d0
    f7aa:	|      add.l 8(sp),d0
    f7ae:	|      movea.l 8(sp),a0
    f7b2:	|      move.l 24(a0),d1
    f7b6:	|      move.l d0,-(sp)
    f7b8:	|      move.l d1,-(sp)
    f7ba:	|      jsr 142ca <copyStack>
    f7c0:	|      addq.l #8,sp
    f7c2:	|      tst.w d0
    f7c4:	|  ,-- bne.s f7ca <builtIn_copyStack+0x44>
    f7c6:	|  |   moveq #1,d0
    f7c8:	+--|-- bra.s f7dc <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f7ca:	|  '-> moveq #24,d0
    f7cc:	|      add.l 8(sp),d0
    f7d0:	|      move.l d0,-(sp)
    f7d2:	|      jsr 15148 <trimStack>
    f7d8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7da:	|      moveq #2,d0
}
    f7dc:	'----> rts

0000f7de <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7de:	       movea.l 8(sp),a0
    f7e2:	       movea.l 24(a0),a0
    f7e6:	       movea.l 8(a0),a0
    f7ea:	       move.l (a0),d0
    f7ec:	       moveq #6,d1
    f7ee:	       cmp.l d0,d1
    f7f0:	   ,-- beq.s f806 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f7f2:	   |   pea 19a8a <talk.c.490538ff+0x7b>
    f7f8:	   |   jsr 172a4 <KPrintF>
    f7fe:	   |   addq.l #4,sp
		return BR_ERROR;
    f800:	   |   moveq #1,d0
    f802:	,--|-- bra.w f894 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f806:	|  '-> movea.l 8(sp),a0
    f80a:	|      movea.l 24(a0),a0
    f80e:	|      movea.l 8(a0),a0
    f812:	|      move.l 4(a0),d0
    f816:	|      move.l d0,d1
    f818:	|      movea.l 8(sp),a0
    f81c:	|      move.l 24(a0),d0
    f820:	|      move.l d1,-(sp)
    f822:	|      move.l d0,-(sp)
    f824:	|      jsr 14000 <addVarToStack>
    f82a:	|      addq.l #8,sp
    f82c:	|      tst.w d0
    f82e:	|  ,-- bne.s f834 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f830:	|  |   moveq #1,d0
    f832:	+--|-- bra.s f894 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f834:	|  '-> movea.l 8(sp),a0
    f838:	|      movea.l 24(a0),a0
    f83c:	|      movea.l 8(a0),a0
    f840:	|      movea.l 4(a0),a0
    f844:	|      movea.l (a0),a0
    f846:	|      move.l 8(a0),d0
    f84a:	|  ,-- bne.s f872 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f84c:	|  |   movea.l 8(sp),a0
    f850:	|  |   movea.l 24(a0),a0
    f854:	|  |   movea.l 8(a0),a0
    f858:	|  |   movea.l 4(a0),a1
    f85c:	|  |   movea.l 8(sp),a0
    f860:	|  |   movea.l 24(a0),a0
    f864:	|  |   movea.l 8(a0),a0
    f868:	|  |   movea.l 4(a0),a0
    f86c:	|  |   move.l (a1),d0
    f86e:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f872:	|  '-> moveq #24,d0
    f874:	|      add.l 8(sp),d0
    f878:	|      move.l d0,-(sp)
    f87a:	|      jsr 15148 <trimStack>
    f880:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f882:	|      moveq #24,d0
    f884:	|      add.l 8(sp),d0
    f888:	|      move.l d0,-(sp)
    f88a:	|      jsr 15148 <trimStack>
    f890:	|      addq.l #4,sp
	return BR_CONTINUE;
    f892:	|      moveq #2,d0
}
    f894:	'----> rts

0000f896 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f896:	             movea.l 8(sp),a0
    f89a:	             movea.l 24(a0),a0
    f89e:	             movea.l 8(a0),a0
    f8a2:	             move.l (a0),d0
    f8a4:	             moveq #6,d1
    f8a6:	             cmp.l d0,d1
    f8a8:	         ,-- beq.s f8be <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f8aa:	         |   pea 19a8a <talk.c.490538ff+0x7b>
    f8b0:	         |   jsr 172a4 <KPrintF>
    f8b6:	         |   addq.l #4,sp
		return BR_ERROR;
    f8b8:	         |   moveq #1,d0
    f8ba:	,--------|-- bra.w f9ac <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f8be:	|        '-> movea.l 8(sp),a0
    f8c2:	|            movea.l 24(a0),a0
    f8c6:	|            movea.l 8(a0),a0
    f8ca:	|            movea.l 4(a0),a0
    f8ce:	|            move.l (a0),d0
    f8d0:	|     ,----- bne.s f92a <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f8d2:	|     |      movea.l 8(sp),a0
    f8d6:	|     |      movea.l 24(a0),a0
    f8da:	|     |      movea.l 8(a0),a0
    f8de:	|     |      move.l 4(a0),d0
    f8e2:	|     |      move.l d0,d1
    f8e4:	|     |      movea.l 8(sp),a0
    f8e8:	|     |      move.l 24(a0),d0
    f8ec:	|     |      move.l d1,-(sp)
    f8ee:	|     |      move.l d0,-(sp)
    f8f0:	|     |      jsr 14000 <addVarToStack>
    f8f6:	|     |      addq.l #8,sp
    f8f8:	|     |      tst.w d0
    f8fa:	|     |  ,-- bne.s f902 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f8fc:	|     |  |   moveq #1,d0
    f8fe:	+-----|--|-- bra.w f9ac <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f902:	|     |  '-> movea.l 8(sp),a0
    f906:	|     |      movea.l 24(a0),a0
    f90a:	|     |      movea.l 8(a0),a0
    f90e:	|     |      movea.l 4(a0),a1
    f912:	|     |      movea.l 8(sp),a0
    f916:	|     |      movea.l 24(a0),a0
    f91a:	|     |      movea.l 8(a0),a0
    f91e:	|     |      movea.l 4(a0),a0
    f922:	|     |      move.l (a1),d0
    f924:	|     |      move.l d0,4(a0)
    f928:	|  ,--|----- bra.s f98a <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f92a:	|  |  '----> movea.l 8(sp),a0
    f92e:	|  |         movea.l 24(a0),a0
    f932:	|  |         movea.l 8(a0),a0
    f936:	|  |         movea.l 4(a0),a0
    f93a:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f93e:	|  |         move.l d0,d1
    f940:	|  |         addq.l #8,d1
    f942:	|  |         movea.l 8(sp),a0
    f946:	|  |         move.l 24(a0),d0
    f94a:	|  |         move.l d1,-(sp)
    f94c:	|  |         move.l d0,-(sp)
    f94e:	|  |         jsr 14000 <addVarToStack>
    f954:	|  |         addq.l #8,sp
    f956:	|  |         tst.w d0
    f958:	|  |     ,-- bne.s f95e <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f95a:	|  |     |   moveq #1,d0
    f95c:	+--|-----|-- bra.s f9ac <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f95e:	|  |     '-> movea.l 8(sp),a0
    f962:	|  |         movea.l 24(a0),a0
    f966:	|  |         movea.l 8(a0),a0
    f96a:	|  |         movea.l 4(a0),a0
    f96e:	|  |         movea.l 4(a0),a1
    f972:	|  |         movea.l 8(sp),a0
    f976:	|  |         movea.l 24(a0),a0
    f97a:	|  |         movea.l 8(a0),a0
    f97e:	|  |         movea.l 4(a0),a0
    f982:	|  |         move.l 8(a1),d0
    f986:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f98a:	|  '-------> moveq #24,d0
    f98c:	|            add.l 8(sp),d0
    f990:	|            move.l d0,-(sp)
    f992:	|            jsr 15148 <trimStack>
    f998:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f99a:	|            moveq #24,d0
    f99c:	|            add.l 8(sp),d0
    f9a0:	|            move.l d0,-(sp)
    f9a2:	|            jsr 15148 <trimStack>
    f9a8:	|            addq.l #4,sp
	return BR_CONTINUE;
    f9aa:	|            moveq #2,d0
}
    f9ac:	'----------> rts

0000f9ae <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f9ae:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f9b0:	       movea.l 12(sp),a0
    f9b4:	       movea.l 24(a0),a0
    f9b8:	       movea.l 8(a0),a0
    f9bc:	       move.l (a0),d0
    f9be:	       moveq #6,d1
    f9c0:	       cmp.l d0,d1
    f9c2:	   ,-- beq.s f9d8 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f9c4:	   |   pea 19a71 <talk.c.490538ff+0x62>
    f9ca:	   |   jsr 172a4 <KPrintF>
    f9d0:	   |   addq.l #4,sp
		return BR_ERROR;
    f9d2:	   |   moveq #1,d0
    f9d4:	,--|-- bra.w fa6e <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f9d8:	|  '-> movea.l 12(sp),a0
    f9dc:	|      movea.l 24(a0),a0
    f9e0:	|      movea.l 8(a0),a0
    f9e4:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9e8:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f9ea:	|      movea.l 12(sp),a0
    f9ee:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9f2:	|      clr.l -(sp)
    f9f4:	|      move.l d1,-(sp)
    f9f6:	|      move.l d0,-(sp)
    f9f8:	|      jsr 143a0 <deleteVarFromStack>
    f9fe:	|      lea 12(sp),sp
    fa02:	|      move.l d0,d1
    fa04:	|      moveq #28,d0
    fa06:	|      add.l 12(sp),d0
    fa0a:	|      move.l d1,-(sp)
    fa0c:	|      pea 1 <_start+0x1>
    fa10:	|      move.l d0,-(sp)
    fa12:	|      jsr 150b6 <setVariable>
    fa18:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa1c:	|      movea.l 12(sp),a0
    fa20:	|      movea.l 24(a0),a0
    fa24:	|      movea.l 8(a0),a0
    fa28:	|      movea.l 4(a0),a0
    fa2c:	|      move.l (a0),d0
    fa2e:	|      movea.l 12(sp),a0
    fa32:	|      movea.l 24(a0),a0
    fa36:	|      movea.l 8(a0),a0
    fa3a:	|      movea.l 4(a0),a2
    fa3e:	|      move.l d0,-(sp)
    fa40:	|      jsr 15100 <stackFindLast>
    fa46:	|      addq.l #4,sp
    fa48:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fa4c:	|      moveq #24,d0
    fa4e:	|      add.l 12(sp),d0
    fa52:	|      move.l d0,-(sp)
    fa54:	|      jsr 15148 <trimStack>
    fa5a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa5c:	|      moveq #24,d0
    fa5e:	|      add.l 12(sp),d0
    fa62:	|      move.l d0,-(sp)
    fa64:	|      jsr 15148 <trimStack>
    fa6a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa6c:	|      moveq #2,d0
}
    fa6e:	'----> movea.l (sp)+,a2
    fa70:	       rts

0000fa72 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fa72:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa74:	       movea.l 12(sp),a0
    fa78:	       movea.l 24(a0),a0
    fa7c:	       movea.l 8(a0),a0
    fa80:	       move.l (a0),d0
    fa82:	       moveq #6,d1
    fa84:	       cmp.l d0,d1
    fa86:	   ,-- beq.s fa9c <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa88:	   |   pea 19a71 <talk.c.490538ff+0x62>
    fa8e:	   |   jsr 172a4 <KPrintF>
    fa94:	   |   addq.l #4,sp
		return BR_ERROR;
    fa96:	   |   moveq #1,d0
    fa98:	,--|-- bra.w fb34 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fa9c:	|  '-> movea.l 12(sp),a0
    faa0:	|      movea.l 24(a0),a0
    faa4:	|      movea.l 8(a0),a0
    faa8:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    faac:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    faae:	|      movea.l 12(sp),a0
    fab2:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fab6:	|      pea 1 <_start+0x1>
    faba:	|      move.l d1,-(sp)
    fabc:	|      move.l d0,-(sp)
    fabe:	|      jsr 143a0 <deleteVarFromStack>
    fac4:	|      lea 12(sp),sp
    fac8:	|      move.l d0,d1
    faca:	|      moveq #28,d0
    facc:	|      add.l 12(sp),d0
    fad0:	|      move.l d1,-(sp)
    fad2:	|      pea 1 <_start+0x1>
    fad6:	|      move.l d0,-(sp)
    fad8:	|      jsr 150b6 <setVariable>
    fade:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fae2:	|      movea.l 12(sp),a0
    fae6:	|      movea.l 24(a0),a0
    faea:	|      movea.l 8(a0),a0
    faee:	|      movea.l 4(a0),a0
    faf2:	|      move.l (a0),d0
    faf4:	|      movea.l 12(sp),a0
    faf8:	|      movea.l 24(a0),a0
    fafc:	|      movea.l 8(a0),a0
    fb00:	|      movea.l 4(a0),a2
    fb04:	|      move.l d0,-(sp)
    fb06:	|      jsr 15100 <stackFindLast>
    fb0c:	|      addq.l #4,sp
    fb0e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb12:	|      moveq #24,d0
    fb14:	|      add.l 12(sp),d0
    fb18:	|      move.l d0,-(sp)
    fb1a:	|      jsr 15148 <trimStack>
    fb20:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb22:	|      moveq #24,d0
    fb24:	|      add.l 12(sp),d0
    fb28:	|      move.l d0,-(sp)
    fb2a:	|      jsr 15148 <trimStack>
    fb30:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb32:	|      moveq #2,d0
} 
    fb34:	'----> movea.l (sp)+,a2
    fb36:	       rts

0000fb38 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb38:	       movea.l 8(sp),a0
    fb3c:	       movea.l 24(a0),a0
    fb40:	       move.l (a0),d0
    fb42:	       moveq #6,d1
    fb44:	       cmp.l d0,d1
    fb46:	   ,-- beq.s fb5a <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb48:	   |   pea 19a71 <talk.c.490538ff+0x62>
    fb4e:	   |   jsr 172a4 <KPrintF>
    fb54:	   |   addq.l #4,sp
		return BR_ERROR;
    fb56:	   |   moveq #1,d0
    fb58:	,--|-- bra.s fbc4 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fb5a:	|  '-> movea.l 8(sp),a0
    fb5e:	|      movea.l 24(a0),a0
    fb62:	|      movea.l 4(a0),a0
    fb66:	|      move.l (a0),d0
    fb68:	|  ,-- bne.s fb7c <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fb6a:	|  |   pea 19aa2 <talk.c.490538ff+0x93>
    fb70:	|  |   jsr 172a4 <KPrintF>
    fb76:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb78:	|  |   moveq #1,d0
    fb7a:	+--|-- bra.s fbc4 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fb7c:	|  '-> moveq #28,d0
    fb7e:	|      add.l 8(sp),d0
    fb82:	|      movea.l 8(sp),a0
    fb86:	|      movea.l 24(a0),a0
    fb8a:	|      movea.l 4(a0),a0
    fb8e:	|      move.l (a0),d1
    fb90:	|      move.l d0,-(sp)
    fb92:	|      move.l d1,-(sp)
    fb94:	|      jsr 14c7e <copyVariable>
    fb9a:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fb9c:	|      movea.l 8(sp),a0
    fba0:	|      movea.l 24(a0),a0
    fba4:	|      move.l 4(a0),d0
    fba8:	|      move.l d0,-(sp)
    fbaa:	|      jsr 15148 <trimStack>
    fbb0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbb2:	|      moveq #24,d0
    fbb4:	|      add.l 8(sp),d0
    fbb8:	|      move.l d0,-(sp)
    fbba:	|      jsr 15148 <trimStack>
    fbc0:	|      addq.l #4,sp
	return BR_CONTINUE;
    fbc2:	|      moveq #2,d0
}
    fbc4:	'----> rts

0000fbc6 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fbc6:	       movea.l 8(sp),a0
    fbca:	       movea.l 24(a0),a0
    fbce:	       move.l (a0),d0
    fbd0:	       moveq #6,d1
    fbd2:	       cmp.l d0,d1
    fbd4:	   ,-- beq.s fbe8 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbd6:	   |   pea 19a71 <talk.c.490538ff+0x62>
    fbdc:	   |   jsr 172a4 <KPrintF>
    fbe2:	   |   addq.l #4,sp
		return BR_ERROR;
    fbe4:	   |   moveq #1,d0
    fbe6:	,--|-- bra.s fc3c <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbe8:	|  '-> movea.l 8(sp),a0
    fbec:	|      movea.l 24(a0),a0
    fbf0:	|      movea.l 4(a0),a0
    fbf4:	|      move.l (a0),d0
    fbf6:	|  ,-- bne.s fc0a <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fbf8:	|  |   pea 19aa2 <talk.c.490538ff+0x93>
    fbfe:	|  |   jsr 172a4 <KPrintF>
    fc04:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc06:	|  |   moveq #1,d0
    fc08:	+--|-- bra.s fc3c <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc0a:	|  '-> moveq #28,d0
    fc0c:	|      add.l 8(sp),d0
    fc10:	|      movea.l 8(sp),a0
    fc14:	|      movea.l 24(a0),a0
    fc18:	|      movea.l 4(a0),a0
    fc1c:	|      move.l (a0),d1
    fc1e:	|      move.l d0,-(sp)
    fc20:	|      move.l d1,-(sp)
    fc22:	|      jsr 14c7e <copyVariable>
    fc28:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc2a:	|      moveq #24,d0
    fc2c:	|      add.l 8(sp),d0
    fc30:	|      move.l d0,-(sp)
    fc32:	|      jsr 15148 <trimStack>
    fc38:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc3a:	|      moveq #2,d0
}
    fc3c:	'----> rts

0000fc3e <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc3e:	       movea.l 8(sp),a0
    fc42:	       movea.l 24(a0),a0
    fc46:	       move.l (a0),d0
    fc48:	       moveq #6,d1
    fc4a:	       cmp.l d0,d1
    fc4c:	   ,-- beq.s fc60 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc4e:	   |   pea 19a71 <talk.c.490538ff+0x62>
    fc54:	   |   jsr 172a4 <KPrintF>
    fc5a:	   |   addq.l #4,sp
		return BR_ERROR;
    fc5c:	   |   moveq #1,d0
    fc5e:	,--|-- bra.s fcb6 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc60:	|  '-> movea.l 8(sp),a0
    fc64:	|      movea.l 24(a0),a0
    fc68:	|      movea.l 4(a0),a0
    fc6c:	|      move.l (a0),d0
    fc6e:	|  ,-- bne.s fc82 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fc70:	|  |   pea 19aa2 <talk.c.490538ff+0x93>
    fc76:	|  |   jsr 172a4 <KPrintF>
    fc7c:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc7e:	|  |   moveq #1,d0
    fc80:	+--|-- bra.s fcb6 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fc82:	|  '-> moveq #28,d0
    fc84:	|      add.l 8(sp),d0
    fc88:	|      movea.l 8(sp),a0
    fc8c:	|      movea.l 24(a0),a0
    fc90:	|      movea.l 4(a0),a0
    fc94:	|      move.l 4(a0),d1
    fc98:	|      move.l d0,-(sp)
    fc9a:	|      move.l d1,-(sp)
    fc9c:	|      jsr 14c7e <copyVariable>
    fca2:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fca4:	|      moveq #24,d0
    fca6:	|      add.l 8(sp),d0
    fcaa:	|      move.l d0,-(sp)
    fcac:	|      jsr 15148 <trimStack>
    fcb2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcb4:	|      moveq #2,d0
}
    fcb6:	'----> rts

0000fcb8 <builtIn_random>:

builtIn(random)
{
    fcb8:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fcba:	       movea.l 12(sp),a0
    fcbe:	       move.l 24(a0),d0
    fcc2:	       move.l d0,-(sp)
    fcc4:	       pea 1 <_start+0x1>
    fcc8:	       move.l sp,d0
    fcca:	       addq.l #8,d0
    fccc:	       move.l d0,-(sp)
    fcce:	       jsr 147c4 <getValueType>
    fcd4:	       lea 12(sp),sp
    fcd8:	       tst.w d0
    fcda:	   ,-- bne.s fce0 <builtIn_random+0x28>
		return BR_ERROR;
    fcdc:	   |   moveq #1,d0
    fcde:	,--|-- bra.s fd2a <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fce0:	|  '-> moveq #24,d0
    fce2:	|      add.l 12(sp),d0
    fce6:	|      move.l d0,-(sp)
    fce8:	|      jsr 15148 <trimStack>
    fcee:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fcf0:	|      move.l (sp),d0
    fcf2:	|  ,-- bgt.s fcf8 <builtIn_random+0x40>
    fcf4:	|  |   moveq #1,d0
    fcf6:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fcf8:	|  '-> jsr 15e64 <rand>
    fcfe:	|      move.l d0,d1
    fd00:	|      move.l (sp),d0
    fd02:	|      move.l d0,-(sp)
    fd04:	|      move.l d1,-(sp)
    fd06:	|      jsr 17d0a <__umodsi3>
    fd0c:	|      addq.l #8,sp
    fd0e:	|      move.l d0,d1
    fd10:	|      moveq #28,d0
    fd12:	|      add.l 12(sp),d0
    fd16:	|      move.l d1,-(sp)
    fd18:	|      pea 1 <_start+0x1>
    fd1c:	|      move.l d0,-(sp)
    fd1e:	|      jsr 150b6 <setVariable>
    fd24:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd28:	|      moveq #2,d0
}
    fd2a:	'----> addq.l #4,sp
    fd2c:	       rts

0000fd2e <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd2e:	nop
    fd30:	rts

0000fd32 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd32:	moveq #2,d0
}
    fd34:	rts

0000fd36 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd36:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd38:	       movea.l 12(sp),a0
    fd3c:	       move.l 24(a0),d0
    fd40:	       move.l d0,-(sp)
    fd42:	       pea 1 <_start+0x1>
    fd46:	       move.l sp,d0
    fd48:	       addq.l #8,d0
    fd4a:	       move.l d0,-(sp)
    fd4c:	       jsr 147c4 <getValueType>
    fd52:	       lea 12(sp),sp
    fd56:	       tst.w d0
    fd58:	   ,-- bne.s fd6c <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fd5a:	   |   pea 19ab5 <talk.c.490538ff+0xa6>
    fd60:	   |   jsr 172a4 <KPrintF>
    fd66:	   |   addq.l #4,sp
		return BR_ERROR;
    fd68:	   |   moveq #1,d0
    fd6a:	,--|-- bra.s fdac <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fd6c:	|  '-> moveq #24,d0
    fd6e:	|      add.l 12(sp),d0
    fd72:	|      move.l d0,-(sp)
    fd74:	|      jsr 15148 <trimStack>
    fd7a:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fd7c:	|      move.l (sp),d0
    fd7e:	|      move.l d0,d0
    fd80:	|      move.w d0,1ca00 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fd86:	|      move.w 1ca00 <textPaletteIndex>,d0
    fd8c:	|      cmpi.w #31,d0
    fd90:	|  ,-- bls.s fdaa <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fd92:	|  |   pea 19adc <talk.c.490538ff+0xcd>
    fd98:	|  |   jsr 172a4 <KPrintF>
    fd9e:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fda0:	|  |   clr.w 1ca00 <textPaletteIndex>
		return BR_ERROR;
    fda6:	|  |   moveq #1,d0
    fda8:	+--|-- bra.s fdac <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fdaa:	|  '-> moveq #2,d0
}
    fdac:	'----> addq.l #4,sp
    fdae:	       rts

0000fdb0 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdb0:	moveq #2,d0
}
    fdb2:	rts

0000fdb4 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdb4:	moveq #2,d0
}
    fdb6:	rts

0000fdb8 <builtIn_setFont>:


builtIn(setFont)
{
    fdb8:	       lea -16(sp),sp
    fdbc:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdbe:	       movea.l 28(sp),a0
    fdc2:	       move.l 24(a0),d0
    fdc6:	       move.l d0,-(sp)
    fdc8:	       pea 1 <_start+0x1>
    fdcc:	       lea 12(sp),a0
    fdd0:	       move.l a0,-(sp)
    fdd2:	       jsr 147c4 <getValueType>
    fdd8:	       lea 12(sp),sp
    fddc:	       tst.w d0
    fdde:	   ,-- bne.s fde6 <builtIn_setFont+0x2e>
    fde0:	   |   moveq #1,d0
    fde2:	,--|-- bra.w fe94 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fde6:	|  '-> moveq #24,d0
    fde8:	|      add.l 28(sp),d0
    fdec:	|      move.l d0,-(sp)
    fdee:	|      jsr 15148 <trimStack>
    fdf4:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fdf6:	|      movea.l 28(sp),a0
    fdfa:	|      move.l 24(a0),d0
    fdfe:	|      move.l d0,-(sp)
    fe00:	|      jsr 14d9a <getTextFromAnyVar>
    fe06:	|      addq.l #4,sp
    fe08:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe0c:	|  ,-- bne.s fe14 <builtIn_setFont+0x5c>
    fe0e:	|  |   moveq #1,d0
    fe10:	+--|-- bra.w fe94 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe14:	|  '-> moveq #24,d0
    fe16:	|      add.l 28(sp),d0
    fe1a:	|      move.l d0,-(sp)
    fe1c:	|      jsr 15148 <trimStack>
    fe22:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe24:	|      movea.l 28(sp),a0
    fe28:	|      move.l 24(a0),d0
    fe2c:	|      move.l d0,-(sp)
    fe2e:	|      pea 5 <_start+0x5>
    fe32:	|      lea 16(sp),a0
    fe36:	|      move.l a0,-(sp)
    fe38:	|      jsr 147c4 <getValueType>
    fe3e:	|      lea 12(sp),sp
    fe42:	|      tst.w d0
    fe44:	|  ,-- bne.s fe4a <builtIn_setFont+0x92>
    fe46:	|  |   moveq #1,d0
    fe48:	+--|-- bra.s fe94 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fe4a:	|  '-> moveq #24,d0
    fe4c:	|      add.l 28(sp),d0
    fe50:	|      move.l d0,-(sp)
    fe52:	|      jsr 15148 <trimStack>
    fe58:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fe5a:	|      move.l 4(sp),d1
    fe5e:	|      move.l 8(sp),d0
    fe62:	|      move.l d1,-(sp)
    fe64:	|      move.l 20(sp),-(sp)
    fe68:	|      move.l d0,-(sp)
    fe6a:	|      jsr 155fc <loadFont>
    fe70:	|      lea 12(sp),sp
    fe74:	|      tst.w d0
    fe76:	|  ,-- bne.s fe7c <builtIn_setFont+0xc4>
    fe78:	|  |   moveq #1,d0
    fe7a:	+--|-- bra.s fe94 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fe7c:	|  '-> move.l 16(sp),12(sp)
    fe82:	|      move.l 1caf2 <SysBase>,d0
    fe88:	|      movea.l d0,a6
    fe8a:	|      movea.l 12(sp),a1
    fe8e:	|      jsr -690(a6)

    return BR_CONTINUE;
    fe92:	|      moveq #2,d0
}
    fe94:	'----> movea.l (sp)+,a6
    fe96:	       lea 16(sp),sp
    fe9a:	       rts

0000fe9c <builtIn_inFont>:

builtIn(inFont)
{
    fe9c:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fe9e:	       movea.l 12(sp),a0
    fea2:	       move.l 24(a0),d0
    fea6:	       move.l d0,-(sp)
    fea8:	       jsr 14d9a <getTextFromAnyVar>
    feae:	       addq.l #4,sp
    feb0:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    feb2:	   ,-- bne.s feb8 <builtIn_inFont+0x1c>
    feb4:	   |   moveq #1,d0
    feb6:	,--|-- bra.s feee <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    feb8:	|  '-> moveq #24,d0
    feba:	|      add.l 12(sp),d0
    febe:	|      move.l d0,-(sp)
    fec0:	|      jsr 15148 <trimStack>
    fec6:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fec8:	|      move.l (sp),-(sp)
    feca:	|      jsr 155ea <isInFont>
    fed0:	|      addq.l #4,sp
    fed2:	|      movea.w d0,a0
    fed4:	|      moveq #28,d0
    fed6:	|      add.l 12(sp),d0
    feda:	|      move.l a0,-(sp)
    fedc:	|      pea 1 <_start+0x1>
    fee0:	|      move.l d0,-(sp)
    fee2:	|      jsr 150b6 <setVariable>
    fee8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    feec:	|      moveq #2,d0
}
    feee:	'----> addq.l #4,sp
    fef0:	       rts

0000fef2 <builtIn_pasteString>:

builtIn(pasteString)
{
    fef2:	       lea -16(sp),sp
    fef6:	       move.l a6,-(sp)
    fef8:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fefa:	       movea.l 32(sp),a0
    fefe:	       move.l 24(a0),d0
    ff02:	       move.l d0,-(sp)
    ff04:	       jsr 14d9a <getTextFromAnyVar>
    ff0a:	       addq.l #4,sp
    ff0c:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff10:	       moveq #24,d0
    ff12:	       add.l 32(sp),d0
    ff16:	       move.l d0,-(sp)
    ff18:	       jsr 15148 <trimStack>
    ff1e:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff20:	       movea.l 32(sp),a0
    ff24:	       move.l 24(a0),d0
    ff28:	       move.l d0,-(sp)
    ff2a:	       pea 1 <_start+0x1>
    ff2e:	       lea 20(sp),a0
    ff32:	       move.l a0,-(sp)
    ff34:	       jsr 147c4 <getValueType>
    ff3a:	       lea 12(sp),sp
    ff3e:	       tst.w d0
    ff40:	   ,-- bne.s ff48 <builtIn_pasteString+0x56>
    ff42:	   |   moveq #1,d0
    ff44:	,--|-- bra.w ffea <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff48:	|  '-> moveq #24,d0
    ff4a:	|      add.l 32(sp),d0
    ff4e:	|      move.l d0,-(sp)
    ff50:	|      jsr 15148 <trimStack>
    ff56:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff58:	|      movea.l 32(sp),a0
    ff5c:	|      move.l 24(a0),d0
    ff60:	|      move.l d0,-(sp)
    ff62:	|      pea 1 <_start+0x1>
    ff66:	|      lea 16(sp),a0
    ff6a:	|      move.l a0,-(sp)
    ff6c:	|      jsr 147c4 <getValueType>
    ff72:	|      lea 12(sp),sp
    ff76:	|      tst.w d0
    ff78:	|  ,-- bne.s ff7e <builtIn_pasteString+0x8c>
    ff7a:	|  |   moveq #1,d0
    ff7c:	+--|-- bra.s ffea <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff7e:	|  '-> moveq #24,d0
    ff80:	|      add.l 32(sp),d0
    ff84:	|      move.l d0,-(sp)
    ff86:	|      jsr 15148 <trimStack>
    ff8c:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
    ff8e:	|      move.l 8(sp),d0
    ff92:	|      cmpi.l #65535,d0
    ff98:	|  ,-- bne.s ffb8 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
    ff9a:	|  |   move.l 1ca46 <winWidth>,d2
    ffa0:	|  |   move.l 20(sp),-(sp)
    ffa4:	|  |   jsr 158ae <stringWidth>
    ffaa:	|  |   addq.l #4,sp
    ffac:	|  |   move.l d2,d1
    ffae:	|  |   sub.l d0,d1
    ffb0:	|  |   move.l d1,d0
    ffb2:	|  |   lsr.l #1,d0
    ffb4:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    ffb8:	|  '-> move.l 12(sp),d1
    ffbc:	|      move.l 8(sp),d0
    ffc0:	|      move.l d1,-(sp)
    ffc2:	|      move.l d0,-(sp)
    ffc4:	|      move.l 28(sp),-(sp)
    ffc8:	|      jsr 157d0 <pasteStringToBackdrop>
    ffce:	|      lea 12(sp),sp
    FreeVec(newText); 
    ffd2:	|      move.l 20(sp),16(sp)
    ffd8:	|      move.l 1caf2 <SysBase>,d0
    ffde:	|      movea.l d0,a6
    ffe0:	|      movea.l 16(sp),a1
    ffe4:	|      jsr -690(a6)
    return BR_CONTINUE;
    ffe8:	|      moveq #2,d0
}
    ffea:	'----> move.l (sp)+,d2
    ffec:	       movea.l (sp)+,a6
    ffee:	       lea 16(sp),sp
    fff2:	       rts

0000fff4 <builtIn_anim>:

builtIn(anim)
{
    fff4:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fff8:	       moveq #1,d0
    fffa:	       cmp.l 16(sp),d0
    fffe:	   ,-- blt.s 10014 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10000:	   |   pea 19b06 <talk.c.490538ff+0xf7>
   10006:	   |   jsr 172a4 <KPrintF>
   1000c:	   |   addq.l #4,sp
		return BR_ERROR;
   1000e:	   |   moveq #1,d0
   10010:	,--|-- bra.w 100a2 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10014:	|  '-> moveq #24,d1
   10016:	|      add.l 20(sp),d1
   1001a:	|      move.l 16(sp),d0
   1001e:	|      subq.l #1,d0
   10020:	|      move.l d1,-(sp)
   10022:	|      move.l d0,-(sp)
   10024:	|      jsr 9626 <createPersonaAnim>
   1002a:	|      addq.l #8,sp
   1002c:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10030:	|      movea.l 20(sp),a0
   10034:	|      move.l 24(a0),d0
   10038:	|      move.l d0,-(sp)
   1003a:	|      pea 5 <_start+0x5>
   1003e:	|      lea 8(sp),a0
   10042:	|      move.l a0,-(sp)
   10044:	|      jsr 147c4 <getValueType>
   1004a:	|      lea 12(sp),sp
   1004e:	|      tst.w d0
   10050:	|  ,-- bne.s 10056 <builtIn_anim+0x62>
   10052:	|  |   moveq #1,d0
   10054:	+--|-- bra.s 100a2 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10056:	|  '-> moveq #24,d0
   10058:	|      add.l 20(sp),d0
   1005c:	|      move.l d0,-(sp)
   1005e:	|      jsr 15148 <trimStack>
   10064:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10066:	|      move.l (sp),d0
   10068:	|      move.l d0,-(sp)
   1006a:	|      jsr 15fc6 <loadBankForAnim>
   10070:	|      addq.l #4,sp
   10072:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10076:	|  ,-- bne.s 1007c <builtIn_anim+0x88>
   10078:	|  |   moveq #1,d0
   1007a:	+--|-- bra.s 100a2 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   1007c:	|  '-> move.l 4(sp),-(sp)
   10080:	|      move.l 12(sp),-(sp)
   10084:	|      jsr b532 <setBankFile>
   1008a:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   1008c:	|      moveq #28,d0
   1008e:	|      add.l 20(sp),d0
   10092:	|      move.l 8(sp),-(sp)
   10096:	|      move.l d0,-(sp)
   10098:	|      jsr 15072 <newAnimationVariable>
   1009e:	|      addq.l #8,sp
	return BR_CONTINUE;
   100a0:	|      moveq #2,d0
}
   100a2:	'----> lea 12(sp),sp
   100a6:	       rts

000100a8 <builtIn_costume>:

builtIn(costume)
{
   100a8:	          lea -32(sp),sp
   100ac:	          move.l a6,-(sp)
   100ae:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   100b0:	          moveq #8,d0
   100b2:	          move.l d0,32(sp)
   100b6:	          clr.l 28(sp)
   100ba:	          move.l 1caf2 <SysBase>,d0
   100c0:	          movea.l d0,a6
   100c2:	          move.l 32(sp),d0
   100c6:	          move.l 28(sp),d1
   100ca:	          jsr -684(a6)
   100ce:	          move.l d0,24(sp)
   100d2:	          move.l 24(sp),d0
   100d6:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   100da:	      ,-- bne.s 100e2 <builtIn_costume+0x3a>
   100dc:	      |   moveq #1,d0
   100de:	,-----|-- bra.w 101ca <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   100e2:	|     '-> move.l 44(sp),d0
   100e6:	|         pea 3 <_start+0x3>
   100ea:	|         move.l d0,-(sp)
   100ec:	|         jsr 17cae <__divsi3>
   100f2:	|         addq.l #8,sp
   100f4:	|         movea.l 20(sp),a0
   100f8:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   100fc:	|         tst.l 44(sp)
   10100:	|     ,-- beq.s 10116 <builtIn_costume+0x6e>
   10102:	|     |   movea.l 20(sp),a0
   10106:	|     |   move.l 4(a0),d1
   1010a:	|     |   move.l d1,d0
   1010c:	|     |   add.l d0,d0
   1010e:	|     |   add.l d1,d0
   10110:	|     |   cmp.l 44(sp),d0
   10114:	|  ,--|-- beq.s 1012a <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10116:	|  |  '-> pea 19b40 <talk.c.490538ff+0x131>
   1011c:	|  |      jsr 172a4 <KPrintF>
   10122:	|  |      addq.l #4,sp
        return BR_ERROR;
   10124:	|  |      moveq #1,d0
   10126:	+--|----- bra.w 101ca <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   1012a:	|  '----> move.l 44(sp),d0
   1012e:	|         add.l d0,d0
   10130:	|         add.l d0,d0
   10132:	|         move.l d0,16(sp)
   10136:	|         clr.l 12(sp)
   1013a:	|         move.l 1caf2 <SysBase>,d0
   10140:	|         movea.l d0,a6
   10142:	|         move.l 16(sp),d0
   10146:	|         move.l 12(sp),d1
   1014a:	|         jsr -684(a6)
   1014e:	|         move.l d0,8(sp)
   10152:	|         move.l 8(sp),d0
   10156:	|         movea.l 20(sp),a0
   1015a:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   1015c:	|         movea.l 20(sp),a0
   10160:	|         move.l (a0),d0
   10162:	|     ,-- bne.s 10168 <builtIn_costume+0xc0>
   10164:	|     |   moveq #1,d0
   10166:	+-----|-- bra.s 101ca <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10168:	|     '-> move.l 44(sp),d0
   1016c:	|         subq.l #1,d0
   1016e:	|         move.l d0,36(sp)
   10172:	|     ,-- bra.s 101ae <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10174:	|  ,--|-> movea.l 48(sp),a0
   10178:	|  |  |   move.l 24(a0),d0
   1017c:	|  |  |   movea.l 20(sp),a0
   10180:	|  |  |   movea.l (a0),a0
   10182:	|  |  |   move.l 36(sp),d1
   10186:	|  |  |   add.l d1,d1
   10188:	|  |  |   add.l d1,d1
   1018a:	|  |  |   lea (0,a0,d1.l),a2
   1018e:	|  |  |   move.l d0,-(sp)
   10190:	|  |  |   jsr 14c9c <getAnimationFromVar>
   10196:	|  |  |   addq.l #4,sp
   10198:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1019a:	|  |  |   moveq #24,d0
   1019c:	|  |  |   add.l 48(sp),d0
   101a0:	|  |  |   move.l d0,-(sp)
   101a2:	|  |  |   jsr 15148 <trimStack>
   101a8:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   101aa:	|  |  |   subq.l #1,36(sp)
   101ae:	|  |  '-> tst.l 36(sp)
   101b2:	|  '----- bge.s 10174 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   101b4:	|         moveq #28,d0
   101b6:	|         add.l 48(sp),d0
   101ba:	|         move.l 20(sp),-(sp)
   101be:	|         move.l d0,-(sp)
   101c0:	|         jsr 15094 <newCostumeVariable>
   101c6:	|         addq.l #8,sp
    return BR_CONTINUE;
   101c8:	|         moveq #2,d0
}
   101ca:	'-------> movea.l (sp)+,a2
   101cc:	          movea.l (sp)+,a6
   101ce:	          lea 32(sp),sp
   101d2:	          rts

000101d4 <builtIn_launch>:

builtIn(launch)
{
   101d4:	          lea -20(sp),sp
   101d8:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101da:	          movea.l 32(sp),a0
   101de:	          move.l 24(a0),d0
   101e2:	          move.l d0,-(sp)
   101e4:	          jsr 14d9a <getTextFromAnyVar>
   101ea:	          addq.l #4,sp
   101ec:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   101f0:	      ,-- bne.s 101f8 <builtIn_launch+0x24>
   101f2:	      |   moveq #1,d0
   101f4:	,-----|-- bra.w 10326 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   101f8:	|     '-> move.l 20(sp),-(sp)
   101fc:	|         jsr 2fe <encodeFilename>
   10202:	|         addq.l #4,sp
   10204:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10208:	|         moveq #24,d0
   1020a:	|         add.l 32(sp),d0
   1020e:	|         move.l d0,-(sp)
   10210:	|         jsr 15148 <trimStack>
   10216:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10218:	|         movea.l 20(sp),a0
   1021c:	|         move.b (a0),d0
   1021e:	|         cmpi.b #104,d0
   10222:	|  ,----- bne.s 1028c <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10224:	|  |      movea.l 20(sp),a0
   10228:	|  |      addq.l #1,a0
   1022a:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   1022c:	|  |      cmpi.b #116,d0
   10230:	|  +----- bne.s 1028c <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10232:	|  |      movea.l 20(sp),a0
   10236:	|  |      addq.l #2,a0
   10238:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1023a:	|  |      cmpi.b #116,d0
   1023e:	|  +----- bne.s 1028c <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10240:	|  |      movea.l 20(sp),a0
   10244:	|  |      addq.l #3,a0
   10246:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10248:	|  |      cmpi.b #112,d0
   1024c:	|  +----- bne.s 1028c <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1024e:	|  |      movea.l 20(sp),a0
   10252:	|  |      addq.l #4,a0
   10254:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10256:	|  |      cmpi.b #58,d0
   1025a:	|  |  ,-- beq.s 10278 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1025c:	|  |  |   movea.l 20(sp),a0
   10260:	|  |  |   addq.l #4,a0
   10262:	|  |  |   move.b (a0),d0
   10264:	|  |  |   cmpi.b #115,d0
   10268:	|  +--|-- bne.s 1028c <builtIn_launch+0xb8>
   1026a:	|  |  |   movea.l 20(sp),a0
   1026e:	|  |  |   addq.l #5,a0
   10270:	|  |  |   move.b (a0),d0
   10272:	|  |  |   cmpi.b #58,d0
   10276:	|  +--|-- bne.s 1028c <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10278:	|  |  '-> move.l 20(sp),-(sp)
   1027c:	|  |      jsr b8 <copyString>
   10282:	|  |      addq.l #4,sp
   10284:	|  |      move.l d0,1cbb0 <launchMe>
   1028a:	|  |  ,-- bra.s 102de <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1028c:	|  '--|-> move.l 1ca5a <gamePath>,d0
   10292:	|     |   pea 19b8b <talk.c.490538ff+0x17c>
   10298:	|     |   move.l d0,-(sp)
   1029a:	|     |   jsr 13cf0 <joinStrings>
   102a0:	|     |   addq.l #8,sp
   102a2:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   102a6:	|     |   move.l 16(sp),-(sp)
   102aa:	|     |   move.l 16(sp),-(sp)
   102ae:	|     |   jsr 13cf0 <joinStrings>
   102b4:	|     |   addq.l #8,sp
   102b6:	|     |   move.l d0,1cbb0 <launchMe>
        FreeVec(newText);
   102bc:	|     |   move.l 16(sp),8(sp)
   102c2:	|     |   move.l 1caf2 <SysBase>,d0
   102c8:	|     |   movea.l d0,a6
   102ca:	|     |   movea.l 8(sp),a1
   102ce:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   102d2:	|     |   move.l 1cbb0 <launchMe>,d0
   102d8:	|     +-- bne.s 102de <builtIn_launch+0x10a>
   102da:	|     |   moveq #1,d0
   102dc:	+-----|-- bra.s 10326 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   102de:	|     '-> move.l 20(sp),4(sp)
   102e4:	|         move.l 1caf2 <SysBase>,d0
   102ea:	|         movea.l d0,a6
   102ec:	|         movea.l 4(sp),a1
   102f0:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   102f4:	|         clr.l -(sp)
   102f6:	|         jsr 492a <setGraphicsWindow>
   102fc:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   102fe:	|         moveq #28,d0
   10300:	|         add.l 32(sp),d0
   10304:	|         pea 1 <_start+0x1>
   10308:	|         pea 1 <_start+0x1>
   1030c:	|         move.l d0,-(sp)
   1030e:	|         jsr 150b6 <setVariable>
   10314:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10318:	|         moveq #28,d0
   1031a:	|         add.l 32(sp),d0
   1031e:	|         move.l d0,1cbb4 <launchResult>

    return BR_KEEP_AND_PAUSE;
   10324:	|         moveq #0,d0
}
   10326:	'-------> movea.l (sp)+,a6
   10328:	          lea 20(sp),sp
   1032c:	          rts

0001032e <builtIn_pause>:

builtIn(pause)
{
   1032e:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10330:	       movea.l 12(sp),a0
   10334:	       move.l 24(a0),d0
   10338:	       move.l d0,-(sp)
   1033a:	       pea 1 <_start+0x1>
   1033e:	       move.l sp,d0
   10340:	       addq.l #8,d0
   10342:	       move.l d0,-(sp)
   10344:	       jsr 147c4 <getValueType>
   1034a:	       lea 12(sp),sp
   1034e:	       tst.w d0
   10350:	   ,-- bne.s 10356 <builtIn_pause+0x28>
   10352:	   |   moveq #1,d0
   10354:	,--|-- bra.s 10384 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10356:	|  '-> moveq #24,d0
   10358:	|      add.l 12(sp),d0
   1035c:	|      move.l d0,-(sp)
   1035e:	|      jsr 15148 <trimStack>
   10364:	|      addq.l #4,sp
	if (theTime > 0) {
   10366:	|      move.l (sp),d0
   10368:	|  ,-- ble.s 10382 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1036a:	|  |   move.l (sp),d0
   1036c:	|  |   subq.l #1,d0
   1036e:	|  |   movea.l 12(sp),a0
   10372:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10376:	|  |   movea.l 12(sp),a0
   1037a:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1037e:	|  |   moveq #0,d0
   10380:	+--|-- bra.s 10384 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10382:	|  '-> moveq #2,d0
}
   10384:	'----> addq.l #4,sp
   10386:	       rts

00010388 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10388:	jsr 50be <completeTimers>
	return BR_CONTINUE;
   1038e:	moveq #2,d0
}
   10390:	rts

00010392 <builtIn_callEvent>:

builtIn(callEvent)
{
   10392:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10396:	       movea.l 20(sp),a0
   1039a:	       move.l 24(a0),d0
   1039e:	       move.l d0,-(sp)
   103a0:	       pea 7 <_start+0x7>
   103a4:	       lea 8(sp),a0
   103a8:	       move.l a0,-(sp)
   103aa:	       jsr 147c4 <getValueType>
   103b0:	       lea 12(sp),sp
   103b4:	       tst.w d0
   103b6:	   ,-- bne.s 103be <builtIn_callEvent+0x2c>
   103b8:	   |   moveq #1,d0
   103ba:	,--|-- bra.w 10454 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   103be:	|  '-> moveq #24,d0
   103c0:	|      add.l 20(sp),d0
   103c4:	|      move.l d0,-(sp)
   103c6:	|      jsr 15148 <trimStack>
   103cc:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103ce:	|      movea.l 20(sp),a0
   103d2:	|      move.l 24(a0),d0
   103d6:	|      move.l d0,-(sp)
   103d8:	|      pea 7 <_start+0x7>
   103dc:	|      moveq #12,d0
   103de:	|      add.l sp,d0
   103e0:	|      move.l d0,-(sp)
   103e2:	|      jsr 147c4 <getValueType>
   103e8:	|      lea 12(sp),sp
   103ec:	|      tst.w d0
   103ee:	|  ,-- bne.s 103f4 <builtIn_callEvent+0x62>
   103f0:	|  |   moveq #1,d0
   103f2:	+--|-- bra.s 10454 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   103f4:	|  '-> moveq #24,d0
   103f6:	|      add.l 20(sp),d0
   103fa:	|      move.l d0,-(sp)
   103fc:	|      jsr 15148 <trimStack>
   10402:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10404:	|      move.l (sp),d1
   10406:	|      move.l 4(sp),d0
   1040a:	|      move.l d1,-(sp)
   1040c:	|      move.l d0,-(sp)
   1040e:	|      jsr d50c <getCombinationFunction>
   10414:	|      addq.l #8,sp
   10416:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1041a:	|  ,-- beq.s 1043a <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1041c:	|  |   moveq #28,d0
   1041e:	|  |   add.l 20(sp),d0
   10422:	|  |   move.l 8(sp),-(sp)
   10426:	|  |   pea 2 <_start+0x2>
   1042a:	|  |   move.l d0,-(sp)
   1042c:	|  |   jsr 150b6 <setVariable>
   10432:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10436:	|  |   moveq #4,d0
   10438:	+--|-- bra.s 10454 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   1043a:	|  '-> moveq #28,d0
   1043c:	|      add.l 20(sp),d0
   10440:	|      clr.l -(sp)
   10442:	|      pea 1 <_start+0x1>
   10446:	|      move.l d0,-(sp)
   10448:	|      jsr 150b6 <setVariable>
   1044e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10452:	|      moveq #2,d0
}
   10454:	'----> lea 12(sp),sp
   10458:	       rts

0001045a <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   1045a:	move.w #1,1cbc0 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10462:	moveq #2,d0
}
   10464:	rts

00010466 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10466:	moveq #24,d0
   10468:	add.l 8(sp),d0
   1046c:	move.l d0,-(sp)
   1046e:	jsr 15148 <trimStack>
   10474:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10476:	pea 19b8d <talk.c.490538ff+0x17e>
   1047c:	jsr 172a4 <KPrintF>
   10482:	addq.l #4,sp
	return BR_CONTINUE;
   10484:	moveq #2,d0
}
   10486:	rts

00010488 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10488:	pea 19b8d <talk.c.490538ff+0x17e>
   1048e:	jsr 172a4 <KPrintF>
   10494:	addq.l #4,sp
	return BR_CONTINUE;
   10496:	moveq #2,d0
}
   10498:	rts

0001049a <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1049a:	pea 19b8d <talk.c.490538ff+0x17e>
   104a0:	jsr 172a4 <KPrintF>
   104a6:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   104a8:	moveq #2,d0
}
   104aa:	rts

000104ac <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   104ac:	pea 19b8d <talk.c.490538ff+0x17e>
   104b2:	jsr 172a4 <KPrintF>
   104b8:	addq.l #4,sp
	return BR_CONTINUE;
   104ba:	moveq #2,d0
}
   104bc:	rts

000104be <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104be:	pea 19b8d <talk.c.490538ff+0x17e>
   104c4:	jsr 172a4 <KPrintF>
   104ca:	addq.l #4,sp
	return BR_CONTINUE;
   104cc:	moveq #2,d0
}
   104ce:	rts

000104d0 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104d0:	pea 19b8d <talk.c.490538ff+0x17e>
   104d6:	jsr 172a4 <KPrintF>
   104dc:	addq.l #4,sp
	return BR_CONTINUE;
   104de:	moveq #2,d0
}
   104e0:	rts

000104e2 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   104e2:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104e6:	       movea.l 20(sp),a0
   104ea:	       move.l 24(a0),d0
   104ee:	       move.l d0,-(sp)
   104f0:	       pea 1 <_start+0x1>
   104f4:	       moveq #16,d0
   104f6:	       add.l sp,d0
   104f8:	       move.l d0,-(sp)
   104fa:	       jsr 147c4 <getValueType>
   10500:	       lea 12(sp),sp
   10504:	       tst.w d0
   10506:	   ,-- bne.s 1050e <builtIn_startMusic+0x2c>
   10508:	   |   moveq #1,d0
   1050a:	,--|-- bra.w 105ae <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1050e:	|  '-> moveq #24,d0
   10510:	|      add.l 20(sp),d0
   10514:	|      move.l d0,-(sp)
   10516:	|      jsr 15148 <trimStack>
   1051c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1051e:	|      movea.l 20(sp),a0
   10522:	|      move.l 24(a0),d0
   10526:	|      move.l d0,-(sp)
   10528:	|      pea 1 <_start+0x1>
   1052c:	|      moveq #12,d0
   1052e:	|      add.l sp,d0
   10530:	|      move.l d0,-(sp)
   10532:	|      jsr 147c4 <getValueType>
   10538:	|      lea 12(sp),sp
   1053c:	|      tst.w d0
   1053e:	|  ,-- bne.s 10544 <builtIn_startMusic+0x62>
   10540:	|  |   moveq #1,d0
   10542:	+--|-- bra.s 105ae <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10544:	|  '-> moveq #24,d0
   10546:	|      add.l 20(sp),d0
   1054a:	|      move.l d0,-(sp)
   1054c:	|      jsr 15148 <trimStack>
   10552:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10554:	|      movea.l 20(sp),a0
   10558:	|      move.l 24(a0),d0
   1055c:	|      move.l d0,-(sp)
   1055e:	|      pea 5 <_start+0x5>
   10562:	|      lea 8(sp),a0
   10566:	|      move.l a0,-(sp)
   10568:	|      jsr 147c4 <getValueType>
   1056e:	|      lea 12(sp),sp
   10572:	|      tst.w d0
   10574:	|  ,-- bne.s 1057a <builtIn_startMusic+0x98>
   10576:	|  |   moveq #1,d0
   10578:	+--|-- bra.s 105ae <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1057a:	|  '-> moveq #24,d0
   1057c:	|      add.l 20(sp),d0
   10580:	|      move.l d0,-(sp)
   10582:	|      jsr 15148 <trimStack>
   10588:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   1058a:	|      movea.l 8(sp),a0
   1058e:	|      move.l 4(sp),d1
   10592:	|      move.l (sp),d0
   10594:	|      move.l a0,-(sp)
   10596:	|      move.l d1,-(sp)
   10598:	|      move.l d0,-(sp)
   1059a:	|      jsr d10e <playMOD>
   105a0:	|      lea 12(sp),sp
   105a4:	|      tst.w d0
   105a6:	|  ,-- bne.s 105ac <builtIn_startMusic+0xca>
   105a8:	|  |   moveq #2,d0
   105aa:	+--|-- bra.s 105ae <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   105ac:	|  '-> moveq #2,d0
}
   105ae:	'----> lea 12(sp),sp
   105b2:	       rts

000105b4 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   105b4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105b6:	       movea.l 12(sp),a0
   105ba:	       move.l 24(a0),d0
   105be:	       move.l d0,-(sp)
   105c0:	       pea 1 <_start+0x1>
   105c4:	       move.l sp,d0
   105c6:	       addq.l #8,d0
   105c8:	       move.l d0,-(sp)
   105ca:	       jsr 147c4 <getValueType>
   105d0:	       lea 12(sp),sp
   105d4:	       tst.w d0
   105d6:	   ,-- bne.s 105dc <builtIn_stopMusic+0x28>
   105d8:	   |   moveq #1,d0
   105da:	,--|-- bra.s 105fa <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   105dc:	|  '-> moveq #24,d0
   105de:	|      add.l 12(sp),d0
   105e2:	|      move.l d0,-(sp)
   105e4:	|      jsr 15148 <trimStack>
   105ea:	|      addq.l #4,sp
	stopMOD (v);
   105ec:	|      move.l (sp),d0
   105ee:	|      move.l d0,-(sp)
   105f0:	|      jsr d1aa <stopMOD>
   105f6:	|      addq.l #4,sp
	return BR_CONTINUE;
   105f8:	|      moveq #2,d0
}
   105fa:	'----> addq.l #4,sp
   105fc:	       rts

000105fe <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   105fe:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10600:	       movea.l 16(sp),a0
   10604:	       move.l 24(a0),d0
   10608:	       move.l d0,-(sp)
   1060a:	       pea 1 <_start+0x1>
   1060e:	       move.l sp,d0
   10610:	       addq.l #8,d0
   10612:	       move.l d0,-(sp)
   10614:	       jsr 147c4 <getValueType>
   1061a:	       lea 12(sp),sp
   1061e:	       tst.w d0
   10620:	   ,-- bne.s 10626 <builtIn_setMusicVolume+0x28>
   10622:	   |   moveq #1,d0
   10624:	,--|-- bra.s 10680 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10626:	|  '-> moveq #24,d0
   10628:	|      add.l 16(sp),d0
   1062c:	|      move.l d0,-(sp)
   1062e:	|      jsr 15148 <trimStack>
   10634:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10636:	|      movea.l 16(sp),a0
   1063a:	|      move.l 24(a0),d0
   1063e:	|      move.l d0,-(sp)
   10640:	|      pea 1 <_start+0x1>
   10644:	|      moveq #12,d0
   10646:	|      add.l sp,d0
   10648:	|      move.l d0,-(sp)
   1064a:	|      jsr 147c4 <getValueType>
   10650:	|      lea 12(sp),sp
   10654:	|      tst.w d0
   10656:	|  ,-- bne.s 1065c <builtIn_setMusicVolume+0x5e>
   10658:	|  |   moveq #1,d0
   1065a:	+--|-- bra.s 10680 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1065c:	|  '-> moveq #24,d0
   1065e:	|      add.l 16(sp),d0
   10662:	|      move.l d0,-(sp)
   10664:	|      jsr 15148 <trimStack>
   1066a:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   1066c:	|      move.l (sp),d1
   1066e:	|      move.l 4(sp),d0
   10672:	|      move.l d1,-(sp)
   10674:	|      move.l d0,-(sp)
   10676:	|      jsr d190 <setMusicVolume>
   1067c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1067e:	|      moveq #2,d0
}
   10680:	'----> addq.l #8,sp
   10682:	       rts

00010684 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10684:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10686:	       movea.l 12(sp),a0
   1068a:	       move.l 24(a0),d0
   1068e:	       move.l d0,-(sp)
   10690:	       pea 1 <_start+0x1>
   10694:	       move.l sp,d0
   10696:	       addq.l #8,d0
   10698:	       move.l d0,-(sp)
   1069a:	       jsr 147c4 <getValueType>
   106a0:	       lea 12(sp),sp
   106a4:	       tst.w d0
   106a6:	   ,-- bne.s 106ac <builtIn_setDefaultMusicVolume+0x28>
   106a8:	   |   moveq #1,d0
   106aa:	,--|-- bra.s 106ca <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   106ac:	|  '-> moveq #24,d0
   106ae:	|      add.l 12(sp),d0
   106b2:	|      move.l d0,-(sp)
   106b4:	|      jsr 15148 <trimStack>
   106ba:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   106bc:	|      move.l (sp),d0
   106be:	|      move.l d0,-(sp)
   106c0:	|      jsr d174 <setDefaultMusicVolume>
   106c6:	|      addq.l #4,sp
	return BR_CONTINUE;
   106c8:	|      moveq #2,d0
}
   106ca:	'----> addq.l #4,sp
   106cc:	       rts

000106ce <builtIn_playSound>:

builtIn(playSound)
{
   106ce:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106d0:	       movea.l 12(sp),a0
   106d4:	       move.l 24(a0),d0
   106d8:	       move.l d0,-(sp)
   106da:	       pea 5 <_start+0x5>
   106de:	       move.l sp,d0
   106e0:	       addq.l #8,d0
   106e2:	       move.l d0,-(sp)
   106e4:	       jsr 147c4 <getValueType>
   106ea:	       lea 12(sp),sp
   106ee:	       tst.w d0
   106f0:	   ,-- bne.s 106f6 <builtIn_playSound+0x28>
   106f2:	   |   moveq #1,d0
   106f4:	,--|-- bra.s 1071e <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   106f6:	|  '-> moveq #24,d0
   106f8:	|      add.l 12(sp),d0
   106fc:	|      move.l d0,-(sp)
   106fe:	|      jsr 15148 <trimStack>
   10704:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10706:	|      move.l (sp),d0
   10708:	|      clr.l -(sp)
   1070a:	|      move.l d0,-(sp)
   1070c:	|      jsr d198 <startSound>
   10712:	|      addq.l #8,sp
   10714:	|      tst.w d0
   10716:	|  ,-- bne.s 1071c <builtIn_playSound+0x4e>
   10718:	|  |   moveq #2,d0
   1071a:	+--|-- bra.s 1071e <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1071c:	|  '-> moveq #2,d0
}
   1071e:	'----> addq.l #4,sp
   10720:	       rts

00010722 <builtIn_loopSound>:

builtIn(loopSound)
{
   10722:	             lea -28(sp),sp
   10726:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10728:	             tst.l 36(sp)
   1072c:	         ,-- bgt.s 10742 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1072e:	         |   pea 19bb0 <talk.c.490538ff+0x1a1>
   10734:	         |   jsr 172a4 <KPrintF>
   1073a:	         |   addq.l #4,sp
		return BR_ERROR;
   1073c:	         |   moveq #1,d0
   1073e:	,--------|-- bra.w 108fe <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10742:	|        '-> moveq #1,d0
   10744:	|            cmp.l 36(sp),d0
   10748:	|     ,----- blt.s 107a4 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   1074a:	|     |      movea.l 40(sp),a0
   1074e:	|     |      move.l 24(a0),d0
   10752:	|     |      move.l d0,-(sp)
   10754:	|     |      pea 5 <_start+0x5>
   10758:	|     |      lea 16(sp),a0
   1075c:	|     |      move.l a0,-(sp)
   1075e:	|     |      jsr 147c4 <getValueType>
   10764:	|     |      lea 12(sp),sp
   10768:	|     |      tst.w d0
   1076a:	|     |  ,-- bne.s 10772 <builtIn_loopSound+0x50>
   1076c:	|     |  |   moveq #1,d0
   1076e:	+-----|--|-- bra.w 108fe <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10772:	|     |  '-> moveq #24,d0
   10774:	|     |      add.l 40(sp),d0
   10778:	|     |      move.l d0,-(sp)
   1077a:	|     |      jsr 15148 <trimStack>
   10780:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10782:	|     |      move.l 8(sp),d0
   10786:	|     |      pea 1 <_start+0x1>
   1078a:	|     |      move.l d0,-(sp)
   1078c:	|     |      jsr d198 <startSound>
   10792:	|     |      addq.l #8,sp
   10794:	|     |      tst.w d0
   10796:	|     |  ,-- bne.s 1079e <builtIn_loopSound+0x7c>
   10798:	|     |  |   moveq #2,d0
   1079a:	+-----|--|-- bra.w 108fe <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1079e:	|     |  '-> moveq #2,d0
   107a0:	+-----|----- bra.w 108fe <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   107a4:	|     '----> moveq #2,d1
   107a6:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   107aa:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   107ae:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   107b2:	|            movea.l 40(sp),a0
   107b6:	|            movea.l 24(a0),a0
   107ba:	|            move.l (a0),d0
   107bc:	|            moveq #5,d1
   107be:	|            cmp.l d0,d1
   107c0:	|  ,-------- beq.w 10898 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   107c4:	|  |         movea.l 40(sp),a0
   107c8:	|  |         move.l 24(a0),d0
   107cc:	|  |         move.l d0,-(sp)
   107ce:	|  |         pea 1 <_start+0x1>
   107d2:	|  |         lea 12(sp),a0
   107d6:	|  |         move.l a0,-(sp)
   107d8:	|  |         jsr 147c4 <getValueType>
   107de:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   107e2:	|  |         moveq #24,d0
   107e4:	|  |         add.l 40(sp),d0
   107e8:	|  |         move.l d0,-(sp)
   107ea:	|  |         jsr 15148 <trimStack>
   107f0:	|  |         addq.l #4,sp
			numParams--;
   107f2:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   107f6:	|  +-------- bra.w 10898 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   107fa:	|  |  ,----> movea.l 40(sp),a0
   107fe:	|  |  |      move.l 24(a0),d0
   10802:	|  |  |      move.l d0,-(sp)
   10804:	|  |  |      pea 5 <_start+0x5>
   10808:	|  |  |      lea 16(sp),a0
   1080c:	|  |  |      move.l a0,-(sp)
   1080e:	|  |  |      jsr 147c4 <getValueType>
   10814:	|  |  |      lea 12(sp),sp
   10818:	|  |  |      tst.w d0
   1081a:	|  |  |  ,-- bne.s 10830 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1081c:	|  |  |  |   pea 19bee <talk.c.490538ff+0x1df>
   10822:	|  |  |  |   jsr 172a4 <KPrintF>
   10828:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   1082a:	|  |  |  |   moveq #1,d0
   1082c:	+--|--|--|-- bra.w 108fe <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10830:	|  |  |  '-> moveq #20,d0
   10832:	|  |  |      move.l d0,20(sp)
   10836:	|  |  |      clr.l 16(sp)
   1083a:	|  |  |      move.l 1caf2 <SysBase>,d0
   10840:	|  |  |      movea.l d0,a6
   10842:	|  |  |      move.l 20(sp),d0
   10846:	|  |  |      move.l 16(sp),d1
   1084a:	|  |  |      jsr -684(a6)
   1084e:	|  |  |      move.l d0,12(sp)
   10852:	|  |  |      move.l 12(sp),d0
   10856:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   1085a:	|  |  |  ,-- bne.s 10862 <builtIn_loopSound+0x140>
   1085c:	|  |  |  |   moveq #1,d0
   1085e:	+--|--|--|-- bra.w 108fe <builtIn_loopSound+0x1dc>

			s->next = old;
   10862:	|  |  |  '-> movea.l 28(sp),a0
   10866:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   1086c:	|  |  |      movea.l 28(sp),a0
   10870:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10874:	|  |  |      move.l 8(sp),d0
   10878:	|  |  |      movea.l 28(sp),a0
   1087c:	|  |  |      move.l d0,(a0)
			old = s;
   1087e:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10884:	|  |  |      moveq #24,d0
   10886:	|  |  |      add.l 40(sp),d0
   1088a:	|  |  |      move.l d0,-(sp)
   1088c:	|  |  |      jsr 15148 <trimStack>
   10892:	|  |  |      addq.l #4,sp
			numParams--;
   10894:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10898:	|  '--|----> tst.l 36(sp)
   1089c:	|     '----- bne.w 107fa <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   108a0:	|        ,-- bra.s 108ac <builtIn_loopSound+0x18a>
   108a2:	|     ,--|-> movea.l 28(sp),a0
   108a6:	|     |  |   move.l 4(a0),28(sp)
   108ac:	|     |  '-> movea.l 28(sp),a0
   108b0:	|     |      move.l 4(a0),d0
   108b4:	|     '----- bne.s 108a2 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   108b6:	|            move.l 4(sp),d0
   108ba:	|            moveq #1,d1
   108bc:	|            cmp.l d0,d1
   108be:	|     ,----- bge.s 108d6 <builtIn_loopSound+0x1b4>
			s->next = old;
   108c0:	|     |      movea.l 28(sp),a0
   108c4:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   108ca:	|     |      movea.l 24(sp),a0
   108ce:	|     |      move.l 28(sp),8(a0)
   108d4:	|     |  ,-- bra.s 108e6 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   108d6:	|     '--|-> move.l 4(sp),d0
   108da:	|        +-- beq.s 108e6 <builtIn_loopSound+0x1c4>
			s->next = s;
   108dc:	|        |   movea.l 28(sp),a0
   108e0:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   108e6:	|        '-> movea.l 24(sp),a0
   108ea:	|            moveq #-1,d0
   108ec:	|            move.l d0,16(a0)
		playSoundList(old);
   108f0:	|            move.l 24(sp),-(sp)
   108f4:	|            jsr d112 <playSoundList>
   108fa:	|            addq.l #4,sp
		return BR_CONTINUE;
   108fc:	|            moveq #2,d0
	}
}
   108fe:	'----------> movea.l (sp)+,a6
   10900:	             lea 28(sp),sp
   10904:	             rts

00010906 <builtIn_stopSound>:

builtIn(stopSound)
{
   10906:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10908:	       movea.l 12(sp),a0
   1090c:	       move.l 24(a0),d0
   10910:	       move.l d0,-(sp)
   10912:	       pea 5 <_start+0x5>
   10916:	       move.l sp,d0
   10918:	       addq.l #8,d0
   1091a:	       move.l d0,-(sp)
   1091c:	       jsr 147c4 <getValueType>
   10922:	       lea 12(sp),sp
   10926:	       tst.w d0
   10928:	   ,-- bne.s 1092e <builtIn_stopSound+0x28>
   1092a:	   |   moveq #1,d0
   1092c:	,--|-- bra.s 1094c <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1092e:	|  '-> moveq #24,d0
   10930:	|      add.l 12(sp),d0
   10934:	|      move.l d0,-(sp)
   10936:	|      jsr 15148 <trimStack>
   1093c:	|      addq.l #4,sp
	huntKillSound (v);
   1093e:	|      move.l (sp),d0
   10940:	|      move.l d0,-(sp)
   10942:	|      jsr d10a <huntKillSound>
   10948:	|      addq.l #4,sp
	return BR_CONTINUE;
   1094a:	|      moveq #2,d0
}
   1094c:	'----> addq.l #4,sp
   1094e:	       rts

00010950 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10950:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10952:	       movea.l 12(sp),a0
   10956:	       move.l 24(a0),d0
   1095a:	       move.l d0,-(sp)
   1095c:	       pea 1 <_start+0x1>
   10960:	       move.l sp,d0
   10962:	       addq.l #8,d0
   10964:	       move.l d0,-(sp)
   10966:	       jsr 147c4 <getValueType>
   1096c:	       lea 12(sp),sp
   10970:	       tst.w d0
   10972:	   ,-- bne.s 10978 <builtIn_setDefaultSoundVolume+0x28>
   10974:	   |   moveq #1,d0
   10976:	,--|-- bra.s 10996 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10978:	|  '-> moveq #24,d0
   1097a:	|      add.l 12(sp),d0
   1097e:	|      move.l d0,-(sp)
   10980:	|      jsr 15148 <trimStack>
   10986:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10988:	|      move.l (sp),d0
   1098a:	|      move.l d0,-(sp)
   1098c:	|      jsr d180 <setDefaultSoundVolume>
   10992:	|      addq.l #4,sp
	return BR_CONTINUE;
   10994:	|      moveq #2,d0
}
   10996:	'----> addq.l #4,sp
   10998:	       rts

0001099a <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   1099a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1099c:	       movea.l 16(sp),a0
   109a0:	       move.l 24(a0),d0
   109a4:	       move.l d0,-(sp)
   109a6:	       pea 1 <_start+0x1>
   109aa:	       move.l sp,d0
   109ac:	       addq.l #8,d0
   109ae:	       move.l d0,-(sp)
   109b0:	       jsr 147c4 <getValueType>
   109b6:	       lea 12(sp),sp
   109ba:	       tst.w d0
   109bc:	   ,-- bne.s 109c2 <builtIn_setSoundVolume+0x28>
   109be:	   |   moveq #1,d0
   109c0:	,--|-- bra.s 10a1c <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   109c2:	|  '-> moveq #24,d0
   109c4:	|      add.l 16(sp),d0
   109c8:	|      move.l d0,-(sp)
   109ca:	|      jsr 15148 <trimStack>
   109d0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   109d2:	|      movea.l 16(sp),a0
   109d6:	|      move.l 24(a0),d0
   109da:	|      move.l d0,-(sp)
   109dc:	|      pea 5 <_start+0x5>
   109e0:	|      moveq #12,d0
   109e2:	|      add.l sp,d0
   109e4:	|      move.l d0,-(sp)
   109e6:	|      jsr 147c4 <getValueType>
   109ec:	|      lea 12(sp),sp
   109f0:	|      tst.w d0
   109f2:	|  ,-- bne.s 109f8 <builtIn_setSoundVolume+0x5e>
   109f4:	|  |   moveq #1,d0
   109f6:	+--|-- bra.s 10a1c <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   109f8:	|  '-> moveq #24,d0
   109fa:	|      add.l 16(sp),d0
   109fe:	|      move.l d0,-(sp)
   10a00:	|      jsr 15148 <trimStack>
   10a06:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a08:	|      move.l (sp),d1
   10a0a:	|      move.l 4(sp),d0
   10a0e:	|      move.l d1,-(sp)
   10a10:	|      move.l d0,-(sp)
   10a12:	|      jsr d194 <setSoundVolume>
   10a18:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a1a:	|      moveq #2,d0
}
   10a1c:	'----> addq.l #8,sp
   10a1e:	       rts

00010a20 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10a20:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a24:	       movea.l 20(sp),a0
   10a28:	       move.l 24(a0),d0
   10a2c:	       move.l d0,-(sp)
   10a2e:	       pea 1 <_start+0x1>
   10a32:	       moveq #12,d0
   10a34:	       add.l sp,d0
   10a36:	       move.l d0,-(sp)
   10a38:	       jsr 147c4 <getValueType>
   10a3e:	       lea 12(sp),sp
   10a42:	       tst.w d0
   10a44:	   ,-- bne.s 10a4c <builtIn_setSoundLoopPoints+0x2c>
   10a46:	   |   moveq #1,d0
   10a48:	,--|-- bra.w 10ae4 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a4c:	|  '-> moveq #24,d0
   10a4e:	|      add.l 20(sp),d0
   10a52:	|      move.l d0,-(sp)
   10a54:	|      jsr 15148 <trimStack>
   10a5a:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a5c:	|      movea.l 20(sp),a0
   10a60:	|      move.l 24(a0),d0
   10a64:	|      move.l d0,-(sp)
   10a66:	|      pea 1 <_start+0x1>
   10a6a:	|      lea 8(sp),a0
   10a6e:	|      move.l a0,-(sp)
   10a70:	|      jsr 147c4 <getValueType>
   10a76:	|      lea 12(sp),sp
   10a7a:	|      tst.w d0
   10a7c:	|  ,-- bne.s 10a82 <builtIn_setSoundLoopPoints+0x62>
   10a7e:	|  |   moveq #1,d0
   10a80:	+--|-- bra.s 10ae4 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a82:	|  '-> moveq #24,d0
   10a84:	|      add.l 20(sp),d0
   10a88:	|      move.l d0,-(sp)
   10a8a:	|      jsr 15148 <trimStack>
   10a90:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a92:	|      movea.l 20(sp),a0
   10a96:	|      move.l 24(a0),d0
   10a9a:	|      move.l d0,-(sp)
   10a9c:	|      pea 5 <_start+0x5>
   10aa0:	|      moveq #16,d0
   10aa2:	|      add.l sp,d0
   10aa4:	|      move.l d0,-(sp)
   10aa6:	|      jsr 147c4 <getValueType>
   10aac:	|      lea 12(sp),sp
   10ab0:	|      tst.w d0
   10ab2:	|  ,-- bne.s 10ab8 <builtIn_setSoundLoopPoints+0x98>
   10ab4:	|  |   moveq #1,d0
   10ab6:	+--|-- bra.s 10ae4 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ab8:	|  '-> moveq #24,d0
   10aba:	|      add.l 20(sp),d0
   10abe:	|      move.l d0,-(sp)
   10ac0:	|      jsr 15148 <trimStack>
   10ac6:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10ac8:	|      movea.l 4(sp),a0
   10acc:	|      move.l (sp),d1
   10ace:	|      move.l 8(sp),d0
   10ad2:	|      move.l a0,-(sp)
   10ad4:	|      move.l d1,-(sp)
   10ad6:	|      move.l d0,-(sp)
   10ad8:	|      jsr d18c <setSoundLoop>
   10ade:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10ae2:	|      moveq #2,d0
}
   10ae4:	'----> lea 12(sp),sp
   10ae8:	       rts

00010aea <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10aea:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10aec:	          movea.l 12(sp),a0
   10af0:	          movea.l 24(a0),a0
   10af4:	          move.l (a0),d0
   10af6:	          moveq #5,d1
   10af8:	          cmp.l d0,d1
   10afa:	,-------- bne.s 10b3e <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10afc:	|         movea.l 12(sp),a0
   10b00:	|         move.l 24(a0),d0
   10b04:	|         move.l d0,-(sp)
   10b06:	|         pea 5 <_start+0x5>
   10b0a:	|         move.l sp,d0
   10b0c:	|         addq.l #8,d0
   10b0e:	|         move.l d0,-(sp)
   10b10:	|         jsr 147c4 <getValueType>
   10b16:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b1a:	|         moveq #24,d0
   10b1c:	|         add.l 12(sp),d0
   10b20:	|         move.l d0,-(sp)
   10b22:	|         jsr 15148 <trimStack>
   10b28:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b2a:	|         move.l (sp),d0
   10b2c:	|         move.l d0,-(sp)
   10b2e:	|         jsr 16a4e <setFloor>
   10b34:	|         addq.l #4,sp
   10b36:	|         tst.w d0
   10b38:	|  ,----- bne.s 10b54 <builtIn_setFloor+0x6a>
   10b3a:	|  |      moveq #1,d0
   10b3c:	|  |  ,-- bra.s 10b56 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b3e:	'--|--|-> moveq #24,d0
   10b40:	   |  |   add.l 12(sp),d0
   10b44:	   |  |   move.l d0,-(sp)
   10b46:	   |  |   jsr 15148 <trimStack>
   10b4c:	   |  |   addq.l #4,sp
		setFloorNull ();
   10b4e:	   |  |   jsr 171c8 <setFloorNull>
	}
	return BR_CONTINUE;
   10b54:	   '--|-> moveq #2,d0
}
   10b56:	      '-> addq.l #4,sp
   10b58:	          rts

00010b5a <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10b5a:	jsr 162ca <drawFloor>
	return BR_CONTINUE;
   10b60:	moveq #2,d0
}
   10b62:	rts

00010b64 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10b64:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b66:	          movea.l 12(sp),a0
   10b6a:	          movea.l 24(a0),a0
   10b6e:	          move.l (a0),d0
   10b70:	          moveq #5,d1
   10b72:	          cmp.l d0,d1
   10b74:	,-------- bne.s 10bb8 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b76:	|         movea.l 12(sp),a0
   10b7a:	|         move.l 24(a0),d0
   10b7e:	|         move.l d0,-(sp)
   10b80:	|         pea 5 <_start+0x5>
   10b84:	|         move.l sp,d0
   10b86:	|         addq.l #8,d0
   10b88:	|         move.l d0,-(sp)
   10b8a:	|         jsr 147c4 <getValueType>
   10b90:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b94:	|         moveq #24,d0
   10b96:	|         add.l 12(sp),d0
   10b9a:	|         move.l d0,-(sp)
   10b9c:	|         jsr 15148 <trimStack>
   10ba2:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10ba4:	|         move.l (sp),d0
   10ba6:	|         move.l d0,-(sp)
   10ba8:	|         jsr 863a <setZBuffer>
   10bae:	|         addq.l #4,sp
   10bb0:	|         tst.w d0
   10bb2:	|  ,----- bne.s 10bce <builtIn_setZBuffer+0x6a>
   10bb4:	|  |      moveq #1,d0
   10bb6:	|  |  ,-- bra.s 10bd0 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10bb8:	'--|--|-> moveq #24,d0
   10bba:	   |  |   add.l 12(sp),d0
   10bbe:	   |  |   move.l d0,-(sp)
   10bc0:	   |  |   jsr 15148 <trimStack>
   10bc6:	   |  |   addq.l #4,sp
		killZBuffer ();
   10bc8:	   |  |   jsr 85ee <killZBuffer>
	}
	return BR_CONTINUE;
   10bce:	   '--|-> moveq #2,d0
}
   10bd0:	      '-> addq.l #4,sp
   10bd2:	          rts

00010bd4 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10bd4:	pea 19c25 <talk.c.490538ff+0x216>
   10bda:	jsr 172a4 <KPrintF>
   10be0:	addq.l #4,sp
	return BR_CONTINUE;
   10be2:	moveq #2,d0
}
   10be4:	rts

00010be6 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10be6:	          movea.l 8(sp),a0
   10bea:	          move.l 24(a0),d0
   10bee:	          move.l d0,-(sp)
   10bf0:	          pea 1 <_start+0x1>
   10bf4:	          pea 1cbbc <speechMode>
   10bfa:	          jsr 147c4 <getValueType>
   10c00:	          lea 12(sp),sp
   10c04:	          tst.w d0
   10c06:	      ,-- bne.s 10c0c <builtIn_setSpeechMode+0x26>
   10c08:	      |   moveq #1,d0
   10c0a:	,-----|-- bra.s 10c44 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c0c:	|     '-> moveq #24,d0
   10c0e:	|         add.l 8(sp),d0
   10c12:	|         move.l d0,-(sp)
   10c14:	|         jsr 15148 <trimStack>
   10c1a:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c1c:	|         move.l 1cbbc <speechMode>,d0
   10c22:	|     ,-- bmi.s 10c30 <builtIn_setSpeechMode+0x4a>
   10c24:	|     |   move.l 1cbbc <speechMode>,d0
   10c2a:	|     |   moveq #2,d1
   10c2c:	|     |   cmp.l d0,d1
   10c2e:	|  ,--|-- bge.s 10c42 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c30:	|  |  '-> pea 19c3e <talk.c.490538ff+0x22f>
   10c36:	|  |      jsr 172a4 <KPrintF>
   10c3c:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c3e:	|  |      moveq #1,d0
   10c40:	+--|----- bra.s 10c44 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10c42:	|  '----> moveq #2,d0
}
   10c44:	'-------> rts

00010c46 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10c46:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10c48:	       jsr 3ebc <isThereAnySpeechGoingOn>
   10c4e:	       move.l d0,(sp)
	if (i == -1) {
   10c50:	       moveq #-1,d0
   10c52:	       cmp.l (sp),d0
   10c54:	,----- bne.s 10c70 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10c56:	|      moveq #28,d0
   10c58:	|      add.l 12(sp),d0
   10c5c:	|      clr.l -(sp)
   10c5e:	|      pea 1 <_start+0x1>
   10c62:	|      move.l d0,-(sp)
   10c64:	|      jsr 150b6 <setVariable>
   10c6a:	|      lea 12(sp),sp
   10c6e:	|  ,-- bra.s 10c88 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10c70:	'--|-> moveq #28,d0
   10c72:	   |   add.l 12(sp),d0
   10c76:	   |   move.l (sp),-(sp)
   10c78:	   |   pea 7 <_start+0x7>
   10c7c:	   |   move.l d0,-(sp)
   10c7e:	   |   jsr 150b6 <setVariable>
   10c84:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10c88:	   '-> moveq #2,d0
}
   10c8a:	       addq.l #4,sp
   10c8c:	       rts

00010c8e <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10c8e:	jsr 69e8 <killSpeechTimers>
	return BR_CONTINUE;
   10c94:	moveq #2,d0
}
   10c96:	rts

00010c98 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10c98:	       move.l 1cc02 <overRegion>,d0
   10c9e:	,----- beq.s 10cc8 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10ca0:	|      movea.l 1cc02 <overRegion>,a0
   10ca6:	|      movea.l 28(a0),a0
   10caa:	|      move.l 4(a0),d1
   10cae:	|      moveq #28,d0
   10cb0:	|      add.l 8(sp),d0
   10cb4:	|      move.l d1,-(sp)
   10cb6:	|      pea 7 <_start+0x7>
   10cba:	|      move.l d0,-(sp)
   10cbc:	|      jsr 150b6 <setVariable>
   10cc2:	|      lea 12(sp),sp
   10cc6:	|  ,-- bra.s 10ce0 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10cc8:	'--|-> moveq #28,d0
   10cca:	   |   add.l 8(sp),d0
   10cce:	   |   clr.l -(sp)
   10cd0:	   |   pea 1 <_start+0x1>
   10cd4:	   |   move.l d0,-(sp)
   10cd6:	   |   jsr 150b6 <setVariable>
   10cdc:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10ce0:	   '-> moveq #2,d0
}
   10ce2:	       rts

00010ce4 <builtIn_rename>:

builtIn(rename)
{
   10ce4:	       lea -16(sp),sp
   10ce8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10cea:	       movea.l 28(sp),a0
   10cee:	       move.l 24(a0),d0
   10cf2:	       move.l d0,-(sp)
   10cf4:	       jsr 14d9a <getTextFromAnyVar>
   10cfa:	       addq.l #4,sp
   10cfc:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d00:	   ,-- bne.s 10d06 <builtIn_rename+0x22>
   10d02:	   |   moveq #1,d0
   10d04:	,--|-- bra.s 10d80 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d06:	|  '-> moveq #24,d0
   10d08:	|      add.l 28(sp),d0
   10d0c:	|      move.l d0,-(sp)
   10d0e:	|      jsr 15148 <trimStack>
   10d14:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d16:	|      movea.l 28(sp),a0
   10d1a:	|      move.l 24(a0),d0
   10d1e:	|      move.l d0,-(sp)
   10d20:	|      pea 7 <_start+0x7>
   10d24:	|      lea 12(sp),a0
   10d28:	|      move.l a0,-(sp)
   10d2a:	|      jsr 147c4 <getValueType>
   10d30:	|      lea 12(sp),sp
   10d34:	|      tst.w d0
   10d36:	|  ,-- bne.s 10d3c <builtIn_rename+0x58>
   10d38:	|  |   moveq #1,d0
   10d3a:	+--|-- bra.s 10d80 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d3c:	|  '-> moveq #24,d0
   10d3e:	|      add.l 28(sp),d0
   10d42:	|      move.l d0,-(sp)
   10d44:	|      jsr 15148 <trimStack>
   10d4a:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10d4c:	|      move.l 4(sp),d0
   10d50:	|      move.l d0,-(sp)
   10d52:	|      jsr d4d8 <findObjectType>
   10d58:	|      addq.l #4,sp
   10d5a:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10d5e:	|      movea.l 12(sp),a0
   10d62:	|      move.l (a0),8(sp)
   10d66:	|      move.l 1caf2 <SysBase>,d0
   10d6c:	|      movea.l d0,a6
   10d6e:	|      movea.l 8(sp),a1
   10d72:	|      jsr -690(a6)
	o->screenName = newText;
   10d76:	|      movea.l 12(sp),a0
   10d7a:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10d7e:	|      moveq #2,d0
}
   10d80:	'----> movea.l (sp)+,a6
   10d82:	       lea 16(sp),sp
   10d86:	       rts

00010d88 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10d88:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d8c:	          movea.l 20(sp),a0
   10d90:	          move.l 24(a0),d0
   10d94:	          move.l d0,-(sp)
   10d96:	          pea 7 <_start+0x7>
   10d9a:	          lea 8(sp),a0
   10d9e:	          move.l a0,-(sp)
   10da0:	          jsr 147c4 <getValueType>
   10da6:	          lea 12(sp),sp
   10daa:	          tst.w d0
   10dac:	      ,-- bne.s 10db4 <builtIn_getObjectX+0x2c>
   10dae:	      |   moveq #1,d0
   10db0:	,-----|-- bra.w 10e50 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10db4:	|     '-> moveq #24,d0
   10db6:	|         add.l 20(sp),d0
   10dba:	|         move.l d0,-(sp)
   10dbc:	|         jsr 15148 <trimStack>
   10dc2:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10dc4:	|         move.l (sp),d0
   10dc6:	|         move.l d0,-(sp)
   10dc8:	|         jsr a56a <findPerson>
   10dce:	|         addq.l #4,sp
   10dd0:	|         move.l d0,8(sp)
	if (pers) {
   10dd4:	|     ,-- beq.s 10e02 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10dd6:	|     |   movea.l 8(sp),a0
   10dda:	|     |   move.l (a0),d0
   10ddc:	|     |   move.l d0,-(sp)
   10dde:	|     |   jsr 1766e <__fixsfsi>
   10de4:	|     |   addq.l #4,sp
   10de6:	|     |   move.l d0,d1
   10de8:	|     |   moveq #28,d0
   10dea:	|     |   add.l 20(sp),d0
   10dee:	|     |   move.l d1,-(sp)
   10df0:	|     |   pea 1 <_start+0x1>
   10df4:	|     |   move.l d0,-(sp)
   10df6:	|     |   jsr 150b6 <setVariable>
   10dfc:	|     |   lea 12(sp),sp
   10e00:	|  ,--|-- bra.s 10e4e <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e02:	|  |  '-> move.l (sp),d0
   10e04:	|  |      move.l d0,-(sp)
   10e06:	|  |      jsr 15a86 <getRegionForObject>
   10e0c:	|  |      addq.l #4,sp
   10e0e:	|  |      move.l d0,4(sp)
		if (la) {
   10e12:	|  |  ,-- beq.s 10e36 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e14:	|  |  |   movea.l 4(sp),a0
   10e18:	|  |  |   move.l 16(a0),d1
   10e1c:	|  |  |   moveq #28,d0
   10e1e:	|  |  |   add.l 20(sp),d0
   10e22:	|  |  |   move.l d1,-(sp)
   10e24:	|  |  |   pea 1 <_start+0x1>
   10e28:	|  |  |   move.l d0,-(sp)
   10e2a:	|  |  |   jsr 150b6 <setVariable>
   10e30:	|  |  |   lea 12(sp),sp
   10e34:	|  +--|-- bra.s 10e4e <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e36:	|  |  '-> moveq #28,d0
   10e38:	|  |      add.l 20(sp),d0
   10e3c:	|  |      clr.l -(sp)
   10e3e:	|  |      pea 1 <_start+0x1>
   10e42:	|  |      move.l d0,-(sp)
   10e44:	|  |      jsr 150b6 <setVariable>
   10e4a:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10e4e:	|  '----> moveq #2,d0
}
   10e50:	'-------> lea 12(sp),sp
   10e54:	          rts

00010e56 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10e56:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e5a:	          movea.l 20(sp),a0
   10e5e:	          move.l 24(a0),d0
   10e62:	          move.l d0,-(sp)
   10e64:	          pea 7 <_start+0x7>
   10e68:	          lea 8(sp),a0
   10e6c:	          move.l a0,-(sp)
   10e6e:	          jsr 147c4 <getValueType>
   10e74:	          lea 12(sp),sp
   10e78:	          tst.w d0
   10e7a:	      ,-- bne.s 10e82 <builtIn_getObjectY+0x2c>
   10e7c:	      |   moveq #1,d0
   10e7e:	,-----|-- bra.w 10f20 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10e82:	|     '-> moveq #24,d0
   10e84:	|         add.l 20(sp),d0
   10e88:	|         move.l d0,-(sp)
   10e8a:	|         jsr 15148 <trimStack>
   10e90:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e92:	|         move.l (sp),d0
   10e94:	|         move.l d0,-(sp)
   10e96:	|         jsr a56a <findPerson>
   10e9c:	|         addq.l #4,sp
   10e9e:	|         move.l d0,8(sp)
	if (pers) {
   10ea2:	|     ,-- beq.s 10ed2 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10ea4:	|     |   movea.l 8(sp),a0
   10ea8:	|     |   move.l 4(a0),d0
   10eac:	|     |   move.l d0,-(sp)
   10eae:	|     |   jsr 1766e <__fixsfsi>
   10eb4:	|     |   addq.l #4,sp
   10eb6:	|     |   move.l d0,d1
   10eb8:	|     |   moveq #28,d0
   10eba:	|     |   add.l 20(sp),d0
   10ebe:	|     |   move.l d1,-(sp)
   10ec0:	|     |   pea 1 <_start+0x1>
   10ec4:	|     |   move.l d0,-(sp)
   10ec6:	|     |   jsr 150b6 <setVariable>
   10ecc:	|     |   lea 12(sp),sp
   10ed0:	|  ,--|-- bra.s 10f1e <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10ed2:	|  |  '-> move.l (sp),d0
   10ed4:	|  |      move.l d0,-(sp)
   10ed6:	|  |      jsr 15a86 <getRegionForObject>
   10edc:	|  |      addq.l #4,sp
   10ede:	|  |      move.l d0,4(sp)
		if (la) {
   10ee2:	|  |  ,-- beq.s 10f06 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10ee4:	|  |  |   movea.l 4(sp),a0
   10ee8:	|  |  |   move.l 20(a0),d1
   10eec:	|  |  |   moveq #28,d0
   10eee:	|  |  |   add.l 20(sp),d0
   10ef2:	|  |  |   move.l d1,-(sp)
   10ef4:	|  |  |   pea 1 <_start+0x1>
   10ef8:	|  |  |   move.l d0,-(sp)
   10efa:	|  |  |   jsr 150b6 <setVariable>
   10f00:	|  |  |   lea 12(sp),sp
   10f04:	|  +--|-- bra.s 10f1e <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f06:	|  |  '-> moveq #28,d0
   10f08:	|  |      add.l 20(sp),d0
   10f0c:	|  |      clr.l -(sp)
   10f0e:	|  |      pea 1 <_start+0x1>
   10f12:	|  |      move.l d0,-(sp)
   10f14:	|  |      jsr 150b6 <setVariable>
   10f1a:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f1e:	|  '----> moveq #2,d0
}
   10f20:	'-------> lea 12(sp),sp
   10f24:	          rts

00010f26 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f26:	       lea -32(sp),sp
   10f2a:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f2e:	       movea.l 56(sp),a0
   10f32:	       move.l 24(a0),d0
   10f36:	       move.l d0,-(sp)
   10f38:	       pea 1 <_start+0x1>
   10f3c:	       lea 28(sp),a0
   10f40:	       move.l a0,-(sp)
   10f42:	       jsr 147c4 <getValueType>
   10f48:	       lea 12(sp),sp
   10f4c:	       tst.w d0
   10f4e:	   ,-- bne.s 10f56 <builtIn_addScreenRegion+0x30>
   10f50:	   |   moveq #1,d0
   10f52:	,--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f56:	|  '-> moveq #24,d0
   10f58:	|      add.l 56(sp),d0
   10f5c:	|      move.l d0,-(sp)
   10f5e:	|      jsr 15148 <trimStack>
   10f64:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f66:	|      movea.l 56(sp),a0
   10f6a:	|      move.l 24(a0),d0
   10f6e:	|      move.l d0,-(sp)
   10f70:	|      pea 1 <_start+0x1>
   10f74:	|      moveq #48,d0
   10f76:	|      add.l sp,d0
   10f78:	|      move.l d0,-(sp)
   10f7a:	|      jsr 147c4 <getValueType>
   10f80:	|      lea 12(sp),sp
   10f84:	|      tst.w d0
   10f86:	|  ,-- bne.s 10f8e <builtIn_addScreenRegion+0x68>
   10f88:	|  |   moveq #1,d0
   10f8a:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f8e:	|  '-> moveq #24,d0
   10f90:	|      add.l 56(sp),d0
   10f94:	|      move.l d0,-(sp)
   10f96:	|      jsr 15148 <trimStack>
   10f9c:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f9e:	|      movea.l 56(sp),a0
   10fa2:	|      move.l 24(a0),d0
   10fa6:	|      move.l d0,-(sp)
   10fa8:	|      pea 1 <_start+0x1>
   10fac:	|      moveq #52,d0
   10fae:	|      add.l sp,d0
   10fb0:	|      move.l d0,-(sp)
   10fb2:	|      jsr 147c4 <getValueType>
   10fb8:	|      lea 12(sp),sp
   10fbc:	|      tst.w d0
   10fbe:	|  ,-- bne.s 10fc6 <builtIn_addScreenRegion+0xa0>
   10fc0:	|  |   moveq #1,d0
   10fc2:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fc6:	|  '-> moveq #24,d0
   10fc8:	|      add.l 56(sp),d0
   10fcc:	|      move.l d0,-(sp)
   10fce:	|      jsr 15148 <trimStack>
   10fd4:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fd6:	|      movea.l 56(sp),a0
   10fda:	|      move.l 24(a0),d0
   10fde:	|      move.l d0,-(sp)
   10fe0:	|      pea 1 <_start+0x1>
   10fe4:	|      lea 32(sp),a0
   10fe8:	|      move.l a0,-(sp)
   10fea:	|      jsr 147c4 <getValueType>
   10ff0:	|      lea 12(sp),sp
   10ff4:	|      tst.w d0
   10ff6:	|  ,-- bne.s 10ffe <builtIn_addScreenRegion+0xd8>
   10ff8:	|  |   moveq #1,d0
   10ffa:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ffe:	|  '-> moveq #24,d0
   11000:	|      add.l 56(sp),d0
   11004:	|      move.l d0,-(sp)
   11006:	|      jsr 15148 <trimStack>
   1100c:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1100e:	|      movea.l 56(sp),a0
   11012:	|      move.l 24(a0),d0
   11016:	|      move.l d0,-(sp)
   11018:	|      pea 1 <_start+0x1>
   1101c:	|      lea 36(sp),a0
   11020:	|      move.l a0,-(sp)
   11022:	|      jsr 147c4 <getValueType>
   11028:	|      lea 12(sp),sp
   1102c:	|      tst.w d0
   1102e:	|  ,-- bne.s 11036 <builtIn_addScreenRegion+0x110>
   11030:	|  |   moveq #1,d0
   11032:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11036:	|  '-> moveq #24,d0
   11038:	|      add.l 56(sp),d0
   1103c:	|      move.l d0,-(sp)
   1103e:	|      jsr 15148 <trimStack>
   11044:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11046:	|      movea.l 56(sp),a0
   1104a:	|      move.l 24(a0),d0
   1104e:	|      move.l d0,-(sp)
   11050:	|      pea 1 <_start+0x1>
   11054:	|      lea 40(sp),a0
   11058:	|      move.l a0,-(sp)
   1105a:	|      jsr 147c4 <getValueType>
   11060:	|      lea 12(sp),sp
   11064:	|      tst.w d0
   11066:	|  ,-- bne.s 1106e <builtIn_addScreenRegion+0x148>
   11068:	|  |   moveq #1,d0
   1106a:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1106e:	|  '-> moveq #24,d0
   11070:	|      add.l 56(sp),d0
   11074:	|      move.l d0,-(sp)
   11076:	|      jsr 15148 <trimStack>
   1107c:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1107e:	|      movea.l 56(sp),a0
   11082:	|      move.l 24(a0),d0
   11086:	|      move.l d0,-(sp)
   11088:	|      pea 1 <_start+0x1>
   1108c:	|      lea 44(sp),a0
   11090:	|      move.l a0,-(sp)
   11092:	|      jsr 147c4 <getValueType>
   11098:	|      lea 12(sp),sp
   1109c:	|      tst.w d0
   1109e:	|  ,-- bne.s 110a6 <builtIn_addScreenRegion+0x180>
   110a0:	|  |   moveq #1,d0
   110a2:	+--|-- bra.w 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110a6:	|  '-> moveq #24,d0
   110a8:	|      add.l 56(sp),d0
   110ac:	|      move.l d0,-(sp)
   110ae:	|      jsr 15148 <trimStack>
   110b4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110b6:	|      movea.l 56(sp),a0
   110ba:	|      move.l 24(a0),d0
   110be:	|      move.l d0,-(sp)
   110c0:	|      pea 7 <_start+0x7>
   110c4:	|      lea 24(sp),a0
   110c8:	|      move.l a0,-(sp)
   110ca:	|      jsr 147c4 <getValueType>
   110d0:	|      lea 12(sp),sp
   110d4:	|      tst.w d0
   110d6:	|  ,-- bne.s 110dc <builtIn_addScreenRegion+0x1b6>
   110d8:	|  |   moveq #1,d0
   110da:	+--|-- bra.s 11130 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110dc:	|  '-> moveq #24,d0
   110de:	|      add.l 56(sp),d0
   110e2:	|      move.l d0,-(sp)
   110e4:	|      jsr 15148 <trimStack>
   110ea:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   110ec:	|      move.l 16(sp),d5
   110f0:	|      move.l 20(sp),d4
   110f4:	|      move.l 40(sp),d3
   110f8:	|      move.l 44(sp),d2
   110fc:	|      movea.l 24(sp),a1
   11100:	|      movea.l 28(sp),a0
   11104:	|      move.l 32(sp),d1
   11108:	|      move.l 36(sp),d0
   1110c:	|      move.l d5,-(sp)
   1110e:	|      move.l d4,-(sp)
   11110:	|      move.l d3,-(sp)
   11112:	|      move.l d2,-(sp)
   11114:	|      move.l a1,-(sp)
   11116:	|      move.l a0,-(sp)
   11118:	|      move.l d1,-(sp)
   1111a:	|      move.l d0,-(sp)
   1111c:	|      jsr 15940 <addScreenRegion>
   11122:	|      lea 32(sp),sp
   11126:	|      tst.w d0
   11128:	|  ,-- beq.s 1112e <builtIn_addScreenRegion+0x208>
   1112a:	|  |   moveq #2,d0
   1112c:	+--|-- bra.s 11130 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   1112e:	|  '-> moveq #1,d0

}
   11130:	'----> movem.l (sp)+,d2-d5
   11134:	       lea 32(sp),sp
   11138:	       rts

0001113a <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1113a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1113c:	       movea.l 12(sp),a0
   11140:	       move.l 24(a0),d0
   11144:	       move.l d0,-(sp)
   11146:	       pea 7 <_start+0x7>
   1114a:	       move.l sp,d0
   1114c:	       addq.l #8,d0
   1114e:	       move.l d0,-(sp)
   11150:	       jsr 147c4 <getValueType>
   11156:	       lea 12(sp),sp
   1115a:	       tst.w d0
   1115c:	   ,-- bne.s 11162 <builtIn_removeScreenRegion+0x28>
   1115e:	   |   moveq #1,d0
   11160:	,--|-- bra.s 11180 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11162:	|  '-> moveq #24,d0
   11164:	|      add.l 12(sp),d0
   11168:	|      move.l d0,-(sp)
   1116a:	|      jsr 15148 <trimStack>
   11170:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11172:	|      move.l (sp),d0
   11174:	|      move.l d0,-(sp)
   11176:	|      jsr 15c2e <removeScreenRegion>
   1117c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1117e:	|      moveq #2,d0
}
   11180:	'----> addq.l #4,sp
   11182:	       rts

00011184 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11184:	jsr 15db2 <showBoxes>
	return BR_CONTINUE;
   1118a:	moveq #2,d0
}
   1118c:	rts

0001118e <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1118e:	jsr 15ab4 <killAllRegions>
	return BR_CONTINUE;
   11194:	moveq #2,d0
}
   11196:	rts

00011198 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11198:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1119c:	       movea.l 24(sp),a0
   111a0:	       move.l 24(a0),d0
   111a4:	       move.l d0,-(sp)
   111a6:	       jsr 14470 <getCostumeFromVar>
   111ac:	       addq.l #4,sp
   111ae:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   111b2:	   ,-- bne.s 111ba <builtIn_addCharacter+0x22>
   111b4:	   |   moveq #1,d0
   111b6:	,--|-- bra.w 11296 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   111ba:	|  '-> moveq #24,d0
   111bc:	|      add.l 24(sp),d0
   111c0:	|      move.l d0,-(sp)
   111c2:	|      jsr 15148 <trimStack>
   111c8:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111ca:	|      movea.l 24(sp),a0
   111ce:	|      move.l 24(a0),d0
   111d2:	|      move.l d0,-(sp)
   111d4:	|      pea 1 <_start+0x1>
   111d8:	|      lea 12(sp),a0
   111dc:	|      move.l a0,-(sp)
   111de:	|      jsr 147c4 <getValueType>
   111e4:	|      lea 12(sp),sp
   111e8:	|      tst.w d0
   111ea:	|  ,-- bne.s 111f2 <builtIn_addCharacter+0x5a>
   111ec:	|  |   moveq #1,d0
   111ee:	+--|-- bra.w 11296 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   111f2:	|  '-> moveq #24,d0
   111f4:	|      add.l 24(sp),d0
   111f8:	|      move.l d0,-(sp)
   111fa:	|      jsr 15148 <trimStack>
   11200:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11202:	|      movea.l 24(sp),a0
   11206:	|      move.l 24(a0),d0
   1120a:	|      move.l d0,-(sp)
   1120c:	|      pea 1 <_start+0x1>
   11210:	|      moveq #16,d0
   11212:	|      add.l sp,d0
   11214:	|      move.l d0,-(sp)
   11216:	|      jsr 147c4 <getValueType>
   1121c:	|      lea 12(sp),sp
   11220:	|      tst.w d0
   11222:	|  ,-- bne.s 11228 <builtIn_addCharacter+0x90>
   11224:	|  |   moveq #1,d0
   11226:	+--|-- bra.s 11296 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11228:	|  '-> moveq #24,d0
   1122a:	|      add.l 24(sp),d0
   1122e:	|      move.l d0,-(sp)
   11230:	|      jsr 15148 <trimStack>
   11236:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11238:	|      movea.l 24(sp),a0
   1123c:	|      move.l 24(a0),d0
   11240:	|      move.l d0,-(sp)
   11242:	|      pea 7 <_start+0x7>
   11246:	|      lea 8(sp),a0
   1124a:	|      move.l a0,-(sp)
   1124c:	|      jsr 147c4 <getValueType>
   11252:	|      lea 12(sp),sp
   11256:	|      tst.w d0
   11258:	|  ,-- bne.s 1125e <builtIn_addCharacter+0xc6>
   1125a:	|  |   moveq #1,d0
   1125c:	+--|-- bra.s 11296 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1125e:	|  '-> moveq #24,d0
   11260:	|      add.l 24(sp),d0
   11264:	|      move.l d0,-(sp)
   11266:	|      jsr 15148 <trimStack>
   1126c:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1126e:	|      movea.l (sp),a0
   11270:	|      move.l 4(sp),d1
   11274:	|      move.l 8(sp),d0
   11278:	|      move.l 12(sp),-(sp)
   1127c:	|      move.l a0,-(sp)
   1127e:	|      move.l d1,-(sp)
   11280:	|      move.l d0,-(sp)
   11282:	|      jsr 9164 <addPerson>
   11288:	|      lea 16(sp),sp
   1128c:	|      tst.w d0
   1128e:	|  ,-- beq.s 11294 <builtIn_addCharacter+0xfc>
   11290:	|  |   moveq #2,d0
   11292:	+--|-- bra.s 11296 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11294:	|  '-> moveq #1,d0
}
   11296:	'----> lea 16(sp),sp
   1129a:	       rts

0001129c <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1129c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1129e:	       movea.l 12(sp),a0
   112a2:	       move.l 24(a0),d0
   112a6:	       move.l d0,-(sp)
   112a8:	       pea 7 <_start+0x7>
   112ac:	       move.l sp,d0
   112ae:	       addq.l #8,d0
   112b0:	       move.l d0,-(sp)
   112b2:	       jsr 147c4 <getValueType>
   112b8:	       lea 12(sp),sp
   112bc:	       tst.w d0
   112be:	   ,-- bne.s 112c4 <builtIn_hideCharacter+0x28>
   112c0:	   |   moveq #1,d0
   112c2:	,--|-- bra.s 112e4 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   112c4:	|  '-> moveq #24,d0
   112c6:	|      add.l 12(sp),d0
   112ca:	|      move.l d0,-(sp)
   112cc:	|      jsr 15148 <trimStack>
   112d2:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   112d4:	|      move.l (sp),d0
   112d6:	|      move.l d0,-(sp)
   112d8:	|      clr.l -(sp)
   112da:	|      jsr bc00 <setShown>
   112e0:	|      addq.l #8,sp
	return BR_CONTINUE;
   112e2:	|      moveq #2,d0
}
   112e4:	'----> addq.l #4,sp
   112e6:	       rts

000112e8 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   112e8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112ea:	       movea.l 12(sp),a0
   112ee:	       move.l 24(a0),d0
   112f2:	       move.l d0,-(sp)
   112f4:	       pea 7 <_start+0x7>
   112f8:	       move.l sp,d0
   112fa:	       addq.l #8,d0
   112fc:	       move.l d0,-(sp)
   112fe:	       jsr 147c4 <getValueType>
   11304:	       lea 12(sp),sp
   11308:	       tst.w d0
   1130a:	   ,-- bne.s 11310 <builtIn_showCharacter+0x28>
   1130c:	   |   moveq #1,d0
   1130e:	,--|-- bra.s 11332 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11310:	|  '-> moveq #24,d0
   11312:	|      add.l 12(sp),d0
   11316:	|      move.l d0,-(sp)
   11318:	|      jsr 15148 <trimStack>
   1131e:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11320:	|      move.l (sp),d0
   11322:	|      move.l d0,-(sp)
   11324:	|      pea 1 <_start+0x1>
   11328:	|      jsr bc00 <setShown>
   1132e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11330:	|      moveq #2,d0
}
   11332:	'----> addq.l #4,sp
   11334:	       rts

00011336 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11336:	jsr 69e8 <killSpeechTimers>
	killMostPeople ();
   1133c:	jsr aa00 <killMostPeople>
	return BR_CONTINUE;
   11342:	moveq #2,d0
}
   11344:	rts

00011346 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   11346:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11348:	       movea.l 16(sp),a0
   1134c:	       move.l 24(a0),d0
   11350:	       move.l d0,-(sp)
   11352:	       pea 1 <_start+0x1>
   11356:	       move.l sp,d0
   11358:	       addq.l #8,d0
   1135a:	       move.l d0,-(sp)
   1135c:	       jsr 147c4 <getValueType>
   11362:	       lea 12(sp),sp
   11366:	       tst.w d0
   11368:	   ,-- bne.s 1136e <builtIn_setCharacterDrawMode+0x28>
   1136a:	   |   moveq #1,d0
   1136c:	,--|-- bra.s 113c8 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1136e:	|  '-> moveq #24,d0
   11370:	|      add.l 16(sp),d0
   11374:	|      move.l d0,-(sp)
   11376:	|      jsr 15148 <trimStack>
   1137c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1137e:	|      movea.l 16(sp),a0
   11382:	|      move.l 24(a0),d0
   11386:	|      move.l d0,-(sp)
   11388:	|      pea 7 <_start+0x7>
   1138c:	|      moveq #12,d0
   1138e:	|      add.l sp,d0
   11390:	|      move.l d0,-(sp)
   11392:	|      jsr 147c4 <getValueType>
   11398:	|      lea 12(sp),sp
   1139c:	|      tst.w d0
   1139e:	|  ,-- bne.s 113a4 <builtIn_setCharacterDrawMode+0x5e>
   113a0:	|  |   moveq #1,d0
   113a2:	+--|-- bra.s 113c8 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113a4:	|  '-> moveq #24,d0
   113a6:	|      add.l 16(sp),d0
   113aa:	|      move.l d0,-(sp)
   113ac:	|      jsr 15148 <trimStack>
   113b2:	|      addq.l #4,sp
	setDrawMode (di, obj);
   113b4:	|      move.l 4(sp),d1
   113b8:	|      move.l (sp),d0
   113ba:	|      move.l d1,-(sp)
   113bc:	|      move.l d0,-(sp)
   113be:	|      jsr b53e <setDrawMode>
   113c4:	|      addq.l #8,sp
	return BR_CONTINUE;
   113c6:	|      moveq #2,d0
}
   113c8:	'----> addq.l #8,sp
   113ca:	       rts

000113cc <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   113cc:	pea 19c7c <talk.c.490538ff+0x26d>
   113d2:	jsr 172a4 <KPrintF>
   113d8:	addq.l #4,sp
	return BR_CONTINUE;
   113da:	moveq #2,d0
}
   113dc:	rts

000113de <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   113de:	pea 19caf <talk.c.490538ff+0x2a0>
   113e4:	jsr 172a4 <KPrintF>
   113ea:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   113ec:	moveq #2,d0
}
   113ee:	rts

000113f0 <builtIn_setScale>:

builtIn(setScale)
{
   113f0:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113f2:	       movea.l 16(sp),a0
   113f6:	       move.l 24(a0),d0
   113fa:	       move.l d0,-(sp)
   113fc:	       pea 1 <_start+0x1>
   11400:	       move.l sp,d0
   11402:	       addq.l #8,d0
   11404:	       move.l d0,-(sp)
   11406:	       jsr 147c4 <getValueType>
   1140c:	       lea 12(sp),sp
   11410:	       tst.w d0
   11412:	   ,-- bne.s 11418 <builtIn_setScale+0x28>
   11414:	   |   moveq #1,d0
   11416:	,--|-- bra.s 1147a <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11418:	|  '-> moveq #24,d0
   1141a:	|      add.l 16(sp),d0
   1141e:	|      move.l d0,-(sp)
   11420:	|      jsr 15148 <trimStack>
   11426:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11428:	|      movea.l 16(sp),a0
   1142c:	|      move.l 24(a0),d0
   11430:	|      move.l d0,-(sp)
   11432:	|      pea 1 <_start+0x1>
   11436:	|      moveq #12,d0
   11438:	|      add.l sp,d0
   1143a:	|      move.l d0,-(sp)
   1143c:	|      jsr 147c4 <getValueType>
   11442:	|      lea 12(sp),sp
   11446:	|      tst.w d0
   11448:	|  ,-- bne.s 1144e <builtIn_setScale+0x5e>
   1144a:	|  |   moveq #1,d0
   1144c:	+--|-- bra.s 1147a <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1144e:	|  '-> moveq #24,d0
   11450:	|      add.l 16(sp),d0
   11454:	|      move.l d0,-(sp)
   11456:	|      jsr 15148 <trimStack>
   1145c:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   1145e:	|      move.l (sp),d0
   11460:	|      move.l d0,d0
   11462:	|      movea.w d0,a1
   11464:	|      move.l 4(sp),d0
   11468:	|      move.l d0,d0
   1146a:	|      movea.w d0,a0
   1146c:	|      move.l a1,-(sp)
   1146e:	|      move.l a0,-(sp)
   11470:	|      jsr bbd8 <setScale>
   11476:	|      addq.l #8,sp
	return BR_CONTINUE;
   11478:	|      moveq #2,d0
}
   1147a:	'----> addq.l #8,sp
   1147c:	       rts

0001147e <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1147e:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11480:	       movea.l 12(sp),a0
   11484:	       move.l 24(a0),d0
   11488:	       move.l d0,-(sp)
   1148a:	       pea 7 <_start+0x7>
   1148e:	       move.l sp,d0
   11490:	       addq.l #8,d0
   11492:	       move.l d0,-(sp)
   11494:	       jsr 147c4 <getValueType>
   1149a:	       lea 12(sp),sp
   1149e:	       tst.w d0
   114a0:	   ,-- bne.s 114a6 <builtIn_stopCharacter+0x28>
   114a2:	   |   moveq #1,d0
   114a4:	,--|-- bra.s 114de <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   114a6:	|  '-> moveq #24,d0
   114a8:	|      add.l 12(sp),d0
   114ac:	|      move.l d0,-(sp)
   114ae:	|      jsr 15148 <trimStack>
   114b4:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   114b6:	|      move.l (sp),d0
   114b8:	|      move.l d0,-(sp)
   114ba:	|      jsr bd0c <stopPerson>
   114c0:	|      addq.l #4,sp
   114c2:	|      movea.w d0,a0
   114c4:	|      moveq #28,d0
   114c6:	|      add.l 12(sp),d0
   114ca:	|      move.l a0,-(sp)
   114cc:	|      pea 1 <_start+0x1>
   114d0:	|      move.l d0,-(sp)
   114d2:	|      jsr 150b6 <setVariable>
   114d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114dc:	|      moveq #2,d0
}
   114de:	'----> addq.l #4,sp
   114e0:	       rts

000114e2 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   114e2:	pea 19ce9 <talk.c.490538ff+0x2da>
   114e8:	jsr 172a4 <KPrintF>
   114ee:	addq.l #4,sp
	return BR_CONTINUE;
   114f0:	moveq #2,d0
}
   114f2:	rts

000114f4 <builtIn_animate>:

builtIn(animate)
{
   114f4:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   114f6:	       movea.l 16(sp),a0
   114fa:	       move.l 24(a0),d0
   114fe:	       move.l d0,-(sp)
   11500:	       jsr 14c9c <getAnimationFromVar>
   11506:	       addq.l #4,sp
   11508:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1150c:	   ,-- bne.s 11512 <builtIn_animate+0x1e>
   1150e:	   |   moveq #1,d0
   11510:	,--|-- bra.s 11590 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11512:	|  '-> moveq #24,d0
   11514:	|      add.l 16(sp),d0
   11518:	|      move.l d0,-(sp)
   1151a:	|      jsr 15148 <trimStack>
   11520:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11522:	|      movea.l 16(sp),a0
   11526:	|      move.l 24(a0),d0
   1152a:	|      move.l d0,-(sp)
   1152c:	|      pea 7 <_start+0x7>
   11530:	|      move.l sp,d0
   11532:	|      addq.l #8,d0
   11534:	|      move.l d0,-(sp)
   11536:	|      jsr 147c4 <getValueType>
   1153c:	|      lea 12(sp),sp
   11540:	|      tst.w d0
   11542:	|  ,-- bne.s 11548 <builtIn_animate+0x54>
   11544:	|  |   moveq #1,d0
   11546:	+--|-- bra.s 11590 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11548:	|  '-> moveq #24,d0
   1154a:	|      add.l 16(sp),d0
   1154e:	|      move.l d0,-(sp)
   11550:	|      jsr 15148 <trimStack>
   11556:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11558:	|      move.l (sp),d0
   1155a:	|      move.l 4(sp),-(sp)
   1155e:	|      move.l d0,-(sp)
   11560:	|      jsr 93da <animatePerson>
   11566:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11568:	|      move.l 4(sp),-(sp)
   1156c:	|      jsr bd60 <timeForAnim>
   11572:	|      addq.l #4,sp
   11574:	|      move.l d0,d1
   11576:	|      moveq #28,d0
   11578:	|      add.l 16(sp),d0
   1157c:	|      move.l d1,-(sp)
   1157e:	|      pea 1 <_start+0x1>
   11582:	|      move.l d0,-(sp)
   11584:	|      jsr 150b6 <setVariable>
   1158a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1158e:	|      moveq #2,d0
}
   11590:	'----> addq.l #8,sp
   11592:	       rts

00011594 <builtIn_setCostume>:

builtIn(setCostume)
{
   11594:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11596:	       movea.l 16(sp),a0
   1159a:	       move.l 24(a0),d0
   1159e:	       move.l d0,-(sp)
   115a0:	       jsr 14470 <getCostumeFromVar>
   115a6:	       addq.l #4,sp
   115a8:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   115ac:	   ,-- bne.s 115b2 <builtIn_setCostume+0x1e>
   115ae:	   |   moveq #1,d0
   115b0:	,--|-- bra.s 1160a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115b2:	|  '-> moveq #24,d0
   115b4:	|      add.l 16(sp),d0
   115b8:	|      move.l d0,-(sp)
   115ba:	|      jsr 15148 <trimStack>
   115c0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115c2:	|      movea.l 16(sp),a0
   115c6:	|      move.l 24(a0),d0
   115ca:	|      move.l d0,-(sp)
   115cc:	|      pea 7 <_start+0x7>
   115d0:	|      move.l sp,d0
   115d2:	|      addq.l #8,d0
   115d4:	|      move.l d0,-(sp)
   115d6:	|      jsr 147c4 <getValueType>
   115dc:	|      lea 12(sp),sp
   115e0:	|      tst.w d0
   115e2:	|  ,-- bne.s 115e8 <builtIn_setCostume+0x54>
   115e4:	|  |   moveq #1,d0
   115e6:	+--|-- bra.s 1160a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115e8:	|  '-> moveq #24,d0
   115ea:	|      add.l 16(sp),d0
   115ee:	|      move.l d0,-(sp)
   115f0:	|      jsr 15148 <trimStack>
   115f6:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   115f8:	|      move.l (sp),d0
   115fa:	|      move.l 4(sp),-(sp)
   115fe:	|      move.l d0,-(sp)
   11600:	|      jsr 9424 <animatePersonUsingPersona>
   11606:	|      addq.l #8,sp
	return BR_CONTINUE;
   11608:	|      moveq #2,d0
}
   1160a:	'----> addq.l #8,sp
   1160c:	       rts

0001160e <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1160e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11610:	       movea.l 16(sp),a0
   11614:	       move.l 24(a0),d0
   11618:	       move.l d0,-(sp)
   1161a:	       pea 1 <_start+0x1>
   1161e:	       move.l sp,d0
   11620:	       addq.l #8,d0
   11622:	       move.l d0,-(sp)
   11624:	       jsr 147c4 <getValueType>
   1162a:	       lea 12(sp),sp
   1162e:	       tst.w d0
   11630:	   ,-- bne.s 11636 <builtIn_floatCharacter+0x28>
   11632:	   |   moveq #1,d0
   11634:	,--|-- bra.s 116aa <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11636:	|  '-> moveq #24,d0
   11638:	|      add.l 16(sp),d0
   1163c:	|      move.l d0,-(sp)
   1163e:	|      jsr 15148 <trimStack>
   11644:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11646:	|      movea.l 16(sp),a0
   1164a:	|      move.l 24(a0),d0
   1164e:	|      move.l d0,-(sp)
   11650:	|      pea 7 <_start+0x7>
   11654:	|      moveq #12,d0
   11656:	|      add.l sp,d0
   11658:	|      move.l d0,-(sp)
   1165a:	|      jsr 147c4 <getValueType>
   11660:	|      lea 12(sp),sp
   11664:	|      tst.w d0
   11666:	|  ,-- bne.s 1166c <builtIn_floatCharacter+0x5e>
   11668:	|  |   moveq #1,d0
   1166a:	+--|-- bra.s 116aa <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1166c:	|  '-> moveq #24,d0
   1166e:	|      add.l 16(sp),d0
   11672:	|      move.l d0,-(sp)
   11674:	|      jsr 15148 <trimStack>
   1167a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1167c:	|      move.l 4(sp),d1
   11680:	|      move.l (sp),d0
   11682:	|      move.l d1,-(sp)
   11684:	|      move.l d0,-(sp)
   11686:	|      jsr a5b4 <floatCharacter>
   1168c:	|      addq.l #8,sp
   1168e:	|      movea.w d0,a0
   11690:	|      moveq #28,d0
   11692:	|      add.l 16(sp),d0
   11696:	|      move.l a0,-(sp)
   11698:	|      pea 1 <_start+0x1>
   1169c:	|      move.l d0,-(sp)
   1169e:	|      jsr 150b6 <setVariable>
   116a4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116a8:	|      moveq #2,d0
}
   116aa:	'----> addq.l #8,sp
   116ac:	       rts

000116ae <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   116ae:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116b0:	       movea.l 16(sp),a0
   116b4:	       move.l 24(a0),d0
   116b8:	       move.l d0,-(sp)
   116ba:	       pea 1 <_start+0x1>
   116be:	       move.l sp,d0
   116c0:	       addq.l #8,d0
   116c2:	       move.l d0,-(sp)
   116c4:	       jsr 147c4 <getValueType>
   116ca:	       lea 12(sp),sp
   116ce:	       tst.w d0
   116d0:	   ,-- bne.s 116d6 <builtIn_setCharacterWalkSpeed+0x28>
   116d2:	   |   moveq #1,d0
   116d4:	,--|-- bra.s 1174a <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116d6:	|  '-> moveq #24,d0
   116d8:	|      add.l 16(sp),d0
   116dc:	|      move.l d0,-(sp)
   116de:	|      jsr 15148 <trimStack>
   116e4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116e6:	|      movea.l 16(sp),a0
   116ea:	|      move.l 24(a0),d0
   116ee:	|      move.l d0,-(sp)
   116f0:	|      pea 7 <_start+0x7>
   116f4:	|      moveq #12,d0
   116f6:	|      add.l sp,d0
   116f8:	|      move.l d0,-(sp)
   116fa:	|      jsr 147c4 <getValueType>
   11700:	|      lea 12(sp),sp
   11704:	|      tst.w d0
   11706:	|  ,-- bne.s 1170c <builtIn_setCharacterWalkSpeed+0x5e>
   11708:	|  |   moveq #1,d0
   1170a:	+--|-- bra.s 1174a <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1170c:	|  '-> moveq #24,d0
   1170e:	|      add.l 16(sp),d0
   11712:	|      move.l d0,-(sp)
   11714:	|      jsr 15148 <trimStack>
   1171a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1171c:	|      move.l 4(sp),d1
   11720:	|      move.l (sp),d0
   11722:	|      move.l d1,-(sp)
   11724:	|      move.l d0,-(sp)
   11726:	|      jsr bb74 <setCharacterWalkSpeed>
   1172c:	|      addq.l #8,sp
   1172e:	|      movea.w d0,a0
   11730:	|      moveq #28,d0
   11732:	|      add.l 16(sp),d0
   11736:	|      move.l a0,-(sp)
   11738:	|      pea 1 <_start+0x1>
   1173c:	|      move.l d0,-(sp)
   1173e:	|      jsr 150b6 <setVariable>
   11744:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11748:	|      moveq #2,d0
}
   1174a:	'----> addq.l #8,sp
   1174c:	       rts

0001174e <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1174e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11750:	       movea.l 16(sp),a0
   11754:	       move.l 24(a0),d0
   11758:	       move.l d0,-(sp)
   1175a:	       pea 1 <_start+0x1>
   1175e:	       move.l sp,d0
   11760:	       addq.l #8,d0
   11762:	       move.l d0,-(sp)
   11764:	       jsr 147c4 <getValueType>
   1176a:	       lea 12(sp),sp
   1176e:	       tst.w d0
   11770:	   ,-- bne.s 11776 <builtIn_turnCharacter+0x28>
   11772:	   |   moveq #1,d0
   11774:	,--|-- bra.s 117ea <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11776:	|  '-> moveq #24,d0
   11778:	|      add.l 16(sp),d0
   1177c:	|      move.l d0,-(sp)
   1177e:	|      jsr 15148 <trimStack>
   11784:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11786:	|      movea.l 16(sp),a0
   1178a:	|      move.l 24(a0),d0
   1178e:	|      move.l d0,-(sp)
   11790:	|      pea 7 <_start+0x7>
   11794:	|      moveq #12,d0
   11796:	|      add.l sp,d0
   11798:	|      move.l d0,-(sp)
   1179a:	|      jsr 147c4 <getValueType>
   117a0:	|      lea 12(sp),sp
   117a4:	|      tst.w d0
   117a6:	|  ,-- bne.s 117ac <builtIn_turnCharacter+0x5e>
   117a8:	|  |   moveq #1,d0
   117aa:	+--|-- bra.s 117ea <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117ac:	|  '-> moveq #24,d0
   117ae:	|      add.l 16(sp),d0
   117b2:	|      move.l d0,-(sp)
   117b4:	|      jsr 15148 <trimStack>
   117ba:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   117bc:	|      move.l (sp),d1
   117be:	|      move.l 4(sp),d0
   117c2:	|      move.l d1,-(sp)
   117c4:	|      move.l d0,-(sp)
   117c6:	|      jsr be18 <turnPersonToFace>
   117cc:	|      addq.l #8,sp
   117ce:	|      movea.w d0,a0
   117d0:	|      moveq #28,d0
   117d2:	|      add.l 16(sp),d0
   117d6:	|      move.l a0,-(sp)
   117d8:	|      pea 1 <_start+0x1>
   117dc:	|      move.l d0,-(sp)
   117de:	|      jsr 150b6 <setVariable>
   117e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117e8:	|      moveq #2,d0
}
   117ea:	'----> addq.l #8,sp
   117ec:	       rts

000117ee <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   117ee:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117f0:	       movea.l 16(sp),a0
   117f4:	       move.l 24(a0),d0
   117f8:	       move.l d0,-(sp)
   117fa:	       pea 1 <_start+0x1>
   117fe:	       move.l sp,d0
   11800:	       addq.l #8,d0
   11802:	       move.l d0,-(sp)
   11804:	       jsr 147c4 <getValueType>
   1180a:	       lea 12(sp),sp
   1180e:	       tst.w d0
   11810:	   ,-- bne.s 11816 <builtIn_setCharacterExtra+0x28>
   11812:	   |   moveq #1,d0
   11814:	,--|-- bra.s 1188a <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11816:	|  '-> moveq #24,d0
   11818:	|      add.l 16(sp),d0
   1181c:	|      move.l d0,-(sp)
   1181e:	|      jsr 15148 <trimStack>
   11824:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11826:	|      movea.l 16(sp),a0
   1182a:	|      move.l 24(a0),d0
   1182e:	|      move.l d0,-(sp)
   11830:	|      pea 7 <_start+0x7>
   11834:	|      moveq #12,d0
   11836:	|      add.l sp,d0
   11838:	|      move.l d0,-(sp)
   1183a:	|      jsr 147c4 <getValueType>
   11840:	|      lea 12(sp),sp
   11844:	|      tst.w d0
   11846:	|  ,-- bne.s 1184c <builtIn_setCharacterExtra+0x5e>
   11848:	|  |   moveq #1,d0
   1184a:	+--|-- bra.s 1188a <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1184c:	|  '-> moveq #24,d0
   1184e:	|      add.l 16(sp),d0
   11852:	|      move.l d0,-(sp)
   11854:	|      jsr 15148 <trimStack>
   1185a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1185c:	|      move.l (sp),d1
   1185e:	|      move.l 4(sp),d0
   11862:	|      move.l d1,-(sp)
   11864:	|      move.l d0,-(sp)
   11866:	|      jsr bba2 <setPersonExtra>
   1186c:	|      addq.l #8,sp
   1186e:	|      movea.w d0,a0
   11870:	|      moveq #28,d0
   11872:	|      add.l 16(sp),d0
   11876:	|      move.l a0,-(sp)
   11878:	|      pea 1 <_start+0x1>
   1187c:	|      move.l d0,-(sp)
   1187e:	|      jsr 150b6 <setVariable>
   11884:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11888:	|      moveq #2,d0
}
   1188a:	'----> addq.l #8,sp
   1188c:	       rts

0001188e <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1188e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11890:	       movea.l 12(sp),a0
   11894:	       move.l 24(a0),d0
   11898:	       move.l d0,-(sp)
   1189a:	       pea 7 <_start+0x7>
   1189e:	       move.l sp,d0
   118a0:	       addq.l #8,d0
   118a2:	       move.l d0,-(sp)
   118a4:	       jsr 147c4 <getValueType>
   118aa:	       lea 12(sp),sp
   118ae:	       tst.w d0
   118b0:	   ,-- bne.s 118b6 <builtIn_removeCharacter+0x28>
   118b2:	   |   moveq #1,d0
   118b4:	,--|-- bra.s 118d4 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   118b6:	|  '-> moveq #24,d0
   118b8:	|      add.l 12(sp),d0
   118bc:	|      move.l d0,-(sp)
   118be:	|      jsr 15148 <trimStack>
   118c4:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   118c6:	|      move.l (sp),d0
   118c8:	|      move.l d0,-(sp)
   118ca:	|      jsr ada2 <removeOneCharacter>
   118d0:	|      addq.l #4,sp
	return BR_CONTINUE;
   118d2:	|      moveq #2,d0
}
   118d4:	'----> addq.l #4,sp
   118d6:	       rts

000118d8 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   118d8:	                lea -28(sp),sp
   118dc:	                move.l d2,-(sp)
   118de:	                move.l 44(sp),d1
   118e2:	                move.l 48(sp),d0
   118e6:	                move.w d1,d1
   118e8:	                move.w d1,6(sp)
   118ec:	                move.w d0,d0
   118ee:	                move.w d0,4(sp)
	switch (numParams) {
   118f2:	                moveq #2,d0
   118f4:	                cmp.l 36(sp),d0
   118f8:	      ,-------- beq.w 11a3a <moveChr+0x162>
   118fc:	      |         moveq #3,d0
   118fe:	      |         cmp.l 36(sp),d0
   11902:	,-----|-------- bne.w 11b6e <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11906:	|     |         movea.l 40(sp),a0
   1190a:	|     |         move.l 24(a0),d0
   1190e:	|     |         move.l d0,-(sp)
   11910:	|     |         pea 1 <_start+0x1>
   11914:	|     |         lea 20(sp),a0
   11918:	|     |         move.l a0,-(sp)
   1191a:	|     |         jsr 147c4 <getValueType>
   11920:	|     |         lea 12(sp),sp
   11924:	|     |         tst.w d0
   11926:	|     |     ,-- bne.s 1192e <moveChr+0x56>
   11928:	|     |     |   moveq #1,d0
   1192a:	|  ,--|-----|-- bra.w 11b7e <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1192e:	|  |  |     '-> moveq #24,d0
   11930:	|  |  |         add.l 40(sp),d0
   11934:	|  |  |         move.l d0,-(sp)
   11936:	|  |  |         jsr 15148 <trimStack>
   1193c:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1193e:	|  |  |         movea.l 40(sp),a0
   11942:	|  |  |         move.l 24(a0),d0
   11946:	|  |  |         move.l d0,-(sp)
   11948:	|  |  |         pea 1 <_start+0x1>
   1194c:	|  |  |         lea 24(sp),a0
   11950:	|  |  |         move.l a0,-(sp)
   11952:	|  |  |         jsr 147c4 <getValueType>
   11958:	|  |  |         lea 12(sp),sp
   1195c:	|  |  |         tst.w d0
   1195e:	|  |  |     ,-- bne.s 11966 <moveChr+0x8e>
   11960:	|  |  |     |   moveq #1,d0
   11962:	|  +--|-----|-- bra.w 11b7e <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11966:	|  |  |     '-> moveq #24,d0
   11968:	|  |  |         add.l 40(sp),d0
   1196c:	|  |  |         move.l d0,-(sp)
   1196e:	|  |  |         jsr 15148 <trimStack>
   11974:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11976:	|  |  |         movea.l 40(sp),a0
   1197a:	|  |  |         move.l 24(a0),d0
   1197e:	|  |  |         move.l d0,-(sp)
   11980:	|  |  |         pea 7 <_start+0x7>
   11984:	|  |  |         lea 16(sp),a0
   11988:	|  |  |         move.l a0,-(sp)
   1198a:	|  |  |         jsr 147c4 <getValueType>
   11990:	|  |  |         lea 12(sp),sp
   11994:	|  |  |         tst.w d0
   11996:	|  |  |     ,-- bne.s 1199e <moveChr+0xc6>
   11998:	|  |  |     |   moveq #1,d0
   1199a:	|  +--|-----|-- bra.w 11b7e <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1199e:	|  |  |     '-> moveq #24,d0
   119a0:	|  |  |         add.l 40(sp),d0
   119a4:	|  |  |         move.l d0,-(sp)
   119a6:	|  |  |         jsr 15148 <trimStack>
   119ac:	|  |  |         addq.l #4,sp

			if (force) {
   119ae:	|  |  |         tst.w 6(sp)
   119b2:	|  |  |     ,-- beq.s 119e2 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   119b4:	|  |  |     |   movea.l 8(sp),a0
   119b8:	|  |  |     |   move.l 12(sp),d1
   119bc:	|  |  |     |   move.l 16(sp),d0
   119c0:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4bbe>
   119c4:	|  |  |     |   move.l 44(sp),-(sp)
   119c8:	|  |  |     |   move.l a0,-(sp)
   119ca:	|  |  |     |   move.l d1,-(sp)
   119cc:	|  |  |     |   move.l d0,-(sp)
   119ce:	|  |  |     |   jsr a5d8 <forceWalkingPerson>
   119d4:	|  |  |     |   lea 20(sp),sp
   119d8:	|  |  |     |   tst.w d0
   119da:	|  |  |  ,--|-- beq.s 11a34 <moveChr+0x15c>
   119dc:	|  |  |  |  |   moveq #3,d0
   119de:	|  +--|--|--|-- bra.w 11b7e <moveChr+0x2a6>
			} else if (immediate) {
   119e2:	|  |  |  |  '-> tst.w 4(sp)
   119e6:	|  |  |  |  ,-- beq.s 11a06 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   119e8:	|  |  |  |  |   movea.l 8(sp),a0
   119ec:	|  |  |  |  |   move.l 12(sp),d1
   119f0:	|  |  |  |  |   move.l 16(sp),d0
   119f4:	|  |  |  |  |   move.l a0,-(sp)
   119f6:	|  |  |  |  |   move.l d1,-(sp)
   119f8:	|  |  |  |  |   move.l d0,-(sp)
   119fa:	|  |  |  |  |   jsr a8ee <jumpPerson>
   11a00:	|  |  |  |  |   lea 12(sp),sp
   11a04:	|  |  |  +--|-- bra.s 11a34 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a06:	|  |  |  |  '-> movea.l 8(sp),a0
   11a0a:	|  |  |  |      move.l 12(sp),d1
   11a0e:	|  |  |  |      move.l 16(sp),d0
   11a12:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4bbe>
   11a16:	|  |  |  |      move.l 44(sp),-(sp)
   11a1a:	|  |  |  |      move.l a0,-(sp)
   11a1c:	|  |  |  |      move.l d1,-(sp)
   11a1e:	|  |  |  |      move.l d0,-(sp)
   11a20:	|  |  |  |      jsr aabe <makeWalkingPerson>
   11a26:	|  |  |  |      lea 20(sp),sp
   11a2a:	|  |  |  |      tst.w d0
   11a2c:	|  |  |  +----- beq.s 11a34 <moveChr+0x15c>
   11a2e:	|  |  |  |      moveq #3,d0
   11a30:	|  +--|--|----- bra.w 11b7e <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a34:	|  |  |  '----> moveq #2,d0
   11a36:	|  +--|-------- bra.w 11b7e <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a3a:	|  |  '-------> movea.l 40(sp),a0
   11a3e:	|  |            move.l 24(a0),d0
   11a42:	|  |            move.l d0,-(sp)
   11a44:	|  |            pea 7 <_start+0x7>
   11a48:	|  |            moveq #32,d0
   11a4a:	|  |            add.l sp,d0
   11a4c:	|  |            move.l d0,-(sp)
   11a4e:	|  |            jsr 147c4 <getValueType>
   11a54:	|  |            lea 12(sp),sp
   11a58:	|  |            tst.w d0
   11a5a:	|  |        ,-- bne.s 11a62 <moveChr+0x18a>
   11a5c:	|  |        |   moveq #1,d0
   11a5e:	|  +--------|-- bra.w 11b7e <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a62:	|  |        '-> moveq #24,d0
   11a64:	|  |            add.l 40(sp),d0
   11a68:	|  |            move.l d0,-(sp)
   11a6a:	|  |            jsr 15148 <trimStack>
   11a70:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a72:	|  |            movea.l 40(sp),a0
   11a76:	|  |            move.l 24(a0),d0
   11a7a:	|  |            move.l d0,-(sp)
   11a7c:	|  |            pea 7 <_start+0x7>
   11a80:	|  |            lea 28(sp),a0
   11a84:	|  |            move.l a0,-(sp)
   11a86:	|  |            jsr 147c4 <getValueType>
   11a8c:	|  |            lea 12(sp),sp
   11a90:	|  |            tst.w d0
   11a92:	|  |        ,-- bne.s 11a9a <moveChr+0x1c2>
   11a94:	|  |        |   moveq #1,d0
   11a96:	|  +--------|-- bra.w 11b7e <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a9a:	|  |        '-> moveq #24,d0
   11a9c:	|  |            add.l 40(sp),d0
   11aa0:	|  |            move.l d0,-(sp)
   11aa2:	|  |            jsr 15148 <trimStack>
   11aa8:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11aaa:	|  |            move.l 24(sp),d0
   11aae:	|  |            move.l d0,-(sp)
   11ab0:	|  |            jsr 15a86 <getRegionForObject>
   11ab6:	|  |            addq.l #4,sp
   11ab8:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11abc:	|  |        ,-- bne.s 11ac4 <moveChr+0x1ec>
   11abe:	|  |        |   moveq #2,d0
   11ac0:	|  +--------|-- bra.w 11b7e <moveChr+0x2a6>

			if (force)
   11ac4:	|  |        '-> tst.w 6(sp)
   11ac8:	|  |        ,-- beq.s 11b04 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11aca:	|  |        |   movea.l 28(sp),a0
   11ace:	|  |        |   move.l 24(a0),d2
   11ad2:	|  |        |   movea.l 20(sp),a1
   11ad6:	|  |        |   movea.l 28(sp),a0
   11ada:	|  |        |   move.l 20(a0),d1
   11ade:	|  |        |   movea.l 28(sp),a0
   11ae2:	|  |        |   move.l 16(a0),d0
   11ae6:	|  |        |   move.l d2,-(sp)
   11ae8:	|  |        |   move.l 44(sp),-(sp)
   11aec:	|  |        |   move.l a1,-(sp)
   11aee:	|  |        |   move.l d1,-(sp)
   11af0:	|  |        |   move.l d0,-(sp)
   11af2:	|  |        |   jsr a5d8 <forceWalkingPerson>
   11af8:	|  |        |   lea 20(sp),sp
   11afc:	|  |        |   tst.w d0
   11afe:	|  |     ,--|-- beq.s 11b6a <moveChr+0x292>
   11b00:	|  |     |  |   moveq #3,d0
   11b02:	|  +-----|--|-- bra.s 11b7e <moveChr+0x2a6>
			}
			else if (immediate)
   11b04:	|  |     |  '-> tst.w 4(sp)
   11b08:	|  |     |  ,-- beq.s 11b30 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b0a:	|  |     |  |   movea.l 20(sp),a1
   11b0e:	|  |     |  |   movea.l 28(sp),a0
   11b12:	|  |     |  |   move.l 20(a0),d1
   11b16:	|  |     |  |   movea.l 28(sp),a0
   11b1a:	|  |     |  |   move.l 16(a0),d0
   11b1e:	|  |     |  |   move.l a1,-(sp)
   11b20:	|  |     |  |   move.l d1,-(sp)
   11b22:	|  |     |  |   move.l d0,-(sp)
   11b24:	|  |     |  |   jsr a8ee <jumpPerson>
   11b2a:	|  |     |  |   lea 12(sp),sp
   11b2e:	|  |     +--|-- bra.s 11b6a <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b30:	|  |     |  '-> movea.l 28(sp),a0
   11b34:	|  |     |      move.l 24(a0),d2
   11b38:	|  |     |      movea.l 20(sp),a1
   11b3c:	|  |     |      movea.l 28(sp),a0
   11b40:	|  |     |      move.l 20(a0),d1
   11b44:	|  |     |      movea.l 28(sp),a0
   11b48:	|  |     |      move.l 16(a0),d0
   11b4c:	|  |     |      move.l d2,-(sp)
   11b4e:	|  |     |      move.l 44(sp),-(sp)
   11b52:	|  |     |      move.l a1,-(sp)
   11b54:	|  |     |      move.l d1,-(sp)
   11b56:	|  |     |      move.l d0,-(sp)
   11b58:	|  |     |      jsr aabe <makeWalkingPerson>
   11b5e:	|  |     |      lea 20(sp),sp
   11b62:	|  |     |      tst.w d0
   11b64:	|  |     +----- beq.s 11b6a <moveChr+0x292>
   11b66:	|  |     |      moveq #3,d0
   11b68:	|  +-----|----- bra.s 11b7e <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b6a:	|  |     '----> moveq #2,d0
   11b6c:	|  +----------- bra.s 11b7e <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11b6e:	'--|----------> pea 19d07 <talk.c.490538ff+0x2f8>
   11b74:	   |            jsr 172a4 <KPrintF>
   11b7a:	   |            addq.l #4,sp
			return BR_ERROR;
   11b7c:	   |            moveq #1,d0
	}
}
   11b7e:	   '----------> move.l (sp)+,d2
   11b80:	                lea 28(sp),sp
   11b84:	                rts

00011b86 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11b86:	clr.l -(sp)
   11b88:	clr.l -(sp)
   11b8a:	move.l 16(sp),-(sp)
   11b8e:	move.l 16(sp),-(sp)
   11b92:	jsr 118d8 <moveChr>
   11b98:	lea 16(sp),sp
}
   11b9c:	rts

00011b9e <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11b9e:	clr.l -(sp)
   11ba0:	pea 1 <_start+0x1>
   11ba4:	move.l 16(sp),-(sp)
   11ba8:	move.l 16(sp),-(sp)
   11bac:	jsr 118d8 <moveChr>
   11bb2:	lea 16(sp),sp
}
   11bb6:	rts

00011bb8 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11bb8:	pea 1 <_start+0x1>
   11bbc:	clr.l -(sp)
   11bbe:	move.l 16(sp),-(sp)
   11bc2:	move.l 16(sp),-(sp)
   11bc6:	jsr 118d8 <moveChr>
   11bcc:	lea 16(sp),sp
}
   11bd0:	rts

00011bd2 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11bd2:	jsr 825c <clearStatusBar>
	return BR_CONTINUE;
   11bd8:	moveq #2,d0
}
   11bda:	rts

00011bdc <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11bdc:	jsr 8304 <killLastStatus>
	return BR_CONTINUE;
   11be2:	moveq #2,d0
}
   11be4:	rts

00011be6 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11be6:	jsr 81f2 <addStatusBar>
	return BR_CONTINUE;
   11bec:	moveq #2,d0
}
   11bee:	rts

00011bf0 <builtIn_statusText>:

builtIn(statusText)
{
   11bf0:	       subq.l #8,sp
   11bf2:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11bf4:	       movea.l 20(sp),a0
   11bf8:	       move.l 24(a0),d0
   11bfc:	       move.l d0,-(sp)
   11bfe:	       jsr 14d9a <getTextFromAnyVar>
   11c04:	       addq.l #4,sp
   11c06:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c0a:	   ,-- bne.s 11c10 <builtIn_statusText+0x20>
   11c0c:	   |   moveq #1,d0
   11c0e:	,--|-- bra.s 11c44 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c10:	|  '-> moveq #24,d0
   11c12:	|      add.l 20(sp),d0
   11c16:	|      move.l d0,-(sp)
   11c18:	|      jsr 15148 <trimStack>
   11c1e:	|      addq.l #4,sp
	setStatusBar(newText);
   11c20:	|      move.l 8(sp),-(sp)
   11c24:	|      jsr 8584 <setStatusBar>
   11c2a:	|      addq.l #4,sp
	FreeVec(newText);
   11c2c:	|      move.l 8(sp),4(sp)
   11c32:	|      move.l 1caf2 <SysBase>,d0
   11c38:	|      movea.l d0,a6
   11c3a:	|      movea.l 4(sp),a1
   11c3e:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c42:	|      moveq #2,d0
}
   11c44:	'----> movea.l (sp)+,a6
   11c46:	       addq.l #8,sp
   11c48:	       rts

00011c4a <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11c4a:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c4c:	       movea.l 12(sp),a0
   11c50:	       move.l 24(a0),d0
   11c54:	       move.l d0,-(sp)
   11c56:	       pea 1 <_start+0x1>
   11c5a:	       move.l sp,d0
   11c5c:	       addq.l #8,d0
   11c5e:	       move.l d0,-(sp)
   11c60:	       jsr 147c4 <getValueType>
   11c66:	       lea 12(sp),sp
   11c6a:	       tst.w d0
   11c6c:	   ,-- bne.s 11c72 <builtIn_lightStatus+0x28>
   11c6e:	   |   moveq #1,d0
   11c70:	,--|-- bra.s 11c90 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11c72:	|  '-> moveq #24,d0
   11c74:	|      add.l 12(sp),d0
   11c78:	|      move.l d0,-(sp)
   11c7a:	|      jsr 15148 <trimStack>
   11c80:	|      addq.l #4,sp
	setLitStatus (val);
   11c82:	|      move.l (sp),d0
   11c84:	|      move.l d0,-(sp)
   11c86:	|      jsr 8574 <setLitStatus>
   11c8c:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c8e:	|      moveq #2,d0
}
   11c90:	'----> addq.l #4,sp
   11c92:	       rts

00011c94 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11c94:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c96:	       movea.l 16(sp),a0
   11c9a:	       move.l 24(a0),d0
   11c9e:	       move.l d0,-(sp)
   11ca0:	       pea 1 <_start+0x1>
   11ca4:	       move.l sp,d0
   11ca6:	       addq.l #8,d0
   11ca8:	       move.l d0,-(sp)
   11caa:	       jsr 147c4 <getValueType>
   11cb0:	       lea 12(sp),sp
   11cb4:	       tst.w d0
   11cb6:	   ,-- bne.s 11cbc <builtIn_positionStatus+0x28>
   11cb8:	   |   moveq #1,d0
   11cba:	,--|-- bra.s 11d16 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11cbc:	|  '-> moveq #24,d0
   11cbe:	|      add.l 16(sp),d0
   11cc2:	|      move.l d0,-(sp)
   11cc4:	|      jsr 15148 <trimStack>
   11cca:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ccc:	|      movea.l 16(sp),a0
   11cd0:	|      move.l 24(a0),d0
   11cd4:	|      move.l d0,-(sp)
   11cd6:	|      pea 1 <_start+0x1>
   11cda:	|      moveq #12,d0
   11cdc:	|      add.l sp,d0
   11cde:	|      move.l d0,-(sp)
   11ce0:	|      jsr 147c4 <getValueType>
   11ce6:	|      lea 12(sp),sp
   11cea:	|      tst.w d0
   11cec:	|  ,-- bne.s 11cf2 <builtIn_positionStatus+0x5e>
   11cee:	|  |   moveq #1,d0
   11cf0:	+--|-- bra.s 11d16 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11cf2:	|  '-> moveq #24,d0
   11cf4:	|      add.l 16(sp),d0
   11cf8:	|      move.l d0,-(sp)
   11cfa:	|      jsr 15148 <trimStack>
   11d00:	|      addq.l #4,sp
	positionStatus (x, y);
   11d02:	|      move.l (sp),d1
   11d04:	|      move.l 4(sp),d0
   11d08:	|      move.l d1,-(sp)
   11d0a:	|      move.l d0,-(sp)
   11d0c:	|      jsr 8366 <positionStatus>
   11d12:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d14:	|      moveq #2,d0
}
   11d16:	'----> addq.l #8,sp
   11d18:	       rts

00011d1a <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d1a:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d1c:	       movea.l 12(sp),a0
   11d20:	       move.l 24(a0),d0
   11d24:	       move.l d0,-(sp)
   11d26:	       pea 1 <_start+0x1>
   11d2a:	       move.l sp,d0
   11d2c:	       addq.l #8,d0
   11d2e:	       move.l d0,-(sp)
   11d30:	       jsr 147c4 <getValueType>
   11d36:	       lea 12(sp),sp
   11d3a:	       tst.w d0
   11d3c:	   ,-- bne.s 11d42 <builtIn_alignStatus+0x28>
   11d3e:	   |   moveq #1,d0
   11d40:	,--|-- bra.s 11d62 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11d42:	|  '-> moveq #24,d0
   11d44:	|      add.l 12(sp),d0
   11d48:	|      move.l d0,-(sp)
   11d4a:	|      jsr 15148 <trimStack>
   11d50:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11d52:	|      move.l (sp),d0
   11d54:	|      movea.l 1c470 <nowStatus>,a0
   11d5a:	|      move.l d0,d0
   11d5c:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11d60:	|      moveq #2,d0
}
   11d62:	'----> addq.l #4,sp
   11d64:	       rts

00011d66 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11d66:	             tst.l 4(sp)
   11d6a:	      ,----- beq.s 11d76 <getFuncNumForCallback+0x10>
   11d6c:	      |      moveq #1,d0
   11d6e:	      |      cmp.l 4(sp),d0
   11d72:	      |  ,-- beq.s 11d7c <getFuncNumForCallback+0x16>
   11d74:	   ,--|--|-- bra.s 11db2 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11d76:	   |  '--|-> clr.l 12(sp)
			break;
   11d7a:	,--|-----|-- bra.s 11dc4 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11d7c:	|  |     '-> movea.l 8(sp),a0
   11d80:	|  |         move.l 24(a0),d0
   11d84:	|  |         move.l d0,-(sp)
   11d86:	|  |         pea 2 <_start+0x2>
   11d8a:	|  |         move.l 20(sp),-(sp)
   11d8e:	|  |         jsr 147c4 <getValueType>
   11d94:	|  |         lea 12(sp),sp
   11d98:	|  |         tst.w d0
   11d9a:	|  |     ,-- bne.s 11da0 <getFuncNumForCallback+0x3a>
   11d9c:	|  |     |   clr.w d0
   11d9e:	|  |  ,--|-- bra.s 11dc6 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11da0:	|  |  |  '-> moveq #24,d0
   11da2:	|  |  |      add.l 8(sp),d0
   11da6:	|  |  |      move.l d0,-(sp)
   11da8:	|  |  |      jsr 15148 <trimStack>
   11dae:	|  |  |      addq.l #4,sp
			break;
   11db0:	+--|--|----- bra.s 11dc4 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11db2:	|  '--|----> pea 19d3d <talk.c.490538ff+0x32e>
   11db8:	|     |      jsr 172a4 <KPrintF>
   11dbe:	|     |      addq.l #4,sp
			return FALSE;
   11dc0:	|     |      clr.w d0
   11dc2:	|     +----- bra.s 11dc6 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11dc4:	'-----|----> moveq #1,d0
}
   11dc6:	      '----> rts

00011dc8 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11dc8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dca:	       move.l sp,d0
   11dcc:	       move.l d0,-(sp)
   11dce:	       move.l 16(sp),-(sp)
   11dd2:	       move.l 16(sp),-(sp)
   11dd6:	       jsr 11d66 <getFuncNumForCallback>
   11ddc:	       lea 12(sp),sp
   11de0:	       tst.w d0
   11de2:	,----- beq.s 11df2 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11de4:	|      movea.l 1c462 <currentEvents>,a0
   11dea:	|      move.l (sp),d0
   11dec:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11dee:	|      moveq #2,d0
   11df0:	|  ,-- bra.s 11df4 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11df2:	'--|-> moveq #1,d0
}
   11df4:	   '-> addq.l #4,sp
   11df6:	       rts

00011df8 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11df8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dfa:	       move.l sp,d0
   11dfc:	       move.l d0,-(sp)
   11dfe:	       move.l 16(sp),-(sp)
   11e02:	       move.l 16(sp),-(sp)
   11e06:	       jsr 11d66 <getFuncNumForCallback>
   11e0c:	       lea 12(sp),sp
   11e10:	       tst.w d0
   11e12:	,----- beq.s 11e24 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e14:	|      movea.l 1c462 <currentEvents>,a0
   11e1a:	|      move.l (sp),d0
   11e1c:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11e20:	|      moveq #2,d0
   11e22:	|  ,-- bra.s 11e26 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e24:	'--|-> moveq #1,d0
}
   11e26:	   '-> addq.l #4,sp
   11e28:	       rts

00011e2a <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e2a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e2c:	       move.l sp,d0
   11e2e:	       move.l d0,-(sp)
   11e30:	       move.l 16(sp),-(sp)
   11e34:	       move.l 16(sp),-(sp)
   11e38:	       jsr 11d66 <getFuncNumForCallback>
   11e3e:	       lea 12(sp),sp
   11e42:	       tst.w d0
   11e44:	,----- beq.s 11e56 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11e46:	|      movea.l 1c462 <currentEvents>,a0
   11e4c:	|      move.l (sp),d0
   11e4e:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11e52:	|      moveq #2,d0
   11e54:	|  ,-- bra.s 11e58 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11e56:	'--|-> moveq #1,d0
}
   11e58:	   '-> addq.l #4,sp
   11e5a:	       rts

00011e5c <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11e5c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e5e:	       move.l sp,d0
   11e60:	       move.l d0,-(sp)
   11e62:	       move.l 16(sp),-(sp)
   11e66:	       move.l 16(sp),-(sp)
   11e6a:	       jsr 11d66 <getFuncNumForCallback>
   11e70:	       lea 12(sp),sp
   11e74:	       tst.w d0
   11e76:	,----- beq.s 11e88 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11e78:	|      movea.l 1c462 <currentEvents>,a0
   11e7e:	|      move.l (sp),d0
   11e80:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11e84:	|      moveq #2,d0
   11e86:	|  ,-- bra.s 11e8a <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11e88:	'--|-> moveq #1,d0
}
   11e8a:	   '-> addq.l #4,sp
   11e8c:	       rts

00011e8e <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11e8e:	          subq.l #8,sp
   11e90:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e92:	          move.l sp,d0
   11e94:	          addq.l #4,d0
   11e96:	          move.l d0,-(sp)
   11e98:	          move.l 24(sp),-(sp)
   11e9c:	          move.l 24(sp),-(sp)
   11ea0:	          jsr 11d66 <getFuncNumForCallback>
   11ea6:	          lea 12(sp),sp
   11eaa:	          tst.w d0
   11eac:	,-------- beq.s 11f0a <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   11eae:	|         movea.l 1c462 <currentEvents>,a0
   11eb4:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   11eba:	|         move.l 4(sp),d0
   11ebe:	|  ,----- beq.s 11eda <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   11ec0:	|  |      move.l 4(sp),d0
   11ec4:	|  |      movea.l 1c462 <currentEvents>,a2
   11eca:	|  |      move.l d0,-(sp)
   11ecc:	|  |      jsr 7070 <preloadNewFunctionNum>
   11ed2:	|  |      addq.l #4,sp
   11ed4:	|  |      move.l d0,20(a2)
   11ed8:	|  |  ,-- bra.s 11ee4 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   11eda:	|  '--|-> movea.l 1c462 <currentEvents>,a0
   11ee0:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   11ee4:	|     '-> tst.l 8(sp)
   11ee8:	|     ,-- beq.s 11f06 <builtIn_onFocusChange+0x78>
   11eea:	|     |   movea.l 1c462 <currentEvents>,a0
   11ef0:	|     |   move.l 20(a0),d0
   11ef4:	|     |   cmp.l 8(sp),d0
   11ef8:	|     +-- beq.s 11f06 <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   11efa:	|     |   move.l 8(sp),-(sp)
   11efe:	|     |   jsr 74de <unloadFunction>
   11f04:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   11f06:	|     '-> moveq #2,d0
   11f08:	|     ,-- bra.s 11f0c <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   11f0a:	'-----|-> moveq #1,d0
}
   11f0c:	      '-> movea.l (sp)+,a2
   11f0e:	          addq.l #8,sp
   11f10:	          rts

00011f12 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11f12:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f14:	       move.l sp,d0
   11f16:	       move.l d0,-(sp)
   11f18:	       move.l 16(sp),-(sp)
   11f1c:	       move.l 16(sp),-(sp)
   11f20:	       jsr 11d66 <getFuncNumForCallback>
   11f26:	       lea 12(sp),sp
   11f2a:	       tst.w d0
   11f2c:	,----- beq.s 11f3e <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11f2e:	|      movea.l 1c462 <currentEvents>,a0
   11f34:	|      move.l (sp),d0
   11f36:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11f3a:	|      moveq #2,d0
   11f3c:	|  ,-- bra.s 11f40 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f3e:	'--|-> moveq #1,d0
}
   11f40:	   '-> addq.l #4,sp
   11f42:	       rts

00011f44 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f44:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f46:	       move.l sp,d0
   11f48:	       move.l d0,-(sp)
   11f4a:	       move.l 16(sp),-(sp)
   11f4e:	       move.l 16(sp),-(sp)
   11f52:	       jsr 11d66 <getFuncNumForCallback>
   11f58:	       lea 12(sp),sp
   11f5c:	       tst.w d0
   11f5e:	,----- beq.s 11f70 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f60:	|      movea.l 1c462 <currentEvents>,a0
   11f66:	|      move.l (sp),d0
   11f68:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11f6c:	|      moveq #2,d0
   11f6e:	|  ,-- bra.s 11f72 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11f70:	'--|-> moveq #1,d0
}
   11f72:	   '-> addq.l #4,sp
   11f74:	       rts

00011f76 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11f76:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f78:	          move.l sp,d0
   11f7a:	          move.l d0,-(sp)
   11f7c:	          move.l 16(sp),-(sp)
   11f80:	          move.l 16(sp),-(sp)
   11f84:	          jsr 11d66 <getFuncNumForCallback>
   11f8a:	          lea 12(sp),sp
   11f8e:	          tst.w d0
   11f90:	,-------- beq.s 11fbc <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11f92:	|         move.l 1cac2 <noStack>,d1
   11f98:	|         move.l (sp),d0
   11f9a:	|         pea 1 <_start+0x1>
   11f9e:	|         move.l d1,-(sp)
   11fa0:	|         clr.l -(sp)
   11fa2:	|         clr.l -(sp)
   11fa4:	|         move.l d0,-(sp)
   11fa6:	|         jsr 7432 <startNewFunctionNum>
   11fac:	|         lea 20(sp),sp
   11fb0:	|         tst.l d0
   11fb2:	|     ,-- bne.s 11fb8 <builtIn_spawnSub+0x42>
   11fb4:	|     |   moveq #1,d0
   11fb6:	|  ,--|-- bra.s 11fbe <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11fb8:	|  |  '-> moveq #2,d0
   11fba:	|  +----- bra.s 11fbe <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11fbc:	'--|----> moveq #1,d0
}
   11fbe:	   '----> addq.l #4,sp
   11fc0:	          rts

00011fc2 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11fc2:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fc4:	          move.l sp,d0
   11fc6:	          addq.l #4,d0
   11fc8:	          move.l d0,-(sp)
   11fca:	          move.l 20(sp),-(sp)
   11fce:	          move.l 20(sp),-(sp)
   11fd2:	          jsr 11d66 <getFuncNumForCallback>
   11fd8:	          lea 12(sp),sp
   11fdc:	          tst.w d0
   11fde:	,-------- beq.s 12014 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11fe0:	|         move.l 4(sp),d1
   11fe4:	|         move.l sp,d0
   11fe6:	|         addq.l #2,d0
   11fe8:	|         move.l d0,-(sp)
   11fea:	|         move.l 20(sp),-(sp)
   11fee:	|         move.l d1,-(sp)
   11ff0:	|         jsr 5072 <cancelAFunction>
   11ff6:	|         lea 12(sp),sp
		if (killedMyself) {
   11ffa:	|         move.w 2(sp),d0
   11ffe:	|  ,----- beq.s 12010 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12000:	|  |      move.l 16(sp),-(sp)
   12004:	|  |      jsr 4f64 <abortFunction>
   1200a:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1200c:	|  |      moveq #5,d0
   1200e:	|  |  ,-- bra.s 12016 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12010:	|  '--|-> moveq #2,d0
   12012:	|     +-- bra.s 12016 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12014:	'-----|-> moveq #1,d0
}
   12016:	      '-> addq.l #8,sp
   12018:	          rts

0001201a <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1201a:	       subq.l #8,sp
   1201c:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   1201e:	       movea.l 20(sp),a0
   12022:	       move.l 24(a0),d0
   12026:	       move.l d0,-(sp)
   12028:	       jsr 14d9a <getTextFromAnyVar>
   1202e:	       addq.l #4,sp
   12030:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12034:	   ,-- bne.s 1203a <builtIn_stringWidth+0x20>
   12036:	   |   moveq #1,d0
   12038:	,--|-- bra.s 12088 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1203a:	|  '-> moveq #24,d0
   1203c:	|      add.l 20(sp),d0
   12040:	|      move.l d0,-(sp)
   12042:	|      jsr 15148 <trimStack>
   12048:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1204a:	|      move.l 8(sp),-(sp)
   1204e:	|      jsr 158ae <stringWidth>
   12054:	|      addq.l #4,sp
   12056:	|      move.l d0,d1
   12058:	|      moveq #28,d0
   1205a:	|      add.l 20(sp),d0
   1205e:	|      move.l d1,-(sp)
   12060:	|      pea 1 <_start+0x1>
   12064:	|      move.l d0,-(sp)
   12066:	|      jsr 150b6 <setVariable>
   1206c:	|      lea 12(sp),sp
	FreeVec(theText);
   12070:	|      move.l 8(sp),4(sp)
   12076:	|      move.l 1caf2 <SysBase>,d0
   1207c:	|      movea.l d0,a6
   1207e:	|      movea.l 4(sp),a1
   12082:	|      jsr -690(a6)
	return BR_CONTINUE;
   12086:	|      moveq #2,d0
}
   12088:	'----> movea.l (sp)+,a6
   1208a:	       addq.l #8,sp
   1208c:	       rts

0001208e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1208e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12090:	       movea.l 12(sp),a0
   12094:	       move.l 24(a0),d0
   12098:	       move.l d0,-(sp)
   1209a:	       pea 1 <_start+0x1>
   1209e:	       move.l sp,d0
   120a0:	       addq.l #8,d0
   120a2:	       move.l d0,-(sp)
   120a4:	       jsr 147c4 <getValueType>
   120aa:	       lea 12(sp),sp
   120ae:	       tst.w d0
   120b0:	   ,-- bne.s 120b6 <builtIn_hardScroll+0x28>
   120b2:	   |   moveq #1,d0
   120b4:	,--|-- bra.s 120d4 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   120b6:	|  '-> moveq #24,d0
   120b8:	|      add.l 12(sp),d0
   120bc:	|      move.l d0,-(sp)
   120be:	|      jsr 15148 <trimStack>
   120c4:	|      addq.l #4,sp
	hardScroll (v);
   120c6:	|      move.l (sp),d0
   120c8:	|      move.l d0,-(sp)
   120ca:	|      jsr d22a <hardScroll>
   120d0:	|      addq.l #4,sp
	return BR_CONTINUE;
   120d2:	|      moveq #2,d0
}
   120d4:	'----> addq.l #4,sp
   120d6:	       rts

000120d8 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   120d8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120da:	       movea.l 12(sp),a0
   120de:	       move.l 24(a0),d0
   120e2:	       move.l d0,-(sp)
   120e4:	       pea 7 <_start+0x7>
   120e8:	       move.l sp,d0
   120ea:	       addq.l #8,d0
   120ec:	       move.l d0,-(sp)
   120ee:	       jsr 147c4 <getValueType>
   120f4:	       lea 12(sp),sp
   120f8:	       tst.w d0
   120fa:	   ,-- bne.s 12100 <builtIn_isScreenRegion+0x28>
   120fc:	   |   moveq #1,d0
   120fe:	,--|-- bra.s 12140 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12100:	|  '-> moveq #24,d0
   12102:	|      add.l 12(sp),d0
   12106:	|      move.l d0,-(sp)
   12108:	|      jsr 15148 <trimStack>
   1210e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12110:	|      move.l (sp),d0
   12112:	|      move.l d0,-(sp)
   12114:	|      jsr 15a86 <getRegionForObject>
   1211a:	|      addq.l #4,sp
   1211c:	|      tst.l d0
   1211e:	|      sne d0
   12120:	|      neg.b d0
   12122:	|      moveq #0,d1
   12124:	|      move.b d0,d1
   12126:	|      moveq #28,d0
   12128:	|      add.l 12(sp),d0
   1212c:	|      move.l d1,-(sp)
   1212e:	|      pea 1 <_start+0x1>
   12132:	|      move.l d0,-(sp)
   12134:	|      jsr 150b6 <setVariable>
   1213a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1213e:	|      moveq #2,d0
}
   12140:	'----> addq.l #4,sp
   12142:	       rts

00012144 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12144:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12146:	       movea.l 12(sp),a0
   1214a:	       move.l 24(a0),d0
   1214e:	       move.l d0,-(sp)
   12150:	       pea 1 <_start+0x1>
   12154:	       move.l sp,d0
   12156:	       addq.l #8,d0
   12158:	       move.l d0,-(sp)
   1215a:	       jsr 147c4 <getValueType>
   12160:	       lea 12(sp),sp
   12164:	       tst.w d0
   12166:	   ,-- bne.s 1216c <builtIn_setSpeechSpeed+0x28>
   12168:	   |   moveq #1,d0
   1216a:	,--|-- bra.s 121ba <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1216c:	|  '-> moveq #24,d0
   1216e:	|      add.l 12(sp),d0
   12172:	|      move.l d0,-(sp)
   12174:	|      jsr 15148 <trimStack>
   1217a:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1217c:	|      move.l (sp),d0
   1217e:	|      move.l d0,-(sp)
   12180:	|      jsr 176d6 <__floatsisf>
   12186:	|      addq.l #4,sp
   12188:	|      move.l #1008981770,-(sp)
   1218e:	|      move.l d0,-(sp)
   12190:	|      jsr 17788 <__mulsf3>
   12196:	|      addq.l #8,sp
   12198:	|      move.l d0,1c45c <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1219e:	|      moveq #28,d0
   121a0:	|      add.l 12(sp),d0
   121a4:	|      pea 1 <_start+0x1>
   121a8:	|      pea 1 <_start+0x1>
   121ac:	|      move.l d0,-(sp)
   121ae:	|      jsr 150b6 <setVariable>
   121b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121b8:	|      moveq #2,d0
}
   121ba:	'----> addq.l #4,sp
   121bc:	       rts

000121be <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   121be:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121c0:	       movea.l 12(sp),a0
   121c4:	       move.l 24(a0),d0
   121c8:	       move.l d0,-(sp)
   121ca:	       pea 1 <_start+0x1>
   121ce:	       move.l sp,d0
   121d0:	       addq.l #8,d0
   121d2:	       move.l d0,-(sp)
   121d4:	       jsr 147c4 <getValueType>
   121da:	       lea 12(sp),sp
   121de:	       tst.w d0
   121e0:	   ,-- bne.s 121e6 <builtIn_setFontSpacing+0x28>
   121e2:	   |   moveq #1,d0
   121e4:	,--|-- bra.s 1221c <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   121e6:	|  '-> move.l (sp),d0
   121e8:	|      move.l d0,d0
   121ea:	|      move.w d0,1c9ea <fontSpace>
	trimStack (&fun -> stack);
   121f0:	|      moveq #24,d0
   121f2:	|      add.l 12(sp),d0
   121f6:	|      move.l d0,-(sp)
   121f8:	|      jsr 15148 <trimStack>
   121fe:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12200:	|      moveq #28,d0
   12202:	|      add.l 12(sp),d0
   12206:	|      pea 1 <_start+0x1>
   1220a:	|      pea 1 <_start+0x1>
   1220e:	|      move.l d0,-(sp)
   12210:	|      jsr 150b6 <setVariable>
   12216:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1221a:	|      moveq #2,d0
}
   1221c:	'----> addq.l #4,sp
   1221e:	       rts

00012220 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12220:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12222:	          movea.l 12(sp),a0
   12226:	          move.l 24(a0),d0
   1222a:	          move.l d0,-(sp)
   1222c:	          pea 1 <_start+0x1>
   12230:	          move.l sp,d0
   12232:	          addq.l #8,d0
   12234:	          move.l d0,-(sp)
   12236:	          jsr 147c4 <getValueType>
   1223c:	          lea 12(sp),sp
   12240:	          tst.w d0
   12242:	      ,-- bne.s 12248 <builtIn_transitionLevel+0x28>
   12244:	      |   moveq #1,d0
   12246:	,-----|-- bra.s 1229c <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12248:	|     '-> moveq #24,d0
   1224a:	|         add.l 12(sp),d0
   1224e:	|         move.l d0,-(sp)
   12250:	|         jsr 15148 <trimStack>
   12256:	|         addq.l #4,sp

	if (number < 0)
   12258:	|         move.l (sp),d0
   1225a:	|     ,-- bpl.s 12264 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1225c:	|     |   clr.b 1c460 <brightnessLevel>
   12262:	|  ,--|-- bra.s 12280 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12264:	|  |  '-> move.l (sp),d0
   12266:	|  |      cmpi.l #255,d0
   1226c:	|  |  ,-- ble.s 12276 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1226e:	|  |  |   st 1c460 <brightnessLevel>
   12274:	|  +--|-- bra.s 12280 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12276:	|  |  '-> move.l (sp),d0
   12278:	|  |      move.l d0,d0
   1227a:	|  |      move.b d0,1c460 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12280:	|  '----> moveq #28,d0
   12282:	|         add.l 12(sp),d0
   12286:	|         pea 1 <_start+0x1>
   1228a:	|         pea 1 <_start+0x1>
   1228e:	|         move.l d0,-(sp)
   12290:	|         jsr 150b6 <setVariable>
   12296:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1229a:	|         moveq #2,d0
}
   1229c:	'-------> addq.l #4,sp
   1229e:	          rts

000122a0 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   122a0:	movea.l 8(sp),a0
   122a4:	move.l 24(a0),d0
   122a8:	move.l d0,-(sp)
   122aa:	jsr 14d04 <getBoolean>
   122b0:	addq.l #4,sp
   122b2:	move.w d0,1ca92 <captureAllKeys>
	trimStack (&fun -> stack);
   122b8:	moveq #24,d0
   122ba:	add.l 8(sp),d0
   122be:	move.l d0,-(sp)
   122c0:	jsr 15148 <trimStack>
   122c6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   122c8:	move.w 1ca92 <captureAllKeys>,d0
   122ce:	movea.w d0,a0
   122d0:	moveq #28,d0
   122d2:	add.l 8(sp),d0
   122d6:	move.l a0,-(sp)
   122d8:	pea 1 <_start+0x1>
   122dc:	move.l d0,-(sp)
   122de:	jsr 150b6 <setVariable>
   122e4:	lea 12(sp),sp
	return BR_CONTINUE;
   122e8:	moveq #2,d0
}
   122ea:	rts

000122ec <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   122ec:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122f0:	       movea.l 20(sp),a0
   122f4:	       move.l 24(a0),d0
   122f8:	       move.l d0,-(sp)
   122fa:	       pea 1 <_start+0x1>
   122fe:	       moveq #12,d0
   12300:	       add.l sp,d0
   12302:	       move.l d0,-(sp)
   12304:	       jsr 147c4 <getValueType>
   1230a:	       lea 12(sp),sp
   1230e:	       tst.w d0
   12310:	   ,-- bne.s 12318 <builtIn_spinCharacter+0x2c>
   12312:	   |   moveq #1,d0
   12314:	,--|-- bra.w 123c8 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12318:	|  '-> moveq #24,d0
   1231a:	|      add.l 20(sp),d0
   1231e:	|      move.l d0,-(sp)
   12320:	|      jsr 15148 <trimStack>
   12326:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12328:	|      movea.l 20(sp),a0
   1232c:	|      move.l 24(a0),d0
   12330:	|      move.l d0,-(sp)
   12332:	|      pea 7 <_start+0x7>
   12336:	|      lea 8(sp),a0
   1233a:	|      move.l a0,-(sp)
   1233c:	|      jsr 147c4 <getValueType>
   12342:	|      lea 12(sp),sp
   12346:	|      tst.w d0
   12348:	|  ,-- bne.s 1234e <builtIn_spinCharacter+0x62>
   1234a:	|  |   moveq #1,d0
   1234c:	+--|-- bra.s 123c8 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1234e:	|  '-> moveq #24,d0
   12350:	|      add.l 20(sp),d0
   12354:	|      move.l d0,-(sp)
   12356:	|      jsr 15148 <trimStack>
   1235c:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1235e:	|      move.l (sp),d0
   12360:	|      move.l d0,-(sp)
   12362:	|      jsr a56a <findPerson>
   12368:	|      addq.l #4,sp
   1236a:	|      move.l d0,8(sp)
	if (thisPerson) {
   1236e:	|  ,-- beq.s 123ae <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12370:	|  |   move.l 4(sp),d0
   12374:	|  |   movea.l 8(sp),a0
   12378:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1237c:	|  |   movea.l 8(sp),a0
   12380:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12386:	|  |   movea.l 8(sp),a0
   1238a:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12390:	|  |   moveq #28,d0
   12392:	|  |   add.l 20(sp),d0
   12396:	|  |   pea 1 <_start+0x1>
   1239a:	|  |   pea 1 <_start+0x1>
   1239e:	|  |   move.l d0,-(sp)
   123a0:	|  |   jsr 150b6 <setVariable>
   123a6:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   123aa:	|  |   moveq #3,d0
   123ac:	+--|-- bra.s 123c8 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123ae:	|  '-> moveq #28,d0
   123b0:	|      add.l 20(sp),d0
   123b4:	|      clr.l -(sp)
   123b6:	|      pea 1 <_start+0x1>
   123ba:	|      move.l d0,-(sp)
   123bc:	|      jsr 150b6 <setVariable>
   123c2:	|      lea 12(sp),sp
		return BR_CONTINUE;
   123c6:	|      moveq #2,d0
	}
}
   123c8:	'----> lea 12(sp),sp
   123cc:	       rts

000123ce <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   123ce:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123d0:	          movea.l 16(sp),a0
   123d4:	          move.l 24(a0),d0
   123d8:	          move.l d0,-(sp)
   123da:	          pea 7 <_start+0x7>
   123de:	          move.l sp,d0
   123e0:	          addq.l #8,d0
   123e2:	          move.l d0,-(sp)
   123e4:	          jsr 147c4 <getValueType>
   123ea:	          lea 12(sp),sp
   123ee:	          tst.w d0
   123f0:	      ,-- bne.s 123f6 <builtIn_getCharacterDirection+0x28>
   123f2:	      |   moveq #1,d0
   123f4:	,-----|-- bra.s 12454 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   123f6:	|     '-> moveq #24,d0
   123f8:	|         add.l 16(sp),d0
   123fc:	|         move.l d0,-(sp)
   123fe:	|         jsr 15148 <trimStack>
   12404:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12406:	|         move.l (sp),d0
   12408:	|         move.l d0,-(sp)
   1240a:	|         jsr a56a <findPerson>
   12410:	|         addq.l #4,sp
   12412:	|         move.l d0,4(sp)
	if (thisPerson) {
   12416:	|  ,----- beq.s 1243a <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12418:	|  |      movea.l 4(sp),a0
   1241c:	|  |      move.l 106(a0),d1
   12420:	|  |      moveq #28,d0
   12422:	|  |      add.l 16(sp),d0
   12426:	|  |      move.l d1,-(sp)
   12428:	|  |      pea 1 <_start+0x1>
   1242c:	|  |      move.l d0,-(sp)
   1242e:	|  |      jsr 150b6 <setVariable>
   12434:	|  |      lea 12(sp),sp
   12438:	|  |  ,-- bra.s 12452 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1243a:	|  '--|-> moveq #28,d0
   1243c:	|     |   add.l 16(sp),d0
   12440:	|     |   clr.l -(sp)
   12442:	|     |   pea 1 <_start+0x1>
   12446:	|     |   move.l d0,-(sp)
   12448:	|     |   jsr 150b6 <setVariable>
   1244e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12452:	|     '-> moveq #2,d0
}
   12454:	'-------> addq.l #8,sp
   12456:	          rts

00012458 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12458:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1245a:	       movea.l 16(sp),a0
   1245e:	       move.l 24(a0),d0
   12462:	       move.l d0,-(sp)
   12464:	       pea 7 <_start+0x7>
   12468:	       move.l sp,d0
   1246a:	       addq.l #8,d0
   1246c:	       move.l d0,-(sp)
   1246e:	       jsr 147c4 <getValueType>
   12474:	       lea 12(sp),sp
   12478:	       tst.w d0
   1247a:	   ,-- bne.s 12480 <builtIn_isCharacter+0x28>
   1247c:	   |   moveq #1,d0
   1247e:	,--|-- bra.s 124c2 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12480:	|  '-> moveq #24,d0
   12482:	|      add.l 16(sp),d0
   12486:	|      move.l d0,-(sp)
   12488:	|      jsr 15148 <trimStack>
   1248e:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12490:	|      move.l (sp),d0
   12492:	|      move.l d0,-(sp)
   12494:	|      jsr a56a <findPerson>
   1249a:	|      addq.l #4,sp
   1249c:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   124a0:	|      sne d0
   124a2:	|      neg.b d0
   124a4:	|      moveq #0,d1
   124a6:	|      move.b d0,d1
   124a8:	|      moveq #28,d0
   124aa:	|      add.l 16(sp),d0
   124ae:	|      move.l d1,-(sp)
   124b0:	|      pea 1 <_start+0x1>
   124b4:	|      move.l d0,-(sp)
   124b6:	|      jsr 150b6 <setVariable>
   124bc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124c0:	|      moveq #2,d0
}
   124c2:	'----> addq.l #8,sp
   124c4:	       rts

000124c6 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   124c6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124c8:	          movea.l 16(sp),a0
   124cc:	          move.l 24(a0),d0
   124d0:	          move.l d0,-(sp)
   124d2:	          pea 7 <_start+0x7>
   124d6:	          move.l sp,d0
   124d8:	          addq.l #8,d0
   124da:	          move.l d0,-(sp)
   124dc:	          jsr 147c4 <getValueType>
   124e2:	          lea 12(sp),sp
   124e6:	          tst.w d0
   124e8:	      ,-- bne.s 124ee <builtIn_normalCharacter+0x28>
   124ea:	      |   moveq #1,d0
   124ec:	,-----|-- bra.s 1256a <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   124ee:	|     '-> moveq #24,d0
   124f0:	|         add.l 16(sp),d0
   124f4:	|         move.l d0,-(sp)
   124f6:	|         jsr 15148 <trimStack>
   124fc:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124fe:	|         move.l (sp),d0
   12500:	|         move.l d0,-(sp)
   12502:	|         jsr a56a <findPerson>
   12508:	|         addq.l #4,sp
   1250a:	|         move.l d0,4(sp)
	if (thisPerson)
   1250e:	|  ,----- beq.s 12550 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12510:	|  |      movea.l 4(sp),a0
   12514:	|  |      movea.l 80(a0),a0
   12518:	|  |      move.l (a0),d1
   1251a:	|  |      movea.l 4(sp),a0
   1251e:	|  |      move.l 106(a0),d0
   12522:	|  |      add.l d0,d0
   12524:	|  |      add.l d0,d0
   12526:	|  |      movea.l d1,a0
   12528:	|  |      adda.l d0,a0
   1252a:	|  |      move.l (a0),d0
   1252c:	|  |      movea.l 4(sp),a0
   12530:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12534:	|  |      moveq #28,d0
   12536:	|  |      add.l 16(sp),d0
   1253a:	|  |      pea 1 <_start+0x1>
   1253e:	|  |      pea 1 <_start+0x1>
   12542:	|  |      move.l d0,-(sp)
   12544:	|  |      jsr 150b6 <setVariable>
   1254a:	|  |      lea 12(sp),sp
   1254e:	|  |  ,-- bra.s 12568 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12550:	|  '--|-> moveq #28,d0
   12552:	|     |   add.l 16(sp),d0
   12556:	|     |   clr.l -(sp)
   12558:	|     |   pea 1 <_start+0x1>
   1255c:	|     |   move.l d0,-(sp)
   1255e:	|     |   jsr 150b6 <setVariable>
   12564:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12568:	|     '-> moveq #2,d0
}
   1256a:	'-------> addq.l #8,sp
   1256c:	          rts

0001256e <builtIn_isMoving>:

builtIn(isMoving)
{
   1256e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12570:	          movea.l 16(sp),a0
   12574:	          move.l 24(a0),d0
   12578:	          move.l d0,-(sp)
   1257a:	          pea 7 <_start+0x7>
   1257e:	          move.l sp,d0
   12580:	          addq.l #8,d0
   12582:	          move.l d0,-(sp)
   12584:	          jsr 147c4 <getValueType>
   1258a:	          lea 12(sp),sp
   1258e:	          tst.w d0
   12590:	      ,-- bne.s 12596 <builtIn_isMoving+0x28>
   12592:	      |   moveq #1,d0
   12594:	,-----|-- bra.s 125f6 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12596:	|     '-> moveq #24,d0
   12598:	|         add.l 16(sp),d0
   1259c:	|         move.l d0,-(sp)
   1259e:	|         jsr 15148 <trimStack>
   125a4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125a6:	|         move.l (sp),d0
   125a8:	|         move.l d0,-(sp)
   125aa:	|         jsr a56a <findPerson>
   125b0:	|         addq.l #4,sp
   125b2:	|         move.l d0,4(sp)
	if (thisPerson)
   125b6:	|  ,----- beq.s 125dc <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   125b8:	|  |      movea.l 4(sp),a0
   125bc:	|  |      move.w 64(a0),d0
   125c0:	|  |      movea.w d0,a0
   125c2:	|  |      moveq #28,d0
   125c4:	|  |      add.l 16(sp),d0
   125c8:	|  |      move.l a0,-(sp)
   125ca:	|  |      pea 1 <_start+0x1>
   125ce:	|  |      move.l d0,-(sp)
   125d0:	|  |      jsr 150b6 <setVariable>
   125d6:	|  |      lea 12(sp),sp
   125da:	|  |  ,-- bra.s 125f4 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   125dc:	|  '--|-> moveq #28,d0
   125de:	|     |   add.l 16(sp),d0
   125e2:	|     |   clr.l -(sp)
   125e4:	|     |   pea 1 <_start+0x1>
   125e8:	|     |   move.l d0,-(sp)
   125ea:	|     |   jsr 150b6 <setVariable>
   125f0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   125f4:	|     '-> moveq #2,d0
}
   125f6:	'-------> addq.l #8,sp
   125f8:	          rts

000125fa <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   125fa:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125fe:	          movea.l 20(sp),a0
   12602:	          move.l 24(a0),d0
   12606:	          move.l d0,-(sp)
   12608:	          pea 7 <_start+0x7>
   1260c:	          lea 8(sp),a0
   12610:	          move.l a0,-(sp)
   12612:	          jsr 147c4 <getValueType>
   12618:	          lea 12(sp),sp
   1261c:	          tst.w d0
   1261e:	      ,-- bne.s 12626 <builtIn_fetchEvent+0x2c>
   12620:	      |   moveq #1,d0
   12622:	,-----|-- bra.w 126ba <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12626:	|     '-> moveq #24,d0
   12628:	|         add.l 20(sp),d0
   1262c:	|         move.l d0,-(sp)
   1262e:	|         jsr 15148 <trimStack>
   12634:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12636:	|         movea.l 20(sp),a0
   1263a:	|         move.l 24(a0),d0
   1263e:	|         move.l d0,-(sp)
   12640:	|         pea 7 <_start+0x7>
   12644:	|         moveq #12,d0
   12646:	|         add.l sp,d0
   12648:	|         move.l d0,-(sp)
   1264a:	|         jsr 147c4 <getValueType>
   12650:	|         lea 12(sp),sp
   12654:	|         tst.w d0
   12656:	|     ,-- bne.s 1265c <builtIn_fetchEvent+0x62>
   12658:	|     |   moveq #1,d0
   1265a:	+-----|-- bra.s 126ba <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1265c:	|     '-> moveq #24,d0
   1265e:	|         add.l 20(sp),d0
   12662:	|         move.l d0,-(sp)
   12664:	|         jsr 15148 <trimStack>
   1266a:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1266c:	|         move.l (sp),d1
   1266e:	|         move.l 4(sp),d0
   12672:	|         move.l d1,-(sp)
   12674:	|         move.l d0,-(sp)
   12676:	|         jsr d50c <getCombinationFunction>
   1267c:	|         addq.l #8,sp
   1267e:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12682:	|  ,----- beq.s 126a0 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12684:	|  |      moveq #28,d0
   12686:	|  |      add.l 20(sp),d0
   1268a:	|  |      move.l 8(sp),-(sp)
   1268e:	|  |      pea 2 <_start+0x2>
   12692:	|  |      move.l d0,-(sp)
   12694:	|  |      jsr 150b6 <setVariable>
   1269a:	|  |      lea 12(sp),sp
   1269e:	|  |  ,-- bra.s 126b8 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126a0:	|  '--|-> moveq #28,d0
   126a2:	|     |   add.l 20(sp),d0
   126a6:	|     |   clr.l -(sp)
   126a8:	|     |   pea 1 <_start+0x1>
   126ac:	|     |   move.l d0,-(sp)
   126ae:	|     |   jsr 150b6 <setVariable>
   126b4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126b8:	|     '-> moveq #2,d0
}
   126ba:	'-------> lea 12(sp),sp
   126be:	          rts

000126c0 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   126c0:	       lea -24(sp),sp
   126c4:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   126c6:	       movea.l 36(sp),a0
   126ca:	       move.l 24(a0),d0
   126ce:	       move.l d0,-(sp)
   126d0:	       jsr 14d9a <getTextFromAnyVar>
   126d6:	       addq.l #4,sp
   126d8:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   126dc:	       moveq #24,d0
   126de:	       add.l 36(sp),d0
   126e2:	       move.l d0,-(sp)
   126e4:	       jsr 15148 <trimStack>
   126ea:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   126ec:	       move.l 24(sp),-(sp)
   126f0:	       jsr 2fe <encodeFilename>
   126f6:	       addq.l #4,sp
   126f8:	       move.l d0,20(sp)
    FreeVec(namNormal);
   126fc:	       move.l 24(sp),16(sp)
   12702:	       move.l 1caf2 <SysBase>,d0
   12708:	       movea.l d0,a6
   1270a:	       movea.l 16(sp),a1
   1270e:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12712:	       move.l 20(sp),-(sp)
   12716:	       jsr e2c4 <failSecurityCheck>
   1271c:	       addq.l #4,sp
   1271e:	       tst.w d0
   12720:	   ,-- beq.s 12726 <builtIn_deleteFile+0x66>
   12722:	   |   moveq #1,d0
   12724:	,--|-- bra.s 12774 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12726:	|  '-> move.l 20(sp),12(sp)
   1272c:	|      move.l 1cafa <DOSBase>,d0
   12732:	|      movea.l d0,a6
   12734:	|      move.l 12(sp),d1
   12738:	|      jsr -72(a6)
   1273c:	|      move.l d0,8(sp)
   12740:	|      move.l 8(sp),d1
   12744:	|      moveq #28,d0
   12746:	|      add.l 36(sp),d0
   1274a:	|      move.l d1,-(sp)
   1274c:	|      pea 1 <_start+0x1>
   12750:	|      move.l d0,-(sp)
   12752:	|      jsr 150b6 <setVariable>
   12758:	|      lea 12(sp),sp
    FreeVec(nam);
   1275c:	|      move.l 20(sp),4(sp)
   12762:	|      move.l 1caf2 <SysBase>,d0
   12768:	|      movea.l d0,a6
   1276a:	|      movea.l 4(sp),a1
   1276e:	|      jsr -690(a6)

    return BR_CONTINUE;
   12772:	|      moveq #2,d0
}
   12774:	'----> movea.l (sp)+,a6
   12776:	       lea 24(sp),sp
   1277a:	       rts

0001277c <builtIn_renameFile>:

builtIn(renameFile)
{
   1277c:	       lea -40(sp),sp
   12780:	       move.l a6,-(sp)
   12782:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12784:	       movea.l 56(sp),a0
   12788:	       move.l 24(a0),d0
   1278c:	       move.l d0,-(sp)
   1278e:	       jsr 14d9a <getTextFromAnyVar>
   12794:	       addq.l #4,sp
   12796:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1279a:	       move.l 44(sp),-(sp)
   1279e:	       jsr 2fe <encodeFilename>
   127a4:	       addq.l #4,sp
   127a6:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   127aa:	       moveq #24,d0
   127ac:	       add.l 56(sp),d0
   127b0:	       move.l d0,-(sp)
   127b2:	       jsr 15148 <trimStack>
   127b8:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   127ba:	       move.l 40(sp),-(sp)
   127be:	       jsr e2c4 <failSecurityCheck>
   127c4:	       addq.l #4,sp
   127c6:	       tst.w d0
   127c8:	   ,-- beq.s 127d0 <builtIn_renameFile+0x54>
   127ca:	   |   moveq #1,d0
   127cc:	,--|-- bra.w 128b6 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127d0:	|  '-> move.l 44(sp),36(sp)
   127d6:	|      move.l 1caf2 <SysBase>,d0
   127dc:	|      movea.l d0,a6
   127de:	|      movea.l 36(sp),a1
   127e2:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127e6:	|      movea.l 56(sp),a0
   127ea:	|      move.l 24(a0),d0
   127ee:	|      move.l d0,-(sp)
   127f0:	|      jsr 14d9a <getTextFromAnyVar>
   127f6:	|      addq.l #4,sp
   127f8:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   127fc:	|      move.l 44(sp),-(sp)
   12800:	|      jsr 2fe <encodeFilename>
   12806:	|      addq.l #4,sp
   12808:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1280c:	|      moveq #24,d0
   1280e:	|      add.l 56(sp),d0
   12812:	|      move.l d0,-(sp)
   12814:	|      jsr 15148 <trimStack>
   1281a:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   1281c:	|      move.l 32(sp),-(sp)
   12820:	|      jsr e2c4 <failSecurityCheck>
   12826:	|      addq.l #4,sp
   12828:	|      tst.w d0
   1282a:	|  ,-- beq.s 12832 <builtIn_renameFile+0xb6>
   1282c:	|  |   moveq #1,d0
   1282e:	+--|-- bra.w 128b6 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12832:	|  '-> move.l 44(sp),28(sp)
   12838:	|      move.l 1caf2 <SysBase>,d0
   1283e:	|      movea.l d0,a6
   12840:	|      movea.l 28(sp),a1
   12844:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12848:	|      move.l 32(sp),24(sp)
   1284e:	|      move.l 40(sp),20(sp)
   12854:	|      move.l 1cafa <DOSBase>,d0
   1285a:	|      movea.l d0,a6
   1285c:	|      move.l 24(sp),d1
   12860:	|      move.l 20(sp),d2
   12864:	|      jsr -78(a6)
   12868:	|      move.l d0,16(sp)
   1286c:	|      move.l 16(sp),d1
   12870:	|      moveq #28,d0
   12872:	|      add.l 56(sp),d0
   12876:	|      move.l d1,-(sp)
   12878:	|      pea 1 <_start+0x1>
   1287c:	|      move.l d0,-(sp)
   1287e:	|      jsr 150b6 <setVariable>
   12884:	|      lea 12(sp),sp
	FreeVec(nam);
   12888:	|      move.l 32(sp),12(sp)
   1288e:	|      move.l 1caf2 <SysBase>,d0
   12894:	|      movea.l d0,a6
   12896:	|      movea.l 12(sp),a1
   1289a:	|      jsr -690(a6)
	FreeVec(newnam);
   1289e:	|      move.l 40(sp),8(sp)
   128a4:	|      move.l 1caf2 <SysBase>,d0
   128aa:	|      movea.l d0,a6
   128ac:	|      movea.l 8(sp),a1
   128b0:	|      jsr -690(a6)

	return BR_CONTINUE;
   128b4:	|      moveq #2,d0
}
   128b6:	'----> move.l (sp)+,d2
   128b8:	       movea.l (sp)+,a6
   128ba:	       lea 40(sp),sp
   128be:	       rts

000128c0 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   128c0:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   128c2:	       movea.l 12(sp),a0
   128c6:	       move.l 24(a0),d0
   128ca:	       move.l d0,-(sp)
   128cc:	       pea 5 <_start+0x5>
   128d0:	       move.l sp,d0
   128d2:	       addq.l #8,d0
   128d4:	       move.l d0,-(sp)
   128d6:	       jsr 147c4 <getValueType>
   128dc:	       lea 12(sp),sp
   128e0:	       tst.w d0
   128e2:	   ,-- bne.s 128e8 <builtIn_cacheSound+0x28>
   128e4:	   |   moveq #1,d0
   128e6:	,--|-- bra.s 12910 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   128e8:	|  '-> moveq #24,d0
   128ea:	|      add.l 12(sp),d0
   128ee:	|      move.l d0,-(sp)
   128f0:	|      jsr 15148 <trimStack>
   128f6:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   128f8:	|      move.l (sp),d0
   128fa:	|      move.l d0,-(sp)
   128fc:	|      jsr d102 <cacheSound>
   12902:	|      addq.l #4,sp
   12904:	|      moveq #-1,d1
   12906:	|      cmp.l d0,d1
   12908:	|  ,-- bne.s 1290e <builtIn_cacheSound+0x4e>
   1290a:	|  |   moveq #1,d0
   1290c:	+--|-- bra.s 12910 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1290e:	|  '-> moveq #2,d0
}
   12910:	'----> addq.l #4,sp
   12912:	       rts

00012914 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12914:	pea 19d52 <talk.c.490538ff+0x343>
   1291a:	jsr 172a4 <KPrintF>
   12920:	addq.l #4,sp
	return BR_CONTINUE;
   12922:	moveq #2,d0
}
   12924:	rts

00012926 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12926:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1292a:	          movea.l 20(sp),a0
   1292e:	          move.l 24(a0),d0
   12932:	          move.l d0,-(sp)
   12934:	          pea 1 <_start+0x1>
   12938:	          moveq #12,d0
   1293a:	          add.l sp,d0
   1293c:	          move.l d0,-(sp)
   1293e:	          jsr 147c4 <getValueType>
   12944:	          lea 12(sp),sp
   12948:	          tst.w d0
   1294a:	      ,-- bne.s 12952 <builtIn_setCharacterSpinSpeed+0x2c>
   1294c:	      |   moveq #1,d0
   1294e:	,-----|-- bra.w 129ec <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12952:	|     '-> moveq #24,d0
   12954:	|         add.l 20(sp),d0
   12958:	|         move.l d0,-(sp)
   1295a:	|         jsr 15148 <trimStack>
   12960:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12962:	|         movea.l 20(sp),a0
   12966:	|         move.l 24(a0),d0
   1296a:	|         move.l d0,-(sp)
   1296c:	|         pea 7 <_start+0x7>
   12970:	|         lea 8(sp),a0
   12974:	|         move.l a0,-(sp)
   12976:	|         jsr 147c4 <getValueType>
   1297c:	|         lea 12(sp),sp
   12980:	|         tst.w d0
   12982:	|     ,-- bne.s 12988 <builtIn_setCharacterSpinSpeed+0x62>
   12984:	|     |   moveq #1,d0
   12986:	+-----|-- bra.s 129ec <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12988:	|     '-> moveq #24,d0
   1298a:	|         add.l 20(sp),d0
   1298e:	|         move.l d0,-(sp)
   12990:	|         jsr 15148 <trimStack>
   12996:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12998:	|         move.l (sp),d0
   1299a:	|         move.l d0,-(sp)
   1299c:	|         jsr a56a <findPerson>
   129a2:	|         addq.l #4,sp
   129a4:	|         move.l d0,8(sp)

	if (thisPerson) {
   129a8:	|  ,----- beq.s 129d2 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   129aa:	|  |      move.l 4(sp),d0
   129ae:	|  |      movea.l 8(sp),a0
   129b2:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   129b6:	|  |      moveq #28,d0
   129b8:	|  |      add.l 20(sp),d0
   129bc:	|  |      pea 1 <_start+0x1>
   129c0:	|  |      pea 1 <_start+0x1>
   129c4:	|  |      move.l d0,-(sp)
   129c6:	|  |      jsr 150b6 <setVariable>
   129cc:	|  |      lea 12(sp),sp
   129d0:	|  |  ,-- bra.s 129ea <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   129d2:	|  '--|-> moveq #28,d0
   129d4:	|     |   add.l 20(sp),d0
   129d8:	|     |   clr.l -(sp)
   129da:	|     |   pea 1 <_start+0x1>
   129de:	|     |   move.l d0,-(sp)
   129e0:	|     |   jsr 150b6 <setVariable>
   129e6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   129ea:	|     '-> moveq #2,d0
}
   129ec:	'-------> lea 12(sp),sp
   129f0:	          rts

000129f2 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   129f2:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   129f6:	          movea.l 20(sp),a0
   129fa:	          move.l 24(a0),d0
   129fe:	          move.l d0,-(sp)
   12a00:	          pea 1 <_start+0x1>
   12a04:	          moveq #12,d0
   12a06:	          add.l sp,d0
   12a08:	          move.l d0,-(sp)
   12a0a:	          jsr 147c4 <getValueType>
   12a10:	          lea 12(sp),sp
   12a14:	          tst.w d0
   12a16:	      ,-- bne.s 12a1e <builtIn_setCharacterAngleOffset+0x2c>
   12a18:	      |   moveq #1,d0
   12a1a:	,-----|-- bra.w 12ab8 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a1e:	|     '-> moveq #24,d0
   12a20:	|         add.l 20(sp),d0
   12a24:	|         move.l d0,-(sp)
   12a26:	|         jsr 15148 <trimStack>
   12a2c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a2e:	|         movea.l 20(sp),a0
   12a32:	|         move.l 24(a0),d0
   12a36:	|         move.l d0,-(sp)
   12a38:	|         pea 7 <_start+0x7>
   12a3c:	|         lea 8(sp),a0
   12a40:	|         move.l a0,-(sp)
   12a42:	|         jsr 147c4 <getValueType>
   12a48:	|         lea 12(sp),sp
   12a4c:	|         tst.w d0
   12a4e:	|     ,-- bne.s 12a54 <builtIn_setCharacterAngleOffset+0x62>
   12a50:	|     |   moveq #1,d0
   12a52:	+-----|-- bra.s 12ab8 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a54:	|     '-> moveq #24,d0
   12a56:	|         add.l 20(sp),d0
   12a5a:	|         move.l d0,-(sp)
   12a5c:	|         jsr 15148 <trimStack>
   12a62:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a64:	|         move.l (sp),d0
   12a66:	|         move.l d0,-(sp)
   12a68:	|         jsr a56a <findPerson>
   12a6e:	|         addq.l #4,sp
   12a70:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a74:	|  ,----- beq.s 12a9e <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12a76:	|  |      move.l 4(sp),d0
   12a7a:	|  |      movea.l 8(sp),a0
   12a7e:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a82:	|  |      moveq #28,d0
   12a84:	|  |      add.l 20(sp),d0
   12a88:	|  |      pea 1 <_start+0x1>
   12a8c:	|  |      pea 1 <_start+0x1>
   12a90:	|  |      move.l d0,-(sp)
   12a92:	|  |      jsr 150b6 <setVariable>
   12a98:	|  |      lea 12(sp),sp
   12a9c:	|  |  ,-- bra.s 12ab6 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a9e:	|  '--|-> moveq #28,d0
   12aa0:	|     |   add.l 20(sp),d0
   12aa4:	|     |   clr.l -(sp)
   12aa6:	|     |   pea 1 <_start+0x1>
   12aaa:	|     |   move.l d0,-(sp)
   12aac:	|     |   jsr 150b6 <setVariable>
   12ab2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ab6:	|     '-> moveq #2,d0
}
   12ab8:	'-------> lea 12(sp),sp
   12abc:	          rts

00012abe <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12abe:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ac0:	       movea.l 12(sp),a0
   12ac4:	       move.l 24(a0),d0
   12ac8:	       move.l d0,-(sp)
   12aca:	       pea 1 <_start+0x1>
   12ace:	       move.l sp,d0
   12ad0:	       addq.l #8,d0
   12ad2:	       move.l d0,-(sp)
   12ad4:	       jsr 147c4 <getValueType>
   12ada:	       lea 12(sp),sp
   12ade:	       tst.w d0
   12ae0:	   ,-- bne.s 12ae6 <builtIn_transitionMode+0x28>
   12ae2:	   |   moveq #1,d0
   12ae4:	,--|-- bra.s 12b1c <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12ae6:	|  '-> move.l (sp),d0
   12ae8:	|      move.l d0,d0
   12aea:	|      move.b d0,1c9c0 <fadeMode>
	trimStack (&fun -> stack);
   12af0:	|      moveq #24,d0
   12af2:	|      add.l 12(sp),d0
   12af6:	|      move.l d0,-(sp)
   12af8:	|      jsr 15148 <trimStack>
   12afe:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12b00:	|      moveq #28,d0
   12b02:	|      add.l 12(sp),d0
   12b06:	|      pea 1 <_start+0x1>
   12b0a:	|      pea 1 <_start+0x1>
   12b0e:	|      move.l d0,-(sp)
   12b10:	|      jsr 150b6 <setVariable>
   12b16:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b1a:	|      moveq #2,d0
}
   12b1c:	'----> addq.l #4,sp
   12b1e:	       rts

00012b20 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12b20:	moveq #24,d0
   12b22:	add.l 8(sp),d0
   12b26:	move.l d0,-(sp)
   12b28:	jsr 15148 <trimStack>
   12b2e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12b30:	moveq #28,d0
   12b32:	add.l 8(sp),d0
   12b36:	pea 1 <_start+0x1>
   12b3a:	pea 1 <_start+0x1>
   12b3e:	move.l d0,-(sp)
   12b40:	jsr 150b6 <setVariable>
   12b46:	lea 12(sp),sp
	return BR_CONTINUE;
   12b4a:	moveq #2,d0
}
   12b4c:	rts

00012b4e <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b4e:	pea 19d7c <talk.c.490538ff+0x36d>
   12b54:	jsr 172a4 <KPrintF>
   12b5a:	addq.l #4,sp
	return BR_CONTINUE;
   12b5c:	moveq #2,d0
}
   12b5e:	rts

00012b60 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b60:	       lea -16(sp),sp
   12b64:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b66:	       movea.l 28(sp),a0
   12b6a:	       move.l 24(a0),d0
   12b6e:	       move.l d0,-(sp)
   12b70:	       jsr 14d9a <getTextFromAnyVar>
   12b76:	       addq.l #4,sp
   12b78:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12b7c:	   ,-- bne.s 12b84 <builtIn_saveCustomData+0x24>
   12b7e:	   |   moveq #1,d0
   12b80:	,--|-- bra.w 12c36 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12b84:	|  '-> move.l 16(sp),-(sp)
   12b88:	|      jsr 2fe <encodeFilename>
   12b8e:	|      addq.l #4,sp
   12b90:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12b94:	|      move.l 16(sp),8(sp)
   12b9a:	|      move.l 1caf2 <SysBase>,d0
   12ba0:	|      movea.l d0,a6
   12ba2:	|      movea.l 8(sp),a1
   12ba6:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12baa:	|      move.l 12(sp),-(sp)
   12bae:	|      jsr e2c4 <failSecurityCheck>
   12bb4:	|      addq.l #4,sp
   12bb6:	|      tst.w d0
   12bb8:	|  ,-- beq.s 12bbe <builtIn_saveCustomData+0x5e>
   12bba:	|  |   moveq #1,d0
   12bbc:	+--|-- bra.s 12c36 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12bbe:	|  '-> moveq #24,d0
   12bc0:	|      add.l 28(sp),d0
   12bc4:	|      move.l d0,-(sp)
   12bc6:	|      jsr 15148 <trimStack>
   12bcc:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12bce:	|      movea.l 28(sp),a0
   12bd2:	|      movea.l 24(a0),a0
   12bd6:	|      move.l (a0),d0
   12bd8:	|      moveq #6,d1
   12bda:	|      cmp.l d0,d1
   12bdc:	|  ,-- beq.s 12bf0 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12bde:	|  |   pea 19da9 <talk.c.490538ff+0x39a>
   12be4:	|  |   jsr 172a4 <KPrintF>
   12bea:	|  |   addq.l #4,sp
		return BR_ERROR;
   12bec:	|  |   moveq #1,d0
   12bee:	+--|-- bra.s 12c36 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12bf0:	|  '-> movea.l 28(sp),a0
   12bf4:	|      move.l 24(a0),d0
   12bf8:	|      move.l d0,-(sp)
   12bfa:	|      move.l 16(sp),-(sp)
   12bfe:	|      jsr df14 <stackToFile>
   12c04:	|      addq.l #8,sp
   12c06:	|      tst.w d0
   12c08:	|  ,-- bne.s 12c0e <builtIn_saveCustomData+0xae>
   12c0a:	|  |   moveq #1,d0
   12c0c:	+--|-- bra.s 12c36 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c0e:	|  '-> moveq #24,d0
   12c10:	|      add.l 28(sp),d0
   12c14:	|      move.l d0,-(sp)
   12c16:	|      jsr 15148 <trimStack>
   12c1c:	|      addq.l #4,sp
	FreeVec(fileName);
   12c1e:	|      move.l 12(sp),4(sp)
   12c24:	|      move.l 1caf2 <SysBase>,d0
   12c2a:	|      movea.l d0,a6
   12c2c:	|      movea.l 4(sp),a1
   12c30:	|      jsr -690(a6)
	return BR_CONTINUE;
   12c34:	|      moveq #2,d0
}
   12c36:	'----> movea.l (sp)+,a6
   12c38:	       lea 16(sp),sp
   12c3c:	       rts

00012c3e <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c3e:	       lea -28(sp),sp
   12c42:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c44:	       movea.l 40(sp),a0
   12c48:	       move.l 24(a0),d0
   12c4c:	       move.l d0,-(sp)
   12c4e:	       jsr 14d9a <getTextFromAnyVar>
   12c54:	       addq.l #4,sp
   12c56:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c5a:	   ,-- bne.s 12c62 <builtIn_loadCustomData+0x24>
   12c5c:	   |   moveq #1,d0
   12c5e:	,--|-- bra.w 12d5e <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c62:	|  '-> move.l 28(sp),-(sp)
   12c66:	|      jsr 2fe <encodeFilename>
   12c6c:	|      addq.l #4,sp
   12c6e:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12c72:	|      move.l 28(sp),20(sp)
   12c78:	|      move.l 1caf2 <SysBase>,d0
   12c7e:	|      movea.l d0,a6
   12c80:	|      movea.l 20(sp),a1
   12c84:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12c88:	|      move.l 24(sp),-(sp)
   12c8c:	|      jsr e2c4 <failSecurityCheck>
   12c92:	|      addq.l #4,sp
   12c94:	|      tst.w d0
   12c96:	|  ,-- beq.s 12c9e <builtIn_loadCustomData+0x60>
   12c98:	|  |   moveq #1,d0
   12c9a:	+--|-- bra.w 12d5e <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12c9e:	|  '-> moveq #24,d0
   12ca0:	|      add.l 40(sp),d0
   12ca4:	|      move.l d0,-(sp)
   12ca6:	|      jsr 15148 <trimStack>
   12cac:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12cae:	|      moveq #28,d0
   12cb0:	|      add.l 40(sp),d0
   12cb4:	|      move.l d0,-(sp)
   12cb6:	|      jsr 14a12 <unlinkVar>
   12cbc:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12cbe:	|      movea.l 40(sp),a0
   12cc2:	|      moveq #6,d0
   12cc4:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12cc8:	|      moveq #12,d0
   12cca:	|      move.l d0,16(sp)
   12cce:	|      clr.l 12(sp)
   12cd2:	|      move.l 1caf2 <SysBase>,d0
   12cd8:	|      movea.l d0,a6
   12cda:	|      move.l 16(sp),d0
   12cde:	|      move.l 12(sp),d1
   12ce2:	|      jsr -684(a6)
   12ce6:	|      move.l d0,8(sp)
   12cea:	|      move.l 8(sp),d0
   12cee:	|      movea.l 40(sp),a0
   12cf2:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12cf6:	|      movea.l 40(sp),a0
   12cfa:	|      move.l 32(a0),d0
   12cfe:	|  ,-- bne.s 12d04 <builtIn_loadCustomData+0xc6>
   12d00:	|  |   moveq #1,d0
   12d02:	+--|-- bra.s 12d5e <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12d04:	|  '-> movea.l 40(sp),a0
   12d08:	|      movea.l 32(a0),a0
   12d0c:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12d0e:	|      movea.l 40(sp),a0
   12d12:	|      movea.l 32(a0),a0
   12d16:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12d1a:	|      movea.l 40(sp),a0
   12d1e:	|      movea.l 32(a0),a0
   12d22:	|      moveq #1,d0
   12d24:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12d28:	|      movea.l 40(sp),a0
   12d2c:	|      move.l 32(a0),d0
   12d30:	|      move.l d0,-(sp)
   12d32:	|      move.l 28(sp),-(sp)
   12d36:	|      jsr d94e <fileToStack>
   12d3c:	|      addq.l #8,sp
   12d3e:	|      tst.w d0
   12d40:	|  ,-- bne.s 12d46 <builtIn_loadCustomData+0x108>
   12d42:	|  |   moveq #1,d0
   12d44:	+--|-- bra.s 12d5e <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d46:	|  '-> move.l 24(sp),4(sp)
   12d4c:	|      move.l 1caf2 <SysBase>,d0
   12d52:	|      movea.l d0,a6
   12d54:	|      movea.l 4(sp),a1
   12d58:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d5c:	|      moveq #2,d0
}
   12d5e:	'----> movea.l (sp)+,a6
   12d60:	       lea 28(sp),sp
   12d64:	       rts

00012d66 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d66:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d68:	       movea.l 12(sp),a0
   12d6c:	       move.l 24(a0),d0
   12d70:	       move.l d0,-(sp)
   12d72:	       pea 1 <_start+0x1>
   12d76:	       move.l sp,d0
   12d78:	       addq.l #8,d0
   12d7a:	       move.l d0,-(sp)
   12d7c:	       jsr 147c4 <getValueType>
   12d82:	       lea 12(sp),sp
   12d86:	       tst.w d0
   12d88:	   ,-- bne.s 12d8e <builtIn_setCustomEncoding+0x28>
   12d8a:	   |   moveq #1,d0
   12d8c:	,--|-- bra.s 12dc4 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12d8e:	|  '-> move.l (sp),d0
   12d90:	|      move.l d0,d0
   12d92:	|      move.w d0,1cba6 <saveEncoding>
	trimStack (&fun -> stack);
   12d98:	|      moveq #24,d0
   12d9a:	|      add.l 12(sp),d0
   12d9e:	|      move.l d0,-(sp)
   12da0:	|      jsr 15148 <trimStack>
   12da6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12da8:	|      moveq #28,d0
   12daa:	|      add.l 12(sp),d0
   12dae:	|      pea 1 <_start+0x1>
   12db2:	|      pea 1 <_start+0x1>
   12db6:	|      move.l d0,-(sp)
   12db8:	|      jsr 150b6 <setVariable>
   12dbe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12dc2:	|      moveq #2,d0
}
   12dc4:	'----> addq.l #4,sp
   12dc6:	       rts

00012dc8 <builtIn_freeSound>:

builtIn(freeSound)
{
   12dc8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dca:	       movea.l 12(sp),a0
   12dce:	       move.l 24(a0),d0
   12dd2:	       move.l d0,-(sp)
   12dd4:	       pea 5 <_start+0x5>
   12dd8:	       move.l sp,d0
   12dda:	       addq.l #8,d0
   12ddc:	       move.l d0,-(sp)
   12dde:	       jsr 147c4 <getValueType>
   12de4:	       lea 12(sp),sp
   12de8:	       tst.w d0
   12dea:	   ,-- bne.s 12df0 <builtIn_freeSound+0x28>
   12dec:	   |   moveq #1,d0
   12dee:	,--|-- bra.s 12e0e <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12df0:	|  '-> moveq #24,d0
   12df2:	|      add.l 12(sp),d0
   12df6:	|      move.l d0,-(sp)
   12df8:	|      jsr 15148 <trimStack>
   12dfe:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12e00:	|      move.l (sp),d0
   12e02:	|      move.l d0,-(sp)
   12e04:	|      jsr d106 <huntKillFreeSound>
   12e0a:	|      addq.l #4,sp
	return BR_CONTINUE;
   12e0c:	|      moveq #2,d0
}
   12e0e:	'----> addq.l #4,sp
   12e10:	       rts

00012e12 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12e12:	       lea -12(sp),sp
   12e16:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e18:	       movea.l 24(sp),a0
   12e1c:	       move.l 24(a0),d0
   12e20:	       move.l d0,-(sp)
   12e22:	       pea 1 <_start+0x1>
   12e26:	       moveq #16,d0
   12e28:	       add.l sp,d0
   12e2a:	       move.l d0,-(sp)
   12e2c:	       jsr 147c4 <getValueType>
   12e32:	       lea 12(sp),sp
   12e36:	       tst.w d0
   12e38:	   ,-- bne.s 12e40 <builtIn_parallaxAdd+0x2e>
   12e3a:	   |   moveq #1,d0
   12e3c:	,--|-- bra.w 12f14 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e40:	|  '-> moveq #24,d0
   12e42:	|      add.l 24(sp),d0
   12e46:	|      move.l d0,-(sp)
   12e48:	|      jsr 15148 <trimStack>
   12e4e:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e50:	|      movea.l 24(sp),a0
   12e54:	|      move.l 24(a0),d0
   12e58:	|      move.l d0,-(sp)
   12e5a:	|      pea 1 <_start+0x1>
   12e5e:	|      moveq #20,d0
   12e60:	|      add.l sp,d0
   12e62:	|      move.l d0,-(sp)
   12e64:	|      jsr 147c4 <getValueType>
   12e6a:	|      lea 12(sp),sp
   12e6e:	|      tst.w d0
   12e70:	|  ,-- bne.s 12e78 <builtIn_parallaxAdd+0x66>
   12e72:	|  |   moveq #1,d0
   12e74:	+--|-- bra.w 12f14 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e78:	|  '-> moveq #24,d0
   12e7a:	|      add.l 24(sp),d0
   12e7e:	|      move.l d0,-(sp)
   12e80:	|      jsr 15148 <trimStack>
   12e86:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e88:	|      movea.l 24(sp),a0
   12e8c:	|      move.l 24(a0),d0
   12e90:	|      move.l d0,-(sp)
   12e92:	|      pea 5 <_start+0x5>
   12e96:	|      lea 12(sp),a0
   12e9a:	|      move.l a0,-(sp)
   12e9c:	|      jsr 147c4 <getValueType>
   12ea2:	|      lea 12(sp),sp
   12ea6:	|      tst.w d0
   12ea8:	|  ,-- bne.s 12eae <builtIn_parallaxAdd+0x9c>
   12eaa:	|  |   moveq #1,d0
   12eac:	+--|-- bra.s 12f14 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12eae:	|  '-> moveq #24,d0
   12eb0:	|      add.l 24(sp),d0
   12eb4:	|      move.l d0,-(sp)
   12eb6:	|      jsr 15148 <trimStack>
   12ebc:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12ebe:	|      move.l 8(sp),d0
   12ec2:	|      move.l d0,d0
   12ec4:	|      moveq #0,d2
   12ec6:	|      move.w d0,d2
   12ec8:	|      move.l 12(sp),d0
   12ecc:	|      move.l d0,d0
   12ece:	|      moveq #0,d1
   12ed0:	|      move.w d0,d1
   12ed2:	|      move.l 4(sp),d0
   12ed6:	|      move.l d0,d0
   12ed8:	|      move.w d0,d0
   12eda:	|      andi.l #65535,d0
   12ee0:	|      move.l d2,-(sp)
   12ee2:	|      move.l d1,-(sp)
   12ee4:	|      move.l d0,-(sp)
   12ee6:	|      jsr d32c <loadParallax>
   12eec:	|      lea 12(sp),sp
   12ef0:	|      tst.w d0
   12ef2:	|  ,-- bne.s 12ef8 <builtIn_parallaxAdd+0xe6>
   12ef4:	|  |   moveq #1,d0
   12ef6:	+--|-- bra.s 12f14 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12ef8:	|  '-> moveq #28,d0
   12efa:	|      add.l 24(sp),d0
   12efe:	|      pea 1 <_start+0x1>
   12f02:	|      pea 1 <_start+0x1>
   12f06:	|      move.l d0,-(sp)
   12f08:	|      jsr 150b6 <setVariable>
   12f0e:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12f12:	|      moveq #2,d0
}
   12f14:	'----> move.l (sp)+,d2
   12f16:	       lea 12(sp),sp
   12f1a:	       rts

00012f1c <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12f1c:	jsr d264 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12f22:	moveq #28,d0
   12f24:	add.l 8(sp),d0
   12f28:	pea 1 <_start+0x1>
   12f2c:	pea 1 <_start+0x1>
   12f30:	move.l d0,-(sp)
   12f32:	jsr 150b6 <setVariable>
   12f38:	lea 12(sp),sp
	return BR_CONTINUE;
   12f3c:	moveq #2,d0
}
   12f3e:	rts

00012f40 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f40:	pea 19dc7 <talk.c.490538ff+0x3b8>
   12f46:	jsr 172a4 <KPrintF>
   12f4c:	addq.l #4,sp

	return BR_CONTINUE;
   12f4e:	moveq #2,d0
}
   12f50:	rts

00012f52 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f52:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f54:	             movea.l 16(sp),a0
   12f58:	             movea.l 24(a0),a0
   12f5c:	             move.l (a0),d0
   12f5e:	             moveq #1,d1
   12f60:	             cmp.l d0,d1
   12f62:	      ,----- beq.s 12faa <builtIn_makeFastArray+0x58>
   12f64:	      |      moveq #6,d1
   12f66:	      |      cmp.l d0,d1
   12f68:	,-----|----- bne.s 12fe8 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f6a:	|     |      movea.l 16(sp),a0
   12f6e:	|     |      movea.l 24(a0),a0
   12f72:	|     |      move.l 4(a0),d1
   12f76:	|     |      moveq #28,d0
   12f78:	|     |      add.l 16(sp),d0
   12f7c:	|     |      move.l d1,-(sp)
   12f7e:	|     |      move.l d0,-(sp)
   12f80:	|     |      jsr 14876 <makeFastArrayFromStack>
   12f86:	|     |      addq.l #8,sp
   12f88:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12f8c:	|     |      moveq #24,d0
   12f8e:	|     |      add.l 16(sp),d0
   12f92:	|     |      move.l d0,-(sp)
   12f94:	|     |      jsr 15148 <trimStack>
   12f9a:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12f9c:	|     |      tst.w 6(sp)
   12fa0:	|     |  ,-- beq.s 12fa6 <builtIn_makeFastArray+0x54>
   12fa2:	|     |  |   moveq #2,d0
   12fa4:	|  ,--|--|-- bra.s 12ffa <builtIn_makeFastArray+0xa8>
   12fa6:	|  |  |  '-> moveq #1,d0
   12fa8:	|  +--|----- bra.s 12ffa <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12faa:	|  |  '----> movea.l 16(sp),a0
   12fae:	|  |         movea.l 24(a0),a0
   12fb2:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12fb8:	|  |         moveq #24,d0
   12fba:	|  |         add.l 16(sp),d0
   12fbe:	|  |         move.l d0,-(sp)
   12fc0:	|  |         jsr 15148 <trimStack>
   12fc6:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12fc8:	|  |         moveq #28,d0
   12fca:	|  |         add.l 16(sp),d0
   12fce:	|  |         move.l 2(sp),-(sp)
   12fd2:	|  |         move.l d0,-(sp)
   12fd4:	|  |         jsr 148e0 <makeFastArraySize>
   12fda:	|  |         addq.l #8,sp
   12fdc:	|  |         tst.w d0
   12fde:	|  |     ,-- beq.s 12fe4 <builtIn_makeFastArray+0x92>
   12fe0:	|  |     |   moveq #2,d0
   12fe2:	|  +-----|-- bra.s 12ffa <builtIn_makeFastArray+0xa8>
   12fe4:	|  |     '-> moveq #1,d0
   12fe6:	|  +-------- bra.s 12ffa <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12fe8:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12fea:	   |         pea 19df0 <talk.c.490538ff+0x3e1>
   12ff0:	   |         jsr 172a4 <KPrintF>
   12ff6:	   |         addq.l #4,sp
	return BR_ERROR;
   12ff8:	   |         moveq #1,d0
}
   12ffa:	   '-------> addq.l #8,sp
   12ffc:	             rts

00012ffe <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12ffe:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13000:	          movea.l 16(sp),a0
   13004:	          move.l 24(a0),d0
   13008:	          move.l d0,-(sp)
   1300a:	          pea 7 <_start+0x7>
   1300e:	          move.l sp,d0
   13010:	          addq.l #8,d0
   13012:	          move.l d0,-(sp)
   13014:	          jsr 147c4 <getValueType>
   1301a:	          lea 12(sp),sp
   1301e:	          tst.w d0
   13020:	      ,-- bne.s 13026 <builtIn_getCharacterScale+0x28>
   13022:	      |   moveq #1,d0
   13024:	,-----|-- bra.s 130a0 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   13026:	|     '-> moveq #24,d0
   13028:	|         add.l 16(sp),d0
   1302c:	|         move.l d0,-(sp)
   1302e:	|         jsr 15148 <trimStack>
   13034:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   13036:	|         move.l (sp),d0
   13038:	|         move.l d0,-(sp)
   1303a:	|         jsr a56a <findPerson>
   13040:	|         addq.l #4,sp
   13042:	|         move.l d0,4(sp)
	if (pers) {
   13046:	|  ,----- beq.s 13086 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13048:	|  |      movea.l 4(sp),a0
   1304c:	|  |      move.l 32(a0),d0
   13050:	|  |      move.l #1120403456,-(sp)
   13056:	|  |      move.l d0,-(sp)
   13058:	|  |      jsr 17788 <__mulsf3>
   1305e:	|  |      addq.l #8,sp
   13060:	|  |      move.l d0,-(sp)
   13062:	|  |      jsr 1766e <__fixsfsi>
   13068:	|  |      addq.l #4,sp
   1306a:	|  |      move.l d0,d1
   1306c:	|  |      moveq #28,d0
   1306e:	|  |      add.l 16(sp),d0
   13072:	|  |      move.l d1,-(sp)
   13074:	|  |      pea 1 <_start+0x1>
   13078:	|  |      move.l d0,-(sp)
   1307a:	|  |      jsr 150b6 <setVariable>
   13080:	|  |      lea 12(sp),sp
   13084:	|  |  ,-- bra.s 1309e <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13086:	|  '--|-> moveq #28,d0
   13088:	|     |   add.l 16(sp),d0
   1308c:	|     |   clr.l -(sp)
   1308e:	|     |   pea 1 <_start+0x1>
   13092:	|     |   move.l d0,-(sp)
   13094:	|     |   jsr 150b6 <setVariable>
   1309a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1309e:	|     '-> moveq #2,d0
}
   130a0:	'-------> addq.l #8,sp
   130a2:	          rts

000130a4 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   130a4:	move.l 1cbca <gameSettings>,d0
   130aa:	move.l d0,d1
   130ac:	moveq #28,d0
   130ae:	add.l 8(sp),d0
   130b2:	move.l d1,-(sp)
   130b4:	pea 1 <_start+0x1>
   130b8:	move.l d0,-(sp)
   130ba:	jsr 150b6 <setVariable>
   130c0:	lea 12(sp),sp
	return BR_CONTINUE;
   130c4:	moveq #2,d0
}
   130c6:	rts

000130c8 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130c8:	moveq #24,d0
   130ca:	add.l 8(sp),d0
   130ce:	move.l d0,-(sp)
   130d0:	jsr 15148 <trimStack>
   130d6:	addq.l #4,sp
	trimStack (&fun -> stack);
   130d8:	moveq #24,d0
   130da:	add.l 8(sp),d0
   130de:	move.l d0,-(sp)
   130e0:	jsr 15148 <trimStack>
   130e6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   130e8:	moveq #28,d0
   130ea:	add.l 8(sp),d0
   130ee:	clr.l -(sp)
   130f0:	pea 1 <_start+0x1>
   130f4:	move.l d0,-(sp)
   130f6:	jsr 150b6 <setVariable>
   130fc:	lea 12(sp),sp

	return BR_CONTINUE;
   13100:	moveq #2,d0

}
   13102:	rts

00013104 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13104:	move.l 1c46a <lastFramesPerSecond>,d1
   1310a:	moveq #28,d0
   1310c:	add.l 8(sp),d0
   13110:	move.l d1,-(sp)
   13112:	pea 1 <_start+0x1>
   13116:	move.l d0,-(sp)
   13118:	jsr 150b6 <setVariable>
   1311e:	lea 12(sp),sp
	return BR_CONTINUE;
   13122:	moveq #2,d0
}
   13124:	rts

00013126 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   13126:	moveq #2,d0
}
   13128:	rts

0001312a <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1312a:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1312e:	          movea.l 60(sp),a0
   13132:	          move.l 24(a0),d0
   13136:	          move.l d0,-(sp)
   13138:	          pea 1 <_start+0x1>
   1313c:	          pea 1c9fc <thumbHeight>
   13142:	          jsr 147c4 <getValueType>
   13148:	          lea 12(sp),sp
   1314c:	          tst.w d0
   1314e:	      ,-- bne.s 13156 <builtIn_setThumbnailSize+0x2c>
   13150:	      |   moveq #1,d0
   13152:	,-----|-- bra.w 13212 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13156:	|     '-> moveq #24,d0
   13158:	|         add.l 60(sp),d0
   1315c:	|         move.l d0,-(sp)
   1315e:	|         jsr 15148 <trimStack>
   13164:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13166:	|         movea.l 60(sp),a0
   1316a:	|         move.l 24(a0),d0
   1316e:	|         move.l d0,-(sp)
   13170:	|         pea 1 <_start+0x1>
   13174:	|         pea 1c9f8 <thumbWidth>
   1317a:	|         jsr 147c4 <getValueType>
   13180:	|         lea 12(sp),sp
   13184:	|         tst.w d0
   13186:	|     ,-- bne.s 1318e <builtIn_setThumbnailSize+0x64>
   13188:	|     |   moveq #1,d0
   1318a:	+-----|-- bra.w 13212 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1318e:	|     '-> moveq #24,d0
   13190:	|         add.l 60(sp),d0
   13194:	|         move.l d0,-(sp)
   13196:	|         jsr 15148 <trimStack>
   1319c:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1319e:	|         move.l 1c9f8 <thumbWidth>,d0
   131a4:	|     ,-- bmi.s 131d2 <builtIn_setThumbnailSize+0xa8>
   131a6:	|     |   move.l 1c9fc <thumbHeight>,d0
   131ac:	|     +-- bmi.s 131d2 <builtIn_setThumbnailSize+0xa8>
   131ae:	|     |   move.l 1c9f8 <thumbWidth>,d0
   131b4:	|     |   move.l d0,d1
   131b6:	|     |   move.l 1ca46 <winWidth>,d0
   131bc:	|     |   cmp.l d1,d0
   131be:	|     +-- bcs.s 131d2 <builtIn_setThumbnailSize+0xa8>
   131c0:	|     |   move.l 1c9fc <thumbHeight>,d0
   131c6:	|     |   move.l d0,d1
   131c8:	|     |   move.l 1ca4a <winHeight>,d0
   131ce:	|     |   cmp.l d1,d0
   131d0:	|  ,--|-- bcc.s 13210 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   131d2:	|  |  '-> move.l 1c9fc <thumbHeight>,d1
   131d8:	|  |      move.l 1c9f8 <thumbWidth>,d0
   131de:	|  |      move.l d1,-(sp)
   131e0:	|  |      move.l d0,-(sp)
   131e2:	|  |      pea 19e17 <talk.c.490538ff+0x408>
   131e8:	|  |      lea 14(sp),a0
   131ec:	|  |      move.l a0,-(sp)
   131ee:	|  |      jsr 13fce <sprintf>
   131f4:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   131f8:	|  |      lea 2(sp),a0
   131fc:	|  |      move.l a0,-(sp)
   131fe:	|  |      pea 19e1f <talk.c.490538ff+0x410>
   13204:	|  |      jsr 172a4 <KPrintF>
   1320a:	|  |      addq.l #8,sp
		return BR_ERROR;
   1320c:	|  |      moveq #1,d0
   1320e:	+--|----- bra.s 13212 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13210:	|  '----> moveq #2,d0
}
   13212:	'-------> lea 52(sp),sp
   13216:	          rts

00013218 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13218:	       lea -12(sp),sp
   1321c:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1321e:	       movea.l 24(sp),a0
   13222:	       move.l 24(a0),d0
   13226:	       move.l d0,-(sp)
   13228:	       pea 1 <_start+0x1>
   1322c:	       lea 12(sp),a0
   13230:	       move.l a0,-(sp)
   13232:	       jsr 147c4 <getValueType>
   13238:	       lea 12(sp),sp
   1323c:	       tst.w d0
   1323e:	   ,-- bne.s 13246 <builtIn_hasFlag+0x2e>
   13240:	   |   moveq #1,d0
   13242:	,--|-- bra.w 132d6 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13246:	|  '-> moveq #24,d0
   13248:	|      add.l 24(sp),d0
   1324c:	|      move.l d0,-(sp)
   1324e:	|      jsr 15148 <trimStack>
   13254:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13256:	|      movea.l 24(sp),a0
   1325a:	|      move.l 24(a0),d0
   1325e:	|      move.l d0,-(sp)
   13260:	|      pea 7 <_start+0x7>
   13264:	|      moveq #16,d0
   13266:	|      add.l sp,d0
   13268:	|      move.l d0,-(sp)
   1326a:	|      jsr 147c4 <getValueType>
   13270:	|      lea 12(sp),sp
   13274:	|      tst.w d0
   13276:	|  ,-- bne.s 1327c <builtIn_hasFlag+0x64>
   13278:	|  |   moveq #1,d0
   1327a:	+--|-- bra.s 132d6 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1327c:	|  '-> moveq #24,d0
   1327e:	|      add.l 24(sp),d0
   13282:	|      move.l d0,-(sp)
   13284:	|      jsr 15148 <trimStack>
   1328a:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1328c:	|      move.l 8(sp),d0
   13290:	|      move.l d0,-(sp)
   13292:	|      jsr d4d8 <findObjectType>
   13298:	|      addq.l #4,sp
   1329a:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1329e:	|  ,-- bne.s 132a4 <builtIn_hasFlag+0x8c>
   132a0:	|  |   moveq #1,d0
   132a2:	+--|-- bra.s 132d6 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   132a4:	|  '-> movea.l 12(sp),a0
   132a8:	|      move.w 36(a0),d0
   132ac:	|      moveq #0,d2
   132ae:	|      move.w d0,d2
   132b0:	|      move.l 4(sp),d1
   132b4:	|      moveq #1,d0
   132b6:	|      lsl.l d1,d0
   132b8:	|      move.l d2,d1
   132ba:	|      and.l d0,d1
   132bc:	|      moveq #28,d0
   132be:	|      add.l 24(sp),d0
   132c2:	|      move.l d1,-(sp)
   132c4:	|      pea 1 <_start+0x1>
   132c8:	|      move.l d0,-(sp)
   132ca:	|      jsr 150b6 <setVariable>
   132d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132d4:	|      moveq #2,d0
}
   132d6:	'----> move.l (sp)+,d2
   132d8:	       lea 12(sp),sp
   132dc:	       rts

000132de <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   132de:	       jsr d4c6 <snapshot>
   132e4:	       tst.w d0
   132e6:	,----- beq.s 132ec <builtIn_snapshotGrab+0xe>
   132e8:	|      moveq #2,d0
   132ea:	|  ,-- bra.s 132ee <builtIn_snapshotGrab+0x10>
   132ec:	'--|-> moveq #1,d0
}
   132ee:	   '-> rts

000132f0 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   132f0:	jsr d372 <nosnapshot>
	return BR_CONTINUE;
   132f6:	moveq #2,d0
}
   132f8:	rts

000132fa <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   132fa:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   132fc:	move.w 1c342 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13304:	movea.l 12(sp),a0
   13308:	move.l 24(a0),d0
   1330c:	move.l d0,-(sp)
   1330e:	jsr 14d04 <getBoolean>
   13314:	addq.l #4,sp
   13316:	move.w d0,1c342 <allowAnyFilename>
	trimStack (&fun -> stack);
   1331c:	moveq #24,d0
   1331e:	add.l 12(sp),d0
   13322:	move.l d0,-(sp)
   13324:	jsr 15148 <trimStack>
   1332a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1332c:	movea.w 2(sp),a0
   13330:	moveq #28,d0
   13332:	add.l 12(sp),d0
   13336:	move.l a0,-(sp)
   13338:	pea 1 <_start+0x1>
   1333c:	move.l d0,-(sp)
   1333e:	jsr 150b6 <setVariable>
   13344:	lea 12(sp),sp
	return BR_CONTINUE;
   13348:	moveq #2,d0
}
   1334a:	addq.l #4,sp
   1334c:	rts

0001334e <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1334e:	moveq #24,d0
   13350:	add.l 8(sp),d0
   13354:	move.l d0,-(sp)
   13356:	jsr 15148 <trimStack>
   1335c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1335e:	moveq #24,d0
   13360:	add.l 8(sp),d0
   13364:	move.l d0,-(sp)
   13366:	jsr 15148 <trimStack>
   1336c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1336e:	moveq #28,d0
   13370:	add.l 8(sp),d0
   13374:	clr.l -(sp)
   13376:	pea 1 <_start+0x1>
   1337a:	move.l d0,-(sp)
   1337c:	jsr 150b6 <setVariable>
   13382:	lea 12(sp),sp

	return BR_CONTINUE;
   13386:	moveq #2,d0
}
   13388:	rts

0001338a <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1338a:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1338c:	movea.l 12(sp),a0
   13390:	move.l 24(a0),d0
   13394:	move.l d0,-(sp)
   13396:	jsr 14d9a <getTextFromAnyVar>
   1339c:	addq.l #4,sp
   1339e:	move.l d0,(sp)
	trimStack (&fun -> stack);
   133a0:	moveq #24,d0
   133a2:	add.l 12(sp),d0
   133a6:	move.l d0,-(sp)
   133a8:	jsr 15148 <trimStack>
   133ae:	addq.l #4,sp
	KPrintF (mess);
   133b0:	move.l (sp),-(sp)
   133b2:	jsr 172a4 <KPrintF>
   133b8:	addq.l #4,sp
	return BR_ERROR;
   133ba:	moveq #1,d0
}
   133bc:	addq.l #4,sp
   133be:	rts

000133c0 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133c0:	moveq #24,d0
   133c2:	add.l 8(sp),d0
   133c6:	move.l d0,-(sp)
   133c8:	jsr 15148 <trimStack>
   133ce:	addq.l #4,sp
	trimStack (&fun -> stack);
   133d0:	moveq #24,d0
   133d2:	add.l 8(sp),d0
   133d6:	move.l d0,-(sp)
   133d8:	jsr 15148 <trimStack>
   133de:	addq.l #4,sp
	trimStack (&fun -> stack);
   133e0:	moveq #24,d0
   133e2:	add.l 8(sp),d0
   133e6:	move.l d0,-(sp)
   133e8:	jsr 15148 <trimStack>
   133ee:	addq.l #4,sp
	trimStack (&fun -> stack);
   133f0:	moveq #24,d0
   133f2:	add.l 8(sp),d0
   133f6:	move.l d0,-(sp)
   133f8:	jsr 15148 <trimStack>
   133fe:	addq.l #4,sp

	return BR_CONTINUE;
   13400:	moveq #2,d0
}
   13402:	rts

00013404 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13404:	moveq #24,d0
   13406:	add.l 8(sp),d0
   1340a:	move.l d0,-(sp)
   1340c:	jsr 15148 <trimStack>
   13412:	addq.l #4,sp
	trimStack (&fun -> stack);
   13414:	moveq #24,d0
   13416:	add.l 8(sp),d0
   1341a:	move.l d0,-(sp)
   1341c:	jsr 15148 <trimStack>
   13422:	addq.l #4,sp
	trimStack (&fun -> stack);
   13424:	moveq #24,d0
   13426:	add.l 8(sp),d0
   1342a:	move.l d0,-(sp)
   1342c:	jsr 15148 <trimStack>
   13432:	addq.l #4,sp

	return BR_CONTINUE;
   13434:	moveq #2,d0

}
   13436:	rts

00013438 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13438:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1343a:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13440:	sne d0
   13442:	neg.b d0
   13444:	moveq #0,d1
   13446:	move.b d0,d1
   13448:	moveq #28,d0
   1344a:	add.l 12(sp),d0
   1344e:	move.l d1,-(sp)
   13450:	pea 1 <_start+0x1>
   13454:	move.l d0,-(sp)
   13456:	jsr 150b6 <setVariable>
   1345c:	lea 12(sp),sp
	return BR_CONTINUE;
   13460:	moveq #2,d0
}
   13462:	addq.l #4,sp
   13464:	rts

00013466 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13466:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13468:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1346e:	pea 19e36 <talk.c.490538ff+0x427>
   13474:	jsr 172a4 <KPrintF>
   1347a:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1347c:	tst.w 2(sp)
   13480:	sne d0
   13482:	neg.b d0
   13484:	moveq #0,d1
   13486:	move.b d0,d1
   13488:	moveq #28,d0
   1348a:	add.l 12(sp),d0
   1348e:	move.l d1,-(sp)
   13490:	pea 1 <_start+0x1>
   13494:	move.l d0,-(sp)
   13496:	jsr 150b6 <setVariable>
   1349c:	lea 12(sp),sp
	return BR_CONTINUE;
   134a0:	moveq #2,d0
}
   134a2:	addq.l #4,sp
   134a4:	rts

000134a6 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   134a6:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   134aa:	             move.l 104(sp),d0
   134ae:	             cmpi.l #166,d0
   134b4:	,----------- bhi.w 13596 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   134b8:	|            move.l 104(sp),d0
   134bc:	|            add.l d0,d0
   134be:	|            movea.l d0,a1
   134c0:	|            adda.l d0,a1
   134c2:	|            lea 1c488 <paramNum>,a0
   134c8:	|            move.l (0,a1,a0.l),d0
   134cc:	|            moveq #-1,d1
   134ce:	|            cmp.l d0,d1
   134d0:	|  ,-------- beq.w 1355e <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   134d4:	|  |         move.l 104(sp),d0
   134d8:	|  |         add.l d0,d0
   134da:	|  |         movea.l d0,a1
   134dc:	|  |         adda.l d0,a1
   134de:	|  |         lea 1c488 <paramNum>,a0
   134e4:	|  |         move.l (0,a1,a0.l),d0
   134e8:	|  |         cmp.l 108(sp),d0
   134ec:	|  +-------- beq.s 1355e <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   134ee:	|  |         move.l 104(sp),d0
   134f2:	|  |         add.l d0,d0
   134f4:	|  |         movea.l d0,a1
   134f6:	|  |         adda.l d0,a1
   134f8:	|  |         lea 1c488 <paramNum>,a0
   134fe:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13502:	|  |         moveq #1,d1
   13504:	|  |         cmp.l d0,d1
   13506:	|  |  ,----- bne.s 13510 <callBuiltIn+0x6a>
   13508:	|  |  |      move.l #101050,d0
   1350e:	|  |  |  ,-- bra.s 13516 <callBuiltIn+0x70>
   13510:	|  |  '--|-> move.l #106092,d0
   13516:	|  |     '-> move.l 104(sp),d1
   1351a:	|  |         add.l d1,d1
   1351c:	|  |         movea.l d1,a1
   1351e:	|  |         adda.l d1,a1
   13520:	|  |         lea 1c488 <paramNum>,a0
   13526:	|  |         move.l (0,a1,a0.l),d1
   1352a:	|  |         move.l d0,-(sp)
   1352c:	|  |         move.l d1,-(sp)
   1352e:	|  |         pea 19e6e <talk.c.490538ff+0x45f>
   13534:	|  |         lea 12(sp),a0
   13538:	|  |         move.l a0,-(sp)
   1353a:	|  |         jsr 13fce <sprintf>
   13540:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13544:	|  |         movea.l sp,a0
   13546:	|  |         move.l a0,-(sp)
   13548:	|  |         jsr b8 <copyString>
   1354e:	|  |         addq.l #4,sp
   13550:	|  |         move.l d0,-(sp)
   13552:	|  |         jsr 172a4 <KPrintF>
   13558:	|  |         addq.l #4,sp
				return BR_ERROR;
   1355a:	|  |         moveq #1,d0
   1355c:	|  |     ,-- bra.s 135a6 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1355e:	|  '-----|-> move.l 104(sp),d0
   13562:	|        |   add.l d0,d0
   13564:	|        |   movea.l d0,a1
   13566:	|        |   adda.l d0,a1
   13568:	|        |   lea 1c724 <builtInFunctionArray>,a0
   1356e:	|        |   move.l (0,a1,a0.l),d0
   13572:	+--------|-- beq.s 13596 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13574:	|        |   move.l 104(sp),d0
   13578:	|        |   add.l d0,d0
   1357a:	|        |   movea.l d0,a1
   1357c:	|        |   adda.l d0,a1
   1357e:	|        |   lea 1c724 <builtInFunctionArray>,a0
   13584:	|        |   movea.l (0,a1,a0.l),a0
   13588:	|        |   move.l 112(sp),-(sp)
   1358c:	|        |   move.l 112(sp),-(sp)
   13590:	|        |   jsr (a0)
   13592:	|        |   addq.l #8,sp
   13594:	|        +-- bra.s 135a6 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13596:	'--------|-> pea 19e99 <talk.c.490538ff+0x48a>
   1359c:	         |   jsr 172a4 <KPrintF>
   135a2:	         |   addq.l #4,sp
	return BR_ERROR;
   135a4:	         |   moveq #1,d0
}
   135a6:	         '-> lea 100(sp),sp
   135aa:	             rts

000135ac <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   135ac:	          subq.l #8,sp
	int indexNum = -1;
   135ae:	          moveq #-1,d0
   135b0:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135b4:	          clr.l (sp)
   135b6:	   ,----- bra.s 135dc <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   135b8:	,--|----> move.l 1cbc2 <languageTable>,d1
   135be:	|  |      move.l (sp),d0
   135c0:	|  |      add.l d0,d0
   135c2:	|  |      add.l d0,d0
   135c4:	|  |      movea.l d1,a0
   135c6:	|  |      adda.l d0,a0
   135c8:	|  |      move.l (a0),d0
   135ca:	|  |      move.l d0,d1
   135cc:	|  |      move.l 1cbca <gameSettings>,d0
   135d2:	|  |      cmp.l d1,d0
   135d4:	|  |  ,-- bne.s 135da <getLanguageForFileB+0x2e>
   135d6:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135da:	|  |  '-> addq.l #1,(sp)
   135dc:	|  '----> move.l 1cbce <gameSettings+0x4>,d0
   135e2:	|         cmp.l (sp),d0
   135e4:	'-------- bcc.s 135b8 <getLanguageForFileB+0xc>
	}

	return indexNum;
   135e6:	          move.l 4(sp),d0
}
   135ea:	          addq.l #8,sp
   135ec:	          rts

000135ee <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   135ee:	          lea -20(sp),sp
   135f2:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   135f4:	          move.l 28(sp),-(sp)
   135f8:	          jsr 13cb0 <strlen>
   135fe:	          addq.l #4,sp
   13600:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13604:	          moveq #4,d0
   13606:	          cmp.l 12(sp),d0
   1360a:	      ,-- bge.s 1362e <getPrefsFilename+0x40>
   1360c:	      |   move.l 12(sp),d0
   13610:	      |   subq.l #4,d0
   13612:	      |   movea.l 28(sp),a0
   13616:	      |   adda.l d0,a0
   13618:	      |   move.b (a0),d0
   1361a:	      |   cmpi.b #46,d0
   1361e:	      +-- bne.s 1362e <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13620:	      |   move.l 12(sp),d0
   13624:	      |   subq.l #4,d0
   13626:	      |   movea.l 28(sp),a0
   1362a:	      |   adda.l d0,a0
   1362c:	      |   clr.b (a0)
	}

	char * f = filename;
   1362e:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13634:	          clr.l 20(sp)
   13638:	   ,----- bra.s 13660 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1363a:	,--|----> move.l 20(sp),d0
   1363e:	|  |      movea.l 28(sp),a0
   13642:	|  |      adda.l d0,a0
   13644:	|  |      move.b (a0),d0
   13646:	|  |      cmpi.b #47,d0
   1364a:	|  |  ,-- bne.s 1365c <getPrefsFilename+0x6e>
   1364c:	|  |  |   move.l 20(sp),d0
   13650:	|  |  |   addq.l #1,d0
   13652:	|  |  |   move.l 28(sp),d1
   13656:	|  |  |   add.l d0,d1
   13658:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1365c:	|  |  '-> addq.l #1,20(sp)
   13660:	|  '----> move.l 20(sp),d0
   13664:	|         cmp.l 12(sp),d0
   13668:	'-------- blt.s 1363a <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1366a:	          pea 19ec4 <talk.c.490538ff+0x4b5>
   13670:	          move.l 20(sp),-(sp)
   13674:	          jsr 13cf0 <joinStrings>
   1367a:	          addq.l #8,sp
   1367c:	          move.l d0,8(sp)

	FreeVec(filename);
   13680:	          move.l 28(sp),4(sp)
   13686:	          move.l 1caf2 <SysBase>,d0
   1368c:	          movea.l d0,a6
   1368e:	          movea.l 4(sp),a1
   13692:	          jsr -690(a6)
	filename = NULL;
   13696:	          clr.l 28(sp)
	return joined;
   1369a:	          move.l 8(sp),d0
}
   1369e:	          movea.l (sp)+,a6
   136a0:	          lea 20(sp),sp
   136a4:	          rts

000136a6 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   136a6:	             lea -28(sp),sp
   136aa:	             move.l a6,-(sp)
   136ac:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136ae:	             move.l 1cbce <gameSettings+0x4>,d0
   136b4:	             move.l d0,d1
   136b6:	             addq.l #1,d1
   136b8:	             move.l d1,28(sp)
   136bc:	             clr.l 24(sp)
   136c0:	             move.l 1caf2 <SysBase>,d0
   136c6:	             movea.l d0,a6
   136c8:	             move.l 28(sp),d0
   136cc:	             move.l 24(sp),d1
   136d0:	             jsr -684(a6)
   136d4:	             move.l d0,20(sp)
   136d8:	             move.l 20(sp),d0
   136dc:	             move.l d0,1cbc2 <languageTable>
    if( languageTable == 0) {
   136e2:	             move.l 1cbc2 <languageTable>,d0
   136e8:	         ,-- bne.s 136f8 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   136ea:	         |   pea 19ec9 <talk.c.490538ff+0x4ba>
   136f0:	         |   jsr 172a4 <KPrintF>
   136f6:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136f8:	         '-> move.l 1cbce <gameSettings+0x4>,d0
   136fe:	             move.l d0,d1
   13700:	             addq.l #1,d1
   13702:	             move.l d1,16(sp)
   13706:	             clr.l 12(sp)
   1370a:	             move.l 1caf2 <SysBase>,d0
   13710:	             movea.l d0,a6
   13712:	             move.l 16(sp),d0
   13716:	             move.l 12(sp),d1
   1371a:	             jsr -684(a6)
   1371e:	             move.l d0,8(sp)
   13722:	             move.l 8(sp),d0
   13726:	             move.l d0,1cbc6 <languageName>
	if( languageName == 0) {
   1372c:	             move.l 1cbc6 <languageName>,d0
   13732:	         ,-- bne.s 13742 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13734:	         |   pea 19eff <talk.c.490538ff+0x4f0>
   1373a:	         |   jsr 172a4 <KPrintF>
   13740:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13742:	         '-> clr.l 32(sp)
   13746:	   ,-------- bra.s 137be <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13748:	,--|-------> tst.l 32(sp)
   1374c:	|  |  ,----- beq.s 1375c <makeLanguageTable+0xb6>
   1374e:	|  |  |      move.l 40(sp),-(sp)
   13752:	|  |  |      jsr 6bc <get2bytes>
   13758:	|  |  |      addq.l #4,sp
   1375a:	|  |  |  ,-- bra.s 1375e <makeLanguageTable+0xb8>
   1375c:	|  |  '--|-> moveq #0,d0
   1375e:	|  |     '-> movea.l 1cbc2 <languageTable>,a0
   13764:	|  |         move.l 32(sp),d1
   13768:	|  |         add.l d1,d1
   1376a:	|  |         add.l d1,d1
   1376c:	|  |         adda.l d1,a0
   1376e:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13770:	|  |         move.l 1cbc6 <languageName>,d1
   13776:	|  |         move.l 32(sp),d0
   1377a:	|  |         add.l d0,d0
   1377c:	|  |         add.l d0,d0
   1377e:	|  |         movea.l d1,a0
   13780:	|  |         adda.l d0,a0
   13782:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13784:	|  |         move.l 1ca9c <gameVersion>,d0
   1378a:	|  |         cmpi.l #511,d0
   13790:	|  |     ,-- ble.s 137ba <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13792:	|  |     |   move.l 1cbce <gameSettings+0x4>,d0
   13798:	|  |     +-- beq.s 137ba <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1379a:	|  |     |   move.l 1cbc6 <languageName>,d1
   137a0:	|  |     |   move.l 32(sp),d0
   137a4:	|  |     |   add.l d0,d0
   137a6:	|  |     |   add.l d0,d0
   137a8:	|  |     |   movea.l d1,a2
   137aa:	|  |     |   adda.l d0,a2
   137ac:	|  |     |   move.l 40(sp),-(sp)
   137b0:	|  |     |   jsr b02 <readString>
   137b6:	|  |     |   addq.l #4,sp
   137b8:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   137ba:	|  |     '-> addq.l #1,32(sp)
   137be:	|  '-------> move.l 1cbce <gameSettings+0x4>,d0
   137c4:	|            cmp.l 32(sp),d0
   137c8:	'----------- bcc.w 13748 <makeLanguageTable+0xa2>
		}
	}
}
   137cc:	             nop
   137ce:	             nop
   137d0:	             movea.l (sp)+,a2
   137d2:	             movea.l (sp)+,a6
   137d4:	             lea 28(sp),sp
   137d8:	             rts

000137da <readIniFile>:

void readIniFile (char * filename) {
   137da:	                      lea -564(sp),sp
   137de:	                      move.l a6,-(sp)
   137e0:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   137e2:	                      move.l 576(sp),-(sp)
   137e6:	                      jsr b8 <copyString>
   137ec:	                      addq.l #4,sp
   137ee:	                      move.l d0,-(sp)
   137f0:	                      jsr 135ee <getPrefsFilename>
   137f6:	                      addq.l #4,sp
   137f8:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   137fc:	                      move.l 562(sp),558(sp)
   13802:	                      move.l #1005,554(sp)
   1380a:	                      move.l 1cafa <DOSBase>,d0
   13810:	                      movea.l d0,a6
   13812:	                      move.l 558(sp),d1
   13816:	                      move.l 554(sp),d2
   1381a:	                      jsr -30(a6)
   1381e:	                      move.l d0,550(sp)
   13822:	                      move.l 550(sp),d0
   13826:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1382a:	                      clr.l 1cbca <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13830:	                      move.w #1,1cbd2 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13838:	                      clr.l 1cbd4 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1383e:	                      moveq #1,d0
   13840:	                      move.l d0,1cbd8 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13846:	                      clr.w 1cbdc <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1384c:	                      clr.w 1cbde <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13852:	                      clr.w 1cbe0 <gameSettings+0x16>

	FreeVec(langName);
   13858:	                      move.l 562(sp),542(sp)
   1385e:	                      move.l 1caf2 <SysBase>,d0
   13864:	                      movea.l d0,a6
   13866:	                      movea.l 542(sp),a1
   1386a:	                      jsr -690(a6)
	langName = NULL;
   1386e:	                      clr.l 562(sp)

	if (fp) {
   13872:	                      tst.l 546(sp)
   13876:	,-------------------- beq.w 13b54 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1387a:	|                     move.l sp,d0
   1387c:	|                     addi.l #265,d0
   13882:	|                     move.l #257,d1
   13888:	|                     move.l d1,-(sp)
   1388a:	|                     clr.l -(sp)
   1388c:	|                     move.l d0,-(sp)
   1388e:	|                     jsr 17228 <memset>
   13894:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13898:	|                     move.l sp,d0
   1389a:	|                     addq.l #8,d0
   1389c:	|                     move.l #257,d1
   138a2:	|                     move.l d1,-(sp)
   138a4:	|                     clr.l -(sp)
   138a6:	|                     move.l d0,-(sp)
   138a8:	|                     jsr 17228 <memset>
   138ae:	|                     lea 12(sp),sp
		unsigned char here = 0;
   138b2:	|                     clr.b 571(sp)
		char readChar = ' ';
   138b6:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   138bc:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   138c2:	|                     clr.w 566(sp)
		LONG tmp = 0;
   138c6:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   138ca:	|  ,----------------> move.l 546(sp),534(sp)
   138d0:	|  |                  move.l 1cafa <DOSBase>,d0
   138d6:	|  |                  movea.l d0,a6
   138d8:	|  |                  move.l 534(sp),d1
   138dc:	|  |                  jsr -306(a6)
   138e0:	|  |                  move.l d0,530(sp)
   138e4:	|  |                  move.l 530(sp),d0
   138e8:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   138ec:	|  |                  moveq #-1,d1
   138ee:	|  |                  cmp.l 538(sp),d1
   138f2:	|  |           ,----- bne.s 13900 <readIniFile+0x126>
				readChar = '\n';
   138f4:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   138fa:	|  |           |      clr.w 568(sp)
   138fe:	|  |           |  ,-- bra.s 13906 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13900:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13906:	|  |              '-> move.b 570(sp),d0
   1390a:	|  |                  ext.w d0
   1390c:	|  |                  movea.w d0,a0
   1390e:	|  |                  moveq #61,d0
   13910:	|  |                  cmp.l a0,d0
   13912:	|  |     ,----------- beq.w 13abc <readIniFile+0x2e2>
   13916:	|  |     |            moveq #61,d1
   13918:	|  |     |            cmp.l a0,d1
   1391a:	|  |  ,--|----------- blt.w 13ac8 <readIniFile+0x2ee>
   1391e:	|  |  |  |            moveq #10,d0
   13920:	|  |  |  |            cmp.l a0,d0
   13922:	|  |  |  |        ,-- beq.s 1392c <readIniFile+0x152>
   13924:	|  |  |  |        |   moveq #13,d1
   13926:	|  |  |  |        |   cmp.l a0,d1
   13928:	|  |  +--|--------|-- bne.w 13ac8 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   1392c:	|  |  |  |        '-> tst.w 566(sp)
   13930:	|  |  |  |     ,----- beq.w 13aaa <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13934:	|  |  |  |     |      pea 19f33 <talk.c.490538ff+0x524>
   1393a:	|  |  |  |     |      move.l sp,d0
   1393c:	|  |  |  |     |      addi.l #269,d0
   13942:	|  |  |  |     |      move.l d0,-(sp)
   13944:	|  |  |  |     |      jsr 13c70 <strcmp>
   1394a:	|  |  |  |     |      addq.l #8,sp
   1394c:	|  |  |  |     |      tst.l d0
   1394e:	|  |  |  |     |  ,-- bne.s 13968 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13950:	|  |  |  |     |  |   move.l sp,d0
   13952:	|  |  |  |     |  |   addq.l #8,d0
   13954:	|  |  |  |     |  |   move.l d0,-(sp)
   13956:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   1395c:	|  |  |  |     |  |   addq.l #4,sp
   1395e:	|  |  |  |     |  |   move.l d0,1cbca <gameSettings>
   13964:	|  |  |  |     +--|-- bra.w 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13968:	|  |  |  |     |  '-> pea 19f3c <talk.c.490538ff+0x52d>
   1396e:	|  |  |  |     |      move.l sp,d0
   13970:	|  |  |  |     |      addi.l #269,d0
   13976:	|  |  |  |     |      move.l d0,-(sp)
   13978:	|  |  |  |     |      jsr 13c70 <strcmp>
   1397e:	|  |  |  |     |      addq.l #8,sp
   13980:	|  |  |  |     |      tst.l d0
   13982:	|  |  |  |     |  ,-- bne.s 139a8 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13984:	|  |  |  |     |  |   move.l sp,d0
   13986:	|  |  |  |     |  |   addq.l #8,d0
   13988:	|  |  |  |     |  |   move.l d0,-(sp)
   1398a:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   13990:	|  |  |  |     |  |   addq.l #4,sp
   13992:	|  |  |  |     |  |   tst.l d0
   13994:	|  |  |  |     |  |   seq d0
   13996:	|  |  |  |     |  |   neg.b d0
   13998:	|  |  |  |     |  |   move.b d0,d0
   1399a:	|  |  |  |     |  |   andi.w #255,d0
   1399e:	|  |  |  |     |  |   move.w d0,1cbd2 <gameSettings+0x8>
   139a4:	|  |  |  |     +--|-- bra.w 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   139a8:	|  |  |  |     |  '-> pea 19f43 <talk.c.490538ff+0x534>
   139ae:	|  |  |  |     |      move.l sp,d0
   139b0:	|  |  |  |     |      addi.l #269,d0
   139b6:	|  |  |  |     |      move.l d0,-(sp)
   139b8:	|  |  |  |     |      jsr 13c70 <strcmp>
   139be:	|  |  |  |     |      addq.l #8,sp
   139c0:	|  |  |  |     |      tst.l d0
   139c2:	|  |  |  |     |  ,-- bne.s 139dc <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   139c4:	|  |  |  |     |  |   move.l sp,d0
   139c6:	|  |  |  |     |  |   addq.l #8,d0
   139c8:	|  |  |  |     |  |   move.l d0,-(sp)
   139ca:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   139d0:	|  |  |  |     |  |   addq.l #4,sp
   139d2:	|  |  |  |     |  |   move.l d0,1cbd4 <gameSettings+0xa>
   139d8:	|  |  |  |     +--|-- bra.w 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   139dc:	|  |  |  |     |  '-> pea 19f4b <talk.c.490538ff+0x53c>
   139e2:	|  |  |  |     |      move.l sp,d0
   139e4:	|  |  |  |     |      addi.l #269,d0
   139ea:	|  |  |  |     |      move.l d0,-(sp)
   139ec:	|  |  |  |     |      jsr 13c70 <strcmp>
   139f2:	|  |  |  |     |      addq.l #8,sp
   139f4:	|  |  |  |     |      tst.l d0
   139f6:	|  |  |  |     |  ,-- bne.s 13a10 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   139f8:	|  |  |  |     |  |   move.l sp,d0
   139fa:	|  |  |  |     |  |   addq.l #8,d0
   139fc:	|  |  |  |     |  |   move.l d0,-(sp)
   139fe:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   13a04:	|  |  |  |     |  |   addq.l #4,sp
   13a06:	|  |  |  |     |  |   move.l d0,1cbd8 <gameSettings+0xe>
   13a0c:	|  |  |  |     +--|-- bra.w 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13a10:	|  |  |  |     |  '-> pea 19f55 <talk.c.490538ff+0x546>
   13a16:	|  |  |  |     |      move.l sp,d0
   13a18:	|  |  |  |     |      addi.l #269,d0
   13a1e:	|  |  |  |     |      move.l d0,-(sp)
   13a20:	|  |  |  |     |      jsr 13c70 <strcmp>
   13a26:	|  |  |  |     |      addq.l #8,sp
   13a28:	|  |  |  |     |      tst.l d0
   13a2a:	|  |  |  |     |  ,-- bne.s 13a44 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13a2c:	|  |  |  |     |  |   move.l sp,d0
   13a2e:	|  |  |  |     |  |   addq.l #8,d0
   13a30:	|  |  |  |     |  |   move.l d0,-(sp)
   13a32:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   13a38:	|  |  |  |     |  |   addq.l #4,sp
   13a3a:	|  |  |  |     |  |   move.l d0,d0
   13a3c:	|  |  |  |     |  |   move.w d0,1cbdc <gameSettings+0x12>
   13a42:	|  |  |  |     +--|-- bra.s 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a44:	|  |  |  |     |  '-> pea 19f61 <talk.c.490538ff+0x552>
   13a4a:	|  |  |  |     |      move.l sp,d0
   13a4c:	|  |  |  |     |      addi.l #269,d0
   13a52:	|  |  |  |     |      move.l d0,-(sp)
   13a54:	|  |  |  |     |      jsr 13c70 <strcmp>
   13a5a:	|  |  |  |     |      addq.l #8,sp
   13a5c:	|  |  |  |     |      tst.l d0
   13a5e:	|  |  |  |     |  ,-- bne.s 13a78 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a60:	|  |  |  |     |  |   move.l sp,d0
   13a62:	|  |  |  |     |  |   addq.l #8,d0
   13a64:	|  |  |  |     |  |   move.l d0,-(sp)
   13a66:	|  |  |  |     |  |   jsr 13b60 <stringToInt>
   13a6c:	|  |  |  |     |  |   addq.l #4,sp
   13a6e:	|  |  |  |     |  |   move.l d0,d0
   13a70:	|  |  |  |     |  |   move.w d0,1cbde <gameSettings+0x14>
   13a76:	|  |  |  |     +--|-- bra.s 13aaa <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a78:	|  |  |  |     |  '-> pea 19f6f <talk.c.490538ff+0x560>
   13a7e:	|  |  |  |     |      move.l sp,d0
   13a80:	|  |  |  |     |      addi.l #269,d0
   13a86:	|  |  |  |     |      move.l d0,-(sp)
   13a88:	|  |  |  |     |      jsr 13c70 <strcmp>
   13a8e:	|  |  |  |     |      addq.l #8,sp
   13a90:	|  |  |  |     |      tst.l d0
   13a92:	|  |  |  |     +----- bne.s 13aaa <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13a94:	|  |  |  |     |      move.l sp,d0
   13a96:	|  |  |  |     |      addq.l #8,d0
   13a98:	|  |  |  |     |      move.l d0,-(sp)
   13a9a:	|  |  |  |     |      jsr 13b60 <stringToInt>
   13aa0:	|  |  |  |     |      addq.l #4,sp
   13aa2:	|  |  |  |     |      move.l d0,d0
   13aa4:	|  |  |  |     |      move.w d0,1cbe0 <gameSettings+0x16>
					}
				}
				here = 0;
   13aaa:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13aae:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ab2:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13ab6:	|  |  |  |            clr.b 8(sp)
				break;
   13aba:	|  |  |  |  ,-------- bra.s 13b32 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13abc:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13ac2:	|  |  |     |         clr.b 571(sp)
				break;
   13ac6:	|  |  |     +-------- bra.s 13b32 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13ac8:	|  |  '-----|-------> tst.w 566(sp)
   13acc:	|  |        |  ,----- beq.s 13b00 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13ace:	|  |        |  |      move.b 571(sp),d0
   13ad2:	|  |        |  |      move.b d0,d1
   13ad4:	|  |        |  |      addq.b #1,d1
   13ad6:	|  |        |  |      move.b d1,571(sp)
   13ada:	|  |        |  |      move.b d0,d0
   13adc:	|  |        |  |      andi.l #255,d0
   13ae2:	|  |        |  |      lea 572(sp),a0
   13ae6:	|  |        |  |      adda.l d0,a0
   13ae8:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13aee:	|  |        |  |      moveq #0,d0
   13af0:	|  |        |  |      move.b 571(sp),d0
   13af4:	|  |        |  |      lea 572(sp),a0
   13af8:	|  |        |  |      adda.l d0,a0
   13afa:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13afe:	|  |        |  |  ,-- bra.s 13b30 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13b00:	|  |        |  '--|-> move.b 571(sp),d0
   13b04:	|  |        |     |   move.b d0,d1
   13b06:	|  |        |     |   addq.b #1,d1
   13b08:	|  |        |     |   move.b d1,571(sp)
   13b0c:	|  |        |     |   move.b d0,d0
   13b0e:	|  |        |     |   andi.l #255,d0
   13b14:	|  |        |     |   lea 572(sp),a0
   13b18:	|  |        |     |   adda.l d0,a0
   13b1a:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13b20:	|  |        |     |   moveq #0,d0
   13b22:	|  |        |     |   move.b 571(sp),d0
   13b26:	|  |        |     |   lea 572(sp),a0
   13b2a:	|  |        |     |   adda.l d0,a0
   13b2c:	|  |        |     |   clr.b -307(a0)
				break;
   13b30:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13b32:	|  |        '-------> tst.w 568(sp)
   13b36:	|  '----------------- bne.w 138ca <readIniFile+0xf0>

		Close(fp);
   13b3a:	|                     move.l 546(sp),526(sp)
   13b40:	|                     move.l 1cafa <DOSBase>,d0
   13b46:	|                     movea.l d0,a6
   13b48:	|                     move.l 526(sp),d1
   13b4c:	|                     jsr -36(a6)
   13b50:	|                     move.l d0,522(sp)
	}
}
   13b54:	'-------------------> nop
   13b56:	                      move.l (sp)+,d2
   13b58:	                      movea.l (sp)+,a6
   13b5a:	                      lea 564(sp),sp
   13b5e:	                      rts

00013b60 <stringToInt>:

unsigned int stringToInt (char * s) {
   13b60:	             subq.l #8,sp
	int i = 0;
   13b62:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b66:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b6a:	,----------> movea.l 12(sp),a0
   13b6e:	|            move.b (a0),d0
   13b70:	|            cmpi.b #47,d0
   13b74:	|        ,-- ble.s 13bac <stringToInt+0x4c>
   13b76:	|        |   movea.l 12(sp),a0
   13b7a:	|        |   move.b (a0),d0
   13b7c:	|        |   cmpi.b #57,d0
   13b80:	|        +-- bgt.s 13bac <stringToInt+0x4c>
			i *= 10;
   13b82:	|        |   move.l 4(sp),d1
   13b86:	|        |   move.l d1,d0
   13b88:	|        |   add.l d0,d0
   13b8a:	|        |   add.l d0,d0
   13b8c:	|        |   add.l d1,d0
   13b8e:	|        |   add.l d0,d0
   13b90:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13b94:	|        |   movea.l 12(sp),a0
   13b98:	|        |   move.b (a0),d0
   13b9a:	|        |   ext.w d0
   13b9c:	|        |   movea.w d0,a0
   13b9e:	|        |   moveq #-48,d0
   13ba0:	|        |   add.l a0,d0
   13ba2:	|        |   add.l d0,4(sp)
			s ++;
   13ba6:	|        |   addq.l #1,12(sp)
   13baa:	|  ,-----|-- bra.s 13be4 <stringToInt+0x84>
		} else if (*s == '-') {
   13bac:	|  |     '-> movea.l 12(sp),a0
   13bb0:	|  |         move.b (a0),d0
   13bb2:	|  |         cmpi.b #45,d0
   13bb6:	|  |     ,-- bne.s 13bd0 <stringToInt+0x70>
			negative = ! negative;
   13bb8:	|  |     |   tst.w 2(sp)
   13bbc:	|  |     |   seq d0
   13bbe:	|  |     |   neg.b d0
   13bc0:	|  |     |   move.b d0,d0
   13bc2:	|  |     |   andi.w #255,d0
   13bc6:	|  |     |   move.w d0,2(sp)
			s++;
   13bca:	|  |     |   addq.l #1,12(sp)
   13bce:	+--|-----|-- bra.s 13b6a <stringToInt+0xa>
		} else {
			if (negative)
   13bd0:	|  |     '-> tst.w 2(sp)
   13bd4:	|  |     ,-- beq.s 13bde <stringToInt+0x7e>
				return -i;
   13bd6:	|  |     |   move.l 4(sp),d0
   13bda:	|  |     |   neg.l d0
   13bdc:	|  |  ,--|-- bra.s 13be6 <stringToInt+0x86>
			return i;
   13bde:	|  |  |  '-> move.l 4(sp),d0
   13be2:	|  |  +----- bra.s 13be6 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13be4:	'--'--|----X bra.s 13b6a <stringToInt+0xa>
		}
	}
   13be6:	      '----> addq.l #8,sp
   13be8:	             rts

00013bea <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13bea:	    lea -28(sp),sp
   13bee:	    move.l a6,-(sp)
   13bf0:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13bf2:	    pea 19f79 <talk.c.490538ff+0x56a>
   13bf8:	    jsr 172a4 <KPrintF>
   13bfe:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13c00:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13c04:	    move.l 40(sp),30(sp)
   13c0a:	    move.l #1005,26(sp)
   13c12:	    move.l 1cafa <DOSBase>,d0
   13c18:	    movea.l d0,a6
   13c1a:	    move.l 30(sp),d1
   13c1e:	    move.l 26(sp),d2
   13c22:	    jsr -30(a6)
   13c26:	    move.l d0,22(sp)
   13c2a:	    move.l 22(sp),d0
   13c2e:	    move.l d0,18(sp)
	if (tester) {
   13c32:	,-- beq.s 13c62 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13c34:	|   pea 19f93 <talk.c.490538ff+0x584>
   13c3a:	|   jsr 172a4 <KPrintF>
   13c40:	|   addq.l #4,sp
		retval = 1;
   13c42:	|   move.b #1,35(sp)
		Close(tester);
   13c48:	|   move.l 18(sp),14(sp)
   13c4e:	|   move.l 1cafa <DOSBase>,d0
   13c54:	|   movea.l d0,a6
   13c56:	|   move.l 14(sp),d1
   13c5a:	|   jsr -36(a6)
   13c5e:	|   move.l d0,10(sp)
	}
	return retval;
   13c62:	'-> move.b 35(sp),d0
   13c66:	    move.l (sp)+,d2
   13c68:	    movea.l (sp)+,a6
   13c6a:	    lea 28(sp),sp
   13c6e:	    rts

00013c70 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13c70:	   ,-- bra.s 13c7a <strcmp+0xa>
    {
        s1++;
   13c72:	,--|-> addq.l #1,4(sp)
        s2++;
   13c76:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c7a:	|  '-> movea.l 4(sp),a0
   13c7e:	|      move.b (a0),d0
   13c80:	|  ,-- beq.s 13c92 <strcmp+0x22>
   13c82:	|  |   movea.l 4(sp),a0
   13c86:	|  |   move.b (a0),d1
   13c88:	|  |   movea.l 8(sp),a0
   13c8c:	|  |   move.b (a0),d0
   13c8e:	|  |   cmp.b d1,d0
   13c90:	'--|-- beq.s 13c72 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13c92:	   '-> movea.l 4(sp),a0
   13c96:	       move.b (a0),d0
   13c98:	       moveq #0,d1
   13c9a:	       move.b d0,d1
   13c9c:	       movea.l 8(sp),a0
   13ca0:	       move.b (a0),d0
   13ca2:	       move.b d0,d0
   13ca4:	       andi.l #255,d0
   13caa:	       sub.l d0,d1
   13cac:	       move.l d1,d0
}
   13cae:	       rts

00013cb0 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13cb0:	       subq.l #4,sp
	long unsigned int i = 0;
   13cb2:	       clr.l (sp)
	while(s[i]) i++; 
   13cb4:	   ,-- bra.s 13cb8 <strlen+0x8>
   13cb6:	,--|-> addq.l #1,(sp)
   13cb8:	|  '-> movea.l 8(sp),a0
   13cbc:	|      adda.l (sp),a0
   13cbe:	|      move.b (a0),d0
   13cc0:	'----- bne.s 13cb6 <strlen+0x6>
	return(i);
   13cc2:	       move.l (sp),d0
}
   13cc4:	       addq.l #4,sp
   13cc6:	       rts

00013cc8 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13cc8:	    nop
   13cca:	,-> move.l 8(sp),d0
   13cce:	|   move.l d0,d1
   13cd0:	|   addq.l #1,d1
   13cd2:	|   move.l d1,8(sp)
   13cd6:	|   movea.l 4(sp),a0
   13cda:	|   lea 1(a0),a1
   13cde:	|   move.l a1,4(sp)
   13ce2:	|   movea.l d0,a1
   13ce4:	|   move.b (a1),d0
   13ce6:	|   move.b d0,(a0)
   13ce8:	|   move.b (a0),d0
   13cea:	'-- bne.s 13cca <strcpy+0x2>
}
   13cec:	    nop
   13cee:	    rts

00013cf0 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13cf0:	    lea -20(sp),sp
   13cf4:	    move.l a6,-(sp)
   13cf6:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13cf8:	    move.l 32(sp),-(sp)
   13cfc:	    jsr 13cb0 <strlen>
   13d02:	    addq.l #4,sp
   13d04:	    move.l d0,d2
   13d06:	    move.l 36(sp),-(sp)
   13d0a:	    jsr 13cb0 <strlen>
   13d10:	    addq.l #4,sp
   13d12:	    add.l d2,d0
   13d14:	    move.l d0,d1
   13d16:	    addq.l #1,d1
   13d18:	    move.l d1,20(sp)
   13d1c:	    clr.l 16(sp)
   13d20:	    move.l 1caf2 <SysBase>,d0
   13d26:	    movea.l d0,a6
   13d28:	    move.l 20(sp),d0
   13d2c:	    move.l 16(sp),d1
   13d30:	    jsr -684(a6)
   13d34:	    move.l d0,12(sp)
   13d38:	    move.l 12(sp),d0
   13d3c:	    move.l d0,8(sp)
	char * t = newString;
   13d40:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d46:	    nop
   13d48:	,-> move.l 32(sp),d0
   13d4c:	|   move.l d0,d1
   13d4e:	|   addq.l #1,d1
   13d50:	|   move.l d1,32(sp)
   13d54:	|   movea.l 24(sp),a0
   13d58:	|   lea 1(a0),a1
   13d5c:	|   move.l a1,24(sp)
   13d60:	|   movea.l d0,a1
   13d62:	|   move.b (a1),d0
   13d64:	|   move.b d0,(a0)
   13d66:	|   move.b (a0),d0
   13d68:	'-- bne.s 13d48 <joinStrings+0x58>
	t--;
   13d6a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13d6e:	    nop
   13d70:	,-> move.l 36(sp),d0
   13d74:	|   move.l d0,d1
   13d76:	|   addq.l #1,d1
   13d78:	|   move.l d1,36(sp)
   13d7c:	|   movea.l 24(sp),a0
   13d80:	|   lea 1(a0),a1
   13d84:	|   move.l a1,24(sp)
   13d88:	|   movea.l d0,a1
   13d8a:	|   move.b (a1),d0
   13d8c:	|   move.b d0,(a0)
   13d8e:	|   move.b (a0),d0
   13d90:	'-- bne.s 13d70 <joinStrings+0x80>

	return newString;
   13d92:	    move.l 8(sp),d0
}
   13d96:	    move.l (sp)+,d2
   13d98:	    movea.l (sp)+,a6
   13d9a:	    lea 20(sp),sp
   13d9e:	    rts

00013da0 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13da0:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13da4:	       moveq #10,d0
   13da6:	       cmp.l 28(sp),d0
   13daa:	   ,-- bne.s 13dc8 <itoa+0x28>
   13dac:	   |   tst.l 20(sp)
   13db0:	   +-- bge.s 13dc8 <itoa+0x28>
        *str++ = '-';
   13db2:	   |   move.l 24(sp),d0
   13db6:	   |   move.l d0,d1
   13db8:	   |   addq.l #1,d1
   13dba:	   |   move.l d1,24(sp)
   13dbe:	   |   movea.l d0,a0
   13dc0:	   |   move.b #45,(a0)
        value *= -1;
   13dc4:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13dc8:	   '-> move.l 24(sp),12(sp)
   13dce:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13dd4:	   ,-> move.l 20(sp),d0
   13dd8:	   |   move.l 28(sp),-(sp)
   13ddc:	   |   move.l d0,-(sp)
   13dde:	   |   jsr 17cdc <__modsi3>
   13de4:	   |   addq.l #8,sp
   13de6:	   |   movea.l d0,a1
   13de8:	   |   move.l 12(sp),d0
   13dec:	   |   move.l d0,d1
   13dee:	   |   addq.l #1,d1
   13df0:	   |   move.l d1,12(sp)
   13df4:	   |   lea 19fab <talk.c.490538ff+0x59c>,a0
   13dfa:	   |   move.b (0,a1,a0.l),d1
   13dfe:	   |   movea.l d0,a0
   13e00:	   |   move.b d1,(a0)
        value /= base;
   13e02:	   |   move.l 28(sp),-(sp)
   13e06:	   |   move.l 24(sp),-(sp)
   13e0a:	   |   jsr 17cae <__divsi3>
   13e10:	   |   addq.l #8,sp
   13e12:	   |   move.l d0,20(sp)
    } while (value);
   13e16:	   '-- bne.s 13dd4 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13e18:	       move.l 12(sp),d0
   13e1c:	       move.l d0,d1
   13e1e:	       subq.l #1,d1
   13e20:	       move.l d1,12(sp)
   13e24:	       movea.l d0,a0
   13e26:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13e28:	       move.l 4(sp),8(sp)
   13e2e:	   ,-- bra.s 13e54 <itoa+0xb4>
        char temp = *low;
   13e30:	,--|-> movea.l 8(sp),a0
   13e34:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13e38:	|  |   movea.l 12(sp),a0
   13e3c:	|  |   move.b (a0),d0
   13e3e:	|  |   movea.l 8(sp),a0
   13e42:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e44:	|  |   movea.l 12(sp),a0
   13e48:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e4c:	|  |   addq.l #1,8(sp)
   13e50:	|  |   subq.l #1,12(sp)
   13e54:	|  '-> move.l 8(sp),d0
   13e58:	|      cmp.l 12(sp),d0
   13e5c:	'----- bcs.s 13e30 <itoa+0x90>
    }
    return rc;
   13e5e:	       move.l 4(sp),d0
}
   13e62:	       lea 16(sp),sp
   13e66:	       rts

00013e68 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e68:	                            lea -40(sp),sp
   13e6c:	                            move.l d2,-(sp)
    char* s = str;
   13e6e:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13e74:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e7a:	   ,----------------------- bra.w 13fae <vsprintf2+0x146>
        if (*p == '%') {
   13e7e:	,--|----------------------> movea.l 36(sp),a0
   13e82:	|  |                        move.b (a0),d0
   13e84:	|  |                        cmpi.b #37,d0
   13e88:	|  |  ,-------------------- bne.w 13f94 <vsprintf2+0x12c>
            switch (*++p) {
   13e8c:	|  |  |                     addq.l #1,36(sp)
   13e90:	|  |  |                     movea.l 36(sp),a0
   13e94:	|  |  |                     move.b (a0),d0
   13e96:	|  |  |                     ext.w d0
   13e98:	|  |  |                     movea.w d0,a0
   13e9a:	|  |  |                     moveq #115,d0
   13e9c:	|  |  |                     cmp.l a0,d0
   13e9e:	|  |  |           ,-------- beq.s 13f16 <vsprintf2+0xae>
   13ea0:	|  |  |           |         moveq #115,d1
   13ea2:	|  |  |           |         cmp.l a0,d1
   13ea4:	|  |  |  ,--------|-------- blt.w 13f7c <vsprintf2+0x114>
   13ea8:	|  |  |  |        |         moveq #99,d2
   13eaa:	|  |  |  |        |         cmp.l a0,d2
   13eac:	|  |  |  |  ,-----|-------- beq.w 13f54 <vsprintf2+0xec>
   13eb0:	|  |  |  |  |     |         moveq #100,d0
   13eb2:	|  |  |  |  |     |         cmp.l a0,d0
   13eb4:	|  |  |  +--|-----|-------- bne.w 13f7c <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13eb8:	|  |  |  |  |     |         addq.l #4,56(sp)
   13ebc:	|  |  |  |  |     |         movea.l 56(sp),a0
   13ec0:	|  |  |  |  |     |         move.l (a0),d0
   13ec2:	|  |  |  |  |     |         move.l d0,d1
   13ec4:	|  |  |  |  |     |         subq.l #1,d1
   13ec6:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13eca:	|  |  |  |  |     |         pea a <_start+0xa>
   13ece:	|  |  |  |  |     |         lea 8(sp),a0
   13ed2:	|  |  |  |  |     |         move.l a0,-(sp)
   13ed4:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13ed8:	|  |  |  |  |     |         jsr 13da0 <itoa>
   13ede:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13ee2:	|  |  |  |  |     |         lea 44(sp),a0
   13ee6:	|  |  |  |  |     |         lea -40(a0),a0
   13eea:	|  |  |  |  |     |         move.l a0,28(sp)
   13eee:	|  |  |  |  |     |     ,-- bra.s 13f0a <vsprintf2+0xa2>
                        *s++ = *b;
   13ef0:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13ef4:	|  |  |  |  |     |  |  |   move.l d0,d1
   13ef6:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13ef8:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13efc:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13f00:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13f02:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13f04:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13f06:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13f0a:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13f0e:	|  |  |  |  |     |  |      move.b (a0),d0
   13f10:	|  |  |  |  |     |  '----- bne.s 13ef0 <vsprintf2+0x88>
                    }
                    break;
   13f12:	|  |  |  |  |  ,--|-------- bra.w 13faa <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13f16:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13f1a:	|  |  |  |  |  |            movea.l 56(sp),a0
   13f1e:	|  |  |  |  |  |            move.l (a0),d0
   13f20:	|  |  |  |  |  |            move.l d0,d1
   13f22:	|  |  |  |  |  |            subq.l #1,d1
   13f24:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13f28:	|  |  |  |  |  |        ,-- bra.s 13f4a <vsprintf2+0xe2>
                        *s++ = *sval++;
   13f2a:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13f2e:	|  |  |  |  |  |     |  |   move.l d1,d2
   13f30:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f32:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13f36:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13f3a:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f3c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f3e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f42:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f44:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f46:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f48:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f4a:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13f4e:	|  |  |  |  |  |     |      move.b (a0),d0
   13f50:	|  |  |  |  |  |     '----- bne.s 13f2a <vsprintf2+0xc2>
                    }
                    break;
   13f52:	|  |  |  |  |  +----------- bra.s 13faa <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f54:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13f58:	|  |  |  |     |            movea.l 56(sp),a0
   13f5c:	|  |  |  |     |            move.l (a0),d0
   13f5e:	|  |  |  |     |            move.l d0,d1
   13f60:	|  |  |  |     |            subq.l #1,d1
   13f62:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f66:	|  |  |  |     |            move.l 40(sp),d0
   13f6a:	|  |  |  |     |            move.l d0,d2
   13f6c:	|  |  |  |     |            addq.l #1,d2
   13f6e:	|  |  |  |     |            move.l d2,40(sp)
   13f72:	|  |  |  |     |            move.l 24(sp),d1
   13f76:	|  |  |  |     |            movea.l d0,a0
   13f78:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f7a:	|  |  |  |     +----------- bra.s 13faa <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13f7c:	|  |  |  '-----|----------> move.l 40(sp),d0
   13f80:	|  |  |        |            move.l d0,d1
   13f82:	|  |  |        |            addq.l #1,d1
   13f84:	|  |  |        |            move.l d1,40(sp)
   13f88:	|  |  |        |            movea.l 36(sp),a0
   13f8c:	|  |  |        |            move.b (a0),d1
   13f8e:	|  |  |        |            movea.l d0,a0
   13f90:	|  |  |        |            move.b d1,(a0)
                    break;
   13f92:	|  |  |        +----------- bra.s 13faa <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13f94:	|  |  '--------|----------> move.l 40(sp),d0
   13f98:	|  |           |            move.l d0,d1
   13f9a:	|  |           |            addq.l #1,d1
   13f9c:	|  |           |            move.l d1,40(sp)
   13fa0:	|  |           |            movea.l 36(sp),a0
   13fa4:	|  |           |            move.b (a0),d1
   13fa6:	|  |           |            movea.l d0,a0
   13fa8:	|  |           |            move.b d1,(a0)
        }
        p++;
   13faa:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13fae:	|  '----------------------> movea.l 36(sp),a0
   13fb2:	|                           move.b (a0),d0
   13fb4:	'-------------------------- bne.w 13e7e <vsprintf2+0x16>
    }
    *s = '\0';
   13fb8:	                            movea.l 40(sp),a0
   13fbc:	                            clr.b (a0)
    return s - str;
   13fbe:	                            move.l 40(sp),d0
   13fc2:	                            sub.l 48(sp),d0
}
   13fc6:	                            move.l (sp)+,d2
   13fc8:	                            lea 40(sp),sp
   13fcc:	                            rts

00013fce <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13fce:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13fd0:	moveq #16,d0
   13fd2:	add.l sp,d0
   13fd4:	move.l d0,d1
   13fd6:	addq.l #4,d1
   13fd8:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13fdc:	move.l 16(sp),d0
   13fe0:	move.l 4(sp),-(sp)
   13fe4:	move.l d0,-(sp)
   13fe6:	move.l 20(sp),-(sp)
   13fea:	jsr 13e68 <vsprintf2>
   13ff0:	lea 12(sp),sp
   13ff4:	move.l d0,(sp)
    va_end(args);
   13ff6:	clr.l 4(sp)

    return done;
   13ffa:	move.l (sp),d0
}
   13ffc:	addq.l #8,sp
   13ffe:	rts

00014000 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14000:	       lea -20(sp),sp
   14004:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14006:	       moveq #12,d0
   14008:	       move.l d0,20(sp)
   1400c:	       clr.l 16(sp)
   14010:	       move.l 1caf2 <SysBase>,d0
   14016:	       movea.l d0,a6
   14018:	       move.l 20(sp),d0
   1401c:	       move.l 16(sp),d1
   14020:	       jsr -684(a6)
   14024:	       move.l d0,12(sp)
   14028:	       move.l 12(sp),d0
   1402c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14030:	   ,-- bne.s 14036 <addVarToStack+0x36>
   14032:	   |   clr.w d0
   14034:	,--|-- bra.s 1407e <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   14036:	|  '-> move.l 8(sp),d0
   1403a:	|      move.l d0,-(sp)
   1403c:	|      move.l 32(sp),-(sp)
   14040:	|      jsr 14b62 <copyMain>
   14046:	|      addq.l #8,sp
   14048:	|      tst.w d0
   1404a:	|  ,-- bne.s 14066 <addVarToStack+0x66>
        FreeVec(newStack);
   1404c:	|  |   move.l 8(sp),4(sp)
   14052:	|  |   move.l 1caf2 <SysBase>,d0
   14058:	|  |   movea.l d0,a6
   1405a:	|  |   movea.l 4(sp),a1
   1405e:	|  |   jsr -690(a6)
        return FALSE;
   14062:	|  |   clr.w d0
   14064:	+--|-- bra.s 1407e <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14066:	|  '-> movea.l 32(sp),a0
   1406a:	|      move.l (a0),d0
   1406c:	|      movea.l 8(sp),a0
   14070:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14074:	|      movea.l 32(sp),a0
   14078:	|      move.l 8(sp),(a0)
    return TRUE;
   1407c:	|      moveq #1,d0
}
   1407e:	'----> movea.l (sp)+,a6
   14080:	       lea 20(sp),sp
   14084:	       rts

00014086 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14086:	       lea -16(sp),sp
   1408a:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1408c:	       moveq #12,d0
   1408e:	       move.l d0,16(sp)
   14092:	       clr.l 12(sp)
   14096:	       move.l 1caf2 <SysBase>,d0
   1409c:	       movea.l d0,a6
   1409e:	       move.l 16(sp),d0
   140a2:	       move.l 12(sp),d1
   140a6:	       jsr -684(a6)
   140aa:	       move.l d0,8(sp)
   140ae:	       move.l 8(sp),d0
   140b2:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   140b6:	   ,-- bne.s 140bc <addVarToStackQuick+0x36>
   140b8:	   |   clr.w d0
   140ba:	,--|-- bra.s 140f2 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   140bc:	|  '-> move.l 4(sp),d0
   140c0:	|      pea 8 <_start+0x8>
   140c4:	|      move.l 28(sp),-(sp)
   140c8:	|      move.l d0,-(sp)
   140ca:	|      jsr 17258 <memcpy>
   140d0:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   140d4:	|      movea.l 24(sp),a0
   140d8:	|      clr.l (a0)

    newStack->next = *thisStack;
   140da:	|      movea.l 28(sp),a0
   140de:	|      move.l (a0),d0
   140e0:	|      movea.l 4(sp),a0
   140e4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   140e8:	|      movea.l 28(sp),a0
   140ec:	|      move.l 4(sp),(a0)
    return TRUE;
   140f0:	|      moveq #1,d0
}
   140f2:	'----> movea.l (sp)+,a6
   140f4:	       lea 16(sp),sp
   140f8:	       rts

000140fa <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   140fa:	       lea -16(sp),sp
   140fe:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14100:	       movea.l 24(sp),a0
   14104:	       move.l (a0),d0
   14106:	       moveq #1,d1
   14108:	       cmp.l d0,d1
   1410a:	   ,-- bne.s 14134 <addVariablesInSecond+0x3a>
   1410c:	   |   movea.l 28(sp),a0
   14110:	   |   move.l (a0),d0
   14112:	   |   moveq #1,d1
   14114:	   |   cmp.l d0,d1
   14116:	   +-- bne.s 14134 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   14118:	   |   movea.l 28(sp),a0
   1411c:	   |   move.l 4(a0),d1
   14120:	   |   movea.l 24(sp),a0
   14124:	   |   move.l 4(a0),d0
   14128:	   |   add.l d1,d0
   1412a:	   |   movea.l 28(sp),a0
   1412e:	   |   move.l d0,4(a0)
   14132:	,--|-- bra.s 141ae <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14134:	|  '-> move.l 24(sp),-(sp)
   14138:	|      jsr 14d9a <getTextFromAnyVar>
   1413e:	|      addq.l #4,sp
   14140:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14144:	|      move.l 28(sp),-(sp)
   14148:	|      jsr 14d9a <getTextFromAnyVar>
   1414e:	|      addq.l #4,sp
   14150:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14154:	|      move.l 28(sp),-(sp)
   14158:	|      jsr 14a12 <unlinkVar>
   1415e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14160:	|      move.l 12(sp),-(sp)
   14164:	|      move.l 20(sp),-(sp)
   14168:	|      jsr 13cf0 <joinStrings>
   1416e:	|      addq.l #8,sp
   14170:	|      movea.l 28(sp),a0
   14174:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14178:	|      movea.l 28(sp),a0
   1417c:	|      moveq #3,d0
   1417e:	|      move.l d0,(a0)
		FreeVec(string1);
   14180:	|      move.l 16(sp),8(sp)
   14186:	|      move.l 1caf2 <SysBase>,d0
   1418c:	|      movea.l d0,a6
   1418e:	|      movea.l 8(sp),a1
   14192:	|      jsr -690(a6)
		FreeVec(string2);
   14196:	|      move.l 12(sp),4(sp)
   1419c:	|      move.l 1caf2 <SysBase>,d0
   141a2:	|      movea.l d0,a6
   141a4:	|      movea.l 4(sp),a1
   141a8:	|      jsr -690(a6)
	}
}
   141ac:	|      nop
   141ae:	'----> nop
   141b0:	       movea.l (sp)+,a6
   141b2:	       lea 16(sp),sp
   141b6:	       rts

000141b8 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   141b8:	movea.l 8(sp),a0
   141bc:	move.l 4(a0),-(sp)
   141c0:	move.l (a0),-(sp)
   141c2:	movea.l 12(sp),a0
   141c6:	move.l 4(a0),-(sp)
   141ca:	move.l (a0),-(sp)
   141cc:	jsr 141ee <compareVars>
   141d2:	lea 16(sp),sp
   141d6:	move.l d0,-(sp)
   141d8:	pea 1 <_start+0x1>
   141dc:	move.l 16(sp),-(sp)
   141e0:	jsr 150b6 <setVariable>
   141e6:	lea 12(sp),sp
}
   141ea:	nop
   141ec:	rts

000141ee <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   141ee:	       subq.l #4,sp
	int re = 0;
   141f0:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   141f2:	       move.l 8(sp),d1
   141f6:	       move.l 16(sp),d0
   141fa:	       cmp.l d1,d0
   141fc:	,----- bne.w 142c4 <compareVars+0xd6>
		switch (var1.varType) {
   14200:	|      move.l 8(sp),d0
   14204:	|      moveq #9,d1
   14206:	|      cmp.l d0,d1
   14208:	|  ,-- bcs.w 142ac <compareVars+0xbe>
   1420c:	|  |   add.l d0,d0
   1420e:	|  |   movea.l d0,a0
   14210:	|  |   adda.l #82460,a0
   14216:	|  |   move.w (a0),d0
   14218:	|  |   jmp (1421c <compareVars+0x2e>,pc,d0.w)
   1421c:	|  |   ori.b #-112,(a4)
   14220:	|  |   ori.l #5243024,(a0)
   14226:	|  |   ori.l #7733392,(a0)
   1422c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14232:	|  |   move.l d0,(sp)
			break;
   14234:	+--|-- bra.w 142c4 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14238:	|  |   move.l 12(sp),d1
   1423c:	|  |   move.l 20(sp),d0
   14240:	|  |   cmp.l d1,d0
   14242:	|  |   seq d0
   14244:	|  |   neg.b d0
   14246:	|  |   move.b d0,d0
   14248:	|  |   andi.l #255,d0
   1424e:	|  |   move.l d0,(sp)
			break;
   14250:	+--|-- bra.s 142c4 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14252:	|  |   move.l 12(sp),d1
   14256:	|  |   move.l 20(sp),d0
   1425a:	|  |   cmp.l d1,d0
   1425c:	|  |   seq d0
   1425e:	|  |   neg.b d0
   14260:	|  |   move.b d0,d0
   14262:	|  |   andi.l #255,d0
   14268:	|  |   move.l d0,(sp)
			break;
   1426a:	+--|-- bra.s 142c4 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1426c:	|  |   move.l 20(sp),d1
   14270:	|  |   move.l 12(sp),d0
   14274:	|  |   move.l d1,-(sp)
   14276:	|  |   move.l d0,-(sp)
   14278:	|  |   jsr 13c70 <strcmp>
   1427e:	|  |   addq.l #8,sp
   14280:	|  |   tst.l d0
   14282:	|  |   seq d0
   14284:	|  |   neg.b d0
   14286:	|  |   move.b d0,d0
   14288:	|  |   andi.l #255,d0
   1428e:	|  |   move.l d0,(sp)
			break;
   14290:	+--|-- bra.s 142c4 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14292:	|  |   move.l 12(sp),d1
   14296:	|  |   move.l 20(sp),d0
   1429a:	|  |   cmp.l d1,d0
   1429c:	|  |   seq d0
   1429e:	|  |   neg.b d0
   142a0:	|  |   move.b d0,d0
   142a2:	|  |   andi.l #255,d0
   142a8:	|  |   move.l d0,(sp)
			break;
   142aa:	+--|-- bra.s 142c4 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   142ac:	|  '-> move.l 12(sp),d1
   142b0:	|      move.l 20(sp),d0
   142b4:	|      cmp.l d1,d0
   142b6:	|      seq d0
   142b8:	|      neg.b d0
   142ba:	|      move.b d0,d0
   142bc:	|      andi.l #255,d0
   142c2:	|      move.l d0,(sp)
		}
	}
	return re;
   142c4:	'----> move.l (sp),d0
}
   142c6:	       addq.l #4,sp
   142c8:	       rts

000142ca <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   142ca:	             lea -16(sp),sp
   142ce:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   142d0:	             movea.l 28(sp),a0
   142d4:	             moveq #6,d0
   142d6:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   142d8:	             moveq #12,d0
   142da:	             move.l d0,12(sp)
   142de:	             clr.l 8(sp)
   142e2:	             move.l 1caf2 <SysBase>,d0
   142e8:	             movea.l d0,a6
   142ea:	             move.l 12(sp),d0
   142ee:	             move.l 8(sp),d1
   142f2:	             jsr -684(a6)
   142f6:	             move.l d0,4(sp)
   142fa:	             move.l 4(sp),d0
   142fe:	             movea.l 28(sp),a0
   14302:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14306:	             movea.l 28(sp),a0
   1430a:	             move.l 4(a0),d0
   1430e:	         ,-- bne.s 14316 <copyStack+0x4c>
   14310:	         |   clr.w d0
   14312:	,--------|-- bra.w 14398 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14316:	|        '-> movea.l 28(sp),a0
   1431a:	|            movea.l 4(a0),a0
   1431e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14320:	|            movea.l 28(sp),a0
   14324:	|            movea.l 4(a0),a0
   14328:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1432c:	|            movea.l 28(sp),a0
   14330:	|            movea.l 4(a0),a0
   14334:	|            moveq #1,d0
   14336:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1433a:	|            movea.l 24(sp),a0
   1433e:	|            movea.l 4(a0),a0
   14342:	|            move.l (a0),16(sp)

	while (a) {
   14346:	|     ,----- bra.s 14390 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14348:	|  ,--|----> movea.l 28(sp),a0
   1434c:	|  |  |      move.l 4(a0),d0
   14350:	|  |  |      move.l d0,d1
   14352:	|  |  |      move.l 16(sp),d0
   14356:	|  |  |      move.l d1,-(sp)
   14358:	|  |  |      move.l d0,-(sp)
   1435a:	|  |  |      jsr 14000 <addVarToStack>
   14360:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14362:	|  |  |      movea.l 28(sp),a0
   14366:	|  |  |      movea.l 4(a0),a0
   1436a:	|  |  |      move.l 4(a0),d0
   1436e:	|  |  |  ,-- bne.s 14386 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14370:	|  |  |  |   movea.l 28(sp),a0
   14374:	|  |  |  |   movea.l 4(a0),a1
   14378:	|  |  |  |   movea.l 28(sp),a0
   1437c:	|  |  |  |   movea.l 4(a0),a0
   14380:	|  |  |  |   move.l (a1),d0
   14382:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14386:	|  |  |  '-> movea.l 16(sp),a0
   1438a:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14390:	|  |  '----> tst.l 16(sp)
   14394:	|  '-------- bne.s 14348 <copyStack+0x7e>
	}

	return TRUE;
   14396:	|            moveq #1,d0
}
   14398:	'----------> movea.l (sp)+,a6
   1439a:	             lea 16(sp),sp
   1439e:	             rts

000143a0 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   143a0:	                lea -20(sp),sp
   143a4:	                move.l a6,-(sp)
   143a6:	                move.l 36(sp),d0
   143aa:	                move.w d0,d0
   143ac:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   143b0:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   143b6:	                clr.l 16(sp)

    while (*huntVar) {
   143ba:	   ,----------- bra.s 14438 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   143bc:	,--|----------> movea.l 20(sp),a0
   143c0:	|  |            movea.l (a0),a0
   143c2:	|  |            movea.l 28(sp),a1
   143c6:	|  |            move.l 4(a1),-(sp)
   143ca:	|  |            move.l (a1),-(sp)
   143cc:	|  |            move.l 4(a0),-(sp)
   143d0:	|  |            move.l (a0),-(sp)
   143d2:	|  |            jsr 141ee <compareVars>
   143d8:	|  |            lea 16(sp),sp
   143dc:	|  |            tst.l d0
   143de:	|  |  ,-------- beq.s 1442a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   143e0:	|  |  |         movea.l 20(sp),a0
   143e4:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   143e8:	|  |  |         movea.l 12(sp),a0
   143ec:	|  |  |         move.l 8(a0),d0
   143f0:	|  |  |         movea.l 20(sp),a0
   143f4:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   143f6:	|  |  |         move.l 12(sp),d0
   143fa:	|  |  |         move.l d0,-(sp)
   143fc:	|  |  |         jsr 14a12 <unlinkVar>
   14402:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14404:	|  |  |         move.l 12(sp),8(sp)
   1440a:	|  |  |         move.l 1caf2 <SysBase>,d0
   14410:	|  |  |         movea.l d0,a6
   14412:	|  |  |         movea.l 8(sp),a1
   14416:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1441a:	|  |  |         tst.w 6(sp)
   1441e:	|  |  |     ,-- bne.s 14424 <deleteVarFromStack+0x84>
   14420:	|  |  |     |   moveq #1,d0
   14422:	|  |  |  ,--|-- bra.s 14446 <deleteVarFromStack+0xa6>
            reply++;
   14424:	|  |  |  |  '-> addq.l #1,16(sp)
   14428:	|  +--|--|----- bra.s 14438 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1442a:	|  |  '--|----> movea.l 20(sp),a0
   1442e:	|  |     |      move.l (a0),d0
   14430:	|  |     |      move.l d0,d1
   14432:	|  |     |      addq.l #8,d1
   14434:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14438:	|  '-----|----> movea.l 20(sp),a0
   1443c:	|        |      move.l (a0),d0
   1443e:	'--------|----- bne.w 143bc <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14442:	         |      move.l 16(sp),d0
}
   14446:	         '----> movea.l (sp)+,a6
   14448:	                lea 20(sp),sp
   1444c:	                rts

0001444e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1444e:	       movea.l 4(sp),a0
   14452:	       move.l 4(a0),d0
   14456:	       cmp.l 8(sp),d0
   1445a:	   ,-- bhi.s 14460 <fastArrayGetByIndex+0x12>
   1445c:	   |   moveq #0,d0
   1445e:	,--|-- bra.s 1446e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14460:	|  '-> movea.l 4(sp),a0
   14464:	|      move.l (a0),d1
   14466:	|      move.l 8(sp),d0
   1446a:	|      lsl.l #3,d0
   1446c:	|      add.l d1,d0
}
   1446e:	'----> rts

00014470 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14470:	                lea -32(sp),sp
   14474:	                move.l a6,-(sp)
   14476:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14478:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1447c:	                movea.l 44(sp),a0
   14480:	                move.l (a0),d0
   14482:	                moveq #8,d1
   14484:	                cmp.l d0,d1
   14486:	            ,-- beq.s 14494 <getCostumeFromVar+0x24>
   14488:	            |   moveq #9,d1
   1448a:	            |   cmp.l d0,d1
   1448c:	   ,--------|-- beq.w 14542 <getCostumeFromVar+0xd2>
   14490:	,--|--------|-- bra.w 1454c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14494:	|  |        '-> moveq #8,d0
   14496:	|  |            move.l d0,28(sp)
   1449a:	|  |            clr.l 24(sp)
   1449e:	|  |            move.l 1caf2 <SysBase>,d0
   144a4:	|  |            movea.l d0,a6
   144a6:	|  |            move.l 28(sp),d0
   144aa:	|  |            move.l 24(sp),d1
   144ae:	|  |            jsr -684(a6)
   144b2:	|  |            move.l d0,20(sp)
   144b6:	|  |            move.l 20(sp),d0
   144ba:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   144be:	|  |        ,-- bne.s 144c6 <getCostumeFromVar+0x56>
   144c0:	|  |        |   moveq #0,d0
   144c2:	|  |  ,-----|-- bra.w 14576 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   144c6:	|  |  |     '-> movea.l 36(sp),a0
   144ca:	|  |  |         moveq #1,d1
   144cc:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   144d0:	|  |  |         moveq #12,d0
   144d2:	|  |  |         move.l d0,16(sp)
   144d6:	|  |  |         clr.l 12(sp)
   144da:	|  |  |         move.l 1caf2 <SysBase>,d0
   144e0:	|  |  |         movea.l d0,a6
   144e2:	|  |  |         move.l 16(sp),d0
   144e6:	|  |  |         move.l 12(sp),d1
   144ea:	|  |  |         jsr -684(a6)
   144ee:	|  |  |         move.l d0,8(sp)
   144f2:	|  |  |         move.l 8(sp),d0
   144f6:	|  |  |         movea.l 36(sp),a0
   144fa:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   144fc:	|  |  |         movea.l 36(sp),a0
   14500:	|  |  |         move.l (a0),d0
   14502:	|  |  |     ,-- bne.s 14508 <getCostumeFromVar+0x98>
   14504:	|  |  |     |   moveq #0,d0
   14506:	|  |  +-----|-- bra.s 14576 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14508:	|  |  |     '-> clr.l 32(sp)
   1450c:	|  |  |     ,-- bra.s 14538 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1450e:	|  |  |  ,--|-> movea.l 44(sp),a0
   14512:	|  |  |  |  |   move.l 4(a0),d0
   14516:	|  |  |  |  |   movea.l 36(sp),a0
   1451a:	|  |  |  |  |   movea.l (a0),a0
   1451c:	|  |  |  |  |   move.l 32(sp),d1
   14520:	|  |  |  |  |   add.l d1,d1
   14522:	|  |  |  |  |   add.l d1,d1
   14524:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14528:	|  |  |  |  |   move.l d0,-(sp)
   1452a:	|  |  |  |  |   jsr 947c <copyAnim>
   14530:	|  |  |  |  |   addq.l #4,sp
   14532:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14534:	|  |  |  |  |   addq.l #1,32(sp)
   14538:	|  |  |  |  '-> moveq #2,d1
   1453a:	|  |  |  |      cmp.l 32(sp),d1
   1453e:	|  |  |  '----- bge.s 1450e <getCostumeFromVar+0x9e>
            }
            break;
   14540:	|  |  |     ,-- bra.s 14572 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14542:	|  '--|-----|-> movea.l 44(sp),a0
   14546:	|     |     |   move.l 4(a0),d0
   1454a:	|     +-----|-- bra.s 14576 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1454c:	'-----|-----|-> movea.l 44(sp),a0
   14550:	      |     |   move.l (a0),d0
   14552:	      |     |   add.l d0,d0
   14554:	      |     |   movea.l d0,a1
   14556:	      |     |   adda.l d0,a1
   14558:	      |     |   lea 1c9c2 <typeName>,a0
   1455e:	      |     |   move.l (0,a1,a0.l),d0
   14562:	      |     |   move.l d0,-(sp)
   14564:	      |     |   pea 1a01d <talk.c.490538ff+0x60e>
   1456a:	      |     |   jsr 172a4 <KPrintF>
   14570:	      |     |   addq.l #8,sp
    }

    return p;
   14572:	      |     '-> move.l 36(sp),d0
}
   14576:	      '-------> movea.l (sp)+,a2
   14578:	                movea.l (sp)+,a6
   1457a:	                lea 32(sp),sp
   1457e:	                rts

00014580 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14580:	                lea -96(sp),sp
   14584:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14588:	                move.l 116(sp),-(sp)
   1458c:	                pea 1a055 <talk.c.490538ff+0x646>
   14592:	                jsr 13cf0 <joinStrings>
   14598:	                addq.l #8,sp
   1459a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1459e:	            ,-- bne.s 145a6 <getSavedGamesStack+0x26>
   145a0:	            |   clr.w d0
   145a2:	,-----------|-- bra.w 147ba <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   145a6:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   145aa:	|               move.l #106583,98(sp)
   145b2:	|               moveq #-2,d0
   145b4:	|               move.l d0,94(sp)
   145b8:	|               move.l 1cafa <DOSBase>,d0
   145be:	|               movea.l d0,a6
   145c0:	|               move.l 98(sp),d1
   145c4:	|               move.l 94(sp),d2
   145c8:	|               jsr -84(a6)
   145cc:	|               move.l d0,90(sp)
   145d0:	|               move.l 90(sp),d0
   145d4:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   145d8:	|           ,-- bne.s 145e0 <getSavedGamesStack+0x60>
   145da:	|           |   clr.w d0
   145dc:	+-----------|-- bra.w 147ba <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   145e0:	|           '-> move.l #260,82(sp)
   145e8:	|               move.l #65536,78(sp)
   145f0:	|               move.l 1caf2 <SysBase>,d0
   145f6:	|               movea.l d0,a6
   145f8:	|               move.l 82(sp),d0
   145fc:	|               move.l 78(sp),d1
   14600:	|               jsr -684(a6)
   14604:	|               move.l d0,74(sp)
   14608:	|               move.l 74(sp),d0
   1460c:	|               move.l d0,70(sp)
	if (!fib) {
   14610:	|           ,-- bne.s 1462e <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14612:	|           |   move.l 86(sp),22(sp)
   14618:	|           |   move.l 1cafa <DOSBase>,d0
   1461e:	|           |   movea.l d0,a6
   14620:	|           |   move.l 22(sp),d1
   14624:	|           |   jsr -90(a6)
		return FALSE;
   14628:	|           |   clr.w d0
   1462a:	+-----------|-- bra.w 147ba <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1462e:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14632:	|               move.l 86(sp),66(sp)
   14638:	|               move.l 70(sp),62(sp)
   1463e:	|               move.l 1cafa <DOSBase>,d0
   14644:	|               movea.l d0,a6
   14646:	|               move.l 66(sp),d1
   1464a:	|               move.l 62(sp),d2
   1464e:	|               jsr -102(a6)
   14652:	|               move.l d0,58(sp)
   14656:	|               move.l 58(sp),d0
   1465a:	|  ,----------- beq.w 1476e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1465e:	|  |        ,-- bra.w 1473a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14662:	|  |  ,-----|-> move.l 70(sp),d2
   14666:	|  |  |     |   addq.l #8,d2
   14668:	|  |  |     |   move.l 70(sp),d0
   1466c:	|  |  |     |   addq.l #8,d0
   1466e:	|  |  |     |   move.l d0,-(sp)
   14670:	|  |  |     |   jsr 13cb0 <strlen>
   14676:	|  |  |     |   addq.l #4,sp
   14678:	|  |  |     |   move.l d0,d3
   1467a:	|  |  |     |   move.l 116(sp),-(sp)
   1467e:	|  |  |     |   jsr 13cb0 <strlen>
   14684:	|  |  |     |   addq.l #4,sp
   14686:	|  |  |     |   move.l d3,d1
   14688:	|  |  |     |   sub.l d0,d1
   1468a:	|  |  |     |   move.l d2,d0
   1468c:	|  |  |     |   add.l d1,d0
   1468e:	|  |  |     |   move.l 116(sp),-(sp)
   14692:	|  |  |     |   move.l d0,-(sp)
   14694:	|  |  |     |   jsr 13c70 <strcmp>
   1469a:	|  |  |     |   addq.l #8,sp
   1469c:	|  |  |     |   tst.l d0
   1469e:	|  |  |     +-- bne.w 1473a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   146a2:	|  |  |     |   move.l 70(sp),d0
   146a6:	|  |  |     |   addq.l #8,d0
   146a8:	|  |  |     |   move.l d0,-(sp)
   146aa:	|  |  |     |   jsr 13cb0 <strlen>
   146b0:	|  |  |     |   addq.l #4,sp
   146b2:	|  |  |     |   move.l d0,d2
   146b4:	|  |  |     |   move.l 116(sp),-(sp)
   146b8:	|  |  |     |   jsr 13cb0 <strlen>
   146be:	|  |  |     |   addq.l #4,sp
   146c0:	|  |  |     |   move.l d0,d1
   146c2:	|  |  |     |   move.l d2,d0
   146c4:	|  |  |     |   sub.l d1,d0
   146c6:	|  |  |     |   movea.l 70(sp),a0
   146ca:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   146ce:	|  |  |     |   move.l 70(sp),d0
   146d2:	|  |  |     |   addq.l #8,d0
   146d4:	|  |  |     |   move.l d0,-(sp)
   146d6:	|  |  |     |   jsr 118 <decodeFilename>
   146dc:	|  |  |     |   addq.l #4,sp
   146de:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   146e2:	|  |  |     |   move.l 42(sp),-(sp)
   146e6:	|  |  |     |   lea 18(sp),a0
   146ea:	|  |  |     |   move.l a0,-(sp)
   146ec:	|  |  |     |   jsr 149e6 <makeTextVar>
   146f2:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   146f4:	|  |  |     |   move.l 42(sp),38(sp)
   146fa:	|  |  |     |   move.l 1caf2 <SysBase>,d0
   14700:	|  |  |     |   movea.l d0,a6
   14702:	|  |  |     |   movea.l 38(sp),a1
   14706:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1470a:	|  |  |     |   move.l 112(sp),d0
   1470e:	|  |  |     |   move.l d0,-(sp)
   14710:	|  |  |     |   lea 18(sp),a0
   14714:	|  |  |     |   move.l a0,-(sp)
   14716:	|  |  |     |   jsr 14000 <addVarToStack>
   1471c:	|  |  |     |   addq.l #8,sp
   1471e:	|  |  |     |   tst.w d0
   14720:	|  |  |  ,--|-- beq.s 14772 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14722:	|  |  |  |  |   movea.l 112(sp),a0
   14726:	|  |  |  |  |   move.l 4(a0),d0
   1472a:	|  |  |  |  +-- bne.s 1473a <getSavedGamesStack+0x1ba>
   1472c:	|  |  |  |  |   movea.l 112(sp),a0
   14730:	|  |  |  |  |   move.l (a0),d0
   14732:	|  |  |  |  |   movea.l 112(sp),a0
   14736:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1473a:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14740:	|  |  |  |      move.l 70(sp),50(sp)
   14746:	|  |  |  |      move.l 1cafa <DOSBase>,d0
   1474c:	|  |  |  |      movea.l d0,a6
   1474e:	|  |  |  |      move.l 54(sp),d1
   14752:	|  |  |  |      move.l 50(sp),d2
   14756:	|  |  |  |      jsr -108(a6)
   1475a:	|  |  |  |      move.l d0,46(sp)
   1475e:	|  |  |  |      move.l 46(sp),d0
   14762:	|  |  '--|----- bne.w 14662 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14766:	|  |     |      move.w #1,106(sp)
   1476c:	|  |     |  ,-- bra.s 14774 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1476e:	|  '-----|--|-> nop
   14770:	|        |  +-- bra.s 14774 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14772:	|        '--|-> nop
	FreeVec(fib);
   14774:	|           '-> move.l 70(sp),34(sp)
   1477a:	|               move.l 1caf2 <SysBase>,d0
   14780:	|               movea.l d0,a6
   14782:	|               movea.l 34(sp),a1
   14786:	|               jsr -690(a6)
	UnLock(dirLock);
   1478a:	|               move.l 86(sp),30(sp)
   14790:	|               move.l 1cafa <DOSBase>,d0
   14796:	|               movea.l d0,a6
   14798:	|               move.l 30(sp),d1
   1479c:	|               jsr -90(a6)
	FreeVec(pattern);
   147a0:	|               move.l 102(sp),26(sp)
   147a6:	|               move.l 1caf2 <SysBase>,d0
   147ac:	|               movea.l d0,a6
   147ae:	|               movea.l 26(sp),a1
   147b2:	|               jsr -690(a6)
	return result;
   147b6:	|               move.w 106(sp),d0
}
   147ba:	'-------------> movem.l (sp)+,d2-d3/a6
   147be:	                lea 96(sp),sp
   147c2:	                rts

000147c4 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   147c4:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   147c6:	       movea.l 20(sp),a0
   147ca:	       move.l (a0),d0
   147cc:	       cmp.l 16(sp),d0
   147d0:	,----- beq.s 14834 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   147d2:	|      move.l 16(sp),d0
   147d6:	|      add.l d0,d0
   147d8:	|      movea.l d0,a1
   147da:	|      adda.l d0,a1
   147dc:	|      lea 1c9c2 <typeName>,a0
   147e2:	|      move.l (0,a1,a0.l),d0
   147e6:	|      move.l d0,-(sp)
   147e8:	|      pea 1a059 <talk.c.490538ff+0x64a>
   147ee:	|      jsr 13cf0 <joinStrings>
   147f4:	|      addq.l #8,sp
   147f6:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   147fa:	|      movea.l 20(sp),a0
   147fe:	|      move.l (a0),d0
   14800:	|      add.l d0,d0
   14802:	|      movea.l d0,a1
   14804:	|      adda.l d0,a1
   14806:	|      lea 1c9c2 <typeName>,a0
   1480c:	|      move.l (0,a1,a0.l),d0
   14810:	|      move.l d0,-(sp)
   14812:	|      pea 1a09b <talk.c.490538ff+0x68c>
   14818:	|      jsr 13cf0 <joinStrings>
   1481e:	|      addq.l #8,sp
   14820:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14822:	|      move.l (sp),-(sp)
   14824:	|      move.l 8(sp),-(sp)
   14828:	|      jsr 172a4 <KPrintF>
   1482e:	|      addq.l #8,sp

		return FALSE;
   14830:	|      clr.w d0
   14832:	|  ,-- bra.s 14844 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14834:	'--|-> movea.l 20(sp),a0
   14838:	   |   move.l 4(a0),d0
   1483c:	   |   movea.l 12(sp),a0
   14840:	   |   move.l d0,(a0)
	return TRUE;
   14842:	   |   moveq #1,d0
}
   14844:	   '-> addq.l #8,sp
   14846:	       rts

00014848 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14848:	move.l 8(sp),-(sp)
   1484c:	jsr 75da <getNumberedString>
   14852:	addq.l #4,sp
   14854:	move.l d0,-(sp)
   14856:	move.l 8(sp),-(sp)
   1485a:	jsr 149e6 <makeTextVar>
   14860:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14862:	movea.l 4(sp),a0
   14866:	move.l 4(a0),d0
   1486a:	sne d0
   1486c:	neg.b d0
   1486e:	move.b d0,d0
   14870:	andi.w #255,d0
}
   14874:	rts

00014876 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14876:	          subq.l #8,sp
    int size = stackSize(stacky);
   14878:	          move.l 16(sp),-(sp)
   1487c:	          jsr 15124 <stackSize>
   14882:	          addq.l #4,sp
   14884:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14888:	          move.l 4(sp),-(sp)
   1488c:	          move.l 16(sp),-(sp)
   14890:	          jsr 148e0 <makeFastArraySize>
   14896:	          addq.l #8,sp
   14898:	          tst.w d0
   1489a:	      ,-- bne.s 148a0 <makeFastArrayFromStack+0x2a>
   1489c:	      |   clr.w d0
   1489e:	,-----|-- bra.s 148dc <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   148a0:	|     '-> movea.l 16(sp),a0
   148a4:	|         move.l (a0),(sp)
    size = 0;
   148a6:	|         clr.l 4(sp)
    while (allV) {
   148aa:	|     ,-- bra.s 148d6 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   148ac:	|  ,--|-> movea.l 12(sp),a0
   148b0:	|  |  |   movea.l 4(a0),a0
   148b4:	|  |  |   move.l (a0),d1
   148b6:	|  |  |   move.l 4(sp),d0
   148ba:	|  |  |   lsl.l #3,d0
   148bc:	|  |  |   add.l d0,d1
   148be:	|  |  |   move.l (sp),d0
   148c0:	|  |  |   move.l d1,-(sp)
   148c2:	|  |  |   move.l d0,-(sp)
   148c4:	|  |  |   jsr 14b62 <copyMain>
   148ca:	|  |  |   addq.l #8,sp
        size++;
   148cc:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   148d0:	|  |  |   movea.l (sp),a0
   148d2:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   148d6:	|  |  '-> tst.l (sp)
   148d8:	|  '----- bne.s 148ac <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   148da:	|         moveq #1,d0
}
   148dc:	'-------> addq.l #8,sp
   148de:	          rts

000148e0 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   148e0:	          lea -28(sp),sp
   148e4:	          move.l a6,-(sp)
    if (size < 0) {
   148e6:	          tst.l 40(sp)
   148ea:	      ,-- bge.s 14900 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   148ec:	      |   pea 1a0e0 <talk.c.490538ff+0x6d1>
   148f2:	      |   jsr 172a4 <KPrintF>
   148f8:	      |   addq.l #4,sp
		return FALSE;
   148fa:	      |   clr.w d0
   148fc:	,-----|-- bra.w 149de <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14900:	|     '-> move.l 36(sp),-(sp)
   14904:	|         jsr 14a12 <unlinkVar>
   1490a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   1490c:	|         movea.l 36(sp),a0
   14910:	|         moveq #10,d0
   14912:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14914:	|         moveq #12,d0
   14916:	|         move.l d0,24(sp)
   1491a:	|         clr.l 20(sp)
   1491e:	|         move.l 1caf2 <SysBase>,d0
   14924:	|         movea.l d0,a6
   14926:	|         move.l 24(sp),d0
   1492a:	|         move.l 20(sp),d1
   1492e:	|         jsr -684(a6)
   14932:	|         move.l d0,16(sp)
   14936:	|         move.l 16(sp),d0
   1493a:	|         movea.l 36(sp),a0
   1493e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14942:	|         movea.l 36(sp),a0
   14946:	|         move.l 4(a0),d0
   1494a:	|     ,-- bne.s 14952 <makeFastArraySize+0x72>
   1494c:	|     |   clr.w d0
   1494e:	+-----|-- bra.w 149de <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14952:	|     '-> move.l 40(sp),d0
   14956:	|         lsl.l #3,d0
   14958:	|         move.l d0,12(sp)
   1495c:	|         clr.l 8(sp)
   14960:	|         move.l 1caf2 <SysBase>,d0
   14966:	|         movea.l d0,a6
   14968:	|         move.l 12(sp),d0
   1496c:	|         move.l 8(sp),d1
   14970:	|         jsr -684(a6)
   14974:	|         move.l d0,4(sp)
   14978:	|         move.l 4(sp),d0
   1497c:	|         movea.l 36(sp),a0
   14980:	|         movea.l 4(a0),a0
   14984:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14986:	|         movea.l 36(sp),a0
   1498a:	|         movea.l 4(a0),a0
   1498e:	|         move.l (a0),d0
   14990:	|     ,-- bne.s 14996 <makeFastArraySize+0xb6>
   14992:	|     |   clr.w d0
   14994:	+-----|-- bra.s 149de <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14996:	|     '-> clr.l 28(sp)
   1499a:	|     ,-- bra.s 149b6 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   1499c:	|  ,--|-> movea.l 36(sp),a0
   149a0:	|  |  |   movea.l 4(a0),a0
   149a4:	|  |  |   move.l (a0),d1
   149a6:	|  |  |   move.l 28(sp),d0
   149aa:	|  |  |   lsl.l #3,d0
   149ac:	|  |  |   movea.l d1,a0
   149ae:	|  |  |   adda.l d0,a0
   149b0:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   149b2:	|  |  |   addq.l #1,28(sp)
   149b6:	|  |  '-> move.l 28(sp),d0
   149ba:	|  |      cmp.l 40(sp),d0
   149be:	|  '----- blt.s 1499c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   149c0:	|         movea.l 36(sp),a0
   149c4:	|         movea.l 4(a0),a0
   149c8:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   149ce:	|         movea.l 36(sp),a0
   149d2:	|         movea.l 4(a0),a0
   149d6:	|         moveq #1,d0
   149d8:	|         move.l d0,8(a0)
    return TRUE;
   149dc:	|         moveq #1,d0
}
   149de:	'-------> movea.l (sp)+,a6
   149e0:	          lea 28(sp),sp
   149e4:	          rts

000149e6 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   149e6:	move.l 4(sp),-(sp)
   149ea:	jsr 14a12 <unlinkVar>
   149f0:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   149f2:	movea.l 4(sp),a0
   149f6:	moveq #3,d0
   149f8:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   149fa:	move.l 8(sp),-(sp)
   149fe:	jsr b8 <copyString>
   14a04:	addq.l #4,sp
   14a06:	movea.l 4(sp),a0
   14a0a:	move.l d0,4(a0)
}
   14a0e:	nop
   14a10:	rts

00014a12 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14a12:	                      lea -16(sp),sp
   14a16:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14a18:	                      movea.l 24(sp),a0
   14a1c:	                      move.l (a0),d0
   14a1e:	                      moveq #10,d1
   14a20:	                      cmp.l d0,d1
   14a22:	            ,-------- beq.w 14ada <unlinkVar+0xc8>
   14a26:	            |         moveq #10,d1
   14a28:	            |         cmp.l d0,d1
   14a2a:	,-----------|-------- bcs.w 14b4e <unlinkVar+0x13c>
   14a2e:	|           |         moveq #8,d1
   14a30:	|           |         cmp.l d0,d1
   14a32:	|  ,--------|-------- beq.w 14b3a <unlinkVar+0x128>
   14a36:	|  |        |         moveq #8,d1
   14a38:	|  |        |         cmp.l d0,d1
   14a3a:	+--|--------|-------- bcs.w 14b4e <unlinkVar+0x13c>
   14a3e:	|  |        |         moveq #3,d1
   14a40:	|  |        |         cmp.l d0,d1
   14a42:	|  |        |     ,-- beq.s 14a4e <unlinkVar+0x3c>
   14a44:	|  |        |     |   moveq #6,d1
   14a46:	|  |        |     |   cmp.l d0,d1
   14a48:	|  |        |  ,--|-- beq.s 14a74 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a4a:	+--|--------|--|--|-- bra.w 14b4e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a4e:	|  |        |  |  '-> movea.l 24(sp),a0
   14a52:	|  |        |  |      move.l 4(a0),4(sp)
   14a58:	|  |        |  |      move.l 1caf2 <SysBase>,d0
   14a5e:	|  |        |  |      movea.l d0,a6
   14a60:	|  |        |  |      movea.l 4(sp),a1
   14a64:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a68:	|  |        |  |      movea.l 24(sp),a0
   14a6c:	|  |        |  |      clr.l 4(a0)
		break;
   14a70:	|  |  ,-----|--|----- bra.w 14b58 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14a74:	|  |  |     |  '----> movea.l 24(sp),a0
   14a78:	|  |  |     |         movea.l 4(a0),a0
   14a7c:	|  |  |     |         move.l 8(a0),d0
   14a80:	|  |  |     |         subq.l #1,d0
   14a82:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a86:	|  |  |     |         movea.l 24(sp),a0
   14a8a:	|  |  |     |         movea.l 4(a0),a0
   14a8e:	|  |  |     |         move.l 8(a0),d0
   14a92:	|  |  |  ,--|-------- bgt.w 14b52 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14a96:	|  |  |  |  |     ,-- bra.s 14aaa <unlinkVar+0x98>
   14a98:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14a9c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14aa0:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14aa2:	|  |  |  |  |  |  |   jsr 15148 <trimStack>
   14aa8:	|  |  |  |  |  |  |   addq.l #4,sp
   14aaa:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14aae:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ab2:	|  |  |  |  |  |      move.l (a0),d0
   14ab4:	|  |  |  |  |  '----- bne.s 14a98 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14ab6:	|  |  |  |  |         movea.l 24(sp),a0
   14aba:	|  |  |  |  |         move.l 4(a0),8(sp)
   14ac0:	|  |  |  |  |         move.l 1caf2 <SysBase>,d0
   14ac6:	|  |  |  |  |         movea.l d0,a6
   14ac8:	|  |  |  |  |         movea.l 8(sp),a1
   14acc:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14ad0:	|  |  |  |  |         movea.l 24(sp),a0
   14ad4:	|  |  |  |  |         clr.l 4(a0)
		break;
   14ad8:	|  |  |  +--|-------- bra.s 14b52 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14ada:	|  |  |  |  '-------> movea.l 24(sp),a0
   14ade:	|  |  |  |            movea.l 4(a0),a0
   14ae2:	|  |  |  |            move.l 8(a0),d0
   14ae6:	|  |  |  |            subq.l #1,d0
   14ae8:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14aec:	|  |  |  |            movea.l 24(sp),a0
   14af0:	|  |  |  |            movea.l 4(a0),a0
   14af4:	|  |  |  |            move.l 8(a0),d0
   14af8:	|  |  |  |        ,-- bgt.s 14b56 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14afa:	|  |  |  |        |   movea.l 24(sp),a0
   14afe:	|  |  |  |        |   movea.l 4(a0),a0
   14b02:	|  |  |  |        |   move.l (a0),16(sp)
   14b06:	|  |  |  |        |   move.l 1caf2 <SysBase>,d0
   14b0c:	|  |  |  |        |   movea.l d0,a6
   14b0e:	|  |  |  |        |   movea.l 16(sp),a1
   14b12:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14b16:	|  |  |  |        |   movea.l 24(sp),a0
   14b1a:	|  |  |  |        |   move.l 4(a0),12(sp)
   14b20:	|  |  |  |        |   move.l 1caf2 <SysBase>,d0
   14b26:	|  |  |  |        |   movea.l d0,a6
   14b28:	|  |  |  |        |   movea.l 12(sp),a1
   14b2c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14b30:	|  |  |  |        |   movea.l 24(sp),a0
   14b34:	|  |  |  |        |   clr.l 4(a0)
		break;
   14b38:	|  |  |  |        +-- bra.s 14b56 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14b3a:	|  '--|--|--------|-> movea.l 24(sp),a0
   14b3e:	|     |  |        |   move.l 4(a0),d0
   14b42:	|     |  |        |   move.l d0,-(sp)
   14b44:	|     |  |        |   jsr 9848 <deleteAnim>
   14b4a:	|     |  |        |   addq.l #4,sp
		break;
   14b4c:	|     +--|--------|-- bra.s 14b58 <unlinkVar+0x146>
		break;
   14b4e:	'-----|--|--------|-> nop
   14b50:	      +--|--------|-- bra.s 14b58 <unlinkVar+0x146>
		break;
   14b52:	      |  '--------|-> nop
   14b54:	      +-----------|-- bra.s 14b58 <unlinkVar+0x146>
		break;
   14b56:	      |           '-> nop
	}
}
   14b58:	      '-------------> nop
   14b5a:	                      movea.l (sp)+,a6
   14b5c:	                      lea 16(sp),sp
   14b60:	                      rts

00014b62 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b62:	       movea.l 4(sp),a0
   14b66:	       move.l (a0),d0
   14b68:	       movea.l 8(sp),a0
   14b6c:	       move.l d0,(a0)
	switch (to->varType) {
   14b6e:	       movea.l 8(sp),a0
   14b72:	       move.l (a0),d0
   14b74:	       moveq #10,d1
   14b76:	       cmp.l d0,d1
   14b78:	,----- bcs.w 14c6a <copyMain+0x108>
   14b7c:	|      add.l d0,d0
   14b7e:	|      movea.l d0,a0
   14b80:	|      adda.l #84876,a0
   14b86:	|      move.w (a0),d0
   14b88:	|      jmp (14b8c <copyMain+0x2a>,pc,d0.w)
   14b8c:	|      .short 0x00da
   14b8e:	|      ori.b #22,(a6)
   14b92:	|      ori.w #22,(a4)
   14b96:	|      ori.b #-126,(a6)
   14b9a:	|      ori.b #-68,(a6)
   14b9e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14ba6:	|      move.l 4(a0),d0
   14baa:	|      movea.l 8(sp),a0
   14bae:	|      move.l d0,4(a0)
		return TRUE;
   14bb2:	|      moveq #1,d0
   14bb4:	|  ,-- bra.w 14c7c <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14bb8:	|  |   movea.l 4(sp),a0
   14bbc:	|  |   move.l 4(a0),d0
   14bc0:	|  |   movea.l 8(sp),a0
   14bc4:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14bc8:	|  |   movea.l 8(sp),a0
   14bcc:	|  |   movea.l 4(a0),a0
   14bd0:	|  |   move.l 8(a0),d0
   14bd4:	|  |   addq.l #1,d0
   14bd6:	|  |   move.l d0,8(a0)
		return TRUE;
   14bda:	|  |   moveq #1,d0
   14bdc:	|  +-- bra.w 14c7c <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14be0:	|  |   movea.l 4(sp),a0
   14be4:	|  |   move.l 4(a0),d0
   14be8:	|  |   move.l d0,-(sp)
   14bea:	|  |   jsr b8 <copyString>
   14bf0:	|  |   addq.l #4,sp
   14bf2:	|  |   movea.l 8(sp),a0
   14bf6:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14bfa:	|  |   movea.l 8(sp),a0
   14bfe:	|  |   move.l 4(a0),d0
   14c02:	|  |   sne d0
   14c04:	|  |   neg.b d0
   14c06:	|  |   move.b d0,d0
   14c08:	|  |   andi.w #255,d0
   14c0c:	|  +-- bra.s 14c7c <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14c0e:	|  |   movea.l 4(sp),a0
   14c12:	|  |   move.l 4(a0),d0
   14c16:	|  |   movea.l 8(sp),a0
   14c1a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14c1e:	|  |   movea.l 8(sp),a0
   14c22:	|  |   movea.l 4(a0),a0
   14c26:	|  |   move.l 8(a0),d0
   14c2a:	|  |   addq.l #1,d0
   14c2c:	|  |   move.l d0,8(a0)
		return TRUE;
   14c30:	|  |   moveq #1,d0
   14c32:	|  +-- bra.s 14c7c <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14c34:	|  |   movea.l 4(sp),a0
   14c38:	|  |   move.l 4(a0),d0
   14c3c:	|  |   movea.l 8(sp),a0
   14c40:	|  |   move.l d0,4(a0)
		return TRUE;
   14c44:	|  |   moveq #1,d0
   14c46:	|  +-- bra.s 14c7c <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c48:	|  |   movea.l 4(sp),a0
   14c4c:	|  |   move.l 4(a0),d0
   14c50:	|  |   move.l d0,-(sp)
   14c52:	|  |   jsr 947c <copyAnim>
   14c58:	|  |   addq.l #4,sp
   14c5a:	|  |   movea.l 8(sp),a0
   14c5e:	|  |   move.l d0,4(a0)
		return TRUE;
   14c62:	|  |   moveq #1,d0
   14c64:	|  +-- bra.s 14c7c <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c66:	|  |   moveq #1,d0
   14c68:	|  +-- bra.s 14c7c <copyMain+0x11a>

		default:
		break;
   14c6a:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14c6c:	   |   pea 1a131 <talk.c.490538ff+0x722>
   14c72:	   |   jsr 172a4 <KPrintF>
   14c78:	   |   addq.l #4,sp
	return FALSE;
   14c7a:	   |   clr.w d0
}
   14c7c:	   '-> rts

00014c7e <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14c7e:	move.l 8(sp),-(sp)
   14c82:	jsr 14a12 <unlinkVar>
   14c88:	addq.l #4,sp
	return copyMain(from, to);
   14c8a:	move.l 8(sp),-(sp)
   14c8e:	move.l 8(sp),-(sp)
   14c92:	jsr 14b62 <copyMain>
   14c98:	addq.l #8,sp
}
   14c9a:	rts

00014c9c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14c9c:	       movea.l 4(sp),a0
   14ca0:	       move.l (a0),d0
   14ca2:	       moveq #8,d1
   14ca4:	       cmp.l d0,d1
   14ca6:	   ,-- bne.s 14cbc <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14ca8:	   |   movea.l 4(sp),a0
   14cac:	   |   move.l 4(a0),d0
   14cb0:	   |   move.l d0,-(sp)
   14cb2:	   |   jsr 947c <copyAnim>
   14cb8:	   |   addq.l #4,sp
   14cba:	,--|-- bra.s 14d02 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14cbc:	|  '-> movea.l 4(sp),a0
   14cc0:	|      move.l (a0),d0
   14cc2:	|      moveq #1,d1
   14cc4:	|      cmp.l d0,d1
   14cc6:	|  ,-- bne.s 14cda <getAnimationFromVar+0x3e>
   14cc8:	|  |   movea.l 4(sp),a0
   14ccc:	|  |   move.l 4(a0),d0
   14cd0:	|  +-- bne.s 14cda <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14cd2:	|  |   jsr acae <makeNullAnim>
   14cd8:	+--|-- bra.s 14d02 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14cda:	|  '-> movea.l 4(sp),a0
   14cde:	|      move.l (a0),d0
   14ce0:	|      add.l d0,d0
   14ce2:	|      movea.l d0,a1
   14ce4:	|      adda.l d0,a1
   14ce6:	|      lea 1c9c2 <typeName>,a0
   14cec:	|      move.l (0,a1,a0.l),d0
   14cf0:	|      move.l d0,-(sp)
   14cf2:	|      pea 1a01d <talk.c.490538ff+0x60e>
   14cf8:	|      jsr 172a4 <KPrintF>
   14cfe:	|      addq.l #8,sp
	return NULL;
   14d00:	|      moveq #0,d0
}
   14d02:	'----> rts

00014d04 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14d04:	       movea.l 4(sp),a0
   14d08:	       move.l (a0),d0
   14d0a:	       moveq #10,d1
   14d0c:	       cmp.l d0,d1
   14d0e:	,----- bcs.w 14d94 <getBoolean+0x90>
   14d12:	|      add.l d0,d0
   14d14:	|      movea.l d0,a0
   14d16:	|      adda.l #85282,a0
   14d1c:	|      move.w (a0),d0
   14d1e:	|      jmp (14d22 <getBoolean+0x1e>,pc,d0.w)
   14d22:	|      ori.b #26,(a6)
   14d26:	|      ori.w #68,(114,a2,d0.w)
   14d2c:	|      ori.w #46,(114,a2,d0.w)
   14d32:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14d38:	|      clr.w d0
   14d3a:	|  ,-- bra.s 14d98 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d3c:	|  |   movea.l 4(sp),a0
   14d40:	|  |   move.l 4(a0),d0
   14d44:	|  |   sne d0
   14d46:	|  |   neg.b d0
   14d48:	|  |   move.b d0,d0
   14d4a:	|  |   andi.w #255,d0
   14d4e:	|  +-- bra.s 14d98 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d50:	|  |   movea.l 4(sp),a0
   14d54:	|  |   movea.l 4(a0),a0
   14d58:	|  |   move.l (a0),d0
   14d5a:	|  |   sne d0
   14d5c:	|  |   neg.b d0
   14d5e:	|  |   move.b d0,d0
   14d60:	|  |   andi.w #255,d0
   14d64:	|  +-- bra.s 14d98 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d66:	|  |   movea.l 4(sp),a0
   14d6a:	|  |   movea.l 4(a0),a0
   14d6e:	|  |   move.b (a0),d0
   14d70:	|  |   sne d0
   14d72:	|  |   neg.b d0
   14d74:	|  |   move.b d0,d0
   14d76:	|  |   andi.w #255,d0
   14d7a:	|  +-- bra.s 14d98 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14d7c:	|  |   movea.l 4(sp),a0
   14d80:	|  |   movea.l 4(a0),a0
   14d84:	|  |   move.l 4(a0),d0
   14d88:	|  |   sne d0
   14d8a:	|  |   neg.b d0
   14d8c:	|  |   move.b d0,d0
   14d8e:	|  |   andi.w #255,d0
   14d92:	|  +-- bra.s 14d98 <getBoolean+0x94>

		default:
		break;
   14d94:	'--|-> nop
	}
	return TRUE;
   14d96:	   |   moveq #1,d0
}
   14d98:	   '-> rts

00014d9a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14d9a:	      ,----------> lea -76(sp),sp
   14d9e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14da0:	      |            movea.l 84(sp),a0
   14da4:	      |            move.l (a0),d0
   14da6:	      |            moveq #10,d1
   14da8:	      |            cmp.l d0,d1
   14daa:	,-----|----------- bcs.w 15048 <getTextFromAnyVar+0x2ae>
   14dae:	|     |            add.l d0,d0
   14db0:	|     |            movea.l d0,a0
   14db2:	|     |            adda.l #85438,a0
   14db8:	|     |            move.w (a0),d0
   14dba:	|     |            jmp (14dbe <getTextFromAnyVar+0x24>,pc,d0.w)
   14dbe:	|     |            .short 0x028a
   14dc0:	|     |            bset d0,(a0)+
   14dc2:	|     |            .short 0x028a
   14dc4:	|     |            ori.b #-118,(a6)
   14dc8:	|     |            andi.b #8,ccr
   14dcc:	|     |            andi.w #650,-(a0)
   14dd0:	|     |            .short 0x028a
   14dd2:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14dd8:	|     |            move.l 4(a0),d0
   14ddc:	|     |            move.l d0,-(sp)
   14dde:	|     |            jsr b8 <copyString>
   14de4:	|     |            addq.l #4,sp
   14de6:	|  ,--|----------- bra.w 1506a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14dea:	|  |  |            pea 1a144 <talk.c.490538ff+0x735>
   14df0:	|  |  |            jsr b8 <copyString>
   14df6:	|  |  |            addq.l #4,sp
   14df8:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14dfc:	|  |  |            clr.l 72(sp)
   14e00:	|  |  |     ,----- bra.w 14eaa <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14e04:	|  |  |  ,--|----> pea 1a14a <talk.c.490538ff+0x73b>
   14e0a:	|  |  |  |  |      move.l 80(sp),-(sp)
   14e0e:	|  |  |  |  |      jsr 13cf0 <joinStrings>
   14e14:	|  |  |  |  |      addq.l #8,sp
   14e16:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14e1a:	|  |  |  |  |  ,-- bne.s 14e22 <getTextFromAnyVar+0x88>
   14e1c:	|  |  |  |  |  |   moveq #0,d0
   14e1e:	|  +--|--|--|--|-- bra.w 1506a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e22:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14e28:	|  |  |  |  |      move.l 1caf2 <SysBase>,d0
   14e2e:	|  |  |  |  |      movea.l d0,a6
   14e30:	|  |  |  |  |      movea.l 56(sp),a1
   14e34:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14e38:	|  |  |  |  |      movea.l 84(sp),a0
   14e3c:	|  |  |  |  |      movea.l 4(a0),a0
   14e40:	|  |  |  |  |      move.l (a0),d1
   14e42:	|  |  |  |  |      move.l 72(sp),d0
   14e46:	|  |  |  |  |      lsl.l #3,d0
   14e48:	|  |  |  |  |      add.l d1,d0
   14e4a:	|  |  |  |  |      move.l d0,-(sp)
   14e4c:	|  |  +--|--|----- jsr 14d9a <getTextFromAnyVar>(pc)
   14e50:	|  |  |  |  |      addq.l #4,sp
   14e52:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e56:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e5a:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e5e:	|  |  |  |  |      jsr 13cf0 <joinStrings>
   14e64:	|  |  |  |  |      addq.l #8,sp
   14e66:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e6a:	|  |  |  |  |  ,-- bne.s 14e72 <getTextFromAnyVar+0xd8>
   14e6c:	|  |  |  |  |  |   moveq #0,d0
   14e6e:	|  +--|--|--|--|-- bra.w 1506a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14e72:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14e78:	|  |  |  |  |      move.l 1caf2 <SysBase>,d0
   14e7e:	|  |  |  |  |      movea.l d0,a6
   14e80:	|  |  |  |  |      movea.l 48(sp),a1
   14e84:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14e88:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14e8c:	|  |  |  |  |      move.l 60(sp),44(sp)
   14e92:	|  |  |  |  |      move.l 1caf2 <SysBase>,d0
   14e98:	|  |  |  |  |      movea.l d0,a6
   14e9a:	|  |  |  |  |      movea.l 44(sp),a1
   14e9e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14ea2:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14ea6:	|  |  |  |  |      addq.l #1,72(sp)
   14eaa:	|  |  |  |  '----> movea.l 84(sp),a0
   14eae:	|  |  |  |         movea.l 4(a0),a0
   14eb2:	|  |  |  |         move.l 4(a0),d0
   14eb6:	|  |  |  |         cmp.l 72(sp),d0
   14eba:	|  |  |  '-------- bgt.w 14e04 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14ebe:	|  |  |            move.l 76(sp),d0
   14ec2:	|  +--|----------- bra.w 1506a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14ec6:	|  |  |            pea 1a14c <talk.c.490538ff+0x73d>
   14ecc:	|  |  |            jsr b8 <copyString>
   14ed2:	|  |  |            addq.l #4,sp
   14ed4:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14ed8:	|  |  |            movea.l 84(sp),a0
   14edc:	|  |  |            movea.l 4(a0),a0
   14ee0:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14ee4:	|  |  |     ,----- bra.w 14f86 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14ee8:	|  |  |  ,--|----> pea 1a14a <talk.c.490538ff+0x73b>
   14eee:	|  |  |  |  |      move.l 72(sp),-(sp)
   14ef2:	|  |  |  |  |      jsr 13cf0 <joinStrings>
   14ef8:	|  |  |  |  |      addq.l #8,sp
   14efa:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14efe:	|  |  |  |  |  ,-- bne.s 14f06 <getTextFromAnyVar+0x16c>
   14f00:	|  |  |  |  |  |   moveq #0,d0
   14f02:	|  +--|--|--|--|-- bra.w 1506a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f06:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14f0c:	|  |  |  |  |      move.l 1caf2 <SysBase>,d0
   14f12:	|  |  |  |  |      movea.l d0,a6
   14f14:	|  |  |  |  |      movea.l 32(sp),a1
   14f18:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14f1c:	|  |  |  |  |      move.l 64(sp),d0
   14f20:	|  |  |  |  |      move.l d0,-(sp)
   14f22:	|  |  '--|--|----- jsr 14d9a <getTextFromAnyVar>(pc)
   14f26:	|  |     |  |      addq.l #4,sp
   14f28:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14f2c:	|  |     |  |      move.l 28(sp),-(sp)
   14f30:	|  |     |  |      move.l 40(sp),-(sp)
   14f34:	|  |     |  |      jsr 13cf0 <joinStrings>
   14f3a:	|  |     |  |      addq.l #8,sp
   14f3c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f40:	|  |     |  |  ,-- bne.s 14f48 <getTextFromAnyVar+0x1ae>
   14f42:	|  |     |  |  |   moveq #0,d0
   14f44:	|  +-----|--|--|-- bra.w 1506a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f48:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14f4e:	|  |     |  |      move.l 1caf2 <SysBase>,d0
   14f54:	|  |     |  |      movea.l d0,a6
   14f56:	|  |     |  |      movea.l 24(sp),a1
   14f5a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f5e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f62:	|  |     |  |      move.l 36(sp),20(sp)
   14f68:	|  |     |  |      move.l 1caf2 <SysBase>,d0
   14f6e:	|  |     |  |      movea.l d0,a6
   14f70:	|  |     |  |      movea.l 20(sp),a1
   14f74:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f78:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14f7c:	|  |     |  |      movea.l 64(sp),a0
   14f80:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14f86:	|  |     |  '----> tst.l 64(sp)
   14f8a:	|  |     '-------- bne.w 14ee8 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14f8e:	|  |               move.l 68(sp),d0
   14f92:	|  +-------------- bra.w 1506a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14f96:	|  |               moveq #10,d0
   14f98:	|  |               move.l d0,16(sp)
   14f9c:	|  |               clr.l 12(sp)
   14fa0:	|  |               move.l 1caf2 <SysBase>,d0
   14fa6:	|  |               movea.l d0,a6
   14fa8:	|  |               move.l 16(sp),d0
   14fac:	|  |               move.l 12(sp),d1
   14fb0:	|  |               jsr -684(a6)
   14fb4:	|  |               move.l d0,8(sp)
   14fb8:	|  |               move.l 8(sp),d0
   14fbc:	|  |               move.l d0,4(sp)
			if (! buff) {
   14fc0:	|  |           ,-- bne.s 14fd6 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14fc2:	|  |           |   pea 1a153 <talk.c.490538ff+0x744>
   14fc8:	|  |           |   jsr 172a4 <KPrintF>
   14fce:	|  |           |   addq.l #4,sp
				return NULL;
   14fd0:	|  |           |   moveq #0,d0
   14fd2:	|  +-----------|-- bra.w 1506a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14fd6:	|  |           '-> movea.l 84(sp),a0
   14fda:	|  |               move.l 4(a0),d0
   14fde:	|  |               move.l d0,-(sp)
   14fe0:	|  |               pea 1a17d <talk.c.490538ff+0x76e>
   14fe6:	|  |               move.l 12(sp),-(sp)
   14fea:	|  |               jsr 13fce <sprintf>
   14ff0:	|  |               lea 12(sp),sp
			return buff;
   14ff4:	|  |               move.l 4(sp),d0
   14ff8:	|  +-------------- bra.s 1506a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14ffa:	|  |               movea.l 84(sp),a0
   14ffe:	|  |               move.l 4(a0),d0
   15002:	|  |               move.l d0,-(sp)
   15004:	|  |               jsr 494a <resourceNameFromNum>
   1500a:	|  |               addq.l #4,sp
   1500c:	|  |               move.l d0,-(sp)
   1500e:	|  |               pea 18aba <PutChar+0xd74>
   15014:	|  |               jsr 13cf0 <joinStrings>
   1501a:	|  |               addq.l #8,sp
   1501c:	|  +-------------- bra.s 1506a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1501e:	|  |               movea.l 84(sp),a0
   15022:	|  |               move.l 4(a0),d0
   15026:	|  |               move.l d0,-(sp)
   15028:	|  |               jsr d4d8 <findObjectType>
   1502e:	|  |               addq.l #4,sp
   15030:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15034:	+--|-------------- beq.s 15048 <getTextFromAnyVar+0x2ae>
   15036:	|  |               movea.l 40(sp),a0
   1503a:	|  |               move.l (a0),d0
   1503c:	|  |               move.l d0,-(sp)
   1503e:	|  |               jsr b8 <copyString>
   15044:	|  |               addq.l #4,sp
   15046:	|  +-------------- bra.s 1506a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15048:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1504a:	   |               movea.l 84(sp),a0
   1504e:	   |               move.l (a0),d0
   15050:	   |               add.l d0,d0
   15052:	   |               movea.l d0,a1
   15054:	   |               adda.l d0,a1
   15056:	   |               lea 1c9c2 <typeName>,a0
   1505c:	   |               move.l (0,a1,a0.l),d0
   15060:	   |               move.l d0,-(sp)
   15062:	   |               jsr b8 <copyString>
   15068:	   |               addq.l #4,sp
}
   1506a:	   '-------------> movea.l (sp)+,a6
   1506c:	                   lea 76(sp),sp
   15070:	                   rts

00015072 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15072:	move.l 4(sp),-(sp)
   15076:	jsr 14a12 <unlinkVar>
   1507c:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1507e:	movea.l 4(sp),a0
   15082:	moveq #8,d0
   15084:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15086:	movea.l 4(sp),a0
   1508a:	move.l 8(sp),4(a0)
}
   15090:	nop
   15092:	rts

00015094 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15094:	move.l 4(sp),-(sp)
   15098:	jsr 14a12 <unlinkVar>
   1509e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   150a0:	movea.l 4(sp),a0
   150a4:	moveq #9,d0
   150a6:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   150a8:	movea.l 4(sp),a0
   150ac:	move.l 8(sp),4(a0)
}
   150b2:	nop
   150b4:	rts

000150b6 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   150b6:	move.l 4(sp),-(sp)
   150ba:	jsr 14a12 <unlinkVar>
   150c0:	addq.l #4,sp
   150c2:	movea.l 4(sp),a0
   150c6:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   150ca:	movea.l 4(sp),a0
   150ce:	move.l 12(sp),4(a0)
   150d4:	nop
   150d6:	rts

000150d8 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   150d8:	      ,-- bra.s 150ea <stackGetByIndex+0x12>
        vS = vS->next;
   150da:	,-----|-> movea.l 4(sp),a0
   150de:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   150e4:	|     +-- bne.s 150ea <stackGetByIndex+0x12>
            return NULL;
   150e6:	|     |   moveq #0,d0
   150e8:	|  ,--|-- bra.s 150fe <stackGetByIndex+0x26>
    while (theIndex--) {
   150ea:	|  |  '-> move.l 8(sp),d0
   150ee:	|  |      move.l d0,d1
   150f0:	|  |      subq.l #1,d1
   150f2:	|  |      move.l d1,8(sp)
   150f6:	|  |      tst.l d0
   150f8:	'--|----- bne.s 150da <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   150fa:	   |      move.l 4(sp),d0
}
   150fe:	   '----> rts

00015100 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15100:	          tst.l 4(sp)
   15104:	      ,-- bne.s 15114 <stackFindLast+0x14>
		return NULL;
   15106:	      |   moveq #0,d0
   15108:	,-----|-- bra.s 15122 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1510a:	|  ,--|-> movea.l 4(sp),a0
   1510e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15114:	|  |  '-> movea.l 4(sp),a0
   15118:	|  |      move.l 8(a0),d0
   1511c:	|  '----- bne.s 1510a <stackFindLast+0xa>

	return hunt;
   1511e:	|         move.l 4(sp),d0
}
   15122:	'-------> rts

00015124 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15124:	       subq.l #8,sp
	int r = 0;
   15126:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1512a:	       movea.l 12(sp),a0
   1512e:	       move.l (a0),(sp)
	while (a) {
   15130:	   ,-- bra.s 1513c <stackSize+0x18>
		r ++;
   15132:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   15136:	|  |   movea.l (sp),a0
   15138:	|  |   move.l 8(a0),(sp)
	while (a) {
   1513c:	|  '-> tst.l (sp)
   1513e:	'----- bne.s 15132 <stackSize+0xe>
	}
	return r;
   15140:	       move.l 4(sp),d0
}
   15144:	       addq.l #8,sp
   15146:	       rts

00015148 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15148:	subq.l #8,sp
   1514a:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1514c:	movea.l 16(sp),a0
   15150:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15154:	movea.l 16(sp),a0
   15158:	movea.l (a0),a0
   1515a:	move.l 8(a0),d0
   1515e:	movea.l 16(sp),a0
   15162:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15164:	move.l 8(sp),d0
   15168:	move.l d0,-(sp)
   1516a:	jsr 14a12 <unlinkVar>
   15170:	addq.l #4,sp
	FreeVec(killMe);
   15172:	move.l 8(sp),4(sp)
   15178:	move.l 1caf2 <SysBase>,d0
   1517e:	movea.l d0,a6
   15180:	movea.l 4(sp),a1
   15184:	jsr -690(a6)
   15188:	nop
   1518a:	movea.l (sp)+,a6
   1518c:	addq.l #8,sp
   1518e:	rts

00015190 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15190:	       lea -52(sp),sp
   15194:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   15196:	       pea 1a180 <talk.c.490538ff+0x771>
   1519c:	       jsr 172a4 <KPrintF>
   151a2:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   151a4:	       moveq #68,d0
   151a6:	       move.l d0,52(sp)
   151aa:	       clr.l 48(sp)
   151ae:	       move.l 1caf2 <SysBase>,d0
   151b4:	       movea.l d0,a6
   151b6:	       move.l 52(sp),d0
   151ba:	       move.l 48(sp),d1
   151be:	       jsr -684(a6)
   151c2:	       move.l d0,44(sp)
   151c6:	       move.l 44(sp),d0
   151ca:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   151ce:	   ,-- bne.s 151d6 <freeze+0x46>
   151d0:	   |   clr.w d0
   151d2:	,--|-- bra.w 15368 <freeze+0x1d8>

	CstFreeze();
   151d6:	|  '-> jsr 1bf0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   151dc:	|      move.l 1cb8a <sceneWidth>,d0
   151e2:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   151e6:	|      move.l 1cb8e <sceneHeight>,d0
   151ec:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   151f0:	|      move.l 1cb8a <sceneWidth>,d0
   151f6:	|      movea.l 40(sp),a0
   151fa:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   151fe:	|      move.l 1cb8e <sceneHeight>,d0
   15204:	|      movea.l 40(sp),a0
   15208:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1520c:	|      move.l 1cba8 <cameraX>,d0
   15212:	|      movea.l 40(sp),a0
   15216:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1521a:	|      move.l 1cbac <cameraY>,d0
   15220:	|      movea.l 40(sp),a0
   15224:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15228:	|      move.l 1c484 <cameraZoom>,d0
   1522e:	|      movea.l 40(sp),a0
   15232:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15236:	|      move.w #1,1cb96 <backdropExists>

	newFreezer -> allPeople = allPeople;
   1523e:	|      move.l 1cb52 <allPeople>,d0
   15244:	|      movea.l 40(sp),a0
   15248:	|      move.l d0,(a0)
	allPeople = NULL;
   1524a:	|      clr.l 1cb52 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15250:	|      moveq #42,d0
   15252:	|      move.l d0,28(sp)
   15256:	|      clr.l 24(sp)
   1525a:	|      move.l 1caf2 <SysBase>,d0
   15260:	|      movea.l d0,a6
   15262:	|      move.l 28(sp),d0
   15266:	|      move.l 24(sp),d1
   1526a:	|      jsr -684(a6)
   1526e:	|      move.l d0,20(sp)
   15272:	|      move.l 20(sp),d0
   15276:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1527a:	|  ,-- bne.s 15282 <freeze+0xf2>
   1527c:	|  |   clr.w d0
   1527e:	+--|-- bra.w 15368 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15282:	|  '-> move.l 1cbfe <allScreenRegions>,d0
   15288:	|      movea.l 40(sp),a0
   1528c:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15290:	|      clr.l 1cbfe <allScreenRegions>
	overRegion = NULL;
   15296:	|      clr.l 1cc02 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1529c:	|      move.l 1c9ec <mouseCursorAnim>,d0
   152a2:	|      movea.l 40(sp),a0
   152a6:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   152aa:	|      move.l 1c9f0 <mouseCursorFrameNum>,d0
   152b0:	|      movea.l 40(sp),a0
   152b4:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   152b8:	|      jsr acae <makeNullAnim>
   152be:	|      move.l d0,1c9ec <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   152c4:	|      clr.l 1c9f0 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   152ca:	|      move.l 1cb4e <zBuffer>,d0
   152d0:	|      movea.l 40(sp),a0
   152d4:	|      move.l d0,60(a0)
	zBuffer = NULL;
   152d8:	|      clr.l 1cb4e <zBuffer>

	newFreezer -> speech = speech;
   152de:	|      move.l 1ca42 <speech>,d0
   152e4:	|      movea.l 40(sp),a0
   152e8:	|      move.l d0,20(a0)
	initSpeech ();
   152ec:	|      jsr 3e40 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   152f2:	|      move.l 1c462 <currentEvents>,d0
   152f8:	|      movea.l 40(sp),a0
   152fc:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15300:	|      moveq #28,d0
   15302:	|      move.l d0,12(sp)
   15306:	|      clr.l 8(sp)
   1530a:	|      move.l 1caf2 <SysBase>,d0
   15310:	|      movea.l d0,a6
   15312:	|      move.l 12(sp),d0
   15316:	|      move.l 8(sp),d1
   1531a:	|      jsr -684(a6)
   1531e:	|      move.l d0,4(sp)
   15322:	|      move.l 4(sp),d0
   15326:	|      move.l d0,1c462 <currentEvents>
	if (!currentEvents) return FALSE;
   1532c:	|      move.l 1c462 <currentEvents>,d0
   15332:	|  ,-- bne.s 15338 <freeze+0x1a8>
   15334:	|  |   clr.w d0
   15336:	+--|-- bra.s 15368 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15338:	|  '-> move.l 1c462 <currentEvents>,d0
   1533e:	|      pea 1c <_start+0x1c>
   15342:	|      clr.l -(sp)
   15344:	|      move.l d0,-(sp)
   15346:	|      jsr 17228 <memset>
   1534c:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15350:	|      move.l 1cbe2 <frozenStuff>,d0
   15356:	|      movea.l 40(sp),a0
   1535a:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1535e:	|      move.l 40(sp),1cbe2 <frozenStuff>

	return TRUE;
   15366:	|      moveq #1,d0
}
   15368:	'----> movea.l (sp)+,a6
   1536a:	       lea 52(sp),sp
   1536e:	       rts

00015370 <howFrozen>:

int howFrozen () {
   15370:	       subq.l #8,sp
	int a = 0;
   15372:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15376:	       move.l 1cbe2 <frozenStuff>,(sp)
	while (f) {
   1537c:	   ,-- bra.s 15388 <howFrozen+0x18>
		a ++;
   1537e:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15382:	|  |   movea.l (sp),a0
   15384:	|  |   move.l 64(a0),(sp)
	while (f) {
   15388:	|  '-> tst.l (sp)
   1538a:	'----- bne.s 1537e <howFrozen+0xe>
	}
	return a;
   1538c:	       move.l 4(sp),d0
}
   15390:	       addq.l #8,sp
   15392:	       rts

00015394 <unfreeze>:

void unfreeze () {
   15394:	       lea -16(sp),sp
   15398:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1539a:	       move.l 1cbe2 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   153a2:	       move.l 1cbe2 <frozenStuff>,d0
   153a8:	,----- beq.w 155e0 <unfreeze+0x24c>

	CstUnfreeze();
   153ac:	|      jsr 3aac <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   153b2:	|      movea.l 1cbe2 <frozenStuff>,a0
   153b8:	|      move.l 48(a0),d0
   153bc:	|      move.l d0,1cb8a <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   153c2:	|      movea.l 1cbe2 <frozenStuff>,a0
   153c8:	|      move.l 52(a0),d0
   153cc:	|      move.l d0,1cb8e <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   153d2:	|      movea.l 1cbe2 <frozenStuff>,a0
   153d8:	|      move.l 40(a0),d0
   153dc:	|      move.l d0,1cba8 <cameraX>
	cameraY = frozenStuff -> cameraY;
   153e2:	|      movea.l 1cbe2 <frozenStuff>,a0
   153e8:	|      move.l 44(a0),d0
   153ec:	|      move.l d0,1cbac <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   153f2:	|      move.l 1caae <input+0xa>,d0
   153f8:	|      move.l d0,-(sp)
   153fa:	|      jsr 176d6 <__floatsisf>
   15400:	|      addq.l #4,sp
   15402:	|      move.l d0,d1
   15404:	|      move.l 1c484 <cameraZoom>,d0
   1540a:	|      move.l d0,-(sp)
   1540c:	|      move.l d1,-(sp)
   1540e:	|      jsr 17788 <__mulsf3>
   15414:	|      addq.l #8,sp
   15416:	|      move.l d0,-(sp)
   15418:	|      jsr 1766e <__fixsfsi>
   1541e:	|      addq.l #4,sp
   15420:	|      move.l d0,1caae <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15426:	|      move.l 1cab2 <input+0xe>,d0
   1542c:	|      move.l d0,-(sp)
   1542e:	|      jsr 176d6 <__floatsisf>
   15434:	|      addq.l #4,sp
   15436:	|      move.l d0,d1
   15438:	|      move.l 1c484 <cameraZoom>,d0
   1543e:	|      move.l d0,-(sp)
   15440:	|      move.l d1,-(sp)
   15442:	|      jsr 17788 <__mulsf3>
   15448:	|      addq.l #8,sp
   1544a:	|      move.l d0,-(sp)
   1544c:	|      jsr 1766e <__fixsfsi>
   15452:	|      addq.l #4,sp
   15454:	|      move.l d0,1cab2 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   1545a:	|      movea.l 1cbe2 <frozenStuff>,a0
   15460:	|      move.l 56(a0),d0
   15464:	|      move.l d0,1c484 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   1546a:	|      move.l 1caae <input+0xa>,d0
   15470:	|      move.l d0,-(sp)
   15472:	|      jsr 176d6 <__floatsisf>
   15478:	|      addq.l #4,sp
   1547a:	|      move.l d0,d1
   1547c:	|      move.l 1c484 <cameraZoom>,d0
   15482:	|      move.l d0,-(sp)
   15484:	|      move.l d1,-(sp)
   15486:	|      jsr 1758c <__divsf3>
   1548c:	|      addq.l #8,sp
   1548e:	|      move.l d0,-(sp)
   15490:	|      jsr 1766e <__fixsfsi>
   15496:	|      addq.l #4,sp
   15498:	|      move.l d0,1caae <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   1549e:	|      move.l 1cab2 <input+0xe>,d0
   154a4:	|      move.l d0,-(sp)
   154a6:	|      jsr 176d6 <__floatsisf>
   154ac:	|      addq.l #4,sp
   154ae:	|      move.l d0,d1
   154b0:	|      move.l 1c484 <cameraZoom>,d0
   154b6:	|      move.l d0,-(sp)
   154b8:	|      move.l d1,-(sp)
   154ba:	|      jsr 1758c <__divsf3>
   154c0:	|      addq.l #8,sp
   154c2:	|      move.l d0,-(sp)
   154c4:	|      jsr 1766e <__fixsfsi>
   154ca:	|      addq.l #4,sp
   154cc:	|      move.l d0,1cab2 <input+0xe>

	killAllPeople ();
   154d2:	|      jsr a97e <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   154d8:	|      movea.l 1cbe2 <frozenStuff>,a0
   154de:	|      move.l (a0),d0
   154e0:	|      move.l d0,1cb52 <allPeople>

	killAllRegions ();
   154e6:	|      jsr 15ab4 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   154ec:	|      movea.l 1cbe2 <frozenStuff>,a0
   154f2:	|      move.l 4(a0),d0
   154f6:	|      move.l d0,1cbfe <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   154fc:	|      move.l 1c9ec <mouseCursorAnim>,d0
   15502:	|      move.l d0,-(sp)
   15504:	|      jsr 9848 <deleteAnim>
   1550a:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1550c:	|      movea.l 1cbe2 <frozenStuff>,a0
   15512:	|      move.l 32(a0),d0
   15516:	|      move.l d0,1c9ec <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1551c:	|      movea.l 1cbe2 <frozenStuff>,a0
   15522:	|      move.l 36(a0),d0
   15526:	|      move.l d0,1c9f0 <mouseCursorFrameNum>

	killZBuffer ();
   1552c:	|      jsr 85ee <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15532:	|      movea.l 1cbe2 <frozenStuff>,a0
   15538:	|      move.l 60(a0),d0
   1553c:	|      move.l d0,1cb4e <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15542:	|      move.l 1c462 <currentEvents>,d0
   15548:	|  ,-- beq.s 15562 <unfreeze+0x1ce>
   1554a:	|  |   move.l 1c462 <currentEvents>,12(sp)
   15552:	|  |   move.l 1caf2 <SysBase>,d0
   15558:	|  |   movea.l d0,a6
   1555a:	|  |   movea.l 12(sp),a1
   1555e:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15562:	|  '-> movea.l 1cbe2 <frozenStuff>,a0
   15568:	|      move.l 28(a0),d0
   1556c:	|      move.l d0,1c462 <currentEvents>

	killAllSpeech ();
   15572:	|      jsr 3ed8 <killAllSpeech>
	if (speech) FreeVec(speech);
   15578:	|      move.l 1ca42 <speech>,d0
   1557e:	|  ,-- beq.s 15598 <unfreeze+0x204>
   15580:	|  |   move.l 1ca42 <speech>,8(sp)
   15588:	|  |   move.l 1caf2 <SysBase>,d0
   1558e:	|  |   movea.l d0,a6
   15590:	|  |   movea.l 8(sp),a1
   15594:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15598:	|  '-> movea.l 1cbe2 <frozenStuff>,a0
   1559e:	|      move.l 20(a0),d0
   155a2:	|      move.l d0,1ca42 <speech>

	frozenStuff = frozenStuff -> next;
   155a8:	|      movea.l 1cbe2 <frozenStuff>,a0
   155ae:	|      move.l 64(a0),d0
   155b2:	|      move.l d0,1cbe2 <frozenStuff>

	overRegion = NULL;
   155b8:	|      clr.l 1cc02 <overRegion>
	if (killMe) FreeVec(killMe);
   155be:	|      tst.l 16(sp)
   155c2:	|  ,-- beq.s 155da <unfreeze+0x246>
   155c4:	|  |   move.l 16(sp),4(sp)
   155ca:	|  |   move.l 1caf2 <SysBase>,d0
   155d0:	|  |   movea.l d0,a6
   155d2:	|  |   movea.l 4(sp),a1
   155d6:	|  |   jsr -690(a6)
	killMe = NULL;
   155da:	|  '-> clr.l 16(sp)
   155de:	|  ,-- bra.s 155e2 <unfreeze+0x24e>
	if (! frozenStuff) return;
   155e0:	'--|-> nop
}
   155e2:	   '-> movea.l (sp)+,a6
   155e4:	       lea 16(sp),sp
   155e8:	       rts

000155ea <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   155ea:	pea 1a192 <talk.c.490538ff+0x783>
   155f0:	jsr 172a4 <KPrintF>
   155f6:	addq.l #4,sp
	return FALSE;
   155f8:	clr.w d0
}
   155fa:	rts

000155fc <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   155fc:	          lea -32(sp),sp
   15600:	          move.l a6,-(sp)
   15602:	          move.l d2,-(sp)
	unsigned int a = 0;
   15604:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15608:	          move.l 1cbee <fontOrderString>,d0
   1560e:	      ,-- beq.s 15628 <loadFont+0x2c>
   15610:	      |   move.l 1cbee <fontOrderString>,24(sp)
   15618:	      |   move.l 1caf2 <SysBase>,d0
   1561e:	      |   movea.l d0,a6
   15620:	      |   movea.l 24(sp),a1
   15624:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15628:	      '-> move.l 48(sp),-(sp)
   1562c:	          jsr b8 <copyString>
   15632:	          addq.l #4,sp
   15634:	          move.l d0,1cbee <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   1563a:	          move.l 1cbfa <theFont>,d0
   15640:	      ,-- beq.s 15652 <loadFont+0x56>
   15642:	      |   move.l 1cbfa <theFont>,d0
   15648:	      |   move.l d0,-(sp)
   1564a:	      |   jsr 892c <forgetSpriteBank>
   15650:	      |   addq.l #4,sp
	theFont = NULL;
   15652:	      '-> clr.l 1cbfa <theFont>

	loadedFontNum = filenum;
   15658:	          move.l 44(sp),1cbea <loadedFontNum>

	fontTableSize = 0;
   15660:	          clr.l 1cbf6 <fontTableSize>
	char *tmp = charOrder;
   15666:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   1566c:	   ,----- bra.s 156a8 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1566e:	,--|----> movea.l 32(sp),a0
   15672:	|  |      move.b (a0),d0
   15674:	|  |      ext.w d0
   15676:	|  |      movea.w d0,a0
   15678:	|  |      move.l 1cbf6 <fontTableSize>,d0
   1567e:	|  |      move.l d0,d0
   15680:	|  |      move.b d0,d0
   15682:	|  |      andi.l #255,d0
   15688:	|  |      cmp.l a0,d0
   1568a:	|  |  ,-- bge.s 1569c <loadFont+0xa0>
   1568c:	|  |  |   movea.l 32(sp),a0
   15690:	|  |  |   move.b (a0),d0
   15692:	|  |  |   ext.w d0
   15694:	|  |  |   movea.w d0,a0
   15696:	|  |  |   move.l a0,1cbf6 <fontTableSize>
		*tmp++;
   1569c:	|  |  '-> move.l 32(sp),d0
   156a0:	|  |      move.l d0,d1
   156a2:	|  |      addq.l #1,d1
   156a4:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   156a8:	|  '----> movea.l 32(sp),a0
   156ac:	|         move.b (a0),d0
   156ae:	'-------- bne.s 1566e <loadFont+0x72>
	}
	fontTableSize++;
   156b0:	          move.l 1cbf6 <fontTableSize>,d0
   156b6:	          addq.l #1,d0
   156b8:	          move.l d0,1cbf6 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   156be:	          move.l 1cbf2 <fontTable>,d0
   156c4:	      ,-- beq.s 156de <loadFont+0xe2>
   156c6:	      |   move.l 1cbf2 <fontTable>,20(sp)
   156ce:	      |   move.l 1caf2 <SysBase>,d0
   156d4:	      |   movea.l d0,a6
   156d6:	      |   movea.l 20(sp),a1
   156da:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   156de:	      '-> move.l 1cbf6 <fontTableSize>,d0
   156e4:	          add.l d0,d0
   156e6:	          add.l d0,d0
   156e8:	          move.l d0,16(sp)
   156ec:	          clr.l 12(sp)
   156f0:	          move.l 1caf2 <SysBase>,d0
   156f6:	          movea.l d0,a6
   156f8:	          move.l 16(sp),d0
   156fc:	          move.l 12(sp),d1
   15700:	          jsr -684(a6)
   15704:	          move.l d0,8(sp)
   15708:	          move.l 8(sp),d0
   1570c:	          move.l d0,1cbf2 <fontTable>
	if (!fontTable) return FALSE;
   15712:	          move.l 1cbf2 <fontTable>,d0
   15718:	      ,-- bne.s 15720 <loadFont+0x124>
   1571a:	      |   clr.w d0
   1571c:	,-----|-- bra.w 157c6 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15720:	|     '-> clr.l 36(sp)
   15724:	|     ,-- bra.s 1573e <loadFont+0x142>
		fontTable[a] = 0;
   15726:	|  ,--|-> move.l 1cbf2 <fontTable>,d1
   1572c:	|  |  |   move.l 36(sp),d0
   15730:	|  |  |   add.l d0,d0
   15732:	|  |  |   add.l d0,d0
   15734:	|  |  |   movea.l d1,a0
   15736:	|  |  |   adda.l d0,a0
   15738:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   1573a:	|  |  |   addq.l #1,36(sp)
   1573e:	|  |  '-> move.l 1cbf6 <fontTableSize>,d0
   15744:	|  |      cmp.l 36(sp),d0
   15748:	|  '----- bhi.s 15726 <loadFont+0x12a>
	}
	a = 0;
   1574a:	|         clr.l 36(sp)
	int i = 0;
   1574e:	|         clr.l 28(sp)
	tmp = charOrder;
   15752:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15758:	|     ,-- bra.s 15788 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   1575a:	|  ,--|-> move.l 1cbf2 <fontTable>,d1
   15760:	|  |  |   move.l 32(sp),d0
   15764:	|  |  |   move.l d0,d2
   15766:	|  |  |   addq.l #1,d2
   15768:	|  |  |   move.l d2,32(sp)
   1576c:	|  |  |   movea.l d0,a0
   1576e:	|  |  |   move.b (a0),d0
   15770:	|  |  |   ext.w d0
   15772:	|  |  |   movea.w d0,a0
   15774:	|  |  |   move.l a0,d0
   15776:	|  |  |   add.l a0,d0
   15778:	|  |  |   add.l d0,d0
   1577a:	|  |  |   movea.l d1,a0
   1577c:	|  |  |   adda.l d0,a0
   1577e:	|  |  |   move.l 28(sp),d0
   15782:	|  |  |   move.l d0,(a0)
		i++;
   15784:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15788:	|  |  '-> movea.l 32(sp),a0
   1578c:	|  |      move.b (a0),d0
   1578e:	|  '----- bne.s 1575a <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15790:	|         move.l 44(sp),-(sp)
   15794:	|         jsr 15fc6 <loadBankForAnim>
   1579a:	|         addq.l #4,sp
   1579c:	|         move.l d0,1cbfa <theFont>
	if (!theFont) {
   157a2:	|         move.l 1cbfa <theFont>,d0
   157a8:	|     ,-- bne.s 157bc <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   157aa:	|     |   pea 1a1b9 <talk.c.490538ff+0x7aa>
   157b0:	|     |   jsr 172a4 <KPrintF>
   157b6:	|     |   addq.l #4,sp
		return FALSE;
   157b8:	|     |   clr.w d0
   157ba:	+-----|-- bra.s 157c6 <loadFont+0x1ca>
	}
	fontHeight = h;
   157bc:	|     '-> move.l 52(sp),1cbe6 <fontHeight>
	return TRUE;
   157c4:	|         moveq #1,d0
}
   157c6:	'-------> move.l (sp)+,d2
   157c8:	          movea.l (sp)+,a6
   157ca:	          lea 32(sp),sp
   157ce:	          rts

000157d0 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   157d0:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   157d4:	                clr.l 4(sp)

    if (!fontTableSize) return;
   157d8:	                move.l 1cbf6 <fontTableSize>,d0
   157de:	,-------------- beq.w 158a6 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   157e2:	|               move.w 1c9ea <fontSpace>,d0
   157e8:	|               asr.w #1,d0
   157ea:	|               ext.l d0
   157ec:	|               add.l d0,20(sp)
	char *tmp = theText;
   157f0:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   157f6:	|     ,-------- bra.w 1589a <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   157fa:	|  ,--|-------> movea.l 1cbfa <theFont>,a0
   15800:	|  |  |         movea.l 16(a0),a0
   15804:	|  |  |         movea.l 8(sp),a1
   15808:	|  |  |         move.b (a1),d0
   1580a:	|  |  |         move.b d0,d0
   1580c:	|  |  |         andi.l #255,d0
   15812:	|  |  |         move.l 1cbf6 <fontTableSize>,d1
   15818:	|  |  |         cmp.l d0,d1
   1581a:	|  |  |  ,----- bls.s 15846 <pasteStringToBackdrop+0x76>
   1581c:	|  |  |  |      move.l 1cbf2 <fontTable>,d1
   15822:	|  |  |  |      movea.l 8(sp),a1
   15826:	|  |  |  |      move.b (a1),d0
   15828:	|  |  |  |      move.b d0,d0
   1582a:	|  |  |  |      andi.l #255,d0
   15830:	|  |  |  |      add.l d0,d0
   15832:	|  |  |  |      add.l d0,d0
   15834:	|  |  |  |      movea.l d1,a1
   15836:	|  |  |  |      adda.l d0,a1
   15838:	|  |  |  |      move.l (a1),d1
   1583a:	|  |  |  |      move.l d1,d0
   1583c:	|  |  |  |      lsl.l #3,d0
   1583e:	|  |  |  |      sub.l d1,d0
   15840:	|  |  |  |      add.l d0,d0
   15842:	|  |  |  |      add.l d0,d0
   15844:	|  |  |  |  ,-- bra.s 15848 <pasteStringToBackdrop+0x78>
   15846:	|  |  |  '--|-> moveq #0,d0
   15848:	|  |  |     '-> adda.l d0,a0
   1584a:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   1584c:	|  |  |         move.l 24(sp),d1
   15850:	|  |  |         movea.l (sp),a0
   15852:	|  |  |         move.l 12(a0),d0
   15856:	|  |  |         move.l d0,d0
   15858:	|  |  |         sub.w d0,d1
   1585a:	|  |  |         move.w d1,d0
   1585c:	|  |  |         movea.w d0,a1
   1585e:	|  |  |         move.l 20(sp),d1
   15862:	|  |  |         movea.l (sp),a0
   15864:	|  |  |         move.l 8(a0),d0
   15868:	|  |  |         move.l d0,d0
   1586a:	|  |  |         sub.w d0,d1
   1586c:	|  |  |         move.w d1,d0
   1586e:	|  |  |         movea.w d0,a0
   15870:	|  |  |         move.l a1,-(sp)
   15872:	|  |  |         move.l a0,-(sp)
   15874:	|  |  |         move.l 8(sp),-(sp)
   15878:	|  |  |         jsr 227e <CstPasteChar>
   1587e:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15882:	|  |  |         movea.l (sp),a0
   15884:	|  |  |         move.l (a0),d1
   15886:	|  |  |         move.w 1c9ea <fontSpace>,d0
   1588c:	|  |  |         movea.w d0,a0
   1588e:	|  |  |         move.l d1,d0
   15890:	|  |  |         add.l a0,d0
   15892:	|  |  |         add.l d0,20(sp)
		tmp++;
   15896:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   1589a:	|  |  '-------> movea.l 8(sp),a0
   1589e:	|  |            move.b (a0),d0
   158a0:	|  '----------- bne.w 157fa <pasteStringToBackdrop+0x2a>
   158a4:	|           ,-- bra.s 158a8 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   158a6:	'-----------|-> nop
    }
}
   158a8:	            '-> lea 12(sp),sp
   158ac:	                rts

000158ae <stringWidth>:


int stringWidth (char * theText) {
   158ae:	                lea -16(sp),sp
	int a = 0;
   158b2:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   158b6:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   158ba:	                move.l 1cbf6 <fontTableSize>,d0
   158c0:	            ,-- bne.s 158c6 <stringWidth+0x18>
   158c2:	            |   moveq #0,d0
   158c4:	,-----------|-- bra.s 1593a <stringWidth+0x8c>

	char *tmp = theText;
   158c6:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   158cc:	|     ,-------- bra.s 1592e <stringWidth+0x80>
        c = *tmp++;
   158ce:	|  ,--|-------> move.l 8(sp),d0
   158d2:	|  |  |         move.l d0,d1
   158d4:	|  |  |         addq.l #1,d1
   158d6:	|  |  |         move.l d1,8(sp)
   158da:	|  |  |         movea.l d0,a0
   158dc:	|  |  |         move.b (a0),d0
   158de:	|  |  |         ext.w d0
   158e0:	|  |  |         movea.w d0,a0
   158e2:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   158e4:	|  |  |         movea.l 1cbfa <theFont>,a0
   158ea:	|  |  |         movea.l 16(a0),a1
   158ee:	|  |  |         move.l 1cbf6 <fontTableSize>,d0
   158f4:	|  |  |         cmp.l (sp),d0
   158f6:	|  |  |  ,----- bls.s 15916 <stringWidth+0x68>
   158f8:	|  |  |  |      move.l 1cbf2 <fontTable>,d1
   158fe:	|  |  |  |      move.l (sp),d0
   15900:	|  |  |  |      add.l d0,d0
   15902:	|  |  |  |      add.l d0,d0
   15904:	|  |  |  |      movea.l d1,a0
   15906:	|  |  |  |      adda.l d0,a0
   15908:	|  |  |  |      move.l (a0),d1
   1590a:	|  |  |  |      move.l d1,d0
   1590c:	|  |  |  |      lsl.l #3,d0
   1590e:	|  |  |  |      sub.l d1,d0
   15910:	|  |  |  |      add.l d0,d0
   15912:	|  |  |  |      add.l d0,d0
   15914:	|  |  |  |  ,-- bra.s 15918 <stringWidth+0x6a>
   15916:	|  |  |  '--|-> moveq #0,d0
   15918:	|  |  |     '-> lea (0,a1,d0.l),a0
   1591c:	|  |  |         move.l (a0),d1
   1591e:	|  |  |         move.w 1c9ea <fontSpace>,d0
   15924:	|  |  |         movea.w d0,a0
   15926:	|  |  |         move.l d1,d0
   15928:	|  |  |         add.l a0,d0
   1592a:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   1592e:	|  |  '-------> movea.l 8(sp),a0
   15932:	|  |            move.b (a0),d0
   15934:	|  '----------- bne.s 158ce <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15936:	|               move.l 12(sp),d0
}
   1593a:	'-------------> lea 16(sp),sp
   1593e:	                rts

00015940 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15940:	       lea -16(sp),sp
   15944:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15946:	       moveq #36,d0
   15948:	       move.l d0,16(sp)
   1594c:	       clr.l 12(sp)
   15950:	       move.l 1caf2 <SysBase>,d0
   15956:	       movea.l d0,a6
   15958:	       move.l 16(sp),d0
   1595c:	       move.l 12(sp),d1
   15960:	       jsr -684(a6)
   15964:	       move.l d0,8(sp)
   15968:	       move.l 8(sp),d0
   1596c:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15970:	   ,-- bne.s 15978 <addScreenRegion+0x38>
   15972:	   |   clr.w d0
   15974:	,--|-- bra.w 159f8 <addScreenRegion+0xb8>
    newRegion->di = di;
   15978:	|  '-> movea.l 4(sp),a0
   1597c:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15982:	|      movea.l 4(sp),a0
   15986:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1598a:	|      movea.l 4(sp),a0
   1598e:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15994:	|      movea.l 4(sp),a0
   15998:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1599e:	|      movea.l 4(sp),a0
   159a2:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   159a8:	|      movea.l 4(sp),a0
   159ac:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   159b2:	|      movea.l 4(sp),a0
   159b6:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   159bc:	|      move.l 52(sp),-(sp)
   159c0:	|      jsr d5c8 <loadObjectType>
   159c6:	|      addq.l #4,sp
   159c8:	|      movea.l 4(sp),a0
   159cc:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   159d0:	|      move.l 1cbfe <allScreenRegions>,d0
   159d6:	|      movea.l 4(sp),a0
   159da:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   159de:	|      move.l 4(sp),1cbfe <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   159e6:	|      movea.l 4(sp),a0
   159ea:	|      move.l 28(a0),d0
   159ee:	|      sne d0
   159f0:	|      neg.b d0
   159f2:	|      move.b d0,d0
   159f4:	|      andi.w #255,d0
}
   159f8:	'----> movea.l (sp)+,a6
   159fa:	       lea 16(sp),sp
   159fe:	       rts

00015a00 <getOverRegion>:

void getOverRegion () {
   15a00:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a02:	             move.l 1cbfe <allScreenRegions>,(sp)
	while (thisRegion) {
   15a08:	   ,-------- bra.s 15a76 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a0a:	,--|-------> move.l 1caae <input+0xa>,d0
   15a10:	|  |         movea.l (sp),a0
   15a12:	|  |         movea.l (a0),a0
   15a14:	|  |         move.l 1cba8 <cameraX>,d1
   15a1a:	|  |         suba.l d1,a0
   15a1c:	|  |         cmpa.l d0,a0
   15a1e:	|  |  ,----- bgt.s 15a70 <getOverRegion+0x70>
   15a20:	|  |  |      move.l 1cab2 <input+0xe>,d0
   15a26:	|  |  |      movea.l (sp),a0
   15a28:	|  |  |      movea.l 4(a0),a0
   15a2c:	|  |  |      move.l 1cbac <cameraY>,d1
   15a32:	|  |  |      suba.l d1,a0
   15a34:	|  |  |      cmpa.l d0,a0
   15a36:	|  |  +----- bgt.s 15a70 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a38:	|  |  |      move.l 1caae <input+0xa>,d0
   15a3e:	|  |  |      movea.l (sp),a0
   15a40:	|  |  |      movea.l 8(a0),a0
   15a44:	|  |  |      move.l 1cba8 <cameraX>,d1
   15a4a:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a4c:	|  |  |      cmpa.l d0,a0
   15a4e:	|  |  +----- blt.s 15a70 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a50:	|  |  |      move.l 1cab2 <input+0xe>,d0
   15a56:	|  |  |      movea.l (sp),a0
   15a58:	|  |  |      movea.l 12(a0),a0
   15a5c:	|  |  |      move.l 1cbac <cameraY>,d1
   15a62:	|  |  |      suba.l d1,a0
   15a64:	|  |  |      cmpa.l d0,a0
   15a66:	|  |  +----- blt.s 15a70 <getOverRegion+0x70>
			overRegion = thisRegion;
   15a68:	|  |  |      move.l (sp),1cc02 <overRegion>
			return;
   15a6e:	|  |  |  ,-- bra.s 15a82 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15a70:	|  |  '--|-> movea.l (sp),a0
   15a72:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a76:	|  '-----|-> tst.l (sp)
   15a78:	'--------|-- bne.s 15a0a <getOverRegion+0xa>
	}
	overRegion = NULL;
   15a7a:	         |   clr.l 1cc02 <overRegion>
	return;
   15a80:	         |   nop
}
   15a82:	         '-> addq.l #4,sp
   15a84:	             rts

00015a86 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15a86:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a88:	             move.l 1cbfe <allScreenRegions>,(sp)

	while (thisRegion) {
   15a8e:	   ,-------- bra.s 15aaa <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15a90:	,--|-------> movea.l (sp),a0
   15a92:	|  |         movea.l 28(a0),a0
   15a96:	|  |         move.l 4(a0),d0
   15a9a:	|  |         cmp.l 8(sp),d0
   15a9e:	|  |     ,-- bne.s 15aa4 <getRegionForObject+0x1e>
			return thisRegion;
   15aa0:	|  |     |   move.l (sp),d0
   15aa2:	|  |  ,--|-- bra.s 15ab0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15aa4:	|  |  |  '-> movea.l (sp),a0
   15aa6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15aaa:	|  '--|----> tst.l (sp)
   15aac:	'-----|----- bne.s 15a90 <getRegionForObject+0xa>
	}

	return NULL;
   15aae:	      |      moveq #0,d0
}
   15ab0:	      '----> addq.l #4,sp
   15ab2:	             rts

00015ab4 <killAllRegions>:

void killAllRegions () {
   15ab4:	       subq.l #8,sp
   15ab6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15ab8:	   ,-- bra.s 15afa <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15aba:	,--|-> move.l 1cbfe <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15ac2:	|  |   movea.l 1cbfe <allScreenRegions>,a0
   15ac8:	|  |   move.l 32(a0),d0
   15acc:	|  |   move.l d0,1cbfe <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15ad2:	|  |   movea.l 8(sp),a0
   15ad6:	|  |   move.l 28(a0),d0
   15ada:	|  |   move.l d0,-(sp)
   15adc:	|  |   jsr d880 <removeObjectType>
   15ae2:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15ae4:	|  |   move.l 8(sp),4(sp)
   15aea:	|  |   move.l 1caf2 <SysBase>,d0
   15af0:	|  |   movea.l d0,a6
   15af2:	|  |   movea.l 4(sp),a1
   15af6:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15afa:	|  '-> move.l 1cbfe <allScreenRegions>,d0
   15b00:	'----- bne.s 15aba <killAllRegions+0x6>
	}
	overRegion = NULL;
   15b02:	       clr.l 1cc02 <overRegion>
}
   15b08:	       nop
   15b0a:	       movea.l (sp)+,a6
   15b0c:	       addq.l #8,sp
   15b0e:	       rts

00015b10 <loadRegions>:

void loadRegions (BPTR fp) {
   15b10:	       lea -24(sp),sp
   15b14:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15b16:	       move.l 32(sp),-(sp)
   15b1a:	       jsr 6bc <get2bytes>
   15b20:	       addq.l #4,sp
   15b22:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15b26:	       move.l #117758,20(sp)

	while (numRegions --) {
   15b2e:	   ,-- bra.w 15c0c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15b32:	,--|-> moveq #36,d0
   15b34:	|  |   move.l d0,16(sp)
   15b38:	|  |   clr.l 12(sp)
   15b3c:	|  |   move.l 1caf2 <SysBase>,d0
   15b42:	|  |   movea.l d0,a6
   15b44:	|  |   move.l 16(sp),d0
   15b48:	|  |   move.l 12(sp),d1
   15b4c:	|  |   jsr -684(a6)
   15b50:	|  |   move.l d0,8(sp)
   15b54:	|  |   move.l 8(sp),d0
   15b58:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15b5c:	|  |   movea.l 20(sp),a0
   15b60:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15b64:	|  |   moveq #32,d1
   15b66:	|  |   add.l 4(sp),d1
   15b6a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15b6e:	|  |   move.l 32(sp),-(sp)
   15b72:	|  |   jsr 6bc <get2bytes>
   15b78:	|  |   addq.l #4,sp
   15b7a:	|  |   movea.l 4(sp),a0
   15b7e:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15b80:	|  |   move.l 32(sp),-(sp)
   15b84:	|  |   jsr 6bc <get2bytes>
   15b8a:	|  |   addq.l #4,sp
   15b8c:	|  |   movea.l 4(sp),a0
   15b90:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15b94:	|  |   move.l 32(sp),-(sp)
   15b98:	|  |   jsr 6bc <get2bytes>
   15b9e:	|  |   addq.l #4,sp
   15ba0:	|  |   movea.l 4(sp),a0
   15ba4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15ba8:	|  |   move.l 32(sp),-(sp)
   15bac:	|  |   jsr 6bc <get2bytes>
   15bb2:	|  |   addq.l #4,sp
   15bb4:	|  |   movea.l 4(sp),a0
   15bb8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15bbc:	|  |   move.l 32(sp),-(sp)
   15bc0:	|  |   jsr 6bc <get2bytes>
   15bc6:	|  |   addq.l #4,sp
   15bc8:	|  |   movea.l 4(sp),a0
   15bcc:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15bd0:	|  |   move.l 32(sp),-(sp)
   15bd4:	|  |   jsr 6bc <get2bytes>
   15bda:	|  |   addq.l #4,sp
   15bdc:	|  |   movea.l 4(sp),a0
   15be0:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15be4:	|  |   move.l 32(sp),-(sp)
   15be8:	|  |   jsr 6bc <get2bytes>
   15bee:	|  |   addq.l #4,sp
   15bf0:	|  |   movea.l 4(sp),a0
   15bf4:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15bf8:	|  |   move.l 32(sp),-(sp)
   15bfc:	|  |   jsr d576 <loadObjectRef>
   15c02:	|  |   addq.l #4,sp
   15c04:	|  |   movea.l 4(sp),a0
   15c08:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15c0c:	|  '-> move.l 24(sp),d0
   15c10:	|      move.l d0,d1
   15c12:	|      subq.l #1,d1
   15c14:	|      move.l d1,24(sp)
   15c18:	|      tst.l d0
   15c1a:	'----- bne.w 15b32 <loadRegions+0x22>
	}
	* pointy = NULL;
   15c1e:	       movea.l 20(sp),a0
   15c22:	       clr.l (a0)
}
   15c24:	       nop
   15c26:	       movea.l (sp)+,a6
   15c28:	       lea 24(sp),sp
   15c2c:	       rts

00015c2e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15c2e:	             lea -12(sp),sp
   15c32:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15c34:	             move.l #117758,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15c3c:	   ,-------- bra.s 15cb6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15c3e:	,--|-------> movea.l 12(sp),a0
   15c42:	|  |         movea.l (a0),a0
   15c44:	|  |         movea.l 28(a0),a0
   15c48:	|  |         move.l 4(a0),d0
   15c4c:	|  |         cmp.l 20(sp),d0
   15c50:	|  |  ,----- bne.s 15ca8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15c52:	|  |  |      movea.l 12(sp),a0
   15c56:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15c5a:	|  |  |      movea.l 8(sp),a0
   15c5e:	|  |  |      move.l 32(a0),d0
   15c62:	|  |  |      movea.l 12(sp),a0
   15c66:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15c68:	|  |  |      movea.l 8(sp),a0
   15c6c:	|  |  |      move.l 28(a0),d0
   15c70:	|  |  |      move.l d0,-(sp)
   15c72:	|  |  |      jsr d880 <removeObjectType>
   15c78:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15c7a:	|  |  |      move.l 1cc02 <overRegion>,d0
   15c80:	|  |  |      cmp.l 8(sp),d0
   15c84:	|  |  |  ,-- bne.s 15c8c <removeScreenRegion+0x5e>
   15c86:	|  |  |  |   clr.l 1cc02 <overRegion>
            FreeVec(killMe);
   15c8c:	|  |  |  '-> move.l 8(sp),4(sp)
   15c92:	|  |  |      move.l 1caf2 <SysBase>,d0
   15c98:	|  |  |      movea.l d0,a6
   15c9a:	|  |  |      movea.l 4(sp),a1
   15c9e:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15ca2:	|  |  |      clr.l 8(sp)
   15ca6:	|  +--|----- bra.s 15cb6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15ca8:	|  |  '----> movea.l 12(sp),a0
   15cac:	|  |         move.l (a0),d0
   15cae:	|  |         moveq #32,d1
   15cb0:	|  |         add.l d0,d1
   15cb2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15cb6:	|  '-------> movea.l 12(sp),a0
   15cba:	|            move.l (a0),d0
   15cbc:	'----------- bne.s 15c3e <removeScreenRegion+0x10>
        }
    }
}
   15cbe:	             nop
   15cc0:	             nop
   15cc2:	             movea.l (sp)+,a6
   15cc4:	             lea 12(sp),sp
   15cc8:	             rts

00015cca <saveRegions>:

void saveRegions (BPTR fp) {
   15cca:	       subq.l #8,sp
	int numRegions = 0;
   15ccc:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15cd0:	       move.l 1cbfe <allScreenRegions>,(sp)
	while (thisRegion) {
   15cd6:	   ,-- bra.s 15ce2 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15cd8:	,--|-> movea.l (sp),a0
   15cda:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15cde:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15ce2:	|  '-> tst.l (sp)
   15ce4:	'----- bne.s 15cd8 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15ce6:	       move.l 12(sp),-(sp)
   15cea:	       move.l 8(sp),-(sp)
   15cee:	       jsr 8d0 <put2bytes>
   15cf4:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15cf6:	       move.l 1cbfe <allScreenRegions>,(sp)
	while (thisRegion) {
   15cfc:	,----- bra.w 15da4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15d00:	|  ,-> movea.l (sp),a0
   15d02:	|  |   move.l (a0),d0
   15d04:	|  |   move.l 12(sp),-(sp)
   15d08:	|  |   move.l d0,-(sp)
   15d0a:	|  |   jsr 8d0 <put2bytes>
   15d10:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15d12:	|  |   movea.l (sp),a0
   15d14:	|  |   move.l 4(a0),d0
   15d18:	|  |   move.l 12(sp),-(sp)
   15d1c:	|  |   move.l d0,-(sp)
   15d1e:	|  |   jsr 8d0 <put2bytes>
   15d24:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15d26:	|  |   movea.l (sp),a0
   15d28:	|  |   move.l 8(a0),d0
   15d2c:	|  |   move.l 12(sp),-(sp)
   15d30:	|  |   move.l d0,-(sp)
   15d32:	|  |   jsr 8d0 <put2bytes>
   15d38:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15d3a:	|  |   movea.l (sp),a0
   15d3c:	|  |   move.l 12(a0),d0
   15d40:	|  |   move.l 12(sp),-(sp)
   15d44:	|  |   move.l d0,-(sp)
   15d46:	|  |   jsr 8d0 <put2bytes>
   15d4c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15d4e:	|  |   movea.l (sp),a0
   15d50:	|  |   move.l 16(a0),d0
   15d54:	|  |   move.l 12(sp),-(sp)
   15d58:	|  |   move.l d0,-(sp)
   15d5a:	|  |   jsr 8d0 <put2bytes>
   15d60:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15d62:	|  |   movea.l (sp),a0
   15d64:	|  |   move.l 20(a0),d0
   15d68:	|  |   move.l 12(sp),-(sp)
   15d6c:	|  |   move.l d0,-(sp)
   15d6e:	|  |   jsr 8d0 <put2bytes>
   15d74:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15d76:	|  |   movea.l (sp),a0
   15d78:	|  |   move.l 24(a0),d0
   15d7c:	|  |   move.l 12(sp),-(sp)
   15d80:	|  |   move.l d0,-(sp)
   15d82:	|  |   jsr 8d0 <put2bytes>
   15d88:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15d8a:	|  |   movea.l (sp),a0
   15d8c:	|  |   move.l 28(a0),d0
   15d90:	|  |   move.l 12(sp),-(sp)
   15d94:	|  |   move.l d0,-(sp)
   15d96:	|  |   jsr d920 <saveObjectRef>
   15d9c:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15d9e:	|  |   movea.l (sp),a0
   15da0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15da4:	'--|-> tst.l (sp)
   15da6:	   '-- bne.w 15d00 <saveRegions+0x36>
	}
}
   15daa:	       nop
   15dac:	       nop
   15dae:	       addq.l #8,sp
   15db0:	       rts

00015db2 <showBoxes>:

void showBoxes () {
   15db2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15db4:	       move.l 1cbfe <allScreenRegions>,(sp)

	while (huntRegion) {
   15dba:	,----- bra.w 15e56 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15dbe:	|  ,-> movea.l (sp),a0
   15dc0:	|  |   move.l 12(a0),d0
   15dc4:	|  |   movea.l d0,a1
   15dc6:	|  |   movea.l (sp),a0
   15dc8:	|  |   move.l 4(a0),d0
   15dcc:	|  |   move.l d0,d1
   15dce:	|  |   movea.l (sp),a0
   15dd0:	|  |   move.l (a0),d0
   15dd2:	|  |   move.l a1,-(sp)
   15dd4:	|  |   move.l d1,-(sp)
   15dd6:	|  |   move.l d0,-(sp)
   15dd8:	|  |   jsr d204 <drawVerticalLine>
   15dde:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15de2:	|  |   movea.l (sp),a0
   15de4:	|  |   move.l 12(a0),d0
   15de8:	|  |   movea.l d0,a1
   15dea:	|  |   movea.l (sp),a0
   15dec:	|  |   move.l 4(a0),d0
   15df0:	|  |   move.l d0,d1
   15df2:	|  |   movea.l (sp),a0
   15df4:	|  |   move.l 8(a0),d0
   15df8:	|  |   move.l a1,-(sp)
   15dfa:	|  |   move.l d1,-(sp)
   15dfc:	|  |   move.l d0,-(sp)
   15dfe:	|  |   jsr d204 <drawVerticalLine>
   15e04:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15e08:	|  |   movea.l (sp),a0
   15e0a:	|  |   move.l 8(a0),d0
   15e0e:	|  |   movea.l d0,a1
   15e10:	|  |   movea.l (sp),a0
   15e12:	|  |   move.l 4(a0),d0
   15e16:	|  |   move.l d0,d1
   15e18:	|  |   movea.l (sp),a0
   15e1a:	|  |   move.l (a0),d0
   15e1c:	|  |   move.l a1,-(sp)
   15e1e:	|  |   move.l d1,-(sp)
   15e20:	|  |   move.l d0,-(sp)
   15e22:	|  |   jsr d1de <drawHorizontalLine>
   15e28:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15e2c:	|  |   movea.l (sp),a0
   15e2e:	|  |   move.l 8(a0),d0
   15e32:	|  |   movea.l d0,a1
   15e34:	|  |   movea.l (sp),a0
   15e36:	|  |   move.l 12(a0),d0
   15e3a:	|  |   move.l d0,d1
   15e3c:	|  |   movea.l (sp),a0
   15e3e:	|  |   move.l (a0),d0
   15e40:	|  |   move.l a1,-(sp)
   15e42:	|  |   move.l d1,-(sp)
   15e44:	|  |   move.l d0,-(sp)
   15e46:	|  |   jsr d1de <drawHorizontalLine>
   15e4c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15e50:	|  |   movea.l (sp),a0
   15e52:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15e56:	'--|-> tst.l (sp)
   15e58:	   '-- bne.w 15dbe <showBoxes+0xc>
	}
   15e5c:	       nop
   15e5e:	       nop
   15e60:	       addq.l #4,sp
   15e62:	       rts

00015e64 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15e64:	       lea -88(sp),sp
   15e68:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15e6a:	       move.l 1caf2 <SysBase>,d0
   15e70:	       movea.l d0,a6
   15e72:	       jsr -666(a6)
   15e76:	       move.l d0,88(sp)
   15e7a:	       move.l 88(sp),d0
   15e7e:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15e82:	       move.l 84(sp),80(sp)
   15e88:	       moveq #40,d0
   15e8a:	       move.l d0,76(sp)
   15e8e:	       move.l 1caf2 <SysBase>,d0
   15e94:	       movea.l d0,a6
   15e96:	       movea.l 80(sp),a0
   15e9a:	       move.l 76(sp),d0
   15e9e:	       jsr -654(a6)
   15ea2:	       move.l d0,72(sp)
   15ea6:	       move.l 72(sp),d0
   15eaa:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15eae:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15eb4:	       move.l #106963,60(sp)
   15ebc:	       clr.l 56(sp)
   15ec0:	       move.l 64(sp),52(sp)
   15ec6:	       clr.l 48(sp)
   15eca:	       move.l 1caf2 <SysBase>,d0
   15ed0:	       movea.l d0,a6
   15ed2:	       movea.l 60(sp),a0
   15ed6:	       move.l 56(sp),d0
   15eda:	       movea.l 52(sp),a1
   15ede:	       move.l 48(sp),d1
   15ee2:	       jsr -444(a6)
   15ee6:	       move.b d0,47(sp)
   15eea:	       move.b 47(sp),d0
   15eee:	   ,-- beq.s 15f04 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15ef0:	   |   pea 1a1e0 <talk.c.490538ff+0x7d1>
   15ef6:	   |   jsr 172a4 <KPrintF>
   15efc:	   |   addq.l #4,sp
        return 0;
   15efe:	   |   moveq #0,d0
   15f00:	,--|-- bra.w 15fbe <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15f04:	|  '-> movea.l 64(sp),a0
   15f08:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15f0e:	|      lea 92(sp),a0
   15f12:	|      lea -86(a0),a0
   15f16:	|      move.l a0,38(sp)
   15f1a:	|      movea.l 42(sp),a6
   15f1e:	|      movea.l 38(sp),a0
   15f22:	|      jsr -60(a6)
   15f26:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15f2a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15f30:	|      move.l #1103515245,-(sp)
   15f36:	|      move.l 34(sp),-(sp)
   15f3a:	|      jsr 17c30 <__mulsi3>
   15f40:	|      addq.l #8,sp
   15f42:	|      addi.l #12345,d0
   15f48:	|      move.l d0,d1
   15f4a:	|      bclr #31,d1
   15f4e:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15f52:	|      move.l 30(sp),d0
   15f56:	|      pea 64 <_start+0x64>
   15f5a:	|      move.l d0,-(sp)
   15f5c:	|      jsr 17d0a <__umodsi3>
   15f62:	|      addq.l #8,sp
   15f64:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15f68:	|      move.l 26(sp),-(sp)
   15f6c:	|      pea 1a1fd <talk.c.490538ff+0x7ee>
   15f72:	|      jsr 172a4 <KPrintF>
   15f78:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15f7a:	|      move.l 64(sp),22(sp)
   15f80:	|      move.l 1caf2 <SysBase>,d0
   15f86:	|      movea.l d0,a6
   15f88:	|      movea.l 22(sp),a1
   15f8c:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15f90:	|      move.l 64(sp),18(sp)
   15f96:	|      move.l 1caf2 <SysBase>,d0
   15f9c:	|      movea.l d0,a6
   15f9e:	|      movea.l 18(sp),a0
   15fa2:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15fa6:	|      move.l 84(sp),14(sp)
   15fac:	|      move.l 1caf2 <SysBase>,d0
   15fb2:	|      movea.l d0,a6
   15fb4:	|      movea.l 14(sp),a0
   15fb8:	|      jsr -672(a6)
    return 0;
   15fbc:	|      moveq #0,d0
   15fbe:	'----> movea.l (sp)+,a6
   15fc0:	       lea 88(sp),sp
   15fc4:	       rts

00015fc6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15fc6:	             lea -20(sp),sp
   15fca:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15fcc:	             move.l 1cc06 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15fd4:	      ,----- bra.s 16006 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15fd6:	   ,--|----> movea.l 20(sp),a0
   15fda:	   |  |      move.l (a0),d0
   15fdc:	   |  |      cmp.l 28(sp),d0
   15fe0:	   |  |  ,-- bne.s 15ffc <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15fe2:	   |  |  |   movea.l 20(sp),a0
   15fe6:	   |  |  |   move.l 4(a0),d0
   15fea:	   |  |  |   addq.l #1,d0
   15fec:	   |  |  |   movea.l 20(sp),a0
   15ff0:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15ff4:	   |  |  |   move.l 20(sp),d0
   15ff8:	,--|--|--|-- bra.w 1609a <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15ffc:	|  |  |  '-> movea.l 20(sp),a0
   16000:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   16006:	|  |  '----> tst.l 20(sp)
   1600a:	|  '-------- bne.s 15fd6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1600c:	|            moveq #26,d0
   1600e:	|            move.l d0,16(sp)
   16012:	|            clr.l 12(sp)
   16016:	|            move.l 1caf2 <SysBase>,d0
   1601c:	|            movea.l d0,a6
   1601e:	|            move.l 16(sp),d0
   16022:	|            move.l 12(sp),d1
   16026:	|            jsr -684(a6)
   1602a:	|            move.l d0,8(sp)
   1602e:	|            move.l 8(sp),d0
   16032:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   16036:	|     ,----- beq.s 16098 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   16038:	|     |      movea.l 20(sp),a0
   1603c:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   16040:	|     |      move.l 20(sp),d0
   16044:	|     |      addq.l #8,d0
   16046:	|     |      move.l d0,-(sp)
   16048:	|     |      move.l 32(sp),-(sp)
   1604c:	|     |      jsr 8a38 <loadSpriteBank>
   16052:	|     |      addq.l #8,sp
   16054:	|     |      tst.w d0
   16056:	|     |  ,-- beq.s 1607e <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   16058:	|     |  |   movea.l 20(sp),a0
   1605c:	|     |  |   moveq #1,d0
   1605e:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16062:	|     |  |   move.l 1cc06 <allLoadedBanks>,d0
   16068:	|     |  |   movea.l 20(sp),a0
   1606c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16070:	|     |  |   move.l 20(sp),1cc06 <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   16078:	|     |  |   move.l 20(sp),d0
   1607c:	+-----|--|-- bra.s 1609a <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   1607e:	|     |  '-> move.l 20(sp),4(sp)
   16084:	|     |      move.l 1caf2 <SysBase>,d0
   1608a:	|     |      movea.l d0,a6
   1608c:	|     |      movea.l 4(sp),a1
   16090:	|     |      jsr -690(a6)
			return NULL;
   16094:	|     |      moveq #0,d0
   16096:	+-----|----- bra.s 1609a <loadBankForAnim+0xd4>
		}
	} else return NULL;
   16098:	|     '----> moveq #0,d0
}
   1609a:	'----------> movea.l (sp)+,a6
   1609c:	             lea 20(sp),sp
   160a0:	             rts

000160a2 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   160a2:	       lea -60(sp),sp
   160a6:	       move.l d3,-(sp)
   160a8:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   160aa:	       move.l 88(sp),d0
   160ae:	       sub.l 80(sp),d0
   160b2:	       move.l d0,-(sp)
   160b4:	       jsr 17696 <__floatsidf>
   160ba:	       addq.l #4,sp
   160bc:	       move.l d0,32(sp)
   160c0:	       move.l d1,36(sp)
   160c4:	       move.l 32(sp),60(sp)
   160ca:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   160d0:	       move.l 92(sp),d0
   160d4:	       sub.l 84(sp),d0
   160d8:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   160dc:	       move.l 96(sp),d0
   160e0:	       sub.l 80(sp),d0
   160e4:	       move.l d0,-(sp)
   160e6:	       jsr 17696 <__floatsidf>
   160ec:	       addq.l #4,sp
   160ee:	       move.l 64(sp),-(sp)
   160f2:	       move.l 64(sp),-(sp)
   160f6:	       move.l d1,-(sp)
   160f8:	       move.l d0,-(sp)
   160fa:	       jsr 17726 <__muldf3>
   16100:	       lea 16(sp),sp
   16104:	       move.l d0,d2
   16106:	       move.l d1,d3
   16108:	       move.l 100(sp),d0
   1610c:	       sub.l 84(sp),d0
   16110:	       move.l 56(sp),-(sp)
   16114:	       move.l d0,-(sp)
   16116:	       jsr 17c30 <__mulsi3>
   1611c:	       addq.l #8,sp
   1611e:	       move.l d0,-(sp)
   16120:	       jsr 17696 <__floatsidf>
   16126:	       addq.l #4,sp
   16128:	       move.l d1,-(sp)
   1612a:	       move.l d0,-(sp)
   1612c:	       move.l d3,-(sp)
   1612e:	       move.l d2,-(sp)
   16130:	       jsr 174c8 <__adddf3>
   16136:	       lea 16(sp),sp
   1613a:	       move.l d0,24(sp)
   1613e:	       move.l d1,28(sp)
   16142:	       move.l 24(sp),48(sp)
   16148:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1614e:	       move.l 64(sp),-(sp)
   16152:	       move.l 64(sp),-(sp)
   16156:	       move.l 72(sp),-(sp)
   1615a:	       move.l 72(sp),-(sp)
   1615e:	       jsr 17726 <__muldf3>
   16164:	       lea 16(sp),sp
   16168:	       move.l d0,d2
   1616a:	       move.l d1,d3
   1616c:	       move.l 56(sp),-(sp)
   16170:	       move.l 60(sp),-(sp)
   16174:	       jsr 17c30 <__mulsi3>
   1617a:	       addq.l #8,sp
   1617c:	       move.l d0,-(sp)
   1617e:	       jsr 17696 <__floatsidf>
   16184:	       addq.l #4,sp
   16186:	       move.l d1,-(sp)
   16188:	       move.l d0,-(sp)
   1618a:	       move.l d3,-(sp)
   1618c:	       move.l d2,-(sp)
   1618e:	       jsr 174c8 <__adddf3>
   16194:	       lea 16(sp),sp
   16198:	       move.l d1,-(sp)
   1619a:	       move.l d0,-(sp)
   1619c:	       move.l 60(sp),-(sp)
   161a0:	       move.l 60(sp),-(sp)
   161a4:	       jsr 1752a <__divdf3>
   161aa:	       lea 16(sp),sp
   161ae:	       move.l d0,16(sp)
   161b2:	       move.l d1,20(sp)
   161b6:	       move.l 16(sp),48(sp)
   161bc:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   161c2:	       clr.l -(sp)
   161c4:	       clr.l -(sp)
   161c6:	       move.l 60(sp),-(sp)
   161ca:	       move.l 60(sp),-(sp)
   161ce:	       jsr 178ae <__ltdf2>
   161d4:	       lea 16(sp),sp
   161d8:	       tst.l d0
   161da:	   ,-- bge.s 161f0 <closestPointOnLine+0x14e>
		*closestX = x1;
   161dc:	   |   movea.l 72(sp),a0
   161e0:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   161e4:	   |   movea.l 76(sp),a0
   161e8:	   |   move.l 84(sp),(a0)
   161ec:	,--|-- bra.w 162be <closestPointOnLine+0x21c>
	} else if (m > 1) {
   161f0:	|  '-> clr.l -(sp)
   161f2:	|      move.l #1072693248,-(sp)
   161f8:	|      move.l 60(sp),-(sp)
   161fc:	|      move.l 60(sp),-(sp)
   16200:	|      jsr 177f4 <__gtdf2>
   16206:	|      lea 16(sp),sp
   1620a:	|      tst.l d0
   1620c:	|  ,-- ble.s 16222 <closestPointOnLine+0x180>
		*closestX = x2;
   1620e:	|  |   movea.l 72(sp),a0
   16212:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   16216:	|  |   movea.l 76(sp),a0
   1621a:	|  |   move.l 92(sp),(a0)
   1621e:	+--|-- bra.w 162be <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16222:	|  '-> move.l 64(sp),-(sp)
   16226:	|      move.l 64(sp),-(sp)
   1622a:	|      move.l 60(sp),-(sp)
   1622e:	|      move.l 60(sp),-(sp)
   16232:	|      jsr 17726 <__muldf3>
   16238:	|      lea 16(sp),sp
   1623c:	|      move.l d0,8(sp)
   16240:	|      move.l d1,12(sp)
   16244:	|      move.l 8(sp),40(sp)
   1624a:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16250:	|      move.l 44(sp),-(sp)
   16254:	|      move.l 44(sp),-(sp)
   16258:	|      jsr 17638 <__fixdfsi>
   1625e:	|      addq.l #8,sp
   16260:	|      movea.l 72(sp),a0
   16264:	|      move.l d0,(a0)
		*closestX += x1;
   16266:	|      movea.l 72(sp),a0
   1626a:	|      move.l (a0),d0
   1626c:	|      add.l 80(sp),d0
   16270:	|      movea.l 72(sp),a0
   16274:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16276:	|      move.l 56(sp),-(sp)
   1627a:	|      jsr 17696 <__floatsidf>
   16280:	|      addq.l #4,sp
   16282:	|      move.l 52(sp),-(sp)
   16286:	|      move.l 52(sp),-(sp)
   1628a:	|      move.l d1,-(sp)
   1628c:	|      move.l d0,-(sp)
   1628e:	|      jsr 17726 <__muldf3>
   16294:	|      lea 16(sp),sp
   16298:	|      move.l d1,-(sp)
   1629a:	|      move.l d0,-(sp)
   1629c:	|      jsr 17638 <__fixdfsi>
   162a2:	|      addq.l #8,sp
   162a4:	|      movea.l 76(sp),a0
   162a8:	|      move.l d0,(a0)
		*closestY += y1;
   162aa:	|      movea.l 76(sp),a0
   162ae:	|      move.l (a0),d0
   162b0:	|      add.l 84(sp),d0
   162b4:	|      movea.l 76(sp),a0
   162b8:	|      move.l d0,(a0)
		return TRUE;
   162ba:	|      moveq #1,d0
   162bc:	|  ,-- bra.s 162c0 <closestPointOnLine+0x21e>
	}
	return FALSE;
   162be:	'--|-> clr.w d0
}
   162c0:	   '-> move.l (sp)+,d2
   162c2:	       move.l (sp)+,d3
   162c4:	       lea 60(sp),sp
   162c8:	       rts

000162ca <drawFloor>:

void drawFloor() {
   162ca:	                lea -12(sp),sp
   162ce:	                move.l d3,-(sp)
   162d0:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   162d2:	                clr.l 16(sp)
   162d6:	   ,----------- bra.w 164ea <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   162da:	,--|----------> movea.l 1cc0a <currentFloor>,a0
   162e0:	|  |            move.l 12(a0),d1
   162e4:	|  |            move.l 16(sp),d0
   162e8:	|  |            lsl.l #3,d0
   162ea:	|  |            movea.l d1,a0
   162ec:	|  |            adda.l d0,a0
   162ee:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   162f2:	|  |            moveq #1,d0
   162f4:	|  |            cmp.l 8(sp),d0
   162f8:	|  |  ,-------- bge.w 164e6 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   162fc:	|  |  |         moveq #1,d0
   162fe:	|  |  |         move.l d0,12(sp)
   16302:	|  |  |     ,-- bra.w 163fc <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   16306:	|  |  |  ,--|-> movea.l 1cc0a <currentFloor>,a0
   1630c:	|  |  |  |  |   move.l 4(a0),d1
   16310:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16316:	|  |  |  |  |   movea.l 12(a0),a0
   1631a:	|  |  |  |  |   move.l 16(sp),d0
   1631e:	|  |  |  |  |   lsl.l #3,d0
   16320:	|  |  |  |  |   adda.l d0,a0
   16322:	|  |  |  |  |   movea.l 4(a0),a0
   16326:	|  |  |  |  |   move.l 12(sp),d0
   1632a:	|  |  |  |  |   add.l d0,d0
   1632c:	|  |  |  |  |   add.l d0,d0
   1632e:	|  |  |  |  |   adda.l d0,a0
   16330:	|  |  |  |  |   move.l (a0),d0
   16332:	|  |  |  |  |   lsl.l #3,d0
   16334:	|  |  |  |  |   movea.l d1,a0
   16336:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16338:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1633c:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16342:	|  |  |  |  |   move.l 4(a0),d1
   16346:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   1634c:	|  |  |  |  |   movea.l 12(a0),a0
   16350:	|  |  |  |  |   move.l 16(sp),d0
   16354:	|  |  |  |  |   lsl.l #3,d0
   16356:	|  |  |  |  |   adda.l d0,a0
   16358:	|  |  |  |  |   movea.l 4(a0),a0
   1635c:	|  |  |  |  |   move.l 12(sp),d0
   16360:	|  |  |  |  |   add.l d0,d0
   16362:	|  |  |  |  |   add.l d0,d0
   16364:	|  |  |  |  |   adda.l d0,a0
   16366:	|  |  |  |  |   move.l (a0),d0
   16368:	|  |  |  |  |   lsl.l #3,d0
   1636a:	|  |  |  |  |   movea.l d1,a0
   1636c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1636e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16370:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16376:	|  |  |  |  |   move.l 4(a0),d1
   1637a:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16380:	|  |  |  |  |   movea.l 12(a0),a0
   16384:	|  |  |  |  |   move.l 16(sp),d0
   16388:	|  |  |  |  |   lsl.l #3,d0
   1638a:	|  |  |  |  |   adda.l d0,a0
   1638c:	|  |  |  |  |   movea.l 4(a0),a0
   16390:	|  |  |  |  |   move.l 12(sp),d0
   16394:	|  |  |  |  |   addi.l #1073741823,d0
   1639a:	|  |  |  |  |   add.l d0,d0
   1639c:	|  |  |  |  |   add.l d0,d0
   1639e:	|  |  |  |  |   adda.l d0,a0
   163a0:	|  |  |  |  |   move.l (a0),d0
   163a2:	|  |  |  |  |   lsl.l #3,d0
   163a4:	|  |  |  |  |   movea.l d1,a0
   163a6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   163a8:	|  |  |  |  |   move.l 4(a0),d1
   163ac:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   163b2:	|  |  |  |  |   move.l 4(a0),d3
   163b6:	|  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   163bc:	|  |  |  |  |   movea.l 12(a0),a0
   163c0:	|  |  |  |  |   move.l 16(sp),d0
   163c4:	|  |  |  |  |   lsl.l #3,d0
   163c6:	|  |  |  |  |   adda.l d0,a0
   163c8:	|  |  |  |  |   movea.l 4(a0),a0
   163cc:	|  |  |  |  |   move.l 12(sp),d0
   163d0:	|  |  |  |  |   addi.l #1073741823,d0
   163d6:	|  |  |  |  |   add.l d0,d0
   163d8:	|  |  |  |  |   add.l d0,d0
   163da:	|  |  |  |  |   adda.l d0,a0
   163dc:	|  |  |  |  |   move.l (a0),d0
   163de:	|  |  |  |  |   lsl.l #3,d0
   163e0:	|  |  |  |  |   movea.l d3,a0
   163e2:	|  |  |  |  |   adda.l d0,a0
   163e4:	|  |  |  |  |   move.l (a0),d0
   163e6:	|  |  |  |  |   move.l d2,-(sp)
   163e8:	|  |  |  |  |   move.l a1,-(sp)
   163ea:	|  |  |  |  |   move.l d1,-(sp)
   163ec:	|  |  |  |  |   move.l d0,-(sp)
   163ee:	|  |  |  |  |   jsr 46b4 <drawLine>
   163f4:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   163f8:	|  |  |  |  |   addq.l #1,12(sp)
   163fc:	|  |  |  |  '-> move.l 12(sp),d0
   16400:	|  |  |  |      cmp.l 8(sp),d0
   16404:	|  |  |  '----- blt.w 16306 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16408:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   1640e:	|  |  |         move.l 4(a0),d1
   16412:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   16418:	|  |  |         movea.l 12(a0),a0
   1641c:	|  |  |         move.l 16(sp),d0
   16420:	|  |  |         lsl.l #3,d0
   16422:	|  |  |         adda.l d0,a0
   16424:	|  |  |         movea.l 4(a0),a0
   16428:	|  |  |         move.l 8(sp),d0
   1642c:	|  |  |         addi.l #1073741823,d0
   16432:	|  |  |         add.l d0,d0
   16434:	|  |  |         add.l d0,d0
   16436:	|  |  |         adda.l d0,a0
   16438:	|  |  |         move.l (a0),d0
   1643a:	|  |  |         lsl.l #3,d0
   1643c:	|  |  |         movea.l d1,a0
   1643e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16440:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16444:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   1644a:	|  |  |         move.l 4(a0),d1
   1644e:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   16454:	|  |  |         movea.l 12(a0),a0
   16458:	|  |  |         move.l 16(sp),d0
   1645c:	|  |  |         lsl.l #3,d0
   1645e:	|  |  |         adda.l d0,a0
   16460:	|  |  |         movea.l 4(a0),a0
   16464:	|  |  |         move.l 8(sp),d0
   16468:	|  |  |         addi.l #1073741823,d0
   1646e:	|  |  |         add.l d0,d0
   16470:	|  |  |         add.l d0,d0
   16472:	|  |  |         adda.l d0,a0
   16474:	|  |  |         move.l (a0),d0
   16476:	|  |  |         lsl.l #3,d0
   16478:	|  |  |         movea.l d1,a0
   1647a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1647c:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1647e:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   16484:	|  |  |         move.l 4(a0),d1
   16488:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   1648e:	|  |  |         movea.l 12(a0),a0
   16492:	|  |  |         move.l 16(sp),d0
   16496:	|  |  |         lsl.l #3,d0
   16498:	|  |  |         adda.l d0,a0
   1649a:	|  |  |         movea.l 4(a0),a0
   1649e:	|  |  |         move.l (a0),d0
   164a0:	|  |  |         lsl.l #3,d0
   164a2:	|  |  |         movea.l d1,a0
   164a4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   164a6:	|  |  |         move.l 4(a0),d1
   164aa:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   164b0:	|  |  |         move.l 4(a0),d3
   164b4:	|  |  |         movea.l 1cc0a <currentFloor>,a0
   164ba:	|  |  |         movea.l 12(a0),a0
   164be:	|  |  |         move.l 16(sp),d0
   164c2:	|  |  |         lsl.l #3,d0
   164c4:	|  |  |         adda.l d0,a0
   164c6:	|  |  |         movea.l 4(a0),a0
   164ca:	|  |  |         move.l (a0),d0
   164cc:	|  |  |         lsl.l #3,d0
   164ce:	|  |  |         movea.l d3,a0
   164d0:	|  |  |         adda.l d0,a0
   164d2:	|  |  |         move.l (a0),d0
   164d4:	|  |  |         move.l d2,-(sp)
   164d6:	|  |  |         move.l a1,-(sp)
   164d8:	|  |  |         move.l d1,-(sp)
   164da:	|  |  |         move.l d0,-(sp)
   164dc:	|  |  |         jsr 46b4 <drawLine>
   164e2:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   164e6:	|  |  '-------> addq.l #1,16(sp)
   164ea:	|  '----------> movea.l 1cc0a <currentFloor>,a0
   164f0:	|               move.l 8(a0),d0
   164f4:	|               cmp.l 16(sp),d0
   164f8:	'-------------- bgt.w 162da <drawFloor+0x10>
        }
    }
}
   164fc:	                nop
   164fe:	                nop
   16500:	                move.l (sp)+,d2
   16502:	                move.l (sp)+,d3
   16504:	                lea 12(sp),sp
   16508:	                rts

0001650a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1650a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1650e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16512:	                      clr.l 4(sp)
   16516:	   ,----------------- bra.w 165a8 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1651a:	,--|----------------> clr.l (sp)
   1651c:	|  |     ,----------- bra.s 16598 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1651e:	|  |  ,--|----------> movea.l 16(sp),a0
   16522:	|  |  |  |            move.l 4(a0),d1
   16526:	|  |  |  |            move.l 4(sp),d0
   1652a:	|  |  |  |            add.l d0,d0
   1652c:	|  |  |  |            add.l d0,d0
   1652e:	|  |  |  |            movea.l d1,a0
   16530:	|  |  |  |            adda.l d0,a0
   16532:	|  |  |  |            move.l (a0),d1
   16534:	|  |  |  |            movea.l 20(sp),a0
   16538:	|  |  |  |            movea.l 4(a0),a0
   1653c:	|  |  |  |            move.l (sp),d0
   1653e:	|  |  |  |            add.l d0,d0
   16540:	|  |  |  |            add.l d0,d0
   16542:	|  |  |  |            adda.l d0,a0
   16544:	|  |  |  |            move.l (a0),d0
   16546:	|  |  |  |            cmp.l d1,d0
   16548:	|  |  |  |  ,-------- bne.s 16596 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1654a:	|  |  |  |  |         move.l 8(sp),d0
   1654e:	|  |  |  |  |         move.l d0,d1
   16550:	|  |  |  |  |         addq.l #1,d1
   16552:	|  |  |  |  |         move.l d1,8(sp)
   16556:	|  |  |  |  |         tst.l d0
   16558:	|  |  |  |  |     ,-- beq.s 1657a <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1655a:	|  |  |  |  |     |   movea.l 16(sp),a0
   1655e:	|  |  |  |  |     |   move.l 4(a0),d1
   16562:	|  |  |  |  |     |   move.l 4(sp),d0
   16566:	|  |  |  |  |     |   add.l d0,d0
   16568:	|  |  |  |  |     |   add.l d0,d0
   1656a:	|  |  |  |  |     |   movea.l d1,a0
   1656c:	|  |  |  |  |     |   adda.l d0,a0
   1656e:	|  |  |  |  |     |   move.l (a0),d0
   16570:	|  |  |  |  |     |   movea.l 28(sp),a0
   16574:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16576:	|  |  |  |  |     |   moveq #1,d0
   16578:	|  |  |  |  |  ,--|-- bra.s 165b8 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1657a:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   1657e:	|  |  |  |  |  |      move.l 4(a0),d1
   16582:	|  |  |  |  |  |      move.l 4(sp),d0
   16586:	|  |  |  |  |  |      add.l d0,d0
   16588:	|  |  |  |  |  |      add.l d0,d0
   1658a:	|  |  |  |  |  |      movea.l d1,a0
   1658c:	|  |  |  |  |  |      adda.l d0,a0
   1658e:	|  |  |  |  |  |      move.l (a0),d0
   16590:	|  |  |  |  |  |      movea.l 24(sp),a0
   16594:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16596:	|  |  |  |  '--|----> addq.l #1,(sp)
   16598:	|  |  |  '-----|----> movea.l 20(sp),a0
   1659c:	|  |  |        |      move.l (a0),d0
   1659e:	|  |  |        |      cmp.l (sp),d0
   165a0:	|  |  '--------|----- bgt.w 1651e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   165a4:	|  |           |      addq.l #1,4(sp)
   165a8:	|  '-----------|----> movea.l 16(sp),a0
   165ac:	|              |      move.l (a0),d0
   165ae:	|              |      cmp.l 4(sp),d0
   165b2:	'--------------|----- bgt.w 1651a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   165b6:	               |      clr.w d0
}
   165b8:	               '----> lea 12(sp),sp
   165bc:	                      rts

000165be <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   165be:	movea.l 1cc0a <currentFloor>,a0
   165c4:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   165c8:	movea.l 1cc0a <currentFloor>,a0
   165ce:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   165d2:	movea.l 1cc0a <currentFloor>,a0
   165d8:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   165dc:	movea.l 1cc0a <currentFloor>,a0
   165e2:	clr.l 16(a0)
}
   165e6:	nop
   165e8:	rts

000165ea <inFloor>:

int inFloor (int x, int y) {
   165ea:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   165ec:	          pea 1a210 <talk.c.490538ff+0x801>
   165f2:	          jsr 172a4 <KPrintF>
   165f8:	          addq.l #4,sp
	int i, r = -1;
   165fa:	          moveq #-1,d0
   165fc:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165fe:	          clr.l 4(sp)
   16602:	   ,----- bra.s 16636 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16604:	,--|----> movea.l 1cc0a <currentFloor>,a0
   1660a:	|  |      move.l 12(a0),d1
   1660e:	|  |      move.l 4(sp),d0
   16612:	|  |      lsl.l #3,d0
   16614:	|  |      add.l d1,d0
   16616:	|  |      move.l 16(sp),-(sp)
   1661a:	|  |      move.l 16(sp),-(sp)
   1661e:	|  |      move.l d0,-(sp)
   16620:	|  |      jsr 16810 <pointInFloorPolygon>
   16626:	|  |      lea 12(sp),sp
   1662a:	|  |      tst.w d0
   1662c:	|  |  ,-- beq.s 16632 <inFloor+0x48>
			r = i;
   1662e:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16632:	|  |  '-> addq.l #1,4(sp)
   16636:	|  '----> movea.l 1cc0a <currentFloor>,a0
   1663c:	|         move.l 8(a0),d0
   16640:	|         cmp.l 4(sp),d0
   16644:	'-------- bgt.s 16604 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   16646:	          pea 1a221 <talk.c.490538ff+0x812>
   1664c:	          jsr 172a4 <KPrintF>
   16652:	          addq.l #4,sp
	return r;
   16654:	          move.l (sp),d0
}
   16656:	          addq.l #8,sp
   16658:	          rts

0001665a <initFloor>:

BOOL initFloor () {
   1665a:	       lea -12(sp),sp
   1665e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16660:	       moveq #20,d0
   16662:	       move.l d0,12(sp)
   16666:	       clr.l 8(sp)
   1666a:	       move.l 1caf2 <SysBase>,d0
   16670:	       movea.l d0,a6
   16672:	       move.l 12(sp),d0
   16676:	       move.l 8(sp),d1
   1667a:	       jsr -684(a6)
   1667e:	       move.l d0,4(sp)
   16682:	       move.l 4(sp),d0
   16686:	       move.l d0,1cc0a <currentFloor>

    if(currentFloor == 0) {
   1668c:	       move.l 1cc0a <currentFloor>,d0
   16692:	,----- bne.s 166a6 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16694:	|      pea 1a233 <talk.c.490538ff+0x824>
   1669a:	|      jsr 172a4 <KPrintF>
   166a0:	|      addq.l #4,sp
        return FALSE;
   166a2:	|      clr.w d0
   166a4:	|  ,-- bra.s 166ae <initFloor+0x54>
    }

	noFloor ();
   166a6:	'--|-> jsr 165be <noFloor>
	return TRUE;
   166ac:	   |   moveq #1,d0
}
   166ae:	   '-> movea.l (sp)+,a6
   166b0:	       lea 12(sp),sp
   166b4:	       rts

000166b6 <killFloor>:

void killFloor () {
   166b6:	       lea -24(sp),sp
   166ba:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166bc:	       clr.l 24(sp)
   166c0:	   ,-- bra.s 1671a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   166c2:	,--|-> movea.l 1cc0a <currentFloor>,a0
   166c8:	|  |   move.l 12(a0),d1
   166cc:	|  |   move.l 24(sp),d0
   166d0:	|  |   lsl.l #3,d0
   166d2:	|  |   movea.l d1,a0
   166d4:	|  |   adda.l d0,a0
   166d6:	|  |   move.l 4(a0),8(sp)
   166dc:	|  |   move.l 1caf2 <SysBase>,d0
   166e2:	|  |   movea.l d0,a6
   166e4:	|  |   movea.l 8(sp),a1
   166e8:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   166ec:	|  |   movea.l 1cc0a <currentFloor>,a0
   166f2:	|  |   move.l 16(a0),d1
   166f6:	|  |   move.l 24(sp),d0
   166fa:	|  |   add.l d0,d0
   166fc:	|  |   add.l d0,d0
   166fe:	|  |   movea.l d1,a0
   16700:	|  |   adda.l d0,a0
   16702:	|  |   move.l (a0),4(sp)
   16706:	|  |   move.l 1caf2 <SysBase>,d0
   1670c:	|  |   movea.l d0,a6
   1670e:	|  |   movea.l 4(sp),a1
   16712:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16716:	|  |   addq.l #1,24(sp)
   1671a:	|  '-> movea.l 1cc0a <currentFloor>,a0
   16720:	|      move.l 8(a0),d0
   16724:	|      cmp.l 24(sp),d0
   16728:	'----- bgt.s 166c2 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1672a:	       movea.l 1cc0a <currentFloor>,a0
   16730:	       move.l 12(a0),20(sp)
   16736:	       move.l 1caf2 <SysBase>,d0
   1673c:	       movea.l d0,a6
   1673e:	       movea.l 20(sp),a1
   16742:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16746:	       movea.l 1cc0a <currentFloor>,a0
   1674c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16750:	       movea.l 1cc0a <currentFloor>,a0
   16756:	       move.l 4(a0),16(sp)
   1675c:	       move.l 1caf2 <SysBase>,d0
   16762:	       movea.l d0,a6
   16764:	       movea.l 16(sp),a1
   16768:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1676c:	       movea.l 1cc0a <currentFloor>,a0
   16772:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16776:	       movea.l 1cc0a <currentFloor>,a0
   1677c:	       move.l 16(a0),12(sp)
   16782:	       move.l 1caf2 <SysBase>,d0
   16788:	       movea.l d0,a6
   1678a:	       movea.l 12(sp),a1
   1678e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16792:	       movea.l 1cc0a <currentFloor>,a0
   16798:	       clr.l 16(a0)
}
   1679c:	       nop
   1679e:	       movea.l (sp)+,a6
   167a0:	       lea 24(sp),sp
   167a4:	       rts

000167a6 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   167a6:	                   lea -12(sp),sp
	int sharedVertices = 0;
   167aa:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   167ae:	                   clr.l 4(sp)
   167b2:	   ,-------------- bra.s 167fe <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   167b4:	,--|-------------> clr.l (sp)
   167b6:	|  |     ,-------- bra.s 167f2 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   167b8:	|  |  ,--|-------> move.l 20(sp),d1
   167bc:	|  |  |  |         move.l 4(sp),d0
   167c0:	|  |  |  |         add.l d0,d0
   167c2:	|  |  |  |         add.l d0,d0
   167c4:	|  |  |  |         movea.l d1,a0
   167c6:	|  |  |  |         adda.l d0,a0
   167c8:	|  |  |  |         move.l (a0),d1
   167ca:	|  |  |  |         movea.l 28(sp),a0
   167ce:	|  |  |  |         move.l (sp),d0
   167d0:	|  |  |  |         add.l d0,d0
   167d2:	|  |  |  |         add.l d0,d0
   167d4:	|  |  |  |         adda.l d0,a0
   167d6:	|  |  |  |         move.l (a0),d0
   167d8:	|  |  |  |         cmp.l d1,d0
   167da:	|  |  |  |     ,-- bne.s 167f0 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   167dc:	|  |  |  |     |   move.l 8(sp),d0
   167e0:	|  |  |  |     |   move.l d0,d1
   167e2:	|  |  |  |     |   addq.l #1,d1
   167e4:	|  |  |  |     |   move.l d1,8(sp)
   167e8:	|  |  |  |     |   tst.l d0
   167ea:	|  |  |  |     +-- beq.s 167f0 <polysShareSide+0x4a>
   167ec:	|  |  |  |     |   moveq #1,d0
   167ee:	|  |  |  |  ,--|-- bra.s 1680a <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   167f0:	|  |  |  |  |  '-> addq.l #1,(sp)
   167f2:	|  |  |  '--|----> move.l 24(sp),d0
   167f6:	|  |  |     |      cmp.l (sp),d0
   167f8:	|  |  '-----|----- bgt.s 167b8 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   167fa:	|  |        |      addq.l #1,4(sp)
   167fe:	|  '--------|----> move.l 16(sp),d0
   16802:	|           |      cmp.l 4(sp),d0
   16806:	'-----------|----- bgt.s 167b4 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16808:	            |      clr.w d0
}
   1680a:	            '----> lea 12(sp),sp
   1680e:	                   rts

00016810 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16810:	             lea -28(sp),sp
   16814:	             move.l d3,-(sp)
   16816:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16818:	             clr.l 32(sp)
   1681c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16820:	             movea.l 40(sp),a0
   16824:	             move.l (a0),d0
   16826:	             move.l d0,d1
   16828:	             subq.l #1,d1
   1682a:	             move.l d1,28(sp)
   1682e:	   ,-------- bra.w 16a28 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16832:	,--|-------> movea.l 1cc0a <currentFloor>,a0
   16838:	|  |         move.l 4(a0),d1
   1683c:	|  |         movea.l 40(sp),a0
   16840:	|  |         movea.l 4(a0),a0
   16844:	|  |         move.l 32(sp),d0
   16848:	|  |         add.l d0,d0
   1684a:	|  |         add.l d0,d0
   1684c:	|  |         adda.l d0,a0
   1684e:	|  |         move.l (a0),d0
   16850:	|  |         lsl.l #3,d0
   16852:	|  |         movea.l d1,a0
   16854:	|  |         adda.l d0,a0
   16856:	|  |         move.l (a0),d0
   16858:	|  |         move.l d0,-(sp)
   1685a:	|  |         jsr 176d6 <__floatsisf>
   16860:	|  |         addq.l #4,sp
   16862:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16866:	|  |         movea.l 1cc0a <currentFloor>,a0
   1686c:	|  |         move.l 4(a0),d1
   16870:	|  |         movea.l 40(sp),a0
   16874:	|  |         movea.l 4(a0),a0
   16878:	|  |         move.l 32(sp),d0
   1687c:	|  |         add.l d0,d0
   1687e:	|  |         add.l d0,d0
   16880:	|  |         adda.l d0,a0
   16882:	|  |         move.l (a0),d0
   16884:	|  |         lsl.l #3,d0
   16886:	|  |         movea.l d1,a0
   16888:	|  |         adda.l d0,a0
   1688a:	|  |         move.l 4(a0),d0
   1688e:	|  |         move.l d0,-(sp)
   16890:	|  |         jsr 176d6 <__floatsisf>
   16896:	|  |         addq.l #4,sp
   16898:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1689c:	|  |         movea.l 1cc0a <currentFloor>,a0
   168a2:	|  |         move.l 4(a0),d1
   168a6:	|  |         movea.l 40(sp),a0
   168aa:	|  |         movea.l 4(a0),a0
   168ae:	|  |         move.l 28(sp),d0
   168b2:	|  |         add.l d0,d0
   168b4:	|  |         add.l d0,d0
   168b6:	|  |         adda.l d0,a0
   168b8:	|  |         move.l (a0),d0
   168ba:	|  |         lsl.l #3,d0
   168bc:	|  |         movea.l d1,a0
   168be:	|  |         adda.l d0,a0
   168c0:	|  |         move.l (a0),d0
   168c2:	|  |         move.l d0,-(sp)
   168c4:	|  |         jsr 176d6 <__floatsisf>
   168ca:	|  |         addq.l #4,sp
   168cc:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   168d0:	|  |         movea.l 1cc0a <currentFloor>,a0
   168d6:	|  |         move.l 4(a0),d1
   168da:	|  |         movea.l 40(sp),a0
   168de:	|  |         movea.l 4(a0),a0
   168e2:	|  |         move.l 28(sp),d0
   168e6:	|  |         add.l d0,d0
   168e8:	|  |         add.l d0,d0
   168ea:	|  |         adda.l d0,a0
   168ec:	|  |         move.l (a0),d0
   168ee:	|  |         lsl.l #3,d0
   168f0:	|  |         movea.l d1,a0
   168f2:	|  |         adda.l d0,a0
   168f4:	|  |         move.l 4(a0),d0
   168f8:	|  |         move.l d0,-(sp)
   168fa:	|  |         jsr 176d6 <__floatsisf>
   16900:	|  |         addq.l #4,sp
   16902:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16906:	|  |         move.l 48(sp),-(sp)
   1690a:	|  |         jsr 176d6 <__floatsisf>
   16910:	|  |         addq.l #4,sp
   16912:	|  |         move.l d0,-(sp)
   16914:	|  |         move.l 20(sp),-(sp)
   16918:	|  |         jsr 17878 <__lesf2>
   1691e:	|  |         addq.l #8,sp
   16920:	|  |         tst.l d0
   16922:	|  |     ,-- bgt.s 16942 <pointInFloorPolygon+0x132>
   16924:	|  |     |   move.l 48(sp),-(sp)
   16928:	|  |     |   jsr 176d6 <__floatsisf>
   1692e:	|  |     |   addq.l #4,sp
   16930:	|  |     |   move.l d0,-(sp)
   16932:	|  |     |   move.l 12(sp),-(sp)
   16936:	|  |     |   jsr 17842 <__gtsf2>
   1693c:	|  |     |   addq.l #8,sp
   1693e:	|  |     |   tst.l d0
   16940:	|  |  ,--|-- bgt.s 16982 <pointInFloorPolygon+0x172>
   16942:	|  |  |  '-> move.l 48(sp),-(sp)
   16946:	|  |  |      jsr 176d6 <__floatsisf>
   1694c:	|  |  |      addq.l #4,sp
   1694e:	|  |  |      move.l d0,-(sp)
   16950:	|  |  |      move.l 12(sp),-(sp)
   16954:	|  |  |      jsr 17878 <__lesf2>
   1695a:	|  |  |      addq.l #8,sp
   1695c:	|  |  |      tst.l d0
   1695e:	|  |  |  ,-- bgt.w 16a18 <pointInFloorPolygon+0x208>
   16962:	|  |  |  |   move.l 48(sp),-(sp)
   16966:	|  |  |  |   jsr 176d6 <__floatsisf>
   1696c:	|  |  |  |   addq.l #4,sp
   1696e:	|  |  |  |   move.l d0,-(sp)
   16970:	|  |  |  |   move.l 20(sp),-(sp)
   16974:	|  |  |  |   jsr 17842 <__gtsf2>
   1697a:	|  |  |  |   addq.l #8,sp
   1697c:	|  |  |  |   tst.l d0
   1697e:	|  |  |  +-- ble.w 16a18 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16982:	|  |  '--|-> move.l 44(sp),-(sp)
   16986:	|  |     |   jsr 176d6 <__floatsisf>
   1698c:	|  |     |   addq.l #4,sp
   1698e:	|  |     |   move.l d0,d3
   16990:	|  |     |   move.l 20(sp),-(sp)
   16994:	|  |     |   move.l 16(sp),-(sp)
   16998:	|  |     |   jsr 179ca <__subsf3>
   1699e:	|  |     |   addq.l #8,sp
   169a0:	|  |     |   move.l d0,d2
   169a2:	|  |     |   move.l 48(sp),-(sp)
   169a6:	|  |     |   jsr 176d6 <__floatsisf>
   169ac:	|  |     |   addq.l #4,sp
   169ae:	|  |     |   move.l 16(sp),-(sp)
   169b2:	|  |     |   move.l d0,-(sp)
   169b4:	|  |     |   jsr 179ca <__subsf3>
   169ba:	|  |     |   addq.l #8,sp
   169bc:	|  |     |   move.l d0,-(sp)
   169be:	|  |     |   move.l d2,-(sp)
   169c0:	|  |     |   jsr 17788 <__mulsf3>
   169c6:	|  |     |   addq.l #8,sp
   169c8:	|  |     |   move.l d0,d2
   169ca:	|  |     |   move.l 16(sp),-(sp)
   169ce:	|  |     |   move.l 12(sp),-(sp)
   169d2:	|  |     |   jsr 179ca <__subsf3>
   169d8:	|  |     |   addq.l #8,sp
   169da:	|  |     |   move.l d0,-(sp)
   169dc:	|  |     |   move.l d2,-(sp)
   169de:	|  |     |   jsr 1758c <__divsf3>
   169e4:	|  |     |   addq.l #8,sp
   169e6:	|  |     |   move.l 20(sp),-(sp)
   169ea:	|  |     |   move.l d0,-(sp)
   169ec:	|  |     |   jsr 17492 <__addsf3>
   169f2:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   169f4:	|  |     |   move.l d0,-(sp)
   169f6:	|  |     |   move.l d3,-(sp)
   169f8:	|  |     |   jsr 178fc <__ltsf2>
   169fe:	|  |     |   addq.l #8,sp
   16a00:	|  |     |   tst.l d0
   16a02:	|  |     +-- bge.s 16a18 <pointInFloorPolygon+0x208>

			c = !c;
   16a04:	|  |     |   tst.l 24(sp)
   16a08:	|  |     |   seq d0
   16a0a:	|  |     |   neg.b d0
   16a0c:	|  |     |   move.b d0,d0
   16a0e:	|  |     |   andi.l #255,d0
   16a14:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16a18:	|  |     '-> move.l 32(sp),d0
   16a1c:	|  |         move.l d0,d1
   16a1e:	|  |         addq.l #1,d1
   16a20:	|  |         move.l d1,32(sp)
   16a24:	|  |         move.l d0,28(sp)
   16a28:	|  '-------> movea.l 40(sp),a0
   16a2c:	|            move.l (a0),d0
   16a2e:	|            cmp.l 32(sp),d0
   16a32:	'----------- bgt.w 16832 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16a36:	             tst.l 24(sp)
   16a3a:	             sne d0
   16a3c:	             neg.b d0
   16a3e:	             move.b d0,d0
   16a40:	             andi.w #255,d0
}
   16a44:	             move.l (sp)+,d2
   16a46:	             move.l (sp)+,d3
   16a48:	             lea 28(sp),sp
   16a4c:	             rts

00016a4e <setFloor>:

BOOL setFloor (int fileNum) {
   16a4e:	                               lea -132(sp),sp
   16a52:	                               move.l a6,-(sp)
   16a54:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16a56:	                               jsr 166b6 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16a5c:	                               move.l 144(sp),-(sp)
   16a60:	                               jsr 76d8 <openFileFromNum>
   16a66:	                               addq.l #4,sp
   16a68:	                               tst.l d0
   16a6a:	                           ,-- bne.s 16a72 <setFloor+0x24>
   16a6c:	                           |   clr.w d0
   16a6e:	,--------------------------|-- bra.w 171be <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16a72:	|                          '-> movea.l 1cc0a <currentFloor>,a0
   16a78:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16a7c:	|                              move.l 1cada <bigDataFile>,118(sp)
   16a84:	|                              move.l 1cafa <DOSBase>,d0
   16a8a:	|                              movea.l d0,a6
   16a8c:	|                              move.l 118(sp),d1
   16a90:	|                              jsr -306(a6)
   16a94:	|                              move.l d0,114(sp)
   16a98:	|                              move.l 114(sp),d0
   16a9c:	|                              movea.l 1cc0a <currentFloor>,a0
   16aa2:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16aa6:	|                              movea.l 1cc0a <currentFloor>,a0
   16aac:	|                              move.l 8(a0),d0
   16ab0:	|                              lsl.l #3,d0
   16ab2:	|                              move.l d0,110(sp)
   16ab6:	|                              clr.l 106(sp)
   16aba:	|                              move.l 1caf2 <SysBase>,d0
   16ac0:	|                              movea.l d0,a6
   16ac2:	|                              move.l 110(sp),d0
   16ac6:	|                              move.l 106(sp),d1
   16aca:	|                              jsr -684(a6)
   16ace:	|                              move.l d0,102(sp)
   16ad2:	|                              move.l 102(sp),d0
   16ad6:	|                              movea.l 1cc0a <currentFloor>,a0
   16adc:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16ae0:	|                              movea.l 1cc0a <currentFloor>,a0
   16ae6:	|                              move.l 12(a0),d0
   16aea:	|                          ,-- bne.s 16b00 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16aec:	|                          |   pea 1a257 <talk.c.490538ff+0x848>
   16af2:	|                          |   jsr 172a4 <KPrintF>
   16af8:	|                          |   addq.l #4,sp
		return FALSE;
   16afa:	|                          |   clr.w d0
   16afc:	+--------------------------|-- bra.w 171be <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b00:	|                          '-> clr.l 136(sp)
   16b04:	|                    ,-------- bra.w 16c1c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16b08:	|                 ,--|-------> move.l 1cada <bigDataFile>,26(sp)
   16b10:	|                 |  |         move.l 1cafa <DOSBase>,d0
   16b16:	|                 |  |         movea.l d0,a6
   16b18:	|                 |  |         move.l 26(sp),d1
   16b1c:	|                 |  |         jsr -306(a6)
   16b20:	|                 |  |         move.l d0,22(sp)
   16b24:	|                 |  |         move.l 22(sp),d1
   16b28:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16b2e:	|                 |  |         movea.l 12(a0),a0
   16b32:	|                 |  |         move.l 136(sp),d0
   16b36:	|                 |  |         lsl.l #3,d0
   16b38:	|                 |  |         adda.l d0,a0
   16b3a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16b3c:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16b42:	|                 |  |         move.l 12(a0),d1
   16b46:	|                 |  |         move.l 136(sp),d0
   16b4a:	|                 |  |         lsl.l #3,d0
   16b4c:	|                 |  |         movea.l d1,a0
   16b4e:	|                 |  |         adda.l d0,a0
   16b50:	|                 |  |         move.l (a0),d0
   16b52:	|                 |  |         add.l d0,d0
   16b54:	|                 |  |         add.l d0,d0
   16b56:	|                 |  |         move.l d0,18(sp)
   16b5a:	|                 |  |         clr.l 14(sp)
   16b5e:	|                 |  |         move.l 1caf2 <SysBase>,d0
   16b64:	|                 |  |         movea.l d0,a6
   16b66:	|                 |  |         move.l 18(sp),d0
   16b6a:	|                 |  |         move.l 14(sp),d1
   16b6e:	|                 |  |         jsr -684(a6)
   16b72:	|                 |  |         move.l d0,10(sp)
   16b76:	|                 |  |         move.l 10(sp),d1
   16b7a:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16b80:	|                 |  |         movea.l 12(a0),a0
   16b84:	|                 |  |         move.l 136(sp),d0
   16b88:	|                 |  |         lsl.l #3,d0
   16b8a:	|                 |  |         adda.l d0,a0
   16b8c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16b90:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16b96:	|                 |  |         move.l 12(a0),d1
   16b9a:	|                 |  |         move.l 136(sp),d0
   16b9e:	|                 |  |         lsl.l #3,d0
   16ba0:	|                 |  |         movea.l d1,a0
   16ba2:	|                 |  |         adda.l d0,a0
   16ba4:	|                 |  |         move.l 4(a0),d0
   16ba8:	|                 |  |     ,-- bne.s 16bbe <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16baa:	|                 |  |     |   pea 1a257 <talk.c.490538ff+0x848>
   16bb0:	|                 |  |     |   jsr 172a4 <KPrintF>
   16bb6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16bb8:	|                 |  |     |   clr.w d0
   16bba:	+-----------------|--|-----|-- bra.w 171be <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16bbe:	|                 |  |     '-> clr.l 132(sp)
   16bc2:	|                 |  |     ,-- bra.s 16bfc <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16bc4:	|                 |  |  ,--|-> move.l 1cada <bigDataFile>,d1
   16bca:	|                 |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16bd0:	|                 |  |  |  |   movea.l 12(a0),a0
   16bd4:	|                 |  |  |  |   move.l 136(sp),d0
   16bd8:	|                 |  |  |  |   lsl.l #3,d0
   16bda:	|                 |  |  |  |   adda.l d0,a0
   16bdc:	|                 |  |  |  |   movea.l 4(a0),a0
   16be0:	|                 |  |  |  |   move.l 132(sp),d0
   16be4:	|                 |  |  |  |   add.l d0,d0
   16be6:	|                 |  |  |  |   add.l d0,d0
   16be8:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16bec:	|                 |  |  |  |   move.l d1,-(sp)
   16bee:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16bf4:	|                 |  |  |  |   addq.l #4,sp
   16bf6:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16bf8:	|                 |  |  |  |   addq.l #1,132(sp)
   16bfc:	|                 |  |  |  '-> movea.l 1cc0a <currentFloor>,a0
   16c02:	|                 |  |  |      move.l 12(a0),d1
   16c06:	|                 |  |  |      move.l 136(sp),d0
   16c0a:	|                 |  |  |      lsl.l #3,d0
   16c0c:	|                 |  |  |      movea.l d1,a0
   16c0e:	|                 |  |  |      adda.l d0,a0
   16c10:	|                 |  |  |      move.l (a0),d0
   16c12:	|                 |  |  |      cmp.l 132(sp),d0
   16c16:	|                 |  |  '----- bgt.s 16bc4 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c18:	|                 |  |         addq.l #1,136(sp)
   16c1c:	|                 |  '-------> movea.l 1cc0a <currentFloor>,a0
   16c22:	|                 |            move.l 8(a0),d0
   16c26:	|                 |            cmp.l 136(sp),d0
   16c2a:	|                 '----------- bgt.w 16b08 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16c2e:	|                              move.l 1cada <bigDataFile>,d0
   16c34:	|                              move.l d0,-(sp)
   16c36:	|                              jsr 6bc <get2bytes>
   16c3c:	|                              addq.l #4,sp
   16c3e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16c42:	|                              move.l 136(sp),d0
   16c46:	|                              lsl.l #3,d0
   16c48:	|                              move.l d0,98(sp)
   16c4c:	|                              clr.l 94(sp)
   16c50:	|                              move.l 1caf2 <SysBase>,d0
   16c56:	|                              movea.l d0,a6
   16c58:	|                              move.l 98(sp),d0
   16c5c:	|                              move.l 94(sp),d1
   16c60:	|                              jsr -684(a6)
   16c64:	|                              move.l d0,90(sp)
   16c68:	|                              move.l 90(sp),d0
   16c6c:	|                              movea.l 1cc0a <currentFloor>,a0
   16c72:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16c76:	|                              movea.l 1cc0a <currentFloor>,a0
   16c7c:	|                              move.l 4(a0),d0
   16c80:	|                          ,-- bne.s 16c96 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16c82:	|                          |   pea 1a257 <talk.c.490538ff+0x848>
   16c88:	|                          |   jsr 172a4 <KPrintF>
   16c8e:	|                          |   addq.l #4,sp
		return FALSE;
   16c90:	|                          |   clr.w d0
   16c92:	+--------------------------|-- bra.w 171be <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16c96:	|                          '-> clr.l 132(sp)
   16c9a:	|                          ,-- bra.s 16cee <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16c9c:	|                       ,--|-> move.l 1cada <bigDataFile>,d1
   16ca2:	|                       |  |   movea.l 1cc0a <currentFloor>,a0
   16ca8:	|                       |  |   movea.l 4(a0),a0
   16cac:	|                       |  |   move.l 132(sp),d0
   16cb0:	|                       |  |   lsl.l #3,d0
   16cb2:	|                       |  |   lea (0,a0,d0.l),a2
   16cb6:	|                       |  |   move.l d1,-(sp)
   16cb8:	|                       |  |   jsr 6bc <get2bytes>
   16cbe:	|                       |  |   addq.l #4,sp
   16cc0:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16cc2:	|                       |  |   move.l 1cada <bigDataFile>,d1
   16cc8:	|                       |  |   movea.l 1cc0a <currentFloor>,a0
   16cce:	|                       |  |   movea.l 4(a0),a0
   16cd2:	|                       |  |   move.l 132(sp),d0
   16cd6:	|                       |  |   lsl.l #3,d0
   16cd8:	|                       |  |   lea (0,a0,d0.l),a2
   16cdc:	|                       |  |   move.l d1,-(sp)
   16cde:	|                       |  |   jsr 6bc <get2bytes>
   16ce4:	|                       |  |   addq.l #4,sp
   16ce6:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16cea:	|                       |  |   addq.l #1,132(sp)
   16cee:	|                       |  '-> move.l 132(sp),d0
   16cf2:	|                       |      cmp.l 136(sp),d0
   16cf6:	|                       '----- blt.s 16c9c <setFloor+0x24e>
	}

	finishAccess ();
   16cf8:	|                              jsr 75d0 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cfe:	|                              movea.l 1cc0a <currentFloor>,a0
   16d04:	|                              move.l 8(a0),d0
   16d08:	|                              add.l d0,d0
   16d0a:	|                              add.l d0,d0
   16d0c:	|                              move.l d0,86(sp)
   16d10:	|                              clr.l 82(sp)
   16d14:	|                              move.l 1caf2 <SysBase>,d0
   16d1a:	|                              movea.l d0,a6
   16d1c:	|                              move.l 86(sp),d0
   16d20:	|                              move.l 82(sp),d1
   16d24:	|                              jsr -684(a6)
   16d28:	|                              move.l d0,78(sp)
   16d2c:	|                              move.l 78(sp),d0
   16d30:	|                              movea.l 1cc0a <currentFloor>,a0
   16d36:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16d3a:	|                              movea.l 1cc0a <currentFloor>,a0
   16d40:	|                              move.l 8(a0),d0
   16d44:	|                              add.l d0,d0
   16d46:	|                              add.l d0,d0
   16d48:	|                              move.l d0,74(sp)
   16d4c:	|                              clr.l 70(sp)
   16d50:	|                              move.l 1caf2 <SysBase>,d0
   16d56:	|                              movea.l d0,a6
   16d58:	|                              move.l 74(sp),d0
   16d5c:	|                              move.l 70(sp),d1
   16d60:	|                              jsr -684(a6)
   16d64:	|                              move.l d0,66(sp)
   16d68:	|                              move.l 66(sp),d0
   16d6c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16d70:	|                              movea.l 1cc0a <currentFloor>,a0
   16d76:	|                              move.l 16(a0),d0
   16d7a:	|                          ,-- bne.s 16d90 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16d7c:	|                          |   pea 1a257 <talk.c.490538ff+0x848>
   16d82:	|                          |   jsr 172a4 <KPrintF>
   16d88:	|                          |   addq.l #4,sp
		return FALSE;
   16d8a:	|                          |   clr.w d0
   16d8c:	+--------------------------|-- bra.w 171be <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d90:	|                          '-> clr.l 136(sp)
   16d94:	|                    ,-------- bra.w 16eb8 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d98:	|                 ,--|-------> movea.l 1cc0a <currentFloor>,a0
   16d9e:	|                 |  |         move.l 8(a0),d0
   16da2:	|                 |  |         add.l d0,d0
   16da4:	|                 |  |         add.l d0,d0
   16da6:	|                 |  |         move.l d0,50(sp)
   16daa:	|                 |  |         clr.l 46(sp)
   16dae:	|                 |  |         move.l 1caf2 <SysBase>,d0
   16db4:	|                 |  |         movea.l d0,a6
   16db6:	|                 |  |         move.l 50(sp),d0
   16dba:	|                 |  |         move.l 46(sp),d1
   16dbe:	|                 |  |         jsr -684(a6)
   16dc2:	|                 |  |         move.l d0,42(sp)
   16dc6:	|                 |  |         move.l 42(sp),d0
   16dca:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16dd0:	|                 |  |         movea.l 16(a0),a0
   16dd4:	|                 |  |         move.l 136(sp),d1
   16dd8:	|                 |  |         add.l d1,d1
   16dda:	|                 |  |         add.l d1,d1
   16ddc:	|                 |  |         adda.l d1,a0
   16dde:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16de0:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16de6:	|                 |  |         move.l 8(a0),d0
   16dea:	|                 |  |         add.l d0,d0
   16dec:	|                 |  |         add.l d0,d0
   16dee:	|                 |  |         move.l d0,38(sp)
   16df2:	|                 |  |         clr.l 34(sp)
   16df6:	|                 |  |         move.l 1caf2 <SysBase>,d0
   16dfc:	|                 |  |         movea.l d0,a6
   16dfe:	|                 |  |         move.l 38(sp),d0
   16e02:	|                 |  |         move.l 34(sp),d1
   16e06:	|                 |  |         jsr -684(a6)
   16e0a:	|                 |  |         move.l d0,30(sp)
   16e0e:	|                 |  |         move.l 30(sp),d1
   16e12:	|                 |  |         move.l 136(sp),d0
   16e16:	|                 |  |         add.l d0,d0
   16e18:	|                 |  |         add.l d0,d0
   16e1a:	|                 |  |         movea.l 62(sp),a0
   16e1e:	|                 |  |         adda.l d0,a0
   16e20:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16e22:	|                 |  |         movea.l 1cc0a <currentFloor>,a0
   16e28:	|                 |  |         move.l 16(a0),d1
   16e2c:	|                 |  |         move.l 136(sp),d0
   16e30:	|                 |  |         add.l d0,d0
   16e32:	|                 |  |         add.l d0,d0
   16e34:	|                 |  |         movea.l d1,a0
   16e36:	|                 |  |         adda.l d0,a0
   16e38:	|                 |  |         move.l (a0),d0
   16e3a:	|                 |  |     ,-- bne.s 16e50 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16e3c:	|                 |  |     |   pea 1a257 <talk.c.490538ff+0x848>
   16e42:	|                 |  |     |   jsr 172a4 <KPrintF>
   16e48:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16e4a:	|                 |  |     |   clr.w d0
   16e4c:	+-----------------|--|-----|-- bra.w 171be <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e50:	|                 |  |     '-> clr.l 132(sp)
   16e54:	|                 |  |     ,-- bra.s 16ea4 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16e56:	|                 |  |  ,--|-> movea.l 1cc0a <currentFloor>,a0
   16e5c:	|                 |  |  |  |   move.l 16(a0),d1
   16e60:	|                 |  |  |  |   move.l 136(sp),d0
   16e64:	|                 |  |  |  |   add.l d0,d0
   16e66:	|                 |  |  |  |   add.l d0,d0
   16e68:	|                 |  |  |  |   movea.l d1,a0
   16e6a:	|                 |  |  |  |   adda.l d0,a0
   16e6c:	|                 |  |  |  |   move.l (a0),d1
   16e6e:	|                 |  |  |  |   move.l 132(sp),d0
   16e72:	|                 |  |  |  |   add.l d0,d0
   16e74:	|                 |  |  |  |   add.l d0,d0
   16e76:	|                 |  |  |  |   movea.l d1,a0
   16e78:	|                 |  |  |  |   adda.l d0,a0
   16e7a:	|                 |  |  |  |   moveq #-1,d1
   16e7c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16e7e:	|                 |  |  |  |   move.l 136(sp),d0
   16e82:	|                 |  |  |  |   add.l d0,d0
   16e84:	|                 |  |  |  |   add.l d0,d0
   16e86:	|                 |  |  |  |   movea.l 62(sp),a0
   16e8a:	|                 |  |  |  |   adda.l d0,a0
   16e8c:	|                 |  |  |  |   move.l (a0),d1
   16e8e:	|                 |  |  |  |   move.l 132(sp),d0
   16e92:	|                 |  |  |  |   add.l d0,d0
   16e94:	|                 |  |  |  |   add.l d0,d0
   16e96:	|                 |  |  |  |   movea.l d1,a0
   16e98:	|                 |  |  |  |   adda.l d0,a0
   16e9a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ea0:	|                 |  |  |  |   addq.l #1,132(sp)
   16ea4:	|                 |  |  |  '-> movea.l 1cc0a <currentFloor>,a0
   16eaa:	|                 |  |  |      move.l 8(a0),d0
   16eae:	|                 |  |  |      cmp.l 132(sp),d0
   16eb2:	|                 |  |  '----- bgt.s 16e56 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16eb4:	|                 |  |         addq.l #1,136(sp)
   16eb8:	|                 |  '-------> movea.l 1cc0a <currentFloor>,a0
   16ebe:	|                 |            move.l 8(a0),d0
   16ec2:	|                 |            cmp.l 136(sp),d0
   16ec6:	|                 '----------- bgt.w 16d98 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16eca:	|                              clr.l 136(sp)
   16ece:	|              ,-------------- bra.w 16fd4 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ed2:	|           ,--|-------------> clr.l 132(sp)
   16ed6:	|           |  |     ,-------- bra.w 16fbe <setFloor+0x570>
			if (i != j) {
   16eda:	|           |  |  ,--|-------> move.l 136(sp),d0
   16ede:	|           |  |  |  |         cmp.l 132(sp),d0
   16ee2:	|           |  |  |  |     ,-- beq.w 16f74 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16ee6:	|           |  |  |  |     |   movea.l 1cc0a <currentFloor>,a0
   16eec:	|           |  |  |  |     |   move.l 12(a0),d1
   16ef0:	|           |  |  |  |     |   move.l 132(sp),d0
   16ef4:	|           |  |  |  |     |   lsl.l #3,d0
   16ef6:	|           |  |  |  |     |   movea.l d1,a1
   16ef8:	|           |  |  |  |     |   adda.l d0,a1
   16efa:	|           |  |  |  |     |   movea.l 1cc0a <currentFloor>,a0
   16f00:	|           |  |  |  |     |   move.l 12(a0),d1
   16f04:	|           |  |  |  |     |   move.l 136(sp),d0
   16f08:	|           |  |  |  |     |   lsl.l #3,d0
   16f0a:	|           |  |  |  |     |   movea.l d1,a0
   16f0c:	|           |  |  |  |     |   adda.l d0,a0
   16f0e:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16f12:	|           |  |  |  |     |   move.l (a1),-(sp)
   16f14:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16f18:	|           |  |  |  |     |   move.l (a0),-(sp)
   16f1a:	|           |  |  |  |     |   jsr 167a6 <polysShareSide>
   16f20:	|           |  |  |  |     |   lea 16(sp),sp
   16f24:	|           |  |  |  |     |   tst.w d0
   16f26:	|           |  |  |  |  ,--|-- beq.w 16fba <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16f2a:	|           |  |  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   16f30:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16f34:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f38:	|           |  |  |  |  |  |   add.l d0,d0
   16f3a:	|           |  |  |  |  |  |   add.l d0,d0
   16f3c:	|           |  |  |  |  |  |   movea.l d1,a0
   16f3e:	|           |  |  |  |  |  |   adda.l d0,a0
   16f40:	|           |  |  |  |  |  |   move.l (a0),d1
   16f42:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f46:	|           |  |  |  |  |  |   add.l d0,d0
   16f48:	|           |  |  |  |  |  |   add.l d0,d0
   16f4a:	|           |  |  |  |  |  |   movea.l d1,a0
   16f4c:	|           |  |  |  |  |  |   adda.l d0,a0
   16f4e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16f52:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f56:	|           |  |  |  |  |  |   add.l d0,d0
   16f58:	|           |  |  |  |  |  |   add.l d0,d0
   16f5a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16f5e:	|           |  |  |  |  |  |   adda.l d0,a0
   16f60:	|           |  |  |  |  |  |   move.l (a0),d1
   16f62:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f66:	|           |  |  |  |  |  |   add.l d0,d0
   16f68:	|           |  |  |  |  |  |   add.l d0,d0
   16f6a:	|           |  |  |  |  |  |   movea.l d1,a0
   16f6c:	|           |  |  |  |  |  |   adda.l d0,a0
   16f6e:	|           |  |  |  |  |  |   moveq #1,d1
   16f70:	|           |  |  |  |  |  |   move.l d1,(a0)
   16f72:	|           |  |  |  |  +--|-- bra.s 16fba <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16f74:	|           |  |  |  |  |  '-> movea.l 1cc0a <currentFloor>,a0
   16f7a:	|           |  |  |  |  |      move.l 16(a0),d1
   16f7e:	|           |  |  |  |  |      move.l 136(sp),d0
   16f82:	|           |  |  |  |  |      add.l d0,d0
   16f84:	|           |  |  |  |  |      add.l d0,d0
   16f86:	|           |  |  |  |  |      movea.l d1,a0
   16f88:	|           |  |  |  |  |      adda.l d0,a0
   16f8a:	|           |  |  |  |  |      move.l (a0),d1
   16f8c:	|           |  |  |  |  |      move.l 132(sp),d0
   16f90:	|           |  |  |  |  |      add.l d0,d0
   16f92:	|           |  |  |  |  |      add.l d0,d0
   16f94:	|           |  |  |  |  |      movea.l d1,a0
   16f96:	|           |  |  |  |  |      adda.l d0,a0
   16f98:	|           |  |  |  |  |      moveq #-2,d0
   16f9a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16f9c:	|           |  |  |  |  |      move.l 136(sp),d0
   16fa0:	|           |  |  |  |  |      add.l d0,d0
   16fa2:	|           |  |  |  |  |      add.l d0,d0
   16fa4:	|           |  |  |  |  |      movea.l 62(sp),a0
   16fa8:	|           |  |  |  |  |      adda.l d0,a0
   16faa:	|           |  |  |  |  |      move.l (a0),d1
   16fac:	|           |  |  |  |  |      move.l 132(sp),d0
   16fb0:	|           |  |  |  |  |      add.l d0,d0
   16fb2:	|           |  |  |  |  |      add.l d0,d0
   16fb4:	|           |  |  |  |  |      movea.l d1,a0
   16fb6:	|           |  |  |  |  |      adda.l d0,a0
   16fb8:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16fba:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16fbe:	|           |  |  |  '-------> movea.l 1cc0a <currentFloor>,a0
   16fc4:	|           |  |  |            move.l 8(a0),d0
   16fc8:	|           |  |  |            cmp.l 132(sp),d0
   16fcc:	|           |  |  '----------- bgt.w 16eda <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fd0:	|           |  |               addq.l #1,136(sp)
   16fd4:	|           |  '-------------> movea.l 1cc0a <currentFloor>,a0
   16fda:	|           |                  move.l 8(a0),d0
   16fde:	|           |                  cmp.l 136(sp),d0
   16fe2:	|           '----------------- bgt.w 16ed2 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16fe6:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16fea:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16fee:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ff2:	|  |                           clr.l 136(sp)
   16ff6:	|  |     ,-------------------- bra.w 1714c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ffa:	|  |  ,--|-------------------> clr.l 132(sp)
   16ffe:	|  |  |  |     ,-------------- bra.w 17136 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17002:	|  |  |  |  ,--|-------------> movea.l 1cc0a <currentFloor>,a0
   17008:	|  |  |  |  |  |               move.l 16(a0),d1
   1700c:	|  |  |  |  |  |               move.l 136(sp),d0
   17010:	|  |  |  |  |  |               add.l d0,d0
   17012:	|  |  |  |  |  |               add.l d0,d0
   17014:	|  |  |  |  |  |               movea.l d1,a0
   17016:	|  |  |  |  |  |               adda.l d0,a0
   17018:	|  |  |  |  |  |               move.l (a0),d1
   1701a:	|  |  |  |  |  |               move.l 132(sp),d0
   1701e:	|  |  |  |  |  |               add.l d0,d0
   17020:	|  |  |  |  |  |               add.l d0,d0
   17022:	|  |  |  |  |  |               movea.l d1,a0
   17024:	|  |  |  |  |  |               adda.l d0,a0
   17026:	|  |  |  |  |  |               move.l (a0),d0
   17028:	|  |  |  |  |  |               moveq #-1,d1
   1702a:	|  |  |  |  |  |               cmp.l d0,d1
   1702c:	|  |  |  |  |  |  ,----------- bne.w 17132 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17030:	|  |  |  |  |  |  |            clr.l 122(sp)
   17034:	|  |  |  |  |  |  |     ,----- bra.w 17120 <setFloor+0x6d2>
						if (d != i && d != j) {
   17038:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   1703c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17040:	|  |  |  |  |  |  |  |  |  ,-- beq.w 1711c <setFloor+0x6ce>
   17044:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   17048:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   1704c:	|  |  |  |  |  |  |  |  |  +-- beq.w 1711c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17050:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   17056:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1705a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1705e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17060:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17062:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17064:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17066:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17068:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1706c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1706e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17070:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17072:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17074:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17076:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1707a:	|  |  |  |  |  |  |  |  |  +-- bne.w 1711c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1707e:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   17084:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17088:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1708c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17090:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17092:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17094:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17096:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1709a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1709c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1709e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170a0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170a2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   170a4:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1711c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   170a6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   170aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ae:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170b2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170b4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170b6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170bc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170be:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170c0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170c2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   170c4:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   170c8:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1711c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   170ca:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc0a <currentFloor>,a0
   170d0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   170d4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170d8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170da:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170dc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170de:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170e0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170e2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170e6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170e8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ea:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170ec:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170ee:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   170f2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170fa:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170fe:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17100:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17102:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17106:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17108:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1710a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1710c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1710e:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   17112:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17114:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   17116:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1711c:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   17120:	|  |  |  |  |  |  |  |  '----> movea.l 1cc0a <currentFloor>,a0
   17126:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1712a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1712e:	|  |  |  |  |  |  |  '-------- bgt.w 17038 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17132:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   17136:	|  |  |  |  |  '-------------> movea.l 1cc0a <currentFloor>,a0
   1713c:	|  |  |  |  |                  move.l 8(a0),d0
   17140:	|  |  |  |  |                  cmp.l 132(sp),d0
   17144:	|  |  |  |  '----------------- bgt.w 17002 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17148:	|  |  |  |                     addq.l #1,136(sp)
   1714c:	|  |  |  '-------------------> movea.l 1cc0a <currentFloor>,a0
   17152:	|  |  |                        move.l 8(a0),d0
   17156:	|  |  |                        cmp.l 136(sp),d0
   1715a:	|  |  '----------------------- bgt.w 16ffa <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1715e:	|  |                           tst.w 130(sp)
   17162:	|  '-------------------------- bne.w 16fea <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17166:	|                              clr.l 136(sp)
   1716a:	|                          ,-- bra.s 17192 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1716c:	|                       ,--|-> move.l 136(sp),d0
   17170:	|                       |  |   add.l d0,d0
   17172:	|                       |  |   add.l d0,d0
   17174:	|                       |  |   movea.l 62(sp),a0
   17178:	|                       |  |   adda.l d0,a0
   1717a:	|                       |  |   move.l (a0),54(sp)
   1717e:	|                       |  |   move.l 1caf2 <SysBase>,d0
   17184:	|                       |  |   movea.l d0,a6
   17186:	|                       |  |   movea.l 54(sp),a1
   1718a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1718e:	|                       |  |   addq.l #1,136(sp)
   17192:	|                       |  '-> movea.l 1cc0a <currentFloor>,a0
   17198:	|                       |      move.l 8(a0),d0
   1719c:	|                       |      cmp.l 136(sp),d0
   171a0:	|                       '----- bgt.s 1716c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   171a2:	|                              move.l 62(sp),58(sp)
   171a8:	|                              move.l 1caf2 <SysBase>,d0
   171ae:	|                              movea.l d0,a6
   171b0:	|                              movea.l 58(sp),a1
   171b4:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   171b8:	|                              clr.l 62(sp)

	return TRUE;
   171bc:	|                              moveq #1,d0
}
   171be:	'----------------------------> movea.l (sp)+,a2
   171c0:	                               movea.l (sp)+,a6
   171c2:	                               lea 132(sp),sp
   171c6:	                               rts

000171c8 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   171c8:	jsr 166b6 <killFloor>
	noFloor ();
   171ce:	jsr 165be <noFloor>
   171d4:	nop
   171d6:	rts

000171d8 <WaitVbl>:
void WaitVbl() {
   171d8:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   171da:	   ,-> movea.l #14675972,a0
   171e0:	   |   move.l (a0),d0
   171e2:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   171e4:	   |   move.l (sp),d0
   171e6:	   |   andi.l #130816,d0
   171ec:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   171ee:	   |   move.l (sp),d0
   171f0:	   |   cmpi.l #76800,d0
   171f6:	   '-- beq.s 171da <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   171f8:	,----> movea.l #14675972,a0
   171fe:	|      move.l (a0),d0
   17200:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17204:	|      move.l 4(sp),d0
   17208:	|      andi.l #130816,d0
   1720e:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17212:	|      move.l 4(sp),d0
   17216:	|      cmpi.l #76800,d0
   1721c:	|  ,-- beq.s 17220 <WaitVbl+0x48>
	while (1) {
   1721e:	'--|-- bra.s 171f8 <WaitVbl+0x20>
			break;
   17220:	   '-> nop
}
   17222:	       nop
   17224:	       addq.l #8,sp
   17226:	       rts

00017228 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17228:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1722a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1722e:	   ,-- bra.s 17240 <memset+0x18>
		*ptr++ = val;
   17230:	,--|-> move.l (sp),d0
   17232:	|  |   move.l d0,d1
   17234:	|  |   addq.l #1,d1
   17236:	|  |   move.l d1,(sp)
   17238:	|  |   move.l 12(sp),d1
   1723c:	|  |   movea.l d0,a0
   1723e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17240:	|  '-> move.l 16(sp),d0
   17244:	|      move.l d0,d1
   17246:	|      subq.l #1,d1
   17248:	|      move.l d1,16(sp)
   1724c:	|      tst.l d0
   1724e:	'----- bne.s 17230 <memset+0x8>
	return dest;
   17250:	       move.l 8(sp),d0
}
   17254:	       addq.l #4,sp
   17256:	       rts

00017258 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17258:	       subq.l #8,sp
   1725a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1725c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17262:	       move.l 20(sp),4(sp)
	while(len--)
   17268:	   ,-- bra.s 1728a <memcpy+0x32>
		*d++ = *s++;
   1726a:	,--|-> move.l 4(sp),d1
   1726e:	|  |   move.l d1,d0
   17270:	|  |   addq.l #1,d0
   17272:	|  |   move.l d0,4(sp)
   17276:	|  |   move.l 8(sp),d0
   1727a:	|  |   move.l d0,d2
   1727c:	|  |   addq.l #1,d2
   1727e:	|  |   move.l d2,8(sp)
   17282:	|  |   movea.l d1,a0
   17284:	|  |   move.b (a0),d1
   17286:	|  |   movea.l d0,a0
   17288:	|  |   move.b d1,(a0)
	while(len--)
   1728a:	|  '-> move.l 24(sp),d0
   1728e:	|      move.l d0,d1
   17290:	|      subq.l #1,d1
   17292:	|      move.l d1,24(sp)
   17296:	|      tst.l d0
   17298:	'----- bne.s 1726a <memcpy+0x12>
	return dest;
   1729a:	       move.l 16(sp),d0
}
   1729e:	       move.l (sp)+,d2
   172a0:	       addq.l #8,sp
   172a2:	       rts

000172a4 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   172a4:	       lea -128(sp),sp
   172a8:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172ac:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4b1f>,d0
   172b2:	       cmpi.w #20153,d0
   172b6:	   ,-- beq.s 172da <KPrintF+0x36>
   172b8:	   |   cmpi.w #-24562,d0
   172bc:	   +-- beq.s 172da <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   172be:	   |   movea.l 1caf2 <SysBase>,a6
   172c4:	   |   movea.l 144(sp),a0
   172c8:	   |   lea 148(sp),a1
   172cc:	   |   lea 17d38 <KPutCharX>,a2
   172d2:	   |   suba.l a3,a3
   172d4:	   |   jsr -522(a6)
}
   172d8:	,--|-- bra.s 17304 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   172da:	|  '-> movea.l 1caf2 <SysBase>,a6
   172e0:	|      movea.l 144(sp),a0
   172e4:	|      lea 148(sp),a1
   172e8:	|      lea 17d46 <PutChar>,a2
   172ee:	|      lea 12(sp),a3
   172f2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   172f6:	|      move.l a3,-(sp)
   172f8:	|      pea 56 <_start+0x56>
   172fc:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4b1f>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17302:	|      addq.l #8,sp
}
   17304:	'----> movem.l (sp)+,a2-a3/a6
   17308:	       lea 128(sp),sp
   1730c:	       rts

0001730e <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1730e:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17310:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17316:	       movea.l (sp),a0
   17318:	       move.w (a0),d0
   1731a:	       cmpi.w #20153,d0
   1731e:	   ,-- beq.s 1732a <debug_cmd+0x1c>
   17320:	   |   movea.l (sp),a0
   17322:	   |   move.w (a0),d0
   17324:	   |   cmpi.w #-24562,d0
   17328:	,--|-- bne.s 17348 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1732a:	|  '-> move.l 20(sp),-(sp)
   1732e:	|      move.l 20(sp),-(sp)
   17332:	|      move.l 20(sp),-(sp)
   17336:	|      move.l 20(sp),-(sp)
   1733a:	|      pea 58 <_start+0x58>
   1733e:	|      movea.l 20(sp),a0
   17342:	|      jsr (a0)
   17344:	|      lea 20(sp),sp
	}
}
   17348:	'----> nop
   1734a:	       addq.l #4,sp
   1734c:	       rts

0001734e <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1734e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17350:	   ,-- bra.s 17372 <my_strncpy+0x24>
		*destination++ = *source++;
   17352:	,--|-> move.l 12(sp),d1
   17356:	|  |   move.l d1,d0
   17358:	|  |   addq.l #1,d0
   1735a:	|  |   move.l d0,12(sp)
   1735e:	|  |   move.l 8(sp),d0
   17362:	|  |   move.l d0,d2
   17364:	|  |   addq.l #1,d2
   17366:	|  |   move.l d2,8(sp)
   1736a:	|  |   movea.l d1,a0
   1736c:	|  |   move.b (a0),d1
   1736e:	|  |   movea.l d0,a0
   17370:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17372:	|  '-> movea.l 12(sp),a0
   17376:	|      move.b (a0),d0
   17378:	|  ,-- beq.s 17380 <my_strncpy+0x32>
   1737a:	|  |   subq.l #1,16(sp)
   1737e:	'--|-- bne.s 17352 <my_strncpy+0x4>
	*destination = '\0';
   17380:	   '-> movea.l 8(sp),a0
   17384:	       clr.b (a0)
}
   17386:	       nop
   17388:	       move.l (sp)+,d2
   1738a:	       rts

0001738c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1738c:	    lea -60(sp),sp
   17390:	    movea.l 72(sp),a1
   17394:	    movea.l 76(sp),a0
   17398:	    move.l 80(sp),d1
   1739c:	    move.l 84(sp),d0
   173a0:	    movea.w a1,a1
   173a2:	    move.w a1,8(sp)
   173a6:	    movea.w a0,a0
   173a8:	    move.w a0,6(sp)
   173ac:	    move.w d1,d1
   173ae:	    move.w d1,4(sp)
   173b2:	    move.w d0,d0
   173b4:	    move.w d0,2(sp)
	struct debug_resource resource = {
   173b8:	    lea 10(sp),a0
   173bc:	    clr.l (a0)
   173be:	    addq.l #4,a0
   173c0:	    clr.l (a0)
   173c2:	    addq.l #4,a0
   173c4:	    clr.l (a0)
   173c6:	    addq.l #4,a0
   173c8:	    clr.l (a0)
   173ca:	    addq.l #4,a0
   173cc:	    clr.l (a0)
   173ce:	    addq.l #4,a0
   173d0:	    clr.l (a0)
   173d2:	    addq.l #4,a0
   173d4:	    clr.l (a0)
   173d6:	    addq.l #4,a0
   173d8:	    clr.l (a0)
   173da:	    addq.l #4,a0
   173dc:	    clr.l (a0)
   173de:	    addq.l #4,a0
   173e0:	    clr.l (a0)
   173e2:	    addq.l #4,a0
   173e4:	    clr.l (a0)
   173e6:	    addq.l #4,a0
   173e8:	    clr.l (a0)
   173ea:	    addq.l #4,a0
   173ec:	    clr.w (a0)
   173ee:	    addq.l #2,a0
		.address = (unsigned int)addr,
   173f0:	    move.l 64(sp),d0
	struct debug_resource resource = {
   173f4:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   173f8:	    move.w 8(sp),d0
   173fc:	,-- bpl.s 17400 <debug_register_bitmap+0x74>
   173fe:	|   addq.w #7,d0
   17400:	'-> asr.w #3,d0
   17402:	    movea.w d0,a0
   17404:	    movea.w 6(sp),a1
   17408:	    move.l a1,-(sp)
   1740a:	    move.l a0,-(sp)
   1740c:	    jsr 17c30 <__mulsi3>
   17412:	    addq.l #8,sp
   17414:	    movea.w 4(sp),a0
   17418:	    move.l a0,-(sp)
   1741a:	    move.l d0,-(sp)
   1741c:	    jsr 17c30 <__mulsi3>
   17422:	    addq.l #8,sp
	struct debug_resource resource = {
   17424:	    move.l d0,14(sp)
   17428:	    move.w 2(sp),52(sp)
   1742e:	    move.w 8(sp),54(sp)
   17434:	    move.w 6(sp),56(sp)
   1743a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17440:	    moveq #0,d0
   17442:	    move.w 2(sp),d0
   17446:	    moveq #2,d1
   17448:	    and.l d1,d0
   1744a:	,-- beq.s 17456 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1744c:	|   move.l 14(sp),d0
   17450:	|   add.l d0,d0
   17452:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17456:	'-> pea 20 <_start+0x20>
   1745a:	    move.l 72(sp),-(sp)
   1745e:	    lea 18(sp),a0
   17462:	    move.l a0,d0
   17464:	    addq.l #8,d0
   17466:	    move.l d0,-(sp)
   17468:	    jsr 1734e <my_strncpy>
   1746e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17472:	    lea 10(sp),a0
   17476:	    clr.l -(sp)
   17478:	    clr.l -(sp)
   1747a:	    move.l a0,-(sp)
   1747c:	    pea 4 <_start+0x4>
   17480:	    jsr 1730e <debug_cmd>
   17486:	    lea 16(sp),sp
}
   1748a:	    nop
   1748c:	    lea 60(sp),sp
   17490:	    rts

00017492 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17492:	lea -12(sp),sp
   17496:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17498:	move.l 20(sp),12(sp)
   1749e:	move.l 24(sp),8(sp)
   174a4:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   174aa:	movea.l d0,a6
   174ac:	move.l 12(sp),d0
   174b0:	move.l 8(sp),d1
   174b4:	jsr -66(a6)
   174b8:	move.l d0,4(sp)
   174bc:	move.l 4(sp),d0
}
   174c0:	movea.l (sp)+,a6
   174c2:	lea 12(sp),sp
   174c6:	rts

000174c8 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   174c8:	lea -32(sp),sp
   174cc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   174d0:	move.l 48(sp),36(sp)
   174d6:	move.l 52(sp),40(sp)
   174dc:	move.l 56(sp),28(sp)
   174e2:	move.l 60(sp),32(sp)
   174e8:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   174ee:	movea.l d0,a6
   174f0:	move.l 36(sp),d0
   174f4:	move.l 40(sp),d1
   174f8:	move.l 28(sp),d2
   174fc:	move.l 32(sp),d3
   17500:	jsr -66(a6)
   17504:	move.l d0,12(sp)
   17508:	move.l d1,16(sp)
   1750c:	move.l 12(sp),20(sp)
   17512:	move.l 16(sp),24(sp)
   17518:	move.l 20(sp),d0
   1751c:	move.l 24(sp),d1
}
   17520:	movem.l (sp)+,d2-d3/a6
   17524:	lea 32(sp),sp
   17528:	rts

0001752a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1752a:	lea -32(sp),sp
   1752e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17532:	move.l 48(sp),36(sp)
   17538:	move.l 52(sp),40(sp)
   1753e:	move.l 56(sp),28(sp)
   17544:	move.l 60(sp),32(sp)
   1754a:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   17550:	movea.l d0,a6
   17552:	move.l 36(sp),d0
   17556:	move.l 40(sp),d1
   1755a:	move.l 28(sp),d2
   1755e:	move.l 32(sp),d3
   17562:	jsr -84(a6)
   17566:	move.l d0,12(sp)
   1756a:	move.l d1,16(sp)
   1756e:	move.l 12(sp),20(sp)
   17574:	move.l 16(sp),24(sp)
   1757a:	move.l 20(sp),d0
   1757e:	move.l 24(sp),d1
}
   17582:	movem.l (sp)+,d2-d3/a6
   17586:	lea 32(sp),sp
   1758a:	rts

0001758c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1758c:	lea -12(sp),sp
   17590:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17592:	move.l 20(sp),12(sp)
   17598:	move.l 24(sp),8(sp)
   1759e:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   175a4:	movea.l d0,a6
   175a6:	move.l 12(sp),d0
   175aa:	move.l 8(sp),d1
   175ae:	jsr -84(a6)
   175b2:	move.l d0,4(sp)
   175b6:	move.l 4(sp),d0
}
   175ba:	movea.l (sp)+,a6
   175bc:	lea 12(sp),sp
   175c0:	rts

000175c2 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   175c2:	lea -12(sp),sp
   175c6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175c8:	move.l 20(sp),12(sp)
   175ce:	move.l 24(sp),8(sp)
   175d4:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   175da:	movea.l d0,a6
   175dc:	move.l 12(sp),d0
   175e0:	move.l 8(sp),d1
   175e4:	jsr -42(a6)
   175e8:	move.l d0,4(sp)
   175ec:	move.l 4(sp),d0
}
   175f0:	movea.l (sp)+,a6
   175f2:	lea 12(sp),sp
   175f6:	rts

000175f8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   175f8:	lea -20(sp),sp
   175fc:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   175fe:	move.l 28(sp),20(sp)
   17604:	move.l 1cb0e <MathIeeeDoubTransBase>,d0
   1760a:	movea.l d0,a6
   1760c:	move.l 20(sp),d0
   17610:	jsr -108(a6)
   17614:	move.l d0,4(sp)
   17618:	move.l d1,8(sp)
   1761c:	move.l 4(sp),12(sp)
   17622:	move.l 8(sp),16(sp)
   17628:	move.l 12(sp),d0
   1762c:	move.l 16(sp),d1
}
   17630:	movea.l (sp)+,a6
   17632:	lea 20(sp),sp
   17636:	rts

00017638 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17638:	lea -12(sp),sp
   1763c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1763e:	move.l 20(sp),8(sp)
   17644:	move.l 24(sp),12(sp)
   1764a:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   17650:	movea.l d0,a6
   17652:	move.l 8(sp),d0
   17656:	move.l 12(sp),d1
   1765a:	jsr -30(a6)
   1765e:	move.l d0,4(sp)
   17662:	move.l 4(sp),d0
}
   17666:	movea.l (sp)+,a6
   17668:	lea 12(sp),sp
   1766c:	rts

0001766e <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1766e:	subq.l #8,sp
   17670:	move.l a6,-(sp)
	return IEEESPFix(value);
   17672:	move.l 16(sp),8(sp)
   17678:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   1767e:	movea.l d0,a6
   17680:	move.l 8(sp),d0
   17684:	jsr -30(a6)
   17688:	move.l d0,4(sp)
   1768c:	move.l 4(sp),d0
}
   17690:	movea.l (sp)+,a6
   17692:	addq.l #8,sp
   17694:	rts

00017696 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17696:	lea -20(sp),sp
   1769a:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1769c:	move.l 28(sp),20(sp)
   176a2:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   176a8:	movea.l d0,a6
   176aa:	move.l 20(sp),d0
   176ae:	jsr -36(a6)
   176b2:	move.l d0,4(sp)
   176b6:	move.l d1,8(sp)
   176ba:	move.l 4(sp),12(sp)
   176c0:	move.l 8(sp),16(sp)
   176c6:	move.l 12(sp),d0
   176ca:	move.l 16(sp),d1
}
   176ce:	movea.l (sp)+,a6
   176d0:	lea 20(sp),sp
   176d4:	rts

000176d6 <__floatsisf>:

FLOAT __floatsisf(int i) {
   176d6:	subq.l #8,sp
   176d8:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   176da:	move.l 16(sp),8(sp)
   176e0:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   176e6:	movea.l d0,a6
   176e8:	move.l 8(sp),d0
   176ec:	jsr -36(a6)
   176f0:	move.l d0,4(sp)
   176f4:	move.l 4(sp),d0
}
   176f8:	movea.l (sp)+,a6
   176fa:	addq.l #8,sp
   176fc:	rts

000176fe <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   176fe:	subq.l #8,sp
   17700:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17702:	move.l 16(sp),8(sp)
   17708:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   1770e:	movea.l d0,a6
   17710:	move.l 8(sp),d0
   17714:	jsr -36(a6)
   17718:	move.l d0,4(sp)
   1771c:	move.l 4(sp),d0
}
   17720:	movea.l (sp)+,a6
   17722:	addq.l #8,sp
   17724:	rts

00017726 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17726:	lea -32(sp),sp
   1772a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1772e:	move.l 48(sp),36(sp)
   17734:	move.l 52(sp),40(sp)
   1773a:	move.l 56(sp),28(sp)
   17740:	move.l 60(sp),32(sp)
   17746:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   1774c:	movea.l d0,a6
   1774e:	move.l 36(sp),d0
   17752:	move.l 40(sp),d1
   17756:	move.l 28(sp),d2
   1775a:	move.l 32(sp),d3
   1775e:	jsr -78(a6)
   17762:	move.l d0,12(sp)
   17766:	move.l d1,16(sp)
   1776a:	move.l 12(sp),20(sp)
   17770:	move.l 16(sp),24(sp)
   17776:	move.l 20(sp),d0
   1777a:	move.l 24(sp),d1
}
   1777e:	movem.l (sp)+,d2-d3/a6
   17782:	lea 32(sp),sp
   17786:	rts

00017788 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17788:	lea -12(sp),sp
   1778c:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1778e:	move.l 20(sp),12(sp)
   17794:	move.l 24(sp),8(sp)
   1779a:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   177a0:	movea.l d0,a6
   177a2:	move.l 12(sp),d0
   177a6:	move.l 8(sp),d1
   177aa:	jsr -78(a6)
   177ae:	move.l d0,4(sp)
   177b2:	move.l 4(sp),d0
}
   177b6:	movea.l (sp)+,a6
   177b8:	lea 12(sp),sp
   177bc:	rts

000177be <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   177be:	lea -12(sp),sp
   177c2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177c4:	move.l 20(sp),12(sp)
   177ca:	move.l 24(sp),8(sp)
   177d0:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   177d6:	movea.l d0,a6
   177d8:	move.l 12(sp),d0
   177dc:	move.l 8(sp),d1
   177e0:	jsr -42(a6)
   177e4:	move.l d0,4(sp)
   177e8:	move.l 4(sp),d0
}
   177ec:	movea.l (sp)+,a6
   177ee:	lea 12(sp),sp
   177f2:	rts

000177f4 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   177f4:	lea -20(sp),sp
   177f8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   177fc:	move.l 36(sp),24(sp)
   17802:	move.l 40(sp),28(sp)
   17808:	move.l 44(sp),16(sp)
   1780e:	move.l 48(sp),20(sp)
   17814:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   1781a:	movea.l d0,a6
   1781c:	move.l 24(sp),d0
   17820:	move.l 28(sp),d1
   17824:	move.l 16(sp),d2
   17828:	move.l 20(sp),d3
   1782c:	jsr -42(a6)
   17830:	move.l d0,12(sp)
   17834:	move.l 12(sp),d0
}
   17838:	movem.l (sp)+,d2-d3/a6
   1783c:	lea 20(sp),sp
   17840:	rts

00017842 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17842:	lea -12(sp),sp
   17846:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17848:	move.l 20(sp),12(sp)
   1784e:	move.l 24(sp),8(sp)
   17854:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   1785a:	movea.l d0,a6
   1785c:	move.l 12(sp),d0
   17860:	move.l 8(sp),d1
   17864:	jsr -42(a6)
   17868:	move.l d0,4(sp)
   1786c:	move.l 4(sp),d0
}
   17870:	movea.l (sp)+,a6
   17872:	lea 12(sp),sp
   17876:	rts

00017878 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17878:	lea -12(sp),sp
   1787c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1787e:	move.l 20(sp),12(sp)
   17884:	move.l 24(sp),8(sp)
   1788a:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   17890:	movea.l d0,a6
   17892:	move.l 12(sp),d0
   17896:	move.l 8(sp),d1
   1789a:	jsr -42(a6)
   1789e:	move.l d0,4(sp)
   178a2:	move.l 4(sp),d0
}
   178a6:	movea.l (sp)+,a6
   178a8:	lea 12(sp),sp
   178ac:	rts

000178ae <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   178ae:	lea -20(sp),sp
   178b2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   178b6:	move.l 36(sp),24(sp)
   178bc:	move.l 40(sp),28(sp)
   178c2:	move.l 44(sp),16(sp)
   178c8:	move.l 48(sp),20(sp)
   178ce:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   178d4:	movea.l d0,a6
   178d6:	move.l 24(sp),d0
   178da:	move.l 28(sp),d1
   178de:	move.l 16(sp),d2
   178e2:	move.l 20(sp),d3
   178e6:	jsr -42(a6)
   178ea:	move.l d0,12(sp)
   178ee:	move.l 12(sp),d0
}
   178f2:	movem.l (sp)+,d2-d3/a6
   178f6:	lea 20(sp),sp
   178fa:	rts

000178fc <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   178fc:	lea -12(sp),sp
   17900:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17902:	move.l 20(sp),12(sp)
   17908:	move.l 24(sp),8(sp)
   1790e:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   17914:	movea.l d0,a6
   17916:	move.l 12(sp),d0
   1791a:	move.l 8(sp),d1
   1791e:	jsr -42(a6)
   17922:	move.l d0,4(sp)
   17926:	move.l 4(sp),d0
}
   1792a:	movea.l (sp)+,a6
   1792c:	lea 12(sp),sp
   17930:	rts

00017932 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17932:	lea -12(sp),sp
   17936:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17938:	move.l 20(sp),12(sp)
   1793e:	move.l 24(sp),8(sp)
   17944:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   1794a:	movea.l d0,a6
   1794c:	move.l 12(sp),d0
   17950:	move.l 8(sp),d1
   17954:	jsr -42(a6)
   17958:	move.l d0,4(sp)
   1795c:	move.l 4(sp),d0
}
   17960:	movea.l (sp)+,a6
   17962:	lea 12(sp),sp
   17966:	rts

00017968 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17968:	lea -32(sp),sp
   1796c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17970:	move.l 48(sp),36(sp)
   17976:	move.l 52(sp),40(sp)
   1797c:	move.l 56(sp),28(sp)
   17982:	move.l 60(sp),32(sp)
   17988:	move.l 1cb0a <MathIeeeDoubBasBase>,d0
   1798e:	movea.l d0,a6
   17990:	move.l 36(sp),d0
   17994:	move.l 40(sp),d1
   17998:	move.l 28(sp),d2
   1799c:	move.l 32(sp),d3
   179a0:	jsr -72(a6)
   179a4:	move.l d0,12(sp)
   179a8:	move.l d1,16(sp)
   179ac:	move.l 12(sp),20(sp)
   179b2:	move.l 16(sp),24(sp)
   179b8:	move.l 20(sp),d0
   179bc:	move.l 24(sp),d1
}
   179c0:	movem.l (sp)+,d2-d3/a6
   179c4:	lea 32(sp),sp
   179c8:	rts

000179ca <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   179ca:	lea -12(sp),sp
   179ce:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   179d0:	move.l 20(sp),12(sp)
   179d6:	move.l 24(sp),8(sp)
   179dc:	move.l 1cb02 <MathIeeeSingBasBase>,d0
   179e2:	movea.l d0,a6
   179e4:	move.l 12(sp),d0
   179e8:	move.l 8(sp),d1
   179ec:	jsr -72(a6)
   179f0:	move.l d0,4(sp)
   179f4:	move.l 4(sp),d0
}
   179f8:	movea.l (sp)+,a6
   179fa:	lea 12(sp),sp
   179fe:	rts

00017a00 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17a00:	lea -12(sp),sp
   17a04:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17a06:	move.l 20(sp),8(sp)
   17a0c:	move.l 24(sp),12(sp)
   17a12:	move.l 1cb0e <MathIeeeDoubTransBase>,d0
   17a18:	movea.l d0,a6
   17a1a:	move.l 8(sp),d0
   17a1e:	move.l 12(sp),d1
   17a22:	jsr -102(a6)
   17a26:	move.l d0,4(sp)
   17a2a:	move.l 4(sp),d0
}
   17a2e:	movea.l (sp)+,a6
   17a30:	lea 12(sp),sp
   17a34:	rts

00017a36 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17a36:	       lea -24(sp),sp
   17a3a:	       move.l a6,-(sp)
    if (x > 0) {
   17a3c:	       clr.l -(sp)
   17a3e:	       move.l 40(sp),-(sp)
   17a42:	       jsr 17842 <__gtsf2>
   17a48:	       addq.l #8,sp
   17a4a:	       tst.l d0
   17a4c:	   ,-- ble.s 17a7e <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a4e:	   |   move.l 36(sp),-(sp)
   17a52:	   |   move.l 36(sp),-(sp)
   17a56:	   |   jsr 1758c <__divsf3>
   17a5c:	   |   addq.l #8,sp
   17a5e:	   |   move.l d0,8(sp)
   17a62:	   |   move.l 1cb06 <MathIeeeSingTransBase>,d0
   17a68:	   |   movea.l d0,a6
   17a6a:	   |   move.l 8(sp),d0
   17a6e:	   |   jsr -30(a6)
   17a72:	   |   move.l d0,4(sp)
   17a76:	   |   move.l 4(sp),d0
   17a7a:	,--|-- bra.w 17bde <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17a7e:	|  '-> clr.l -(sp)
   17a80:	|      move.l 40(sp),-(sp)
   17a84:	|      jsr 178fc <__ltsf2>
   17a8a:	|      addq.l #8,sp
   17a8c:	|      tst.l d0
   17a8e:	|  ,-- bge.s 17b02 <atan2f+0xcc>
   17a90:	|  |   clr.l -(sp)
   17a92:	|  |   move.l 36(sp),-(sp)
   17a96:	|  |   jsr 177be <__gesf2>
   17a9c:	|  |   addq.l #8,sp
   17a9e:	|  |   tst.l d0
   17aa0:	|  +-- blt.s 17b02 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17aa2:	|  |   move.l 36(sp),-(sp)
   17aa6:	|  |   move.l 36(sp),-(sp)
   17aaa:	|  |   jsr 1758c <__divsf3>
   17ab0:	|  |   addq.l #8,sp
   17ab2:	|  |   move.l d0,24(sp)
   17ab6:	|  |   move.l 1cb06 <MathIeeeSingTransBase>,d0
   17abc:	|  |   movea.l d0,a6
   17abe:	|  |   move.l 24(sp),d0
   17ac2:	|  |   jsr -30(a6)
   17ac6:	|  |   move.l d0,20(sp)
   17aca:	|  |   move.l 20(sp),d0
   17ace:	|  |   move.l d0,-(sp)
   17ad0:	|  |   jsr 175f8 <__extendsfdf2>
   17ad6:	|  |   addq.l #4,sp
   17ad8:	|  |   move.l #1413754136,-(sp)
   17ade:	|  |   move.l #1074340347,-(sp)
   17ae4:	|  |   move.l d1,-(sp)
   17ae6:	|  |   move.l d0,-(sp)
   17ae8:	|  |   jsr 174c8 <__adddf3>
   17aee:	|  |   lea 16(sp),sp
   17af2:	|  |   move.l d1,-(sp)
   17af4:	|  |   move.l d0,-(sp)
   17af6:	|  |   jsr 17a00 <__truncdfsf2>
   17afc:	|  |   addq.l #8,sp
   17afe:	+--|-- bra.w 17bde <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17b02:	|  '-> clr.l -(sp)
   17b04:	|      move.l 40(sp),-(sp)
   17b08:	|      jsr 178fc <__ltsf2>
   17b0e:	|      addq.l #8,sp
   17b10:	|      tst.l d0
   17b12:	|  ,-- bge.s 17b84 <atan2f+0x14e>
   17b14:	|  |   clr.l -(sp)
   17b16:	|  |   move.l 36(sp),-(sp)
   17b1a:	|  |   jsr 178fc <__ltsf2>
   17b20:	|  |   addq.l #8,sp
   17b22:	|  |   tst.l d0
   17b24:	|  +-- bge.s 17b84 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17b26:	|  |   move.l 36(sp),-(sp)
   17b2a:	|  |   move.l 36(sp),-(sp)
   17b2e:	|  |   jsr 1758c <__divsf3>
   17b34:	|  |   addq.l #8,sp
   17b36:	|  |   move.l d0,16(sp)
   17b3a:	|  |   move.l 1cb06 <MathIeeeSingTransBase>,d0
   17b40:	|  |   movea.l d0,a6
   17b42:	|  |   move.l 16(sp),d0
   17b46:	|  |   jsr -30(a6)
   17b4a:	|  |   move.l d0,12(sp)
   17b4e:	|  |   move.l 12(sp),d0
   17b52:	|  |   move.l d0,-(sp)
   17b54:	|  |   jsr 175f8 <__extendsfdf2>
   17b5a:	|  |   addq.l #4,sp
   17b5c:	|  |   move.l #1413754136,-(sp)
   17b62:	|  |   move.l #1074340347,-(sp)
   17b68:	|  |   move.l d1,-(sp)
   17b6a:	|  |   move.l d0,-(sp)
   17b6c:	|  |   jsr 17968 <__subdf3>
   17b72:	|  |   lea 16(sp),sp
   17b76:	|  |   move.l d1,-(sp)
   17b78:	|  |   move.l d0,-(sp)
   17b7a:	|  |   jsr 17a00 <__truncdfsf2>
   17b80:	|  |   addq.l #8,sp
   17b82:	+--|-- bra.s 17bde <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17b84:	|  '-> clr.l -(sp)
   17b86:	|      move.l 40(sp),-(sp)
   17b8a:	|      jsr 175c2 <__eqsf2>
   17b90:	|      addq.l #8,sp
   17b92:	|      tst.l d0
   17b94:	|  ,-- bne.s 17bb0 <atan2f+0x17a>
   17b96:	|  |   clr.l -(sp)
   17b98:	|  |   move.l 36(sp),-(sp)
   17b9c:	|  |   jsr 17842 <__gtsf2>
   17ba2:	|  |   addq.l #8,sp
   17ba4:	|  |   tst.l d0
   17ba6:	|  +-- ble.s 17bb0 <atan2f+0x17a>
        return PI / 2;
   17ba8:	|  |   move.l #1070141403,d0
   17bae:	+--|-- bra.s 17bde <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17bb0:	|  '-> clr.l -(sp)
   17bb2:	|      move.l 40(sp),-(sp)
   17bb6:	|      jsr 175c2 <__eqsf2>
   17bbc:	|      addq.l #8,sp
   17bbe:	|      tst.l d0
   17bc0:	|  ,-- bne.s 17bdc <atan2f+0x1a6>
   17bc2:	|  |   clr.l -(sp)
   17bc4:	|  |   move.l 36(sp),-(sp)
   17bc8:	|  |   jsr 178fc <__ltsf2>
   17bce:	|  |   addq.l #8,sp
   17bd0:	|  |   tst.l d0
   17bd2:	|  +-- bge.s 17bdc <atan2f+0x1a6>
        return -PI / 2;
   17bd4:	|  |   move.l #-1077342245,d0
   17bda:	+--|-- bra.s 17bde <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17bdc:	|  '-> moveq #0,d0
    }
}
   17bde:	'----> movea.l (sp)+,a6
   17be0:	       lea 24(sp),sp
   17be4:	       rts

00017be6 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17be6:	lea -24(sp),sp
   17bea:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17bec:	move.l 32(sp),20(sp)
   17bf2:	move.l 36(sp),24(sp)
   17bf8:	move.l 1cb0e <MathIeeeDoubTransBase>,d0
   17bfe:	movea.l d0,a6
   17c00:	move.l 20(sp),d0
   17c04:	move.l 24(sp),d1
   17c08:	jsr -96(a6)
   17c0c:	move.l d0,4(sp)
   17c10:	move.l d1,8(sp)
   17c14:	move.l 4(sp),12(sp)
   17c1a:	move.l 8(sp),16(sp)
   17c20:	move.l 12(sp),d0
   17c24:	move.l 16(sp),d1
}
   17c28:	movea.l (sp)+,a6
   17c2a:	lea 24(sp),sp
   17c2e:	rts

00017c30 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17c30:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17c34:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c38:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17c3c:	mulu.w 8(sp),d1
	addw	d1, d0
   17c40:	add.w d1,d0
	swap	d0
   17c42:	swap d0
	clrw	d0
   17c44:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c46:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c4a:	mulu.w 10(sp),d1
	addl	d1, d0
   17c4e:	add.l d1,d0
	rts
   17c50:	rts

00017c52 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c52:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c54:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c58:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c5c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c62:	   ,-- bcc.s 17c7a <__udivsi3+0x28>
	movel	d0, d2
   17c64:	   |   move.l d0,d2
	clrw	d2
   17c66:	   |   clr.w d2
	swap	d2
   17c68:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c6a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17c6c:	   |   move.w d2,d0
	swap	d0
   17c6e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17c70:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17c74:	   |   divu.w d1,d2
	movew	d2, d0
   17c76:	   |   move.w d2,d0
	jra	6f
   17c78:	,--|-- bra.s 17caa <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17c7a:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17c7c:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17c7e:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17c80:	|  |   cmpi.l #65536,d1
	jcc	4b
   17c86:	|  '-- bcc.s 17c7c <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17c88:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17c8a:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17c90:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17c92:	|      mulu.w d0,d1
	swap	d2
   17c94:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17c96:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17c98:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17c9a:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17c9c:	|  ,-- bne.s 17ca8 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17c9e:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17ca0:	|  +-- bcs.s 17ca8 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17ca2:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17ca6:	+--|-- bls.s 17caa <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17ca8:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17caa:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17cac:	       rts

00017cae <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17cae:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17cb0:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17cb2:	    move.l 12(sp),d1
	jpl	1f
   17cb6:	,-- bpl.s 17cbc <__divsi3+0xe>
	negl	d1
   17cb8:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17cba:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17cbc:	'-> move.l 8(sp),d0
	jpl	2f
   17cc0:	,-- bpl.s 17cc6 <__divsi3+0x18>
	negl	d0
   17cc2:	|   neg.l d0
	negb	d2
   17cc4:	|   neg.b d2

2:	movel	d1, sp@-
   17cc6:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cc8:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17cca:	    jsr 17c52 <__udivsi3>
	addql	#8, sp
   17cd0:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17cd2:	    tst.b d2
	jpl	3f
   17cd4:	,-- bpl.s 17cd8 <__divsi3+0x2a>
	negl	d0
   17cd6:	|   neg.l d0

3:	movel	sp@+, d2
   17cd8:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17cda:	    rts

00017cdc <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17cdc:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17ce0:	move.l 4(sp),d0
	movel	d1, sp@-
   17ce4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ce6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17ce8:	jsr 17cae <__divsi3>
	addql	#8, sp
   17cee:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cf0:	move.l 8(sp),d1
	movel	d1, sp@-
   17cf4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cf6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cf8:	jsr 17c30 <__mulsi3>
	addql	#8, sp
   17cfe:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d00:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d04:	sub.l d0,d1
	movel	d1, d0
   17d06:	move.l d1,d0
	rts
   17d08:	rts

00017d0a <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d0a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d0e:	move.l 4(sp),d0
	movel	d1, sp@-
   17d12:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d14:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17d16:	jsr 17c52 <__udivsi3>
	addql	#8, sp
   17d1c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d1e:	move.l 8(sp),d1
	movel	d1, sp@-
   17d22:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d24:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d26:	jsr 17c30 <__mulsi3>
	addql	#8, sp
   17d2c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d2e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d32:	sub.l d0,d1
	movel	d1, d0
   17d34:	move.l d1,d0
	rts
   17d36:	rts

00017d38 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17d38:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17d3a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17d3e:	jsr -516(a6)
    move.l (sp)+, a6
   17d42:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17d44:	rts

00017d46 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17d46:	move.b d0,(a3)+
	rts
   17d48:	rts
