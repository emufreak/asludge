
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4ca0 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1036e <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19c50 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 10386 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1036e <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19c50 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1036e <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19c50 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 139a2 <PutChar+0x4>
     35c:	|  |              |   jsr 12ed6 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19c58 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19c58 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19c58 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19c58 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19c58 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19c58 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19c58 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 139cc <PutChar+0x2e>
     834:	|   jsr 12ed6 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19c58 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 139e8 <PutChar+0x4a>
     8a6:	|   jsr 12ed6 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19c58 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19c58 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19c58 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19c58 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19c58 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19c58 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19c58 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19c58 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19c50 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19c58 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1036e <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19c58 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19c50 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19c50 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #80400,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19c50 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 13a1d <PutChar+0x7f>
     cea:	   |   jsr 12ed6 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 13888 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 13962 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13a3a <PutChar+0x9c>
     d66:	|      jsr 12ed6 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19c50 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19c50 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19c50 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19b2c <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 6510 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19b2c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19b30 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19b34 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 13a4d <PutChar+0xaf>
     de8:	jsr 12ed6 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -20(sp),sp
     df8:	             move.l a6,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
     dfa:	             move.l #14675968,8(sp)

  width /= 16;
     e02:	             move.l 28(sp),d0
     e06:	             movea.l d0,a0
     e08:	             cmpa.w #0,a0
     e0c:	         /-- bge.s e12 <CstBlankScreen+0x1e>
     e0e:	         |   lea 15(a0),a0
     e12:	         \-> move.l a0,d0
     e14:	             asr.l #4,d0
     e16:	             move.l d0,28(sp)

  WaitBlit();
     e1a:	             move.l 19c5c <GfxBase>,d0
     e20:	             movea.l d0,a6
     e22:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e26:	             clr.l 20(sp)
     e2a:	   /-------- bra.w f04 <CstBlankScreen+0x110>
    custom->bltafwm = 0xffff;
     e2e:	/--|-------> movea.l 8(sp),a0
     e32:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e38:	|  |         movea.l 8(sp),a0
     e3c:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e42:	|  |         movea.l 8(sp),a0
     e46:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e4c:	|  |         movea.l 8(sp),a0
     e50:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e56:	|  |         movea.l 8(sp),a0
     e5a:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e60:	|  |         movea.l 8(sp),a0
     e64:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e6a:	|  |         movea.l 8(sp),a0
     e6e:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e74:	|  |         movea.l 8(sp),a0
     e78:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     e7e:	|  |         move.l 19b4c <CstDrawBuffer>,d0
     e84:	|  |         move.l d0,16(sp)
    UWORD bltsize = height*64+width;    
     e88:	|  |         move.l 32(sp),d0
     e8c:	|  |         lsl.w #6,d0
     e8e:	|  |         move.l 28(sp),d1
     e92:	|  |         movea.w d0,a0
     e94:	|  |         adda.w d1,a0
     e96:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     e9a:	|  |         move.l 28(sp),d1
     e9e:	|  |         move.l 32(sp),d0
     ea2:	|  |         muls.w d1,d0
     ea4:	|  |         add.w d0,d0
     ea6:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     eaa:	|  |         clr.l 12(sp)
     eae:	|  |     /-- bra.s ee0 <CstBlankScreen+0xec>
    {            
      custom->bltdpt = (APTR) bltdpt;
     eb0:	|  |  /--|-> move.l 16(sp),d0
     eb4:	|  |  |  |   movea.l 8(sp),a0
     eb8:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ebc:	|  |  |  |   movea.l 8(sp),a0
     ec0:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     ec6:	|  |  |  |   move.l 19c5c <GfxBase>,d0
     ecc:	|  |  |  |   movea.l d0,a6
     ece:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ed2:	|  |  |  |   moveq #0,d0
     ed4:	|  |  |  |   move.w 4(sp),d0
     ed8:	|  |  |  |   add.l d0,16(sp)
    for(int i2=0;i2<5;i2++)
     edc:	|  |  |  |   addq.l #1,12(sp)
     ee0:	|  |  |  \-> moveq #4,d0
     ee2:	|  |  |      cmp.l 12(sp),d0
     ee6:	|  |  \----- bge.s eb0 <CstBlankScreen+0xbc>
    }

    WaitBlit();
     ee8:	|  |         move.l 19c5c <GfxBase>,d0
     eee:	|  |         movea.l d0,a6
     ef0:	|  |         jsr -228(a6)
    WaitVbl();
     ef4:	|  |         jsr 12dfe <WaitVbl>
    CstSwapGraphics();
     efa:	|  |         jsr 1108 <CstSwapGraphics>
  for(int i=0;i<2;i++) {
     f00:	|  |         addq.l #1,20(sp)
     f04:	|  \-------> moveq #1,d0
     f06:	|            cmp.l 20(sp),d0
     f0a:	\----------- bge.w e2e <CstBlankScreen+0x3a>
  }

}
     f0e:	             nop
     f10:	             nop
     f12:	             movea.l (sp)+,a6
     f14:	             lea 20(sp),sp
     f18:	             rts

00000f1a <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f1a:	       lea -52(sp),sp
     f1e:	       move.l a6,-(sp)
     f20:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f22:	       move.l #400,32(sp)
     f2a:	       moveq #2,d0
     f2c:	       move.l d0,28(sp)
     f30:	       move.l 19c50 <SysBase>,d0
     f36:	       movea.l d0,a6
     f38:	       move.l 32(sp),d0
     f3c:	       move.l 28(sp),d1
     f40:	       jsr -198(a6)
     f44:	       move.l d0,24(sp)
     f48:	       move.l 24(sp),d0
     f4c:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f50:	   /-- bne.s f7a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f52:	   |   pea 28 <_start+0x28>
     f56:	   |   pea 13a86 <PutChar+0xe8>
     f5c:	   |   jsr 12ed6 <KPrintF>
     f62:	   |   addq.l #8,sp
    Exit(1);
     f64:	   |   moveq #1,d1
     f66:	   |   move.l d1,16(sp)
     f6a:	   |   move.l 19c58 <DOSBase>,d0
     f70:	   |   movea.l d0,a6
     f72:	   |   move.l 16(sp),d1
     f76:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     f7a:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     f80:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     f88:	       clr.l 48(sp)
     f8c:	   /-- bra.s fb2 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     f8e:	/--|-> move.l 52(sp),d1
     f92:	|  |   move.l d1,d2
     f94:	|  |   addq.l #4,d2
     f96:	|  |   move.l d2,52(sp)
     f9a:	|  |   move.l 56(sp),d0
     f9e:	|  |   move.l d0,d2
     fa0:	|  |   addq.l #4,d2
     fa2:	|  |   move.l d2,56(sp)
     fa6:	|  |   movea.l d1,a0
     fa8:	|  |   move.l (a0),d1
     faa:	|  |   movea.l d0,a0
     fac:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fae:	|  |   addq.l #1,48(sp)
     fb2:	|  \-> moveq #15,d0
     fb4:	|      cmp.l 48(sp),d0
     fb8:	\----- bge.s f8e <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fba:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
     fc2:	       clr.l 44(sp)
     fc6:	   /-- bra.s fec <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fc8:	/--|-> move.l 52(sp),d1
     fcc:	|  |   move.l d1,d2
     fce:	|  |   addq.l #4,d2
     fd0:	|  |   move.l d2,52(sp)
     fd4:	|  |   move.l 56(sp),d0
     fd8:	|  |   move.l d0,d2
     fda:	|  |   addq.l #4,d2
     fdc:	|  |   move.l d2,56(sp)
     fe0:	|  |   movea.l d1,a0
     fe2:	|  |   move.l (a0),d1
     fe4:	|  |   movea.l d0,a0
     fe6:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     fe8:	|  |   addq.l #1,44(sp)
     fec:	|  \-> moveq #11,d0
     fee:	|      cmp.l 44(sp),d0
     ff2:	\----- bge.s fc8 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ff4:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
     ffc:	       clr.l 40(sp)
    1000:	   /-- bra.s 1026 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1002:	/--|-> move.l 52(sp),d1
    1006:	|  |   move.l d1,d2
    1008:	|  |   addq.l #4,d2
    100a:	|  |   move.l d2,52(sp)
    100e:	|  |   move.l 56(sp),d0
    1012:	|  |   move.l d0,d2
    1014:	|  |   addq.l #4,d2
    1016:	|  |   move.l d2,56(sp)
    101a:	|  |   movea.l d1,a0
    101c:	|  |   move.l (a0),d1
    101e:	|  |   movea.l d0,a0
    1020:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1022:	|  |   addq.l #1,40(sp)
    1026:	|  \-> moveq #9,d0
    1028:	|      cmp.l 40(sp),d0
    102c:	\----- bge.s 1002 <CstCreateCopperlist+0xe8>

  clpartinstruction = CstClColor;
    102e:	       move.l #98458,52(sp)
  for(int i=0; i<32;i++)
    1036:	       clr.l 36(sp)
    103a:	   /-- bra.s 1060 <CstCreateCopperlist+0x146>
    *cl++ = *clpartinstruction++;        
    103c:	/--|-> move.l 52(sp),d1
    1040:	|  |   move.l d1,d2
    1042:	|  |   addq.l #4,d2
    1044:	|  |   move.l d2,52(sp)
    1048:	|  |   move.l 56(sp),d0
    104c:	|  |   move.l d0,d2
    104e:	|  |   addq.l #4,d2
    1050:	|  |   move.l d2,56(sp)
    1054:	|  |   movea.l d1,a0
    1056:	|  |   move.l (a0),d1
    1058:	|  |   movea.l d0,a0
    105a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    105c:	|  |   addq.l #1,36(sp)
    1060:	|  \-> moveq #31,d0
    1062:	|      cmp.l 36(sp),d0
    1066:	\----- bge.s 103c <CstCreateCopperlist+0x122>

  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1068:	       moveq #40,d1
    106a:	       cmp.l 64(sp),d1
    106e:	   /-- bge.s 10cc <CstCreateCopperlist+0x1b2>
    int tmp = width - 40;
    1070:	   |   moveq #-40,d2
    1072:	   |   add.l 64(sp),d2
    1076:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    107a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1080:	   |   move.l 8(sp),d0
    1084:	   |   move.l d0,d1
    1086:	   |   addq.l #2,d1
    1088:	   |   move.l d1,8(sp)
    108c:	   |   movea.l d0,a0
    108e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1092:	   |   move.l 8(sp),d0
    1096:	   |   move.l d0,d1
    1098:	   |   addq.l #2,d1
    109a:	   |   move.l d1,8(sp)
    109e:	   |   move.l 12(sp),d1
    10a2:	   |   movea.l d0,a0
    10a4:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10a6:	   |   move.l 8(sp),d0
    10aa:	   |   move.l d0,d1
    10ac:	   |   addq.l #2,d1
    10ae:	   |   move.l d1,8(sp)
    10b2:	   |   movea.l d0,a0
    10b4:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10b8:	   |   move.l 8(sp),d0
    10bc:	   |   move.l d0,d1
    10be:	   |   addq.l #2,d1
    10c0:	   |   move.l d1,8(sp)
    10c4:	   |   move.l 12(sp),d1
    10c8:	   |   movea.l d0,a0
    10ca:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10cc:	   \-> move.l 56(sp),d0
    10d0:	       move.l d0,d1
    10d2:	       addq.l #4,d1
    10d4:	       move.l d1,56(sp)
    10d8:	       moveq #-2,d2
    10da:	       movea.l d0,a0
    10dc:	       move.l d2,(a0)
  return (UWORD *) retval;  
    10de:	       move.l 20(sp),d0
}
    10e2:	       move.l (sp)+,d2
    10e4:	       movea.l (sp)+,a6
    10e6:	       lea 52(sp),sp
    10ea:	       rts

000010ec <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    10ec:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    10ee:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    10f4:	move.l 8(sp),d0
    10f8:	movea.l (sp),a0
    10fa:	move.l d0,128(a0)
}
    10fe:	nop
    1100:	addq.l #4,sp
    1102:	rts

00001104 <CstSludgeDisplay>:

void CstSludgeDisplay() {  
}
    1104:	nop
    1106:	rts

00001108 <CstSwapGraphics>:

void CstSwapGraphics( ) {
    1108:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    110c:	move.l 19b48 <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    1114:	move.l 19b4c <CstDrawBuffer>,d0
    111a:	move.l d0,19b48 <CstViewBuffer>
  CstDrawBuffer = tmp;
    1120:	move.l 12(sp),19b4c <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    1128:	move.l 19b44 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    1130:	move.l 19b48 <CstViewBuffer>,d0
    1136:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    113a:	move.l 4(sp),d0
    113e:	clr.w d0
    1140:	swap d0
    1142:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    1146:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    114a:	movea.w #114,a0
    114e:	adda.l 8(sp),a0
    1152:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    1154:	movea.w #118,a0
    1158:	adda.l 8(sp),a0
    115c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1160:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1168:	move.l 4(sp),d0
    116c:	clr.w d0
    116e:	swap d0
    1170:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1174:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    1178:	movea.w #122,a0
    117c:	adda.l 8(sp),a0
    1180:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    1182:	movea.w #126,a0
    1186:	adda.l 8(sp),a0
    118a:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    118e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1196:	move.l 4(sp),d0
    119a:	clr.w d0
    119c:	swap d0
    119e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11a2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    11a6:	movea.l 8(sp),a0
    11aa:	lea 130(a0),a0
    11ae:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    11b0:	movea.l 8(sp),a0
    11b4:	lea 134(a0),a0
    11b8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    11bc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    11c4:	move.l 4(sp),d0
    11c8:	clr.w d0
    11ca:	swap d0
    11cc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11d0:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    11d4:	movea.l 8(sp),a0
    11d8:	lea 138(a0),a0
    11dc:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    11de:	movea.l 8(sp),a0
    11e2:	lea 142(a0),a0
    11e6:	move.w 2(sp),(a0)

  ptr +=  40*256;
    11ea:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    11f2:	move.l 4(sp),d0
    11f6:	clr.w d0
    11f8:	swap d0
    11fa:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11fe:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    1202:	movea.l 8(sp),a0
    1206:	lea 146(a0),a0
    120a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    120c:	movea.l 8(sp),a0
    1210:	lea 150(a0),a0
    1214:	move.w 2(sp),(a0)

}
    1218:	nop
    121a:	lea 16(sp),sp
    121e:	rts

00001220 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    1220:	          lea -40(sp),sp
    1224:	          move.l a6,-(sp)
    1226:	          move.l d2,-(sp)

  width = width / 8;
    1228:	          move.l 52(sp),d0
    122c:	      /-- bpl.s 1230 <CstReserveBackdrop+0x10>
    122e:	      |   addq.l #7,d0
    1230:	      \-> asr.l #3,d0
    1232:	          move.l d0,52(sp)

  if( width < 40) 
    1236:	          moveq #39,d0
    1238:	          cmp.l 52(sp),d0
    123c:	      /-- blt.s 1252 <CstReserveBackdrop+0x32>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    123e:	      |   pea 13ac1 <PutChar+0x123>
    1244:	      |   jsr 12ed6 <KPrintF>
    124a:	      |   addq.l #4,sp
    return FALSE;
    124c:	      |   clr.w d0
    124e:	/-----|-- bra.w 134a <CstReserveBackdrop+0x12a>
  }  

  CstCopperList = CstCreateCopperlist( width);
    1252:	|     \-> move.l 52(sp),-(sp)
    1256:	|         jsr f1a <CstCreateCopperlist>
    125c:	|         addq.l #4,sp
    125e:	|         move.l d0,19b44 <CstCopperList>
  int size = width*height*5;
    1264:	|         move.l 56(sp),-(sp)
    1268:	|         move.l 56(sp),-(sp)
    126c:	|         jsr 13888 <__mulsi3>
    1272:	|         addq.l #8,sp
    1274:	|         move.l d0,d1
    1276:	|         move.l d1,d0
    1278:	|         add.l d0,d0
    127a:	|         add.l d0,d0
    127c:	|         move.l d0,d2
    127e:	|         add.l d1,d2
    1280:	|         move.l d2,44(sp)
  CstBackDrop = AllocVec(size,MEMF_CHIP);
    1284:	|         move.l 44(sp),40(sp)
    128a:	|         moveq #2,d0
    128c:	|         move.l d0,36(sp)
    1290:	|         move.l 19c50 <SysBase>,d0
    1296:	|         movea.l d0,a6
    1298:	|         move.l 40(sp),d0
    129c:	|         move.l 36(sp),d1
    12a0:	|         jsr -684(a6)
    12a4:	|         move.l d0,32(sp)
    12a8:	|         move.l 32(sp),d0
    12ac:	|         move.l d0,19b40 <CstBackDrop>
  CstDrawBuffer = AllocVec(size,MEMF_CHIP);
    12b2:	|         move.l 44(sp),28(sp)
    12b8:	|         moveq #2,d2
    12ba:	|         move.l d2,24(sp)
    12be:	|         move.l 19c50 <SysBase>,d0
    12c4:	|         movea.l d0,a6
    12c6:	|         move.l 28(sp),d0
    12ca:	|         move.l 24(sp),d1
    12ce:	|         jsr -684(a6)
    12d2:	|         move.l d0,20(sp)
    12d6:	|         move.l 20(sp),d0
    12da:	|         move.l d0,19b4c <CstDrawBuffer>
  CstViewBuffer = AllocVec(size,MEMF_CHIP);
    12e0:	|         move.l 44(sp),16(sp)
    12e6:	|         moveq #2,d0
    12e8:	|         move.l d0,12(sp)
    12ec:	|         move.l 19c50 <SysBase>,d0
    12f2:	|         movea.l d0,a6
    12f4:	|         move.l 16(sp),d0
    12f8:	|         move.l 12(sp),d1
    12fc:	|         jsr -684(a6)
    1300:	|         move.l d0,8(sp)
    1304:	|         move.l 8(sp),d0
    1308:	|         move.l d0,19b48 <CstViewBuffer>
  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    130e:	|         move.l 19b44 <CstCopperList>,d0
    1314:	|     /-- beq.s 1326 <CstReserveBackdrop+0x106>
    1316:	|     |   move.l 19b4c <CstDrawBuffer>,d0
    131c:	|     +-- beq.s 1326 <CstReserveBackdrop+0x106>
    131e:	|     |   move.l 19b48 <CstViewBuffer>,d0
    1324:	|  /--|-- bne.s 1338 <CstReserveBackdrop+0x118>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1326:	|  |  \-> pea 13aff <PutChar+0x161>
    132c:	|  |      jsr 12ed6 <KPrintF>
    1332:	|  |      addq.l #4,sp
    return FALSE;
    1334:	|  |      clr.w d0
    1336:	+--|----- bra.s 134a <CstReserveBackdrop+0x12a>
  }

  CstSetCl( CstCopperList);
    1338:	|  \----> move.l 19b44 <CstCopperList>,d0
    133e:	|         move.l d0,-(sp)
    1340:	|         jsr 10ec <CstSetCl>
    1346:	|         addq.l #4,sp
  return TRUE;
    1348:	|         moveq #1,d0

}
    134a:	\-------> move.l (sp)+,d2
    134c:	          movea.l (sp)+,a6
    134e:	          lea 40(sp),sp
    1352:	          rts

00001354 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1354:	    lea -12(sp),sp
    1358:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    135a:	    move.l 19b4c <CstDrawBuffer>,d0
    1360:	/-- beq.s 137a <CstFreeBuffer+0x26>
    1362:	|   move.l 19b4c <CstDrawBuffer>,12(sp)
    136a:	|   move.l 19c50 <SysBase>,d0
    1370:	|   movea.l d0,a6
    1372:	|   movea.l 12(sp),a1
    1376:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    137a:	\-> move.l 19b48 <CstViewBuffer>,d0
    1380:	/-- beq.s 139a <CstFreeBuffer+0x46>
    1382:	|   move.l 19b48 <CstViewBuffer>,8(sp)
    138a:	|   move.l 19c50 <SysBase>,d0
    1390:	|   movea.l d0,a6
    1392:	|   movea.l 8(sp),a1
    1396:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    139a:	\-> move.l 19b44 <CstCopperList>,d0
    13a0:	/-- beq.s 13ba <CstFreeBuffer+0x66>
    13a2:	|   move.l 19b44 <CstCopperList>,4(sp)
    13aa:	|   move.l 19c50 <SysBase>,d0
    13b0:	|   movea.l d0,a6
    13b2:	|   movea.l 4(sp),a1
    13b6:	|   jsr -690(a6)
}
    13ba:	\-> nop
    13bc:	    movea.l (sp)+,a6
    13be:	    lea 12(sp),sp
    13c2:	    rts

000013c4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    13c4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    13c8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    13cc:	       tst.l 24(sp)
    13d0:	   /-- bge.s 13d6 <drawLine+0x12>
    13d2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    13d6:	   \-> tst.l 28(sp)
    13da:	   /-- bge.s 13e0 <drawLine+0x1c>
    13dc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    13e0:	   \-> tst.l 32(sp)
    13e4:	   /-- bge.s 13ea <drawLine+0x26>
    13e6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    13ea:	   \-> tst.l 36(sp)
    13ee:	   /-- bge.s 13f4 <drawLine+0x30>
    13f0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    13f4:	   \-> move.l 19cec <sceneWidth>,d0
    13fa:	       cmp.l 24(sp),d0
    13fe:	   /-- bge.s 140e <drawLine+0x4a>
    1400:	   |   move.l 19cec <sceneWidth>,d0
    1406:	   |   move.l d0,d1
    1408:	   |   subq.l #1,d1
    140a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    140e:	   \-> move.l 19cec <sceneWidth>,d0
    1414:	       cmp.l 32(sp),d0
    1418:	   /-- bge.s 1428 <drawLine+0x64>
    141a:	   |   move.l 19cec <sceneWidth>,d0
    1420:	   |   move.l d0,d1
    1422:	   |   subq.l #1,d1
    1424:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    1428:	   \-> move.l 19cf0 <sceneHeight>,d0
    142e:	       cmp.l 28(sp),d0
    1432:	   /-- bge.s 1442 <drawLine+0x7e>
    1434:	   |   move.l 19cf0 <sceneHeight>,d0
    143a:	   |   move.l d0,d1
    143c:	   |   subq.l #1,d1
    143e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1442:	   \-> move.l 19cf0 <sceneHeight>,d0
    1448:	       cmp.l 36(sp),d0
    144c:	   /-- bge.s 145c <drawLine+0x98>
    144e:	   |   move.l 19cf0 <sceneHeight>,d0
    1454:	   |   move.l d0,d1
    1456:	   |   subq.l #1,d1
    1458:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    145c:	   \-> move.l 24(sp),d0
    1460:	       cmp.l 32(sp),d0
    1464:	/----- ble.s 1480 <drawLine+0xbc>
		x = x2; 
    1466:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    146c:	|      tst.w 10(sp)
    1470:	|      seq d0
    1472:	|      neg.b d0
    1474:	|      move.b d0,d0
    1476:	|      andi.w #255,d0
    147a:	|      move.w d0,10(sp)
    147e:	|  /-- bra.s 1486 <drawLine+0xc2>
	} else x = x1;
    1480:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    1486:	   \-> move.l 28(sp),d1
    148a:	       cmp.l 36(sp),d1
    148e:	/----- ble.s 14aa <drawLine+0xe6>
		y = y2; 
    1490:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    1496:	|      tst.w 10(sp)
    149a:	|      seq d0
    149c:	|      neg.b d0
    149e:	|      move.b d0,d0
    14a0:	|      andi.w #255,d0
    14a4:	|      move.w d0,10(sp)
    14a8:	|  /-- bra.s 14b0 <drawLine+0xec>
	} else y = y1;	
    14aa:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    14b0:	   \-> move.l 32(sp),d0
    14b4:	       sub.l 24(sp),d0
    14b8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    14bc:	       move.l 6(sp),d0
    14c0:	   /-- bpl.s 14c4 <drawLine+0x100>
    14c2:	   |   neg.l d0
    14c4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    14c8:	       move.l 36(sp),d1
    14cc:	       sub.l 28(sp),d1
    14d0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    14d4:	       move.l 2(sp),d0
    14d8:	   /-- bpl.s 14dc <drawLine+0x118>
    14da:	   |   neg.l d0
    14dc:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    14e0:	       tst.l 6(sp)
    14e4:	   /-- bne.s 1508 <drawLine+0x144>
		diffX = 1;
    14e6:	   |   moveq #1,d0
    14e8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    14ec:	   |   move.l 19cec <sceneWidth>,d0
    14f2:	   |   subq.l #1,d0
    14f4:	   |   cmp.l 16(sp),d0
    14f8:	   +-- bne.s 1508 <drawLine+0x144>
    14fa:	   |   move.l 19cec <sceneWidth>,d0
    1500:	   |   move.l d0,d1
    1502:	   |   subq.l #2,d1
    1504:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1508:	   \-> tst.l 2(sp)
    150c:	   /-- bne.s 1530 <drawLine+0x16c>
		diffY = 1;
    150e:	   |   moveq #1,d0
    1510:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1514:	   |   move.l 19cf0 <sceneHeight>,d0
    151a:	   |   subq.l #1,d0
    151c:	   |   cmp.l 12(sp),d0
    1520:	   +-- bne.s 1530 <drawLine+0x16c>
    1522:	   |   move.l 19cf0 <sceneHeight>,d0
    1528:	   |   move.l d0,d1
    152a:	   |   subq.l #2,d1
    152c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1530:	   \-> pea 13b2c <PutChar+0x18e>
    1536:	       jsr 12ed6 <KPrintF>
    153c:	       addq.l #4,sp
	
}
    153e:	       nop
    1540:	       lea 20(sp),sp
    1544:	       rts

00001546 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1546:	                      lea -24(sp),sp
    154a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    154c:	                      move.l 19b58 <firstTexture>,d0
    1552:	/-------------------- beq.w 1630 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1556:	|                     clr.l 24(sp)
    155a:	|     /-------------- bra.w 1624 <deleteTextures+0xde>
			BOOL found = FALSE;
    155e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1562:	|  |  |               move.l 19b58 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    156a:	|  |  |               movea.l 20(sp),a0
    156e:	|  |  |               move.l (a0),d1
    1570:	|  |  |               move.l 24(sp),d0
    1574:	|  |  |               add.l d0,d0
    1576:	|  |  |               add.l d0,d0
    1578:	|  |  |               movea.l 36(sp),a0
    157c:	|  |  |               adda.l d0,a0
    157e:	|  |  |               move.l (a0),d0
    1580:	|  |  |               cmp.l d1,d0
    1582:	|  |  |  /----------- bne.w 1616 <deleteTextures+0xd0>
				found = TRUE;
    1586:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    158c:	|  |  |  |            movea.l 20(sp),a0
    1590:	|  |  |  |            move.l 12(a0),d0
    1594:	|  |  |  |            move.l d0,19b58 <firstTexture>
				FreeVec(list);
    159a:	|  |  |  |            move.l 20(sp),6(sp)
    15a0:	|  |  |  |            move.l 19c50 <SysBase>,d0
    15a6:	|  |  |  |            movea.l d0,a6
    15a8:	|  |  |  |            movea.l 6(sp),a1
    15ac:	|  |  |  |            jsr -690(a6)
				continue;
    15b0:	|  |  |  |  /-------- bra.s 1620 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    15b2:	|  |  |  |  |  /----> movea.l 20(sp),a0
    15b6:	|  |  |  |  |  |      movea.l 12(a0),a0
    15ba:	|  |  |  |  |  |      move.l (a0),d1
    15bc:	|  |  |  |  |  |      move.l 24(sp),d0
    15c0:	|  |  |  |  |  |      add.l d0,d0
    15c2:	|  |  |  |  |  |      add.l d0,d0
    15c4:	|  |  |  |  |  |      movea.l 36(sp),a0
    15c8:	|  |  |  |  |  |      adda.l d0,a0
    15ca:	|  |  |  |  |  |      move.l (a0),d0
    15cc:	|  |  |  |  |  |      cmp.l d1,d0
    15ce:	|  |  |  |  |  |  /-- bne.s 160c <deleteTextures+0xc6>
					found = TRUE;
    15d0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    15d6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15da:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    15e0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15e4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    15e8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    15ec:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15f0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    15f4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    15fa:	|  |  |  |  |  |  |   move.l 19c50 <SysBase>,d0
    1600:	|  |  |  |  |  |  |   movea.l d0,a6
    1602:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1606:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    160a:	|  |  |  |  +--|--|-- bra.s 1620 <deleteTextures+0xda>
				}
				list = list->next;
    160c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1610:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1616:	|  |  |  \--|--|----> movea.l 20(sp),a0
    161a:	|  |  |     |  |      move.l 12(a0),d0
    161e:	|  |  |     |  \----- bne.s 15b2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1620:	|  |  |     \-------> addq.l #1,24(sp)
    1624:	|  |  \-------------> move.l 24(sp),d0
    1628:	|  |                  cmp.l 32(sp),d0
    162c:	|  \----------------- bcs.w 155e <deleteTextures+0x18>
			}
		}
	}
}
    1630:	\-------------------> nop
    1632:	                      movea.l (sp)+,a6
    1634:	                      lea 24(sp),sp
    1638:	                      rts

0000163a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    163a:	subq.l #4,sp
    163c:	move.l 8(sp),d0
    1640:	move.w d0,d0
    1642:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1646:	pea 13b4f <PutChar+0x1b1>
    164c:	jsr 12ed6 <KPrintF>
    1652:	addq.l #4,sp
}
    1654:	nop
    1656:	addq.l #4,sp
    1658:	rts

0000165a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    165a:	       moveq #-1,d0
    165c:	       cmp.l 4(sp),d0
    1660:	   /-- bne.s 1666 <resourceNameFromNum+0xc>
    1662:	   |   moveq #0,d0
    1664:	/--|-- bra.s 169e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1666:	|  \-> move.l 19c2c <numResourceNames>,d0
    166c:	|  /-- bne.s 1676 <resourceNameFromNum+0x1c>
    166e:	|  |   move.l #80767,d0
    1674:	+--|-- bra.s 169e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1676:	|  \-> move.l 19c2c <numResourceNames>,d0
    167c:	|      cmp.l 4(sp),d0
    1680:	|  /-- ble.s 1698 <resourceNameFromNum+0x3e>
    1682:	|  |   move.l 19be8 <allResourceNames>,d1
    1688:	|  |   move.l 4(sp),d0
    168c:	|  |   add.l d0,d0
    168e:	|  |   add.l d0,d0
    1690:	|  |   movea.l d1,a0
    1692:	|  |   adda.l d0,a0
    1694:	|  |   move.l (a0),d0
    1696:	+--|-- bra.s 169e <resourceNameFromNum+0x44>
	return "Unknown resource";
    1698:	|  \-> move.l #80776,d0
    169e:	\----> rts

000016a0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    16a0:	          lea -40(sp),sp
    16a4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    16a8:	          move.l #320,19b50 <winWidth>
    winHeight = 256;
    16b2:	          move.l #256,19b54 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    16bc:	          tst.l 56(sp)
    16c0:	      /-- bne.s 16d8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    16c2:	      |   pea 13b99 <PutChar+0x1fb>
    16c8:	      |   jsr b8 <copyString>
    16ce:	      |   addq.l #4,sp
    16d0:	      |   move.l d0,19b68 <bundleFolder>
    16d6:	   /--|-- bra.s 16ee <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    16d8:	   |  \-> movea.l 60(sp),a0
    16dc:	   |      move.l (a0),d0
    16de:	   |      move.l d0,-(sp)
    16e0:	   |      jsr b8 <copyString>
    16e6:	   |      addq.l #4,sp
    16e8:	   |      move.l d0,19b68 <bundleFolder>
	}
    
	int lastSlash = -1;
    16ee:	   \----> moveq #-1,d0
    16f0:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    16f4:	          clr.l 40(sp)
    16f8:	   /----- bra.s 171a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    16fa:	/--|----> move.l 19b68 <bundleFolder>,d1
    1700:	|  |      move.l 40(sp),d0
    1704:	|  |      movea.l d1,a0
    1706:	|  |      adda.l d0,a0
    1708:	|  |      move.b (a0),d0
    170a:	|  |      cmpi.b #47,d0
    170e:	|  |  /-- bne.s 1716 <main_sludge+0x76>
    1710:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1716:	|  |  \-> addq.l #1,40(sp)
    171a:	|  \----> move.l 19b68 <bundleFolder>,d1
    1720:	|         move.l 40(sp),d0
    1724:	|         movea.l d1,a0
    1726:	|         adda.l d0,a0
    1728:	|         move.b (a0),d0
    172a:	\-------- bne.s 16fa <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    172c:	          move.l 19b68 <bundleFolder>,d0
    1732:	          move.l 44(sp),d1
    1736:	          addq.l #1,d1
    1738:	          movea.l d0,a0
    173a:	          adda.l d1,a0
    173c:	          clr.b (a0)

	if (argc > 1) {
    173e:	          moveq #1,d0
    1740:	          cmp.l 56(sp),d0
    1744:	      /-- bge.s 1760 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1746:	      |   move.l 56(sp),d0
    174a:	      |   addi.l #1073741823,d0
    1750:	      |   add.l d0,d0
    1752:	      |   add.l d0,d0
    1754:	      |   movea.l 60(sp),a0
    1758:	      |   adda.l d0,a0
    175a:	      |   move.l (a0),48(sp)
    175e:	   /--|-- bra.s 17ba <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1760:	   |  \-> move.l 19b68 <bundleFolder>,d0
    1766:	   |      pea 13b9f <PutChar+0x201>
    176c:	   |      move.l d0,-(sp)
    176e:	   |      jsr 103ae <joinStrings>
    1774:	   |      addq.l #8,sp
    1776:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    177a:	   |      move.l 48(sp),-(sp)
    177e:	   |      jsr 102c4 <fileExists>
    1784:	   |      addq.l #4,sp
    1786:	   |      tst.b d0
    1788:	   +----- bne.s 17ba <main_sludge+0x11a>
			FreeVec(sludgeFile);
    178a:	   |      move.l 48(sp),36(sp)
    1790:	   |      move.l 19c50 <SysBase>,d0
    1796:	   |      movea.l d0,a6
    1798:	   |      movea.l 36(sp),a1
    179c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    17a0:	   |      move.l 19b68 <bundleFolder>,d0
    17a6:	   |      pea 13bac <PutChar+0x20e>
    17ac:	   |      move.l d0,-(sp)
    17ae:	   |      jsr 103ae <joinStrings>
    17b4:	   |      addq.l #8,sp
    17b6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    17ba:	   \----> move.l 48(sp),-(sp)
    17be:	          jsr 102c4 <fileExists>
    17c4:	          addq.l #4,sp
    17c6:	          tst.b d0
    17c8:	      /-- bne.s 1812 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    17ca:	      |   move.l 19c58 <DOSBase>,d0
    17d0:	      |   movea.l d0,a6
    17d2:	      |   jsr -60(a6)
    17d6:	      |   move.l d0,28(sp)
    17da:	      |   move.l 28(sp),d0
    17de:	      |   move.l d0,24(sp)
    17e2:	      |   move.l #80821,20(sp)
    17ea:	      |   moveq #21,d0
    17ec:	      |   move.l d0,16(sp)
    17f0:	      |   move.l 19c58 <DOSBase>,d0
    17f6:	      |   movea.l d0,a6
    17f8:	      |   move.l 24(sp),d1
    17fc:	      |   move.l 20(sp),d2
    1800:	      |   move.l 16(sp),d3
    1804:	      |   jsr -48(a6)
    1808:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    180c:	      |   moveq #0,d0
    180e:	/-----|-- bra.w 196e <main_sludge+0x2ce>
	}

	setGameFilePath (sludgeFile);	
    1812:	|     \-> move.l 48(sp),-(sp)
    1816:	|         jsr 1978 <setGameFilePath>
    181c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    181e:	|         move.l 48(sp),-(sp)
    1822:	|         jsr 3204 <initSludge>
    1828:	|         addq.l #4,sp
    182a:	|         tst.w d0
    182c:	|     /-- bne.s 1834 <main_sludge+0x194>
    182e:	|     |   moveq #0,d0
    1830:	+-----|-- bra.w 196e <main_sludge+0x2ce>
	
	if( winWidth != 320 || winHeight != 256) {
    1834:	|     \-> move.l 19b50 <winWidth>,d0
    183a:	|         cmpi.l #320,d0
    1840:	|     /-- bne.s 1850 <main_sludge+0x1b0>
    1842:	|     |   move.l 19b54 <winHeight>,d0
    1848:	|     |   cmpi.l #256,d0
    184e:	|  /--|-- beq.s 1872 <main_sludge+0x1d2>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1850:	|  |  \-> pea 13bcb <PutChar+0x22d>
    1856:	|  |      jsr 12ed6 <KPrintF>
    185c:	|  |      addq.l #4,sp
		winWidth = 320;
    185e:	|  |      move.l #320,19b50 <winWidth>
		winHeight = 256;
    1868:	|  |      move.l #256,19b54 <winHeight>
	}

	if (! resizeBackdrop (winWidth, winHeight)) {
    1872:	|  \----> move.l 19b54 <winHeight>,d0
    1878:	|         move.l d0,d1
    187a:	|         move.l 19b50 <winWidth>,d0
    1880:	|         move.l d1,-(sp)
    1882:	|         move.l d0,-(sp)
    1884:	|         jsr 9bc0 <resizeBackdrop>
    188a:	|         addq.l #8,sp
    188c:	|         tst.w d0
    188e:	|     /-- bne.s 18a4 <main_sludge+0x204>
		KPrintF("Couldn't allocate memory for backdrop");
    1890:	|     |   pea 13c48 <PutChar+0x2aa>
    1896:	|     |   jsr 12ed6 <KPrintF>
    189c:	|     |   addq.l #4,sp
		return FALSE;
    189e:	|     |   moveq #0,d0
    18a0:	+-----|-- bra.w 196e <main_sludge+0x2ce>
	}

	if (! initPeople ())
    18a4:	|     \-> jsr 6f56 <initPeople>
    18aa:	|         tst.w d0
    18ac:	|     /-- bne.s 18c2 <main_sludge+0x222>
	{
		KPrintF("Couldn't initialise people stuff");
    18ae:	|     |   pea 13c6e <PutChar+0x2d0>
    18b4:	|     |   jsr 12ed6 <KPrintF>
    18ba:	|     |   addq.l #4,sp
		return FALSE;
    18bc:	|     |   moveq #0,d0
    18be:	+-----|-- bra.w 196e <main_sludge+0x2ce>
	}

	if (! initFloor ())
    18c2:	|     \-> jsr 12280 <initFloor>
    18c8:	|         tst.w d0
    18ca:	|     /-- bne.s 18e0 <main_sludge+0x240>
	{
		KPrintF("Couldn't initialise floor stuff");
    18cc:	|     |   pea 13c8f <PutChar+0x2f1>
    18d2:	|     |   jsr 12ed6 <KPrintF>
    18d8:	|     |   addq.l #4,sp
		
		return FALSE;
    18da:	|     |   moveq #0,d0
    18dc:	+-----|-- bra.w 196e <main_sludge+0x2ce>
	}

	if (! initObjectTypes ())
    18e0:	|     \-> jsr 9d6e <initObjectTypes>
    18e6:	|         tst.w d0
    18e8:	|     /-- bne.s 18fc <main_sludge+0x25c>
	{
		KPrintF("Couldn't initialise object type stuff");
    18ea:	|     |   pea 13caf <PutChar+0x311>
    18f0:	|     |   jsr 12ed6 <KPrintF>
    18f6:	|     |   addq.l #4,sp
		return FALSE;
    18f8:	|     |   moveq #0,d0
    18fa:	+-----|-- bra.s 196e <main_sludge+0x2ce>
	}

	initSpeech ();
    18fc:	|     \-> jsr 55a2 <initSpeech>
	initStatusBar ();
    1902:	|         jsr 5066 <initStatusBar>

	gameName = getNumberedString(1);
    1908:	|         pea 1 <_start+0x1>
    190c:	|         jsr 43a4 <getNumberedString>
    1912:	|         addq.l #4,sp
    1914:	|         move.l d0,19b60 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    191a:	|         move.l 19c20 <noStack>,d0
    1920:	|         pea 1 <_start+0x1>
    1924:	|         move.l d0,-(sp)
    1926:	|         clr.l -(sp)
    1928:	|         clr.l -(sp)
    192a:	|         clr.l -(sp)
    192c:	|         jsr 422c <startNewFunctionNum>
    1932:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1936:	|         clr.l 19b6c <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    193c:	|     /-- bra.s 1950 <main_sludge+0x2b0>
		handleInput();
    193e:	|  /--|-> jsr 31fc <handleInput>
		sludgeDisplay ();
    1944:	|  |  |   jsr 41de <sludgeDisplay>
		WaitVbl();
    194a:	|  |  |   jsr 12dfe <WaitVbl>
	while ( !weAreDoneSoQuit ) {		
    1950:	|  |  \-> move.l 19b6c <weAreDoneSoQuit>,d0
    1956:	|  \----- beq.s 193e <main_sludge+0x29e>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1958:	|         move.l 48(sp),32(sp)
    195e:	|         move.l 19c50 <SysBase>,d0
    1964:	|         movea.l d0,a6
    1966:	|         movea.l 32(sp),a1
    196a:	|         jsr -690(a6)
}
    196e:	\-------> movem.l (sp)+,d2-d3/a6
    1972:	          lea 40(sp),sp
    1976:	          rts

00001978 <setGameFilePath>:

void setGameFilePath (char * f) {
    1978:	          lea -1104(sp),sp
    197c:	          move.l a6,-(sp)
    197e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1980:	          move.l #1112,d0
    1986:	          add.l sp,d0
    1988:	          addi.l #-1102,d0
    198e:	          move.l d0,1100(sp)
    1992:	          move.l #998,1096(sp)
    199a:	          move.l 19c58 <DOSBase>,d0
    19a0:	          movea.l d0,a6
    19a2:	          move.l 1100(sp),d1
    19a6:	          move.l 1096(sp),d2
    19aa:	          jsr -564(a6)
    19ae:	          move.w d0,1094(sp)
    19b2:	          move.w 1094(sp),d0
    19b6:	      /-- bne.s 19c6 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    19b8:	      |   pea 13cd5 <PutChar+0x337>
    19be:	      |   jsr 12ed6 <KPrintF>
    19c4:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    19c6:	      \-> moveq #-1,d0
    19c8:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    19cc:	          clr.l 1104(sp)
    19d0:	   /----- bra.s 19ee <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    19d2:	/--|----> move.l 1104(sp),d0
    19d6:	|  |      movea.l 1116(sp),a0
    19da:	|  |      adda.l d0,a0
    19dc:	|  |      move.b (a0),d0
    19de:	|  |      cmpi.b #47,d0
    19e2:	|  |  /-- bne.s 19ea <setGameFilePath+0x72>
    19e4:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    19ea:	|  |  \-> addq.l #1,1104(sp)
    19ee:	|  \----> move.l 1104(sp),d0
    19f2:	|         movea.l 1116(sp),a0
    19f6:	|         adda.l d0,a0
    19f8:	|         move.b (a0),d0
    19fa:	\-------- bne.s 19d2 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    19fc:	          moveq #-1,d0
    19fe:	          cmp.l 1108(sp),d0
    1a02:	   /----- beq.s 1a7c <setGameFilePath+0x104>
		f[got] = 0;	
    1a04:	   |      move.l 1108(sp),d0
    1a08:	   |      movea.l 1116(sp),a0
    1a0c:	   |      adda.l d0,a0
    1a0e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1a10:	   |      move.l 1116(sp),1090(sp)
    1a16:	   |      moveq #-2,d0
    1a18:	   |      move.l d0,1086(sp)
    1a1c:	   |      move.l 19c58 <DOSBase>,d0
    1a22:	   |      movea.l d0,a6
    1a24:	   |      move.l 1090(sp),d1
    1a28:	   |      move.l 1086(sp),d2
    1a2c:	   |      jsr -84(a6)
    1a30:	   |      move.l d0,1082(sp)
    1a34:	   |      move.l 1082(sp),d0
    1a38:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1a3c:	   |      move.l 1078(sp),1074(sp)
    1a42:	   |      move.l 19c58 <DOSBase>,d0
    1a48:	   |      movea.l d0,a6
    1a4a:	   |      move.l 1074(sp),d1
    1a4e:	   |      jsr -126(a6)
    1a52:	   |      move.l d0,1070(sp)
    1a56:	   |      move.l 1070(sp),d0
    1a5a:	   |  /-- bne.s 1a6e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1a5c:	   |  |   move.l 1116(sp),-(sp)
    1a60:	   |  |   pea 13cfb <PutChar+0x35d>
    1a66:	   |  |   jsr 12ed6 <KPrintF>
    1a6c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1a6e:	   |  \-> move.l 1108(sp),d0
    1a72:	   |      movea.l 1116(sp),a0
    1a76:	   |      adda.l d0,a0
    1a78:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1a7c:	   \----> move.l #400,1066(sp)
    1a84:	          clr.l 1062(sp)
    1a88:	          move.l 19c50 <SysBase>,d0
    1a8e:	          movea.l d0,a6
    1a90:	          move.l 1066(sp),d0
    1a94:	          move.l 1062(sp),d1
    1a98:	          jsr -684(a6)
    1a9c:	          move.l d0,1058(sp)
    1aa0:	          move.l 1058(sp),d0
    1aa4:	          move.l d0,19b64 <gamePath>
	if (gamePath==0) {
    1aaa:	          move.l 19b64 <gamePath>,d0
    1ab0:	      /-- bne.s 1ac4 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1ab2:	      |   pea 13d2e <PutChar+0x390>
    1ab8:	      |   jsr 12ed6 <KPrintF>
    1abe:	      |   addq.l #4,sp
    1ac0:	   /--|-- bra.w 1bac <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    1ac4:	   |  \-> move.l 19b64 <gamePath>,1054(sp)
    1acc:	   |      moveq #-2,d0
    1ace:	   |      move.l d0,1050(sp)
    1ad2:	   |      move.l 19c58 <DOSBase>,d0
    1ad8:	   |      movea.l d0,a6
    1ada:	   |      move.l 1054(sp),d1
    1ade:	   |      move.l 1050(sp),d2
    1ae2:	   |      jsr -84(a6)
    1ae6:	   |      move.l d0,1046(sp)
    1aea:	   |      move.l 1046(sp),d0
    1aee:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    1af2:	   |      move.l 1042(sp),1038(sp)
    1af8:	   |      move.l 19c58 <DOSBase>,d0
    1afe:	   |      movea.l d0,a6
    1b00:	   |      move.l 1038(sp),d1
    1b04:	   |      jsr -126(a6)
    1b08:	   |      move.l d0,1034(sp)
    1b0c:	   |      move.l 1034(sp),d0
    1b10:	   |  /-- bne.s 1b20 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    1b12:	   |  |   pea 13d69 <PutChar+0x3cb>
    1b18:	   |  |   jsr 12ed6 <KPrintF>
    1b1e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1b20:	   |  \-> move.l #1112,d0
    1b26:	   |      add.l sp,d0
    1b28:	   |      addi.l #-1102,d0
    1b2e:	   |      move.l d0,1030(sp)
    1b32:	   |      moveq #-2,d0
    1b34:	   |      move.l d0,1026(sp)
    1b38:	   |      move.l 19c58 <DOSBase>,d0
    1b3e:	   |      movea.l d0,a6
    1b40:	   |      move.l 1030(sp),d1
    1b44:	   |      move.l 1026(sp),d2
    1b48:	   |      jsr -84(a6)
    1b4c:	   |      move.l d0,1022(sp)
    1b50:	   |      move.l 1022(sp),d0
    1b54:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1b58:	   |      move.l 1042(sp),1018(sp)
    1b5e:	   |      move.l 19c58 <DOSBase>,d0
    1b64:	   |      movea.l d0,a6
    1b66:	   |      move.l 1018(sp),d1
    1b6a:	   |      jsr -126(a6)
    1b6e:	   |      move.l d0,1014(sp)
    1b72:	   |      move.l 1014(sp),d0
    1b76:	   |  /-- bne.s 1b8c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1b78:	   |  |   moveq #10,d0
    1b7a:	   |  |   add.l sp,d0
    1b7c:	   |  |   move.l d0,-(sp)
    1b7e:	   |  |   pea 13d95 <PutChar+0x3f7>
    1b84:	   |  |   jsr 12ed6 <KPrintF>
    1b8a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1b8c:	   |  \-> move.l 19b64 <gamePath>,d0
    1b92:	   +----- beq.s 1bac <setGameFilePath+0x234>
    1b94:	   |      move.l 19b64 <gamePath>,1010(sp)
    1b9c:	   |      move.l 19c50 <SysBase>,d0
    1ba2:	   |      movea.l d0,a6
    1ba4:	   |      movea.l 1010(sp),a1
    1ba8:	   |      jsr -690(a6)
}
    1bac:	   \----> move.l (sp)+,d2
    1bae:	          movea.l (sp)+,a6
    1bb0:	          lea 1104(sp),sp
    1bb4:	          rts

00001bb6 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    1bb6:	    subq.l #4,sp
    1bb8:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    1bba:	    move.l 19bc0 <zBuffer+0x50>,d0
    1bc0:	/-- beq.s 1bf8 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    1bc2:	|   pea 19bc4 <zBuffer+0x54>
    1bc8:	|   pea 1 <_start+0x1>
    1bcc:	|   jsr 1546 <deleteTextures>
    1bd2:	|   addq.l #8,sp
		zBuffer.texName = 0;
    1bd4:	|   clr.l 19bc4 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    1bda:	|   move.l 19bc0 <zBuffer+0x50>,4(sp)
    1be2:	|   move.l 19c50 <SysBase>,d0
    1be8:	|   movea.l d0,a6
    1bea:	|   movea.l 4(sp),a1
    1bee:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    1bf2:	|   clr.l 19bc0 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    1bf8:	\-> clr.l 19b78 <zBuffer+0x8>
	zBuffer.originalNum =0;
    1bfe:	    clr.l 19bbc <zBuffer+0x4c>
}
    1c04:	    nop
    1c06:	    movea.l (sp)+,a6
    1c08:	    addq.l #4,sp
    1c0a:	    rts

00001c0c <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    1c0c:	                         lea -528(sp),sp
    1c10:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    1c14:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    1c18:	                         jsr 1bb6 <killZBuffer>

	zBuffer.originalNum = y;
    1c1e:	                         move.l 544(sp),d0
    1c22:	                         move.l d0,19bbc <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    1c28:	                         move.l 544(sp),d0
    1c2c:	                         move.l d0,-(sp)
    1c2e:	                         jsr 44a2 <openFileFromNum>
    1c34:	                         addq.l #4,sp
    1c36:	                         tst.l d0
    1c38:	                     /-- bne.s 1c40 <setZBuffer+0x34>
    1c3a:	                     |   clr.w d0
    1c3c:	/--------------------|-- bra.w 201e <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1c40:	|                    \-> move.l 19c38 <bigDataFile>,524(sp)
    1c48:	|                        move.l 19c58 <DOSBase>,d0
    1c4e:	|                        movea.l d0,a6
    1c50:	|                        move.l 524(sp),d1
    1c54:	|                        jsr -306(a6)
    1c58:	|                        move.l d0,520(sp)
    1c5c:	|                        move.l 520(sp),d0
    1c60:	|                        moveq #83,d1
    1c62:	|                        cmp.l d0,d1
    1c64:	|                    /-- beq.s 1cc6 <setZBuffer+0xba>
    1c66:	|                    |   move.l 19c38 <bigDataFile>,516(sp)
    1c6e:	|                    |   move.l 19c58 <DOSBase>,d0
    1c74:	|                    |   movea.l d0,a6
    1c76:	|                    |   move.l 516(sp),d1
    1c7a:	|                    |   jsr -306(a6)
    1c7e:	|                    |   move.l d0,512(sp)
    1c82:	|                    |   move.l 512(sp),d0
    1c86:	|                    |   moveq #122,d1
    1c88:	|                    |   cmp.l d0,d1
    1c8a:	|                    +-- beq.s 1cc6 <setZBuffer+0xba>
    1c8c:	|                    |   move.l 19c38 <bigDataFile>,508(sp)
    1c94:	|                    |   move.l 19c58 <DOSBase>,d0
    1c9a:	|                    |   movea.l d0,a6
    1c9c:	|                    |   move.l 508(sp),d1
    1ca0:	|                    |   jsr -306(a6)
    1ca4:	|                    |   move.l d0,504(sp)
    1ca8:	|                    |   move.l 504(sp),d0
    1cac:	|                    |   moveq #98,d1
    1cae:	|                    |   cmp.l d0,d1
    1cb0:	|                    +-- beq.s 1cc6 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1cb2:	|                    |   pea 13dc7 <PutChar+0x429>
    1cb8:	|                    |   jsr 12ed6 <KPrintF>
    1cbe:	|                    |   addq.l #4,sp
		 return FALSE;
    1cc0:	|                    |   clr.w d0
    1cc2:	+--------------------|-- bra.w 201e <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    1cc6:	|                    \-> move.l 19c38 <bigDataFile>,500(sp)
    1cce:	|                        move.l 19c58 <DOSBase>,d0
    1cd4:	|                        movea.l d0,a6
    1cd6:	|                        move.l 500(sp),d1
    1cda:	|                        jsr -306(a6)
    1cde:	|                        move.l d0,496(sp)
    1ce2:	|                        move.l 496(sp),d0
    1ce6:	|                    /-- beq.s 1cf0 <setZBuffer+0xe4>
    1ce8:	|                    |   moveq #1,d1
    1cea:	|                    |   cmp.l d0,d1
    1cec:	|                 /--|-- beq.s 1d06 <setZBuffer+0xfa>
    1cee:	|              /--|--|-- bra.s 1d34 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    1cf0:	|              |  |  \-> move.l #640,19b70 <zBuffer>
		zBuffer.height = 480;
    1cfa:	|              |  |      move.l #480,19b74 <zBuffer+0x4>
		break;
    1d04:	|              |  |  /-- bra.s 1d48 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    1d06:	|              |  \--|-> move.l 19c38 <bigDataFile>,d0
    1d0c:	|              |     |   move.l d0,-(sp)
    1d0e:	|              |     |   jsr 6bc <get2bytes>
    1d14:	|              |     |   addq.l #4,sp
    1d16:	|              |     |   move.l d0,19b70 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1d1c:	|              |     |   move.l 19c38 <bigDataFile>,d0
    1d22:	|              |     |   move.l d0,-(sp)
    1d24:	|              |     |   jsr 6bc <get2bytes>
    1d2a:	|              |     |   addq.l #4,sp
    1d2c:	|              |     |   move.l d0,19b74 <zBuffer+0x4>
		break;
    1d32:	|              |     +-- bra.s 1d48 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    1d34:	|              \-----|-> pea 13ddb <PutChar+0x43d>
    1d3a:	|                    |   jsr 12ed6 <KPrintF>
    1d40:	|                    |   addq.l #4,sp
		return FALSE;
    1d42:	|                    |   clr.w d0
    1d44:	+--------------------|-- bra.w 201e <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    1d48:	|                    \-> move.l 19b70 <zBuffer>,d0
    1d4e:	|                        move.l d0,d1
    1d50:	|                        move.l 19cec <sceneWidth>,d0
    1d56:	|                        cmp.l d1,d0
    1d58:	|                    /-- bne.s 1d6c <setZBuffer+0x160>
    1d5a:	|                    |   move.l 19b74 <zBuffer+0x4>,d0
    1d60:	|                    |   move.l d0,d1
    1d62:	|                    |   move.l 19cf0 <sceneHeight>,d0
    1d68:	|                    |   cmp.l d1,d0
    1d6a:	|                 /--|-- beq.s 1dbc <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1d6c:	|                 |  \-> movea.l 19cf0 <sceneHeight>,a1
    1d72:	|                 |      movea.l 19cec <sceneWidth>,a0
    1d78:	|                 |      move.l 19b74 <zBuffer+0x4>,d1
    1d7e:	|                 |      move.l 19b70 <zBuffer>,d0
    1d84:	|                 |      move.l a1,-(sp)
    1d86:	|                 |      move.l a0,-(sp)
    1d88:	|                 |      move.l d1,-(sp)
    1d8a:	|                 |      move.l d0,-(sp)
    1d8c:	|                 |      pea 13e27 <PutChar+0x489>
    1d92:	|                 |      moveq #32,d0
    1d94:	|                 |      add.l sp,d0
    1d96:	|                 |      move.l d0,-(sp)
    1d98:	|                 |      jsr 1068c <sprintf>
    1d9e:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    1da2:	|                 |      moveq #12,d0
    1da4:	|                 |      add.l sp,d0
    1da6:	|                 |      move.l d0,-(sp)
    1da8:	|                 |      pea 13e42 <PutChar+0x4a4>
    1dae:	|                 |      jsr 12ed6 <KPrintF>
    1db4:	|                 |      addq.l #8,sp
		return FALSE;
    1db6:	|                 |      clr.w d0
    1db8:	+-----------------|----- bra.w 201e <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    1dbc:	|                 \----> move.l 19c38 <bigDataFile>,492(sp)
    1dc4:	|                        move.l 19c58 <DOSBase>,d0
    1dca:	|                        movea.l d0,a6
    1dcc:	|                        move.l 492(sp),d1
    1dd0:	|                        jsr -306(a6)
    1dd4:	|                        move.l d0,488(sp)
    1dd8:	|                        move.l 488(sp),d0
    1ddc:	|                        move.l d0,19b78 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1de2:	|                        clr.l 544(sp)
    1de6:	|                    /-- bra.s 1e12 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    1de8:	|                 /--|-> move.l 19c38 <bigDataFile>,d0
    1dee:	|                 |  |   move.l d0,-(sp)
    1df0:	|                 |  |   jsr 6bc <get2bytes>
    1df6:	|                 |  |   addq.l #4,sp
    1df8:	|                 |  |   move.l 544(sp),d1
    1dfc:	|                 |  |   add.l d1,d1
    1dfe:	|                 |  |   add.l d1,d1
    1e00:	|                 |  |   lea 540(sp),a0
    1e04:	|                 |  |   add.l a0,d1
    1e06:	|                 |  |   movea.l d1,a0
    1e08:	|                 |  |   lea -144(a0),a0
    1e0c:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1e0e:	|                 |  |   addq.l #1,544(sp)
    1e12:	|                 |  \-> move.l 19b78 <zBuffer+0x8>,d0
    1e18:	|                 |      cmp.l 544(sp),d0
    1e1c:	|                 \----- bhi.s 1de8 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1e1e:	|                        move.l 19b78 <zBuffer+0x8>,d0
    1e24:	|                        move.l d0,-(sp)
    1e26:	|                        move.l sp,d0
    1e28:	|                        addi.l #336,d0
    1e2e:	|                        move.l d0,-(sp)
    1e30:	|                        move.l sp,d0
    1e32:	|                        addi.l #404,d0
    1e38:	|                        move.l d0,-(sp)
    1e3a:	|                        jsr 2028 <sortZPal>
    1e40:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1e44:	|                        clr.l 544(sp)
    1e48:	|                    /-- bra.s 1ec0 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1e4a:	|                 /--|-> move.l 544(sp),d0
    1e4e:	|                 |  |   add.l d0,d0
    1e50:	|                 |  |   add.l d0,d0
    1e52:	|                 |  |   move.l #540,d1
    1e58:	|                 |  |   add.l sp,d1
    1e5a:	|                 |  |   add.l d1,d0
    1e5c:	|                 |  |   movea.l d0,a0
    1e5e:	|                 |  |   lea -208(a0),a0
    1e62:	|                 |  |   move.l (a0),d0
    1e64:	|                 |  |   add.l d0,d0
    1e66:	|                 |  |   add.l d0,d0
    1e68:	|                 |  |   lea 540(sp),a0
    1e6c:	|                 |  |   add.l a0,d0
    1e6e:	|                 |  |   movea.l d0,a0
    1e70:	|                 |  |   lea -144(a0),a0
    1e74:	|                 |  |   move.l (a0),d0
    1e76:	|                 |  |   move.l 544(sp),d1
    1e7a:	|                 |  |   addq.l #3,d1
    1e7c:	|                 |  |   add.l d1,d1
    1e7e:	|                 |  |   movea.l d1,a1
    1e80:	|                 |  |   adda.l d1,a1
    1e82:	|                 |  |   lea 19b70 <zBuffer>,a0
    1e88:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1e8c:	|                 |  |   move.l 544(sp),d0
    1e90:	|                 |  |   add.l d0,d0
    1e92:	|                 |  |   add.l d0,d0
    1e94:	|                 |  |   move.l #540,d1
    1e9a:	|                 |  |   add.l sp,d1
    1e9c:	|                 |  |   add.l d1,d0
    1e9e:	|                 |  |   movea.l d0,a0
    1ea0:	|                 |  |   lea -208(a0),a0
    1ea4:	|                 |  |   move.l (a0),d1
    1ea6:	|                 |  |   move.l 544(sp),d0
    1eaa:	|                 |  |   add.l d1,d1
    1eac:	|                 |  |   add.l d1,d1
    1eae:	|                 |  |   lea 540(sp),a0
    1eb2:	|                 |  |   add.l a0,d1
    1eb4:	|                 |  |   movea.l d1,a0
    1eb6:	|                 |  |   lea -272(a0),a0
    1eba:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1ebc:	|                 |  |   addq.l #1,544(sp)
    1ec0:	|                 |  \-> move.l 19b78 <zBuffer+0x8>,d0
    1ec6:	|                 |      cmp.l 544(sp),d0
    1eca:	|                 \----- bhi.w 1e4a <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    1ece:	|                        move.l 19cec <sceneWidth>,d0
    1ed4:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    1ed8:	|                        move.l 19cf0 <sceneHeight>,d0
    1ede:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    1ee2:	|                        move.l 484(sp),-(sp)
    1ee6:	|                        move.l 484(sp),-(sp)
    1eea:	|                        jsr 13888 <__mulsi3>
    1ef0:	|                        addq.l #8,sp
    1ef2:	|                        move.l d0,476(sp)
    1ef6:	|                        clr.l 472(sp)
    1efa:	|                        move.l 19c50 <SysBase>,d0
    1f00:	|                        movea.l d0,a6
    1f02:	|                        move.l 476(sp),d0
    1f06:	|                        move.l 472(sp),d1
    1f0a:	|                        jsr -684(a6)
    1f0e:	|                        move.l d0,468(sp)
    1f12:	|                        move.l 468(sp),d0
    1f16:	|                        move.l d0,19bc0 <zBuffer+0x50>
	if (!zBuffer.tex) {
    1f1c:	|                        move.l 19bc0 <zBuffer+0x50>,d0
    1f22:	|                    /-- bne.s 1f38 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    1f24:	|                    |   pea 13e7f <PutChar+0x4e1>
    1f2a:	|                    |   jsr 12ed6 <KPrintF>
    1f30:	|                    |   addq.l #4,sp
		return FALSE;
    1f32:	|                    |   clr.w d0
    1f34:	+--------------------|-- bra.w 201e <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    1f38:	|                    \-> clr.l 544(sp)
    1f3c:	|     /----------------- bra.w 2008 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1f40:	|  /--|----------------> clr.l 536(sp)
    1f44:	|  |  |     /----------- bra.w 1ff4 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    1f48:	|  |  |  /--|----------> tst.l 528(sp)
    1f4c:	|  |  |  |  |  /-------- bne.s 1faa <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1f4e:	|  |  |  |  |  |         move.l 19c38 <bigDataFile>,464(sp)
    1f56:	|  |  |  |  |  |         move.l 19c58 <DOSBase>,d0
    1f5c:	|  |  |  |  |  |         movea.l d0,a6
    1f5e:	|  |  |  |  |  |         move.l 464(sp),d1
    1f62:	|  |  |  |  |  |         jsr -306(a6)
    1f66:	|  |  |  |  |  |         move.l d0,460(sp)
    1f6a:	|  |  |  |  |  |         move.l 460(sp),d0
    1f6e:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    1f72:	|  |  |  |  |  |         move.l 532(sp),d0
    1f76:	|  |  |  |  |  |         asr.l #4,d0
    1f78:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1f7c:	|  |  |  |  |  |         moveq #15,d0
    1f7e:	|  |  |  |  |  |         cmp.l 528(sp),d0
    1f82:	|  |  |  |  |  |  /----- bne.s 1fa0 <setZBuffer+0x394>
    1f84:	|  |  |  |  |  |  |      move.l 19c38 <bigDataFile>,d0
    1f8a:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1f8c:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    1f92:	|  |  |  |  |  |  |      addq.l #4,sp
    1f94:	|  |  |  |  |  |  |      movea.l d0,a0
    1f96:	|  |  |  |  |  |  |      lea 16(a0),a0
    1f9a:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1f9e:	|  |  |  |  |  |  |  /-- bra.s 1fa4 <setZBuffer+0x398>
				else stillToGo ++;
    1fa0:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    1fa4:	|  |  |  |  |  |     \-> moveq #15,d1
    1fa6:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    1faa:	|  |  |  |  |  \-------> move.l 532(sp),d0
    1fae:	|  |  |  |  |            add.l d0,d0
    1fb0:	|  |  |  |  |            add.l d0,d0
    1fb2:	|  |  |  |  |            lea 540(sp),a0
    1fb6:	|  |  |  |  |            add.l a0,d0
    1fb8:	|  |  |  |  |            movea.l d0,a0
    1fba:	|  |  |  |  |            lea -272(a0),a0
    1fbe:	|  |  |  |  |            move.l (a0),d0
    1fc0:	|  |  |  |  |            move.l d0,d2
    1fc2:	|  |  |  |  |            move.l 19bc0 <zBuffer+0x50>,d3
    1fc8:	|  |  |  |  |            move.l 484(sp),d0
    1fcc:	|  |  |  |  |            move.l 544(sp),-(sp)
    1fd0:	|  |  |  |  |            move.l d0,-(sp)
    1fd2:	|  |  |  |  |            jsr 13888 <__mulsi3>
    1fd8:	|  |  |  |  |            addq.l #8,sp
    1fda:	|  |  |  |  |            move.l d0,d1
    1fdc:	|  |  |  |  |            move.l 536(sp),d0
    1fe0:	|  |  |  |  |            add.l d1,d0
    1fe2:	|  |  |  |  |            movea.l d3,a0
    1fe4:	|  |  |  |  |            adda.l d0,a0
    1fe6:	|  |  |  |  |            move.b d2,d0
    1fe8:	|  |  |  |  |            lsl.b #4,d0
    1fea:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    1fec:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1ff0:	|  |  |  |  |            addq.l #1,536(sp)
    1ff4:	|  |  |  |  \----------> move.l 536(sp),d1
    1ff8:	|  |  |  |               move.l 19cec <sceneWidth>,d0
    1ffe:	|  |  |  |               cmp.l d1,d0
    2000:	|  |  |  \-------------- bhi.w 1f48 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    2004:	|  |  |                  addq.l #1,544(sp)
    2008:	|  |  \----------------> move.l 19cf0 <sceneHeight>,d0
    200e:	|  |                     cmp.l 544(sp),d0
    2012:	|  \-------------------- bhi.w 1f40 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    2016:	|                        jsr 439a <finishAccess>
	
	return TRUE;
    201c:	|                        moveq #1,d0
}
    201e:	\----------------------> movem.l (sp)+,d2-d3/a6
    2022:	                         lea 528(sp),sp
    2026:	                         rts

00002028 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    2028:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    202a:	             clr.l 4(sp)
    202e:	         /-- bra.s 2046 <sortZPal+0x1e>
		newpal[i] = i;
    2030:	      /--|-> move.l 4(sp),d0
    2034:	      |  |   add.l d0,d0
    2036:	      |  |   add.l d0,d0
    2038:	      |  |   movea.l 16(sp),a0
    203c:	      |  |   adda.l d0,a0
    203e:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    2042:	      |  |   addq.l #1,4(sp)
    2046:	      |  \-> move.l 4(sp),d0
    204a:	      |      cmp.l 20(sp),d0
    204e:	      \----- blt.s 2030 <sortZPal+0x8>
	}

	if (size < 2) return;		
    2050:	             moveq #1,d0
    2052:	             cmp.l 20(sp),d0
    2056:	/----------- bge.w 2108 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    205a:	|            moveq #1,d0
    205c:	|            move.l d0,4(sp)
    2060:	|     /----- bra.w 20fa <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    2064:	|  /--|----> move.l 4(sp),d0
    2068:	|  |  |      add.l d0,d0
    206a:	|  |  |      add.l d0,d0
    206c:	|  |  |      movea.l 16(sp),a0
    2070:	|  |  |      adda.l d0,a0
    2072:	|  |  |      move.l (a0),d0
    2074:	|  |  |      add.l d0,d0
    2076:	|  |  |      add.l d0,d0
    2078:	|  |  |      movea.l 12(sp),a0
    207c:	|  |  |      adda.l d0,a0
    207e:	|  |  |      move.l (a0),d1
    2080:	|  |  |      move.l 4(sp),d0
    2084:	|  |  |      addi.l #1073741823,d0
    208a:	|  |  |      add.l d0,d0
    208c:	|  |  |      add.l d0,d0
    208e:	|  |  |      movea.l 16(sp),a0
    2092:	|  |  |      adda.l d0,a0
    2094:	|  |  |      move.l (a0),d0
    2096:	|  |  |      add.l d0,d0
    2098:	|  |  |      add.l d0,d0
    209a:	|  |  |      movea.l 12(sp),a0
    209e:	|  |  |      adda.l d0,a0
    20a0:	|  |  |      move.l (a0),d0
    20a2:	|  |  |      cmp.l d1,d0
    20a4:	|  |  |  /-- ble.s 20f6 <sortZPal+0xce>
			tmp = newpal[i];
    20a6:	|  |  |  |   move.l 4(sp),d0
    20aa:	|  |  |  |   add.l d0,d0
    20ac:	|  |  |  |   add.l d0,d0
    20ae:	|  |  |  |   movea.l 16(sp),a0
    20b2:	|  |  |  |   adda.l d0,a0
    20b4:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    20b6:	|  |  |  |   move.l 4(sp),d0
    20ba:	|  |  |  |   addi.l #1073741823,d0
    20c0:	|  |  |  |   add.l d0,d0
    20c2:	|  |  |  |   add.l d0,d0
    20c4:	|  |  |  |   movea.l 16(sp),a1
    20c8:	|  |  |  |   adda.l d0,a1
    20ca:	|  |  |  |   move.l 4(sp),d0
    20ce:	|  |  |  |   add.l d0,d0
    20d0:	|  |  |  |   add.l d0,d0
    20d2:	|  |  |  |   movea.l 16(sp),a0
    20d6:	|  |  |  |   adda.l d0,a0
    20d8:	|  |  |  |   move.l (a1),d0
    20da:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    20dc:	|  |  |  |   move.l 4(sp),d0
    20e0:	|  |  |  |   addi.l #1073741823,d0
    20e6:	|  |  |  |   add.l d0,d0
    20e8:	|  |  |  |   add.l d0,d0
    20ea:	|  |  |  |   movea.l 16(sp),a0
    20ee:	|  |  |  |   adda.l d0,a0
    20f0:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    20f2:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    20f6:	|  |  |  \-> addq.l #1,4(sp)
    20fa:	|  |  \----> move.l 4(sp),d0
    20fe:	|  |         cmp.l 20(sp),d0
    2102:	|  \-------- blt.w 2064 <sortZPal+0x3c>
    2106:	|        /-- bra.s 210a <sortZPal+0xe2>
	if (size < 2) return;		
    2108:	\--------|-> nop
		}
	}
    210a:	         \-> addq.l #8,sp
    210c:	             rts

0000210e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    210e:	/-------> lea -16(sp),sp
    2112:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2114:	|         move.l 24(sp),-(sp)
    2118:	|         jsr 3fc0 <pauseFunction>
    211e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    2120:	|     /-- bra.s 2132 <abortFunction+0x24>
    2122:	|  /--|-> moveq #24,d0
    2124:	|  |  |   add.l 24(sp),d0
    2128:	|  |  |   move.l d0,-(sp)
    212a:	|  |  |   jsr 11806 <trimStack>
    2130:	|  |  |   addq.l #4,sp
    2132:	|  |  \-> movea.l 24(sp),a0
    2136:	|  |      move.l 24(a0),d0
    213a:	|  \----- bne.s 2122 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    213c:	|         movea.l 24(sp),a0
    2140:	|         move.l 4(a0),12(sp)
    2146:	|         move.l 19c50 <SysBase>,d0
    214c:	|         movea.l d0,a6
    214e:	|         movea.l 12(sp),a1
    2152:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2156:	|         clr.l 16(sp)
    215a:	|     /-- bra.s 217a <abortFunction+0x6c>
    215c:	|  /--|-> movea.l 24(sp),a0
    2160:	|  |  |   move.l 20(a0),d1
    2164:	|  |  |   move.l 16(sp),d0
    2168:	|  |  |   lsl.l #3,d0
    216a:	|  |  |   add.l d1,d0
    216c:	|  |  |   move.l d0,-(sp)
    216e:	|  |  |   jsr 110d0 <unlinkVar>
    2174:	|  |  |   addq.l #4,sp
    2176:	|  |  |   addq.l #1,16(sp)
    217a:	|  |  \-> movea.l 24(sp),a0
    217e:	|  |      move.l 8(a0),d0
    2182:	|  |      cmp.l 16(sp),d0
    2186:	|  \----- bgt.s 215c <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2188:	|         movea.l 24(sp),a0
    218c:	|         move.l 20(a0),8(sp)
    2192:	|         move.l 19c50 <SysBase>,d0
    2198:	|         movea.l d0,a6
    219a:	|         movea.l 8(sp),a1
    219e:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    21a2:	|         moveq #28,d0
    21a4:	|         add.l 24(sp),d0
    21a8:	|         move.l d0,-(sp)
    21aa:	|         jsr 110d0 <unlinkVar>
    21b0:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    21b2:	|         movea.l 24(sp),a0
    21b6:	|         move.l 40(a0),d0
    21ba:	|     /-- beq.s 21cc <abortFunction+0xbe>
    21bc:	|     |   movea.l 24(sp),a0
    21c0:	|     |   move.l 40(a0),d0
    21c4:	|     |   move.l d0,-(sp)
    21c6:	\-----|-- jsr 210e <abortFunction>(pc)
    21ca:	      |   addq.l #4,sp
	FreeVec(fun);
    21cc:	      \-> move.l 24(sp),4(sp)
    21d2:	          move.l 19c50 <SysBase>,d0
    21d8:	          movea.l d0,a6
    21da:	          movea.l 4(sp),a1
    21de:	          jsr -690(a6)
	fun = NULL;
    21e2:	          clr.l 24(sp)
}
    21e6:	          nop
    21e8:	          movea.l (sp)+,a6
    21ea:	          lea 16(sp),sp
    21ee:	          rts

000021f0 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    21f0:	          subq.l #8,sp
	int n = 0;
    21f2:	          clr.l 4(sp)
	*killedMyself = FALSE;
    21f6:	          movea.l 20(sp),a0
    21fa:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    21fc:	          move.l 19bec <allRunningFunctions>,(sp)
	while (fun) {
    2202:	   /----- bra.s 2230 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    2204:	/--|----> movea.l (sp),a0
    2206:	|  |      move.l (a0),d0
    2208:	|  |      cmp.l 12(sp),d0
    220c:	|  |  /-- bne.s 222a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    220e:	|  |  |   movea.l (sp),a0
    2210:	|  |  |   move.w #1,54(a0)
			n++;
    2216:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    221a:	|  |  |   move.l (sp),d0
    221c:	|  |  |   cmp.l 16(sp),d0
    2220:	|  |  +-- bne.s 222a <cancelAFunction+0x3a>
    2222:	|  |  |   movea.l 20(sp),a0
    2226:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    222a:	|  |  \-> movea.l (sp),a0
    222c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2230:	|  \----> tst.l (sp)
    2232:	\-------- bne.s 2204 <cancelAFunction+0x14>
	}
	return n;
    2234:	          move.l 4(sp),d0
}
    2238:	          addq.l #8,sp
    223a:	          rts

0000223c <completeTimers>:


void completeTimers () {
    223c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    223e:	          move.l 19bec <allRunningFunctions>,(sp)

	while (thisFunction) {
    2244:	   /----- bra.s 225a <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2246:	/--|----> movea.l (sp),a0
    2248:	|  |      move.b 56(a0),d0
    224c:	|  |  /-- bne.s 2254 <completeTimers+0x18>
    224e:	|  |  |   movea.l (sp),a0
    2250:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2254:	|  |  \-> movea.l (sp),a0
    2256:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    225a:	|  \----> tst.l (sp)
    225c:	\-------- bne.s 2246 <completeTimers+0xa>
	}
}
    225e:	          nop
    2260:	          nop
    2262:	          addq.l #4,sp
    2264:	          rts

00002266 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2266:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    226a:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2270:	                                                             movea.l 80(sp),a0
    2274:	                                                             move.w 54(a0),d0
    2278:	/----------------------------------------------------------- beq.w 3118 <continueFunction+0xeb2>
		abortFunction (fun);
    227c:	|                                                            move.l 80(sp),-(sp)
    2280:	|                                                            jsr 210e <abortFunction>
    2286:	|                                                            addq.l #4,sp
		return TRUE;
    2288:	|                                                            moveq #1,d0
    228a:	|  /-------------------------------------------------------- bra.w 3122 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    228e:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2294:	|  |  |                                                      movea.l 80(sp),a0
    2298:	|  |  |                                                      move.l 4(a0),d1
    229c:	|  |  |                                                      movea.l 80(sp),a0
    22a0:	|  |  |                                                      move.l 36(a0),d0
    22a4:	|  |  |                                                      lsl.l #3,d0
    22a6:	|  |  |                                                      movea.l d1,a0
    22a8:	|  |  |                                                      adda.l d0,a0
    22aa:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    22b0:	|  |  |                                                      movea.l 80(sp),a0
    22b4:	|  |  |                                                      move.l 4(a0),d1
    22b8:	|  |  |                                                      movea.l 80(sp),a0
    22bc:	|  |  |                                                      move.l 36(a0),d0
    22c0:	|  |  |                                                      lsl.l #3,d0
    22c2:	|  |  |                                                      movea.l d1,a0
    22c4:	|  |  |                                                      adda.l d0,a0
    22c6:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    22ca:	|  |  |                                                      move.l 64(sp),-(sp)
    22ce:	|  |  |                                                      pea 13f78 <PutChar+0x5da>
    22d4:	|  |  |                                                      jsr 12ed6 <KPrintF>
    22da:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    22dc:	|  |  |                                                      moveq #41,d0
    22de:	|  |  |                                                      cmp.l 64(sp),d0
    22e2:	|  |  |  /-------------------------------------------------- bcs.w 30cc <continueFunction+0xe66>
    22e6:	|  |  |  |                                                   move.l 64(sp),d0
    22ea:	|  |  |  |                                                   add.l d0,d0
    22ec:	|  |  |  |                                                   movea.l d0,a0
    22ee:	|  |  |  |                                                   adda.l #8954,a0
    22f4:	|  |  |  |                                                   move.w (a0),d0
    22f6:	|  |  |  |                                                   jmp (22fa <continueFunction+0x94>,pc,d0.w)
    22fa:	|  |  |  |                                                   bset d6,(a2)
    22fc:	|  |  |  |                                                   ori.w #2670,(a4)
    2300:	|  |  |  |                                                   eori.w #2416,d6
    2304:	|  |  |  |                                                   bchg d4,d2
    2306:	|  |  |  |                                                   bclr d4,(a4)+
    2308:	|  |  |  |                                                   andi.l #181013194,d4
    230e:	|  |  |  |                                                   .short 0x0aca
    2310:	|  |  |  |                                                   .short 0x0aca
    2312:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    231a:	|  |  |  |                                                   .short 0x0aca
    231c:	|  |  |  |                                                   andi.w #906,-(a4)
    2320:	|  |  |  |                                                   bchg d1,196(a2)
    2324:	|  |  |  |                                                   bset d1,580(a4)
    2328:	|  |  |  |                                                   bclr d1,2576(a2)
    232c:	|  |  |  |                                                   andi.b #-56,2762(a2)
    2332:	|  |  |  |                                                   .short 0x0aca
    2334:	|  |  |  |                                                   eori.l #63572682,d0
    233a:	|  |  |  |                                                   .short 0x0aca
    233c:	|  |  |  |                                                   bchg d3,-(a2)
    233e:	|  |  |  |                                                   bchg #-36,(a2)
    2342:	|  |  |  |                                                   .short 0x08cc
    2344:	|  |  |  |                                                   addi.b #14,1038(a0)
    234a:	|  |  |  |                                                   .short 0x040e
    234c:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2350:	|  |  |  |                                                   ori.w #8232,(a0)
    2354:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    235a:	|  |  |  |                                                   ori.w #12136,(a0)
    235e:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2364:	|  |  |  |                                                   ori.w #12328,(a0)
    2368:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    236e:	|  |  |  |                                                   add.l 44(sp),d1
    2372:	|  |  |  |                                                   moveq #28,d0
    2374:	|  |  |  |                                                   add.l 80(sp),d0
    2378:	|  |  |  |                                                   move.l d1,-(sp)
    237a:	|  |  |  |                                                   move.l d0,-(sp)
    237c:	|  |  |  |                                                   jsr 1133c <copyVariable>
    2382:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    2384:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2388:	|  |  |  |                                                   jsr 3128 <finishFunction>
    238e:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    2390:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2396:	|  |  |  |                                                   move.l 80(sp),-(sp)
    239a:	|  |  |  |                                                   jsr 4002 <restartFunction>
    23a0:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    23a2:	|  |  |  |  /----------------------------------------------- bra.w 3100 <continueFunction+0xe9a>
				finishFunction (fun);
    23a6:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    23aa:	|  |  |  |  |                                                jsr 3128 <finishFunction>
    23b0:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    23b2:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    23b6:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    23ba:	|  |  |  |  +----------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    23be:	|  |  |  |  |                                                movea.l 80(sp),a0
    23c2:	|  |  |  |  |                                                move.l 28(a0),d0
    23c6:	|  |  |  |  |                                                moveq #2,d1
    23c8:	|  |  |  |  |                                                cmp.l d0,d1
    23ca:	|  |  |  |  |                                            /-- beq.s 23d6 <continueFunction+0x170>
    23cc:	|  |  |  |  |                                            |   moveq #4,d1
    23ce:	|  |  |  |  |                                            |   cmp.l d0,d1
    23d0:	|  |  |  |  |                                         /--|-- beq.s 2424 <continueFunction+0x1be>
    23d2:	|  |  |  |  |                                /--------|--|-- bra.w 250c <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    23d6:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    23da:	|  |  |  |  |                                |        |      jsr 3fc0 <pauseFunction>
    23e0:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    23e2:	|  |  |  |  |                                |        |      moveq #24,d0
    23e4:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    23e8:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    23ec:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    23f0:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    23f4:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    23f6:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    23fa:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    23fe:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    2400:	|  |  |  |  |                                |        |      jsr 422c <startNewFunctionNum>
    2406:	|  |  |  |  |                                |        |      lea 20(sp),sp
    240a:	|  |  |  |  |                                |        |      tst.l d0
    240c:	|  |  |  |  |                                |        |  /-- bne.s 2414 <continueFunction+0x1ae>
    240e:	|  |  |  |  |                                |        |  |   clr.w d0
    2410:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 3122 <continueFunction+0xebc>
				fun = allRunningFunctions;
    2414:	|  |  |  |  |                                |        |  \-> move.l 19bec <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    241c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    2420:	|  |  |  |  |                                |  /-----|----- bra.w 2520 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    2424:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    2428:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    242c:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    2430:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    2434:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    2436:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    2438:	|  |  |  |  |                                |  |            jsr fb80 <callBuiltIn>
    243e:	|  |  |  |  |                                |  |            lea 12(sp),sp
    2442:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2446:	|  |  |  |  |                                |  |            moveq #5,d0
    2448:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    244c:	|  |  |  |  |                                |  |  /-------- bcs.w 2508 <continueFunction+0x2a2>
    2450:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    2454:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2456:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2458:	|  |  |  |  |                                |  |  |         adda.l #9316,a0
    245e:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    2460:	|  |  |  |  |                                |  |  |         jmp (2464 <continueFunction+0x1fe>,pc,d0.w)
    2464:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    246a:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    246e:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    2474:	|  |  |  |  |                                |  |  |         move.w a4,(-71,sp,d4.l:8)
    2478:	|  |  |  |  |                                |  |  |         ori.b #-42,d1
    247c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    247e:	|  |  |  |  |                                |  |  |         clr.w d0
    2480:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 3122 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    2484:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    2488:	|  |  |  |  |                                |  |  |         jsr 3fc0 <pauseFunction>
    248e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    2490:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    2494:	|  |  |  |  |                                |  |  |  /----- bra.s 250a <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2496:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    249a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    249e:	|  |  |  |  |                                |  |  |  +----- bra.s 250a <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    24a0:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    24a4:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    24aa:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    24ac:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    24b0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    24b4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    24b8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    24ba:	|  |  |  |  |                                |  |  |  |      jsr 11774 <setVariable>
    24c0:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    24c4:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    24c8:	|  |  |  |  |                                |  |  |  |      jsr 3fc0 <pauseFunction>
    24ce:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    24d0:	|  |  |  |  |                                |  |  |  |      move.l 19c20 <noStack>,d1
    24d6:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    24da:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    24dc:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    24de:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    24e2:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    24e4:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    24e6:	|  |  |  |  |                                |  |  |  |      jsr 422c <startNewFunctionNum>
    24ec:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    24f0:	|  |  |  |  |                                |  |  |  |      tst.l d0
    24f2:	|  |  |  |  |                                |  |  |  |  /-- bne.s 24fa <continueFunction+0x294>
    24f4:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    24f6:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 3122 <continueFunction+0xebc>
							fun = allRunningFunctions;
    24fa:	|  |  |  |  |                                |  |  |  |  \-> move.l 19bec <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    2502:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    2506:	|  |  |  |  |                                |  |  |  +----- bra.s 250a <continueFunction+0x2a4>

						default:
						break;
    2508:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    250a:	|  |  |  |  |                                |  +-----\----X bra.s 2520 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    250c:	|  |  |  |  |                                \--|----------> pea 13fd7 <PutChar+0x639>
    2512:	|  |  |  |  |                                   |            jsr 12ed6 <KPrintF>
    2518:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    251a:	|  |  |  |  |                                   |            clr.w d0
    251c:	|  +--|--|--|-----------------------------------|----------- bra.w 3122 <continueFunction+0xebc>
			}
			break;
    2520:	|  |  |  |  +-----------------------------------\----------X bra.w 3100 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    2524:	|  |  |  |  |                                                moveq #28,d0
    2526:	|  |  |  |  |                                                add.l 80(sp),d0
    252a:	|  |  |  |  |                                                clr.l -(sp)
    252c:	|  |  |  |  |                                                clr.l -(sp)
    252e:	|  |  |  |  |                                                move.l d0,-(sp)
    2530:	|  |  |  |  |                                                jsr 11774 <setVariable>
    2536:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    253a:	|  |  |  |  +----------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    253e:	|  |  |  |  |                                                move.l 68(sp),d1
    2542:	|  |  |  |  |                                                moveq #28,d0
    2544:	|  |  |  |  |                                                add.l 80(sp),d0
    2548:	|  |  |  |  |                                                move.l d1,-(sp)
    254a:	|  |  |  |  |                                                pea 5 <_start+0x5>
    254e:	|  |  |  |  |                                                move.l d0,-(sp)
    2550:	|  |  |  |  |                                                jsr 11774 <setVariable>
    2556:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    255a:	|  |  |  |  +----------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    255e:	|  |  |  |  |                                                move.l 68(sp),d1
    2562:	|  |  |  |  |                                                moveq #28,d0
    2564:	|  |  |  |  |                                                add.l 80(sp),d0
    2568:	|  |  |  |  |                                                move.l d1,-(sp)
    256a:	|  |  |  |  |                                                pea 1 <_start+0x1>
    256e:	|  |  |  |  |                                                move.l d0,-(sp)
    2570:	|  |  |  |  |                                                jsr 11774 <setVariable>
    2576:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    257a:	|  |  |  |  +----------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    257e:	|  |  |  |  |                                                moveq #28,d0
    2580:	|  |  |  |  |                                                add.l 80(sp),d0
    2584:	|  |  |  |  |                                                movea.l 80(sp),a0
    2588:	|  |  |  |  |                                                movea.l 20(a0),a0
    258c:	|  |  |  |  |                                                move.l 68(sp),d1
    2590:	|  |  |  |  |                                                lsl.l #3,d1
    2592:	|  |  |  |  |                                                add.l a0,d1
    2594:	|  |  |  |  |                                                move.l d0,-(sp)
    2596:	|  |  |  |  |                                                move.l d1,-(sp)
    2598:	|  |  |  |  |                                                jsr 1133c <copyVariable>
    259e:	|  |  |  |  |                                                addq.l #8,sp
    25a0:	|  |  |  |  |                                                tst.w d0
    25a2:	|  |  |  |  |  /-------------------------------------------- bne.w 30de <continueFunction+0xe78>
    25a6:	|  |  |  |  |  |                                             clr.w d0
    25a8:	|  +--|--|--|--|-------------------------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    25ac:	|  |  |  |  |  |                                             moveq #28,d0
    25ae:	|  |  |  |  |  |                                             add.l 80(sp),d0
    25b2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25b4:	|  |  |  |  |  |                                             jsr 113c2 <getBoolean>
    25ba:	|  |  |  |  |  |                                             addq.l #4,sp
    25bc:	|  |  |  |  |  |                                             tst.w d0
    25be:	|  |  |  |  |  |                                      /----- beq.s 25da <continueFunction+0x374>
    25c0:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    25c4:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    25c8:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    25ca:	|  |  |  |  |  |                                      |      jsr 113c2 <getBoolean>
    25d0:	|  |  |  |  |  |                                      |      addq.l #4,sp
    25d2:	|  |  |  |  |  |                                      |      tst.w d0
    25d4:	|  |  |  |  |  |                                      +----- beq.s 25da <continueFunction+0x374>
    25d6:	|  |  |  |  |  |                                      |      moveq #1,d0
    25d8:	|  |  |  |  |  |                                      |  /-- bra.s 25dc <continueFunction+0x376>
    25da:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    25dc:	|  |  |  |  |  |                                         \-> moveq #28,d1
    25de:	|  |  |  |  |  |                                             add.l 80(sp),d1
    25e2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25e4:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    25e8:	|  |  |  |  |  |                                             move.l d1,-(sp)
    25ea:	|  |  |  |  |  |                                             jsr 11774 <setVariable>
    25f0:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    25f4:	|  |  |  |  |  |                                             moveq #24,d0
    25f6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    25fa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25fc:	|  |  |  |  |  |                                             jsr 11806 <trimStack>
    2602:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2604:	|  |  |  |  +--|-------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    2608:	|  |  |  |  |  |                                             moveq #28,d0
    260a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    260e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2610:	|  |  |  |  |  |                                             jsr 113c2 <getBoolean>
    2616:	|  |  |  |  |  |                                             addq.l #4,sp
    2618:	|  |  |  |  |  |                                             tst.w d0
    261a:	|  |  |  |  |  |                                         /-- bne.s 2632 <continueFunction+0x3cc>
    261c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2620:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2624:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2626:	|  |  |  |  |  |                                         |   jsr 113c2 <getBoolean>
    262c:	|  |  |  |  |  |                                         |   addq.l #4,sp
    262e:	|  |  |  |  |  |                                         |   tst.w d0
    2630:	|  |  |  |  |  |                                      /--|-- beq.s 2636 <continueFunction+0x3d0>
    2632:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2634:	|  |  |  |  |  |                                      |  /-- bra.s 2638 <continueFunction+0x3d2>
    2636:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2638:	|  |  |  |  |  |                                         \-> moveq #28,d1
    263a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    263e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2640:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2644:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2646:	|  |  |  |  |  |                                             jsr 11774 <setVariable>
    264c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2650:	|  |  |  |  |  |                                             moveq #24,d0
    2652:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2656:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2658:	|  |  |  |  |  |                                             jsr 11806 <trimStack>
    265e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2660:	|  |  |  |  +--|-------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2664:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2668:	|  |  |  |  |  |                                             moveq #28,d0
    266a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    266e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2670:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2674:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2676:	|  |  |  |  |  |                                             jsr 11774 <setVariable>
    267c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2680:	|  |  |  |  +--|-------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2684:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2688:	|  |  |  |  |  |                                             moveq #28,d0
    268a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    268e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2690:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2694:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2696:	|  |  |  |  |  |                                             jsr 11774 <setVariable>
    269c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    26a0:	|  |  |  |  +--|-------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    26a4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    26a8:	|  |  |  |  |  |                                             moveq #28,d0
    26aa:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26ae:	|  |  |  |  |  |                                             move.l d1,-(sp)
    26b0:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    26b4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26b6:	|  |  |  |  |  |                                             jsr 11774 <setVariable>
    26bc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    26c0:	|  |  |  |  +--|-------------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    26c4:	|  |  |  |  |  |                                             move.l 19b5c <dialogValue>,d0
    26ca:	|  |  |  |  |  |                                             moveq #1,d1
    26cc:	|  |  |  |  |  |                                             cmp.l d0,d1
    26ce:	|  |  |  |  |  |  /----------------------------------------- beq.w 30e2 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    26d2:	|  |  |  |  |  |  |                                          pea 13fec <PutChar+0x64e>
    26d8:	|  |  |  |  |  |  |                                          jsr 12ed6 <KPrintF>
    26de:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    26e0:	|  |  |  |  |  |  |                                          clr.w d0
    26e2:	|  +--|--|--|--|--|----------------------------------------- bra.w 3122 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    26e6:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    26ea:	|  |  |  |  |  |  |                                          moveq #28,d0
    26ec:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    26f0:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    26f2:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    26f4:	|  |  |  |  |  |  |                                          jsr 10f06 <loadStringToVar>
    26fa:	|  |  |  |  |  |  |                                          addq.l #8,sp
    26fc:	|  |  |  |  |  |  |                                          tst.w d0
    26fe:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 30e6 <continueFunction+0xe80>
					return FALSE;
    2702:	|  |  |  |  |  |  |  |                                       clr.w d0
    2704:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2708:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    270c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2710:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2712:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2714:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2716:	|  |  |  |  |  |  |  |                                /----- beq.s 2774 <continueFunction+0x50e>
    2718:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    271a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    271c:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2908 <continueFunction+0x6a2>
    2720:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2722:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 272e <continueFunction+0x4c8>
    2724:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2726:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2728:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2774 <continueFunction+0x50e>
    272a:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2908 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    272e:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2730:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2734:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2760 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2736:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2738:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    273c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    273e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2740:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2742:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11774 <setVariable>
    2748:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    274c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    274e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2752:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2754:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11806 <trimStack>
    275a:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    275c:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 291e <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2760:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1402d <PutChar+0x68f>
    2766:	|  |  |  |  |  |  |  |              |  |              |      jsr 12ed6 <KPrintF>
    276c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    276e:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2770:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 3122 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2774:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2778:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    277c:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2780:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2782:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2798 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2784:	|  |  |  |  |  |  |  |              |  |                 |   pea 14069 <PutChar+0x6cb>
    278a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12ed6 <KPrintF>
    2790:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2792:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2794:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3122 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2798:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    279a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    279e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    27a0:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    27a4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    27a8:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    27aa:	|  |  |  |  |  |  |  |              |  |                     jsr 10e82 <getValueType>
    27b0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    27b4:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    27b6:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 27be <continueFunction+0x558>
    27b8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    27ba:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3122 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    27be:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    27c2:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    27c6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    27c8:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    27ca:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    27cc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 27ee <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    27ce:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    27d2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    27d4:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    27d8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    27dc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    27e0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    27e2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    27e4:	|  |  |  |  |  |  |  |              |  |                 |   jsr 10b0c <fastArrayGetByIndex>
    27ea:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    27ec:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 280e <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    27ee:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    27f2:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    27f4:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    27f8:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    27fc:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2800:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2802:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2804:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2806:	|  |  |  |  |  |  |  |              |  |              |      jsr 11796 <stackGetByIndex>
    280c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    280e:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2812:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2814:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2818:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    281a:	|  |  |  |  |  |  |  |              |  |                     jsr 11806 <trimStack>
    2820:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2822:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2826:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2842 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2828:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    282a:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    282e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2830:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2832:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2834:	|  |  |  |  |  |  |  |              |  |                 |   jsr 11774 <setVariable>
    283a:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    283e:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 291c <continueFunction+0x6b6>
    2842:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2844:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2848:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2856 <continueFunction+0x5f0>
    284a:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    284c:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2850:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 28a0 <continueFunction+0x63a>
    2852:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 28e8 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2856:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    285a:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    285e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2862:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2864:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10e82 <getValueType>
    286a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    286e:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2870:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2878 <continueFunction+0x612>
    2872:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2874:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2902 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2878:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    287a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    287c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2880:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2882:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2886:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2888:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 11774 <setVariable>
    288e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2892:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2894:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2896:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    289a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    289e:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2906 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    28a0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    28a4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    28a8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    28ac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    28ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10e82 <getValueType>
    28b4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    28b8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    28ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 28c0 <continueFunction+0x65a>
    28bc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    28be:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2902 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    28c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    28c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    28c4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    28c8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    28ca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    28ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    28d0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 11774 <setVariable>
    28d6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    28da:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    28dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    28de:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    28e2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    28e6:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2906 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    28e8:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    28ea:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    28ee:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    28f0:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    28f4:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1133c <copyVariable>
    28fa:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    28fc:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    28fe:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 291c <continueFunction+0x6b6>
    2900:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2902:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 3122 <continueFunction+0xebc>
				break;
    2906:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 291c <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2908:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 14087 <PutChar+0x6e9>
    290e:	|  |  |  |  |  |  |  |                 |  |                  jsr 12ed6 <KPrintF>
    2914:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2916:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2918:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 3122 <continueFunction+0xebc>
				break;
    291c:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    291e:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 3100 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2922:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2926:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    292a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    292c:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    292e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2930:	|  |  |  |  |  |  |  |                                   /-- beq.s 293e <continueFunction+0x6d8>
    2932:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2934:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2936:	|  |  |  |  |  |  |  |                                /--|-- beq.w 29ea <continueFunction+0x784>
    293a:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2a48 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    293e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2942:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2946:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    294a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    294c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2962 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    294e:	|  |  |  |  |  |  |  |                             |  |  |   pea 14069 <PutChar+0x6cb>
    2954:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12ed6 <KPrintF>
    295a:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    295c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    295e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3122 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2962:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2964:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2968:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    296a:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    296e:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2972:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2974:	|  |  |  |  |  |  |  |                             |  |      jsr 10e82 <getValueType>
    297a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    297e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2980:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2988 <continueFunction+0x722>
    2982:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2984:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3122 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2988:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    298c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2990:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2994:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2996:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    299a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    299c:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    29a0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    29a4:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    29a8:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    29aa:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    29ac:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    29ae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29b0:	|  |  |  |  |  |  |  |                             |  |      jsr 41e8 <stackSetByIndex>
    29b6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    29ba:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    29bc:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 29c4 <continueFunction+0x75e>
						return FALSE;
    29be:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    29c0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3122 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    29c4:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    29c6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    29ca:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29cc:	|  |  |  |  |  |  |  |                             |  |      jsr 11806 <trimStack>
    29d2:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    29d4:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    29d6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    29da:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29dc:	|  |  |  |  |  |  |  |                             |  |      jsr 11806 <trimStack>
    29e2:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    29e4:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    29e6:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 3100 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    29ea:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    29ec:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    29f0:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    29f2:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    29f6:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    29fa:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    29fc:	|  |  |  |  |  |  |  |                             |         jsr 10e82 <getValueType>
    2a02:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2a06:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2a08:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2a10 <continueFunction+0x7aa>
    2a0a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2a0c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 3122 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2a10:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2a14:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2a16:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2a1a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2a1e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2a22:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2a24:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2a26:	|  |  |  |  |  |  |  |                             |         jsr 10b0c <fastArrayGetByIndex>
    2a2c:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2a2e:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2a32:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2a42 <continueFunction+0x7dc>
    2a34:	|  |  |  |  |  |  |  |                             |     |   pea 140ab <PutChar+0x70d>
    2a3a:	|  |  |  |  |  |  |  |                             |     |   jsr 12ed6 <KPrintF>
    2a40:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2a42:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2a44:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 3122 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2a48:	|  |  |  |  |  |  |  |                             \-------> pea 14087 <PutChar+0x6e9>
    2a4e:	|  |  |  |  |  |  |  |                                       jsr 12ed6 <KPrintF>
    2a54:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2a56:	|  |  |  |  |  |  |  |                                       clr.w d0
    2a58:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3122 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2a5c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2a60:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2a64:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2a68:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2a6a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2a6c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2a6e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2a72:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2a76:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2a78:	|  |  |  |  |  |  |  |                                       jsr 10e82 <getValueType>
    2a7e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2a82:	|  |  |  |  |  |  |  |                                       tst.w d0
    2a84:	|  |  |  |  |  |  |  |                                   /-- bne.s 2a8c <continueFunction+0x826>
    2a86:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2a88:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3122 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2a8c:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2a90:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2a92:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2a96:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2a98:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2a9c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2a9e:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2aa4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2aa8:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2aac:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2aae:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2ab0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ab4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2ab8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2abc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2abe:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2ac0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ac2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ac6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ac8:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2ace:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2ad2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2ad6:	|  |  |  |  |  |  |  |                                       move.l 19c02 <globalVars>,d1
    2adc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ae0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ae2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ae4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ae6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2aea:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2aee:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2af0:	|  |  |  |  |  |  |  |                                       jsr 10e82 <getValueType>
    2af6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2afa:	|  |  |  |  |  |  |  |                                       tst.w d0
    2afc:	|  |  |  |  |  |  |  |                                   /-- bne.s 2b04 <continueFunction+0x89e>
    2afe:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2b00:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3122 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2b04:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2b08:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2b0a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2b0e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b10:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b14:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b16:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2b1c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2b20:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2b24:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2b26:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2b28:	|  |  |  |  |  |  |  |                                       movea.l 19c02 <globalVars>,a0
    2b2e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b32:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b34:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b36:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b38:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b3c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b3e:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2b44:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b48:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2b4c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b50:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2b54:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b58:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b5a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2b5c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b5e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b62:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2b66:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2b68:	|  |  |  |  |  |  |  |                                       jsr 10e82 <getValueType>
    2b6e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2b72:	|  |  |  |  |  |  |  |                                       tst.w d0
    2b74:	|  |  |  |  |  |  |  |                                   /-- bne.s 2b7c <continueFunction+0x916>
    2b76:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2b78:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3122 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2b7c:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2b80:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2b82:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2b86:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b88:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b8c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b8e:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2b94:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2b98:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2b9c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2b9e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2ba0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ba4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2ba8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2bac:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2bae:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2bb0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bb2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bb6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bb8:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2bbe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2bc2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2bc6:	|  |  |  |  |  |  |  |                                       move.l 19c02 <globalVars>,d1
    2bcc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2bd0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2bd2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2bd4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bd6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bda:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2bde:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2be0:	|  |  |  |  |  |  |  |                                       jsr 10e82 <getValueType>
    2be6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2bea:	|  |  |  |  |  |  |  |                                       tst.w d0
    2bec:	|  |  |  |  |  |  |  |                                   /-- bne.s 2bf4 <continueFunction+0x98e>
    2bee:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2bf0:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3122 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2bf4:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2bf8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2bfa:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2bfe:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c00:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c04:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c06:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2c0c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2c10:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2c14:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2c16:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2c18:	|  |  |  |  |  |  |  |                                       movea.l 19c02 <globalVars>,a0
    2c1e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c22:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c24:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2c26:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c28:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c2c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c2e:	|  |  |  |  |  |  |  |                                       jsr 11774 <setVariable>
    2c34:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2c38:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2c3c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2c40:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2c44:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c48:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c4a:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2c4c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2c4e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2c52:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c54:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c56:	|  |  |  |  |  |  |  |                                       jsr 1133c <copyVariable>
    2c5c:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2c5e:	|  |  |  |  |  |  |  |                                       tst.w d0
    2c60:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 30ea <continueFunction+0xe84>
    2c64:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2c66:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2c6a:	|  |  |  |  |  |  |  |  |                                    move.l 19c02 <globalVars>,d1
    2c70:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2c74:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2c76:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    2c78:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2c7a:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2c7e:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2c80:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2c82:	|  |  |  |  |  |  |  |  |                                    jsr 1133c <copyVariable>
    2c88:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2c8a:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2c8c:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 30ee <continueFunction+0xe88>
    2c90:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2c92:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2c96:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2c98:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2c9c:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19c02 <globalVars>,a0
    2ca2:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2ca6:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2ca8:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2caa:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2cac:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2cae:	|  |  |  |  |  |  |  |  |  |                                 jsr 1133c <copyVariable>
    2cb4:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2cb6:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2cb8:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 30f2 <continueFunction+0xe8c>
    2cbc:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2cbe:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2cc2:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2cc4:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2cc8:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2cca:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2cce:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2cd0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2cd2:	|  |  |  |  |  |  |  |  |  |  |                              jsr 106be <addVarToStack>
    2cd8:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    2cda:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    2cdc:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 30f6 <continueFunction+0xe90>
    2ce0:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2ce2:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    2ce6:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    2ce8:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    2cec:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2cee:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2cf2:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2cf4:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2cf6:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 10744 <addVarToStackQuick>
    2cfc:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2cfe:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2d00:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 30fa <continueFunction+0xe94>
    2d04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2d06:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 3122 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    2d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d10:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d12:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 113c2 <getBoolean>
    2d18:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2d20:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2d22:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2d24:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d26:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2d30:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d32:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11774 <setVariable>
    2d38:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2d3c:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2d40:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d42:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d46:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d48:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 113c2 <getBoolean>
    2d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2d50:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 30fe <continueFunction+0xe98>
				advanceNow = FALSE;
    2d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 30fe <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    2d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2d76:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3100 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2d80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10e82 <getValueType>
    2d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    2d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    2d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2da0 <continueFunction+0xb3a>
    2d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2d9c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 3122 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    2da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    2da6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    2da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 11774 <setVariable>
    2dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2dc0:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3100 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    2dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 30b6 <continueFunction+0xe50>
    2dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2e52 <continueFunction+0xbec>
    2dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    2dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2e9c <continueFunction+0xc36>
    2de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    2de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2df6 <continueFunction+0xb90>
    2dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2e24 <continueFunction+0xbbe>
    2df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2e9c <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    2df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    2e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 107b8 <addVariablesInSecond>
    2e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11806 <trimStack>
    2e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 30ca <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 10876 <compareVariablesInSecond>
    2e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11806 <trimStack>
    2e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 30ca <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 10876 <compareVariablesInSecond>
    2e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11806 <trimStack>
    2e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 30ca <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    2ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10e82 <getValueType>
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2ec4 <continueFunction+0xc5e>
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2ec0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3122 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    2ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    2ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    2ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10e82 <getValueType>
    2edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2eea <continueFunction+0xc84>
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2ee6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3122 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    2eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11806 <trimStack>
    2ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 30c8 <continueFunction+0xe62>
    2f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #12056,a0
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2f18 <continueFunction+0xcb2>,pc,d0.w)
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13888 <__mulsi3>
    2f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 30ca <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 30ca <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13934 <__modsi3>
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 30ca <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13906 <__divsi3>
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 30ca <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 30ca <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 30ca <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 30ca <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11774 <setVariable>
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 30ca <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 140cc <PutChar+0x72e>
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12ed6 <KPrintF>
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    30c6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 3122 <continueFunction+0xebc>
						break;
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    30ca:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 3100 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    30cc:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 140e4 <PutChar+0x746>
    30d2:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12ed6 <KPrintF>
    30d8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    30da:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    30dc:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 3122 <continueFunction+0xebc>
			break;
    30de:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    30e0:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30e2:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    30e4:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30e6:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    30e8:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30ea:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    30ec:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30ee:	|  |  |     |              \--|--|--|--|-------------------> nop
    30f0:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30f2:	|  |  |     |                 \--|--|--|-------------------> nop
    30f4:	|  |  |     +--------------------|--|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30f6:	|  |  |     |                    \--|--|-------------------> nop
    30f8:	|  |  |     +-----------------------|--|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30fa:	|  |  |     |                       \--|-------------------> nop
    30fc:	|  |  |     +--------------------------|-------------------- bra.s 3100 <continueFunction+0xe9a>
			break;
    30fe:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    3100:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    3104:	+--|--|----------------------------------------------------- beq.s 3118 <continueFunction+0xeb2>
    3106:	|  |  |                                                      movea.l 80(sp),a0
    310a:	|  |  |                                                      move.l 36(a0),d0
    310e:	|  |  |                                                      addq.l #1,d0
    3110:	|  |  |                                                      movea.l 80(sp),a0
    3114:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    3118:	\--|--|----------------------------------------------------> tst.w 74(sp)
    311c:	   |  \----------------------------------------------------- bne.w 228e <continueFunction+0x28>

	}
	return TRUE;
    3120:	   |                                                         moveq #1,d0
}
    3122:	   \-------------------------------------------------------> lea 76(sp),sp
    3126:	                                                             rts

00003128 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    3128:	       lea -16(sp),sp
    312c:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    312e:	       move.l 24(sp),-(sp)
    3132:	       jsr 3fc0 <pauseFunction>
    3138:	       addq.l #4,sp
	if (fun -> stack) 
    313a:	       movea.l 24(sp),a0
    313e:	       move.l 24(a0),d0
    3142:	   /-- beq.s 3158 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3144:	   |   pea 14110 <PutChar+0x772>
    314a:	   |   pea 1413d <cursors.c.412ac4f3+0x3>
    3150:	   |   jsr 12ed6 <KPrintF>
    3156:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3158:	   \-> movea.l 24(sp),a0
    315c:	       move.l 4(a0),12(sp)
    3162:	       move.l 19c50 <SysBase>,d0
    3168:	       movea.l d0,a6
    316a:	       movea.l 12(sp),a1
    316e:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3172:	       clr.l 16(sp)
    3176:	   /-- bra.s 3196 <finishFunction+0x6e>
    3178:	/--|-> movea.l 24(sp),a0
    317c:	|  |   move.l 20(a0),d1
    3180:	|  |   move.l 16(sp),d0
    3184:	|  |   lsl.l #3,d0
    3186:	|  |   add.l d1,d0
    3188:	|  |   move.l d0,-(sp)
    318a:	|  |   jsr 110d0 <unlinkVar>
    3190:	|  |   addq.l #4,sp
    3192:	|  |   addq.l #1,16(sp)
    3196:	|  \-> movea.l 24(sp),a0
    319a:	|      move.l 8(a0),d0
    319e:	|      cmp.l 16(sp),d0
    31a2:	\----- bgt.s 3178 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    31a4:	       movea.l 24(sp),a0
    31a8:	       move.l 8(a0),d0
    31ac:	   /-- ble.s 31c8 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    31ae:	   |   movea.l 24(sp),a0
    31b2:	   |   move.l 20(a0),8(sp)
    31b8:	   |   move.l 19c50 <SysBase>,d0
    31be:	   |   movea.l d0,a6
    31c0:	   |   movea.l 8(sp),a1
    31c4:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    31c8:	   \-> moveq #28,d0
    31ca:	       add.l 24(sp),d0
    31ce:	       move.l d0,-(sp)
    31d0:	       jsr 110d0 <unlinkVar>
    31d6:	       addq.l #4,sp
	FreeVec(fun);
    31d8:	       move.l 24(sp),4(sp)
    31de:	       move.l 19c50 <SysBase>,d0
    31e4:	       movea.l d0,a6
    31e6:	       movea.l 4(sp),a1
    31ea:	       jsr -690(a6)
	fun = NULL;
    31ee:	       clr.l 24(sp)
}
    31f2:	       nop
    31f4:	       movea.l (sp)+,a6
    31f6:	       lea 16(sp),sp
    31fa:	       rts

000031fc <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    31fc:	jsr 401c <runSludge>
}
    3202:	rts

00003204 <initSludge>:

BOOL initSludge (char * filename) {
    3204:	             lea -296(sp),sp
    3208:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    320c:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    3210:	             jsr 72fc <makeNullAnim>
    3216:	             move.l d0,19b2c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    321c:	             pea 19bfe <gameVersion>
    3222:	             pea 1414d <cursors.c.412ac4f3+0x13>
    3228:	             pea 45 <_start+0x45>
    322c:	             pea 47 <_start+0x47>
    3230:	             move.l 336(sp),-(sp)
    3234:	             jsr 3c50 <openAndVerify>
    323a:	             lea 20(sp),sp
    323e:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    3242:	         /-- bne.s 324a <initSludge+0x46>
    3244:	         |   clr.w d0
    3246:	/--------|-- bra.w 3970 <initSludge+0x76c>
	if (FGetC (fp)) {
    324a:	|        \-> move.l 292(sp),288(sp)
    3250:	|            move.l 19c58 <DOSBase>,d0
    3256:	|            movea.l d0,a6
    3258:	|            move.l 288(sp),d1
    325c:	|            jsr -306(a6)
    3260:	|            move.l d0,284(sp)
    3264:	|            move.l 284(sp),d0
    3268:	|  /-------- beq.w 340e <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    326c:	|  |         move.l 292(sp),-(sp)
    3270:	|  |         jsr 6bc <get2bytes>
    3276:	|  |         addq.l #4,sp
    3278:	|  |         move.l d0,19c24 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    327e:	|  |         move.l 19c24 <numBIFNames>,d0
    3284:	|  |         move.l d0,280(sp)
    3288:	|  |         clr.l 276(sp)
    328c:	|  |         move.l 19c50 <SysBase>,d0
    3292:	|  |         movea.l d0,a6
    3294:	|  |         move.l 280(sp),d0
    3298:	|  |         move.l 276(sp),d1
    329c:	|  |         jsr -684(a6)
    32a0:	|  |         move.l d0,272(sp)
    32a4:	|  |         move.l 272(sp),d0
    32a8:	|  |         move.l d0,19be4 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    32ae:	|  |         move.l 19be4 <allBIFNames>,d0
    32b4:	|  |     /-- bne.s 32bc <initSludge+0xb8>
    32b6:	|  |     |   clr.w d0
    32b8:	+--|-----|-- bra.w 3970 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    32bc:	|  |     \-> clr.l 308(sp)
    32c0:	|  |     /-- bra.s 32e6 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    32c2:	|  |  /--|-> move.l 19be4 <allBIFNames>,d1
    32c8:	|  |  |  |   move.l 308(sp),d0
    32cc:	|  |  |  |   add.l d0,d0
    32ce:	|  |  |  |   add.l d0,d0
    32d0:	|  |  |  |   movea.l d1,a2
    32d2:	|  |  |  |   adda.l d0,a2
    32d4:	|  |  |  |   move.l 292(sp),-(sp)
    32d8:	|  |  |  |   jsr b02 <readString>
    32de:	|  |  |  |   addq.l #4,sp
    32e0:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    32e2:	|  |  |  |   addq.l #1,308(sp)
    32e6:	|  |  |  \-> move.l 19c24 <numBIFNames>,d0
    32ec:	|  |  |      cmp.l 308(sp),d0
    32f0:	|  |  \----- bgt.s 32c2 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    32f2:	|  |         move.l 292(sp),-(sp)
    32f6:	|  |         jsr 6bc <get2bytes>
    32fc:	|  |         addq.l #4,sp
    32fe:	|  |         move.l d0,19c30 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    3304:	|  |         move.l 19c30 <numUserFunc>,d0
    330a:	|  |         move.l d0,268(sp)
    330e:	|  |         clr.l 264(sp)
    3312:	|  |         move.l 19c50 <SysBase>,d0
    3318:	|  |         movea.l d0,a6
    331a:	|  |         move.l 268(sp),d0
    331e:	|  |         move.l 264(sp),d1
    3322:	|  |         jsr -684(a6)
    3326:	|  |         move.l d0,260(sp)
    332a:	|  |         move.l 260(sp),d0
    332e:	|  |         move.l d0,19bf0 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3334:	|  |         move.l 19bf0 <allUserFunc>,d0
    333a:	|  |     /-- bne.s 3342 <initSludge+0x13e>
    333c:	|  |     |   clr.w d0
    333e:	+--|-----|-- bra.w 3970 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    3342:	|  |     \-> clr.l 304(sp)
    3346:	|  |     /-- bra.s 336c <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3348:	|  |  /--|-> move.l 19bf0 <allUserFunc>,d1
    334e:	|  |  |  |   move.l 304(sp),d0
    3352:	|  |  |  |   add.l d0,d0
    3354:	|  |  |  |   add.l d0,d0
    3356:	|  |  |  |   movea.l d1,a2
    3358:	|  |  |  |   adda.l d0,a2
    335a:	|  |  |  |   move.l 292(sp),-(sp)
    335e:	|  |  |  |   jsr b02 <readString>
    3364:	|  |  |  |   addq.l #4,sp
    3366:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3368:	|  |  |  |   addq.l #1,304(sp)
    336c:	|  |  |  \-> move.l 19c30 <numUserFunc>,d0
    3372:	|  |  |      cmp.l 304(sp),d0
    3376:	|  |  \----- bgt.s 3348 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3378:	|  |         move.l 19bfe <gameVersion>,d0
    337e:	|  |         cmpi.l #258,d0
    3384:	|  +-------- ble.w 340e <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    3388:	|  |         move.l 292(sp),-(sp)
    338c:	|  |         jsr 6bc <get2bytes>
    3392:	|  |         addq.l #4,sp
    3394:	|  |         move.l d0,19c2c <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    339a:	|  |         move.l 19c2c <numResourceNames>,d0
    33a0:	|  |         move.l d0,256(sp)
    33a4:	|  |         clr.l 252(sp)
    33a8:	|  |         move.l 19c50 <SysBase>,d0
    33ae:	|  |         movea.l d0,a6
    33b0:	|  |         move.l 256(sp),d0
    33b4:	|  |         move.l 252(sp),d1
    33b8:	|  |         jsr -684(a6)
    33bc:	|  |         move.l d0,248(sp)
    33c0:	|  |         move.l 248(sp),d0
    33c4:	|  |         move.l d0,19be8 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    33ca:	|  |         move.l 19be8 <allResourceNames>,d0
    33d0:	|  |     /-- bne.s 33d8 <initSludge+0x1d4>
    33d2:	|  |     |   clr.w d0
    33d4:	+--|-----|-- bra.w 3970 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    33d8:	|  |     \-> clr.l 300(sp)
    33dc:	|  |     /-- bra.s 3402 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    33de:	|  |  /--|-> move.l 19be8 <allResourceNames>,d1
    33e4:	|  |  |  |   move.l 300(sp),d0
    33e8:	|  |  |  |   add.l d0,d0
    33ea:	|  |  |  |   add.l d0,d0
    33ec:	|  |  |  |   movea.l d1,a2
    33ee:	|  |  |  |   adda.l d0,a2
    33f0:	|  |  |  |   move.l 292(sp),-(sp)
    33f4:	|  |  |  |   jsr b02 <readString>
    33fa:	|  |  |  |   addq.l #4,sp
    33fc:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    33fe:	|  |  |  |   addq.l #1,300(sp)
    3402:	|  |  |  \-> move.l 19c2c <numResourceNames>,d0
    3408:	|  |  |      cmp.l 300(sp),d0
    340c:	|  |  \----- bgt.s 33de <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    340e:	|  \-------> move.l 292(sp),-(sp)
    3412:	|            jsr 6bc <get2bytes>
    3418:	|            addq.l #4,sp
    341a:	|            move.l d0,19b50 <winWidth>
	winHeight = get2bytes (fp);
    3420:	|            move.l 292(sp),-(sp)
    3424:	|            jsr 6bc <get2bytes>
    342a:	|            addq.l #4,sp
    342c:	|            move.l d0,19b54 <winHeight>
	specialSettings = FGetC (fp);
    3432:	|            move.l 292(sp),244(sp)
    3438:	|            move.l 19c58 <DOSBase>,d0
    343e:	|            movea.l d0,a6
    3440:	|            move.l 244(sp),d1
    3444:	|            jsr -306(a6)
    3448:	|            move.l d0,240(sp)
    344c:	|            move.l 240(sp),d0
    3450:	|            move.l d0,19c34 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3456:	|            move.l 292(sp),236(sp)
    345c:	|            move.l 19c58 <DOSBase>,d0
    3462:	|            movea.l d0,a6
    3464:	|            move.l 236(sp),d1
    3468:	|            jsr -306(a6)
    346c:	|            move.l d0,232(sp)
    3470:	|            move.l 232(sp),d0
    3474:	|            move.l d0,-(sp)
    3476:	|            pea 3e8 <encodeFilename+0xea>
    347a:	|            jsr 13906 <__divsi3>
    3480:	|            addq.l #8,sp
    3482:	|            move.l d0,1813a <desiredfps>

	FreeVec(readString (fp));
    3488:	|            move.l 292(sp),-(sp)
    348c:	|            jsr b02 <readString>
    3492:	|            addq.l #4,sp
    3494:	|            move.l d0,228(sp)
    3498:	|            move.l 19c50 <SysBase>,d0
    349e:	|            movea.l d0,a6
    34a0:	|            movea.l 228(sp),a1
    34a4:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    34a8:	|            move.l 292(sp),224(sp)
    34ae:	|            move.l #105462,220(sp)
    34b6:	|            moveq #8,d0
    34b8:	|            move.l d0,216(sp)
    34bc:	|            moveq #1,d1
    34be:	|            move.l d1,212(sp)
    34c2:	|            move.l 19c58 <DOSBase>,d0
    34c8:	|            movea.l d0,a6
    34ca:	|            move.l 224(sp),d1
    34ce:	|            move.l 220(sp),d2
    34d2:	|            move.l 216(sp),d3
    34d6:	|            move.l 212(sp),d4
    34da:	|            jsr -324(a6)
    34de:	|            move.l d0,208(sp)
    34e2:	|            move.l 208(sp),d0
    34e6:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    34ea:	|            moveq #1,d0
    34ec:	|            cmp.l 204(sp),d0
    34f0:	|        /-- beq.s 3500 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    34f2:	|        |   pea 14186 <cursors.c.412ac4f3+0x4c>
    34f8:	|        |   jsr 12ed6 <KPrintF>
    34fe:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    3500:	|        \-> move.l 19bfe <gameVersion>,d0
    3506:	|            cmpi.l #258,d0
    350c:	|        /-- ble.s 351c <initSludge+0x318>
    350e:	|        |   move.l 292(sp),-(sp)
    3512:	|        |   jsr b02 <readString>
    3518:	|        |   addq.l #4,sp
    351a:	|     /--|-- bra.s 3530 <initSludge+0x32c>
    351c:	|     |  \-> pea 141a4 <cursors.c.412ac4f3+0x6a>
    3522:	|     |      pea 141a4 <cursors.c.412ac4f3+0x6a>
    3528:	|     |      jsr 103ae <joinStrings>
    352e:	|     |      addq.l #8,sp
    3530:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    3534:	|            move.l 19bfe <gameVersion>,d0
    353a:	|            cmpi.l #258,d0
    3540:	|     /----- ble.s 3562 <initSludge+0x35e>
    3542:	|     |      move.l 292(sp),196(sp)
    3548:	|     |      move.l 19c58 <DOSBase>,d0
    354e:	|     |      movea.l d0,a6
    3550:	|     |      move.l 196(sp),d1
    3554:	|     |      jsr -306(a6)
    3558:	|     |      move.l d0,192(sp)
    355c:	|     |      move.l 192(sp),d0
    3560:	|     |  /-- bra.s 3564 <initSludge+0x360>
    3562:	|     \--|-> moveq #0,d0
    3564:	|        \-> move.l d0,19d30 <gameSettings+0x4>
	makeLanguageTable (fp);
    356a:	|            move.l 292(sp),-(sp)
    356e:	|            jsr fd80 <makeLanguageTable>
    3574:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    3576:	|            move.l 19bfe <gameVersion>,d0
    357c:	|            cmpi.l #261,d0
    3582:	|        /-- ble.s 35d0 <initSludge+0x3cc>
	{
		FGetC(fp);
    3584:	|        |   move.l 292(sp),188(sp)
    358a:	|        |   move.l 19c58 <DOSBase>,d0
    3590:	|        |   movea.l d0,a6
    3592:	|        |   move.l 188(sp),d1
    3596:	|        |   jsr -306(a6)
    359a:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    359e:	|        |   move.l 292(sp),180(sp)
    35a4:	|        |   move.l 19c58 <DOSBase>,d0
    35aa:	|        |   movea.l d0,a6
    35ac:	|        |   move.l 180(sp),d1
    35b0:	|        |   jsr -306(a6)
    35b4:	|        |   move.l d0,176(sp)
		getFloat (fp);
    35b8:	|        |   move.l 292(sp),-(sp)
    35bc:	|        |   jsr 7d8 <getFloat>
    35c2:	|        |   addq.l #4,sp
		getFloat (fp);
    35c4:	|        |   move.l 292(sp),-(sp)
    35c8:	|        |   jsr 7d8 <getFloat>
    35ce:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    35d0:	|        \-> move.l 292(sp),-(sp)
    35d4:	|            jsr b02 <readString>
    35da:	|            addq.l #4,sp
    35dc:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    35e0:	|            pea 141a5 <cursors.c.412ac4f3+0x6b>
    35e6:	|            move.l 176(sp),-(sp)
    35ea:	|            jsr 1032e <strcmp>
    35f0:	|            addq.l #8,sp
    35f2:	|            tst.l d0
    35f4:	|        /-- beq.s 35fc <initSludge+0x3f8>
		return FALSE;
    35f6:	|        |   clr.w d0
    35f8:	+--------|-- bra.w 3970 <initSludge+0x76c>
	}
	FreeVec( checker);
    35fc:	|        \-> move.l 172(sp),168(sp)
    3602:	|            move.l 19c50 <SysBase>,d0
    3608:	|            movea.l d0,a6
    360a:	|            movea.l 168(sp),a1
    360e:	|            jsr -690(a6)
	checker = NULL;
    3612:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    3616:	|            move.l 292(sp),164(sp)
    361c:	|            move.l 19c58 <DOSBase>,d0
    3622:	|            movea.l d0,a6
    3624:	|            move.l 164(sp),d1
    3628:	|            jsr -306(a6)
    362c:	|            move.l d0,160(sp)
    3630:	|            move.l 160(sp),d0
    3634:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3638:	|            moveq #0,d0
    363a:	|            move.b 159(sp),d0
    363e:	|            moveq #1,d1
    3640:	|            and.l d1,d0
    3642:	|        /-- beq.s 369a <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3644:	|        |   move.l 19c58 <DOSBase>,d0
    364a:	|        |   movea.l d0,a6
    364c:	|        |   jsr -60(a6)
    3650:	|        |   move.l d0,38(sp)
    3654:	|        |   move.l 38(sp),d0
    3658:	|        |   move.l d0,34(sp)
    365c:	|        |   move.l #82349,30(sp)
    3664:	|        |   moveq #54,d0
    3666:	|        |   move.l d0,26(sp)
    366a:	|        |   move.l 19c58 <DOSBase>,d0
    3670:	|        |   movea.l d0,a6
    3672:	|        |   move.l 34(sp),d1
    3676:	|        |   move.l 30(sp),d2
    367a:	|        |   move.l 26(sp),d3
    367e:	|        |   jsr -48(a6)
    3682:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3686:	|        |   pea 141e4 <cursors.c.412ac4f3+0xaa>
    368c:	|        |   jsr 12ed6 <KPrintF>
    3692:	|        |   addq.l #4,sp
		return FALSE;
    3694:	|        |   clr.w d0
    3696:	+--------|-- bra.w 3970 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    369a:	|        \-> move.l 292(sp),-(sp)
    369e:	|            jsr 6bc <get2bytes>
    36a4:	|            addq.l #4,sp
    36a6:	|            move.l d0,19c28 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    36ac:	|            move.l 19c28 <numGlobals>,d0
    36b2:	|            lsl.l #3,d0
    36b4:	|            move.l d0,154(sp)
    36b8:	|            clr.l 150(sp)
    36bc:	|            move.l 19c50 <SysBase>,d0
    36c2:	|            movea.l d0,a6
    36c4:	|            move.l 154(sp),d0
    36c8:	|            move.l 150(sp),d1
    36cc:	|            jsr -684(a6)
    36d0:	|            move.l d0,146(sp)
    36d4:	|            move.l 146(sp),d0
    36d8:	|            move.l d0,19c02 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    36de:	|            move.l 19c02 <globalVars>,d0
    36e4:	|        /-- bne.s 3702 <initSludge+0x4fe>
    36e6:	|        |   move.l 19c28 <numGlobals>,d0
    36ec:	|        +-- ble.s 3702 <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    36ee:	|        |   pea 1421c <cursors.c.412ac4f3+0xe2>
    36f4:	|        |   jsr 12ed6 <KPrintF>
    36fa:	|        |   addq.l #4,sp
		return FALSE;
    36fc:	|        |   clr.w d0
    36fe:	+--------|-- bra.w 3970 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3702:	|        \-> clr.l 312(sp)
    3706:	|        /-- bra.s 371e <initSludge+0x51a>
    3708:	|     /--|-> move.l 19c02 <globalVars>,d1
    370e:	|     |  |   move.l 312(sp),d0
    3712:	|     |  |   lsl.l #3,d0
    3714:	|     |  |   movea.l d1,a0
    3716:	|     |  |   adda.l d0,a0
    3718:	|     |  |   clr.l (a0)
    371a:	|     |  |   addq.l #1,312(sp)
    371e:	|     |  \-> move.l 19c28 <numGlobals>,d0
    3724:	|     |      cmp.l 312(sp),d0
    3728:	|     \----- bgt.s 3708 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    372a:	|            move.l 19d30 <gameSettings+0x4>,d0
    3730:	|            clr.l -(sp)
    3732:	|            move.l d0,-(sp)
    3734:	|            move.l 300(sp),-(sp)
    3738:	|            jsr 46ea <setFileIndices>
    373e:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3742:	|            pea 1 <_start+0x1>
    3746:	|            jsr 43a4 <getNumberedString>
    374c:	|            addq.l #4,sp
    374e:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3752:	|            move.l 142(sp),-(sp)
    3756:	|            jsr 2fe <encodeFilename>
    375c:	|            addq.l #4,sp
    375e:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3762:	|            move.l 142(sp),134(sp)
    3768:	|            move.l 19c50 <SysBase>,d0
    376e:	|            movea.l d0,a6
    3770:	|            movea.l 134(sp),a1
    3774:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3778:	|            move.l 138(sp),130(sp)
    377e:	|            move.l 19c58 <DOSBase>,d0
    3784:	|            movea.l d0,a6
    3786:	|            move.l 130(sp),d1
    378a:	|            jsr -120(a6)
    378e:	|            move.l d0,126(sp)
    3792:	|            move.l 126(sp),d0
    3796:	|            move.l d0,296(sp)
	if(lock == 0) {
    379a:	|        /-- bne.s 37c8 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    379c:	|        |   move.l 138(sp),122(sp)
    37a2:	|        |   moveq #-2,d1
    37a4:	|        |   move.l d1,118(sp)
    37a8:	|        |   move.l 19c58 <DOSBase>,d0
    37ae:	|        |   movea.l d0,a6
    37b0:	|        |   move.l 122(sp),d1
    37b4:	|        |   move.l 118(sp),d2
    37b8:	|        |   jsr -84(a6)
    37bc:	|        |   move.l d0,114(sp)
    37c0:	|        |   move.l 114(sp),d0
    37c4:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    37c8:	|        \-> move.l 296(sp),110(sp)
    37ce:	|            move.l 19c58 <DOSBase>,d0
    37d4:	|            movea.l d0,a6
    37d6:	|            move.l 110(sp),d1
    37da:	|            jsr -126(a6)
    37de:	|            move.l d0,106(sp)
    37e2:	|            move.l 106(sp),d0
    37e6:	|        /-- bne.s 3842 <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    37e8:	|        |   move.l 138(sp),-(sp)
    37ec:	|        |   pea 1424f <cursors.c.412ac4f3+0x115>
    37f2:	|        |   jsr 12ed6 <KPrintF>
    37f8:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    37fa:	|        |   move.l 19c58 <DOSBase>,d0
    3800:	|        |   movea.l d0,a6
    3802:	|        |   jsr -60(a6)
    3806:	|        |   move.l d0,58(sp)
    380a:	|        |   move.l 58(sp),d0
    380e:	|        |   move.l d0,54(sp)
    3812:	|        |   move.l #82556,50(sp)
    381a:	|        |   moveq #40,d0
    381c:	|        |   move.l d0,46(sp)
    3820:	|        |   move.l 19c58 <DOSBase>,d0
    3826:	|        |   movea.l d0,a6
    3828:	|        |   move.l 54(sp),d1
    382c:	|        |   move.l 50(sp),d2
    3830:	|        |   move.l 46(sp),d3
    3834:	|        |   jsr -48(a6)
    3838:	|        |   move.l d0,42(sp)
		return FALSE;
    383c:	|        |   clr.w d0
    383e:	+--------|-- bra.w 3970 <initSludge+0x76c>
	}

	FreeVec(gameName);
    3842:	|        \-> move.l 138(sp),102(sp)
    3848:	|            move.l 19c50 <SysBase>,d0
    384e:	|            movea.l d0,a6
    3850:	|            movea.l 102(sp),a1
    3854:	|            jsr -690(a6)

	readIniFile (filename);
    3858:	|            move.l 320(sp),-(sp)
    385c:	|            jsr feb4 <readIniFile>
    3862:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3864:	|            jsr fc86 <getLanguageForFileB>
    386a:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3870:	|            move.l 18120 <languageNum>,d0
    3876:	|        /-- bpl.s 3886 <initSludge+0x682>
    3878:	|        |   pea 142a5 <cursors.c.412ac4f3+0x16b>
    387e:	|        |   jsr 12ed6 <KPrintF>
    3884:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3886:	|        \-> move.l 18120 <languageNum>,d0
    388c:	|            move.l d0,d1
    388e:	|            move.l 19d30 <gameSettings+0x4>,d0
    3894:	|            move.l d1,-(sp)
    3896:	|            move.l d0,-(sp)
    3898:	|            clr.l -(sp)
    389a:	|            jsr 46ea <setFileIndices>
    38a0:	|            lea 12(sp),sp

	if (dataFol[0]) {
    38a4:	|            movea.l 200(sp),a0
    38a8:	|            move.b (a0),d0
    38aa:	|     /----- beq.w 3954 <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    38ae:	|     |      move.l 200(sp),-(sp)
    38b2:	|     |      jsr 2fe <encodeFilename>
    38b8:	|     |      addq.l #4,sp
    38ba:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    38be:	|     |      move.l 98(sp),94(sp)
    38c4:	|     |      move.l 19c58 <DOSBase>,d0
    38ca:	|     |      movea.l d0,a6
    38cc:	|     |      move.l 94(sp),d1
    38d0:	|     |      jsr -120(a6)
    38d4:	|     |      move.l d0,90(sp)
    38d8:	|     |      move.l 90(sp),d0
    38dc:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    38e0:	|     |  /-- bne.s 390e <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    38e2:	|     |  |   move.l 98(sp),86(sp)
    38e8:	|     |  |   moveq #-2,d1
    38ea:	|     |  |   move.l d1,82(sp)
    38ee:	|     |  |   move.l 19c58 <DOSBase>,d0
    38f4:	|     |  |   movea.l d0,a6
    38f6:	|     |  |   move.l 86(sp),d1
    38fa:	|     |  |   move.l 82(sp),d2
    38fe:	|     |  |   jsr -84(a6)
    3902:	|     |  |   move.l d0,78(sp)
    3906:	|     |  |   move.l 78(sp),d0
    390a:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    390e:	|     |  \-> move.l 296(sp),74(sp)
    3914:	|     |      move.l 19c58 <DOSBase>,d0
    391a:	|     |      movea.l d0,a6
    391c:	|     |      move.l 74(sp),d1
    3920:	|     |      jsr -126(a6)
    3924:	|     |      move.l d0,70(sp)
    3928:	|     |      move.l 70(sp),d0
    392c:	|     |  /-- bne.s 393e <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    392e:	|     |  |   move.l 19c58 <DOSBase>,d0
    3934:	|     |  |   movea.l d0,a6
    3936:	|     |  |   jsr -60(a6)
    393a:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    393e:	|     |  \-> move.l 98(sp),62(sp)
    3944:	|     |      move.l 19c50 <SysBase>,d0
    394a:	|     |      movea.l d0,a6
    394c:	|     |      movea.l 62(sp),a1
    3950:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3954:	|     \----> movea.l 19b54 <winHeight>,a0
    395a:	|            lea -15(a0),a0
    395e:	|            move.l a0,d0
    3960:	|            move.l d0,-(sp)
    3962:	|            pea a <_start+0xa>
    3966:	|            jsr 50fc <positionStatus>
    396c:	|            addq.l #8,sp

	return TRUE;
    396e:	|            moveq #1,d0
}
    3970:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3974:	             lea 296(sp),sp
    3978:	             rts

0000397a <killSpeechTimers>:

void killSpeechTimers () {
    397a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    397c:	          move.l 19bec <allRunningFunctions>,(sp)

	while (thisFunction) {
    3982:	   /----- bra.s 39ae <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3984:	/--|----> movea.l (sp),a0
    3986:	|  |      move.b 56(a0),d0
    398a:	|  |  /-- bne.s 39a8 <killSpeechTimers+0x2e>
    398c:	|  |  |   movea.l (sp),a0
    398e:	|  |  |   move.w 50(a0),d0
    3992:	|  |  +-- beq.s 39a8 <killSpeechTimers+0x2e>
    3994:	|  |  |   movea.l (sp),a0
    3996:	|  |  |   move.l 12(a0),d0
    399a:	|  |  +-- beq.s 39a8 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    399c:	|  |  |   movea.l (sp),a0
    399e:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    39a2:	|  |  |   movea.l (sp),a0
    39a4:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    39a8:	|  |  \-> movea.l (sp),a0
    39aa:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    39ae:	|  \----> tst.l (sp)
    39b0:	\-------- bne.s 3984 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    39b2:	          jsr 563a <killAllSpeech>
}
    39b8:	          nop
    39ba:	          addq.l #4,sp
    39bc:	          rts

000039be <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    39be:	             lea -52(sp),sp
    39c2:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    39c4:	             movea.l 60(sp),a0
    39c8:	             move.l (a0),d0
    39ca:	             move.l d0,-(sp)
    39cc:	             jsr 462a <openSubSlice>
    39d2:	             addq.l #4,sp
    39d4:	             tst.w d0
    39d6:	         /-- bne.s 39de <loadFunctionCode+0x20>
    39d8:	         |   clr.w d0
    39da:	/--------|-- bra.w 3ba8 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    39de:	|        \-> move.l 19c38 <bigDataFile>,44(sp)
    39e6:	|            move.l 19c58 <DOSBase>,d0
    39ec:	|            movea.l d0,a6
    39ee:	|            move.l 44(sp),d1
    39f2:	|            jsr -306(a6)
    39f6:	|            move.l d0,40(sp)
    39fa:	|            move.l 40(sp),d0
    39fe:	|            move.l d0,d0
    3a00:	|            movea.l 60(sp),a0
    3a04:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3a08:	|            move.l 19c38 <bigDataFile>,d0
    3a0e:	|            move.l d0,-(sp)
    3a10:	|            jsr 6bc <get2bytes>
    3a16:	|            addq.l #4,sp
    3a18:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3a1c:	|            move.l 19c38 <bigDataFile>,d0
    3a22:	|            move.l d0,-(sp)
    3a24:	|            jsr 6bc <get2bytes>
    3a2a:	|            addq.l #4,sp
    3a2c:	|            movea.l 60(sp),a0
    3a30:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3a34:	|            move.l 19c38 <bigDataFile>,d0
    3a3a:	|            move.l d0,-(sp)
    3a3c:	|            jsr 6bc <get2bytes>
    3a42:	|            addq.l #4,sp
    3a44:	|            movea.l 60(sp),a0
    3a48:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3a4c:	|            move.l 36(sp),d0
    3a50:	|            lsl.l #3,d0
    3a52:	|            move.l d0,32(sp)
    3a56:	|            clr.l 28(sp)
    3a5a:	|            move.l 19c50 <SysBase>,d0
    3a60:	|            movea.l d0,a6
    3a62:	|            move.l 32(sp),d0
    3a66:	|            move.l 28(sp),d1
    3a6a:	|            jsr -684(a6)
    3a6e:	|            move.l d0,24(sp)
    3a72:	|            move.l 24(sp),d0
    3a76:	|            movea.l 60(sp),a0
    3a7a:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3a7e:	|            movea.l 60(sp),a0
    3a82:	|            move.l 4(a0),d0
    3a86:	|        /-- bne.s 3a9c <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3a88:	|        |   pea 142d0 <cursors.c.412ac4f3+0x196>
    3a8e:	|        |   jsr 12ed6 <KPrintF>
    3a94:	|        |   addq.l #4,sp
		return FALSE;
    3a96:	|        |   clr.w d0
    3a98:	+--------|-- bra.w 3ba8 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3a9c:	|        \-> clr.l 52(sp)
    3aa0:	|        /-- bra.s 3b02 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3aa2:	|     /--|-> move.l 19c38 <bigDataFile>,8(sp)
    3aaa:	|     |  |   move.l 19c58 <DOSBase>,d0
    3ab0:	|     |  |   movea.l d0,a6
    3ab2:	|     |  |   move.l 8(sp),d1
    3ab6:	|     |  |   jsr -306(a6)
    3aba:	|     |  |   move.l d0,4(sp)
    3abe:	|     |  |   move.l 4(sp),d1
    3ac2:	|     |  |   movea.l 60(sp),a0
    3ac6:	|     |  |   movea.l 4(a0),a0
    3aca:	|     |  |   move.l 52(sp),d0
    3ace:	|     |  |   lsl.l #3,d0
    3ad0:	|     |  |   adda.l d0,a0
    3ad2:	|     |  |   move.l d1,d0
    3ad4:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3ad6:	|     |  |   move.l 19c38 <bigDataFile>,d0
    3adc:	|     |  |   move.l d0,-(sp)
    3ade:	|     |  |   jsr 6bc <get2bytes>
    3ae4:	|     |  |   addq.l #4,sp
    3ae6:	|     |  |   move.l d0,d1
    3ae8:	|     |  |   movea.l 60(sp),a0
    3aec:	|     |  |   movea.l 4(a0),a0
    3af0:	|     |  |   move.l 52(sp),d0
    3af4:	|     |  |   lsl.l #3,d0
    3af6:	|     |  |   adda.l d0,a0
    3af8:	|     |  |   move.l d1,d0
    3afa:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3afe:	|     |  |   addq.l #1,52(sp)
    3b02:	|     |  \-> move.l 52(sp),d0
    3b06:	|     |      cmp.l 36(sp),d0
    3b0a:	|     \----- bcs.s 3aa2 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3b0c:	|            jsr 439a <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3b12:	|            movea.l 60(sp),a0
    3b16:	|            move.l 8(a0),d0
    3b1a:	|  /-------- ble.w 3b9e <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3b1e:	|  |         movea.l 60(sp),a0
    3b22:	|  |         move.l 8(a0),d0
    3b26:	|  |         lsl.l #3,d0
    3b28:	|  |         move.l d0,20(sp)
    3b2c:	|  |         clr.l 16(sp)
    3b30:	|  |         move.l 19c50 <SysBase>,d0
    3b36:	|  |         movea.l d0,a6
    3b38:	|  |         move.l 20(sp),d0
    3b3c:	|  |         move.l 16(sp),d1
    3b40:	|  |         jsr -684(a6)
    3b44:	|  |         move.l d0,12(sp)
    3b48:	|  |         move.l 12(sp),d0
    3b4c:	|  |         movea.l 60(sp),a0
    3b50:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3b54:	|  |         movea.l 60(sp),a0
    3b58:	|  |         move.l 20(a0),d0
    3b5c:	|  |     /-- bne.s 3b70 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3b5e:	|  |     |   pea 142d0 <cursors.c.412ac4f3+0x196>
    3b64:	|  |     |   jsr 12ed6 <KPrintF>
    3b6a:	|  |     |   addq.l #4,sp
			return FALSE;
    3b6c:	|  |     |   clr.w d0
    3b6e:	+--|-----|-- bra.s 3ba8 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3b70:	|  |     \-> clr.l 48(sp)
    3b74:	|  |     /-- bra.s 3b8e <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3b76:	|  |  /--|-> movea.l 60(sp),a0
    3b7a:	|  |  |  |   move.l 20(a0),d1
    3b7e:	|  |  |  |   move.l 48(sp),d0
    3b82:	|  |  |  |   lsl.l #3,d0
    3b84:	|  |  |  |   movea.l d1,a0
    3b86:	|  |  |  |   adda.l d0,a0
    3b88:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3b8a:	|  |  |  |   addq.l #1,48(sp)
    3b8e:	|  |  |  \-> movea.l 60(sp),a0
    3b92:	|  |  |      move.l 8(a0),d0
    3b96:	|  |  |      cmp.l 48(sp),d0
    3b9a:	|  |  \----- bgt.s 3b76 <loadFunctionCode+0x1b8>
    3b9c:	|  |     /-- bra.s 3ba6 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3b9e:	|  \-----|-> movea.l 60(sp),a0
    3ba2:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3ba6:	|        \-> moveq #1,d0
}
    3ba8:	\----------> movea.l (sp)+,a6
    3baa:	             lea 52(sp),sp
    3bae:	             rts

00003bb0 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3bb0:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3bb2:	movea.l 1811c <currentEvents>,a2
    3bb8:	move.l 8(sp),-(sp)
    3bbc:	jsr 6bc <get2bytes>
    3bc2:	addq.l #4,sp
    3bc4:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3bc6:	movea.l 1811c <currentEvents>,a2
    3bcc:	move.l 8(sp),-(sp)
    3bd0:	jsr 6bc <get2bytes>
    3bd6:	addq.l #4,sp
    3bd8:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3bdc:	movea.l 1811c <currentEvents>,a2
    3be2:	move.l 8(sp),-(sp)
    3be6:	jsr 6bc <get2bytes>
    3bec:	addq.l #4,sp
    3bee:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3bf2:	movea.l 1811c <currentEvents>,a2
    3bf8:	move.l 8(sp),-(sp)
    3bfc:	jsr 6bc <get2bytes>
    3c02:	addq.l #4,sp
    3c04:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3c08:	movea.l 1811c <currentEvents>,a2
    3c0e:	move.l 8(sp),-(sp)
    3c12:	jsr 6bc <get2bytes>
    3c18:	addq.l #4,sp
    3c1a:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3c1e:	movea.l 1811c <currentEvents>,a2
    3c24:	move.l 8(sp),-(sp)
    3c28:	jsr 6bc <get2bytes>
    3c2e:	addq.l #4,sp
    3c30:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3c34:	movea.l 1811c <currentEvents>,a2
    3c3a:	move.l 8(sp),-(sp)
    3c3e:	jsr 6bc <get2bytes>
    3c44:	addq.l #4,sp
    3c46:	move.l d0,24(a2)
}
    3c4a:	nop
    3c4c:	movea.l (sp)+,a2
    3c4e:	rts

00003c50 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3c50:	       lea -312(sp),sp
    3c54:	       movem.l d2-d3/a6,-(sp)
    3c58:	       move.l 332(sp),d1
    3c5c:	       move.l 336(sp),d0
    3c60:	       move.b d1,d1
    3c62:	       move.b d1,16(sp)
    3c66:	       move.b d0,d0
    3c68:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3c6c:	       move.l 328(sp),318(sp)
    3c72:	       move.l #1005,314(sp)
    3c7a:	       move.l 19c58 <DOSBase>,d0
    3c80:	       movea.l d0,a6
    3c82:	       move.l 318(sp),d1
    3c86:	       move.l 314(sp),d2
    3c8a:	       jsr -30(a6)
    3c8e:	       move.l d0,310(sp)
    3c92:	       move.l 310(sp),d0
    3c96:	       move.l d0,306(sp)

	if (! fp) {
    3c9a:	   /-- bne.s 3cf6 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3c9c:	   |   move.l 19c58 <DOSBase>,d0
    3ca2:	   |   movea.l d0,a6
    3ca4:	   |   jsr -60(a6)
    3ca8:	   |   move.l d0,154(sp)
    3cac:	   |   move.l 154(sp),d0
    3cb0:	   |   move.l d0,150(sp)
    3cb4:	   |   move.l #82681,146(sp)
    3cbc:	   |   moveq #31,d0
    3cbe:	   |   move.l d0,142(sp)
    3cc2:	   |   move.l 19c58 <DOSBase>,d0
    3cc8:	   |   movea.l d0,a6
    3cca:	   |   move.l 150(sp),d1
    3cce:	   |   move.l 146(sp),d2
    3cd2:	   |   move.l 142(sp),d3
    3cd6:	   |   jsr -48(a6)
    3cda:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3cde:	   |   move.l 328(sp),-(sp)
    3ce2:	   |   pea 14319 <cursors.c.412ac4f3+0x1df>
    3ce8:	   |   jsr 12ed6 <KPrintF>
    3cee:	   |   addq.l #8,sp
		return NULL;
    3cf0:	   |   moveq #0,d0
    3cf2:	/--|-- bra.w 3fb6 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    3cf6:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    3cfa:	|      move.l 306(sp),302(sp)
    3d00:	|      move.l 19c58 <DOSBase>,d0
    3d06:	|      movea.l d0,a6
    3d08:	|      move.l 302(sp),d1
    3d0c:	|      jsr -306(a6)
    3d10:	|      move.l d0,298(sp)
    3d14:	|      move.l 298(sp),d0
    3d18:	|      moveq #83,d1
    3d1a:	|      cmp.l d0,d1
    3d1c:	|  /-- beq.s 3d24 <openAndVerify+0xd4>
    3d1e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3d24:	|  \-> move.l 306(sp),294(sp)
    3d2a:	|      move.l 19c58 <DOSBase>,d0
    3d30:	|      movea.l d0,a6
    3d32:	|      move.l 294(sp),d1
    3d36:	|      jsr -306(a6)
    3d3a:	|      move.l d0,290(sp)
    3d3e:	|      move.l 290(sp),d0
    3d42:	|      moveq #76,d1
    3d44:	|      cmp.l d0,d1
    3d46:	|  /-- beq.s 3d4e <openAndVerify+0xfe>
    3d48:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3d4e:	|  \-> move.l 306(sp),286(sp)
    3d54:	|      move.l 19c58 <DOSBase>,d0
    3d5a:	|      movea.l d0,a6
    3d5c:	|      move.l 286(sp),d1
    3d60:	|      jsr -306(a6)
    3d64:	|      move.l d0,282(sp)
    3d68:	|      move.l 282(sp),d0
    3d6c:	|      moveq #85,d1
    3d6e:	|      cmp.l d0,d1
    3d70:	|  /-- beq.s 3d78 <openAndVerify+0x128>
    3d72:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3d78:	|  \-> move.l 306(sp),278(sp)
    3d7e:	|      move.l 19c58 <DOSBase>,d0
    3d84:	|      movea.l d0,a6
    3d86:	|      move.l 278(sp),d1
    3d8a:	|      jsr -306(a6)
    3d8e:	|      move.l d0,274(sp)
    3d92:	|      move.l 274(sp),d0
    3d96:	|      moveq #68,d1
    3d98:	|      cmp.l d0,d1
    3d9a:	|  /-- beq.s 3da2 <openAndVerify+0x152>
    3d9c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3da2:	|  \-> move.l 306(sp),270(sp)
    3da8:	|      move.l 19c58 <DOSBase>,d0
    3dae:	|      movea.l d0,a6
    3db0:	|      move.l 270(sp),d1
    3db4:	|      jsr -306(a6)
    3db8:	|      move.l d0,266(sp)
    3dbc:	|      move.l 266(sp),d1
    3dc0:	|      move.b 16(sp),d0
    3dc4:	|      ext.w d0
    3dc6:	|      movea.w d0,a0
    3dc8:	|      cmpa.l d1,a0
    3dca:	|  /-- beq.s 3dd2 <openAndVerify+0x182>
    3dcc:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3dd2:	|  \-> move.l 306(sp),262(sp)
    3dd8:	|      move.l 19c58 <DOSBase>,d0
    3dde:	|      movea.l d0,a6
    3de0:	|      move.l 262(sp),d1
    3de4:	|      jsr -306(a6)
    3de8:	|      move.l d0,258(sp)
    3dec:	|      move.l 258(sp),d1
    3df0:	|      move.b 14(sp),d0
    3df4:	|      ext.w d0
    3df6:	|      movea.w d0,a0
    3df8:	|      cmpa.l d1,a0
    3dfa:	|  /-- beq.s 3e02 <openAndVerify+0x1b2>
    3dfc:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3e02:	|  \-> tst.w 322(sp)
    3e06:	|  /-- beq.s 3e5e <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    3e08:	|  |   move.l 19c58 <DOSBase>,d0
    3e0e:	|  |   movea.l d0,a6
    3e10:	|  |   jsr -60(a6)
    3e14:	|  |   move.l d0,174(sp)
    3e18:	|  |   move.l 174(sp),d0
    3e1c:	|  |   move.l d0,170(sp)
    3e20:	|  |   move.l #82744,166(sp)
    3e28:	|  |   moveq #31,d0
    3e2a:	|  |   move.l d0,162(sp)
    3e2e:	|  |   move.l 19c58 <DOSBase>,d0
    3e34:	|  |   movea.l d0,a6
    3e36:	|  |   move.l 170(sp),d1
    3e3a:	|  |   move.l 166(sp),d2
    3e3e:	|  |   move.l 162(sp),d3
    3e42:	|  |   jsr -48(a6)
    3e46:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3e4a:	|  |   pea 14338 <cursors.c.412ac4f3+0x1fe>
    3e50:	|  |   jsr 12ed6 <KPrintF>
    3e56:	|  |   addq.l #4,sp
		return NULL;
    3e58:	|  |   moveq #0,d0
    3e5a:	+--|-- bra.w 3fb6 <openAndVerify+0x366>
	}
	FGetC (fp);
    3e5e:	|  \-> move.l 306(sp),254(sp)
    3e64:	|      move.l 19c58 <DOSBase>,d0
    3e6a:	|      movea.l d0,a6
    3e6c:	|      move.l 254(sp),d1
    3e70:	|      jsr -306(a6)
    3e74:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3e78:	|      nop
    3e7a:	|  /-> move.l 306(sp),246(sp)
    3e80:	|  |   move.l 19c58 <DOSBase>,d0
    3e86:	|  |   movea.l d0,a6
    3e88:	|  |   move.l 246(sp),d1
    3e8c:	|  |   jsr -306(a6)
    3e90:	|  |   move.l d0,242(sp)
    3e94:	|  |   move.l 242(sp),d0
    3e98:	|  \-- bne.s 3e7a <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3e9a:	|      move.l 306(sp),238(sp)
    3ea0:	|      move.l 19c58 <DOSBase>,d0
    3ea6:	|      movea.l d0,a6
    3ea8:	|      move.l 238(sp),d1
    3eac:	|      jsr -306(a6)
    3eb0:	|      move.l d0,234(sp)
    3eb4:	|      move.l 234(sp),d0
    3eb8:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3ebc:	|      move.l 306(sp),226(sp)
    3ec2:	|      move.l 19c58 <DOSBase>,d0
    3ec8:	|      movea.l d0,a6
    3eca:	|      move.l 226(sp),d1
    3ece:	|      jsr -306(a6)
    3ed2:	|      move.l d0,222(sp)
    3ed6:	|      move.l 222(sp),d0
    3eda:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3ede:	|      move.l 230(sp),d0
    3ee2:	|      lsl.l #8,d0
    3ee4:	|      add.l 218(sp),d0
    3ee8:	|      movea.l 344(sp),a0
    3eec:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3eee:	|      movea.l 344(sp),a0
    3ef2:	|      move.l (a0),d0
    3ef4:	|      cmpi.l #514,d0
    3efa:	|  /-- ble.s 3f50 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3efc:	|  |   move.l 19c58 <DOSBase>,d0
    3f02:	|  |   movea.l d0,a6
    3f04:	|  |   jsr -60(a6)
    3f08:	|  |   move.l d0,194(sp)
    3f0c:	|  |   move.l 194(sp),d0
    3f10:	|  |   move.l d0,190(sp)
    3f14:	|  |   move.l #82771,186(sp)
    3f1c:	|  |   moveq #100,d1
    3f1e:	|  |   move.l d1,182(sp)
    3f22:	|  |   move.l 19c58 <DOSBase>,d0
    3f28:	|  |   movea.l d0,a6
    3f2a:	|  |   move.l 190(sp),d1
    3f2e:	|  |   move.l 186(sp),d2
    3f32:	|  |   move.l 182(sp),d3
    3f36:	|  |   jsr -48(a6)
    3f3a:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3f3e:	|  |   pea 14353 <cursors.c.412ac4f3+0x219>
    3f44:	|  |   jsr 12ed6 <KPrintF>
    3f4a:	|  |   addq.l #4,sp
		return NULL;
    3f4c:	|  |   moveq #0,d0
    3f4e:	+--|-- bra.s 3fb6 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3f50:	|  \-> movea.l 344(sp),a0
    3f54:	|      move.l (a0),d0
    3f56:	|      cmpi.l #257,d0
    3f5c:	|  /-- bgt.s 3fb2 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3f5e:	|  |   move.l 19c58 <DOSBase>,d0
    3f64:	|  |   movea.l d0,a6
    3f66:	|  |   jsr -60(a6)
    3f6a:	|  |   move.l d0,214(sp)
    3f6e:	|  |   move.l 214(sp),d0
    3f72:	|  |   move.l d0,210(sp)
    3f76:	|  |   move.l #82840,206(sp)
    3f7e:	|  |   moveq #100,d0
    3f80:	|  |   move.l d0,202(sp)
    3f84:	|  |   move.l 19c58 <DOSBase>,d0
    3f8a:	|  |   movea.l d0,a6
    3f8c:	|  |   move.l 210(sp),d1
    3f90:	|  |   move.l 206(sp),d2
    3f94:	|  |   move.l 202(sp),d3
    3f98:	|  |   jsr -48(a6)
    3f9c:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3fa0:	|  |   pea 14398 <cursors.c.412ac4f3+0x25e>
    3fa6:	|  |   jsr 12ed6 <KPrintF>
    3fac:	|  |   addq.l #4,sp
		return NULL;
    3fae:	|  |   moveq #0,d0
    3fb0:	+--|-- bra.s 3fb6 <openAndVerify+0x366>
	}
	return fp;
    3fb2:	|  \-> move.l 306(sp),d0
}
    3fb6:	\----> movem.l (sp)+,d2-d3/a6
    3fba:	       lea 312(sp),sp
    3fbe:	       rts

00003fc0 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    3fc0:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    3fc2:	          move.l #105452,(sp)
	while (* huntAndDestroy) {
    3fc8:	   /----- bra.s 3ff4 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    3fca:	/--|----> movea.l (sp),a0
    3fcc:	|  |      move.l (a0),d0
    3fce:	|  |      cmp.l 8(sp),d0
    3fd2:	|  |  /-- bne.s 3fea <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    3fd4:	|  |  |   movea.l (sp),a0
    3fd6:	|  |  |   movea.l (a0),a0
    3fd8:	|  |  |   move.l 44(a0),d0
    3fdc:	|  |  |   movea.l (sp),a0
    3fde:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    3fe0:	|  |  |   movea.l 8(sp),a0
    3fe4:	|  |  |   clr.l 44(a0)
    3fe8:	|  +--|-- bra.s 3ff4 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    3fea:	|  |  \-> movea.l (sp),a0
    3fec:	|  |      move.l (a0),d0
    3fee:	|  |      moveq #44,d1
    3ff0:	|  |      add.l d0,d1
    3ff2:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    3ff4:	|  \----> movea.l (sp),a0
    3ff6:	|         move.l (a0),d0
    3ff8:	\-------- bne.s 3fca <pauseFunction+0xa>
		}
	}
}
    3ffa:	          nop
    3ffc:	          nop
    3ffe:	          addq.l #4,sp
    4000:	          rts

00004002 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    4002:	move.l 19bec <allRunningFunctions>,d0
    4008:	movea.l 4(sp),a0
    400c:	move.l d0,44(a0)
	allRunningFunctions = fun;
    4010:	move.l 4(sp),19bec <allRunningFunctions>
}
    4018:	nop
    401a:	rts

0000401c <runSludge>:

BOOL runSludge () {
    401c:	                   lea -12(sp),sp
    4020:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    4022:	                   move.l 19bec <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    402a:	      /----------- bra.s 40a6 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    402c:	   /--|----------> movea.l 12(sp),a0
    4030:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4036:	   |  |            movea.l 12(sp),a0
    403a:	   |  |            move.b 56(a0),d0
    403e:	   |  |  /-------- bne.s 40a0 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    4040:	   |  |  |         movea.l 12(sp),a0
    4044:	   |  |  |         move.l 12(a0),d0
    4048:	   |  |  |  /----- beq.s 4072 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    404a:	   |  |  |  |      movea.l 12(sp),a0
    404e:	   |  |  |  |      move.l 12(a0),d0
    4052:	   |  |  |  |  /-- bpl.s 405e <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4054:	   |  |  |  |  |   movea.l 12(sp),a0
    4058:	   |  |  |  |  |   clr.l 12(a0)
    405c:	   |  |  +--|--|-- bra.s 40a0 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    405e:	   |  |  |  |  \-> movea.l 12(sp),a0
    4062:	   |  |  |  |      move.l 12(a0),d0
    4066:	   |  |  |  |      subq.l #1,d0
    4068:	   |  |  |  |      movea.l 12(sp),a0
    406c:	   |  |  |  |      move.l d0,12(a0)
    4070:	   |  |  +--|----- bra.s 40a0 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    4072:	   |  |  |  \----> movea.l 12(sp),a0
    4076:	   |  |  |         move.w 50(a0),d0
    407a:	   |  |  |     /-- beq.s 408a <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    407c:	   |  |  |     |   movea.l 12(sp),a0
    4080:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    4084:	   |  |  |     |   jsr 563a <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    408a:	   |  |  |     \-> move.l 12(sp),-(sp)
    408e:	   |  |  |         jsr 2266 <continueFunction>
    4094:	   |  |  |         addq.l #4,sp
    4096:	   |  |  |         tst.w d0
    4098:	   |  |  +-------- bne.s 40a0 <runSludge+0x84>
					return FALSE;
    409a:	   |  |  |         clr.w d0
    409c:	/--|--|--|-------- bra.w 412c <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    40a0:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    40a6:	|  |  \----------> tst.l 12(sp)
    40aa:	|  \-------------- bne.s 402c <runSludge+0x10>
	}

	if (loadNow) {
    40ac:	|                  move.l 19c1c <loadNow>,d0
    40b2:	|        /-------- beq.s 412a <runSludge+0x10e>
		if (loadNow[0] == ':') {
    40b4:	|        |         movea.l 19c1c <loadNow>,a0
    40ba:	|        |         move.b (a0),d0
    40bc:	|        |         cmpi.b #58,d0
    40c0:	|        |  /----- bne.s 40f4 <runSludge+0xd8>
			saveGame (loadNow + 1);
    40c2:	|        |  |      move.l 19c1c <loadNow>,d0
    40c8:	|        |  |      addq.l #1,d0
    40ca:	|        |  |      move.l d0,-(sp)
    40cc:	|        |  |      jsr 8c82 <saveGame>
    40d2:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    40d4:	|        |  |      movea.l 19d1a <saverFunc>,a0
    40da:	|        |  |      lea 28(a0),a0
    40de:	|        |  |      pea 1 <_start+0x1>
    40e2:	|        |  |      pea 1 <_start+0x1>
    40e6:	|        |  |      move.l a0,-(sp)
    40e8:	|        |  |      jsr 11774 <setVariable>
    40ee:	|        |  |      lea 12(sp),sp
    40f2:	|        |  |  /-- bra.s 410c <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    40f4:	|        |  \--|-> move.l 19c1c <loadNow>,d0
    40fa:	|        |     |   move.l d0,-(sp)
    40fc:	|        |     |   jsr 87ca <loadGame>
    4102:	|        |     |   addq.l #4,sp
    4104:	|        |     |   tst.w d0
    4106:	|        |     +-- bne.s 410c <runSludge+0xf0>
    4108:	|        |     |   clr.w d0
    410a:	+--------|-----|-- bra.s 412c <runSludge+0x110>
		}
		FreeVec(loadNow);
    410c:	|        |     \-> move.l 19c1c <loadNow>,8(sp)
    4114:	|        |         move.l 19c50 <SysBase>,d0
    411a:	|        |         movea.l d0,a6
    411c:	|        |         movea.l 8(sp),a1
    4120:	|        |         jsr -690(a6)
		loadNow = NULL;
    4124:	|        |         clr.l 19c1c <loadNow>
	}

	return TRUE;
    412a:	|        \-------> moveq #1,d0
}
    412c:	\----------------> movea.l (sp)+,a6
    412e:	                   lea 12(sp),sp
    4132:	                   rts

00004134 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    4134:	movea.l 1811c <currentEvents>,a0
    413a:	move.l (a0),d0
    413c:	move.l 4(sp),-(sp)
    4140:	move.l d0,-(sp)
    4142:	jsr 8d0 <put2bytes>
    4148:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    414a:	movea.l 1811c <currentEvents>,a0
    4150:	move.l 4(a0),d0
    4154:	move.l 4(sp),-(sp)
    4158:	move.l d0,-(sp)
    415a:	jsr 8d0 <put2bytes>
    4160:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    4162:	movea.l 1811c <currentEvents>,a0
    4168:	move.l 8(a0),d0
    416c:	move.l 4(sp),-(sp)
    4170:	move.l d0,-(sp)
    4172:	jsr 8d0 <put2bytes>
    4178:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    417a:	movea.l 1811c <currentEvents>,a0
    4180:	move.l 12(a0),d0
    4184:	move.l 4(sp),-(sp)
    4188:	move.l d0,-(sp)
    418a:	jsr 8d0 <put2bytes>
    4190:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    4192:	movea.l 1811c <currentEvents>,a0
    4198:	move.l 16(a0),d0
    419c:	move.l 4(sp),-(sp)
    41a0:	move.l d0,-(sp)
    41a2:	jsr 8d0 <put2bytes>
    41a8:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    41aa:	movea.l 1811c <currentEvents>,a0
    41b0:	move.l 20(a0),d0
    41b4:	move.l 4(sp),-(sp)
    41b8:	move.l d0,-(sp)
    41ba:	jsr 8d0 <put2bytes>
    41c0:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    41c2:	movea.l 1811c <currentEvents>,a0
    41c8:	move.l 24(a0),d0
    41cc:	move.l 4(sp),-(sp)
    41d0:	move.l d0,-(sp)
    41d2:	jsr 8d0 <put2bytes>
    41d8:	addq.l #8,sp
}
    41da:	nop
    41dc:	rts

000041de <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    41de:	jsr 1104 <CstSludgeDisplay>
}
    41e4:	nop
    41e6:	rts

000041e8 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    41e8:	      /-- bra.s 4208 <stackSetByIndex+0x20>
		vS = vS->next;
    41ea:	/-----|-> movea.l 4(sp),a0
    41ee:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    41f4:	|     +-- bne.s 4208 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    41f6:	|     |   pea 143df <cursors.c.412ac4f3+0x2a5>
    41fc:	|     |   jsr 12ed6 <KPrintF>
    4202:	|     |   addq.l #4,sp
			return FALSE;
    4204:	|     |   clr.w d0
    4206:	|  /--|-- bra.s 422a <stackSetByIndex+0x42>
	while (theIndex--) {
    4208:	|  |  \-> move.l 8(sp),d0
    420c:	|  |      move.l d0,d1
    420e:	|  |      subq.l #1,d1
    4210:	|  |      move.l d1,8(sp)
    4214:	|  |      tst.l d0
    4216:	\--|----- bne.s 41ea <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    4218:	   |      move.l 4(sp),d0
    421c:	   |      move.l d0,-(sp)
    421e:	   |      move.l 16(sp),-(sp)
    4222:	   |      jsr 1133c <copyVariable>
    4228:	   |      addq.l #8,sp
}
    422a:	   \----> rts

0000422c <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    422c:	             lea -24(sp),sp
    4230:	             move.l a6,-(sp)
    4232:	             move.l 48(sp),d0
    4236:	             move.w d0,d0
    4238:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    423c:	             moveq #58,d0
    423e:	             move.l d0,24(sp)
    4242:	             clr.l 20(sp)
    4246:	             move.l 19c50 <SysBase>,d0
    424c:	             movea.l d0,a6
    424e:	             move.l 24(sp),d0
    4252:	             move.l 20(sp),d1
    4256:	             jsr -684(a6)
    425a:	             move.l d0,16(sp)
    425e:	             move.l 16(sp),d0
    4262:	             move.l d0,12(sp)
	if(!newFunc) {
    4266:	         /-- bne.s 427c <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4268:	         |   pea 143f8 <cursors.c.412ac4f3+0x2be>
    426e:	         |   jsr 12ed6 <KPrintF>
    4274:	         |   addq.l #4,sp
		return 0;
    4276:	         |   moveq #0,d0
    4278:	/--------|-- bra.w 4392 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    427c:	|        \-> move.l 32(sp),d0
    4280:	|            movea.l 12(sp),a0
    4284:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    4286:	|            move.l 12(sp),-(sp)
    428a:	|            jsr 39be <loadFunctionCode>
    4290:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    4292:	|            movea.l 12(sp),a0
    4296:	|            move.l 16(a0),d1
    429a:	|            move.l 36(sp),d0
    429e:	|            cmp.l d1,d0
    42a0:	|        /-- beq.s 42b6 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    42a2:	|        |   pea 14421 <cursors.c.412ac4f3+0x2e7>
    42a8:	|        |   jsr 12ed6 <KPrintF>
    42ae:	|        |   addq.l #4,sp
		return NULL; 
    42b0:	|        |   moveq #0,d0
    42b2:	+--------|-- bra.w 4392 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    42b6:	|        \-> movea.l 12(sp),a0
    42ba:	|            move.l 16(a0),d1
    42be:	|            movea.l 12(sp),a0
    42c2:	|            move.l 8(a0),d0
    42c6:	|            cmp.l d1,d0
    42c8:	|  /-------- bge.s 4332 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    42ca:	|  |         pea 1443d <cursors.c.412ac4f3+0x303>
    42d0:	|  |         jsr 12ed6 <KPrintF>
    42d6:	|  |         addq.l #4,sp
		return NULL; 
    42d8:	|  |         moveq #0,d0
    42da:	+--|-------- bra.w 4392 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    42de:	|  |  /----> movea.l 44(sp),a0
    42e2:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    42e6:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    42ea:	|  |  |      movea.l 44(sp),a0
    42ee:	|  |  |      move.l (a0),d0
    42f0:	|  |  |  /-- bne.s 4306 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    42f2:	|  |  |  |   pea 14467 <thumbnail.c.7eb31449+0x10>
    42f8:	|  |  |  |   jsr 12ed6 <KPrintF>
    42fe:	|  |  |  |   addq.l #4,sp
			return NULL;
    4300:	|  |  |  |   moveq #0,d0
    4302:	+--|--|--|-- bra.w 4392 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    4306:	|  |  |  \-> movea.l 12(sp),a0
    430a:	|  |  |      move.l 20(a0),d1
    430e:	|  |  |      move.l 36(sp),d0
    4312:	|  |  |      lsl.l #3,d0
    4314:	|  |  |      add.l d0,d1
    4316:	|  |  |      move.l 8(sp),d0
    431a:	|  |  |      move.l d1,-(sp)
    431c:	|  |  |      move.l d0,-(sp)
    431e:	|  |  |      jsr 1133c <copyVariable>
    4324:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    4326:	|  |  |      move.l 44(sp),-(sp)
    432a:	|  |  |      jsr 11806 <trimStack>
    4330:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    4332:	|  \--|----> tst.l 36(sp)
    4336:	|     \----- bne.s 42de <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4338:	|            movea.l 12(sp),a0
    433c:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4340:	|            movea.l 12(sp),a0
    4344:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4348:	|            movea.l 12(sp),a0
    434c:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4352:	|            movea.l 12(sp),a0
    4356:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    435c:	|            movea.l 12(sp),a0
    4360:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    4364:	|            movea.l 12(sp),a0
    4368:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    436c:	|            movea.l 12(sp),a0
    4370:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    4374:	|            movea.l 12(sp),a0
    4378:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    437c:	|            movea.l 12(sp),a0
    4380:	|            clr.l 28(a0)

	restartFunction (newFunc);
    4384:	|            move.l 12(sp),-(sp)
    4388:	|            jsr 4002 <restartFunction>
    438e:	|            addq.l #4,sp
	return 1;
    4390:	|            moveq #1,d0
}
    4392:	\----------> movea.l (sp)+,a6
    4394:	             lea 24(sp),sp
    4398:	             rts

0000439a <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    439a:	clr.w 18128 <sliceBusy>
}
    43a0:	nop
    43a2:	rts

000043a4 <getNumberedString>:

char * getNumberedString (int value) {
    43a4:	       lea -56(sp),sp
    43a8:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    43ac:	       move.w 18128 <sliceBusy>,d0
    43b2:	   /-- beq.s 43fc <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    43b4:	   |   move.l 19c58 <DOSBase>,d0
    43ba:	   |   movea.l d0,a6
    43bc:	   |   jsr -60(a6)
    43c0:	   |   move.l d0,28(sp)
    43c4:	   |   move.l 28(sp),d0
    43c8:	   |   move.l d0,24(sp)
    43cc:	   |   move.l #83122,20(sp)
    43d4:	   |   moveq #76,d0
    43d6:	   |   move.l d0,16(sp)
    43da:	   |   move.l 19c58 <DOSBase>,d0
    43e0:	   |   movea.l d0,a6
    43e2:	   |   move.l 24(sp),d1
    43e6:	   |   move.l 20(sp),d2
    43ea:	   |   move.l 16(sp),d3
    43ee:	   |   jsr -48(a6)
    43f2:	   |   move.l d0,12(sp)
		return NULL;
    43f6:	   |   moveq #0,d0
    43f8:	/--|-- bra.w 4498 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    43fc:	|  \-> move.l 19c38 <bigDataFile>,64(sp)
    4404:	|      move.l 72(sp),d0
    4408:	|      add.l d0,d0
    440a:	|      add.l d0,d0
    440c:	|      move.l d0,d1
    440e:	|      move.l 19c44 <startOfTextIndex>,d0
    4414:	|      add.l d1,d0
    4416:	|      move.l d0,60(sp)
    441a:	|      moveq #-1,d0
    441c:	|      move.l d0,56(sp)
    4420:	|      move.l 19c58 <DOSBase>,d0
    4426:	|      movea.l d0,a6
    4428:	|      move.l 64(sp),d1
    442c:	|      move.l 60(sp),d2
    4430:	|      move.l 56(sp),d3
    4434:	|      jsr -66(a6)
    4438:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    443c:	|      move.l 19c38 <bigDataFile>,d0
    4442:	|      move.l d0,-(sp)
    4444:	|      jsr 718 <get4bytes>
    444a:	|      addq.l #4,sp
    444c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4450:	|      move.l 19c38 <bigDataFile>,48(sp)
    4458:	|      move.l 72(sp),44(sp)
    445e:	|      moveq #-1,d0
    4460:	|      move.l d0,40(sp)
    4464:	|      move.l 19c58 <DOSBase>,d0
    446a:	|      movea.l d0,a6
    446c:	|      move.l 48(sp),d1
    4470:	|      move.l 44(sp),d2
    4474:	|      move.l 40(sp),d3
    4478:	|      jsr -66(a6)
    447c:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    4480:	|      move.l 19c38 <bigDataFile>,d0
    4486:	|      move.l d0,-(sp)
    4488:	|      jsr b02 <readString>
    448e:	|      addq.l #4,sp
    4490:	|      move.l d0,32(sp)
	
	return s;
    4494:	|      move.l 32(sp),d0
}
    4498:	\----> movem.l (sp)+,d2-d3/a6
    449c:	       lea 56(sp),sp
    44a0:	       rts

000044a2 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    44a2:	       lea -32(sp),sp
    44a6:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    44aa:	       move.w 18128 <sliceBusy>,d0
    44b0:	   /-- beq.s 44cc <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    44b2:	   |   pea 144ff <thumbnail.c.7eb31449+0xa8>
    44b8:	   |   pea 1451d <thumbnail.c.7eb31449+0xc6>
    44be:	   |   jsr 12ed6 <KPrintF>
    44c4:	   |   addq.l #8,sp
		return 0;
    44c6:	   |   moveq #0,d0
    44c8:	/--|-- bra.w 4560 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    44cc:	|  \-> move.l 19c38 <bigDataFile>,40(sp)
    44d4:	|      move.l 48(sp),d0
    44d8:	|      add.l d0,d0
    44da:	|      add.l d0,d0
    44dc:	|      move.l d0,d1
    44de:	|      move.l 19c40 <startOfDataIndex>,d0
    44e4:	|      add.l d1,d0
    44e6:	|      move.l d0,36(sp)
    44ea:	|      moveq #-1,d0
    44ec:	|      move.l d0,32(sp)
    44f0:	|      move.l 19c58 <DOSBase>,d0
    44f6:	|      movea.l d0,a6
    44f8:	|      move.l 40(sp),d1
    44fc:	|      move.l 36(sp),d2
    4500:	|      move.l 32(sp),d3
    4504:	|      jsr -66(a6)
    4508:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    450c:	|      move.l 19c38 <bigDataFile>,24(sp)
    4514:	|      move.l 19c38 <bigDataFile>,d0
    451a:	|      move.l d0,-(sp)
    451c:	|      jsr 718 <get4bytes>
    4522:	|      addq.l #4,sp
    4524:	|      move.l d0,20(sp)
    4528:	|      clr.l 16(sp)
    452c:	|      move.l 19c58 <DOSBase>,d0
    4532:	|      movea.l d0,a6
    4534:	|      move.l 24(sp),d1
    4538:	|      move.l 20(sp),d2
    453c:	|      move.l 16(sp),d3
    4540:	|      jsr -66(a6)
    4544:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4548:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4550:	|      move.l 19c38 <bigDataFile>,d0
    4556:	|      move.l d0,-(sp)
    4558:	|      jsr 718 <get4bytes>
    455e:	|      addq.l #4,sp
}
    4560:	\----> movem.l (sp)+,d2-d3/a6
    4564:	       lea 32(sp),sp
    4568:	       rts

0000456a <openObjectSlice>:

BOOL openObjectSlice (int num) {
    456a:	       lea -32(sp),sp
    456e:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    4572:	       move.w 18128 <sliceBusy>,d0
    4578:	   /-- beq.s 4594 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    457a:	   |   pea 144ff <thumbnail.c.7eb31449+0xa8>
    4580:	   |   pea 1451d <thumbnail.c.7eb31449+0xc6>
    4586:	   |   jsr 12ed6 <KPrintF>
    458c:	   |   addq.l #8,sp
        return FALSE;
    458e:	   |   clr.w d0
    4590:	/--|-- bra.w 4620 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    4594:	|  \-> move.l 19c38 <bigDataFile>,40(sp)
    459c:	|      move.l 48(sp),d0
    45a0:	|      add.l d0,d0
    45a2:	|      add.l d0,d0
    45a4:	|      move.l d0,d1
    45a6:	|      move.l 19c4c <startOfObjectIndex>,d0
    45ac:	|      add.l d1,d0
    45ae:	|      move.l d0,36(sp)
    45b2:	|      moveq #-1,d0
    45b4:	|      move.l d0,32(sp)
    45b8:	|      move.l 19c58 <DOSBase>,d0
    45be:	|      movea.l d0,a6
    45c0:	|      move.l 40(sp),d1
    45c4:	|      move.l 36(sp),d2
    45c8:	|      move.l 32(sp),d3
    45cc:	|      jsr -66(a6)
    45d0:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    45d4:	|      move.l 19c38 <bigDataFile>,24(sp)
    45dc:	|      move.l 19c38 <bigDataFile>,d0
    45e2:	|      move.l d0,-(sp)
    45e4:	|      jsr 718 <get4bytes>
    45ea:	|      addq.l #4,sp
    45ec:	|      move.l d0,20(sp)
    45f0:	|      moveq #-1,d0
    45f2:	|      move.l d0,16(sp)
    45f6:	|      move.l 19c58 <DOSBase>,d0
    45fc:	|      movea.l d0,a6
    45fe:	|      move.l 24(sp),d1
    4602:	|      move.l 20(sp),d2
    4606:	|      move.l 16(sp),d3
    460a:	|      jsr -66(a6)
    460e:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    4612:	|      move.w #1,18128 <sliceBusy>
    461a:	|      move.w 18128 <sliceBusy>,d0
}
    4620:	\----> movem.l (sp)+,d2-d3/a6
    4624:	       lea 32(sp),sp
    4628:	       rts

0000462a <openSubSlice>:

BOOL openSubSlice (int num) {
    462a:	       lea -32(sp),sp
    462e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4632:	       move.w 18128 <sliceBusy>,d0
    4638:	   /-- beq.s 4654 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    463a:	   |   pea 144ff <thumbnail.c.7eb31449+0xa8>
    4640:	   |   pea 1451d <thumbnail.c.7eb31449+0xc6>
    4646:	   |   jsr 12ed6 <KPrintF>
    464c:	   |   addq.l #8,sp
		return FALSE;
    464e:	   |   clr.w d0
    4650:	/--|-- bra.w 46e0 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4654:	|  \-> move.l 19c38 <bigDataFile>,40(sp)
    465c:	|      move.l 48(sp),d0
    4660:	|      add.l d0,d0
    4662:	|      add.l d0,d0
    4664:	|      move.l d0,d1
    4666:	|      move.l 19c48 <startOfSubIndex>,d0
    466c:	|      add.l d1,d0
    466e:	|      move.l d0,36(sp)
    4672:	|      moveq #-1,d0
    4674:	|      move.l d0,32(sp)
    4678:	|      move.l 19c58 <DOSBase>,d0
    467e:	|      movea.l d0,a6
    4680:	|      move.l 40(sp),d1
    4684:	|      move.l 36(sp),d2
    4688:	|      move.l 32(sp),d3
    468c:	|      jsr -66(a6)
    4690:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4694:	|      move.l 19c38 <bigDataFile>,24(sp)
    469c:	|      move.l 19c38 <bigDataFile>,d0
    46a2:	|      move.l d0,-(sp)
    46a4:	|      jsr 718 <get4bytes>
    46aa:	|      addq.l #4,sp
    46ac:	|      move.l d0,20(sp)
    46b0:	|      moveq #-1,d0
    46b2:	|      move.l d0,16(sp)
    46b6:	|      move.l 19c58 <DOSBase>,d0
    46bc:	|      movea.l d0,a6
    46be:	|      move.l 24(sp),d1
    46c2:	|      move.l 20(sp),d2
    46c6:	|      move.l 16(sp),d3
    46ca:	|      jsr -66(a6)
    46ce:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    46d2:	|      move.w #1,18128 <sliceBusy>
    46da:	|      move.w 18128 <sliceBusy>,d0
}
    46e0:	\----> movem.l (sp)+,d2-d3/a6
    46e4:	       lea 32(sp),sp
    46e8:	       rts

000046ea <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    46ea:	       lea -180(sp),sp
    46ee:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    46f2:	       tst.l 196(sp)
    46f6:	/----- beq.s 4736 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    46f8:	|      move.l 196(sp),19c38 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4700:	|      move.l 196(sp),168(sp)
    4706:	|      clr.l 164(sp)
    470a:	|      clr.l 160(sp)
    470e:	|      move.l 19c58 <DOSBase>,d0
    4714:	|      movea.l d0,a6
    4716:	|      move.l 168(sp),d1
    471a:	|      move.l 164(sp),d2
    471e:	|      move.l 160(sp),d3
    4722:	|      jsr -66(a6)
    4726:	|      move.l d0,156(sp)
    472a:	|      move.l 156(sp),d0
    472e:	|      move.l d0,19c3c <startIndex>
    4734:	|  /-- bra.s 4770 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4736:	\--|-> move.l 19c38 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    473e:	   |   move.l 196(sp),184(sp)
    4744:	   |   move.l 19c3c <startIndex>,d0
    474a:	   |   move.l d0,180(sp)
    474e:	   |   moveq #-1,d0
    4750:	   |   move.l d0,176(sp)
    4754:	   |   move.l 19c58 <DOSBase>,d0
    475a:	   |   movea.l d0,a6
    475c:	   |   move.l 184(sp),d1
    4760:	   |   move.l 180(sp),d2
    4764:	   |   move.l 176(sp),d3
    4768:	   |   jsr -66(a6)
    476c:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4770:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    4776:	       move.l 204(sp),d0
    477a:	       cmp.l 200(sp),d0
    477e:	   /-- bls.s 4792 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4780:	   |   pea 14537 <thumbnail.c.7eb31449+0xe0>
    4786:	   |   jsr 12ed6 <KPrintF>
    478c:	   |   addq.l #4,sp
		skipBefore = 0;
    478e:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4792:	   \-> move.l 200(sp),d0
    4796:	       sub.l 204(sp),d0
    479a:	       move.l d0,188(sp)
	while (skipBefore) {
    479e:	   /-- bra.s 47dc <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    47a0:	/--|-> move.l 196(sp),24(sp)
    47a6:	|  |   move.l 196(sp),-(sp)
    47aa:	|  |   jsr 718 <get4bytes>
    47b0:	|  |   addq.l #4,sp
    47b2:	|  |   move.l d0,20(sp)
    47b6:	|  |   moveq #-1,d0
    47b8:	|  |   move.l d0,16(sp)
    47bc:	|  |   move.l 19c58 <DOSBase>,d0
    47c2:	|  |   movea.l d0,a6
    47c4:	|  |   move.l 24(sp),d1
    47c8:	|  |   move.l 20(sp),d2
    47cc:	|  |   move.l 16(sp),d3
    47d0:	|  |   jsr -66(a6)
    47d4:	|  |   move.l d0,12(sp)
		skipBefore --;
    47d8:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    47dc:	|  \-> tst.l 204(sp)
    47e0:	\----- bne.s 47a0 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    47e2:	       move.l 196(sp),152(sp)
    47e8:	       clr.l 148(sp)
    47ec:	       clr.l 144(sp)
    47f0:	       move.l 19c58 <DOSBase>,d0
    47f6:	       movea.l d0,a6
    47f8:	       move.l 152(sp),d1
    47fc:	       move.l 148(sp),d2
    4800:	       move.l 144(sp),d3
    4804:	       jsr -66(a6)
    4808:	       move.l d0,140(sp)
    480c:	       move.l 140(sp),d0
    4810:	       addq.l #4,d0
    4812:	       move.l d0,19c44 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4818:	       move.l 196(sp),136(sp)
    481e:	       move.l 196(sp),-(sp)
    4822:	       jsr 718 <get4bytes>
    4828:	       addq.l #4,sp
    482a:	       move.l d0,132(sp)
    482e:	       moveq #-1,d0
    4830:	       move.l d0,128(sp)
    4834:	       move.l 19c58 <DOSBase>,d0
    483a:	       movea.l d0,a6
    483c:	       move.l 136(sp),d1
    4840:	       move.l 132(sp),d2
    4844:	       move.l 128(sp),d3
    4848:	       jsr -66(a6)
    484c:	       move.l d0,124(sp)

	while (skipAfter) {
    4850:	   /-- bra.s 488e <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4852:	/--|-> move.l 196(sp),40(sp)
    4858:	|  |   move.l 196(sp),-(sp)
    485c:	|  |   jsr 718 <get4bytes>
    4862:	|  |   addq.l #4,sp
    4864:	|  |   move.l d0,36(sp)
    4868:	|  |   moveq #-1,d0
    486a:	|  |   move.l d0,32(sp)
    486e:	|  |   move.l 19c58 <DOSBase>,d0
    4874:	|  |   movea.l d0,a6
    4876:	|  |   move.l 40(sp),d1
    487a:	|  |   move.l 36(sp),d2
    487e:	|  |   move.l 32(sp),d3
    4882:	|  |   jsr -66(a6)
    4886:	|  |   move.l d0,28(sp)
		skipAfter --;
    488a:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    488e:	|  \-> tst.l 188(sp)
    4892:	\----- bne.s 4852 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4894:	       move.l 196(sp),120(sp)
    489a:	       clr.l 116(sp)
    489e:	       clr.l 112(sp)
    48a2:	       move.l 19c58 <DOSBase>,d0
    48a8:	       movea.l d0,a6
    48aa:	       move.l 120(sp),d1
    48ae:	       move.l 116(sp),d2
    48b2:	       move.l 112(sp),d3
    48b6:	       jsr -66(a6)
    48ba:	       move.l d0,108(sp)
    48be:	       move.l 108(sp),d0
    48c2:	       addq.l #4,d0
    48c4:	       move.l d0,19c48 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    48ca:	       move.l 196(sp),104(sp)
    48d0:	       move.l 196(sp),-(sp)
    48d4:	       jsr 718 <get4bytes>
    48da:	       addq.l #4,sp
    48dc:	       move.l d0,100(sp)
    48e0:	       clr.l 96(sp)
    48e4:	       move.l 19c58 <DOSBase>,d0
    48ea:	       movea.l d0,a6
    48ec:	       move.l 104(sp),d1
    48f0:	       move.l 100(sp),d2
    48f4:	       move.l 96(sp),d3
    48f8:	       jsr -66(a6)
    48fc:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4900:	       move.l 196(sp),88(sp)
    4906:	       clr.l 84(sp)
    490a:	       clr.l 80(sp)
    490e:	       move.l 19c58 <DOSBase>,d0
    4914:	       movea.l d0,a6
    4916:	       move.l 88(sp),d1
    491a:	       move.l 84(sp),d2
    491e:	       move.l 80(sp),d3
    4922:	       jsr -66(a6)
    4926:	       move.l d0,76(sp)
    492a:	       move.l 76(sp),d0
    492e:	       addq.l #4,d0
    4930:	       move.l d0,19c4c <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4936:	       move.l 196(sp),72(sp)
    493c:	       move.l 196(sp),-(sp)
    4940:	       jsr 718 <get4bytes>
    4946:	       addq.l #4,sp
    4948:	       move.l d0,68(sp)
    494c:	       clr.l 64(sp)
    4950:	       move.l 19c58 <DOSBase>,d0
    4956:	       movea.l d0,a6
    4958:	       move.l 72(sp),d1
    495c:	       move.l 68(sp),d2
    4960:	       move.l 64(sp),d3
    4964:	       jsr -66(a6)
    4968:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    496c:	       move.l 196(sp),56(sp)
    4972:	       clr.l 52(sp)
    4976:	       clr.l 48(sp)
    497a:	       move.l 19c58 <DOSBase>,d0
    4980:	       movea.l d0,a6
    4982:	       move.l 56(sp),d1
    4986:	       move.l 52(sp),d2
    498a:	       move.l 48(sp),d3
    498e:	       jsr -66(a6)
    4992:	       move.l d0,44(sp)
    4996:	       move.l 44(sp),d0
    499a:	       move.l d0,19c40 <startOfDataIndex>
    49a0:	       nop
    49a2:	       movem.l (sp)+,d2-d3/a6
    49a6:	       lea 180(sp),sp
    49aa:	       rts

000049ac <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    49ac:	    lea -20(sp),sp
    49b0:	    move.l a6,-(sp)
    49b2:	    move.l d7,-(sp)
	APTR vbr = 0;
    49b4:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    49b8:	    move.w #20090,10(sp)
    49be:	    move.w #2049,12(sp)
    49c4:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    49ca:	    movea.l 19c50 <SysBase>,a0
    49d0:	    move.w 296(a0),d0
    49d4:	    move.w d0,d0
    49d6:	    andi.l #65535,d0
    49dc:	    moveq #1,d1
    49de:	    and.l d1,d0
    49e0:	/-- beq.s 4a0e <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    49e2:	|   lea 28(sp),a0
    49e6:	|   lea -18(a0),a0
    49ea:	|   move.l a0,20(sp)
    49ee:	|   move.l 19c50 <SysBase>,d0
    49f4:	|   movea.l d0,a6
    49f6:	|   move.l 20(sp),d7
    49fa:	|   exg d7,a5
    49fc:	|   jsr -30(a6)
    4a00:	|   exg d7,a5
    4a02:	|   move.l d0,16(sp)
    4a06:	|   move.l 16(sp),d0
    4a0a:	|   move.l d0,24(sp)

	return vbr;
    4a0e:	\-> move.l 24(sp),d0
}
    4a12:	    move.l (sp)+,d7
    4a14:	    movea.l (sp)+,a6
    4a16:	    lea 20(sp),sp
    4a1a:	    rts

00004a1c <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4a1c:	movea.l 19c76 <VBR>,a0
    4a22:	lea 108(a0),a0
    4a26:	move.l 4(sp),(a0)
}
    4a2a:	nop
    4a2c:	rts

00004a2e <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4a2e:	movea.l 19c76 <VBR>,a0
    4a34:	move.l 108(a0),d0
}
    4a38:	rts

00004a3a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4a3a:	       subq.l #8,sp
    4a3c:	       move.l a6,-(sp)
	Forbid();
    4a3e:	       move.l 19c50 <SysBase>,d0
    4a44:	       movea.l d0,a6
    4a46:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    4a4a:	       movea.l 19c54 <custom>,a0
    4a50:	       move.w 16(a0),d0
    4a54:	       move.w d0,19c74 <SystemADKCON>
	SystemInts=custom->intenar;
    4a5a:	       movea.l 19c54 <custom>,a0
    4a60:	       move.w 28(a0),d0
    4a64:	       move.w d0,19c70 <SystemInts>
	SystemDMA=custom->dmaconr;
    4a6a:	       movea.l 19c54 <custom>,a0
    4a70:	       move.w 2(a0),d0
    4a74:	       move.w d0,19c72 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4a7a:	       movea.l 19c5c <GfxBase>,a0
    4a80:	       move.l 34(a0),d0
    4a84:	       move.l d0,19c7e <ActiView>

	LoadView(0);
    4a8a:	       clr.l 4(sp)
    4a8e:	       move.l 19c5c <GfxBase>,d0
    4a94:	       movea.l d0,a6
    4a96:	       movea.l 4(sp),a1
    4a9a:	       jsr -222(a6)
	WaitTOF();
    4a9e:	       move.l 19c5c <GfxBase>,d0
    4aa4:	       movea.l d0,a6
    4aa6:	       jsr -270(a6)
	WaitTOF();
    4aaa:	       move.l 19c5c <GfxBase>,d0
    4ab0:	       movea.l d0,a6
    4ab2:	       jsr -270(a6)

	WaitVbl();
    4ab6:	       jsr 12dfe <WaitVbl>
	WaitVbl();
    4abc:	       jsr 12dfe <WaitVbl>

	OwnBlitter();
    4ac2:	       move.l 19c5c <GfxBase>,d0
    4ac8:	       movea.l d0,a6
    4aca:	       jsr -456(a6)
	WaitBlit();	
    4ace:	       move.l 19c5c <GfxBase>,d0
    4ad4:	       movea.l d0,a6
    4ad6:	       jsr -228(a6)
	Disable();
    4ada:	       move.l 19c50 <SysBase>,d0
    4ae0:	       movea.l d0,a6
    4ae2:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    4ae6:	       movea.l 19c54 <custom>,a0
    4aec:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    4af2:	       clr.l 8(sp)
    4af6:	   /-- bra.s 4b14 <TakeSystem+0xda>
		custom->color[a]=0;
    4af8:	/--|-> movea.l 19c54 <custom>,a0
    4afe:	|  |   move.l 8(sp),d0
    4b02:	|  |   addi.l #192,d0
    4b08:	|  |   add.l d0,d0
    4b0a:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4b10:	|  |   addq.l #1,8(sp)
    4b14:	|  \-> moveq #31,d0
    4b16:	|      cmp.l 8(sp),d0
    4b1a:	\----- bge.s 4af8 <TakeSystem+0xbe>

	WaitVbl();
    4b1c:	       jsr 12dfe <WaitVbl>
	WaitVbl();
    4b22:	       jsr 12dfe <WaitVbl>

	VBR=GetVBR();
    4b28:	       jsr 49ac <GetVBR>
    4b2e:	       move.l d0,19c76 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4b34:	       jsr 4a2e <GetInterruptHandler>
    4b3a:	       move.l d0,19c7a <SystemIrq>
}
    4b40:	       nop
    4b42:	       movea.l (sp)+,a6
    4b44:	       addq.l #8,sp
    4b46:	       rts

00004b48 <FreeSystem>:

void FreeSystem() { 
    4b48:	subq.l #4,sp
    4b4a:	move.l a6,-(sp)
	WaitVbl();
    4b4c:	jsr 12dfe <WaitVbl>
	WaitBlit();
    4b52:	move.l 19c5c <GfxBase>,d0
    4b58:	movea.l d0,a6
    4b5a:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4b5e:	movea.l 19c54 <custom>,a0
    4b64:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4b6a:	movea.l 19c54 <custom>,a0
    4b70:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4b76:	movea.l 19c54 <custom>,a0
    4b7c:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4b82:	move.l 19c7a <SystemIrq>,d0
    4b88:	move.l d0,-(sp)
    4b8a:	jsr 4a1c <SetInterruptHandler>
    4b90:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4b92:	movea.l 19c5c <GfxBase>,a0
    4b98:	move.l 38(a0),d0
    4b9c:	movea.l 19c54 <custom>,a0
    4ba2:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4ba6:	movea.l 19c5c <GfxBase>,a0
    4bac:	move.l 50(a0),d0
    4bb0:	movea.l 19c54 <custom>,a0
    4bb6:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4bba:	movea.l 19c54 <custom>,a0
    4bc0:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4bc6:	move.w 19c72 <SystemDMA>,d0
    4bcc:	movea.l 19c54 <custom>,a0
    4bd2:	ori.w #-32768,d0
    4bd6:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4bda:	move.w 19c74 <SystemADKCON>,d0
    4be0:	movea.l 19c54 <custom>,a0
    4be6:	ori.w #-32768,d0
    4bea:	move.w d0,158(a0)

	WaitBlit();	
    4bee:	move.l 19c5c <GfxBase>,d0
    4bf4:	movea.l d0,a6
    4bf6:	jsr -228(a6)
	DisownBlitter();
    4bfa:	move.l 19c5c <GfxBase>,d0
    4c00:	movea.l d0,a6
    4c02:	jsr -462(a6)
	Enable();
    4c06:	move.l 19c50 <SysBase>,d0
    4c0c:	movea.l d0,a6
    4c0e:	jsr -126(a6)

	LoadView(ActiView);
    4c12:	move.l 19c7e <ActiView>,4(sp)
    4c1a:	move.l 19c5c <GfxBase>,d0
    4c20:	movea.l d0,a6
    4c22:	movea.l 4(sp),a1
    4c26:	jsr -222(a6)
	WaitTOF();
    4c2a:	move.l 19c5c <GfxBase>,d0
    4c30:	movea.l d0,a6
    4c32:	jsr -270(a6)
	WaitTOF();
    4c36:	move.l 19c5c <GfxBase>,d0
    4c3c:	movea.l d0,a6
    4c3e:	jsr -270(a6)

	Permit();
    4c42:	move.l 19c50 <SysBase>,d0
    4c48:	movea.l d0,a6
    4c4a:	jsr -138(a6)
}
    4c4e:	nop
    4c50:	movea.l (sp)+,a6
    4c52:	addq.l #4,sp
    4c54:	rts

00004c56 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    4c56:	move.l a3,-(sp)
    4c58:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    4c5a:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4c5e:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    4c60:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    4c62:	move.l 1812a <player>,d0
    4c68:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    4c6a:	movem.l d1-d7/a4-a6,-(sp)
    4c6e:	jsr (a3)
    4c70:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    4c74:	movea.l (sp)+,a2
    4c76:	movea.l (sp)+,a3
    4c78:	rts

00004c7a <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    4c7a:	move.l a6,-(sp)
    4c7c:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    4c7e:	move.l 1812a <player>,d0
    4c84:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    4c86:	movea.l #14675968,a6
		__asm volatile (
    4c8c:	movem.l d0-d1/a0-a1,-(sp)
    4c90:	jsr 8(a3)
    4c94:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    4c98:	nop
    4c9a:	movea.l (sp)+,a3
    4c9c:	movea.l (sp)+,a6
    4c9e:	rts

00004ca0 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4ca0:	    lea -128(sp),sp
    4ca4:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4ca8:	    movea.w #4,a0
    4cac:	    move.l (a0),d0
    4cae:	    move.l d0,19c50 <SysBase>
	custom = (struct Custom*)0xdff000;	
    4cb4:	    move.l #14675968,19c54 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4cbe:	    move.l #89831,136(sp)
    4cc6:	    clr.l 132(sp)
    4cca:	    move.l 19c50 <SysBase>,d0
    4cd0:	    movea.l d0,a6
    4cd2:	    movea.l 136(sp),a1
    4cd6:	    move.l 132(sp),d0
    4cda:	    jsr -552(a6)
    4cde:	    move.l d0,128(sp)
    4ce2:	    move.l 128(sp),d0
    4ce6:	    move.l d0,19c5c <GfxBase>
	if (!GfxBase)
    4cec:	    move.l 19c5c <GfxBase>,d0
    4cf2:	/-- bne.s 4d08 <main+0x68>
		Exit(0);
    4cf4:	|   clr.l 124(sp)
    4cf8:	|   move.l 19c58 <DOSBase>,d0
    4cfe:	|   movea.l d0,a6
    4d00:	|   move.l 124(sp),d1
    4d04:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4d08:	\-> move.l #89848,120(sp)
    4d10:	    clr.l 116(sp)
    4d14:	    move.l 19c50 <SysBase>,d0
    4d1a:	    movea.l d0,a6
    4d1c:	    movea.l 120(sp),a1
    4d20:	    move.l 116(sp),d0
    4d24:	    jsr -552(a6)
    4d28:	    move.l d0,112(sp)
    4d2c:	    move.l 112(sp),d0
    4d30:	    move.l d0,19c58 <DOSBase>
	if (!DOSBase)
    4d36:	    move.l 19c58 <DOSBase>,d0
    4d3c:	/-- bne.s 4d52 <main+0xb2>
		Exit(0);
    4d3e:	|   clr.l 108(sp)
    4d42:	|   move.l 19c58 <DOSBase>,d0
    4d48:	|   movea.l d0,a6
    4d4a:	|   move.l 108(sp),d1
    4d4e:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4d52:	\-> move.l #89860,104(sp)
    4d5a:	    clr.l 100(sp)
    4d5e:	    move.l 19c50 <SysBase>,d0
    4d64:	    movea.l d0,a6
    4d66:	    movea.l 104(sp),a1
    4d6a:	    move.l 100(sp),d0
    4d6e:	    jsr -552(a6)
    4d72:	    move.l d0,96(sp)
    4d76:	    move.l 96(sp),d0
    4d7a:	    move.l d0,19c60 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4d80:	    move.l 19c60 <MathIeeeSingBasBase>,d0
    4d86:	/-- bne.s 4d9c <main+0xfc>
		Exit(0);	
    4d88:	|   clr.l 92(sp)
    4d8c:	|   move.l 19c58 <DOSBase>,d0
    4d92:	|   movea.l d0,a6
    4d94:	|   move.l 92(sp),d1
    4d98:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    4d9c:	\-> move.l #89884,88(sp)
    4da4:	    clr.l 84(sp)
    4da8:	    move.l 19c50 <SysBase>,d0
    4dae:	    movea.l d0,a6
    4db0:	    movea.l 88(sp),a1
    4db4:	    move.l 84(sp),d0
    4db8:	    jsr -552(a6)
    4dbc:	    move.l d0,80(sp)
    4dc0:	    move.l 80(sp),d0
    4dc4:	    move.l d0,19c64 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4dca:	    move.l 19c64 <MathIeeeSingTransBase>,d0
    4dd0:	/-- bne.s 4de6 <main+0x146>
		Exit(0);
    4dd2:	|   clr.l 76(sp)
    4dd6:	|   move.l 19c58 <DOSBase>,d0
    4ddc:	|   movea.l d0,a6
    4dde:	|   move.l 76(sp),d1
    4de2:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4de6:	\-> move.l #89910,72(sp)
    4dee:	    clr.l 68(sp)
    4df2:	    move.l 19c50 <SysBase>,d0
    4df8:	    movea.l d0,a6
    4dfa:	    movea.l 72(sp),a1
    4dfe:	    move.l 68(sp),d0
    4e02:	    jsr -552(a6)
    4e06:	    move.l d0,64(sp)
    4e0a:	    move.l 64(sp),d0
    4e0e:	    move.l d0,19c6c <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4e14:	    move.l 19c6c <MathIeeeDoubTransBase>,d0
    4e1a:	/-- bne.s 4e30 <main+0x190>
		Exit(0);
    4e1c:	|   clr.l 60(sp)
    4e20:	|   move.l 19c58 <DOSBase>,d0
    4e26:	|   movea.l d0,a6
    4e28:	|   move.l 60(sp),d1
    4e2c:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4e30:	\-> move.l #89936,56(sp)
    4e38:	    clr.l 52(sp)
    4e3c:	    move.l 19c50 <SysBase>,d0
    4e42:	    movea.l d0,a6
    4e44:	    movea.l 56(sp),a1
    4e48:	    move.l 52(sp),d0
    4e4c:	    jsr -552(a6)
    4e50:	    move.l d0,48(sp)
    4e54:	    move.l 48(sp),d0
    4e58:	    move.l d0,19c68 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4e5e:	    move.l 19c68 <MathIeeeDoubBasBase>,d0
    4e64:	/-- bne.s 4e7a <main+0x1da>
		Exit(0);
    4e66:	|   clr.l 44(sp)
    4e6a:	|   move.l 19c58 <DOSBase>,d0
    4e70:	|   movea.l d0,a6
    4e72:	|   move.l 44(sp),d1
    4e76:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    4e7a:	\-> pea 15f68 <line.c.05397aaf+0x2>
    4e80:	    jsr 12ed6 <KPrintF>
    4e86:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    4e88:	    move.l 19c58 <DOSBase>,d0
    4e8e:	    movea.l d0,a6
    4e90:	    jsr -60(a6)
    4e94:	    move.l d0,40(sp)
    4e98:	    move.l 40(sp),d0
    4e9c:	    move.l d0,36(sp)
    4ea0:	    move.l #89988,32(sp)
    4ea8:	    moveq #15,d0
    4eaa:	    move.l d0,28(sp)
    4eae:	    move.l 19c58 <DOSBase>,d0
    4eb4:	    movea.l d0,a6
    4eb6:	    move.l 36(sp),d1
    4eba:	    move.l 32(sp),d2
    4ebe:	    move.l 28(sp),d3
    4ec2:	    jsr -48(a6)
    4ec6:	    move.l d0,24(sp)
	Delay(50);
    4eca:	    moveq #50,d0
    4ecc:	    move.l d0,20(sp)
    4ed0:	    move.l 19c58 <DOSBase>,d0
    4ed6:	    movea.l d0,a6
    4ed8:	    move.l 20(sp),d1
    4edc:	    jsr -198(a6)

	warpmode(1);
    4ee0:	    pea 1 <_start+0x1>
    4ee4:	    jsr 12f40 <warpmode>
    4eea:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    4eec:	    move.l 1812e <module>,d0
    4ef2:	    move.l d0,-(sp)
    4ef4:	    jsr 4c56 <p61Init>
    4efa:	    addq.l #4,sp
    4efc:	    tst.l d0
    4efe:	/-- beq.s 4f0e <main+0x26e>
		KPrintF("p61Init failed!\n");
    4f00:	|   pea 15f94 <line.c.05397aaf+0x2e>
    4f06:	|   jsr 12ed6 <KPrintF>
    4f0c:	|   addq.l #4,sp
#endif
	warpmode(0);
    4f0e:	\-> clr.l -(sp)
    4f10:	    jsr 12f40 <warpmode>
    4f16:	    addq.l #4,sp

	TakeSystem();
    4f18:	    jsr 4a3a <TakeSystem>

	custom->dmacon = 0x87ff;
    4f1e:	    movea.l 19c54 <custom>,a0
    4f24:	    move.w #-30721,150(a0)
	WaitVbl();
    4f2a:	    jsr 12dfe <WaitVbl>

	main_sludge(argc, argv);
    4f30:	    move.l 148(sp),-(sp)
    4f34:	    move.l 148(sp),-(sp)
    4f38:	    jsr 16a0 <main_sludge>
    4f3e:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    4f40:	    jsr 4c7a <p61End>
#endif

	// END
	FreeSystem();
    4f46:	    jsr 4b48 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    4f4c:	    move.l 19c58 <DOSBase>,16(sp)
    4f54:	    move.l 19c50 <SysBase>,d0
    4f5a:	    movea.l d0,a6
    4f5c:	    movea.l 16(sp),a1
    4f60:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    4f64:	    move.l 19c5c <GfxBase>,12(sp)
    4f6c:	    move.l 19c50 <SysBase>,d0
    4f72:	    movea.l d0,a6
    4f74:	    movea.l 12(sp),a1
    4f78:	    jsr -414(a6)
    4f7c:	    moveq #0,d0
}
    4f7e:	    movem.l (sp)+,d2-d3/a6
    4f82:	    lea 128(sp),sp
    4f86:	    rts

00004f88 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    4f88:	    lea -16(sp),sp
    4f8c:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    4f8e:	    moveq #8,d0
    4f90:	    move.l d0,16(sp)
    4f94:	    clr.l 12(sp)
    4f98:	    move.l 19c50 <SysBase>,d0
    4f9e:	    movea.l d0,a6
    4fa0:	    move.l 16(sp),d0
    4fa4:	    move.l 12(sp),d1
    4fa8:	    jsr -684(a6)
    4fac:	    move.l d0,8(sp)
    4fb0:	    move.l 8(sp),d0
    4fb4:	    move.l d0,4(sp)
	if (!newStat) {
    4fb8:	/-- bne.s 4fe8 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    4fba:	|   movea.l 18132 <nowStatus>,a0
    4fc0:	|   move.l (a0),d0
    4fc2:	|   movea.l 4(sp),a0
    4fc6:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    4fca:	|   pea 141a4 <cursors.c.412ac4f3+0x6a>
    4fd0:	|   jsr b8 <copyString>
    4fd6:	|   addq.l #4,sp
    4fd8:	|   movea.l 4(sp),a0
    4fdc:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    4fde:	|   movea.l 18132 <nowStatus>,a0
    4fe4:	|   move.l 4(sp),(a0)
	}
}
    4fe8:	\-> nop
    4fea:	    movea.l (sp)+,a6
    4fec:	    lea 16(sp),sp
    4ff0:	    rts

00004ff2 <clearStatusBar>:

void clearStatusBar () {
    4ff2:	       lea -16(sp),sp
    4ff6:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    4ff8:	       movea.l 18132 <nowStatus>,a0
    4ffe:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    5002:	       movea.l 18132 <nowStatus>,a0
    5008:	       moveq #-1,d0
    500a:	       move.l d0,6(a0)
	while (stat) {
    500e:	   /-- bra.s 504e <clearStatusBar+0x5c>
		kill = stat;
    5010:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    5016:	|  |   movea.l 16(sp),a0
    501a:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5020:	|  |   movea.l 12(sp),a0
    5024:	|  |   move.l (a0),8(sp)
    5028:	|  |   move.l 19c50 <SysBase>,d0
    502e:	|  |   movea.l d0,a6
    5030:	|  |   movea.l 8(sp),a1
    5034:	|  |   jsr -690(a6)
		FreeVec(kill);
    5038:	|  |   move.l 12(sp),4(sp)
    503e:	|  |   move.l 19c50 <SysBase>,d0
    5044:	|  |   movea.l d0,a6
    5046:	|  |   movea.l 4(sp),a1
    504a:	|  |   jsr -690(a6)
	while (stat) {
    504e:	|  \-> tst.l 16(sp)
    5052:	\----- bne.s 5010 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    5054:	       movea.l 18132 <nowStatus>,a0
    505a:	       clr.l (a0)
}
    505c:	       nop
    505e:	       movea.l (sp)+,a6
    5060:	       lea 16(sp),sp
    5064:	       rts

00005066 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    5066:	clr.l 19c82 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    506c:	move.w #-1,19c86 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    5074:	moveq #-1,d0
    5076:	move.l d0,19c88 <mainStatus+0x6>
	mainStatus.statusX = 10;
    507c:	moveq #10,d0
    507e:	move.l d0,19c8c <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    5084:	movea.l 19b54 <winHeight>,a0
    508a:	lea -15(a0),a0
    508e:	move.l a0,d0
    5090:	move.l d0,19c90 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    5096:	nop
    5098:	rts

0000509a <killLastStatus>:

void killLastStatus () {
    509a:	    lea -12(sp),sp
    509e:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    50a0:	    movea.l 18132 <nowStatus>,a0
    50a6:	    move.l (a0),d0
    50a8:	/-- beq.s 50f2 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    50aa:	|   movea.l 18132 <nowStatus>,a0
    50b0:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    50b4:	|   movea.l 18132 <nowStatus>,a0
    50ba:	|   movea.l 12(sp),a1
    50be:	|   move.l 4(a1),d0
    50c2:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    50c4:	|   movea.l 12(sp),a0
    50c8:	|   move.l (a0),8(sp)
    50cc:	|   move.l 19c50 <SysBase>,d0
    50d2:	|   movea.l d0,a6
    50d4:	|   movea.l 8(sp),a1
    50d8:	|   jsr -690(a6)
		FreeVec(kill);
    50dc:	|   move.l 12(sp),4(sp)
    50e2:	|   move.l 19c50 <SysBase>,d0
    50e8:	|   movea.l d0,a6
    50ea:	|   movea.l 4(sp),a1
    50ee:	|   jsr -690(a6)
	}
}
    50f2:	\-> nop
    50f4:	    movea.l (sp)+,a6
    50f6:	    lea 12(sp),sp
    50fa:	    rts

000050fc <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    50fc:	movea.l 18132 <nowStatus>,a0
    5102:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5108:	movea.l 18132 <nowStatus>,a0
    510e:	move.l 8(sp),14(a0)
}
    5114:	nop
    5116:	rts

00005118 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5118:	       lea -100(sp),sp
    511c:	       move.l a6,-(sp)
    511e:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5120:	       movea.l 18132 <nowStatus>,a0
    5126:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    512a:	       movea.l 18132 <nowStatus>,a0
    5130:	       move.w 4(a0),d0
    5134:	       move.w d0,d0
    5136:	       andi.l #65535,d0
    513c:	       move.l 112(sp),-(sp)
    5140:	       move.l d0,-(sp)
    5142:	       jsr 8d0 <put2bytes>
    5148:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    514a:	       movea.l 18132 <nowStatus>,a0
    5150:	       move.l 6(a0),d0
    5154:	       move.l d0,d0
    5156:	       movea.w d0,a0
    5158:	       move.l 112(sp),-(sp)
    515c:	       move.l a0,-(sp)
    515e:	       jsr a9c <putSigned>
    5164:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    5166:	       movea.l 18132 <nowStatus>,a0
    516c:	       move.l 10(a0),d0
    5170:	       move.l 112(sp),-(sp)
    5174:	       move.l d0,-(sp)
    5176:	       jsr 8d0 <put2bytes>
    517c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    517e:	       movea.l 18132 <nowStatus>,a0
    5184:	       move.l 14(a0),d0
    5188:	       move.l 112(sp),-(sp)
    518c:	       move.l d0,-(sp)
    518e:	       jsr 8d0 <put2bytes>
    5194:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    5196:	       move.l 112(sp),100(sp)
    519c:	       movea.l 18132 <nowStatus>,a0
    51a2:	       move.l 18(a0),96(sp)
    51a8:	       move.l 19c58 <DOSBase>,d0
    51ae:	       movea.l d0,a6
    51b0:	       move.l 100(sp),d1
    51b4:	       move.l 96(sp),d2
    51b8:	       jsr -312(a6)
    51bc:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    51c0:	       move.l 112(sp),88(sp)
    51c6:	       movea.l 18132 <nowStatus>,a0
    51cc:	       move.l 22(a0),84(sp)
    51d2:	       move.l 19c58 <DOSBase>,d0
    51d8:	       movea.l d0,a6
    51da:	       move.l 88(sp),d1
    51de:	       move.l 84(sp),d2
    51e2:	       jsr -312(a6)
    51e6:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    51ea:	       move.l 112(sp),76(sp)
    51f0:	       movea.l 18132 <nowStatus>,a0
    51f6:	       move.l 26(a0),72(sp)
    51fc:	       move.l 19c58 <DOSBase>,d0
    5202:	       movea.l d0,a6
    5204:	       move.l 76(sp),d1
    5208:	       move.l 72(sp),d2
    520c:	       jsr -312(a6)
    5210:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    5214:	       move.l 112(sp),64(sp)
    521a:	       movea.l 18132 <nowStatus>,a0
    5220:	       move.l 30(a0),60(sp)
    5226:	       move.l 19c58 <DOSBase>,d0
    522c:	       movea.l d0,a6
    522e:	       move.l 64(sp),d1
    5232:	       move.l 60(sp),d2
    5236:	       jsr -312(a6)
    523a:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    523e:	       move.l 112(sp),52(sp)
    5244:	       movea.l 18132 <nowStatus>,a0
    524a:	       move.l 34(a0),48(sp)
    5250:	       move.l 19c58 <DOSBase>,d0
    5256:	       movea.l d0,a6
    5258:	       move.l 52(sp),d1
    525c:	       move.l 48(sp),d2
    5260:	       jsr -312(a6)
    5264:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5268:	       move.l 112(sp),40(sp)
    526e:	       movea.l 18132 <nowStatus>,a0
    5274:	       move.l 38(a0),36(sp)
    527a:	       move.l 19c58 <DOSBase>,d0
    5280:	       movea.l d0,a6
    5282:	       move.l 40(sp),d1
    5286:	       move.l 36(sp),d2
    528a:	       jsr -312(a6)
    528e:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    5292:	   /-- bra.s 52d6 <saveStatusBars+0x1be>
		FPutC (fp,1);
    5294:	/--|-> move.l 112(sp),16(sp)
    529a:	|  |   moveq #1,d0
    529c:	|  |   move.l d0,12(sp)
    52a0:	|  |   move.l 19c58 <DOSBase>,d0
    52a6:	|  |   movea.l d0,a6
    52a8:	|  |   move.l 16(sp),d1
    52ac:	|  |   move.l 12(sp),d2
    52b0:	|  |   jsr -312(a6)
    52b4:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    52b8:	|  |   movea.l 104(sp),a0
    52bc:	|  |   move.l (a0),d0
    52be:	|  |   move.l 112(sp),-(sp)
    52c2:	|  |   move.l d0,-(sp)
    52c4:	|  |   jsr bd8 <writeString>
    52ca:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    52cc:	|  |   movea.l 104(sp),a0
    52d0:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    52d6:	|  \-> tst.l 104(sp)
    52da:	\----- bne.s 5294 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    52dc:	       move.l 112(sp),28(sp)
    52e2:	       clr.l 24(sp)
    52e6:	       move.l 19c58 <DOSBase>,d0
    52ec:	       movea.l d0,a6
    52ee:	       move.l 28(sp),d1
    52f2:	       move.l 24(sp),d2
    52f6:	       jsr -312(a6)
    52fa:	       move.l d0,20(sp)
}
    52fe:	       nop
    5300:	       move.l (sp)+,d2
    5302:	       movea.l (sp)+,a6
    5304:	       lea 100(sp),sp
    5308:	       rts

0000530a <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    530a:	movea.l 18132 <nowStatus>,a0
    5310:	move.l 4(sp),6(a0)
}
    5316:	nop
    5318:	rts

0000531a <setStatusBar>:

void setStatusBar (char * txt) {
    531a:	    subq.l #4,sp
    531c:	    move.l a6,-(sp)
    531e:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5320:	    movea.l 18132 <nowStatus>,a0
    5326:	    move.l (a0),d0
    5328:	/-- beq.s 535c <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    532a:	|   movea.l 18132 <nowStatus>,a0
    5330:	|   movea.l (a0),a0
    5332:	|   move.l (a0),8(sp)
    5336:	|   move.l 19c50 <SysBase>,d0
    533c:	|   movea.l d0,a6
    533e:	|   movea.l 8(sp),a1
    5342:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    5346:	|   movea.l 18132 <nowStatus>,a0
    534c:	|   movea.l (a0),a2
    534e:	|   move.l 16(sp),-(sp)
    5352:	|   jsr b8 <copyString>
    5358:	|   addq.l #4,sp
    535a:	|   move.l d0,(a2)
	}
}
    535c:	\-> nop
    535e:	    movea.l (sp)+,a2
    5360:	    movea.l (sp)+,a6
    5362:	    addq.l #4,sp
    5364:	    rts

00005366 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    5366:	       movea.l 18132 <nowStatus>,a0
    536c:	       move.l (a0),d0
    536e:	/----- beq.s 537c <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    5370:	|      movea.l 18132 <nowStatus>,a0
    5376:	|      movea.l (a0),a0
    5378:	|      move.l (a0),d0
    537a:	|  /-- bra.s 5382 <statusBarText+0x1c>
	} else {
		return "";
    537c:	\--|-> move.l #82340,d0
	}
    5382:	   \-> rts

00005384 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    5384:	       lea -28(sp),sp
    5388:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    538c:	       move.l 52(sp),-(sp)
    5390:	       jsr 11860 <stringWidth>
    5396:	       addq.l #4,sp
    5398:	       asr.l #1,d0
    539a:	       move.l d0,-(sp)
    539c:	       jsr 1332e <__floatsisf>
    53a2:	       addq.l #4,sp
    53a4:	       move.l d0,d1
    53a6:	       move.l 1814a <cameraZoom>,d0
    53ac:	       move.l d0,-(sp)
    53ae:	       move.l d1,-(sp)
    53b0:	       jsr 131da <__divsf3>
    53b6:	       addq.l #8,sp
    53b8:	       move.l d0,-(sp)
    53ba:	       jsr 132c6 <__fixsfsi>
    53c0:	       addq.l #4,sp
    53c2:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    53c6:	       move.l 56(sp),d0
    53ca:	       sub.l 44(sp),d0
    53ce:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    53d2:	       move.l 56(sp),d0
    53d6:	       add.l 44(sp),d0
    53da:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    53de:	       moveq #12,d0
    53e0:	       move.l d0,32(sp)
    53e4:	       clr.l 28(sp)
    53e8:	       move.l 19c50 <SysBase>,d0
    53ee:	       movea.l d0,a6
    53f0:	       move.l 32(sp),d0
    53f4:	       move.l 28(sp),d1
    53f8:	       jsr -684(a6)
    53fc:	       move.l d0,24(sp)
    5400:	       move.l 24(sp),d0
    5404:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5408:	       movea.l 19cac <speech>,a0
    540e:	       move.l 4(a0),d0
    5412:	       movea.l 20(sp),a0
    5416:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    541a:	       move.l 52(sp),-(sp)
    541e:	       jsr b8 <copyString>
    5424:	       addq.l #4,sp
    5426:	       movea.l 20(sp),a0
    542a:	       move.l d0,(a0)
	newLine -> x = xx1;
    542c:	       movea.l 20(sp),a0
    5430:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    5436:	       movea.l 19cac <speech>,a0
    543c:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    5442:	       moveq #4,d0
    5444:	       cmp.l 40(sp),d0
    5448:	   /-- blt.s 546a <addSpeechLine+0xe6>
    544a:	   |   movea.l 60(sp),a0
    544e:	   |   move.l (a0),d1
    5450:	   |   moveq #5,d0
    5452:	   |   sub.l 40(sp),d0
    5456:	   |   cmp.l d1,d0
    5458:	   +-- ble.s 546a <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    545a:	   |   moveq #5,d0
    545c:	   |   sub.l 40(sp),d0
    5460:	   |   movea.l 60(sp),a0
    5464:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    5466:	/--|-- bra.w 5596 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    546a:	|  \-> move.l 36(sp),-(sp)
    546e:	|      jsr 1332e <__floatsisf>
    5474:	|      addq.l #4,sp
    5476:	|      move.l d0,d2
    5478:	|      move.l 19b50 <winWidth>,d0
    547e:	|      move.l d0,-(sp)
    5480:	|      jsr 13356 <__floatunsisf>
    5486:	|      addq.l #4,sp
    5488:	|      move.l d0,d1
    548a:	|      move.l 1814a <cameraZoom>,d0
    5490:	|      move.l d0,-(sp)
    5492:	|      move.l d1,-(sp)
    5494:	|      jsr 131da <__divsf3>
    549a:	|      addq.l #8,sp
    549c:	|      move.l #1084227584,-(sp)
    54a2:	|      move.l d0,-(sp)
    54a4:	|      jsr 13622 <__subsf3>
    54aa:	|      addq.l #8,sp
    54ac:	|      move.l d0,-(sp)
    54ae:	|      move.l d2,-(sp)
    54b0:	|      jsr 13416 <__gesf2>
    54b6:	|      addq.l #8,sp
    54b8:	|      tst.l d0
    54ba:	|  /-- bge.s 54c0 <addSpeechLine+0x13c>
}
    54bc:	+--|-- bra.w 5596 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    54c0:	|  \-> movea.l 60(sp),a0
    54c4:	|      move.l (a0),d0
    54c6:	|      move.l d0,-(sp)
    54c8:	|      jsr 1332e <__floatsisf>
    54ce:	|      addq.l #4,sp
    54d0:	|      move.l d0,-(sp)
    54d2:	|      jsr 13246 <__extendsfdf2>
    54d8:	|      addq.l #4,sp
    54da:	|      move.l d0,d4
    54dc:	|      move.l d1,d5
    54de:	|      move.l 19b50 <winWidth>,d0
    54e4:	|      move.l d0,-(sp)
    54e6:	|      jsr 13356 <__floatunsisf>
    54ec:	|      addq.l #4,sp
    54ee:	|      move.l d0,d1
    54f0:	|      move.l 1814a <cameraZoom>,d0
    54f6:	|      move.l d0,-(sp)
    54f8:	|      move.l d1,-(sp)
    54fa:	|      jsr 131da <__divsf3>
    5500:	|      addq.l #8,sp
    5502:	|      move.l d0,-(sp)
    5504:	|      jsr 13246 <__extendsfdf2>
    550a:	|      addq.l #4,sp
    550c:	|      clr.l -(sp)
    550e:	|      move.l #1075052544,-(sp)
    5514:	|      move.l d1,-(sp)
    5516:	|      move.l d0,-(sp)
    5518:	|      jsr 135c0 <__subdf3>
    551e:	|      lea 16(sp),sp
    5522:	|      move.l d0,d2
    5524:	|      move.l d1,d3
    5526:	|      move.l 36(sp),-(sp)
    552a:	|      jsr 132ee <__floatsidf>
    5530:	|      addq.l #4,sp
    5532:	|      move.l d1,-(sp)
    5534:	|      move.l d0,-(sp)
    5536:	|      move.l d3,-(sp)
    5538:	|      move.l d2,-(sp)
    553a:	|      jsr 135c0 <__subdf3>
    5540:	|      lea 16(sp),sp
    5544:	|      move.l d1,-(sp)
    5546:	|      move.l d0,-(sp)
    5548:	|      move.l d5,-(sp)
    554a:	|      move.l d4,-(sp)
    554c:	|      jsr 1344c <__gtdf2>
    5552:	|      lea 16(sp),sp
    5556:	|      tst.l d0
    5558:	|  /-- bgt.s 555c <addSpeechLine+0x1d8>
}
    555a:	+--|-- bra.s 5596 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    555c:	|  \-> move.l 19b50 <winWidth>,d0
    5562:	|      move.l d0,-(sp)
    5564:	|      jsr 13356 <__floatunsisf>
    556a:	|      addq.l #4,sp
    556c:	|      move.l d0,d1
    556e:	|      move.l 1814a <cameraZoom>,d0
    5574:	|      move.l d0,-(sp)
    5576:	|      move.l d1,-(sp)
    5578:	|      jsr 131da <__divsf3>
    557e:	|      addq.l #8,sp
    5580:	|      move.l d0,-(sp)
    5582:	|      jsr 132c6 <__fixsfsi>
    5588:	|      addq.l #4,sp
    558a:	|      subq.l #5,d0
    558c:	|      sub.l 36(sp),d0
    5590:	|      movea.l 60(sp),a0
    5594:	|      move.l d0,(a0)
}
    5596:	\----> nop
    5598:	       movem.l (sp)+,d2-d5/a6
    559c:	       lea 28(sp),sp
    55a0:	       rts

000055a2 <initSpeech>:


void initSpeech () {
    55a2:	       lea -12(sp),sp
    55a6:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    55a8:	       moveq #20,d0
    55aa:	       move.l d0,12(sp)
    55ae:	       clr.l 8(sp)
    55b2:	       move.l 19c50 <SysBase>,d0
    55b8:	       movea.l d0,a6
    55ba:	       move.l 12(sp),d0
    55be:	       move.l 8(sp),d1
    55c2:	       jsr -684(a6)
    55c6:	       move.l d0,4(sp)
    55ca:	       move.l 4(sp),d0
    55ce:	       move.l d0,19cac <speech>
	if (speech) {
    55d4:	       move.l 19cac <speech>,d0
    55da:	/----- beq.s 5606 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    55dc:	|      movea.l 19cac <speech>,a0
    55e2:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    55e4:	|      movea.l 19cac <speech>,a0
    55ea:	|      clr.l 4(a0)
		speech -> speechY = 0;
    55ee:	|      movea.l 19cac <speech>,a0
    55f4:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    55f8:	|      movea.l 19cac <speech>,a0
    55fe:	|      moveq #-1,d0
    5600:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    5604:	|  /-- bra.s 5614 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    5606:	\--|-> pea 15fcc <line.c.05397aaf+0x66>
    560c:	   |   jsr 12ed6 <KPrintF>
    5612:	   |   addq.l #4,sp
}
    5614:	   \-> nop
    5616:	       movea.l (sp)+,a6
    5618:	       lea 12(sp),sp
    561c:	       rts

0000561e <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    561e:	       movea.l 19cac <speech>,a0
    5624:	       move.l 4(a0),d0
    5628:	/----- beq.s 5636 <isThereAnySpeechGoingOn+0x18>
    562a:	|      movea.l 19cac <speech>,a0
    5630:	|      move.l 16(a0),d0
    5634:	|  /-- bra.s 5638 <isThereAnySpeechGoingOn+0x1a>
    5636:	\--|-> moveq #-1,d0
}
    5638:	   \-> rts

0000563a <killAllSpeech>:

void killAllSpeech () {
    563a:	       lea -12(sp),sp
    563e:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5640:	       movea.l 19cac <speech>,a0
    5646:	       move.l 12(a0),d0
    564a:	       moveq #-1,d1
    564c:	       cmp.l d0,d1
    564e:	   /-- beq.s 565c <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5650:	   |   movea.l 19cac <speech>,a0
    5656:	   |   moveq #-1,d0
    5658:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    565c:	   \-> movea.l 19cac <speech>,a0
    5662:	       move.l (a0),d0
    5664:	/----- beq.w 56f0 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5668:	|      movea.l 19cac <speech>,a0
    566e:	|      move.l (a0),d0
    5670:	|      lea -120(sp),sp
    5674:	|      move.l sp,d1
    5676:	|      movea.l d0,a0
    5678:	|      moveq #120,d0
    567a:	|      move.l d0,-(sp)
    567c:	|      move.l a0,-(sp)
    567e:	|      move.l d1,-(sp)
    5680:	|      jsr 12e8a <memcpy>
    5686:	|      lea 12(sp),sp
    568a:	|      jsr 7130 <makeSilent>
    5690:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5694:	|      movea.l 19cac <speech>,a0
    569a:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    569c:	+----- bra.s 56f0 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    569e:	|  /-> movea.l 19cac <speech>,a0
    56a4:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    56aa:	|  |   movea.l 19cac <speech>,a0
    56b0:	|  |   movea.l 4(a0),a1
    56b4:	|  |   movea.l 19cac <speech>,a0
    56ba:	|  |   move.l 4(a1),d0
    56be:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    56c2:	|  |   movea.l 12(sp),a0
    56c6:	|  |   move.l (a0),8(sp)
    56ca:	|  |   move.l 19c50 <SysBase>,d0
    56d0:	|  |   movea.l d0,a6
    56d2:	|  |   movea.l 8(sp),a1
    56d6:	|  |   jsr -690(a6)
		FreeVec(killMe);
    56da:	|  |   move.l 12(sp),4(sp)
    56e0:	|  |   move.l 19c50 <SysBase>,d0
    56e6:	|  |   movea.l d0,a6
    56e8:	|  |   movea.l 4(sp),a1
    56ec:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    56f0:	\--|-> movea.l 19cac <speech>,a0
    56f6:	   |   move.l 4(a0),d0
    56fa:	   \-- bne.s 569e <killAllSpeech+0x64>
	}
}
    56fc:	       nop
    56fe:	       nop
    5700:	       movea.l (sp)+,a6
    5702:	       lea 12(sp),sp
    5706:	       rts

00005708 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5708:	pea 2 <_start+0x2>
    570c:	move.l 8(sp),-(sp)
    5710:	jsr 5868 <setFrames>
    5716:	addq.l #8,sp
}
    5718:	nop
    571a:	rts

0000571c <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    571c:	       lea -52(sp),sp
    5720:	       move.l a6,-(sp)
    5722:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5724:	       movea.l 64(sp),a0
    5728:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    572e:	       move.l 18136 <speechSpeed>,d0
    5734:	       move.l 68(sp),-(sp)
    5738:	       move.l d0,-(sp)
    573a:	       jsr a46 <putFloat>
    5740:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5742:	       movea.l 64(sp),a0
    5746:	       move.l 8(a0),d0
    574a:	       move.l 68(sp),-(sp)
    574e:	       move.l d0,-(sp)
    5750:	       jsr 8d0 <put2bytes>
    5756:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5758:	       movea.l 64(sp),a0
    575c:	       move.l 16(a0),d0
    5760:	       move.l 68(sp),-(sp)
    5764:	       move.l d0,-(sp)
    5766:	       jsr 8d0 <put2bytes>
    576c:	       addq.l #8,sp
		if (sS -> currentTalker) {
    576e:	       movea.l 64(sp),a0
    5772:	       move.l (a0),d0
    5774:	   /-- beq.s 57b8 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5776:	   |   move.l 68(sp),40(sp)
    577c:	   |   moveq #1,d0
    577e:	   |   move.l d0,36(sp)
    5782:	   |   move.l 19c58 <DOSBase>,d0
    5788:	   |   movea.l d0,a6
    578a:	   |   move.l 40(sp),d1
    578e:	   |   move.l 36(sp),d2
    5792:	   |   jsr -312(a6)
    5796:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    579a:	   |   movea.l 64(sp),a0
    579e:	   |   movea.l (a0),a0
    57a0:	   |   movea.l 102(a0),a0
    57a4:	   |   move.l 4(a0),d0
    57a8:	   |   move.l 68(sp),-(sp)
    57ac:	   |   move.l d0,-(sp)
    57ae:	   |   jsr 8d0 <put2bytes>
    57b4:	   |   addq.l #8,sp
    57b6:	/--|-- bra.s 5834 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    57b8:	|  \-> move.l 68(sp),52(sp)
    57be:	|      clr.l 48(sp)
    57c2:	|      move.l 19c58 <DOSBase>,d0
    57c8:	|      movea.l d0,a6
    57ca:	|      move.l 52(sp),d1
    57ce:	|      move.l 48(sp),d2
    57d2:	|      jsr -312(a6)
    57d6:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    57da:	+----- bra.s 5834 <saveSpeech+0x118>
			FPutC (fp, 1);
    57dc:	|  /-> move.l 68(sp),16(sp)
    57e2:	|  |   moveq #1,d0
    57e4:	|  |   move.l d0,12(sp)
    57e8:	|  |   move.l 19c58 <DOSBase>,d0
    57ee:	|  |   movea.l d0,a6
    57f0:	|  |   move.l 16(sp),d1
    57f4:	|  |   move.l 12(sp),d2
    57f8:	|  |   jsr -312(a6)
    57fc:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5800:	|  |   movea.l 56(sp),a0
    5804:	|  |   move.l (a0),d0
    5806:	|  |   move.l 68(sp),-(sp)
    580a:	|  |   move.l d0,-(sp)
    580c:	|  |   jsr bd8 <writeString>
    5812:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    5814:	|  |   movea.l 56(sp),a0
    5818:	|  |   move.l 8(a0),d0
    581c:	|  |   move.l 68(sp),-(sp)
    5820:	|  |   move.l d0,-(sp)
    5822:	|  |   jsr 8d0 <put2bytes>
    5828:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    582a:	|  |   movea.l 56(sp),a0
    582e:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5834:	\--|-> tst.l 56(sp)
    5838:	   \-- bne.s 57dc <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    583a:	       move.l 68(sp),28(sp)
    5840:	       clr.l 24(sp)
    5844:	       move.l 19c58 <DOSBase>,d0
    584a:	       movea.l d0,a6
    584c:	       move.l 28(sp),d1
    5850:	       move.l 24(sp),d2
    5854:	       jsr -312(a6)
    5858:	       move.l d0,20(sp)
}
    585c:	       nop
    585e:	       move.l (sp)+,d2
    5860:	       movea.l (sp)+,a6
    5862:	       lea 52(sp),sp
    5866:	       rts

00005868 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5868:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    586a:	movea.l 8(sp),a0
    586e:	movea.l 68(a0),a0
    5872:	move.l (a0),d2
    5874:	movea.l 8(sp),a0
    5878:	movea.l 68(a0),a0
    587c:	move.l 4(a0),d0
    5880:	move.l 12(sp),-(sp)
    5884:	move.l d0,-(sp)
    5886:	jsr 13888 <__mulsi3>
    588c:	addq.l #8,sp
    588e:	move.l d0,d1
    5890:	movea.l 8(sp),a0
    5894:	move.l 94(a0),d0
    5898:	add.l d1,d0
    589a:	add.l d0,d0
    589c:	add.l d0,d0
    589e:	movea.l d2,a0
    58a0:	adda.l d0,a0
    58a2:	move.l (a0),d0
    58a4:	movea.l 8(sp),a0
    58a8:	move.l d0,60(a0)
}
    58ac:	nop
    58ae:	move.l (sp)+,d2
    58b0:	rts

000058b2 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    58b2:	       lea -20(sp),sp
    58b6:	       move.l d2,-(sp)
    58b8:	       move.l 40(sp),d0
    58bc:	       move.w d0,d0
    58be:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    58c2:	       movea.l 19cac <speech>,a0
    58c8:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    58ce:	       move.l 32(sp),-(sp)
    58d2:	       jsr 6c1a <findPerson>
    58d8:	       addq.l #4,sp
    58da:	       move.l d0,16(sp)
    if (thisPerson) {
    58de:	   /-- beq.s 5904 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    58e0:	   |   movea.w 6(sp),a0
    58e4:	   |   move.l a0,-(sp)
    58e6:	   |   move.l 40(sp),-(sp)
    58ea:	   |   move.l 24(sp),-(sp)
    58ee:	   |   move.l 40(sp),-(sp)
    58f2:	   |   jsr 59ca <wrapSpeechPerson>
    58f8:	   |   lea 16(sp),sp
    58fc:	   |   move.l d0,20(sp)
    5900:	/--|-- bra.w 59be <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5904:	|  \-> move.l 32(sp),-(sp)
    5908:	|      jsr 1194c <getRegionForObject>
    590e:	|      addq.l #4,sp
    5910:	|      move.l d0,12(sp)
        if (thisRegion) {
    5914:	|  /-- beq.s 5980 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5916:	|  |   movea.l 12(sp),a0
    591a:	|  |   movea.l 28(a0),a0
    591e:	|  |   move.l 28(a0),d0
    5922:	|  |   movea.l 12(sp),a0
    5926:	|  |   movea.l 4(a0),a1
    592a:	|  |   movea.l 12(sp),a0
    592e:	|  |   movea.l 28(a0),a0
    5932:	|  |   move.l 20(a0),d1
    5936:	|  |   movea.l a1,a0
    5938:	|  |   suba.l d1,a0
    593a:	|  |   move.l 19d0e <cameraY>,d1
    5940:	|  |   movea.l a0,a1
    5942:	|  |   suba.l d1,a1
    5944:	|  |   movea.l 12(sp),a0
    5948:	|  |   move.l (a0),d2
    594a:	|  |   movea.l 12(sp),a0
    594e:	|  |   move.l 8(a0),d1
    5952:	|  |   add.l d2,d1
    5954:	|  |   move.l d1,d2
    5956:	|  |   asr.l #1,d2
    5958:	|  |   move.l 19d0a <cameraX>,d1
    595e:	|  |   movea.l d2,a0
    5960:	|  |   suba.l d1,a0
    5962:	|  |   move.l 36(sp),-(sp)
    5966:	|  |   move.l d0,-(sp)
    5968:	|  |   move.l a1,-(sp)
    596a:	|  |   move.l a0,-(sp)
    596c:	|  |   move.l 44(sp),-(sp)
    5970:	|  |   jsr 5ae8 <wrapSpeechXY>
    5976:	|  |   lea 20(sp),sp
    597a:	|  |   move.l d0,20(sp)
    597e:	+--|-- bra.s 59be <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5980:	|  \-> move.l 32(sp),-(sp)
    5984:	|      jsr 9cd4 <findObjectType>
    598a:	|      addq.l #4,sp
    598c:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5990:	|      movea.l 8(sp),a0
    5994:	|      move.l 28(a0),d1
    5998:	|      move.l 19b50 <winWidth>,d0
    599e:	|      lsr.l #1,d0
    59a0:	|      move.l 36(sp),-(sp)
    59a4:	|      move.l d1,-(sp)
    59a6:	|      pea a <_start+0xa>
    59aa:	|      move.l d0,-(sp)
    59ac:	|      move.l 44(sp),-(sp)
    59b0:	|      jsr 5ae8 <wrapSpeechXY>
    59b6:	|      lea 20(sp),sp
    59ba:	|      move.l d0,20(sp)
        }
    }
    return i;
    59be:	\----> move.l 20(sp),d0
}
    59c2:	       move.l (sp)+,d2
    59c4:	       lea 20(sp),sp
    59c8:	       rts

000059ca <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    59ca:	    subq.l #8,sp
    59cc:	    movem.l d2-d4,-(sp)
    59d0:	    move.l 36(sp),d0
    59d4:	    move.w d0,d0
    59d6:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    59da:	    movea.l 28(sp),a0
    59de:	    movea.l 102(a0),a0
    59e2:	    move.l 28(a0),d2
    59e6:	    movea.l 28(sp),a0
    59ea:	    move.l 4(a0),d3
    59ee:	    move.l 19d0e <cameraY>,d0
    59f4:	    move.l d0,-(sp)
    59f6:	    jsr 1332e <__floatsisf>
    59fc:	    addq.l #4,sp
    59fe:	    move.l d0,-(sp)
    5a00:	    move.l d3,-(sp)
    5a02:	    jsr 13622 <__subsf3>
    5a08:	    addq.l #8,sp
    5a0a:	    move.l d0,d3
    5a0c:	    movea.l 28(sp),a0
    5a10:	    move.l 20(a0),d4
    5a14:	    movea.l 28(sp),a0
    5a18:	    move.l 8(a0),d1
    5a1c:	    movea.l 28(sp),a0
    5a20:	    move.l 12(a0),d0
    5a24:	    sub.l d0,d1
    5a26:	    move.l d1,-(sp)
    5a28:	    jsr 1332e <__floatsisf>
    5a2e:	    addq.l #4,sp
    5a30:	    move.l d0,-(sp)
    5a32:	    move.l d4,-(sp)
    5a34:	    jsr 133e0 <__mulsf3>
    5a3a:	    addq.l #8,sp
    5a3c:	    move.l d0,-(sp)
    5a3e:	    move.l d3,-(sp)
    5a40:	    jsr 13622 <__subsf3>
    5a46:	    addq.l #8,sp
    5a48:	    move.l d0,d3
    5a4a:	    movea.l 28(sp),a0
    5a4e:	    movea.l 102(a0),a0
    5a52:	    move.l 20(a0),d0
    5a56:	    move.l d0,-(sp)
    5a58:	    jsr 1332e <__floatsisf>
    5a5e:	    addq.l #4,sp
    5a60:	    move.l d0,-(sp)
    5a62:	    move.l d3,-(sp)
    5a64:	    jsr 13622 <__subsf3>
    5a6a:	    addq.l #8,sp
    5a6c:	    move.l d0,-(sp)
    5a6e:	    jsr 132c6 <__fixsfsi>
    5a74:	    addq.l #4,sp
    5a76:	    move.l d0,d4
    5a78:	    movea.l 28(sp),a0
    5a7c:	    move.l (a0),d3
    5a7e:	    move.l 19d0a <cameraX>,d0
    5a84:	    move.l d0,-(sp)
    5a86:	    jsr 1332e <__floatsisf>
    5a8c:	    addq.l #4,sp
    5a8e:	    move.l d0,-(sp)
    5a90:	    move.l d3,-(sp)
    5a92:	    jsr 13622 <__subsf3>
    5a98:	    addq.l #8,sp
    5a9a:	    move.l d0,-(sp)
    5a9c:	    jsr 132c6 <__fixsfsi>
    5aa2:	    addq.l #4,sp
    5aa4:	    move.l 32(sp),-(sp)
    5aa8:	    move.l d2,-(sp)
    5aaa:	    move.l d4,-(sp)
    5aac:	    move.l d0,-(sp)
    5aae:	    move.l 40(sp),-(sp)
    5ab2:	    jsr 5ae8 <wrapSpeechXY>
    5ab8:	    lea 20(sp),sp
    5abc:	    move.l d0,16(sp)
	if (animPerson) {
    5ac0:	    tst.w 14(sp)
    5ac4:	/-- beq.s 5adc <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5ac6:	|   move.l 28(sp),-(sp)
    5aca:	|   jsr 5708 <makeTalker>
    5ad0:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5ad2:	|   movea.l 19cac <speech>,a0
    5ad8:	|   move.l 28(sp),(a0)
	}
	return i;
    5adc:	\-> move.l 16(sp),d0
}
    5ae0:	    movem.l (sp)+,d2-d4
    5ae4:	    addq.l #8,sp
    5ae6:	    rts

00005ae8 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5ae8:	                   lea -16(sp),sp
    5aec:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5af0:	                   clr.l 16(sp)
    killAllSpeech();
    5af4:	                   jsr 563a <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5afa:	                   move.l 36(sp),-(sp)
    5afe:	                   jsr 1036e <strlen>
    5b04:	                   addq.l #4,sp
    5b06:	                   movea.l d0,a0
    5b08:	                   lea 20(a0),a0
    5b0c:	                   move.l a0,-(sp)
    5b0e:	                   jsr 13356 <__floatunsisf>
    5b14:	                   addq.l #4,sp
    5b16:	                   move.l d0,d1
    5b18:	                   move.l 18136 <speechSpeed>,d0
    5b1e:	                   move.l d0,-(sp)
    5b20:	                   move.l d1,-(sp)
    5b22:	                   jsr 133e0 <__mulsf3>
    5b28:	                   addq.l #8,sp
    5b2a:	                   move.l d0,-(sp)
    5b2c:	                   jsr 132c6 <__fixsfsi>
    5b32:	                   addq.l #4,sp
    5b34:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5b38:	               /-- bgt.s 5b40 <wrapSpeechXY+0x58>
    5b3a:	               |   moveq #1,d0
    5b3c:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5b40:	               \-> moveq #-1,d1
    5b42:	                   cmp.l 52(sp),d1
    5b46:	               /-- beq.s 5b86 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5b48:	               |   move.l 19d1e <speechMode>,d0
    5b4e:	               +-- ble.s 5b86 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5b50:	               |   clr.l -(sp)
    5b52:	               |   move.l 56(sp),-(sp)
    5b56:	               |   jsr 954c <startSound>
    5b5c:	               |   addq.l #8,sp
    5b5e:	               |   tst.w d0
    5b60:	               +-- beq.s 5b86 <wrapSpeechXY+0x9e>
                speechTime = -10;
    5b62:	               |   moveq #-10,d0
    5b64:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5b68:	               |   movea.l 19cac <speech>,a0
    5b6e:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5b74:	               |   move.l 19d1e <speechMode>,d0
    5b7a:	               |   moveq #2,d1
    5b7c:	               |   cmp.l d0,d1
    5b7e:	               +-- bne.s 5b86 <wrapSpeechXY+0x9e>
    5b80:	               |   moveq #-10,d0
    5b82:	/--------------|-- bra.w 5e0c <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5b86:	|              \-> movea.l 19cac <speech>,a0
    5b8c:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5b92:	|     /----------- bra.w 5c46 <wrapSpeechXY+0x15e>
        a = wrap;
    5b96:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5b9c:	|  |  |        /-- bra.s 5bac <wrapSpeechXY+0xc4>
            a--;
    5b9e:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5ba2:	|  |  |  |     +-- bne.s 5bac <wrapSpeechXY+0xc4>
                a = wrap;
    5ba4:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5baa:	|  |  |  |  /--|-- bra.s 5bbe <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5bac:	|  |  |  |  |  \-> move.l 28(sp),d0
    5bb0:	|  |  |  |  |      movea.l 36(sp),a0
    5bb4:	|  |  |  |  |      adda.l d0,a0
    5bb6:	|  |  |  |  |      move.b (a0),d0
    5bb8:	|  |  |  |  |      cmpi.b #32,d0
    5bbc:	|  |  |  \--|----- bne.s 5b9e <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5bbe:	|  |  |     \----> move.l 28(sp),d0
    5bc2:	|  |  |            movea.l 36(sp),a0
    5bc6:	|  |  |            adda.l d0,a0
    5bc8:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5bca:	|  |  |            lea 16(sp),a0
    5bce:	|  |  |            move.l a0,-(sp)
    5bd0:	|  |  |            move.l 44(sp),-(sp)
    5bd4:	|  |  |            move.l 44(sp),-(sp)
    5bd8:	|  |  |            jsr 5384 <addSpeechLine>
    5bde:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5be2:	|  |  |            move.l 28(sp),d0
    5be6:	|  |  |            movea.l 36(sp),a0
    5bea:	|  |  |            adda.l d0,a0
    5bec:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5bf0:	|  |  |            move.l 28(sp),d0
    5bf4:	|  |  |            addq.l #1,d0
    5bf6:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5bfa:	|  |  |            move.l 44(sp),-(sp)
    5bfe:	|  |  |            jsr 1332e <__floatsisf>
    5c04:	|  |  |            addq.l #4,sp
    5c06:	|  |  |            move.l d0,d2
    5c08:	|  |  |            move.l 19d44 <fontHeight>,d0
    5c0e:	|  |  |            move.l d0,-(sp)
    5c10:	|  |  |            jsr 1332e <__floatsisf>
    5c16:	|  |  |            addq.l #4,sp
    5c18:	|  |  |            move.l d0,d1
    5c1a:	|  |  |            move.l 1814a <cameraZoom>,d0
    5c20:	|  |  |            move.l d0,-(sp)
    5c22:	|  |  |            move.l d1,-(sp)
    5c24:	|  |  |            jsr 131da <__divsf3>
    5c2a:	|  |  |            addq.l #8,sp
    5c2c:	|  |  |            move.l d0,-(sp)
    5c2e:	|  |  |            move.l d2,-(sp)
    5c30:	|  |  |            jsr 13622 <__subsf3>
    5c36:	|  |  |            addq.l #8,sp
    5c38:	|  |  |            move.l d0,-(sp)
    5c3a:	|  |  |            jsr 132c6 <__fixsfsi>
    5c40:	|  |  |            addq.l #4,sp
    5c42:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5c46:	|  |  \----------> move.l 36(sp),-(sp)
    5c4a:	|  |               jsr 1036e <strlen>
    5c50:	|  |               addq.l #4,sp
    5c52:	|  |               move.l d0,d1
    5c54:	|  |               move.l 48(sp),d0
    5c58:	|  |               cmp.l d1,d0
    5c5a:	|  \-------------- bcs.w 5b96 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5c5e:	|                  lea 16(sp),a0
    5c62:	|                  move.l a0,-(sp)
    5c64:	|                  move.l 44(sp),-(sp)
    5c68:	|                  move.l 44(sp),-(sp)
    5c6c:	|                  jsr 5384 <addSpeechLine>
    5c72:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5c76:	|                  move.l 44(sp),-(sp)
    5c7a:	|                  jsr 1332e <__floatsisf>
    5c80:	|                  addq.l #4,sp
    5c82:	|                  move.l d0,d2
    5c84:	|                  move.l 19d44 <fontHeight>,d0
    5c8a:	|                  move.l d0,-(sp)
    5c8c:	|                  jsr 1332e <__floatsisf>
    5c92:	|                  addq.l #4,sp
    5c94:	|                  move.l d0,d1
    5c96:	|                  move.l 1814a <cameraZoom>,d0
    5c9c:	|                  move.l d0,-(sp)
    5c9e:	|                  move.l d1,-(sp)
    5ca0:	|                  jsr 131da <__divsf3>
    5ca6:	|                  addq.l #8,sp
    5ca8:	|                  move.l d0,-(sp)
    5caa:	|                  move.l d2,-(sp)
    5cac:	|                  jsr 13622 <__subsf3>
    5cb2:	|                  addq.l #8,sp
    5cb4:	|                  move.l d0,-(sp)
    5cb6:	|                  jsr 132c6 <__fixsfsi>
    5cbc:	|                  addq.l #4,sp
    5cbe:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5cc2:	|              /-- bpl.s 5ce0 <wrapSpeechXY+0x1f8>
    5cc4:	|              |   movea.l 19cac <speech>,a0
    5cca:	|              |   move.l 8(a0),d0
    5cce:	|              |   movea.l 19cac <speech>,a0
    5cd4:	|              |   sub.l 44(sp),d0
    5cd8:	|              |   move.l d0,8(a0)
    5cdc:	|           /--|-- bra.w 5dce <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5ce0:	|           |  \-> movea.l 19cac <speech>,a0
    5ce6:	|           |      move.l 8(a0),d0
    5cea:	|           |      move.l d0,-(sp)
    5cec:	|           |      jsr 1332e <__floatsisf>
    5cf2:	|           |      addq.l #4,sp
    5cf4:	|           |      move.l d0,d2
    5cf6:	|           |      move.l 19d0e <cameraY>,d0
    5cfc:	|           |      move.l d0,-(sp)
    5cfe:	|           |      jsr 1332e <__floatsisf>
    5d04:	|           |      addq.l #4,sp
    5d06:	|           |      move.l d0,d3
    5d08:	|           |      move.l 19b54 <winHeight>,d4
    5d0e:	|           |      move.l 19d44 <fontHeight>,d0
    5d14:	|           |      pea 3 <_start+0x3>
    5d18:	|           |      move.l d0,-(sp)
    5d1a:	|           |      jsr 13906 <__divsi3>
    5d20:	|           |      addq.l #8,sp
    5d22:	|           |      move.l d4,d1
    5d24:	|           |      sub.l d0,d1
    5d26:	|           |      move.l d1,-(sp)
    5d28:	|           |      jsr 13356 <__floatunsisf>
    5d2e:	|           |      addq.l #4,sp
    5d30:	|           |      move.l d0,d1
    5d32:	|           |      move.l 1814a <cameraZoom>,d0
    5d38:	|           |      move.l d0,-(sp)
    5d3a:	|           |      move.l d1,-(sp)
    5d3c:	|           |      jsr 131da <__divsf3>
    5d42:	|           |      addq.l #8,sp
    5d44:	|           |      move.l d0,-(sp)
    5d46:	|           |      move.l d3,-(sp)
    5d48:	|           |      jsr 130e0 <__addsf3>
    5d4e:	|           |      addq.l #8,sp
    5d50:	|           |      move.l d0,-(sp)
    5d52:	|           |      move.l d2,-(sp)
    5d54:	|           |      jsr 1349a <__gtsf2>
    5d5a:	|           |      addq.l #8,sp
    5d5c:	|           |      tst.l d0
    5d5e:	|           +----- ble.s 5dce <wrapSpeechXY+0x2e6>
    5d60:	|           |      move.l 19d0e <cameraY>,d0
    5d66:	|           |      move.l d0,-(sp)
    5d68:	|           |      jsr 1332e <__floatsisf>
    5d6e:	|           |      addq.l #4,sp
    5d70:	|           |      move.l d0,d2
    5d72:	|           |      move.l 19b54 <winHeight>,d3
    5d78:	|           |      move.l 19d44 <fontHeight>,d0
    5d7e:	|           |      pea 3 <_start+0x3>
    5d82:	|           |      move.l d0,-(sp)
    5d84:	|           |      jsr 13906 <__divsi3>
    5d8a:	|           |      addq.l #8,sp
    5d8c:	|           |      move.l d3,d1
    5d8e:	|           |      sub.l d0,d1
    5d90:	|           |      move.l d1,-(sp)
    5d92:	|           |      jsr 13356 <__floatunsisf>
    5d98:	|           |      addq.l #4,sp
    5d9a:	|           |      move.l d0,d1
    5d9c:	|           |      move.l 1814a <cameraZoom>,d0
    5da2:	|           |      move.l d0,-(sp)
    5da4:	|           |      move.l d1,-(sp)
    5da6:	|           |      jsr 131da <__divsf3>
    5dac:	|           |      addq.l #8,sp
    5dae:	|           |      move.l d0,-(sp)
    5db0:	|           |      move.l d2,-(sp)
    5db2:	|           |      jsr 130e0 <__addsf3>
    5db8:	|           |      addq.l #8,sp
    5dba:	|           |      movea.l 19cac <speech>,a2
    5dc0:	|           |      move.l d0,-(sp)
    5dc2:	|           |      jsr 132c6 <__fixsfsi>
    5dc8:	|           |      addq.l #4,sp
    5dca:	|           |      move.l d0,8(a2)

    if (offset) {
    5dce:	|           \----> move.l 16(sp),d0
    5dd2:	|        /-------- beq.s 5e08 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5dd4:	|        |         movea.l 19cac <speech>,a0
    5dda:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5de0:	|        |     /-- bra.s 5e02 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5de2:	|        |  /--|-> movea.l 20(sp),a0
    5de6:	|        |  |  |   move.l 8(a0),d1
    5dea:	|        |  |  |   move.l 16(sp),d0
    5dee:	|        |  |  |   add.l d1,d0
    5df0:	|        |  |  |   movea.l 20(sp),a0
    5df4:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5df8:	|        |  |  |   movea.l 20(sp),a0
    5dfc:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5e02:	|        |  |  \-> tst.l 20(sp)
    5e06:	|        |  \----- bne.s 5de2 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5e08:	|        \-------> move.l 24(sp),d0
}
    5e0c:	\----------------> movem.l (sp)+,d2-d4/a2
    5e10:	                   lea 16(sp),sp
    5e14:	                   rts

00005e16 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    5e16:	subq.l #4,sp
    5e18:	move.l 16(sp),d0
    5e1c:	move.w d0,d0
    5e1e:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    5e22:	pea 16009 <line.c.05397aaf+0xa3>
    5e28:	jsr 12ed6 <KPrintF>
    5e2e:	addq.l #4,sp
    return TRUE;
    5e30:	moveq #1,d0
}    
    5e32:	addq.l #4,sp
    5e34:	rts

00005e36 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5e36:	    move.l 4(sp),d0
    5e3a:	/-- bpl.s 5e3e <TF_abs+0x8>
    5e3c:	|   neg.l d0
}
    5e3e:	\-> rts

00005e40 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    5e40:	             lea -28(sp),sp
    5e44:	             move.l a6,-(sp)
    5e46:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    5e48:	             moveq #120,d0
    5e4a:	             move.l d0,28(sp)
    5e4e:	             clr.l 24(sp)
    5e52:	             move.l 19c50 <SysBase>,d0
    5e58:	             movea.l d0,a6
    5e5a:	             move.l 28(sp),d0
    5e5e:	             move.l 24(sp),d1
    5e62:	             jsr -684(a6)
    5e66:	             move.l d0,20(sp)
    5e6a:	             move.l 20(sp),d0
    5e6e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    5e72:	         /-- bne.s 5e7a <addPerson+0x3a>
    5e74:	         |   clr.w d0
    5e76:	/--------|-- bra.w 60a8 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    5e7a:	|        \-> move.l 48(sp),-(sp)
    5e7e:	|            jsr 9dc4 <loadObjectType>
    5e84:	|            addq.l #4,sp
    5e86:	|            movea.l 16(sp),a0
    5e8a:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    5e8e:	|            movea.l 16(sp),a0
    5e92:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    5e9a:	|            movea.l 16(sp),a0
    5e9e:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    5ea2:	|            movea.l 16(sp),a0
    5ea6:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    5eaa:	|            move.l 44(sp),-(sp)
    5eae:	|            jsr 1332e <__floatsisf>
    5eb4:	|            addq.l #4,sp
    5eb6:	|            move.l d0,d2
    5eb8:	|            move.l 40(sp),-(sp)
    5ebc:	|            jsr 1332e <__floatsisf>
    5ec2:	|            addq.l #4,sp
    5ec4:	|            move.l d2,-(sp)
    5ec6:	|            move.l d0,-(sp)
    5ec8:	|            move.l 24(sp),-(sp)
    5ecc:	|            jsr 7362 <moveAndScale>
    5ed2:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    5ed6:	|            movea.l 16(sp),a0
    5eda:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    5ede:	|            movea.l 16(sp),a0
    5ee2:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    5ee8:	|            movea.l 16(sp),a0
    5eec:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    5ef2:	|            movea.l 16(sp),a0
    5ef6:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    5efa:	|            movea.l 16(sp),a0
    5efe:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    5f02:	|            movea.l 16(sp),a0
    5f06:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    5f0c:	|            movea.l 16(sp),a0
    5f10:	|            clr.l 94(a0)
    newPerson->angle = 180;
    5f14:	|            movea.l 16(sp),a0
    5f18:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    5f20:	|            movea.l 16(sp),a0
    5f24:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    5f2c:	|            movea.l 16(sp),a0
    5f30:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    5f34:	|            movea.l 16(sp),a0
    5f38:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    5f3c:	|            movea.l 16(sp),a0
    5f40:	|            movea.l 102(a0),a0
    5f44:	|            move.l 24(a0),d0
    5f48:	|            movea.l 16(sp),a0
    5f4c:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    5f50:	|            movea.l 16(sp),a0
    5f54:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    5f58:	|            movea.l 16(sp),a0
    5f5c:	|            movea.l 102(a0),a0
    5f60:	|            move.l 32(a0),d0
    5f64:	|            movea.l 16(sp),a0
    5f68:	|            move.l d0,110(a0)
    newPerson->r = 0;
    5f6c:	|            movea.l 16(sp),a0
    5f70:	|            clr.b 114(a0)
    newPerson->g = 0;
    5f74:	|            movea.l 16(sp),a0
    5f78:	|            clr.b 115(a0)
    newPerson->b = 0;
    5f7c:	|            movea.l 16(sp),a0
    5f80:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    5f84:	|            movea.l 16(sp),a0
    5f88:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    5f8c:	|            movea.l 16(sp),a0
    5f90:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    5f94:	|            movea.l 16(sp),a0
    5f98:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    5f9e:	|            clr.l -(sp)
    5fa0:	|            move.l 20(sp),-(sp)
    5fa4:	|            jsr 5868 <setFrames>
    5faa:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    5fac:	|            movea.l 52(sp),a0
    5fb0:	|            movea.l (a0),a0
    5fb2:	|            movea.l (a0),a0
    5fb4:	|            movea.l 4(a0),a0
    5fb8:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    5fbc:	|     /----- bpl.s 5fc6 <addPerson+0x186>
    5fbe:	|     |      move.l 12(sp),d0
    5fc2:	|     |      neg.l d0
    5fc4:	|     |  /-- bra.s 5fc8 <addPerson+0x188>
    5fc6:	|     \--|-> moveq #1,d0
    5fc8:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    5fcc:	|            movea.l 52(sp),a0
    5fd0:	|            movea.l (a0),a0
    5fd2:	|            movea.l (a0),a0
    5fd4:	|            movea.l (a0),a0
    5fd6:	|            move.l 8(a0),d0
    5fda:	|            cmp.l 8(sp),d0
    5fde:	|     /----- bgt.s 6010 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    5fe0:	|     |      tst.l 12(sp)
    5fe4:	|     |  /-- bge.s 5ff2 <addPerson+0x1b2>
            newPerson->height = 5;
    5fe6:	|     |  |   movea.l 16(sp),a0
    5fea:	|     |  |   moveq #5,d1
    5fec:	|     |  |   move.l d1,8(a0)
    5ff0:	|  /--|--|-- bra.s 603a <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    5ff2:	|  |  |  \-> movea.l 52(sp),a0
    5ff6:	|  |  |      movea.l (a0),a0
    5ff8:	|  |  |      movea.l (a0),a0
    5ffa:	|  |  |      movea.l (a0),a0
    5ffc:	|  |  |      movea.l 16(a0),a0
    6000:	|  |  |      move.l 12(a0),d0
    6004:	|  |  |      addq.l #5,d0
    6006:	|  |  |      movea.l 16(sp),a0
    600a:	|  |  |      move.l d0,8(a0)
    600e:	|  +--|----- bra.s 603a <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    6010:	|  |  \----> movea.l 52(sp),a0
    6014:	|  |         movea.l (a0),a0
    6016:	|  |         movea.l (a0),a0
    6018:	|  |         movea.l (a0),a0
    601a:	|  |         movea.l 16(a0),a0
    601e:	|  |         move.l 8(sp),d1
    6022:	|  |         move.l d1,d0
    6024:	|  |         add.l d0,d0
    6026:	|  |         add.l d1,d0
    6028:	|  |         lsl.l #3,d0
    602a:	|  |         adda.l d0,a0
    602c:	|  |         move.l 12(a0),d0
    6030:	|  |         addq.l #5,d0
    6032:	|  |         movea.l 16(sp),a0
    6036:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    603a:	|  \-------> move.l #105648,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6042:	|        /-- bra.s 6052 <addPerson+0x212>
        changethat = &((*changethat)->next);
    6044:	|     /--|-> movea.l 32(sp),a0
    6048:	|     |  |   move.l (a0),d0
    604a:	|     |  |   moveq #24,d1
    604c:	|     |  |   add.l d0,d1
    604e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6052:	|     |  \-> movea.l 32(sp),a0
    6056:	|     |      move.l (a0),d0
    6058:	|     |  /-- beq.s 6080 <addPerson+0x240>
    605a:	|     |  |   movea.l 32(sp),a0
    605e:	|     |  |   movea.l (a0),a0
    6060:	|     |  |   move.l 4(a0),d2
    6064:	|     |  |   move.l 44(sp),-(sp)
    6068:	|     |  |   jsr 1332e <__floatsisf>
    606e:	|     |  |   addq.l #4,sp
    6070:	|     |  |   move.l d0,-(sp)
    6072:	|     |  |   move.l d2,-(sp)
    6074:	|     |  |   jsr 13554 <__ltsf2>
    607a:	|     |  |   addq.l #8,sp
    607c:	|     |  |   tst.l d0
    607e:	|     \--|-- blt.s 6044 <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    6080:	|        \-> movea.l 32(sp),a0
    6084:	|            move.l (a0),d0
    6086:	|            movea.l 16(sp),a0
    608a:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    608e:	|            movea.l 32(sp),a0
    6092:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6096:	|            movea.l 16(sp),a0
    609a:	|            move.l 102(a0),d0
    609e:	|            sne d0
    60a0:	|            neg.b d0
    60a2:	|            move.b d0,d0
    60a4:	|            andi.w #255,d0
}
    60a8:	\----------> move.l (sp)+,d2
    60aa:	             movea.l (sp)+,a6
    60ac:	             lea 28(sp),sp
    60b0:	             rts

000060b2 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    60b2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    60b4:	       move.l 8(sp),-(sp)
    60b8:	       jsr 6c1a <findPerson>
    60be:	       addq.l #4,sp
    60c0:	       move.l d0,(sp)
    if (moveMe) {
    60c2:	/----- beq.s 60f6 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    60c4:	|      movea.l (sp),a0
    60c6:	|      move.l 56(a0),d0
    60ca:	|  /-- beq.s 60dc <animatePerson+0x2a>
    60cc:	|  |   movea.l (sp),a0
    60ce:	|  |   move.l 56(a0),d0
    60d2:	|  |   move.l d0,-(sp)
    60d4:	|  |   jsr 210e <abortFunction>
    60da:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    60dc:	|  \-> movea.l (sp),a0
    60de:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    60e2:	|      movea.l (sp),a0
    60e4:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    60e8:	|      movea.l (sp),a0
    60ea:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    60ee:	|      movea.l (sp),a0
    60f0:	|      move.l 12(sp),60(a0)
    }
}
    60f6:	\----> nop
    60f8:	       addq.l #4,sp
    60fa:	       rts

000060fc <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    60fc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    60fe:	       move.l 8(sp),-(sp)
    6102:	       jsr 6c1a <findPerson>
    6108:	       addq.l #4,sp
    610a:	       move.l d0,(sp)
    if (moveMe) {
    610c:	/----- beq.s 614e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    610e:	|      movea.l (sp),a0
    6110:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    6114:	|      movea.l (sp),a0
    6116:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    611c:	|      move.l (sp),-(sp)
    611e:	|      jsr 74ac <rethinkAngle>
    6124:	|      addq.l #4,sp
        if (moveMe->walking) {
    6126:	|      movea.l (sp),a0
    6128:	|      move.w 52(a0),d0
    612c:	|  /-- beq.s 6140 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    612e:	|  |   pea 1 <_start+0x1>
    6132:	|  |   move.l 4(sp),-(sp)
    6136:	|  |   jsr 5868 <setFrames>
    613c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    613e:	+--|-- bra.s 614e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    6140:	|  \-> clr.l -(sp)
    6142:	|      move.l 4(sp),-(sp)
    6146:	|      jsr 5868 <setFrames>
    614c:	|      addq.l #8,sp
}
    614e:	\----> nop
    6150:	       addq.l #4,sp
    6152:	       rts

00006154 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6154:	             lea -36(sp),sp
    6158:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    615a:	             movea.l 44(sp),a0
    615e:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6164:	             moveq #12,d0
    6166:	             move.l d0,28(sp)
    616a:	             clr.l 24(sp)
    616e:	             move.l 19c50 <SysBase>,d0
    6174:	             movea.l d0,a6
    6176:	             move.l 28(sp),d0
    617a:	             move.l 24(sp),d1
    617e:	             jsr -684(a6)
    6182:	             move.l d0,20(sp)
    6186:	             move.l 20(sp),d0
    618a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    618e:	         /-- bne.s 61a4 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    6190:	         |   pea 16029 <line.c.05397aaf+0xc3>
    6196:	         |   jsr 12ed6 <KPrintF>
    619c:	         |   addq.l #4,sp
		return NULL;
    619e:	         |   moveq #0,d0
    61a0:	/--------|-- bra.w 62e6 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    61a4:	|        \-> movea.l 44(sp),a0
    61a8:	|            move.l (a0),d0
    61aa:	|            movea.l 16(sp),a0
    61ae:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    61b0:	|            movea.l 16(sp),a0
    61b4:	|            move.l 32(sp),8(a0)

	if (num) {
    61ba:	|  /-------- beq.w 62da <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    61be:	|  |         move.l 32(sp),d1
    61c2:	|  |         move.l d1,d0
    61c4:	|  |         add.l d0,d0
    61c6:	|  |         add.l d1,d0
    61c8:	|  |         add.l d0,d0
    61ca:	|  |         add.l d0,d0
    61cc:	|  |         move.l d0,12(sp)
    61d0:	|  |         clr.l 8(sp)
    61d4:	|  |         move.l 19c50 <SysBase>,d0
    61da:	|  |         movea.l d0,a6
    61dc:	|  |         move.l 12(sp),d0
    61e0:	|  |         move.l 8(sp),d1
    61e4:	|  |         jsr -684(a6)
    61e8:	|  |         move.l d0,4(sp)
    61ec:	|  |         move.l 4(sp),d0
    61f0:	|  |         movea.l 16(sp),a0
    61f4:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    61f8:	|  |         movea.l 16(sp),a0
    61fc:	|  |         move.l 4(a0),d0
    6200:	|  |     /-- bne.s 6216 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    6202:	|  |     |   pea 16029 <line.c.05397aaf+0xc3>
    6208:	|  |     |   jsr 12ed6 <KPrintF>
    620e:	|  |     |   addq.l #4,sp
			return NULL;
    6210:	|  |     |   moveq #0,d0
    6212:	+--|-----|-- bra.w 62e6 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    6216:	|  |     \-> clr.l 36(sp)
    621a:	|  |     /-- bra.w 62cc <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    621e:	|  |  /--|-> movea.l 44(sp),a0
    6222:	|  |  |  |   movea.l 4(a0),a0
    6226:	|  |  |  |   move.l 36(sp),d1
    622a:	|  |  |  |   move.l d1,d0
    622c:	|  |  |  |   add.l d0,d0
    622e:	|  |  |  |   add.l d1,d0
    6230:	|  |  |  |   add.l d0,d0
    6232:	|  |  |  |   add.l d0,d0
    6234:	|  |  |  |   lea (0,a0,d0.l),a1
    6238:	|  |  |  |   movea.l 16(sp),a0
    623c:	|  |  |  |   movea.l 4(a0),a0
    6240:	|  |  |  |   move.l 36(sp),d1
    6244:	|  |  |  |   move.l d1,d0
    6246:	|  |  |  |   add.l d0,d0
    6248:	|  |  |  |   add.l d1,d0
    624a:	|  |  |  |   add.l d0,d0
    624c:	|  |  |  |   add.l d0,d0
    624e:	|  |  |  |   adda.l d0,a0
    6250:	|  |  |  |   move.l (a1),d0
    6252:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6254:	|  |  |  |   movea.l 44(sp),a0
    6258:	|  |  |  |   movea.l 4(a0),a0
    625c:	|  |  |  |   move.l 36(sp),d1
    6260:	|  |  |  |   move.l d1,d0
    6262:	|  |  |  |   add.l d0,d0
    6264:	|  |  |  |   add.l d1,d0
    6266:	|  |  |  |   add.l d0,d0
    6268:	|  |  |  |   add.l d0,d0
    626a:	|  |  |  |   lea (0,a0,d0.l),a1
    626e:	|  |  |  |   movea.l 16(sp),a0
    6272:	|  |  |  |   movea.l 4(a0),a0
    6276:	|  |  |  |   move.l 36(sp),d1
    627a:	|  |  |  |   move.l d1,d0
    627c:	|  |  |  |   add.l d0,d0
    627e:	|  |  |  |   add.l d1,d0
    6280:	|  |  |  |   add.l d0,d0
    6282:	|  |  |  |   add.l d0,d0
    6284:	|  |  |  |   adda.l d0,a0
    6286:	|  |  |  |   move.l 4(a1),d0
    628a:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    628e:	|  |  |  |   movea.l 44(sp),a0
    6292:	|  |  |  |   movea.l 4(a0),a0
    6296:	|  |  |  |   move.l 36(sp),d1
    629a:	|  |  |  |   move.l d1,d0
    629c:	|  |  |  |   add.l d0,d0
    629e:	|  |  |  |   add.l d1,d0
    62a0:	|  |  |  |   add.l d0,d0
    62a2:	|  |  |  |   add.l d0,d0
    62a4:	|  |  |  |   lea (0,a0,d0.l),a1
    62a8:	|  |  |  |   movea.l 16(sp),a0
    62ac:	|  |  |  |   movea.l 4(a0),a0
    62b0:	|  |  |  |   move.l 36(sp),d1
    62b4:	|  |  |  |   move.l d1,d0
    62b6:	|  |  |  |   add.l d0,d0
    62b8:	|  |  |  |   add.l d1,d0
    62ba:	|  |  |  |   add.l d0,d0
    62bc:	|  |  |  |   add.l d0,d0
    62be:	|  |  |  |   adda.l d0,a0
    62c0:	|  |  |  |   move.l 8(a1),d0
    62c4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    62c8:	|  |  |  |   addq.l #1,36(sp)
    62cc:	|  |  |  \-> move.l 36(sp),d0
    62d0:	|  |  |      cmp.l 32(sp),d0
    62d4:	|  |  \----- blt.w 621e <copyAnim+0xca>
    62d8:	|  |     /-- bra.s 62e2 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    62da:	|  \-----|-> movea.l 16(sp),a0
    62de:	|        |   clr.l 4(a0)
	}

	return newAnim;
    62e2:	|        \-> move.l 16(sp),d0
}
    62e6:	\----------> movea.l (sp)+,a6
    62e8:	             lea 36(sp),sp
    62ec:	             rts

000062ee <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    62ee:	                lea -44(sp),sp
    62f2:	                move.l a6,-(sp)
    62f4:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    62f6:	                moveq #12,d0
    62f8:	                move.l d0,40(sp)
    62fc:	                clr.l 36(sp)
    6300:	                move.l 19c50 <SysBase>,d0
    6306:	                movea.l d0,a6
    6308:	                move.l 40(sp),d0
    630c:	                move.l 36(sp),d1
    6310:	                jsr -684(a6)
    6314:	                move.l d0,32(sp)
    6318:	                move.l 32(sp),d0
    631c:	                move.l d0,28(sp)
	if( !newP) {
    6320:	            /-- bne.s 6336 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6322:	            |   pea 1604a <line.c.05397aaf+0xe4>
    6328:	            |   jsr 12ed6 <KPrintF>
    632e:	            |   addq.l #4,sp
		return NULL;
    6330:	            |   moveq #0,d0
    6332:	/-----------|-- bra.w 6506 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    6336:	|           \-> movea.l 28(sp),a0
    633a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    6340:	|               move.l 56(sp),d1
    6344:	|               move.l d1,d0
    6346:	|               add.l d0,d0
    6348:	|               add.l d1,d0
    634a:	|               add.l d0,d0
    634c:	|               add.l d0,d0
    634e:	|               move.l d0,24(sp)
    6352:	|               clr.l 20(sp)
    6356:	|               move.l 19c50 <SysBase>,d0
    635c:	|               movea.l d0,a6
    635e:	|               move.l 24(sp),d0
    6362:	|               move.l 20(sp),d1
    6366:	|               jsr -684(a6)
    636a:	|               move.l d0,16(sp)
    636e:	|               move.l 16(sp),d0
    6372:	|               movea.l 28(sp),a0
    6376:	|               move.l d0,4(a0)
	if( !newP->frames) {
    637a:	|               movea.l 28(sp),a0
    637e:	|               move.l 4(a0),d0
    6382:	|           /-- bne.s 6398 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6384:	|           |   pea 1604a <line.c.05397aaf+0xe4>
    638a:	|           |   jsr 12ed6 <KPrintF>
    6390:	|           |   addq.l #4,sp
		return NULL;
    6392:	|           |   moveq #0,d0
    6394:	+-----------|-- bra.w 6506 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    6398:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    639e:	|               movea.l 60(sp),a0
    63a2:	|               move.l (a0),44(sp)
	while (a) {
    63a6:	|     /-------- bra.w 64fa <createPersonaAnim+0x20c>
		a --;
    63aa:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    63ae:	|  |  |         movea.l 28(sp),a0
    63b2:	|  |  |         movea.l 4(a0),a0
    63b6:	|  |  |         move.l 48(sp),d1
    63ba:	|  |  |         move.l d1,d0
    63bc:	|  |  |         add.l d0,d0
    63be:	|  |  |         add.l d1,d0
    63c0:	|  |  |         add.l d0,d0
    63c2:	|  |  |         add.l d0,d0
    63c4:	|  |  |         adda.l d0,a0
    63c6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    63ca:	|  |  |         movea.l 44(sp),a0
    63ce:	|  |  |         move.l (a0),d0
    63d0:	|  |  |         moveq #5,d1
    63d2:	|  |  |         cmp.l d0,d1
    63d4:	|  |  |     /-- bne.s 6400 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    63d6:	|  |  |     |   movea.l 28(sp),a0
    63da:	|  |  |     |   movea.l 4(a0),a0
    63de:	|  |  |     |   move.l 48(sp),d1
    63e2:	|  |  |     |   move.l d1,d0
    63e4:	|  |  |     |   add.l d0,d0
    63e6:	|  |  |     |   add.l d1,d0
    63e8:	|  |  |     |   add.l d0,d0
    63ea:	|  |  |     |   add.l d0,d0
    63ec:	|  |  |     |   lea (0,a0,d0.l),a1
    63f0:	|  |  |     |   movea.l 44(sp),a0
    63f4:	|  |  |     |   move.l 4(a0),d0
    63f8:	|  |  |     |   move.l d0,8(a1)
    63fc:	|  |  |  /--|-- bra.w 64a8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    6400:	|  |  |  |  \-> movea.l 44(sp),a0
    6404:	|  |  |  |      move.l (a0),d0
    6406:	|  |  |  |      moveq #2,d1
    6408:	|  |  |  |      cmp.l d0,d1
    640a:	|  |  |  |  /-- bne.s 6436 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    640c:	|  |  |  |  |   movea.l 44(sp),a0
    6410:	|  |  |  |  |   move.l 4(a0),d2
    6414:	|  |  |  |  |   movea.l 28(sp),a0
    6418:	|  |  |  |  |   movea.l 4(a0),a0
    641c:	|  |  |  |  |   move.l 48(sp),d1
    6420:	|  |  |  |  |   move.l d1,d0
    6422:	|  |  |  |  |   add.l d0,d0
    6424:	|  |  |  |  |   add.l d1,d0
    6426:	|  |  |  |  |   add.l d0,d0
    6428:	|  |  |  |  |   add.l d0,d0
    642a:	|  |  |  |  |   adda.l d0,a0
    642c:	|  |  |  |  |   move.l d2,d0
    642e:	|  |  |  |  |   neg.l d0
    6430:	|  |  |  |  |   move.l d0,8(a0)
    6434:	|  |  |  +--|-- bra.s 64a8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    6436:	|  |  |  |  \-> movea.l 44(sp),a0
    643a:	|  |  |  |      move.l (a0),d0
    643c:	|  |  |  |      moveq #6,d1
    643e:	|  |  |  |      cmp.l d0,d1
    6440:	|  |  |  |  /-- bne.s 6488 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    6442:	|  |  |  |  |   movea.l 44(sp),a0
    6446:	|  |  |  |  |   movea.l 4(a0),a0
    644a:	|  |  |  |  |   move.l (a0),d0
    644c:	|  |  |  |  |   move.l d0,-(sp)
    644e:	|  |  |  |  |   pea 1 <_start+0x1>
    6452:	|  |  |  |  |   lea 20(sp),a0
    6456:	|  |  |  |  |   move.l a0,-(sp)
    6458:	|  |  |  |  |   jsr 10e82 <getValueType>
    645e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    6462:	|  |  |  |  |   movea.l 44(sp),a0
    6466:	|  |  |  |  |   movea.l 4(a0),a0
    646a:	|  |  |  |  |   movea.l (a0),a0
    646c:	|  |  |  |  |   move.l 8(a0),d0
    6470:	|  |  |  |  |   move.l d0,-(sp)
    6472:	|  |  |  |  |   pea 1 <_start+0x1>
    6476:	|  |  |  |  |   lea 16(sp),a0
    647a:	|  |  |  |  |   move.l a0,-(sp)
    647c:	|  |  |  |  |   jsr 10e82 <getValueType>
    6482:	|  |  |  |  |   lea 12(sp),sp
    6486:	|  |  |  +--|-- bra.s 64a8 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    6488:	|  |  |  |  \-> move.l 44(sp),d0
    648c:	|  |  |  |      move.l d0,-(sp)
    648e:	|  |  |  |      pea 1 <_start+0x1>
    6492:	|  |  |  |      lea 20(sp),a0
    6496:	|  |  |  |      move.l a0,-(sp)
    6498:	|  |  |  |      jsr 10e82 <getValueType>
    649e:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    64a2:	|  |  |  |      moveq #1,d0
    64a4:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    64a8:	|  |  |  \----> move.l 60(sp),-(sp)
    64ac:	|  |  |         jsr 11806 <trimStack>
    64b2:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    64b4:	|  |  |         movea.l 28(sp),a0
    64b8:	|  |  |         movea.l 4(a0),a0
    64bc:	|  |  |         move.l 48(sp),d1
    64c0:	|  |  |         move.l d1,d0
    64c2:	|  |  |         add.l d0,d0
    64c4:	|  |  |         add.l d1,d0
    64c6:	|  |  |         add.l d0,d0
    64c8:	|  |  |         add.l d0,d0
    64ca:	|  |  |         adda.l d0,a0
    64cc:	|  |  |         move.l 12(sp),d0
    64d0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    64d2:	|  |  |         movea.l 28(sp),a0
    64d6:	|  |  |         movea.l 4(a0),a0
    64da:	|  |  |         move.l 48(sp),d1
    64de:	|  |  |         move.l d1,d0
    64e0:	|  |  |         add.l d0,d0
    64e2:	|  |  |         add.l d1,d0
    64e4:	|  |  |         add.l d0,d0
    64e6:	|  |  |         add.l d0,d0
    64e8:	|  |  |         adda.l d0,a0
    64ea:	|  |  |         move.l 8(sp),d0
    64ee:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    64f2:	|  |  |         movea.l 60(sp),a0
    64f6:	|  |  |         move.l (a0),44(sp)
	while (a) {
    64fa:	|  |  \-------> tst.l 48(sp)
    64fe:	|  \----------- bne.w 63aa <createPersonaAnim+0xbc>
	}

	return newP;
    6502:	|               move.l 28(sp),d0
}
    6506:	\-------------> move.l (sp)+,d2
    6508:	                movea.l (sp)+,a6
    650a:	                lea 44(sp),sp
    650e:	                rts

00006510 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    6510:	       subq.l #8,sp
    6512:	       move.l a6,-(sp)

	if (orig)
    6514:	       tst.l 16(sp)
    6518:	/----- beq.s 6558 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    651a:	|      movea.l 16(sp),a0
    651e:	|      move.l 8(a0),d0
    6522:	|  /-- beq.s 653e <deleteAnim+0x2e>
			FreeVec( orig->frames);
    6524:	|  |   movea.l 16(sp),a0
    6528:	|  |   move.l 4(a0),8(sp)
    652e:	|  |   move.l 19c50 <SysBase>,d0
    6534:	|  |   movea.l d0,a6
    6536:	|  |   movea.l 8(sp),a1
    653a:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    653e:	|  \-> move.l 16(sp),4(sp)
    6544:	|      move.l 19c50 <SysBase>,d0
    654a:	|      movea.l d0,a6
    654c:	|      movea.l 4(sp),a1
    6550:	|      jsr -690(a6)
		orig = NULL;
    6554:	|      clr.l 16(sp)
	}
}
    6558:	\----> nop
    655a:	       movea.l (sp)+,a6
    655c:	       addq.l #8,sp
    655e:	       rts

00006560 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    6560:	          lea -124(sp),sp
    6564:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    6568:	          movea.l 152(sp),a0
    656c:	          move.l 44(a0),d1
    6570:	          movea.l 152(sp),a0
    6574:	          move.l 48(a0),d0
    6578:	          cmp.l d1,d0
    657a:	      /-- bne.s 65aa <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    657c:	      |   movea.l 152(sp),a0
    6580:	      |   moveq #-1,d0
    6582:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    6586:	      |   movea.l 152(sp),a0
    658a:	      |   move.l 28(a0),d0
    658e:	      |   movea.l 152(sp),a0
    6592:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    6596:	      |   movea.l 152(sp),a0
    659a:	      |   move.l 32(a0),d0
    659e:	      |   movea.l 152(sp),a0
    65a2:	      |   move.l d0,40(a0)
    65a6:	   /--|-- bra.w 6b10 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    65aa:	   |  \-> movea.l 19d5c <currentFloor>,a0
    65b0:	   |      move.l 16(a0),d1
    65b4:	   |      movea.l 152(sp),a0
    65b8:	   |      move.l 44(a0),d0
    65bc:	   |      add.l d0,d0
    65be:	   |      add.l d0,d0
    65c0:	   |      movea.l d1,a0
    65c2:	   |      adda.l d0,a0
    65c4:	   |      move.l (a0),d1
    65c6:	   |      movea.l 152(sp),a0
    65ca:	   |      move.l 48(a0),d0
    65ce:	   |      add.l d0,d0
    65d0:	   |      add.l d0,d0
    65d2:	   |      movea.l d1,a0
    65d4:	   |      adda.l d0,a0
    65d6:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    65da:	   |      moveq #-1,d0
    65dc:	   |      cmp.l 144(sp),d0
    65e0:	   |  /-- bne.s 65e8 <doBorderStuff+0x88>
    65e2:	   |  |   clr.w d0
    65e4:	/--|--|-- bra.w 6c10 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    65e8:	|  |  \-> movea.l 19d5c <currentFloor>,a0
    65ee:	|  |      move.l 12(a0),d1
    65f2:	|  |      move.l 144(sp),d0
    65f6:	|  |      lsl.l #3,d0
    65f8:	|  |      add.l d0,d1
    65fa:	|  |      movea.l 19d5c <currentFloor>,a0
    6600:	|  |      movea.l 12(a0),a1
    6604:	|  |      movea.l 152(sp),a0
    6608:	|  |      move.l 44(a0),d0
    660c:	|  |      lsl.l #3,d0
    660e:	|  |      add.l a1,d0
    6610:	|  |      lea 40(sp),a0
    6614:	|  |      move.l a0,-(sp)
    6616:	|  |      lea 48(sp),a0
    661a:	|  |      move.l a0,-(sp)
    661c:	|  |      move.l d1,-(sp)
    661e:	|  |      move.l d0,-(sp)
    6620:	|  |      jsr 1214c <getMatchingCorners>
    6626:	|  |      lea 16(sp),sp
    662a:	|  |      tst.w d0
    662c:	|  |  /-- bne.s 6642 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    662e:	|  |  |   pea 16074 <line.c.05397aaf+0x10e>
    6634:	|  |  |   jsr 12ed6 <KPrintF>
    663a:	|  |  |   addq.l #4,sp
            return FALSE;
    663c:	|  |  |   clr.w d0
    663e:	+--|--|-- bra.w 6c10 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    6642:	|  |  \-> movea.l 152(sp),a0
    6646:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    664c:	|  |      movea.l 152(sp),a0
    6650:	|  |      move.l (a0),d0
    6652:	|  |      move.l d0,-(sp)
    6654:	|  |      jsr 132c6 <__fixsfsi>
    665a:	|  |      addq.l #4,sp
    665c:	|  |      move.l d0,140(sp)
    6660:	|  |      movea.l 152(sp),a0
    6664:	|  |      move.l 4(a0),d0
    6668:	|  |      move.l d0,-(sp)
    666a:	|  |      jsr 132c6 <__fixsfsi>
    6670:	|  |      addq.l #4,sp
    6672:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    6676:	|  |      movea.l 152(sp),a0
    667a:	|  |      move.l 28(a0),132(sp)
    6680:	|  |      movea.l 152(sp),a0
    6684:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    668a:	|  |      movea.l 19d5c <currentFloor>,a0
    6690:	|  |      move.l 4(a0),d1
    6694:	|  |      move.l 44(sp),d0
    6698:	|  |      lsl.l #3,d0
    669a:	|  |      movea.l d1,a0
    669c:	|  |      adda.l d0,a0
    669e:	|  |      move.l (a0),124(sp)
    66a2:	|  |      movea.l 19d5c <currentFloor>,a0
    66a8:	|  |      move.l 4(a0),d1
    66ac:	|  |      move.l 44(sp),d0
    66b0:	|  |      lsl.l #3,d0
    66b2:	|  |      movea.l d1,a0
    66b4:	|  |      adda.l d0,a0
    66b6:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    66bc:	|  |      movea.l 19d5c <currentFloor>,a0
    66c2:	|  |      move.l 4(a0),d1
    66c6:	|  |      move.l 40(sp),d0
    66ca:	|  |      lsl.l #3,d0
    66cc:	|  |      movea.l d1,a0
    66ce:	|  |      adda.l d0,a0
    66d0:	|  |      move.l (a0),116(sp)
    66d4:	|  |      movea.l 19d5c <currentFloor>,a0
    66da:	|  |      move.l 4(a0),d1
    66de:	|  |      move.l 40(sp),d0
    66e2:	|  |      lsl.l #3,d0
    66e4:	|  |      movea.l d1,a0
    66e6:	|  |      adda.l d0,a0
    66e8:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    66ee:	|  |      move.l 140(sp),d0
    66f2:	|  |      sub.l 132(sp),d0
    66f6:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    66fa:	|  |      move.l 136(sp),d0
    66fe:	|  |      sub.l 128(sp),d0
    6702:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    6706:	|  |      move.l 116(sp),d0
    670a:	|  |      sub.l 124(sp),d0
    670e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    6712:	|  |      move.l 112(sp),d0
    6716:	|  |      sub.l 120(sp),d0
    671a:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    671e:	|  |      move.l 124(sp),d0
    6722:	|  |      sub.l 140(sp),d0
    6726:	|  |      move.l 104(sp),-(sp)
    672a:	|  |      move.l d0,-(sp)
    672c:	|  |      jsr 13888 <__mulsi3>
    6732:	|  |      addq.l #8,sp
    6734:	|  |      move.l d0,d2
    6736:	|  |      move.l 120(sp),d0
    673a:	|  |      sub.l 136(sp),d0
    673e:	|  |      move.l 108(sp),-(sp)
    6742:	|  |      move.l d0,-(sp)
    6744:	|  |      jsr 13888 <__mulsi3>
    674a:	|  |      addq.l #8,sp
    674c:	|  |      move.l d2,d1
    674e:	|  |      sub.l d0,d1
    6750:	|  |      move.l d1,-(sp)
    6752:	|  |      jsr 132ee <__floatsidf>
    6758:	|  |      addq.l #4,sp
    675a:	|  |      move.l d0,32(sp)
    675e:	|  |      move.l d1,36(sp)
    6762:	|  |      move.l 32(sp),88(sp)
    6768:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    676e:	|  |      move.l 96(sp),-(sp)
    6772:	|  |      move.l 112(sp),-(sp)
    6776:	|  |      jsr 13888 <__mulsi3>
    677c:	|  |      addq.l #8,sp
    677e:	|  |      move.l d0,d2
    6780:	|  |      move.l 100(sp),-(sp)
    6784:	|  |      move.l 108(sp),-(sp)
    6788:	|  |      jsr 13888 <__mulsi3>
    678e:	|  |      addq.l #8,sp
    6790:	|  |      move.l d2,d1
    6792:	|  |      sub.l d0,d1
    6794:	|  |      move.l d1,-(sp)
    6796:	|  |      jsr 132ee <__floatsidf>
    679c:	|  |      addq.l #4,sp
    679e:	|  |      move.l d1,-(sp)
    67a0:	|  |      move.l d0,-(sp)
    67a2:	|  |      move.l 100(sp),-(sp)
    67a6:	|  |      move.l 100(sp),-(sp)
    67aa:	|  |      jsr 13178 <__divdf3>
    67b0:	|  |      lea 16(sp),sp
    67b4:	|  |      move.l d0,24(sp)
    67b8:	|  |      move.l d1,28(sp)
    67bc:	|  |      move.l 24(sp),88(sp)
    67c2:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    67c8:	|  |      clr.l -(sp)
    67ca:	|  |      clr.l -(sp)
    67cc:	|  |      move.l 100(sp),-(sp)
    67d0:	|  |      move.l 100(sp),-(sp)
    67d4:	|  |      jsr 1344c <__gtdf2>
    67da:	|  |      lea 16(sp),sp
    67de:	|  |      tst.l d0
    67e0:	|  |  /-- ble.w 68b8 <doBorderStuff+0x358>
    67e4:	|  |  |   clr.l -(sp)
    67e6:	|  |  |   move.l #1072693248,-(sp)
    67ec:	|  |  |   move.l 100(sp),-(sp)
    67f0:	|  |  |   move.l 100(sp),-(sp)
    67f4:	|  |  |   jsr 13506 <__ltdf2>
    67fa:	|  |  |   lea 16(sp),sp
    67fe:	|  |  |   tst.l d0
    6800:	|  |  +-- bge.w 68b8 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    6804:	|  |  |   move.l 124(sp),-(sp)
    6808:	|  |  |   jsr 132ee <__floatsidf>
    680e:	|  |  |   addq.l #4,sp
    6810:	|  |  |   move.l d0,d2
    6812:	|  |  |   move.l d1,d3
    6814:	|  |  |   move.l 100(sp),-(sp)
    6818:	|  |  |   jsr 132ee <__floatsidf>
    681e:	|  |  |   addq.l #4,sp
    6820:	|  |  |   move.l 92(sp),-(sp)
    6824:	|  |  |   move.l 92(sp),-(sp)
    6828:	|  |  |   move.l d1,-(sp)
    682a:	|  |  |   move.l d0,-(sp)
    682c:	|  |  |   jsr 1337e <__muldf3>
    6832:	|  |  |   lea 16(sp),sp
    6836:	|  |  |   move.l d1,-(sp)
    6838:	|  |  |   move.l d0,-(sp)
    683a:	|  |  |   move.l d3,-(sp)
    683c:	|  |  |   move.l d2,-(sp)
    683e:	|  |  |   jsr 13116 <__adddf3>
    6844:	|  |  |   lea 16(sp),sp
    6848:	|  |  |   move.l d1,-(sp)
    684a:	|  |  |   move.l d0,-(sp)
    684c:	|  |  |   jsr 13286 <__fixdfsi>
    6852:	|  |  |   addq.l #8,sp
    6854:	|  |  |   movea.l 152(sp),a0
    6858:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    685c:	|  |  |   move.l 120(sp),-(sp)
    6860:	|  |  |   jsr 132ee <__floatsidf>
    6866:	|  |  |   addq.l #4,sp
    6868:	|  |  |   move.l d0,d2
    686a:	|  |  |   move.l d1,d3
    686c:	|  |  |   move.l 96(sp),-(sp)
    6870:	|  |  |   jsr 132ee <__floatsidf>
    6876:	|  |  |   addq.l #4,sp
    6878:	|  |  |   move.l 92(sp),-(sp)
    687c:	|  |  |   move.l 92(sp),-(sp)
    6880:	|  |  |   move.l d1,-(sp)
    6882:	|  |  |   move.l d0,-(sp)
    6884:	|  |  |   jsr 1337e <__muldf3>
    688a:	|  |  |   lea 16(sp),sp
    688e:	|  |  |   move.l d1,-(sp)
    6890:	|  |  |   move.l d0,-(sp)
    6892:	|  |  |   move.l d3,-(sp)
    6894:	|  |  |   move.l d2,-(sp)
    6896:	|  |  |   jsr 13116 <__adddf3>
    689c:	|  |  |   lea 16(sp),sp
    68a0:	|  |  |   move.l d1,-(sp)
    68a2:	|  |  |   move.l d0,-(sp)
    68a4:	|  |  |   jsr 13286 <__fixdfsi>
    68aa:	|  |  |   addq.l #8,sp
    68ac:	|  |  |   movea.l 152(sp),a0
    68b0:	|  |  |   move.l d0,40(a0)
    68b4:	|  +--|-- bra.w 6b10 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    68b8:	|  |  \-> move.l 140(sp),d0
    68bc:	|  |      sub.l 124(sp),d0
    68c0:	|  |      move.l d0,84(sp)
    68c4:	|  |      move.l 140(sp),d0
    68c8:	|  |      sub.l 116(sp),d0
    68cc:	|  |      move.l d0,80(sp)
    68d0:	|  |      move.l 132(sp),d0
    68d4:	|  |      sub.l 124(sp),d0
    68d8:	|  |      move.l d0,76(sp)
    68dc:	|  |      move.l 132(sp),d0
    68e0:	|  |      sub.l 116(sp),d0
    68e4:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    68e8:	|  |      move.l 136(sp),d0
    68ec:	|  |      sub.l 120(sp),d0
    68f0:	|  |      move.l d0,68(sp)
    68f4:	|  |      move.l 136(sp),d0
    68f8:	|  |      sub.l 112(sp),d0
    68fc:	|  |      move.l d0,64(sp)
    6900:	|  |      move.l 128(sp),d0
    6904:	|  |      sub.l 120(sp),d0
    6908:	|  |      move.l d0,60(sp)
    690c:	|  |      move.l 128(sp),d0
    6910:	|  |      sub.l 112(sp),d0
    6914:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6918:	|  |      move.l 84(sp),-(sp)
    691c:	|  |      move.l 88(sp),-(sp)
    6920:	|  |      jsr 13888 <__mulsi3>
    6926:	|  |      addq.l #8,sp
    6928:	|  |      move.l d0,84(sp)
    692c:	|  |      move.l 80(sp),-(sp)
    6930:	|  |      move.l 84(sp),-(sp)
    6934:	|  |      jsr 13888 <__mulsi3>
    693a:	|  |      addq.l #8,sp
    693c:	|  |      move.l d0,80(sp)
    6940:	|  |      move.l 76(sp),-(sp)
    6944:	|  |      move.l 80(sp),-(sp)
    6948:	|  |      jsr 13888 <__mulsi3>
    694e:	|  |      addq.l #8,sp
    6950:	|  |      move.l d0,76(sp)
    6954:	|  |      move.l 72(sp),-(sp)
    6958:	|  |      move.l 76(sp),-(sp)
    695c:	|  |      jsr 13888 <__mulsi3>
    6962:	|  |      addq.l #8,sp
    6964:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6968:	|  |      move.l 68(sp),-(sp)
    696c:	|  |      move.l 72(sp),-(sp)
    6970:	|  |      jsr 13888 <__mulsi3>
    6976:	|  |      addq.l #8,sp
    6978:	|  |      move.l d0,68(sp)
    697c:	|  |      move.l 64(sp),-(sp)
    6980:	|  |      move.l 68(sp),-(sp)
    6984:	|  |      jsr 13888 <__mulsi3>
    698a:	|  |      addq.l #8,sp
    698c:	|  |      move.l d0,64(sp)
    6990:	|  |      move.l 60(sp),-(sp)
    6994:	|  |      move.l 64(sp),-(sp)
    6998:	|  |      jsr 13888 <__mulsi3>
    699e:	|  |      addq.l #8,sp
    69a0:	|  |      move.l d0,60(sp)
    69a4:	|  |      move.l 56(sp),-(sp)
    69a8:	|  |      move.l 60(sp),-(sp)
    69ac:	|  |      jsr 13888 <__mulsi3>
    69b2:	|  |      addq.l #8,sp
    69b4:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    69b8:	|  |      move.l 84(sp),-(sp)
    69bc:	|  |      jsr 132ee <__floatsidf>
    69c2:	|  |      addq.l #4,sp
    69c4:	|  |      move.l d0,d2
    69c6:	|  |      move.l d1,d3
    69c8:	|  |      move.l 68(sp),-(sp)
    69cc:	|  |      jsr 132ee <__floatsidf>
    69d2:	|  |      addq.l #4,sp
    69d4:	|  |      move.l d1,-(sp)
    69d6:	|  |      move.l d0,-(sp)
    69d8:	|  |      move.l d3,-(sp)
    69da:	|  |      move.l d2,-(sp)
    69dc:	|  |      jsr 13116 <__adddf3>
    69e2:	|  |      lea 16(sp),sp
    69e6:	|  |      move.l d1,-(sp)
    69e8:	|  |      move.l d0,-(sp)
    69ea:	|  |      jsr 1383e <sqrt>
    69f0:	|  |      addq.l #8,sp
    69f2:	|  |      move.l d0,d2
    69f4:	|  |      move.l d1,d3
    69f6:	|  |      move.l 76(sp),-(sp)
    69fa:	|  |      jsr 132ee <__floatsidf>
    6a00:	|  |      addq.l #4,sp
    6a02:	|  |      move.l d0,d4
    6a04:	|  |      move.l d1,d5
    6a06:	|  |      move.l 60(sp),-(sp)
    6a0a:	|  |      jsr 132ee <__floatsidf>
    6a10:	|  |      addq.l #4,sp
    6a12:	|  |      move.l d1,-(sp)
    6a14:	|  |      move.l d0,-(sp)
    6a16:	|  |      move.l d5,-(sp)
    6a18:	|  |      move.l d4,-(sp)
    6a1a:	|  |      jsr 13116 <__adddf3>
    6a20:	|  |      lea 16(sp),sp
    6a24:	|  |      move.l d1,-(sp)
    6a26:	|  |      move.l d0,-(sp)
    6a28:	|  |      jsr 1383e <sqrt>
    6a2e:	|  |      addq.l #8,sp
    6a30:	|  |      move.l d1,-(sp)
    6a32:	|  |      move.l d0,-(sp)
    6a34:	|  |      move.l d3,-(sp)
    6a36:	|  |      move.l d2,-(sp)
    6a38:	|  |      jsr 13116 <__adddf3>
    6a3e:	|  |      lea 16(sp),sp
    6a42:	|  |      move.l d0,d2
    6a44:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6a46:	|  |      move.l 80(sp),-(sp)
    6a4a:	|  |      jsr 132ee <__floatsidf>
    6a50:	|  |      addq.l #4,sp
    6a52:	|  |      move.l d0,d4
    6a54:	|  |      move.l d1,d5
    6a56:	|  |      move.l 64(sp),-(sp)
    6a5a:	|  |      jsr 132ee <__floatsidf>
    6a60:	|  |      addq.l #4,sp
    6a62:	|  |      move.l d1,-(sp)
    6a64:	|  |      move.l d0,-(sp)
    6a66:	|  |      move.l d5,-(sp)
    6a68:	|  |      move.l d4,-(sp)
    6a6a:	|  |      jsr 13116 <__adddf3>
    6a70:	|  |      lea 16(sp),sp
    6a74:	|  |      move.l d1,-(sp)
    6a76:	|  |      move.l d0,-(sp)
    6a78:	|  |      jsr 1383e <sqrt>
    6a7e:	|  |      addq.l #8,sp
    6a80:	|  |      move.l d0,d4
    6a82:	|  |      move.l d1,d5
    6a84:	|  |      move.l 72(sp),-(sp)
    6a88:	|  |      jsr 132ee <__floatsidf>
    6a8e:	|  |      addq.l #4,sp
    6a90:	|  |      move.l d0,d6
    6a92:	|  |      move.l d1,d7
    6a94:	|  |      move.l 56(sp),-(sp)
    6a98:	|  |      jsr 132ee <__floatsidf>
    6a9e:	|  |      addq.l #4,sp
    6aa0:	|  |      move.l d1,-(sp)
    6aa2:	|  |      move.l d0,-(sp)
    6aa4:	|  |      move.l d7,-(sp)
    6aa6:	|  |      move.l d6,-(sp)
    6aa8:	|  |      jsr 13116 <__adddf3>
    6aae:	|  |      lea 16(sp),sp
    6ab2:	|  |      move.l d1,-(sp)
    6ab4:	|  |      move.l d0,-(sp)
    6ab6:	|  |      jsr 1383e <sqrt>
    6abc:	|  |      addq.l #8,sp
    6abe:	|  |      move.l d1,-(sp)
    6ac0:	|  |      move.l d0,-(sp)
    6ac2:	|  |      move.l d5,-(sp)
    6ac4:	|  |      move.l d4,-(sp)
    6ac6:	|  |      jsr 13116 <__adddf3>
    6acc:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6ad0:	|  |      move.l d1,-(sp)
    6ad2:	|  |      move.l d0,-(sp)
    6ad4:	|  |      move.l d3,-(sp)
    6ad6:	|  |      move.l d2,-(sp)
    6ad8:	|  |      jsr 13506 <__ltdf2>
    6ade:	|  |      lea 16(sp),sp
    6ae2:	|  |      tst.l d0
    6ae4:	|  |  /-- bge.s 6afc <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6ae6:	|  |  |   movea.l 152(sp),a0
    6aea:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    6af0:	|  |  |   movea.l 152(sp),a0
    6af4:	|  |  |   move.l 120(sp),40(a0)
    6afa:	|  +--|-- bra.s 6b10 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6afc:	|  |  \-> movea.l 152(sp),a0
    6b00:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6b06:	|  |      movea.l 152(sp),a0
    6b0a:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    6b10:	|  \----> movea.l 152(sp),a0
    6b14:	|         move.l 40(a0),d0
    6b18:	|         move.l d0,-(sp)
    6b1a:	|         jsr 1332e <__floatsisf>
    6b20:	|         addq.l #4,sp
    6b22:	|         move.l d0,d1
    6b24:	|         movea.l 152(sp),a0
    6b28:	|         move.l 4(a0),d0
    6b2c:	|         move.l d0,-(sp)
    6b2e:	|         move.l d1,-(sp)
    6b30:	|         jsr 13622 <__subsf3>
    6b36:	|         addq.l #8,sp
    6b38:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    6b3c:	|         movea.l 152(sp),a0
    6b40:	|         move.l (a0),d2
    6b42:	|         movea.l 152(sp),a0
    6b46:	|         move.l 36(a0),d0
    6b4a:	|         move.l d0,-(sp)
    6b4c:	|         jsr 1332e <__floatsisf>
    6b52:	|         addq.l #4,sp
    6b54:	|         move.l d0,-(sp)
    6b56:	|         move.l d2,-(sp)
    6b58:	|         jsr 13622 <__subsf3>
    6b5e:	|         addq.l #8,sp
    6b60:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6b64:	|         clr.l -(sp)
    6b66:	|         move.l 52(sp),-(sp)
    6b6a:	|         jsr 1358a <__nesf2>
    6b70:	|         addq.l #8,sp
    6b72:	|         tst.l d0
    6b74:	|     /-- bne.s 6b88 <doBorderStuff+0x628>
    6b76:	|     |   clr.l -(sp)
    6b78:	|     |   move.l 56(sp),-(sp)
    6b7c:	|     |   jsr 1358a <__nesf2>
    6b82:	|     |   addq.l #8,sp
    6b84:	|     |   tst.l d0
    6b86:	|  /--|-- beq.s 6bfe <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    6b88:	|  |  \-> move.l 52(sp),d0
    6b8c:	|  |      move.l d0,-(sp)
    6b8e:	|  |      move.l d0,-(sp)
    6b90:	|  |      jsr 130e0 <__addsf3>
    6b96:	|  |      addq.l #8,sp
    6b98:	|  |      move.l d0,-(sp)
    6b9a:	|  |      move.l 52(sp),-(sp)
    6b9e:	|  |      jsr 1368e <atan2f>
    6ba4:	|  |      addq.l #8,sp
    6ba6:	|  |      move.l d0,-(sp)
    6ba8:	|  |      jsr 13246 <__extendsfdf2>
    6bae:	|  |      addq.l #4,sp
    6bb0:	|  |      move.l #-1540411785,-(sp)
    6bb6:	|  |      move.l #1078765033,-(sp)
    6bbc:	|  |      move.l d1,-(sp)
    6bbe:	|  |      move.l d0,-(sp)
    6bc0:	|  |      jsr 1337e <__muldf3>
    6bc6:	|  |      lea 16(sp),sp
    6bca:	|  |      clr.l -(sp)
    6bcc:	|  |      move.l #1080459264,-(sp)
    6bd2:	|  |      move.l d1,-(sp)
    6bd4:	|  |      move.l d0,-(sp)
    6bd6:	|  |      jsr 13116 <__adddf3>
    6bdc:	|  |      lea 16(sp),sp
    6be0:	|  |      move.l d1,-(sp)
    6be2:	|  |      move.l d0,-(sp)
    6be4:	|  |      jsr 13286 <__fixdfsi>
    6bea:	|  |      addq.l #8,sp
    6bec:	|  |      movea.l 152(sp),a0
    6bf0:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    6bf4:	|  |      movea.l 152(sp),a0
    6bf8:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    6bfe:	|  \----> pea 1 <_start+0x1>
    6c02:	|         move.l 156(sp),-(sp)
    6c06:	|         jsr 5868 <setFrames>
    6c0c:	|         addq.l #8,sp
    return TRUE;
    6c0e:	|         moveq #1,d0
}
    6c10:	\-------> movem.l (sp)+,d2-d7
    6c14:	          lea 124(sp),sp
    6c18:	          rts

00006c1a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6c1a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    6c1c:	          move.l 19cb0 <allPeople>,(sp)
	while (thisPerson) {
    6c22:	      /-- bra.s 6c3a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    6c24:	/-----|-> movea.l (sp),a0
    6c26:	|     |   movea.l 102(a0),a0
    6c2a:	|     |   move.l 4(a0),d0
    6c2e:	|     |   cmp.l 8(sp),d0
    6c32:	|  /--|-- beq.s 6c40 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    6c34:	|  |  |   movea.l (sp),a0
    6c36:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    6c3a:	|  |  \-> tst.l (sp)
    6c3c:	\--|----- bne.s 6c24 <findPerson+0xa>
    6c3e:	   |  /-- bra.s 6c42 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    6c40:	   \--|-> nop
	}
	return thisPerson;
    6c42:	      \-> move.l (sp),d0
}
    6c44:	          addq.l #4,sp
    6c46:	          rts

00006c48 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6c48:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    6c4a:	       move.l 12(sp),-(sp)
    6c4e:	       jsr 6c1a <findPerson>
    6c54:	       addq.l #4,sp
    6c56:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6c58:	   /-- bne.s 6c5e <floatCharacter+0x16>
    6c5a:	   |   clr.w d0
    6c5c:	/--|-- bra.s 6c68 <floatCharacter+0x20>
	moveMe -> floaty = f;
    6c5e:	|  \-> movea.l (sp),a0
    6c60:	|      move.l 8(sp),12(a0)
	return TRUE;
    6c66:	|      moveq #1,d0
}
    6c68:	\----> addq.l #4,sp
    6c6a:	       rts

00006c6c <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6c6c:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    6c6e:	          tst.l 8(sp)
    6c72:	      /-- bne.s 6c80 <forceWalkingPerson+0x14>
    6c74:	      |   tst.l 12(sp)
    6c78:	      +-- bne.s 6c80 <forceWalkingPerson+0x14>
    6c7a:	      |   clr.w d0
    6c7c:	/-----|-- bra.w 6d12 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6c80:	|     \-> move.l 16(sp),-(sp)
    6c84:	|         jsr 6c1a <findPerson>
    6c8a:	|         addq.l #4,sp
    6c8c:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    6c8e:	|     /-- bne.s 6c94 <forceWalkingPerson+0x28>
    6c90:	|     |   clr.w d0
    6c92:	+-----|-- bra.s 6d12 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6c94:	|     \-> movea.l (sp),a0
    6c96:	|         move.l 56(a0),d0
    6c9a:	|     /-- beq.s 6cac <forceWalkingPerson+0x40>
    6c9c:	|     |   movea.l (sp),a0
    6c9e:	|     |   move.l 56(a0),d0
    6ca2:	|     |   move.l d0,-(sp)
    6ca4:	|     |   jsr 210e <abortFunction>
    6caa:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    6cac:	|     \-> movea.l (sp),a0
    6cae:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    6cb4:	|         movea.l (sp),a0
    6cb6:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    6cba:	|         movea.l (sp),a0
    6cbc:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    6cc2:	|         movea.l (sp),a0
    6cc4:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    6cca:	|         movea.l (sp),a0
    6ccc:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    6cd2:	|         movea.l (sp),a0
    6cd4:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    6cd8:	|         movea.l (sp),a0
    6cda:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    6cde:	|         move.l (sp),-(sp)
    6ce0:	|         jsr 6560 <doBorderStuff>
    6ce6:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6ce8:	|         pea 1 <_start+0x1>
    6cec:	|         move.l 4(sp),-(sp)
    6cf0:	|         jsr 83a8 <walkMe>
    6cf6:	|         addq.l #8,sp
    6cf8:	|         tst.w d0
    6cfa:	|     /-- bne.s 6d04 <forceWalkingPerson+0x98>
    6cfc:	|     |   movea.l (sp),a0
    6cfe:	|     |   move.w 54(a0),d0
    6d02:	|  /--|-- beq.s 6d10 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    6d04:	|  |  \-> movea.l (sp),a0
    6d06:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    6d0c:	|  |      moveq #1,d0
    6d0e:	+--|----- bra.s 6d12 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    6d10:	|  \----> clr.w d0
    }
}
    6d12:	\-------> addq.l #4,sp
    6d14:	          rts

00006d16 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6d16:	                lea -56(sp),sp
    6d1a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    6d1c:	                move.l #320,56(sp)
    6d24:	                move.l #200,52(sp)
    6d2c:	                moveq #-1,d0
    6d2e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    6d32:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6d3a:	                clr.l 44(sp)
    6d3e:	   /----------- bra.w 6f16 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    6d42:	/--|----------> movea.l 19d5c <currentFloor>,a0
    6d48:	|  |            move.l 12(a0),d1
    6d4c:	|  |            move.l 44(sp),d0
    6d50:	|  |            lsl.l #3,d0
    6d52:	|  |            movea.l d1,a0
    6d54:	|  |            adda.l d0,a0
    6d56:	|  |            move.l (a0),d0
    6d58:	|  |            move.l d0,d1
    6d5a:	|  |            subq.l #1,d1
    6d5c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6d60:	|  |            clr.l 40(sp)
    6d64:	|  |     /----- bra.w 6ef4 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6d68:	|  |  /--|----> movea.l 19d5c <currentFloor>,a0
    6d6e:	|  |  |  |      move.l 4(a0),d1
    6d72:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6d78:	|  |  |  |      movea.l 12(a0),a0
    6d7c:	|  |  |  |      move.l 44(sp),d0
    6d80:	|  |  |  |      lsl.l #3,d0
    6d82:	|  |  |  |      adda.l d0,a0
    6d84:	|  |  |  |      movea.l 4(a0),a0
    6d88:	|  |  |  |      move.l 40(sp),d0
    6d8c:	|  |  |  |      add.l d0,d0
    6d8e:	|  |  |  |      add.l d0,d0
    6d90:	|  |  |  |      adda.l d0,a0
    6d92:	|  |  |  |      move.l (a0),d0
    6d94:	|  |  |  |      lsl.l #3,d0
    6d96:	|  |  |  |      movea.l d1,a0
    6d98:	|  |  |  |      adda.l d0,a0
    6d9a:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    6d9e:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6da4:	|  |  |  |      move.l 4(a0),d1
    6da8:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6dae:	|  |  |  |      movea.l 12(a0),a0
    6db2:	|  |  |  |      move.l 44(sp),d0
    6db6:	|  |  |  |      lsl.l #3,d0
    6db8:	|  |  |  |      adda.l d0,a0
    6dba:	|  |  |  |      movea.l 4(a0),a0
    6dbe:	|  |  |  |      move.l 40(sp),d0
    6dc2:	|  |  |  |      add.l d0,d0
    6dc4:	|  |  |  |      add.l d0,d0
    6dc6:	|  |  |  |      adda.l d0,a0
    6dc8:	|  |  |  |      move.l (a0),d0
    6dca:	|  |  |  |      lsl.l #3,d0
    6dcc:	|  |  |  |      movea.l d1,a0
    6dce:	|  |  |  |      adda.l d0,a0
    6dd0:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    6dd6:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6ddc:	|  |  |  |      move.l 4(a0),d1
    6de0:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6de6:	|  |  |  |      movea.l 12(a0),a0
    6dea:	|  |  |  |      move.l 44(sp),d0
    6dee:	|  |  |  |      lsl.l #3,d0
    6df0:	|  |  |  |      adda.l d0,a0
    6df2:	|  |  |  |      movea.l 4(a0),a0
    6df6:	|  |  |  |      move.l 36(sp),d0
    6dfa:	|  |  |  |      add.l d0,d0
    6dfc:	|  |  |  |      add.l d0,d0
    6dfe:	|  |  |  |      adda.l d0,a0
    6e00:	|  |  |  |      move.l (a0),d0
    6e02:	|  |  |  |      lsl.l #3,d0
    6e04:	|  |  |  |      movea.l d1,a0
    6e06:	|  |  |  |      adda.l d0,a0
    6e08:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    6e0c:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6e12:	|  |  |  |      move.l 4(a0),d1
    6e16:	|  |  |  |      movea.l 19d5c <currentFloor>,a0
    6e1c:	|  |  |  |      movea.l 12(a0),a0
    6e20:	|  |  |  |      move.l 44(sp),d0
    6e24:	|  |  |  |      lsl.l #3,d0
    6e26:	|  |  |  |      adda.l d0,a0
    6e28:	|  |  |  |      movea.l 4(a0),a0
    6e2c:	|  |  |  |      move.l 36(sp),d0
    6e30:	|  |  |  |      add.l d0,d0
    6e32:	|  |  |  |      add.l d0,d0
    6e34:	|  |  |  |      adda.l d0,a0
    6e36:	|  |  |  |      move.l (a0),d0
    6e38:	|  |  |  |      lsl.l #3,d0
    6e3a:	|  |  |  |      movea.l d1,a0
    6e3c:	|  |  |  |      adda.l d0,a0
    6e3e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    6e44:	|  |  |  |      movea.l 68(sp),a0
    6e48:	|  |  |  |      move.l (a0),d1
    6e4a:	|  |  |  |      movea.l 64(sp),a0
    6e4e:	|  |  |  |      move.l (a0),d0
    6e50:	|  |  |  |      move.l d1,-(sp)
    6e52:	|  |  |  |      move.l d0,-(sp)
    6e54:	|  |  |  |      move.l 24(sp),-(sp)
    6e58:	|  |  |  |      move.l 32(sp),-(sp)
    6e5c:	|  |  |  |      move.l 40(sp),-(sp)
    6e60:	|  |  |  |      move.l 48(sp),-(sp)
    6e64:	|  |  |  |      lea 28(sp),a0
    6e68:	|  |  |  |      move.l a0,-(sp)
    6e6a:	|  |  |  |      lea 36(sp),a0
    6e6e:	|  |  |  |      move.l a0,-(sp)
    6e70:	|  |  |  |      jsr 11d2a <closestPointOnLine>
    6e76:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    6e7a:	|  |  |  |      movea.l 64(sp),a0
    6e7e:	|  |  |  |      move.l (a0),d0
    6e80:	|  |  |  |      move.l 8(sp),d1
    6e84:	|  |  |  |      move.l d0,d2
    6e86:	|  |  |  |      sub.l d1,d2
    6e88:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    6e8c:	|  |  |  |      movea.l 68(sp),a0
    6e90:	|  |  |  |      move.l (a0),d0
    6e92:	|  |  |  |      move.l 4(sp),d1
    6e96:	|  |  |  |      move.l d0,d2
    6e98:	|  |  |  |      sub.l d1,d2
    6e9a:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    6e9e:	|  |  |  |      move.l 28(sp),-(sp)
    6ea2:	|  |  |  |      move.l 32(sp),-(sp)
    6ea6:	|  |  |  |      jsr 13888 <__mulsi3>
    6eac:	|  |  |  |      addq.l #8,sp
    6eae:	|  |  |  |      move.l d0,d2
    6eb0:	|  |  |  |      move.l 24(sp),-(sp)
    6eb4:	|  |  |  |      move.l 28(sp),-(sp)
    6eb8:	|  |  |  |      jsr 13888 <__mulsi3>
    6ebe:	|  |  |  |      addq.l #8,sp
    6ec0:	|  |  |  |      move.l d2,d1
    6ec2:	|  |  |  |      add.l d0,d1
    6ec4:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    6ec8:	|  |  |  |      move.l 12(sp),d2
    6ecc:	|  |  |  |      cmp.l 32(sp),d2
    6ed0:	|  |  |  |  /-- bge.s 6eea <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    6ed2:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    6ed8:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    6ede:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6ee4:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    6eea:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6ef0:	|  |  |  |      addq.l #1,40(sp)
    6ef4:	|  |  |  \----> movea.l 19d5c <currentFloor>,a0
    6efa:	|  |  |         move.l 12(a0),d1
    6efe:	|  |  |         move.l 44(sp),d0
    6f02:	|  |  |         lsl.l #3,d0
    6f04:	|  |  |         movea.l d1,a0
    6f06:	|  |  |         adda.l d0,a0
    6f08:	|  |  |         move.l (a0),d0
    6f0a:	|  |  |         cmp.l 40(sp),d0
    6f0e:	|  |  \-------- bgt.w 6d68 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6f12:	|  |            addq.l #1,44(sp)
    6f16:	|  \----------> movea.l 19d5c <currentFloor>,a0
    6f1c:	|               move.l 8(a0),d0
    6f20:	|               cmp.l 44(sp),d0
    6f24:	\-------------- bgt.w 6d42 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6f28:	                moveq #-1,d0
    6f2a:	                cmp.l 48(sp),d0
    6f2e:	            /-- bne.s 6f34 <handleClosestPoint+0x21e>
    6f30:	            |   clr.w d0
    6f32:	         /--|-- bra.s 6f4e <handleClosestPoint+0x238>
	*setX = gotX;
    6f34:	         |  \-> movea.l 64(sp),a0
    6f38:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    6f3c:	         |      movea.l 68(sp),a0
    6f40:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    6f44:	         |      movea.l 72(sp),a0
    6f48:	         |      move.l 48(sp),(a0)

	return TRUE;
    6f4c:	         |      moveq #1,d0
}
    6f4e:	         \----> move.l (sp)+,d2
    6f50:	                lea 56(sp),sp
    6f54:	                rts

00006f56 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6f56:	clr.l 19cc4 <personRegion+0x10>
	personRegion.sY = 0;
    6f5c:	clr.l 19cc8 <personRegion+0x14>
	personRegion.di = -1;
    6f62:	moveq #-1,d0
    6f64:	move.l d0,19ccc <personRegion+0x18>
	allScreenRegions = NULL;
    6f6a:	clr.l 19d54 <allScreenRegions>

	return TRUE;
    6f70:	moveq #1,d0
}
    6f72:	rts

00006f74 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6f74:	          subq.l #4,sp
    6f76:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    6f78:	          tst.l 12(sp)
    6f7c:	      /-- bne.s 6f84 <jumpPerson+0x10>
    6f7e:	      |   tst.l 16(sp)
    6f82:	/-----|-- beq.s 6ff8 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6f84:	|     \-> move.l 20(sp),-(sp)
    6f88:	|         jsr 6c1a <findPerson>
    6f8e:	|         addq.l #4,sp
    6f90:	|         move.l d0,4(sp)
    if (!moveMe) return;
    6f94:	|  /----- beq.s 6ffc <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6f96:	|  |      movea.l 4(sp),a0
    6f9a:	|  |      move.l 56(a0),d0
    6f9e:	|  |  /-- beq.s 6fb2 <jumpPerson+0x3e>
    6fa0:	|  |  |   movea.l 4(sp),a0
    6fa4:	|  |  |   move.l 56(a0),d0
    6fa8:	|  |  |   move.l d0,-(sp)
    6faa:	|  |  |   jsr 210e <abortFunction>
    6fb0:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    6fb2:	|  |  \-> movea.l 4(sp),a0
    6fb6:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    6fba:	|  |      movea.l 4(sp),a0
    6fbe:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    6fc2:	|  |      movea.l 4(sp),a0
    6fc6:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    6fca:	|  |      move.l 16(sp),-(sp)
    6fce:	|  |      jsr 1332e <__floatsisf>
    6fd4:	|  |      addq.l #4,sp
    6fd6:	|  |      move.l d0,d2
    6fd8:	|  |      move.l 12(sp),-(sp)
    6fdc:	|  |      jsr 1332e <__floatsisf>
    6fe2:	|  |      addq.l #4,sp
    6fe4:	|  |      move.l d2,-(sp)
    6fe6:	|  |      move.l d0,-(sp)
    6fe8:	|  |      move.l 12(sp),-(sp)
    6fec:	|  |      jsr 7362 <moveAndScale>
    6ff2:	|  |      lea 12(sp),sp
    6ff6:	|  |  /-- bra.s 6ffe <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6ff8:	\--|--|-> nop
    6ffa:	   |  +-- bra.s 6ffe <jumpPerson+0x8a>
    if (!moveMe) return;
    6ffc:	   \--|-> nop
}
    6ffe:	      \-> move.l (sp)+,d2
    7000:	          addq.l #4,sp
    7002:	          rts

00007004 <killAllPeople>:


void killAllPeople () {
    7004:	          subq.l #8,sp
    7006:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    7008:	   /----- bra.s 7074 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    700a:	/--|----> movea.l 19cb0 <allPeople>,a0
    7010:	|  |      move.l 56(a0),d0
    7014:	|  |  /-- beq.s 702a <killAllPeople+0x26>
    7016:	|  |  |   movea.l 19cb0 <allPeople>,a0
    701c:	|  |  |   move.l 56(a0),d0
    7020:	|  |  |   move.l d0,-(sp)
    7022:	|  |  |   jsr 210e <abortFunction>
    7028:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    702a:	|  |  \-> movea.l 19cb0 <allPeople>,a0
    7030:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    7034:	|  |      move.l 19cb0 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    703c:	|  |      movea.l 19cb0 <allPeople>,a0
    7042:	|  |      move.l 24(a0),d0
    7046:	|  |      move.l d0,19cb0 <allPeople>
		removeObjectType (killPeople -> thisType);
    704c:	|  |      movea.l 8(sp),a0
    7050:	|  |      move.l 102(a0),d0
    7054:	|  |      move.l d0,-(sp)
    7056:	|  |      jsr a07c <removeObjectType>
    705c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    705e:	|  |      move.l 8(sp),4(sp)
    7064:	|  |      move.l 19c50 <SysBase>,d0
    706a:	|  |      movea.l d0,a6
    706c:	|  |      movea.l 4(sp),a1
    7070:	|  |      jsr -690(a6)
	while (allPeople) {
    7074:	|  \----> move.l 19cb0 <allPeople>,d0
    707a:	\-------- bne.s 700a <killAllPeople+0x6>
	}
}
    707c:	          nop
    707e:	          nop
    7080:	          movea.l (sp)+,a6
    7082:	          addq.l #8,sp
    7084:	          rts

00007086 <killMostPeople>:

void killMostPeople() {
    7086:	          lea -12(sp),sp
    708a:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    708c:	          move.l #105648,12(sp)

    while (*lookyHere) {
    7094:	   /----- bra.w 711a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    7098:	/--|----> movea.l 12(sp),a0
    709c:	|  |      movea.l (a0),a0
    709e:	|  |      move.l 106(a0),d0
    70a2:	|  |      moveq #32,d1
    70a4:	|  |      and.l d1,d0
    70a6:	|  |  /-- beq.s 70b8 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    70a8:	|  |  |   movea.l 12(sp),a0
    70ac:	|  |  |   move.l (a0),d0
    70ae:	|  |  |   moveq #24,d1
    70b0:	|  |  |   add.l d0,d1
    70b2:	|  |  |   move.l d1,12(sp)
    70b6:	|  +--|-- bra.s 711a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    70b8:	|  |  \-> movea.l 12(sp),a0
    70bc:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    70c0:	|  |      movea.l 8(sp),a0
    70c4:	|  |      move.l 24(a0),d0
    70c8:	|  |      movea.l 12(sp),a0
    70cc:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    70ce:	|  |      movea.l 8(sp),a0
    70d2:	|  |      move.l 56(a0),d0
    70d6:	|  |  /-- beq.s 70ea <killMostPeople+0x64>
    70d8:	|  |  |   movea.l 8(sp),a0
    70dc:	|  |  |   move.l 56(a0),d0
    70e0:	|  |  |   move.l d0,-(sp)
    70e2:	|  |  |   jsr 210e <abortFunction>
    70e8:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    70ea:	|  |  \-> movea.l 8(sp),a0
    70ee:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    70f2:	|  |      movea.l 8(sp),a0
    70f6:	|  |      move.l 102(a0),d0
    70fa:	|  |      move.l d0,-(sp)
    70fc:	|  |      jsr a07c <removeObjectType>
    7102:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    7104:	|  |      move.l 8(sp),4(sp)
    710a:	|  |      move.l 19c50 <SysBase>,d0
    7110:	|  |      movea.l d0,a6
    7112:	|  |      movea.l 4(sp),a1
    7116:	|  |      jsr -690(a6)
    while (*lookyHere) {
    711a:	|  \----> movea.l 12(sp),a0
    711e:	|         move.l (a0),d0
    7120:	\-------- bne.w 7098 <killMostPeople+0x12>
        }
    }
}
    7124:	          nop
    7126:	          nop
    7128:	          movea.l (sp)+,a6
    712a:	          lea 12(sp),sp
    712e:	          rts

00007130 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    7130:	clr.l -(sp)
    7132:	move.l sp,d0
    7134:	addq.l #8,d0
    7136:	move.l d0,-(sp)
    7138:	jsr 5868 <setFrames>
    713e:	addq.l #8,sp
}
    7140:	nop
    7142:	rts

00007144 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7144:	          lea -12(sp),sp
    7148:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    714a:	          tst.l 20(sp)
    714e:	      /-- bne.s 715c <makeWalkingPerson+0x18>
    7150:	      |   tst.l 24(sp)
    7154:	      +-- bne.s 715c <makeWalkingPerson+0x18>
    7156:	      |   clr.w d0
    7158:	/-----|-- bra.w 72f4 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    715c:	|     \-> movea.l 19d5c <currentFloor>,a0
    7162:	|         move.l 8(a0),d0
    7166:	|     /-- bne.s 716e <makeWalkingPerson+0x2a>
    7168:	|     |   clr.w d0
    716a:	+-----|-- bra.w 72f4 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    716e:	|     \-> move.l 28(sp),-(sp)
    7172:	|         jsr 6c1a <findPerson>
    7178:	|         addq.l #4,sp
    717a:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    717e:	|     /-- bne.s 7186 <makeWalkingPerson+0x42>
    7180:	|     |   clr.w d0
    7182:	+-----|-- bra.w 72f4 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    7186:	|     \-> movea.l 12(sp),a0
    718a:	|         move.l 56(a0),d0
    718e:	|     /-- beq.s 71a2 <makeWalkingPerson+0x5e>
    7190:	|     |   movea.l 12(sp),a0
    7194:	|     |   move.l 56(a0),d0
    7198:	|     |   move.l d0,-(sp)
    719a:	|     |   jsr 210e <abortFunction>
    71a0:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    71a2:	|     \-> movea.l 12(sp),a0
    71a6:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    71aa:	|         movea.l 12(sp),a0
    71ae:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    71b4:	|         movea.l 12(sp),a0
    71b8:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    71be:	|         movea.l 12(sp),a0
    71c2:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    71c8:	|         movea.l 12(sp),a0
    71cc:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    71d2:	|         move.l 24(sp),-(sp)
    71d6:	|         move.l 24(sp),-(sp)
    71da:	|         jsr 1222c <inFloor>
    71e0:	|         addq.l #8,sp
    71e2:	|         movea.l 12(sp),a0
    71e6:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    71ea:	|         movea.l 12(sp),a0
    71ee:	|         move.l 48(a0),d0
    71f2:	|         moveq #-1,d1
    71f4:	|         cmp.l d0,d1
    71f6:	|     /-- bne.s 7226 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    71f8:	|     |   movea.w #48,a0
    71fc:	|     |   adda.l 12(sp),a0
    7200:	|     |   moveq #32,d1
    7202:	|     |   add.l 12(sp),d1
    7206:	|     |   moveq #28,d0
    7208:	|     |   add.l 12(sp),d0
    720c:	|     |   move.l a0,-(sp)
    720e:	|     |   move.l d1,-(sp)
    7210:	|     |   move.l d0,-(sp)
    7212:	|     |   jsr 6d16 <handleClosestPoint>
    7218:	|     |   lea 12(sp),sp
    721c:	|     |   tst.w d0
    721e:	|     +-- bne.s 7226 <makeWalkingPerson+0xe2>
    7220:	|     |   clr.w d0
    7222:	+-----|-- bra.w 72f4 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    7226:	|     \-> movea.l 12(sp),a0
    722a:	|         move.l 4(a0),d0
    722e:	|         move.l d0,-(sp)
    7230:	|         jsr 132c6 <__fixsfsi>
    7236:	|         addq.l #4,sp
    7238:	|         move.l d0,d2
    723a:	|         movea.l 12(sp),a0
    723e:	|         move.l (a0),d0
    7240:	|         move.l d0,-(sp)
    7242:	|         jsr 132c6 <__fixsfsi>
    7248:	|         addq.l #4,sp
    724a:	|         move.l d2,-(sp)
    724c:	|         move.l d0,-(sp)
    724e:	|         jsr 1222c <inFloor>
    7254:	|         addq.l #8,sp
    7256:	|         movea.l 12(sp),a0
    725a:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    725e:	|         movea.l 12(sp),a0
    7262:	|         move.l 44(a0),d0
    7266:	|         moveq #-1,d1
    7268:	|         cmp.l d0,d1
    726a:	|     /-- bne.s 72bc <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    726c:	|     |   movea.l 12(sp),a0
    7270:	|     |   move.l (a0),d0
    7272:	|     |   move.l d0,-(sp)
    7274:	|     |   jsr 132c6 <__fixsfsi>
    727a:	|     |   addq.l #4,sp
    727c:	|     |   move.l d0,8(sp)
    7280:	|     |   movea.l 12(sp),a0
    7284:	|     |   move.l 4(a0),d0
    7288:	|     |   move.l d0,-(sp)
    728a:	|     |   jsr 132c6 <__fixsfsi>
    7290:	|     |   addq.l #4,sp
    7292:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    7296:	|     |   moveq #44,d0
    7298:	|     |   add.l 12(sp),d0
    729c:	|     |   move.l d0,-(sp)
    729e:	|     |   lea 8(sp),a0
    72a2:	|     |   move.l a0,-(sp)
    72a4:	|     |   moveq #16,d0
    72a6:	|     |   add.l sp,d0
    72a8:	|     |   move.l d0,-(sp)
    72aa:	|     |   jsr 6d16 <handleClosestPoint>
    72b0:	|     |   lea 12(sp),sp
    72b4:	|     |   tst.w d0
    72b6:	|     +-- bne.s 72bc <makeWalkingPerson+0x178>
    72b8:	|     |   clr.w d0
    72ba:	+-----|-- bra.s 72f4 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    72bc:	|     \-> move.l 12(sp),-(sp)
    72c0:	|         jsr 6560 <doBorderStuff>
    72c6:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    72c8:	|         clr.l -(sp)
    72ca:	|         move.l 16(sp),-(sp)
    72ce:	|         jsr 83a8 <walkMe>
    72d4:	|         addq.l #8,sp
    72d6:	|         tst.w d0
    72d8:	|     /-- bne.s 72e4 <makeWalkingPerson+0x1a0>
    72da:	|     |   movea.l 12(sp),a0
    72de:	|     |   move.w 54(a0),d0
    72e2:	|  /--|-- beq.s 72f2 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    72e4:	|  |  \-> movea.l 12(sp),a0
    72e8:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    72ee:	|  |      moveq #1,d0
    72f0:	+--|----- bra.s 72f4 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    72f2:	|  \----> clr.w d0
	}
}
    72f4:	\-------> move.l (sp)+,d2
    72f6:	          lea 12(sp),sp
    72fa:	          rts

000072fc <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    72fc:	       lea -16(sp),sp
    7300:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    7302:	       moveq #12,d0
    7304:	       move.l d0,16(sp)
    7308:	       clr.l 12(sp)
    730c:	       move.l 19c50 <SysBase>,d0
    7312:	       movea.l d0,a6
    7314:	       move.l 16(sp),d0
    7318:	       move.l 12(sp),d1
    731c:	       jsr -684(a6)
    7320:	       move.l d0,8(sp)
    7324:	       move.l 8(sp),d0
    7328:	       move.l d0,4(sp)
    if(newAnim == 0) {
    732c:	   /-- bne.s 7340 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    732e:	   |   pea 160f4 <line.c.05397aaf+0x18e>
    7334:	   |   jsr 12ed6 <KPrintF>
    733a:	   |   addq.l #4,sp
        return NULL;    
    733c:	   |   moveq #0,d0
    733e:	/--|-- bra.s 735a <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    7340:	|  \-> movea.l 4(sp),a0
    7344:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    7346:	|      movea.l 4(sp),a0
    734a:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    734e:	|      movea.l 4(sp),a0
    7352:	|      clr.l 4(a0)
	return newAnim;
    7356:	|      move.l 4(sp),d0
}
    735a:	\----> movea.l (sp)+,a6
    735c:	       lea 16(sp),sp
    7360:	       rts

00007362 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    7362:	    move.l d2,-(sp)
	me->x = x;
    7364:	    movea.l 8(sp),a0
    7368:	    move.l 12(sp),(a0)
	me->y = y;
    736c:	    movea.l 8(sp),a0
    7370:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    7376:	    movea.l 8(sp),a0
    737a:	    move.l 106(a0),d0
    737e:	    moveq #2,d1
    7380:	    and.l d1,d0
    7382:	/-- bne.s 73da <moveAndScale+0x78>
    7384:	|   move.w 18140 <scaleDivide>,d0
    738a:	+-- beq.s 73da <moveAndScale+0x78>
    738c:	|   movea.l 8(sp),a0
    7390:	|   move.l 4(a0),d2
    7394:	|   move.w 1813e <scaleHorizon>,d0
    739a:	|   movea.w d0,a0
    739c:	|   move.l a0,-(sp)
    739e:	|   jsr 1332e <__floatsisf>
    73a4:	|   addq.l #4,sp
    73a6:	|   move.l d0,-(sp)
    73a8:	|   move.l d2,-(sp)
    73aa:	|   jsr 13622 <__subsf3>
    73b0:	|   addq.l #8,sp
    73b2:	|   move.l d0,d2
    73b4:	|   move.w 18140 <scaleDivide>,d0
    73ba:	|   movea.w d0,a0
    73bc:	|   move.l a0,-(sp)
    73be:	|   jsr 1332e <__floatsisf>
    73c4:	|   addq.l #4,sp
    73c6:	|   move.l d0,-(sp)
    73c8:	|   move.l d2,-(sp)
    73ca:	|   jsr 131da <__divsf3>
    73d0:	|   addq.l #8,sp
    73d2:	|   movea.l 8(sp),a0
    73d6:	|   move.l d0,20(a0)
}
    73da:	\-> nop
    73dc:	    move.l (sp)+,d2
    73de:	    rts

000073e0 <removeOneCharacter>:

void removeOneCharacter (int i) {
    73e0:	          lea -12(sp),sp
    73e4:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    73e6:	          move.l 20(sp),-(sp)
    73ea:	          jsr 6c1a <findPerson>
    73f0:	          addq.l #4,sp
    73f2:	          move.l d0,8(sp)

    if (p) {
    73f6:	/-------- beq.w 74a2 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    73fa:	|         move.l 19d58 <overRegion>,d0
    7400:	|         cmpi.l #105652,d0
    7406:	|     /-- bne.s 7424 <removeOneCharacter+0x44>
    7408:	|     |   movea.l 19d58 <overRegion>,a0
    740e:	|     |   move.l 28(a0),d1
    7412:	|     |   movea.l 8(sp),a0
    7416:	|     |   move.l 102(a0),d0
    741a:	|     |   cmp.l d1,d0
    741c:	|     +-- bne.s 7424 <removeOneCharacter+0x44>
            overRegion = NULL;
    741e:	|     |   clr.l 19d58 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    7424:	|     \-> movea.l 8(sp),a0
    7428:	|         move.l 56(a0),d0
    742c:	|     /-- beq.s 7440 <removeOneCharacter+0x60>
    742e:	|     |   movea.l 8(sp),a0
    7432:	|     |   move.l 56(a0),d0
    7436:	|     |   move.l d0,-(sp)
    7438:	|     |   jsr 210e <abortFunction>
    743e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    7440:	|     \-> movea.l 8(sp),a0
    7444:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    7448:	|         move.l #105648,12(sp)
    7450:	|     /-- bra.s 7460 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    7452:	|  /--|-> movea.l 12(sp),a0
    7456:	|  |  |   move.l (a0),d0
    7458:	|  |  |   moveq #24,d1
    745a:	|  |  |   add.l d0,d1
    745c:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    7460:	|  |  \-> movea.l 12(sp),a0
    7464:	|  |      move.l (a0),d0
    7466:	|  |      cmp.l 8(sp),d0
    746a:	|  \----- bne.s 7452 <removeOneCharacter+0x72>

        *killPeople = p->next;
    746c:	|         movea.l 8(sp),a0
    7470:	|         move.l 24(a0),d0
    7474:	|         movea.l 12(sp),a0
    7478:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    747a:	|         movea.l 8(sp),a0
    747e:	|         move.l 102(a0),d0
    7482:	|         move.l d0,-(sp)
    7484:	|         jsr a07c <removeObjectType>
    748a:	|         addq.l #4,sp
        FreeVec(p);
    748c:	|         move.l 8(sp),4(sp)
    7492:	|         move.l 19c50 <SysBase>,d0
    7498:	|         movea.l d0,a6
    749a:	|         movea.l 4(sp),a1
    749e:	|         jsr -690(a6)
    }
}
    74a2:	\-------> nop
    74a4:	          movea.l (sp)+,a6
    74a6:	          lea 12(sp),sp
    74aa:	          rts

000074ac <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    74ac:	       subq.l #8,sp
    74ae:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    74b0:	       movea.l 16(sp),a0
    74b4:	       movea.l 68(a0),a0
    74b8:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    74be:	       movea.l 16(sp),a0
    74c2:	       move.l 80(a0),d2
    74c6:	       move.l 4(sp),-(sp)
    74ca:	       pea b4 <_start+0xb4>
    74ce:	       jsr 13906 <__divsi3>
    74d4:	       addq.l #8,sp
    74d6:	       add.l d2,d0
    74d8:	       move.l d0,d1
    74da:	       addi.l #180,d1
    74e0:	       movea.l 16(sp),a0
    74e4:	       move.l 88(a0),d0
    74e8:	       move.l d1,d2
    74ea:	       add.l d0,d2
    74ec:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    74f0:	   /-- bra.s 74fa <rethinkAngle+0x4e>
    74f2:	/--|-> addi.l #-360,8(sp)
    74fa:	|  \-> cmpi.l #359,8(sp)
    7502:	\----- bgt.s 74f2 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    7504:	       move.l 4(sp),-(sp)
    7508:	       move.l 12(sp),-(sp)
    750c:	       jsr 13888 <__mulsi3>
    7512:	       addq.l #8,sp
    7514:	       pea 168 <decodeFilename+0x50>
    7518:	       move.l d0,-(sp)
    751a:	       jsr 13906 <__divsi3>
    7520:	       addq.l #8,sp
    7522:	       movea.l 16(sp),a0
    7526:	       move.l d0,94(a0)
}
    752a:	       nop
    752c:	       move.l (sp)+,d2
    752e:	       addq.l #8,sp
    7530:	       rts

00007532 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    7532:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    7534:	          movea.l 8(sp),a0
    7538:	          move.l 8(a0),d0
    753c:	          move.l 12(sp),-(sp)
    7540:	          move.l d0,-(sp)
    7542:	          jsr 8d0 <put2bytes>
    7548:	          addq.l #8,sp
	if (p -> numFrames) {
    754a:	          movea.l 8(sp),a0
    754e:	          move.l 8(a0),d0
    7552:	/-------- beq.w 75f6 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    7556:	|         movea.l 8(sp),a0
    755a:	|         movea.l (a0),a0
    755c:	|         move.l (a0),d0
    755e:	|         move.l 12(sp),-(sp)
    7562:	|         move.l d0,-(sp)
    7564:	|         jsr 958 <put4bytes>
    756a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    756c:	|         clr.l (sp)
    756e:	|     /-- bra.s 75e8 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    7570:	|  /--|-> movea.l 8(sp),a0
    7574:	|  |  |   movea.l 4(a0),a0
    7578:	|  |  |   move.l (sp),d1
    757a:	|  |  |   move.l d1,d0
    757c:	|  |  |   add.l d0,d0
    757e:	|  |  |   add.l d1,d0
    7580:	|  |  |   add.l d0,d0
    7582:	|  |  |   add.l d0,d0
    7584:	|  |  |   adda.l d0,a0
    7586:	|  |  |   move.l (a0),d0
    7588:	|  |  |   move.l 12(sp),-(sp)
    758c:	|  |  |   move.l d0,-(sp)
    758e:	|  |  |   jsr 958 <put4bytes>
    7594:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    7596:	|  |  |   movea.l 8(sp),a0
    759a:	|  |  |   movea.l 4(a0),a0
    759e:	|  |  |   move.l (sp),d1
    75a0:	|  |  |   move.l d1,d0
    75a2:	|  |  |   add.l d0,d0
    75a4:	|  |  |   add.l d1,d0
    75a6:	|  |  |   add.l d0,d0
    75a8:	|  |  |   add.l d0,d0
    75aa:	|  |  |   adda.l d0,a0
    75ac:	|  |  |   move.l 4(a0),d0
    75b0:	|  |  |   move.l 12(sp),-(sp)
    75b4:	|  |  |   move.l d0,-(sp)
    75b6:	|  |  |   jsr 958 <put4bytes>
    75bc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    75be:	|  |  |   movea.l 8(sp),a0
    75c2:	|  |  |   movea.l 4(a0),a0
    75c6:	|  |  |   move.l (sp),d1
    75c8:	|  |  |   move.l d1,d0
    75ca:	|  |  |   add.l d0,d0
    75cc:	|  |  |   add.l d1,d0
    75ce:	|  |  |   add.l d0,d0
    75d0:	|  |  |   add.l d0,d0
    75d2:	|  |  |   adda.l d0,a0
    75d4:	|  |  |   move.l 8(a0),d0
    75d8:	|  |  |   move.l 12(sp),-(sp)
    75dc:	|  |  |   move.l d0,-(sp)
    75de:	|  |  |   jsr 958 <put4bytes>
    75e4:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    75e6:	|  |  |   addq.l #1,(sp)
    75e8:	|  |  \-> movea.l 8(sp),a0
    75ec:	|  |      move.l 8(a0),d0
    75f0:	|  |      cmp.l (sp),d0
    75f2:	|  \----- bgt.w 7570 <saveAnim+0x3e>
		}
	}
	return TRUE;
    75f6:	\-------> moveq #1,d0
}
    75f8:	          addq.l #4,sp
    75fa:	          rts

000075fc <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    75fc:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    75fe:	             movea.l 8(sp),a0
    7602:	             move.l 4(a0),d0
    7606:	             move.l 12(sp),-(sp)
    760a:	             move.l d0,-(sp)
    760c:	             jsr 8d0 <put2bytes>
    7612:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7614:	             clr.l (sp)
    7616:	   /-------- bra.s 7642 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    7618:	/--|-------> movea.l 8(sp),a0
    761c:	|  |         move.l (a0),d1
    761e:	|  |         move.l (sp),d0
    7620:	|  |         add.l d0,d0
    7622:	|  |         add.l d0,d0
    7624:	|  |         movea.l d1,a0
    7626:	|  |         adda.l d0,a0
    7628:	|  |         move.l (a0),d0
    762a:	|  |         move.l 12(sp),-(sp)
    762e:	|  |         move.l d0,-(sp)
    7630:	|  |         jsr 7532 <saveAnim>
    7636:	|  |         addq.l #8,sp
    7638:	|  |         tst.w d0
    763a:	|  |     /-- bne.s 7640 <saveCostume+0x44>
    763c:	|  |     |   clr.w d0
    763e:	|  |  /--|-- bra.s 7656 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7640:	|  |  |  \-> addq.l #1,(sp)
    7642:	|  \--|----> movea.l 8(sp),a0
    7646:	|     |      move.l 4(a0),d1
    764a:	|     |      move.l d1,d0
    764c:	|     |      add.l d0,d0
    764e:	|     |      add.l d1,d0
    7650:	|     |      cmp.l (sp),d0
    7652:	\-----|----- bgt.s 7618 <saveCostume+0x1c>
	}

	return TRUE;
    7654:	      |      moveq #1,d0
}
    7656:	      \----> addq.l #4,sp
    7658:	             rts

0000765a <savePeople>:

BOOL savePeople (BPTR fp) {
    765a:	             lea -144(sp),sp
    765e:	             move.l a6,-(sp)
    7660:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    7662:	             move.l 19cb0 <allPeople>,148(sp)
	int countPeople = 0, a;
    766a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    766e:	             move.w 1813e <scaleHorizon>,d0
    7674:	             movea.w d0,a0
    7676:	             move.l 156(sp),-(sp)
    767a:	             move.l a0,-(sp)
    767c:	             jsr a9c <putSigned>
    7682:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    7684:	             move.w 18140 <scaleDivide>,d0
    768a:	             movea.w d0,a0
    768c:	             move.l 156(sp),-(sp)
    7690:	             move.l a0,-(sp)
    7692:	             jsr a9c <putSigned>
    7698:	             addq.l #8,sp

	while (me) {
    769a:	         /-- bra.s 76aa <savePeople+0x50>
		countPeople ++;
    769c:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    76a0:	      |  |   movea.l 148(sp),a0
    76a4:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    76aa:	      |  \-> tst.l 148(sp)
    76ae:	      \----- bne.s 769c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    76b0:	             move.l 156(sp),-(sp)
    76b4:	             move.l 148(sp),-(sp)
    76b8:	             jsr 8d0 <put2bytes>
    76be:	             addq.l #8,sp

	me = allPeople;
    76c0:	             move.l 19cb0 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    76c8:	             clr.l 140(sp)
    76cc:	   /-------- bra.w 7b24 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    76d0:	/--|-------> movea.l 148(sp),a0
    76d4:	|  |         move.l (a0),d0
    76d6:	|  |         move.l 156(sp),-(sp)
    76da:	|  |         move.l d0,-(sp)
    76dc:	|  |         jsr a46 <putFloat>
    76e2:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    76e4:	|  |         movea.l 148(sp),a0
    76e8:	|  |         move.l 4(a0),d0
    76ec:	|  |         move.l 156(sp),-(sp)
    76f0:	|  |         move.l d0,-(sp)
    76f2:	|  |         jsr a46 <putFloat>
    76f8:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    76fa:	|  |         movea.l 148(sp),a0
    76fe:	|  |         move.l 68(a0),d0
    7702:	|  |         move.l 156(sp),-(sp)
    7706:	|  |         move.l d0,-(sp)
    7708:	|  |         jsr 75fc <saveCostume>
    770e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    7710:	|  |         movea.l 148(sp),a0
    7714:	|  |         move.l 60(a0),d0
    7718:	|  |         move.l 156(sp),-(sp)
    771c:	|  |         move.l d0,-(sp)
    771e:	|  |         jsr 7532 <saveAnim>
    7724:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    7726:	|  |         move.l 156(sp),136(sp)
    772c:	|  |         movea.l 148(sp),a0
    7730:	|  |         move.l 60(a0),d1
    7734:	|  |         movea.l 148(sp),a0
    7738:	|  |         move.l 64(a0),d0
    773c:	|  |         cmp.l d1,d0
    773e:	|  |         seq d0
    7740:	|  |         neg.b d0
    7742:	|  |         move.b d0,d0
    7744:	|  |         andi.l #255,d0
    774a:	|  |         move.l d0,132(sp)
    774e:	|  |         move.l 19c58 <DOSBase>,d0
    7754:	|  |         movea.l d0,a6
    7756:	|  |         move.l 136(sp),d1
    775a:	|  |         move.l 132(sp),d2
    775e:	|  |         jsr -312(a6)
    7762:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    7766:	|  |         movea.l 148(sp),a0
    776a:	|  |         move.l 20(a0),d0
    776e:	|  |         move.l 156(sp),-(sp)
    7772:	|  |         move.l d0,-(sp)
    7774:	|  |         jsr a46 <putFloat>
    777a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    777c:	|  |         movea.l 148(sp),a0
    7780:	|  |         move.l 106(a0),d0
    7784:	|  |         move.l 156(sp),-(sp)
    7788:	|  |         move.l d0,-(sp)
    778a:	|  |         jsr 8d0 <put2bytes>
    7790:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    7792:	|  |         movea.l 148(sp),a0
    7796:	|  |         move.l 8(a0),d0
    779a:	|  |         move.l 156(sp),-(sp)
    779e:	|  |         move.l d0,-(sp)
    77a0:	|  |         jsr 8d0 <put2bytes>
    77a6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    77a8:	|  |         movea.l 148(sp),a0
    77ac:	|  |         move.l 28(a0),d0
    77b0:	|  |         move.l 156(sp),-(sp)
    77b4:	|  |         move.l d0,-(sp)
    77b6:	|  |         jsr 8d0 <put2bytes>
    77bc:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    77be:	|  |         movea.l 148(sp),a0
    77c2:	|  |         move.l 32(a0),d0
    77c6:	|  |         move.l 156(sp),-(sp)
    77ca:	|  |         move.l d0,-(sp)
    77cc:	|  |         jsr 8d0 <put2bytes>
    77d2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    77d4:	|  |         movea.l 148(sp),a0
    77d8:	|  |         move.l 36(a0),d0
    77dc:	|  |         move.l 156(sp),-(sp)
    77e0:	|  |         move.l d0,-(sp)
    77e2:	|  |         jsr 8d0 <put2bytes>
    77e8:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    77ea:	|  |         movea.l 148(sp),a0
    77ee:	|  |         move.l 40(a0),d0
    77f2:	|  |         move.l 156(sp),-(sp)
    77f6:	|  |         move.l d0,-(sp)
    77f8:	|  |         jsr 8d0 <put2bytes>
    77fe:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    7800:	|  |         movea.l 148(sp),a0
    7804:	|  |         move.l 72(a0),d0
    7808:	|  |         move.l 156(sp),-(sp)
    780c:	|  |         move.l d0,-(sp)
    780e:	|  |         jsr 8d0 <put2bytes>
    7814:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    7816:	|  |         movea.l 148(sp),a0
    781a:	|  |         move.l 76(a0),d0
    781e:	|  |         move.l 156(sp),-(sp)
    7822:	|  |         move.l d0,-(sp)
    7824:	|  |         jsr 8d0 <put2bytes>
    782a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    782c:	|  |         movea.l 148(sp),a0
    7830:	|  |         move.l 16(a0),d0
    7834:	|  |         move.l 156(sp),-(sp)
    7838:	|  |         move.l d0,-(sp)
    783a:	|  |         jsr 8d0 <put2bytes>
    7840:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    7842:	|  |         movea.l 148(sp),a0
    7846:	|  |         move.l 110(a0),d0
    784a:	|  |         move.l 156(sp),-(sp)
    784e:	|  |         move.l d0,-(sp)
    7850:	|  |         jsr 8d0 <put2bytes>
    7856:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    7858:	|  |         movea.l 148(sp),a0
    785c:	|  |         move.l 12(a0),d0
    7860:	|  |         move.l d0,d0
    7862:	|  |         movea.w d0,a0
    7864:	|  |         move.l 156(sp),-(sp)
    7868:	|  |         move.l a0,-(sp)
    786a:	|  |         jsr a9c <putSigned>
    7870:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    7872:	|  |         move.l 156(sp),124(sp)
    7878:	|  |         movea.l 148(sp),a0
    787c:	|  |         move.w 92(a0),d0
    7880:	|  |         movea.w d0,a0
    7882:	|  |         move.l a0,120(sp)
    7886:	|  |         move.l 19c58 <DOSBase>,d0
    788c:	|  |         movea.l d0,a6
    788e:	|  |         move.l 124(sp),d1
    7892:	|  |         move.l 120(sp),d2
    7896:	|  |         jsr -312(a6)
    789a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    789e:	|  |         move.l 156(sp),112(sp)
    78a4:	|  |         movea.l 148(sp),a0
    78a8:	|  |         move.w 52(a0),d0
    78ac:	|  |         movea.w d0,a0
    78ae:	|  |         move.l a0,108(sp)
    78b2:	|  |         move.l 19c58 <DOSBase>,d0
    78b8:	|  |         movea.l d0,a6
    78ba:	|  |         move.l 112(sp),d1
    78be:	|  |         move.l 108(sp),d2
    78c2:	|  |         jsr -312(a6)
    78c6:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    78ca:	|  |         move.l 156(sp),100(sp)
    78d0:	|  |         movea.l 148(sp),a0
    78d4:	|  |         move.w 54(a0),d0
    78d8:	|  |         movea.w d0,a0
    78da:	|  |         move.l a0,96(sp)
    78de:	|  |         move.l 19c58 <DOSBase>,d0
    78e4:	|  |         movea.l d0,a6
    78e6:	|  |         move.l 100(sp),d1
    78ea:	|  |         move.l 96(sp),d2
    78ee:	|  |         jsr -312(a6)
    78f2:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    78f6:	|  |         movea.l 148(sp),a0
    78fa:	|  |         move.l 56(a0),d0
    78fe:	|  |  /----- beq.s 793c <savePeople+0x2e2>
			FPutC (fp, 1);
    7900:	|  |  |      move.l 156(sp),76(sp)
    7906:	|  |  |      moveq #1,d0
    7908:	|  |  |      move.l d0,72(sp)
    790c:	|  |  |      move.l 19c58 <DOSBase>,d0
    7912:	|  |  |      movea.l d0,a6
    7914:	|  |  |      move.l 76(sp),d1
    7918:	|  |  |      move.l 72(sp),d2
    791c:	|  |  |      jsr -312(a6)
    7920:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    7924:	|  |  |      movea.l 148(sp),a0
    7928:	|  |  |      move.l 56(a0),d0
    792c:	|  |  |      move.l 156(sp),-(sp)
    7930:	|  |  |      move.l d0,-(sp)
    7932:	|  |  |      jsr 8aca <saveFunction>
    7938:	|  |  |      addq.l #8,sp
    793a:	|  |  |  /-- bra.s 7960 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    793c:	|  |  \--|-> move.l 156(sp),88(sp)
    7942:	|  |     |   moveq #1,d0
    7944:	|  |     |   move.l d0,84(sp)
    7948:	|  |     |   move.l 19c58 <DOSBase>,d0
    794e:	|  |     |   movea.l d0,a6
    7950:	|  |     |   move.l 88(sp),d1
    7954:	|  |     |   move.l 84(sp),d2
    7958:	|  |     |   jsr -312(a6)
    795c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    7960:	|  |     \-> movea.l 148(sp),a0
    7964:	|  |         move.l 94(a0),d0
    7968:	|  |         move.l 156(sp),-(sp)
    796c:	|  |         move.l d0,-(sp)
    796e:	|  |         jsr 8d0 <put2bytes>
    7974:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7976:	|  |         movea.l 148(sp),a0
    797a:	|  |         move.l 80(a0),d0
    797e:	|  |         move.l 156(sp),-(sp)
    7982:	|  |         move.l d0,-(sp)
    7984:	|  |         jsr 8d0 <put2bytes>
    798a:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    798c:	|  |         movea.l 148(sp),a0
    7990:	|  |         move.l 88(a0),d0
    7994:	|  |         move.l 156(sp),-(sp)
    7998:	|  |         move.l d0,-(sp)
    799a:	|  |         jsr 8d0 <put2bytes>
    79a0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    79a2:	|  |         movea.l 148(sp),a0
    79a6:	|  |         move.l 84(a0),d0
    79aa:	|  |         move.l 156(sp),-(sp)
    79ae:	|  |         move.l d0,-(sp)
    79b0:	|  |         jsr 8d0 <put2bytes>
    79b6:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    79b8:	|  |         movea.l 148(sp),a0
    79bc:	|  |         move.l 98(a0),d0
    79c0:	|  |         move.l d0,d0
    79c2:	|  |         movea.w d0,a0
    79c4:	|  |         move.l 156(sp),-(sp)
    79c8:	|  |         move.l a0,-(sp)
    79ca:	|  |         jsr a9c <putSigned>
    79d0:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    79d2:	|  |         movea.l 148(sp),a0
    79d6:	|  |         move.l 44(a0),d0
    79da:	|  |         move.l d0,d0
    79dc:	|  |         movea.w d0,a0
    79de:	|  |         move.l 156(sp),-(sp)
    79e2:	|  |         move.l a0,-(sp)
    79e4:	|  |         jsr a9c <putSigned>
    79ea:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    79ec:	|  |         movea.l 148(sp),a0
    79f0:	|  |         move.l 48(a0),d0
    79f4:	|  |         move.l d0,d0
    79f6:	|  |         movea.w d0,a0
    79f8:	|  |         move.l 156(sp),-(sp)
    79fc:	|  |         move.l a0,-(sp)
    79fe:	|  |         jsr a9c <putSigned>
    7a04:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7a06:	|  |         move.l 156(sp),64(sp)
    7a0c:	|  |         movea.l 148(sp),a0
    7a10:	|  |         move.b 114(a0),d0
    7a14:	|  |         move.b d0,d0
    7a16:	|  |         andi.l #255,d0
    7a1c:	|  |         move.l d0,60(sp)
    7a20:	|  |         move.l 19c58 <DOSBase>,d0
    7a26:	|  |         movea.l d0,a6
    7a28:	|  |         move.l 64(sp),d1
    7a2c:	|  |         move.l 60(sp),d2
    7a30:	|  |         jsr -312(a6)
    7a34:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7a38:	|  |         move.l 156(sp),52(sp)
    7a3e:	|  |         movea.l 148(sp),a0
    7a42:	|  |         move.b 115(a0),d0
    7a46:	|  |         move.b d0,d0
    7a48:	|  |         andi.l #255,d0
    7a4e:	|  |         move.l d0,48(sp)
    7a52:	|  |         move.l 19c58 <DOSBase>,d0
    7a58:	|  |         movea.l d0,a6
    7a5a:	|  |         move.l 52(sp),d1
    7a5e:	|  |         move.l 48(sp),d2
    7a62:	|  |         jsr -312(a6)
    7a66:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7a6a:	|  |         move.l 156(sp),40(sp)
    7a70:	|  |         movea.l 148(sp),a0
    7a74:	|  |         move.b 116(a0),d0
    7a78:	|  |         move.b d0,d0
    7a7a:	|  |         andi.l #255,d0
    7a80:	|  |         move.l d0,36(sp)
    7a84:	|  |         move.l 19c58 <DOSBase>,d0
    7a8a:	|  |         movea.l d0,a6
    7a8c:	|  |         move.l 40(sp),d1
    7a90:	|  |         move.l 36(sp),d2
    7a94:	|  |         jsr -312(a6)
    7a98:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7a9c:	|  |         move.l 156(sp),28(sp)
    7aa2:	|  |         movea.l 148(sp),a0
    7aa6:	|  |         move.b 117(a0),d0
    7aaa:	|  |         move.b d0,d0
    7aac:	|  |         andi.l #255,d0
    7ab2:	|  |         move.l d0,24(sp)
    7ab6:	|  |         move.l 19c58 <DOSBase>,d0
    7abc:	|  |         movea.l d0,a6
    7abe:	|  |         move.l 28(sp),d1
    7ac2:	|  |         move.l 24(sp),d2
    7ac6:	|  |         jsr -312(a6)
    7aca:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7ace:	|  |         move.l 156(sp),16(sp)
    7ad4:	|  |         movea.l 148(sp),a0
    7ad8:	|  |         move.b 118(a0),d0
    7adc:	|  |         move.b d0,d0
    7ade:	|  |         andi.l #255,d0
    7ae4:	|  |         move.l d0,12(sp)
    7ae8:	|  |         move.l 19c58 <DOSBase>,d0
    7aee:	|  |         movea.l d0,a6
    7af0:	|  |         move.l 16(sp),d1
    7af4:	|  |         move.l 12(sp),d2
    7af8:	|  |         jsr -312(a6)
    7afc:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    7b00:	|  |         movea.l 148(sp),a0
    7b04:	|  |         move.l 102(a0),d0
    7b08:	|  |         move.l 156(sp),-(sp)
    7b0c:	|  |         move.l d0,-(sp)
    7b0e:	|  |         jsr a11c <saveObjectRef>
    7b14:	|  |         addq.l #8,sp

		me = me -> next;
    7b16:	|  |         movea.l 148(sp),a0
    7b1a:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    7b20:	|  |         addq.l #1,140(sp)
    7b24:	|  \-------> movea.l 140(sp),a0
    7b28:	|            cmpa.l 144(sp),a0
    7b2c:	\----------- blt.w 76d0 <savePeople+0x76>
	}
	return TRUE;
    7b30:	             moveq #1,d0
}
    7b32:	             move.l (sp)+,d2
    7b34:	             movea.l (sp)+,a6
    7b36:	             lea 144(sp),sp
    7b3a:	             rts

00007b3c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    7b3c:	movea.l 4(sp),a0
    7b40:	move.l 8(sp),(a0)
}
    7b44:	nop
    7b46:	rts

00007b48 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7b48:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7b4a:	       move.l 12(sp),-(sp)
    7b4e:	       jsr 6c1a <findPerson>
    7b54:	       addq.l #4,sp
    7b56:	       move.l d0,(sp)
	if (! moveMe) return;
    7b58:	/----- beq.s 7b6c <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7b5a:	|      move.l 8(sp),-(sp)
    7b5e:	|      move.l 4(sp),-(sp)
    7b62:	|      jsr 7b72 <setMyDrawMode>
    7b68:	|      addq.l #8,sp
    7b6a:	|  /-- bra.s 7b6e <setDrawMode+0x26>
	if (! moveMe) return;
    7b6c:	\--|-> nop
}
    7b6e:	   \-> addq.l #4,sp
    7b70:	       rts

00007b72 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7b72:	       moveq #19,d0
    7b74:	       cmp.l 8(sp),d0
    7b78:	/----- bcs.w 8050 <setMyDrawMode+0x4de>
    7b7c:	|      move.l 8(sp),d0
    7b80:	|      add.l d0,d0
    7b82:	|      movea.l d0,a0
    7b84:	|      adda.l #31632,a0
    7b8a:	|      move.w (a0),d0
    7b8c:	|      jmp (7b90 <setMyDrawMode+0x1e>,pc,d0.w)
    7b90:	|      .short 0x04c0
    7b92:	|      ori.l #6684712,-(a4)
    7b98:	|      btst d0,-(a0)
    7b9a:	|      bchg d0,(a6)+
    7b9c:	|      bclr d0,(a4)+
    7b9e:	|      bset d0,(a2)+
    7ba0:	|      andi.b #84,(a6)
    7ba4:	|      andi.l #55575312,(a2)
    7baa:	|      .short 0x02d0
    7bac:	|      bclr d1,(a0)
    7bae:	|      .short 0x044a
    7bb0:	|      .short 0x040c
    7bb2:	|      movep.l d1,1158(a6)
    7bb6:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7bb8:	|      movea.l 4(sp),a0
    7bbc:	|      clr.b 116(a0)
    7bc0:	|      movea.l 4(sp),a0
    7bc4:	|      move.b 116(a0),d0
    7bc8:	|      movea.l 4(sp),a0
    7bcc:	|      move.b d0,115(a0)
    7bd0:	|      movea.l 4(sp),a0
    7bd4:	|      move.b 115(a0),d0
    7bd8:	|      movea.l 4(sp),a0
    7bdc:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    7be0:	|      movea.l 4(sp),a0
    7be4:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7be8:	|      movea.l 4(sp),a0
    7bec:	|      move.b #64,118(a0)
			break;
    7bf2:	|  /-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7bf6:	|  |   movea.l 4(sp),a0
    7bfa:	|  |   clr.b 116(a0)
    7bfe:	|  |   movea.l 4(sp),a0
    7c02:	|  |   move.b 116(a0),d0
    7c06:	|  |   movea.l 4(sp),a0
    7c0a:	|  |   move.b d0,115(a0)
    7c0e:	|  |   movea.l 4(sp),a0
    7c12:	|  |   move.b 115(a0),d0
    7c16:	|  |   movea.l 4(sp),a0
    7c1a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7c1e:	|  |   movea.l 4(sp),a0
    7c22:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    7c26:	|  |   movea.l 4(sp),a0
    7c2a:	|  |   move.b #-128,118(a0)
			break;
    7c30:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7c34:	|  |   movea.l 4(sp),a0
    7c38:	|  |   clr.b 116(a0)
    7c3c:	|  |   movea.l 4(sp),a0
    7c40:	|  |   move.b 116(a0),d0
    7c44:	|  |   movea.l 4(sp),a0
    7c48:	|  |   move.b d0,115(a0)
    7c4c:	|  |   movea.l 4(sp),a0
    7c50:	|  |   move.b 115(a0),d0
    7c54:	|  |   movea.l 4(sp),a0
    7c58:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7c5c:	|  |   movea.l 4(sp),a0
    7c60:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    7c64:	|  |   movea.l 4(sp),a0
    7c68:	|  |   move.b #-64,118(a0)
			break;
    7c6e:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7c72:	|  |   movea.l 4(sp),a0
    7c76:	|  |   clr.b 116(a0)
    7c7a:	|  |   movea.l 4(sp),a0
    7c7e:	|  |   move.b 116(a0),d0
    7c82:	|  |   movea.l 4(sp),a0
    7c86:	|  |   move.b d0,115(a0)
    7c8a:	|  |   movea.l 4(sp),a0
    7c8e:	|  |   move.b 115(a0),d0
    7c92:	|  |   movea.l 4(sp),a0
    7c96:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7c9a:	|  |   movea.l 4(sp),a0
    7c9e:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    7ca2:	|  |   movea.l 4(sp),a0
    7ca6:	|  |   move.b #-2,118(a0)
			break;
    7cac:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7cb0:	|  |   movea.l 4(sp),a0
    7cb4:	|  |   clr.b 116(a0)
    7cb8:	|  |   movea.l 4(sp),a0
    7cbc:	|  |   move.b 116(a0),d0
    7cc0:	|  |   movea.l 4(sp),a0
    7cc4:	|  |   move.b d0,115(a0)
    7cc8:	|  |   movea.l 4(sp),a0
    7ccc:	|  |   move.b 115(a0),d0
    7cd0:	|  |   movea.l 4(sp),a0
    7cd4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7cd8:	|  |   movea.l 4(sp),a0
    7cdc:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7ce2:	|  |   movea.l 4(sp),a0
    7ce6:	|  |   clr.b 118(a0)
			break;
    7cea:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7cee:	|  |   movea.l 4(sp),a0
    7cf2:	|  |   clr.b 116(a0)
    7cf6:	|  |   movea.l 4(sp),a0
    7cfa:	|  |   move.b 116(a0),d0
    7cfe:	|  |   movea.l 4(sp),a0
    7d02:	|  |   move.b d0,115(a0)
    7d06:	|  |   movea.l 4(sp),a0
    7d0a:	|  |   move.b 115(a0),d0
    7d0e:	|  |   movea.l 4(sp),a0
    7d12:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7d16:	|  |   movea.l 4(sp),a0
    7d1a:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7d20:	|  |   movea.l 4(sp),a0
    7d24:	|  |   clr.b 118(a0)
			break;
    7d28:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7d2c:	|  |   movea.l 4(sp),a0
    7d30:	|  |   clr.b 116(a0)
    7d34:	|  |   movea.l 4(sp),a0
    7d38:	|  |   move.b 116(a0),d0
    7d3c:	|  |   movea.l 4(sp),a0
    7d40:	|  |   move.b d0,115(a0)
    7d44:	|  |   movea.l 4(sp),a0
    7d48:	|  |   move.b 115(a0),d0
    7d4c:	|  |   movea.l 4(sp),a0
    7d50:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7d54:	|  |   movea.l 4(sp),a0
    7d58:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7d5e:	|  |   movea.l 4(sp),a0
    7d62:	|  |   clr.b 118(a0)
			break;
    7d66:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7d6a:	|  |   movea.l 4(sp),a0
    7d6e:	|  |   clr.b 116(a0)
    7d72:	|  |   movea.l 4(sp),a0
    7d76:	|  |   move.b 116(a0),d0
    7d7a:	|  |   movea.l 4(sp),a0
    7d7e:	|  |   move.b d0,115(a0)
    7d82:	|  |   movea.l 4(sp),a0
    7d86:	|  |   move.b 115(a0),d0
    7d8a:	|  |   movea.l 4(sp),a0
    7d8e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7d92:	|  |   movea.l 4(sp),a0
    7d96:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7d9a:	|  |   movea.l 4(sp),a0
    7d9e:	|  |   clr.b 118(a0)
			break;
    7da2:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7da6:	|  |   movea.l 4(sp),a0
    7daa:	|  |   clr.b 116(a0)
    7dae:	|  |   movea.l 4(sp),a0
    7db2:	|  |   move.b 116(a0),d0
    7db6:	|  |   movea.l 4(sp),a0
    7dba:	|  |   move.b d0,115(a0)
    7dbe:	|  |   movea.l 4(sp),a0
    7dc2:	|  |   move.b 115(a0),d0
    7dc6:	|  |   movea.l 4(sp),a0
    7dca:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7dce:	|  |   movea.l 4(sp),a0
    7dd2:	|  |   st 117(a0)
			moveMe->transparency = 64;
    7dd6:	|  |   movea.l 4(sp),a0
    7dda:	|  |   move.b #64,118(a0)
			break;
    7de0:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7de4:	|  |   movea.l 4(sp),a0
    7de8:	|  |   clr.b 116(a0)
    7dec:	|  |   movea.l 4(sp),a0
    7df0:	|  |   move.b 116(a0),d0
    7df4:	|  |   movea.l 4(sp),a0
    7df8:	|  |   move.b d0,115(a0)
    7dfc:	|  |   movea.l 4(sp),a0
    7e00:	|  |   move.b 115(a0),d0
    7e04:	|  |   movea.l 4(sp),a0
    7e08:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7e0c:	|  |   movea.l 4(sp),a0
    7e10:	|  |   st 117(a0)
			moveMe->transparency = 128;
    7e14:	|  |   movea.l 4(sp),a0
    7e18:	|  |   move.b #-128,118(a0)
			break;
    7e1e:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7e22:	|  |   movea.l 4(sp),a0
    7e26:	|  |   clr.b 116(a0)
    7e2a:	|  |   movea.l 4(sp),a0
    7e2e:	|  |   move.b 116(a0),d0
    7e32:	|  |   movea.l 4(sp),a0
    7e36:	|  |   move.b d0,115(a0)
    7e3a:	|  |   movea.l 4(sp),a0
    7e3e:	|  |   move.b 115(a0),d0
    7e42:	|  |   movea.l 4(sp),a0
    7e46:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7e4a:	|  |   movea.l 4(sp),a0
    7e4e:	|  |   st 117(a0)
			moveMe->transparency = 192;
    7e52:	|  |   movea.l 4(sp),a0
    7e56:	|  |   move.b #-64,118(a0)
			break;
    7e5c:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7e60:	|  |   movea.l 4(sp),a0
    7e64:	|  |   move.b #-128,116(a0)
    7e6a:	|  |   movea.l 4(sp),a0
    7e6e:	|  |   move.b 116(a0),d0
    7e72:	|  |   movea.l 4(sp),a0
    7e76:	|  |   move.b d0,115(a0)
    7e7a:	|  |   movea.l 4(sp),a0
    7e7e:	|  |   move.b 115(a0),d0
    7e82:	|  |   movea.l 4(sp),a0
    7e86:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7e8a:	|  |   movea.l 4(sp),a0
    7e8e:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7e94:	|  |   movea.l 4(sp),a0
    7e98:	|  |   clr.b 118(a0)
			break;
    7e9c:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7ea0:	|  |   movea.l 4(sp),a0
    7ea4:	|  |   move.b #-128,116(a0)
    7eaa:	|  |   movea.l 4(sp),a0
    7eae:	|  |   move.b 116(a0),d0
    7eb2:	|  |   movea.l 4(sp),a0
    7eb6:	|  |   move.b d0,115(a0)
    7eba:	|  |   movea.l 4(sp),a0
    7ebe:	|  |   move.b 115(a0),d0
    7ec2:	|  |   movea.l 4(sp),a0
    7ec6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7eca:	|  |   movea.l 4(sp),a0
    7ece:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7ed4:	|  |   movea.l 4(sp),a0
    7ed8:	|  |   clr.b 118(a0)
			break;
    7edc:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7ee0:	|  |   movea.l 4(sp),a0
    7ee4:	|  |   move.b #-128,116(a0)
    7eea:	|  |   movea.l 4(sp),a0
    7eee:	|  |   move.b 116(a0),d0
    7ef2:	|  |   movea.l 4(sp),a0
    7ef6:	|  |   move.b d0,115(a0)
    7efa:	|  |   movea.l 4(sp),a0
    7efe:	|  |   move.b 115(a0),d0
    7f02:	|  |   movea.l 4(sp),a0
    7f06:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7f0a:	|  |   movea.l 4(sp),a0
    7f0e:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7f14:	|  |   movea.l 4(sp),a0
    7f18:	|  |   clr.b 118(a0)
			break;
    7f1c:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7f20:	|  |   movea.l 4(sp),a0
    7f24:	|  |   move.b #-128,116(a0)
    7f2a:	|  |   movea.l 4(sp),a0
    7f2e:	|  |   move.b 116(a0),d0
    7f32:	|  |   movea.l 4(sp),a0
    7f36:	|  |   move.b d0,115(a0)
    7f3a:	|  |   movea.l 4(sp),a0
    7f3e:	|  |   move.b 115(a0),d0
    7f42:	|  |   movea.l 4(sp),a0
    7f46:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7f4a:	|  |   movea.l 4(sp),a0
    7f4e:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7f52:	|  |   movea.l 4(sp),a0
    7f56:	|  |   clr.b 118(a0)
			break;
    7f5a:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7f5e:	|  |   movea.l 4(sp),a0
    7f62:	|  |   st 116(a0)
    7f66:	|  |   movea.l 4(sp),a0
    7f6a:	|  |   move.b 116(a0),d0
    7f6e:	|  |   movea.l 4(sp),a0
    7f72:	|  |   move.b d0,115(a0)
    7f76:	|  |   movea.l 4(sp),a0
    7f7a:	|  |   move.b 115(a0),d0
    7f7e:	|  |   movea.l 4(sp),a0
    7f82:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7f86:	|  |   movea.l 4(sp),a0
    7f8a:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7f90:	|  |   movea.l 4(sp),a0
    7f94:	|  |   clr.b 118(a0)
			break;
    7f98:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7f9c:	|  |   movea.l 4(sp),a0
    7fa0:	|  |   st 116(a0)
    7fa4:	|  |   movea.l 4(sp),a0
    7fa8:	|  |   move.b 116(a0),d0
    7fac:	|  |   movea.l 4(sp),a0
    7fb0:	|  |   move.b d0,115(a0)
    7fb4:	|  |   movea.l 4(sp),a0
    7fb8:	|  |   move.b 115(a0),d0
    7fbc:	|  |   movea.l 4(sp),a0
    7fc0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7fc4:	|  |   movea.l 4(sp),a0
    7fc8:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7fce:	|  |   movea.l 4(sp),a0
    7fd2:	|  |   clr.b 118(a0)
			break;
    7fd6:	|  +-- bra.w 808a <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7fda:	|  |   movea.l 4(sp),a0
    7fde:	|  |   st 116(a0)
    7fe2:	|  |   movea.l 4(sp),a0
    7fe6:	|  |   move.b 116(a0),d0
    7fea:	|  |   movea.l 4(sp),a0
    7fee:	|  |   move.b d0,115(a0)
    7ff2:	|  |   movea.l 4(sp),a0
    7ff6:	|  |   move.b 115(a0),d0
    7ffa:	|  |   movea.l 4(sp),a0
    7ffe:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8002:	|  |   movea.l 4(sp),a0
    8006:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    800c:	|  |   movea.l 4(sp),a0
    8010:	|  |   clr.b 118(a0)
			break;
    8014:	|  +-- bra.s 808a <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8016:	|  |   movea.l 4(sp),a0
    801a:	|  |   st 116(a0)
    801e:	|  |   movea.l 4(sp),a0
    8022:	|  |   move.b 116(a0),d0
    8026:	|  |   movea.l 4(sp),a0
    802a:	|  |   move.b d0,115(a0)
    802e:	|  |   movea.l 4(sp),a0
    8032:	|  |   move.b 115(a0),d0
    8036:	|  |   movea.l 4(sp),a0
    803a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    803e:	|  |   movea.l 4(sp),a0
    8042:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8046:	|  |   movea.l 4(sp),a0
    804a:	|  |   clr.b 118(a0)
			break;
    804e:	|  +-- bra.s 808a <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8050:	\--|-> movea.l 4(sp),a0
    8054:	   |   clr.b 116(a0)
    8058:	   |   movea.l 4(sp),a0
    805c:	   |   move.b 116(a0),d0
    8060:	   |   movea.l 4(sp),a0
    8064:	   |   move.b d0,115(a0)
    8068:	   |   movea.l 4(sp),a0
    806c:	   |   move.b 115(a0),d0
    8070:	   |   movea.l 4(sp),a0
    8074:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8078:	   |   movea.l 4(sp),a0
    807c:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    8080:	   |   movea.l 4(sp),a0
    8084:	   |   clr.b 118(a0)
			break;
    8088:	   |   nop
	}
}
    808a:	   \-> nop
    808c:	       rts

0000808e <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    808e:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    8090:	       tst.l 8(sp)
    8094:	   /-- bgt.s 809a <setCharacterWalkSpeed+0xc>
    8096:	   |   clr.w d0
    8098:	/--|-- bra.s 80b8 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    809a:	|  \-> move.l 12(sp),-(sp)
    809e:	|      jsr 6c1a <findPerson>
    80a4:	|      addq.l #4,sp
    80a6:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    80a8:	|  /-- bne.s 80ae <setCharacterWalkSpeed+0x20>
    80aa:	|  |   clr.w d0
    80ac:	+--|-- bra.s 80b8 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    80ae:	|  \-> movea.l (sp),a0
    80b0:	|      move.l 8(sp),16(a0)
	return TRUE;
    80b6:	|      moveq #1,d0
}
    80b8:	\----> addq.l #4,sp
    80ba:	       rts

000080bc <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    80bc:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    80be:	       move.l 8(sp),-(sp)
    80c2:	       jsr 6c1a <findPerson>
    80c8:	       addq.l #4,sp
    80ca:	       move.l d0,(sp)
    if (thisPerson) {
    80cc:	/----- beq.s 80ec <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    80ce:	|      movea.l (sp),a0
    80d0:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    80d6:	|      moveq #2,d0
    80d8:	|      and.l 12(sp),d0
    80dc:	|  /-- beq.s 80e8 <setPersonExtra+0x2c>
    80de:	|  |   movea.l (sp),a0
    80e0:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    80e8:	|  \-> moveq #1,d0
    80ea:	|  /-- bra.s 80ee <setPersonExtra+0x32>
    }
    return FALSE;
    80ec:	\--|-> clr.w d0
}
    80ee:	   \-> addq.l #4,sp
    80f0:	       rts

000080f2 <setScale>:


void setScale (short int h, short int d) {
    80f2:	subq.l #4,sp
    80f4:	move.l 8(sp),d1
    80f8:	move.l 12(sp),d0
    80fc:	move.w d1,d1
    80fe:	move.w d1,2(sp)
    8102:	move.w d0,d0
    8104:	move.w d0,(sp)
	scaleHorizon = h;
    8106:	move.w 2(sp),1813e <scaleHorizon>
	scaleDivide = d;
    810e:	move.w (sp),18140 <scaleDivide>
}
    8114:	nop
    8116:	addq.l #4,sp
    8118:	rts

0000811a <setShown>:

void setShown (BOOL h, int ob) {
    811a:	    subq.l #8,sp
    811c:	    move.l 12(sp),d0
    8120:	    move.w d0,d0
    8122:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    8126:	    move.l 16(sp),-(sp)
    812a:	    jsr 6c1a <findPerson>
    8130:	    addq.l #4,sp
    8132:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    8136:	/-- beq.s 8142 <setShown+0x28>
    8138:	|   movea.l 4(sp),a0
    813c:	|   move.w 2(sp),92(a0)
}
    8142:	\-> nop
    8144:	    addq.l #8,sp
    8146:	    rts

00008148 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    8148:	       subq.l #8,sp
    814a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    814c:	       movea.l 16(sp),a0
    8150:	       move.l 80(a0),d0
    8154:	       move.l d0,d1
    8156:	       addi.l #360,d1
    815c:	       movea.l 16(sp),a0
    8160:	       move.l 84(a0),d0
    8164:	       move.l d1,d2
    8166:	       sub.l d0,d2
    8168:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    816c:	       movea.l 16(sp),a0
    8170:	       move.l 110(a0),d0
    8174:	   /-- beq.s 8180 <spinStep+0x38>
    8176:	   |   movea.l 16(sp),a0
    817a:	   |   move.l 110(a0),d0
    817e:	/--|-- bra.s 819a <spinStep+0x52>
    8180:	|  \-> movea.l 16(sp),a0
    8184:	|      movea.l 68(a0),a0
    8188:	|      move.l 4(a0),d0
    818c:	|      move.l d0,-(sp)
    818e:	|      pea 168 <decodeFilename+0x50>
    8192:	|      jsr 13906 <__divsi3>
    8198:	|      addq.l #8,sp
    819a:	\----> move.l d0,4(sp)
	while (diff > 180) {
    819e:	   /-- bra.s 81a8 <spinStep+0x60>
		diff -= 360;
    81a0:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    81a8:	|  \-> cmpi.l #180,8(sp)
    81b0:	\----- bgt.s 81a0 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    81b2:	       move.l 8(sp),d0
    81b6:	       cmp.l 4(sp),d0
    81ba:	   /-- blt.s 81d8 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    81bc:	   |   movea.l 16(sp),a0
    81c0:	   |   move.l 80(a0),d0
    81c4:	   |   sub.l 4(sp),d0
    81c8:	   |   move.l d0,-(sp)
    81ca:	   |   move.l 20(sp),-(sp)
    81ce:	   |   jsr 82b8 <turnMeAngle>
    81d4:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    81d6:	/--|-- bra.s 821e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    81d8:	|  \-> move.l 4(sp),d0
    81dc:	|      neg.l d0
    81de:	|      cmp.l 8(sp),d0
    81e2:	|  /-- blt.s 8200 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    81e4:	|  |   movea.l 16(sp),a0
    81e8:	|  |   move.l 80(a0),d0
    81ec:	|  |   add.l 4(sp),d0
    81f0:	|  |   move.l d0,-(sp)
    81f2:	|  |   move.l 20(sp),-(sp)
    81f6:	|  |   jsr 82b8 <turnMeAngle>
    81fc:	|  |   addq.l #8,sp
}
    81fe:	+--|-- bra.s 821e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    8200:	|  \-> movea.l 16(sp),a0
    8204:	|      move.l 84(a0),d0
    8208:	|      move.l d0,-(sp)
    820a:	|      move.l 20(sp),-(sp)
    820e:	|      jsr 82b8 <turnMeAngle>
    8214:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    8216:	|      movea.l 16(sp),a0
    821a:	|      clr.w 54(a0)
}
    821e:	\----> nop
    8220:	       move.l (sp)+,d2
    8222:	       addq.l #8,sp
    8224:	       rts

00008226 <stopPerson>:


BOOL stopPerson (int o) {
    8226:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    8228:	       move.l 8(sp),-(sp)
    822c:	       jsr 6c1a <findPerson>
    8232:	       addq.l #4,sp
    8234:	       move.l d0,(sp)
    if (moveMe)
    8236:	/----- beq.s 8274 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    8238:	|      movea.l (sp),a0
    823a:	|      move.l 56(a0),d0
    823e:	+----- beq.s 8274 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    8240:	|      movea.l (sp),a0
    8242:	|      move.l 56(a0),d0
    8246:	|      move.l d0,-(sp)
    8248:	|      jsr 210e <abortFunction>
    824e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    8250:	|      movea.l (sp),a0
    8252:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    8256:	|      movea.l (sp),a0
    8258:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    825c:	|      movea.l (sp),a0
    825e:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    8262:	|      clr.l -(sp)
    8264:	|      move.l 4(sp),-(sp)
    8268:	|      jsr 5868 <setFrames>
    826e:	|      addq.l #8,sp
            return TRUE;
    8270:	|      moveq #1,d0
    8272:	|  /-- bra.s 8276 <stopPerson+0x50>
        }
    return FALSE;
    8274:	\--|-> clr.w d0
}
    8276:	   \-> addq.l #4,sp
    8278:	       rts

0000827a <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    827a:	       subq.l #8,sp
	int total = 0;
    827c:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    8280:	       clr.l (sp)
    8282:	   /-- bra.s 82a4 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    8284:	/--|-> movea.l 12(sp),a0
    8288:	|  |   movea.l 4(a0),a0
    828c:	|  |   move.l (sp),d1
    828e:	|  |   move.l d1,d0
    8290:	|  |   add.l d0,d0
    8292:	|  |   add.l d1,d0
    8294:	|  |   add.l d0,d0
    8296:	|  |   add.l d0,d0
    8298:	|  |   adda.l d0,a0
    829a:	|  |   move.l 4(a0),d0
    829e:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    82a2:	|  |   addq.l #1,(sp)
    82a4:	|  \-> movea.l 12(sp),a0
    82a8:	|      move.l 8(a0),d0
    82ac:	|      cmp.l (sp),d0
    82ae:	\----- bgt.s 8284 <timeForAnim+0xa>
	}
	return total;
    82b0:	       move.l 4(sp),d0
}
    82b4:	       addq.l #8,sp
    82b6:	       rts

000082b8 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    82b8:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    82ba:	       movea.l 8(sp),a0
    82be:	       movea.l 68(a0),a0
    82c2:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    82c6:	       movea.l 8(sp),a0
    82ca:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    82d0:	       move.l (sp),-(sp)
    82d2:	       pea b4 <_start+0xb4>
    82d6:	       jsr 13906 <__divsi3>
    82dc:	       addq.l #8,sp
    82de:	       move.l d0,d1
    82e0:	       addi.l #180,d1
    82e6:	       movea.l 8(sp),a0
    82ea:	       move.l 88(a0),d0
    82ee:	       add.l d1,d0
    82f0:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    82f4:	   /-- bra.s 82fe <turnMeAngle+0x46>
    82f6:	/--|-> addi.l #-360,12(sp)
    82fe:	|  \-> cmpi.l #359,12(sp)
    8306:	\----- bgt.s 82f6 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    8308:	       move.l (sp),-(sp)
    830a:	       move.l 16(sp),-(sp)
    830e:	       jsr 13888 <__mulsi3>
    8314:	       addq.l #8,sp
    8316:	       pea 168 <decodeFilename+0x50>
    831a:	       move.l d0,-(sp)
    831c:	       jsr 13906 <__divsi3>
    8322:	       addq.l #8,sp
    8324:	       movea.l 8(sp),a0
    8328:	       move.l d0,94(a0)
}
    832c:	       nop
    832e:	       addq.l #4,sp
    8330:	       rts

00008332 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    8332:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    8334:	          move.l 8(sp),-(sp)
    8338:	          jsr 6c1a <findPerson>
    833e:	          addq.l #4,sp
    8340:	          move.l d0,(sp)
    if (thisPerson) {
    8342:	/-------- beq.s 83a2 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    8344:	|         movea.l (sp),a0
    8346:	|         move.l 56(a0),d0
    834a:	|     /-- beq.s 835c <turnPersonToFace+0x2a>
    834c:	|     |   movea.l (sp),a0
    834e:	|     |   move.l 56(a0),d0
    8352:	|     |   move.l d0,-(sp)
    8354:	|     |   jsr 210e <abortFunction>
    835a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    835c:	|     \-> movea.l (sp),a0
    835e:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    8362:	|         movea.l (sp),a0
    8364:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    8368:	|         movea.l (sp),a0
    836a:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    836e:	|         move.l 12(sp),-(sp)
    8372:	|         move.l 4(sp),-(sp)
    8376:	|         jsr 82b8 <turnMeAngle>
    837c:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    837e:	|         movea.l 19cac <speech>,a0
    8384:	|         move.l (a0),d0
    8386:	|         cmp.l (sp),d0
    8388:	|  /----- bne.s 838e <turnPersonToFace+0x5c>
    838a:	|  |      moveq #2,d0
    838c:	|  |  /-- bra.s 8390 <turnPersonToFace+0x5e>
    838e:	|  \--|-> moveq #0,d0
    8390:	|     \-> move.l d0,-(sp)
    8392:	|         move.l 4(sp),-(sp)
    8396:	|         jsr 5868 <setFrames>
    839c:	|         addq.l #8,sp
        return TRUE;
    839e:	|         moveq #1,d0
    83a0:	|     /-- bra.s 83a4 <turnPersonToFace+0x72>
    }
    return FALSE;
    83a2:	\-----|-> clr.w d0
}
    83a4:	      \-> addq.l #4,sp
    83a6:	          rts

000083a8 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    83a8:	                lea -20(sp),sp
    83ac:	                move.l d3,-(sp)
    83ae:	                move.l d2,-(sp)
    83b0:	                move.l 36(sp),d0
    83b4:	                move.w d0,d0
    83b6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    83ba:	                cmpi.w #-1,10(sp)
    83c0:	/-------------- bne.s 83c8 <walkMe+0x20>
    83c2:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    83c8:	>-------------> movea.l 32(sp),a0
    83cc:	|               move.l 36(a0),d0
    83d0:	|               move.l d0,-(sp)
    83d2:	|               jsr 1332e <__floatsisf>
    83d8:	|               addq.l #4,sp
    83da:	|               move.l d0,d1
    83dc:	|               movea.l 32(sp),a0
    83e0:	|               move.l (a0),d0
    83e2:	|               move.l d0,-(sp)
    83e4:	|               move.l d1,-(sp)
    83e6:	|               jsr 13622 <__subsf3>
    83ec:	|               addq.l #8,sp
    83ee:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    83f2:	|               movea.l 32(sp),a0
    83f6:	|               move.l 40(a0),d0
    83fa:	|               move.l d0,-(sp)
    83fc:	|               jsr 1332e <__floatsisf>
    8402:	|               addq.l #4,sp
    8404:	|               move.l d0,d1
    8406:	|               movea.l 32(sp),a0
    840a:	|               move.l 4(a0),d0
    840e:	|               move.l d0,-(sp)
    8410:	|               move.l d1,-(sp)
    8412:	|               jsr 13622 <__subsf3>
    8418:	|               addq.l #8,sp
    841a:	|               move.l d0,-(sp)
    841c:	|               move.l d0,-(sp)
    841e:	|               jsr 130e0 <__addsf3>
    8424:	|               addq.l #8,sp
    8426:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    842a:	|               movea.l 32(sp),a0
    842e:	|               move.l 20(a0),d2
    8432:	|               movea.l 32(sp),a0
    8436:	|               move.l 16(a0),d0
    843a:	|               move.l d0,-(sp)
    843c:	|               jsr 1332e <__floatsisf>
    8442:	|               addq.l #4,sp
    8444:	|               move.l d0,-(sp)
    8446:	|               move.l d2,-(sp)
    8448:	|               jsr 133e0 <__mulsf3>
    844e:	|               addq.l #8,sp
    8450:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    8454:	|               move.l 24(sp),-(sp)
    8458:	|               jsr 13246 <__extendsfdf2>
    845e:	|               addq.l #4,sp
    8460:	|               move.l #-1717986918,-(sp)
    8466:	|               move.l #1070176665,-(sp)
    846c:	|               move.l d1,-(sp)
    846e:	|               move.l d0,-(sp)
    8470:	|               jsr 13506 <__ltdf2>
    8476:	|               lea 16(sp),sp
    847a:	|               tst.l d0
    847c:	|           /-- bge.s 8486 <walkMe+0xde>
    847e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    8486:	|           \-> move.l 20(sp),-(sp)
    848a:	|               jsr 132c6 <__fixsfsi>
    8490:	|               addq.l #4,sp
    8492:	|               move.l d0,-(sp)
    8494:	|               jsr 5e36 <TF_abs>
    849a:	|               addq.l #4,sp
    849c:	|               move.l d0,d2
    849e:	|               move.l 16(sp),-(sp)
    84a2:	|               jsr 132c6 <__fixsfsi>
    84a8:	|               addq.l #4,sp
    84aa:	|               move.l d0,-(sp)
    84ac:	|               jsr 5e36 <TF_abs>
    84b2:	|               addq.l #4,sp
    84b4:	|               cmp.l d2,d0
    84b6:	|        /----- bgt.s 84da <walkMe+0x132>
    84b8:	|        |      move.l 20(sp),-(sp)
    84bc:	|        |      jsr 132c6 <__fixsfsi>
    84c2:	|        |      addq.l #4,sp
    84c4:	|        |      move.l d0,-(sp)
    84c6:	|        |      jsr 5e36 <TF_abs>
    84cc:	|        |      addq.l #4,sp
    84ce:	|        |      move.l d0,-(sp)
    84d0:	|        |      jsr 1332e <__floatsisf>
    84d6:	|        |      addq.l #4,sp
    84d8:	|        |  /-- bra.s 84fa <walkMe+0x152>
    84da:	|        \--|-> move.l 16(sp),-(sp)
    84de:	|           |   jsr 132c6 <__fixsfsi>
    84e4:	|           |   addq.l #4,sp
    84e6:	|           |   move.l d0,-(sp)
    84e8:	|           |   jsr 5e36 <TF_abs>
    84ee:	|           |   addq.l #4,sp
    84f0:	|           |   move.l d0,-(sp)
    84f2:	|           |   jsr 1332e <__floatsisf>
    84f8:	|           |   addq.l #4,sp
    84fa:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    84fe:	|               move.l 12(sp),-(sp)
    8502:	|               jsr 132c6 <__fixsfsi>
    8508:	|               addq.l #4,sp
    850a:	|               move.l d0,-(sp)
    850c:	|               jsr 5e36 <TF_abs>
    8512:	|               addq.l #4,sp
    8514:	|               move.l d0,-(sp)
    8516:	|               jsr 1332e <__floatsisf>
    851c:	|               addq.l #4,sp
    851e:	|               move.l d0,-(sp)
    8520:	|               move.l 28(sp),-(sp)
    8524:	|               jsr 13554 <__ltsf2>
    852a:	|               addq.l #8,sp
    852c:	|               tst.l d0
    852e:	|        /----- bge.w 85e0 <walkMe+0x238>
			if (thisPerson->spinning) {
    8532:	|        |      movea.l 32(sp),a0
    8536:	|        |      move.w 54(a0),d0
    853a:	|        |  /-- beq.s 8558 <walkMe+0x1b0>
				spinStep(thisPerson);
    853c:	|        |  |   move.l 32(sp),-(sp)
    8540:	|        |  |   jsr 8148 <spinStep>
    8546:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    8548:	|        |  |   pea 1 <_start+0x1>
    854c:	|        |  |   move.l 36(sp),-(sp)
    8550:	|        |  |   jsr 5868 <setFrames>
    8556:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    8558:	|        |  \-> move.l 24(sp),-(sp)
    855c:	|        |      move.l 16(sp),-(sp)
    8560:	|        |      jsr 131da <__divsf3>
    8566:	|        |      addq.l #8,sp
    8568:	|        |      move.l d0,24(sp)
			if (move)
    856c:	|        |      tst.w 10(sp)
    8570:	|        |  /-- beq.s 85da <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    8572:	|        |  |   movea.l 32(sp),a0
    8576:	|        |  |   move.l 4(a0),d2
    857a:	|        |  |   move.l 24(sp),d0
    857e:	|        |  |   move.l d0,-(sp)
    8580:	|        |  |   move.l d0,-(sp)
    8582:	|        |  |   jsr 130e0 <__addsf3>
    8588:	|        |  |   addq.l #8,sp
    858a:	|        |  |   move.l d0,-(sp)
    858c:	|        |  |   move.l 20(sp),-(sp)
    8590:	|        |  |   jsr 131da <__divsf3>
    8596:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8598:	|        |  |   move.l d0,-(sp)
    859a:	|        |  |   move.l d2,-(sp)
    859c:	|        |  |   jsr 130e0 <__addsf3>
    85a2:	|        |  |   addq.l #8,sp
    85a4:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    85a6:	|        |  |   movea.l 32(sp),a0
    85aa:	|        |  |   move.l (a0),d3
    85ac:	|        |  |   move.l 24(sp),-(sp)
    85b0:	|        |  |   move.l 24(sp),-(sp)
    85b4:	|        |  |   jsr 131da <__divsf3>
    85ba:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    85bc:	|        |  |   move.l d0,-(sp)
    85be:	|        |  |   move.l d3,-(sp)
    85c0:	|        |  |   jsr 130e0 <__addsf3>
    85c6:	|        |  |   addq.l #8,sp
    85c8:	|        |  |   move.l d2,-(sp)
    85ca:	|        |  |   move.l d0,-(sp)
    85cc:	|        |  |   move.l 40(sp),-(sp)
    85d0:	|        |  |   jsr 7362 <moveAndScale>
    85d6:	|        |  |   lea 12(sp),sp
			return TRUE;
    85da:	|        |  \-> moveq #1,d0
    85dc:	|  /-----|----- bra.w 868e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    85e0:	|  |     \----> movea.l 32(sp),a0
    85e4:	|  |            move.l 44(a0),d0
    85e8:	|  |            moveq #-1,d1
    85ea:	|  |            cmp.l d0,d1
    85ec:	|  |        /-- bne.s 8624 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    85ee:	|  |        |   movea.l 32(sp),a0
    85f2:	|  |        |   move.l 98(a0),d0
    85f6:	|  |        |   moveq #-1,d1
    85f8:	|  |        |   cmp.l d0,d1
    85fa:	|  |  /-----|-- beq.s 8638 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    85fc:	|  |  |     |   movea.l 32(sp),a0
    8600:	|  |  |     |   move.l 98(a0),d0
    8604:	|  |  |     |   movea.l 32(sp),a0
    8608:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    860c:	|  |  |     |   movea.l 32(sp),a0
    8610:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    8616:	|  |  |     |   move.l 32(sp),-(sp)
    861a:	|  |  |     |   jsr 8148 <spinStep>
    8620:	|  |  |     |   addq.l #4,sp
			}
			break;
    8622:	|  |  +-----|-- bra.s 8638 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    8624:	|  |  |     \-> move.l 32(sp),-(sp)
    8628:	|  |  |         jsr 6560 <doBorderStuff>
    862e:	|  |  |         addq.l #4,sp
    8630:	|  |  |         tst.w d0
    8632:	|  |  |  /----- beq.s 863c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8634:	\--|--|--|----- bra.w 83c8 <walkMe+0x20>
			break;
    8638:	   |  \--|----> nop
    863a:	   |     |  /-- bra.s 863e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    863c:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    863e:	   |        \-> movea.l 32(sp),a0
    8642:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    8646:	   |            clr.l -(sp)
    8648:	   |            move.l 36(sp),-(sp)
    864c:	   |            jsr 5868 <setFrames>
    8652:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    8654:	   |            movea.l 32(sp),a0
    8658:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    865c:	   |            move.l d0,-(sp)
    865e:	   |            jsr 1332e <__floatsisf>
    8664:	   |            addq.l #4,sp
    8666:	   |            move.l d0,d2
				 thisPerson->walkToX,
    8668:	   |            movea.l 32(sp),a0
    866c:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    8670:	   |            move.l d0,-(sp)
    8672:	   |            jsr 1332e <__floatsisf>
    8678:	   |            addq.l #4,sp
    867a:	   |            move.l d2,-(sp)
    867c:	   |            move.l d0,-(sp)
    867e:	   |            move.l 40(sp),-(sp)
    8682:	   |            jsr 7362 <moveAndScale>
    8688:	   |            lea 12(sp),sp
	return FALSE;
    868c:	   |            clr.w d0
}
    868e:	   \----------> move.l (sp)+,d2
    8690:	                move.l (sp)+,d3
    8692:	                lea 20(sp),sp
    8696:	                rts

00008698 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    8698:	             lea -20(sp),sp
    869c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    869e:	             move.l 19cd8 <allLoadedBanks>,20(sp)
	while (returnMe) {
    86a6:	      /----- bra.s 86c6 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    86a8:	   /--|----> movea.l 20(sp),a0
    86ac:	   |  |      move.l (a0),d0
    86ae:	   |  |      cmp.l 28(sp),d0
    86b2:	   |  |  /-- bne.s 86bc <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    86b4:	   |  |  |   move.l 20(sp),d0
    86b8:	/--|--|--|-- bra.w 8778 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    86bc:	|  |  |  \-> movea.l 20(sp),a0
    86c0:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    86c6:	|  |  \----> tst.l 20(sp)
    86ca:	|  \-------- bne.s 86a8 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    86cc:	|            moveq #26,d0
    86ce:	|            move.l d0,16(sp)
    86d2:	|            clr.l 12(sp)
    86d6:	|            move.l 19c50 <SysBase>,d0
    86dc:	|            movea.l d0,a6
    86de:	|            move.l 16(sp),d0
    86e2:	|            move.l 12(sp),d1
    86e6:	|            jsr -684(a6)
    86ea:	|            move.l d0,8(sp)
    86ee:	|            move.l 8(sp),d0
    86f2:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    86f6:	|     /----- beq.s 8776 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    86f8:	|     |      movea.l 20(sp),a0
    86fc:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    8700:	|     |      move.l 20(sp),d0
    8704:	|     |      addq.l #8,d0
    8706:	|     |      clr.l -(sp)
    8708:	|     |      move.l d0,-(sp)
    870a:	|     |      move.l 36(sp),-(sp)
    870e:	|     |      jsr 5e16 <loadSpriteBank>
    8714:	|     |      lea 12(sp),sp
    8718:	|     |      tst.w d0
    871a:	|     |  /-- beq.s 874e <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    871c:	|     |  |   movea.l 20(sp),a0
    8720:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    8724:	|     |  |   move.l 19cd8 <allLoadedBanks>,d0
    872a:	|     |  |   movea.l 20(sp),a0
    872e:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    8732:	|     |  |   move.l 20(sp),19cd8 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    873a:	|     |  |   pea 16118 <line.c.05397aaf+0x1b2>
    8740:	|     |  |   jsr 12ed6 <KPrintF>
    8746:	|     |  |   addq.l #4,sp
			return returnMe;
    8748:	|     |  |   move.l 20(sp),d0
    874c:	+-----|--|-- bra.s 8778 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    874e:	|     |  \-> pea 16145 <line.c.05397aaf+0x1df>
    8754:	|     |      jsr 12ed6 <KPrintF>
    875a:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    875c:	|     |      move.l 20(sp),4(sp)
    8762:	|     |      move.l 19c50 <SysBase>,d0
    8768:	|     |      movea.l d0,a6
    876a:	|     |      movea.l 4(sp),a1
    876e:	|     |      jsr -690(a6)
			return NULL;
    8772:	|     |      moveq #0,d0
    8774:	+-----|----- bra.s 8778 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    8776:	|     \----> moveq #0,d0
}
    8778:	\----------> movea.l (sp)+,a6
    877a:	             lea 20(sp),sp
    877e:	             rts

00008780 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    8780:	       subq.l #8,sp
    8782:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    8784:	   /-- bra.s 87b4 <clearStackLib+0x34>
		k = stackLib;
    8786:	/--|-> move.l 19ce0 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    878e:	|  |   movea.l 19ce0 <stackLib>,a0
    8794:	|  |   move.l 4(a0),d0
    8798:	|  |   move.l d0,19ce0 <stackLib>
		FreeVec(k);
    879e:	|  |   move.l 8(sp),4(sp)
    87a4:	|  |   move.l 19c50 <SysBase>,d0
    87aa:	|  |   movea.l d0,a6
    87ac:	|  |   movea.l 4(sp),a1
    87b0:	|  |   jsr -690(a6)
	while (stackLib) {
    87b4:	|  \-> move.l 19ce0 <stackLib>,d0
    87ba:	\----- bne.s 8786 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    87bc:	       clr.l 19cdc <stackLibTotal>
}
    87c2:	       nop
    87c4:	       movea.l (sp)+,a6
    87c6:	       addq.l #8,sp
    87c8:	       rts

000087ca <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    87ca:	          lea -128(sp),sp
    87ce:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    87d2:	      /-- bra.s 87e4 <loadGame+0x1a>
    87d4:	   /--|-> move.l 19bec <allRunningFunctions>,d0
    87da:	   |  |   move.l d0,-(sp)
    87dc:	   |  |   jsr 3128 <finishFunction>
    87e2:	   |  |   addq.l #4,sp
    87e4:	   |  \-> move.l 19bec <allRunningFunctions>,d0
    87ea:	   \----- bne.s 87d4 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    87ec:	          pea 19ce4 <ssgVersion>
    87f2:	          pea 161a3 <line.c.05397aaf+0x23d>
    87f8:	          pea 41 <_start+0x41>
    87fc:	          pea 53 <_start+0x53>
    8800:	          move.l 160(sp),-(sp)
    8804:	          jsr 3c50 <openAndVerify>
    880a:	          lea 20(sp),sp
    880e:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    8812:	      /-- bne.s 881a <loadGame+0x50>
    8814:	      |   clr.w d0
    8816:	/-----|-- bra.w 8ac0 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    881a:	|     \-> move.l 112(sp),108(sp)
    8820:	|         lea 140(sp),a0
    8824:	|         lea -126(a0),a0
    8828:	|         move.l a0,120(sp)
    882c:	|         moveq #8,d0
    882e:	|         move.l d0,116(sp)
    8832:	|         move.l 19c58 <DOSBase>,d0
    8838:	|         movea.l d0,a6
    883a:	|         move.l 108(sp),d1
    883e:	|         move.l 120(sp),d2
    8842:	|         move.l 116(sp),d3
    8846:	|         jsr -42(a6)
    884a:	|         move.l d0,132(sp)
    884e:	|         move.l 132(sp),d0
    8852:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    8856:	|         moveq #8,d0
    8858:	|         cmp.l 128(sp),d0
    885c:	|     /-- beq.s 886c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    885e:	|     |   pea 161c4 <graphics.c.1c13408a+0x2>
    8864:	|     |   jsr 12ed6 <KPrintF>
    886a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    886c:	|     \-> move.l 14(sp),d1
    8870:	|         move.l 19bf6 <fileTime>,d0
    8876:	|         cmp.l d1,d0
    8878:	|     /-- bne.s 8888 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    887a:	|     |   move.l 18(sp),d1
    887e:	|     |   move.l 19bfa <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8884:	|     |   cmp.l d1,d0
    8886:	|  /--|-- beq.s 88a8 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8888:	|  |  \-> move.l 144(sp),-(sp)
    888c:	|  |      pea 161e0 <graphics.c.1c13408a+0x1e>
    8892:	|  |      pea 162a7 <graphics.c.1c13408a+0xe5>
    8898:	|  |      jsr 12ed6 <KPrintF>
    889e:	|  |      lea 12(sp),sp
		return FALSE; 
    88a2:	|  |      clr.w d0
    88a4:	+--|----- bra.w 8ac0 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    88a8:	|  \----> move.l 112(sp),124(sp)
    88ae:	|         move.l 19c58 <DOSBase>,d0
    88b4:	|         movea.l d0,a6
    88b6:	|         move.l 124(sp),d1
    88ba:	|         jsr -306(a6)
    88be:	|         move.l d0,136(sp)
    88c2:	|         move.l 136(sp),d0
    88c6:	|         move.l d0,d0
    88c8:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    88ce:	|         move.l 112(sp),100(sp)
    88d4:	|         move.l 19c58 <DOSBase>,d0
    88da:	|         movea.l d0,a6
    88dc:	|         move.l 100(sp),d1
    88e0:	|         jsr -306(a6)
    88e4:	|         move.l d0,96(sp)
    88e8:	|         move.l 96(sp),d0
    88ec:	|         move.l d0,d0
    88ee:	|         move.w d0,19bf4 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    88f4:	|         move.l 112(sp),92(sp)
    88fa:	|         move.l 19c58 <DOSBase>,d0
    8900:	|         movea.l d0,a6
    8902:	|         move.l 92(sp),d1
    8906:	|         jsr -306(a6)
    890a:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    890e:	|         move.l 112(sp),84(sp)
    8914:	|         move.l 19c58 <DOSBase>,d0
    891a:	|         movea.l d0,a6
    891c:	|         move.l 84(sp),d1
    8920:	|         jsr -306(a6)
    8924:	|         move.l d0,80(sp)
    8928:	|         move.l 80(sp),d0
    892c:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    8930:	|     /-- beq.s 8964 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    8932:	|     |   move.l 112(sp),-(sp)
    8936:	|     |   jsr 6bc <get2bytes>
    893c:	|     |   addq.l #4,sp
    893e:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    8942:	|     |   move.l 112(sp),-(sp)
    8946:	|     |   jsr 6bc <get2bytes>
    894c:	|     |   addq.l #4,sp
    894e:	|     |   move.l d0,19d44 <fontHeight>
		charOrder = readString(fp);		
    8954:	|     |   move.l 112(sp),-(sp)
    8958:	|     |   jsr b02 <readString>
    895e:	|     |   addq.l #4,sp
    8960:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    8964:	|     \-> move.l 104(sp),70(sp)
    896a:	|         move.l 19c50 <SysBase>,d0
    8970:	|         movea.l d0,a6
    8972:	|         movea.l 70(sp),a1
    8976:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    897a:	|         move.l 112(sp),-(sp)
    897e:	|         jsr 854 <getSigned>
    8984:	|         addq.l #4,sp
    8986:	|         move.w d0,186b0 <fontSpace>

	killAllPeople ();
    898c:	|         jsr 7004 <killAllPeople>
	killAllRegions ();
    8992:	|         jsr 1197a <killAllRegions>

	int camerX = get2bytes (fp);
    8998:	|         move.l 112(sp),-(sp)
    899c:	|         jsr 6bc <get2bytes>
    89a2:	|         addq.l #4,sp
    89a4:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    89a8:	|         move.l 112(sp),-(sp)
    89ac:	|         jsr 6bc <get2bytes>
    89b2:	|         addq.l #4,sp
    89b4:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    89b8:	|         move.l 112(sp),-(sp)
    89bc:	|         jsr 7d8 <getFloat>
    89c2:	|         addq.l #4,sp
    89c4:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    89c8:	|         move.l 112(sp),54(sp)
    89ce:	|         move.l 19c58 <DOSBase>,d0
    89d4:	|         movea.l d0,a6
    89d6:	|         move.l 54(sp),d1
    89da:	|         jsr -306(a6)
    89de:	|         move.l d0,50(sp)
    89e2:	|         move.l 50(sp),d0
    89e6:	|         move.l d0,d0
    89e8:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    89ee:	|         move.l 112(sp),-(sp)
    89f2:	|         jsr 3bb0 <loadHandlers>
    89f8:	|         addq.l #4,sp
	loadRegions (fp);
    89fa:	|         move.l 112(sp),-(sp)
    89fe:	|         jsr 119d6 <loadRegions>
    8a04:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8a06:	|         moveq #12,d0
    8a08:	|         move.l d0,46(sp)
    8a0c:	|         clr.l 42(sp)
    8a10:	|         move.l 19c50 <SysBase>,d0
    8a16:	|         movea.l d0,a6
    8a18:	|         move.l 46(sp),d0
    8a1c:	|         move.l 42(sp),d1
    8a20:	|         jsr -684(a6)
    8a24:	|         move.l d0,38(sp)
    8a28:	|         move.l 38(sp),d0
    8a2c:	|         move.l d0,19b2c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    8a32:	|         move.l 19b2c <mouseCursorAnim>,d0
    8a38:	|     /-- bne.s 8a4c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8a3a:	|     |   pea 162b1 <graphics.c.1c13408a+0xef>
    8a40:	|     |   jsr 12ed6 <KPrintF>
    8a46:	|     |   addq.l #4,sp
		return FALSE;
    8a48:	|     |   clr.w d0
    8a4a:	+-----|-- bra.s 8ac0 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    8a4c:	|     \-> jsr 9b16 <nosnapshot>
	if (FGetC (fp)) {
    8a52:	|         move.l 112(sp),34(sp)
    8a58:	|         move.l 19c58 <DOSBase>,d0
    8a5e:	|         movea.l d0,a6
    8a60:	|         move.l 34(sp),d1
    8a64:	|         jsr -306(a6)
    8a68:	|         move.l d0,30(sp)
    8a6c:	|         move.l 30(sp),d0
    8a70:	|     /-- beq.s 8a86 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    8a72:	|     |   move.l 112(sp),-(sp)
    8a76:	|     |   jsr 9bee <restoreSnapshot>
    8a7c:	|     |   addq.l #4,sp
    8a7e:	|     |   tst.w d0
    8a80:	|     +-- bne.s 8a86 <loadGame+0x2bc>
    8a82:	|     |   clr.w d0
    8a84:	+-----|-- bra.s 8ac0 <loadGame+0x2f6>
	}

	Close (fp);
    8a86:	|     \-> move.l 112(sp),26(sp)
    8a8c:	|         move.l 19c58 <DOSBase>,d0
    8a92:	|         movea.l d0,a6
    8a94:	|         move.l 26(sp),d1
    8a98:	|         jsr -36(a6)
    8a9c:	|         move.l d0,22(sp)
	clearStackLib ();
    8aa0:	|         jsr 8780 <clearStackLib>

	cameraX = camerX;
    8aa6:	|         move.l 66(sp),19d0a <cameraX>
	cameraY = camerY;
    8aae:	|         move.l 62(sp),19d0e <cameraY>
	cameraZoom = camerZ;
    8ab6:	|         move.l 58(sp),1814a <cameraZoom>

	return TRUE;
    8abe:	|         moveq #1,d0
}
    8ac0:	\-------> movem.l (sp)+,d2-d3/a6
    8ac4:	          lea 128(sp),sp
    8ac8:	          rts

00008aca <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    8aca:	   /-> lea -64(sp),sp
    8ace:	   |   move.l a6,-(sp)
    8ad0:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    8ad2:	   |   movea.l 76(sp),a0
    8ad6:	   |   move.l (a0),d0
    8ad8:	   |   move.l 80(sp),-(sp)
    8adc:	   |   move.l d0,-(sp)
    8ade:	   |   jsr 8d0 <put2bytes>
    8ae4:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8ae6:	   |   movea.l 76(sp),a0
    8aea:	   |   move.l 40(a0),d0
    8aee:	/--|-- beq.s 8b2a <saveFunction+0x60>
		FPutC (fp, 1);
    8af0:	|  |   move.l 80(sp),52(sp)
    8af6:	|  |   moveq #1,d0
    8af8:	|  |   move.l d0,48(sp)
    8afc:	|  |   move.l 19c58 <DOSBase>,d0
    8b02:	|  |   movea.l d0,a6
    8b04:	|  |   move.l 52(sp),d1
    8b08:	|  |   move.l 48(sp),d2
    8b0c:	|  |   jsr -312(a6)
    8b10:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    8b14:	|  |   movea.l 76(sp),a0
    8b18:	|  |   move.l 40(a0),d0
    8b1c:	|  |   move.l 80(sp),-(sp)
    8b20:	|  |   move.l d0,-(sp)
    8b22:	|  \-- jsr 8aca <saveFunction>(pc)
    8b26:	|      addq.l #8,sp
    8b28:	|  /-- bra.s 8b4c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8b2a:	\--|-> move.l 80(sp),64(sp)
    8b30:	   |   clr.l 60(sp)
    8b34:	   |   move.l 19c58 <DOSBase>,d0
    8b3a:	   |   movea.l d0,a6
    8b3c:	   |   move.l 64(sp),d1
    8b40:	   |   move.l 60(sp),d2
    8b44:	   |   jsr -312(a6)
    8b48:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    8b4c:	   \-> movea.l 76(sp),a0
    8b50:	       move.l 12(a0),d0
    8b54:	       move.l 80(sp),-(sp)
    8b58:	       move.l d0,-(sp)
    8b5a:	       jsr 958 <put4bytes>
    8b60:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8b62:	       movea.l 76(sp),a0
    8b66:	       move.l 36(a0),d0
    8b6a:	       move.l 80(sp),-(sp)
    8b6e:	       move.l d0,-(sp)
    8b70:	       jsr 8d0 <put2bytes>
    8b76:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8b78:	       move.l 80(sp),40(sp)
    8b7e:	       movea.l 76(sp),a0
    8b82:	       move.w 54(a0),d0
    8b86:	       movea.w d0,a0
    8b88:	       move.l a0,36(sp)
    8b8c:	       move.l 19c58 <DOSBase>,d0
    8b92:	       movea.l d0,a6
    8b94:	       move.l 40(sp),d1
    8b98:	       move.l 36(sp),d2
    8b9c:	       jsr -312(a6)
    8ba0:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    8ba4:	       move.l 80(sp),28(sp)
    8baa:	       movea.l 76(sp),a0
    8bae:	       move.w 48(a0),d0
    8bb2:	       movea.w d0,a0
    8bb4:	       move.l a0,24(sp)
    8bb8:	       move.l 19c58 <DOSBase>,d0
    8bbe:	       movea.l d0,a6
    8bc0:	       move.l 28(sp),d1
    8bc4:	       move.l 24(sp),d2
    8bc8:	       jsr -312(a6)
    8bcc:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    8bd0:	       move.l 80(sp),16(sp)
    8bd6:	       movea.l 76(sp),a0
    8bda:	       move.w 50(a0),d0
    8bde:	       movea.w d0,a0
    8be0:	       move.l a0,12(sp)
    8be4:	       move.l 19c58 <DOSBase>,d0
    8bea:	       movea.l d0,a6
    8bec:	       move.l 16(sp),d1
    8bf0:	       move.l 12(sp),d2
    8bf4:	       jsr -312(a6)
    8bf8:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8bfc:	       moveq #28,d0
    8bfe:	       add.l 76(sp),d0
    8c02:	       move.l 80(sp),-(sp)
    8c06:	       move.l d0,-(sp)
    8c08:	       jsr 9386 <saveVariable>
    8c0e:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    8c10:	       movea.l 76(sp),a0
    8c14:	       move.b 56(a0),d0
    8c18:	   /-- beq.s 8c28 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8c1a:	   |   pea 162d2 <graphics.c.1c13408a+0x110>
    8c20:	   |   jsr 12ed6 <KPrintF>
    8c26:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8c28:	   \-> movea.l 76(sp),a0
    8c2c:	       move.l 24(a0),d0
    8c30:	       move.l 80(sp),-(sp)
    8c34:	       move.l d0,-(sp)
    8c36:	       jsr 91fa <saveStack>
    8c3c:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8c3e:	       clr.l 68(sp)
    8c42:	   /-- bra.s 8c66 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    8c44:	/--|-> movea.l 76(sp),a0
    8c48:	|  |   move.l 20(a0),d1
    8c4c:	|  |   move.l 68(sp),d0
    8c50:	|  |   lsl.l #3,d0
    8c52:	|  |   add.l d1,d0
    8c54:	|  |   move.l 80(sp),-(sp)
    8c58:	|  |   move.l d0,-(sp)
    8c5a:	|  |   jsr 9386 <saveVariable>
    8c60:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8c62:	|  |   addq.l #1,68(sp)
    8c66:	|  \-> movea.l 76(sp),a0
    8c6a:	|      move.l 8(a0),d0
    8c6e:	|      cmp.l 68(sp),d0
    8c72:	\----- bgt.s 8c44 <saveFunction+0x17a>
	}
}
    8c74:	       nop
    8c76:	       nop
    8c78:	       move.l (sp)+,d2
    8c7a:	       movea.l (sp)+,a6
    8c7c:	       lea 64(sp),sp
    8c80:	       rts

00008c82 <saveGame>:

BOOL saveGame (char * fname) {
    8c82:	          lea -272(sp),sp
    8c86:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    8c8a:	          move.l 288(sp),268(sp)
    8c90:	          move.l #1006,264(sp)
    8c98:	          move.l 19c58 <DOSBase>,d0
    8c9e:	          movea.l d0,a6
    8ca0:	          move.l 268(sp),d1
    8ca4:	          move.l 264(sp),d2
    8ca8:	          jsr -30(a6)
    8cac:	          move.l d0,260(sp)
    8cb0:	          move.l 260(sp),d0
    8cb4:	          move.l d0,256(sp)
	if (fp == NULL) {
    8cb8:	      /-- bne.s 8cce <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    8cba:	      |   pea 162f4 <graphics.c.1c13408a+0x132>
    8cc0:	      |   jsr 12ed6 <KPrintF>
    8cc6:	      |   addq.l #4,sp
		return FALSE;
    8cc8:	      |   clr.w d0
    8cca:	/-----|-- bra.w 91f0 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    8cce:	|     \-> move.l 256(sp),252(sp)
    8cd4:	|         move.l #90897,248(sp)
    8cdc:	|         moveq #6,d0
    8cde:	|         move.l d0,244(sp)
    8ce2:	|         move.l 19c58 <DOSBase>,d0
    8ce8:	|         movea.l d0,a6
    8cea:	|         move.l 252(sp),d1
    8cee:	|         move.l 248(sp),d2
    8cf2:	|         move.l 244(sp),d3
    8cf6:	|         jsr -48(a6)
    8cfa:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    8cfe:	|         move.l 256(sp),236(sp)
    8d04:	|         clr.l 232(sp)
    8d08:	|         move.l 19c58 <DOSBase>,d0
    8d0e:	|         movea.l d0,a6
    8d10:	|         move.l 236(sp),d1
    8d14:	|         move.l 232(sp),d2
    8d18:	|         jsr -312(a6)
    8d1c:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    8d20:	|         move.l 256(sp),224(sp)
    8d26:	|         clr.l 220(sp)
    8d2a:	|         move.l 19c58 <DOSBase>,d0
    8d30:	|         movea.l d0,a6
    8d32:	|         move.l 224(sp),d1
    8d36:	|         move.l 220(sp),d2
    8d3a:	|         jsr -312(a6)
    8d3e:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    8d42:	|         move.l 256(sp),212(sp)
    8d48:	|         moveq #2,d0
    8d4a:	|         move.l d0,208(sp)
    8d4e:	|         move.l 19c58 <DOSBase>,d0
    8d54:	|         movea.l d0,a6
    8d56:	|         move.l 212(sp),d1
    8d5a:	|         move.l 208(sp),d2
    8d5e:	|         jsr -312(a6)
    8d62:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8d66:	|         move.l 256(sp),200(sp)
    8d6c:	|         moveq #2,d0
    8d6e:	|         move.l d0,196(sp)
    8d72:	|         move.l 19c58 <DOSBase>,d0
    8d78:	|         movea.l d0,a6
    8d7a:	|         move.l 200(sp),d1
    8d7e:	|         move.l 196(sp),d2
    8d82:	|         jsr -312(a6)
    8d86:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    8d8a:	|         move.l 256(sp),188(sp)
    8d90:	|         move.l #105462,184(sp)
    8d98:	|         moveq #8,d0
    8d9a:	|         move.l d0,180(sp)
    8d9e:	|         move.l 19c58 <DOSBase>,d0
    8da4:	|         movea.l d0,a6
    8da6:	|         move.l 188(sp),d1
    8daa:	|         move.l 184(sp),d2
    8dae:	|         move.l 180(sp),d3
    8db2:	|         jsr -48(a6)
    8db6:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    8dba:	|         move.l 256(sp),172(sp)
    8dc0:	|         move.w 18000 <allowAnyFilename>,d0
    8dc6:	|         movea.w d0,a0
    8dc8:	|         move.l a0,168(sp)
    8dcc:	|         move.l 19c58 <DOSBase>,d0
    8dd2:	|         movea.l d0,a6
    8dd4:	|         move.l 172(sp),d1
    8dd8:	|         move.l 168(sp),d2
    8ddc:	|         jsr -312(a6)
    8de0:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    8de4:	|         move.l 256(sp),160(sp)
    8dea:	|         move.w 19bf4 <captureAllKeys>,d0
    8df0:	|         movea.w d0,a0
    8df2:	|         move.l a0,156(sp)
    8df6:	|         move.l 19c58 <DOSBase>,d0
    8dfc:	|         movea.l d0,a6
    8dfe:	|         move.l 160(sp),d1
    8e02:	|         move.l 156(sp),d2
    8e06:	|         jsr -312(a6)
    8e0a:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    8e0e:	|         move.l 256(sp),148(sp)
    8e14:	|         moveq #1,d0
    8e16:	|         move.l d0,144(sp)
    8e1a:	|         move.l 19c58 <DOSBase>,d0
    8e20:	|         movea.l d0,a6
    8e22:	|         move.l 148(sp),d1
    8e26:	|         move.l 144(sp),d2
    8e2a:	|         jsr -312(a6)
    8e2e:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    8e32:	|         move.l 256(sp),136(sp)
    8e38:	|         move.l 19d50 <fontTableSize>,d0
    8e3e:	|         sgt d0
    8e40:	|         neg.b d0
    8e42:	|         move.b d0,d0
    8e44:	|         andi.l #255,d0
    8e4a:	|         move.l d0,132(sp)
    8e4e:	|         move.l 19c58 <DOSBase>,d0
    8e54:	|         movea.l d0,a6
    8e56:	|         move.l 136(sp),d1
    8e5a:	|         move.l 132(sp),d2
    8e5e:	|         jsr -312(a6)
    8e62:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8e66:	|         move.l 19d50 <fontTableSize>,d0
    8e6c:	|     /-- ble.s 8eaa <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    8e6e:	|     |   move.l 19d48 <loadedFontNum>,d0
    8e74:	|     |   move.l 256(sp),-(sp)
    8e78:	|     |   move.l d0,-(sp)
    8e7a:	|     |   jsr 8d0 <put2bytes>
    8e80:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    8e82:	|     |   move.l 19d44 <fontHeight>,d0
    8e88:	|     |   move.l 256(sp),-(sp)
    8e8c:	|     |   move.l d0,-(sp)
    8e8e:	|     |   jsr 8d0 <put2bytes>
    8e94:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    8e96:	|     |   move.l 19d4c <fontOrderString>,d0
    8e9c:	|     |   move.l 256(sp),-(sp)
    8ea0:	|     |   move.l d0,-(sp)
    8ea2:	|     |   jsr bd8 <writeString>
    8ea8:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    8eaa:	|     \-> move.w 186b0 <fontSpace>,d0
    8eb0:	|         movea.w d0,a0
    8eb2:	|         move.l 256(sp),-(sp)
    8eb6:	|         move.l a0,-(sp)
    8eb8:	|         jsr a9c <putSigned>
    8ebe:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    8ec0:	|         move.l 19d0a <cameraX>,d0
    8ec6:	|         move.l 256(sp),-(sp)
    8eca:	|         move.l d0,-(sp)
    8ecc:	|         jsr 8d0 <put2bytes>
    8ed2:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    8ed4:	|         move.l 19d0e <cameraY>,d0
    8eda:	|         move.l 256(sp),-(sp)
    8ede:	|         move.l d0,-(sp)
    8ee0:	|         jsr 8d0 <put2bytes>
    8ee6:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8ee8:	|         move.l 1814a <cameraZoom>,d0
    8eee:	|         move.l 256(sp),-(sp)
    8ef2:	|         move.l d0,-(sp)
    8ef4:	|         jsr a46 <putFloat>
    8efa:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    8efc:	|         move.l 256(sp),124(sp)
    8f02:	|         move.b 1811a <brightnessLevel>,d0
    8f08:	|         move.b d0,d0
    8f0a:	|         andi.l #255,d0
    8f10:	|         move.l d0,120(sp)
    8f14:	|         move.l 19c58 <DOSBase>,d0
    8f1a:	|         movea.l d0,a6
    8f1c:	|         move.l 124(sp),d1
    8f20:	|         move.l 120(sp),d2
    8f24:	|         jsr -312(a6)
    8f28:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    8f2c:	|         move.l 256(sp),-(sp)
    8f30:	|         jsr 4134 <saveHandlers>
    8f36:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8f38:	|         move.l 256(sp),-(sp)
    8f3c:	|         jsr 11b90 <saveRegions>
    8f42:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8f44:	|         move.l 19b2c <mouseCursorAnim>,d0
    8f4a:	|         move.l 256(sp),-(sp)
    8f4e:	|         move.l d0,-(sp)
    8f50:	|         jsr 7532 <saveAnim>
    8f56:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8f58:	|         move.l 19b30 <mouseCursorFrameNum>,d0
    8f5e:	|         move.l 256(sp),-(sp)
    8f62:	|         move.l d0,-(sp)
    8f64:	|         jsr 8d0 <put2bytes>
    8f6a:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    8f6c:	|         move.l 19bec <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    8f74:	|         clr.l 272(sp)
	while (thisFunction) {
    8f78:	|     /-- bra.s 8f88 <saveGame+0x306>
		countFunctions ++;
    8f7a:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    8f7e:	|  |  |   movea.l 276(sp),a0
    8f82:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8f88:	|  |  \-> tst.l 276(sp)
    8f8c:	|  \----- bne.s 8f7a <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    8f8e:	|         move.l 256(sp),-(sp)
    8f92:	|         move.l 276(sp),-(sp)
    8f96:	|         jsr 8d0 <put2bytes>
    8f9c:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    8f9e:	|         move.l 19bec <allRunningFunctions>,276(sp)
	while (thisFunction) {
    8fa6:	|     /-- bra.s 8fc2 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    8fa8:	|  /--|-> move.l 256(sp),-(sp)
    8fac:	|  |  |   move.l 280(sp),-(sp)
    8fb0:	|  |  |   jsr 8aca <saveFunction>
    8fb6:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    8fb8:	|  |  |   movea.l 276(sp),a0
    8fbc:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8fc2:	|  |  \-> tst.l 276(sp)
    8fc6:	|  \----- bne.s 8fa8 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    8fc8:	|         clr.l 280(sp)
    8fcc:	|     /-- bra.s 8fee <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    8fce:	|  /--|-> move.l 19c02 <globalVars>,d1
    8fd4:	|  |  |   move.l 280(sp),d0
    8fd8:	|  |  |   lsl.l #3,d0
    8fda:	|  |  |   add.l d1,d0
    8fdc:	|  |  |   move.l 256(sp),-(sp)
    8fe0:	|  |  |   move.l d0,-(sp)
    8fe2:	|  |  |   jsr 9386 <saveVariable>
    8fe8:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8fea:	|  |  |   addq.l #1,280(sp)
    8fee:	|  |  \-> move.l 19c28 <numGlobals>,d0
    8ff4:	|  |      cmp.l 280(sp),d0
    8ff8:	|  \----- bgt.s 8fce <saveGame+0x34c>
	}

	savePeople (fp);
    8ffa:	|         move.l 256(sp),-(sp)
    8ffe:	|         jsr 765a <savePeople>
    9004:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    9006:	|         movea.l 19d5c <currentFloor>,a0
    900c:	|         move.l 8(a0),d0
    9010:	|  /----- beq.s 904e <saveGame+0x3cc>
		FPutC (fp, 1);
    9012:	|  |      move.l 256(sp),100(sp)
    9018:	|  |      moveq #1,d0
    901a:	|  |      move.l d0,96(sp)
    901e:	|  |      move.l 19c58 <DOSBase>,d0
    9024:	|  |      movea.l d0,a6
    9026:	|  |      move.l 100(sp),d1
    902a:	|  |      move.l 96(sp),d2
    902e:	|  |      jsr -312(a6)
    9032:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    9036:	|  |      movea.l 19d5c <currentFloor>,a0
    903c:	|  |      move.l (a0),d0
    903e:	|  |      move.l 256(sp),-(sp)
    9042:	|  |      move.l d0,-(sp)
    9044:	|  |      jsr 8d0 <put2bytes>
    904a:	|  |      addq.l #8,sp
    904c:	|  |  /-- bra.s 9070 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    904e:	|  \--|-> move.l 256(sp),112(sp)
    9054:	|     |   clr.l 108(sp)
    9058:	|     |   move.l 19c58 <DOSBase>,d0
    905e:	|     |   movea.l d0,a6
    9060:	|     |   move.l 112(sp),d1
    9064:	|     |   move.l 108(sp),d2
    9068:	|     |   jsr -312(a6)
    906c:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    9070:	|     \-> move.l 19bc0 <zBuffer+0x50>,d0
    9076:	|  /----- beq.s 90b2 <saveGame+0x430>
		FPutC (fp, 1);
    9078:	|  |      move.l 256(sp),76(sp)
    907e:	|  |      moveq #1,d0
    9080:	|  |      move.l d0,72(sp)
    9084:	|  |      move.l 19c58 <DOSBase>,d0
    908a:	|  |      movea.l d0,a6
    908c:	|  |      move.l 76(sp),d1
    9090:	|  |      move.l 72(sp),d2
    9094:	|  |      jsr -312(a6)
    9098:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    909c:	|  |      move.l 19bbc <zBuffer+0x4c>,d0
    90a2:	|  |      move.l 256(sp),-(sp)
    90a6:	|  |      move.l d0,-(sp)
    90a8:	|  |      jsr 8d0 <put2bytes>
    90ae:	|  |      addq.l #8,sp
    90b0:	|  |  /-- bra.s 90d4 <saveGame+0x452>
	} else FPutC (fp,0);
    90b2:	|  \--|-> move.l 256(sp),88(sp)
    90b8:	|     |   clr.l 84(sp)
    90bc:	|     |   move.l 19c58 <DOSBase>,d0
    90c2:	|     |   movea.l d0,a6
    90c4:	|     |   move.l 88(sp),d1
    90c8:	|     |   move.l 84(sp),d2
    90cc:	|     |   jsr -312(a6)
    90d0:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    90d4:	|     \-> move.l 256(sp),64(sp)
    90da:	|         move.l 19d1e <speechMode>,60(sp)
    90e2:	|         move.l 19c58 <DOSBase>,d0
    90e8:	|         movea.l d0,a6
    90ea:	|         move.l 64(sp),d1
    90ee:	|         move.l 60(sp),d2
    90f2:	|         jsr -312(a6)
    90f6:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    90fa:	|         move.b 18686 <fadeMode>,d0
    9100:	|         move.b d0,d0
    9102:	|         andi.l #255,d0
    9108:	|         move.l d0,52(sp)
    910c:	|         move.l 256(sp),48(sp)
    9112:	|         move.l 19c58 <DOSBase>,d0
    9118:	|         movea.l d0,a6
    911a:	|         move.l 52(sp),d1
    911e:	|         move.l 48(sp),d2
    9122:	|         jsr -312(a6)
    9126:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    912a:	|         move.l 19cac <speech>,d0
    9130:	|         move.l 256(sp),-(sp)
    9134:	|         move.l d0,-(sp)
    9136:	|         jsr 571c <saveSpeech>
    913c:	|         addq.l #8,sp
	saveStatusBars (fp);
    913e:	|         move.l 256(sp),-(sp)
    9142:	|         jsr 5118 <saveStatusBars>
    9148:	|         addq.l #4,sp
	saveSounds (fp);
    914a:	|         move.l 256(sp),-(sp)
    914e:	|         jsr 94ca <saveSounds>
    9154:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    9156:	|         move.w 19d08 <saveEncoding>,d0
    915c:	|         move.w d0,d0
    915e:	|         andi.l #65535,d0
    9164:	|         move.l 256(sp),-(sp)
    9168:	|         move.l d0,-(sp)
    916a:	|         jsr 8d0 <put2bytes>
    9170:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    9172:	|         move.l 19cfa <parallaxStuff>,d0
    9178:	|         move.l 256(sp),-(sp)
    917c:	|         move.l d0,-(sp)
    917e:	|         jsr 9c14 <saveParallaxRecursive>
    9184:	|         addq.l #8,sp
	FPutC (fp, 0);
    9186:	|         move.l 256(sp),40(sp)
    918c:	|         clr.l 36(sp)
    9190:	|         move.l 19c58 <DOSBase>,d0
    9196:	|         movea.l d0,a6
    9198:	|         move.l 40(sp),d1
    919c:	|         move.l 36(sp),d2
    91a0:	|         jsr -312(a6)
    91a4:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    91a8:	|         move.l 256(sp),28(sp)
    91ae:	|         move.l 18120 <languageNum>,24(sp)
    91b6:	|         move.l 19c58 <DOSBase>,d0
    91bc:	|         movea.l d0,a6
    91be:	|         move.l 28(sp),d1
    91c2:	|         move.l 24(sp),d2
    91c6:	|         jsr -312(a6)
    91ca:	|         move.l d0,20(sp)

	Close(fp);
    91ce:	|         move.l 256(sp),16(sp)
    91d4:	|         move.l 19c58 <DOSBase>,d0
    91da:	|         movea.l d0,a6
    91dc:	|         move.l 16(sp),d1
    91e0:	|         jsr -36(a6)
    91e4:	|         move.l d0,12(sp)
	clearStackLib ();
    91e8:	|         jsr 8780 <clearStackLib>
	return TRUE;
    91ee:	|         moveq #1,d0
}
    91f0:	\-------> movem.l (sp)+,d2-d3/a6
    91f4:	          lea 272(sp),sp
    91f8:	          rts

000091fa <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    91fa:	       lea -12(sp),sp
	int elements = 0;
    91fe:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    9202:	       move.l 16(sp),(sp)
	while (search) {
    9206:	   /-- bra.s 9212 <saveStack+0x18>
		elements ++;
    9208:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    920c:	|  |   movea.l (sp),a0
    920e:	|  |   move.l 8(a0),(sp)
	while (search) {
    9212:	|  \-> tst.l (sp)
    9214:	\----- bne.s 9208 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    9216:	       move.l 20(sp),-(sp)
    921a:	       move.l 12(sp),-(sp)
    921e:	       jsr 8d0 <put2bytes>
    9224:	       addq.l #8,sp
	search = vs;
    9226:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    922a:	       clr.l 4(sp)
    922e:	   /-- bra.s 924a <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    9230:	/--|-> move.l (sp),d0
    9232:	|  |   move.l 20(sp),-(sp)
    9236:	|  |   move.l d0,-(sp)
    9238:	|  |   jsr 9386 <saveVariable>
    923e:	|  |   addq.l #8,sp
		search = search -> next;
    9240:	|  |   movea.l (sp),a0
    9242:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    9246:	|  |   addq.l #1,4(sp)
    924a:	|  \-> move.l 4(sp),d0
    924e:	|      cmp.l 8(sp),d0
    9252:	\----- blt.s 9230 <saveStack+0x36>
	}
}
    9254:	       nop
    9256:	       nop
    9258:	       lea 12(sp),sp
    925c:	       rts

0000925e <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    925e:	             lea -44(sp),sp
    9262:	             move.l a6,-(sp)
    9264:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    9266:	             move.l 19ce0 <stackLib>,48(sp)
	int a = 0;
    926e:	             clr.l 44(sp)
	while (s) {
    9272:	      /----- bra.s 92d0 <saveStackRef+0x72>
		if (s -> stack == vs) {
    9274:	   /--|----> movea.l 48(sp),a0
    9278:	   |  |      move.l (a0),d0
    927a:	   |  |      cmp.l 56(sp),d0
    927e:	   |  |  /-- bne.s 92c2 <saveStackRef+0x64>
			FPutC (fp, 1);
    9280:	   |  |  |   move.l 60(sp),16(sp)
    9286:	   |  |  |   moveq #1,d0
    9288:	   |  |  |   move.l d0,12(sp)
    928c:	   |  |  |   move.l 19c58 <DOSBase>,d0
    9292:	   |  |  |   movea.l d0,a6
    9294:	   |  |  |   move.l 16(sp),d1
    9298:	   |  |  |   move.l 12(sp),d2
    929c:	   |  |  |   jsr -312(a6)
    92a0:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    92a4:	   |  |  |   move.l 19cdc <stackLibTotal>,d0
    92aa:	   |  |  |   sub.l 44(sp),d0
    92ae:	   |  |  |   move.l 60(sp),-(sp)
    92b2:	   |  |  |   move.l d0,-(sp)
    92b4:	   |  |  |   jsr 8d0 <put2bytes>
    92ba:	   |  |  |   addq.l #8,sp
			return TRUE;
    92bc:	   |  |  |   moveq #1,d0
    92be:	/--|--|--|-- bra.w 937c <saveStackRef+0x11e>
		}
		s = s -> next;
    92c2:	|  |  |  \-> movea.l 48(sp),a0
    92c6:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    92cc:	|  |  |      addq.l #1,44(sp)
	while (s) {
    92d0:	|  |  \----> tst.l 48(sp)
    92d4:	|  \-------- bne.s 9274 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    92d6:	|            move.l 60(sp),40(sp)
    92dc:	|            clr.l 36(sp)
    92e0:	|            move.l 19c58 <DOSBase>,d0
    92e6:	|            movea.l d0,a6
    92e8:	|            move.l 40(sp),d1
    92ec:	|            move.l 36(sp),d2
    92f0:	|            jsr -312(a6)
    92f4:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    92f8:	|            movea.l 56(sp),a0
    92fc:	|            move.l (a0),d0
    92fe:	|            move.l 60(sp),-(sp)
    9302:	|            move.l d0,-(sp)
    9304:	|            jsr 91fa <saveStack>
    930a:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    930c:	|            moveq #8,d0
    930e:	|            move.l d0,28(sp)
    9312:	|            clr.l 24(sp)
    9316:	|            move.l 19c50 <SysBase>,d0
    931c:	|            movea.l d0,a6
    931e:	|            move.l 28(sp),d0
    9322:	|            move.l 24(sp),d1
    9326:	|            jsr -684(a6)
    932a:	|            move.l d0,20(sp)
    932e:	|            move.l 20(sp),d0
    9332:	|            move.l d0,48(sp)
	stackLibTotal ++;
    9336:	|            move.l 19cdc <stackLibTotal>,d0
    933c:	|            addq.l #1,d0
    933e:	|            move.l d0,19cdc <stackLibTotal>
	if (! s) {
    9344:	|            tst.l 48(sp)
    9348:	|        /-- bne.s 935c <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    934a:	|        |   pea 16340 <graphics.c.1c13408a+0x17e>
    9350:	|        |   jsr 12ed6 <KPrintF>
    9356:	|        |   addq.l #4,sp
		return FALSE;
    9358:	|        |   clr.w d0
    935a:	+--------|-- bra.s 937c <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    935c:	|        \-> move.l 19ce0 <stackLib>,d0
    9362:	|            movea.l 48(sp),a0
    9366:	|            move.l d0,4(a0)
	s -> stack = vs;
    936a:	|            movea.l 48(sp),a0
    936e:	|            move.l 56(sp),(a0)
	stackLib = s;
    9372:	|            move.l 48(sp),19ce0 <stackLib>
	return TRUE;
    937a:	|            moveq #1,d0
}
    937c:	\----------> move.l (sp)+,d2
    937e:	             movea.l (sp)+,a6
    9380:	             lea 44(sp),sp
    9384:	             rts

00009386 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    9386:	          lea -12(sp),sp
    938a:	          move.l a6,-(sp)
    938c:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    938e:	          move.l 28(sp),16(sp)
    9394:	          movea.l 24(sp),a0
    9398:	          move.l (a0),d0
    939a:	          move.l d0,12(sp)
    939e:	          move.l 19c58 <DOSBase>,d0
    93a4:	          movea.l d0,a6
    93a6:	          move.l 16(sp),d1
    93aa:	          move.l 12(sp),d2
    93ae:	          jsr -312(a6)
    93b2:	          move.l d0,8(sp)
	switch (from -> varType) {
    93b6:	          movea.l 24(sp),a0
    93ba:	          move.l (a0),d0
    93bc:	          moveq #9,d1
    93be:	          cmp.l d0,d1
    93c0:	      /-- bcs.w 9470 <saveVariable+0xea>
    93c4:	      |   add.l d0,d0
    93c6:	      |   movea.l d0,a0
    93c8:	      |   adda.l #37844,a0
    93ce:	      |   move.w (a0),d0
    93d0:	      |   jmp (93d4 <saveVariable+0x4e>,pc,d0.w)
    93d4:	      |   ori.l #1310740,(a0)+
    93da:	      |   ori.b #20,(20,a0,d0.w)
    93e0:	      |   .short 0x004c
    93e2:	      |   ori.b #126,(a4)
    93e6:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    93ea:	      |   ori.b #40,(a0)+
    93ee:	      |   ori.b #47,d4
    93f2:	      |   ori.b #0,(a4)+
    93f6:	      |   jsr 958 <put4bytes>
    93fc:	      |   addq.l #8,sp
		return TRUE;
    93fe:	      |   moveq #1,d0
    9400:	/-----|-- bra.w 94ac <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    9404:	|     |   movea.l 24(sp),a0
    9408:	|     |   move.l 4(a0),d0
    940c:	|     |   move.l 28(sp),-(sp)
    9410:	|     |   move.l d0,-(sp)
    9412:	|     |   jsr bd8 <writeString>
    9418:	|     |   addq.l #8,sp
		return TRUE;
    941a:	|     |   moveq #1,d0
    941c:	+-----|-- bra.w 94ac <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    9420:	|     |   movea.l 24(sp),a0
    9424:	|     |   move.l 4(a0),d0
    9428:	|     |   move.l 28(sp),-(sp)
    942c:	|     |   move.l d0,-(sp)
    942e:	|     |   jsr 925e <saveStackRef>
    9434:	|     |   addq.l #8,sp
    9436:	+-----|-- bra.s 94ac <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    9438:	|     |   movea.l 24(sp),a0
    943c:	|     |   move.l 4(a0),d0
    9440:	|     |   move.l 28(sp),-(sp)
    9444:	|     |   move.l d0,-(sp)
    9446:	|     |   jsr 75fc <saveCostume>
    944c:	|     |   addq.l #8,sp
		return FALSE;
    944e:	|     |   clr.w d0
    9450:	+-----|-- bra.s 94ac <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    9452:	|     |   movea.l 24(sp),a0
    9456:	|     |   move.l 4(a0),d0
    945a:	|     |   move.l 28(sp),-(sp)
    945e:	|     |   move.l d0,-(sp)
    9460:	|     |   jsr 7532 <saveAnim>
    9466:	|     |   addq.l #8,sp
		return FALSE;
    9468:	|     |   clr.w d0
    946a:	+-----|-- bra.s 94ac <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    946c:	|     |   clr.w d0
    946e:	+-----|-- bra.s 94ac <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    9470:	|     \-> movea.l 24(sp),a0
    9474:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    9476:	|         moveq #10,d1
    9478:	|         cmp.l d0,d1
    947a:	|  /----- bcs.s 9494 <saveVariable+0x10e>
						typeName[from->varType] :
    947c:	|  |      movea.l 24(sp),a0
    9480:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    9482:	|  |      add.l d0,d0
    9484:	|  |      movea.l d0,a1
    9486:	|  |      adda.l d0,a1
    9488:	|  |      lea 18688 <typeName>,a0
    948e:	|  |      move.l (0,a1,a0.l),d0
    9492:	|  |  /-- bra.s 949a <saveVariable+0x114>
    9494:	|  \--|-> move.l #90981,d0
    949a:	|     \-> move.l d0,-(sp)
    949c:	|         pea 1636c <graphics.c.1c13408a+0x1aa>
    94a2:	|         jsr 12ed6 <KPrintF>
    94a8:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    94aa:	|         moveq #1,d0
    94ac:	\-------> move.l (sp)+,d2
    94ae:	          movea.l (sp)+,a6
    94b0:	          lea 12(sp),sp
    94b4:	          rts

000094b6 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    94b6:	moveq #0,d0
}
    94b8:	rts

000094ba <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    94ba:	nop
    94bc:	rts

000094be <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    94be:	nop
    94c0:	rts

000094c2 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    94c2:	moveq #1,d0
}
    94c4:	rts

000094c6 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    94c6:	nop
    94c8:	rts

000094ca <saveSounds>:

void saveSounds (BPTR fp) {
    94ca:	lea -12(sp),sp
    94ce:	move.l a6,-(sp)
    94d0:	move.l d2,-(sp)
	FPutC (fp,0);
    94d2:	move.l 24(sp),16(sp)
    94d8:	clr.l 12(sp)
    94dc:	move.l 19c58 <DOSBase>,d0
    94e2:	movea.l d0,a6
    94e4:	move.l 16(sp),d1
    94e8:	move.l 12(sp),d2
    94ec:	jsr -312(a6)
    94f0:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    94f4:	move.l 18146 <defSoundVol>,d0
    94fa:	move.l 24(sp),-(sp)
    94fe:	move.l d0,-(sp)
    9500:	jsr 8d0 <put2bytes>
    9506:	addq.l #8,sp
	put2bytes (defVol, fp);
    9508:	move.l 18142 <defVol>,d0
    950e:	move.l 24(sp),-(sp)
    9512:	move.l d0,-(sp)
    9514:	jsr 8d0 <put2bytes>
    951a:	addq.l #8,sp
}
    951c:	nop
    951e:	move.l (sp)+,d2
    9520:	movea.l (sp)+,a6
    9522:	lea 12(sp),sp
    9526:	rts

00009528 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    9528:	move.l 4(sp),18142 <defVol>
}
    9530:	nop
    9532:	rts

00009534 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    9534:	move.l 4(sp),18146 <defSoundVol>
}
    953c:	nop
    953e:	rts

00009540 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    9540:	nop
    9542:	rts

00009544 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    9544:	nop
    9546:	rts

00009548 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    9548:	nop
    954a:	rts

0000954c <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    954c:	subq.l #4,sp
    954e:	move.l 12(sp),d0
    9552:	move.w d0,d0
    9554:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    9558:	moveq #1,d0
}
    955a:	addq.l #4,sp
    955c:	rts

0000955e <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    955e:	nop
    9560:	rts

00009562 <redValue>:
// Simple colour conversion routines to deal with 16-bit graphics

//unsigned short int makeColour (byte r, byte g, byte b);

unsigned short redValue (unsigned short c) { return (c >> 11) << 3; }
    9562:	subq.l #4,sp
    9564:	move.l 8(sp),d0
    9568:	move.w d0,d0
    956a:	move.w d0,2(sp)
    956e:	move.w 2(sp),d0
    9572:	moveq #11,d1
    9574:	lsr.w d1,d0
    9576:	lsl.w #3,d0
    9578:	addq.l #4,sp
    957a:	rts

0000957c <greenValue>:
unsigned short greenValue (unsigned short c) { return ((c >> 5) & 63) << 2; }
    957c:	subq.l #4,sp
    957e:	move.l 8(sp),d0
    9582:	move.w d0,d0
    9584:	move.w d0,2(sp)
    9588:	move.w 2(sp),d0
    958c:	lsr.w #5,d0
    958e:	add.w d0,d0
    9590:	add.w d0,d0
    9592:	andi.w #255,d0
    9596:	addq.l #4,sp
    9598:	rts

0000959a <blueValue>:
unsigned short blueValue (unsigned short c) { return (c & 31) << 3; }
    959a:	subq.l #4,sp
    959c:	move.l 8(sp),d0
    95a0:	move.w d0,d0
    95a2:	move.w d0,2(sp)
    95a6:	move.w 2(sp),d0
    95aa:	lsl.w #3,d0
    95ac:	andi.w #255,d0
    95b0:	addq.l #4,sp
    95b2:	rts

000095b4 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    95b4:	move.l 16(sp),-(sp)
    95b8:	move.l 16(sp),-(sp)
    95bc:	jsr df4 <CstBlankScreen>
    95c2:	addq.l #8,sp
}
    95c4:	nop
    95c6:	rts

000095c8 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    95c8:	pea 1638f <graphics.c.1c13408a+0x1cd>
    95ce:	jsr 12ed6 <KPrintF>
    95d4:	addq.l #4,sp
}
    95d6:	nop
    95d8:	rts

000095da <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    95da:	movea.l 8(sp),a1
    95de:	movea.l 12(sp),a0
    95e2:	move.l 8(sp),d1
    95e6:	move.l 4(sp),d0
    95ea:	move.l a1,-(sp)
    95ec:	move.l a0,-(sp)
    95ee:	move.l d1,-(sp)
    95f0:	move.l d0,-(sp)
    95f2:	jsr 13c4 <drawLine>
    95f8:	lea 16(sp),sp
}
    95fc:	nop
    95fe:	rts

00009600 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    9600:	movea.l 12(sp),a1
    9604:	movea.l 4(sp),a0
    9608:	move.l 8(sp),d1
    960c:	move.l 4(sp),d0
    9610:	move.l a1,-(sp)
    9612:	move.l a0,-(sp)
    9614:	move.l d1,-(sp)
    9616:	move.l d0,-(sp)
    9618:	jsr 13c4 <drawLine>
    961e:	lea 16(sp),sp
}
    9622:	nop
    9624:	rts

00009626 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    9626:	pea 163c8 <graphics.c.1c13408a+0x206>
    962c:	jsr 12ed6 <KPrintF>
    9632:	addq.l #4,sp
}
    9634:	nop
    9636:	rts

00009638 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    9638:	jsr 1354 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    963e:	pea 19cf4 <backdropTextureName>
    9644:	pea 1 <_start+0x1>
    9648:	jsr 1546 <deleteTextures>
    964e:	addq.l #8,sp
	backdropTextureName = 0;
    9650:	clr.l 19cf4 <backdropTextureName>
	backdropExists = FALSE;
    9656:	clr.w 19cf8 <backdropExists>
}
    965c:	nop
    965e:	rts

00009660 <killParallax>:

void killParallax () {
    9660:	          lea -12(sp),sp
    9664:	          move.l a6,-(sp)
	while (parallaxStuff) {
    9666:	   /----- bra.s 96d2 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    9668:	/--|----> move.l 19cfa <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    9670:	|  |      movea.l 12(sp),a0
    9674:	|  |      move.l 42(a0),d0
    9678:	|  |      move.l d0,19cfa <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    967e:	|  |      move.l 12(sp),d0
    9682:	|  |      addq.l #4,d0
    9684:	|  |      move.l d0,-(sp)
    9686:	|  |      pea 1 <_start+0x1>
    968a:	|  |      jsr 1546 <deleteTextures>
    9690:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    9692:	|  |      movea.l 12(sp),a0
    9696:	|  |      move.l (a0),d0
    9698:	|  |  /-- beq.s 96b2 <killParallax+0x52>
    969a:	|  |  |   movea.l 12(sp),a0
    969e:	|  |  |   move.l (a0),8(sp)
    96a2:	|  |  |   move.l 19c50 <SysBase>,d0
    96a8:	|  |  |   movea.l d0,a6
    96aa:	|  |  |   movea.l 8(sp),a1
    96ae:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    96b2:	|  |  \-> tst.l 12(sp)
    96b6:	|  |  /-- beq.s 96ce <killParallax+0x6e>
    96b8:	|  |  |   move.l 12(sp),4(sp)
    96be:	|  |  |   move.l 19c50 <SysBase>,d0
    96c4:	|  |  |   movea.l d0,a6
    96c6:	|  |  |   movea.l 4(sp),a1
    96ca:	|  |  |   jsr -690(a6)
		k = NULL;
    96ce:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    96d2:	|  \----> move.l 19cfa <parallaxStuff>,d0
    96d8:	\-------- bne.s 9668 <killParallax+0x8>
	}
}
    96da:	          nop
    96dc:	          nop
    96de:	          movea.l (sp)+,a6
    96e0:	          lea 12(sp),sp
    96e4:	          rts

000096e6 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
    96e6:	       lea -40(sp),sp
    96ea:	       move.l a6,-(sp)
	if (! openFileFromNum (fileNum)) {
    96ec:	       move.l 48(sp),-(sp)
    96f0:	       jsr 44a2 <openFileFromNum>
    96f6:	       addq.l #4,sp
    96f8:	       tst.l d0
    96fa:	   /-- bne.s 970e <loadBackDrop+0x28>
		KPrintF("Can't load overlay image");
    96fc:	   |   pea 163e9 <graphics.c.1c13408a+0x227>
    9702:	   |   jsr 12ed6 <KPrintF>
    9708:	   |   addq.l #4,sp
		return;
    970a:	/--|-- bra.w 97c2 <loadBackDrop+0xdc>
	}
	char *buffer = AllocVec(320*256, MEMF_ANY); //Dummy Buffer
    970e:	|  \-> move.l #81920,40(sp)
    9716:	|      clr.l 36(sp)
    971a:	|      move.l 19c50 <SysBase>,d0
    9720:	|      movea.l d0,a6
    9722:	|      move.l 40(sp),d0
    9726:	|      move.l 36(sp),d1
    972a:	|      jsr -684(a6)
    972e:	|      move.l d0,32(sp)
    9732:	|      move.l 32(sp),d0
    9736:	|      move.l d0,28(sp)
	unsigned int *pal = AllocVec(256*4, MEMF_ANY);
    973a:	|      move.l #1024,24(sp)
    9742:	|      clr.l 20(sp)
    9746:	|      move.l 19c50 <SysBase>,d0
    974c:	|      movea.l d0,a6
    974e:	|      move.l 24(sp),d0
    9752:	|      move.l 20(sp),d1
    9756:	|      jsr -684(a6)
    975a:	|      move.l d0,16(sp)
    975e:	|      move.l 16(sp),d0
    9762:	|      move.l d0,12(sp)
	loadHSI(bigDataFile, x, y, FALSE);
    9766:	|      move.l 19c38 <bigDataFile>,d0
    976c:	|      clr.l -(sp)
    976e:	|      move.l 60(sp),-(sp)
    9772:	|      move.l 60(sp),-(sp)
    9776:	|      move.l d0,-(sp)
    9778:	|      jsr 97ca <loadHSI>
    977e:	|      lea 16(sp),sp
	finishAccess ();
    9782:	|      jsr 439a <finishAccess>
	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9788:	|      pea 16402 <graphics.c.1c13408a+0x240>
    978e:	|      jsr 12ed6 <KPrintF>
    9794:	|      addq.l #4,sp
	FreeVec(buffer);
    9796:	|      move.l 28(sp),8(sp)
    979c:	|      move.l 19c50 <SysBase>,d0
    97a2:	|      movea.l d0,a6
    97a4:	|      movea.l 8(sp),a1
    97a8:	|      jsr -690(a6)
	FreeVec(pal);
    97ac:	|      move.l 12(sp),4(sp)
    97b2:	|      move.l 19c50 <SysBase>,d0
    97b8:	|      movea.l d0,a6
    97ba:	|      movea.l 4(sp),a1
    97be:	|      jsr -690(a6)
}
    97c2:	\----> movea.l (sp)+,a6
    97c4:	       lea 40(sp),sp
    97c8:	       rts

000097ca <loadHSI>:

BOOL loadHSI (BPTR fp, int x, int y, BOOL reserve) 
{
    97ca:	                            lea -124(sp),sp
    97ce:	                            movem.l d2-d4/a6,-(sp)
    97d2:	                            move.l 156(sp),d0
    97d6:	                            move.w d0,d0
    97d8:	                            move.w d0,18(sp)

	unsigned int t1, t2, n;
	unsigned short c;
	UBYTE * target;
	ULONG transCol = reserve ? -1 : 63519;
    97dc:	                        /-- beq.s 97e2 <loadHSI+0x18>
    97de:	                        |   moveq #-1,d0
    97e0:	                     /--|-- bra.s 97e8 <loadHSI+0x1e>
    97e2:	                     |  \-> move.l #63519,d0
    97e8:	                     \----> move.l d0,122(sp)
	unsigned int picWidth;
	unsigned int picHeight;
	unsigned int realPicWidth, realPicHeight;
	long file_pointer = Seek(fp, 0, OFFSET_CURRENT);
    97ec:	                            move.l 144(sp),118(sp)
    97f2:	                            clr.l 114(sp)
    97f6:	                            clr.l 110(sp)
    97fa:	                            move.l 19c58 <DOSBase>,d0
    9800:	                            movea.l d0,a6
    9802:	                            move.l 118(sp),d1
    9806:	                            move.l 114(sp),d2
    980a:	                            move.l 110(sp),d3
    980e:	                            jsr -66(a6)
    9812:	                            move.l d0,106(sp)
    9816:	                            move.l 106(sp),d0
    981a:	                            move.l d0,102(sp)

	int fileIsPNG = TRUE;
    981e:	                            moveq #1,d0
    9820:	                            move.l d0,98(sp)

	// Is this a PNG file?

	unsigned char tmp[10];
	ULONG bytes_read = FRead( fp, tmp, 1, 8); //Get Current position
    9824:	                            move.l 144(sp),94(sp)
    982a:	                            lea 140(sp),a0
    982e:	                            lea -120(a0),a0
    9832:	                            move.l a0,90(sp)
    9836:	                            moveq #1,d0
    9838:	                            move.l d0,86(sp)
    983c:	                            moveq #8,d1
    983e:	                            move.l d1,82(sp)
    9842:	                            move.l 19c58 <DOSBase>,d0
    9848:	                            movea.l d0,a6
    984a:	                            move.l 94(sp),d1
    984e:	                            move.l 90(sp),d2
    9852:	                            move.l 86(sp),d3
    9856:	                            move.l 82(sp),d4
    985a:	                            jsr -324(a6)
    985e:	                            move.l d0,78(sp)
    9862:	                            move.l 78(sp),d0
    9866:	                            move.l d0,74(sp)

	if (bytes_read != 8) {
    986a:	                            moveq #8,d0
    986c:	                            cmp.l 74(sp),d0
    9870:	                        /-- beq.s 9880 <loadHSI+0xb6>
		KPrintF("Reading error in loadHSI.\n");
    9872:	                        |   pea 1643c <graphics.c.1c13408a+0x27a>
    9878:	                        |   jsr 12ed6 <KPrintF>
    987e:	                        |   addq.l #4,sp
	}	

    if ( tmp[0] == 0x89 && tmp[1] == 0x50 && tmp[2] == 0x4E && tmp[3] == 0x47 && tmp[4] == 0x0D && tmp[5] == 0x0A && tmp[6] == 0x1A && tmp[7] == 0x0A ) {
    9880:	                        \-> move.b 20(sp),d0
    9884:	                            cmpi.b #-119,d0
    9888:	                        /-- bne.s 98e4 <loadHSI+0x11a>
    988a:	                        |   move.b 21(sp),d0
    988e:	                        |   cmpi.b #80,d0
    9892:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    9894:	                        |   move.b 22(sp),d0
    9898:	                        |   cmpi.b #78,d0
    989c:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    989e:	                        |   move.b 23(sp),d0
    98a2:	                        |   cmpi.b #71,d0
    98a6:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    98a8:	                        |   move.b 24(sp),d0
    98ac:	                        |   cmpi.b #13,d0
    98b0:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    98b2:	                        |   move.b 25(sp),d0
    98b6:	                        |   cmpi.b #10,d0
    98ba:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    98bc:	                        |   move.b 26(sp),d0
    98c0:	                        |   cmpi.b #26,d0
    98c4:	                        +-- bne.s 98e4 <loadHSI+0x11a>
    98c6:	                        |   move.b 27(sp),d0
    98ca:	                        |   cmpi.b #10,d0
    98ce:	                        +-- bne.s 98e4 <loadHSI+0x11a>
		// PNG not supported
		KPrintF("loadHSI: Png not supported");
    98d0:	                        |   pea 16457 <graphics.c.1c13408a+0x295>
    98d6:	                        |   jsr 12ed6 <KPrintF>
    98dc:	                        |   addq.l #4,sp
		return FALSE;
    98de:	                        |   clr.w d0
    98e0:	/-----------------------|-- bra.w 9ac6 <loadHSI+0x2fc>
	} else {
		// No, it's old-school HSI
		fileIsPNG = FALSE;
    98e4:	|                       \-> clr.l 98(sp)
		Seek( fp, file_pointer, OFFSET_BEGINNING);
    98e8:	|                           move.l 144(sp),70(sp)
    98ee:	|                           move.l 102(sp),66(sp)
    98f4:	|                           moveq #-1,d1
    98f6:	|                           move.l d1,62(sp)
    98fa:	|                           move.l 19c58 <DOSBase>,d0
    9900:	|                           movea.l d0,a6
    9902:	|                           move.l 70(sp),d1
    9906:	|                           move.l 66(sp),d2
    990a:	|                           move.l 62(sp),d3
    990e:	|                           jsr -66(a6)
    9912:	|                           move.l d0,58(sp)

		picWidth = realPicWidth = get2bytes (fp);
    9916:	|                           move.l 144(sp),-(sp)
    991a:	|                           jsr 6bc <get2bytes>
    9920:	|                           addq.l #4,sp
    9922:	|                           move.l d0,54(sp)
    9926:	|                           move.l 54(sp),50(sp)
		picHeight = realPicHeight = get2bytes (fp);
    992c:	|                           move.l 144(sp),-(sp)
    9930:	|                           jsr 6bc <get2bytes>
    9936:	|                           addq.l #4,sp
    9938:	|                           move.l d0,46(sp)
    993c:	|                           move.l 46(sp),42(sp)
	}

	if (x < 0 || x + realPicWidth > sceneWidth || y < 0 || y + realPicHeight > sceneHeight) {
    9942:	|                           tst.l 148(sp)
    9946:	|                    /----- blt.s 9972 <loadHSI+0x1a8>
    9948:	|                    |      move.l 148(sp),d0
    994c:	|                    |      add.l 54(sp),d0
    9950:	|                    |      move.l 19cec <sceneWidth>,d1
    9956:	|                    |      cmp.l d0,d1
    9958:	|                    +----- bcs.s 9972 <loadHSI+0x1a8>
    995a:	|                    |      tst.l 152(sp)
    995e:	|                    +----- blt.s 9972 <loadHSI+0x1a8>
    9960:	|                    |      move.l 152(sp),d0
    9964:	|                    |      add.l 46(sp),d0
    9968:	|                    |      move.l 19cf0 <sceneHeight>,d1
    996e:	|                    |      cmp.l d0,d1
    9970:	|                    |  /-- bcc.s 9978 <loadHSI+0x1ae>
		return FALSE;
    9972:	|                    \--|-> clr.w d0
    9974:	+-----------------------|-- bra.w 9ac6 <loadHSI+0x2fc>
	}		

	
	for (t2 = 0; t2 < realPicHeight; t2 ++) {
    9978:	|                       \-> clr.l 132(sp)
    997c:	|     /-------------------- bra.w 9ab0 <loadHSI+0x2e6>
		t1 = 0;
    9980:	|  /--|-------------------> clr.l 136(sp)
		while (t1 < realPicWidth) {
    9984:	|  |  |     /-------------- bra.w 9aa0 <loadHSI+0x2d6>
			c = (unsigned short) get2bytes (fp);
    9988:	|  |  |  /--|-------------> move.l 144(sp),-(sp)
    998c:	|  |  |  |  |               jsr 6bc <get2bytes>
    9992:	|  |  |  |  |               addq.l #4,sp
    9994:	|  |  |  |  |               move.w d0,126(sp)
			if (c & 32) {
    9998:	|  |  |  |  |               moveq #0,d0
    999a:	|  |  |  |  |               move.w 126(sp),d0
    999e:	|  |  |  |  |               moveq #32,d1
    99a0:	|  |  |  |  |               and.l d1,d0
    99a2:	|  |  |  |  |           /-- beq.s 99d2 <loadHSI+0x208>
				n = FGetC (fp) + 1;
    99a4:	|  |  |  |  |           |   move.l 144(sp),38(sp)
    99aa:	|  |  |  |  |           |   move.l 19c58 <DOSBase>,d0
    99b0:	|  |  |  |  |           |   movea.l d0,a6
    99b2:	|  |  |  |  |           |   move.l 38(sp),d1
    99b6:	|  |  |  |  |           |   jsr -306(a6)
    99ba:	|  |  |  |  |           |   move.l d0,34(sp)
    99be:	|  |  |  |  |           |   move.l 34(sp),d0
    99c2:	|  |  |  |  |           |   addq.l #1,d0
    99c4:	|  |  |  |  |           |   move.l d0,128(sp)
				c -= 32;
    99c8:	|  |  |  |  |           |   addi.w #-32,126(sp)
    99ce:	|  |  |  |  |     /-----|-- bra.w 9a8e <loadHSI+0x2c4>
			} else {
				n = 1;
    99d2:	|  |  |  |  |     |     \-> moveq #1,d0
    99d4:	|  |  |  |  |     |         move.l d0,128(sp)
			}
			while (n --) {
    99d8:	|  |  |  |  |     +-------- bra.w 9a8e <loadHSI+0x2c4>
				target = backdropTexture + 4*picWidth*t2 + t1*4;
    99dc:	|  |  |  |  |  /--|-------> move.l 19ce8 <backdropTexture>,d2
    99e2:	|  |  |  |  |  |  |         move.l 132(sp),-(sp)
    99e6:	|  |  |  |  |  |  |         move.l 54(sp),-(sp)
    99ea:	|  |  |  |  |  |  |         jsr 13888 <__mulsi3>
    99f0:	|  |  |  |  |  |  |         addq.l #8,sp
    99f2:	|  |  |  |  |  |  |         add.l 136(sp),d0
    99f6:	|  |  |  |  |  |  |         add.l d0,d0
    99f8:	|  |  |  |  |  |  |         add.l d0,d0
    99fa:	|  |  |  |  |  |  |         move.l d2,d1
    99fc:	|  |  |  |  |  |  |         add.l d0,d1
    99fe:	|  |  |  |  |  |  |         move.l d1,30(sp)
				if (c == transCol || c == 2015) {
    9a02:	|  |  |  |  |  |  |         moveq #0,d0
    9a04:	|  |  |  |  |  |  |         move.w 126(sp),d0
    9a08:	|  |  |  |  |  |  |         cmp.l 122(sp),d0
    9a0c:	|  |  |  |  |  |  |     /-- beq.s 9a16 <loadHSI+0x24c>
    9a0e:	|  |  |  |  |  |  |     |   cmpi.w #2015,126(sp)
    9a14:	|  |  |  |  |  |  |  /--|-- bne.s 9a36 <loadHSI+0x26c>
					target[0] = 0;
    9a16:	|  |  |  |  |  |  |  |  \-> movea.l 30(sp),a0
    9a1a:	|  |  |  |  |  |  |  |      clr.b (a0)
					target[1] = 0;
    9a1c:	|  |  |  |  |  |  |  |      movea.l 30(sp),a0
    9a20:	|  |  |  |  |  |  |  |      addq.l #1,a0
    9a22:	|  |  |  |  |  |  |  |      clr.b (a0)
					target[2] = 0;
    9a24:	|  |  |  |  |  |  |  |      movea.l 30(sp),a0
    9a28:	|  |  |  |  |  |  |  |      addq.l #2,a0
    9a2a:	|  |  |  |  |  |  |  |      clr.b (a0)
					target[3] = 0;
    9a2c:	|  |  |  |  |  |  |  |      movea.l 30(sp),a0
    9a30:	|  |  |  |  |  |  |  |      addq.l #3,a0
    9a32:	|  |  |  |  |  |  |  |      clr.b (a0)
    9a34:	|  |  |  |  |  |  |  |  /-- bra.s 9a8a <loadHSI+0x2c0>
				} else {
					target[0] = redValue(c);
    9a36:	|  |  |  |  |  |  |  \--|-> moveq #0,d0
    9a38:	|  |  |  |  |  |  |     |   move.w 126(sp),d0
    9a3c:	|  |  |  |  |  |  |     |   move.l d0,-(sp)
    9a3e:	|  |  |  |  |  |  |     |   jsr 9562 <redValue>
    9a44:	|  |  |  |  |  |  |     |   addq.l #4,sp
    9a46:	|  |  |  |  |  |  |     |   move.l d0,d0
    9a48:	|  |  |  |  |  |  |     |   movea.l 30(sp),a0
    9a4c:	|  |  |  |  |  |  |     |   move.b d0,(a0)
					target[1] = greenValue(c);
    9a4e:	|  |  |  |  |  |  |     |   moveq #0,d0
    9a50:	|  |  |  |  |  |  |     |   move.w 126(sp),d0
    9a54:	|  |  |  |  |  |  |     |   move.l d0,-(sp)
    9a56:	|  |  |  |  |  |  |     |   jsr 957c <greenValue>
    9a5c:	|  |  |  |  |  |  |     |   addq.l #4,sp
    9a5e:	|  |  |  |  |  |  |     |   movea.l 30(sp),a0
    9a62:	|  |  |  |  |  |  |     |   addq.l #1,a0
    9a64:	|  |  |  |  |  |  |     |   move.l d0,d0
    9a66:	|  |  |  |  |  |  |     |   move.b d0,(a0)
					target[2] = blueValue(c);
    9a68:	|  |  |  |  |  |  |     |   moveq #0,d0
    9a6a:	|  |  |  |  |  |  |     |   move.w 126(sp),d0
    9a6e:	|  |  |  |  |  |  |     |   move.l d0,-(sp)
    9a70:	|  |  |  |  |  |  |     |   jsr 959a <blueValue>
    9a76:	|  |  |  |  |  |  |     |   addq.l #4,sp
    9a78:	|  |  |  |  |  |  |     |   movea.l 30(sp),a0
    9a7c:	|  |  |  |  |  |  |     |   addq.l #2,a0
    9a7e:	|  |  |  |  |  |  |     |   move.l d0,d0
    9a80:	|  |  |  |  |  |  |     |   move.b d0,(a0)
					target[3] = 255;
    9a82:	|  |  |  |  |  |  |     |   movea.l 30(sp),a0
    9a86:	|  |  |  |  |  |  |     |   addq.l #3,a0
    9a88:	|  |  |  |  |  |  |     |   st (a0)
				}
				t1++;
    9a8a:	|  |  |  |  |  |  |     \-> addq.l #1,136(sp)
			while (n --) {
    9a8e:	|  |  |  |  |  |  \-------> move.l 128(sp),d0
    9a92:	|  |  |  |  |  |            move.l d0,d1
    9a94:	|  |  |  |  |  |            subq.l #1,d1
    9a96:	|  |  |  |  |  |            move.l d1,128(sp)
    9a9a:	|  |  |  |  |  |            tst.l d0
    9a9c:	|  |  |  |  |  \----------- bne.w 99dc <loadHSI+0x212>
		while (t1 < realPicWidth) {
    9aa0:	|  |  |  |  \-------------> movea.l 136(sp),a0
    9aa4:	|  |  |  |                  cmpa.l 54(sp),a0
    9aa8:	|  |  |  \----------------- bcs.w 9988 <loadHSI+0x1be>
	for (t2 = 0; t2 < realPicHeight; t2 ++) {
    9aac:	|  |  |                     addq.l #1,132(sp)
    9ab0:	|  |  \-------------------> move.l 132(sp),d0
    9ab4:	|  |                        cmp.l 46(sp),d0
    9ab8:	|  \----------------------- bcs.w 9980 <loadHSI+0x1b6>
			}
		}
	}

	
	backdropExists = TRUE;
    9abc:	|                           move.w #1,19cf8 <backdropExists>
	return TRUE;
    9ac4:	|                           moveq #1,d0
}
    9ac6:	\-------------------------> movem.l (sp)+,d2-d4/a6
    9aca:	                            lea 124(sp),sp
    9ace:	                            rts

00009ad0 <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9ad0:	subq.l #8,sp
    9ad2:	movea.l 12(sp),a0
    9ad6:	move.l 16(sp),d1
    9ada:	move.l 20(sp),d0
    9ade:	movea.w a0,a0
    9ae0:	move.w a0,6(sp)
    9ae4:	move.w d1,d1
    9ae6:	move.w d1,4(sp)
    9aea:	move.w d0,d0
    9aec:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9af0:	pea 16472 <graphics.c.1c13408a+0x2b0>
    9af6:	jsr 12ed6 <KPrintF>
    9afc:	addq.l #4,sp

}
    9afe:	nop
    9b00:	addq.l #8,sp
    9b02:	rts

00009b04 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9b04:	pea 16495 <graphics.c.1c13408a+0x2d3>
    9b0a:	jsr 12ed6 <KPrintF>
    9b10:	addq.l #4,sp
}
    9b12:	nop
    9b14:	rts

00009b16 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    9b16:	pea 19cfe <snapshotTextureName>
    9b1c:	pea 1 <_start+0x1>
    9b20:	jsr 1546 <deleteTextures>
    9b26:	addq.l #8,sp
	snapshotTextureName = 0;
    9b28:	clr.l 19cfe <snapshotTextureName>
}
    9b2e:	nop
    9b30:	rts

00009b32 <reserveBackdrop>:

BOOL reserveBackdrop () {
    9b32:	    lea -16(sp),sp
    9b36:	    move.l a6,-(sp)
	if(backdropTexture) FreeVec(backdropTexture);
    9b38:	    move.l 19ce8 <backdropTexture>,d0
    9b3e:	/-- beq.s 9b58 <reserveBackdrop+0x26>
    9b40:	|   move.l 19ce8 <backdropTexture>,16(sp)
    9b48:	|   move.l 19c50 <SysBase>,d0
    9b4e:	|   movea.l d0,a6
    9b50:	|   movea.l 16(sp),a1
    9b54:	|   jsr -690(a6)
	backdropTexture = AllocVec( sceneWidth*sceneHeight*4, MEMF_ANY );
    9b58:	\-> move.l 19cec <sceneWidth>,d0
    9b5e:	    move.l 19cf0 <sceneHeight>,d1
    9b64:	    move.l d1,-(sp)
    9b66:	    move.l d0,-(sp)
    9b68:	    jsr 13888 <__mulsi3>
    9b6e:	    addq.l #8,sp
    9b70:	    add.l d0,d0
    9b72:	    add.l d0,d0
    9b74:	    move.l d0,12(sp)
    9b78:	    clr.l 8(sp)
    9b7c:	    move.l 19c50 <SysBase>,d0
    9b82:	    movea.l d0,a6
    9b84:	    move.l 12(sp),d0
    9b88:	    move.l 8(sp),d1
    9b8c:	    jsr -684(a6)
    9b90:	    move.l d0,4(sp)
    9b94:	    move.l 4(sp),d0
    9b98:	    move.l d0,19ce8 <backdropTexture>

	return CstReserveBackdrop(sceneWidth, sceneHeight);
    9b9e:	    move.l 19cf0 <sceneHeight>,d0
    9ba4:	    move.l d0,d1
    9ba6:	    move.l 19cec <sceneWidth>,d0
    9bac:	    move.l d1,-(sp)
    9bae:	    move.l d0,-(sp)
    9bb0:	    jsr 1220 <CstReserveBackdrop>
    9bb6:	    addq.l #8,sp
}
    9bb8:	    movea.l (sp)+,a6
    9bba:	    lea 16(sp),sp
    9bbe:	    rts

00009bc0 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    9bc0:	jsr 9638 <killBackDrop>
	killParallax ();
    9bc6:	jsr 9660 <killParallax>
	killZBuffer ();
    9bcc:	jsr 1bb6 <killZBuffer>
	sceneWidth = x;
    9bd2:	move.l 4(sp),d0
    9bd6:	move.l d0,19cec <sceneWidth>
	sceneHeight = y;	
    9bdc:	move.l 8(sp),d0
    9be0:	move.l d0,19cf0 <sceneHeight>
	return reserveBackdrop();
    9be6:	jsr 9b32 <reserveBackdrop>
}
    9bec:	rts

00009bee <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    9bee:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    9bf0:	move.l 12(sp),-(sp)
    9bf4:	jsr 6bc <get2bytes>
    9bfa:	addq.l #4,sp
    9bfc:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    9c00:	move.l 12(sp),-(sp)
    9c04:	jsr 6bc <get2bytes>
    9c0a:	addq.l #4,sp
    9c0c:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    9c0e:	moveq #1,d0
}
    9c10:	addq.l #8,sp
    9c12:	rts

00009c14 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    9c14:	   /-> lea -12(sp),sp
    9c18:	   |   move.l a6,-(sp)
    9c1a:	   |   move.l d2,-(sp)
	if (me) {
    9c1c:	   |   tst.l 24(sp)
    9c20:	/--|-- beq.w 9cb6 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    9c24:	|  |   movea.l 24(sp),a0
    9c28:	|  |   move.l 42(a0),d0
    9c2c:	|  |   move.l 28(sp),-(sp)
    9c30:	|  |   move.l d0,-(sp)
    9c32:	|  \-- jsr 9c14 <saveParallaxRecursive>(pc)
    9c36:	|      addq.l #8,sp
		FPutC (fp, 1);
    9c38:	|      move.l 28(sp),16(sp)
    9c3e:	|      moveq #1,d0
    9c40:	|      move.l d0,12(sp)
    9c44:	|      move.l 19c58 <DOSBase>,d0
    9c4a:	|      movea.l d0,a6
    9c4c:	|      move.l 16(sp),d1
    9c50:	|      move.l 12(sp),d2
    9c54:	|      jsr -312(a6)
    9c58:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    9c5c:	|      movea.l 24(sp),a0
    9c60:	|      move.w 28(a0),d0
    9c64:	|      move.w d0,d0
    9c66:	|      andi.l #65535,d0
    9c6c:	|      move.l 28(sp),-(sp)
    9c70:	|      move.l d0,-(sp)
    9c72:	|      jsr 8d0 <put2bytes>
    9c78:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    9c7a:	|      movea.l 24(sp),a0
    9c7e:	|      move.w 30(a0),d0
    9c82:	|      move.w d0,d0
    9c84:	|      andi.l #65535,d0
    9c8a:	|      move.l 28(sp),-(sp)
    9c8e:	|      move.l d0,-(sp)
    9c90:	|      jsr 8d0 <put2bytes>
    9c96:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    9c98:	|      movea.l 24(sp),a0
    9c9c:	|      move.w 32(a0),d0
    9ca0:	|      move.w d0,d0
    9ca2:	|      andi.l #65535,d0
    9ca8:	|      move.l 28(sp),-(sp)
    9cac:	|      move.l d0,-(sp)
    9cae:	|      jsr 8d0 <put2bytes>
    9cb4:	|      addq.l #8,sp
	}
}
    9cb6:	\----> nop
    9cb8:	       move.l (sp)+,d2
    9cba:	       movea.l (sp)+,a6
    9cbc:	       lea 12(sp),sp
    9cc0:	       rts

00009cc2 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    9cc2:	pea 164ce <graphics.c.1c13408a+0x30c>
    9cc8:	jsr 12ed6 <KPrintF>
    9cce:	addq.l #4,sp
	return TRUE;
    9cd0:	moveq #1,d0
    9cd2:	rts

00009cd4 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    9cd4:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    9cd6:	             move.l 19d02 <allObjectTypes>,(sp)

	while (huntType) {
    9cdc:	      /----- bra.s 9cf4 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    9cde:	   /--|----> movea.l (sp),a0
    9ce0:	   |  |      move.l 4(a0),d0
    9ce4:	   |  |      cmp.l 8(sp),d0
    9ce8:	   |  |  /-- bne.s 9cee <findObjectType+0x1a>
    9cea:	   |  |  |   move.l (sp),d0
    9cec:	/--|--|--|-- bra.s 9d04 <findObjectType+0x30>
		huntType = huntType -> next;
    9cee:	|  |  |  \-> movea.l (sp),a0
    9cf0:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    9cf4:	|  |  \----> tst.l (sp)
    9cf6:	|  \-------- bne.s 9cde <findObjectType+0xa>
	}

	return loadObjectType (i);
    9cf8:	|            move.l 8(sp),-(sp)
    9cfc:	|            jsr 9dc4 <loadObjectType>
    9d02:	|            addq.l #4,sp
}
    9d04:	\----------> addq.l #4,sp
    9d06:	             rts

00009d08 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    9d08:	             lea -12(sp),sp
	int i, num = 0;
    9d0c:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    9d10:	             move.l 20(sp),-(sp)
    9d14:	             jsr 9cd4 <findObjectType>
    9d1a:	             addq.l #4,sp
    9d1c:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    9d1e:	             clr.l 8(sp)
    9d22:	   /-------- bra.s 9d58 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    9d24:	/--|-------> movea.l (sp),a0
    9d26:	|  |         move.l 38(a0),d1
    9d2a:	|  |         move.l 8(sp),d0
    9d2e:	|  |         lsl.l #3,d0
    9d30:	|  |         movea.l d1,a0
    9d32:	|  |         adda.l d0,a0
    9d34:	|  |         move.l (a0),d0
    9d36:	|  |         cmp.l 16(sp),d0
    9d3a:	|  |  /----- bne.s 9d54 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    9d3c:	|  |  |      movea.l (sp),a0
    9d3e:	|  |  |      move.l 38(a0),d1
    9d42:	|  |  |      move.l 8(sp),d0
    9d46:	|  |  |      lsl.l #3,d0
    9d48:	|  |  |      movea.l d1,a0
    9d4a:	|  |  |      adda.l d0,a0
    9d4c:	|  |  |      move.l 4(a0),4(sp)
			break;
    9d52:	|  |  |  /-- bra.s 9d64 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9d54:	|  |  \--|-> addq.l #1,8(sp)
    9d58:	|  \-----|-> movea.l (sp),a0
    9d5a:	|        |   move.l 16(a0),d0
    9d5e:	|        |   cmp.l 8(sp),d0
    9d62:	\--------|-- bgt.s 9d24 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9d64:	         \-> move.l 4(sp),d0
}
    9d68:	             lea 12(sp),sp
    9d6c:	             rts

00009d6e <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    9d6e:	moveq #1,d0
}
    9d70:	rts

00009d72 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    9d72:	subq.l #8,sp
    9d74:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    9d76:	move.l 16(sp),-(sp)
    9d7a:	jsr 6bc <get2bytes>
    9d80:	addq.l #4,sp
    9d82:	move.l d0,-(sp)
    9d84:	jsr 9dc4 <loadObjectType>
    9d8a:	addq.l #4,sp
    9d8c:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    9d90:	movea.l 8(sp),a0
    9d94:	move.l (a0),4(sp)
    9d98:	move.l 19c50 <SysBase>,d0
    9d9e:	movea.l d0,a6
    9da0:	movea.l 4(sp),a1
    9da4:	jsr -690(a6)
	r -> screenName = readString (fp);
    9da8:	move.l 16(sp),-(sp)
    9dac:	jsr b02 <readString>
    9db2:	addq.l #4,sp
    9db4:	movea.l 8(sp),a0
    9db8:	move.l d0,(a0)
	return r;
    9dba:	move.l 8(sp),d0
}
    9dbe:	movea.l (sp)+,a6
    9dc0:	addq.l #8,sp
    9dc2:	rts

00009dc4 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    9dc4:	          lea -84(sp),sp
    9dc8:	          move.l a6,-(sp)
    9dca:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9dcc:	          moveq #42,d0
    9dce:	          move.l d0,84(sp)
    9dd2:	          clr.l 80(sp)
    9dd6:	          move.l 19c50 <SysBase>,d0
    9ddc:	          movea.l d0,a6
    9dde:	          move.l 84(sp),d0
    9de2:	          move.l 80(sp),d1
    9de6:	          jsr -684(a6)
    9dea:	          move.l d0,76(sp)
    9dee:	          move.l 76(sp),d0
    9df2:	          move.l d0,72(sp)

    if (newType) {
    9df6:	/-------- beq.w a070 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9dfa:	|         move.l 96(sp),-(sp)
    9dfe:	|         jsr 456a <openObjectSlice>
    9e04:	|         addq.l #4,sp
    9e06:	|         tst.w d0
    9e08:	+-------- beq.w a070 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9e0c:	|         move.l 19c38 <bigDataFile>,d0
    9e12:	|         move.l d0,-(sp)
    9e14:	|         jsr 6bc <get2bytes>
    9e1a:	|         addq.l #4,sp
    9e1c:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    9e20:	|         move.l 19c38 <bigDataFile>,64(sp)
    9e28:	|         move.l 19c58 <DOSBase>,d0
    9e2e:	|         movea.l d0,a6
    9e30:	|         move.l 64(sp),d1
    9e34:	|         jsr -306(a6)
    9e38:	|         move.l d0,60(sp)
    9e3c:	|         move.l 60(sp),d0
    9e40:	|         move.l d0,d0
    9e42:	|         movea.l 72(sp),a0
    9e46:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9e4a:	|         move.l 19c38 <bigDataFile>,56(sp)
    9e52:	|         move.l 19c58 <DOSBase>,d0
    9e58:	|         movea.l d0,a6
    9e5a:	|         move.l 56(sp),d1
    9e5e:	|         jsr -306(a6)
    9e62:	|         move.l d0,52(sp)
    9e66:	|         move.l 52(sp),d0
    9e6a:	|         move.l d0,d0
    9e6c:	|         movea.l 72(sp),a0
    9e70:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    9e74:	|         move.l 19c38 <bigDataFile>,48(sp)
    9e7c:	|         move.l 19c58 <DOSBase>,d0
    9e82:	|         movea.l d0,a6
    9e84:	|         move.l 48(sp),d1
    9e88:	|         jsr -306(a6)
    9e8c:	|         move.l d0,44(sp)
    9e90:	|         move.l 44(sp),d0
    9e94:	|         move.l d0,d0
    9e96:	|         movea.l 72(sp),a0
    9e9a:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    9e9e:	|         move.l 19c38 <bigDataFile>,40(sp)
    9ea6:	|         move.l 19c58 <DOSBase>,d0
    9eac:	|         movea.l d0,a6
    9eae:	|         move.l 40(sp),d1
    9eb2:	|         jsr -306(a6)
    9eb6:	|         move.l d0,36(sp)
    9eba:	|         move.l 36(sp),d0
    9ebe:	|         movea.l 72(sp),a0
    9ec2:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    9ec6:	|         move.l 19c38 <bigDataFile>,32(sp)
    9ece:	|         move.l 19c58 <DOSBase>,d0
    9ed4:	|         movea.l d0,a6
    9ed6:	|         move.l 32(sp),d1
    9eda:	|         jsr -306(a6)
    9ede:	|         move.l d0,28(sp)
    9ee2:	|         move.l 28(sp),d0
    9ee6:	|         movea.l 72(sp),a0
    9eea:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9eee:	|         move.l 19c38 <bigDataFile>,d0
    9ef4:	|         move.l d0,-(sp)
    9ef6:	|         jsr 718 <get4bytes>
    9efc:	|         addq.l #4,sp
    9efe:	|         movea.l 72(sp),a0
    9f02:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    9f06:	|         move.l 19c38 <bigDataFile>,d0
    9f0c:	|         move.l d0,-(sp)
    9f0e:	|         jsr 6bc <get2bytes>
    9f14:	|         addq.l #4,sp
    9f16:	|         movea.l 72(sp),a0
    9f1a:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9f1e:	|         move.l 19c38 <bigDataFile>,24(sp)
    9f26:	|         move.l 19c58 <DOSBase>,d0
    9f2c:	|         movea.l d0,a6
    9f2e:	|         move.l 24(sp),d1
    9f32:	|         jsr -306(a6)
    9f36:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9f3a:	|         move.l 19c38 <bigDataFile>,d0
    9f40:	|         move.l d0,-(sp)
    9f42:	|         jsr 7d8 <getFloat>
    9f48:	|         addq.l #4,sp
            getFloat(bigDataFile);
    9f4a:	|         move.l 19c38 <bigDataFile>,d0
    9f50:	|         move.l d0,-(sp)
    9f52:	|         jsr 7d8 <getFloat>
    9f58:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    9f5a:	|         move.l 19c38 <bigDataFile>,d0
    9f60:	|         move.l d0,-(sp)
    9f62:	|         jsr 6bc <get2bytes>
    9f68:	|         addq.l #4,sp
    9f6a:	|         move.l d0,d0
    9f6c:	|         movea.l 72(sp),a0
    9f70:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9f74:	|         move.l 19c38 <bigDataFile>,d0
    9f7a:	|         move.l d0,-(sp)
    9f7c:	|         jsr 6bc <get2bytes>
    9f82:	|         addq.l #4,sp
    9f84:	|         movea.l 72(sp),a0
    9f88:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    9f8c:	|         movea.l 72(sp),a0
    9f90:	|         move.l 16(a0),d0
    9f94:	|  /----- beq.s 9fc6 <loadObjectType+0x202>
    9f96:	|  |      movea.l 72(sp),a0
    9f9a:	|  |      move.l 16(a0),d0
    9f9e:	|  |      lsl.l #3,d0
    9fa0:	|  |      move.l d0,16(sp)
    9fa4:	|  |      clr.l 12(sp)
    9fa8:	|  |      move.l 19c50 <SysBase>,d0
    9fae:	|  |      movea.l d0,a6
    9fb0:	|  |      move.l 16(sp),d0
    9fb4:	|  |      move.l 12(sp),d1
    9fb8:	|  |      jsr -684(a6)
    9fbc:	|  |      move.l d0,8(sp)
    9fc0:	|  |      move.l 8(sp),d0
    9fc4:	|  |  /-- bra.s 9fc8 <loadObjectType+0x204>
    9fc6:	|  \--|-> moveq #0,d0
    9fc8:	|     \-> movea.l 72(sp),a0
    9fcc:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    9fd0:	|         clr.l 88(sp)
    9fd4:	|     /-- bra.s a024 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9fd6:	|  /--|-> move.l 19c38 <bigDataFile>,d1
    9fdc:	|  |  |   movea.l 72(sp),a0
    9fe0:	|  |  |   movea.l 38(a0),a0
    9fe4:	|  |  |   move.l 88(sp),d0
    9fe8:	|  |  |   lsl.l #3,d0
    9fea:	|  |  |   lea (0,a0,d0.l),a2
    9fee:	|  |  |   move.l d1,-(sp)
    9ff0:	|  |  |   jsr 6bc <get2bytes>
    9ff6:	|  |  |   addq.l #4,sp
    9ff8:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9ffa:	|  |  |   move.l 19c38 <bigDataFile>,d1
    a000:	|  |  |   movea.l 72(sp),a0
    a004:	|  |  |   movea.l 38(a0),a0
    a008:	|  |  |   move.l 88(sp),d0
    a00c:	|  |  |   lsl.l #3,d0
    a00e:	|  |  |   lea (0,a0,d0.l),a2
    a012:	|  |  |   move.l d1,-(sp)
    a014:	|  |  |   jsr 6bc <get2bytes>
    a01a:	|  |  |   addq.l #4,sp
    a01c:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    a020:	|  |  |   addq.l #1,88(sp)
    a024:	|  |  \-> movea.l 72(sp),a0
    a028:	|  |      move.l 16(a0),d0
    a02c:	|  |      cmp.l 88(sp),d0
    a030:	|  \----- bgt.s 9fd6 <loadObjectType+0x212>
            }
            finishAccess();
    a032:	|         jsr 439a <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    a038:	|         move.l 68(sp),-(sp)
    a03c:	|         jsr 43a4 <getNumberedString>
    a042:	|         addq.l #4,sp
    a044:	|         movea.l 72(sp),a0
    a048:	|         move.l d0,(a0)
            newType->objectNum = i;
    a04a:	|         movea.l 72(sp),a0
    a04e:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    a054:	|         move.l 19d02 <allObjectTypes>,d0
    a05a:	|         movea.l 72(sp),a0
    a05e:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    a062:	|         move.l 72(sp),19d02 <allObjectTypes>
            return newType;
    a06a:	|         move.l 72(sp),d0
    a06e:	|     /-- bra.s a072 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    a070:	\-----|-> moveq #0,d0
}
    a072:	      \-> movea.l (sp)+,a2
    a074:	          movea.l (sp)+,a6
    a076:	          lea 84(sp),sp
    a07a:	          rts

0000a07c <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    a07c:	             lea -16(sp),sp
    a080:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    a082:	             move.l #105730,16(sp)

	while (* huntRegion) {
    a08a:	   /-------- bra.s a0fe <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    a08c:	/--|-------> movea.l 16(sp),a0
    a090:	|  |         move.l (a0),d0
    a092:	|  |         cmp.l 24(sp),d0
    a096:	|  |  /----- bne.s a0f0 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    a098:	|  |  |      movea.l 24(sp),a0
    a09c:	|  |  |      move.l 8(a0),d0
    a0a0:	|  |  |      movea.l 16(sp),a0
    a0a4:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    a0a6:	|  |  |      movea.l 24(sp),a0
    a0aa:	|  |  |      move.l 38(a0),12(sp)
    a0b0:	|  |  |      move.l 19c50 <SysBase>,d0
    a0b6:	|  |  |      movea.l d0,a6
    a0b8:	|  |  |      movea.l 12(sp),a1
    a0bc:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    a0c0:	|  |  |      movea.l 24(sp),a0
    a0c4:	|  |  |      move.l (a0),8(sp)
    a0c8:	|  |  |      move.l 19c50 <SysBase>,d0
    a0ce:	|  |  |      movea.l d0,a6
    a0d0:	|  |  |      movea.l 8(sp),a1
    a0d4:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    a0d8:	|  |  |      move.l 24(sp),4(sp)
    a0de:	|  |  |      move.l 19c50 <SysBase>,d0
    a0e4:	|  |  |      movea.l d0,a6
    a0e6:	|  |  |      movea.l 4(sp),a1
    a0ea:	|  |  |      jsr -690(a6)
			return;
    a0ee:	|  |  |  /-- bra.s a114 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    a0f0:	|  |  \--|-> movea.l 16(sp),a0
    a0f4:	|  |     |   move.l (a0),d0
    a0f6:	|  |     |   move.l d0,d1
    a0f8:	|  |     |   addq.l #8,d1
    a0fa:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    a0fe:	|  \-----|-> movea.l 16(sp),a0
    a102:	|        |   move.l (a0),d0
    a104:	\--------|-- bne.s a08c <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    a106:	         |   pea 164f5 <graphics.c.1c13408a+0x333>
    a10c:	         |   jsr 12ed6 <KPrintF>
    a112:	         |   addq.l #4,sp
}
    a114:	         \-> movea.l (sp)+,a6
    a116:	             lea 16(sp),sp
    a11a:	             rts

0000a11c <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    a11c:	movea.l 4(sp),a0
    a120:	move.l 4(a0),d0
    a124:	move.l 8(sp),-(sp)
    a128:	move.l d0,-(sp)
    a12a:	jsr 8d0 <put2bytes>
    a130:	addq.l #8,sp
	writeString (r -> screenName, fp);
    a132:	movea.l 4(sp),a0
    a136:	move.l (a0),d0
    a138:	move.l 8(sp),-(sp)
    a13c:	move.l d0,-(sp)
    a13e:	jsr bd8 <writeString>
    a144:	addq.l #8,sp
    a146:	nop
    a148:	rts

0000a14a <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    a14a:	                         lea -112(sp),sp
    a14e:	                         move.l a6,-(sp)
    a150:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    a152:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    a156:	                         move.w 19d08 <saveEncoding>,d0
    a15c:	                  /----- beq.s a166 <fileToStack+0x1c>
    a15e:	                  |      move.l #91419,d0
    a164:	                  |  /-- bra.s a16c <fileToStack+0x22>
    a166:	                  \--|-> move.l #91445,d0
    a16c:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    a170:	                         move.l 124(sp),112(sp)
    a176:	                         move.l #1005,108(sp)
    a17e:	                         move.l 19c58 <DOSBase>,d0
    a184:	                         movea.l d0,a6
    a186:	                         move.l 112(sp),d1
    a18a:	                         move.l 108(sp),d2
    a18e:	                         jsr -30(a6)
    a192:	                         move.l d0,104(sp)
    a196:	                         move.l 104(sp),d0
    a19a:	                         move.l d0,100(sp)
    if (!fp) {
    a19e:	                     /-- bne.s a1b8 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    a1a0:	                     |   move.l 124(sp),-(sp)
    a1a4:	                     |   pea 1654c <graphics.c.1c13408a+0x38a>
    a1aa:	                     |   jsr 12ed6 <KPrintF>
    a1b0:	                     |   addq.l #8,sp
        return FALSE;
    a1b2:	                     |   clr.w d0
    a1b4:	/--------------------|-- bra.w a4ae <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    a1b8:	|                    \-> move.w 19d08 <saveEncoding>,d0
    a1be:	|                        move.l d0,d0
    a1c0:	|                        move.b d0,19d06 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    a1c6:	|                        move.w 19d08 <saveEncoding>,d0
    a1cc:	|                        lsr.w #8,d0
    a1ce:	|                        move.l d0,d0
    a1d0:	|                        move.b d0,19d07 <encode2>

    while (*checker) {
    a1d6:	|                 /----- bra.s a23a <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    a1d8:	|              /--|----> move.l 100(sp),30(sp)
    a1de:	|              |  |      move.l 19c58 <DOSBase>,d0
    a1e4:	|              |  |      movea.l d0,a6
    a1e6:	|              |  |      move.l 30(sp),d1
    a1ea:	|              |  |      jsr -306(a6)
    a1ee:	|              |  |      move.l d0,26(sp)
    a1f2:	|              |  |      move.l 26(sp),d1
    a1f6:	|              |  |      movea.l 116(sp),a0
    a1fa:	|              |  |      move.b (a0),d0
    a1fc:	|              |  |      ext.w d0
    a1fe:	|              |  |      movea.w d0,a0
    a200:	|              |  |      cmpa.l d1,a0
    a202:	|              |  |  /-- beq.s a236 <fileToStack+0xec>
            Close(fp);
    a204:	|              |  |  |   move.l 100(sp),22(sp)
    a20a:	|              |  |  |   move.l 19c58 <DOSBase>,d0
    a210:	|              |  |  |   movea.l d0,a6
    a212:	|              |  |  |   move.l 22(sp),d1
    a216:	|              |  |  |   jsr -36(a6)
    a21a:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    a21e:	|              |  |  |   move.l 124(sp),-(sp)
    a222:	|              |  |  |   pea 16559 <graphics.c.1c13408a+0x397>
    a228:	|              |  |  |   jsr 12ed6 <KPrintF>
    a22e:	|              |  |  |   addq.l #8,sp
            return FALSE;
    a230:	|              |  |  |   clr.w d0
    a232:	+--------------|--|--|-- bra.w a4ae <fileToStack+0x364>
        }
        checker++;
    a236:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    a23a:	|              |  \----> movea.l 116(sp),a0
    a23e:	|              |         move.b (a0),d0
    a240:	|              \-------- bne.s a1d8 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    a242:	|                        move.w 19d08 <saveEncoding>,d0
    a248:	|  /-------------------- beq.s a2bc <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    a24a:	|  |                     move.l 100(sp),-(sp)
    a24e:	|  |                     jsr a4b8 <readStringEncoded>
    a254:	|  |                     addq.l #4,sp
    a256:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    a25a:	|  |                     pea 1659a <graphics.c.1c13408a+0x3d8>
    a260:	|  |                     move.l 100(sp),-(sp)
    a264:	|  |                     jsr 1032e <strcmp>
    a26a:	|  |                     addq.l #8,sp
    a26c:	|  |                     tst.l d0
    a26e:	|  |                 /-- beq.s a2a2 <fileToStack+0x158>
            Close(fp);
    a270:	|  |                 |   move.l 100(sp),88(sp)
    a276:	|  |                 |   move.l 19c58 <DOSBase>,d0
    a27c:	|  |                 |   movea.l d0,a6
    a27e:	|  |                 |   move.l 88(sp),d1
    a282:	|  |                 |   jsr -36(a6)
    a286:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    a28a:	|  |                 |   move.l 124(sp),-(sp)
    a28e:	|  |                 |   pea 165a9 <graphics.c.1c13408a+0x3e7>
    a294:	|  |                 |   jsr 12ed6 <KPrintF>
    a29a:	|  |                 |   addq.l #8,sp
            return FALSE;
    a29c:	|  |                 |   clr.w d0
    a29e:	+--|-----------------|-- bra.w a4ae <fileToStack+0x364>
        }
        FreeVec(checker);
    a2a2:	|  |                 \-> move.l 96(sp),92(sp)
    a2a8:	|  |                     move.l 19c50 <SysBase>,d0
    a2ae:	|  |                     movea.l d0,a6
    a2b0:	|  |                     movea.l 92(sp),a1
    a2b4:	|  |                     jsr -690(a6)
        checker = NULL;
    a2b8:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    a2bc:	|  >-------------------> move.w 19d08 <saveEncoding>,d0
    a2c2:	|  |     /-------------- beq.w a3f6 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    a2c6:	|  |     |               move.l 100(sp),76(sp)
    a2cc:	|  |     |               move.l 19c58 <DOSBase>,d0
    a2d2:	|  |     |               movea.l d0,a6
    a2d4:	|  |     |               move.l 76(sp),d1
    a2d8:	|  |     |               jsr -306(a6)
    a2dc:	|  |     |               move.l d0,72(sp)
    a2e0:	|  |     |               move.l 72(sp),d0
    a2e4:	|  |     |               move.b 19d06 <encode1>,d1
    a2ea:	|  |     |               ext.w d1
    a2ec:	|  |     |               ext.l d1
    a2ee:	|  |     |               move.l d0,d2
    a2f0:	|  |     |               eor.l d1,d2
    a2f2:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    a2f6:	|  |     |               moveq #-1,d0
    a2f8:	|  |     |               cmp.l 68(sp),d0
    a2fc:	|  |  /--|-------------- beq.w a48c <fileToStack+0x342>

            char i = (char) tmp;
    a300:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    a306:	|  |  |  |               move.b 67(sp),d0
    a30a:	|  |  |  |               ext.w d0
    a30c:	|  |  |  |               movea.w d0,a0
    a30e:	|  |  |  |               moveq #2,d2
    a310:	|  |  |  |               cmp.l a0,d2
    a312:	|  |  |  |     /-------- beq.s a38e <fileToStack+0x244>
    a314:	|  |  |  |     |         moveq #2,d0
    a316:	|  |  |  |     |         cmp.l a0,d0
    a318:	|  |  |  |  /--|-------- blt.w a3c4 <fileToStack+0x27a>
    a31c:	|  |  |  |  |  |         cmpa.w #0,a0
    a320:	|  |  |  |  |  |     /-- beq.s a32c <fileToStack+0x1e2>
    a322:	|  |  |  |  |  |     |   moveq #1,d2
    a324:	|  |  |  |  |  |     |   cmp.l a0,d2
    a326:	|  |  |  |  |  |  /--|-- beq.s a368 <fileToStack+0x21e>
    a328:	|  |  |  |  +--|--|--|-- bra.w a3c4 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    a32c:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    a330:	|  |  |  |  |  |  |      jsr a4b8 <readStringEncoded>
    a336:	|  |  |  |  |  |  |      addq.l #4,sp
    a338:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    a33c:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    a340:	|  |  |  |  |  |  |      lea 14(sp),a0
    a344:	|  |  |  |  |  |  |      move.l a0,-(sp)
    a346:	|  |  |  |  |  |  |      jsr 110a4 <makeTextVar>
    a34c:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    a34e:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    a354:	|  |  |  |  |  |  |      move.l 19c50 <SysBase>,d0
    a35a:	|  |  |  |  |  |  |      movea.l d0,a6
    a35c:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    a360:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    a364:	|  |  |  |  |  |  |  /-- bra.w a41c <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    a368:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    a36c:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    a372:	|  |  |  |  |  |     |   addq.l #4,sp
    a374:	|  |  |  |  |  |     |   move.l d0,-(sp)
    a376:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    a37a:	|  |  |  |  |  |     |   lea 18(sp),a0
    a37e:	|  |  |  |  |  |     |   move.l a0,-(sp)
    a380:	|  |  |  |  |  |     |   jsr 11774 <setVariable>
    a386:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    a38a:	|  |  |  |  |  |     +-- bra.w a41c <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    a38e:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    a394:	|  |  |  |  |        |   move.l 19c58 <DOSBase>,d0
    a39a:	|  |  |  |  |        |   movea.l d0,a6
    a39c:	|  |  |  |  |        |   move.l 62(sp),d1
    a3a0:	|  |  |  |  |        |   jsr -306(a6)
    a3a4:	|  |  |  |  |        |   move.l d0,58(sp)
    a3a8:	|  |  |  |  |        |   move.l 58(sp),d0
    a3ac:	|  |  |  |  |        |   move.l d0,-(sp)
    a3ae:	|  |  |  |  |        |   pea 1 <_start+0x1>
    a3b2:	|  |  |  |  |        |   lea 18(sp),a0
    a3b6:	|  |  |  |  |        |   move.l a0,-(sp)
    a3b8:	|  |  |  |  |        |   jsr 11774 <setVariable>
    a3be:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    a3c2:	|  |  |  |  |        +-- bra.s a41c <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    a3c4:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    a3c8:	|  |  |  |           |   pea 1662b <newfatal.c.307beca7+0x69>
    a3ce:	|  |  |  |           |   jsr 12ed6 <KPrintF>
    a3d4:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    a3d6:	|  |  |  |           |   move.l 100(sp),46(sp)
    a3dc:	|  |  |  |           |   move.l 19c58 <DOSBase>,d0
    a3e2:	|  |  |  |           |   movea.l d0,a6
    a3e4:	|  |  |  |           |   move.l 46(sp),d1
    a3e8:	|  |  |  |           |   jsr -36(a6)
    a3ec:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    a3f0:	|  |  |  |           |   clr.w d0
    a3f2:	+--|--|--|-----------|-- bra.w a4ae <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    a3f6:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    a3fa:	|  |  |              |   jsr a57e <readTextPlain>
    a400:	|  |  |              |   addq.l #4,sp
    a402:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    a406:	|  |  |        /-----|-- beq.w a490 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    a40a:	|  |  |        |     |   move.l 80(sp),-(sp)
    a40e:	|  |  |        |     |   lea 14(sp),a0
    a412:	|  |  |        |     |   move.l a0,-(sp)
    a414:	|  |  |        |     |   jsr 110a4 <makeTextVar>
    a41a:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    a41c:	|  |  |        |     \-> movea.l 128(sp),a0
    a420:	|  |  |        |         move.l (a0),d0
    a422:	|  |  |        |  /----- bne.s a452 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    a424:	|  |  |        |  |      move.l 128(sp),d0
    a428:	|  |  |        |  |      move.l d0,-(sp)
    a42a:	|  |  |        |  |      lea 14(sp),a0
    a42e:	|  |  |        |  |      move.l a0,-(sp)
    a430:	|  |  |        |  |      jsr 10744 <addVarToStackQuick>
    a436:	|  |  |        |  |      addq.l #8,sp
    a438:	|  |  |        |  |      tst.w d0
    a43a:	|  |  |        |  |  /-- bne.s a440 <fileToStack+0x2f6>
    a43c:	|  |  |        |  |  |   clr.w d0
    a43e:	+--|--|--------|--|--|-- bra.s a4ae <fileToStack+0x364>
            sH->last = sH->first;
    a440:	|  |  |        |  |  \-> movea.l 128(sp),a0
    a444:	|  |  |        |  |      move.l (a0),d0
    a446:	|  |  |        |  |      movea.l 128(sp),a0
    a44a:	|  |  |        |  |      move.l d0,4(a0)
    a44e:	|  +--|--------|--|----- bra.w a2bc <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    a452:	|  |  |        |  \----> movea.l 128(sp),a0
    a456:	|  |  |        |         move.l 4(a0),d0
    a45a:	|  |  |        |         addq.l #8,d0
    a45c:	|  |  |        |         move.l d0,-(sp)
    a45e:	|  |  |        |         lea 14(sp),a0
    a462:	|  |  |        |         move.l a0,-(sp)
    a464:	|  |  |        |         jsr 10744 <addVarToStackQuick>
    a46a:	|  |  |        |         addq.l #8,sp
    a46c:	|  |  |        |         tst.w d0
    a46e:	|  |  |        |     /-- bne.s a474 <fileToStack+0x32a>
    a470:	|  |  |        |     |   clr.w d0
    a472:	+--|--|--------|-----|-- bra.s a4ae <fileToStack+0x364>
            sH->last = sH->last->next;
    a474:	|  |  |        |     \-> movea.l 128(sp),a0
    a478:	|  |  |        |         movea.l 4(a0),a0
    a47c:	|  |  |        |         move.l 8(a0),d0
    a480:	|  |  |        |         movea.l 128(sp),a0
    a484:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    a488:	|  \--|--------|-------- bra.w a2bc <fileToStack+0x172>
            if (tmp == -1) break;
    a48c:	|     \--------|-------> nop
    a48e:	|              |     /-- bra.s a492 <fileToStack+0x348>
            if (!line) break;
    a490:	|              \-----|-> nop
        }
    }
    Close(fp);
    a492:	|                    \-> move.l 100(sp),38(sp)
    a498:	|                        move.l 19c58 <DOSBase>,d0
    a49e:	|                        movea.l d0,a6
    a4a0:	|                        move.l 38(sp),d1
    a4a4:	|                        jsr -36(a6)
    a4a8:	|                        move.l d0,34(sp)
    return TRUE;
    a4ac:	|                        moveq #1,d0
}
    a4ae:	\----------------------> move.l (sp)+,d2
    a4b0:	                         movea.l (sp)+,a6
    a4b2:	                         lea 112(sp),sp
    a4b6:	                         rts

0000a4b8 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    a4b8:	          lea -32(sp),sp
    a4bc:	          move.l a6,-(sp)
    a4be:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    a4c0:	          move.l 44(sp),-(sp)
    a4c4:	          jsr 6bc <get2bytes>
    a4ca:	          addq.l #4,sp
    a4cc:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    a4d0:	          move.l 32(sp),d0
    a4d4:	          addq.l #1,d0
    a4d6:	          move.l d0,28(sp)
    a4da:	          clr.l 24(sp)
    a4de:	          move.l 19c50 <SysBase>,d0
    a4e4:	          movea.l d0,a6
    a4e6:	          move.l 28(sp),d0
    a4ea:	          move.l 24(sp),d1
    a4ee:	          jsr -684(a6)
    a4f2:	          move.l d0,20(sp)
    a4f6:	          move.l 20(sp),d0
    a4fa:	          move.l d0,16(sp)
    if (!s) return NULL;
    a4fe:	      /-- bne.s a504 <readStringEncoded+0x4c>
    a500:	      |   moveq #0,d0
    a502:	/-----|-- bra.s a574 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    a504:	|     \-> clr.l 36(sp)
    a508:	|     /-- bra.s a55a <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    a50a:	|  /--|-> move.l 44(sp),12(sp)
    a510:	|  |  |   move.l 19c58 <DOSBase>,d0
    a516:	|  |  |   movea.l d0,a6
    a518:	|  |  |   move.l 12(sp),d1
    a51c:	|  |  |   jsr -306(a6)
    a520:	|  |  |   move.l d0,8(sp)
    a524:	|  |  |   move.l 8(sp),d0
    a528:	|  |  |   move.l d0,d1
    a52a:	|  |  |   move.b 19d06 <encode1>,d2
    a530:	|  |  |   move.l 36(sp),d0
    a534:	|  |  |   movea.l 16(sp),a0
    a538:	|  |  |   adda.l d0,a0
    a53a:	|  |  |   move.b d1,d0
    a53c:	|  |  |   eor.b d2,d0
    a53e:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    a540:	|  |  |   move.b 19d06 <encode1>,d0
    a546:	|  |  |   move.b d0,d1
    a548:	|  |  |   move.b 19d07 <encode2>,d0
    a54e:	|  |  |   add.b d1,d0
    a550:	|  |  |   move.b d0,19d06 <encode1>
    for (a = 0; a < len; a++) {
    a556:	|  |  |   addq.l #1,36(sp)
    a55a:	|  |  \-> move.l 36(sp),d0
    a55e:	|  |      cmp.l 32(sp),d0
    a562:	|  \----- blt.s a50a <readStringEncoded+0x52>
    }
    s[len] = 0;
    a564:	|         move.l 32(sp),d0
    a568:	|         movea.l 16(sp),a0
    a56c:	|         adda.l d0,a0
    a56e:	|         clr.b (a0)
    return s;
    a570:	|         move.l 16(sp),d0
}
    a574:	\-------> move.l (sp)+,d2
    a576:	          movea.l (sp)+,a6
    a578:	          lea 32(sp),sp
    a57c:	          rts

0000a57e <readTextPlain>:

char *readTextPlain(BPTR fp) {
    a57e:	             lea -104(sp),sp
    a582:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    a586:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    a58a:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    a590:	             move.l 124(sp),106(sp)
    a596:	             clr.l 102(sp)
    a59a:	             clr.l 98(sp)
    a59e:	             move.l 19c58 <DOSBase>,d0
    a5a4:	             movea.l d0,a6
    a5a6:	             move.l 106(sp),d1
    a5aa:	             move.l 102(sp),d2
    a5ae:	             move.l 98(sp),d3
    a5b2:	             jsr -66(a6)
    a5b6:	             move.l d0,94(sp)
    a5ba:	             move.l 94(sp),d0
    a5be:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    a5c2:	   /-------- bra.s a606 <readTextPlain+0x88>
        tmp = FGetC(fp);
    a5c4:	/--|-------> move.l 124(sp),22(sp)
    a5ca:	|  |         move.l 19c58 <DOSBase>,d0
    a5d0:	|  |         movea.l d0,a6
    a5d2:	|  |         move.l 22(sp),d1
    a5d6:	|  |         jsr -306(a6)
    a5da:	|  |         move.l d0,18(sp)
    a5de:	|  |         move.l 18(sp),d0
    a5e2:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    a5e6:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    a5ec:	|  |         cmpi.b #10,17(sp)
    a5f2:	|  |  /----- beq.s a5fc <readTextPlain+0x7e>
    a5f4:	|  |  |      moveq #-1,d0
    a5f6:	|  |  |      cmp.l 110(sp),d0
    a5fa:	|  |  |  /-- bne.s a602 <readTextPlain+0x84>
            keepGoing = FALSE;
    a5fc:	|  |  \--|-> clr.w 114(sp)
    a600:	|  +-----|-- bra.s a606 <readTextPlain+0x88>
        } else {
            stringSize++;
    a602:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    a606:	|  \-------> tst.w 114(sp)
    a60a:	\----------- bne.s a5c4 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    a60c:	             tst.l 116(sp)
    a610:	         /-- bne.s a620 <readTextPlain+0xa2>
    a612:	         |   moveq #-1,d0
    a614:	         |   cmp.l 110(sp),d0
    a618:	         +-- bne.s a620 <readTextPlain+0xa2>
        return NULL;
    a61a:	         |   moveq #0,d0
    a61c:	      /--|-- bra.w a706 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    a620:	      |  \-> move.l 124(sp),86(sp)
    a626:	      |      move.l 90(sp),82(sp)
    a62c:	      |      moveq #-1,d0
    a62e:	      |      move.l d0,78(sp)
    a632:	      |      move.l 19c58 <DOSBase>,d0
    a638:	      |      movea.l d0,a6
    a63a:	      |      move.l 86(sp),d1
    a63e:	      |      move.l 82(sp),d2
    a642:	      |      move.l 78(sp),d3
    a646:	      |      jsr -66(a6)
    a64a:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    a64e:	      |      move.l 116(sp),d0
    a652:	      |      addq.l #1,d0
    a654:	      |      move.l d0,70(sp)
    a658:	      |      clr.l 66(sp)
    a65c:	      |      move.l 19c50 <SysBase>,d0
    a662:	      |      movea.l d0,a6
    a664:	      |      move.l 70(sp),d0
    a668:	      |      move.l 66(sp),d1
    a66c:	      |      jsr -684(a6)
    a670:	      |      move.l d0,62(sp)
    a674:	      |      move.l 62(sp),d0
    a678:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    a67c:	      |  /-- bne.s a684 <readTextPlain+0x106>
    a67e:	      |  |   moveq #0,d0
    a680:	      +--|-- bra.w a706 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    a684:	      |  \-> move.l 124(sp),54(sp)
    a68a:	      |      move.l 58(sp),50(sp)
    a690:	      |      moveq #1,d0
    a692:	      |      move.l d0,46(sp)
    a696:	      |      move.l 116(sp),42(sp)
    a69c:	      |      move.l 19c58 <DOSBase>,d0
    a6a2:	      |      movea.l d0,a6
    a6a4:	      |      move.l 54(sp),d1
    a6a8:	      |      move.l 50(sp),d2
    a6ac:	      |      move.l 46(sp),d3
    a6b0:	      |      move.l 42(sp),d4
    a6b4:	      |      jsr -324(a6)
    a6b8:	      |      move.l d0,38(sp)
    a6bc:	      |      move.l 38(sp),d0
    a6c0:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    a6c4:	      |      move.l 34(sp),d0
    a6c8:	      |      cmp.l 116(sp),d0
    a6cc:	      |  /-- beq.s a6dc <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    a6ce:	      |  |   pea 16660 <newfatal.c.307beca7+0x9e>
    a6d4:	      |  |   jsr 12ed6 <KPrintF>
    a6da:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    a6dc:	      |  \-> move.l 124(sp),30(sp)
    a6e2:	      |      move.l 19c58 <DOSBase>,d0
    a6e8:	      |      movea.l d0,a6
    a6ea:	      |      move.l 30(sp),d1
    a6ee:	      |      jsr -306(a6)
    a6f2:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    a6f6:	      |      move.l 116(sp),d0
    a6fa:	      |      movea.l 58(sp),a0
    a6fe:	      |      adda.l d0,a0
    a700:	      |      clr.b (a0)
    }

    return reply;
    a702:	      |      move.l 58(sp),d0
}
    a706:	      \----> movem.l (sp)+,d2-d4/a6
    a70a:	             lea 104(sp),sp
    a70e:	             rts

0000a710 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    a710:	                      lea -144(sp),sp
    a714:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    a718:	                      move.l 160(sp),148(sp)
    a71e:	                      move.l #1006,144(sp)
    a726:	                      move.l 19c58 <DOSBase>,d0
    a72c:	                      movea.l d0,a6
    a72e:	                      move.l 148(sp),d1
    a732:	                      move.l 144(sp),d2
    a736:	                      jsr -30(a6)
    a73a:	                      move.l d0,140(sp)
    a73e:	                      move.l 140(sp),d0
    a742:	                      move.l d0,136(sp)

    if (!fp) {
    a746:	                  /-- bne.s a760 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a748:	                  |   move.l 160(sp),-(sp)
    a74c:	                  |   pea 16681 <newfatal.c.307beca7+0xbf>
    a752:	                  |   jsr 12ed6 <KPrintF>
    a758:	                  |   addq.l #8,sp
        return FALSE;
    a75a:	                  |   clr.w d0
    a75c:	/-----------------|-- bra.w aa1c <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a760:	|                 \-> movea.l 164(sp),a0
    a764:	|                     movea.l 4(a0),a0
    a768:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a76c:	|                     move.w 19d08 <saveEncoding>,d0
    a772:	|                     move.l d0,d0
    a774:	|                     move.b d0,19d06 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a77a:	|                     move.w 19d08 <saveEncoding>,d0
    a780:	|                     lsr.w #8,d0
    a782:	|                     move.l d0,d0
    a784:	|                     move.b d0,19d07 <encode2>

    if (saveEncoding) {
    a78a:	|                     move.w 19d08 <saveEncoding>,d0
    a790:	|                 /-- beq.s a7e2 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a792:	|                 |   move.l 136(sp),116(sp)
    a798:	|                 |   move.l #91419,112(sp)
    a7a0:	|                 |   moveq #99,d0
    a7a2:	|                 |   not.b d0
    a7a4:	|                 |   add.l sp,d0
    a7a6:	|                 |   addi.l #-144,d0
    a7ac:	|                 |   move.l d0,108(sp)
    a7b0:	|                 |   move.l 19c58 <DOSBase>,d0
    a7b6:	|                 |   movea.l d0,a6
    a7b8:	|                 |   move.l 116(sp),d1
    a7bc:	|                 |   move.l 112(sp),d2
    a7c0:	|                 |   move.l 108(sp),d3
    a7c4:	|                 |   jsr -354(a6)
    a7c8:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a7cc:	|                 |   move.l 136(sp),-(sp)
    a7d0:	|                 |   pea 1659a <graphics.c.1c13408a+0x3d8>
    a7d6:	|                 |   jsr aa26 <writeStringEncoded>
    a7dc:	|                 |   addq.l #8,sp
    a7de:	|  /--------------|-- bra.w a9f4 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a7e2:	|  |              \-> move.l 136(sp),132(sp)
    a7e8:	|  |                  move.l #91445,128(sp)
    a7f0:	|  |                  moveq #99,d1
    a7f2:	|  |                  not.b d1
    a7f4:	|  |                  add.l sp,d1
    a7f6:	|  |                  addi.l #-144,d1
    a7fc:	|  |                  move.l d1,124(sp)
    a800:	|  |                  move.l 19c58 <DOSBase>,d0
    a806:	|  |                  movea.l d0,a6
    a808:	|  |                  move.l 132(sp),d1
    a80c:	|  |                  move.l 128(sp),d2
    a810:	|  |                  move.l 124(sp),d3
    a814:	|  |                  jsr -354(a6)
    a818:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a81c:	|  +----------------- bra.w a9f4 <stackToFile+0x2e4>
        if (saveEncoding) {
    a820:	|  |  /-------------> move.w 19d08 <saveEncoding>,d0
    a826:	|  |  |     /-------- beq.w a978 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a82a:	|  |  |     |         movea.l 152(sp),a0
    a82e:	|  |  |     |         move.l (a0),d0
    a830:	|  |  |     |         moveq #1,d1
    a832:	|  |  |     |         cmp.l d0,d1
    a834:	|  |  |     |     /-- beq.s a884 <stackToFile+0x174>
    a836:	|  |  |     |     |   moveq #3,d1
    a838:	|  |  |     |     |   cmp.l d0,d1
    a83a:	|  |  |     |  /--|-- bne.w a946 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a83e:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a844:	|  |  |     |  |  |   move.b 19d06 <encode1>,d0
    a84a:	|  |  |     |  |  |   ext.w d0
    a84c:	|  |  |     |  |  |   movea.w d0,a0
    a84e:	|  |  |     |  |  |   move.l a0,72(sp)
    a852:	|  |  |     |  |  |   move.l 19c58 <DOSBase>,d0
    a858:	|  |  |     |  |  |   movea.l d0,a6
    a85a:	|  |  |     |  |  |   move.l 76(sp),d1
    a85e:	|  |  |     |  |  |   move.l 72(sp),d2
    a862:	|  |  |     |  |  |   jsr -312(a6)
    a866:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a86a:	|  |  |     |  |  |   movea.l 152(sp),a0
    a86e:	|  |  |     |  |  |   move.l 4(a0),d0
    a872:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a876:	|  |  |     |  |  |   move.l d0,-(sp)
    a878:	|  |  |     |  |  |   jsr aa26 <writeStringEncoded>
    a87e:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a880:	|  |  |  /--|--|--|-- bra.w a9ea <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a884:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a888:	|  |  |  |  |  |      move.l 4(a0),d0
    a88c:	|  |  |  |  |  |  /-- bmi.s a8fc <stackToFile+0x1ec>
    a88e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a892:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a896:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a89c:	|  |  |  |  |  |  +-- bgt.s a8fc <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a89e:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    a8a4:	|  |  |  |  |  |  |   move.b 19d06 <encode1>,d0
    a8aa:	|  |  |  |  |  |  |   eori.b #2,d0
    a8ae:	|  |  |  |  |  |  |   ext.w d0
    a8b0:	|  |  |  |  |  |  |   movea.w d0,a0
    a8b2:	|  |  |  |  |  |  |   move.l a0,60(sp)
    a8b6:	|  |  |  |  |  |  |   move.l 19c58 <DOSBase>,d0
    a8bc:	|  |  |  |  |  |  |   movea.l d0,a6
    a8be:	|  |  |  |  |  |  |   move.l 64(sp),d1
    a8c2:	|  |  |  |  |  |  |   move.l 60(sp),d2
    a8c6:	|  |  |  |  |  |  |   jsr -312(a6)
    a8ca:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    a8ce:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    a8d4:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a8d8:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    a8de:	|  |  |  |  |  |  |   move.l 19c58 <DOSBase>,d0
    a8e4:	|  |  |  |  |  |  |   movea.l d0,a6
    a8e6:	|  |  |  |  |  |  |   move.l 52(sp),d1
    a8ea:	|  |  |  |  |  |  |   move.l 48(sp),d2
    a8ee:	|  |  |  |  |  |  |   jsr -312(a6)
    a8f2:	|  |  |  |  |  |  |   move.l d0,44(sp)
    a8f6:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    a8f8:	|  |  |  +--|--|--|-- bra.w a9ea <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    a8fc:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    a902:	|  |  |  |  |  |      move.b 19d06 <encode1>,d0
    a908:	|  |  |  |  |  |      eori.b #1,d0
    a90c:	|  |  |  |  |  |      ext.w d0
    a90e:	|  |  |  |  |  |      movea.w d0,a0
    a910:	|  |  |  |  |  |      move.l a0,36(sp)
    a914:	|  |  |  |  |  |      move.l 19c58 <DOSBase>,d0
    a91a:	|  |  |  |  |  |      movea.l d0,a6
    a91c:	|  |  |  |  |  |      move.l 40(sp),d1
    a920:	|  |  |  |  |  |      move.l 36(sp),d2
    a924:	|  |  |  |  |  |      jsr -312(a6)
    a928:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    a92c:	|  |  |  |  |  |      movea.l 152(sp),a0
    a930:	|  |  |  |  |  |      move.l 4(a0),d0
    a934:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    a938:	|  |  |  |  |  |      move.l d0,-(sp)
    a93a:	|  |  |  |  |  |      jsr 958 <put4bytes>
    a940:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    a942:	|  |  |  +--|--|----- bra.w a9ea <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    a946:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    a94a:	|  |  |  |  |         pea 16693 <newfatal.c.307beca7+0xd1>
    a950:	|  |  |  |  |         jsr 12ed6 <KPrintF>
    a956:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    a958:	|  |  |  |  |         move.l 136(sp),28(sp)
    a95e:	|  |  |  |  |         move.l 19c58 <DOSBase>,d0
    a964:	|  |  |  |  |         movea.l d0,a6
    a966:	|  |  |  |  |         move.l 28(sp),d1
    a96a:	|  |  |  |  |         jsr -36(a6)
    a96e:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    a972:	|  |  |  |  |         clr.w d0
    a974:	+--|--|--|--|-------- bra.w aa1c <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    a978:	|  |  |  |  \-------> move.l 152(sp),d0
    a97c:	|  |  |  |            move.l d0,-(sp)
    a97e:	|  |  |  |            jsr 11458 <getTextFromAnyVar>
    a984:	|  |  |  |            addq.l #4,sp
    a986:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    a98a:	|  |  |  |     /----- beq.s a9fe <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    a98c:	|  |  |  |     |      movea.l 100(sp),a0
    a990:	|  |  |  |     |      move.b (a0),d0
    a992:	|  |  |  |     |      ext.w d0
    a994:	|  |  |  |     |      movea.w d0,a0
    a996:	|  |  |  |     |      move.l a0,12(sp)
    a99a:	|  |  |  |     |      move.l 136(sp),96(sp)
    a9a0:	|  |  |  |     |      move.l #91887,92(sp)
    a9a8:	|  |  |  |     |      moveq #99,d0
    a9aa:	|  |  |  |     |      not.b d0
    a9ac:	|  |  |  |     |      add.l sp,d0
    a9ae:	|  |  |  |     |      addi.l #-144,d0
    a9b4:	|  |  |  |     |      move.l d0,88(sp)
    a9b8:	|  |  |  |     |      move.l 19c58 <DOSBase>,d0
    a9be:	|  |  |  |     |      movea.l d0,a6
    a9c0:	|  |  |  |     |      move.l 96(sp),d1
    a9c4:	|  |  |  |     |      move.l 92(sp),d2
    a9c8:	|  |  |  |     |      move.l 88(sp),d3
    a9cc:	|  |  |  |     |      jsr -354(a6)
    a9d0:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    a9d4:	|  |  |  |     |      move.l 100(sp),80(sp)
    a9da:	|  |  |  |     |      move.l 19c50 <SysBase>,d0
    a9e0:	|  |  |  |     |      movea.l d0,a6
    a9e2:	|  |  |  |     |      movea.l 80(sp),a1
    a9e6:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    a9ea:	|  |  |  \-----|----> movea.l 152(sp),a0
    a9ee:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    a9f4:	|  \--|--------|----> tst.l 152(sp)
    a9f8:	|     \--------|----- bne.w a820 <stackToFile+0x110>
    a9fc:	|              |  /-- bra.s aa00 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    a9fe:	|              \--|-> nop
    }
    Close(fp);
    aa00:	|                 \-> move.l 136(sp),20(sp)
    aa06:	|                     move.l 19c58 <DOSBase>,d0
    aa0c:	|                     movea.l d0,a6
    aa0e:	|                     move.l 20(sp),d1
    aa12:	|                     jsr -36(a6)
    aa16:	|                     move.l d0,16(sp)
    return TRUE;
    aa1a:	|                     moveq #1,d0
}
    aa1c:	\-------------------> movem.l (sp)+,d2-d3/a6
    aa20:	                      lea 144(sp),sp
    aa24:	                      rts

0000aa26 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    aa26:	       lea -20(sp),sp
    aa2a:	       move.l a6,-(sp)
    aa2c:	       move.l d2,-(sp)
	int a, len = strlen (s);
    aa2e:	       move.l 32(sp),-(sp)
    aa32:	       jsr 1036e <strlen>
    aa38:	       addq.l #4,sp
    aa3a:	       move.l d0,20(sp)

	put2bytes (len, fp);
    aa3e:	       move.l 36(sp),-(sp)
    aa42:	       move.l 24(sp),-(sp)
    aa46:	       jsr 8d0 <put2bytes>
    aa4c:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    aa4e:	       clr.l 24(sp)
    aa52:	   /-- bra.s aaa8 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    aa54:	/--|-> move.l 36(sp),16(sp)
    aa5a:	|  |   move.l 24(sp),d0
    aa5e:	|  |   movea.l 32(sp),a0
    aa62:	|  |   adda.l d0,a0
    aa64:	|  |   move.b (a0),d1
    aa66:	|  |   move.b 19d06 <encode1>,d0
    aa6c:	|  |   eor.b d1,d0
    aa6e:	|  |   ext.w d0
    aa70:	|  |   movea.w d0,a0
    aa72:	|  |   move.l a0,12(sp)
    aa76:	|  |   move.l 19c58 <DOSBase>,d0
    aa7c:	|  |   movea.l d0,a6
    aa7e:	|  |   move.l 16(sp),d1
    aa82:	|  |   move.l 12(sp),d2
    aa86:	|  |   jsr -312(a6)
    aa8a:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    aa8e:	|  |   move.b 19d06 <encode1>,d0
    aa94:	|  |   move.b d0,d1
    aa96:	|  |   move.b 19d07 <encode2>,d0
    aa9c:	|  |   add.b d1,d0
    aa9e:	|  |   move.b d0,19d06 <encode1>
	for (a = 0; a < len; a ++) {
    aaa4:	|  |   addq.l #1,24(sp)
    aaa8:	|  \-> move.l 24(sp),d0
    aaac:	|      cmp.l 20(sp),d0
    aab0:	\----- blt.s aa54 <writeStringEncoded+0x2e>
	}
}
    aab2:	       nop
    aab4:	       nop
    aab6:	       move.l (sp)+,d2
    aab8:	       movea.l (sp)+,a6
    aaba:	       lea 20(sp),sp
    aabe:	       rts

0000aac0 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    aac0:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    aac2:	                   tst.l 8(sp)
    aac6:	               /-- bne.s aacc <failSecurityCheck+0xc>
    aac8:	               |   moveq #1,d0
    aaca:	/--------------|-- bra.s ab4a <failSecurityCheck+0x8a>

	int a = 0;
    aacc:	|              \-> clr.l (sp)

	while (fn[a]) {
    aace:	|     /----------- bra.s ab3c <failSecurityCheck+0x7c>
		switch (fn[a]) {
    aad0:	|  /--|----------> move.l (sp),d0
    aad2:	|  |  |            movea.l 8(sp),a0
    aad6:	|  |  |            adda.l d0,a0
    aad8:	|  |  |            move.b (a0),d0
    aada:	|  |  |            ext.w d0
    aadc:	|  |  |            movea.w d0,a0
    aade:	|  |  |            moveq #124,d0
    aae0:	|  |  |            cmp.l a0,d0
    aae2:	|  |  |     /----- beq.s ab24 <failSecurityCheck+0x64>
    aae4:	|  |  |     |      moveq #124,d1
    aae6:	|  |  |     |      cmp.l a0,d1
    aae8:	|  |  |  /--|----- blt.s ab3a <failSecurityCheck+0x7a>
    aaea:	|  |  |  |  |      moveq #92,d0
    aaec:	|  |  |  |  |      cmp.l a0,d0
    aaee:	|  |  |  |  +----- beq.s ab24 <failSecurityCheck+0x64>
    aaf0:	|  |  |  |  |      moveq #92,d1
    aaf2:	|  |  |  |  |      cmp.l a0,d1
    aaf4:	|  |  |  +--|----- blt.s ab3a <failSecurityCheck+0x7a>
    aaf6:	|  |  |  |  |      moveq #60,d0
    aaf8:	|  |  |  |  |      cmp.l a0,d0
    aafa:	|  |  |  |  |  /-- blt.s ab1a <failSecurityCheck+0x5a>
    aafc:	|  |  |  |  |  |   moveq #34,d1
    aafe:	|  |  |  |  |  |   cmp.l a0,d1
    ab00:	|  |  |  +--|--|-- bgt.s ab3a <failSecurityCheck+0x7a>
    ab02:	|  |  |  |  |  |   moveq #-34,d1
    ab04:	|  |  |  |  |  |   add.l a0,d1
    ab06:	|  |  |  |  |  |   move.l #83894529,d0
    ab0c:	|  |  |  |  |  |   lsr.l d1,d0
    ab0e:	|  |  |  |  |  |   moveq #1,d1
    ab10:	|  |  |  |  |  |   and.l d1,d0
    ab12:	|  |  |  |  |  |   sne d0
    ab14:	|  |  |  |  |  |   neg.b d0
    ab16:	|  |  |  |  +--|-- bne.s ab24 <failSecurityCheck+0x64>
    ab18:	|  |  |  +--|--|-- bra.s ab3a <failSecurityCheck+0x7a>
    ab1a:	|  |  |  |  |  \-> lea -62(a0),a0
    ab1e:	|  |  |  |  |      moveq #1,d0
    ab20:	|  |  |  |  |      cmp.l a0,d0
    ab22:	|  |  |  +--|----- bcs.s ab3a <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ab24:	|  |  |  |  \----> move.l 8(sp),-(sp)
    ab28:	|  |  |  |         pea 166f3 <newfatal.c.307beca7+0x131>
    ab2e:	|  |  |  |         jsr 12ed6 <KPrintF>
    ab34:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ab36:	|  |  |  |         moveq #1,d0
    ab38:	+--|--|--|-------- bra.s ab4a <failSecurityCheck+0x8a>
		}
		a++;
    ab3a:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    ab3c:	|  |  \----------> move.l (sp),d0
    ab3e:	|  |               movea.l 8(sp),a0
    ab42:	|  |               adda.l d0,a0
    ab44:	|  |               move.b (a0),d0
    ab46:	|  \-------------- bne.s aad0 <failSecurityCheck+0x10>
	}
	return FALSE;
    ab48:	|                  clr.w d0
}
    ab4a:	\----------------> addq.l #4,sp
    ab4c:	                   rts

0000ab4e <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ab4e:	             lea -24(sp),sp
    ab52:	             move.l a6,-(sp)
    ab54:	             move.l 40(sp),d0
    ab58:	             move.w d0,d0
    ab5a:	             move.w d0,6(sp)
	int fileNum = -1;
    ab5e:	             moveq #-1,d0
    ab60:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ab64:	             jsr 397a <killSpeechTimers>

	switch (numParams) {
    ab6a:	             moveq #2,d0
    ab6c:	             cmp.l 32(sp),d0
    ab70:	      /----- beq.s abb4 <sayCore+0x66>
    ab72:	      |      moveq #3,d0
    ab74:	      |      cmp.l 32(sp),d0
    ab78:	/-----|----- bne.w ac96 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ab7c:	|     |      movea.l 36(sp),a0
    ab80:	|     |      move.l 24(a0),d0
    ab84:	|     |      move.l d0,-(sp)
    ab86:	|     |      pea 5 <_start+0x5>
    ab8a:	|     |      lea 20(sp),a0
    ab8e:	|     |      move.l a0,-(sp)
    ab90:	|     |      jsr 10e82 <getValueType>
    ab96:	|     |      lea 12(sp),sp
    ab9a:	|     |      tst.w d0
    ab9c:	|     |  /-- bne.s aba4 <sayCore+0x56>
    ab9e:	|     |  |   moveq #1,d0
    aba0:	|  /--|--|-- bra.w aca6 <sayCore+0x158>
			trimStack (&fun -> stack);
    aba4:	|  |  |  \-> moveq #24,d0
    aba6:	|  |  |      add.l 36(sp),d0
    abaa:	|  |  |      move.l d0,-(sp)
    abac:	|  |  |      jsr 11806 <trimStack>
    abb2:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    abb4:	|  |  \----> movea.l 36(sp),a0
    abb8:	|  |         move.l 24(a0),d0
    abbc:	|  |         move.l d0,-(sp)
    abbe:	|  |         jsr 11458 <getTextFromAnyVar>
    abc4:	|  |         addq.l #4,sp
    abc6:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    abca:	|  |     /-- bne.s abd2 <sayCore+0x84>
    abcc:	|  |     |   moveq #1,d0
    abce:	|  +-----|-- bra.w aca6 <sayCore+0x158>
			trimStack (&fun -> stack);
    abd2:	|  |     \-> moveq #24,d0
    abd4:	|  |         add.l 36(sp),d0
    abd8:	|  |         move.l d0,-(sp)
    abda:	|  |         jsr 11806 <trimStack>
    abe0:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    abe2:	|  |         movea.l 36(sp),a0
    abe6:	|  |         move.l 24(a0),d0
    abea:	|  |         move.l d0,-(sp)
    abec:	|  |         pea 7 <_start+0x7>
    abf0:	|  |         lea 16(sp),a0
    abf4:	|  |         move.l a0,-(sp)
    abf6:	|  |         jsr 10e82 <getValueType>
    abfc:	|  |         lea 12(sp),sp
    ac00:	|  |         tst.w d0
    ac02:	|  |     /-- bne.s ac0a <sayCore+0xbc>
    ac04:	|  |     |   moveq #1,d0
    ac06:	|  +-----|-- bra.w aca6 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ac0a:	|  |     \-> movea.l 36(sp),a0
    ac0e:	|  |         move.l 24(a0),d0
    ac12:	|  |         move.l d0,-(sp)
    ac14:	|  |         pea 7 <_start+0x7>
    ac18:	|  |         lea 16(sp),a0
    ac1c:	|  |         move.l a0,-(sp)
    ac1e:	|  |         jsr 10e82 <getValueType>
    ac24:	|  |         lea 12(sp),sp
    ac28:	|  |         tst.w d0
    ac2a:	|  |     /-- bne.s ac30 <sayCore+0xe2>
    ac2c:	|  |     |   moveq #1,d0
    ac2e:	|  +-----|-- bra.s aca6 <sayCore+0x158>
			trimStack (&fun -> stack);
    ac30:	|  |     \-> moveq #24,d0
    ac32:	|  |         add.l 36(sp),d0
    ac36:	|  |         move.l d0,-(sp)
    ac38:	|  |         jsr 11806 <trimStack>
    ac3e:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ac40:	|  |         movea.w 6(sp),a0
    ac44:	|  |         move.l 12(sp),d1
    ac48:	|  |         move.l 8(sp),d0
    ac4c:	|  |         move.l a0,-(sp)
    ac4e:	|  |         move.l d1,-(sp)
    ac50:	|  |         move.l d0,-(sp)
    ac52:	|  |         move.l 36(sp),-(sp)
    ac56:	|  |         jsr 58b2 <wrapSpeech>
    ac5c:	|  |         lea 16(sp),sp
    ac60:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ac64:	|  |         movea.l 36(sp),a0
    ac68:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    ac6e:	|  |         movea.l 36(sp),a0
    ac72:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    ac78:	|  |         move.l 24(sp),16(sp)
    ac7e:	|  |         move.l 19c50 <SysBase>,d0
    ac84:	|  |         movea.l d0,a6
    ac86:	|  |         movea.l 16(sp),a1
    ac8a:	|  |         jsr -690(a6)
			newText = NULL;
    ac8e:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    ac92:	|  |         moveq #0,d0
    ac94:	|  +-------- bra.s aca6 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    ac96:	\--|-------> pea 16779 <newfatal.c.307beca7+0x1b7>
    ac9c:	   |         jsr 12ed6 <KPrintF>
    aca2:	   |         addq.l #4,sp
	return BR_ERROR;
    aca4:	   |         moveq #1,d0
}
    aca6:	   \-------> movea.l (sp)+,a6
    aca8:	             lea 24(sp),sp
    acac:	             rts

0000acae <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    acae:	pea 1 <_start+0x1>
    acb2:	move.l 12(sp),-(sp)
    acb6:	move.l 12(sp),-(sp)
    acba:	jsr ab4e <sayCore>
    acc0:	lea 12(sp),sp
}
    acc4:	rts

0000acc6 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    acc6:	clr.l -(sp)
    acc8:	move.l 12(sp),-(sp)
    accc:	move.l 12(sp),-(sp)
    acd0:	jsr ab4e <sayCore>
    acd6:	lea 12(sp),sp
}
    acda:	rts

0000acdc <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    acdc:	moveq #2,d0
}
    acde:	rts

0000ace0 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    ace0:	moveq #2,d0
}
    ace2:	rts

0000ace4 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    ace4:	nop
    ace6:	rts

0000ace8 <builtIn_setCursor>:

builtIn(setCursor)
{
    ace8:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    acea:	movea.l 12(sp),a0
    acee:	move.l 24(a0),d0
    acf2:	move.l d0,-(sp)
    acf4:	jsr 1135a <getAnimationFromVar>
    acfa:	addq.l #4,sp
    acfc:	move.l d0,(sp)
	pickAnimCursor (aa);
    acfe:	move.l (sp),-(sp)
    ad00:	jsr dba <pickAnimCursor>
    ad06:	addq.l #4,sp
	trimStack (&fun -> stack);
    ad08:	moveq #24,d0
    ad0a:	add.l 12(sp),d0
    ad0e:	move.l d0,-(sp)
    ad10:	jsr 11806 <trimStack>
    ad16:	addq.l #4,sp
	return BR_CONTINUE;
    ad18:	moveq #2,d0
}
    ad1a:	addq.l #4,sp
    ad1c:	rts

0000ad1e <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ad1e:	move.l 19c10 <input+0xa>,d1
    ad24:	move.l 19d0a <cameraX>,d0
    ad2a:	add.l d0,d1
    ad2c:	moveq #28,d0
    ad2e:	add.l 8(sp),d0
    ad32:	move.l d1,-(sp)
    ad34:	pea 1 <_start+0x1>
    ad38:	move.l d0,-(sp)
    ad3a:	jsr 11774 <setVariable>
    ad40:	lea 12(sp),sp
	return BR_CONTINUE;
    ad44:	moveq #2,d0
}
    ad46:	rts

0000ad48 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ad48:	move.l 19c14 <input+0xe>,d1
    ad4e:	move.l 19d0e <cameraY>,d0
    ad54:	add.l d0,d1
    ad56:	moveq #28,d0
    ad58:	add.l 8(sp),d0
    ad5c:	move.l d1,-(sp)
    ad5e:	pea 1 <_start+0x1>
    ad62:	move.l d0,-(sp)
    ad64:	jsr 11774 <setVariable>
    ad6a:	lea 12(sp),sp
	return BR_CONTINUE;
    ad6e:	moveq #2,d0
}
    ad70:	rts

0000ad72 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    ad72:	move.l 19c10 <input+0xa>,d0
    ad78:	move.l d0,-(sp)
    ad7a:	jsr 1332e <__floatsisf>
    ad80:	addq.l #4,sp
    ad82:	move.l d0,d1
    ad84:	move.l 1814a <cameraZoom>,d0
    ad8a:	move.l d0,-(sp)
    ad8c:	move.l d1,-(sp)
    ad8e:	jsr 133e0 <__mulsf3>
    ad94:	addq.l #8,sp
    ad96:	move.l d0,-(sp)
    ad98:	jsr 132c6 <__fixsfsi>
    ad9e:	addq.l #4,sp
    ada0:	move.l d0,d1
    ada2:	moveq #28,d0
    ada4:	add.l 8(sp),d0
    ada8:	move.l d1,-(sp)
    adaa:	pea 1 <_start+0x1>
    adae:	move.l d0,-(sp)
    adb0:	jsr 11774 <setVariable>
    adb6:	lea 12(sp),sp
	return BR_CONTINUE;
    adba:	moveq #2,d0
}
    adbc:	rts

0000adbe <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    adbe:	move.l 19c14 <input+0xe>,d0
    adc4:	move.l d0,-(sp)
    adc6:	jsr 1332e <__floatsisf>
    adcc:	addq.l #4,sp
    adce:	move.l d0,d1
    add0:	move.l 1814a <cameraZoom>,d0
    add6:	move.l d0,-(sp)
    add8:	move.l d1,-(sp)
    adda:	jsr 133e0 <__mulsf3>
    ade0:	addq.l #8,sp
    ade2:	move.l d0,-(sp)
    ade4:	jsr 132c6 <__fixsfsi>
    adea:	addq.l #4,sp
    adec:	move.l d0,d1
    adee:	moveq #28,d0
    adf0:	add.l 8(sp),d0
    adf4:	move.l d1,-(sp)
    adf6:	pea 1 <_start+0x1>
    adfa:	move.l d0,-(sp)
    adfc:	jsr 11774 <setVariable>
    ae02:	lea 12(sp),sp
	return BR_CONTINUE;
    ae06:	moveq #2,d0
}
    ae08:	rts

0000ae0a <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ae0a:	jsr 5366 <statusBarText>
    ae10:	move.l d0,d1
    ae12:	moveq #28,d0
    ae14:	add.l 8(sp),d0
    ae18:	move.l d1,-(sp)
    ae1a:	move.l d0,-(sp)
    ae1c:	jsr 110a4 <makeTextVar>
    ae22:	addq.l #8,sp
	return BR_CONTINUE;
    ae24:	moveq #2,d0
}
    ae26:	rts

0000ae28 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ae28:	       lea -20(sp),sp
    ae2c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ae2e:	       movea.l 32(sp),a0
    ae32:	       move.l 24(a0),d0
    ae36:	       move.l d0,-(sp)
    ae38:	       jsr 11458 <getTextFromAnyVar>
    ae3e:	       addq.l #4,sp
    ae40:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ae44:	   /-- bne.s ae4c <builtIn_getMatchingFiles+0x24>
    ae46:	   |   moveq #1,d0
    ae48:	/--|-- bra.w af0e <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ae4c:	|  \-> moveq #24,d0
    ae4e:	|      add.l 32(sp),d0
    ae52:	|      move.l d0,-(sp)
    ae54:	|      jsr 11806 <trimStack>
    ae5a:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ae5c:	|      moveq #28,d0
    ae5e:	|      add.l 32(sp),d0
    ae62:	|      move.l d0,-(sp)
    ae64:	|      jsr 110d0 <unlinkVar>
    ae6a:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ae6c:	|      movea.l 32(sp),a0
    ae70:	|      moveq #6,d0
    ae72:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ae76:	|      moveq #12,d0
    ae78:	|      move.l d0,16(sp)
    ae7c:	|      clr.l 12(sp)
    ae80:	|      move.l 19c50 <SysBase>,d0
    ae86:	|      movea.l d0,a6
    ae88:	|      move.l 16(sp),d0
    ae8c:	|      move.l 12(sp),d1
    ae90:	|      jsr -684(a6)
    ae94:	|      move.l d0,8(sp)
    ae98:	|      move.l 8(sp),d0
    ae9c:	|      movea.l 32(sp),a0
    aea0:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    aea4:	|      moveq #32,d0
    aea6:	|      add.l 32(sp),d0
    aeaa:	|  /-- bne.s aeb0 <builtIn_getMatchingFiles+0x88>
    aeac:	|  |   moveq #1,d0
    aeae:	+--|-- bra.s af0e <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    aeb0:	|  \-> movea.l 32(sp),a0
    aeb4:	|      movea.l 32(a0),a0
    aeb8:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    aeba:	|      movea.l 32(sp),a0
    aebe:	|      movea.l 32(a0),a0
    aec2:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    aec6:	|      movea.l 32(sp),a0
    aeca:	|      movea.l 32(a0),a0
    aece:	|      moveq #1,d0
    aed0:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    aed4:	|      movea.l 32(sp),a0
    aed8:	|      move.l 32(a0),d0
    aedc:	|      move.l 20(sp),-(sp)
    aee0:	|      move.l d0,-(sp)
    aee2:	|      jsr 10c3e <getSavedGamesStack>
    aee8:	|      addq.l #8,sp
    aeea:	|      tst.w d0
    aeec:	|  /-- bne.s aef2 <builtIn_getMatchingFiles+0xca>
    aeee:	|  |   moveq #1,d0
    aef0:	+--|-- bra.s af0e <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    aef2:	|  \-> move.l 20(sp),4(sp)
    aef8:	|      move.l 19c50 <SysBase>,d0
    aefe:	|      movea.l d0,a6
    af00:	|      movea.l 4(sp),a1
    af04:	|      jsr -690(a6)
	newText = NULL;
    af08:	|      clr.l 20(sp)
	return BR_CONTINUE;
    af0c:	|      moveq #2,d0
}
    af0e:	\----> movea.l (sp)+,a6
    af10:	       lea 20(sp),sp
    af14:	       rts

0000af16 <builtIn_saveGame>:

builtIn(saveGame)
{
    af16:	       lea -12(sp),sp
    af1a:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    af1c:	       movea.l 24(sp),a0
    af20:	       move.l 24(a0),d0
    af24:	       move.l d0,-(sp)
    af26:	       jsr 11458 <getTextFromAnyVar>
    af2c:	       addq.l #4,sp
    af2e:	       move.l d0,19c1c <loadNow>
    trimStack(&fun->stack);
    af34:	       moveq #24,d0
    af36:	       add.l 24(sp),d0
    af3a:	       move.l d0,-(sp)
    af3c:	       jsr 11806 <trimStack>
    af42:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    af44:	       move.l 19c1c <loadNow>,d0
    af4a:	       move.l d0,-(sp)
    af4c:	       jsr 2fe <encodeFilename>
    af52:	       addq.l #4,sp
    af54:	       move.l d0,12(sp)
    FreeVec(loadNow);
    af58:	       move.l 19c1c <loadNow>,8(sp)
    af60:	       move.l 19c50 <SysBase>,d0
    af66:	       movea.l d0,a6
    af68:	       movea.l 8(sp),a1
    af6c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    af70:	       move.l 12(sp),-(sp)
    af74:	       jsr aac0 <failSecurityCheck>
    af7a:	       addq.l #4,sp
    af7c:	       tst.w d0
    af7e:	   /-- beq.s af84 <builtIn_saveGame+0x6e>
    af80:	   |   moveq #1,d0
    af82:	/--|-- bra.s afd4 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    af84:	|  \-> move.l 12(sp),-(sp)
    af88:	|      pea 167a7 <newfatal.c.307beca7+0x1e5>
    af8e:	|      jsr 103ae <joinStrings>
    af94:	|      addq.l #8,sp
    af96:	|      move.l d0,19c1c <loadNow>
    FreeVec(aaaaa);
    af9c:	|      move.l 12(sp),4(sp)
    afa2:	|      move.l 19c50 <SysBase>,d0
    afa8:	|      movea.l d0,a6
    afaa:	|      movea.l 4(sp),a1
    afae:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    afb2:	|      moveq #28,d0
    afb4:	|      add.l 24(sp),d0
    afb8:	|      clr.l -(sp)
    afba:	|      pea 1 <_start+0x1>
    afbe:	|      move.l d0,-(sp)
    afc0:	|      jsr 11774 <setVariable>
    afc6:	|      lea 12(sp),sp
    saverFunc = fun;
    afca:	|      move.l 24(sp),19d1a <saverFunc>
    return BR_KEEP_AND_PAUSE;
    afd2:	|      moveq #0,d0
}
    afd4:	\----> movea.l (sp)+,a6
    afd6:	       lea 12(sp),sp
    afda:	       rts

0000afdc <builtIn_fileExists>:

builtIn(fileExists)
{
    afdc:	       lea -36(sp),sp
    afe0:	       move.l a6,-(sp)
    afe2:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    afe4:	       movea.l 52(sp),a0
    afe8:	       move.l 24(a0),d0
    afec:	       move.l d0,-(sp)
    afee:	       jsr 11458 <getTextFromAnyVar>
    aff4:	       addq.l #4,sp
    aff6:	       move.l d0,19c1c <loadNow>
    trimStack(&fun->stack);
    affc:	       moveq #24,d0
    affe:	       add.l 52(sp),d0
    b002:	       move.l d0,-(sp)
    b004:	       jsr 11806 <trimStack>
    b00a:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    b00c:	       move.l 19c1c <loadNow>,d0
    b012:	       move.l d0,-(sp)
    b014:	       jsr 2fe <encodeFilename>
    b01a:	       addq.l #4,sp
    b01c:	       move.l d0,40(sp)
    FreeVec(loadNow);
    b020:	       move.l 19c1c <loadNow>,36(sp)
    b028:	       move.l 19c50 <SysBase>,d0
    b02e:	       movea.l d0,a6
    b030:	       movea.l 36(sp),a1
    b034:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    b038:	       move.l 40(sp),-(sp)
    b03c:	       jsr aac0 <failSecurityCheck>
    b042:	       addq.l #4,sp
    b044:	       tst.w d0
    b046:	   /-- beq.s b04e <builtIn_fileExists+0x72>
    b048:	   |   moveq #1,d0
    b04a:	/--|-- bra.w b0ee <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    b04e:	|  \-> move.l 40(sp),32(sp)
    b054:	|      move.l #1005,28(sp)
    b05c:	|      move.l 19c58 <DOSBase>,d0
    b062:	|      movea.l d0,a6
    b064:	|      move.l 32(sp),d1
    b068:	|      move.l 28(sp),d2
    b06c:	|      jsr -30(a6)
    b070:	|      move.l d0,24(sp)
    b074:	|      move.l 24(sp),d0
    b078:	|      move.l d0,20(sp)
    if (!fp) {        
    b07c:	|  /-- bne.s b08c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    b07e:	|  |   pea 167a9 <newfatal.c.307beca7+0x1e7>
    b084:	|  |   jsr 12ed6 <KPrintF>
    b08a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    b08c:	|  \-> tst.l 20(sp)
    b090:	|      sne d0
    b092:	|      neg.b d0
    b094:	|      moveq #0,d1
    b096:	|      move.b d0,d1
    b098:	|      moveq #28,d0
    b09a:	|      add.l 52(sp),d0
    b09e:	|      move.l d1,-(sp)
    b0a0:	|      pea 1 <_start+0x1>
    b0a4:	|      move.l d0,-(sp)
    b0a6:	|      jsr 11774 <setVariable>
    b0ac:	|      lea 12(sp),sp
    if (fp) Close(fp);
    b0b0:	|      tst.l 20(sp)
    b0b4:	|  /-- beq.s b0d0 <builtIn_fileExists+0xf4>
    b0b6:	|  |   move.l 20(sp),16(sp)
    b0bc:	|  |   move.l 19c58 <DOSBase>,d0
    b0c2:	|  |   movea.l d0,a6
    b0c4:	|  |   move.l 16(sp),d1
    b0c8:	|  |   jsr -36(a6)
    b0cc:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    b0d0:	|  \-> move.l 40(sp),8(sp)
    b0d6:	|      move.l 19c50 <SysBase>,d0
    b0dc:	|      movea.l d0,a6
    b0de:	|      movea.l 8(sp),a1
    b0e2:	|      jsr -690(a6)
    loadNow = NULL;
    b0e6:	|      clr.l 19c1c <loadNow>
    return BR_CONTINUE;
    b0ec:	|      moveq #2,d0
}
    b0ee:	\----> move.l (sp)+,d2
    b0f0:	       movea.l (sp)+,a6
    b0f2:	       lea 36(sp),sp
    b0f6:	       rts

0000b0f8 <builtIn_loadGame>:

builtIn(loadGame)
{
    b0f8:	       lea -36(sp),sp
    b0fc:	       move.l a6,-(sp)
    b0fe:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    b100:	       movea.l 52(sp),a0
    b104:	       move.l 24(a0),d0
    b108:	       move.l d0,-(sp)
    b10a:	       jsr 11458 <getTextFromAnyVar>
    b110:	       addq.l #4,sp
    b112:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    b116:	       moveq #24,d0
    b118:	       add.l 52(sp),d0
    b11c:	       move.l d0,-(sp)
    b11e:	       jsr 11806 <trimStack>
    b124:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    b126:	       move.l 40(sp),-(sp)
    b12a:	       jsr 2fe <encodeFilename>
    b130:	       addq.l #4,sp
    b132:	       move.l d0,19c1c <loadNow>
    FreeVec(aaaaa);
    b138:	       move.l 40(sp),36(sp)
    b13e:	       move.l 19c50 <SysBase>,d0
    b144:	       movea.l d0,a6
    b146:	       movea.l 36(sp),a1
    b14a:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    b14e:	       move.l 19c1c <loadNow>,d0
    b154:	       move.l d0,-(sp)
    b156:	       jsr aac0 <failSecurityCheck>
    b15c:	       addq.l #4,sp
    b15e:	       tst.w d0
    b160:	   /-- beq.s b166 <builtIn_loadGame+0x6e>
    b162:	   |   moveq #1,d0
    b164:	/--|-- bra.s b1d6 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    b166:	|  \-> move.l 19c1c <loadNow>,32(sp)
    b16e:	|      move.l #1005,28(sp)
    b176:	|      move.l 19c58 <DOSBase>,d0
    b17c:	|      movea.l d0,a6
    b17e:	|      move.l 32(sp),d1
    b182:	|      move.l 28(sp),d2
    b186:	|      jsr -30(a6)
    b18a:	|      move.l d0,24(sp)
    b18e:	|      move.l 24(sp),d0
    b192:	|      move.l d0,20(sp)
    if (fp) {
    b196:	|  /-- beq.s b1b6 <builtIn_loadGame+0xbe>
        Close(fp);
    b198:	|  |   move.l 20(sp),12(sp)
    b19e:	|  |   move.l 19c58 <DOSBase>,d0
    b1a4:	|  |   movea.l d0,a6
    b1a6:	|  |   move.l 12(sp),d1
    b1aa:	|  |   jsr -36(a6)
    b1ae:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    b1b2:	|  |   moveq #0,d0
    b1b4:	+--|-- bra.s b1d6 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    b1b6:	|  \-> move.l 19c1c <loadNow>,16(sp)
    b1be:	|      move.l 19c50 <SysBase>,d0
    b1c4:	|      movea.l d0,a6
    b1c6:	|      movea.l 16(sp),a1
    b1ca:	|      jsr -690(a6)
    loadNow = NULL;
    b1ce:	|      clr.l 19c1c <loadNow>
    return BR_CONTINUE;
    b1d4:	|      moveq #2,d0
}
    b1d6:	\----> move.l (sp)+,d2
    b1d8:	       movea.l (sp)+,a6
    b1da:	       lea 36(sp),sp
    b1de:	       rts

0000b1e0 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    b1e0:	move.l 19cf0 <sceneHeight>,d0
    b1e6:	move.l d0,d1
    b1e8:	move.l 19cec <sceneWidth>,d0
    b1ee:	move.l d1,-(sp)
    b1f0:	move.l d0,-(sp)
    b1f2:	clr.l -(sp)
    b1f4:	clr.l -(sp)
    b1f6:	jsr 95b4 <blankScreen>
    b1fc:	lea 16(sp),sp
	return BR_CONTINUE;
    b200:	moveq #2,d0
}
    b202:	rts

0000b204 <builtIn_blankArea>:

builtIn(blankArea)
{
    b204:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b208:	       movea.l 24(sp),a0
    b20c:	       move.l 24(a0),d0
    b210:	       move.l d0,-(sp)
    b212:	       pea 1 <_start+0x1>
    b216:	       lea 8(sp),a0
    b21a:	       move.l a0,-(sp)
    b21c:	       jsr 10e82 <getValueType>
    b222:	       lea 12(sp),sp
    b226:	       tst.w d0
    b228:	   /-- bne.s b230 <builtIn_blankArea+0x2c>
    b22a:	   |   moveq #1,d0
    b22c:	/--|-- bra.w b306 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b230:	|  \-> moveq #24,d0
    b232:	|      add.l 24(sp),d0
    b236:	|      move.l d0,-(sp)
    b238:	|      jsr 11806 <trimStack>
    b23e:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b240:	|      movea.l 24(sp),a0
    b244:	|      move.l 24(a0),d0
    b248:	|      move.l d0,-(sp)
    b24a:	|      pea 1 <_start+0x1>
    b24e:	|      lea 12(sp),a0
    b252:	|      move.l a0,-(sp)
    b254:	|      jsr 10e82 <getValueType>
    b25a:	|      lea 12(sp),sp
    b25e:	|      tst.w d0
    b260:	|  /-- bne.s b268 <builtIn_blankArea+0x64>
    b262:	|  |   moveq #1,d0
    b264:	+--|-- bra.w b306 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b268:	|  \-> moveq #24,d0
    b26a:	|      add.l 24(sp),d0
    b26e:	|      move.l d0,-(sp)
    b270:	|      jsr 11806 <trimStack>
    b276:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b278:	|      movea.l 24(sp),a0
    b27c:	|      move.l 24(a0),d0
    b280:	|      move.l d0,-(sp)
    b282:	|      pea 1 <_start+0x1>
    b286:	|      moveq #16,d0
    b288:	|      add.l sp,d0
    b28a:	|      move.l d0,-(sp)
    b28c:	|      jsr 10e82 <getValueType>
    b292:	|      lea 12(sp),sp
    b296:	|      tst.w d0
    b298:	|  /-- bne.s b29e <builtIn_blankArea+0x9a>
    b29a:	|  |   moveq #1,d0
    b29c:	+--|-- bra.s b306 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b29e:	|  \-> moveq #24,d0
    b2a0:	|      add.l 24(sp),d0
    b2a4:	|      move.l d0,-(sp)
    b2a6:	|      jsr 11806 <trimStack>
    b2ac:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b2ae:	|      movea.l 24(sp),a0
    b2b2:	|      move.l 24(a0),d0
    b2b6:	|      move.l d0,-(sp)
    b2b8:	|      pea 1 <_start+0x1>
    b2bc:	|      moveq #20,d0
    b2be:	|      add.l sp,d0
    b2c0:	|      move.l d0,-(sp)
    b2c2:	|      jsr 10e82 <getValueType>
    b2c8:	|      lea 12(sp),sp
    b2cc:	|      tst.w d0
    b2ce:	|  /-- bne.s b2d4 <builtIn_blankArea+0xd0>
    b2d0:	|  |   moveq #1,d0
    b2d2:	+--|-- bra.s b306 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b2d4:	|  \-> moveq #24,d0
    b2d6:	|      add.l 24(sp),d0
    b2da:	|      move.l d0,-(sp)
    b2dc:	|      jsr 11806 <trimStack>
    b2e2:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    b2e4:	|      movea.l (sp),a1
    b2e6:	|      movea.l 4(sp),a0
    b2ea:	|      move.l 8(sp),d1
    b2ee:	|      move.l 12(sp),d0
    b2f2:	|      move.l a1,-(sp)
    b2f4:	|      move.l a0,-(sp)
    b2f6:	|      move.l d1,-(sp)
    b2f8:	|      move.l d0,-(sp)
    b2fa:	|      jsr 95b4 <blankScreen>
    b300:	|      lea 16(sp),sp
	return BR_CONTINUE;
    b304:	|      moveq #2,d0
}
    b306:	\----> lea 16(sp),sp
    b30a:	       rts

0000b30c <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    b30c:	jsr 95c8 <darkScreen>
	return BR_CONTINUE;
    b312:	moveq #2,d0
}
    b314:	rts

0000b316 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    b316:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b31a:	       movea.l 20(sp),a0
    b31e:	       move.l 24(a0),d0
    b322:	       move.l d0,-(sp)
    b324:	       pea 1 <_start+0x1>
    b328:	       lea 8(sp),a0
    b32c:	       move.l a0,-(sp)
    b32e:	       jsr 10e82 <getValueType>
    b334:	       lea 12(sp),sp
    b338:	       tst.w d0
    b33a:	   /-- bne.s b342 <builtIn_addOverlay+0x2c>
    b33c:	   |   moveq #1,d0
    b33e:	/--|-- bra.w b3da <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b342:	|  \-> moveq #24,d0
    b344:	|      add.l 20(sp),d0
    b348:	|      move.l d0,-(sp)
    b34a:	|      jsr 11806 <trimStack>
    b350:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b352:	|      movea.l 20(sp),a0
    b356:	|      move.l 24(a0),d0
    b35a:	|      move.l d0,-(sp)
    b35c:	|      pea 1 <_start+0x1>
    b360:	|      moveq #12,d0
    b362:	|      add.l sp,d0
    b364:	|      move.l d0,-(sp)
    b366:	|      jsr 10e82 <getValueType>
    b36c:	|      lea 12(sp),sp
    b370:	|      tst.w d0
    b372:	|  /-- bne.s b378 <builtIn_addOverlay+0x62>
    b374:	|  |   moveq #1,d0
    b376:	+--|-- bra.s b3da <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b378:	|  \-> moveq #24,d0
    b37a:	|      add.l 20(sp),d0
    b37e:	|      move.l d0,-(sp)
    b380:	|      jsr 11806 <trimStack>
    b386:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b388:	|      movea.l 20(sp),a0
    b38c:	|      move.l 24(a0),d0
    b390:	|      move.l d0,-(sp)
    b392:	|      pea 5 <_start+0x5>
    b396:	|      moveq #16,d0
    b398:	|      add.l sp,d0
    b39a:	|      move.l d0,-(sp)
    b39c:	|      jsr 10e82 <getValueType>
    b3a2:	|      lea 12(sp),sp
    b3a6:	|      tst.w d0
    b3a8:	|  /-- bne.s b3ae <builtIn_addOverlay+0x98>
    b3aa:	|  |   moveq #1,d0
    b3ac:	+--|-- bra.s b3da <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b3ae:	|  \-> moveq #24,d0
    b3b0:	|      add.l 20(sp),d0
    b3b4:	|      move.l d0,-(sp)
    b3b6:	|      jsr 11806 <trimStack>
    b3bc:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    b3be:	|      movea.l (sp),a0
    b3c0:	|      move.l 4(sp),d1
    b3c4:	|      move.l 8(sp),d0
    b3c8:	|      move.l a0,-(sp)
    b3ca:	|      move.l d1,-(sp)
    b3cc:	|      move.l d0,-(sp)
    b3ce:	|      jsr 96e6 <loadBackDrop>
    b3d4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b3d8:	|      moveq #2,d0
}
    b3da:	\----> lea 12(sp),sp
    b3de:	       rts

0000b3e0 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    b3e0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b3e4:	       movea.l 20(sp),a0
    b3e8:	       move.l 24(a0),d0
    b3ec:	       move.l d0,-(sp)
    b3ee:	       pea 1 <_start+0x1>
    b3f2:	       lea 8(sp),a0
    b3f6:	       move.l a0,-(sp)
    b3f8:	       jsr 10e82 <getValueType>
    b3fe:	       lea 12(sp),sp
    b402:	       tst.w d0
    b404:	   /-- bne.s b40c <builtIn_mixOverlay+0x2c>
    b406:	   |   moveq #1,d0
    b408:	/--|-- bra.w b4a4 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b40c:	|  \-> moveq #24,d0
    b40e:	|      add.l 20(sp),d0
    b412:	|      move.l d0,-(sp)
    b414:	|      jsr 11806 <trimStack>
    b41a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b41c:	|      movea.l 20(sp),a0
    b420:	|      move.l 24(a0),d0
    b424:	|      move.l d0,-(sp)
    b426:	|      pea 1 <_start+0x1>
    b42a:	|      moveq #12,d0
    b42c:	|      add.l sp,d0
    b42e:	|      move.l d0,-(sp)
    b430:	|      jsr 10e82 <getValueType>
    b436:	|      lea 12(sp),sp
    b43a:	|      tst.w d0
    b43c:	|  /-- bne.s b442 <builtIn_mixOverlay+0x62>
    b43e:	|  |   moveq #1,d0
    b440:	+--|-- bra.s b4a4 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b442:	|  \-> moveq #24,d0
    b444:	|      add.l 20(sp),d0
    b448:	|      move.l d0,-(sp)
    b44a:	|      jsr 11806 <trimStack>
    b450:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b452:	|      movea.l 20(sp),a0
    b456:	|      move.l 24(a0),d0
    b45a:	|      move.l d0,-(sp)
    b45c:	|      pea 5 <_start+0x5>
    b460:	|      moveq #16,d0
    b462:	|      add.l sp,d0
    b464:	|      move.l d0,-(sp)
    b466:	|      jsr 10e82 <getValueType>
    b46c:	|      lea 12(sp),sp
    b470:	|      tst.w d0
    b472:	|  /-- bne.s b478 <builtIn_mixOverlay+0x98>
    b474:	|  |   moveq #1,d0
    b476:	+--|-- bra.s b4a4 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b478:	|  \-> moveq #24,d0
    b47a:	|      add.l 20(sp),d0
    b47e:	|      move.l d0,-(sp)
    b480:	|      jsr 11806 <trimStack>
    b486:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    b488:	|      movea.l (sp),a0
    b48a:	|      move.l 4(sp),d1
    b48e:	|      move.l 8(sp),d0
    b492:	|      move.l a0,-(sp)
    b494:	|      move.l d1,-(sp)
    b496:	|      move.l d0,-(sp)
    b498:	|      jsr 9b04 <mixBackDrop>
    b49e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b4a2:	|      moveq #2,d0
}
    b4a4:	\----> lea 12(sp),sp
    b4a8:	       rts

0000b4aa <builtIn_pasteImage>:

builtIn(pasteImage)
{
    b4aa:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4ae:	       movea.l 20(sp),a0
    b4b2:	       move.l 24(a0),d0
    b4b6:	       move.l d0,-(sp)
    b4b8:	       pea 1 <_start+0x1>
    b4bc:	       lea 8(sp),a0
    b4c0:	       move.l a0,-(sp)
    b4c2:	       jsr 10e82 <getValueType>
    b4c8:	       lea 12(sp),sp
    b4cc:	       tst.w d0
    b4ce:	   /-- bne.s b4d6 <builtIn_pasteImage+0x2c>
    b4d0:	   |   moveq #1,d0
    b4d2:	/--|-- bra.w b566 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b4d6:	|  \-> moveq #24,d0
    b4d8:	|      add.l 20(sp),d0
    b4dc:	|      move.l d0,-(sp)
    b4de:	|      jsr 11806 <trimStack>
    b4e4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4e6:	|      movea.l 20(sp),a0
    b4ea:	|      move.l 24(a0),d0
    b4ee:	|      move.l d0,-(sp)
    b4f0:	|      pea 1 <_start+0x1>
    b4f4:	|      moveq #12,d0
    b4f6:	|      add.l sp,d0
    b4f8:	|      move.l d0,-(sp)
    b4fa:	|      jsr 10e82 <getValueType>
    b500:	|      lea 12(sp),sp
    b504:	|      tst.w d0
    b506:	|  /-- bne.s b50c <builtIn_pasteImage+0x62>
    b508:	|  |   moveq #1,d0
    b50a:	+--|-- bra.s b566 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b50c:	|  \-> moveq #24,d0
    b50e:	|      add.l 20(sp),d0
    b512:	|      move.l d0,-(sp)
    b514:	|      jsr 11806 <trimStack>
    b51a:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    b51c:	|      movea.l 20(sp),a0
    b520:	|      move.l 24(a0),d0
    b524:	|      move.l d0,-(sp)
    b526:	|      jsr 1135a <getAnimationFromVar>
    b52c:	|      addq.l #4,sp
    b52e:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    b532:	|      moveq #24,d0
    b534:	|      add.l 20(sp),d0
    b538:	|      move.l d0,-(sp)
    b53a:	|      jsr 11806 <trimStack>
    b540:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    b542:	|      tst.l 8(sp)
    b546:	|  /-- bne.s b54c <builtIn_pasteImage+0xa2>
    b548:	|  |   moveq #2,d0
    b54a:	+--|-- bra.s b566 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    b54c:	|  \-> move.l (sp),d1
    b54e:	|      move.l 4(sp),d0
    b552:	|      move.l 8(sp),-(sp)
    b556:	|      move.l d1,-(sp)
    b558:	|      move.l d0,-(sp)
    b55a:	|      jsr de2 <pasteCursor>
    b560:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b564:	|      moveq #2,d0
}
    b566:	\----> lea 12(sp),sp
    b56a:	       rts

0000b56c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    b56c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b56e:	       movea.l 16(sp),a0
    b572:	       move.l 24(a0),d0
    b576:	       move.l d0,-(sp)
    b578:	       pea 1 <_start+0x1>
    b57c:	       move.l sp,d0
    b57e:	       addq.l #8,d0
    b580:	       move.l d0,-(sp)
    b582:	       jsr 10e82 <getValueType>
    b588:	       lea 12(sp),sp
    b58c:	       tst.w d0
    b58e:	   /-- bne.s b596 <builtIn_setSceneDimensions+0x2a>
    b590:	   |   moveq #1,d0
    b592:	/--|-- bra.w b61e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b596:	|  \-> moveq #24,d0
    b598:	|      add.l 16(sp),d0
    b59c:	|      move.l d0,-(sp)
    b59e:	|      jsr 11806 <trimStack>
    b5a4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b5a6:	|      movea.l 16(sp),a0
    b5aa:	|      move.l 24(a0),d0
    b5ae:	|      move.l d0,-(sp)
    b5b0:	|      pea 1 <_start+0x1>
    b5b4:	|      moveq #12,d0
    b5b6:	|      add.l sp,d0
    b5b8:	|      move.l d0,-(sp)
    b5ba:	|      jsr 10e82 <getValueType>
    b5c0:	|      lea 12(sp),sp
    b5c4:	|      tst.w d0
    b5c6:	|  /-- bne.s b5cc <builtIn_setSceneDimensions+0x60>
    b5c8:	|  |   moveq #1,d0
    b5ca:	+--|-- bra.s b61e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b5cc:	|  \-> moveq #24,d0
    b5ce:	|      add.l 16(sp),d0
    b5d2:	|      move.l d0,-(sp)
    b5d4:	|      jsr 11806 <trimStack>
    b5da:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    b5dc:	|      move.l (sp),d1
    b5de:	|      move.l 4(sp),d0
    b5e2:	|      move.l d1,-(sp)
    b5e4:	|      move.l d0,-(sp)
    b5e6:	|      jsr 9bc0 <resizeBackdrop>
    b5ec:	|      addq.l #8,sp
    b5ee:	|      tst.w d0
    b5f0:	|  /-- beq.s b60e <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    b5f2:	|  |   move.l (sp),d1
    b5f4:	|  |   move.l 4(sp),d0
    b5f8:	|  |   move.l d1,-(sp)
    b5fa:	|  |   move.l d0,-(sp)
    b5fc:	|  |   clr.l -(sp)
    b5fe:	|  |   clr.l -(sp)
    b600:	|  |   jsr 95b4 <blankScreen>
    b606:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    b60a:	|  |   moveq #2,d0
    b60c:	+--|-- bra.s b61e <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    b60e:	|  \-> pea 167c7 <main_sludge.c.828d7d86+0x7>
    b614:	|      jsr 12ed6 <KPrintF>
    b61a:	|      addq.l #4,sp
	return BR_ERROR;
    b61c:	|      moveq #1,d0
}
    b61e:	\----> addq.l #8,sp
    b620:	       rts

0000b622 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    b622:	          move.l d3,-(sp)
    b624:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b626:	          movea.l 16(sp),a0
    b62a:	          move.l 24(a0),d0
    b62e:	          move.l d0,-(sp)
    b630:	          pea 1 <_start+0x1>
    b634:	          pea 19d0e <cameraY>
    b63a:	          jsr 10e82 <getValueType>
    b640:	          lea 12(sp),sp
    b644:	          tst.w d0
    b646:	      /-- bne.s b64e <builtIn_aimCamera+0x2c>
    b648:	      |   moveq #1,d0
    b64a:	/-----|-- bra.w b8d0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b64e:	|     \-> moveq #24,d0
    b650:	|         add.l 16(sp),d0
    b654:	|         move.l d0,-(sp)
    b656:	|         jsr 11806 <trimStack>
    b65c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b65e:	|         movea.l 16(sp),a0
    b662:	|         move.l 24(a0),d0
    b666:	|         move.l d0,-(sp)
    b668:	|         pea 1 <_start+0x1>
    b66c:	|         pea 19d0a <cameraX>
    b672:	|         jsr 10e82 <getValueType>
    b678:	|         lea 12(sp),sp
    b67c:	|         tst.w d0
    b67e:	|     /-- bne.s b686 <builtIn_aimCamera+0x64>
    b680:	|     |   moveq #1,d0
    b682:	+-----|-- bra.w b8d0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b686:	|     \-> moveq #24,d0
    b688:	|         add.l 16(sp),d0
    b68c:	|         move.l d0,-(sp)
    b68e:	|         jsr 11806 <trimStack>
    b694:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    b696:	|         move.l 19d0a <cameraX>,d0
    b69c:	|         move.l d0,-(sp)
    b69e:	|         jsr 1332e <__floatsisf>
    b6a4:	|         addq.l #4,sp
    b6a6:	|         move.l d0,d2
    b6a8:	|         move.l 19b50 <winWidth>,d0
    b6ae:	|         lsr.l #1,d0
    b6b0:	|         move.l d0,-(sp)
    b6b2:	|         jsr 13356 <__floatunsisf>
    b6b8:	|         addq.l #4,sp
    b6ba:	|         move.l d0,d1
    b6bc:	|         move.l 1814a <cameraZoom>,d0
    b6c2:	|         move.l d0,-(sp)
    b6c4:	|         move.l d1,-(sp)
    b6c6:	|         jsr 131da <__divsf3>
    b6cc:	|         addq.l #8,sp
    b6ce:	|         move.l d0,-(sp)
    b6d0:	|         move.l d2,-(sp)
    b6d2:	|         jsr 13622 <__subsf3>
    b6d8:	|         addq.l #8,sp
    b6da:	|         move.l d0,-(sp)
    b6dc:	|         jsr 132c6 <__fixsfsi>
    b6e2:	|         addq.l #4,sp
    b6e4:	|         move.l d0,19d0a <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    b6ea:	|         move.l 19d0e <cameraY>,d0
    b6f0:	|         move.l d0,-(sp)
    b6f2:	|         jsr 1332e <__floatsisf>
    b6f8:	|         addq.l #4,sp
    b6fa:	|         move.l d0,d2
    b6fc:	|         move.l 19b54 <winHeight>,d0
    b702:	|         lsr.l #1,d0
    b704:	|         move.l d0,-(sp)
    b706:	|         jsr 13356 <__floatunsisf>
    b70c:	|         addq.l #4,sp
    b70e:	|         move.l d0,d1
    b710:	|         move.l 1814a <cameraZoom>,d0
    b716:	|         move.l d0,-(sp)
    b718:	|         move.l d1,-(sp)
    b71a:	|         jsr 131da <__divsf3>
    b720:	|         addq.l #8,sp
    b722:	|         move.l d0,-(sp)
    b724:	|         move.l d2,-(sp)
    b726:	|         jsr 13622 <__subsf3>
    b72c:	|         addq.l #8,sp
    b72e:	|         move.l d0,-(sp)
    b730:	|         jsr 132c6 <__fixsfsi>
    b736:	|         addq.l #4,sp
    b738:	|         move.l d0,19d0e <cameraY>

	if (cameraX < 0) cameraX = 0;
    b73e:	|         move.l 19d0a <cameraX>,d0
    b744:	|     /-- bpl.s b750 <builtIn_aimCamera+0x12e>
    b746:	|     |   clr.l 19d0a <cameraX>
    b74c:	|  /--|-- bra.w b806 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b750:	|  |  \-> move.l 19d0a <cameraX>,d0
    b756:	|  |      move.l d0,-(sp)
    b758:	|  |      jsr 1332e <__floatsisf>
    b75e:	|  |      addq.l #4,sp
    b760:	|  |      move.l d0,d2
    b762:	|  |      move.l 19cec <sceneWidth>,d0
    b768:	|  |      move.l d0,-(sp)
    b76a:	|  |      jsr 13356 <__floatunsisf>
    b770:	|  |      addq.l #4,sp
    b772:	|  |      move.l d0,d3
    b774:	|  |      move.l 19b50 <winWidth>,d0
    b77a:	|  |      move.l d0,-(sp)
    b77c:	|  |      jsr 13356 <__floatunsisf>
    b782:	|  |      addq.l #4,sp
    b784:	|  |      move.l d0,d1
    b786:	|  |      move.l 1814a <cameraZoom>,d0
    b78c:	|  |      move.l d0,-(sp)
    b78e:	|  |      move.l d1,-(sp)
    b790:	|  |      jsr 131da <__divsf3>
    b796:	|  |      addq.l #8,sp
    b798:	|  |      move.l d0,-(sp)
    b79a:	|  |      move.l d3,-(sp)
    b79c:	|  |      jsr 13622 <__subsf3>
    b7a2:	|  |      addq.l #8,sp
    b7a4:	|  |      move.l d0,-(sp)
    b7a6:	|  |      move.l d2,-(sp)
    b7a8:	|  |      jsr 1349a <__gtsf2>
    b7ae:	|  |      addq.l #8,sp
    b7b0:	|  |      tst.l d0
    b7b2:	|  +----- ble.s b806 <builtIn_aimCamera+0x1e4>
    b7b4:	|  |      move.l 19cec <sceneWidth>,d0
    b7ba:	|  |      move.l d0,-(sp)
    b7bc:	|  |      jsr 13356 <__floatunsisf>
    b7c2:	|  |      addq.l #4,sp
    b7c4:	|  |      move.l d0,d2
    b7c6:	|  |      move.l 19b50 <winWidth>,d0
    b7cc:	|  |      move.l d0,-(sp)
    b7ce:	|  |      jsr 13356 <__floatunsisf>
    b7d4:	|  |      addq.l #4,sp
    b7d6:	|  |      move.l d0,d1
    b7d8:	|  |      move.l 1814a <cameraZoom>,d0
    b7de:	|  |      move.l d0,-(sp)
    b7e0:	|  |      move.l d1,-(sp)
    b7e2:	|  |      jsr 131da <__divsf3>
    b7e8:	|  |      addq.l #8,sp
    b7ea:	|  |      move.l d0,-(sp)
    b7ec:	|  |      move.l d2,-(sp)
    b7ee:	|  |      jsr 13622 <__subsf3>
    b7f4:	|  |      addq.l #8,sp
    b7f6:	|  |      move.l d0,-(sp)
    b7f8:	|  |      jsr 132c6 <__fixsfsi>
    b7fe:	|  |      addq.l #4,sp
    b800:	|  |      move.l d0,19d0a <cameraX>
	if (cameraY < 0) cameraY = 0;
    b806:	|  \----> move.l 19d0e <cameraY>,d0
    b80c:	|     /-- bpl.s b818 <builtIn_aimCamera+0x1f6>
    b80e:	|     |   clr.l 19d0e <cameraY>
    b814:	|  /--|-- bra.w b8ce <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b818:	|  |  \-> move.l 19d0e <cameraY>,d0
    b81e:	|  |      move.l d0,-(sp)
    b820:	|  |      jsr 1332e <__floatsisf>
    b826:	|  |      addq.l #4,sp
    b828:	|  |      move.l d0,d2
    b82a:	|  |      move.l 19cf0 <sceneHeight>,d0
    b830:	|  |      move.l d0,-(sp)
    b832:	|  |      jsr 13356 <__floatunsisf>
    b838:	|  |      addq.l #4,sp
    b83a:	|  |      move.l d0,d3
    b83c:	|  |      move.l 19b54 <winHeight>,d0
    b842:	|  |      move.l d0,-(sp)
    b844:	|  |      jsr 13356 <__floatunsisf>
    b84a:	|  |      addq.l #4,sp
    b84c:	|  |      move.l d0,d1
    b84e:	|  |      move.l 1814a <cameraZoom>,d0
    b854:	|  |      move.l d0,-(sp)
    b856:	|  |      move.l d1,-(sp)
    b858:	|  |      jsr 131da <__divsf3>
    b85e:	|  |      addq.l #8,sp
    b860:	|  |      move.l d0,-(sp)
    b862:	|  |      move.l d3,-(sp)
    b864:	|  |      jsr 13622 <__subsf3>
    b86a:	|  |      addq.l #8,sp
    b86c:	|  |      move.l d0,-(sp)
    b86e:	|  |      move.l d2,-(sp)
    b870:	|  |      jsr 1349a <__gtsf2>
    b876:	|  |      addq.l #8,sp
    b878:	|  |      tst.l d0
    b87a:	|  +----- ble.s b8ce <builtIn_aimCamera+0x2ac>
    b87c:	|  |      move.l 19cf0 <sceneHeight>,d0
    b882:	|  |      move.l d0,-(sp)
    b884:	|  |      jsr 13356 <__floatunsisf>
    b88a:	|  |      addq.l #4,sp
    b88c:	|  |      move.l d0,d2
    b88e:	|  |      move.l 19b54 <winHeight>,d0
    b894:	|  |      move.l d0,-(sp)
    b896:	|  |      jsr 13356 <__floatunsisf>
    b89c:	|  |      addq.l #4,sp
    b89e:	|  |      move.l d0,d1
    b8a0:	|  |      move.l 1814a <cameraZoom>,d0
    b8a6:	|  |      move.l d0,-(sp)
    b8a8:	|  |      move.l d1,-(sp)
    b8aa:	|  |      jsr 131da <__divsf3>
    b8b0:	|  |      addq.l #8,sp
    b8b2:	|  |      move.l d0,-(sp)
    b8b4:	|  |      move.l d2,-(sp)
    b8b6:	|  |      jsr 13622 <__subsf3>
    b8bc:	|  |      addq.l #8,sp
    b8be:	|  |      move.l d0,-(sp)
    b8c0:	|  |      jsr 132c6 <__fixsfsi>
    b8c6:	|  |      addq.l #4,sp
    b8c8:	|  |      move.l d0,19d0e <cameraY>
	return BR_CONTINUE;
    b8ce:	|  \----> moveq #2,d0
}
    b8d0:	\-------> move.l (sp)+,d2
    b8d2:	          move.l (sp)+,d3
    b8d4:	          rts

0000b8d6 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    b8d6:	       subq.l #4,sp
    b8d8:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b8da:	       movea.l 16(sp),a0
    b8de:	       move.l 24(a0),d0
    b8e2:	       move.l d0,-(sp)
    b8e4:	       pea 1 <_start+0x1>
    b8e8:	       moveq #12,d0
    b8ea:	       add.l sp,d0
    b8ec:	       move.l d0,-(sp)
    b8ee:	       jsr 10e82 <getValueType>
    b8f4:	       lea 12(sp),sp
    b8f8:	       tst.w d0
    b8fa:	   /-- bne.s b902 <builtIn_zoomCamera+0x2c>
    b8fc:	   |   moveq #1,d0
    b8fe:	/--|-- bra.w bafc <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    b902:	|  \-> moveq #24,d0
    b904:	|      add.l 16(sp),d0
    b908:	|      move.l d0,-(sp)
    b90a:	|      jsr 11806 <trimStack>
    b910:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    b912:	|      move.l 19c10 <input+0xa>,d0
    b918:	|      move.l d0,-(sp)
    b91a:	|      jsr 1332e <__floatsisf>
    b920:	|      addq.l #4,sp
    b922:	|      move.l d0,d1
    b924:	|      move.l 1814a <cameraZoom>,d0
    b92a:	|      move.l d0,-(sp)
    b92c:	|      move.l d1,-(sp)
    b92e:	|      jsr 133e0 <__mulsf3>
    b934:	|      addq.l #8,sp
    b936:	|      move.l d0,-(sp)
    b938:	|      jsr 132c6 <__fixsfsi>
    b93e:	|      addq.l #4,sp
    b940:	|      move.l d0,19c10 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    b946:	|      move.l 19c14 <input+0xe>,d0
    b94c:	|      move.l d0,-(sp)
    b94e:	|      jsr 1332e <__floatsisf>
    b954:	|      addq.l #4,sp
    b956:	|      move.l d0,d1
    b958:	|      move.l 1814a <cameraZoom>,d0
    b95e:	|      move.l d0,-(sp)
    b960:	|      move.l d1,-(sp)
    b962:	|      jsr 133e0 <__mulsf3>
    b968:	|      addq.l #8,sp
    b96a:	|      move.l d0,-(sp)
    b96c:	|      jsr 132c6 <__fixsfsi>
    b972:	|      addq.l #4,sp
    b974:	|      move.l d0,19c14 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    b97a:	|      move.l 4(sp),d0
    b97e:	|      move.l d0,-(sp)
    b980:	|      jsr 1332e <__floatsisf>
    b986:	|      addq.l #4,sp
    b988:	|      move.l #1008981770,-(sp)
    b98e:	|      move.l d0,-(sp)
    b990:	|      jsr 133e0 <__mulsf3>
    b996:	|      addq.l #8,sp
    b998:	|      move.l d0,1814a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    b99e:	|      move.l 19b50 <winWidth>,d0
    b9a4:	|      move.l d0,-(sp)
    b9a6:	|      jsr 13356 <__floatunsisf>
    b9ac:	|      addq.l #4,sp
    b9ae:	|      move.l d0,d1
    b9b0:	|      move.l 1814a <cameraZoom>,d0
    b9b6:	|      move.l d0,-(sp)
    b9b8:	|      move.l d1,-(sp)
    b9ba:	|      jsr 131da <__divsf3>
    b9c0:	|      addq.l #8,sp
    b9c2:	|      move.l d0,d2
    b9c4:	|      move.l 19cec <sceneWidth>,d0
    b9ca:	|      move.l d0,-(sp)
    b9cc:	|      jsr 13356 <__floatunsisf>
    b9d2:	|      addq.l #4,sp
    b9d4:	|      move.l d0,-(sp)
    b9d6:	|      move.l d2,-(sp)
    b9d8:	|      jsr 1349a <__gtsf2>
    b9de:	|      addq.l #8,sp
    b9e0:	|      tst.l d0
    b9e2:	|  /-- ble.s ba18 <builtIn_zoomCamera+0x142>
    b9e4:	|  |   move.l 19b50 <winWidth>,d0
    b9ea:	|  |   move.l d0,-(sp)
    b9ec:	|  |   jsr 13356 <__floatunsisf>
    b9f2:	|  |   addq.l #4,sp
    b9f4:	|  |   move.l d0,d2
    b9f6:	|  |   move.l 19cec <sceneWidth>,d0
    b9fc:	|  |   move.l d0,-(sp)
    b9fe:	|  |   jsr 13356 <__floatunsisf>
    ba04:	|  |   addq.l #4,sp
    ba06:	|  |   move.l d0,-(sp)
    ba08:	|  |   move.l d2,-(sp)
    ba0a:	|  |   jsr 131da <__divsf3>
    ba10:	|  |   addq.l #8,sp
    ba12:	|  |   move.l d0,1814a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ba18:	|  \-> move.l 19b54 <winHeight>,d0
    ba1e:	|      move.l d0,-(sp)
    ba20:	|      jsr 13356 <__floatunsisf>
    ba26:	|      addq.l #4,sp
    ba28:	|      move.l d0,d1
    ba2a:	|      move.l 1814a <cameraZoom>,d0
    ba30:	|      move.l d0,-(sp)
    ba32:	|      move.l d1,-(sp)
    ba34:	|      jsr 131da <__divsf3>
    ba3a:	|      addq.l #8,sp
    ba3c:	|      move.l d0,d2
    ba3e:	|      move.l 19cf0 <sceneHeight>,d0
    ba44:	|      move.l d0,-(sp)
    ba46:	|      jsr 13356 <__floatunsisf>
    ba4c:	|      addq.l #4,sp
    ba4e:	|      move.l d0,-(sp)
    ba50:	|      move.l d2,-(sp)
    ba52:	|      jsr 1349a <__gtsf2>
    ba58:	|      addq.l #8,sp
    ba5a:	|      tst.l d0
    ba5c:	|  /-- ble.s ba92 <builtIn_zoomCamera+0x1bc>
    ba5e:	|  |   move.l 19b54 <winHeight>,d0
    ba64:	|  |   move.l d0,-(sp)
    ba66:	|  |   jsr 13356 <__floatunsisf>
    ba6c:	|  |   addq.l #4,sp
    ba6e:	|  |   move.l d0,d2
    ba70:	|  |   move.l 19cf0 <sceneHeight>,d0
    ba76:	|  |   move.l d0,-(sp)
    ba78:	|  |   jsr 13356 <__floatunsisf>
    ba7e:	|  |   addq.l #4,sp
    ba80:	|  |   move.l d0,-(sp)
    ba82:	|  |   move.l d2,-(sp)
    ba84:	|  |   jsr 131da <__divsf3>
    ba8a:	|  |   addq.l #8,sp
    ba8c:	|  |   move.l d0,1814a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    ba92:	|  \-> move.l 19c10 <input+0xa>,d0
    ba98:	|      move.l d0,-(sp)
    ba9a:	|      jsr 1332e <__floatsisf>
    baa0:	|      addq.l #4,sp
    baa2:	|      move.l d0,d1
    baa4:	|      move.l 1814a <cameraZoom>,d0
    baaa:	|      move.l d0,-(sp)
    baac:	|      move.l d1,-(sp)
    baae:	|      jsr 131da <__divsf3>
    bab4:	|      addq.l #8,sp
    bab6:	|      move.l d0,-(sp)
    bab8:	|      jsr 132c6 <__fixsfsi>
    babe:	|      addq.l #4,sp
    bac0:	|      move.l d0,19c10 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    bac6:	|      move.l 19c14 <input+0xe>,d0
    bacc:	|      move.l d0,-(sp)
    bace:	|      jsr 1332e <__floatsisf>
    bad4:	|      addq.l #4,sp
    bad6:	|      move.l d0,d1
    bad8:	|      move.l 1814a <cameraZoom>,d0
    bade:	|      move.l d0,-(sp)
    bae0:	|      move.l d1,-(sp)
    bae2:	|      jsr 131da <__divsf3>
    bae8:	|      addq.l #8,sp
    baea:	|      move.l d0,-(sp)
    baec:	|      jsr 132c6 <__fixsfsi>
    baf2:	|      addq.l #4,sp
    baf4:	|      move.l d0,19c14 <input+0xe>

	return BR_CONTINUE;
    bafa:	|      moveq #2,d0
}
    bafc:	\----> move.l (sp)+,d2
    bafe:	       addq.l #4,sp
    bb00:	       rts

0000bb02 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    bb02:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    bb04:	             tst.l 8(sp)
    bb08:	         /-- bne.s bb1c <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    bb0a:	         |   pea 167ec <main_sludge.c.828d7d86+0x2c>
    bb10:	         |   jsr 12ed6 <KPrintF>
    bb16:	         |   addq.l #4,sp
		return BR_ERROR;
    bb18:	         |   moveq #1,d0
    bb1a:	/--------|-- bra.s bb7c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    bb1c:	|        \-> jsr c58 <rand>
    bb22:	|            move.l d0,d1
    bb24:	|            move.l 8(sp),d0
    bb28:	|            move.l d0,-(sp)
    bb2a:	|            move.l d1,-(sp)
    bb2c:	|            jsr 13962 <__umodsi3>
    bb32:	|            addq.l #8,sp
    bb34:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    bb36:	|     /----- bra.s bb6a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    bb38:	|  /--|----> move.l (sp),d0
    bb3a:	|  |  |      cmp.l 8(sp),d0
    bb3e:	|  |  |  /-- bne.s bb5a <builtIn_pickOne+0x58>
    bb40:	|  |  |  |   moveq #28,d0
    bb42:	|  |  |  |   add.l 12(sp),d0
    bb46:	|  |  |  |   movea.l 12(sp),a0
    bb4a:	|  |  |  |   move.l 24(a0),d1
    bb4e:	|  |  |  |   move.l d0,-(sp)
    bb50:	|  |  |  |   move.l d1,-(sp)
    bb52:	|  |  |  |   jsr 1133c <copyVariable>
    bb58:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    bb5a:	|  |  |  \-> moveq #24,d0
    bb5c:	|  |  |      add.l 12(sp),d0
    bb60:	|  |  |      move.l d0,-(sp)
    bb62:	|  |  |      jsr 11806 <trimStack>
    bb68:	|  |  |      addq.l #4,sp
	while (numParams --) {
    bb6a:	|  |  \----> move.l 8(sp),d0
    bb6e:	|  |         move.l d0,d1
    bb70:	|  |         subq.l #1,d1
    bb72:	|  |         move.l d1,8(sp)
    bb76:	|  |         tst.l d0
    bb78:	|  \-------- bne.s bb38 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    bb7a:	|            moveq #2,d0
}
    bb7c:	\----------> addq.l #4,sp
    bb7e:	             rts

0000bb80 <builtIn_substring>:

builtIn(substring)
{
    bb80:	       lea -40(sp),sp
    bb84:	       move.l a6,-(sp)
    bb86:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bb88:	       movea.l 56(sp),a0
    bb8c:	       move.l 24(a0),d0
    bb90:	       move.l d0,-(sp)
    bb92:	       pea 1 <_start+0x1>
    bb96:	       lea 16(sp),a0
    bb9a:	       move.l a0,-(sp)
    bb9c:	       jsr 10e82 <getValueType>
    bba2:	       lea 12(sp),sp
    bba6:	       tst.w d0
    bba8:	   /-- bne.s bbb0 <builtIn_substring+0x30>
    bbaa:	   |   moveq #1,d0
    bbac:	/--|-- bra.w bd28 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bbb0:	|  \-> moveq #24,d0
    bbb2:	|      add.l 56(sp),d0
    bbb6:	|      move.l d0,-(sp)
    bbb8:	|      jsr 11806 <trimStack>
    bbbe:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bbc0:	|      movea.l 56(sp),a0
    bbc4:	|      move.l 24(a0),d0
    bbc8:	|      move.l d0,-(sp)
    bbca:	|      pea 1 <_start+0x1>
    bbce:	|      lea 20(sp),a0
    bbd2:	|      move.l a0,-(sp)
    bbd4:	|      jsr 10e82 <getValueType>
    bbda:	|      lea 12(sp),sp
    bbde:	|      tst.w d0
    bbe0:	|  /-- bne.s bbe8 <builtIn_substring+0x68>
    bbe2:	|  |   moveq #1,d0
    bbe4:	+--|-- bra.w bd28 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bbe8:	|  \-> moveq #24,d0
    bbea:	|      add.l 56(sp),d0
    bbee:	|      move.l d0,-(sp)
    bbf0:	|      jsr 11806 <trimStack>
    bbf6:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    bbf8:	|      movea.l 56(sp),a0
    bbfc:	|      move.l 24(a0),d0
    bc00:	|      move.l d0,-(sp)
    bc02:	|      jsr 11458 <getTextFromAnyVar>
    bc08:	|      addq.l #4,sp
    bc0a:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    bc0e:	|      moveq #24,d0
    bc10:	|      add.l 56(sp),d0
    bc14:	|      move.l d0,-(sp)
    bc16:	|      jsr 11806 <trimStack>
    bc1c:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    bc1e:	|      move.l 44(sp),-(sp)
    bc22:	|      jsr 1036e <strlen>
    bc28:	|      addq.l #4,sp
    bc2a:	|      move.l d0,d1
    bc2c:	|      move.l 12(sp),d0
    bc30:	|      movea.l d0,a0
    bc32:	|      move.l 8(sp),d0
    bc36:	|      add.l a0,d0
    bc38:	|      cmp.l d1,d0
    bc3a:	|  /-- bls.s bc70 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    bc3c:	|  |   move.l 44(sp),-(sp)
    bc40:	|  |   jsr 1036e <strlen>
    bc46:	|  |   addq.l #4,sp
    bc48:	|  |   move.l d0,d1
    bc4a:	|  |   move.l 12(sp),d0
    bc4e:	|  |   sub.l d0,d1
    bc50:	|  |   move.l d1,d0
    bc52:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    bc56:	|  |   move.l 44(sp),-(sp)
    bc5a:	|  |   jsr 1036e <strlen>
    bc60:	|  |   addq.l #4,sp
    bc62:	|  |   move.l d0,d1
    bc64:	|  |   move.l 12(sp),d0
    bc68:	|  |   cmp.l d1,d0
    bc6a:	|  +-- bls.s bc70 <builtIn_substring+0xf0>
            start = 0;
    bc6c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    bc70:	|  \-> move.l 8(sp),d0
    bc74:	|  /-- bpl.s bc7a <builtIn_substring+0xfa>
        length = 0;
    bc76:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    bc7a:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    bc80:	|      move.l 12(sp),d1
    bc84:	|      move.l 8(sp),d0
    bc88:	|      move.l d1,d2
    bc8a:	|      add.l d0,d2
    bc8c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    bc90:	|      move.l 36(sp),d0
    bc94:	|      sub.l 40(sp),d0
    bc98:	|      addq.l #1,d0
    bc9a:	|      move.l d0,32(sp)
    bc9e:	|      clr.l 28(sp)
    bca2:	|      move.l 19c50 <SysBase>,d0
    bca8:	|      movea.l d0,a6
    bcaa:	|      move.l 32(sp),d0
    bcae:	|      move.l 28(sp),d1
    bcb2:	|      jsr -684(a6)
    bcb6:	|      move.l d0,24(sp)
    bcba:	|      move.l 24(sp),d0
    bcbe:	|      move.l d0,20(sp)
    if (!newString) {
    bcc2:	|  /-- bne.s bcc8 <builtIn_substring+0x148>
        return BR_ERROR;
    bcc4:	|  |   moveq #1,d0
    bcc6:	+--|-- bra.s bd28 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    bcc8:	|  \-> move.l 36(sp),d0
    bccc:	|      sub.l 40(sp),d0
    bcd0:	|      move.l d0,d1
    bcd2:	|      move.l 40(sp),d0
    bcd6:	|      add.l 44(sp),d0
    bcda:	|      move.l d1,-(sp)
    bcdc:	|      move.l d0,-(sp)
    bcde:	|      move.l 28(sp),-(sp)
    bce2:	|      jsr 12e8a <memcpy>
    bce8:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    bcec:	|      move.l 36(sp),d0
    bcf0:	|      sub.l 40(sp),d0
    bcf4:	|      movea.l 20(sp),a0
    bcf8:	|      adda.l d0,a0
    bcfa:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    bcfc:	|      moveq #28,d0
    bcfe:	|      add.l 56(sp),d0
    bd02:	|      move.l 20(sp),-(sp)
    bd06:	|      move.l d0,-(sp)
    bd08:	|      jsr 110a4 <makeTextVar>
    bd0e:	|      addq.l #8,sp
    FreeVec(newString);
    bd10:	|      move.l 20(sp),16(sp)
    bd16:	|      move.l 19c50 <SysBase>,d0
    bd1c:	|      movea.l d0,a6
    bd1e:	|      movea.l 16(sp),a1
    bd22:	|      jsr -690(a6)
    return BR_CONTINUE;
    bd26:	|      moveq #2,d0
}
    bd28:	\----> move.l (sp)+,d2
    bd2a:	       movea.l (sp)+,a6
    bd2c:	       lea 40(sp),sp
    bd30:	       rts

0000bd32 <builtIn_stringLength>:

builtIn(stringLength)
{
    bd32:	subq.l #8,sp
    bd34:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    bd36:	movea.l 20(sp),a0
    bd3a:	move.l 24(a0),d0
    bd3e:	move.l d0,-(sp)
    bd40:	jsr 11458 <getTextFromAnyVar>
    bd46:	addq.l #4,sp
    bd48:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    bd4c:	moveq #24,d0
    bd4e:	add.l 20(sp),d0
    bd52:	move.l d0,-(sp)
    bd54:	jsr 11806 <trimStack>
    bd5a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    bd5c:	move.l 8(sp),-(sp)
    bd60:	jsr 1036e <strlen>
    bd66:	addq.l #4,sp
    bd68:	move.l d0,d1
    bd6a:	moveq #28,d0
    bd6c:	add.l 20(sp),d0
    bd70:	move.l d1,-(sp)
    bd72:	pea 1 <_start+0x1>
    bd76:	move.l d0,-(sp)
    bd78:	jsr 11774 <setVariable>
    bd7e:	lea 12(sp),sp
	FreeVec(newText);
    bd82:	move.l 8(sp),4(sp)
    bd88:	move.l 19c50 <SysBase>,d0
    bd8e:	movea.l d0,a6
    bd90:	movea.l 4(sp),a1
    bd94:	jsr -690(a6)
	return BR_CONTINUE;
    bd98:	moveq #2,d0
}
    bd9a:	movea.l (sp)+,a6
    bd9c:	addq.l #8,sp
    bd9e:	rts

0000bda0 <builtIn_newStack>:

builtIn(newStack)
{
    bda0:	             lea -12(sp),sp
    bda4:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    bda6:	             moveq #28,d0
    bda8:	             add.l 24(sp),d0
    bdac:	             move.l d0,-(sp)
    bdae:	             jsr 110d0 <unlinkVar>
    bdb4:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    bdb6:	             movea.l 24(sp),a0
    bdba:	             moveq #6,d0
    bdbc:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    bdc0:	             moveq #12,d1
    bdc2:	             move.l d1,12(sp)
    bdc6:	             clr.l 8(sp)
    bdca:	             move.l 19c50 <SysBase>,d0
    bdd0:	             movea.l d0,a6
    bdd2:	             move.l 12(sp),d0
    bdd6:	             move.l 8(sp),d1
    bdda:	             jsr -684(a6)
    bdde:	             move.l d0,4(sp)
    bde2:	             move.l 4(sp),d0
    bde6:	             movea.l 24(sp),a0
    bdea:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    bdee:	             movea.l 24(sp),a0
    bdf2:	             move.l 32(a0),d0
    bdf6:	         /-- bne.s bdfe <builtIn_newStack+0x5e>
    bdf8:	         |   moveq #1,d0
    bdfa:	/--------|-- bra.w be90 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    bdfe:	|        \-> movea.l 24(sp),a0
    be02:	|            movea.l 32(a0),a0
    be06:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    be08:	|            movea.l 24(sp),a0
    be0c:	|            movea.l 32(a0),a0
    be10:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    be14:	|            movea.l 24(sp),a0
    be18:	|            movea.l 32(a0),a0
    be1c:	|            moveq #1,d0
    be1e:	|            move.l d0,8(a0)
    
    while (numParams--) {
    be22:	|     /----- bra.s be7e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    be24:	|  /--|----> movea.l 24(sp),a0
    be28:	|  |  |      move.l 32(a0),d0
    be2c:	|  |  |      move.l d0,d1
    be2e:	|  |  |      movea.l 24(sp),a0
    be32:	|  |  |      move.l 24(a0),d0
    be36:	|  |  |      move.l d1,-(sp)
    be38:	|  |  |      move.l d0,-(sp)
    be3a:	|  |  |      jsr 106be <addVarToStack>
    be40:	|  |  |      addq.l #8,sp
    be42:	|  |  |      tst.w d0
    be44:	|  |  |  /-- bne.s be4a <builtIn_newStack+0xaa>
    be46:	|  |  |  |   moveq #1,d0
    be48:	+--|--|--|-- bra.s be90 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    be4a:	|  |  |  \-> movea.l 24(sp),a0
    be4e:	|  |  |      movea.l 32(a0),a0
    be52:	|  |  |      move.l 4(a0),d0
    be56:	|  |  |  /-- bne.s be6e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    be58:	|  |  |  |   movea.l 24(sp),a0
    be5c:	|  |  |  |   movea.l 32(a0),a1
    be60:	|  |  |  |   movea.l 24(sp),a0
    be64:	|  |  |  |   movea.l 32(a0),a0
    be68:	|  |  |  |   move.l (a1),d0
    be6a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    be6e:	|  |  |  \-> moveq #24,d0
    be70:	|  |  |      add.l 24(sp),d0
    be74:	|  |  |      move.l d0,-(sp)
    be76:	|  |  |      jsr 11806 <trimStack>
    be7c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    be7e:	|  |  \----> move.l 20(sp),d0
    be82:	|  |         move.l d0,d1
    be84:	|  |         subq.l #1,d1
    be86:	|  |         move.l d1,20(sp)
    be8a:	|  |         tst.l d0
    be8c:	|  \-------- bne.s be24 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    be8e:	|            moveq #2,d0
}
    be90:	\----------> movea.l (sp)+,a6
    be92:	             lea 12(sp),sp
    be96:	             rts

0000be98 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    be98:	          movea.l 8(sp),a0
    be9c:	          movea.l 24(a0),a0
    bea0:	          move.l (a0),d0
    bea2:	          moveq #6,d1
    bea4:	          cmp.l d0,d1
    bea6:	      /-- beq.s bec2 <builtIn_stackSize+0x2a>
    bea8:	      |   moveq #10,d1
    beaa:	      |   cmp.l d0,d1
    beac:	   /--|-- beq.s bf06 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    beae:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    beb0:	   |  |   pea 1681f <main_sludge.c.828d7d86+0x5f>
    beb6:	   |  |   jsr 12ed6 <KPrintF>
    bebc:	   |  |   addq.l #4,sp
	return BR_ERROR;
    bebe:	   |  |   moveq #1,d0
    bec0:	/--|--|-- bra.s bf40 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    bec2:	|  |  \-> movea.l 8(sp),a0
    bec6:	|  |      movea.l 24(a0),a0
    beca:	|  |      move.l 4(a0),d0
    bece:	|  |      move.l d0,-(sp)
    bed0:	|  |      jsr 117e2 <stackSize>
    bed6:	|  |      addq.l #4,sp
    bed8:	|  |      move.l d0,d1
    beda:	|  |      moveq #28,d0
    bedc:	|  |      add.l 8(sp),d0
    bee0:	|  |      move.l d1,-(sp)
    bee2:	|  |      pea 1 <_start+0x1>
    bee6:	|  |      move.l d0,-(sp)
    bee8:	|  |      jsr 11774 <setVariable>
    beee:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    bef2:	|  |      moveq #24,d0
    bef4:	|  |      add.l 8(sp),d0
    bef8:	|  |      move.l d0,-(sp)
    befa:	|  |      jsr 11806 <trimStack>
    bf00:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    bf02:	|  |      moveq #2,d0
    bf04:	+--|----- bra.s bf40 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    bf06:	|  \----> movea.l 8(sp),a0
    bf0a:	|         movea.l 24(a0),a0
    bf0e:	|         movea.l 4(a0),a0
    bf12:	|         move.l 4(a0),d1
    bf16:	|         moveq #28,d0
    bf18:	|         add.l 8(sp),d0
    bf1c:	|         move.l d1,-(sp)
    bf1e:	|         pea 1 <_start+0x1>
    bf22:	|         move.l d0,-(sp)
    bf24:	|         jsr 11774 <setVariable>
    bf2a:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    bf2e:	|         moveq #24,d0
    bf30:	|         add.l 8(sp),d0
    bf34:	|         move.l d0,-(sp)
    bf36:	|         jsr 11806 <trimStack>
    bf3c:	|         addq.l #4,sp
			return BR_CONTINUE;
    bf3e:	|         moveq #2,d0
}
    bf40:	\-------> rts

0000bf42 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bf42:	       movea.l 8(sp),a0
    bf46:	       movea.l 24(a0),a0
    bf4a:	       move.l (a0),d0
    bf4c:	       moveq #6,d1
    bf4e:	       cmp.l d0,d1
    bf50:	   /-- beq.s bf64 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    bf52:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    bf58:	   |   jsr 12ed6 <KPrintF>
    bf5e:	   |   addq.l #4,sp
		return BR_ERROR;
    bf60:	   |   moveq #1,d0
    bf62:	/--|-- bra.s bf98 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    bf64:	|  \-> moveq #28,d0
    bf66:	|      add.l 8(sp),d0
    bf6a:	|      movea.l 8(sp),a0
    bf6e:	|      move.l 24(a0),d1
    bf72:	|      move.l d0,-(sp)
    bf74:	|      move.l d1,-(sp)
    bf76:	|      jsr 10988 <copyStack>
    bf7c:	|      addq.l #8,sp
    bf7e:	|      tst.w d0
    bf80:	|  /-- bne.s bf86 <builtIn_copyStack+0x44>
    bf82:	|  |   moveq #1,d0
    bf84:	+--|-- bra.s bf98 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    bf86:	|  \-> moveq #24,d0
    bf88:	|      add.l 8(sp),d0
    bf8c:	|      move.l d0,-(sp)
    bf8e:	|      jsr 11806 <trimStack>
    bf94:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf96:	|      moveq #2,d0
}
    bf98:	\----> rts

0000bf9a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bf9a:	       movea.l 8(sp),a0
    bf9e:	       movea.l 24(a0),a0
    bfa2:	       movea.l 8(a0),a0
    bfa6:	       move.l (a0),d0
    bfa8:	       moveq #6,d1
    bfaa:	       cmp.l d0,d1
    bfac:	   /-- beq.s bfc2 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    bfae:	   |   pea 16861 <main_sludge.c.828d7d86+0xa1>
    bfb4:	   |   jsr 12ed6 <KPrintF>
    bfba:	   |   addq.l #4,sp
		return BR_ERROR;
    bfbc:	   |   moveq #1,d0
    bfbe:	/--|-- bra.w c050 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    bfc2:	|  \-> movea.l 8(sp),a0
    bfc6:	|      movea.l 24(a0),a0
    bfca:	|      movea.l 8(a0),a0
    bfce:	|      move.l 4(a0),d0
    bfd2:	|      move.l d0,d1
    bfd4:	|      movea.l 8(sp),a0
    bfd8:	|      move.l 24(a0),d0
    bfdc:	|      move.l d1,-(sp)
    bfde:	|      move.l d0,-(sp)
    bfe0:	|      jsr 106be <addVarToStack>
    bfe6:	|      addq.l #8,sp
    bfe8:	|      tst.w d0
    bfea:	|  /-- bne.s bff0 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    bfec:	|  |   moveq #1,d0
    bfee:	+--|-- bra.s c050 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    bff0:	|  \-> movea.l 8(sp),a0
    bff4:	|      movea.l 24(a0),a0
    bff8:	|      movea.l 8(a0),a0
    bffc:	|      movea.l 4(a0),a0
    c000:	|      movea.l (a0),a0
    c002:	|      move.l 8(a0),d0
    c006:	|  /-- bne.s c02e <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c008:	|  |   movea.l 8(sp),a0
    c00c:	|  |   movea.l 24(a0),a0
    c010:	|  |   movea.l 8(a0),a0
    c014:	|  |   movea.l 4(a0),a1
    c018:	|  |   movea.l 8(sp),a0
    c01c:	|  |   movea.l 24(a0),a0
    c020:	|  |   movea.l 8(a0),a0
    c024:	|  |   movea.l 4(a0),a0
    c028:	|  |   move.l (a1),d0
    c02a:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    c02e:	|  \-> moveq #24,d0
    c030:	|      add.l 8(sp),d0
    c034:	|      move.l d0,-(sp)
    c036:	|      jsr 11806 <trimStack>
    c03c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c03e:	|      moveq #24,d0
    c040:	|      add.l 8(sp),d0
    c044:	|      move.l d0,-(sp)
    c046:	|      jsr 11806 <trimStack>
    c04c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c04e:	|      moveq #2,d0
}
    c050:	\----> rts

0000c052 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c052:	             movea.l 8(sp),a0
    c056:	             movea.l 24(a0),a0
    c05a:	             movea.l 8(a0),a0
    c05e:	             move.l (a0),d0
    c060:	             moveq #6,d1
    c062:	             cmp.l d0,d1
    c064:	         /-- beq.s c07a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    c066:	         |   pea 16861 <main_sludge.c.828d7d86+0xa1>
    c06c:	         |   jsr 12ed6 <KPrintF>
    c072:	         |   addq.l #4,sp
		return BR_ERROR;
    c074:	         |   moveq #1,d0
    c076:	/--------|-- bra.w c168 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    c07a:	|        \-> movea.l 8(sp),a0
    c07e:	|            movea.l 24(a0),a0
    c082:	|            movea.l 8(a0),a0
    c086:	|            movea.l 4(a0),a0
    c08a:	|            move.l (a0),d0
    c08c:	|     /----- bne.s c0e6 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    c08e:	|     |      movea.l 8(sp),a0
    c092:	|     |      movea.l 24(a0),a0
    c096:	|     |      movea.l 8(a0),a0
    c09a:	|     |      move.l 4(a0),d0
    c09e:	|     |      move.l d0,d1
    c0a0:	|     |      movea.l 8(sp),a0
    c0a4:	|     |      move.l 24(a0),d0
    c0a8:	|     |      move.l d1,-(sp)
    c0aa:	|     |      move.l d0,-(sp)
    c0ac:	|     |      jsr 106be <addVarToStack>
    c0b2:	|     |      addq.l #8,sp
    c0b4:	|     |      tst.w d0
    c0b6:	|     |  /-- bne.s c0be <builtIn_enqueue+0x6c>
			return BR_ERROR;
    c0b8:	|     |  |   moveq #1,d0
    c0ba:	+-----|--|-- bra.w c168 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c0be:	|     |  \-> movea.l 8(sp),a0
    c0c2:	|     |      movea.l 24(a0),a0
    c0c6:	|     |      movea.l 8(a0),a0
    c0ca:	|     |      movea.l 4(a0),a1
    c0ce:	|     |      movea.l 8(sp),a0
    c0d2:	|     |      movea.l 24(a0),a0
    c0d6:	|     |      movea.l 8(a0),a0
    c0da:	|     |      movea.l 4(a0),a0
    c0de:	|     |      move.l (a1),d0
    c0e0:	|     |      move.l d0,4(a0)
    c0e4:	|  /--|----- bra.s c146 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    c0e6:	|  |  \----> movea.l 8(sp),a0
    c0ea:	|  |         movea.l 24(a0),a0
    c0ee:	|  |         movea.l 8(a0),a0
    c0f2:	|  |         movea.l 4(a0),a0
    c0f6:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    c0fa:	|  |         move.l d0,d1
    c0fc:	|  |         addq.l #8,d1
    c0fe:	|  |         movea.l 8(sp),a0
    c102:	|  |         move.l 24(a0),d0
    c106:	|  |         move.l d1,-(sp)
    c108:	|  |         move.l d0,-(sp)
    c10a:	|  |         jsr 106be <addVarToStack>
    c110:	|  |         addq.l #8,sp
    c112:	|  |         tst.w d0
    c114:	|  |     /-- bne.s c11a <builtIn_enqueue+0xc8>
			return BR_ERROR;
    c116:	|  |     |   moveq #1,d0
    c118:	+--|-----|-- bra.s c168 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    c11a:	|  |     \-> movea.l 8(sp),a0
    c11e:	|  |         movea.l 24(a0),a0
    c122:	|  |         movea.l 8(a0),a0
    c126:	|  |         movea.l 4(a0),a0
    c12a:	|  |         movea.l 4(a0),a1
    c12e:	|  |         movea.l 8(sp),a0
    c132:	|  |         movea.l 24(a0),a0
    c136:	|  |         movea.l 8(a0),a0
    c13a:	|  |         movea.l 4(a0),a0
    c13e:	|  |         move.l 8(a1),d0
    c142:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    c146:	|  \-------> moveq #24,d0
    c148:	|            add.l 8(sp),d0
    c14c:	|            move.l d0,-(sp)
    c14e:	|            jsr 11806 <trimStack>
    c154:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    c156:	|            moveq #24,d0
    c158:	|            add.l 8(sp),d0
    c15c:	|            move.l d0,-(sp)
    c15e:	|            jsr 11806 <trimStack>
    c164:	|            addq.l #4,sp
	return BR_CONTINUE;
    c166:	|            moveq #2,d0
}
    c168:	\----------> rts

0000c16a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    c16a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c16c:	       movea.l 12(sp),a0
    c170:	       movea.l 24(a0),a0
    c174:	       movea.l 8(a0),a0
    c178:	       move.l (a0),d0
    c17a:	       moveq #6,d1
    c17c:	       cmp.l d0,d1
    c17e:	   /-- beq.s c194 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c180:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    c186:	   |   jsr 12ed6 <KPrintF>
    c18c:	   |   addq.l #4,sp
		return BR_ERROR;
    c18e:	   |   moveq #1,d0
    c190:	/--|-- bra.w c22a <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    c194:	|  \-> movea.l 12(sp),a0
    c198:	|      movea.l 24(a0),a0
    c19c:	|      movea.l 8(a0),a0
    c1a0:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c1a4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c1a6:	|      movea.l 12(sp),a0
    c1aa:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c1ae:	|      clr.l -(sp)
    c1b0:	|      move.l d1,-(sp)
    c1b2:	|      move.l d0,-(sp)
    c1b4:	|      jsr 10a5e <deleteVarFromStack>
    c1ba:	|      lea 12(sp),sp
    c1be:	|      move.l d0,d1
    c1c0:	|      moveq #28,d0
    c1c2:	|      add.l 12(sp),d0
    c1c6:	|      move.l d1,-(sp)
    c1c8:	|      pea 1 <_start+0x1>
    c1cc:	|      move.l d0,-(sp)
    c1ce:	|      jsr 11774 <setVariable>
    c1d4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c1d8:	|      movea.l 12(sp),a0
    c1dc:	|      movea.l 24(a0),a0
    c1e0:	|      movea.l 8(a0),a0
    c1e4:	|      movea.l 4(a0),a0
    c1e8:	|      move.l (a0),d0
    c1ea:	|      movea.l 12(sp),a0
    c1ee:	|      movea.l 24(a0),a0
    c1f2:	|      movea.l 8(a0),a0
    c1f6:	|      movea.l 4(a0),a2
    c1fa:	|      move.l d0,-(sp)
    c1fc:	|      jsr 117be <stackFindLast>
    c202:	|      addq.l #4,sp
    c204:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c208:	|      moveq #24,d0
    c20a:	|      add.l 12(sp),d0
    c20e:	|      move.l d0,-(sp)
    c210:	|      jsr 11806 <trimStack>
    c216:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c218:	|      moveq #24,d0
    c21a:	|      add.l 12(sp),d0
    c21e:	|      move.l d0,-(sp)
    c220:	|      jsr 11806 <trimStack>
    c226:	|      addq.l #4,sp
	return BR_CONTINUE;
    c228:	|      moveq #2,d0
}
    c22a:	\----> movea.l (sp)+,a2
    c22c:	       rts

0000c22e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    c22e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c230:	       movea.l 12(sp),a0
    c234:	       movea.l 24(a0),a0
    c238:	       movea.l 8(a0),a0
    c23c:	       move.l (a0),d0
    c23e:	       moveq #6,d1
    c240:	       cmp.l d0,d1
    c242:	   /-- beq.s c258 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c244:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    c24a:	   |   jsr 12ed6 <KPrintF>
    c250:	   |   addq.l #4,sp
		return BR_ERROR;
    c252:	   |   moveq #1,d0
    c254:	/--|-- bra.w c2f0 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    c258:	|  \-> movea.l 12(sp),a0
    c25c:	|      movea.l 24(a0),a0
    c260:	|      movea.l 8(a0),a0
    c264:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c268:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c26a:	|      movea.l 12(sp),a0
    c26e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c272:	|      pea 1 <_start+0x1>
    c276:	|      move.l d1,-(sp)
    c278:	|      move.l d0,-(sp)
    c27a:	|      jsr 10a5e <deleteVarFromStack>
    c280:	|      lea 12(sp),sp
    c284:	|      move.l d0,d1
    c286:	|      moveq #28,d0
    c288:	|      add.l 12(sp),d0
    c28c:	|      move.l d1,-(sp)
    c28e:	|      pea 1 <_start+0x1>
    c292:	|      move.l d0,-(sp)
    c294:	|      jsr 11774 <setVariable>
    c29a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c29e:	|      movea.l 12(sp),a0
    c2a2:	|      movea.l 24(a0),a0
    c2a6:	|      movea.l 8(a0),a0
    c2aa:	|      movea.l 4(a0),a0
    c2ae:	|      move.l (a0),d0
    c2b0:	|      movea.l 12(sp),a0
    c2b4:	|      movea.l 24(a0),a0
    c2b8:	|      movea.l 8(a0),a0
    c2bc:	|      movea.l 4(a0),a2
    c2c0:	|      move.l d0,-(sp)
    c2c2:	|      jsr 117be <stackFindLast>
    c2c8:	|      addq.l #4,sp
    c2ca:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c2ce:	|      moveq #24,d0
    c2d0:	|      add.l 12(sp),d0
    c2d4:	|      move.l d0,-(sp)
    c2d6:	|      jsr 11806 <trimStack>
    c2dc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c2de:	|      moveq #24,d0
    c2e0:	|      add.l 12(sp),d0
    c2e4:	|      move.l d0,-(sp)
    c2e6:	|      jsr 11806 <trimStack>
    c2ec:	|      addq.l #4,sp
	return BR_CONTINUE;
    c2ee:	|      moveq #2,d0
}
    c2f0:	\----> movea.l (sp)+,a2
    c2f2:	       rts

0000c2f4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c2f4:	       movea.l 8(sp),a0
    c2f8:	       movea.l 24(a0),a0
    c2fc:	       move.l (a0),d0
    c2fe:	       moveq #6,d1
    c300:	       cmp.l d0,d1
    c302:	   /-- beq.s c316 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    c304:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    c30a:	   |   jsr 12ed6 <KPrintF>
    c310:	   |   addq.l #4,sp
		return BR_ERROR;
    c312:	   |   moveq #1,d0
    c314:	/--|-- bra.s c380 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c316:	|  \-> movea.l 8(sp),a0
    c31a:	|      movea.l 24(a0),a0
    c31e:	|      movea.l 4(a0),a0
    c322:	|      move.l (a0),d0
    c324:	|  /-- bne.s c338 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    c326:	|  |   pea 16879 <main_sludge.c.828d7d86+0xb9>
    c32c:	|  |   jsr 12ed6 <KPrintF>
    c332:	|  |   addq.l #4,sp
		return BR_ERROR;
    c334:	|  |   moveq #1,d0
    c336:	+--|-- bra.s c380 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c338:	|  \-> moveq #28,d0
    c33a:	|      add.l 8(sp),d0
    c33e:	|      movea.l 8(sp),a0
    c342:	|      movea.l 24(a0),a0
    c346:	|      movea.l 4(a0),a0
    c34a:	|      move.l (a0),d1
    c34c:	|      move.l d0,-(sp)
    c34e:	|      move.l d1,-(sp)
    c350:	|      jsr 1133c <copyVariable>
    c356:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    c358:	|      movea.l 8(sp),a0
    c35c:	|      movea.l 24(a0),a0
    c360:	|      move.l 4(a0),d0
    c364:	|      move.l d0,-(sp)
    c366:	|      jsr 11806 <trimStack>
    c36c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c36e:	|      moveq #24,d0
    c370:	|      add.l 8(sp),d0
    c374:	|      move.l d0,-(sp)
    c376:	|      jsr 11806 <trimStack>
    c37c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c37e:	|      moveq #2,d0
}
    c380:	\----> rts

0000c382 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c382:	       movea.l 8(sp),a0
    c386:	       movea.l 24(a0),a0
    c38a:	       move.l (a0),d0
    c38c:	       moveq #6,d1
    c38e:	       cmp.l d0,d1
    c390:	   /-- beq.s c3a4 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    c392:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    c398:	   |   jsr 12ed6 <KPrintF>
    c39e:	   |   addq.l #4,sp
		return BR_ERROR;
    c3a0:	   |   moveq #1,d0
    c3a2:	/--|-- bra.s c3f8 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c3a4:	|  \-> movea.l 8(sp),a0
    c3a8:	|      movea.l 24(a0),a0
    c3ac:	|      movea.l 4(a0),a0
    c3b0:	|      move.l (a0),d0
    c3b2:	|  /-- bne.s c3c6 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    c3b4:	|  |   pea 16879 <main_sludge.c.828d7d86+0xb9>
    c3ba:	|  |   jsr 12ed6 <KPrintF>
    c3c0:	|  |   addq.l #4,sp
		return BR_ERROR;
    c3c2:	|  |   moveq #1,d0
    c3c4:	+--|-- bra.s c3f8 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c3c6:	|  \-> moveq #28,d0
    c3c8:	|      add.l 8(sp),d0
    c3cc:	|      movea.l 8(sp),a0
    c3d0:	|      movea.l 24(a0),a0
    c3d4:	|      movea.l 4(a0),a0
    c3d8:	|      move.l (a0),d1
    c3da:	|      move.l d0,-(sp)
    c3dc:	|      move.l d1,-(sp)
    c3de:	|      jsr 1133c <copyVariable>
    c3e4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c3e6:	|      moveq #24,d0
    c3e8:	|      add.l 8(sp),d0
    c3ec:	|      move.l d0,-(sp)
    c3ee:	|      jsr 11806 <trimStack>
    c3f4:	|      addq.l #4,sp
	return BR_CONTINUE;
    c3f6:	|      moveq #2,d0
}
    c3f8:	\----> rts

0000c3fa <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c3fa:	       movea.l 8(sp),a0
    c3fe:	       movea.l 24(a0),a0
    c402:	       move.l (a0),d0
    c404:	       moveq #6,d1
    c406:	       cmp.l d0,d1
    c408:	   /-- beq.s c41c <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    c40a:	   |   pea 16848 <main_sludge.c.828d7d86+0x88>
    c410:	   |   jsr 12ed6 <KPrintF>
    c416:	   |   addq.l #4,sp
		return BR_ERROR;
    c418:	   |   moveq #1,d0
    c41a:	/--|-- bra.s c472 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c41c:	|  \-> movea.l 8(sp),a0
    c420:	|      movea.l 24(a0),a0
    c424:	|      movea.l 4(a0),a0
    c428:	|      move.l (a0),d0
    c42a:	|  /-- bne.s c43e <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    c42c:	|  |   pea 16879 <main_sludge.c.828d7d86+0xb9>
    c432:	|  |   jsr 12ed6 <KPrintF>
    c438:	|  |   addq.l #4,sp
		return BR_ERROR;
    c43a:	|  |   moveq #1,d0
    c43c:	+--|-- bra.s c472 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    c43e:	|  \-> moveq #28,d0
    c440:	|      add.l 8(sp),d0
    c444:	|      movea.l 8(sp),a0
    c448:	|      movea.l 24(a0),a0
    c44c:	|      movea.l 4(a0),a0
    c450:	|      move.l 4(a0),d1
    c454:	|      move.l d0,-(sp)
    c456:	|      move.l d1,-(sp)
    c458:	|      jsr 1133c <copyVariable>
    c45e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c460:	|      moveq #24,d0
    c462:	|      add.l 8(sp),d0
    c466:	|      move.l d0,-(sp)
    c468:	|      jsr 11806 <trimStack>
    c46e:	|      addq.l #4,sp
	return BR_CONTINUE;
    c470:	|      moveq #2,d0
}
    c472:	\----> rts

0000c474 <builtIn_random>:

builtIn(random)
{
    c474:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    c476:	       movea.l 12(sp),a0
    c47a:	       move.l 24(a0),d0
    c47e:	       move.l d0,-(sp)
    c480:	       pea 1 <_start+0x1>
    c484:	       move.l sp,d0
    c486:	       addq.l #8,d0
    c488:	       move.l d0,-(sp)
    c48a:	       jsr 10e82 <getValueType>
    c490:	       lea 12(sp),sp
    c494:	       tst.w d0
    c496:	   /-- bne.s c49c <builtIn_random+0x28>
		return BR_ERROR;
    c498:	   |   moveq #1,d0
    c49a:	/--|-- bra.s c4e6 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    c49c:	|  \-> moveq #24,d0
    c49e:	|      add.l 12(sp),d0
    c4a2:	|      move.l d0,-(sp)
    c4a4:	|      jsr 11806 <trimStack>
    c4aa:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    c4ac:	|      move.l (sp),d0
    c4ae:	|  /-- bgt.s c4b4 <builtIn_random+0x40>
    c4b0:	|  |   moveq #1,d0
    c4b2:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    c4b4:	|  \-> jsr c58 <rand>
    c4ba:	|      move.l d0,d1
    c4bc:	|      move.l (sp),d0
    c4be:	|      move.l d0,-(sp)
    c4c0:	|      move.l d1,-(sp)
    c4c2:	|      jsr 13962 <__umodsi3>
    c4c8:	|      addq.l #8,sp
    c4ca:	|      move.l d0,d1
    c4cc:	|      moveq #28,d0
    c4ce:	|      add.l 12(sp),d0
    c4d2:	|      move.l d1,-(sp)
    c4d4:	|      pea 1 <_start+0x1>
    c4d8:	|      move.l d0,-(sp)
    c4da:	|      jsr 11774 <setVariable>
    c4e0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c4e4:	|      moveq #2,d0
}
    c4e6:	\----> addq.l #4,sp
    c4e8:	       rts

0000c4ea <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    c4ea:	nop
    c4ec:	rts

0000c4ee <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    c4ee:	moveq #2,d0
}
    c4f0:	rts

0000c4f2 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    c4f2:	moveq #2,d0
}
    c4f4:	rts

0000c4f6 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c4f6:	moveq #2,d0
}
    c4f8:	rts

0000c4fa <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c4fa:	moveq #2,d0
}
    c4fc:	rts

0000c4fe <builtIn_setFont>:


builtIn(setFont)
{
    c4fe:	       lea -16(sp),sp
    c502:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c504:	       movea.l 28(sp),a0
    c508:	       move.l 24(a0),d0
    c50c:	       move.l d0,-(sp)
    c50e:	       pea 1 <_start+0x1>
    c512:	       lea 12(sp),a0
    c516:	       move.l a0,-(sp)
    c518:	       jsr 10e82 <getValueType>
    c51e:	       lea 12(sp),sp
    c522:	       tst.w d0
    c524:	   /-- bne.s c52c <builtIn_setFont+0x2e>
    c526:	   |   moveq #1,d0
    c528:	/--|-- bra.w c5da <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    c52c:	|  \-> moveq #24,d0
    c52e:	|      add.l 28(sp),d0
    c532:	|      move.l d0,-(sp)
    c534:	|      jsr 11806 <trimStack>
    c53a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c53c:	|      movea.l 28(sp),a0
    c540:	|      move.l 24(a0),d0
    c544:	|      move.l d0,-(sp)
    c546:	|      jsr 11458 <getTextFromAnyVar>
    c54c:	|      addq.l #4,sp
    c54e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    c552:	|  /-- bne.s c55a <builtIn_setFont+0x5c>
    c554:	|  |   moveq #1,d0
    c556:	+--|-- bra.w c5da <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    c55a:	|  \-> moveq #24,d0
    c55c:	|      add.l 28(sp),d0
    c560:	|      move.l d0,-(sp)
    c562:	|      jsr 11806 <trimStack>
    c568:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c56a:	|      movea.l 28(sp),a0
    c56e:	|      move.l 24(a0),d0
    c572:	|      move.l d0,-(sp)
    c574:	|      pea 5 <_start+0x5>
    c578:	|      lea 16(sp),a0
    c57c:	|      move.l a0,-(sp)
    c57e:	|      jsr 10e82 <getValueType>
    c584:	|      lea 12(sp),sp
    c588:	|      tst.w d0
    c58a:	|  /-- bne.s c590 <builtIn_setFont+0x92>
    c58c:	|  |   moveq #1,d0
    c58e:	+--|-- bra.s c5da <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    c590:	|  \-> moveq #24,d0
    c592:	|      add.l 28(sp),d0
    c596:	|      move.l d0,-(sp)
    c598:	|      jsr 11806 <trimStack>
    c59e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    c5a0:	|      move.l 4(sp),d1
    c5a4:	|      move.l 8(sp),d0
    c5a8:	|      move.l d1,-(sp)
    c5aa:	|      move.l 20(sp),-(sp)
    c5ae:	|      move.l d0,-(sp)
    c5b0:	|      jsr 1187a <loadFont>
    c5b6:	|      lea 12(sp),sp
    c5ba:	|      tst.w d0
    c5bc:	|  /-- bne.s c5c2 <builtIn_setFont+0xc4>
    c5be:	|  |   moveq #1,d0
    c5c0:	+--|-- bra.s c5da <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    c5c2:	|  \-> move.l 16(sp),12(sp)
    c5c8:	|      move.l 19c50 <SysBase>,d0
    c5ce:	|      movea.l d0,a6
    c5d0:	|      movea.l 12(sp),a1
    c5d4:	|      jsr -690(a6)

    return BR_CONTINUE;
    c5d8:	|      moveq #2,d0
}
    c5da:	\----> movea.l (sp)+,a6
    c5dc:	       lea 16(sp),sp
    c5e0:	       rts

0000c5e2 <builtIn_inFont>:

builtIn(inFont)
{
    c5e2:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c5e4:	       movea.l 12(sp),a0
    c5e8:	       move.l 24(a0),d0
    c5ec:	       move.l d0,-(sp)
    c5ee:	       jsr 11458 <getTextFromAnyVar>
    c5f4:	       addq.l #4,sp
    c5f6:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    c5f8:	   /-- bne.s c5fe <builtIn_inFont+0x1c>
    c5fa:	   |   moveq #1,d0
    c5fc:	/--|-- bra.s c634 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    c5fe:	|  \-> moveq #24,d0
    c600:	|      add.l 12(sp),d0
    c604:	|      move.l d0,-(sp)
    c606:	|      jsr 11806 <trimStack>
    c60c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    c60e:	|      move.l (sp),-(sp)
    c610:	|      jsr 1184e <isInFont>
    c616:	|      addq.l #4,sp
    c618:	|      movea.w d0,a0
    c61a:	|      moveq #28,d0
    c61c:	|      add.l 12(sp),d0
    c620:	|      move.l a0,-(sp)
    c622:	|      pea 1 <_start+0x1>
    c626:	|      move.l d0,-(sp)
    c628:	|      jsr 11774 <setVariable>
    c62e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c632:	|      moveq #2,d0
}
    c634:	\----> addq.l #4,sp
    c636:	       rts

0000c638 <builtIn_pasteString>:

builtIn(pasteString)
{
    c638:	       lea -16(sp),sp
    c63c:	       move.l a6,-(sp)
    c63e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c640:	       movea.l 32(sp),a0
    c644:	       move.l 24(a0),d0
    c648:	       move.l d0,-(sp)
    c64a:	       jsr 11458 <getTextFromAnyVar>
    c650:	       addq.l #4,sp
    c652:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    c656:	       moveq #24,d0
    c658:	       add.l 32(sp),d0
    c65c:	       move.l d0,-(sp)
    c65e:	       jsr 11806 <trimStack>
    c664:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c666:	       movea.l 32(sp),a0
    c66a:	       move.l 24(a0),d0
    c66e:	       move.l d0,-(sp)
    c670:	       pea 1 <_start+0x1>
    c674:	       lea 20(sp),a0
    c678:	       move.l a0,-(sp)
    c67a:	       jsr 10e82 <getValueType>
    c680:	       lea 12(sp),sp
    c684:	       tst.w d0
    c686:	   /-- bne.s c68e <builtIn_pasteString+0x56>
    c688:	   |   moveq #1,d0
    c68a:	/--|-- bra.w c716 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c68e:	|  \-> moveq #24,d0
    c690:	|      add.l 32(sp),d0
    c694:	|      move.l d0,-(sp)
    c696:	|      jsr 11806 <trimStack>
    c69c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c69e:	|      movea.l 32(sp),a0
    c6a2:	|      move.l 24(a0),d0
    c6a6:	|      move.l d0,-(sp)
    c6a8:	|      pea 1 <_start+0x1>
    c6ac:	|      lea 16(sp),a0
    c6b0:	|      move.l a0,-(sp)
    c6b2:	|      jsr 10e82 <getValueType>
    c6b8:	|      lea 12(sp),sp
    c6bc:	|      tst.w d0
    c6be:	|  /-- bne.s c6c4 <builtIn_pasteString+0x8c>
    c6c0:	|  |   moveq #1,d0
    c6c2:	+--|-- bra.s c716 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c6c4:	|  \-> moveq #24,d0
    c6c6:	|      add.l 32(sp),d0
    c6ca:	|      move.l d0,-(sp)
    c6cc:	|      jsr 11806 <trimStack>
    c6d2:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    c6d4:	|      move.l 8(sp),d0
    c6d8:	|      cmpi.l #65535,d0
    c6de:	|  /-- bne.s c6fe <builtIn_pasteString+0xc6>
    c6e0:	|  |   move.l 19b50 <winWidth>,d2
    c6e6:	|  |   move.l 20(sp),-(sp)
    c6ea:	|  |   jsr 11860 <stringWidth>
    c6f0:	|  |   addq.l #4,sp
    c6f2:	|  |   move.l d2,d1
    c6f4:	|  |   sub.l d0,d1
    c6f6:	|  |   move.l d1,d0
    c6f8:	|  |   lsr.l #1,d0
    c6fa:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    c6fe:	|  \-> move.l 20(sp),16(sp)
    c704:	|      move.l 19c50 <SysBase>,d0
    c70a:	|      movea.l d0,a6
    c70c:	|      movea.l 16(sp),a1
    c710:	|      jsr -690(a6)
    return BR_CONTINUE;
    c714:	|      moveq #2,d0
}
    c716:	\----> move.l (sp)+,d2
    c718:	       movea.l (sp)+,a6
    c71a:	       lea 16(sp),sp
    c71e:	       rts

0000c720 <builtIn_anim>:

builtIn(anim)
{
    c720:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    c724:	       moveq #1,d0
    c726:	       cmp.l 16(sp),d0
    c72a:	   /-- blt.s c740 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    c72c:	   |   pea 1688c <main_sludge.c.828d7d86+0xcc>
    c732:	   |   jsr 12ed6 <KPrintF>
    c738:	   |   addq.l #4,sp
		return BR_ERROR;
    c73a:	   |   moveq #1,d0
    c73c:	/--|-- bra.w c7ce <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c740:	|  \-> moveq #24,d1
    c742:	|      add.l 20(sp),d1
    c746:	|      move.l 16(sp),d0
    c74a:	|      subq.l #1,d0
    c74c:	|      move.l d1,-(sp)
    c74e:	|      move.l d0,-(sp)
    c750:	|      jsr 62ee <createPersonaAnim>
    c756:	|      addq.l #8,sp
    c758:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c75c:	|      movea.l 20(sp),a0
    c760:	|      move.l 24(a0),d0
    c764:	|      move.l d0,-(sp)
    c766:	|      pea 5 <_start+0x5>
    c76a:	|      lea 8(sp),a0
    c76e:	|      move.l a0,-(sp)
    c770:	|      jsr 10e82 <getValueType>
    c776:	|      lea 12(sp),sp
    c77a:	|      tst.w d0
    c77c:	|  /-- bne.s c782 <builtIn_anim+0x62>
    c77e:	|  |   moveq #1,d0
    c780:	+--|-- bra.s c7ce <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c782:	|  \-> moveq #24,d0
    c784:	|      add.l 20(sp),d0
    c788:	|      move.l d0,-(sp)
    c78a:	|      jsr 11806 <trimStack>
    c790:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c792:	|      move.l (sp),d0
    c794:	|      move.l d0,-(sp)
    c796:	|      jsr 8698 <loadBankForAnim>
    c79c:	|      addq.l #4,sp
    c79e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c7a2:	|  /-- bne.s c7a8 <builtIn_anim+0x88>
    c7a4:	|  |   moveq #1,d0
    c7a6:	+--|-- bra.s c7ce <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c7a8:	|  \-> move.l 4(sp),-(sp)
    c7ac:	|      move.l 12(sp),-(sp)
    c7b0:	|      jsr 7b3c <setBankFile>
    c7b6:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c7b8:	|      moveq #28,d0
    c7ba:	|      add.l 20(sp),d0
    c7be:	|      move.l 8(sp),-(sp)
    c7c2:	|      move.l d0,-(sp)
    c7c4:	|      jsr 11730 <newAnimationVariable>
    c7ca:	|      addq.l #8,sp
	return BR_CONTINUE;
    c7cc:	|      moveq #2,d0
}
    c7ce:	\----> lea 12(sp),sp
    c7d2:	       rts

0000c7d4 <builtIn_costume>:

builtIn(costume)
{
    c7d4:	          lea -32(sp),sp
    c7d8:	          move.l a6,-(sp)
    c7da:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c7dc:	          moveq #8,d0
    c7de:	          move.l d0,32(sp)
    c7e2:	          clr.l 28(sp)
    c7e6:	          move.l 19c50 <SysBase>,d0
    c7ec:	          movea.l d0,a6
    c7ee:	          move.l 32(sp),d0
    c7f2:	          move.l 28(sp),d1
    c7f6:	          jsr -684(a6)
    c7fa:	          move.l d0,24(sp)
    c7fe:	          move.l 24(sp),d0
    c802:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c806:	      /-- bne.s c80e <builtIn_costume+0x3a>
    c808:	      |   moveq #1,d0
    c80a:	/-----|-- bra.w c8f6 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c80e:	|     \-> move.l 44(sp),d0
    c812:	|         pea 3 <_start+0x3>
    c816:	|         move.l d0,-(sp)
    c818:	|         jsr 13906 <__divsi3>
    c81e:	|         addq.l #8,sp
    c820:	|         movea.l 20(sp),a0
    c824:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c828:	|         tst.l 44(sp)
    c82c:	|     /-- beq.s c842 <builtIn_costume+0x6e>
    c82e:	|     |   movea.l 20(sp),a0
    c832:	|     |   move.l 4(a0),d1
    c836:	|     |   move.l d1,d0
    c838:	|     |   add.l d0,d0
    c83a:	|     |   add.l d1,d0
    c83c:	|     |   cmp.l 44(sp),d0
    c840:	|  /--|-- beq.s c856 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c842:	|  |  \-> pea 168c6 <main_sludge.c.828d7d86+0x106>
    c848:	|  |      jsr 12ed6 <KPrintF>
    c84e:	|  |      addq.l #4,sp
        return BR_ERROR;
    c850:	|  |      moveq #1,d0
    c852:	+--|----- bra.w c8f6 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c856:	|  \----> move.l 44(sp),d0
    c85a:	|         add.l d0,d0
    c85c:	|         add.l d0,d0
    c85e:	|         move.l d0,16(sp)
    c862:	|         clr.l 12(sp)
    c866:	|         move.l 19c50 <SysBase>,d0
    c86c:	|         movea.l d0,a6
    c86e:	|         move.l 16(sp),d0
    c872:	|         move.l 12(sp),d1
    c876:	|         jsr -684(a6)
    c87a:	|         move.l d0,8(sp)
    c87e:	|         move.l 8(sp),d0
    c882:	|         movea.l 20(sp),a0
    c886:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c888:	|         movea.l 20(sp),a0
    c88c:	|         move.l (a0),d0
    c88e:	|     /-- bne.s c894 <builtIn_costume+0xc0>
    c890:	|     |   moveq #1,d0
    c892:	+-----|-- bra.s c8f6 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c894:	|     \-> move.l 44(sp),d0
    c898:	|         subq.l #1,d0
    c89a:	|         move.l d0,36(sp)
    c89e:	|     /-- bra.s c8da <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    c8a0:	|  /--|-> movea.l 48(sp),a0
    c8a4:	|  |  |   move.l 24(a0),d0
    c8a8:	|  |  |   movea.l 20(sp),a0
    c8ac:	|  |  |   movea.l (a0),a0
    c8ae:	|  |  |   move.l 36(sp),d1
    c8b2:	|  |  |   add.l d1,d1
    c8b4:	|  |  |   add.l d1,d1
    c8b6:	|  |  |   lea (0,a0,d1.l),a2
    c8ba:	|  |  |   move.l d0,-(sp)
    c8bc:	|  |  |   jsr 1135a <getAnimationFromVar>
    c8c2:	|  |  |   addq.l #4,sp
    c8c4:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    c8c6:	|  |  |   moveq #24,d0
    c8c8:	|  |  |   add.l 48(sp),d0
    c8cc:	|  |  |   move.l d0,-(sp)
    c8ce:	|  |  |   jsr 11806 <trimStack>
    c8d4:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    c8d6:	|  |  |   subq.l #1,36(sp)
    c8da:	|  |  \-> tst.l 36(sp)
    c8de:	|  \----- bge.s c8a0 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    c8e0:	|         moveq #28,d0
    c8e2:	|         add.l 48(sp),d0
    c8e6:	|         move.l 20(sp),-(sp)
    c8ea:	|         move.l d0,-(sp)
    c8ec:	|         jsr 11752 <newCostumeVariable>
    c8f2:	|         addq.l #8,sp
    return BR_CONTINUE;
    c8f4:	|         moveq #2,d0
}
    c8f6:	\-------> movea.l (sp)+,a2
    c8f8:	          movea.l (sp)+,a6
    c8fa:	          lea 32(sp),sp
    c8fe:	          rts

0000c900 <builtIn_launch>:

builtIn(launch)
{
    c900:	          lea -20(sp),sp
    c904:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    c906:	          movea.l 32(sp),a0
    c90a:	          move.l 24(a0),d0
    c90e:	          move.l d0,-(sp)
    c910:	          jsr 11458 <getTextFromAnyVar>
    c916:	          addq.l #4,sp
    c918:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    c91c:	      /-- bne.s c924 <builtIn_launch+0x24>
    c91e:	      |   moveq #1,d0
    c920:	/-----|-- bra.w ca52 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    c924:	|     \-> move.l 20(sp),-(sp)
    c928:	|         jsr 2fe <encodeFilename>
    c92e:	|         addq.l #4,sp
    c930:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    c934:	|         moveq #24,d0
    c936:	|         add.l 32(sp),d0
    c93a:	|         move.l d0,-(sp)
    c93c:	|         jsr 11806 <trimStack>
    c942:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    c944:	|         movea.l 20(sp),a0
    c948:	|         move.b (a0),d0
    c94a:	|         cmpi.b #104,d0
    c94e:	|  /----- bne.s c9b8 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    c950:	|  |      movea.l 20(sp),a0
    c954:	|  |      addq.l #1,a0
    c956:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    c958:	|  |      cmpi.b #116,d0
    c95c:	|  +----- bne.s c9b8 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    c95e:	|  |      movea.l 20(sp),a0
    c962:	|  |      addq.l #2,a0
    c964:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    c966:	|  |      cmpi.b #116,d0
    c96a:	|  +----- bne.s c9b8 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    c96c:	|  |      movea.l 20(sp),a0
    c970:	|  |      addq.l #3,a0
    c972:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    c974:	|  |      cmpi.b #112,d0
    c978:	|  +----- bne.s c9b8 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c97a:	|  |      movea.l 20(sp),a0
    c97e:	|  |      addq.l #4,a0
    c980:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    c982:	|  |      cmpi.b #58,d0
    c986:	|  |  /-- beq.s c9a4 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c988:	|  |  |   movea.l 20(sp),a0
    c98c:	|  |  |   addq.l #4,a0
    c98e:	|  |  |   move.b (a0),d0
    c990:	|  |  |   cmpi.b #115,d0
    c994:	|  +--|-- bne.s c9b8 <builtIn_launch+0xb8>
    c996:	|  |  |   movea.l 20(sp),a0
    c99a:	|  |  |   addq.l #5,a0
    c99c:	|  |  |   move.b (a0),d0
    c99e:	|  |  |   cmpi.b #58,d0
    c9a2:	|  +--|-- bne.s c9b8 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    c9a4:	|  |  \-> move.l 20(sp),-(sp)
    c9a8:	|  |      jsr b8 <copyString>
    c9ae:	|  |      addq.l #4,sp
    c9b0:	|  |      move.l d0,19d12 <launchMe>
    c9b6:	|  |  /-- bra.s ca0a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    c9b8:	|  \--|-> move.l 19b64 <gamePath>,d0
    c9be:	|     |   pea 16911 <main_sludge.c.828d7d86+0x151>
    c9c4:	|     |   move.l d0,-(sp)
    c9c6:	|     |   jsr 103ae <joinStrings>
    c9cc:	|     |   addq.l #8,sp
    c9ce:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    c9d2:	|     |   move.l 16(sp),-(sp)
    c9d6:	|     |   move.l 16(sp),-(sp)
    c9da:	|     |   jsr 103ae <joinStrings>
    c9e0:	|     |   addq.l #8,sp
    c9e2:	|     |   move.l d0,19d12 <launchMe>
        FreeVec(newText);
    c9e8:	|     |   move.l 16(sp),8(sp)
    c9ee:	|     |   move.l 19c50 <SysBase>,d0
    c9f4:	|     |   movea.l d0,a6
    c9f6:	|     |   movea.l 8(sp),a1
    c9fa:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    c9fe:	|     |   move.l 19d12 <launchMe>,d0
    ca04:	|     +-- bne.s ca0a <builtIn_launch+0x10a>
    ca06:	|     |   moveq #1,d0
    ca08:	+-----|-- bra.s ca52 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    ca0a:	|     \-> move.l 20(sp),4(sp)
    ca10:	|         move.l 19c50 <SysBase>,d0
    ca16:	|         movea.l d0,a6
    ca18:	|         movea.l 4(sp),a1
    ca1c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    ca20:	|         clr.l -(sp)
    ca22:	|         jsr 163a <setGraphicsWindow>
    ca28:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    ca2a:	|         moveq #28,d0
    ca2c:	|         add.l 32(sp),d0
    ca30:	|         pea 1 <_start+0x1>
    ca34:	|         pea 1 <_start+0x1>
    ca38:	|         move.l d0,-(sp)
    ca3a:	|         jsr 11774 <setVariable>
    ca40:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    ca44:	|         moveq #28,d0
    ca46:	|         add.l 32(sp),d0
    ca4a:	|         move.l d0,19d16 <launchResult>

    return BR_KEEP_AND_PAUSE;
    ca50:	|         moveq #0,d0
}
    ca52:	\-------> movea.l (sp)+,a6
    ca54:	          lea 20(sp),sp
    ca58:	          rts

0000ca5a <builtIn_pause>:

builtIn(pause)
{
    ca5a:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca5c:	       movea.l 12(sp),a0
    ca60:	       move.l 24(a0),d0
    ca64:	       move.l d0,-(sp)
    ca66:	       pea 1 <_start+0x1>
    ca6a:	       move.l sp,d0
    ca6c:	       addq.l #8,d0
    ca6e:	       move.l d0,-(sp)
    ca70:	       jsr 10e82 <getValueType>
    ca76:	       lea 12(sp),sp
    ca7a:	       tst.w d0
    ca7c:	   /-- bne.s ca82 <builtIn_pause+0x28>
    ca7e:	   |   moveq #1,d0
    ca80:	/--|-- bra.s cab0 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    ca82:	|  \-> moveq #24,d0
    ca84:	|      add.l 12(sp),d0
    ca88:	|      move.l d0,-(sp)
    ca8a:	|      jsr 11806 <trimStack>
    ca90:	|      addq.l #4,sp
	if (theTime > 0) {
    ca92:	|      move.l (sp),d0
    ca94:	|  /-- ble.s caae <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    ca96:	|  |   move.l (sp),d0
    ca98:	|  |   subq.l #1,d0
    ca9a:	|  |   movea.l 12(sp),a0
    ca9e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    caa2:	|  |   movea.l 12(sp),a0
    caa6:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    caaa:	|  |   moveq #0,d0
    caac:	+--|-- bra.s cab0 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    caae:	|  \-> moveq #2,d0
}
    cab0:	\----> addq.l #4,sp
    cab2:	       rts

0000cab4 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    cab4:	jsr 223c <completeTimers>
	return BR_CONTINUE;
    caba:	moveq #2,d0
}
    cabc:	rts

0000cabe <builtIn_callEvent>:

builtIn(callEvent)
{
    cabe:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cac2:	       movea.l 20(sp),a0
    cac6:	       move.l 24(a0),d0
    caca:	       move.l d0,-(sp)
    cacc:	       pea 7 <_start+0x7>
    cad0:	       lea 8(sp),a0
    cad4:	       move.l a0,-(sp)
    cad6:	       jsr 10e82 <getValueType>
    cadc:	       lea 12(sp),sp
    cae0:	       tst.w d0
    cae2:	   /-- bne.s caea <builtIn_callEvent+0x2c>
    cae4:	   |   moveq #1,d0
    cae6:	/--|-- bra.w cb80 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    caea:	|  \-> moveq #24,d0
    caec:	|      add.l 20(sp),d0
    caf0:	|      move.l d0,-(sp)
    caf2:	|      jsr 11806 <trimStack>
    caf8:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cafa:	|      movea.l 20(sp),a0
    cafe:	|      move.l 24(a0),d0
    cb02:	|      move.l d0,-(sp)
    cb04:	|      pea 7 <_start+0x7>
    cb08:	|      moveq #12,d0
    cb0a:	|      add.l sp,d0
    cb0c:	|      move.l d0,-(sp)
    cb0e:	|      jsr 10e82 <getValueType>
    cb14:	|      lea 12(sp),sp
    cb18:	|      tst.w d0
    cb1a:	|  /-- bne.s cb20 <builtIn_callEvent+0x62>
    cb1c:	|  |   moveq #1,d0
    cb1e:	+--|-- bra.s cb80 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    cb20:	|  \-> moveq #24,d0
    cb22:	|      add.l 20(sp),d0
    cb26:	|      move.l d0,-(sp)
    cb28:	|      jsr 11806 <trimStack>
    cb2e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    cb30:	|      move.l (sp),d1
    cb32:	|      move.l 4(sp),d0
    cb36:	|      move.l d1,-(sp)
    cb38:	|      move.l d0,-(sp)
    cb3a:	|      jsr 9d08 <getCombinationFunction>
    cb40:	|      addq.l #8,sp
    cb42:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    cb46:	|  /-- beq.s cb66 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    cb48:	|  |   moveq #28,d0
    cb4a:	|  |   add.l 20(sp),d0
    cb4e:	|  |   move.l 8(sp),-(sp)
    cb52:	|  |   pea 2 <_start+0x2>
    cb56:	|  |   move.l d0,-(sp)
    cb58:	|  |   jsr 11774 <setVariable>
    cb5e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    cb62:	|  |   moveq #4,d0
    cb64:	+--|-- bra.s cb80 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    cb66:	|  \-> moveq #28,d0
    cb68:	|      add.l 20(sp),d0
    cb6c:	|      clr.l -(sp)
    cb6e:	|      pea 1 <_start+0x1>
    cb72:	|      move.l d0,-(sp)
    cb74:	|      jsr 11774 <setVariable>
    cb7a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cb7e:	|      moveq #2,d0
}
    cb80:	\----> lea 12(sp),sp
    cb84:	       rts

0000cb86 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    cb86:	move.w #1,19d22 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    cb8e:	moveq #2,d0
}
    cb90:	rts

0000cb92 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    cb92:	moveq #24,d0
    cb94:	add.l 8(sp),d0
    cb98:	move.l d0,-(sp)
    cb9a:	jsr 11806 <trimStack>
    cba0:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    cba2:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cba8:	jsr 12ed6 <KPrintF>
    cbae:	addq.l #4,sp
	return BR_CONTINUE;
    cbb0:	moveq #2,d0
}
    cbb2:	rts

0000cbb4 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    cbb4:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cbba:	jsr 12ed6 <KPrintF>
    cbc0:	addq.l #4,sp
	return BR_CONTINUE;
    cbc2:	moveq #2,d0
}
    cbc4:	rts

0000cbc6 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    cbc6:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cbcc:	jsr 12ed6 <KPrintF>
    cbd2:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    cbd4:	moveq #2,d0
}
    cbd6:	rts

0000cbd8 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    cbd8:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cbde:	jsr 12ed6 <KPrintF>
    cbe4:	addq.l #4,sp
	return BR_CONTINUE;
    cbe6:	moveq #2,d0
}
    cbe8:	rts

0000cbea <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cbea:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cbf0:	jsr 12ed6 <KPrintF>
    cbf6:	addq.l #4,sp
	return BR_CONTINUE;
    cbf8:	moveq #2,d0
}
    cbfa:	rts

0000cbfc <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cbfc:	pea 16913 <main_sludge.c.828d7d86+0x153>
    cc02:	jsr 12ed6 <KPrintF>
    cc08:	addq.l #4,sp
	return BR_CONTINUE;
    cc0a:	moveq #2,d0
}
    cc0c:	rts

0000cc0e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    cc0e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc12:	       movea.l 20(sp),a0
    cc16:	       move.l 24(a0),d0
    cc1a:	       move.l d0,-(sp)
    cc1c:	       pea 1 <_start+0x1>
    cc20:	       moveq #16,d0
    cc22:	       add.l sp,d0
    cc24:	       move.l d0,-(sp)
    cc26:	       jsr 10e82 <getValueType>
    cc2c:	       lea 12(sp),sp
    cc30:	       tst.w d0
    cc32:	   /-- bne.s cc3a <builtIn_startMusic+0x2c>
    cc34:	   |   moveq #1,d0
    cc36:	/--|-- bra.w ccda <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cc3a:	|  \-> moveq #24,d0
    cc3c:	|      add.l 20(sp),d0
    cc40:	|      move.l d0,-(sp)
    cc42:	|      jsr 11806 <trimStack>
    cc48:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc4a:	|      movea.l 20(sp),a0
    cc4e:	|      move.l 24(a0),d0
    cc52:	|      move.l d0,-(sp)
    cc54:	|      pea 1 <_start+0x1>
    cc58:	|      moveq #12,d0
    cc5a:	|      add.l sp,d0
    cc5c:	|      move.l d0,-(sp)
    cc5e:	|      jsr 10e82 <getValueType>
    cc64:	|      lea 12(sp),sp
    cc68:	|      tst.w d0
    cc6a:	|  /-- bne.s cc70 <builtIn_startMusic+0x62>
    cc6c:	|  |   moveq #1,d0
    cc6e:	+--|-- bra.s ccda <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cc70:	|  \-> moveq #24,d0
    cc72:	|      add.l 20(sp),d0
    cc76:	|      move.l d0,-(sp)
    cc78:	|      jsr 11806 <trimStack>
    cc7e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc80:	|      movea.l 20(sp),a0
    cc84:	|      move.l 24(a0),d0
    cc88:	|      move.l d0,-(sp)
    cc8a:	|      pea 5 <_start+0x5>
    cc8e:	|      lea 8(sp),a0
    cc92:	|      move.l a0,-(sp)
    cc94:	|      jsr 10e82 <getValueType>
    cc9a:	|      lea 12(sp),sp
    cc9e:	|      tst.w d0
    cca0:	|  /-- bne.s cca6 <builtIn_startMusic+0x98>
    cca2:	|  |   moveq #1,d0
    cca4:	+--|-- bra.s ccda <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cca6:	|  \-> moveq #24,d0
    cca8:	|      add.l 20(sp),d0
    ccac:	|      move.l d0,-(sp)
    ccae:	|      jsr 11806 <trimStack>
    ccb4:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    ccb6:	|      movea.l 8(sp),a0
    ccba:	|      move.l 4(sp),d1
    ccbe:	|      move.l (sp),d0
    ccc0:	|      move.l a0,-(sp)
    ccc2:	|      move.l d1,-(sp)
    ccc4:	|      move.l d0,-(sp)
    ccc6:	|      jsr 94c2 <playMOD>
    cccc:	|      lea 12(sp),sp
    ccd0:	|      tst.w d0
    ccd2:	|  /-- bne.s ccd8 <builtIn_startMusic+0xca>
    ccd4:	|  |   moveq #2,d0
    ccd6:	+--|-- bra.s ccda <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    ccd8:	|  \-> moveq #2,d0
}
    ccda:	\----> lea 12(sp),sp
    ccde:	       rts

0000cce0 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    cce0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cce2:	       movea.l 12(sp),a0
    cce6:	       move.l 24(a0),d0
    ccea:	       move.l d0,-(sp)
    ccec:	       pea 1 <_start+0x1>
    ccf0:	       move.l sp,d0
    ccf2:	       addq.l #8,d0
    ccf4:	       move.l d0,-(sp)
    ccf6:	       jsr 10e82 <getValueType>
    ccfc:	       lea 12(sp),sp
    cd00:	       tst.w d0
    cd02:	   /-- bne.s cd08 <builtIn_stopMusic+0x28>
    cd04:	   |   moveq #1,d0
    cd06:	/--|-- bra.s cd26 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    cd08:	|  \-> moveq #24,d0
    cd0a:	|      add.l 12(sp),d0
    cd0e:	|      move.l d0,-(sp)
    cd10:	|      jsr 11806 <trimStack>
    cd16:	|      addq.l #4,sp
	stopMOD (v);
    cd18:	|      move.l (sp),d0
    cd1a:	|      move.l d0,-(sp)
    cd1c:	|      jsr 955e <stopMOD>
    cd22:	|      addq.l #4,sp
	return BR_CONTINUE;
    cd24:	|      moveq #2,d0
}
    cd26:	\----> addq.l #4,sp
    cd28:	       rts

0000cd2a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    cd2a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd2c:	       movea.l 16(sp),a0
    cd30:	       move.l 24(a0),d0
    cd34:	       move.l d0,-(sp)
    cd36:	       pea 1 <_start+0x1>
    cd3a:	       move.l sp,d0
    cd3c:	       addq.l #8,d0
    cd3e:	       move.l d0,-(sp)
    cd40:	       jsr 10e82 <getValueType>
    cd46:	       lea 12(sp),sp
    cd4a:	       tst.w d0
    cd4c:	   /-- bne.s cd52 <builtIn_setMusicVolume+0x28>
    cd4e:	   |   moveq #1,d0
    cd50:	/--|-- bra.s cdac <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cd52:	|  \-> moveq #24,d0
    cd54:	|      add.l 16(sp),d0
    cd58:	|      move.l d0,-(sp)
    cd5a:	|      jsr 11806 <trimStack>
    cd60:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd62:	|      movea.l 16(sp),a0
    cd66:	|      move.l 24(a0),d0
    cd6a:	|      move.l d0,-(sp)
    cd6c:	|      pea 1 <_start+0x1>
    cd70:	|      moveq #12,d0
    cd72:	|      add.l sp,d0
    cd74:	|      move.l d0,-(sp)
    cd76:	|      jsr 10e82 <getValueType>
    cd7c:	|      lea 12(sp),sp
    cd80:	|      tst.w d0
    cd82:	|  /-- bne.s cd88 <builtIn_setMusicVolume+0x5e>
    cd84:	|  |   moveq #1,d0
    cd86:	+--|-- bra.s cdac <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cd88:	|  \-> moveq #24,d0
    cd8a:	|      add.l 16(sp),d0
    cd8e:	|      move.l d0,-(sp)
    cd90:	|      jsr 11806 <trimStack>
    cd96:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    cd98:	|      move.l (sp),d1
    cd9a:	|      move.l 4(sp),d0
    cd9e:	|      move.l d1,-(sp)
    cda0:	|      move.l d0,-(sp)
    cda2:	|      jsr 9544 <setMusicVolume>
    cda8:	|      addq.l #8,sp
	return BR_CONTINUE;
    cdaa:	|      moveq #2,d0
}
    cdac:	\----> addq.l #8,sp
    cdae:	       rts

0000cdb0 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    cdb0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdb2:	       movea.l 12(sp),a0
    cdb6:	       move.l 24(a0),d0
    cdba:	       move.l d0,-(sp)
    cdbc:	       pea 1 <_start+0x1>
    cdc0:	       move.l sp,d0
    cdc2:	       addq.l #8,d0
    cdc4:	       move.l d0,-(sp)
    cdc6:	       jsr 10e82 <getValueType>
    cdcc:	       lea 12(sp),sp
    cdd0:	       tst.w d0
    cdd2:	   /-- bne.s cdd8 <builtIn_setDefaultMusicVolume+0x28>
    cdd4:	   |   moveq #1,d0
    cdd6:	/--|-- bra.s cdf6 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    cdd8:	|  \-> moveq #24,d0
    cdda:	|      add.l 12(sp),d0
    cdde:	|      move.l d0,-(sp)
    cde0:	|      jsr 11806 <trimStack>
    cde6:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    cde8:	|      move.l (sp),d0
    cdea:	|      move.l d0,-(sp)
    cdec:	|      jsr 9528 <setDefaultMusicVolume>
    cdf2:	|      addq.l #4,sp
	return BR_CONTINUE;
    cdf4:	|      moveq #2,d0
}
    cdf6:	\----> addq.l #4,sp
    cdf8:	       rts

0000cdfa <builtIn_playSound>:

builtIn(playSound)
{
    cdfa:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cdfc:	       movea.l 12(sp),a0
    ce00:	       move.l 24(a0),d0
    ce04:	       move.l d0,-(sp)
    ce06:	       pea 5 <_start+0x5>
    ce0a:	       move.l sp,d0
    ce0c:	       addq.l #8,d0
    ce0e:	       move.l d0,-(sp)
    ce10:	       jsr 10e82 <getValueType>
    ce16:	       lea 12(sp),sp
    ce1a:	       tst.w d0
    ce1c:	   /-- bne.s ce22 <builtIn_playSound+0x28>
    ce1e:	   |   moveq #1,d0
    ce20:	/--|-- bra.s ce4a <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    ce22:	|  \-> moveq #24,d0
    ce24:	|      add.l 12(sp),d0
    ce28:	|      move.l d0,-(sp)
    ce2a:	|      jsr 11806 <trimStack>
    ce30:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    ce32:	|      move.l (sp),d0
    ce34:	|      clr.l -(sp)
    ce36:	|      move.l d0,-(sp)
    ce38:	|      jsr 954c <startSound>
    ce3e:	|      addq.l #8,sp
    ce40:	|      tst.w d0
    ce42:	|  /-- bne.s ce48 <builtIn_playSound+0x4e>
    ce44:	|  |   moveq #2,d0
    ce46:	+--|-- bra.s ce4a <builtIn_playSound+0x50>
	return BR_CONTINUE;
    ce48:	|  \-> moveq #2,d0
}
    ce4a:	\----> addq.l #4,sp
    ce4c:	       rts

0000ce4e <builtIn_loopSound>:

builtIn(loopSound)
{
    ce4e:	             lea -28(sp),sp
    ce52:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    ce54:	             tst.l 36(sp)
    ce58:	         /-- bgt.s ce6e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    ce5a:	         |   pea 16936 <main_sludge.c.828d7d86+0x176>
    ce60:	         |   jsr 12ed6 <KPrintF>
    ce66:	         |   addq.l #4,sp
		return BR_ERROR;
    ce68:	         |   moveq #1,d0
    ce6a:	/--------|-- bra.w d02a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    ce6e:	|        \-> moveq #1,d0
    ce70:	|            cmp.l 36(sp),d0
    ce74:	|     /----- blt.s ced0 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ce76:	|     |      movea.l 40(sp),a0
    ce7a:	|     |      move.l 24(a0),d0
    ce7e:	|     |      move.l d0,-(sp)
    ce80:	|     |      pea 5 <_start+0x5>
    ce84:	|     |      lea 16(sp),a0
    ce88:	|     |      move.l a0,-(sp)
    ce8a:	|     |      jsr 10e82 <getValueType>
    ce90:	|     |      lea 12(sp),sp
    ce94:	|     |      tst.w d0
    ce96:	|     |  /-- bne.s ce9e <builtIn_loopSound+0x50>
    ce98:	|     |  |   moveq #1,d0
    ce9a:	+-----|--|-- bra.w d02a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    ce9e:	|     |  \-> moveq #24,d0
    cea0:	|     |      add.l 40(sp),d0
    cea4:	|     |      move.l d0,-(sp)
    cea6:	|     |      jsr 11806 <trimStack>
    ceac:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    ceae:	|     |      move.l 8(sp),d0
    ceb2:	|     |      pea 1 <_start+0x1>
    ceb6:	|     |      move.l d0,-(sp)
    ceb8:	|     |      jsr 954c <startSound>
    cebe:	|     |      addq.l #8,sp
    cec0:	|     |      tst.w d0
    cec2:	|     |  /-- bne.s ceca <builtIn_loopSound+0x7c>
    cec4:	|     |  |   moveq #2,d0
    cec6:	+-----|--|-- bra.w d02a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    ceca:	|     |  \-> moveq #2,d0
    cecc:	+-----|----- bra.w d02a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    ced0:	|     \----> moveq #2,d1
    ced2:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    ced6:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    ceda:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    cede:	|            movea.l 40(sp),a0
    cee2:	|            movea.l 24(a0),a0
    cee6:	|            move.l (a0),d0
    cee8:	|            moveq #5,d1
    ceea:	|            cmp.l d0,d1
    ceec:	|  /-------- beq.w cfc4 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    cef0:	|  |         movea.l 40(sp),a0
    cef4:	|  |         move.l 24(a0),d0
    cef8:	|  |         move.l d0,-(sp)
    cefa:	|  |         pea 1 <_start+0x1>
    cefe:	|  |         lea 12(sp),a0
    cf02:	|  |         move.l a0,-(sp)
    cf04:	|  |         jsr 10e82 <getValueType>
    cf0a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    cf0e:	|  |         moveq #24,d0
    cf10:	|  |         add.l 40(sp),d0
    cf14:	|  |         move.l d0,-(sp)
    cf16:	|  |         jsr 11806 <trimStack>
    cf1c:	|  |         addq.l #4,sp
			numParams--;
    cf1e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    cf22:	|  +-------- bra.w cfc4 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    cf26:	|  |  /----> movea.l 40(sp),a0
    cf2a:	|  |  |      move.l 24(a0),d0
    cf2e:	|  |  |      move.l d0,-(sp)
    cf30:	|  |  |      pea 5 <_start+0x5>
    cf34:	|  |  |      lea 16(sp),a0
    cf38:	|  |  |      move.l a0,-(sp)
    cf3a:	|  |  |      jsr 10e82 <getValueType>
    cf40:	|  |  |      lea 12(sp),sp
    cf44:	|  |  |      tst.w d0
    cf46:	|  |  |  /-- bne.s cf5c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    cf48:	|  |  |  |   pea 16974 <main_sludge.c.828d7d86+0x1b4>
    cf4e:	|  |  |  |   jsr 12ed6 <KPrintF>
    cf54:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    cf56:	|  |  |  |   moveq #1,d0
    cf58:	+--|--|--|-- bra.w d02a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    cf5c:	|  |  |  \-> moveq #20,d0
    cf5e:	|  |  |      move.l d0,20(sp)
    cf62:	|  |  |      clr.l 16(sp)
    cf66:	|  |  |      move.l 19c50 <SysBase>,d0
    cf6c:	|  |  |      movea.l d0,a6
    cf6e:	|  |  |      move.l 20(sp),d0
    cf72:	|  |  |      move.l 16(sp),d1
    cf76:	|  |  |      jsr -684(a6)
    cf7a:	|  |  |      move.l d0,12(sp)
    cf7e:	|  |  |      move.l 12(sp),d0
    cf82:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    cf86:	|  |  |  /-- bne.s cf8e <builtIn_loopSound+0x140>
    cf88:	|  |  |  |   moveq #1,d0
    cf8a:	+--|--|--|-- bra.w d02a <builtIn_loopSound+0x1dc>

			s->next = old;
    cf8e:	|  |  |  \-> movea.l 28(sp),a0
    cf92:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    cf98:	|  |  |      movea.l 28(sp),a0
    cf9c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    cfa0:	|  |  |      move.l 8(sp),d0
    cfa4:	|  |  |      movea.l 28(sp),a0
    cfa8:	|  |  |      move.l d0,(a0)
			old = s;
    cfaa:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    cfb0:	|  |  |      moveq #24,d0
    cfb2:	|  |  |      add.l 40(sp),d0
    cfb6:	|  |  |      move.l d0,-(sp)
    cfb8:	|  |  |      jsr 11806 <trimStack>
    cfbe:	|  |  |      addq.l #4,sp
			numParams--;
    cfc0:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    cfc4:	|  \--|----> tst.l 36(sp)
    cfc8:	|     \----- bne.w cf26 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    cfcc:	|        /-- bra.s cfd8 <builtIn_loopSound+0x18a>
    cfce:	|     /--|-> movea.l 28(sp),a0
    cfd2:	|     |  |   move.l 4(a0),28(sp)
    cfd8:	|     |  \-> movea.l 28(sp),a0
    cfdc:	|     |      move.l 4(a0),d0
    cfe0:	|     \----- bne.s cfce <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    cfe2:	|            move.l 4(sp),d0
    cfe6:	|            moveq #1,d1
    cfe8:	|            cmp.l d0,d1
    cfea:	|     /----- bge.s d002 <builtIn_loopSound+0x1b4>
			s->next = old;
    cfec:	|     |      movea.l 28(sp),a0
    cff0:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    cff6:	|     |      movea.l 24(sp),a0
    cffa:	|     |      move.l 28(sp),8(a0)
    d000:	|     |  /-- bra.s d012 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    d002:	|     \--|-> move.l 4(sp),d0
    d006:	|        +-- beq.s d012 <builtIn_loopSound+0x1c4>
			s->next = s;
    d008:	|        |   movea.l 28(sp),a0
    d00c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    d012:	|        \-> movea.l 24(sp),a0
    d016:	|            moveq #-1,d0
    d018:	|            move.l d0,16(a0)
		playSoundList(old);
    d01c:	|            move.l 24(sp),-(sp)
    d020:	|            jsr 94c6 <playSoundList>
    d026:	|            addq.l #4,sp
		return BR_CONTINUE;
    d028:	|            moveq #2,d0
	}
}
    d02a:	\----------> movea.l (sp)+,a6
    d02c:	             lea 28(sp),sp
    d030:	             rts

0000d032 <builtIn_stopSound>:

builtIn(stopSound)
{
    d032:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d034:	       movea.l 12(sp),a0
    d038:	       move.l 24(a0),d0
    d03c:	       move.l d0,-(sp)
    d03e:	       pea 5 <_start+0x5>
    d042:	       move.l sp,d0
    d044:	       addq.l #8,d0
    d046:	       move.l d0,-(sp)
    d048:	       jsr 10e82 <getValueType>
    d04e:	       lea 12(sp),sp
    d052:	       tst.w d0
    d054:	   /-- bne.s d05a <builtIn_stopSound+0x28>
    d056:	   |   moveq #1,d0
    d058:	/--|-- bra.s d078 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    d05a:	|  \-> moveq #24,d0
    d05c:	|      add.l 12(sp),d0
    d060:	|      move.l d0,-(sp)
    d062:	|      jsr 11806 <trimStack>
    d068:	|      addq.l #4,sp
	huntKillSound (v);
    d06a:	|      move.l (sp),d0
    d06c:	|      move.l d0,-(sp)
    d06e:	|      jsr 94be <huntKillSound>
    d074:	|      addq.l #4,sp
	return BR_CONTINUE;
    d076:	|      moveq #2,d0
}
    d078:	\----> addq.l #4,sp
    d07a:	       rts

0000d07c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    d07c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d07e:	       movea.l 12(sp),a0
    d082:	       move.l 24(a0),d0
    d086:	       move.l d0,-(sp)
    d088:	       pea 1 <_start+0x1>
    d08c:	       move.l sp,d0
    d08e:	       addq.l #8,d0
    d090:	       move.l d0,-(sp)
    d092:	       jsr 10e82 <getValueType>
    d098:	       lea 12(sp),sp
    d09c:	       tst.w d0
    d09e:	   /-- bne.s d0a4 <builtIn_setDefaultSoundVolume+0x28>
    d0a0:	   |   moveq #1,d0
    d0a2:	/--|-- bra.s d0c2 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    d0a4:	|  \-> moveq #24,d0
    d0a6:	|      add.l 12(sp),d0
    d0aa:	|      move.l d0,-(sp)
    d0ac:	|      jsr 11806 <trimStack>
    d0b2:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    d0b4:	|      move.l (sp),d0
    d0b6:	|      move.l d0,-(sp)
    d0b8:	|      jsr 9534 <setDefaultSoundVolume>
    d0be:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0c0:	|      moveq #2,d0
}
    d0c2:	\----> addq.l #4,sp
    d0c4:	       rts

0000d0c6 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    d0c6:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0c8:	       movea.l 16(sp),a0
    d0cc:	       move.l 24(a0),d0
    d0d0:	       move.l d0,-(sp)
    d0d2:	       pea 1 <_start+0x1>
    d0d6:	       move.l sp,d0
    d0d8:	       addq.l #8,d0
    d0da:	       move.l d0,-(sp)
    d0dc:	       jsr 10e82 <getValueType>
    d0e2:	       lea 12(sp),sp
    d0e6:	       tst.w d0
    d0e8:	   /-- bne.s d0ee <builtIn_setSoundVolume+0x28>
    d0ea:	   |   moveq #1,d0
    d0ec:	/--|-- bra.s d148 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d0ee:	|  \-> moveq #24,d0
    d0f0:	|      add.l 16(sp),d0
    d0f4:	|      move.l d0,-(sp)
    d0f6:	|      jsr 11806 <trimStack>
    d0fc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d0fe:	|      movea.l 16(sp),a0
    d102:	|      move.l 24(a0),d0
    d106:	|      move.l d0,-(sp)
    d108:	|      pea 5 <_start+0x5>
    d10c:	|      moveq #12,d0
    d10e:	|      add.l sp,d0
    d110:	|      move.l d0,-(sp)
    d112:	|      jsr 10e82 <getValueType>
    d118:	|      lea 12(sp),sp
    d11c:	|      tst.w d0
    d11e:	|  /-- bne.s d124 <builtIn_setSoundVolume+0x5e>
    d120:	|  |   moveq #1,d0
    d122:	+--|-- bra.s d148 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d124:	|  \-> moveq #24,d0
    d126:	|      add.l 16(sp),d0
    d12a:	|      move.l d0,-(sp)
    d12c:	|      jsr 11806 <trimStack>
    d132:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    d134:	|      move.l (sp),d1
    d136:	|      move.l 4(sp),d0
    d13a:	|      move.l d1,-(sp)
    d13c:	|      move.l d0,-(sp)
    d13e:	|      jsr 9548 <setSoundVolume>
    d144:	|      addq.l #8,sp
	return BR_CONTINUE;
    d146:	|      moveq #2,d0
}
    d148:	\----> addq.l #8,sp
    d14a:	       rts

0000d14c <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    d14c:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d150:	       movea.l 20(sp),a0
    d154:	       move.l 24(a0),d0
    d158:	       move.l d0,-(sp)
    d15a:	       pea 1 <_start+0x1>
    d15e:	       moveq #12,d0
    d160:	       add.l sp,d0
    d162:	       move.l d0,-(sp)
    d164:	       jsr 10e82 <getValueType>
    d16a:	       lea 12(sp),sp
    d16e:	       tst.w d0
    d170:	   /-- bne.s d178 <builtIn_setSoundLoopPoints+0x2c>
    d172:	   |   moveq #1,d0
    d174:	/--|-- bra.w d210 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d178:	|  \-> moveq #24,d0
    d17a:	|      add.l 20(sp),d0
    d17e:	|      move.l d0,-(sp)
    d180:	|      jsr 11806 <trimStack>
    d186:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d188:	|      movea.l 20(sp),a0
    d18c:	|      move.l 24(a0),d0
    d190:	|      move.l d0,-(sp)
    d192:	|      pea 1 <_start+0x1>
    d196:	|      lea 8(sp),a0
    d19a:	|      move.l a0,-(sp)
    d19c:	|      jsr 10e82 <getValueType>
    d1a2:	|      lea 12(sp),sp
    d1a6:	|      tst.w d0
    d1a8:	|  /-- bne.s d1ae <builtIn_setSoundLoopPoints+0x62>
    d1aa:	|  |   moveq #1,d0
    d1ac:	+--|-- bra.s d210 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d1ae:	|  \-> moveq #24,d0
    d1b0:	|      add.l 20(sp),d0
    d1b4:	|      move.l d0,-(sp)
    d1b6:	|      jsr 11806 <trimStack>
    d1bc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d1be:	|      movea.l 20(sp),a0
    d1c2:	|      move.l 24(a0),d0
    d1c6:	|      move.l d0,-(sp)
    d1c8:	|      pea 5 <_start+0x5>
    d1cc:	|      moveq #16,d0
    d1ce:	|      add.l sp,d0
    d1d0:	|      move.l d0,-(sp)
    d1d2:	|      jsr 10e82 <getValueType>
    d1d8:	|      lea 12(sp),sp
    d1dc:	|      tst.w d0
    d1de:	|  /-- bne.s d1e4 <builtIn_setSoundLoopPoints+0x98>
    d1e0:	|  |   moveq #1,d0
    d1e2:	+--|-- bra.s d210 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d1e4:	|  \-> moveq #24,d0
    d1e6:	|      add.l 20(sp),d0
    d1ea:	|      move.l d0,-(sp)
    d1ec:	|      jsr 11806 <trimStack>
    d1f2:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    d1f4:	|      movea.l 4(sp),a0
    d1f8:	|      move.l (sp),d1
    d1fa:	|      move.l 8(sp),d0
    d1fe:	|      move.l a0,-(sp)
    d200:	|      move.l d1,-(sp)
    d202:	|      move.l d0,-(sp)
    d204:	|      jsr 9540 <setSoundLoop>
    d20a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d20e:	|      moveq #2,d0
}
    d210:	\----> lea 12(sp),sp
    d214:	       rts

0000d216 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    d216:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d218:	          movea.l 12(sp),a0
    d21c:	          movea.l 24(a0),a0
    d220:	          move.l (a0),d0
    d222:	          moveq #5,d1
    d224:	          cmp.l d0,d1
    d226:	/-------- bne.s d26a <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d228:	|         movea.l 12(sp),a0
    d22c:	|         move.l 24(a0),d0
    d230:	|         move.l d0,-(sp)
    d232:	|         pea 5 <_start+0x5>
    d236:	|         move.l sp,d0
    d238:	|         addq.l #8,d0
    d23a:	|         move.l d0,-(sp)
    d23c:	|         jsr 10e82 <getValueType>
    d242:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d246:	|         moveq #24,d0
    d248:	|         add.l 12(sp),d0
    d24c:	|         move.l d0,-(sp)
    d24e:	|         jsr 11806 <trimStack>
    d254:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    d256:	|         move.l (sp),d0
    d258:	|         move.l d0,-(sp)
    d25a:	|         jsr 12674 <setFloor>
    d260:	|         addq.l #4,sp
    d262:	|         tst.w d0
    d264:	|  /----- bne.s d280 <builtIn_setFloor+0x6a>
    d266:	|  |      moveq #1,d0
    d268:	|  |  /-- bra.s d282 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    d26a:	\--|--|-> moveq #24,d0
    d26c:	   |  |   add.l 12(sp),d0
    d270:	   |  |   move.l d0,-(sp)
    d272:	   |  |   jsr 11806 <trimStack>
    d278:	   |  |   addq.l #4,sp
		setFloorNull ();
    d27a:	   |  |   jsr 12dee <setFloorNull>
	}
	return BR_CONTINUE;
    d280:	   \--|-> moveq #2,d0
}
    d282:	      \-> addq.l #4,sp
    d284:	          rts

0000d286 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    d286:	jsr 11f0c <drawFloor>
	return BR_CONTINUE;
    d28c:	moveq #2,d0
}
    d28e:	rts

0000d290 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    d290:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d292:	          movea.l 12(sp),a0
    d296:	          movea.l 24(a0),a0
    d29a:	          move.l (a0),d0
    d29c:	          moveq #5,d1
    d29e:	          cmp.l d0,d1
    d2a0:	/-------- bne.s d2e4 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d2a2:	|         movea.l 12(sp),a0
    d2a6:	|         move.l 24(a0),d0
    d2aa:	|         move.l d0,-(sp)
    d2ac:	|         pea 5 <_start+0x5>
    d2b0:	|         move.l sp,d0
    d2b2:	|         addq.l #8,d0
    d2b4:	|         move.l d0,-(sp)
    d2b6:	|         jsr 10e82 <getValueType>
    d2bc:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d2c0:	|         moveq #24,d0
    d2c2:	|         add.l 12(sp),d0
    d2c6:	|         move.l d0,-(sp)
    d2c8:	|         jsr 11806 <trimStack>
    d2ce:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    d2d0:	|         move.l (sp),d0
    d2d2:	|         move.l d0,-(sp)
    d2d4:	|         jsr 1c0c <setZBuffer>
    d2da:	|         addq.l #4,sp
    d2dc:	|         tst.w d0
    d2de:	|  /----- bne.s d2fa <builtIn_setZBuffer+0x6a>
    d2e0:	|  |      moveq #1,d0
    d2e2:	|  |  /-- bra.s d2fc <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    d2e4:	\--|--|-> moveq #24,d0
    d2e6:	   |  |   add.l 12(sp),d0
    d2ea:	   |  |   move.l d0,-(sp)
    d2ec:	   |  |   jsr 11806 <trimStack>
    d2f2:	   |  |   addq.l #4,sp
		killZBuffer ();
    d2f4:	   |  |   jsr 1bb6 <killZBuffer>
	}
	return BR_CONTINUE;
    d2fa:	   \--|-> moveq #2,d0
}
    d2fc:	      \-> addq.l #4,sp
    d2fe:	          rts

0000d300 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    d300:	pea 169ab <main_sludge.c.828d7d86+0x1eb>
    d306:	jsr 12ed6 <KPrintF>
    d30c:	addq.l #4,sp
	return BR_CONTINUE;
    d30e:	moveq #2,d0
}
    d310:	rts

0000d312 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d312:	          movea.l 8(sp),a0
    d316:	          move.l 24(a0),d0
    d31a:	          move.l d0,-(sp)
    d31c:	          pea 1 <_start+0x1>
    d320:	          pea 19d1e <speechMode>
    d326:	          jsr 10e82 <getValueType>
    d32c:	          lea 12(sp),sp
    d330:	          tst.w d0
    d332:	      /-- bne.s d338 <builtIn_setSpeechMode+0x26>
    d334:	      |   moveq #1,d0
    d336:	/-----|-- bra.s d370 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    d338:	|     \-> moveq #24,d0
    d33a:	|         add.l 8(sp),d0
    d33e:	|         move.l d0,-(sp)
    d340:	|         jsr 11806 <trimStack>
    d346:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    d348:	|         move.l 19d1e <speechMode>,d0
    d34e:	|     /-- bmi.s d35c <builtIn_setSpeechMode+0x4a>
    d350:	|     |   move.l 19d1e <speechMode>,d0
    d356:	|     |   moveq #2,d1
    d358:	|     |   cmp.l d0,d1
    d35a:	|  /--|-- bge.s d36e <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    d35c:	|  |  \-> pea 169c4 <main_sludge.c.828d7d86+0x204>
    d362:	|  |      jsr 12ed6 <KPrintF>
    d368:	|  |      addq.l #4,sp
		return BR_ERROR;
    d36a:	|  |      moveq #1,d0
    d36c:	+--|----- bra.s d370 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    d36e:	|  \----> moveq #2,d0
}
    d370:	\-------> rts

0000d372 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    d372:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    d374:	       jsr 561e <isThereAnySpeechGoingOn>
    d37a:	       move.l d0,(sp)
	if (i == -1) {
    d37c:	       moveq #-1,d0
    d37e:	       cmp.l (sp),d0
    d380:	/----- bne.s d39c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    d382:	|      moveq #28,d0
    d384:	|      add.l 12(sp),d0
    d388:	|      clr.l -(sp)
    d38a:	|      pea 1 <_start+0x1>
    d38e:	|      move.l d0,-(sp)
    d390:	|      jsr 11774 <setVariable>
    d396:	|      lea 12(sp),sp
    d39a:	|  /-- bra.s d3b4 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    d39c:	\--|-> moveq #28,d0
    d39e:	   |   add.l 12(sp),d0
    d3a2:	   |   move.l (sp),-(sp)
    d3a4:	   |   pea 7 <_start+0x7>
    d3a8:	   |   move.l d0,-(sp)
    d3aa:	   |   jsr 11774 <setVariable>
    d3b0:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    d3b4:	   \-> moveq #2,d0
}
    d3b6:	       addq.l #4,sp
    d3b8:	       rts

0000d3ba <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    d3ba:	jsr 397a <killSpeechTimers>
	return BR_CONTINUE;
    d3c0:	moveq #2,d0
}
    d3c2:	rts

0000d3c4 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    d3c4:	       move.l 19d58 <overRegion>,d0
    d3ca:	/----- beq.s d3f4 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    d3cc:	|      movea.l 19d58 <overRegion>,a0
    d3d2:	|      movea.l 28(a0),a0
    d3d6:	|      move.l 4(a0),d1
    d3da:	|      moveq #28,d0
    d3dc:	|      add.l 8(sp),d0
    d3e0:	|      move.l d1,-(sp)
    d3e2:	|      pea 7 <_start+0x7>
    d3e6:	|      move.l d0,-(sp)
    d3e8:	|      jsr 11774 <setVariable>
    d3ee:	|      lea 12(sp),sp
    d3f2:	|  /-- bra.s d40c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    d3f4:	\--|-> moveq #28,d0
    d3f6:	   |   add.l 8(sp),d0
    d3fa:	   |   clr.l -(sp)
    d3fc:	   |   pea 1 <_start+0x1>
    d400:	   |   move.l d0,-(sp)
    d402:	   |   jsr 11774 <setVariable>
    d408:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    d40c:	   \-> moveq #2,d0
}
    d40e:	       rts

0000d410 <builtIn_rename>:

builtIn(rename)
{
    d410:	       lea -16(sp),sp
    d414:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d416:	       movea.l 28(sp),a0
    d41a:	       move.l 24(a0),d0
    d41e:	       move.l d0,-(sp)
    d420:	       jsr 11458 <getTextFromAnyVar>
    d426:	       addq.l #4,sp
    d428:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    d42c:	   /-- bne.s d432 <builtIn_rename+0x22>
    d42e:	   |   moveq #1,d0
    d430:	/--|-- bra.s d4ac <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d432:	|  \-> moveq #24,d0
    d434:	|      add.l 28(sp),d0
    d438:	|      move.l d0,-(sp)
    d43a:	|      jsr 11806 <trimStack>
    d440:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    d442:	|      movea.l 28(sp),a0
    d446:	|      move.l 24(a0),d0
    d44a:	|      move.l d0,-(sp)
    d44c:	|      pea 7 <_start+0x7>
    d450:	|      lea 12(sp),a0
    d454:	|      move.l a0,-(sp)
    d456:	|      jsr 10e82 <getValueType>
    d45c:	|      lea 12(sp),sp
    d460:	|      tst.w d0
    d462:	|  /-- bne.s d468 <builtIn_rename+0x58>
    d464:	|  |   moveq #1,d0
    d466:	+--|-- bra.s d4ac <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d468:	|  \-> moveq #24,d0
    d46a:	|      add.l 28(sp),d0
    d46e:	|      move.l d0,-(sp)
    d470:	|      jsr 11806 <trimStack>
    d476:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    d478:	|      move.l 4(sp),d0
    d47c:	|      move.l d0,-(sp)
    d47e:	|      jsr 9cd4 <findObjectType>
    d484:	|      addq.l #4,sp
    d486:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    d48a:	|      movea.l 12(sp),a0
    d48e:	|      move.l (a0),8(sp)
    d492:	|      move.l 19c50 <SysBase>,d0
    d498:	|      movea.l d0,a6
    d49a:	|      movea.l 8(sp),a1
    d49e:	|      jsr -690(a6)
	o->screenName = newText;
    d4a2:	|      movea.l 12(sp),a0
    d4a6:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    d4aa:	|      moveq #2,d0
}
    d4ac:	\----> movea.l (sp)+,a6
    d4ae:	       lea 16(sp),sp
    d4b2:	       rts

0000d4b4 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    d4b4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d4b8:	          movea.l 20(sp),a0
    d4bc:	          move.l 24(a0),d0
    d4c0:	          move.l d0,-(sp)
    d4c2:	          pea 7 <_start+0x7>
    d4c6:	          lea 8(sp),a0
    d4ca:	          move.l a0,-(sp)
    d4cc:	          jsr 10e82 <getValueType>
    d4d2:	          lea 12(sp),sp
    d4d6:	          tst.w d0
    d4d8:	      /-- bne.s d4e0 <builtIn_getObjectX+0x2c>
    d4da:	      |   moveq #1,d0
    d4dc:	/-----|-- bra.w d57c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    d4e0:	|     \-> moveq #24,d0
    d4e2:	|         add.l 20(sp),d0
    d4e6:	|         move.l d0,-(sp)
    d4e8:	|         jsr 11806 <trimStack>
    d4ee:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d4f0:	|         move.l (sp),d0
    d4f2:	|         move.l d0,-(sp)
    d4f4:	|         jsr 6c1a <findPerson>
    d4fa:	|         addq.l #4,sp
    d4fc:	|         move.l d0,8(sp)
	if (pers) {
    d500:	|     /-- beq.s d52e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    d502:	|     |   movea.l 8(sp),a0
    d506:	|     |   move.l (a0),d0
    d508:	|     |   move.l d0,-(sp)
    d50a:	|     |   jsr 132c6 <__fixsfsi>
    d510:	|     |   addq.l #4,sp
    d512:	|     |   move.l d0,d1
    d514:	|     |   moveq #28,d0
    d516:	|     |   add.l 20(sp),d0
    d51a:	|     |   move.l d1,-(sp)
    d51c:	|     |   pea 1 <_start+0x1>
    d520:	|     |   move.l d0,-(sp)
    d522:	|     |   jsr 11774 <setVariable>
    d528:	|     |   lea 12(sp),sp
    d52c:	|  /--|-- bra.s d57a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d52e:	|  |  \-> move.l (sp),d0
    d530:	|  |      move.l d0,-(sp)
    d532:	|  |      jsr 1194c <getRegionForObject>
    d538:	|  |      addq.l #4,sp
    d53a:	|  |      move.l d0,4(sp)
		if (la) {
    d53e:	|  |  /-- beq.s d562 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    d540:	|  |  |   movea.l 4(sp),a0
    d544:	|  |  |   move.l 16(a0),d1
    d548:	|  |  |   moveq #28,d0
    d54a:	|  |  |   add.l 20(sp),d0
    d54e:	|  |  |   move.l d1,-(sp)
    d550:	|  |  |   pea 1 <_start+0x1>
    d554:	|  |  |   move.l d0,-(sp)
    d556:	|  |  |   jsr 11774 <setVariable>
    d55c:	|  |  |   lea 12(sp),sp
    d560:	|  +--|-- bra.s d57a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d562:	|  |  \-> moveq #28,d0
    d564:	|  |      add.l 20(sp),d0
    d568:	|  |      clr.l -(sp)
    d56a:	|  |      pea 1 <_start+0x1>
    d56e:	|  |      move.l d0,-(sp)
    d570:	|  |      jsr 11774 <setVariable>
    d576:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d57a:	|  \----> moveq #2,d0
}
    d57c:	\-------> lea 12(sp),sp
    d580:	          rts

0000d582 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    d582:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d586:	          movea.l 20(sp),a0
    d58a:	          move.l 24(a0),d0
    d58e:	          move.l d0,-(sp)
    d590:	          pea 7 <_start+0x7>
    d594:	          lea 8(sp),a0
    d598:	          move.l a0,-(sp)
    d59a:	          jsr 10e82 <getValueType>
    d5a0:	          lea 12(sp),sp
    d5a4:	          tst.w d0
    d5a6:	      /-- bne.s d5ae <builtIn_getObjectY+0x2c>
    d5a8:	      |   moveq #1,d0
    d5aa:	/-----|-- bra.w d64c <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    d5ae:	|     \-> moveq #24,d0
    d5b0:	|         add.l 20(sp),d0
    d5b4:	|         move.l d0,-(sp)
    d5b6:	|         jsr 11806 <trimStack>
    d5bc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d5be:	|         move.l (sp),d0
    d5c0:	|         move.l d0,-(sp)
    d5c2:	|         jsr 6c1a <findPerson>
    d5c8:	|         addq.l #4,sp
    d5ca:	|         move.l d0,8(sp)
	if (pers) {
    d5ce:	|     /-- beq.s d5fe <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    d5d0:	|     |   movea.l 8(sp),a0
    d5d4:	|     |   move.l 4(a0),d0
    d5d8:	|     |   move.l d0,-(sp)
    d5da:	|     |   jsr 132c6 <__fixsfsi>
    d5e0:	|     |   addq.l #4,sp
    d5e2:	|     |   move.l d0,d1
    d5e4:	|     |   moveq #28,d0
    d5e6:	|     |   add.l 20(sp),d0
    d5ea:	|     |   move.l d1,-(sp)
    d5ec:	|     |   pea 1 <_start+0x1>
    d5f0:	|     |   move.l d0,-(sp)
    d5f2:	|     |   jsr 11774 <setVariable>
    d5f8:	|     |   lea 12(sp),sp
    d5fc:	|  /--|-- bra.s d64a <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d5fe:	|  |  \-> move.l (sp),d0
    d600:	|  |      move.l d0,-(sp)
    d602:	|  |      jsr 1194c <getRegionForObject>
    d608:	|  |      addq.l #4,sp
    d60a:	|  |      move.l d0,4(sp)
		if (la) {
    d60e:	|  |  /-- beq.s d632 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    d610:	|  |  |   movea.l 4(sp),a0
    d614:	|  |  |   move.l 20(a0),d1
    d618:	|  |  |   moveq #28,d0
    d61a:	|  |  |   add.l 20(sp),d0
    d61e:	|  |  |   move.l d1,-(sp)
    d620:	|  |  |   pea 1 <_start+0x1>
    d624:	|  |  |   move.l d0,-(sp)
    d626:	|  |  |   jsr 11774 <setVariable>
    d62c:	|  |  |   lea 12(sp),sp
    d630:	|  +--|-- bra.s d64a <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d632:	|  |  \-> moveq #28,d0
    d634:	|  |      add.l 20(sp),d0
    d638:	|  |      clr.l -(sp)
    d63a:	|  |      pea 1 <_start+0x1>
    d63e:	|  |      move.l d0,-(sp)
    d640:	|  |      jsr 11774 <setVariable>
    d646:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d64a:	|  \----> moveq #2,d0
}
    d64c:	\-------> lea 12(sp),sp
    d650:	          rts

0000d652 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    d652:	       lea -32(sp),sp
    d656:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d65a:	       movea.l 56(sp),a0
    d65e:	       move.l 24(a0),d0
    d662:	       move.l d0,-(sp)
    d664:	       pea 1 <_start+0x1>
    d668:	       lea 28(sp),a0
    d66c:	       move.l a0,-(sp)
    d66e:	       jsr 10e82 <getValueType>
    d674:	       lea 12(sp),sp
    d678:	       tst.w d0
    d67a:	   /-- bne.s d682 <builtIn_addScreenRegion+0x30>
    d67c:	   |   moveq #1,d0
    d67e:	/--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d682:	|  \-> moveq #24,d0
    d684:	|      add.l 56(sp),d0
    d688:	|      move.l d0,-(sp)
    d68a:	|      jsr 11806 <trimStack>
    d690:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d692:	|      movea.l 56(sp),a0
    d696:	|      move.l 24(a0),d0
    d69a:	|      move.l d0,-(sp)
    d69c:	|      pea 1 <_start+0x1>
    d6a0:	|      moveq #48,d0
    d6a2:	|      add.l sp,d0
    d6a4:	|      move.l d0,-(sp)
    d6a6:	|      jsr 10e82 <getValueType>
    d6ac:	|      lea 12(sp),sp
    d6b0:	|      tst.w d0
    d6b2:	|  /-- bne.s d6ba <builtIn_addScreenRegion+0x68>
    d6b4:	|  |   moveq #1,d0
    d6b6:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d6ba:	|  \-> moveq #24,d0
    d6bc:	|      add.l 56(sp),d0
    d6c0:	|      move.l d0,-(sp)
    d6c2:	|      jsr 11806 <trimStack>
    d6c8:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6ca:	|      movea.l 56(sp),a0
    d6ce:	|      move.l 24(a0),d0
    d6d2:	|      move.l d0,-(sp)
    d6d4:	|      pea 1 <_start+0x1>
    d6d8:	|      moveq #52,d0
    d6da:	|      add.l sp,d0
    d6dc:	|      move.l d0,-(sp)
    d6de:	|      jsr 10e82 <getValueType>
    d6e4:	|      lea 12(sp),sp
    d6e8:	|      tst.w d0
    d6ea:	|  /-- bne.s d6f2 <builtIn_addScreenRegion+0xa0>
    d6ec:	|  |   moveq #1,d0
    d6ee:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d6f2:	|  \-> moveq #24,d0
    d6f4:	|      add.l 56(sp),d0
    d6f8:	|      move.l d0,-(sp)
    d6fa:	|      jsr 11806 <trimStack>
    d700:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d702:	|      movea.l 56(sp),a0
    d706:	|      move.l 24(a0),d0
    d70a:	|      move.l d0,-(sp)
    d70c:	|      pea 1 <_start+0x1>
    d710:	|      lea 32(sp),a0
    d714:	|      move.l a0,-(sp)
    d716:	|      jsr 10e82 <getValueType>
    d71c:	|      lea 12(sp),sp
    d720:	|      tst.w d0
    d722:	|  /-- bne.s d72a <builtIn_addScreenRegion+0xd8>
    d724:	|  |   moveq #1,d0
    d726:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d72a:	|  \-> moveq #24,d0
    d72c:	|      add.l 56(sp),d0
    d730:	|      move.l d0,-(sp)
    d732:	|      jsr 11806 <trimStack>
    d738:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d73a:	|      movea.l 56(sp),a0
    d73e:	|      move.l 24(a0),d0
    d742:	|      move.l d0,-(sp)
    d744:	|      pea 1 <_start+0x1>
    d748:	|      lea 36(sp),a0
    d74c:	|      move.l a0,-(sp)
    d74e:	|      jsr 10e82 <getValueType>
    d754:	|      lea 12(sp),sp
    d758:	|      tst.w d0
    d75a:	|  /-- bne.s d762 <builtIn_addScreenRegion+0x110>
    d75c:	|  |   moveq #1,d0
    d75e:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d762:	|  \-> moveq #24,d0
    d764:	|      add.l 56(sp),d0
    d768:	|      move.l d0,-(sp)
    d76a:	|      jsr 11806 <trimStack>
    d770:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d772:	|      movea.l 56(sp),a0
    d776:	|      move.l 24(a0),d0
    d77a:	|      move.l d0,-(sp)
    d77c:	|      pea 1 <_start+0x1>
    d780:	|      lea 40(sp),a0
    d784:	|      move.l a0,-(sp)
    d786:	|      jsr 10e82 <getValueType>
    d78c:	|      lea 12(sp),sp
    d790:	|      tst.w d0
    d792:	|  /-- bne.s d79a <builtIn_addScreenRegion+0x148>
    d794:	|  |   moveq #1,d0
    d796:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d79a:	|  \-> moveq #24,d0
    d79c:	|      add.l 56(sp),d0
    d7a0:	|      move.l d0,-(sp)
    d7a2:	|      jsr 11806 <trimStack>
    d7a8:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7aa:	|      movea.l 56(sp),a0
    d7ae:	|      move.l 24(a0),d0
    d7b2:	|      move.l d0,-(sp)
    d7b4:	|      pea 1 <_start+0x1>
    d7b8:	|      lea 44(sp),a0
    d7bc:	|      move.l a0,-(sp)
    d7be:	|      jsr 10e82 <getValueType>
    d7c4:	|      lea 12(sp),sp
    d7c8:	|      tst.w d0
    d7ca:	|  /-- bne.s d7d2 <builtIn_addScreenRegion+0x180>
    d7cc:	|  |   moveq #1,d0
    d7ce:	+--|-- bra.w d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d7d2:	|  \-> moveq #24,d0
    d7d4:	|      add.l 56(sp),d0
    d7d8:	|      move.l d0,-(sp)
    d7da:	|      jsr 11806 <trimStack>
    d7e0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d7e2:	|      movea.l 56(sp),a0
    d7e6:	|      move.l 24(a0),d0
    d7ea:	|      move.l d0,-(sp)
    d7ec:	|      pea 7 <_start+0x7>
    d7f0:	|      lea 24(sp),a0
    d7f4:	|      move.l a0,-(sp)
    d7f6:	|      jsr 10e82 <getValueType>
    d7fc:	|      lea 12(sp),sp
    d800:	|      tst.w d0
    d802:	|  /-- bne.s d808 <builtIn_addScreenRegion+0x1b6>
    d804:	|  |   moveq #1,d0
    d806:	+--|-- bra.s d85c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d808:	|  \-> moveq #24,d0
    d80a:	|      add.l 56(sp),d0
    d80e:	|      move.l d0,-(sp)
    d810:	|      jsr 11806 <trimStack>
    d816:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d818:	|      move.l 16(sp),d5
    d81c:	|      move.l 20(sp),d4
    d820:	|      move.l 40(sp),d3
    d824:	|      move.l 44(sp),d2
    d828:	|      movea.l 24(sp),a1
    d82c:	|      movea.l 28(sp),a0
    d830:	|      move.l 32(sp),d1
    d834:	|      move.l 36(sp),d0
    d838:	|      move.l d5,-(sp)
    d83a:	|      move.l d4,-(sp)
    d83c:	|      move.l d3,-(sp)
    d83e:	|      move.l d2,-(sp)
    d840:	|      move.l a1,-(sp)
    d842:	|      move.l a0,-(sp)
    d844:	|      move.l d1,-(sp)
    d846:	|      move.l d0,-(sp)
    d848:	|      jsr 1188c <addScreenRegion>
    d84e:	|      lea 32(sp),sp
    d852:	|      tst.w d0
    d854:	|  /-- beq.s d85a <builtIn_addScreenRegion+0x208>
    d856:	|  |   moveq #2,d0
    d858:	+--|-- bra.s d85c <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d85a:	|  \-> moveq #1,d0

}
    d85c:	\----> movem.l (sp)+,d2-d5
    d860:	       lea 32(sp),sp
    d864:	       rts

0000d866 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d866:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d868:	       movea.l 12(sp),a0
    d86c:	       move.l 24(a0),d0
    d870:	       move.l d0,-(sp)
    d872:	       pea 7 <_start+0x7>
    d876:	       move.l sp,d0
    d878:	       addq.l #8,d0
    d87a:	       move.l d0,-(sp)
    d87c:	       jsr 10e82 <getValueType>
    d882:	       lea 12(sp),sp
    d886:	       tst.w d0
    d888:	   /-- bne.s d88e <builtIn_removeScreenRegion+0x28>
    d88a:	   |   moveq #1,d0
    d88c:	/--|-- bra.s d8ac <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d88e:	|  \-> moveq #24,d0
    d890:	|      add.l 12(sp),d0
    d894:	|      move.l d0,-(sp)
    d896:	|      jsr 11806 <trimStack>
    d89c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d89e:	|      move.l (sp),d0
    d8a0:	|      move.l d0,-(sp)
    d8a2:	|      jsr 11af4 <removeScreenRegion>
    d8a8:	|      addq.l #4,sp
	return BR_CONTINUE;
    d8aa:	|      moveq #2,d0
}
    d8ac:	\----> addq.l #4,sp
    d8ae:	       rts

0000d8b0 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    d8b0:	jsr 11c78 <showBoxes>
	return BR_CONTINUE;
    d8b6:	moveq #2,d0
}
    d8b8:	rts

0000d8ba <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    d8ba:	jsr 1197a <killAllRegions>
	return BR_CONTINUE;
    d8c0:	moveq #2,d0
}
    d8c2:	rts

0000d8c4 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    d8c4:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    d8c8:	       movea.l 24(sp),a0
    d8cc:	       move.l 24(a0),d0
    d8d0:	       move.l d0,-(sp)
    d8d2:	       jsr 10b2e <getCostumeFromVar>
    d8d8:	       addq.l #4,sp
    d8da:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    d8de:	   /-- bne.s d8e6 <builtIn_addCharacter+0x22>
    d8e0:	   |   moveq #1,d0
    d8e2:	/--|-- bra.w d9c2 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    d8e6:	|  \-> moveq #24,d0
    d8e8:	|      add.l 24(sp),d0
    d8ec:	|      move.l d0,-(sp)
    d8ee:	|      jsr 11806 <trimStack>
    d8f4:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d8f6:	|      movea.l 24(sp),a0
    d8fa:	|      move.l 24(a0),d0
    d8fe:	|      move.l d0,-(sp)
    d900:	|      pea 1 <_start+0x1>
    d904:	|      lea 12(sp),a0
    d908:	|      move.l a0,-(sp)
    d90a:	|      jsr 10e82 <getValueType>
    d910:	|      lea 12(sp),sp
    d914:	|      tst.w d0
    d916:	|  /-- bne.s d91e <builtIn_addCharacter+0x5a>
    d918:	|  |   moveq #1,d0
    d91a:	+--|-- bra.w d9c2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d91e:	|  \-> moveq #24,d0
    d920:	|      add.l 24(sp),d0
    d924:	|      move.l d0,-(sp)
    d926:	|      jsr 11806 <trimStack>
    d92c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d92e:	|      movea.l 24(sp),a0
    d932:	|      move.l 24(a0),d0
    d936:	|      move.l d0,-(sp)
    d938:	|      pea 1 <_start+0x1>
    d93c:	|      moveq #16,d0
    d93e:	|      add.l sp,d0
    d940:	|      move.l d0,-(sp)
    d942:	|      jsr 10e82 <getValueType>
    d948:	|      lea 12(sp),sp
    d94c:	|      tst.w d0
    d94e:	|  /-- bne.s d954 <builtIn_addCharacter+0x90>
    d950:	|  |   moveq #1,d0
    d952:	+--|-- bra.s d9c2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d954:	|  \-> moveq #24,d0
    d956:	|      add.l 24(sp),d0
    d95a:	|      move.l d0,-(sp)
    d95c:	|      jsr 11806 <trimStack>
    d962:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d964:	|      movea.l 24(sp),a0
    d968:	|      move.l 24(a0),d0
    d96c:	|      move.l d0,-(sp)
    d96e:	|      pea 7 <_start+0x7>
    d972:	|      lea 8(sp),a0
    d976:	|      move.l a0,-(sp)
    d978:	|      jsr 10e82 <getValueType>
    d97e:	|      lea 12(sp),sp
    d982:	|      tst.w d0
    d984:	|  /-- bne.s d98a <builtIn_addCharacter+0xc6>
    d986:	|  |   moveq #1,d0
    d988:	+--|-- bra.s d9c2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d98a:	|  \-> moveq #24,d0
    d98c:	|      add.l 24(sp),d0
    d990:	|      move.l d0,-(sp)
    d992:	|      jsr 11806 <trimStack>
    d998:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    d99a:	|      movea.l (sp),a0
    d99c:	|      move.l 4(sp),d1
    d9a0:	|      move.l 8(sp),d0
    d9a4:	|      move.l 12(sp),-(sp)
    d9a8:	|      move.l a0,-(sp)
    d9aa:	|      move.l d1,-(sp)
    d9ac:	|      move.l d0,-(sp)
    d9ae:	|      jsr 5e40 <addPerson>
    d9b4:	|      lea 16(sp),sp
    d9b8:	|      tst.w d0
    d9ba:	|  /-- beq.s d9c0 <builtIn_addCharacter+0xfc>
    d9bc:	|  |   moveq #2,d0
    d9be:	+--|-- bra.s d9c2 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    d9c0:	|  \-> moveq #1,d0
}
    d9c2:	\----> lea 16(sp),sp
    d9c6:	       rts

0000d9c8 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    d9c8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9ca:	       movea.l 12(sp),a0
    d9ce:	       move.l 24(a0),d0
    d9d2:	       move.l d0,-(sp)
    d9d4:	       pea 7 <_start+0x7>
    d9d8:	       move.l sp,d0
    d9da:	       addq.l #8,d0
    d9dc:	       move.l d0,-(sp)
    d9de:	       jsr 10e82 <getValueType>
    d9e4:	       lea 12(sp),sp
    d9e8:	       tst.w d0
    d9ea:	   /-- bne.s d9f0 <builtIn_hideCharacter+0x28>
    d9ec:	   |   moveq #1,d0
    d9ee:	/--|-- bra.s da10 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    d9f0:	|  \-> moveq #24,d0
    d9f2:	|      add.l 12(sp),d0
    d9f6:	|      move.l d0,-(sp)
    d9f8:	|      jsr 11806 <trimStack>
    d9fe:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    da00:	|      move.l (sp),d0
    da02:	|      move.l d0,-(sp)
    da04:	|      clr.l -(sp)
    da06:	|      jsr 811a <setShown>
    da0c:	|      addq.l #8,sp
	return BR_CONTINUE;
    da0e:	|      moveq #2,d0
}
    da10:	\----> addq.l #4,sp
    da12:	       rts

0000da14 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    da14:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da16:	       movea.l 12(sp),a0
    da1a:	       move.l 24(a0),d0
    da1e:	       move.l d0,-(sp)
    da20:	       pea 7 <_start+0x7>
    da24:	       move.l sp,d0
    da26:	       addq.l #8,d0
    da28:	       move.l d0,-(sp)
    da2a:	       jsr 10e82 <getValueType>
    da30:	       lea 12(sp),sp
    da34:	       tst.w d0
    da36:	   /-- bne.s da3c <builtIn_showCharacter+0x28>
    da38:	   |   moveq #1,d0
    da3a:	/--|-- bra.s da5e <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    da3c:	|  \-> moveq #24,d0
    da3e:	|      add.l 12(sp),d0
    da42:	|      move.l d0,-(sp)
    da44:	|      jsr 11806 <trimStack>
    da4a:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    da4c:	|      move.l (sp),d0
    da4e:	|      move.l d0,-(sp)
    da50:	|      pea 1 <_start+0x1>
    da54:	|      jsr 811a <setShown>
    da5a:	|      addq.l #8,sp
	return BR_CONTINUE;
    da5c:	|      moveq #2,d0
}
    da5e:	\----> addq.l #4,sp
    da60:	       rts

0000da62 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    da62:	jsr 397a <killSpeechTimers>
	killMostPeople ();
    da68:	jsr 7086 <killMostPeople>
	return BR_CONTINUE;
    da6e:	moveq #2,d0
}
    da70:	rts

0000da72 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    da72:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da74:	       movea.l 16(sp),a0
    da78:	       move.l 24(a0),d0
    da7c:	       move.l d0,-(sp)
    da7e:	       pea 1 <_start+0x1>
    da82:	       move.l sp,d0
    da84:	       addq.l #8,d0
    da86:	       move.l d0,-(sp)
    da88:	       jsr 10e82 <getValueType>
    da8e:	       lea 12(sp),sp
    da92:	       tst.w d0
    da94:	   /-- bne.s da9a <builtIn_setCharacterDrawMode+0x28>
    da96:	   |   moveq #1,d0
    da98:	/--|-- bra.s daf4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    da9a:	|  \-> moveq #24,d0
    da9c:	|      add.l 16(sp),d0
    daa0:	|      move.l d0,-(sp)
    daa2:	|      jsr 11806 <trimStack>
    daa8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    daaa:	|      movea.l 16(sp),a0
    daae:	|      move.l 24(a0),d0
    dab2:	|      move.l d0,-(sp)
    dab4:	|      pea 7 <_start+0x7>
    dab8:	|      moveq #12,d0
    daba:	|      add.l sp,d0
    dabc:	|      move.l d0,-(sp)
    dabe:	|      jsr 10e82 <getValueType>
    dac4:	|      lea 12(sp),sp
    dac8:	|      tst.w d0
    daca:	|  /-- bne.s dad0 <builtIn_setCharacterDrawMode+0x5e>
    dacc:	|  |   moveq #1,d0
    dace:	+--|-- bra.s daf4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    dad0:	|  \-> moveq #24,d0
    dad2:	|      add.l 16(sp),d0
    dad6:	|      move.l d0,-(sp)
    dad8:	|      jsr 11806 <trimStack>
    dade:	|      addq.l #4,sp
	setDrawMode (di, obj);
    dae0:	|      move.l 4(sp),d1
    dae4:	|      move.l (sp),d0
    dae6:	|      move.l d1,-(sp)
    dae8:	|      move.l d0,-(sp)
    daea:	|      jsr 7b48 <setDrawMode>
    daf0:	|      addq.l #8,sp
	return BR_CONTINUE;
    daf2:	|      moveq #2,d0
}
    daf4:	\----> addq.l #8,sp
    daf6:	       rts

0000daf8 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    daf8:	pea 16a02 <main_sludge.c.828d7d86+0x242>
    dafe:	jsr 12ed6 <KPrintF>
    db04:	addq.l #4,sp
	return BR_CONTINUE;
    db06:	moveq #2,d0
}
    db08:	rts

0000db0a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    db0a:	pea 16a35 <main_sludge.c.828d7d86+0x275>
    db10:	jsr 12ed6 <KPrintF>
    db16:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    db18:	moveq #2,d0
}
    db1a:	rts

0000db1c <builtIn_setScale>:

builtIn(setScale)
{
    db1c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db1e:	       movea.l 16(sp),a0
    db22:	       move.l 24(a0),d0
    db26:	       move.l d0,-(sp)
    db28:	       pea 1 <_start+0x1>
    db2c:	       move.l sp,d0
    db2e:	       addq.l #8,d0
    db30:	       move.l d0,-(sp)
    db32:	       jsr 10e82 <getValueType>
    db38:	       lea 12(sp),sp
    db3c:	       tst.w d0
    db3e:	   /-- bne.s db44 <builtIn_setScale+0x28>
    db40:	   |   moveq #1,d0
    db42:	/--|-- bra.s dba6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    db44:	|  \-> moveq #24,d0
    db46:	|      add.l 16(sp),d0
    db4a:	|      move.l d0,-(sp)
    db4c:	|      jsr 11806 <trimStack>
    db52:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db54:	|      movea.l 16(sp),a0
    db58:	|      move.l 24(a0),d0
    db5c:	|      move.l d0,-(sp)
    db5e:	|      pea 1 <_start+0x1>
    db62:	|      moveq #12,d0
    db64:	|      add.l sp,d0
    db66:	|      move.l d0,-(sp)
    db68:	|      jsr 10e82 <getValueType>
    db6e:	|      lea 12(sp),sp
    db72:	|      tst.w d0
    db74:	|  /-- bne.s db7a <builtIn_setScale+0x5e>
    db76:	|  |   moveq #1,d0
    db78:	+--|-- bra.s dba6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    db7a:	|  \-> moveq #24,d0
    db7c:	|      add.l 16(sp),d0
    db80:	|      move.l d0,-(sp)
    db82:	|      jsr 11806 <trimStack>
    db88:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    db8a:	|      move.l (sp),d0
    db8c:	|      move.l d0,d0
    db8e:	|      movea.w d0,a1
    db90:	|      move.l 4(sp),d0
    db94:	|      move.l d0,d0
    db96:	|      movea.w d0,a0
    db98:	|      move.l a1,-(sp)
    db9a:	|      move.l a0,-(sp)
    db9c:	|      jsr 80f2 <setScale>
    dba2:	|      addq.l #8,sp
	return BR_CONTINUE;
    dba4:	|      moveq #2,d0
}
    dba6:	\----> addq.l #8,sp
    dba8:	       rts

0000dbaa <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    dbaa:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbac:	       movea.l 12(sp),a0
    dbb0:	       move.l 24(a0),d0
    dbb4:	       move.l d0,-(sp)
    dbb6:	       pea 7 <_start+0x7>
    dbba:	       move.l sp,d0
    dbbc:	       addq.l #8,d0
    dbbe:	       move.l d0,-(sp)
    dbc0:	       jsr 10e82 <getValueType>
    dbc6:	       lea 12(sp),sp
    dbca:	       tst.w d0
    dbcc:	   /-- bne.s dbd2 <builtIn_stopCharacter+0x28>
    dbce:	   |   moveq #1,d0
    dbd0:	/--|-- bra.s dc0a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    dbd2:	|  \-> moveq #24,d0
    dbd4:	|      add.l 12(sp),d0
    dbd8:	|      move.l d0,-(sp)
    dbda:	|      jsr 11806 <trimStack>
    dbe0:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    dbe2:	|      move.l (sp),d0
    dbe4:	|      move.l d0,-(sp)
    dbe6:	|      jsr 8226 <stopPerson>
    dbec:	|      addq.l #4,sp
    dbee:	|      movea.w d0,a0
    dbf0:	|      moveq #28,d0
    dbf2:	|      add.l 12(sp),d0
    dbf6:	|      move.l a0,-(sp)
    dbf8:	|      pea 1 <_start+0x1>
    dbfc:	|      move.l d0,-(sp)
    dbfe:	|      jsr 11774 <setVariable>
    dc04:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc08:	|      moveq #2,d0
}
    dc0a:	\----> addq.l #4,sp
    dc0c:	       rts

0000dc0e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    dc0e:	pea 16a6f <main_sludge.c.828d7d86+0x2af>
    dc14:	jsr 12ed6 <KPrintF>
    dc1a:	addq.l #4,sp
	return BR_CONTINUE;
    dc1c:	moveq #2,d0
}
    dc1e:	rts

0000dc20 <builtIn_animate>:

builtIn(animate)
{
    dc20:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dc22:	       movea.l 16(sp),a0
    dc26:	       move.l 24(a0),d0
    dc2a:	       move.l d0,-(sp)
    dc2c:	       jsr 1135a <getAnimationFromVar>
    dc32:	       addq.l #4,sp
    dc34:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dc38:	   /-- bne.s dc3e <builtIn_animate+0x1e>
    dc3a:	   |   moveq #1,d0
    dc3c:	/--|-- bra.s dcbc <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dc3e:	|  \-> moveq #24,d0
    dc40:	|      add.l 16(sp),d0
    dc44:	|      move.l d0,-(sp)
    dc46:	|      jsr 11806 <trimStack>
    dc4c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc4e:	|      movea.l 16(sp),a0
    dc52:	|      move.l 24(a0),d0
    dc56:	|      move.l d0,-(sp)
    dc58:	|      pea 7 <_start+0x7>
    dc5c:	|      move.l sp,d0
    dc5e:	|      addq.l #8,d0
    dc60:	|      move.l d0,-(sp)
    dc62:	|      jsr 10e82 <getValueType>
    dc68:	|      lea 12(sp),sp
    dc6c:	|      tst.w d0
    dc6e:	|  /-- bne.s dc74 <builtIn_animate+0x54>
    dc70:	|  |   moveq #1,d0
    dc72:	+--|-- bra.s dcbc <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dc74:	|  \-> moveq #24,d0
    dc76:	|      add.l 16(sp),d0
    dc7a:	|      move.l d0,-(sp)
    dc7c:	|      jsr 11806 <trimStack>
    dc82:	|      addq.l #4,sp
	animatePerson (obj, pp);
    dc84:	|      move.l (sp),d0
    dc86:	|      move.l 4(sp),-(sp)
    dc8a:	|      move.l d0,-(sp)
    dc8c:	|      jsr 60b2 <animatePerson>
    dc92:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    dc94:	|      move.l 4(sp),-(sp)
    dc98:	|      jsr 827a <timeForAnim>
    dc9e:	|      addq.l #4,sp
    dca0:	|      move.l d0,d1
    dca2:	|      moveq #28,d0
    dca4:	|      add.l 16(sp),d0
    dca8:	|      move.l d1,-(sp)
    dcaa:	|      pea 1 <_start+0x1>
    dcae:	|      move.l d0,-(sp)
    dcb0:	|      jsr 11774 <setVariable>
    dcb6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dcba:	|      moveq #2,d0
}
    dcbc:	\----> addq.l #8,sp
    dcbe:	       rts

0000dcc0 <builtIn_setCostume>:

builtIn(setCostume)
{
    dcc0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    dcc2:	       movea.l 16(sp),a0
    dcc6:	       move.l 24(a0),d0
    dcca:	       move.l d0,-(sp)
    dccc:	       jsr 10b2e <getCostumeFromVar>
    dcd2:	       addq.l #4,sp
    dcd4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dcd8:	   /-- bne.s dcde <builtIn_setCostume+0x1e>
    dcda:	   |   moveq #1,d0
    dcdc:	/--|-- bra.s dd36 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dcde:	|  \-> moveq #24,d0
    dce0:	|      add.l 16(sp),d0
    dce4:	|      move.l d0,-(sp)
    dce6:	|      jsr 11806 <trimStack>
    dcec:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dcee:	|      movea.l 16(sp),a0
    dcf2:	|      move.l 24(a0),d0
    dcf6:	|      move.l d0,-(sp)
    dcf8:	|      pea 7 <_start+0x7>
    dcfc:	|      move.l sp,d0
    dcfe:	|      addq.l #8,d0
    dd00:	|      move.l d0,-(sp)
    dd02:	|      jsr 10e82 <getValueType>
    dd08:	|      lea 12(sp),sp
    dd0c:	|      tst.w d0
    dd0e:	|  /-- bne.s dd14 <builtIn_setCostume+0x54>
    dd10:	|  |   moveq #1,d0
    dd12:	+--|-- bra.s dd36 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dd14:	|  \-> moveq #24,d0
    dd16:	|      add.l 16(sp),d0
    dd1a:	|      move.l d0,-(sp)
    dd1c:	|      jsr 11806 <trimStack>
    dd22:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    dd24:	|      move.l (sp),d0
    dd26:	|      move.l 4(sp),-(sp)
    dd2a:	|      move.l d0,-(sp)
    dd2c:	|      jsr 60fc <animatePersonUsingPersona>
    dd32:	|      addq.l #8,sp
	return BR_CONTINUE;
    dd34:	|      moveq #2,d0
}
    dd36:	\----> addq.l #8,sp
    dd38:	       rts

0000dd3a <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    dd3a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd3c:	       movea.l 16(sp),a0
    dd40:	       move.l 24(a0),d0
    dd44:	       move.l d0,-(sp)
    dd46:	       pea 1 <_start+0x1>
    dd4a:	       move.l sp,d0
    dd4c:	       addq.l #8,d0
    dd4e:	       move.l d0,-(sp)
    dd50:	       jsr 10e82 <getValueType>
    dd56:	       lea 12(sp),sp
    dd5a:	       tst.w d0
    dd5c:	   /-- bne.s dd62 <builtIn_floatCharacter+0x28>
    dd5e:	   |   moveq #1,d0
    dd60:	/--|-- bra.s ddd6 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dd62:	|  \-> moveq #24,d0
    dd64:	|      add.l 16(sp),d0
    dd68:	|      move.l d0,-(sp)
    dd6a:	|      jsr 11806 <trimStack>
    dd70:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd72:	|      movea.l 16(sp),a0
    dd76:	|      move.l 24(a0),d0
    dd7a:	|      move.l d0,-(sp)
    dd7c:	|      pea 7 <_start+0x7>
    dd80:	|      moveq #12,d0
    dd82:	|      add.l sp,d0
    dd84:	|      move.l d0,-(sp)
    dd86:	|      jsr 10e82 <getValueType>
    dd8c:	|      lea 12(sp),sp
    dd90:	|      tst.w d0
    dd92:	|  /-- bne.s dd98 <builtIn_floatCharacter+0x5e>
    dd94:	|  |   moveq #1,d0
    dd96:	+--|-- bra.s ddd6 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dd98:	|  \-> moveq #24,d0
    dd9a:	|      add.l 16(sp),d0
    dd9e:	|      move.l d0,-(sp)
    dda0:	|      jsr 11806 <trimStack>
    dda6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    dda8:	|      move.l 4(sp),d1
    ddac:	|      move.l (sp),d0
    ddae:	|      move.l d1,-(sp)
    ddb0:	|      move.l d0,-(sp)
    ddb2:	|      jsr 6c48 <floatCharacter>
    ddb8:	|      addq.l #8,sp
    ddba:	|      movea.w d0,a0
    ddbc:	|      moveq #28,d0
    ddbe:	|      add.l 16(sp),d0
    ddc2:	|      move.l a0,-(sp)
    ddc4:	|      pea 1 <_start+0x1>
    ddc8:	|      move.l d0,-(sp)
    ddca:	|      jsr 11774 <setVariable>
    ddd0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ddd4:	|      moveq #2,d0
}
    ddd6:	\----> addq.l #8,sp
    ddd8:	       rts

0000ddda <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    ddda:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dddc:	       movea.l 16(sp),a0
    dde0:	       move.l 24(a0),d0
    dde4:	       move.l d0,-(sp)
    dde6:	       pea 1 <_start+0x1>
    ddea:	       move.l sp,d0
    ddec:	       addq.l #8,d0
    ddee:	       move.l d0,-(sp)
    ddf0:	       jsr 10e82 <getValueType>
    ddf6:	       lea 12(sp),sp
    ddfa:	       tst.w d0
    ddfc:	   /-- bne.s de02 <builtIn_setCharacterWalkSpeed+0x28>
    ddfe:	   |   moveq #1,d0
    de00:	/--|-- bra.s de76 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    de02:	|  \-> moveq #24,d0
    de04:	|      add.l 16(sp),d0
    de08:	|      move.l d0,-(sp)
    de0a:	|      jsr 11806 <trimStack>
    de10:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de12:	|      movea.l 16(sp),a0
    de16:	|      move.l 24(a0),d0
    de1a:	|      move.l d0,-(sp)
    de1c:	|      pea 7 <_start+0x7>
    de20:	|      moveq #12,d0
    de22:	|      add.l sp,d0
    de24:	|      move.l d0,-(sp)
    de26:	|      jsr 10e82 <getValueType>
    de2c:	|      lea 12(sp),sp
    de30:	|      tst.w d0
    de32:	|  /-- bne.s de38 <builtIn_setCharacterWalkSpeed+0x5e>
    de34:	|  |   moveq #1,d0
    de36:	+--|-- bra.s de76 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    de38:	|  \-> moveq #24,d0
    de3a:	|      add.l 16(sp),d0
    de3e:	|      move.l d0,-(sp)
    de40:	|      jsr 11806 <trimStack>
    de46:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    de48:	|      move.l 4(sp),d1
    de4c:	|      move.l (sp),d0
    de4e:	|      move.l d1,-(sp)
    de50:	|      move.l d0,-(sp)
    de52:	|      jsr 808e <setCharacterWalkSpeed>
    de58:	|      addq.l #8,sp
    de5a:	|      movea.w d0,a0
    de5c:	|      moveq #28,d0
    de5e:	|      add.l 16(sp),d0
    de62:	|      move.l a0,-(sp)
    de64:	|      pea 1 <_start+0x1>
    de68:	|      move.l d0,-(sp)
    de6a:	|      jsr 11774 <setVariable>
    de70:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de74:	|      moveq #2,d0
}
    de76:	\----> addq.l #8,sp
    de78:	       rts

0000de7a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    de7a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de7c:	       movea.l 16(sp),a0
    de80:	       move.l 24(a0),d0
    de84:	       move.l d0,-(sp)
    de86:	       pea 1 <_start+0x1>
    de8a:	       move.l sp,d0
    de8c:	       addq.l #8,d0
    de8e:	       move.l d0,-(sp)
    de90:	       jsr 10e82 <getValueType>
    de96:	       lea 12(sp),sp
    de9a:	       tst.w d0
    de9c:	   /-- bne.s dea2 <builtIn_turnCharacter+0x28>
    de9e:	   |   moveq #1,d0
    dea0:	/--|-- bra.s df16 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    dea2:	|  \-> moveq #24,d0
    dea4:	|      add.l 16(sp),d0
    dea8:	|      move.l d0,-(sp)
    deaa:	|      jsr 11806 <trimStack>
    deb0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    deb2:	|      movea.l 16(sp),a0
    deb6:	|      move.l 24(a0),d0
    deba:	|      move.l d0,-(sp)
    debc:	|      pea 7 <_start+0x7>
    dec0:	|      moveq #12,d0
    dec2:	|      add.l sp,d0
    dec4:	|      move.l d0,-(sp)
    dec6:	|      jsr 10e82 <getValueType>
    decc:	|      lea 12(sp),sp
    ded0:	|      tst.w d0
    ded2:	|  /-- bne.s ded8 <builtIn_turnCharacter+0x5e>
    ded4:	|  |   moveq #1,d0
    ded6:	+--|-- bra.s df16 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ded8:	|  \-> moveq #24,d0
    deda:	|      add.l 16(sp),d0
    dede:	|      move.l d0,-(sp)
    dee0:	|      jsr 11806 <trimStack>
    dee6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    dee8:	|      move.l (sp),d1
    deea:	|      move.l 4(sp),d0
    deee:	|      move.l d1,-(sp)
    def0:	|      move.l d0,-(sp)
    def2:	|      jsr 8332 <turnPersonToFace>
    def8:	|      addq.l #8,sp
    defa:	|      movea.w d0,a0
    defc:	|      moveq #28,d0
    defe:	|      add.l 16(sp),d0
    df02:	|      move.l a0,-(sp)
    df04:	|      pea 1 <_start+0x1>
    df08:	|      move.l d0,-(sp)
    df0a:	|      jsr 11774 <setVariable>
    df10:	|      lea 12(sp),sp
	return BR_CONTINUE;
    df14:	|      moveq #2,d0
}
    df16:	\----> addq.l #8,sp
    df18:	       rts

0000df1a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    df1a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df1c:	       movea.l 16(sp),a0
    df20:	       move.l 24(a0),d0
    df24:	       move.l d0,-(sp)
    df26:	       pea 1 <_start+0x1>
    df2a:	       move.l sp,d0
    df2c:	       addq.l #8,d0
    df2e:	       move.l d0,-(sp)
    df30:	       jsr 10e82 <getValueType>
    df36:	       lea 12(sp),sp
    df3a:	       tst.w d0
    df3c:	   /-- bne.s df42 <builtIn_setCharacterExtra+0x28>
    df3e:	   |   moveq #1,d0
    df40:	/--|-- bra.s dfb6 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    df42:	|  \-> moveq #24,d0
    df44:	|      add.l 16(sp),d0
    df48:	|      move.l d0,-(sp)
    df4a:	|      jsr 11806 <trimStack>
    df50:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df52:	|      movea.l 16(sp),a0
    df56:	|      move.l 24(a0),d0
    df5a:	|      move.l d0,-(sp)
    df5c:	|      pea 7 <_start+0x7>
    df60:	|      moveq #12,d0
    df62:	|      add.l sp,d0
    df64:	|      move.l d0,-(sp)
    df66:	|      jsr 10e82 <getValueType>
    df6c:	|      lea 12(sp),sp
    df70:	|      tst.w d0
    df72:	|  /-- bne.s df78 <builtIn_setCharacterExtra+0x5e>
    df74:	|  |   moveq #1,d0
    df76:	+--|-- bra.s dfb6 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    df78:	|  \-> moveq #24,d0
    df7a:	|      add.l 16(sp),d0
    df7e:	|      move.l d0,-(sp)
    df80:	|      jsr 11806 <trimStack>
    df86:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    df88:	|      move.l (sp),d1
    df8a:	|      move.l 4(sp),d0
    df8e:	|      move.l d1,-(sp)
    df90:	|      move.l d0,-(sp)
    df92:	|      jsr 80bc <setPersonExtra>
    df98:	|      addq.l #8,sp
    df9a:	|      movea.w d0,a0
    df9c:	|      moveq #28,d0
    df9e:	|      add.l 16(sp),d0
    dfa2:	|      move.l a0,-(sp)
    dfa4:	|      pea 1 <_start+0x1>
    dfa8:	|      move.l d0,-(sp)
    dfaa:	|      jsr 11774 <setVariable>
    dfb0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dfb4:	|      moveq #2,d0
}
    dfb6:	\----> addq.l #8,sp
    dfb8:	       rts

0000dfba <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    dfba:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dfbc:	       movea.l 12(sp),a0
    dfc0:	       move.l 24(a0),d0
    dfc4:	       move.l d0,-(sp)
    dfc6:	       pea 7 <_start+0x7>
    dfca:	       move.l sp,d0
    dfcc:	       addq.l #8,d0
    dfce:	       move.l d0,-(sp)
    dfd0:	       jsr 10e82 <getValueType>
    dfd6:	       lea 12(sp),sp
    dfda:	       tst.w d0
    dfdc:	   /-- bne.s dfe2 <builtIn_removeCharacter+0x28>
    dfde:	   |   moveq #1,d0
    dfe0:	/--|-- bra.s e000 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    dfe2:	|  \-> moveq #24,d0
    dfe4:	|      add.l 12(sp),d0
    dfe8:	|      move.l d0,-(sp)
    dfea:	|      jsr 11806 <trimStack>
    dff0:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    dff2:	|      move.l (sp),d0
    dff4:	|      move.l d0,-(sp)
    dff6:	|      jsr 73e0 <removeOneCharacter>
    dffc:	|      addq.l #4,sp
	return BR_CONTINUE;
    dffe:	|      moveq #2,d0
}
    e000:	\----> addq.l #4,sp
    e002:	       rts

0000e004 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    e004:	                lea -28(sp),sp
    e008:	                move.l d2,-(sp)
    e00a:	                move.l 44(sp),d1
    e00e:	                move.l 48(sp),d0
    e012:	                move.w d1,d1
    e014:	                move.w d1,6(sp)
    e018:	                move.w d0,d0
    e01a:	                move.w d0,4(sp)
	switch (numParams) {
    e01e:	                moveq #2,d0
    e020:	                cmp.l 36(sp),d0
    e024:	      /-------- beq.w e166 <moveChr+0x162>
    e028:	      |         moveq #3,d0
    e02a:	      |         cmp.l 36(sp),d0
    e02e:	/-----|-------- bne.w e29a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e032:	|     |         movea.l 40(sp),a0
    e036:	|     |         move.l 24(a0),d0
    e03a:	|     |         move.l d0,-(sp)
    e03c:	|     |         pea 1 <_start+0x1>
    e040:	|     |         lea 20(sp),a0
    e044:	|     |         move.l a0,-(sp)
    e046:	|     |         jsr 10e82 <getValueType>
    e04c:	|     |         lea 12(sp),sp
    e050:	|     |         tst.w d0
    e052:	|     |     /-- bne.s e05a <moveChr+0x56>
    e054:	|     |     |   moveq #1,d0
    e056:	|  /--|-----|-- bra.w e2aa <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e05a:	|  |  |     \-> moveq #24,d0
    e05c:	|  |  |         add.l 40(sp),d0
    e060:	|  |  |         move.l d0,-(sp)
    e062:	|  |  |         jsr 11806 <trimStack>
    e068:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e06a:	|  |  |         movea.l 40(sp),a0
    e06e:	|  |  |         move.l 24(a0),d0
    e072:	|  |  |         move.l d0,-(sp)
    e074:	|  |  |         pea 1 <_start+0x1>
    e078:	|  |  |         lea 24(sp),a0
    e07c:	|  |  |         move.l a0,-(sp)
    e07e:	|  |  |         jsr 10e82 <getValueType>
    e084:	|  |  |         lea 12(sp),sp
    e088:	|  |  |         tst.w d0
    e08a:	|  |  |     /-- bne.s e092 <moveChr+0x8e>
    e08c:	|  |  |     |   moveq #1,d0
    e08e:	|  +--|-----|-- bra.w e2aa <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e092:	|  |  |     \-> moveq #24,d0
    e094:	|  |  |         add.l 40(sp),d0
    e098:	|  |  |         move.l d0,-(sp)
    e09a:	|  |  |         jsr 11806 <trimStack>
    e0a0:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0a2:	|  |  |         movea.l 40(sp),a0
    e0a6:	|  |  |         move.l 24(a0),d0
    e0aa:	|  |  |         move.l d0,-(sp)
    e0ac:	|  |  |         pea 7 <_start+0x7>
    e0b0:	|  |  |         lea 16(sp),a0
    e0b4:	|  |  |         move.l a0,-(sp)
    e0b6:	|  |  |         jsr 10e82 <getValueType>
    e0bc:	|  |  |         lea 12(sp),sp
    e0c0:	|  |  |         tst.w d0
    e0c2:	|  |  |     /-- bne.s e0ca <moveChr+0xc6>
    e0c4:	|  |  |     |   moveq #1,d0
    e0c6:	|  +--|-----|-- bra.w e2aa <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e0ca:	|  |  |     \-> moveq #24,d0
    e0cc:	|  |  |         add.l 40(sp),d0
    e0d0:	|  |  |         move.l d0,-(sp)
    e0d2:	|  |  |         jsr 11806 <trimStack>
    e0d8:	|  |  |         addq.l #4,sp

			if (force) {
    e0da:	|  |  |         tst.w 6(sp)
    e0de:	|  |  |     /-- beq.s e10e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e0e0:	|  |  |     |   movea.l 8(sp),a0
    e0e4:	|  |  |     |   move.l 12(sp),d1
    e0e8:	|  |  |     |   move.l 16(sp),d0
    e0ec:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
    e0f0:	|  |  |     |   move.l 44(sp),-(sp)
    e0f4:	|  |  |     |   move.l a0,-(sp)
    e0f6:	|  |  |     |   move.l d1,-(sp)
    e0f8:	|  |  |     |   move.l d0,-(sp)
    e0fa:	|  |  |     |   jsr 6c6c <forceWalkingPerson>
    e100:	|  |  |     |   lea 20(sp),sp
    e104:	|  |  |     |   tst.w d0
    e106:	|  |  |  /--|-- beq.s e160 <moveChr+0x15c>
    e108:	|  |  |  |  |   moveq #3,d0
    e10a:	|  +--|--|--|-- bra.w e2aa <moveChr+0x2a6>
			} else if (immediate) {
    e10e:	|  |  |  |  \-> tst.w 4(sp)
    e112:	|  |  |  |  /-- beq.s e132 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    e114:	|  |  |  |  |   movea.l 8(sp),a0
    e118:	|  |  |  |  |   move.l 12(sp),d1
    e11c:	|  |  |  |  |   move.l 16(sp),d0
    e120:	|  |  |  |  |   move.l a0,-(sp)
    e122:	|  |  |  |  |   move.l d1,-(sp)
    e124:	|  |  |  |  |   move.l d0,-(sp)
    e126:	|  |  |  |  |   jsr 6f74 <jumpPerson>
    e12c:	|  |  |  |  |   lea 12(sp),sp
    e130:	|  |  |  +--|-- bra.s e160 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e132:	|  |  |  |  \-> movea.l 8(sp),a0
    e136:	|  |  |  |      move.l 12(sp),d1
    e13a:	|  |  |  |      move.l 16(sp),d0
    e13e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
    e142:	|  |  |  |      move.l 44(sp),-(sp)
    e146:	|  |  |  |      move.l a0,-(sp)
    e148:	|  |  |  |      move.l d1,-(sp)
    e14a:	|  |  |  |      move.l d0,-(sp)
    e14c:	|  |  |  |      jsr 7144 <makeWalkingPerson>
    e152:	|  |  |  |      lea 20(sp),sp
    e156:	|  |  |  |      tst.w d0
    e158:	|  |  |  +----- beq.s e160 <moveChr+0x15c>
    e15a:	|  |  |  |      moveq #3,d0
    e15c:	|  +--|--|----- bra.w e2aa <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e160:	|  |  |  \----> moveq #2,d0
    e162:	|  +--|-------- bra.w e2aa <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e166:	|  |  \-------> movea.l 40(sp),a0
    e16a:	|  |            move.l 24(a0),d0
    e16e:	|  |            move.l d0,-(sp)
    e170:	|  |            pea 7 <_start+0x7>
    e174:	|  |            moveq #32,d0
    e176:	|  |            add.l sp,d0
    e178:	|  |            move.l d0,-(sp)
    e17a:	|  |            jsr 10e82 <getValueType>
    e180:	|  |            lea 12(sp),sp
    e184:	|  |            tst.w d0
    e186:	|  |        /-- bne.s e18e <moveChr+0x18a>
    e188:	|  |        |   moveq #1,d0
    e18a:	|  +--------|-- bra.w e2aa <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e18e:	|  |        \-> moveq #24,d0
    e190:	|  |            add.l 40(sp),d0
    e194:	|  |            move.l d0,-(sp)
    e196:	|  |            jsr 11806 <trimStack>
    e19c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e19e:	|  |            movea.l 40(sp),a0
    e1a2:	|  |            move.l 24(a0),d0
    e1a6:	|  |            move.l d0,-(sp)
    e1a8:	|  |            pea 7 <_start+0x7>
    e1ac:	|  |            lea 28(sp),a0
    e1b0:	|  |            move.l a0,-(sp)
    e1b2:	|  |            jsr 10e82 <getValueType>
    e1b8:	|  |            lea 12(sp),sp
    e1bc:	|  |            tst.w d0
    e1be:	|  |        /-- bne.s e1c6 <moveChr+0x1c2>
    e1c0:	|  |        |   moveq #1,d0
    e1c2:	|  +--------|-- bra.w e2aa <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e1c6:	|  |        \-> moveq #24,d0
    e1c8:	|  |            add.l 40(sp),d0
    e1cc:	|  |            move.l d0,-(sp)
    e1ce:	|  |            jsr 11806 <trimStack>
    e1d4:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    e1d6:	|  |            move.l 24(sp),d0
    e1da:	|  |            move.l d0,-(sp)
    e1dc:	|  |            jsr 1194c <getRegionForObject>
    e1e2:	|  |            addq.l #4,sp
    e1e4:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    e1e8:	|  |        /-- bne.s e1f0 <moveChr+0x1ec>
    e1ea:	|  |        |   moveq #2,d0
    e1ec:	|  +--------|-- bra.w e2aa <moveChr+0x2a6>

			if (force)
    e1f0:	|  |        \-> tst.w 6(sp)
    e1f4:	|  |        /-- beq.s e230 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e1f6:	|  |        |   movea.l 28(sp),a0
    e1fa:	|  |        |   move.l 24(a0),d2
    e1fe:	|  |        |   movea.l 20(sp),a1
    e202:	|  |        |   movea.l 28(sp),a0
    e206:	|  |        |   move.l 20(a0),d1
    e20a:	|  |        |   movea.l 28(sp),a0
    e20e:	|  |        |   move.l 16(a0),d0
    e212:	|  |        |   move.l d2,-(sp)
    e214:	|  |        |   move.l 44(sp),-(sp)
    e218:	|  |        |   move.l a1,-(sp)
    e21a:	|  |        |   move.l d1,-(sp)
    e21c:	|  |        |   move.l d0,-(sp)
    e21e:	|  |        |   jsr 6c6c <forceWalkingPerson>
    e224:	|  |        |   lea 20(sp),sp
    e228:	|  |        |   tst.w d0
    e22a:	|  |     /--|-- beq.s e296 <moveChr+0x292>
    e22c:	|  |     |  |   moveq #3,d0
    e22e:	|  +-----|--|-- bra.s e2aa <moveChr+0x2a6>
			}
			else if (immediate)
    e230:	|  |     |  \-> tst.w 4(sp)
    e234:	|  |     |  /-- beq.s e25c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    e236:	|  |     |  |   movea.l 20(sp),a1
    e23a:	|  |     |  |   movea.l 28(sp),a0
    e23e:	|  |     |  |   move.l 20(a0),d1
    e242:	|  |     |  |   movea.l 28(sp),a0
    e246:	|  |     |  |   move.l 16(a0),d0
    e24a:	|  |     |  |   move.l a1,-(sp)
    e24c:	|  |     |  |   move.l d1,-(sp)
    e24e:	|  |     |  |   move.l d0,-(sp)
    e250:	|  |     |  |   jsr 6f74 <jumpPerson>
    e256:	|  |     |  |   lea 12(sp),sp
    e25a:	|  |     +--|-- bra.s e296 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e25c:	|  |     |  \-> movea.l 28(sp),a0
    e260:	|  |     |      move.l 24(a0),d2
    e264:	|  |     |      movea.l 20(sp),a1
    e268:	|  |     |      movea.l 28(sp),a0
    e26c:	|  |     |      move.l 20(a0),d1
    e270:	|  |     |      movea.l 28(sp),a0
    e274:	|  |     |      move.l 16(a0),d0
    e278:	|  |     |      move.l d2,-(sp)
    e27a:	|  |     |      move.l 44(sp),-(sp)
    e27e:	|  |     |      move.l a1,-(sp)
    e280:	|  |     |      move.l d1,-(sp)
    e282:	|  |     |      move.l d0,-(sp)
    e284:	|  |     |      jsr 7144 <makeWalkingPerson>
    e28a:	|  |     |      lea 20(sp),sp
    e28e:	|  |     |      tst.w d0
    e290:	|  |     +----- beq.s e296 <moveChr+0x292>
    e292:	|  |     |      moveq #3,d0
    e294:	|  +-----|----- bra.s e2aa <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e296:	|  |     \----> moveq #2,d0
    e298:	|  +----------- bra.s e2aa <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    e29a:	\--|----------> pea 16a8d <main_sludge.c.828d7d86+0x2cd>
    e2a0:	   |            jsr 12ed6 <KPrintF>
    e2a6:	   |            addq.l #4,sp
			return BR_ERROR;
    e2a8:	   |            moveq #1,d0
	}
}
    e2aa:	   \----------> move.l (sp)+,d2
    e2ac:	                lea 28(sp),sp
    e2b0:	                rts

0000e2b2 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    e2b2:	clr.l -(sp)
    e2b4:	clr.l -(sp)
    e2b6:	move.l 16(sp),-(sp)
    e2ba:	move.l 16(sp),-(sp)
    e2be:	jsr e004 <moveChr>
    e2c4:	lea 16(sp),sp
}
    e2c8:	rts

0000e2ca <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    e2ca:	clr.l -(sp)
    e2cc:	pea 1 <_start+0x1>
    e2d0:	move.l 16(sp),-(sp)
    e2d4:	move.l 16(sp),-(sp)
    e2d8:	jsr e004 <moveChr>
    e2de:	lea 16(sp),sp
}
    e2e2:	rts

0000e2e4 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    e2e4:	pea 1 <_start+0x1>
    e2e8:	clr.l -(sp)
    e2ea:	move.l 16(sp),-(sp)
    e2ee:	move.l 16(sp),-(sp)
    e2f2:	jsr e004 <moveChr>
    e2f8:	lea 16(sp),sp
}
    e2fc:	rts

0000e2fe <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    e2fe:	jsr 4ff2 <clearStatusBar>
	return BR_CONTINUE;
    e304:	moveq #2,d0
}
    e306:	rts

0000e308 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    e308:	jsr 509a <killLastStatus>
	return BR_CONTINUE;
    e30e:	moveq #2,d0
}
    e310:	rts

0000e312 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    e312:	jsr 4f88 <addStatusBar>
	return BR_CONTINUE;
    e318:	moveq #2,d0
}
    e31a:	rts

0000e31c <builtIn_statusText>:

builtIn(statusText)
{
    e31c:	       subq.l #8,sp
    e31e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e320:	       movea.l 20(sp),a0
    e324:	       move.l 24(a0),d0
    e328:	       move.l d0,-(sp)
    e32a:	       jsr 11458 <getTextFromAnyVar>
    e330:	       addq.l #4,sp
    e332:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    e336:	   /-- bne.s e33c <builtIn_statusText+0x20>
    e338:	   |   moveq #1,d0
    e33a:	/--|-- bra.s e370 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    e33c:	|  \-> moveq #24,d0
    e33e:	|      add.l 20(sp),d0
    e342:	|      move.l d0,-(sp)
    e344:	|      jsr 11806 <trimStack>
    e34a:	|      addq.l #4,sp
	setStatusBar(newText);
    e34c:	|      move.l 8(sp),-(sp)
    e350:	|      jsr 531a <setStatusBar>
    e356:	|      addq.l #4,sp
	FreeVec(newText);
    e358:	|      move.l 8(sp),4(sp)
    e35e:	|      move.l 19c50 <SysBase>,d0
    e364:	|      movea.l d0,a6
    e366:	|      movea.l 4(sp),a1
    e36a:	|      jsr -690(a6)
	return BR_CONTINUE;
    e36e:	|      moveq #2,d0
}
    e370:	\----> movea.l (sp)+,a6
    e372:	       addq.l #8,sp
    e374:	       rts

0000e376 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    e376:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e378:	       movea.l 12(sp),a0
    e37c:	       move.l 24(a0),d0
    e380:	       move.l d0,-(sp)
    e382:	       pea 1 <_start+0x1>
    e386:	       move.l sp,d0
    e388:	       addq.l #8,d0
    e38a:	       move.l d0,-(sp)
    e38c:	       jsr 10e82 <getValueType>
    e392:	       lea 12(sp),sp
    e396:	       tst.w d0
    e398:	   /-- bne.s e39e <builtIn_lightStatus+0x28>
    e39a:	   |   moveq #1,d0
    e39c:	/--|-- bra.s e3bc <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    e39e:	|  \-> moveq #24,d0
    e3a0:	|      add.l 12(sp),d0
    e3a4:	|      move.l d0,-(sp)
    e3a6:	|      jsr 11806 <trimStack>
    e3ac:	|      addq.l #4,sp
	setLitStatus (val);
    e3ae:	|      move.l (sp),d0
    e3b0:	|      move.l d0,-(sp)
    e3b2:	|      jsr 530a <setLitStatus>
    e3b8:	|      addq.l #4,sp
	return BR_CONTINUE;
    e3ba:	|      moveq #2,d0
}
    e3bc:	\----> addq.l #4,sp
    e3be:	       rts

0000e3c0 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    e3c0:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3c2:	       movea.l 16(sp),a0
    e3c6:	       move.l 24(a0),d0
    e3ca:	       move.l d0,-(sp)
    e3cc:	       pea 1 <_start+0x1>
    e3d0:	       move.l sp,d0
    e3d2:	       addq.l #8,d0
    e3d4:	       move.l d0,-(sp)
    e3d6:	       jsr 10e82 <getValueType>
    e3dc:	       lea 12(sp),sp
    e3e0:	       tst.w d0
    e3e2:	   /-- bne.s e3e8 <builtIn_positionStatus+0x28>
    e3e4:	   |   moveq #1,d0
    e3e6:	/--|-- bra.s e442 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e3e8:	|  \-> moveq #24,d0
    e3ea:	|      add.l 16(sp),d0
    e3ee:	|      move.l d0,-(sp)
    e3f0:	|      jsr 11806 <trimStack>
    e3f6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3f8:	|      movea.l 16(sp),a0
    e3fc:	|      move.l 24(a0),d0
    e400:	|      move.l d0,-(sp)
    e402:	|      pea 1 <_start+0x1>
    e406:	|      moveq #12,d0
    e408:	|      add.l sp,d0
    e40a:	|      move.l d0,-(sp)
    e40c:	|      jsr 10e82 <getValueType>
    e412:	|      lea 12(sp),sp
    e416:	|      tst.w d0
    e418:	|  /-- bne.s e41e <builtIn_positionStatus+0x5e>
    e41a:	|  |   moveq #1,d0
    e41c:	+--|-- bra.s e442 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e41e:	|  \-> moveq #24,d0
    e420:	|      add.l 16(sp),d0
    e424:	|      move.l d0,-(sp)
    e426:	|      jsr 11806 <trimStack>
    e42c:	|      addq.l #4,sp
	positionStatus (x, y);
    e42e:	|      move.l (sp),d1
    e430:	|      move.l 4(sp),d0
    e434:	|      move.l d1,-(sp)
    e436:	|      move.l d0,-(sp)
    e438:	|      jsr 50fc <positionStatus>
    e43e:	|      addq.l #8,sp
	return BR_CONTINUE;
    e440:	|      moveq #2,d0
}
    e442:	\----> addq.l #8,sp
    e444:	       rts

0000e446 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    e446:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e448:	       movea.l 12(sp),a0
    e44c:	       move.l 24(a0),d0
    e450:	       move.l d0,-(sp)
    e452:	       pea 1 <_start+0x1>
    e456:	       move.l sp,d0
    e458:	       addq.l #8,d0
    e45a:	       move.l d0,-(sp)
    e45c:	       jsr 10e82 <getValueType>
    e462:	       lea 12(sp),sp
    e466:	       tst.w d0
    e468:	   /-- bne.s e46e <builtIn_alignStatus+0x28>
    e46a:	   |   moveq #1,d0
    e46c:	/--|-- bra.s e48e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    e46e:	|  \-> moveq #24,d0
    e470:	|      add.l 12(sp),d0
    e474:	|      move.l d0,-(sp)
    e476:	|      jsr 11806 <trimStack>
    e47c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    e47e:	|      move.l (sp),d0
    e480:	|      movea.l 18132 <nowStatus>,a0
    e486:	|      move.l d0,d0
    e488:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    e48c:	|      moveq #2,d0
}
    e48e:	\----> addq.l #4,sp
    e490:	       rts

0000e492 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    e492:	             tst.l 4(sp)
    e496:	      /----- beq.s e4a2 <getFuncNumForCallback+0x10>
    e498:	      |      moveq #1,d0
    e49a:	      |      cmp.l 4(sp),d0
    e49e:	      |  /-- beq.s e4a8 <getFuncNumForCallback+0x16>
    e4a0:	   /--|--|-- bra.s e4de <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    e4a2:	   |  \--|-> clr.l 12(sp)
			break;
    e4a6:	/--|-----|-- bra.s e4f0 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    e4a8:	|  |     \-> movea.l 8(sp),a0
    e4ac:	|  |         move.l 24(a0),d0
    e4b0:	|  |         move.l d0,-(sp)
    e4b2:	|  |         pea 2 <_start+0x2>
    e4b6:	|  |         move.l 20(sp),-(sp)
    e4ba:	|  |         jsr 10e82 <getValueType>
    e4c0:	|  |         lea 12(sp),sp
    e4c4:	|  |         tst.w d0
    e4c6:	|  |     /-- bne.s e4cc <getFuncNumForCallback+0x3a>
    e4c8:	|  |     |   clr.w d0
    e4ca:	|  |  /--|-- bra.s e4f2 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    e4cc:	|  |  |  \-> moveq #24,d0
    e4ce:	|  |  |      add.l 8(sp),d0
    e4d2:	|  |  |      move.l d0,-(sp)
    e4d4:	|  |  |      jsr 11806 <trimStack>
    e4da:	|  |  |      addq.l #4,sp
			break;
    e4dc:	+--|--|----- bra.s e4f0 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    e4de:	|  \--|----> pea 16ac3 <main_sludge.c.828d7d86+0x303>
    e4e4:	|     |      jsr 12ed6 <KPrintF>
    e4ea:	|     |      addq.l #4,sp
			return FALSE;
    e4ec:	|     |      clr.w d0
    e4ee:	|     +----- bra.s e4f2 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    e4f0:	\-----|----> moveq #1,d0
}
    e4f2:	      \----> rts

0000e4f4 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    e4f4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e4f6:	       move.l sp,d0
    e4f8:	       move.l d0,-(sp)
    e4fa:	       move.l 16(sp),-(sp)
    e4fe:	       move.l 16(sp),-(sp)
    e502:	       jsr e492 <getFuncNumForCallback>
    e508:	       lea 12(sp),sp
    e50c:	       tst.w d0
    e50e:	/----- beq.s e51e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    e510:	|      movea.l 1811c <currentEvents>,a0
    e516:	|      move.l (sp),d0
    e518:	|      move.l d0,(a0)
		return BR_CONTINUE;
    e51a:	|      moveq #2,d0
    e51c:	|  /-- bra.s e520 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    e51e:	\--|-> moveq #1,d0
}
    e520:	   \-> addq.l #4,sp
    e522:	       rts

0000e524 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    e524:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e526:	       move.l sp,d0
    e528:	       move.l d0,-(sp)
    e52a:	       move.l 16(sp),-(sp)
    e52e:	       move.l 16(sp),-(sp)
    e532:	       jsr e492 <getFuncNumForCallback>
    e538:	       lea 12(sp),sp
    e53c:	       tst.w d0
    e53e:	/----- beq.s e550 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    e540:	|      movea.l 1811c <currentEvents>,a0
    e546:	|      move.l (sp),d0
    e548:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    e54c:	|      moveq #2,d0
    e54e:	|  /-- bra.s e552 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    e550:	\--|-> moveq #1,d0
}
    e552:	   \-> addq.l #4,sp
    e554:	       rts

0000e556 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    e556:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e558:	       move.l sp,d0
    e55a:	       move.l d0,-(sp)
    e55c:	       move.l 16(sp),-(sp)
    e560:	       move.l 16(sp),-(sp)
    e564:	       jsr e492 <getFuncNumForCallback>
    e56a:	       lea 12(sp),sp
    e56e:	       tst.w d0
    e570:	/----- beq.s e582 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    e572:	|      movea.l 1811c <currentEvents>,a0
    e578:	|      move.l (sp),d0
    e57a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    e57e:	|      moveq #2,d0
    e580:	|  /-- bra.s e584 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    e582:	\--|-> moveq #1,d0
}
    e584:	   \-> addq.l #4,sp
    e586:	       rts

0000e588 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    e588:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e58a:	       move.l sp,d0
    e58c:	       move.l d0,-(sp)
    e58e:	       move.l 16(sp),-(sp)
    e592:	       move.l 16(sp),-(sp)
    e596:	       jsr e492 <getFuncNumForCallback>
    e59c:	       lea 12(sp),sp
    e5a0:	       tst.w d0
    e5a2:	/----- beq.s e5b4 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    e5a4:	|      movea.l 1811c <currentEvents>,a0
    e5aa:	|      move.l (sp),d0
    e5ac:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    e5b0:	|      moveq #2,d0
    e5b2:	|  /-- bra.s e5b6 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    e5b4:	\--|-> moveq #1,d0
}
    e5b6:	   \-> addq.l #4,sp
    e5b8:	       rts

0000e5ba <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    e5ba:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e5bc:	       move.l sp,d0
    e5be:	       move.l d0,-(sp)
    e5c0:	       move.l 16(sp),-(sp)
    e5c4:	       move.l 16(sp),-(sp)
    e5c8:	       jsr e492 <getFuncNumForCallback>
    e5ce:	       lea 12(sp),sp
    e5d2:	       tst.w d0
    e5d4:	/----- beq.s e5e6 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    e5d6:	|      movea.l 1811c <currentEvents>,a0
    e5dc:	|      move.l (sp),d0
    e5de:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    e5e2:	|      moveq #2,d0
    e5e4:	|  /-- bra.s e5e8 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    e5e6:	\--|-> moveq #1,d0
}
    e5e8:	   \-> addq.l #4,sp
    e5ea:	       rts

0000e5ec <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    e5ec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e5ee:	       move.l sp,d0
    e5f0:	       move.l d0,-(sp)
    e5f2:	       move.l 16(sp),-(sp)
    e5f6:	       move.l 16(sp),-(sp)
    e5fa:	       jsr e492 <getFuncNumForCallback>
    e600:	       lea 12(sp),sp
    e604:	       tst.w d0
    e606:	/----- beq.s e618 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    e608:	|      movea.l 1811c <currentEvents>,a0
    e60e:	|      move.l (sp),d0
    e610:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    e614:	|      moveq #2,d0
    e616:	|  /-- bra.s e61a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    e618:	\--|-> moveq #1,d0
}
    e61a:	   \-> addq.l #4,sp
    e61c:	       rts

0000e61e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    e61e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e620:	       move.l sp,d0
    e622:	       move.l d0,-(sp)
    e624:	       move.l 16(sp),-(sp)
    e628:	       move.l 16(sp),-(sp)
    e62c:	       jsr e492 <getFuncNumForCallback>
    e632:	       lea 12(sp),sp
    e636:	       tst.w d0
    e638:	/----- beq.s e64a <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    e63a:	|      movea.l 1811c <currentEvents>,a0
    e640:	|      move.l (sp),d0
    e642:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    e646:	|      moveq #2,d0
    e648:	|  /-- bra.s e64c <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    e64a:	\--|-> moveq #1,d0
}
    e64c:	   \-> addq.l #4,sp
    e64e:	       rts

0000e650 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    e650:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e652:	          move.l sp,d0
    e654:	          move.l d0,-(sp)
    e656:	          move.l 16(sp),-(sp)
    e65a:	          move.l 16(sp),-(sp)
    e65e:	          jsr e492 <getFuncNumForCallback>
    e664:	          lea 12(sp),sp
    e668:	          tst.w d0
    e66a:	/-------- beq.s e696 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    e66c:	|         move.l 19c20 <noStack>,d1
    e672:	|         move.l (sp),d0
    e674:	|         pea 1 <_start+0x1>
    e678:	|         move.l d1,-(sp)
    e67a:	|         clr.l -(sp)
    e67c:	|         clr.l -(sp)
    e67e:	|         move.l d0,-(sp)
    e680:	|         jsr 422c <startNewFunctionNum>
    e686:	|         lea 20(sp),sp
    e68a:	|         tst.l d0
    e68c:	|     /-- bne.s e692 <builtIn_spawnSub+0x42>
    e68e:	|     |   moveq #1,d0
    e690:	|  /--|-- bra.s e698 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    e692:	|  |  \-> moveq #2,d0
    e694:	|  +----- bra.s e698 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    e696:	\--|----> moveq #1,d0
}
    e698:	   \----> addq.l #4,sp
    e69a:	          rts

0000e69c <builtIn_cancelSub>:

builtIn (cancelSub)
{
    e69c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e69e:	          move.l sp,d0
    e6a0:	          addq.l #4,d0
    e6a2:	          move.l d0,-(sp)
    e6a4:	          move.l 20(sp),-(sp)
    e6a8:	          move.l 20(sp),-(sp)
    e6ac:	          jsr e492 <getFuncNumForCallback>
    e6b2:	          lea 12(sp),sp
    e6b6:	          tst.w d0
    e6b8:	/-------- beq.s e6ee <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    e6ba:	|         move.l 4(sp),d1
    e6be:	|         move.l sp,d0
    e6c0:	|         addq.l #2,d0
    e6c2:	|         move.l d0,-(sp)
    e6c4:	|         move.l 20(sp),-(sp)
    e6c8:	|         move.l d1,-(sp)
    e6ca:	|         jsr 21f0 <cancelAFunction>
    e6d0:	|         lea 12(sp),sp
		if (killedMyself) {
    e6d4:	|         move.w 2(sp),d0
    e6d8:	|  /----- beq.s e6ea <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    e6da:	|  |      move.l 16(sp),-(sp)
    e6de:	|  |      jsr 210e <abortFunction>
    e6e4:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    e6e6:	|  |      moveq #5,d0
    e6e8:	|  |  /-- bra.s e6f0 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    e6ea:	|  \--|-> moveq #2,d0
    e6ec:	|     +-- bra.s e6f0 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    e6ee:	\-----|-> moveq #1,d0
}
    e6f0:	      \-> addq.l #8,sp
    e6f2:	          rts

0000e6f4 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    e6f4:	       subq.l #8,sp
    e6f6:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    e6f8:	       movea.l 20(sp),a0
    e6fc:	       move.l 24(a0),d0
    e700:	       move.l d0,-(sp)
    e702:	       jsr 11458 <getTextFromAnyVar>
    e708:	       addq.l #4,sp
    e70a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    e70e:	   /-- bne.s e714 <builtIn_stringWidth+0x20>
    e710:	   |   moveq #1,d0
    e712:	/--|-- bra.s e762 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    e714:	|  \-> moveq #24,d0
    e716:	|      add.l 20(sp),d0
    e71a:	|      move.l d0,-(sp)
    e71c:	|      jsr 11806 <trimStack>
    e722:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    e724:	|      move.l 8(sp),-(sp)
    e728:	|      jsr 11860 <stringWidth>
    e72e:	|      addq.l #4,sp
    e730:	|      move.l d0,d1
    e732:	|      moveq #28,d0
    e734:	|      add.l 20(sp),d0
    e738:	|      move.l d1,-(sp)
    e73a:	|      pea 1 <_start+0x1>
    e73e:	|      move.l d0,-(sp)
    e740:	|      jsr 11774 <setVariable>
    e746:	|      lea 12(sp),sp
	FreeVec(theText);
    e74a:	|      move.l 8(sp),4(sp)
    e750:	|      move.l 19c50 <SysBase>,d0
    e756:	|      movea.l d0,a6
    e758:	|      movea.l 4(sp),a1
    e75c:	|      jsr -690(a6)
	return BR_CONTINUE;
    e760:	|      moveq #2,d0
}
    e762:	\----> movea.l (sp)+,a6
    e764:	       addq.l #8,sp
    e766:	       rts

0000e768 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e768:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e76a:	       movea.l 12(sp),a0
    e76e:	       move.l 24(a0),d0
    e772:	       move.l d0,-(sp)
    e774:	       pea 1 <_start+0x1>
    e778:	       move.l sp,d0
    e77a:	       addq.l #8,d0
    e77c:	       move.l d0,-(sp)
    e77e:	       jsr 10e82 <getValueType>
    e784:	       lea 12(sp),sp
    e788:	       tst.w d0
    e78a:	   /-- bne.s e790 <builtIn_hardScroll+0x28>
    e78c:	   |   moveq #1,d0
    e78e:	/--|-- bra.s e7ae <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e790:	|  \-> moveq #24,d0
    e792:	|      add.l 12(sp),d0
    e796:	|      move.l d0,-(sp)
    e798:	|      jsr 11806 <trimStack>
    e79e:	|      addq.l #4,sp
	hardScroll (v);
    e7a0:	|      move.l (sp),d0
    e7a2:	|      move.l d0,-(sp)
    e7a4:	|      jsr 9626 <hardScroll>
    e7aa:	|      addq.l #4,sp
	return BR_CONTINUE;
    e7ac:	|      moveq #2,d0
}
    e7ae:	\----> addq.l #4,sp
    e7b0:	       rts

0000e7b2 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e7b2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7b4:	       movea.l 12(sp),a0
    e7b8:	       move.l 24(a0),d0
    e7bc:	       move.l d0,-(sp)
    e7be:	       pea 7 <_start+0x7>
    e7c2:	       move.l sp,d0
    e7c4:	       addq.l #8,d0
    e7c6:	       move.l d0,-(sp)
    e7c8:	       jsr 10e82 <getValueType>
    e7ce:	       lea 12(sp),sp
    e7d2:	       tst.w d0
    e7d4:	   /-- bne.s e7da <builtIn_isScreenRegion+0x28>
    e7d6:	   |   moveq #1,d0
    e7d8:	/--|-- bra.s e81a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e7da:	|  \-> moveq #24,d0
    e7dc:	|      add.l 12(sp),d0
    e7e0:	|      move.l d0,-(sp)
    e7e2:	|      jsr 11806 <trimStack>
    e7e8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e7ea:	|      move.l (sp),d0
    e7ec:	|      move.l d0,-(sp)
    e7ee:	|      jsr 1194c <getRegionForObject>
    e7f4:	|      addq.l #4,sp
    e7f6:	|      tst.l d0
    e7f8:	|      sne d0
    e7fa:	|      neg.b d0
    e7fc:	|      moveq #0,d1
    e7fe:	|      move.b d0,d1
    e800:	|      moveq #28,d0
    e802:	|      add.l 12(sp),d0
    e806:	|      move.l d1,-(sp)
    e808:	|      pea 1 <_start+0x1>
    e80c:	|      move.l d0,-(sp)
    e80e:	|      jsr 11774 <setVariable>
    e814:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e818:	|      moveq #2,d0
}
    e81a:	\----> addq.l #4,sp
    e81c:	       rts

0000e81e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e81e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e820:	       movea.l 12(sp),a0
    e824:	       move.l 24(a0),d0
    e828:	       move.l d0,-(sp)
    e82a:	       pea 1 <_start+0x1>
    e82e:	       move.l sp,d0
    e830:	       addq.l #8,d0
    e832:	       move.l d0,-(sp)
    e834:	       jsr 10e82 <getValueType>
    e83a:	       lea 12(sp),sp
    e83e:	       tst.w d0
    e840:	   /-- bne.s e846 <builtIn_setSpeechSpeed+0x28>
    e842:	   |   moveq #1,d0
    e844:	/--|-- bra.s e894 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e846:	|  \-> moveq #24,d0
    e848:	|      add.l 12(sp),d0
    e84c:	|      move.l d0,-(sp)
    e84e:	|      jsr 11806 <trimStack>
    e854:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e856:	|      move.l (sp),d0
    e858:	|      move.l d0,-(sp)
    e85a:	|      jsr 1332e <__floatsisf>
    e860:	|      addq.l #4,sp
    e862:	|      move.l #1008981770,-(sp)
    e868:	|      move.l d0,-(sp)
    e86a:	|      jsr 133e0 <__mulsf3>
    e870:	|      addq.l #8,sp
    e872:	|      move.l d0,18136 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e878:	|      moveq #28,d0
    e87a:	|      add.l 12(sp),d0
    e87e:	|      pea 1 <_start+0x1>
    e882:	|      pea 1 <_start+0x1>
    e886:	|      move.l d0,-(sp)
    e888:	|      jsr 11774 <setVariable>
    e88e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e892:	|      moveq #2,d0
}
    e894:	\----> addq.l #4,sp
    e896:	       rts

0000e898 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e898:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e89a:	       movea.l 12(sp),a0
    e89e:	       move.l 24(a0),d0
    e8a2:	       move.l d0,-(sp)
    e8a4:	       pea 1 <_start+0x1>
    e8a8:	       move.l sp,d0
    e8aa:	       addq.l #8,d0
    e8ac:	       move.l d0,-(sp)
    e8ae:	       jsr 10e82 <getValueType>
    e8b4:	       lea 12(sp),sp
    e8b8:	       tst.w d0
    e8ba:	   /-- bne.s e8c0 <builtIn_setFontSpacing+0x28>
    e8bc:	   |   moveq #1,d0
    e8be:	/--|-- bra.s e8f6 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    e8c0:	|  \-> move.l (sp),d0
    e8c2:	|      move.l d0,d0
    e8c4:	|      move.w d0,186b0 <fontSpace>
	trimStack (&fun -> stack);
    e8ca:	|      moveq #24,d0
    e8cc:	|      add.l 12(sp),d0
    e8d0:	|      move.l d0,-(sp)
    e8d2:	|      jsr 11806 <trimStack>
    e8d8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e8da:	|      moveq #28,d0
    e8dc:	|      add.l 12(sp),d0
    e8e0:	|      pea 1 <_start+0x1>
    e8e4:	|      pea 1 <_start+0x1>
    e8e8:	|      move.l d0,-(sp)
    e8ea:	|      jsr 11774 <setVariable>
    e8f0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e8f4:	|      moveq #2,d0
}
    e8f6:	\----> addq.l #4,sp
    e8f8:	       rts

0000e8fa <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    e8fa:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8fc:	          movea.l 12(sp),a0
    e900:	          move.l 24(a0),d0
    e904:	          move.l d0,-(sp)
    e906:	          pea 1 <_start+0x1>
    e90a:	          move.l sp,d0
    e90c:	          addq.l #8,d0
    e90e:	          move.l d0,-(sp)
    e910:	          jsr 10e82 <getValueType>
    e916:	          lea 12(sp),sp
    e91a:	          tst.w d0
    e91c:	      /-- bne.s e922 <builtIn_transitionLevel+0x28>
    e91e:	      |   moveq #1,d0
    e920:	/-----|-- bra.s e976 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    e922:	|     \-> moveq #24,d0
    e924:	|         add.l 12(sp),d0
    e928:	|         move.l d0,-(sp)
    e92a:	|         jsr 11806 <trimStack>
    e930:	|         addq.l #4,sp

	if (number < 0)
    e932:	|         move.l (sp),d0
    e934:	|     /-- bpl.s e93e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    e936:	|     |   clr.b 1811a <brightnessLevel>
    e93c:	|  /--|-- bra.s e95a <builtIn_transitionLevel+0x60>
	else if (number > 255)
    e93e:	|  |  \-> move.l (sp),d0
    e940:	|  |      cmpi.l #255,d0
    e946:	|  |  /-- ble.s e950 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    e948:	|  |  |   st 1811a <brightnessLevel>
    e94e:	|  +--|-- bra.s e95a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    e950:	|  |  \-> move.l (sp),d0
    e952:	|  |      move.l d0,d0
    e954:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    e95a:	|  \----> moveq #28,d0
    e95c:	|         add.l 12(sp),d0
    e960:	|         pea 1 <_start+0x1>
    e964:	|         pea 1 <_start+0x1>
    e968:	|         move.l d0,-(sp)
    e96a:	|         jsr 11774 <setVariable>
    e970:	|         lea 12(sp),sp
	return BR_CONTINUE;
    e974:	|         moveq #2,d0
}
    e976:	\-------> addq.l #4,sp
    e978:	          rts

0000e97a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    e97a:	movea.l 8(sp),a0
    e97e:	move.l 24(a0),d0
    e982:	move.l d0,-(sp)
    e984:	jsr 113c2 <getBoolean>
    e98a:	addq.l #4,sp
    e98c:	move.w d0,19bf4 <captureAllKeys>
	trimStack (&fun -> stack);
    e992:	moveq #24,d0
    e994:	add.l 8(sp),d0
    e998:	move.l d0,-(sp)
    e99a:	jsr 11806 <trimStack>
    e9a0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    e9a2:	move.w 19bf4 <captureAllKeys>,d0
    e9a8:	movea.w d0,a0
    e9aa:	moveq #28,d0
    e9ac:	add.l 8(sp),d0
    e9b0:	move.l a0,-(sp)
    e9b2:	pea 1 <_start+0x1>
    e9b6:	move.l d0,-(sp)
    e9b8:	jsr 11774 <setVariable>
    e9be:	lea 12(sp),sp
	return BR_CONTINUE;
    e9c2:	moveq #2,d0
}
    e9c4:	rts

0000e9c6 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    e9c6:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9ca:	       movea.l 20(sp),a0
    e9ce:	       move.l 24(a0),d0
    e9d2:	       move.l d0,-(sp)
    e9d4:	       pea 1 <_start+0x1>
    e9d8:	       moveq #12,d0
    e9da:	       add.l sp,d0
    e9dc:	       move.l d0,-(sp)
    e9de:	       jsr 10e82 <getValueType>
    e9e4:	       lea 12(sp),sp
    e9e8:	       tst.w d0
    e9ea:	   /-- bne.s e9f2 <builtIn_spinCharacter+0x2c>
    e9ec:	   |   moveq #1,d0
    e9ee:	/--|-- bra.w eaa2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e9f2:	|  \-> moveq #24,d0
    e9f4:	|      add.l 20(sp),d0
    e9f8:	|      move.l d0,-(sp)
    e9fa:	|      jsr 11806 <trimStack>
    ea00:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea02:	|      movea.l 20(sp),a0
    ea06:	|      move.l 24(a0),d0
    ea0a:	|      move.l d0,-(sp)
    ea0c:	|      pea 7 <_start+0x7>
    ea10:	|      lea 8(sp),a0
    ea14:	|      move.l a0,-(sp)
    ea16:	|      jsr 10e82 <getValueType>
    ea1c:	|      lea 12(sp),sp
    ea20:	|      tst.w d0
    ea22:	|  /-- bne.s ea28 <builtIn_spinCharacter+0x62>
    ea24:	|  |   moveq #1,d0
    ea26:	+--|-- bra.s eaa2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    ea28:	|  \-> moveq #24,d0
    ea2a:	|      add.l 20(sp),d0
    ea2e:	|      move.l d0,-(sp)
    ea30:	|      jsr 11806 <trimStack>
    ea36:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ea38:	|      move.l (sp),d0
    ea3a:	|      move.l d0,-(sp)
    ea3c:	|      jsr 6c1a <findPerson>
    ea42:	|      addq.l #4,sp
    ea44:	|      move.l d0,8(sp)
	if (thisPerson) {
    ea48:	|  /-- beq.s ea88 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    ea4a:	|  |   move.l 4(sp),d0
    ea4e:	|  |   movea.l 8(sp),a0
    ea52:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    ea56:	|  |   movea.l 8(sp),a0
    ea5a:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    ea60:	|  |   movea.l 8(sp),a0
    ea64:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ea6a:	|  |   moveq #28,d0
    ea6c:	|  |   add.l 20(sp),d0
    ea70:	|  |   pea 1 <_start+0x1>
    ea74:	|  |   pea 1 <_start+0x1>
    ea78:	|  |   move.l d0,-(sp)
    ea7a:	|  |   jsr 11774 <setVariable>
    ea80:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    ea84:	|  |   moveq #3,d0
    ea86:	+--|-- bra.s eaa2 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ea88:	|  \-> moveq #28,d0
    ea8a:	|      add.l 20(sp),d0
    ea8e:	|      clr.l -(sp)
    ea90:	|      pea 1 <_start+0x1>
    ea94:	|      move.l d0,-(sp)
    ea96:	|      jsr 11774 <setVariable>
    ea9c:	|      lea 12(sp),sp
		return BR_CONTINUE;
    eaa0:	|      moveq #2,d0
	}
}
    eaa2:	\----> lea 12(sp),sp
    eaa6:	       rts

0000eaa8 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    eaa8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eaaa:	          movea.l 16(sp),a0
    eaae:	          move.l 24(a0),d0
    eab2:	          move.l d0,-(sp)
    eab4:	          pea 7 <_start+0x7>
    eab8:	          move.l sp,d0
    eaba:	          addq.l #8,d0
    eabc:	          move.l d0,-(sp)
    eabe:	          jsr 10e82 <getValueType>
    eac4:	          lea 12(sp),sp
    eac8:	          tst.w d0
    eaca:	      /-- bne.s ead0 <builtIn_getCharacterDirection+0x28>
    eacc:	      |   moveq #1,d0
    eace:	/-----|-- bra.s eb2e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    ead0:	|     \-> moveq #24,d0
    ead2:	|         add.l 16(sp),d0
    ead6:	|         move.l d0,-(sp)
    ead8:	|         jsr 11806 <trimStack>
    eade:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eae0:	|         move.l (sp),d0
    eae2:	|         move.l d0,-(sp)
    eae4:	|         jsr 6c1a <findPerson>
    eaea:	|         addq.l #4,sp
    eaec:	|         move.l d0,4(sp)
	if (thisPerson) {
    eaf0:	|  /----- beq.s eb14 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    eaf2:	|  |      movea.l 4(sp),a0
    eaf6:	|  |      move.l 94(a0),d1
    eafa:	|  |      moveq #28,d0
    eafc:	|  |      add.l 16(sp),d0
    eb00:	|  |      move.l d1,-(sp)
    eb02:	|  |      pea 1 <_start+0x1>
    eb06:	|  |      move.l d0,-(sp)
    eb08:	|  |      jsr 11774 <setVariable>
    eb0e:	|  |      lea 12(sp),sp
    eb12:	|  |  /-- bra.s eb2c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eb14:	|  \--|-> moveq #28,d0
    eb16:	|     |   add.l 16(sp),d0
    eb1a:	|     |   clr.l -(sp)
    eb1c:	|     |   pea 1 <_start+0x1>
    eb20:	|     |   move.l d0,-(sp)
    eb22:	|     |   jsr 11774 <setVariable>
    eb28:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eb2c:	|     \-> moveq #2,d0
}
    eb2e:	\-------> addq.l #8,sp
    eb30:	          rts

0000eb32 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    eb32:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb34:	       movea.l 16(sp),a0
    eb38:	       move.l 24(a0),d0
    eb3c:	       move.l d0,-(sp)
    eb3e:	       pea 7 <_start+0x7>
    eb42:	       move.l sp,d0
    eb44:	       addq.l #8,d0
    eb46:	       move.l d0,-(sp)
    eb48:	       jsr 10e82 <getValueType>
    eb4e:	       lea 12(sp),sp
    eb52:	       tst.w d0
    eb54:	   /-- bne.s eb5a <builtIn_isCharacter+0x28>
    eb56:	   |   moveq #1,d0
    eb58:	/--|-- bra.s eb9c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    eb5a:	|  \-> moveq #24,d0
    eb5c:	|      add.l 16(sp),d0
    eb60:	|      move.l d0,-(sp)
    eb62:	|      jsr 11806 <trimStack>
    eb68:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eb6a:	|      move.l (sp),d0
    eb6c:	|      move.l d0,-(sp)
    eb6e:	|      jsr 6c1a <findPerson>
    eb74:	|      addq.l #4,sp
    eb76:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    eb7a:	|      sne d0
    eb7c:	|      neg.b d0
    eb7e:	|      moveq #0,d1
    eb80:	|      move.b d0,d1
    eb82:	|      moveq #28,d0
    eb84:	|      add.l 16(sp),d0
    eb88:	|      move.l d1,-(sp)
    eb8a:	|      pea 1 <_start+0x1>
    eb8e:	|      move.l d0,-(sp)
    eb90:	|      jsr 11774 <setVariable>
    eb96:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb9a:	|      moveq #2,d0
}
    eb9c:	\----> addq.l #8,sp
    eb9e:	       rts

0000eba0 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    eba0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eba2:	          movea.l 16(sp),a0
    eba6:	          move.l 24(a0),d0
    ebaa:	          move.l d0,-(sp)
    ebac:	          pea 7 <_start+0x7>
    ebb0:	          move.l sp,d0
    ebb2:	          addq.l #8,d0
    ebb4:	          move.l d0,-(sp)
    ebb6:	          jsr 10e82 <getValueType>
    ebbc:	          lea 12(sp),sp
    ebc0:	          tst.w d0
    ebc2:	      /-- bne.s ebc8 <builtIn_normalCharacter+0x28>
    ebc4:	      |   moveq #1,d0
    ebc6:	/-----|-- bra.s ec44 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    ebc8:	|     \-> moveq #24,d0
    ebca:	|         add.l 16(sp),d0
    ebce:	|         move.l d0,-(sp)
    ebd0:	|         jsr 11806 <trimStack>
    ebd6:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ebd8:	|         move.l (sp),d0
    ebda:	|         move.l d0,-(sp)
    ebdc:	|         jsr 6c1a <findPerson>
    ebe2:	|         addq.l #4,sp
    ebe4:	|         move.l d0,4(sp)
	if (thisPerson)
    ebe8:	|  /----- beq.s ec2a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    ebea:	|  |      movea.l 4(sp),a0
    ebee:	|  |      movea.l 68(a0),a0
    ebf2:	|  |      move.l (a0),d1
    ebf4:	|  |      movea.l 4(sp),a0
    ebf8:	|  |      move.l 94(a0),d0
    ebfc:	|  |      add.l d0,d0
    ebfe:	|  |      add.l d0,d0
    ec00:	|  |      movea.l d1,a0
    ec02:	|  |      adda.l d0,a0
    ec04:	|  |      move.l (a0),d0
    ec06:	|  |      movea.l 4(sp),a0
    ec0a:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ec0e:	|  |      moveq #28,d0
    ec10:	|  |      add.l 16(sp),d0
    ec14:	|  |      pea 1 <_start+0x1>
    ec18:	|  |      pea 1 <_start+0x1>
    ec1c:	|  |      move.l d0,-(sp)
    ec1e:	|  |      jsr 11774 <setVariable>
    ec24:	|  |      lea 12(sp),sp
    ec28:	|  |  /-- bra.s ec42 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ec2a:	|  \--|-> moveq #28,d0
    ec2c:	|     |   add.l 16(sp),d0
    ec30:	|     |   clr.l -(sp)
    ec32:	|     |   pea 1 <_start+0x1>
    ec36:	|     |   move.l d0,-(sp)
    ec38:	|     |   jsr 11774 <setVariable>
    ec3e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ec42:	|     \-> moveq #2,d0
}
    ec44:	\-------> addq.l #8,sp
    ec46:	          rts

0000ec48 <builtIn_isMoving>:

builtIn(isMoving)
{
    ec48:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec4a:	          movea.l 16(sp),a0
    ec4e:	          move.l 24(a0),d0
    ec52:	          move.l d0,-(sp)
    ec54:	          pea 7 <_start+0x7>
    ec58:	          move.l sp,d0
    ec5a:	          addq.l #8,d0
    ec5c:	          move.l d0,-(sp)
    ec5e:	          jsr 10e82 <getValueType>
    ec64:	          lea 12(sp),sp
    ec68:	          tst.w d0
    ec6a:	      /-- bne.s ec70 <builtIn_isMoving+0x28>
    ec6c:	      |   moveq #1,d0
    ec6e:	/-----|-- bra.s ecd0 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    ec70:	|     \-> moveq #24,d0
    ec72:	|         add.l 16(sp),d0
    ec76:	|         move.l d0,-(sp)
    ec78:	|         jsr 11806 <trimStack>
    ec7e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ec80:	|         move.l (sp),d0
    ec82:	|         move.l d0,-(sp)
    ec84:	|         jsr 6c1a <findPerson>
    ec8a:	|         addq.l #4,sp
    ec8c:	|         move.l d0,4(sp)
	if (thisPerson)
    ec90:	|  /----- beq.s ecb6 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    ec92:	|  |      movea.l 4(sp),a0
    ec96:	|  |      move.w 52(a0),d0
    ec9a:	|  |      movea.w d0,a0
    ec9c:	|  |      moveq #28,d0
    ec9e:	|  |      add.l 16(sp),d0
    eca2:	|  |      move.l a0,-(sp)
    eca4:	|  |      pea 1 <_start+0x1>
    eca8:	|  |      move.l d0,-(sp)
    ecaa:	|  |      jsr 11774 <setVariable>
    ecb0:	|  |      lea 12(sp),sp
    ecb4:	|  |  /-- bra.s ecce <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ecb6:	|  \--|-> moveq #28,d0
    ecb8:	|     |   add.l 16(sp),d0
    ecbc:	|     |   clr.l -(sp)
    ecbe:	|     |   pea 1 <_start+0x1>
    ecc2:	|     |   move.l d0,-(sp)
    ecc4:	|     |   jsr 11774 <setVariable>
    ecca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ecce:	|     \-> moveq #2,d0
}
    ecd0:	\-------> addq.l #8,sp
    ecd2:	          rts

0000ecd4 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ecd4:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecd8:	          movea.l 20(sp),a0
    ecdc:	          move.l 24(a0),d0
    ece0:	          move.l d0,-(sp)
    ece2:	          pea 7 <_start+0x7>
    ece6:	          lea 8(sp),a0
    ecea:	          move.l a0,-(sp)
    ecec:	          jsr 10e82 <getValueType>
    ecf2:	          lea 12(sp),sp
    ecf6:	          tst.w d0
    ecf8:	      /-- bne.s ed00 <builtIn_fetchEvent+0x2c>
    ecfa:	      |   moveq #1,d0
    ecfc:	/-----|-- bra.w ed94 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ed00:	|     \-> moveq #24,d0
    ed02:	|         add.l 20(sp),d0
    ed06:	|         move.l d0,-(sp)
    ed08:	|         jsr 11806 <trimStack>
    ed0e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed10:	|         movea.l 20(sp),a0
    ed14:	|         move.l 24(a0),d0
    ed18:	|         move.l d0,-(sp)
    ed1a:	|         pea 7 <_start+0x7>
    ed1e:	|         moveq #12,d0
    ed20:	|         add.l sp,d0
    ed22:	|         move.l d0,-(sp)
    ed24:	|         jsr 10e82 <getValueType>
    ed2a:	|         lea 12(sp),sp
    ed2e:	|         tst.w d0
    ed30:	|     /-- bne.s ed36 <builtIn_fetchEvent+0x62>
    ed32:	|     |   moveq #1,d0
    ed34:	+-----|-- bra.s ed94 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ed36:	|     \-> moveq #24,d0
    ed38:	|         add.l 20(sp),d0
    ed3c:	|         move.l d0,-(sp)
    ed3e:	|         jsr 11806 <trimStack>
    ed44:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    ed46:	|         move.l (sp),d1
    ed48:	|         move.l 4(sp),d0
    ed4c:	|         move.l d1,-(sp)
    ed4e:	|         move.l d0,-(sp)
    ed50:	|         jsr 9d08 <getCombinationFunction>
    ed56:	|         addq.l #8,sp
    ed58:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    ed5c:	|  /----- beq.s ed7a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ed5e:	|  |      moveq #28,d0
    ed60:	|  |      add.l 20(sp),d0
    ed64:	|  |      move.l 8(sp),-(sp)
    ed68:	|  |      pea 2 <_start+0x2>
    ed6c:	|  |      move.l d0,-(sp)
    ed6e:	|  |      jsr 11774 <setVariable>
    ed74:	|  |      lea 12(sp),sp
    ed78:	|  |  /-- bra.s ed92 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ed7a:	|  \--|-> moveq #28,d0
    ed7c:	|     |   add.l 20(sp),d0
    ed80:	|     |   clr.l -(sp)
    ed82:	|     |   pea 1 <_start+0x1>
    ed86:	|     |   move.l d0,-(sp)
    ed88:	|     |   jsr 11774 <setVariable>
    ed8e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ed92:	|     \-> moveq #2,d0
}
    ed94:	\-------> lea 12(sp),sp
    ed98:	          rts

0000ed9a <builtIn_deleteFile>:

builtIn(deleteFile)
{
    ed9a:	       lea -24(sp),sp
    ed9e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    eda0:	       movea.l 36(sp),a0
    eda4:	       move.l 24(a0),d0
    eda8:	       move.l d0,-(sp)
    edaa:	       jsr 11458 <getTextFromAnyVar>
    edb0:	       addq.l #4,sp
    edb2:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    edb6:	       moveq #24,d0
    edb8:	       add.l 36(sp),d0
    edbc:	       move.l d0,-(sp)
    edbe:	       jsr 11806 <trimStack>
    edc4:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    edc6:	       move.l 24(sp),-(sp)
    edca:	       jsr 2fe <encodeFilename>
    edd0:	       addq.l #4,sp
    edd2:	       move.l d0,20(sp)
    FreeVec(namNormal);
    edd6:	       move.l 24(sp),16(sp)
    eddc:	       move.l 19c50 <SysBase>,d0
    ede2:	       movea.l d0,a6
    ede4:	       movea.l 16(sp),a1
    ede8:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    edec:	       move.l 20(sp),-(sp)
    edf0:	       jsr aac0 <failSecurityCheck>
    edf6:	       addq.l #4,sp
    edf8:	       tst.w d0
    edfa:	   /-- beq.s ee00 <builtIn_deleteFile+0x66>
    edfc:	   |   moveq #1,d0
    edfe:	/--|-- bra.s ee4e <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    ee00:	|  \-> move.l 20(sp),12(sp)
    ee06:	|      move.l 19c58 <DOSBase>,d0
    ee0c:	|      movea.l d0,a6
    ee0e:	|      move.l 12(sp),d1
    ee12:	|      jsr -72(a6)
    ee16:	|      move.l d0,8(sp)
    ee1a:	|      move.l 8(sp),d1
    ee1e:	|      moveq #28,d0
    ee20:	|      add.l 36(sp),d0
    ee24:	|      move.l d1,-(sp)
    ee26:	|      pea 1 <_start+0x1>
    ee2a:	|      move.l d0,-(sp)
    ee2c:	|      jsr 11774 <setVariable>
    ee32:	|      lea 12(sp),sp
    FreeVec(nam);
    ee36:	|      move.l 20(sp),4(sp)
    ee3c:	|      move.l 19c50 <SysBase>,d0
    ee42:	|      movea.l d0,a6
    ee44:	|      movea.l 4(sp),a1
    ee48:	|      jsr -690(a6)

    return BR_CONTINUE;
    ee4c:	|      moveq #2,d0
}
    ee4e:	\----> movea.l (sp)+,a6
    ee50:	       lea 24(sp),sp
    ee54:	       rts

0000ee56 <builtIn_renameFile>:

builtIn(renameFile)
{
    ee56:	       lea -40(sp),sp
    ee5a:	       move.l a6,-(sp)
    ee5c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    ee5e:	       movea.l 56(sp),a0
    ee62:	       move.l 24(a0),d0
    ee66:	       move.l d0,-(sp)
    ee68:	       jsr 11458 <getTextFromAnyVar>
    ee6e:	       addq.l #4,sp
    ee70:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    ee74:	       move.l 44(sp),-(sp)
    ee78:	       jsr 2fe <encodeFilename>
    ee7e:	       addq.l #4,sp
    ee80:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    ee84:	       moveq #24,d0
    ee86:	       add.l 56(sp),d0
    ee8a:	       move.l d0,-(sp)
    ee8c:	       jsr 11806 <trimStack>
    ee92:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    ee94:	       move.l 40(sp),-(sp)
    ee98:	       jsr aac0 <failSecurityCheck>
    ee9e:	       addq.l #4,sp
    eea0:	       tst.w d0
    eea2:	   /-- beq.s eeaa <builtIn_renameFile+0x54>
    eea4:	   |   moveq #1,d0
    eea6:	/--|-- bra.w ef90 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    eeaa:	|  \-> move.l 44(sp),36(sp)
    eeb0:	|      move.l 19c50 <SysBase>,d0
    eeb6:	|      movea.l d0,a6
    eeb8:	|      movea.l 36(sp),a1
    eebc:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    eec0:	|      movea.l 56(sp),a0
    eec4:	|      move.l 24(a0),d0
    eec8:	|      move.l d0,-(sp)
    eeca:	|      jsr 11458 <getTextFromAnyVar>
    eed0:	|      addq.l #4,sp
    eed2:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    eed6:	|      move.l 44(sp),-(sp)
    eeda:	|      jsr 2fe <encodeFilename>
    eee0:	|      addq.l #4,sp
    eee2:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    eee6:	|      moveq #24,d0
    eee8:	|      add.l 56(sp),d0
    eeec:	|      move.l d0,-(sp)
    eeee:	|      jsr 11806 <trimStack>
    eef4:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    eef6:	|      move.l 32(sp),-(sp)
    eefa:	|      jsr aac0 <failSecurityCheck>
    ef00:	|      addq.l #4,sp
    ef02:	|      tst.w d0
    ef04:	|  /-- beq.s ef0c <builtIn_renameFile+0xb6>
    ef06:	|  |   moveq #1,d0
    ef08:	+--|-- bra.w ef90 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    ef0c:	|  \-> move.l 44(sp),28(sp)
    ef12:	|      move.l 19c50 <SysBase>,d0
    ef18:	|      movea.l d0,a6
    ef1a:	|      movea.l 28(sp),a1
    ef1e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    ef22:	|      move.l 32(sp),24(sp)
    ef28:	|      move.l 40(sp),20(sp)
    ef2e:	|      move.l 19c58 <DOSBase>,d0
    ef34:	|      movea.l d0,a6
    ef36:	|      move.l 24(sp),d1
    ef3a:	|      move.l 20(sp),d2
    ef3e:	|      jsr -78(a6)
    ef42:	|      move.l d0,16(sp)
    ef46:	|      move.l 16(sp),d1
    ef4a:	|      moveq #28,d0
    ef4c:	|      add.l 56(sp),d0
    ef50:	|      move.l d1,-(sp)
    ef52:	|      pea 1 <_start+0x1>
    ef56:	|      move.l d0,-(sp)
    ef58:	|      jsr 11774 <setVariable>
    ef5e:	|      lea 12(sp),sp
	FreeVec(nam);
    ef62:	|      move.l 32(sp),12(sp)
    ef68:	|      move.l 19c50 <SysBase>,d0
    ef6e:	|      movea.l d0,a6
    ef70:	|      movea.l 12(sp),a1
    ef74:	|      jsr -690(a6)
	FreeVec(newnam);
    ef78:	|      move.l 40(sp),8(sp)
    ef7e:	|      move.l 19c50 <SysBase>,d0
    ef84:	|      movea.l d0,a6
    ef86:	|      movea.l 8(sp),a1
    ef8a:	|      jsr -690(a6)

	return BR_CONTINUE;
    ef8e:	|      moveq #2,d0
}
    ef90:	\----> move.l (sp)+,d2
    ef92:	       movea.l (sp)+,a6
    ef94:	       lea 40(sp),sp
    ef98:	       rts

0000ef9a <builtIn_cacheSound>:

builtIn(cacheSound)
{
    ef9a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef9c:	       movea.l 12(sp),a0
    efa0:	       move.l 24(a0),d0
    efa4:	       move.l d0,-(sp)
    efa6:	       pea 5 <_start+0x5>
    efaa:	       move.l sp,d0
    efac:	       addq.l #8,d0
    efae:	       move.l d0,-(sp)
    efb0:	       jsr 10e82 <getValueType>
    efb6:	       lea 12(sp),sp
    efba:	       tst.w d0
    efbc:	   /-- bne.s efc2 <builtIn_cacheSound+0x28>
    efbe:	   |   moveq #1,d0
    efc0:	/--|-- bra.s efea <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    efc2:	|  \-> moveq #24,d0
    efc4:	|      add.l 12(sp),d0
    efc8:	|      move.l d0,-(sp)
    efca:	|      jsr 11806 <trimStack>
    efd0:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    efd2:	|      move.l (sp),d0
    efd4:	|      move.l d0,-(sp)
    efd6:	|      jsr 94b6 <cacheSound>
    efdc:	|      addq.l #4,sp
    efde:	|      moveq #-1,d1
    efe0:	|      cmp.l d0,d1
    efe2:	|  /-- bne.s efe8 <builtIn_cacheSound+0x4e>
    efe4:	|  |   moveq #1,d0
    efe6:	+--|-- bra.s efea <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    efe8:	|  \-> moveq #2,d0
}
    efea:	\----> addq.l #4,sp
    efec:	       rts

0000efee <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    efee:	pea 16ad8 <main_sludge.c.828d7d86+0x318>
    eff4:	jsr 12ed6 <KPrintF>
    effa:	addq.l #4,sp
	return BR_CONTINUE;
    effc:	moveq #2,d0
}
    effe:	rts

0000f000 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    f000:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f004:	          movea.l 20(sp),a0
    f008:	          move.l 24(a0),d0
    f00c:	          move.l d0,-(sp)
    f00e:	          pea 1 <_start+0x1>
    f012:	          moveq #12,d0
    f014:	          add.l sp,d0
    f016:	          move.l d0,-(sp)
    f018:	          jsr 10e82 <getValueType>
    f01e:	          lea 12(sp),sp
    f022:	          tst.w d0
    f024:	      /-- bne.s f02c <builtIn_setCharacterSpinSpeed+0x2c>
    f026:	      |   moveq #1,d0
    f028:	/-----|-- bra.w f0c6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f02c:	|     \-> moveq #24,d0
    f02e:	|         add.l 20(sp),d0
    f032:	|         move.l d0,-(sp)
    f034:	|         jsr 11806 <trimStack>
    f03a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f03c:	|         movea.l 20(sp),a0
    f040:	|         move.l 24(a0),d0
    f044:	|         move.l d0,-(sp)
    f046:	|         pea 7 <_start+0x7>
    f04a:	|         lea 8(sp),a0
    f04e:	|         move.l a0,-(sp)
    f050:	|         jsr 10e82 <getValueType>
    f056:	|         lea 12(sp),sp
    f05a:	|         tst.w d0
    f05c:	|     /-- bne.s f062 <builtIn_setCharacterSpinSpeed+0x62>
    f05e:	|     |   moveq #1,d0
    f060:	+-----|-- bra.s f0c6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f062:	|     \-> moveq #24,d0
    f064:	|         add.l 20(sp),d0
    f068:	|         move.l d0,-(sp)
    f06a:	|         jsr 11806 <trimStack>
    f070:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f072:	|         move.l (sp),d0
    f074:	|         move.l d0,-(sp)
    f076:	|         jsr 6c1a <findPerson>
    f07c:	|         addq.l #4,sp
    f07e:	|         move.l d0,8(sp)

	if (thisPerson) {
    f082:	|  /----- beq.s f0ac <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    f084:	|  |      move.l 4(sp),d0
    f088:	|  |      movea.l 8(sp),a0
    f08c:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f090:	|  |      moveq #28,d0
    f092:	|  |      add.l 20(sp),d0
    f096:	|  |      pea 1 <_start+0x1>
    f09a:	|  |      pea 1 <_start+0x1>
    f09e:	|  |      move.l d0,-(sp)
    f0a0:	|  |      jsr 11774 <setVariable>
    f0a6:	|  |      lea 12(sp),sp
    f0aa:	|  |  /-- bra.s f0c4 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f0ac:	|  \--|-> moveq #28,d0
    f0ae:	|     |   add.l 20(sp),d0
    f0b2:	|     |   clr.l -(sp)
    f0b4:	|     |   pea 1 <_start+0x1>
    f0b8:	|     |   move.l d0,-(sp)
    f0ba:	|     |   jsr 11774 <setVariable>
    f0c0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f0c4:	|     \-> moveq #2,d0
}
    f0c6:	\-------> lea 12(sp),sp
    f0ca:	          rts

0000f0cc <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    f0cc:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0d0:	          movea.l 20(sp),a0
    f0d4:	          move.l 24(a0),d0
    f0d8:	          move.l d0,-(sp)
    f0da:	          pea 1 <_start+0x1>
    f0de:	          moveq #12,d0
    f0e0:	          add.l sp,d0
    f0e2:	          move.l d0,-(sp)
    f0e4:	          jsr 10e82 <getValueType>
    f0ea:	          lea 12(sp),sp
    f0ee:	          tst.w d0
    f0f0:	      /-- bne.s f0f8 <builtIn_setCharacterAngleOffset+0x2c>
    f0f2:	      |   moveq #1,d0
    f0f4:	/-----|-- bra.w f192 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f0f8:	|     \-> moveq #24,d0
    f0fa:	|         add.l 20(sp),d0
    f0fe:	|         move.l d0,-(sp)
    f100:	|         jsr 11806 <trimStack>
    f106:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f108:	|         movea.l 20(sp),a0
    f10c:	|         move.l 24(a0),d0
    f110:	|         move.l d0,-(sp)
    f112:	|         pea 7 <_start+0x7>
    f116:	|         lea 8(sp),a0
    f11a:	|         move.l a0,-(sp)
    f11c:	|         jsr 10e82 <getValueType>
    f122:	|         lea 12(sp),sp
    f126:	|         tst.w d0
    f128:	|     /-- bne.s f12e <builtIn_setCharacterAngleOffset+0x62>
    f12a:	|     |   moveq #1,d0
    f12c:	+-----|-- bra.s f192 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f12e:	|     \-> moveq #24,d0
    f130:	|         add.l 20(sp),d0
    f134:	|         move.l d0,-(sp)
    f136:	|         jsr 11806 <trimStack>
    f13c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f13e:	|         move.l (sp),d0
    f140:	|         move.l d0,-(sp)
    f142:	|         jsr 6c1a <findPerson>
    f148:	|         addq.l #4,sp
    f14a:	|         move.l d0,8(sp)

	if (thisPerson) {
    f14e:	|  /----- beq.s f178 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    f150:	|  |      move.l 4(sp),d0
    f154:	|  |      movea.l 8(sp),a0
    f158:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f15c:	|  |      moveq #28,d0
    f15e:	|  |      add.l 20(sp),d0
    f162:	|  |      pea 1 <_start+0x1>
    f166:	|  |      pea 1 <_start+0x1>
    f16a:	|  |      move.l d0,-(sp)
    f16c:	|  |      jsr 11774 <setVariable>
    f172:	|  |      lea 12(sp),sp
    f176:	|  |  /-- bra.s f190 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f178:	|  \--|-> moveq #28,d0
    f17a:	|     |   add.l 20(sp),d0
    f17e:	|     |   clr.l -(sp)
    f180:	|     |   pea 1 <_start+0x1>
    f184:	|     |   move.l d0,-(sp)
    f186:	|     |   jsr 11774 <setVariable>
    f18c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f190:	|     \-> moveq #2,d0
}
    f192:	\-------> lea 12(sp),sp
    f196:	          rts

0000f198 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    f198:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f19a:	       movea.l 12(sp),a0
    f19e:	       move.l 24(a0),d0
    f1a2:	       move.l d0,-(sp)
    f1a4:	       pea 1 <_start+0x1>
    f1a8:	       move.l sp,d0
    f1aa:	       addq.l #8,d0
    f1ac:	       move.l d0,-(sp)
    f1ae:	       jsr 10e82 <getValueType>
    f1b4:	       lea 12(sp),sp
    f1b8:	       tst.w d0
    f1ba:	   /-- bne.s f1c0 <builtIn_transitionMode+0x28>
    f1bc:	   |   moveq #1,d0
    f1be:	/--|-- bra.s f1f6 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    f1c0:	|  \-> move.l (sp),d0
    f1c2:	|      move.l d0,d0
    f1c4:	|      move.b d0,18686 <fadeMode>
	trimStack (&fun -> stack);
    f1ca:	|      moveq #24,d0
    f1cc:	|      add.l 12(sp),d0
    f1d0:	|      move.l d0,-(sp)
    f1d2:	|      jsr 11806 <trimStack>
    f1d8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f1da:	|      moveq #28,d0
    f1dc:	|      add.l 12(sp),d0
    f1e0:	|      pea 1 <_start+0x1>
    f1e4:	|      pea 1 <_start+0x1>
    f1e8:	|      move.l d0,-(sp)
    f1ea:	|      jsr 11774 <setVariable>
    f1f0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f1f4:	|      moveq #2,d0
}
    f1f6:	\----> addq.l #4,sp
    f1f8:	       rts

0000f1fa <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f1fa:	moveq #24,d0
    f1fc:	add.l 8(sp),d0
    f200:	move.l d0,-(sp)
    f202:	jsr 11806 <trimStack>
    f208:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    f20a:	moveq #28,d0
    f20c:	add.l 8(sp),d0
    f210:	pea 1 <_start+0x1>
    f214:	pea 1 <_start+0x1>
    f218:	move.l d0,-(sp)
    f21a:	jsr 11774 <setVariable>
    f220:	lea 12(sp),sp
	return BR_CONTINUE;
    f224:	moveq #2,d0
}
    f226:	rts

0000f228 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    f228:	pea 16b02 <main_sludge.c.828d7d86+0x342>
    f22e:	jsr 12ed6 <KPrintF>
    f234:	addq.l #4,sp
	return BR_CONTINUE;
    f236:	moveq #2,d0
}
    f238:	rts

0000f23a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    f23a:	       lea -16(sp),sp
    f23e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    f240:	       movea.l 28(sp),a0
    f244:	       move.l 24(a0),d0
    f248:	       move.l d0,-(sp)
    f24a:	       jsr 11458 <getTextFromAnyVar>
    f250:	       addq.l #4,sp
    f252:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    f256:	   /-- bne.s f25e <builtIn_saveCustomData+0x24>
    f258:	   |   moveq #1,d0
    f25a:	/--|-- bra.w f310 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    f25e:	|  \-> move.l 16(sp),-(sp)
    f262:	|      jsr 2fe <encodeFilename>
    f268:	|      addq.l #4,sp
    f26a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    f26e:	|      move.l 16(sp),8(sp)
    f274:	|      move.l 19c50 <SysBase>,d0
    f27a:	|      movea.l d0,a6
    f27c:	|      movea.l 8(sp),a1
    f280:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    f284:	|      move.l 12(sp),-(sp)
    f288:	|      jsr aac0 <failSecurityCheck>
    f28e:	|      addq.l #4,sp
    f290:	|      tst.w d0
    f292:	|  /-- beq.s f298 <builtIn_saveCustomData+0x5e>
    f294:	|  |   moveq #1,d0
    f296:	+--|-- bra.s f310 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f298:	|  \-> moveq #24,d0
    f29a:	|      add.l 28(sp),d0
    f29e:	|      move.l d0,-(sp)
    f2a0:	|      jsr 11806 <trimStack>
    f2a6:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    f2a8:	|      movea.l 28(sp),a0
    f2ac:	|      movea.l 24(a0),a0
    f2b0:	|      move.l (a0),d0
    f2b2:	|      moveq #6,d1
    f2b4:	|      cmp.l d0,d1
    f2b6:	|  /-- beq.s f2ca <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    f2b8:	|  |   pea 16b2f <main_sludge.c.828d7d86+0x36f>
    f2be:	|  |   jsr 12ed6 <KPrintF>
    f2c4:	|  |   addq.l #4,sp
		return BR_ERROR;
    f2c6:	|  |   moveq #1,d0
    f2c8:	+--|-- bra.s f310 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    f2ca:	|  \-> movea.l 28(sp),a0
    f2ce:	|      move.l 24(a0),d0
    f2d2:	|      move.l d0,-(sp)
    f2d4:	|      move.l 16(sp),-(sp)
    f2d8:	|      jsr a710 <stackToFile>
    f2de:	|      addq.l #8,sp
    f2e0:	|      tst.w d0
    f2e2:	|  /-- bne.s f2e8 <builtIn_saveCustomData+0xae>
    f2e4:	|  |   moveq #1,d0
    f2e6:	+--|-- bra.s f310 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f2e8:	|  \-> moveq #24,d0
    f2ea:	|      add.l 28(sp),d0
    f2ee:	|      move.l d0,-(sp)
    f2f0:	|      jsr 11806 <trimStack>
    f2f6:	|      addq.l #4,sp
	FreeVec(fileName);
    f2f8:	|      move.l 12(sp),4(sp)
    f2fe:	|      move.l 19c50 <SysBase>,d0
    f304:	|      movea.l d0,a6
    f306:	|      movea.l 4(sp),a1
    f30a:	|      jsr -690(a6)
	return BR_CONTINUE;
    f30e:	|      moveq #2,d0
}
    f310:	\----> movea.l (sp)+,a6
    f312:	       lea 16(sp),sp
    f316:	       rts

0000f318 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    f318:	       lea -28(sp),sp
    f31c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f31e:	       movea.l 40(sp),a0
    f322:	       move.l 24(a0),d0
    f326:	       move.l d0,-(sp)
    f328:	       jsr 11458 <getTextFromAnyVar>
    f32e:	       addq.l #4,sp
    f330:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    f334:	   /-- bne.s f33c <builtIn_loadCustomData+0x24>
    f336:	   |   moveq #1,d0
    f338:	/--|-- bra.w f438 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    f33c:	|  \-> move.l 28(sp),-(sp)
    f340:	|      jsr 2fe <encodeFilename>
    f346:	|      addq.l #4,sp
    f348:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    f34c:	|      move.l 28(sp),20(sp)
    f352:	|      move.l 19c50 <SysBase>,d0
    f358:	|      movea.l d0,a6
    f35a:	|      movea.l 20(sp),a1
    f35e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    f362:	|      move.l 24(sp),-(sp)
    f366:	|      jsr aac0 <failSecurityCheck>
    f36c:	|      addq.l #4,sp
    f36e:	|      tst.w d0
    f370:	|  /-- beq.s f378 <builtIn_loadCustomData+0x60>
    f372:	|  |   moveq #1,d0
    f374:	+--|-- bra.w f438 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    f378:	|  \-> moveq #24,d0
    f37a:	|      add.l 40(sp),d0
    f37e:	|      move.l d0,-(sp)
    f380:	|      jsr 11806 <trimStack>
    f386:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    f388:	|      moveq #28,d0
    f38a:	|      add.l 40(sp),d0
    f38e:	|      move.l d0,-(sp)
    f390:	|      jsr 110d0 <unlinkVar>
    f396:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    f398:	|      movea.l 40(sp),a0
    f39c:	|      moveq #6,d0
    f39e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f3a2:	|      moveq #12,d0
    f3a4:	|      move.l d0,16(sp)
    f3a8:	|      clr.l 12(sp)
    f3ac:	|      move.l 19c50 <SysBase>,d0
    f3b2:	|      movea.l d0,a6
    f3b4:	|      move.l 16(sp),d0
    f3b8:	|      move.l 12(sp),d1
    f3bc:	|      jsr -684(a6)
    f3c0:	|      move.l d0,8(sp)
    f3c4:	|      move.l 8(sp),d0
    f3c8:	|      movea.l 40(sp),a0
    f3cc:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    f3d0:	|      movea.l 40(sp),a0
    f3d4:	|      move.l 32(a0),d0
    f3d8:	|  /-- bne.s f3de <builtIn_loadCustomData+0xc6>
    f3da:	|  |   moveq #1,d0
    f3dc:	+--|-- bra.s f438 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    f3de:	|  \-> movea.l 40(sp),a0
    f3e2:	|      movea.l 32(a0),a0
    f3e6:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    f3e8:	|      movea.l 40(sp),a0
    f3ec:	|      movea.l 32(a0),a0
    f3f0:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    f3f4:	|      movea.l 40(sp),a0
    f3f8:	|      movea.l 32(a0),a0
    f3fc:	|      moveq #1,d0
    f3fe:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    f402:	|      movea.l 40(sp),a0
    f406:	|      move.l 32(a0),d0
    f40a:	|      move.l d0,-(sp)
    f40c:	|      move.l 28(sp),-(sp)
    f410:	|      jsr a14a <fileToStack>
    f416:	|      addq.l #8,sp
    f418:	|      tst.w d0
    f41a:	|  /-- bne.s f420 <builtIn_loadCustomData+0x108>
    f41c:	|  |   moveq #1,d0
    f41e:	+--|-- bra.s f438 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    f420:	|  \-> move.l 24(sp),4(sp)
    f426:	|      move.l 19c50 <SysBase>,d0
    f42c:	|      movea.l d0,a6
    f42e:	|      movea.l 4(sp),a1
    f432:	|      jsr -690(a6)
	return BR_CONTINUE;
    f436:	|      moveq #2,d0
}
    f438:	\----> movea.l (sp)+,a6
    f43a:	       lea 28(sp),sp
    f43e:	       rts

0000f440 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    f440:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f442:	       movea.l 12(sp),a0
    f446:	       move.l 24(a0),d0
    f44a:	       move.l d0,-(sp)
    f44c:	       pea 1 <_start+0x1>
    f450:	       move.l sp,d0
    f452:	       addq.l #8,d0
    f454:	       move.l d0,-(sp)
    f456:	       jsr 10e82 <getValueType>
    f45c:	       lea 12(sp),sp
    f460:	       tst.w d0
    f462:	   /-- bne.s f468 <builtIn_setCustomEncoding+0x28>
    f464:	   |   moveq #1,d0
    f466:	/--|-- bra.s f49e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    f468:	|  \-> move.l (sp),d0
    f46a:	|      move.l d0,d0
    f46c:	|      move.w d0,19d08 <saveEncoding>
	trimStack (&fun -> stack);
    f472:	|      moveq #24,d0
    f474:	|      add.l 12(sp),d0
    f478:	|      move.l d0,-(sp)
    f47a:	|      jsr 11806 <trimStack>
    f480:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f482:	|      moveq #28,d0
    f484:	|      add.l 12(sp),d0
    f488:	|      pea 1 <_start+0x1>
    f48c:	|      pea 1 <_start+0x1>
    f490:	|      move.l d0,-(sp)
    f492:	|      jsr 11774 <setVariable>
    f498:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f49c:	|      moveq #2,d0
}
    f49e:	\----> addq.l #4,sp
    f4a0:	       rts

0000f4a2 <builtIn_freeSound>:

builtIn(freeSound)
{
    f4a2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4a4:	       movea.l 12(sp),a0
    f4a8:	       move.l 24(a0),d0
    f4ac:	       move.l d0,-(sp)
    f4ae:	       pea 5 <_start+0x5>
    f4b2:	       move.l sp,d0
    f4b4:	       addq.l #8,d0
    f4b6:	       move.l d0,-(sp)
    f4b8:	       jsr 10e82 <getValueType>
    f4be:	       lea 12(sp),sp
    f4c2:	       tst.w d0
    f4c4:	   /-- bne.s f4ca <builtIn_freeSound+0x28>
    f4c6:	   |   moveq #1,d0
    f4c8:	/--|-- bra.s f4e8 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    f4ca:	|  \-> moveq #24,d0
    f4cc:	|      add.l 12(sp),d0
    f4d0:	|      move.l d0,-(sp)
    f4d2:	|      jsr 11806 <trimStack>
    f4d8:	|      addq.l #4,sp
	huntKillFreeSound (v);
    f4da:	|      move.l (sp),d0
    f4dc:	|      move.l d0,-(sp)
    f4de:	|      jsr 94ba <huntKillFreeSound>
    f4e4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f4e6:	|      moveq #2,d0
}
    f4e8:	\----> addq.l #4,sp
    f4ea:	       rts

0000f4ec <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    f4ec:	       lea -12(sp),sp
    f4f0:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4f2:	       movea.l 24(sp),a0
    f4f6:	       move.l 24(a0),d0
    f4fa:	       move.l d0,-(sp)
    f4fc:	       pea 1 <_start+0x1>
    f500:	       moveq #16,d0
    f502:	       add.l sp,d0
    f504:	       move.l d0,-(sp)
    f506:	       jsr 10e82 <getValueType>
    f50c:	       lea 12(sp),sp
    f510:	       tst.w d0
    f512:	   /-- bne.s f51a <builtIn_parallaxAdd+0x2e>
    f514:	   |   moveq #1,d0
    f516:	/--|-- bra.w f5ee <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f51a:	|  \-> moveq #24,d0
    f51c:	|      add.l 24(sp),d0
    f520:	|      move.l d0,-(sp)
    f522:	|      jsr 11806 <trimStack>
    f528:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f52a:	|      movea.l 24(sp),a0
    f52e:	|      move.l 24(a0),d0
    f532:	|      move.l d0,-(sp)
    f534:	|      pea 1 <_start+0x1>
    f538:	|      moveq #20,d0
    f53a:	|      add.l sp,d0
    f53c:	|      move.l d0,-(sp)
    f53e:	|      jsr 10e82 <getValueType>
    f544:	|      lea 12(sp),sp
    f548:	|      tst.w d0
    f54a:	|  /-- bne.s f552 <builtIn_parallaxAdd+0x66>
    f54c:	|  |   moveq #1,d0
    f54e:	+--|-- bra.w f5ee <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f552:	|  \-> moveq #24,d0
    f554:	|      add.l 24(sp),d0
    f558:	|      move.l d0,-(sp)
    f55a:	|      jsr 11806 <trimStack>
    f560:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f562:	|      movea.l 24(sp),a0
    f566:	|      move.l 24(a0),d0
    f56a:	|      move.l d0,-(sp)
    f56c:	|      pea 5 <_start+0x5>
    f570:	|      lea 12(sp),a0
    f574:	|      move.l a0,-(sp)
    f576:	|      jsr 10e82 <getValueType>
    f57c:	|      lea 12(sp),sp
    f580:	|      tst.w d0
    f582:	|  /-- bne.s f588 <builtIn_parallaxAdd+0x9c>
    f584:	|  |   moveq #1,d0
    f586:	+--|-- bra.s f5ee <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f588:	|  \-> moveq #24,d0
    f58a:	|      add.l 24(sp),d0
    f58e:	|      move.l d0,-(sp)
    f590:	|      jsr 11806 <trimStack>
    f596:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    f598:	|      move.l 8(sp),d0
    f59c:	|      move.l d0,d0
    f59e:	|      moveq #0,d2
    f5a0:	|      move.w d0,d2
    f5a2:	|      move.l 12(sp),d0
    f5a6:	|      move.l d0,d0
    f5a8:	|      moveq #0,d1
    f5aa:	|      move.w d0,d1
    f5ac:	|      move.l 4(sp),d0
    f5b0:	|      move.l d0,d0
    f5b2:	|      move.w d0,d0
    f5b4:	|      andi.l #65535,d0
    f5ba:	|      move.l d2,-(sp)
    f5bc:	|      move.l d1,-(sp)
    f5be:	|      move.l d0,-(sp)
    f5c0:	|      jsr 9ad0 <loadParallax>
    f5c6:	|      lea 12(sp),sp
    f5ca:	|      tst.w d0
    f5cc:	|  /-- bne.s f5d2 <builtIn_parallaxAdd+0xe6>
    f5ce:	|  |   moveq #1,d0
    f5d0:	+--|-- bra.s f5ee <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    f5d2:	|  \-> moveq #28,d0
    f5d4:	|      add.l 24(sp),d0
    f5d8:	|      pea 1 <_start+0x1>
    f5dc:	|      pea 1 <_start+0x1>
    f5e0:	|      move.l d0,-(sp)
    f5e2:	|      jsr 11774 <setVariable>
    f5e8:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    f5ec:	|      moveq #2,d0
}
    f5ee:	\----> move.l (sp)+,d2
    f5f0:	       lea 12(sp),sp
    f5f4:	       rts

0000f5f6 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    f5f6:	jsr 9660 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    f5fc:	moveq #28,d0
    f5fe:	add.l 8(sp),d0
    f602:	pea 1 <_start+0x1>
    f606:	pea 1 <_start+0x1>
    f60a:	move.l d0,-(sp)
    f60c:	jsr 11774 <setVariable>
    f612:	lea 12(sp),sp
	return BR_CONTINUE;
    f616:	moveq #2,d0
}
    f618:	rts

0000f61a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    f61a:	pea 16b4d <main_sludge.c.828d7d86+0x38d>
    f620:	jsr 12ed6 <KPrintF>
    f626:	addq.l #4,sp

	return BR_CONTINUE;
    f628:	moveq #2,d0
}
    f62a:	rts

0000f62c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    f62c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f62e:	             movea.l 16(sp),a0
    f632:	             movea.l 24(a0),a0
    f636:	             move.l (a0),d0
    f638:	             moveq #1,d1
    f63a:	             cmp.l d0,d1
    f63c:	      /----- beq.s f684 <builtIn_makeFastArray+0x58>
    f63e:	      |      moveq #6,d1
    f640:	      |      cmp.l d0,d1
    f642:	/-----|----- bne.s f6c2 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    f644:	|     |      movea.l 16(sp),a0
    f648:	|     |      movea.l 24(a0),a0
    f64c:	|     |      move.l 4(a0),d1
    f650:	|     |      moveq #28,d0
    f652:	|     |      add.l 16(sp),d0
    f656:	|     |      move.l d1,-(sp)
    f658:	|     |      move.l d0,-(sp)
    f65a:	|     |      jsr 10f34 <makeFastArrayFromStack>
    f660:	|     |      addq.l #8,sp
    f662:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    f666:	|     |      moveq #24,d0
    f668:	|     |      add.l 16(sp),d0
    f66c:	|     |      move.l d0,-(sp)
    f66e:	|     |      jsr 11806 <trimStack>
    f674:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    f676:	|     |      tst.w 6(sp)
    f67a:	|     |  /-- beq.s f680 <builtIn_makeFastArray+0x54>
    f67c:	|     |  |   moveq #2,d0
    f67e:	|  /--|--|-- bra.s f6d4 <builtIn_makeFastArray+0xa8>
    f680:	|  |  |  \-> moveq #1,d0
    f682:	|  +--|----- bra.s f6d4 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    f684:	|  |  \----> movea.l 16(sp),a0
    f688:	|  |         movea.l 24(a0),a0
    f68c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    f692:	|  |         moveq #24,d0
    f694:	|  |         add.l 16(sp),d0
    f698:	|  |         move.l d0,-(sp)
    f69a:	|  |         jsr 11806 <trimStack>
    f6a0:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    f6a2:	|  |         moveq #28,d0
    f6a4:	|  |         add.l 16(sp),d0
    f6a8:	|  |         move.l 2(sp),-(sp)
    f6ac:	|  |         move.l d0,-(sp)
    f6ae:	|  |         jsr 10f9e <makeFastArraySize>
    f6b4:	|  |         addq.l #8,sp
    f6b6:	|  |         tst.w d0
    f6b8:	|  |     /-- beq.s f6be <builtIn_makeFastArray+0x92>
    f6ba:	|  |     |   moveq #2,d0
    f6bc:	|  +-----|-- bra.s f6d4 <builtIn_makeFastArray+0xa8>
    f6be:	|  |     \-> moveq #1,d0
    f6c0:	|  +-------- bra.s f6d4 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    f6c2:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    f6c4:	   |         pea 16b76 <main_sludge.c.828d7d86+0x3b6>
    f6ca:	   |         jsr 12ed6 <KPrintF>
    f6d0:	   |         addq.l #4,sp
	return BR_ERROR;
    f6d2:	   |         moveq #1,d0
}
    f6d4:	   \-------> addq.l #8,sp
    f6d6:	             rts

0000f6d8 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    f6d8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f6da:	          movea.l 16(sp),a0
    f6de:	          move.l 24(a0),d0
    f6e2:	          move.l d0,-(sp)
    f6e4:	          pea 7 <_start+0x7>
    f6e8:	          move.l sp,d0
    f6ea:	          addq.l #8,d0
    f6ec:	          move.l d0,-(sp)
    f6ee:	          jsr 10e82 <getValueType>
    f6f4:	          lea 12(sp),sp
    f6f8:	          tst.w d0
    f6fa:	      /-- bne.s f700 <builtIn_getCharacterScale+0x28>
    f6fc:	      |   moveq #1,d0
    f6fe:	/-----|-- bra.s f77a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    f700:	|     \-> moveq #24,d0
    f702:	|         add.l 16(sp),d0
    f706:	|         move.l d0,-(sp)
    f708:	|         jsr 11806 <trimStack>
    f70e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f710:	|         move.l (sp),d0
    f712:	|         move.l d0,-(sp)
    f714:	|         jsr 6c1a <findPerson>
    f71a:	|         addq.l #4,sp
    f71c:	|         move.l d0,4(sp)
	if (pers) {
    f720:	|  /----- beq.s f760 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    f722:	|  |      movea.l 4(sp),a0
    f726:	|  |      move.l 20(a0),d0
    f72a:	|  |      move.l #1120403456,-(sp)
    f730:	|  |      move.l d0,-(sp)
    f732:	|  |      jsr 133e0 <__mulsf3>
    f738:	|  |      addq.l #8,sp
    f73a:	|  |      move.l d0,-(sp)
    f73c:	|  |      jsr 132c6 <__fixsfsi>
    f742:	|  |      addq.l #4,sp
    f744:	|  |      move.l d0,d1
    f746:	|  |      moveq #28,d0
    f748:	|  |      add.l 16(sp),d0
    f74c:	|  |      move.l d1,-(sp)
    f74e:	|  |      pea 1 <_start+0x1>
    f752:	|  |      move.l d0,-(sp)
    f754:	|  |      jsr 11774 <setVariable>
    f75a:	|  |      lea 12(sp),sp
    f75e:	|  |  /-- bra.s f778 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f760:	|  \--|-> moveq #28,d0
    f762:	|     |   add.l 16(sp),d0
    f766:	|     |   clr.l -(sp)
    f768:	|     |   pea 1 <_start+0x1>
    f76c:	|     |   move.l d0,-(sp)
    f76e:	|     |   jsr 11774 <setVariable>
    f774:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f778:	|     \-> moveq #2,d0
}
    f77a:	\-------> addq.l #8,sp
    f77c:	          rts

0000f77e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f77e:	move.l 19d2c <gameSettings>,d0
    f784:	move.l d0,d1
    f786:	moveq #28,d0
    f788:	add.l 8(sp),d0
    f78c:	move.l d1,-(sp)
    f78e:	pea 1 <_start+0x1>
    f792:	move.l d0,-(sp)
    f794:	jsr 11774 <setVariable>
    f79a:	lea 12(sp),sp
	return BR_CONTINUE;
    f79e:	moveq #2,d0
}
    f7a0:	rts

0000f7a2 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f7a2:	moveq #24,d0
    f7a4:	add.l 8(sp),d0
    f7a8:	move.l d0,-(sp)
    f7aa:	jsr 11806 <trimStack>
    f7b0:	addq.l #4,sp
	trimStack (&fun -> stack);
    f7b2:	moveq #24,d0
    f7b4:	add.l 8(sp),d0
    f7b8:	move.l d0,-(sp)
    f7ba:	jsr 11806 <trimStack>
    f7c0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f7c2:	moveq #28,d0
    f7c4:	add.l 8(sp),d0
    f7c8:	clr.l -(sp)
    f7ca:	pea 1 <_start+0x1>
    f7ce:	move.l d0,-(sp)
    f7d0:	jsr 11774 <setVariable>
    f7d6:	lea 12(sp),sp

	return BR_CONTINUE;
    f7da:	moveq #2,d0

}
    f7dc:	rts

0000f7de <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f7de:	move.l 18124 <lastFramesPerSecond>,d1
    f7e4:	moveq #28,d0
    f7e6:	add.l 8(sp),d0
    f7ea:	move.l d1,-(sp)
    f7ec:	pea 1 <_start+0x1>
    f7f0:	move.l d0,-(sp)
    f7f2:	jsr 11774 <setVariable>
    f7f8:	lea 12(sp),sp
	return BR_CONTINUE;
    f7fc:	moveq #2,d0
}
    f7fe:	rts

0000f800 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f800:	moveq #2,d0
}
    f802:	rts

0000f804 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f804:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f808:	          movea.l 60(sp),a0
    f80c:	          move.l 24(a0),d0
    f810:	          move.l d0,-(sp)
    f812:	          pea 1 <_start+0x1>
    f816:	          pea 19b3c <thumbHeight>
    f81c:	          jsr 10e82 <getValueType>
    f822:	          lea 12(sp),sp
    f826:	          tst.w d0
    f828:	      /-- bne.s f830 <builtIn_setThumbnailSize+0x2c>
    f82a:	      |   moveq #1,d0
    f82c:	/-----|-- bra.w f8ec <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f830:	|     \-> moveq #24,d0
    f832:	|         add.l 60(sp),d0
    f836:	|         move.l d0,-(sp)
    f838:	|         jsr 11806 <trimStack>
    f83e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f840:	|         movea.l 60(sp),a0
    f844:	|         move.l 24(a0),d0
    f848:	|         move.l d0,-(sp)
    f84a:	|         pea 1 <_start+0x1>
    f84e:	|         pea 19b38 <thumbWidth>
    f854:	|         jsr 10e82 <getValueType>
    f85a:	|         lea 12(sp),sp
    f85e:	|         tst.w d0
    f860:	|     /-- bne.s f868 <builtIn_setThumbnailSize+0x64>
    f862:	|     |   moveq #1,d0
    f864:	+-----|-- bra.w f8ec <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f868:	|     \-> moveq #24,d0
    f86a:	|         add.l 60(sp),d0
    f86e:	|         move.l d0,-(sp)
    f870:	|         jsr 11806 <trimStack>
    f876:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f878:	|         move.l 19b38 <thumbWidth>,d0
    f87e:	|     /-- bmi.s f8ac <builtIn_setThumbnailSize+0xa8>
    f880:	|     |   move.l 19b3c <thumbHeight>,d0
    f886:	|     +-- bmi.s f8ac <builtIn_setThumbnailSize+0xa8>
    f888:	|     |   move.l 19b38 <thumbWidth>,d0
    f88e:	|     |   move.l d0,d1
    f890:	|     |   move.l 19b50 <winWidth>,d0
    f896:	|     |   cmp.l d1,d0
    f898:	|     +-- bcs.s f8ac <builtIn_setThumbnailSize+0xa8>
    f89a:	|     |   move.l 19b3c <thumbHeight>,d0
    f8a0:	|     |   move.l d0,d1
    f8a2:	|     |   move.l 19b54 <winHeight>,d0
    f8a8:	|     |   cmp.l d1,d0
    f8aa:	|  /--|-- bcc.s f8ea <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    f8ac:	|  |  \-> move.l 19b3c <thumbHeight>,d1
    f8b2:	|  |      move.l 19b38 <thumbWidth>,d0
    f8b8:	|  |      move.l d1,-(sp)
    f8ba:	|  |      move.l d0,-(sp)
    f8bc:	|  |      pea 16b9d <main_sludge.c.828d7d86+0x3dd>
    f8c2:	|  |      lea 14(sp),a0
    f8c6:	|  |      move.l a0,-(sp)
    f8c8:	|  |      jsr 1068c <sprintf>
    f8ce:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    f8d2:	|  |      lea 2(sp),a0
    f8d6:	|  |      move.l a0,-(sp)
    f8d8:	|  |      pea 16ba5 <main_sludge.c.828d7d86+0x3e5>
    f8de:	|  |      jsr 12ed6 <KPrintF>
    f8e4:	|  |      addq.l #8,sp
		return BR_ERROR;
    f8e6:	|  |      moveq #1,d0
    f8e8:	+--|----- bra.s f8ec <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    f8ea:	|  \----> moveq #2,d0
}
    f8ec:	\-------> lea 52(sp),sp
    f8f0:	          rts

0000f8f2 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    f8f2:	       lea -12(sp),sp
    f8f6:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8f8:	       movea.l 24(sp),a0
    f8fc:	       move.l 24(a0),d0
    f900:	       move.l d0,-(sp)
    f902:	       pea 1 <_start+0x1>
    f906:	       lea 12(sp),a0
    f90a:	       move.l a0,-(sp)
    f90c:	       jsr 10e82 <getValueType>
    f912:	       lea 12(sp),sp
    f916:	       tst.w d0
    f918:	   /-- bne.s f920 <builtIn_hasFlag+0x2e>
    f91a:	   |   moveq #1,d0
    f91c:	/--|-- bra.w f9b0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f920:	|  \-> moveq #24,d0
    f922:	|      add.l 24(sp),d0
    f926:	|      move.l d0,-(sp)
    f928:	|      jsr 11806 <trimStack>
    f92e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f930:	|      movea.l 24(sp),a0
    f934:	|      move.l 24(a0),d0
    f938:	|      move.l d0,-(sp)
    f93a:	|      pea 7 <_start+0x7>
    f93e:	|      moveq #16,d0
    f940:	|      add.l sp,d0
    f942:	|      move.l d0,-(sp)
    f944:	|      jsr 10e82 <getValueType>
    f94a:	|      lea 12(sp),sp
    f94e:	|      tst.w d0
    f950:	|  /-- bne.s f956 <builtIn_hasFlag+0x64>
    f952:	|  |   moveq #1,d0
    f954:	+--|-- bra.s f9b0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f956:	|  \-> moveq #24,d0
    f958:	|      add.l 24(sp),d0
    f95c:	|      move.l d0,-(sp)
    f95e:	|      jsr 11806 <trimStack>
    f964:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    f966:	|      move.l 8(sp),d0
    f96a:	|      move.l d0,-(sp)
    f96c:	|      jsr 9cd4 <findObjectType>
    f972:	|      addq.l #4,sp
    f974:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    f978:	|  /-- bne.s f97e <builtIn_hasFlag+0x8c>
    f97a:	|  |   moveq #1,d0
    f97c:	+--|-- bra.s f9b0 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    f97e:	|  \-> movea.l 12(sp),a0
    f982:	|      move.w 36(a0),d0
    f986:	|      moveq #0,d2
    f988:	|      move.w d0,d2
    f98a:	|      move.l 4(sp),d1
    f98e:	|      moveq #1,d0
    f990:	|      lsl.l d1,d0
    f992:	|      move.l d2,d1
    f994:	|      and.l d0,d1
    f996:	|      moveq #28,d0
    f998:	|      add.l 24(sp),d0
    f99c:	|      move.l d1,-(sp)
    f99e:	|      pea 1 <_start+0x1>
    f9a2:	|      move.l d0,-(sp)
    f9a4:	|      jsr 11774 <setVariable>
    f9aa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f9ae:	|      moveq #2,d0
}
    f9b0:	\----> move.l (sp)+,d2
    f9b2:	       lea 12(sp),sp
    f9b6:	       rts

0000f9b8 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    f9b8:	       jsr 9cc2 <snapshot>
    f9be:	       tst.w d0
    f9c0:	/----- beq.s f9c6 <builtIn_snapshotGrab+0xe>
    f9c2:	|      moveq #2,d0
    f9c4:	|  /-- bra.s f9c8 <builtIn_snapshotGrab+0x10>
    f9c6:	\--|-> moveq #1,d0
}
    f9c8:	   \-> rts

0000f9ca <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    f9ca:	jsr 9b16 <nosnapshot>
	return BR_CONTINUE;
    f9d0:	moveq #2,d0
}
    f9d2:	rts

0000f9d4 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    f9d4:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    f9d6:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    f9de:	movea.l 12(sp),a0
    f9e2:	move.l 24(a0),d0
    f9e6:	move.l d0,-(sp)
    f9e8:	jsr 113c2 <getBoolean>
    f9ee:	addq.l #4,sp
    f9f0:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
    f9f6:	moveq #24,d0
    f9f8:	add.l 12(sp),d0
    f9fc:	move.l d0,-(sp)
    f9fe:	jsr 11806 <trimStack>
    fa04:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    fa06:	movea.w 2(sp),a0
    fa0a:	moveq #28,d0
    fa0c:	add.l 12(sp),d0
    fa10:	move.l a0,-(sp)
    fa12:	pea 1 <_start+0x1>
    fa16:	move.l d0,-(sp)
    fa18:	jsr 11774 <setVariable>
    fa1e:	lea 12(sp),sp
	return BR_CONTINUE;
    fa22:	moveq #2,d0
}
    fa24:	addq.l #4,sp
    fa26:	rts

0000fa28 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fa28:	moveq #24,d0
    fa2a:	add.l 8(sp),d0
    fa2e:	move.l d0,-(sp)
    fa30:	jsr 11806 <trimStack>
    fa36:	addq.l #4,sp
	trimStack (&fun -> stack);
    fa38:	moveq #24,d0
    fa3a:	add.l 8(sp),d0
    fa3e:	move.l d0,-(sp)
    fa40:	jsr 11806 <trimStack>
    fa46:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    fa48:	moveq #28,d0
    fa4a:	add.l 8(sp),d0
    fa4e:	clr.l -(sp)
    fa50:	pea 1 <_start+0x1>
    fa54:	move.l d0,-(sp)
    fa56:	jsr 11774 <setVariable>
    fa5c:	lea 12(sp),sp

	return BR_CONTINUE;
    fa60:	moveq #2,d0
}
    fa62:	rts

0000fa64 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    fa64:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    fa66:	movea.l 12(sp),a0
    fa6a:	move.l 24(a0),d0
    fa6e:	move.l d0,-(sp)
    fa70:	jsr 11458 <getTextFromAnyVar>
    fa76:	addq.l #4,sp
    fa78:	move.l d0,(sp)
	trimStack (&fun -> stack);
    fa7a:	moveq #24,d0
    fa7c:	add.l 12(sp),d0
    fa80:	move.l d0,-(sp)
    fa82:	jsr 11806 <trimStack>
    fa88:	addq.l #4,sp
	KPrintF (mess);
    fa8a:	move.l (sp),-(sp)
    fa8c:	jsr 12ed6 <KPrintF>
    fa92:	addq.l #4,sp
	return BR_ERROR;
    fa94:	moveq #1,d0
}
    fa96:	addq.l #4,sp
    fa98:	rts

0000fa9a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fa9a:	moveq #24,d0
    fa9c:	add.l 8(sp),d0
    faa0:	move.l d0,-(sp)
    faa2:	jsr 11806 <trimStack>
    faa8:	addq.l #4,sp
	trimStack (&fun -> stack);
    faaa:	moveq #24,d0
    faac:	add.l 8(sp),d0
    fab0:	move.l d0,-(sp)
    fab2:	jsr 11806 <trimStack>
    fab8:	addq.l #4,sp
	trimStack (&fun -> stack);
    faba:	moveq #24,d0
    fabc:	add.l 8(sp),d0
    fac0:	move.l d0,-(sp)
    fac2:	jsr 11806 <trimStack>
    fac8:	addq.l #4,sp
	trimStack (&fun -> stack);
    faca:	moveq #24,d0
    facc:	add.l 8(sp),d0
    fad0:	move.l d0,-(sp)
    fad2:	jsr 11806 <trimStack>
    fad8:	addq.l #4,sp

	return BR_CONTINUE;
    fada:	moveq #2,d0
}
    fadc:	rts

0000fade <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fade:	moveq #24,d0
    fae0:	add.l 8(sp),d0
    fae4:	move.l d0,-(sp)
    fae6:	jsr 11806 <trimStack>
    faec:	addq.l #4,sp
	trimStack (&fun -> stack);
    faee:	moveq #24,d0
    faf0:	add.l 8(sp),d0
    faf4:	move.l d0,-(sp)
    faf6:	jsr 11806 <trimStack>
    fafc:	addq.l #4,sp
	trimStack (&fun -> stack);
    fafe:	moveq #24,d0
    fb00:	add.l 8(sp),d0
    fb04:	move.l d0,-(sp)
    fb06:	jsr 11806 <trimStack>
    fb0c:	addq.l #4,sp

	return BR_CONTINUE;
    fb0e:	moveq #2,d0

}
    fb10:	rts

0000fb12 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    fb12:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    fb14:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fb1a:	sne d0
    fb1c:	neg.b d0
    fb1e:	moveq #0,d1
    fb20:	move.b d0,d1
    fb22:	moveq #28,d0
    fb24:	add.l 12(sp),d0
    fb28:	move.l d1,-(sp)
    fb2a:	pea 1 <_start+0x1>
    fb2e:	move.l d0,-(sp)
    fb30:	jsr 11774 <setVariable>
    fb36:	lea 12(sp),sp
	return BR_CONTINUE;
    fb3a:	moveq #2,d0
}
    fb3c:	addq.l #4,sp
    fb3e:	rts

0000fb40 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    fb40:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    fb42:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    fb48:	pea 16bbc <main_sludge.c.828d7d86+0x3fc>
    fb4e:	jsr 12ed6 <KPrintF>
    fb54:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fb56:	tst.w 2(sp)
    fb5a:	sne d0
    fb5c:	neg.b d0
    fb5e:	moveq #0,d1
    fb60:	move.b d0,d1
    fb62:	moveq #28,d0
    fb64:	add.l 12(sp),d0
    fb68:	move.l d1,-(sp)
    fb6a:	pea 1 <_start+0x1>
    fb6e:	move.l d0,-(sp)
    fb70:	jsr 11774 <setVariable>
    fb76:	lea 12(sp),sp
	return BR_CONTINUE;
    fb7a:	moveq #2,d0
}
    fb7c:	addq.l #4,sp
    fb7e:	rts

0000fb80 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    fb80:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    fb84:	             move.l 104(sp),d0
    fb88:	             cmpi.l #166,d0
    fb8e:	/----------- bhi.w fc70 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    fb92:	|            move.l 104(sp),d0
    fb96:	|            add.l d0,d0
    fb98:	|            movea.l d0,a1
    fb9a:	|            adda.l d0,a1
    fb9c:	|            lea 1814e <paramNum>,a0
    fba2:	|            move.l (0,a1,a0.l),d0
    fba6:	|            moveq #-1,d1
    fba8:	|            cmp.l d0,d1
    fbaa:	|  /-------- beq.w fc38 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    fbae:	|  |         move.l 104(sp),d0
    fbb2:	|  |         add.l d0,d0
    fbb4:	|  |         movea.l d0,a1
    fbb6:	|  |         adda.l d0,a1
    fbb8:	|  |         lea 1814e <paramNum>,a0
    fbbe:	|  |         move.l (0,a1,a0.l),d0
    fbc2:	|  |         cmp.l 108(sp),d0
    fbc6:	|  +-------- beq.s fc38 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    fbc8:	|  |         move.l 104(sp),d0
    fbcc:	|  |         add.l d0,d0
    fbce:	|  |         movea.l d0,a1
    fbd0:	|  |         adda.l d0,a1
    fbd2:	|  |         lea 1814e <paramNum>,a0
    fbd8:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    fbdc:	|  |         moveq #1,d1
    fbde:	|  |         cmp.l d0,d1
    fbe0:	|  |  /----- bne.s fbea <callBuiltIn+0x6a>
    fbe2:	|  |  |      move.l #82340,d0
    fbe8:	|  |  |  /-- bra.s fbf0 <callBuiltIn+0x70>
    fbea:	|  |  \--|-> move.l #93170,d0
    fbf0:	|  |     \-> move.l 104(sp),d1
    fbf4:	|  |         add.l d1,d1
    fbf6:	|  |         movea.l d1,a1
    fbf8:	|  |         adda.l d1,a1
    fbfa:	|  |         lea 1814e <paramNum>,a0
    fc00:	|  |         move.l (0,a1,a0.l),d1
    fc04:	|  |         move.l d0,-(sp)
    fc06:	|  |         move.l d1,-(sp)
    fc08:	|  |         pea 16bf4 <main_sludge.c.828d7d86+0x434>
    fc0e:	|  |         lea 12(sp),a0
    fc12:	|  |         move.l a0,-(sp)
    fc14:	|  |         jsr 1068c <sprintf>
    fc1a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    fc1e:	|  |         movea.l sp,a0
    fc20:	|  |         move.l a0,-(sp)
    fc22:	|  |         jsr b8 <copyString>
    fc28:	|  |         addq.l #4,sp
    fc2a:	|  |         move.l d0,-(sp)
    fc2c:	|  |         jsr 12ed6 <KPrintF>
    fc32:	|  |         addq.l #4,sp
				return BR_ERROR;
    fc34:	|  |         moveq #1,d0
    fc36:	|  |     /-- bra.s fc80 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    fc38:	|  \-----|-> move.l 104(sp),d0
    fc3c:	|        |   add.l d0,d0
    fc3e:	|        |   movea.l d0,a1
    fc40:	|        |   adda.l d0,a1
    fc42:	|        |   lea 183ea <builtInFunctionArray>,a0
    fc48:	|        |   move.l (0,a1,a0.l),d0
    fc4c:	+--------|-- beq.s fc70 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    fc4e:	|        |   move.l 104(sp),d0
    fc52:	|        |   add.l d0,d0
    fc54:	|        |   movea.l d0,a1
    fc56:	|        |   adda.l d0,a1
    fc58:	|        |   lea 183ea <builtInFunctionArray>,a0
    fc5e:	|        |   movea.l (0,a1,a0.l),a0
    fc62:	|        |   move.l 112(sp),-(sp)
    fc66:	|        |   move.l 112(sp),-(sp)
    fc6a:	|        |   jsr (a0)
    fc6c:	|        |   addq.l #8,sp
    fc6e:	|        +-- bra.s fc80 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    fc70:	\--------|-> pea 16c1f <main_sludge.c.828d7d86+0x45f>
    fc76:	         |   jsr 12ed6 <KPrintF>
    fc7c:	         |   addq.l #4,sp
	return BR_ERROR;
    fc7e:	         |   moveq #1,d0
}
    fc80:	         \-> lea 100(sp),sp
    fc84:	             rts

0000fc86 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    fc86:	          subq.l #8,sp
	int indexNum = -1;
    fc88:	          moveq #-1,d0
    fc8a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fc8e:	          clr.l (sp)
    fc90:	   /----- bra.s fcb6 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    fc92:	/--|----> move.l 19d24 <languageTable>,d1
    fc98:	|  |      move.l (sp),d0
    fc9a:	|  |      add.l d0,d0
    fc9c:	|  |      add.l d0,d0
    fc9e:	|  |      movea.l d1,a0
    fca0:	|  |      adda.l d0,a0
    fca2:	|  |      move.l (a0),d0
    fca4:	|  |      move.l d0,d1
    fca6:	|  |      move.l 19d2c <gameSettings>,d0
    fcac:	|  |      cmp.l d1,d0
    fcae:	|  |  /-- bne.s fcb4 <getLanguageForFileB+0x2e>
    fcb0:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fcb4:	|  |  \-> addq.l #1,(sp)
    fcb6:	|  \----> move.l 19d30 <gameSettings+0x4>,d0
    fcbc:	|         cmp.l (sp),d0
    fcbe:	\-------- bcc.s fc92 <getLanguageForFileB+0xc>
	}

	return indexNum;
    fcc0:	          move.l 4(sp),d0
}
    fcc4:	          addq.l #8,sp
    fcc6:	          rts

0000fcc8 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    fcc8:	          lea -20(sp),sp
    fccc:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    fcce:	          move.l 28(sp),-(sp)
    fcd2:	          jsr 1036e <strlen>
    fcd8:	          addq.l #4,sp
    fcda:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    fcde:	          moveq #4,d0
    fce0:	          cmp.l 12(sp),d0
    fce4:	      /-- bge.s fd08 <getPrefsFilename+0x40>
    fce6:	      |   move.l 12(sp),d0
    fcea:	      |   subq.l #4,d0
    fcec:	      |   movea.l 28(sp),a0
    fcf0:	      |   adda.l d0,a0
    fcf2:	      |   move.b (a0),d0
    fcf4:	      |   cmpi.b #46,d0
    fcf8:	      +-- bne.s fd08 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    fcfa:	      |   move.l 12(sp),d0
    fcfe:	      |   subq.l #4,d0
    fd00:	      |   movea.l 28(sp),a0
    fd04:	      |   adda.l d0,a0
    fd06:	      |   clr.b (a0)
	}

	char * f = filename;
    fd08:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    fd0e:	          clr.l 20(sp)
    fd12:	   /----- bra.s fd3a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    fd14:	/--|----> move.l 20(sp),d0
    fd18:	|  |      movea.l 28(sp),a0
    fd1c:	|  |      adda.l d0,a0
    fd1e:	|  |      move.b (a0),d0
    fd20:	|  |      cmpi.b #47,d0
    fd24:	|  |  /-- bne.s fd36 <getPrefsFilename+0x6e>
    fd26:	|  |  |   move.l 20(sp),d0
    fd2a:	|  |  |   addq.l #1,d0
    fd2c:	|  |  |   move.l 28(sp),d1
    fd30:	|  |  |   add.l d0,d1
    fd32:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    fd36:	|  |  \-> addq.l #1,20(sp)
    fd3a:	|  \----> move.l 20(sp),d0
    fd3e:	|         cmp.l 12(sp),d0
    fd42:	\-------- blt.s fd14 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    fd44:	          pea 16c4a <main_sludge.c.828d7d86+0x48a>
    fd4a:	          move.l 20(sp),-(sp)
    fd4e:	          jsr 103ae <joinStrings>
    fd54:	          addq.l #8,sp
    fd56:	          move.l d0,8(sp)

	FreeVec(filename);
    fd5a:	          move.l 28(sp),4(sp)
    fd60:	          move.l 19c50 <SysBase>,d0
    fd66:	          movea.l d0,a6
    fd68:	          movea.l 4(sp),a1
    fd6c:	          jsr -690(a6)
	filename = NULL;
    fd70:	          clr.l 28(sp)
	return joined;
    fd74:	          move.l 8(sp),d0
}
    fd78:	          movea.l (sp)+,a6
    fd7a:	          lea 20(sp),sp
    fd7e:	          rts

0000fd80 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    fd80:	             lea -28(sp),sp
    fd84:	             move.l a6,-(sp)
    fd86:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fd88:	             move.l 19d30 <gameSettings+0x4>,d0
    fd8e:	             move.l d0,d1
    fd90:	             addq.l #1,d1
    fd92:	             move.l d1,28(sp)
    fd96:	             clr.l 24(sp)
    fd9a:	             move.l 19c50 <SysBase>,d0
    fda0:	             movea.l d0,a6
    fda2:	             move.l 28(sp),d0
    fda6:	             move.l 24(sp),d1
    fdaa:	             jsr -684(a6)
    fdae:	             move.l d0,20(sp)
    fdb2:	             move.l 20(sp),d0
    fdb6:	             move.l d0,19d24 <languageTable>
    if( languageTable == 0) {
    fdbc:	             move.l 19d24 <languageTable>,d0
    fdc2:	         /-- bne.s fdd2 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    fdc4:	         |   pea 16c4f <main_sludge.c.828d7d86+0x48f>
    fdca:	         |   jsr 12ed6 <KPrintF>
    fdd0:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fdd2:	         \-> move.l 19d30 <gameSettings+0x4>,d0
    fdd8:	             move.l d0,d1
    fdda:	             addq.l #1,d1
    fddc:	             move.l d1,16(sp)
    fde0:	             clr.l 12(sp)
    fde4:	             move.l 19c50 <SysBase>,d0
    fdea:	             movea.l d0,a6
    fdec:	             move.l 16(sp),d0
    fdf0:	             move.l 12(sp),d1
    fdf4:	             jsr -684(a6)
    fdf8:	             move.l d0,8(sp)
    fdfc:	             move.l 8(sp),d0
    fe00:	             move.l d0,19d28 <languageName>
	if( languageName == 0) {
    fe06:	             move.l 19d28 <languageName>,d0
    fe0c:	         /-- bne.s fe1c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    fe0e:	         |   pea 16c85 <main_sludge.c.828d7d86+0x4c5>
    fe14:	         |   jsr 12ed6 <KPrintF>
    fe1a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fe1c:	         \-> clr.l 32(sp)
    fe20:	   /-------- bra.s fe98 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    fe22:	/--|-------> tst.l 32(sp)
    fe26:	|  |  /----- beq.s fe36 <makeLanguageTable+0xb6>
    fe28:	|  |  |      move.l 40(sp),-(sp)
    fe2c:	|  |  |      jsr 6bc <get2bytes>
    fe32:	|  |  |      addq.l #4,sp
    fe34:	|  |  |  /-- bra.s fe38 <makeLanguageTable+0xb8>
    fe36:	|  |  \--|-> moveq #0,d0
    fe38:	|  |     \-> movea.l 19d24 <languageTable>,a0
    fe3e:	|  |         move.l 32(sp),d1
    fe42:	|  |         add.l d1,d1
    fe44:	|  |         add.l d1,d1
    fe46:	|  |         adda.l d1,a0
    fe48:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    fe4a:	|  |         move.l 19d28 <languageName>,d1
    fe50:	|  |         move.l 32(sp),d0
    fe54:	|  |         add.l d0,d0
    fe56:	|  |         add.l d0,d0
    fe58:	|  |         movea.l d1,a0
    fe5a:	|  |         adda.l d0,a0
    fe5c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    fe5e:	|  |         move.l 19bfe <gameVersion>,d0
    fe64:	|  |         cmpi.l #511,d0
    fe6a:	|  |     /-- ble.s fe94 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    fe6c:	|  |     |   move.l 19d30 <gameSettings+0x4>,d0
    fe72:	|  |     +-- beq.s fe94 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    fe74:	|  |     |   move.l 19d28 <languageName>,d1
    fe7a:	|  |     |   move.l 32(sp),d0
    fe7e:	|  |     |   add.l d0,d0
    fe80:	|  |     |   add.l d0,d0
    fe82:	|  |     |   movea.l d1,a2
    fe84:	|  |     |   adda.l d0,a2
    fe86:	|  |     |   move.l 40(sp),-(sp)
    fe8a:	|  |     |   jsr b02 <readString>
    fe90:	|  |     |   addq.l #4,sp
    fe92:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fe94:	|  |     \-> addq.l #1,32(sp)
    fe98:	|  \-------> move.l 19d30 <gameSettings+0x4>,d0
    fe9e:	|            cmp.l 32(sp),d0
    fea2:	\----------- bcc.w fe22 <makeLanguageTable+0xa2>
		}
	}
}
    fea6:	             nop
    fea8:	             nop
    feaa:	             movea.l (sp)+,a2
    feac:	             movea.l (sp)+,a6
    feae:	             lea 28(sp),sp
    feb2:	             rts

0000feb4 <readIniFile>:

void readIniFile (char * filename) {
    feb4:	                      lea -564(sp),sp
    feb8:	                      move.l a6,-(sp)
    feba:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    febc:	                      move.l 576(sp),-(sp)
    fec0:	                      jsr b8 <copyString>
    fec6:	                      addq.l #4,sp
    fec8:	                      move.l d0,-(sp)
    feca:	                      jsr fcc8 <getPrefsFilename>
    fed0:	                      addq.l #4,sp
    fed2:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    fed6:	                      move.l 562(sp),558(sp)
    fedc:	                      move.l #1005,554(sp)
    fee4:	                      move.l 19c58 <DOSBase>,d0
    feea:	                      movea.l d0,a6
    feec:	                      move.l 558(sp),d1
    fef0:	                      move.l 554(sp),d2
    fef4:	                      jsr -30(a6)
    fef8:	                      move.l d0,550(sp)
    fefc:	                      move.l 550(sp),d0
    ff00:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    ff04:	                      clr.l 19d2c <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    ff0a:	                      move.w #1,19d34 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    ff12:	                      clr.l 19d36 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    ff18:	                      moveq #1,d0
    ff1a:	                      move.l d0,19d3a <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    ff20:	                      clr.w 19d3e <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    ff26:	                      clr.w 19d40 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    ff2c:	                      clr.w 19d42 <gameSettings+0x16>

	FreeVec(langName);
    ff32:	                      move.l 562(sp),542(sp)
    ff38:	                      move.l 19c50 <SysBase>,d0
    ff3e:	                      movea.l d0,a6
    ff40:	                      movea.l 542(sp),a1
    ff44:	                      jsr -690(a6)
	langName = NULL;
    ff48:	                      clr.l 562(sp)

	if (fp) {
    ff4c:	                      tst.l 546(sp)
    ff50:	/-------------------- beq.w 1022e <readIniFile+0x37a>
		char lineSoFar[257] = "";
    ff54:	|                     move.l sp,d0
    ff56:	|                     addi.l #265,d0
    ff5c:	|                     move.l #257,d1
    ff62:	|                     move.l d1,-(sp)
    ff64:	|                     clr.l -(sp)
    ff66:	|                     move.l d0,-(sp)
    ff68:	|                     jsr 12e5a <memset>
    ff6e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    ff72:	|                     move.l sp,d0
    ff74:	|                     addq.l #8,d0
    ff76:	|                     move.l #257,d1
    ff7c:	|                     move.l d1,-(sp)
    ff7e:	|                     clr.l -(sp)
    ff80:	|                     move.l d0,-(sp)
    ff82:	|                     jsr 12e5a <memset>
    ff88:	|                     lea 12(sp),sp
		unsigned char here = 0;
    ff8c:	|                     clr.b 571(sp)
		char readChar = ' ';
    ff90:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    ff96:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    ff9c:	|                     clr.w 566(sp)
		LONG tmp = 0;
    ffa0:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    ffa4:	|  /----------------> move.l 546(sp),534(sp)
    ffaa:	|  |                  move.l 19c58 <DOSBase>,d0
    ffb0:	|  |                  movea.l d0,a6
    ffb2:	|  |                  move.l 534(sp),d1
    ffb6:	|  |                  jsr -306(a6)
    ffba:	|  |                  move.l d0,530(sp)
    ffbe:	|  |                  move.l 530(sp),d0
    ffc2:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    ffc6:	|  |                  moveq #-1,d1
    ffc8:	|  |                  cmp.l 538(sp),d1
    ffcc:	|  |           /----- bne.s ffda <readIniFile+0x126>
				readChar = '\n';
    ffce:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    ffd4:	|  |           |      clr.w 568(sp)
    ffd8:	|  |           |  /-- bra.s ffe0 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    ffda:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    ffe0:	|  |              \-> move.b 570(sp),d0
    ffe4:	|  |                  ext.w d0
    ffe6:	|  |                  movea.w d0,a0
    ffe8:	|  |                  moveq #61,d0
    ffea:	|  |                  cmp.l a0,d0
    ffec:	|  |     /----------- beq.w 10196 <readIniFile+0x2e2>
    fff0:	|  |     |            moveq #61,d1
    fff2:	|  |     |            cmp.l a0,d1
    fff4:	|  |  /--|----------- blt.w 101a2 <readIniFile+0x2ee>
    fff8:	|  |  |  |            moveq #10,d0
    fffa:	|  |  |  |            cmp.l a0,d0
    fffc:	|  |  |  |        /-- beq.s 10006 <readIniFile+0x152>
    fffe:	|  |  |  |        |   moveq #13,d1
   10000:	|  |  |  |        |   cmp.l a0,d1
   10002:	|  |  +--|--------|-- bne.w 101a2 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10006:	|  |  |  |        \-> tst.w 566(sp)
   1000a:	|  |  |  |     /----- beq.w 10184 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1000e:	|  |  |  |     |      pea 16cb9 <main_sludge.c.828d7d86+0x4f9>
   10014:	|  |  |  |     |      move.l sp,d0
   10016:	|  |  |  |     |      addi.l #269,d0
   1001c:	|  |  |  |     |      move.l d0,-(sp)
   1001e:	|  |  |  |     |      jsr 1032e <strcmp>
   10024:	|  |  |  |     |      addq.l #8,sp
   10026:	|  |  |  |     |      tst.l d0
   10028:	|  |  |  |     |  /-- bne.s 10042 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1002a:	|  |  |  |     |  |   move.l sp,d0
   1002c:	|  |  |  |     |  |   addq.l #8,d0
   1002e:	|  |  |  |     |  |   move.l d0,-(sp)
   10030:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   10036:	|  |  |  |     |  |   addq.l #4,sp
   10038:	|  |  |  |     |  |   move.l d0,19d2c <gameSettings>
   1003e:	|  |  |  |     +--|-- bra.w 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   10042:	|  |  |  |     |  \-> pea 16cc2 <main_sludge.c.828d7d86+0x502>
   10048:	|  |  |  |     |      move.l sp,d0
   1004a:	|  |  |  |     |      addi.l #269,d0
   10050:	|  |  |  |     |      move.l d0,-(sp)
   10052:	|  |  |  |     |      jsr 1032e <strcmp>
   10058:	|  |  |  |     |      addq.l #8,sp
   1005a:	|  |  |  |     |      tst.l d0
   1005c:	|  |  |  |     |  /-- bne.s 10082 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1005e:	|  |  |  |     |  |   move.l sp,d0
   10060:	|  |  |  |     |  |   addq.l #8,d0
   10062:	|  |  |  |     |  |   move.l d0,-(sp)
   10064:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   1006a:	|  |  |  |     |  |   addq.l #4,sp
   1006c:	|  |  |  |     |  |   tst.l d0
   1006e:	|  |  |  |     |  |   seq d0
   10070:	|  |  |  |     |  |   neg.b d0
   10072:	|  |  |  |     |  |   move.b d0,d0
   10074:	|  |  |  |     |  |   andi.w #255,d0
   10078:	|  |  |  |     |  |   move.w d0,19d34 <gameSettings+0x8>
   1007e:	|  |  |  |     +--|-- bra.w 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   10082:	|  |  |  |     |  \-> pea 16cc9 <main_sludge.c.828d7d86+0x509>
   10088:	|  |  |  |     |      move.l sp,d0
   1008a:	|  |  |  |     |      addi.l #269,d0
   10090:	|  |  |  |     |      move.l d0,-(sp)
   10092:	|  |  |  |     |      jsr 1032e <strcmp>
   10098:	|  |  |  |     |      addq.l #8,sp
   1009a:	|  |  |  |     |      tst.l d0
   1009c:	|  |  |  |     |  /-- bne.s 100b6 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1009e:	|  |  |  |     |  |   move.l sp,d0
   100a0:	|  |  |  |     |  |   addq.l #8,d0
   100a2:	|  |  |  |     |  |   move.l d0,-(sp)
   100a4:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   100aa:	|  |  |  |     |  |   addq.l #4,sp
   100ac:	|  |  |  |     |  |   move.l d0,19d36 <gameSettings+0xa>
   100b2:	|  |  |  |     +--|-- bra.w 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   100b6:	|  |  |  |     |  \-> pea 16cd1 <main_sludge.c.828d7d86+0x511>
   100bc:	|  |  |  |     |      move.l sp,d0
   100be:	|  |  |  |     |      addi.l #269,d0
   100c4:	|  |  |  |     |      move.l d0,-(sp)
   100c6:	|  |  |  |     |      jsr 1032e <strcmp>
   100cc:	|  |  |  |     |      addq.l #8,sp
   100ce:	|  |  |  |     |      tst.l d0
   100d0:	|  |  |  |     |  /-- bne.s 100ea <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   100d2:	|  |  |  |     |  |   move.l sp,d0
   100d4:	|  |  |  |     |  |   addq.l #8,d0
   100d6:	|  |  |  |     |  |   move.l d0,-(sp)
   100d8:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   100de:	|  |  |  |     |  |   addq.l #4,sp
   100e0:	|  |  |  |     |  |   move.l d0,19d3a <gameSettings+0xe>
   100e6:	|  |  |  |     +--|-- bra.w 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   100ea:	|  |  |  |     |  \-> pea 16cdb <main_sludge.c.828d7d86+0x51b>
   100f0:	|  |  |  |     |      move.l sp,d0
   100f2:	|  |  |  |     |      addi.l #269,d0
   100f8:	|  |  |  |     |      move.l d0,-(sp)
   100fa:	|  |  |  |     |      jsr 1032e <strcmp>
   10100:	|  |  |  |     |      addq.l #8,sp
   10102:	|  |  |  |     |      tst.l d0
   10104:	|  |  |  |     |  /-- bne.s 1011e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10106:	|  |  |  |     |  |   move.l sp,d0
   10108:	|  |  |  |     |  |   addq.l #8,d0
   1010a:	|  |  |  |     |  |   move.l d0,-(sp)
   1010c:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   10112:	|  |  |  |     |  |   addq.l #4,sp
   10114:	|  |  |  |     |  |   move.l d0,d0
   10116:	|  |  |  |     |  |   move.w d0,19d3e <gameSettings+0x12>
   1011c:	|  |  |  |     +--|-- bra.s 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1011e:	|  |  |  |     |  \-> pea 16ce7 <main_sludge.c.828d7d86+0x527>
   10124:	|  |  |  |     |      move.l sp,d0
   10126:	|  |  |  |     |      addi.l #269,d0
   1012c:	|  |  |  |     |      move.l d0,-(sp)
   1012e:	|  |  |  |     |      jsr 1032e <strcmp>
   10134:	|  |  |  |     |      addq.l #8,sp
   10136:	|  |  |  |     |      tst.l d0
   10138:	|  |  |  |     |  /-- bne.s 10152 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1013a:	|  |  |  |     |  |   move.l sp,d0
   1013c:	|  |  |  |     |  |   addq.l #8,d0
   1013e:	|  |  |  |     |  |   move.l d0,-(sp)
   10140:	|  |  |  |     |  |   jsr 1023a <stringToInt>
   10146:	|  |  |  |     |  |   addq.l #4,sp
   10148:	|  |  |  |     |  |   move.l d0,d0
   1014a:	|  |  |  |     |  |   move.w d0,19d40 <gameSettings+0x14>
   10150:	|  |  |  |     +--|-- bra.s 10184 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   10152:	|  |  |  |     |  \-> pea 16cf5 <main_sludge.c.828d7d86+0x535>
   10158:	|  |  |  |     |      move.l sp,d0
   1015a:	|  |  |  |     |      addi.l #269,d0
   10160:	|  |  |  |     |      move.l d0,-(sp)
   10162:	|  |  |  |     |      jsr 1032e <strcmp>
   10168:	|  |  |  |     |      addq.l #8,sp
   1016a:	|  |  |  |     |      tst.l d0
   1016c:	|  |  |  |     +----- bne.s 10184 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   1016e:	|  |  |  |     |      move.l sp,d0
   10170:	|  |  |  |     |      addq.l #8,d0
   10172:	|  |  |  |     |      move.l d0,-(sp)
   10174:	|  |  |  |     |      jsr 1023a <stringToInt>
   1017a:	|  |  |  |     |      addq.l #4,sp
   1017c:	|  |  |  |     |      move.l d0,d0
   1017e:	|  |  |  |     |      move.w d0,19d42 <gameSettings+0x16>
					}
				}
				here = 0;
   10184:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   10188:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1018c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   10190:	|  |  |  |            clr.b 8(sp)
				break;
   10194:	|  |  |  |  /-------- bra.s 1020c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   10196:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1019c:	|  |  |     |         clr.b 571(sp)
				break;
   101a0:	|  |  |     +-------- bra.s 1020c <readIniFile+0x358>

				default:
				if (doingSecond) {
   101a2:	|  |  \-----|-------> tst.w 566(sp)
   101a6:	|  |        |  /----- beq.s 101da <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   101a8:	|  |        |  |      move.b 571(sp),d0
   101ac:	|  |        |  |      move.b d0,d1
   101ae:	|  |        |  |      addq.b #1,d1
   101b0:	|  |        |  |      move.b d1,571(sp)
   101b4:	|  |        |  |      move.b d0,d0
   101b6:	|  |        |  |      andi.l #255,d0
   101bc:	|  |        |  |      lea 572(sp),a0
   101c0:	|  |        |  |      adda.l d0,a0
   101c2:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   101c8:	|  |        |  |      moveq #0,d0
   101ca:	|  |        |  |      move.b 571(sp),d0
   101ce:	|  |        |  |      lea 572(sp),a0
   101d2:	|  |        |  |      adda.l d0,a0
   101d4:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   101d8:	|  |        |  |  /-- bra.s 1020a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   101da:	|  |        |  \--|-> move.b 571(sp),d0
   101de:	|  |        |     |   move.b d0,d1
   101e0:	|  |        |     |   addq.b #1,d1
   101e2:	|  |        |     |   move.b d1,571(sp)
   101e6:	|  |        |     |   move.b d0,d0
   101e8:	|  |        |     |   andi.l #255,d0
   101ee:	|  |        |     |   lea 572(sp),a0
   101f2:	|  |        |     |   adda.l d0,a0
   101f4:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   101fa:	|  |        |     |   moveq #0,d0
   101fc:	|  |        |     |   move.b 571(sp),d0
   10200:	|  |        |     |   lea 572(sp),a0
   10204:	|  |        |     |   adda.l d0,a0
   10206:	|  |        |     |   clr.b -307(a0)
				break;
   1020a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1020c:	|  |        \-------> tst.w 568(sp)
   10210:	|  \----------------- bne.w ffa4 <readIniFile+0xf0>

		Close(fp);
   10214:	|                     move.l 546(sp),526(sp)
   1021a:	|                     move.l 19c58 <DOSBase>,d0
   10220:	|                     movea.l d0,a6
   10222:	|                     move.l 526(sp),d1
   10226:	|                     jsr -36(a6)
   1022a:	|                     move.l d0,522(sp)
	}
}
   1022e:	\-------------------> nop
   10230:	                      move.l (sp)+,d2
   10232:	                      movea.l (sp)+,a6
   10234:	                      lea 564(sp),sp
   10238:	                      rts

0001023a <stringToInt>:

unsigned int stringToInt (char * s) {
   1023a:	             subq.l #8,sp
	int i = 0;
   1023c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   10240:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   10244:	/----------> movea.l 12(sp),a0
   10248:	|            move.b (a0),d0
   1024a:	|            cmpi.b #47,d0
   1024e:	|        /-- ble.s 10286 <stringToInt+0x4c>
   10250:	|        |   movea.l 12(sp),a0
   10254:	|        |   move.b (a0),d0
   10256:	|        |   cmpi.b #57,d0
   1025a:	|        +-- bgt.s 10286 <stringToInt+0x4c>
			i *= 10;
   1025c:	|        |   move.l 4(sp),d1
   10260:	|        |   move.l d1,d0
   10262:	|        |   add.l d0,d0
   10264:	|        |   add.l d0,d0
   10266:	|        |   add.l d1,d0
   10268:	|        |   add.l d0,d0
   1026a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   1026e:	|        |   movea.l 12(sp),a0
   10272:	|        |   move.b (a0),d0
   10274:	|        |   ext.w d0
   10276:	|        |   movea.w d0,a0
   10278:	|        |   moveq #-48,d0
   1027a:	|        |   add.l a0,d0
   1027c:	|        |   add.l d0,4(sp)
			s ++;
   10280:	|        |   addq.l #1,12(sp)
   10284:	|  /-----|-- bra.s 102be <stringToInt+0x84>
		} else if (*s == '-') {
   10286:	|  |     \-> movea.l 12(sp),a0
   1028a:	|  |         move.b (a0),d0
   1028c:	|  |         cmpi.b #45,d0
   10290:	|  |     /-- bne.s 102aa <stringToInt+0x70>
			negative = ! negative;
   10292:	|  |     |   tst.w 2(sp)
   10296:	|  |     |   seq d0
   10298:	|  |     |   neg.b d0
   1029a:	|  |     |   move.b d0,d0
   1029c:	|  |     |   andi.w #255,d0
   102a0:	|  |     |   move.w d0,2(sp)
			s++;
   102a4:	|  |     |   addq.l #1,12(sp)
   102a8:	+--|-----|-- bra.s 10244 <stringToInt+0xa>
		} else {
			if (negative)
   102aa:	|  |     \-> tst.w 2(sp)
   102ae:	|  |     /-- beq.s 102b8 <stringToInt+0x7e>
				return -i;
   102b0:	|  |     |   move.l 4(sp),d0
   102b4:	|  |     |   neg.l d0
   102b6:	|  |  /--|-- bra.s 102c0 <stringToInt+0x86>
			return i;
   102b8:	|  |  |  \-> move.l 4(sp),d0
   102bc:	|  |  +----- bra.s 102c0 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   102be:	\--\--|----X bra.s 10244 <stringToInt+0xa>
		}
	}
   102c0:	      \----> addq.l #8,sp
   102c2:	             rts

000102c4 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   102c4:	    lea -28(sp),sp
   102c8:	    move.l a6,-(sp)
   102ca:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
   102cc:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   102d0:	    move.l 40(sp),30(sp)
   102d6:	    move.l #1005,26(sp)
   102de:	    move.l 19c58 <DOSBase>,d0
   102e4:	    movea.l d0,a6
   102e6:	    move.l 30(sp),d1
   102ea:	    move.l 26(sp),d2
   102ee:	    jsr -30(a6)
   102f2:	    move.l d0,22(sp)
   102f6:	    move.l 22(sp),d0
   102fa:	    move.l d0,18(sp)
	if (tester) {
   102fe:	/-- beq.s 10320 <fileExists+0x5c>
		retval = 1;
   10300:	|   move.b #1,35(sp)
		Close(tester);
   10306:	|   move.l 18(sp),14(sp)
   1030c:	|   move.l 19c58 <DOSBase>,d0
   10312:	|   movea.l d0,a6
   10314:	|   move.l 14(sp),d1
   10318:	|   jsr -36(a6)
   1031c:	|   move.l d0,10(sp)
	}
	return retval;
   10320:	\-> move.b 35(sp),d0
   10324:	    move.l (sp)+,d2
   10326:	    movea.l (sp)+,a6
   10328:	    lea 28(sp),sp
   1032c:	    rts

0001032e <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1032e:	   /-- bra.s 10338 <strcmp+0xa>
    {
        s1++;
   10330:	/--|-> addq.l #1,4(sp)
        s2++;
   10334:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   10338:	|  \-> movea.l 4(sp),a0
   1033c:	|      move.b (a0),d0
   1033e:	|  /-- beq.s 10350 <strcmp+0x22>
   10340:	|  |   movea.l 4(sp),a0
   10344:	|  |   move.b (a0),d1
   10346:	|  |   movea.l 8(sp),a0
   1034a:	|  |   move.b (a0),d0
   1034c:	|  |   cmp.b d1,d0
   1034e:	\--|-- beq.s 10330 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   10350:	   \-> movea.l 4(sp),a0
   10354:	       move.b (a0),d0
   10356:	       moveq #0,d1
   10358:	       move.b d0,d1
   1035a:	       movea.l 8(sp),a0
   1035e:	       move.b (a0),d0
   10360:	       move.b d0,d0
   10362:	       andi.l #255,d0
   10368:	       sub.l d0,d1
   1036a:	       move.l d1,d0
}
   1036c:	       rts

0001036e <strlen>:

long unsigned int strlen (const char *s) 
{  
   1036e:	       subq.l #4,sp
	long unsigned int i = 0;
   10370:	       clr.l (sp)
	while(s[i]) i++; 
   10372:	   /-- bra.s 10376 <strlen+0x8>
   10374:	/--|-> addq.l #1,(sp)
   10376:	|  \-> movea.l 8(sp),a0
   1037a:	|      adda.l (sp),a0
   1037c:	|      move.b (a0),d0
   1037e:	\----- bne.s 10374 <strlen+0x6>
	return(i);
   10380:	       move.l (sp),d0
}
   10382:	       addq.l #4,sp
   10384:	       rts

00010386 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   10386:	    nop
   10388:	/-> move.l 8(sp),d0
   1038c:	|   move.l d0,d1
   1038e:	|   addq.l #1,d1
   10390:	|   move.l d1,8(sp)
   10394:	|   movea.l 4(sp),a0
   10398:	|   lea 1(a0),a1
   1039c:	|   move.l a1,4(sp)
   103a0:	|   movea.l d0,a1
   103a2:	|   move.b (a1),d0
   103a4:	|   move.b d0,(a0)
   103a6:	|   move.b (a0),d0
   103a8:	\-- bne.s 10388 <strcpy+0x2>
}
   103aa:	    nop
   103ac:	    rts

000103ae <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   103ae:	    lea -20(sp),sp
   103b2:	    move.l a6,-(sp)
   103b4:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   103b6:	    move.l 32(sp),-(sp)
   103ba:	    jsr 1036e <strlen>
   103c0:	    addq.l #4,sp
   103c2:	    move.l d0,d2
   103c4:	    move.l 36(sp),-(sp)
   103c8:	    jsr 1036e <strlen>
   103ce:	    addq.l #4,sp
   103d0:	    add.l d2,d0
   103d2:	    move.l d0,d1
   103d4:	    addq.l #1,d1
   103d6:	    move.l d1,20(sp)
   103da:	    clr.l 16(sp)
   103de:	    move.l 19c50 <SysBase>,d0
   103e4:	    movea.l d0,a6
   103e6:	    move.l 20(sp),d0
   103ea:	    move.l 16(sp),d1
   103ee:	    jsr -684(a6)
   103f2:	    move.l d0,12(sp)
   103f6:	    move.l 12(sp),d0
   103fa:	    move.l d0,8(sp)
	char * t = newString;
   103fe:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   10404:	    nop
   10406:	/-> move.l 32(sp),d0
   1040a:	|   move.l d0,d1
   1040c:	|   addq.l #1,d1
   1040e:	|   move.l d1,32(sp)
   10412:	|   movea.l 24(sp),a0
   10416:	|   lea 1(a0),a1
   1041a:	|   move.l a1,24(sp)
   1041e:	|   movea.l d0,a1
   10420:	|   move.b (a1),d0
   10422:	|   move.b d0,(a0)
   10424:	|   move.b (a0),d0
   10426:	\-- bne.s 10406 <joinStrings+0x58>
	t--;
   10428:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1042c:	    nop
   1042e:	/-> move.l 36(sp),d0
   10432:	|   move.l d0,d1
   10434:	|   addq.l #1,d1
   10436:	|   move.l d1,36(sp)
   1043a:	|   movea.l 24(sp),a0
   1043e:	|   lea 1(a0),a1
   10442:	|   move.l a1,24(sp)
   10446:	|   movea.l d0,a1
   10448:	|   move.b (a1),d0
   1044a:	|   move.b d0,(a0)
   1044c:	|   move.b (a0),d0
   1044e:	\-- bne.s 1042e <joinStrings+0x80>

	return newString;
   10450:	    move.l 8(sp),d0
}
   10454:	    move.l (sp)+,d2
   10456:	    movea.l (sp)+,a6
   10458:	    lea 20(sp),sp
   1045c:	    rts

0001045e <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1045e:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   10462:	       moveq #10,d0
   10464:	       cmp.l 28(sp),d0
   10468:	   /-- bne.s 10486 <itoa+0x28>
   1046a:	   |   tst.l 20(sp)
   1046e:	   +-- bge.s 10486 <itoa+0x28>
        *str++ = '-';
   10470:	   |   move.l 24(sp),d0
   10474:	   |   move.l d0,d1
   10476:	   |   addq.l #1,d1
   10478:	   |   move.l d1,24(sp)
   1047c:	   |   movea.l d0,a0
   1047e:	   |   move.b #45,(a0)
        value *= -1;
   10482:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   10486:	   \-> move.l 24(sp),12(sp)
   1048c:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   10492:	   /-> move.l 20(sp),d0
   10496:	   |   move.l 28(sp),-(sp)
   1049a:	   |   move.l d0,-(sp)
   1049c:	   |   jsr 13934 <__modsi3>
   104a2:	   |   addq.l #8,sp
   104a4:	   |   movea.l d0,a1
   104a6:	   |   move.l 12(sp),d0
   104aa:	   |   move.l d0,d1
   104ac:	   |   addq.l #1,d1
   104ae:	   |   move.l d1,12(sp)
   104b2:	   |   lea 16cff <main_sludge.c.828d7d86+0x53f>,a0
   104b8:	   |   move.b (0,a1,a0.l),d1
   104bc:	   |   movea.l d0,a0
   104be:	   |   move.b d1,(a0)
        value /= base;
   104c0:	   |   move.l 28(sp),-(sp)
   104c4:	   |   move.l 24(sp),-(sp)
   104c8:	   |   jsr 13906 <__divsi3>
   104ce:	   |   addq.l #8,sp
   104d0:	   |   move.l d0,20(sp)
    } while (value);
   104d4:	   \-- bne.s 10492 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   104d6:	       move.l 12(sp),d0
   104da:	       move.l d0,d1
   104dc:	       subq.l #1,d1
   104de:	       move.l d1,12(sp)
   104e2:	       movea.l d0,a0
   104e4:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   104e6:	       move.l 4(sp),8(sp)
   104ec:	   /-- bra.s 10512 <itoa+0xb4>
        char temp = *low;
   104ee:	/--|-> movea.l 8(sp),a0
   104f2:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   104f6:	|  |   movea.l 12(sp),a0
   104fa:	|  |   move.b (a0),d0
   104fc:	|  |   movea.l 8(sp),a0
   10500:	|  |   move.b d0,(a0)
        *ptr = temp;
   10502:	|  |   movea.l 12(sp),a0
   10506:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   1050a:	|  |   addq.l #1,8(sp)
   1050e:	|  |   subq.l #1,12(sp)
   10512:	|  \-> move.l 8(sp),d0
   10516:	|      cmp.l 12(sp),d0
   1051a:	\----- bcs.s 104ee <itoa+0x90>
    }
    return rc;
   1051c:	       move.l 4(sp),d0
}
   10520:	       lea 16(sp),sp
   10524:	       rts

00010526 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   10526:	                            lea -40(sp),sp
   1052a:	                            move.l d2,-(sp)
    char* s = str;
   1052c:	                            move.l 48(sp),40(sp)
    const char* p = format;
   10532:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   10538:	   /----------------------- bra.w 1066c <vsprintf2+0x146>
        if (*p == '%') {
   1053c:	/--|----------------------> movea.l 36(sp),a0
   10540:	|  |                        move.b (a0),d0
   10542:	|  |                        cmpi.b #37,d0
   10546:	|  |  /-------------------- bne.w 10652 <vsprintf2+0x12c>
            switch (*++p) {
   1054a:	|  |  |                     addq.l #1,36(sp)
   1054e:	|  |  |                     movea.l 36(sp),a0
   10552:	|  |  |                     move.b (a0),d0
   10554:	|  |  |                     ext.w d0
   10556:	|  |  |                     movea.w d0,a0
   10558:	|  |  |                     moveq #115,d0
   1055a:	|  |  |                     cmp.l a0,d0
   1055c:	|  |  |           /-------- beq.s 105d4 <vsprintf2+0xae>
   1055e:	|  |  |           |         moveq #115,d1
   10560:	|  |  |           |         cmp.l a0,d1
   10562:	|  |  |  /--------|-------- blt.w 1063a <vsprintf2+0x114>
   10566:	|  |  |  |        |         moveq #99,d2
   10568:	|  |  |  |        |         cmp.l a0,d2
   1056a:	|  |  |  |  /-----|-------- beq.w 10612 <vsprintf2+0xec>
   1056e:	|  |  |  |  |     |         moveq #100,d0
   10570:	|  |  |  |  |     |         cmp.l a0,d0
   10572:	|  |  |  +--|-----|-------- bne.w 1063a <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   10576:	|  |  |  |  |     |         addq.l #4,56(sp)
   1057a:	|  |  |  |  |     |         movea.l 56(sp),a0
   1057e:	|  |  |  |  |     |         move.l (a0),d0
   10580:	|  |  |  |  |     |         move.l d0,d1
   10582:	|  |  |  |  |     |         subq.l #1,d1
   10584:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   10588:	|  |  |  |  |     |         pea a <_start+0xa>
   1058c:	|  |  |  |  |     |         lea 8(sp),a0
   10590:	|  |  |  |  |     |         move.l a0,-(sp)
   10592:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   10596:	|  |  |  |  |     |         jsr 1045e <itoa>
   1059c:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   105a0:	|  |  |  |  |     |         lea 44(sp),a0
   105a4:	|  |  |  |  |     |         lea -40(a0),a0
   105a8:	|  |  |  |  |     |         move.l a0,28(sp)
   105ac:	|  |  |  |  |     |     /-- bra.s 105c8 <vsprintf2+0xa2>
                        *s++ = *b;
   105ae:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   105b2:	|  |  |  |  |     |  |  |   move.l d0,d1
   105b4:	|  |  |  |  |     |  |  |   addq.l #1,d1
   105b6:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   105ba:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   105be:	|  |  |  |  |     |  |  |   move.b (a0),d1
   105c0:	|  |  |  |  |     |  |  |   movea.l d0,a0
   105c2:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   105c4:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   105c8:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   105cc:	|  |  |  |  |     |  |      move.b (a0),d0
   105ce:	|  |  |  |  |     |  \----- bne.s 105ae <vsprintf2+0x88>
                    }
                    break;
   105d0:	|  |  |  |  |  /--|-------- bra.w 10668 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   105d4:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   105d8:	|  |  |  |  |  |            movea.l 56(sp),a0
   105dc:	|  |  |  |  |  |            move.l (a0),d0
   105de:	|  |  |  |  |  |            move.l d0,d1
   105e0:	|  |  |  |  |  |            subq.l #1,d1
   105e2:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   105e6:	|  |  |  |  |  |        /-- bra.s 10608 <vsprintf2+0xe2>
                        *s++ = *sval++;
   105e8:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   105ec:	|  |  |  |  |  |     |  |   move.l d1,d2
   105ee:	|  |  |  |  |  |     |  |   addq.l #1,d2
   105f0:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   105f4:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   105f8:	|  |  |  |  |  |     |  |   move.l d0,d2
   105fa:	|  |  |  |  |  |     |  |   addq.l #1,d2
   105fc:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   10600:	|  |  |  |  |  |     |  |   movea.l d1,a0
   10602:	|  |  |  |  |  |     |  |   move.b (a0),d1
   10604:	|  |  |  |  |  |     |  |   movea.l d0,a0
   10606:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   10608:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1060c:	|  |  |  |  |  |     |      move.b (a0),d0
   1060e:	|  |  |  |  |  |     \----- bne.s 105e8 <vsprintf2+0xc2>
                    }
                    break;
   10610:	|  |  |  |  |  +----------- bra.s 10668 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   10612:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   10616:	|  |  |  |     |            movea.l 56(sp),a0
   1061a:	|  |  |  |     |            move.l (a0),d0
   1061c:	|  |  |  |     |            move.l d0,d1
   1061e:	|  |  |  |     |            subq.l #1,d1
   10620:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   10624:	|  |  |  |     |            move.l 40(sp),d0
   10628:	|  |  |  |     |            move.l d0,d2
   1062a:	|  |  |  |     |            addq.l #1,d2
   1062c:	|  |  |  |     |            move.l d2,40(sp)
   10630:	|  |  |  |     |            move.l 24(sp),d1
   10634:	|  |  |  |     |            movea.l d0,a0
   10636:	|  |  |  |     |            move.b d1,(a0)
                    break;
   10638:	|  |  |  |     +----------- bra.s 10668 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1063a:	|  |  |  \-----|----------> move.l 40(sp),d0
   1063e:	|  |  |        |            move.l d0,d1
   10640:	|  |  |        |            addq.l #1,d1
   10642:	|  |  |        |            move.l d1,40(sp)
   10646:	|  |  |        |            movea.l 36(sp),a0
   1064a:	|  |  |        |            move.b (a0),d1
   1064c:	|  |  |        |            movea.l d0,a0
   1064e:	|  |  |        |            move.b d1,(a0)
                    break;
   10650:	|  |  |        +----------- bra.s 10668 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   10652:	|  |  \--------|----------> move.l 40(sp),d0
   10656:	|  |           |            move.l d0,d1
   10658:	|  |           |            addq.l #1,d1
   1065a:	|  |           |            move.l d1,40(sp)
   1065e:	|  |           |            movea.l 36(sp),a0
   10662:	|  |           |            move.b (a0),d1
   10664:	|  |           |            movea.l d0,a0
   10666:	|  |           |            move.b d1,(a0)
        }
        p++;
   10668:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1066c:	|  \----------------------> movea.l 36(sp),a0
   10670:	|                           move.b (a0),d0
   10672:	\-------------------------- bne.w 1053c <vsprintf2+0x16>
    }
    *s = '\0';
   10676:	                            movea.l 40(sp),a0
   1067a:	                            clr.b (a0)
    return s - str;
   1067c:	                            move.l 40(sp),d0
   10680:	                            sub.l 48(sp),d0
}
   10684:	                            move.l (sp)+,d2
   10686:	                            lea 40(sp),sp
   1068a:	                            rts

0001068c <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1068c:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1068e:	moveq #16,d0
   10690:	add.l sp,d0
   10692:	move.l d0,d1
   10694:	addq.l #4,d1
   10696:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1069a:	move.l 16(sp),d0
   1069e:	move.l 4(sp),-(sp)
   106a2:	move.l d0,-(sp)
   106a4:	move.l 20(sp),-(sp)
   106a8:	jsr 10526 <vsprintf2>
   106ae:	lea 12(sp),sp
   106b2:	move.l d0,(sp)
    va_end(args);
   106b4:	clr.l 4(sp)

    return done;
   106b8:	move.l (sp),d0
}
   106ba:	addq.l #8,sp
   106bc:	rts

000106be <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   106be:	       lea -20(sp),sp
   106c2:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   106c4:	       moveq #12,d0
   106c6:	       move.l d0,20(sp)
   106ca:	       clr.l 16(sp)
   106ce:	       move.l 19c50 <SysBase>,d0
   106d4:	       movea.l d0,a6
   106d6:	       move.l 20(sp),d0
   106da:	       move.l 16(sp),d1
   106de:	       jsr -684(a6)
   106e2:	       move.l d0,12(sp)
   106e6:	       move.l 12(sp),d0
   106ea:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   106ee:	   /-- bne.s 106f4 <addVarToStack+0x36>
   106f0:	   |   clr.w d0
   106f2:	/--|-- bra.s 1073c <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   106f4:	|  \-> move.l 8(sp),d0
   106f8:	|      move.l d0,-(sp)
   106fa:	|      move.l 32(sp),-(sp)
   106fe:	|      jsr 11220 <copyMain>
   10704:	|      addq.l #8,sp
   10706:	|      tst.w d0
   10708:	|  /-- bne.s 10724 <addVarToStack+0x66>
        FreeVec(newStack);
   1070a:	|  |   move.l 8(sp),4(sp)
   10710:	|  |   move.l 19c50 <SysBase>,d0
   10716:	|  |   movea.l d0,a6
   10718:	|  |   movea.l 4(sp),a1
   1071c:	|  |   jsr -690(a6)
        return FALSE;
   10720:	|  |   clr.w d0
   10722:	+--|-- bra.s 1073c <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   10724:	|  \-> movea.l 32(sp),a0
   10728:	|      move.l (a0),d0
   1072a:	|      movea.l 8(sp),a0
   1072e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10732:	|      movea.l 32(sp),a0
   10736:	|      move.l 8(sp),(a0)
    return TRUE;
   1073a:	|      moveq #1,d0
}
   1073c:	\----> movea.l (sp)+,a6
   1073e:	       lea 20(sp),sp
   10742:	       rts

00010744 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   10744:	       lea -16(sp),sp
   10748:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1074a:	       moveq #12,d0
   1074c:	       move.l d0,16(sp)
   10750:	       clr.l 12(sp)
   10754:	       move.l 19c50 <SysBase>,d0
   1075a:	       movea.l d0,a6
   1075c:	       move.l 16(sp),d0
   10760:	       move.l 12(sp),d1
   10764:	       jsr -684(a6)
   10768:	       move.l d0,8(sp)
   1076c:	       move.l 8(sp),d0
   10770:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   10774:	   /-- bne.s 1077a <addVarToStackQuick+0x36>
   10776:	   |   clr.w d0
   10778:	/--|-- bra.s 107b0 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1077a:	|  \-> move.l 4(sp),d0
   1077e:	|      pea 8 <_start+0x8>
   10782:	|      move.l 28(sp),-(sp)
   10786:	|      move.l d0,-(sp)
   10788:	|      jsr 12e8a <memcpy>
   1078e:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   10792:	|      movea.l 24(sp),a0
   10796:	|      clr.l (a0)

    newStack->next = *thisStack;
   10798:	|      movea.l 28(sp),a0
   1079c:	|      move.l (a0),d0
   1079e:	|      movea.l 4(sp),a0
   107a2:	|      move.l d0,8(a0)
    *thisStack = newStack;
   107a6:	|      movea.l 28(sp),a0
   107aa:	|      move.l 4(sp),(a0)
    return TRUE;
   107ae:	|      moveq #1,d0
}
   107b0:	\----> movea.l (sp)+,a6
   107b2:	       lea 16(sp),sp
   107b6:	       rts

000107b8 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   107b8:	       lea -16(sp),sp
   107bc:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   107be:	       movea.l 24(sp),a0
   107c2:	       move.l (a0),d0
   107c4:	       moveq #1,d1
   107c6:	       cmp.l d0,d1
   107c8:	   /-- bne.s 107f2 <addVariablesInSecond+0x3a>
   107ca:	   |   movea.l 28(sp),a0
   107ce:	   |   move.l (a0),d0
   107d0:	   |   moveq #1,d1
   107d2:	   |   cmp.l d0,d1
   107d4:	   +-- bne.s 107f2 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   107d6:	   |   movea.l 28(sp),a0
   107da:	   |   move.l 4(a0),d1
   107de:	   |   movea.l 24(sp),a0
   107e2:	   |   move.l 4(a0),d0
   107e6:	   |   add.l d1,d0
   107e8:	   |   movea.l 28(sp),a0
   107ec:	   |   move.l d0,4(a0)
   107f0:	/--|-- bra.s 1086c <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   107f2:	|  \-> move.l 24(sp),-(sp)
   107f6:	|      jsr 11458 <getTextFromAnyVar>
   107fc:	|      addq.l #4,sp
   107fe:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   10802:	|      move.l 28(sp),-(sp)
   10806:	|      jsr 11458 <getTextFromAnyVar>
   1080c:	|      addq.l #4,sp
   1080e:	|      move.l d0,12(sp)

		unlinkVar(var2);
   10812:	|      move.l 28(sp),-(sp)
   10816:	|      jsr 110d0 <unlinkVar>
   1081c:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1081e:	|      move.l 12(sp),-(sp)
   10822:	|      move.l 20(sp),-(sp)
   10826:	|      jsr 103ae <joinStrings>
   1082c:	|      addq.l #8,sp
   1082e:	|      movea.l 28(sp),a0
   10832:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   10836:	|      movea.l 28(sp),a0
   1083a:	|      moveq #3,d0
   1083c:	|      move.l d0,(a0)
		FreeVec(string1);
   1083e:	|      move.l 16(sp),8(sp)
   10844:	|      move.l 19c50 <SysBase>,d0
   1084a:	|      movea.l d0,a6
   1084c:	|      movea.l 8(sp),a1
   10850:	|      jsr -690(a6)
		FreeVec(string2);
   10854:	|      move.l 12(sp),4(sp)
   1085a:	|      move.l 19c50 <SysBase>,d0
   10860:	|      movea.l d0,a6
   10862:	|      movea.l 4(sp),a1
   10866:	|      jsr -690(a6)
	}
}
   1086a:	|      nop
   1086c:	\----> nop
   1086e:	       movea.l (sp)+,a6
   10870:	       lea 16(sp),sp
   10874:	       rts

00010876 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   10876:	movea.l 8(sp),a0
   1087a:	move.l 4(a0),-(sp)
   1087e:	move.l (a0),-(sp)
   10880:	movea.l 12(sp),a0
   10884:	move.l 4(a0),-(sp)
   10888:	move.l (a0),-(sp)
   1088a:	jsr 108ac <compareVars>
   10890:	lea 16(sp),sp
   10894:	move.l d0,-(sp)
   10896:	pea 1 <_start+0x1>
   1089a:	move.l 16(sp),-(sp)
   1089e:	jsr 11774 <setVariable>
   108a4:	lea 12(sp),sp
}
   108a8:	nop
   108aa:	rts

000108ac <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   108ac:	       subq.l #4,sp
	int re = 0;
   108ae:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   108b0:	       move.l 8(sp),d1
   108b4:	       move.l 16(sp),d0
   108b8:	       cmp.l d1,d0
   108ba:	/----- bne.w 10982 <compareVars+0xd6>
		switch (var1.varType) {
   108be:	|      move.l 8(sp),d0
   108c2:	|      moveq #9,d1
   108c4:	|      cmp.l d0,d1
   108c6:	|  /-- bcs.w 1096a <compareVars+0xbe>
   108ca:	|  |   add.l d0,d0
   108cc:	|  |   movea.l d0,a0
   108ce:	|  |   adda.l #67802,a0
   108d4:	|  |   move.w (a0),d0
   108d6:	|  |   jmp (108da <compareVars+0x2e>,pc,d0.w)
   108da:	|  |   ori.b #-112,(a4)
   108de:	|  |   ori.l #5243024,(a0)
   108e4:	|  |   ori.l #7733392,(a0)
   108ea:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   108f0:	|  |   move.l d0,(sp)
			break;
   108f2:	+--|-- bra.w 10982 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   108f6:	|  |   move.l 12(sp),d1
   108fa:	|  |   move.l 20(sp),d0
   108fe:	|  |   cmp.l d1,d0
   10900:	|  |   seq d0
   10902:	|  |   neg.b d0
   10904:	|  |   move.b d0,d0
   10906:	|  |   andi.l #255,d0
   1090c:	|  |   move.l d0,(sp)
			break;
   1090e:	+--|-- bra.s 10982 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   10910:	|  |   move.l 12(sp),d1
   10914:	|  |   move.l 20(sp),d0
   10918:	|  |   cmp.l d1,d0
   1091a:	|  |   seq d0
   1091c:	|  |   neg.b d0
   1091e:	|  |   move.b d0,d0
   10920:	|  |   andi.l #255,d0
   10926:	|  |   move.l d0,(sp)
			break;
   10928:	+--|-- bra.s 10982 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1092a:	|  |   move.l 20(sp),d1
   1092e:	|  |   move.l 12(sp),d0
   10932:	|  |   move.l d1,-(sp)
   10934:	|  |   move.l d0,-(sp)
   10936:	|  |   jsr 1032e <strcmp>
   1093c:	|  |   addq.l #8,sp
   1093e:	|  |   tst.l d0
   10940:	|  |   seq d0
   10942:	|  |   neg.b d0
   10944:	|  |   move.b d0,d0
   10946:	|  |   andi.l #255,d0
   1094c:	|  |   move.l d0,(sp)
			break;
   1094e:	+--|-- bra.s 10982 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   10950:	|  |   move.l 12(sp),d1
   10954:	|  |   move.l 20(sp),d0
   10958:	|  |   cmp.l d1,d0
   1095a:	|  |   seq d0
   1095c:	|  |   neg.b d0
   1095e:	|  |   move.b d0,d0
   10960:	|  |   andi.l #255,d0
   10966:	|  |   move.l d0,(sp)
			break;
   10968:	+--|-- bra.s 10982 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1096a:	|  \-> move.l 12(sp),d1
   1096e:	|      move.l 20(sp),d0
   10972:	|      cmp.l d1,d0
   10974:	|      seq d0
   10976:	|      neg.b d0
   10978:	|      move.b d0,d0
   1097a:	|      andi.l #255,d0
   10980:	|      move.l d0,(sp)
		}
	}
	return re;
   10982:	\----> move.l (sp),d0
}
   10984:	       addq.l #4,sp
   10986:	       rts

00010988 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   10988:	             lea -16(sp),sp
   1098c:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1098e:	             movea.l 28(sp),a0
   10992:	             moveq #6,d0
   10994:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10996:	             moveq #12,d0
   10998:	             move.l d0,12(sp)
   1099c:	             clr.l 8(sp)
   109a0:	             move.l 19c50 <SysBase>,d0
   109a6:	             movea.l d0,a6
   109a8:	             move.l 12(sp),d0
   109ac:	             move.l 8(sp),d1
   109b0:	             jsr -684(a6)
   109b4:	             move.l d0,4(sp)
   109b8:	             move.l 4(sp),d0
   109bc:	             movea.l 28(sp),a0
   109c0:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   109c4:	             movea.l 28(sp),a0
   109c8:	             move.l 4(a0),d0
   109cc:	         /-- bne.s 109d4 <copyStack+0x4c>
   109ce:	         |   clr.w d0
   109d0:	/--------|-- bra.w 10a56 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   109d4:	|        \-> movea.l 28(sp),a0
   109d8:	|            movea.l 4(a0),a0
   109dc:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   109de:	|            movea.l 28(sp),a0
   109e2:	|            movea.l 4(a0),a0
   109e6:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   109ea:	|            movea.l 28(sp),a0
   109ee:	|            movea.l 4(a0),a0
   109f2:	|            moveq #1,d0
   109f4:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   109f8:	|            movea.l 24(sp),a0
   109fc:	|            movea.l 4(a0),a0
   10a00:	|            move.l (a0),16(sp)

	while (a) {
   10a04:	|     /----- bra.s 10a4e <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   10a06:	|  /--|----> movea.l 28(sp),a0
   10a0a:	|  |  |      move.l 4(a0),d0
   10a0e:	|  |  |      move.l d0,d1
   10a10:	|  |  |      move.l 16(sp),d0
   10a14:	|  |  |      move.l d1,-(sp)
   10a16:	|  |  |      move.l d0,-(sp)
   10a18:	|  |  |      jsr 106be <addVarToStack>
   10a1e:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   10a20:	|  |  |      movea.l 28(sp),a0
   10a24:	|  |  |      movea.l 4(a0),a0
   10a28:	|  |  |      move.l 4(a0),d0
   10a2c:	|  |  |  /-- bne.s 10a44 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   10a2e:	|  |  |  |   movea.l 28(sp),a0
   10a32:	|  |  |  |   movea.l 4(a0),a1
   10a36:	|  |  |  |   movea.l 28(sp),a0
   10a3a:	|  |  |  |   movea.l 4(a0),a0
   10a3e:	|  |  |  |   move.l (a1),d0
   10a40:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10a44:	|  |  |  \-> movea.l 16(sp),a0
   10a48:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   10a4e:	|  |  \----> tst.l 16(sp)
   10a52:	|  \-------- bne.s 10a06 <copyStack+0x7e>
	}

	return TRUE;
   10a54:	|            moveq #1,d0
}
   10a56:	\----------> movea.l (sp)+,a6
   10a58:	             lea 16(sp),sp
   10a5c:	             rts

00010a5e <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   10a5e:	                lea -20(sp),sp
   10a62:	                move.l a6,-(sp)
   10a64:	                move.l 36(sp),d0
   10a68:	                move.w d0,d0
   10a6a:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   10a6e:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   10a74:	                clr.l 16(sp)

    while (*huntVar) {
   10a78:	   /----------- bra.s 10af6 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   10a7a:	/--|----------> movea.l 20(sp),a0
   10a7e:	|  |            movea.l (a0),a0
   10a80:	|  |            movea.l 28(sp),a1
   10a84:	|  |            move.l 4(a1),-(sp)
   10a88:	|  |            move.l (a1),-(sp)
   10a8a:	|  |            move.l 4(a0),-(sp)
   10a8e:	|  |            move.l (a0),-(sp)
   10a90:	|  |            jsr 108ac <compareVars>
   10a96:	|  |            lea 16(sp),sp
   10a9a:	|  |            tst.l d0
   10a9c:	|  |  /-------- beq.s 10ae8 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   10a9e:	|  |  |         movea.l 20(sp),a0
   10aa2:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   10aa6:	|  |  |         movea.l 12(sp),a0
   10aaa:	|  |  |         move.l 8(a0),d0
   10aae:	|  |  |         movea.l 20(sp),a0
   10ab2:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   10ab4:	|  |  |         move.l 12(sp),d0
   10ab8:	|  |  |         move.l d0,-(sp)
   10aba:	|  |  |         jsr 110d0 <unlinkVar>
   10ac0:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   10ac2:	|  |  |         move.l 12(sp),8(sp)
   10ac8:	|  |  |         move.l 19c50 <SysBase>,d0
   10ace:	|  |  |         movea.l d0,a6
   10ad0:	|  |  |         movea.l 8(sp),a1
   10ad4:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   10ad8:	|  |  |         tst.w 6(sp)
   10adc:	|  |  |     /-- bne.s 10ae2 <deleteVarFromStack+0x84>
   10ade:	|  |  |     |   moveq #1,d0
   10ae0:	|  |  |  /--|-- bra.s 10b04 <deleteVarFromStack+0xa6>
            reply++;
   10ae2:	|  |  |  |  \-> addq.l #1,16(sp)
   10ae6:	|  +--|--|----- bra.s 10af6 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   10ae8:	|  |  \--|----> movea.l 20(sp),a0
   10aec:	|  |     |      move.l (a0),d0
   10aee:	|  |     |      move.l d0,d1
   10af0:	|  |     |      addq.l #8,d1
   10af2:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   10af6:	|  \-----|----> movea.l 20(sp),a0
   10afa:	|        |      move.l (a0),d0
   10afc:	\--------|----- bne.w 10a7a <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   10b00:	         |      move.l 16(sp),d0
}
   10b04:	         \----> movea.l (sp)+,a6
   10b06:	                lea 20(sp),sp
   10b0a:	                rts

00010b0c <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   10b0c:	       movea.l 4(sp),a0
   10b10:	       move.l 4(a0),d0
   10b14:	       cmp.l 8(sp),d0
   10b18:	   /-- bhi.s 10b1e <fastArrayGetByIndex+0x12>
   10b1a:	   |   moveq #0,d0
   10b1c:	/--|-- bra.s 10b2c <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   10b1e:	|  \-> movea.l 4(sp),a0
   10b22:	|      move.l (a0),d1
   10b24:	|      move.l 8(sp),d0
   10b28:	|      lsl.l #3,d0
   10b2a:	|      add.l d1,d0
}
   10b2c:	\----> rts

00010b2e <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   10b2e:	                lea -32(sp),sp
   10b32:	                move.l a6,-(sp)
   10b34:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10b36:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10b3a:	                movea.l 44(sp),a0
   10b3e:	                move.l (a0),d0
   10b40:	                moveq #8,d1
   10b42:	                cmp.l d0,d1
   10b44:	            /-- beq.s 10b52 <getCostumeFromVar+0x24>
   10b46:	            |   moveq #9,d1
   10b48:	            |   cmp.l d0,d1
   10b4a:	   /--------|-- beq.w 10c00 <getCostumeFromVar+0xd2>
   10b4e:	/--|--------|-- bra.w 10c0a <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10b52:	|  |        \-> moveq #8,d0
   10b54:	|  |            move.l d0,28(sp)
   10b58:	|  |            clr.l 24(sp)
   10b5c:	|  |            move.l 19c50 <SysBase>,d0
   10b62:	|  |            movea.l d0,a6
   10b64:	|  |            move.l 28(sp),d0
   10b68:	|  |            move.l 24(sp),d1
   10b6c:	|  |            jsr -684(a6)
   10b70:	|  |            move.l d0,20(sp)
   10b74:	|  |            move.l 20(sp),d0
   10b78:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   10b7c:	|  |        /-- bne.s 10b84 <getCostumeFromVar+0x56>
   10b7e:	|  |        |   moveq #0,d0
   10b80:	|  |  /-----|-- bra.w 10c34 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   10b84:	|  |  |     \-> movea.l 36(sp),a0
   10b88:	|  |  |         moveq #1,d1
   10b8a:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   10b8e:	|  |  |         moveq #12,d0
   10b90:	|  |  |         move.l d0,16(sp)
   10b94:	|  |  |         clr.l 12(sp)
   10b98:	|  |  |         move.l 19c50 <SysBase>,d0
   10b9e:	|  |  |         movea.l d0,a6
   10ba0:	|  |  |         move.l 16(sp),d0
   10ba4:	|  |  |         move.l 12(sp),d1
   10ba8:	|  |  |         jsr -684(a6)
   10bac:	|  |  |         move.l d0,8(sp)
   10bb0:	|  |  |         move.l 8(sp),d0
   10bb4:	|  |  |         movea.l 36(sp),a0
   10bb8:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   10bba:	|  |  |         movea.l 36(sp),a0
   10bbe:	|  |  |         move.l (a0),d0
   10bc0:	|  |  |     /-- bne.s 10bc6 <getCostumeFromVar+0x98>
   10bc2:	|  |  |     |   moveq #0,d0
   10bc4:	|  |  +-----|-- bra.s 10c34 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   10bc6:	|  |  |     \-> clr.l 32(sp)
   10bca:	|  |  |     /-- bra.s 10bf6 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   10bcc:	|  |  |  /--|-> movea.l 44(sp),a0
   10bd0:	|  |  |  |  |   move.l 4(a0),d0
   10bd4:	|  |  |  |  |   movea.l 36(sp),a0
   10bd8:	|  |  |  |  |   movea.l (a0),a0
   10bda:	|  |  |  |  |   move.l 32(sp),d1
   10bde:	|  |  |  |  |   add.l d1,d1
   10be0:	|  |  |  |  |   add.l d1,d1
   10be2:	|  |  |  |  |   lea (0,a0,d1.l),a2
   10be6:	|  |  |  |  |   move.l d0,-(sp)
   10be8:	|  |  |  |  |   jsr 6154 <copyAnim>
   10bee:	|  |  |  |  |   addq.l #4,sp
   10bf0:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   10bf2:	|  |  |  |  |   addq.l #1,32(sp)
   10bf6:	|  |  |  |  \-> moveq #2,d1
   10bf8:	|  |  |  |      cmp.l 32(sp),d1
   10bfc:	|  |  |  \----- bge.s 10bcc <getCostumeFromVar+0x9e>
            }
            break;
   10bfe:	|  |  |     /-- bra.s 10c30 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   10c00:	|  \--|-----|-> movea.l 44(sp),a0
   10c04:	|     |     |   move.l 4(a0),d0
   10c08:	|     +-----|-- bra.s 10c34 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10c0a:	\-----|-----|-> movea.l 44(sp),a0
   10c0e:	      |     |   move.l (a0),d0
   10c10:	      |     |   add.l d0,d0
   10c12:	      |     |   movea.l d0,a1
   10c14:	      |     |   adda.l d0,a1
   10c16:	      |     |   lea 18688 <typeName>,a0
   10c1c:	      |     |   move.l (0,a1,a0.l),d0
   10c20:	      |     |   move.l d0,-(sp)
   10c22:	      |     |   pea 16d71 <main_sludge.c.828d7d86+0x5b1>
   10c28:	      |     |   jsr 12ed6 <KPrintF>
   10c2e:	      |     |   addq.l #8,sp
    }

    return p;
   10c30:	      |     \-> move.l 36(sp),d0
}
   10c34:	      \-------> movea.l (sp)+,a2
   10c36:	                movea.l (sp)+,a6
   10c38:	                lea 32(sp),sp
   10c3c:	                rts

00010c3e <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   10c3e:	                lea -96(sp),sp
   10c42:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10c46:	                move.l 116(sp),-(sp)
   10c4a:	                pea 16da9 <main_sludge.c.828d7d86+0x5e9>
   10c50:	                jsr 103ae <joinStrings>
   10c56:	                addq.l #8,sp
   10c58:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   10c5c:	            /-- bne.s 10c64 <getSavedGamesStack+0x26>
   10c5e:	            |   clr.w d0
   10c60:	/-----------|-- bra.w 10e78 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10c64:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10c68:	|               move.l #93611,98(sp)
   10c70:	|               moveq #-2,d0
   10c72:	|               move.l d0,94(sp)
   10c76:	|               move.l 19c58 <DOSBase>,d0
   10c7c:	|               movea.l d0,a6
   10c7e:	|               move.l 98(sp),d1
   10c82:	|               move.l 94(sp),d2
   10c86:	|               jsr -84(a6)
   10c8a:	|               move.l d0,90(sp)
   10c8e:	|               move.l 90(sp),d0
   10c92:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   10c96:	|           /-- bne.s 10c9e <getSavedGamesStack+0x60>
   10c98:	|           |   clr.w d0
   10c9a:	+-----------|-- bra.w 10e78 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   10c9e:	|           \-> move.l #260,82(sp)
   10ca6:	|               move.l #65536,78(sp)
   10cae:	|               move.l 19c50 <SysBase>,d0
   10cb4:	|               movea.l d0,a6
   10cb6:	|               move.l 82(sp),d0
   10cba:	|               move.l 78(sp),d1
   10cbe:	|               jsr -684(a6)
   10cc2:	|               move.l d0,74(sp)
   10cc6:	|               move.l 74(sp),d0
   10cca:	|               move.l d0,70(sp)
	if (!fib) {
   10cce:	|           /-- bne.s 10cec <getSavedGamesStack+0xae>
		UnLock(dirLock);
   10cd0:	|           |   move.l 86(sp),22(sp)
   10cd6:	|           |   move.l 19c58 <DOSBase>,d0
   10cdc:	|           |   movea.l d0,a6
   10cde:	|           |   move.l 22(sp),d1
   10ce2:	|           |   jsr -90(a6)
		return FALSE;
   10ce6:	|           |   clr.w d0
   10ce8:	+-----------|-- bra.w 10e78 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   10cec:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   10cf0:	|               move.l 86(sp),66(sp)
   10cf6:	|               move.l 70(sp),62(sp)
   10cfc:	|               move.l 19c58 <DOSBase>,d0
   10d02:	|               movea.l d0,a6
   10d04:	|               move.l 66(sp),d1
   10d08:	|               move.l 62(sp),d2
   10d0c:	|               jsr -102(a6)
   10d10:	|               move.l d0,58(sp)
   10d14:	|               move.l 58(sp),d0
   10d18:	|  /----------- beq.w 10e2c <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   10d1c:	|  |        /-- bra.w 10df8 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   10d20:	|  |  /-----|-> move.l 70(sp),d2
   10d24:	|  |  |     |   addq.l #8,d2
   10d26:	|  |  |     |   move.l 70(sp),d0
   10d2a:	|  |  |     |   addq.l #8,d0
   10d2c:	|  |  |     |   move.l d0,-(sp)
   10d2e:	|  |  |     |   jsr 1036e <strlen>
   10d34:	|  |  |     |   addq.l #4,sp
   10d36:	|  |  |     |   move.l d0,d3
   10d38:	|  |  |     |   move.l 116(sp),-(sp)
   10d3c:	|  |  |     |   jsr 1036e <strlen>
   10d42:	|  |  |     |   addq.l #4,sp
   10d44:	|  |  |     |   move.l d3,d1
   10d46:	|  |  |     |   sub.l d0,d1
   10d48:	|  |  |     |   move.l d2,d0
   10d4a:	|  |  |     |   add.l d1,d0
   10d4c:	|  |  |     |   move.l 116(sp),-(sp)
   10d50:	|  |  |     |   move.l d0,-(sp)
   10d52:	|  |  |     |   jsr 1032e <strcmp>
   10d58:	|  |  |     |   addq.l #8,sp
   10d5a:	|  |  |     |   tst.l d0
   10d5c:	|  |  |     +-- bne.w 10df8 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   10d60:	|  |  |     |   move.l 70(sp),d0
   10d64:	|  |  |     |   addq.l #8,d0
   10d66:	|  |  |     |   move.l d0,-(sp)
   10d68:	|  |  |     |   jsr 1036e <strlen>
   10d6e:	|  |  |     |   addq.l #4,sp
   10d70:	|  |  |     |   move.l d0,d2
   10d72:	|  |  |     |   move.l 116(sp),-(sp)
   10d76:	|  |  |     |   jsr 1036e <strlen>
   10d7c:	|  |  |     |   addq.l #4,sp
   10d7e:	|  |  |     |   move.l d0,d1
   10d80:	|  |  |     |   move.l d2,d0
   10d82:	|  |  |     |   sub.l d1,d0
   10d84:	|  |  |     |   movea.l 70(sp),a0
   10d88:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   10d8c:	|  |  |     |   move.l 70(sp),d0
   10d90:	|  |  |     |   addq.l #8,d0
   10d92:	|  |  |     |   move.l d0,-(sp)
   10d94:	|  |  |     |   jsr 118 <decodeFilename>
   10d9a:	|  |  |     |   addq.l #4,sp
   10d9c:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   10da0:	|  |  |     |   move.l 42(sp),-(sp)
   10da4:	|  |  |     |   lea 18(sp),a0
   10da8:	|  |  |     |   move.l a0,-(sp)
   10daa:	|  |  |     |   jsr 110a4 <makeTextVar>
   10db0:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   10db2:	|  |  |     |   move.l 42(sp),38(sp)
   10db8:	|  |  |     |   move.l 19c50 <SysBase>,d0
   10dbe:	|  |  |     |   movea.l d0,a6
   10dc0:	|  |  |     |   movea.l 38(sp),a1
   10dc4:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10dc8:	|  |  |     |   move.l 112(sp),d0
   10dcc:	|  |  |     |   move.l d0,-(sp)
   10dce:	|  |  |     |   lea 18(sp),a0
   10dd2:	|  |  |     |   move.l a0,-(sp)
   10dd4:	|  |  |     |   jsr 106be <addVarToStack>
   10dda:	|  |  |     |   addq.l #8,sp
   10ddc:	|  |  |     |   tst.w d0
   10dde:	|  |  |  /--|-- beq.s 10e30 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   10de0:	|  |  |  |  |   movea.l 112(sp),a0
   10de4:	|  |  |  |  |   move.l 4(a0),d0
   10de8:	|  |  |  |  +-- bne.s 10df8 <getSavedGamesStack+0x1ba>
   10dea:	|  |  |  |  |   movea.l 112(sp),a0
   10dee:	|  |  |  |  |   move.l (a0),d0
   10df0:	|  |  |  |  |   movea.l 112(sp),a0
   10df4:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10df8:	|  |  |  |  \-> move.l 86(sp),54(sp)
   10dfe:	|  |  |  |      move.l 70(sp),50(sp)
   10e04:	|  |  |  |      move.l 19c58 <DOSBase>,d0
   10e0a:	|  |  |  |      movea.l d0,a6
   10e0c:	|  |  |  |      move.l 54(sp),d1
   10e10:	|  |  |  |      move.l 50(sp),d2
   10e14:	|  |  |  |      jsr -108(a6)
   10e18:	|  |  |  |      move.l d0,46(sp)
   10e1c:	|  |  |  |      move.l 46(sp),d0
   10e20:	|  |  \--|----- bne.w 10d20 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   10e24:	|  |     |      move.w #1,106(sp)
   10e2a:	|  |     |  /-- bra.s 10e32 <getSavedGamesStack+0x1f4>
	}

cleanup:
   10e2c:	|  \-----|--|-> nop
   10e2e:	|        |  +-- bra.s 10e32 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10e30:	|        \--|-> nop
	FreeVec(fib);
   10e32:	|           \-> move.l 70(sp),34(sp)
   10e38:	|               move.l 19c50 <SysBase>,d0
   10e3e:	|               movea.l d0,a6
   10e40:	|               movea.l 34(sp),a1
   10e44:	|               jsr -690(a6)
	UnLock(dirLock);
   10e48:	|               move.l 86(sp),30(sp)
   10e4e:	|               move.l 19c58 <DOSBase>,d0
   10e54:	|               movea.l d0,a6
   10e56:	|               move.l 30(sp),d1
   10e5a:	|               jsr -90(a6)
	FreeVec(pattern);
   10e5e:	|               move.l 102(sp),26(sp)
   10e64:	|               move.l 19c50 <SysBase>,d0
   10e6a:	|               movea.l d0,a6
   10e6c:	|               movea.l 26(sp),a1
   10e70:	|               jsr -690(a6)
	return result;
   10e74:	|               move.w 106(sp),d0
}
   10e78:	\-------------> movem.l (sp)+,d2-d3/a6
   10e7c:	                lea 96(sp),sp
   10e80:	                rts

00010e82 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10e82:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   10e84:	       movea.l 20(sp),a0
   10e88:	       move.l (a0),d0
   10e8a:	       cmp.l 16(sp),d0
   10e8e:	/----- beq.s 10ef2 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   10e90:	|      move.l 16(sp),d0
   10e94:	|      add.l d0,d0
   10e96:	|      movea.l d0,a1
   10e98:	|      adda.l d0,a1
   10e9a:	|      lea 18688 <typeName>,a0
   10ea0:	|      move.l (0,a1,a0.l),d0
   10ea4:	|      move.l d0,-(sp)
   10ea6:	|      pea 16dad <main_sludge.c.828d7d86+0x5ed>
   10eac:	|      jsr 103ae <joinStrings>
   10eb2:	|      addq.l #8,sp
   10eb4:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   10eb8:	|      movea.l 20(sp),a0
   10ebc:	|      move.l (a0),d0
   10ebe:	|      add.l d0,d0
   10ec0:	|      movea.l d0,a1
   10ec2:	|      adda.l d0,a1
   10ec4:	|      lea 18688 <typeName>,a0
   10eca:	|      move.l (0,a1,a0.l),d0
   10ece:	|      move.l d0,-(sp)
   10ed0:	|      pea 16def <main_sludge.c.828d7d86+0x62f>
   10ed6:	|      jsr 103ae <joinStrings>
   10edc:	|      addq.l #8,sp
   10ede:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   10ee0:	|      move.l (sp),-(sp)
   10ee2:	|      move.l 8(sp),-(sp)
   10ee6:	|      jsr 12ed6 <KPrintF>
   10eec:	|      addq.l #8,sp

		return FALSE;
   10eee:	|      clr.w d0
   10ef0:	|  /-- bra.s 10f02 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   10ef2:	\--|-> movea.l 20(sp),a0
   10ef6:	   |   move.l 4(a0),d0
   10efa:	   |   movea.l 12(sp),a0
   10efe:	   |   move.l d0,(a0)
	return TRUE;
   10f00:	   |   moveq #1,d0
}
   10f02:	   \-> addq.l #8,sp
   10f04:	       rts

00010f06 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10f06:	move.l 8(sp),-(sp)
   10f0a:	jsr 43a4 <getNumberedString>
   10f10:	addq.l #4,sp
   10f12:	move.l d0,-(sp)
   10f14:	move.l 8(sp),-(sp)
   10f18:	jsr 110a4 <makeTextVar>
   10f1e:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   10f20:	movea.l 4(sp),a0
   10f24:	move.l 4(a0),d0
   10f28:	sne d0
   10f2a:	neg.b d0
   10f2c:	move.b d0,d0
   10f2e:	andi.w #255,d0
}
   10f32:	rts

00010f34 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   10f34:	          subq.l #8,sp
    int size = stackSize(stacky);
   10f36:	          move.l 16(sp),-(sp)
   10f3a:	          jsr 117e2 <stackSize>
   10f40:	          addq.l #4,sp
   10f42:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   10f46:	          move.l 4(sp),-(sp)
   10f4a:	          move.l 16(sp),-(sp)
   10f4e:	          jsr 10f9e <makeFastArraySize>
   10f54:	          addq.l #8,sp
   10f56:	          tst.w d0
   10f58:	      /-- bne.s 10f5e <makeFastArrayFromStack+0x2a>
   10f5a:	      |   clr.w d0
   10f5c:	/-----|-- bra.s 10f9a <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   10f5e:	|     \-> movea.l 16(sp),a0
   10f62:	|         move.l (a0),(sp)
    size = 0;
   10f64:	|         clr.l 4(sp)
    while (allV) {
   10f68:	|     /-- bra.s 10f94 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10f6a:	|  /--|-> movea.l 12(sp),a0
   10f6e:	|  |  |   movea.l 4(a0),a0
   10f72:	|  |  |   move.l (a0),d1
   10f74:	|  |  |   move.l 4(sp),d0
   10f78:	|  |  |   lsl.l #3,d0
   10f7a:	|  |  |   add.l d0,d1
   10f7c:	|  |  |   move.l (sp),d0
   10f7e:	|  |  |   move.l d1,-(sp)
   10f80:	|  |  |   move.l d0,-(sp)
   10f82:	|  |  |   jsr 11220 <copyMain>
   10f88:	|  |  |   addq.l #8,sp
        size++;
   10f8a:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10f8e:	|  |  |   movea.l (sp),a0
   10f90:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10f94:	|  |  \-> tst.l (sp)
   10f96:	|  \----- bne.s 10f6a <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   10f98:	|         moveq #1,d0
}
   10f9a:	\-------> addq.l #8,sp
   10f9c:	          rts

00010f9e <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10f9e:	          lea -28(sp),sp
   10fa2:	          move.l a6,-(sp)
    if (size < 0) {
   10fa4:	          tst.l 40(sp)
   10fa8:	      /-- bge.s 10fbe <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10faa:	      |   pea 16e34 <main_sludge.c.828d7d86+0x674>
   10fb0:	      |   jsr 12ed6 <KPrintF>
   10fb6:	      |   addq.l #4,sp
		return FALSE;
   10fb8:	      |   clr.w d0
   10fba:	/-----|-- bra.w 1109c <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10fbe:	|     \-> move.l 36(sp),-(sp)
   10fc2:	|         jsr 110d0 <unlinkVar>
   10fc8:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10fca:	|         movea.l 36(sp),a0
   10fce:	|         moveq #10,d0
   10fd0:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   10fd2:	|         moveq #12,d0
   10fd4:	|         move.l d0,24(sp)
   10fd8:	|         clr.l 20(sp)
   10fdc:	|         move.l 19c50 <SysBase>,d0
   10fe2:	|         movea.l d0,a6
   10fe4:	|         move.l 24(sp),d0
   10fe8:	|         move.l 20(sp),d1
   10fec:	|         jsr -684(a6)
   10ff0:	|         move.l d0,16(sp)
   10ff4:	|         move.l 16(sp),d0
   10ff8:	|         movea.l 36(sp),a0
   10ffc:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   11000:	|         movea.l 36(sp),a0
   11004:	|         move.l 4(a0),d0
   11008:	|     /-- bne.s 11010 <makeFastArraySize+0x72>
   1100a:	|     |   clr.w d0
   1100c:	+-----|-- bra.w 1109c <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   11010:	|     \-> move.l 40(sp),d0
   11014:	|         lsl.l #3,d0
   11016:	|         move.l d0,12(sp)
   1101a:	|         clr.l 8(sp)
   1101e:	|         move.l 19c50 <SysBase>,d0
   11024:	|         movea.l d0,a6
   11026:	|         move.l 12(sp),d0
   1102a:	|         move.l 8(sp),d1
   1102e:	|         jsr -684(a6)
   11032:	|         move.l d0,4(sp)
   11036:	|         move.l 4(sp),d0
   1103a:	|         movea.l 36(sp),a0
   1103e:	|         movea.l 4(a0),a0
   11042:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   11044:	|         movea.l 36(sp),a0
   11048:	|         movea.l 4(a0),a0
   1104c:	|         move.l (a0),d0
   1104e:	|     /-- bne.s 11054 <makeFastArraySize+0xb6>
   11050:	|     |   clr.w d0
   11052:	+-----|-- bra.s 1109c <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   11054:	|     \-> clr.l 28(sp)
   11058:	|     /-- bra.s 11074 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   1105a:	|  /--|-> movea.l 36(sp),a0
   1105e:	|  |  |   movea.l 4(a0),a0
   11062:	|  |  |   move.l (a0),d1
   11064:	|  |  |   move.l 28(sp),d0
   11068:	|  |  |   lsl.l #3,d0
   1106a:	|  |  |   movea.l d1,a0
   1106c:	|  |  |   adda.l d0,a0
   1106e:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   11070:	|  |  |   addq.l #1,28(sp)
   11074:	|  |  \-> move.l 28(sp),d0
   11078:	|  |      cmp.l 40(sp),d0
   1107c:	|  \----- blt.s 1105a <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1107e:	|         movea.l 36(sp),a0
   11082:	|         movea.l 4(a0),a0
   11086:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   1108c:	|         movea.l 36(sp),a0
   11090:	|         movea.l 4(a0),a0
   11094:	|         moveq #1,d0
   11096:	|         move.l d0,8(a0)
    return TRUE;
   1109a:	|         moveq #1,d0
}
   1109c:	\-------> movea.l (sp)+,a6
   1109e:	          lea 28(sp),sp
   110a2:	          rts

000110a4 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   110a4:	move.l 4(sp),-(sp)
   110a8:	jsr 110d0 <unlinkVar>
   110ae:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   110b0:	movea.l 4(sp),a0
   110b4:	moveq #3,d0
   110b6:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   110b8:	move.l 8(sp),-(sp)
   110bc:	jsr b8 <copyString>
   110c2:	addq.l #4,sp
   110c4:	movea.l 4(sp),a0
   110c8:	move.l d0,4(a0)
}
   110cc:	nop
   110ce:	rts

000110d0 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   110d0:	                      lea -16(sp),sp
   110d4:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   110d6:	                      movea.l 24(sp),a0
   110da:	                      move.l (a0),d0
   110dc:	                      moveq #10,d1
   110de:	                      cmp.l d0,d1
   110e0:	            /-------- beq.w 11198 <unlinkVar+0xc8>
   110e4:	            |         moveq #10,d1
   110e6:	            |         cmp.l d0,d1
   110e8:	/-----------|-------- bcs.w 1120c <unlinkVar+0x13c>
   110ec:	|           |         moveq #8,d1
   110ee:	|           |         cmp.l d0,d1
   110f0:	|  /--------|-------- beq.w 111f8 <unlinkVar+0x128>
   110f4:	|  |        |         moveq #8,d1
   110f6:	|  |        |         cmp.l d0,d1
   110f8:	+--|--------|-------- bcs.w 1120c <unlinkVar+0x13c>
   110fc:	|  |        |         moveq #3,d1
   110fe:	|  |        |         cmp.l d0,d1
   11100:	|  |        |     /-- beq.s 1110c <unlinkVar+0x3c>
   11102:	|  |        |     |   moveq #6,d1
   11104:	|  |        |     |   cmp.l d0,d1
   11106:	|  |        |  /--|-- beq.s 11132 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11108:	+--|--------|--|--|-- bra.w 1120c <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1110c:	|  |        |  |  \-> movea.l 24(sp),a0
   11110:	|  |        |  |      move.l 4(a0),4(sp)
   11116:	|  |        |  |      move.l 19c50 <SysBase>,d0
   1111c:	|  |        |  |      movea.l d0,a6
   1111e:	|  |        |  |      movea.l 4(sp),a1
   11122:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   11126:	|  |        |  |      movea.l 24(sp),a0
   1112a:	|  |        |  |      clr.l 4(a0)
		break;
   1112e:	|  |  /-----|--|----- bra.w 11216 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   11132:	|  |  |     |  \----> movea.l 24(sp),a0
   11136:	|  |  |     |         movea.l 4(a0),a0
   1113a:	|  |  |     |         move.l 8(a0),d0
   1113e:	|  |  |     |         subq.l #1,d0
   11140:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11144:	|  |  |     |         movea.l 24(sp),a0
   11148:	|  |  |     |         movea.l 4(a0),a0
   1114c:	|  |  |     |         move.l 8(a0),d0
   11150:	|  |  |  /--|-------- bgt.w 11210 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   11154:	|  |  |  |  |     /-- bra.s 11168 <unlinkVar+0x98>
   11156:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   1115a:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1115e:	|  |  |  |  |  |  |   move.l d0,-(sp)
   11160:	|  |  |  |  |  |  |   jsr 11806 <trimStack>
   11166:	|  |  |  |  |  |  |   addq.l #4,sp
   11168:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   1116c:	|  |  |  |  |  |      movea.l 4(a0),a0
   11170:	|  |  |  |  |  |      move.l (a0),d0
   11172:	|  |  |  |  |  \----- bne.s 11156 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   11174:	|  |  |  |  |         movea.l 24(sp),a0
   11178:	|  |  |  |  |         move.l 4(a0),8(sp)
   1117e:	|  |  |  |  |         move.l 19c50 <SysBase>,d0
   11184:	|  |  |  |  |         movea.l d0,a6
   11186:	|  |  |  |  |         movea.l 8(sp),a1
   1118a:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1118e:	|  |  |  |  |         movea.l 24(sp),a0
   11192:	|  |  |  |  |         clr.l 4(a0)
		break;
   11196:	|  |  |  +--|-------- bra.s 11210 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   11198:	|  |  |  |  \-------> movea.l 24(sp),a0
   1119c:	|  |  |  |            movea.l 4(a0),a0
   111a0:	|  |  |  |            move.l 8(a0),d0
   111a4:	|  |  |  |            subq.l #1,d0
   111a6:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   111aa:	|  |  |  |            movea.l 24(sp),a0
   111ae:	|  |  |  |            movea.l 4(a0),a0
   111b2:	|  |  |  |            move.l 8(a0),d0
   111b6:	|  |  |  |        /-- bgt.s 11214 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   111b8:	|  |  |  |        |   movea.l 24(sp),a0
   111bc:	|  |  |  |        |   movea.l 4(a0),a0
   111c0:	|  |  |  |        |   move.l (a0),16(sp)
   111c4:	|  |  |  |        |   move.l 19c50 <SysBase>,d0
   111ca:	|  |  |  |        |   movea.l d0,a6
   111cc:	|  |  |  |        |   movea.l 16(sp),a1
   111d0:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   111d4:	|  |  |  |        |   movea.l 24(sp),a0
   111d8:	|  |  |  |        |   move.l 4(a0),12(sp)
   111de:	|  |  |  |        |   move.l 19c50 <SysBase>,d0
   111e4:	|  |  |  |        |   movea.l d0,a6
   111e6:	|  |  |  |        |   movea.l 12(sp),a1
   111ea:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   111ee:	|  |  |  |        |   movea.l 24(sp),a0
   111f2:	|  |  |  |        |   clr.l 4(a0)
		break;
   111f6:	|  |  |  |        +-- bra.s 11214 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   111f8:	|  \--|--|--------|-> movea.l 24(sp),a0
   111fc:	|     |  |        |   move.l 4(a0),d0
   11200:	|     |  |        |   move.l d0,-(sp)
   11202:	|     |  |        |   jsr 6510 <deleteAnim>
   11208:	|     |  |        |   addq.l #4,sp
		break;
   1120a:	|     +--|--------|-- bra.s 11216 <unlinkVar+0x146>
		break;
   1120c:	\-----|--|--------|-> nop
   1120e:	      +--|--------|-- bra.s 11216 <unlinkVar+0x146>
		break;
   11210:	      |  \--------|-> nop
   11212:	      +-----------|-- bra.s 11216 <unlinkVar+0x146>
		break;
   11214:	      |           \-> nop
	}
}
   11216:	      \-------------> nop
   11218:	                      movea.l (sp)+,a6
   1121a:	                      lea 16(sp),sp
   1121e:	                      rts

00011220 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   11220:	       movea.l 4(sp),a0
   11224:	       move.l (a0),d0
   11226:	       movea.l 8(sp),a0
   1122a:	       move.l d0,(a0)
	switch (to->varType) {
   1122c:	       movea.l 8(sp),a0
   11230:	       move.l (a0),d0
   11232:	       moveq #10,d1
   11234:	       cmp.l d0,d1
   11236:	/----- bcs.w 11328 <copyMain+0x108>
   1123a:	|      add.l d0,d0
   1123c:	|      movea.l d0,a0
   1123e:	|      adda.l #70218,a0
   11244:	|      move.w (a0),d0
   11246:	|      jmp (1124a <copyMain+0x2a>,pc,d0.w)
   1124a:	|      .short 0x00da
   1124c:	|      ori.b #22,(a6)
   11250:	|      ori.w #22,(a4)
   11254:	|      ori.b #-126,(a6)
   11258:	|      ori.b #-68,(a6)
   1125c:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   11264:	|      move.l 4(a0),d0
   11268:	|      movea.l 8(sp),a0
   1126c:	|      move.l d0,4(a0)
		return TRUE;
   11270:	|      moveq #1,d0
   11272:	|  /-- bra.w 1133a <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   11276:	|  |   movea.l 4(sp),a0
   1127a:	|  |   move.l 4(a0),d0
   1127e:	|  |   movea.l 8(sp),a0
   11282:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   11286:	|  |   movea.l 8(sp),a0
   1128a:	|  |   movea.l 4(a0),a0
   1128e:	|  |   move.l 8(a0),d0
   11292:	|  |   addq.l #1,d0
   11294:	|  |   move.l d0,8(a0)
		return TRUE;
   11298:	|  |   moveq #1,d0
   1129a:	|  +-- bra.w 1133a <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1129e:	|  |   movea.l 4(sp),a0
   112a2:	|  |   move.l 4(a0),d0
   112a6:	|  |   move.l d0,-(sp)
   112a8:	|  |   jsr b8 <copyString>
   112ae:	|  |   addq.l #4,sp
   112b0:	|  |   movea.l 8(sp),a0
   112b4:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   112b8:	|  |   movea.l 8(sp),a0
   112bc:	|  |   move.l 4(a0),d0
   112c0:	|  |   sne d0
   112c2:	|  |   neg.b d0
   112c4:	|  |   move.b d0,d0
   112c6:	|  |   andi.w #255,d0
   112ca:	|  +-- bra.s 1133a <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   112cc:	|  |   movea.l 4(sp),a0
   112d0:	|  |   move.l 4(a0),d0
   112d4:	|  |   movea.l 8(sp),a0
   112d8:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   112dc:	|  |   movea.l 8(sp),a0
   112e0:	|  |   movea.l 4(a0),a0
   112e4:	|  |   move.l 8(a0),d0
   112e8:	|  |   addq.l #1,d0
   112ea:	|  |   move.l d0,8(a0)
		return TRUE;
   112ee:	|  |   moveq #1,d0
   112f0:	|  +-- bra.s 1133a <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   112f2:	|  |   movea.l 4(sp),a0
   112f6:	|  |   move.l 4(a0),d0
   112fa:	|  |   movea.l 8(sp),a0
   112fe:	|  |   move.l d0,4(a0)
		return TRUE;
   11302:	|  |   moveq #1,d0
   11304:	|  +-- bra.s 1133a <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   11306:	|  |   movea.l 4(sp),a0
   1130a:	|  |   move.l 4(a0),d0
   1130e:	|  |   move.l d0,-(sp)
   11310:	|  |   jsr 6154 <copyAnim>
   11316:	|  |   addq.l #4,sp
   11318:	|  |   movea.l 8(sp),a0
   1131c:	|  |   move.l d0,4(a0)
		return TRUE;
   11320:	|  |   moveq #1,d0
   11322:	|  +-- bra.s 1133a <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   11324:	|  |   moveq #1,d0
   11326:	|  +-- bra.s 1133a <copyMain+0x11a>

		default:
		break;
   11328:	\--|-> nop
	}
	KPrintF("Unknown value type");
   1132a:	   |   pea 16e85 <main_sludge.c.828d7d86+0x6c5>
   11330:	   |   jsr 12ed6 <KPrintF>
   11336:	   |   addq.l #4,sp
	return FALSE;
   11338:	   |   clr.w d0
}
   1133a:	   \-> rts

0001133c <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1133c:	move.l 8(sp),-(sp)
   11340:	jsr 110d0 <unlinkVar>
   11346:	addq.l #4,sp
	return copyMain(from, to);
   11348:	move.l 8(sp),-(sp)
   1134c:	move.l 8(sp),-(sp)
   11350:	jsr 11220 <copyMain>
   11356:	addq.l #8,sp
}
   11358:	rts

0001135a <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   1135a:	       movea.l 4(sp),a0
   1135e:	       move.l (a0),d0
   11360:	       moveq #8,d1
   11362:	       cmp.l d0,d1
   11364:	   /-- bne.s 1137a <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   11366:	   |   movea.l 4(sp),a0
   1136a:	   |   move.l 4(a0),d0
   1136e:	   |   move.l d0,-(sp)
   11370:	   |   jsr 6154 <copyAnim>
   11376:	   |   addq.l #4,sp
   11378:	/--|-- bra.s 113c0 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   1137a:	|  \-> movea.l 4(sp),a0
   1137e:	|      move.l (a0),d0
   11380:	|      moveq #1,d1
   11382:	|      cmp.l d0,d1
   11384:	|  /-- bne.s 11398 <getAnimationFromVar+0x3e>
   11386:	|  |   movea.l 4(sp),a0
   1138a:	|  |   move.l 4(a0),d0
   1138e:	|  +-- bne.s 11398 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   11390:	|  |   jsr 72fc <makeNullAnim>
   11396:	+--|-- bra.s 113c0 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11398:	|  \-> movea.l 4(sp),a0
   1139c:	|      move.l (a0),d0
   1139e:	|      add.l d0,d0
   113a0:	|      movea.l d0,a1
   113a2:	|      adda.l d0,a1
   113a4:	|      lea 18688 <typeName>,a0
   113aa:	|      move.l (0,a1,a0.l),d0
   113ae:	|      move.l d0,-(sp)
   113b0:	|      pea 16d71 <main_sludge.c.828d7d86+0x5b1>
   113b6:	|      jsr 12ed6 <KPrintF>
   113bc:	|      addq.l #8,sp
	return NULL;
   113be:	|      moveq #0,d0
}
   113c0:	\----> rts

000113c2 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   113c2:	       movea.l 4(sp),a0
   113c6:	       move.l (a0),d0
   113c8:	       moveq #10,d1
   113ca:	       cmp.l d0,d1
   113cc:	/----- bcs.w 11452 <getBoolean+0x90>
   113d0:	|      add.l d0,d0
   113d2:	|      movea.l d0,a0
   113d4:	|      adda.l #70624,a0
   113da:	|      move.w (a0),d0
   113dc:	|      jmp (113e0 <getBoolean+0x1e>,pc,d0.w)
   113e0:	|      ori.b #26,(a6)
   113e4:	|      ori.w #68,(114,a2,d0.w)
   113ea:	|      ori.w #46,(114,a2,d0.w)
   113f0:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   113f6:	|      clr.w d0
   113f8:	|  /-- bra.s 11456 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   113fa:	|  |   movea.l 4(sp),a0
   113fe:	|  |   move.l 4(a0),d0
   11402:	|  |   sne d0
   11404:	|  |   neg.b d0
   11406:	|  |   move.b d0,d0
   11408:	|  |   andi.w #255,d0
   1140c:	|  +-- bra.s 11456 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1140e:	|  |   movea.l 4(sp),a0
   11412:	|  |   movea.l 4(a0),a0
   11416:	|  |   move.l (a0),d0
   11418:	|  |   sne d0
   1141a:	|  |   neg.b d0
   1141c:	|  |   move.b d0,d0
   1141e:	|  |   andi.w #255,d0
   11422:	|  +-- bra.s 11456 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   11424:	|  |   movea.l 4(sp),a0
   11428:	|  |   movea.l 4(a0),a0
   1142c:	|  |   move.b (a0),d0
   1142e:	|  |   sne d0
   11430:	|  |   neg.b d0
   11432:	|  |   move.b d0,d0
   11434:	|  |   andi.w #255,d0
   11438:	|  +-- bra.s 11456 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   1143a:	|  |   movea.l 4(sp),a0
   1143e:	|  |   movea.l 4(a0),a0
   11442:	|  |   move.l 4(a0),d0
   11446:	|  |   sne d0
   11448:	|  |   neg.b d0
   1144a:	|  |   move.b d0,d0
   1144c:	|  |   andi.w #255,d0
   11450:	|  +-- bra.s 11456 <getBoolean+0x94>

		default:
		break;
   11452:	\--|-> nop
	}
	return TRUE;
   11454:	   |   moveq #1,d0
}
   11456:	   \-> rts

00011458 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   11458:	      /----------> lea -76(sp),sp
   1145c:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1145e:	      |            movea.l 84(sp),a0
   11462:	      |            move.l (a0),d0
   11464:	      |            moveq #10,d1
   11466:	      |            cmp.l d0,d1
   11468:	/-----|----------- bcs.w 11706 <getTextFromAnyVar+0x2ae>
   1146c:	|     |            add.l d0,d0
   1146e:	|     |            movea.l d0,a0
   11470:	|     |            adda.l #70780,a0
   11476:	|     |            move.w (a0),d0
   11478:	|     |            jmp (1147c <getTextFromAnyVar+0x24>,pc,d0.w)
   1147c:	|     |            .short 0x028a
   1147e:	|     |            bset d0,(a0)+
   11480:	|     |            .short 0x028a
   11482:	|     |            ori.b #-118,(a6)
   11486:	|     |            andi.b #8,ccr
   1148a:	|     |            andi.w #650,-(a0)
   1148e:	|     |            .short 0x028a
   11490:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   11496:	|     |            move.l 4(a0),d0
   1149a:	|     |            move.l d0,-(sp)
   1149c:	|     |            jsr b8 <copyString>
   114a2:	|     |            addq.l #4,sp
   114a4:	|  /--|----------- bra.w 11728 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   114a8:	|  |  |            pea 16e98 <main_sludge.c.828d7d86+0x6d8>
   114ae:	|  |  |            jsr b8 <copyString>
   114b4:	|  |  |            addq.l #4,sp
   114b6:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   114ba:	|  |  |            clr.l 72(sp)
   114be:	|  |  |     /----- bra.w 11568 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   114c2:	|  |  |  /--|----> pea 16e9e <main_sludge.c.828d7d86+0x6de>
   114c8:	|  |  |  |  |      move.l 80(sp),-(sp)
   114cc:	|  |  |  |  |      jsr 103ae <joinStrings>
   114d2:	|  |  |  |  |      addq.l #8,sp
   114d4:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   114d8:	|  |  |  |  |  /-- bne.s 114e0 <getTextFromAnyVar+0x88>
   114da:	|  |  |  |  |  |   moveq #0,d0
   114dc:	|  +--|--|--|--|-- bra.w 11728 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   114e0:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   114e6:	|  |  |  |  |      move.l 19c50 <SysBase>,d0
   114ec:	|  |  |  |  |      movea.l d0,a6
   114ee:	|  |  |  |  |      movea.l 56(sp),a1
   114f2:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   114f6:	|  |  |  |  |      movea.l 84(sp),a0
   114fa:	|  |  |  |  |      movea.l 4(a0),a0
   114fe:	|  |  |  |  |      move.l (a0),d1
   11500:	|  |  |  |  |      move.l 72(sp),d0
   11504:	|  |  |  |  |      lsl.l #3,d0
   11506:	|  |  |  |  |      add.l d1,d0
   11508:	|  |  |  |  |      move.l d0,-(sp)
   1150a:	|  |  +--|--|----- jsr 11458 <getTextFromAnyVar>(pc)
   1150e:	|  |  |  |  |      addq.l #4,sp
   11510:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   11514:	|  |  |  |  |      move.l 52(sp),-(sp)
   11518:	|  |  |  |  |      move.l 64(sp),-(sp)
   1151c:	|  |  |  |  |      jsr 103ae <joinStrings>
   11522:	|  |  |  |  |      addq.l #8,sp
   11524:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   11528:	|  |  |  |  |  /-- bne.s 11530 <getTextFromAnyVar+0xd8>
   1152a:	|  |  |  |  |  |   moveq #0,d0
   1152c:	|  +--|--|--|--|-- bra.w 11728 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11530:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   11536:	|  |  |  |  |      move.l 19c50 <SysBase>,d0
   1153c:	|  |  |  |  |      movea.l d0,a6
   1153e:	|  |  |  |  |      movea.l 48(sp),a1
   11542:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   11546:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   1154a:	|  |  |  |  |      move.l 60(sp),44(sp)
   11550:	|  |  |  |  |      move.l 19c50 <SysBase>,d0
   11556:	|  |  |  |  |      movea.l d0,a6
   11558:	|  |  |  |  |      movea.l 44(sp),a1
   1155c:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   11560:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   11564:	|  |  |  |  |      addq.l #1,72(sp)
   11568:	|  |  |  |  \----> movea.l 84(sp),a0
   1156c:	|  |  |  |         movea.l 4(a0),a0
   11570:	|  |  |  |         move.l 4(a0),d0
   11574:	|  |  |  |         cmp.l 72(sp),d0
   11578:	|  |  |  \-------- bgt.w 114c2 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1157c:	|  |  |            move.l 76(sp),d0
   11580:	|  +--|----------- bra.w 11728 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   11584:	|  |  |            pea 16ea0 <main_sludge.c.828d7d86+0x6e0>
   1158a:	|  |  |            jsr b8 <copyString>
   11590:	|  |  |            addq.l #4,sp
   11592:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   11596:	|  |  |            movea.l 84(sp),a0
   1159a:	|  |  |            movea.l 4(a0),a0
   1159e:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   115a2:	|  |  |     /----- bra.w 11644 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   115a6:	|  |  |  /--|----> pea 16e9e <main_sludge.c.828d7d86+0x6de>
   115ac:	|  |  |  |  |      move.l 72(sp),-(sp)
   115b0:	|  |  |  |  |      jsr 103ae <joinStrings>
   115b6:	|  |  |  |  |      addq.l #8,sp
   115b8:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   115bc:	|  |  |  |  |  /-- bne.s 115c4 <getTextFromAnyVar+0x16c>
   115be:	|  |  |  |  |  |   moveq #0,d0
   115c0:	|  +--|--|--|--|-- bra.w 11728 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   115c4:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   115ca:	|  |  |  |  |      move.l 19c50 <SysBase>,d0
   115d0:	|  |  |  |  |      movea.l d0,a6
   115d2:	|  |  |  |  |      movea.l 32(sp),a1
   115d6:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   115da:	|  |  |  |  |      move.l 64(sp),d0
   115de:	|  |  |  |  |      move.l d0,-(sp)
   115e0:	|  |  \--|--|----- jsr 11458 <getTextFromAnyVar>(pc)
   115e4:	|  |     |  |      addq.l #4,sp
   115e6:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   115ea:	|  |     |  |      move.l 28(sp),-(sp)
   115ee:	|  |     |  |      move.l 40(sp),-(sp)
   115f2:	|  |     |  |      jsr 103ae <joinStrings>
   115f8:	|  |     |  |      addq.l #8,sp
   115fa:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   115fe:	|  |     |  |  /-- bne.s 11606 <getTextFromAnyVar+0x1ae>
   11600:	|  |     |  |  |   moveq #0,d0
   11602:	|  +-----|--|--|-- bra.w 11728 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11606:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1160c:	|  |     |  |      move.l 19c50 <SysBase>,d0
   11612:	|  |     |  |      movea.l d0,a6
   11614:	|  |     |  |      movea.l 24(sp),a1
   11618:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1161c:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   11620:	|  |     |  |      move.l 36(sp),20(sp)
   11626:	|  |     |  |      move.l 19c50 <SysBase>,d0
   1162c:	|  |     |  |      movea.l d0,a6
   1162e:	|  |     |  |      movea.l 20(sp),a1
   11632:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   11636:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1163a:	|  |     |  |      movea.l 64(sp),a0
   1163e:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   11644:	|  |     |  \----> tst.l 64(sp)
   11648:	|  |     \-------- bne.w 115a6 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1164c:	|  |               move.l 68(sp),d0
   11650:	|  +-------------- bra.w 11728 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   11654:	|  |               moveq #10,d0
   11656:	|  |               move.l d0,16(sp)
   1165a:	|  |               clr.l 12(sp)
   1165e:	|  |               move.l 19c50 <SysBase>,d0
   11664:	|  |               movea.l d0,a6
   11666:	|  |               move.l 16(sp),d0
   1166a:	|  |               move.l 12(sp),d1
   1166e:	|  |               jsr -684(a6)
   11672:	|  |               move.l d0,8(sp)
   11676:	|  |               move.l 8(sp),d0
   1167a:	|  |               move.l d0,4(sp)
			if (! buff) {
   1167e:	|  |           /-- bne.s 11694 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   11680:	|  |           |   pea 16ea7 <main_sludge.c.828d7d86+0x6e7>
   11686:	|  |           |   jsr 12ed6 <KPrintF>
   1168c:	|  |           |   addq.l #4,sp
				return NULL;
   1168e:	|  |           |   moveq #0,d0
   11690:	|  +-----------|-- bra.w 11728 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   11694:	|  |           \-> movea.l 84(sp),a0
   11698:	|  |               move.l 4(a0),d0
   1169c:	|  |               move.l d0,-(sp)
   1169e:	|  |               pea 16ed1 <main_sludge.c.828d7d86+0x711>
   116a4:	|  |               move.l 12(sp),-(sp)
   116a8:	|  |               jsr 1068c <sprintf>
   116ae:	|  |               lea 12(sp),sp
			return buff;
   116b2:	|  |               move.l 4(sp),d0
   116b6:	|  +-------------- bra.s 11728 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   116b8:	|  |               movea.l 84(sp),a0
   116bc:	|  |               move.l 4(a0),d0
   116c0:	|  |               move.l d0,-(sp)
   116c2:	|  |               jsr 165a <resourceNameFromNum>
   116c8:	|  |               addq.l #4,sp
   116ca:	|  |               move.l d0,-(sp)
   116cc:	|  |               pea 141a4 <cursors.c.412ac4f3+0x6a>
   116d2:	|  |               jsr 103ae <joinStrings>
   116d8:	|  |               addq.l #8,sp
   116da:	|  +-------------- bra.s 11728 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   116dc:	|  |               movea.l 84(sp),a0
   116e0:	|  |               move.l 4(a0),d0
   116e4:	|  |               move.l d0,-(sp)
   116e6:	|  |               jsr 9cd4 <findObjectType>
   116ec:	|  |               addq.l #4,sp
   116ee:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   116f2:	+--|-------------- beq.s 11706 <getTextFromAnyVar+0x2ae>
   116f4:	|  |               movea.l 40(sp),a0
   116f8:	|  |               move.l (a0),d0
   116fa:	|  |               move.l d0,-(sp)
   116fc:	|  |               jsr b8 <copyString>
   11702:	|  |               addq.l #4,sp
   11704:	|  +-------------- bra.s 11728 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   11706:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   11708:	   |               movea.l 84(sp),a0
   1170c:	   |               move.l (a0),d0
   1170e:	   |               add.l d0,d0
   11710:	   |               movea.l d0,a1
   11712:	   |               adda.l d0,a1
   11714:	   |               lea 18688 <typeName>,a0
   1171a:	   |               move.l (0,a1,a0.l),d0
   1171e:	   |               move.l d0,-(sp)
   11720:	   |               jsr b8 <copyString>
   11726:	   |               addq.l #4,sp
}
   11728:	   \-------------> movea.l (sp)+,a6
   1172a:	                   lea 76(sp),sp
   1172e:	                   rts

00011730 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   11730:	move.l 4(sp),-(sp)
   11734:	jsr 110d0 <unlinkVar>
   1173a:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1173c:	movea.l 4(sp),a0
   11740:	moveq #8,d0
   11742:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   11744:	movea.l 4(sp),a0
   11748:	move.l 8(sp),4(a0)
}
   1174e:	nop
   11750:	rts

00011752 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   11752:	move.l 4(sp),-(sp)
   11756:	jsr 110d0 <unlinkVar>
   1175c:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1175e:	movea.l 4(sp),a0
   11762:	moveq #9,d0
   11764:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   11766:	movea.l 4(sp),a0
   1176a:	move.l 8(sp),4(a0)
}
   11770:	nop
   11772:	rts

00011774 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   11774:	move.l 4(sp),-(sp)
   11778:	jsr 110d0 <unlinkVar>
   1177e:	addq.l #4,sp
	thisVar->varType = vT;
   11780:	movea.l 4(sp),a0
   11784:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   11788:	movea.l 4(sp),a0
   1178c:	move.l 12(sp),4(a0)
}
   11792:	nop
   11794:	rts

00011796 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   11796:	      /-- bra.s 117a8 <stackGetByIndex+0x12>
        vS = vS->next;
   11798:	/-----|-> movea.l 4(sp),a0
   1179c:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   117a2:	|     +-- bne.s 117a8 <stackGetByIndex+0x12>
            return NULL;
   117a4:	|     |   moveq #0,d0
   117a6:	|  /--|-- bra.s 117bc <stackGetByIndex+0x26>
    while (theIndex--) {
   117a8:	|  |  \-> move.l 8(sp),d0
   117ac:	|  |      move.l d0,d1
   117ae:	|  |      subq.l #1,d1
   117b0:	|  |      move.l d1,8(sp)
   117b4:	|  |      tst.l d0
   117b6:	\--|----- bne.s 11798 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   117b8:	   |      move.l 4(sp),d0
}
   117bc:	   \----> rts

000117be <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   117be:	          tst.l 4(sp)
   117c2:	      /-- bne.s 117d2 <stackFindLast+0x14>
		return NULL;
   117c4:	      |   moveq #0,d0
   117c6:	/-----|-- bra.s 117e0 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   117c8:	|  /--|-> movea.l 4(sp),a0
   117cc:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   117d2:	|  |  \-> movea.l 4(sp),a0
   117d6:	|  |      move.l 8(a0),d0
   117da:	|  \----- bne.s 117c8 <stackFindLast+0xa>

	return hunt;
   117dc:	|         move.l 4(sp),d0
}
   117e0:	\-------> rts

000117e2 <stackSize>:

int stackSize (const struct stackHandler * me) {
   117e2:	       subq.l #8,sp
	int r = 0;
   117e4:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   117e8:	       movea.l 12(sp),a0
   117ec:	       move.l (a0),(sp)
	while (a) {
   117ee:	   /-- bra.s 117fa <stackSize+0x18>
		r ++;
   117f0:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   117f4:	|  |   movea.l (sp),a0
   117f6:	|  |   move.l 8(a0),(sp)
	while (a) {
   117fa:	|  \-> tst.l (sp)
   117fc:	\----- bne.s 117f0 <stackSize+0xe>
	}
	return r;
   117fe:	       move.l 4(sp),d0
}
   11802:	       addq.l #8,sp
   11804:	       rts

00011806 <trimStack>:

void trimStack (struct variableStack ** stack) {
   11806:	subq.l #8,sp
   11808:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1180a:	movea.l 16(sp),a0
   1180e:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   11812:	movea.l 16(sp),a0
   11816:	movea.l (a0),a0
   11818:	move.l 8(a0),d0
   1181c:	movea.l 16(sp),a0
   11820:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   11822:	move.l 8(sp),d0
   11826:	move.l d0,-(sp)
   11828:	jsr 110d0 <unlinkVar>
   1182e:	addq.l #4,sp
	FreeVec(killMe);
   11830:	move.l 8(sp),4(sp)
   11836:	move.l 19c50 <SysBase>,d0
   1183c:	movea.l d0,a6
   1183e:	movea.l 4(sp),a1
   11842:	jsr -690(a6)
   11846:	nop
   11848:	movea.l (sp)+,a6
   1184a:	addq.l #8,sp
   1184c:	rts

0001184e <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1184e:	pea 16ed4 <main_sludge.c.828d7d86+0x714>
   11854:	jsr 12ed6 <KPrintF>
   1185a:	addq.l #4,sp
	return FALSE;
   1185c:	clr.w d0
}
   1185e:	rts

00011860 <stringWidth>:

int stringWidth (char * theText) {
   11860:	       subq.l #8,sp
	int a = 0;
   11862:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   11866:	       clr.l (sp)

	if (! fontTableSize) return 0;
   11868:	       move.l 19d50 <fontTableSize>,d0
   1186e:	/----- bne.s 11874 <stringWidth+0x14>
   11870:	|      moveq #0,d0
   11872:	|  /-- bra.s 11876 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   11874:	\--|-> move.l (sp),d0
}
   11876:	   \-> addq.l #8,sp
   11878:	       rts

0001187a <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   1187a:	pea 16efb <main_sludge.c.828d7d86+0x73b>
   11880:	jsr 12ed6 <KPrintF>
   11886:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   11888:	moveq #1,d0
}
   1188a:	rts

0001188c <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1188c:	       lea -16(sp),sp
   11890:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   11892:	       moveq #36,d0
   11894:	       move.l d0,16(sp)
   11898:	       clr.l 12(sp)
   1189c:	       move.l 19c50 <SysBase>,d0
   118a2:	       movea.l d0,a6
   118a4:	       move.l 16(sp),d0
   118a8:	       move.l 12(sp),d1
   118ac:	       jsr -684(a6)
   118b0:	       move.l d0,8(sp)
   118b4:	       move.l 8(sp),d0
   118b8:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   118bc:	   /-- bne.s 118c4 <addScreenRegion+0x38>
   118be:	   |   clr.w d0
   118c0:	/--|-- bra.w 11944 <addScreenRegion+0xb8>
    newRegion->di = di;
   118c4:	|  \-> movea.l 4(sp),a0
   118c8:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   118ce:	|      movea.l 4(sp),a0
   118d2:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   118d6:	|      movea.l 4(sp),a0
   118da:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   118e0:	|      movea.l 4(sp),a0
   118e4:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   118ea:	|      movea.l 4(sp),a0
   118ee:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   118f4:	|      movea.l 4(sp),a0
   118f8:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   118fe:	|      movea.l 4(sp),a0
   11902:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   11908:	|      move.l 52(sp),-(sp)
   1190c:	|      jsr 9dc4 <loadObjectType>
   11912:	|      addq.l #4,sp
   11914:	|      movea.l 4(sp),a0
   11918:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1191c:	|      move.l 19d54 <allScreenRegions>,d0
   11922:	|      movea.l 4(sp),a0
   11926:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1192a:	|      move.l 4(sp),19d54 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11932:	|      movea.l 4(sp),a0
   11936:	|      move.l 28(a0),d0
   1193a:	|      sne d0
   1193c:	|      neg.b d0
   1193e:	|      move.b d0,d0
   11940:	|      andi.w #255,d0
}
   11944:	\----> movea.l (sp)+,a6
   11946:	       lea 16(sp),sp
   1194a:	       rts

0001194c <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1194c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1194e:	             move.l 19d54 <allScreenRegions>,(sp)

	while (thisRegion) {
   11954:	   /-------- bra.s 11970 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11956:	/--|-------> movea.l (sp),a0
   11958:	|  |         movea.l 28(a0),a0
   1195c:	|  |         move.l 4(a0),d0
   11960:	|  |         cmp.l 8(sp),d0
   11964:	|  |     /-- bne.s 1196a <getRegionForObject+0x1e>
			return thisRegion;
   11966:	|  |     |   move.l (sp),d0
   11968:	|  |  /--|-- bra.s 11976 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   1196a:	|  |  |  \-> movea.l (sp),a0
   1196c:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   11970:	|  \--|----> tst.l (sp)
   11972:	\-----|----- bne.s 11956 <getRegionForObject+0xa>
	}

	return NULL;
   11974:	      |      moveq #0,d0
}
   11976:	      \----> addq.l #4,sp
   11978:	             rts

0001197a <killAllRegions>:

void killAllRegions () {
   1197a:	       subq.l #8,sp
   1197c:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1197e:	   /-- bra.s 119c0 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   11980:	/--|-> move.l 19d54 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   11988:	|  |   movea.l 19d54 <allScreenRegions>,a0
   1198e:	|  |   move.l 32(a0),d0
   11992:	|  |   move.l d0,19d54 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   11998:	|  |   movea.l 8(sp),a0
   1199c:	|  |   move.l 28(a0),d0
   119a0:	|  |   move.l d0,-(sp)
   119a2:	|  |   jsr a07c <removeObjectType>
   119a8:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   119aa:	|  |   move.l 8(sp),4(sp)
   119b0:	|  |   move.l 19c50 <SysBase>,d0
   119b6:	|  |   movea.l d0,a6
   119b8:	|  |   movea.l 4(sp),a1
   119bc:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   119c0:	|  \-> move.l 19d54 <allScreenRegions>,d0
   119c6:	\----- bne.s 11980 <killAllRegions+0x6>
	}
	overRegion = NULL;
   119c8:	       clr.l 19d58 <overRegion>
}
   119ce:	       nop
   119d0:	       movea.l (sp)+,a6
   119d2:	       addq.l #8,sp
   119d4:	       rts

000119d6 <loadRegions>:

void loadRegions (BPTR fp) {
   119d6:	       lea -24(sp),sp
   119da:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   119dc:	       move.l 32(sp),-(sp)
   119e0:	       jsr 6bc <get2bytes>
   119e6:	       addq.l #4,sp
   119e8:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   119ec:	       move.l #105812,20(sp)

	while (numRegions --) {
   119f4:	   /-- bra.w 11ad2 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   119f8:	/--|-> moveq #36,d0
   119fa:	|  |   move.l d0,16(sp)
   119fe:	|  |   clr.l 12(sp)
   11a02:	|  |   move.l 19c50 <SysBase>,d0
   11a08:	|  |   movea.l d0,a6
   11a0a:	|  |   move.l 16(sp),d0
   11a0e:	|  |   move.l 12(sp),d1
   11a12:	|  |   jsr -684(a6)
   11a16:	|  |   move.l d0,8(sp)
   11a1a:	|  |   move.l 8(sp),d0
   11a1e:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   11a22:	|  |   movea.l 20(sp),a0
   11a26:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   11a2a:	|  |   moveq #32,d1
   11a2c:	|  |   add.l 4(sp),d1
   11a30:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11a34:	|  |   move.l 32(sp),-(sp)
   11a38:	|  |   jsr 6bc <get2bytes>
   11a3e:	|  |   addq.l #4,sp
   11a40:	|  |   movea.l 4(sp),a0
   11a44:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11a46:	|  |   move.l 32(sp),-(sp)
   11a4a:	|  |   jsr 6bc <get2bytes>
   11a50:	|  |   addq.l #4,sp
   11a52:	|  |   movea.l 4(sp),a0
   11a56:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   11a5a:	|  |   move.l 32(sp),-(sp)
   11a5e:	|  |   jsr 6bc <get2bytes>
   11a64:	|  |   addq.l #4,sp
   11a66:	|  |   movea.l 4(sp),a0
   11a6a:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   11a6e:	|  |   move.l 32(sp),-(sp)
   11a72:	|  |   jsr 6bc <get2bytes>
   11a78:	|  |   addq.l #4,sp
   11a7a:	|  |   movea.l 4(sp),a0
   11a7e:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   11a82:	|  |   move.l 32(sp),-(sp)
   11a86:	|  |   jsr 6bc <get2bytes>
   11a8c:	|  |   addq.l #4,sp
   11a8e:	|  |   movea.l 4(sp),a0
   11a92:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   11a96:	|  |   move.l 32(sp),-(sp)
   11a9a:	|  |   jsr 6bc <get2bytes>
   11aa0:	|  |   addq.l #4,sp
   11aa2:	|  |   movea.l 4(sp),a0
   11aa6:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   11aaa:	|  |   move.l 32(sp),-(sp)
   11aae:	|  |   jsr 6bc <get2bytes>
   11ab4:	|  |   addq.l #4,sp
   11ab6:	|  |   movea.l 4(sp),a0
   11aba:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   11abe:	|  |   move.l 32(sp),-(sp)
   11ac2:	|  |   jsr 9d72 <loadObjectRef>
   11ac8:	|  |   addq.l #4,sp
   11aca:	|  |   movea.l 4(sp),a0
   11ace:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   11ad2:	|  \-> move.l 24(sp),d0
   11ad6:	|      move.l d0,d1
   11ad8:	|      subq.l #1,d1
   11ada:	|      move.l d1,24(sp)
   11ade:	|      tst.l d0
   11ae0:	\----- bne.w 119f8 <loadRegions+0x22>
	}
	* pointy = NULL;
   11ae4:	       movea.l 20(sp),a0
   11ae8:	       clr.l (a0)
}
   11aea:	       nop
   11aec:	       movea.l (sp)+,a6
   11aee:	       lea 24(sp),sp
   11af2:	       rts

00011af4 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   11af4:	             lea -12(sp),sp
   11af8:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   11afa:	             move.l #105812,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   11b02:	   /-------- bra.s 11b7c <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   11b04:	/--|-------> movea.l 12(sp),a0
   11b08:	|  |         movea.l (a0),a0
   11b0a:	|  |         movea.l 28(a0),a0
   11b0e:	|  |         move.l 4(a0),d0
   11b12:	|  |         cmp.l 20(sp),d0
   11b16:	|  |  /----- bne.s 11b6e <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   11b18:	|  |  |      movea.l 12(sp),a0
   11b1c:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   11b20:	|  |  |      movea.l 8(sp),a0
   11b24:	|  |  |      move.l 32(a0),d0
   11b28:	|  |  |      movea.l 12(sp),a0
   11b2c:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   11b2e:	|  |  |      movea.l 8(sp),a0
   11b32:	|  |  |      move.l 28(a0),d0
   11b36:	|  |  |      move.l d0,-(sp)
   11b38:	|  |  |      jsr a07c <removeObjectType>
   11b3e:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   11b40:	|  |  |      move.l 19d58 <overRegion>,d0
   11b46:	|  |  |      cmp.l 8(sp),d0
   11b4a:	|  |  |  /-- bne.s 11b52 <removeScreenRegion+0x5e>
   11b4c:	|  |  |  |   clr.l 19d58 <overRegion>
            FreeVec(killMe);
   11b52:	|  |  |  \-> move.l 8(sp),4(sp)
   11b58:	|  |  |      move.l 19c50 <SysBase>,d0
   11b5e:	|  |  |      movea.l d0,a6
   11b60:	|  |  |      movea.l 4(sp),a1
   11b64:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11b68:	|  |  |      clr.l 8(sp)
   11b6c:	|  +--|----- bra.s 11b7c <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   11b6e:	|  |  \----> movea.l 12(sp),a0
   11b72:	|  |         move.l (a0),d0
   11b74:	|  |         moveq #32,d1
   11b76:	|  |         add.l d0,d1
   11b78:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   11b7c:	|  \-------> movea.l 12(sp),a0
   11b80:	|            move.l (a0),d0
   11b82:	\----------- bne.s 11b04 <removeScreenRegion+0x10>
        }
    }
}
   11b84:	             nop
   11b86:	             nop
   11b88:	             movea.l (sp)+,a6
   11b8a:	             lea 12(sp),sp
   11b8e:	             rts

00011b90 <saveRegions>:

void saveRegions (BPTR fp) {
   11b90:	       subq.l #8,sp
	int numRegions = 0;
   11b92:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   11b96:	       move.l 19d54 <allScreenRegions>,(sp)
	while (thisRegion) {
   11b9c:	   /-- bra.s 11ba8 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   11b9e:	/--|-> movea.l (sp),a0
   11ba0:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   11ba4:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   11ba8:	|  \-> tst.l (sp)
   11baa:	\----- bne.s 11b9e <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   11bac:	       move.l 12(sp),-(sp)
   11bb0:	       move.l 8(sp),-(sp)
   11bb4:	       jsr 8d0 <put2bytes>
   11bba:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   11bbc:	       move.l 19d54 <allScreenRegions>,(sp)
	while (thisRegion) {
   11bc2:	/----- bra.w 11c6a <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   11bc6:	|  /-> movea.l (sp),a0
   11bc8:	|  |   move.l (a0),d0
   11bca:	|  |   move.l 12(sp),-(sp)
   11bce:	|  |   move.l d0,-(sp)
   11bd0:	|  |   jsr 8d0 <put2bytes>
   11bd6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   11bd8:	|  |   movea.l (sp),a0
   11bda:	|  |   move.l 4(a0),d0
   11bde:	|  |   move.l 12(sp),-(sp)
   11be2:	|  |   move.l d0,-(sp)
   11be4:	|  |   jsr 8d0 <put2bytes>
   11bea:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   11bec:	|  |   movea.l (sp),a0
   11bee:	|  |   move.l 8(a0),d0
   11bf2:	|  |   move.l 12(sp),-(sp)
   11bf6:	|  |   move.l d0,-(sp)
   11bf8:	|  |   jsr 8d0 <put2bytes>
   11bfe:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   11c00:	|  |   movea.l (sp),a0
   11c02:	|  |   move.l 12(a0),d0
   11c06:	|  |   move.l 12(sp),-(sp)
   11c0a:	|  |   move.l d0,-(sp)
   11c0c:	|  |   jsr 8d0 <put2bytes>
   11c12:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   11c14:	|  |   movea.l (sp),a0
   11c16:	|  |   move.l 16(a0),d0
   11c1a:	|  |   move.l 12(sp),-(sp)
   11c1e:	|  |   move.l d0,-(sp)
   11c20:	|  |   jsr 8d0 <put2bytes>
   11c26:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   11c28:	|  |   movea.l (sp),a0
   11c2a:	|  |   move.l 20(a0),d0
   11c2e:	|  |   move.l 12(sp),-(sp)
   11c32:	|  |   move.l d0,-(sp)
   11c34:	|  |   jsr 8d0 <put2bytes>
   11c3a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   11c3c:	|  |   movea.l (sp),a0
   11c3e:	|  |   move.l 24(a0),d0
   11c42:	|  |   move.l 12(sp),-(sp)
   11c46:	|  |   move.l d0,-(sp)
   11c48:	|  |   jsr 8d0 <put2bytes>
   11c4e:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   11c50:	|  |   movea.l (sp),a0
   11c52:	|  |   move.l 28(a0),d0
   11c56:	|  |   move.l 12(sp),-(sp)
   11c5a:	|  |   move.l d0,-(sp)
   11c5c:	|  |   jsr a11c <saveObjectRef>
   11c62:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11c64:	|  |   movea.l (sp),a0
   11c66:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11c6a:	\--|-> tst.l (sp)
   11c6c:	   \-- bne.w 11bc6 <saveRegions+0x36>
	}
}
   11c70:	       nop
   11c72:	       nop
   11c74:	       addq.l #8,sp
   11c76:	       rts

00011c78 <showBoxes>:

void showBoxes () {
   11c78:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   11c7a:	       move.l 19d54 <allScreenRegions>,(sp)

	while (huntRegion) {
   11c80:	/----- bra.w 11d1c <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   11c84:	|  /-> movea.l (sp),a0
   11c86:	|  |   move.l 12(a0),d0
   11c8a:	|  |   movea.l d0,a1
   11c8c:	|  |   movea.l (sp),a0
   11c8e:	|  |   move.l 4(a0),d0
   11c92:	|  |   move.l d0,d1
   11c94:	|  |   movea.l (sp),a0
   11c96:	|  |   move.l (a0),d0
   11c98:	|  |   move.l a1,-(sp)
   11c9a:	|  |   move.l d1,-(sp)
   11c9c:	|  |   move.l d0,-(sp)
   11c9e:	|  |   jsr 9600 <drawVerticalLine>
   11ca4:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   11ca8:	|  |   movea.l (sp),a0
   11caa:	|  |   move.l 12(a0),d0
   11cae:	|  |   movea.l d0,a1
   11cb0:	|  |   movea.l (sp),a0
   11cb2:	|  |   move.l 4(a0),d0
   11cb6:	|  |   move.l d0,d1
   11cb8:	|  |   movea.l (sp),a0
   11cba:	|  |   move.l 8(a0),d0
   11cbe:	|  |   move.l a1,-(sp)
   11cc0:	|  |   move.l d1,-(sp)
   11cc2:	|  |   move.l d0,-(sp)
   11cc4:	|  |   jsr 9600 <drawVerticalLine>
   11cca:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   11cce:	|  |   movea.l (sp),a0
   11cd0:	|  |   move.l 8(a0),d0
   11cd4:	|  |   movea.l d0,a1
   11cd6:	|  |   movea.l (sp),a0
   11cd8:	|  |   move.l 4(a0),d0
   11cdc:	|  |   move.l d0,d1
   11cde:	|  |   movea.l (sp),a0
   11ce0:	|  |   move.l (a0),d0
   11ce2:	|  |   move.l a1,-(sp)
   11ce4:	|  |   move.l d1,-(sp)
   11ce6:	|  |   move.l d0,-(sp)
   11ce8:	|  |   jsr 95da <drawHorizontalLine>
   11cee:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   11cf2:	|  |   movea.l (sp),a0
   11cf4:	|  |   move.l 8(a0),d0
   11cf8:	|  |   movea.l d0,a1
   11cfa:	|  |   movea.l (sp),a0
   11cfc:	|  |   move.l 12(a0),d0
   11d00:	|  |   move.l d0,d1
   11d02:	|  |   movea.l (sp),a0
   11d04:	|  |   move.l (a0),d0
   11d06:	|  |   move.l a1,-(sp)
   11d08:	|  |   move.l d1,-(sp)
   11d0a:	|  |   move.l d0,-(sp)
   11d0c:	|  |   jsr 95da <drawHorizontalLine>
   11d12:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   11d16:	|  |   movea.l (sp),a0
   11d18:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   11d1c:	\--|-> tst.l (sp)
   11d1e:	   \-- bne.w 11c84 <showBoxes+0xc>
	}
   11d22:	       nop
   11d24:	       nop
   11d26:	       addq.l #4,sp
   11d28:	       rts

00011d2a <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   11d2a:	       lea -32(sp),sp
   11d2e:	       move.l d3,-(sp)
   11d30:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11d32:	       move.l 60(sp),d0
   11d36:	       sub.l 52(sp),d0
   11d3a:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   11d3e:	       move.l 64(sp),d0
   11d42:	       sub.l 56(sp),d0
   11d46:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11d4a:	       move.l 68(sp),d0
   11d4e:	       sub.l 52(sp),d0
   11d52:	       move.l 36(sp),-(sp)
   11d56:	       move.l d0,-(sp)
   11d58:	       jsr 13888 <__mulsi3>
   11d5e:	       addq.l #8,sp
   11d60:	       move.l d0,d2
   11d62:	       move.l 72(sp),d0
   11d66:	       sub.l 56(sp),d0
   11d6a:	       move.l 32(sp),-(sp)
   11d6e:	       move.l d0,-(sp)
   11d70:	       jsr 13888 <__mulsi3>
   11d76:	       addq.l #8,sp
   11d78:	       add.l d2,d0
   11d7a:	       move.l d0,-(sp)
   11d7c:	       jsr 132ee <__floatsidf>
   11d82:	       addq.l #4,sp
   11d84:	       move.l d0,16(sp)
   11d88:	       move.l d1,20(sp)
   11d8c:	       move.l 16(sp),24(sp)
   11d92:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   11d98:	       move.l 36(sp),-(sp)
   11d9c:	       move.l 40(sp),-(sp)
   11da0:	       jsr 13888 <__mulsi3>
   11da6:	       addq.l #8,sp
   11da8:	       move.l d0,d2
   11daa:	       move.l 32(sp),-(sp)
   11dae:	       move.l 36(sp),-(sp)
   11db2:	       jsr 13888 <__mulsi3>
   11db8:	       addq.l #8,sp
   11dba:	       add.l d2,d0
   11dbc:	       move.l d0,-(sp)
   11dbe:	       jsr 132ee <__floatsidf>
   11dc4:	       addq.l #4,sp
   11dc6:	       move.l d1,-(sp)
   11dc8:	       move.l d0,-(sp)
   11dca:	       move.l 36(sp),-(sp)
   11dce:	       move.l 36(sp),-(sp)
   11dd2:	       jsr 13178 <__divdf3>
   11dd8:	       lea 16(sp),sp
   11ddc:	       move.l d0,8(sp)
   11de0:	       move.l d1,12(sp)
   11de4:	       move.l 8(sp),24(sp)
   11dea:	       move.l 12(sp),28(sp)

	if (m < 0) {
   11df0:	       clr.l -(sp)
   11df2:	       clr.l -(sp)
   11df4:	       move.l 36(sp),-(sp)
   11df8:	       move.l 36(sp),-(sp)
   11dfc:	       jsr 13506 <__ltdf2>
   11e02:	       lea 16(sp),sp
   11e06:	       tst.l d0
   11e08:	   /-- bge.s 11e1e <closestPointOnLine+0xf4>
		*closestX = x1;
   11e0a:	   |   movea.l 44(sp),a0
   11e0e:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   11e12:	   |   movea.l 48(sp),a0
   11e16:	   |   move.l 56(sp),(a0)
   11e1a:	/--|-- bra.w 11f00 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   11e1e:	|  \-> clr.l -(sp)
   11e20:	|      move.l #1072693248,-(sp)
   11e26:	|      move.l 36(sp),-(sp)
   11e2a:	|      move.l 36(sp),-(sp)
   11e2e:	|      jsr 1344c <__gtdf2>
   11e34:	|      lea 16(sp),sp
   11e38:	|      tst.l d0
   11e3a:	|  /-- ble.s 11e50 <closestPointOnLine+0x126>
		*closestX = x2;
   11e3c:	|  |   movea.l 44(sp),a0
   11e40:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11e44:	|  |   movea.l 48(sp),a0
   11e48:	|  |   move.l 64(sp),(a0)
   11e4c:	+--|-- bra.w 11f00 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   11e50:	|  \-> move.l 52(sp),-(sp)
   11e54:	|      jsr 132ee <__floatsidf>
   11e5a:	|      addq.l #4,sp
   11e5c:	|      move.l d0,d2
   11e5e:	|      move.l d1,d3
   11e60:	|      move.l 36(sp),-(sp)
   11e64:	|      jsr 132ee <__floatsidf>
   11e6a:	|      addq.l #4,sp
   11e6c:	|      move.l 28(sp),-(sp)
   11e70:	|      move.l 28(sp),-(sp)
   11e74:	|      move.l d1,-(sp)
   11e76:	|      move.l d0,-(sp)
   11e78:	|      jsr 1337e <__muldf3>
   11e7e:	|      lea 16(sp),sp
   11e82:	|      move.l d1,-(sp)
   11e84:	|      move.l d0,-(sp)
   11e86:	|      move.l d3,-(sp)
   11e88:	|      move.l d2,-(sp)
   11e8a:	|      jsr 13116 <__adddf3>
   11e90:	|      lea 16(sp),sp
   11e94:	|      move.l d1,-(sp)
   11e96:	|      move.l d0,-(sp)
   11e98:	|      jsr 13286 <__fixdfsi>
   11e9e:	|      addq.l #8,sp
   11ea0:	|      movea.l 44(sp),a0
   11ea4:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11ea6:	|      move.l 56(sp),-(sp)
   11eaa:	|      jsr 132ee <__floatsidf>
   11eb0:	|      addq.l #4,sp
   11eb2:	|      move.l d0,d2
   11eb4:	|      move.l d1,d3
   11eb6:	|      move.l 32(sp),-(sp)
   11eba:	|      jsr 132ee <__floatsidf>
   11ec0:	|      addq.l #4,sp
   11ec2:	|      move.l 28(sp),-(sp)
   11ec6:	|      move.l 28(sp),-(sp)
   11eca:	|      move.l d1,-(sp)
   11ecc:	|      move.l d0,-(sp)
   11ece:	|      jsr 1337e <__muldf3>
   11ed4:	|      lea 16(sp),sp
   11ed8:	|      move.l d1,-(sp)
   11eda:	|      move.l d0,-(sp)
   11edc:	|      move.l d3,-(sp)
   11ede:	|      move.l d2,-(sp)
   11ee0:	|      jsr 13116 <__adddf3>
   11ee6:	|      lea 16(sp),sp
   11eea:	|      move.l d1,-(sp)
   11eec:	|      move.l d0,-(sp)
   11eee:	|      jsr 13286 <__fixdfsi>
   11ef4:	|      addq.l #8,sp
   11ef6:	|      movea.l 48(sp),a0
   11efa:	|      move.l d0,(a0)
		return TRUE;
   11efc:	|      moveq #1,d0
   11efe:	|  /-- bra.s 11f02 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   11f00:	\--|-> clr.w d0
}
   11f02:	   \-> move.l (sp)+,d2
   11f04:	       move.l (sp)+,d3
   11f06:	       lea 32(sp),sp
   11f0a:	       rts

00011f0c <drawFloor>:

void drawFloor() {
   11f0c:	                lea -12(sp),sp
   11f10:	                move.l d3,-(sp)
   11f12:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11f14:	                clr.l 16(sp)
   11f18:	   /----------- bra.w 1212c <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   11f1c:	/--|----------> movea.l 19d5c <currentFloor>,a0
   11f22:	|  |            move.l 12(a0),d1
   11f26:	|  |            move.l 16(sp),d0
   11f2a:	|  |            lsl.l #3,d0
   11f2c:	|  |            movea.l d1,a0
   11f2e:	|  |            adda.l d0,a0
   11f30:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   11f34:	|  |            moveq #1,d0
   11f36:	|  |            cmp.l 8(sp),d0
   11f3a:	|  |  /-------- bge.w 12128 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   11f3e:	|  |  |         moveq #1,d0
   11f40:	|  |  |         move.l d0,12(sp)
   11f44:	|  |  |     /-- bra.w 1203e <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   11f48:	|  |  |  /--|-> movea.l 19d5c <currentFloor>,a0
   11f4e:	|  |  |  |  |   move.l 4(a0),d1
   11f52:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11f58:	|  |  |  |  |   movea.l 12(a0),a0
   11f5c:	|  |  |  |  |   move.l 16(sp),d0
   11f60:	|  |  |  |  |   lsl.l #3,d0
   11f62:	|  |  |  |  |   adda.l d0,a0
   11f64:	|  |  |  |  |   movea.l 4(a0),a0
   11f68:	|  |  |  |  |   move.l 12(sp),d0
   11f6c:	|  |  |  |  |   add.l d0,d0
   11f6e:	|  |  |  |  |   add.l d0,d0
   11f70:	|  |  |  |  |   adda.l d0,a0
   11f72:	|  |  |  |  |   move.l (a0),d0
   11f74:	|  |  |  |  |   lsl.l #3,d0
   11f76:	|  |  |  |  |   movea.l d1,a0
   11f78:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11f7a:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   11f7e:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11f84:	|  |  |  |  |   move.l 4(a0),d1
   11f88:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11f8e:	|  |  |  |  |   movea.l 12(a0),a0
   11f92:	|  |  |  |  |   move.l 16(sp),d0
   11f96:	|  |  |  |  |   lsl.l #3,d0
   11f98:	|  |  |  |  |   adda.l d0,a0
   11f9a:	|  |  |  |  |   movea.l 4(a0),a0
   11f9e:	|  |  |  |  |   move.l 12(sp),d0
   11fa2:	|  |  |  |  |   add.l d0,d0
   11fa4:	|  |  |  |  |   add.l d0,d0
   11fa6:	|  |  |  |  |   adda.l d0,a0
   11fa8:	|  |  |  |  |   move.l (a0),d0
   11faa:	|  |  |  |  |   lsl.l #3,d0
   11fac:	|  |  |  |  |   movea.l d1,a0
   11fae:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11fb0:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11fb2:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11fb8:	|  |  |  |  |   move.l 4(a0),d1
   11fbc:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11fc2:	|  |  |  |  |   movea.l 12(a0),a0
   11fc6:	|  |  |  |  |   move.l 16(sp),d0
   11fca:	|  |  |  |  |   lsl.l #3,d0
   11fcc:	|  |  |  |  |   adda.l d0,a0
   11fce:	|  |  |  |  |   movea.l 4(a0),a0
   11fd2:	|  |  |  |  |   move.l 12(sp),d0
   11fd6:	|  |  |  |  |   addi.l #1073741823,d0
   11fdc:	|  |  |  |  |   add.l d0,d0
   11fde:	|  |  |  |  |   add.l d0,d0
   11fe0:	|  |  |  |  |   adda.l d0,a0
   11fe2:	|  |  |  |  |   move.l (a0),d0
   11fe4:	|  |  |  |  |   lsl.l #3,d0
   11fe6:	|  |  |  |  |   movea.l d1,a0
   11fe8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11fea:	|  |  |  |  |   move.l 4(a0),d1
   11fee:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11ff4:	|  |  |  |  |   move.l 4(a0),d3
   11ff8:	|  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   11ffe:	|  |  |  |  |   movea.l 12(a0),a0
   12002:	|  |  |  |  |   move.l 16(sp),d0
   12006:	|  |  |  |  |   lsl.l #3,d0
   12008:	|  |  |  |  |   adda.l d0,a0
   1200a:	|  |  |  |  |   movea.l 4(a0),a0
   1200e:	|  |  |  |  |   move.l 12(sp),d0
   12012:	|  |  |  |  |   addi.l #1073741823,d0
   12018:	|  |  |  |  |   add.l d0,d0
   1201a:	|  |  |  |  |   add.l d0,d0
   1201c:	|  |  |  |  |   adda.l d0,a0
   1201e:	|  |  |  |  |   move.l (a0),d0
   12020:	|  |  |  |  |   lsl.l #3,d0
   12022:	|  |  |  |  |   movea.l d3,a0
   12024:	|  |  |  |  |   adda.l d0,a0
   12026:	|  |  |  |  |   move.l (a0),d0
   12028:	|  |  |  |  |   move.l d2,-(sp)
   1202a:	|  |  |  |  |   move.l a1,-(sp)
   1202c:	|  |  |  |  |   move.l d1,-(sp)
   1202e:	|  |  |  |  |   move.l d0,-(sp)
   12030:	|  |  |  |  |   jsr 13c4 <drawLine>
   12036:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1203a:	|  |  |  |  |   addq.l #1,12(sp)
   1203e:	|  |  |  |  \-> move.l 12(sp),d0
   12042:	|  |  |  |      cmp.l 8(sp),d0
   12046:	|  |  |  \----- blt.w 11f48 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1204a:	|  |  |         movea.l 19d5c <currentFloor>,a0
   12050:	|  |  |         move.l 4(a0),d1
   12054:	|  |  |         movea.l 19d5c <currentFloor>,a0
   1205a:	|  |  |         movea.l 12(a0),a0
   1205e:	|  |  |         move.l 16(sp),d0
   12062:	|  |  |         lsl.l #3,d0
   12064:	|  |  |         adda.l d0,a0
   12066:	|  |  |         movea.l 4(a0),a0
   1206a:	|  |  |         move.l 8(sp),d0
   1206e:	|  |  |         addi.l #1073741823,d0
   12074:	|  |  |         add.l d0,d0
   12076:	|  |  |         add.l d0,d0
   12078:	|  |  |         adda.l d0,a0
   1207a:	|  |  |         move.l (a0),d0
   1207c:	|  |  |         lsl.l #3,d0
   1207e:	|  |  |         movea.l d1,a0
   12080:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12082:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   12086:	|  |  |         movea.l 19d5c <currentFloor>,a0
   1208c:	|  |  |         move.l 4(a0),d1
   12090:	|  |  |         movea.l 19d5c <currentFloor>,a0
   12096:	|  |  |         movea.l 12(a0),a0
   1209a:	|  |  |         move.l 16(sp),d0
   1209e:	|  |  |         lsl.l #3,d0
   120a0:	|  |  |         adda.l d0,a0
   120a2:	|  |  |         movea.l 4(a0),a0
   120a6:	|  |  |         move.l 8(sp),d0
   120aa:	|  |  |         addi.l #1073741823,d0
   120b0:	|  |  |         add.l d0,d0
   120b2:	|  |  |         add.l d0,d0
   120b4:	|  |  |         adda.l d0,a0
   120b6:	|  |  |         move.l (a0),d0
   120b8:	|  |  |         lsl.l #3,d0
   120ba:	|  |  |         movea.l d1,a0
   120bc:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   120be:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   120c0:	|  |  |         movea.l 19d5c <currentFloor>,a0
   120c6:	|  |  |         move.l 4(a0),d1
   120ca:	|  |  |         movea.l 19d5c <currentFloor>,a0
   120d0:	|  |  |         movea.l 12(a0),a0
   120d4:	|  |  |         move.l 16(sp),d0
   120d8:	|  |  |         lsl.l #3,d0
   120da:	|  |  |         adda.l d0,a0
   120dc:	|  |  |         movea.l 4(a0),a0
   120e0:	|  |  |         move.l (a0),d0
   120e2:	|  |  |         lsl.l #3,d0
   120e4:	|  |  |         movea.l d1,a0
   120e6:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   120e8:	|  |  |         move.l 4(a0),d1
   120ec:	|  |  |         movea.l 19d5c <currentFloor>,a0
   120f2:	|  |  |         move.l 4(a0),d3
   120f6:	|  |  |         movea.l 19d5c <currentFloor>,a0
   120fc:	|  |  |         movea.l 12(a0),a0
   12100:	|  |  |         move.l 16(sp),d0
   12104:	|  |  |         lsl.l #3,d0
   12106:	|  |  |         adda.l d0,a0
   12108:	|  |  |         movea.l 4(a0),a0
   1210c:	|  |  |         move.l (a0),d0
   1210e:	|  |  |         lsl.l #3,d0
   12110:	|  |  |         movea.l d3,a0
   12112:	|  |  |         adda.l d0,a0
   12114:	|  |  |         move.l (a0),d0
   12116:	|  |  |         move.l d2,-(sp)
   12118:	|  |  |         move.l a1,-(sp)
   1211a:	|  |  |         move.l d1,-(sp)
   1211c:	|  |  |         move.l d0,-(sp)
   1211e:	|  |  |         jsr 13c4 <drawLine>
   12124:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12128:	|  |  \-------> addq.l #1,16(sp)
   1212c:	|  \----------> movea.l 19d5c <currentFloor>,a0
   12132:	|               move.l 8(a0),d0
   12136:	|               cmp.l 16(sp),d0
   1213a:	\-------------- bgt.w 11f1c <drawFloor+0x10>
        }
    }
}
   1213e:	                nop
   12140:	                nop
   12142:	                move.l (sp)+,d2
   12144:	                move.l (sp)+,d3
   12146:	                lea 12(sp),sp
   1214a:	                rts

0001214c <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1214c:	                      lea -12(sp),sp
    int sharedVertices = 0;
   12150:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   12154:	                      clr.l 4(sp)
   12158:	   /----------------- bra.w 121ea <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1215c:	/--|----------------> clr.l (sp)
   1215e:	|  |     /----------- bra.s 121da <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   12160:	|  |  /--|----------> movea.l 16(sp),a0
   12164:	|  |  |  |            move.l 4(a0),d1
   12168:	|  |  |  |            move.l 4(sp),d0
   1216c:	|  |  |  |            add.l d0,d0
   1216e:	|  |  |  |            add.l d0,d0
   12170:	|  |  |  |            movea.l d1,a0
   12172:	|  |  |  |            adda.l d0,a0
   12174:	|  |  |  |            move.l (a0),d1
   12176:	|  |  |  |            movea.l 20(sp),a0
   1217a:	|  |  |  |            movea.l 4(a0),a0
   1217e:	|  |  |  |            move.l (sp),d0
   12180:	|  |  |  |            add.l d0,d0
   12182:	|  |  |  |            add.l d0,d0
   12184:	|  |  |  |            adda.l d0,a0
   12186:	|  |  |  |            move.l (a0),d0
   12188:	|  |  |  |            cmp.l d1,d0
   1218a:	|  |  |  |  /-------- bne.s 121d8 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1218c:	|  |  |  |  |         move.l 8(sp),d0
   12190:	|  |  |  |  |         move.l d0,d1
   12192:	|  |  |  |  |         addq.l #1,d1
   12194:	|  |  |  |  |         move.l d1,8(sp)
   12198:	|  |  |  |  |         tst.l d0
   1219a:	|  |  |  |  |     /-- beq.s 121bc <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1219c:	|  |  |  |  |     |   movea.l 16(sp),a0
   121a0:	|  |  |  |  |     |   move.l 4(a0),d1
   121a4:	|  |  |  |  |     |   move.l 4(sp),d0
   121a8:	|  |  |  |  |     |   add.l d0,d0
   121aa:	|  |  |  |  |     |   add.l d0,d0
   121ac:	|  |  |  |  |     |   movea.l d1,a0
   121ae:	|  |  |  |  |     |   adda.l d0,a0
   121b0:	|  |  |  |  |     |   move.l (a0),d0
   121b2:	|  |  |  |  |     |   movea.l 28(sp),a0
   121b6:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   121b8:	|  |  |  |  |     |   moveq #1,d0
   121ba:	|  |  |  |  |  /--|-- bra.s 121fa <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   121bc:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   121c0:	|  |  |  |  |  |      move.l 4(a0),d1
   121c4:	|  |  |  |  |  |      move.l 4(sp),d0
   121c8:	|  |  |  |  |  |      add.l d0,d0
   121ca:	|  |  |  |  |  |      add.l d0,d0
   121cc:	|  |  |  |  |  |      movea.l d1,a0
   121ce:	|  |  |  |  |  |      adda.l d0,a0
   121d0:	|  |  |  |  |  |      move.l (a0),d0
   121d2:	|  |  |  |  |  |      movea.l 24(sp),a0
   121d6:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   121d8:	|  |  |  |  \--|----> addq.l #1,(sp)
   121da:	|  |  |  \-----|----> movea.l 20(sp),a0
   121de:	|  |  |        |      move.l (a0),d0
   121e0:	|  |  |        |      cmp.l (sp),d0
   121e2:	|  |  \--------|----- bgt.w 12160 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   121e6:	|  |           |      addq.l #1,4(sp)
   121ea:	|  \-----------|----> movea.l 16(sp),a0
   121ee:	|              |      move.l (a0),d0
   121f0:	|              |      cmp.l 4(sp),d0
   121f4:	\--------------|----- bgt.w 1215c <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   121f8:	               |      clr.w d0
}
   121fa:	               \----> lea 12(sp),sp
   121fe:	                      rts

00012200 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   12200:	movea.l 19d5c <currentFloor>,a0
   12206:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1220a:	movea.l 19d5c <currentFloor>,a0
   12210:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   12214:	movea.l 19d5c <currentFloor>,a0
   1221a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1221e:	movea.l 19d5c <currentFloor>,a0
   12224:	clr.l 16(a0)
}
   12228:	nop
   1222a:	rts

0001222c <inFloor>:

int inFloor (int x, int y) {
   1222c:	          subq.l #8,sp
	int i, r = -1;
   1222e:	          moveq #-1,d0
   12230:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12232:	          clr.l 4(sp)
   12236:	   /----- bra.s 1226a <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   12238:	/--|----> movea.l 19d5c <currentFloor>,a0
   1223e:	|  |      move.l 12(a0),d1
   12242:	|  |      move.l 4(sp),d0
   12246:	|  |      lsl.l #3,d0
   12248:	|  |      add.l d1,d0
   1224a:	|  |      move.l 16(sp),-(sp)
   1224e:	|  |      move.l 16(sp),-(sp)
   12252:	|  |      move.l d0,-(sp)
   12254:	|  |      jsr 12436 <pointInFloorPolygon>
   1225a:	|  |      lea 12(sp),sp
   1225e:	|  |      tst.w d0
   12260:	|  |  /-- beq.s 12266 <inFloor+0x3a>
			r = i;
   12262:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12266:	|  |  \-> addq.l #1,4(sp)
   1226a:	|  \----> movea.l 19d5c <currentFloor>,a0
   12270:	|         move.l 8(a0),d0
   12274:	|         cmp.l 4(sp),d0
   12278:	\-------- bgt.s 12238 <inFloor+0xc>

	return r;
   1227a:	          move.l (sp),d0
}
   1227c:	          addq.l #8,sp
   1227e:	          rts

00012280 <initFloor>:

BOOL initFloor () {
   12280:	       lea -12(sp),sp
   12284:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   12286:	       moveq #20,d0
   12288:	       move.l d0,12(sp)
   1228c:	       clr.l 8(sp)
   12290:	       move.l 19c50 <SysBase>,d0
   12296:	       movea.l d0,a6
   12298:	       move.l 12(sp),d0
   1229c:	       move.l 8(sp),d1
   122a0:	       jsr -684(a6)
   122a4:	       move.l d0,4(sp)
   122a8:	       move.l 4(sp),d0
   122ac:	       move.l d0,19d5c <currentFloor>

    if(currentFloor == 0) {
   122b2:	       move.l 19d5c <currentFloor>,d0
   122b8:	/----- bne.s 122cc <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   122ba:	|      pea 16f1e <main_sludge.c.828d7d86+0x75e>
   122c0:	|      jsr 12ed6 <KPrintF>
   122c6:	|      addq.l #4,sp
        return FALSE;
   122c8:	|      clr.w d0
   122ca:	|  /-- bra.s 122d4 <initFloor+0x54>
    }

	noFloor ();
   122cc:	\--|-> jsr 12200 <noFloor>
	return TRUE;
   122d2:	   |   moveq #1,d0
}
   122d4:	   \-> movea.l (sp)+,a6
   122d6:	       lea 12(sp),sp
   122da:	       rts

000122dc <killFloor>:

void killFloor () {
   122dc:	       lea -24(sp),sp
   122e0:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   122e2:	       clr.l 24(sp)
   122e6:	   /-- bra.s 12340 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   122e8:	/--|-> movea.l 19d5c <currentFloor>,a0
   122ee:	|  |   move.l 12(a0),d1
   122f2:	|  |   move.l 24(sp),d0
   122f6:	|  |   lsl.l #3,d0
   122f8:	|  |   movea.l d1,a0
   122fa:	|  |   adda.l d0,a0
   122fc:	|  |   move.l 4(a0),8(sp)
   12302:	|  |   move.l 19c50 <SysBase>,d0
   12308:	|  |   movea.l d0,a6
   1230a:	|  |   movea.l 8(sp),a1
   1230e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   12312:	|  |   movea.l 19d5c <currentFloor>,a0
   12318:	|  |   move.l 16(a0),d1
   1231c:	|  |   move.l 24(sp),d0
   12320:	|  |   add.l d0,d0
   12322:	|  |   add.l d0,d0
   12324:	|  |   movea.l d1,a0
   12326:	|  |   adda.l d0,a0
   12328:	|  |   move.l (a0),4(sp)
   1232c:	|  |   move.l 19c50 <SysBase>,d0
   12332:	|  |   movea.l d0,a6
   12334:	|  |   movea.l 4(sp),a1
   12338:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1233c:	|  |   addq.l #1,24(sp)
   12340:	|  \-> movea.l 19d5c <currentFloor>,a0
   12346:	|      move.l 8(a0),d0
   1234a:	|      cmp.l 24(sp),d0
   1234e:	\----- bgt.s 122e8 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   12350:	       movea.l 19d5c <currentFloor>,a0
   12356:	       move.l 12(a0),20(sp)
   1235c:	       move.l 19c50 <SysBase>,d0
   12362:	       movea.l d0,a6
   12364:	       movea.l 20(sp),a1
   12368:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1236c:	       movea.l 19d5c <currentFloor>,a0
   12372:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   12376:	       movea.l 19d5c <currentFloor>,a0
   1237c:	       move.l 4(a0),16(sp)
   12382:	       move.l 19c50 <SysBase>,d0
   12388:	       movea.l d0,a6
   1238a:	       movea.l 16(sp),a1
   1238e:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   12392:	       movea.l 19d5c <currentFloor>,a0
   12398:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1239c:	       movea.l 19d5c <currentFloor>,a0
   123a2:	       move.l 16(a0),12(sp)
   123a8:	       move.l 19c50 <SysBase>,d0
   123ae:	       movea.l d0,a6
   123b0:	       movea.l 12(sp),a1
   123b4:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   123b8:	       movea.l 19d5c <currentFloor>,a0
   123be:	       clr.l 16(a0)
}
   123c2:	       nop
   123c4:	       movea.l (sp)+,a6
   123c6:	       lea 24(sp),sp
   123ca:	       rts

000123cc <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   123cc:	                   lea -12(sp),sp
	int sharedVertices = 0;
   123d0:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   123d4:	                   clr.l 4(sp)
   123d8:	   /-------------- bra.s 12424 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   123da:	/--|-------------> clr.l (sp)
   123dc:	|  |     /-------- bra.s 12418 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   123de:	|  |  /--|-------> move.l 20(sp),d1
   123e2:	|  |  |  |         move.l 4(sp),d0
   123e6:	|  |  |  |         add.l d0,d0
   123e8:	|  |  |  |         add.l d0,d0
   123ea:	|  |  |  |         movea.l d1,a0
   123ec:	|  |  |  |         adda.l d0,a0
   123ee:	|  |  |  |         move.l (a0),d1
   123f0:	|  |  |  |         movea.l 28(sp),a0
   123f4:	|  |  |  |         move.l (sp),d0
   123f6:	|  |  |  |         add.l d0,d0
   123f8:	|  |  |  |         add.l d0,d0
   123fa:	|  |  |  |         adda.l d0,a0
   123fc:	|  |  |  |         move.l (a0),d0
   123fe:	|  |  |  |         cmp.l d1,d0
   12400:	|  |  |  |     /-- bne.s 12416 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   12402:	|  |  |  |     |   move.l 8(sp),d0
   12406:	|  |  |  |     |   move.l d0,d1
   12408:	|  |  |  |     |   addq.l #1,d1
   1240a:	|  |  |  |     |   move.l d1,8(sp)
   1240e:	|  |  |  |     |   tst.l d0
   12410:	|  |  |  |     +-- beq.s 12416 <polysShareSide+0x4a>
   12412:	|  |  |  |     |   moveq #1,d0
   12414:	|  |  |  |  /--|-- bra.s 12430 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   12416:	|  |  |  |  |  \-> addq.l #1,(sp)
   12418:	|  |  |  \--|----> move.l 24(sp),d0
   1241c:	|  |  |     |      cmp.l (sp),d0
   1241e:	|  |  \-----|----- bgt.s 123de <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   12420:	|  |        |      addq.l #1,4(sp)
   12424:	|  \--------|----> move.l 16(sp),d0
   12428:	|           |      cmp.l 4(sp),d0
   1242c:	\-----------|----- bgt.s 123da <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1242e:	            |      clr.w d0
}
   12430:	            \----> lea 12(sp),sp
   12434:	                   rts

00012436 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   12436:	             lea -28(sp),sp
   1243a:	             move.l d3,-(sp)
   1243c:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1243e:	             clr.l 32(sp)
   12442:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   12446:	             movea.l 40(sp),a0
   1244a:	             move.l (a0),d0
   1244c:	             move.l d0,d1
   1244e:	             subq.l #1,d1
   12450:	             move.l d1,28(sp)
   12454:	   /-------- bra.w 1264e <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   12458:	/--|-------> movea.l 19d5c <currentFloor>,a0
   1245e:	|  |         move.l 4(a0),d1
   12462:	|  |         movea.l 40(sp),a0
   12466:	|  |         movea.l 4(a0),a0
   1246a:	|  |         move.l 32(sp),d0
   1246e:	|  |         add.l d0,d0
   12470:	|  |         add.l d0,d0
   12472:	|  |         adda.l d0,a0
   12474:	|  |         move.l (a0),d0
   12476:	|  |         lsl.l #3,d0
   12478:	|  |         movea.l d1,a0
   1247a:	|  |         adda.l d0,a0
   1247c:	|  |         move.l (a0),d0
   1247e:	|  |         move.l d0,-(sp)
   12480:	|  |         jsr 1332e <__floatsisf>
   12486:	|  |         addq.l #4,sp
   12488:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1248c:	|  |         movea.l 19d5c <currentFloor>,a0
   12492:	|  |         move.l 4(a0),d1
   12496:	|  |         movea.l 40(sp),a0
   1249a:	|  |         movea.l 4(a0),a0
   1249e:	|  |         move.l 32(sp),d0
   124a2:	|  |         add.l d0,d0
   124a4:	|  |         add.l d0,d0
   124a6:	|  |         adda.l d0,a0
   124a8:	|  |         move.l (a0),d0
   124aa:	|  |         lsl.l #3,d0
   124ac:	|  |         movea.l d1,a0
   124ae:	|  |         adda.l d0,a0
   124b0:	|  |         move.l 4(a0),d0
   124b4:	|  |         move.l d0,-(sp)
   124b6:	|  |         jsr 1332e <__floatsisf>
   124bc:	|  |         addq.l #4,sp
   124be:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   124c2:	|  |         movea.l 19d5c <currentFloor>,a0
   124c8:	|  |         move.l 4(a0),d1
   124cc:	|  |         movea.l 40(sp),a0
   124d0:	|  |         movea.l 4(a0),a0
   124d4:	|  |         move.l 28(sp),d0
   124d8:	|  |         add.l d0,d0
   124da:	|  |         add.l d0,d0
   124dc:	|  |         adda.l d0,a0
   124de:	|  |         move.l (a0),d0
   124e0:	|  |         lsl.l #3,d0
   124e2:	|  |         movea.l d1,a0
   124e4:	|  |         adda.l d0,a0
   124e6:	|  |         move.l (a0),d0
   124e8:	|  |         move.l d0,-(sp)
   124ea:	|  |         jsr 1332e <__floatsisf>
   124f0:	|  |         addq.l #4,sp
   124f2:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   124f6:	|  |         movea.l 19d5c <currentFloor>,a0
   124fc:	|  |         move.l 4(a0),d1
   12500:	|  |         movea.l 40(sp),a0
   12504:	|  |         movea.l 4(a0),a0
   12508:	|  |         move.l 28(sp),d0
   1250c:	|  |         add.l d0,d0
   1250e:	|  |         add.l d0,d0
   12510:	|  |         adda.l d0,a0
   12512:	|  |         move.l (a0),d0
   12514:	|  |         lsl.l #3,d0
   12516:	|  |         movea.l d1,a0
   12518:	|  |         adda.l d0,a0
   1251a:	|  |         move.l 4(a0),d0
   1251e:	|  |         move.l d0,-(sp)
   12520:	|  |         jsr 1332e <__floatsisf>
   12526:	|  |         addq.l #4,sp
   12528:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1252c:	|  |         move.l 48(sp),-(sp)
   12530:	|  |         jsr 1332e <__floatsisf>
   12536:	|  |         addq.l #4,sp
   12538:	|  |         move.l d0,-(sp)
   1253a:	|  |         move.l 20(sp),-(sp)
   1253e:	|  |         jsr 134d0 <__lesf2>
   12544:	|  |         addq.l #8,sp
   12546:	|  |         tst.l d0
   12548:	|  |     /-- bgt.s 12568 <pointInFloorPolygon+0x132>
   1254a:	|  |     |   move.l 48(sp),-(sp)
   1254e:	|  |     |   jsr 1332e <__floatsisf>
   12554:	|  |     |   addq.l #4,sp
   12556:	|  |     |   move.l d0,-(sp)
   12558:	|  |     |   move.l 12(sp),-(sp)
   1255c:	|  |     |   jsr 1349a <__gtsf2>
   12562:	|  |     |   addq.l #8,sp
   12564:	|  |     |   tst.l d0
   12566:	|  |  /--|-- bgt.s 125a8 <pointInFloorPolygon+0x172>
   12568:	|  |  |  \-> move.l 48(sp),-(sp)
   1256c:	|  |  |      jsr 1332e <__floatsisf>
   12572:	|  |  |      addq.l #4,sp
   12574:	|  |  |      move.l d0,-(sp)
   12576:	|  |  |      move.l 12(sp),-(sp)
   1257a:	|  |  |      jsr 134d0 <__lesf2>
   12580:	|  |  |      addq.l #8,sp
   12582:	|  |  |      tst.l d0
   12584:	|  |  |  /-- bgt.w 1263e <pointInFloorPolygon+0x208>
   12588:	|  |  |  |   move.l 48(sp),-(sp)
   1258c:	|  |  |  |   jsr 1332e <__floatsisf>
   12592:	|  |  |  |   addq.l #4,sp
   12594:	|  |  |  |   move.l d0,-(sp)
   12596:	|  |  |  |   move.l 20(sp),-(sp)
   1259a:	|  |  |  |   jsr 1349a <__gtsf2>
   125a0:	|  |  |  |   addq.l #8,sp
   125a2:	|  |  |  |   tst.l d0
   125a4:	|  |  |  +-- ble.w 1263e <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   125a8:	|  |  \--|-> move.l 44(sp),-(sp)
   125ac:	|  |     |   jsr 1332e <__floatsisf>
   125b2:	|  |     |   addq.l #4,sp
   125b4:	|  |     |   move.l d0,d3
   125b6:	|  |     |   move.l 20(sp),-(sp)
   125ba:	|  |     |   move.l 16(sp),-(sp)
   125be:	|  |     |   jsr 13622 <__subsf3>
   125c4:	|  |     |   addq.l #8,sp
   125c6:	|  |     |   move.l d0,d2
   125c8:	|  |     |   move.l 48(sp),-(sp)
   125cc:	|  |     |   jsr 1332e <__floatsisf>
   125d2:	|  |     |   addq.l #4,sp
   125d4:	|  |     |   move.l 16(sp),-(sp)
   125d8:	|  |     |   move.l d0,-(sp)
   125da:	|  |     |   jsr 13622 <__subsf3>
   125e0:	|  |     |   addq.l #8,sp
   125e2:	|  |     |   move.l d0,-(sp)
   125e4:	|  |     |   move.l d2,-(sp)
   125e6:	|  |     |   jsr 133e0 <__mulsf3>
   125ec:	|  |     |   addq.l #8,sp
   125ee:	|  |     |   move.l d0,d2
   125f0:	|  |     |   move.l 16(sp),-(sp)
   125f4:	|  |     |   move.l 12(sp),-(sp)
   125f8:	|  |     |   jsr 13622 <__subsf3>
   125fe:	|  |     |   addq.l #8,sp
   12600:	|  |     |   move.l d0,-(sp)
   12602:	|  |     |   move.l d2,-(sp)
   12604:	|  |     |   jsr 131da <__divsf3>
   1260a:	|  |     |   addq.l #8,sp
   1260c:	|  |     |   move.l 20(sp),-(sp)
   12610:	|  |     |   move.l d0,-(sp)
   12612:	|  |     |   jsr 130e0 <__addsf3>
   12618:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1261a:	|  |     |   move.l d0,-(sp)
   1261c:	|  |     |   move.l d3,-(sp)
   1261e:	|  |     |   jsr 13554 <__ltsf2>
   12624:	|  |     |   addq.l #8,sp
   12626:	|  |     |   tst.l d0
   12628:	|  |     +-- bge.s 1263e <pointInFloorPolygon+0x208>

			c = !c;
   1262a:	|  |     |   tst.l 24(sp)
   1262e:	|  |     |   seq d0
   12630:	|  |     |   neg.b d0
   12632:	|  |     |   move.b d0,d0
   12634:	|  |     |   andi.l #255,d0
   1263a:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1263e:	|  |     \-> move.l 32(sp),d0
   12642:	|  |         move.l d0,d1
   12644:	|  |         addq.l #1,d1
   12646:	|  |         move.l d1,32(sp)
   1264a:	|  |         move.l d0,28(sp)
   1264e:	|  \-------> movea.l 40(sp),a0
   12652:	|            move.l (a0),d0
   12654:	|            cmp.l 32(sp),d0
   12658:	\----------- bgt.w 12458 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1265c:	             tst.l 24(sp)
   12660:	             sne d0
   12662:	             neg.b d0
   12664:	             move.b d0,d0
   12666:	             andi.w #255,d0
}
   1266a:	             move.l (sp)+,d2
   1266c:	             move.l (sp)+,d3
   1266e:	             lea 28(sp),sp
   12672:	             rts

00012674 <setFloor>:

BOOL setFloor (int fileNum) {
   12674:	                               lea -132(sp),sp
   12678:	                               move.l a6,-(sp)
   1267a:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1267c:	                               jsr 122dc <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   12682:	                               move.l 144(sp),-(sp)
   12686:	                               jsr 44a2 <openFileFromNum>
   1268c:	                               addq.l #4,sp
   1268e:	                               tst.l d0
   12690:	                           /-- bne.s 12698 <setFloor+0x24>
   12692:	                           |   clr.w d0
   12694:	/--------------------------|-- bra.w 12de4 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   12698:	|                          \-> movea.l 19d5c <currentFloor>,a0
   1269e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   126a2:	|                              move.l 19c38 <bigDataFile>,118(sp)
   126aa:	|                              move.l 19c58 <DOSBase>,d0
   126b0:	|                              movea.l d0,a6
   126b2:	|                              move.l 118(sp),d1
   126b6:	|                              jsr -306(a6)
   126ba:	|                              move.l d0,114(sp)
   126be:	|                              move.l 114(sp),d0
   126c2:	|                              movea.l 19d5c <currentFloor>,a0
   126c8:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   126cc:	|                              movea.l 19d5c <currentFloor>,a0
   126d2:	|                              move.l 8(a0),d0
   126d6:	|                              lsl.l #3,d0
   126d8:	|                              move.l d0,110(sp)
   126dc:	|                              clr.l 106(sp)
   126e0:	|                              move.l 19c50 <SysBase>,d0
   126e6:	|                              movea.l d0,a6
   126e8:	|                              move.l 110(sp),d0
   126ec:	|                              move.l 106(sp),d1
   126f0:	|                              jsr -684(a6)
   126f4:	|                              move.l d0,102(sp)
   126f8:	|                              move.l 102(sp),d0
   126fc:	|                              movea.l 19d5c <currentFloor>,a0
   12702:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   12706:	|                              movea.l 19d5c <currentFloor>,a0
   1270c:	|                              move.l 12(a0),d0
   12710:	|                          /-- bne.s 12726 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   12712:	|                          |   pea 16f42 <main_sludge.c.828d7d86+0x782>
   12718:	|                          |   jsr 12ed6 <KPrintF>
   1271e:	|                          |   addq.l #4,sp
		return FALSE;
   12720:	|                          |   clr.w d0
   12722:	+--------------------------|-- bra.w 12de4 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12726:	|                          \-> clr.l 136(sp)
   1272a:	|                    /-------- bra.w 12842 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1272e:	|                 /--|-------> move.l 19c38 <bigDataFile>,26(sp)
   12736:	|                 |  |         move.l 19c58 <DOSBase>,d0
   1273c:	|                 |  |         movea.l d0,a6
   1273e:	|                 |  |         move.l 26(sp),d1
   12742:	|                 |  |         jsr -306(a6)
   12746:	|                 |  |         move.l d0,22(sp)
   1274a:	|                 |  |         move.l 22(sp),d1
   1274e:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   12754:	|                 |  |         movea.l 12(a0),a0
   12758:	|                 |  |         move.l 136(sp),d0
   1275c:	|                 |  |         lsl.l #3,d0
   1275e:	|                 |  |         adda.l d0,a0
   12760:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   12762:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   12768:	|                 |  |         move.l 12(a0),d1
   1276c:	|                 |  |         move.l 136(sp),d0
   12770:	|                 |  |         lsl.l #3,d0
   12772:	|                 |  |         movea.l d1,a0
   12774:	|                 |  |         adda.l d0,a0
   12776:	|                 |  |         move.l (a0),d0
   12778:	|                 |  |         add.l d0,d0
   1277a:	|                 |  |         add.l d0,d0
   1277c:	|                 |  |         move.l d0,18(sp)
   12780:	|                 |  |         clr.l 14(sp)
   12784:	|                 |  |         move.l 19c50 <SysBase>,d0
   1278a:	|                 |  |         movea.l d0,a6
   1278c:	|                 |  |         move.l 18(sp),d0
   12790:	|                 |  |         move.l 14(sp),d1
   12794:	|                 |  |         jsr -684(a6)
   12798:	|                 |  |         move.l d0,10(sp)
   1279c:	|                 |  |         move.l 10(sp),d1
   127a0:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   127a6:	|                 |  |         movea.l 12(a0),a0
   127aa:	|                 |  |         move.l 136(sp),d0
   127ae:	|                 |  |         lsl.l #3,d0
   127b0:	|                 |  |         adda.l d0,a0
   127b2:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   127b6:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   127bc:	|                 |  |         move.l 12(a0),d1
   127c0:	|                 |  |         move.l 136(sp),d0
   127c4:	|                 |  |         lsl.l #3,d0
   127c6:	|                 |  |         movea.l d1,a0
   127c8:	|                 |  |         adda.l d0,a0
   127ca:	|                 |  |         move.l 4(a0),d0
   127ce:	|                 |  |     /-- bne.s 127e4 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   127d0:	|                 |  |     |   pea 16f42 <main_sludge.c.828d7d86+0x782>
   127d6:	|                 |  |     |   jsr 12ed6 <KPrintF>
   127dc:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   127de:	|                 |  |     |   clr.w d0
   127e0:	+-----------------|--|-----|-- bra.w 12de4 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   127e4:	|                 |  |     \-> clr.l 132(sp)
   127e8:	|                 |  |     /-- bra.s 12822 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   127ea:	|                 |  |  /--|-> move.l 19c38 <bigDataFile>,d1
   127f0:	|                 |  |  |  |   movea.l 19d5c <currentFloor>,a0
   127f6:	|                 |  |  |  |   movea.l 12(a0),a0
   127fa:	|                 |  |  |  |   move.l 136(sp),d0
   127fe:	|                 |  |  |  |   lsl.l #3,d0
   12800:	|                 |  |  |  |   adda.l d0,a0
   12802:	|                 |  |  |  |   movea.l 4(a0),a0
   12806:	|                 |  |  |  |   move.l 132(sp),d0
   1280a:	|                 |  |  |  |   add.l d0,d0
   1280c:	|                 |  |  |  |   add.l d0,d0
   1280e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   12812:	|                 |  |  |  |   move.l d1,-(sp)
   12814:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1281a:	|                 |  |  |  |   addq.l #4,sp
   1281c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1281e:	|                 |  |  |  |   addq.l #1,132(sp)
   12822:	|                 |  |  |  \-> movea.l 19d5c <currentFloor>,a0
   12828:	|                 |  |  |      move.l 12(a0),d1
   1282c:	|                 |  |  |      move.l 136(sp),d0
   12830:	|                 |  |  |      lsl.l #3,d0
   12832:	|                 |  |  |      movea.l d1,a0
   12834:	|                 |  |  |      adda.l d0,a0
   12836:	|                 |  |  |      move.l (a0),d0
   12838:	|                 |  |  |      cmp.l 132(sp),d0
   1283c:	|                 |  |  \----- bgt.s 127ea <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1283e:	|                 |  |         addq.l #1,136(sp)
   12842:	|                 |  \-------> movea.l 19d5c <currentFloor>,a0
   12848:	|                 |            move.l 8(a0),d0
   1284c:	|                 |            cmp.l 136(sp),d0
   12850:	|                 \----------- bgt.w 1272e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   12854:	|                              move.l 19c38 <bigDataFile>,d0
   1285a:	|                              move.l d0,-(sp)
   1285c:	|                              jsr 6bc <get2bytes>
   12862:	|                              addq.l #4,sp
   12864:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   12868:	|                              move.l 136(sp),d0
   1286c:	|                              lsl.l #3,d0
   1286e:	|                              move.l d0,98(sp)
   12872:	|                              clr.l 94(sp)
   12876:	|                              move.l 19c50 <SysBase>,d0
   1287c:	|                              movea.l d0,a6
   1287e:	|                              move.l 98(sp),d0
   12882:	|                              move.l 94(sp),d1
   12886:	|                              jsr -684(a6)
   1288a:	|                              move.l d0,90(sp)
   1288e:	|                              move.l 90(sp),d0
   12892:	|                              movea.l 19d5c <currentFloor>,a0
   12898:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1289c:	|                              movea.l 19d5c <currentFloor>,a0
   128a2:	|                              move.l 4(a0),d0
   128a6:	|                          /-- bne.s 128bc <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   128a8:	|                          |   pea 16f42 <main_sludge.c.828d7d86+0x782>
   128ae:	|                          |   jsr 12ed6 <KPrintF>
   128b4:	|                          |   addq.l #4,sp
		return FALSE;
   128b6:	|                          |   clr.w d0
   128b8:	+--------------------------|-- bra.w 12de4 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   128bc:	|                          \-> clr.l 132(sp)
   128c0:	|                          /-- bra.s 12914 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   128c2:	|                       /--|-> move.l 19c38 <bigDataFile>,d1
   128c8:	|                       |  |   movea.l 19d5c <currentFloor>,a0
   128ce:	|                       |  |   movea.l 4(a0),a0
   128d2:	|                       |  |   move.l 132(sp),d0
   128d6:	|                       |  |   lsl.l #3,d0
   128d8:	|                       |  |   lea (0,a0,d0.l),a2
   128dc:	|                       |  |   move.l d1,-(sp)
   128de:	|                       |  |   jsr 6bc <get2bytes>
   128e4:	|                       |  |   addq.l #4,sp
   128e6:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   128e8:	|                       |  |   move.l 19c38 <bigDataFile>,d1
   128ee:	|                       |  |   movea.l 19d5c <currentFloor>,a0
   128f4:	|                       |  |   movea.l 4(a0),a0
   128f8:	|                       |  |   move.l 132(sp),d0
   128fc:	|                       |  |   lsl.l #3,d0
   128fe:	|                       |  |   lea (0,a0,d0.l),a2
   12902:	|                       |  |   move.l d1,-(sp)
   12904:	|                       |  |   jsr 6bc <get2bytes>
   1290a:	|                       |  |   addq.l #4,sp
   1290c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   12910:	|                       |  |   addq.l #1,132(sp)
   12914:	|                       |  \-> move.l 132(sp),d0
   12918:	|                       |      cmp.l 136(sp),d0
   1291c:	|                       \----- blt.s 128c2 <setFloor+0x24e>
	}

	finishAccess ();
   1291e:	|                              jsr 439a <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12924:	|                              movea.l 19d5c <currentFloor>,a0
   1292a:	|                              move.l 8(a0),d0
   1292e:	|                              add.l d0,d0
   12930:	|                              add.l d0,d0
   12932:	|                              move.l d0,86(sp)
   12936:	|                              clr.l 82(sp)
   1293a:	|                              move.l 19c50 <SysBase>,d0
   12940:	|                              movea.l d0,a6
   12942:	|                              move.l 86(sp),d0
   12946:	|                              move.l 82(sp),d1
   1294a:	|                              jsr -684(a6)
   1294e:	|                              move.l d0,78(sp)
   12952:	|                              move.l 78(sp),d0
   12956:	|                              movea.l 19d5c <currentFloor>,a0
   1295c:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12960:	|                              movea.l 19d5c <currentFloor>,a0
   12966:	|                              move.l 8(a0),d0
   1296a:	|                              add.l d0,d0
   1296c:	|                              add.l d0,d0
   1296e:	|                              move.l d0,74(sp)
   12972:	|                              clr.l 70(sp)
   12976:	|                              move.l 19c50 <SysBase>,d0
   1297c:	|                              movea.l d0,a6
   1297e:	|                              move.l 74(sp),d0
   12982:	|                              move.l 70(sp),d1
   12986:	|                              jsr -684(a6)
   1298a:	|                              move.l d0,66(sp)
   1298e:	|                              move.l 66(sp),d0
   12992:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   12996:	|                              movea.l 19d5c <currentFloor>,a0
   1299c:	|                              move.l 16(a0),d0
   129a0:	|                          /-- bne.s 129b6 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   129a2:	|                          |   pea 16f42 <main_sludge.c.828d7d86+0x782>
   129a8:	|                          |   jsr 12ed6 <KPrintF>
   129ae:	|                          |   addq.l #4,sp
		return FALSE;
   129b0:	|                          |   clr.w d0
   129b2:	+--------------------------|-- bra.w 12de4 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   129b6:	|                          \-> clr.l 136(sp)
   129ba:	|                    /-------- bra.w 12ade <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   129be:	|                 /--|-------> movea.l 19d5c <currentFloor>,a0
   129c4:	|                 |  |         move.l 8(a0),d0
   129c8:	|                 |  |         add.l d0,d0
   129ca:	|                 |  |         add.l d0,d0
   129cc:	|                 |  |         move.l d0,50(sp)
   129d0:	|                 |  |         clr.l 46(sp)
   129d4:	|                 |  |         move.l 19c50 <SysBase>,d0
   129da:	|                 |  |         movea.l d0,a6
   129dc:	|                 |  |         move.l 50(sp),d0
   129e0:	|                 |  |         move.l 46(sp),d1
   129e4:	|                 |  |         jsr -684(a6)
   129e8:	|                 |  |         move.l d0,42(sp)
   129ec:	|                 |  |         move.l 42(sp),d0
   129f0:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   129f6:	|                 |  |         movea.l 16(a0),a0
   129fa:	|                 |  |         move.l 136(sp),d1
   129fe:	|                 |  |         add.l d1,d1
   12a00:	|                 |  |         add.l d1,d1
   12a02:	|                 |  |         adda.l d1,a0
   12a04:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12a06:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   12a0c:	|                 |  |         move.l 8(a0),d0
   12a10:	|                 |  |         add.l d0,d0
   12a12:	|                 |  |         add.l d0,d0
   12a14:	|                 |  |         move.l d0,38(sp)
   12a18:	|                 |  |         clr.l 34(sp)
   12a1c:	|                 |  |         move.l 19c50 <SysBase>,d0
   12a22:	|                 |  |         movea.l d0,a6
   12a24:	|                 |  |         move.l 38(sp),d0
   12a28:	|                 |  |         move.l 34(sp),d1
   12a2c:	|                 |  |         jsr -684(a6)
   12a30:	|                 |  |         move.l d0,30(sp)
   12a34:	|                 |  |         move.l 30(sp),d1
   12a38:	|                 |  |         move.l 136(sp),d0
   12a3c:	|                 |  |         add.l d0,d0
   12a3e:	|                 |  |         add.l d0,d0
   12a40:	|                 |  |         movea.l 62(sp),a0
   12a44:	|                 |  |         adda.l d0,a0
   12a46:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   12a48:	|                 |  |         movea.l 19d5c <currentFloor>,a0
   12a4e:	|                 |  |         move.l 16(a0),d1
   12a52:	|                 |  |         move.l 136(sp),d0
   12a56:	|                 |  |         add.l d0,d0
   12a58:	|                 |  |         add.l d0,d0
   12a5a:	|                 |  |         movea.l d1,a0
   12a5c:	|                 |  |         adda.l d0,a0
   12a5e:	|                 |  |         move.l (a0),d0
   12a60:	|                 |  |     /-- bne.s 12a76 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12a62:	|                 |  |     |   pea 16f42 <main_sludge.c.828d7d86+0x782>
   12a68:	|                 |  |     |   jsr 12ed6 <KPrintF>
   12a6e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   12a70:	|                 |  |     |   clr.w d0
   12a72:	+-----------------|--|-----|-- bra.w 12de4 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12a76:	|                 |  |     \-> clr.l 132(sp)
   12a7a:	|                 |  |     /-- bra.s 12aca <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   12a7c:	|                 |  |  /--|-> movea.l 19d5c <currentFloor>,a0
   12a82:	|                 |  |  |  |   move.l 16(a0),d1
   12a86:	|                 |  |  |  |   move.l 136(sp),d0
   12a8a:	|                 |  |  |  |   add.l d0,d0
   12a8c:	|                 |  |  |  |   add.l d0,d0
   12a8e:	|                 |  |  |  |   movea.l d1,a0
   12a90:	|                 |  |  |  |   adda.l d0,a0
   12a92:	|                 |  |  |  |   move.l (a0),d1
   12a94:	|                 |  |  |  |   move.l 132(sp),d0
   12a98:	|                 |  |  |  |   add.l d0,d0
   12a9a:	|                 |  |  |  |   add.l d0,d0
   12a9c:	|                 |  |  |  |   movea.l d1,a0
   12a9e:	|                 |  |  |  |   adda.l d0,a0
   12aa0:	|                 |  |  |  |   moveq #-1,d1
   12aa2:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   12aa4:	|                 |  |  |  |   move.l 136(sp),d0
   12aa8:	|                 |  |  |  |   add.l d0,d0
   12aaa:	|                 |  |  |  |   add.l d0,d0
   12aac:	|                 |  |  |  |   movea.l 62(sp),a0
   12ab0:	|                 |  |  |  |   adda.l d0,a0
   12ab2:	|                 |  |  |  |   move.l (a0),d1
   12ab4:	|                 |  |  |  |   move.l 132(sp),d0
   12ab8:	|                 |  |  |  |   add.l d0,d0
   12aba:	|                 |  |  |  |   add.l d0,d0
   12abc:	|                 |  |  |  |   movea.l d1,a0
   12abe:	|                 |  |  |  |   adda.l d0,a0
   12ac0:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12ac6:	|                 |  |  |  |   addq.l #1,132(sp)
   12aca:	|                 |  |  |  \-> movea.l 19d5c <currentFloor>,a0
   12ad0:	|                 |  |  |      move.l 8(a0),d0
   12ad4:	|                 |  |  |      cmp.l 132(sp),d0
   12ad8:	|                 |  |  \----- bgt.s 12a7c <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12ada:	|                 |  |         addq.l #1,136(sp)
   12ade:	|                 |  \-------> movea.l 19d5c <currentFloor>,a0
   12ae4:	|                 |            move.l 8(a0),d0
   12ae8:	|                 |            cmp.l 136(sp),d0
   12aec:	|                 \----------- bgt.w 129be <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12af0:	|                              clr.l 136(sp)
   12af4:	|              /-------------- bra.w 12bfa <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12af8:	|           /--|-------------> clr.l 132(sp)
   12afc:	|           |  |     /-------- bra.w 12be4 <setFloor+0x570>
			if (i != j) {
   12b00:	|           |  |  /--|-------> move.l 136(sp),d0
   12b04:	|           |  |  |  |         cmp.l 132(sp),d0
   12b08:	|           |  |  |  |     /-- beq.w 12b9a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   12b0c:	|           |  |  |  |     |   movea.l 19d5c <currentFloor>,a0
   12b12:	|           |  |  |  |     |   move.l 12(a0),d1
   12b16:	|           |  |  |  |     |   move.l 132(sp),d0
   12b1a:	|           |  |  |  |     |   lsl.l #3,d0
   12b1c:	|           |  |  |  |     |   movea.l d1,a1
   12b1e:	|           |  |  |  |     |   adda.l d0,a1
   12b20:	|           |  |  |  |     |   movea.l 19d5c <currentFloor>,a0
   12b26:	|           |  |  |  |     |   move.l 12(a0),d1
   12b2a:	|           |  |  |  |     |   move.l 136(sp),d0
   12b2e:	|           |  |  |  |     |   lsl.l #3,d0
   12b30:	|           |  |  |  |     |   movea.l d1,a0
   12b32:	|           |  |  |  |     |   adda.l d0,a0
   12b34:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12b38:	|           |  |  |  |     |   move.l (a1),-(sp)
   12b3a:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   12b3e:	|           |  |  |  |     |   move.l (a0),-(sp)
   12b40:	|           |  |  |  |     |   jsr 123cc <polysShareSide>
   12b46:	|           |  |  |  |     |   lea 16(sp),sp
   12b4a:	|           |  |  |  |     |   tst.w d0
   12b4c:	|           |  |  |  |  /--|-- beq.w 12be0 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   12b50:	|           |  |  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   12b56:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12b5a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12b5e:	|           |  |  |  |  |  |   add.l d0,d0
   12b60:	|           |  |  |  |  |  |   add.l d0,d0
   12b62:	|           |  |  |  |  |  |   movea.l d1,a0
   12b64:	|           |  |  |  |  |  |   adda.l d0,a0
   12b66:	|           |  |  |  |  |  |   move.l (a0),d1
   12b68:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12b6c:	|           |  |  |  |  |  |   add.l d0,d0
   12b6e:	|           |  |  |  |  |  |   add.l d0,d0
   12b70:	|           |  |  |  |  |  |   movea.l d1,a0
   12b72:	|           |  |  |  |  |  |   adda.l d0,a0
   12b74:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   12b78:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12b7c:	|           |  |  |  |  |  |   add.l d0,d0
   12b7e:	|           |  |  |  |  |  |   add.l d0,d0
   12b80:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   12b84:	|           |  |  |  |  |  |   adda.l d0,a0
   12b86:	|           |  |  |  |  |  |   move.l (a0),d1
   12b88:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12b8c:	|           |  |  |  |  |  |   add.l d0,d0
   12b8e:	|           |  |  |  |  |  |   add.l d0,d0
   12b90:	|           |  |  |  |  |  |   movea.l d1,a0
   12b92:	|           |  |  |  |  |  |   adda.l d0,a0
   12b94:	|           |  |  |  |  |  |   moveq #1,d1
   12b96:	|           |  |  |  |  |  |   move.l d1,(a0)
   12b98:	|           |  |  |  |  +--|-- bra.s 12be0 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   12b9a:	|           |  |  |  |  |  \-> movea.l 19d5c <currentFloor>,a0
   12ba0:	|           |  |  |  |  |      move.l 16(a0),d1
   12ba4:	|           |  |  |  |  |      move.l 136(sp),d0
   12ba8:	|           |  |  |  |  |      add.l d0,d0
   12baa:	|           |  |  |  |  |      add.l d0,d0
   12bac:	|           |  |  |  |  |      movea.l d1,a0
   12bae:	|           |  |  |  |  |      adda.l d0,a0
   12bb0:	|           |  |  |  |  |      move.l (a0),d1
   12bb2:	|           |  |  |  |  |      move.l 132(sp),d0
   12bb6:	|           |  |  |  |  |      add.l d0,d0
   12bb8:	|           |  |  |  |  |      add.l d0,d0
   12bba:	|           |  |  |  |  |      movea.l d1,a0
   12bbc:	|           |  |  |  |  |      adda.l d0,a0
   12bbe:	|           |  |  |  |  |      moveq #-2,d0
   12bc0:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   12bc2:	|           |  |  |  |  |      move.l 136(sp),d0
   12bc6:	|           |  |  |  |  |      add.l d0,d0
   12bc8:	|           |  |  |  |  |      add.l d0,d0
   12bca:	|           |  |  |  |  |      movea.l 62(sp),a0
   12bce:	|           |  |  |  |  |      adda.l d0,a0
   12bd0:	|           |  |  |  |  |      move.l (a0),d1
   12bd2:	|           |  |  |  |  |      move.l 132(sp),d0
   12bd6:	|           |  |  |  |  |      add.l d0,d0
   12bd8:	|           |  |  |  |  |      add.l d0,d0
   12bda:	|           |  |  |  |  |      movea.l d1,a0
   12bdc:	|           |  |  |  |  |      adda.l d0,a0
   12bde:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12be0:	|           |  |  |  |  \----> addq.l #1,132(sp)
   12be4:	|           |  |  |  \-------> movea.l 19d5c <currentFloor>,a0
   12bea:	|           |  |  |            move.l 8(a0),d0
   12bee:	|           |  |  |            cmp.l 132(sp),d0
   12bf2:	|           |  |  \----------- bgt.w 12b00 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12bf6:	|           |  |               addq.l #1,136(sp)
   12bfa:	|           |  \-------------> movea.l 19d5c <currentFloor>,a0
   12c00:	|           |                  move.l 8(a0),d0
   12c04:	|           |                  cmp.l 136(sp),d0
   12c08:	|           \----------------- bgt.w 12af8 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   12c0c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   12c10:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   12c14:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12c18:	|  |                           clr.l 136(sp)
   12c1c:	|  |     /-------------------- bra.w 12d72 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c20:	|  |  /--|-------------------> clr.l 132(sp)
   12c24:	|  |  |  |     /-------------- bra.w 12d5c <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   12c28:	|  |  |  |  /--|-------------> movea.l 19d5c <currentFloor>,a0
   12c2e:	|  |  |  |  |  |               move.l 16(a0),d1
   12c32:	|  |  |  |  |  |               move.l 136(sp),d0
   12c36:	|  |  |  |  |  |               add.l d0,d0
   12c38:	|  |  |  |  |  |               add.l d0,d0
   12c3a:	|  |  |  |  |  |               movea.l d1,a0
   12c3c:	|  |  |  |  |  |               adda.l d0,a0
   12c3e:	|  |  |  |  |  |               move.l (a0),d1
   12c40:	|  |  |  |  |  |               move.l 132(sp),d0
   12c44:	|  |  |  |  |  |               add.l d0,d0
   12c46:	|  |  |  |  |  |               add.l d0,d0
   12c48:	|  |  |  |  |  |               movea.l d1,a0
   12c4a:	|  |  |  |  |  |               adda.l d0,a0
   12c4c:	|  |  |  |  |  |               move.l (a0),d0
   12c4e:	|  |  |  |  |  |               moveq #-1,d1
   12c50:	|  |  |  |  |  |               cmp.l d0,d1
   12c52:	|  |  |  |  |  |  /----------- bne.w 12d58 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12c56:	|  |  |  |  |  |  |            clr.l 122(sp)
   12c5a:	|  |  |  |  |  |  |     /----- bra.w 12d46 <setFloor+0x6d2>
						if (d != i && d != j) {
   12c5e:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12c62:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12c66:	|  |  |  |  |  |  |  |  |  /-- beq.w 12d42 <setFloor+0x6ce>
   12c6a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   12c6e:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   12c72:	|  |  |  |  |  |  |  |  |  +-- beq.w 12d42 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   12c76:	|  |  |  |  |  |  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   12c7c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12c80:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12c84:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c86:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c88:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c8a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c8c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12c8e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12c92:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c94:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c96:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c98:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c9a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   12c9c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   12ca0:	|  |  |  |  |  |  |  |  |  +-- bne.w 12d42 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   12ca4:	|  |  |  |  |  |  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   12caa:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12cae:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12cb2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cb4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cb6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12cb8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cba:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12cbc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12cc0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cc2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cc4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12cc6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cc8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   12cca:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12d42 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   12ccc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12cd0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cd2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cd4:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12cd8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cda:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12cdc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12ce0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12ce2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12ce4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12ce6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12ce8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   12cea:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   12cee:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12d42 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   12cf0:	|  |  |  |  |  |  |  |  |  |   movea.l 19d5c <currentFloor>,a0
   12cf6:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12cfa:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12cfe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d00:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d02:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d04:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d06:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12d08:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12d0c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d10:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d12:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d14:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   12d18:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12d1c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d1e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d20:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12d24:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d26:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12d28:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12d2c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d2e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d30:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d32:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d34:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12d38:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12d3a:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   12d3c:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12d42:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12d46:	|  |  |  |  |  |  |  |  \----> movea.l 19d5c <currentFloor>,a0
   12d4c:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   12d50:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12d54:	|  |  |  |  |  |  |  \-------- bgt.w 12c5e <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12d58:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   12d5c:	|  |  |  |  |  \-------------> movea.l 19d5c <currentFloor>,a0
   12d62:	|  |  |  |  |                  move.l 8(a0),d0
   12d66:	|  |  |  |  |                  cmp.l 132(sp),d0
   12d6a:	|  |  |  |  \----------------- bgt.w 12c28 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12d6e:	|  |  |  |                     addq.l #1,136(sp)
   12d72:	|  |  |  \-------------------> movea.l 19d5c <currentFloor>,a0
   12d78:	|  |  |                        move.l 8(a0),d0
   12d7c:	|  |  |                        cmp.l 136(sp),d0
   12d80:	|  |  \----------------------- bgt.w 12c20 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   12d84:	|  |                           tst.w 130(sp)
   12d88:	|  \-------------------------- bne.w 12c10 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12d8c:	|                              clr.l 136(sp)
   12d90:	|                          /-- bra.s 12db8 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   12d92:	|                       /--|-> move.l 136(sp),d0
   12d96:	|                       |  |   add.l d0,d0
   12d98:	|                       |  |   add.l d0,d0
   12d9a:	|                       |  |   movea.l 62(sp),a0
   12d9e:	|                       |  |   adda.l d0,a0
   12da0:	|                       |  |   move.l (a0),54(sp)
   12da4:	|                       |  |   move.l 19c50 <SysBase>,d0
   12daa:	|                       |  |   movea.l d0,a6
   12dac:	|                       |  |   movea.l 54(sp),a1
   12db0:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12db4:	|                       |  |   addq.l #1,136(sp)
   12db8:	|                       |  \-> movea.l 19d5c <currentFloor>,a0
   12dbe:	|                       |      move.l 8(a0),d0
   12dc2:	|                       |      cmp.l 136(sp),d0
   12dc6:	|                       \----- bgt.s 12d92 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12dc8:	|                              move.l 62(sp),58(sp)
   12dce:	|                              move.l 19c50 <SysBase>,d0
   12dd4:	|                              movea.l d0,a6
   12dd6:	|                              movea.l 58(sp),a1
   12dda:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   12dde:	|                              clr.l 62(sp)

	return TRUE;
   12de2:	|                              moveq #1,d0
}
   12de4:	\----------------------------> movea.l (sp)+,a2
   12de6:	                               movea.l (sp)+,a6
   12de8:	                               lea 132(sp),sp
   12dec:	                               rts

00012dee <setFloorNull>:

void setFloorNull () {
	killFloor ();
   12dee:	jsr 122dc <killFloor>
	noFloor ();
   12df4:	jsr 12200 <noFloor>
   12dfa:	nop
   12dfc:	rts

00012dfe <WaitVbl>:
void WaitVbl() {
   12dfe:	       subq.l #8,sp
	debug_start_idle();
   12e00:	       jsr 130ae <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12e06:	   /-> movea.l #14675972,a0
   12e0c:	   |   move.l (a0),d0
   12e0e:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   12e10:	   |   move.l (sp),d0
   12e12:	   |   andi.l #130816,d0
   12e18:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   12e1a:	   |   move.l (sp),d0
   12e1c:	   |   cmpi.l #79616,d0
   12e22:	   \-- beq.s 12e06 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12e24:	/----> movea.l #14675972,a0
   12e2a:	|      move.l (a0),d0
   12e2c:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   12e30:	|      move.l 4(sp),d0
   12e34:	|      andi.l #130816,d0
   12e3a:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   12e3e:	|      move.l 4(sp),d0
   12e42:	|      cmpi.l #79616,d0
   12e48:	|  /-- beq.s 12e4c <WaitVbl+0x4e>
	while (1) {
   12e4a:	\--|-- bra.s 12e24 <WaitVbl+0x26>
			break;
   12e4c:	   \-> nop
	debug_stop_idle();
   12e4e:	       jsr 130c8 <debug_stop_idle>
}
   12e54:	       nop
   12e56:	       addq.l #8,sp
   12e58:	       rts

00012e5a <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12e5a:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   12e5c:	       move.l 8(sp),(sp)
	while(len-- > 0)
   12e60:	   /-- bra.s 12e72 <memset+0x18>
		*ptr++ = val;
   12e62:	/--|-> move.l (sp),d0
   12e64:	|  |   move.l d0,d1
   12e66:	|  |   addq.l #1,d1
   12e68:	|  |   move.l d1,(sp)
   12e6a:	|  |   move.l 12(sp),d1
   12e6e:	|  |   movea.l d0,a0
   12e70:	|  |   move.b d1,(a0)
	while(len-- > 0)
   12e72:	|  \-> move.l 16(sp),d0
   12e76:	|      move.l d0,d1
   12e78:	|      subq.l #1,d1
   12e7a:	|      move.l d1,16(sp)
   12e7e:	|      tst.l d0
   12e80:	\----- bne.s 12e62 <memset+0x8>
	return dest;
   12e82:	       move.l 8(sp),d0
}
   12e86:	       addq.l #4,sp
   12e88:	       rts

00012e8a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   12e8a:	       subq.l #8,sp
   12e8c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   12e8e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   12e94:	       move.l 20(sp),4(sp)
	while(len--)
   12e9a:	   /-- bra.s 12ebc <memcpy+0x32>
		*d++ = *s++;
   12e9c:	/--|-> move.l 4(sp),d1
   12ea0:	|  |   move.l d1,d0
   12ea2:	|  |   addq.l #1,d0
   12ea4:	|  |   move.l d0,4(sp)
   12ea8:	|  |   move.l 8(sp),d0
   12eac:	|  |   move.l d0,d2
   12eae:	|  |   addq.l #1,d2
   12eb0:	|  |   move.l d2,8(sp)
   12eb4:	|  |   movea.l d1,a0
   12eb6:	|  |   move.b (a0),d1
   12eb8:	|  |   movea.l d0,a0
   12eba:	|  |   move.b d1,(a0)
	while(len--)
   12ebc:	|  \-> move.l 24(sp),d0
   12ec0:	|      move.l d0,d1
   12ec2:	|      subq.l #1,d1
   12ec4:	|      move.l d1,24(sp)
   12ec8:	|      tst.l d0
   12eca:	\----- bne.s 12e9c <memcpy+0x12>
	return dest;
   12ecc:	       move.l 16(sp),d0
}
   12ed0:	       move.l (sp)+,d2
   12ed2:	       addq.l #8,sp
   12ed4:	       rts

00012ed6 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12ed6:	       lea -128(sp),sp
   12eda:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12ede:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xecef31>,d0
   12ee4:	       cmpi.w #20153,d0
   12ee8:	   /-- beq.s 12f0c <KPrintF+0x36>
   12eea:	   |   cmpi.w #-24562,d0
   12eee:	   +-- beq.s 12f0c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12ef0:	   |   movea.l 19c50 <SysBase>,a6
   12ef6:	   |   movea.l 144(sp),a0
   12efa:	   |   lea 148(sp),a1
   12efe:	   |   lea 13990 <KPutCharX>,a2
   12f04:	   |   suba.l a3,a3
   12f06:	   |   jsr -522(a6)
}
   12f0a:	/--|-- bra.s 12f36 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   12f0c:	|  \-> movea.l 19c50 <SysBase>,a6
   12f12:	|      movea.l 144(sp),a0
   12f16:	|      lea 148(sp),a1
   12f1a:	|      lea 1399e <PutChar>,a2
   12f20:	|      lea 12(sp),a3
   12f24:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   12f28:	|      move.l a3,-(sp)
   12f2a:	|      pea 56 <_start+0x56>
   12f2e:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xecef31>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12f34:	|      addq.l #8,sp
}
   12f36:	\----> movem.l (sp)+,a2-a3/a6
   12f3a:	       lea 128(sp),sp
   12f3e:	       rts

00012f40 <warpmode>:

void warpmode(int on) { // bool
   12f40:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12f42:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   12f4a:	          movea.l 4(sp),a0
   12f4e:	          move.w (a0),d0
   12f50:	          cmpi.w #20153,d0
   12f54:	      /-- beq.s 12f64 <warpmode+0x24>
   12f56:	      |   movea.l 4(sp),a0
   12f5a:	      |   move.w (a0),d0
   12f5c:	      |   cmpi.w #-24562,d0
   12f60:	/-----|-- bne.w 13068 <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   12f64:	|     \-> tst.l 12(sp)
   12f68:	|  /----- beq.s 12f72 <warpmode+0x32>
   12f6a:	|  |      move.l #94051,d0
   12f70:	|  |  /-- bra.s 12f78 <warpmode+0x38>
   12f72:	|  \--|-> move.l #94065,d0
   12f78:	|     \-> pea 1 <_start+0x1>
   12f7c:	|         move.l sp,d1
   12f7e:	|         addq.l #7,d1
   12f80:	|         move.l d1,-(sp)
   12f82:	|         clr.l -(sp)
   12f84:	|         move.l d0,-(sp)
   12f86:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
   12f8a:	|         pea 52 <_start+0x52>
   12f8e:	|         movea.l 28(sp),a0
   12f92:	|         jsr (a0)
   12f94:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   12f98:	|         tst.l 12(sp)
   12f9c:	|  /----- beq.s 12fa6 <warpmode+0x66>
   12f9e:	|  |      move.l #94080,d0
   12fa4:	|  |  /-- bra.s 12fac <warpmode+0x6c>
   12fa6:	|  \--|-> move.l #94102,d0
   12fac:	|     \-> pea 1 <_start+0x1>
   12fb0:	|         move.l sp,d1
   12fb2:	|         addq.l #7,d1
   12fb4:	|         move.l d1,-(sp)
   12fb6:	|         clr.l -(sp)
   12fb8:	|         move.l d0,-(sp)
   12fba:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
   12fbe:	|         pea 52 <_start+0x52>
   12fc2:	|         movea.l 28(sp),a0
   12fc6:	|         jsr (a0)
   12fc8:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   12fcc:	|         tst.l 12(sp)
   12fd0:	|  /----- beq.s 12fda <warpmode+0x9a>
   12fd2:	|  |      move.l #94123,d0
   12fd8:	|  |  /-- bra.s 12fe0 <warpmode+0xa0>
   12fda:	|  \--|-> move.l #94152,d0
   12fe0:	|     \-> pea 1 <_start+0x1>
   12fe4:	|         move.l sp,d1
   12fe6:	|         addq.l #7,d1
   12fe8:	|         move.l d1,-(sp)
   12fea:	|         clr.l -(sp)
   12fec:	|         move.l d0,-(sp)
   12fee:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
   12ff2:	|         pea 52 <_start+0x52>
   12ff6:	|         movea.l 28(sp),a0
   12ffa:	|         jsr (a0)
   12ffc:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   13000:	|         tst.l 12(sp)
   13004:	|  /----- beq.s 1300e <warpmode+0xce>
   13006:	|  |      move.l #94180,d0
   1300c:	|  |  /-- bra.s 13014 <warpmode+0xd4>
   1300e:	|  \--|-> move.l #94206,d0
   13014:	|     \-> pea 1 <_start+0x1>
   13018:	|         move.l sp,d1
   1301a:	|         addq.l #7,d1
   1301c:	|         move.l d1,-(sp)
   1301e:	|         clr.l -(sp)
   13020:	|         move.l d0,-(sp)
   13022:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
   13026:	|         pea 52 <_start+0x52>
   1302a:	|         movea.l 28(sp),a0
   1302e:	|         jsr (a0)
   13030:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   13034:	|         tst.l 12(sp)
   13038:	|  /----- beq.s 13042 <warpmode+0x102>
   1303a:	|  |      move.l #94231,d0
   13040:	|  |  /-- bra.s 13048 <warpmode+0x108>
   13042:	|  \--|-> move.l #94241,d0
   13048:	|     \-> pea 1 <_start+0x1>
   1304c:	|         move.l sp,d1
   1304e:	|         addq.l #7,d1
   13050:	|         move.l d1,-(sp)
   13052:	|         clr.l -(sp)
   13054:	|         move.l d0,-(sp)
   13056:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbefd0>
   1305a:	|         pea 52 <_start+0x52>
   1305e:	|         movea.l 28(sp),a0
   13062:	|         jsr (a0)
   13064:	|         lea 24(sp),sp
	}
}
   13068:	\-------> nop
   1306a:	          addq.l #8,sp
   1306c:	          rts

0001306e <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1306e:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   13070:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   13076:	       movea.l (sp),a0
   13078:	       move.w (a0),d0
   1307a:	       cmpi.w #20153,d0
   1307e:	   /-- beq.s 1308a <debug_cmd+0x1c>
   13080:	   |   movea.l (sp),a0
   13082:	   |   move.w (a0),d0
   13084:	   |   cmpi.w #-24562,d0
   13088:	/--|-- bne.s 130a8 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1308a:	|  \-> move.l 20(sp),-(sp)
   1308e:	|      move.l 20(sp),-(sp)
   13092:	|      move.l 20(sp),-(sp)
   13096:	|      move.l 20(sp),-(sp)
   1309a:	|      pea 58 <_start+0x58>
   1309e:	|      movea.l 20(sp),a0
   130a2:	|      jsr (a0)
   130a4:	|      lea 20(sp),sp
	}
}
   130a8:	\----> nop
   130aa:	       addq.l #4,sp
   130ac:	       rts

000130ae <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   130ae:	clr.l -(sp)
   130b0:	clr.l -(sp)
   130b2:	pea 1 <_start+0x1>
   130b6:	pea 5 <_start+0x5>
   130ba:	jsr 1306e <debug_cmd>
   130c0:	lea 16(sp),sp
}
   130c4:	nop
   130c6:	rts

000130c8 <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   130c8:	clr.l -(sp)
   130ca:	clr.l -(sp)
   130cc:	clr.l -(sp)
   130ce:	pea 5 <_start+0x5>
   130d2:	jsr 1306e <debug_cmd>
   130d8:	lea 16(sp),sp
}
   130dc:	nop
   130de:	rts

000130e0 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   130e0:	lea -12(sp),sp
   130e4:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   130e6:	move.l 20(sp),12(sp)
   130ec:	move.l 24(sp),8(sp)
   130f2:	move.l 19c60 <MathIeeeSingBasBase>,d0
   130f8:	movea.l d0,a6
   130fa:	move.l 12(sp),d0
   130fe:	move.l 8(sp),d1
   13102:	jsr -66(a6)
   13106:	move.l d0,4(sp)
   1310a:	move.l 4(sp),d0
}
   1310e:	movea.l (sp)+,a6
   13110:	lea 12(sp),sp
   13114:	rts

00013116 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   13116:	lea -32(sp),sp
   1311a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1311e:	move.l 48(sp),36(sp)
   13124:	move.l 52(sp),40(sp)
   1312a:	move.l 56(sp),28(sp)
   13130:	move.l 60(sp),32(sp)
   13136:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   1313c:	movea.l d0,a6
   1313e:	move.l 36(sp),d0
   13142:	move.l 40(sp),d1
   13146:	move.l 28(sp),d2
   1314a:	move.l 32(sp),d3
   1314e:	jsr -66(a6)
   13152:	move.l d0,12(sp)
   13156:	move.l d1,16(sp)
   1315a:	move.l 12(sp),20(sp)
   13160:	move.l 16(sp),24(sp)
   13166:	move.l 20(sp),d0
   1316a:	move.l 24(sp),d1
}
   1316e:	movem.l (sp)+,d2-d3/a6
   13172:	lea 32(sp),sp
   13176:	rts

00013178 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   13178:	lea -32(sp),sp
   1317c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   13180:	move.l 48(sp),36(sp)
   13186:	move.l 52(sp),40(sp)
   1318c:	move.l 56(sp),28(sp)
   13192:	move.l 60(sp),32(sp)
   13198:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   1319e:	movea.l d0,a6
   131a0:	move.l 36(sp),d0
   131a4:	move.l 40(sp),d1
   131a8:	move.l 28(sp),d2
   131ac:	move.l 32(sp),d3
   131b0:	jsr -84(a6)
   131b4:	move.l d0,12(sp)
   131b8:	move.l d1,16(sp)
   131bc:	move.l 12(sp),20(sp)
   131c2:	move.l 16(sp),24(sp)
   131c8:	move.l 20(sp),d0
   131cc:	move.l 24(sp),d1
}
   131d0:	movem.l (sp)+,d2-d3/a6
   131d4:	lea 32(sp),sp
   131d8:	rts

000131da <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   131da:	lea -12(sp),sp
   131de:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   131e0:	move.l 20(sp),12(sp)
   131e6:	move.l 24(sp),8(sp)
   131ec:	move.l 19c60 <MathIeeeSingBasBase>,d0
   131f2:	movea.l d0,a6
   131f4:	move.l 12(sp),d0
   131f8:	move.l 8(sp),d1
   131fc:	jsr -84(a6)
   13200:	move.l d0,4(sp)
   13204:	move.l 4(sp),d0
}
   13208:	movea.l (sp)+,a6
   1320a:	lea 12(sp),sp
   1320e:	rts

00013210 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   13210:	lea -12(sp),sp
   13214:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13216:	move.l 20(sp),12(sp)
   1321c:	move.l 24(sp),8(sp)
   13222:	move.l 19c60 <MathIeeeSingBasBase>,d0
   13228:	movea.l d0,a6
   1322a:	move.l 12(sp),d0
   1322e:	move.l 8(sp),d1
   13232:	jsr -42(a6)
   13236:	move.l d0,4(sp)
   1323a:	move.l 4(sp),d0
}
   1323e:	movea.l (sp)+,a6
   13240:	lea 12(sp),sp
   13244:	rts

00013246 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   13246:	lea -20(sp),sp
   1324a:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1324c:	move.l 28(sp),20(sp)
   13252:	move.l 19c6c <MathIeeeDoubTransBase>,d0
   13258:	movea.l d0,a6
   1325a:	move.l 20(sp),d0
   1325e:	jsr -108(a6)
   13262:	move.l d0,4(sp)
   13266:	move.l d1,8(sp)
   1326a:	move.l 4(sp),12(sp)
   13270:	move.l 8(sp),16(sp)
   13276:	move.l 12(sp),d0
   1327a:	move.l 16(sp),d1
}
   1327e:	movea.l (sp)+,a6
   13280:	lea 20(sp),sp
   13284:	rts

00013286 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   13286:	lea -12(sp),sp
   1328a:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1328c:	move.l 20(sp),8(sp)
   13292:	move.l 24(sp),12(sp)
   13298:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   1329e:	movea.l d0,a6
   132a0:	move.l 8(sp),d0
   132a4:	move.l 12(sp),d1
   132a8:	jsr -30(a6)
   132ac:	move.l d0,4(sp)
   132b0:	move.l 4(sp),d0
   132b4:	move.l d0,-(sp)
   132b6:	jsr 132ee <__floatsidf>
   132bc:	addq.l #4,sp
}
   132be:	movea.l (sp)+,a6
   132c0:	lea 12(sp),sp
   132c4:	rts

000132c6 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   132c6:	subq.l #8,sp
   132c8:	move.l a6,-(sp)
	return IEEESPFix(value);
   132ca:	move.l 16(sp),8(sp)
   132d0:	move.l 19c60 <MathIeeeSingBasBase>,d0
   132d6:	movea.l d0,a6
   132d8:	move.l 8(sp),d0
   132dc:	jsr -30(a6)
   132e0:	move.l d0,4(sp)
   132e4:	move.l 4(sp),d0
}
   132e8:	movea.l (sp)+,a6
   132ea:	addq.l #8,sp
   132ec:	rts

000132ee <__floatsidf>:


DOUBLE __floatsidf (int i) {
   132ee:	lea -20(sp),sp
   132f2:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   132f4:	move.l 28(sp),20(sp)
   132fa:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   13300:	movea.l d0,a6
   13302:	move.l 20(sp),d0
   13306:	jsr -36(a6)
   1330a:	move.l d0,4(sp)
   1330e:	move.l d1,8(sp)
   13312:	move.l 4(sp),12(sp)
   13318:	move.l 8(sp),16(sp)
   1331e:	move.l 12(sp),d0
   13322:	move.l 16(sp),d1
}
   13326:	movea.l (sp)+,a6
   13328:	lea 20(sp),sp
   1332c:	rts

0001332e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1332e:	subq.l #8,sp
   13330:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   13332:	move.l 16(sp),8(sp)
   13338:	move.l 19c60 <MathIeeeSingBasBase>,d0
   1333e:	movea.l d0,a6
   13340:	move.l 8(sp),d0
   13344:	jsr -36(a6)
   13348:	move.l d0,4(sp)
   1334c:	move.l 4(sp),d0
}
   13350:	movea.l (sp)+,a6
   13352:	addq.l #8,sp
   13354:	rts

00013356 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   13356:	subq.l #8,sp
   13358:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1335a:	move.l 16(sp),8(sp)
   13360:	move.l 19c60 <MathIeeeSingBasBase>,d0
   13366:	movea.l d0,a6
   13368:	move.l 8(sp),d0
   1336c:	jsr -36(a6)
   13370:	move.l d0,4(sp)
   13374:	move.l 4(sp),d0
}
   13378:	movea.l (sp)+,a6
   1337a:	addq.l #8,sp
   1337c:	rts

0001337e <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1337e:	lea -32(sp),sp
   13382:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   13386:	move.l 48(sp),36(sp)
   1338c:	move.l 52(sp),40(sp)
   13392:	move.l 56(sp),28(sp)
   13398:	move.l 60(sp),32(sp)
   1339e:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   133a4:	movea.l d0,a6
   133a6:	move.l 36(sp),d0
   133aa:	move.l 40(sp),d1
   133ae:	move.l 28(sp),d2
   133b2:	move.l 32(sp),d3
   133b6:	jsr -78(a6)
   133ba:	move.l d0,12(sp)
   133be:	move.l d1,16(sp)
   133c2:	move.l 12(sp),20(sp)
   133c8:	move.l 16(sp),24(sp)
   133ce:	move.l 20(sp),d0
   133d2:	move.l 24(sp),d1
}
   133d6:	movem.l (sp)+,d2-d3/a6
   133da:	lea 32(sp),sp
   133de:	rts

000133e0 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   133e0:	lea -12(sp),sp
   133e4:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   133e6:	move.l 20(sp),12(sp)
   133ec:	move.l 24(sp),8(sp)
   133f2:	move.l 19c60 <MathIeeeSingBasBase>,d0
   133f8:	movea.l d0,a6
   133fa:	move.l 12(sp),d0
   133fe:	move.l 8(sp),d1
   13402:	jsr -78(a6)
   13406:	move.l d0,4(sp)
   1340a:	move.l 4(sp),d0
}
   1340e:	movea.l (sp)+,a6
   13410:	lea 12(sp),sp
   13414:	rts

00013416 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   13416:	lea -12(sp),sp
   1341a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1341c:	move.l 20(sp),12(sp)
   13422:	move.l 24(sp),8(sp)
   13428:	move.l 19c60 <MathIeeeSingBasBase>,d0
   1342e:	movea.l d0,a6
   13430:	move.l 12(sp),d0
   13434:	move.l 8(sp),d1
   13438:	jsr -42(a6)
   1343c:	move.l d0,4(sp)
   13440:	move.l 4(sp),d0
}
   13444:	movea.l (sp)+,a6
   13446:	lea 12(sp),sp
   1344a:	rts

0001344c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1344c:	lea -20(sp),sp
   13450:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13454:	move.l 36(sp),24(sp)
   1345a:	move.l 40(sp),28(sp)
   13460:	move.l 44(sp),16(sp)
   13466:	move.l 48(sp),20(sp)
   1346c:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   13472:	movea.l d0,a6
   13474:	move.l 24(sp),d0
   13478:	move.l 28(sp),d1
   1347c:	move.l 16(sp),d2
   13480:	move.l 20(sp),d3
   13484:	jsr -42(a6)
   13488:	move.l d0,12(sp)
   1348c:	move.l 12(sp),d0
}
   13490:	movem.l (sp)+,d2-d3/a6
   13494:	lea 20(sp),sp
   13498:	rts

0001349a <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1349a:	lea -12(sp),sp
   1349e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   134a0:	move.l 20(sp),12(sp)
   134a6:	move.l 24(sp),8(sp)
   134ac:	move.l 19c60 <MathIeeeSingBasBase>,d0
   134b2:	movea.l d0,a6
   134b4:	move.l 12(sp),d0
   134b8:	move.l 8(sp),d1
   134bc:	jsr -42(a6)
   134c0:	move.l d0,4(sp)
   134c4:	move.l 4(sp),d0
}
   134c8:	movea.l (sp)+,a6
   134ca:	lea 12(sp),sp
   134ce:	rts

000134d0 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   134d0:	lea -12(sp),sp
   134d4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   134d6:	move.l 20(sp),12(sp)
   134dc:	move.l 24(sp),8(sp)
   134e2:	move.l 19c60 <MathIeeeSingBasBase>,d0
   134e8:	movea.l d0,a6
   134ea:	move.l 12(sp),d0
   134ee:	move.l 8(sp),d1
   134f2:	jsr -42(a6)
   134f6:	move.l d0,4(sp)
   134fa:	move.l 4(sp),d0
}
   134fe:	movea.l (sp)+,a6
   13500:	lea 12(sp),sp
   13504:	rts

00013506 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   13506:	lea -20(sp),sp
   1350a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1350e:	move.l 36(sp),24(sp)
   13514:	move.l 40(sp),28(sp)
   1351a:	move.l 44(sp),16(sp)
   13520:	move.l 48(sp),20(sp)
   13526:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   1352c:	movea.l d0,a6
   1352e:	move.l 24(sp),d0
   13532:	move.l 28(sp),d1
   13536:	move.l 16(sp),d2
   1353a:	move.l 20(sp),d3
   1353e:	jsr -42(a6)
   13542:	move.l d0,12(sp)
   13546:	move.l 12(sp),d0
}
   1354a:	movem.l (sp)+,d2-d3/a6
   1354e:	lea 20(sp),sp
   13552:	rts

00013554 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   13554:	lea -12(sp),sp
   13558:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1355a:	move.l 20(sp),12(sp)
   13560:	move.l 24(sp),8(sp)
   13566:	move.l 19c60 <MathIeeeSingBasBase>,d0
   1356c:	movea.l d0,a6
   1356e:	move.l 12(sp),d0
   13572:	move.l 8(sp),d1
   13576:	jsr -42(a6)
   1357a:	move.l d0,4(sp)
   1357e:	move.l 4(sp),d0
}
   13582:	movea.l (sp)+,a6
   13584:	lea 12(sp),sp
   13588:	rts

0001358a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1358a:	lea -12(sp),sp
   1358e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13590:	move.l 20(sp),12(sp)
   13596:	move.l 24(sp),8(sp)
   1359c:	move.l 19c60 <MathIeeeSingBasBase>,d0
   135a2:	movea.l d0,a6
   135a4:	move.l 12(sp),d0
   135a8:	move.l 8(sp),d1
   135ac:	jsr -42(a6)
   135b0:	move.l d0,4(sp)
   135b4:	move.l 4(sp),d0
}
   135b8:	movea.l (sp)+,a6
   135ba:	lea 12(sp),sp
   135be:	rts

000135c0 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   135c0:	lea -32(sp),sp
   135c4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   135c8:	move.l 48(sp),36(sp)
   135ce:	move.l 52(sp),40(sp)
   135d4:	move.l 56(sp),28(sp)
   135da:	move.l 60(sp),32(sp)
   135e0:	move.l 19c68 <MathIeeeDoubBasBase>,d0
   135e6:	movea.l d0,a6
   135e8:	move.l 36(sp),d0
   135ec:	move.l 40(sp),d1
   135f0:	move.l 28(sp),d2
   135f4:	move.l 32(sp),d3
   135f8:	jsr -72(a6)
   135fc:	move.l d0,12(sp)
   13600:	move.l d1,16(sp)
   13604:	move.l 12(sp),20(sp)
   1360a:	move.l 16(sp),24(sp)
   13610:	move.l 20(sp),d0
   13614:	move.l 24(sp),d1
}
   13618:	movem.l (sp)+,d2-d3/a6
   1361c:	lea 32(sp),sp
   13620:	rts

00013622 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   13622:	lea -12(sp),sp
   13626:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   13628:	move.l 20(sp),12(sp)
   1362e:	move.l 24(sp),8(sp)
   13634:	move.l 19c60 <MathIeeeSingBasBase>,d0
   1363a:	movea.l d0,a6
   1363c:	move.l 12(sp),d0
   13640:	move.l 8(sp),d1
   13644:	jsr -72(a6)
   13648:	move.l d0,4(sp)
   1364c:	move.l 4(sp),d0
}
   13650:	movea.l (sp)+,a6
   13652:	lea 12(sp),sp
   13656:	rts

00013658 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   13658:	lea -12(sp),sp
   1365c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1365e:	move.l 20(sp),8(sp)
   13664:	move.l 24(sp),12(sp)
   1366a:	move.l 19c6c <MathIeeeDoubTransBase>,d0
   13670:	movea.l d0,a6
   13672:	move.l 8(sp),d0
   13676:	move.l 12(sp),d1
   1367a:	jsr -102(a6)
   1367e:	move.l d0,4(sp)
   13682:	move.l 4(sp),d0
}
   13686:	movea.l (sp)+,a6
   13688:	lea 12(sp),sp
   1368c:	rts

0001368e <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1368e:	       lea -24(sp),sp
   13692:	       move.l a6,-(sp)
    if (x > 0) {
   13694:	       clr.l -(sp)
   13696:	       move.l 40(sp),-(sp)
   1369a:	       jsr 1349a <__gtsf2>
   136a0:	       addq.l #8,sp
   136a2:	       tst.l d0
   136a4:	   /-- ble.s 136d6 <atan2f+0x48>
        return IEEESPAtan(y / x);
   136a6:	   |   move.l 36(sp),-(sp)
   136aa:	   |   move.l 36(sp),-(sp)
   136ae:	   |   jsr 131da <__divsf3>
   136b4:	   |   addq.l #8,sp
   136b6:	   |   move.l d0,8(sp)
   136ba:	   |   move.l 19c64 <MathIeeeSingTransBase>,d0
   136c0:	   |   movea.l d0,a6
   136c2:	   |   move.l 8(sp),d0
   136c6:	   |   jsr -30(a6)
   136ca:	   |   move.l d0,4(sp)
   136ce:	   |   move.l 4(sp),d0
   136d2:	/--|-- bra.w 13836 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   136d6:	|  \-> clr.l -(sp)
   136d8:	|      move.l 40(sp),-(sp)
   136dc:	|      jsr 13554 <__ltsf2>
   136e2:	|      addq.l #8,sp
   136e4:	|      tst.l d0
   136e6:	|  /-- bge.s 1375a <atan2f+0xcc>
   136e8:	|  |   clr.l -(sp)
   136ea:	|  |   move.l 36(sp),-(sp)
   136ee:	|  |   jsr 13416 <__gesf2>
   136f4:	|  |   addq.l #8,sp
   136f6:	|  |   tst.l d0
   136f8:	|  +-- blt.s 1375a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   136fa:	|  |   move.l 36(sp),-(sp)
   136fe:	|  |   move.l 36(sp),-(sp)
   13702:	|  |   jsr 131da <__divsf3>
   13708:	|  |   addq.l #8,sp
   1370a:	|  |   move.l d0,24(sp)
   1370e:	|  |   move.l 19c64 <MathIeeeSingTransBase>,d0
   13714:	|  |   movea.l d0,a6
   13716:	|  |   move.l 24(sp),d0
   1371a:	|  |   jsr -30(a6)
   1371e:	|  |   move.l d0,20(sp)
   13722:	|  |   move.l 20(sp),d0
   13726:	|  |   move.l d0,-(sp)
   13728:	|  |   jsr 13246 <__extendsfdf2>
   1372e:	|  |   addq.l #4,sp
   13730:	|  |   move.l #1413754136,-(sp)
   13736:	|  |   move.l #1074340347,-(sp)
   1373c:	|  |   move.l d1,-(sp)
   1373e:	|  |   move.l d0,-(sp)
   13740:	|  |   jsr 13116 <__adddf3>
   13746:	|  |   lea 16(sp),sp
   1374a:	|  |   move.l d1,-(sp)
   1374c:	|  |   move.l d0,-(sp)
   1374e:	|  |   jsr 13658 <__truncdfsf2>
   13754:	|  |   addq.l #8,sp
   13756:	+--|-- bra.w 13836 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1375a:	|  \-> clr.l -(sp)
   1375c:	|      move.l 40(sp),-(sp)
   13760:	|      jsr 13554 <__ltsf2>
   13766:	|      addq.l #8,sp
   13768:	|      tst.l d0
   1376a:	|  /-- bge.s 137dc <atan2f+0x14e>
   1376c:	|  |   clr.l -(sp)
   1376e:	|  |   move.l 36(sp),-(sp)
   13772:	|  |   jsr 13554 <__ltsf2>
   13778:	|  |   addq.l #8,sp
   1377a:	|  |   tst.l d0
   1377c:	|  +-- bge.s 137dc <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1377e:	|  |   move.l 36(sp),-(sp)
   13782:	|  |   move.l 36(sp),-(sp)
   13786:	|  |   jsr 131da <__divsf3>
   1378c:	|  |   addq.l #8,sp
   1378e:	|  |   move.l d0,16(sp)
   13792:	|  |   move.l 19c64 <MathIeeeSingTransBase>,d0
   13798:	|  |   movea.l d0,a6
   1379a:	|  |   move.l 16(sp),d0
   1379e:	|  |   jsr -30(a6)
   137a2:	|  |   move.l d0,12(sp)
   137a6:	|  |   move.l 12(sp),d0
   137aa:	|  |   move.l d0,-(sp)
   137ac:	|  |   jsr 13246 <__extendsfdf2>
   137b2:	|  |   addq.l #4,sp
   137b4:	|  |   move.l #1413754136,-(sp)
   137ba:	|  |   move.l #1074340347,-(sp)
   137c0:	|  |   move.l d1,-(sp)
   137c2:	|  |   move.l d0,-(sp)
   137c4:	|  |   jsr 135c0 <__subdf3>
   137ca:	|  |   lea 16(sp),sp
   137ce:	|  |   move.l d1,-(sp)
   137d0:	|  |   move.l d0,-(sp)
   137d2:	|  |   jsr 13658 <__truncdfsf2>
   137d8:	|  |   addq.l #8,sp
   137da:	+--|-- bra.s 13836 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   137dc:	|  \-> clr.l -(sp)
   137de:	|      move.l 40(sp),-(sp)
   137e2:	|      jsr 13210 <__eqsf2>
   137e8:	|      addq.l #8,sp
   137ea:	|      tst.l d0
   137ec:	|  /-- bne.s 13808 <atan2f+0x17a>
   137ee:	|  |   clr.l -(sp)
   137f0:	|  |   move.l 36(sp),-(sp)
   137f4:	|  |   jsr 1349a <__gtsf2>
   137fa:	|  |   addq.l #8,sp
   137fc:	|  |   tst.l d0
   137fe:	|  +-- ble.s 13808 <atan2f+0x17a>
        return PI / 2;
   13800:	|  |   move.l #1070141403,d0
   13806:	+--|-- bra.s 13836 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   13808:	|  \-> clr.l -(sp)
   1380a:	|      move.l 40(sp),-(sp)
   1380e:	|      jsr 13210 <__eqsf2>
   13814:	|      addq.l #8,sp
   13816:	|      tst.l d0
   13818:	|  /-- bne.s 13834 <atan2f+0x1a6>
   1381a:	|  |   clr.l -(sp)
   1381c:	|  |   move.l 36(sp),-(sp)
   13820:	|  |   jsr 13554 <__ltsf2>
   13826:	|  |   addq.l #8,sp
   13828:	|  |   tst.l d0
   1382a:	|  +-- bge.s 13834 <atan2f+0x1a6>
        return -PI / 2;
   1382c:	|  |   move.l #-1077342245,d0
   13832:	+--|-- bra.s 13836 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   13834:	|  \-> moveq #0,d0
    }
}
   13836:	\----> movea.l (sp)+,a6
   13838:	       lea 24(sp),sp
   1383c:	       rts

0001383e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1383e:	lea -24(sp),sp
   13842:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   13844:	move.l 32(sp),20(sp)
   1384a:	move.l 36(sp),24(sp)
   13850:	move.l 19c6c <MathIeeeDoubTransBase>,d0
   13856:	movea.l d0,a6
   13858:	move.l 20(sp),d0
   1385c:	move.l 24(sp),d1
   13860:	jsr -96(a6)
   13864:	move.l d0,4(sp)
   13868:	move.l d1,8(sp)
   1386c:	move.l 4(sp),12(sp)
   13872:	move.l 8(sp),16(sp)
   13878:	move.l 12(sp),d0
   1387c:	move.l 16(sp),d1
}
   13880:	movea.l (sp)+,a6
   13882:	lea 24(sp),sp
   13886:	rts

00013888 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   13888:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1388c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13890:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   13894:	mulu.w 8(sp),d1
	addw	d1, d0
   13898:	add.w d1,d0
	swap	d0
   1389a:	swap d0
	clrw	d0
   1389c:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1389e:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   138a2:	mulu.w 10(sp),d1
	addl	d1, d0
   138a6:	add.l d1,d0
	rts
   138a8:	rts

000138aa <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   138aa:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   138ac:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   138b0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   138b4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   138ba:	   /-- bcc.s 138d2 <__udivsi3+0x28>
	movel	d0, d2
   138bc:	   |   move.l d0,d2
	clrw	d2
   138be:	   |   clr.w d2
	swap	d2
   138c0:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   138c2:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   138c4:	   |   move.w d2,d0
	swap	d0
   138c6:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   138c8:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   138cc:	   |   divu.w d1,d2
	movew	d2, d0
   138ce:	   |   move.w d2,d0
	jra	6f
   138d0:	/--|-- bra.s 13902 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   138d2:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   138d4:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   138d6:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   138d8:	|  |   cmpi.l #65536,d1
	jcc	4b
   138de:	|  \-- bcc.s 138d4 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   138e0:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   138e2:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   138e8:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   138ea:	|      mulu.w d0,d1
	swap	d2
   138ec:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   138ee:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   138f0:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   138f2:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   138f4:	|  /-- bne.s 13900 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   138f6:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   138f8:	|  +-- bcs.s 13900 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   138fa:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   138fe:	+--|-- bls.s 13902 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   13900:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   13902:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13904:	       rts

00013906 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   13906:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   13908:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1390a:	    move.l 12(sp),d1
	jpl	1f
   1390e:	/-- bpl.s 13914 <__divsi3+0xe>
	negl	d1
   13910:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   13912:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   13914:	\-> move.l 8(sp),d0
	jpl	2f
   13918:	/-- bpl.s 1391e <__divsi3+0x18>
	negl	d0
   1391a:	|   neg.l d0
	negb	d2
   1391c:	|   neg.b d2

2:	movel	d1, sp@-
   1391e:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13920:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   13922:	    jsr 138aa <__udivsi3>
	addql	#8, sp
   13928:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1392a:	    tst.b d2
	jpl	3f
   1392c:	/-- bpl.s 13930 <__divsi3+0x2a>
	negl	d0
   1392e:	|   neg.l d0

3:	movel	sp@+, d2
   13930:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13932:	    rts

00013934 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13934:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13938:	move.l 4(sp),d0
	movel	d1, sp@-
   1393c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1393e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   13940:	jsr 13906 <__divsi3>
	addql	#8, sp
   13946:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13948:	move.l 8(sp),d1
	movel	d1, sp@-
   1394c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1394e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   13950:	jsr 13888 <__mulsi3>
	addql	#8, sp
   13956:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13958:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1395c:	sub.l d0,d1
	movel	d1, d0
   1395e:	move.l d1,d0
	rts
   13960:	rts

00013962 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13962:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13966:	move.l 4(sp),d0
	movel	d1, sp@-
   1396a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1396c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1396e:	jsr 138aa <__udivsi3>
	addql	#8, sp
   13974:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13976:	move.l 8(sp),d1
	movel	d1, sp@-
   1397a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1397c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1397e:	jsr 13888 <__mulsi3>
	addql	#8, sp
   13984:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13986:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1398a:	sub.l d0,d1
	movel	d1, d0
   1398c:	move.l d1,d0
	rts
   1398e:	rts

00013990 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   13990:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   13992:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   13996:	jsr -516(a6)
    move.l (sp)+, a6
   1399a:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1399c:	rts

0001399e <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1399e:	move.b d0,(a3)+
	rts
   139a0:	rts
